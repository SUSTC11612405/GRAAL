class C{  protected void closeFile(){  if (this.qw != null) {    try {      this.qw.close();    } catch (    java.io.IOException e) {      LogLog.error("Could not close " + qw,e);    }  }}  }
class C{  protected void validateAccountOwner(Factory factory,String userId) throws ApiException {  Author author=factory.getCreator();  if (author == null || author.getAccountId() == null) {    throw new ForbiddenException(format("You are not authorized for the factory '%s'",factory.getId()));  }  String factoryAccountId=factory.getCreator().getAccountId();  List<Member> members=accountDao.getMembers(factoryAccountId);  if (members.isEmpty()) {    throw new ForbiddenException(format("You are not authorized for the factory '%s'",factory.getId()));  }  boolean isOwner=false;  for (  Member accountMember : members) {    if (accountMember.getUserId().equals(userId) && accountMember.getRoles().contains("account/owner")) {      isOwner=true;      break;    }  }  if (!isOwner) {    throw new ForbiddenException(format("You are not an account/owner for the factory '%s'",factory.getId()));  }}  }
class C{  public DateTick(TickType tickType,Date date,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  super(tickType,date.getTime(),label,textAnchor,rotationAnchor,angle);  ParamChecks.nullNotPermitted(tickType,"tickType");  this.date=date;}  }
class C{  public Map<Integer,Double> compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public Instant plus(long duration){  return withDurationAdded(duration,1);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe class index (first and last are valid as well).\n" + "\t(default: last)","C",1,"-C <class index>"));  result.addElement(new Option("\tCompresses the data (uses '" + XRFFLoader.FILE_EXTENSION_COMPRESSED + "' as extension instead of '"+ XRFFLoader.FILE_EXTENSION+ "')\n"+ "\t(default: off)","compress",0,"-compress"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public Vector3i sub(Vector3i v,Vector3i dest){  dest.x=x - v.x;  dest.y=y - v.y;  dest.z=z - v.z;  return dest;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_DELETE) public BusinessObjectDataAttribute deleteBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName){  return businessObjectDataAttributeService.deleteBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value),businessObjectDataVersion,businessObjectDataAttributeName));}  }
class C{  public TemaDBEntity(DbDataSource dataSource){  super(dataSource);}  }
class C{  private void run(){  int regSz=ssaMeth.getRegCount();  ArrayList<TypedConstant> constantList=getConstsSortedByCountUse();  int toCollect=Math.min(constantList.size(),MAX_COLLECTED_CONSTANTS);  SsaBasicBlock start=ssaMeth.getEntryBlock();  HashMap<TypedConstant,RegisterSpec> newRegs=new HashMap<TypedConstant,RegisterSpec>(toCollect);  for (int i=0; i < toCollect; i++) {    TypedConstant cst=constantList.get(i);    RegisterSpec result=RegisterSpec.make(ssaMeth.makeNewSsaReg(),cst);    Rop constRop=Rops.opConst(cst);    if (constRop.getBranchingness() == Rop.BRANCH_NONE) {      start.addInsnToHead(new PlainCstInsn(Rops.opConst(cst),SourcePosition.NO_INFO,result,RegisterSpecList.EMPTY,cst));    } else {      SsaBasicBlock entryBlock=ssaMeth.getEntryBlock();      SsaBasicBlock successorBlock=entryBlock.getPrimarySuccessor();      SsaBasicBlock constBlock=entryBlock.insertNewSuccessor(successorBlock);      constBlock.replaceLastInsn(new ThrowingCstInsn(constRop,SourcePosition.NO_INFO,RegisterSpecList.EMPTY,StdTypeList.EMPTY,cst));      SsaBasicBlock resultBlock=constBlock.insertNewSuccessor(successorBlock);      PlainInsn insn=new PlainInsn(Rops.opMoveResultPseudo(result.getTypeBearer()),SourcePosition.NO_INFO,result,RegisterSpecList.EMPTY);      resultBlock.addInsnToHead(insn);    }    newRegs.put(cst,result);  }  updateConstUses(newRegs,regSz);}  }
class C{  public int nrOfSubSections(){  return sections.size();}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawLine(x,y,x + SHAPE_WIDTH,y,paint);  if (isRenderPoints(renderer)) {    pointsChart.drawLegendShape(canvas,renderer,x + 5,y,seriesIndex,paint);  }}  }
class C{  @Override public String toString(){  return this.location + " <" + this.qName+ ">";}  }
class C{  protected void updateValueCache(){  DataTable dataTable=plotInstance.getPlotData().getDataTable();  cachedValues=new LinkedList<Double>();  if (columnIdx.getIndex() == -1) {    cachedMinValue=Double.NaN;    cachedMaxValue=Double.NaN;    return;  }  cachedMinValue=Double.POSITIVE_INFINITY;  cachedMaxValue=Double.NEGATIVE_INFINITY;  boolean useUserDefinedRange=getDimensionConfig().isUsingUserDefinedLowerBound() || getDimensionConfig().isUsingUserDefinedUpperBound();  ValueRange userDefinedRange=null;  if (useUserDefinedRange) {    userDefinedRange=getDimensionConfig().getUserDefinedRangeClone(dataTable);    if (userDefinedRange instanceof NumericalValueRange) {      NumericalValueRange numericalUserDefinedRange=(NumericalValueRange)userDefinedRange;      if (!getDimensionConfig().isUsingUserDefinedLowerBound()) {        numericalUserDefinedRange.setLowerBound(Double.NEGATIVE_INFINITY);      }      if (!getDimensionConfig().isUsingUserDefinedUpperBound()) {        numericalUserDefinedRange.setUpperBound(Double.POSITIVE_INFINITY);      }      userDefinedRange=numericalUserDefinedRange;    }  }  for (  DataTableRow row : dataTable) {    if (!useUserDefinedRange || userDefinedRange.keepRow(row)) {      Double value=row.getValue(columnIdx.getIndex());      cachedValues.add(value);      if (!Double.isInfinite(value) && !Double.isNaN(value)) {        if (cachedMinValue > value) {          cachedMinValue=value;        }        if (cachedMaxValue < value) {          cachedMaxValue=value;        }      }    }  }  if (cachedMaxValue < cachedMinValue) {    boolean maxInfinite=Double.isInfinite(cachedMaxValue);    boolean minInfinite=Double.isInfinite(cachedMinValue);    if (maxInfinite || minInfinite) {      if (maxInfinite) {        cachedMaxValue=Double.POSITIVE_INFINITY;      }      if (minInfinite) {        cachedMinValue=Double.NEGATIVE_INFINITY;      }    } else {      cachedMaxValue=cachedMinValue + 1;    }  }}  }
class C{  protected boolean[] testToString(){  boolean[] result=new boolean[2];  print("toString...");  try {    Classifier copy=m_Classifier.getClass().newInstance();    copy.toString();    result[0]=true;    println("yes");  } catch (  Exception e) {    result[0]=false;    println("no");    if (m_Debug) {      println("\n=== Full report ===");      e.printStackTrace();      println("\n");    }  }  return result;}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  private void update(final RPObject object){  boolean streaming=false;  if (object.has("radius")) {    radius=object.getInt("radius");  }  if (object.has("volume")) {    volume=Numeric.intToFloat(object.getInt("volume"),100.0f);  }  if (object.has("layer")) {    final int idx=object.getInt("layer");    SoundLayer layer;    if (idx < SoundLayer.values().length) {      layer=SoundLayer.values()[idx];      group=ClientSingletonRepository.getSound().getGroup(layer.groupName);    } else {      layer=null;      group=null;    }    fadingDuration.set(100,Time.Unit.MILLI);    if (layer == SoundLayer.BACKGROUND_MUSIC) {      streaming=true;      fadingDuration.set(3,Time.Unit.SEC);      group.enableStreaming();    }  }  if (object.has("sound")) {    soundName=object.get("sound");    group.loadSound(soundName,soundName + ".ogg",SoundFileType.OGG,streaming);  }}  }
class C{  void repaint(final Animation cmp){  impl.repaint(cmp);}  }
class C{  protected void applyChanges(List entries){{    Iterator<Map.Entry<LocalRegion,TXRegionState>> it=this.regions.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<LocalRegion,TXRegionState> me=it.next();      LocalRegion r=me.getKey();      TXRegionState txrs=me.getValue();      txrs.applyChangesStart(r,this);    }  }{    Iterator it=entries.iterator();    while (it.hasNext()) {      TXEntryStateWithRegionAndKey o=(TXEntryStateWithRegionAndKey)it.next();      try {        o.es.applyChanges(o.r,o.key,this);      } catch (      RegionDestroyedException ex) {      }catch (      CancelException ex) {      }    }  }{    Iterator<Map.Entry<LocalRegion,TXRegionState>> it=this.regions.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<LocalRegion,TXRegionState> me=it.next();      LocalRegion r=me.getKey();      TXRegionState txrs=me.getValue();      txrs.applyChangesEnd(r,this);    }  }}  }
class C{  @Override public java.sql.Driver createDriver(Properties properties) throws SQLException {  if (properties != null && !properties.isEmpty()) {    throw new SQLException();  }  return driver;}  }
class C{  public void deploy(List<Deployable> deployables){  for (  Deployable deployable : deployables) {    deploy(deployable);  }}  }
class C{  public static void reset(){  throwIOException=false;  throwHTTPException=false;}  }
class C{  public FXGMatrix(double a,double b,double c,double d,double tx,double ty){  this.a=a;  this.b=b;  this.c=c;  this.d=d;  this.tx=tx;  this.ty=ty;}  }
class C{  public boolean isEating(){  return eating;}  }
class C{  public DrawerBuilder withAdapterWrapper(@NonNull RecyclerView.Adapter adapterWrapper){  if (mAdapter == null) {    throw new RuntimeException("this adapter has to be set in conjunction to a normal adapter which is used inside this wrapper adapter");  }  this.mAdapterWrapper=adapterWrapper;  return this;}  }
class C{  public char[] computeUniqueKey(boolean isLeaf){  if (!isLeaf)   return signature();  return genericTypeSignature();}  }
class C{  public Meeting rename(String name){  return new Meeting(name,null);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("StatusInfo ");  if (fSeverity == OK) {    buf.append("OK");  } else   if (fSeverity == ERROR) {    buf.append("ERROR");  } else   if (fSeverity == WARNING) {    buf.append("WARNING");  } else   if (fSeverity == INFO) {    buf.append("INFO");  } else {    buf.append("severity=");    buf.append(fSeverity);  }  buf.append(": ");  buf.append(fStatusMessage);  return buf.toString();}  }
class C{  public void draw(GL10 gl){  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glColor4f(color[0],color[1],color[2],color[3]);  gl.glVertexPointer(COORDS_PER_VERTEX,GL10.GL_FLOAT,0,vertexBuffer);  gl.glDrawArrays(GL10.GL_TRIANGLES,0,triangleCoords.length / COORDS_PER_VERTEX);  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);}  }
class C{  private long findAfter(long offset){  if (size == 0) {    return -1;  }  int low=0;  int high=size - 1;  while (low <= high) {    int mid=low + ((high - low) / 2);    long i=buffer.readLong(mid * ENTRY_SIZE);    if (i < offset) {      low=mid + 1;    } else     if (i > offset) {      high=mid - 1;    } else {      return mid;    }  }  return (low < high) ? low + 1 : high + 1;}  }
class C{  public Color stringToColor(String string){  return CSS.stringToColor(string);}  }
class C{  public StatelessThroughputBasedPartitioner(){  super();}  }
class C{  public boolean hasRecurrenceException(){  return super.hasElement(RecurrenceException.KEY);}  }
class C{  public LogStream print(double d){  if (ps != null) {    indent();    lineBuffer.append(d);  }  return this;}  }
class C{  public EmbeddedMetaService(String jolieHome,String metaserviceFilepath) throws IOException, ExecutionException {  try {    interpreter=new Interpreter(buildInterpreterArguments(jolieHome,metaserviceFilepath),this.getClass().getClassLoader(),null);    startInterpreter();    channel=new MetaServiceChannel(this,"/");  } catch (  CommandLineException e) {    throw new IOException(e);  }catch (  FileNotFoundException e) {    throw new IOException(e);  }}  }
class C{  protected void finished(Description description){}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double eccentricity,double height){  this(sides,radiusTop,radiusBase,eccentricity,height,true);}  }
class C{  public static final void warning(String message){  logExpensive(Level.WARNING,message);}  }
class C{  static double evaluate(Problem problem,NondominatedPopulation approximationSet){  if (approximationSet.size() < 2) {    return 0.0;  }  double[] d=new double[approximationSet.size()];  for (int i=0; i < approximationSet.size(); i++) {    double min=Double.POSITIVE_INFINITY;    Solution solutionI=approximationSet.get(i);    if (solutionI.violatesConstraints()) {      continue;    }    for (int j=0; j < approximationSet.size(); j++) {      if (i != j) {        Solution solutionJ=approximationSet.get(j);        if (solutionJ.violatesConstraints()) {          continue;        }        min=Math.min(min,IndicatorUtils.manhattanDistance(problem,solutionI,solutionJ));      }    }    d[i]=min;  }  double dbar=StatUtils.sum(d) / approximationSet.size();  double sum=0.0;  for (int i=0; i < approximationSet.size(); i++) {    if (approximationSet.get(i).violatesConstraints()) {      continue;    }    sum+=Math.pow(d[i] - dbar,2.0);  }  return Math.sqrt(sum / (approximationSet.size() - 1));}  }
class C{  public LongLazyValue(Collection<? super LongLazyValue> collection,LongSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public void addAll(HyperLogLog other) throws CardinalityMergeException {  if (this.sizeof() != other.sizeof()) {    throw new HyperLogLogMergeException("Cannot merge estimators of different sizes");  }  registerSet.merge(other.registerSet);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void clear(){  m_Words.clear();}  }
class C{  public final double sampleSigma(int n){synchronized (_lock) {    long count=_totalCount.get();    long lastCount=_lastStdTotalCount;    _lastStdTotalCount=count;    double sum=_sum.get();    double lastSum=_lastStdSum;    _lastStdSum=sum;    double sumSquare=_sumSquare;    _sumSquare=0;    if (count == lastCount)     return 0;    double avg=(sum - lastSum) / (count - lastCount);    double part=(count - lastCount) * sumSquare - sum * sum;    if (part < 0)     part=0;    double std=Math.sqrt(part) / (count - lastCount);    return _scale * (avg + n * std);  }}  }
class C{  public static void showInputSheet(Component parentComponent,Object message,int messageType,@Nullable Icon icon,@Nullable Object[] selectionValues,@Nullable Object initialSelectionValue,SheetListener listener){  JOptionPane pane=new JOptionPane(message,messageType,JOptionPane.OK_CANCEL_OPTION,icon,null,null);  pane.setWantsInput(true);  pane.setSelectionValues(selectionValues);  pane.setInitialSelectionValue(initialSelectionValue);  pane.setComponentOrientation(((parentComponent == null) ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JSheet sheet=createSheet(pane,parentComponent,style);  pane.selectInitialValue();  sheet.addSheetListener(listener);  sheet.show();  sheet.toFront();}  }
class C{  public boolean isValidAllotment(final String zoneName,final String allotment){  for (  Entity e : getTrackers(zoneName)) {    if (((ExpirationTracker)e).getIdentifier().equals(ALLOTMENT_PREFIX + allotment)) {      return true;    }  }  return false;}  }
class C{  private void staticInitialise(){  createNewChargePanel();  createAccountPanel();  createConfirmPanel();  return;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException ex,boolean result,int numBucketsIndexesRemoved,int numTotalBuckets){  RemoveIndexesReplyMessage rmIndMsg=new RemoveIndexesReplyMessage(processorId,ex,result,numBucketsIndexesRemoved,numTotalBuckets);  rmIndMsg.setRecipient(recipient);  dm.putOutgoing(rmIndMsg);}  }
class C{  void addStateChangeListener(@NotNull final Runnable listener){  myStateChangeListeners.add(listener);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public T caseAssociationPosition_(AssociationPosition_ object){  return null;}  }
class C{  protected final void _writePPFieldName(String name,boolean commaBefore) throws IOException, JsonGenerationException {  if (commaBefore) {    _cfgPrettyPrinter.writeObjectEntrySeparator(this);  } else {    _cfgPrettyPrinter.beforeObjectEntries(this);  }  if (isEnabled(Feature.QUOTE_FIELD_NAMES)) {    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]=BYTE_QUOTE;    final int len=name.length();    if (len <= _charBufferLength) {      name.getChars(0,len,_charBuffer,0);      if (len <= _outputMaxContiguous) {        if ((_outputTail + len) > _outputEnd) {          _flushBuffer();        }        _writeStringSegment(_charBuffer,0,len);      } else {        _writeStringSegments(_charBuffer,0,len);      }    } else {      _writeStringSegments(name);    }    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]=BYTE_QUOTE;  } else {    _writeStringSegments(name);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, maxZ, noData, outputNoData;  int i, whichCell;  int[] dX=new int[]{-1,0,-1,0};  int[] dY=new int[]{-1,-1,0,0};  int numScanCells=dX.length;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,1);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxZ=z;          whichCell=3;          for (i=0; i < (numScanCells - 1); i++) {            z=DEM.getValue(row + dY[i],col + dX[i]);            if (z != noData) {              if (z > maxZ) {                maxZ=z;                whichCell=i;              }            }          }          output.setValue(row + dY[whichCell],col + dX[whichCell],0);        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Deprecated public void authenticateToSharedNote(String guid,String noteKey,String authToken,OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"authenticateToSharedNote",guid,noteKey,authToken);}  }
class C{  public ToneScore(){}  }
class C{  public LeaderElectedServiceNode(CuratorFramework zkClient,String serviceName,InetSocketAddress address,ExecutorService executorService){  super(zkClient,serviceName,address);  this.zkClient=zkClient;  this.serviceName=serviceName;  this.address=address;  this.executorService=executorService;  leaderLatch=null;}  }
class C{  private void deliverResult(@NonNull final OperationDelivery<?> operationDelivery){  logd("deliver delivery " + operationDelivery);switch (operationDelivery.getDeliveryMode()) {case NORMAL:    deliverResult(operationDelivery.getResult(),Chronos.OWN_CALLBACK_METHOD_NAME,true);  break;case BROADCAST:deliverResult(operationDelivery.getResult(),Chronos.BROADCAST_CALLBACK_METHOD_NAME,false);break;default :break;}}  }
class C{  public int numAnnotations(){  return ByteArray.readU16bit(info,0);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  } else   if ((object == null) || (getClass() != object.getClass())) {    return false;  }  CriticalSlot other=(CriticalSlot)object;  return ((other.getType() == type) && (other.getIndex() == index) && (((other.getMount() != null) && (mount != null) && other.getMount().equals(mount)) || ((mount == null) && (other.getMount() == null))));}  }
class C{  private OpenIDTokenType(String uriValue){  _tokenTypeUri=uriValue;}  }
class C{  public void testManagedPropertyMixedVERegresssion() throws Exception {  Map<String,Object> requestMap=getFacesContext().getExternalContext().getRequestMap();  requestMap.put("val","String");  List<ManagedBeanInfo.ManagedProperty> properties=new ArrayList<ManagedBeanInfo.ManagedProperty>(1);  ManagedBeanInfo.ManagedProperty property=new ManagedBeanInfo.ManagedProperty("modelLabel",null,"#{'this'} is a String",null,null);  properties.add(property);  ManagedBeanInfo bean=new ManagedBeanInfo(beanName,beanName,"request",null,null,properties,null);  BeanManager beanManager=ApplicationAssociate.getCurrentInstance().getBeanManager();  beanManager.register(bean);  testBean=(TestBean)beanManager.create(beanName,getFacesContext());  assertTrue("this is a String","this is a String".equals(testBean.getModelLabel()));}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public static String before(String s,String token){  if (s == null) {    return null;  }  int i=s.indexOf(token);  if (i == -1) {    return s;  }  return s.substring(0,i);}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  final GaugeMonitorObservedObject o=(GaugeMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  if (value instanceof Integer) {    o.setType(INTEGER);  } else   if (value instanceof Byte) {    o.setType(BYTE);  } else   if (value instanceof Short) {    o.setType(SHORT);  } else   if (value instanceof Long) {    o.setType(LONG);  } else   if (value instanceof Float) {    o.setType(FLOAT);  } else   if (value instanceof Double) {    o.setType(DOUBLE);  } else {    return false;  }  return true;}  }
class C{  public void removeSelectionChangedListener(SelectionChangedListener l){  listenerList.remove(SelectionChangedListener.class,l);}  }
class C{  private IgfsPath filePath(int j){  return new IgfsPath(SUBDIR,"file" + j);}  }
class C{  public void add(int regV,int regW){  ensureCapacity(Math.max(regV,regW) + 1);  interference.get(regV).add(regW);  interference.get(regW).add(regV);}  }
class C{  public String fontName(){  return null;}  }
class C{  public final void update(ByteBuffer input){  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  if (input == null) {    throw new IllegalArgumentException("Buffer must not be null");  }  spi.engineUpdate(input);}  }
class C{  private boolean adjustVerticalOffsetIfNecessary(){  int maxY=Math.max(myEditor.getLineHeight(),myEditor.getDocument().getLineCount() * myEditor.getLineHeight());  int minPreferredY=maxY - getVisibleArea().height * 2 / 3;  final int currentOffset=getVerticalScrollOffset();  int offsetToUse=Math.min(minPreferredY,currentOffset);  if (offsetToUse != currentOffset) {    scrollToOffsets(getHorizontalScrollOffset(),offsetToUse);    return true;  }  return false;}  }
class C{  public static boolean isIMMcode(final String in,final boolean mainCycle){  if (in.length() != 2) {    return false;  }  if ("0123456789".indexOf(in.charAt(1)) == -1) {    return false;  }  String str1;  if (mainCycle) {    str1="hmzuHMZU";  } else {    str1="fghjkmnquvxzFGHJKMNQUVXZ";  }  if (str1.indexOf(in.charAt(0)) == -1) {    return false;  }  return true;}  }
class C{  private void convertToNormal(){  mergeTempList();  this.registerSet=new RegisterSet((int)Math.pow(2,p));  for (  int k : sparseSet) {    int idx=getIndex(k,p);    int r=decodeRunLength(k);    registerSet.updateIfGreater(idx,r);  }  format=Format.NORMAL;  tmpSet=null;  sparseSet=null;}  }
class C{  public CoverageCharVdt(String t,String a,String v){  table=t.toLowerCase().intern();  attribute=a.toLowerCase().intern();  value=v.intern();}  }
class C{  public static List<MatchedEventMap> generateMatchEvents(MatchedEventMap matchEvent,Object[] eventsPerChild,int indexFrom){  ArrayList<List<MatchedEventMap>> listArray=new ArrayList<List<MatchedEventMap>>();  int index=0;  for (int i=0; i < eventsPerChild.length; i++) {    Object eventsChild=eventsPerChild[i];    if (indexFrom != i && eventsChild != null) {      if (eventsChild instanceof MatchedEventMap) {        listArray.add(index++,Collections.singletonList((MatchedEventMap)eventsChild));      } else {        listArray.add(index++,(List<MatchedEventMap>)eventsChild);      }    }  }  List<MatchedEventMap> results=new ArrayList<MatchedEventMap>();  generateMatchEvents(listArray,0,results,matchEvent);  return results;}  }
class C{  default void environmentBind(EnvironmentClassLoader loader){}  }
class C{  static boolean isValidInterval(long pwdRecoveryStartDate){  Date current=new Date();  long currentDate=current.getTime();  long minutes=currentDate - pwdRecoveryStartDate;  return (minutes > INTERVAL);}  }
class C{  public static void testWritable(Writable before,Configuration conf) throws Exception {  TestCase.assertEquals(before,writeRead(before,conf));}  }
class C{  public boolean isEnableBatchRendering(){  return this.enableBatchRendering;}  }
class C{  public StatementBuilder(){}  }
class C{  public static void main(String[] args){  Circle2D c1=new Circle2D(2,2,5.5);  System.out.println("Circle1 area: " + c1.getArea());  System.out.println("Circle1 perimeter: " + c1.getPerimeter());  System.out.println("Does circle1 contain the point (3, 3)? " + c1.contains(3,3));  System.out.println("Does circle1 contain the circle centered at (4, 5) and radius 10.5? " + c1.contains(new Circle2D(4,5,10.5)));  System.out.println("Does circle1 overlap the circle centered at (3, 5) and radius 2.3? " + c1.overlaps(new Circle2D(3,5,2.3)));}  }
class C{  public static List<org.oscm.vo.VOParameterOption> convertToApiVOParameterOption(List<org.oscm.internal.vo.VOParameterOption> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOParameterOption> newVO=new ArrayList<org.oscm.vo.VOParameterOption>();  for (  org.oscm.internal.vo.VOParameterOption tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public StoryExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public GridCacheVersion isolatedStreamerVersion(){  if (ISOLATED_STREAMER_VER == null) {    long topVer=1;    if (gridStartTime == 0)     gridStartTime=cctx.kernalContext().discovery().gridStartTime();    topVer+=(gridStartTime - TOP_VER_BASE_TIME) / 1000;    ISOLATED_STREAMER_VER=new GridCacheVersion((int)topVer,0,0,1,dataCenterId);  }  return ISOLATED_STREAMER_VER;}  }
class C{  public UtilSSLSocketFactory disableDiffieHellman(){  diffieHellmanDisabled=true;  return this;}  }
class C{  public AbstractRequest putField(String key,String value){  fields.put(key,value);  return this;}  }
class C{  public Workflow.Method zoneExportMasksDeleteMethod(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs){  return new Workflow.Method("zoneExportMasksDelete",zoningParams,volumeURIs);}  }
class C{  public Boolean isSuppressPowerOn(){  return suppressPowerOn;}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  protected void addProperties(Map<String,String> propMap) throws OpenStegoException {  super.addProperties(propMap);}  }
class C{  boolean overlaps(FileWriteOperation other){  if (isTruncate() && other.isTruncate()) {    return true;  }  if (isTruncate()) {    return position < other.getEndPosition();  } else   if (other.isTruncate()) {    return getEndPosition() > other.position;  }  return position < other.getEndPosition() && getEndPosition() > other.position;}  }
class C{  public ExifReader(byte[] data){  _data=data;}  }
class C{  private synchronized void doSaveAlphaImages(){  terrainNode=null;  Terrain terrain=(Terrain)getTerrain(rootNode);  AssetManager manager=SceneApplication.getApplication().getAssetManager();  String assetFolder=null;  if (manager != null && manager instanceof ProjectAssetManager)   assetFolder=((ProjectAssetManager)manager).getAssetFolderName();  if (assetFolder == null)   throw new IllegalStateException("AssetManager was not a ProjectAssetManager. Could not locate image save directories.");  Texture alpha1=doGetAlphaTexture(terrain,0);  BufferedImage bi1=ImageToAwt.convert(alpha1.getImage(),false,true,0);  File imageFile1=new File(assetFolder + "/" + alpha1.getKey().getName());  Texture alpha2=doGetAlphaTexture(terrain,1);  BufferedImage bi2=ImageToAwt.convert(alpha2.getImage(),false,true,0);  File imageFile2=new File(assetFolder + "/" + alpha2.getKey().getName());  Texture alpha3=doGetAlphaTexture(terrain,2);  BufferedImage bi3=ImageToAwt.convert(alpha3.getImage(),false,true,0);  File imageFile3=new File(assetFolder + "/" + alpha3.getKey().getName());  ImageOutputStream ios1=null;  ImageOutputStream ios2=null;  ImageOutputStream ios3=null;  try {    ios1=new FileImageOutputStream(imageFile1);    ios2=new FileImageOutputStream(imageFile2);    ios3=new FileImageOutputStream(imageFile3);    ImageIO.write(bi1,"png",ios1);    ImageIO.write(bi2,"png",imageFile2);    ImageIO.write(bi3,"png",imageFile3);  } catch (  IOException ex) {    System.out.println("Failed saving alphamaps");    System.out.println("    " + imageFile1);    System.out.println("    " + imageFile2);    System.out.println("    " + imageFile3);    Exceptions.printStackTrace(ex);  } finally {    try {      if (ios1 != null)       ios1.close();    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }    try {      if (ios2 != null)       ios2.close();    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }    try {      if (ios3 != null)       ios3.close();    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }  }}  }
class C{  private void compareFileContents(File expected,File actual) throws IOException {  assertEquals(expected.isDirectory(),actual.isDirectory());  assertEquals(expected.getName(),actual.getName());  if (expected.isDirectory()) {    File[] expectedChildren=expected.listFiles();    Arrays.sort(expectedChildren);    File[] actualChildren=actual.listFiles();    Arrays.sort(actualChildren);    assertThat(actualChildren,arrayWithSize(expectedChildren.length));    for (int i=0; i < expectedChildren.length; i++) {      compareFileContents(expectedChildren[i],actualChildren[i]);    }  } else {    assertTrue(Files.equal(expected,actual));  }}  }
class C{  public double dateToJava2D(Date date,Rectangle2D area,RectangleEdge edge){  double value=date.getTime();  return valueToJava2D(value,area,edge);}  }
class C{  protected void writeComponent(Element elem) throws IOException {}  }
class C{  public static void evolve(RealVariable v,double distributionIndex){  double u=PRNG.nextDouble();  double x=v.getValue();  double lb=v.getLowerBound();  double ub=v.getUpperBound();  double dx=ub - lb;  double delta;  if (u < 0.5) {    double bl=(x - lb) / dx;    double b=2 * u + (1 - 2 * u) * (Math.pow(1 - bl,(distributionIndex + 1)));    delta=Math.pow(b,(1.0 / (distributionIndex + 1))) - 1.0;  } else {    double bu=(ub - x) / dx;    double b=2 * (1 - u) + 2 * (u - 0.5) * (Math.pow(1 - bu,(distributionIndex + 1)));    delta=1.0 - Math.pow(b,(1.0 / (distributionIndex + 1)));  }  x=x + delta * dx;  if (x < lb) {    x=lb;  } else   if (x > ub) {    x=ub;  }  v.setValue(x);}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  Object[] template=determineTemplate(run);  String[] newKey=new String[template.length - 1];  System.arraycopy(template,0,newKey,0,m_KeyIndex);  System.arraycopy(template,m_KeyIndex + 1,newKey,m_KeyIndex,template.length - m_KeyIndex - 1);  m_ResultListener.acceptResult(this,newKey,null);}  }
class C{  public void addKeyword(String keyword,MutableAttributeSet attr){  if (m_CaseSensitive) {    m_Keywords.put(keyword,attr);  } else {    m_Keywords.put(keyword.toLowerCase(),attr);  }}  }
class C{  @Override public void close(){  if (tempStore != null) {    if (log.isInfoEnabled()) {      log.info("closing rdr history");    }    tempStore.close();    tempStore=null;    buffer.reset();    buffer=null;  }}  }
class C{  public static Criterion createCriterion(ParameterHandler handler,double minimalGain) throws OperatorException {  String criterionName=handler.getParameterAsString(PARAMETER_CRITERION);  Class<?> criterionClass=null;  for (int i=0; i < CRITERIA_NAMES.length; i++) {    if (CRITERIA_NAMES[i].equals(criterionName)) {      criterionClass=CRITERIA_CLASSES[i];    }  }  if (criterionClass == null && criterionName != null) {    try {      criterionClass=Tools.classForName(criterionName);    } catch (    ClassNotFoundException e) {      throw new OperatorException("Cannot find criterion '" + criterionName + "' and cannot instantiate a class with this name.");    }  }  if (criterionClass != null) {    try {      Criterion criterion=(Criterion)criterionClass.newInstance();      if (criterion instanceof MinimalGainHandler) {        ((MinimalGainHandler)criterion).setMinimalGain(minimalGain);      }      return criterion;    } catch (    InstantiationException e) {      throw new OperatorException("Cannot instantiate criterion class '" + criterionClass.getName() + "'.");    }catch (    IllegalAccessException e) {      throw new OperatorException("Cannot access criterion class '" + criterionClass.getName() + "'.");    }  } else {    throw new OperatorException("No relevance criterion defined.");  }}  }
class C{  public static String copyToString(Reader in) throws IOException {  StringWriter out=new StringWriter();  copy(in,out);  return out.toString();}  }
class C{  public MersenneTwister64(Date d){  super(d);}  }
class C{  public FileCacheImageInputStream(InputStream stream,File cacheDir) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  if ((cacheDir != null) && !(cacheDir.isDirectory())) {    throw new IllegalArgumentException("Not a directory!");  }  this.stream=stream;  if (cacheDir == null)   this.cacheFile=Files.createTempFile("imageio",".tmp").toFile(); else   this.cacheFile=Files.createTempFile(cacheDir.toPath(),"imageio",".tmp").toFile();  this.cache=new RandomAccessFile(cacheFile,"rw");  this.closeAction=StreamCloser.createCloseAction(this);  StreamCloser.addToQueue(closeAction);  disposerRecord=new StreamDisposerRecord(cacheFile,cache);  if (getClass() == FileCacheImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  private static boolean checkForIndexedLoop(MethodNode mth,LoopRegion loopRegion,IfCondition condition){  InsnNode incrInsn=RegionUtils.getLastInsn(loopRegion);  if (incrInsn == null) {    return false;  }  RegisterArg incrArg=incrInsn.getResult();  if (incrArg == null || incrArg.getSVar() == null || !incrArg.getSVar().isUsedInPhi()) {    return false;  }  PhiInsn phiInsn=incrArg.getSVar().getUsedInPhi();  if (phiInsn == null || phiInsn.getArgsCount() != 2 || !phiInsn.getArg(1).equals(incrArg) || incrArg.getSVar().getUseCount() != 1) {    return false;  }  RegisterArg arg=phiInsn.getResult();  List<RegisterArg> condArgs=condition.getRegisterArgs();  if (!condArgs.contains(arg) || arg.getSVar().isUsedInPhi()) {    return false;  }  RegisterArg initArg=phiInsn.getArg(0);  InsnNode initInsn=initArg.getAssignInsn();  if (initInsn == null || initArg.getSVar().getUseCount() != 1) {    return false;  }  if (!usedOnlyInLoop(mth,loopRegion,arg)) {    return false;  }  List<RegisterArg> args=new LinkedList<RegisterArg>();  incrInsn.getRegisterArgs(args);  for (  RegisterArg iArg : args) {    if (assignOnlyInLoop(mth,loopRegion,iArg)) {      return false;    }  }  initInsn.add(AFlag.SKIP);  incrInsn.add(AFlag.SKIP);  LoopType arrForEach=checkArrayForEach(mth,initInsn,incrInsn,condition);  if (arrForEach != null) {    loopRegion.setType(arrForEach);    return true;  }  loopRegion.setType(new ForLoop(initInsn,incrInsn));  return true;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  void performFPSCalculations(){  numberOfFrames+=1;  long currentTime=SystemClock.elapsedRealtime();  if (currentTime > timeToUpdate) {    float framesPerSecond=(numberOfFrames / (float)(currentTime - firstSystemTime)) * 1000f;    fpsPct.setText(String.format(" %.1f",framesPerSecond));    timeToUpdate=currentTime + 1000L;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:28.163 -0500",hash_original_method="E2C83593B12AFE0B35E16B01E1A7A647",hash_generated_method="5698C90270243D8A16BF15908D9AEEFF") public void collapse(){  try {    final IStatusBarService svc=getService();    if (svc != null) {      svc.collapse();    }  } catch (  RemoteException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  private void initBPRMADetails(int C_BPartner_ID){  rmaField.removeActionListener(this);  rmaField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  rmaField.addItem(pp);  ArrayList<KeyNamePair> list=loadRMAData(C_BPartner_ID);  for (  KeyNamePair knp : list)   rmaField.addItem(knp);  rmaField.setSelectedIndex(0);  rmaField.addActionListener(this);}  }
class C{  public CCSprite(String filepath){  assert filepath != null : "Invalid filename for sprite";  CCTexture2D texture=CCTextureCache.sharedTextureCache().addImage(filepath);  if (texture != null) {    CGRect rect=CGRect.make(0,0,0,0);    rect.size=texture.getContentSize();    init(texture,rect);  } else {    ccMacros.CCLOGERROR("CCSprite","Unable to load texture from file: " + filepath);  }}  }
class C{  @SuppressWarnings("UnusedParameters") public final boolean isCompressed(final int ref,final int gen){  return offset.isCompressed(ref);}  }
class C{  void printHeaders(PrintStream ps) throws IOException {  psPrint(ps,"Server: TestWebServer" + mPort);  psWriteEOL(ps);  psPrint(ps,"Date: " + (new Date()));  psWriteEOL(ps);  psPrint(ps,"Connection: " + ((keepAlive) ? "Keep-Alive" : "Close"));  psWriteEOL(ps);  if (redirectCode == -1) {    if (!TestWebData.testParams[testNum].testDir) {      if (chunked) {        psPrint(ps,"Transfer-Encoding: chunked");      } else {        psPrint(ps,"Content-length: " + TestWebData.testParams[testNum].testLength);      }      psWriteEOL(ps);      psPrint(ps,"Last Modified: " + (new Date(TestWebData.testParams[testNum].testLastModified)));      psWriteEOL(ps);      psPrint(ps,"Content-type: " + TestWebData.testParams[testNum].testType);      psWriteEOL(ps);    } else {      psPrint(ps,"Content-type: text/html");      psWriteEOL(ps);    }  } else {    psPrint(ps,"Content-length: " + (TestWebData.testServerResponse[TestWebData.REDIRECT_301]).length());    psWriteEOL(ps);    psWriteEOL(ps);  }  log("Headers sent");}  }
class C{  public void testUlpZero(){  String a="0";  int aScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="0.01";  int resScale=2;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInvoiceLine[").append(get_ID()).append(",").append(getLine()).append(",QtyInvoiced=").append(getQtyInvoiced()).append(",LineNetAmt=").append(getLineNetAmt()).append("]");  return sb.toString();}  }
class C{  public static void marshal(Object jaxbObject,OutputStream os){  try {    JAXBContext context=JAXBContext.newInstance(jaxbObject.getClass());    Marshaller m=context.createMarshaller();    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    m.setProperty(Marshaller.JAXB_ENCODING,VeriniceCharset.CHARSET_UTF_8.name());    m.marshal(jaxbObject,os);  } catch (  JAXBException e) {    throw new DataBindingException(e);  }}  }
class C{  public BinaryDocValuesField(String name,BytesRef value){  super(name,TYPE);  fieldsData=value;}  }
class C{  public double nextDouble(){  return org.evosuite.runtime.Random.nextDouble();}  }
class C{  public static byte[] unsafeArray(ByteBuffer b){  return ((ByteArrayBuffer)b).backingArray;}  }
class C{  public String toString(){  return "<" + point.toString() + ": up:"+ concat(upperSegments)+ ", low:"+ concat(lowerSegments)+ ", inter:"+ concat(intersectingSegments)+ ">";}  }
class C{  public void saveRuntimeInfoInJSONFormat(String fileName) throws DMLRuntimeException, IOException {  String json=getRuntimeInfoInJSONFormat();  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName));  bw.write(json);  bw.close();}  }
class C{  public static <T,S extends Comparable<S>>Pair<T,S> max(Map<T,S> map){  S max=null;  T argMax=null;  if (map.size() > 0) {    argMax=map.keySet().iterator().next();    max=map.get(argMax);  }  for (  Entry<T,S> entry : map.entrySet()) {    T item=entry.getKey();    S value=entry.getValue();    if (value.compareTo(max) > 0) {      max=value;      argMax=item;    }  }  return new Pair<>(argMax,max);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private XYSeries createSeries1(){  XYSeries series1=new XYSeries("Series 1",true,false);  series1.add(1.0,1.0);  series1.add(2.0,1.0);  series1.add(4.0,1.0);  series1.add(5.0,1.0);  return series1;}  }
class C{  protected ObjectMatrix1D make1D(int size){  return make(0,0).like1D(size);}  }
class C{  public static boolean testEmailAddress(final Configuration config,final String address){  final String patternStr;  if (config != null) {    patternStr=config.readAppProperty(AppProperty.FORM_EMAIL_REGEX);  } else {    patternStr=AppProperty.FORM_EMAIL_REGEX.getDefaultValue();  }  final Pattern pattern=Pattern.compile(patternStr);  final Matcher matcher=pattern.matcher(address);  return matcher.matches();}  }
class C{  private static boolean isRequiredStatement(final PsiElement element){  assert element != null;  return (element instanceof PyWithStatement) || (element instanceof PyForStatement);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public final Object clone(){  int i, j;  Distribution newDistribution=new Distribution(m_perBag.length,m_perClass.length);  for (i=0; i < m_perBag.length; i++) {    newDistribution.m_perBag[i]=m_perBag[i];    for (j=0; j < m_perClass.length; j++) {      newDistribution.m_perClassPerBag[i][j]=m_perClassPerBag[i][j];    }  }  for (j=0; j < m_perClass.length; j++) {    newDistribution.m_perClass[j]=m_perClass[j];  }  newDistribution.totaL=totaL;  return newDistribution;}  }
class C{  public static JarArchive open(String file) throws IOException {  return new DefaultJarArchive(file);}  }
class C{  @Override public String toString(){  if (m_entries == null) {    return "Decision Table: No model built yet.";  } else {    StringBuffer text=new StringBuffer();    text.append("Decision Table:" + "\n\nNumber of training instances: " + m_numInstances + "\nNumber of Rules : "+ m_entries.size()+ "\n");    if (m_useIBk) {      text.append("Non matches covered by IB1.\n");    } else {      text.append("Non matches covered by Majority class.\n");    }    text.append(m_search.toString());    text.append("Evaluation (for feature selection): CV ");    if (m_CVFolds > 1) {      text.append("(" + m_CVFolds + " fold) ");    } else {      text.append("(leave one out) ");    }    text.append("\nFeature set: " + printFeatures());    if (m_displayRules) {      int maxColWidth=0;      for (int i=0; i < m_dtInstances.numAttributes(); i++) {        if (m_dtInstances.attribute(i).name().length() > maxColWidth) {          maxColWidth=m_dtInstances.attribute(i).name().length();        }        if (m_classIsNominal || (i != m_dtInstances.classIndex())) {          Enumeration<Object> e=m_dtInstances.attribute(i).enumerateValues();          while (e.hasMoreElements()) {            String ss=(String)e.nextElement();            if (ss.length() > maxColWidth) {              maxColWidth=ss.length();            }          }        }      }      text.append("\n\nRules:\n");      StringBuffer tm=new StringBuffer();      for (int i=0; i < m_dtInstances.numAttributes(); i++) {        if (m_dtInstances.classIndex() != i) {          int d=maxColWidth - m_dtInstances.attribute(i).name().length();          tm.append(m_dtInstances.attribute(i).name());          for (int j=0; j < d + 1; j++) {            tm.append(" ");          }        }      }      tm.append(m_dtInstances.attribute(m_dtInstances.classIndex()).name() + "  ");      for (int i=0; i < tm.length() + 10; i++) {        text.append("=");      }      text.append("\n");      text.append(tm);      text.append("\n");      for (int i=0; i < tm.length() + 10; i++) {        text.append("=");      }      text.append("\n");      Enumeration<DecisionTableHashKey> e=m_entries.keys();      while (e.hasMoreElements()) {        DecisionTableHashKey tt=e.nextElement();        text.append(tt.toString(m_dtInstances,maxColWidth));        double[] ClassDist=m_entries.get(tt);        if (m_classIsNominal) {          int m=Utils.maxIndex(ClassDist);          try {            text.append(m_dtInstances.classAttribute().value(m) + "\n");          } catch (          Exception ee) {            System.out.println(ee.getMessage());          }        } else {          text.append((ClassDist[0] / ClassDist[1]) + "\n");        }      }      for (int i=0; i < tm.length() + 10; i++) {        text.append("=");      }      text.append("\n");      text.append("\n");    }    return text.toString();  }}  }
class C{  public SpinnerNumberModel(double min,double max,double currentValue,double step){  this.max=max;  this.min=min;  this.currentValue=currentValue;  this.step=step;  realValues=true;}  }
class C{  public Object remove(Object name){  return map.remove(name);}  }
class C{  public void resizeCache(int max_size){  resetCache(max_size);}  }
class C{  public Direction calculateZoneChangeDirection(Point2D point){  StaticGameLayers layers=StendhalClient.get().getStaticGameLayers();  double x=point.getX();  double y=point.getY();  double width=layers.getWidth();  double height=layers.getHeight();  if (x < 0.333) {    return Direction.LEFT;  }  if (x > width - 0.333) {    return Direction.RIGHT;  }  if (y < 0.333) {    return Direction.UP;  }  if (y > height - 0.4) {    return Direction.DOWN;  }  return null;}  }
class C{  public BufferedDocumentScanner(int size){  Assert.isTrue(size >= 1);  fBuffer=new char[size];}  }
class C{  public Object readObject(AbstractHessianInput in,String type,String[] fieldNames) throws HessianProtocolException, IOException {  Deserializer deserializer=getDeserializer(type);  if (deserializer != null)   return deserializer.readObject(in,fieldNames); else   if (_hashMapDeserializer != null)   return _hashMapDeserializer.readObject(in,fieldNames); else {    _hashMapDeserializer=new MapDeserializer(HashMap.class);    return _hashMapDeserializer.readObject(in,fieldNames);  }}  }
class C{  public MySqlLoopStatement parseLoop(){  MySqlLoopStatement loopStmt=new MySqlLoopStatement();  accept(Token.LOOP);  parseProcedureStatementList(loopStmt.getStatements());  accept(Token.END);  accept(Token.LOOP);  accept(Token.SEMI);  return loopStmt;}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SIF__ELSE:    setElse((EObject)null);  return;}super.eUnset(featureID);}  }
class C{  public static String serialize(Object toSerialize) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] serializeArgsClasses=new Class[1];  Object[] serializeArgs=new Object[1];  java.lang.reflect.Method methodSerialize;  String result;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  serializeArgsClasses[0]=Object.class;  serializeArgs[0]=toSerialize;  methodSerialize=xstreamClass.getMethod("toXML",serializeArgsClasses);  try {    result=(String)methodSerialize.invoke(xstream,serializeArgs);  } catch (  Exception ex) {    result=null;  }  return result;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(opt(key));}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  @CheckForNull public InitializationException configure(){  InitializationException error=null;  log.debug("configure defaults into InstanceManager");  List<SystemConnectionMemo> connList=InstanceManager.getList(SystemConnectionMemo.class);  for (  Class<?> c : defaults.keySet()) {    String connectionName=this.defaults.get(c);    boolean found=false;    for (    SystemConnectionMemo memo : connList) {      String testName=memo.getUserName();      if (testName.equals(connectionName)) {        found=true;        try {          log.debug("   setting default for \"{}\" to \"{}\" in configure",c,memo.get(c));          InstanceManager.setDefault(c,memo.get(c));        } catch (        NullPointerException ex) {          String englishMsg=Bundle.getMessage(Locale.ENGLISH,"ErrorNullDefault",memo.getUserName(),c);          String localizedMsg=Bundle.getMessage("ErrorNullDefault",memo.getUserName(),c);          error=new InitializationException(englishMsg,localizedMsg);          log.warn("SystemConnectionMemo for {} ({}) provides a null {} instance",memo.getUserName(),memo.getClass(),c);        }        break;      }    }    if (!found) {      log.debug("!found, so resetting");      String currentName=null;      if (c == ThrottleManager.class && InstanceManager.getNullableDefault(ThrottleManager.class) != null) {        currentName=InstanceManager.throttleManagerInstance().getUserName();      } else       if (c == PowerManager.class && InstanceManager.getNullableDefault(PowerManager.class) != null) {        currentName=InstanceManager.getDefault(PowerManager.class).getUserName();      } else       if (c == ProgrammerManager.class && InstanceManager.getNullableDefault(ProgrammerManager.class) != null) {        currentName=InstanceManager.getDefault(ProgrammerManager.class).getUserName();      }      if (currentName != null) {        log.warn("The configured " + connectionName + " for "+ c+ " can not be found so will use the default "+ currentName);        this.defaults.put(c,currentName);      }    }  }  return error;}  }
class C{  public synchronized int totalFileCount(){  return fileDetails.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:17.987 -0500",hash_original_method="92E492941FA288BA531CB37717D8F415",hash_generated_method="E85CF5068CC3E55B410D6E17B50952A4") public boolean containsExtraValueKey(String key){  return getExtraValueHashMap().containsKey(key);}  }
class C{  private static byte[] encode3to4(final byte[] source,final int srcOffset,final int numSigBytes,final byte[] destination,final int destOffset,final int options){  byte[] ALPHABET=Base64.getAlphabet(options);  int inBuff=(numSigBytes > 0 ? source[srcOffset] << 24 >>> 8 : 0) | (numSigBytes > 1 ? source[srcOffset + 1] << 24 >>> 16 : 0) | (numSigBytes > 2 ? source[srcOffset + 2] << 24 >>> 24 : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=ALPHABET[inBuff >>> 6 & 0x3f];destination[destOffset + 3]=ALPHABET[inBuff & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=ALPHABET[inBuff >>> 6 & 0x3f];destination[destOffset + 3]=Base64.EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=Base64.EQUALS_SIGN;destination[destOffset + 3]=Base64.EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean isDisabled(){  return this.disabled;}  }
class C{  public static Instance[] PSTransformation(Instance x,int L,HashMap<LabelSet,Integer> map,int n,Instances iTemplate){  int y_[]=MLUtils.toSparseIntArray(x,L);  if (y_.length <= 0)   return new Instance[0];  LabelSet y=new LabelSet(y_);  if (map.get(y) != null) {    Instance x_subsets[]=new Instance[1];    x_subsets[0]=convertInstance(x,L,iTemplate);    x_subsets[0].setClassValue(y.toString());    return x_subsets;  } else {    LabelSet d_subsets[]=PSUtils.getTopNSubsets(y,map,n);    Instance x_subsets[]=new Instance[d_subsets.length];    Instance x_template=convertInstance(x,L,iTemplate);    for (int i=1; i < d_subsets.length; i++) {      x_subsets[i]=(Instance)(x_template).copy();      x_subsets[i].setClassValue(d_subsets[i].toString());    }    return x_subsets;  }}  }
class C{  public Boolean isSyncState(){  return syncState;}  }
class C{  public boolean isEnum(){  return false;}  }
class C{  public static String mid(String str,int pos,int len){  if ((pos < 0) || ((str != null) && (pos > str.length()))) {    throw new StringIndexOutOfBoundsException("String index " + pos + " is out of bounds");  }  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if (str == null) {    return null;  }  if (str.length() <= (pos + len)) {    return str.substring(pos);  } else {    return str.substring(pos,pos + len);  }}  }
class C{  public CutAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("CutAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("CutAction.statusbar"));  putValue(NAME,res.getString("CutAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CutAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CutAction.image")))));}  }
class C{  public OMSpline(int[] xPoints,int[] yPoints){  super(xPoints,yPoints);}  }
class C{  @RequestMapping(value=CUSTOM_DDLS_URI_PREFIX + "/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/customDdlNames/{customDdlName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_CUSTOM_DDLS_DELETE) public CustomDdl deleteCustomDdl(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("customDdlName") String customDdlName){  return customDdlService.deleteCustomDdl(new CustomDdlKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,customDdlName));}  }
class C{  public void afterPropertiesSet(){  if (this.transactionManager == null && this.beanFactory == null) {    throw new IllegalStateException("Setting the property 'transactionManager' or running in a ListableBeanFactory is required");  }  if (this.transactionAttributeSource == null) {    throw new IllegalStateException("Either 'transactionAttributeSource' or 'transactionAttributes' is required: " + "If there are no transactional methods, then don't use a transaction aspect.");  }}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public int top() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: top() called on empty virtual stack");  return ((Integer)vstack.peek()).intValue();}  }
class C{  public CoreContainer(){  this(new SolrResourceLoader(SolrResourceLoader.locateSolrHome()));}  }
class C{  public void clearBlob(){  graph.clear();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.961 -0500",hash_original_method="66BAEF040BB5FDC80731F9B16CD33C32",hash_generated_method="F8512EE67F64CE701F309692817A9311") public char[] toCharArray(){  char[] buffer=new char[1];  buffer[0]=(char)this.getTaintInt();  buffer.addTaint(this.getTaintInt());  return buffer;}  }
class C{  private PrintElement createBoxElement(MPrintFormatItem item){  Color color=getColor();  if (item.getAD_PrintColor_ID() != 0 && m_printColor.get_ID() != item.getAD_PrintColor_ID()) {    MPrintColor c=MPrintColor.get(getCtx(),item.getAD_PrintColor_ID());    if (c.getColor() != null)     color=c.getColor();  }  return new BoxElement(item,color);}  }
class C{  public void testNoAutoCloseGenerator() throws Exception {  JsonFactory f=new JsonFactory();  assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));  f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);  assertFalse(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));  MyWriter output=new MyWriter();  JsonGenerator jg=f.createJsonGenerator(output);  assertFalse(output.isClosed());  jg.writeNumber(39);  jg.close();  assertFalse(output.isClosed());}  }
class C{  public static Chain mergeChains(Chain chain1,Chain chain2){  if (chain2 == null)   return chain1;  if (chain1 == null)   return chain2;  Assert.check(chain1.state.stacksize == chain2.state.stacksize && chain1.state.nlocks == chain2.state.nlocks);  if (chain1.pc < chain2.pc)   return new Chain(chain2.pc,mergeChains(chain1,chain2.next),chain2.state);  return new Chain(chain1.pc,mergeChains(chain1.next,chain2),chain1.state);}  }
class C{  public Property secondOfMinute(){  return new Property(this,getChronology().secondOfMinute());}  }
class C{  public String generateNamedAttributeValue(Node.NamedAttribute n) throws JasperException {  String varName=n.getTemporaryVariableName();  Node.Nodes body=n.getBody();  if (body != null) {    boolean templateTextOptimization=false;    if (body.size() == 1) {      Node bodyElement=body.getNode(0);      if (bodyElement instanceof Node.TemplateText) {        templateTextOptimization=true;        out.printil("String " + varName + " = "+ quote(((Node.TemplateText)bodyElement).getText())+ ";");      }    }    if (!templateTextOptimization) {      out.printil("out = _jspx_page_context.pushBody();");      visitBody(n);      out.printil("String " + varName + " = "+ "((javax.servlet.jsp.tagext.BodyContent)"+ "out).getString();");      out.printil("out = _jspx_page_context.popBody();");    }  } else {    out.printil("String " + varName + " = \"\";");  }  return varName;}  }
class C{  Class<?> defineClass(String name,byte[] bytes) throws ClassFormatError {  try {    Method method=ClassLoader.class.getDeclaredMethod("defineClass",DEF_CLASS_SIG);    method.setAccessible(true);    return (Class<?>)method.invoke(getParent(),new Object[]{name,bytes,Integer.valueOf(0),Integer.valueOf(bytes.length)});  } catch (  Exception ignored) {  }  return defineClass(name,bytes,0,bytes.length);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.903 -0500",hash_original_method="BF29FD79336E7D0F2752A5C16F704FCA",hash_generated_method="8DDF8BEFAF7D0B9E356C822FFE084B0A") private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public Object toObject(CallStack callstack,Interpreter interpreter) throws UtilEvalError {  return toObject(callstack,interpreter,false);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialTextAnnotation)) {    return false;  }  DialTextAnnotation that=(DialTextAnnotation)obj;  if (!this.label.equals(that.label)) {    return false;  }  if (!this.font.equals(that.font)) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (this.radius != that.radius) {    return false;  }  if (this.angle != that.angle) {    return false;  }  if (!this.anchor.equals(that.anchor)) {    return false;  }  return super.equals(obj);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (LruDiskCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static MissingApiMembersForTranspiler create(ContainerTypesHelper containerTypesHelper,ScriptApiTracker apiTracker,TClassifier type,ConcreteMembersOrderedForTranspiler cmoft,Script context){  MemberCollector collector=containerTypesHelper.fromContext(context);  MemberList<TMethod> missingApiMethods=new MemberList<>();  if (type instanceof TClass) {    List<TMethod> c=apiTracker.computeMissingApiMethods((TClass)type,context);    missingApiMethods.addAll(c);    List<VirtualApiTMethod> missingAPIfromInheritance=apiTracker.computeMethodDiff((TClass)type,collector,cmoft.ownedAndMixedInConcreteMembers,missingApiMethods);    missingApiMethods.addAll(missingAPIfromInheritance);  }  if (type instanceof TInterface) {    List<TMethod> c=apiTracker.computeMissingApiMethods((TInterface)type,context);    missingApiMethods.addAll(c);  }  List<AccessorTuple> missingApiAccessorTuples=new ArrayList<>();{    List<AccessorTuple> computedMissingApiGetterSetter=apiTracker.computeMissingApiGetterSetter((TN4Classifier)type,cmoft.concreteAccessorTuples);    List<AccessorTuple> computedMissingApiFields=apiTracker.computeMissingApiFields((TN4Classifier)type);    List<AccessorTuple> filteredMissingApiGetterSetter=filterOutTuplesImplementedByField(computedMissingApiGetterSetter,cmoft.ownedAndMixedInConcreteMembers,cmoft.concreteInheritedMembers);    List<AccessorTuple> filteredMissingApiFields0=filterMissingApiFieldsAndEnrichExistingTuples(computedMissingApiFields,cmoft.concreteAccessorTuples);    List<AccessorTuple> filteredMissingApiFields=filterMissingApiFieldsImplementedBySuperGetSet(filteredMissingApiFields0,cmoft.concreteInheritedMembers);    missingApiAccessorTuples.addAll(filteredMissingApiGetterSetter);    missingApiAccessorTuples.addAll(filteredMissingApiFields);  }  MemberList<TField> fieldsOverridingAccessors=getFieldsOverridingAccessor(cmoft.ownedAndMixedInConcreteMembers,cmoft.concreteInheritedMembers);  MemberList<TField> fieldsPurelyMixedInNotOverridingAccessor=new MemberList<>();  fieldsPurelyMixedInNotOverridingAccessor.addAll(cmoft.ownedAndMixedInConcreteMembers.stream().filter(null).map(null).filter(null).collect(Collectors.toList()));  return new MissingApiMembersForTranspiler(missingApiMethods,missingApiAccessorTuples);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public static void putStringValue(ContentResolver cr,long providerId,String name,String value){  ContentValues v=new ContentValues(3);  v.put(PROVIDER,providerId);  v.put(NAME,name);  v.put(VALUE,value);  cr.insert(CONTENT_URI,v);}  }
class C{  public static Pair<Set<LogicalVariable>,Mutable<ILogicalOperator>> inlineLeftNtsInSubplanJoin(SubplanOperator subplanOp,IOptimizationContext context) throws AlgebricksException {  Pair<Boolean,ILogicalOperator> applicableAndNtsToRewrite=SubplanFlatteningUtil.isQualifiedForSpecialFlattening(subplanOp);  if (!applicableAndNtsToRewrite.first) {    return new Pair<Set<LogicalVariable>,Mutable<ILogicalOperator>>(null,null);  }  ILogicalOperator qualifiedNts=applicableAndNtsToRewrite.second;  ILogicalOperator subplanInputOp=subplanOp.getInputs().get(0).getValue();  InlineLeftNtsInSubplanJoinFlatteningVisitor specialVisitor=new InlineLeftNtsInSubplanJoinFlatteningVisitor(context,subplanInputOp,qualifiedNts);  Mutable<ILogicalOperator> topRef=subplanOp.getNestedPlans().get(0).getRoots().get(0);  ILogicalOperator result=topRef.getValue().accept(specialVisitor,null);  Mutable<ILogicalOperator> topJoinRef=specialVisitor.getTopJoinReference();  topRef.setValue(result);  InlineAllNtsInSubplanVisitor generalVisitor=new InlineAllNtsInSubplanVisitor(context,subplanOp);  ILogicalOperator opToVisit=topJoinRef.getValue();  result=opToVisit.accept(generalVisitor,null);  topJoinRef.setValue(result);  List<Pair<LogicalVariable,LogicalVariable>> subplanLocalVarMap=generalVisitor.getVariableMapHistory();  ILogicalOperator currentOp=topRef.getValue();  while (currentOp != result) {    VariableUtilities.substituteVariables(currentOp,subplanLocalVarMap,context);    currentOp=currentOp.getInputs().get(0).getValue();  }  return new Pair<Set<LogicalVariable>,Mutable<ILogicalOperator>>(specialVisitor.getNullCheckVariables(),topJoinRef);}  }
class C{  private void rushingPlay(Team offense,Team defense){  boolean gotTD=false;  PlayerRB selRB;  double RB1pref=Math.pow(offense.getRB(0).ratOvr,1.5) * Math.random();  double RB2pref=Math.pow(offense.getRB(1).ratOvr,1.5) * Math.random();  if (RB1pref > RB2pref) {    selRB=offense.getRB(0);  } else {    selRB=offense.getRB(1);  }  int blockAdv=offense.getCompositeOLRush() - defense.getCompositeF7Rush();  int yardsGain=(int)((selRB.ratRushSpd + blockAdv + getHFadv()) * Math.random() / 10 + (double)offense.teamStratOff.getRYB() / 2 - (double)defense.teamStratDef.getRYB() / 2);  if (yardsGain < 2) {    yardsGain+=selRB.ratRushPow / 20 - 3 - (double)defense.teamStratDef.getRYB() / 2;  } else {    if (Math.random() < (0.28 + (offense.teamStratOff.getRAB() - (double)defense.teamStratDef.getRYB() / 2) / 50)) {      yardsGain+=selRB.ratRushEva / 5 * Math.random();    }  }  gameYardLine+=yardsGain;  if (gameYardLine >= 100) {    addPointsQuarter(6);    yardsGain-=gameYardLine - 100;    gameYardLine=100 - yardsGain;    if (gamePoss) {      homeScore+=6;      if (RB1pref > RB2pref) {        HomeRB1Stats[2]++;      } else {        HomeRB2Stats[2]++;      }    } else {      awayScore+=6;      if (RB1pref > RB2pref) {        AwayRB1Stats[2]++;      } else {        AwayRB2Stats[2]++;      }    }    tdInfo=offense.abbr + " RB " + selRB.name+ " rushed "+ yardsGain+ " yards for a TD.";    selRB.statsTD++;    gotTD=true;  }  if (!gotTD) {    gameYardsNeed-=yardsGain;    if (gameYardsNeed <= 0) {      gameDown=1;      gameYardsNeed=10;    } else     gameDown++;  }  rushAttempt(offense,defense,selRB,RB1pref,RB2pref,yardsGain);  if (gotTD) {    gameTime-=5 + 15 * Math.random();    kickXP(offense,defense);    if (!playingOT)     kickOff(offense); else     resetForOT();  } else {    gameTime-=25 + 15 * Math.random();    double fumChance=(defense.getS(0).ratSTkl + defense.getCompositeF7Rush() - getHFadv()) / 2 + offense.teamStratOff.getRAB();    if (100 * Math.random() < fumChance / 50) {      if (gamePoss) {        homeTOs++;        if (RB1pref > RB2pref) {          HomeRB1Stats[3]++;        } else {          HomeRB2Stats[3]++;        }      } else {        awayTOs++;        if (RB1pref > RB2pref) {          AwayRB1Stats[3]++;        } else {          AwayRB2Stats[3]++;        }      }      gameEventLog+=getEventPrefix() + "TURNOVER!\n" + offense.abbr+ " RB "+ selRB.name+ " fumbled the ball while rushing.";      selRB.statsFumbles++;      if (!playingOT) {        gameDown=1;        gameYardsNeed=10;        gamePoss=!gamePoss;        gameYardLine=100 - gameYardLine;      } else       resetForOT();    }  }}  }
class C{  private void handlePermissionsForFeaturePreference(SharedPreferences sharedPreferences,String feature,String neededPermission){  if (null == sharedPreferences || TextUtils.isEmpty(feature) || TextUtils.isEmpty(neededPermission)) {    Log.d(TAG,"No permission to handle for feature");    return;  }  boolean useFeature=sharedPreferences.getBoolean(feature,true);  if (useFeature && !TextUtils.isEmpty(neededPermission)) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      if (!LocalService.checkPermission(getActivity(),neededPermission)) {        requestPermissions(new String[]{neededPermission},LocalService.PERMISSIONS_REQUEST);      }    }  }}  }
class C{  public static double min(double... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  double min=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] < min) {      min=numbers[i];    }  }  return min;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAfterEvent_();}  }
class C{  public void close() throws IOException {  super.close();  disposerRecord.dispose();  stream=null;  cache=null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE:    setValue((State)null);  return;}super.eUnset(featureID);}  }
class C{  @NotNull public static List<PyExpression> flattenedParensAndTuples(PyExpression... targets){  return _unfoldParenExprs(targets,new ArrayList<PyExpression>(targets.length),false,false);}  }
class C{  public boolean isEndedBy(final T element){  if (element == null) {    return false;  }  return comparator.compare(element,maximum) == 0;}  }
class C{  private static String substituteURL(Config config,String pathString){  Matcher m=urlPattern.matcher(pathString);  if (m.matches()) {    StringBuilder sb=new StringBuilder();    sb.append(m.group(1)).append(":").append("//").append(substitute(config,m.group(2)));    return sb.toString();  }  return pathString;}  }
class C{  public HessianInput(){}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  copy(in,out);  return out.toByteArray();}  }
class C{  public static String[] parse(String[] options,String option) throws Exception {  List<String> result=new ArrayList<>();  while (Utils.getOptionPos(option,options) > -1)   result.add(Utils.getOption(option,options));  return result.toArray(new String[result.size()]);}  }
class C{  public Object clone(){  Date d=null;  try {    d=(Date)super.clone();    if (cdate != null) {      d.cdate=(BaseCalendar.Date)cdate.clone();    }  } catch (  CloneNotSupportedException e) {  }  return d;}  }
class C{  public ScannerException(ErrorMessages message,int line){  this(null,ErrorMessages.get(message),message,line,-1);}  }
class C{  @Override public int read() throws IOException {  ensureOpen();  if (next >= length)   return -1;  return str.charAt(next++);}  }
class C{  public static Object min(Comparable c1,Comparable c2){  return (compare(c1,c2,true) <= 0 ? c1 : c2);}  }
class C{  public void testSerialization(){  DefaultKeyedValuesDataset d1=new DefaultKeyedValuesDataset();  d1.setValue("C1",new Double(234.2));  d1.setValue("C2",null);  d1.setValue("C3",new Double(345.9));  d1.setValue("C4",new Double(452.7));  KeyedValuesDataset d2=(KeyedValuesDataset)TestUtilities.serialised(d1);  assertEquals(d1,d2);}  }
class C{  public Hashtable<IPoint,List<ILineSegment>> intersections(ILineSegment[] segs){  startTime();  initialize();  for (  ILineSegment ils : segs) {    EventPoint ep=new EventPoint(ils.getStart());    EventPoint existing=eq.event(ep);    if (existing == null) {      eq.insert(ep);    } else {      ep=existing;    }    ep.addUpperLineSegment(ils);    ep=new EventPoint(ils.getEnd());    existing=eq.event(ep);    if (existing == null) {      eq.insert(ep);    } else {      ep=existing;    }    ep.addLowerLineSegment(ils);  }  while (!eq.isEmpty()) {    EventPoint p=eq.min();    try {      handleEventPoint(p);    } catch (    NullPointerException npe) {      if (++errorCount == 1) {        System.err.println("  LineSweep produced invalid computation for:" + p);      }    }  }  computeTime();  if (errorCount > 1) {    System.err.println("  LineSweep had problems with:" + errorCount + " point(s).");  }  return report;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AtomicMoveNotSupportedException(String source,String target,String reason){  super(source,target,reason);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void isUserId(String member,String value,boolean flag) throws ValidationException {  isId(member,value,flag,ADMValidator.LENGTH_USERID);}  }
class C{  private long writeOpLogBytes(boolean async) throws IOException {  long startPos=-1L;  final OplogFile olf=this.crf;synchronized (olf) {    if (this.doneAppending) {      return -1;    }    if (this.closed) {      Assert.assertTrue(false,toString() + " for store " + this.parent.getName()+ " has been closed for synch mode while writing is going on. This should not happen");    }    long curFileOffset=olf.channel.position() + olf.writeBuf.position();    startPos=allocate(curFileOffset,getOpStateSize());    if (startPos != -1) {      if (startPos != curFileOffset) {        flush();        olf.channel.position(startPos);        olf.bytesFlushed=startPos;        this.stats.incOplogSeeks();      }      if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {        logger.trace(LogMarker.PERSIST_WRITES,"writeOpLogBytes startPos={} oplog#{}",startPos,getOplogId());      }      long oldBytesFlushed=olf.bytesFlushed;      long bytesWritten=this.opState.write();      if ((startPos + bytesWritten) > olf.currSize) {        olf.currSize=startPos + bytesWritten;      }      if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {        logger.trace(LogMarker.PERSIST_WRITES,"writeOpLogBytes bytesWritten={} oldBytesFlushed={} byteFlushed={} oplog#{}",bytesWritten,oldBytesFlushed,olf.bytesFlushed,getOplogId());      }      if (oldBytesFlushed != olf.bytesFlushed) {        flush();      }      getStats().incWrittenBytes(bytesWritten,async);    }  }  return startPos;}  }
class C{  @Override public void startExecuting(){  this.updateTicker=0;  theMinion.setWorking(false);}  }
class C{  public ObjectMatrix2D viewSlice(int slice){  checkSlice(slice);  int viewRows=this.rows;  int viewColumns=this.columns;  int viewRowZero=rowZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _sliceOffset(_sliceRank(slice));  int viewRowStride=this.rowStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.rowOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedDenseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public LithuanianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public Feature(){}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder advice(List<Advice> advice){  this.advice=Collections.unmodifiableList(advice);  return this;}  }
class C{  public void pushElement(Element element){  int length=stack.length;  if (++lastElementIndex >= length) {    reallocate(length * 2);  }  stack[lastElementIndex]=element;}  }
class C{  private Set<TypeBound> resolveRawTypes(Set<TypeBound> typeBounds){  if (!haveRawTypeRef)   return typeBounds;  if (typeBounds.isEmpty())   return typeBounds;  final List<TypeBound> result=new ArrayList<>(typeBounds);  final Set<Type> genTypesWithNonRawTypeRefs=new HashSet<>();  final Set<TypeBound> boundsWithRawTypeRef=new HashSet<>();  for (  TypeBound tb : result) {    if (tb.right instanceof ParameterizedTypeRef) {      final ParameterizedTypeRef ptr=(ParameterizedTypeRef)tb.right;      final Type declType=ptr.getDeclaredType();      if (declType != null && declType.isGeneric()) {        final boolean isRaw=TypeUtils.isRawTypeRef(ptr);        if (isRaw) {          boundsWithRawTypeRef.add(tb);        } else {          genTypesWithNonRawTypeRefs.add(declType);        }      }    }  }  for (  TypeBound currTB : boundsWithRawTypeRef) {    if (genTypesWithNonRawTypeRefs.contains(currTB.right.getDeclaredType())) {      result.remove(currTB);    }  }  final int len=result.size();  for (int i=0; i < len; i++) {    result.set(i,result.get(i).sanitizeRawTypeRef());  }  return new LinkedHashSet<>(result);}  }
class C{  public boolean isGlobalInt32ExtendedAtomicsSupported(){  return hasExtension("cl_khr_global_int32_extended_atomics");}  }
class C{  public MAssetDelivery confirmDelivery(MAsset asset,EMail email,int AD_User_ID){  asset.setVersionNo(asset.getProductVersionNo());  MAssetDelivery ad=new MAssetDelivery(asset,email,AD_User_ID);  return ad;}  }
class C{  public boolean isWord(JavaType type){  return type instanceof ResolvedJavaType && wordBaseType.isAssignableFrom((ResolvedJavaType)type);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  private void sendCapacityExceeded(LicenseInfoExt licenseInfo) throws Exception {  _log.info("SendEventScheduler::validateAndSendCapacityExceeded() for {}",licenseInfo.getLicenseType());  _callHomeEventsFacade.sendCapacityExceededEvent(licenseInfo,MediaType.APPLICATION_XML_TYPE);}  }
class C{  public String maskKeyword(String s){  if (isKeyword(s)) {    return s + m_KeywordsMaskChar;  } else {    return s;  }}  }
class C{  public boolean isConstant(){  return constant;}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  private void search(final long offset){  try {    tableModel.setViews(m_viewContainer.getViewsWithAddresses(Lists.newArrayList(new UnrelocatedAddress(new CAddress(offset))),true));  } catch (  final CouldntLoadDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00190: " + "Could not search views";    final String innerDescription=CUtilityFunctions.createDescription(String.format("BinNavi could not determine what views contain the offset '%s'.",new CAddress(offset).toHexString()),new String[]{"There was a problem with the database connection."},new String[]{"The views with the given address can not be shown."});    NaviErrorDialog.show(null,innerMessage,innerDescription,e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)newValue);  return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps((Integer)newValue);return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)newValue);return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String uploadFile(Part filePart,final String bucketName) throws IOException {  DateTimeFormatter dtf=DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");  DateTime dt=DateTime.now(DateTimeZone.UTC);  String dtString=dt.toString(dtf);  final String fileName=filePart.getSubmittedFileName() + dtString;  BlobInfo blobInfo=storage.create(BlobInfo.builder(bucketName,fileName).acl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(),Role.READER)))).build(),filePart.getInputStream());  logger.log(Level.INFO,"Uploaded file {0} as {1}",new Object[]{filePart.getSubmittedFileName(),fileName});  return blobInfo.mediaLink();}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong.longValue() == myLong.intValue()) {            return new Integer(myLong.intValue());          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.ENTRY__KIND:    setKind((EntryKind)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.392 -0500",hash_original_method="25D7603D6297D124EA5AA0C2763B256C",hash_generated_method="ED6264275AC7BADD311204943E5CB9B1") public static PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme,URL rURL,Authenticator.RequestorType reqType){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.url=rURL;  thisAuthenticator.rt=reqType;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static void closeScope(Object name){  ScopeNode scope=(ScopeNode)MAP_KEY_TO_SCOPE.remove(name);  if (scope != null) {    ScopeNode parentScope=scope.getParentScope();    if (parentScope != null) {      parentScope.removeChild(scope);    } else {      ConfigurationHolder.configuration.onScopeForestReset();    }    removeScopeAndChildrenFromMap(scope);  }}  }
class C{  @Override public List<QualifiedName> list(Set<String> includeTags,Set<String> excludeTags,String sourceName,String databaseName,String tableName){  Set<String> includedNames=Sets.newHashSet();  Set<String> excludedNames=Sets.newHashSet();  Connection connection=DBUtil.getReadConnection(getDataSource());  try {    QueryRunner runner=new QueryRunner();    String wildCardName=QualifiedName.toWildCardString(sourceName,databaseName,tableName);    String query=String.format(QUERY_SEARCH,"in ('" + Joiner.on("','").skipNulls().join(includeTags) + "')");    Object[] params={includeTags.size() == 0 ? 1 : 0,wildCardName == null ? 1 : 0,wildCardName};    includedNames.addAll(runner.query(connection,query,new ColumnListHandler<>("name"),params));    if (excludeTags != null && !excludeTags.isEmpty()) {      query=String.format(QUERY_SEARCH,"in ('" + Joiner.on("','").skipNulls().join(excludeTags) + "')");      Object[] eParams={excludeTags.size() == 0 ? 1 : 0,wildCardName == null ? 1 : 0,wildCardName};      excludedNames.addAll(runner.query(connection,query,new ColumnListHandler<>("name"),eParams));    }  } catch (  SQLException e) {    String message=String.format("Failed getting the list of qualified names for tags %s",includeTags);    log.error(message,e);    throw new UserMetadataServiceException(message,e);  } finally {    DBUtil.closeReadConnection(connection);  }  if (excludeTags != null && !excludeTags.isEmpty()) {    includedNames=Sets.difference(includedNames,excludedNames);  }  return includedNames.stream().map(null).collect(Collectors.toList());}  }
class C{  private static URL fileToURL(File file) throws MalformedURLException {  String name;  try {    name=file.getCanonicalPath();  } catch (  IOException e) {    name=file.getAbsolutePath();  }  name=name.replace(File.separatorChar,'/');  if (!name.startsWith("/")) {    name="/" + name;  }  if (!file.isFile()) {    name=name + "/";  }  return new URL("file","",name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args){  FlagConfig flagConfig=null;  String usage="java pitt.search.lucene.IndexFilePositions <root_directory> ";  if (args.length == 0) {    System.err.println("Usage: " + usage);    System.exit(1);  }  flagConfig=FlagConfig.getFlagConfig(args);  if (flagConfig.luceneindexpath().length() > 0) {    INDEX_DIR=FileSystems.getDefault().getPath(flagConfig.luceneindexpath());  }  if (Files.exists(INDEX_DIR)) {    throw new IllegalArgumentException("Cannot save index to '" + INDEX_DIR + "' directory, please delete it first");  }  try {    IndexWriter writer;    Analyzer analyzer=flagConfig.porterstemmer() ? new PorterAnalyzer() : new StandardAnalyzer(CharArraySet.EMPTY_SET);    IndexWriterConfig writerConfig=new IndexWriterConfig(analyzer);    writer=new IndexWriter(FSDirectory.open(INDEX_DIR),writerConfig);    final File docDir=new File(flagConfig.remainingArgs[0]);    if (!docDir.exists() || !docDir.canRead()) {      writer.close();      throw new IOException("Document directory '" + docDir.getAbsolutePath() + "' does not exist or is not readable, please check the path");    }    Date start=new Date();    System.out.println("Indexing to directory '" + INDEX_DIR + "'...");    indexDocs(writer,docDir);    writer.close();    Date end=new Date();    System.out.println(end.getTime() - start.getTime() + " total milliseconds");  } catch (  IOException e) {    System.out.println(" caught a " + e.getClass() + "\n with message: "+ e.getMessage());  }}  }
class C{  public boolean isDataFlavorAvailable(DataFlavor flavor){  if (flavor == null) {    throw new NullPointerException("flavor");  }  Transferable cntnts=getContents(null);  if (cntnts == null) {    return false;  }  return cntnts.isDataFlavorSupported(flavor);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAfterEveryEvent_();}  }
class C{  public static <A>FluxTSeq<A> fromAnyM(AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  protected void invalidate(){}  }
class C{  public double readDouble() throws IOException {  byte[] bytes=read(8);  byte[] bytes2=new byte[8];  bytes2[0]=bytes[3];  bytes2[1]=bytes[2];  bytes2[2]=bytes[1];  bytes2[3]=bytes[0];  bytes2[4]=bytes[7];  bytes2[5]=bytes[6];  bytes2[6]=bytes[5];  bytes2[7]=bytes[4];  ByteArrayInputStream bin=new ByteArrayInputStream(bytes2);  return new DataInputStream(bin).readDouble();}  }
class C{  public static boolean isTraceMode(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("debug",c.getString(R.string.debug).equals("true")) && pref.getBoolean("trace",c.getString(R.string.trace).equals("true"));}  }
class C{  public static boolean isLoggable(final String tag,final int level){  if (delegate != null) {    return delegate.isLoggable(tag,level);  }  return false;}  }
class C{  public BaseMqttMessage(final long id,final String topic,final MqttMessage message,final Date date){  super(id,topic,null,date);  this.rawMessage=message;}  }
class C{  public static List<File> unTar(final File inputFile,final File outputDir) throws FileNotFoundException, IOException, ArchiveException {  final List<File> untaredFiles=new LinkedList<File>();  final InputStream is=new FileInputStream(inputFile);  final TarArchiveInputStream debInputStream=(TarArchiveInputStream)new ArchiveStreamFactory().createArchiveInputStream("tar",is);  TarArchiveEntry entry=null;  while ((entry=(TarArchiveEntry)debInputStream.getNextEntry()) != null) {    final File outputFile=new File(outputDir,entry.getName());    if (entry.isDirectory()) {      Logger.appendLog("Attempting to write output directory . " + outputFile.getAbsolutePath());      if (!outputFile.exists()) {        Logger.appendLog("Attempting to create output directory ." + outputFile.getAbsolutePath());        if (!outputFile.mkdirs()) {          throw new IllegalStateException(String.format("Couldn't create directory %s.",outputFile.getAbsolutePath()));        }      }    } else {      outputFile.getParentFile().mkdirs();      final OutputStream outputFileStream=new FileOutputStream(outputFile);      IOUtils.copy(debInputStream,outputFileStream);      outputFileStream.close();    }    untaredFiles.add(outputFile);  }  debInputStream.close();  return untaredFiles;}  }
class C{  public boolean login() throws LoginException {  if (userProvider == null) {    throw new LoginException("Error: Unable to locate JNDI user provider");  }  if (groupProvider == null) {    throw new LoginException("Error: Unable to locate JNDI group provider");  }  if (debug) {    System.out.println("\t\t[JndiLoginModule] user provider: " + userProvider);    System.out.println("\t\t[JndiLoginModule] group provider: " + groupProvider);  }  if (tryFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (debug) {        System.out.println("\t\t[JndiLoginModule] " + "tryFirstPass succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      if (debug) {        System.out.println("\t\t[JndiLoginModule] " + "tryFirstPass failed with:" + le.toString());      }    }  } else   if (useFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (debug) {        System.out.println("\t\t[JndiLoginModule] " + "useFirstPass succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      if (debug) {        System.out.println("\t\t[JndiLoginModule] " + "useFirstPass failed");      }      throw le;    }  }  try {    attemptAuthentication(false);    succeeded=true;    if (debug) {      System.out.println("\t\t[JndiLoginModule] " + "regular authentication succeeded");    }    return true;  } catch (  LoginException le) {    cleanState();    if (debug) {      System.out.println("\t\t[JndiLoginModule] " + "regular authentication failed");    }    throw le;  }}  }
class C{  public LongMemberValue(ConstPool cp){  super('J',cp);  setValue(0L);}  }
class C{  public static String join(Collection collection){  return join(collection,"\t");}  }
class C{  private File locateConfigFile(String resource){  File located=null;  File file=new File(resource);  if (file.isAbsolute()) {    if (file.isFile() && file.canRead()) {      located=file;    }  } else {    File fileUnderConfigDir=new File(config.getResourceLoader().getConfigDir() + resource);    if (fileUnderConfigDir.isFile() && fileUnderConfigDir.canRead()) {      located=fileUnderConfigDir;    } else {      if (file.isFile() && file.canRead()) {        located=file;      }    }  }  return located;}  }
class C{  @Override public void close() throws IOException {  for (int i=0; i < writer.length; i++) {    writer[i].close();  }}  }
class C{  public static String wrap(String line,final int widthInCharacters,String indent){  final StringBuilder buffer=new StringBuilder();  int lineCount=1;  int spaceIndex=-1;  indent=valueOf(indent,EMPTY_STRING);  while (line.length() > widthInCharacters) {    spaceIndex=line.substring(0,widthInCharacters).lastIndexOf(SPACE);    buffer.append(lineCount++ > 1 ? indent : EMPTY_STRING);    buffer.append(line.substring(0,spaceIndex));    buffer.append(LINE_SEPARATOR);    line=line.substring(spaceIndex + 1);  }  buffer.append(lineCount > 1 ? indent : "");  buffer.append(line);  return buffer.toString();}  }
class C{  @Provides @Config("braintreePublicKey") public static String provideBraintreePublicKey(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return "tzcfxggzgbh2jg5x";default :  return "tzcyzvm3mn7zkdnx";}}  }
class C{  public ExpressionException(String message){  super(message,"expression");}  }
class C{  synchronized void clear(){  myRunnables=null;}  }
class C{  public void removeScanListener(Listener l){  listeners.remove(l);}  }
class C{  public void ensureSize(int size) throws IOException {  if (size > getNumRecords()) {    resizeFile(size);  }}  }
class C{  public static Uri generateUriForReceivedContent(String fileName,String mime,RcsSettings rcsSettings){  String path;  if (MimeManager.isImageType(mime)) {    path=rcsSettings.getPhotoRootDirectory();  } else   if (MimeManager.isVideoType(mime)) {    path=rcsSettings.getVideoRootDirectory();  } else   if (MimeManager.isAudioType(mime)) {    path=rcsSettings.getAudioRootDirectory();  } else {    path=rcsSettings.getFileRootDirectory();  }  StringBuilder extension=new StringBuilder("");  if ((fileName != null) && (fileName.indexOf('.') != -1)) {    extension=new StringBuilder(".").append(fileName.substring(fileName.lastIndexOf('.') + 1));    fileName=fileName.substring(0,fileName.lastIndexOf('.'));  }  String destination=fileName;  int i=1;  while (new File(path + destination + extension).exists()) {    destination=fileName + '_' + i;    i++;  }  return Uri.fromFile(new File(path + destination + extension));}  }
class C{  public void badValue(String text){  try {    oneValue(text);    fail("Expected IonException");  } catch (  IonException e) {    @SuppressWarnings("unused") String msg=e.getMessage();  }}  }
class C{  private void performDrag(float x){  float deltaX=lastMotionX - x;  lastMotionX=x;  if (virtualPos == 0) {    if (deltaX < 0) {      deltaX=-deltaX;      reversePos=true;    } else {      reversePos=false;    }  } else   if (virtualPos > 0) {    deltaX=-deltaX;    reversePos=true;  } else {    reversePos=false;  }  float oldScrollX=getScrollX();  float scrollX=oldScrollX + deltaX;  final int width=getClientWidth();  float leftBound=0;  float rightBound=width * lastOffset;  final ItemInfo currentItem=infoForPosition(this.currentItem);  final ItemInfo lastItem=items.get(items.size() - 1);  if (currentItem != null) {    leftBound=currentItem.offset * width;  }  if (lastItem.position != pagerAdapter.getCount() - 1) {    rightBound=lastItem.offset * width;  }  if (scrollX < leftBound) {    scrollX=leftBound;  } else   if (scrollX > rightBound) {    scrollX=rightBound;  }  lastMotionX+=scrollX - (int)scrollX;  scrollTo((int)scrollX,getScrollY());  pageScrolled((int)scrollX);}  }
class C{  public synchronized void addFrame(final Image image,final long frameDuration){  totalDuration+=frameDuration;  frames.add(new AnimFrame(image,totalDuration));}  }
class C{  public CustomerToken(String accessToken,Long customerId,Date expiresAt){  this.accessToken=accessToken;  this.customerId=customerId;  this.expiresAt=expiresAt;}  }
class C{  public boolean isCrossedOut(){  return modifiers.contains(SGR.CROSSED_OUT);}  }
class C{  public Day(){  this(new Date());}  }
class C{  @Override public void buildCircuits(){  logger=Logger.getLogger(getThreadDependentLoggername());  logger.info("Reloading logic circuit...");  BuildCircuitsUtil.setGate_name_map();  HashMap<String,String> gate_name_map=BuildCircuitsUtil._gate_name_map;  ArrayList<Gate> gates=new ArrayList();  ArrayList<Wire> wires=new ArrayList();  ArrayList<String> file_lines=Util.fileLines(get_options().get_fin_reload());  ArrayList<String> keep_lines=new ArrayList<>();  for (  String s : file_lines) {    if (s.contains("Logic Circuit")) {      continue;    }    if (s.contains("Circuit_score")) {      break;    }    keep_lines.add(s);  }  LinkedHashMap<Integer,Gate> gate_map=new LinkedHashMap<>();  LinkedHashMap<Integer,ArrayList<Integer>> fanin_map=new LinkedHashMap<>();  for (  String s : keep_lines) {    String[] columns=s.split("\\s+");    String gate_type=columns[0].trim();    String gate_logic=columns[1].trim();    String gate_name=columns[2].trim();    String gate_index=columns[3].trim();    String gate_child_indexes="";    if (gate_name_map.containsKey(gate_name)) {      gate_name=gate_name_map.get(gate_name);    }    if (gate_name.contains("input_")) {      gate_name=gate_name.split("input_")[1];    }    if (gate_name.contains("output_")) {      gate_name=gate_name.split("output_")[1];    }    if (!gate_type.equals("INPUT")) {      gate_child_indexes=columns[4].trim();    }    Gate g=new Gate();    if (gate_type.equals("NOT")) {      g.Type=Gate.GateType.NOT;    }    if (gate_type.equals("NOR")) {      g.Type=Gate.GateType.NOR;    }    if (gate_type.equals("INPUT")) {      g.Type=Gate.GateType.INPUT;      g.set_unvisited(false);    }    if (gate_type.equals("OUTPUT")) {      g.Type=Gate.GateType.OUTPUT;    }    if (gate_type.equals("OUTPUT_OR")) {      g.Type=Gate.GateType.OUTPUT_OR;    }    g.Name=gate_name;    g.Index=Integer.valueOf(gate_index);    g.set_logics(new ArrayList<Integer>());    String[] logic_string=gate_logic.split("");    for (    String a : logic_string) {      if (a.equals("0") || a.equals("1")) {        g.get_logics().add(Integer.valueOf(a));      }    }    logger.info(g.get_logics().toString());    gate_map.put(g.Index,g);    if (!gate_child_indexes.isEmpty()) {      ArrayList<Integer> fanin_indexes=new ArrayList<>();      StringTokenizer st=new StringTokenizer(gate_child_indexes," \t\n\r\f,()");      while (st.hasMoreTokens()) {        Integer index=Integer.valueOf(st.nextToken());        fanin_indexes.add(index);      }      fanin_map.put(g.Index,fanin_indexes);    }  }  for (  Integer i : gate_map.keySet()) {    Gate g=gate_map.get(i);    if (fanin_map.containsKey(g.Index)) {      int counter=0;      for (      Integer fanin_index : fanin_map.get(g.Index)) {        Wire w=new Wire();        w.From=g;        w.To=gate_map.get(fanin_index);        w.Index=wires.size();        if (counter > 0) {          w.Next=wires.get(wires.size() - 1);        }        g.Outgoing=w;        wires.add(w);        counter++;      }    }  }  for (  Gate g : gate_map.values()) {    gates.add(g);    if (get_gate_library().get_GATES_BY_NAME().containsKey(g.Name)) {      logger.info("Found " + g.Name);    } else {      logger.info("Missing " + g.Name);    }  }  LogicCircuit lc=new LogicCircuit(gates,wires);  Evaluate.simulateLogic(lc);  LogicCircuitUtil.setInputRPU(lc,get_gate_library());  Evaluate.evaluateCircuit(lc,get_gate_library(),get_options());  get_logic_circuits().add(lc);}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public LongRange(String label,long minIn,boolean minInclusive,long maxIn,boolean maxInclusive){  super(label);  if (!minInclusive) {    if (minIn != Long.MAX_VALUE) {      minIn++;    } else {      failNoMatch();    }  }  if (!maxInclusive) {    if (maxIn != Long.MIN_VALUE) {      maxIn--;    } else {      failNoMatch();    }  }  if (minIn > maxIn) {    failNoMatch();  }  this.min=minIn;  this.max=maxIn;}  }
class C{  public final void println(Object o) throws IOException {  if (o == null)   println("null"); else   println(o.toString());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean validatePage(){  return getInitialObjectName() != null && getEncodings().contains(encodingField.getText());}  }
class C{  public boolean isReceiveOrderReply(){  Object oo=get_Value(COLUMNNAME_ReceiveOrderReply);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Builder(com.wipro.ats.bdre.imcrawler.mr.Contents other){  super(com.wipro.ats.bdre.imcrawler.mr.Contents.SCHEMA$);  if (isValidValue(fields()[0],other.docid)) {    this.docid=data().deepCopy(fields()[0].schema(),other.docid);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.url)) {    this.url=data().deepCopy(fields()[1].schema(),other.url);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.domain)) {    this.domain=data().deepCopy(fields()[2].schema(),other.domain);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.path)) {    this.path=data().deepCopy(fields()[3].schema(),other.path);    fieldSetFlags()[3]=true;  }  if (isValidValue(fields()[4],other.subDomain)) {    this.subDomain=data().deepCopy(fields()[4].schema(),other.subDomain);    fieldSetFlags()[4]=true;  }  if (isValidValue(fields()[5],other.parentUrl)) {    this.parentUrl=data().deepCopy(fields()[5].schema(),other.parentUrl);    fieldSetFlags()[5]=true;  }  if (isValidValue(fields()[6],other.anchor)) {    this.anchor=data().deepCopy(fields()[6].schema(),other.anchor);    fieldSetFlags()[6]=true;  }  if (isValidValue(fields()[7],other.html)) {    this.html=data().deepCopy(fields()[7].schema(),other.html);    fieldSetFlags()[7]=true;  }  if (isValidValue(fields()[8],other.binary)) {    this.binary=data().deepCopy(fields()[8].schema(),other.binary);    fieldSetFlags()[8]=true;  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  i18n=Environment.getI18n();  beanContextChildSupport=new BeanContextChildSupport(this);}  }
class C{  public void createComponentsNotInManifest(SootClass clazz){  if (!globalsMap.containsKey(clazz)) {    Body body=harnessMainBody;    RefType type=RefType.v(clazz);    logger.info("Creating component class not in manifest: {}",clazz);    Local receiver=Jimple.v().newLocal("_$l" + localID++,type);    body.getLocals().add(receiver);    body.getUnits().insertBefore(Jimple.v().newAssignStmt(receiver,Jimple.v().newNewExpr(type)),inLoopStmt);    SootField newField=new SootField(FIELD_PREFIX + localID++,type,Modifier.PUBLIC | Modifier.STATIC);    harnessClass.addField(newField);    List<Stmt> consCalls=TransformsUtils.getConstructorCall(body,receiver,type);    for (    Stmt consCall : consCalls)     body.getUnits().insertBefore(consCall,inLoopStmt);    body.getUnits().insertBefore(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(newField.makeRef()),receiver),inLoopStmt);    logger.info("Adding new receiver object to harness main method: {}",clazz.toString());    globalsMap.put(clazz,newField);    if (Hierarchy.isAndroidComponentClass(clazz)) {      SootMethod initMethod=Scene.v().getMethod(componentInitMethod.get(Hierarchy.getComponentParent(clazz).getName()));      LinkedList<Value> args=new LinkedList<Value>();      args.add(receiver);      logger.info("Adding constructor for component to harness {}, of parent {}",clazz,Hierarchy.getComponentParent(clazz));      Stmt call=Jimple.v().newInvokeStmt(TransformsUtils.makeInvokeExpression(initMethod,null,args));      body.getUnits().insertBefore(call,inLoopStmt);    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean swapChildren(@NonNull DisplayObject child1,@NonNull DisplayObject child2){  child1.swapPriority(child2);  int childIndex1=mDisplayList.indexOf(child1);  int childIndex2=mDisplayList.indexOf(child2);  if (childIndex1 == -1 || childIndex2 == -1) {    return false;  }  removeChildAt(childIndex1);  addChildAt(childIndex1,child2);  removeChildAt(childIndex2);  addChildAt(childIndex2,child1);  return true;}  }
class C{  IgfsFileInfo(IgniteUuid id,int blockSize,long len,@Nullable IgniteUuid affKey,@Nullable Map<String,String> props,@Nullable IgfsFileMap fileMap,@Nullable IgniteUuid lockId,long accessTime,long modificationTime,boolean evictExclude){  super(id,props,accessTime,modificationTime);  this.len=len;  this.blockSize=blockSize;  this.affKey=affKey;  if (fileMap == null)   fileMap=new IgfsFileMap();  this.fileMap=fileMap;  this.lockId=lockId;  this.evictExclude=evictExclude;}  }
class C{  public void afterMergeJoinOfDoubleIndexResults(Collection finalResult){}  }
class C{  @Override public String toString(){  return m_instruction.toString();}  }
class C{  public void sendMessages(List<ProducerRecord<String,String>> records){  Producer<String,String> producer=new KafkaProducer<>(getProducerConfig());  for (  ProducerRecord<String,String> rec : records)   producer.send(rec);  producer.flush();  producer.close();}  }
class C{  public MultiplePiePlot(){  this(null);}  }
class C{  public synchronized Configuration parse(ConfigurationLocation location,String... contentIdentifiersToBeHandled) throws Exception {  log.trace("parse");  configuration=new Configuration(location);  contentIdentifiers=contentIdentifiersToBeHandled;  parser=new MimeStreamParser();  parser.setContentHandler(new MultipartContentHandler());  try (InputStream in=getInputStream()){    parser.parse(in);  }   verifyIntegrity();  return configuration;}  }
class C{  public void testEngineThread1000PerSec() throws Exception {  epService=EPServiceProviderManager.getProvider("testExistingTypeNoOptions",makeConfig("TypeA"));  epService.initialize();  EPStatement stmt=epService.getEPAdministrator().createEPL("select symbol, price, volume from TypeA.win:length(100)");  SupportUpdateListener listener=new SupportUpdateListener();  stmt.addListener(listener);  CSVInputAdapterSpec spec=new CSVInputAdapterSpec(new AdapterInputSource(CSV_FILENAME_ONELINE_TRADE),"TypeA");  spec.setEventsPerSec(1000);  spec.setUsingEngineThread(true);  InputAdapter inputAdapter=new CSVInputAdapter(epService,spec);  inputAdapter.start();  Thread.sleep(1000);  assertEquals(1,listener.getNewDataList().size());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Balance[");  sb.append("DR=").append(DR).append("-CR=").append(CR).append(" = ").append(getBalance()).append("]");  return sb.toString();}  }
class C{  synchronized boolean start(){  if (DEBUG)   Log.v(TAG,"readyStart:");  mStatredCount++;  if ((mEncoderCount > 0) && (mStatredCount == mEncoderCount)) {    mMediaMuxer.start();    mIsStarted=true;    notifyAll();    if (DEBUG)     Log.v(TAG,"MediaMuxer started:");  }  return mIsStarted;}  }
class C{  public void loadListIds(int volId,ArrayList ListIds,String entidad) throws Exception {  IeciTdLongIntegerArrayList ids;  String qual;  String colName;  VolumesTable table=new VolumesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadListIds");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    ids=new IeciTdLongIntegerArrayList();    colName=table.getLoadListIdColumnName();    qual=table.getDeleteListVolQual(volId);    DbSelectFns.select(dbConn,table.getListVolumeTableName(),colName,qual,true,ids);    for (int i=0; i < ids.count(); i++) {      Integer val=new Integer(ids.get(i));      ListIds.add(val);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public void info(String mesg){  log(Level.INFO,mesg,null);}  }
class C{  public static byte[] toBytes(long x){  return toBytes(x,new byte[8],0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.537 -0400",hash_original_method="AC09C8134D834FA86ED67D635D6FA486",hash_generated_method="CE60FFE61A3AA6BBF034F5CFB3541E1E") private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  private void printUC(int c){  if (c > 255) {    out.print("\\u");    if (c < 0x1000)     out.print("0");    out.print(Integer.toHexString(c));  } else {    out.print("\\");    out.print(Integer.toOctalString(c));  }}  }
class C{  public BluetoothGattServer openGattServer(Context context,BluetoothGattServerCallback callback){  if (context == null || callback == null) {    throw new IllegalArgumentException("null parameter: " + context + " "+ callback);  }  try {    IBluetoothManager managerService=mAdapter.getBluetoothManager();    IBluetoothGatt iGatt=managerService.getBluetoothGatt();    if (iGatt == null) {      Log.e(TAG,"Fail to get GATT Server connection");      return null;    }    BluetoothGattServer mGattServer=new BluetoothGattServer(context,iGatt);    Boolean regStatus=mGattServer.registerCallback(callback);    return regStatus ? mGattServer : null;  } catch (  RemoteException e) {    Log.e(TAG,"",e);    return null;  }}  }
class C{  public int maxProfit(int[] prices){  int maxProfit=0;  if (prices == null || prices.length < 2) {    return maxProfit;  }  int len=prices.length;  int[] maxBy=new int[len];  int[] maxSince=new int[len];  int valley=prices[0];  int peak=prices[len - 1];  for (int i=1; i < len; i++) {    valley=Math.min(valley,prices[i]);    maxBy[i]=Math.max(maxBy[i - 1],prices[i] - valley);  }  for (int i=len - 2; i >= 0; i--) {    peak=Math.max(peak,prices[i]);    maxSince[i]=Math.max(maxSince[i + 1],peak - prices[i]);    maxProfit=Math.max(maxProfit,maxBy[i] + maxSince[i]);  }  return maxProfit;}  }
class C{  public void writeDataToFile(byte[] keyArray,byte[] dataArray,int[] msrLength,int entryCount,byte[] startKey,byte[] endKey) throws CarbonDataWriterException {  int keySize=keyArray.length;  long offset=writeDataToFile(keyArray,dataArray);  BlockletInfo blockletInfo=getBlockletInfo(keySize,msrLength,offset,entryCount,startKey,endKey);  this.blockletInfoList.add(blockletInfo);  this.currentFileSize+=keySize + dataArray.length + (blockletInfoList.size() * this.leafMetaDataSize)+ CarbonCommonConstants.LONG_SIZE_IN_BYTE;}  }
class C{  public ImagesBulkImportServiceImpl(final FederationFacade federationFacade,final ImageService imageService,final ImageImportDomainObjectStrategy[] strategies){  super(federationFacade);  this.imageService=imageService;  this.strategies=strategies;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public String toString(){  return "TAG_Float(\"" + name + "\"): val="+ value;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected static byte[] parseContentType(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map){  assert (null != pduDataStream);  byte[] contentType=null;  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  int cur=(temp & 0xFF);  if (cur < TEXT_MIN) {    int length=parseValueLength(pduDataStream);    int startPos=pduDataStream.available();    pduDataStream.mark(1);    temp=pduDataStream.read();    assert (-1 != temp);    pduDataStream.reset();    int first=(temp & 0xFF);    if ((first >= TEXT_MIN) && (first <= TEXT_MAX)) {      contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);    } else     if (first > TEXT_MAX) {      int index=parseShortInteger(pduDataStream);      if (index < PduContentTypes.contentTypes.length) {        contentType=(PduContentTypes.contentTypes[index]).getBytes();      } else {        pduDataStream.reset();        contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);      }    } else {      Log.e(LOG_TAG,"Corrupt content-type");      return (PduContentTypes.contentTypes[0]).getBytes();    }    int endPos=pduDataStream.available();    int parameterLen=length - (startPos - endPos);    if (parameterLen > 0) {      parseContentTypeParams(pduDataStream,map,parameterLen);    }    if (parameterLen < 0) {      Log.e(LOG_TAG,"Corrupt MMS message");      return (PduContentTypes.contentTypes[0]).getBytes();    }  } else   if (cur <= TEXT_MAX) {    contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);  } else {    contentType=(PduContentTypes.contentTypes[parseShortInteger(pduDataStream)]).getBytes();  }  return contentType;}  }
class C{  protected AsciiForm buildAsciiForm(){  return new DefaultAsciiForm().withFormatter(getFormatterMode());}  }
class C{  BluetoothHealth(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  if (!context.bindService(new Intent(IBluetoothHealth.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth Health Service");  }}  }
class C{  public void loadMedia(MediaInfo media,boolean autoPlay,int position) throws TransientNetworkDisconnectionException, NoConnectionException {  loadMedia(media,autoPlay,position,null);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void sendExceptionSettings(final TargetInformationReply reply){  try {    m_debugger.setExceptionSettings(CDebuggerFunctions.mergeExceptionsSettings(m_debugTarget,reply.getTargetInformation().getDebuggerOptions().getExceptions(),m_debugger.getId()));  } catch (  final DebugExceptionWrapper exception) {    CUtilityFunctions.logException(exception);    final String message="Exception settings could not be sent to the debugger.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not send the exception settings to the debug client."),new String[]{"BinNavi is unable to show the debugger options " + "dialog until the problem is resolved."},new String[]{"The default debugger options will be used during this session."});    NaviErrorDialog.show(m_parent,message,description,exception);  }catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);    final String message="Exception settings could not be loaded.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not load the exception settings from the database."),new String[]{"Communication error while contacting the database"},new String[]{"BinNavi is unable to read the exception settings from the database.","The default exception settings will be used during this session."});    NaviErrorDialog.show(m_parent,message,description,exception);  }}  }
class C{  public String format(double number,int decimalPlaces){  if (decimalPlaces == 0) {    return format((double)((long)number));  }  double pos=10;  for (int iter=1; iter < decimalPlaces; iter++) {    pos*=10;  }  long ln=(long)(number * pos);  number=((double)ln) / pos;  return format(number);}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public static String join(String separator,List<?> elements){  if (elements == null || elements.size() == 0) {    return "";  }  StringBuilder sb=new StringBuilder(elements.size() * 3);  int i=0;  for (  Object elem : elements) {    if (separator.length() > 0 && i++ > 0) {      sb.append(separator);    }    sb.append(format(elem));  }  return sb.toString();}  }
class C{  public char charAt(int index){  return str().charAt(index);}  }
class C{  public static void removeSourceContainer(IJavaProject jproject,String containerName) throws CoreException {  IFolder folder=jproject.getProject().getFolder(containerName);  removeFromClasspath(jproject,folder.getFullPath());  folder.delete(true,null);}  }
class C{  private boolean addProposals(ContentAssistRequest contentAssistRequest,IProposalComputer... proposalComputers){  List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();  for (  IProposalComputer proposalComputer : proposalComputers) {    if (proposalComputer == null) {      continue;    }    try {      proposalComputer.computeProposals(proposals);    } catch (    UiBinderException e) {      GWTPluginLog.logWarning(e,MessageFormat.format("Could not compute proposals for {0}.",proposalComputer.getClass().getSimpleName()));      return false;    }  }  for (  ICompletionProposal proposal : proposals) {    contentAssistRequest.addProposal(proposal);  }  return proposals.size() > 0;}  }
class C{  public String entity(){  return entity;}  }
class C{  public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public boolean isEmpty(){  return items.isEmpty();}  }
class C{  public T codetype(String value){  return attr("codetype",value);}  }
class C{  public boolean isJsonArray(){  return this instanceof JsonArray;}  }
class C{  private void resetWarningLog(){  m_warningLog=null;  m_warningCounter=0;  m_warnings.setText(s_logger.localizeMessage("guiButtonViewWarnings"));  m_warnings.setEnabled(false);}  }
class C{  void _m33(float m33){  this.m33=m33;}  }
class C{  public static boolean hasTable(final CConnection connection,final String tableName) throws CouldntLoadDataException {  Preconditions.checkNotNull(tableName,"IE02038: Table name argument can not be null");  Preconditions.checkNotNull(connection,"IE02039: Connection argument can not be null");  final String query="SELECT relname FROM pg_class WHERE relname = '" + tableName + "'";  try (ResultSet result=connection.executeQuery(query,true)){    return result.first();  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  @RpcMethod public VmDisksOpResponse detachDisks(String vmId,List<String> diskIds) throws InterruptedException, RpcException {  SyncHandler<VmDisksOpResponse,Host.AsyncClient.detach_disks_call> syncHandler=new SyncHandler<>();  detachDisks(vmId,diskIds,syncHandler);  syncHandler.await();  logger.info("finished detach_disks vm {}, disks {}, target {}",vmId,diskIds,getHostIp());  return ResponseValidator.checkDetachDisksResponse(syncHandler.getResponse());}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testGreatCircleAzimuth_WithNaN() throws Exception {  Location origin=new Location(THETA,PHI);  Location nanLat=new Location(Double.NaN,PHI);  Location nanBoth=new Location(Double.NaN,Double.NaN);  assertTrue("expecting NaN with equal longitudes",Double.isNaN(origin.greatCircleAzimuth(nanLat)));  assertTrue("expecting NaN",Double.isNaN(origin.greatCircleAzimuth(nanBoth)));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void action(String action){  bot.sendIRC().action(serverUser.getNick(),action);}  }
class C{  int parseNumber(String source,int ofs,String name,int min,int max) throws ParseException {  if (source == null) {    throwInvalid(name,ofs);  }  int v=-1;  try {    v=Integer.parseInt(source);  } catch (  NumberFormatException nfe) {    throwInvalid(name,ofs);  }  if (min != max) {    validateNumber(v,ofs,name,min,max);  }  return v;}  }
class C{  private BusinessObjectDataAttribute createBusinessObjectDataAttributeFromEntity(BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity){  BusinessObjectDataAttribute businessObjectDataAttribute=new BusinessObjectDataAttribute();  businessObjectDataAttribute.setId(businessObjectDataAttributeEntity.getId());  businessObjectDataAttribute.setBusinessObjectDataAttributeKey(getBusinessObjectDataAttributeKey(businessObjectDataAttributeEntity));  businessObjectDataAttribute.setBusinessObjectDataAttributeValue(businessObjectDataAttributeEntity.getValue());  return businessObjectDataAttribute;}  }
class C{  public static boolean isComputeHost(ComputeStateWithDescription computeDesc){  if (computeDesc.parentLink == null) {    return true;  } else {    return false;  }}  }
class C{  public LUDecomposition(double[][] LU,int m,int n){  LU=VMath.copy(LU);  this.LU=LU;  this.m=m;  this.n=n;  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m && LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  protected double computeDCovar(double[] dVarMatrixA,double[] dVarMatrixB,int n){  double result=0.;  for (int i=0, c=0; i < n; i++) {    for (int j=0; j < i; j++) {      result+=2. * dVarMatrixA[c] * dVarMatrixB[c];      c++;    }    result+=dVarMatrixA[c] * dVarMatrixB[c];    c++;  }  return result / (n * n);}  }
class C{  protected Properties defineProperties(){  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  props.setProperty(CONSERVE_SOCKETS,"true");  return props;}  }
class C{  public DataExporter(){  this.dataExportObjectFactory=new ObjectFactory();  this.dataExport=this.dataExportObjectFactory.createGmDataExportType();  this.dataExport.setData(this.dataExportObjectFactory.createDataType());  this.dataExport.setFingerprints(this.dataExportObjectFactory.createFingerprintsType());  this.dataExport.setImportedItems(this.dataExportObjectFactory.createImportedItemsType());}  }
class C{  @Override public void deleteGroupSnapshots(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START deleteGroupSnapshots");  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    StorageSystem newStorage=findProviderFactory.withGroup(storage,consistencyGroupName).find();    if (newStorage == null) {      _log.warn("Replication Group {} not found.",consistencyGroupName);    }    String snapshotGroupName=snapshotObj.getReplicationGroupInstance();    if (snapshotGroupName.contains("+")) {      if (storage.getUsingSmis80()) {        snapshotGroupName=snapshotGroupName.substring(snapshotGroupName.indexOf("+") + 1);      } else {        snapshotGroupName=snapshotGroupName.substring(0,snapshotGroupName.indexOf("+"));      }    }    List<BlockSnapshot> snapshotList=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);    CIMArgument[] outArgs=new CIMArgument[5];    boolean deleteTarget=true;    CIMObjectPath targetGroupPath=_cimPath.getReplicationGroupPath(storage,snapshotGroupName);    if (targetGroupPath != null) {      CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,snapshotGroupName);      if (_helper.checkExists(storage,groupSynchronized,false,false) != null) {        if (storage.checkIfVmax3()) {          Iterator<BlockSnapshot> iter=snapshotList.iterator();          while (iter.hasNext()) {            BlockSnapshot blockSnapshot=iter.next();            _helper.removeVolumeFromParkingSLOStorageGroup(storage,blockSnapshot.getNativeId(),false);            _log.info("Done invoking remove volume {} from parking SLO storage group",blockSnapshot.getNativeId());          }          CIMArgument[] inArgsDetach=_helper.getUnlinkBlockSnapshotSessionTargetInputArguments(groupSynchronized);          CIMArgument[] outArgsDetach=new CIMArgument[5];          CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);          _helper.invokeMethodSynchronously(storage,replicationSvcPath,SmisConstants.MODIFY_REPLICA_SYNCHRONIZATION,inArgsDetach,outArgsDetach,null);        } else {          CIMArgument[] deleteCGSnapInput=_helper.getDeleteSnapshotSynchronousInputArguments(groupSynchronized);          _helper.callModifyReplica(storage,deleteCGSnapInput,outArgs);          deleteTarget=false;        }      } else {        _log.info("GroupSynchronized {} not found",groupSynchronized.toString());      }    }    if (deleteTarget) {      List<String> targetDeviceIds=new ArrayList<String>();      Iterator<BlockSnapshot> snapshotIter=snapshotList.iterator();      while (snapshotIter.hasNext()) {        BlockSnapshot snap=snapshotIter.next();        if (!isNullOrEmpty(snap.getNativeId())) {          targetDeviceIds.add(snap.getNativeId());        }      }      if (targetGroupPath != null) {        ReplicationUtils.deleteTargetDeviceGroup(storage,targetGroupPath,_dbClient,_helper,_cimPath);      }      if (!targetDeviceIds.isEmpty()) {        ReplicationUtils.deleteTargetDevices(storage,targetDeviceIds.toArray(new String[targetDeviceIds.size()]),taskCompleter,_dbClient,_helper,_cimPath);      }    }    Iterator<BlockSnapshot> snapshotIter=snapshotList.iterator();    while (snapshotIter.hasNext()) {      BlockSnapshot it=snapshotIter.next();      it.setInactive(true);      it.setIsSyncActive(false);      _dbClient.updateObject(it);    }    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshots from consistency group array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  private boolean containsAll(Graph g,Set<Node> nodes,NodePair pair){  List<String> nodeNames=g.getNodeNames();  if (!nodeNames.contains(pair.getFirst().getName()) || !nodeNames.contains(pair.getSecond().getName())) {    return false;  }  for (  Node node : nodes) {    if (!nodeNames.contains(node.getName())) {      return false;    }  }  return true;}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  public CallbackContext(int logId,long startTime,int timeout,boolean isShortAliveConn,Channel channel,Class<? extends GeneratedMessage> resClazz,Callback<? extends GeneratedMessage> callback){  super();  this.logId=logId;  this.startTime=startTime;  this.timeout=timeout;  this.isShortAliveConn=isShortAliveConn;  this.channel=channel;  this.resClazz=resClazz;  this.callback=callback;}  }
class C{  public BERSet(){}  }
class C{  public boolean foldConstants(){  state=State.FOLDING;  changed=false;  topLevelConditions.clear();  planContext.accept(this);  return changed;}  }
class C{  private void prepareAndInstallView(InternalDistributedMember coordinator,List<InternalDistributedMember> members) throws IOException {  int viewId=1;  when(services.getMessenger()).thenReturn(messenger);  NetView netView=new NetView(coordinator,viewId,members);  InstallViewMessage installViewMessage=getInstallViewMessage(netView,credentials,true);  gmsJoinLeave.processMessage(installViewMessage);  verify(messenger).send(any(ViewAckMessage.class));  installViewMessage=getInstallViewMessage(netView,credentials,false);  gmsJoinLeave.processMessage(installViewMessage);  Assert.assertEquals(netView,gmsJoinLeave.getView());}  }
class C{  public FacetSequence(CoordinateSequence pts,int start){  this.pts=pts;  this.start=start;  this.end=start + 1;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongObjectHashMap)) {    return false;  }  TLongObjectHashMap that=(TLongObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<V>(that));}  }
class C{  public KMLGlobeBalloonImpl(GlobeBalloon balloon,KMLAbstractFeature feature){  super(feature);  if (balloon == null) {    String msg=Logging.getMessage("nullValue.BalloonIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.balloon=balloon;  this.initialize(balloon);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_RECORD_ENTITY_2__TRACE_RECORD_1:    setTrace_record_1(TRACE_RECORD_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected void logMsg(String s){  outWriter.println(s);}  }
class C{  public void removePairs(Collection<String> vars){  vars.stream().forEach(null);  cachedHash=0;}  }
class C{  public static PeerGroup newWithTor(Context context,@Nullable AbstractBlockChain chain,TorClient torClient) throws TimeoutException {  return newWithTor(context,chain,torClient,true);}  }
class C{  public static SavedReports run(AdExchangeSeller adExchangeSeller,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all saved reports for account\n");  System.out.println("=================================================================");  String pageToken=null;  SavedReports savedReports=null;  do {    savedReports=adExchangeSeller.reports().saved().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (savedReports.getItems() != null && !savedReports.getItems().isEmpty()) {      for (      SavedReport savedReport : savedReports.getItems()) {        System.out.printf("Saved report with id \"%s\" and name \"%s\" was found.\n",savedReport.getId(),savedReport.getName());      }    } else {      System.out.println("No saved reports found.");    }    pageToken=savedReports.getNextPageToken();  } while (pageToken != null);  System.out.println();  return savedReports;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private void handleHaving(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {  final ASTHavingClause havingClause=astQuery.getHavingClause();  if (havingClause != null) {    final HavingNode havingNode=new HavingNode();    final int nchildren=havingClause.jjtGetNumChildren();    for (int i=0; i < nchildren; i++) {      final IValueExpressionNode ve=(IValueExpressionNode)havingClause.jjtGetChild(i).jjtAccept(this,null);      havingNode.addExpr(ve);    }    queryRoot.setHaving(havingNode);  }}  }
class C{  public final double doOperation() throws OperatorFailedException {  final int dim=indicatorParameter.getDimension();  double sum=0.0;  for (int i=0; i < dim; i++) {    sum+=indicatorParameter.getParameterValue(i);  }  final int pos=MathUtils.nextInt(dim);  final int value=(int)indicatorParameter.getParameterValue(pos);  double rand=0;  if (rateParameter != null)   rand=MathUtils.nextDouble();  double logq;  if (value == 0) {    indicatorParameter.setParameterValue(pos,1.0);    logq=-Math.log((dim - sum) / (sum + 1));  } else   if (value == 1) {    indicatorParameter.setParameterValue(pos,0.0);    logq=-Math.log(sum / (dim - sum + 1));    rand*=-1;  } else {    throw new RuntimeException("expected 1 or 0");  }  if (rateParameter != null) {    final double scale=Math.exp((rand) * scaleFactor);    logq+=Math.log(scale);    final double oldValue=rateParameter.getParameterValue(0);    final double newValue=scale * oldValue;    rateParameter.setParameterValue(0,newValue);  }  return logq;}  }
class C{  public Expression order(){  return this;}  }
class C{  public static boolean writeBinaryFile(byte[] data,File outputFile){  boolean result=true;  try {    BufferedOutputStream output;    output=new BufferedOutputStream(new FileOutputStream(outputFile));    output.write(data,0,data.length);    output.close();  } catch (  Exception e) {    e.printStackTrace();    result=false;  }  return result;}  }
class C{  public UpdateConstraintException(){  super();}  }
class C{  public void httpRequest(HttpRequestEvent e) throws IOException {  String filename=e.getRequest().substring(1);  if (Debug.debugging("http")) {    Debug.output("FileListener: Looking for file " + filename);  }  FileInputStream requestedfile;  try {    requestedfile=new FileInputStream(filename);  } catch (  java.io.FileNotFoundException exception) {    Debug.error("FileListener: Unable to find file " + filename);    return;  }  int bytes=requestedfile.available();  byte[] b=new byte[bytes];  int bytes_read=requestedfile.read(b);  if (bytes_read != bytes) {    Debug.error("FileListener: Did not read the correct number of bytes for " + filename);  }  e.getWriter().write(new String(b));}  }
class C{  public HasChildQueryBuilder minChildren(int minChildren){  this.minChildren=minChildren;  return this;}  }
class C{  void jbInit() throws Exception {  CompiereColor.setBackground(panel);  mainPanel.setLayout(mainLayout);  mainLayout.setVgap(10);  parameterPanel.setLayout(parameterLayout);  orgLabel.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  locatorLabel.setText(Msg.translate(Env.getCtx(),"M_Locator_ID"));  productLabel.setText(Msg.translate(Env.getCtx(),"Product"));  dateFLabel.setText(Msg.translate(Env.getCtx(),"DateFrom"));  dateTLabel.setText(Msg.translate(Env.getCtx(),"DateTo"));  mtypeLabel.setText(Msg.translate(Env.getCtx(),"MovementType"));  mainPanel.add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(orgLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(orgField,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  parameterPanel.add(mtypeLabel,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(mtypeField,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  parameterPanel.add(dateFLabel,new GridBagConstraints(4,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(dateFField,new GridBagConstraints(5,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  parameterPanel.add(locatorLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(locatorField,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  parameterPanel.add(productLabel,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(productField,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  parameterPanel.add(dateTLabel,new GridBagConstraints(4,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  parameterPanel.add(dateTField,new GridBagConstraints(5,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,5),0,0));  southPanel.setLayout(southLayout);  southPanel.add(confirmPanel,BorderLayout.NORTH);  southPanel.add(statusBar,BorderLayout.SOUTH);  mainPanel.add(southPanel,BorderLayout.SOUTH);}  }
class C{  protected boolean oneSameNetwork(MacAddress m1,MacAddress m2){  String net1=macToGuid.get(m1);  String net2=macToGuid.get(m2);  if (net1 == null)   return false;  if (net2 == null)   return false;  return net1.equals(net2);}  }
class C{  public int currentBCI(){  return curBCI;}  }
class C{  @Override public int size(){  return size;}  }
class C{  public MendeliannessAnnotator(Set<Family> families,SexMemo sexMemo,GenotypeProportions aggregate,boolean annotate,boolean lenient,boolean strictMissingPloidy){  if (families == null || families.size() == 0) {    throw new IllegalArgumentException("At least one family is required");  }  mFamilies=families;  mSexMemo=sexMemo;  mAggregate=aggregate;  mMissingAsRef=lenient;  mAllowHomozygousAsHaploid=lenient;  mStrictMissingPloidy=strictMissingPloidy;  mAnnotate=annotate;}  }
class C{  public void startContactPicker(int pickContactRequest){  Intent intent=new Intent(Intent.ACTION_PICK,ContactsContract.Contacts.CONTENT_URI);  Bundle bundle=ActivityOptions.makeSceneTransitionAnimation(mActivity).toBundle();  mActivity.startActivityForResult(intent,pickContactRequest,bundle);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void start(String flowName){  Flow flow=sFlowMap.get(flowName);  if (flow != null) {    flow.start();  }}  }
class C{  private static void addLiveReference(Object value){synchronized (sLiveObjects) {    Integer count=sLiveObjects.get(value);    if (count == null) {      sLiveObjects.put(value,1);    } else {      sLiveObjects.put(value,count + 1);    }  }}  }
class C{  public static char[] fix83600(char[] signature){  if (signature == null || signature.length < 2)   return signature;  return Signature.removeCapture(signature);}  }
class C{  public Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testGetCertificateChain(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  Certificate[] res=ksPKE.getCertificateChain();  assertEquals("Incorrect chain length",testChain.length,res.length);  for (int i=0; i < res.length; i++) {    assertEquals("Incorrect chain element: ".concat(Integer.toString(i)),testChain[i],res[i]);  }}  }
class C{  private static void copyLocalFileToHDFS(String carbonStoreFilePath,String localFilePath,int bufferSize,long blockSize) throws IOException {  DataOutputStream dataOutputStream=null;  DataInputStream dataInputStream=null;  try {    LOGGER.debug("HDFS file block size for file: " + carbonStoreFilePath + " is "+ blockSize+ " (bytes");    dataOutputStream=FileFactory.getDataOutputStream(carbonStoreFilePath,FileFactory.getFileType(carbonStoreFilePath),bufferSize,blockSize);    dataInputStream=FileFactory.getDataInputStream(localFilePath,FileFactory.getFileType(localFilePath),bufferSize);    IOUtils.copyBytes(dataInputStream,dataOutputStream,bufferSize);  }  finally {    CarbonUtil.closeStreams(dataInputStream,dataOutputStream);  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private Boolean modifyNtpShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare,String forceGroup,SMBFileShare existingShare) throws NetAppCException {  String portGroup=findSVMName(args.getFs());  NetAppClusterApi ncApi=new NetAppClusterApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).svm(portGroup).build();  String shareId=smbFileShare.getPath();  if (!ncApi.modifyShare(shareId,smbFileShare.getName(),smbFileShare.getDescription(),smbFileShare.getMaxUsers(),smbFileShare.getPermission(),forceGroup)) {    _log.info("NetAppClusterModeDevice doShare (modification) for {} with id {} - failed",shareId,args.getFileObjId());    return false;  } else {    _log.info("NetAppClusterModeDevice doShare (modification) for {} with id {} - complete",shareId,args.getFileObjId());    return true;  }}  }
class C{  @Override public void broadcast(BehaviorEvent event){  getDelegate(event.getFacesContext()).broadcast(event);}  }
class C{  void reconciled(CompilationUnit ast,ITypeRoot javaElement,IProgressMonitor progressMonitor){}  }
class C{  public static String[] fastSplit(String line,char splitChar,boolean trimLine,char quoteChar,char escapeChar) throws CSVParseException {  List<String> resultList=new ArrayList<String>();  StringBuilder tempString=new StringBuilder();  String errorMessage="";  int errorColumnIndex=0;  String errorLastFewReadChars="";  SplitMachineState machineState=SplitMachineState.NEW_SPLIT;  line=trimLine ? line.trim() : line;  for (int i=0; i < line.length(); i++) {    char currentChar=line.charAt(i);    char nextChar;    if (i + 1 < line.length()) {      nextChar=line.charAt(i + 1);    } else {      nextChar=NONE;    }switch (machineState) {case NEW_SPLIT:      tempString.setLength(0);    if (currentChar == splitChar) {      resultList.add("");      if (nextChar == NONE) {        resultList.add("");        tempString=new StringBuilder();        machineState=SplitMachineState.END_OF_LINE;      }      continue;    }  if (currentChar == ' ' || currentChar == '\t') {    machineState=SplitMachineState.START_WHITESPACE;    continue;  }if (currentChar == quoteChar) {  tempString.append(currentChar);  machineState=SplitMachineState.QUOTE_OPENED;  continue;}if (currentChar == escapeChar) {if (nextChar == NONE) {  resultList.add("");  machineState=SplitMachineState.NEW_SPLIT;  continue;}tempString.append(nextChar);i++;machineState=SplitMachineState.WRITE_NOT_QUOTE;continue;}tempString.append(currentChar);machineState=SplitMachineState.WRITE_NOT_QUOTE;continue;case START_WHITESPACE:if (currentChar == splitChar) {resultList.add("");machineState=SplitMachineState.NEW_SPLIT;continue;}if (currentChar == ' ' || currentChar == '\t') {continue;}if (currentChar == quoteChar) {tempString.append(currentChar);machineState=SplitMachineState.QUOTE_OPENED;continue;}if (currentChar == escapeChar) {if (nextChar == NONE) {resultList.add(null);machineState=SplitMachineState.END_OF_LINE;continue;}tempString.append(nextChar);i++;machineState=SplitMachineState.WRITE_NOT_QUOTE;continue;}tempString.append(currentChar);machineState=SplitMachineState.WRITE_NOT_QUOTE;continue;case WRITE_NOT_QUOTE:if (currentChar == splitChar) {resultList.add(tempString.toString());if (nextChar == NONE) {resultList.add("");tempString=new StringBuilder();machineState=SplitMachineState.END_OF_LINE;continue;}machineState=SplitMachineState.NEW_SPLIT;continue;}if (currentChar == escapeChar) {if (nextChar == NONE) {resultList.add(tempString.toString().trim());machineState=SplitMachineState.END_OF_LINE;continue;}tempString.append(nextChar);i++;continue;}if (currentChar == quoteChar) {errorMessage="Value quote misplaced";errorColumnIndex=i;if (tempString.length() < 10) {StringBuilder errorCharBuf=new StringBuilder();errorCharBuf.append(tempString);if (errorCharBuf.length() > 0) {errorCharBuf.insert(0,splitChar);}for (int j=errorCharBuf.length(), k=resultList.size() - 1; j < 20; j++, k--) {if (k < 0) {break;}errorCharBuf.insert(0,resultList.get(k));if (errorCharBuf.length() < 18) {errorCharBuf.insert(0,splitChar);}j=errorCharBuf.length();}errorCharBuf.reverse();errorCharBuf.setLength(19);errorCharBuf.reverse();errorCharBuf.append(currentChar);errorLastFewReadChars=errorCharBuf.toString();} else {errorLastFewReadChars=tempString.substring(tempString.length() - 9).toString() + currentChar;}machineState=SplitMachineState.ERROR;continue;}tempString.append(currentChar);continue;case END_OF_LINE:break;case QUOTE_OPENED:if (currentChar == quoteChar) {tempString.append(currentChar);machineState=SplitMachineState.QUOTE_CLOSED;continue;}if (currentChar == escapeChar) {if (nextChar == NONE) {errorMessage="Value quotes malformed";errorColumnIndex=i;if (tempString.length() < 10) {StringBuilder errorCharBuf=new StringBuilder();errorCharBuf.append(tempString);if (errorCharBuf.length() > 0) {errorCharBuf.insert(0,splitChar);}for (int j=errorCharBuf.length(), k=resultList.size() - 1; j < 20; j++, k--) {if (k < 0) {break;}errorCharBuf.insert(0,resultList.get(k));if (errorCharBuf.length() < 18) {errorCharBuf.insert(0,splitChar);}j=errorCharBuf.length();}errorCharBuf.reverse();errorCharBuf.setLength(19);errorCharBuf.reverse();errorCharBuf.append(currentChar);errorLastFewReadChars=errorCharBuf.toString();} else {errorLastFewReadChars=tempString.substring(tempString.length() - 9).toString() + currentChar;}machineState=SplitMachineState.ERROR;continue;}tempString.append(nextChar);i++;machineState=SplitMachineState.WRITE_QUOTE;continue;}tempString.append(currentChar);machineState=SplitMachineState.WRITE_QUOTE;continue;case WRITE_QUOTE:if (nextChar != NONE && nextChar == quoteChar && currentChar == quoteChar) {tempString.append(nextChar);i++;continue;}if (currentChar == quoteChar) {tempString.append(currentChar);machineState=SplitMachineState.QUOTE_CLOSED;continue;}if (currentChar == escapeChar) {if (nextChar == NONE) {errorMessage="Value quotes malformed";errorColumnIndex=i;if (tempString.length() < 10) {StringBuilder errorCharBuf=new StringBuilder();errorCharBuf.append(tempString);if (errorCharBuf.length() > 0) {errorCharBuf.insert(0,splitChar);}for (int j=errorCharBuf.length(), k=resultList.size() - 1; j < 20; j++, k--) {if (k < 0) {break;}errorCharBuf.insert(0,resultList.get(k));if (errorCharBuf.length() < 18) {errorCharBuf.insert(0,splitChar);}j=errorCharBuf.length();}errorCharBuf.reverse();errorCharBuf.setLength(19);errorCharBuf.reverse();errorCharBuf.append(currentChar);errorLastFewReadChars=errorCharBuf.toString();} else {errorLastFewReadChars=tempString.substring(tempString.length() - 9).toString() + currentChar;}machineState=SplitMachineState.ERROR;throw new CSVParseException(errorMessage + " at position " + i+ ". Last characters read: "+ errorLastFewReadChars);}tempString.append(nextChar);i++;continue;}tempString.append(currentChar);continue;case QUOTE_CLOSED:if (currentChar == splitChar) {if (tempString.charAt(0) == quoteChar && tempString.charAt(tempString.length() - 1) == quoteChar) {resultList.add(tempString.substring(1,tempString.length() - 1).trim());} else {resultList.add(tempString.toString());}if (nextChar == NONE) {resultList.add("");tempString=new StringBuilder();machineState=SplitMachineState.END_OF_LINE;continue;}machineState=SplitMachineState.NEW_SPLIT;continue;}if (currentChar == ' ' || (currentChar == '\t')) {continue;}errorMessage="Unexpected character after closed value quote";errorColumnIndex=i;if (tempString.length() < 10) {StringBuilder errorCharBuf=new StringBuilder();errorCharBuf.append(tempString);if (errorCharBuf.length() > 0) {errorCharBuf.insert(0,splitChar);}for (int j=errorCharBuf.length(), k=resultList.size() - 1; j < 20; j++, k--) {if (k < 0) {break;}errorCharBuf.insert(0,resultList.get(k));if (errorCharBuf.length() < 18) {errorCharBuf.insert(0,splitChar);}j=errorCharBuf.length();}errorCharBuf.reverse();errorCharBuf.setLength(19);errorCharBuf.reverse();errorCharBuf.append(currentChar);errorLastFewReadChars=errorCharBuf.toString();} else {errorLastFewReadChars=tempString.substring(tempString.length() - 9).toString() + currentChar;}throw new CSVParseException(errorMessage + " at position " + i+ ". Last characters read: "+ errorLastFewReadChars);case ERROR:throw new CSVParseException(errorMessage + " at position " + i+ ". Last characters read: "+ errorLastFewReadChars);}}if (machineState == SplitMachineState.QUOTE_OPENED || machineState == SplitMachineState.WRITE_QUOTE) {errorMessage="Value quotes not closed";errorColumnIndex=line.length() - 1;if (tempString.length() < 10) {StringBuilder errorCharBuf=new StringBuilder();errorCharBuf.append(tempString);if (errorCharBuf.length() > 0) {errorCharBuf.insert(0,splitChar);}for (int j=errorCharBuf.length(), k=resultList.size() - 1; j < 20; j++, k--) {if (k < 0) {break;}errorCharBuf.insert(0,resultList.get(k));if (errorCharBuf.length() < 18) {errorCharBuf.insert(0,splitChar);}j=errorCharBuf.length();}errorCharBuf.reverse();errorCharBuf.setLength(20);errorCharBuf.reverse();errorLastFewReadChars=errorCharBuf.toString();} else {errorLastFewReadChars=tempString.substring(tempString.length() - 10).toString();}throw new CSVParseException(errorMessage + " at position " + errorColumnIndex+ ". Last characters read: "+ errorLastFewReadChars);} else {if (tempString.length() > 0) {if (machineState == SplitMachineState.QUOTE_CLOSED && tempString.charAt(0) == quoteChar && tempString.charAt(tempString.length() - 1) == quoteChar) {resultList.add(tempString.substring(1,tempString.length() - 1).trim());tempString=new StringBuilder();} else {resultList.add(tempString.toString());tempString=new StringBuilder();}}}String[] resultArray=new String[resultList.size()];resultList.toArray(resultArray);return resultArray;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected String parseLongString(int closingCharacter) throws IOException, RDFParseException {  StringBuilder sb=getBuilder();  int doubleQuoteCount=0;  int c;  while (doubleQuoteCount < 3) {    c=readCodePoint();    if (c == -1) {      throwEOFException();    } else     if (c == closingCharacter) {      doubleQuoteCount++;    } else {      doubleQuoteCount=0;    }    appendCodepoint(sb,c);    if (c == '\\') {      c=readCodePoint();      if (c == -1) {        throwEOFException();      }      appendCodepoint(sb,c);    }  }  return sb.substring(0,sb.length() - 3);}  }
class C{  @Override public CertPath engineGenerateCertPath(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("Missing input stream");  }  try {    byte[] encoding=readOneBlock(inStream);    if (encoding != null) {      return new X509CertPath(new ByteArrayInputStream(encoding));    } else {      throw new IOException("Empty input");    }  } catch (  IOException ioe) {    throw new CertificateException(ioe.getMessage());  }}  }
class C{  public final void append(char value){  char[] chunk;  if (m_firstFree < m_chunkSize)   chunk=m_array[m_lastChunk]; else {    int i=m_array.length;    if (m_lastChunk + 1 == i) {      char[][] newarray=new char[i + 16][];      System.arraycopy(m_array,0,newarray,0,i);      m_array=newarray;    }    chunk=m_array[++m_lastChunk];    if (chunk == null) {      if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {        m_innerFSB=new FastStringBuffer(this);      }      chunk=m_array[m_lastChunk]=new char[m_chunkSize];    }    m_firstFree=0;  }  chunk[m_firstFree++]=value;}  }
class C{  public boolean isCullTextEnabled(){  return cullText;}  }
class C{  public void write(Geometry geometry,Writer writer) throws IOException {  writeFormatted(geometry,false,writer);}  }
class C{  private static KafkaIO.TypedRead<Integer,Long> mkKafkaReadTransform(int numElements,@Nullable SerializableFunction<KV<Integer,Long>,Instant> timestampFn){  List<String> topics=ImmutableList.of("topic_a","topic_b");  KafkaIO.Read<Integer,Long> reader=KafkaIO.read().withBootstrapServers("none").withTopics(topics).withConsumerFactoryFn(new ConsumerFactoryFn(topics,10,numElements,OffsetResetStrategy.EARLIEST)).withKeyCoder(BigEndianIntegerCoder.of()).withValueCoder(BigEndianLongCoder.of()).withMaxNumRecords(numElements);  if (timestampFn != null) {    return reader.withTimestampFn(timestampFn);  } else {    return reader;  }}  }
class C{  public void compile(String[] files) throws CompilationFailedException {  CompilationUnit unit=new CompilationUnit(configuration);  unit.addSources(files);  unit.compile();}  }
class C{  private static int hash(int h){  return ((h * 2777) >> 9) & (HASH_SIZE - 1);}  }
class C{  @Override protected void linearScanBatchKNN(List<O> objs,List<KNNHeap> heaps){  final int size=objs.size();  for (DBIDIter iter=relation.getDBIDs().iter(); iter.valid(); iter.advance()) {    O candidate=relation.get(iter);    for (int index=0; index < size; index++) {      final KNNHeap heap=heaps.get(index);      final double dist=SQUARED.distance(objs.get(index),candidate);      if (dist <= heap.getKNNDistance()) {        heap.insert(dist,iter);      }    }  }}  }
class C{  public CCombinedRightPanel(final JFrame parent,final CGraphModel model,final CPerspectiveModel perspectiveModel){  super(new BorderLayout());  this.model=model;  this.perspectiveModel=perspectiveModel;  final TypeManager typeManager=model.getViewContainer().getModules().get(0).getTypeManager();  taggingPanel=new CTaggingPanel(parent,model.getGraph(),model.getDatabase().getContent().getNodeTagManager());  final JSplitPane taggingSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,taggingPanel,createTypePanels(parent,model,typeManager));  taggingSplitPane.setOneTouchExpandable(true);  add(taggingSplitPane);  debugPerspectivePanel=new JPanel(new BorderLayout());  add(debugPerspectivePanel,BorderLayout.SOUTH);  perspectiveModel.addListener(m_listener);  debugPerspectivePanel.setVisible(false);}  }
class C{  protected JavaFieldConverter(final SingleValueConverter javaClassConverter,final Mapper mapper){  if (!javaClassConverter.canConvert(Class.class)) {    throw new InitializationException("Java Class Converter cannot handle Class types");  }  this.javaClassConverter=javaClassConverter;  this.mapper=mapper;}  }
class C{  public static String formatStatus(TungstenProperties dsProps,TungstenProperties replProps,TungstenProperties dbProps,TungstenProperties routerUsage,boolean managerIsOnline,String header,boolean wasModified,boolean printDetails,boolean includeStatistics,boolean isRawFormat,boolean useRelativeLatency){  return formatStatus(dsProps,replProps,dbProps,routerUsage,managerIsOnline,header,wasModified,printDetails,includeStatistics,true,isRawFormat,useRelativeLatency);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:35.077 -0500",hash_original_method="3AF156F2799514C47B044D45A77C4F43",hash_generated_method="87FA002C4A38DB8B9913B90D43B60586") @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  ensureList();}  }
class C{  public APIException(String message){  super(message);}  }
class C{  @Override public boolean onMenuItemClick(MenuItem item){  int id=item.getItemId();switch (id) {case R.id.publish:    publish();  break;case R.id.subscribe:subscribe();break;case R.id.newConnection:createAndConnect();break;case R.id.disconnect:disconnect();break;case R.id.connectMenuOption:reconnect();break;case R.id.startLogging:enablePahoLogging();break;case R.id.endLogging:disablePahoLogging();break;}return false;}  }
class C{  public CertificatePolicyMap(CertificatePolicyId issuer,CertificatePolicyId subject){  this.issuerDomain=issuer;  this.subjectDomain=subject;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.554 -0400",hash_original_method="8C639B0FD4B4B22285D25F015AD7A331",hash_generated_method="7452890A2D5BA54E5A4E4D80E80A4173") static private int findEndExtendedName(String input,int index){  for (int i=index; i < input.length(); i++) {    char c=input.charAt(i);    if (isAtoZ(c))     continue;    if (c >= '0' && c <= '9')     continue;switch (c) {case '!':case '%':case '-':case '.':case '/':case ':':case '_':      continue;default :    return i;}}return input.length();}  }
class C{  private boolean generateDefaults(){  return this.generateDefaults;}  }
class C{  public MyDateAxis(String label){  super(label);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.756 -0500",hash_original_method="5F136D339506768265D1EADC5C1F6BBD",hash_generated_method="A22A62F74CBC653ED8E2E0F0C2E714A5") @DSComment("Constructor") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public RelayPath(String emailAddress){  _path=new Vector();  _emailAddress=emailAddress;}  }
class C{  public static void add(String prefix,String namespace){  if (!map.containsKey(prefix)) {    map.put(prefix,namespace);  }}  }
class C{  protected void generateCloneMethod(SourcePrinter s){  s.println("public interface DtoCopier extends " + BeanCopier.class.getCanonicalName() + "<"+ dtoType.getParameterizedQualifiedSourceName()+ ","+ dtoType.getParameterizedQualifiedSourceName()+ ">{}");  s.println("public " + dtoType.getParameterizedQualifiedSourceName() + " cloneDTO("+ DataSourceRecord.class.getCanonicalName()+ "<?> dsr){");  s.println("DtoCopier copier = GWT.create(DtoCopier.class);");  s.println(dtoType.getParameterizedQualifiedSourceName() + " newDto = new " + dtoType.getParameterizedQualifiedSourceName()+ "();");  s.println("copier.copyFrom((" + dtoType.getParameterizedQualifiedSourceName() + ")dsr.getRecordObject(),newDto);");  s.println("return newDto;}");}  }
class C{  public BannerMetaBuilder start(){  return new BannerMetaBuilder();}  }
class C{  protected void applyPatch(State current,State patch){  current.triggersSuccess=updateLongWithMax(current.triggersSuccess,patch.triggersSuccess);  current.triggersError=updateLongWithMax(current.triggersError,patch.triggersError);}  }
class C{  public void dispose(){  lock.lock();  try {    close();    clientPrivateKey=null;    clientCertificate=null;    serverCertificate=null;    endpointConfiguration=null;    endpointDescription=null;    serializer=null;    certificateValidator=null;    setSocket(null);    ctx=null;    out=null;    quotas=null;    limits=null;  }  finally {    lock.unlock();  }}  }
class C{  public boolean isWithArgs(){  return withArgs;}  }
class C{  public VBRConnection(DTNHost fromNode,NetworkInterface fromInterface,DTNHost toNode,NetworkInterface toInterface){  super(fromNode,fromInterface,toNode,toInterface);  this.msgsent=0;}  }
class C{  public CBreakpointToolbar(final JFrame parent,final BackEndDebuggerProvider debuggerProvider,final INaviView view){  Preconditions.checkNotNull(parent,"IE01341: Parent argument can not be null");  Preconditions.checkNotNull(debuggerProvider,"IE01342: Debugger provider argument can not be null");  Preconditions.checkNotNull(view,"IE01343: View argument can not be null");  setFloatable(false);  createAndAddButtonToToolbar(new CRemoveAllAction(parent,debuggerProvider),"data/deleteallbreakpoints_up.png","data/deleteallbreakpoints_hover.png","data/deleteallbreakpoints_down.png");  createAndAddButtonToToolbar(new CDisableAllAction(debuggerProvider),"data/disableallbreakpoints_up.png","data/disableallbreakpoints_hover.png","data/disableallbreakpoints_down.png");  createAndAddButtonToToolbar(new CEnableAllAction(debuggerProvider),"data/enableallbreakpoints_up.png","data/enableallbreakpoints_hover.png","data/enableallbreakpoints_down.png");  addSeparator();  createAndAddButtonToToolbar(new CRemoveAllViewAction(parent,debuggerProvider,view),"data/deleteviewbreakpoints_up.png","data/deleteviewbreakpoints_hover.png","data/deleteviewbreakpoints_up.png");  createAndAddButtonToToolbar(new CDisableAllViewAction(debuggerProvider,view),"data/disableviewbreakpoints_up.png","data/disableviewbreakpoints_hover.png","data/disableviewbreakpoints_down.png");  createAndAddButtonToToolbar(new CEnableAllViewAction(debuggerProvider,view),"data/enableviewbreakpoints_up.png","data/enableviewbreakpoints_hover.png","data/enableviewbreakpoints_down.png");}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public static String addColor(String value,String color){  return String.format(COLOR_STR_FORMAT,color,value);}  }
class C{  public static WebSiteProperties from(HttpServletRequest request) throws GenericEntityException {  Assert.notNull("request",request);  WebSiteProperties webSiteProps=(WebSiteProperties)request.getAttribute("_WEBSITE_PROPS_");  if (webSiteProps == null) {    WebSiteProperties defaults=new WebSiteProperties();    String httpPort=defaults.getHttpPort();    String httpHost=defaults.getHttpHost();    String httpsPort=defaults.getHttpsPort();    String httpsHost=defaults.getHttpsHost();    boolean enableHttps=defaults.getEnableHttps();    Delegator delegator=(Delegator)request.getAttribute("delegator");    if (delegator != null) {      String webSiteId=WebSiteWorker.getWebSiteId(request);      if (webSiteId != null) {        GenericValue webSiteValue=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache().queryOne();        if (webSiteValue != null) {          if (webSiteValue.get("httpPort") != null) {            httpPort=webSiteValue.getString("httpPort");          }          if (webSiteValue.get("httpHost") != null) {            httpHost=webSiteValue.getString("httpHost");          }          if (webSiteValue.get("httpsPort") != null) {            httpsPort=webSiteValue.getString("httpsPort");          }          if (webSiteValue.get("httpsHost") != null) {            httpsHost=webSiteValue.getString("httpsHost");          }          if (webSiteValue.get("enableHttps") != null) {            enableHttps=webSiteValue.getBoolean("enableHttps");          }        }      }    }    if (httpPort.isEmpty() && !request.isSecure()) {      httpPort=String.valueOf(request.getServerPort());    }    if (httpHost.isEmpty()) {      httpHost=request.getServerName();    }    if (httpsPort.isEmpty() && request.isSecure()) {      httpsPort=String.valueOf(request.getServerPort());    }    if (httpsHost.isEmpty()) {      httpsHost=request.getServerName();    }    if (Start.getInstance().getConfig().portOffset != 0) {      Integer httpPortValue=Integer.valueOf(httpPort);      httpPortValue+=Start.getInstance().getConfig().portOffset;      httpPort=httpPortValue.toString();      Integer httpsPortValue=Integer.valueOf(httpsPort);      httpsPortValue+=Start.getInstance().getConfig().portOffset;      httpsPort=httpsPortValue.toString();    }    webSiteProps=new WebSiteProperties(httpPort,httpHost,httpsPort,httpsHost,enableHttps);    request.setAttribute("_WEBSITE_PROPS_",webSiteProps);  }  return webSiteProps;}  }
class C{  public static void write(int x1,int y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_XY);  dos.writeByte(COLORMODEL_INDEXED);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  dos.writeInt(colorTable.length);  int i;  for (i=0; i < colorTable.length; i++) {    dos.writeInt(colorTable[i].getRGB());  }  dos.writeInt(trans);  properties.write(dos);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static boolean isStruct(FTypeRef typeRef){  return isUserDefinedType(typeRef,FStructType.class);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  private boolean saveClick(HttpServletRequest request,String url){  Properties ctx=JSPEnv.getCtx(request);  MClick mc=new MClick(ctx,url,null);  mc.setRemote_Addr(request.getRemoteAddr());  mc.setRemote_Host(request.getRemoteHost());  String ref=request.getHeader("referer");  if (ref == null || ref.length() == 0)   ref=request.getRequestURL().toString();  mc.setReferrer(ref);  mc.setAcceptLanguage(request.getHeader("accept-language"));  mc.setUserAgent(request.getHeader("user-agent"));  HttpSession session=request.getSession(false);  if (session != null) {    WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);    if (wu != null) {      mc.setEMail(wu.getEmail());      mc.setAD_User_ID(wu.getAD_User_ID());    }  }  return mc.save();}  }
class C{  public synchronized void verify(PublicKey key,Provider sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {  if (signedCRL == null) {    throw new CRLException("Uninitialized CRL");  }  Signature sigVerf=null;  if (sigProvider == null) {    sigVerf=Signature.getInstance(sigAlgId.getName());  } else {    sigVerf=Signature.getInstance(sigAlgId.getName(),sigProvider);  }  sigVerf.initVerify(key);  if (tbsCertList == null) {    throw new CRLException("Uninitialized CRL");  }  sigVerf.update(tbsCertList,0,tbsCertList.length);  if (!sigVerf.verify(signature)) {    throw new SignatureException("Signature does not match.");  }  verifiedPublicKey=key;}  }
class C{  public void disconnect(){  if (reader != null) {    reader.shutdown();  }  reader=null;  if (serverPanel != null) {    serverAddrField.setEnabled(true);    serverPortField.setEnabled(true);    viewChoice.setEnabled(false);    controlButton.setText(GetViewsCmd);    controlButton.setActionCommand(GetViewsCmd);    connectedStatus.setText(STATUS_IDLE);  }}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int end=m_length + m_start;  char[] buf=new char[m_length];  FastStringBuffer fsb=fsb();  boolean edit=false;  int d=0;  boolean pres=false;  for (int s=m_start; s < end; s++) {    char c=fsb.charAt(s);    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (d != 0)) {          char prevChar=buf[d - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(buf,start,d - start) : this;}  }
class C{  public SnapshotException(Throwable cause){  super(cause);}  }
class C{  private static String sanitizeString(String str){  if (!str.startsWith("http") && str.length() > MAX_STRING_LEN) {    str=str.substring(0,MAX_STRING_LEN) + "[...]";  }  return escapeString(str);}  }
class C{  public void removeServiceByName(String serviceName){  removeService(getServiceByName(serviceName));}  }
class C{  public PoolParams(int maxSizeSoftCap,int maxSizeHardCap,@Nullable SparseIntArray bucketSizes){  this(maxSizeSoftCap,maxSizeHardCap,bucketSizes,0,Integer.MAX_VALUE,IGNORE_THREADS);}  }
class C{  private EntityRelation[] makeRelationsUnique(){  EntityRelation[] r=getRelations();  List relationNames=new ArrayList(r.length);  for (  EntityRelation r1 : r) {    r1.makeRoleNamesUnique();    String baseName=r1.getRelationName();    r1.setRelationName(uniqueAlgorithm(relationNames,baseName,"-"));  }  return r;}  }
class C{  private static String loadContents(Object fileData) throws IOException {  String path=CWLFileValueHelper.getPath(fileData);  InputStream is=null;  try {    File file=new File(path);    is=new FileInputStream(file);    byte[] buffer=new byte[Math.min(CONTENTS_NUMBER_OF_BYTES,(int)file.length())];    is.read(buffer);    return new String(buffer,"UTF-8");  }  finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private boolean containsAllowedPrefix(String tpl){  if (whitePrefixList.isEmpty())   return true;  for (  String i : whitePrefixList) {    if (tpl.startsWith(i))     return true;  }  return false;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public int size(){  return map.size();}  }
class C{  boolean canReplace(ReplaceHolder rh){  if (!getAllowsInvalid()) {    StringBuilder replace=null;    String text=rh.text;    int tl=(text != null) ? text.length() : 0;    if (tl == 0 && rh.length == 1 && getFormattedTextField().getSelectionStart() != rh.offset) {      while (rh.offset > 0 && isLiteral(rh.offset)) {        rh.offset--;      }    }    int max=Math.min(getMaxLength() - rh.offset,Math.max(tl,rh.length));    for (int counter=0, textIndex=0; counter < max; counter++) {      if (textIndex < tl && isValidCharacter(rh.offset + counter,text.charAt(textIndex))) {        char aChar=text.charAt(textIndex);        if (aChar != getCharacter(rh.offset + counter,aChar)) {          if (replace == null) {            replace=new StringBuilder();            if (textIndex > 0) {              replace.append(text.substring(0,textIndex));            }          }        }        if (replace != null) {          replace.append(getCharacter(rh.offset + counter,aChar));        }        textIndex++;      } else       if (isLiteral(rh.offset + counter)) {        if (replace != null) {          replace.append(getLiteral(rh.offset + counter));          if (textIndex < tl) {            max=Math.min(max + 1,getMaxLength() - rh.offset);          }        } else         if (textIndex > 0) {          replace=new StringBuilder(max);          replace.append(text.substring(0,textIndex));          replace.append(getLiteral(rh.offset + counter));          if (textIndex < tl) {            max=Math.min(max + 1,getMaxLength() - rh.offset);          } else           if (rh.cursorPosition == -1) {            rh.cursorPosition=rh.offset + counter;          }        } else {          rh.offset++;          rh.length--;          counter--;          max--;        }      } else       if (textIndex >= tl) {        if (replace == null) {          replace=new StringBuilder();          if (text != null) {            replace.append(text);          }        }        replace.append(getPlaceholderCharacter());        if (tl > 0 && rh.cursorPosition == -1) {          rh.cursorPosition=rh.offset + counter;        }      } else {        return false;      }    }    if (replace != null) {      rh.text=replace.toString();    } else     if (text != null && rh.offset + tl > getMaxLength()) {      rh.text=text.substring(0,getMaxLength() - rh.offset);    }    if (getOverwriteMode() && rh.text != null) {      rh.length=rh.text.length();    }  }  return super.canReplace(rh);}  }
class C{  public MultDatasourceTransactionInterceptor(PlatformTransactionManager ptm,TransactionAttributeSource tas){  setTransactionManager(ptm);  setTransactionAttributeSource(tas);}  }
class C{  public void incReceivedMessages(long messages){  this.stats.incLong(receivedMessagesId,messages);}  }
class C{  @RequestMapping(value="/users/{login:[_'.@a-z0-9-]+}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){}  }
class C{  public JarException(){}  }
class C{  public TIntObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  protected void normalizeScores(){  double hub_ssum=0;  double auth_ssum=0;  for (  V v : graph.getVertices()) {    double hub_val=getOutputValue(v).hub;    double auth_val=getOutputValue(v).authority;    hub_ssum+=(hub_val * hub_val);    auth_ssum+=(auth_val * auth_val);  }  hub_ssum=Math.sqrt(hub_ssum);  auth_ssum=Math.sqrt(auth_ssum);  for (  V v : graph.getVertices()) {    HITS.Scores values=getOutputValue(v);    setOutputValue(v,new HITS.Scores(values.hub / hub_ssum,values.authority / auth_ssum));  }}  }
class C{  public SkinComboPopup(JComboBox<Object> combo){  super(combo);  this.setOpaque(true);  this.list.setBackground(combo.getBackground());}  }
class C{  public void saveMesh(TriangleMesh mesh,String path){  try {    saveMesh(mesh,FileUtils.createOutputStream(new File(path)));  } catch (  IOException e) {    logger.log(Level.SEVERE,"error exporting mesh",e);  }}  }
class C{  public boolean isTest(){  return this.test;}  }
class C{  private void buildAuthenticationHeader(HttpGet httpGet){  if (this.tokenProvider != null) {    Log.d(TAG,"using token based authentication");    httpGet.setHeader("X-Watson-Authorization-Token",this.tokenProvider.getToken());  } else {    Log.d(TAG,"using basic authentication");    httpGet.setHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(this.username,this.password),"UTF-8",false));  }}  }
class C{  private int[] generateBlindingCoeffs(IndexGenerator ig,int dr){  int N=params.N;  int[] r=new int[N];  for (int coeff=-1; coeff <= 1; coeff+=2) {    int t=0;    while (t < dr) {      int i=ig.nextIndex();      if (r[i] == 0) {        r[i]=coeff;        t++;      }    }  }  return r;}  }
class C{  public ClockPane(){  setCurrentTime();}  }
class C{  public final AC size(String size,int... indexes){  BoundSize bs=ConstraintParser.parseBoundSize(size,false,true);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSize(bs);  }  return this;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  final void tryTerminate2(){  for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs < SHUTDOWN || rs == TERMINATED || (rs == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    if (ctl.compareAndSet(c,ctlOf(TERMINATED,0))) {      mainLock.lock();      try {        termination.signalAll();      }  finally {        mainLock.unlock();      }      terminated();      return;    }  }}  }
class C{  public void test_getBitsFromByteArray_04(){  final byte[] b=new byte[4];  BytesUtil.setBit(b,0,true);  assertEquals(0x00000000,getBits(b,0,0));  assertEquals(0x00000001,getBits(b,0,1));  assertEquals(0x00000002,getBits(b,0,2));  assertEquals(0x00000004,getBits(b,0,3));  assertEquals(0x00000008,getBits(b,0,4));  assertEquals(0x00000000,getBits(b,1,0));  assertEquals(0x00000000,getBits(b,1,1));  assertEquals(0x00000000,getBits(b,1,2));  assertEquals(0x00000000,getBits(b,1,3));}  }
class C{  public void testGetTablesUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    createTable("`t1-1`","(c1 char(1))");    createTable("`t1-2`","(c1 char(1))");    createTable("`t2`","(c1 char(1))");    Set<String> tableNames=new HashSet<String>();    tableNames.add("t1-1");    tableNames.add("t1-2");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getTables(null,null,"t1-_",null);      while (this.rs.next()) {        assertTrue(tableNames.remove(this.rs.getString("TABLE_NAME")));      }      assertTrue(tableNames.isEmpty());    }  finally {      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public OptionSet removeBlock1(){  this.block1=null;  return this;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WStart.init");}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  checkClosed();  return iface.isInstance(this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isLoadingOrLoadedFile() && !stack.getUIMgrSafe().getVideoFrame().isMediaPlayerLoaded());}  }
class C{  private void doDdpOrientation(Graph graph,Node l,Node a,Node b,Node c){  changeFlag=true;  for (  IonIndependenceFacts iif : separations) {    if ((iif.getX().equals(l) && iif.getY().equals(c)) || iif.getY().equals(l) && iif.getX().equals(c)) {      for (      List<Node> condSet : iif.getZ()) {        if (condSet.contains(b)) {          graph.setEndpoint(c,b,Endpoint.TAIL);          discrimGraphs.add(graph);          return;        }      }      break;    }  }  Graph newGraph1=new EdgeListGraph(graph);  newGraph1.setEndpoint(a,b,Endpoint.ARROW);  newGraph1.setEndpoint(c,b,Endpoint.ARROW);  discrimGraphs.add(newGraph1);  Graph newGraph2=new EdgeListGraph(graph);  newGraph2.setEndpoint(c,b,Endpoint.TAIL);  discrimGraphs.add(newGraph2);}  }
class C{  public NewPieChartAction(final Workspace workspace){  super("Pie Chart",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("PieChart.png"));  putValue(SHORT_DESCRIPTION,"New Pie Chart");}  }
class C{  public void minFeatureCount(int minFeatureCount){  this.minFeatureCount=minFeatureCount;}  }
class C{  private static void processRecords(KafkaConsumer<String,String> consumer) throws IOException {  while (true) {    ConsumerRecords<String,String> records=consumer.poll(100);    for (    ConsumerRecord<String,String> record : records) {      System.out.printf("offset = %d, key = %s, value = %s\n",record.offset(),record.key(),record.value());      offsetManager.saveOffsetInExternalStore(record.topic(),record.partition(),record.offset());    }  }}  }
class C{  private boolean allocateNewSymbolicToPhysical(Register symb,Register p){  GenericRegisterRestrictions restrict=ir.stackManager.getRestrictions();  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  if (p != null && !phys.isAllocatable(p))   return false;  if (LinearScan.VERBOSE_DEBUG && p != null) {    if (!p.isAvailable())     System.out.println("unavailable " + symb + p);    if (restrict.isForbidden(symb,p))     System.out.println("forbidden" + symb + p);  }  return (p != null) && p.isAvailable() && !restrict.isForbidden(symb,p);}  }
class C{  public TextEditor outdent(int spaces){  return deleteAll("^(\\t|[ ]{1," + spaces + "})");}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if (select) {      target.moveCaretPosition(0);    } else {      target.setCaretPosition(0);    }  }}  }
class C{  private void ageDeliveryPreds(){  double timeDiff=(SimClock.getTime() - this.lastAgeUpdate) / secondsInTimeUnit;  if (timeDiff == 0) {    return;  }  double mult=Math.pow(GAMMA,timeDiff);  for (  Map.Entry<DTNHost,Double> e : preds.entrySet()) {    e.setValue(e.getValue() * mult);  }  this.lastAgeUpdate=SimClock.getTime();}  }
class C{  protected static String readFromFile(final File file) throws IOException {  final LineNumberReader r=new LineNumberReader(new FileReader(file));  try {    final StringBuilder sb=new StringBuilder();    String s;    while ((s=r.readLine()) != null) {      if (r.getLineNumber() > 1)       sb.append("\n");      sb.append(s);    }    return sb.toString();  }  finally {    r.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.455 -0400",hash_original_method="0AB65C0A8309BECF9DF803F58DFF3ADB",hash_generated_method="22BF10F26F4E86778B4A86578FC6C782") private int handleGH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && !isVowel(charAt(value,index - 1))) {    result.append('K');    index+=2;  } else   if (index == 0) {    if (charAt(value,index + 2) == 'I') {      result.append('J');    } else {      result.append('K');    }    index+=2;  } else   if ((index > 1 && contains(value,index - 2,1,"B","H","D")) || (index > 2 && contains(value,index - 3,1,"B","H","D")) || (index > 3 && contains(value,index - 4,1,"B","H"))) {    index+=2;  } else {    if (index > 2 && charAt(value,index - 1) == 'U' && contains(value,index - 3,1,"C","G","L","R","T")) {      result.append('F');    } else     if (index > 0 && charAt(value,index - 1) != 'I') {      result.append('K');    }    index+=2;  }  return index;}  }
class C{  @Override public void onGalleryImageClick(long imageId,Uri imageUri,int position){  Global.debugMemory(mDebugPrefix,"onGalleryImageClick");  QueryParameter imageDetailQuery=this.mGalleryQueryParameter.calculateEffectiveGalleryContentQuery();  ImageDetailActivityViewPager.showActivity(this,imageUri,position,imageDetailQuery);}  }
class C{  public static boolean isConfiguredWith(final IResource resource,final String providerId){  if (resource.isLinked(IResource.CHECK_ANCESTORS)) {    return false;  }  return getRepositoryProvider(resource,providerId,false) != null;}  }
class C{  private boolean isOpen(){  return buf != null;}  }
class C{  public CActionClose(final CGraphPanel graphPanel){  super("Close View");  m_graphPanel=Preconditions.checkNotNull(graphPanel,"IE02814: graph panel argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_CLOSE_HK.getKeyStroke());}  }
class C{  protected void updateElevation(@NonNull RecyclerView recyclerView,@NonNull RecyclerView.ViewHolder holder,boolean elevate){  if (elevate) {    originalElevation=ViewCompat.getElevation(holder.itemView);    float newElevation=activeElevationChange + findMaxElevation(recyclerView);    ViewCompat.setElevation(holder.itemView,newElevation);    isElevated=true;  } else {    ViewCompat.setElevation(holder.itemView,originalElevation);    originalElevation=0;    isElevated=false;  }}  }
class C{  public MedianProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case (IMAGE_ACTIVITY_REQUEST_CODE):    if ((recyclerView != null) && (recyclerView.getAdapter() != null) && (data != null)&& (data.hasExtra(EXTRAS_IMAGE_THUMB))) {      ((ImageListAdapter)recyclerView.getAdapter()).replaceItem((DerpibooruImageThumb)data.getParcelableExtra(EXTRAS_IMAGE_THUMB));    }  break;}}  }
class C{  public void testLongStdoutAndStderr() throws Exception {  int bytesOutput=1000000;  String perlScript="print STDOUT ('*' x %1$d); print STDERR ('*' x %1$d); exit %2$d";  String stdout=c.runCommand("perl",ImmutableList.of("-e",String.format(perlScript,bytesOutput,0)),"");  assertEquals(bytesOutput,stdout.length());  try {    c.runCommand("perl",ImmutableList.of("-e",String.format(perlScript,bytesOutput,1)),"");    fail("Non-zero return code didn't raise CommandException.");  } catch (  CommandException expected) {    assertEquals("returnStatus",1,expected.returnStatus);    assertEquals("stdout length",bytesOutput,expected.stdout.length());    assertEquals("stderr length",bytesOutput,expected.stderr.length());  }}  }
class C{  public List<String> indices(){  return indices;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void stop(){  timeMonIndex=0;  setException();  Iterator iter=iter();  while (iter.hasNext()) {    HttpMonItem monItem=(HttpMonItem)iter.next();    monItem.stop(this);  }  if (stackTrace != null)   changeDetails();}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.dateTime().print(this);}  }
class C{  public final boolean isRemovable(){  return mRemovable;}  }
class C{  protected void NumberExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_NUMBER);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  @Override public void flush(){}  }
class C{  public void close() throws IOException {  if (mAcceptSocket != null) {    mAcceptSocket.close();    mAcceptSocket=null;  }}  }
class C{  public Composer toY(long animDuration,float y,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(beforeParam.x,y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,animDuration,ease));  return this;}  }
class C{  protected Set<Integer> __getPages() throws WikiPageNotFoundException {  Session session=this.wiki.__getHibernateSession();  session.beginTransaction();  session.lock(hibernateCategory,LockMode.NONE);  Set<Integer> tmpSet=new HashSet<Integer>(hibernateCategory.getPages());  session.getTransaction().commit();  return tmpSet;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT:    return versionConstraint != null;case N4mfPackage.TESTED_PROJECT__DECLARED_SCOPE:  return declaredScope != DECLARED_SCOPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void paintComponent(Graphics gx){  super.paintComponent(gx);  int xp, yp, h;  h=this.getWidth();  if (m_plotInstances != null && m_plotInstances.numAttributes() > 0 && m_plotInstances.numInstances() > 0) {    if (m_oldWidth != h) {      m_pointDrawn=new boolean[h][20];      for (int noa=0; noa < m_plotInstances.numInstances(); noa++) {        if (!m_plotInstances.instance(noa).isMissing(m_attribIndex) && !m_plotInstances.instance(noa).isMissing(m_cIndex)) {          m_cached[noa]=(int)convertToPanel(m_plotInstances.instance(noa).value(m_attribIndex));          if (m_pointDrawn[m_cached[noa] % h][m_heights[noa]]) {            m_cached[noa]=-9000;          } else {            m_pointDrawn[m_cached[noa] % h][m_heights[noa]]=true;          }        } else {          m_cached[noa]=-9000;        }      }      m_oldWidth=h;    }    if (m_plotInstances.attribute(m_cIndex).isNominal()) {      for (int noa=0; noa < m_plotInstances.numInstances(); noa++) {        if (m_cached[noa] != -9000) {          xp=m_cached[noa];          yp=m_heights[noa];          if (m_plotInstances.attribute(m_attribIndex).isNominal()) {            xp+=(int)(Math.random() * 5) - 2;          }          int ci=(int)m_plotInstances.instance(noa).value(m_cIndex);          gx.setColor(m_colorList.get(ci % m_colorList.size()));          gx.drawRect(xp,yp,1,1);        }      }    } else {      double r;      for (int noa=0; noa < m_plotInstances.numInstances(); noa++) {        if (m_cached[noa] != -9000) {          r=(m_plotInstances.instance(noa).value(m_cIndex) - m_minC) / (m_maxC - m_minC);          r=(r * 240) + 15;          gx.setColor(new Color((int)r,150,(int)(255 - r)));          xp=m_cached[noa];          yp=m_heights[noa];          if (m_plotInstances.attribute(m_attribIndex).isNominal()) {            xp+=(int)(Math.random() * 5) - 2;          }          gx.drawRect(xp,yp,1,1);        }      }    }  }}  }
class C{  public DTMException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.getMessage() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public static ValueRange of(long min,long max){  if (min > max) {    throw new IllegalArgumentException("Minimum value must be less than maximum value");  }  return new ValueRange(min,min,max,max);}  }
class C{  public RulesAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  public ClearableStringBuilder append(CharSequence string){  sb.append(string);  return this;}  }
class C{  public static MetricsRegistry defaultRegistry(){  return DEFAULT_REGISTRY;}  }
class C{  public CimSubscriptionManager(CimConnection connection,String subscriptionsIdentifier){  _connection=connection;  _subscriptionsIdentifier=subscriptionsIdentifier;}  }
class C{  public void close() throws IOException {  in.close();  out.close();  err.close();}  }
class C{  @Override public boolean equals(Object o){  if (o == null || o.getClass() != getClass())   return false;  GetHeadersMessage other=(GetHeadersMessage)o;  return (other.version == version && locator.size() == other.locator.size() && locator.containsAll(other.locator) && stopHash.equals(other.stopHash));}  }
class C{  protected ScrollFrame createFrame(){  return new ScrollFrame();}  }
class C{  public boolean isUseOutOfBagError(){  return useOutOfBagError;}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEnum_();}  }
class C{  private int guessTransactionsLength(){  if (transactionBytesValid)   return bytes.length - HEADER_SIZE;  if (transactions == null)   return 0;  int len=VarInt.sizeOf(transactions.size());  for (  Transaction tx : transactions) {    len+=tx.length == UNKNOWN_LENGTH ? 255 : tx.length;  }  return len;}  }
class C{  public Vector2i add(int x,int y,Vector2i dest){  dest.x=this.x + x;  dest.y=this.y + y;  return dest;}  }
class C{  private void checkCallAuthorization(ContainerRequest request) throws ExternalException {  if (this.policyProvider.isOpenAccessRoute(request)) {    return;  }  String jwtAccessToken=extractJwtAccessToken(request);  if (jwtAccessToken.equals(this.sharedSecret)) {    return;  }  ResourceServerAccessToken token=parseAccessToken(jwtAccessToken);  this.policyProvider.checkAccessPermissions(request,token);}  }
class C{  static void unregisterMBean(ObjectName objectName){  try {    if (mbeanServer != null && mbeanServer.isRegistered(objectName)) {      mbeanServer.unregisterMBean(objectName);    }  } catch (  MBeanRegistrationException e) {    logStackTrace(Level.WARN,null,LocalizedStrings.MBeanUtil_FAILED_WHILE_UNREGISTERING_MBEAN_WITH_OBJECTNAME_0.toLocalizedString(new Object[]{objectName}));  }catch (  InstanceNotFoundException e) {    logStackTrace(Level.WARN,null,LocalizedStrings.MBeanUtil_WHILE_UNREGISTERING_COULDNT_FIND_MBEAN_WITH_OBJECTNAME_0.toLocalizedString(new Object[]{objectName}));  }catch (  JMRuntimeException e) {    logStackTrace(Level.WARN,null,LocalizedStrings.MBeanUtil_COULD_NOT_UNREGISTER_MBEAN_WITH_OBJECTNAME_0.toLocalizedString(new Object[]{objectName}));  }}  }
class C{  public double payoff(CC h,Instances D) throws Exception {  Result r=Evaluation.testClassifier(h,D);  r.setInfo("Type","ML");  r.setInfo("Threshold","0.5");  r.setInfo("Verbosity","7");  r.output=Result.getStats(r,"7");  return (Double)r.getMeasurement(m_Payoff);}  }
class C{  public void displayDistrib(String queryVar){  if (!shownDistribs.containsKey(queryVar)) {    IndependentDistribution distrib=currentState.queryProb(queryVar);    DistributionViewer viewer=new DistributionViewer(currentState,queryVar,this);    shownDistribs.put(distrib.getVariable(),viewer);  }}  }
class C{  public synchronized String parentValue(){  if (m_Current.parent != null) {    return m_Current.parent.value;  } else {    return null;  }}  }
class C{  public ElementType peek(){  return isEmpty() ? null : stack.get(stack.size() - 1);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String order(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Order_ID=(Integer)value;  if (C_Order_ID == null || C_Order_ID.intValue() == 0)   return "";  if (isCalloutActive())   return "";  MOrder order=new MOrder(ctx,C_Order_ID.intValue(),null);  if (order.get_ID() != 0) {    mTab.setValue("DateOrdered",order.getDateOrdered());    mTab.setValue("POReference",order.getPOReference());    mTab.setValue("AD_Org_ID",new Integer(order.getAD_Org_ID()));    mTab.setValue("AD_OrgTrx_ID",new Integer(order.getAD_OrgTrx_ID()));    mTab.setValue("C_Activity_ID",new Integer(order.getC_Activity_ID()));    mTab.setValue("C_Campaign_ID",new Integer(order.getC_Campaign_ID()));    mTab.setValue("C_Project_ID",new Integer(order.getC_Project_ID()));    mTab.setValue("User1_ID",new Integer(order.getUser1_ID()));    mTab.setValue("User2_ID",new Integer(order.getUser2_ID()));    mTab.setValue("M_Warehouse_ID",new Integer(order.getM_Warehouse_ID()));    mTab.setValue("DeliveryRule",order.getDeliveryRule());    mTab.setValue("DeliveryViaRule",order.getDeliveryViaRule());    mTab.setValue("M_Shipper_ID",new Integer(order.getM_Shipper_ID()));    mTab.setValue("FreightCostRule",order.getFreightCostRule());    mTab.setValue("FreightAmt",order.getFreightAmt());    mTab.setValue("C_BPartner_ID",new Integer(order.getC_BPartner_ID()));    mTab.setValue("C_BPartner_Location_ID",new Integer(order.getC_BPartner_Location_ID()));    if (order.getAD_User_ID() > 0)     mTab.setValue("AD_User_ID",new Integer(order.getAD_User_ID())); else     mTab.setValue("AD_User_ID",null);  }  return "";}  }
class C{  public void testBinaryField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new BinaryDocValuesField("foo",new BytesRef("bar")));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getBinary(r,"foo"));  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  private int convertWorldYToScaledScreen(double y){  return (int)(convertWorldToPixelUnits(y - svy / (double)SIZE_UNIT_PIXELS) * scale) + svy;}  }
class C{  private Object updateInner(String uuid,SimpleObject simpleObject) throws ResponseException {  Order order=orderService.getOrderByUuid(uuid);  if (order == null || order.isVoided()) {    throw new ObjectNotFoundException();  }  order=getLatestVersion(order);  Order revisedOrder=reviseOrder(order,simpleObject);  if (revisedOrder == null) {    return orderToJson(order);  }  orderService.saveOrder(revisedOrder,null);  return orderToJson(revisedOrder);}  }
class C{  public RequestPrepareAnnounce(final Transaction transaction,final PrivateKey privateKey){  this.transaction=transaction;  this.privateKey=privateKey;}  }
class C{  public Builder subscript(){  this.subscript=true;  return this;}  }
class C{  protected PostTable(){  super(TrueTypeTable.POST_TABLE);  nameMap=new PostMap();}  }
class C{  public ToStringBuilder append(long value){  style.append(buffer,null,value);  return this;}  }
class C{  public void save(Writer out) throws IOException {  reset();  try {    if (doctype != null) {      out.write("<!DOCTYPE ");      out.write(doctype);      out.write(">\n");    }    Transformer t=TransformerFactory.newInstance().newTransformer();    t.transform(new DOMSource(document),new StreamResult(out));  } catch (  TransformerException e) {    IOException error=new IOException(e.getMessage());    error.initCause(e);    throw error;  }}  }
class C{  public FramePrinter(PrintStream stream){  this.stream=stream;}  }
class C{  private int endCheckBreak(){  Node n=((Jump)this).getJumpStatement();  n.putIntProp(CONTROL_BLOCK_PROP,END_DROPS_OFF);  return END_UNREACHED;}  }
class C{  public Element findMethod(String methodName,TypeMirror receiverType,TreePath path,java.util.List<TypeMirror> argumentTypes){  Log.DiagnosticHandler discardDiagnosticHandler=new Log.DiscardDiagnosticHandler(log);  try {    JavacScope scope=(JavacScope)trees.getScope(path);    Env<AttrContext> env=scope.getEnv();    Type site=(Type)receiverType;    Name name=names.fromString(methodName);    List<Type> argtypes=List.nil();    for (    TypeMirror a : argumentTypes) {      argtypes=argtypes.append((Type)a);    }    List<Type> typeargtypes=List.nil();    boolean allowBoxing=true;    boolean useVarargs=false;    boolean operator=true;    try {      Object methodContext=buildMethodContext();      Object oldContext=getField(resolve,"currentResolutionContext");      setField(resolve,"currentResolutionContext",methodContext);      Element result=wrapInvocationOnResolveInstance(FIND_METHOD,env,site,name,argtypes,typeargtypes,allowBoxing,useVarargs,operator);      setField(resolve,"currentResolutionContext",oldContext);      return result;    } catch (    Throwable t) {      Error err=new AssertionError("Unexpected Reflection error");      err.initCause(t);      throw err;    }  }  finally {    log.popDiagnosticHandler(discardDiagnosticHandler);  }}  }
class C{  protected int countAdjacentEdges(Vertex v){  int edgecount=0;  Set<Vertex> n1s=new HashSet<Vertex>(v.getNeighbours());  int n_Neighbours1=v.getNeighbours().size();  for (int i1=0; i1 < n_Neighbours1; i1++) {    Vertex n1=v.getNeighbours().get(i1);    int n_Neighbours2=n1.getNeighbours().size();    for (int i2=0; i2 < n_Neighbours2; i2++) {      Vertex n2=n1.getNeighbours().get(i2);      if (n2 != v) {        if (n1s.contains(n2))         edgecount++;      }    }    n1s.remove(n1);  }  return edgecount;}  }
class C{  public void showParamPanel(AbstractParamPanel panel,String name){  if (currentShownPanel == panel) {    return;  }  if (currentShownPanel != null) {    currentShownPanel.onHide();  }  nameLastSelectedPanel=name;  currentShownPanel=panel;  getPanelHeadline();  getTxtHeadline().setText(name);  getHelpButton().setVisible(panel.getHelpIndex() != null);  getShowHelpAction().setHelpIndex(panel.getHelpIndex());  CardLayout card=(CardLayout)getPanelParam().getLayout();  card.show(getPanelParam(),name);  panel.onShow();}  }
class C{  protected List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {  Map<BytesRef,Integer> classCounts=new HashMap<>();  Map<BytesRef,Double> classBoosts=new HashMap<>();  float maxScore=topDocs.getMaxScore();  for (  ScoreDoc scoreDoc : topDocs.scoreDocs) {    IndexableField storableField=indexSearcher.doc(scoreDoc.doc).getField(classFieldName);    if (storableField != null) {      BytesRef cl=new BytesRef(storableField.stringValue());      Integer count=classCounts.get(cl);      if (count != null) {        classCounts.put(cl,count + 1);      } else {        classCounts.put(cl,1);      }      Double totalBoost=classBoosts.get(cl);      double singleBoost=scoreDoc.score / maxScore;      if (totalBoost != null) {        classBoosts.put(cl,totalBoost + singleBoost);      } else {        classBoosts.put(cl,singleBoost);      }    }  }  List<ClassificationResult<BytesRef>> returnList=new ArrayList<>();  List<ClassificationResult<BytesRef>> temporaryList=new ArrayList<>();  int sumdoc=0;  for (  Map.Entry<BytesRef,Integer> entry : classCounts.entrySet()) {    Integer count=entry.getValue();    Double normBoost=classBoosts.get(entry.getKey()) / count;    temporaryList.add(new ClassificationResult<>(entry.getKey().clone(),(count * normBoost) / (double)k));    sumdoc+=count;  }  if (sumdoc < k) {    for (    ClassificationResult<BytesRef> cr : temporaryList) {      returnList.add(new ClassificationResult<>(cr.getAssignedClass(),cr.getScore() * k / (double)sumdoc));    }  } else {    returnList=temporaryList;  }  return returnList;}  }
class C{  public static String commas(final long n){  return String.format("%,d",n);}  }
class C{  public static float[] toFloatArray(byte[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  @Override public <S>StreamBuilderImpl<S,U> custom(FunctionSync<ResultStream<S>,ResultStream<T>> builder){  return new Chain<S,T,U>(this,builder);}  }
class C{  public void dumpBaseDebug(){  dumpVersion();  dumpSystemProperties();  dumpMemoryTrace();}  }
class C{  public Gobble(Reader reader){  this(null,null,reader);}  }
class C{  public static boolean hasHoneycombMR1(){  return Build.VERSION.SDK_INT >= 12;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private static void processTryCatchBlocks(MethodNode mth,BlockNode block){  CatchAttr commonCatchAttr=null;  for (  InsnNode insn : block.getInstructions()) {    CatchAttr catchAttr=insn.get(AType.CATCH_BLOCK);    if (catchAttr == null) {      continue;    }    if (commonCatchAttr == null) {      commonCatchAttr=catchAttr;    } else     if (commonCatchAttr != catchAttr) {      commonCatchAttr=null;      break;    }  }  if (commonCatchAttr != null) {    block.addAttr(commonCatchAttr);    for (    ExceptionHandler handler : commonCatchAttr.getTryBlock().getHandlers()) {      connectHandler(mth,handler);    }  }}  }
class C{  private void populateReceiptModelWithExistingReceiptInfo(final ReceiptHeader oldReceiptHeader){  totalAmountToBeCollected=BigDecimal.valueOf(0);  final ReceiptHeader receiptHeader=new ReceiptHeader(oldReceiptHeader.getReferencenumber(),oldReceiptHeader.getReferencedate(),oldReceiptHeader.getConsumerCode(),oldReceiptHeader.getReferenceDesc(),oldReceiptHeader.getTotalAmount(),oldReceiptHeader.getMinimumAmount(),oldReceiptHeader.getPartPaymentAllowed(),oldReceiptHeader.getOverrideAccountHeads(),oldReceiptHeader.getCallbackForApportioning(),oldReceiptHeader.getDisplayMsg(),oldReceiptHeader.getService(),oldReceiptHeader.getCollModesNotAllwd(),oldReceiptHeader.getPayeeName(),oldReceiptHeader.getPayeeAddress(),oldReceiptHeader.getPayeeEmail());  if (oldReceiptHeader.getCollModesNotAllwd() != null)   setCollectionModesNotAllowed(Arrays.asList(oldReceiptHeader.getCollModesNotAllwd().split(",")));  setOverrideAccountHeads(oldReceiptHeader.getOverrideAccountHeads());  setPartPaymentAllowed(oldReceiptHeader.getPartPaymentAllowed());  setServiceName(oldReceiptHeader.getService().getName());  final ReceiptMisc receiptMisc=new ReceiptMisc(oldReceiptHeader.getReceiptMisc().getBoundary(),oldReceiptHeader.getReceiptMisc().getFund(),oldReceiptHeader.getReceiptMisc().getIdFunctionary(),oldReceiptHeader.getReceiptMisc().getFundsource(),oldReceiptHeader.getReceiptMisc().getDepartment(),receiptHeader,oldReceiptHeader.getReceiptMisc().getScheme(),oldReceiptHeader.getReceiptMisc().getSubscheme(),null);  receiptHeader.setReceiptMisc(receiptMisc);  bankCOAList=chartOfAccountsDAO.getBankChartofAccountCodeList();  for (  final ReceiptDetail oldDetail : oldReceiptHeader.getReceiptDetails())   if (oldDetail.getOrdernumber() != null && !FinancialsUtil.isRevenueAccountHead(oldDetail.getAccounthead(),bankCOAList,persistenceService)) {    final ReceiptDetail receiptDetail=new ReceiptDetail(oldDetail.getAccounthead(),oldDetail.getFunction(),oldDetail.getCramount(),oldDetail.getDramount(),oldDetail.getCramount(),oldDetail.getOrdernumber(),oldDetail.getDescription(),oldDetail.getIsActualDemand(),receiptHeader,oldDetail.getPurpose());    receiptDetail.setCramountToBePaid(oldDetail.getCramountToBePaid());    receiptDetail.setCramount(oldDetail.getCramount());    if (oldDetail.getAccountPayeeDetails() != null)     for (    final AccountPayeeDetail oldAccountPayeeDetail : oldDetail.getAccountPayeeDetails()) {      final AccountPayeeDetail accountPayeeDetail=new AccountPayeeDetail(oldAccountPayeeDetail.getAccountDetailType(),oldAccountPayeeDetail.getAccountDetailKey(),oldAccountPayeeDetail.getAmount(),receiptDetail);      receiptDetail.addAccountPayeeDetail(accountPayeeDetail);    }    if (oldDetail.getIsActualDemand())     totalAmountToBeCollected=totalAmountToBeCollected.add(oldDetail.getCramountToBePaid()).subtract(oldDetail.getDramount()).setScale(CollectionConstants.AMOUNT_PRECISION_DEFAULT,BigDecimal.ROUND_UP);    receiptHeader.addReceiptDetail(receiptDetail);  }  if (oldReceiptHeader.getReceipttype() == CollectionConstants.RECEIPT_TYPE_ADHOC) {    loadReceiptDetails(receiptHeader);    createMisc();    if (oldReceiptHeader.getVoucherNum() != null)     setVoucherNum(voucherNum);  }  setReceiptDetailList(new ArrayList<ReceiptDetail>(receiptHeader.getReceiptDetails()));}  }
class C{  public boolean isPrimary(){  return isPrimary;}  }
class C{  public void sendSipCancel(SipDialogPath dialog) throws PayloadException, NetworkException {  mSipInterface.sendSipCancel(dialog);}  }
class C{  public void close(){  running=false;synchronized (histData) {    histData.notify();  }}  }
class C{  public boolean isConstant(){  return false;}  }
class C{  public static ANRequest.HeadRequestBuilder head(String url){  return new ANRequest.HeadRequestBuilder(url);}  }
class C{  public static MediaSizeName findMedia(float x,float y,int units){  MediaSize match=MediaSize.ISO.A4;  if (x <= 0.0f || y <= 0.0f || units < 1) {    throw new IllegalArgumentException("args must be +ve values");  }  double ls=x * x + y * y;  double tmp_ls;  float[] dim;  float diffx=x;  float diffy=y;  for (int i=0; i < sizeVector.size(); i++) {    MediaSize mediaSize=(MediaSize)sizeVector.elementAt(i);    dim=mediaSize.getSize(units);    if (x == dim[0] && y == dim[1]) {      match=mediaSize;      break;    } else {      diffx=x - dim[0];      diffy=y - dim[1];      tmp_ls=diffx * diffx + diffy * diffy;      if (tmp_ls < ls) {        ls=tmp_ls;        match=mediaSize;      }    }  }  return match.getMediaSizeName();}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  static public byte[] decode(String encoded){  if (encoded == null) {    return null;  }  int lengthData=encoded.length();  if (lengthData % 2 != 0) {    return null;  }  char[] binaryData=encoded.toCharArray();  int lengthDecode=lengthData / 2;  byte[] decodedData=new byte[lengthDecode];  byte temp1, temp2;  char tempChar;  for (int i=0; i < lengthDecode; i++) {    tempChar=binaryData[i * 2];    temp1=(tempChar < BASE_LENGTH) ? HEX_NUMBER_TABLE[tempChar] : -1;    if (temp1 == -1) {      return null;    }    tempChar=binaryData[i * 2 + 1];    temp2=(tempChar < BASE_LENGTH) ? HEX_NUMBER_TABLE[tempChar] : -1;    if (temp2 == -1) {      return null;    }    decodedData[i]=(byte)((temp1 << 4) | temp2);  }  return decodedData;}  }
class C{  public static byte[] sha256(byte[] s){  return encrypt(s,"SHA-256");}  }
class C{  public static void next(final IdocScanInterface ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() + 2 > ele.getListImage().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  public boolean containsKey(Object key){  int hash=hash(key,null,null,null);  return segmentFor(hash).containsKey(key,null,null,null,hash);}  }
class C{  @Override public Object nextElement(){  return next();}  }
class C{  @SuppressWarnings("unchecked") @Nullable public <T>T argument(int idx){  A.notNull(args,"args");  A.ensure(idx >= 0 && idx < args.length,"idx >= 0 && idx < args.length");  return (T)args[idx];}  }
class C{  public boolean isValidMembership(boolean verbose){  if (consolidatedViewMembers.size() > 0 && getValidatedMembers().size() > 0) {    if (setsAreEqual(consolidatedViewMembers,getValidatedMembers())) {      if (verbose) {        logDecisionStep(verbose,"MEMBERSHIP IS VALID BASED ON VIEW/VALIDATED CONSOLIDATED MEMBERS CONSISTENCY");      }      return true;    }  }  if (verbose) {    logDecisionStep(verbose,String.format("MEMBERSHIP IS NOT VALID: %d MEMBERS APPEAR IN VIEW AND ONLY %d CAN BE VALIDATED",consolidatedViewMembers.size(),getValidatedMembers().size()));  }  return false;}  }
class C{  public void uncollapse(GraphNode master){  CollapseData data=getCollapseData(master);  if (null == data) {    return;  }  collapsedData.remove(master);  for (  CollapseData info : data.getChildrenCollapse()) {    collapsedData.put(info.getMasterNode(),info);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.area=SerialUtilities.readShape(stream);}  }
class C{  private void findAccessPaths(ProfileRequest request,Map<LegMode,StreetRouter> accessRouter){  for (  LegMode mode : request.accessModes) {    StreetRouter streetRouter=new StreetRouter(transportNetwork.streetLayer);    streetRouter.profileRequest=request;    if (mode == LegMode.CAR_PARK) {      streetRouter=findParkRidePath(request,streetRouter);      if (streetRouter != null) {        accessRouter.put(LegMode.CAR_PARK,streetRouter);      } else {        LOG.warn("MODE:{}, Edge near the origin coordinate wasn't found. Routing didn't start!",mode);      }    } else     if (mode == LegMode.BICYCLE_RENT) {      if (!transportNetwork.streetLayer.bikeSharing) {        LOG.warn("Bike sharing trip requested but no bike sharing stations in the streetlayer");        continue;      }      streetRouter=findBikeRentalPath(request,streetRouter,false);      if (streetRouter != null) {        accessRouter.put(LegMode.BICYCLE_RENT,streetRouter);      } else {        LOG.warn("Not found path from cycle to end");      }    } else {      streetRouter.streetMode=StreetMode.valueOf(mode.toString());      streetRouter.timeLimitSeconds=request.getTimeLimit(mode);      streetRouter.transitStopSearch=true;      streetRouter.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;      if (streetRouter.setOrigin(request.fromLat,request.fromLon)) {        streetRouter.route();        accessRouter.put(mode,streetRouter);      } else {        LOG.warn("MODE:{}, Edge near the origin coordinate wasn't found. Routing didn't start!",mode);      }    }  }}  }
class C{  private static boolean checkInstanceIdsReturnedFromAWS(int numberOfInstance,List<String> instanceIds){  if (instanceIds == null || instanceIds.size() == 0) {    return false;  }  return (instanceIds.size() == numberOfInstance);}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g){  this.p=p;  this.g=g;  this.l=0;}  }
class C{  public SetConfigCommand addValue(String name,String value){  if (add == null) {    add=new LinkedList<>();  }  add.add(Pair.of(name,value == null || value.isEmpty() ? "\"\"" : value));  return this;}  }
class C{  private static IpcEndpoint connectTcpEndpoint(String host,int port) throws IgniteCheckedException {  return new IpcClientTcpEndpoint(host,port);}  }
class C{  @Override public void stopInternal() throws LifecycleException {  super.stopInternal();  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Stopping");  }  try {    unload();  } catch (  IOException e) {    getLogger().error("Unable to unload sessions",e);  }  this.started.set(false);  fireLifecycleEvent(STOP_EVENT,null);  super.destroyInternal();  getSessionsToTouch().clear();  cancelTimer();  unregisterJvmRouteBinderValve();  if (isCommitValveEnabled()) {    unregisterCommitSessionValve();  }  this.setState(LifecycleState.STOPPING);}  }
class C{  public SVGPath cubicTo(double[] c1xy,double[] c2xy,double[] xy){  append(SVGConstants.PATH_CUBIC_TO,c1xy[0],c1xy[1],c2xy[0],c2xy[1],xy[0],xy[1]);  return this;}  }
class C{  public final void mul(GMatrix m1,GVector v1){  if (m1.getNumCol() != v1.length) {    throw new MatrixSizeException();  }  if (length != m1.getNumRow()) {    throw new MatrixSizeException();  }  double v[];  if (v1 != this) {    v=v1.values;  } else {    v=values.clone();  }  for (int j=length - 1; j >= 0; j--) {    values[j]=0.0;    for (int i=v1.length - 1; i >= 0; i--) {      values[j]+=m1.values[j][i] * v[i];    }  }}  }
class C{  public static void createTestUser(final UserProfileDao userProfileDao) throws Exception {  EnvironmentContext.getCurrent().setUser(new UserImpl("codenvy","codenvy",null,Arrays.asList("workspace/developer"),false));  final Map<String,String> profileAttributes=new HashMap<>();  profileAttributes.put("firstName","Codenvy");  profileAttributes.put("lastName","Codenvy");  profileAttributes.put("email","che@eclipse.org");  Mockito.when(userProfileDao.getById("codenvy")).thenReturn(new Profile().withId("codenvy").withUserId("codenvy").withAttributes(profileAttributes));}  }
class C{  private void addConsoleAppenderIfNeeded(@Nullable Level logLevel,@Nullable IgniteClosure<Boolean,Logger> implInitC){  if (inited) {    if (implInitC != null)     impl=implInitC.apply(false);    return;  }synchronized (mux) {    if (inited) {      if (implInitC != null)       impl=implInitC.apply(false);      return;    }    if (implInitC != null)     impl=implInitC.apply(true);    boolean quiet=Boolean.valueOf(System.getProperty(IGNITE_QUIET,"true"));    boolean consoleAppenderFound=false;    Category rootCategory=null;    ConsoleAppender errAppender=null;    for (Category l=impl; l != null; ) {      if (!consoleAppenderFound) {        for (Enumeration appenders=l.getAllAppenders(); appenders.hasMoreElements(); ) {          Appender appender=(Appender)appenders.nextElement();          if (appender instanceof ConsoleAppender) {            if ("CONSOLE_ERR".equals(appender.getName())) {              errAppender=(ConsoleAppender)appender;              continue;            }            consoleAppenderFound=true;            break;          }        }      }      if (l.getParent() == null) {        rootCategory=l;        break;      } else       l=l.getParent();    }    if (consoleAppenderFound && quiet)     quiet=false;    if (!consoleAppenderFound && !quiet && Boolean.valueOf(System.getProperty(IGNITE_CONSOLE_APPENDER,"true"))) {      assert rootCategory != null;      if (errAppender != null) {        rootCategory.addAppender(createConsoleAppender(Level.INFO));        if (errAppender.getThreshold() == Level.ERROR)         errAppender.setThreshold(Level.WARN);      } else       rootCategory.addAppender(createConsoleAppender(Level.OFF));      if (logLevel != null)       impl.setLevel(logLevel);    }    if (!isConfigured())     impl.setLevel(Level.OFF);    quiet0=quiet;    inited=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.124 -0400",hash_original_method="BCB1708F0DFA4BE5A3C6F7A871F32C47",hash_generated_method="133FCCD96C9FEA72866FB5A8FB5E6E89") private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  updateRangesFields();}  }
class C{  private static String merge(String... vals){  StringBuilder res=new StringBuilder();  if (vals != null) {    boolean first=true;    for (    String val : vals) {      if (first)       first=false; else       res.append(File.pathSeparatorChar);      res.append(val);    }  }  return res.toString();}  }
class C{  private boolean inWhitelist(String pkg){synchronized (mLock) {    for (    String white : mWhitelist) {      if (pkg.startsWith(white))       return true;    }  }  return false;}  }
class C{  public ChildTestIterator(DTMAxisTraverser traverser){  super(null);  m_traverser=traverser;}  }
class C{  public PartialLinkedListHull(IPoint first,IPoint second){  points.insert(first);  points.insert(second);}  }
class C{  public Collection values(){  Collection vs=values;  return (vs != null ? vs : (values=new Values()));}  }
class C{  private static Alignment decodeAlignment(String encodedAlignment){  return Alignment.valueOf(encodedAlignment);}  }
class C{  protected boolean isConditionalIndependent(int iAttributeX,int iAttributeY,int[] iAttributesZ,int nAttributesZ){  ParentSet oParentSetX=m_BayesNet.getParentSet(iAttributeX);  while (oParentSetX.getNrOfParents() > 0) {    oParentSetX.deleteLastParent(m_instances);  }  for (int iAttributeZ=0; iAttributeZ < nAttributesZ; iAttributeZ++) {    oParentSetX.addParent(iAttributesZ[iAttributeZ],m_instances);  }  double fScoreZ=calcNodeScore(iAttributeX);  double fScoreZY=calcScoreWithExtraParent(iAttributeX,iAttributeY);  if (fScoreZY <= fScoreZ) {    return true;  }  return false;}  }
class C{  private void arrowImpact(CallbackInfo ci,RayTraceResult hitResult){  if (!this.worldObj.isRemote) {    if (SpongeCommonEventFactory.handleCollideImpactEvent(this.mcEntity,getShooter(),hitResult)) {      this.motionX*=-0.10000000149011612D;      this.motionY*=-0.10000000149011612D;      this.motionZ*=-0.10000000149011612D;      this.rotationYaw+=180.0F;      this.mcEntity.prevRotationYaw+=180.0F;      this.ticksInAir=0;      ci.cancel();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.058 -0500",hash_original_method="3365DB1911434298DB39102FDA0B0A6B",hash_generated_method="F9D24BCE540631E978BB617B4CE94DD8") protected void skipWhitespace(final CharArrayBuffer buffer,final ParserCursor cursor){  int pos=cursor.getPos();  int indexTo=cursor.getUpperBound();  while ((pos < indexTo) && HTTP.isWhitespace(buffer.charAt(pos))) {    pos++;  }  cursor.updatePos(pos);}  }
class C{  protected UnManagedVolume checkUnManagedVolumeExistsInDB(String nativeGuid,DbClient dbClient) throws IOException {  @SuppressWarnings("deprecation") List<URI> volumeUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeInfoNativeIdConstraint(nativeGuid));  for (  URI volumeURI : volumeUris) {    UnManagedVolume volumeInfo=dbClient.queryObject(UnManagedVolume.class,volumeURI);    if (volumeInfo != null && !volumeInfo.getInactive()) {      return volumeInfo;    }  }  return null;}  }
class C{  public void start() throws Exception {  _coordinator.start();  for (  DispatcherQueue q : getQueues()) {    if (q.getQueueMaxItem() != null) {      q.setQueue(_coordinator.getQueue(q.getQueueName().name(),this,new ControlRequestSerializer(),DEFAULT_MAX_THREADS,q.getQueueMaxItem()));    } else {      q.setQueue(_coordinator.getQueue(q.getQueueName().name(),this,new ControlRequestSerializer(),DEFAULT_MAX_THREADS));    }  }}  }
class C{  protected Size2D arrangeFN(Graphics2D g2,double w){  RectangleEdge position=getPosition();  if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {    float maxWidth=(float)w;    g2.setFont(this.font);    this.content=TextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));    this.content.setLineAlignment(this.textAlignment);    Size2D contentSize=this.content.calculateDimensions(g2);    if (this.expandToFitSpace) {      return new Size2D(maxWidth,contentSize.getHeight());    } else {      return contentSize;    }  } else   if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {    float maxWidth=Float.MAX_VALUE;    g2.setFont(this.font);    this.content=TextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));    this.content.setLineAlignment(this.textAlignment);    Size2D contentSize=this.content.calculateDimensions(g2);    if (this.expandToFitSpace) {      return new Size2D(contentSize.getHeight(),maxWidth);    } else {      return new Size2D(contentSize.height,contentSize.width);    }  } else {    throw new RuntimeException("Unrecognised exception.");  }}  }
class C{  public static void translateM(double[] tm,int tmOffset,double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 12; i++) {    tm[tmOffset + i]=m[mOffset + i];  }  for (int i=0; i < 4; i++) {    int tmi=tmOffset + i;    int mi=mOffset + i;    tm[12 + tmi]=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z + m[12 + mi];  }}  }
class C{  public Instance nearestNeighbour(Instance target) throws Exception {  return (kNearestNeighbours(target,1)).instance(0);}  }
class C{  public boolean contentEquals(java.lang.CharSequence csq){  if (csq.length() != _count)   return false;  for (int i=0; i < _count; ) {    if (this.charAt(i) != csq.charAt(i++))     return false;  }  return true;}  }
class C{  public static boolean isEmailIdValid(String email){  String expression="^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";  Pattern pattern=Pattern.compile(expression,Pattern.CASE_INSENSITIVE);  Matcher matcher=pattern.matcher(email);  return matcher.matches();}  }
class C{  public div addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public Runnable incrementAsRunnable(){  return mIncrementRunnable;}  }
class C{  private void autoCollapse(){  if (!hasEditor()) {    return;  }  GraphData<NodeDisplayProperty> graphData=autoHierarchyPicker.getGraphData();  getEditor().collapseTree(graphData.getTreeModel(),null);}  }
class C{  protected void sendElements(final List<Element> elements){  final PutDataMapRequest putDataMapRequest=PutDataMapRequest.create("/elements/");  ArrayList<DataMap> elementsDataMap=new ArrayList<>();  for (int position=0; position < elements.size(); ++position) {    DataMap elementDataMap=new DataMap();    Element element=elements.get(position);    elementDataMap.putString("timestamp",new Date().toString());    elementDataMap.putString("titre",element.getTitre());    elementDataMap.putString("description",element.getDescription());    elementDataMap.putString("url",element.getUrl());    elementsDataMap.add(elementDataMap);  }  putDataMapRequest.getDataMap().putDataMapArrayList("/list/",elementsDataMap);  if (mApiClient.isConnected())   Wearable.DataApi.putDataItem(mApiClient,putDataMapRequest.asPutDataRequest());  for (int position=0; position < elements.size(); ++position) {    sendImage(elements.get(position).getUrl(),position);  }}  }
class C{  public void insert(Statement stmt,KeyQualifier keyQualifier,List<Bin> bins){  insert(stmt,keyQualifier,bins,0);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_SINGLE_IS_A1__EXTENDS_NAME_1:    setExtendsName_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void removeListener(final IGraphSearchSettingsListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {  showMessageDialog(parentComponent,message,title,messageType,null);}  }
class C{  private void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  validateTaskSubStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);  if (null != startState.taskState.subStage && null != patchState.taskState.subStage) {    checkState(patchState.taskState.subStage.ordinal() >= startState.taskState.subStage.ordinal());  }}  }
class C{  public Data transform(Data data,XMLCryptoContext xc) throws TransformException {  return spi.transform(data,xc);}  }
class C{  public static void reset(){  idMapping=null;}  }
class C{  private void showOrHideHud(){  if (isHudVisible())   hideHud(); else   showHud();}  }
class C{  public UncheckedIOException(String message,IOException cause){  super(message,Objects.requireNonNull(cause));}  }
class C{  public POSBracketToToken(String file){  super(file);}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  static double calculateNewMeanNonFinite(double previousMean,double value){  if (isFinite(previousMean)) {    return value;  } else   if (isFinite(value) || previousMean == value) {    return previousMean;  } else {    return NaN;  }}  }
class C{  public String transformToString(ElemTemplateElement elem) throws TransformerException {  ElemTemplateElement firstChild=elem.getFirstChildElem();  if (null == firstChild)   return "";  if (elem.hasTextLitOnly() && m_optimizer) {    return ((ElemTextLiteral)firstChild).getNodeValue();  }  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  StringWriter sw=(StringWriter)m_stringWriterObjectPool.getInstance();  m_serializationHandler=(ToTextStream)m_textResultHandlerObjectPool.getInstance();  if (null == m_serializationHandler) {    Serializer serializer=org.apache.xml.serializer.SerializerFactory.getSerializer(m_textformat.getProperties());    m_serializationHandler=(SerializationHandler)serializer;  }  m_serializationHandler.setTransformer(this);  m_serializationHandler.setWriter(sw);  String result;  try {    executeChildTemplates(elem,true);    this.m_serializationHandler.endDocument();    result=sw.toString();  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    sw.getBuffer().setLength(0);    try {      sw.close();    } catch (    Exception ioe) {    }    m_stringWriterObjectPool.freeInstance(sw);    m_serializationHandler.reset();    m_textResultHandlerObjectPool.freeInstance(m_serializationHandler);    m_serializationHandler=savedRTreeHandler;  }  return result;}  }
class C{  protected void printEndOfStatement(StringBuilder ddl){  println(databaseInfo.getSqlCommandDelimiter(),ddl);}  }
class C{  private boolean isLatencyHistoryFull(){  return (latencyHistory.size() == latencyHistoryWindow);}  }
class C{  private static String prettyPrintRelation(Space space,PrettyPrintOptions options){  if (options != null && options.getStyle() == ReferenceStyle.NAME) {    return PrettyPrintConstant.OPEN_IDENT + space.getRelationName() + PrettyPrintConstant.CLOSE_IDENT;  } else {    return PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + space.getRelation().getOid()+ PrettyPrintConstant.CLOSE_IDENT;  }}  }
class C{  public SerializableAccountId(final Deserializer deserializer){  super(deserializer);}  }
class C{  private File createImageFile() throws IOException {  String timeStamp=new SimpleDateFormat("yyyyMMdd_HHmmss",Locale.getDefault()).format(new Date());  String imageFileName="JPEG_" + timeStamp + "_";  File storageDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);  File imageFile=File.createTempFile(imageFileName,".jpg",storageDir);  cameraImageUri=Uri.fromFile(imageFile);  return imageFile;}  }
class C{  public void consume(String seq){  if (!matches(seq))   throw new IllegalStateException("Queue did not match expected sequence");  int len=seq.length();  if (len > remainingLength())   throw new IllegalStateException("Queue not long enough to consume sequence");  pos+=len;}  }
class C{  public double[] computeLocalJointEntropyOfPreviousObservations() throws Exception {  return computeLocalJointEntropyUsingPreviousObservations(contObservations,discObservations);}  }
class C{  public static <E extends Enum<E>>void checkFieldForValueFromEnum(final E value,final String fieldName,final EnumSet<E> expected){  checkFieldNotNull(value,fieldName);  checkFieldValueFromEnum(value.name(),fieldName,expected);}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  public static void debug(String message){  if (Options.DEBUG)   System.out.println(message);}  }
class C{  public static void saveGraph(DirectedGraph<Integer,DefaultEdge> graph,String location) throws IOException {  File file=new File(location);  file.createNewFile();  if (!file.canWrite()) {    throw new IOException("Cannot write to file " + location);  }  GraphSerialization.saveGraph(graph,file);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void add(String keyword,byte id){  int key=getStringMapKey(keyword);  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);}  }
class C{  @Override protected void storeState(){  storedLogLikelihood=logLikelihood;  storedLikelihoodKnown=likelihoodKnown;  storedLogDetColKnown=logDetColKnown;  storedLogDetCol=logDetCol;  storedTrace=trace;  storedTraceKnown=traceKnown;  storedResidualKnown=residualKnown;  storedLxFKnown=LxFKnown;  storedFactorsKnown=factorsKnown;  storedLoadingsKnown=loadingsKnown;  storedDataKnown=dataKnown;  storedTotalRecompute=totalRecompute;  System.arraycopy(residual,0,storedResidual,0,residual.length);  System.arraycopy(LxF,0,storedLxF,0,residual.length);  System.arraycopy(changed,0,storedChanged,0,changed.length);  storedChangedValues=(Vector<Integer>)changedValues.clone();}  }
class C{  private void loadPropertiesAsFile(String filename,Properties properties) throws IOException {  if (null != filename) {    File propertyFile=new File(filename);    String propertyFilePath=propertyFile.getAbsolutePath();    if (propertyFile.exists()) {      FileInputStream is=new FileInputStream(propertyFile);      properties.load(is);      is.close();    } else {      _log.debug("The property file " + propertyFilePath + " does not exist -- using defaults");    }  } else {    _log.debug("The property file does not exist -- using defaults");  }}  }
class C{  @LargeTest public void testCameraPairwiseScenario10() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MIN,WhiteBalance.DAYLIGHT,SceneMode.SUNSET,PictureSize.SMALL,Geotagging.OFF);}  }
class C{  public EntryPointSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public CFBBlockCipherMac(BlockCipher cipher,int cfbBitSize,int macSizeInBits){  this(cipher,cfbBitSize,macSizeInBits,null);}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source){  zoomRangeAxes(factor,state,source,false);}  }
class C{  private PostgresSQLDebuggerFunctions(){}  }
class C{  public boolean equals(Object object){  if (object instanceof DateTimeComparator) {    DateTimeComparator other=(DateTimeComparator)object;    return (iLowerLimit == other.getLowerLimit() || (iLowerLimit != null && iLowerLimit.equals(other.getLowerLimit()))) && (iUpperLimit == other.getUpperLimit() || (iUpperLimit != null && iUpperLimit.equals(other.getUpperLimit())));  }  return false;}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  addSounds(SoundLayer.CREATURE_NOISE.groupName,"food","pop-2");  if (object.has(AMOUNT)) {    amount=object.getInt(AMOUNT);  } else {    amount=0;  }}  }
class C{  public String nodeLabel(){  StringBuilder sb=new StringBuilder();  sb.append("{a: ");  sb.append(Formatter.convert(alpha));  sb.append("|b: ");  sb.append(Formatter.convert(beta));  if (set) {    sb.append("| ");    sb.append(Formatter.convert(value));  }  sb.append("}");  return sb.toString();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public String scanName() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  if (XMLChar.isNameStart(fCurrentEntity.ch[offset])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        return symbol;      }    }    while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fBufferSize) {          char[] tmp=new char[fBufferSize * 2];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;          fBufferSize*=2;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  return symbol;}  }
class C{  public static long generate(long crc,Enum<?> value){  if (value == null) {    return generate(crc,-1);  }  return generate(crc,value.ordinal());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.320 -0500",hash_original_method="4B70DEBF1EF0DC56C3D034BE86F32949",hash_generated_method="AB5001A157CFF8A5A20525D29A48DDF9") public void endRecording(){  if (mRecordingCanvas != null) {    mRecordingCanvas=null;    nativeEndRecording(mNativePicture);  }}  }
class C{  public EsriPolylineZList(int initialCapacity){  super(initialCapacity);}  }
class C{  public static long reverseBits(final long value){  final long b0=JBBPUtils.reverseBitsInByte((byte)value) & 0xFFL;  final long b1=JBBPUtils.reverseBitsInByte((byte)(value >> 8)) & 0xFFL;  final long b2=JBBPUtils.reverseBitsInByte((byte)(value >> 16)) & 0xFFL;  final long b3=JBBPUtils.reverseBitsInByte((byte)(value >> 24)) & 0xFFL;  final long b4=JBBPUtils.reverseBitsInByte((byte)(value >> 32)) & 0xFFL;  final long b5=JBBPUtils.reverseBitsInByte((byte)(value >> 40)) & 0xFFL;  final long b6=JBBPUtils.reverseBitsInByte((byte)(value >> 48)) & 0xFFL;  final long b7=JBBPUtils.reverseBitsInByte((byte)(value >> 56)) & 0xFFL;  return (b0 << 56) | (b1 << 48) | (b2 << 40)| (b3 << 32)| (b4 << 24)| (b5 << 16)| (b6 << 8)| b7;}  }
class C{  private void checkDraft(){  if (mReviewId == 0) {    EditReviewHolder review=getReview();    if (review != null) {      if (TextUtils.getTrimmedLength(review.mComments.getText()) > 0) {        saveDraft(review);      } else {        deleteDraft();      }    }  }}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public static byte[] asUnsignedByteArray(int length,BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    if (bytes.length - 1 > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,1,tmp,tmp.length - (bytes.length - 1),bytes.length - 1);    return tmp;  } else {    if (bytes.length == length) {      return bytes;    }    if (bytes.length > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,0,tmp,tmp.length - bytes.length,bytes.length);    return tmp;  }}  }
class C{  @SuppressWarnings("rawtypes") @Override public void createSingleVolumeSnapshot(StorageSystem storage,URI snapshot,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("createSingleVolumeSnapshot operation START");  try {    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume volume=_dbClient.queryObject(Volume.class,snapshotObj.getParent());    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    String snapLabelToUse=_nameGenerator.generate(tenantName,snapshotObj.getLabel(),snapshot.toString(),'-',IBMSmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    CIMArgument[] inArgs=_helper.getCreateElementReplicaSnapInputArguments(storage,volume,createInactive,snapLabelToUse);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.callReplicationSvc(storage,IBMSmisConstants.CREATE_ELEMENT_REPLICA,inArgs,outArgs);    _smisStorageDevicePostProcessor.processSnapshotCreation(storage,snapshot,!createInactive,outArgs,(BlockSnapshotCreateCompleter)taskCompleter);  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);    setInactive(snapshot,true);  }}  }
class C{  @GET @Path("/{id}/volume-groups") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public VolumeGroupList listVolumeGroups(@PathParam("id") URI id){  ProjectList projectList=listProjects(id);  Set<URI> projects=new HashSet<URI>();  for (  NamedRelatedResourceRep projectRep : projectList.getProjects()) {    projects.add(projectRep.getId());  }  StringSet volumeGroups=new StringSet();  for (  URI project : projects) {    URIQueryResultList list=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getProjectVolumeConstraint(project),list);    Iterator<Volume> resultsIt=_dbClient.queryIterativeObjects(Volume.class,list);    while (resultsIt.hasNext()) {      volumeGroups.addAll(resultsIt.next().getVolumeGroupIds());    }  }  VolumeGroupList volumeGroupList=new VolumeGroupList();  for (  String vg : volumeGroups) {    VolumeGroup volumeGroup=_dbClient.queryObject(VolumeGroup.class,URI.create(vg));    volumeGroupList.getVolumeGroups().add(toNamedRelatedResource(volumeGroup));  }  return volumeGroupList;}  }
class C{  protected int calculateThreshold(final int newCapacity,final float factor){  return (int)(newCapacity * factor);}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  UnsupportedLookAndFeelException e) {    e.printStackTrace();  }  ExampleJOGL window=new ExampleJOGL();  window.setVisible(true);  window.start();}  }
class C{  public static void main(String[] args) throws Exception {  JSONNode person=new JSONNode();  person.addPrimitive("firstName","John");  person.addPrimitive("lastName","Smith");  JSONNode address=person.addObject("address");  address.addPrimitive("streetAddress","21 2nd Street");  address.addPrimitive("city","New York");  address.addPrimitive("state","NY");  address.addPrimitive("postalCode",10021);  JSONNode phonenumbers=person.addArray("phoneNumbers");  phonenumbers.addArrayElement("212 555-1234");  phonenumbers.addArrayElement("646 555-4567");  StringBuffer buffer=new StringBuffer();  person.toString(buffer);  System.out.println(buffer.toString());  JTree tree=new JTree(person);  JFrame frame=new JFrame("JSON");  frame.setSize(800,600);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(new JScrollPane(tree),BorderLayout.CENTER);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public boolean isScanning(){synchronized (currentStateLock) {    return currentState == ConnectionState.SCANNING;  }}  }
class C{  private AdbHelper(){}  }
class C{  public static double expQuick(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.exp(value) : Math.exp(value);  }  if (false) {    return Double.longBitsToDouble((long)(EXP_QUICK_A * value + (EXP_QUICK_B - EXP_QUICK_C)));  }  return Double.longBitsToDouble(((long)(int)(EXP_QUICK_A / (1L << 32) * value + (EXP_QUICK_B - EXP_QUICK_C) / (1L << 32))) << 32);}  }
class C{  public static int availableProcessors(){  return 0;}  }
class C{  public boolean isQuantityBased(){  Object oo=get_Value(COLUMNNAME_IsQuantityBased);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static Ignite startConfigurations(IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> cfgMap,URL springCfgUrl,@Nullable String gridName,@Nullable GridSpringResourceContext springCtx,@Nullable ClassLoader ldr) throws IgniteCheckedException {  List<IgniteNamedInstance> grids=new ArrayList<>(cfgMap.size());  try {    for (    IgniteConfiguration cfg : cfgMap.get1()) {      assert cfg != null;      if (cfg.getGridName() == null && !F.isEmpty(gridName))       cfg.setGridName(gridName);      if (ldr != null && cfg.getClassLoader() == null)       cfg.setClassLoader(ldr);      IgniteNamedInstance grid=start0(new GridStartContext(cfg,springCfgUrl,springCtx == null ? cfgMap.get2() : springCtx),true);      if (grid != null)       grids.add(grid);    }  } catch (  IgniteCheckedException e) {    for (    IgniteNamedInstance grid : grids) {      try {        grid.stop(true);      } catch (      Exception e1) {        U.error(grid.log,"Error when stopping grid: " + grid,e1);      }    }    throw e;  }  IgniteNamedInstance res=!grids.isEmpty() ? grids.get(0) : null;  return res != null ? res.grid() : null;}  }
class C{  public static Color createColor(float red,float green,float blue,float alpha){  return createColor(red,green,blue,alpha,true);}  }
class C{  void recordRemoval(ParameterizedHashMap<K,V> m){}  }
class C{  public void resolve(boolean calculateRefs){  System.out.println("Resolving " + heapObjects.size() + " objects...");  javaLangClass=findClass("java.lang.Class");  if (javaLangClass == null) {    System.out.println("WARNING:  hprof file does not include java.lang.Class!");    javaLangClass=new JavaClass("java.lang.Class",0,0,0,0,EMPTY_FIELD_ARRAY,EMPTY_STATIC_ARRAY,0);    addFakeClass(javaLangClass);  }  javaLangString=findClass("java.lang.String");  if (javaLangString == null) {    System.out.println("WARNING:  hprof file does not include java.lang.String!");    javaLangString=new JavaClass("java.lang.String",0,0,0,0,EMPTY_FIELD_ARRAY,EMPTY_STATIC_ARRAY,0);    addFakeClass(javaLangString);  }  javaLangClassLoader=findClass("java.lang.ClassLoader");  if (javaLangClassLoader == null) {    System.out.println("WARNING:  hprof file does not include java.lang.ClassLoader!");    javaLangClassLoader=new JavaClass("java.lang.ClassLoader",0,0,0,0,EMPTY_FIELD_ARRAY,EMPTY_STATIC_ARRAY,0);    addFakeClass(javaLangClassLoader);  }  for (  JavaHeapObject t : heapObjects.values()) {    if (t instanceof JavaClass) {      t.resolve(this);    }  }  for (  JavaHeapObject t : heapObjects.values()) {    if (!(t instanceof JavaClass)) {      t.resolve(this);    }  }  heapObjects.putAll(fakeClasses);  fakeClasses.clear();  weakReferenceClass=findClass("java.lang.ref.Reference");  if (weakReferenceClass == null) {    weakReferenceClass=findClass("sun.misc.Ref");    referentFieldIndex=0;  } else {    JavaField[] fields=weakReferenceClass.getFieldsForInstance();    for (int i=0; i < fields.length; i++) {      if ("referent".equals(fields[i].getName())) {        referentFieldIndex=i;        break;      }    }  }  if (calculateRefs) {    calculateReferencesToObjects();    System.out.print("Eliminating duplicate references");    System.out.flush();  }  int count=0;  for (  JavaHeapObject t : heapObjects.values()) {    t.setupReferers();    ++count;    if (calculateRefs && count % DOT_LIMIT == 0) {      System.out.print(".");      System.out.flush();    }  }  if (calculateRefs) {    System.out.println("");  }  classes=Collections.unmodifiableMap(classes);}  }
class C{  public List<Strategy> findAll(){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Strategy> query=builder.createQuery(Strategy.class);    Root<Strategy> from=query.from(Strategy.class);    query.select(from);    List<Strategy> items=entityManager.createQuery(query).getResultList();    for (    Strategy strategy : items) {      strategy.getIndicatorSeries().size();      strategy.getRules().size();    }    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private ServiceRefAmp service(StubFactoryAmp stubFactory){  validateOpen();  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  OutboxAmp outbox=OutboxAmp.current();  Object oldContext=null;  try {    thread.setContextClassLoader(_services.classLoader());    if (outbox != null) {      oldContext=outbox.getAndSetContext(_services.inboxSystem());    }    ServiceRefAmp serviceRef=serviceImpl(stubFactory);    String address=stubFactory.address();    if (address != null) {      _services.bind(serviceRef,address);    }    if (serviceRef.stub().isAutoStart() || stubFactory.config().isAutoStart()) {      _services.addAutoStart(serviceRef);    }    return serviceRef;  }  finally {    thread.setContextClassLoader(oldLoader);    if (outbox != null) {      outbox.getAndSetContext(oldContext);    }  }}  }
class C{  public Credentials withPassword(String password){  this.password=password;  return this;}  }
class C{  public boolean hasPreviousState(){  return previous != null;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("pdq") @Valid ProcessDeploymentQueue processDeploymentQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processDeploymentQueue.setEndTs(DateConverter.stringToDate(processDeploymentQueue.getTableEndTs()));    processDeploymentQueue.setStartTs(DateConverter.stringToDate(processDeploymentQueue.getTableStartTs()));    processDeploymentQueue.setInsertTs(DateConverter.stringToDate(processDeploymentQueue.getTableInsertTs()));    processDeploymentQueue.setUserName(principal.getName());    com.wipro.ats.bdre.md.dao.jpa.ProcessDeploymentQueue jpaPdq=new com.wipro.ats.bdre.md.dao.jpa.ProcessDeploymentQueue();    jpaPdq.setDeploymentId(processDeploymentQueue.getDeploymentId());    jpaPdq.setStartTs(processDeploymentQueue.getStartTs());    jpaPdq.setEndTs(processDeploymentQueue.getEndTs());    jpaPdq.setInsertTs(processDeploymentQueue.getInsertTs());    jpaPdq.setUserName(processDeploymentQueue.getUserName());    jpaPdq.setDeployScriptLocation(processDeploymentQueue.getDeployScriptLocation());    DeployStatus deployStatus=new DeployStatus();    deployStatus.setDeployStatusId(processDeploymentQueue.getDeployStatusId().shortValue());    jpaPdq.setDeployStatus(deployStatus);    BusDomain busDomain=new BusDomain();    busDomain.setBusDomainId(processDeploymentQueue.getBusDomainId());    jpaPdq.setBusDomain(busDomain);    ProcessType processType=new ProcessType();    processType.setProcessTypeId(processDeploymentQueue.getProcessTypeId());    jpaPdq.setProcessType(processType);    com.wipro.ats.bdre.md.dao.jpa.Process process=new Process();    process.setProcessId(processDeploymentQueue.getProcessId());    jpaPdq.setProcess(process);    processDeploymentQueueDAO.update(jpaPdq);    restWrapper=new RestWrapper(processDeploymentQueue,RestWrapper.OK);    LOGGER.info("Record with ID:" + processDeploymentQueue.getDeploymentId() + " updated in ProcessDeploymentQueue by User:"+ principal.getName()+ processDeploymentQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public SootMethod(String name,List parameterTypes,Type returnType,int modifiers){  this(name,parameterTypes,returnType,modifiers,Collections.<SootClass>emptyList());}  }
class C{  @Override public void end(BuildTask task){  File scriptFile=commandLineToFile.remove(task.getCommandLine());  if (scriptFile != null) {    if (!scriptFile.delete()) {      LOG.warn("Unable to delete ''{0}''",scriptFile);    }  }}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  al=new CopyOnWriteArrayList<E>();  al.addAllAbsent(c);}  }
class C{  public void testAddSecurityConstraintWithRoles() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> roles=new ArrayList<String>();  roles.add("role1");  roles.add("role2");  WebXmlUtils.addSecurityConstraint(webXml,"wrn","/url",roles);  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url"));  SecurityConstraint securityConstraintElement=WebXmlUtils.getSecurityConstraint(webXml,"/url");  assertNotNull(securityConstraintElement);  Element authConstraintElement=(Element)securityConstraintElement.getChild("auth-constraint",securityConstraintElement.getNamespace());  assertNotNull(authConstraintElement);  List<Element> roleNameElements=authConstraintElement.getChildren("role-name",securityConstraintElement.getNamespace());  assertEquals(2,roleNameElements.size());  assertEquals("role1",roleNameElements.get(0).getText());  assertEquals("role2",roleNameElements.get(1).getText());}  }
class C{  public static void useOp(final Context context){  final ChannelHandlerContext ctx=context.getChannelHandlerContext();  final RequestMessage msg=context.getRequestMessage();  final List<Map<String,String>> usings=(List<Map<String,String>>)msg.getArgs().get(Tokens.ARGS_COORDINATES);  usings.forEach(null);}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public void updateChildPropertySheet(){  String className="None";  if (m_Object != null) {    className=m_Object.getClass().getName();  }  m_ClassNameLabel.setText(className);  m_ChildPropertySheet.setTarget(m_Object);  if ((getTopLevelAncestor() != null) && (getTopLevelAncestor() instanceof Window)) {    ((Window)getTopLevelAncestor()).pack();  }}  }
class C{  boolean contains(Coords c){  final String METHOD_NAME="contains(Coords)";  owner.methodBegin(getClass(),METHOD_NAME);  try {    HexLine[] edges=getEdges();    if (edges[0] == null) {      return false;    }    for (int i=0; i < 6; i++) {      if (edges[i].judgePoint(c) > 0) {        return false;      }    }    return true;  }  finally {    owner.methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public static <T>T withWriterAppend(Path self,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriterAppend(self,charset,false,closure);}  }
class C{  @Override protected void prepare0(boolean remap,boolean topLocked){  boolean txStateCheck=remap ? tx.state() == PREPARING : tx.state(PREPARING);  if (!txStateCheck) {    if (tx.setRollbackOnly()) {      if (tx.timedOut())       onError(null,new IgniteTxTimeoutCheckedException("Transaction timed out and " + "was rolled back: " + this)); else       onError(null,new IgniteCheckedException("Invalid transaction state for prepare " + "[state=" + tx.state() + ", tx="+ this+ ']'));    } else     onError(null,new IgniteTxRollbackCheckedException("Invalid transaction state for " + "prepare [state=" + tx.state() + ", tx="+ this+ ']'));    return;  }  boolean set=cctx.tm().setTxTopologyHint(tx.topologyVersionSnapshot());  try {    prepare(tx.readEntries(),tx.writeEntries(),remap,topLocked);    markInitialized();  }  finally {    if (set)     cctx.tm().setTxTopologyHint(null);  }}  }
class C{  public void addLLoad(int local){  xop(ByteCode.LLOAD_0,ByteCode.LLOAD,local);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean isEmpty(){  return components.isEmpty();}  }
class C{  public static Intent makeDownloadCompleteIntent(Uri pathToImageFile){  return new Intent(DownloadReceiver.ACTION_DOWNLOAD_COMPLETE).putExtra("URI",pathToImageFile.toString());}  }
class C{  public void assertNotEqual(Object expected,Object actual,String errorMessage){  TestUtils.assertNotEqual(expected,actual,errorMessage);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__ORIGINAL_TARGET:    setOriginalTarget((IdentifiableElement)null);  return;case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__IMPORT_SPECIFIER:setImportSpecifier((ImportSpecifier)null);return;}super.eUnset(featureID);}  }
class C{  public static Long toLong(Object o) throws PageException {  if (o instanceof Long)   return (Long)o;  return Long.valueOf(toLongValue(o));}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public RatPoly(int c,int e){  this();  if (c != 0) {    terms.addElement(new RatTerm(new RatNum(c),e));  }}  }
class C{  private static boolean isParentSRDFProtected(UnManagedVolume unManagedVolume,DbClient dbClient){  boolean isParentSRDFProtected=false;  String parentVolumeNativeGuid=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString(),unManagedVolume.getVolumeInformation());  if (null != parentVolumeNativeGuid) {    StringSet umvSet=new StringSet();    umvSet.add(parentVolumeNativeGuid);    List<URI> unManagedvolumeList=getUnManagedVolumeUris(umvSet,dbClient);    if (!unManagedvolumeList.isEmpty()) {      for (      URI unManagedVolumeURI : unManagedvolumeList) {        _logger.debug("Found a replica {} source volume in unmanagedVolumes.",unManagedVolume.getId());        UnManagedVolume parentUnManagedVolume=dbClient.queryObject(UnManagedVolume.class,unManagedVolumeURI);        String remoteMirrorEnabledOnParent=parentUnManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString());        isParentSRDFProtected=(null != remoteMirrorEnabledOnParent && Boolean.valueOf(remoteMirrorEnabledOnParent));        break;      }    } else {      StringSet ingestedVolumeNativeGuids=getListofVolumeIds(umvSet);      List<URI> volumeURIs=getVolumeUris(ingestedVolumeNativeGuids,dbClient);      if (!volumeURIs.isEmpty()) {        _logger.debug("Found a ingested volume of a replica {} source",unManagedVolume.getId());        List<Volume> volumeList=dbClient.queryObject(Volume.class,volumeURIs);        for (        Volume volume : volumeList) {          isParentSRDFProtected=(null != volume.getPersonality());          break;        }      }    }  }  return isParentSRDFProtected;}  }
class C{  private void doLoad(HttpServletRequest request,SchedulingSubpartEditForm frm,SchedulingSubpart ss,String subpartId){  CourseOffering co=ss.getInstrOfferingConfig().getInstructionalOffering().getControllingCourseOffering();  InstructionalOfferingSearchAction.setLastInstructionalOffering(sessionContext,ss.getInstrOfferingConfig().getInstructionalOffering());  InstrOfferingConfig ioc=ss.getInstrOfferingConfig();  InstructionalOffering io=ioc.getInstructionalOffering();  frm.setInstrOfferingId(io.getUniqueId().toString());  frm.setSchedulingSubpartId(subpartId);  frm.setInstructionalType(ss.getItype().getItype().toString());  String label=ss.getItype().getAbbv();  if (io.hasMultipleConfigurations())   label+=" [" + ioc.getName() + "]";  frm.setInstructionalTypeLabel(label);  frm.setUnlimitedEnroll(ioc.isUnlimitedEnrollment());  frm.setItypeBasic(ss.getItype() == null || ss.getItype().getBasic() == 1);  if (!frm.getItypeBasic())   LookupTables.setupItypes(request,false);  frm.setSubjectArea(co.getSubjectAreaAbbv());  frm.setSubjectAreaId(co.getSubjectArea().getUniqueId().toString());  frm.setCourseNbr(co.getCourseNbr());  frm.setCourseTitle(co.getTitle());  frm.setAutoSpreadInTime(ss.isAutoSpreadInTime());  frm.setStudentAllowOverlap(ss.isStudentAllowOverlap());  frm.setDatePattern(ss.getDatePattern() == null ? new Long(-1) : ss.getDatePattern().getUniqueId());  if (frm.getCreditText() == null || frm.getCreditText().length() == 0) {    if (ss.getCredit() != null) {      CourseCreditUnitConfig credit=ss.getCredit();      frm.setCreditText(credit.creditText());    }  }  if (ss.getParentSubpart() != null && ss.getItype().equals(ss.getParentSubpart().getItype())) {    frm.setSameItypeAsParent(new Boolean(true));  } else {    frm.setSameItypeAsParent(new Boolean(false));  }  SchedulingSubpart next=ss.getNextSchedulingSubpart(sessionContext,Right.SchedulingSubpartDetail);  frm.setNextId(next == null ? null : next.getUniqueId().toString());  SchedulingSubpart previous=ss.getPreviousSchedulingSubpart(sessionContext,Right.SchedulingSubpartDetail);  frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());  String parentSubpart="";  SchedulingSubpart parentSS=ss.getParentSubpart();  frm.setParentSubpartId(parentSS == null || !sessionContext.hasPermission(parentSS,Right.SchedulingSubpartDetail) ? null : parentSS.getUniqueId().toString());  frm.setParentSubpartLabel(parentSS == null ? null : parentSS.getSchedulingSubpartLabel());  while (parentSS != null) {    parentSubpart=parentSS.getItype().getAbbv() + " - " + parentSubpart;    parentSS=parentSS.getParentSubpart();  }  frm.setParentSubpart(parentSubpart);  frm.setManagingDeptName(ss.getManagingDept() == null ? null : ss.getManagingDept().getManagingDeptLabel());}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  public void dump(String fileName,List<FeatureFunction> model){  try (PrintWriter out=new PrintWriter(fileName,"UTF-8")){    count();    out.println("# target ||| features");    out.println(String.format("%d %d",numNodes,numEdges));    new ForestWalker(TRAVERSAL.POSTORDER).walk(this.goalNode,new HyperGraphDumper(out,model));  } catch (  IOException e) {    LOG.error("Can't dump hypergraph to file '{}'",fileName);    LOG.error(e.getMessage(),e);  }}  }
class C{  public SVGColorManager(String prop){  this(prop,SVGValueConstants.BLACK_RGB_VALUE);}  }
class C{  protected boolean internalExecute(boolean sendOutParams) throws SQLException {  currentRs=null;  singletonRs=null;  int counter=0;  for (  FBProcedureParam param : procedureCall.getInputParams()) {    if (param != null && param.isParam()) {      counter++;      Object value=param.getValue();      FBField field=getField(counter);      if (value == null) {        field.setNull();      } else       if (value instanceof WrapperWithCalendar) {        setField(field,(WrapperWithCalendar)value);      } else       if (value instanceof WrapperWithLong) {        setField(field,(WrapperWithLong)value);      } else {        field.setObject(value);      }      isParamSet[counter - 1]=true;    }  }  final boolean hasResultSet=super.internalExecute(sendOutParams);  if (hasResultSet && isSingletonResult) {    singletonRs=new FBResultSet(fbStatement.getFieldDescriptor(),gdsHelper,new ArrayList<>(specialResult),true);  }  return hasResultSet;}  }
class C{  public ClearableStringBuilder chop(){  sb.setLength(sb.length() - 1);  return this;}  }
class C{  protected int updateRepresentationCollection(WeightVector wv,AbstractInferenceSolver infSolver,SLParameters parameters) throws Exception {  float C=sC;  IStructure h=infSolver.getLossAugmentedBestStructure(wv,ins,goldStructure);  if (candidateSet.contains(h))   return 0;  float loss=infSolver.getLoss(ins,goldStructure,h);  IFeatureVector best_features=basedSolver.featureGenerator.getFeatureVector(ins,h);  IFeatureVector diff=goldFeatureVector.difference(best_features);  float xi=alphaSum / (2.0f * C);  float dotProduct=wv.dotProduct(diff);  float score=(loss - dotProduct) - xi;  if (parameters.CHECK_INFERENCE_OPT) {    float max_score_in_cache=Float.NEGATIVE_INFINITY;    for (    AlphaStruct as : new ArrayList<AlphaStruct>(candidateAlphas)) {      if (as != null) {        float s=as.loss - wv.dotProduct(as.alphaFeactureVector) - xi;        if (max_score_in_cache < s)         max_score_in_cache=s;      }    }    if (score < max_score_in_cache - 1e-4) {      if (logger.isErrorEnabled()) {        printErrorLogForIncorrectInference(wv,loss,h,xi,dotProduct,score,max_score_in_cache);      }      throw new Exception("The inference procedure obtains a sub-optimal solution!" + "If you want to use an approximate inference solver, set SLParameter.check_inference_opt = false.");    }  }  if (score < parameters.STOP_CONDITION)   return 0;  AlphaStruct as=new AlphaStruct();  as.alpha=0.0f;  as.loss=loss;  as.alphaFeactureVector=diff;  as.struct=h;  newCandidateAlphas.add(as);  candidateSet.add(h);  return 1;}  }
class C{  private void displayChooserDialog(){  final Intent videoGalleryIntent=new Intent(Intent.ACTION_GET_CONTENT).setType("video/*").putExtra(Intent.EXTRA_LOCAL_ONLY,true);  final Intent recordVideoIntent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);  final Intent chooserIntent=Intent.createChooser(videoGalleryIntent,"Upload Video via");  chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{recordVideoIntent});  startActivityForResult(chooserIntent,REQUEST_GET_VIDEO);}  }
class C{  @Override public void completed(ProgressEvent event){  isLoading=false;  if (LOG.isDebugEnabled()) {    LOG.debug("Loading completed.");  }  if (html != null) {    if (LOG.isDebugEnabled()) {      LOG.debug("Browser will now render saved HTML...");    }    setText(html);    html=null;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(9);  newVector.addElement(new Option("\tBinary splits (convert nominal attributes to binary ones)","B",0,"-B"));  newVector.addElement(new Option("\tSplit on residuals instead of class values","R",0,"-R"));  newVector.addElement(new Option("\tUse cross-validation for boosting at all nodes (i.e., disable heuristic)","C",0,"-C"));  newVector.addElement(new Option("\tUse error on probabilities instead of misclassification error " + "for stopping criterion of LogitBoost.","P",0,"-P"));  newVector.addElement(new Option("\tSet fixed number of iterations for LogitBoost (instead of using " + "cross-validation)","I",1,"-I <numIterations>"));  newVector.addElement(new Option("\tSet minimum number of instances at which a node can be split (default 15)","M",1,"-M <numInstances>"));  newVector.addElement(new Option("\tSet beta for weight trimming for LogitBoost. Set to 0 (default) for no weight trimming.","W",1,"-W <beta>"));  newVector.addElement(new Option("\tThe AIC is used to choose the best iteration.","A",0,"-A"));  newVector.addElement(new Option("\tDo not make split point actual value.","-doNotMakeSplitPointActualValue",0,"-doNotMakeSplitPointActualValue"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.322 -0500",hash_original_method="47D615FB94A12D10BEA7B6CBBC941916",hash_generated_method="0514F160BD4EA0E9C6FAFAF642F1790D") public StringIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  public static String stripMargin(CharSequence self,CharSequence marginChar){  String mc=marginChar.toString();  if (mc.length() == 0)   return stripMargin(self,'|');  return stripMargin(self,mc.charAt(0));}  }
class C{  public RunConfiguration createConfiguration(String runnerId,String implementationId,String systemLoader,URI moduleToRun){  final IRunnerDescriptor runnerDesc=runnerRegistry.getDescriptor(runnerId);  final IRunner runner=runnerDesc.getRunner();  final RunConfiguration config=runner.createConfiguration();  config.setName(runnerHelper.computeConfigurationName(runnerId,moduleToRun));  config.setRunnerId(runnerId);  config.setRuntimeEnvironment(runnerDesc.getEnvironment());  config.setImplementationId(implementationId);  config.setUserSelection(moduleToRun);  if (null != SystemLoaderInfo.fromString(systemLoader)) {    config.setSystemLoader(systemLoader);  }  computeDerivedValues(config);  return config;}  }
class C{  public FontAction(String group){  super(group);}  }
class C{  public boolean isNullOnComplicatedPath2(){  int baseKind=getBaseKind();  return baseKind == NCP2;}  }
class C{  public boolean equivalent(INode state){  return equals(state);}  }
class C{  public void invalidateTapSquare(){  touchDownX=-1;  touchDownY=-1;}  }
class C{  public TIntByteHashMap(int initialCapacity,float loadFactor,int noEntryKey,byte noEntryValue){  super(initialCapacity,loadFactor,noEntryKey,noEntryValue);}  }
class C{  public void dataRefresh(int row){  dataRefresh(row,true);}  }
class C{  public PImage(int width,int height){  init(width,height,RGB);}  }
class C{  private StreamInfo parseStream(JSONObject stream,boolean follows){  if (stream == null) {    LOGGER.warning("Error parsing stream: Should be JSONObject, not null");    return null;  }  Number viewersTemp;  String status;  String game;  String name;  String display_name;  long timeStarted=-1;  long userId=-1;  boolean noChannelObject=false;  try {    viewersTemp=(Number)stream.get("viewers");    JSONObject channel=(JSONObject)stream.get("channel");    if (channel == null) {      LOGGER.warning("Error parsing StreamInfo: channel null");      return null;    }    status=(String)channel.get("status");    game=(String)channel.get("game");    name=(String)channel.get("name");    display_name=(String)channel.get("display_name");    userId=JSONUtil.getLong(channel,"_id",-1);    if (!channel.containsKey("status")) {      LOGGER.warning("Error parsing StreamInfo: no channel object (" + name + ")");      noChannelObject=true;    }  } catch (  ClassCastException ex) {    LOGGER.warning("Error parsing StreamInfo: unpexected type");    return null;  }  if (name == null || name.isEmpty()) {    LOGGER.warning("Error parsing StreamInfo: name null or empty");    return null;  }  if (viewersTemp == null) {    LOGGER.warning("Error parsing StreamInfo: viewercount null (" + name + ")");    return null;  }  try {    timeStarted=Util.parseTime((String)stream.get("created_at"));  } catch (  java.text.ParseException|NullPointerException|ClassCastException ex) {    LOGGER.warning("Warning parsing StreamInfo: could not parse created_at (" + ex + ")");  }  int viewers=viewersTemp.intValue();  if (viewers < 0) {    viewers=0;    LOGGER.warning("Warning: Viewercount should not be negative, set to 0 (" + name + ").");  }  StreamInfo streamInfo=getStreamInfo(name);  if (noChannelObject) {    status=streamInfo.getStatus();    game=streamInfo.getGame();  }  streamInfo.setDisplayName(display_name);  if (streamInfo.setUserId(userId)) {    api.setUserId(name,userId);  }  if (follows) {    streamInfo.setFollowed(status,game,viewers,timeStarted);  } else {    streamInfo.set(status,game,viewers,timeStarted);  }  return streamInfo;}  }
class C{  public List<RelatedResourceRep> listByStorageSystem(URI storageSystemId){  UnManagedFileSystemList response=client.get(UnManagedFileSystemList.class,PathConstants.UNMANAGED_FILESYSTEM_BY_STORAGE_SYSTEM_URL,storageSystemId);  return ResourceUtils.defaultList(response.getUnManagedFileSystem());}  }
class C{  public RoundedClippingTransform(float roundedEdgeHeight,int waveCount){  this.roundedEdgeHeight=roundedEdgeHeight;  this.waveCount=waveCount;}  }
class C{  public void putField(final JBBPNumericField field){  JBBPUtils.assertNotNull(field,"Field must not be null");  final JBBPNamedFieldInfo fieldName=field.getNameInfo();  JBBPUtils.assertNotNull(fieldName,"Field name info must not be null");  this.fieldMap.put(fieldName,field);}  }
class C{  public static boolean hasMessengerInstalled(Context context){  try {    context.getPackageManager().getPackageInfo(PACKAGE_NAME,0);    return true;  } catch (  PackageManager.NameNotFoundException e) {    return false;  }}  }
class C{  public final int rank(){  final double tol=Math.max(m,n) * s[0] * EPSILON;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public boolean isRepeats(){  return repeats;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  Node n=m_currentNode.getLastChild();  if (n instanceof CDATASection)   ((CDATASection)n).appendData(s); else   if (n instanceof Comment)   ((Comment)n).appendData(s);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public int writeDateTime(int index,long date){  this.writeULong(index,(date >> 32) & 0xffffffff);  this.writeULong(index + 4,date & 0xffffffff);  return 8;}  }
class C{  protected Object entryKey(HashEntry entry){  return entry.key;}  }
class C{  public static <T>Observable.Transformer<T,T> applyComputationSchedulers(){  return (Observable.Transformer<T,T>)computationTransformer;}  }
class C{  public void __setitem__(String key,Object o) throws TemplateException {  setGlobalVariable(key,getObjectWrapper().wrap(o));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:05.807 -0500",hash_original_method="2EF75139857ED5BD518FA65C3602E9EA",hash_generated_method="4540CE8C9203346F3D761BE6AF8DA95C") public void refreshPlugins(boolean reloadOpenPages){  BrowserFrame.sJavaBridge.obtainMessage(JWebCoreJavaBridge.REFRESH_PLUGINS,reloadOpenPages).sendToTarget();}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs) throws BadLocationException {  ReplaceHolder rh=getReplaceHolder(fb,offset,length,text,attrs);  replace(rh);}  }
class C{  public CustomerRegistrationMessageListener(final MailService mailService,final MailComposer mailComposer,final RegistrationMessage objectMessage){  this.mailService=mailService;  this.mailComposer=mailComposer;  this.objectMessage=objectMessage;}  }
class C{  public applet addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void upload(File zippedFile){  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.126 -0400",hash_original_method="966FCD8B40FDE9881C88D25A85E81669",hash_generated_method="AC03D3F9AE9DA95991FFFDACA0C59E41") protected int engineDigest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("buf == null");  }  if (offset > buf.length || len > buf.length || (len + offset) > buf.length) {    throw new IllegalArgumentException();  }  if (len < DIGEST_LENGTH) {    throw new DigestException("len < DIGEST_LENGTH");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  processDigest(buf,offset);  return DIGEST_LENGTH;}  }
class C{  public Boolean isSmcPresent(){  return smcPresent;}  }
class C{  public void notifyDataChanged(){  init(mDataSets);}  }
class C{  private static int findMatchingLeftParen(String line,int pos){  if (line.charAt(pos - 1) != ')') {    return pos;  }  ;  return findMatchingLeftInner(line,pos,0);}  }
class C{  public AppLauncher launchOnLockedRetries(int launchOnLockedRetries){  this.launchOnLockedRetries=launchOnLockedRetries;  return this;}  }
class C{  public boolean isData(){  return data;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.FEATURE_TYPE_LIBRARY__TYPES:    return types != null && !types.isEmpty();case SGenPackage.FEATURE_TYPE_LIBRARY__NAME:  return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public void addILoad(int local){  xop(ByteCode.ILOAD_0,ByteCode.ILOAD,local);}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getFastaFileNameTemplate());  List<String> command=new ArrayList<String>();  command.add(this.getPerlCommand());  command.add(this.getScriptPath());  command.add("--fasta");  command.add(fastaFilePath);  command.add("-path");  command.add(this.getHmmerPath());  command.add("--hmmlib");  command.add(this.getSfHmmAllPath());  command.add("-dat");  command.add(this.getPirsfDatPath());  command.addAll(this.getBinarySwitchesAsList());  return command;}  }
class C{  public NoRoutesException(){  super("No routes were found");}  }
class C{  public final void testBeginsWithUppercaseLetterWithContextAndResourceIdParameters(){  assertNotNull(Validators.beginsWithUppercaseLetter(getContext(),android.R.string.cancel));}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public void updateAmount(){  setAmt(getTotalAmount());}  }
class C{  private static String replace(final String inString,final String oldPattern,final String newPattern){  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {    return inString;  }  final StringBuffer sbuf=new StringBuffer();  int pos=0;  int index=inString.indexOf(oldPattern);  final int patLen=oldPattern.length();  while (index >= 0) {    sbuf.append(inString.substring(pos,index));    sbuf.append(newPattern);    pos=index + patLen;    index=inString.indexOf(oldPattern,pos);  }  sbuf.append(inString.substring(pos));  return sbuf.toString();}  }
class C{  private void resumeGroupMirrors(StorageSystem storage,List<URI> mirrorList) throws WBEMException {  CIMObjectPath groupSynchronized=ReplicationUtils.getMirrorGroupSynchronizedPath(storage,mirrorList.get(0),_dbClient,_helper,_cimPath);  CIMArgument[] resumeCGMirrorInput=_helper.getResumeSynchronizationInputArgumentsWithCopyState(groupSynchronized);  CIMArgument[] outArgs=new CIMArgument[5];  _helper.callModifyReplica(storage,resumeCGMirrorInput,outArgs);  List<BlockMirror> mirrors=_dbClient.queryObject(BlockMirror.class,mirrorList);  for (  BlockMirror mirror : mirrors) {    mirror.setSyncState(SynchronizationState.SYNCHRONIZED.name());  }  _dbClient.persistObject(mirrors);}  }
class C{  public static MimeType fromFileName(final String fileName){  final String inLowerCaseName=fileName.toLowerCase();  final String fileExtension=getFileExtension(inLowerCaseName);  final MimeType mimeType=fileExtensions.get(fileExtension);  if (mimeType != null) {    return mimeType;  }  return BINARY;}  }
class C{  public CloseIndexRequest(String... indices){  this.indices=indices;}  }
class C{  public Tile(Sector sector,Level level,int row,int column){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (level == null) {    String msg=Logging.getMessage("nullValue.LevelIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.sector=sector;  this.level=level;  this.row=row;  this.column=column;  this.cacheName=null;  this.tileKey=new TileKey(this);  this.path=null;}  }
class C{  public boolean isSortingAndFilteringAllowed(){  return allowSortingAndFiltering;}  }
class C{  public static boolean isDarkTheme(Context context,boolean current){  return resolveBoolean(context,R.attr.mdtp_theme_dark,current);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.004 -0500",hash_original_method="1B5843932F53A941705DBD73966AF816",hash_generated_method="863FDB4C491566D032833131B577C955") public void closeIdleConnections(long idleTime){  long idleTimeout=System.currentTimeMillis() - idleTime;  if (log.isDebugEnabled()) {    log.debug("Checking for connections, idleTimeout: " + idleTimeout);  }  Iterator<HttpConnection> connectionIter=connectionToTimes.keySet().iterator();  while (connectionIter.hasNext()) {    HttpConnection conn=connectionIter.next();    TimeValues times=connectionToTimes.get(conn);    Long connectionTime=times.timeAdded;    if (connectionTime.longValue() <= idleTimeout) {      if (log.isDebugEnabled()) {        log.debug("Closing connection, connection time: " + connectionTime);      }      connectionIter.remove();      try {        conn.close();      } catch (      IOException ex) {        log.debug("I/O error closing connection",ex);      }    }  }}  }
class C{  public String printEntry(String key,Object valueBytes){  String value=null;  if (valueBytes != null) {    if (valueBytes instanceof byte[]) {      value=new String("byte[]: \"" + new String((byte[])valueBytes) + "\"");    } else     if (valueBytes instanceof String) {      value=new String("String: \"" + valueBytes + "\"");    } else     if (valueBytes instanceof Integer) {      value=new String("Integer: \"" + valueBytes.toString() + "\"");    } else {      value=new String("No value in cache.");    }    System.out.print("     " + key + " -> "+ value);  }  return value;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void cleanup(){  input=null;  matcher.reset("");}  }
class C{  public void registerPreExecHooks(AbstractTask task,List<AbstractHook> hooks){  this.taskToPreExecHookMap.put(task.getClass().getName(),hooks);}  }
class C{  protected static boolean match(Object ref,Object test){  if (ref == null) {    return false;  }  if (ref == test) {    return true;  }  if (ref instanceof LabelList && test instanceof LabelList) {    final LabelList lref=(LabelList)ref;    final LabelList ltest=(LabelList)test;    final int s1=lref.size(), s2=ltest.size();    if (s1 == 0 || s2 == 0) {      return false;    }    for (int i=0; i < s1; i++) {      String l1=lref.get(i);      if (l1 == null) {        continue;      }      for (int j=0; j < s2; j++) {        if (l1.equals(ltest.get(j))) {          return true;        }      }    }  }  return ref.equals(test);}  }
class C{  protected void generateHeaders() throws BadElementException {  final Iterator iterator=this.model.getHeaderCellList().iterator();  while (iterator.hasNext()) {    final HeaderCell headerCell=(HeaderCell)iterator.next();    String columnHeader=headerCell.getTitle();    if (columnHeader == null) {      columnHeader=StringUtils.capitalize(headerCell.getBeanPropertyName());    }    final Cell hdrCell=getCell(columnHeader);    hdrCell.setGrayFill(0.9f);    hdrCell.setHeader(true);    this.tablePDF.addCell(hdrCell);  }}  }
class C{  public static long min(long[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  long min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public void addRoleFactor(Long roleKey,double factorToAdd){  if (roleFactors.containsKey(roleKey)) {    Double currentFactor=roleFactors.get(roleKey);    Double newFactor=Double.valueOf(currentFactor.doubleValue() + factorToAdd);    roleFactors.put(roleKey,newFactor);  } else {    roleFactors.put(roleKey,Double.valueOf(factorToAdd));  }}  }
class C{  public static long murmur(final BitVector bv,final long prefixLength,final long[] state){  final long precomputedUpTo=prefixLength - prefixLength % Long.SIZE;  long h=state[(int)(precomputedUpTo / Long.SIZE)], k;  if (prefixLength > precomputedUpTo) {    k=bv.getLong(precomputedUpTo,prefixLength);    k*=M;    k^=k >>> R;    k*=M;    h^=k;    h*=M;  }  k=prefixLength;  k*=M;  k^=k >>> R;  k*=M;  h^=k;  h*=M;  return h;}  }
class C{  private ModuleHelpers(){}  }
class C{  public void enablePresets(){  if (usePaneLayout) {    FragmentManager fm=getSupportFragmentManager();    Fragment recentPresetsFragment=fm.findFragmentByTag(RECENTPRESETS_FRAGMENT);    if (recentPresetsFragment != null) {      ((RecentPresetsFragment)recentPresetsFragment).enable();    }  } else {    tagEditorFragment.enableRecentPresets();  }}  }
class C{  public static boolean registerSolderingTool(ItemStack aTool){  return registerTool(aTool,sSolderingToolList);}  }
class C{  private static void reply_Login2_Role(body body,WebSessionCtx wsc,String formName,String fieldValue,String locationValue){  String form=null;  log.info("Location-Role: " + locationValue);  form=locationValue + WebEnv.TARGET_WINDOW + ".document.forms."+ formName+ ".";  Login login=new Login(wsc.ctx);  KeyNamePair[] clients=login.getClients(new KeyNamePair(Integer.parseInt(fieldValue),fieldValue));  StringBuffer script=new StringBuffer();  script.append("var A=").append(form).append(WLogin.P_CLIENT).append(".options; ");  script.append("A.length=0; ");  for (int i=0; i < clients.length; i++) {    KeyNamePair p=clients[i];    script.append("A[").append(i).append("]=new Option('");    script.append(p.getName());    script.append("','");    script.append(p.getKey());    script.append("'); ");  }  script.append("\n");  if (clients.length > 0) {    script.append("var B=").append(form).append(WLogin.P_ORG).append(".options; ");    script.append("B.length=0; ");    KeyNamePair[] orgs=login.getOrgs(clients[0]);    for (int i=0; i < orgs.length; i++) {      KeyNamePair p=orgs[i];      script.append("B[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }    script.append("\n");    if (orgs.length > 0) {      script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");      script.append("C.length=0; ");      KeyNamePair[] whs=login.getWarehouses(orgs[0]);      if (whs != null) {        for (int i=0; i < whs.length; i++) {          KeyNamePair p=whs[i];          script.append("C[").append(i).append("]=new Option('");          script.append(p.getName());          script.append("','");          script.append(p.getKey());          script.append("'); ");        }      }    }  }  body.addElement(new p().addElement(WLogin.P_CLIENT + "="));  body.addElement(new script(script.toString()));}  }
class C{  private static String convertClass2ParameterName(Class inputType){  String className=inputType.getName();  String name=className.substring(className.lastIndexOf(".") + 1);  StringBuffer result=new StringBuffer();  for (int i=0; i < name.length(); i++) {    char current=name.charAt(i);    if (Character.isUpperCase(current)) {      result.append("_" + Character.toLowerCase(current));    } else {      result.append(current);    }  }  return "keep" + result.toString();}  }
class C{  public void onNotificationsPaused(){  isNotificationsPaused=true;}  }
class C{  public HitBox(String name,Point2D localOrigin,BoundingShape shape){  this.name=name;  this.shape=shape;  this.bounds=new BoundingBox(localOrigin.getX(),localOrigin.getY(),shape.getSize().getWidth(),shape.getSize().getHeight());}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public String choose(String filename){  for (  String sourceDir : candidates) {    FilePath candidate=new FilePath(root,sourceDir);    candidate=new FilePath(candidate,filename);    try {      if (candidate.exists()) {        return sourceDir;      }    } catch (    IOException e) {      e.printStackTrace();    }catch (    InterruptedException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public void sortInstances(int columnIndex){  ((ArffTableModel)getModel()).sortInstances(columnIndex);}  }
class C{  public Factory convertToLatest(Factory factory) throws ApiException {  Factory resultFactory=DtoFactory.getInstance().clone(factory);  resultFactory.setV("2.1");  for (  LegacyConverter converter : LEGACY_CONVERTERS) {    converter.convert(resultFactory);  }  return resultFactory;}  }
class C{  public void harvest(Component component){  harvest(Arrays.asList(component),null);}  }
class C{  public UsbSerialDriver probeDevice(final UsbDevice usbDevice){  final int vendorId=usbDevice.getVendorId();  final int productId=usbDevice.getProductId();  final Class<? extends UsbSerialDriver> driverClass=mProbeTable.findDriver(vendorId,productId);  if (driverClass != null) {    final UsbSerialDriver driver;    try {      final Constructor<? extends UsbSerialDriver> ctor=driverClass.getConstructor(UsbDevice.class);      driver=ctor.newInstance(usbDevice);    } catch (    NoSuchMethodException e) {      UserError.Log.e("UsbSerialProber","No such method exception");      return null;    }catch (    IllegalArgumentException e) {      throw new RuntimeException(e);    }catch (    InstantiationException e) {      throw new RuntimeException(e);    }catch (    IllegalAccessException e) {      throw new RuntimeException(e);    }catch (    InvocationTargetException e) {      throw new RuntimeException(e);    }    return driver;  }  return null;}  }
class C{  private VectorDictionaryTable(final NTree tree){  super();  init(tree.size(),2);  int i=0;  for (  DataPoint point : tree.asArrayList()) {    String token=((StringDataPoint)point).getString();    double[] vals=((StringDataPoint)point).getVector();    setLogicalValue(i,0,token,false);    setLogicalValue(i,1,Utils.doubleArrayToString(vals),false);    i++;  }  fireTableDataChanged();}  }
class C{  public void addMapKeyConvert(String attributeName,ConvertMetadata convert){  if (!m_mapKeyConverts.containsKey(attributeName)) {    m_mapKeyConverts.put(attributeName,new ArrayList<ConvertMetadata>());  }  m_mapKeyConverts.get(attributeName).add(convert);}  }
class C{  private synchronized void resetLogTargets(final boolean recursive){  if (recursive) {    m_logTargetsForceSet=false;  } else   if (m_logTargetsForceSet) {    return;  }  m_logTargets=m_parent.safeGetLogTargets();  resetChildLogTargets(recursive);}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mScrollerX.mMode=mScrollerY.mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public synchronized void addLoggerListener(final LoggerListener loggerListener){  if (null == loggerListener) {    throw new NullPointerException("loggerListener");  }  if (null == m_loggerListener) {    m_loggerListener=loggerListener;  } else {    final String message="LoggerListener already set on a unicast event notifier";    throw new UnsupportedOperationException(message);  }}  }
class C{  public void drawResultBitmap(Bitmap result){  resultBitmap=result;  invalidate();}  }
class C{  public void searchStopped(){  treeViewer.clearSelectedTaxa();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodes.class,args);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE:    return getContainingModule();}return super.eInvoke(operationID,arguments);}  }
class C{  private static CimConnectionInfo createConnectionInfo(){  CimConnectionInfo connectionInfo=new CimConnectionInfo();  connectionInfo.setType(CimConstants.ECOM_CONNECTION_TYPE);  connectionInfo.setHost(providerIP);  connectionInfo.setPort(providerPort);  connectionInfo.setUser(providerUser);  connectionInfo.setPassword(providerPassword);  connectionInfo.setInteropNS(providerInterOpNamespace);  connectionInfo.setImplNS(providerNamespace);  connectionInfo.setUseSSL(isProviderSslEnabled);  return connectionInfo;}  }
class C{  public SessionChannel createSessionChannel(String connectUrl,String endpointUri) throws ServiceResultException {  EndpointDescription[] endpoints=discoverEndpoints(connectUrl,connectUrl);  EndpointDescription endpoint=select(endpoints,endpointUri);  SecureChannel channel=createSecureChannel(connectUrl,endpoint);  try {    Session session=createSession(channel);    SessionChannel sessionChannel=session.createSessionChannel(channel,this);    return sessionChannel;  } catch (  ServiceResultException se) {    channel.closeAsync();    throw se;  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/mount") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep mountExport(@PathParam("id") URI id,FileSystemMountParam param) throws InternalException {  _log.info("FileService::mount Request recieved {}",id);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  if (!isSubDirValid(fs,param.getSubDir())) {    throw APIException.badRequests.invalidParameter("sub_directory",param.getSubDir());  }  if (!isFSTypeValid(param)) {    throw APIException.badRequests.invalidParameter("fs_type",param.getFsType());  }  if (!isSecurityValid(fs,param)) {    throw APIException.badRequests.invalidParameter("security",param.getSecurity());  }  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.MOUNT_NFS_EXPORT);  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.updateObject(fs);  ComputeSystemOrchestrationController controller=getController(ComputeSystemOrchestrationController.class,null);  try {    controller.mountDevice(param.getHost(),id,param.getSubDir(),param.getSecurity(),param.getPath(),param.getFsType(),task);  } catch (  Exception e) {    throw e;  }  auditOp(OperationTypeEnum.MOUNT_NFS_EXPORT,true,AuditLogManager.AUDITOP_BEGIN,fs.getName(),fs.getId().toString(),param.getHost().toString(),param.getSubDir(),param.getPath());  fs=_dbClient.queryObject(FileShare.class,id);  _log.debug("FileService::Mount Before sending response, FS ID : {}, Taks : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(fs,task,op);}  }
class C{  public SQLException(Throwable cause){  super(cause);  if (!(this instanceof SQLWarning)) {    if (DriverManager.getLogWriter() != null) {      printStackTrace(DriverManager.getLogWriter());    }  }}  }
class C{  public SIPDate(long timeMillis){  javaCal=new GregorianCalendar(TimeZone.getTimeZone("GMT:0"),Locale.getDefault());  java.util.Date date=new java.util.Date(timeMillis);  javaCal.setTime(date);  wkday=javaCal.get(Calendar.DAY_OF_WEEK);switch (wkday) {case Calendar.MONDAY:    sipWkDay=MON;  break;case Calendar.TUESDAY:sipWkDay=TUE;break;case Calendar.WEDNESDAY:sipWkDay=WED;break;case Calendar.THURSDAY:sipWkDay=THU;break;case Calendar.FRIDAY:sipWkDay=FRI;break;case Calendar.SATURDAY:sipWkDay=SAT;break;case Calendar.SUNDAY:sipWkDay=SUN;break;default :InternalErrorHandler.handleException("No date map for wkday " + wkday);}day=javaCal.get(Calendar.DAY_OF_MONTH);month=javaCal.get(Calendar.MONTH);switch (month) {case Calendar.JANUARY:sipMonth=JAN;break;case Calendar.FEBRUARY:sipMonth=FEB;break;case Calendar.MARCH:sipMonth=MAR;break;case Calendar.APRIL:sipMonth=APR;break;case Calendar.MAY:sipMonth=MAY;break;case Calendar.JUNE:sipMonth=JUN;break;case Calendar.JULY:sipMonth=JUL;break;case Calendar.AUGUST:sipMonth=AUG;break;case Calendar.SEPTEMBER:sipMonth=SEP;break;case Calendar.OCTOBER:sipMonth=OCT;break;case Calendar.NOVEMBER:sipMonth=NOV;break;case Calendar.DECEMBER:sipMonth=DEC;break;default :InternalErrorHandler.handleException("No date map for month " + month);}year=javaCal.get(Calendar.YEAR);hour=javaCal.get(Calendar.HOUR_OF_DAY);minute=javaCal.get(Calendar.MINUTE);second=javaCal.get(Calendar.SECOND);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Address __sub__(final Object rhs){  return new Address(m_value.subtract(getBigInteger(rhs)));}  }
class C{  private void createPartitionRegionAsynch(final String regionPrefix,final int startIndexForRegion,final int endIndexForRegion,final int localMaxMemory,final int redundancy,final int recoveryDelay) throws Exception {  final AsyncInvocation[] async=new AsyncInvocation[vmArr.length];  for (int count=0; count < vmArr.length; count++) {    VM vm=vmArr[count];    async[count]=vm.invokeAsync(getCreateMultiplePRregion(regionPrefix,endIndexForRegion,redundancy,localMaxMemory,recoveryDelay));  }  for (int count2=0; count2 < async.length; count2++) {    ThreadUtils.join(async[count2],30 * 1000);  }  for (int count2=0; count2 < async.length; count2++) {    if (async[count2].exceptionOccurred()) {      Assert.fail("exception during " + count2,async[count2].getException());    }  }}  }
class C{  protected void save() throws IOException {  if (blockOutputStream.size() == 0) {    return;  }  writeInt(nextSequenceNumber++);  byte[] buffer=blockOutputStream.toByteArray();  md5.update(buffer);  outputStream.write(md5.digest());  writeInt(buffer.length);  outputStream.write(buffer);  outputStream.flush();  blockOutputStream.reset();}  }
class C{  public static float clamp(float x,float a,float b){  return (x < a) ? a : (x > b) ? b : x;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,false);}  }
class C{  public void drawChars(char data[],int offset,int length,int x,int y){  g.drawChars(data,offset,length,x,y);}  }
class C{  public void evaluatePopulation(final EvolutionState state){  super.evaluatePopulation(state);  for (int x=0; x < state.population.subpops.length; x++)   state.population.subpops[x].individuals=buildArchive(state,x);}  }
class C{  @SuppressWarnings("unchecked") public Intervals(Collection<T> content,Function<T,Double> probs){  intervals=new Interval[content.size()];  int i=0;  double total=0.0f;  for (  T a : content) {    double prob=probs.apply(a);    if (prob == Double.NaN) {      throw new RuntimeException("probability is NaN: " + a);    }    intervals[i++]=new Interval<T>(a,total,total + prob);    total+=prob;  }  if (total < 0.0001) {    throw new RuntimeException("total prob is null: " + content);  }  totalProb=total;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute(ATTRIBUTE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  private CCriteriumFormulaGenerator(){}  }
class C{  protected synchronized void snapshotAll(){  snapshotsManager.getAll().forEach(null);}  }
class C{  @Override public boolean isTextFieldEditable(){  return true;}  }
class C{  public boolean isPreemptive(){  return preemptive;}  }
class C{  protected ObjectMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  throw new InternalError();}  }
class C{  public void test_scheduleLjava_util_TimerTaskJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    t.cancel();    try {      t.schedule(testTask,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,-100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,-10);      fail("Scheduling a null task with negative delays should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    t.schedule(testTask,200);    awaitRun(testTask);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,150);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,70);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,10);    Thread.sleep(400);    assertTrue("Multiple tasks should have incremented counter 4 times not " + timerCounter,timerCounter == 4);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public void testSortResources() throws Exception {  Resource jmsServer=new Resource("TestJmsServer",WebLogicConfigurationEntryType.JMS_SERVER);  Resource jmsModule=new Resource("TestJmsModule",WebLogicConfigurationEntryType.JMS_MODULE);  Resource jmsSubdeployment=new Resource("TestJmsSubdeployment",WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT);  Resource jmsQueue=new Resource("jms/queue/REQUEST",WebLogicConfigurationEntryType.JMS_QUEUE);  Resource jmsConnectionFactory=new Resource("jms/cf/REQUEST",WebLogicConfigurationEntryType.JMS_CONNECTION_FACTORY);  configuration.addResource(jmsSubdeployment);  configuration.addResource(jmsQueue);  configuration.addResource(jmsModule);  configuration.addResource(jmsServer);  configuration.addResource(jmsConnectionFactory);  configuration.sortResources();  List<Resource> resources=configuration.getResources();  assertEquals(5,resources.size());  assertEquals(WebLogicConfigurationEntryType.JMS_SERVER,resources.get(0).getType());  assertEquals(WebLogicConfigurationEntryType.JMS_MODULE,resources.get(1).getType());  assertEquals(WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT,resources.get(2).getType());  assertEquals(WebLogicConfigurationEntryType.JMS_CONNECTION_FACTORY,resources.get(3).getType());  assertEquals(WebLogicConfigurationEntryType.JMS_QUEUE,resources.get(4).getType());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.TRACE_STATE_EXITED__STATE:    if (resolve)     return getState();  return basicGetState();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public XML addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void validatePortUniqueId(java.lang.String[] param){}  }
class C{  private void createActions(){  closeAction=new CloseAction();  if (getWindowDecorationStyle() == JRootPane.FRAME) {    iconifyAction=new IconifyAction();    restoreAction=new RestoreAction();    maximizeAction=new MaximizeAction();  }}  }
class C{  private static String changeFirstCharacterCase(String str,boolean capitalize){  if (str == null || str.length() == 0) {    return str;  }  StringBuffer buf=new StringBuffer(str.length());  if (capitalize) {    buf.append(Character.toUpperCase(str.charAt(0)));  } else {    buf.append(Character.toLowerCase(str.charAt(0)));  }  buf.append(str.substring(1));  return buf.toString();}  }
class C{  public JCardModule(){  super(MODULE_NAME,MODULE_VERSION);  setScribeIndex(new ScribeIndex());  addSerializer(serializer);  addDeserializer(VCard.class,deserializer);}  }
class C{  protected boolean checkExists(String key,Map<String,String> params){  return (get(key,params).length() > 0);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  void dispose(){  if (DO_CLEAN_DIRTY) {    Arrays.fill(curCurvepts,0f);    Arrays.fill(firstSegmentsBuffer,0f);  }  if (recycleDashes && dash != dashes_initial) {    rdrCtx.putDirtyFloatArray(dash);    dash=null;  }  if (firstSegmentsBuffer != firstSegmentsBuffer_initial) {    rdrCtx.putDirtyFloatArray(firstSegmentsBuffer);    firstSegmentsBuffer=firstSegmentsBuffer_initial;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PARAMETER__TYPE:    if (resolve)     return getType();  return basicGetType();case TypesPackage.PARAMETER__TYPE_SPECIFIER:return getTypeSpecifier();case TypesPackage.PARAMETER__NAME:return getName();case TypesPackage.PARAMETER__ANNOTATIONS:return getAnnotations();case TypesPackage.PARAMETER__OWNING_OPERATION:return getOwningOperation();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getPaint());}  }
class C{  private static boolean isLoginResult(final JsonObject result){  return result.has(Protocol.Field.TOKEN) && result.has(Protocol.Field.ID);}  }
class C{  public void testJAASFile(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(JonasPropertySet.JONAS_MEJB_JAAS_FILE,"foo");  try {    factory.readConfiguration(configuration);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int capacity(){  if (V == null) {    return 0;  }  return V.length;}  }
class C{  public void onHostStatusChanged(HostStatus status){  Logger.info("HostMonitorBR","host status changed: " + status);}  }
class C{  public <R>R reduce(R initial,Func2<R,T,R> accumulator){  R value=initial;  for (  T anIt : this)   value=accumulator.call(value,anIt);  return value;}  }
class C{  public static void run(){  v=new InjectedSourceFlows();  v.buildInjectedFlowMap();  logger.info("Injected Flows: \n");  for (  Entry<IAllocNode,Set<InfoKind>> entry : v.injectedFlows.entrySet()) {    logger.info(entry.getKey().toString());    for (    InfoKind kind : entry.getValue())     logger.info("  " + kind);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Location(String unit,int line,int column){  this.unit=unit;  this.line=line;  this.column=column;}  }
class C{  private void initialiseWebDriverFactory(){  if (webDriverFactory instanceof FirefoxDriverFactory) {    ((FirefoxDriverFactory)webDriverFactory).setFirefoxProfile(firefoxProfile);    if (screenHeight != -1 && screenWidth != -1) {      ((FirefoxDriverFactory)webDriverFactory).setScreenHeight(screenHeight);      ((FirefoxDriverFactory)webDriverFactory).setScreenWidht(screenWidth);    }  }}  }
class C{  @Override public IBlockState withRotation(IBlockState state,Rotation rot){switch (rot) {case COUNTERCLOCKWISE_90:case CLOCKWISE_90:switch (state.getValue(LOG_AXIS)) {case X:      return state.withProperty(LOG_AXIS,BlockSpectreLog.EnumAxis.Z);case Z:    return state.withProperty(LOG_AXIS,BlockSpectreLog.EnumAxis.X);default :  return state;}default :return state;}}  }
class C{  public MarkupBuilder(){  this(new IndentPrinter());}  }
class C{  public FastUtilLongIterator(long[] primitiveArray){  super(primitiveArray);}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI varrayId){  NetworkList response=client.get(NetworkList.class,String.format(ID_URL_FORMAT,VARRAY_URL) + "/networks",varrayId);  return defaultList(response.getNetworks());}  }
class C{  private void parseLocation(Element locationTag,Entity entity){  String index=locationTag.getAttribute(INDEX);  String destroyed=locationTag.getAttribute(IS_DESTROYED);  int loc;  int locAmmoCount=0;  if ((index == null) || (index.length() == 0)) {    warning.append("Could not find index for location.\n");    return;  } else {    loc=-1;    try {      loc=Integer.parseInt(index);    } catch (    NumberFormatException excep) {    }    if (loc < 0) {      warning.append("Found invalid index value for location: ").append(index).append(".\n");      return;    } else     if (loc >= entity.locations()) {      warning.append("The entity, ").append(entity.getShortName()).append(" does not have a location at index: ").append(loc).append(".\n");      return;    } else {      try {        if (Boolean.parseBoolean(destroyed)) {          destroyLocation(entity,loc);        }      } catch (      Throwable excep) {        warning.append("Found invalid isDestroyed value: ").append(destroyed).append(".\n");      }    }  }  NodeList nl=locationTag.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != locationTag) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      Element currEle=(Element)currNode;      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(ARMOR)) {        parseArmor(currEle,entity,loc);      } else       if (nodeName.equalsIgnoreCase(BREACH)) {        breachLocation(entity,loc);      } else       if (nodeName.equalsIgnoreCase(BLOWN_OFF)) {        blowOffLocation(entity,loc);      } else       if (nodeName.equalsIgnoreCase(SLOT)) {        locAmmoCount=parseSlot(currEle,entity,loc,locAmmoCount);      } else       if (nodeName.equalsIgnoreCase(STABILIZER)) {        String hit=currEle.getAttribute(IS_HIT);        if (!hit.equals("")) {          ((Tank)entity).setStabiliserHit(loc);        }      }    } else {      continue;    }  }}  }
class C{  public static int findLastVisibleItemPosition(RecyclerView rv){  RecyclerView.LayoutManager lm=rv.getLayoutManager();  int lastVisibleItemPosition=RecyclerView.NO_POSITION;  if (lm instanceof GridLayoutManager) {    lastVisibleItemPosition=((GridLayoutManager)lm).findLastVisibleItemPosition();  } else   if (lm instanceof LinearLayoutManager) {    lastVisibleItemPosition=((LinearLayoutManager)lm).findLastVisibleItemPosition();  } else   if (lm instanceof StaggeredGridLayoutManager) {    int positions[]=((StaggeredGridLayoutManager)lm).findLastVisibleItemPositions(null);    for (    int pos : positions) {      if (pos > lastVisibleItemPosition) {        lastVisibleItemPosition=pos;      }    }  }  return lastVisibleItemPosition;}  }
class C{  public FixedWidthTextTableReader(FixedWidthTextTableSchema schema){  super.setHasHeader(false);  m_schema=schema;}  }
class C{  public void disconnect(final IProject project,final boolean disconnectServer){  Check.notNull(project,"project");  log.info(MessageFormat.format("Moving project {0} offline from TFS server",project.getName()));  waitForManagerStartup();  try {    project.setPersistentProperty(REPOSITORY_STATUS_KEY,REPOSITORY_STATUS_OFFLINE_VALUE);  } catch (  final CoreException e) {    log.error(MessageFormat.format("Could not set offline status for project {0}",project.getName()),e);  }synchronized (projectDataLock) {    final ProjectRepositoryData projectData=projectDataMap.get(project);    if (projectData == null) {      log.error(MessageFormat.format("Project Manager does not contain project {0} (while disconnecting)",project.getName()));      return;    }    TFSRepository projectRepository;synchronized (projectData) {      if (projectData.getStatus() != ProjectRepositoryStatus.ONLINE) {        log.error(MessageFormat.format("Project Manager not online for project {0} (while disconnecting)",project.getName()));        return;      }      projectRepository=projectData.getRepository();      if (projectRepository == null) {        log.error(MessageFormat.format("Project Manager does not contain repository for project {0} (while disconnecting)",project.getName()));        return;      }      projectData.setStatus(ProjectRepositoryStatus.OFFLINE);      disconnectRepository(project,projectRepository,true,disconnectServer);    }    TFSEclipseClientPlugin.getDefault().getResourceDataManager().removeProject(projectRepository,project);    ((ProjectRepositoryManagerListener)listeners.getListener()).onProjectDisconnected(project);  }}  }
class C{  public InverseDecay(double tau,double alpha){  setTau(tau);  setAlpha(alpha);}  }
class C{  public static boolean isUpperCaseLetter(int c){  return (c >= 65 && c <= 90);}  }
class C{  public void close(){  while (!mReceivers.isEmpty()) {    mContext.unregisterReceiver(mReceivers.remove(0));  }  if (mOutputWriter != null) {    try {      mOutputWriter.close();    } catch (    IOException e) {      Log.w(mTag,"Test output file could not be closed",e);    }  }}  }
class C{  @Override public int last(){  CharacterIterator t=getText();  t.setIndex(t.getEndIndex());  return t.getIndex();}  }
class C{  public int nextInt(double theMean){  RandomEngine gen=this.randomGenerator;  double my=theMean;  double t, g, my_k;  double gx, gy, px, py, e, x, xx, delta, v;  int sign;  double u;  int k, i;  if (my < SWITCH_MEAN) {    if (my != my_old) {      my_old=my;      llll=0;      p=Math.exp(-my);      q=p;      p0=p;    }    m=(my > 1.0) ? (int)my : 1;    for (; ; ) {      u=gen.raw();      k=0;      if (u <= p0)       return (k);      if (llll != 0) {        i=(u > 0.458) ? Math.min(llll,m) : 1;        for (k=i; k <= llll; k++)         if (u <= pp[k])         return (k);        if (llll == 35)         continue;      }      for (k=llll + 1; k <= 35; k++) {        p*=my / (double)k;        q+=p;        pp[k]=q;        if (u <= q) {          llll=k;          return (k);        }      }      llll=35;    }  } else   if (my < MEAN_MAX) {    int Dk, X, Y;    double Ds, U, V, W;    m=(int)my;    if (my != my_last) {      my_last=my;      Ds=Math.sqrt(my + 0.25);      k2=(int)Math.ceil(my - 0.5 - Ds);      k4=(int)(my - 0.5 + Ds);      k1=k2 + k2 - m + 1;      k5=k4 + k4 - m;      dl=(double)(k2 - k1);      dr=(double)(k5 - k4);      r1=my / (double)k1;      r2=my / (double)k2;      r4=my / (double)(k4 + 1);      r5=my / (double)(k5 + 1);      ll=Math.log(r1);      lr=-Math.log(r5);      l_my=Math.log(my);      c_pm=m * l_my - Arithmetic.logFactorial(m);      f2=f(k2,l_my,c_pm);      f4=f(k4,l_my,c_pm);      f1=f(k1,l_my,c_pm);      f5=f(k5,l_my,c_pm);      p1=f2 * (dl + 1.0);      p2=f2 * dl + p1;      p3=f4 * (dr + 1.0) + p2;      p4=f4 * dr + p3;      p5=f1 / ll + p4;      p6=f5 / lr + p5;    }    for (; ; ) {      if ((U=gen.raw() * p6) < p2) {        if ((V=U - p1) < 0.0)         return (k2 + (int)(U / f2));        if ((W=V / dl) < f1)         return (k1 + (int)(V / f1));        Dk=(int)(dl * gen.raw()) + 1;        if (W <= f2 - Dk * (f2 - f2 / r2)) {          return (k2 - Dk);        }        if ((V=f2 + f2 - W) < 1.0) {          Y=k2 + Dk;          if (V <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {            return (Y);          }          if (V <= f(Y,l_my,c_pm))           return (Y);        }        X=k2 - Dk;      } else       if (U < p4) {        if ((V=U - p3) < 0.0)         return (k4 - (int)((U - p2) / f4));        if ((W=V / dr) < f5)         return (k5 - (int)(V / f5));        Dk=(int)(dr * gen.raw()) + 1;        if (W <= f4 - Dk * (f4 - f4 * r4)) {          return (k4 + Dk);        }        if ((V=f4 + f4 - W) < 1.0) {          Y=k4 - Dk;          if (V <= f4 + Dk * (1.0 - f4) / dr) {            return (Y);          }          if (V <= f(Y,l_my,c_pm))           return (Y);        }        X=k4 + Dk;      } else {        W=gen.raw();        if (U < p5) {          Dk=(int)(1.0 - Math.log(W) / ll);          if ((X=k1 - Dk) < 0)           continue;          W*=(U - p4) * ll;          if (W <= f1 - Dk * (f1 - f1 / r1))           return (X);        } else {          Dk=(int)(1.0 - Math.log(W) / lr);          X=k5 + Dk;          W*=(U - p5) * lr;          if (W <= f5 - Dk * (f5 - f5 * r5))           return (X);        }      }      if (Math.log(W) <= X * l_my - Arithmetic.logFactorial(X) - c_pm)       return (X);    }  } else {    return (int)my;  }}  }
class C{  public static IndexedImage load(byte[] data){  try {    DataInputStream input=new DataInputStream(new ByteArrayInputStream(data));    int width=input.readShort();    int height=input.readShort();    int[] palette=new int[input.readByte() & 0xff];    int plen=palette.length;    for (int iter=0; iter < plen; iter++) {      palette[iter]=input.readInt();    }    byte[] arr=new byte[width * height];    input.readFully(arr);    return new IndexedImage(width,height,palette,arr);  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }}  }
class C{  public void postConcat(ColorMatrix postmatrix){  setConcat(postmatrix,this);}  }
class C{  void stop(){  if (mRunning) {    mTriggerPercentage=0;    mFinishTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=false;    mParent.postInvalidate();  }}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  final boolean oldDone=entity.done;  entity.done=false;  final boolean result=super.isValidEntity(entity,game,useValidNonInfantryCheck);  entity.done=oldDone;  return result;}  }
class C{  public final int drain(IAspectType type,int desiredAmount){  int amount=this.get(type);  if (desiredAmount >= amount) {    this.set(type,0);    return amount;  }  this.set(type,amount - desiredAmount);  return desiredAmount;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.706 -0500",hash_original_method="3B9D2CCD4E7B33665C76FD82482A168C",hash_generated_method="77C9E7EAB50AAC2444DC02FE5474559C") private void appendPendingOperationLocked(PendingOperation op){  if (DEBUG_FILE)   Log.v(TAG,"Appending to " + mPendingFile.getBaseFile());  FileOutputStream fos=null;  try {    fos=mPendingFile.openAppend();  } catch (  java.io.IOException e) {    if (DEBUG_FILE)     Log.v(TAG,"Failed append; writing full file");    writePendingOperationsLocked();    return;  }  try {    Parcel out=Parcel.obtain();    writePendingOperationLocked(op,out);    fos.write(out.marshall());    out.recycle();  } catch (  java.io.IOException e1) {    Log.w(TAG,"Error writing pending operations",e1);  } finally {    try {      fos.close();    } catch (    java.io.IOException e2) {    }  }}  }
class C{  @Override public void checkStateChanged(CheckStateChangedEvent event){  GefaehrdungsUmsetzung gefaehrdungsUmsetzung=(GefaehrdungsUmsetzung)event.getElement();  Integer raListDbId=getRiskAnalysisWizard().getFinishedRiskAnalysisLists().getDbId();  if (event.getChecked()) {    try {      NegativeEstimateGefaehrdung command=new NegativeEstimateGefaehrdung(raListDbId,gefaehrdungsUmsetzung,getRiskAnalysisWizard().getFinishedRiskAnalysis());      command=ServiceFactory.lookupCommandService().executeCommand(command);      getRiskAnalysisWizard().setFinishedRiskLists(command.getRaList());    } catch (    Exception e) {      LOG.error("Error while selecting",e);      ExceptionUtil.log(e,Messages.EstimateGefaehrdungPage_8);    }  } else {    try {      PositiveEstimateGefaehrdung command=new PositiveEstimateGefaehrdung(raListDbId,gefaehrdungsUmsetzung,getRiskAnalysisWizard().getFinishedRiskAnalysis());      command=ServiceFactory.lookupCommandService().executeCommand(command);      if (command.getLists() != null) {        getRiskAnalysisWizard().setFinishedRiskLists(command.getLists());      }    } catch (    Exception e) {      LOG.error("Error while deselecting",e);      ExceptionUtil.log(e,Messages.EstimateGefaehrdungPage_9);    }  }  ((RiskAnalysisWizard)getWizard()).setCanFinish(false);  checkPageComplete();}  }
class C{  public Vector3f interpolate(Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * this.z + changeAmnt * finalVec.z;  return this;}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  AxisState info=new AxisState(cursor);  if (isVisible()) {    info=super.draw(g2,cursor,plotArea,dataArea,edge,plotState);  }  if (this.gridBandsVisible) {    drawGridBands(g2,plotArea,dataArea,edge,info.getTicks());  }  return info;}  }
class C{  public static int flip(int type,int data){  return rotate90(type,rotate90(type,data));}  }
class C{  public TermVectorsRequest offsets(boolean offsets){  setFlag(Flag.Offsets,offsets);  return this;}  }
class C{  public JettySolrRunner startJettySolrRunner(String name,String hostContext,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class<? extends Filter>,String> extraRequestFilters,SSLConfig sslConfig) throws Exception {  return startJettySolrRunner(name,hostContext,JettyConfig.builder().withServlets(extraServlets).withFilters(extraRequestFilters).withSSLConfig(sslConfig).build());}  }
class C{  public String removeSuffix(String original,String suffix){  if (original.endsWith(suffix)) {    return original.substring(0,original.length() - suffix.length());  }  return original;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  private boolean passesMillerRabin(int iterations,Random rnd){  BigInteger thisMinusOne=this.subtract(ONE);  BigInteger m=thisMinusOne;  int a=m.getLowestSetBit();  m=m.shiftRight(a);  if (rnd == null) {    rnd=ThreadLocalRandom.current();  }  for (int i=0; i < iterations; i++) {    BigInteger b;    do {      b=new BigInteger(this.bitLength(),rnd);    } while (b.compareTo(ONE) <= 0 || b.compareTo(this) >= 0);    int j=0;    BigInteger z=b.modPow(m,this);    while (!((j == 0 && z.equals(ONE)) || z.equals(thisMinusOne))) {      if (j > 0 && z.equals(ONE) || ++j == a)       return false;      z=z.modPow(TWO,this);    }  }  return true;}  }
class C{  public JLabel createLabel(String text,int x,int y,int width,int fontSize,Color color){  JLabel label=new JLabel(text);  label.setForeground(color);  label.setBounds(x,y,width,20);  label.setFont(new Font("Arial",0,fontSize));  this.add(label);  return label;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendArea=SerialUtilities.readShape(stream);}  }
class C{  public int increment(){  assert (error == null);  return isPair ? 2 : 1;}  }
class C{  public static void showErrorNotification(Project project,String text){  showNotification(project,MessageType.ERROR,text);}  }
class C{  private void checkLogFolder(){  File folder=new File(folderPath);  if (!folder.exists()) {    folder.mkdirs();  }}  }
class C{  public Tasks<VolumeRestRep> changeVirtualArrayForVolumes(VolumeVirtualArrayChangeParam input){  return postTasks(input,baseUrl + "/varray-change");}  }
class C{  public void disable(){  setEnabled(false);}  }
class C{  public int indexOf(ZonedDateTime date){  for (int i=this.data.size(); i > 0; i--) {    CandleItem item=(CandleItem)this.data.get(i - 1);    if (date.isAfter(item.getPeriod().getEnd())) {      return -1;    }    if ((date.isAfter(item.getPeriod().getStart()) || date.equals(item.getPeriod().getStart())) && (date.isBefore(item.getPeriod().getEnd()) || date.equals(item.getPeriod().getEnd()))) {      return i - 1;    }  }  return -1;}  }
class C{  public static <A>MaybeTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public List<LoanTransaction> reverseExistingTransactionsTillLastDisbursal(LocalDate actualDisbursementDate){  final List<LoanTransaction> reversedTransactions=new ArrayList<>();  for (  final LoanTransaction transaction : this.loanTransactions) {    if ((actualDisbursementDate.equals(transaction.getTransactionDate()) || actualDisbursementDate.isBefore(transaction.getTransactionDate())) && transaction.isAllowTypeTransactionAtTheTimeOfLastUndo()) {      reversedTransactions.add(transaction);      transaction.reverse();    }  }  return reversedTransactions;}  }
class C{  public void testGetSquare() throws ChessParseError {  assertEquals(Position.getSquare(0,0),TextIO.getSquare("a1"));  assertEquals(Position.getSquare(1,7),TextIO.getSquare("b8"));  assertEquals(Position.getSquare(3,3),TextIO.getSquare("d4"));  assertEquals(Position.getSquare(4,3),TextIO.getSquare("e4"));  assertEquals(Position.getSquare(3,1),TextIO.getSquare("d2"));  assertEquals(Position.getSquare(7,7),TextIO.getSquare("h8"));}  }
class C{  public void dispatch(UnsolicitedNotificationListener listener){  listener.notificationReceived(this);}  }
class C{  public static String wrap(String str,int wrapTextLength){  if (wrapTextLength <= 0)   return str;  StringBuilder rtn=new StringBuilder();  String ls=SystemUtil.getOSSpecificLineSeparator();  Array arr=ListUtil.listToArray(str,ls);  int len=arr.size();  for (int i=1; i <= len; i++) {    rtn.append(wrapLine(Caster.toString(arr.get(i,""),""),wrapTextLength));    if (i + 1 < len)     rtn.append(ls);  }  return rtn.toString();}  }
class C{  private static void loadMissingRsrcsIntoCache(ServiceContext context,String protocol,String requestRemoteAddr,TempRsrc[] rsrcsToLoad,LoadLock rsrcsLoadLock,LoadLock rsrcsWaitLock) throws IOException {  CacheStructure cache=context.cache;  boolean isHttps=context.isHttps;  String url=context.url;  ConfigData configData=context.configData;  if (rsrcsLoadLock.getCount() > 0) {    loadMissingRsrcs(context,rsrcsToLoad,isHttps,protocol,rsrcsLoadLock);    try {      if (configData.isDebug)       System.out.println("Start waiting for rsrcLoadLock, " + url);      rsrcsLoadLock.waitUntilCountIs0();      if (configData.isDebug)       System.out.println("End waiting for rsrcLoadLock, " + url);    } catch (    InterruptedException e) {    }    for (    RsrcIfc r : rsrcsToLoad) {      if (!(r instanceof TempRsrc))       continue;      TempRsrc tr=(TempRsrc)r;      if (tr.exchange == null)       continue;      if (tr.exchange.getResponseStatus() == 200 && CacheUtils.isStateFull(tr.url,tr.exchange,false,configData)) {        tr.isStateFull=true;        continue;      }      if (_isWithIframe && !context.isRouter && tr.exchange.getResponseStatus() == 200 && tr.replacer instanceof JsRsrc && !context.isIE8 && configData.isContentFirst(tr.url,false))       tr.exchange.handleLocationUpdates();      if (tr.exchange.isCommFailure())       reportUnhealthyContentServer(tr.exchange.getContentServerAddress());      if (tr.isBeingRefreshed && tr.exchange.getResponseStatus() == 304) {        long maxAge=CacheUtils.maxAgeOf(tr.exchange,!tr.isStateFull,configData);        endRefreshAndNotifyWaiters(tr.exchange,tr,null,maxAge,configData);        tr.exchange=null;        if (configData.isDebug)         System.out.println("URL: " + tr.url + " from ip: "+ requestRemoteAddr+ " (refreshed)");      } else       if (tr.exchange.getResponseStatus() == 200 && tr.exchange.getUngzipedResponseContent() != null) {        tr.replacer.host=tr.host;        tr.replacer.variant=CacheUtils.NON_PAGE_VARIANT;        tr.replacer.url=tr.url;        tr.replacer.origData=tr.exchange.getUngzipedResponseContent();        tr.replacer.httpHeaders=tr.exchange.getResponseHeaders();        if (tr.exchange.isGziped()) {          tr.replacer.origGzip=tr.exchange.getResponseContent();          tr.replacer.origGzipEncoding="gzip";        } else         if (tr.exchange.isDeflated()) {          tr.replacer.origGzip=tr.exchange.getResponseContent();          tr.replacer.origGzipEncoding="deflate";        } else         if (tr.replacer instanceof JsRsrc || tr.replacer instanceof CssRsrc) {          if (!tr.exchange.isGziped() && !tr.exchange.isDeflated() && tr.exchange.getUngzipedResponseContent().length >= MIN_GZIP_LEN) {            tr.replacer.origGzip=toGzip(tr.replacer.origData);            tr.replacer.origGzipEncoding="gzip";          }        }        if (tr.replacer instanceof ImageRsrc) {          ImageRsrc ir=(ImageRsrc)tr.replacer;          String mime=new ImageAnalyzer(ir.origData).getMime();          if (mime != null) {            tr.replacer.versionUrl=CacheUtils.versionUrlOf(context.host,tr.url,CacheUtils.NON_PAGE_VARIANT,ir.origData,tr.exchange,configData);            if (configData.jpegMin >= 0 && ir.origData.length >= configData.jpegMin && mime.endsWith("jpeg")) {              ir.origData=ImageUtils.optimizedJpeg(ir.origData,configData);              ir.isOptimized=true;            }            ir.base64Data=("data:" + mime + ";base64,"+ ImageUtils.encode(ir.origData)).getBytes();          }        } else         if (tr.replacer instanceof JsRsrc) {          tr.replacer.versionUrl=CacheUtils.versionUrlOf(context.host,tr.url,CacheUtils.NON_PAGE_VARIANT,tr.replacer.origData,tr.exchange,configData);          JsRsrc jsRsrc=(JsRsrc)tr.replacer;          jsRsrc.isInIEComment=tr.isInIEComment;          jsRsrc.checkInlinable(configData);        } else         if (tr.replacer instanceof CssRsrc) {          CssRsrc cssRsrc=(CssRsrc)tr.replacer;          cssRsrc.isInIEComment=tr.isInIEComment;          cssRsrc.url=tr.url;          cssRsrc.checkInlinable(configData);        }        long maxAge=CacheUtils.maxAgeOf(tr.exchange,!tr.isStateFull,configData);        tr.replacer.lastRefreshTime=System.currentTimeMillis();        tr.replacer.maxFreshTime=tr.replacer.lastRefreshTime + maxAge * 1000;        tr.replacer.origEtag=(tr.exchange.getEtagIndex() >= 0 ? tr.exchange.getResponseHeaders()[tr.exchange.getEtagIndex() + 1] : null);        tr.replacer.origLastModified=(tr.exchange.getLastModifiedIndex() >= 0 ? tr.exchange.getResponseHeaders()[tr.exchange.getLastModifiedIndex() + 1] : null);        tr.replacer.origMd5=CacheUtils.md5Of(tr.replacer.origData);        if (tr.replacer.versionUrl != null)         tr.replacer.versionUrlBytes=tr.replacer.versionUrl.getBytes();      }    }synchronized (cache.globalLock) {      for (      RsrcIfc r : rsrcsToLoad) {        if (!(r instanceof TempRsrc))         continue;        TempRsrc tr=(TempRsrc)r;        if (tr.exchange != null && !tr.isStateFull && tr.exchange.getResponseStatus() == 200 && tr.exchange.getUngzipedResponseContent() != null) {          putInCache(tr.replacer.variant,tr.replacer.url,tr.replacer,configData);          if (tr.replacer.versionUrl != null)           putInCache(tr.replacer.variant,tr.replacer.versionUrl,tr.replacer,configData);          tr.replacer.isBeingLoaded=false;          if (tr.isBeingRefreshed && configData.isDebug)           System.out.println("URL: " + tr.url + " from ip: "+ requestRemoteAddr+ " (refreshed - modified)");        } else {          if (tr.isBeingRefreshed) {synchronized (cache.globalLock) {              tr.isBeingRefreshed=false;              Rsrc rsrc=tr.replacer;              rsrc.isBeingLoaded=false;              rsrc.lastRefreshTime=System.currentTimeMillis();              rsrc.maxFreshTime=rsrc.lastRefreshTime + 60 * 1000;              putInCache(CacheUtils.NON_PAGE_VARIANT,tr.url,rsrc,configData);            }          } else {            removeFromCache(CacheUtils.NON_PAGE_VARIANT,tr.url,configData);            if (tr.replacer.versionUrl != null)             removeFromCache(CacheUtils.NON_PAGE_VARIANT,tr.replacer.versionUrl,configData);            if (tr.isStateFull)             cache.addStateFull(tr.url);          }        }        if (tr.waiters != null) {          for (          LoadLock w : tr.waiters)           w.decCount();          tr.waiters=null;        }        tr.exchange=null;      }    }  }  try {    if (rsrcsWaitLock != null) {      if (configData.isDebug)       System.out.println("Start waiting for rsrcWaitLock, " + url);      rsrcsWaitLock.waitUntilCountIs0();      if (configData.isDebug)       System.out.println("End waiting for rsrcWaitLock, " + url);    }  } catch (  InterruptedException e) {  }}  }
class C{  public SplineColormap(int[] xKnots,int[] yKnots){  this.xKnots=xKnots;  this.yKnots=yKnots;  numKnots=xKnots.length;  rebuildGradient();}  }
class C{  public void addHelpMenu(String ref,boolean direct){  JMenuBar bar=getJMenuBar();  if (bar == null) {    bar=new JMenuBar();  }  bar.add(new WindowMenu(this));  jmri.util.HelpUtil.helpMenu(bar,ref,direct);  setJMenuBar(bar);}  }
class C{  public CActionReportBug(final JFrame parent){  super("Report a Bug");  m_parent=Preconditions.checkNotNull(parent,"IE01847: Parent argument can not be null");}  }
class C{  public void handleMouseDragged(ChartCanvas canvas,MouseEvent e){  if (this.panLast == null) {    canvas.clearLiveHandler();    return;  }  JFreeChart chart=canvas.getChart();  double dx=e.getX() - this.panLast.getX();  double dy=e.getY() - this.panLast.getY();  if (dx == 0.0 && dy == 0.0) {    return;  }  double wPercent=-dx / this.panW;  double hPercent=dy / this.panH;  boolean old=chart.getPlot().isNotify();  chart.getPlot().setNotify(false);  Pannable p=(Pannable)chart.getPlot();  PlotRenderingInfo info=canvas.getRenderingInfo().getPlotInfo();  if (p.getOrientation().isVertical()) {    p.panDomainAxes(wPercent,info,this.panLast);    p.panRangeAxes(hPercent,info,this.panLast);  } else {    p.panDomainAxes(hPercent,info,this.panLast);    p.panRangeAxes(wPercent,info,this.panLast);  }  this.panLast=new Point2D.Double(e.getX(),e.getY());  chart.getPlot().setNotify(old);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public TempCluster(double dist,TempCluster a,TempCluster b){  this.dist=dist;  this.children.add(a);  this.children.add(b);  this.childrenTotal=a.totalElements() + b.totalElements();  this.aggregate=this.childrenTotal / dist;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.558 -0500",hash_original_method="A3B835CD89D15A13CD365E547F38E002",hash_generated_method="1C0143F5B519E6A20A126F40B2CE8261") public void print(long lnum){  print(String.valueOf(lnum));}  }
class C{  public boolean hitObject(Object object,DrawInfo2D info){  if (lastPos == null)   return false;  for (int i=0; i < numLinks; i++)   if (lastPos[i] != null) {    Ellipse2D.Double ellipse=new Ellipse2D.Double(info.draw.x + info.draw.width * (lastPos[i].x - lastPos[0].x),info.draw.y + info.draw.height * (lastPos[i].y - lastPos[0].y),info.draw.width,info.draw.height);    if (ellipse.intersects(info.clip.x,info.clip.y,info.clip.width,info.clip.height)) {      return true;    }  }  return false;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(Comparator<V> comparator){  return new ByValueSortingTreeMap<>(ByValueComparator.<K,V>create(comparator));}  }
class C{  public static double sinh(double x){  return (MathLib.exp(x) - MathLib.exp(-x)) * 0.5;}  }
class C{  public void clearDraggedOperators(){  this.draggedOperators=Collections.unmodifiableList(Collections.<Operator>emptyList());}  }
class C{  public CActionExpandSelection(final ZyGraph graph){  super("Expand Selection");  m_graph=graph;}  }
class C{  @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=mSearchManager.getSuggestions(mSearchable,query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  public void testAddOneServletInitParam() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <servlet>"+ "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServletInitParam(webXml,"s1","s1param1","s1param1value");  List<String> initParams=WebXmlUtils.getServletInitParamNames(webXml,"s1");  assertEquals(1,initParams.size());  assertEquals("s1param1",initParams.get(0));}  }
class C{  public void commit() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;case N4JSPackage.N4_SETTER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)null);return;case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:setAnnotationList((N4MemberAnnotationList)null);return;}super.eUnset(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.754 -0500",hash_original_method="18B11B5534C55393394DE082DEBB04D1",hash_generated_method="4ECF035CED64D7ED29B061772970C9A9") public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  public void updateScrollBars(){  if (vertical != null && visibleLines != 0) {    vertical.setValues(firstLine,visibleLines,0,getLineCount());    vertical.setUnitIncrement(2);    vertical.setBlockIncrement(visibleLines);  }  int width=painter.getWidth();  if (horizontal != null && width != 0) {    horizontal.setValues(-horizontalOffset,width,0,width * 5);    horizontal.setUnitIncrement(painter.getFontMetrics().charWidth('w'));    horizontal.setBlockIncrement(width / 2);  }}  }
class C{  public ByteBuffer readBinary() throws TException {  int length=readVarint32();  checkStringReadLength(length);  if (length == 0)   return ByteBuffer.wrap(new byte[0]);  if (trans_.getBytesRemainingInBuffer() >= length) {    ByteBuffer bb=ByteBuffer.wrap(trans_.getBuffer(),trans_.getBufferPosition(),length);    trans_.consumeBuffer(length);    return bb;  }  byte[] buf=new byte[length];  trans_.readAll(buf,0,length);  return ByteBuffer.wrap(buf);}  }
class C{  public void receivedPing(ClientProxyMembershipID proxyID){  if (this._clientMonitor == null) {    return;  }  if (logger.isTraceEnabled()) {    logger.trace("ClientHealthMonitor: Received ping from client with member id {}",proxyID);  }synchronized (_clientHeartbeatsLock) {    if (!this._clientHeartbeats.containsKey(proxyID)) {      registerClient(proxyID);    } else {      this._clientHeartbeats.put(proxyID,Long.valueOf(System.currentTimeMillis()));    }  }}  }
class C{  public JSON processQuery(String query) throws IOException {  log("MQL",Level.FINEST,query);  URL get=null;  if (KEY.isEmpty()) {    get=new URL(query);  } else {    get=new URL(query + "&key=" + KEY);  }  Reader reader=new InputStreamReader(get.openStream(),"UTF-8");  StringWriter output=new StringWriter();  int next=reader.read();  while (next != -1) {    output.write(next);    next=reader.read();  }  String result=output.toString();  log("JSON",Level.FINEST,result);  return JSONSerializer.toJSON(result);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)(outBuff);      return 3;    } catch (    Exception e) {      System.out.println("" + source[srcOffset] + ": "+ (DECODABET[source[srcOffset]]));      System.out.println("" + source[srcOffset + 1] + ": "+ (DECODABET[source[srcOffset + 1]]));      System.out.println("" + source[srcOffset + 2] + ": "+ (DECODABET[source[srcOffset + 2]]));      System.out.println("" + source[srcOffset + 3] + ": "+ (DECODABET[source[srcOffset + 3]]));      return -1;    }  }}  }
class C{  @PUT public Annotation store(@PathParam(PROJECT_PARAM_NAME) String projectId,@PathParam(ANNOTATION_PARAM_NAME) String annotationId,Annotation annotation){  return delegate.store(userContext,annotation);}  }
class C{  private void enterBusy() throws IOException {  if (closeGuard.get())   throw new IOException("File system is stopped.");}  }
class C{  public static String toCeylonModuleName(String name){  return getModuleNameFromUri(name).replace(':','.');}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public static <U,I>Object2DoubleMap<I> calculateNorm(Stream<Recommendation<U,I>> recommendations){  return recommendations.parallel().flatMap(null).collect(null,null,null);}  }
class C{  private Boolean createNtpShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare,String forceGroup) throws NetAppCException {  String shareId=null;  String portGroup=findSVMName(args.getFs());  NetAppClusterApi ncApi=new NetAppClusterApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).svm(portGroup).build();  shareId=smbFileShare.getPath();  _log.info("NetAppClusterModeDevice doShare for {} with id {}",shareId,args.getFileObjId());  if (!ncApi.doShare(shareId,smbFileShare.getName(),smbFileShare.getDescription(),smbFileShare.getMaxUsers(),smbFileShare.getPermission(),forceGroup)) {    _log.info("NetAppClusterModeDevice doShare for {} with id {} - failed",shareId,args.getFileObjId());    return false;  } else {    if (!ncApi.modifyShare(shareId,smbFileShare.getName(),smbFileShare.getDescription(),smbFileShare.getMaxUsers(),smbFileShare.getPermission(),forceGroup)) {      doDeleteShare(storage,args,smbFileShare);      _log.info("NetAppClusterModeDevice doShare for {} with id {} - failed",shareId,args.getFileObjId());      return false;    } else {      smbFileShare.setNativeId(shareId);      List<CifsAcl> existingAcls=new ArrayList<CifsAcl>();      CifsAcl defaultAcl=new CifsAcl();      defaultAcl.setUserName("everyone");      defaultAcl.setAccess(CifsAccess.full);      existingAcls.add(defaultAcl);      ncApi.deleteCIFSShareAcl(smbFileShare.getName(),existingAcls);      smbFileShare.setNetBIOSName(ncApi.getNetBiosName());      _log.info("NetAppClusterModeDevice doShare for {} with id {} - complete",shareId,args.getFileObjId());      return true;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ColorRule(final String expression,final Rule rule,final Color backgroundColor,final Color foregroundColor){  super();  this.expression=expression;  this.rule=rule;  this.backgroundColor=backgroundColor;  this.foregroundColor=foregroundColor;}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  boolean local, global;  local=mDPM.getStorageEncryption(mDeviceAdminSample);  global=mDPM.getStorageEncryption(null);  mRequireEncryption.setSummary(localGlobalSummary(local,global));  int deviceStatusCode=mDPM.getStorageEncryptionStatus();  String deviceStatus=statusCodeToString(deviceStatusCode);  String status=mActivity.getString(R.string.status_device_encryption,deviceStatus);  mActivateEncryption.setSummary(status);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"OPERATORS\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"NAME\" TEXT,"+ "\"OUTER_ID\" INTEGER);");}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCT_FIELD;}  }
class C{  private JedisPool jedisPoolFromServerAndPort(final String hostAndPort){  Matcher matcher=SERVER_FORMAT.matcher(hostAndPort);  if (!matcher.matches()) {    throw new InvalidServerFormatException(hostAndPort);  }  return new JedisPool(matcher.group(1),Integer.valueOf(matcher.group(2)));}  }
class C{  public static double insertRandom(Map61B<String,Integer> map61B,int N,int L){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.randomString(L);    map61B.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
class C{  public static IStatus createStatus(int severity,int code,String message,Throwable exception){  return new Status(severity,CorePlugin.PLUGIN_ID,code,message,exception);}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,int[] result,int[] resultSpan){  return findNearestArea(pixelX,pixelY,minSpanX,minSpanY,spanX,spanY,true,result,resultSpan);}  }
class C{  public void fireSessionEvent(SessionEvent event,boolean restamp){  if (restamp && event.getSource() != this.source) {    event=new SessionEvent(this.source,event);  }  for (int i=0; i < sessionListeners.size(); i++) {    SessionListener l=(SessionListener)sessionListeners.get(i);switch (event.getType()) {case SessionEvent.NODE_ADDED:      l.nodeAdded(event);    break;case SessionEvent.NODE_REMOVED:  l.nodeRemoved(event);break;case SessionEvent.PARENT_ADDED:l.parentAdded(event);break;case SessionEvent.PARENT_REMOVED:l.parentRemoved(event);break;case SessionEvent.MODEL_CREATED:l.modelCreated(event);break;case SessionEvent.MODEL_DESTROYED:l.modelDestroyed(event);break;case SessionEvent.MODEL_UNCLEAR:l.modelUnclear(event);break;case SessionEvent.EXECUTION_STARTED:l.executionStarted(event);break;case SessionEvent.REPETITION_CHANGED:l.repetitionChanged(event);break;case SessionEvent.ADDING_EDGE:l.addingEdge(event);break;default :throw new IllegalStateException("No such state: " + event.getType());}}}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  public String toString(){  return Name;}  }
class C{  public static BottomSheetDialog newInstance(@LayoutRes int layoutResId){  return newInstance(layoutResId,null);}  }
class C{  public ComboBoxArrowButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);  type=getButtonType(state);}  }
class C{  public boolean hasEulerianPath(){  return path != null;}  }
class C{  public DiscoveryNodeStatus status(){  return this.status;}  }
class C{  public static void main(String[] args){  GregorianCalendar calender=new GregorianCalendar();  System.out.print("\nCurrent year, month, and day in format Mth/Day/Year: ");  System.out.println(calender.get(calender.MONTH) + "/" + calender.get(calender.DAY_OF_MONTH)+ "/"+ calender.get(calender.YEAR));  calender.setTimeInMillis(1234567898765L);  System.out.print("\nElapsed time since January 1, 1970 set to " + "1234567898765L in format Mth/Day/Year: ");  System.out.println(calender.get(calender.MONTH) + "/" + calender.get(calender.DAY_OF_MONTH)+ "/"+ calender.get(calender.YEAR));}  }
class C{  public void validateAngleOffset(){  double newOffset;  try {    newOffset=Double.parseDouble(this.angleOffset.getText());  } catch (  NumberFormatException e) {    newOffset=this.angleOffsetValue;  }  this.angleOffsetValue=newOffset;  this.angleOffset.setText(Double.toString(this.angleOffsetValue));}  }
class C{  public HopcroftKarp(Graph G){  bipartition=new BipartiteX(G);  if (!bipartition.isBipartite()) {    throw new IllegalArgumentException("graph is not bipartite");  }  this.V=G.V();  mate=new int[V];  for (int v=0; v < V; v++)   mate[v]=UNMATCHED;  while (hasAugmentingPath(G)) {    Iterator<Integer>[] adj=(Iterator<Integer>[])new Iterator[G.V()];    for (int v=0; v < G.V(); v++)     adj[v]=G.adj(v).iterator();    for (int s=0; s < V; s++) {      if (isMatched(s) || !bipartition.color(s))       continue;      Stack<Integer> path=new Stack<Integer>();      path.push(s);      while (!path.isEmpty()) {        int v=path.peek();        if (!adj[v].hasNext())         path.pop(); else {          int w=adj[v].next();          if (!isLevelGraphEdge(v,w))           continue;          path.push(w);          if (!isMatched(w)) {            while (!path.isEmpty()) {              int x=path.pop();              int y=path.pop();              mate[x]=y;              mate[y]=x;            }            cardinality++;          }        }      }    }  }  inMinVertexCover=new boolean[V];  for (int v=0; v < V; v++) {    if (bipartition.color(v) && !marked[v])     inMinVertexCover[v]=true;    if (!bipartition.color(v) && marked[v])     inMinVertexCover[v]=true;  }  assert certifySolution(G);}  }
class C{  private static boolean implementsMap(ClassDescriptor d){  while (d != null) {    try {      if ("java.util.EnumMap".equals(d.getDottedClassName())) {        return false;      }      if ("java.util.Map".equals(d.getDottedClassName())) {        return true;      }      XClass classNameAndInfo=Global.getAnalysisCache().getClassAnalysis(XClass.class,d);      ClassDescriptor is[]=classNameAndInfo.getInterfaceDescriptorList();      d=classNameAndInfo.getSuperclassDescriptor();      for (      ClassDescriptor i : is) {        if ("java.util.Map".equals(i.getDottedClassName())) {          return true;        }      }    } catch (    CheckedAnalysisException e) {      d=null;    }  }  return false;}  }
class C{  public static <T>Flux<T> shuffle(Flux<T> flux,Random random){  return Flux.fromIterable(null);}  }
class C{  public static Object convertToArray(Object source,Class<?> target){  try {    Class<?> targetType=target.getComponentType();    if (source.getClass().isArray()) {      Object targetInstance=Array.newInstance(targetType,Array.getLength(source));      for (int i=0; i < Array.getLength(source); i++) {        Array.set(targetInstance,i,convert(Array.get(source,i),targetType));      }      return targetInstance;    }    if (source instanceof Collection<?>) {      Collection<?> sourceCollection=(Collection<?>)source;      Object targetInstance=Array.newInstance(target.getComponentType(),sourceCollection.size());      Iterator<?> it=sourceCollection.iterator();      int i=0;      while (it.hasNext()) {        Array.set(targetInstance,i++,convert(it.next(),targetType));      }      return targetInstance;    }  } catch (  Exception ex) {  }  return null;}  }
class C{  public static int[] randomArray(int size){  Random random=new Random();  int[] a=new int[size];  for (int i=0; i < a.length; i++) {    a[i]=random.nextInt(100);  }  return a;}  }
class C{  public SubscriptionMigrationExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public SelectionInputDialog(Window owner,String key,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){  super(owner,"input." + key,ModalityType.APPLICATION_MODAL,keyArguments);  this.inputValidator=inputValidator;  this.okButton=makeOkButton();  for (  T selectionValue : selectionValues) {    comboBox.addItem(selectionValue);  }  comboBox.setSelectedItem(initialSelectionValue);  initGui();}  }
class C{  public void resetGeoBlacklist(String vdcShortId){  InternalDbClient geoDbClient=(InternalDbClient)ctx.getBean("geodbclient");  List<URI> vdcList=geoDbClient.queryByType(VirtualDataCenter.class,true);  for (  URI vdcId : vdcList) {    VirtualDataCenter vdc=geoDbClient.queryObject(VirtualDataCenter.class,vdcId);    if (vdc.getShortId().equals(vdcShortId)) {      System.out.println("Remove black list for vdc: " + vdcShortId);      geoDbClient.removeVdcNodesFromBlacklist(vdc);      break;    }  }}  }
class C{  public void addNodeTest(PredicatedNodeTest test){  if (null == m_nodeTests) {    m_nodeTests=new PredicatedNodeTest[1];    m_nodeTests[0]=test;  } else {    PredicatedNodeTest[] tests=m_nodeTests;    int len=m_nodeTests.length;    m_nodeTests=new PredicatedNodeTest[len + 1];    System.arraycopy(tests,0,m_nodeTests,0,len);    m_nodeTests[len]=test;  }  test.exprSetParent(this);}  }
class C{  public String classValueIndexTipText(){  return "The class value index to use with information retrieval type metrics. A value < 0" + " indicates to use the class weighted average version of the metric.";}  }
class C{  public void checkBlocksizeS(final int value){  if (value > blocksize_S) {    this.blocksize_S=value;  }  this.countS++;  this.countC++;}  }
class C{  public NemRequestResult(final ValidationResult result){  this(TYPE_VALIDATION_RESULT,result.getValue(),result.toString());}  }
class C{  public void onContextChanged(Context context){  mNormalHelper.onContextChanged(context);  mIncognitoHelper.onContextChanged(context);}  }
class C{  public State handleAccept(AbstractActivity<?> conversation){  System.out.println("RememberActivityServer: acccepting");  ProposalConversation conv=(ProposalConversation)(AbstractActivity<ProposalConversation.State>)conversation;  Json msg=((Conversation<?>)conversation).getMessage();  Json handles=Json.array();  HGPeerIdentity peerId=getPeerInterface().getThisPeer().getIdentity(Messages.getSender(msg));  if (getThisPeer().getLog().registerRequest(peerId,last_version,current_version)) {    Json contents=msg.at(Messages.CONTENT);    for (    Json content : contents.asJsonList()) {      StorageService.Operation operation=StorageService.Operation.valueOf(content.at(Messages.OPERATION).asString());      HGHandle handle=null;      if (operation == StorageService.Operation.Create) {        StorageGraph subgraph=Messages.content(content);        handle=storage.addSubgraph(subgraph);      } else       if (operation == StorageService.Operation.Update) {        StorageGraph subgraph=Messages.content(content);        handle=storage.updateSubgraph(subgraph);      } else       if (operation == StorageService.Operation.Remove) {        handle=Messages.content(content);        storage.remove(handle);      } else       if (operation == StorageService.Operation.Copy) {        StorageGraph subgraph=Messages.content(content);        handle=storage.addOrReplaceSubgraph(subgraph);      }      handles.add(handle);    }    getThisPeer().getLog().finishRequest(peerId,last_version,current_version);    System.out.println("RememberActivityServer: remembered " + handles);    Json reply=getReply(msg);    reply.set(Messages.CONTENT,handles);    conv.confirm(reply);  } else {    Object reply=getReply(msg);    conv.disconfirm(reply);  }  return State.Done;}  }
class C{  public double transform(double value){  return value;}  }
class C{  public void addingEdge(SessionEvent event){  setEventId("addingEdge");}  }
class C{  boolean persistManagedSchema(boolean createOnly){  if (loader instanceof ZkSolrResourceLoader) {    return persistManagedSchemaToZooKeeper(createOnly);  }  File managedSchemaFile=new File(loader.getConfigDir(),managedSchemaResourceName);  OutputStreamWriter writer=null;  try {    File parentDir=managedSchemaFile.getParentFile();    if (!parentDir.isDirectory()) {      if (!parentDir.mkdirs()) {        final String msg="Can't create managed schema directory " + parentDir.getAbsolutePath();        log.error(msg);        throw new SolrException(ErrorCode.SERVER_ERROR,msg);      }    }    final FileOutputStream out=new FileOutputStream(managedSchemaFile);    writer=new OutputStreamWriter(out,StandardCharsets.UTF_8);    persist(writer);    log.info("Upgraded to managed schema at " + managedSchemaFile.getPath());  } catch (  IOException e) {    final String msg="Error persisting managed schema " + managedSchemaFile;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  } finally {    IOUtils.closeQuietly(writer);    try {      FileUtils.sync(managedSchemaFile);    } catch (    IOException e) {      final String msg="Error syncing the managed schema file " + managedSchemaFile;      log.error(msg,e);    }  }  return true;}  }
class C{  public AmqpReceiver(AmqpSession session,Source source,String receiverId){  if (source == null) {    throw new IllegalArgumentException("User specified Source cannot be null");  }  this.session=session;  this.userSpecifiedSource=source;  this.address=source.getAddress();  this.receiverId=receiverId;}  }
class C{  public static String extract(RevisionHandler handler){  return extract(handler.getRevision());}  }
class C{  public void jjtReplaceWith(Node newNode){  if (parent != null) {    parent.jjtReplaceChild(this,newNode);  }  for (  Node childNode : children) {    childNode.jjtSetParent(newNode);  }}  }
class C{  @Inject public MetadataDiscoveryResource(DiscoveryService discoveryService){  this.discoveryService=discoveryService;}  }
class C{  public void remove(String key){  mPreferences.edit().remove(key).apply();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String direction="n";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      direction=args[i].toLowerCase();    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("n")) {      weights=new double[]{0,-1,0,0,0,0,0,1,0};    } else     if (direction.equals("s")) {      weights=new double[]{0,1,0,0,0,0,0,-1,0};    } else     if (direction.equals("e")) {      weights=new double[]{0,0,0,1,0,-1,0,0,0};    } else     if (direction.equals("w")) {      weights=new double[]{0,0,0,-1,0,1,0,0,0};    } else     if (direction.equals("ne")) {      weights=new double[]{0,0,-1,0,0,0,1,0,0};    } else     if (direction.equals("nw")) {      weights=new double[]{-1,0,0,0,0,0,0,0,1};    } else     if (direction.equals("se")) {      weights=new double[]{1,0,0,0,0,0,0,0,-1};    } else {      weights=new double[]{0,0,1,0,0,0,-1,0,0};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void onUnpublish(String id){  delegate.onUnpublish(id);}  }
class C{  private byte identifyCorrectByteInFirstColumn(int i,boolean searchedForAllBytes) throws NoColumnFoundException {  if (searchedForAllBytes) {    if (correctBytes.size() == 1) {      return 10;    } else     if (correctBytes.size() > 1) {      iv[i]=(byte)(correctBytes.get(0) ^ 47);      CBCOracleRequest req=new CBCOracleRequest(iv,c1);      OracleResponse resp=m_Oracle.queryOracle(req);      if (resp.getResult() == OracleResponse.Result.VALID) {        return 13;      } else {        return 9;      }    } else {      throw new NoColumnFoundException("The column for this byte was not found properly. " + "This byte (" + i + ") should probably be padded");    }  } else {    iv[i]=(byte)(correctBytes.get(0) ^ 47);    CBCOracleRequest req=new CBCOracleRequest(iv,c1);    OracleResponse resp=m_Oracle.queryOracle(req);    if (resp.getResult() == OracleResponse.Result.VALID) {      iv[i]=(byte)(correctBytes.get(0) ^ 44);      req=new CBCOracleRequest(iv,c1);      resp=m_Oracle.queryOracle(req);      if (resp.getResult() == OracleResponse.Result.VALID) {        return 13;      } else {        return 10;      }    } else {      return 9;    }  }}  }
class C{  public Element store(Object o){  Element element=new Element("perform");  PerformActionModel g=(PerformActionModel)o;  element.setAttribute("name",g.getClassName());  element.setAttribute("type","Action");  element.setAttribute("class",this.getClass().getName());  Element property=new Element("property");  property.setAttribute("name","systemPrefix");  property.setAttribute("value",g.getSystemPrefix());  element.addContent(property);  return element;}  }
class C{  public PolynomialTerm findTerm(int[] variables){  for (  PolynomialTerm term1 : this.terms) {    if (term1.isVariableListEqual(variables)) {      return term1;    }  }  return null;}  }
class C{  public Matrix3f m00(float m00){  this.m00=m00;  return this;}  }
class C{  public static int lookupShaper(String name){  if (name == null) {    return NOWORDSHAPE;  } else   if (name.equalsIgnoreCase("dan1")) {    return WORDSHAPEDAN1;  } else   if (name.equalsIgnoreCase("chris1")) {    return WORDSHAPECHRIS1;  } else   if (name.equalsIgnoreCase("dan2")) {    return WORDSHAPEDAN2;  } else   if (name.equalsIgnoreCase("dan2useLC")) {    return WORDSHAPEDAN2USELC;  } else   if (name.equalsIgnoreCase("dan2bio")) {    return WORDSHAPEDAN2BIO;  } else   if (name.equalsIgnoreCase("dan2bioUseLC")) {    return WORDSHAPEDAN2BIOUSELC;  } else   if (name.equalsIgnoreCase("jenny1")) {    return WORDSHAPEJENNY1;  } else   if (name.equalsIgnoreCase("jenny1useLC")) {    return WORDSHAPEJENNY1USELC;  } else   if (name.equalsIgnoreCase("chris2")) {    return WORDSHAPECHRIS2;  } else   if (name.equalsIgnoreCase("chris2useLC")) {    return WORDSHAPECHRIS2USELC;  } else   if (name.equalsIgnoreCase("chris3")) {    return WORDSHAPECHRIS3;  } else   if (name.equalsIgnoreCase("chris3useLC")) {    return WORDSHAPECHRIS3USELC;  } else   if (name.equalsIgnoreCase("chris4")) {    return WORDSHAPECHRIS4;  } else {    return NOWORDSHAPE;  }}  }
class C{  public Set<OsmElement> findClickableElements(List<OsmElement> excludes){  Set<OsmElement> result=new HashSet<OsmElement>();  result.addAll(getDelegator().getCurrentStorage().getNodes());  result.addAll(getDelegator().getCurrentStorage().getWays());  for (  OsmElement e : excludes)   result.remove(e);  return result;}  }
class C{  public int length(){  return textLength;}  }
class C{  public KStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.295 -0500",hash_original_method="8C72E3409D1DFC404D9CBFEE30B178A0",hash_generated_method="20858A91C99B487A0D85DFA58E7B2379") private Phone(){}  }
class C{  void syncSummaryView(View view){  TextView summaryView=(TextView)view.findViewById(android.R.id.summary);  if (summaryView != null) {    boolean useDefaultSummary=true;    if (mChecked && !TextUtils.isEmpty(mSummaryOn)) {      summaryView.setText(mSummaryOn);      useDefaultSummary=false;    } else     if (!mChecked && !TextUtils.isEmpty(mSummaryOff)) {      summaryView.setText(mSummaryOff);      useDefaultSummary=false;    }    if (useDefaultSummary) {      final CharSequence summary=getSummary();      if (!TextUtils.isEmpty(summary)) {        summaryView.setText(summary);        useDefaultSummary=false;      }    }    int newVisibility=View.GONE;    if (!useDefaultSummary) {      newVisibility=View.VISIBLE;    }    if (newVisibility != summaryView.getVisibility()) {      summaryView.setVisibility(newVisibility);    }  }}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(6,4,new Insets(0,0,0,0),-1,-1));  final JLabel label1=new JLabel();  label1.setText("Server: ");  contentPanel.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  serverName=new JLabel();  serverName.setText("Label");  contentPanel.add(serverName,new GridConstraints(0,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  filter=new JTextField();  contentPanel.add(filter,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  refreshButton=new JButton();  refreshButton.setIcon(new ImageIcon(getClass().getResource("/actions/refresh.png")));  refreshButton.setText("");  contentPanel.add(refreshButton,new GridConstraints(1,3,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  scrollPane=new JScrollPane();  contentPanel.add(scrollPane,new GridConstraints(3,0,1,4,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  workItemTable.setFillsViewportHeight(true);  scrollPane.setViewportView(workItemTable);  newWorkItemLink=new Hyperlink();  newWorkItemLink.setText("Create a new work item...");  contentPanel.add(newWorkItemLink,new GridConstraints(5,0,1,4,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final Spacer spacer1=new Spacer();  contentPanel.add(spacer1,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  busySpinner=new BusySpinnerPanel();  contentPanel.add(busySpinner,new GridConstraints(1,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  helpPanel=new HelpPanel();  helpPanel.setHelpText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WitSelectDialog.Help.HelpText"));  helpPanel.setPopupText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WitSelectDialog.Help.Instructions"));  contentPanel.add(helpPanel,new GridConstraints(4,0,1,4,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));}  }
class C{  public static void print(byte x){  out.print(x);  out.flush();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private final void _writeStringSegment2(final char[] cbuf,int offset,final int end) throws IOException, JsonGenerationException {  if ((_outputTail + 6 * (end - offset)) > _outputEnd) {    _flushBuffer();  }  int outputPtr=_outputTail;  final byte[] outputBuffer=_outputBuffer;  final int[] escCodes=_outputEscapes;  while (offset < end) {    int ch=cbuf[offset++];    if (ch <= 0x7F) {      if (escCodes[ch] == 0) {        outputBuffer[outputPtr++]=(byte)ch;        continue;      }      int escape=escCodes[ch];      if (escape > 0) {        outputBuffer[outputPtr++]=BYTE_BACKSLASH;        outputBuffer[outputPtr++]=(byte)escape;      } else {        outputPtr=_writeGenericEscape(ch,outputPtr);      }      continue;    }    if (ch <= 0x7FF) {      outputBuffer[outputPtr++]=(byte)(0xc0 | (ch >> 6));      outputBuffer[outputPtr++]=(byte)(0x80 | (ch & 0x3f));    } else {      outputPtr=_outputMultiByteChar(ch,outputPtr);    }  }  _outputTail=outputPtr;}  }
class C{  private boolean checkProofOfWork(boolean throwException) throws VerificationException {  BigInteger target=getDifficultyTargetAsInteger();  BigInteger h=getHash().toBigInteger();  if (h.compareTo(target) > 0) {    if (throwException)     throw new VerificationException("Hash is higher than target: " + getHashAsString() + " vs "+ target.toString(16)); else     return false;  }  return true;}  }
class C{  protected ArrowFunctionImpl(){  super();}  }
class C{  private void updateChecksumAdj(ByteBuffer fontData){  int checksum=calculateChecksum("",fontData);  int checksumAdj=0xb1b0afba - checksum;  int offset=12 + (getNumTables() * 16);  for (Iterator i=tables.keySet().iterator(); i.hasNext(); ) {    String tagString=(String)i.next();    if (tagString.equals("head")) {      fontData.putInt(offset + 8,checksumAdj);      return;    }    Object tableObj=tables.get(tagString);    if (tableObj instanceof TrueTypeTable) {      offset+=((TrueTypeTable)tableObj).getLength();    } else {      offset+=((ByteBuffer)tableObj).remaining();    }    if ((offset % 4) != 0) {      offset+=(4 - (offset % 4));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.222 -0400",hash_original_method="87E4447E26C3107C6DF2678BD461EF96",hash_generated_method="B0D9B1E23058F28E118D0AED26ABE5C9") public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  private void grow(int minCapacity){  int oldCapacity=elementData.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity - minCapacity < 0)   newCapacity=minCapacity;  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  elementData=Arrays.copyOf(elementData,newCapacity);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  int actionMasked=MotionEventCompat.getActionMasked(ev);  if ((actionMasked & MotionEventCompat.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    activePointerId=MotionEventCompat.getPointerId(ev,actionMasked);  }  if (activePointerId == INVALID_POINTER) {    return false;  }  dragHelper.processTouchEvent(ev);  return isViewHit(dragView,(int)ev.getX(),(int)ev.getY()) || isViewHit(shadowView,(int)ev.getX(),(int)ev.getY());}  }
class C{  protected int addOffset(int i){  if (i >= this.length) {    throw new IndexOutOfBoundsException("Index out of bounds, index: " + i + ", length: "+ this.length);  }  return this.offset + i;}  }
class C{  private SipRequest createSubscribe() throws PayloadException {  try {    SipRequest subscribe=SipMessageFactory.createSubscribe(mDialogPath,0);    subscribe.addHeader(SipUtils.HEADER_PRIVACY,"id");    subscribe.addHeader(EventHeader.NAME,"presence");    subscribe.addHeader(AcceptHeader.NAME,"application/pidf+xml");    return subscribe;  } catch (  ParseException e) {    throw new PayloadException("Failed to create subscribe request!",e);  }}  }
class C{  public void testCommitMultiReader() throws Exception {  int numberOfEvents=25;  File logDir=prepareLogDir("testCommitMultiReader");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.prepare();  LogConnection conn=log.connect(false);  SimpleLogReader[] readers=new SimpleLogReader[25];  for (int r=0; r < readers.length; r++) {    readers[r]=new SimpleLogReader(log,LogConnection.FIRST,numberOfEvents);    Thread thread=new Thread(readers[r]);    thread.start();  }  long readTotalMillis=0;  for (int i=0; i < numberOfEvents; i++) {    THLEvent e=this.createTHLEvent(i);    conn.store(e,true);    long startMillis=System.currentTimeMillis();    for (int r=0; r < readers.length; r++) {      boolean found=readers[r].lastSeqno.waitSeqnoGreaterEqual(i,5000);      assertTrue("Found event: reader=" + r + " seqno="+ i,found);    }    long endMillis=System.currentTimeMillis();    long readMillis=endMillis - startMillis;    readTotalMillis+=readMillis;    if (i > 0 && i % 10 == 0) {      logger.info("Read subtotals: iteration=" + i + " readMillis="+ readMillis+ " avg readMillis="+ readTotalMillis / i);    }  }  logger.info("Read totals:  avg readMillis=" + readTotalMillis / 50 + " total readMillis=" + readTotalMillis);  for (int r=0; r < readers.length; r++) {    assertTrue("Reader is done",readers[r].waitFinish(1000));    if (readers[r].error != null) {      throw new Exception("Reader thread " + r + " failed with exception after "+ readers[r].eventsRead+ " events",readers[r].error);    }  }  log.release();}  }
class C{  public HexEditor(){  HexTableModel model=new HexTableModel(this);  table=new HexTable(this,model);  setViewportView(table);  setShowRowHeader(true);  setAlternateRowBG(false);  setAlternateColumnBG(false);  setHighlightSelectionInAsciiDump(true);  setHighlightSelectionInAsciiDumpColor(new Color(255,255,192));  setPadLowBytes(true);  setCellEditable(true);  setTransferHandler(DEFAULT_TRANSFER_HANDLER);}  }
class C{  public void clearState(W window) throws Exception {  executableTrigger.invokeClear(contextFactory.base(window,new TestTimers(windowNamespace(window)),executableTrigger,getFinishedSet(window)));}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_CLASS_ESCAPE_SEQUENCE;}  }
class C{  public static void applyActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Apply Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionApplyActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildApplyActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending ApplyActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  private void notifyTransactionContext(String transactionId,SipMessage msg){  SipTransactionContext ctx=mTransactions.get(transactionId);  if (ctx != null) {    removeTransactionContext(transactionId);    ctx.responseReceived(msg);  }}  }
class C{  public static void main(String[] argv){  runClassifier(new RandomCommittee(),argv);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureNumRules");  return newVector.elements();}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  double previous=state.getSeriesRunningTotal();  if (column == dataset.getColumnCount() - 1) {    previous=0.0;  }  double current=0.0;  Number n=dataset.getValue(row,column);  if (n != null) {    current=previous + n.doubleValue();  }  state.setSeriesRunningTotal(current);  int categoryCount=getColumnCount();  PlotOrientation orientation=plot.getOrientation();  double rectX=0.0;  double rectY=0.0;  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();  double j2dy0=rangeAxis.valueToJava2D(previous,dataArea,rangeAxisLocation);  double j2dy1=rangeAxis.valueToJava2D(current,dataArea,rangeAxisLocation);  double valDiff=current - previous;  if (j2dy1 < j2dy0) {    double temp=j2dy1;    j2dy1=j2dy0;    j2dy0=temp;  }  double rectWidth=state.getBarWidth();  double rectHeight=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));  Comparable seriesKey=dataset.getRowKey(row);  Comparable categoryKey=dataset.getColumnKey(column);  if (orientation == PlotOrientation.HORIZONTAL) {    rectY=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.LEFT);    rectX=j2dy0;    rectHeight=state.getBarWidth();    rectY=rectY - rectHeight / 2.0;    rectWidth=Math.max(getMinimumBarLength(),Math.abs(j2dy1 - j2dy0));  } else   if (orientation == PlotOrientation.VERTICAL) {    rectX=domainAxis.getCategorySeriesMiddle(categoryKey,seriesKey,dataset,getItemMargin(),dataArea,RectangleEdge.TOP);    rectX=rectX - rectWidth / 2.0;    rectY=j2dy0;  }  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);  Paint seriesPaint;  if (column == 0) {    seriesPaint=getFirstBarPaint();  } else   if (column == categoryCount - 1) {    seriesPaint=getLastBarPaint();  } else {    if (valDiff >= 0.0) {      seriesPaint=getPositiveBarPaint();    } else {      seriesPaint=getNegativeBarPaint();    }  }  if (getGradientPaintTransformer() != null && seriesPaint instanceof GradientPaint) {    GradientPaint gp=(GradientPaint)seriesPaint;    seriesPaint=getGradientPaintTransformer().transform(gp,bar);  }  g2.setPaint(seriesPaint);  g2.fill(bar);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    Stroke stroke=getItemOutlineStroke(row,column);    Paint paint=getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(valDiff < 0.0));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public List<Annotation> execute() throws ParseException, RepositoryException, MalformedQueryException, QueryEvaluationException {  return this.execute(Annotation.class);}  }
class C{  public CTextNodeUpdater(final ZyGraph zygraph,final INaviTextNode textNode){  Preconditions.checkNotNull(zygraph,"IE00994: Graph argument can't be null");  Preconditions.checkNotNull(textNode,"IE00995: Code node argument can't be null");  m_graph=zygraph.getGraph();  m_node=textNode;  initializeListeners();}  }
class C{  public String toKeyString(){  return (nodeId.toString() + "|" + portId.toString());}  }
class C{  public static Long[] toObject(final long[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;  }  final Long[] result=new Long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Long(array[i]);  }  return result;}  }
class C{  public static TestDiagnostic fromJavaFileComment(String filename,long lineNumber,String stringFromjavaFile){  return fromPatternMatching(DIAGNOSTIC_IN_JAVA_PATTERN,DIAGNOSTIC_WARNING_IN_JAVA_PATTERN,filename,lineNumber,stringFromjavaFile);}  }
class C{  public void clear(View view){  WebView log=(WebView)findViewById(R.id.logText);  log.loadDataWithBaseURL(null,"","text/html","utf-8",null);}  }
class C{  public static void logToStdIO(String str){  long yourmilliseconds=System.currentTimeMillis();  SimpleDateFormat sdf=new SimpleDateFormat("[HH:mm:ss]");  Date resultdate=new Date(yourmilliseconds);  if (LOG)   System.out.println(sdf.format(resultdate) + str);}  }
class C{  public static int size(int[] array){  return Array.getLength(array);}  }
class C{  public static <S extends Summary>Sketch<S> heapifySketch(final Memory mem){  final SerializerDeserializer.SketchType sketchType=SerializerDeserializer.getSketchType(mem);  if (sketchType == SerializerDeserializer.SketchType.QuickSelectSketch) {    return new QuickSelectSketch<S>(mem);  }  return new CompactSketch<S>(mem);}  }
class C{  @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String rootName;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  rootName=root.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgRootNode","svg",rootName);  } else {    assertEquals("documentGetRootNodeAssert","staff",rootName);  }}  }
class C{  public void startActivityForResult(CordovaPlugin command,Intent intent,int requestCode){  setActivityResultCallback(command);  this.activityResultKeepRunning=this.keepRunning;  if (command != null) {    this.keepRunning=false;  }  try {    startActivityForResult(intent,requestCode);  } catch (  RuntimeException e) {    activityResultCallback=null;    throw e;  }}  }
class C{  public CacheLoaderException(Throwable cause){  super(cause);}  }
class C{  public FormatException(String s){  super(s);  rootCause=null;}  }
class C{  @Override public boolean parseAlignments(){  return false;}  }
class C{  public static org.w3c.dom.Node toDomNode(Object xmlObject){  if (xmlObject instanceof XML) {    return ((XML)xmlObject).toDomNode();  } else {    throw new IllegalArgumentException("xmlObject is not an XML object in JavaScript.");  }}  }
class C{  public WheelsAndSlidersMain(){  initComponents();  models=new LinkedList<ColorSliderModel>();  handler=new Handler();  previewLabel.setOpaque(true);  chooserPanel.add(createColorWheelChooser(HSBColorSpace.getInstance()));  chooserPanel.add(createColorWheelChooser(HSVColorSpace.getInstance(),1,0,2,JColorWheel.Type.SQUARE,false,false));  chooserPanel.add(createColorWheelChooser(HSLColorSpace.getInstance()));  chooserPanel.add(createColorWheelChooser(HSLColorSpace.getInstance(),0,2,1));  CIELABColorSpace cielab=new CIELABColorSpace();  cielab.setOutsideGamutHandling(CIELABColorSpace.OutsideGamutHandling.LEAVE_OUTSIDE);  chooserPanel.add(createColorWheelChooser(cielab,1,2,0,JColorWheel.Type.COMPLEX));  chooserPanel.add(createColorWheelChooser(HSVPhysiologicColorSpace.getInstance()));  chooserPanel.add(createColorWheelChooser(HSLPhysiologicColorSpace.getInstance()));  chooserPanel.add(createColorWheelChooser(HSLPhysiologicColorSpace.getInstance(),0,2,1));  chooserPanel.add(createColorWheelChooser(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_LINEAR_RGB),0,1,2,JColorWheel.Type.SQUARE));  chooserPanel.add(createColorWheelChooser(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_CIEXYZ),1,0,2,JColorWheel.Type.SQUARE));  chooserPanel.add(createColorWheelChooser(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_PYCC),1,2,0,JColorWheel.Type.SQUARE));  chooserPanel.add(new JPanel());  chooserPanel.add(createColorWheelChooser(ICC_ColorSpace.getInstance(ICC_ColorSpace.CS_sRGB),0,1,2,JColorWheel.Type.SQUARE));  try {    chooserPanel.add(createColorWheelChooser(new ICC_ColorSpace(ICC_Profile.getInstance(WheelsAndSlidersMain.class.getResourceAsStream("/org/jhotdraw/color/Munsell CIELab_to_UPLab.icc"))),2,1,0,JColorWheel.Type.SQUARE));    chooserPanel.add(createColorWheelChooser(new ICC_ColorSpace(ICC_Profile.getInstance(WheelsAndSlidersMain.class.getResourceAsStream("/org/jhotdraw/color/Munsell CIELab_to_UPLab2.icc"))),2,1,0,JColorWheel.Type.SQUARE));  } catch (  Throwable ex) {    ex.printStackTrace();  }  chooserPanel.add(createSliderChooser(ColorSpace.getInstance(ColorSpace.CS_sRGB)));  chooserPanel.add(createSliderChooser(CMYKGenericColorSpace.getInstance()));  chooserPanel.add(createSliderChooser(CMYKNominalColorSpace.getInstance()));}  }
class C{  protected void headerToXML(){  Element root;  Element node;  Element child;  int i;  root=m_Document.getDocumentElement();  root.setAttribute(ATT_NAME,validContent(m_Instances.relationName()));  root.setAttribute(ATT_VERSION,Version.VERSION);  node=m_Document.createElement(TAG_HEADER);  root.appendChild(node);  child=m_Document.createElement(TAG_ATTRIBUTES);  node.appendChild(child);  for (i=0; i < m_Instances.numAttributes(); i++) {    addAttribute(child,m_Instances.attribute(i));  }}  }
class C{  public HashCodeBuilder append(short[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  private boolean shouldBeBounded(){  double total=0;  for (int j=0; j < points[0].length; j++) {    total+=points[0][j];  }  if (total > 0.99 && total < 1.01 && points[0].length > 1) {    return true;  }  return false;}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLRGBA) {    if (this == o)     return true;    PLRGBA rgba=(PLRGBA)o;    return (red == rgba.red && green == rgba.green && blue == rgba.blue && alpha == rgba.alpha);  }  return false;}  }
class C{  @RpcMethod public void provision(List<String> dataStoreList,Set<String> imageDataStores,boolean usedForVMs,String hostAddress,int hostPort,double memoryOverCommit,String loggingEndpoint,String logLevel,StatsPluginConfig statsPluginConfig,boolean managementOnly,String hostId,String deploymentId,String ntpEndpoint,AsyncMethodCallback<AgentControl.AsyncClient.provision_call> handler) throws RpcException {  ensureClient();  HashSet<ImageDatastore> imageDatastoreSet=new HashSet<>();  imageDataStores.forEach(null);  ProvisionRequest provisionRequest=new ProvisionRequest();  provisionRequest.setDatastores(dataStoreList);  provisionRequest.setAddress(new ServerAddress(hostAddress,hostPort));  provisionRequest.setMemory_overcommit(memoryOverCommit);  provisionRequest.setManagement_only(managementOnly);  provisionRequest.setHost_id(hostId);  provisionRequest.setDeployment_id(deploymentId);  provisionRequest.setNtp_endpoint(ntpEndpoint);  provisionRequest.setImage_datastores(imageDatastoreSet);  provisionRequest.setStats_plugin_config(statsPluginConfig);  clientProxy.setTimeout(PROVISION_TIMEOUT_MS);  logger.info("provision target: {}, request {}",getHostIp(),provisionRequest);  try {    clientProxy.provision(provisionRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public boolean isNew(){  return m_fdr.isNew();}  }
class C{  public int isVoted(final String userId,final String dataId){  try {    final List<Filter> filters=new ArrayList<Filter>();    filters.add(new PropertyFilter(Vote.USER_ID,FilterOperator.EQUAL,userId));    filters.add(new PropertyFilter(Vote.DATA_ID,FilterOperator.EQUAL,dataId));    final Query query=new Query().setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));    final JSONObject result=voteRepository.get(query);    final JSONArray array=result.optJSONArray(Keys.RESULTS);    if (0 == array.length()) {      return -1;    }    final JSONObject vote=array.optJSONObject(0);    return vote.optInt(Vote.TYPE);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,e.getMessage());    return -1;  }}  }
class C{  public CopyRule(final StatementPattern sp) throws QueryRulesetException {  statement=sp;  final Var subjVar=statement.getSubjectVar();  final Var predVar=statement.getPredicateVar();  final Var objVar=statement.getObjectVar();  final Var conVar=statement.getContextVar();  int variables=0;  if (subjVar == null || !subjVar.hasValue()) {    sp.setSubjectVar(SUBJ_VAR);    if (subjVar != null) {      varMap.put(subjVar.getName(),SUBJ_VAR);    }    variables++;  }  if (predVar == null || !predVar.hasValue()) {    sp.setPredicateVar(PRED_VAR);    if (predVar != null) {      varMap.put(predVar.getName(),PRED_VAR);    }    variables++;  }  if (objVar == null || !objVar.hasValue()) {    sp.setObjectVar(OBJ_VAR);    if (objVar != null) {      varMap.put(objVar.getName(),OBJ_VAR);    }    variables++;  }  if (variables == 3) {    throw new QueryRulesetException("Statement pattern with no constants would match every statement:\n" + sp);  }  if (conVar != null && !conVar.hasValue()) {    sp.setContextVar(CON_VAR);    varMap.put(conVar.getName(),CON_VAR);  }}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.448 -0500",hash_original_method="4B96477BBB4E18CCF7F5B12A49CDFC2A",hash_generated_method="BC8C3B5543D293ACEC988CEA8B3F1359") private static int findAnyZero(float[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      low=middle + 1;    } else     if (middleValue > 0.0f) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public boolean isRemoteLdapActive(){  return remoteLdapActive;}  }
class C{  private boolean shouldBeAutoAccepted(){  long ftWarnSize=mRcsSettings.getWarningMaxFileTransferSize();  if (ftWarnSize > 0 && getContent().getSize() > ftWarnSize) {    return false;  }  if (getImsService().getImsModule().isInRoaming()) {    return mRcsSettings.isFileTransferAutoAcceptedInRoaming();  }  return mRcsSettings.isFileTransferAutoAccepted();}  }
class C{  @Override public void encrypt(byte[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(buffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,buffer,nI);  }  ;}  }
class C{  private void prepareFile(String resource) throws IOException {  File file=this.getConfigFile(resource);  if (file.exists())   return;  file.getParentFile().mkdirs();  if (file.createNewFile())   plugin.getLogger().info("Successfully created " + resource + " file.");  if (resource != null && !resource.isEmpty())   this.copyResource(plugin.getResource(resource),file);}  }
class C{  public K peekFirst(){  Entry<K> x=head;  return x == null ? null : x.obj;}  }
class C{  public static double pow(double value,double power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  if (power == 0.0) {    return 1.0;  } else   if (power == 1.0) {    return value;  }  if (value <= 0.0) {    int powerInfo;    if (Math.abs(power) >= (TWO_POW_52 * 2)) {      powerInfo=1;    } else {      if (Math.abs(power) <= (double)Integer.MAX_VALUE) {        int powerAsInt=(int)power;        if (power == (double)powerAsInt) {          powerInfo=((powerAsInt & 1) == 0) ? 1 : -1;        } else {          powerInfo=0;        }      } else {        long powerAsLong=(long)power;        if (power == (double)powerAsLong) {          powerInfo=((powerAsLong & 1) == 0) ? 1 : -1;        } else {          if (power != power) {            return Double.NaN;          }          powerInfo=0;        }      }    }    if (value == 0.0) {      if (power < 0.0) {        return (powerInfo < 0) ? 1 / value : Double.POSITIVE_INFINITY;      } else {        return (powerInfo < 0) ? value : 0.0;      }    } else {      if (value == Double.NEGATIVE_INFINITY) {        if (powerInfo < 0) {          return (power < 0.0) ? -0.0 : Double.NEGATIVE_INFINITY;        } else {          return (power < 0.0) ? 0.0 : Double.POSITIVE_INFINITY;        }      } else {        return (powerInfo != 0) ? powerInfo * FastMath.exp(power * FastMath.log(-value)) : Double.NaN;      }    }  } else {    return FastMath.exp(power * FastMath.log(value));  }}  }
class C{  private void handleActionTogglePause(){  startServiceIntent(PlaybackService.COMMAND_PAUSE);}  }
class C{  public ByteArrayDataRow(byte[] data){  this.data=data;}  }
class C{  public SearchCriteria(String searchString,String domain){  Validate.notNull(searchString,"searchString");  Validate.notNull(domain,"domain");  this.searchString=searchString;  this.domain=domain;}  }
class C{  public RegexpQueryBuilder(String name,String regexp){  this.name=name;  this.regexp=regexp;}  }
class C{  public GridDhtColocatedCache(GridCacheContext<K,V> ctx,GridCacheConcurrentMap map){  super(ctx,map);}  }
class C{  private void checkGETBodyWithAwait(final String requestUrl,final String body){  await().atMost(Duration.TEN_SECONDS).until(null,equalTo(body));}  }
class C{  public static String codeToMessage(final int code){  if (code >= 0 && code < ERROR_MESSAGES.length) {    return ERROR_MESSAGES[code];  }  return String.format("Unknown error (Code %d)",code);}  }
class C{  private File checkBaseline(File baselineParentDir) throws IOException {  File baselineDir=null;  if (null != baselineParentDir) {    baselineDir=getBackupDir(baselineParentDir);    if (!baselineDir.exists()) {      baselineDir=findBaselineForThisMember(baselineParentDir);    }    if (null != baselineDir) {      File incompleteBackup=new File(baselineDir,INCOMPLETE_BACKUP);      if (incompleteBackup.exists()) {        baselineDir=null;      }    }  }  return baselineDir;}  }
class C{  public TemplateTestCase(String baseFileName){  super(getTestCaseName(baseFileName));  this.baseFileName=baseFileName;}  }
class C{  public boolean engineIsCertificateEntry(String alias){  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null && entry instanceof CertEntry && ((CertEntry)entry).trustedKeyUsage != null) {    return true;  } else {    return false;  }}  }
class C{  public SymbolTableEntryInternal steFor_$n4Export(){  return getSymbolTableEntryInternal("$n4Export",true);}  }
class C{  public void onComplete(String response,boolean error,String errorMessage,final String stackTrace,String statusCode,int statusCodeInt){  cancelCancellable();  reply(response,error,errorMessage,stackTrace,statusCode,statusCodeInt);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SDEFINITION;}  }
class C{  public static Response createChannelBindResponse(){  Response channelBindSuccessResponse=new Response();  channelBindSuccessResponse.setMessageType(Message.CHANNELBIND_RESPONSE);  return channelBindSuccessResponse;}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public IntHashMap(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public ProjectObject(int id){  this.id=id;}  }
class C{  public void onLogin(Player player){  List<Achievement> toCheck=new ArrayList<Achievement>();  final Map<Category,List<Achievement>> map=new HashMap<Category,List<Achievement>>(achievements);  map.remove(Category.OUTSIDE_ZONE);  map.remove(Category.UNDERGROUND_ZONE);  Collection<List<Achievement>> values=map.values();  for (  List<Achievement> list : values) {    toCheck.addAll(list);  }  final List<Achievement> reached=checkAchievements(player,toCheck);  if (!reached.isEmpty()) {    StringBuilder sb=new StringBuilder();    sb.append("You have reached ");    sb.append(Integer.valueOf(reached.size()));    sb.append(" new " + Grammar.plnoun(reached.size(),"achievement") + ". Please check #http://stendhalgame.org for details.");    player.sendPrivateText(sb.toString());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:07.595 -0500",hash_original_method="AE9E3F40D0EE8D3948C9955DBE0083E8",hash_generated_method="A6F7211F8C2AA2A9B3B54DEA24E658A3") private synchronized void removeLock(FileLock lock){  locks.remove(lock);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void runBare() throws Throwable {  Throwable exception=null;  setUp();  try {    runTest();  } catch (  Throwable running) {    exception=running;  } finally {    try {      tearDown();    } catch (    Throwable tearingDown) {      if (exception == null)       exception=tearingDown;    }  }  if (exception != null)   throw exception;}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public AccountHeaderBuilder withTextColor(@ColorInt int textColor){  this.mTextColor=ColorHolder.fromColor(textColor);  return this;}  }
class C{  private void updateView(){  if (!hasEditor()) {    return;  }  ViewEditor editor=getEditor();  propertyEditor.updateTable(editor.getBuiltinAnalysisPlugins());  propertyEditor.selectRelations(editor.getDisplayRelations());}  }
class C{  public final int readInt() throws IOException {  readFully(scratch,0,SizeOf.INT);  return Memory.peekInt(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public static boolean isObjectMethod(final Method method){  return method.getDeclaringClass() == Object.class;}  }
class C{  protected static <T>List<T> createList(T[] elements){  if (elements != null) {    return Lists.newArrayList(elements);  } else {    return Lists.newArrayList();  }}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser seller,final Player player){  if (player.drop(res.getChosenItemName(),res.getAmount())) {    payPlayer(res,player);    seller.say("Thanks! Here is your money.");    player.incSoldForItem(res.getChosenItemName(),res.getAmount());    return true;  } else {    StringBuilder stringBuilder=new StringBuilder();    stringBuilder.append("Sorry! You don't have ");    if (res.getAmount() == 1) {      stringBuilder.append("any");    } else {      stringBuilder.append("that many");    }    stringBuilder.append(" ");    stringBuilder.append(Grammar.plnoun(res.getAmount(),res.getChosenItemName()));    stringBuilder.append(".");    seller.say(stringBuilder.toString());    return false;  }}  }
class C{  @SuppressWarnings("unchecked") protected void checkGlobalTag(Property property,Node node,Object object){  if (object.getClass().isArray() && object.getClass().getComponentType().isPrimitive()) {    return;  }  Class<?>[] arguments=property.getActualTypeArguments();  if (arguments != null) {    if (node.getNodeId() == NodeId.sequence) {      Class<? extends Object> t=arguments[0];      SequenceNode snode=(SequenceNode)node;      Iterable<Object> memberList=Collections.EMPTY_LIST;      if (object.getClass().isArray()) {        memberList=Arrays.asList((Object[])object);      } else       if (object instanceof Iterable<?>) {        memberList=(Iterable<Object>)object;      }      Iterator<Object> iter=memberList.iterator();      if (iter.hasNext()) {        for (        Node childNode : snode.getValue()) {          Object member=iter.next();          if (member != null) {            if (t.equals(member.getClass()))             if (childNode.getNodeId() == NodeId.mapping) {              childNode.setTag(Tag.MAP);            }          }        }      }    } else     if (object instanceof Set) {      Class<?> t=arguments[0];      MappingNode mnode=(MappingNode)node;      Iterator<NodeTuple> iter=mnode.getValue().iterator();      Set<?> set=(Set<?>)object;      for (      Object member : set) {        NodeTuple tuple=iter.next();        Node keyNode=tuple.getKeyNode();        if (t.equals(member.getClass())) {          if (keyNode.getNodeId() == NodeId.mapping) {            keyNode.setTag(Tag.MAP);          }        }      }    } else     if (object instanceof Map) {      Class<?> keyType=arguments[0];      Class<?> valueType=arguments[1];      MappingNode mnode=(MappingNode)node;      for (      NodeTuple tuple : mnode.getValue()) {        resetTag(keyType,tuple.getKeyNode());        resetTag(valueType,tuple.getValueNode());      }    } else {    }  }}  }
class C{  private static long CallLongMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallLongMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Long,false);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  synchronized boolean start(){  if (DEBUG)   Log.v(TAG,"start:");  mStatredCount++;  if ((mEncoderCount > 0) && (mStatredCount == mEncoderCount)) {    mMediaMuxer.start();    mIsStarted=true;    notifyAll();    if (DEBUG)     Log.v(TAG,"MediaMuxer started:");  }  return mIsStarted;}  }
class C{  public static synchronized int readLEInt(BinaryBufferedFile in) throws IOException {  int result=in.read(leiBuffer,0,4);  if (result < 4) {    throw new EOFException();  } else {    return readLEInt(leiBuffer,0);  }}  }
class C{  public void load(Element element,Object o){  if (!(o instanceof ControlPanelEditor)) {    log.error("Can't load portalIcon.  Panel editor must use ControlPanelEditor.");    return;  }  ControlPanelEditor ed=(ControlPanelEditor)o;  String fromBlk;  try {    fromBlk=element.getAttribute("fromBlockName").getValue();  } catch (  NullPointerException e) {    log.error("incorrect information for portalIcon; must use fromBlockName.");    return;  }  String portalName;  try {    portalName=element.getAttribute("portalName").getValue();  } catch (  NullPointerException e) {    log.error("incorrect information for portalIcon; must use portalName.");    return;  }  OBlock block=jmri.InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class).getOBlock(fromBlk);  Portal portal=block.getPortalByName(portalName);  PortalIcon l=new PortalIcon(ed,portal);  ed.putItem(l);  loadCommonAttributes(l,ControlPanelEditor.MARKERS,element);  Attribute a=element.getAttribute("scale");  double scale=1.0;  if (a != null) {    try {      scale=a.getDoubleValue();    } catch (    org.jdom2.DataConversionException dce) {      log.error(l.getNameString() + " can't convert scale " + dce);    }  }  l.setScale(scale);  a=element.getAttribute("rotate");  int deg=0;  if (a != null) {    try {      deg=a.getIntValue();    } catch (    org.jdom2.DataConversionException dce) {      log.error(l.getNameString() + " can't convert rotate " + dce);    }  }  l.rotate(deg);  boolean value=true;  if ((a=element.getAttribute("arrowSwitch")) != null && a.getValue().equals("no")) {    value=false;  }  l.setArrowOrientatuon(value);  value=false;  if ((a=element.getAttribute("arrowHide")) != null && a.getValue().equals("yes")) {    value=true;  }  l.setHideArrows(value);}  }
class C{  private UPSCoord convertMGRSToUPS(String MGRS){  long ltr2_high_value;  long ltr3_high_value;  long ltr2_low_value;  double false_easting;  double false_northing;  double grid_easting;  double grid_northing;  int index=0;  long error_code=MGRS_NO_ERROR;  String hemisphere;  double easting, northing;  MGRSComponents mgrs=breakMGRSString(MGRS);  if (mgrs == null)   error_code=this.last_error;  if (mgrs != null && mgrs.zone > 0)   error_code|=MGRS_STRING_ERROR;  if (error_code == MGRS_NO_ERROR) {    easting=mgrs.easting;    northing=mgrs.northing;    if (mgrs.latitudeBand >= LETTER_Y) {      hemisphere=AVKey.NORTH;      index=mgrs.latitudeBand - 22;      ltr2_low_value=upsConstants[index][1];      ltr2_high_value=upsConstants[index][2];      ltr3_high_value=upsConstants[index][3];      false_easting=upsConstants[index][4];      false_northing=upsConstants[index][5];    } else {      hemisphere=AVKey.SOUTH;      ltr2_low_value=upsConstants[mgrs.latitudeBand][12];      ltr2_high_value=upsConstants[mgrs.latitudeBand][2];      ltr3_high_value=upsConstants[mgrs.latitudeBand][3];      false_easting=upsConstants[mgrs.latitudeBand][4];      false_northing=upsConstants[mgrs.latitudeBand][5];    }    if ((mgrs.squareLetter1 < ltr2_low_value) || (mgrs.squareLetter1 > ltr2_high_value) || ((mgrs.squareLetter1 == LETTER_D) || (mgrs.squareLetter1 == LETTER_E) || (mgrs.squareLetter1 == LETTER_M)|| (mgrs.squareLetter1 == LETTER_N)|| (mgrs.squareLetter1 == LETTER_V)|| (mgrs.squareLetter1 == LETTER_W))|| (mgrs.squareLetter2 > ltr3_high_value))     error_code=MGRS_STRING_ERROR;    if (error_code == MGRS_NO_ERROR) {      grid_northing=(double)mgrs.squareLetter2 * ONEHT + false_northing;      if (mgrs.squareLetter2 > LETTER_I)       grid_northing=grid_northing - ONEHT;      if (mgrs.squareLetter2 > LETTER_O)       grid_northing=grid_northing - ONEHT;      grid_easting=(double)((mgrs.squareLetter1) - ltr2_low_value) * ONEHT + false_easting;      if (ltr2_low_value != LETTER_A) {        if (mgrs.squareLetter1 > LETTER_L)         grid_easting=grid_easting - 300000.0;        if (mgrs.squareLetter1 > LETTER_U)         grid_easting=grid_easting - 200000.0;      } else {        if (mgrs.squareLetter1 > LETTER_C)         grid_easting=grid_easting - 200000.0;        if (mgrs.squareLetter1 > LETTER_I)         grid_easting=grid_easting - ONEHT;        if (mgrs.squareLetter1 > LETTER_L)         grid_easting=grid_easting - 300000.0;      }      easting=grid_easting + easting;      northing=grid_northing + northing;      return UPSCoord.fromUPS(hemisphere,easting,northing);    }  }  return null;}  }
class C{  private static String unescape(String s){  int len=s.length(), base=0, idx;  String escapes="tnrbf\\\"'";  String chars="\t\n\r\b\f\\\"'";  StringBuffer sbuf=null;  while ((idx=s.indexOf('\\',base)) != -1) {    if (sbuf != null)     sbuf.append(s.substring(base,idx));    if (idx + 1 == len)     break;    char c=s.charAt(idx + 1);    int cidx=escapes.indexOf(c);    if (cidx == -1) {      sbuf.append('\\');      sbuf.append(c);    } else {      if (sbuf == null)       sbuf=new StringBuffer(s.substring(base,idx));      sbuf.append(chars.charAt(cidx));    }    base=idx + 2;  }  if (sbuf != null && base < len)   sbuf.append(s.substring(base));  return (sbuf == null ? s : sbuf.toString());}  }
class C{  public Rectangle(Rectangle... recs){  uB=new DenseVector(recs[0].uB.length());  lB=new DenseVector(uB.length());  for (int i=0; i < uB.length(); i++) {    double max=Double.MIN_VALUE, min=Double.MAX_VALUE;    for (int j=0; j < recs.length; j++) {      max=Math.max(max,recs[j].uB.get(i));      min=Math.min(min,recs[j].lB.get(i));    }    uB.set(i,max);    lB.set(i,min);  }}  }
class C{  public boolean dominates(int master,int slave){  BasicBlock masterBlock=ir.getBasicBlock(master);  BasicBlock slaveBlock=ir.getBasicBlock(slave);  DominatorTreeNode masterNode=dominatorInfoMap[masterBlock.getNumber()];  DominatorTreeNode slaveNode=dominatorInfoMap[slaveBlock.getNumber()];  return slaveNode.isDominatedBy(masterNode);}  }
