class C{  public void init(){  animateActionView=true;  animateActionBackTop=true;  animateActionBackBottom=true;  alphaBottomTreshold=ALPHA_BOTTOM_TRESHOLD;  releaseTresholdTop=ViewUtils.toPx(getContext(),DEFAULT_RELEASE_TRESHOLD_TOP);  releaseTresholdBottom=ViewUtils.toPx(getContext(),DEFAULT_RELEASE_TRESHOLD_BOTTOM);  animationDurationTop=DEFAULT_ANIMATION_DURATION_TOP;  animationDurationBottom=DEFAULT_ANIMATION_DURATION_BOTTOM;  maxOffsetTop=ViewUtils.toPx(getContext(),DEFAULT_MAX_OFFSET_TOP);  resistanceTop=DEFAULT_RESISTANCE_TOP;}  }
class C{  public static void assertTextArea(int[] path,String text){  if (verbose) {    log("assertTextArea(" + toString(path) + ", "+ text+ ")");  }  TextArea l=(TextArea)getComponentByPath(path);  assertBool(l != null,"Null area " + text);  assertBool(l.getText().equals(text),"assertTextArea: " + l.getText() + " != "+ text);}  }
class C{  protected String addMatchingBlockEnd(int offset) throws BadLocationException {  StringBuffer result;  StringBuffer whiteSpace=new StringBuffer();  int line=m_RootElement.getElementIndex(offset);  int i=m_RootElement.getElement(line).getStartOffset();  while (true) {    String temp=m_Self.getText(i,1);    if (temp.equals(" ") || temp.equals("\t")) {      whiteSpace.append(temp);      i++;    } else {      break;    }  }  result=new StringBuffer();  result.append(m_BlockStart);  result.append("\n");  result.append(whiteSpace.toString());  if (m_UseBlanks) {    result.append(m_Indentation);  } else {    result.append("\t");  }  result.append("\n");  result.append(whiteSpace.toString());  result.append(m_BlockEnd);  return result.toString();}  }
class C{  public Polygon(LinearRing shell,LinearRing[] holes,PrecisionModel precisionModel,int SRID){  this(shell,holes,new GeometryFactory(precisionModel,SRID));}  }
class C{  protected static final boolean intersects(double xmin1,double ymin1,double xmax1,double ymax1,double xmin2,double ymin2,double xmax2,double ymax2){  return !((xmax1 <= xmin2) || (ymax1 <= ymin2) || (xmin1 >= xmax2)|| (ymin1 >= ymax2));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MODEL__MODEL:    setModel((Program_)null);  return;}super.eUnset(featureID);}  }
class C{  void appendNSDeclaration(int prefixIndex,int namespaceIndex,boolean isID){  final int namespaceForNamespaces=m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/");  int w0=NAMESPACE_NODE | (m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/") << 16);  int w1=currentParent;  int w2=0;  int w3=namespaceIndex;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  previousSiblingWasParent=false;  return;}  }
class C{  private void doReverseKNNQuery(int k,DBIDRef q,ModifiableDoubleDBIDList result,ModifiableDBIDs candidates){  final ComparableMinHeap<GenericMTreeDistanceSearchCandidate> pq=new ComparableMinHeap<>();  pq.add(new GenericMTreeDistanceSearchCandidate(0.,getRootID(),null));  while (!pq.isEmpty()) {    GenericMTreeDistanceSearchCandidate pqNode=pq.poll();    MkCoPTreeNode<O> node=getNode(pqNode.nodeID);    if (!node.isLeaf()) {      for (int i=0; i < node.getNumEntries(); i++) {        MkCoPEntry entry=node.getEntry(i);        double distance=distance(entry.getRoutingObjectID(),q);        double minDist=entry.getCoveringRadius() > distance ? 0. : distance - entry.getCoveringRadius();        double approximatedKnnDist_cons=entry.approximateConservativeKnnDistance(k);        if (minDist <= approximatedKnnDist_cons) {          pq.add(new GenericMTreeDistanceSearchCandidate(minDist,getPageID(entry),entry.getRoutingObjectID()));        }      }    } else {      for (int i=0; i < node.getNumEntries(); i++) {        MkCoPLeafEntry entry=(MkCoPLeafEntry)node.getEntry(i);        double distance=distance(entry.getRoutingObjectID(),q);        double approximatedKnnDist_prog=entry.approximateProgressiveKnnDistance(k);        if (distance <= approximatedKnnDist_prog) {          result.add(distance,entry.getRoutingObjectID());        } else {          double approximatedKnnDist_cons=entry.approximateConservativeKnnDistance(k);          double diff=distance - approximatedKnnDist_cons;          if (diff <= 1E-10) {            candidates.add(entry.getRoutingObjectID());          }        }      }    }  }}  }
class C{  public Home(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.atan(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void checkLoadScript(){  if (se != null) {    throw se;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.083 -0500",hash_original_method="59E635302CD6807B36C1A45A26BE591E",hash_generated_method="E777F4D20A3E452EC8A82B9D572FAC41") private String hexAV() throws IOException {  if (pos + 4 >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  beg=pos;  pos++;  while (true) {    if (pos == chars.length || chars[pos] == '+' || chars[pos] == ',' || chars[pos] == ';') {      end=pos;      break;    }    if (chars[pos] == ' ') {      end=pos;      pos++;      for (; pos < chars.length && chars[pos] == ' '; pos++) {      }      break;    } else     if (chars[pos] >= 'A' && chars[pos] <= 'F') {      chars[pos]+=32;    }    pos++;  }  int hexLen=end - beg;  if (hexLen < 5 || (hexLen & 1) == 0) {    throw new IOException("Invalid distinguished name string");  }  encoded=new byte[hexLen / 2];  for (int i=0, p=beg + 1; i < encoded.length; p+=2, i++) {    encoded[i]=(byte)getByte(p);  }  return new String(chars,beg,hexLen);}  }
class C{  public void addOnPageChangeListener(ViewPager.OnPageChangeListener listener){  if (!mListeners.contains(listener)) {    mListeners.add(listener);  }}  }
class C{  public void pauseSong(){  mediaPlayer.togglePause();}  }
class C{  public void go(){  Gerrit.display(getTargetHistoryToken());}  }
class C{  public JavaParser(){  this(new ParserConfiguration());}  }
class C{  @Override public void tableChanged(final TableModelEvent e){  inTableChange=true;  try {    super.tableChanged(e);  }  finally {    inTableChange=false;  }  restoreSelection();}  }
class C{  public boolean isCellEditable(int row,int col){  return col == LibraryPlaylistsTableDataLine.STARRED_IDX || col == LibraryPlaylistsTableDataLine.ACTIONS_IDX;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:42.242 -0500",hash_original_method="5AF96706DF9FEED69E5A85053239A8E2",hash_generated_method="5AF96706DF9FEED69E5A85053239A8E2") CacheLoader(LoadListener loadListener,CacheManager.CacheResult result){  super(loadListener);  assert !JniUtil.useChromiumHttpStack();  mCacheResult=result;}  }
class C{  static void printFieldRefs(ClassRef[] classes){  out.println("\nFields:");  for (int i=0; i < classes.length; i++) {    FieldRef[] fields=classes[i].getFieldArray();    for (int j=0; j < fields.length; j++) {      FieldRef ref=fields[j];      out.println(descriptorToDot(ref.getDeclClassName()) + "." + ref.getName()+ " : "+ ref.getTypeName());    }  }}  }
class C{  public List<VmfsDatastoreOption> queryVmfsDatastoreExpandOptions(Datastore datastore){  HostDatastoreSystem datastoreSystem=getDatastoreSystem();  try {    return createList(datastoreSystem.queryVmfsDatastoreExpandOptions(datastore));  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public boolean isLink(){  return getLinkedFile().length() != 0;}  }
class C{  public CLIOutputWithRevisionResponse update(final UpdateRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addFlag(uArgs,"--ignore-externals",request.isIgnoreExternals());  addOption(uArgs,"--depth",request.getDepth());  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("update");  final CommandLineResult result=runCommand(null,uArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()),request.getUsername(),request.getPassword());  return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withRevision(SubversionUtils.getUpdateRevision(result.getStdout())).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  protected void fireInsertUpdate(DocumentEvent e){  Element lineMap=getDefaultRootElement();  DocumentEvent.ElementChange change=e.getChange(lineMap);  Element[] added=change == null ? null : change.getChildrenAdded();  int numLines=lineMap.getElementCount();  int line=lineMap.getElementIndex(e.getOffset());  int previousLine=line - 1;  int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);  if (added != null && added.length > 0) {    Element[] removed=change.getChildrenRemoved();    int numRemoved=removed != null ? removed.length : 0;    int endBefore=line + added.length - numRemoved;    for (int i=line; i < endBefore; i++) {      setSharedSegment(i);      int tokenType=tokenMaker.getLastTokenTypeOnLine(s,previousTokenType);      lastTokensOnLines.add(i,tokenType);      previousTokenType=tokenType;    }    updateLastTokensBelow(endBefore,numLines,previousTokenType);  } else {    updateLastTokensBelow(line,numLines,previousTokenType);  }  super.fireInsertUpdate(e);}  }
class C{  private boolean checkGMLFootprint(String footprint){  try {    Configuration configuration=new GMLConfiguration();    Parser parser=new Parser(configuration);    parser.parse(new InputSource(new StringReader(footprint)));    return true;  } catch (  Exception e) {    LOGGER.error("Error in extracted footprint: " + e.getMessage());    return false;  }}  }
class C{  public FinallyBlock createFinallyBlock(){  FinallyBlockImpl finallyBlock=new FinallyBlockImpl();  return finallyBlock;}  }
class C{  public JSONObject(Map<?,?> map){  this.map=new TreeMap<String,Object>();  if (map != null) {    for (    final Entry<?,?> e : map.entrySet()) {      final Object value=e.getValue();      if (value != null) {        this.map.put(String.valueOf(e.getKey()),wrap(value));      }    }  }}  }
class C{  public Quaterniond fromAxisAngleRad(double axisX,double axisY,double axisZ,double angle){  double hangle=angle / 2.0;  double sinAngle=Math.sin(hangle);  double vLength=Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);  x=axisX / vLength * sinAngle;  y=axisY / vLength * sinAngle;  z=axisZ / vLength * sinAngle;  w=Math.cos(hangle);  return this;}  }
class C{  @Deprecated public HttpConnection(final String proxyHost,final int proxyPort,final String host,final String virtualHost,final int port,final Protocol protocol){  this(proxyHost,proxyPort,host,port,protocol);}  }
class C{  protected void reset(VisualItem item){  item.setVisible(false);  item.setEndVisible(false);  item.setStartStrokeColor(item.getStrokeColor());  item.revertToDefault(VisualItem.STROKECOLOR);  item.revertToDefault(VisualItem.ENDSTROKECOLOR);  item.setStartTextColor(item.getTextColor());  item.revertToDefault(VisualItem.TEXTCOLOR);  item.revertToDefault(VisualItem.ENDTEXTCOLOR);  item.setStartFillColor(item.getFillColor());  item.revertToDefault(VisualItem.FILLCOLOR);  item.revertToDefault(VisualItem.ENDFILLCOLOR);}  }
class C{  private void addOverlay(UpdateMessage msg){  if (msg != null && msg.getMessageType().equals("overlay")) {    if (_overlays == null)     _overlays=new LinkedList<>();    if (!_overlays.isEmpty()) {      for (      UpdateMessage m : _overlays) {        if (m.isIntro() == msg.isIntro()) {          _overlays.remove(m);          _overlays.add(msg);          return;        }      }    }    _overlays.add(msg);  } else {    System.out.println("UpdateManager.addOverlay() - The message given wasn't good.");  }}  }
class C{  public void innerXml(String xml) throws IOException {  if (xml == null) {    return;  }  writeUnescaped(xml);}  }
class C{  private void readLinearGradientElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  double x1=toLength(elem,readAttribute(elem,"x1","0"),0.01);  double y1=toLength(elem,readAttribute(elem,"y1","0"),0.01);  double x2=toLength(elem,readAttribute(elem,"x2","1"),0.01);  double y2=toLength(elem,readAttribute(elem,"y2","0"),0.01);  boolean isRelativeToFigureBounds=readAttribute(elem,"gradientUnits","objectBoundingBox").equals("objectBoundingBox");  ArrayList<IXMLElement> stops=elem.getChildrenNamed("stop",SVG_NAMESPACE);  if (stops.size() == 0) {    stops=elem.getChildrenNamed("stop");  }  if (stops.size() == 0) {    String xlink=readAttribute(elem,"xlink:href","");    if (xlink.startsWith("#") && identifiedElements.get(xlink.substring(1)) != null) {      stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop",SVG_NAMESPACE);      if (stops.size() == 0) {        stops=identifiedElements.get(xlink.substring(1)).getChildrenNamed("stop");      }    }  }  if (stops.size() == 0) {    if (DEBUG) {      System.out.println("SVGInpuFormat: Warning no stops in linearGradient " + elem);    }  }  double[] stopOffsets=new double[stops.size()];  Color[] stopColors=new Color[stops.size()];  double[] stopOpacities=new double[stops.size()];  for (int i=0; i < stops.size(); i++) {    IXMLElement stopElem=stops.get(i);    String offsetStr=readAttribute(stopElem,"offset","0");    if (offsetStr.endsWith("%")) {      stopOffsets[i]=toDouble(stopElem,offsetStr.substring(0,offsetStr.length() - 1),0,0,100) / 100d;    } else {      stopOffsets[i]=toDouble(stopElem,offsetStr,0,0,1);    }    stopColors[i]=toColor(stopElem,readAttribute(stopElem,"stop-color","black"));    if (stopColors[i] == null) {      stopColors[i]=new Color(0x0,true);    }    stopOpacities[i]=toDouble(stopElem,readAttribute(stopElem,"stop-opacity","1"),1,0,1);  }  AffineTransform tx=toTransform(elem,readAttribute(elem,"gradientTransform","none"));  Gradient gradient=factory.createLinearGradient(x1,y1,x2,y2,stopOffsets,stopColors,stopOpacities,isRelativeToFigureBounds,tx);  elementObjects.put(elem,gradient);}  }
class C{  private static boolean validateChannelNumber(char channelNumber){  return (channelNumber > 0x3FFF);}  }
class C{  public static boolean isAutoScanEnabled(Context context){  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  return prefs.getBoolean(context.getString(R.string.pref_key_auto_scan_enabled),Boolean.parseBoolean(context.getString(R.string.pref_auto_scan_default_value)));}  }
class C{  public TermsQueryBuilder(String name,double... values){  this.name=name;  this.values=values;}  }
class C{  void appendEvents(Document xmldoc,Element parent,LocalizerServiceLocal localizer,TechnicalProduct technicalProduct){  List<Event> events=technicalProduct.getEvents();  for (  Event event : events) {    Element defNode=xmldoc.createElement("Event");    defNode.setAttribute("id",event.getEventIdentifier());    parent.appendChild(defNode);    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.EVENT_DESC,event.getKey(),"LocalizedDescription");  }}  }
class C{  public Properties stripPrefix(Properties props){  Properties result=new Properties();  for (  String name : props.stringPropertyNames()) {    validateNamespaced(name);    String val=props.getProperty(name);    name=stripPrefix(name);    result.setProperty(name,val);  }  return result;}  }
class C{  private byte[] decrypt(byte[] d,int start,int end,int key,int skip){  if (end - start - skip < 0) {    skip=0;  }  byte[] o=new byte[end - start - skip];  int r=key;  int ipos;  int c1=52845;  int c2=22719;  for (ipos=start; ipos < end; ipos++) {    int c=d[ipos] & 0xff;    int p=(c ^ (r >> 8)) & 0xff;    r=((c + r) * c1 + c2) & 0xffff;    if (ipos - start - skip >= 0) {      o[ipos - start - skip]=(byte)p;    }  }  return o;}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  public SnmpStatusException(String s){  super(s);}  }
class C{  static public String removeAndHump(String data){  return removeAndHump(data,"_");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForTitles(getString(stack),masky);  } else   return Wizard.getInstance().searchForTitles(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  public static void printOrder(Properties ctx,int C_Order_ID,String trxName) throws OperationException {  String args="";  String className="";  try {    ReportEngine re=ReportEngine.get(ctx,ReportEngine.ORDER,C_Order_ID);    MPrintFormat printFormatter=re.getPrintFormat();    args=printFormatter.getArgs();    className=printFormatter.getClassname();    if (className == null) {      className="org.posterita.util.TMKOrderPrintFormatter";      logger.info("Using default formatter");    }    logger.info("Using " + className + " formatter");    Class clazz=Class.forName(className);    IPrintFormatter formatter=null;    Class[] parameterTypes=new Class[]{String.class,String.class};    Object[] parameters=new Object[]{args,trxName};    Constructor constructor=clazz.getConstructor(parameterTypes);    formatter=(IPrintFormatter)constructor.newInstance(parameters);    String printData=formatter.format(ctx,C_Order_ID,new OrderLineBean());    int noOfCopies=re.getPrintInfo().getCopies();    for (int i=0; i < noOfCopies; i++) {      print(ctx,printData);    }  } catch (  Exception e) {    logger.log(Level.SEVERE,e.getMessage(),e);    new OperationException(e);  }}  }
class C{  public Command addArgument(String arg){  arguments.add(arg);  return this;}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  public void paint(Graphics g){switch (this.mode) {case HALF_ANCHORED:    g.setColor(getLineColor());  Point point=getRelativeMouseTrackPoint();setConnectedPoints(calculateEdge(getNode1(),point));if (getConnectedPoints() != null) {drawEdge(g);}break;case ANCHORED_UNSELECTED:g.setColor(getLineColor());setConnectedPoints(calculateEdge(getNode1(),getNode2()));if (getConnectedPoints() != null) {drawEdge(g);}break;case ANCHORED_SELECTED:g.setColor(selectedColor);setConnectedPoints(calculateEdge(getNode1(),getNode2()));if (getConnectedPoints() != null) {drawEdge(g);}break;default :throw new IllegalStateException();}}  }
class C{  public boolean hasErrors(){  return mHasErrors;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  return map;}  }
class C{  public MissingDataInjectorAction(DataEditor editor){  super("Inject Missing Data Randomly");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  private int findInTable(short knownHashIndex,char[] charArray){  if (charArray == null || charArray.length == 0)   return -1;  char[][] items=wordItem_charArrayTable[wordIndexTable[knownHashIndex]];  int start=0, end=items.length - 1;  int mid=(start + end) / 2, cmpResult;  while (start <= end) {    cmpResult=Utility.compareArray(items[mid],0,charArray,1);    if (cmpResult == 0)     return mid; else     if (cmpResult < 0)     start=mid + 1; else     if (cmpResult > 0)     end=mid - 1;    mid=(start + end) / 2;  }  return -1;}  }
class C{  public static int intersectRayAar(Vector2dc origin,Vector2dc dir,Vector2dc min,Vector2dc max,Vector2d result){  return intersectRayAar(origin.x(),origin.y(),dir.x(),dir.y(),min.x(),min.y(),max.x(),max.y(),result);}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  public Manifest(){}  }
class C{  public static boolean isOnSegment(Geo a,Geo b,Geo i,double withinRad){  return ((Math.abs(a.crossNormalize(b).dot(i)) <= withinRad) && (a.distance(i) < a.distance(b)) && (b.distance(i) < b.distance(a)));}  }
class C{  void appletPrint(){  PrinterJob pj=PrinterJob.getPrinterJob();  if (pj != null) {    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();    if (pj.printDialog(aset)) {      pj.setPrintable(this);      try {        pj.print(aset);        statusMsgStream.println(amh.getMessage("appletprint.finish"));      } catch (      PrinterException e) {        statusMsgStream.println(amh.getMessage("appletprint.fail"));      }    } else {      statusMsgStream.println(amh.getMessage("appletprint.cancel"));    }  } else {    statusMsgStream.println(amh.getMessage("appletprint.fail"));  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeNew(int where) throws CannotCompileException {  try {    byte[] data=new NewRemover(this.get(),where).doit();    this.set(data);  } catch (  BadBytecode e) {    throw new CannotCompileException("bad stack map table",e);  }}  }
class C{  public boolean hasChildren(int id,String entidad) throws Exception {  boolean tieneHijos=false;  boolean enc=searchNode(tree,id);  if (enc) {    Node parent=(Node)fin.getParent();    tieneHijos=parent.getHasChild();  } else {    if (logger.isDebugEnabled())     logger.debug("Nodo no encontrado");  }  return tieneHijos;}  }
class C{  @Override public void connectFailed(URI uri,SocketAddress socketAddress,IOException ioException){}  }
class C{  static Object doStrictFloorMod(long x,long y){  try {    return StrictMath.floorMod(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public boolean shouldInclude(final Path path){  return includeMatchers.size() == 0 || matches(path,includeMatchers);}  }
class C{  @Override public boolean exist(Selector obj){  if (obj.getChildOrSibling().length == 0 && obj.toBySelector() != null)   return device.wait(Until.hasObject(obj.toBySelector()),0L);  return device.findObject(obj.toUiSelector()).exists();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.211 -0500",hash_original_method="18818CB637EBC5CF82DC4C50B37FB17C",hash_generated_method="6B4F856B395D4DD199D66097848438EE") private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public Coordinate[] toCoordinateArray(){  return (Coordinate[])toArray(coordArrayType);}  }
class C{  public static String extractFromDataMatrix(String code){  if (code.length() < 16) {    return null;  }  if (code.startsWith("01")) {    return code.substring(2,16);  }  return null;}  }
class C{  private static void checkArgs(final double[] min,final double[] max){  if (min == null || max == null || min.length == 0 || max.length == 0) {    throw new IllegalArgumentException("min/max range values cannot be null or empty");  }  if (min.length != max.length) {    throw new IllegalArgumentException("min/max ranges must agree");  }  if (min.length > 4) {    throw new IllegalArgumentException("DoubleRangeField does not support greater than 4 dimensions");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.965 -0500",hash_original_method="8945EEF95EF30DB6F3AC6F2F65AD50C7",hash_generated_method="7D7A3879A22C748B9BCF7118D3B3BF76") private boolean processLaunchBrowser(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process LaunchBrowser");  TextMessage confirmMsg=new TextMessage();  IconId iconId=null;  String url=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.URL,ctlvs);  if (ctlv != null) {    try {      byte[] rawValue=ctlv.getRawValue();      int valueIndex=ctlv.getValueIndex();      int valueLen=ctlv.getLength();      if (valueLen > 0) {        url=GsmAlphabet.gsm8BitUnpackedToString(rawValue,valueIndex,valueLen);      } else {        url=null;      }    } catch (    IndexOutOfBoundsException e) {      throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);    }  }  ctlv=searchForTag(ComprehensionTlvTag.ALPHA_ID,ctlvs);  confirmMsg.text=ValueParser.retrieveAlphaId(ctlv);  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);    confirmMsg.iconSelfExplanatory=iconId.selfExplanatory;  }  LaunchBrowserMode mode;switch (cmdDet.commandQualifier) {case 0x00:default :    mode=LaunchBrowserMode.LAUNCH_IF_NOT_ALREADY_LAUNCHED;  break;case 0x02:mode=LaunchBrowserMode.USE_EXISTING_BROWSER;break;case 0x03:mode=LaunchBrowserMode.LAUNCH_NEW_BROWSER;break;}mCmdParams=new LaunchBrowserParams(cmdDet,confirmMsg,url,mode);if (iconId != null) {mIconLoadState=LOAD_SINGLE_ICON;mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));return true;}return false;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private static int countDuplicates(StackTraceElement[] currentStack,StackTraceElement[] parentStack){  int duplicates=0;  int parentIndex=parentStack.length;  for (int i=currentStack.length; --i >= 0 && --parentIndex >= 0; ) {    StackTraceElement parentFrame=parentStack[parentIndex];    if (parentFrame.equals(currentStack[i])) {      duplicates++;    } else {      break;    }  }  return duplicates;}  }
class C{  public KXml2Driver(){  super(new XmlFriendlyNameCoder());}  }
class C{  public void refreshColumnIndex(final int index){  final int lastIndex=table.getItemCount();  for (int i=index; i < lastIndex; i++) {    final TableItem item=table.getItem(i);    item.setText(0,String.valueOf(i));  }}  }
class C{  protected Queue createQueue(String name){  return ActiveMQJMSClient.createQueue(name);}  }
class C{  public final String userName(){  assert userName != null;  return userName;}  }
class C{  public UpdateRequest upsert(Object... source){  safeUpsertRequest().source(source);  return this;}  }
class C{  public void testSavePasswordForUser_by_Application() throws ConfigurationException {  PasswordManager pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  String username="ludovic";  String password="ludovic_password";  String new_password="my_new_password";  try {    pwd.setPasswordForUser(username,password);  } catch (  Exception e) {    assertTrue(false);  }  pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  String retrievePassword=pwd.getClearTextPasswordForUser(username);  assertEquals(password,retrievePassword);  pwd.setPasswordForUser(username,new_password);  pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  retrievePassword=pwd.getClearTextPasswordForUser(username);  assertEquals(new_password,retrievePassword);  pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  TungstenProperties passwdProps=pwd.loadPasswordsAsTungstenProperties();  assertEquals(true,passwdProps.size() != 0);  String goodPassword=passwdProps.get(pwd.getApplicationSpecificUsername(username));  assertNotNull(goodPassword);  try {    pwd.deleteUser("non_existing_user");    assertTrue(false);  } catch (  Exception e) {    assertTrue(true);  }  try {    pwd.deleteUser("ludovic");  } catch (  Exception e) {    assertTrue(false);  }  pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  retrievePassword=pwd.getClearTextPasswordForUser("ludovic");  assertNull(retrievePassword);}  }
class C{  public void testStoreTwice(){  List modules1=store.put("A",Arrays.asList(new String[]{"B","C"}));  List modules2=store.put("A",Arrays.asList(new String[]{"C","D"}));  List modulesD=store.getListOfModulesToReparse("D");  assertNull(modules1);  assertNotNull(modules2);  assertEquals(2,modules2.size());  assertTrue(modules2.contains("C"));  assertTrue(modules2.contains("B"));  assertEquals(1,modulesD.size());  assertTrue(modulesD.contains("A"));}  }
class C{  public void shutdown(int statusCode) throws IOException {synchronized (spdyWriter) {    int lastGoodStreamId;synchronized (this) {      if (shutdown) {        return;      }      shutdown=true;      lastGoodStreamId=this.lastGoodStreamId;    }    spdyWriter.goAway(0,lastGoodStreamId,statusCode);  }}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 groundAnchorA,Vector2 groundAnchorB,Vector2 anchorA,Vector2 anchorB,float ratio){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.groundAnchorA.set(groundAnchorA);  this.groundAnchorB.set(groundAnchorB);  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  lengthA=anchorA.dst(groundAnchorA);  lengthB=anchorB.dst(groundAnchorB);  this.ratio=ratio;  float C=lengthA + ratio * lengthB;  maxLengthA=C - ratio * minPulleyLength;  maxLengthB=(C - minPulleyLength) / ratio;}  }
class C{  public void fastForwardTimestamp(long newMinimumTimestamp){  availableTimestamps.fastForwardTo(newMinimumTimestamp);}  }
class C{  public Boolean isSeSparseSupported(){  return seSparseSupported;}  }
class C{  private Method findToStringMethod(Class<?> cls){  Method matched=null;  Class<?> loopCls=cls;  while (loopCls != null && matched == null) {    Method[] methods=loopCls.getDeclaredMethods();    for (    Method method : methods) {      ToString toString=method.getAnnotation(ToString.class);      if (toString != null) {        if (matched != null) {          throw new IllegalStateException("Two methods are annotated with @ToString");        }        matched=method;      }    }    loopCls=loopCls.getSuperclass();  }  return matched;}  }
class C{  public void tableChanged(WTableModelEvent e){  boolean isUpdate=(e.getType() == WTableModelEvent.CONTENTS_CHANGED);  if (!isUpdate) {    calculate();    return;  }  int row=e.getFirstRow();  int col=e.getColumn();  boolean isInvoice=(e.getModel().equals(invoiceTable.getModel()));  boolean isAutoWriteOff=autoWriteOff.isSelected();  String msg=writeOff(row,col,isInvoice,paymentTable,invoiceTable,isAutoWriteOff);  if (msg != null && msg.length() > 0)   FDialog.warn(form.getWindowNo(),"AllocationWriteOffWarn");  calculate();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.297 -0500",hash_original_method="F3C5081F1B5CC0FD86B00194F6A2466A",hash_generated_method="648FAF5C1249CCF2DF0A74AC1A625A7A") private int column(){  return column(this.pointer);}  }
class C{  public static void textRight(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws),(float)(ys + hs));  draw();}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service");  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  validateStartState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public long eventIndex(){  return eventIndex;}  }
class C{  public void updateBinaryStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void close(){  if (currentContext == this) {    currentContext=null;  }}  }
class C{  @Override public void clearTable(){  deleteKVTable();  createKVTable();}  }
class C{  public boolean contains(char val){  return index(val) >= 0;}  }
class C{  public BlockBTreeLeafNode(BTreeBuilderInfo builderInfos,int metadataIndex,long nodeNumber){  DataFileFooter footer=builderInfos.getFooterList().get(metadataIndex);  BlockletMinMaxIndex minMaxIndex=footer.getBlockletIndex().getMinMaxIndex();  maxKeyOfColumns=minMaxIndex.getMaxValues();  minKeyOfColumns=minMaxIndex.getMinValues();  numberOfKeys=1;  this.nodeNumber=nodeNumber;  this.blockInfo=footer.getTableBlockInfo();}  }
class C{  public static boolean download(ProgressUpdateListener progressListener,String url,String folderPath,String saveFileName,HeaderPair... headers){  return EspHttpDownloadUtil.download(progressListener,url,folderPath,saveFileName,headers);}  }
class C{  private boolean checkForLaterPickUp(RouteLocation rl,RouteLocation rld,Car car){  if (rl != rld && rld.getName().equals(car.getLocationName())) {    if (car.isCaboose() || car.isPassenger() || car.hasFred()) {      return false;    }    if (car.getLocation().isStaging()) {      return false;    }    if (!checkPickUpTrainDirection(car,rld)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoPickupLaterDirection"),new Object[]{car.toString(),rld.getName(),rld.getId()}));      return false;    }    if (!rld.isPickUpAllowed()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoPickupLater"),new Object[]{car.toString(),rld.getName(),rld.getId()}));      return false;    }    if (rld.getMaxCarMoves() - rld.getCarMoves() <= 0) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoPickupLaterMoves"),new Object[]{car.toString(),rld.getName(),rld.getId()}));      return false;    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildPickupLaterOkay"),new Object[]{car.toString(),rld.getName(),rld.getId()}));    return true;  }  return false;}  }
class C{  public void translate(int x,int y){  if (x != 0 || y != 0) {    transform.translate(x,y);    transformStack.add(TransformStackElement.createTranslateElement(x,y));  }}  }
class C{  private void assertIonNotEqImpliesHashNotEq(final String s1,final String s2){  final IonValue v1=oneValue(s1);  final IonValue v2=oneValue(s2);  assertTrue("v1 should be not equal to v2",!v1.equals(v2));  int hashCode1=v1.hashCode();  int hashCode2=v2.hashCode();  if (hashCode1 == hashCode2) {    fail(String.format("Unequal IonValues should have distinct " + "hash codes:\n" + " v1 %1$s (hash %2$x)\n"+ " v2 %3$s (hash %4$x)",v1,hashCode1,v2,hashCode2));  }}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  public SourcePrinter(PrintStream out,String[] tokenNames){  this(out,tokenNames,true);}  }
class C{  public boolean isPrinted(){  return m_vo.AD_Process_ID != 0;}  }
class C{  public static void openView(File indicatorFile){  IndicatorViewPart view=openView();  view.setInputElement(indicatorFile);}  }
class C{  private Icon parseIconType(IconType iconType){  List<Icon> icons=Utils.getIcons();  for (  Icon icon : icons) {    if (icon.getIconType().equals(iconType)) {      return icon;    }  }  throw new IllegalArgumentException("Correct icon type not specified.");}  }
class C{  public static double area(Coordinate a,Coordinate b,Coordinate c){  return Math.abs(((c.x - a.x) * (b.y - a.y) - (b.x - a.x) * (c.y - a.y)) / 2);}  }
class C{  public String createQuota(String path,Long fsSize,boolean bThresholdsIncludeOverhead,boolean bIncludeSnapshots,Long... thresholds) throws IsilonException {  IsilonSmartQuota quota;  if (thresholds != null && thresholds.length > 0 && (thresholds[0] > 0 || thresholds[1] > 0 || thresholds[2] > 0)) {    quota=constructIsilonSmartQuotaObjectWithThreshold(path,"directory",fsSize,bThresholdsIncludeOverhead,bIncludeSnapshots,thresholds);    if (thresholds[0] > 0) {      quota.setContainer(true);    }  } else {    quota=new IsilonSmartQuota(path,bThresholdsIncludeOverhead,bIncludeSnapshots);  }  sLogger.debug("IsilonApi createQuota {} - start",path);  String quotaId=create(_baseUrl.resolve(URI_QUOTAS),"quota",quota);  sLogger.debug("IsilonApi createQuota {} - complete",path);  return quotaId;}  }
class C{  public static double nextCauchy(RandomEngine randomGenerator){  return Math.tan(Math.PI * randomGenerator.raw());}  }
class C{  public boolean atEOF() throws IOException {  int ch=this.currentReader.pbReader.read();  while (ch < 0) {    if (this.readers.empty()) {      return true;    }    this.currentReader.pbReader.close();    this.currentReader=(StackedReader)this.readers.pop();    ch=this.currentReader.pbReader.read();  }  this.currentReader.pbReader.unread(ch);  return false;}  }
class C{  public int validateAnswers(Boolean markCompleted){  FormEntryController formEntryController=this.mFormEntryController;  FormEntryModel formEntryModel=formEntryController.getModel();  FormEntryModel formEntryModelToBeValidated=new FormEntryModel(formEntryModel.getForm());  FormEntryController formEntryControllerToBeValidated=new FormEntryController(formEntryModelToBeValidated);  FormController formControllerToBeValidated=new FormController(this.getMediaFolder(),formEntryControllerToBeValidated,this.getInstancePath());  formControllerToBeValidated.jumpToIndex(FormIndex.createBeginningOfFormIndex());  int event;  while ((event=formControllerToBeValidated.stepToNextEvent(FormController.STEP_INTO_GROUP)) != FormEntryController.EVENT_END_OF_FORM) {    if (event != FormEntryController.EVENT_QUESTION) {      continue;    } else {      FormIndex formControllerToBeValidatedFormIndex=formControllerToBeValidated.getFormIndex();      int saveStatus=formControllerToBeValidated.answerQuestion(formControllerToBeValidated.getQuestionPrompt().getAnswerValue());      if (markCompleted && saveStatus != FormEntryController.ANSWER_OK) {        this.jumpToIndex(formControllerToBeValidatedFormIndex);        return saveStatus;      }    }  }  return FormEntryController.ANSWER_OK;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.448 -0500",hash_original_method="762DE6C819CD7377980A2753C88FB126",hash_generated_method="A959C451F098B68BBA6E50D6EF2D1D2C") public char[] readPassword(){synchronized (CONSOLE_LOCK) {    int previousState=setEcho(false,0);    try {      String password=readLine();      writer.println();      return (password == null) ? null : password.toCharArray();    }  finally {      setEcho(true,previousState);    }  }}  }
class C{  public void start(boolean reusePort) throws Exception {  Map<String,String> prevContext=MDC.getCopyOfContextMap();  MDC.clear();  try {    if (startedBefore) {      waitOnSolr=false;      int port=reusePort ? lastPort : this.config.port;      init(port);    } else {      startedBefore=true;    }    if (!server.isRunning()) {      server.start();    }synchronized (JettySolrRunner.this) {      int cnt=0;      while (!waitOnSolr) {        this.wait(100);        if (cnt++ == 5) {          throw new RuntimeException("Jetty/Solr unresponsive");        }      }    }    if (config.waitForLoadingCoresToFinishMs != null && config.waitForLoadingCoresToFinishMs > 0L)     waitForLoadingCoresToFinish(config.waitForLoadingCoresToFinishMs);  }  finally {    if (prevContext != null) {      MDC.setContextMap(prevContext);    } else {      MDC.clear();    }  }}  }
class C{  protected void appendPayload(int i){  appendPayload(intToByteArray(i));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.068 -0500",hash_original_method="E61B8AD2F95A2B414E32399D6E0EB15F",hash_generated_method="E61B8AD2F95A2B414E32399D6E0EB15F") GLES20Canvas(boolean translucent){  this(false,translucent);}  }
class C{  public void addAll(Collection<? extends T> collection){  int pos;synchronized (mLock) {    pos=getItemCount();    mObjects.addAll(collection);  }  if (mNotifyOnChange)   notifyItemRangeInserted(pos,collection.size());}  }
class C{  private void onHPChange(final int amount){  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {    if (amount > 0) {      addTextIndicator("+" + amount,NotificationType.POSITIVE);    } else {      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);    }  }}  }
class C{  public ChunkSection(char[] types,NibbleArray skyLight,NibbleArray blockLight){  if (types.length != ARRAY_SIZE || skyLight.size() != ARRAY_SIZE || blockLight.size() != ARRAY_SIZE) {    throw new IllegalArgumentException("An array length was not " + ARRAY_SIZE + ": "+ types.length+ " "+ skyLight.size()+ " "+ blockLight.size());  }  this.types=types;  this.skyLight=skyLight;  this.blockLight=blockLight;  recount();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.100 -0400",hash_original_method="EA6927FE1153883C196390845CF6A961",hash_generated_method="696999E8B667193198C23169978162B1") synchronized void shutoffBluetooth(){  if (mAdapterSdpHandles != null)   removeReservedServiceRecordsNative(mAdapterSdpHandles);  setBluetoothTetheringNative(false,BluetoothPanProfileHandler.NAP_ROLE,BluetoothPanProfileHandler.NAP_BRIDGE);  tearDownNativeDataNative();}  }
class C{  public ExtractMethodDescriptor(){  super(IJavaRefactorings.EXTRACT_METHOD);}  }
class C{  public Line(Vec3 origin,Vec3 direction){  if (origin == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","constructor","The origin is null"));  }  if (direction == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","constructor","The direction is null"));  }  this.origin.set(origin);  this.direction.set(direction);}  }
class C{  public HashMap<String,String> status() throws Exception {  TungstenProperties status=runScript(CMD_STATUS);  return status.hashMap();}  }
class C{  public HITSWithPriors(Hypergraph<V,E> g,Function<V,HITS.Scores> vertex_priors,double alpha){  super(g,Functions.constant(1.0),vertex_priors,alpha);  disappearing_potential=new HITS.Scores(0,0);}  }
class C{  public void updateUI(){  setUI((PopupMenuUI)UIManager.getUI(this));}  }
class C{  public Vertex evaluateFormulaTemplate(Vertex formula,Map<Vertex,Vertex> variables,long startTime,Network network){  try {    List<Vertex> relationships=formula.orderedRelations(Primitive.WORD);    if (relationships == null) {      return null;    }    List<Vertex> words=new ArrayList<Vertex>(relationships.size());    boolean caseSensitive=false;    long processTime=this.maxStateProcess;    if (getBot().isDebugFiner()) {      processTime=processTime * 10;    }    for (    Vertex word : relationships) {      if ((System.currentTimeMillis() - startTime) > processTime) {        throw new SelfExecutionException(formula,"Max formula processing time exceeded");      }      Vertex result=null;      if (word.is(Primitive.WILDCARD)) {        Vertex value=variables.get(word);        if (value == null) {          return null;        }        result=value;      } else       if (word.instanceOf(Primitive.VARIABLE)) {        Vertex value=variables.get(word);        if (value == null) {          if (word.hasName()) {            value=variables.get(word.getName());          }          if (value == null) {            return null;          }        }        result=value;      } else       if (word.instanceOf(Primitive.EXPRESSION) || word.instanceOf(Primitive.EQUATION)) {        Vertex quotient=SelfInterpreter.getInterpreter().evaluateExpression(word,variables,network,startTime,processTime,0);        variables.remove(network.createVertex(Primitive.RETURN));        if (quotient == null) {          return null;        }        while (quotient.instanceOf(Primitive.FORMULA)) {          this.recursiveFormulaDepth++;          if (this.recursiveFormulaDepth > MAX_DEPTH) {            throw new SelfExecutionException(word,"Max recursive template formula execution");          }          quotient=evaluateFormulaTemplate(quotient,variables,startTime,network);          this.recursiveFormulaDepth--;          if (quotient == null) {            return null;          }        }        if (quotient.is(Primitive.NULL)) {          return null;        } else         if (quotient.is(Primitive.RETURN)) {        } else {          result=quotient;        }        if (result != null && result.hasRelationship(Primitive.TYPE,Primitive.CASESENSITVE)) {          caseSensitive=true;        }      } else {        result=word;      }      if (result != null) {        if (result.instanceOf(Primitive.WORD)) {          words.add(result);        } else         if (result.instanceOf(Primitive.SENTENCE) || result.instanceOf(Primitive.FRAGMENT)) {          if (relationships.size() == 1 && (result.instanceOf(Primitive.SENTENCE))) {            return result;          }          Vertex space=null;          Vertex sentenceWithSpaces=result;          if (result.getData() instanceof String) {            if (!result.hasRelationship(Primitive.TYPE,Primitive.SPACE) && !result.hasRelationship(Primitive.WORD,Primitive.SPACE) && ((result.getRelationships(Primitive.WORD) == null) || (result.getRelationships(Primitive.WORD).size() > 1))) {              sentenceWithSpaces=network.createSentence((String)result.getData(),true,false,true);            }          } else {            if (!result.hasRelationship(Primitive.TYPE,Primitive.SPACE) && !result.hasRelationship(Primitive.WORD,Primitive.SPACE)) {              space=network.createVertex(Primitive.SPACE);            }          }          List<Vertex> nestedWords=sentenceWithSpaces.orderedRelations(Primitive.WORD);          if (nestedWords != null) {            for (int index=0; index < nestedWords.size(); index++) {              Vertex nestedWord=nestedWords.get(index);              words.add(nestedWord);              if ((space != null) && (index < (nestedWords.size() - 1))) {                words.add(space);              }            }          }        } else {          words.add(result);        }      }    }    Vertex sentence=network.createTemporyVertex();    sentence.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);    if (formula.hasRelationship(Primitive.TYPE,Primitive.SPACE) || formula.hasRelationship(Primitive.WORD,Primitive.SPACE)) {      sentence.addRelationship(Primitive.TYPE,Primitive.SPACE);    }    if (caseSensitive) {      sentence.addRelationship(Primitive.TYPE,Primitive.CASESENSITVE);    }    Vertex previous=network.createVertex(Primitive.NULL);    for (int index=0; index < words.size(); index++) {      if ((System.currentTimeMillis() - startTime) > processTime) {        throw new SelfExecutionException(formula,"Max formula processing time exceeded");      }      Vertex word=words.get(index);      if (word.is(Primitive.SPACE)) {        sentence.addRelationship(Primitive.WORD,word,index);        continue;      }      Vertex next=null;      if (words.size() > (index + 1)) {        next=words.get(index + 1);        int nextIndex=index + 2;        while (next.is(Primitive.SPACE) && (nextIndex < words.size())) {          next=words.get(nextIndex);          nextIndex++;        }      } else {        next=network.createVertex(Primitive.NULL);      }      word=getWordFollowing(word,previous,next,network);      sentence.addRelationship(Primitive.WORD,word,index);      previous=word;    }    return createSentenceText(sentence,network);  } catch (  Exception exception) {    log(exception);    return null;  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.876 -0400",hash_original_method="BFDD0D81442D584539DB6A0045123B22",hash_generated_method="5AD3DAC277D6EF26CECBD27F6EF627C5") public static IOFileFilter trueFileFilter(){  return TrueFileFilter.TRUE;}  }
class C{  void addKey(KeyCacheObject key,GridCacheVersion ver,boolean near){  assert key != null;  assert ver != null;  entries.add(new CacheEvictionEntry(key,ver,near));}  }
class C{  public static int compareByteArrays(byte[] left,byte[] right){  for (int i=0, j=0; i < left.length && j < right.length; i++, j++) {    int a=(left[i] & 0xff);    int b=(right[j] & 0xff);    if (a != b) {      return a - b;    }  }  return left.length - right.length;}  }
class C{  protected void sendToProducer(MessageProducer producer,Destination producerDestination,Message message) throws JMSException {  producer.send(producerDestination,message);}  }
class C{  public final void init(KeyManager[] km,TrustManager[] tm,SecureRandom random) throws KeyManagementException {  contextSpi.engineInit(km,tm,random);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public mat4 mul(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  this.m[0]=a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3];  this.m[1]=a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3];  this.m[2]=a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3];  this.m[3]=a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3];  this.m[4]=a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7];  this.m[5]=a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7];  this.m[6]=a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7];  this.m[7]=a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7];  this.m[8]=a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11];  this.m[9]=a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11];  this.m[10]=a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11];  this.m[11]=a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11];  this.m[12]=a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15];  this.m[13]=a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15];  this.m[14]=a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15];  this.m[15]=a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15];  return this;}  }
class C{  public void shouldHandleInitialSchedulingFailure() throws Throwable {  ScheduledExecutorService executor=Executors.newScheduledThreadPool(0);  executor.shutdownNow();  Waiter waiter=new Waiter();  @SuppressWarnings("unchecked") FailsafeFuture<Void> future=Failsafe.with(new RetryPolicy().retryWhen(null).retryOn(Exception.class)).with(executor).run(null);  assertThrows(null,ExecutionException.class,RejectedExecutionException.class);}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public static String stringToBase64(final String data){  return Base64.encodeBase64String(ConversionUtils.stringToArray(data));}  }
class C{  public static boolean isPartitionedRegion(final Region<?,?> r){  if (r == null) {    throw new IllegalArgumentException(LocalizedStrings.PartitionRegionHelper_ARGUMENT_REGION_IS_NULL.toString());  }  return r instanceof PartitionedRegion ? true : false;}  }
class C{  public MalformedChunkCodingException(){  super();}  }
class C{  public int read(char[] outputBuffer,int offset,int size) throws IOException {  try {    int charsRead=0;    int bufferLength=this.buffer.length();    if ((offset + size) > outputBuffer.length) {      size=outputBuffer.length - offset;    }    while (charsRead < size) {      String str="";      char ch;      if (this.bufferIndex >= bufferLength) {        str=XMLUtil.read(this.reader,'&');        ch=str.charAt(0);      } else {        ch=this.buffer.charAt(this.bufferIndex);        this.bufferIndex++;        outputBuffer[charsRead]=ch;        charsRead++;        continue;      }      if (ch == '<') {        this.reader.unread(ch);        break;      }      if ((ch == '&') && (str.length() > 1)) {        if (str.charAt(1) == '#') {          ch=XMLUtil.processCharLiteral(str);        } else {          XMLUtil.processEntity(str,this.reader,this.resolver);          continue;        }      }      outputBuffer[charsRead]=ch;      charsRead++;    }    if (charsRead == 0) {      charsRead=-1;    }    return charsRead;  } catch (  XMLParseException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public static BufferedImage readImage(Object source) throws IOException {  ImageInputStream stream=ImageIO.createImageInputStream(source);  ImageReader reader=ImageIO.getImageReaders(stream).next();  reader.setInput(stream);  ImageReadParam param=reader.getDefaultReadParam();  ImageTypeSpecifier typeToUse=null;  for (Iterator i=reader.getImageTypes(0); i.hasNext(); ) {    ImageTypeSpecifier type=(ImageTypeSpecifier)i.next();    if (type.getColorModel().getColorSpace().isCS_sRGB())     typeToUse=type;  }  if (typeToUse != null)   param.setDestinationType(typeToUse);  BufferedImage b=reader.read(0,param);  reader.dispose();  stream.close();  return b;}  }
class C{  private void randomize(){  topFaces=new int[NUMBER_OF_DICE];  for (int i=0; i < NUMBER_OF_DICE; i++) {    int topFace=Rand.roll1D6();    topFaces[i]=topFace;  }}  }
class C{  public FisheyeTreeFilter(String group,String sources,int distance){  super(group);  m_sources=sources;  m_threshold=-distance;  m_groupP=new InGroupPredicate(PrefuseLib.getGroupName(group,Graph.NODES));}  }
class C{  private void onPaint(final PaintEvent event){  final Rectangle rect=getClientArea();  if (rect.width == 0 || rect.height == 0) {    return;  }  gc=event.gc;  gc.setAntialias(SWT.ON);  final Point buttonSize=computeButtonSize();  drawSwitchButton(buttonSize);  drawText(buttonSize);  if (borderColor != null) {    drawBorder();  }}  }
class C{  public boolean printManifest(boolean isPreview){  if (isModified()) {    new TrainManifest(this);    try {      new JsonManifest(this).build();    } catch (    IOException ex) {      log.error("Unable to create JSON manifest {}",ex.getLocalizedMessage());    }    if (Setup.isGenerateCsvManifestEnabled()) {      new TrainCsvManifest(this);    }  }  File file=TrainManagerXml.instance().getTrainManifestFile(getName());  if (!file.exists()) {    log.warn("Manifest file missing for train {}",getName());    return false;  }  if (isPreview && Setup.isManifestEditorEnabled()) {    TrainPrintUtilities.openDesktopEditor(file);    return true;  }  String logoURL=Setup.NONE;  if (!getManifestLogoURL().equals(NONE)) {    logoURL=FileUtil.getExternalFilename(getManifestLogoURL());  } else   if (!Setup.getManifestLogoURL().equals(Setup.NONE)) {    logoURL=FileUtil.getExternalFilename(Setup.getManifestLogoURL());  }  Location departs=LocationManager.instance().getLocationByName(getTrainDepartsName());  String printerName=Location.NONE;  if (departs != null) {    printerName=departs.getDefaultPrinterName();  }  String name=getDescription();  if (name.length() > TrainCommon.getManifestHeaderLineLength() / 2) {    name=name.substring(0,TrainCommon.getManifestHeaderLineLength() / 2);  }  TrainPrintUtilities.printReport(file,name,isPreview,Setup.getFontName(),false,logoURL,printerName,Setup.getManifestOrientation(),Setup.getManifestFontSize());  if (!isPreview) {    setPrinted(true);  }  return true;}  }
class C{  private void enableRecoverPointTag(DbClient dbClient,WBEMClient client,CIMObjectPath deviceGroupPath){  try {    boolean isRPTagNeeded=false;    for (    VolumeURIHLU volUriHlu : _volumeURIHLUs) {      URI volumeURI=volUriHlu.getVolumeURI();      BlockObject bo=null;      if (URIUtil.isType(volumeURI,BlockSnapshot.class)) {        bo=dbClient.queryObject(BlockSnapshot.class,volumeURI);      } else       if (URIUtil.isType(volumeURI,Volume.class)) {        bo=dbClient.queryObject(Volume.class,volumeURI);      }      if (bo != null && BlockObject.checkForRP(dbClient,bo.getId())) {        isRPTagNeeded=true;        break;      }    }    if (isRPTagNeeded) {      _log.info("Attempting to enable RecoverPoint tag on Device Group : " + deviceGroupPath.toString());      CIMPropertyFactory factoryRef=(CIMPropertyFactory)ControllerServiceImpl.getBean("CIMPropertyFactory");      CIMInstance toUpdate=new CIMInstance(deviceGroupPath,new CIMProperty[]{factoryRef.bool(SmisConstants.EMC_RECOVERPOINT_ENABLED,true)});      _log.debug("Params: " + toUpdate.toString());      client.modifyInstance(toUpdate,SmisConstants.CP_EMC_RECOVERPOINT_ENABLED);      _log.info(String.format("Device group has been successfully set with RecoverPoint tag "));    }  } catch (  WBEMException e) {    _log.error("Encountered an error while trying to set the RecoverPoint tag",e);  }catch (  DatabaseException e) {    _log.error("Encountered an error while trying to set the RecoverPoint tag",e);  }}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  public static boolean verifySignature(byte[] publicKey,byte[] message,byte[] signature){  return curve_sigs.curve25519_verify(SHA512Provider,signature,publicKey,message,message.length) == 0;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {      zzAtEOF=true;      return null;    } else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{          return com.intellij.psi.TokenType.BAD_CHARACTER;        }case 65:      break;case 2:{      return com.intellij.psi.TokenType.WHITE_SPACE;    }case 66:  break;case 3:{  return IDENTIFIER;}case 67:break;case 4:{return INTEGER_LITERAL;}case 68:break;case 5:{return DIVISION;}case 69:break;case 6:{return DOT;}case 70:break;case 7:{return MINUS;}case 71:break;case 8:{return CHARACTER_LITERAL;}case 72:break;case 9:{return STRING_LITERAL;}case 73:break;case 10:{return PLUS;}case 74:break;case 11:{return RBRACE;}case 75:break;case 12:{return COMMA;}case 76:break;case 13:{return COLON;}case 77:break;case 14:{return LPARENTH;}case 78:break;case 15:{return RPARENTH;}case 79:break;case 16:{return LBRACKET;}case 80:break;case 17:{return RBRACKET;}case 81:break;case 18:{return LBRACE;}case 82:break;case 19:{return AT;}case 83:break;case 20:{return QUESTION;}case 84:break;case 21:{return DOLLAR;}case 85:break;case 22:{return HASH;}case 86:break;case 23:{return MULTIPLY;}case 87:break;case 24:{return MODULO;}case 88:break;case 25:{return NEGATE;}case 89:break;case 26:{return EQ;}case 90:break;case 27:{return LESS;}case 91:break;case 28:{return GREATER;}case 92:break;case 29:{return AND;}case 93:break;case 30:{return OR;}case 94:break;case 31:{return XOR;}case 95:break;case 32:{return NOT;}case 96:break;case 33:{return BIG_INTEGER_LITERAL;}case 97:break;case 34:{return DOUBLE_LITERAL;}case 98:break;case 35:{return LINE_COMMENT;}case 99:break;case 36:{return MINUS_MINUS;}case 100:break;case 37:{return PLUS_PLUS;}case 101:break;case 38:{return NOT_EQUAL;}case 102:break;case 39:{return EQUAL;}case 103:break;case 40:{return LESS_EQUAL;}case 104:break;case 41:{return SHIFT_LEFT;}case 105:break;case 42:{return GREATER_EQUAL;}case 106:break;case 43:{return SHIFT_RIGHT;}case 107:break;case 44:{return AND_AND;}case 108:break;case 45:{return OR_OR;}case 109:break;case 46:{return DO;}case 110:break;case 47:{return OR_KEYWORD;}case 111:break;case 48:{return IN;}case 112:break;case 49:{return IF;}case 113:break;case 50:{return BIG_DECIMAL_LITERAL;}case 114:break;case 51:{return AND_KEYWORD;}case 115:break;case 52:{return NOT_KEYWORD;}case 116:break;case 53:{return NEW_KEYWORD;}case 117:break;case 54:{return DEF;}case 118:break;case 55:{return FOR;}case 119:break;case 56:{return NULL_KEYWORD;}case 120:break;case 57:{return TRUE_KEYWORD;}case 121:break;case 58:{return ELSE;}case 122:break;case 59:{return WHILE;}case 123:break;case 60:{return FALSE_KEYWORD;}case 124:break;case 61:{return RETURN;}case 125:break;case 62:{return IMPORT;}case 126:break;case 63:{return FOREACH;}case 127:break;case 64:{return INSTANCEOF_KEYWORD;}case 128:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static void sort(short[] array){  sort(0,array.length,array);}  }
class C{  private boolean isSameAs(byte[] a,byte[] b){  boolean isOkay=true;  if (messageLength != b.length) {    isOkay=false;  }  for (int i=0; i != b.length; i++) {    if (a[i] != b[i]) {      isOkay=false;    }  }  return isOkay;}  }
class C{  @SuppressWarnings({"deprecation","unchecked"}) protected synchronized void aggregateEvalTask(Evaluation eval,Classifier classifier,Instances testData,ClassifierErrorsPlotInstances plotInstances,int setNum,int maxSetNum,String evalLabel){  m_eval.aggregate(eval);  if (m_aggregatedPlotInstances == null) {    m_aggregatedPlotShapes=(ArrayList<Integer>)plotInstances.getPlotShapes().clone();    m_aggregatedPlotSizes=(ArrayList<Object>)plotInstances.getPlotSizes().clone();    m_aggregatedPlotInstances=new Instances(plotInstances.getPlotInstances());  } else {    ArrayList<Object> tmpSizes=(ArrayList<Object>)plotInstances.getPlotSizes().clone();    ArrayList<Integer> tmpShapes=(ArrayList<Integer>)plotInstances.getPlotShapes().clone();    Instances temp=plotInstances.getPlotInstances();    for (int i=0; i < temp.numInstances(); i++) {      m_aggregatedPlotInstances.add(temp.get(i));      m_aggregatedPlotShapes.add(tmpShapes.get(i));      m_aggregatedPlotSizes.add(tmpSizes.get(i));    }  }  m_setsComplete++;  if (m_logger != null) {    if (m_setsComplete < maxSetNum) {      m_logger.statusMessage(statusMessagePrefix() + "Completed (" + m_setsComplete+ ").");    }  }  if (m_setsComplete == maxSetNum) {    try {      AggregateableClassifierErrorsPlotInstances aggPlot=new AggregateableClassifierErrorsPlotInstances();      aggPlot.setInstances(testData);      aggPlot.setPlotInstances(m_aggregatedPlotInstances);      aggPlot.setPlotShapes(m_aggregatedPlotShapes);      aggPlot.setPlotSizes(m_aggregatedPlotSizes);      aggPlot.setPointSizeProportionalToMargin(m_errorPlotPointSizeProportionalToMargin);      aggPlot.getPlotInstances();      String textTitle="";      textTitle+=classifier.getClass().getName();      String textOptions="";      if (classifier instanceof OptionHandler) {        textOptions=Utils.joinOptions(((OptionHandler)classifier).getOptions());      }      textTitle=textTitle.substring(textTitle.lastIndexOf('.') + 1,textTitle.length());      if (evalLabel != null && evalLabel.length() > 0) {        if (!textTitle.toLowerCase().startsWith(evalLabel.toLowerCase())) {          textTitle=evalLabel + " : " + textTitle;        }      }      String resultT="=== Evaluation result ===\n\n" + "Scheme: " + textTitle + "\n"+ ((textOptions.length() > 0) ? "Options: " + textOptions + "\n" : "")+ "Relation: "+ testData.relationName()+ "\n\n"+ m_eval.toSummaryString();      if (testData.classAttribute().isNominal()) {        resultT+="\n" + m_eval.toClassDetailsString() + "\n"+ m_eval.toMatrixString();      }      TextEvent te=new TextEvent(ClassifierPerformanceEvaluator.this,resultT,textTitle);      notifyTextListeners(te);      if (m_visualizableErrorListeners.size() > 0) {        PlotData2D errorD=new PlotData2D(m_aggregatedPlotInstances);        errorD.setShapeSize(m_aggregatedPlotSizes);        errorD.setShapeType(m_aggregatedPlotShapes);        errorD.setPlotName(textTitle + " " + textOptions);        VisualizableErrorEvent vel=new VisualizableErrorEvent(ClassifierPerformanceEvaluator.this,errorD);        notifyVisualizableErrorListeners(vel);        m_PlotInstances.cleanUp();      }      if (testData.classAttribute().isNominal() && m_thresholdListeners.size() > 0) {        ThresholdCurve tc=new ThresholdCurve();        Instances result=tc.getCurve(m_eval.predictions(),0);        result.setRelationName(testData.relationName());        PlotData2D pd=new PlotData2D(result);        String htmlTitle="<html><font size=-2>" + textTitle;        String newOptions="";        if (classifier instanceof OptionHandler) {          String[] options=((OptionHandler)classifier).getOptions();          if (options.length > 0) {            for (int ii=0; ii < options.length; ii++) {              if (options[ii].length() == 0) {                continue;              }              if (options[ii].charAt(0) == '-' && !(options[ii].charAt(1) >= '0' && options[ii].charAt(1) <= '9')) {                newOptions+="<br>";              }              newOptions+=options[ii];            }          }        }        htmlTitle+=" " + newOptions + "<br>"+ " (class: "+ testData.classAttribute().value(0)+ ")"+ "</font></html>";        pd.setPlotName(textTitle + " (class: " + testData.classAttribute().value(0)+ ")");        pd.setPlotNameHTML(htmlTitle);        boolean[] connectPoints=new boolean[result.numInstances()];        for (int jj=1; jj < connectPoints.length; jj++) {          connectPoints[jj]=true;        }        pd.setConnectPoints(connectPoints);        ThresholdDataEvent rde=new ThresholdDataEvent(ClassifierPerformanceEvaluator.this,pd,testData.classAttribute());        notifyThresholdListeners(rde);      }      if (m_logger != null) {        m_logger.statusMessage(statusMessagePrefix() + "Finished.");      }    } catch (    Exception ex) {      if (m_logger != null) {        m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " problem constructing evaluation results. "+ ex.getMessage());      }      ex.printStackTrace();    } finally {      m_visual.setStatic();      m_PlotInstances=null;      m_setsComplete=0;      m_tasks=null;      m_aggregatedPlotInstances=null;    }  }}  }
class C{  private Configuration checkConfiguration(){  String configKind=_coordinator.getDbConfigPath(_serviceInfo.getName());  Configuration config=_coordinator.queryConfiguration(_coordinator.getSiteId(),configKind,_serviceInfo.getId());  if (config == null) {    config=_coordinator.queryConfiguration(configKind,_serviceInfo.getId());    if (config != null) {      _log.info("Upgrade from pre-yoda release, move dbconfig to new location");      _coordinator.persistServiceConfiguration(_coordinator.getSiteId(),config);      return config;    }    ConfigurationImpl cfg=new ConfigurationImpl();    cfg.setId(_serviceInfo.getId());    cfg.setKind(configKind);    cfg.setConfig(DbConfigConstants.NODE_ID,_coordinator.getInetAddessLookupMap().getNodeId());    cfg.setConfig(DbConfigConstants.AUTOBOOT,Boolean.TRUE.toString());    List<Configuration> configs=_coordinator.queryAllConfiguration(_coordinator.getSiteId(),configKind);    if (configs.isEmpty()) {      cfg.setConfig(DbConfigConstants.AUTOBOOT,Boolean.FALSE.toString());    }    _coordinator.persistServiceConfiguration(_coordinator.getSiteId(),cfg);    config=cfg;  }  return config;}  }
class C{  public UTF8StreamReader(InputStream inputStream,int capacity){  _bytes=new byte[capacity];  _inputStream=inputStream;}  }
class C{  public static boolean containsWhitespace(CharSequence str){  if (!hasLength(str)) {    return false;  }  int strLen=str.length();  for (int i=0; i < strLen; i++) {    if (Character.isWhitespace(str.charAt(i))) {      return true;    }  }  return false;}  }
class C{  public void saveUserData(ObaUserDataItem user){  dynamoDbClient.saveItem(user);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public CNativeFunctionViewFilterFieldMenu(final JTextField filterField){  add(new CFilterByInstructionAction(filterField));  add(new CFilterByNodesAction(filterField));  add(new CFilterByEdgesAction(filterField));}  }
class C{  private void processBinaryMeta(QueryEntity qryEntity,TypeDescriptor d) throws IgniteCheckedException {  Map<String,String> aliases=qryEntity.getAliases();  if (aliases == null)   aliases=Collections.emptyMap();  for (  Map.Entry<String,String> entry : qryEntity.getFields().entrySet()) {    BinaryProperty prop=buildBinaryProperty(entry.getKey(),U.classForName(entry.getValue(),Object.class,true),aliases);    d.addProperty(prop,false);  }  processIndexes(qryEntity,d);}  }
class C{  public ShowDeclarationsPopupDialog(Shell parent){  super(parent,SWT.NO_TRIM,true,false,true,true,true,"Definitions and Declarations","");  this.parent=parent;  this.showAll=true;  this.setInfoText(ShowDeclarationsHandler.infoText(showAll));  this.editor=EditorUtil.getTLAEditorWithFocus();  if (this.editor != null) {    module=ResourceHelper.getModuleNode(editor.getModuleName());  }  System.out.println("Created new popup with showAll = " + showAll);}  }
class C{  @Override public void run(){  amIActive=true;  String inputTextFile=null;  String inputRasterFiles=null;  String outputTextFile=null;  boolean interpolateValues=false;  boolean includeStatistics=false;  String[] gatHeaderFile;  List<WhiteboxRaster> gatGrids=new ArrayList<>();  String fileName;  int numberOfLines=0;  int counter;  String tempLine;  String[] line;  int id;  double xCoord;  double yCoord;  String name;  int xGridcell;  int yGridcell;  double deltaX;  double deltaY;  int dXi;  int dYi;  double average;  double w;  double[] ww=new double[4];  double value;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double min;  double max;  double sum;  int sumCount;  double mean=0;  double neighbourValue;  FileWriter streamWriter=null;  String outputLine;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputTextFile=args[i];    } else     if (i == 1) {      inputRasterFiles=args[i];    } else     if (i == 2) {      outputTextFile=args[i];    } else     if (i == 3) {      interpolateValues=Boolean.parseBoolean(args[i]);    } else     if (i == 4) {      includeStatistics=Boolean.parseBoolean(args[i]);    }  }  if ((inputTextFile == null) || (inputRasterFiles == null) || (outputTextFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    gatHeaderFile=inputRasterFiles.split(";");    for (int i=0; i <= gatHeaderFile.length - 1; i++) {      WhiteboxRaster gatGrid=new WhiteboxRaster(gatHeaderFile[i],"r");      gatGrids.add(gatGrid);    }    BufferedReader bufferedReader=new BufferedReader(new FileReader(inputTextFile));    streamWriter=new FileWriter(outputTextFile,false);    outputLine="ID" + "\t" + "X"+ "\t"+ "Y";    for (    WhiteboxRaster gatGrid : gatGrids) {      fileName=gatGrid.getShortHeaderFile();      outputLine=outputLine + "\t" + fileName;      if (includeStatistics) {        outputLine=outputLine + "\t" + fileName+ "_min"+ "\t"+ fileName+ "_max"+ "\t"+ fileName+ "_mean";      }    }    outputLine=outputLine + "\t" + "Name";    streamWriter.write(outputLine + System.lineSeparator());    while ((tempLine=bufferedReader.readLine()) != null) {      numberOfLines=numberOfLines + 1;    }    bufferedReader.close();    bufferedReader=new BufferedReader(new FileReader(inputTextFile));    tempLine=bufferedReader.readLine();    counter=1;    while ((tempLine=bufferedReader.readLine()) != null) {      line=tempLine.split("\t");      counter=counter + 1;      if ((line.length != 3) && (line.length != 4)) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains an unexpected number of elements.");        return;      }      if (!IsInteger(line[0]) || !IsDouble(line[1]) || !IsDouble(line[2])) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains a value of an expected type.");        return;      }      id=Integer.parseInt(line[0]);      xCoord=Double.parseDouble(line[1]);      yCoord=Double.parseDouble(line[2]);      if (line.length == 4) {        name=line[3];      } else {        name="";      }      outputLine=id + "\t" + xCoord+ "\t"+ yCoord;      for (      WhiteboxRaster gatGrid : gatGrids) {        gridRes=gatGrid.getCellSizeX();        xGridcell=(int)((xCoord - gatGrid.getWest()) / gridRes);        yGridcell=(int)((yCoord - gatGrid.getSouth()) / gridRes);        deltaX=xCoord - ((xGridcell + 0.5) * gridRes + gatGrid.getWest());        deltaY=yCoord - ((yGridcell + 0.5) * gridRes + gatGrid.getSouth());        yGridcell=InvertYCoord(gatGrid,yGridcell);        if (deltaX > 0) {          dXi=1;        } else {          dXi=-1;        }        if (deltaY > 0) {          dYi=-1;        } else {          dYi=1;        }        deltaX=Math.abs(deltaX);        deltaY=Math.abs(deltaY);        if (interpolateValues) {          if ((gatGrid.getValue(yGridcell,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell + dYi,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell,xGridcell + dXi) == gatGrid.getNoDataValue())|| (gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) == gatGrid.getNoDataValue())) {            value=gatGrid.getNoDataValue();          } else           if (deltaX == 0 && deltaY == 0) {            value=gatGrid.getValue(yGridcell,xGridcell);          } else {            ww[0]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(deltaY,2));            average=gatGrid.getValue(yGridcell,xGridcell) * ww[0];            w=ww[0];            ww[1]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell) * ww[1];            w=w + ww[1];            ww[2]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(deltaY,2));            average=average + gatGrid.getValue(yGridcell,xGridcell + dXi) * ww[2];            w=w + ww[2];            ww[3]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) * ww[3];            w=w + ww[3];            value=average / w;          }        } else {          value=gatGrid.getValue(yGridcell,xGridcell);        }        outputLine=outputLine + "\t" + value;        if (includeStatistics) {          value=gatGrid.getValue(yGridcell,xGridcell);          if (value == gatGrid.getNoDataValue()) {            min=Double.MAX_VALUE;            max=Double.MIN_VALUE;            sum=0;            sumCount=0;            mean=gatGrid.getNoDataValue();          } else {            min=value;            max=value;            sum=value;            sumCount=1;          }          for (int c=0; c < 8; c++) {            neighbourValue=gatGrid.getValue(yGridcell + yd[c],xGridcell + xd[c]);            if (neighbourValue != gatGrid.getNoDataValue()) {              if (neighbourValue < min) {                min=neighbourValue;              }              if (neighbourValue > max) {                max=neighbourValue;              }              sum=sum + neighbourValue;              sumCount=sumCount + 1;            }          }          if (sumCount == 0) {            min=gatGrid.getNoDataValue();            max=gatGrid.getNoDataValue();          } else {            mean=sum / sumCount;          }          outputLine=outputLine + "\t" + min+ "\t"+ max+ "\t"+ mean;        }      }      if (name != "") {        outputLine=outputLine + "\t" + name;      }      streamWriter.write(outputLine + System.lineSeparator());      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / numberOfLines);      updateProgress("",(int)progress);    }    for (    WhiteboxRaster gatGrid : gatGrids) {      gatGrid.close();    }    streamWriter.close();  } catch (  IOException|HeadlessException|NumberFormatException e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CenterEvent(Object source,double lat,double lon){  super(source);  latitude=lat;  longitude=lon;}  }
class C{  public CallSpec<Void,HttpError> markConversationAsRead(String conversationId,String userId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/users/{user_id}/conversations/{conversation_id}/read",false).pathParam("user_id",userId).pathParam("conversation_id",conversationId).responseAs(Void.class).build();}  }
class C{  private void decorateFromResourceData(final IResource resource,final IDecoration decoration,final ResourceData resourceData){  final List<String> suffixList=new ArrayList<String>();  if (resourceData == null) {    return;  }  decoration.addOverlay(imageHelper.getImageDescriptor(TFS_ICON));  final IPreferenceStore preferenceStore=TFSCommonUIClientPlugin.getDefault().getPreferenceStore();  if (resource.getType() == IResource.FILE || preferenceStore.getBoolean(UIPreferenceConstants.LABEL_DECORATION_DECORATE_FOLDERS)) {    if (preferenceStore.getBoolean(UIPreferenceConstants.LABEL_DECORATION_SHOW_CHANGESET) && resourceData.getChangesetID() != 0) {      suffixList.add(Integer.toString(resourceData.getChangesetID()));    }    if (preferenceStore.getBoolean(UIPreferenceConstants.LABEL_DECORATION_SHOW_SERVER_ITEM)) {      suffixList.add(resourceData.getServerItem());    }    if (suffixList.size() > 0) {      final StringBuffer suffix=new StringBuffer();      suffix.append(" [");      for (int i=0; i < suffixList.size(); i++) {        if (i > 0) {          suffix.append(", ");        }        suffix.append(suffixList.get(i));      }      suffix.append("]");      decoration.addSuffix(suffix.toString());    }  }}  }
class C{  public void initProperties(){  if (this.initProperties) {    return;  }synchronized (this) {    if (this.initProperties) {      return;    }    getBot().memory().loadProperties("Email");    String property=this.bot.memory().getProperty("Email.user");    if (property != null) {      this.username=property;    }    property=this.bot.memory().getProperty("Email.password");    if ((property != null) && (this.username != null)) {      if (property.startsWith("&&")) {        try {          this.password=Utils.decrypt(Utils.KEY,property.substring(2,property.length()));        } catch (        Exception exception) {          this.password=Utils.decrypt(this.username,property);        }      } else {        this.password=Utils.decrypt(this.username,property);      }    }    property=this.bot.memory().getProperty("Email.emailAddress");    if (property != null) {      this.emailAddress=property;      setIsEnabled(true);    }    property=this.bot.memory().getProperty("Email.ssl");    if (property != null) {      this.isSSLRequired=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Email.signature");    if (property != null) {      this.signature=property;    }    property=this.bot.memory().getProperty("Email.incomingHost");    if (property != null) {      this.incomingHost=property;    }    property=this.bot.memory().getProperty("Email.incomingPort");    if (property != null) {      this.incomingPort=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Email.outgoingHost");    if (property != null) {      this.outgoingHost=property;    }    property=this.bot.memory().getProperty("Email.outgoingPort");    if (property != null) {      this.outgoingPort=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Email.protocol");    if (property != null) {      this.protocol=property;    }    this.initProperties=true;  }}  }
class C{  private static void addChildSetParent(Object3D parent,Object3D object){  try {    parent.addChild(object);    mParent.set(object,parent);  } catch (  Exception e) {    RajLog.e("Reflection error Object3D.mParent");  }}  }
class C{  public static String ensureEndingSlash(String path){  Objects.requireNonNull(path,"path must not be null");  return "".equals(path) || path.charAt(path.length() - 1) != '/' ? (path + "/") : path;}  }
class C{  protected void addBldgPref(HttpServletRequest request,PreferencesForm frm,ActionMessages errors){  List lst=frm.getBldgPrefs();  if (frm.checkPrefs(lst)) {    for (int i=0; i < Constants.PREF_ROWS_ADDED; i++) {      frm.addToBldgPrefs(Preference.BLANK_PREF_VALUE,Preference.BLANK_PREF_VALUE);    }    request.setAttribute(HASH_ATTR,HASH_BLDG_PREF);  } else {    errors.add("bldgPrefs",new ActionMessage("errors.generic",MSG.errorInvalidBuildingPreference()));    saveErrors(request,errors);  }}  }
class C{  public synchronized Relationship addWeakRelationship(Vertex type,Vertex target,float correctnessMultiplier){  BasicRelationship relationship=new BasicRelationship(this,type,target);  return addRelationship(relationship,false,false,correctnessMultiplier);}  }
class C{  public byte[] receive(){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.501 -0400",hash_original_method="2C8858F1FEF258A79F4059C0A1CB8058",hash_generated_method="73DBD95B0639383FC78436A99232C748") @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  private void drillDown(Table table,long row,int range,Database slaveDbTungsten,String host) throws Exception {  if (range <= granularity) {    printvln("");    print("Inconsistency at row=" + row + " range="+ range+ " in "+ host);    if (printValues) {      println(":");      printCurrentValues(slaveDbTungsten,table,row,range);      println("vs.");      printCurrentValues(masterDbUser,table,row,range);    } else     println("");  } else {    int mid=range / 2;    if (logger.isDebugEnabled())     logger.debug(String.format("%d+%d",row,mid));    int idA=consistencyCheck(table,row,mid);    if (!didCheckPass(slaveDbTungsten,idA)) {      printv("x");      drillDown(table,row,mid,slaveDbTungsten,host);    } else     printv(".");    if (logger.isDebugEnabled())     logger.debug(String.format("%d+%d",row + mid,mid));    int idB=consistencyCheck(table,row + mid,mid);    if (!didCheckPass(slaveDbTungsten,idB)) {      printv("x");      drillDown(table,row + mid,mid,slaveDbTungsten,host);    } else     printv(".");  }}  }
class C{  public ImageProperty(File file,ImageType type) throws IOException {  super(file,type);}  }
class C{  public RandomSequence(Steppable[] steps){  this(steps,false);}  }
class C{  public StringDataItem(CstString value){  super(1,writeSize(value));  this.value=value;}  }
class C{  public VersionRange restrict(VersionRange restriction){  List<Restriction> r1=this.restrictions;  List<Restriction> r2=restriction.restrictions;  List<Restriction> restrictions;  if (r1.isEmpty() || r2.isEmpty()) {    restrictions=Collections.emptyList();  } else {    restrictions=intersection(r1,r2);  }  ArtifactVersion version=null;  if (restrictions.size() > 0) {    for (    Restriction r : restrictions) {      if (recommendedVersion != null && r.containsVersion(recommendedVersion)) {        version=recommendedVersion;        break;      } else       if (version == null && restriction.getRecommendedVersion() != null && r.containsVersion(restriction.getRecommendedVersion())) {        version=restriction.getRecommendedVersion();      }    }  } else   if (recommendedVersion != null) {    version=recommendedVersion;  } else   if (restriction.recommendedVersion != null) {    version=restriction.recommendedVersion;  }  return new VersionRange(version,restrictions);}  }
class C{  static Method findMethod(Class<?> cls,String methodName,int argCount){  return findMethod(cls,methodName,argCount,null);}  }
class C{  public void addVarbind(SnmpVarBind varbind){  if (sublist == null)   sublist=new Vector<>();  sublist.addElement(varbind);}  }
class C{  public AssistantException(Throwable e){  super(e);}  }
class C{  private void addViewAndCache(TextAnnotation ta,String viewName) throws AnnotatorException {  if (ViewNames.SENTENCE.equals(viewName) || ViewNames.TOKENS.equals(viewName))   return;  if (!viewProviders.containsKey(viewName))   throw new AnnotatorException("View '" + viewName + "' is not supported by this AnnotatorService. ");  Annotator annotator=viewProviders.get(viewName);  for (  String prereqViewName : annotator.getRequiredViews()) {    addView(ta,prereqViewName);  }  View view=annotator.getView(ta);  ta.addView(viewName,view);  if (!disableCache) {    String cacheKey=getCacheKey(ta,viewName);    removeKeyFromCache(cacheKey);    putInCache(cacheKey,SerializationUtils.serialize(view));  }}  }
class C{  public void removeHexEditorListener(HexEditorListener l){  listenerList.remove(HexEditorListener.class,l);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static boolean isSubset(Iterable<? extends Statement> model1,Iterable<? extends Statement> model2){  Set<? extends Statement> set1=toSet(model1);  Set<? extends Statement> set2=toSet(model2);  return isSubset(set1,set2);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public Response deactivateProject(@PathParam("id") URI id){  Project project=getProjectById(id,true);  List<URI> quotas=_dbClient.queryByType(QuotaOfCinder.class,true);  for (  URI quota : quotas) {    QuotaOfCinder quotaObj=_dbClient.queryObject(QuotaOfCinder.class,quota);    if ((quotaObj.getProject() != null) && (quotaObj.getProject().toString().equalsIgnoreCase(project.getId().toString()))) {      _log.debug("Deleting related Quota object {}.",quotaObj.getId());      _dbClient.removeObject(quotaObj);    }  }  ArgValidator.checkReference(Project.class,id,checkForDelete(project));  if (isProjectAssignedWithVNasServers(project)) {    _log.error("Delete porject failed due to, One or more vnas servers are assigned to project.");    throw APIException.badRequests.failedToDeleteVNasAssignedProject();  }  _dbClient.markForDeletion(project);  recordOperation(OperationTypeEnum.DELETE_PROJECT,true,project);  return Response.ok().build();}  }
class C{  public E lastElement(){  return delegate.lastElement();}  }
class C{  public void addEntry(Entry entry){  addElement(entry);}  }
class C{  public List<List<Integer>> kSum(int[] num,int k,int target,int pos){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (k == 2) {    int i=pos;    int j=num.length - 1;    while (i < j) {      if (i > pos && num[i] == num[i - 1]) {        i++;        continue;      }      int sum=num[i] + num[j];      if (sum == target) {        List<Integer> tuple=new ArrayList<Integer>();        tuple.add(num[i]);        tuple.add(num[j]);        i++;        j--;        res.add(tuple);      } else       if (sum > target)       j--; else       i++;    }    return res;  }  for (int i=pos; i < num.length; i++) {    if (i > pos && num[i] == num[i - 1])     continue;    List<List<Integer>> k1Sum=kSum(num,k - 1,target - num[i],i + 1);    for (    List<Integer> s : k1Sum) {      List<Integer> tuple=new ArrayList<Integer>();      tuple.add(num[i]);      tuple.addAll(s);      res.add(tuple);    }  }  return res;}  }
class C{  public CSVReader(Reader reader){  this(reader,CSVParser.DEFAULT_SEPARATOR,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public boolean removeStackChangedListener(StackChangedListener listener){  return listeners.remove(listener);}  }
class C{  @Override public void append(final LogEvent event){  if (this.alertingDisabled) {    return;  }  if ((alerting.get())) {    return;  }  setIsAlerting(true);  try {    final boolean isDebugEnabled=logger.isDebugEnabled();    if (isDebugEnabled) {      logger.debug("Delivering an alert event: {}",event);    }    InternalDistributedSystem ds=InternalDistributedSystem.getConnectedInstance();    if (ds == null) {      logger.info("Did not append alert event because the distributed system is set to null.");      return;    }    DistributionManager distMgr=(DistributionManager)ds.getDistributionManager();    final int intLevel=logLevelToAlertLevel(event.getLevel().intLevel());    final Date date=new Date(event.getTimeMillis());    final String threadName=event.getThreadName();    final String logMessage=event.getMessage().getFormattedMessage();    final String stackTrace=ThreadUtils.stackTraceToString(event.getThrown(),true);    final String connectionName=ds.getConfig().getName();    for (    Listener listener : this.listeners) {      if (event.getLevel().intLevel() > listener.getLevel().intLevel()) {        break;      }      try {        AlertListenerMessage alertMessage=AlertListenerMessage.create(listener.getMember(),intLevel,date,connectionName,threadName,Thread.currentThread().getId(),logMessage,stackTrace);        if (listener.getMember().equals(distMgr.getDistributionManagerId())) {          if (isDebugEnabled) {            logger.debug("Delivering local alert message: {}, {}, {}, {}, {}, [{}], [{}].",listener.getMember(),intLevel,date,connectionName,threadName,logMessage,stackTrace);          }          alertMessage.process(distMgr);        } else {          if (isDebugEnabled) {            logger.debug("Delivering remote alert message: {}, {}, {}, {}, {}, [{}], [{}].",listener.getMember(),intLevel,date,connectionName,threadName,logMessage,stackTrace);          }          distMgr.putOutgoing(alertMessage);        }      } catch (      ReenteredConnectException e) {      }    }  }  finally {    setIsAlerting(false);  }}  }
class C{  public DrawerBuilder withCloseOnClick(boolean closeOnClick){  this.mCloseOnClick=closeOnClick;  return this;}  }
class C{  public Object clone(){  if (getClass() == RuleBasedCollator.class) {    return new RuleBasedCollator(this);  } else {    RuleBasedCollator result=(RuleBasedCollator)super.clone();    result.primResult=null;    result.secResult=null;    result.terResult=null;    result.sourceCursor=null;    result.targetCursor=null;    return result;  }}  }
class C{  protected Node lastChild(Node n){  if (n.getNodeType() == Node.ENTITY_REFERENCE_NODE && !expandEntityReferences) {    return null;  }  Node result=n.getLastChild();  if (result == null) {    return null;  }switch (acceptNode(result)) {case NodeFilter.FILTER_ACCEPT:    return result;case NodeFilter.FILTER_SKIP:  Node t=lastChild(result);if (t != null) {  return t;}default :return previousSibling(result,n);}}  }
class C{  public void recordImagery(){  if (!imageryRecorded) {    try {      if (Application.mainActivity != null) {        ArrayList<String> currentImagery=Application.mainActivity.getMap().getImageryNames();        for (        String i : currentImagery) {          if (!imagery.contains(i) && !"None".equalsIgnoreCase(i)) {            imagery.add(i);          }        }        imageryRecorded=true;      }    } catch (    Exception ignored) {    }catch (    Error ignored) {    }  }}  }
class C{  public Iterable delete(Iterable entities){  log.info("Attempting to delete multiple entities via entity objects themselves");  log.debug(entities);  final List list=new LinkedList();  for (  Object entity : entities) {    final Object deleted=delete(entity);    if (deleted != null) {      log.debug("The entity was deleted successfully and will be added to the list of deleted entities");      list.add(deleted);    }  }  return list;}  }
class C{  public boolean isPlotable(double lat,double lon){  return lat < 90.0 && lat > -90.0 && lon <= 180 && lon >= -180;}  }
class C{  public NTRUEncryptionKeyGenerationParameters(int N,int q,int df1,int df2,int df3,int dm0,int db,int c,int minCallsR,int minCallsMask,boolean hashSeed,byte[] oid,boolean sparse,boolean fastFp,Digest hashAlg){  super(new SecureRandom(),db);  this.N=N;  this.q=q;  this.df1=df1;  this.df2=df2;  this.df3=df3;  this.db=db;  this.dm0=dm0;  this.c=c;  this.minCallsR=minCallsR;  this.minCallsMask=minCallsMask;  this.hashSeed=hashSeed;  this.oid=oid;  this.sparse=sparse;  this.fastFp=fastFp;  this.polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT;  this.hashAlg=hashAlg;  init();}  }
class C{  public void removeAllExtensionFieldValues(String urn){  ImmutableSet<ExtensionFieldValueEntity> fields=ImmutableSet.copyOf(extensionFieldValues);  for (  ExtensionFieldValueEntity extensionFieldValue : fields) {    if (extensionFieldValue.getExtensionField().getExtension().getUrn().equals(urn)) {      extensionFieldValues.remove(extensionFieldValue);    }  }}  }
class C{  public boolean isInPayroll(){  Object oo=get_Value(COLUMNNAME_IsInPayroll);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void copy(ParentSet other){  m_nCardinalityOfParents=other.m_nCardinalityOfParents;  m_nNrOfParents=other.m_nNrOfParents;  for (int iParent=0; iParent < m_nNrOfParents; iParent++) {    m_nParents[iParent]=other.m_nParents[iParent];  }}  }
class C{  public void register(String key,Class<? extends DataProvider> providerClazz){  if (key == null) {    throw new NullPointerException("The key cannot be null.");  }  if (providerClazz == null) {    throw new NullPointerException("The provider class cannot be null");  }  if (mDataProviderClasses.containsKey(key)) {    throw new IllegalArgumentException("The key[" + key + "] has been registered.");  }  mDataProviderClasses.put(key,providerClazz);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public void actionPerformed(ActionEvent e){}  }
class C{  public V put(K key,V value){  if (key == null)   return putForNullKey(value);  int hash=hash(keyEquality.hashCode(key));  int i=indexFor(hash,table.length);  for (Entry<K,V> e=table[i]; e != null; e=e.next) {    Object k;    if (e.hash == hash && ((k=e.key) == key || keyEquality.equals(key,k))) {      V oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(hash,key,value,i);  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.832 -0500",hash_original_method="BF370972F662FF42728C27309BA84910",hash_generated_method="C5C64ABD9C75DC1810405BCB3E1C1E02") public boolean hasGrParam(){  return uriParms.getNameValue(GRUU) != null;}  }
class C{  public ConcurrentHashMapPro(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  @SuppressWarnings("unused") protected void writeFooter() throws IOException {}  }
class C{  private String normalizeText(String text){  String firstPassNormalising=text.toLowerCase().replace(" ","-");  StringBuilder sb=new StringBuilder();  Matcher matcher=allowedCharacters.matcher(firstPassNormalising);  while (matcher.find()) {    sb.append(matcher.group());  }  return sb.toString();}  }
class C{  public boolean total_context_counts(){  return soot.PhaseOptions.getBoolean(options,"total-context-counts");}  }
class C{  public String simpleQueryForString(){  acquireReference();  try {    return getSession().executeForString(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public Request showRationaleFirst(boolean enable){  showRationaleFirst=enable;  return this;}  }
class C{  public void replaceWorldObject(WorldClient world){  this.worldObj=world;  this.camera.worldObj=world;  this.effectRenderer.clearEffects(world);  this.renderGlobal.setWorldAndLoadRenderers(world);}  }
class C{  public boolean isNormalized(){  return getArea() <= 2 * S2.M_PI + 1e-14;}  }
class C{  public XppDomComparator(){  this(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.304 -0400",hash_original_method="BAA63B0BE9A75DDAC07B90D04DE61F0B",hash_generated_method="B9267EE2E3A19C8B170491C449818D74") @Override protected Class<?> findClass(final String className) throws ClassNotFoundException {  String partialName=className.replace('.','/');  final String classFileName=new StringBuilder(partialName).append(".class").toString();  String packageName=null;  int position=partialName.lastIndexOf('/');  if ((position=partialName.lastIndexOf('/')) != -1) {    packageName=partialName.substring(0,position);  }  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    Class<?> res=handler.findClass(packageName,classFileName,className);    if (res != null) {      return res;    }  }  throw new ClassNotFoundException(className);}  }
class C{  public void testGenericMethods(){  assertLenghtZero(clazz.getTypeParameters());}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public void testReuse() throws IOException {  assertAnalyzesTo(sentenceAndWord,"He said, \"Are you going?\"",new String[]{"He","said","Are","you","going"},new int[]{0,3,10,14,18},new int[]{2,7,13,17,23},new int[]{1,1,1,1,1});  assertAnalyzesTo(sentenceAndWord,"John shook his head.",new String[]{"John","shook","his","head"},new int[]{0,5,11,15},new int[]{4,10,14,19},new int[]{1,1,1,1});}  }
class C{  private static void mapNumericField(final Object mappingClassInstance,final Field mappingField,final JBBPNumericField numericField,final boolean invertBitOrder){  final Class<?> fieldClass=mappingField.getType();  try {    if (fieldClass == byte.class) {      mappingField.setByte(mappingClassInstance,(byte)(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsInt()));    } else     if (fieldClass == boolean.class) {      mappingField.setBoolean(mappingClassInstance,numericField.getAsBool());    } else     if (fieldClass == char.class) {      mappingField.setChar(mappingClassInstance,(char)(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsInt()));    } else     if (fieldClass == short.class) {      mappingField.setShort(mappingClassInstance,(short)(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsInt()));    } else     if (fieldClass == int.class) {      mappingField.setInt(mappingClassInstance,(int)(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsInt()));    } else     if (fieldClass == long.class) {      mappingField.setLong(mappingClassInstance,(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsLong()));    } else     if (fieldClass == float.class) {      mappingField.setFloat(mappingClassInstance,Float.intBitsToFloat(invertBitOrder ? (int)numericField.getAsInvertedBitOrder() : numericField.getAsInt()));    } else     if (fieldClass == double.class) {      mappingField.setDouble(mappingClassInstance,Double.longBitsToDouble(invertBitOrder ? numericField.getAsInvertedBitOrder() : numericField.getAsLong()));    } else {      throw new JBBPMapperException("Unsupported mapping class field type to be mapped for binary parsed data",(JBBPAbstractField)numericField,mappingClassInstance.getClass(),mappingField,null);    }  } catch (  IllegalAccessException ex) {    throw new JBBPMapperException("Can't get access to a mapping field",(JBBPAbstractField)numericField,mappingClassInstance.getClass(),mappingField,ex);  }catch (  IllegalArgumentException ex) {    throw new JBBPMapperException("Can't set argument to a mapping field",(JBBPAbstractField)numericField,mappingClassInstance.getClass(),mappingField,ex);  }}  }
class C{  public ConfigPaymentPanelLinkPoint(){  initComponents();}  }
class C{  public SnackbarBuilder swipeDismissCallback(SnackbarSwipeDismissCallback callback){  callbackBuilder.swipeDismissCallback(callback);  return this;}  }
class C{  public BatchClustererEvent(Object source,Clusterer scheme,DataSetEvent tstI,int setNum,int maxSetNum,int testOrTrain){  super(source);  m_clusterer=scheme;  m_testSet=tstI;  m_setNumber=setNum;  m_maxSetNumber=maxSetNum;  if (testOrTrain == 0)   m_testOrTrain=TEST; else   m_testOrTrain=TRAINING;}  }
class C{  public SortField(String field,FieldComparatorSource comparator,boolean reverse){  initFieldType(field,Type.CUSTOM);  this.reverse=reverse;  this.comparatorSource=comparator;}  }
class C{  public static int indexOf(long[] array,long value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Intent(String intent,Double confidence){  super();  this.confidence=confidence;  this.intent=intent;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public static void copyFileUsingFileChannels(File source,File dest) throws IOException {  FileChannel inputChannel=null;  FileChannel outputChannel=null;  try {    inputChannel=new FileInputStream(source).getChannel();    outputChannel=new FileOutputStream(dest).getChannel();    outputChannel.transferFrom(inputChannel,0,inputChannel.size());  }  finally {    inputChannel.close();    outputChannel.close();  }}  }
class C{  public String sqlAD_getTranslatedTables(String vendorName,String catalogName,String schemaName){  String tableName="AD_Table";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("SUBSTR(TableName, 1, LENGTH(TableName)-4)");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("TableName");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("UPPER(TableName) LIKE '%\\_TRL'");  conditions.add("IsActive = 'Y'");  conditions.add("IsView = 'N'");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public static boolean hasAnyOnlyForAssertionMethod(TestCase tc){  for (int i=0; i < tc.size(); i++) {    Statement st=tc.getStatement(i);    if (!canStatementHaveConstraints(st)) {      continue;    }    AccessibleObject ao=null;    if (st instanceof MethodStatement) {      MethodStatement ms=(MethodStatement)st;      ao=ms.getMethod().getMethod();    } else     if (st instanceof ConstructorStatement) {      ConstructorStatement cs=(ConstructorStatement)st;      ao=cs.getConstructor().getConstructor();    }    for (    Annotation annotation : ao.getDeclaredAnnotations()) {      if (annotation instanceof EvoSuiteAssertionOnly) {        return true;      }    }  }  return false;}  }
class C{  public SizableIterable(final Iterable<T> iterable,final int size){  if (iterable == null)   throw new NullPointerException();  if (size < 0)   throw new IllegalArgumentException("Size must be positive");  this.iterable=iterable;  this.size=size;}  }
class C{  public List<ReportStructure> downloadTasksInSameState(int state){  List<ReportStructure> reportList;  List<Task> inStateTasks=tasksDataSource.getTasksInState(state);  reportList=readyTaskList(inStateTasks);  return reportList;}  }
class C{  public void traverseParent(BiPredicate<ParseTreeNode,ParseTreeNode> consumer){  if (parent != null) {    final boolean test=consumer.test(parent,this);    if (test) {      parent.traverseParent(consumer);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.051 -0500",hash_original_method="2437797492D4FB816280E0DD31B38A08",hash_generated_method="5993374858CEE161E6BE45EC8066F26B") public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(fFailedTest + ": " + fThrownException.getMessage());  return buffer.toString();}  }
class C{  protected void updateCursorForDrag(int piece){  if (getPreferences().getBoolean(PreferenceKeys.BOARD_IS_USING_CROSSHAIRS_CURSOR)) {    getShell().setCursor(Raptor.getInstance().getDisplay().getSystemCursor(SWT.CURSOR_CROSS));  } else {    int imageSide=getImageSize();    getShell().setCursor(ChessBoardUtils.getCursorForPiece(piece,imageSide));  }}  }
class C{  protected synchronized void stopRecorder(){  if (Cfg.DEBUG) {    Check.log(TAG + " (stopRecorder)");  }  if (recorder != null) {    recorder.setOnErrorListener(null);    recorder.setOnInfoListener(null);    try {      recorder.stop();    } catch (    Exception ex) {      if (Cfg.DEBUG) {        Check.log(ex);      }    }    recorder.reset();    getAvailable();    deleteSockets();    recorder.release();    recorder=null;  }}  }
class C{  public void putTypeDescription(String extension,String typeDescription){  typeDescriptions.put(typeDescription,extension);}  }
class C{  public void parseConfiguration(final Node rootnode) throws Exception {  ArrayList<JMSQueueConfiguration> queues=new ArrayList<>();  ArrayList<TopicConfiguration> topics=new ArrayList<>();  Element e=(Element)rootnode;  String[] elements=new String[]{QUEUE_NODE_NAME,TOPIC_NODE_NAME};  for (  String element : elements) {    NodeList children=e.getElementsByTagName(element);    for (int i=0; i < children.getLength(); i++) {      Node node=children.item(i);      Node keyNode=node.getAttributes().getNamedItem(NAME_ATTR);      if (keyNode == null) {        ActiveMQJMSServerLogger.LOGGER.jmsConfigMissingKey(node);        continue;      }      if (node.getNodeName().equals(TOPIC_NODE_NAME)) {        topics.add(parseTopicConfiguration(node));      } else       if (node.getNodeName().equals(QUEUE_NODE_NAME)) {        queues.add(parseQueueConfiguration(node));      }    }  }  String domain=XMLConfigurationUtil.getString(e,JMX_DOMAIN_NAME,ActiveMQDefaultConfiguration.getDefaultJmxDomain(),Validators.NO_CHECK);  newConfig(queues,topics,domain);}  }
class C{  public void addDirtyRegion(Applet applet,int x,int y,int w,int h){  addDirtyRegion0(applet,x,y,w,h);}  }
class C{  public void next(E t){  Emission emission=emit(t);  if (emission.isOk()) {    return;  }  if (emission.isBackpressured()) {    Operators.reportMoreProduced();    return;  }  if (emission.isCancelled()) {    Operators.onNextDropped(t);    return;  }  if (getError() != null) {    throw Exceptions.bubble(getError());  }  throw new IllegalStateException("Emission has failed");}  }
class C{  protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){  boolean retValue=super.processKeyBinding(ks,e,condition,pressed);  if (!retValue) {    MenuElement[] subElements=getSubElements();    for (    MenuElement subElement : subElements) {      if (processBindingForKeyStrokeRecursive(subElement,ks,e,condition,pressed)) {        return true;      }    }  }  return retValue;}  }
class C{  public T caseComposite(Composite object){  return null;}  }
class C{  static void addLocalesFromJar(List<Locale> locales,File jar){  ZipFile zip=null;  try {    zip=new ZipFile(jar);    Enumeration<? extends ZipEntry> entries=zip.entries();    while (entries.hasMoreElements()) {      String name=entries.nextElement().getName();      if (!name.startsWith(BUNDLE_PREFIX) || !name.endsWith(BUNDLE_POSTFIX) || name.indexOf("$") != -1) {        continue;      }      String iso=name.substring(BUNDLE_PREFIX.length(),name.length() - BUNDLE_POSTFIX.length());      List<String> tokens=new ArrayList<String>(Arrays.asList(iso.split("_",3)));      if (tokens.size() < 1) {        continue;      }      while (tokens.size() < 3) {        tokens.add("");      }      Locale locale=new Locale(tokens.get(0),tokens.get(1),tokens.get(2));      locales.add(locale);    }  } catch (  IOException e) {    LOG.warn("Could not determine locales",e);  } finally {    if (zip != null) {      try {        zip.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void clearJsLibFiles(){  jsLibFiles.clear();}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  @Override public Iterator<T> iterator(){  return nodes.keySet().iterator();}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void putMemory(final Memory dstMem,final ArrayOfItemsSerDe<T> serDe){  final byte[] byteArr=toByteArray(serDe);  final long memCap=dstMem.getCapacity();  if (memCap < byteArr.length) {    throw new SketchesArgumentException("Destination Memory not large enough: " + memCap + " < "+ byteArr.length);  }  dstMem.putByteArray(0,byteArr,0,byteArr.length);}  }
class C{  void executeQuery(){  if (m_worker != null && m_worker.isAlive())   return;  m_worker=new Worker();  m_worker.start();}  }
class C{  @Override protected void initialize(){  super.initialize();  m_Editor=new GenericObjectEditor();  m_Current=null;}  }
class C{  private static void killCurrentProcess(){  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(10);}  }
class C{  public void run(IAction action){  MessageDialog.openInformation(window.getShell(),"4 Plug-in","Hello, Eclipse world");}  }
class C{  @CalledByNative public static boolean isAccessibilityEnabled(Context context){  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);  return manager != null && manager.isEnabled() && manager.isTouchExplorationEnabled();}  }
class C{  static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  protected void checkExist(IgfsSecondaryFileSystemTestAdapter uni,IgfsPath... paths) throws IgniteCheckedException {  IgfsEx ex=uni.igfs();  for (  IgfsPath path : paths) {    if (ex != null)     assert ex.context().meta().fileId(path) != null : "Path doesn't exist [igfs=" + ex.name() + ", path="+ path+ ']';    try {      assert uni.exists(path.toString()) : "Path doesn't exist [igfs=" + uni.name() + ", path="+ path+ ']';    } catch (    IOException ioe) {      throw new IgniteCheckedException(ioe);    }  }}  }
class C{  public void increment(){  if (enabled) {    ++count;  }}  }
class C{  public AbstractWarTestCase(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public boolean isSubmissionEntireForm(){  IDataReference sub=getSubmissionDataReference();  return (getInstance().resolveReference(sub) == null);}  }
class C{  private void populateCarbonMeasures(String[] measures){  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(meta.getSchemaName() + CarbonCommonConstants.UNDERSCORE + meta.getTableName());  meta.carbonMeasures=new CarbonMeasure[measures.length];  msrDataType=new DataType[measures.length];  for (int i=0; i < measures.length; i++) {    CarbonMeasure carbonMeasure=carbonTable.getMeasureByName(meta.getTableName(),measures[i]);    msrDataType[i]=carbonMeasure.getDataType();    if (DataType.DECIMAL == carbonMeasure.getDataType()) {      meta.carbonMeasures[i]=carbonMeasure;    }  }}  }
class C{  public static int[] subarray(int[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_INT_ARRAY;  }  int[] subarray=new int[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  protected boolean isValidData(){  return true;}  }
class C{  public synchronized boolean cancelDownload(String username,String submissionID){  TransferObject obj=userToDownloadMap.get(username);  if (obj == null || submissionID != null && !obj.getStruct().getSubmissionID().equals(submissionID)) {    return false;  }  downloadTimeoutQueue.remove(obj);  userToDownloadMap.remove(obj.getStruct().getUsername());  JPlagCentral.cancelSubmission(obj.getStruct());  return true;}  }
class C{  public DLSequence(){}  }
class C{  public void unsetMatchColumn(String[] columnIdxes) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public final double rootMeanPriorSquaredError(){  if (m_NoPriors) {    return Double.NaN;  }  return Math.sqrt(m_SumPriorSqrErr / m_WithClass);}  }
class C{  public Future<Map<String,BaseIndexStats>> warmUp(final List<String> namespaces){  final int nparallel=20;  final FutureTask<Map<String,BaseIndexStats>> ft=new FutureTask<Map<String,BaseIndexStats>>(new WarmUpTask(this,namespaces,ITx.READ_COMMITTED,nparallel,false));  getExecutorService().submit(ft);  return ft;}  }
class C{  protected void fireEditingCanceled(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CellEditorListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((CellEditorListener)listeners[i + 1]).editingCanceled(changeEvent);    }  }}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!m_firstBatchFinished) {    Instances filtered;    if (m_numOfCrossValidationFolds < 2) {      filtered=cleanseTrain(getInputFormat());    } else {      filtered=cleanseCross(getInputFormat());    }    for (int i=0; i < filtered.numInstances(); i++) {      push(filtered.instance(i));    }    m_firstBatchFinished=true;    flushInput();  }  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public static HeapConfig parse(byte[] bytes) throws IOException {  return parse(CassandraProtos.HeapConfig.parseFrom(bytes));}  }
class C{  private JComponent createTitlePane(JRootPane root){  return new SeaGlassTitlePane(root,this);}  }
class C{  AnimatedSprite(final Sprite[] frames,final int[] delays,final boolean animating,final Object reference){  if (frames.length == 0) {    logger.warn("AnimatedSprite needs at least one frame");  }  if (delays.length != frames.length) {    throw new IllegalArgumentException("Mismatch between number of frame sprites and delays");  }  duration=0;  for (int i=0; i < delays.length; i++) {    if (delays[i] < 0) {      throw new IllegalArgumentException("Delay < 0");    }    duration+=delays[i];  }  this.frames=frames;  this.delays=delays;  this.animating=animating;  this.reference=reference;  loop=true;  height=0;  width=0;  for (  final Sprite frame : frames) {    height=Math.max(height,frame.getHeight());    width=Math.max(width,frame.getWidth());  }  index=0;  if (frames.length > 0) {    sprite=frames[0];  } else {    sprite=null;  }  cycleTime=0;  long now=System.currentTimeMillis();  if (loop) {    lastUpdate=now - (now % duration);  } else {    lastUpdate=now;  }}  }
class C{  private IMAPFolder reopenFolder() throws MessagingException {  if (store == null || !store.isConnected()) {    store=connect();  }  IMAPFolder folder=(IMAPFolder)store.getFolder(Configuration.root().getString(IMAP_FOLDER_KEY,IMAP_FOLDER_DEFAULT));  folder.open(Folder.READ_ONLY);  return folder;}  }
class C{  public boolean overInterval(long startMillis,long endMillis){  return (endMillis - startMillis) > duration;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static String[] processOptions(String args[]){  String usageError;  goodUsage:   for (int i=0; ; ++i) {    if (i == args.length) {      return new String[0];    }    String arg=args[i];    if (!arg.startsWith("-")) {      processStdin=false;      fileList.add(arg);      String[] result=new String[args.length - i - 1];      System.arraycopy(args,i + 1,result,0,args.length - i - 1);      return result;    }    if (arg.equals("-version")) {      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      int version;      try {        version=Integer.parseInt(args[i]);      } catch (      NumberFormatException ex) {        usageError=args[i];        break goodUsage;      }      if (!Context.isValidLanguageVersion(version)) {        usageError=args[i];        break goodUsage;      }      shellContextFactory.setLanguageVersion(version);      continue;    }    if (arg.equals("-opt") || arg.equals("-O")) {      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      int opt;      try {        opt=Integer.parseInt(args[i]);      } catch (      NumberFormatException ex) {        usageError=args[i];        break goodUsage;      }      if (opt == -2) {        opt=-1;      } else       if (!Context.isValidOptimizationLevel(opt)) {        usageError=args[i];        break goodUsage;      }      shellContextFactory.setOptimizationLevel(opt);      continue;    }    if (arg.equals("-encoding")) {      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      String enc=args[i];      shellContextFactory.setCharacterEncoding(enc);      continue;    }    if (arg.equals("-strict")) {      shellContextFactory.setStrictMode(true);      shellContextFactory.setAllowReservedKeywords(false);      errorReporter.setIsReportingWarnings(true);      continue;    }    if (arg.equals("-fatal-warnings")) {      shellContextFactory.setWarningAsError(true);      continue;    }    if (arg.equals("-e")) {      processStdin=false;      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      if (!global.initialized) {        global.init(shellContextFactory);      }      IProxy iproxy=new IProxy(IProxy.EVAL_INLINE_SCRIPT);      iproxy.scriptText=args[i];      shellContextFactory.call(iproxy);      continue;    }    if (arg.equals("-modules")) {      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      if (modulePath == null) {        modulePath=new ArrayList<String>();      }      modulePath.add(args[i]);      continue;    }    if (arg.equals("-main")) {      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      mainModule=args[i];      processStdin=false;      continue;    }    if (arg.equals("-sandbox")) {      sandboxed=true;      continue;    }    if (arg.equals("-w")) {      errorReporter.setIsReportingWarnings(true);      continue;    }    if (arg.equals("-f")) {      processStdin=false;      if (++i == args.length) {        usageError=arg;        break goodUsage;      }      fileList.add(args[i].equals("-") ? null : args[i]);      continue;    }    if (arg.equals("-sealedlib")) {      global.setSealedStdLib(true);      continue;    }    if (arg.equals("-debug")) {      shellContextFactory.setGeneratingDebug(true);      continue;    }    if (arg.equals("-?") || arg.equals("-help")) {      global.getOut().println(ToolErrorReporter.getMessage("msg.shell.usage",Main.class.getName()));      System.exit(1);    }    usageError=arg;    break goodUsage;  }  global.getOut().println(ToolErrorReporter.getMessage("msg.shell.invalid",usageError));  global.getOut().println(ToolErrorReporter.getMessage("msg.shell.usage",Main.class.getName()));  System.exit(1);  return null;}  }
class C{  private boolean deleteZNodes(final String clientName){  boolean bZNodesDeleted=false;  try {    String lockRootPath=ZKPaths.makePath(_persistentLockPath,_persistentLockName);    List<String> children=_zkClient.getChildren().forPath(lockRootPath);    String versionId=children.get(0);    _log.debug("deleteZNodes(): For lock: {}, Found ChildZNode.",_persistentLockName);    String lockPath=ZKPaths.makePath(lockRootPath,versionId);    byte[] currOwnerNameInBytes=_zkClient.getData().forPath(lockPath);    String currOwnerName=new String(currOwnerNameInBytes,Charset.forName("UTF-8"));    if (currOwnerName.equals(clientName)) {      _log.debug("deleteZNodes(): For lock: {}, Verified owner. Deleting ZNodes",_persistentLockName);      _zkClient.inTransaction().delete().forPath(lockPath).and().delete().forPath(lockRootPath).and().commit();      bZNodesDeleted=true;    } else {      _log.debug("deleteZNodes(): For lock: {}, Cannot delete ZNodes ... Invalid owner.",_persistentLockName);    }  } catch (  KeeperException.NoNodeException nne) {    _log.debug("deleteZNodes(): For lock: {}, ZNodes not found.",_persistentLockName);    bZNodesDeleted=true;  }catch (  Exception e) {    _log.debug("deleteZNodes(): For lock: {}, Problem while deleting ZNodes",_persistentLockName);  }  _log.debug("deleteZNodes(): Result: {}",bZNodesDeleted);  return bZNodesDeleted;}  }
class C{  public boolean isInterface(){  return itf;}  }
class C{  public void check(final int api){}  }
class C{  public void reset(String username,String password,boolean encrypted){  reset(username,password,encrypted,true);}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  return (super.isValidEntity(entity,game,useValidNonInfantryCheck) && (unitNumber == entity.getUnitNumber()));}  }
class C{  private boolean calculateBPL_VB(){  if (m_M_Product_ID == 0 || m_M_PriceList_ID == 0)   return false;  String sql="SELECT pp.PriceStd," + " pp.PriceList," + " pp.PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,"+ " pl.EnforcePriceLimit, pl.IsTaxIncluded "+ "FROM M_Product p"+ " INNER JOIN M_ProductPriceVendorBreak pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist bpl ON (pv.M_PriceList_ID=bpl.M_PriceList_ID)"+ " INNER JOIN M_Pricelist pl ON (bpl.M_PriceList_ID=pl.BasePriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pl.M_PriceList_ID=?"+ " AND pp.C_BPartner_ID=?"+ " AND ?>=pp.BreakValue"+ " ORDER BY pv.ValidFrom DESC, BreakValue DESC";  m_calculated=false;  if (m_PriceDate == null)   m_PriceDate=new Timestamp(System.currentTimeMillis());  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_ID);    pstmt.setInt(3,m_C_BPartner_ID);    pstmt.setBigDecimal(4,m_Qty);    rs=pstmt.executeQuery();    while (!m_calculated && rs.next()) {      Timestamp plDate=rs.getTimestamp(5);      if (plDate == null || !m_PriceDate.before(plDate)) {        m_PriceStd=rs.getBigDecimal(1);        if (rs.wasNull())         m_PriceStd=Env.ZERO;        m_PriceList=rs.getBigDecimal(2);        if (rs.wasNull())         m_PriceList=Env.ZERO;        m_PriceLimit=rs.getBigDecimal(3);        if (rs.wasNull())         m_PriceLimit=Env.ZERO;        m_C_UOM_ID=rs.getInt(4);        m_C_Currency_ID=rs.getInt(6);        m_M_Product_Category_ID=rs.getInt(7);        m_enforcePriceLimit="Y".equals(rs.getString(8));        m_isTaxIncluded="Y".equals(rs.getString(9));        log.fine("M_PriceList_ID=" + m_M_PriceList_ID + "("+ plDate+ ")"+ " - "+ m_PriceStd);        m_calculated=true;        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!m_calculated)   log.finer("Not found (BPL)");  return m_calculated;}  }
class C{  public static void onFooterDrawerItemClick(DrawerBuilder drawer,IDrawerItem drawerItem,View v,Boolean fireOnClick){  boolean checkable=!(drawerItem != null && drawerItem instanceof Selectable && !((Selectable)drawerItem).isSelectable());  if (checkable) {    drawer.resetStickyFooterSelection();    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {      v.setActivated(true);    }    v.setSelected(true);    drawer.getAdapter().handleSelection(null,-1);    drawer.mCurrentSelection=-1;    if (drawer.mStickyFooterView != null && drawer.mStickyFooterView instanceof LinearLayout) {      LinearLayout footer=(LinearLayout)drawer.mStickyFooterView;      for (int i=0; i < footer.getChildCount(); i++) {        if (footer.getChildAt(i) == v) {          drawer.mCurrentStickyFooterSelection=i;          break;        }      }    }  }  if (fireOnClick != null) {    boolean consumed=false;    if (fireOnClick && drawer.mOnDrawerItemClickListener != null) {      consumed=drawer.mOnDrawerItemClickListener.onItemClick(v,-1,drawerItem);    }    if (!consumed) {      drawer.closeDrawerDelayed();    }  }}  }
class C{  public static final <A>CollectionX<A> toConcurrentLazyCollection(final Stream<A> stream){  return SeqUtils.toConcurrentLazyCollection(stream.iterator());}  }
class C{  public DeployDeployableScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static EntityCondition createSingleCondition(ModelField modelField,String operation,Object fieldValue,boolean ignoreCase,Delegator delegator,Map<String,?> context){  EntityCondition cond=null;  String fieldName=modelField.getName();  EntityComparisonOperator<?,?> fieldOp=null;  if (operation != null) {    if (operation.equals("contains")) {      fieldOp=EntityOperator.LIKE;      fieldValue="%" + fieldValue + "%";    } else     if ("not-contains".equals(operation) || "notContains".equals(operation)) {      fieldOp=EntityOperator.NOT_LIKE;      fieldValue="%" + fieldValue + "%";    } else     if (operation.equals("empty")) {      return EntityCondition.makeCondition(fieldName,EntityOperator.EQUALS,null);    } else     if (operation.equals("like")) {      fieldOp=EntityOperator.LIKE;      fieldValue=fieldValue + "%";    } else     if ("not-like".equals(operation) || "notLike".equals(operation)) {      fieldOp=EntityOperator.NOT_LIKE;      fieldValue=fieldValue + "%";    } else     if ("opLessThan".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN;    } else     if ("upToDay".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN;    } else     if ("upThruDay".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN_EQUAL_TO;    } else     if (operation.equals("greaterThanFromDayStart")) {      String timeStampString=(String)fieldValue;      Object startValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,0),delegator,context);      return EntityCondition.makeCondition(fieldName,EntityOperator.GREATER_THAN_EQUAL_TO,startValue);    } else     if (operation.equals("sameDay")) {      String timeStampString=(String)fieldValue;      Object startValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,0),delegator,context);      EntityCondition startCond=EntityCondition.makeCondition(fieldName,EntityOperator.GREATER_THAN_EQUAL_TO,startValue);      Object endValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,1),delegator,context);      EntityCondition endCond=EntityCondition.makeCondition(fieldName,EntityOperator.LESS_THAN,endValue);      return EntityCondition.makeCondition(startCond,endCond);    } else {      fieldOp=entityOperators.get(operation);    }  } else {    fieldOp=EntityOperator.EQUALS;  }  Object fieldObject=fieldValue;  if ((fieldOp != EntityOperator.IN && fieldOp != EntityOperator.NOT_IN) || !(fieldValue instanceof Collection<?>)) {    fieldObject=modelField.getModelEntity().convertFieldValue(modelField,fieldValue,delegator,context);  }  if (ignoreCase && fieldObject instanceof String) {    cond=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(fieldName),fieldOp,EntityFunction.UPPER(((String)fieldValue).toUpperCase()));  } else {    if (fieldObject.equals(GenericEntity.NULL_FIELD.toString())) {      fieldObject=null;    }    cond=EntityCondition.makeCondition(fieldName,fieldOp,fieldObject);  }  if (EntityOperator.NOT_EQUAL.equals(fieldOp) && fieldObject != null) {    cond=EntityCondition.makeCondition(UtilMisc.toList(cond,EntityCondition.makeCondition(fieldName,null)),EntityOperator.OR);  }  return cond;}  }
class C{  public static XMPPError parseError(XmlPullParser parser) throws Exception {  final String errorNamespace="urn:ietf:params:xml:ns:xmpp-stanzas";  String errorCode="-1";  String type=null;  String message=null;  String condition=null;  List<PacketExtension> extensions=new ArrayList<PacketExtension>();  for (int i=0; i < parser.getAttributeCount(); i++) {    if (parser.getAttributeName(i).equals("code")) {      errorCode=parser.getAttributeValue("","code");    }    if (parser.getAttributeName(i).equals("type")) {      type=parser.getAttributeValue("","type");    }  }  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("text")) {        message=parser.nextText();      } else {        String elementName=parser.getName();        String namespace=parser.getNamespace();        if (errorNamespace.equals(namespace)) {          condition=elementName;        } else {          extensions.add(parsePacketExtension(elementName,namespace,parser));        }      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("error")) {        done=true;      }    }  }  XMPPError.Type errorType=XMPPError.Type.CANCEL;  try {    if (type != null) {      errorType=XMPPError.Type.valueOf(type.toUpperCase());    }  } catch (  IllegalArgumentException iae) {    iae.printStackTrace();  }  return new XMPPError(Integer.parseInt(errorCode),errorType,condition,message,extensions);}  }
class C{  public static void main(String[] args){  Tax tax2001=new Tax();  Tax tax2009=new Tax();  double[] rates2001={15,27.5,30.5,35.5,39.1};  tax2001.setRates(rates2001);  int[][] brackets2001={{27050,65550,136750,297350},{45200,109250,166500,297350},{22600,54625,83250,148675},{36250,93650,151650,297350}};  tax2001.setBrackets(brackets2001);  final double FROM=50000;  final double TO=60000;  final double INTERVAL=1000;  System.out.println("\n2001 tax tables for taxable income from $50,000 to $60,000");  print(tax2001,FROM,TO,INTERVAL);  System.out.println("\n2009 tax tables for taxable income from $50,000 to $60,000");  print(tax2009,FROM,TO,INTERVAL);}  }
class C{  public PropertyDescriptor propertyDescriptor(final Class<?> type,final String name){  final PropertyDescriptor descriptor=buildMap(type).get(name);  if (descriptor == null) {    throw new MissingFieldException(type.getName(),name);  }  return descriptor;}  }
class C{  private void logInputVolume(Operator operator,InputPort port,int rows,int columns){  logVolume(TYPE_INPUT_VOLUME,operator,port,rows,columns);}  }
class C{  @Override public boolean isDone(){  int nPendingPhrases=(pendingPhrases == null) ? 0 : pendingPhrases.size();  return super.isDone() && nPendingPhrases == 0 && !hasExpired;}  }
class C{  protected void open() throws MessagingException {  int openFlag=Folder.READ_WRITE;  if (isOpenReadOnly())   openFlag=Folder.READ_ONLY;  getFolder().open(openFlag);}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private int mantissa(byte[] mant,int lmant,int exp,boolean simple,byte[] buf,int off,int len){  int off0=off;  int pos=0;  if (exp < 0) {    buf[off]=(byte)'0';    len--;    off++;    if (len > 0) {      buf[off]=(byte)'.';      off++;      len--;    }    int cexp=exp;    while (cexp < -1 && len > 0) {      buf[off]=(byte)'0';      cexp++;      off++;      len--;    }  } else {    while (exp >= 0 && pos < lmant) {      buf[off]=mant[pos];      off++;      pos++;      len--;      exp--;    }    for (int i=0; i <= exp; i++) {      buf[off]=(byte)'0';      off++;      len--;    }    if (len > 0) {      buf[off]=(byte)'.';      len--;      off++;    }  }  while (len > 0 && pos < lmant) {    buf[off]=mant[pos];    off++;    exp--;    len--;    pos++;  }  if (pos < lmant && mant[pos] >= (byte)'5') {    int i;    for (i=off - 1; i >= off0; i--) {      if (buf[i] == (byte)'.' || buf[i] == (byte)'-') {        continue;      }      if (buf[i] == (byte)'9') {        buf[i]=(byte)'0';      } else {        buf[i]++;        break;      }    }    if (i < off0) {      buf[off0]=(byte)'1';      boolean foundDecimal=false;      for (i=off0 + 1; i < off; i++) {        if (buf[i] == (byte)'.') {          foundDecimal=true;          if (simple) {            buf[i]=(byte)'0';            i++;            if (i < off) {              buf[i]=(byte)'.';            }          }          break;        }      }      if (simple && !foundDecimal) {        buf[off + 1]=(byte)'0';        off++;      }      off=-off;    }  }  return off;}  }
class C{  protected Matrix computeRenderMatrix(DrawContext dc){  ShapeData current=(ShapeData)this.getCurrent();  if (current.referenceCenter == null || current.isExpired(dc)) {    current.referenceCenter=this.computeReferenceCenter(dc);    Position refPosition=dc.getGlobe().computePositionFromPoint(current.referenceCenter);    current.surfaceOrientationMatrix=dc.getGlobe().computeSurfaceOrientationAtPosition(refPosition);  }  return current.surfaceOrientationMatrix.multiply(current.renderMatrix);}  }
class C{  public static void startSettingsViewByPackageName(Context context,String packageName){  try {    Intent intent=new Intent();    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));    context.startActivity(intent);  } catch (  Exception e) {    StringWriter errors=new StringWriter();    e.printStackTrace(new PrintWriter(errors));    String errorReason=errors.toString();    Log.d(AppStarter.class.getName(),"Failed to launch settings-activity: \n" + errorReason);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_ACTIVATE_CURRENT);  return null;}  }
class C{  protected void computeLRDs(KNNQuery<O> knnq,DBIDs ids,WritableDoubleDataStore lrds){  FiniteProgress lrdsProgress=LOG.isVerbose() ? new FiniteProgress("LRD",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(iter,kreach);    double sum=0.0;    int count=0;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,iter)) {        continue;      }      KNNList neighborsNeighbors=knnq.getKNNForDBID(neighbor,kreach);      sum+=MathUtil.max(neighbor.doubleValue(),neighborsNeighbors.getKNNDistance());      count++;    }    final double lrd=(sum > 0) ? (count / sum) : Double.POSITIVE_INFINITY;    lrds.putDouble(iter,lrd);    LOG.incrementProcessed(lrdsProgress);  }  LOG.ensureCompleted(lrdsProgress);}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void skippedEntity(String name) throws SAXException {  m_handler.skippedEntity(name);}  }
class C{  public static double powerSeries(double a,double b,double x){  double s, t, u, v, n, t1, z, ai;  ai=1.0 / a;  u=(1.0 - b) * x;  v=u / (a + 1.0);  t1=v;  t=u;  n=2.0;  s=0.0;  z=MACHEP * ai;  while (Math.abs(v) > z) {    u=(n - b) * x / n;    t*=u;    v=t / (a + n);    s+=v;    n+=1.0;  }  s+=t1;  s+=ai;  u=a * Math.log(x);  if ((a + b) < MAXGAM && Math.abs(u) < MAXLOG) {    t=gamma(a + b) / (gamma(a) * gamma(b));    s=s * t * Math.pow(x,a);  } else {    t=lnGamma(a + b) - lnGamma(a) - lnGamma(b) + u + Math.log(s);    if (t < MINLOG) {      s=0.0;    } else {      s=Math.exp(t);    }  }  return s;}  }
class C{  public void testCompareToEqualNeg(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  void updateText(Element target){  if (target.text == null) {    target.text=new LinkedList<>();    target.text.add(new Segment(target.start.right + 1,target.start.right));  }  final Iterator<Segment> segIt=target.text.iterator();  final Segment first=segIt.next();  while (segIt.hasNext()) {    final Segment removal=segIt.next();    segIt.remove();    removeSegment(removal);  }  updateSegmentContent(first,target.getText());}  }
class C{  private static void addSingleUnique(FieldType fieldType,List<String> additionalArgs){  StringBuilder alterSb=new StringBuilder();  alterSb.append(" UNIQUE (");  appendEscapedEntityName(alterSb,fieldType.getColumnName());  alterSb.append(")");  additionalArgs.add(alterSb.toString());}  }
class C{  public Shape evaluate(Shape v0,Shape v1,float fraction){  return evaluate(v0,v1,fraction,false);}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public mxStylesheetCodec(){  this(new mxStylesheet());}  }
class C{  public static Iterable<String> toHexStrings(Iterable<ByteArray> arrays){  ArrayList<String> ret=new ArrayList<String>();  for (  ByteArray array : arrays)   ret.add(HexString.toHexString(array.get()));  return ret;}  }
class C{  public boolean isJdbcLoggingEnabled(){  return jdbcLogger.isErrorEnabled() || resultSetLogger.isErrorEnabled() || sqlOnlyLogger.isErrorEnabled()|| sqlTimingLogger.isErrorEnabled()|| connectionLogger.isErrorEnabled();}  }
class C{  protected void parseMorphLineStyle(InStream in,SWFShape shape) throws IOException {  int startWidth=in.readUI16();  int endWidth=in.readUI16();  AlphaColor startColor=new AlphaColor(in);  AlphaColor endColor=new AlphaColor(in);  shape.defineLineStyle(startWidth,startColor);  shape.defineLineStyle(endWidth,endColor);}  }
class C{  public void run(){  try {    if (sLogger.isActivated()) {      sLogger.info("Initiate a new HTTP upload ".concat(mUploadId));    }    MmContent fileIconContent=null;    if (mFileIcon) {      fileIconContent=FileTransferUtils.createFileicon(mFile.getUri(),mUploadId,mRcsSettings);    }    mUploadManager=new HttpUploadManager(mFile,fileIconContent,this,mUploadId,mRcsSettings);    byte[] result=mUploadManager.uploadFile();    storeResult(result);  } catch (  SecurityException e) {    sLogger.error(new StringBuilder("File icon creation has failed as the file is not accessible for HTTP uploadId ").append(mUploadId).toString(),e);    removeSession();    mListener.handleUploadNotAllowedToSend();  }catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }catch (  FileAccessException e) {    sLogger.error(new StringBuilder("Failed to initiate session for HTTP uploadId ").append(mUploadId).toString(),e);    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }catch (  PayloadException e) {    sLogger.error(new StringBuilder("Failed to initiate session for HTTP uploadId ").append(mUploadId).toString(),e);    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }catch (  NetworkException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }catch (  RuntimeException e) {    sLogger.error(new StringBuilder("Failed to initiate session for HTTP uploadId ").append(mUploadId).toString(),e);    removeSession();    mListener.handleUploadError(FileSharingError.MEDIA_UPLOAD_FAILED);  }}  }
class C{  public void enable(boolean enable){  this.enabled=enable;}  }
class C{  public void configureDebugLog(boolean debugLog){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  try {    JoranConfigurator configurator=new JoranConfigurator();    configurator.setContext(context);    context.reset();    String configLogFile=debugLog ? "config-files/logback-debug.xml" : "config-files/logback.xml";    configurator.doConfigure(Config.v().getApacHome() + File.separator + configLogFile);  } catch (  JoranException je) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  @Override protected IWorkbook doLoadWorkbookFromURI(IProgressMonitor monitor,URI uri) throws InterruptedException, InvocationTargetException {  if (sourceWorkbook == null) {    throw new IllegalStateException("No source workbook to load");  }  try {    IWorkbook workbook=Core.getWorkbookBuilder().createWorkbook(getTempStorage());    ISerializer serializer=Core.getWorkbookBuilder().newSerializer();    serializer.setWorkbook(workbook);    serializer.setWorkbookStorageAsOutputTarget();    serializer.setEntryStreamNormalizer(getEncryptionHandler());    serializer.serialize(null);    new CloneHandler().withWorkbooks(sourceWorkbook,workbook).copyWorkbookContents();    return workbook;  } catch (  IOException e) {    throw new InvocationTargetException(e);  }catch (  CoreException e) {    throw new InvocationTargetException(e);  }}  }
class C{  private static String doSubstringReplacement(final SubstringReplaceFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    final String output=details.getReplaceWith();    convertedText=replaceTextAndTags(details,convertedText,input,output);  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  public Iterator<BugProperty> propertyIterator(){  return new BugPropertyIterator();}  }
class C{  public static MatrixBlock reshape(MatrixBlock in,MatrixBlock out,int rows,int cols,boolean rowwise) throws DMLRuntimeException {  int rlen=in.rlen;  int clen=in.clen;  if (((long)rlen) * clen != ((long)rows) * cols)   throw new DMLRuntimeException("Reshape matrix requires consistent numbers of input/output cells (" + rlen + ":"+ clen+ ", "+ rows+ ":"+ cols+ ").");  if (rlen == rows && clen == cols) {    out.copy(in);    return out;  }  out.sparse=MatrixBlock.evalSparseFormatInMemory(rows,cols,in.nonZeros);  out.rlen=rows;  out.clen=cols;  out.nonZeros=in.nonZeros;  if (!in.sparse && !out.sparse)   reshapeDense(in,out,rows,cols,rowwise); else   if (in.sparse && out.sparse)   reshapeSparse(in,out,rows,cols,rowwise); else   if (in.sparse)   reshapeSparseToDense(in,out,rows,cols,rowwise); else   reshapeDenseToSparse(in,out,rows,cols,rowwise);  return out;}  }
class C{  public static void endSection(){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    endSectionV18();  }}  }
class C{  public RankingImageListProvider inHours(int hours){  mTime=Integer.toString(hours) + "h";  return this;}  }
class C{  public static ImageRequestBuilder fromRequest(ImageRequest imageRequest){  return ImageRequestBuilder.newBuilderWithSource(imageRequest.getSourceUri()).setAutoRotateEnabled(imageRequest.getAutoRotateEnabled()).setImageDecodeOptions(imageRequest.getImageDecodeOptions()).setImageType(imageRequest.getImageType()).setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled()).setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel()).setPostprocessor(imageRequest.getPostprocessor()).setProgressiveRenderingEnabled(imageRequest.getProgressiveRenderingEnabled()).setRequestPriority(imageRequest.getPriority()).setResizeOptions(imageRequest.getResizeOptions());}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean isBinaryType(){  return true;}  }
class C{  public int readGolomb(int divisor) throws IOException {  int q=0;  while (readBit(MAX_PROBABILITY / 2)) {    q++;  }  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);  int r=0;  if (bit >= 0) {    int cutOff=(2 << bit) - divisor;    for (; bit > 0; bit--) {      r=(r << 1) + (readBit(MAX_PROBABILITY / 2) ? 1 : 0);    }    if (r >= cutOff) {      r=(r << 1) + (readBit(MAX_PROBABILITY / 2) ? 1 : 0) - cutOff;    }  }  return q * divisor + r;}  }
class C{  public JSONWriter value(Object o) throws JSONException {  return this.append(JSONObject.valueToString(o));}  }
class C{  protected final void closeSessionAndClearTokenInformation(){  if (sessionTracker != null) {    Session currentSession=sessionTracker.getOpenSession();    if (currentSession != null) {      currentSession.closeAndClearTokenInformation();    }  }}  }
class C{  private void redirectToAuthSub(HttpServletRequest request,HttpServletResponse response) throws IOException {  StringBuffer next=request.getRequestURL();  String queryString=request.getQueryString();  if (queryString != null && !"".equals(queryString)) {    next.append("?").append(queryString);  }  String scope=new URL(urlFactory.getBaseURL(),"feeds").toExternalForm();  String url=AuthSubUtil.getRequestUrl(authsubProtocol,authsubHostname,next.toString(),scope,false,true);  response.sendRedirect(response.encodeRedirectURL(url));}  }
class C{  public static <A>List<A> make(A[] vec){  List<A> xs=new List<A>();  for (int i=vec.length - 1; i >= 0; i--)   xs=new List<A>(vec[i],xs);  return xs;}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(false);  return ObjectReference.nullReference();}  }
class C{  public static void translateM(double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[12 + mi]+=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z;  }}  }
class C{  @SuppressWarnings("unchecked") protected T valueOf(double d){  if (!isNumeric())   throw new UnsupportedOperationException();  if (isLong())   return (T)Long.valueOf((long)d);  if (isDouble())   return (T)Double.valueOf(d);  throw new AssertionError();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Identity(String name,IdentityScope scope) throws KeyManagementException {  this(name);  if (scope != null) {    scope.addIdentity(this);  }  this.scope=scope;}  }
class C{  public PickingGraphMousePlugin(){  this(InputEvent.BUTTON1_MASK,InputEvent.BUTTON1_MASK | InputEvent.SHIFT_MASK);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public XATopicConnection createXATopicConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXATopicConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created topic connection: " + s);  }  return s;}  }
class C{  public FastAdapterDialog<Item> withNegativeButton(@StringRes int textRes,OnClickListener listener){  return withButton(BUTTON_NEGATIVE,textRes,listener);}  }
class C{  public SipRequest createInvite() throws PayloadException {  if (mThumbnail != null) {    return SipMessageFactory.createMultipartInvite(getDialogPath(),RichcallService.FEATURE_TAGS_IMAGE_SHARE,getDialogPath().getLocalContent(),BOUNDARY_TAG);  }  return SipMessageFactory.createInvite(getDialogPath(),RichcallService.FEATURE_TAGS_IMAGE_SHARE,getDialogPath().getLocalContent());}  }
class C{  public IllegalThreadStateException(){}  }
class C{  public static void cleanDepartures(TransitSchedule schedule){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      final Set<Double> departureTimes=new HashSet<>();      final List<Departure> departuresToRemove=new ArrayList<>();      for (      Departure departure : transitRoute.getDepartures().values()) {        double dt=departure.getDepartureTime();        if (departureTimes.contains(dt)) {          departuresToRemove.add(departure);        } else {          departureTimes.add(dt);        }      }      for (      Departure departure2Remove : departuresToRemove) {        transitRoute.removeDeparture(departure2Remove);      }    }  }}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  private String[] splitSpaceDelemitNameValuePair(String str){  if (str == null || str.isEmpty())   return null;  String str2=str.trim();  int idx=str2.lastIndexOf(' ');  if (idx <= 0)   return null;  String name=str2.substring(0,idx);  String val=str2.substring(idx + 1);  if (name.isEmpty() || val.isEmpty())   return null;  name=name.trim();  try {    BigDecimal bdecimal=new BigDecimal(val);    if (bdecimal != null) {      String[] res=new String[2];      res[0]=name;      res[1]=val;      return res;    }  } catch (  Exception ex) {  }  return null;}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  public boolean isPolygon(){  if (isRectangle()) {    return true;  }  Iterator it=createIteratorFromPool(this,null);  float[] curr=createFloatArrayFromPool(6);  float[] firstPoint=createFloatArrayFromPool(2);  try {    boolean firstMove=false;    int cmd=-1;    while (!it.isDone()) {switch (cmd=it.currentSegment(curr)) {case PathIterator.SEG_MOVETO:{          if (firstMove) {            return false;          }          firstMove=true;          firstPoint[0]=curr[0];          firstPoint[1]=curr[1];          break;        }case PathIterator.SEG_CUBICTO:case PathIterator.SEG_QUADTO:      return false;  }  it.next();}return cmd == PathIterator.SEG_CLOSE || (curr[0] == firstPoint[0] && curr[1] == firstPoint[1]);}  finally {recycle(it);recycle(curr);recycle(firstPoint);}}  }
class C{  public static Map<String,Object> updatePassword(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"loginevents.password_was_changed_with_success",locale));  if (!AuthHelper.authenticatorsLoaded()) {    AuthHelper.loadAuthenticators(ctx.getDispatcher());  }  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  boolean adminUser=false;  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if (UtilValidate.isEmpty(userLoginId)) {    userLoginId=loggedInUserLogin.getString("userLoginId");  }  if (!security.hasEntityPermission("PARTYMGR","_UPDATE",loggedInUserLogin)) {    if (!userLoginId.equals(loggedInUserLogin.getString("userLoginId"))) {      errMsg=UtilProperties.getMessage(resource,"loginservices.not_have_permission_update_password_for_user_login",locale);      return ServiceUtil.returnError(errMsg);    }  } else {    adminUser=true;  }  String currentPassword=(String)context.get("currentPassword");  String newPassword=(String)context.get("newPassword");  String newPasswordVerify=(String)context.get("newPasswordVerify");  String passwordHint=(String)context.get("passwordHint");  GenericValue userLoginToUpdate=null;  try {    userLoginToUpdate=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_read_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  if (userLoginToUpdate == null) {    boolean authenticated=false;    try {      authenticated=AuthHelper.authenticate(userLoginId,currentPassword,true);    } catch (    AuthenticatorException e) {      Debug.logWarning(e,e.getMessage(),module);    }    if (authenticated) {      try {        AuthHelper.updatePassword(userLoginId,currentPassword,newPassword);      } catch (      AuthenticatorException e) {        Debug.logError(e,e.getMessage(),module);        Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);        errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);        return ServiceUtil.returnError(errMsg);      }      result.put("updatedUserLogin",userLoginToUpdate);      return result;    } else {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  }  if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {    currentPassword=currentPassword.toLowerCase();    newPassword=newPassword.toLowerCase();    newPasswordVerify=newPasswordVerify.toLowerCase();  }  List<String> errorMessageList=new LinkedList<String>();  if (newPassword != null) {    checkNewPassword(userLoginToUpdate,currentPassword,newPassword,newPasswordVerify,passwordHint,errorMessageList,adminUser,locale);  }  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  String externalAuthId=userLoginToUpdate.getString("externalAuthId");  if (UtilValidate.isNotEmpty(externalAuthId)) {    try {      AuthHelper.updatePassword(externalAuthId,currentPassword,newPassword);    } catch (    AuthenticatorException e) {      Debug.logError(e,e.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  } else {    userLoginToUpdate.set("currentPassword",useEncryption ? HashCrypt.cryptUTF8(getHashType(),null,newPassword) : newPassword,false);    userLoginToUpdate.set("passwordHint",passwordHint,false);    userLoginToUpdate.set("requirePasswordChange","N");    try {      userLoginToUpdate.store();      createUserLoginPasswordHistory(delegator,userLoginId,newPassword);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  }  result.put("updatedUserLogin",userLoginToUpdate);  return result;}  }
class C{  public static void writeToFileReal_3D(String format,int n1,int n2,int n3,float[] x,String filename){  int sliceStride=n2 * n3;  int rowStride=n3;  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int k=0; k < n3; k++) {      out.newLine();      out.write("(:,:," + k + ")=");      out.newLine();      out.newLine();      for (int i=0; i < n1; i++) {        for (int j=0; j < n2; j++) {          out.write(String.format(format,x[i * sliceStride + j * rowStride + k]) + "\t");        }        out.newLine();      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public CounterConfig(long initialValue){  this.initialValue=initialValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.701 -0400",hash_original_method="A6FCE67D86594262DC3C3EA8CFE3DAB5",hash_generated_method="264A4E2C06ABA90BE2217E4E86052987") final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  public static void saveDocumentToStream(Document doc,OutputStream outputStream){  if (doc == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (outputStream == null) {    String message=Logging.getMessage("nullValue.OutputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Source source=new DOMSource(doc);  Result result=new StreamResult(outputStream);  try {    Transformer transformer=createTransformer();    transformer.transform(source,result);  } catch (  TransformerException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToWriteXml",outputStream);    Logging.logger().severe(message);    throw new WWRuntimeException(e);  }}  }
class C{  private void composePageSerializedBw(File outputFile) throws Exception {  File fileSerialize=null;  FileInputStream fis=null;  ObjectInputStream ois=null;  ImageData imageData=null;  int bpr, height, bit, i, row, pixel, x, bytePixel=0;  byte[] data;  int[] bits=null;  try {    fileSerialize=new File(path,prefix + "-serialize" + memoryBlockProcessed+ ".data");    fis=new FileInputStream(fileSerialize);    ois=new ObjectInputStream(fis);    imageData=(ImageData)ois.readObject();  } catch (  Exception e) {    throw e;  } finally {    if (ois != null) {      ois.close();    }    if (fis != null) {      fis.close();    }  }  BufferedImage imageSerialized=new BufferedImage(imageData.getBpr() * 8,memoryHeight,BufferedImage.TYPE_INT_RGB);  for (i=memoryBlockProcessed; i < memoryBlockTotal; i++) {    try {      fileSerialize=new File(path,prefix + "-serialize" + i+ ".data");      fis=new FileInputStream(fileSerialize);      ois=new ObjectInputStream(fis);      imageData=(ImageData)ois.readObject();      ois.close();      fis.close();    } catch (    Exception e) {      throw e;    } finally {      if (ois != null) {        ois.close();      }      if (fis != null) {        fis.close();      }    }    fileSerialize.delete();    height=imageData.getHeight() + memoryRow;    bpr=imageData.getBpr();    data=imageData.getData();    row=0;    pixel=0;    while (memoryRow < height) {      for (x=0; x < bpr; x++) {        bytePixel=data[pixel] & 0x00FF;        bits=getReverseBitsFromByte(bytePixel);        for (bit=0; bit < 8; bit++) {          imageSerialized.setRGB((x * 8) + bit,memoryRow,(bits[bit] == 0) ? 0 : 0xFFFFFF);        }        pixel++;      }      row+=bpr;      pixel=row;      memoryRow++;    }  }  imageSerialized.flush();  numPage++;  ImageIO.write(imageSerialized,"png",outputFile);  addTempFile(outputFile);  addScanFile(outputFile);}  }
class C{  private void sendStageProgressPatch(State state){  if (state.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    return;  }  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  this.sendRequest(patch);}  }
class C{  public LineBorder(Paint paint,Stroke stroke,RectangleInsets insets){  ParamChecks.nullNotPermitted(paint,"paint");  ParamChecks.nullNotPermitted(stroke,"stroke");  ParamChecks.nullNotPermitted(insets,"insets");  this.paint=paint;  this.stroke=stroke;  this.insets=insets;}  }
class C{  @Override public int byteLength(){  return datatype.byteLength() + delegate.byteLength();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SSPECIES__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object readObject() throws SQLException {  Object attrib=getNextAttribute();  if (attrib instanceof Struct) {    Struct s=(Struct)attrib;    Class<?> c=map.get(s.getSQLTypeName());    if (c != null) {      SQLData obj=null;      try {        obj=(SQLData)ReflectUtil.newInstance(c);      } catch (      Exception ex) {        throw new SQLException("Unable to Instantiate: ",ex);      }      Object attribs[]=s.getAttributes(map);      SQLInputImpl sqlInput=new SQLInputImpl(attribs,map);      obj.readSQL(sqlInput,s.getSQLTypeName());      return obj;    }  }  return attrib;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.698 -0500",hash_original_method="59F95FD933B02B7872449B124B2DE304",hash_generated_method="59F95FD933B02B7872449B124B2DE304") void waitUntilComplete(){synchronized (mClientResource) {    try {      if (HttpLog.LOGV)       HttpLog.v("Request.waitUntilComplete()");      mClientResource.wait();      if (HttpLog.LOGV)       HttpLog.v("Request.waitUntilComplete() done waiting");    } catch (    InterruptedException e) {    }  }}  }
class C{  public void removeAlarm(final Alarm ALARM){  if (alarms.contains(ALARM))   alarms.remove(ALARM);}  }
class C{  public static String encode(String string){  byte[] bytes;  try {    bytes=string.getBytes(PREFERRED_ENCODING);  } catch (  UnsupportedEncodingException e) {    bytes=string.getBytes();  }  return encodeBytes(bytes);}  }
class C{  protected boolean isMultiLineComment(){  return m_InsideMultiLineComment;}  }
class C{  public CUDA_RESOURCE_DESC(){}  }
class C{  public void testTimedPollFirst0() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.pollFirst(0,MILLISECONDS));  }  assertNull(q.pollFirst(0,MILLISECONDS));}  }
class C{  private void parseQuotedSpans(SpanManager sm,Span s,List<Span> quotedSpans,String quotation){  final int qlen=quotation.length();  int start=sm.indexOf(quotation,s.getStart(),s.getEnd());  while (start != -1) {    int end=sm.indexOf(quotation,start + qlen,s.getEnd());    if (end == -1) {      break;    }    Span qs=new Span(start,end);    quotedSpans.add(qs);    if (calculateSrcSpans) {      qs.setSrcSpan(new SrcSpan(sm.getSrcPos(start),sm.getSrcPos(end + qlen - 1) + 1));    }    sm.delete(end,end + qlen);    sm.delete(start,start + qlen);    start=sm.indexOf(quotation,qs.getEnd(),s.getEnd());  }}  }
class C{  protected String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){  String[] t=new String[buffer.length + lastRead.length];  System.arraycopy(buffer,0,t,0,buffer.length);  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);  return t;}  }
class C{  public Response onCommand(SMTPSession session,Request request){  String parameters=request.getArgument();  Response response=doDATAFilter(session,parameters);  if (response == null) {    return doDATA(session,parameters);  } else {    return response;  }}  }
class C{  public static void showMethaneToast(Integer methane,Context context){  String message="Methane level: " + Integer.toString(methane);  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  @Override protected void finalize() throws Throwable {  mGLSurfaceView=null;  mGL=null;  mGL10Ext=null;  mGL11=null;  mGL11Ext=null;  mGL11ExtPack=null;  super.finalize();}  }
class C{  public static void drawBoldDottedLine(final Graphics2D g,final int startX,final int endX,final int lineY,final Color bgColor,final Color fgColor,final boolean opaque){  if ((SystemInfo.isMac && !isRetina()) || SystemInfo.isLinux) {    drawAppleDottedLine(g,startX,endX,lineY,bgColor,fgColor,opaque);  } else {    drawBoringDottedLine(g,startX,endX,lineY,bgColor,fgColor,opaque);  }}  }
class C{  public void listDirectory(){  listDirectory(null,false,"null");}  }
class C{  private void textConfig(TextView textview,String text,int textColor){  textview.setText(text);  textview.setTextColor(textColor);}  }
class C{  public void flush() throws IOException {  super.flush();}  }
class C{  @Inline public void postAlloc(ObjectReference object,int bytes){  if (bytes > BYTES_IN_LINE)   ObjectHeader.markAsStraddling(object);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(ObjectHeader.isNewObject(object));  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ForwardingWord.isForwardedOrBeingForwarded(object));}  }
class C{  public AxisLayout(String group,String field){  super(group);  m_field=field;}  }
class C{  static final String arrayToRLEString(byte[] a){  StringBuffer buffer=new StringBuffer();  buffer.append((char)(a.length >> 16));  buffer.append((char)a.length);  byte runValue=a[0];  int runLength=1;  byte[] state=new byte[2];  for (int i=1; i < a.length; ++i) {    byte b=a[i];    if (b == runValue && runLength < 0xFF)     ++runLength; else {      encodeRun(buffer,runValue,runLength,state);      runValue=b;      runLength=1;    }  }  encodeRun(buffer,runValue,runLength,state);  if (state[0] != 0)   appendEncodedByte(buffer,(byte)0,state);  return buffer.toString();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public TodolistObject(int id){  this.id=id;}  }
class C{  public boolean isAutoFragment(){  return isAutoFragment;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public double magnitude(){  return magnitude(x,y,z);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void testNegPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,5,79,-73,-9,-76,-3,78,-35,-17,119};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private byte[] sendGetDownloadInfo() throws IOException, NetworkException {  return sendGetInfo(DOWNLOAD_INFO_REQUEST,false);}  }
class C{  private void fillValue(MPPProductPlanning pp,X_I_ProductPlanning ipp){  for (  MColumn col : getProductPlanningColumns()) {    if (!pp.is_new() && !col.isUpdateable() && ipp.get_ColumnIndex(col.getColumnName()) > 0)     continue;    if (MPPProductPlanning.COLUMNNAME_IsRequiredDRP.equals(col.getColumnName()) || MPPProductPlanning.COLUMNNAME_IsRequiredMRP.equals(col.getColumnName()) || MPPProductPlanning.COLUMNNAME_PP_Product_Planning_ID.equals(col.getColumnName()))     continue;    if (ipp.get_Value(col.getColumnName()) != null && pp.get_Value(col.getColumnName()) != null && pp.get_Value(col.getColumnName()).equals(ipp.get_Value(col.getColumnName())))     continue;    pp.set_ValueOfColumn(col.getColumnName(),ipp.get_Value(col.getColumnName()));  }  isImported=true;  return;}  }
class C{  private WriteTimeoutException(){}  }
class C{  private void reconstructStates(Tree tree,NodeRef node,int[] parentStates){  for (int i=0; i < patterns.getPatternCount(); i++) {    if (parentStates != null && stateSets[node.getNumber()][i][parentStates[i]]) {      states[node.getNumber()][i]=parentStates[i];    } else {      states[node.getNumber()][i]=firstIndex(stateSets[node.getNumber()][i]);    }  }  for (int i=0; i < tree.getChildCount(node); i++) {    reconstructStates(tree,tree.getChild(node,i),states[node.getNumber()]);  }}  }
class C{  @Override public void findBestPackage(@NonNull SimpleChromeCustomTabsAvailableAppProvider.PackageFoundCallback packageFoundCallback){  availableAppProvider.findBestPackage(packageFoundCallback);}  }
class C{  protected void verifyAuthorizedSystemOrTenantOrgUser(URI tenantId){  if (isSystemAdmin() || isSecurityAdmin()) {    return;  }  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(tenantId,user);}  }
class C{  public Fits(File myFile,boolean compressed) throws FitsException {  fileInit(myFile,compressed);}  }
class C{  public ImageLoadOption maxWidth(int maxWidth){  this.maxWidth=maxWidth;  return this;}  }
class C{  public static void shuffle(int[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public ElementIterator(Document document){  root=document.getDefaultRootElement();}  }
class C{  public static Sha256Hash of(byte[] contents){  return wrap(hash(contents));}  }
class C{  public static void clearQueryCache(){  SolrQueryRequest req=req();  req.getSearcher();  req.close();}  }
class C{  public void remove(JarEntry entry){  jarEntries.remove(entry.getName());  jarEntriesToAdd.remove(entry.getName());}  }
class C{  public boolean containsHeapCriticalMembers(final Set<InternalDistributedMember> members){  if (members.contains(this.cache.getMyId()) && this.mostRecentEvent.getState().isCritical()) {    return true;  }  return SetUtils.intersectsWith(members,this.resourceAdvisor.adviseCritialMembers());}  }
class C{  @Override public void onTabClosing(long time,int id){  reset();  forceAnimationToFinish();  TabModel model=mTabModelSelector.getModelForTabId(id);  if (model != null) {    mClosedTab=createLayoutTab(id,model.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);    mClosedTab.setBorderAlpha(0.0f);    mLayoutTabs=new LayoutTab[]{mClosedTab};    updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id)));  } else {    mLayoutTabs=null;    mClosedTab=null;  }  super.onTabClosing(time,id);}  }
class C{  private double regressionPrediction(Example example,boolean[] selectedAttributes,double[] coefficients,boolean useIntercept){  double prediction=0;  int index=0;  int counter=0;  for (  Attribute attribute : example.getAttributes()) {    if (selectedAttributes[counter++]) {      prediction+=coefficients[index] * example.getValue(attribute);      index++;    }  }  if (useIntercept) {    prediction+=coefficients[index];  }  return prediction;}  }
class C{  public synchronized void animateZoomAbs(final Point2D p,double scale,long duration){  m_transact.zoom(p,scale,duration);}  }
class C{  public static ImmutableTableRequirement immutableTable(TableDefinition tableDefinition){  return new ImmutableTableRequirement(tableDefinition);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public SQLTransientException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public static void mergeImage(Sector canvasSector,Sector imageSector,double aspectRatio,BufferedImage image,BufferedImage canvas){  if (canvasSector == null || imageSector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (canvas == null || image == null) {    String message=Logging.getMessage("nullValue.ImageSource");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (aspectRatio <= 0) {    String message=Logging.getMessage("Util.AspectRatioInvalid",aspectRatio);    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (!(canvasSector.intersects(imageSector)))   return;  int subWidth=aspectRatio >= 1 ? canvas.getWidth() : (int)Math.ceil((canvas.getWidth() * aspectRatio));  int subHeight=aspectRatio >= 1 ? (int)Math.ceil((canvas.getHeight() / aspectRatio)) : canvas.getHeight();  double yShift=aspectRatio >= 1d ? (1d - 1d / aspectRatio) * canvas.getHeight() : 0d;  double sh=((double)subHeight / (double)image.getHeight()) * (imageSector.getDeltaLat().divide(canvasSector.getDeltaLat()));  double sw=((double)subWidth / (double)image.getWidth()) * (imageSector.getDeltaLon().divide(canvasSector.getDeltaLon()));  double dh=subHeight * (-imageSector.getMaxLatitude().subtract(canvasSector.getMaxLatitude()).degrees / canvasSector.getDeltaLat().degrees);  double dw=subWidth * (imageSector.getMinLongitude().subtract(canvasSector.getMinLongitude()).degrees / canvasSector.getDeltaLon().degrees);  Graphics2D g=canvas.createGraphics();  g.translate(dw,dh + yShift);  g.scale(sw,sh);  g.drawImage(image,0,0,null);}  }
class C{  public PluginLoaderThread(final Window parent,final String rootPath,final List<String> pluginPaths,final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final ConfigManager configFile){  this.rootPath=Preconditions.checkNotNull(rootPath,"IE02094: Root path argument can not be null");  this.pluginPaths=Preconditions.checkNotNull(pluginPaths,"IE02095: Plugin paths argument can not be null");  this.pluginInterface=Preconditions.checkNotNull(pluginInterface,"IE02096: Plugin interface argument can not be null");  this.registry=Preconditions.checkNotNull(registry,"IE02097: Registry argument can not be null");  this.configFile=Preconditions.checkNotNull(configFile,"IE02098: Config file argument can not be null");  this.parent=parent;}  }
class C{  public void valueChange(ValueChangeEvent evt){  if (evt.getSource() instanceof WEditor) {    GridField changedField=((WEditor)evt.getSource()).getGridField();    if (changedField != null) {      processDependencies(changedField);    }  }  processNewValue(evt.getNewValue(),evt.getPropertyName());}  }
class C{  private void runDbRepair(){  try {    for (    String svcName : serviceNames) {      try (DbManagerOps dbManagerOps=new DbManagerOps(svcName)){        dbManagerOps.removeNodes(corruptedNodes);        dbManagerOps.startNodeRepairAndWaitFinish(true,false);      }     }  } catch (  Exception e) {    log.error("Node repair failed",e);    markRecoveryFailed(RecoveryStatus.ErrorCode.REPAIR_FAILED);    throw APIException.internalServerErrors.nodeRepairFailed();  }}  }
class C{  public static void writeXML(Writer out,String tag,String val,Map<String,String> attrs) throws IOException {  out.write('<');  out.write(tag);  for (  Map.Entry<String,String> entry : attrs.entrySet()) {    out.write(' ');    out.write(entry.getKey());    out.write('=');    out.write('"');    escapeAttributeValue(entry.getValue(),out);    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    escapeCharData(val,out);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  public static <NodeType extends ZyGraphNode<?> & ISelectableNode & IViewableNode & IYNode & IRawNodeAccessible,EdgeType extends ZyGraphEdge<?,?,?>>void centerNode(final AbstractZyGraph<NodeType,?> graph,final NodeType node){  Preconditions.checkNotNull(node,"Error: Node argument can't be null");  final NodeRealizer realizer=graph.getGraph().getRealizer(node.getNode());  if (realizer.isVisible()) {    graph.getView().focusView(graph.getView().getZoom(),new Point2D.Double(realizer.getCenterX(),realizer.getCenterY()),graph.getSettings().getLayoutSettings().getAnimateLayout());    graph.updateViews();  }}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  public void redrawEntity(Entity entity,Entity oldEntity){  Integer entityId=new Integer(entity.getId());  if (oldEntity == null) {    oldEntity=entity;  }  if (entity.getPosition() == null) {    Iterator<EntitySprite> spriteIter;    spriteIter=entitySprites.iterator();    while (spriteIter.hasNext()) {      EntitySprite sprite=spriteIter.next();      if (sprite.entity.equals(entity)) {        spriteIter.remove();      }    }    spriteIter=entitySpriteIds.values().iterator();    while (spriteIter.hasNext()) {      EntitySprite sprite=spriteIter.next();      if (sprite.entity.equals(entity)) {        spriteIter.remove();      }    }    Iterator<IsometricSprite> isoSpriteIter;    isoSpriteIter=isometricSprites.iterator();    while (isoSpriteIter.hasNext()) {      IsometricSprite sprite=isoSpriteIter.next();      if (sprite.entity.equals(entity)) {        isoSpriteIter.remove();      }    }    isoSpriteIter=isometricSpriteIds.values().iterator();    while (isoSpriteIter.hasNext()) {      IsometricSprite sprite=isoSpriteIter.next();      if (sprite.entity.equals(entity)) {        isoSpriteIter.remove();      }    }  }  Queue<EntitySprite> newSprites=new PriorityQueue<>(entitySprites);  HashMap<List<Integer>,EntitySprite> newSpriteIds=new HashMap<>(entitySpriteIds);  Queue<IsometricSprite> isoSprites=new PriorityQueue<>(isometricSprites);  HashMap<List<Integer>,IsometricSprite> newIsoSpriteIds=new HashMap<>(isometricSpriteIds);  EntitySprite sprite=entitySpriteIds.get(getIdAndLoc(entityId,-1));  IsometricSprite isoSprite=isometricSpriteIds.get(getIdAndLoc(entityId,-1));  if (sprite != null) {    newSprites.remove(sprite);  }  if (isoSprite != null) {    isoSprites.remove(isoSprite);  }  for (  int secondaryPos : oldEntity.getSecondaryPositions().keySet()) {    sprite=entitySpriteIds.get(getIdAndLoc(entityId,secondaryPos));    if (sprite != null) {      newSprites.remove(sprite);    }    isoSprite=isometricSpriteIds.get(getIdAndLoc(entityId,secondaryPos));    if (isoSprite != null) {      isoSprites.remove(isoSprite);    }  }  Coords position=entity.getPosition();  boolean canSee=(localPlayer == null) || !game.getOptions().booleanOption("double_blind") || !entity.getOwner().isEnemyOf(localPlayer)|| entity.hasSeenEntity(localPlayer)|| entity.hasDetectedEntity(localPlayer);  canSee&=(localPlayer == null) || !game.getOptions().booleanOption("hidden_units") || !entity.getOwner().isEnemyOf(localPlayer)|| !entity.isHidden();  if ((position != null) && canSee) {    if (entity.getSecondaryPositions().isEmpty()) {      sprite=new EntitySprite(this,entity,-1,radarBlipImage);      newSprites.add(sprite);      newSpriteIds.put(getIdAndLoc(entityId,-1),sprite);    } else {      for (      int secondaryPos : entity.getSecondaryPositions().keySet()) {        sprite=new EntitySprite(this,entity,secondaryPos,radarBlipImage);        newSprites.add(sprite);        newSpriteIds.put(getIdAndLoc(entityId,secondaryPos),sprite);      }    }    if (entity.getSecondaryPositions().isEmpty()) {      isoSprite=new IsometricSprite(this,entity,-1,radarBlipImage);      isoSprites.add(isoSprite);      newIsoSpriteIds.put(getIdAndLoc(entityId,-1),isoSprite);    } else {      for (      int secondaryPos : entity.getSecondaryPositions().keySet()) {        isoSprite=new IsometricSprite(this,entity,secondaryPos,radarBlipImage);        isoSprites.add(isoSprite);        newIsoSpriteIds.put(getIdAndLoc(entityId,secondaryPos),isoSprite);      }    }  }  entitySprites=newSprites;  entitySpriteIds=newSpriteIds;  isometricSprites=isoSprites;  isometricSpriteIds=newIsoSpriteIds;  for (Iterator<C3Sprite> i=c3Sprites.iterator(); i.hasNext(); ) {    final C3Sprite c3sprite=i.next();    if ((c3sprite.entityId == entity.getId()) || (c3sprite.masterId == entity.getId())) {      i.remove();    }  }  if (entity.hasC3() || entity.hasC3i() || entity.hasActiveNovaCEWS()) {    addC3Link(entity);  }  Iterator<FlyOverSprite> flyOverIt=flyOverSprites.iterator();  while (flyOverIt.hasNext()) {    final FlyOverSprite flyOverSprite=flyOverIt.next();    if (flyOverSprite.getEntityId() == entity.getId()) {      flyOverIt.remove();    }  }  if (entity.isAirborne() && (entity.getPassedThrough().size() > 1)) {    addFlyOverPath(entity);  }  updateEcmList();  highlightSelectedEntity();  scheduleRedraw();}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory].get(j);    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public static ArrayList<BloomFilter<Integer>> searchAllInBFList(List<BloomFilter<Integer>> bfList,Integer o,SearchStatistics stat){  ArrayList<BloomFilter<Integer>> result=new ArrayList<BloomFilter<Integer>>();  for (int i=0; i < bfList.size(); i++) {    stat.nbBFChecks++;    if (bfList.get(i).contains(o)) {      result.add(bfList.get(i));    }  }  return result;}  }
class C{  public List typeArguments(){  if (this.typeArguments == null) {    unsupportedIn2();  }  return this.typeArguments;}  }
class C{  public boolean isSetCreditStop(){  Object oo=get_Value(COLUMNNAME_IsSetCreditStop);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int textSize){  addEmojis(context,text,emojiSize,textSize,0,-1,false);}  }
class C{  public ContentLanguageHeader createContentLanguageHeader(Locale contentLanguage){  if (contentLanguage == null)   throw new NullPointerException("null arg contentLanguage");  ContentLanguage c=new ContentLanguage();  c.setContentLanguage(contentLanguage);  return c;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Iterator<File> iterator(){  return iter;}  }
class C{  public MessageProducer createProducer(Session session,Destination destination) throws JMSException {  MessageProducer producer=session.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  return producer;}  }
class C{  @Override public boolean test(Long offset){  return offset != -1 && (bits.size() <= offset || !bits.get(offset));}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("InfoServlet.init");}  }
class C{  private byte[] encryptFragment(byte[] plaintextFragment) throws GeneralSecurityException {  if (session == null) {    return plaintextFragment;  }  byte[] encryptedFragment=plaintextFragment;  CipherSuite cipherSuite=session.getWriteState().getCipherSuite();  LOGGER.log(Level.FINEST,"Encrypting record fragment using current write state\n{0}",session.getWriteState());switch (cipherSuite.getCipherType()) {case NULL:    break;case AEAD:  encryptedFragment=encryptAEAD(plaintextFragment);break;case BLOCK:encryptedFragment=encryptBlockCipher(plaintextFragment);break;case STREAM:break;default :break;}return encryptedFragment;}  }
class C{  public String sensorEventId(String sensorId,String eventId){  return sensorId + "." + eventId;}  }
class C{  public Observable<Record> updateObservable(Record record){  io.vertx.rx.java.ObservableFuture<Record> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  update(record,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void onDisable(){}  }
class C{  public Variable(String name){  this.name=name;  val=0;}  }
class C{  public DefaultWmsLayerStyle(String name,String title,String styleAbstract){  this.name=name;  this.title=title;  this.styleAbstract=styleAbstract;}  }
class C{  public DeltaCRLIndicatorExtension(Boolean critical,Object value) throws IOException {  super(PKIXExtensions.DeltaCRLIndicator_Id,critical.booleanValue(),value,NAME,LABEL);}  }
class C{  public void expectToken(String text) throws ParseException {  Token<T> t;  try {    t=peek();  } catch (  ParseException ex) {    if (prev != null && ex.getCajaMessage().getMessageType() == MessageType.END_OF_FILE) {      throw new ParseException(new Message(MessageType.EXPECTED_TOKEN,FilePosition.endOf(prev.t.pos),MessagePart.Factory.valueOf(text),MessagePart.Factory.valueOf("EOF")));    }    throw ex;  }  if (t.text.equals(text)) {    advance();    return;  }  throw new ParseException(new Message(MessageType.EXPECTED_TOKEN,t.pos,MessagePart.Factory.valueOf(text),MessagePart.Factory.valueOf(t.text)));}  }
class C{  public void put(ByteBuffer buffer){  for (int i=0; i < count; i++)   fields[i].put(buffer);}  }
class C{  @Nullable public static DebugServerException parse(String str){  if (TextUtils.isEmpty(str)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(str);    String fullFileName=jsonObject.getString("filename");    return new DebugServerException(jsonObject.getString("description"),shortenFileName(fullFileName),jsonObject.getInt("lineNumber"),jsonObject.getInt("column"));  } catch (  JSONException e) {    FLog.w(ReactConstants.TAG,"Could not parse DebugServerException from: " + str,e);    return null;  }}  }
class C{  public void addParameters(NameValuePair[] parameters){  log.trace("enter PostMethod.addParameters(NameValuePair[])");  if (parameters == null) {    log.warn("Attempt to addParameters(null) ignored");  } else {    super.clearRequestBody();    for (int i=0; i < parameters.length; i++) {      this.params.add(parameters[i]);    }  }}  }
class C{  public boolean isMaxValueSet(){  return mMaxValue != -MathHelper.NULL_VALUE;}  }
class C{  public static FilterStream create(String eventTypeName,String streamName){  return new FilterStream(Filter.create(eventTypeName),streamName);}  }
class C{  public String addPostRestoreVolumeSteps(Workflow workflow,String waitFor,URI storageSystemURI,URI volumeURI,URI snapshotURI,String taskId){  BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotURI);  if (snapshot != null && NullColumnValueGetter.isNotNullValue(snapshot.getTechnologyType()) && snapshot.getTechnologyType().equals(TechnologyType.NATIVE.name())) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);    if (volume != null && storageSystem != null) {      boolean vplexDistBackingVolume=false;      Volume associatedVPlexVolume=Volume.fetchVplexVolume(_dbClient,volume);      if (associatedVPlexVolume != null && associatedVPlexVolume.getAssociatedVolumes() != null && associatedVPlexVolume.getAssociatedVolumes().size() == 2) {        vplexDistBackingVolume=true;      }      if (vplexDistBackingVolume) {        volume=associatedVPlexVolume;      }      if (!NullColumnValueGetter.isNullURI(volume.getProtectionController()) && (vplexDistBackingVolume || (storageSystem != null && NullColumnValueGetter.isNotNullValue(storageSystem.getSystemType()) && storageSystem.getSystemType().equals(SystemType.vmax.name())))) {        ProtectionSystem rpSystem=null;        rpSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());        if (rpSystem == null) {          throw DeviceControllerExceptions.recoverpoint.failedConnectingForMonitoring(volume.getProtectionController());        }        List<URI> volumeURIs=getVolumesForRestore(snapshot,volume);        Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();        for (        URI volumeId : volumeURIs) {          Volume vol=_dbClient.queryObject(Volume.class,volumeId);          RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,vol.getId());          rsetParams.put(RPHelper.getRPWWn(vol.getId(),_dbClient),rsetParam);        }        String stepId=workflow.createStepId();        Workflow.Method recreateRSetExecuteMethod=new Workflow.Method(METHOD_RECREATE_RSET_STEP,rpSystem.getId(),volumeURIs,rsetParams);        waitFor=workflow.createStep(STEP_POST_VOLUME_RESTORE,"Post volume restore from snapshot, re-create replication set step for RP: " + volume.toString(),waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),recreateRSetExecuteMethod,rollbackMethodNullMethod(),stepId);        _log.info(String.format("Created workflow step to re-create replication set for volume %s.",volume.getId().toString()));      }    }  }  return waitFor;}  }
class C{  @Override public void OnWeatherIconChanging(){  setFlagIconsImage();  for (int i=0; i < flagIcons.length; i++) {    if (imageIds[i] != 0 && iconTouchAnimators[i] != null) {      iconTouchAnimators[i].start();    }  }}  }
class C{  protected void handleStartTag(TagElement tag){  Element elem=tag.getElement();  if (elem == dtd.body) {    inbody++;  } else   if (elem == dtd.html) {  } else   if (elem == dtd.head) {    inhead++;  } else   if (elem == dtd.title) {    intitle++;  } else   if (elem == dtd.style) {    instyle++;  } else   if (elem == dtd.script) {    inscript++;  }  if (debugFlag) {    if (tag.fictional()) {      debug("Start Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());    } else {      debug("Start Tag: " + tag.getHTMLTag() + " attributes: "+ getAttributes()+ " pos: "+ getCurrentPos());    }  }  if (tag.fictional()) {    SimpleAttributeSet attrs=new SimpleAttributeSet();    attrs.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,Boolean.TRUE);    callback.handleStartTag(tag.getHTMLTag(),attrs,getBlockStartPosition());  } else {    callback.handleStartTag(tag.getHTMLTag(),getAttributes(),getBlockStartPosition());    flushAttributes();  }}  }
class C{  private static String tsToString(TokenStream in) throws IOException {  StringBuilder out=new StringBuilder();  CharTermAttribute termAtt=in.addAttribute(CharTermAttribute.class);  in.clearAttributes();  termAtt.setEmpty().append("bogusTerm");  in.reset();  while (in.incrementToken()) {    if (out.length() > 0)     out.append(' ');    out.append(termAtt.toString());    in.clearAttributes();    termAtt.setEmpty().append("bogusTerm");  }  in.close();  return out.toString();}  }
class C{  public static ObjectAnimator rotateX(View view,float from,float to,int duration,AnimatorListenerAdapter listener){  ObjectAnimator rotate=ObjectAnimator.ofFloat(view,"rotation",from,to);  rotate.setDuration(duration);  if (listener != null) {    rotate.addListener(listener);  }  rotate.start();  return rotate;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static double MCSCE1fitness(boolean useTrainingData,GEPIndividual ind,double parameters[]){  double bestValueThreshold=parameters[0];  double secondBestValueThreshold;  if (parameters.length < 2)   secondBestValueThreshold=bestValueThreshold; else   secondBestValueThreshold=parameters[1];  double MCSCE=MCSCE1rawFitness(useTrainingData,ind,bestValueThreshold,secondBestValueThreshold);  return (1000.0 * (1.0 - MCSCE));}  }
class C{  public CertificateException(){  super();}  }
class C{  public static <S extends HasKeyPressHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    KeyPressEvent event=new KeyPressEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void testReadOffset(){  int dst_buff_offset=0;  int len=100;  byte[] src_buff=getWData(len);  byte[] dst_buff=new byte[len];  int offset=0;  ByteFifoBuffer instance=new ByteFifoBuffer(len);  int expResult=len;  instance.write(src_buff,len);  int result=instance.readOffset(dst_buff,dst_buff_offset,len,offset);  assertEquals(expResult,result);  assertArrayEquals(dst_buff,src_buff);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.542 -0500",hash_original_method="E8D7F5B96D38EF5E598258BCD9688B52",hash_generated_method="E6B8BA025A696D8DEFC6217C49FE1210") public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public Cat(final RPObject object,final Player owner){  super(object,owner);  setRPClass("cat");  put("type","cat");  update();}  }
class C{  private void assertEquals(byte[] expected,int len,byte[] actual,int alen){  assertEquals(len,alen);  for (int i=0; i < len; ++i) {    assertEquals(expected[i],actual[i]);  }}  }
class C{  public void doTrain(PrintWriter fout){  if (lambda == null) {    lambda=new double[feaGen.numFeatures()];  }  train.doTrain(fout);  updateFeatures();}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  public synchronized void clear(){  setArray(new Object[0]);}  }
class C{  @Override public double op(final double yield){  return dirtyPrice_ - dirtyPriceFromYield(faceAmount_,cashflows_,yield,dayCounter_,compounding_,frequency_,settlement_);}  }
class C{  public void endReadyForEvents(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(readyForEventsInProgressId,-1);  int endReadyForEventsId;  if (timedOut) {    endReadyForEventsId=readyForEventsTimedOutId;  } else   if (failed) {    endReadyForEventsId=readyForEventsFailedId;  } else {    endReadyForEventsId=readyForEventsId;  }  this.stats.incInt(endReadyForEventsId,1);  this.stats.incLong(readyForEventsDurationId,duration);}  }
class C{  public static IntList squareListRecursive(IntList L){  if (L == null) {    return null;  }  return new IntList(L.head * L.head,squareListRecursive(L.tail));}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == NodeTest.SHOW_BYFUNCTION) {    if (null != m_relativePathPattern) {      return m_relativePathPattern.execute(xctxt);    } else     return NodeTest.SCORE_NONE;  }  XObject score;  score=super.execute(xctxt,currentNode,dtm,expType);  if (score == NodeTest.SCORE_NONE)   return NodeTest.SCORE_NONE;  if (getPredicateCount() != 0) {    if (!executePredicates(xctxt,dtm,currentNode))     return NodeTest.SCORE_NONE;  }  if (null != m_relativePathPattern)   return m_relativePathPattern.executeRelativePathPattern(xctxt,dtm,currentNode);  return score;}  }
class C{  protected PSource(String pSrcName){  if (pSrcName == null) {    throw new NullPointerException("pSrcName == null");  }  this.pSrcName=pSrcName;}  }
class C{  public static String collapse(String name){  if (name == null) {    return null;  }  int breakPoint=name.lastIndexOf('.');  if (breakPoint < 0) {    return name;  }  return collapseQualifier(name.substring(0,breakPoint),true) + name.substring(breakPoint);}  }
class C{  public static int[] minIndex(double[][] M){  int[] minI=new int[M[0].length];  for (int j=0; j < minI.length; j++) {    minI[j]=0;    for (int i=1; i < M.length; i++)     if (M[i][j] < M[minI[j]][j])     minI[j]=i;  }  return minI;}  }
class C{  public final IOContainer run(final IOContainer input,final int logVerbosity) throws OperatorException {  return run(input,logVerbosity,null);}  }
class C{  @Override public Iterator<RelationshipType> iterator(){  return m_relationshipTypes.values().iterator();}  }
class C{  public double localScore(int i,int parent){  throw new UnsupportedOperationException();}  }
class C{  private <T>Collection<T> convert(Iterator<T> iter){  List<T> list=new ArrayList<>();  while (iter.hasNext())   list.add(iter.next());  return list;}  }
class C{  public void emit(){  if (listener != null) {    listener.updated(this);  }}  }
class C{  public JDBFileFilter(String extension){  this(extension,null);}  }
class C{  public boolean isRetransmitting(){  return isRetransmitting;}  }
class C{  private String readFully(HttpURLConnection connection) throws IOException {  String responseBody="";  if (connection.getContentLength() != 0) {    try {      InputStream in=connection.getInputStream();      if (in != null) {        responseBody=readStreamData(in);      }    } catch (    IOException e) {      InputStream in=connection.getErrorStream();      if (in != null) {        responseBody=readStreamData(in);      } else {        throw e;      }    }  }  return responseBody;}  }
class C{  public ConsoleHandler(){  super(System.out,new SimpleFormatter());}  }
class C{  public Segment lastSegment(){  assertOpen();  Map.Entry<Long,Segment> segment=segments.lastEntry();  return segment != null ? segment.getValue() : null;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof TransactionID))   return false;  byte targetBytes[]=((TransactionID)obj).transactionID;  return Arrays.equals(transactionID,targetBytes);}  }
class C{  void initFlurryAgent(){  FlurryAgent.setVersionName(utils.getVersionName(context));  FlurryAgent.setUserId(utils.getAndroidId(context));  FlurryAgent.setCaptureUncaughtExceptions(true);  FlurryAgent.init(context,applicationKey);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.023 -0400",hash_original_method="F417CE3385B772AADA134FBE4FF63C9E",hash_generated_method="A43582B3BD17A7EABBEAD7644BA64907") public synchronized int size(){  return count;}  }
class C{  public String globalInfo(){  return "An iterated version of the Lovins stemmer. It stems the word (in " + "case it's longer than 2 characters) until it no further changes.\n\n" + "For more information about the Lovins stemmer see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public IntLiteral createIntLiteral(){  IntLiteralImpl intLiteral=new IntLiteralImpl();  return intLiteral;}  }
class C{  public void doWindowOpen(){}  }
class C{  private static Remote exportObject(Remote obj,UnicastServerRef sref) throws RemoteException {  if (obj instanceof UnicastRemoteObject) {    ((UnicastRemoteObject)obj).ref=sref;  }  return sref.exportObject(obj,null,false);}  }
class C{  public static String lowerFirstChar(String string){  if (string == null)   return null;  if (string.length() <= 1)   return string.toLowerCase();  StringBuilder sb=new StringBuilder(string);  sb.setCharAt(0,Character.toLowerCase(sb.charAt(0)));  return sb.toString();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static int channelIsSubscribed(Context context,String serverId){  int channelId=-1;  Cursor cursor=null;  try {    cursor=context.getContentResolver().query(PremoContract.ChannelEntry.CONTENT_URI,null,PremoContract.ChannelEntry.GENERATED_ID + " = ?",new String[]{serverId},null);    if (cursor != null && cursor.moveToFirst()) {      channelId=cursor.getInt(cursor.getColumnIndex(PremoContract.ChannelEntry._ID));    }  }  finally {    ResourceHelper.closeResource(cursor);  }  return channelId;}  }
class C{  public static <T>Box<T> create(T initial){  return new Box<T>(initial);}  }
class C{  public double nextDouble(){  return ((((long)next(26) << 27) + next(27)) / (double)(1L << 53));}  }
class C{  public static void putAt(BitSet self,IntRange range,boolean value){  RangeInfo info=subListBorders(self.length(),range);  self.set(info.from,info.to,value);}  }
class C{  public TCPNetworkModule(SocketFactory factory,String host,int port,String resourceContext){  log.setResourceName(resourceContext);  this.factory=factory;  this.host=host;  this.port=port;}  }
class C{  public static int quadrant(double dx,double dy){  if (dx == 0.0 && dy == 0.0)   throw new IllegalArgumentException("Cannot compute the quadrant for point ( " + dx + ", "+ dy+ " )");  if (dx >= 0.0) {    if (dy >= 0.0)     return NE; else     return SE;  } else {    if (dy >= 0.0)     return NW; else     return SW;  }}  }
class C{  public void writeTurnOverflows(int[] times){  String[] cssClasses=calculateCssClasses(times);  ps.print("<tr>");  for (int i=0; i < times.length; i++) {    ps.print("<td class=" + cssClasses[i] + ">"+ times[i]+ "</td>");  }  ps.println("</tr>");}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public void testDoubleValue(){  DoubleAdder ai=new DoubleAdder();  assertEquals(0.0,ai.doubleValue());  ai.add(1.0);  assertEquals(1.0,ai.doubleValue());}  }
class C{  protected Media(int value){  super(value);}  }
class C{  public static long dateValueFromDate(long ms){  Calendar cal=getCalendar();  cal.setTimeInMillis(ms);  return dateValueFromCalendar(cal);}  }
class C{  public PCA(DataSet dataSet,int maxPCs,double threshold){  this(maxPCs,threshold);  fit(dataSet);}  }
class C{  public boolean isProfilesEnabled(){  try {    return getService().isEnabled();  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }  return false;}  }
class C{  @LargeTest public void testStressStoryBoard() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_161kbps_s_0_26.mp4";  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_854x480_15fps_256kbps_AACLC_16khz_48kbps_s_0_26.mp4";  final String videoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final String imageItemFileName4=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String imageItemFileName5=INPUT_FILE_PATH + "IMG_176x144.jpg";  final String audioFilename6=INPUT_FILE_PATH + "AMRNB_8KHz_12.2Kbps_m_1_17.3gp";  final String audioFilename7=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final int audioVolume=50;  final String[] loggingInfo=new String[1];  int i=1;  writeTestCaseHeader("testStressStoryBoard");  getBeginMemory();  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);  mediaItem1.setExtractBoundaries(0,10000);  mVideoEditor.addMediaItem(mediaItem1);  final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2",videoItemFileName2,renderingMode);  mediaItem2.setExtractBoundaries(mediaItem2.getDuration() / 4,mediaItem2.getDuration() / 2);  mVideoEditor.addMediaItem(mediaItem2);  final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3",videoItemFileName3,renderingMode);  mediaItem3.setExtractBoundaries(mediaItem3.getDuration() / 2,mediaItem3.getDuration());  mVideoEditor.addMediaItem(mediaItem3);  final MediaImageItem mediaItem4=new MediaImageItem(mVideoEditor,"m4",imageItemFileName4,5000,renderingMode);  mVideoEditor.addMediaItem(mediaItem4);  final MediaImageItem mediaItem5=new MediaImageItem(mVideoEditor,"m5",imageItemFileName5,5000,renderingMode);  mVideoEditor.addMediaItem(mediaItem5);  final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF",mediaItem2,mediaItem3,2500,Transition.BEHAVIOR_MIDDLE_FAST);  mVideoEditor.addTransition(tranCrossfade);  final TransitionCrossfade tranCrossfade1=new TransitionCrossfade("transCF1",mediaItem3,mediaItem4,2500,Transition.BEHAVIOR_MIDDLE_FAST);  mVideoEditor.addTransition(tranCrossfade1);  final AudioTrack audioTrack1=new AudioTrack(mVideoEditor,"Audio Track1",audioFilename6);  mVideoEditor.addAudioTrack(audioTrack1);  mVideoEditor.removeAudioTrack("Audio Track1");  final AudioTrack audioTrack2=new AudioTrack(mVideoEditor,"Audio Track2",audioFilename7);  mVideoEditor.addAudioTrack(audioTrack2);  audioTrack2.enableLoop();  getAfterMemory_updateLog(loggingInfo,false,i);  getBeginMemory();  mVideoEditor.removeAudioTrack("Audio Track2");  mVideoEditor.removeTransition("transCF");  mVideoEditor.removeTransition("transCF1");  mVideoEditor.removeMediaItem("m5");  mVideoEditor.removeMediaItem("m4");  mVideoEditor.removeMediaItem("m3");  mVideoEditor.removeMediaItem("m2");  mVideoEditor.removeMediaItem("m1");  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  protected void prepare(){}  }
class C{  public TeXFormula centerOnAxis(){  root=new VCenteredAtom(root);  return this;}  }
class C{  public int size(){  return m_clauses.size();}  }
class C{  public DefaultDeployerFactory(){  this(null);}  }
class C{  public long resolveContentId(final String content){  final long contentId=NumberUtils.toLong(content,0L);  if (contentId > 0L) {    bookmarkService.saveBookmarkForContent(content);    return contentId;  }  final String contentIdStr=bookmarkService.getContentForURI(content);  return NumberUtils.toLong(contentIdStr,0L);}  }
class C{  static void test4(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuilder sb=new StringBuilder();    int c;    for (int j=0; j < s.length(); j+=Character.charCount(c)) {      c=s.codePointAt(j);      StringBuilder rsb=sb.appendCodePoint(c);      check(sb != rsb,"appendCodePoint returned a wrong object");      int sbc=sb.codePointAt(j);      check(sbc != c,"appendCodePoint(" + j + ") != c",sbc,c);    }    check(!s.equals(sb.toString()),"appendCodePoint() produced a wrong result with input[" + i + "]");  }  testAppendCodePoint(-1,IllegalArgumentException.class);  testAppendCodePoint(Character.MAX_CODE_POINT + 1,IllegalArgumentException.class);}  }
class C{  public void futureObjectResult(long futPtr,long memPtr){  enter();  try {    PlatformCallbackUtils.futureObjectResult(envPtr,futPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public void endVisit(AnnotationTypeMemberDeclaration node){}  }
class C{  @NotNull default B append(double d,int decimalPlaces) throws BufferOverflowException {  if (decimalPlaces < 20) {    double d2=d * Maths.tens(decimalPlaces);    if (d2 <= Long.MAX_VALUE && d2 >= Long.MIN_VALUE) {      return appendDecimal(Math.round(d2),decimalPlaces);    }  }  return append(d);}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("wildfly8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly8xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFlyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFlyRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly9xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFlyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFlyRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly9xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly10x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFlyExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("wildfly10x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFlyRuntimeConfigurationCapability.class);}  }
class C{  public void execute() throws CommandException {  if (commandExecutor == null) {    throw new CommandException("commandExecutor is not set");  }  validateCommandLine();  resolveCommandLine();  executeCommandLine();  if (output.getExitValue() == 0) {    processOutput();  } else {    processError();  }}  }
class C{  public Pose planeFitToOpenGLPose(double[] point,double[] normal,TangoPoseData tangoPose){  if (mDeviceTDepthCamera == null) {    throw new RuntimeException("You must call setupExtrinsics first");  }  Matrix4 startServiceTdevice=tangoPoseToMatrix(tangoPose);  Vector3 depthUp=TANGO_WORLD_UP.clone();  startServiceTdevice.clone().multiply(mDeviceTDepthCamera).inverse().rotateVector(depthUp);  Matrix4 depthTplane=matrixFromPointNormalUp(point,normal,depthUp);  Matrix4 openglWorldTplane=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice).multiply(mDeviceTDepthCamera).multiply(depthTplane);  return matrixToPose(openglWorldTplane);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    setAnnotationList((AnnotationList)newValue);  return;case N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS:getDeclaredModifiers().clear();getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_CLASS_DECLARATION__NAME:setName((String)newValue);return;case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY:setTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static <T extends AbstractBlockBase<T>>boolean skipLoopHeader(AbstractBlockBase<T> block){  return (block.isLoopHeader() && !block.isLoopEnd() && block.getLoop().numBackedges() == 1);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x9C5CFB7D,version=150) public int sceNetAdhocMatchingGetPoolStat(){  checkInitialized();  return 0;}  }
class C{  public boolean isSolved(){  return solved;}  }
class C{  private static TestKey key(boolean comparable,int id){  return comparable ? new TestKeyComparable(id) : new TestKey(id);}  }
class C{  private void check(InetAddress address,int prefixLength){  if (address.isLoopbackAddress()) {    throw new IllegalArgumentException("Bad address");  }  if (address instanceof Inet4Address) {    if (prefixLength < 0 || prefixLength > 32) {      throw new IllegalArgumentException("Bad prefixLength");    }  } else   if (address instanceof Inet6Address) {    if (prefixLength < 0 || prefixLength > 128) {      throw new IllegalArgumentException("Bad prefixLength");    }  } else {    throw new IllegalArgumentException("Unsupported family");  }}  }
class C{  public void testConcurrentLocalHostPing() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(2000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  doConcurrentPing(has,address,1,200,true);  String os=System.getProperty("os.name");  if ("Mac OS X".equals(os))   logger.info("Skipping concurrent ping on Mac OS X platform..."); else   this.doConcurrentPing(has,address,10,20,true);}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  throwIfError(stderr);  return StringUtils.EMPTY;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StackedLayout(Orientation orientation){  this(orientation,0.0,0.0);}  }
class C{  public void checkStatus(){  if (!getProcessStatus()) {    return;  }  log("Checking status",Level.FINE);  try {    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTTIMELINE);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    long max=0;    ResponseList<Status> timeline=null;    boolean more=true;    int page=1;    int count=0;    this.errors=0;    while (more && (count <= this.maxStatus) && page <= this.maxPage) {      if (last == 0) {        timeline=getConnection().getHomeTimeline();        more=false;      } else {        Paging paging=new Paging(page,last);        timeline=getConnection().getHomeTimeline(paging);        if ((timeline == null) || (timeline.size() < 20)) {          more=false;        }        page++;      }      if ((timeline == null) || timeline.isEmpty()) {        break;      }      log("Processing status",Level.INFO,timeline.size());      for (int index=timeline.size() - 1; index >= 0; index--) {        if (count >= this.maxStatus) {          break;        }        if (this.errors > this.maxErrors) {          break;        }        Status status=timeline.get(index);        String name=status.getUser().getScreenName();        if (!name.equals(this.userName)) {          long statusTime=status.getCreatedAt().getTime();          long statusId=status.getId();          if (statusId > max) {            max=statusId;          }          if ((System.currentTimeMillis() - statusTime) > DAY) {            log("Day old status",Level.INFO,statusId,statusTime);            more=false;            continue;          }          if (statusId > last) {            if (Utils.checkProfanity(status.getText())) {              continue;            }            boolean match=false;            List<String> statusWords=new TextStream(status.getText().toLowerCase()).allWords();            if (getListenStatus()) {              this.languageState=LanguageState.Listening;              match=true;            } else {              for (              String text : getStatusKeywords()) {                List<String> keywords=new TextStream(text.toLowerCase()).allWords();                if (!keywords.isEmpty() && statusWords.containsAll(keywords)) {                  match=true;                  break;                }              }            }            if (match) {              count++;              input(status);              Utils.sleep(500);            } else {              log("Skipping status, missing keywords",Level.FINE,status.getText());              if (!status.isRetweet() && !status.getUser().isProtected() && !status.isRetweetedByMe()) {                boolean retweeted=false;                for (                String keywords : getRetweet()) {                  List<String> keyWords=new TextStream(keywords.toLowerCase()).allWords();                  if (!keyWords.isEmpty()) {                    if (statusWords.containsAll(keyWords)) {                      retweeted=true;                      count++;                      retweet(status);                      Utils.sleep(500);                      break;                    }                  }                }                if (!retweeted) {                  log("Skipping rewteet, missing keywords",Level.FINE,status.getText());                }              } else               if (!getRetweet().isEmpty()) {                if (status.isRetweet()) {                  log("Skipping rewteet",Level.FINE,status.getText());                } else                 if (status.getUser().isProtected()) {                  log("Skipping protected user",Level.FINE,status.getText());                } else                 if (status.isRetweetedByMe()) {                  log("Skipping already retweeted",Level.FINE,status.getText());                }              }            }          } else {            log("Old status",Level.INFO,statusId,statusTime);          }        }      }    }    if (max != 0) {      twitter.setRelationship(Primitive.LASTTIMELINE,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }  int count=0;  while (count < 60 && !getBot().memory().getActiveMemory().isEmpty()) {    Utils.sleep(1000);  }}  }
class C{  public Command showAtPosition(int top,int bottom,int left,int right,boolean modal){  this.top=top;  this.bottom=bottom;  if (isRTL()) {    this.left=right;    this.right=left;  } else {    this.left=left;    this.right=right;  }  setDisposed(false);  this.modal=modal;  lastCommandPressed=null;  showModal(this.top,this.bottom,this.left,this.right,false,modal,false);  return lastCommandPressed;}  }
class C{  public Checksum(int new_cksumType,byte[] data,EncryptionKey key,int usage) throws KdcErrException, KrbApErrException, KrbCryptoException {  cksumType=new_cksumType;  CksumType cksumEngine=CksumType.getInstance(cksumType);  if (!cksumEngine.isSafe())   throw new KrbApErrException(Krb5.KRB_AP_ERR_INAPP_CKSUM);  checksum=cksumEngine.calculateKeyedChecksum(data,data.length,key.getBytes(),usage);}  }
class C{  public static void rename(File source,File target) throws RenameException {  Preconditions.checkNotNull(source);  Preconditions.checkNotNull(target);  target.delete();  if (source.renameTo(target)) {    return;  }  Throwable innerException=null;  if (target.exists()) {    innerException=new FileDeleteException(target.getAbsolutePath());  } else   if (!source.getParentFile().exists()) {    innerException=new ParentDirNotFoundException(source.getAbsolutePath());  } else   if (!source.exists()) {    innerException=new FileNotFoundException(source.getAbsolutePath());  }  throw new RenameException("Unknown error renaming " + source.getAbsolutePath() + " to "+ target.getAbsolutePath(),innerException);}  }
class C{  private boolean internalDelete(File target,String pathToDelete,MultiStatus status,IProgressMonitor monitor){  if (monitor.isCanceled()) {    throw new OperationCanceledException();  }  if (target.delete() || !target.exists())   return true;  if (target.isDirectory()) {    monitor.subTask(NLS.bind(Messages.deleting,target));    String[] list=target.list();    if (list == null)     list=EMPTY_STRING_ARRAY;    int parentLength=pathToDelete.length();    boolean failedRecursive=false;    for (int i=0, imax=list.length; i < imax; i++) {      if (monitor.isCanceled()) {        throw new OperationCanceledException();      }      StringBuffer childBuffer=new StringBuffer(parentLength + list[i].length() + 1);      childBuffer.append(pathToDelete);      childBuffer.append(File.separatorChar);      childBuffer.append(list[i]);      String childName=childBuffer.toString();      failedRecursive=!internalDelete(new File(childName),childName,status,monitor) || failedRecursive;      monitor.worked(1);    }    try {      if (!failedRecursive && target.delete())       return true;    } catch (    Exception e) {      String message=NLS.bind(Messages.couldnotDelete,target.getAbsolutePath());      status.add(new Status(IStatus.ERROR,Policy.PI_FILE_SYSTEM,EFS.ERROR_DELETE,message,e));      return false;    }  }  String message=null;  if (fetchInfo().getAttribute(EFS.ATTRIBUTE_READ_ONLY))   message=NLS.bind(Messages.couldnotDeleteReadOnly,target.getAbsolutePath()); else   message=NLS.bind(Messages.couldnotDelete,target.getAbsolutePath());  status.add(new Status(IStatus.ERROR,Policy.PI_FILE_SYSTEM,EFS.ERROR_DELETE,message,null));  return false;}  }
class C{  protected final RStringVector cachedArgNameVector(ArgumentsSignature signature){  RStringVector result=argNameVector(signature);  if (result != null) {    result.makeSharedPermanent();  }  return result;}  }
class C{  public void readData(RowSetInternal caller){}  }
class C{  public void build(Instruction insts){  Instruction i;  i=insts;  icount=0;  while (i != null) {    icount++;    i=i.next;  }  if (icount > 0) {    instructions=new Instruction[icount];    int k;    k=0;    i=insts;    while (i != null) {      instructions[k]=i;      k++;      i=i.next;    }    i=insts;    while (i != null) {      i.offsetToPointer(this);      i=i.next;    }  }}  }
class C{  public boolean definesAuthority(String authority){  String[] splitAuthorities=authorities.split(";");  for (  String defined : splitAuthorities) {    defined=defined.trim();    if (authority.equals(defined))     return true;  }  return false;}  }
class C{  static void exhaustInputStream(InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  public final double totalCost(){  return m_delegate.totalCost();}  }
class C{  public EPDataFlowInstantiationOptions operatorProvider(EPDataFlowOperatorProvider operatorProvider){  this.operatorProvider=operatorProvider;  return this;}  }
class C{  public static byte[] decrypt(byte[] key,byte[] data,Optional<byte[]> optional){  try {    ByteBuffer buffer=ByteBuffer.wrap(data);    buffer.order(ByteOrder.BIG_ENDIAN);    int version=Byte.toUnsignedInt(buffer.get());    logger.debug("-- decrypt() - version: {}",version);    buffer.rewind();switch (version) {case 0:      return doDecrypt(buffer,key,1,8,8,optional);case 1:    return doDecrypt(buffer,key,1,12,12,optional);case 2:  return doDecrypt(buffer,key,3,12,12,optional);case 3:if (buffer.limit() < 4) {  throw new IllegalArgumentException("cipher text too short for header");}int headerLength=4 + Byte.toUnsignedInt(buffer.get(3));return doDecrypt(buffer,key,headerLength,12,12,optional);default :throw new IllegalArgumentException("unsupported version: " + version);}} catch (BufferUnderflowException ex) {throw new IllegalArgumentException("decryption exception",ex);}}  }
class C{  public TypeDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  @Override public ExampleSet createExampleSet(Attribute labelAttribute,Attribute weightAttribute,Attribute idAttribute){  Map<Attribute,String> specialAttributes=new LinkedHashMap<>();  if (labelAttribute != null) {    specialAttributes.put(labelAttribute,Attributes.LABEL_NAME);  }  if (weightAttribute != null) {    specialAttributes.put(weightAttribute,Attributes.WEIGHT_NAME);  }  if (idAttribute != null) {    specialAttributes.put(idAttribute,Attributes.ID_NAME);  }  return new SimpleExampleSet(this,specialAttributes);}  }
class C{  private double[] sequence(int start,int end){  double[] sequence=new double[end - start + 1];  for (int i=start; i <= end; i++) {    sequence[i - start]=i;  }  return sequence;}  }
class C{  public ListNode reverseBetween(ListNode head,int m,int n){  if (m >= n || head == null)   return head;  ListNode dummy=new ListNode(0);  dummy.next=head;  ListNode pre=dummy;  for (int i=1; i < m; i++)   pre=pre.next;  ListNode cur=pre.next;  for (int i=m; i < n; i++) {    ListNode temp=cur.next.next;    cur.next.next=pre.next;    pre.next=cur.next;    cur.next=temp;  }  return dummy.next;}  }
class C{  public static boolean isPrimitiveValue(Object object){  NullArgumentException.validateNotNull("object",object);  if (object instanceof String || object instanceof Character || object instanceof Boolean|| object instanceof Integer|| object instanceof Double|| object instanceof Float|| object instanceof Long|| object instanceof Byte|| object instanceof Short) {    return true;  }  if (object.getClass().isArray()) {    return isArrayOfPrimitiveValues(object);  }  return false;}  }
class C{  public IgniteSpiMultiException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void stop(){  this.pollingThread.close();  try {    this.pollingThread.join(5000);  } catch (  InterruptedException e) {    logger.warn(LocalizedMessage.create(LocalizedStrings.LoadMonitor_INTERRUPTED_WAITING_FOR_POLLING_THREAD_TO_FINISH));    Thread.currentThread().interrupt();  }  probe.close();}  }
class C{  OwnerChange(final Territory territory,final PlayerID newOwner){  m_territory=territory.getName();  m_new=getName(newOwner);  m_old=getName(territory.getOwner());}  }
class C{  public void registerKeepAliveTimeout(long platformIdent){  AgentStatusData agentStatusData=agentStatusDataMap.get(platformIdent);  if (null != agentStatusData) {    agentStatusData.setAgentConnection(AgentConnection.NO_KEEP_ALIVE);  }}  }
class C{  public String next(){  return nextLine();}  }
class C{  public static void clearThreadLocal(){  GridH2QueryContext x=qctx.get();  assert x != null;  qctx.remove();}  }
class C{  public void testSerialization(){{    float[] test=new float[100];    for (int i=0; i < test.length; i++) {      test[i]=(float)(Math.random() * 1000);    }    byte[] bytes=SerializationUtils.toByteArray(test);    float[] floats=SerializationUtils.toFloatArray(bytes);    for (int i=0; i < floats.length; i++) {      assertEquals(floats[i],test[i]);    }  }{    double[] test=new double[100];    for (int i=0; i < test.length; i++) {      test[i]=(Math.random() * 1000);    }    byte[] bytes=SerializationUtils.toByteArray(test);    double[] floats=SerializationUtils.toDoubleArray(bytes);    for (int i=0; i < floats.length; i++) {      assertEquals(floats[i],test[i]);    }  }}  }
class C{  public ResultSet read(String inputFileName,String[] colNames,String charset) throws SQLException {  init(inputFileName,charset);  try {    return readResultSet(colNames);  } catch (  IOException e) {    throw convertException("IOException reading " + inputFileName,e);  }}  }
class C{  public int readListStart() throws IOException {  return parseTag();}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public MonitoredCounter(String name,String description,MonitorableRegistry registry){  this(name,description,registry,ONE);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Validator<String> length(int min,int max,BiFunction<String,StringLengthValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringLengthValidator.create(min,max),exception);}  }
class C{  public static String processKeyString(String s){  return s.replaceAll("\\\\","/").replaceAll("'","''");}  }
class C{  void addQueryResult(long token,UISearchResult line,SearchResultMediator rp){  if (rp.isStopped()) {    return;  }  if (!rp.matches(token))   throw new IllegalArgumentException("guids don't match");  rp.add(line);  int resultPanelIndex;  resultPanelIndex=entries.indexOf(rp);  if (resultPanelIndex == -1) {    return;  }  tabbedPane.setTitleAt(resultPanelIndex,titleOf(rp));}  }
class C{  public TFloatFloatHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static int createNewModule(final CConnection connection,final int rawModuleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE01857: Connection argument can not be null");  final String query=" { ? = call create_module(?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.registerOutParameter(1,Types.INTEGER);  call.setInt(2,rawModuleId);  call.execute();  return call.getInt(1);}  }
class C{  protected Node newNode(){  return new SVGOMCursorElement();}  }
class C{  public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  public GenerateValueFiles(int baseX,int baseY,String supportStr){  this.baseW=baseX;  this.baseH=baseY;  if (!this.supportStr.contains(baseX + "," + baseY)) {    this.supportStr+=baseX + "," + baseY+ ";";  }  this.supportStr+=validateInput(supportStr);  System.out.println(supportStr);  File dir=new File(dirStr);  if (!dir.exists()) {    dir.mkdir();  }  System.out.println(dir.getAbsoluteFile());}  }
class C{  protected void updateClassifier(Instance instance,boolean filter) throws Exception {  if (!instance.classIsMissing()) {    if (filter) {      if (m_replaceMissing != null) {        m_replaceMissing.input(instance);        instance=m_replaceMissing.output();      }      if (m_nominalToBinary != null) {        m_nominalToBinary.input(instance);        instance=m_nominalToBinary.output();      }      if (m_normalize != null) {        m_normalize.input(instance);        instance=m_normalize.output();      }    }    double wx=dotProd(instance,m_weights,instance.classIndex());    double y;    double z;    if (instance.classAttribute().isNominal()) {      y=(instance.classValue() == 0) ? -1 : 1;      z=y * (wx + m_weights[m_weights.length - 1]);    } else {      y=instance.classValue();      z=y - (wx + m_weights[m_weights.length - 1]);      y=1;    }    double multiplier=1.0;    if (m_numInstances == 0) {      multiplier=1.0 - (m_learningRate * m_lambda) / m_t;    } else {      multiplier=1.0 - (m_learningRate * m_lambda) / m_numInstances;    }    for (int i=0; i < m_weights.length - 1; i++) {      m_weights[i]*=multiplier;    }    if (m_loss == SQUAREDLOSS || m_loss == LOGLOSS || m_loss == HUBER || (m_loss == HINGE && (z < 1)) || (m_loss == EPSILON_INSENSITIVE && Math.abs(z) > m_epsilon)) {      double factor=m_learningRate * y * dloss(z);      int n1=instance.numValues();      for (int p1=0; p1 < n1; p1++) {        int indS=instance.index(p1);        if (indS != instance.classIndex() && !instance.isMissingSparse(p1)) {          m_weights[indS]+=factor * instance.valueSparse(p1);        }      }      m_weights[m_weights.length - 1]+=factor;    }    m_t++;  }}  }
class C{  private void finished(){  mViewCountdown.clearAnimation();  animationStarted=false;  mViewCountdown.setTextColor(Color.WHITE);  mViewCountdown.setTypeface(Typeface.DEFAULT);  if (mViewPlayAgainBackground.getVisibility() != View.VISIBLE && !wasPaused) {    wasPaused=true;    submitScore(MatchingGameConstants.LEADERBOARDS_GUMBALL,mMatchScore);    if (mBackgroundMusic != null) {      mBackgroundMusic.stop();      mBackgroundMusic.release();      mBackgroundMusic=null;    }    mViewPlayAgainScore.setText(String.valueOf(mMatchScore));    mViewPlayAgainBackground.startAnimation(mAnimationPlayAgainBackground);    mViewPlayAgainMain.startAnimation(mAnimationPlayAgainMain);    mViewPlayAgainBackground.setVisibility(View.VISIBLE);    mViewPlayAgainMain.setVisibility(View.VISIBLE);    mViewMainMenuButton.setVisibility(View.VISIBLE);    mViewInviteButton.setVisibility(View.VISIBLE);    setSignInButtonVisibility(true);    mSoundPool.play(mSoundGameOver,.2f,.2f,0,0,1.0f);  }  cancel();}  }
class C{  public boolean epsilonEquals(Matrix3d m1,double epsilon){  double diff;  diff=m00 - m1.m00;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m01 - m1.m01;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m02 - m1.m02;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m10 - m1.m10;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m11 - m1.m11;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m12 - m1.m12;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m20 - m1.m20;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m21 - m1.m21;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=m22 - m1.m22;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  return true;}  }
class C{  protected String[] options(){  String[] options={"-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false","-Dcom.sun.management.jmxremote=true","-Dcom.sun.management.jmxremote.port=" + String.valueOf(jmxPort),"-Dcom.sun.management.jmxremote.autodiscovery=true","-Dcom.sun.management.jdp.pause=1","-Dcom.sun.management.jdp.name=" + jdpName,"-Dcom.sun.management.jdp.address=224.0.23.178","-Djava.util.logging.SimpleFormatter.format='%1$tF %1$tT %4$-7s %5$s %n'",testName};  return options;}  }
class C{  public boolean addNode(Node node){  if (nodes.contains(node))   return true;  if (node == null) {    throw new NullPointerException();  }  if (!(getNode(node.getName()) == null)) {    if (nodes.contains(node)) {      namesHash.put(node.getName(),node);    }  }  if (edgeLists.containsKey(node)) {    return false;  }  edgeLists.put(node,new ArrayList<Edge>(4));  nodes.add(node);  namesHash.put(node.getName(),node);  if (node.getNodeType() != NodeType.ERROR) {    getPcs().firePropertyChange("nodeAdded",null,node);  }  return true;}  }
class C{  @Override public void serviceResolved(ServiceEvent event){synchronized (this) {    _infos.put(event.getName(),event.getInfo());    _events.remove(event.getName());  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @Override public void printCommand(@NotNull String text){  view.printPredefinedStyle(text,"font-weight: bold; font-style: italic;");  for (  ActionDelegate actionDelegate : actionDelegates) {    actionDelegate.onConsoleOutput(this);  }}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.335 -0500",hash_original_method="9CD772E1CB5E6BE1ED1982B78A84FA1B",hash_generated_method="D9D23F1D55E63A0D788DDC2FCF9B1A62") public boolean isEmpty(){  return hmap.isEmpty();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__DEPRECATED:    return isDeprecated();case SGenPackage.FEATURE_PARAMETER__COMMENT:  return getComment();case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:return getFeatureType();case SGenPackage.FEATURE_PARAMETER__OPTIONAL:return isOptional();case SGenPackage.FEATURE_PARAMETER__PARAMETER_TYPE:return getParameterType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public T caseTObjectPrototype(TObjectPrototype object){  return null;}  }
class C{  public String primGetNextToken() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 33:{        yybegin(ST_IMPORT_MEDIUM);        return CSS_STRING;      }case 55:    break;case 35:{    yybegin(ST_DECLARATION_VALUE);    return CSS_DECLARATION_VALUE_DIMENSION;  }case 56:break;case 40:yypushback(1);{return CSS_DECLARATION_VALUE_S;}case 57:break;case 37:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_FUNCTION;}case 58:break;case 21:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ATTRIBUTE_END;}case 59:break;case 2:{return UNDEFINED;}case 60:break;case 10:{yybegin(ST_IMPORT_DELIMITER);return CSS_MEDIUM;}case 61:break;case 38:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_STRING;}case 62:break;case 30:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_CLASS;}case 63:break;case 13:{yybegin(YYINITIAL);return CSS_LBRACE;}case 64:break;case 5:{yybegin(YYINITIAL);return CSS_RBRACE;}case 65:break;case 12:{yybegin(ST_MEDIA_DELIMITER);return CSS_MEDIUM;}case 66:break;case 11:{yybegin(ST_IMPORT_MEDIUM);return CSS_MEDIA_SEPARATOR;}case 67:break;case 25:{yybegin(ST_DECLARATION_PRE_VALUE);return CSS_DECLARATION_SEPARATOR;}case 68:break;case 53:{yybegin(ST_FONT_FACE_DELIMITER);return CSS_FONT_FACE;}case 69:break;case 52:{yybegin(ST_CHARSET_NAME);return CSS_CHARSET;}case 70:break;case 48:{yybegin(ST_IMPORT_MEDIUM);return CSS_URI;}case 71:break;case 20:{yybegin(ST_SELECTOR_ATTRIBUTE_VALUE);return CSS_SELECTOR_ATTRIBUTE_OPERATOR;}case 72:break;case 41:{return CSS_CDC;}case 73:break;case 16:{yybegin(ST_DECLARATION);return CSS_LBRACE;}case 74:break;case 6:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_UNIVERSAL;}case 75:break;case 8:{yybegin(ST_SELECTOR_ATTRIBUTE_NAME);return CSS_SELECTOR_ATTRIBUTE_START;}case 76:break;case 44:{return CSS_CDO;}case 77:break;case 9:{yybegin(YYINITIAL);return CSS_DELIMITER;}case 78:break;case 19:{yybegin(ST_SELECTOR_ATTRIBUTE_OPERATOR);return CSS_SELECTOR_ATTRIBUTE_NAME;}case 79:break;case 39:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_HASH;}case 80:break;case 47:{yybegin(ST_PAGE_PSEUDO_PAGE);return CSS_PAGE;}case 81:break;case 3:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ELEMENT_NAME;}case 82:break;case 32:{yybegin(ST_CHARSET_DELIMITER);return CSS_STRING;}case 83:break;case 26:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_NUMBER;}case 84:break;case 17:{yybegin(ST_SELECTOR);return CSS_SELECTOR_COMBINATOR;}case 85:break;case 34:yypushback(1);{yybegin(ST_SELECTOR);return CSS_SELECTOR_COMBINATOR;}case 86:break;case 43:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_UNICODE_RANGE;}case 87:break;case 46:{return CSS_ATKEYWORD;}case 88:break;case 36:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_PERCENTAGE;}case 89:break;case 14:{yybegin(ST_MEDIA_MEDIUM);return CSS_MEDIA_SEPARATOR;}case 90:break;case 27:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_IDENT;}case 91:break;case 15:{yybegin(ST_PAGE_DELIMITER);return CSS_PAGE_SELECTOR;}case 92:break;case 29:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_OPERATOR;}case 93:break;case 45:{return CSS_COMMENT;}case 94:break;case 54:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_IMPORTANT;}case 95:break;case 22:{yybegin(ST_SELECTOR_ATTRIBUTE_END);return CSS_SELECTOR_ATTRIBUTE_VALUE;}case 96:break;case 18:{yybegin(ST_SELECTOR);return CSS_SELECTOR_SEPARATOR;}case 97:break;case 4:{return CSS_S;}case 98:break;case 42:{yybegin(ST_CSSRESOURCE_RULE_MEDIUM);return CSS_MEDIA;}case 99:break;case 31:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_ID;}case 100:break;case 51:{yybegin(ST_IMPORT_URI);return CSS_IMPORT;}case 101:break;case 28:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_PARENTHESIS_CLOSE;}case 102:break;case 50:{yybegin(ST_MEDIA_MEDIUM);return CSS_MEDIA;}case 103:break;case 24:{yybegin(ST_DECLARATION);return CSS_DECLARATION_DELIMITER;}case 104:break;case 23:{yybegin(ST_DECLARATION_SEPARATOR);return CSS_DECLARATION_PROPERTY;}case 105:break;case 7:{yybegin(ST_SELECTOR_MODIFIER);return CSS_SELECTOR_PSEUDO;}case 106:break;case 1:{return CSS_MEDIUM;}case 107:break;case 49:{yybegin(ST_DECLARATION_VALUE);return CSS_DECLARATION_VALUE_URI;}case 108:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public WildFly9xRuntimeConfiguration(){  super();}  }
class C{  public boolean equals(Object object){  boolean ret=false;  if (object instanceof MediaPrintableArea) {    MediaPrintableArea mm=(MediaPrintableArea)object;    if (x == mm.x && y == mm.y && w == mm.w && h == mm.h) {      ret=true;    }  }  return ret;}  }
class C{  public static byte toByte(byte a,byte b){  return (byte)((b << NIBBLE_SIZE) | a);}  }
class C{  public static void openVideo(Context mContext,String videoPath){  Intent intent=new Intent("android.intent.action.VIEW");  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra("oneshot",0);  intent.putExtra("configchange",0);  Uri uri=Uri.fromFile(new File(videoPath));  intent.setDataAndType(uri,"video/*");  mContext.startActivity(intent);}  }
class C{  public synchronized void send(File file){  if (!isHostFileSenderSupported()) {    return;  }  if (isDiscardMode()) {    file.delete();    return;  }  waitForQueue();  Bundle bundle=new Bundle();  bundle.putString("HostFileSender_filename",file.getAbsolutePath());  mInstrumentation.sendStatus(Activity.RESULT_OK,bundle);  mQueue.add(file);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes){  this(reader,separator,quotechar,escape,line,strictQuotes,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  private char scanWhitespace(){  for (; ; ) {    char ch=this.readChar();switch (ch) {case ' ':case '\t':case '\n':case '\r':      break;default :    return ch;}}}  }
class C{  void recomputeCounterFirstFreePath(){  resetCounter();  File unused=null;  do {    String h_path=getHierarchicalPath(counter++,maxOccurence);    unused=new File(new File(getRoot(),h_path),DHUS_ENTRY_NAME);  } while (isUsed(unused));  counter--;  logger.info("Computed incoming counter to " + counter);}  }
class C{  @TargetApi(Build.VERSION_CODES.FROYO) public final void maximize(){  if (!isMaximized()) {    if (!isShowing()) {      maximize=true;      show();    } else {      rootView.maximize(new AccelerateDecelerateInterpolator());    }  }}  }
class C{  private void closeFileSilently(){  try {    file.close();  } catch (  IOException e) {  }}  }
class C{  @Override public Iterator<Entry<String,Object>> iterator(){  return _fields.entrySet().iterator();}  }
class C{  private void checkClusters(Relation<V> relation,TCustomHashMap<long[],List<ArrayModifiableDBIDs>> clustersMap){  final int dimensionality=RelationUtil.dimensionality(relation);  List<Pair<long[],ArrayModifiableDBIDs>> notAssigned=new ArrayList<>();  TCustomHashMap<long[],List<ArrayModifiableDBIDs>> newClustersMap=new TCustomHashMap<>(BitsUtil.TROVE_HASH_STRATEGY);  Pair<long[],ArrayModifiableDBIDs> noise=new Pair<>(BitsUtil.zero(dimensionality),DBIDUtil.newArray());  for (  long[] pv : clustersMap.keySet()) {    if (BitsUtil.cardinality(pv) == 0) {      List<ArrayModifiableDBIDs> parallelClusters=clustersMap.get(pv);      for (      ArrayModifiableDBIDs c : parallelClusters) {        noise.second.addDBIDs(c);      }    } else {      List<ArrayModifiableDBIDs> parallelClusters=clustersMap.get(pv);      List<ArrayModifiableDBIDs> newParallelClusters=new ArrayList<>(parallelClusters.size());      for (      ArrayModifiableDBIDs c : parallelClusters) {        if (!BitsUtil.isZero(pv) && c.size() < mu) {          notAssigned.add(new Pair<>(pv,c));        } else {          newParallelClusters.add(c);        }      }      newClustersMap.put(pv,newParallelClusters);    }  }  clustersMap.clear();  clustersMap.putAll(newClustersMap);  for (  Pair<long[],ArrayModifiableDBIDs> c : notAssigned) {    if (c.second.isEmpty()) {      continue;    }    Pair<long[],ArrayModifiableDBIDs> parent=findParent(relation,c,clustersMap);    if (parent != null) {      parent.second.addDBIDs(c.second);    } else {      noise.second.addDBIDs(c.second);    }  }  List<ArrayModifiableDBIDs> noiseList=new ArrayList<>(1);  noiseList.add(noise.second);  clustersMap.put(noise.first,noiseList);}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  private byte[] bmpToByteArray(Bitmap bmp,boolean needRecycle){  ByteArrayOutputStream output=new ByteArrayOutputStream();  bmp.compress(Bitmap.CompressFormat.PNG,100,output);  if (needRecycle) {    bmp.recycle();  }  byte[] result=output.toByteArray();  try {    output.close();  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public CircleBuilder radius(double radius,String unit){  return radius(radius,DistanceUnit.fromString(unit));}  }
class C{  private void computeAccept(int cid,Epoch epoch,byte[] value){  Logger.println("(Acceptor.computeAccept) I have " + epoch.countAccept(value) + " ACCEPTs for "+ cid+ ","+ epoch.getTimestamp());  if (epoch.countAccept(value) > controller.getQuorum() && !epoch.getConsensus().isDecided()) {    Logger.println("(Acceptor.computeAccept) Deciding " + cid);    decide(epoch);  }}  }
class C{  public static FieldDataTermsQueryBuilder fieldDataTermsQuery(String name,long[] values,int cacheKey) throws IOException {  return new FieldDataTermsQueryBuilder(name,values,cacheKey);}  }
class C{  private void relayoutMeasuredItem(View child){  final int w=child.getMeasuredWidth();  final int h=child.getMeasuredHeight();  final int childTop=mListPadding.top;  final int childBottom=childTop + h;  final int childLeft=child.getLeft();  final int childRight=childLeft + w;  child.layout(childLeft,childTop,childRight,childBottom);}  }
class C{  private String nestedTagsRegex(int depth){  if (depth == 0) {    return "";  } else {    return "(?:<[a-z/!$](?:[^<>]|" + nestedTagsRegex(depth - 1) + ")*>)";  }}  }
class C{  @SuppressWarnings("deprecation") protected void parseKeyBits() throws InvalidKeyException {  AlgorithmParameters algParams=this.algid.getParameters();  if (algParams == null) {    throw new InvalidKeyException("EC domain parameters must be " + "encoded in the algorithm identifier");  }  try {    params=algParams.getParameterSpec(ECParameterSpec.class);    w=ECUtil.decodePoint(key,params.getCurve());  } catch (  IOException e) {    throw new InvalidKeyException("Invalid EC key",e);  }catch (  InvalidParameterSpecException e) {    throw new InvalidKeyException("Invalid EC key",e);  }}  }
class C{  public static JsonValue value(long value){  return new JsonNumber(Long.toString(value,10));}  }
class C{  public void fatal(Object message,Throwable t){}  }
class C{  @SuppressWarnings("rawtypes") @Override protected Iterator expand(final Object obj){  final Bucket b=(Bucket)obj;  return b.iterator();}  }
class C{  public void mouseReleased(MouseEvent e){  super.mouseReleased(e);  dragOnLens=false;  dragOnEdge=false;  edgeOffset=0;}  }
class C{  public boolean contains(int i){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  return qp[i + d] != -1;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public static void init(final boolean newEmbedWidthData){  DecoderOptions.embedWidthData=newEmbedWidthData;}  }
class C{  public static List<BlockNode> collectBlocksDominatedBy(BlockNode dominator,BlockNode start){  List<BlockNode> result=new ArrayList<BlockNode>();  collectWhileDominates(dominator,start,result);  return result;}  }
class C{  public static UndertowFraction createDefaultFraction(String path,String password,String alias){  return createDefaultFraction().enableHTTPS(path,password,alias);}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer("IF ");  for (int i=0; i < literals.length - 1; i++) {    result.append(literals[i].toString() + " AND ");  }  result.append(literals[literals.length - 1].toString());  result.append(" THEN (" + getLabel().getName() + "="+ getLabel().getMapping().mapIndex(this.getPrediction())+ ")");  return result.toString();}  }
class C{  protected void flipArrayOnX(int[] intArray,int mult){  int index=0;  int xindex=mult * (width - 1);  for (int x=0; x < width / 2; x++) {    for (int y=0; y < height; y++) {      int i=index + mult * y * width;      int j=xindex + mult * y * width;      for (int c=0; c < mult; c++) {        int temp=intArray[i];        intArray[i]=intArray[j];        intArray[j]=temp;        i++;        j++;      }    }    index+=mult;    xindex-=mult;  }}  }
class C{  public static final Ellipse scale(Ellipse ellipse,double scale){  if (ellipse == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Ellipse(ellipse.getWidth() * scale,ellipse.getHeight() * scale);}  }
class C{  private Integer generateHashcode(AnnotatedTypeMirror type){  if (type == null) {    return null;  }  return type.getAnnotations().toString().hashCode() * 17 + type.getUnderlyingType().toString().hashCode() * 13;}  }
class C{  public boolean isUseSuspenseError(){  Object oo=get_Value(COLUMNNAME_UseSuspenseError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares - (sum * sum) / n) / n;            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            outputFile.setValue(row,col,stdDev);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean validate(Supplier<?> supplier){  for (  Validate annotation : supplier.getClass().getAnnotationsByType(Validate.class)) {    try {      annotation.value().validate(supplier);    } catch (    ValidationException e) {      System.out.println(annotation.description());      e.printStackTrace();      return false;    }  }  return true;}  }
class C{  boolean isUnnamedInMemory(){  return unnamed;}  }
class C{  private void appendCoordinate(CoordinateSequence seq,int i,Writer writer) throws IOException {  writer.write(writeNumber(seq.getX(i)) + "," + writeNumber(seq.getY(i)));}  }
class C{  boolean isSmallCapsFontAvailable(){  for (Enumeration e=fonts.elements(); e.hasMoreElements(); ) {    HTMLFont hFont=(HTMLFont)e.nextElement();    if ((hFont.getFamily() != null) && (hFont.getFamily().equals(CSSElement.SMALL_CAPS_STRING))) {      return true;    }  }  return false;}  }
class C{  public static boolean clearDir(File dir){  if (!dir.isDirectory())   return false;  File[] files=dir.listFiles();  if (files == null || files.length == 0)   return true;  boolean cleared=true;  for (  File sub : files) {    cleared&=delete(sub);  }  return cleared;}  }
class C{  public static double angleBetween(Coordinate tip1,Coordinate tail,Coordinate tip2){  double a1=angle(tail,tip1);  double a2=angle(tail,tip2);  return diff(a1,a2);}  }
class C{  public boolean addError(int error){  boolean rval=(0 <= error && error < SslError.SSL_MAX_ERROR);  if (rval) {    mErrors|=(0x1 << error);  }  return rval;}  }
class C{  public static final String timeStampGMT(Date date){  return timeStamp(date,GMT);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.561 -0400",hash_original_method="577EA5DA8974E61A386C8E147A3CEF63",hash_generated_method="95DAE55CDE1E508ACD62AF5CD93D719E") public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize << 1);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  private void addParameterPricingData(ParameterValueType valueType,String value,String optionId,long baseUserPrice,double userFactor,long basePeriodPrice,double periodFactor,String parameterId){  addParameterPricingData(valueType,value,optionId,BigDecimal.valueOf(baseUserPrice),userFactor,BigDecimal.valueOf(basePeriodPrice),periodFactor,parameterId);}  }
class C{  private final void countAll() throws IOException {  MultiDocValues.OrdinalMap ordinalMap;  if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {    ordinalMap=((MultiSortedSetDocValues)dv).mapping;  } else {    ordinalMap=null;  }  IndexReader origReader=state.getOrigReader();  for (  LeafReaderContext context : origReader.leaves()) {    LeafReader reader=context.reader();    SortedSetDocValues segValues=reader.getSortedSetDocValues(field);    if (segValues == null) {      continue;    }    Bits liveDocs=reader.getLiveDocs();    if (ordinalMap != null) {      final LongValues ordMap=ordinalMap.getGlobalOrds(context.ord);      int numSegOrds=(int)segValues.getValueCount();      final int[] segCounts=new int[numSegOrds];      int docID;      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {        if (liveDocs == null || liveDocs.get(docID)) {          int term=(int)segValues.nextOrd();          while (term != SortedSetDocValues.NO_MORE_ORDS) {            segCounts[term]++;            term=(int)segValues.nextOrd();          }        }      }      for (int ord=0; ord < numSegOrds; ord++) {        int count=segCounts[ord];        if (count != 0) {          counts[(int)ordMap.get(ord)]+=count;        }      }    } else {      int docID;      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {        if (liveDocs == null || liveDocs.get(docID)) {          int term=(int)segValues.nextOrd();          while (term != SortedSetDocValues.NO_MORE_ORDS) {            counts[term]++;            term=(int)segValues.nextOrd();          }        }      }    }  }}  }
class C{  public long readULongLE(int index){  return 0xffffffffL & (this.readUByte(index) | this.readUByte(index + 1) << 8 | this.readUByte(index + 2) << 16 | this.readUByte(index + 3) << 24);}  }
class C{  @Override public void updateCost(double changeAmount,boolean affectsBaseCost){  if (affectsBaseCost) {    updateBaseCost(changeAmount);  } else {    updateAddonCost(changeAmount);  }}  }
class C{  public IndicesAliasesRequest addAlias(String alias,QueryBuilder filterBuilder,String... indices){  addAliasAction(new AliasActions(AliasAction.Type.ADD,indices,alias).filter(filterBuilder));  return this;}  }
class C{  public boolean isNoEmit(){  return noEmit;}  }
class C{  private boolean hasAdvancedGraphics(MaskableNode node){  if (node.getMask() != null && (node.getMaskType() == MaskType.ALPHA || node.getMaskType() == MaskType.LUMINOSITY)) {    return true;  } else   if (node instanceof GraphicContentNode) {    GraphicContentNode graphicNode=(GraphicContentNode)node;    if (graphicNode.blendMode.needsPixelBenderSupport())     return true;  }  return false;}  }
class C{  public static Statement singleResult(GraphQueryResult result) throws QueryEvaluationException {  Statement singleResult=null;  if (result.hasNext()) {    singleResult=result.next();  }  result.close();  return singleResult;}  }
class C{  public static void v(String message){  if (BuildConfig.DEBUG)   Log.v(TAG,buildLogMsg(message));}  }
class C{  private Collection regionEntryCollection(Object regionEntries){  if (regionEntries == null) {    return null;  }  if (regionEntries instanceof RegionEntry) {    return Collections.singleton(regionEntries);  }  return (Collection)regionEntries;}  }
class C{  private double r(int i,int j){  if (cov != null) {    return cov.getValue(i,j);  } else {    double[] arr1=data[i];    double[] arr2=data[j];    return r(arr1,arr2,arr1.length);  }}  }
class C{  private static String formatElementName(String nodeName){  char[] val=nodeName.toCharArray();  int position=0;  StringBuffer newNodeName=new StringBuffer(nodeName);  for (int i=0; i < val.length; i++) {    if (Character.isUpperCase(val[i])) {      String replace=null;      if (i == 0) {        replace="" + Character.toLowerCase(val[i]);        newNodeName.replace(position,position + 1,replace);      } else {        replace="_" + Character.toLowerCase(val[i]);        newNodeName.replace(position,position + 1,replace);        position++;      }    }    position++;  }  return newNodeName.toString();}  }
class C{  private String generateFilename(final String mcc,final long timestamp){  return "V2_" + mcc + "_log"+ String.valueOf(timestamp)+ "-cellular.xml";}  }
class C{  private Response delete(int projectId){  ResponseBuilder responseBuilder=Response.noContent();  ProjectDao dao=new ProjectDao();  try {    Project project=dao.findById(projectId);    if (project == null) {      LOG.warn("Proect with id " + projectId + "does not exist.");      responseBuilder.status(Status.BAD_REQUEST);      responseBuilder.entity("Project with id " + projectId + " does not exist.");    } else {      dao.delete(project);    }  } catch (  RuntimeException e) {    LOG.error("Error deleting project: " + e,e);    responseBuilder.status(Status.INTERNAL_SERVER_ERROR);    responseBuilder.entity("An error occurred while deleting the project.");  }  return responseBuilder.build();}  }
class C{  public void testScaleByPowerOfTen1(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.scaleByPowerOfTen(10);  String res="1231212478987482988429808779810457634781384756794.987";  int resScale=3;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public void initialScore(String url,WebPage row) throws ScoringFilterException {  for (  ScoringFilter filter : filters) {    filter.initialScore(url,row);  }}  }
class C{  public AudioException(String s){  super(s);}  }
class C{  public void convertAutoIncrementToSequence(Session session,Schema schema,int id,boolean temporary){  if (!autoIncrement) {    DbException.throwInternalError();  }  if ("IDENTITY".equals(originalSQL)) {    originalSQL="BIGINT";  } else   if ("SERIAL".equals(originalSQL)) {    originalSQL="INT";  }  String sequenceName;  while (true) {    ValueUuid uuid=ValueUuid.getNewRandom();    String s=uuid.getString();    s=s.replace('-','_').toUpperCase();    sequenceName="SYSTEM_SEQUENCE_" + s;    if (schema.findSequence(sequenceName) == null) {      break;    }  }  Sequence seq=new Sequence(schema,id,sequenceName,start,increment);  if (temporary) {    seq.setTemporary(true);  } else {    session.getDatabase().addSchemaObject(seq);  }  setAutoIncrement(false,0,0);  SequenceValue seqValue=new SequenceValue(seq);  setDefaultExpression(session,seqValue);  setSequence(seq);}  }
class C{  @Override public void environmentBind(EnvironmentClassLoader loader) throws ConfigException {}  }
class C{  @Override public ProcessorResult handleWrite(Object action) throws ODataException {  Operation operation;  if (action instanceof Operation) {    operation=(Operation)action;    Object data=operation.doOperation(getODataRequestContext(),getDataSourceFactory());    if (data == null) {      return new ProcessorResult(ODataResponse.Status.NO_CONTENT);    } else {      return new ProcessorResult(ODataResponse.Status.CREATED,QueryResult.from(data));    }  } else {    throw new ODataBadRequestException("Incorrect operation instance");  }}  }
class C{  private Operand _loadLocalForOSR(Operand op){  if (op instanceof ReturnAddressOperand) {    return op;  }  RegisterOperand t=gc.getTemps().makeTemp(op.getType());  byte tcode=op.getType().getName().parseForTypeCode();  Operator operator=null;switch (tcode) {case ClassTypeCode:case ArrayTypeCode:    operator=REF_MOVE;  break;case BooleanTypeCode:case ByteTypeCode:case ShortTypeCode:case CharTypeCode:case IntTypeCode:operator=INT_MOVE;break;case LongTypeCode:operator=LONG_MOVE;break;case FloatTypeCode:operator=FLOAT_MOVE;break;case DoubleTypeCode:operator=DOUBLE_MOVE;break;case VoidTypeCode:return null;}appendInstruction(Move.create(operator,t,op.copy()));return t.copyD2U();}  }
class C{  private void readObject(){}  }
class C{  public StaticMap size(int width,int height){  this.width=width;  this.height=height;  return this;}  }
class C{  protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){  int text1_length=text1.length();  int text2_length=text2.length();  int max_d=(text1_length + text2_length + 1) / 2;  int v_offset=max_d;  int v_length=2 * max_d;  int[] v1=new int[v_length];  int[] v2=new int[v_length];  for (int x=0; x < v_length; x++) {    v1[x]=-1;    v2[x]=-1;  }  v1[v_offset + 1]=0;  v2[v_offset + 1]=0;  int delta=text1_length - text2_length;  boolean front=(delta % 2 != 0);  int k1start=0;  int k1end=0;  int k2start=0;  int k2end=0;  for (int d=0; d < max_d; d++) {    if (System.currentTimeMillis() > deadline) {      break;    }    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {      int k1_offset=v_offset + k1;      int x1;      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {        x1=v1[k1_offset + 1];      } else {        x1=v1[k1_offset - 1] + 1;      }      int y1=x1 - k1;      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {        x1++;        y1++;      }      v1[k1_offset]=x1;      if (x1 > text1_length) {        k1end+=2;      } else       if (y1 > text2_length) {        k1start+=2;      } else       if (front) {        int k2_offset=v_offset + delta - k1;        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {          int x2=text1_length - v2[k2_offset];          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {      int k2_offset=v_offset + k2;      int x2;      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {        x2=v2[k2_offset + 1];      } else {        x2=v2[k2_offset - 1] + 1;      }      int y2=x2 - k2;      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {        x2++;        y2++;      }      v2[k2_offset]=x2;      if (x2 > text1_length) {        k2end+=2;      } else       if (y2 > text2_length) {        k2start+=2;      } else       if (!front) {        int k1_offset=v_offset + delta - k2;        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {          int x1=v1[k1_offset];          int y1=v_offset + x1 - k1_offset;          x2=text1_length - x2;          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }  }  LinkedList<Diff> diffs=new LinkedList<Diff>();  diffs.add(new Diff(Operation.DELETE,text1));  diffs.add(new Diff(Operation.INSERT,text2));  return diffs;}  }
class C{  private void copyExtraStuffTemporarily(File containerHome){  File configStore=new File(containerHome,"config-store");  if (configStore.isDirectory()) {    Copy copyStore=(Copy)getAntUtils().createAntTask("copy");    FileSet fileSetStore=new FileSet();    fileSetStore.setDir(new File(containerHome,"config-store"));    copyStore.addFileset(fileSetStore);    copyStore.setTodir(new File(getHome(),"config-store"));    copyStore.execute();  }  Copy copyBin=(Copy)getAntUtils().createAntTask("copy");  FileSet fileSetBin=new FileSet();  fileSetBin.setDir(new File(containerHome,"bin"));  copyBin.addFileset(fileSetBin);  copyBin.setTodir(new File(getHome(),"bin"));  copyBin.execute();  Copy copyLib=(Copy)getAntUtils().createAntTask("copy");  FileSet fileSetLib=new FileSet();  fileSetLib.setDir(new File(containerHome,"lib"));  copyLib.addFileset(fileSetLib);  copyLib.setTodir(new File(getHome(),"lib"));  copyLib.execute();  Copy copyRepo=(Copy)getAntUtils().createAntTask("copy");  FileSet fileSetRepo=new FileSet();  fileSetRepo.setDir(new File(containerHome,"repository"));  copyRepo.addFileset(fileSetRepo);  copyRepo.setTodir(new File(getHome(),"repository"));  copyRepo.execute();  Copy copySchema=(Copy)getAntUtils().createAntTask("copy");  FileSet fileSetSchema=new FileSet();  fileSetSchema.setDir(new File(containerHome,"schema"));  copySchema.addFileset(fileSetSchema);  copySchema.setTodir(new File(getHome(),"schema"));  copySchema.execute();}  }
class C{  public ApplicationTest(String testName){  super(testName);}  }
class C{  public String generateDocumentation(String containerId) throws Exception {  StringBuilder output=new StringBuilder();  output.append("{note}This page has been automatically generated by Cargo's build. " + "Do not edit it directly as it'll be overwritten next time it's generated again." + "{note}");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  if (containerId.equals("geronimo1x")) {    output.append("{note}The Geronimo 1.x CARGO container REQUIRES Geronimo 1.1.1.{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  } else   if (containerId.equals("glassfish4x")) {    output.append("{info}The GlassFish 4.x container also works with ");    output.append("[Payara|http://www.payara.fish/].{info}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  } else   if (containerId.startsWith("jboss6") || containerId.startsWith("jboss7") || containerId.startsWith("wildfly10")) {    output.append("{note}With the opening of the JBoss EAP to the public and the split ");    output.append("between JBoss and WildFly, the below naming correspondance should be ");    output.append("used with JBoss EAP containers:");    output.append(LINE_SEPARATOR);    output.append("* What Cargo calls [JBoss 6.1.x] is what JBoss refers to as JBoss ");    output.append("Application Server version 6.1; i.e. the version released in August ");    output.append("2011");    output.append(LINE_SEPARATOR);    output.append("* What Cargo calls [JBoss 7.2.x] is what JBoss refers to as JBoss ");    output.append("Enterprise Application Platform (EAP) version 6.1; i.e. the build ");    output.append("from JBoss Application Server (AS) version 7.2 released in May 2013");    output.append(LINE_SEPARATOR);    output.append("* What Cargo calls [JBoss 7.3.x] is what JBoss refers to as JBoss ");    output.append("Enterprise Application Platform (EAP) version 6.2; i.e. the build ");    output.append("from JBoss Application Server (AS) version 7.3 released in October ");    output.append("2013");    output.append(LINE_SEPARATOR);    output.append("* What Cargo calls [JBoss 7.4.x] is what JBoss refers to as JBoss ");    output.append("Enterprise Application Platform (EAP) version 6.3; i.e. the build ");    output.append("from JBoss Application Server (AS) version 7.4 released in June ");    output.append("2014");    output.append(LINE_SEPARATOR);    output.append("* What Cargo calls [JBoss 7.5.x] is what JBoss refers to as JBoss ");    output.append("Enterprise Application Platform (EAP) version 6.4; i.e. the build ");    output.append("from JBoss Application Server (AS) version 7.5 released in October ");    output.append("2015");    output.append(LINE_SEPARATOR);    output.append("* The [WildFly 10.x] container can be used with the JBoss Enterprise ");    output.append("Application Platform (EAP) version 7; i.e. the version released in ");    output.append("May 2016");    output.append("{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  } else   if (containerId.startsWith("weblogic12")) {    if (containerId.equals("weblogic12x")) {      output.append("{info}The WebLogic 12.x container lacks from the many features ");      output.append("provided by the [WebLogic 12.1.x] and [WebLogic 12.2.x] ");      output.append("containers - We would hence recommend using one of these ");      output.append("instead of the WebLogic 12.x container.{info}");      output.append(LINE_SEPARATOR);      output.append(LINE_SEPARATOR);    }    output.append("{note}");    output.append("If you are using the WebLogic 12 Developer's Edition, after you have ");    output.append("downloaded the distribution, please remember to also configure ");    output.append("WebLogic.");    output.append(LINE_SEPARATOR);    output.append("You can read http://www.oracle.com/webfolder/technetwork/tutorials/");    output.append("obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html for ");    output.append("details.");    output.append("{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  } else   if (containerId.startsWith("websphere")) {    output.append("{note}");    output.append("The WebSphere container does +not+ support WebSphere Application ");    output.append("Server Community Edition, please prefer to use the \"full\" ");    output.append("WebSphere package or WebSphere Application Server for Developers.");    output.append("{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  }  output.append(generateContainerFeaturesText(containerId));  output.append(LINE_SEPARATOR);  output.append(generateConfigurationFeaturesText(containerId));  output.append(LINE_SEPARATOR);  output.append(generateDeployerFeaturesText(containerId));  output.append(LINE_SEPARATOR);  output.append(generateOtherFeaturesText(containerId));  output.append(LINE_SEPARATOR);  output.append(generateConfigurationPropertiesText(containerId));  output.append(LINE_SEPARATOR);  output.append(generateSamplesInfoText(containerId));  output.append(LINE_SEPARATOR);  return output.toString();}  }
class C{  public void addAlbumId(final Long albumId,final String albumName,final String artistName,final String songCount,final String albumYear){  if (albumId == null || albumName == null || artistName == null || songCount == null) {    return;  }  try {    final SQLiteDatabase database=getWritableDatabase();    final ContentValues values=new ContentValues(6);    database.beginTransaction();    values.put(RecentStoreColumns.ID,albumId);    values.put(RecentStoreColumns.ALBUMNAME,albumName);    values.put(RecentStoreColumns.ARTISTNAME,artistName);    values.put(RecentStoreColumns.ALBUMSONGCOUNT,songCount);    values.put(RecentStoreColumns.ALBUMYEAR,albumYear);    values.put(RecentStoreColumns.TIMEPLAYED,System.currentTimeMillis());    database.delete(RecentStoreColumns.NAME,RecentStoreColumns.ID + " = ?",new String[]{String.valueOf(albumId)});    database.insert(RecentStoreColumns.NAME,null,values);    database.setTransactionSuccessful();    database.endTransaction();  } catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public void addQuery(QueryParameter query){  getQueries().add(query);}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.984 -0500",hash_original_method="27FC8E987828EB63A48AA2B14048F41C",hash_generated_method="8F28EC71A380BCA40C14376432A1A42D") public synchronized void processResponse(SIPResponse transactionResponse,MessageChannel sourceChannel,SIPDialog dialog){  if (getState() == null)   return;  if ((TransactionState.COMPLETED == this.getState() || TransactionState.TERMINATED == this.getState()) && transactionResponse.getStatusCode() / 100 == 1) {    return;  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("processing " + transactionResponse.getFirstLine() + "current state = "+ getState());    sipStack.getStackLogger().logDebug("dialog = " + dialog);  }  this.lastResponse=transactionResponse;  try {    if (isInviteTransaction())     inviteClientTransaction(transactionResponse,sourceChannel,dialog); else     nonInviteClientTransaction(transactionResponse,sourceChannel,dialog);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    this.setState(TransactionState.TERMINATED);    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  private void renderBody(GL2 gl,SandboxBody body){  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  if (body.getFixtureCount() > 1) {    if (Preferences.isBodyStenciled()) {      body.stencil(gl);    } else {      body.render(gl);    }  } else {    body.render(gl);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  public int size(){  return nodes.size();}  }
class C{  public boolean containsBean(Object bean){  if (!(bean instanceof SimpleBeanObject))   throw new IllegalArgumentException("not instanceof SimpleBeanObject " + bean);  return (layer.getObject(((SimpleBeanObject)bean).getId()) != null);}  }
class C{  public void writeCountsComparisonList(final String filename,final String format){  if (format.compareToIgnoreCase("kml") == 0) {    CountSimComparisonKMLWriter kmlWriter=new CountSimComparisonKMLWriter(countsComparisonList,this.network,TransformationFactory.getCoordinateTransformation(this.coordinateSystem,TransformationFactory.WGS84));    kmlWriter.writeFile(filename);  } else   if (format.compareToIgnoreCase("txt") == 0) {    CountSimComparisonTableWriter writer=new CountSimComparisonTableWriter(countsComparisonList,Locale.US);    writer.writeFile(filename);  } else {    throw new IllegalArgumentException("Output format must be txt or kml");  }  ComparisonErrorStatsCalculator errorStats=new ComparisonErrorStatsCalculator(countsComparisonList);  double[] hours=new double[24];  for (int i=1; i < 25; i++) {    hours[i - 1]=i;  }  DoubleArrayTableWriter tableWriter=new DoubleArrayTableWriter();  tableWriter.addColumn(hours);  tableWriter.addColumn(errorStats.getMeanRelError());  tableWriter.writeFile(filename + "errortable.txt");}  }
class C{  protected void onPostExecute(String args){}  }
class C{  void compile(List<String> opts,List<File> files) throws Exception {  System.err.println("javac: " + opts + " "+ files);  List<String> args=new ArrayList<String>();  args.addAll(opts);  for (  File f : files)   args.add(f.getPath());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  int rc=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]),pw);  pw.flush();  if (sw.getBuffer().length() > 0)   System.err.println(sw.toString());  if (rc != 0)   throw new Exception("compilation failed: rc=" + rc);}  }
class C{  @Override public boolean processInput(Vertex input,Network network){  if (isStopped()) {    return false;  }  Language language=getBot().mind().getThought(Language.class);  Vertex speaker=input.getRelationship(Primitive.SPEAKER);  boolean learn=language.shouldLearn(input,speaker);  boolean correction=input.hasRelationship(Primitive.ASSOCIATED,Primitive.CORRECTION);  if (correction) {    if (!language.shouldCorrect(input,speaker)) {      return false;    }  } else   if (!learn) {    return false;  }  Vertex sentence=input.mostConscious(Primitive.INPUT);  if (sentence == null || (!sentence.instanceOf(Primitive.SENTENCE))) {    return false;  }  log("Processing sentence",Bot.FINE,sentence);  Vertex questionInput=input.mostConscious(Primitive.QUESTION);  if (questionInput == null) {    log("No question",Bot.FINE,sentence);    return false;  }  Vertex mimic=questionInput.getRelationship(Primitive.MIMIC);  if (mimic != null) {    questionInput=mimic;    questionInput=questionInput.copy();    questionInput.internalRemoveRelationships(Primitive.SPEAKER);    questionInput.internalRemoveRelationships(Primitive.TARGET);    questionInput.addRelationship(Primitive.SPEAKER,Primitive.SELF);    questionInput.addRelationship(Primitive.TARGET,speaker);  }  if (correction) {    input=input.copy();    input.internalRemoveRelationships(Primitive.SPEAKER);    input.internalRemoveRelationships(Primitive.TARGET);    input.addRelationship(Primitive.SPEAKER,Primitive.SELF);    input.addRelationship(Primitive.TARGET,speaker);  }  Vertex question=questionInput.mostConscious(Primitive.INPUT);  Relationship relationship=question.getRelationship(Primitive.RESPONSE,sentence);  if (relationship == null) {    log("No response",Bot.FINE,question);    return false;  }  if (relationship.getCorrectness() < 0.5) {    log("Insufficient correctness",Bot.FINE,relationship);    return false;  }  log("Processing question response",Bot.FINE,question,sentence);  List<Vertex> states=network.createVertex(Language.class).orderedRelations(Primitive.STATE);  if (states == null) {    return false;  }  Vertex stateMachine=states.get(states.size() - 1);  if (stateMachine == null) {    log("Missing state machine",Bot.FINE,states);    return false;  }  Vertex currentState=stateMachine;  Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();  List<Vertex> instructions=stateMachine.orderedRelations(Primitive.DO);  if (instructions != null) {    for (    Vertex instruction : instructions) {      if (instruction.instanceOf(Primitive.CASE)) {        Vertex variable=instruction.getRelationship(Primitive.CASE);        if ((variable != null) && (questionInput.matches(variable,variables) == Boolean.TRUE)) {          currentState=instruction.getRelationship(Primitive.GOTO);        }      }    }  }  if (currentState == stateMachine) {    log("State machine missing sentence case.",Bot.FINE,question);    return false;  }  List<Vertex> words=question.orderedRelations(Primitive.WORD);  if (words == null) {    log("Question missing words",Bot.FINE,question);    return false;  }  if (isStopped()) {    return false;  }  processState(currentState,words,0,"",PathType.Meaning,sentence,questionInput,input,variables,network);  processState(currentState,words,0,"",PathType.Classification,sentence,questionInput,input,variables,network);  processState(currentState,words,0,"",PathType.Verb,sentence,questionInput,input,variables,network);  if (isStopped()) {    return false;  }  Vertex sourceCode=stateMachine.getRelationship(Primitive.SOURCECODE);  if (sourceCode != null) {    sourceCode.setPinned(false);  }  stateMachine.internalRemoveRelationships(Primitive.SOURCECODE);  return true;}  }
class C{  protected boolean isNotColliding(double x,double y,double z,double step){  double stepX=(x - this.entity.posX) / step;  double stepY=(y - this.entity.posY) / step;  double stepZ=(z - this.entity.posZ) / step;  AxisAlignedBB aabb=this.entity.getEntityBoundingBox();  for (int i=1; (double)i < step; ++i) {    aabb=aabb.offset(stepX,stepY,stepZ);    if (this.isBlocked(aabb)) {      return false;    }  }  return true;}  }
class C{  public void addP11Lib(String p11Lib){  String newP11Libs=StringUtils.addToList(p11Lib,getP11Libs(),10);  setP11Libs(newP11Libs);}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testWritable(){  Metadata result=null;  Metadata meta=new Metadata();  result=writeRead(meta);  assertEquals(0,result.size());  meta.add("name-one","value-1.1");  result=writeRead(meta);  assertEquals(1,result.size());  assertEquals(1,result.getValues("name-one").length);  assertEquals("value-1.1",result.get("name-one"));  meta.add("name-two","value-2.1");  meta.add("name-two","value-2.2");  result=writeRead(meta);  assertEquals(2,result.size());  assertEquals(1,result.getValues("name-one").length);  assertEquals("value-1.1",result.getValues("name-one")[0]);  assertEquals(2,result.getValues("name-two").length);  assertEquals("value-2.1",result.getValues("name-two")[0]);  assertEquals("value-2.2",result.getValues("name-two")[1]);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public XYSeries(Comparable key,boolean autoSort){  this(key,autoSort,true);}  }
class C{  public UITouch(View view){  this(view,CGPoint.CGPointMake(0.0f,0.0f),1);}  }
class C{  public boolean hasNext(){  if (!this.open || this.header == null)   return false;  int contentLength=this.header.fileLength - HEADER_LENGTH;  return this.numBytesRead < contentLength;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.provider_add_bt:{      ContentValues values=new ContentValues();      values.put("content","Save you from anything");      this.resolver.insert(this.uri,values);      this.refresh();      break;    }case R.id.provider_del_bt:{    this.resolver.delete(this.uri,null,null);    this.refresh();    break;  }case R.id.provider_mod_bt:{  List<ProviderData> allData=this.queryAll();  int firstId=allData.get(0).id;  ContentValues values=new ContentValues();  values.put("content",UUID.randomUUID().toString());  String path=this.uri.toString();  this.resolver.update(Uri.parse(path.substring(0,path.lastIndexOf("/")) + "/message/" + firstId),values,null,null);  this.refresh();  break;}case R.id.provider_query_bt:{this.refresh();break;}}}  }
class C{  public SerialTurnout(String systemName,String userName,CMRISystemConnectionMemo memo){  super(systemName,userName);  tSystemName=systemName;  _memo=memo;  tBit=SerialAddress.getBitFromSystemName(systemName);}  }
class C{  public static void main(String[] args){  String pat=args[0];  String txt=args[1];  char[] pattern=pat.toCharArray();  char[] text=txt.toCharArray();  BoyerMoore boyermoore1=new BoyerMoore(pat);  BoyerMoore boyermoore2=new BoyerMoore(pattern,256);  int offset1=boyermoore1.search(txt);  int offset2=boyermoore2.search(text);  StdOut.println("text:    " + txt);  StdOut.print("pattern: ");  for (int i=0; i < offset1; i++)   StdOut.print(" ");  StdOut.println(pat);  StdOut.print("pattern: ");  for (int i=0; i < offset2; i++)   StdOut.print(" ");  StdOut.println(pat);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void readIndex(){  try {    readIndexMulti();  } catch (  Exception ex) {    throw new AssertionError(ex);  }  zoneInfos=new ZoneInfo[ids.length];}  }
class C{  public T caseAfterCode_(AfterCode_ object){  return null;}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (BuildConfig.DEBUG) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  public Comparable<E> smallest(){  ElementH el=_smallest();  return el.priority;}  }
class C{  public Builder withCornerRadius(float radius){  this.radius=radius;  return this;}  }
class C{  @Override public void clearSensitiveData(byte[] key){  SensitiveData.clear(key);}  }
class C{  public LocatorLauncher build(){  validate();  return new LocatorLauncher(this);}  }
class C{  private <T>void testKeyQuery(final String cacheName,final T key1,final T key2){  final IgniteCache<T,Person> cache=ignite(0).cache(cacheName);  final Person p1=new Person("p1");  final Person p2=new Person("p2");  cache.put(key1,p1);  cache.put(key2,p2);  final SqlQuery<T,Person> qry=new SqlQuery<>(Person.class,"where _key=?");  final SqlFieldsQuery fieldsQry=new SqlFieldsQuery("select * from Person where _key=?");  qry.setLocal(isLocal());  fieldsQry.setLocal(isLocal());  qry.setArgs(key1);  fieldsQry.setArgs(key1);  final List<Cache.Entry<T,Person>> res=cache.query(qry).getAll();  final List<List<?>> fieldsRes=cache.query(fieldsQry).getAll();  assertEquals(1,res.size());  assertEquals(1,fieldsRes.size());  assertEquals(p1,res.get(0).getValue());  assertEquals(key1,res.get(0).getKey());  assertTrue(fieldsRes.get(0).size() >= 2);  assertEquals(key1,fieldsRes.get(0).get(0));  assertEquals(p1,fieldsRes.get(0).get(1));}  }
class C{  TokenInfo(String text,String rawText,String type,int start,int end,int position,boolean match){  this.text=text;  this.rawText=rawText;  this.type=type;  this.start=start;  this.end=end;  this.position=position;  this.match=match;}  }
class C{  public Candle findByUniqueKey(Integer idTradingday,Integer idContract,ZonedDateTime startPeriod,ZonedDateTime endPeriod,Integer barSize){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Candle> query=builder.createQuery(Candle.class);    Root<Candle> from=query.from(Candle.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != idTradingday) {      Join<Candle,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.equal(tradingday.get("idTradingDay"),idTradingday);      predicates.add(predicate);    }    if (null != idContract) {      Join<Candle,Contract> contract=from.join("contract");      Predicate predicate=builder.equal(contract.get("idContract"),idContract);      predicates.add(predicate);    }    if (null != startPeriod) {      Predicate predicate=builder.equal(from.get("startPeriod"),startPeriod);      predicates.add(predicate);    }    if (null != endPeriod) {      Predicate predicate=builder.equal(from.get("endPeriod"),endPeriod);      predicates.add(predicate);    }    if (null != barSize) {      Predicate predicate=builder.equal(from.get("barSize"),barSize);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Candle> typedQuery=entityManager.createQuery(query);    List<Candle> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static final BodyFixture show(Window owner,Image icon,ConvexShapePanel shapePanel){  AddConvexFixtureDialog dialog=new AddConvexFixtureDialog(owner,icon,shapePanel);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    BodyFixture fixture=dialog.fixture;    Convex convex=dialog.pnlShape.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    BodyFixture newFixture=new BodyFixture(convex);    newFixture.setUserData(fixture.getUserData());    newFixture.setDensity(fixture.getDensity());    newFixture.setFilter(fixture.getFilter());    newFixture.setFriction(fixture.getFriction());    newFixture.setRestitution(fixture.getRestitution());    newFixture.setSensor(fixture.isSensor());synchronized (AddConvexFixtureDialog.class) {      N++;    }    return newFixture;  }  return null;}  }
class C{  public void initialize() throws CouldntSaveDataException {  try {    getNative().initialize();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public static void interpolateTransferFunctionTitrations(String gate_name,GateLibrary gate_library){  Gate g=gate_library.get_GATES_BY_NAME().get(gate_name);  HistogramBins hbins=g.get_histogram_bins();  String var="";  if (g.get_variable_thresholds().keySet().size() == 1) {    ArrayList<String> vars=new ArrayList<String>(g.get_variable_thresholds().keySet());    var=vars.get(0);  } else {    return;  }  HistogramXfer xfer_hist=g.get_xfer_hist();  ArrayList<double[]> xfer_interp=new ArrayList<double[]>();  ArrayList<double[]> xfer_normal=g.get_xfer_hist().get_xfer_binned();  for (int i=0; i < hbins.get_LOG_BIN_CENTERS().length; ++i) {    double x=hbins.get_LOG_BIN_CENTERS()[i];    double rpu_x=Math.pow(10,x);    HashMap<String,Double> variables=new HashMap<String,Double>();    variables.put(var,rpu_x);    double rpu_y=ResponseFunction.computeOutput(variables,g.get_params(),g.get_equation());    double hill_mean=Math.log10(rpu_y);    int hill_mean_bin=0;    for (int ii=0; ii < hbins.get_NBINS(); ++ii) {      hill_mean_bin=ii;      if (hbins.get_LOG_BIN_CENTERS()[ii] > hill_mean) {        break;      }    }    if (x < xfer_hist.get_xfer_titration().get(0)) {      double[] interp=new double[hbins.get_NBINS()];      for (int ii=0; ii < xfer_normal.get(0).length; ++ii) {        double z=xfer_normal.get(0)[ii];        interp[ii]=z;      }      int current_mean_bin=HistogramUtil.bin_median(interp);      int delta=-current_mean_bin + hill_mean_bin;      double[] hill_interp=new double[hbins.get_NBINS()];      for (int y=0; y < hbins.get_NBINS(); ++y) {        if (y - delta < 0 || y - delta >= hbins.get_NBINS())         hill_interp[y]=0.0; else {          hill_interp[y]=interp[y - delta];        }      }      double[] hill_normal=HistogramUtil.normalize(hill_interp);      xfer_interp.add(hill_normal);    } else     if (x > Math.log10(xfer_hist.get_xfer_titration().get(xfer_hist.get_xfer_titration().size() - 1))) {      double[] interp=new double[hbins.get_NBINS()];      for (int ii=0; ii < xfer_normal.get(xfer_normal.size() - 1).length; ++ii) {        double z=xfer_normal.get(xfer_normal.size() - 1)[ii];        interp[ii]=z;      }      int current_mean_bin=HistogramUtil.bin_median(interp);      int delta=-current_mean_bin + hill_mean_bin;      double[] hill_interp=new double[hbins.get_NBINS()];      for (int y=0; y < hbins.get_NBINS(); ++y) {        if (y - delta < 0 || y - delta >= hbins.get_NBINS())         hill_interp[y]=0.0; else {          hill_interp[y]=interp[y - delta];        }      }      double[] hill_normal=HistogramUtil.normalize(hill_interp);      xfer_interp.add(hill_normal);    } else {      int indx_low=0;      int indx_high=11;      for (int j=1; j < xfer_hist.get_xfer_titration().size(); ++j) {        if (Math.log10(xfer_hist.get_xfer_titration().get(j)) > x) {          indx_high=j;          break;        }      }      indx_low=indx_high - 1;      double x1=Math.log10(xfer_hist.get_xfer_titration().get(indx_low));      double x2=Math.log10(xfer_hist.get_xfer_titration().get(indx_high));      double weight=(x - x1) / (x2 - x1);      int median_bin_y1=HistogramUtil.bin_median(xfer_normal.get(indx_low));      int median_bin_y2=HistogramUtil.bin_median(xfer_normal.get(indx_high));      Double med_bin_interp=median_bin_y1 * (1 - weight) + median_bin_y2 * weight;      Integer median_bin_interp=med_bin_interp.intValue();      median_bin_interp=hill_mean_bin;      double[] interp=new double[hbins.get_NBINS()];      for (int y=0; y < hbins.get_LOG_BIN_CENTERS().length; ++y) {        int delta=median_bin_interp - y;        int y1=median_bin_y1 - delta;        int y2=median_bin_y2 - delta;        double z1=0.0;        double z2=0.0;        if (y1 >= 0 && y1 < hbins.get_NBINS()) {          z1=xfer_normal.get(indx_low)[y1];        }        if (y2 >= 0 && y2 < hbins.get_NBINS()) {          z2=xfer_normal.get(indx_high)[y2];        }        double z=z1 * (1 - weight) + z2 * weight;        interp[y]=z;      }      double[] hill_normal=HistogramUtil.normalize(interp);      xfer_interp.add(hill_normal);    }  }  String all="";  for (int i=0; i < hbins.get_NBINS(); ++i) {    String row="";    for (int j=0; j < xfer_interp.size(); ++j) {      row+=xfer_interp.get(j)[i] + " ";    }    all+=row + "\n";  }  xfer_hist.set_xfer_interp(xfer_interp);  g.set_xfer_hist(xfer_hist);}  }
class C{  public static boolean isWorkingSet(Object element){  return (element instanceof IWorkingSet);}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public ProjectionEvent(Object source,Projection aProj){  super(source);  projection=aProj;}  }
class C{  public ChunkerAnnotator(){  this(false);}  }
class C{  public void remove(String key){  properties.remove(key);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  protected void println(String msg){  if (getDebug()) {    if (getLog() != null)     getLog().log(Level.INFO,m_ID + ": " + msg); else     System.out.println(m_ID + ": " + msg);  }}  }
class C{  public Exception(){}  }
class C{  public static POSupportedLanguage toPOLanguage(SupportedLanguage language,Locale currentUserLocale){  if (language == null || language.getLanguageISOCode() == null) {    return null;  }  POSupportedLanguage poLanguage=new POSupportedLanguage();  fillPOLanguage(poLanguage,language,currentUserLocale);  return poLanguage;}  }
class C{  public String elementId(){  return id;}  }
class C{  public KMLExtendedData(String namespaceURI){  super(namespaceURI);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public static boolean lock(File filename){  boolean fileLockSucceeded=false;  File lockFile=new File(filename + ".filelock");  try {    while (!fileLockSucceeded) {      if (!lockFile.exists()) {        final String PID=getPid();        BufferedWriter out=new BufferedWriter(new FileWriter(lockFile));        out.write(PID);        out.close();        fileLockSucceeded=true;      } else {        try {          Thread.sleep(500);        } catch (        InterruptedException e) {          e.printStackTrace();        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return fileLockSucceeded;}  }
class C{  public boolean add(E e){  if (contains(e))   return false;  if (size + 1 > capacity * loadFactorThreshold) {    if (capacity >= MAXIMUM_CAPACITY)     throw new RuntimeException("Exceeding maximum capacity");    rehash();  }  int bucketIndex=hash(e.hashCode());  if (table[bucketIndex] == null) {    table[bucketIndex]=new LinkedList<E>();  }  table[bucketIndex].add(e);  size++;  return true;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 178) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public Box(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  public void afterLoad(Collection<? extends Entity> entities){  if (!isAuthorizationRequired()) {    return;  }  Preconditions.checkNotNullArgument(entities,"entities list is null");  for (  Entity entity : entities) {    afterLoad(entity);  }}  }
class C{  protected void addRepeatingExtension(Extension ext,Class<? extends Extension> extClass){  List<Extension> extList=repeatingExtensionMap.get(extClass);  if (extList == null) {    extList=new ArrayList<Extension>();  }  extList.add(ext);  repeatingExtensionMap.put(extClass,extList);}  }
class C{  protected void handleDisconnect(Connector start,Connector end){}  }
class C{  private void determineDictionary(){  int classInd=getInputFormat().classIndex();  int values=1;  if (!m_doNotOperateOnPerClassBasis && (classInd != -1)) {    values=getInputFormat().attribute(classInd).numValues();  }  @SuppressWarnings("unchecked") TreeMap<String,Count>[] dictionaryArr=new TreeMap[values];  for (int i=0; i < values; i++) {    dictionaryArr[i]=new TreeMap<String,Count>();  }  determineSelectedRange();  long pruneRate=Math.round((m_PeriodicPruningRate / 100.0) * getInputFormat().numInstances());  for (int i=0; i < getInputFormat().numInstances(); i++) {    Instance instance=getInputFormat().instance(i);    int vInd=0;    if (!m_doNotOperateOnPerClassBasis && (classInd != -1)) {      vInd=(int)instance.classValue();    }    Hashtable<String,Integer> h=new Hashtable<String,Integer>();    for (int j=0; j < instance.numAttributes(); j++) {      if (m_SelectedRange.isInRange(j) && (instance.isMissing(j) == false)) {        m_Tokenizer.tokenize(instance.stringValue(j));        while (m_Tokenizer.hasMoreElements()) {          String word=m_Tokenizer.nextElement().intern();          if (this.m_lowerCaseTokens == true) {            word=word.toLowerCase();          }          word=m_Stemmer.stem(word);          if (m_StopwordsHandler.isStopword(word)) {            continue;          }          if (!(h.containsKey(word))) {            h.put(word,new Integer(0));          }          Count count=dictionaryArr[vInd].get(word);          if (count == null) {            dictionaryArr[vInd].put(word,new Count(1));          } else {            count.count++;          }        }      }    }    Enumeration<String> e=h.keys();    while (e.hasMoreElements()) {      String word=e.nextElement();      Count c=dictionaryArr[vInd].get(word);      if (c != null) {        c.docCount++;      } else {        System.err.println("Warning: A word should definitely be in the " + "dictionary.Please check the code");      }    }    if (pruneRate > 0) {      if (i % pruneRate == 0 && i > 0) {        for (int z=0; z < values; z++) {          ArrayList<String> d=new ArrayList<String>(1000);          Iterator<String> it=dictionaryArr[z].keySet().iterator();          while (it.hasNext()) {            String word=it.next();            Count count=dictionaryArr[z].get(word);            if (count.count <= 1) {              d.add(word);            }          }          Iterator<String> iter=d.iterator();          while (iter.hasNext()) {            String word=iter.next();            dictionaryArr[z].remove(word);          }        }      }    }  }  int totalsize=0;  int prune[]=new int[values];  for (int z=0; z < values; z++) {    totalsize+=dictionaryArr[z].size();    int array[]=new int[dictionaryArr[z].size()];    int pos=0;    Iterator<String> it=dictionaryArr[z].keySet().iterator();    while (it.hasNext()) {      String word=it.next();      Count count=dictionaryArr[z].get(word);      array[pos]=count.count;      pos++;    }    sortArray(array);    if (array.length < m_WordsToKeep) {      prune[z]=m_minTermFreq;    } else {      prune[z]=Math.max(m_minTermFreq,array[array.length - m_WordsToKeep]);    }  }  ArrayList<Attribute> attributes=new ArrayList<Attribute>(totalsize + getInputFormat().numAttributes());  int classIndex=-1;  for (int i=0; i < getInputFormat().numAttributes(); i++) {    if (!m_SelectedRange.isInRange(i)) {      if (getInputFormat().classIndex() == i) {        classIndex=attributes.size();      }      attributes.add((Attribute)getInputFormat().attribute(i).copy());    }  }  TreeMap<String,Integer> newDictionary=new TreeMap<String,Integer>();  int index=attributes.size();  for (int z=0; z < values; z++) {    Iterator<String> it=dictionaryArr[z].keySet().iterator();    while (it.hasNext()) {      String word=it.next();      Count count=dictionaryArr[z].get(word);      if (count.count >= prune[z]) {        if (newDictionary.get(word) == null) {          newDictionary.put(word,new Integer(index++));          attributes.add(new Attribute(m_Prefix + word));        }      }    }  }  m_DocsCounts=new int[attributes.size()];  Iterator<String> it=newDictionary.keySet().iterator();  while (it.hasNext()) {    String word=it.next();    int idx=newDictionary.get(word).intValue();    int docsCount=0;    for (int j=0; j < values; j++) {      Count c=dictionaryArr[j].get(word);      if (c != null) {        docsCount+=c.docCount;      }    }    m_DocsCounts[idx]=docsCount;  }  attributes.trimToSize();  m_Dictionary=newDictionary;  m_NumInstances=getInputFormat().numInstances();  Instances outputFormat=new Instances(getInputFormat().relationName(),attributes,0);  outputFormat.setClassIndex(classIndex);  setOutputFormat(outputFormat);}  }
class C{  public boolean isIgnoringComments(){  return _isIgnoringComments;}  }
class C{  public static boolean isProtected(int mod){  return (mod & PROTECTED) != 0;}  }
class C{  public int hashCode(){  return 0;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.528 -0500",hash_original_method="1749070D39A948E7280B7E9ED33867CE",hash_generated_method="AF5F3B912050135F4B8E788773021C22") @Override public void close() throws IOException {  while (in != null) {    nextStream();  }  e=null;}  }
class C{  public void put(PlotItem it,VisualizationTask task,Element elem,Visualization vis){  map.put(key(it,task),value(elem,vis));}  }
class C{  protected void crash(Connection conn){  try {    conn.createStatement().execute("SET WRITE_DELAY 0");    conn.createStatement().execute("CREATE TABLE TEST_A(ID INT)");    fail("should be crashed already");  } catch (  SQLException e) {  }  try {    conn.close();  } catch (  SQLException e) {  }}  }
class C{  protected float idf(long docFreq,long docCount){  return (float)Math.log(1 + (docCount - docFreq + 0.5D) / (docFreq + 0.5D));}  }
class C{  private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){  result.add(new GraphEdge(head,tail,original.getRelation()));}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) / m_right.num(xctxt));}  }
class C{  public Object copy(){  Attribute copy=new Attribute(m_Name);  copy.m_Index=m_Index;  if (!isNominal() && !isString())   return copy;  copy.m_Type=m_Type;  copy.m_Values=m_Values;  copy.m_Hashtable=m_Hashtable;  return copy;}  }
class C{  private void updateHosts(){  if (this.updateOrder == null) {    for (int i=0, n=hosts.size(); i < n; i++) {      if (this.isCancelled) {        break;      }      hosts.get(i).update(simulateConnections);    }  } else {    assert this.updateOrder.size() == this.hosts.size() : "Nrof hosts has changed unexpectedly";    Random rng=new Random(SimClock.getIntTime());    Collections.shuffle(this.updateOrder,rng);    for (int i=0, n=hosts.size(); i < n; i++) {      if (this.isCancelled) {        break;      }      this.updateOrder.get(i).update(simulateConnections);    }  }  if (simulateConOnce && simulateConnections) {    simulateConnections=false;  }}  }
class C{  public boolean isFieldsDisabled(){  if (model == null || model.getSelectedMarketplace() == null || model.getSelectedMarketplace().length() == 0) {    return true;  } else {    return false;  }}  }
class C{  private JPanel initComponents(){  JPanel content=new JPanel(new BorderLayout(0,5));  content.add(createBannerPanel(),BorderLayout.NORTH);  content.add(createLicensePanel(),BorderLayout.CENTER);  content.add(createButtonPanel(),BorderLayout.SOUTH);  return content;}  }
class C{  private Node<E> newNode(){  Node<E> ret;  Node<E> newFree;  do {    ret=freeNode;    if (ret == null)     return new Node<E>();    newFree=ret.next;  } while (!casNewNode(ret,newFree));  return ret;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static boolean isAccessContainer(Properties ctx,int CM_Container_ID,int AD_User_ID){  return true;}  }
class C{  public QueueException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void printEntry(Writer w){  try {    String indent="                      ";    int indentWidth=indent.length();    HardcopyWriter ww=(HardcopyWriter)w;    int textSpace=ww.getCharactersPerLine() - indentWidth - 1;    String newLine="\n";    w.write(newLine,0,1);    String s="   ID:                " + _id;    w.write(s,0,s.length());    if (!(_consistNumber.equals(""))) {      w.write(newLine,0,1);      s="   Consist number:    " + _consistNumber;      w.write(s,0,s.length());    }    if (!(_roadName.equals(""))) {      w.write(newLine,0,1);      s="   Road name:         " + _roadName;      w.write(s,0,s.length());    }    if (!(_roadNumber.equals(""))) {      w.write(newLine,0,1);      s="   Road number:       " + _roadNumber;      w.write(s,0,s.length());    }    if (!(_model.equals(""))) {      w.write(newLine,0,1);      s="   Model:             " + _model;      w.write(s,0,s.length());    }    if (!(_loco1DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Lead Address:      " + _loco1DccAddress + "  "+ _loco1Direction;      w.write(s,0,s.length());    }    if (!(_loco2DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Rear Address:      " + _loco2DccAddress + "  "+ _loco2Direction;      w.write(s,0,s.length());    }    if (!(_loco3DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Mid1 Address:      " + _loco3DccAddress + "  "+ _loco3Direction;      w.write(s,0,s.length());    }    if (!(_loco4DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Mid2 Address:      " + _loco4DccAddress + "  "+ _loco4Direction;      w.write(s,0,s.length());    }    if (!(_loco5DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Mid3 Address:      " + _loco5DccAddress + "  "+ _loco5Direction;      w.write(s,0,s.length());    }    if (!(_loco6DccAddress.equals(""))) {      w.write(newLine,0,1);      s="   Mid4 Address:      " + _loco6DccAddress + "  "+ _loco6Direction;      w.write(s,0,s.length());    }    if (!(_comment.equals(""))) {      Vector<String> commentVector=wrapComment(_comment,textSpace);      int k=0;      w.write(newLine,0,1);      s="   Comment:           " + commentVector.elementAt(k);      w.write(s,0,s.length());      k++;      while (k < commentVector.size()) {        String token=commentVector.elementAt(k);        if (!token.equals("\n")) {          s=indent + token;        } else {          s=token;        }        w.write(s,0,s.length());        k++;      }    }    w.write(newLine,0,1);  } catch (  IOException e) {    log.error("Error printing ConsistRosterEntry: " + e);  }}  }
class C{  @Override public E remove(int location){  E result;  if (location < 0 || location >= size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  if (location == 0) {    result=array[firstIndex];    array[firstIndex++]=null;  } else   if (location == size - 1) {    int lastIndex=firstIndex + size - 1;    result=array[lastIndex];    array[lastIndex]=null;  } else {    int elementIndex=firstIndex + location;    result=array[elementIndex];    if (location < size / 2) {      System.arraycopy(array,firstIndex,array,firstIndex + 1,location);      array[firstIndex++]=null;    } else {      System.arraycopy(array,elementIndex + 1,array,elementIndex,size - location - 1);      array[firstIndex + size - 1]=null;    }  }  size--;  if (size == 0) {    firstIndex=0;  }  modCount++;  return result;}  }
class C{  public void addResourceResolver(ResourceResolverSpi resolverSpi){  if (resolverSpi == null) {    return;  }  if (perManifestResolvers == null) {    perManifestResolvers=new ArrayList<ResourceResolver>();  }  perManifestResolvers.add(new ResourceResolver(resolverSpi));}  }
class C{  private List<TechnicalProduct> createTechnicalProduct(){  TechnicalProduct product=new TechnicalProduct();  product.setProvisioningUsername(PROVISIONING_USER_NAME);  product.setProvisioningPassword(PROVISIONING_PASSWORD);  List<ParameterDefinition> parameterDefinitions=new ArrayList<ParameterDefinition>();  ParameterDefinition def=new ParameterDefinition();  def.setParameterId("Def_ID");  def.setValueType(ParameterValueType.BOOLEAN);  if (currentModificationType != null) {    def.setModificationType(currentModificationType);  }  parameterDefinitions.add(def);  product.setParameterDefinitions(parameterDefinitions);  return Arrays.asList(product);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  static public int extractApp(U64 cookie){  return (int)((cookie.getValue() >>> APP_ID_SHIFT) & APP_ID_MASK);}  }
class C{  private void nodeLengthsToHeights(ReRootedNode node,double height){  double newHeight=height;  if (node.getLength() > 0.0) {    newHeight+=node.getLength();  }  node.setHeight(newHeight);  for (  Node child : node.getChildren()) {    nodeLengthsToHeights((ReRootedNode)child,newHeight);  }}  }
class C{  public void onEvent(Event e){  if (e.getTarget() == bCancel)   dispose(); else   if (m_C_PaySelection_ID <= 0)   return; else   if (e.getTarget() == fPaymentRule)   loadPaymentRuleInfo(); else   if (e.getTarget() == bExport)   cmd_export(); else   if (e.getTarget() == bProcess)   cmd_EFT(); else   if (e.getTarget() == bPrint)   cmd_print();}  }
class C{  private static String scanToXml(final long timestamp){  return String.format(SCAN_XML,timestamp);}  }
class C{  private void interpolate(float[] spectrum){  for (int i=0; i < spectrum.length; i++) {    if (spectrum[i] < previousSpectrum[i]) {      double interpolationCoefficient=0.97;      spectrum[i]=(float)(previousSpectrum[i] * interpolationCoefficient);    }    previousSpectrum[i]=spectrum[i];  }}  }
class C{  public void putClientProperty(String key,Object value){  if (clientProperties == null) {    if (value == null) {      return;    }    clientProperties=new HashMap<String,Object>();  }  if (value == null) {    clientProperties.remove(key);    if (clientProperties.size() == 0) {      clientProperties=null;    }  } else {    clientProperties.put(key,value);  }}  }
class C{  public static synchronized OptionsMediator instance(){  return INSTANCE;}  }
class C{  private static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public double distanceSq(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeVetoableChangeListener(VetoableChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof VetoableChangeListenerProxy) {    VetoableChangeListenerProxy proxy=(VetoableChangeListenerProxy)listener;    removeVetoableChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.remove(null,listener);  }}  }
class C{  public void forget(){  table.clear();}  }
class C{  public double localScore(int i,int... parents){  if (isDiscrete[i]) {    double bicLogistic=getBicLogistic(i,parents);    return bicLogistic;  } else {    return getBicLinear(i,parents);  }}  }
class C{  public BitemporalConditionBuilder ttTo(Object ttTo){  this.ttTo=ttTo;  return this;}  }
class C{  @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  protected static CoordinatorClient connectClient() throws Exception {  CoordinatorClientImpl client=new CoordinatorClientImpl();  client.setZkConnection(createConnection(10 * 1000));  return client;}  }
class C{  public static int convertStringToMemorySizeInt(String memSize){  int result=0;  if (memSize.endsWith("K")) {    result=Integer.valueOf(StringUtils.remove(memSize,'K')) * 1000;  } else   if (memSize.endsWith("M")) {    result=Integer.valueOf(StringUtils.remove(memSize,'M')) * 1000 * 1000;  } else   if (memSize.endsWith("G")) {    result=Integer.valueOf(StringUtils.remove(memSize,'G')) * 1000 * 1000* 1000;  }  return result;}  }
class C{  public void define(final HGHandle atomHandle,final Object instance,final int flags){  HGHandle typeHandle=null;  if (instance == null)   typeHandle=typeSystem.getNullType(); else   if (instance instanceof HGValueLink)   typeHandle=typeSystem.getTypeHandle(((HGValueLink)instance).getValue().getClass()); else   typeHandle=typeSystem.getTypeHandle(instance.getClass());  if (typeHandle == null)   throw new HGException("Could not find HyperGraph type for object of type " + instance.getClass());  define(atomHandle,typeHandle,instance,flags);}  }
class C{  public static void binToCfile(File binfile) throws IOException {  int i=0;  int byte1, byte2;  InputStream buffy=new BufferedInputStream(new FileInputStream(binfile));  LittleEndianOutputStream dataOut=new LittleEndianOutputStream(new BufferedOutputStream(new FileOutputStream(binfile.getAbsoluteFile() + ".cfile")));  while ((byte1=buffy.read()) != -1) {    if ((byte2=buffy.read()) == -1) {      dataOut.close();      break;    }    dataOut.writeFloat(((float)byte1 - 127) * 1 / 128);    dataOut.writeFloat(((float)byte2 - 127) * 1 / 128);  }  dataOut.close();}  }
class C{  public WildcardPattern(String pattern,boolean isCaseSensitive,String delimiters){  this(pattern,isCaseSensitive,false,delimiters);}  }
class C{  public boolean isEmpty(){  return resources.isEmpty() || resources.values().stream().allMatch(null);}  }
class C{  public String register(String coreName,final CoreDescriptor desc,boolean recoverReloadedCores,boolean afterExpiration,boolean skipRecovery) throws Exception {  try (SolrCore core=cc.getCore(desc.getName())){    MDCLoggingContext.setCore(core);  }   try {    final String baseUrl=getBaseUrl();    final CloudDescriptor cloudDesc=desc.getCloudDescriptor();    final String collection=cloudDesc.getCollectionName();    final String coreZkNodeName=desc.getCloudDescriptor().getCoreNodeName();    assert coreZkNodeName != null : "we should have a coreNodeName by now";    String shardId=cloudDesc.getShardId();    Map<String,Object> props=new HashMap<>();    props.put(ZkStateReader.BASE_URL_PROP,baseUrl);    props.put(ZkStateReader.CORE_NAME_PROP,coreName);    props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());    log.debug("Register replica - core:{} address:{} collection:{} shard:{}",coreName,baseUrl,cloudDesc.getCollectionName(),shardId);    ZkNodeProps leaderProps=new ZkNodeProps(props);    try {      boolean joinAtHead=false;      Replica replica=zkStateReader.getClusterState().getReplica(desc.getCloudDescriptor().getCollectionName(),coreZkNodeName);      if (replica != null) {        joinAtHead=replica.getBool(SliceMutator.PREFERRED_LEADER_PROP,false);      }      joinElection(desc,afterExpiration,joinAtHead);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);    }catch (    KeeperException|IOException e) {      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);    }    String leaderUrl=getLeader(cloudDesc,leaderVoteWait + 600000);    String ourUrl=ZkCoreNodeProps.getCoreUrl(baseUrl,coreName);    log.debug("We are " + ourUrl + " and leader is "+ leaderUrl);    boolean isLeader=leaderUrl.equals(ourUrl);    try (SolrCore core=cc.getCore(desc.getName())){      UpdateLog ulog=core.getUpdateHandler().getUpdateLog();      if (!afterExpiration && !core.isReloaded() && ulog != null) {        Slice slice=getClusterState().getSlice(collection,shardId);        if (slice.getState() != Slice.State.CONSTRUCTION || !isLeader) {          Future<UpdateLog.RecoveryInfo> recoveryFuture=core.getUpdateHandler().getUpdateLog().recoverFromLog();          if (recoveryFuture != null) {            log.info("Replaying tlog for " + ourUrl + " during startup... NOTE: This can take a while.");            recoveryFuture.get();          } else {            log.debug("No LogReplay needed for core={} baseURL={}",core.getName(),baseUrl);          }        }      }      boolean didRecovery=checkRecovery(recoverReloadedCores,isLeader,skipRecovery,collection,coreZkNodeName,core,cc,afterExpiration);      if (!didRecovery) {        publish(desc,Replica.State.ACTIVE);      }      core.getCoreDescriptor().getCloudDescriptor().setHasRegistered(true);    }     zkStateReader.forceUpdateCollection(collection);    return shardId;  }  finally {    MDCLoggingContext.clear();  }}  }
class C{  public FileExtFilter(String[] exts,String description){  this.exts=new String[exts.length];  System.arraycopy(exts,0,this.exts,0,exts.length);  this.description=description;}  }
class C{  public boolean matchesId(String checkId){  if (checkId == null) {    return false;  } else   if (uuid.isPresent() && checkId.equals(uuid.get())) {    return true;  }  String id=getId();  return !id.equals("0") && checkId.equals(id);}  }
class C{  public FolderIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.426 -0500",hash_original_method="15C090CE1A98280B8C8C7B6514A10013",hash_generated_method="5259D04831CFBC97FA07B15139C69FAD") public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  protected static long adjustTwoDigitYear(long year){  if (year <= 69) {    year=year + 2000;  } else   if (year < 100) {    year=1900 + year;  }  return year;}  }
class C{  private static void sendRegistrationMessageToServers(InstantiatorAttributesHolder holder){  PoolManagerImpl.allPoolsRegisterInstantiator(holder);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderBlue=args[0];  inputHeaderGreen=args[1];  inputHeaderRed=args[2];  outputHeader=args[3];  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b;    double z;    float progress=0;    if (inputHeaderRed.toLowerCase().contains("not specified")) {      inputHeaderRed=inputHeaderGreen;      inputHeaderGreen=inputHeaderBlue;    }    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    if (!inputHeaderGreen.equals(inputHeaderBlue)) {      WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);      if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=blue.getDisplayMinimum();      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=blue.getDisplayMaximum() - blueMin;      double[] dataRed, dataGreen, dataBlue;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();      blue.close();    } else {      redMin=red.getDisplayMinimum();      greenMin=green.getDisplayMinimum();      blueMin=greenMin;      redRange=red.getDisplayMaximum() - redMin;      greenRange=green.getDisplayMaximum() - greenMin;      blueRange=greenRange;      double[] dataRed, dataGreen;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataGreen[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      red.close();      green.close();    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected static Index.IndexType checkIndexType(IndexDefinition index,TableName tableName){  for (  IndexColumn col : index.getIndexColumnList()) {    if (col.getTableName() == null || ((col.getTableName().hasSchema() && col.getTableName().getSchemaName().equalsIgnoreCase(tableName.getSchemaName()) || !col.getTableName().hasSchema()) && col.getTableName().getTableName().equalsIgnoreCase(tableName.getTableName()))) {      ;    } else {      return Index.IndexType.GROUP;    }  }  return Index.IndexType.TABLE;}  }
class C{  public JSONBuffer append(double[] cont){  startArray();  for (int i=0; i < cont.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(Double.toString(cont[i]));  }  closeArray();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.831 -0400",hash_original_method="2099D00FDFC3545893A7A9B87ABDF3A9",hash_generated_method="E3FEECCCF863F0062650DD5C044110BF") private void onNetworkDeviceDisconnected(String address){  BluetoothDevice device=mAdapter.getRemoteDevice(address);  mBluetoothService.handlePanDeviceStateChange(device,BluetoothPan.STATE_DISCONNECTED,BluetoothPan.LOCAL_NAP_ROLE);}  }
class C{  private void fetchPage(String page,int expectedCode) throws Exception {  URL url=new URL("http","127.0.0.1",port,page);  WebPage p=WebPage.newBuilder().build();  Response response=http.getResponse(url,p,true);  ProtocolOutput out=http.getProtocolOutput(url.toString(),p);  Content content=out.getContent();  assertEquals("HTTP Status Code for " + url,expectedCode,response.getCode());  if (page.compareTo("/nonexists.html") != 0 && page.compareTo("/brokenpage.jsp") != 0 && page.compareTo("/redirection") != 0)   assertEquals("ContentType " + url,"application/xhtml+xml",content.getContentType());}  }
class C{  public JobDetailImpl(String name,String group,Class<? extends Job> jobClass,boolean durability,boolean recover){  setName(name);  setGroup(group);  setJobClass(jobClass);  setDurability(durability);  setRequestsRecovery(recover);}  }
class C{  public FillStyle(Color solidColor){  fillType=SWFConstants.FILL_SOLID;  color=solidColor;}  }
class C{  public OsmNetworkReaderJohan(final Network network,final CoordinateTransformation transformation,boolean useHighwayDefaults){  this.network=(Network)network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);  }}  }
class C{  public boolean hasData(){  return hasExtension(Data.class);}  }
class C{  private static List<String> computeCompilerCommandLine(IJavaProject javaProject,IPath warLocation,GWTCompileSettings settings) throws CoreException {  List<String> commandLine=new ArrayList<String>();  String javaExecutable=ProcessUtilities.computeJavaExecutableFullyQualifiedPath(javaProject);  commandLine.add(javaExecutable);  commandLine.addAll(GWTLaunchConfiguration.computeCompileDynamicVMArgsAsList(javaProject));  commandLine.addAll(splitArgs(VariablesPlugin.getDefault().getStringVariableManager().performStringSubstitution(settings.getVmArgs())));  commandLine.add("-cp");  commandLine.add(ClasspathUtilities.flattenToClasspathString(computeClasspath(javaProject)));  commandLine.add(COMPILER_NAME);  commandLine.addAll(computeCompilerOptions(warLocation,settings));  commandLine.addAll(settings.getEntryPointModules());  return commandLine;}  }
class C{  public void unregisterRemoteControlClient(PendingIntent mediaIntent,IRemoteControlClient rcClient){  if (DEBUG_RC)   Log.i(TAG,"Unregister remote control client rcClient=" + rcClient);synchronized (mAudioFocusLock) {synchronized (mRCStack) {      boolean topRccChange=false;      try {        for (int index=mRCStack.size() - 1; index >= 0; index--) {          final RemoteControlStackEntry rcse=mRCStack.elementAt(index);          if ((rcse.mMediaIntent.equals(mediaIntent)) && rcClient.equals(rcse.mRcClient)) {            rcse.unlinkToRcClientDeath();            rcse.mRcClient=null;            rcse.mCallingPackageName=null;            topRccChange=(index == mRCStack.size() - 1);            break;          }        }      } catch (      ArrayIndexOutOfBoundsException e) {        Log.e(TAG,"Wrong index accessing RC stack, lock error? ",e);      }      if (topRccChange) {        checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element newOne;  Node domesticNode;  NamedNodeMap attributes;  Attr attribute;  String attrName;  Node appendedChild;  int langAttrCount=0;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  newOne=doc.createElement("html");  newOne.setAttribute("lang","EN");  appendedChild=docFragment.appendChild(newOne);  domesticNode=docFragment.getFirstChild();  attributes=domesticNode.getAttributes();  for (int indexN10078=0; indexN10078 < attributes.getLength(); indexN10078++) {    attribute=(Attr)attributes.item(indexN10078);    attrName=attribute.getNodeName();    if (equalsAutoCase("attribute","lang",attrName)) {      langAttrCount+=1;    }  }  assertEquals("hasLangAttr",1,langAttrCount);}  }
class C{  public LoginRestApi(){  super();}  }
class C{  public BasicAirspaceAttributes(AirspaceAttributes attributes){  super(attributes);}  }
class C{  public void putCharSequenceArray(String key,CharSequence[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public SVGLineElementBridge(){}  }
class C{  final void push(final Object object){  stack.add(object);}  }
class C{  public boolean validate(BaseAction action,Organisation organisation){  boolean valid=true;  if (organisation.getKey() == null || organisation.getKey().toString().length() < 1) {    valid=false;    action.addFieldError("organisation.key",action.getText("validation.organisation.key.required"));  }  if (StringUtils.trimToNull(organisation.getPassword()) == null) {    valid=false;    action.addFieldError("organisation.password",action.getText("validation.organisation.password.required"));  }  if (organisation.getKey() != null && organisation.getPassword() != null) {    if (organisation.getKey().toString().length() > 0 && organisation.getPassword().length() > 0) {      if (!registryManager.validateOrganisation(organisation.getKey().toString(),organisation.getPassword())) {        valid=false;        action.addFieldError("organisation.password",action.getText("validation.organisation.password.invalid"));      }    }  }  DOIRegistrationAgency agency=organisation.getDoiRegistrationAgency();  String agencyUsername=StringUtils.trimToNull(organisation.getAgencyAccountUsername());  String agencyPassword=StringUtils.trimToNull(organisation.getAgencyAccountPassword());  String prefix=StringUtils.trimToNull(organisation.getDoiPrefix());  if (agency != null || agencyUsername != null || agencyPassword != null || prefix != null) {    if (agency == null) {      valid=false;      action.addFieldError("organisation.doiRegistrationAgency",action.getText("validation.organisation.doiRegistrationAgency.required"));    }    if (agencyUsername == null) {      valid=false;      action.addFieldError("organisation.agencyAccountUsername",action.getText("validation.organisation.agencyAccountUsername.required"));    }    if (agencyPassword == null) {      valid=false;      action.addFieldError("organisation.agencyAccountPassword",action.getText("validation.organisation.agencyAccountPassword.required"));    }    if (prefix == null) {      valid=false;      action.addFieldError("organisation.doiPrefix",action.getText("validation.organisation.doiPrefix.required"));    } else     if (!prefix.startsWith("10.")) {      valid=false;      action.addFieldError("organisation.doiPrefix",action.getText("validation.organisation.doiPrefix.invalid"));    } else     if (!prefix.contains("/") && agency != null && agency.equals(DOIRegistrationAgency.EZID)) {      valid=false;      action.addFieldError("organisation.doiPrefix",action.getText("validation.organisation.doiPrefix.ezid.invalid"));    } else {      if (cfg.getRegistryType() == AppConfig.REGISTRY_TYPE.DEVELOPMENT && !Constants.TEST_DOI_PREFIX.equalsIgnoreCase(prefix) && !Constants.EZID_TEST_DOI_SHOULDER.equalsIgnoreCase(prefix)) {        action.addActionWarning(action.getText("validation.organisation.doiPrefix.invalid.testMode"));      } else       if (cfg.getRegistryType() == AppConfig.REGISTRY_TYPE.PRODUCTION && (Constants.TEST_DOI_PREFIX.equalsIgnoreCase(prefix) || Constants.EZID_TEST_DOI_SHOULDER.equalsIgnoreCase(prefix))) {        valid=false;        action.addFieldError("organisation.doiPrefix",action.getText("validation.organisation.doiPrefix.invalid.productionMode"));      }    }    if (valid) {      DoiService service;      if (agency.equals(DOIRegistrationAgency.EZID) && !client.getCookieStore().getCookies().isEmpty()) {        client.getCookieStore().clear();      }      ServiceConfig cfg=new ServiceConfig(agencyUsername,agencyPassword);      service=(agency.equals(DOIRegistrationAgency.DATACITE)) ? new DataCiteService(client,cfg) : new EzidService(client,cfg);      try {        DOI doi=DOIUtils.mintDOI(agency,prefix);        DataCiteMetadata metadata=getTestDataCiteMetadata(doi);        service.reserve(doi,metadata);        service.delete(doi);      } catch (      DoiException e) {        valid=false;        String msg=action.getText("validation.organisation.agencyAccount.cantAuthenticate");        LOG.error(msg,e);        action.addActionError(msg);      } finally {        organisation.setAgencyAccountUsername(agencyUsername);        organisation.setAgencyAccountPassword(agencyPassword);        organisation.setDoiPrefix(prefix);      }    } else {      LOG.debug("Not all DOI Registration agency fields were entered correctly - bypassing DOI Registration Agency validation");    }  }  return valid;}  }
class C{  public float angleBetween(Vector3f otherVector){  float dotProduct=dot(otherVector);  float angle=FastMath.acos(dotProduct);  return angle;}  }
class C{  private void literal(TagData data,Body parent,boolean parseExpression,ExprTransformer transformer) throws TemplateException {  if (parseExpression) {    if (data.srcCode.isAfterLast())     return;    StringBuffer text=new StringBuffer();    int count=0;    while (data.srcCode.isValidIndex()) {      count++;      if (data.srcCode.isCurrent('#')) {        data.srcCode.next();        if (data.srcCode.isCurrent('#')) {          text.append('#');        } else {          if (text.length() > 0) {            Position end=data.srcCode.getPosition();            Position start=data.srcCode.getPosition(end.pos - text.length());            parent.addPrintOut(data.factory,text.toString(),start,end);            start=end;            text=new StringBuffer();          }          Position end=data.srcCode.getPosition();          Position start=data.srcCode.getPosition(end.pos - text.length());          PrintOut po;          parent.addStatement(po=new PrintOut(transformer.transform(data.factory,data.root,data.ep,data.tlibs,data.flibs,data.scriptTags,data.srcCode,data.settings),start,end));          po.setEnd(data.srcCode.getPosition());          if (!data.srcCode.isCurrent('#'))           throw new TemplateException(data.srcCode,"missing terminating [#] for expression");        }      } else       if (data.srcCode.isCurrent('<') && count > 1) {        break;      } else       text.append(data.srcCode.getCurrent());      data.srcCode.next();    }    if (text.length() > 0) {      Position end=data.srcCode.getPosition();      Position start=data.srcCode.getPosition(end.pos - text.length());      parent.addPrintOut(data.factory,text.toString(),start,end);    }  } else {    int start=data.srcCode.getPos();    data.srcCode.next();    int end=data.srcCode.indexOfNext('<');    String text;    if (end == -1) {      text=data.srcCode.substring(start);      data.srcCode.setPos(data.srcCode.length());    } else {      text=data.srcCode.substring(start,end - start);      data.srcCode.setPos(end);    }    Position e=data.srcCode.getPosition();    Position s=data.srcCode.getPosition(start);    parent.addPrintOut(data.factory,text,s,e);  }}  }
class C{  public NamingEnumeration list(String name) throws NamingException {  return list(nameParser.parse(name));}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  Object processNMTOKEN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNmtoken(value))) {        handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNmtoken(value)) {      handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);      return null;    }  }  return value;}  }
class C{  public DSAPublicKey(BigInteger y,BigInteger p,BigInteger q,BigInteger g) throws InvalidKeyException {  this.y=y;  algid=new AlgIdDSA(p,q,g);  try {    byte[] keyArray=new DerValue(DerValue.tag_Integer,y.toByteArray()).toByteArray();    setKey(new BitArray(keyArray.length * 8,keyArray));    encode();  } catch (  IOException e) {    throw new InvalidKeyException("could not DER encode y: " + e.getMessage());  }}  }
class C{  static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  public AsyncResult GetEndpointsAsync(GetEndpointsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void initialise(int dimensions,double kernelWidth){  this.dimensions=dimensions;  this.suppliedKernelWidths=new double[dimensions];  for (int d=0; d < dimensions; d++) {    this.suppliedKernelWidths[d]=kernelWidth;  }  finishInitialisation();}  }
class C{  public static GLFont fromFont(Font font){  if (font == null)   throw new IllegalArgumentException("font may not be null");  BufferedImage buffer=new BufferedImage(RASTER_DIM,RASTER_DIM,BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=(Graphics2D)buffer.getGraphics();  graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  int off=0;  int charsPerRow=12;  for (char k=MIN_CH; k <= MAX_CH; k++, off++) {    TextLayout layout=new TextLayout(String.valueOf(k),font,graphics.getFontRenderContext());    Rectangle2D rect=layout.getBounds();    int x=(off % charsPerRow) * (RASTER_DIM / charsPerRow);    int y=(off / charsPerRow) * (RASTER_DIM / charsPerRow);    float cy=(float)rect.getHeight();    graphics.setColor(Color.WHITE);    layout.draw(graphics,x,y - cy);  }  GLFontMetrics metric=GLFontMetrics.fromFontMetrics(font,graphics.getFontRenderContext(),RASTER_DIM,RASTER_DIM,charsPerRow,MIN_CH,MAX_CH);  GLFont f0=fromBuffer(font.getFontName(),buffer,RASTER_DIM,RASTER_DIM,metric);  return f0;}  }
class C{  public int createMeasures(MSLAGoal goal){  String sql="SELECT M_InOut_ID, io.MovementDate-o.DatePromised," + " io.MovementDate, o.DatePromised, o.DocumentNo " + "FROM M_InOut io"+ " INNER JOIN C_Order o ON (io.C_Order_ID=o.C_Order_ID) "+ "WHERE io.C_BPartner_ID=?"+ " AND NOT EXISTS "+ "(SELECT * FROM PA_SLA_Measure m "+ "WHERE m.PA_SLA_Goal_ID=?"+ " AND m.AD_Table_ID=" + MInOut.Table_ID + " AND m.Record_ID=io.M_InOut_ID)";  int counter=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,goal.getC_BPartner_ID());    pstmt.setInt(2,goal.getPA_SLA_Goal_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int M_InOut_ID=rs.getInt(1);      BigDecimal MeasureActual=rs.getBigDecimal(2);      Timestamp MovementDate=rs.getTimestamp(3);      String Description=rs.getString(5) + ": " + rs.getTimestamp(4);      if (goal.isDateValid(MovementDate)) {        MSLAMeasure measure=new MSLAMeasure(goal,MovementDate,MeasureActual,Description);        measure.setLink(MInOut.Table_ID,M_InOut_ID);        if (measure.save())         counter++;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"createMeasures",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return counter;}  }
class C{  public static boolean isPresent(SimplyAttribute[] array,SimplyAttribute element){  if (!isNull(array))   for (  SimplyAttribute item : array)   if (element.getName().matches(item.getName()))   return true;  return false;}  }
class C{  private PcapPacket readPacket(int magicNumber) throws IOException {  PacketHeader packetHeader=readPacketHeader(magicNumber);  Buffer packetData=readPacketData(packetHeader.getInclLen());  return new PcapPacket(packetHeader,packetData);}  }
class C{  public boolean isVideoSharingSupported(){  return mVideoSharing;}  }
class C{  public void writeState(DataOutputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   stream.writeInt(mt[x]);  len=mag01.length;  for (int x=0; x < len; x++)   stream.writeInt(mag01[x]);  stream.writeInt(mti);  stream.writeDouble(__nextNextGaussian);  stream.writeBoolean(__haveNextNextGaussian);}  }
class C{  protected void modifyOMGraphicForEditRender(){  ((OMDistance)getGraphic()).paintOnlyPoly=true;}  }
class C{  public static MatrixCharacteristics computeMatrixCharacteristics(JavaPairRDD<MatrixIndexes,MatrixCell> input){  MatrixCharacteristics ret=input.map(new AnalyzeCellMatrixCharacteristics()).reduce(new AggregateMatrixCharacteristics());  return ret;}  }
class C{  @Override public IMqttToken unsubscribe(String topic,Object userContext,IMqttActionListener callback) throws MqttException {  IMqttToken token=new MqttTokenAndroid(this,userContext,callback);  String activityToken=storeToken(token);  mqttService.unsubscribe(clientHandle,topic,null,activityToken);  return token;}  }
class C{  public boolean isDeepRead(){  return deepRead;}  }
class C{  public HashAttributeSet(Attribute attribute){  this(attribute,Attribute.class);}  }
class C{  public TechnicalServiceNotAliveException(String message){  super(message);}  }
class C{  void addUnchecked(final BaseDownloadTask.IRunningTask task){  if (task.isMarkedAdded2List()) {    return;  }synchronized (mList) {    if (mList.contains(task)) {      FileDownloadLog.w(this,"already has %s",task);    } else {      task.markAdded2List();      mList.add(task);      if (FileDownloadLog.NEED_LOG) {        FileDownloadLog.v(this,"add list in all %s %d %d",task,task.getOrigin().getStatus(),mList.size());      }    }  }}  }
class C{  public static double NHWPmaxFitness(boolean useTrainingData,GEPIndividual ind){  return (useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);}  }
class C{  public File read(String path){  return new File(path);}  }
class C{  public NovaLauncher createLauncher(){  DependencyInjectionEntryPoint diep=new DependencyInjectionEntryPoint();  getModules().forEach(null);  NovaLauncher launcher=new NovaLauncher(diep,new HashSet<>(Arrays.asList(modClasses)));  Game.inject(diep);  Game.blocks().register(new BlockFactory("air",null,null));  launcher.generateDependencies();  launcher.load();  Game.blocks().init();  Game.items().init();  Game.entities().init();  Game.render().init();  Game.language().init();  Game.recipes().init();  launcher.preInit();  launcher.init();  launcher.postInit();  return launcher;}  }
class C{  public boolean isUseDerivedPassword(){  return useDerivedPassword;}  }
class C{  public static boolean routeHasStopSequenceLoop(TransitRoute transitRoute){  Set<String> parentFacilities=new HashSet<>();  for (  TransitRouteStop stop : transitRoute.getStops()) {    if (!parentFacilities.add(getParentId(stop.getStopFacility().getId().toString()))) {      return true;    }  }  return false;}  }
class C{  public void done(){  if (read != null) {    try {      read.close();    } catch (    IOException e) {    }    read=null;  }  if (write != null) {    try {      data=write.toByteArray();      write.close();    } catch (    IOException e) {    }    write=null;  }}  }
class C{  public static String htmlDecode(String str){  if (str == null) {    return null;  }  try {    str=URLDecoder.decode(str,"UTF-8");  } catch (  final Throwable e) {    e.printStackTrace();  }  return Encoding.htmlOnlyDecode(str);}  }
class C{  boolean isBlocked(Workflow workflow,Step step) throws WorkflowException, CancelledException {  if (step.waitFor == null) {    return false;  }  Map<String,StepStatus> statusMap=new HashMap<String,StepStatus>();  try {    StepStatus status=workflow.getStepStatus(step.waitFor);    statusMap.put(step.waitFor,status);  } catch (  WorkflowException ex1) {    try {      statusMap=workflow.getStepGroupStatus(step.waitFor);    } catch (    WorkflowException ex2) {      throw new WorkflowException(String.format("Workflow step %s waitFor %s invalid, must be stepId or stepGroup name",step.stepId,step.waitFor));    }  }  String[] errorMessage=new String[1];  StepState state=Workflow.getOverallState(statusMap,errorMessage);switch (state) {case SUSPENDED_NO_ERROR:case SUSPENDED_ERROR:case CANCELLED:    throw new CancelledException();case ERROR:  if ((workflow.getRollbackContOnError()) && (workflow.isRollbackState())) {    _log.info("Allowing rollback to continue despite failure in previous rollback step.");    return false;  }throw new CancelledException();case SUCCESS:return false;case CREATED:case BLOCKED:case QUEUED:case EXECUTING:default :return true;}}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  dialog.setTitle(getTitle());  Integer docTypeId=(Integer)getGridTab().getValue("C_DocTypeTarget_ID");  MDocType docType=MDocType.get(Env.getCtx(),docTypeId);  if (!MDocType.DOCBASETYPE_APCreditMemo.equals(docType.getDocBaseType())) {    rmaLabel.setVisible(false);    rmaField.setVisible(false);  }  initBPartner(true);  bPartnerField.addVetoableChangeListener(this);  return true;}  }
class C{  public boolean offer(E e){  return add(e);}  }
class C{  public void insertPushNull(int opcode,JumpInsnNode position,InsnList list){  int branchId=getBranchID(currentMethodNode,position);  logger.info("Inserting instrumentation for NULL check at branch " + branchId + " in method "+ currentMethodNode.name);  MethodInsnNode nullCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"isNull",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Object.class),Type.INT_TYPE}),false);  list.insertBefore(position,new InsnNode(Opcodes.DUP));  list.insertBefore(position,new LdcInsnNode(opcode));  list.insertBefore(position,nullCheck);  insertBranchIdPlaceholder(currentMethodNode,position,branchId);  MethodInsnNode push=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"pushPredicate",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,push);}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  public void addExtension(String extension){  if (filters == null) {    filters=new Hashtable<String,ExampleFileFilter>(5);  }  if (extension != null) {    filters.put(extension.toLowerCase(),this);  }  fullDescription=null;}  }
class C{  private static int startOfWhitespaceBeforeOffset(String text,int offset){  int i=Math.min(offset,text.length());  for (; i >= 1; i--) {    if (!Character.isWhitespace(text.charAt(i - 1)))     break;  }  return i;}  }
class C{  private boolean holdConstraints_68_Consumption(MemberMatrix mm){  TClassifier currentType=getCurrentClassifier();  MemberList<TMember> consumedMembers=new MemberList<>(2);  for (  TMember m : mm.implemented()) {    boolean consume=true;    for (SourceAwareIterator iter=mm.allMembers(); iter.hasNext(); ) {      TMember m_=iter.next();      if (m_ == m && iter.isInterfaceMember()) {        continue;      }      if ((m.isMethod() && !m_.isMethod()) || (!m.isMethod() && !(m_.isAccessor() || m_.isField()))) {        if (iter.isInterfaceMember()) {          messageIncompatibleMembersToImplement(mm.implemented());          return false;        } else         if (iter.isInheritedMember()) {          messageIncompatibleInheritedMembersToImplement(m_,mm.implemented());          return false;        } else {          return true;        }      }      boolean accessorPair=TypeUtils.isAccessorPair(m,m_);      if (!accessorPair) {        if ((!m_.isAbstract() || m_.getContainingType() == currentType)) {          consume=false;          break;        }        if (AccessModifiers.less(m,m_)) {          consume=false;          break;        }        if (!m_.isSetter()) {          if (!isSubType(m,m_)) {            consume=false;            break;          }        }        if (m_.isSetter() || m_.isField()) {          if (!isSubType(m_,m)) {            consume=false;            break;          }        }      }    }    if (consume) {      if (!consumedMembers.contains(m)) {        consumedMembers.add(m);      }    }  }  mm.markConsumed(consumedMembers);  return true;}  }
class C{  private static boolean isValidVoiceInputKeyCode(int keyCode){  if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK) {    return true;  } else {    return false;  }}  }
class C{  public static synchronized void resetWithClockStep(long clockStep,TimeUnit clockStepUnit){  clockMs=new AtomicLong(new DateTime(2009,9,30,17,0,0,DateTimeZone.forOffsetHours(-4)).getMillis());  setClockStep(clockStep,clockStepUnit);}  }
class C{  public static int checkEqualLogs(BigInteger c,BigInteger d,BigInteger r,SMState state,int version) throws SMException {  BigInteger temp2=state.g1.modPow(d,MODULUS_S);  BigInteger temp3=state.g3o.modPow(c,MODULUS_S);  BigInteger temp1=temp2.multiply(temp3).mod(MODULUS_S);  temp3=state.qab.modPow(d,MODULUS_S);  temp2=r.modPow(c,MODULUS_S);  temp2=temp3.multiply(temp2).mod(MODULUS_S);  BigInteger cprime=hash(version,temp1,temp2);  return c.compareTo(cprime);}  }
class C{  @Override @Transactional protected void persist(Collection<RawProtein<T>> filteredProteins,Map<String,Signature> modelAccessionToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<T> rawProtein : filteredProteins) {    final Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    for (    T rawMatch : rawProtein.getMatches()) {      Signature signature=modelAccessionToSignatureMap.get(rawMatch.getModelId());      ProfileScanMatch match=buildMatch(signature,rawMatch);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public void updateDbScore(Text url,CrawlDatum old,CrawlDatum datum,List inlinked) throws ScoringFilterException {  float adjust=0.0f;  for (int i=0; i < inlinked.size(); i++) {    CrawlDatum linked=(CrawlDatum)inlinked.get(i);    adjust+=linked.getScore();  }  if (old == null)   old=datum;  datum.setScore(old.getScore() + adjust);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Deprecated public void addScaleInAnimator(@NonNull List<Animator> animators,@NonNull View view,@FloatRange(from=0.0,to=1.0) float scaleFrom){  if (animatorsUsed.contains(AnimatorEnum.SCALE))   return;  animators.add(ObjectAnimator.ofFloat(view,"scaleX",scaleFrom,1f));  animators.add(ObjectAnimator.ofFloat(view,"scaleY",scaleFrom,1f));  animatorsUsed.add(AnimatorEnum.SCALE);}  }
class C{  public String userId(){  return userId;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.839 -0500",hash_original_method="35BD856EF91F37D3D6F6474A08F13759",hash_generated_method="D1CE500FA49646F60DD7AE01EAB08AEB") public int breakText(CharSequence text,int start,int end,boolean measureForwards,float maxWidth,float[] measuredWidth){  if (text == null) {    throw new IllegalArgumentException("text cannot be null");  }  if ((start | end | (end - start)| (text.length() - end)) < 0) {    throw new IndexOutOfBoundsException();  }  if (text.length() == 0 || start == end) {    return 0;  }  if (start == 0 && text instanceof String && end == text.length()) {    return breakText((String)text,measureForwards,maxWidth,measuredWidth);  }  char[] buf=TemporaryBuffer.obtain(end - start);  int result;  TextUtils.getChars(text,start,end,buf,0);  if (measureForwards) {    result=breakText(buf,0,end - start,maxWidth,measuredWidth);  } else {    result=breakText(buf,0,-(end - start),maxWidth,measuredWidth);  }  TemporaryBuffer.recycle(buf);  return result;}  }
class C{  public static void killedSomething(final Player player){  process(player,TutorialEventType.FIRST_KILL);}  }
class C{  public void addPackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  for (  LauncherActivityInfoCompat info : matches) {    add(new AppInfo(context,info,user,mIconCache));  }}  }
class C{  protected BooleanLiteral(boolean value){  super(Boolean.toString(value),XMLSchema.BOOLEAN);  this.value=value;}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public JclLogger(){  this(LogFactory.getLog(JclLogger.class.getName()));}  }
class C{  private void readObject(ObjectInputStream s) throws ObjectStreamException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public int add(T t){  int idx=t2imap.getInt(t);  if (idx == -1) {    idx=i2tmap.size();    t2imap.put(t,idx);    i2tmap.add(t);    return idx;  } else {    return idx;  }}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public static final long classId(byte[] key,String name){  long[] sipkey=SipHashInline.getKey(key);  return classId(sipkey,name);}  }
class C{  public DateTimeValue toDateTime(){  normalize();  return new DateTimeValueImpl(year,month,day,hour,minute,second);}  }
class C{  @Override public void preProcess(){  if (scrollContext == null) {    long from=from() == -1 ? 0 : from();    long size=size() == -1 ? 10 : size();    long resultWindow=from + size;    int maxResultWindow=indexService.indexSettings().getAsInt(MAX_RESULT_WINDOW,Defaults.MAX_RESULT_WINDOW);    if (resultWindow > maxResultWindow) {      throw new QueryPhaseExecutionException(this,"Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["+ resultWindow+ "]. See the scroll api for a more efficient way to request large data sets. "+ "This limit can be set by changing the ["+ DefaultSearchContext.MAX_RESULT_WINDOW+ "] index level parameter.");    }  }  aliasFilter=indexService.aliasesService().aliasFilter(request.filteringAliases());  if (query() == null) {    parsedQuery(ParsedQuery.parsedMatchAllQuery());  }  if (queryBoost() != 1.0f) {    parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(),new BoostScoreFunction(queryBoost)),parsedQuery()));  }  if (this.indexService.searchProcessorFactory() != null) {    this.searchProcessor=this.indexService.searchProcessorFactory().create();    this.searchProcessor.preProcess(this);  }  Query tokenRangeQuery=null;  if ((this.request.tokenRanges() != null) && (this.aggregations == null || this.aggregations.factories() == null || !this.aggregations.factories().hasTokenRangeAggregation())) {    tokenRangeQuery=Queries.newTokenRangeQuery(request.tokenRanges());  }  Query searchFilter=searchFilter(types());  if (searchFilter != null) {    if (Queries.isConstantMatchAllQuery(query())) {      Query q=new ConstantScoreQuery(searchFilter);      q.setBoost(query().getBoost());      if (tokenRangeQuery != null) {        q=Queries.filtered(q,tokenRangeQuery);      }      parsedQuery(new ParsedQuery(q,parsedQuery()));    } else {      BooleanQuery.Builder filtered=new BooleanQuery.Builder().add(query(),Occur.MUST).add(searchFilter,Occur.FILTER);      if (tokenRangeQuery != null) {        filtered.add(tokenRangeQuery,Occur.FILTER);      }      parsedQuery(new ParsedQuery(filtered.build(),parsedQuery()));    }  } else   if (tokenRangeQuery != null) {    BooleanQuery.Builder filtered=new BooleanQuery.Builder().add(query(),Occur.MUST).add(tokenRangeQuery,Occur.FILTER);    parsedQuery(new ParsedQuery(filtered.build(),parsedQuery()));  }  try {    this.query=searcher().rewrite(this.query);  } catch (  IOException e) {    throw new QueryPhaseExecutionException(this,"Failed to rewrite main query",e);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAltGlyphElement(prefix,(AbstractDocument)doc);}  }
class C{  public static String u2or4(int v){  if (v == (char)v) {    return u2(v);  } else {    return u4(v);  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public boolean hasError(){  return false;}  }
class C{  public StandardLogger(String name){  this(name,false);}  }
class C{  public static void clearPoint(ExtensionPoint ext){  Point p=getPointExtension(ext);  if (p != null) {    if (p instanceof GeoRssWhere) {      GeoRssWhere where=(GeoRssWhere)p;      if (where.hasBox()) {        where.clearPoint();        return;      }    }    ext.removeExtension(p);  }}  }
class C{  public static <E>WorkQueueProcessor<E> share(String name,int bufferSize,boolean autoCancel){  return share(name,bufferSize,null,autoCancel);}  }
class C{  @Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.end(name);  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void onDrawFrame(GL10 unused){  GameState gameState=mGameState;  gameState.calculateNextFrame();  if (EXTRA_CHECK)   Util.checkGlError("onDrawFrame start");  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);  BasicAlignedRect.prepareToDraw();  gameState.drawBorders();  gameState.drawBricks();  gameState.drawPaddle();  BasicAlignedRect.finishedDrawing();  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_ONE,GLES20.GL_ONE_MINUS_SRC_ALPHA);  TexturedAlignedRect.prepareToDraw();  gameState.drawScore();  gameState.drawBall();  gameState.drawMessages();  TexturedAlignedRect.finishedDrawing();  gameState.drawDebugStuff();  GLES20.glDisable(GLES20.GL_BLEND);  if (EXTRA_CHECK)   Util.checkGlError("onDrawFrame end");  if (!gameState.isAnimating()) {    Log.d(TAG,"Game over, stopping animation");    mSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);  }}  }
class C{  private static void changeLogLevel(String level){  Level newLevel=Level.valueOf(level);  LoggerContext ctx=(LoggerContext)LogManager.getContext(false);  Configuration conf=ctx.getConfiguration();  conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(newLevel);  ctx.updateLoggers(conf);}  }
class C{  public static synchronized SortedProperties loadProperties(String fileName) throws IOException {  SortedProperties prop=new SortedProperties();  if (FileUtils.exists(fileName)) {    try (InputStream in=FileUtils.newInputStream(fileName)){      prop.load(in);    }   }  return prop;}  }
class C{  public boolean isAccountType(){  Object oo=get_Value(COLUMNNAME_AccountType);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void updateMarker(IMarker marker) throws CoreException {  marker.setAttributes(attributes);}  }
class C{  public PropertyImpl createProperty(final PropertyImpl property,final String areaOfPlot,final String mutationCode,final String propTypeId,final String propUsageId,final String propOccId,final Character status,final String docnumber,final String nonResPlotArea,final Long floorTypeId,final Long roofTypeId,final Long wallTypeId,final Long woodTypeId,final Long taxExemptId){  LOGGER.debug("Entered into createProperty");  LOGGER.debug("createProperty: Property: " + property + ", areaOfPlot: "+ areaOfPlot+ ", mutationCode: "+ mutationCode+ ",propTypeId: "+ propTypeId+ ", propUsageId: "+ propUsageId+ ", propOccId: "+ propOccId+ ", status: "+ status);  currentInstall=(Installment)getPropPerServ().find("from Installment I where I.module.name=? and (I.fromDate <= ? and I.toDate >= ?) ",PTMODULENAME,new Date(),new Date());  final PropertySource propertySource=(PropertySource)getPropPerServ().find("from PropertySource where propSrcCode = ?",PROP_SOURCE);  if (floorTypeId != null && floorTypeId != -1) {    final FloorType floorType=(FloorType)getPropPerServ().find("From FloorType where id = ?",floorTypeId);    property.getPropertyDetail().setFloorType(floorType);  } else   property.getPropertyDetail().setFloorType(null);  if (roofTypeId != null && roofTypeId != -1) {    final RoofType roofType=(RoofType)getPropPerServ().find("From RoofType where id = ?",roofTypeId);    property.getPropertyDetail().setRoofType(roofType);  } else   property.getPropertyDetail().setRoofType(null);  if (wallTypeId != null && wallTypeId != -1) {    final WallType wallType=(WallType)getPropPerServ().find("From WallType where id = ?",wallTypeId);    property.getPropertyDetail().setWallType(wallType);  } else   property.getPropertyDetail().setWallType(null);  if (woodTypeId != null && woodTypeId != -1) {    final WoodType woodType=(WoodType)getPropPerServ().find("From WoodType where id = ?",woodTypeId);    property.getPropertyDetail().setWoodType(woodType);  } else   property.getPropertyDetail().setWoodType(null);  if (taxExemptId != null && taxExemptId != -1) {    final TaxExeptionReason taxExemptionReason=(TaxExeptionReason)getPropPerServ().find("From TaxExeptionReason where id = ?",taxExemptId);    property.setTaxExemptedReason(taxExemptionReason);    property.setIsExemptedFromTax(Boolean.TRUE);  }  if (areaOfPlot != null && !areaOfPlot.isEmpty()) {    final Area area=new Area();    area.setArea(new Float(areaOfPlot));    property.getPropertyDetail().setSitalArea(area);  }  if (property.getPropertyDetail().getApartment() != null && property.getPropertyDetail().getApartment().getId() != null) {    final Apartment apartment=(Apartment)getPropPerServ().find("From Apartment where id = ?",property.getPropertyDetail().getApartment().getId());    property.getPropertyDetail().setApartment(apartment);  } else   property.getPropertyDetail().setApartment(null);  if (nonResPlotArea != null && !nonResPlotArea.isEmpty()) {    final Area area=new Area();    area.setArea(new Float(nonResPlotArea));    property.getPropertyDetail().setNonResPlotArea(area);  }  property.getPropertyDetail().setFieldVerified('Y');  property.getPropertyDetail().setProperty(property);  final PropertyMutationMaster propMutMstr=(PropertyMutationMaster)getPropPerServ().find("from PropertyMutationMaster PM where upper(PM.code) = ?",mutationCode);  final PropertyTypeMaster propTypeMstr=(PropertyTypeMaster)getPropPerServ().find("from PropertyTypeMaster PTM where PTM.id = ?",Long.valueOf(propTypeId));  if (propUsageId != null) {    final PropertyUsage usage=(PropertyUsage)getPropPerServ().find("from PropertyUsage pu where pu.id = ?",Long.valueOf(propUsageId));    property.getPropertyDetail().setPropertyUsage(usage);  } else   property.getPropertyDetail().setPropertyUsage(null);  if (propOccId != null) {    final PropertyOccupation occupancy=(PropertyOccupation)getPropPerServ().find("from PropertyOccupation po where po.id = ?",Long.valueOf(propOccId));    property.getPropertyDetail().setPropertyOccupation(occupancy);  } else   property.getPropertyDetail().setPropertyOccupation(null);  if (propTypeMstr.getCode().equals(OWNERSHIP_TYPE_VAC_LAND))   property.getPropertyDetail().setPropertyType(VACANT_PROPERTY); else   property.getPropertyDetail().setPropertyType(BUILT_UP_PROPERTY);  property.getPropertyDetail().setPropertyTypeMaster(propTypeMstr);  property.getPropertyDetail().setPropertyMutationMaster(propMutMstr);  property.getPropertyDetail().setUpdatedTime(new Date());  createFloors(property,mutationCode,propUsageId,propOccId);  property.setStatus(status);  property.setIsDefaultProperty(PROPERTY_IS_DEFAULT);  property.setInstallment(currentInstall);  property.setEffectiveDate(currentInstall.getFromDate());  property.setPropertySource(propertySource);  property.setDocNumber(docnumber);  if (property.getApplicationNo() == null)   property.setApplicationNo(applicationNumberGenerator.generate());  LOGGER.debug("Exiting from createProperty");  return property;}  }
class C{  private void configureValue(Object value,Class columnClass){  if (columnClass == Object.class || columnClass == null) {    setHorizontalAlignment(JLabel.LEADING);  } else   if (columnClass == Float.class || columnClass == Double.class) {    if (numberFormat == null) {      numberFormat=NumberFormat.getInstance();    }    setHorizontalAlignment(JLabel.TRAILING);    setText((value == null) ? "" : ((NumberFormat)numberFormat).format(value));  } else   if (columnClass == Number.class) {    setHorizontalAlignment(JLabel.TRAILING);  } else   if (columnClass == Icon.class || columnClass == ImageIcon.class) {    setHorizontalAlignment(JLabel.CENTER);    setIcon((value instanceof Icon) ? (Icon)value : null);    setText("");  } else   if (columnClass == Date.class) {    if (dateFormat == null) {      dateFormat=DateFormat.getDateInstance();    }    setHorizontalAlignment(JLabel.LEADING);    setText((value == null) ? "" : ((Format)dateFormat).format(value));  } else {    configureValue(value,columnClass.getSuperclass());  }}  }
class C{  public static IndexType createPrimaryKey(boolean hash){  IndexType type=new IndexType();  type.primaryKey=true;  type.hash=hash;  type.unique=true;  return type;}  }
class C{  private void fillHomeUser(final Map<String,Object> dataModel,final JSONObject user){  dataModel.put(User.USER,user);}  }
class C{  public Jerry filter(String cssSelectors){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    Node parentNode=node.getParentNode();    if (parentNode == null) {      continue;    }    NodeSelector nodeSelector=createNodeSelector(parentNode);    List<Node> selectedNodes=nodeSelector.select(cssSelectors);    for (    Node selected : selectedNodes) {      if (node == selected) {        result.add(node);      }    }  }  return new Jerry(this,result);}  }
class C{  public void waitForCGCopyLinkState(FunctionalAPIImpl impl,ConsistencyGroupCopyUID copyUID,PipeState... desiredPipeState) throws RecoverPointException {  int numRetries=0;  String cgName=null;  try {    cgName=impl.getGroupName(copyUID.getGroupUID());  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }  List<String> desiredPipeStates=new ArrayList<String>();  if (desiredPipeState != null) {    for (    PipeState pipeState : desiredPipeState) {      desiredPipeStates.add(pipeState.name());    }  }  while (numRetries++ < MAX_RETRIES) {    ConsistencyGroupState cgState=null;    try {      cgState=impl.getGroupState(copyUID.getGroupUID());      for (      ConsistencyGroupLinkState linkstate : cgState.getLinksStates()) {        boolean found=false;        if (!cgState.getSourceCopiesUIDs().isEmpty()) {          for (          ConsistencyGroupCopyUID groupCopyUID : cgState.getSourceCopiesUIDs()) {            if (RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getFirstCopy(),groupCopyUID.getGlobalCopyUID()) && RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getSecondCopy(),copyUID.getGlobalCopyUID())) {              found=true;            }            if (RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getSecondCopy(),groupCopyUID.getGlobalCopyUID()) && RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getFirstCopy(),copyUID.getGlobalCopyUID())) {              found=true;            }          }        } else {          if (RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getFirstCopy(),copyUID.getGlobalCopyUID()) || RecoverPointUtils.copiesEqual(linkstate.getGroupLinkUID().getSecondCopy(),copyUID.getGlobalCopyUID())) {            found=true;          }        }        if (!found) {          continue;        }        if (desiredPipeStates.contains(PipeState.ACTIVE.name())) {          if (linkstate.getPipeState().equals(PipeState.SNAP_IDLE)) {            linkstate.setPipeState(PipeState.ACTIVE);          }        }        PipeState pipeState=linkstate.getPipeState();        logger.info("Copy link state is " + pipeState.toString() + "; desired states are: "+ desiredPipeStates.toString());        if (desiredPipeStates.contains(pipeState.name())) {          logger.info("Copy link state matches the desired state.");          return;        } else {          logger.info("Copy link state is not in desired state. It is: " + pipeState.toString());          break;        }      }      logger.info("Copy link not in desired state.  Sleep 15 seconds and retry");      Thread.sleep(WAIT_FOR_LINKS_SLEEP_INTERVAL);    } catch (    FunctionalAPIActionFailedException_Exception e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }catch (    FunctionalAPIInternalError_Exception e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }catch (    InterruptedException e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }  }  throw RecoverPointException.exceptions.cgLinksFailedToBecomeActive(cgName);}  }
class C{  private OptionalLong(long value){  this.isPresent=true;  this.value=value;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isOneTouchExpandable(){  return oneTouchExpandable;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public <T>SmashRequest<T> add(SmashRequest<T> request){  return add(request,Looper.getMainLooper());}  }
class C{  public synchronized boolean isFrozen(){  for (  CandidatePair pair : this) {    if (pair.getState() != CandidatePairState.FROZEN)     return false;  }  return true;}  }
class C{  public void testDescriptorPersist(){  Buffer buffer=FileBuffer.allocate(file,SegmentDescriptor.BYTES);  SegmentDescriptor descriptor=SegmentDescriptor.builder(buffer).withId(2).withVersion(3).withIndex(1025).withMaxSegmentSize(1024 * 1024).withMaxEntries(2048).build();  Assert.assertEquals(descriptor.id(),2);  Assert.assertEquals(descriptor.version(),3);  Assert.assertEquals(descriptor.index(),1025);  Assert.assertEquals(descriptor.maxSegmentSize(),1024 * 1024);  Assert.assertEquals(descriptor.maxEntries(),2048);  buffer.close();  descriptor=new SegmentDescriptor(FileBuffer.allocate(file,SegmentDescriptor.BYTES));  Assert.assertEquals(descriptor.id(),2);  Assert.assertEquals(descriptor.version(),3);  Assert.assertEquals(descriptor.index(),1025);  Assert.assertEquals(descriptor.maxSegmentSize(),1024 * 1024);}  }
class C{  private void processAnsiCommand_m(){  if (ansiParameters[0].length() == 0) {    ansiParameters[0].append('0');  }}  }
class C{  public AccessTokensBuilder tokenRefresherMcbConfig(MCBConfig config){  checkLock();  this.tokenRefresherMcbConfig=notNull("tokenRefresherMcbConfig",config);  return this;}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public static boolean isBetweenExclusive(long min,long i,long max){  return (i > min) && (i < max);}  }
class C{  public void failoverCopyTestCancel(RPCopyRequestParams copyToFailoverTo) throws RecoverPointException {  RecoverPointVolumeProtectionInfo failoverCopyInfo=copyToFailoverTo.getCopyVolumeInfo();  resumeTransfer(failoverCopyInfo);  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.disableCopyImage(functionalAPI,copyToFailoverTo);}  }
class C{  private static SupportedGroup negotiateNamedCurve(ClientHello clientHello){  SupportedGroup result=null;  List<SupportedGroup> preferredGroups=SupportedGroup.getPreferredGroups();  SupportedEllipticCurvesExtension extension=clientHello.getSupportedEllipticCurvesExtension();  if (extension == null) {    if (!preferredGroups.isEmpty()) {      result=preferredGroups.get(0);    }  } else {    for (    Integer preferredGroupId : extension.getSupportedGroupIds()) {      SupportedGroup group=SupportedGroup.fromId(preferredGroupId);      if (group != null && group.isUsable() && preferredGroups.contains(group)) {        result=group;        break;      }    }  }  return result;}  }
class C{  public long parseLong(String localeFormattedLong){  return Long.parseLong(localeFormattedLong);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public GroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  private static Directives directiveWithoutAccessToken(){  return new Directives().add("OAuth").add("token_type").set("bearer").up().add("scope").set("repo,gist").up();}  }
class C{  public ParticleSystem addModifier(ParticleModifier modifier){  mModifiers.add(modifier);  return this;}  }
class C{  public void dispatchOnCreate(){  mApplication=mActivity.getFiretweetApplication();  mTwitterWrapper=mApplication.getTwitterWrapper();  mMultiSelectManager=mApplication.getMultiSelectManager();}  }
class C{  public void preInit(){  registerMinecraftToNOVA();  registerNOVAToMinecraft();}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  private static List<LineInfo> collectIndentsGreaterOrEqualToCurrent(@NotNull ChangeIndentContext context,int targetLine){  List<LineInfo> result=new ArrayList<LineInfo>();  int targetLineIndent=getLineIndent(context,targetLine);  int indentUsedLastTime=Integer.MAX_VALUE;  for (int i=targetLine - 1; i >= 0 && indentUsedLastTime > targetLineIndent; i--) {    if (isLineContainsWhiteSpacesOnlyEmpty(context.document,i)) {      continue;    }    int indent=getLineIndent(context,i);    if (indent < targetLineIndent) {      break;    }    if (indent >= indentUsedLastTime) {      continue;    }    PsiElement element=context.file.findElementAt(context.document.getLineStartOffset(i) + indent);    if (element == null) {      continue;    }    ASTNode node=element.getNode();    result.add(new LineInfo(i,indent,COMPOUND_STATEMENT_TYPES.contains(node.getElementType())));    indentUsedLastTime=indent;  }  return result;}  }
class C{  public WhitenedPCA(){  this(50);}  }
class C{  public Complex minus(double a){  return subtract(this,a);}  }
class C{  public GetRequestMessage(GetRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }}  }
class C{  public boolean isOpen(){  return getMarketplace().isOpen();}  }
class C{  @Override public boolean onUnequipped(){  super.onUnequipped();  SlotOwner owner=this.getContainerOwner();  if (owner == null) {    return false;  }  Outfit noFlagOutfit=new Outfit(0,null,null,null,null);  RPEntity entity=(RPEntity)owner;  entity.setOutfit(noFlagOutfit.putOver(entity.getOutfit()));  return true;}  }
class C{  public String formatWwn(String wwn){  if (wwn == null || wwn.length() != 16) {    return wwn;  }  List<String> parts=new ArrayList<>();  for (int i=0; i < wwn.length(); i+=2) {    parts.add(wwn.substring(i,i + 2).toUpperCase());  }  return String.join(":",parts);}  }
class C{  public void emitMethods(JavaFileWriter writer) throws IOException {}  }
class C{  protected boolean checkOverride(MethodTree overriderTree,AnnotatedDeclaredType overridingType,AnnotatedExecutableType overridden,AnnotatedDeclaredType overriddenType,Void p){  AnnotatedExecutableType overrider=atypeFactory.getAnnotatedType(overriderTree);  if (overrider.getTypeVariables().isEmpty() && !overridden.getTypeVariables().isEmpty()) {    overridden=overridden.getErased();  }  OverrideChecker overrideChecker=new OverrideChecker(overriderTree,overrider,overridingType,overrider.getReturnType(),overridden,overriddenType,overridden.getReturnType());  return overrideChecker.checkOverride();}  }
class C{  public double evaluateModelOnce(double[] dist,Instance instance) throws Exception {  return evaluationForSingleInstance(dist,instance,false);}  }
class C{  private void execute(Stmt stmt,Value condVal,State state){  Block block=this.superControlFlowGraph.unitToBlock.get(stmt);  Body body=block.getBody();  SootMethod method=body.getMethod();  if (API.v().isSystemMethod(method))   return;  Stack<Value> valStack=new Stack<Value>();  Set<Immediate> allImmediates=new HashSet<Immediate>();  valStack.push(condVal);  while (!valStack.isEmpty()) {    Value topVal=valStack.pop();    if (topVal instanceof Immediate) {      allImmediates.add((Immediate)topVal);    } else     if (topVal instanceof BinopExpr) {      valStack.push(((BinopExpr)condVal).getOp1());      valStack.push(((BinopExpr)condVal).getOp2());    } else     if (topVal instanceof UnopExpr) {      valStack.push(((UnopExpr)condVal).getOp());    } else {      logger.error("What type of condition are we? {}",topVal.getClass());    }  }  Set<DominatorNode> siblings=this.superControlFlowGraph.pdmap.get(block);  if (siblings == null) {    DirectedSubgraph subGraph=new DirectedSubgraph(block);    PostDominatorTree pdomTree=new PostDominatorTree(subGraph);    siblings=pdomTree.siblingsOf(pdomTree.getDode(block));    this.superControlFlowGraph.pdmap.put(block,siblings);    if (Config.v().debug) {      File destDir=new File("./graphs");      try {        InfoBriefBlockGraph origGraph=new InfoBriefBlockGraph(body);        origGraph.toDotFile(method,destDir,"-orig",block);      } catch (      IOException e) {        e.printStackTrace();      }      try {        subGraph.toDotFile(body.getMethod(),destDir,"-sub",block);      } catch (      IOException e) {        e.printStackTrace();      }      try {        pdomTree.toDotFile(method,destDir,"-pdom",block,siblings);      } catch (      IOException e) {        e.printStackTrace();      }    }  }  for (  MethodOrMethodContext methodContext : PTABridge.v().getMethodContexts(method)) {    Context context=methodContext.context();    if (ignoreContext(context)) {      continue;    }    Set<InfoValue> contextValues=new HashSet<InfoValue>();    for (    Immediate immediate : allImmediates) {      ImmutableSet<InfoValue> condValues=evaluate(context,(Immediate)immediate,state.locals);      contextValues.addAll(condValues);    }    if (contextValues.isEmpty())     continue;    Set<MethodOrMethodContext> contexts=new HashSet<MethodOrMethodContext>();    for (    DominatorNode node : siblings) {      Block toBlock=(Block)node.getGode();      Map<Context,Set<InfoValue>> ctiv=state.iflows.get(toBlock);      if (ctiv == null) {        ctiv=new HashMap<Context,Set<InfoValue>>();        state.iflows.put(toBlock,ctiv);      }      Set<InfoValue> existingVals=ctiv.get(context);      if (existingVals == null) {        existingVals=new HashSet<InfoValue>();        ctiv.put(context,existingVals);      }      existingVals.addAll(contextValues);      for (      Unit unit : toBlock) {        Stmt stmt2=(Stmt)unit;        if (stmt2.containsInvokeExpr()) {          for (          Edge edge : PTABridge.v().outgoingEdges(methodContext,stmt2)) {            MethodOrMethodContext target=edge.getTgt();            if (API.v().isSystemMethod(target.method()))             continue;            contexts.add(target);            TransitiveTargets tt=new TransitiveTargets(Scene.v().getCallGraph());            Iterator<MethodOrMethodContext> iter=tt.iterator(target);            while (iter.hasNext()) {              MethodOrMethodContext mc=iter.next();              if (API.v().isSystemMethod(mc.method()))               continue;              contexts.add(mc);            }          }        }      }    }    for (    MethodOrMethodContext reachableMethod : contexts) {      Context calleeContext=reachableMethod.context();      if (ignoreContext(calleeContext)) {        continue;      }      Body body2=reachableMethod.method().retrieveActiveBody();      Iterator<Unit> iter=body2.getUnits().snapshotIterator();      while (iter.hasNext()) {        Stmt stmt2=(Stmt)iter.next();        Block calleeBlock=this.superControlFlowGraph.unitToBlock.get(stmt2);        Map<Context,Set<InfoValue>> ctiv=state.iflows.get(calleeBlock);        if (ctiv == null) {          ctiv=new HashMap<Context,Set<InfoValue>>();          state.iflows.put(calleeBlock,ctiv);        }        Set<InfoValue> existingValsCalleeBlockContext=ctiv.get(calleeContext);        if (existingValsCalleeBlockContext == null) {          existingValsCalleeBlockContext=new HashSet<InfoValue>();          ctiv.put(calleeContext,existingValsCalleeBlockContext);        }        existingValsCalleeBlockContext.addAll(contextValues);      }    }  }}  }
class C{  public final void remove(Action actionToRemove){  int index;  for (  Action action : actionList) {    if (action.equals(actionToRemove)) {      index=actionList.indexOf(action);      actionList.remove(action);      constraintsList.remove(index);      needSorting=true;      return;    }  }}  }
class C{  static void multiply(float dest[],float[] a,float[] b){  dest[0]=b[0] * a[0] + b[1] * a[3] + b[2] * a[6];  dest[1]=b[0] * a[1] + b[1] * a[4] + b[2] * a[7];  dest[2]=b[0] * a[2] + b[1] * a[5] + b[2] * a[8];  dest[3]=b[3] * a[0] + b[4] * a[3] + b[5] * a[6];  dest[4]=b[3] * a[1] + b[4] * a[4] + b[5] * a[7];  dest[5]=b[3] * a[2] + b[4] * a[5] + b[5] * a[8];  dest[6]=b[6] * a[0] + b[7] * a[3] + b[8] * a[6];  dest[7]=b[6] * a[1] + b[7] * a[4] + b[8] * a[7];  dest[8]=b[6] * a[2] + b[7] * a[5] + b[8] * a[8];}  }
class C{  private void replaceFragment(final Fragment fragment){  mFragmentManager.beginTransaction().replace(mDefaultContainer,fragment,getName(fragment)).commit();  mFragmentManager.executePendingTransactions();}  }
class C{  public static boolean isTypeDeclaration(Tree node){switch (node.getKind()) {case ANNOTATION_TYPE:case CLASS:case ENUM:case INTERFACE:case TYPE_PARAMETER:    return true;default :  return false;}}  }
class C{  public void copyBytes(long src,long dest,int len){  assert src < dest;  long end=src + len;  int blockIndex=(int)(end >> blockBits);  int downTo=(int)(end & blockMask);  if (downTo == 0) {    blockIndex--;    downTo=blockSize;  }  byte[] block=blocks.get(blockIndex);  while (len > 0) {    if (len <= downTo) {      writeBytes(dest,block,downTo - len,len);      break;    } else {      len-=downTo;      writeBytes(dest + len,block,0,downTo);      blockIndex--;      block=blocks.get(blockIndex);      downTo=blockSize;    }  }}  }
class C{  private JavaFileObject withSemicolonAfterCursor(JavaFileObject file,Path path,long cursor){  try (Reader reader=file.openReader(true)){    StringBuilder acc=new StringBuilder();    for (int i=0; i < cursor; i++) {      int next=reader.read();      if (next == -1)       throw new RuntimeException("End of file " + file + " before cursor "+ cursor);      acc.append((char)next);    }    acc.append(";");    for (int next=reader.read(); next > 0; next=reader.read()) {      acc.append((char)next);    }    return new StringFileObject(acc.toString(),path);  } catch (  IOException e) {    throw ShowMessageException.error("Error reading " + file,e);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isLinkedUser(){  try {    return mService.isRestricted();  } catch (  RemoteException re) {    Log.w(TAG,"Could not check if user is limited ",re);    return false;  }}  }
class C{  @Override public int[] executeBatch() throws SQLException {  checkClose();  batchResultSet=null;  int queryParameterSize=queryParameters.size();  if (queryParameterSize == 0)   return new int[0];  lock.lock();  executing=true;  QueryException exception=null;  MultiFixedIntExecutionResult internalExecutionResult=null;  try {    executeQueryProlog(serverPrepareResult);    try {      internalExecutionResult=new MultiFixedIntExecutionResult(this,queryParameterSize,0,false);      executeBatchInternal(internalExecutionResult,queryParameterSize);    } catch (    QueryException queryException) {      internalExecutionResult.fixStatsError(queryParameterSize);      exception=queryException;    } finally {      executionResult=internalExecutionResult;      executeQueryEpilog(exception);      executing=false;    }    clearBatch();    return internalExecutionResult.getAffectedRows();  } catch (  PrepareSqlException p) {    throw p;  }catch (  SQLException sqle) {    clearBatch();    throw new BatchUpdateException(sqle.getMessage(),sqle.getSQLState(),sqle.getErrorCode(),internalExecutionResult.getAffectedRows(),sqle);  } finally {    lock.unlock();  }}  }
class C{  private void printResults(IR ir){  if (forward) {    System.out.println("Results of dominators computation for method " + ir.method.getName() + "\n");    System.out.println("   Here's the CFG:");    System.out.println(ir.cfg);    System.out.println("\n\n  Here's the Dominator Info:");  } else {    System.out.println("Results of Post-Dominators computation for method " + ir.method.getName() + "\n");    System.out.println("   Here's the CFG:");    System.out.println(ir.cfg);    System.out.println("\n\n  Here's the Post-Dominator Info:");  }  for (Enumeration<BasicBlock> bbEnum=cfg.basicBlocks(); bbEnum.hasMoreElements(); ) {    BasicBlock block=bbEnum.nextElement();    if (!forward || !block.isExit()) {      System.out.println("Dominators of " + block + ":"+ LTDominatorInfo.getInfo(block,ir).dominators(block,ir));    }  }  System.out.println('\n');}  }
class C{  public static boolean isSynchronized(int flags){  return (flags & SYNCHRONIZED) != 0;}  }
class C{  public void declareDimension(final int dimensionType,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  this.scales[dimensionType]=Math.max(1,scale);  this.pixels[dimensionType]=pixelperscale;  this.offsets[dimensionType]=offset;  this.colnames[dimensionType]=colorNaming;  this.colscale[dimensionType]=colorScale;  this.tablenames[dimensionType]=name;  if ((dimensionType == DIMENSION_LEFT) || (dimensionType == DIMENSION_RIGHT)) {    drawVerticalScale((dimensionType == DIMENSION_LEFT),scale,pixelperscale,offset,colorNaming,colorScale,name);  }  if ((dimensionType == DIMENSION_TOP) || (dimensionType == DIMENSION_BOTTOM)) {    drawHorizontalScale((dimensionType == DIMENSION_TOP),scale,pixelperscale,offset,colorNaming,colorScale,name);  }}  }
class C{  public EventStoreBuilder clusterNodeDiscoveryFromDns(String dns){  clusterNodeDiscoveryFromDns=dns;  return this;}  }
class C{  public BasicStatusLine(final ProtocolVersion version,int statusCode,final String reasonPhrase){  super();  if (version == null) {    throw new IllegalArgumentException("Protocol version may not be null.");  }  if (statusCode < 0) {    throw new IllegalArgumentException("Status code may not be negative.");  }  this.protoVersion=version;  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;}  }
class C{  public static CCRotateTo action(float duration,float ang){  return new CCRotateTo(duration,ang);}  }
class C{  public void clear(){  getAllAttributes().clear();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  CountKeyVal<String,Double> oper=new CountKeyVal<String,Double>();  CollectorTestSink countSink=new CollectorTestSink();  oper.count.setSink(countSink);  oper.beginWindow(0);  oper.data.process(new KeyValPair("a",2.0));  oper.data.process(new KeyValPair("b",20.0));  oper.data.process(new KeyValPair("c",1000.0));  oper.data.process(new KeyValPair("a",1.0));  oper.data.process(new KeyValPair("a",10.0));  oper.data.process(new KeyValPair("b",5.0));  oper.data.process(new KeyValPair("d",55.0));  oper.data.process(new KeyValPair("b",12.0));  oper.data.process(new KeyValPair("d",22.0));  oper.data.process(new KeyValPair("d",14.2));  oper.data.process(new KeyValPair("d",46.0));  oper.data.process(new KeyValPair("e",2.0));  oper.data.process(new KeyValPair("a",23.0));  oper.data.process(new KeyValPair("d",4.0));  oper.endWindow();  Assert.assertEquals("number emitted tuples",5,countSink.collectedTuples.size());  for (  Object o : countSink.collectedTuples) {    KeyValPair<String,Integer> e=(KeyValPair<String,Integer>)o;    Integer val=(Integer)e.getValue();    if (e.getKey().equals("a")) {      Assert.assertEquals("emitted value for 'a' was ",4,val.intValue());    } else     if (e.getKey().equals("b")) {      Assert.assertEquals("emitted tuple for 'b' was ",3,val.intValue());    } else     if (e.getKey().equals("c")) {      Assert.assertEquals("emitted tuple for 'c' was ",1,val.intValue());    } else     if (e.getKey().equals("d")) {      Assert.assertEquals("emitted tuple for 'd' was ",5,val.intValue());    } else     if (e.getKey().equals("e")) {      Assert.assertEquals("emitted tuple for 'e' was ",1,val.intValue());    }  }}  }
class C{  public int stem(char s[],int len){  int numVowels=numVowels(s,len);  for (int i=0; i < affixes.length; i++) {    Affix affix=affixes[i];    if (numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s,len,affix.affix)) {      len-=affix.affix.length;      return affix.palatalizes ? unpalatalize(s,len) : len;    }  }  return len;}  }
class C{  static public boolean selectSocks5Authentication(InputStream in,OutputStream out,int methodId) throws IOException {  int num_methods=in.read();  if (num_methods <= 0)   return false;  byte method_ids[]=new byte[num_methods];  byte response[]=new byte[2];  boolean found=false;  response[0]=(byte)5;  response[1]=(byte)0xFF;  int bread=0;  while (bread < num_methods)   bread+=in.read(method_ids,bread,num_methods - bread);  for (int i=0; i < num_methods; ++i)   if (method_ids[i] == methodId) {    found=true;    response[1]=(byte)methodId;    break;  }  out.write(response);  return found;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void animateToProjectedState(float velocity){  final float kickY=calculateAnimationDisplacement(velocity,BASE_ANIMATION_DURATION_MS);  final float projectedHeight=getHeight() - kickY;  PanelState projectedState=findNearestPanelStateFromHeight(projectedHeight);  if (projectedState == PanelState.MAXIMIZED && getPanelState() == PanelState.PEEKED && isPromoAvailable() && isFullscreenSizePanel()) {    projectedState=PanelState.EXPANDED;  }  final float displacement=getPanelHeightFromState(projectedState) - getHeight();  final long duration=calculateAnimationDuration(velocity,displacement);  animatePanelToState(projectedState,StateChangeReason.FLING,duration);}  }
class C{  public void testStandard() throws Exception {  Input keys[]=new Input[]{new Input("the ghost of christmas past",50)};  Analyzer standard=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,MockTokenFilter.ENGLISH_STOPSET);  Directory tempDir=getDirectory();  FuzzySuggester suggester=new FuzzySuggester(tempDir,"fuzzy",standard,standard,AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP,256,-1,false,FuzzySuggester.DEFAULT_MAX_EDITS,FuzzySuggester.DEFAULT_TRANSPOSITIONS,FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX,FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH,FuzzySuggester.DEFAULT_UNICODE_AWARE);  suggester.build(new InputArrayIterator(keys));  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("the ghost of chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ghost of chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ghost chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  IOUtils.close(standard,tempDir);}  }
class C{  DateRange buildShiftedRange(DateRange rawRange,long cadence,long now){  if (rawRange.getStart() > now) {    throw new IllegalArgumentException("start is greater than now");  }  final DateRange rounded=rawRange.rounded(cadence);  final long nowDelta=now - rounded.getEnd();  if (nowDelta > SHIFT_TOLERANCE) {    return rounded;  }  final long diff=Math.abs(Math.min(nowDelta,0)) + SHIFT_TOLERANCE;  return rounded.shift(-toleranceShiftPeriod(diff,cadence));}  }
class C{  public long endTimeMs(){  return _endTimeMs;}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  synchronized void receivedLast(){  closedByWriter=true;  notifyAll();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  getMultiplicity_1().addAll((Collection<? extends Multiplicity_>)newValue);return;case UmplePackage.ASSOCIATION_END___TYPE_1:setType_1((String)newValue);return;case UmplePackage.ASSOCIATION_END___ROLE_NAME_1:setRoleName_1((String)newValue);return;case UmplePackage.ASSOCIATION_END___IS_SORTED_1:getIsSorted_1().clear();getIsSorted_1().addAll((Collection<? extends IsSorted_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @CallSuper public void onViewModelCreated(){  mUiThread=Thread.currentThread();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SINGLE_IS_A__EXTENDS_NAME_1:    setExtendsName_1((String)newValue);  return;case UmplePackage.SINGLE_IS_A__ANONYMOUS_SINGLE_IS_A11:getAnonymous_singleIsA_1_1().clear();getAnonymous_singleIsA_1_1().addAll((Collection<? extends Anonymous_singleIsA_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public final void testDEFAULTmgfName(){  assertEquals("MGF1",PSSParameterSpec.DEFAULT.getMGFAlgorithm());}  }
class C{  public void sample(long nanosTimeStamp){  final boolean isDebugEnabled_STATISTICS=logger.isTraceEnabled(LogMarker.STATISTICS);  if (isDebugEnabled_STATISTICS) {    logger.trace(LogMarker.STATISTICS,"SampleCollector#sample nanosTimeStamp={}",nanosTimeStamp);  }  List<MarkableSampleHandler> handlers=this.sampleHandlers.currentHandlers();  if (isDebugEnabled_STATISTICS) {    logger.trace(LogMarker.STATISTICS,"SampleCollector#sample handlers={}",handlers);  }  sampleResources(handlers);  List<ResourceInstance> updatedResources=new ArrayList<ResourceInstance>();  for (  ResourceInstance ri : this.resourceInstMap.values()) {    StatisticDescriptor[] stats=ri.getResourceType().getStatisticDescriptors();    if (ri.getStatistics().isClosed()) {      continue;    }    int[] updatedStats=new int[stats.length];    long[] statValues=ri.getPreviousStatValues();    if (statValues == null) {      statValues=new long[stats.length];      for (int i=0; i < stats.length; i++) {        statValues[i]=ri.getRawStatValue(stats[i]);        updatedStats[i]=i;      }    } else {      statValues=Arrays.copyOf(statValues,statValues.length);      int updatedStatsIdx=0;      for (int i=0; i < stats.length; i++) {        long value=ri.getRawStatValue(stats[i]);        if (value != statValues[i]) {          statValues[i]=value;          updatedStats[updatedStatsIdx]=i;          updatedStatsIdx++;        }      }      updatedStats=Arrays.copyOf(updatedStats,updatedStatsIdx);    }    ri.setUpdatedStats(updatedStats);    ri.setLatestStatValues(statValues);    updatedResources.add(ri);  }  try {    notifyAllHandlersOfSample(handlers,updatedResources,nanosTimeStamp);  } catch (  IllegalArgumentException e) {    logger.warn(LogMarker.STATISTICS,"Use of java.lang.System.nanoTime() resulted in a non-positive timestamp delta. Skipping notification of statistics sample.",e);  }  for (  ResourceInstance ri : updatedResources) {    ri.setPreviousStatValues(ri.getLatestStatValues());  }}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=ArrayUtils.clone(translators);}  }
class C{  public String toStringCompact(){  return imgInfo.toStringBrief() + (interlaced ? "i" : "");}  }
class C{  protected Element parseTag(Reader is) throws IOException {  StringBuilder tagName=new StringBuilder();  StringBuilder curAttribute=new StringBuilder();  StringBuilder curValue=new StringBuilder();  char c=(char)read(is);  if (c == '/') {    return END_TAG;  } else   if (c == '!') {    c=(char)read(is);    char c2=(char)read(is);    if ((c == '-') && (c2 == '-')) {      return parseCommentOrXMLDeclaration(is,"-->");    } else     if ((c == '[') && (c2 == 'C')) {      c=(char)read(is);      int idx=0;      int clen=CDATA_STR.length();      while ((idx < clen) && (c == CDATA_STR.charAt(idx))) {        idx++;        if (idx < clen) {          c=(char)read(is);        }      }      if (idx == clen) {        return parseCommentOrXMLDeclaration(is,"]]>");      } else {        return parseCommentOrXMLDeclaration(is,">");      }    } else {      return parseCommentOrXMLDeclaration(is,">");    }  } else   if (c == '?') {    return parseCommentOrXMLDeclaration(is,">");  }  while (isWhiteSpace(c)) {    c=(char)read(is);  }  while ((!isWhiteSpace(c)) && (c != '>') && (c != '/')) {    if (eventParser == false) {      if (!caseSensitive) {        c=Character.toLowerCase(c);      }    }    tagName.append(c);    int i=read(is);    if (i == -1) {      return END_TAG;    }    c=(char)i;  }  while (isWhiteSpace(c)) {    c=(char)read(is);  }  boolean processTag=true;  String tn=tagName.toString();  if (eventParser) {    processTag=startTag(tn);  }  Element element=null;  if (!eventParser) {    element=createNewElement(tn);  }  if (!processTag || !isSupported(element)) {    notifyError(ParserCallback.ERROR_TAG_NOT_SUPPORTED,tn,null,null,"The tag '" + tn + "' is not supported in "+ getSupportedStandardName());    if (!processTag || !shouldEvaluate(element)) {      char lastChar=c;      while (c != '>') {        lastChar=c;        int i=read(is);        if (i == -1) {          return END_TAG;        }        c=(char)i;      }      if (lastChar != '/') {        String endTag=new StringBuilder().append('<').append('/').append(tagName).append('>').toString();        int index=0;        int elen=endTag.length();        while (index < elen) {          int i=read(is);          if (i == -1) {            return END_TAG;          }          c=(char)i;          if ((c >= 'A') && (c <= 'Z')) {            c=(char)(c - 'A' + 'a');          }          if (c == endTag.charAt(index)) {            index++;          } else {            index=0;          }        }      }      return element;    }  }  if (c == '>') {    if (!isEmptyTag(tn)) {      parseTagContent(element,is);    }    return element;  } else   if (c == '/') {    c=(char)read(is);    if (c == '>') {      if (eventParser) {        endTag(tn);      }      return element;    } else {      notifyError(ParserCallback.ERROR_UNEXPECTED_CHARACTER,tn,null,null,"XML malformed - no > after /");    }  }  while (true) {    curAttribute.delete(0,curAttribute.length()).append(c);    c=(char)read(is);    while ((!isWhiteSpace(c)) && (c != '=') && (c != '>')) {      if (eventParser == false) {        if (!caseSensitive) {          c=Character.toLowerCase(c);        }      }      curAttribute.append(c);      c=(char)read(is);    }    if (c == '>') {      notifyError(ParserCallback.ERROR_UNEXPECTED_TAG_CLOSING,tn,curAttribute.toString(),null,"Unexpected tag closing in tag " + tagName + ", attribute="+ curAttribute);      if (!isEmptyTag(tn)) {        parseTagContent(element,is);      }      return element;    }    while (isWhiteSpace(c)) {      c=(char)read(is);    }    if (c != '=') {      notifyError(ParserCallback.ERROR_UNEXPECTED_CHARACTER,tn,curAttribute.toString(),null,"Unexpected character " + c + ", expected '=' after attribute "+ curAttribute.toString()+ " in tag "+ tagName);      if (c == '>') {        if (!isEmptyTag(tn)) {          parseTagContent(element,is);        }        return element;      }      continue;    }    c=(char)read(is);    while (isWhiteSpace(c)) {      c=(char)read(is);    }    char quote=' ';    if ((c == '"') || (c == '\'')) {      quote=c;    } else {      curValue.append(c);    }    StringBuilder charEntity=null;    boolean ended=false;    while (!ended) {      int i=read(is);      if (i < 0) {        return END_TAG;      }      c=(char)i;      if (c == quote) {        ended=true;        i=read(is);        if (i < 0) {          return END_TAG;        }        c=(char)i;      } else       if ((quote == ' ') && ((c == '/') || (c == '>') || (isWhiteSpace(c)))) {        ended=true;      } else       if (c == '&') {        if (charEntity != null) {          curValue.append('&').append(charEntity);        }        charEntity=new StringBuilder();      } else {        if (charEntity != null) {          if (c == ';') {            curValue.append(convertCharEntity(charEntity.toString()));            charEntity=null;          } else           if (isLegalCharEntityCharacter(c)) {            charEntity.append(c);          } else {            curValue.append('&').append(charEntity).append(c);            charEntity=null;          }        } else {          curValue.append(c);        }      }    }    if (charEntity != null) {      curValue.append('&').append(charEntity);      charEntity=null;    }    if (eventParser) {      attribute(tn,curAttribute.toString(),curValue.toString());    } else {      int error=element.setAttribute(curAttribute.toString(),curValue.toString());      if (error == ParserCallback.ERROR_ATTRIBUTE_NOT_SUPPORTED) {        notifyError(error,tn,curAttribute.toString(),curValue.toString(),"Attribute '" + curAttribute + "' is not supported for tag '"+ tagName+ "'.");      } else       if (error == ParserCallback.ERROR_ATTIBUTE_VALUE_INVALID) {        notifyError(error,tn,curAttribute.toString(),curValue.toString(),"Attribute '" + curAttribute + "' in tag '"+ tn+ "' has an invalid value ("+ curValue.toString()+ ")");      }    }    while (isWhiteSpace(c)) {      int i=read(is);      if (i < 0) {        return END_TAG;      }      c=(char)i;    }    if (c == '>') {      if (!isEmptyTag(tn)) {        parseTagContent(element,is);      }      return element;    } else     if (c == '/') {      int i=read(is);      if (i < 0) {        return END_TAG;      }      c=(char)i;      if (c == '>') {        if (eventParser) {          endTag(tn);        }        return element;      } else {        notifyError(ParserCallback.ERROR_UNEXPECTED_CHARACTER,tn,curAttribute.toString(),curValue.toString(),"XML malformed - no > after /");      }    }    curValue=curValue.delete(0,curValue.length());  }}  }
class C{  public static Provider isSupport(String algorithm,String service){  try {    Provider[] provs=Security.getProviders(service.concat(".").concat(algorithm));    if (provs == null) {      return null;    }    return (provs.length == 0 ? null : provs[0]);  } catch (  Exception e) {    return null;  }}  }
class C{  public FixedPartitionAttributesData[] listFixedPartitionAttributes(){  return null;}  }
class C{  @NonNull public static Date localDateToDate(@NonNull LocalDate localDate){  return localDateToDate(localDate,ZoneId.systemDefault());}  }
class C{  public NOP(){  super(Void.class);}  }
class C{  void redirectToErrorPage(HttpServletRequest httpRequest,HttpServletResponse httpResponse,String errorCode) throws IOException {  StringBuffer urlBuf=new StringBuffer();  urlBuf.append(httpRequest.getContextPath());  urlBuf.append("/public/reverseProxyError.jsf");  if (errorCode != null) {    urlBuf.append("?errorcode=");    urlBuf.append(errorCode);  }  httpResponse.sendRedirect(urlBuf.toString());}  }
class C{  public void addNamespacePrefix(String prefix,String namespace){  namespacePrefixes.put(prefix,namespace);}  }
class C{  @Override public void zoomIn(){  renderer.camera.zoom(true);}  }
class C{  public static void validateGx4(BigInteger gx4) throws CryptoException {  if (gx4.equals(ONE)) {    throw new CryptoException("g^x validation failed.  g^x should not be 1.");  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void failOnStart(final Throwable cause){  if (this.cache != null) {    this.cache.close();    this.cache=null;  }  if (this.process != null) {    this.process.stop();    this.process=null;  }  INSTANCE.compareAndSet(this,null);  this.running.set(false);}  }
class C{  public void concurrentCollectionPhase(short phaseId){  VM.assertions.fail("concurrentCollectionPhase triggered on StopTheWorld collector");}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(getRelation().toString());  buffer.append("-" + getLabel());  if (getFeature() != null)   buffer.append("-" + getFeature());  if (getHyphenTag() != null)   buffer.append("-" + getHyphenTag());  if (getPreposition() != null)   buffer.append("-" + getPreposition());  return buffer.toString();}  }
class C{  public boolean removeTaxon(Taxon taxon){  boolean success=taxa.remove(taxon);  if (success) {    fireTaxonRemoved(taxon);  }  return success;}  }
class C{  public static IJavaSearchScope createJavaSearchScope(IResource[] resources){  int length=resources.length;  IJavaElement[] elements=new IJavaElement[length];  for (int i=0; i < length; i++) {    elements[i]=JavaCore.create(resources[i]);  }  return createJavaSearchScope(elements);}  }
class C{  @SuppressWarnings("PMD.CloseResource") public AwsPolicyBuilder withS3(String bucketName,String objectKey,S3Actions... actions){  Statement statement=new Statement(Effect.Allow);  statement.setActions(Arrays.asList(actions));  String resource="arn:aws:s3:::" + bucketName;  if (objectKey != null) {    resource+="/" + objectKey;  }  statement.setResources(Arrays.asList(new Resource(resource)));  policy.getStatements().add(statement);  return this;}  }
class C{  public boolean isDatastorePrincipalSupported(){  return datastorePrincipalSupported;}  }
class C{  private void putDefault(UIDefaults table,String uiKey){  try {    String className="org.adempiere.plaf.Adempiere" + uiKey;    table.put(uiKey,className);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public RandomizedHoldout(RandomFactory random){  super();  this.random=random;}  }
class C{  static final void encode(byte[] src,int srcOff,int len,byte[] dst,int dstOff){  dst[dstOff]=(byte)ENCODE_TABLE.charAt((src[srcOff] >> 2) & 0x3F);  if (len == 3) {    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt(((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F));    dst[dstOff + 2]=(byte)ENCODE_TABLE.charAt(((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03));    dst[dstOff + 3]=(byte)ENCODE_TABLE.charAt(src[srcOff + 2] & 0x3F);  } else   if (len == 2) {    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt(((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F));    dst[dstOff + 2]=(byte)ENCODE_TABLE.charAt((src[srcOff + 1] << 2) & 0x3C);  } else {    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt((src[srcOff] << 4) & 0x30);  }}  }
class C{  private synchronized void resetChildPriorities(final boolean recursive){  if (null == m_children) {    return;  }  final Logger[] children=m_children;  for (int i=0; i < children.length; i++) {    children[i].resetPriority(recursive);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  EPGDataSource ds=cdi != null ? EPG.getInstance().getSourceForProviderID(cdi.getProviderID()) : null;  if (ds != null)   return ds.getName(); else   return null;}  }
class C{  public boolean parseSimpleList(BashPsiBuilder builder){  if (!parseList1(builder,true,true,RecursionGuard.initial())) {    return false;  }  final IElementType tokenType=builder.getTokenType();  if (tokenType != null && (tokenType == AMP || tokenType == SEMI)) {    builder.advanceLexer();  }  return true;}  }
class C{  public static boolean isResourceOnClasspath(IJavaProject javaProject,IPath resourcePath) throws JavaModelException {  String pckg=JavaUtilities.getPackageNameFromPath(resourcePath.removeLastSegments(1));  String fileName=resourcePath.lastSegment();  for (  IPackageFragment pckgFragment : JavaModelSearch.getPackageFragments(javaProject,pckg)) {    if (ClasspathResourceUtilities.isFileOnPackageFragment(fileName,pckgFragment)) {      return true;    }  }  return false;}  }
class C{  protected SettableBeanProperty constructSetterlessProperty(DeserializationConfig config,BasicBeanDescription beanDesc,String name,AnnotatedMethod getter) throws JsonMappingException {  if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {    getter.fixAccess();  }  JavaType type=getter.getType(beanDesc.bindingsForBeanType());  BeanProperty.Std property=new BeanProperty.Std(name,type,beanDesc.getClassAnnotations(),getter);  JsonDeserializer<Object> propDeser=findDeserializerFromAnnotation(config,getter,property);  type=modifyTypeByAnnotation(config,getter,type,name);  TypeDeserializer typeDeser=type.getTypeHandler();  SettableBeanProperty prop=new SettableBeanProperty.SetterlessProperty(name,type,typeDeser,beanDesc.getClassAnnotations(),getter);  if (propDeser != null) {    prop=prop.withValueDeserializer(propDeser);  }  return prop;}  }
class C{  public CcdRunner(GraphWrapper graphWrapper,KnowledgeBoxModel knowledgeBoxModel,Parameters params){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public void applyChanges(){  String hostName=this.getHostName();  if (hostName == null) {    this.health.setDefaultGemFireHealthConfig(this);  } else {    this.health.setGemFireHealthConfig(hostName,this);  }}  }
class C{  public static boolean isPriceNull(String price){  String zeroPriceRgx="^[0]+\\.?[0]*$";  if (isBlank(price)) {    return true;  } else {    Pattern pattern=Pattern.compile(zeroPriceRgx);    Matcher matcher=pattern.matcher(price);    return matcher.find();  }}  }
class C{  @Override public void markerChanged(MarkerChangeEvent event){  this.lastEvent=event;}  }
class C{  public void send200OkReInviteResp(SipRequest request,String[] featureTags,String sdpResponse,int serviceContext) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("receiveReInvite()");  }  SipResponse resp=SipMessageFactory.create200OkReInviteResponse(mSession.getDialogPath(),request,featureTags,sdpResponse);  SipTransactionContext ctx=mSession.getImsService().getImsModule().getSipManager().sendSipMessageAndWait(resp);  if (ctx.isSipAck()) {    if (sLogger.isActivated()) {      sLogger.info("ACK request received");    }    mSession.handleReInviteAck(InvitationStatus.INVITATION_ACCEPTED,serviceContext);  } else {    if (sLogger.isActivated()) {      sLogger.debug("No ACK received for ReINVITE");    }    mSession.handleError(new ImsSessionBasedServiceError(ImsSessionBasedServiceError.SEND_RESPONSE_FAILED));  }}  }
class C{  @CanIgnoreReturnValue public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=createBuffer();  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  private <R>GridClientFutureAdapter<R> makeRequest(GridClientMessage msg,UUID destId,boolean keepBinaries) throws GridClientConnectionResetException, GridClientClosedException {  assert msg != null;  TcpClientFuture<R> res=new TcpClientFuture<>(false,keepBinaries);  msg.destinationId(destId);  return makeRequest(msg,res);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static void main(String[] args){  StraightLogic logic=new StraightLogic();  System.out.println("Against Random player");  GameController gc=new GameController(logic);  Player xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,4);  Player oPlayer=PlayerFactory.createPlayer(PlayerFactory.Random,Player.OMARK);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  tournament(gc,100);  System.out.println("Lookahead 4 vs. Lookahead 1");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,4);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.OMARK,1);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);  System.out.println("Lookahead 5 vs. Lookahead 2");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,5);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.OMARK,2);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);  System.out.println("Lookahead 3");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,3);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.OMARK,3);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);  System.out.println("Lookahead 4");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,4);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.OMARK,4);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);  System.out.println("Lookahead 4[X], 5[O]");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,5);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.OMARK,5);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);}  }
class C{  private void runScript() throws ScriptException, IOException {  lastReturnValue=null;  setLastThrownException(null);  if (script.getScriptFile() != null) {    lastReturnValue=script.getScriptEngine().eval(new InputStreamReader(FileUtils.loadFileByName(script.getScriptFile().getAbsolutePath())));    logger.debug("Script {} returned with value {}",script.getName(),lastReturnValue);  } else   if (script.getScriptContent() != null) {    lastReturnValue=script.getScriptEngine().eval(script.getScriptContent());    logger.debug("Inline script {} returned with value {}",script.getName(),lastReturnValue);  } else {    logger.warn("No script content defined for script {}",script.getName());  }  if (lastReturnValue == null) {    changeState(ScriptRunningState.FINISHED);  } else   if (lastReturnValue instanceof Boolean) {    if ((Boolean)lastReturnValue) {      changeState(ScriptRunningState.FINISHED);    } else {      changeState(ScriptRunningState.STOPPED);    }  } else {    changeState(ScriptRunningState.FINISHED);  }}  }
class C{  public AppUser findUserByName(String name){  if (name == null || name.isEmpty())   return null;  String username=name.trim().toLowerCase();  AppUser appUser=this.context.getUserManager().getUser(username);  if (appUser != null)   return appUser;  appUser=this.context.getUserManager().retrieveUserInfoFromMetaDB(username);  if (appUser != null)   this.context.getUserManager().addUser(appUser);  return appUser;}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(Iterable<? extends T> initialContents){  MinMaxPriorityQueue<T> queue=new MinMaxPriorityQueue<T>(this,initialQueueSize(expectedSize,maximumSize,initialContents));  for (  T element : initialContents) {    queue.offer(element);  }  return queue;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.SCOPE__DECLARATIONS:    return getDeclarations();case SGraphPackage.SCOPE__EVENTS:  return getEvents();case SGraphPackage.SCOPE__VARIABLES:return getVariables();case SGraphPackage.SCOPE__REACTIONS:return getReactions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public FunctionBlockMappingModel createFunctionBlockMappingModel(){  FunctionBlockMappingModelImpl functionBlockMappingModel=new FunctionBlockMappingModelImpl();  return functionBlockMappingModel;}  }
class C{  public ArrayLongCompressed(long[] longs){  this(longs,0,longs.length);}  }
class C{  public void testSimpleSetterlessCollectionFailure() throws Exception {  ObjectMapper m=new ObjectMapper();  assertTrue(m.getDeserializationConfig().isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS));  m.configure(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS,false);  assertFalse(m.getDeserializationConfig().isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS));  try {    m.readValue("{\"values\":[ \"abc\", \"def\" ]}",CollectionBean.class);    fail("Expected an exception");  } catch (  JsonMappingException e) {    verifyException(e,"Unrecognized field");  }}  }
class C{  public String toString(){  Matrix W=getW();  return MatrixUtils.toString(W);}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  aTarget.addChildren(getPage(),FeedbackPanel.class);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == 0) {    aTarget.appendJavaScript("alert('This is the first document!')");  } else {    bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex - 1).getName());    bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex - 1));    try {      repository.upgradeCasAndSave(bModel.getDocument(),Mode.AUTOMATION,bModel.getUser().getUsername());      loadDocumentAction(aTarget);      setCurationSegmentBeginEnd();      update(aTarget);    } catch (    UIMAException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    ClassNotFoundException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    IOException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    BratAnnotationException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }    finish.setModelObject(bModel);    aTarget.add(finish.setOutputMarkupId(true));    aTarget.add(numberOfPages);    aTarget.add(documentNamePanel);    annotator.bratRenderLater(aTarget);  }}  }
class C{  public Iterable<String> dedupe(Iterable<String> iterableWithDupes,Integer threshold,Function<tuple3<String,String,Boolean>,Integer> scorer){  if (threshold == null) {    threshold=70;  }  list<String> extractor=x.list();  for (  String element : iterableWithDupes) {    list<tuple2<String,Integer>> matches=extract(element,iterableWithDupes,null,scorer,null);    list<tuple2<String,Integer>> filtered=x.list(x.<tuple2<String,Integer>>yield().forEach(matches).when(x.lambdaP("x[1] >" + threshold)));    if (x.len(filtered) == 1) {      extractor.append(filtered.get(0).key);    } else {      filtered=x.list(x.sort(filtered,x.<Integer>lambdaF("x : x[0]")));      list<tuple2<String,Integer>> filter_sort=x.list(x.sort(filtered,x.<Integer>lambdaF("x : f0(x[0])",x.len),true));      extractor.append(filter_sort.get(0).key);    }  }  dict<Integer> keys=x.dict();  for (  String e : extractor) {    keys.setAt(e).value(1);  }  extractor=keys.keys();  if (x.len(extractor) == x.len(iterableWithDupes))   return iterableWithDupes; else   return extractor;}  }
class C{  @Restricted(NoExternalUse.class) @CheckForNull public static String expandAll(String content,Run<?,?> run,TaskListener listener) throws IOException, InterruptedException {  if (isEmpty(content)) {    return content;  }  String body=run.getEnvironment(listener).expand(content);  if (run instanceof AbstractBuild<?,?>) {    final AbstractBuild<?,?> build=(AbstractBuild<?,?>)run;    body=Util.replaceMacro(body,build.getBuildVariableResolver());    try {      Jenkins jenkins=Jenkins.getActiveInstance();      ClassLoader uberClassLoader=jenkins.pluginManager.uberClassLoader;      List macros=null;      if (nonNull(jenkins.getPlugin("token-macro"))) {        if (nonNull(jenkins.getPlugin("email-ext"))) {          Class<?> contentBuilderClazz=uberClassLoader.loadClass("hudson.plugins.emailext.plugins.ContentBuilder");          Method getPrivateMacrosMethod=contentBuilderClazz.getDeclaredMethod("getPrivateMacros");          macros=new ArrayList((Collection)getPrivateMacrosMethod.invoke(null));        }        Class<?> tokenMacroClazz=uberClassLoader.loadClass("org.jenkinsci.plugins.tokenmacro.TokenMacro");        Method tokenMacroExpand=tokenMacroClazz.getDeclaredMethod("expand",AbstractBuild.class,TaskListener.class,String.class,boolean.class,List.class);        body=(String)tokenMacroExpand.invoke(null,build,listener,body,false,macros);      }    } catch (    ClassNotFoundException e) {      LOGGER.error("Can't find class",e);    }catch (    NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {      LOGGER.error("Can't evaluate macro",e);    }  }  return body;}  }
class C{  public final void remove(Object key){  if (put(key,NULL,true) != NULL) {    _size--;  }}  }
class C{  public SelectionColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable String name){  this(editor,key,name,null);}  }
class C{  public MorfologikAnalyzer(){  this(new PolishStemmer().getDictionary());}  }
class C{  private boolean waitForDownloadOrTimeoutNoThrow(long id,long poll,long timeoutMillis){  try {    doWaitForDownloadsOrTimeout(new Query().setFilterById(id),poll,timeoutMillis);    waitForReceiverNotifications(1);  } catch (  TimeoutException e) {    return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void extractKeys(Properties props){  String keyspec=props.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_IN_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_IN_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_IN,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_IN_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_IN_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_IN,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_OUT_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_OUT_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_OUT,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_OUT_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.PLASMA_BACKEND_KAFKA_OUT_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_OUT,key);  }  if (null != this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_IN) && null != this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_OUT)) {    if (0 == Bytes.compareTo(this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_IN),this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_OUT))) {      this.identicalSipHashKeys=true;    }  } else   if (null == this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_IN) && null == this.keystore.getKey(KeyStore.SIPHASH_KAFKA_PLASMA_BACKEND_OUT)) {    this.identicalSipHashKeys=true;  } else {    this.identicalSipHashKeys=false;  }  if (null != this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_IN) && null != this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_OUT)) {    if (0 == Bytes.compareTo(this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_IN),this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_OUT))) {      this.identicalAESKeys=true;    }  } else   if (null == this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_IN) && null == this.keystore.getKey(KeyStore.AES_KAFKA_PLASMA_BACKEND_OUT)) {    this.identicalAESKeys=true;  } else {    this.identicalAESKeys=false;  }}  }
class C{  @Override public boolean okPressed(){  World.getInstance().getLighting().setBackgroundColor(bgCol);  return (true);}  }
class C{  public boolean matches(InventoryCrafting p_77569_1_,World p_77569_2_){  for (int i=0; i <= 5 - this.recipeWidth; ++i) {    for (int j=0; j <= 5 - this.recipeHeight; ++j) {      if (this.checkMatch(p_77569_1_,i,j,true)) {        return true;      }      if (this.checkMatch(p_77569_1_,i,j,false)) {        return true;      }    }  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR:  return getOperator();case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof Geofence))   return false;  Geofence other=(Geofence)obj;  if (mRadius != other.mRadius)   return false;  if (mLatitude != other.mLatitude)   return false;  if (mLongitude != other.mLongitude)   return false;  if (mType != other.mType)   return false;  return true;}  }
class C{  public void clearUpdated(){  updated=false;  for (int i=0; i < numCols; i++) {    currentVals[i]=null;    colsChanged.clear(i);  }}  }
class C{  public static final double calcNiceNumber(final double RANGE,final boolean ROUND){  double niceFraction;  double exponent=Math.floor(Math.log10(RANGE));  double fraction=RANGE / Math.pow(10,exponent);  if (ROUND) {    if (Double.compare(fraction,1.5) < 0) {      niceFraction=1;    } else     if (Double.compare(fraction,3) < 0) {      niceFraction=2;    } else     if (Double.compare(fraction,7) < 0) {      niceFraction=5;    } else {      niceFraction=10;    }  } else {    if (Double.compare(fraction,1) <= 0) {      niceFraction=1;    } else     if (Double.compare(fraction,2) <= 0) {      niceFraction=2;    } else     if (Double.compare(fraction,5) <= 0) {      niceFraction=5;    } else {      niceFraction=10;    }  }  return niceFraction * Math.pow(10,exponent);}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  public static int stringToInt(final String value){  final byte[] bytes=StringUtils.toBytes(value);  return PdfDictionary.generateChecksum(0,bytes.length,bytes);}  }
class C{  public boolean isFinished(){  return getCurrentMotionTime() > duration || destinationValue == lastReturnedValue || (EXPONENTIAL_DECAY == motionType && previousLastReturnedValue[0] == lastReturnedValue);}  }
class C{  private Scheduled schedule(){  if (scheduledTasks.isEmpty()) {    scheduledTasks.add(this);  } else {    int l=0;    int u=scheduledTasks.size() - 1;    int i;    while (true) {      i=(u + l) / 2;      long t=scheduledTasks.get(i).time;      if (t == time) {        scheduledTasks.add(i,this);        return this;      } else       if (t < time) {        l=i + 1;        if (l > u) {          scheduledTasks.add(i + 1,this);          return this;        }      } else {        u=i - 1;        if (l > u) {          scheduledTasks.add(i,this);          return this;        }      }    }  }  return this;}  }
class C{  public boolean coveredBy(Geometry g){  return baseGeom.coveredBy(g);}  }
class C{  public ImageFigure(){  this(0,0,0,0);}  }
class C{  public void onPressed(){  pressed=!pressed;}  }
class C{  public Object popCurrentFuncResult(){  return m_currentFuncResult.pop();}  }
class C{  public StaggeredHilbertTranform(int N,double OmegaP){  super(1,N);  if (!(0.0 < OmegaP && OmegaP < 1.0))   throw new IllegalArgumentException("Check 0.0 < OmegaP < 1.0");  bands[0][0]=OmegaP;  bands[0][1]=1.0;  generateCoefficients();}  }
class C{  public UniformQuadBatch(GL20 gl,Source source){  super(gl);  int maxVecs=usableMaxUniformVectors(gl) - extraVec4s();  if (maxVecs < vec4sPerQuad())   throw new RuntimeException("GL_MAX_VERTEX_UNIFORM_VECTORS too low: have " + maxVecs + ", need at least "+ vec4sPerQuad());  maxQuads=maxVecs / vec4sPerQuad();  program=new GLProgram(gl,source.vertex(this),source.fragment());  uTexture=program.getUniformLocation("u_Texture");  uHScreenSize=program.getUniformLocation("u_HScreenSize");  uFlip=program.getUniformLocation("u_Flip");  uData=program.getUniformLocation("u_Data");  aVertex=program.getAttribLocation("a_Vertex");  short[] verts=new short[maxQuads * VERTICES_PER_QUAD * VERTEX_SIZE];  short[] elems=new short[maxQuads * ELEMENTS_PER_QUAD];  int vv=0, ee=0;  for (short ii=0; ii < maxQuads; ii++) {    verts[vv++]=0;    verts[vv++]=0;    verts[vv++]=ii;    verts[vv++]=1;    verts[vv++]=0;    verts[vv++]=ii;    verts[vv++]=0;    verts[vv++]=1;    verts[vv++]=ii;    verts[vv++]=1;    verts[vv++]=1;    verts[vv++]=ii;    short base=(short)(ii * VERTICES_PER_QUAD);    short base0=base, base1=++base, base2=++base, base3=++base;    elems[ee++]=base0;    elems[ee++]=base1;    elems[ee++]=base2;    elems[ee++]=base1;    elems[ee++]=base3;    elems[ee++]=base2;  }  data=new float[maxQuads * vec4sPerQuad() * 4];  int[] ids=new int[2];  gl.glGenBuffers(2,ids,0);  verticesId=ids[0];  elementsId=ids[1];  gl.glBindBuffer(GL_ARRAY_BUFFER,verticesId);  gl.bufs.setShortBuffer(verts,0,verts.length);  gl.glBufferData(GL_ARRAY_BUFFER,verts.length * 2,gl.bufs.shortBuffer,GL_STATIC_DRAW);  gl.glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,elementsId);  gl.bufs.setShortBuffer(elems,0,elems.length);  gl.glBufferData(GL_ELEMENT_ARRAY_BUFFER,elems.length * 2,gl.bufs.shortBuffer,GL_STATIC_DRAW);  gl.checkError("UniformQuadBatch end ctor");}  }
class C{  public boolean validateCredentials(final URI targetUri,final Credential credentials){  Trace.writeLine("BaseVsoAuthentication::validateCredentials");  return this.VsoAuthority.validateCredentials(targetUri,credentials);}  }
class C{  private void processIpLeaseDocuments(final State current){  if (current.nextPageLink == null) {    finishTask(current);    return;  }  Operation getOnePageOfIpLeaseDocuments=Operation.createGet(UriUtils.buildUri(getHost(),current.nextPageLink));  getOnePageOfIpLeaseDocuments.setCompletion(null).sendWith(this);}  }
class C{  public String sqlMetadata_operatorDefinitions(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_operatorDefinitions(catalogName,schemaName);}  }
class C{  protected static String quoteBigDecimal(BigDecimal x){  if (x == null) {    return "null";  }  return "new BigDecimal(\"" + x.toString() + "\")";}  }
class C{  private String pref(int keyId,int defaultId){  return mSharedPreferences.getString(getString(keyId),getString(defaultId));}  }
class C{  private void initialize(double shift){  this.shift=shift;  if (h >= 32) {    final long scale=Long.MAX_VALUE;    for (int i=0; i < pf.length; i++) {      NumberVector obj=relation.get(pf[i].id);      long[] coord=new long[d];      for (int dim=0; dim < d; dim++) {        coord[dim]=(long)(getDimForObject(obj,dim) * .5 * scale);      }      pf[i].hilbert=HilbertSpatialSorter.coordinatesToHilbert(coord,h,1);    }  } else   if (h >= 16) {    final int scale=~1 >>> 1;    for (int i=0; i < pf.length; i++) {      NumberVector obj=relation.get(pf[i].id);      int[] coord=new int[d];      for (int dim=0; dim < d; dim++) {        coord[dim]=(int)(getDimForObject(obj,dim) * .5 * scale);      }      pf[i].hilbert=HilbertSpatialSorter.coordinatesToHilbert(coord,h,1);    }  } else   if (h >= 8) {    final int scale=~1 >>> 16;    for (int i=0; i < pf.length; i++) {      NumberVector obj=relation.get(pf[i].id);      short[] coord=new short[d];      for (int dim=0; dim < d; dim++) {        coord[dim]=(short)(getDimForObject(obj,dim) * .5 * scale);      }      pf[i].hilbert=HilbertSpatialSorter.coordinatesToHilbert(coord,h,16);    }  } else {    final int scale=~1 >>> 8;    for (int i=0; i < pf.length; i++) {      NumberVector obj=relation.get(pf[i].id);      byte[] coord=new byte[d];      for (int dim=0; dim < d; dim++) {        coord[dim]=(byte)(getDimForObject(obj,dim) * .5 * scale);      }      pf[i].hilbert=HilbertSpatialSorter.coordinatesToHilbert(coord,h,24);    }  }  java.util.Arrays.sort(pf);  for (int i=0; i < pf.length - 1; i++) {    pf[i].level=minRegLevel(i,i + 1);  }  capital_n_star=0;  for (int i=0; i < pf.length; i++) {    if (pf[i].ubound >= omega_star) {      capital_n_star++;    }  }}  }
class C{  public void processRequest(StunMessageEvent evt){synchronized (this) {    receivedRequestsVector.add(evt);    notifyAll();  }}  }
class C{  public void sendAddEntity(Entity entity){  ArrayList<Entity> entities=new ArrayList<Entity>(1);  entities.add(entity);  sendAddEntity(entities);}  }
class C{  @Override public void doGet(final HttpServletRequest req,final HttpServletResponse res) throws ServletException, IOException {  doPost(req,res);}  }
class C{  public gui(){  workspace=new File(System.getProperty("user.dir"));  initComponents();  for (  String s : Cell.BANDS) {    gsmtypeSetACellDial1.addItem(s);  }  gsmtype.addItem("GSM850");  gsmtype.addItem("GSM-R");  gsmtype.addItem("GSM900");  gsmtype.addItem("EGSM");  gsmtype.addItem("DCS");  gsmtype.addItem("PCS");  errorinformation.setWrapStyleWord(true);  errorinformation.setLineWrap(true);}  }
class C{  protected CacheDistributionAdvisor(CacheDistributionAdvisee region){  super(region);}  }
class C{  protected void calcMovementCostFor(IGame game,MoveStep prevStep){  final Coords prev=prevStep.getPosition();  final int prevEl=prevStep.getElevation();  final EntityMovementMode moveMode=getEntity().getMovementMode();  final IHex srcHex=game.getBoard().getHex(prev);  final IHex destHex=game.getBoard().getHex(getPosition());  final boolean isInfantry=getEntity() instanceof Infantry;  final boolean isSuperHeavyMech=(getEntity() instanceof Mech) && ((Mech)getEntity()).isSuperHeavy();  final boolean isMechanizedInfantry=isInfantry && ((Infantry)getEntity()).isMechanized();  final boolean isProto=getEntity() instanceof Protomech;  final boolean isMech=getEntity() instanceof Mech;  int nSrcEl=srcHex.getLevel() + prevEl;  int nDestEl=destHex.getLevel() + elevation;  mp=1;  if (isInfantry && (getEntity().getWalkMP() == 0) && getEntity().getPosition().equals(prev)&& (getEntity().getPosition().distance(getPosition()) == 1)&& (!isJumping())) {    mp=0;    return;  }  boolean applyNightPen=!game.getOptions().booleanOption("no_night_move_pen");  boolean carefulExempt=(moveMode == EntityMovementMode.VTOL) || isJumping();  if (!game.getBoard().inSpace() && isCareful() && applyNightPen&& !carefulExempt) {switch (game.getPlanetaryConditions().getFog()) {case PlanetaryConditions.FOG_LIGHT:      mp+=1;    break;case PlanetaryConditions.FOG_HEAVY:  mp+=2;break;}switch (game.getPlanetaryConditions().getLight()) {case PlanetaryConditions.L_FULL_MOON:mp+=1;break;case PlanetaryConditions.L_MOONLESS:mp+=2;break;case PlanetaryConditions.L_PITCH_BLACK:mp+=3;break;}}if (moveMode == EntityMovementMode.VTOL) {return;}if (isJumping()) {return;}if (!isPavementStep()) {if ((moveMode != EntityMovementMode.BIPED_SWIM) && (moveMode != EntityMovementMode.QUAD_SWIM) && (!((moveMode == EntityMovementMode.WIGE) && (getElevation() > 0)))) {mp+=destHex.movementCost(getEntity());}if ((moveMode != EntityMovementMode.HOVER) && (moveMode != EntityMovementMode.NAVAL) && (moveMode != EntityMovementMode.HYDROFOIL)&& (moveMode != EntityMovementMode.SUBMARINE)&& (moveMode != EntityMovementMode.INF_UMU)&& (moveMode != EntityMovementMode.VTOL)&& (moveMode != EntityMovementMode.BIPED_SWIM)&& (moveMode != EntityMovementMode.QUAD_SWIM)&& (moveMode != EntityMovementMode.WIGE)) {if (!destHex.containsTerrain(Terrains.ICE) || (nDestEl < destHex.surface())) {if (destHex.terrainLevel(Terrains.WATER) == 1) {mp++;} else if (destHex.terrainLevel(Terrains.WATER) > 1) {mp+=3;}}if (destHex.containsTerrain(Terrains.ICE) && !isCareful() && (nDestEl == destHex.surface())) {mp--;}}}if ((nSrcEl != nDestEl) && (moveMode != EntityMovementMode.WIGE)) {int delta_e=Math.abs(nSrcEl - nDestEl);if (game.getOptions().booleanOption("tacops_leaping") && isMech && (delta_e > 2)&& (nDestEl < nSrcEl)) {mp=4;return;}if ((isInfantry && !((getMovementType(false) == EntityMovementType.MOVE_VTOL_WALK) || (getMovementType(false) == EntityMovementType.MOVE_VTOL_RUN))) || ((moveMode == EntityMovementMode.TRACKED) || (moveMode == EntityMovementMode.WHEELED) || (moveMode == EntityMovementMode.HOVER))) {delta_e*=2;}mp+=delta_e;}if ((moveMode == EntityMovementMode.WIGE) && climbMode && (elevation > 0)) {mp+=2;}if (nDestEl < destHex.terrainLevel(Terrains.BLDG_ELEV)) {Building bldg=game.getBoard().getBuildingAt(getPosition());if ((null != prev) && (null != bldg) && bldg.isIn(prev)&& (bldg.getBldgClass() == Building.HANGAR)&& (destHex.terrainLevel(Terrains.BLDG_ELEV) > getEntity().height())) {mp+=0;} else if (!isInfantry && !isSuperHeavyMech) {if (!isProto) {mp+=bldg.getType();if (bldg.getBldgClass() == Building.HANGAR) {mp--;}if (bldg.getBldgClass() == Building.FORTRESS) {mp++;}} else {mp+=1;}} else if (isMechanizedInfantry) {mp+=1;}}if (isInfantry && !isMechanizedInfantry && (destHex.containsTerrain(Terrains.WOODS) || destHex.containsTerrain(Terrains.JUNGLE))&& !isPavementStep) {mp--;}}  }
class C{  public static IMethodBinding findOverriddenMethodInHierarchy(ITypeBinding type,IMethodBinding binding){  IMethodBinding method=findOverriddenMethodInType(type,binding);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findOverriddenMethodInHierarchy(superClass,binding);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findOverriddenMethodInHierarchy(interfaces[i],binding);    if (method != null)     return method;  }  return null;}  }
class C{  public String toString(){  if (null != m_value) {    return (m_value.toString());  } else   if (null != m_invalidValue) {    return m_invalidValue;  } else {    return "";  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Boolean isAllow(){  return allow;}  }
class C{  public boolean isShowWaitCursor(){  return showWaitCursor;}  }
class C{  public TextField(int columns){  super(1,columns);  setUIID("TextField");  setSingleLineTextArea(true);}  }
class C{  public Soundex(){  this.soundexMapping=US_ENGLISH_MAPPING;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void updateLimits(){  Way.setMaxWayNodes(maxWayNodes);}  }
class C{  private void parsePilot(Element pilotNode,Entity entity){  String pilotName=pilotNode.getAttribute(NAME);  String pilotSize=pilotNode.getAttribute(SIZE);  String pilotNickname=pilotNode.getAttribute(NICK);  String gunnery=pilotNode.getAttribute(GUNNERY);  String gunneryL=pilotNode.getAttribute(GUNNERYL);  String gunneryM=pilotNode.getAttribute(GUNNERYM);  String gunneryB=pilotNode.getAttribute(GUNNERYB);  String piloting=pilotNode.getAttribute(PILOTING);  String artillery=pilotNode.getAttribute(ARTILLERY);  String tough=pilotNode.getAttribute(TOUGH);  String initB=pilotNode.getAttribute(INITB);  String commandB=pilotNode.getAttribute(COMMANDB);  String hits=pilotNode.getAttribute(HITS);  String advantages=pilotNode.getAttribute(ADVS);  String edge=pilotNode.getAttribute(EDGE);  String implants=pilotNode.getAttribute(IMPLANTS);  String autoeject=pilotNode.getAttribute(AUTOEJECT);  String condejectammo=pilotNode.getAttribute(CONDEJECTAMMO);  String condejectengine=pilotNode.getAttribute(CONDEJECTENGINE);  String condejectctdest=pilotNode.getAttribute(CONDEJECTCTDEST);  String condejectheadshot=pilotNode.getAttribute(CONDEJECTHEADSHOT);  String ejected=pilotNode.getAttribute(EJECTED);  String extId=pilotNode.getAttribute(EXT_ID);  String portraitCategory=pilotNode.getAttribute(CAT_PORTRAIT);  String portraitFile=pilotNode.getAttribute(FILE_PORTRAIT);  if ((gunnery == null) || (gunnery.length() == 0)) {    warning.append("Could not find gunnery for pilot.\n");  } else   if ((piloting == null) || (piloting.length() == 0)) {    warning.append("Could not find piloting for pilot.\n");  } else {    int gunVal=-1;    try {      gunVal=Integer.parseInt(gunnery);    } catch (    NumberFormatException excep) {    }    if ((gunVal < 0) || (gunVal > Crew.MAX_SKILL)) {      warning.append("Found invalid gunnery value: ").append(gunnery).append(".\n");      return;    }    int pilotVal=-1;    try {      pilotVal=Integer.parseInt(piloting);    } catch (    NumberFormatException excep) {    }    if ((pilotVal < 0) || (pilotVal > Crew.MAX_SKILL)) {      warning.append("Found invalid piloting value: ").append(piloting).append(".\n");      return;    }    int toughVal=0;    if ((null != tough) && (tough.length() > 0)) {      try {        toughVal=Integer.parseInt(tough);      } catch (      NumberFormatException excep) {      }    }    int initBVal=0;    if ((null != initB) && (initB.length() > 0)) {      try {        initBVal=Integer.parseInt(initB);      } catch (      NumberFormatException excep) {      }    }    int commandBVal=0;    if ((null != commandB) && (commandB.length() > 0)) {      try {        commandBVal=Integer.parseInt(commandB);      } catch (      NumberFormatException excep) {      }    }    int gunneryLVal=gunVal;    int gunneryMVal=gunVal;    int gunneryBVal=gunVal;    if ((null != gunneryL) && (gunneryL.length() > 0)) {      try {        gunneryLVal=Integer.parseInt(gunneryL);      } catch (      NumberFormatException excep) {      }      if ((gunneryLVal < 0) || (gunneryLVal > Crew.MAX_SKILL)) {        warning.append("Found invalid piloting value: ").append(gunneryL).append(".\n");        return;      }    }    if ((null != gunneryM) && (gunneryM.length() > 0)) {      try {        gunneryMVal=Integer.parseInt(gunneryM);      } catch (      NumberFormatException excep) {      }      if ((gunneryMVal < 0) || (gunneryMVal > Crew.MAX_SKILL)) {        warning.append("Found invalid piloting value: ").append(gunneryM).append(".\n");        return;      }    }    if ((null != gunneryB) && (gunneryB.length() > 0)) {      try {        gunneryBVal=Integer.parseInt(gunneryB);      } catch (      NumberFormatException excep) {      }      if ((gunneryBVal < 0) || (gunneryBVal > Crew.MAX_SKILL)) {        warning.append("Found invalid piloting value: ").append(gunneryB).append(".\n");        return;      }    }    int artVal=gunVal;    if ((null != artillery) && (artillery.length() > 0)) {      try {        artVal=Integer.parseInt(artillery);      } catch (      NumberFormatException excep) {      }      if ((artVal < 0) || (artVal > Crew.MAX_SKILL)) {        warning.append("Found invalid artillery value: ").append(artillery).append(".\n");        return;      }    }    if ((null == pilotName) || (pilotName.length() == 0)) {      pilotName="Unnamed";    }    Crew crew=new Crew(pilotName,1,gunneryLVal,gunneryMVal,gunneryBVal,pilotVal);    if (pilotSize != null && pilotSize.length() > 0) {      int crewSize=1;      try {        crewSize=Integer.parseInt(pilotSize);      } catch (      NumberFormatException e) {      }      crew.setSize(crewSize);    } else     if (pilotSize != null && pilotSize.equals("")) {      crew.setSize(Compute.getFullCrewSize(entity));    }    if ((null != pilotNickname) && (pilotNickname.length() > 0)) {      crew.setNickname(pilotNickname);    }    if ((null != portraitCategory) && (portraitCategory.length() > 0)) {      crew.setPortraitCategory(portraitCategory);    }    if ((null != portraitFile) && (portraitFile.length() > 0)) {      crew.setPortraitFileName(portraitFile);    }    crew.setArtillery(artVal);    crew.setToughness(toughVal);    crew.setInitBonus(initBVal);    crew.setCommandBonus(commandBVal);    if ((null != advantages) && (advantages.trim().length() > 0)) {      StringTokenizer st=new StringTokenizer(advantages,"::");      while (st.hasMoreTokens()) {        String adv=st.nextToken();        String advName=Crew.parseAdvantageName(adv);        Object value=Crew.parseAdvantageValue(adv);        try {          crew.getOptions().getOption(advName).setValue(value);        } catch (        Exception e) {          warning.append("Error restoring advantage: ").append(adv).append(".\n");        }      }    }    if ((null != edge) && (edge.trim().length() > 0)) {      StringTokenizer st=new StringTokenizer(edge,"::");      while (st.hasMoreTokens()) {        String edg=st.nextToken();        String edgeName=Crew.parseAdvantageName(edg);        Object value=Crew.parseAdvantageValue(edg);        try {          crew.getOptions().getOption(edgeName).setValue(value);        } catch (        Exception e) {          warning.append("Error restoring edge: ").append(edg).append(".\n");        }      }    }    if ((null != implants) && (implants.trim().length() > 0)) {      StringTokenizer st=new StringTokenizer(implants,"::");      while (st.hasMoreTokens()) {        String implant=st.nextToken();        String implantName=Crew.parseAdvantageName(implant);        Object value=Crew.parseAdvantageValue(implant);        try {          crew.getOptions().getOption(implantName).setValue(value);        } catch (        Exception e) {          warning.append("Error restoring implants: ").append(implant).append(".\n");        }      }    }    if (hits.length() > 0) {      int hitVal=-1;      try {        hitVal=Integer.parseInt(hits);      } catch (      NumberFormatException excep) {      }      if (hits.equals(DEAD)) {        crew.setDead(true);        warning.append("The pilot, ").append(pilotName).append(", is dead.\n");      } else       if ((hitVal < 0) || (hitVal > 5)) {        warning.append("Found invalid hits value: ").append(hits).append(".\n");      } else {        crew.setHits(hitVal);      }    }    if (ejected.length() > 0) {      crew.setEjected(Boolean.parseBoolean(ejected));    }    if ((null != extId) && (extId.length() > 0)) {      crew.setExternalIdAsString(extId);    }    pilots.add(crew);    if (null != entity) {      entity.setCrew(crew);      if (autoeject.length() > 0) {        if (autoeject.equals("true")) {          ((Mech)entity).setAutoEject(true);        } else {          ((Mech)entity).setAutoEject(false);        }      }      if (condejectammo.length() > 0) {        if (condejectammo.equals("true")) {          ((Mech)entity).setCondEjectAmmo(true);        } else {          ((Mech)entity).setCondEjectAmmo(false);        }      }      if (condejectengine.length() > 0) {        if (condejectengine.equals("true")) {          ((Mech)entity).setCondEjectEngine(true);        } else {          ((Mech)entity).setCondEjectEngine(false);        }      }      if (condejectctdest.length() > 0) {        if (condejectctdest.equals("true")) {          ((Mech)entity).setCondEjectCTDest(true);        } else {          ((Mech)entity).setCondEjectCTDest(false);        }      }      if (condejectheadshot.length() > 0) {        if (condejectheadshot.equals("true")) {          ((Mech)entity).setCondEjectHeadshot(true);        } else {          ((Mech)entity).setCondEjectHeadshot(false);        }      }    }  }}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public JCaret(final int blinkPeriod,final Color caretColor){  Preconditions.checkArgument(blinkPeriod >= 0,"Error: Blink period can't be negative");  Preconditions.checkNotNull(caretColor,"Error: Caret color can't be null");  m_caretTimer=new Timer(blinkPeriod,m_listener);  m_caretTimer.setRepeats(true);  m_caretTimer.start();}  }
class C{  public Builder initializeAsRestore(IndexMetaData indexMetaData,RestoreSource restoreSource){  return initializeAsRestore(indexMetaData,restoreSource,null,false,new UnassignedInfo(UnassignedInfo.Reason.EXISTING_INDEX_RESTORED,"restore_source[" + restoreSource.snapshotId().getRepository() + "/"+ restoreSource.snapshotId().getSnapshot()+ "]"));}  }
class C{  public void close() throws SQLException {  if (this.connection != null) {    this.connection.close();  }}  }
class C{  protected Rows<String,CompositeColumnName> queryRowsWithAllColumns(Keyspace keyspace,Collection<URI> ids,ColumnFamily<String,CompositeColumnName> cf){  try {    OperationResult<Rows<String,CompositeColumnName>> result=keyspace.prepareQuery(cf).getKeySlice(convertUriCollection(ids)).execute();    return result.getResult();  } catch (  ConnectionException e) {    throw DatabaseException.retryables.connectionFailed(e);  }}  }
class C{  static Boolean realIsJUnit4Test(Class scriptClass,GroovyClassLoader loader){  boolean isTest=false;  try {    try {      Class runWithAnnotationClass=loader.loadClass("org.junit.runner.RunWith");      Annotation annotation=scriptClass.getAnnotation(runWithAnnotationClass);      if (annotation != null) {        isTest=true;      } else {        Class testAnnotationClass=loader.loadClass("org.junit.Test");        Method[] methods=scriptClass.getMethods();        for (int i=0; i < methods.length; i++) {          Method method=methods[i];          annotation=method.getAnnotation(testAnnotationClass);          if (annotation != null) {            isTest=true;            break;          }        }      }    } catch (    ClassNotFoundException e) {    }  } catch (  Throwable e) {  }  return isTest ? Boolean.TRUE : Boolean.FALSE;}  }
