class C{  private void assertName(String firstName,String lastName){  typeIntoWebField(FIRST_NAME_FORM_ID,firstName);  typeIntoWebField(LAST_NAME_FORM_ID,lastName);  onWebView().withElement(findElement(Locator.ID,FULL_NAME_DISPLAY_ID)).check(webMatches(getText(),containsString(firstName + " " + lastName)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.145 -0500",hash_original_method="E326CA0D62F025609F12A4A9B87E4431",hash_generated_method="8EA038D25A6CA65C7B835AD3C41DCE6D") public void writeExternal(ObjectOutput objectOutput) throws IOException {  objectOutput.writeInt(numOfEntries);  for (int i=0; i < numOfEntries; i++) {    objectOutput.writeInt(countryCallingCodes[i]);    Set<String> setOfLangs=availableLanguages.get(i);    int numOfLangs=setOfLangs.size();    objectOutput.writeInt(numOfLangs);    for (    String lang : setOfLangs) {      objectOutput.writeUTF(lang);    }  }}  }
class C{  public boolean isUnidirectional(){  return unidirectionalStreamNumber != -1;}  }
class C{  public HTMLWriter(Writer w,HTMLDocument doc){  this(w,doc,0,doc.getLength());}  }
class C{  public void clear(){  final long[] theBits=this.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]=0L;}  }
class C{  public int readU8() throws WireParseException {  require(1);  return (array[pos++] & 0xFF);}  }
class C{  protected static boolean SI16(Address value){  return (value.LE(Address.fromIntSignExtend(32767)) || value.GE(Address.fromIntSignExtend(-32768)));}  }
class C{  public Action(int kind){  if (kind != FORWARD_ACTION && kind != BACKWARD_ACTION)   throw new GeneratorException();  this.content="";  this.priority=Integer.MAX_VALUE;  this.kind=kind;}  }
class C{  public DefaultWordsScanner(final Lexer lexer,final TokenSet identifierTokenSet,final TokenSet commentTokenSet,final TokenSet literalTokenSet,@NotNull TokenSet skipCodeContextTokenSet){  myLexer=lexer;  myIdentifierTokenSet=identifierTokenSet;  myCommentTokenSet=commentTokenSet;  myLiteralTokenSet=literalTokenSet;  mySkipCodeContextTokenSet=skipCodeContextTokenSet;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return Boolean.valueOf((((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetPathAttributes(getString(stack)) & MiniClientSageRenderer.FS_PATH_DIRECTORY) != 0);  } else   return Boolean.valueOf(getFile(stack).isDirectory());}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  private boolean Test3(String before){  StringBuffer bashed1=new StringBuffer(before);  StringBuffer bashed2=new StringBuffer(before);  int startIndex=getRandomIndex(0,bashed1.length());  int endIndex=getRandomIndex(startIndex,bashed2.length());  String insertString=generateTestString();  bashed1.delete(startIndex,endIndex);  bashed1.insert(startIndex,insertString);  bashed2.replace(startIndex,endIndex,insertString);  String result1=bashed1.toString();  String result2=bashed2.toString();  if (!result1.equals(result2))   return false; else   return true;}  }
class C{  public void test_DELETE_accessPath_delete_multiple_contexts() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final URI base=new URIImpl("http://www.bigdata.com/");  final URI c1=new URIImpl("http://www.bigdata.com/c1");  final URI c2=new URIImpl("http://www.bigdata.com/c2");  assertEquals(3,m_repo.rangeCount(null,null,null,base));  assertEquals(2,m_repo.rangeCount(null,null,null,c1));  assertEquals(2,m_repo.rangeCount(null,null,null,c2));  final long mutationResult=doDeleteWithAccessPath(null,null,null,c1,c2);  assertEquals(4,mutationResult);  final long rangeCount_base=m_repo.rangeCount(null,null,null,base);  final long rangeCount_c1=m_repo.rangeCount(null,null,null,c1);  final long rangeCount_c2=m_repo.rangeCount(null,null,null,c2);  assertEquals(3,rangeCount_base);  assertEquals(0,rangeCount_c1);  assertEquals(0,rangeCount_c2);}  }
class C{  public void cleanChains(){  int i=0;  while (i < this.getChains().size()) {    Activity first=this.getChains().get(i).getActivities().get(0);    Activity last=this.getChains().get(i).getActivities().get(this.getChains().get(i).getActivities().size() - 1);    if ((first.getDuration() < ActivityLocations.getMajorActivityMinimumDuration()) || (last.getDuration() < ActivityLocations.getMajorActivityMinimumDuration()) || (this.getChains().get(i).getActivities().size() <= 2)) {      this.getChains().remove(i);    } else {      this.getChains().get(i).setDuration();      this.getChains().get(i).setDistance();      i++;    }  }}  }
class C{  public SmoothOverScroller(Context context,Interpolator interpolator,boolean flywheel){  if (interpolator == null) {    mInterpolator=new ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  public static DataStoreEvent insertionEvent(DBIDs inserts){  return new DataStoreEvent(inserts,DBIDUtil.EMPTYDBIDS,DBIDUtil.EMPTYDBIDS);}  }
class C{  private void connect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.ERROR);  c.addAction("Client failed to connect");}  }
class C{  public CancelIndicator extractCancelIndicator(@SuppressWarnings("unused") Object fsa){  return CancelIndicator.NullImpl;}  }
class C{  @VisibleForTesting static String row(int row,Table table,String missing){  StringBuilder builder=new StringBuilder().append("<tr>");  for (  Column col : table.columns()) {    builder.append("<td>").append(String.valueOf(col.getString(row))).append("</td>");  }  builder.append("</tr>").append('\n');  return builder.toString();}  }
class C{  public boolean start(){  if (isOptOut()) {    return false;  }  FMLCommonHandler.instance().bus().register(this);  return true;}  }
class C{  public boolean isDbInitialized(){  long count=poiTypeDao.countOf();  Timber.d("pois in database : %s",count);  return count > 0;}  }
class C{  public SafeCloseDatagramSocket(SocketAddress bindaddr) throws SocketException {  super(bindaddr);}  }
class C{  public void removeObsoletePreviews(ArrayList<Object> list){  Utilities.assertWorkerThread();  LongSparseArray<HashSet<String>> validPackages=new LongSparseArray<>();  for (  Object obj : list) {    final UserHandleCompat user;    final String pkg;    if (obj instanceof ResolveInfo) {      user=UserHandleCompat.myUserHandle();      pkg=((ResolveInfo)obj).activityInfo.packageName;    } else {      LauncherAppWidgetProviderInfo info=(LauncherAppWidgetProviderInfo)obj;      user=mWidgetManager.getUser(info);      pkg=info.provider.getPackageName();    }    final long userId=mUserManager.getSerialNumberForUser(user);    HashSet<String> packages=validPackages.get(userId);    if (packages == null) {      packages=new HashSet<>();      validPackages.put(userId,packages);    }    packages.add(pkg);  }  LongSparseArray<HashSet<String>> packagesToDelete=new LongSparseArray<>();  Cursor c=null;  try {    c=mDb.query(new String[]{CacheDb.COLUMN_USER,CacheDb.COLUMN_PACKAGE,CacheDb.COLUMN_LAST_UPDATED,CacheDb.COLUMN_VERSION},null,null);    while (c.moveToNext()) {      long userId=c.getLong(0);      String pkg=c.getString(1);      long lastUpdated=c.getLong(2);      long version=c.getLong(3);      HashSet<String> packages=validPackages.get(userId);      if (packages != null && packages.contains(pkg)) {        long[] versions=getPackageVersion(pkg);        if (versions[0] == version && versions[1] == lastUpdated) {          continue;        }      }      packages=packagesToDelete.get(userId);      if (packages == null) {        packages=new HashSet<>();        packagesToDelete.put(userId,packages);      }      packages.add(pkg);    }    for (int i=0; i < packagesToDelete.size(); i++) {      long userId=packagesToDelete.keyAt(i);      UserHandleCompat user=mUserManager.getUserForSerialNumber(userId);      for (      String pkg : packagesToDelete.valueAt(i)) {        removePackage(pkg,user,userId);      }    }  } catch (  SQLException e) {    Log.e(TAG,"Error updating widget previews",e);  } finally {    if (c != null) {      c.close();    }  }}  }
class C{  public DefaultButtonModel(){  stateMask=0;  setEnabled(true);}  }
class C{  @Override protected InputStream openFile(Path path) throws IOException {  InputStream is=super.openFile(path);  if (is != null) {    DatumReader<GenericRecord> datumReader=new GenericDatumReader<GenericRecord>();    avroDataStream=new DataFileStream<GenericRecord>(is,datumReader);    datumReader.setSchema(avroDataStream.getSchema());  }  return is;}  }
class C{  public static long[] toPrimitive(Long[] array,long valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_LONG_ARRAY;  }  final long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    Long b=array[i];    result[i]=(b == null ? valueForNull : b.longValue());  }  return result;}  }
class C{  public CVoucherHeader createVoucherForReceipt(final ReceiptHeader receiptHeader) throws ApplicationRuntimeException {  CVoucherHeader voucherheader=null;  boolean isParentReceiptInstrumentDeposited=false;  if (receiptHeader.getReceiptHeader() != null)   for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptHeader().getReceiptInstrument())   if (instrumentHeader.getInstrumentType().getType().equals(CollectionConstants.INSTRUMENTTYPE_CASH)) {    if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_RECONCILED_STATUS)) {      isParentReceiptInstrumentDeposited=true;      break;    }  } else   if (instrumentHeader.getStatusId().getDescription().equals(CollectionConstants.INSTRUMENT_DEPOSITED_STATUS)) {    isParentReceiptInstrumentDeposited=true;    break;  }  if (receiptHeader.getReceiptHeader() == null || receiptHeader.getReceiptHeader() != null && !isParentReceiptInstrumentDeposited) {    voucherheader=createVoucher(receiptHeader);    if (voucherheader != null) {      final ReceiptVoucher receiptVoucher=new ReceiptVoucher();      receiptVoucher.setVoucherheader(voucherheader);      receiptVoucher.setReceiptHeader(receiptHeader);      receiptHeader.addReceiptVoucher(receiptVoucher);    }  }  updateInstrument(receiptHeader);  LOGGER.debug("Created voucher for receipt : " + receiptHeader.getReceiptnumber());  return voucherheader;}  }
class C{  private static void checkMaintenanceMode(Datastore datastore,DatastoreSummary summary) throws Exception {  String mode=summary.getMaintenanceMode();  if (DatastoreSummaryMaintenanceModeState.enteringMaintenance.name().equals(mode)) {    throw new Exception("Datastore " + datastore.getName() + " is entering maintenance mode");  }}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public AndQueryExp(QueryExp q1,QueryExp q2){  exp1=q1;  exp2=q2;}  }
class C{  void addPackageName(String packageName){  mPackageNames.add(packageName);}  }
class C{  static boolean handleHotseatButtonKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  final Launcher launcher=(Launcher)v.getContext();  final DeviceProfile profile=launcher.getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle HOTSEAT BUTTONS keyevent=[%s] on hotseat buttons, isVertical=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  final Workspace workspace=(Workspace)v.getRootView().findViewById(R.id.workspace);  final ShortcutAndWidgetContainer hotseatParent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout hotseatLayout=(CellLayout)hotseatParent.getParent();  final ItemInfo itemInfo=(ItemInfo)v.getTag();  int pageIndex=workspace.getNextPage();  int pageCount=workspace.getChildCount();  int iconIndex=hotseatParent.indexOfChild(v);  int iconRank=((CellLayout.LayoutParams)hotseatLayout.getShortcutsAndWidgets().getChildAt(iconIndex).getLayoutParams()).cellX;  final CellLayout iconLayout=(CellLayout)workspace.getChildAt(pageIndex);  if (iconLayout == null) {    return consume;  }  final ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup parent=null;  int[][] matrix=null;  if (keyCode == KeyEvent.KEYCODE_DPAD_UP && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    keyCode=KeyEvent.KEYCODE_PAGE_DOWN;  } else   if (isUninstallKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    if (UninstallDropTarget.supportsDrop(launcher,itemInfo)) {      UninstallDropTarget.startUninstallActivity(launcher,itemInfo);    }  } else   if (isDeleteKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    launcher.removeItem(v,itemInfo,true);  } else {    matrix=FocusLogic.createSparseMatrix(hotseatLayout);    parent=hotseatParent;  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  View newIcon=null;switch (newIconIndex) {case FocusLogic.NEXT_PAGE_FIRST_ITEM:    parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);  newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex + 1);break;case FocusLogic.PREVIOUS_PAGE_FIRST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.PREVIOUS_PAGE_LAST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(parent.getChildCount() - 1);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN:case FocusLogic.PREVIOUS_PAGE_RIGHT_COLUMN:workspace.snapToPage(pageIndex - 1);CellLayout prevPage=(CellLayout)workspace.getPageAt(pageIndex - 1);boolean isPrevPageFullscreen=((CellLayout.LayoutParams)prevPage.getShortcutsAndWidgets().getChildAt(0).getLayoutParams()).isFullscreen;if (isPrevPageFullscreen) {workspace.getPageAt(pageIndex - 1).requestFocus();}break;case FocusLogic.NEXT_PAGE_LEFT_COLUMN:case FocusLogic.NEXT_PAGE_RIGHT_COLUMN:workspace.snapToPage(pageIndex + 1);CellLayout nextPage=(CellLayout)workspace.getPageAt(pageIndex + 1);boolean isNextPageFullscreen=((CellLayout.LayoutParams)nextPage.getShortcutsAndWidgets().getChildAt(0).getLayoutParams()).isFullscreen;if (isNextPageFullscreen) {workspace.getPageAt(pageIndex + 1).requestFocus();}break;}if (parent == iconParent && newIconIndex >= iconParent.getChildCount()) {newIconIndex-=iconParent.getChildCount();}if (parent != null) {if (newIcon == null && newIconIndex >= 0) {newIcon=parent.getChildAt(newIconIndex);}if (newIcon != null) {newIcon.requestFocus();playSoundEffect(keyCode,v);}}return consume;}  }
class C{  @SuppressWarnings("cast") @Override public boolean contains(final Object obj){  if (null != obj) {    Iterator<E> it=new ArrayDequeIterator<E>();    while (it.hasNext()) {      if (obj.equals((E)it.next())) {        return true;      }    }  }  return false;}  }
class C{  public ResourceAppender(Layout layout,Resource res,Charset charset,boolean append,boolean bufferedIO,int timeout,int bufferSize,RetireListener listener) throws IOException {  this.layout=layout;  this.bufferedIO=bufferedIO;  this.bufferSize=bufferSize;  this.timeout=timeout;  this.fileAppend=append;  this.res=res;  this.listener=listener;  setEncoding(charset.name());  this.setFile(append);}  }
class C{  String alligatorWithBounds(){  List<TypeParameterElement> allParameters=allParameters();  if (allParameters.isEmpty()) {    return "";  }  StringBuilder alligator=new StringBuilder("<");  String separator="";  for (  TypeParameterElement param : allParameters) {    alligator.append(separator);    separator=", ";    alligator.append(param.toString());    for (    TypeMirror bound : param.getBounds()) {      alligator.append(" extends ").append(bound);    }  }  return alligator.append(">").toString();}  }
class C{  public CloseableStaticBitmap(CloseableReference<Bitmap> bitmapReference,QualityInfo qualityInfo,int rotationAngle){  mBitmapReference=Preconditions.checkNotNull(bitmapReference.cloneOrNull());  mBitmap=mBitmapReference.get();  mQualityInfo=qualityInfo;  mRotationAngle=rotationAngle;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SupplierShareResultEvaluator(Document xml,String currency){  super(xml);  setCurrency(currency);}  }
class C{  public ReorgCPInstruction(Operator op,CPOperand in,CPOperand out,String opcode,String istr){  super(op,in,out,opcode,istr);  _cptype=CPINSTRUCTION_TYPE.Reorg;}  }
class C{  private static int sim(char char1,char char2){  boolean isMatch=String.valueOf(char1).toLowerCase().equals(String.valueOf(char2).toLowerCase());  return isMatch ? 1 : penalty;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public static double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public final boolean contains(V value){  if (GWT.isScript()) {    return jsArray.indexOf(value) != -1;  } else {    return javaArray.contains(value);  }}  }
class C{  private static OFActionSetVlanVid decode_set_vlan_id(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanVid vlanid=VlanVid.ofVlan(get_short(n.group(1)));        OFActionSetVlanVid.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanVid();        ab.setVlanVid(vlanid);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  @Override public void onStartInput(EditorInfo attribute,boolean restarting){  super.onStartInput(attribute,restarting);  mComposing.setLength(0);  updateCandidates();  if (!restarting) {    mMetaState=0;  }  mPredictionOn=false;  mCompletionOn=false;  mCompletions=null;switch (attribute.inputType & InputType.TYPE_MASK_CLASS) {case InputType.TYPE_CLASS_NUMBER:case InputType.TYPE_CLASS_DATETIME:    mCurKeyboard=mSymbolsKeyboard;  break;case InputType.TYPE_CLASS_PHONE:mCurKeyboard=mSymbolsKeyboard;break;case InputType.TYPE_CLASS_TEXT:mCurKeyboard=mQwertyKeyboard;mPredictionOn=true;int variation=attribute.inputType & InputType.TYPE_MASK_VARIATION;if (variation == InputType.TYPE_TEXT_VARIATION_PASSWORD || variation == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) {mPredictionOn=false;}if (variation == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || variation == InputType.TYPE_TEXT_VARIATION_URI || variation == InputType.TYPE_TEXT_VARIATION_FILTER) {mPredictionOn=false;}if ((attribute.inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) {mPredictionOn=false;mCompletionOn=isFullscreenMode();}updateShiftKeyState(attribute);break;default :mCurKeyboard=mQwertyKeyboard;updateShiftKeyState(attribute);}mCurKeyboard.setImeOptions(getResources(),attribute.imeOptions);}  }
class C{  public SaaSApplicationException(String message,Throwable cause){  super(message,cause);  init();  this.setCauseStackTrace(cause);}  }
class C{  public void addSection(Rational R){  sections.add(R);}  }
class C{  public boolean isQuickAggregateQuery(){  return isQuickAggregateQuery;}  }
class C{  public void append(Template text,int off,int len){  append(text.buf,off,len);}  }
class C{  public long starttime(){  return Long.parseLong(fields[21]);}  }
class C{  @Override protected boolean isExported(String address,ServiceRefAmp serviceRef){  return true;}  }
class C{  public void translateCMPG(){switch (value) {case EQUAL:    value=CMPL_EQUAL;  break;case NOT_EQUAL:value=CMPL_NOT_EQUAL;break;case LESS:value=CMPG_LESS;break;case GREATER_EQUAL:value=CMPG_GREATER_EQUAL;break;case GREATER:value=CMPG_GREATER;break;case LESS_EQUAL:value=CMPG_LESS_EQUAL;break;default :throw new OptimizingCompilerException("invalid condition " + this);}}  }
class C{  private void addDownloadIdToSharedPrefs(int downloadId){  Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);  downloadIds.add(Integer.toString(downloadId));  storeDownloadInfo(DOWNLOAD_NOTIFICATION_IDS,downloadIds);}  }
class C{  private FloatVector transform(FloatVector inputInstance,int inputLayer){  FloatVector internalInstance=new DenseFloatVector(inputInstance.getDimension() + 1);  internalInstance.set(0,1);  for (int i=0; i < inputInstance.getDimension(); ++i) {    internalInstance.set(i + 1,inputInstance.get(i));  }  FloatFunction squashingFunction=model.getSquashingFunction(inputLayer);  FloatMatrix weightMatrix=null;  if (inputLayer == 0) {    weightMatrix=this.getEncodeWeightMatrix();  } else {    weightMatrix=this.getDecodeWeightMatrix();  }  FloatVector vec=weightMatrix.multiplyVectorUnsafe(internalInstance);  vec=vec.applyToElements(squashingFunction);  return vec;}  }
class C{  protected boolean isConnected(){  return delegate.isConnected();}  }
class C{  protected void finalize() throws Throwable {  try {    close();  }  finally {    super.finalize();  }}  }
class C{  @Override public long removeAll(){  return 0L;}  }
class C{  public int session(){  return Integer.parseInt(fields[5]);}  }
class C{  public static EntropyCalculatorDiscrete newInstance(int base,int blocksize){  if (blocksize > 1) {    return BlockEntropyCalculatorDiscrete.newInstance(blocksize,base);  } else {    return EntropyCalculatorDiscrete.newInstance(base);  }}  }
class C{  private void computeDefaultFilters(File indicatorFile,JsonObject jsonObj){  defaultFilters=new ArrayList<Filter>();  JsonArray filterArray=Utils.getFieldValueAsArray(jsonObj,"filter");  if (filterArray != null) {    Set<String> filterFields=Utils.getAllFilterFields(jsonObj);    for (int i=0; i < filterArray.size(); i++) {      JsonElement filterElt=filterArray.get(i);      Filter filter;      try {        filter=Filter.parse(filterElt,filterFields);        defaultFilters.add(filter);      } catch (      FilterParseException e) {        String title="Parse Error";        String msg="Failed to parse the default filter in\n\n" + indicatorFile;        DroidsafePluginUtilities.showError(title,msg,e);        ;        e.printStackTrace();      }    }  }}  }
class C{  private void notifyMembersForAlertDefinitionRemoval(StatAlertDefinition alertDef){  GfManagerAgent agent=getGfManagerAgent();  StatAlertDefinition[] alertDefs=new StatAlertDefinition[]{alertDef};  ApplicationVM[] VMs=agent.listApplications();  for (int i=0; i < VMs.length; i++) {    VMs[i].updateAlertDefinitions(alertDefs,UpdateAlertDefinitionMessage.REMOVE_ALERT_DEFINITION);  }}  }
class C{  public WeakHashMapPro(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=newTable(capacity);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Vertex> findAllInstances(Vertex type,Vertex relationship,Calendar start){  Vertex instantiation=findByData(Primitive.INSTANTIATION);  Query query=null;  if (relationship != null) {    if (start == null) {      query=this.entityManager.createQuery("Select distinct v from Vertex v join v.allRelationships r join v.allRelationships r2 where r.target = :type and r.type = :instantiation and r.correctness > 0" + " and r2.type = :relationship and r2.correctness > 0 order by r.creationDate desc");      query.setParameter("relationship",relationship.detach());    } else {      query=this.entityManager.createQuery("Select distinct v from Vertex v join v.allRelationships r join v.allRelationships r2 where r.target = :type and r.type = :instantiation and r.correctness > 0" + " and r2.type = :relationship and r2.correctness > 0 and r2.creationDate >= :start order by r.creationDate desc");      query.setParameter("relationship",relationship.detach());      query.setParameter("start",new Date(start.getTimeInMillis()));    }  } else {    if (start == null) {      query=this.entityManager.createQuery("Select distinct v from Vertex v join v.allRelationships r where r.target = :type and r.type = :instantiation and r.correctness > 0 order by r.creationDate desc");    } else {      query=this.entityManager.createQuery("Select distinct v from Vertex v join v.allRelationships r where r.target = :type and r.type = :instantiation and r.correctness > 0 and r.creationDate >= :start order by r.creationDate desc");      query.setParameter("start",new Date(start.getTimeInMillis()));    }  }  setHints(query);  query.setParameter("instantiation",instantiation);  query.setParameter("type",type);  query.setMaxResults(1000);  return query.getResultList();}  }
class C{  public final void add(float scalar){  m00+=scalar;  m01+=scalar;  m02+=scalar;  m03+=scalar;  m10+=scalar;  m11+=scalar;  m12+=scalar;  m13+=scalar;  m20+=scalar;  m21+=scalar;  m22+=scalar;  m23+=scalar;  m30+=scalar;  m31+=scalar;  m32+=scalar;  m33+=scalar;}  }
class C{  public void curveTo(float c0X,float c0Y,float c1X,float c1Y,float x,float y){  mPoints.add(PathPoint.curveTo(c0X,c0Y,c1X,c1Y,x,y));}  }
class C{  public static void runTestWithoutOutput(String testCaseFile) throws Exception {  runTestWithoutOutput(testCaseFile,false);}  }
class C{  public Rendon2(){  super(2,2);}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  static String replaceCommand(String x){  if (x.equals("Tables"))   return genTables();  if (x.equals("Initializers"))   return genInitializers();  if (x.length() >= 9 && x.substring(0,7).equals("Lookup(") && x.substring(x.length() - 1).equals(")"))   return genAccess("A",x.substring(7,x.length() - 1),(identifiers ? 2 : 32));  if (x.length() >= 11 && x.substring(0,9).equals("LookupEx(") && x.substring(x.length() - 1).equals(")"))   return genAccess("B",x.substring(9,x.length() - 1),16);  if (x.equals("shiftType"))   return Long.toString(shiftType);  if (x.equals("shiftIdentifierInfo"))   return Long.toString(shiftIdentifierInfo);  if (x.equals("maskIdentifierInfo"))   return "0x" + hex8(maskIdentifierInfo);  if (x.equals("maskUnicodePart"))   return "0x" + hex8(maskUnicodePart);  if (x.equals("shiftCaseOffset"))   return Long.toString(shiftCaseOffset);  if (x.equals("shiftCaseInfo"))   return Long.toString(shiftCaseInfo);  if (x.equals("shiftCaseOffsetSign"))   return Long.toString(shiftCaseOffsetSign);  if (x.equals("maskCase"))   return "0x" + hex8(maskCase);  if (x.equals("maskCaseOffset"))   return "0x" + hex8(maskCaseOffset);  if (x.equals("maskLowerCase"))   return "0x" + hex8(maskLowerCase);  if (x.equals("maskUpperCase"))   return "0x" + hex8(maskUpperCase);  if (x.equals("maskTitleCase"))   return "0x" + hex8(maskTitleCase);  if (x.equals("maskOtherLowercase"))   return "0x" + hex4(maskOtherLowercase >> 32);  if (x.equals("maskOtherUppercase"))   return "0x" + hex4(maskOtherUppercase >> 32);  if (x.equals("maskOtherAlphabetic"))   return "0x" + hex4(maskOtherAlphabetic >> 32);  if (x.equals("maskIdeographic"))   return "0x" + hex4(maskIdeographic >> 32);  if (x.equals("valueIgnorable"))   return "0x" + hex8(valueIgnorable);  if (x.equals("valueJavaUnicodeStart"))   return "0x" + hex8(valueJavaUnicodeStart);  if (x.equals("valueJavaOnlyStart"))   return "0x" + hex8(valueJavaOnlyStart);  if (x.equals("valueJavaUnicodePart"))   return "0x" + hex8(valueJavaUnicodePart);  if (x.equals("valueJavaOnlyPart"))   return "0x" + hex8(valueJavaOnlyPart);  if (x.equals("valueJavaWhitespace"))   return "0x" + hex8(valueJavaWhitespace);  if (x.equals("lowJavaStart"))   return "0x" + hex8(lowJavaStart);  if (x.equals("nonzeroJavaPart"))   return "0x" + hex8(nonzeroJavaPart);  if (x.equals("bitJavaStart"))   return "0x" + hex8(bitJavaStart);  if (x.equals("bitJavaPart"))   return Long.toString(bitJavaPart);  if (x.equals("valueUnicodeStart"))   return "0x" + hex8(valueUnicodeStart);  if (x.equals("maskIsJavaIdentifierStart"))   return "0x" + hex(maskIsJavaIdentifierStart);  if (x.equals("maskIsJavaIdentifierPart"))   return "0x" + hex(maskIsJavaIdentifierPart);  if (x.equals("shiftDigitOffset"))   return Long.toString(shiftDigitOffset);  if (x.equals("maskDigitOffset"))   return "0x" + hex(maskDigitOffset);  if (x.equals("maskDigit"))   return "0x" + hex(maskDigit);  if (x.equals("shiftNumericType"))   return Long.toString(shiftNumericType);  if (x.equals("maskNumericType"))   return "0x" + hex(maskNumericType);  if (x.equals("valueNotNumeric"))   return "0x" + hex8(valueNotNumeric);  if (x.equals("valueDigit"))   return "0x" + hex8(valueDigit);  if (x.equals("valueStrangeNumeric"))   return "0x" + hex8(valueStrangeNumeric);  if (x.equals("valueJavaSupradecimal"))   return "0x" + hex8(valueJavaSupradecimal);  if (x.equals("valueDigit"))   return "0x" + hex8(valueDigit);  if (x.equals("valueStrangeNumeric"))   return "0x" + hex8(valueStrangeNumeric);  if (x.equals("maskType"))   return "0x" + hex(maskType);  if (x.equals("shiftBidi"))   return Long.toString(shiftBidi);  if (x.equals("maskBidi"))   return "0x" + hex(maskBidi);  if (x.equals("maskMirrored"))   return "0x" + hex8(maskMirrored);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.UNASSIGNED][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.UNASSIGNED);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.UPPERCASE_LETTER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.UPPERCASE_LETTER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.LOWERCASE_LETTER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.LOWERCASE_LETTER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.TITLECASE_LETTER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.TITLECASE_LETTER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.MODIFIER_LETTER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.MODIFIER_LETTER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.OTHER_LETTER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.OTHER_LETTER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.NON_SPACING_MARK][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.NON_SPACING_MARK);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.ENCLOSING_MARK][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.ENCLOSING_MARK);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.COMBINING_SPACING_MARK][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.COMBINING_SPACING_MARK);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.DECIMAL_DIGIT_NUMBER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DECIMAL_DIGIT_NUMBER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.OTHER_NUMBER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.OTHER_NUMBER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.SPACE_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.SPACE_SEPARATOR);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.LINE_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.LINE_SEPARATOR);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.PARAGRAPH_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.PARAGRAPH_SEPARATOR);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.CONTROL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.CONTROL);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.FORMAT][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.FORMAT);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.PRIVATE_USE][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.PRIVATE_USE);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.SURROGATE][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.SURROGATE);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.DASH_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DASH_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.START_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.START_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.END_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.END_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.INITIAL_QUOTE_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.INITIAL_QUOTE_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.FINAL_QUOTE_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.FINAL_QUOTE_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.CONNECTOR_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.CONNECTOR_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.OTHER_PUNCTUATION][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.OTHER_PUNCTUATION);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.LETTER_NUMBER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.LETTER_NUMBER);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.MATH_SYMBOL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.MATH_SYMBOL);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.CURRENCY_SYMBOL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.CURRENCY_SYMBOL);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.MODIFIER_SYMBOL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.MODIFIER_SYMBOL);  if (x.equals(UnicodeSpec.generalCategoryList[UnicodeSpec.OTHER_SYMBOL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.OTHER_SYMBOL);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_ARABIC_NUMBER][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_ARABIC_NUMBER);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_NONSPACING_MARK][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_NONSPACING_MARK);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_BOUNDARY_NEUTRAL][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_BOUNDARY_NEUTRAL);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_PARAGRAPH_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_PARAGRAPH_SEPARATOR);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_SEGMENT_SEPARATOR][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_SEGMENT_SEPARATOR);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_WHITESPACE][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_WHITESPACE);  if (x.equals(UnicodeSpec.bidiCategoryList[UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS][UnicodeSpec.LONG]))   return Integer.toString(UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS);  FAIL("Unknown text substitution marker " + commandMarker + x);  return commandMarker + x;}  }
class C{  public ConnectionHandler(Socket socket){  super("ConnectionHandler");  this.socket=socket;}  }
class C{  private void handleGroupBy(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {  final ASTGroupClause groupNode=astQuery.getGroupClause();  if (groupNode == null)   return;  final GroupByNode groupBy=(GroupByNode)groupNode.jjtAccept(this,null);  queryRoot.setGroupBy(groupBy);}  }
class C{  private void checkEqual(String label,String actual,String expect){  if (!actual.equals(expect)) {    error("Unexpected value for " + label + "; actual="+ actual+ ", expected="+ expect);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean handleEntry(File file){  boolean continueWandering=true;  try {    String[] filenames=file.list();    boolean dirTest=false;    boolean not14=false;    try {      java.lang.reflect.Method method=file.getClass().getDeclaredMethod("isDirectory",(Class[])null);      Object obj=method.invoke(file,(Object[])null);      if (obj instanceof Boolean) {        dirTest=((Boolean)obj).booleanValue();      }    } catch (    NoSuchMethodException nsme) {      not14=true;    }catch (    SecurityException se) {      not14=true;    }catch (    IllegalAccessException iae) {      not14=true;    }catch (    IllegalArgumentException iae2) {      not14=true;    }catch (    java.lang.reflect.InvocationTargetException ite) {      not14=true;    }    if (not14) {      dirTest=(filenames != null);    }    if (dirTest) {      if (isTopToBottom()) {        continueWandering=callback.handleDirectory(file);        if (continueWandering) {          continueWandering=handleDirectory(file,filenames);        }      } else {        handleDirectory(file,filenames);        callback.handleDirectory(file);      }    } else {      continueWandering=callback.handleFile(file);    }  } catch (  NullPointerException npe) {    System.out.println("null pointer exception");  }catch (  SecurityException se) {  }  return continueWandering;}  }
class C{  public List<AudioSessionInfo> listAudioSessions(){  return listAudioSessions(-1);}  }
class C{  public static ForClause create(){  return new ForClause();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:21.644 -0400",hash_original_method="EDA93575A1EBF0C0CDB929A6D82FC02A",hash_generated_method="B564D302A45634460AF38E888A7E5604") public InvalidCredentialsException(){  super();}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println(String.format("Usage: %s <project-name>",CreateCustomMetric.class.getSimpleName()));    return;  }  String project=args[0];  String projectResource="projects/" + project;  Monitoring monitoringService=ListResources.authenticate();  CreateCustomMetric metricWriter=new CreateCustomMetric(monitoringService,projectResource);  MetricDescriptor metricDescriptor=metricWriter.createCustomMetric();  System.out.println("listMetricDescriptors response");  System.out.println(metricDescriptor.toPrettyString());  while (metricWriter.getCustomMetric() == null) {    Thread.sleep(2000);  }  metricWriter.writeCustomMetricTimeseriesValue();  Thread.sleep(3000);  ListTimeSeriesResponse response=metricWriter.readTimeseriesValue();  System.out.println("reading custom metric timeseries");  System.out.println(response.toPrettyString());}  }
class C{  public void testKeyStore01(){  String propName="keystore.type";  String defKSType=Security.getProperty(propName);  String dType=KeyStore.getDefaultType();  String resType=defKSType;  if (resType == null) {    resType=defaultType;  }  assertNotNull("Default type have not be null",dType);  assertEquals("Incorrect default type",dType,resType);  if (defKSType == null) {    Security.setProperty(propName,defaultType);    dType=KeyStore.getDefaultType();    resType=Security.getProperty(propName);    assertNotNull("Incorrect default type",resType);    assertNotNull("Default type have not be null",dType);    assertEquals("Incorrect default type",dType,resType);  }}  }
class C{  protected boolean processQueryParameters(Trace trace,Node node){  boolean ret=false;  Set<Property> queryString=node.getProperties(Constants.PROP_HTTP_QUERY);  if (!queryString.isEmpty()) {    StringTokenizer st=new StringTokenizer(queryString.iterator().next().getValue(),"&");    while (st.hasMoreTokens()) {      String token=st.nextToken();      String[] namevalue=token.split("=");      if (namevalue.length == 2) {        if (queryParameters.contains(namevalue[0])) {          try {            node.getProperties().add(new Property(namevalue[0],URLDecoder.decode(namevalue[1],"UTF-8")));            ret=true;          } catch (          UnsupportedEncodingException e) {            if (log.isLoggable(Level.FINEST)) {              log.finest("Failed to decode value '" + namevalue[1] + "': "+ e);            }          }        } else         if (log.isLoggable(Level.FINEST)) {          log.finest("Ignoring query parameter '" + namevalue[0] + "'");        }      } else       if (log.isLoggable(Level.FINEST)) {        log.finest("Query string part does not include name/value pair: " + token);      }    }  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.418 -0500",hash_original_method="D7A41CF31988627D95B578BB3BBF9822",hash_generated_method="9630959A166C23AFBB0C2214C1D71B34") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RAckParser.parse");  RAck rack=new RAck();  try {    headerName(TokenTypes.RACK);    rack.setHeaderName(SIPHeaderNames.RACK);    try {      String number=this.lexer.number();      rack.setRSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      number=this.lexer.number();      rack.setCSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      rack.setMethod(token.getTokenValue());    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rack;  }  finally {    if (debug)     dbg_leave("RAckParser.parse");  }}  }
class C{  public static boolean isTouchAccessiblityEnabled(Context context){  AccessibilityManager am=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);  boolean isAccessibilityEnabled=am.isEnabled();  boolean isTouchExplorationEnabled=am.isTouchExplorationEnabled();  return isAccessibilityEnabled || isTouchExplorationEnabled;}  }
class C{  public static GlobalGroupId create(String xRoadInstance,String groupCode){  validateField("xRoadInstance",xRoadInstance);  validateField("groupCode",groupCode);  return new GlobalGroupId(xRoadInstance,groupCode);}  }
class C{  public int size(){  return mSize;}  }
class C{  public static void sort(int[] data,int start,int end,IntegerComparator comp){  quickSort(data,start,end,comp);}  }
class C{  public void executionDetailsEnd(ConcurrentHashMap<Integer,TradeOrder> execDetails){}  }
class C{  @Override public List<AnalyticJob> fetchAnalyticJobs() throws IOException, AuthenticationException {  List<AnalyticJob> appList=new ArrayList<AnalyticJob>();  _currentTime=System.currentTimeMillis() - FETCH_DELAY;  updateAuthToken();  logger.info("Fetching recent finished application runs between last time: " + (_lastTime + 1) + ", and current time: "+ _currentTime);  URL succeededAppsURL=new URL(new URL("http://" + _resourceManagerAddress),String.format("/ws/v1/cluster/apps?finalStatus=SUCCEEDED&finishedTimeBegin=%s&finishedTimeEnd=%s",String.valueOf(_lastTime + 1),String.valueOf(_currentTime)));  logger.info("The succeeded apps URL is " + succeededAppsURL);  List<AnalyticJob> succeededApps=readApps(succeededAppsURL);  appList.addAll(succeededApps);  URL failedAppsURL=new URL(new URL("http://" + _resourceManagerAddress),String.format("/ws/v1/cluster/apps?finalStatus=FAILED&finishedTimeBegin=%s&finishedTimeEnd=%s",String.valueOf(_lastTime + 1),String.valueOf(_currentTime)));  List<AnalyticJob> failedApps=readApps(failedAppsURL);  logger.info("The failed apps URL is " + failedAppsURL);  appList.addAll(failedApps);  while (!_retryQueue.isEmpty()) {    appList.add(_retryQueue.poll());  }  _lastTime=_currentTime;  return appList;}  }
class C{  @SuppressWarnings("unchecked") public static void main(final String[] args) throws ClassNotFoundException {  final JUnitCore jUnitCore=new JUnitCore();  if (CAPTURE_OUTPUT) {    jUnitCore.addListener(new OutputListener());  }  jUnitCore.addListener(new TextListener(new RealSystem()));  final TimingListener timing;  if (COLLECT_TIMINGS) {    timing=new TimingListener();    jUnitCore.addListener(timing);  } else {    timing=null;  }  if (PRINT_FAILURES) {    jUnitCore.addListener(new FailureListener());  }  if (PRINT_NAMES) {    jUnitCore.addListener(new NameListener());  }  jUnitCore.addListener(new NewLineListener());  final List<Result> results=new ArrayList<>();  if (args.length > 0) {    for (    final String arg : args) {      final Class<?> klass=ClassLoader.getSystemClassLoader().loadClass(arg);      results.add(jUnitCore.run(klass));    }  } else {    final Class<?>[] classes=getClasses();    results.add(jUnitCore.run(classes));  }  if (timing != null) {    final Map<String,Long> timings=timing.getTimings(LONG_TEST_THRESHOLD);    if (timings.size() > 1) {      System.out.println();      System.out.println("Long tests");      for (      Map.Entry<String,Long> entry : timings.entrySet()) {        System.out.println(formatTimeRow(entry.getKey(),entry.getValue(),TIMING_WIDTH));      }    }  }  for (  Result result : results) {    if (!result.wasSuccessful()) {      System.exit(1);    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  initializeDownloadUI();  if (!expansionFilesDelivered()) {    try {      Intent launchIntent=SampleDownloaderActivity.this.getIntent();      Intent intentToLaunchThisActivityFromNotification=new Intent(SampleDownloaderActivity.this,SampleDownloaderActivity.this.getClass());      intentToLaunchThisActivityFromNotification.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);      intentToLaunchThisActivityFromNotification.setAction(launchIntent.getAction());      if (launchIntent.getCategories() != null) {        for (        String category : launchIntent.getCategories()) {          intentToLaunchThisActivityFromNotification.addCategory(category);        }      }      PendingIntent pendingIntent=PendingIntent.getActivity(SampleDownloaderActivity.this,0,intentToLaunchThisActivityFromNotification,PendingIntent.FLAG_UPDATE_CURRENT);      int startResult=DownloaderClientMarshaller.startDownloadServiceIfRequired(this,pendingIntent,SampleDownloaderService.class);      if (startResult != DownloaderClientMarshaller.NO_DOWNLOAD_REQUIRED) {        initializeDownloadUI();        return;      }    } catch (    NameNotFoundException e) {      Log.e(LOG_TAG,"Cannot find own package! MAYDAY!");      e.printStackTrace();    }  } else {    validateXAPKZipFiles();  }}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  @Override public void ambientLight(float r,float g,float b,float x,float y,float z){  enableLighting();  if (lightCount == PGL.MAX_LIGHTS) {    throw new RuntimeException("can only create " + PGL.MAX_LIGHTS + " lights");  }  lightType[lightCount]=AMBIENT;  lightPosition(lightCount,x,y,z,false);  lightNormal(lightCount,0,0,0);  lightAmbient(lightCount,r,g,b);  noLightDiffuse(lightCount);  noLightSpecular(lightCount);  noLightSpot(lightCount);  lightFalloff(lightCount,currentLightFalloffConstant,currentLightFalloffLinear,currentLightFalloffQuadratic);  lightCount++;}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.394 -0400",hash_original_method="D4D1A27073CB69531CAF258DC4B9AC95",hash_generated_method="98754A432EB9D8F169AE9477EF7D9E8E") public boolean isCaseSensitive(){  return sensitive;}  }
class C{  public Flag registerOptional(final char nameChar,final String name,final Class<?> type,final String usage,final String description){  return registerOptional(nameChar,name,type,usage,description,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.656 -0500",hash_original_method="BAD19EAB09738DBB9663648D63DFE74C",hash_generated_method="20C24386DF433EE5A344EEACFE69F45D") public boolean containsAll(Collection<?> c){  return al.containsAll(c);}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  private void validateUserAssignmentForSubscribing(VOService product,List<VOUsageLicense> users) throws ObjectNotFoundException, OperationNotPermittedException {  Product prod=dataManager.getReference(Product.class,product.getKey());  if (users == null) {    return;  }  for (  VOUsageLicense lic : users) {    getAndCheckServiceRole(lic,prod);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);  mThread.start();}  }
class C{  public Collection<?> toCollection() throws SQLException {  TreeMap<Integer,Object> tMap=new TreeMap<>();  for (int i=0; i < numRows; i++) {    tMap.put(i,rvh.get(i));  }  return (tMap.values());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private int compareDate(Date v1,Date v2){  return v1.compareTo(v2) * -1;}  }
class C{  public void showScores(boolean flag){  mShowScores=flag;  SwingUtilities.invokeLater(null);}  }
class C{  public void putLength(int len) throws IOException {  if (len < 128) {    write((byte)len);  } else   if (len < (1 << 8)) {    write((byte)0x081);    write((byte)len);  } else   if (len < (1 << 16)) {    write((byte)0x082);    write((byte)(len >> 8));    write((byte)len);  } else   if (len < (1 << 24)) {    write((byte)0x083);    write((byte)(len >> 16));    write((byte)(len >> 8));    write((byte)len);  } else {    write((byte)0x084);    write((byte)(len >> 24));    write((byte)(len >> 16));    write((byte)(len >> 8));    write((byte)len);  }}  }
class C{  public static ListMultimap<String,String> parse(String query){  checkNotNull(query);  ArrayListMultimap<String,String> map=ArrayListMultimap.create();  if (!query.isEmpty()) {    int start=0;    while (start <= query.length()) {      int ampersandIndex=query.indexOf('&',start);      if (ampersandIndex == -1) {        ampersandIndex=query.length();      }      int equalsIndex=query.indexOf('=',start);      if (equalsIndex > ampersandIndex) {        equalsIndex=-1;      }      int paramNameEndIndex=(equalsIndex == -1) ? ampersandIndex : equalsIndex;      String name=decodeString(query,start,paramNameEndIndex);      String value=(equalsIndex == -1) ? "" : decodeString(query,equalsIndex + 1,ampersandIndex);      map.put(name,value);      start=ampersandIndex + 1;    }  }  return map;}  }
class C{  @Override protected View onCreateView(String name,AttributeSet attrs) throws ClassNotFoundException {  View view=null;  for (  String prefix : CLASS_PREFIX_LIST) {    try {      view=createView(name,prefix,attrs);    } catch (    ClassNotFoundException ignored) {    }  }  if (view == null)   view=super.onCreateView(name,attrs);  return mDecorFactory.onViewCreated(view,name,null,view.getContext(),attrs);}  }
class C{  static public double yn(int n,double x) throws ArithmeticException {  double by, bym, byp, tox;  if (n == 0)   return y0(x);  if (n == 1)   return y1(x);  tox=2.0 / x;  by=y1(x);  bym=y0(x);  for (int j=1; j < n; j++) {    byp=j * tox * by - bym;    bym=by;    by=byp;  }  return by;}  }
class C{  public void loadInitLanguages(String filePath) throws Exception {  loadCountriesFiles(filePath);  loadTimeZoneFiles(filePath);  LinkedHashMap<Integer,LinkedHashMap<String,Object>> listlanguages=this.getLanguageFiles(filePath);  boolean langFieldIdIsInited=false;  for (Iterator<Integer> itLang=listlanguages.keySet().iterator(); itLang.hasNext(); ) {    Integer langId=itLang.next();    LinkedHashMap<String,Object> lang=listlanguages.get(langId);    log.debug("loadInitLanguages lang: " + lang);    String langName=(String)lang.get("name");    String rtl=(String)lang.get("rtl");    String code=(String)lang.get("code");    log.debug("loadInitLanguages rtl from xml: " + rtl);    Boolean langRtl=false;    if (rtl != null && rtl.equals("true"))     langRtl=true;    Long languages_id=fieldLanguageDaoImpl.addLanguage(langName,langRtl,code);    SAXReader reader=new SAXReader();    Document document=reader.read(new File(filePath,langName + ".xml"));    Element root=document.getRootElement();    for (@SuppressWarnings("rawtypes") Iterator it=root.elementIterator("string"); it.hasNext(); ) {      Element item=(Element)it.next();      Long id=Long.valueOf(item.attributeValue("id")).longValue();      String name=item.attributeValue("name");      String value="";      for (@SuppressWarnings("rawtypes") Iterator t2=item.elementIterator("value"); t2.hasNext(); ) {        Element val=(Element)t2.next();        value=val.getText();      }      Fieldvalues fv=null;      if (!langFieldIdIsInited) {        fv=fieldmanagment.addField(name);      } else {        fv=fieldmanagment.getFieldvaluesById(id);      }      fieldmanagment.addFieldValueByFieldAndLanguage(fv,languages_id,value);    }    log.debug("Lang ADDED: " + lang);    if (!langFieldIdIsInited)     langFieldIdIsInited=true;  }}  }
class C{  public static void i(String tag,String s,Object... args){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));}  }
class C{  public Document[] readDocs(DocList ids) throws IOException {  Document[] docs=new Document[ids.size()];  readDocs(docs,ids);  return docs;}  }
class C{  public void constructHopsForIterablePredicate(ForStatementBlock fsb) throws ParseException {  HashMap<String,Hop> _ids=new HashMap<String,Hop>();  ForStatement fs=(ForStatement)fsb.getStatement(0);  IterablePredicate ip=fs.getIterablePredicate();  for (int i=0; i < 3; i++) {    VariableSet varsRead=null;    if (i == 0)     varsRead=ip.getFromExpr().variablesRead(); else     if (i == 1)     varsRead=ip.getToExpr().variablesRead(); else     if (ip.getIncrementExpr() != null)     varsRead=ip.getIncrementExpr().variablesRead();    if (varsRead != null) {      for (      String varName : varsRead.getVariables().keySet()) {        DataIdentifier var=fsb.liveIn().getVariable(varName);        DataOp read=null;        if (var == null) {          LOG.error("variable '" + varName + "' is not available for iterable predicate");          throw new ParseException("variable '" + varName + "' is not available for iterable predicate");        } else {          long actualDim1=(var instanceof IndexedIdentifier) ? ((IndexedIdentifier)var).getOrigDim1() : var.getDim1();          long actualDim2=(var instanceof IndexedIdentifier) ? ((IndexedIdentifier)var).getOrigDim2() : var.getDim2();          read=new DataOp(var.getName(),var.getDataType(),var.getValueType(),DataOpTypes.TRANSIENTREAD,null,actualDim1,actualDim2,var.getNnz(),var.getRowsInBlock(),var.getColumnsInBlock());          read.setAllPositions(var.getBeginLine(),var.getBeginColumn(),var.getEndLine(),var.getEndColumn());        }        _ids.put(varName,read);      }    }    if (i == 0)     fsb.setFromHops(processTempIntExpression(ip.getFromExpr(),_ids)); else     if (i == 1)     fsb.setToHops(processTempIntExpression(ip.getToExpr(),_ids)); else     if (ip.getIncrementExpr() != null)     fsb.setIncrementHops(processTempIntExpression(ip.getIncrementExpr(),_ids));  }}  }
class C{  public void enqueueJob(GeoServiceJob job) throws Exception {  log.info("post job {} task {} type {}",new Object[]{job.getVdcId(),job.getTask(),job.getType()});  if (_queue == null) {    startJobQueue();  }  _queue.put(job);}  }
class C{  private void run2() throws InterruptedException {  boolean firstLogIteration=true;synchronized (loggerLock) {    while (true) {      int sleepMillis=getLogInterval();      if (firstLogIteration) {        firstLogIteration=false;        sleepMillis/=2;      }      loggerLock.wait(sleepMillis);      PRHARedundancyProvider rp=region.getRedundancyProvider();      if (rp != null && rp.isPersistentRecoveryComplete()) {        break;      }      if (missingChildren.isEmpty()) {        break;      }      logMissingRegions(region);    }  }}  }
class C{  private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  boolean foundDorDS=false;  boolean foundSelf=false;  boolean foundDS=false;  int nodeTestType=OpCodes.NODETYPE_NODE;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false;    stepCount++;    if (stepCount > 3)     return false;    boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType);    if (mightBeProximate)     return false;switch (stepType) {case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:      return false;case OpCodes.FROM_ROOT:    if (1 != stepCount)     return false;  break;case OpCodes.FROM_CHILDREN:if (!foundDS && !(foundDorDS && foundSelf)) return false;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:foundDS=true;case OpCodes.FROM_DESCENDANTS:if (3 == stepCount) return false;foundDorDS=true;break;case OpCodes.FROM_SELF:if (1 != stepCount) return false;foundSelf=true;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}nodeTestType=compiler.getStepTestType(stepOpCodePos);int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) {if (compiler.countPredicates(stepOpCodePos) > 0) {return false;}}stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.924 -0500",hash_original_method="A73BACA3B4E038192E965F607F850638",hash_generated_method="76CBEB04D25F4B740E807CEBA3814F28") @DSVerified @DSSpec(DSCat.IO) public static String md5Hex(InputStream data) throws IOException {  return Hex.encodeHexString(md5(data));}  }
class C{  void writeInBackground(){  if (closed) {    return;  }  long time=getTimeSinceCreation();  if (time <= lastCommitTime + autoCommitDelay) {    return;  }  if (hasUnsavedChanges()) {    try {      commitAndSave();    } catch (    Exception e) {      if (backgroundExceptionHandler != null) {        backgroundExceptionHandler.uncaughtException(null,e);        return;      }    }  }  if (autoCompactFillRate > 0) {    try {      boolean fileOps;      long fileOpCount=fileStore.getWriteCount() + fileStore.getReadCount();      if (autoCompactLastFileOpCount != fileOpCount) {        fileOps=true;      } else {        fileOps=false;      }      int fillRate=fileOps ? autoCompactFillRate / 3 : autoCompactFillRate;      compact(fillRate,autoCommitMemory);      autoCompactLastFileOpCount=fileStore.getWriteCount() + fileStore.getReadCount();    } catch (    Exception e) {      if (backgroundExceptionHandler != null) {        backgroundExceptionHandler.uncaughtException(null,e);      }    }  }}  }
class C{  public static boolean clearCacheFilesAndDirs(){  assert isInitialized || SD_CACHE_PATH != null : SD_CARD_HELPER_INIT_ERR;  final File cacheDir=getCacheDir();  if (!cacheDir.exists())   return false;  FileUtils.deleteFilesAndDirsRecursive(cacheDir);  return true;}  }
class C{  private void discoverTopology(ProtectionSystem protectionSystem) throws RecoverPointException {  RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);  StringSet topologySet=new StringSet();  topologySet.addAll(rp.getClusterTopology());  protectionSystem.setClusterTopology(topologySet);}  }
class C{  public Double3D(final Int2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  public void add(int index,Object element){  if (index > size || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  }  ensureCapacity(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  public int compareTo(IVariable<E> o){  return name.compareTo(o.getName());}  }
class C{  static double mypdf(double value,double shape,double scale){  return Math.exp((shape - 1) * Math.log(value) - value / scale - GammaFunction.logGamma(shape) - shape * Math.log(scale));}  }
class C{  public Map<String,Object> addToCart(String catalogId,String shoppingListId,String shoppingListItemSeqId,String productId,String productCategoryId,String itemType,String itemDescription,BigDecimal price,BigDecimal amount,BigDecimal quantity,java.sql.Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,java.sql.Timestamp shipBeforeDate,java.sql.Timestamp shipAfterDate,ProductConfigWrapper configWrapper,String itemGroupNumber,Map<String,? extends Object> context,String parentProductId){  Map<String,Object> result=null;  Map<String,Object> attributes=null;  String pProductId=null;  pProductId=parentProductId;  if (productId == null && price != null && price.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.price_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (quantity.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (amount != null && amount.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.amount_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  String ddDate=(String)context.get("itemDesiredDeliveryDate");  if (!UtilValidate.isEmpty(ddDate)) {    try {      java.sql.Timestamp.valueOf((String)context.get("itemDesiredDeliveryDate"));    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidDesiredDeliveryDateSyntaxError",this.cart.getLocale()));    }  } else {    context.remove("itemDesiredDeliveryDate");  }  String comment=(String)context.get("itemComment");  if (UtilValidate.isEmpty(comment)) {    context.remove("itemComment");  }  if (!UtilValidate.isEmpty(context.get("useAsDefaultDesiredDeliveryDate"))) {    cart.setDefaultItemDeliveryDate((String)context.get("itemDesiredDeliveryDate"));  } else {    cart.setDefaultItemDeliveryDate(null);  }  if (!UtilValidate.isEmpty(context.get("useAsDefaultComment"))) {    cart.setDefaultItemComment((String)context.get("itemComment"));  } else {    cart.setDefaultItemComment(null);  }  for (int namesIdx=0; namesIdx < ShoppingCartItem.attributeNames.length; namesIdx++) {    if (attributes == null)     attributes=new HashMap<String,Object>();    if (context.containsKey(ShoppingCartItem.attributeNames[namesIdx])) {      attributes.put(ShoppingCartItem.attributeNames[namesIdx],context.get(ShoppingCartItem.attributeNames[namesIdx]));    }  }  GenericValue product=null;  if (productId != null) {    try {      product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Unable to lookup product : " + productId,module);    }    if (product == null || product.get("requireAmount") == null || "N".equals(product.getString("requireAmount"))) {      amount=null;    }    Debug.logInfo("carthelper productid " + productId,module);    Debug.logInfo("parent productid " + pProductId,module);  }  Map<String,Object> selectedFeatures=UtilHttp.makeParamMapWithPrefix(context,null,"FT",null);  Map<String,GenericValue> additionalFeaturesMap=FastMap.newInstance();  for (  String selectedFeatureType : selectedFeatures.keySet()) {    String selectedFeatureValue=(String)selectedFeatures.get(selectedFeatureType);    if (UtilValidate.isNotEmpty(selectedFeatureValue)) {      GenericValue productFeatureAndAppl=null;      try {        productFeatureAndAppl=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId",selectedFeatureType,"productFeatureId",selectedFeatureValue).filterByDate().queryFirst();      } catch (      GenericEntityException gee) {        Debug.logError(gee,module);      }      if (UtilValidate.isNotEmpty(productFeatureAndAppl)) {        productFeatureAndAppl.set("productFeatureApplTypeId","STANDARD_FEATURE");      }      additionalFeaturesMap.put(selectedFeatureType,productFeatureAndAppl);    }  }  Map<String,String> orderItemAttributes=FastMap.newInstance();  String orderItemAttributePrefix=EntityUtilProperties.getPropertyValue("order.properties","order.item.attr.prefix",delegator);  for (  Entry<String,? extends Object> entry : context.entrySet()) {    if (entry.getKey().toString().contains(orderItemAttributePrefix) && UtilValidate.isNotEmpty(entry.getValue())) {      orderItemAttributes.put(entry.getKey().replaceAll(orderItemAttributePrefix,""),entry.getValue().toString());    }  }  int itemId=-1;  try {    if (productId != null) {      itemId=cart.addOrIncreaseItem(productId,amount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,additionalFeaturesMap,attributes,orderItemAttributes,catalogId,configWrapper,itemType,itemGroupNumber,pProductId,dispatcher);    } else {      itemId=cart.addNonProductItem(itemType,itemDescription,productCategoryId,price,quantity,attributes,catalogId,itemGroupNumber,dispatcher);    }    if (itemId > -1 && shoppingListId != null && shoppingListItemSeqId != null) {      ShoppingCartItem item=cart.findCartItem(itemId);      item.setShoppingList(shoppingListId,shoppingListItemSeqId);    }  } catch (  CartItemModifyException e) {    if (cart.getOrderType().equals("PURCHASE_ORDER")) {      String errMsg=UtilProperties.getMessage(resource_error,"cart.product_not_valid_for_supplier",this.cart.getLocale());      errMsg=errMsg + " (" + e.getMessage()+ ")";      result=ServiceUtil.returnError(errMsg);    } else {      result=ServiceUtil.returnError(e.getMessage());    }    return result;  }catch (  ItemNotFoundException e) {    result=ServiceUtil.returnError(e.getMessage());    return result;  }  result=ServiceUtil.returnSuccess();  if (itemId != -1) {    result.put("itemId",new Integer(itemId));  }  return result;}  }
class C{  public TimestampValuePair(){  this.timestamp=-1;  this.value=new byte[0];  this.hashedValue=new byte[0];}  }
class C{  public ImportDirectorImplService(final String pathToArchiveDirectory,final String pathToImportDirectory,final DataDescriptorResolver<ImportDescriptor> dataDescriptorResolver,final TaskExecutor executor,final NodeService nodeService,final SystemService systemService,final ZipUtils zipUtils,final FederationFacade federationFacade){  super(executor);  this.pathToArchiveDirectory=pathToArchiveDirectory;  this.pathToImportDirectory=pathToImportDirectory;  this.dataDescriptorResolver=dataDescriptorResolver;  this.nodeService=nodeService;  this.systemService=systemService;  this.zipUtils=zipUtils;  this.federationFacade=federationFacade;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public Buffer minDistance(String minDistance){  this.minDistance=minDistance;  return this;}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public VOParameterDefinition(ParameterType parameterType,String parameterId,String description,ParameterValueType valueType,String defaultValue,Long minValue,Long maxValue,boolean mandatory,boolean configurable,ParameterModificationType modificationType,List<VOParameterOption> parameterOptions){  super();  this.parameterType=parameterType;  this.parameterId=parameterId;  this.description=description;  this.valueType=valueType;  this.defaultValue=defaultValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.configurable=configurable;  this.mandatory=mandatory;  this.parameterOptions=parameterOptions;  this.modificationType=modificationType;}  }
class C{  static public MutableString wrap(final char[] a,final int length){  MutableString s=new MutableString(0);  s.array=a;  s.hashLength=length;  return s;}  }
class C{  public void testBug3620() throws SQLException {  if (isRunningOnJRockit()) {    return;  }  final long epsillon=3000;  TimeZone defaultTimeZone=TimeZone.getDefault();  try {    TimeZone.setDefault(TimeZone.getTimeZone("America/Chicago"));    createTable("testBug3620","(field1 TIMESTAMP) ENGINE=InnoDB");    Properties props=new Properties();    props.put("cacheDefaultTimezone","false");    Connection connNoTz=getConnectionWithProps(props);    PreparedStatement tsPstmt=connNoTz.prepareStatement("INSERT INTO testBug3620 VALUES (?)");    Calendar pointInTime=Calendar.getInstance();    pointInTime.set(2004,02,29,10,0,0);    long pointInTimeOffset=pointInTime.getTimeZone().getRawOffset();    Timestamp ts=new Timestamp(pointInTime.getTime().getTime());    tsPstmt.setTimestamp(1,ts);    tsPstmt.executeUpdate();    this.rs=connNoTz.createStatement().executeQuery("SELECT field1 FROM testBug3620");    this.rs.next();    String tsValueAsString=new String(this.rs.getBytes(1));    Timestamp tsValueAsTimestamp=this.rs.getTimestamp(1);    System.out.println("Timestamp as String, inserted with no calendar: " + tsValueAsString.toString());    System.out.println("Timestamp as Timestamp, inserted with no calendar: " + tsValueAsTimestamp);    connNoTz.createStatement().executeUpdate("DELETE FROM testBug3620");    Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("UTC"));    props.put("useTimezone","true");    props.put("serverTimezone","UTC");    Connection connWithTz=getConnectionWithProps(props);    Statement tsStmt=connWithTz.createStatement();    tsPstmt=connWithTz.prepareStatement("INSERT INTO testBug3620 VALUES (?)");    tsPstmt.setTimestamp(1,ts,cal);    tsPstmt.executeUpdate();    this.rs=connNoTz.createStatement().executeQuery("SELECT field1 FROM testBug3620");    this.rs.next();    tsValueAsString=new String(this.rs.getBytes(1));    tsValueAsTimestamp=this.rs.getTimestamp(1);    System.out.println("Timestamp as String, inserted with UTC calendar: " + tsValueAsString.toString());    System.out.println("Timestamp as Timestamp, inserted with UTC calendar: " + tsValueAsTimestamp);    this.rs=tsStmt.executeQuery("SELECT field1 FROM testBug3620");    this.rs.next();    Timestamp tsValueUTC=this.rs.getTimestamp(1,cal);    System.out.println("Timestamp specifying UTC calendar from statement: " + tsValueUTC.toString());    this.rs=tsStmt.executeQuery("SELECT field1 FROM testBug3620");    this.rs.next();    Timestamp tsValueStmtNoCal=this.rs.getTimestamp(1);    System.out.println("Timestamp specifying no calendar from statement: " + tsValueStmtNoCal.toString());    PreparedStatement tsPstmtRetr=connWithTz.prepareStatement("SELECT field1 FROM testBug3620");    this.rs=tsPstmtRetr.executeQuery();    this.rs.next();    Timestamp tsValuePstmtUTC=this.rs.getTimestamp(1,cal);    System.out.println("Timestamp specifying UTC calendar from prepared statement: " + tsValuePstmtUTC.toString());    this.rs=tsPstmtRetr.executeQuery();    this.rs.next();    Timestamp tsValuePstmtNoCal=this.rs.getTimestamp(1);    System.out.println("Timestamp specifying no calendar from prepared statement: " + tsValuePstmtNoCal.toString());    long stmtDeltaTWithCal=(tsValueStmtNoCal.getTime() - ts.getTime());    long deltaOrig=Math.abs(stmtDeltaTWithCal - pointInTimeOffset);    assertTrue("Difference between original timestamp and timestamp retrieved using java.sql.Statement " + "set in database using UTC calendar is not ~= " + epsillon + " it is actually "+ deltaOrig,(deltaOrig < epsillon));    long pStmtDeltaTWithCal=(tsValuePstmtNoCal.getTime() - ts.getTime());    deltaOrig=Math.abs(pStmtDeltaTWithCal - pointInTimeOffset);    assertTrue("Difference between original timestamp and timestamp retrieved using java.sql.PreparedStatement " + "set in database using UTC calendar is not ~= " + epsillon + ", it is actually "+ deltaOrig,(deltaOrig < epsillon));    System.out.println("Difference between original ts and ts with no calendar: " + (tsValuePstmtNoCal.getTime() - ts.getTime()) + ", offset should be "+ pointInTimeOffset);  }  finally {    TimeZone.setDefault(defaultTimeZone);  }}  }
class C{  @Override protected void computeFields(){  int mask;  if (isPartiallyNormalized()) {    mask=getSetStateFields();    int fieldMask=~mask & ALL_FIELDS;    if (fieldMask != 0 || calsys == null) {      mask|=computeFields(fieldMask,mask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK));      assert mask == ALL_FIELDS;    }  } else {    mask=ALL_FIELDS;    computeFields(mask,0);  }  setFieldsComputed(mask);}  }
class C{  private Workflow.Method createCGMethod(URI vplexURI,URI cgURI,Collection<URI> vplexVolumeURIList){  return new Workflow.Method(CREATE_CG_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIList);}  }
class C{  public Field(String name,BytesRef bytes,IndexableFieldType type){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  if (bytes == null) {    throw new IllegalArgumentException("bytes must not be null");  }  this.fieldsData=bytes;  this.type=type;  this.name=name;}  }
class C{  public double liftForRule(AprioriItemSet premise,AprioriItemSet consequence,int consequenceCount){  double confidence=confidenceForRule(premise,consequence);  return confidence / ((double)consequenceCount / (double)m_totalTransactions);}  }
class C{  public static boolean isStruct(Object o){  if (o instanceof Struct)   return true; else   if (o instanceof Map)   return true; else   if (o instanceof Node)   return true;  return false;}  }
class C{  protected boolean updateToOneRelation(String fieldName,Set<PersistentResource> resourceIdentifiers,Set<PersistentResource> mine){  Object newValue=null;  PersistentResource newResource=null;  if (resourceIdentifiers != null && !resourceIdentifiers.isEmpty()) {    newResource=resourceIdentifiers.iterator().next();    newValue=newResource.getObject();  }  PersistentResource oldResource=!mine.isEmpty() ? mine.iterator().next() : null;  if (oldResource == null) {    if (newValue == null) {      return false;    }    checkSharePermission(resourceIdentifiers);  } else   if (oldResource.getObject().equals(newValue)) {    return false;  } else {    checkSharePermission(resourceIdentifiers);    if (hasInverseRelation(fieldName)) {      deleteInverseRelation(fieldName,oldResource.getObject());      oldResource.markDirty();    }  }  if (newValue != null) {    if (hasInverseRelation(fieldName)) {      addInverseRelation(fieldName,newValue);      newResource.markDirty();    }  }  this.setValueChecked(fieldName,newValue);  this.markDirty();  return true;}  }
class C{  public final void doFinal(byte[] output,int outOffset) throws ShortBufferException, IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  int macLen=getMacLength();  if (output == null || output.length - outOffset < macLen) {    throw new ShortBufferException("Cannot store MAC in output buffer");  }  byte[] mac=doFinal();  System.arraycopy(mac,0,output,outOffset,macLen);  return;}  }
class C{  public void add(Mention mention){  mentions.add(mention);  mention.addToCluster(this);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static String intToString(int i,int radix){  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return intToString(i);  }  boolean negative=false;  if (i < 0) {    negative=true;  } else {    i=-i;  }  int bufLen=radix < 8 ? 33 : 12;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    int q=i / radix;    buf[--cursor]=DIGITS[radix * q - i];    i=q;  } while (i != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  public boolean hasMoreWork(){  return !workList.isEmpty();}  }
class C{  public String processCallout(GridField field){  String callout=field.getCallout();  if (callout.length() == 0)   return "";  if (isProcessed() && !field.isAlwaysUpdateable())   return "";  Object value=field.getValue();  Object oldValue=field.getOldValue();  log.fine(field.getColumnName() + "=" + value+ " ("+ callout+ ") - old="+ oldValue);  StringTokenizer st=new StringTokenizer(callout,";,",false);  while (st.hasMoreTokens()) {    String cmd=st.nextToken().trim();    if (activeCallouts.contains(cmd))     continue;    String retValue="";    if (cmd.toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {      MRule rule=MRule.get(m_vo.ctx,cmd.substring(MRule.SCRIPT_PREFIX.length()));      if (rule == null) {        retValue="Callout " + cmd + " not found";        log.log(Level.SEVERE,retValue);        return retValue;      }      if (!(rule.getEventType().equals(MRule.EVENTTYPE_Callout) && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs))) {        retValue="Callout " + cmd + " must be of type JSR 223 and event Callout";        log.log(Level.SEVERE,retValue);        return retValue;      }      ScriptEngine engine=rule.getScriptEngine();      MRule.setContext(engine,m_vo.ctx,m_vo.WindowNo);      engine.put(MRule.ARGUMENTS_PREFIX + "WindowNo",m_vo.WindowNo);      engine.put(MRule.ARGUMENTS_PREFIX + "Tab",this);      engine.put(MRule.ARGUMENTS_PREFIX + "Field",field);      engine.put(MRule.ARGUMENTS_PREFIX + "Value",value);      engine.put(MRule.ARGUMENTS_PREFIX + "OldValue",oldValue);      engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",m_vo.ctx);      try {        activeCallouts.add(cmd);        retValue=engine.eval(rule.getScript()).toString();      } catch (      Exception e) {        log.log(Level.SEVERE,"",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallouts.remove(cmd);      }    } else {      Callout call=null;      String method=null;      int methodStart=cmd.lastIndexOf('.');      try {        if (methodStart != -1) {          Class<?> cClass=Class.forName(cmd.substring(0,methodStart));          call=(Callout)cClass.newInstance();          method=cmd.substring(methodStart + 1);        }      } catch (      Exception e) {        log.log(Level.SEVERE,"class",e);        return "Callout Invalid: " + cmd + " ("+ e.toString()+ ")";      }      if (call == null || method == null || method.length() == 0)       return "Callout Invalid: " + method;      try {        activeCallouts.add(cmd);        activeCalloutInstance.add(call);        retValue=call.start(m_vo.ctx,method,m_vo.WindowNo,this,field,value,oldValue);      } catch (      Exception e) {        log.log(Level.SEVERE,"start",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallouts.remove(cmd);        activeCalloutInstance.remove(call);      }    }    if (!Util.isEmpty(retValue)) {      log.severe(retValue);      return retValue;    }  }  return "";}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  public boolean isApply(){  return apply;}  }
class C{  public void messageAborted(String id,DTNHost from,int bytesRemaining){  this.router.messageAborted(id,from,bytesRemaining);}  }
class C{  @SuppressWarnings("rawtypes") public static Class protectionSystemClass(String systemType){  return RPController.class;}  }
class C{  public void printEntityReference(char[] name,boolean first) throws IOException {  if ((prettyPrinter.getFormat()) && (xmlSpace.get(0) != Boolean.TRUE) && first) {    printNewline();    printString(margin.toString());  }  printCharacter('&');  printCharacters(name);  printCharacter(';');}  }
class C{  public long longValue(){  return ((new Long(name)).longValue());}  }
class C{  public void clearCoRoutine(){  clearCoRoutine(true);}  }
class C{  public void reset(){  m_t=1;  m_dictionary=null;}  }
class C{  public static boolean canCast(ITypeBinding castType,ITypeBinding bindingToCast){  String voidName=PrimitiveType.VOID.toString();  if (castType.isAnonymous() || castType.isNullType() || voidName.equals(castType.getName())) {    throw new IllegalArgumentException();  }  if (castType == bindingToCast) {    return true;  }  if (voidName.equals(bindingToCast.getName())) {    return false;  }  if (bindingToCast.isArray()) {    if (!castType.isArray()) {      return isArrayCompatible(castType);    }    int toCastDim=bindingToCast.getDimensions();    int castTypeDim=castType.getDimensions();    if (toCastDim == castTypeDim) {      bindingToCast=bindingToCast.getElementType();      castType=castType.getElementType();      if (castType.isPrimitive() && castType != bindingToCast) {        return false;      }    } else     if (toCastDim < castTypeDim) {      return isArrayCompatible(bindingToCast.getElementType());    } else {      return isArrayCompatible(castType.getElementType());    }  }  if (castType.isPrimitive()) {    if (!bindingToCast.isPrimitive()) {      return false;    }    String boolName=PrimitiveType.BOOLEAN.toString();    return (!boolName.equals(castType.getName()) && !boolName.equals(bindingToCast.getName()));  } else {    if (bindingToCast.isPrimitive()) {      return false;    }    if (castType.isArray()) {      return isArrayCompatible(bindingToCast);    }    if (castType.isInterface()) {      if ((bindingToCast.getModifiers() & Modifier.FINAL) != 0) {        return Bindings.isSuperType(castType,bindingToCast);      } else {        return true;      }    }    if (bindingToCast.isInterface()) {      if ((castType.getModifiers() & Modifier.FINAL) != 0) {        return Bindings.isSuperType(bindingToCast,castType);      } else {        return true;      }    }    if (isJavaLangObject(castType)) {      return true;    }    return Bindings.isSuperType(bindingToCast,castType) || Bindings.isSuperType(castType,bindingToCast);  }}  }
class C{  @Override public void countExample(Example example){  double plabel;  double label=example.getValue(labelAttribute);  if (!predictedAttribute.isNominal()) {    plabel=example.getValue(predictedAttribute);  } else {    String labelS=example.getValueAsString(labelAttribute);    plabel=example.getConfidence(labelS);    label=1.0d;  }  double weight=1.0d;  if (weightAttribute != null) {    weight=example.getValue(weightAttribute);  }  double diff=weight * Math.abs(label - plabel);  deviationSum+=diff;  double relDiff=Math.abs(weight * label - (trueLabelSum / exampleCounter));  relativeSum+=relDiff;}  }
class C{  public Command showPacked(String position,boolean modal){  return showPackedImpl(position,modal,false);}  }
class C{  private static String nestedListToHtml(NestedList nl){  if (nl == null) {    return "null";  }  StringBuilder result=new StringBuilder();  if (nl.getClass() == NestedListElement.class) {    result.append("<li>\n" + contentElementToHtml((NestedListElement)nl) + "</li>\n");  } else {    result.append("<table class=\"NestedList\">\n" + "<tr><th class=\"NestedList\">NestedList</th></tr>\n" + "<tr><td class=\"NestedList\">");    result.append((((NestedListContainer)nl).isNumbered() ? "<ol>" : "<ul>") + "\n");    for (    NestedList nl2 : ((NestedListContainer)nl).getNestedLists()) {      result.append(nestedListToHtml(nl2));    }    result.append((((NestedListContainer)nl).isNumbered() ? "</ol>" : "</ul>") + "\n");    result.append("</td></tr>\n");    result.append("</table>\n");  }  return result.toString();}  }
class C{  public static boolean isAbstract(int flags){  return (flags & AccAbstract) != 0;}  }
class C{  public static <T>SerializableComparator<Pair<T,?>> byFirstOfPair(Comparator<? super T> comparator){  return new ByFirstOfPairComparator<>(comparator);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.934 -0500",hash_original_method="4ED17A6A0BD221C6F562FF187EDE0EC1",hash_generated_method="4C2692EB26E3BEAAD6C7D4E751D89554") public void union(float left,float top,float right,float bottom){  addTaintLocal(left + top + right+ bottom);}  }
class C{  public void addField(FieldRef fref){  mFieldRefs.add(fref);}  }
class C{  public Plane(double nx,double ny,double nz,double d){  if (nx == 0.0 && ny == 0.0 && nz == 0.0) {    String message=Logging.getMessage("Geom.Plane.VectorIsZero");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.n=new Vec4(nx,ny,nz,d);}  }
class C{  public SingletonIteration(E value){  this.value=new AtomicReference<E>(value);}  }
class C{  public NotificationChain basicSetBody(Block newBody,NotificationChain msgs){  Block oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_DECLARATION__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  final public void advancePosAndLimit(final int len){  if (len < 0)   throw new IllegalArgumentException();  ensureCapacity(pos + len);  this.pos+=len;  this.limit=this.pos;}  }
class C{  public sup addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private String sendStatusRequestWithRetry(ModifiableSolrParams params,int maxCounter) throws SolrServerException, IOException {  NamedList status=null;  String state=null;  String message=null;  NamedList r;  while (maxCounter-- > 0) {    r=sendRequest(params);    status=(NamedList)r.get("status");    state=(String)status.get("state");    message=(String)status.get("msg");    if (state.equals("completed") || state.equals("failed"))     return (String)status.get("msg");    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }  }  return message;}  }
class C{  public float invScaled(float length){  return length / factor;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public FuzzyBugComparator(){  if (DEBUG) {    System.out.println("Created fuzzy comparator");  }  this.bugCollectionMap=new IdentityHashMap<BugInstance,BugCollection>();}  }
class C{  protected void markComplete(MqttWireMessage msg,MqttException ex){  final String methodName="markComplete";  log.fine(CLASS_NAME,methodName,"404",new Object[]{getKey(),msg,ex});synchronized (responseLock) {    if (msg instanceof MqttAck) {      this.message=null;    }    this.pendingComplete=true;    this.response=msg;    this.exception=ex;  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof ZipFileIndexFileObject))   return false;  ZipFileIndexFileObject o=(ZipFileIndexFileObject)other;  return zfIndex.getAbsoluteFile().equals(o.zfIndex.getAbsoluteFile()) && name.equals(o.name);}  }
class C{  public VirtualFileWrapper(@NotNull File file){  myFile=file;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean logModified(Logger log){  if (isModified()) {    log.info(_className + " digest is modified");    return true;  } else   return false;}  }
class C{  @Deprecated public static void show(int t){  long millis=System.currentTimeMillis();  if (millis < nextDraw) {    try {      Thread.sleep(nextDraw - millis);    } catch (    InterruptedException e) {      System.out.println("Error sleeping");    }    millis=nextDraw;  }  show();  enableDoubleBuffering();  nextDraw=millis + t;}  }
class C{  public InvalidJarIndexException(){  super();}  }
class C{  public void addAttributeSubstringCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributeSubstringCondition(namespaceURI,name,value));}  }
class C{  public static Object[] loadKey(final Path path) throws Exception {  final Object[] sizeModExp=new Object[3];  try (final DataInputStream in=new DataInputStream(Files.newInputStream(path))){    sizeModExp[0]=in.readInt();    byte[] buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[1]=new BigInteger(buff);    buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[2]=new BigInteger(buff);  }   return sizeModExp;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.814 -0400",hash_original_method="1E949846598722C79E2F0E8E4DF0AE25",hash_generated_method="DBD45AE7C79C3D96484923938B09E477") @Override public int read(byte[] bytes) throws IOException {  return read(bytes,0,bytes.length);}  }
class C{  public void query(Interval interval,Collection foundItems){  root.addAllItemsFromOverlapping(interval,foundItems);}  }
class C{  @PostConstruct public void init(){  buildLayout();  setSizeFull();  setImmediate(true);  eventBus.subscribe(this);}  }
class C{  private void processTxFromBestChain(Transaction tx,boolean forceAddToPool) throws VerificationException {  checkState(lock.isHeldByCurrentThread());  checkState(!pending.containsKey(tx.getHash()));  boolean isDeadCoinbase=tx.isCoinBase() && dead.containsKey(tx.getHash());  if (isDeadCoinbase) {    log.info("  coinbase tx <-dead: confidence {}",tx.getHashAsString(),tx.getConfidence().getConfidenceType().name());    dead.remove(tx.getHash());  }  updateForSpends(tx,true);  boolean hasOutputsToMe=tx.getValueSentToMe(this).signum() > 0;  if (hasOutputsToMe) {    if (tx.isEveryOwnedOutputSpent(this)) {      log.info("  tx {} ->spent (by pending)",tx.getHashAsString());      addWalletTransaction(Pool.SPENT,tx);    } else {      log.info("  tx {} ->unspent",tx.getHashAsString());      addWalletTransaction(Pool.UNSPENT,tx);    }  } else   if (tx.getValueSentFromMe(this).signum() > 0) {    log.info("  tx {} ->spent",tx.getHashAsString());    addWalletTransaction(Pool.SPENT,tx);  } else   if (forceAddToPool) {    log.info("  tx {} ->spent (manually added)",tx.getHashAsString());    addWalletTransaction(Pool.SPENT,tx);  }  Set<Transaction> doubleSpendTxns=findDoubleSpendsAgainst(tx,pending);  if (!doubleSpendTxns.isEmpty()) {    killTxns(doubleSpendTxns,tx);  }}  }
class C{  public synchronized void report(int id,long seqno,long time){  report(id,seqno,time,null);}  }
class C{  @Transactional protected synchronized void _checkAlertExistence(boolean enabled){  for (  String alertName : new String[]{FILE_DESCRIPTORS_ALERT,PHYSICAL_MEMORY_ALERT,SWAP_SPACE_ALERT}) {    if (_alertService.findAlertByNameAndOwner(_constructAlertName(alertName),_adminUser) == null) {      String metricExpression=null;      TriggerType triggerType=null;      String triggerName=null;      double triggerThreshold=Double.NaN;switch (alertName) {case FILE_DESCRIPTORS_ALERT:        String openFileDescMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.OPEN_DESCRIPTORS.getScope(),Counter.OPEN_DESCRIPTORS.getMetric(),HOSTNAME);      String maxFileDescMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.MAX_DESCRIPTORS.getScope(),Counter.MAX_DESCRIPTORS.getMetric(),HOSTNAME);    metricExpression=MessageFormat.format("{0}({1}, {2})",Function.DIVIDE.getName(),openFileDescMetricExp,maxFileDescMetricExp);  triggerType=TriggerType.GREATER_THAN;triggerName="Open FD > 95% of Max FD";triggerThreshold=0.95;break;case PHYSICAL_MEMORY_ALERT:String freeMemMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.FREE_PHYSICAL_MEM.getScope(),Counter.FREE_PHYSICAL_MEM.getMetric(),HOSTNAME);String maxMemMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.MAX_PHYSICAL_MEM.getScope(),Counter.MAX_PHYSICAL_MEM.getMetric(),HOSTNAME);metricExpression=MessageFormat.format("{0}({1}, {2})",Function.DIVIDE.getName(),freeMemMetricExp,maxMemMetricExp);triggerType=TriggerType.LESS_THAN;triggerName="Free Mem < 5% of Tot Mem";triggerThreshold=0.05;break;case SWAP_SPACE_ALERT:String freeSSMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.FREE_SWAP_SPACE.getScope(),Counter.FREE_SWAP_SPACE.getMetric(),HOSTNAME);String maxSSMetricExp=MessageFormat.format("-1h:{0}:{1}'{'host={2}'}':avg",Counter.MAX_SWAP_SPACE.getScope(),Counter.MAX_SWAP_SPACE.getMetric(),HOSTNAME);metricExpression=MessageFormat.format("{0}({1}, {2})",Function.DIVIDE.getName(),freeSSMetricExp,maxSSMetricExp);triggerType=TriggerType.LESS_THAN;triggerName="Free Swap Space < 5% of Tot Swap Space";triggerThreshold=0.05;break;default :throw new SystemException("Attempting to create an unsupported monitoring alert" + alertName);}requireArgument(metricExpression != null && triggerType != null & triggerName != null,"Unsupported monitor alert " + alertName);Alert alert=new Alert(_adminUser,_adminUser,_constructAlertName(alertName),metricExpression,"0 * * * *");Notification notification=new Notification(NOTIFICATION_NAME,alert,AuditNotifier.class.getName(),new ArrayList<String>(),60000L);Trigger trigger=new Trigger(alert,triggerType,triggerName,triggerThreshold,0);List<Trigger> triggers=Arrays.asList(new Trigger[]{trigger});notification.setTriggers(triggers);alert.setNotifications(Arrays.asList(new Notification[]{notification}));alert.setTriggers(triggers);alert.setEnabled(enabled);_alertService.updateAlert(alert);} else {Alert alert=_alertService.findAlertByNameAndOwner(_constructAlertName(alertName),_adminUser);alert.setEnabled(enabled);_alertService.updateAlert(alert);}}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.EXIT_POINT_SPEC__EXITPOINT:    return getExitpoint();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object read(InputNode node,Object result) throws Exception {  Collection list=(Collection)result;  Object value=primitive.read(node);  if (value != null) {    list.add(value);  }  return result;}  }
class C{  public final double numIncorrect(int index){  return m_perBag[index] - numCorrect(index);}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public SSHPrompt sendWaitFor(String send,Integer timeout,SSHPrompt[] prompts,StringBuilder buf) throws NetworkDeviceControllerException {  _log.debug(MessageFormat.format("Host: {0}, Port: {1} - sendWaitFor: {2}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),send}));  SSHPrompt prompt=null;  try {    oswr.append(send);    oswr.flush();    prompt=waitFor(prompts,timeout,buf,false);  } catch (  Exception ex) {    _log.error("Exception sending string: {},  recevied: {}",send,buf);    throw new NetworkDeviceControllerException(ex);  }  _log.debug(MessageFormat.format("Host: {0}, Port: {1} - sendWaitFor: {2} - Received data: {3}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),send,buf}));  return prompt;}  }
class C{  public static boolean cannotJoin(Token prevToken,Token curToken){  String prevTokenText=prevToken.getText();  char prevLastChar=prevTokenText.charAt(prevTokenText.length() - 1);  String curTokenText=curToken.getText();  char curFirstChar=curTokenText.charAt(0);  return Character.isLetterOrDigit(prevLastChar) && Character.isLetterOrDigit(curFirstChar);}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  private String createWorkflowStepForRestoreNativeSnapshot(Workflow workflow,StorageSystem parentSystem,URI parentVolumeURI,URI snapshotURI,URI parentPoolURI,String waitFor,Workflow.Method rollbackMethod){  URI parentSystemURI=parentSystem.getId();  Workflow.Method restoreVolumeMethod=new Workflow.Method(RESTORE_VOLUME_METHOD_NAME,parentSystemURI,parentPoolURI,parentVolumeURI,snapshotURI,Boolean.FALSE,null);  workflow.createStep(RESTORE_VOLUME_STEP,String.format("Restore VPLEX backend volume %s from snapshot %s",parentVolumeURI,snapshotURI),waitFor,parentSystemURI,parentSystem.getSystemType(),BlockDeviceController.class,restoreVolumeMethod,rollbackMethod,null);  _log.info("Created workflow step to restore VPLEX backend volume {} from snapshot {}",parentVolumeURI,snapshotURI);  return RESTORE_VOLUME_STEP;}  }
class C{  public String next() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  final char[] zzCMapL=ZZ_CMAP;  final int[] zzTransL=ZZ_TRANS;  final int[] zzRowMapL=ZZ_ROWMAP;  final int[] zzAttrL=ZZ_ATTRIBUTE;  int zzPushbackPosL=zzPushbackPos=-1;  boolean zzWasPushback;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzWasPushback=false;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=zzBufferL[zzCurrentPosL++];        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          zzPushbackPos=zzPushbackPosL;          final boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          zzPushbackPosL=zzPushbackPos;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        final int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1) {          break zzForAction;        }        zzState=zzNext;        final int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 2) == 2) {          zzPushbackPosL=zzCurrentPosL;        }        if ((zzAttributes & 1) == 1) {          zzWasPushback=(zzAttributes & 4) == 4;          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8) {            break zzForAction;          }        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzWasPushback) {      zzMarkedPos=zzPushbackPosL;    }switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 172:{        return (stem(3,"te","ed"));      }case 353:    break;case 284:{    return (stem(1,"a","s"));  }case 354:break;case 89:{return (stem(3,"ide","ed"));}case 355:break;case 121:{return (stem(2,"al","s"));}case 356:break;case 10:{return (null_stem());}case 357:break;case 279:{return (stem(2,"la","s"));}case 358:break;case 33:{return (stem(3,"will",""));}case 359:break;case 67:{return (stem(3,"eel","ed"));}case 360:break;case 165:{return (stem(3,"eal","ed"));}case 361:break;case 169:{return (stem(4,"ake","en"));}case 362:break;case 127:{return (stem(2,"I",""));}case 363:break;case 84:{return (stem(3,"ay","ed"));}case 364:break;case 259:{return (stem(3,"se","ed"));}case 365:break;case 90:{return (stem(3,"ise","ed"));}case 366:break;case 225:{return (stem(3,"ike","ed"));}case 367:break;case 24:{return (ynull_stem());}case 368:break;case 106:{return (stem(3,"ell","ed"));}case 369:break;case 7:{return (stem(1,"us","s"));}case 370:break;case 6:{if (Option(tag_output)) {return (get_tag());}}case 371:break;case 1:{return (common_noun_stem());}case 372:break;case 65:{return (stem(3,"ly","ed"));}case 373:break;case 62:{return (stem(3,"ive","ed"));}case 374:break;case 336:{return (stem(3,"is","s"));}case 375:break;case 228:{return (stem(5,"eek","ed"));}case 376:break;case 152:{return (stem(3,"ar","ed"));}case 377:break;case 254:{return (stem(4,"ame","ed"));}case 378:break;case 28:{return (stem(3,"see","ed"));}case 379:break;case 143:{return (stem(3,"epe","ed"));}case 380:break;case 16:{return (stem(3,"get","ed"));}case 381:break;case 332:{return (stem(8,"-de-sac","s"));}case 382:break;case 350:{return (stem(12,"-in-the-box","s"));}case 383:break;case 253:{return (stem(5,"ing","ed"));}case 384:break;case 174:{return (stem(2,"i","s"));}case 385:break;case 154:{return (stem(3,"an","ed"));}case 386:break;case 25:{return (stem(3,"red","ed"));}case 387:break;case 46:{return (stem(3,"e","ing"));}case 388:break;case 203:{return (stem(3,"ass","ed"));}case 389:break;case 238:{return (stem(2,"re","s"));}case 390:break;case 60:{return (stem(2,"e","s"));}case 391:break;case 73:{return (stem(3,"o","en"));}case 392:break;case 147:{return (stem(5,"do","ed"));}case 393:break;case 66:{return (stem(3,"all","ed"));}case 394:break;case 120:{return (stem(2,"ra","s"));}case 395:break;case 201:{return (stem(6,"clepe","ed"));}case 396:break;case 55:{return (stem(3,"ear","ed"));}case 397:break;case 58:{return (stem(3,"ome","ed"));}case 398:break;case 47:{return (stem(1,"","ed"));}case 399:break;case 149:{return (stem(3,"eeze","ed"));}case 400:break;case 22:{return (stem(3,"light","ed"));}case 401:break;case 131:{return (stem(3,"y","s"));}case 402:break;case 282:{return (stem(2,"zo","s"));}case 403:break;case 26:{return (stem(3,"run","ed"));}case 404:break;case 40:{return (stem(2,"an","s"));}case 405:break;case 315:{return (stem(3,"ix","ed"));}case 406:break;case 287:{return (stem(4,"g","ing"));}case 407:break;case 52:{return (stem(3,"end","ed"));}case 408:break;case 45:{return (proper_name_stem());}case 409:break;case 50:{return (stem(3,"low","ed"));}case 410:break;case 185:{return (stem(2,"ny","s"));}case 411:break;case 130:{return (stem(3,"y","ed"));}case 412:break;case 99:{return (stem(3,"mite","ed"));}case 413:break;case 288:{return (stem(3,"d","en"));}case 414:break;case 9:{return (stem(2,"e","ed"));}case 415:break;case 95:{return (stem(3,"hoot","ed"));}case 416:break;case 177:{return (stem(2,"so","s"));}case 417:break;case 322:{return (stem(2,"r","s"));}case 418:break;case 220:{return (stem(5,"elt","en"));}case 419:break;case 214:{return (stem(4,"eeze","en"));}case 420:break;case 314:{return (stem(4,"y","ing"));}case 421:break;case 125:{yybegin(noun);yypushback(yylength());return (next());}case 422:break;case 76:{return (stem(3,"ew","en"));}case 423:break;case 108:{return (stem(3,"aw","en"));}case 424:break;case 44:{yybegin(verb);yypushback(yylength());return (next());}case 425:break;case 297:{return (stem(3,"ship","ed"));}case 426:break;case 316:{return (stem(1,"de","s"));}case 427:break;case 345:{return (stem(9,"-mutuel","s"));}case 428:break;case 351:{return (stem(14,"y-in-waiting","s"));}case 429:break;case 5:{return (stem(2,"be",""));}case 430:break;case 64:{return (stem(3,"lee","ed"));}case 431:break;case 35:{return (stem(1,"um","s"));}case 432:break;case 51:{return (stem(3,"reed","ed"));}case 433:break;case 155:{return (stem(3,"ap","ed"));}case 434:break;case 324:{return (stem(2,"te","s"));}case 435:break;case 189:{return (stem(3,"f","s"));}case 436:break;case 192:{return (stem(2,"can",""));}case 437:break;case 286:{return (stem(2,"lio","s"));}case 438:break;case 103:{return (stem(3,"wim","en"));}case 439:break;case 86:{return (stem(3,"ow","en"));}case 440:break;case 304:{return (stem(2,"g","s"));}case 441:break;case 217:{return (semi_reg_stem(1,""));}case 442:break;case 261:{return (stem(2,"gue","s"));}case 443:break;case 135:{return (stem(3,"ei","ed"));}case 444:break;case 32:{return (stem(3,"eat","ed"));}case 445:break;case 12:{return (stem(3,"bid","ed"));}case 446:break;case 206:{return (stem(3,"","en"));}case 447:break;case 335:{return (stem(10,"an-at-arms","s"));}case 448:break;case 126:{return (stem(2,"we",""));}case 449:break;case 233:{return (stem(2,"ron","s"));}case 450:break;case 319:{return (stem(2,"non","s"));}case 451:break;case 188:{return (stem(2,"uum","s"));}case 452:break;case 19:{return (stem(3,"have","ed"));}case 453:break;case 325:{return (stem(3,"ff","s"));}case 454:break;case 240:{return (stem(2,"mum","s"));}case 455:break;case 231:{return (stem(2,"ie","ed"));}case 456:break;case 250:{return (stem(2,"do","s"));}case 457:break;case 341:{return (stem(6,"-doux","s"));}case 458:break;case 285:{return (stem(3,"ly","s"));}case 459:break;case 213:{return (stem(4,"w","ed"));}case 460:break;case 226:{return (stem(4,"eal","en"));}case 461:break;case 242:{return (stem(6,"m.p.","s"));}case 462:break;case 43:{return (stem(2,"","s"));}case 463:break;case 327:{return (stem(9,"an-of-war","s"));}case 464:break;case 85:{return (stem(3,"ie","en"));}case 465:break;case 116:{return (stem(2,"tum","s"));}case 466:break;case 191:{return (stem(5,"eyrir","s"));}case 467:break;case 105:{return (stem(3,"ee","en"));}case 468:break;case 195:{return (stem(2,"will",""));}case 469:break;case 239:{return (stem(2,"ia","s"));}case 470:break;case 244:{return (stem(3,"s","s"));}case 471:break;case 39:{return (stem(2,"uo","s"));}case 472:break;case 215:{return (stem(5,"ight","ed"));}case 473:break;case 119:{return (stem(3,"ouse","s"));}case 474:break;case 339:{return (stem(2,"t","s"));}case 475:break;case 4:{return (stem(2,"be","s"));}case 476:break;case 48:{return (semi_reg_stem(0,"e"));}case 477:break;case 337:{return (stem(8,"-in-law","s"));}case 478:break;case 173:{return (stem(4,".","s"));}case 479:break;case 161:{return (stem(3,"ay","en"));}case 480:break;case 157:{return (stem(3,"se","en"));}case 481:break;case 34:{return (stem(3,"have",""));}case 482:break;case 158:{return (stem(3,"ine","ed"));}case 483:break;case 264:{return (stem(5,"ink","ed"));}case 484:break;case 111:{return (stem(4,"be","ed"));}case 485:break;case 340:{return (stem(9,"-down","ing"));}case 486:break;case 283:{return (stem(3,"en","s"));}case 487:break;case 140:{return (stem(4,"ear","en"));}case 488:break;case 247:{return (stem(4,"they",""));}case 489:break;case 342:{return (stem(8,"-de-lys","s"));}case 490:break;case 110:{return (stem(4,"go","ed"));}case 491:break;case 292:{return (stem(4,"y","ed"));}case 492:break;case 37:{return (stem(2,"a","s"));}case 493:break;case 181:{return (stem(3,"x","s"));}case 494:break;case 56:{return (stem(3,"id","ed"));}case 495:break;case 78:{return (stem(4,"have","s"));}case 496:break;case 54:{return (stem(3,"ear","en"));}case 497:break;case 91:{return (stem(3,"eeve","ed"));}case 498:break;case 71:{return (stem(3,"ild","ed"));}case 499:break;case 334:{return (stem(10,"anservant","s"));}case 500:break;case 194:{return (stem(3,"he",""));}case 501:break;case 243:{return (stem(4,"ex","s"));}case 502:break;case 142:{return (stem(3,"oose","ed"));}case 503:break;case 317:{return (stem(4,"-in","s"));}case 504:break;case 271:{return (stem(6,"ork","ed"));}case 505:break;case 136:{return (stem(3,"eak","ed"));}case 506:break;case 107:{return (stem(3,"ink","ed"));}case 507:break;case 230:{return (stem(3,"a","ed"));}case 508:break;case 133:{return (stem(3,"rn","ed"));}case 509:break;case 312:{return (stem(6,"-up","ed"));}case 510:break;case 148:{return (stem(3,"y","en"));}case 511:break;case 114:{return (stem(2,"um","s"));}case 512:break;case 211:{return (stem(4,"tch","ed"));}case 513:break;case 83:{return (stem(3,"ose","ed"));}case 514:break;case 20:{return (stem(3,"have","s"));}case 515:break;case 96:{return (stem(3,"hit","ed"));}case 516:break;case 117:{return (stem(3,"oot","s"));}case 517:break;case 63:{return (stem(4,"do","s"));}case 518:break;case 92:{return (stem(3,"ing","ed"));}case 519:break;case 235:{return (stem(3,"denum","s"));}case 520:break;case 333:{return (stem(6,"-over","s"));}case 521:break;case 183:{return (stem(1,"s","s"));}case 522:break;case 29:{return (stem(3,"win","ed"));}case 523:break;case 77:{return (stem(3,"eave","ed"));}case 524:break;case 323:{return (stem(7,"-up","ing"));}case 525:break;case 69:{return (stem(3,"eld","ed"));}case 526:break;case 275:{return (stem(4,"yatid","s"));}case 527:break;case 277:{return (stem(1,"o","s"));}case 528:break;case 122:{return (stem(2,"lo","s"));}case 529:break;case 98:{return (stem(3,"lide","ed"));}case 530:break;case 36:{return (stem(2,".","s"));}case 531:break;case 167:{return (stem(3,"and","ed"));}case 532:break;case 212:{return (stem(3,"am","ed"));}case 533:break;case 109:{return (stem(3,"read","ed"));}case 534:break;case 249:{return (stem(2,"have","s"));}case 535:break;case 330:{return (stem(8,"-down","ed"));}case 536:break;case 198:{return (stem(2,"have","ed"));}case 537:break;case 129:{return (stem(3,"","ing"));}case 538:break;case 138:{return (stem(5,"be","ing"));}case 539:break;case 208:{return (stem(4,"te","ing"));}case 540:break;case 305:{return (stem(4,"isee","s"));}case 541:break;case 113:{return (stem(1,"on","s"));}case 542:break;case 112:{return (stem(2,"","ed"));}case 543:break;case 290:{return (stem(4,"y","s"));}case 544:break;case 326:{return (stem(4,"-on","s"));}case 545:break;case 318:{return (stem(8,"onsieur","s"));}case 546:break;case 170:{return (stem(4,"eave","en"));}case 547:break;case 237:{return (stem(3,"us","s"));}case 548:break;case 346:{return (stem(9,"-de-camp","s"));}case 549:break;case 193:{return (stem(3,"she",""));}case 550:break;case 59:{return (stem(3,"raw","ed"));}case 551:break;case 300:{return (stem(2,"cio","s"));}case 552:break;case 352:{return (stem(11,"y-general","s"));}case 553:break;case 303:{return (stem(2,"eum","s"));}case 554:break;case 349:{return (stem(9,"-at-arms","s"));}case 555:break;case 298:{return (stem(2,"ion","s"));}case 556:break;case 348:{return (stem(11,"erfamilias","s"));}case 557:break;case 310:{return (stem(6,"-down","s"));}case 558:break;case 274:{return (stem(1,"x","s"));}case 559:break;case 306:{return (stem(2,"oan","s"));}case 560:break;case 289:{return (stem(5,"eech","ed"));}case 561:break;case 68:{return (stem(3,"row","ed"));}case 562:break;case 278:{return (stem(2,"ro","s"));}case 563:break;case 241:{return (stem(3,"ey","s"));}case 564:break;case 307:{return (stem(2,"ton","s"));}case 565:break;case 2:{return (stem(1,"","s"));}case 566:break;case 31:{return (stem(3,"be",""));}case 567:break;case 218:{return (stem(5,"et","en"));}case 568:break;case 94:{return (stem(3,"hoe","ed"));}case 569:break;case 156:{return (stem(3,"de","en"));}case 570:break;case 38:{return (xnull_stem());}case 571:break;case 343:{return (stem(8,"-de-lis","s"));}case 572:break;case 196:{return (stem(2,"have",""));}case 573:break;case 258:{return (stem(5,"ivy","s"));}case 574:break;case 227:{return (stem(3,"ge","ed"));}case 575:break;case 222:{return (stem(3,"ce","ed"));}case 576:break;case 168:{return (stem(3,"ke","en"));}case 577:break;case 100:{return (stem(3,"pin","ed"));}case 578:break;case 273:{return (stem(2,"no","s"));}case 579:break;case 295:{return (semi_reg_stem(0,"ue"));}case 580:break;case 224:{return (stem(3,"il","ed"));}case 581:break;case 331:{return (stem(2,"l","s"));}case 582:break;case 159:{return (semi_reg_stem(0,""));}case 583:break;case 151:{return (stem(3,"ve","en"));}case 584:break;case 223:{return (stem(5,"ink","en"));}case 585:break;case 137:{return (stem(3,"gin","ed"));}case 586:break;case 272:{return (stem(5,"y","ed"));}case 587:break;case 163:{return (stem(3,"ill","ed"));}case 588:break;case 221:{return (stem(3,"ue","ed"));}case 589:break;case 234:{return (stem(1,"i","s"));}case 590:break;case 175:{return (stem(2,"d","s"));}case 591:break;case 14:{return (stem(3,"do","ed"));}case 592:break;case 53:{return (stem(4,"be","en"));}case 593:break;case 257:{return (stem(5,"ivy","ed"));}case 594:break;case 160:{return (stem(3,"i","ed"));}case 595:break;case 179:{return (stem(1,"e","s"));}case 596:break;case 321:{return (stem(2,"le","s"));}case 597:break;case 266:{return (stem(5,"ead","en"));}case 598:break;case 141:{return (stem(3,"rse","ed"));}case 599:break;case 61:{return (stem(4,"do","en"));}case 600:break;case 162:{return (stem(3,"ite","ed"));}case 601:break;case 216:{return (stem(3,"l","en"));}case 602:break;case 123:{return (stem(4,"ABC","s"));}case 603:break;case 101:{return (stem(3,"peed","ed"));}case 604:break;case 204:{return (stem(4,"eak","en"));}case 605:break;case 23:{return (stem(3,"meet","ed"));}case 606:break;case 328:{return (stem(4,"-by","s"));}case 607:break;case 308:{return (stem(4,"s","s"));}case 608:break;case 301:{return (stem(3,"esis","s"));}case 609:break;case 219:{return (stem(3,"ey","ed"));}case 610:break;case 134:{return (stem(3,"ess","ed"));}case 611:break;case 207:{return (stem(3,"e","en"));}case 612:break;case 329:{return (stem(4,"o","s"));}case 613:break;case 144:{return (stem(4,"are","ed"));}case 614:break;case 139:{return (stem(4,"ind","ed"));}case 615:break;case 164:{return (stem(3,"ick","ed"));}case 616:break;case 145:{return (stem(4,"ie","ing"));}case 617:break;case 102:{return (stem(3,"pit","ed"));}case 618:break;case 176:{return (stem(2,"u","s"));}case 619:break;case 124:{return (stem(2,"to","s"));}case 620:break;case 255:{return (stem(3,"ride","ed"));}case 621:break;case 178:{return (stem(2,"denum","s"));}case 622:break;case 276:{return (stem(4,"sbok","s"));}case 623:break;case 291:{return (stem(6,"ivy","ing"));}case 624:break;case 347:{return (stem(13,"ademoiselle","s"));}case 625:break;case 187:{return (stem(4,"ooth","s"));}case 626:break;case 15:{return (stem(3,"feed","ed"));}case 627:break;case 93:{return (stem(3,"ink","en"));}case 628:break;case 87:{return (stem(3,"ake","ed"));}case 629:break;case 57:{return (stem(3,"lothe","ed"));}case 630:break;case 13:{return (stem(3,"dig","ed"));}case 631:break;case 265:{return (stem(4,"k","ed"));}case 632:break;case 186:{return (stem(2,"po","s"));}case 633:break;case 210:{return (stem(3,"ose","en"));}case 634:break;case 166:{return (stem(3,"ave","ed"));}case 635:break;case 72:{return (stem(3,"ird","ed"));}case 636:break;case 153:{return (stem(3,"in","ed"));}case 637:break;case 199:{return (stem(4,"","ing"));}case 638:break;case 80:{return (stem(3,"en","ed"));}case 639:break;case 82:{return (stem(3,"o","ed"));}case 640:break;case 267:{return (stem(3,"mel","s"));}case 641:break;case 260:{return (stem(4,"-up","s"));}case 642:break;case 8:{return (stem(2,"is","s"));}case 643:break;case 18:{return (stem(3,"hide","ed"));}case 644:break;case 88:{return (stem(3,"ing","en"));}case 645:break;case 245:{return (stem(3,"not",""));}case 646:break;case 269:{return (stem(4,"i","ing"));}case 647:break;case 232:{return (stem(4,"e","ing"));}case 648:break;case 270:{return (stem(4,"a","ing"));}case 649:break;case 128:{return (stem(2,"'s",""));}case 650:break;case 251:{return (condub_stem(3,"ing"));}case 651:break;case 115:{return (stem(3,"a","s"));}case 652:break;case 309:{return (stem(4,"l","ing"));}case 653:break;case 299:{return (stem(2,"ne","s"));}case 654:break;case 236:{return (stem(3,"ur","s"));}case 655:break;case 190:{return (stem(2,"b","s"));}case 656:break;case 209:{return (stem(5,"uy","ed"));}case 657:break;case 246:{return (stem(3,"shall",""));}case 658:break;case 182:{return (stem(3,"fe","s"));}case 659:break;case 205:{return (stem(2,"","en"));}case 660:break;case 294:{return (stem(5,"ify","s"));}case 661:break;case 296:{return (stem(5,"k","ing"));}case 662:break;case 3:{return (cnull_stem());}case 663:break;case 75:{return (stem(3,"old","ed"));}case 664:break;case 320:{return (stem(4,"ese","s"));}case 665:break;case 280:{return (stem(2,"dum","s"));}case 666:break;case 41:{return (stem(2,"s","s"));}case 667:break;case 311:{return (stem(5,"y","ing"));}case 668:break;case 338:{return (stem(6,"-lit","s"));}case 669:break;case 150:{return (stem(3,"ip","ed"));}case 670:break;case 74:{return (stem(3,"ang","ed"));}case 671:break;case 313:{return (stem(6,"ify","ing"));}case 672:break;case 180:{return (stem(4,"oose","s"));}case 673:break;case 281:{return (stem(4,"belly","s"));}case 674:break;case 268:{return (stem(4,"ge","ing"));}case 675:break;case 104:{return (stem(3,"wim","ed"));}case 676:break;case 171:{return (stem(3,"t","en"));}case 677:break;case 262:{return (stem(4,"ue","ing"));}case 678:break;case 42:{return (stem(2,"vum","s"));}case 679:break;case 118:{return (stem(2,"rum","s"));}case 680:break;case 184:{return (stem(2,"num","s"));}case 681:break;case 97:{return (stem(3,"lay","ed"));}case 682:break;case 263:{return (stem(5,"ell","en"));}case 683:break;case 132:{return (stem(3,"","ed"));}case 684:break;case 248:{return (stem(2,"as",""));}case 685:break;case 11:{return (stem(3,"bite","ed"));}case 686:break;case 146:{return (stem(3,"al","ed"));}case 687:break;case 202:{return (stem(3,"","s"));}case 688:break;case 30:{return (stem(3,"be","ed"));}case 689:break;case 27:{return (stem(3,"sit","ed"));}case 690:break;case 229:{return (stem(5,"each","ed"));}case 691:break;case 344:{return (stem(9,"-a-terre","s"));}case 692:break;case 79:{return (stem(3,"now","ed"));}case 693:break;case 17:{return (stem(3,"gin","en"));}case 694:break;case 256:{return (stem(3,"ie","ed"));}case 695:break;case 70:{return (stem(3,"ee","ed"));}case 696:break;case 81:{return (stem(3,"eep","ed"));}case 697:break;case 197:{return (stem(2,"would",""));}case 698:break;case 49:{return (stem(3,"leed","ed"));}case 699:break;case 21:{return (stem(3,"lead","ed"));}case 700:break;case 252:{return (stem(7,"clepe","ed"));}case 701:break;case 302:{return (stem(4,"eps","s"));}case 702:break;case 293:{return (stem(5,"ify","ed"));}case 703:break;case 200:{return (condub_stem(2,"ed"));}case 704:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static int computeTagSize(final int fieldNumber){  return computeRawVarint32Size(WireFormat.makeTag(fieldNumber,0));}  }
class C{  private void createRootElement(String name,Directives directives){  directives.add("workflow-app").attr("xmlns","uri:oozie:workflow:0.2").attr("name",name);}  }
class C{  public void end(String namespace,String name) throws Exception {  IconBean top=null;  try {    top=(IconBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[IconRule]{" + digester.getMatch() + "} Pop ("+ top.getLang()+ ")");  }}  }
class C{  public static GenericDraweeHierarchy createDraweeHierarchy(final Context context,final Config config){  GenericDraweeHierarchyBuilder builder=new GenericDraweeHierarchyBuilder(context.getResources()).setFadeDuration(config.fadeDurationMs).setPlaceholderImage(Const.PLACEHOLDER).setFailureImage(Const.FAILURE).setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER);  applyScaleType(builder,config);  if (config.useRoundedCorners || config.drawBorder) {    final Resources res=context.getResources();    final RoundingParams roundingParams=new RoundingParams();    if (config.useRoundedCorners) {      roundingParams.setRoundingMethod(RoundingParams.RoundingMethod.BITMAP_ONLY);      roundingParams.setCornersRadius(res.getDimensionPixelSize(R.dimen.drawee_corner_radius));      roundingParams.setRoundAsCircle(config.useRoundedAsCircle);    }    if (config.drawBorder) {      roundingParams.setBorderColor(res.getColor(R.color.colorPrimary));      roundingParams.setBorderWidth(res.getDimensionPixelSize(R.dimen.drawee_border_width));    }    builder.setRoundingParams(roundingParams);  }  return builder.build();}  }
class C{  public T caseDoubleLiteral(DoubleLiteral object){  return null;}  }
class C{  public static int compareVersions(String version_1,String version_2){  try {    version_1=version_1.replaceAll("_CVS","_B100");    version_2=version_2.replaceAll("_CVS","_B100");    if (version_1.startsWith(".")) {      version_1="0" + version_1;    }    if (version_2.startsWith(".")) {      version_2="0" + version_2;    }    version_1=version_1.replaceAll("[^0-9.]",".");    version_2=version_2.replaceAll("[^0-9.]",".");    StringTokenizer tok1=new StringTokenizer(version_1,".");    StringTokenizer tok2=new StringTokenizer(version_2,".");    while (true) {      if (tok1.hasMoreTokens() && tok2.hasMoreTokens()) {        int i1=Integer.parseInt(tok1.nextToken());        int i2=Integer.parseInt(tok2.nextToken());        if (i1 != i2) {          return (i1 - i2);        }      } else       if (tok1.hasMoreTokens()) {        int i1=Integer.parseInt(tok1.nextToken());        if (i1 != 0) {          return (1);        }      } else       if (tok2.hasMoreTokens()) {        int i2=Integer.parseInt(tok2.nextToken());        if (i2 != 0) {          return (-1);        }      } else {        return (0);      }    }  } catch (  Throwable e) {    e.printStackTrace();    return (0);  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public LegendConfigurationChangeEvent(LegendConfiguration source,Color color,LegendConfigurationChangeType type){  if ((type != LegendConfigurationChangeType.FRAME_COLOR) && (type != LegendConfigurationChangeType.BACKGROUND_COLOR)) {    throw new RuntimeException(type + " is not allowed calling this constructor.");  }  this.source=source;  this.type=type;  if (type == LegendConfigurationChangeType.FRAME_COLOR) {    frameColor=color;  } else {    backgroundColor=color;  }}  }
class C{  public SimpleBindings(){}  }
class C{  public static void main(String args[]){  try {    if (Boolean.getBoolean("rhino.use_java_policy_security")) {      initJavaPolicySecuritySupport();    }  } catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }  int result=exec(args);  if (result != 0) {    System.exit(result);  }}  }
class C{  protected final void SET_EXCEPTION_OBJECT(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForCaughtException();  StackLocationOperand sl=new StackLocationOperand(true,offset,DW);  Operand val=CacheOp.getClearRef(s);  if (val.isRegister()) {    EMIT(MIR_Move.mutate(s,IA32_MOV,sl,val));  } else   if (val.isIntConstant()) {    RegisterOperand temp=regpool.makeTempInt();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val)));    val=temp.copyRO();    EMIT(MIR_Move.mutate(s,IA32_MOV,sl,temp.copy()));  } else {    throw new OptimizingCompilerException("BURS_Helpers","unexpected operand type " + val + " in SET_EXCEPTION_OBJECT");  }}  }
class C{  public int hashCode(){  return name == null ? savepointId : name.hashCode();}  }
class C{  public MinimalHTMLWriter(Writer w,StyledDocument doc,int pos,int len){  super(w,doc,pos,len);}  }
class C{  private synchronized String formatDate(final Date anchorDate){  return anchorDateFormat.format(anchorDate);}  }
class C{  final public SyntaxTreeNode Theorem() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Theorem");  expecting="THEOREM, PROPOSITION";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case THEOREM:    t=jj_consume_token(THEOREM);  break;case PROPOSITION:t=jj_consume_token(PROPOSITION);break;default :jj_la1[54]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, Assume-Prove or Expression";if (jj_2_23(2)) {tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();if (jj_2_24(3)) {if (getToken(1).kind == ASSUME || getToken(1).kind == BOXASSUME) {} else {jj_consume_token(-1);throw new ParseException();}tn=AssumeProve();} else if (jj_2_25(1)) {tn=Expression();} else {jj_consume_token(-1);throw new ParseException();}addHeir(tn);if (beginsProof(getToken(1))) {tn=Proof();addHeir(tn);} else {;}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Theorem,sn);}throw new Error("Missing return statement in function");}  }
class C{  public ServerClientInconsistency(){  requestFileName="xml.query";  responseFile="getstate.query";}  }
class C{  private void prepareStorageSystemArrayAffinityDiscoveryData() throws Exception {  log.info("Preparing storage system for StorageSystemArrayAffinityDiscoveryMigration");  StorageSystem system=new StorageSystem();  systemURI=URIUtil.createId(StorageSystem.class);  system.setId(systemURI);  _dbClient.createObject(system);  StorageSystem system1=_dbClient.queryObject(StorageSystem.class,systemURI);  log.info("{}, {}",system1.getArrayAffinityStatus(),system1.getLastArrayAffinityRunTime());}  }
class C{  public ICalReader(Reader reader,ICalVersion defaultVersion){  SyntaxRules rules=SyntaxRules.iCalendar();  rules.setDefaultSyntaxStyle(defaultVersion.getSyntaxStyle());  this.reader=new VObjectReader(reader,rules);  this.defaultVersion=defaultVersion;}  }
class C{  @Override public void onBindViewHolder(StatisticViewHolder holder,int position){switch (getItemViewType(position)) {case StatisticViewHolder.TYPE_SMALL:switch (mStatisticItems.get(position)) {case TYPE_DUE:      holder.applyDueChart();    break;case TYPE_STAGE:  holder.applyStageChart();break;}break;case StatisticViewHolder.TYPE_LARGE:holder.applyMostPlayedChart(mStatisticItems.get(position));break;}}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public String globalInfo(){  return "A wrapper around a serialized classifier model. This classifier loads " + "a serialized models and uses it to make predictions.\n\n" + "Warning: since the serialized model doesn't get changed, cross-validation "+ "cannot bet used with this classifier.";}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  private static void addAdditionalKeys(final PsiFile file,final PsiElement operand,final CompletionResultSet result){  PySubscriptionExpression[] subscriptionExpressions=PyUtil.getAllChildrenOfType(file,PySubscriptionExpression.class);  for (  PySubscriptionExpression expr : subscriptionExpressions) {    if (expr.getOperand().getText().equals(operand.getText())) {      final PsiElement parent=expr.getParent();      if (parent instanceof PyAssignmentStatement) {        if (expr.equals(((PyAssignmentStatement)parent).getLeftHandSideExpression())) {          PyExpression key=expr.getIndexExpression();          if (key != null) {            boolean addHandler=PsiTreeUtil.findElementOfClassAtRange(file,key.getTextRange().getStartOffset(),key.getTextRange().getEndOffset(),PyStringLiteralExpression.class) != null;            result.addElement(createElement(key.getText(),addHandler));          }        }      }    }  }}  }
class C{  private final int turbulence_4(double pointX,double pointY,final double[] fSum){  double n, ratio=255;  int i, j, b0, b1, nOctave;  double px, py, rx0, rx1, ry0, ry1, sx, sy;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;  fSum[0]=fSum[1]=fSum[2]=fSum[3]=0;  for (nOctave=numOctaves; nOctave > 0; nOctave--) {    px=pointX + PerlinN;    b0=((int)px) & BM;    i=latticeSelector[b0];    j=latticeSelector[b0 + 1];    rx0=px - (int)px;    rx1=rx0 - 1.0;    sx=s_curve(rx0);    py=pointY + PerlinN;    b0=((int)py) & BM;    b1=(b0 + 1) & BM;    b1=((j + b0) & BM) << 3;    b0=((i + b0) & BM) << 3;    ry0=py - (int)py;    ry1=ry0 - 1.0;    sy=s_curve(ry0);    n=lerp(sy,lerp(sx,rx0 * gradient[b0 + 0] + ry0 * gradient[b0 + 1],rx1 * gradient[b1 + 0] + ry0 * gradient[b1 + 1]),lerp(sx,rx0 * gradient[b0 + 8 + 0] + ry1 * gradient[b0 + 8 + 1],rx1 * gradient[b1 + 8 + 0] + ry1 * gradient[b1 + 8 + 1]));    if (n < 0)     fSum[0]-=(n * ratio); else     fSum[0]+=(n * ratio);    n=lerp(sy,lerp(sx,rx0 * gradient[b0 + 2] + ry0 * gradient[b0 + 3],rx1 * gradient[b1 + 2] + ry0 * gradient[b1 + 3]),lerp(sx,rx0 * gradient[b0 + 8 + 2] + ry1 * gradient[b0 + 8 + 3],rx1 * gradient[b1 + 8 + 2] + ry1 * gradient[b1 + 8 + 3]));    if (n < 0)     fSum[1]-=(n * ratio); else     fSum[1]+=(n * ratio);    n=lerp(sy,lerp(sx,rx0 * gradient[b0 + 4] + ry0 * gradient[b0 + 5],rx1 * gradient[b1 + 4] + ry0 * gradient[b1 + 5]),lerp(sx,rx0 * gradient[b0 + 8 + 4] + ry1 * gradient[b0 + 8 + 5],rx1 * gradient[b1 + 8 + 4] + ry1 * gradient[b1 + 8 + 5]));    if (n < 0)     fSum[2]-=(n * ratio); else     fSum[2]+=(n * ratio);    n=lerp(sy,lerp(sx,rx0 * gradient[b0 + 6] + ry0 * gradient[b0 + 7],rx1 * gradient[b1 + 6] + ry0 * gradient[b1 + 7]),lerp(sx,rx0 * gradient[b0 + 8 + 6] + ry1 * gradient[b0 + 8 + 7],rx1 * gradient[b1 + 8 + 6] + ry1 * gradient[b1 + 8 + 7]));    if (n < 0)     fSum[3]-=(n * ratio); else     fSum[3]+=(n * ratio);    ratio*=.5;    pointX*=2;    pointY*=2;  }  i=(int)fSum[0];  if ((i & 0xFFFFFF00) == 0)   j=i << 16; else   j=((i & 0x80000000) != 0) ? 0 : 0xFF0000;  i=(int)fSum[1];  if ((i & 0xFFFFFF00) == 0)   j|=i << 8; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF00;  i=(int)fSum[2];  if ((i & 0xFFFFFF00) == 0)   j|=i; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF;  i=(int)fSum[3];  if ((i & 0xFFFFFF00) == 0)   j|=i << 24; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF000000;  return j;}  }
class C{  @Override public void customizerClosing(){  m_textSaver.setFilename(m_fileBackup);}  }
class C{  public UndefinedHDU(Header h,UndefinedData d) throws FitsException {  super(h,d);}  }
class C{  public void reset(Graph<V,E> graph,E e){  Pair<V> endpoints=graph.getEndpoints(e);  getIndex(graph,e,endpoints.getFirst());  getIndex(graph,e,endpoints.getFirst(),endpoints.getSecond());}  }
class C{  public CCachedExpressionTreeNode createCachedNode(){  return new CCachedExpressionTreeNode(m_criterium.createCachedCriterium());}  }
class C{  public Graph(Table nodes,Table edges,boolean directed){  this(nodes,edges,directed,DEFAULT_NODE_KEY,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  public T caseProvidedRuntimeLibraries(ProvidedRuntimeLibraries object){  return null;}  }
class C{  private static void writeFile(File file,byte[] input) throws IOException {  try (OutputStream os=new FileOutputStream(file)){    os.write(input);  } }  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("AES key generation does not take any parameters");}  }
class C{  public static U64 computeEntryCookie(int userCookie,String name){  int prime=211;  int flowHash=2311;  for (int i=0; i < name.length(); i++) {    flowHash=flowHash * prime + (int)name.charAt(i);  }  return AppCookie.makeCookie(StaticFlowEntryPusher.STATIC_FLOW_APP_ID,flowHash);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  int length=length();  s.writeInt(length);  for (int i=0; i < length; i++) {    s.writeDouble(get(i));  }}  }
class C{  public boolean canScrollUp(){  return mScroll < mMaxScroll;}  }
class C{  public RTMP(boolean mode){  this.mode=mode;}  }
class C{  public synchronized void cleanup(){  this.logger=null;  this.logWriter=null;}  }
class C{  protected void collectXblScopedChildNodes(Node n){  boolean isChild=false;  if (n.getNodeType() == Node.ELEMENT_NODE) {    if (!n.getNamespaceURI().equals(XBL_NAMESPACE_URI)) {      isChild=true;    } else     if (n instanceof XBLOMContentElement) {      ContentManager cm=getContentManager(n);      if (cm != null) {        NodeList selected=cm.getSelectedContent((XBLOMContentElement)n);        for (int i=0; i < selected.getLength(); i++) {          collectXblScopedChildNodes(selected.item(i));        }      }    }  } else {    isChild=true;  }  if (isChild) {    nodes.add(n);    size++;  }}  }
class C{  public RowId readRowId() throws SQLException {  return (RowId)getNextAttribute();}  }
class C{  public boolean isSetClusterJoinRequest(){  return this.clusterJoinRequest != null;}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv,int offset){  this.effectiveKeyBits=effectiveKeyBits;  if (iv == null)   throw new IllegalArgumentException("IV missing");  int blockSize=8;  if (iv.length - offset < blockSize) {    throw new IllegalArgumentException("IV too short");  }  this.iv=new byte[blockSize];  System.arraycopy(iv,offset,this.iv,0,blockSize);}  }
class C{  public String toString(){  return exp + " like " + new StringValueExp(pattern);}  }
class C{  public boolean willExceptionBeCaught(){  return m_willExceptionBeCaught;}  }
class C{  private void handleKeyPressedEvent(final Event event){switch (event.keyCode) {case SWT.ARROW_LEFT:    if (this.selection == -1) {      this.selection=0;      changeColor(this.selection,true);      return;    }  if (this.selection % 2 != 0) {    changeColor(this.selection,false);    this.selection--;    changeColor(this.selection,true);  }break;case SWT.ARROW_UP:if (this.selection == -1) {this.selection=0;changeColor(this.selection,true);return;}if (this.selection >= 2) {changeColor(this.selection,false);this.selection-=2;changeColor(this.selection,true);}break;case SWT.ARROW_RIGHT:if (this.selection == -1) {this.selection=0;changeColor(this.selection,true);return;}if (this.selection % 2 == 0) {changeColor(this.selection,false);this.selection++;changeColor(this.selection,true);}break;case SWT.ARROW_DOWN:if (this.selection == -1) {this.selection=0;changeColor(this.selection,true);return;}if (this.selection <= this.items.size() - 2) {changeColor(this.selection,false);this.selection+=2;changeColor(this.selection,true);}break;case SWT.HOME:changeColor(this.selection,false);this.selection=0;changeColor(this.selection,true);break;case SWT.END:changeColor(this.selection,false);this.selection=this.items.size() - 1;changeColor(this.selection,true);break;}}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public RrdSafeFileBackend(String path,long lockWaitTime,long lockRetryPeriod) throws IOException {  super(path,false);  try {    lockFile(lockWaitTime,lockRetryPeriod);  } catch (  IOException ioe) {    super.close();    throw ioe;  }}  }
class C{  public EventSpec createEventSpec(){  EventSpecImpl eventSpec=new EventSpecImpl();  return eventSpec;}  }
class C{  public static IntUnaryOperator identity(){  return null;}  }
class C{  public static void closeQuietly(InputStream is){  if (is != null) {    try {      is.close();    } catch (    Exception e) {    }  }}  }
class C{  public DateTimeFormatter withOffsetParsed(){  if (iOffsetParsed == true) {    return this;  }  return new DateTimeFormatter(iPrinter,iParser,iLocale,true,iChrono,null,iPivotYear,iDefaultYear);}  }
class C{  void markInternalClasses(){  for (int i=mClassDefs.length - 1; i >= 0; i--) {    mTypeIds[mClassDefs[i].classIdx].internal=true;  }  for (int i=0; i < mTypeIds.length; i++) {    String className=mStrings[mTypeIds[i].descriptorIdx];    if (className.length() == 1) {      mTypeIds[i].internal=true;    } else     if (className.charAt(0) == '[') {      mTypeIds[i].internal=true;    }  }}  }
class C{  private void ib1(int a,int b,int c,int d){  int t1=b ^ d;  int t3=a ^ (b & t1);  int t4=t1 ^ t3;  X3=c ^ t4;  int t7=b ^ (t1 & t3);  int t8=X3 | t7;  X1=t3 ^ t8;  int t10=~X1;  int t11=X3 ^ t7;  X0=t10 ^ t11;  X2=t4 ^ (t10 | t11);}  }
class C{  public static boolean overlaps(Region left,Region right){  if (left == null || right == null)   return false;  int rightEnd=right.getOffset() + right.getLength();  int leftEnd=left.getOffset() + left.getLength();  if (right.getLength() > 0) {    if (left.getLength() > 0)     return left.getOffset() < rightEnd && right.getOffset() < leftEnd;    return right.getOffset() <= left.getOffset() && left.getOffset() < rightEnd;  }  if (left.getLength() > 0)   return left.getOffset() <= right.getOffset() && right.getOffset() < leftEnd;  return left.getOffset() == right.getOffset();}  }
class C{  public boolean visit(BreakStatement node){  return true;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final ESRIPoint pt=(ESRIPoint)obj;  return (x == pt.x && y == pt.y);}  }
class C{  public Vector2m toVector2m(){  return Vector3.toVector2m(this);}  }
class C{  private Tok nextToken(){  final int slen=stream.length;  if (resend) {    resend=false;    return tok;  } else {    tok=new Tok();    while (loc < slen && PDFFile.isWhiteSpace(stream[loc])) {      loc++;    }    if (loc >= slen) {      tok.type=Tok.EOF;      return tok;    } else {      int c=stream[loc++];      while (c == '%') {        final StringBuffer comment=new StringBuffer();        while (loc < slen && c != '\n') {          comment.append((char)c);          c=stream[loc++];        }        if (loc < slen) {          c=stream[loc++];          if (c == '\r') {            c=stream[loc++];          }        }        if (!RELEASE) {          debug("Read comment: " + comment.toString(),-1);        }      }switch (c) {case '[':        tok.type=Tok.ARYB;      break;case ']':    tok.type=Tok.ARYE;  break;case '(':tok.type=Tok.STR;tok.name=readString();break;case '{':tok.type=Tok.BRCB;break;case '}':tok.type=Tok.BRCE;break;case '<':if (stream[loc++] == '<') {tok.type=Tok.BRKB;} else {loc--;tok.type=Tok.STR;tok.name=readByteArray();}break;case '/':tok.type=Tok.NAME;tok.name=readName();break;case '.':case '-':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':loc--;tok.type=Tok.NUM;tok.value=readNum();break;default :if (c == '>' && stream[loc++] == '>') {tok.type=Tok.BRKE;} else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '\'' || c == '"') {loc--;tok.type=Tok.CMD;tok.name=readName();} else {System.out.println("Encountered character: " + c + " ("+ (char)c+ ")");tok.type=Tok.UNK;}}if (!RELEASE) {debug("Read token: " + tok,-1);}return tok;}}}  }
class C{  public boolean isSelfReference(){  return _scheme == null && _authority == null && _query == null && _path.length() == 0;}  }
class C{  public String toString(){  String str="Finite Field GF(2^" + degree + ") = "+ "GF(2)[X]/<"+ polyToString(polynomial)+ "> ";  return str;}  }
class C{  private void allocateAndTestVector(RawByteCache cache,String key,int size,int expectedMemoryBytes,int expectedStorageBytes) throws IOException {  this.allocateAndTestVector(cache,key,size,expectedMemoryBytes,expectedStorageBytes,size);}  }
class C{  public void testLoadSearchResults_functionalAfterInitSuspendCycle(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  mController.suspend();  mController.init();  mController.loadSearchResults();  TypedCursorFetchedEvent reloadEvent=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(reloadEvent);  verify(mFragmentMockUi,times(2)).setPatients(any(TypedCursor.class));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__PARAMETER:    setParameter((FeatureParameter)newValue);  return;case SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION:setExpression((Literal)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Override public T remove(){  return removeLast();}  }
class C{  public void writeTag(String tag,File value){  writeTag(tag,value.getPath());}  }
class C{  @Override public void sendFileToContainer(String containerId,String destination,MultipartFile fileUpload,String contentFileName,String contentFileData) throws ServiceException, CheckException {  try {    File file=null;    File createTempHomeDirPerUsage=null;    File homeDirectory=null;    try {      homeDirectory=org.apache.commons.io.FileUtils.getUserDirectory();      createTempHomeDirPerUsage=new File(homeDirectory.getAbsolutePath() + "/tmp" + System.currentTimeMillis());      if (createTempHomeDirPerUsage.mkdirs()) {        String fileName=null;        if (fileUpload != null) {          if (contentFileName == null) {            fileName=fileUpload.getOriginalFilename();            fileName=AlphaNumericsCharactersCheckUtils.deAccent(fileName);            fileName=fileName.replace(" ","_");          } else {            fileName=contentFileName;          }          file=new File(createTempHomeDirPerUsage.getAbsolutePath() + "/" + fileName);          fileUpload.transferTo(file);        } else {          fileName=contentFileName;          file=new File(createTempHomeDirPerUsage.getAbsolutePath() + "/" + contentFileName);          FileUtils.write(file,contentFileData);        }        dockerService.sendFileToContainer(containerId,file.getParent(),fileName,destination);      } else {        throw new ServiceException("Cannot create : " + createTempHomeDirPerUsage.getAbsolutePath());      }    }  finally {      if (createTempHomeDirPerUsage != null) {        boolean deleted=file.delete();        logger.debug(file.getAbsolutePath() + " is deleted ? " + deleted);        deleted=createTempHomeDirPerUsage.delete();        logger.debug(createTempHomeDirPerUsage.getAbsolutePath() + " is deleted ? " + deleted);      }    }    if (destination.contains("/opt/cloudunit")) {      dockerService.execCommand(containerId,RemoteExecAction.CHANGE_CU_RIGHTS.getCommand(),true);    }  } catch (  FatalDockerJSONException|IOException e) {    StringBuilder msgError=new StringBuilder(512);    msgError.append(",").append("containerId=").append(containerId);    msgError.append(",").append("fileUpload=").append(fileUpload);    msgError.append(",").append("destFile=").append(destination);    throw new ServiceException("error in send file into the container : " + msgError,e);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void startCameraSource(){  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  public SyncError(SyncError other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  public void finish(){  internalSaveWidgetValues();}  }
class C{  public WireFrameBoxPortrayal3D(double x,double y,double z,double x2,double y2,double z2){  this(x,y,z,x2,y2,z2,Color.white);}  }
class C{  public void addAction(EntityAction ea){  actions.addElement(ea);  processGameEvent(new GameNewActionEvent(this,ea));}  }
class C{  public static RefactoringStatus createInfoStatus(String msg){  return createStatus(INFO,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public static boolean isNetworkAvailable(Context context){  if (context != null) {    ConnectivityManager mConnectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo mNetworkInfo=mConnectivityManager.getActiveNetworkInfo();    if (mNetworkInfo != null)     return mNetworkInfo.isAvailable();  }  return false;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentLanguageParser.parse");  ContentLanguageList list=new ContentLanguageList();  try {    headerName(TokenTypes.CONTENT_LANGUAGE);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      ContentLanguage cl=new ContentLanguage(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl=new ContentLanguage(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentLanguageParser.parse");  }}  }
class C{  public Features applySet(final FeatureSet featureSet){  final Set<Feature> features=new HashSet<>(this.features);  features.addAll(featureSet.getEnabled());  features.removeAll(featureSet.getDisabled());  return new Features(features);}  }
class C{  public void startActivityExtAndFinish(Class<? extends Activity> clazz){  startActivityExt(clazz);  finish();}  }
class C{  public ServerProxyConnectionAborted(){  requestFileName="getstate.query";}  }
class C{  public PostMethodStub(){  super();}  }
class C{  private static Element infoAsElement(Document doc,LibraryInfo info){  Element libraryElement=doc.createElement("libraryInfo");  libraryElement.setAttribute("version",info.getVersion());  appendPathElements(doc,"bootpath",libraryElement,info.getBootpath());  appendPathElements(doc,"extensionDirs",libraryElement,info.getExtensionDirs());  appendPathElements(doc,"endorsedDirs",libraryElement,info.getEndorsedDirs());  return libraryElement;}  }
class C{  public MiniBrowser(String url){  this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  try {    jbInit();  } catch (  Exception e) {    e.printStackTrace();  }  setURL(url);  AdempierePLAF.showCenterScreen(this);}  }
class C{  public void addVariableDescriptor(String name,String type,int startPC,int register){  int nameIndex=itsConstantPool.addUtf8(name);  int descriptorIndex=itsConstantPool.addUtf8(type);  int[] chunk={nameIndex,descriptorIndex,startPC,register};  if (itsVarDescriptors == null) {    itsVarDescriptors=new ObjArray();  }  itsVarDescriptors.add(chunk);}  }
class C{  public static MosaicId createMosaicId(final String namespaceId,final String name){  return new MosaicId(new NamespaceId(namespaceId),name);}  }
class C{  public static void rebind(final Context c,final String jndiName,final Object o) throws NamingException {  Context context=c;  String name=jndiName;  int idx=jndiName.lastIndexOf('/');  if (idx != -1) {    context=JNDIUtil.createContext(c,jndiName.substring(0,idx));    name=jndiName.substring(idx + 1);  }  boolean failed=false;  try {    context.rebind(name,o);  } catch (  Exception ignored) {    failed=true;  }  if (failed) {    context.bind(name,o);  }}  }
class C{  public static Angle midAngle(Angle a1,Angle a2){  if (a1 == null || a2 == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees(0.5 * (a1.degrees + a2.degrees));}  }
class C{  public Object clone(){  try {    CompactByteArray other=(CompactByteArray)super.clone();    other.values=values.clone();    other.indices=indices.clone();    if (hashes != null)     other.hashes=hashes.clone();    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque()) {    g.setColor(new ColorUIResource(251,248,241));    g.fillRect(0,0,c.getWidth(),c.getHeight());    g.setColor(new ColorUIResource(251,248,241));    g.fillRect(0,getRoundHeight(),c.getWidth(),c.getHeight() - getRoundHeight());  }  paint(g,c);}  }
class C{  public SetPasswordAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("SetPasswordAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("SetPasswordAction.statusbar"));  putValue(NAME,res.getString("SetPasswordAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SetPasswordAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SetPasswordAction.image")))));}  }
class C{  public String globalInfo(){  return "Writes Matlab ASCII files, in single or double precision format.";}  }
class C{  boolean isDominatedBy(DominatorTreeNode master){  if (low == 0)   initializeRanges();  return master.low <= low && master.high >= high;}  }
class C{  protected void appendFieldStart(final StringBuffer buffer,final String fieldName){  if (useFieldNames && fieldName != null) {    buffer.append(fieldName);    buffer.append(fieldNameValueSeparator);  }}  }
class C{  public void registerNewDocument(){  documentCount++;  termsInThisDocument=new TreeSet<String>();}  }
class C{  public void addValue(String name,Object value){  attributes.add(new AnnotationAttribute(name,value));}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean hasTimesCleaned(){  return hasExtension(TimesCleanedProperty.class);}  }
class C{  protected void checkContextURL(ODataRequestContext requestContext,Option<String> contextURL) throws ODataRenderException {  if (!contextURL.isDefined()) {    throw new ODataRenderException(String.format("Not possible to create context URL for request %s",requestContext));  }}  }
class C{  public MidiEvent(MidiMessage message,long tick){  this.message=message;  this.tick=tick;}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void layerRemoved(final MapLayerListEvent event){  final Layer layer=event.getElement();  if (layerTable != null) {    layerTable.onRemoveLayer(layer);  }  redrawBaseImage=true;  if (content.layers().size() == 0) {    clearFields();  } else {    setFullExtent();  }  if (!isDisposed())   redraw();}  }
class C{  public long skip(long n){  if (position + n <= document.getLength()) {    position+=n;    return n;  }  long temp=position;  position=document.getLength();  return document.getLength() - temp;}  }
class C{  public static void goToRoomPage(final Activity fromActivity,final Map<String,Object> params){  goToRoomPage(fromActivity,null,params);}  }
class C{  public boolean checkClasses(){  HashMap map=new HashMap();  for (int i=0; i < subjectArea.size(); i++) {    if (subjectArea.get(i) == null || subjectArea.get(i).toString().equals(Preference.BLANK_PREF_VALUE))     return false;    if (courseNbr.get(i) == null || courseNbr.get(i).toString().equals(Preference.BLANK_PREF_VALUE))     return false;    if (itype.get(i) == null || itype.get(i).toString().equals(Preference.BLANK_PREF_VALUE))     return false;    if (classNumber.get(i) == null || classNumber.get(i).toString().equals(Preference.BLANK_PREF_VALUE))     return false;    String str=subjectArea.get(i).toString() + courseNbr.get(i).toString() + itype.get(i).toString()+ classNumber.get(i).toString();    if (map.get(str) != null)     return false;    map.put(str,"1");  }  return true;}  }
class C{  public ZoneView(Element elem,int axis){  super(elem,axis);  loadedZones=new Vector<View>();}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void updateAllNodes(){  if (COUNT_TOTAL_OPERATIONS)   totalRateUpdateAllCount++;  treeTraversalDelegate.updateAllNodes();  likelihoodKnown=false;}  }
class C{  public XObject execute(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  XObject xobj=null;  try {    xobj=m_mainExp.execute(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return xobj;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public void testUpdateProperties() throws Exception {  IgfsPath p=path("/tmp/my");  igfs.mkdirs(p);  Map<String,String> oldProps=igfs.info(p).properties();  igfs.update(p,F.asMap("a","1"));  igfs.update(p,F.asMap("b","2"));  assertEquals("1",igfs.info(p).property("a"));  assertEquals("2",igfs.info(p).property("b"));  igfs.update(p,F.asMap("b","3"));  Map<String,String> expProps=new HashMap<>(oldProps);  expProps.put("a","1");  expProps.put("b","3");  assertEquals("3",igfs.info(p).property("b"));  assertEquals(expProps,igfs.info(p).properties());  assertEquals("5",igfs.info(p).property("c","5"));  assertUpdatePropertiesFails(null,null,NullPointerException.class,"Ouch! Argument cannot be null");  assertUpdatePropertiesFails(p,null,NullPointerException.class,"Ouch! Argument cannot be null");  assertUpdatePropertiesFails(null,F.asMap("x","9"),NullPointerException.class,"Ouch! Argument cannot be null");  assertUpdatePropertiesFails(p,Collections.<String,String>emptyMap(),IllegalArgumentException.class,"Ouch! Argument is invalid");}  }
class C{  public static int[] stringToIntArray(String str){  if (str == null) {    return (null);  }  String[] array=str.split(",");  if (array.length == 0) {    array=new String[]{str.trim()};  }  int[] nArray=new int[array.length];  for (int i=0; i < nArray.length; ++i) {    nArray[i]=Integer.parseInt(array[i]);  }  return (nArray);}  }
class C{  public void addHeader(Header header){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(header));}  }
class C{  void doKNNJoin(ListParameterization inputparams){  inputparams.addParameter(FileBasedDatabaseConnection.Parameterizer.INPUT_ID,dataset);  List<Class<?>> filters=Arrays.asList(new Class<?>[]{FixedDBIDsFilter.class});  inputparams.addParameter(FileBasedDatabaseConnection.Parameterizer.FILTERS_ID,filters);  inputparams.addParameter(FixedDBIDsFilter.Parameterizer.IDSTART_ID,1);  Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,inputparams);  inputparams.failOnErrors();  db.initialize();  Relation<NumberVector> relation=db.getRelation(TypeUtil.NUMBER_VECTOR_FIELD);  org.junit.Assert.assertEquals("Database size does not match.",shoulds,relation.size());{    KNNJoin<DoubleVector,?,?> knnjoin=new KNNJoin<DoubleVector,RStarTreeNode,SpatialEntry>(EuclideanDistanceFunction.STATIC,2);    Relation<KNNList> result=knnjoin.run(db);    MeanVariance meansize=new MeanVariance();    for (DBIDIter id=relation.getDBIDs().iter(); id.valid(); id.advance()) {      KNNList knnlist=result.get(id);      meansize.put(knnlist.size());    }    org.junit.Assert.assertEquals("Euclidean mean 2NN set size",mean2nnEuclid,meansize.getMean(),0.00001);    org.junit.Assert.assertEquals("Euclidean variance 2NN",var2nnEuclid,meansize.getSampleVariance(),0.00001);  }{    KNNJoin<DoubleVector,?,?> knnjoin=new KNNJoin<DoubleVector,RStarTreeNode,SpatialEntry>(ManhattanDistanceFunction.STATIC,2);    Relation<KNNList> result=knnjoin.run(db);    MeanVariance meansize=new MeanVariance();    for (DBIDIter id=relation.getDBIDs().iter(); id.valid(); id.advance()) {      KNNList knnlist=result.get(id);      meansize.put(knnlist.size());    }    org.junit.Assert.assertEquals("Manhattan mean 2NN",mean2nnManhattan,meansize.getMean(),0.00001);    org.junit.Assert.assertEquals("Manhattan variance 2NN",var2nnManhattan,meansize.getSampleVariance(),0.00001);  }}  }
class C{  @SuppressWarnings("MethodMayBeStatic") public void mixNames(@NotNull Collection<DataNode<LibraryData>> libraries){  if (libraries.isEmpty()) {    return;  }  Map<String,Wrapped> names=ContainerUtilRt.newHashMap();  List<Wrapped> data=ContainerUtilRt.newArrayList();  for (  DataNode<LibraryData> library : libraries) {    Wrapped wrapped=new Wrapped(library.getData());    data.add(wrapped);  }  boolean mixed=false;  while (!mixed) {    mixed=doMixNames(data,names);  }}  }
class C{  public void save() throws IOException {  if (!file.exists())   file.createFile(true);  OutputStream out=IOUtil.toBufferedOutputStream(file.getOutputStream());  Iterator it=sections.keySet().iterator();  PrintWriter output=new PrintWriter(out);  try {    while (it.hasNext()) {      String strSection=(String)it.next();      output.println("[" + strSection + "]");      Map section=getSectionEL(strSection);      Iterator iit=section.keySet().iterator();      while (iit.hasNext()) {        String key=(String)iit.next();        output.println(key + "=" + section.get(key));      }    }  }  finally {    IOUtil.flushEL(output);    IOUtil.closeEL(output);    IOUtil.flushEL(out);    IOUtil.closeEL(out);  }}  }
class C{  public ThumbnailSetCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  if (m_trainingSet != null) {    try {      if (m_state == IDLE) {synchronized (this) {          m_state=CLUSTERING;        }        m_testingSet=e.getTestSet();        if (m_trainingSet.equalHeaders(m_testingSet)) {          BatchClustererEvent ce=new BatchClustererEvent(this,m_Clusterer,new DataSetEvent(this,e.getTestSet()),e.getSetNumber(),e.getMaxSetNumber(),0);          notifyBatchClustererListeners(ce);        }        m_state=IDLE;      }    } catch (    Exception ex) {      stop();      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "ERROR (see log for details");        m_log.logMessage("[Clusterer] " + statusMessagePrefix() + " problem during testing. "+ ex.getMessage());      }      ex.printStackTrace();    }  }}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<T>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Map<String,RawProtein<T>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<T>>(rawMatches.size());  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);    Utilities.verboseLog(10,"matches after : " + rawMatches.size());  }  int matchCount=0;  for (  final RawProtein rawProtein : rawMatches) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10,"  Retrieved " + rawMatches.size() + " proteins to post-process."+ " A total of "+ matchCount+ " raw matches.");  for (  RawProtein<T> rawMatch : rawMatches) {    proteinIdToRawProteinMap.put(rawMatch.getProteinIdentifier(),rawMatch);  }  Map<String,RawProtein<T>> filteredMatches=postProcessor.process(proteinIdToRawProteinMap);  filteredMatchDAO.persist(filteredMatches.values());  matchCount=0;  for (  final RawProtein rawProtein : filteredMatches.values()) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10,"  " + filteredMatches.size() + " proteins passed through post processing."+ " and a total of "+ matchCount+ " matches PASSED.");  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(filteredMatches.size() + " proteins passed through post processing.");    LOGGER.debug("A total of " + matchCount + " matches PASSED.");  }}  }
class C{  private void secureAuth(Buffer packet,int packLength,String user,String password,String database,boolean writeClientParams) throws SQLException {  if (packet == null) {    packet=new Buffer(packLength);  }  if (writeClientParams) {    if (this.use41Extensions) {      if (versionMeetsMinimum(4,1,1)) {        packet.writeLong(this.clientParam);        packet.writeLong(this.maxThreeBytes);        packet.writeByte((byte)8);        packet.writeBytesNoNull(new byte[23]);      } else {        packet.writeLong(this.clientParam);        packet.writeLong(this.maxThreeBytes);      }    } else {      packet.writeInt((int)this.clientParam);      packet.writeLongInt(this.maxThreeBytes);    }  }  packet.writeString(user,CODE_PAGE_1252,this.connection);  if (password.length() != 0) {    packet.writeString(FALSE_SCRAMBLE,CODE_PAGE_1252,this.connection);  } else {    packet.writeString("",CODE_PAGE_1252,this.connection);  }  if (this.useConnectWithDb) {    packet.writeString(database,CODE_PAGE_1252,this.connection);  }  send(packet,packet.getPosition());  if (password.length() > 0) {    Buffer b=readPacket();    b.setPosition(0);    byte[] replyAsBytes=b.getByteBuffer();    if ((replyAsBytes.length == 24) && (replyAsBytes[0] != 0)) {      if (replyAsBytes[0] != '*') {        try {          byte[] buff=Security.passwordHashStage1(password);          byte[] passwordHash=new byte[buff.length];          System.arraycopy(buff,0,passwordHash,0,buff.length);          passwordHash=Security.passwordHashStage2(passwordHash,replyAsBytes);          byte[] packetDataAfterSalt=new byte[replyAsBytes.length - 4];          System.arraycopy(replyAsBytes,4,packetDataAfterSalt,0,replyAsBytes.length - 4);          byte[] mysqlScrambleBuff=new byte[SEED_LENGTH];          Security.xorString(packetDataAfterSalt,mysqlScrambleBuff,passwordHash,SEED_LENGTH);          Security.xorString(mysqlScrambleBuff,buff,buff,SEED_LENGTH);          Buffer packet2=new Buffer(25);          packet2.writeBytesNoNull(buff);          this.packetSequence++;          send(packet2,24);        } catch (        NoSuchAlgorithmException nse) {          throw SQLError.createSQLException(Messages.getString("MysqlIO.91") + Messages.getString("MysqlIO.92"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());        }      } else {        try {          byte[] passwordHash=Security.createKeyFromOldPassword(password);          byte[] netReadPos4=new byte[replyAsBytes.length - 4];          System.arraycopy(replyAsBytes,4,netReadPos4,0,replyAsBytes.length - 4);          byte[] mysqlScrambleBuff=new byte[SEED_LENGTH];          Security.xorString(netReadPos4,mysqlScrambleBuff,passwordHash,SEED_LENGTH);          String scrambledPassword=Util.scramble(StringUtils.toString(mysqlScrambleBuff),password);          Buffer packet2=new Buffer(packLength);          packet2.writeString(scrambledPassword,CODE_PAGE_1252,this.connection);          this.packetSequence++;          send(packet2,24);        } catch (        NoSuchAlgorithmException nse) {          throw SQLError.createSQLException(Messages.getString("MysqlIO.91") + Messages.getString("MysqlIO.92"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());        }      }    }  }}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ENUMERATOR;}  }
class C{  public Properties toProperties(){  return toProperties(false);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public static final Object[] resize(Object[] a,int size){  if (a.length >= size)   return a;  Object[] b=new Object[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  public QueryDataSet clone(){  QueryDataSet result=new QueryDataSet();  result.NodeId=NodeId;  result.TypeDefinitionNode=TypeDefinitionNode;  result.Values=Values == null ? null : Values.clone();  return result;}  }
class C{  private void addWorker(){synchronized (workers) {    if (workers.size() >= super.getMaximumPoolSize()) {      return;    }    Worker worker=new Worker();    Thread thread=getThreadFactory().newThread(worker);    idleWorkers.incrementAndGet();    thread.start();    workers.add(worker);    if (workers.size() > largestPoolSize) {      largestPoolSize=workers.size();    }  }}  }
class C{  private void onWifiP2pStateChanged(Context context,Intent intent){  int state=intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE,DEFAULT_EXTRA_INT);  if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {    log.debug("Wifi Direct enabled");    Log.d("peerDebug","Wifi Direct enabled");    dismissNoWifiNotification();  } else   if (state == WifiP2pManager.WIFI_P2P_STATE_DISABLED) {    showNoWifiNotification(context);    log.debug("Wifi Direct disabled");    Log.d("peerDebug","Wifi Direct disabled");  } else   if (state == DEFAULT_EXTRA_INT) {    log.error("Wifi P2P state changed event handled, but the intent " + "doesn't include an int to tell whether it's enabled or " + "disabled!");    Log.d("peerDebug","Wifi P2P state changed event handled, but the intent " + "doesn't include an int to tell whether it's enabled or " + "disabled!");  } else {    log.error("Wifi P2P state changed to an unknown state:" + state);    Log.d("peerDebug","Wifi P2P state changed to an unknown state:" + state);  }}  }
class C{  private BottomSheet.Builder createBottomSheetBuilder(){  BottomSheet.Builder builder=new BottomSheet.Builder(getActivity());  builder.setStyle(getStyle());  if (shouldTitleBeShown()) {    builder.setTitle(getBottomSheetTitle());  }  if (shouldIconBeShown()) {    builder.setIcon(android.R.drawable.ic_dialog_alert);  }  return builder;}  }
class C{  public void addDload(int n){  if (n < 4)   addOpcode(38 + n); else   if (n < 0x100) {    addOpcode(DLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(DLOAD);    addIndex(n);  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeVector clone=(NodeVector)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new int[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  public String markdown(String txt){  if (txt == null) {    txt="";  }  TextEditor text=new TextEditor(txt);  text.replaceAll("\\r\\n","\n");  text.replaceAll("\\r","\n");  text.replaceAll("^[ \\t]+$","");  text.append("\n\n");  text.detabify();  text.deleteAll("^[ ]+$");  hashHTMLBlocks(text);  stripLinkDefinitions(text);  text=runBlockGamut(text);  unEscapeSpecialChars(text);  text.append("\n");  return text.toString();}  }
class C{  int parseIntOption(String key,String value) throws URISyntaxException {  try {    return Integer.parseInt(value);  } catch (  NumberFormatException nfe) {    throw new URISyntaxException(value,"Invalid " + key + " value: "+ value);  }}  }
class C{  private int handleD(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"DG")) {    if (contains(value,index + 2,1,"I","E","Y")) {      result.append('J');      index+=3;    } else {      result.append("TK");      index+=2;    }  } else   if (contains(value,index,2,"DT","DD")) {    result.append('T');    index+=2;  } else {    result.append('T');    index++;  }  return index;}  }
class C{  public boolean isEditablePara(boolean checkContext){  if (checkContext && m_vo.ReadOnlyLogic.length() > 0) {    boolean retValue=!Evaluator.evaluateLogic(this,m_vo.ReadOnlyLogic);    log.finest(m_vo.ColumnName + " R/O(" + m_vo.ReadOnlyLogic+ ") => R/W-"+ retValue);    if (!retValue)     return false;  }  return isDisplayed(checkContext);}  }
class C{  public static boolean contains(float[] self,Object value){  for (  float next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  private void logDescriptors(List<VolumeDescriptor> descriptors){  StringBuffer buf=new StringBuffer();  buf.append(String.format(NEW_LINE));  buf.append(String.format("Volume descriptors for RP: %n"));  for (  VolumeDescriptor desc : descriptors) {    Volume volume=_dbClient.queryObject(Volume.class,desc.getVolumeURI());    buf.append(String.format("%n\t Volume Name: [%s] %n\t Descriptor Type: [%s] %n\t Full Descriptor Info: [%s] %n",volume.getLabel(),desc.getType(),desc.toString()));  }  buf.append(String.format(NEW_LINE));  _log.info(buf.toString());}  }
class C{  @Override public void respond(String response){  getUserHostmask().send().message(response);}  }
class C{  public static KillContainerParams create(@NotNull String container){  return new KillContainerParams().withContainer(container);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(@NonNull Context context,@NonNull Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float xT=event.getX();  float yT=event.getY();  int xV=circleShape.getPoint().x;  int yV=circleShape.getPoint().y;  int radius=circleShape.getRadius();  double dx=Math.pow(xT - xV,2);  double dy=Math.pow(yT - yV,2);  boolean isTouchOnFocus=(dx + dy) <= Math.pow(radius,2);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    if (isTouchOnFocus && isPerformClick) {      targetView.getView().setPressed(true);      targetView.getView().invalidate();    }  return true;case MotionEvent.ACTION_UP:if (isTouchOnFocus || dismissOnTouch) dismiss();if (isTouchOnFocus && isPerformClick) {targetView.getView().performClick();targetView.getView().setPressed(true);targetView.getView().invalidate();targetView.getView().setPressed(false);targetView.getView().invalidate();}return true;default :break;}return super.onTouchEvent(event);}  }
class C{  public void addSystemRunners(@NotNull List<Environment> systemEnvironments){  DefaultActionGroup runnersList=(DefaultActionGroup)actionManager.getAction(RUNNER_LIST);  systemRunners.clear();  clearRunnerActions(runnersList);  projectActions.removeAll();  systemActions.removeAll();  for (  Environment environment : projectRunners) {    projectActions.add(configRunnerFactory.createElement(environment.getName(),resources.scopeProject(),dropDownHeaderWidget));  }  runnersList.addSeparator();  for (  Environment environment : systemEnvironments) {    systemActions.add(configRunnerFactory.createElement(environment.getName(),resources.scopeSystem(),dropDownHeaderWidget));  }  runnersList.addAll(projectActions);  runnersList.addSeparator();  runnersList.addAll(systemActions);  systemRunners.addAll(systemEnvironments);  selectDefaultRunner();}  }
class C{  public boolean isDetail(){  if (m_vo.TabLevel == 0)   return false;  if (m_parents.size() > 0 || m_vo.AD_Column_ID != 0)   return true;  return false;}  }
class C{  public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){  mMatrixTouch.set(newMatrix);  limitTransAndScale(mMatrixTouch,mContentRect);  if (invalidate)   chart.invalidate();  newMatrix.set(mMatrixTouch);  return newMatrix;}  }
class C{  public void cleanUpListeners(){synchronized (listenerObjectMap) {    for (    ObjectName objectName : listenerObjectMap.keySet()) {      NotificationHubListener listener=listenerObjectMap.get(objectName);      if (listener != null) {        try {          mbeanServer.removeNotificationListener(objectName,listener);        } catch (        ListenerNotFoundException e) {        }catch (        InstanceNotFoundException e) {        }      }    }  }  listenerObjectMap.clear();}  }
class C{  public void parseLineStyle(InStream in,SWFShape shape,boolean hasAlpha) throws IOException {  int width=in.readUI16();  Color color=hasAlpha ? new AlphaColor(in) : new Color(in);  if (shape != null) {    shape.defineLineStyle(width,color);  }}  }
class C{  public PojoKeyField(PropertyDescriptor desc){  super(desc);}  }
class C{  private Subscription validateSubscriptionSettings(VOSubscription subscription) throws ValidationException, ObjectNotFoundException, OperationNotPermittedException, NonUniqueBusinessKeyException, ConcurrentModificationException {  subscription.setSubscriptionId(BaseAssembler.trim(subscription.getSubscriptionId()));  String subscriptionId=subscription.getSubscriptionId();  BLValidator.isId("subscriptionId",subscriptionId,true);  BLValidator.isDescription("purchaseOrderNumber",subscription.getPurchaseOrderNumber(),false);  Subscription subscriptionToModify=dataManager.getReference(Subscription.class,subscription.getKey());  PermissionCheck.owns(subscriptionToModify,dataManager.getCurrentUser().getOrganization(),LOG);  BaseAssembler.verifyVersionAndKey(subscriptionToModify,subscription);  String ownerId=subscription.getOwnerId();  if (ownerId != null && ownerId.length() != 0) {    checkRolesForSubscriptionOwner(ownerId,dataManager.getCurrentUser().getTenantId());  }  if (!subscriptionToModify.getSubscriptionId().equals(subscriptionId)) {    Subscription sub=new Subscription();    sub.setOrganization(subscriptionToModify.getOrganization());    sub.setSubscriptionId(subscriptionId);    dataManager.validateBusinessKeyUniqueness(sub);    Long result=getModifiedEntityDao().countSubscriptionOfOrganizationAndSubscription(subscriptionToModify,subscriptionId);    if (result.longValue() > 0) {      NonUniqueBusinessKeyException ex=new NonUniqueBusinessKeyException();      LOG.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_SUBSCRIPTIONID_ALREADY_EXIST_IN_MODIFIEDENTITY,subscriptionId,subscriptionToModify.getOrganization().getOrganizationId());      throw ex;    }  }  return subscriptionToModify;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node child;  String childName;  int length;  Node removedChild;  String removedName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  removedChild=employeeNode.removeChild(oldChild);  removedName=removedChild.getNodeName();  child=childList.item(0);  childName=child.getNodeName();  length=(int)childList.getLength();  if (equals(5,length)) {    assertEquals("removedNameNoWhitespace","employeeId",removedName);    assertEquals("childNameNoWhitespace","name",childName);  } else {    assertEquals("removedName","#text",removedName);    assertEquals("childName","employeeId",childName);    assertEquals("length",12,length);  }}  }
class C{  public AllocationGraph(){  vertices=new HashSet<SootClass>();  edges=new HashMap<AllocGraphEdge,AllocGraphEdge>();  incomingEdges=new HashMap<SootClass,Set<AllocGraphEdge>>();  outgoingEdges=new HashMap<SootClass,Set<AllocGraphEdge>>();  classToNewExprs=new HashMap<SootClass,Set<NewExpr>>();  reachableNewArrayExprs=new HashMap<SootClass,MutableInt>();  reachableStringConsts=new HashMap<SootClass,Set<String>>();  complexityMap=new HashMap<SootClass,Long>();  buildAllocationGraph();  createComplexityMap();}  }
class C{  public ObjectFactory(){}  }
class C{  private table fillTable(WebSessionCtx wsc,String columnName,int fieldRefId,String action,String targetBase,boolean addStart,int page){  table table=new table("1");  table.setID("WLookup");  table.setClass("MultiRow table-autofilter table-filterable table-autosort table-autostripe table-stripeclass:alternate");  table.addElement("<thead>");  tr line=new tr();  line=fillTable_Lookup_Headers(columnName,fieldRefId,line,targetBase,true,true,true,false,true);  tr line2=new tr();  line2=fillTable_Lookup_Headers(columnName,fieldRefId,line2,targetBase,true,true,true,false,false);  table.addElement(line2);  table.addElement(line);  table.addElement("</thead>");  table.addElement("<tbody>");  table=fillTable_Lookup_Rows(wsc,columnName,fieldRefId,table,targetBase,true,true,true,false,page);  table.addElement("</tbody>");  return table;}  }
class C{  public static boolean isLog2FileEnabled(){  return isLog2FileEnabled;}  }
class C{  public T caseTraceEntity_(TraceEntity_ object){  return null;}  }
class C{  @SuppressWarnings("unchecked") private static <T>Stream<T> all(Class<T> type,Iterator<Object> i){  requireNonNull(type);  requireNonNull(i);  return all(i).filter(null).map(null);}  }
class C{  static void testLoadAndStore(String encoding) throws IOException {  System.out.println("testLoadAndStore, encoding=" + encoding);  Properties props=new Properties();  props.put("k1","foo");  props.put("k2","bar");  props.put("k3","\\u0020\\u0391\\u0392\\u0393\\u0394\\u0395\\u0396\\u0397");  props.put("k4","\u7532\u9aa8\u6587");  props.put("k5","<java.home>/lib/jaxp.properties");  ByteArrayOutputStream out=new ByteArrayOutputStream();  props.storeToXML(out,null,encoding);  Properties p=new Properties();  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  p.loadFromXML(in);  if (!p.equals(props)) {    System.err.println("stored: " + props);    System.err.println("loaded: " + p);    throw new RuntimeException("Test failed");  }}  }
class C{  public TokenMap(int size,boolean ignoreCase){  this.size=size;  tokenMap=new TokenMapToken[size];  this.ignoreCase=ignoreCase;}  }
class C{  public static void createSnapshot(String workingDirectory,Modes4Accessibility mode,String osName){  if (osName.contains("Win") || osName.contains("win")) {    String cmd="qgis.bat " + workingDirectory + "QGisProjectFile_"+ mode+ ".qgs"+ " --snapshot "+ workingDirectory+ "snapshot_"+ mode+ ".png";    String stdoutFileName=workingDirectory + "snapshot_" + mode+ ".log";    int timeout=99999;    ExeRunner.run(cmd,stdoutFileName,timeout);  } else   if (osName.contains("Mac") || osName.contains("mac")) {    String cmd="/Applications/QGIS.app/Contents/MacOS/QGIS " + workingDirectory + "QGisProjectFile_"+ mode+ ".qgs"+ " --snapshot "+ workingDirectory+ "snapshot_"+ mode+ ".png";    String stdoutFileName=workingDirectory + "snapshot_" + mode+ ".log";    int timeout=99999;    ExeRunner.run(cmd,stdoutFileName,timeout);  } else {    log.warn("generating png files not implemented for os.arch=" + System.getProperty("os.arch"));  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void dragExit(DragSourceEvent dse){}  }
class C{  static void testLongExactTwice(long x,long y){  testLongExact(x,y);  testLongExact(y,x);}  }
class C{  public boolean realRequestFeature(int featureId){  Log.D(TAG,"[requestFeature] featureId: " + featureId);switch (featureId) {case FEATURE_NO_TITLE:{      getIntent().putExtra(EXTRA_TITLE_BAR_FLAG,false);      return true;    }case FEATURE_NO_BOTTOM:{    getIntent().putExtra(EXTRA_BOTTOM_BAR_FLAG,false);    return true;  }default :{  return false;}}}  }
class C{  public String optimizeFilters(String sparql){  Op op=Algebra.compile(QueryFactory.create(sparql));  Transform filterConjunction=new TransformFilterConjunction();  Transform filterDisjunction=new TransformFilterDisjunction();  Transform filterPlacement=new TransformFilterPlacement();  op=Transformer.transform(filterConjunction,op);  op=Transformer.transform(filterDisjunction,op);  op=Transformer.transform(filterPlacement,op);  return OpAsQuery.asQuery(op).serialize();}  }
class C{  public void test_ticket_1202d() throws Exception {  new TestHelper("ticket-1202-group05-modified1","ticket-1202-group05-modified1.rq","ticket-1202-group05-modified1.ttl","ticket-1202-group05-modified1.srx").runTest();}  }
class C{  public void testSetsToolsJarWhenNotOsXOrJava9() throws Exception {  System.getProperties().remove("mrj.version");  configuration.setProperty(GeneralPropertySet.JAVA_HOME,"myTestPath");  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  JvmLauncherStub java=new JvmLauncherStub();  container.addToolsJarToClasspath(java);  if (JdkUtils.getMajorJavaVersion() < 9) {    assertTrue(java.getClasspath().contains("myTestPath"));  }}  }
class C{  public void putImportant(int i,boolean b){  if (b)   masks[i]|=IMPORTANT_MASK; else   masks[i]&=~IMPORTANT_MASK;}  }
class C{  public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  protected static EventListener removeInternal(EventListener l,EventListener oldl){  if (l == oldl || l == null) {    return null;  } else   if (l instanceof AWTEventMulticaster) {    return ((AWTEventMulticaster)l).remove(oldl);  } else {    return l;  }}  }
class C{  @Override public void ready(){  if (attacks.isEmpty() && GUIPreferences.getInstance().getNagForNoAction()) {    String title=Messages.getString("FiringDisplay.DontFireDialog.title");    String body=Messages.getString("FiringDisplay.DontFireDialog.message");    ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);    if (!response.getShowAgain()) {      GUIPreferences.getInstance().setNagForNoAction(false);    }    if (!response.getAnswer()) {      return;    }  }  if ((ce() != null) && ce().isCapitalFighter() && GUIPreferences.getInstance().getNagForOverheat()) {    int totalheat=0;    for (    EntityAction action : attacks) {      if (action instanceof WeaponAttackAction) {        Mounted weapon=ce().getEquipment(((WeaponAttackAction)action).getWeaponId());        totalheat+=weapon.getCurrentHeat();      }    }    if (totalheat > ce().getHeatCapacity()) {      String title=Messages.getString("FiringDisplay.OverheatNag.title");      String body=Messages.getString("FiringDisplay.OverheatNag.message");      ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);      if (!response.getShowAgain()) {        GUIPreferences.getInstance().setNagForOverheat(false);      }      if (!response.getAnswer()) {        return;      }    }  }  disableButtons();  removeTempAttacks();  Vector<EntityAction> newAttacks=new Vector<EntityAction>();  for (  EntityAction o : attacks) {    if (o instanceof ArtilleryAttackAction) {      newAttacks.addElement(o);    } else     if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(clientgui.getClient().getGame());      Targetable target1=waa.getTarget(clientgui.getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target1,attacker.getForwardArc());      if (curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        waa2.setAmmoId(waa.getAmmoId());        waa2.setBombPayload(waa.getBombPayload());        waa2.setStrafing(waa.isStrafing());        waa2.setStrafingFirstShot(waa.isStrafingFirstShot());        waa2.setPointblankShot(waa.isPointblankShot());        newAttacks.addElement(waa2);      }    } else {      newAttacks.addElement(o);    }  }  for (  EntityAction o : attacks) {    if (o instanceof ArtilleryAttackAction) {      continue;    } else     if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(clientgui.getClient().getGame());      Targetable target1=waa.getTarget(clientgui.getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target1,attacker.getForwardArc());      if (!curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        waa2.setAmmoId(waa.getAmmoId());        waa2.setBombPayload(waa.getBombPayload());        waa2.setStrafing(waa.isStrafing());        waa2.setStrafingFirstShot(waa.isStrafingFirstShot());        waa2.setPointblankShot(waa.isPointblankShot());        newAttacks.addElement(waa2);      }    }  }  if ((target instanceof Entity) && Compute.isGroundToAir(ce(),target)) {    Coords targetPos=((Entity)target).getPlayerPickedPassThrough(cen);    if (targetPos != null) {      clientgui.getClient().sendPlayerPickedPassThrough(((Entity)target).getId(),cen,targetPos);    }  }  clientgui.getClient().sendHiddenPBSCFRResponse(newAttacks);  clientgui.setPointblankEID(Entity.NONE);  attacks.removeAllElements();  clientgui.getMenuBar().setEntity(null);  ash.closeDialog();  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  public AWTTerminal(TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration){  this(null,deviceConfiguration,fontConfiguration,colorConfiguration);}  }
class C{  public final void testHashCode04(){  assertTrue(new ECFieldF2m(2000,new int[]{981,2,1}).hashCode() == new ECFieldF2m(2000,new int[]{981,2,1}).hashCode());}  }
class C{  private void criterionTest(PerformanceCriterion c1,PerformanceCriterion c2,double expected1,double expected2,double expectedOverall) throws Exception {  PerformanceVector pv1=new PerformanceVector();  pv1.addCriterion(c1);  AbstractPerformanceEvaluator.evaluate(null,exampleSet1,pv1,new LinkedList<PerformanceCriterion>(),false,true);  assertEquals(c1.getName() + " 1",expected1,c1.getAverage(),0.00000001);  assertEquals(c1.getName() + " 1 clone",expected1,((PerformanceCriterion)c1.clone()).getAverage(),0.00000001);  PerformanceVector pv2=new PerformanceVector();  pv2.addCriterion(c2);  AbstractPerformanceEvaluator.evaluate(null,exampleSet2,pv2,new LinkedList<PerformanceCriterion>(),false,true);  assertEquals(c2.getName() + " 2",expected2,c2.getAverage(),0.00000001);  assertEquals(c2.getName() + " 2 clone",expected2,((PerformanceCriterion)c2.clone()).getAverage(),0.00000001);  c1.buildAverage(c2);  assertEquals(c1.getName() + " average",expectedOverall,c1.getMikroAverage(),0.00000001);  assertEquals(c1.getName() + " makro average",(expected1 + expected2) / 2.0,c1.getMakroAverage(),0.00000001);}  }
class C{  public Boolean isAutoNegotiateSupported(){  return autoNegotiateSupported;}  }
class C{  JCMethodDecl build(){  if (delegateCall != null) {    init.add(0,delegateCall);  }  List<JCStatement> body=statementsBetween(null,null);  int index=0;  for (  JCStatement stmt : body) {    if (stmt instanceof JCThrow) {      ListBuffer<JCStatement> filtered=new ListBuffer<JCStatement>();      filtered.addAll(body.subList(0,index + 1));      body=filtered.toList();      break;    }    index++;  }  MethodDefinitionBuilder constructor=MethodDefinitionBuilder.constructor(gen,deprecated);  constructor.modifiers(modifiers).userAnnotations(userAnnos.toList()).parameters(params.toList()).body(body);  return constructor.build();}  }
class C{  public void startSnapshot(){  this.lastSnapshot=true;  this.nextSnapshot=true;}  }
class C{  public static Map<String,Object> flowModToStorageEntry(OFFlowMod fm,String sw,String name) throws Exception {  Map<String,Object> entry=new HashMap<String,Object>();  entry.put(StaticFlowEntryPusher.COLUMN_NAME,name);  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,sw);  entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));  entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(fm.getPriority()));  entry.put(StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT,Integer.toString(fm.getIdleTimeout()));  entry.put(StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT,Integer.toString(fm.getHardTimeout()));switch (fm.getVersion()) {case OF_10:    if (fm.getActions() != null) {      entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,ActionUtils.actionsToString(fm.getActions(),log));    }  break;case OF_11:case OF_12:case OF_13:case OF_14:default :if (fm.getTableId() != null) {  entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,Short.toString(fm.getTableId().getValue()));}if (fm.getInstructions() != null) {List<OFInstruction> instructions=fm.getInstructions();for (OFInstruction inst : instructions) {switch (inst.getType()) {case GOTO_TABLE:    entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,InstructionUtils.gotoTableToString(((OFInstructionGotoTable)inst),log));  break;case WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,InstructionUtils.writeMetadataToString(((OFInstructionWriteMetadata)inst),log));break;case WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,InstructionUtils.writeActionsToString(((OFInstructionWriteActions)inst),log));break;case APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,InstructionUtils.applyActionsToString(((OFInstructionApplyActions)inst),log));break;case CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,InstructionUtils.clearActionsToString(((OFInstructionClearActions)inst),log));break;case METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,InstructionUtils.meterToString(((OFInstructionMeter)inst),log));break;case EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,InstructionUtils.experimenterToString(((OFInstructionExperimenter)inst),log));break;default :log.error("Could not decode OF1.1+ instruction type {}",inst);}}}}Match match=fm.getMatch();Iterator<MatchField<?>> itr=match.getMatchFields().iterator();while (itr.hasNext()) {@SuppressWarnings("rawtypes") MatchField mf=itr.next();switch (mf.id) {case IN_PORT:if (match.supports(MatchField.IN_PORT) && match.isExact(MatchField.IN_PORT)) {entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,match.get(MatchField.IN_PORT).toString());} else if (match.supportsMasked(MatchField.IN_PORT) && match.isPartiallyMasked(MatchField.IN_PORT)) {entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,match.getMasked(MatchField.IN_PORT).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_IN_PORT,match.getVersion().toString());}break;case ETH_SRC:if (match.supports(MatchField.ETH_SRC) && match.isExact(MatchField.ETH_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,match.get(MatchField.ETH_SRC).toString());} else if (match.supportsMasked(MatchField.ETH_SRC) && match.isPartiallyMasked(MatchField.ETH_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,match.getMasked(MatchField.ETH_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_DL_SRC,match.getVersion().toString());}break;case ETH_DST:if (match.supports(MatchField.ETH_DST) && match.isExact(MatchField.ETH_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,match.get(MatchField.ETH_DST).toString());} else if (match.supportsMasked(MatchField.ETH_DST) && match.isPartiallyMasked(MatchField.ETH_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,match.getMasked(MatchField.ETH_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_DL_DST,match.getVersion().toString());}break;case VLAN_VID:if (match.supports(MatchField.VLAN_VID) && match.isExact(MatchField.VLAN_VID)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,match.get(MatchField.VLAN_VID).toString());} else if (match.supportsMasked(MatchField.VLAN_VID) && match.isPartiallyMasked(MatchField.VLAN_VID)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,match.getMasked(MatchField.VLAN_VID).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_DL_VLAN,match.getVersion().toString());}break;case VLAN_PCP:if (match.supports(MatchField.VLAN_PCP) && match.isExact(MatchField.VLAN_PCP)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,match.get(MatchField.VLAN_PCP).toString());} else if (match.supportsMasked(MatchField.VLAN_PCP) && match.isPartiallyMasked(MatchField.VLAN_PCP)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,match.getMasked(MatchField.VLAN_PCP).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,match.getVersion().toString());}break;case ETH_TYPE:if (match.supports(MatchField.ETH_TYPE) && match.isExact(MatchField.ETH_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,match.get(MatchField.ETH_TYPE).toString());} else if (match.supportsMasked(MatchField.ETH_TYPE) && match.isPartiallyMasked(MatchField.ETH_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,match.getMasked(MatchField.ETH_TYPE).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_DL_TYPE,match.getVersion().toString());}break;case IP_ECN:if (match.supports(MatchField.IP_ECN) && match.isExact(MatchField.IP_ECN)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,match.get(MatchField.IP_ECN).toString());} else if (match.supportsMasked(MatchField.IP_ECN) && match.isPartiallyMasked(MatchField.IP_ECN)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,match.getMasked(MatchField.IP_ECN).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW_ECN,match.getVersion().toString());}break;case IP_DSCP:if (match.supports(MatchField.IP_DSCP) && match.isExact(MatchField.IP_DSCP)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,match.get(MatchField.IP_DSCP).toString());} else if (match.supportsMasked(MatchField.IP_DSCP) && match.isPartiallyMasked(MatchField.IP_DSCP)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,match.getMasked(MatchField.IP_DSCP).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW_DSCP,match.getVersion().toString());}break;case IP_PROTO:if (match.supports(MatchField.IP_PROTO) && match.isExact(MatchField.IP_PROTO)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,match.get(MatchField.IP_PROTO).toString());} else if (match.supportsMasked(MatchField.IP_PROTO) && match.isPartiallyMasked(MatchField.IP_PROTO)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,match.getMasked(MatchField.IP_PROTO).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW_PROTO,match.getVersion().toString());}break;case IPV4_SRC:if (match.supports(MatchField.IPV4_SRC) && match.isExact(MatchField.IPV4_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,match.get(MatchField.IPV4_SRC).toString());} else if (match.supportsMasked(MatchField.IPV4_SRC) && match.isPartiallyMasked(MatchField.IPV4_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,match.getMasked(MatchField.IPV4_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW_SRC,match.getVersion().toString());}break;case IPV4_DST:if (match.supports(MatchField.IPV4_DST) && match.isExact(MatchField.IPV4_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,match.get(MatchField.IPV4_DST).toString());} else if (match.supportsMasked(MatchField.IPV4_DST) && match.isPartiallyMasked(MatchField.IPV4_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,match.getMasked(MatchField.IPV4_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW_DST,match.getVersion().toString());}break;case TCP_SRC:if (match.supports(MatchField.TCP_SRC) && match.isExact(MatchField.TCP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,match.get(MatchField.TCP_SRC).toString());} else if (match.supportsMasked(MatchField.TCP_SRC) && match.isPartiallyMasked(MatchField.TCP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,match.getMasked(MatchField.TCP_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_TCP_SRC,match.getVersion().toString());}break;case UDP_SRC:if (match.supports(MatchField.UDP_SRC) && match.isExact(MatchField.UDP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,match.get(MatchField.UDP_SRC).toString());} else if (match.supportsMasked(MatchField.UDP_SRC) && match.isPartiallyMasked(MatchField.UDP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,match.getMasked(MatchField.UDP_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_UDP_SRC,match.getVersion().toString());}break;case SCTP_SRC:if (match.supports(MatchField.SCTP_SRC) && match.isExact(MatchField.SCTP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,match.get(MatchField.SCTP_SRC).toString());} else if (match.supportsMasked(MatchField.SCTP_SRC) && match.isPartiallyMasked(MatchField.SCTP_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,match.getMasked(MatchField.SCTP_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_SCTP_SRC,match.getVersion().toString());}break;case TCP_DST:if (match.supports(MatchField.TCP_DST) && match.isExact(MatchField.TCP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,match.get(MatchField.TCP_DST).toString());} else if (match.supportsMasked(MatchField.TCP_DST) && match.isPartiallyMasked(MatchField.TCP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,match.getMasked(MatchField.TCP_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_TCP_DST,match.getVersion().toString());}break;case UDP_DST:if (match.supports(MatchField.UDP_DST) && match.isExact(MatchField.UDP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,match.get(MatchField.UDP_DST).toString());} else if (match.supportsMasked(MatchField.UDP_DST) && match.isPartiallyMasked(MatchField.UDP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,match.getMasked(MatchField.UDP_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_UDP_DST,match.getVersion().toString());}break;case SCTP_DST:if (match.supports(MatchField.SCTP_DST) && match.isExact(MatchField.SCTP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,match.get(MatchField.SCTP_DST).toString());} else if (match.supportsMasked(MatchField.SCTP_DST) && match.isPartiallyMasked(MatchField.SCTP_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,match.getMasked(MatchField.SCTP_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_SCTP_DST,match.getVersion().toString());}break;case ICMPV4_TYPE:if (match.supports(MatchField.ICMPV4_TYPE) && match.isExact(MatchField.ICMPV4_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,match.get(MatchField.ICMPV4_TYPE).toString());} else if (match.supportsMasked(MatchField.ICMPV4_TYPE) && match.isPartiallyMasked(MatchField.ICMPV4_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,match.getMasked(MatchField.ICMPV4_TYPE).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ICMP_TYPE,match.getVersion().toString());}break;case ICMPV4_CODE:if (match.supports(MatchField.ICMPV4_CODE) && match.isExact(MatchField.ICMPV4_CODE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,match.get(MatchField.ICMPV4_CODE).toString());} else if (match.supportsMasked(MatchField.ICMPV4_CODE) && match.isPartiallyMasked(MatchField.ICMPV4_CODE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,match.getMasked(MatchField.ICMPV4_CODE).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ICMP_CODE,match.getVersion().toString());}break;case ARP_OP:if (match.supports(MatchField.ARP_OP) && match.isExact(MatchField.ARP_OP)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,match.get(MatchField.ARP_OP).toString());} else if (match.supportsMasked(MatchField.ARP_OP) && match.isPartiallyMasked(MatchField.ARP_OP)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,match.getMasked(MatchField.ARP_OP).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ARP_OPCODE,match.getVersion().toString());}break;case ARP_SHA:if (match.supports(MatchField.ARP_SHA) && match.isExact(MatchField.ARP_SHA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,match.get(MatchField.ARP_SHA).toString());} else if (match.supportsMasked(MatchField.ARP_SHA) && match.isPartiallyMasked(MatchField.ARP_SHA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,match.getMasked(MatchField.ARP_SHA).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ARP_SHA,match.getVersion().toString());}break;case ARP_THA:if (match.supports(MatchField.ARP_THA) && match.isExact(MatchField.ARP_THA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,match.get(MatchField.ARP_THA).toString());} else if (match.supportsMasked(MatchField.ARP_THA) && match.isPartiallyMasked(MatchField.ARP_THA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,match.getMasked(MatchField.ARP_THA).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ARP_DHA,match.getVersion().toString());}break;case ARP_SPA:if (match.supports(MatchField.ARP_SPA) && match.isExact(MatchField.ARP_SPA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,match.get(MatchField.ARP_SPA).toString());} else if (match.supportsMasked(MatchField.ARP_SPA) && match.isPartiallyMasked(MatchField.ARP_SPA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,match.getMasked(MatchField.ARP_SPA).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ARP_SPA,match.getVersion().toString());}break;case ARP_TPA:if (match.supports(MatchField.ARP_TPA) && match.isExact(MatchField.ARP_TPA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,match.get(MatchField.ARP_TPA).toString());} else if (match.supportsMasked(MatchField.ARP_TPA) && match.isPartiallyMasked(MatchField.ARP_TPA)) {entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,match.getMasked(MatchField.ARP_TPA).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ARP_DPA,match.getVersion().toString());}break;case IPV6_SRC:if (match.supports(MatchField.IPV6_SRC) && match.isExact(MatchField.IPV6_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,match.get(MatchField.IPV6_SRC).toString());} else if (match.supportsMasked(MatchField.IPV6_SRC) && match.isPartiallyMasked(MatchField.IPV6_SRC)) {entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,match.getMasked(MatchField.IPV6_SRC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW6_SRC,match.getVersion().toString());}break;case IPV6_DST:if (match.supports(MatchField.IPV6_DST) && match.isExact(MatchField.IPV6_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,match.get(MatchField.IPV6_DST).toString());} else if (match.supportsMasked(MatchField.IPV6_DST) && match.isPartiallyMasked(MatchField.IPV6_DST)) {entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,match.getMasked(MatchField.IPV6_DST).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_NW6_DST,match.getVersion().toString());}break;case IPV6_FLABEL:if (match.supports(MatchField.IPV6_FLABEL) && match.isExact(MatchField.IPV6_FLABEL)) {entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,match.get(MatchField.IPV6_FLABEL).toString());} else if (match.supportsMasked(MatchField.IPV6_FLABEL) && match.isPartiallyMasked(MatchField.IPV6_FLABEL)) {entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,match.getMasked(MatchField.IPV6_FLABEL).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,match.getVersion().toString());}break;case ICMPV6_TYPE:if (match.supports(MatchField.ICMPV6_TYPE) && match.isExact(MatchField.ICMPV6_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,match.get(MatchField.ICMPV6_TYPE).toString());} else if (match.supportsMasked(MatchField.ICMPV6_TYPE) && match.isPartiallyMasked(MatchField.ICMPV6_TYPE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,match.getMasked(MatchField.ICMPV6_TYPE).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,match.getVersion().toString());}break;case ICMPV6_CODE:if (match.supports(MatchField.ICMPV6_CODE) && match.isExact(MatchField.ICMPV6_CODE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,match.get(MatchField.ICMPV6_CODE).toString());} else if (match.supportsMasked(MatchField.ICMPV6_CODE) && match.isPartiallyMasked(MatchField.ICMPV6_CODE)) {entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,match.getMasked(MatchField.ICMPV6_CODE).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ICMP6_CODE,match.getVersion().toString());}break;case IPV6_ND_SLL:if (match.supports(MatchField.IPV6_ND_SLL) && match.isExact(MatchField.IPV6_ND_SLL)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,match.get(MatchField.IPV6_ND_SLL).toString());} else if (match.supportsMasked(MatchField.IPV6_ND_SLL) && match.isPartiallyMasked(MatchField.IPV6_ND_SLL)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,match.getMasked(MatchField.IPV6_ND_SLL).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ND_SLL,match.getVersion().toString());}break;case IPV6_ND_TLL:if (match.supports(MatchField.IPV6_ND_TLL) && match.isExact(MatchField.IPV6_ND_TLL)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,match.get(MatchField.IPV6_ND_TLL).toString());} else if (match.supportsMasked(MatchField.IPV6_ND_TLL) && match.isPartiallyMasked(MatchField.IPV6_ND_TLL)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,match.getMasked(MatchField.IPV6_ND_TLL).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ND_TLL,match.getVersion().toString());}break;case IPV6_ND_TARGET:if (match.supports(MatchField.IPV6_ND_TARGET) && match.isExact(MatchField.IPV6_ND_TARGET)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,match.get(MatchField.IPV6_ND_TARGET).toString());} else if (match.supportsMasked(MatchField.IPV6_ND_TARGET) && match.isPartiallyMasked(MatchField.IPV6_ND_TARGET)) {entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,match.getMasked(MatchField.IPV6_ND_TARGET).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_ND_TARGET,match.getVersion().toString());}break;case MPLS_LABEL:if (match.supports(MatchField.MPLS_LABEL) && match.isExact(MatchField.MPLS_LABEL)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,match.get(MatchField.MPLS_LABEL).toString());} else if (match.supportsMasked(MatchField.MPLS_LABEL) && match.isPartiallyMasked(MatchField.MPLS_LABEL)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,match.getMasked(MatchField.MPLS_LABEL).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_MPLS_LABEL,match.getVersion().toString());}break;case MPLS_TC:if (match.supports(MatchField.MPLS_TC) && match.isExact(MatchField.MPLS_TC)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,match.get(MatchField.MPLS_TC).toString());} else if (match.supportsMasked(MatchField.MPLS_TC) && match.isPartiallyMasked(MatchField.MPLS_TC)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,match.getMasked(MatchField.MPLS_TC).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_MPLS_TC,match.getVersion().toString());}break;case MPLS_BOS:if (match.supports(MatchField.MPLS_BOS) && match.isExact(MatchField.MPLS_BOS)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,match.get(MatchField.MPLS_BOS).toString());} else if (match.supportsMasked(MatchField.MPLS_BOS) && match.isPartiallyMasked(MatchField.MPLS_BOS)) {entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,match.getMasked(MatchField.MPLS_BOS).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_MPLS_BOS,match.getVersion().toString());}break;case METADATA:if (match.supports(MatchField.METADATA) && match.isExact(MatchField.METADATA)) {entry.put(StaticFlowEntryPusher.COLUMN_METADATA,match.get(MatchField.METADATA).toString());} else if (match.supportsMasked(MatchField.METADATA) && match.isPartiallyMasked(MatchField.METADATA)) {entry.put(StaticFlowEntryPusher.COLUMN_METADATA,match.getMasked(MatchField.METADATA).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_METADATA,match.getVersion().toString());}break;case TUNNEL_ID:if (match.supports(MatchField.TUNNEL_ID) && match.isExact(MatchField.TUNNEL_ID)) {entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,match.get(MatchField.TUNNEL_ID).toString());} else if (match.supportsMasked(MatchField.TUNNEL_ID) && match.isPartiallyMasked(MatchField.TUNNEL_ID)) {entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,match.getMasked(MatchField.TUNNEL_ID).toString());} else {log.error("Got match for {} but protocol {} does not support said match. Ignoring match.",StaticFlowEntryPusher.COLUMN_TUNNEL_ID,match.getVersion().toString());}break;default :log.error("Unhandled Match when parsing OFFlowMod: {}, {}",mf,mf.id);break;}}int result=StaticFlowEntryPusherResource.checkActions(entry);if (result == -1) throw new Exception("Invalid action/instructions");return entry;}  }
class C{  private static Address GetBooleanArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetBooleanArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    boolean[] sourceArray=(boolean[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    Address copyBuffer=sysCall.sysMalloc(size);    if (copyBuffer.isZero()) {      env.recordException(new OutOfMemoryError());      return Address.zero();    }    Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size);    JNIGenericHelpers.setBoolStar(isCopyAddress,true);    return copyBuffer;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public Builder batchSize(final long batchSize){  this.batchSize=batchSize;  return this;}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    int count=2;    if (mImageSwitcher != null) {      count=mImageSwitcher.getViewCount();    }    result=(int)(getPaddingLeft() + getPaddingRight() + (2 * mRadius)+ (count - 1) * spacing);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public final String field(){  return field;}  }
class C{  private void recordBulkOpEvent(InternalCacheEvent event,ThreadIdentifier tid){  EventID eventID=event.getEventId();  VersionTag tag=event.getVersionTag();  if (tag == null) {    return;  }  if (logger.isDebugEnabled()) {    logger.debug("recording bulkOp event {} {} {} op={}",tid.expensiveToString(),eventID,tag,event.getOperation());  }  RegionVersionVector v=((LocalRegion)event.getRegion()).getVersionVector();  if (v != null) {    tag.setMemberID(v.getCanonicalId(tag.getMemberID()));    if (tag.getPreviousMemberID() != null) {      tag.setPreviousMemberID(v.getCanonicalId(tag.getPreviousMemberID()));    }  }  boolean retry=false;  do {    BulkOpHolder bulkOpTracker=recordedBulkOpVersionTags.get(tid);    if (bulkOpTracker == null) {      bulkOpTracker=new BulkOpHolder();      BulkOpHolder old=recordedBulkOpVersionTags.putIfAbsent(tid,bulkOpTracker);      if (old != null) {        retry=true;        continue;      }    }synchronized (bulkOpTracker) {      if (bulkOpTracker.removed) {        retry=true;        continue;      }      bulkOpTracker.putVersionTag(eventID,event.getVersionTag());      retry=false;    }  } while (retry);}  }
class C{  public List<TestsOnDisk> gatherGeneratedTestsOnDisk(){  List<TestsOnDisk> list=new LinkedList<TestsOnDisk>();  List<File> generatedTests=FileIOUtils.getRecursivelyAllFilesInAllSubfolders(tmpTests.getAbsolutePath(),".java");  List<File> generatedReports=FileIOUtils.getRecursivelyAllFilesInAllSubfolders(tmpReports.getAbsolutePath(),".csv");  List<File> generatedSerialized=FileIOUtils.getRecursivelyAllFilesInAllSubfolders(tmpSeeds.getAbsolutePath(),Properties.CTG_SEEDS_EXT);  Map<String,CsvJUnitData> reports=new LinkedHashMap<>();  for (  File file : generatedReports) {    CsvJUnitData data=CsvJUnitData.openFile(file);    if (data == null) {      logger.warn("Cannot process " + file.getAbsolutePath());    } else {      reports.put(data.getTargetClass(),data);    }  }  Map<String,File> seeds=new LinkedHashMap<>();  for (  File file : generatedSerialized) {    String cut=file.getName().substring(0,file.getName().length() - (Properties.CTG_SEEDS_EXT.length() + 1));    seeds.put(cut,file);  }  for (  File test : generatedTests) {    if (test.getAbsolutePath().contains(Properties.SCAFFOLDING_SUFFIX)) {      continue;    }    String testName=extractClassName(tmpTests,test);    String cut="";    for (    String className : reports.keySet()) {      if (testName.startsWith(className) && className.length() > cut.length()) {        cut=className;      }    }    CsvJUnitData data=reports.get(cut);    if (data == null) {      logger.warn("No CSV file for CUT " + cut + " with test suite at "+ test.getAbsolutePath());      continue;    }    File seed=seeds.get(cut);    if (seed == null) {      logger.warn("No '" + Properties.CTG_SEEDS_EXT + "' file was generated for CUT "+ cut);    }    TestsOnDisk info=new TestsOnDisk(test,data,seed);    if (info.isValid()) {      list.add(info);    } else {      logger.warn("Invalid info for " + test.getAbsolutePath());    }  }  return list;}  }
class C{  public int compareString(String a,String b,boolean ignoreCase){  if (ignoreCase) {    return a.compareToIgnoreCase(b);  }  return a.compareTo(b);}  }
class C{  protected MAsset(MMatchInv match){  this(match.getCtx(),0,match.get_TrxName());  MInvoiceLine invoiceLine=new MInvoiceLine(getCtx(),match.getC_InvoiceLine_ID(),get_TrxName());  MInOutLine inoutLine=new MInOutLine(getCtx(),match.getM_InOutLine_ID(),get_TrxName());  setIsOwned(true);  setIsInPosession(true);  setA_Asset_CreateDate(inoutLine.getM_InOut().getMovementDate());  int A_Asset_Group_ID=invoiceLine.getA_Asset_Group_ID();  MProduct product=MProduct.get(getCtx(),invoiceLine.getM_Product_ID());  if (A_Asset_Group_ID <= 0) {    A_Asset_Group_ID=product.getA_Asset_Group_ID();  }  setA_Asset_Group_ID(A_Asset_Group_ID);  setHelp(Msg.getMsg(MClient.get(getCtx()).getAD_Language(),"CreatedFromInvoiceLine",new Object[]{invoiceLine.getC_Invoice().getDocumentNo(),invoiceLine.getLine()}));  String name="";  if (inoutLine.getM_Product_ID() > 0) {    name+=product.getName() + "-";    setM_Product_ID(inoutLine.getM_Product_ID());    setM_AttributeSetInstance_ID(inoutLine.getM_AttributeSetInstance_ID());  }  name+=invoiceLine.getC_Invoice().getDocumentNo();  setName(name);  log.fine("name=" + name);  setDescription(invoiceLine.getDescription());}  }
class C{  public final double doOperation() throws OperatorFailedException {  int i=MathUtils.nextInt(parameterList.size());  int j=i;  while (j == i) {    j=MathUtils.nextInt(parameterList.size());  }  final Parameter a=parameterList.get(i);  final Parameter b=parameterList.get(j);  Bounds<Double> aBounds=a.getBounds();  Bounds<Double> bBounds=b.getBounds();  for (int k=0; k < a.getDimension(); ++k) {    final double ak=a.getParameterValue(k);    final double bk=b.getParameterValue(k);    if (isOutside(aBounds,bk,k) || isOutside(bBounds,ak,k)) {      throw new OperatorFailedException("proposed value outside boundaries");    }    a.setParameterValueQuietly(k,bk);    b.setParameterValueQuietly(k,ak);  }  a.fireParameterChangedEvent();  b.fireParameterChangedEvent();  return 0.0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.736 -0500",hash_original_method="4A9AA9B5E92E73D941CD4914D7782EA3",hash_generated_method="02A627D0945B97FDD67839EED2C6B3C8") private void pollState(){  pollingContext=new int[1];  pollingContext[0]=0;switch (cm.getRadioState()) {case RADIO_UNAVAILABLE:    newSS.setStateOutOfService();  newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;pollStateDone();break;case RADIO_OFF:newSS.setStateOff();newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;pollStateDone();break;case RUIM_NOT_READY:case RUIM_READY:case RUIM_LOCKED_OR_ABSENT:case NV_NOT_READY:case NV_READY:if (DBG) log("Radio Technology Change ongoing, setting SS to off");newSS.setStateOff();newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;break;default :pollingContext[0]++;cm.getOperator(obtainMessage(EVENT_POLL_STATE_OPERATOR,pollingContext));pollingContext[0]++;cm.getDataRegistrationState(obtainMessage(EVENT_POLL_STATE_GPRS,pollingContext));pollingContext[0]++;cm.getVoiceRegistrationState(obtainMessage(EVENT_POLL_STATE_REGISTRATION,pollingContext));pollingContext[0]++;cm.getNetworkSelectionMode(obtainMessage(EVENT_POLL_STATE_NETWORK_SELECTION_MODE,pollingContext));break;}}  }
class C{  public LanguageResourceService(Environment environment){  Set<String> parsedAllowedLanguages;  try {    parsedAllowedLanguages=environment.getProperty(ALLOWED_LANGUAGES);    logger.debug("Available languages will be restricted to: {}",parsedAllowedLanguages);  } catch (  GuacamoleException e) {    parsedAllowedLanguages=null;    logger.error("Unable to parse list of allowed languages: {}",e.getMessage());    logger.debug("Error parsing list of allowed languages.",e);  }  this.allowedLanguages=parsedAllowedLanguages;}  }
class C{  public static boolean isWindows(){  return win7 || win8 || win81|| winXp|| win95|| win98|| winNt|| win2k|| win2003|| win2008|| winVista|| unknownWin;}  }
class C{  protected void writeRunTable(TestSuiteChromosome suite,Map<String,OutputVariable<?>> data,StringBuffer buffer){  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT_NOW);  buffer.append("<tr>");  buffer.append("<td>");  buffer.append(sdf.format(new Date()));  buffer.append("</td>");  buffer.append("<td>");  if (data.containsKey(RuntimeVariable.Total_Time.name())) {    long duration=(Long)data.get(RuntimeVariable.Total_Time.name()).getValue() / 1000L;    buffer.append(String.format("%d:%02d:%02d",duration / 3600,(duration % 3600) / 60,(duration % 60)));  } else   buffer.append("UNKNOWN");  buffer.append("</td>");  buffer.append("<td>");  Double coverage=(Double)getOutputVariableValue(data,RuntimeVariable.Coverage.name());  buffer.append((coverage != null) ? NumberFormat.getPercentInstance().format(coverage) : "UNKNOWN");  buffer.append("</td>");  buffer.append("<td><a href=\"html/");  String filename=writeRunPage(suite,data);  buffer.append(filename);  buffer.append("\">");  buffer.append(data.get("TARGET_CLASS").getValue());  buffer.append("</tr>\n");  buffer.append("<!-- EVOSUITE INSERTION POINT -->\n");  buffer.append("<tr class=\"top\"><td colspan=\"3\">&nbsp;<td></tr>\n");  buffer.append("</table>");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractLongList other,int otherFrom){  if (!(other instanceof LongArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((LongArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  public RdfsAxioms(){  super();}  }
class C{  public double checkMark(File stegoFile,File origSigFile) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  double correl=checkMark(CommonUtil.getFileBytes(stegoFile),stegoFile.getName(),CommonUtil.getFileBytes(origSigFile));  if (Double.isNaN(correl)) {    correl=0.0;  }  return correl;}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @Override public void request(DeployService2Impl<I> deploy,Result<I> result){  result.ok(deploy.get());}  }
class C{  public static double[] findex(int m,IndexFunction f){  double[] fm=new double[m];  for (int i=0; i < fm.length; i++)   fm[i]=f.fi(i);  return fm;}  }
class C{  private void configDragViewHelper(){  dragHelper=ViewDragHelper.create(this,SENSITIVITY,new DraggerHelperCallback(this,dragView,draggerListener));}  }
class C{  protected Call enqueue(Request request){  return enqueue(request,null);}  }
class C{  public final Iterator<String> typesIterator(){  return mDataTypes != null ? mDataTypes.iterator() : null;}  }
class C{  protected static String normalizeUrlEnding(String link){  if (link.indexOf("#") > -1)   link=link.substring(0,link.indexOf("#"));  if (link.endsWith("?"))   link=link.substring(0,link.length() - 1);  if (link.endsWith("/"))   link=link.substring(0,link.length() - 1);  return link;}  }
class C{  private static MapHeap loadFromDB(final File file){  MapHeap ret;  try {    ret=new MapHeap(file,Word.commonHashLength,NaturalOrder.naturalOrder,1024 * 64,500,' ');  } catch (  final IOException e) {    ConcurrentLog.logException(e);    FileUtils.deletedelete(file);    try {      ret=new MapHeap(file,Word.commonHashLength,NaturalOrder.naturalOrder,1024 * 64,500,' ');    } catch (    final IOException e1) {      ConcurrentLog.logException(e1);      ret=null;    }  }  return ret;}  }
class C{  public void abortProcess(){}  }
class C{  public CSVParserBuilder withIgnoreLeadingWhiteSpace(final boolean ignoreLeadingWhiteSpace){  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;  return this;}  }
class C{  private void initialize(){  this.setOpaque(false);  this.setIcon(onlineIcon);  this.setDisabledIcon(offlineIcon);  this.setForeground(Color.GREEN);}  }
class C{  public void printDocumentEntry(DocumentListEntry doc){  StringBuffer output=new StringBuffer();  output.append(" -- " + doc.getTitle().getPlainText() + " ");  if (!doc.getParentLinks().isEmpty()) {    for (    Link link : doc.getParentLinks()) {      output.append("[" + link.getTitle() + "] ");    }  }  output.append(doc.getResourceId());  out.println(output);}  }
class C{  private byte[] streamToArray(InputStream stream) throws IOException {  byte[] result=new byte[0];  byte[] tmp=new byte[8192];  int readCount;  while ((readCount=stream.read(tmp)) > 0) {    byte[] innerTmp=new byte[result.length + readCount];    System.arraycopy(result,0,innerTmp,0,result.length);    System.arraycopy(tmp,0,innerTmp,result.length,readCount);    result=innerTmp;  }  stream.close();  return result;}  }
class C{  public PutResponseMessage(PutResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public void testIncompleteRequest() throws IOException {  String resdata="Response Data";  Request request=Request.newBuilder().buildPartial();  Response response=Response.newBuilder().setStrData(resdata).build();  socket.withResponseProto(response);  callRpc(request,ErrorReason.INVALID_REQUEST_PROTO);  assertNull(callBlockingRpc(request,ErrorReason.INVALID_REQUEST_PROTO));  callAsyncRpc(request,ErrorReason.INVALID_REQUEST_PROTO,false);}  }
class C{  protected static List<PropertyValueExpression> toPropertyExpressions(String... properties){  List<PropertyValueExpression> expr=new ArrayList<PropertyValueExpression>();  for (  String property : properties) {    expr.add(getPropExpr(property));  }  return expr;}  }
class C{  public static boolean isSubRegion(String fullPath){  boolean isSubRegion=false;  if (null != fullPath) {    int idx=fullPath.indexOf(Region.SEPARATOR,Region.SEPARATOR.length());    if (idx >= 0)     isSubRegion=true;  }  return isSubRegion;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.283 -0500",hash_original_method="5C0F2C7B56AA3A635FE64462CDD8279E",hash_generated_method="CA02BD6062B99ED9FB67966A876306F0") public Intent(){  mExtras=new HashMap<String,Object>();}  }
class C{  private void importNotes(final IProgressMonitor monitor){  Activator.inheritVeriniceContextState();  long importNotesStart=System.currentTimeMillis();  ImportNotesTask importTask=new ImportNotesTask();  importTask.execute(ImportTask.TYPE_SQLSERVER,new EclipseProgressMonitorDelegator(monitor));  if (LOG.isDebugEnabled()) {    LOG.debug("Time for ImportNotesTask:\t" + String.valueOf((System.currentTimeMillis() - importNotesStart) / 1000) + " seconds");  }}  }
class C{  public static boolean checkInstanceOf(CharSequence targetClassName,CharSequence referenceClassName){  if ((targetClassName == null) || (referenceClassName == null))   return false;  if (TextUtils.equals(targetClassName,referenceClassName))   return true;  final Class<?> referenceClass=loadOrGetCachedClass(referenceClassName.toString());  final Class<?> targetClass=loadOrGetCachedClass(targetClassName.toString());  return referenceClass != null && targetClass != null && referenceClass.isAssignableFrom(targetClass);}  }
class C{  private IRegion createRegion(){  if (fDeleteOffset == -1) {    if (fStartOffset == -1 || fEndOffset == -1)     return null;    return new Region(fStartOffset,fEndOffset - fStartOffset);  } else   if (fStartOffset == -1 || fEndOffset == -1) {    return new Region(fDeleteOffset,0);  } else {    int offset=Math.min(fDeleteOffset,fStartOffset);    int endOffset=Math.max(fDeleteOffset,fEndOffset);    return new Region(offset,endOffset - offset);  }}  }
class C{  synchronized public long findIndexOf(final long timestamp){  long pos=super.indexOf(encodeKey(timestamp));  if (pos < 0) {    pos=-(pos + 1);    if (pos == 0) {      return -1;    }    pos--;    return pos;  } else {    return pos;  }}  }
class C{  public boolean isImagen(){  boolean returnValue=false;  if (StringUtils.isNotBlank(getExtFich()))   returnValue=Arrays.binarySearch(DocumentosConstants.IMAGE_EXTENSIONS,getExtFich().toUpperCase()) >= 0;  return returnValue;}  }
class C{  public PDUException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void log(String message,Level level){  getBot().log(this,message,level);}  }
class C{  public CircuitBreakerBuilder circuitOpenWindow(Duration circuitOpenWindow){  requireNonNull(circuitOpenWindow,"circuitOpenWindow");  if (circuitOpenWindow.isNegative() || circuitOpenWindow.isZero()) {    throw new IllegalArgumentException("circuitOpenWindow: " + circuitOpenWindow + " (expected: > 0)");  }  this.circuitOpenWindow=circuitOpenWindow;  return this;}  }
class C{  @Override protected String doNationalObjectivesAndOtherEndTurnEffects(final IDelegateBridge bridge){  return super.doNationalObjectivesAndOtherEndTurnEffects(bridge);}  }
class C{  public TourStep(Placement placement,String... targets){  peer=StepPeer.newInstance();  JsArrayString values=JsArrayString.createArray().cast();  for (  String s : targets) {    values.push(s);  }  peer.setTarget(values);  peer.setPlacement(placement.getValue());}  }
class C{  public static ByteBuffer readFully(FileChannel channel,long fileOffset,int bytesToRead) throws IOException {  ByteBuffer buffer=ByteBuffer.allocate(bytesToRead);  int totalBytesRead=0;  while (totalBytesRead < bytesToRead) {    int bytesRead=channel.read(buffer,fileOffset + totalBytesRead);    if (bytesRead < 0) {      throw new EOFException("Expected to read " + bytesToRead + " bytes; only read "+ totalBytesRead+ " before EOF");    }    totalBytesRead+=bytesRead;  }  buffer.flip();  return buffer;}  }
class C{  public void removeCoupling(final Coupling<?> coupling){  manager.removeCoupling(coupling);}  }
class C{  public boolean isEvictOldElements(){  return this.evictOldElements;}  }
class C{  public static void write(int[] xpoints,int[] ypoints,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_XY);  int numPoints=xpoints.length + ypoints.length;  dos.writeInt(numPoints);  for (int i=0; i < numPoints / 2; i++) {    dos.writeInt(xpoints[i]);    dos.writeInt(ypoints[i]);  }  properties.write(dos);}  }
class C{  private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){  for (int span_i=0; span_i < urlSpans.length; span_i++) {    URLSpan urlSpan=urlSpans[span_i];    String urlString=urlSpan.getURL();    if (urlString.startsWith(GEO_PREFIX)) {      Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));      geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      return geoIntent;    }  }  return null;}  }
class C{  public static MapWayAttFilter createBicycleWayFilter(){  MapWayAttFilter filter=new MapWayAttFilter("highway");  filter.setAccepted("primary");  filter.setAccepted("primary_link");  filter.setAccepted("secondary");  filter.setAccepted("tertiary");  filter.setAccepted("road");  filter.setAccepted("residential");  filter.setAccepted("living_street");  filter.setAccepted("pedestrian");  filter.setAccepted("service");  filter.setAccepted("track");  filter.setAccepted("cycleway");  filter.setAccepted("path");  filter.setAccepted("footway");  filter.setAccepted("unclassified");  return filter;}  }
class C{  public Class<? extends DoubleClickStrategyProvider> bindDoubleClickStrategyProvider(){  return N4JSDoubleClickStrategyProvider.class;}  }
class C{  public ScriptAttributeImpl(){}  }
class C{  public double slope(){  return slope;}  }
class C{  public static double decodeDimension(byte value[],int offset){  return Geo3DUtil.decodeValue(NumericUtils.sortableBytesToInt(value,offset));}  }
class C{  public boolean matchName(String regexp) throws IllegalArgumentException {  if (StringUtil.isEmpty(regexp)) {    throw new IllegalArgumentException("Can't perform regular expression since the given input is empty. Check the Method body velocity code: regexp='" + regexp + "'");  }  return methodName.matches(regexp);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().canAdjustSubtitleDelay());}  }
class C{  public Graph next(){  if (storedDag != null) {    Graph temp=storedDag;    storedDag=null;    return temp;  }  if (decoratedGraphs.isEmpty()) {    return null;  }  if (!decoratedGraphs.getLast().hasUndirectedEdge()) {    while (true) {      if (decoratedGraphs.isEmpty()) {        return null;      }      DecoratedGraph graph=decoratedGraphs.removeLast();      if (graph.hasUndirectedEdge() && !graph.wasDirectedRight()) {        throw new IllegalStateException();      }      if (decoratedGraphs.isEmpty() && !graph.hasUndirectedEdge()) {        return new EdgeListGraph(graph.getGraph());      }      if (graph.wasDirectedRight() && !graph.wasDirectedLeft()) {        decoratedGraphs.add(graph);        DecoratedGraph graph1=graph.directLeft();        if (graph1 == null) {          continue;        }        decoratedGraphs.add(graph1);        break;      }    }  }  while (decoratedGraphs.getLast().hasUndirectedEdge()) {    DecoratedGraph graph=decoratedGraphs.getLast().directRight();    if (graph == null) {      continue;    }    decoratedGraphs.add(graph);  }  return new EdgeListGraph(decoratedGraphs.getLast().getGraph());}  }
class C{  protected SolrInputDocument processAdd(final String chain,final SolrParams requestParams,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,requestParams);  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    if (null != processor) {      processor.processAdd(cmd);    }    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public E putBoolean(final String key,final boolean value){  this.bundle.putBoolean(key,value);  return (E)this;}  }
class C{  public List<CorrelationIdentifier> findCorrelationIds(Scope... scope){  List<CorrelationIdentifier> ret=null;  for (int i=0; i < correlationIds.size(); i++) {    CorrelationIdentifier cid=correlationIds.get(i);    for (int j=0; j < scope.length; j++) {      if (cid.getScope() == scope[j]) {        if (ret == null) {          ret=new ArrayList<CorrelationIdentifier>();        }        if (!ret.contains(cid)) {          ret.add(cid);        }      }    }  }  return ret == null ? Collections.emptyList() : ret;}  }
class C{  public void removeSite(Site site){  coordinator.removeServiceConfiguration(site.toConfiguration());  coordinator.deletePath(getSitePath(site.getUuid()));  ConfigurationImpl sitePropsCfg=new ConfigurationImpl();  sitePropsCfg.setId(site.getUuid());  sitePropsCfg.setKind(PropertyInfoExt.TARGET_PROPERTY);  coordinator.removeServiceConfiguration(sitePropsCfg);  log.info("Removed site {} configuration from ZK",site.getUuid());}  }
class C{  private boolean isPassive(Predicate pred){  for (  Word c : pred.getChildren())   if ((c.getLemma().equals("estar") || c.getLemma().equals("ser")) && c.getFeats().contains("auxiliary"))   return true;  return false;}  }
class C{  public SpellCastingGroundContainerMouseState(GroundContainer ground){  super(ground);}  }
class C{  public Stopwords(){  m_Words=new HashSet<String>();  add("a");  add("able");  add("about");  add("above");  add("according");  add("accordingly");  add("across");  add("actually");  add("after");  add("afterwards");  add("again");  add("against");  add("all");  add("allow");  add("allows");  add("almost");  add("alone");  add("along");  add("already");  add("also");  add("although");  add("always");  add("am");  add("among");  add("amongst");  add("an");  add("and");  add("another");  add("any");  add("anybody");  add("anyhow");  add("anyone");  add("anything");  add("anyway");  add("anyways");  add("anywhere");  add("apart");  add("appear");  add("appreciate");  add("appropriate");  add("are");  add("around");  add("as");  add("aside");  add("ask");  add("asking");  add("associated");  add("at");  add("available");  add("away");  add("awfully");  add("b");  add("be");  add("became");  add("because");  add("become");  add("becomes");  add("becoming");  add("been");  add("before");  add("beforehand");  add("behind");  add("being");  add("believe");  add("below");  add("beside");  add("besides");  add("best");  add("better");  add("between");  add("beyond");  add("both");  add("brief");  add("but");  add("by");  add("c");  add("came");  add("can");  add("cannot");  add("cant");  add("cause");  add("causes");  add("certain");  add("certainly");  add("changes");  add("clearly");  add("co");  add("com");  add("come");  add("comes");  add("concerning");  add("consequently");  add("consider");  add("considering");  add("contain");  add("containing");  add("contains");  add("corresponding");  add("could");  add("course");  add("currently");  add("d");  add("definitely");  add("described");  add("despite");  add("did");  add("different");  add("do");  add("does");  add("doing");  add("done");  add("down");  add("downwards");  add("during");  add("e");  add("each");  add("edu");  add("eg");  add("eight");  add("either");  add("else");  add("elsewhere");  add("enough");  add("entirely");  add("especially");  add("et");  add("etc");  add("even");  add("ever");  add("every");  add("everybody");  add("everyone");  add("everything");  add("everywhere");  add("ex");  add("exactly");  add("example");  add("except");  add("f");  add("far");  add("few");  add("fifth");  add("first");  add("five");  add("followed");  add("following");  add("follows");  add("for");  add("former");  add("formerly");  add("forth");  add("four");  add("from");  add("further");  add("furthermore");  add("g");  add("get");  add("gets");  add("getting");  add("given");  add("gives");  add("go");  add("goes");  add("going");  add("gone");  add("got");  add("gotten");  add("greetings");  add("h");  add("had");  add("happens");  add("hardly");  add("has");  add("have");  add("having");  add("he");  add("hello");  add("help");  add("hence");  add("her");  add("here");  add("hereafter");  add("hereby");  add("herein");  add("hereupon");  add("hers");  add("herself");  add("hi");  add("him");  add("himself");  add("his");  add("hither");  add("hopefully");  add("how");  add("howbeit");  add("however");  add("i");  add("ie");  add("if");  add("ignored");  add("immediate");  add("in");  add("inasmuch");  add("inc");  add("indeed");  add("indicate");  add("indicated");  add("indicates");  add("inner");  add("insofar");  add("instead");  add("into");  add("inward");  add("is");  add("it");  add("its");  add("itself");  add("j");  add("just");  add("k");  add("keep");  add("keeps");  add("kept");  add("know");  add("knows");  add("known");  add("l");  add("last");  add("lately");  add("later");  add("latter");  add("latterly");  add("least");  add("less");  add("lest");  add("let");  add("like");  add("liked");  add("likely");  add("little");  add("ll");  add("look");  add("looking");  add("looks");  add("ltd");  add("m");  add("mainly");  add("many");  add("may");  add("maybe");  add("me");  add("mean");  add("meanwhile");  add("merely");  add("might");  add("more");  add("moreover");  add("most");  add("mostly");  add("much");  add("must");  add("my");  add("myself");  add("n");  add("name");  add("namely");  add("nd");  add("near");  add("nearly");  add("necessary");  add("need");  add("needs");  add("neither");  add("never");  add("nevertheless");  add("new");  add("next");  add("nine");  add("no");  add("nobody");  add("non");  add("none");  add("noone");  add("nor");  add("normally");  add("not");  add("nothing");  add("novel");  add("now");  add("nowhere");  add("o");  add("obviously");  add("of");  add("off");  add("often");  add("oh");  add("ok");  add("okay");  add("old");  add("on");  add("once");  add("one");  add("ones");  add("only");  add("onto");  add("or");  add("other");  add("others");  add("otherwise");  add("ought");  add("our");  add("ours");  add("ourselves");  add("out");  add("outside");  add("over");  add("overall");  add("own");  add("p");  add("particular");  add("particularly");  add("per");  add("perhaps");  add("placed");  add("please");  add("plus");  add("possible");  add("presumably");  add("probably");  add("provides");  add("q");  add("que");  add("quite");  add("qv");  add("r");  add("rather");  add("rd");  add("re");  add("really");  add("reasonably");  add("regarding");  add("regardless");  add("regards");  add("relatively");  add("respectively");  add("right");  add("s");  add("said");  add("same");  add("saw");  add("say");  add("saying");  add("says");  add("second");  add("secondly");  add("see");  add("seeing");  add("seem");  add("seemed");  add("seeming");  add("seems");  add("seen");  add("self");  add("selves");  add("sensible");  add("sent");  add("serious");  add("seriously");  add("seven");  add("several");  add("shall");  add("she");  add("should");  add("since");  add("six");  add("so");  add("some");  add("somebody");  add("somehow");  add("someone");  add("something");  add("sometime");  add("sometimes");  add("somewhat");  add("somewhere");  add("soon");  add("sorry");  add("specified");  add("specify");  add("specifying");  add("still");  add("sub");  add("such");  add("sup");  add("sure");  add("t");  add("take");  add("taken");  add("tell");  add("tends");  add("th");  add("than");  add("thank");  add("thanks");  add("thanx");  add("that");  add("thats");  add("the");  add("their");  add("theirs");  add("them");  add("themselves");  add("then");  add("thence");  add("there");  add("thereafter");  add("thereby");  add("therefore");  add("therein");  add("theres");  add("thereupon");  add("these");  add("they");  add("think");  add("third");  add("this");  add("thorough");  add("thoroughly");  add("those");  add("though");  add("three");  add("through");  add("throughout");  add("thru");  add("thus");  add("to");  add("together");  add("too");  add("took");  add("toward");  add("towards");  add("tried");  add("tries");  add("truly");  add("try");  add("trying");  add("twice");  add("two");  add("u");  add("un");  add("under");  add("unfortunately");  add("unless");  add("unlikely");  add("until");  add("unto");  add("up");  add("upon");  add("us");  add("use");  add("used");  add("useful");  add("uses");  add("using");  add("usually");  add("uucp");  add("v");  add("value");  add("various");  add("ve");  add("very");  add("via");  add("viz");  add("vs");  add("w");  add("want");  add("wants");  add("was");  add("way");  add("we");  add("welcome");  add("well");  add("went");  add("were");  add("what");  add("whatever");  add("when");  add("whence");  add("whenever");  add("where");  add("whereafter");  add("whereas");  add("whereby");  add("wherein");  add("whereupon");  add("wherever");  add("whether");  add("which");  add("while");  add("whither");  add("who");  add("whoever");  add("whole");  add("whom");  add("whose");  add("why");  add("will");  add("willing");  add("wish");  add("with");  add("within");  add("without");  add("wonder");  add("would");  add("would");  add("x");  add("y");  add("yes");  add("yet");  add("you");  add("your");  add("yours");  add("yourself");  add("yourselves");  add("z");  add("zero");}  }
class C{  public static <T>SuperclassIterable<T> ofIncludeSelf(Class<T> type){  return new SuperclassIterable<>(type,true);}  }
class C{  public void testComputeLocationWhenJBossEsbPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("esb");  this.mockLog.expects(never()).method("warn");  String location=deployableElement.computeLocation(createDefaultProject("jboss-esb",null));  assertTrue(location,location.endsWith("projectFinalName.esb"));}  }
class C{  public void futureLongResult(long futPtr,long res){  enter();  try {    PlatformCallbackUtils.futureLongResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  private BatchResponse onException(PartitionReader p,Exception ex){  EventMetaInfo meta=genEventMeta(OnException,p,ex);  try {    fireSendEvents(null,meta);    if (LOGGER.isInfoEnabled())     LOGGER.info(taskId + " on exception for " + p.getId(),ex);  } catch (  Throwable e) {    LOGGER.error(taskId + " fail to on exception for " + p.getId(),e);    registerError(e);  }  return meta.getBatchResponse();}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public GroupCategorySet(GroupCategory category){  Assert.isNotNull(category);  fContent=new ArrayList(1);  fContent.add(category);}  }
class C{  private static boolean isXLargeTablet(final Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public static String maskRight(String s,int len,char mask_ch){  if (len <= 0) {    return s;  }  len=Math.min(len,s.length());  StringBuilder sb=new StringBuilder();  sb.append(s.substring(0,s.length() - len));  for (int i=0; i < len; i++) {    sb.append(mask_ch);  }  return sb.toString();}  }
class C{  @Path("list") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public ListResponse list(final ListRequest request) throws ApiException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return subversionApi.list(request);}  }
class C{  public boolean isDocControlled(){  MElementValue acct=getAccountElementValue();  if (acct == null) {    log.warning("Account not found for C_ValidCombination_ID=" + getC_ValidCombination_ID());    return false;  }  return acct.isDocControlled();}  }
class C{  public void add(final ReferenceContainer<WordReference> container) throws SpaceExceededException {  int remaining=maxRWIsCount;  for (  final ReferenceContainer<WordReference> ic : this)   remaining-=ic.size();  if (remaining <= 0) {    try {      Transmission.this.segment.storeRWI(container);    } catch (    final Exception e) {      ConcurrentLog.logException(e);    }    return;  }  final ReferenceContainer<WordReference> c=(remaining >= container.size()) ? container : trimContainer(container,remaining);  final List<byte[]> notFoundx=new ArrayList<byte[]>();  Set<String> testids=new HashSet<String>();  Iterator<WordReference> i=c.entries();  while (i.hasNext()) {    final WordReference e=i.next();    if (this.references.has(e.urlhash()))     continue;    if (this.badReferences.has(e.urlhash())) {      notFoundx.add(e.urlhash());      continue;    }    testids.add(ASCII.String(e.urlhash()));  }  i=c.entries();  while (i.hasNext()) {    final WordReference e=i.next();    try {      if (Transmission.this.segment.fulltext().getLoadTime(ASCII.String(e.urlhash())) >= 0) {        this.references.put(e.urlhash());      } else {        notFoundx.add(e.urlhash());        this.badReferences.put(e.urlhash());      }    } catch (    IOException e1) {      ConcurrentLog.logException(e1);      notFoundx.add(e.urlhash());      this.badReferences.put(e.urlhash());    }  }  for (  final byte[] b : notFoundx)   c.removeReference(b);  this.containers.add(c);}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  suite.addTestSuite(org.ice4j.attribute.AddressAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.XorOnlyTest.class);  suite.addTestSuite(org.ice4j.attribute.AttributeDecoderTest.class);  suite.addTestSuite(org.ice4j.attribute.ChangeRequestAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.ErrorCodeAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.UnknownAttributesAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.SoftwareAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.OptionalAttributeAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.ConnectionIdAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.RequestedAddressFamilyAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.UsernameAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.NonceAttributeTest.class);  suite.addTestSuite(org.ice4j.attribute.RealmAttributeTest.class);  suite.addTestSuite(org.ice4j.message.MessageFactoryTest.class);  suite.addTestSuite(org.ice4j.message.MessageTest.class);  suite.addTestSuite(org.ice4j.stack.ShallowStackTest.class);  suite.addTestSuite(org.ice4j.MessageEventDispatchingTest.class);  suite.addTestSuite(org.ice4j.TransactionSupportTests.class);  suite.addTestSuite(org.ice4j.stunclient.StunAddressDiscovererTest.class);  suite.addTestSuite(org.ice4j.stunclient.StunAddressDiscovererTest_v6.class);  suite.addTestSuite(org.ice4j.stunclient.StunAddressDiscovererTest_v4v6.class);  return suite;}  }
class C{  public INode copy(){  return new JumpingSolitaireState(filled);}  }
class C{  public String outputString(CDATA cdata){  StringWriter out=new StringWriter();  try {    output(cdata,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public void addIndex(int streamViewStreamNum){  pollingStreams.add(streamViewStreamNum);}  }
class C{  public static final HashMap readThisMapXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  HashMap map=new HashMap();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      if (name[0] != null) {        map.put(name[0],val);      } else {        throw new XmlPullParserException("Map value without name attribute: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return map;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public static boolean isDefaultCreateBindingsDir(){  return DEFAULT_CREATE_BINDINGS_DIR;}  }
class C{  private void startUploadRepeat(final String hostname,final int port,final String uri,final int fileSizeOctet){  mSpeedTestSocket.startUpload(hostname,port,uri,fileSizeOctet);}  }
class C{  public static byte[] buildNalUnit(byte[] data,int offset,int length){  byte[] nalUnit=new byte[length + NAL_START_CODE.length];  System.arraycopy(NAL_START_CODE,0,nalUnit,0,NAL_START_CODE.length);  System.arraycopy(data,offset,nalUnit,NAL_START_CODE.length,length);  return nalUnit;}  }
class C{  void writeExternal(DataOutput out) throws IOException {  Ser.writeEpochSec(toEpochSecond(),out);  Ser.writeOffset(offsetBefore,out);  Ser.writeOffset(offsetAfter,out);}  }
class C{  public double splitCritValue(Distribution train,Distribution test,int noClassesDefault){  return 0;}  }
class C{  public static int intersectLineSegmentAab(float p0X,float p0Y,float p0Z,float p1X,float p1Y,float p1Z,float minX,float minY,float minZ,float maxX,float maxY,float maxZ,Vector2f result){  float dirX=p1X - p0X, dirY=p1Y - p0Y, dirZ=p1Z - p0Z;  float invDirX=1.0f / dirX, invDirY=1.0f / dirY, invDirZ=1.0f / dirZ;  float tNear, tFar, tymin, tymax, tzmin, tzmax;  if (invDirX >= 0.0f) {    tNear=(minX - p0X) * invDirX;    tFar=(maxX - p0X) * invDirX;  } else {    tNear=(maxX - p0X) * invDirX;    tFar=(minX - p0X) * invDirX;  }  if (invDirY >= 0.0f) {    tymin=(minY - p0Y) * invDirY;    tymax=(maxY - p0Y) * invDirY;  } else {    tymin=(maxY - p0Y) * invDirY;    tymax=(minY - p0Y) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  if (invDirZ >= 0.0f) {    tzmin=(minZ - p0Z) * invDirZ;    tzmax=(maxZ - p0Z) * invDirZ;  } else {    tzmin=(maxZ - p0Z) * invDirZ;    tzmax=(minZ - p0Z) * invDirZ;  }  if (tNear > tzmax || tzmin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Float.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Float.isNaN(tFar) ? tymax : tFar;  tNear=tzmin > tNear ? tzmin : tNear;  tFar=tzmax < tFar ? tzmax : tFar;  int type=OUTSIDE;  if (tNear < tFar && tNear <= 1.0f && tFar >= 0.0f) {    if (tNear > 0.0f && tFar > 1.0f) {      tFar=tNear;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0f && tFar < 1.0f) {      tNear=tFar;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0f && tFar > 1.0f) {      type=INSIDE;    } else {      type=TWO_INTERSECTION;    }    result.x=tNear;    result.y=tFar;  }  return type;}  }
class C{  public void addFilter(String filterName,String description,String className,Map<String,String> initParameters){  return;}  }
class C{  public OdbcConfiguration(){}  }
class C{  @Override protected void actionPerformed(GuiButton par1GuiButton){switch (par1GuiButton.id) {case 0:    this.tileEntity.empMode=1;  break;case 1:this.tileEntity.empMode=2;break;case 2:this.tileEntity.empMode=0;break;}ArrayList data=new ArrayList();data.add(2);data.add(tileEntity.empMode);Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));}  }
class C{  @SafeVarargs public static <Type>Validator<Type> disjunctive(@NonNull final Context context,@NonNull final Validator<Type>... validators){  return DisjunctiveValidator.create(context,R.string.default_error_message,validators);}  }
class C{  public XMLInstances(Instances data) throws Exception {  this();  setInstances(data);}  }
class C{  public Boolean isDisk(){  return disk;}  }
class C{  public void appendLong(long x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(8);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeLong(x);    appendBytes(buffer.toByteArray(),0,8);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  public void rethrowError() throws Throwable {  if (tag == ERROR) {    if (value instanceof TypeNotPresentException) {      TypeNotPresentException tnpe=(TypeNotPresentException)value;      throw new TypeNotPresentException(tnpe.typeName(),tnpe.getCause());    } else     if (value instanceof EnumConstantNotPresentException) {      EnumConstantNotPresentException ecnpe=(EnumConstantNotPresentException)value;      throw new EnumConstantNotPresentException(ecnpe.enumType(),ecnpe.constantName());    } else     if (value instanceof ArrayStoreException) {      ArrayStoreException ase=(ArrayStoreException)value;      throw new ArrayStoreException(ase.getMessage());    }    Throwable error=(Throwable)value;    StackTraceElement[] ste=error.getStackTrace();    ByteArrayOutputStream bos=new ByteArrayOutputStream(ste == null ? 512 : (ste.length + 1) * 80);    ObjectOutputStream oos=new ObjectOutputStream(bos);    oos.writeObject(error);    oos.flush();    oos.close();    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    ObjectInputStream ois=new ObjectInputStream(bis);    error=(Throwable)ois.readObject();    ois.close();    throw error;  }}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  StochasticOscillatorDataset clone=(StochasticOscillatorDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public boolean letsEnergyOut(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  protected void sendAttachToBuffer(ServiceParameterBuffer spb) throws SQLException, IOException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(op_service_attach);  xdrOut.writeInt(0);  xdrOut.writeString(connection.getAttachObjectName(),getEncoding());  xdrOut.writeTyped(spb);}  }
class C{  public static HttpPost parseHttpTest(CloseableHttpClient httpclient,Node test) throws Exception {  List<Node> headers=getNamedChildren("header",test);  List<Node> cookies=getNamedChildren("cookie",test);  List<Node> getParams=getNamedChildren("getparam",test);  List<Node> formParams=getNamedChildren("formparam",test);  String query="";  String number=getAttributeValue("name",test);  boolean first=true;  for (  Node field : getParams) {    if (!first) {      first=false;      query+="&";    }    String name=getAttributeValue("name",field);    String value=getAttributeValue("value",field);    query+=name + "=" + URLEncoder.encode(value);  }  String fullURL=getAttributeValue("URL",test);  if (!query.isEmpty()) {    fullURL+="?" + query;  }  HttpPost httpPost=new HttpPost(fullURL);  for (  Node header : headers) {    String name=getAttributeValue("name",header);    String value=getAttributeValue("value",header);    httpPost.addHeader(name,value);  }  for (  Node cookie : cookies) {    String name=getAttributeValue("name",cookie);    String value=getAttributeValue("value",cookie);    httpPost.addHeader("Cookie",name + "=" + value);  }  List<NameValuePair> fields=new ArrayList<NameValuePair>();  for (  Node field : formParams) {    String name=getAttributeValue("name",field);    String value=getAttributeValue("value",field);    NameValuePair nvp=new BasicNameValuePair(name,value);    fields.add(nvp);  }  httpPost.setEntity(new UrlEncodedFormEntity(fields));  return httpPost;}  }
class C{  public SelectionEditModeAction(final NetworkPanel networkPanel){  super("Selection",networkPanel,EditMode.SELECTION);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Arrow.png"));  putValue(SHORT_DESCRIPTION,"Selection mode (s)");}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected static Map<String,String> loadPath(String path) throws IOException {  return loadFile(new File(path));}  }
class C{  private boolean shouldStartOnCurrentSite(){  if (drUtil.isActiveSite()) {    return true;  }  Site localSite=drUtil.getLocalSite();  SiteState state=localSite.getState();  if (state == SiteState.STANDBY_PAUSED || state == SiteState.ACTIVE_DEGRADED) {    return true;  }  _log.debug("This site is not active site or standby paused, no need to do network monitor");  return false;}  }
class C{  public BiosCommandResult discoverRPSystem(ProtectionSystem protectionSystem) throws RecoverPointException {  _log.info("discoverRPSystem {} - start",protectionSystem.getId());  RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);  Set<RPSite> rpSites=rp.getAssociatedRPSites();  if (rpSites == null || rpSites.isEmpty()) {    throw DeviceControllerExceptions.recoverpoint.noAssociatedRPSitesFound(protectionSystem.getIpAddress());  }  RPSite firstRpSite=rpSites.iterator().next();  RecoverPointStatisticsResponse response=rp.getRPSystemStatistics();  _rpStatsHelper.updateProtectionSystemMetrics(protectionSystem,rpSites,response,_dbClient);  _log.info("discoverRPSystem {} - complete",protectionSystem.getId());  BiosCommandResult result=new BiosCommandResult();  result.setCommandSuccess(true);  result.setCommandStatus(Operation.Status.ready.name());  List<Object> returnList=new ArrayList<Object>();  String serialNumber=firstRpSite.getSiteGUID();  protectionSystem.setInstallationId(serialNumber.substring(0,serialNumber.lastIndexOf(":")));  protectionSystem.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(ProtectionSystem._RP,protectionSystem.getInstallationId()));  _log.info("Clear out existing management IPs. The list will be repopulated...");  protectionSystem.getClusterManagementIPs().clear();  StringMap rpSiteNamesMap=new StringMap();  for (  RPSite rpSite : rpSites) {    if (!rpSite.getSiteManagementIPv4().equals(protectionSystem.getIpAddress()) && !protectionSystem.getClusterManagementIPs().contains(rpSite.getSiteManagementIPv4())) {      _log.info(String.format("Adding management ip [%s] for cluster [%s] " + "to valid cluster management ip addresses.",rpSite.getSiteManagementIPv4(),rpSite.getSiteName()));      protectionSystem.getClusterManagementIPs().add(rpSite.getSiteManagementIPv4());    }    rpSiteNamesMap.put(rpSite.getInternalSiteName(),rpSite.getSiteName());  }  protectionSystem.setRpSiteNames(rpSiteNamesMap);  protectionSystem.setMajorVersion(firstRpSite.getSiteVersion());  this.verifyMinimumSupportedFirmwareVersion(protectionSystem);  returnList.add(protectionSystem);  result.setObjectList(returnList);  return result;}  }
class C{  private double linearApproximate(double[] x,double[] y,double pt,double low,double high){  int i=0;  int j=x.length - 1;  if (pt < x[i]) {    return low;  }  if (pt > x[j]) {    return high;  }  while (i < j - 1) {    int ij=(i + j) / 2;    if (pt < x[ij]) {      j=ij;    } else {      i=ij;    }  }  if (pt == x[j]) {    return y[j];  }  if (pt == x[i]) {    return y[i];  }  return y[i] + (y[j] - y[i]) * ((pt - x[i]) / (x[j] - x[i]));}  }
class C{  public void add(IPoint p){  points.add(p);}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public String initialize(){  m_Statistics.clear();  return null;}  }
class C{  public static boolean startsWithIgnoreCaseAndNonAlphaNumeric(String searchIn,String searchFor){  if (searchIn == null) {    return searchFor == null;  }  int beginPos=0;  int inLength=searchIn.length();  for (; beginPos < inLength; beginPos++) {    char c=searchIn.charAt(beginPos);    if (Character.isLetterOrDigit(c)) {      break;    }  }  return startsWithIgnoreCase(searchIn,beginPos,searchFor);}  }
class C{  public void writeRawByte(final int value) throws IOException {  writeRawByte((byte)value);}  }
class C{  public void applicationWillResignActive(){}  }
class C{  public static <T>Filter<T> collectionRejectFilter(T[] objs){  return new CollectionAcceptFilter<T>(Arrays.asList(objs),false);}  }
class C{  public synchronized void addServer(Server server){  offline.add(server);}  }
class C{  public void filter(double[] x,double[] y){  double s0;  int n=Math.min(x.length,y.length);  for (int i=0; i < n; i++) {    s0=x[i] - a1 * s1 - a2 * s2;    y[i]=(double)(b0 * s0 + b1 * s1 + b2 * s2);    s2=s1;    s1=s0;  }}  }
class C{  public static <E>TopicProcessor<E> create(String name,int bufferSize,WaitStrategy strategy,Supplier<E> signalSupplier){  return new TopicProcessor<>(name,bufferSize,strategy == null ? WaitStrategy.phasedOffLiteLock(200,100,TimeUnit.MILLISECONDS) : strategy,false,true,signalSupplier);}  }
class C{  public List<Space> S() throws ScopeException {  ArrayList<Space> spaces=new ArrayList<Space>();  for (  Domain domain : getDomains()) {    spaces.add(S(domain));  }  return spaces;}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.361 -0500",hash_original_method="EC026D992E5F4947C061D86521AAB3B6",hash_generated_method="FDA980A1A1FF4EB83AA2278980428DCA") public float bearingTo(Location dest){synchronized (mResults) {    if (mLatitude != mLat1 || mLongitude != mLon1 || dest.mLatitude != mLat2 || dest.mLongitude != mLon2) {      computeDistanceAndBearing(mLatitude,mLongitude,dest.mLatitude,dest.mLongitude,mResults);      mLat1=mLatitude;      mLon1=mLongitude;      mLat2=dest.mLatitude;      mLon2=dest.mLongitude;      mDistance=mResults[0];      mInitialBearing=mResults[1];    }    return mInitialBearing;  }}  }
class C{  private void resetIndicator(){  rootView.removeView(indicator);  indicator=new DotIndicator(this);  rootView.addView(indicator);}  }
class C{  protected static Node selectNode(String xpath,Object node){  Node domNode=getNode(node);  if (domNode == null) {    log.severe("Unable to select node for non DOM Node object");    return null;  }  try {    xpath=getExpression(xpath);    XPath xp=XPathFactory.newInstance().newXPath();    return (Node)xp.evaluate(xpath,domNode,XPathConstants.NODE);  } catch (  XPathExpressionException e) {    log.log(Level.SEVERE,"Failed to select node for xpath '" + xpath + "'",e);  }  return null;}  }
class C{  public AutoExecutor(AutoMode mode){  m_auto=mode;}  }
class C{  public static void generateRPClass(){  createRPClass();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void addDecomposablePolygonAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      List<BodyFixture> fixtures=AddNonConvexFixtureDialog.show(ControlUtilities.getParentWindow(this),Icons.ADD_NON_CONVEX_POLYGON.getImage());      if (fixtures != null) {synchronized (Simulation.LOCK) {          for (          BodyFixture fixture : fixtures) {            body.addFixture(fixture);          }          if (!body.isMassExplicit()) {            body.updateMass();          }        }        for (        BodyFixture fixture : fixtures) {          DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);          this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        }        this.tree.expandPath(path);      }    }  }}  }
class C{  public static float max(final float... array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  }  Validate.isTrue(array.length != 0,"Array cannot be empty.");  float max=array[0];  for (int j=1; j < array.length; j++) {    max=max(array[j],max);  }  return max;}  }
class C{  @Deprecated public StaxWriter(final QNameMap qnameMap,final XMLStreamWriter out,final boolean writeEnclosingDocument,final boolean namespaceRepairingMode,final XmlFriendlyReplacer replacer) throws XMLStreamException {  this(qnameMap,out,writeEnclosingDocument,namespaceRepairingMode,(NameCoder)replacer);}  }
class C{  public final int matchData(String type,String scheme,Uri data){  final ArrayList<String> types=mDataTypes;  final ArrayList<String> schemes=mDataSchemes;  int match=MATCH_CATEGORY_EMPTY;  if (types == null && schemes == null) {    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);  }  if (schemes != null) {    if (schemes.contains(scheme != null ? scheme : "")) {      match=MATCH_CATEGORY_SCHEME;    } else {      return NO_MATCH_DATA;    }    final ArrayList<PluginPatternMatcher> schemeSpecificParts=mDataSchemeSpecificParts;    if (schemeSpecificParts != null) {      match=hasDataSchemeSpecificPart(data.getSchemeSpecificPart()) ? MATCH_CATEGORY_SCHEME_SPECIFIC_PART : NO_MATCH_DATA;    }    if (match != MATCH_CATEGORY_SCHEME_SPECIFIC_PART) {      final ArrayList<AuthorityEntry> authorities=mDataAuthorities;      if (authorities != null) {        int authMatch=matchDataAuthority(data);        if (authMatch >= 0) {          final ArrayList<PluginPatternMatcher> paths=mDataPaths;          if (paths == null) {            match=authMatch;          } else           if (hasDataPath(data.getPath())) {            match=MATCH_CATEGORY_PATH;          } else {            return NO_MATCH_DATA;          }        } else {          return NO_MATCH_DATA;        }      }    }    if (match == NO_MATCH_DATA) {      return NO_MATCH_DATA;    }  } else {    if (scheme != null && !"".equals(scheme) && !"content".equals(scheme) && !"file".equals(scheme)) {      return NO_MATCH_DATA;    }  }  if (types != null) {    if (findMimeType(type)) {      match=MATCH_CATEGORY_TYPE;    } else {      return NO_MATCH_TYPE;    }  } else {    if (type != null) {      return NO_MATCH_TYPE;    }  }  return match + MATCH_ADJUSTMENT_NORMAL;}  }
class C{  private void restoreVar(){  log.debug("restoring to: " + realVar + " with dist: "+ checkpointedDistance);  realVar.setConcreteValue(checkpointedConcreteValue);}  }
class C{  public static boolean hasSession(long id){synchronized (sSessions) {    return sSessions.containsKey(id);  }}  }
class C{  public static void shuffle(int[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  @Override public void handlePatch(Operation patch){  State currentState=getState(patch);  State patchState=patch.getBody(State.class);  URI referer=patch.getReferer();  try {    validateStatePatch(currentState,patchState,referer);    applyPatch(currentState,patchState);    validateState(currentState);    patch.complete();switch (currentState.taskInfo.stage) {case CREATED:      break;case STARTED:    handleStartedStage(currentState);  break;case FAILED:case FINISHED:case CANCELLED:sendTaskSchedulerServicePatch();break;default :throw new IllegalStateException(String.format("Invalid stage %s",currentState.taskInfo.stage));}} catch (Throwable e) {ServiceUtils.logSevere(this,e);if (!OperationUtils.isCompleted(patch)) {patch.fail(e);}}}  }
class C{  public NodeBuilder clusterName(String clusterName){  settings.put("cluster.name",clusterName);  return this;}  }
class C{  @Override protected String doInBackground(Void... params){  try {    URL website=new URL(streamUrl);    URLConnection connection=null;    connection=website.openConnection();    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));    response=new StringBuilder();    String inputLine;    while ((inputLine=in.readLine()) != null) {      if (inputLine.contains("http")) {        int startIndex=inputLine.indexOf("http");        String streamUrl=inputLine.substring(startIndex);        response.append(streamUrl);        break;      }    }    in.close();  } catch (  IOException e) {    e.printStackTrace();  }  if (response == null)   return "";  return response.toString();}  }
class C{  public static boolean isFilenameValid(String filename){  return true;}  }
class C{  public Object clone(){  GPIndividual myobj=(GPIndividual)(super.clone());  myobj.trees=new GPTree[trees.length];  for (int x=0; x < trees.length; x++) {    myobj.trees[x]=(GPTree)(trees[x].clone());    myobj.trees[x].owner=myobj;  }  return myobj;}  }
class C{  @Override public void onExited(final ActiveEntity entity,final StendhalRPZone zone,final int oldX,final int oldY){  if (entity == getOccupant()) {    clearOccupant();  }}  }
class C{  public void dispose(){  m_hexView.getHexView().removeHexListener(m_hexPanelListener);  m_hexView.dispose();}  }
class C{  @Deprecated public ConfigBuilder withMaxSessions(int size){  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.CATCH_BLOCK___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:    return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public Matrix zoom(float scaleX,float scaleY,float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(scaleX,scaleY,x,y);  return save;}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  public static void copyStream(InputStream fin,OutputStream fout) throws IOException {  int bufsize=4096;  byte[] buf=null;  for (int i=0; i < 64; ++i) {    if (i < 8) {      bufsize*=2;      buf=new byte[bufsize];    }    int size=0;    int len=0;    do {      len=fin.read(buf,size,bufsize - size);      if (len >= 0)       size+=len; else {        fout.write(buf,0,size);        return;      }    } while (size < bufsize);    fout.write(buf);  }  throw new IOException("too much data");}  }
class C{  private void mergeDepartures(TransitScheduleFactoryImpl factory,Map<Id<TransitRoute>,TransitRoute> transitRoutes,TransitRoute mergedTransitRoute,String[] listOfTransitRoutes){  TransitRouteStop startTransitRouteStop=mergedTransitRoute.getStops().get(0);  for (int i=0; i < listOfTransitRoutes.length; i++) {    TransitRoute transitRoute=transitRoutes.get(Id.create(listOfTransitRoutes[i],TransitRoute.class));    if (mergedTransitRouteContainsTransitRouteStops(mergedTransitRoute,transitRoute,startTransitRouteStop)) {      for (      Departure departure : transitRoute.getDepartures().values()) {        String departureId=mergedTransitRoute.getDepartures().size() < 10 ? "0" + Integer.toString(mergedTransitRoute.getDepartures().size()) : Integer.toString(mergedTransitRoute.getDepartures().size());        Departure dep=factory.createDeparture(Id.create(departureId,Departure.class),departure.getDepartureTime() + transitRoute.getStop(startTransitRouteStop.getStopFacility()).getDepartureOffset());        dep.setVehicleId(departure.getVehicleId());        mergedTransitRoute.addDeparture(dep);      }    }  }}  }
class C{  public String name(){  return name;}  }
class C{  private DefaultFacelet createFacelet(URL url) throws IOException {  if (log.isLoggable(Level.FINE)) {    log.fine("Creating Facelet for: " + url);  }  String escapedBaseURL=Pattern.quote(this.baseUrl.getFile());  String alias='/' + url.getFile().replaceFirst(escapedBaseURL,"");  try {    FaceletHandler h=this.compiler.compile(url,alias);    return new DefaultFacelet(this,this.compiler.createExpressionFactory(),url,alias,h);  } catch (  FileNotFoundException fnfe) {    throw new FileNotFoundException("Facelet " + alias + " not found at: "+ url.toExternalForm());  }}  }
class C{  public AbstractMethodError(){  super();}  }
class C{  public final Node peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  private double scalarProduct(double[][] x,double[][] y,int d) throws Exception {  if (x.length < d || y.length < d) {    throw new Exception("At least one vector has a too small dimension!");  }  double result=0;  for (int i=0; i < d; i++) {    result+=x[i][0] * y[i][0];  }  return result;}  }
class C{  public static ParsedURLData parseURL(ParsedURL baseURL,String urlStr){  if (baseURL == null)   return parseURL(urlStr);  String protocol=getProtocol(urlStr);  if (protocol == null)   protocol=baseURL.getProtocol();  ParsedURLProtocolHandler handler=getHandler(protocol);  return handler.parseURL(baseURL,urlStr);}  }
class C{  public String encodeBody(){  StringBuffer s=new StringBuffer();  if (retryAfter != null)   s.append(retryAfter);  if (comment != null)   s.append(SP + LPAREN + comment+ RPAREN);  if (!parameters.isEmpty()) {    s.append(SEMICOLON + parameters.encode());  }  return s.toString();}  }
class C{  public VirtualMachineError(java.lang.String s){}  }
class C{  public void sendMarklinMessage(MarklinMessage m,MarklinListener reply){  sendMessage(m,reply);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.461 -0500",hash_original_method="349205E9CFEFFD40FE2D93E7DAF8E867",hash_generated_method="D8B4D1F60CD4A49FD451D41BAE0D9EB6") public Object parseObject(PemObject obj) throws IOException {  try {    ASN1InputStream aIn=new ASN1InputStream(obj.getContent());    return ContentInfo.getInstance(aIn.readObject());  } catch (  Exception e) {    throw new PEMException("problem parsing PKCS7 object: " + e.toString(),e);  }}  }
class C{  static private String BYTE_Min_Minus(){  long tempValue=Byte.MIN_VALUE - 1;  return String.valueOf(tempValue);}  }
class C{  public static void reportInfo(String infoText){  ToolIO.out.println(infoText);}  }
class C{  @Override public void displayOffers(List<Offer> offers){  this.offers=offers;  planAdapter.setOffers(offers);}  }
class C{  public int[] items(){  return m_items;}  }
class C{  public boolean metaURI(){  return endpoint != null && (endpoint.indexOf("/*/") != -1 || endpoint.endsWith("/*") || endpoint.indexOf("/*[") != -1);}  }
class C{  public void test_Constructor(){  try {    new MockDateFormat();  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public static long readLong(InputStream in) throws IOException {  byte b[]=new byte[8];  int cnt=read(in,b);  if (cnt < 8) {    if (cnt <= 0) {      throw new IOException("readLong: the imput stream is empty.");    } else {      throw new IOException("readLong: not enought bytes.");    }  }  return byteArrayToLong(b);}  }
class C{  final public boolean isInLayout(){  return mInLayout;}  }
class C{  public byte[] toByteArray(){  if (state != State.PASS) {    logger.log(Level.WARNING,"Failed to instrument class " + className + " because "+ message);    return original;  }  return cw.toByteArray();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void close() throws IOException {  if (_isClosed) {    return;  }  _isClosed=true;  flushBlock(true);  _cursor.setBlob(_column.index(),this);}  }
class C{  public static <T,S extends Comparable<S>>Pair<T,S> min(Map<T,S> map){  S max=null;  T argMax=null;  if (map.size() > 0) {    argMax=map.keySet().iterator().next();    max=map.get(argMax);  }  for (  T item : map.keySet()) {    S value=map.get(item);    if (value.compareTo(max) < 0) {      max=value;      argMax=item;    }  }  return new Pair<>(argMax,max);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  private void positionItems(){  int top=mListTop + mListTopOffset;  for (int index=0; index < getChildCount(); index++) {    final View child=getChildAt(index);    final int width=child.getMeasuredWidth();    final int height=child.getMeasuredHeight();    final int left=(getWidth() - width) / 2;    final int margin=getChildMargin(child);    final int childTop=top + margin;    child.layout(left,childTop,left + width,childTop + height);    top+=height + 2 * margin;  }}  }
class C{  BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){  if (src == null || src.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "source images of type BufferedImage.TYPE_INT_ARGB.");  }  if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "destination images of type BufferedImage.TYPE_INT_ARGB.");  }  double trangleAngle=Math.toRadians(angle - 90);  int offsetX=(int)(Math.sin(trangleAngle) * distance);  int offsetY=(int)(Math.cos(trangleAngle) * distance);  int tmpOffX=offsetX + size;  int tmpOffY=offsetX + size;  int tmpW=w + offsetX + size+ size;  int tmpH=h + offsetX + size;  int[] lineBuf=getArrayCache().getTmpIntArray(w);  byte[] srcAlphaBuf=getArrayCache().getTmpByteArray1(tmpW * tmpH);  Arrays.fill(srcAlphaBuf,(byte)0xFF);  byte[] tmpBuf1=getArrayCache().getTmpByteArray2(tmpW * tmpH);  byte[] tmpBuf2=getArrayCache().getTmpByteArray3(tmpW * tmpH);  Raster srcRaster=src.getRaster();  for (int y=0; y < h; y++) {    int dy=(y + tmpOffY);    int offset=dy * tmpW;    srcRaster.getDataElements(0,y,w,1,lineBuf);    for (int x=0; x < w; x++) {      int dx=x + tmpOffX;      srcAlphaBuf[offset + dx]=(byte)((255 - ((lineBuf[x] & 0xFF000000) >>> 24)) & 0xFF);    }  }  float[] kernel=EffectUtils.createGaussianKernel(size * 2);  EffectUtils.blur(srcAlphaBuf,tmpBuf2,tmpW,tmpH,kernel,size * 2);  EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size * 2);  float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);  for (int i=0; i < tmpBuf1.length; i++) {    int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);    tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;  }  if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  WritableRaster shadowRaster=dst.getRaster();  int red=color.getRed(), green=color.getGreen(), blue=color.getBlue();  for (int y=0; y < h; y++) {    int srcY=y + tmpOffY;    int offset=srcY * tmpW;    int shadowOffset=(srcY - offsetY) * tmpW;    for (int x=0; x < w; x++) {      int srcX=x + tmpOffX;      int origianlAlphaVal=255 - ((int)srcAlphaBuf[offset + srcX] & 0xFF);      int shadowVal=(int)tmpBuf1[shadowOffset + (srcX - offsetX)] & 0xFF;      int alphaVal=Math.min(origianlAlphaVal,shadowVal);      lineBuf[x]=((byte)alphaVal & 0xFF) << 24 | red << 16 | green << 8 | blue;    }    shadowRaster.setDataElements(0,y,w,1,lineBuf);  }  return dst;}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public void zoomInImage(float deltaScale){  zoomInImage(deltaScale,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  public boolean hasInfo(){  return fSeverity == FATAL || fSeverity == ERROR || fSeverity == WARNING || fSeverity == INFO;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType03.class,args);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  private void forceCustomerId(String customerId,Dimension dimension){  DimensionPK id=dimension.getParentId();  if (id != null) {    id.setCustomerId(customerId);  }}  }
class C{  public ServiceAlreadyExistsException(){}  }
class C{  public void append(float c){  if (count == colors.length) {    float[] t=new float[count * 2];    System.arraycopy(colors,0,t,0,count);    colors=t;  }  colors[count++]=c;}  }
class C{  public boolean hasCaseSensitive(){  return getCaseSensitive() != null;}  }
class C{  private static List<String> methodWithListResult(){  return Arrays.asList("valueA","valueB");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.649 -0500",hash_original_method="3A8225B3804E9179BE65F5C2B01036E9",hash_generated_method="ED19120A679128891E62BAFC6205202D") public void clear(){  al.clear();}  }
class C{  public DoubleConstantOperand(double v,Offset i){  value=v;  offset=i;}  }
class C{  public FastDoubleBuffer append(double[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public static void applyHTMLFormating(final StyledText styledText){  try {    new HTMLStyledTextParser(styledText).parse();  } catch (  final IOException e) {    e.printStackTrace();  }}  }
class C{  public Columns(@IntRange(from=1) int columnCount){  super();  mColumnCount=columnCount;}  }
class C{  public boolean isReleased(){  return (mInternalUseOnItemTouchListener == null);}  }
class C{  protected boolean isUseShortClassName(){  return useShortClassName;}  }
class C{  public void testExpandedWarWithContextXmlFile() throws Exception {  File artifactDir=new File(getTestData().targetDir).getParentFile();  Expand expandTask=(Expand)new AntUtils().createProject().createTask("unwar");  expandTask.setDest(new File(artifactDir,"tomcat-context"));  expandTask.setSrc(new File(getTestData().getTestDataFileFor("tomcatcontext-war")));  expandTask.execute();  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),new File(artifactDir,"tomcat-context").getPath(),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/tomcat-context/");  getLocalContainer().start();  PingUtils.assertPingTrue("tomcat context war not started","Test value is [test value]",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("tomcat context war not stopped",warPingURL,getLogger());}  }
class C{  protected Task(){  this.isComplete=false;  this.nextTask=null;  this.pipeline=null;}  }
class C{  public NurbsCurve addControlPoint(Vec4D cp){  cps.add(cp);  int np=cps.size();  int tmp=degree;  if (np <= degree) {    if (incp == 0) {      incp++;      return null;    }    tmp=incp++;  }  float[] u=new float[np + tmp + 1];  for (int i=0; i <= tmp; i++) {    u[u.length - 1 - i]=1;  }  if (np > degree + 1) {    float val=1.0f / (np - degree);    float step=val;    for (int i=degree + 1; i < u.length - 1 - degree; i++) {      u[i]=val;      val+=step;    }  }  curve=new BasicNurbsCurve(cps.toArray(new Vec4D[cps.size()]),u,tmp);  return curve;}  }
class C{  public boolean onShouldAccelerate(PLIView view,UIAcceleration acceleration,SensorEvent event){  return true;}  }
class C{  public BeanProvider(final Comparator<String> propertyNameComparator){  this(new PropertyDictionary(new ComparingPropertySorter(propertyNameComparator)));}  }
class C{  void checkState(){  if (mError != null) {    return;  }  for (int i=0; i < mTiling.getWidth(); i++) {    for (int j=0; j < mTiling.getHeight(); j++) {      if (mTiling.getAt(i,j) == null) {        throw new IllegalStateException("expected all tiles to be filled");      }    }  }}  }
class C{  public LongPolynomial2(IntegerPolynomial p){  numCoeffs=p.coeffs.length;  coeffs=new long[(numCoeffs + 1) / 2];  int idx=0;  for (int pIdx=0; pIdx < numCoeffs; ) {    int c0=p.coeffs[pIdx++];    while (c0 < 0) {      c0+=2048;    }    long c1=pIdx < numCoeffs ? p.coeffs[pIdx++] : 0;    while (c1 < 0) {      c1+=2048;    }    coeffs[idx]=c0 + (c1 << 24);    idx++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.571 -0500",hash_original_method="E61813EC392C6A7361FD971C8A66C42E",hash_generated_method="0F4771F13DEA30E5D44ACE549A7606E7") protected boolean needInputMethod(){  return false;}  }
class C{  private void action_treeAddAll(){  log.info("");  ListModel model=centerList.getModel();  int size=model.getSize();  int index=-1;  for (index=0; index < size; index++) {    ListItem item=(ListItem)model.getElementAt(index);    action_treeAdd(item);  }}  }
class C{  public LayerHandler(Properties props){  init(null,props);}  }
class C{  public void validateConfiguration() throws ServiceConfigurationException {  if (format == null) {    throw new ServiceConfigurationException(CoreErrorDomain.ERR.missingFormat);  }  if (shortName == null) {    throw new ServiceConfigurationException(CoreErrorDomain.ERR.missingShortName);  }  if (description == null) {    throw new ServiceConfigurationException(CoreErrorDomain.ERR.missingDescription);  }  if (tags == null) {    throw new ServiceConfigurationException(CoreErrorDomain.ERR.missingTags);  }  if (contact == null) {    throw new ServiceConfigurationException(CoreErrorDomain.ERR.missingContact);  }}  }
class C{  static public String replaceParameters(String str,Map<String,String> parameters){  if (str != null && parameters != null) {    StringBuilder replaceBuffer=new StringBuilder(64);    for (    Map.Entry<String,String> entry : parameters.entrySet()) {      replaceBuffer.setLength(0);      replaceBuffer.append("${").append(entry.getKey()).append("}");      str=substituteSubString(str,replaceBuffer.toString(),entry.getValue());    }  }  return str;}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new double[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public void print(char c){  try {    out.write(c);  } catch (  IOException ioe) {    throw new GroovyRuntimeException(ioe);  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    buf=null;    in.close();  }}  }
class C{  public void privateDnsRouteSet(boolean enabled){  mPrivateDnsRouteSet.set(enabled);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  int outerRadius, innerRadius;  int x1, y1, x2, y2;  double a;  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  if (this.drawBorder) {    drawBackground(g2,area);  }  int midX=(int)(area.getWidth() / 2);  int midY=(int)(area.getHeight() / 2);  int radius=midX;  if (midY < midX) {    radius=midY;  }  --radius;  int diameter=2 * radius;  midX+=(int)area.getMinX();  midY+=(int)area.getMinY();  this.circle1.setFrame(midX - radius,midY - radius,diameter,diameter);  this.circle2.setFrame(midX - radius + 15,midY - radius + 15,diameter - 30,diameter - 30);  g2.setPaint(this.rosePaint);  this.a1=new Area(this.circle1);  this.a2=new Area(this.circle2);  this.a1.subtract(this.a2);  g2.fill(this.a1);  g2.setPaint(this.roseCenterPaint);  x1=diameter - 30;  g2.fillOval(midX - radius + 15,midY - radius + 15,x1,x1);  g2.setPaint(this.roseHighlightPaint);  g2.drawOval(midX - radius,midY - radius,diameter,diameter);  x1=diameter - 20;  g2.drawOval(midX - radius + 10,midY - radius + 10,x1,x1);  x1=diameter - 30;  g2.drawOval(midX - radius + 15,midY - radius + 15,x1,x1);  x1=diameter - 80;  g2.drawOval(midX - radius + 40,midY - radius + 40,x1,x1);  outerRadius=radius - 20;  innerRadius=radius - 32;  for (int w=0; w < 360; w+=15) {    a=Math.toRadians(w);    x1=midX - ((int)(Math.sin(a) * innerRadius));    x2=midX - ((int)(Math.sin(a) * outerRadius));    y1=midY - ((int)(Math.cos(a) * innerRadius));    y2=midY - ((int)(Math.cos(a) * outerRadius));    g2.drawLine(x1,y1,x2,y2);  }  g2.setPaint(this.roseHighlightPaint);  innerRadius=radius - 26;  outerRadius=7;  for (int w=45; w < 360; w+=90) {    a=Math.toRadians(w);    x1=midX - ((int)(Math.sin(a) * innerRadius));    y1=midY - ((int)(Math.cos(a) * innerRadius));    g2.fillOval(x1 - outerRadius,y1 - outerRadius,2 * outerRadius,2 * outerRadius);  }  for (int w=0; w < 360; w+=90) {    a=Math.toRadians(w);    x1=midX - ((int)(Math.sin(a) * innerRadius));    y1=midY - ((int)(Math.cos(a) * innerRadius));    Polygon p=new Polygon();    p.addPoint(x1 - outerRadius,y1);    p.addPoint(x1,y1 + outerRadius);    p.addPoint(x1 + outerRadius,y1);    p.addPoint(x1,y1 - outerRadius);    g2.fillPolygon(p);  }  innerRadius=radius - 42;  Font f=getCompassFont(radius);  g2.setFont(f);  g2.drawString(localizationResources.getString("N"),midX - 5,midY - innerRadius + f.getSize());  g2.drawString(localizationResources.getString("S"),midX - 5,midY + innerRadius - 5);  g2.drawString(localizationResources.getString("W"),midX - innerRadius + 5,midY + 5);  g2.drawString(localizationResources.getString("E"),midX + innerRadius - f.getSize(),midY + 5);  y1=radius / 2;  x1=radius / 6;  Rectangle2D needleArea=new Rectangle2D.Double((midX - x1),(midY - y1),(2 * x1),(2 * y1));  int x=this.seriesNeedle.length;  int current;  double value;  int i=(this.datasets.length - 1);  for (; i >= 0; --i) {    ValueDataset data=this.datasets[i];    if (data != null && data.getValue() != null) {      value=(data.getValue().doubleValue()) % this.revolutionDistance;      value=value / this.revolutionDistance * 360;      current=i % x;      this.seriesNeedle[current].draw(g2,needleArea,value);    }  }  if (this.drawBorder) {    drawOutline(g2,area);  }}  }
class C{  public SpatialIndex(String ssxFilename,String shpFilename) throws IOException {  this(shpFilename);}  }
class C{  public static Ticket parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException, RealmException, KrbApErrException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new Ticket(subDer);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  protected void updateChartLayout(){  chartContainer.removeAll();  List<String> selectedMetrics=getSelectedMetrics();  if (selectedMetrics.size() > 0) {    if (selectedMetrics.size() <= 1) {      chartContainer.setLayout(new GridLayout(1,1));    } else     if (selectedMetrics.size() <= 2) {      chartContainer.setLayout(new GridLayout(2,1));    } else     if (selectedMetrics.size() <= 4) {      chartContainer.setLayout(new GridLayout(2,2));    } else     if (selectedMetrics.size() <= 6) {      chartContainer.setLayout(new GridLayout(3,2));    } else {      chartContainer.setLayout(new GridLayout((int)Math.ceil(selectedMetrics.size() / 3.0),3));    }    GridLayout layout=(GridLayout)chartContainer.getLayout();    int spaces=layout.getRows() * layout.getColumns();    for (int i=0; i < Math.max(spaces,selectedMetrics.size()); i++) {      if (i < selectedMetrics.size()) {        chartContainer.add(createChart(selectedMetrics.get(i)));      } else {        chartContainer.add(new EmptyPlot(this));      }    }  }  chartContainer.revalidate();}  }
class C{  public static void add(List<String> options,String option,long value){  options.add("-" + option);  options.add("" + value);}  }
class C{  @Override protected CloudSolrClient createCloudClient(String defaultCollection){  CloudSolrClient client=new CloudSolrClient.Builder().withZkHost(zkServer.getZkAddress()).sendDirectUpdatesToAnyShardReplica().build();  client.setParallelUpdates(random().nextBoolean());  if (defaultCollection != null)   client.setDefaultCollection(defaultCollection);  client.getLbClient().setConnectionTimeout(30000);  client.getLbClient().setSoTimeout(60000);  return client;}  }
class C{  public boolean isNativeMethod(){  return lineNumber == -2;}  }
class C{  protected double downsample(double[] data,int start,int end,int size){  double sum=0;  for (int i=start; i < end; i++) {    sum+=data[i];  }  return sum;}  }
class C{  public static void main(String[] args){  TestRunner.run(GatewayTest.class);}  }
class C{  @NonNull public String name(){  return this.name;}  }
class C{  @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,defaultPort);  hash=LangUtils.hashCode(hash,scheme.toLowerCase());  hash=LangUtils.hashCode(hash,secure);  hash=LangUtils.hashCode(hash,socketFactory);  return hash;}  }
class C{  public SimpleAnimation(TimedElement timedElement,AnimatableElement animatableElement,int calcMode,float[] keyTimes,float[] keySplines,boolean additive,boolean cumulative,AnimatableValue[] values,AnimatableValue from,AnimatableValue to,AnimatableValue by){  super(timedElement,animatableElement,calcMode,keyTimes,keySplines,additive,cumulative);  this.from=from;  this.to=to;  this.by=by;  if (values == null) {    if (from != null) {      values=new AnimatableValue[2];      values[0]=from;      if (to != null) {        values[1]=to;      } else       if (by != null) {        values[1]=from.interpolate(null,null,0f,by,1);      } else {        throw timedElement.createException("values.to.by.missing",new Object[]{null});      }    } else {      if (to != null) {        values=new AnimatableValue[2];        values[0]=animatableElement.getUnderlyingValue();        values[1]=to;        this.cumulative=false;        toAnimation=true;      } else       if (by != null) {        this.additive=true;        values=new AnimatableValue[2];        values[0]=by.getZeroValue();        values[1]=by;      } else {        throw timedElement.createException("values.to.by.missing",new Object[]{null});      }    }  }  this.values=values;  if (this.keyTimes != null && calcMode != CALC_MODE_PACED) {    if (this.keyTimes.length != values.length) {      throw timedElement.createException("attribute.malformed",new Object[]{null,SMILConstants.SMIL_KEY_TIMES_ATTRIBUTE});    }  } else {    if (calcMode == CALC_MODE_LINEAR || calcMode == CALC_MODE_SPLINE || calcMode == CALC_MODE_PACED && !values[0].canPace()) {      int count=values.length == 1 ? 2 : values.length;      this.keyTimes=new float[count];      for (int i=0; i < count; i++) {        this.keyTimes[i]=(float)i / (count - 1);      }    } else     if (calcMode == CALC_MODE_DISCRETE) {      int count=values.length;      this.keyTimes=new float[count];      for (int i=0; i < count; i++) {        this.keyTimes[i]=(float)i / count;      }    } else {      int count=values.length;      float[] cumulativeDistances=new float[count];      cumulativeDistances[0]=0;      for (int i=1; i < count; i++) {        cumulativeDistances[i]=cumulativeDistances[i - 1] + values[i - 1].distanceTo(values[i]);      }      float totalLength=cumulativeDistances[count - 1];      this.keyTimes=new float[count];      this.keyTimes[0]=0;      for (int i=1; i < count - 1; i++) {        this.keyTimes[i]=cumulativeDistances[i] / totalLength;      }      this.keyTimes[count - 1]=1;    }  }  if (calcMode == CALC_MODE_SPLINE && keySplines.length != (this.keyTimes.length - 1) * 4) {    throw timedElement.createException("attribute.malformed",new Object[]{null,SMILConstants.SMIL_KEY_SPLINES_ATTRIBUTE});  }}  }
class C{  public XYCombinedChartDef(String type,int... seriesIndex){  this.type=type;  this.seriesIndex=seriesIndex;}  }
class C{  public void increment(){  value++;}  }
class C{  private void finish(Env<AttrContext> env){  JavaFileObject prev=log.useSource(env.toplevel.sourcefile);  try {    JCClassDecl tree=(JCClassDecl)env.tree;    finishClass(tree,env);  }  finally {    log.useSource(prev);  }}  }
class C{  private boolean switchesHaveAnotherMaster(){  IOFSwitchService switchService=controller.getSwitchService();  for (  Entry<DatapathId,IOFSwitch> switchMap : switchService.getAllSwitchMap().entrySet()) {    IOFSwitchBackend sw=(IOFSwitchBackend)switchMap.getValue();    if (sw.hasAnotherMaster()) {      return true;    }  }  return false;}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void buildSlopeMap(){  if (dataBuffer == null)   return;  int resIdx=minuteSpacing / 5;  if (resIdx < 0)   resIdx=0; else   if (resIdx > 3)   resIdx=3;  double deltaX=etopoSpacings[resIdx];  slopeMap=new byte[bufferWidth * bufferHeight];  for (int y=0; y < bufferHeight; y++) {    double lat=90. - 180. * (double)y / (double)bufferHeight;    double coslat=Math.cos(Math.toRadians(lat));    double slopeScaler=(double)slopeAdjust * coslat / deltaX;    int idx0=y * bufferWidth;    for (int x=0; x < bufferWidth; x++) {      int idx1=idx0 + x;      int idx2=idx1 + bufferWidth;      if (y == bufferHeight - 1)       idx2=idx1;      double d1=(double)dataBuffer[idx1];      double d2=(double)dataBuffer[idx2];      double slope=slopeScaler * (d2 - d1);      if (slope > 0.99)       slope=0.99; else       if (slope < -0.99)       slope=-0.99;      int islope=(int)(slope * 127.);      slopeMap[idx1]=(byte)islope;    }  }}  }
class C{  private void postPlugin(final boolean isPing) throws IOException {  final String pluginName=plugin.getName();  final boolean onlineMode=game.getServer().getOnlineMode();  final String pluginVersion=plugin.getVersion().get();  final String serverVersion=String.format("%s %s","Sponge",game.getPlatform().getMinecraftVersion());  final int playersOnline=game.getServer().getOnlinePlayers().size();  final StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  final String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  final String osversion=System.getProperty("os.version");  final String java_version=System.getProperty("java.version");  final int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  final URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  final byte[] uncompressed=json.toString().getBytes();  final byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  if (debug) {    Fawe.debug("[Metrics] Prepared request for " + pluginName + " uncompressed="+ uncompressed.length+ " compressed="+ compressed.length);  }  final OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if ((response == null) || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  private static void startListening(final Ignite ignite,IgniteMessaging imsg) throws IgniteException {  imsg.remoteListen(TOPIC.ORDERED,null);  imsg.remoteListen(TOPIC.UNORDERED,null);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new JSONException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  boolean isLastPosition(int position){  return position == (itemList.size() - 1);}  }
class C{  public void onServerConnectionState(int status,int serverIf,boolean connected,String address){  if (DBG)   Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);  try {    mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FAVITER_APPS' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  public TemporaryFolder(){  this((File)null);}  }
class C{  public void push(){  level.add(null);  cloned=false;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public final boolean canSet(String field,Class type){  return m_table.canSet(field,type);}  }
class C{  public Node parse(Reader in) throws IOException, SAXException {  InputSource is=new InputSource(in);  getXMLReader().parse(is);  return parent;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Instances curveDataMicroAveraged(int Y[][],double P[][]){  int y[]=MatrixUtils.flatten(Y);  double p[]=MatrixUtils.flatten(P);  double[][] aligned=align(y,p);  y=toIntArray(aligned[0]);  p=aligned[1];  ThresholdCurve curve=new ThresholdCurve();  return curve.getCurve(MLUtils.toWekaPredictions(y,p));}  }
class C{  public static CustomChannels run(AdExchangeSeller adExchangeSeller,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all custom channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  CustomChannels customChannels=null;  do {    customChannels=adExchangeSeller.customchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (customChannels.getItems() != null && !customChannels.getItems().isEmpty()) {      for (      CustomChannel channel : customChannels.getItems()) {        System.out.printf("Custom channel with code \"%s\" and name \"%s\" was found.\n",channel.getCode(),channel.getName());      }    } else {      System.out.println("No custom channels found.");    }    pageToken=customChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();  return customChannels;}  }
class C{  @Nullable private static PsiMethod findMethod(final PsiElement element){  final PsiMethod method=element instanceof PsiMethod ? (PsiMethod)element : PsiTreeUtil.getParentOfType(element,PsiMethod.class);  if (method != null && method.getContainingClass() instanceof PsiAnonymousClass) {    return findMethod(method.getParent());  }  return method;}  }
class C{  public PNGWriter(){  super();}  }
class C{  public boolean isValidBSTD(TreeNode root){  if (root == null) {    return true;  }  TreeNode temp=null;  if (root.left != null) {    temp=root.left;    while (temp.right != null) {      temp=temp.right;    }    if (temp.val >= root.val) {      return false;    }  }  if (root.right != null) {    temp=root.right;    while (temp.left != null) {      temp=temp.left;    }    if (temp.val <= root.val) {      return false;    }  }  return isValidBST(root.left) && isValidBST(root.right);}  }
class C{  public final synchronized void makeHumanMove(Move m){  if (!humansTurn())   return;  Position oldPos=new Position(game.currPos());  if (game.pendingDrawOffer) {    ArrayList<Move> moves=new MoveGen().legalMoves(oldPos);    for (    Move m2 : moves) {      if (m2.equals(m)) {        if (findValidDrawClaim(TextIO.moveToUCIString(m))) {          stopPonder();          updateGUI();          gui.setSelection(-1);          return;        }        break;      }    }  }  if (doMove(m)) {    if (m.equals(ponderMove) && !gameMode.analysisMode() && (computerPlayer.getSearchType() == SearchType.PONDER)) {      computerPlayer.ponderHit(searchId);      ponderMove=null;    } else {      abortSearch();      updateComputeThreads();    }    setAnimMove(oldPos,m,true);    updateGUI();  } else {    gui.setSelection(-1);  }}  }
class C{  public String diff_text2(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.DELETE) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  private void out(String message){  messageLog.append(message + "\n");}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  if (testRunning) {    if (outTest) {      stopOutputTest();    } else     if (wrapTest) {      stopWraparoundTest();    }  }  super.windowClosing(e);}  }
class C{  public synchronized void registerMapping(final QName qname,final String javaClassName){  if (javaToQName == null) {    javaToQName=Collections.synchronizedMap(new HashMap<String,QName>());  }  if (qnameToJava == null) {    qnameToJava=Collections.synchronizedMap(new HashMap<QName,String>());  }  javaToQName.put(javaClassName,qname);  qnameToJava.put(qname,javaClassName);}  }
class C{  public LagartoDOMBuilder enableDebug(){  config.collectErrors=true;  config.setCalculatePosition(true);  return this;}  }
class C{  public Namespaces intern(ObjectValue ns){  list.set(0,ns);  Namespaces n=this.get(list);  if (n == null) {    n=new Namespaces(ns);    put(n,n);  }  return n;}  }
class C{  public static String replaceWithVisibleWhiteSpaceChars(String string){  return string.replaceAll("\r",CARRIAGE_RETURN_SYMBOL).replaceAll("\n",LINE_FEED_SYMBOL).replaceAll("\\t",TAB_SYMBOL).replaceAll(" ",SPACE_SYMBOL);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-AgentService active...");  }}  }
class C{  public double distanceToClosestEnemy(Entity me,Coords position,IGame game){  final String METHOD_NAME="distanceToClosestEnemy(Entity, Coords, IGame)";  getOwner().methodBegin(BasicPathRanker.class,METHOD_NAME);  try {    Entity closest=findClosestEnemy(me,position,game);    if (closest == null) {      return 0;    }    return closest.getPosition().distance(position);  }  finally {    getOwner().methodEnd(BasicPathRanker.class,METHOD_NAME);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final RenderBuffer putShort(short x){  unsafe.putShort(curAddress,x);  curAddress+=SIZEOF_SHORT;  return this;}  }
class C{  private void removeAccessibilityInteractionConnectionLocked(int windowId,int userId){  if (userId == UserHandle.USER_ALL) {    mGlobalWindowTokens.remove(windowId);    mGlobalInteractionConnections.remove(windowId);  } else {    UserState userState=getCurrentUserStateLocked();    userState.mWindowTokens.remove(windowId);    userState.mInteractionConnections.remove(windowId);  }  if (DEBUG) {    Slog.i(LOG_TAG,"Removing interaction connection to windowId: " + windowId);  }}  }
class C{  private void doDelete(DBIDRef id){  ids.remove(id);  for (  Relation<?> relation : relations) {    if (relation == idrep) {      continue;    }    if (!(relation instanceof ModifiableRelation)) {      throw new AbortException("Non-modifiable relations have been added to the database.");    }    ((ModifiableRelation<?>)relation).delete(id);  }  DBIDFactory.FACTORY.deallocateSingleDBID(id);}  }
class C{  private static void insertNativeEdge(final List<ReilBlock> nodes,final List<ReilEdge> edges,final ICodeEdge<?> nativeEdge,final ReilInstruction sourceReilInstruction,final ReilInstruction targetReilInstruction){  for (  final ReilBlock node : nodes) {    if ((sourceReilInstruction == getLastInstruction(node)) && !hasEdge(nodes,node,targetReilInstruction)) {      final EdgeType edgeType=ReilHelpers.isJump(sourceReilInstruction) ? nativeEdge.getType() : EdgeType.JUMP_UNCONDITIONAL;      final ReilBlock targetNode=getNode(targetReilInstruction,nodes);      final ReilEdge newEdge=new ReilEdge(node,targetNode,edgeType);      ReilBlock.link(node,targetNode,newEdge);      edges.add(newEdge);    }  }}  }
class C{  protected void writeRequestProperties(HttpURLConnection conn) throws IOException {  if (null != conn) {    conn.setRequestMethod(this.getRequestMethod());    for (    Map.Entry<String,Object> requestProperty : this.requestProperties.getEntries()) {      conn.setRequestProperty(requestProperty.getKey(),(String)requestProperty.getValue());    }  }}  }
class C{  @SideEffectFree public void finest(@Nullable String msg){  throw new RuntimeException();}  }
class C{  protected void uninstallDefaults(JSeparator s){}  }
class C{  public void testSecretKeyFactory08() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SecretKeyFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException was not thrown as expected (provider is null, algorithm: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public boolean canIncreaseTimer(){  return timer < duration;}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.FLOAT_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static List<Attachment> findByContainer(Resource container){  List<Attachment> cachedData=AttachmentCache.get(container);  if (cachedData != null) {    return cachedData;  }  List<Attachment> list=findByContainer(container.getType(),container.getId());  AttachmentCache.set(container,list);  return list;}  }
class C{  private void defineTabbedPanes(UIDefaults d){  d.put("TabbedPane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("TabbedPane.tabAreaStatesMatchSelectedTab",Boolean.TRUE);  d.put("TabbedPane.nudgeSelectedLabel",Boolean.FALSE);  d.put("TabbedPane.tabRunOverlay",new Integer(2));  d.put("TabbedPane.tabOverlap",new Integer(-1));  d.put("TabbedPane.extendTabsToBase",Boolean.TRUE);  d.put("TabbedPane.useBasicArrows",Boolean.TRUE);  addColor(d,"TabbedPane.shadow","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"TabbedPane.darkShadow","text",0.0f,0.0f,0.0f,0);  addColor(d,"TabbedPane.highlight","seaGlassLightBackground",0.0f,0.0f,0.0f,0);  d.put("TabbedPane:TabbedPaneTab.contentMargins",new InsetsUIResource(2,8,3,8));  addColor(d,"TabbedPane:TabbedPaneTab[Disabled].textForeground","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"TabbedPane:TabbedPaneTab[Pressed+Selected].textForeground",255,255,255,255);  addColor(d,"TabbedPane:TabbedPaneTab[Focused+Pressed+Selected].textForeground",255,255,255,255);  d.put("TabbedPane:TabbedPaneTabArea.contentMargins",new InsetsUIResource(3,10,4,10));  d.put("TabbedPane:TabbedPaneContent.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("tabbedPaneTabAreaBackLineEnabled",new Color(0x647595));  d.put("tabbedPaneTabAreaLightShadow",new Color(0x55eeeeee,true));  d.put("tabbedPaneTabAreaDarkShadow",new Color(0x55aaaaaa,true));  d.put("seaGlassTabbedPaneTabCloseGraphicInnerShadowBase",new Color(0x2a509b));  d.put("seaGlassTabbedPaneTabCloseGraphicBase",Color.WHITE);  d.put("seaGlassTabbedPaneTabCloseGraphicDropShadowBase",Color.BLACK);  d.put("seaGlassTabbedPaneTabCloseBorderBase",new Color(0x20448e));  String p="TabbedPane";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".tabRunOverlay",new Integer(0));  d.put(p + ".useBasicArrows",Boolean.FALSE);  d.put(p + ".closeButtonMargins",new Rectangle(2,2,2,2));  d.put(p + ".closeButtonSize",new Integer(11));  String c=PAINTER_PREFIX + "TabbedPaneTabPainter";  p="TabbedPane:TabbedPaneTab";  d.put(p + ".States","Enabled,Pressed,Disabled,MouseOver,Focused,Selected,Default");  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+Pressed].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Disabled+Selected].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_DISABLED_SELECTED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Selected+MouseOver].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Pressed+Selected].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_PRESSED_SELECTED));  d.put(p + "[Focused+Selected].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_SELECTED_FOCUSED));  d.put(p + "[Focused+Pressed+Selected].backgroundPainter",new LazyPainter(c,TabbedPaneTabPainter.Which.BACKGROUND_PRESSED_SELECTED_FOCUSED));  d.put(p + "[Disabled].textForeground",d.get("seaGlassDisabledText"));  d.put(p + "[Pressed+Selected].textForeground",Color.BLACK);  d.put(p + "[Focused+Pressed+Selected].textForeground",Color.BLACK);  p="TabbedPane:TabbedPaneTab:TabbedPaneTabClaseButton";  c=PAINTER_PREFIX + "TabbedPaneTabCloseButtonPainter";  d.put(p + ".States","Enabled,Pressed,Disabled,MouseOver,Focused");  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,TabbedPaneTabCloseButtonPainter.Which.DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,TabbedPaneTabCloseButtonPainter.Which.ENABLED));  d.put(p + "[MouseOver].foregroundPainter",new LazyPainter(c,TabbedPaneTabCloseButtonPainter.Which.MOUSEOVER));  d.put(p + "[Focused].foregroundPainter",new LazyPainter(c,TabbedPaneTabCloseButtonPainter.Which.FOCUSED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,TabbedPaneTabCloseButtonPainter.Which.PRESSED));  p="TabbedPane:TabbedPaneTabArea";  c=PAINTER_PREFIX + "TabbedPaneTabAreaPainter";  d.put(p + ".contentMargins",new InsetsUIResource(3,10,3,10));  d.put(p + ".States","Enabled,Disabled,Top,Left,Bottom,Right");  d.put(p + ".Top",new TabbedPaneTopTabState());  d.put(p + ".Left",new TabbedPaneLeftTabState());  d.put(p + ".Bottom",new TabbedPaneBottomTabState());  d.put(p + ".Right",new TabbedPaneRightTabState());  d.put(p + "[Enabled+Top].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_ENABLED_TOP));  d.put(p + "[Disabled+Top].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_DISABLED_TOP));  d.put(p + "[Enabled+Left].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_ENABLED_LEFT));  d.put(p + "[Disabled+Left].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_DISABLED_LEFT));  d.put(p + "[Enabled+Bottom].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_ENABLED_BOTTOM));  d.put(p + "[Disabled+Bottom].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_DISABLED_BOTTOM));  d.put(p + "[Enabled+Right].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_ENABLED_RIGHT));  d.put(p + "[Disabled+Right].backgroundPainter",new LazyPainter(c,TabbedPaneTabAreaPainter.Which.BACKGROUND_DISABLED_RIGHT));  c=PAINTER_PREFIX + "ArrowButtonPainter";  p="TabbedPane:TabbedPaneTabArea:\"TabbedPaneTabArea.button\"";  d.put(p + ".States","Enabled,Pressed,MouseOver,Disabled");  d.put(p + "[Disabled].foreground",new ColorUIResource(0x9ba8cf));  d.put(p + "[Enabled].foreground",new ColorUIResource(Color.BLACK));  d.put(p + "[Pressed].foreground",new ColorUIResource(0x134D8C));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[MouseOver].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,ArrowButtonPainter.Which.FOREGROUND_PRESSED));  p="TabbedPane:TabbedPaneContent";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));}  }
class C{  public void run(){  myThread=Thread.currentThread();  try {    LogConnection conn=log.connect(true);    conn.seek(startSeqno);    for (long seqno=startSeqno; seqno < startSeqno + howMany; seqno++) {      THLEvent e=conn.next();      if (e == null)       throw new Exception("Event is null: seqno=" + seqno);      if (seqno != e.getSeqno()) {        throw new Exception("Sequence numbers do not match: expected=" + seqno + " actual="+ e.getSeqno());      }      eventsRead++;      lastSeqno.setSeqno(e.getSeqno());      if (eventsRead > 0 && eventsRead % 1000 == 0) {        logger.info("Reading events: threadId=" + Thread.currentThread().getId() + " events="+ eventsRead);      }    }  } catch (  InterruptedException e) {  }catch (  Throwable t) {    error=t;  }}  }
class C{  public static void hideMessageBox(){  MESSAGE_BOX.setVisible(false);}  }
class C{  public FgsOld(DataSet dataSet){  if (verbose) {    out.println("GES constructor");  }  if (dataSet.isDiscrete()) {    setScore(new BDeuScore(dataSet));  } else {    SemBicScore fgsScore=new SemBicScore(new CovarianceMatrixOnTheFly(dataSet));    setScore(fgsScore);  }  this.graph=new EdgeListGraphSingleConnections(getVariables());  if (verbose) {    out.println("GES constructor done");  }}  }
class C{  public String checkComplete(){  if (isComplete())   setIsComplete(false);  MRfQ rfq=getRfQ();  String error=rfq.checkQuoteTotalAmtOnly();  if (error != null && error.length() > 0)   return error;  if (rfq.isQuoteTotalAmt() || rfq.isQuoteTotalAmtOnly()) {    BigDecimal amt=getPrice();    if (amt == null || Env.ZERO.compareTo(amt) >= 0)     return "No Total Amount";  }  if (rfq.isQuoteAllLines()) {    MRfQResponseLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MRfQResponseLine line=lines[i];      if (!line.isActive())       return "Line " + line.getRfQLine().getLine() + ": Not Active";      boolean validAmt=false;      MRfQResponseLineQty[] qtys=line.getQtys(false);      for (int j=0; j < qtys.length; j++) {        MRfQResponseLineQty qty=qtys[j];        if (!qty.isActive())         continue;        BigDecimal amt=qty.getNetAmt();        if (amt != null && Env.ZERO.compareTo(amt) < 0) {          validAmt=true;          break;        }      }      if (!validAmt)       return "Line " + line.getRfQLine().getLine() + ": No Amount";    }  }  if (rfq.isQuoteAllQty()) {    MRfQResponseLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MRfQResponseLine line=lines[i];      MRfQResponseLineQty[] qtys=line.getQtys(false);      for (int j=0; j < qtys.length; j++) {        MRfQResponseLineQty qty=qtys[j];        if (!qty.isActive())         return "Line " + line.getRfQLine().getLine() + " Qty="+ qty.getRfQLineQty().getQty()+ ": Not Active";        BigDecimal amt=qty.getNetAmt();        if (amt == null || Env.ZERO.compareTo(amt) >= 0)         return "Line " + line.getRfQLine().getLine() + " Qty="+ qty.getRfQLineQty().getQty()+ ": No Amount";      }    }  }  setIsComplete(true);  return null;}  }
class C{  void componentInputMapChanged(ComponentInputMap inputMap){  InputMap km=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);  while (km != inputMap && km != null) {    km=km.getParent();  }  if (km != null) {    registerWithKeyboardManager(false);  }}  }
class C{  public final void init(KeyManager[] km,TrustManager[] tm,SecureRandom random) throws KeyManagementException {  contextSpi.engineInit(km,tm,random);}  }
class C{  public static BufferedImage cloneImage(BufferedImage image){  BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB);  Graphics2D g=newImage.createGraphics();  g.drawRenderedImage(image,null);  g.dispose();  return newImage;}  }
class C{  public boolean contains(String string){  String[] item=tokenize(string);  if (!item[0].equals(m_Root.value)) {    return false;  }  return isContained(m_Root,item,1);}  }
class C{  public Eval<UploadResult> putAsync(String key,Object value){  return Eval.later(null).map(null).map(FluentFunctions.ofChecked(null));}  }
class C{  public SearchRequest scroll(String keepAlive){  return scroll(new Scroll(TimeValue.parseTimeValue(keepAlive,null,getClass().getSimpleName() + ".Scroll.keepAlive")));}  }
class C{  public CCTest(String name){  super(name);}  }
class C{  public synchronized Connection waitForConnect(MembershipManager mgr,long startTime,long ackTimeout,long ackSATimeout) throws IOException {  if (connectingThread == Thread.currentThread()) {    throw new ReenteredConnectException("This thread is already trying to connect");  }  final Map m=this.preserveOrder ? orderedConnectionMap : unorderedConnectionMap;  boolean severeAlertIssued=false;  boolean suspected=false;  DistributedMember targetMember=null;  if (ackSATimeout > 0) {    targetMember=this.id;  }  for (; ; ) {    if (!this.pending)     break;    getConduit().getCancelCriterion().checkCancelInProgress(null);    boolean interrupted=Thread.interrupted();    try {      this.wait(100);    } catch (    InterruptedException ignore) {      interrupted=true;      getConduit().getCancelCriterion().checkCancelInProgress(ignore);    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }    if (!this.pending)     break;    long now=System.currentTimeMillis();    if (!severeAlertIssued && ackSATimeout > 0 && startTime + ackTimeout < now) {      if (startTime + ackTimeout + ackSATimeout < now) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.ConnectionTable_UNABLE_TO_FORM_A_TCPIP_CONNECTION_TO_0_IN_OVER_1_SECONDS,new Object[]{targetMember,(ackSATimeout + ackTimeout) / 1000}));        severeAlertIssued=true;      } else       if (!suspected) {        logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectionTable_UNABLE_TO_FORM_A_TCPIP_CONNECTION_TO_0_IN_OVER_1_SECONDS,new Object[]{this.id,(ackTimeout) / 1000}));        ((GMSMembershipManager)mgr).suspectMember(targetMember,"Unable to form a TCP/IP connection in a reasonable amount of time");        suspected=true;      }    }    Object e;    e=m.get(this.id);    if (e == this) {      if (logger.isDebugEnabled()) {        logger.debug("Waiting for pending connection to complete: {} connection to {}; {}",((this.preserveOrder) ? "ordered" : "unordered"),this.id,this);      }      continue;    }    if (logger.isDebugEnabled()) {      logger.debug("Pending connection changed to {} unexpectedly",e);    }    if (e == null) {      notifyWaiters(null);      break;    } else     if (e instanceof Connection) {      notifyWaiters((Connection)e);      break;    } else {      return ((PendingConnection)e).waitForConnect(mgr,startTime,ackTimeout,ackSATimeout);    }  }  return this.conn;}  }
class C{  private byte[] invertEndianness(final byte[] bytes){  if (bytes == null)   return null;  final int length=bytes.length;  final byte[] result=new byte[length];  for (int i=0; i < length; i++)   result[i]=bytes[length - i - 1];  return result;}  }
class C{  public static void compress(){  char run=0;  boolean old=false;  while (!BinaryStdIn.isEmpty()) {    boolean b=BinaryStdIn.readBoolean();    if (b != old) {      BinaryStdOut.write(run,LG_R);      run=1;      old=!old;    } else {      if (run == R - 1) {        BinaryStdOut.write(run,LG_R);        run=0;        BinaryStdOut.write(run,LG_R);      }      run++;    }  }  BinaryStdOut.write(run,LG_R);  BinaryStdOut.close();}  }
class C{  public void addEditorWindow(EditorWindowIndirectRef windowRef,int layer){  final EditorWindow window=(EditorWindow)windowRef;  Dimension desktopSize=desktopPane.getSize();  Dimension preferredSize=window.getPreferredSize();  Component source=window.getCenteringComp();  Point convertedPoint=SwingUtilities.convertPoint(source.getParent(),source.getLocation(),this);  int x=convertedPoint.x + source.getWidth() / 2 - preferredSize.width / 2;  int y=convertedPoint.y - 25 + source.getHeight() / 2 - preferredSize.height / 2;  int topMargin=35;  int bottomMargin=35;  int leftMargin=150;  int rightMargin=25;  if (x < leftMargin)   x=leftMargin;  if (y < topMargin)   y=topMargin;  int height=Math.min(preferredSize.height,getHeight() - topMargin - bottomMargin);  int width=Math.min(preferredSize.width,getWidth() - leftMargin - rightMargin);  if (x + width > getWidth() - rightMargin) {    x=getWidth() - width - rightMargin;  }  if (y + height > getHeight() - bottomMargin) {    y=getHeight() - height - bottomMargin;  }  window.setLocation(x,y);  window.setPreferredSize(new Dimension(width,height));  getDesktopPane().add(window);  window.setLayer(layer);  window.moveToFront();  window.setVisible(true);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  protected void initializeParsers(){  this.parsers.put(STRING,new StringXMLEventParser());  this.parsers.put(DOUBLE,new DoubleXMLEventParser());  this.parsers.put(INTEGER,new IntegerXMLEventParser());  this.parsers.put(BOOLEAN,new BooleanXMLEventParser());  this.parsers.put(BOOLEAN_INTEGER,new BooleanIntegerXMLEventParser());  this.parsers.put(UNRECOGNIZED,new UnrecognizedXMLEventParser(null));}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.294 -0500",hash_original_method="5A67E197C5983AA9D4F6364A1A3A1EA0",hash_generated_method="D9CD50EE9CC4C5741F1B86BD0C60AA6A") public boolean isChecked(){  return getBooleanProperty(PROPERTY_CHECKED);}  }
class C{  private boolean isValidPage(Page page) throws WikiTitleParsingException {  return !page.isDisambiguation() && !page.isRedirect() && (inludeDiscussions || (!inludeDiscussions && !page.isDiscussion()));}  }
class C{  public static String trimWord(final String word){  String tempword=word.toLowerCase();  while (tempword.length() > 0) {    final char c=tempword.charAt(0);    if (c == '\'') {      tempword=tempword.substring(1);    } else {      break;    }  }  while (tempword.length() > 0) {    final char c=tempword.charAt(tempword.length() - 1);    if (c == '\'') {      tempword=tempword.substring(0,tempword.length() - 1);    } else {      break;    }  }  return tempword;}  }
class C{  public static void main(String[] args) throws NumberFormatException {  if (args.length != 3) {    System.out.println("Usage: java Calculator operand1 operator operand2");    System.exit(0);  }  int result=0;  try {switch (args[1].charAt(0)) {case '+':      result=Integer.parseInt(args[0]) + Integer.parseInt(args[2]);    break;case '-':  result=Integer.parseInt(args[0]) - Integer.parseInt(args[2]);break;case '.':result=Integer.parseInt(args[0]) * Integer.parseInt(args[2]);break;case '/':result=Integer.parseInt(args[0]) / Integer.parseInt(args[2]);break;}System.out.println(args[0] + ' ' + args[1]+ ' '+ args[2]+ " = "+ result);} catch (NumberFormatException ex) {System.out.println("Wrong Input: " + ex.getMessage().substring(ex.getMessage().indexOf("\"") + 1,ex.getMessage().lastIndexOf("\"")));}}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public CombinedOsmReader(String outputCRS,Map<String,String> osmLandUseToMatsimTypeMap,Map<String,String> osmBuildingToMatsimTypeMap,Map<String,String> osmAmenityToMatsimTypeMap,Map<String,String> osmLeisureToMatsimTypeMap,Map<String,String> osmTourismToMatsimTypeMap,List<String> unmannedEntitiesList,double buildingTypeFromVicinityRange){  log.info("Creating CombinedOsmReader");  this.outputCRS=outputCRS;  this.osmLandUseToMatsimTypeMap=osmLandUseToMatsimTypeMap;  this.osmBuildingToMatsimTypeMap=osmBuildingToMatsimTypeMap;  this.osmAmenityToMatsimTypeMap=osmAmenityToMatsimTypeMap;  this.osmLeisureToMatsimTypeMap=osmLeisureToMatsimTypeMap;  this.osmTourismToMatsimTypeMap=osmTourismToMatsimTypeMap;  this.unmannedEntitiesList=unmannedEntitiesList;  this.facilities=FacilitiesUtils.createActivityFacilities("OpenStreetMap landuse ???");  this.buildingTypeFromVicinityRange=buildingTypeFromVicinityRange;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return Boolean.valueOf(a != null && a.firstRunsAndReruns());}  }
class C{  private RemoteContainer createContainer(){  Mock mockContainer=mock(RemoteContainer.class);  mockContainer.stubs().method("getLogger").will(returnValue(new NullLogger()));  return (RemoteContainer)mockContainer.proxy();}  }
class C{  private void resetMediaPlayer(){  mediaPlayer.reset();  mState=State.IDLE;}  }
class C{  public static String unicode2xml(final String text,final boolean amp){  return unicode2html(text,amp,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.242 -0500",hash_original_method="FC9B2FFC2AD9C6287BD39CB5A78927E8",hash_generated_method="D7F9551F49AEBA4E3ABDA359F2D05069") public int post() throws IOException {  return sendCommand(NNTPCommand.POST);}  }
class C{  @Deprecated public static int[] normalizeRows(final CTableSorter sorter,final int[] sortedRows){  final int[] rawRows=new int[sortedRows.length];  for (int i=0; i < sortedRows.length; i++) {    rawRows[i]=sorter.modelIndex(sortedRows[i]);  }  return rawRows;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.187 -0500",hash_original_method="F3D0948AB2AB5DCB4D46B0F9C4754A1D",hash_generated_method="2DA6945439286EF6E87FA0E912C22609") public DateHeader createDateHeader(Calendar date){  SIPDateHeader d=new SIPDateHeader();  if (date == null)   throw new NullPointerException("null date");  d.setDate(date);  return d;}  }
class C{  public static String convertStreamToString(InputStream is) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int i=is.read();  while (i != -1) {    baos.write(i);    i=is.read();  }  return baos.toString();}  }
class C{  public boolean validSystemNameFormat(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).validSystemNameFormat(systemName);  }  return false;}  }
class C{  public XMLSignatureInput(Node rootNode){  this.subNode=rootNode;}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  public Timestamp withLocalOffset(Integer offset){  Precision precision=getPrecision();  if (precision.alwaysUnknownOffset() || safeEquals(offset,getLocalOffset())) {    return this;  }  Timestamp ts=createFromUtcFields(precision,getZYear(),getZMonth(),getZDay(),getZHour(),getZMinute(),getZSecond(),getZFractionalSecond(),offset);  return ts;}  }
class C{  private String createElementReplicaSteps(final Workflow workflow,String waitFor,final List<FileDescriptor> fileDescriptors){  log.info("START create element replica steps");  List<FileDescriptor> sourceDescriptors=FileDescriptor.filterByType(fileDescriptors,FileDescriptor.Type.FILE_MIRROR_SOURCE,FileDescriptor.Type.FILE_EXISTING_MIRROR_SOURCE);  Map<URI,FileShare> uriFileShareMap=queryFileShares(fileDescriptors);  String newWaitFor=createFileMirrorSession(workflow,waitFor,sourceDescriptors,uriFileShareMap);  return newWaitFor;}  }
class C{  public SelectionBuilder reset(){  mTable=null;  mGroupBy=null;  mHaving=null;  mSelection.setLength(0);  mSelectionArgs.clear();  return this;}  }
class C{  public final double doOperation() throws OperatorFailedException {  final int dim=bitsParameter.getDimension();  List<Integer> ones=new ArrayList<Integer>();  List<Integer> zeros=new ArrayList<Integer>();  for (int i=0; i < dim; i++) {    if (bitsParameter.getParameterValue(i) == 1.0) {      ones.add(i);    } else {      zeros.add(i);    }  }  if (ones.size() >= numBitsToMove && zeros.size() >= numBitsToMove) {    for (int i=0; i < numBitsToMove; i++) {      int myOne=ones.remove(MathUtils.nextInt(ones.size()));      int myZero=zeros.remove(MathUtils.nextInt(zeros.size()));      bitsParameter.setParameterValue(myOne,0.0);      bitsParameter.setParameterValue(myZero,1.0);      if (valuesParameter != null) {        double value1=valuesParameter.getParameterValue(myOne);        double value2=valuesParameter.getParameterValue(myZero);        valuesParameter.setParameterValue(myOne,value2);        valuesParameter.setParameterValue(myZero,value1);      }    }  } else   throw new OperatorFailedException("Not enough bits to move!");  return 0.0;}  }
class C{  public boolean hasExperimentType(){  return hasExtension(GwoExperimentType.class);}  }
class C{  public TabUma(Tab tab,TabCreationState creationState,TabModel model){  mTab=tab;  mTabCreationState=creationState;  mTabModel=model;  mLastTabStateChangeMillis=System.currentTimeMillis();  if (mTabCreationState == TabCreationState.LIVE_IN_FOREGROUND || mTabCreationState == TabCreationState.FROZEN_ON_RESTORE) {    updateTabState(TAB_STATE_ACTIVE);  } else   if (mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND || mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {    updateTabState(TAB_STATE_INACTIVE);  }}  }
class C{  protected void toggleOpenClose(){  setPopupVisible(comboBox,!isPopupVisible(comboBox));}  }
class C{  public PatternSyntaxException(String description,String pattern,int index){  this.desc=description;  this.pattern=pattern;  this.index=index;}  }
class C{  private void createLinesInTable(final int itemCount,int[] items,final boolean addSpaceXMLTag,final int mode) throws PdfException {  if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT) {    items=reverse(items);  }  final float[] f_x1;  final float[] f_x2;  final float[] f_y1;  final float[] f_y2;switch (mode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:    f_x1=this.f_x1;  f_x2=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.HORIZONTAL_RIGHT_TO_LEFT:f_x2=this.f_x1;f_x1=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.VERTICAL_BOTTOM_TO_TOP:f_x1=this.f_y1;f_x2=this.f_y2;f_y1=this.f_x2;f_y2=this.f_x1;break;case PdfData.VERTICAL_TOP_TO_BOTTOM:f_x1=this.f_y2;f_x2=this.f_y1;f_y2=this.f_x1;f_y1=this.f_x2;items=this.getsortedUnusedFragments(false,true);items=reverse(items);break;default :throw new PdfException("Illegal value " + mode + "for currentWritingMode");}Vector_Int current_line;for (int j=0; j < itemCount; j++) {final int c=items[j];int id=-1;int i;int last=c;float smallest_gap=-1, gap, yMidPt;if (!isUsed[c] && this.writingMode[c] == mode) {current_line=new Vector_Int(20);current_line.addElement(c);lineY2.addElement((int)f_y2[c]);while (true) {for (int ii=0; ii < itemCount; ii++) {i=items[ii];if (!isUsed[i] && i != c && writingMode[c] == mode && ((f_x1[i] > f_x1[c] && mode != PdfData.VERTICAL_TOP_TO_BOTTOM) || (f_x1[i] < f_x1[c] && mode == PdfData.VERTICAL_TOP_TO_BOTTOM))) {gap=(f_x1[i] - f_x2[c]);if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {gap=-gap;}if (gap < 0 && gap > -2) {gap=0;}yMidPt=(f_y1[i] + f_y2[i]) / 2;if (yMidPt < f_y1[c] && yMidPt > f_y2[c] && (smallest_gap < 0 || gap < smallest_gap)) {smallest_gap=gap;id=i;}}}if (id == -1) {break;}float t=f_x1[id] - f_x2[last], possSpace=f_x1[id] - f_x2[c];float av_char1=(float)1.5 * ((f_x2[id] - f_x1[id]) / textLength[id]);float av_char2=(float)1.5 * ((f_x2[last] - f_x1[last]) / textLength[last]);if ((mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM)) {possSpace=-possSpace;t=-t;av_char1=-av_char1;av_char2=-av_char2;}if (t < av_char1 && t < av_char2) {merge(last,id,isGapASpace(id,last,possSpace,addSpaceXMLTag,mode),true);} else {current_line.addElement(id);last=id;}isUsed[id]=true;id=-1;smallest_gap=1000000;}lines.addElement(current_line);max_rows++;}}}  }
class C{  public PolygonDescription(final List<? extends GeoPoint> points,final List<? extends PolygonDescription> holes){  this.points=points;  this.holes=holes;}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public final void testSetHintWithCharSequenceParameter(){  CharSequence hint="hint";  ArrayAdapter<CharSequence> adapter=new ArrayAdapter<CharSequence>(getContext(),android.R.layout.simple_spinner_dropdown_item,new CharSequence[]{"entry1","entry2"});  Spinner spinner=new Spinner(getContext());  spinner.setAdapter(adapter);  spinner.setHint(hint);  assertEquals(hint,spinner.getHint());}  }
class C{  public static int maxPower(int a){  int h=0;  if (a != 0) {    int p=1;    while ((a & p) == 0) {      h++;      p<<=1;    }  }  return h;}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  sb.append(System.getProperty("line.separator"));  sb.append(spaces);  sb.append(version);  sb.append(System.getProperty("line.separator"));  sb.append(spaces);  sb.append("Definition: ");  sb.append(definition.getName());  sb.append(System.getProperty("line.separator"));  sb.append(spaces);  sb.append("Charset: ");  sb.append(charset.getName());  sb.append(System.getProperty("line.separator"));  sb.append(spaces);  sb.append(strtbl.toString(++ident));  sb.append(spaces);  sb.append(body.toString(ident));  return sb.toString();}  }
class C{  public AsyncResult AddReferencesAsync(AddReferencesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public RenderViewBindAdapter(List list){  super(list);}  }
class C{  public boolean isVertical(){  return FloatingPoint.same(start.getX(),end.getX());}  }
class C{  public static void updateBeginningBalance(Properties ctx,int terminalId,String trxName) throws OperationException {  int cashBookId=POSTerminalManager.getCashBookId(ctx,terminalId);  updateCashBookBeginningBalance(ctx,cashBookId,trxName);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public JoinQuery(JavaSparkContext sc,PointRDD pointRDD,RectangleRDD rectangleRDDUnpartitioned){  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  this.rectangleRDD=rectangleRDDUnpartitioned;  this.rectangleRDD.rawRectangleRDD=rectangleRDDUnpartitioned.rawRectangleRDD;  this.rectangleRDD.SpatialPartition(pointRDD.grids);  this.sc=sc;}  }
class C{  public static CraftingStack[] arrayFrom(CraftingStack... stacks){  return stacks;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.735 -0400",hash_original_method="657F50EA293E77A87DF434319FAB5240",hash_generated_method="D23741D5C17118EAA0FE41298AF4EB27") private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {}  }
class C{  protected void onClusterRendered(Cluster<T> cluster,Marker marker){}  }
class C{  public AccumuloSingleIDRetriever(final AccumuloStore store,final GetOperation<? extends ElementSeed,?> operation,final User user,final IteratorSetting... iteratorSettings) throws StoreException {  super(store,operation,user,iteratorSettings);}  }
class C{  public void insertRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  public static Validator<CharSequence> number(@NonNull final CharSequence errorMessage){  return new NumberValidator(errorMessage);}  }
class C{  @Override public <T>Iterable<Binding<T>> bindings(Class<T> type){  BindingSet<T> set=(BindingSet)_bindingSetMap.get(type);  if (set != null) {    return (Iterable)set;  } else {    return Collections.EMPTY_LIST;  }}  }
class C{  public Object put(Object key,Object value){  if (key == null) {    throw new NullPointerException("null keys not allowed");  }  if (value == null) {    throw new NullPointerException("null values not allowed");  }  purgeBeforeWrite();  return super.put(key,value);}  }
class C{  private String normalizeAddress(String hostAddress){  return hostAddress.replaceAll(COLON_DELIM,COLON_SUBST);}  }
class C{  public void DrawSemivariogram(bin[][] bins,Variogram variogram){  XYSeriesCollection sampleCollct=new XYSeriesCollection();  XYSeries series=new XYSeries("Sample Variogram");  XYLineAndShapeRenderer xylineshapRend=new XYLineAndShapeRenderer(false,true);  CombinedRangeXYPlot combinedrangexyplot=new CombinedRangeXYPlot();  for (int i=0; i < bins[0].length; i++) {    for (int k=0; k < bins.length; k++) {      if (!Double.isNaN(bins[k][i].Value)) {        series.add(bins[k][i].Distance,bins[k][i].Value);      }    }    sampleCollct.addSeries(series);    double[][] res=CalcTheoreticalSVValues(variogram,series.getMaxX());    XYSeries seriesTSV=new XYSeries("Theoretical Variogram");    for (int l=0; l < res.length; l++) {      seriesTSV.add(res[l][0],res[l][1]);    }    XYSeriesCollection theorCollct=new XYSeriesCollection();    theorCollct.addSeries(seriesTSV);    XYDataset xydataset=sampleCollct;    XYPlot xyplot1=new XYPlot(xydataset,new NumberAxis(),null,xylineshapRend);    xyplot1.setDataset(1,theorCollct);    XYLineAndShapeRenderer lineshapRend=new XYLineAndShapeRenderer(true,false);    xyplot1.setRenderer(1,lineshapRend);    xyplot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);    combinedrangexyplot.add(xyplot1);  }  DecimalFormat df=new DecimalFormat("###,##0.000");  String title="Semivariogram (RMSE = " + df.format(Math.sqrt(variogram.mse)) + ")";  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,combinedrangexyplot,true);  ChartFrame frame=new ChartFrame("Semivariogram",chart);  frame.pack();  frame.setVisible(true);}  }
class C{  @HLEFunction(nid=0xA5C055CE,version=150) public int sceNetAdhocctlCreateEnterGameMode(@CanBeNull @StringInfo(maxLength=GROUP_NAME_LENGTH) PspString groupName,int unknown,int num,TPointer macsAddr,int timeout,int unknown2){  checkInitialized();  gameModeMacs.clear();  requiredGameModeMacs.clear();  for (int i=0; i < num; i++) {    pspNetMacAddress macAddress=new pspNetMacAddress();    macAddress.read(macsAddr,i * macAddress.sizeof());    requiredGameModeMacs.add(macAddress);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocctlCreateEnterGameMode macAddress#%d=%s",i,macAddress));    }  }  doJoin=true;  setGroupName(groupName.getString(),PSP_ADHOCCTL_MODE_GAMEMODE);  return 0;}  }
class C{  private void injectDependencies(){  ((BaseActivity)getActivity()).inject(this);}  }
class C{  static void printClassRefs(ClassRef[] classes,boolean justClasses){  if (!justClasses) {    out.println("Classes:");  }  for (int i=0; i < classes.length; i++) {    ClassRef ref=classes[i];    out.println(descriptorToDot(ref.getName()));  }}  }
class C{  public void testGetF8Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF8Momentary();  assertEquals(expResult,result);}  }
class C{  public boolean isEnableMetricsReporting(){  return enableMetricsReporting;}  }
class C{  public UserActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private final void addToTies(int id){  if (ties.length == numties) {    ties=Arrays.copyOf(ties,(ties.length << 1) + 1);  }  ties[numties]=id;  ++numties;}  }
class C{  public MyMap remove(int position){  MyMap mm=null;  if (position >= 0 && position < getItemCount()) {    mm=myMaps.remove(position);    notifyItemRemoved(position);  }  return mm;}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public void contextReleased(Context cx){  if (type != IPROXY_LISTEN)   Kit.codeBug();}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    out.close();  }}  }
class C{  @SuppressWarnings("unused") public void startRepeatingElement() throws IOException {  Element currentElement=currentElement();  if (currentElement.repeatingCount != Element.NOT_REPEATING) {    throw new IllegalStateException("Existing repeating element is active");  }  currentElement.repeatingCount=0;}  }
class C{  @Override public void teardown(){}  }
class C{  public void write(Writer policy){  PrintWriter out=new PrintWriter(new BufferedWriter(policy));  Enumeration<GrantEntry> enum_=grantElements();  out.println("/* AUTOMATICALLY GENERATED ON " + (new java.util.Date()) + "*/");  out.println("/* DO NOT EDIT */");  out.println();  if (keyStoreUrlString != null) {    writeKeyStoreEntry(out);  }  if (storePassURL != null) {    writeStorePassURL(out);  }  while (enum_.hasMoreElements()) {    GrantEntry ge=enum_.nextElement();    ge.write(out);    out.println();  }  out.flush();}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<K,SumEntry> e : sums.entrySet()) {    K key=e.getKey();    SumEntry val=e.getValue();    if (val.changed) {      sum.emit(new KeyValPair<K,V>(key,getValue(val.sum.doubleValue())));      sumDouble.emit(new KeyValPair<K,Double>(key,val.sum.doubleValue()));      sumInteger.emit(new KeyValPair<K,Integer>(key,val.sum.intValue()));      sumFloat.emit(new KeyValPair<K,Float>(key,val.sum.floatValue()));      sumShort.emit(new KeyValPair<K,Short>(key,val.sum.shortValue()));      sumLong.emit(new KeyValPair<K,Long>(key,val.sum.longValue()));    }  }  clearCache();}  }
class C{  @Override public Object function(final Object[] arguments){  editor.onMouseLinkEnter();  return null;}  }
class C{  public static double stdDev(double[][] matrix){  double mean=mean(matrix);  return stdDev(matrix,mean);}  }
class C{  public EventHeader createEventHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null eventType");  Event event=new Event();  event.setEventType(eventType);  return event;}  }
class C{  public float[] array(int index){  return buffers[index];}  }
class C{  public MockResult(Object beans[]){  if (beans == null) {    throw new NullPointerException();  }  this.beans=beans;}  }
class C{  public void registerFirstSearcherListener(SolrEventListener listener){  firstSearcherListeners.add(listener);}  }
class C{  public void keyTyped(KeyEvent e){  e.consume();}  }
class C{  protected final Class<?> findSystemClass(String className) throws ClassNotFoundException {  return getSystemClassLoader().loadClass(className,false);}  }
class C{  public void addProperty(String property,String value){  getPropertyHandler().addProperty(property,value);}  }
class C{  private int numDigits(int n){  return (int)Math.log10(n) + 1;}  }
class C{  public int sMaxAgeSeconds(){  return sMaxAgeSeconds;}  }
class C{  public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return longForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  public static int[] longToIntArray(final long src,final int srcPos,final int[] dst,final int dstPos,final int nInts){  if (0 == nInts) {    return dst;  }  if ((nInts - 1) * 32 + srcPos >= 64) {    throw new IllegalArgumentException("(nInts-1)*32+srcPos is greather or equal to than 64");  }  int shift=0;  for (int i=0; i < nInts; i++) {    shift=i * 32 + srcPos;    dst[dstPos + i]=(int)(0xffffffff & (src >> shift));  }  return dst;}  }
class C{  public long handlerCapacity(){  return m_nvmasvc.handlerCapacity(m_nid);}  }
class C{  public boolean first() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean ensureReplicaInLeaderInitiatedRecovery(final String collection,final String shardId,final String replicaUrl,final ZkCoreNodeProps replicaCoreProps,boolean forcePublishState) throws KeeperException, InterruptedException {  if (collection == null)   throw new IllegalArgumentException("collection parameter cannot be null for starting leader-initiated recovery for replica: " + replicaUrl);  if (shardId == null)   throw new IllegalArgumentException("shard parameter cannot be null for starting leader-initiated recovery for replica: " + replicaUrl);  if (replicaUrl == null)   throw new IllegalArgumentException("replicaUrl parameter cannot be null for starting leader-initiated recovery");  boolean nodeIsLive=true;  boolean publishDownState=false;  String replicaNodeName=replicaCoreProps.getNodeName();  String replicaCoreNodeName=((Replica)replicaCoreProps.getNodeProps()).getName();  assert replicaCoreNodeName != null : "No core name for replica " + replicaNodeName;synchronized (replicasInLeaderInitiatedRecovery) {    if (replicasInLeaderInitiatedRecovery.containsKey(replicaUrl)) {      if (!forcePublishState) {        log.debug("Replica {} already in leader-initiated recovery handling.",replicaUrl);        return false;      }    }    if (getZkStateReader().getClusterState().liveNodesContain(replicaNodeName)) {      replicasInLeaderInitiatedRecovery.put(replicaUrl,getLeaderInitiatedRecoveryZnodePath(collection,shardId,replicaCoreNodeName));      updateLeaderInitiatedRecoveryState(collection,shardId,replicaCoreNodeName,ZkStateReader.DOWN);      log.info("Put replica core={} coreNodeName={} on " + replicaNodeName + " into leader-initiated recovery.",replicaCoreProps.getCoreName(),replicaCoreNodeName);      publishDownState=true;    } else {      nodeIsLive=false;      log.info("Node " + replicaNodeName + " is not live, so skipping leader-initiated recovery for replica: core={} coreNodeName={}",replicaCoreProps.getCoreName(),replicaCoreNodeName);    }  }  if (publishDownState || forcePublishState) {    String replicaCoreName=replicaCoreProps.getCoreName();    ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,"state",ZkStateReader.STATE_PROP,ZkStateReader.DOWN,ZkStateReader.BASE_URL_PROP,replicaCoreProps.getBaseUrl(),ZkStateReader.CORE_NAME_PROP,replicaCoreProps.getCoreName(),ZkStateReader.NODE_NAME_PROP,replicaCoreProps.getNodeName(),ZkStateReader.SHARD_ID_PROP,shardId,ZkStateReader.COLLECTION_PROP,collection);    log.warn("Leader is publishing core={} coreNodeName ={} state={} on behalf of un-reachable replica {}; forcePublishState? " + forcePublishState,replicaCoreName,replicaCoreNodeName,ZkStateReader.DOWN,replicaUrl);    overseerJobQueue.offer(ZkStateReader.toJSON(m));  }  return nodeIsLive;}  }
class C{  public ExitAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  public Ed25519GroupElement doubleScalarMultiplyVariableTime(final Ed25519GroupElement A,final Ed25519EncodedFieldElement a,final Ed25519EncodedFieldElement b){  final byte[] aSlide=slide(a);  final byte[] bSlide=slide(b);  Ed25519GroupElement r=Ed25519Group.ZERO_P2;  int i;  for (i=255; i >= 0; --i) {    if (aSlide[i] != 0 || bSlide[i] != 0) {      break;    }  }  for (; i >= 0; --i) {    Ed25519GroupElement t=r.dbl();    if (aSlide[i] > 0) {      t=t.toP3().precomputedSubtract(A.precomputedForDouble[aSlide[i] / 2]);    } else     if (aSlide[i] < 0) {      t=t.toP3().precomputedAdd(A.precomputedForDouble[(-aSlide[i]) / 2]);    }    if (bSlide[i] > 0) {      t=t.toP3().precomputedAdd(this.precomputedForDouble[bSlide[i] / 2]);    } else     if (bSlide[i] < 0) {      t=t.toP3().precomputedSubtract(this.precomputedForDouble[(-bSlide[i]) / 2]);    }    r=t.toP2();  }  return r;}  }
class C{  public void decrementWeight(){  if (strength > lowerBound) {    strength-=increment;  }  getNetwork().fireSynapseChanged(this);}  }
class C{  public boolean match(FieldAccess node,Object other){  if (!(other instanceof FieldAccess)) {    return false;  }  FieldAccess o=(FieldAccess)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getName(),o.getName()));}  }
class C{  public Long hdel(final String key,final String... fields){  checkIsInMulti();  client.hdel(key,fields);  return client.getIntegerReply();}  }
class C{  public synchronized void closeChannel(InputStream in){  if (DEBUG) {    System.out.println("AudioDevice.closeChannel");  }  if (in == null)   return;  Info info;  for (int i=0; i < infos.size(); i++) {    info=(AudioDevice.Info)infos.elementAt(i);    if (info.in == in) {      if (info.sequencer != null) {        info.sequencer.stop();        infos.removeElement(info);      } else       if (info.datapusher != null) {        info.datapusher.stop();        infos.removeElement(info);      }    }  }  notify();}  }
class C{  public AdapterTest(String name){  super(name);}  }
class C{  public static boolean isV21Word(final String value){  if (TextUtils.isEmpty(value)) {    return true;  }  final int asciiFirst=0x20;  final int asciiLast=0x7E;  final int length=value.length();  for (int i=0; i < length; i=value.offsetByCodePoints(i,1)) {    final int c=value.codePointAt(i);    if (!(asciiFirst <= c && c <= asciiLast) || sUnAcceptableAsciiInV21WordSet.contains((char)c)) {      return false;    }  }  return true;}  }
class C{  private Task<JSONObject> enqueueEventuallyAsync(ParseRESTCommand command,boolean preferOldest,ParseObject object){  Parse.requirePermission(Manifest.permission.ACCESS_NETWORK_STATE);  TaskCompletionSource<JSONObject> tcs=new TaskCompletionSource<>();  byte[] json;  try {    if (object != null && object.getObjectId() == null) {      command.setLocalId(object.getOrCreateLocalId());    }    JSONObject jsonObject=command.toJSONObject();    json=jsonObject.toString().getBytes("UTF-8");  } catch (  UnsupportedEncodingException e) {    if (Parse.LOG_LEVEL_WARNING >= Parse.getLogLevel()) {      log.log(Level.WARNING,"UTF-8 isn't supported.  This shouldn't happen.",e);    }    notifyTestHelper(TestHelper.COMMAND_NOT_ENQUEUED);    return Task.forResult(null);  }  if (json.length > maxCacheSizeBytes) {    if (Parse.LOG_LEVEL_WARNING >= Parse.getLogLevel()) {      log.warning("Unable to save command for later because it's too big.");    }    notifyTestHelper(TestHelper.COMMAND_NOT_ENQUEUED);    return Task.forResult(null);  }synchronized (lock) {    try {      String[] fileNames=cachePath.list();      if (fileNames != null) {        Arrays.sort(fileNames);        int size=0;        for (        String fileName : fileNames) {          File file=new File(cachePath,fileName);          size+=(int)file.length();        }        size+=json.length;        if (size > maxCacheSizeBytes) {          if (preferOldest) {            if (Parse.LOG_LEVEL_WARNING >= Parse.getLogLevel()) {              log.warning("Unable to save command for later because storage is full.");            }            return Task.forResult(null);          } else {            if (Parse.LOG_LEVEL_WARNING >= Parse.getLogLevel()) {              log.warning("Deleting old commands to make room in command cache.");            }            int indexToDelete=0;            while (size > maxCacheSizeBytes && indexToDelete < fileNames.length) {              File file=new File(cachePath,fileNames[indexToDelete++]);              size-=(int)file.length();              removeFile(file);            }          }        }      }      String prefix1=Long.toHexString(System.currentTimeMillis());      if (prefix1.length() < 16) {        char[] zeroes=new char[16 - prefix1.length()];        Arrays.fill(zeroes,'0');        prefix1=new String(zeroes) + prefix1;      }      String prefix2=Integer.toHexString(filenameCounter++);      if (prefix2.length() < 8) {        char[] zeroes=new char[8 - prefix2.length()];        Arrays.fill(zeroes,'0');        prefix2=new String(zeroes) + prefix2;      }      String prefix="CachedCommand_" + prefix1 + "_"+ prefix2+ "_";      File path=File.createTempFile(prefix,"",cachePath);      pendingTasks.put(path,tcs);      command.retainLocalIds();      ParseFileUtils.writeByteArrayToFile(path,json);      notifyTestHelper(TestHelper.COMMAND_ENQUEUED);      unprocessedCommandsExist=true;    } catch (    IOException e) {      if (Parse.LOG_LEVEL_WARNING >= Parse.getLogLevel()) {        log.log(Level.WARNING,"Unable to save command for later.",e);      }    } finally {      lock.notifyAll();    }  }  return tcs.getTask();}  }
class C{  public CompletableFuture<FluentTriFunction<T1,T2,T3,R>> async(final Executor ex){  return CompletableFuture.supplyAsync(null,ex);}  }
class C{  private <A extends Annotation>Expression buildAnyFieldExpression(final PermissionCondition condition,final Function<Check,Expression> checkFn){  Class<?> resourceClass=condition.getEntityClass();  Class<? extends Annotation> annotationClass=condition.getPermission();  ParseTree classPermissions=entityDictionary.getPermissionsForClass(resourceClass,annotationClass);  Expression entityExpression=expressionFromParseTree(classPermissions,checkFn);  OrExpression allFieldsExpression=new OrExpression(FAILURE,null);  List<String> fields=entityDictionary.getAllFields(resourceClass);  for (  String field : fields) {    ParseTree fieldPermissions=entityDictionary.getPermissionsForField(resourceClass,field,annotationClass);    Expression fieldExpression=expressionFromParseTree(fieldPermissions,checkFn);    allFieldsExpression=new OrExpression(allFieldsExpression,fieldExpression);  }  return new AnyFieldExpression(condition,entityExpression,allFieldsExpression);}  }
class C{  public int flags(){  return theFlags;}  }
class C{  public void addInstructionWithDelta(final ReilInstruction instruction,final long delta){  instruction.setAddress(new CAddress(baseAddress + instructions.size() + delta));  instructions.add(instruction);}  }
class C{  private WebSessionCtx(HttpServletRequest request){  log.info(request.getContextPath() + " (" + request.getRemoteAddr()+ " - "+ request.getLocale()+ ") #"+ counter);  ctx=new Properties();  setLanguage(request);  HttpSession session=request.getSession(false);  ServletContext sc=session.getServletContext();  Enumeration en=sc.getInitParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    String value=sc.getInitParameter(key);    ctx.setProperty(key,value);    log.config(key + "=" + value);  }  setWStore(request.getContextPath());  ctx=getDefaults();  ctx.put(CTX_SERVER_CONTEXT,request.getServerName() + request.getContextPath());  session.setAttribute("ctx",ctx);  log.fine("#" + ctx.size());}  }
class C{  public static ReportEngine startDocumentPrint(int type,int Record_ID){  ReportEngine re=ReportEngine.get(Env.getCtx(),type,Record_ID);  if (re == null) {    return null;  }  return re;}  }
class C{  public void addLineContent(final ZyLineContent line){  Preconditions.checkNotNull(line,"Internal Error: Line content can't be null");  m_content.add(line);}  }
class C{  private XYDataset createDataset1(){  XYSeries series=new XYSeries("Series");  series.add(1.0,1.0);  series.add(2.0,2.0);  series.add(3.0,3.0);  XYSeriesCollection dataset=new XYSeriesCollection();  dataset.addSeries(series);  return dataset;}  }
class C{  public boolean isCombining(){  return (glyphType & 0x3) == COMBINING;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.LOOK);}  }
class C{  public void dispose(){  if (bufferedLayer != null) {    bufferedLayer.dispose();  }  super.dispose();}  }
class C{  public static Selection createFromStartLength(int s,int l){  Assert.isTrue(s >= 0 && l >= 0);  Selection result=new Selection();  result.fStart=s;  result.fLength=l;  result.fExclusiveEnd=s + l;  return result;}  }
class C{  private void updateBackdrop(Context context,ProductImage image,boolean useCache){  if (context == null || image == null || backdrop == null) {    return;  }  int[] productDominantColor=image.getDominantColor();  if (productDominantColor != null) {    backdrop.setBackgroundColor(Color.rgb(productDominantColor[0],productDominantColor[1],productDominantColor[2]));  } else {    backdrop.setBackgroundColor(ThemeUtil.getIntegerValue(context,R.attr.imagePlaceholder));  }  backdrop.setScaleType(ImageView.ScaleType.CENTER_CROP);  String imageUrl=ImageService.getImageForSizeURL(client,image.getImageFileId(),MetricsUtil.getWidthPx(),appBarHeight,true,QUALITY_PRODUCT_IMAGE);  Log.v(getClass().getSimpleName(),"Loading backdrop image for product screen from " + imageUrl);  if (useCache) {    Picasso.with(context).load(imageUrl).into(backdrop);  } else {    Picasso.with(context).invalidate(imageUrl);    Picasso.with(context).load(imageUrl).memoryPolicy(MemoryPolicy.NO_CACHE).networkPolicy(NetworkPolicy.NO_CACHE).into(backdrop);  }}  }
class C{  public static void v(String msg){  if (sIsLogEnabled) {    Log.v(sApplicationTag,getContents(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.804 -0500",hash_original_method="AD70092C1832EBC094F0EF6B8F6DE4A8",hash_generated_method="F11749F786740540B14A8CA16535621F") public void decrementMaxForwards() throws TooManyHopsException {  if (maxForwards > 0)   maxForwards--; else   throw new TooManyHopsException("has already reached 0!");}  }
class C{  public ToStringBuilder append(String fieldName,short[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void removeXValue(int index){  mXVals.remove(index);}  }
class C{  public GUIText(String text,float fontSize,FontType font,float maxLineLength,boolean centered){  this.textString=text;  this.fontSize=fontSize;  this.font=font;  this.lineMaxSize=maxLineLength;  this.centerText=centered;}  }
class C{  public SoftLatch(boolean open){  this.open=open;}  }
class C{  private void nativeKill(){  if (process == null) {    return;  }  if (process.getClass().getName().equals("java.lang.UNIXProcess")) {    try {      Field f=process.getClass().getDeclaredField("pid");      f.setAccessible(true);      int pid=f.getInt(process);      Runtime.getRuntime().exec("kill -9 " + pid);    } catch (    Throwable e) {    }  } else   if (process.getClass().getName().equals("java.lang.Win32Process") || process.getClass().getName().equals("java.lang.ProcessImpl")) {    try {      Field f=process.getClass().getDeclaredField("handle");      f.setAccessible(true);      long handleId=f.getLong(process);      Kernel32 kernel=Kernel32.INSTANCE;      HANDLE handle=new HANDLE();      handle.setPointer(Pointer.createConstant(handleId));      int pid=kernel.GetProcessId(handle);      Runtime.getRuntime().exec("taskkill /PID " + pid + " /F");    } catch (    Throwable e) {    }  }}  }
class C{  public void testGenerateCertPath02() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  for (int i=0; i < certFs.length; i++) {    CertPath certPath=null;    InputStream fis=Support_Resources.getResourceStream(fileCertPathPki);    certPath=certFs[i].generateCertPath(fis,"PkiPath");    fis.close();    assertEquals(defaultType,certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());  }}  }
class C{  public final SecretKey generateKey(){  if (serviceIterator == null) {    return spi.engineGenerateKey();  }  RuntimeException failure=null;  KeyGeneratorSpi mySpi=spi;  do {    try {      return mySpi.engineGenerateKey();    } catch (    RuntimeException e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi,true);    }  } while (mySpi != null);  throw failure;}  }
class C{  @Override public void execute(){  new ItemListImageViewerEvent(event).view();}  }
class C{  public void testFileFileWithConfigOption() throws Exception {  Properties properties=loadProperties("test-file-configfile-file");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  private WikibaseDate check(int year,int month,int day,int hour,int minute,int second){  WikibaseDate wbDate=new WikibaseDate(year,month,day,hour,minute,second);  assertEquals(wbDate.toString(),jodaSeconds(year,month,day,hour,minute,second),wbDate.secondsSinceEpoch());  checkRoundTrip(wbDate);  return wbDate;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void writeAttribute(mxCodec enc,Object obj,String attr,Object value,Node node){  value=convertValueToXml(value);  if (isPrimitiveValue(value)) {    writePrimitiveAttribute(enc,obj,attr,value,node);  } else {    writeComplexAttribute(enc,obj,attr,value,node);  }}  }
class C{  public List<DiscoveryNode> listedNodes(){  return nodesService.listedNodes();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress;  double z, zn, previousZ;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxDist=0;  int subgridSize=0;  int neighbourhoodMaxDist=0;  int neighbourhoodSubgridSize=0;  boolean isLowest;  double aSmallValue;  int a, r, c, i, j, k, n, cn, rn;  int numNoFlowCells;  double largeVal=Float.MAX_VALUE;  int visitedCells;  boolean atLeastOneSourceCell;  boolean flag;  int b=0;  double costAccumVal;  double cost1, cost2;  double newcostVal;  double maxCost=largeVal;  boolean useMaxCost=false;  boolean solutionFound;  double[] dist=new double[8];  int[] backLinkDir={4,5,6,7,0,1,2,3};  int numUnsolvedCells=0;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodMaxDist=Integer.parseInt(args[2]);  neighbourhoodSubgridSize=2 * neighbourhoodMaxDist + 1;  if (!args[3].toLowerCase().equals("not specified")) {    maxCost=Double.parseDouble(args[3]);    useMaxCost=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  Long startTime=System.currentTimeMillis();  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    String shortName=DEM.getShortHeaderFile();    double cellSizeX=DEM.getCellSizeX();    double cellSizeY=DEM.getCellSizeY();    double minCellSize=Math.min(cellSizeX,cellSizeY);    double diagCellSize=Math.sqrt(cellSizeX * cellSizeX + cellSizeY * cellSizeY);    dist[0]=diagCellSize / minCellSize;    dist[1]=cellSizeX / minCellSize;    dist[2]=diagCellSize / minCellSize;    dist[3]=cellSizeY / minCellSize;    dist[4]=diagCellSize / minCellSize;    dist[5]=cellSizeX / minCellSize;    dist[6]=diagCellSize / minCellSize;    dist[7]=cellSizeY / minCellSize;    FileUtilities.copyFile(new File(inputHeader),new File(outputHeader));    FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(outputHeader.replace(".dep",".tas")));    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw");    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    if (args.length == 5 && !args[4].toLowerCase().equals("not specified")) {      aSmallValue=Double.parseDouble(args[4]);    }    double[][] LNDecrementValue=new double[neighbourhoodSubgridSize][neighbourhoodSubgridSize];    for (r=0; r < neighbourhoodSubgridSize; r++) {      for (c=0; c < neighbourhoodSubgridSize; c++) {        j=Math.abs(c - neighbourhoodMaxDist);        k=Math.abs(r - neighbourhoodMaxDist);        LNDecrementValue[r][c]=(j + k) * aSmallValue;      }    }    DEM.close();    ArrayList<DepGridCell> pq2=new ArrayList<>();    updateProgress("Loop 1 of 2:",-1);    for (row=1; row < (rows - 1); row++) {      for (col=1; col < (cols - 1); col++) {        z=output.getValue(row,col);        if (z != noData) {          isLowest=true;          for (a=0; a < 8; a++) {            cn=col + dX[a];            rn=row + dY[a];            zn=output.getValue(rn,cn);            if (zn < z && zn != noData) {              isLowest=false;              break;            }          }          if (isLowest) {            pq2.add(new DepGridCell(row,col,z));          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    numNoFlowCells=pq2.size();    int oneHundredthOfNumNoFlowCells=(int)(numNoFlowCells / 100);    updateProgress("Loop 2 of 2:",-1);    Long startTimeLoop2=System.currentTimeMillis();    DepGridCell cell=new DepGridCell(-1,-1,largeVal);    visitedCells=0;    n=0;    progress=0;    do {      cell=pq2.get(visitedCells);      col=cell.col;      row=cell.row;      z=cell.z;      isLowest=true;      for (a=0; a < 8; a++) {        cn=col + dX[a];        rn=row + dY[a];        zn=output.getValue(rn,cn);        if (zn < z && zn != noData) {          isLowest=false;          break;        }      }      if (isLowest) {        maxDist=neighbourhoodMaxDist;        subgridSize=neighbourhoodSubgridSize;        double[][] cost=new double[subgridSize][subgridSize];        double[][] accumulatedcost=new double[subgridSize][subgridSize];        int[][] backLink=new int[subgridSize][subgridSize];        atLeastOneSourceCell=false;        for (r=-maxDist; r <= maxDist; r++) {          for (c=-maxDist; c <= maxDist; c++) {            zn=output.getValue(row + r,col + c);            j=c + maxDist;            k=r + maxDist;            if ((zn + LNDecrementValue[k][j]) < z && zn != noData) {              cost[k][j]=0;              accumulatedcost[k][j]=0;              atLeastOneSourceCell=true;            } else             if ((zn + LNDecrementValue[k][j]) >= z) {              cost1=(zn - z) + LNDecrementValue[k][j];              if (cost1 <= maxCost) {                cost[k][j]=cost1;              } else {                cost[k][j]=largeVal;              }              accumulatedcost[k][j]=largeVal;            } else {              cost[k][j]=noData;              accumulatedcost[k][j]=noData;            }            backLink[k][j]=(int)noData;          }        }        cost[maxDist][maxDist]=0;        accumulatedcost[maxDist][maxDist]=largeVal;        if (atLeastOneSourceCell) {          PriorityQueue<CostDistCell> activeCellList=new PriorityQueue<>(maxDist * 4);          for (r=0; r < subgridSize; r++) {            for (c=0; c < subgridSize; c++) {              if (accumulatedcost[r][c] == largeVal) {                cost1=cost[r][c];                for (a=0; a < 8; a++) {                  cn=c + dX[a];                  rn=r + dY[a];                  if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                    if (accumulatedcost[rn][cn] == 0) {                      cost2=cost[rn][cn];                      newcostVal=(cost1 + cost2) / 2 * dist[a];                      activeCellList.add(new CostDistCell(r,c,newcostVal,a));                    }                  }                }              }            }          }          if (activeCellList.size() > 0) {            do {              CostDistCell cdCell=activeCellList.poll();              if (cdCell != null) {                r=cdCell.row;                c=cdCell.col;                costAccumVal=cdCell.aCost;                if (accumulatedcost[r][c] > costAccumVal) {                  accumulatedcost[r][c]=costAccumVal;                  backLink[r][c]=cdCell.backLink;                  cost1=cost[r][c];                  for (a=0; a < 8; a++) {                    cn=c + dX[a];                    rn=r + dY[a];                    if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                      cost2=cost[rn][cn];                      newcostVal=costAccumVal + (cost1 + cost2) / 2 * dist[a];                      if (newcostVal < accumulatedcost[rn][cn]) {                        activeCellList.add(new CostDistCell(rn,cn,newcostVal,backLinkDir[a]));                      }                    }                  }                }              } else {                activeCellList.clear();              }            } while (activeCellList.size() > 0);            solutionFound=true;            if (useMaxCost) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  if (cost[r][c] == largeVal) {                    solutionFound=false;                  }                } else {                  flag=false;                }              } while (flag);            }            if (solutionFound) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  col=col + dX[b];                  row=row + dY[b];                  zn=output.getValue(row,col);                  if (zn > (previousZ - aSmallValue)) {                    output.setValue(row,col,previousZ - aSmallValue);                  }                  previousZ=output.getValue(row,col);                } else {                  flag=false;                }              } while (flag);            } else {              numUnsolvedCells++;            }          } else {            numUnsolvedCells++;          }        } else {          numUnsolvedCells++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      visitedCells++;      n++;      if (n == oneHundredthOfNumNoFlowCells || (visitedCells % 500 == 0)) {        if (n == oneHundredthOfNumNoFlowCells) {          n=0;          progress++;        }        long secPassed=(System.currentTimeMillis() - startTimeLoop2) / 1000;        long secRemaining=(long)(secPassed * ((double)numNoFlowCells / visitedCells) - secPassed);        String timeRemaining=String.format("%02d:%02d:%02d:%02d",secRemaining / 86400,(secRemaining % 86400) / 3600,(secRemaining % 3600) / 60,(secRemaining % 60));        updateProgress("Solved " + df.format((visitedCells - numUnsolvedCells)) + " pits (Est. time remaining "+ timeRemaining+ "):",progress);      }    } while (visitedCells < numNoFlowCells);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    Long endTime=System.currentTimeMillis();    returnData(outputHeader);    String results="Depression Breaching Results:\n";    results+="Input DEM:\t" + shortName + "\n";    results+="Output DEM:\t" + output.getShortHeaderFile() + "\n";    results+="Solved Pit Cells:\t" + df.format(visitedCells - numUnsolvedCells);    results+="\nUnsolved Pit Cells:\t" + df.format(numUnsolvedCells);    results+="\nMax distance:\t" + neighbourhoodMaxDist;    if (useMaxCost) {      results+="\nMax Elev. Decrement:\t" + maxCost;    }    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    results+="\nDuration:\t" + duration;    returnData(results);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void buildClassifier(Instances data,double[][] dataZs,double[][] dataWs) throws Exception {  m_numClasses=data.numClasses();  m_numInstances=data.numInstances();  if (m_numInstances == 0)   throw new Exception("Can't build split on 0 instances");  m_data=data;  m_dataZs=dataZs;  m_dataWs=dataWs;  m_attribute=data.attribute(m_attIndex);  if (m_attribute.isNominal()) {    m_splitPoint=0.0;    m_numSubsets=m_attribute.numValues();  } else {    getSplitPoint();    m_numSubsets=2;  }  m_distribution=new Distribution(data,this);}  }
class C{  public SendPrivateMessageAction(String text){  this.text=checkNotNull(text);  this.type=NotificationType.PRIVMSG;}  }
class C{  public Map<String,String> parse(final String str,char separator){  if (str == null) {    return new HashMap<String,String>();  }  return parse(str.toCharArray(),separator);}  }
class C{  public MBRecord(Name name,int dclass,long ttl,Name mailbox){  super(name,Type.MB,dclass,ttl,mailbox,"mailbox");}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  this.editor=EditorUtil.getTLAEditorWithFocus();  this.doc=editor.getDocumentProvider().getDocument(editor.getEditorInput());  this.selectionProvider=editor.getSelectionProvider();  this.selection=(TextSelection)selectionProvider.getSelection();  this.offset=selection.getOffset();  String moduleName=editor.getModuleName();  this.moduleNode=ResourceHelper.getModuleNode(moduleName);  moduleNameToDoc=new Hashtable<String,IDocument>();  moduleNameToDoc.put(this.moduleNode.getName().toString(),this.doc);  boolean proceed=UIHelper.promptUserForDirtyModules();  if (!proceed) {    return null;  }  if (editor == null) {    Activator.getDefault().logDebug("getTLAEditorWithFocus returned null");    return null;  }  editorIFile=((FileEditorInput)editor.getEditorInput()).getFile();  ParseResult parseResult=ResourceHelper.getValidParseResult(editorIFile);  if (parseResult == null) {    parseResult=new ModuleParserLauncher().parseModule(editorIFile,new NullProgressMonitor());  }  DecomposeProofRunnable runnable=new DecomposeProofRunnable(this);  UIHelper.runUISync(runnable);  return null;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(_method.getModifiers());}  }
class C{  public void testUserConfiguresJmsTopicAsResource() throws MalformedURLException {  ResourceFixture fixture=ConfigurationFixtureFactory.createJmsTopicAsResource();  addResourceToConfigurationViaProperty(fixture);  testWar("jms-topic");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:19.283 -0500",hash_original_method="A66E0F5FCADB4F7B6C8822100B46777D",hash_generated_method="77039782A0E5E9CBF61566D85A23A4AD") private boolean matchesEthernet(NetworkIdentity ident){  if (ident.mType == TYPE_ETHERNET) {    return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int height=getInt(stack);  int width=getInt(stack);  java.io.File file=getFile(stack);  Object o=stack.pop();  if (Sage.EMBEDDED)   return Boolean.FALSE;  if (o instanceof MetaImage) {    MetaImage mi=(MetaImage)o;    try {      sage.media.image.RawImage raw=mi.getRawImage(mi.getImageIndex(width,height));      if (raw != null) {        sage.media.image.ImageLoader.compressImageToFilePath(raw,file.getAbsolutePath(),file.toString().toLowerCase().endsWith("png") ? "png" : "jpg");        if (file.isFile() && file.length() > 0)         return Boolean.TRUE;      }    }  finally {      mi.removeRawRef(mi.getImageIndex(width,height));    }    return Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public static double degrees(double radians){  return Length.DECIMAL_DEGREE.fromRadians(radians);}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  while (length > 0) {    if (_tail == null) {      addBuffer(TempBuffer.create());    } else     if (_tail.buffer().length <= _tail.length()) {      addBuffer(TempBuffer.create());    }    TempBuffer tail=_tail;    int sublen=Math.min(length,tail.buffer().length - tail.length());    System.arraycopy(buf,offset,tail.buffer(),tail.length(),sublen);    length-=sublen;    offset+=sublen;    _tail.length(_tail.length() + sublen);  }}  }
class C{  public static boolean checkPattern(List<LockPatternView.Cell> pattern,byte[] bytes){  if (pattern == null || bytes == null) {    return false;  } else {    byte[] bytes2=patternToHash(pattern);    return Arrays.equals(bytes,bytes2);  }}  }
class C{  public MissingArgumentException(String field){  super("Missing mandatory registration field: " + field);  mMissingField=field;}  }
class C{  private static int simpleTests(){  int failures=0;  BigDecimal[] bd1={new BigDecimal(new BigInteger("7812404666936930160"),11),new BigDecimal(new BigInteger("7812404666936930160"),12),new BigDecimal(new BigInteger("7812404666936930160"),13)};  BigDecimal bd2=new BigDecimal(new BigInteger("2790000"),1);  BigDecimal[] expectedResult={new BigDecimal("78403046.66936930160"),new BigDecimal("8091404.666936930160"),new BigDecimal("1060240.4666936930160")};  for (int i=0; i < bd1.length; i++) {    if (!bd1[i].add(bd2).equals(expectedResult[i]))     failures++;  }  return failures;}  }
class C{  File writeFile(File dir,String path,String content) throws IOException {  File f=new File(dir,path);  f.getParentFile().mkdirs();  FileWriter out=new FileWriter(f);  try {    out.write(content);  }  finally {    out.close();  }  return f;}  }
class C{  void preModify(HashMapEntry<K,V> e){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SearchRequest extraSource(byte[] source,int offset,int length){  return extraSource(new BytesArray(source,offset,length));}  }
class C{  public static GeneralNeuronPropertiesPanel createPanel(final List<Neuron> neuronList,final Window parent){  return createPanel(neuronList,parent,!(neuronList == null || neuronList.size() != 1));}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public boolean containsDistinct(Value[] values){  if (external != null) {    return external.contains(values);  }  if (distinctRows == null) {    distinctRows=ValueHashMap.newInstance();    for (    Value[] row : rows) {      ValueArray array=getArrayOfVisible(row);      distinctRows.put(array,array.getList());    }  }  ValueArray array=ValueArray.get(values);  return distinctRows.get(array) != null;}  }
class C{  public static double pixelsToMillis(int pix,int dpi){  return pixelsToInch(pix,dpi) * INCH_MM;}  }
class C{  public ESRIPoint(byte b[],int off){  x=ShapeUtils.readLEDouble(b,off);  y=ShapeUtils.readLEDouble(b,off + 8);}  }
class C{  public Map<String,?> lastOffset(String replicaSetName){  Position existing=positionsByReplicaSetName.get(replicaSetName);  if (existing == null)   existing=INITIAL_POSITION;  if (initialSyncReplicaSets.contains(replicaSetName)) {    return Collect.hashMapOf(TIMESTAMP,new Integer(existing.getTime()),ORDER,new Integer(existing.getInc()),OPERATION_ID,existing.getOperationId(),INITIAL_SYNC,true);  }  return Collect.hashMapOf(TIMESTAMP,new Integer(existing.getTime()),ORDER,new Integer(existing.getInc()),OPERATION_ID,existing.getOperationId());}  }
class C{  protected BallNode makeBallTreeNodes(TempNode node,int startidx,int endidx,int depth){  BallNode ball=null;  if (node.left != null && node.right != null) {    ball=new BallNode(startidx,endidx,m_NumNodes,node.anchor,node.radius);    m_NumNodes+=1;    ball.m_Left=makeBallTreeNodes(node.left,startidx,startidx + node.left.points.length() - 1,depth + 1);    ball.m_Right=makeBallTreeNodes(node.right,startidx + node.left.points.length(),endidx,depth + 1);    m_MaxDepth++;  } else {    ball=new BallNode(startidx,endidx,m_NumNodes,node.anchor,node.radius);    m_NumNodes+=1;    m_NumLeaves+=1;  }  return ball;}  }
class C{  public EnvironmentCreationException(final Throwable cause){  super(cause);}  }
class C{  public PutIndexTemplateRequest source(BytesReference source){  try (XContentParser parser=XContentFactory.xContent(source).createParser(source)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse template source",e);  }}  }
class C{  public boolean isCaretEncodingEnabled(){  return writer.isCaretEncodingEnabled();}  }
class C{  public boolean isDNAME(){  return (type == DNAME);}  }
class C{  private static void deserializeEntry(KdbDatabase database,DataInput dataInput) throws IOException {  int fieldType;  KdbEntry entry=new KdbEntry();  while ((fieldType=dataInput.readUnsignedShort()) != 0xFFFF) {switch (fieldType) {case 0x0000:      readExtData(dataInput);    break;case 0x0001:  entry.setUuid(readUuid(dataInput));break;case 0x0002:int groupId=readInt(dataInput);Group group=database.findGroup(new UUID(0,groupId));if (group == null) {throw new IllegalStateException("Entry belongs to group that does not exist");}group.addEntry(entry);break;case 0x0003:entry.setIcon(new KdbIcon(readInt(dataInput)));break;case 0x0004:entry.setTitle(readString(dataInput));break;case 0x0005:entry.setUrl(readString(dataInput));break;case 0x0006:entry.setUsername(readString(dataInput));break;case 0x0007:entry.setPassword(readString(dataInput));break;case 0x0008:entry.setNotes(readString(dataInput));break;case 0x0009:entry.setCreationTime(readDate(dataInput));break;case 0x000A:entry.setLastModificationTime(readDate(dataInput));break;case 0x000B:entry.setLastAccessTime(readDate(dataInput));break;case 0x000C:entry.setExpiryTime(readDate(dataInput));break;case 0x000D:entry.setBinaryDescription(readString(dataInput));break;case 0x000E:entry.setBinaryData(readBuffer(dataInput));break;default :throw new IllegalStateException("Unknown field type");}}dataInput.readInt();}  }
class C{  private void createDriverTask(StorageVolume volume,long newCapacity){  String taskId=String.format("%s+%s+%s",StorageDriverSimulator.DRIVER_NAME,OP_NAME,UUID.randomUUID().toString());  _log.info("Creating task {} for operation of type {}",taskId,OP_NAME);  _task=new ExpandVolumeDriverTask(taskId,volume,newCapacity);  _task.setStatus(DriverTask.TaskStatus.PROVISIONING);}  }
class C{  public Call(String name,String method,Object[] args){  serviceName=name;  serviceMethodName=method;  arguments=args;}  }
class C{  public void removeUnusedTextures(){}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public boolean isA(int child,int parent){  while (child != parent) {    child=parentId[child];    if (child == -1) {      return false;    }  }  return true;}  }
class C{  public RandomSleeper(int min,int max,int incr,IgniteLogger log){  if (min <= 0)   throw new IllegalArgumentException("Incorrect min time specified: " + min);  if (max <= min)   throw new IllegalArgumentException("Incorrect max time specified: " + max);  if (incr < 10)   throw new IllegalArgumentException("Incorrect increment specified: " + incr);  this.min=min;  this.max=max;  this.incr=incr;  this.log=log;}  }
class C{  void start(){  this.running=true;  runningThread=new Thread(this,"Stun4J Message Processor");  runningThread.setDaemon(true);  runningThread.start();}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){  tableJvmRTLibraryPathTable=createJvmRTLibraryPathTableMetaNode("JvmRTLibraryPathTable","JvmRuntime",mib,server);  if (tableJvmRTLibraryPathTable != null) {    tableJvmRTLibraryPathTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmRTLibraryPathTable",tableJvmRTLibraryPathTable);  }  tableJvmRTClassPathTable=createJvmRTClassPathTableMetaNode("JvmRTClassPathTable","JvmRuntime",mib,server);  if (tableJvmRTClassPathTable != null) {    tableJvmRTClassPathTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmRTClassPathTable",tableJvmRTClassPathTable);  }  tableJvmRTBootClassPathTable=createJvmRTBootClassPathTableMetaNode("JvmRTBootClassPathTable","JvmRuntime",mib,server);  if (tableJvmRTBootClassPathTable != null) {    tableJvmRTBootClassPathTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmRTBootClassPathTable",tableJvmRTBootClassPathTable);  }  tableJvmRTInputArgsTable=createJvmRTInputArgsTableMetaNode("JvmRTInputArgsTable","JvmRuntime",mib,server);  if (tableJvmRTInputArgsTable != null) {    tableJvmRTInputArgsTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmRTInputArgsTable",tableJvmRTInputArgsTable);  }}  }
class C{  public static MersenneTwisterFast primeGenerator(MersenneTwisterFast generator){  for (int i=0; i < 624 * 2 + 1; i++)   generator.nextInt();  return generator;}  }
class C{  public ConfirmPanel(boolean withCancelButton,boolean withRefreshButton,boolean withResetButton,boolean withCustomizeButton,boolean withHistoryButton,boolean withZoomButton,boolean withText){  m_withText=withText;  init();  setVisible(A_CANCEL,withCancelButton);  if (withCancelButton)   addComponentsRight(createButton(A_CANCEL));  addComponentsRight(createButton(A_OK));  if (withRefreshButton) {    addComponentsLeft(createButton(A_REFRESH));  }  if (withResetButton) {    addComponentsLeft(createButton(A_RESET));  }  if (withCustomizeButton) {    addComponentsLeft(createButton(A_CUSTOMIZE));  }  if (withHistoryButton) {    addComponentsLeft(createButton(A_HISTORY));  }  if (withZoomButton) {    addComponentsLeft(createButton(A_ZOOM));  }}  }
class C{  public static String escapeForXML(String string){  if (string == null) {    return null;  }  char ch;  int i=0;  int last=0;  char[] input=string.toCharArray();  int len=input.length;  StringBuilder out=new StringBuilder((int)(len * 1.3));  for (; i < len; i++) {    ch=input[i];    if (ch > '>') {    } else     if (ch == '<') {      if (i > last) {        out.append(input,last,i - last);      }      last=i + 1;      out.append(LT_ENCODE);    } else     if (ch == '>') {      if (i > last) {        out.append(input,last,i - last);      }      last=i + 1;      out.append(GT_ENCODE);    } else     if (ch == '&') {      if (i > last) {        out.append(input,last,i - last);      }      if (!(len > i + 5 && input[i + 1] == '#' && Character.isDigit(input[i + 2]) && Character.isDigit(input[i + 3]) && Character.isDigit(input[i + 4]) && input[i + 5] == ';')) {        last=i + 1;        out.append(AMP_ENCODE);      }    } else     if (ch == '"') {      if (i > last) {        out.append(input,last,i - last);      }      last=i + 1;      out.append(QUOTE_ENCODE);    } else     if (ch == '\'') {      if (i > last) {        out.append(input,last,i - last);      }      last=i + 1;      out.append(APOS_ENCODE);    }  }  if (last == 0) {    return string;  }  if (i > last) {    out.append(input,last,i - last);  }  return out.toString();}  }
class C{  public AutoMixBucket createStaticBucket(String name,String[] styles,String[] moods,boolean taste,float adventurous,String[] songTypes,float speechiness,float energy,float familiar){  return new AutoMixBucket(name,styles,moods,taste,adventurous,songTypes,speechiness,energy,familiar);}  }
class C{  public void addChar(char ch){  ch=normalize(ch);  char lastchar=grams_.charAt(grams_.length() - 1);  if (lastchar == ' ') {    grams_=new StringBuffer(" ");    capitalword_=false;    if (ch == ' ')     return;  } else   if (grams_.length() >= N_GRAM) {    grams_.deleteCharAt(0);  }  grams_.append(ch);  if (Character.isUpperCase(ch)) {    if (Character.isUpperCase(lastchar))     capitalword_=true;  } else {    capitalword_=false;  }}  }
class C{  @Override protected boolean onDeactivate(){  boolean active=this.isActivated();  if (!active) {    return active;  }  StatusType statusType;  if ((resistances != null) && !resistances.isEmpty()) {    for (    Entry<StatusType,Double> entry : resistances.getMap().entrySet()) {      statusType=entry.getKey();      active=!adjustOwnerStatusResistance(statusType,false);      if (active) {        logger.warn("Failed removal of status resistance \"" + statusType.getName() + "\"");      }    }  } else {    logger.warn("Status resistance list is empty");  }  return active;}  }
class C{  public static void main(String[] args){  double freq=440.0;  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {    StdAudio.play(0.5 * Math.sin(2 * Math.PI * freq* i / StdAudio.SAMPLE_RATE));  }  int[] steps={0,2,4,5,7,9,11,12};  for (int i=0; i < steps.length; i++) {    double hz=440.0 * Math.pow(2,steps[i] / 12.0);    StdAudio.play(note(hz,1.0,0.5));  }  StdAudio.close();}  }
class C{  private WrapperInit(){}  }
class C{  public LocalResult createShallowCopy(Session targetSession){  if (external == null && (rows == null || rows.size() < rowCount)) {    return null;  }  if (containsLobs) {    return null;  }  ResultExternal e2=null;  if (external != null) {    e2=external.createShallowCopy();    if (e2 == null) {      return null;    }  }  LocalResult copy=new LocalResult();  copy.maxMemoryRows=this.maxMemoryRows;  copy.session=targetSession;  copy.visibleColumnCount=this.visibleColumnCount;  copy.expressions=this.expressions;  copy.rowId=-1;  copy.rowCount=this.rowCount;  copy.rows=this.rows;  copy.sort=this.sort;  copy.distinctRows=this.distinctRows;  copy.distinct=distinct;  copy.randomAccess=randomAccess;  copy.currentRow=null;  copy.offset=0;  copy.limit=-1;  copy.external=e2;  copy.diskOffset=this.diskOffset;  return copy;}  }
class C{  public void insertNextTurn(GameTurn turn){  turnVector.insertElementAt(turn,turnIndex + 1);}  }
class C{  public void open(File file,ExperimentFileHandler handler){  m_StatusBar.startBusy("Loading: " + file);  log(null,"Loading: " + file);  try {    m_Experiment=handler.read(file);    if (m_Experiment != null)     log(null,"Loaded successfully experiment: " + file); else     log(null,"Failed to load experiment: " + file);    notifyTabsExperimentChanged(null,m_Experiment);    if (m_RecentFilesHandler != null)     m_RecentFilesHandler.addRecentItem(new RecentFilesHandlerWithCommandline.Setup(file,handler));    m_CurrentFile=file;  } catch (  Exception e) {    handleException(null,"Failed to load experiment from '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to load experiment from '" + file + "':\n"+ e,"Error loading",JOptionPane.ERROR_MESSAGE);    return;  }  m_StatusBar.finishBusy("");  updateMenu();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double z;  int r, g, b;  int rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  int E=Integer.parseInt(args[2]);  if (E < 20) {    E=20;  }  if (E > 235) {    E=235;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    long numPixels=0;    int r_l=Integer.MAX_VALUE;    int r_h=Integer.MIN_VALUE;    long r_e=0;    long rSqrTotal=0;    int g_l=Integer.MAX_VALUE;    int g_h=Integer.MIN_VALUE;    long g_e=0;    long gSqrTotal=0;    int b_l=Integer.MAX_VALUE;    int b_h=Integer.MIN_VALUE;    long b_e=0;    long bSqrTotal=0;    int L=0;    int H=255;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          if (r < r_l) {            r_l=r;          }          if (r > r_h) {            r_h=r;          }          r_e+=r;          rSqrTotal+=r * r;          if (g < g_l) {            g_l=g;          }          if (g > g_h) {            g_h=g;          }          g_e+=g;          gSqrTotal+=g * g;          if (b < b_l) {            b_l=b;          }          if (b > b_h) {            b_h=b;          }          b_e+=b;          bSqrTotal+=b * b;        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    r_e=r_e / numPixels;    g_e=g_e / numPixels;    b_e=b_e / numPixels;    double r_s=(double)rSqrTotal / numPixels;    double g_s=(double)gSqrTotal / numPixels;    double b_s=(double)bSqrTotal / numPixels;    double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));    double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));    double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));    double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));    double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));    double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));    double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));    double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));    double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);          gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);          bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void push(char data[]) throws IOException {  if (data.length > 0) {    push(new CharArrayReader(data));  }}  }
class C{  public void sendPacket(byte[] packet,int repeats){  if (_tc == null) {    log.error("Send Packet Called without setting traffic controller");    return;  }  int reg=1;  DCCppMessage msg=DCCppMessage.makeWriteDCCPacketMainMsg(reg,packet.length,packet);  for (int i=0; i < repeats; i++) {    _tc.sendDCCppMessage(msg,null);  }}  }
class C{  public void showTuner(Tuner tuner){  clearTuner();  mDFTProcessor.clearBuffer();  mTuner=tuner;  if (mTuner != null) {    mTuner.getTunerController().addListener(this);    mTuner.addListener((Listener<ComplexBuffer>)mDFTProcessor);    mSpectrumPanel.setSampleSize(mTuner.getSampleSize());    frequencyChanged(new FrequencyChangeEvent(Event.NOTIFICATION_FREQUENCY_CHANGE,mTuner.getTunerController().getFrequency()));    frequencyChanged(new FrequencyChangeEvent(Event.NOTIFICATION_SAMPLE_RATE_CHANGE,mTuner.getTunerController().getSampleRate()));  }}  }
class C{  protected void addAtomicMove(int fromSquare,int toSquare,int colorToMove,int contents,PriorityMoveList moves){  if (contents == EMPTY) {    addMove(new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),getColorToMove(),contents),moves);  } else {    Move move=new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),getColorToMove(),contents);    move.setAtomicExplosionInfo(getAtomicExplosionInfo(toSquare,fromSquare,getPieceWithPromoteMask(fromSquare),getColorToMove()));    addMove(move,moves);  }}  }
class C{  static private StringBuilder replace(StringBuilder input,java.util.regex.Pattern pattern,String replacement){  java.util.regex.Matcher m=pattern.matcher(input);  while (m.find()) {    if (isEscapedChar(input.toString(),m.start())) {      continue;    }    input.replace(m.start(),m.end(),replacement);    m.reset(input);  }  return input;}  }
class C{  private void navigateCollection(Collection c,int segment) throws ODataException {  NavigationSegment nextSeg=navigationSegments.get(segment);  EdmEntitySet es=nextSeg.getEntitySet();  if (nextSeg.getKeyPredicates().isEmpty()) {    if (es.getName().equals(V1Model.COLLECTION.getName()))     this.result=c.getCollections(); else     if (es.getName().equals(V1Model.PRODUCT.getName()))     this.result=c.getProducts();  } else {    KeyPredicate kp=nextSeg.getKeyPredicates().get(0);    if (es.getName().equals(V1Model.COLLECTION.getName())) {      Collection cc=c.getCollections().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=cc; else       navigateCollection(cc,segment + 1);    } else     if (es.getName().equals(V1Model.PRODUCT.getName())) {      Product p=c.getProducts().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=p; else       navigateProduct(p,segment + 1);    } else {      throw new ODataException("Unexpected EntitySet for Segment(" + segment + ")");    }  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("buf",buf);  fields.put("len",len);  fields.put("origLen",origLen);  fields.put("blob",blob instanceof Serializable ? blob : null);  s.writeFields();}  }
class C{  @Override public void displayDataCycle(Cycle cycle){  dataCycle=cycle;  if (alreadyInitializedRecyclerList) {    populateRecyclerList();  }}  }
class C{  public final boolean isPostdated(){  return flags[POSTDATED_TICKET_FLAG];}  }
class C{  public IgniteSpiMultiException(String msg){  super(msg);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void testGetShort(){  byte[] bytes={6,0,0,1,-1,-1,-127,-1,0,-128,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(-1,array.getShort());  assertEquals(-127,array.getShort());  assertEquals(-32768,array.getShort());  assertEquals(32767,array.getShort());}  }
class C{  public boolean isAdjacentTo(Node node1,Node node2){  int i=nodesHash.get(node1);  int j=nodesHash.get(node2);  return graphMatrix[i][j] != 0;}  }
class C{  public static final GeoTimeSerie sort(GeoTimeSerie gts){  return sort(gts,false);}  }
class C{  @Override public String toString(){  return String.format("rgba(%f,%f,%f,%f)",red,green,blue,alpha);}  }
class C{  private static void createAndShowGUI(){  JFrame.setDefaultLookAndFeelDecorated(true);  EmulatorUI frame=new EmulatorUI();  frame.setVisible(true);}  }
class C{  public boolean isAvailable(){  return mBluetoothAdapter != null;}  }
class C{  public void readPopulation(final EvolutionState state,final LineNumberReader reader) throws IOException {  int numSubpops=Code.readIntegerWithPreamble(NUM_SUBPOPS_PREAMBLE,state,reader);  if (numSubpops != subpops.length)   state.output.fatal("On reading population from text stream, the number of subpopulations was wrong.");  for (int i=0; i < subpops.length; i++) {    int j=Code.readIntegerWithPreamble(SUBPOP_INDEX_PREAMBLE,state,reader);    if (j != i)     state.output.warnOnce("On reading population from text stream, some subpopulation indexes in the population did not match.");    subpops[i].readSubpopulation(state,reader);  }}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public boolean isSQLSummaryEnabled(){  return params.isSQLSummaryEnabled;}  }
class C{  public boolean start(){  if (isOptOut()) {    return false;  }  FMLCommonHandler.instance().bus().register(this);  return true;}  }
class C{  public Long zremrangeByRank(final String key,final long start,final long end){  checkIsInMulti();  client.zremrangeByRank(key,start,end);  return client.getIntegerReply();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Test suite(){  return (new TestSuite(LocaleITCase.class));}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((N4ClassifierDefinition)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static Boolean isZawgyiEncoded(String value){  Matcher matcher=ZAWGYI_DETECT_PATTERN.matcher(value);  return matcher.find();}  }
class C{  public void addAllProjects(Spec<String> include){  project.getRootProject().getAllprojects().forEach(null);}  }
class C{  public static KnowledgeType registerKnowledgeType(String id,TextFormatting color,boolean autoUnlock){  KnowledgeType type=new KnowledgeType(id,color,autoUnlock);  knowledgeTypes.put(id,type);  return type;}  }
class C{  public Boolean isMatchingRuleInChainEnabled(){  return matchingRuleInChainEnabled;}  }
class C{  public Timeout clearTimeout(){  this.timeoutNanos=0;  return this;}  }
class C{  protected CompilationUnit parseJavaFile(String unitName,String fileContents){  ASTParser parser=ASTParser.newParser(AST.JLS3);  parser.setKind(ASTParser.K_COMPILATION_UNIT);  parser.setResolveBindings(true);  parser.setBindingsRecovery(true);  parser.setUnitName(unitName);  @SuppressWarnings("unchecked") Hashtable<String,String> options=JavaCore.getDefaultOptions();  options.put(JavaCore.COMPILER_SOURCE,SOURCE_JAVA_VERSION);  parser.setCompilerOptions(options);  String[] encodings=createEncodings(ENCODING,sources.length);  parser.setEnvironment(classpath,sources,encodings,true);  parser.setSource(fileContents.toCharArray());  CompilationUnit compilationUnit=(CompilationUnit)parser.createAST(null);  Set<String> problems=new HashSet<String>();  for (  IProblem problem : compilationUnit.getProblems()) {    problems.add(problem.toString());  }  if (!problems.isEmpty()) {    logger.warn("Got {} problems compiling the source file: ",problems.size());    for (    String problem : problems) {      logger.warn("{}",problem);    }  }  return compilationUnit;}  }
class C{  public static void main(String[] args) throws Exception {  SpringApplication.run(CustomerApp.class,args);}  }
class C{  public static boolean deleteFile(final File file,final Logger logger){  return FileUtils.deleteFile(file,logger,1);}  }
class C{  public BatchUpdateException(Throwable cause){  this(null,cause);}  }
class C{  public StempelPolishStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private void renderProcessWall(ExecutionUnit process,Graphics2D g2){  double width=model.getProcessWidth(process);  double height=model.getProcessHeight(process);  Shape wall=new Rectangle2D.Double(width,-10,2 * WALL_WIDTH - 1,height + 20);  g2.setColor(Colors.WINDOW_BACKGROUND);  g2.fill(wall);  g2.setColor(Colors.TEXTFIELD_BORDER);  g2.draw(wall);}  }
class C{  public void asynchForceFlush(){  getDiskStore().asynchForceFlush();}  }
class C{  public Mat22(){  ex=new Vec2();  ey=new Vec2();}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.293 -0500",hash_original_method="9A59EFD62BA4B2B1BB27D9BF60C81F37",hash_generated_method="9A63345DB58A1324761EA6E89EC078E6") public boolean moveTaskToBack(boolean nonRoot){  try {    return ActivityManagerNative.getDefault().moveActivityTaskToBack(mToken,nonRoot);  } catch (  RemoteException e) {  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getRated();}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length - 1) {    if (random == null) {      in[inOff]=0;    } else {      in[inOff]=(byte)random.nextInt();    }    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  private String normalizeTypeValue(String type){  if (INSERT.equals(type))   return INSERT;  if (REMOVE.equals(type))   return REMOVE;  return null;}  }
class C{  public boolean isStartProcess(){  return m_OKpressed;}  }
class C{  @Override public byte readDataType(){  byte coreType=AMF3.TYPE_UNDEFINED;  if (buf != null) {    currentDataType=buf.get();    log.debug("Current data type: {}",currentDataType);    if (currentDataType == AMF.TYPE_AMF3_OBJECT) {      currentDataType=buf.get();    } else     if (amf3_mode == 0) {      return readDataType(currentDataType);    }    log.debug("Current data type (after amf checks): {}",currentDataType);switch (currentDataType) {case AMF3.TYPE_UNDEFINED:case AMF3.TYPE_NULL:      coreType=DataTypes.CORE_NULL;    break;case AMF3.TYPE_INTEGER:case AMF3.TYPE_NUMBER:  coreType=DataTypes.CORE_NUMBER;break;case AMF3.TYPE_BOOLEAN_TRUE:case AMF3.TYPE_BOOLEAN_FALSE:coreType=DataTypes.CORE_BOOLEAN;break;case AMF3.TYPE_STRING:coreType=DataTypes.CORE_STRING;break;case AMF3.TYPE_XML:case AMF3.TYPE_XML_DOCUMENT:coreType=DataTypes.CORE_XML;break;case AMF3.TYPE_OBJECT:coreType=DataTypes.CORE_OBJECT;break;case AMF3.TYPE_ARRAY:coreType=DataTypes.CORE_ARRAY;break;case AMF3.TYPE_DATE:coreType=DataTypes.CORE_DATE;break;case AMF3.TYPE_BYTEARRAY:coreType=DataTypes.CORE_BYTEARRAY;break;case AMF3.TYPE_VECTOR_INT:coreType=DataTypes.CORE_VECTOR_INT;break;case AMF3.TYPE_VECTOR_UINT:coreType=DataTypes.CORE_VECTOR_UINT;break;case AMF3.TYPE_VECTOR_NUMBER:coreType=DataTypes.CORE_VECTOR_NUMBER;break;case AMF3.TYPE_VECTOR_OBJECT:coreType=DataTypes.CORE_VECTOR_OBJECT;break;default :log.info("Unknown datatype: {}",currentDataType);coreType=DataTypes.CORE_SKIP;break;}log.debug("Core type: {}",coreType);} else {log.error("Why is buf null?");}return coreType;}  }
class C{  public void execute(){  Context.openSession();  log.debug("Running xforms queue task... ");  try {    if (Context.isAuthenticated() == false)     authenticate();    processor.processXformsQueue();  } catch (  APIException e) {    log.error("Error running xforms queue task",e);    throw e;  } finally {    Context.closeSession();  }}  }
class C{  public T caseStatus(Status object){  return null;}  }
class C{  @Override protected void internalClear(){  this.removeAllElements(true);}  }
class C{  private void markToUseMavenDependencies(IProjectFacet facet,IFacetedProjectWorkingCopy workingCopy){  IDataModel model=(IDataModel)workingCopy.getProjectFacetAction(facet).getConfig();  GwtFacetInstallDataModelProvider.setMavenProject(model,true);  workingCopy.setProjectFacetActionConfig(facet,model);}  }
class C{  public GitHubPullRequestList createPullRequestsList(GHPullRequest ghPullRequest) throws IOException {  GitHubPullRequestList gitHubPullRequestList=DtoFactory.getInstance().createDto(GitHubPullRequestList.class);  List<GitHubPullRequest> dtoPullRequestsList=new ArrayList<>();  dtoPullRequestsList.add(createPullRequest(ghPullRequest));  gitHubPullRequestList.setPullRequests(dtoPullRequestsList);  return gitHubPullRequestList;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PieLabelRecord)) {    return false;  }  PieLabelRecord that=(PieLabelRecord)obj;  if (!this.key.equals(that.key)) {    return false;  }  if (this.angle != that.angle) {    return false;  }  if (this.gap != that.gap) {    return false;  }  if (this.allocatedY != that.allocatedY) {    return false;  }  if (this.baseY != that.baseY) {    return false;  }  if (this.labelHeight != that.labelHeight) {    return false;  }  if (this.linkPercent != that.linkPercent) {    return false;  }  if (!this.label.equals(that.label)) {    return false;  }  return true;}  }
class C{  @Override public void operate(Population population){  List<List<Individual>> ranks=new ArrayList<List<Individual>>();  while (population.getNumberOfIndividuals() > 0) {    List<Individual> rank=getNextRank(population);    ranks.add(rank);    Iterator<Individual> i=rank.iterator();    while (i.hasNext()) {      population.remove(i.next());    }  }  population.clear();  int index=0;  while ((index < ranks.size()) && ((population.getNumberOfIndividuals() + ranks.get(index).size()) <= popSize)) {    population.addAll(ranks.get(index));    index++;  }  if (population.getNumberOfIndividuals() < popSize) {    List<Individual> rank=ranks.get(index);    sortByCrowdingDistance(rank);    while (population.getNumberOfIndividuals() < popSize) {      population.add(rank.remove(0));    }  }}  }
class C{  public void parseAllRowsAndPrintSome() throws FormatException {  int row_id_column=whatColumn(ID_COLUMN_NAME);  String vectorString=null;  int rowcount=0;  for (List<Object> l=new ArrayList<Object>(getColumnCount()); parseRow(l); ) {    int cnt=((Number)(l.get(row_id_column))).intValue();    if (cnt != ++rowcount) {      System.out.println("Non-consecutive row number.  Expected " + rowcount + " got "+ cnt);    }    vectorString=VPFUtil.listToString(l);    if ((rowcount < 20) || (rowcount % 100 == 0)) {      System.out.println(vectorString);    }  }  if (rowcount > 20)   System.out.println(vectorString);}  }
class C{  public boolean isColumnVector(){  return columns == 1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testCompare22To23() throws Exception {  assertTrue(WebXmlVersion.V2_2.compareTo(WebXmlVersion.V2_3) < 0);}  }
class C{  public boolean removeDataSet(T d){  if (d == null)   return false;  boolean removed=mDataSets.remove(d);  if (removed) {    mYValCount-=d.getEntryCount();    mYValueSum-=d.getYValueSum();    calcMinMax(mDataSets);  }  return removed;}  }
class C{  private List<Item> generateItemList(){  List<Item> itemList=new LinkedList<Item>();  Map<String,Integer> items=shops.get(shopName);  for (  Map.Entry<String,Integer> entry : items.entrySet()) {    itemList.add(prepareItem(entry.getKey(),entry.getValue()));  }  return itemList;}  }
class C{  public String validateEmail(String code){  try {    RequestData rd=new RequestData(null,null,code,null,null,null,null,null,null);    if (!stub.requestAccount(rd))     return "The activation code is not correct! Please make sure" + "The code is the same as the one in the email you " + "received!";    return "";  } catch (  Exception ex) {    return checkException(ex);  }}  }
class C{  public void put(int key,int value){  if (key == 0) {    zeroKey=true;    zeroValue=value;    return;  }  checkSizePut();  internalPut(key,value);}  }
class C{  public static boolean isStatusInformational(int status){  return (status >= 100 && status < 200);}  }
class C{  public strike removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  final public int compareTo(final MutableString s){  final int l1=length();  final int l2=s.length();  final int n=l1 < l2 ? l1 : l2;  final char[] a1=array;  final char[] a2=s.array;  for (int i=0; i < n; i++)   if (a1[i] != a2[i])   return a1[i] - a2[i];  return l1 - l2;}  }
class C{  private void revalidateAxisExtrema(){synchronized (this) {    for (    Entry<DataSource,Map<Integer,String>> entryByDataSource : columnToAxisMappingByDataSource.entrySet()) {      DataSource dataSource=entryByDataSource.getKey();      Map<Integer,String> columnToAxisMapping=entryByDataSource.getValue();      for (      Entry<Integer,String> entry : columnToAxisMapping.entrySet()) {        Integer colIndex=entry.getKey();        String axisName=entry.getValue();        Column<?> col=dataSource.getColumn(colIndex);        Double min=axisMin.get(axisName);        Double max=axisMax.get(axisName);        if (min == null || max == null) {          min=col.getStatistics(Statistics.MIN);          max=col.getStatistics(Statistics.MAX);        } else {          min=Math.min(min,col.getStatistics(Statistics.MIN));          max=Math.max(max,col.getStatistics(Statistics.MAX));        }        axisMin.put(axisName,min);        axisMax.put(axisName,max);      }    }  }}  }
class C{  public static BigDecimal calculatePercent(final BigDecimal percent,final BigDecimal value){  return percent.multiply(value).divide(BD_100,PriceConverter.NORMALIZED_PRICE_SCALING,PriceConverter.ROUNDING_MODE);}  }
class C{  public int size(){  return _pos;}  }
class C{  public FPSTextureView addChildAt(int location,@NonNull DisplayBase displayBase){  displayBase.setUp(mFps);  mDisplayList.add(location,displayBase);  return this;}  }
class C{  public BooleanGlassFunction(LagGraph lagGraph){  this(lagGraph,Double.NEGATIVE_INFINITY,0.0);}  }
class C{  public boolean isDeclaredStaticPolyfill(){  return declaredStaticPolyfill;}  }
class C{  public void test_setDoubleLjava_lang_ObjectD() throws Exception {  TestField x=new TestField();  Field f=null;  double val=0.0;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setDouble(x,Double.MIN_VALUE);    val=f.getDouble(x);  } catch (  Exception e) {    fail("Exception during setDouble test: " + e.toString());  }  assertEquals("Returned incorrect double field value",Double.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setDouble(x,Double.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doublePFField");    assertFalse(f.isAccessible());    f.setDouble(x,Double.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setDouble(null,Double.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("doubleSField");  f.setDouble(null,Double.MIN_VALUE);  val=f.getDouble(x);  assertEquals("Returned incorrect double field value",Double.MIN_VALUE,val);}  }
class C{  protected String resolveHref(){  String href=this.parent.getIcon().getHref();  String localAddress=null;  try {    localAddress=this.parent.getRoot().getSupportFilePath(href);  } catch (  IOException e) {    String message=Logging.getMessage("generic.UnableToResolveReference",href);    Logging.logger().warning(message);  }  return localAddress != null ? localAddress : href;}  }
class C{  public VPlexVirtualVolumeInfo createVirtualVolume(List<VolumeInfo> nativeVolumeInfoList,boolean isDistributed,boolean discoveryRequired,boolean preserveData,String winningClusterId,List<VPlexClusterInfo> clusterInfoList,boolean findVirtualVolume,boolean thinEnabled) throws VPlexApiException {  s_logger.info("Request for virtual volume creation on VPlex at {}",_baseURI);  return _virtualVolumeMgr.createVirtualVolume(nativeVolumeInfoList,isDistributed,discoveryRequired,preserveData,winningClusterId,clusterInfoList,findVirtualVolume,thinEnabled);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof Depend))   return false;  Depend depend=(Depend)obj;  return _source.equals(depend._source);}  }
class C{  public <V>StrSubstitutor(final Map<String,V> valueMap,final String prefix,final String suffix){  this(StrLookup.mapLookup(valueMap),prefix,suffix,DEFAULT_ESCAPE);}  }
class C{  public boolean isDayExcluded(java.util.Calendar day){  if (day == null) {    throw new IllegalArgumentException("Parameter day must not be null");  }  if (!super.isTimeIncluded(day.getTime().getTime())) {    return true;  }  int dmonth=day.get(java.util.Calendar.MONTH);  int dday=day.get(java.util.Calendar.DAY_OF_MONTH);  if (dataSorted == false) {    Collections.sort(excludeDays,new CalendarComparator());    dataSorted=true;  }  Iterator<java.util.Calendar> iter=excludeDays.iterator();  while (iter.hasNext()) {    java.util.Calendar cl=(java.util.Calendar)iter.next();    if (dmonth < cl.get(java.util.Calendar.MONTH)) {      return false;    }    if (dday != cl.get(java.util.Calendar.DAY_OF_MONTH)) {      continue;    }    if (dmonth != cl.get(java.util.Calendar.MONTH)) {      continue;    }    return true;  }  return false;}  }
class C{  public SayTimeRemainingUntilTimeReachedAction(final String questname,final String message){  this.questname=checkNotNull(questname);  this.index=-1;  this.message=checkNotNull(message);}  }
class C{  @Override public void process(){  CompiledMethod cmpMethod=getCompiledMethod();  Controller.recompilationStrategy.considerHotCallEdge(cmpMethod,this);}  }
class C{  @Override public void generateRss(XmlWriter w,String elementName,RssFormat rssFormat) throws IOException {  w.simpleElement(Namespaces.rssNs,elementName,null,text);}  }
class C{  private ByteBuffer readFullBuffer(final int size) throws IOException {  final ByteBuffer buffer=ByteBuffer.wrap(new byte[size]);  if (mpqDataInput.read(buffer) < size)   throw new IOException("Unexpected end of file, tried to read " + size + " bytes but EOF reached!");  buffer.position(0);  return buffer.order(ByteOrder.LITTLE_ENDIAN);}  }
class C{  public boolean terminatedEarly(){  return this.terminatedEarly;}  }
class C{  public void fillInNotifierBundle(Bundle m){  m.putInt("voiceRegState",mVoiceRegState);  m.putInt("dataRegState",mDataRegState);  m.putBoolean("roaming",Boolean.valueOf(mRoaming));  m.putString("operator-alpha-long",mOperatorAlphaLong);  m.putString("operator-alpha-short",mOperatorAlphaShort);  m.putString("operator-numeric",mOperatorNumeric);  m.putBoolean("manual",Boolean.valueOf(mIsManualNetworkSelection));  m.putInt("radioTechnology",mRilVoiceRadioTechnology);  m.putInt("dataRadioTechnology",mRilDataRadioTechnology);  m.putBoolean("cssIndicator",mCssIndicator);  m.putInt("networkId",mNetworkId);  m.putInt("systemId",mSystemId);  m.putInt("cdmaRoamingIndicator",mCdmaRoamingIndicator);  m.putInt("cdmaDefaultRoamingIndicator",mCdmaDefaultRoamingIndicator);  m.putBoolean("emergencyOnly",Boolean.valueOf(mIsEmergencyOnly));}  }
class C{  public static void start(Context context){  Intent intent=new Intent(context,EspPushService.class);  context.startService(intent);}  }
class C{  @Override void onException(final Exception e){}  }
class C{  protected void addHelpMenu(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.629 -0500",hash_original_method="6E81366EB3EC21A5D57BD56704F05E83",hash_generated_method="6E81366EB3EC21A5D57BD56704F05E83") void flushCookieStore(){  if (JniUtil.useChromiumHttpStack()) {    nativeFlushCookieStore();  }}  }
class C{  public Boolean isNetworkResourcePoolOverrideAllowed(){  return networkResourcePoolOverrideAllowed;}  }
class C{  public boolean addTokens(Collection<? extends Object> tokens){  boolean added=false;  for (  Object token : tokens) {    add(token.toString());    added=true;  }  return added;}  }
class C{  public static void logReadTaskOutOfMemoryError(final Logger logger,final Task<Revision> task,final OutOfMemoryError e){  if (task != null) {    logger.logError(Level.WARNING,"Error while reading a task: " + task.toString(),e);  } else {    logger.logError(Level.WARNING,"Error while reading an unknown task",e);  }}  }
class C{  public WebSphere85xExistingLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(WebSpherePropertySet.PROFILE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.NODE,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.CELL,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.SERVER,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.ADMIN_USERNAME,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.ADMIN_PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(WebSpherePropertySet.OVERWRITE_EXISTING_CONFIGURATION,Boolean.TRUE);}  }
class C{  public StatisticsType[] read(Reader reader,StatisticsTypeFactory statFactory){  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder parser=null;  try {    parser=factory.newDocumentBuilder();  } catch (  ParserConfigurationException ex) {    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(),ex);  }  parser.setErrorHandler(this);  parser.setEntityResolver(this);  Document doc;  try {    doc=parser.parse(new InputSource(reader));  } catch (  SAXException se) {    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(),se);  }catch (  IOException io) {    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA.toLocalizedString(),io);  }  if (doc == null) {    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_DOCUMENT.toLocalizedString());  }  Element root=doc.getDocumentElement();  if (root == null) {    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_ROOT_ELEMENT.toLocalizedString());  }  return extractStatistics(root,statFactory);}  }
class C{  public T caseUnitName(UnitName object){  return null;}  }
class C{  @Override public void adjustStartingPosForReinforcements(){  if (startingPos > 10) {    startingPos-=10;  }  if (startingPos == Board.START_CENTER) {    startingPos=Board.START_ANY;  }}  }
class C{  private static void copy(cudaExtent extentFloats,Pointer hostInputPointer,Pointer hostOutputPointer){  cudaPitchedPtr deviceData=new cudaPitchedPtr();  cudaMalloc3D(deviceData,extentFloats);  cudaMemcpy3DParms htod=new cudaMemcpy3DParms();  htod.srcPtr=new cudaPitchedPtr();  htod.srcPtr.ptr=hostInputPointer;  htod.srcPtr.pitch=extentFloats.width * Sizeof.FLOAT;  htod.srcPtr.xsize=extentFloats.width;  htod.srcPtr.ysize=extentFloats.height;  htod.dstPtr=deviceData;  htod.extent.width=extentFloats.width * Sizeof.FLOAT;  htod.extent.height=extentFloats.height;  htod.extent.depth=extentFloats.depth;  htod.kind=cudaMemcpyHostToDevice;  cudaMemcpy3D(htod);  cudaMemcpy3DParms dtoh=new cudaMemcpy3DParms();  dtoh.srcPtr=deviceData;  dtoh.dstPtr=new cudaPitchedPtr();  dtoh.dstPtr.ptr=hostOutputPointer;  dtoh.dstPtr.pitch=extentFloats.width * Sizeof.FLOAT;  dtoh.dstPtr.xsize=extentFloats.width;  dtoh.dstPtr.ysize=extentFloats.height;  htod.extent.width=extentFloats.width * Sizeof.FLOAT;  dtoh.extent.height=extentFloats.height;  dtoh.extent.depth=extentFloats.depth;  dtoh.kind=cudaMemcpyDeviceToHost;  cudaMemcpy3D(dtoh);  cudaFree(deviceData.ptr);}  }
class C{  private void initArguments(){  Bundle args=getArguments();  if (args != null) {    mArgAskFirst=args.getBoolean(ARG_ASK_FIRST,ARG_ASK_FIRST_DEFAULT);    mArgDontAskAgainPref=args.getString(ARG_DONT_ASK_AGAIN_PREF,ARG_DONT_ASK_AGAIN_PREF_DEFAULT);  }}  }
class C{  public static String formatDate(final long timestamp){  final Calendar now=Calendar.getInstance();  final Date date=new Date(timestamp);  final Calendar cal=Calendar.getInstance();  cal.setTime(date);  final SimpleDateFormat dateFormat=getFormatForTimestamp(now,cal);  return dateFormat.format(date);}  }
class C{  public View create(Element elem){  if (textArea.getLineWrap())   return new WrappedPlainView(elem,textArea.getWrapStyleWord()); else   return new PlainView(elem);}  }
class C{  @Override public float tf(float freq){  return (float)Math.sqrt(freq);}  }
class C{  public String cmdline() throws IOException {  return read("cmdline");}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static ScannerFactory instance(Context context){  ScannerFactory instance=context.get(scannerFactoryKey);  if (instance == null)   instance=new ScannerFactory(context);  return instance;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return VALUES;case 3:return ERROR;default :return null;}}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public T casePrimitivePropertyType(PrimitivePropertyType object){  return null;}  }
class C{  public static void main(String[] args){  if (args == null || args.length == 0) {    log.info("run analysis from code");    TtRunBraessAnalysisAfterSimulation.runFromCode();  } else {    log.info("run analysis from args");    TtRunBraessAnalysisAfterSimulation.runFromArgs(args);  }}  }
class C{  public char previous(){  if (offset == start) {    return DONE;  }  return string.charAt(--offset);}  }
class C{  public void writeToDisk(){synchronized (m_mutex) {    try (FileOutputStream fout=new FileOutputStream(m_file,false);ObjectOutputStream out=new ObjectOutputStream(fout)){      out.writeObject(m_map);    } catch (    final IOException e) {    }  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public void warn(String format,Object arg){  if (logger.isLoggable(Level.WARNING)) {    FormattingTuple ft=MessageFormatter.format(format,arg);    log(SELF,Level.WARNING,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public static int string2int(String s,int radix) throws NumberFormatException {  if (radix == 10) {    return Integer.parseInt(s,radix);  } else {    char[] cs=s.toCharArray();    int limit=Integer.MAX_VALUE / (radix / 2);    int n=0;    for (int i=0; i < cs.length; i++) {      int d=Character.digit(cs[i],radix);      if (n < 0 || n > limit || n * radix > Integer.MAX_VALUE - d)       throw new NumberFormatException();      n=n * radix + d;    }    return n;  }}  }
class C{  void addAttachments(final Mail mail,final Map<String,byte[]> attachments) throws MessagingException, IOException {  if (MapUtils.isNotEmpty(attachments)) {    for (    final Map.Entry<String,byte[]> attach : attachments.entrySet()) {      final Pair<String,String> contentTypeAndFile=convertAttachmentKeyIntoContentTypeAndFilename(attach.getKey());      if (contentTypeAndFile != null) {        final MailPart part=mail.addPart();        part.setFilename(contentTypeAndFile.getSecond());        part.setResourceId(attach.getKey());        part.setData(attach.getValue());      }    }  }}  }
class C{  public TableBuilderKelp columnIdentity(String name){  _rowBuilder.identityCol(name);  return this;}  }
class C{  public static ItemStack createBook(int amount,String name,String author){  ItemStack item=new ItemStackBuilder().amount(amount).build();  BookMeta meta=(BookMeta)item.getItemMeta();  meta.setAuthor(author);  meta.setPages(Lists.newArrayList());  item.setItemMeta(meta);  return item;}  }
class C{  private void initDropDowns(){  setupDropdownDataExcluding();  addDropdownData(CollectionConstants.DROPDOWN_DATA_COUNTER_LIST,collectionsUtil.getAllCounters());  addDropdownData(CollectionConstants.DROPDOWN_DATA_RECEIPT_CREATOR_LIST,collectionsUtil.getReceiptCreators());  addDropdownData(CollectionConstants.DROPDOWN_DATA_RECEIPTZONE_LIST,collectionsUtil.getReceiptZoneList());}  }
class C{  public double dot(double[] that){  double sum=0.0;  for (  int i : st.keys())   sum+=that[i] * this.get(i);  return sum;}  }
class C{  public static Vec4 computeAveragePoint(Iterable<? extends Vec4> points){  if (points == null) {    throw new IllegalArgumentException("Point List Is Null");  }  int count=0;  double x=0d;  double y=0d;  double z=0d;  double w=0d;  for (  Vec4 vec : points) {    if (vec == null)     continue;    count++;    x+=vec.x;    y+=vec.y;    z+=vec.z;    w+=vec.w;  }  if (count == 0)   return null;  return new Vec4(x / (double)count,y / (double)count,z / (double)count,w / (double)count);}  }
class C{  public Stack propagate_items(){  return _propagate_items;}  }
class C{  protected boolean columnIsDynamic(Object o){  if (o.equals(fIsSOTrx)) {    return true;  }  return false;}  }
class C{  public boolean isValueless(){  return valueless_;}  }
class C{  public static void assumeFalse(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {  if (assumptionSupplier.getAsBoolean()) {    throwTestAbortedException(messageSupplier.get());  }}  }
class C{  private JFreeChart createChart(StrategyData strategyData,String title,Tradingday tradingday){  DateAxis dateAxis=new DateAxis("Date");  dateAxis.setVerticalTickLabels(true);  dateAxis.setDateFormatOverride(new SimpleDateFormat("dd/MM hh:mm"));  dateAxis.setTickMarkPosition(DateTickMarkPosition.START);  NumberAxis priceAxis=new NumberAxis("Price");  priceAxis.setAutoRange(true);  priceAxis.setAutoRangeIncludesZero(false);  XYPlot pricePlot=new XYPlot(strategyData.getCandleDataset(),dateAxis,priceAxis,strategyData.getCandleDataset().getRenderer());  pricePlot.setOrientation(PlotOrientation.VERTICAL);  pricePlot.setDomainPannable(true);  pricePlot.setRangePannable(true);  pricePlot.setDomainCrosshairVisible(true);  pricePlot.setDomainCrosshairLockedOnData(true);  pricePlot.setRangeCrosshairVisible(true);  pricePlot.setRangeCrosshairLockedOnData(true);  pricePlot.setRangeGridlinePaint(new Color(204,204,204));  pricePlot.setDomainGridlinePaint(new Color(204,204,204));  pricePlot.setBackgroundPaint(Color.white);  int segments15min=(int)(TradingCalendar.getDurationInSeconds(tradingday.getOpen(),tradingday.getClose()) / (60 * 15));  SegmentedTimeline segmentedTimeline=new SegmentedTimeline(SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE,segments15min,(96 - segments15min));  ZonedDateTime startDate=tradingday.getOpen();  ZonedDateTime endDate=tradingday.getClose();  if (!strategyData.getCandleDataset().getSeries(0).isEmpty()) {    startDate=((CandleItem)strategyData.getCandleDataset().getSeries(0).getDataItem(0)).getPeriod().getStart();    startDate=TradingCalendar.getDateAtTime(startDate,tradingday.getOpen());    endDate=((CandleItem)strategyData.getCandleDataset().getSeries(0).getDataItem(strategyData.getCandleDataset().getSeries(0).getItemCount() - 1)).getPeriod().getStart();    endDate=TradingCalendar.getDateAtTime(endDate,tradingday.getClose());  }  segmentedTimeline.setStartTime(TradingCalendar.geMillisFromZonedDateTime(startDate));  segmentedTimeline.addExceptions(getNonTradingPeriods(startDate,endDate,tradingday.getOpen(),tradingday.getClose(),segmentedTimeline));  dateAxis.setTimeline(segmentedTimeline);  CombinedDomainXYPlot mainPlot=new CombinedDomainXYPlot(dateAxis);  mainPlot.add(pricePlot,4);  int axixIndex=0;  int datasetIndex=0;  List<IndicatorDataset> indicators=new ArrayList<IndicatorDataset>(0);  for (  IndicatorDataset item : strategyData.getIndicators()) {    if (IndicatorSeries.CandleSeries.equals(item.getType(0))) {      indicators.add(item);    }  }  for (  IndicatorDataset item : strategyData.getIndicators()) {    if (!IndicatorSeries.CandleSeries.equals(item.getType(0))) {      indicators.add(item);    }  }  for (int i=0; i < indicators.size(); i++) {    IndicatorDataset indicator=indicators.get(i);    if (indicator.getDisplaySeries(0)) {      if (indicator.getSubChart(0)) {        String axisName="Price";        if (IndicatorSeries.CandleSeries.equals(indicator.getType(0))) {          axisName=((CandleSeries)indicator.getSeries(0)).getSymbol();        } else {          org.trade.dictionary.valuetype.IndicatorSeries code=org.trade.dictionary.valuetype.IndicatorSeries.newInstance(indicator.getType(0));          axisName=code.getDisplayName();        }        NumberAxis subPlotAxis=new NumberAxis(axisName);        subPlotAxis.setAutoRange(true);        subPlotAxis.setAutoRangeIncludesZero(false);        XYPlot subPlot=new XYPlot((XYDataset)indicator,dateAxis,subPlotAxis,indicator.getRenderer());        subPlot.setOrientation(PlotOrientation.VERTICAL);        subPlot.setDomainPannable(true);        subPlot.setRangePannable(true);        subPlot.setDomainCrosshairVisible(true);        subPlot.setDomainCrosshairLockedOnData(true);        subPlot.setRangeCrosshairVisible(true);        subPlot.setRangeCrosshairLockedOnData(true);        subPlot.setRangeGridlinePaint(new Color(204,204,204));        subPlot.setDomainGridlinePaint(new Color(204,204,204));        subPlot.setBackgroundPaint(Color.white);        XYItemRenderer renderer=subPlot.getRendererForDataset((XYDataset)indicator);        for (int seriesIndex=0; seriesIndex < ((XYDataset)indicator).getSeriesCount(); seriesIndex++) {          renderer.setSeriesPaint(seriesIndex,indicator.getSeriesColor(seriesIndex));        }        mainPlot.add(subPlot,1);      } else {        datasetIndex++;        pricePlot.setDataset(datasetIndex,(XYDataset)indicator);        if (IndicatorSeries.CandleSeries.equals(indicator.getType(0))) {          axixIndex++;          final NumberAxis axis2=new NumberAxis(((CandleSeries)indicator.getSeries(0)).getSymbol());          axis2.setAutoRange(true);          axis2.setAutoRangeIncludesZero(false);          pricePlot.setRangeAxis(datasetIndex,axis2);          pricePlot.setRangeAxisLocation(i + 1,AxisLocation.BOTTOM_OR_RIGHT);          pricePlot.mapDatasetToRangeAxis(datasetIndex,axixIndex);          pricePlot.setRenderer(datasetIndex,new StandardXYItemRenderer());        } else {          pricePlot.setRenderer(datasetIndex,indicator.getRenderer());        }        XYItemRenderer renderer=pricePlot.getRendererForDataset((XYDataset)indicator);        for (int seriesIndex=0; seriesIndex < ((XYDataset)indicator).getSeriesCount(); seriesIndex++) {          renderer.setSeriesPaint(seriesIndex,indicator.getSeriesColor(seriesIndex));        }      }    }  }  JFreeChart jfreechart=new JFreeChart(title,null,mainPlot,true);  jfreechart.setAntiAlias(false);  return jfreechart;}  }
class C{  private boolean isElementHasParentWithLang(Element el){  return CollectionUtils.containsAny(el.parents(),elementWithLang.get());}  }
class C{  @SuppressWarnings("sync-override") @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public Long saveOrUpdateOrganisation(String SID,Object regObjectObj){  try {    Long users_id=sessionManagement.checkSession(SID);    long user_level=userManagement.getUserLevelByID(users_id);    @SuppressWarnings("rawtypes") LinkedHashMap<?,?> argObjectMap=(LinkedHashMap)regObjectObj;    long organisation_id=Long.valueOf(argObjectMap.get("organisation_id").toString()).longValue();    if (organisation_id == 0) {      return organisationmanagement.addOrganisation(user_level,argObjectMap.get("orgname").toString(),users_id);    } else {      return organisationmanagement.updateOrganisation(user_level,organisation_id,argObjectMap.get("orgname").toString(),users_id);    }  } catch (  Exception err) {    log.error("saveOrUpdateOrganisation",err);  }  return null;}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  private void createTargetsAlphabetical(final int amount){  char character='a';  for (int index=0; index < amount; index++) {    final String str=String.valueOf(character);    final Target target=entityFactory.generateTarget(str);    target.setName(str);    target.setDescription(str);    targetManagement.createTarget(target);    controllerManagament.updateLastTargetQuery(str,null);    character++;  }}  }
class C{  protected void sendTestMessage(EasyDccMessage m,EasyDccListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public static void createZip(Path zipFile,Path toBeAdded,String internalPath){  Map<String,String> env=new HashMap<>();  try {    env.put("create",String.valueOf(!Files.exists(zipFile)));    URI fileUri=zipFile.toUri();    URI zipUri=new URI("jar:" + fileUri.getScheme(),fileUri.getPath(),null);    try (FileSystem zipfs=FileSystems.newFileSystem(zipUri,env)){      Path internalTargetPath=zipfs.getPath(internalPath);      if (!Files.exists(internalTargetPath.getParent())) {        Files.createDirectory(internalTargetPath.getParent());      }      Files.copy(toBeAdded,internalTargetPath,StandardCopyOption.REPLACE_EXISTING);    }   } catch (  Exception e) {    LOGGER.error("Failed to create zip file!" + e.getMessage());  }}  }
class C{  @Override public void execute(Iterator<String> contactsIter){  int totalContactsDeleted=deleteAllContacts(contactsIter);  Utils.showToast(mOps.getActivityContext(),totalContactsDeleted + " contact(s) deleted");}  }
class C{  public final boolean isMemberHeapCritical(final InternalDistributedMember member){  if (member.equals(this.cache.getMyId())) {    return this.mostRecentEvent.getState().isCritical();  }  return this.resourceAdvisor.isHeapCritical(member);}  }
class C{  @Override public boolean load(Element sharedTransits,Element perNodeTransits){  loadTransits(sharedTransits,perNodeTransits);  return true;}  }
class C{  public static double logpdf(double x,double k,double theta,double shift){  if (x <= shift || x == Double.POSITIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  x=(x - shift) * theta;  double ex=Math.exp(x);  return ex < Double.POSITIVE_INFINITY ? k * x - ex - GammaDistribution.logGamma(k) + Math.log(theta) : Double.NEGATIVE_INFINITY;}  }
class C{  public T caseInitModules(InitModules object){  return null;}  }
class C{  public void newPane(String name,Element pane,Element modelElem,RosterEntry r){  if (log.isDebugEnabled()) {    log.debug("newPane " + name);  }  PaneProgPane p=new PaneProgPane(container,name,pane,cvModel,iCvModel,variableModel,modelElem,r);  paneList.add(p);}  }
class C{  public IllegalClassFormatException(String s){  super(s);}  }
class C{  private static void ReleaseCharArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseCharArrayElements \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    char[] sourceArray=(char[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if ((releaseMode == 0 || releaseMode == 1) && size != 0) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_CHAR);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private static void testProducer(CharProducer p,String golden,StreamState... positions){  List<Pair<String,FilePosition>> actualPositions=new ArrayList<Pair<String,FilePosition>>();  StringBuilder sb=new StringBuilder();  char[] buf=p.getBuffer();  for (int k=p.getOffset(); ; p.consume(1)) {    int offset=p.getOffset();    if (k < positions.length && sb.length() == positions[k].charsRead) {      FilePosition pos=p.getSourceBreaks(offset).toFilePosition(p.getCharInFile(offset));      actualPositions.add(Pair.pair(sb.toString(),pos));      ++k;    }    if (offset != p.getLimit()) {      sb.append(buf[p.getOffset()]);    } else {      break;    }  }  String actual=sb.toString();  assertEquals("golden:[" + escape(golden) + "]\nactual:["+ escape(actual)+ "]",golden,actual);  for (int k=0; k < Math.min(positions.length,actualPositions.size()); ++k) {    Pair<String,FilePosition> actualPos=actualPositions.get(k);    String posStr=actualPos.b.toString();    assertEquals("Read so far [" + actualPos.a + "] : ["+ golden.substring(0,Math.min(actualPos.a.length(),golden.length()))+ "]",positions[k].pos,posStr);  }  assertEquals(positions.length,actualPositions.size());}  }
class C{  public T defer(String value){  return attr("defer",value);}  }
class C{  public void circle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public RadialTreeLayout(String group,int radius){  this(group);  m_radiusInc=radius;  m_autoScale=false;}  }
class C{  public Header(int id){  init();  setID(id);}  }
class C{  public void testGetVersionWithoutDoctype() throws Exception {  String xml="<web-app></web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertNull(webXml.getVersion());}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  synchronized public static void removeAdvisoryLock(File file) throws IOException {  final File lockFile=new File(file + ".lock");  if (!lockFile.exists())   return;  if (!isOurLockFile(lockFile)) {    throw new IOException("Not our lock file: " + lockFile.getAbsolutePath());  }  if (!lockFile.delete()) {    throw new IOException("Could not delete lock file: " + lockFile.getAbsolutePath());  }}  }
class C{  protected BooleanQuery.Builder newBooleanQuery(){  return new BooleanQuery.Builder();}  }
class C{  public VNXeCommandJob detachLunGroupSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_DETACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  public void removeUser(String username) throws UsersRepositoryException {  try {    final Session session=login();    try {      final String name=toSafeName(username);      final String path=USERS_PATH + "/" + name;      try {        session.getRootNode().getNode(path).remove();        session.save();      } catch (      PathNotFoundException e) {        throw new UsersRepositoryException("User " + username + " not exists");      }    }  finally {      session.logout();    }  } catch (  RepositoryException e) {    if (getLogger().isInfoEnabled()) {      getLogger().info("Failed to remove user: " + username,e);    }    throw new UsersRepositoryException("Failed to remove user: " + username,e);  }}  }
class C{  public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public static boolean isAudioType(String mime){  return mime.toLowerCase().startsWith("audio/");}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public LDAPAuthenticationProvider() throws GuacamoleException {  injector=Guice.createInjector(new LDAPAuthenticationProviderModule(this));}  }
class C{  private static String retrieveTestMethodName(){  String result=null;  String storedName=System.getProperty(getKey());  if (!NO_NAME.equals(storedName)) {    result=storedName;  }  return result;}  }
class C{  private static String notNull(String string){  return string != null ? string : "";}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  @Override public void addSequence(final Array datum,final Array weights){  QL.require(datum.size() == weights.size(),INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.size(); i++) {    add(datum.get(i),weights.get(i));  }}  }
class C{  public static void main(String[] args){  start();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 2836) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  public void receiveErrorqueryAssociatedLunsForPort(java.lang.Exception e){}  }
class C{  public static long dateValue(long year,int month,int day){  return (year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final int lastIndexOf(Object elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static float sign(float fValue){  return Math.signum(fValue);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  public CRefreshRawModulesAction(final JFrame parent,final IDatabase database){  super("Refresh");  m_parent=Preconditions.checkNotNull(parent,"IE01909: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01910: Database argument can't be null");  putValue(ACCELERATOR_KEY,HotKeys.REFRESH_RAW_MODULES_ACCELERATOR_KEY.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_REFRESH_RAW_MODULES".charAt(0));}  }
class C{  public Intent putExtra(String name,int[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putIntArray(name,value);  return this;}  }
class C{  public void recordAuditLogs(RecordableAuditLog... auditlogs){  if (!shouldRecordAuditLog()) {    s_logger.info("Ignore audit log on standby site");    return;  }  AuditLog dbAuditLogs[]=new AuditLog[auditlogs.length];  int i=0;  for (  RecordableAuditLog auditlog : auditlogs) {    AuditLog dbAuditlog=AuditLogUtils.convertToAuditLog(auditlog);    dbAuditLogs[i++]=dbAuditlog;    AuditLog auditSyslog=dbAuditlog;    PropertyInfo propInfo=_coordinator.getPropertyInfo();    if (propInfo.getProperty(SYSLOG_ENALBE).equalsIgnoreCase("true")) {      Locale locale=new Locale("en","US");      ResourceBundle resb=ResourceBundle.getBundle("SDSAuditlogRes",locale);      AuditLogUtils.resetDesc(auditSyslog,resb);      logger.info("audit log is " + dbAuditlog.getServiceType() + " "+ dbAuditlog.getUserId()+ " "+ dbAuditlog.getOperationalStatus()+ " "+ dbAuditlog.getDescription());    }  }  try {    _dbClient.start();    String bucketId=_dbClient.insertTimeSeries(AuditLogTimeSeries.class,dbAuditLogs);    s_logger.info("AuditLog(s) persisted into Cassandra with bucketId/rowId : {}",bucketId);  } catch (  DatabaseException e) {    s_logger.error("Error inserting auditlogs into the database",e);    throw e;  }}  }
class C{  public BuildImageParams withFiles(@NotNull File... files){  if (remote != null) {    throw new IllegalStateException("Remote parameter is already set. Remote and files parameters are mutually exclusive.");  }  requireNonNull(files);  requireNonEmptyArray(files);  this.files=new ArrayList<>(files.length + 1);  return addFiles(files);}  }
class C{  public void testInit_DoesNotStartSyncWhenDataModelAvailable(){  when(mMockAppModel.isFullModelAvailable()).thenReturn(true);  mController.init();  assertFalse(mFakeSyncManager.isSyncActive());}  }
class C{  public boolean replaceIn(final StrBuilder source){  if (source == null) {    return false;  }  return substitute(source,0,source.length());}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple16<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11,final WindowSpecification<T> specification12,final WindowSpecification<T> specification13,final WindowSpecification<T> specification14,final WindowSpecification<T> specification15,final WindowSpecification<T> specification16){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11,specification12,specification13,specification14,specification15,specification16));}  }
