class C{  public void deleteSongByFilePath(String filePath){  String selection=SONG_FILE_PATH + "=" + "'"+ filePath.replace("'","''")+ "'";  getDatabase().delete(MUSIC_LIBRARY_TABLE,selection,null);}  }
class C{  private void populatePostData(List<Header> postDatas){  for (int i=postDatas.size(); --i >= 0; ) {    Header header=postDatas.get(i);    String value=header.getValue();    if ((baseRequest instanceof XMLRequest) && header.getKey().startsWith("ns:")) {      baseRequest.setNamespace(header.getKey().substring(3),value);      postDatas.remove(i);    }  }  for (  Header header : postDatas) {    if (header.getAction().equalsIgnoreCase("remove")) {    } else     if (header.getAction().equalsIgnoreCase("add") || header.getAction().equalsIgnoreCase("set")) {      String value=header.getValue();      if (ValidationUtil.isFunction(value)) {        value=FunctionHandler.executeFunction(value,variables);      } else       if (ValidationUtil.isVariable(value)) {        value=variables.getVariable(value);      }      value=variables.evaluate(value);      baseRequest.setKey(header.getKey(),value);    }  }}  }
class C{  static HeapCompactSketch heapifyInstance(Memory srcMem,long seed){  long pre0=srcMem.getLong(PREAMBLE_LONGS_BYTE);  int preLongs=extractPreLongs(pre0);  int flags=extractFlags(pre0);  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  short memSeedHash=(short)extractSeedHash(pre0);  short computedSeedHash=computeSeedHash(seed);  checkSeedHashes(memSeedHash,computedSeedHash);  int curCount=(preLongs > 1) ? srcMem.getInt(RETAINED_ENTRIES_INT) : 0;  long thetaLong=(preLongs > 2) ? srcMem.getLong(THETA_LONG) : Long.MAX_VALUE;  long[] cacheArr=new long[curCount];  if (curCount > 0) {    srcMem.getLongArray(preLongs << 3,cacheArr,0,curCount);  }  HeapCompactSketch hcs=new HeapCompactSketch(empty,memSeedHash,curCount,thetaLong,cacheArr);  return hcs;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:qual?name";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  private boolean isStyleElement(IStructuredDocumentRegion styleElementRegion){  if (styleElementRegion == null) {    return false;  }  String uiBinderPrefix=null;  ITextRegionList regions=styleElementRegion.getRegions();  for (int i=0; i < regions.size(); i++) {    ITextRegion styleElementChildTextRegion=regions.get(i);    if (styleElementChildTextRegion.getType().equals(DOMRegionContext.XML_TAG_NAME)) {      if (uiBinderPrefix == null) {        uiBinderPrefix=UiBinderXmlModelUtilities.resolveUiBinderNamespacePrefix(styleElementRegion.getParentDocument());      }      String tagName=styleElementRegion.getText(styleElementChildTextRegion);      if (tagName.equalsIgnoreCase(uiBinderPrefix + ":" + UiBinderConstants.UI_BINDER_STYLE_ELEMENT_NAME)) {        return true;      }    }  }  return false;}  }
class C{  synchronized File _directoryFor(Parameter parameter){  if (checked)   return null;  checked=true;  File result=null;  String p=getProperty(parameter.param);  if (p == null) {    int size=parents.size();    for (int x=0; x < size; x++) {      result=((ParameterDatabase)(parents.elementAt(x)))._directoryFor(parameter);      if (result != null)       return result;    }    return result;  } else   return directory;}  }
class C{  public boolean isInitialized(){synchronized (initLock) {    return this.initialized;  }}  }
class C{  public static Authorizations addUserAuths(final String user,final SecurityOperations secOps,final String... auths) throws AccumuloException, AccumuloSecurityException {  final Authorizations currentUserAuths=secOps.getUserAuthorizations(user);  final List<byte[]> authList=new ArrayList<>();  for (  final byte[] currentAuth : currentUserAuths.getAuthorizations()) {    authList.add(currentAuth);  }  for (  final String newAuth : auths) {    authList.add(newAuth.getBytes());  }  final Authorizations result=new Authorizations(authList);  return result;}  }
class C{  public static Path createTempFile(String name,String extension,String[] lines) throws Exception {  Path tmpFile=Files.createTempFile(name,extension);  tmpFile.toFile().deleteOnExit();  try (BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpFile.toFile()),StandardCharsets.UTF_8))){    for (int i=0; i < lines.length; i++) {      bw.write(lines[i]);      bw.write("\n");    }    return tmpFile;  } catch (  Exception e) {    tmpFile.toFile().delete();    throw e;  }}  }
class C{  protected boolean isNumeric(String text){  text=text.trim();  int tlen=text.length();  for (int i=0; i < tlen; i++) {    if (Character.isDigit(text.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public CloneFailedException(final Throwable cause){  super(cause);}  }
class C{  public FileWindow(SwingGui debugGui,Dim.SourceInfo sourceInfo){  super(SwingGui.getShortName(sourceInfo.url()),true,true,true,true);  this.debugGui=debugGui;  this.sourceInfo=sourceInfo;  updateToolTip();  currentPos=-1;  textArea=new FileTextArea(this);  textArea.setRows(24);  textArea.setColumns(80);  p=new JScrollPane();  fileHeader=new FileHeader(this);  p.setViewportView(textArea);  p.setRowHeaderView(fileHeader);  setContentPane(p);  pack();  updateText(sourceInfo);  textArea.select(0);}  }
class C{  public void testChiCdf(){  double[] octaveResults1degFree={0.000000,0.248170,0.345279,0.416118,0.472911,0.520500,0.561422,0.597216,0.628907,0.657218,0.682689,0.705734,0.726678,0.745787,0.763276,0.779329,0.794097,0.807712,0.820288,0.831922,0.842701,0.852701,0.861989,0.870626,0.878665,0.886154,0.893136,0.899652,0.905736,0.911420,0.916735,0.921708,0.926362,0.930720,0.934804,0.938631,0.942220,0.945588,0.948747,0.951714,0.954500,0.957117,0.959576,0.961888,0.964061,0.966105,0.968028,0.969837,0.971540,0.973143,0.974653,0.976074,0.977413,0.978675,0.979863,0.980984,0.982040,0.983035,0.983974,0.984859,0.985694,0.986482,0.987225,0.987926,0.988588,0.989213,0.989802,0.990359,0.990884,0.991380,0.991849,0.992292,0.992710,0.993105,0.993478,0.993830,0.994163,0.994478,0.994775,0.995057,0.995322,0.995573,0.995811,0.996035,0.996248,0.996449,0.996638,0.996818,0.996988,0.997148,0.997300,0.997444,0.997580,0.997708,0.997830,0.997945,0.998054,0.998157,0.998255,0.998347,0.998435};  for (int n=0; n < octaveResults1degFree.length; n++) {    assertEquals(octaveResults1degFree[n],MathsUtils.chiSquareCdf(n * 0.1,1),0.000001);  }  double[] octaveResults2degFree={0.000000,0.048771,0.095163,0.139292,0.181269,0.221199,0.259182,0.295312,0.329680,0.362372,0.393469,0.423050,0.451188,0.477954,0.503415,0.527633,0.550671,0.572585,0.593430,0.613259,0.632121,0.650062,0.667129,0.683363,0.698806,0.713495,0.727468,0.740760,0.753403,0.765430,0.776870,0.787752,0.798103,0.807950,0.817316,0.826226,0.834701,0.842763,0.850431,0.857726,0.864665,0.871265,0.877544,0.883516,0.889197,0.894601,0.899741,0.904631,0.909282,0.913706,0.917915,0.921918,0.925726,0.929349,0.932794,0.936072,0.939190,0.942156,0.944977,0.947660,0.950213,0.952641,0.954951,0.957148,0.959238,0.961226,0.963117,0.964916,0.966627,0.968254,0.969803,0.971275,0.972676,0.974009,0.975276,0.976482,0.977629,0.978720,0.979758,0.980745,0.981684,0.982578,0.983427,0.984236,0.985004,0.985736,0.986431,0.987093,0.987723,0.988321,0.988891,0.989433,0.989948,0.990438,0.990905,0.991348,0.991770,0.992172,0.992553,0.992917,0.993262};  for (int n=0; n < octaveResults2degFree.length; n++) {    assertEquals(octaveResults2degFree[n],MathsUtils.chiSquareCdf(n * 0.1,2),0.000001);  }  double[] octaveResults3degFree={0.000000,0.008163,0.022411,0.039972,0.059758,0.081109,0.103568,0.126796,0.150533,0.174572,0.198748,0.222926,0.246996,0.270867,0.294465,0.317730,0.340610,0.363066,0.385065,0.406581,0.427593,0.448087,0.468052,0.487479,0.506365,0.524709,0.542510,0.559773,0.576500,0.592698,0.608375,0.623537,0.638195,0.652357,0.666035,0.679238,0.691978,0.704266,0.716114,0.727533,0.738536,0.749134,0.759338,0.769161,0.778615,0.787710,0.796458,0.804870,0.812958,0.820732,0.828203,0.835381,0.842276,0.848898,0.855256,0.861361,0.867222,0.872846,0.878243,0.883422,0.888390,0.893155,0.897725,0.902107,0.906309,0.910337,0.914199,0.917900,0.921447,0.924846,0.928102,0.931222,0.934211,0.937074,0.939816,0.942442,0.944956,0.947364,0.949669,0.951876,0.953988,0.956010,0.957946,0.959798,0.961571,0.963267,0.964890,0.966443,0.967928,0.969350,0.970709,0.972010,0.973253,0.974443,0.975581,0.976669,0.977709,0.978704,0.979655,0.980564,0.981434};  for (int n=0; n < octaveResults3degFree.length; n++) {    assertEquals(octaveResults3degFree[n],MathsUtils.chiSquareCdf(n * 0.1,3),0.000001);  }  double[] octaveResults10degFree={0.000000,0.000000,0.000000,0.000001,0.000002,0.000007,0.000016,0.000033,0.000061,0.000106,0.000172,0.000266,0.000394,0.000565,0.000786,0.001065,0.001411,0.001835,0.002344,0.002949,0.003660,0.004485,0.005435,0.006519,0.007746,0.009124,0.010663,0.012370,0.014253,0.016320,0.018576,0.021028,0.023682,0.026543,0.029615,0.032902,0.036407,0.040133,0.044081,0.048255,0.052653,0.057277,0.062126,0.067200,0.072496,0.078014,0.083751,0.089703,0.095869,0.102243,0.108822,0.115601,0.122577,0.129742,0.137092,0.144621,0.152324,0.160193,0.168223,0.176406,0.184737,0.193207,0.201811,0.210540,0.219387,0.228347,0.237410,0.246569,0.255818,0.265149,0.274555,0.284028,0.293562,0.303148,0.312781,0.322452,0.332156,0.341886,0.351635,0.361396,0.371163,0.380930,0.390692,0.400441,0.410173,0.419882,0.429562,0.439208,0.448816,0.458380,0.467896,0.477360,0.486766,0.496111,0.505391,0.514602,0.523741,0.532804,0.541788,0.550690,0.559507};  for (int n=0; n < octaveResults10degFree.length; n++) {    assertEquals(octaveResults10degFree[n],MathsUtils.chiSquareCdf(n * 0.1,10),0.000001);  }}  }
class C{  public void testCase23(){  byte aBytes[]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  byte bBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  int bSign=1;  byte rBytes[]={1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void createTask(@NotNull final Task task,@NotNull final VirtualFile lessonDir,@NotNull final File resourceRoot,@NotNull final Project project) throws IOException {  VirtualFile taskDir=lessonDir.createChildDirectory(project,EduNames.TASK + Integer.toString(task.getIndex()));  EduUtils.markDirAsSourceRoot(taskDir,project);  File newResourceRoot=new File(resourceRoot,taskDir.getName());  int i=0;  for (  Map.Entry<String,TaskFile> taskFile : task.getTaskFiles().entrySet()) {    TaskFile taskFileContent=taskFile.getValue();    taskFileContent.setIndex(i);    i++;    createTaskFile(taskDir,newResourceRoot,taskFile.getKey());  }  File[] filesInTask=newResourceRoot.listFiles();  if (filesInTask != null) {    for (    File file : filesInTask) {      String fileName=file.getName();      if (!task.isTaskFile(fileName)) {        File resourceFile=new File(newResourceRoot,fileName);        File fileInProject=new File(taskDir.getCanonicalPath(),fileName);        FileUtil.copy(resourceFile,fileInProject);      }    }  }}  }
class C{  protected boolean initializePanelContent(PanelFeatureState st){  if (st.createdPanelView != null) {    st.shownPanelView=st.createdPanelView;    return true;  }  if (st.menu == null) {    return false;  }  if (mPanelMenuPresenterCallback == null) {    mPanelMenuPresenterCallback=new PanelMenuPresenterCallback();  }  MenuView menuView=st.isInListMode() ? st.getListMenuView(getContext(),mPanelMenuPresenterCallback) : st.getIconMenuView(getContext(),mPanelMenuPresenterCallback);  st.shownPanelView=(View)menuView;  if (st.shownPanelView != null) {    final int defaultAnimations=menuView.getWindowAnimations();    if (defaultAnimations != 0) {      st.windowAnimations=defaultAnimations;    }    return true;  } else {    return false;  }}  }
class C{  @Override public int size(){  return resulSize;}  }
class C{  public PaintViewAction(final VisionWorld visionWorld){  super("Paint view");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  putValue(SMALL_ICON,ResourceManager.getImageIcon("PaintView.png"));  putValue(SHORT_DESCRIPTION,"Paint View");}  }
class C{  public static void main(String[] args){  Header.printHeader(HouseholdSampler.class.toString(),args);  String inputFolder=args[0];  String outputFolder=args[1];  double fraction=Double.parseDouble(args[2]);  HouseholdSampler hs=new HouseholdSampler(MatsimRandom.getLocalInstance());  hs.sampleHouseholds(inputFolder,fraction);  try {    hs.writeSample(outputFolder);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("May not overwrite existing files.");  }  Header.printFooter();}  }
class C{  private String[] readHosts(){  File fileDir=getFilesDir();  File persisted=new File(fileDir,"hosts.txt");  if (!persisted.exists()) {    return new String[0];  }  ArrayList<String> hosts=new ArrayList<String>();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(persisted));    String line=null;    line=br.readLine();    while (line != null) {      hosts.add(line);      line=br.readLine();    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (br != null) {        br.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }  return hosts.toArray(new String[hosts.size()]);}  }
class C{  public synchronized void loadKeys(){  try {    PropertyInfo props=_coordinator.getPropertyInfo();    String internalApiAlgoOverride=null;    if (props != null) {      internalApiAlgoOverride=props.getProperty(SYSTEM_PROPERTY_INTERNAL_API_ALGO);    }    _log.debug("Internal Api algo override property: " + internalApiAlgoOverride);    if (internalApiAlgoOverride != null && internalApiAlgoOverride.equals(SYSTEM_PROPERTY_INTERNAL_API_ALGO_VALUE_NEW)) {      _internalApiCurrentKey=getSignatureKey2(NEW_SIGNATURE_INTERNALAPI_KEY,NEW_INTERNAL_API_SIGN_ALGO);      deleteSignatureKey(CURRENT_SIGNATURE_INTERNALAPI_KEY);    } else {      _internalApiCurrentKey=getSignatureKey2(CURRENT_SIGNATURE_INTERNALAPI_KEY,CURRENT_INTERNAL_API_SIGN_ALGO);    }    _interVDCCurrentKey=getSignatureKey2(SIGNATURE_INTERVDC_KEY,CURRENT_INTERVDC_API_SIGN_ALGO);  } catch (  Exception e) {    throw new IllegalStateException("Exception while retrieving key",e);  }  if (_internalApiCurrentKey == null) {    throw new IllegalStateException("Key was null / Unable to get current internal api key.");  }  if (_interVDCCurrentKey == null) {    throw new IllegalStateException("Key was null / Unable to get current inter vdc api key.");  }  _initialized=true;  _lastUpdated.set(System.currentTimeMillis());  return;}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public int read(){  return 0;}  }
class C{  private void enableOkBtn(){  if (okButton != null) {    if (txtName.getText().trim().isEmpty() || subscription.getText().isEmpty() || resourceGrp.getText().isEmpty()|| region.getText().isEmpty()) {      okButton.setEnabled(false);      if (subscription.getText().isEmpty() || subscription.getItemCount() <= 0) {        setErrorMessage(Messages.noSubErrMsg);        newBtn.setEnabled(false);      } else       if (resourceGrp.getText().isEmpty() || resourceGrp.getItemCount() <= 0) {        setErrorMessage(Messages.noResGrpErrMsg);        newBtn.setEnabled(true);      } else {        setErrorMessage(null);        newBtn.setEnabled(true);      }    } else {      okButton.setEnabled(true);      setErrorMessage(null);      newBtn.setEnabled(true);    }  }}  }
class C{  @Override public Request<RunnerStatus> run(ProjectReference projectReference){  return run(projectReference,null);}  }
class C{  public void testBug14909() throws Exception {  assertEquals("select '{\"','}'",this.conn.nativeSQL("select '{\"','}'"));}  }
class C{  public DefaultMetaDataFactory(){  this(new HashMap<String,Object>());}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || this.getClass() != o.getClass())   return false;  RequestTask that=(RequestTask)o;  return this.elem.equals(that.elem);}  }
class C{  public static int[] adjustSizes(int delta,SizeRequirements[] children){  return new int[0];}  }
class C{  public CAbstractResultsPanel(final BorderLayout borderLayout){  super(borderLayout);}  }
class C{  public boolean compile(String[] args){  long startTime=System.currentTimeMillis();  long batchID;synchronized (batchCountLock) {    batchID=batchCount++;  }  Batch batch=parseArgs(args);  if (batch == null) {    return false;  }  boolean status;  try {    batchTable.put(batchID,batch);    status=invokeJavadoc(batch,batchID);  }  finally {    batchTable.remove(batchID);  }  if (batch.verbose) {    long deltaTime=System.currentTimeMillis() - startTime;    output(Resources.getText("rmic.done_in",Long.toString(deltaTime)));  }  return status;}  }
class C{  private void convertRoutes(String runNumber,Integer lastIteration,String ksModelDirectory,String ksModelFile,String ksOptFile,String outputFile,String description){  String runsDirectory=DgPaths.REPOS + "runs-svn/cottbus/run" + runNumber+ "/";  RunResultsLoader runDir=new RunResultsLoader(runsDirectory,runNumber);  String eventsFilename=runDir.getEventsFilename(lastIteration);  this.matsimNet=runDir.getNetwork();  KS2015NetworkXMLParser ksNetworkReader=new KS2015NetworkXMLParser();  ksNetworkReader.readFile(ksModelDirectory + ksModelFile);  this.ksNet=ksNetworkReader.getKsNet();  KS2014SolutionXMLParser solutionParser=new KS2014SolutionXMLParser();  solutionParser.readFile(ksModelDirectory + ksOptFile);  List<KS2010CrossingSolution> crossingSolutions=solutionParser.getCrossingSolutions();  for (  KS2010CrossingSolution solution : crossingSolutions) {    DgCrossing relevantCrossing=ksNet.getCrossings().get(solution.getCrossingId());    for (    DgProgram program : relevantCrossing.getPrograms().values()) {      int offset=solution.getProgramIdOffsetMap().get(program.getId());      program.setOffset(offset);    }  }  EventsFilterManager eventsManager=new EventsFilterManagerImpl();  ReadRoutesFromEvents readRoutes=new ReadRoutesFromEvents();  eventsManager.addHandler(readRoutes);  MatsimEventsReader reader=new MatsimEventsReader(eventsManager);  reader.readFile(eventsFilename);  this.matsimRoutes=readRoutes.getMatsimRoutes();  createCommodities(ksModelDirectory);  new KS2010ModelWriter().write(ksNet,this.comsWithRoutes,outputFile.split("/")[1],description,ksModelDirectory + outputFile);}  }
class C{  public static char cArrayGet(char[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  @SuppressWarnings("deprecation") public int removeBelow(final Vector position,final int apothem,final int height) throws MaxChangedBlocksException {  checkNotNull(position);  checkArgument(apothem >= 1,"apothem >= 1");  checkArgument(height >= 1,"height >= 1");  final Region region=new CuboidRegion(this.getWorld(),position.add(-apothem + 1,0,-apothem + 1),position.add(apothem - 1,-height + 1,apothem - 1));  final Pattern pattern=new SingleBlockPattern(new BaseBlock(BlockID.AIR));  return this.setBlocks(region,pattern);}  }
class C{  public static double square(double x){  return x * x;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    getParameters().clear();  getParameters().addAll((Collection<? extends Parameter>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String parseExperimentName(String name){  Scanner scanner=new Scanner(name);  StringBuilder csvName=new StringBuilder();  scanner.useDelimiter("_");  for (int i=0; i < 8; i++) {    if (scanner.hasNext()) {      csvName.append(scanner.next() + ",");    } else {      csvName.append(",");    }  }  scanner.close();  return csvName.toString();}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new FrenchAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public ByteCopier byteCountInterval(int byteCountInterval){  this.byteCountInterval=byteCountInterval;  return this;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public static <E>TopicProcessor<E> create(String name,int bufferSize,WaitStrategy strategy){  return create(name,bufferSize,strategy,null);}  }
class C{  private AuthorizationContext createAuthorizationContext(String userLink){  Claims.Builder cb=new Claims.Builder();  cb.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);  cb.setSubject(userLink);  Calendar cal=Calendar.getInstance();  cal.set(9999,Calendar.DECEMBER,31);  cb.setExpirationTime(TimeUnit.MILLISECONDS.toMicros(cal.getTimeInMillis()));  Claims claims=cb.getResult();  String token;  try {    token=getTokenSigner().sign(claims);  } catch (  GeneralSecurityException e) {    throw new RuntimeException(e);  }  AuthorizationContext.Builder ab=AuthorizationContext.Builder.create();  ab.setClaims(claims);  ab.setToken(token);  ab.setPropagateToClient(false);  return ab.getResult();}  }
class C{  public static void hashFile(BytesRefBuilder fileHash,InputStream in,long size) throws IOException {  final int len=(int)Math.min(1024 * 1024,size);  fileHash.grow(len);  fileHash.setLength(len);  final int readBytes=Streams.readFully(in,fileHash.bytes(),0,len);  assert readBytes == len : Integer.toString(readBytes) + " != " + Integer.toString(len);  assert fileHash.length() == len : Integer.toString(fileHash.length()) + " != " + Integer.toString(len);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.user);  setListAdapter(new UserActionListAdapter());  nickname=getIntent().getStringExtra(Extra.USER);  ((TextView)findViewById(R.id.nickname)).setText(nickname);}  }
class C{  @Override public TStream<JsonObject> commands(String... commandIdentifiers){  TStream<JsonObject> commandsStream=PublishSubscribe.subscribe(this,COMMANDS_TOPIC,JsonObject.class);  if (commandIdentifiers.length > 0) {    Set<String> cmdIds=new HashSet<>(Arrays.asList(commandIdentifiers));    commandsStream=commandsStream.filter(null);  }  return commandsStream;}  }
class C{  public void deleteTipoDocumentoVital(String id) throws TipoDocumentoVitalEnUsoException {  checkPermission(DocumentosVitalesSecurityManager.EDICION_DOCUMENTOS_VITALES_ACTION);  deleteTipoDocumentoVital(getTipoDocumentoVital(id));}  }
class C{  @Override public boolean hasVibroblades(){  int count=0;  if (hasVibrobladesInLocation(Mech.LOC_RARM)) {    count++;  }  if (hasVibrobladesInLocation(Mech.LOC_LARM)) {    count++;  }  return count > 0;}  }
class C{  public String sqlMetadata_indexNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_indexNames(catalogName,schemaName);}  }
class C{  public static Test suite(){  return (new TestSuite(FormInputITCase.class));}  }
class C{  public MapType constructRawMapType(Class<? extends Map> mapClass){  return MapType.construct(mapClass,unknownType(),unknownType());}  }
class C{  public static ResultSet simpleFunctionTable(Connection conn){  SimpleResultSet result=new SimpleResultSet();  result.addColumn("A",Types.INTEGER,0,0);  result.addColumn("B",Types.CHAR,0,0);  result.addRow(42,'X');  return result;}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public Set<T> keySet(){  return Collections.unmodifiableSet(map.keySet());}  }
class C{  public static String match(String content,String pattern,int group,boolean caseInsensitive){  Pattern p=Pattern.compile(pattern);  if (caseInsensitive) {    p=Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);  }  Matcher matcher=p.matcher(content);  while (matcher.find()) {    return matcher.group(group);  }  return null;}  }
class C{  public void test_setKeyEntryLjava_lang_StringLjava_security_Key$C$Ljava_security_cert_Certificate() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.setKeyEntry("alias3",getPrivateKey(),pssWord,cert);    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,null);  keyTest.setKeyEntry("alias3",getPrivateKey(),pssWord,cert);  assertTrue("the entry specified by the alias alias3 is not a keyEntry",keyTest.isKeyEntry("alias3"));  try {    keyTest.setKeyEntry("alias4",getPrivateKey(),pssWord,new Certificate[]{});    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public void testCompare23To23() throws Exception {  assertTrue(WebXmlVersion.V2_3.compareTo(WebXmlVersion.V2_3) == 0);}  }
class C{  private boolean findAvailability(final String uri) throws Exception {  return findAvailability(getInstance(uri));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void actionPerformed(ActionEvent e){  if (frame == null) {    frame=new apps.AppsLaunchFrame(new PanelProPane(),"PanelPro");  }  frame.setVisible(true);}  }
class C{  private int handleAEIOUY(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('A');  }  return index + 1;}  }
class C{  public UnManagedFSExport(){}  }
class C{  private void addMissingSysConstraints(){  String sql2="";  final Vector<String> newConstraintNames=new Vector<String>();  try {    String sql="select * from user_constraints where constraint_name like 'SYS_%' and constraint_type='C'";    ResultSet rs2=stmtdb2.executeQuery(sql);    while (rs2.next()) {      final String searchCondition=rs2.getString("SEARCH_CONDITION");      if (searchCondition == null) {        continue;      } else       if (searchCondition.toUpperCase().indexOf("IS NOT NULL") != -1) {        continue;      }      final String tableName=rs2.getString("TABLE_NAME");      sql2="select * from user_constraints where table_name='" + tableName + "' and search_condition is not null";      ResultSet rs1=stmtdb1.executeQuery(sql2);      boolean found=false;      while (rs1.next()) {        if (searchCondition.equals(rs1.getString("SEARCH_CONDITION"))) {          found=true;          continue;        }      }      rs1.close();      if (!found) {        newConstraintNames.add(rs2.getString("CONSTRAINT_NAME"));      }    }    rs2.close();    for (int i=0; i < newConstraintNames.size(); i++) {      m_newConstraints.add(createNewConstraint(newConstraintNames.get(i)));    }  } catch (  SQLException e) {    e.printStackTrace();    System.out.println(sql2);  }}  }
class C{  public void go(File file,boolean append) throws IOException {  VCardWriter writer=new VCardWriter(file,append,getVCardWriterConstructorVersion());  try {    go(writer);  }  finally {    writer.close();  }}  }
class C{  @Override @Pure public void instantiate(){}  }
class C{  public void warn(Throwable throwable,String msg,Object[] argArray){  innerLog(Level.WARNING,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public void displayRecognitionError(String[] tokenNames,RecognitionException e){  super.displayRecognitionError(tokenNames,e);}  }
class C{  public ReceivingOrderCreatedEvent(Object source){  super(source);}  }
class C{  public SoftReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSpecify the expression to apply. Eg a1^2*a5/log(a7*4.0)." + "\n\tSupported opperators: ,+, -, *, /, ^, log, abs, cos, " + "\n\texp, sqrt, floor, ceil, rint, tan, sin, (, )"+ "\n\t(default: a1^2)","E",1,"-E <expression>"));  newVector.addElement(new Option("\tSpecify the name for the new attribute. (default is the " + "expression provided with -E)","N",1,"-N <name>"));  newVector.addElement(new Option("\tDebug. Names attribute with the postfix parse of the " + "expression.","D",0,"-D"));  return newVector.elements();}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  public Map<Integer,TestTable2> selectByExampleToMap(Example example){  List<TestTable2> list=super.selectByExample(example);  Map<Integer,TestTable2> m=new LinkedHashMap<Integer,TestTable2>();  for (  TestTable2 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDrowTunnelArea(zone);}  }
class C{  public DrawerBuilder withHeader(@LayoutRes int headerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (headerViewRes != -1) {    this.mHeaderView=mActivity.getLayoutInflater().inflate(headerViewRes,null,false);  }  return this;}  }
class C{  protected void doAdd(){  Formula formula=doEditFormula(null);  if (formula != null) {    @SuppressWarnings("unchecked") Vector<Formula> input=((Vector<Formula>)tableViewer.getInput());    input.add(formula);    tableViewer.setInput(input);    if (tableViewer instanceof CheckboxTableViewer) {      ((CheckboxTableViewer)tableViewer).setChecked(formula,true);    }    changeButtonEnablement();    view.getModel().setTraceExplorerExpression(FormHelper.getSerializedInput(tableViewer));  }}  }
class C{  String applySteps(String unix,File file){  for (  FormatterStep step : steps) {    try {      String formatted=step.format(unix,file);      unix=LineEnding.toUnix(formatted);    } catch (    Throwable e) {      logger.warn("Unable to apply step " + step.getName() + " to "+ projectDirectory.relativize(file.toPath())+ ": "+ e.getMessage());      logger.info("Exception is ",e);    }  }  return unix;}  }
class C{  public static boolean isEnabled(Item item){  return enabled.contains(item);}  }
class C{  public String allocateRoute(List<BlockOrder> orders){  if (_totalAllocated) {    return null;  }  if (orders == null) {    _orders=getBlockOrders();  } else {    _orders=orders;  }  _allocated=false;  _totalAllocated=true;  String msg=checkInService();  if (msg != null) {    _totalAllocated=false;    return msg;  }  OBlock block=getBlockAt(0);  msg=block.allocate(this);  if (msg != null) {    return msg;  }  allocateFromIndex(1);  return null;}  }
class C{  private static BigDecimal arctanTaylor(BigDecimal x,int scale){  int sp1=scale + 1;  int i=3;  boolean addFlag=false;  BigDecimal power=x;  BigDecimal sum=x;  BigDecimal term;  BigDecimal tolerance=BigDecimal.valueOf(5).movePointLeft(sp1);  do {    power=power.multiply(x).multiply(x).setScale(sp1,BigDecimal.ROUND_HALF_EVEN);    term=power.divide(BigDecimal.valueOf(i),sp1,BigDecimal.ROUND_HALF_EVEN);    sum=addFlag ? sum.add(term) : sum.subtract(term);    i+=2;    addFlag=!addFlag;    Thread.yield();  } while (term.compareTo(tolerance) > 0);  return sum;}  }
class C{  public void flush(final boolean force){synchronized (this) {    if (!started) {      throw new IllegalStateException("TimedBuffer is not started");    }    if ((force || !delayFlush) && buffer.writerIndex() > 0) {      int pos=buffer.writerIndex();      if (logRates) {        bytesFlushed.addAndGet(pos);      }      ByteBuffer bufferToFlush=bufferObserver.newBuffer(bufferSize,pos);      bufferToFlush.put(buffer.toByteBuffer().array(),0,pos);      bufferObserver.flushBuffer(bufferToFlush,pendingSync,callbacks);      stopSpin();      pendingSync=false;      callbacks=new LinkedList<>();      buffer.clear();      bufferLimit=0;      flushesDone.incrementAndGet();    }  }}  }
class C{  private List<Volume> createBlockVolumes(String volumeName,int numVolumes,URI storageSystem){  List<Volume> volumes=new ArrayList<Volume>();  for (int i=1; i <= numVolumes; i++) {    Volume volume=new Volume();    URI volumeURI=URIUtil.createId(Volume.class);    blockVolumeURIs.add(volumeURI);    volume.setId(volumeURI);    volume.setLabel(volumeName + i);    volume.setStorageController(storageSystem);    _dbClient.createObject(volume);    volumes.add(volume);  }  return volumes;}  }
class C{  public String prunedLabel(Tree node){  Map<String,Integer> counterMap=node.getSubtreeCounterMap();  int maximum=0;  String label="";  for (  String entry : counterMap.keySet()) {    int number=counterMap.get(entry);    if (number > maximum) {      maximum=number;      label=entry;    }  }  return label;}  }
class C{  public T caseExecutionRegion(ExecutionRegion object){  return null;}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  private void handleMouseMoved(MouseEvent e){  if (this.liveHandler != null && this.liveHandler.isEnabled()) {    this.liveHandler.handleMouseMoved(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleMouseMoved(this,e);    }  }}  }
class C{  public SkeinDigest(int stateSizeBits,int digestSizeBits){  this.engine=new SkeinEngine(stateSizeBits,digestSizeBits);  init(null);}  }
class C{  public static final void removeAllDownloadsByPackage(Context context,String notification_package,String notification_class){  context.getContentResolver().delete(Impl.CONTENT_URI,QUERY_WHERE_CLAUSE,new String[]{notification_package,notification_class});}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public void test_sessionProtection(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    final byte[] buf=new byte[300];    r.nextBytes(buf);    final ByteBuffer bb=ByteBuffer.wrap(buf);    long faddr=bs.write(bb);    IRawTx tx=rw.newTx();    bs.delete(faddr);    bb.position(0);    final ByteBuffer rdBuf=bs.read(faddr);    assertEquals(bb,rdBuf);    tx.close();    store.commit();  }  finally {    store.destroy();  }}  }
class C{  public T documentUrl(String value){  setString(DOCUMENT_URL,value);  return (T)this;}  }
class C{  public boolean isFireResistant(){  for (  Mounted equip : getMisc()) {    if (equip.getType().hasFlag(MiscType.F_FIRE_RESISTANT)) {      return true;    }  }  return false;}  }
class C{  private List<KeyValue> filter(Filter filter,List<KeyValue> kvs) throws IOException {  filter.reset();  List<KeyValue> tmp=new ArrayList<KeyValue>(kvs.size());  tmp.addAll(kvs);  boolean filteredOnRowKey=false;  List<KeyValue> nkvs=new ArrayList<KeyValue>(tmp.size());  for (  KeyValue kv : tmp) {    if (filter.filterRowKey(kv.getBuffer(),kv.getRowOffset(),kv.getRowLength())) {      filteredOnRowKey=true;      break;    }    Filter.ReturnCode filterResult=filter.filterKeyValue(kv);    if (filterResult == Filter.ReturnCode.INCLUDE) {      nkvs.add(kv);    } else     if (filterResult == Filter.ReturnCode.NEXT_ROW) {      break;    } else     if (filterResult == Filter.ReturnCode.NEXT_COL || filterResult == Filter.ReturnCode.SKIP) {      continue;    }  }  if (filter.hasFilterRow() && !filteredOnRowKey) {    filter.filterRow(nkvs);  }  if (filter.filterRow() || filteredOnRowKey) {    nkvs.clear();  }  tmp=nkvs;  return tmp;}  }
class C{  protected void generatePseudoPawnCaptures(int fromSquare,long fromBB,int oppositeColor,PriorityMoveList moves){  long toBB=pawnCapture(colorToMove,fromBB,getColorBB(oppositeColor));  while (toBB != 0L) {    int toSquare=bitscanForward(toBB);    if ((toBB & RANK8_OR_RANK1) != 0L) {      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,getPieceWithPromoteMask(toSquare),KNIGHT,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,getPieceWithPromoteMask(toSquare),BISHOP,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,getPieceWithPromoteMask(toSquare),QUEEN,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,getPieceWithPromoteMask(toSquare),ROOK,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);    } else {      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,getPieceWithPromoteMask(toSquare)),moves);    }    toBB=bitscanClear(toBB);  }}  }
class C{  AnnotationService(ArgusHttpClient client){  super(client);}  }
class C{  @Override public void close(){  actionDelegates.clear();}  }
class C{  @Override public double useKarma(final double negLimit,final double posLimit,final double granularity){  double limit;  double score;  if (logger.isDebugEnabled()) {    logger.debug("karma request: " + negLimit + " <= x <= "+ posLimit);  }  if (karma < 0.0) {    if (negLimit >= 0.0) {      return 0.0;    }    limit=Math.max(negLimit,karma);  } else {    if (posLimit <= 0.0) {      return 0.0;    }    limit=Math.min(posLimit,karma);  }  if (logger.isDebugEnabled()) {    logger.debug("karma limit: " + limit);  }  score=(0.2 + KARMA_RANDOMIZER.nextDouble() * 0.8) * limit;  score=Math.floor(score / granularity) * granularity;  if (this.isEquipped("lucky charm")) {    karma-=0.5 * score;  } else {    karma-=score;  }  if (logger.isDebugEnabled()) {    logger.debug("karma given: " + score);  }  put("karma",karma);  return score;}  }
class C{  public SootMethod resolveConcreteDispatch(SootClass concreteType,SootMethod m){  concreteType.checkLevel(SootClass.HIERARCHY);  if (concreteType.isInterface()) {    throw new RuntimeException("A concrete type cannot be an interface: " + concreteType);  }  String methodSig=m.getSubSignature();  while (true) {    if (concreteType.declaresMethod(methodSig)) {      if (isVisible(concreteType,m)) {        SootMethod method=concreteType.getMethod(methodSig);        if (method.isAbstract()) {          throw new RuntimeException("Error: Method call resolves to abstract method!");        }        return method;      }    }    if (!concreteType.hasSuperclass())     break;    concreteType=concreteType.getSuperclass();  }  return null;}  }
class C{  public static final int compareTo(char[] array1,char[] array2,int start,int end){  int length1=array1.length;  int length2=array2.length;  int min=Math.min(length1,length2);  min=Math.min(min,end);  for (int i=start; i < min; i++) {    if (array1[i] != array2[i]) {      return array1[i] - array2[i];    }  }  return length1 - length2;}  }
class C{  public static SimpleScheduleBuilder repeatSecondlyForTotalCount(int count){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInSeconds(1).withRepeatCount(count - 1);}  }
class C{  protected boolean checkClosed(boolean write){  if (conn == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  conn.checkClosed(write);  SessionInterface s=conn.getSession();  if (s != session) {    session=s;    trace=session.getTrace();    return true;  }  return false;}  }
class C{  protected void drawYLegend(){  float[] positions=new float[mYLegend.length * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i]=0;    positions[i + 1]=mYLegend[i / 2];  }  transformPointArrayNoTouch(positions);  float[] xy;  String yLengend;  float x, y;  for (int i=0; i < positions.length; i+=2) {    if (mYLegend[i / 2] != null) {      if (mDrawUnitInLegend) {        yLengend=mFormatYLegend.format(mYLegend[i / 2]) + mUnit;      } else {        yLengend=mFormatYLegend.format(mYLegend[i / 2]);      }      xy=measureTextDimension(mYLegendPaint,yLengend);      x=positions[i] - xy[0] - 2;      y=positions[i + 1] + xy[1] / 2;      if (!mDrawTopYLegendEntry && i >= positions.length - 2)       return;      mDrawCanvas.drawText(yLengend,x,y,mYLegendPaint);    }  }}  }
class C{  public boolean isRepresentationClassInputStream(){  return ioInputStreamClass.isAssignableFrom(representationClass);}  }
class C{  public final TestSubscriber assertTerminated(){  if (done.getCount() != 0) {    fail("","Subscriber still running!",errors);  }  long c=completions;  if (c > 1) {    fail("","Terminated with multiple completions: " + c,errors);  }  int s=errors.size();  if (s > 1) {    fail("","Terminated with multiple errors: " + s,errors);  }  if (c != 0 && s != 0) {    fail("","Terminated with multiple completions and errors: " + c,errors);  }  return this;}  }
class C{  public void testSendWithLossAndOptNaglingOff(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setLoss(10);  test.setOptNagling(false);  test.doTestTransfer(100000);}  }
class C{  public final void add(double scalar){  m00+=scalar;  m01+=scalar;  m02+=scalar;  m10+=scalar;  m11+=scalar;  m12+=scalar;  m20+=scalar;  m21+=scalar;  m22+=scalar;}  }
class C{  public AssetUriFetcher(Context context,Uri uri){  contextRef=new WeakReference<>(context);  this.uri=uri;}  }
class C{  public static final byte[] toByteArray(short s){  byte[] baTemp=new byte[2];  baTemp[1]=(byte)(s);  baTemp[0]=(byte)(s >> 8);  return baTemp;}  }
class C{  @SourceMonitored @SuppressWarnings("unchecked") public static Object simpleTypeConvert(Object obj,String type,String format,TimeZone timeZone,Locale locale,boolean noTypeFail) throws GeneralException {  if (obj == null || UtilValidate.isEmpty(type) || "Object".equals(type) || "java.lang.Object".equals(type)) {    return obj;  }  if ("PlainString".equals(type)) {    return obj.toString();  }  if (obj instanceof Node) {    Node node=(Node)obj;    String nodeValue=node.getTextContent();    if ("String".equals(type) || "java.lang.String".equals(type)) {      return nodeValue;    } else {      return simpleTypeConvert(nodeValue,type,format,timeZone,locale,noTypeFail);    }  }  int genericsStart=type.indexOf("<");  if (genericsStart != -1) {    type=type.substring(0,genericsStart);  }  Class<?> sourceClass=obj.getClass();  Class<?> targetClass=null;  try {    targetClass=loadClass(type);  } catch (  ClassNotFoundException e) {    throw new GeneralException("Conversion from " + sourceClass.getName() + " to "+ type+ " not currently supported",e);  }  if (sourceClass.equals(targetClass)) {    return obj;  }  if (obj instanceof String && ((String)obj).length() == 0) {    return null;  }  Converter<Object,Object> converter=null;  try {    converter=(Converter<Object,Object>)Converters.getConverter(sourceClass,targetClass);  } catch (  ClassNotFoundException e) {  }  if (converter != null) {    LocalizedConverter<Object,Object> localizedConverter=null;    try {      localizedConverter=(LocalizedConverter)converter;    } catch (    ClassCastException e) {    }    if (localizedConverter != null) {      if (timeZone == null) {        timeZone=TimeZone.getDefault();      }      if (locale == null) {        locale=Locale.getDefault();      }      try {        return localizedConverter.convert(obj,locale,timeZone,format);      } catch (      ConversionException e) {        Debug.logWarning(e,"Exception thrown while converting type: ",module);        throw new GeneralException(e.getMessage(),e);      }    }    try {      return converter.convert(obj);    } catch (    ConversionException e) {      Debug.logWarning(e,"Exception thrown while converting type: ",module);      throw new GeneralException(e.getMessage(),e);    }  }  if (targetClass.equals(String.class)) {    Debug.logWarning("No special conversion available for " + obj.getClass().getName() + " to String, returning object.toString().",module);    return obj.toString();  }  if (noTypeFail) {    throw new GeneralException("Conversion from " + obj.getClass().getName() + " to "+ type+ " not currently supported");  } else {    if (Debug.infoOn())     Debug.logInfo("No type conversion available for " + obj.getClass().getName() + " to "+ targetClass.getName()+ ", returning original object.",module);    return obj;  }}  }
class C{  @Timed @ExceptionMetered @Path("expiring/v2/{time}") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecret> secretListingExpiringV2(@Auth AutomationClient automationClient,@PathParam("time") Long time){  List<SanitizedSecret> secrets=secretController.getSanitizedSecrets(time,null);  return secrets.stream().collect(toList());}  }
class C{  public MultisigTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.MULTISIG,options,deserializer);  this.otherTransaction=deserializer.readObject("otherTrans",TransactionFactory.NON_VERIFIABLE);  this.otherTransactionHash=HashUtils.calculateHash(this.otherTransaction.asNonVerifiable());  final Collection<Transaction> signatures=DeserializationOptions.VERIFIABLE == options ? deserializer.readObjectArray("signatures",TransactionFactory.VERIFIABLE) : new ArrayList<>();  signatures.forEach(null);}  }
class C{  private void initializeProperties(ActionInvocation invocation) throws Exception {  if (dataSource == null && connection == null) {    String message="No dataSource specified...";    LOG.error(message);    throw new RuntimeException(message);  }  if (dataSource != null)   dataSource=conditionalParse(dataSource,invocation);  format=conditionalParse(format,invocation);  if (StringUtils.isEmpty(format)) {    format=FORMAT_PDF;  }  if (contentDisposition != null) {    contentDisposition=conditionalParse(contentDisposition,invocation);  }  if (documentName != null) {    documentName=conditionalParse(documentName,invocation);  }  reportParameters=conditionalParse(reportParameters,invocation);  exportParameters=conditionalParse(exportParameters,invocation);}  }
class C{  public NodeSetDTM(DTMIterator ni){  super();  m_manager=ni.getDTMManager();  m_root=ni.getRoot();  addNodes(ni);}  }
class C{  private void cmd_process(){  if (m_format == null) {    ADialog.error(m_WindowNo,this,"FileImportNoFormat");    return;  }  log.config(m_format.getName());  int row=0;  int imported=0;  for (row=0; row < m_data.size(); row++)   if (m_format.updateDB(Env.getCtx(),m_data.get(row).toString(),null))   imported++;  ADialog.info(m_WindowNo,this,"FileImportR/I",row + " / " + imported+ "#");  dispose();}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Hibitus");  removeNPC("Lucanus");  return true;}  }
class C{  public void addSelectionPaths(TreePath[] paths){  getSelectionModel().addSelectionPaths(paths);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  public Matrix(double[][] array) throws Exception {  m_Matrix=new weka.core.matrix.Matrix(array);}  }
class C{  public static double stdDev(double[] array,double mean,int arrayLength){  if (arrayLength == 0) {    return 0.0;  }  double sumSqs=0.0;  for (int m=0; m < arrayLength; m++) {    sumSqs+=(array[m] - mean) * (array[m] - mean);  }  double std=sumSqs / (double)(arrayLength - 1);  std=Math.sqrt(std);  return std;}  }
class C{  public EsriPolygonZList(int initialCapacity){  super(initialCapacity);}  }
class C{  public CharSequence nextText() throws IOException {  WebSocketMessageType msgType=null;  while ((msgType=_messageReader.next()) != WebSocketMessageType.EOS) {    if (msgType == WebSocketMessageType.TEXT) {      return _messageReader.getText();    }  }  return null;}  }
class C{  public boolean release(final String owner,final boolean force) throws Exception {  String localOwner=owner;  String globalOwner=_vdc;  if (_mode.equals(GlobalLock.GL_Mode.GL_NodeSvcShared_MODE)) {    globalOwner=String.format("%1$s:%2$s",_vdc,owner);  }  _log.info("{} is releasing global lock {} ...",localOwner,_name);  boolean bLockReleased=false;  MutationBatch m=_keyspace.prepareMutationBatch();  try {    ColumnMap<String> columns=_cpDistRowlock.acquireLockAndReadRow();    String currMode=columns.getString(GlobalLock.GL_MODE_COLUMN,null);    String currOwner=columns.getString(GlobalLock.GL_OWNER_COLUMN,null);    if (currMode == null || currOwner == null) {      _log.error("The global lock {} has is not active.",_name);      return true;    }    if (!currMode.equals(_mode.toString())) {      errMsg=String.format("The global lock %s has been acquired by incompatible mode %s.",_name,currMode);      _log.error(errMsg);      throw new IllegalStateException(errMsg);    }    if (!currOwner.isEmpty() && !currOwner.equals(globalOwner)) {      if (force && isForceReleaseEligible(currMode,globalOwner,currOwner)) {        _log.warn("Forcibly releasing global lock with owner {}, was acquired" + " by owner {}.",globalOwner,currOwner);      } else {        errMsg=String.format("The global lock %s has been acquired by different owner %s.",_name,currOwner);        _log.error(errMsg);        return bLockReleased;      }    }    if (!_mode.equals(GlobalLock.GL_Mode.GL_NodeSvcShared_MODE)) {      removeLocalHolder(localOwner);    }    if (_mode.equals(GlobalLock.GL_Mode.GL_NodeSvcShared_MODE) || getLocalHolderNumber() == 0) {      m.withRow(_cf,_name).deleteColumn(GlobalLock.GL_MODE_COLUMN);      m.withRow(_cf,_name).deleteColumn(GlobalLock.GL_OWNER_COLUMN);      m.withRow(_cf,_name).deleteColumn(GlobalLock.GL_EXPIRATION_COLUMN);      _cpDistRowlock.releaseWithMutation(m);      _log.info("{} released global lock {} successfully.",localOwner,_name);    } else {      _log.info("Skip releasing the global lock {}. It is still hold by other nodes within the vdc {}.",_name,_vdc);    }    bLockReleased=true;  } catch (  StaleLockException e) {    errMsg=String.format("%s failed to release global lock %s due to internal distributed row lock becoming stale.",localOwner,_name);    _log.error(errMsg);    return bLockReleased;  }catch (  BusyLockException e) {    errMsg=String.format("%s failed to release global lock %s due to locked by others.",localOwner,_name);    _log.error(errMsg);    return bLockReleased;  }catch (  Exception e) {    errMsg=String.format("Failed to release global lock %s due to unexpected exception : %s.",_name,e.getMessage());    _log.error("Failed to release global lock {} due to unexpected exception {}.",_name,e);    throw e;  } finally {    _log.info("finally,internal distributed row lock releasing...");    _cpDistRowlock.release();    _log.info("finally,internal distributed row lock released.");  }  return bLockReleased;}  }
class C{  public void ping(){  log.debug("ping()");  try {    JSONObject json=new JSONObject();    json.put(KEY_PATH,"/v1/ping/");    json.put(KEY_METHOD,"GET");    post(json.toString());  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  private void mergeReleasedEntries(Segment segment,OffsetPredicate predicate,Segment compactSegment){  for (long i=segment.firstIndex(); i <= segment.lastIndex(); i++) {    long offset=segment.offset(i);    if (offset != -1 && !predicate.test(offset)) {      compactSegment.release(i);    }  }}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  setDrawSeriesLineAsPath(true);  XYSplineState state=new XYSplineState(info);  state.setProcessVisibleItemsOnly(false);  return state;}  }
class C{  public UploaderApp(){  argParser=new ArgumentParser("herd-uploader-app");  createNewVersionOpt=argParser.addArgument("V","createNewVersion",false,"If not set, only initial version of the business object data is allowed to be created.",false);  rrsOpt=argParser.addArgument("r","rrs",false,"If set, the data will be saved in Reduced Redundancy Storage.",false);  maxRetryAttemptsOpt=argParser.addArgument("R","maxRetryAttempts",true,"The maximum number of the business object data registration retry attempts that uploader would perform before rolling back the upload.",false);  retryDelaySecsOpt=argParser.addArgument("D","retryDelaySecs",true,"The delay in seconds between the business object data registration retry attempts.",false);  forceOpt=argParser.addArgument("f","force",false,"If set, allows upload to proceed when the latest version of the business object data has UPLOADING status by invalidating that version.",false);}  }
class C{  protected boolean isQueryCancelled(final UUID queryId){  if (log.isDebugEnabled()) {    log.debug(queryId);  }  RunningQuery q=getQueryById(queryId);  if (log.isDebugEnabled() && q != null) {    log.debug(queryId + " isCancelled: " + q.isCancelled());  }  if (q != null) {    return q.isCancelled();  }  return false;}  }
class C{  protected boolean isComplete(){  if ((_atOne == null) || (_atTwo == null)) {    return false;  }  java.util.ArrayList<AllocatedSection> aSections=_atOne.getAllocatedSectionList();  boolean complete=false;  for (int i=0; i < aSections.size(); i++) {    if ((aSections.get(i).getSection() == _tSectionOne) && (aSections.get(i).getSequence() == _tSectionOneSeq)) {      complete=true;    }  }  if (!complete) {    return false;  }  complete=false;  aSections=_atTwo.getAllocatedSectionList();  for (int j=0; j < aSections.size(); j++) {    if ((aSections.get(j).getSection() == _tSectionTwo) && (aSections.get(j).getSequence() == _tSectionTwoSeq)) {      complete=true;    }  }  return complete;}  }
class C{  private List<TechnicalProduct> createTechnicalProduct(){  TechnicalProduct product=new TechnicalProduct();  List<ParameterDefinition> parameterDefinitions=new ArrayList<ParameterDefinition>();  ParameterDefinition def=new ParameterDefinition();  def.setParameterId("Def_ID");  def.setValueType(ParameterValueType.BOOLEAN);  if (currentModificationType != null) {    def.setModificationType(currentModificationType);  }  parameterDefinitions.add(def);  product.setParameterDefinitions(parameterDefinitions);  return Arrays.asList(product);}  }
class C{  private void closeChannel(byte channel){  channelConfig[channel].setInitializing(false);  channelConfig[channel].setDeinitializing(true);  channelConfig[channel].setChannelState(ChannelStates.CLOSED);  try {    antInterface.ANTCloseChannel(channel);  } catch (  AntInterfaceException e) {    Log.w(TAG,"Unable to close channel: " + channel,e);    handleAntError();  }}  }
class C{  public static int randExponential(final int mean){  return (int)(-mean * Math.log(rand.nextDouble()));}  }
class C{  @Deprecated protected boolean hasInput(Class<? extends IOObject> cls){  try {    getInput(cls);    return true;  } catch (  MissingIOObjectException e) {    return false;  }}  }
class C{  public void testDefaultsNotInitialized() throws Exception {  check(false);}  }
class C{  private static File renameToBak(File file){  DateFormat fmt=new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");  if (file.exists() && !file.renameTo(new File(file.getAbsolutePath() + "." + fmt.format(new Date())+ ".bak")))   exit("Failed to rename file '" + file.getPath() + "'.",null);  return file;}  }
class C{  public boolean isMajorGridX(){  return majorGridX;}  }
class C{  protected void waitAtLeast(final int minimumElapsedTIme,final long start,final Runnable runnable){  Awaitility.await().atMost(1,TimeUnit.MINUTES).until(runnable);  long elapsed=System.currentTimeMillis() - start;  assertTrue(elapsed >= minimumElapsedTIme);}  }
class C{  public SchemaMigration(int version){  super(MigrationType.SCHEMA,version);}  }
class C{  public static int[] toIntArray(byte[] data){  int[] result=new int[data.length / 4];  byte[] tmp=new byte[4];  for (int i=0; i < result.length; i++) {    System.arraycopy(data,i * 4,tmp,0,4);    result[i]=toInt(tmp);  }  return result;}  }
class C{  @Override public void analyse(InputFile resource,SensorContext sensorContext,List<ClassInterface> classes,List<FunctionInterface> functions,Set<UnitInterface> units){  reset();  Set<String> processedFunc=new HashSet<String>();  if (classes != null) {    for (    ClassInterface cl : classes) {      if (cl == null) {        continue;      }      ++classCount;      fileComplexity+=cl.getComplexity();      classComplexity+=cl.getComplexity();      accessorsCount+=cl.getAccessorCount();      publicApi+=cl.getPublicApiCount();      for (      FunctionInterface func : cl.getFunctions()) {        processFunction(resource,func);        processedFunc.add(func.getName());      }    }  }  if (functions != null) {    for (    FunctionInterface func : functions) {      if (func == null) {        continue;      }      if (processedFunc.contains(func.getName())) {        continue;      }      methodsCount+=1 + func.getOverloadsCount();      fileComplexity+=func.getComplexity();      functionComplexity+=func.getComplexity();      statementsCount+=func.getStatements().size();      functionDist.add(Double.valueOf(func.getComplexity()));      if (func.getVisibility() == DelphiParser.PUBLIC) {        ++publicApi;      }      processedFunc.add(func.getName());      addIssue(resource,func);    }  }  fileDist.add(fileComplexity);  if (methodsCount != 0.0) {    functionComplexity/=methodsCount;  }  if (classCount != 0.0) {    classComplexity/=classCount;  }  saveAllMetrics();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public String dump(X509Certificate certificate) throws Asn1Exception, IOException {  try {    return dump(certificate.getEncoded());  } catch (  IOException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }catch (  CertificateEncodingException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }}  }
class C{  protected boolean sendValue(){  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.376 -0500",hash_original_method="273C1CEA731372543F92C5C1B99E7FBF",hash_generated_method="6C78362920496EB9988128A339D51861") public Animation onCreateAnimation(int transit,boolean enter,int nextAnim){  return null;}  }
class C{  public ReplDBMSEvent eventFromRowUpdate(long seqno,String schema,String table,String[] names,Object[] values,Object[] keys,int fragNo,boolean lastFrag,Timestamp commitTime){  OneRowChange rowChange=generateRowChange(schema,table,RowChangeData.ActionType.UPDATE);  rowChange.setColumnSpec(generateSpec(rowChange,names));  rowChange.setColumnValues(generateValues(rowChange,values));  rowChange.setKeySpec(generateSpec(rowChange,names));  rowChange.setKeyValues(generateValues(rowChange,keys));  RowChangeData rowChangeData=new RowChangeData();  rowChangeData.appendOneRowChange(rowChange);  ArrayList<DBMSData> data=new ArrayList<DBMSData>();  data.add(rowChangeData);  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,data,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,(short)fragNo,lastFrag,"NONE",0,commitTime,dbmsEvent);  return replDbmsEvent;}  }
class C{  private RopToDop(){}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(super.toString());  sb.append("KeyUsage [\n");  if (isSet(0)) {    sb.append("  DigitalSignature\n");  }  if (isSet(1)) {    sb.append("  Non_repudiation\n");  }  if (isSet(2)) {    sb.append("  Key_Encipherment\n");  }  if (isSet(3)) {    sb.append("  Data_Encipherment\n");  }  if (isSet(4)) {    sb.append("  Key_Agreement\n");  }  if (isSet(5)) {    sb.append("  Key_CertSign\n");  }  if (isSet(6)) {    sb.append("  Crl_Sign\n");  }  if (isSet(7)) {    sb.append("  Encipher_Only\n");  }  if (isSet(8)) {    sb.append("  Decipher_Only\n");  }  sb.append("]\n");  return sb.toString();}  }
class C{  public static Object fromSDKObject(Object o) throws WarpScriptException {  if (o instanceof String || o instanceof Long || o instanceof Double|| o instanceof Boolean) {    return o;  } else   if (o instanceof Integer || o instanceof Short || o instanceof Byte|| o instanceof BigInteger) {    return ((Number)o).longValue();  } else   if (o instanceof Float || o instanceof BigDecimal) {    return ((Number)o).doubleValue();  } else   if (o instanceof WarpScriptJavaFunctionGTS) {    WarpScriptJavaFunctionGTS inGTS=(WarpScriptJavaFunctionGTS)o;    int len=null != inGTS.ticks ? inGTS.ticks.length : 0;    GeoTimeSerie gts;    if (inGTS.bucketized) {      gts=new GeoTimeSerie(inGTS.lastbucket,inGTS.bucketcount,inGTS.bucketspan,len);    } else {      gts=new GeoTimeSerie(len);    }    Metadata metadata=new Metadata();    if (null != inGTS.gtsClass) {      metadata.setName(inGTS.gtsClass);    }    if (null != inGTS.gtsLabels) {      metadata.setLabels(new HashMap<String,String>(inGTS.gtsLabels));    } else {      metadata.setLabels(new HashMap<String,String>());    }    if (null != inGTS.gtsAttributes) {      metadata.setAttributes(new HashMap<String,String>(inGTS.gtsAttributes));    } else {      metadata.setAttributes(new HashMap<String,String>());    }    if (0 == len) {      return gts;    }    boolean hasLocations=false;    if (null != inGTS.latitudes && null != inGTS.longitudes) {      if (inGTS.latitudes.length != len || inGTS.longitudes.length != len) {        throw new WarpScriptException("Incoherent number of latitudes (" + inGTS.latitudes.length + ") / longitudes ("+ inGTS.longitudes.length+ "), expected "+ len);      }      hasLocations=true;    } else     if (null != inGTS.latitudes) {      throw new WarpScriptException("Missing longitudes.");    } else     if (null != inGTS.longitudes) {      throw new WarpScriptException("Missing latitudes.");    }    boolean hasElevations=false;    if (null != inGTS.elevations) {      if (inGTS.elevations.length != len) {        throw new WarpScriptException("Incoherent number of elevations (" + inGTS.elevations.length + "), expected "+ len);      }    }    TYPE type=TYPE.UNDEFINED;    if (null != inGTS.booleanValues) {      type=TYPE.BOOLEAN;      if (inGTS.booleanValues.size() != len) {        throw new WarpScriptException("Incoherent size for boolean values (" + inGTS.booleanValues.size() + "), expected "+ len);      }    }    if (null != inGTS.longValues) {      if (TYPE.UNDEFINED != type) {        throw new WarpScriptException("Incoherent GTS, multiple value types.");      }      type=TYPE.LONG;      if (inGTS.longValues.length != len) {        throw new WarpScriptException("Incoherent size for long values (" + inGTS.longValues.length + "), expected "+ len);      }    }    if (null != inGTS.doubleValues) {      if (TYPE.UNDEFINED != type) {        throw new WarpScriptException("Incoherent GTS, multiple value types.");      }      type=TYPE.DOUBLE;      if (inGTS.doubleValues.length != len) {        throw new WarpScriptException("Incoherent size for double values (" + inGTS.doubleValues.length + "), expected "+ len);      }    }    if (null != inGTS.stringValues) {      if (TYPE.UNDEFINED != type) {        throw new WarpScriptException("Incoherent GTS, multiple value types.");      }      type=TYPE.STRING;      if (inGTS.stringValues.length != len) {        throw new WarpScriptException("Incoherent size for string values (" + inGTS.stringValues.length + "), expected "+ len);      }    }    for (int i=0; i < inGTS.ticks.length; i++) {      long location=GeoTimeSerie.NO_LOCATION;      long elevation=GeoTimeSerie.NO_ELEVATION;      if (hasLocations) {        if (FloatUtils.isFinite(inGTS.latitudes[i]) && FloatUtils.isFinite(inGTS.longitudes[i])) {          location=GeoXPLib.toGeoXPPoint(inGTS.latitudes[i],inGTS.longitudes[i]);        }      }      if (hasElevations && Long.MIN_VALUE != inGTS.elevations[i]) {        elevation=inGTS.elevations[i];      }      Object value=null;switch (type) {case BOOLEAN:        value=inGTS.booleanValues.get(i);      break;case DOUBLE:    value=inGTS.doubleValues[i];  break;case LONG:value=inGTS.longValues[i];break;case STRING:value=inGTS.stringValues[i];break;default :throw new WarpScriptException("Invalid return type.");}GTSHelper.setValue(gts,inGTS.ticks[i],location,elevation,value,false);}return gts;} else if (o instanceof List) {List<Object> newlist=new ArrayList<Object>(((List)o).size());for (Object in : (List)o) {if (!(in instanceof List) && !(in instanceof Map)) {Object out=fromSDKObject(in);newlist.add(out);} else {throw new WarpScriptException("Invalid nested complex type.");}}return newlist;} else if (o instanceof Map) {Map<Object,Object> newmap=new HashMap<Object,Object>(((Map)o).size());for (Entry<Object,Object> entry : ((Map<Object,Object>)o).entrySet()) {Object key=entry.getKey();Object value=entry.getValue();if (!(key instanceof List) && !(key instanceof Map) && !(value instanceof List)&& !(value instanceof Map)) {newmap.put(fromSDKObject(key),fromSDKObject(value));} else {throw new WarpScriptException("Invalid nested complex type.");}}return newmap;} else {return o.toString();}}  }
class C{  public void testStopWord() throws Exception {  Analyzer a=new LithuanianAnalyzer();  assertAnalyzesTo(a,"man",new String[]{});}  }
class C{  @Override public void actionPerformed(ActionEvent e){}  }
class C{  protected Border(){}  }
class C{  protected boolean isStoppable(){  return (isRunning() && getLocator() != null);}  }
class C{  public static void print(ByteBuffer bytes,PrintStream out,int offset,int length){  for (int i=offset; i < offset + length; i++) {    print(bytes.get(i),out);    if ((i - offset + 1) % 32 == 0) {      out.println();    } else     if ((i - offset + 1) % 8 == 0) {      out.print("    ");    } else {      out.print(" ");    }  }}  }
class C{  public ServerConfig(File configDir,File configFile,Map<Key,Object> parameters){  checkNotNull(configDir);  checkNotNull(configFile);  checkNotNull(parameters);  this.configDir=configDir;  this.configFile=configFile;  this.parameters=parameters;  config.options().indent(4).copyHeader(true).header("glowstone.yml is the main configuration file for a Glowstone server\n" + "It contains everything from server.properties and bukkit.yml in a\n" + "normal CraftBukkit installation.\n\n"+ "For help, join us on Discord: https://discord.gg/TFJqhsC");}  }
class C{  public void unparsedEntityDecl(String name,String pubID,String sysID,String notationName) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" NDATA ");    m_writer.write(notationName);    m_writer.write(" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public final AC sizeGroup(){  return sizeGroup("",curIx);}  }
class C{  public GuacamoleUnauthorizedException(String message){  super(message);}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String altName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    altName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    if (bitNum > 999) {      return "";    }    altName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  }  return altName;}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  public static boolean checkIfPermissionGranted(Context context,String permission){  return (context.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);}  }
class C{  public void selfSub(LowerTriangularMatrix l){  if ((rows != l.rows) || (columns != l.columns)) {    throw new IllegalArgumentException("cannot substract a " + l.rows + 'x'+ l.columns+ " matrix from a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    for (int index=i * columns; index < i * (columns + 1) + 1; ++index) {      data[index]-=l.data[index];    }  }}  }
class C{  public static int median(int first,int middle,int last){  return Math.max(Math.min(first,middle),Math.min(Math.max(first,middle),last));}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testGetF27(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF27();  assertEquals(expResult,result);}  }
class C{  public boolean isFirefox(){  return isFirefox;}  }
class C{  public FarSideEntryOp(){}  }
class C{  public static void forceMenuIcons(Menu menu){  try {    Class<?> MenuBuilder=menu.getClass();    Method setOptionalIconsVisible=MenuBuilder.getDeclaredMethod("setOptionalIconsVisible",boolean.class);    if (!setOptionalIconsVisible.isAccessible()) {      setOptionalIconsVisible.setAccessible(true);    }    setOptionalIconsVisible.invoke(menu,true);  } catch (  Exception ignored) {  }}  }
class C{  public double calcWeightedSum(){  if (!enabled) {    return 0;  } else {    psr=source.getActivation() * strength;    if (delay != 0) {      dlyVal=dequeu();      enqueu(psr);      return dlyVal;    } else {      return psr;    }  }}  }
class C{  public static Tree buildTree(Rule rule,List<HGNode> tailNodes,int maxDepth){  Tree tree=getFragmentFromYield(rule.getEnglishWords());  if (tree == null) {    tree=new Tree(String.format("(%s %s)",Vocabulary.word(rule.getLHS()),rule.getEnglishWords()));  } else {    tree=tree.shallowClone();  }  if (tree != null && tailNodes != null && tailNodes.size() > 0 && maxDepth > 0) {    List<Tree> frontier=tree.getNonterminalYield();    ArrayList<Integer> tailIndices=new ArrayList<>();    int[] englishInts=rule.getEnglish();    for (    int englishInt : englishInts)     if (englishInt < 0)     tailIndices.add(-1 * englishInt - 1);    for (int i=0; i < tailNodes.size(); i++) {      try {        Tree frontierTree=frontier.get(tailIndices.get(i));        frontierTree.setBoundary(true);        HyperEdge edge=tailNodes.get(i).bestHyperedge;        if (edge != null) {          Tree childTree=buildTree(edge.getRule(),edge.getTailNodes(),maxDepth - 1);          if (childTree != null)           frontierTree.children=childTree.children;        } else {          frontierTree.children=tree.children;        }      } catch (      IndexOutOfBoundsException e) {        LOG.error("ERROR at index {}",i);        LOG.error("RULE: {}  TREE: {}",rule.getEnglishWords(),tree);        LOG.error("  FRONTIER:");        for (        Tree kid : frontier) {          LOG.error("    {}",kid);        }        throw new RuntimeException(String.format("ERROR at index %d",i),e);      }    }  }  return tree;}  }
class C{  public form(String action,String method){  setAction(action);  setMethod(method);}  }
class C{  public SortedEvictionPolicy(int max){  this(max,null);}  }
class C{  private SymmetricMatrix crlInverse() throws ArithmeticException {  if (rows() == 1)   return inverse1By1(); else   if (rows() == 2)   return inverse2By2();  Matrix[] splitMatrices=split();  SymmetricMatrix b1=(SymmetricMatrix)splitMatrices[0].inverse();  Matrix cb1=splitMatrices[2].secureProduct(b1);  SymmetricMatrix cb1cT=new SymmetricMatrix(cb1.productWithTransposedComponents(splitMatrices[2]));  splitMatrices[1]=((SymmetricMatrix)splitMatrices[1]).secureSubtract(cb1cT).inverse();  splitMatrices[2]=splitMatrices[1].secureProduct(cb1);  splitMatrices[0]=b1.secureAdd(new SymmetricMatrix(cb1.transposedProductComponents(splitMatrices[2])));  return SymmetricMatrix.join(splitMatrices);}  }
class C{  public KeyPairPublicKeyDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("KeyPairPublicKeyDetailsAction.statusbar"));  putValue(NAME,res.getString("KeyPairPublicKeyDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("KeyPairPublicKeyDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("KeyPairPublicKeyDetailsAction.image")))));}  }
class C{  public Builder userId(Long userId){  this.userId=userId;  return this;}  }
class C{  public void migrateNetworkPredictionPreferences(){  PrefServiceBridge prefService=PrefServiceBridge.getInstance();  boolean predictionOptionIsBoolean=false;  try {    mSharedPreferences.getString(PREF_NETWORK_PREDICTIONS,"");  } catch (  ClassCastException ex) {    predictionOptionIsBoolean=true;  }  if (!predictionOptionIsBoolean && prefService.networkPredictionOptionsHasUserSetting()) {    return;  }  if (!predictionOptionIsBoolean && !mSharedPreferences.contains(PREF_BANDWIDTH_OLD) && !mSharedPreferences.contains(PREF_BANDWIDTH_NO_CELLULAR_OLD)) {    return;  }  final String prefBandwidthDefault=BandwidthType.PRERENDER_ON_WIFI.title();  final String prefBandwidth=mSharedPreferences.getString(PREF_BANDWIDTH_OLD,prefBandwidthDefault);  boolean prefBandwidthNoCellularDefault=true;  boolean prefBandwidthNoCellular=mSharedPreferences.getBoolean(PREF_BANDWIDTH_NO_CELLULAR_OLD,prefBandwidthNoCellularDefault);  if (!(prefBandwidthDefault.equals(prefBandwidth)) || (prefBandwidthNoCellular != prefBandwidthNoCellularDefault)) {    NetworkPredictionOptions newValue=NetworkPredictionOptions.DEFAULT;    if (isMobileNetworkCapable()) {      if (mSharedPreferences.contains(PREF_BANDWIDTH_OLD)) {        BandwidthType prefetchBandwidthTypePref=BandwidthType.getBandwidthFromTitle(prefBandwidth);        if (BandwidthType.NEVER_PRERENDER.equals(prefetchBandwidthTypePref)) {          newValue=NetworkPredictionOptions.NETWORK_PREDICTION_NEVER;        } else         if (BandwidthType.PRERENDER_ON_WIFI.equals(prefetchBandwidthTypePref)) {          newValue=NetworkPredictionOptions.NETWORK_PREDICTION_WIFI_ONLY;        } else         if (BandwidthType.ALWAYS_PRERENDER.equals(prefetchBandwidthTypePref)) {          newValue=NetworkPredictionOptions.NETWORK_PREDICTION_ALWAYS;        }      }    } else {      if (mSharedPreferences.contains(PREF_BANDWIDTH_NO_CELLULAR_OLD)) {        if (prefBandwidthNoCellular) {          newValue=NetworkPredictionOptions.NETWORK_PREDICTION_WIFI_ONLY;        } else {          newValue=NetworkPredictionOptions.NETWORK_PREDICTION_NEVER;        }      }    }    if (prefService.networkPredictionEnabledHasUserSetting() && !prefService.getNetworkPredictionEnabledUserPrefValue()) {      newValue=NetworkPredictionOptions.NETWORK_PREDICTION_NEVER;    }    prefService.setNetworkPredictionOptions(newValue);  }  SharedPreferences.Editor sharedPreferencesEditor=mSharedPreferences.edit();  if (mSharedPreferences.contains(PREF_BANDWIDTH_OLD)) {    sharedPreferencesEditor.remove(PREF_BANDWIDTH_OLD);  }  if (mSharedPreferences.contains(PREF_BANDWIDTH_NO_CELLULAR_OLD)) {    sharedPreferencesEditor.remove(PREF_BANDWIDTH_NO_CELLULAR_OLD);  }  if (mSharedPreferences.contains(ALLOW_PRERENDER_OLD)) {    sharedPreferencesEditor.remove(ALLOW_PRERENDER_OLD);  }  if (mSharedPreferences.contains(PREF_NETWORK_PREDICTIONS)) {    sharedPreferencesEditor.remove(PREF_NETWORK_PREDICTIONS);  }  sharedPreferencesEditor.apply();}  }
class C{  private void outputSolutions(){  final IBlockingBuffer<IBindingSet[]> sink=context.getSink();  final UnsyncLocalOutputBuffer<IBindingSet> unsyncBuffer=new UnsyncLocalOutputBuffer<IBindingSet>(op.getChunkCapacity(),sink);  state.outputSolutions(unsyncBuffer);  unsyncBuffer.flush();  sink.flush();}  }
class C{  protected void clearOutEvents(){}  }
class C{  public NotificationChain basicSetExpression(Literal newExpression,NotificationChain msgs){  Literal oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String testEMail(){  if (getRequestEMail() == null || getRequestEMail().length() == 0)   return "No Request EMail for " + getName();  EMail email=createEMail(getRequestEMail(),"Adempiere EMail Test","Adempiere EMail Test: " + toString());  if (email == null)   return "Could not create EMail: " + getName();  try {    String msg=email.send();    if (EMail.SENT_OK.equals(msg)) {      log.info("Sent Test EMail to " + getRequestEMail());      return "OK";    } else {      log.warning("Could NOT send Test EMail from " + getSMTPHost() + ": "+ getRequestEMail()+ " ("+ getRequestUser()+ ") to "+ getRequestEMail()+ ": "+ msg);      return msg;    }  } catch (  Exception ex) {    log.severe(getName() + " - " + ex.getLocalizedMessage());    return ex.getLocalizedMessage();  }}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public ExtendedTextSourceLabel(TextSource source,Decoration decorator){  this.source=source;  this.decorator=decorator;  finishInit();}  }
class C{  private static DecimalFormat createFormatter(int precision){  DecimalFormatSymbols symbols=new DecimalFormatSymbols();  symbols.setDecimalSeparator('.');  DecimalFormat format=new DecimalFormat("0." + StringUtil.chars('#',precision),symbols);  format.setDecimalSeparatorAlwaysShown(false);  return format;}  }
class C{  public G createGraph(G2 delegate){  return factory.createGraph(delegate);}  }
class C{  public List<JCTypeParameter> TypeParams(List<Type> typarams){  ListBuffer<JCTypeParameter> tparams=new ListBuffer<JCTypeParameter>();  for (List<Type> l=typarams; l.nonEmpty(); l=l.tail)   tparams.append(TypeParam(l.head.tsym.name,(TypeVar)l.head));  return tparams.toList();}  }
class C{  private static boolean checkNewLineInput(Editable editable,int start,int before,int after){  if (after != 1 || before != 0 || start >= editable.length()) {    return false;  }  if (editable.charAt(start) == '\n') {    return true;  }  return false;}  }
class C{  public InputStream openClassfile(String classname){  String jarname="/" + classname.replace('.','/') + ".class";  return thisClass.getResourceAsStream(jarname);}  }
class C{  public SMSEMOA(Problem problem,Initialization initialization,Variation variation,FitnessEvaluator fitnessEvaluator){  super(problem,new Population(),null,initialization);  this.variation=variation;  this.fitnessEvaluator=fitnessEvaluator;  if (fitnessEvaluator == null) {    selection=new TournamentSelection(new NondominatedSortingComparator());  } else {    selection=new TournamentSelection(new NondominatedFitnessComparator());  }}  }
class C{  public void tagDefineButtonSound(int buttonId,int rollOverSoundId,SoundInfo rollOverSoundInfo,int rollOutSoundId,SoundInfo rollOutSoundInfo,int pressSoundId,SoundInfo pressSoundInfo,int releaseSoundId,SoundInfo releaseSoundInfo) throws IOException {  if (tags != null) {    tags.tagDefineButtonSound(buttonId,rollOverSoundId,rollOverSoundInfo,rollOutSoundId,rollOutSoundInfo,pressSoundId,pressSoundInfo,releaseSoundId,releaseSoundInfo);  }}  }
class C{  public void unsetName(){  this.name=null;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public PowerDecay(double tau,double alpha){  setTau(tau);  setAlpha(alpha);}  }
class C{  public ObjectVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  protected void initProperties(Properties properties){  for (Enumeration keys=properties.keys(); keys.hasMoreElements(); ) {    final String key=(String)keys.nextElement();    final Object iobj=s_propKeys.get(key);    if (iobj != null) {      if (iobj instanceof Integer) {        final int BITFLAG=((Integer)iobj).intValue();        if ((properties.getProperty(key).endsWith("yes"))) {          fFeatures=fFeatures | BITFLAG;        } else {          fFeatures=fFeatures & ~BITFLAG;        }      } else {        if ((DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_FORMAT_PRETTY_PRINT).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setIndent(true);            fSerializer.setIndentAmount(3);          } else {            fSerializer.setIndent(false);          }        } else         if ((DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setOmitXMLDeclaration(true);          } else {            fSerializer.setOmitXMLDeclaration(false);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION).equals(key)) {          String version=properties.getProperty(key);          if ("1.1".equals(version)) {            fIsXMLVersion11=true;            fSerializer.setVersion(version);          } else {            fSerializer.setVersion("1.0");          }        } else         if ((DOMConstants.S_XSL_OUTPUT_ENCODING).equals(key)) {          String encoding=properties.getProperty(key);          if (encoding != null) {            fSerializer.setEncoding(encoding);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setDTDEntityExpansion(false);          } else {            fSerializer.setDTDEntityExpansion(true);          }        } else {        }      }    }  }  if (fNewLine != null) {    fSerializer.setOutputProperty(OutputPropertiesFactory.S_KEY_LINE_SEPARATOR,fNewLine);  }}  }
class C{  public void visitTypeApply(JCTypeApply tree){  JCTree clazz=translate(tree.clazz,null);  result=clazz;}  }
class C{  public void go(File file) throws IOException {  JCardWriter writer=new JCardWriter(file,wrapInArray());  try {    go(writer);  }  finally {    writer.close();  }}  }
class C{  public Iterator<byte[]> keys(final boolean up,final boolean rotating) throws IOException {  return this.table.keys(up,rotating);}  }
class C{  Workflow.Method expandFileSharesMethod(URI uriStorage,URI fileURI,long size){  return new Workflow.Method("expandFS",uriStorage,fileURI,size);}  }
class C{  public MockTokenFilterFactory(Map<String,String> args){  super(args);  String stopset=get(args,"stopset",Arrays.asList("english","empty"),null,false);  String stopregex=get(args,"stopregex");  if (null != stopset) {    if (null != stopregex) {      throw new IllegalArgumentException("Parameters stopset and stopregex cannot both be specified.");    }    if ("english".equalsIgnoreCase(stopset)) {      filter=MockTokenFilter.ENGLISH_STOPSET;    } else {      filter=MockTokenFilter.EMPTY_STOPSET;    }  } else   if (null != stopregex) {    RegExp regex=new RegExp(stopregex);    filter=new CharacterRunAutomaton(regex.toAutomaton());  } else {    throw new IllegalArgumentException("Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.");  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private byte[] createContentDisposition(final String key,final String fileName){  return ("Content-Disposition: form-data; name=\"" + key + "\"; filename=\""+ fileName+ "\"\r\n").getBytes();}  }
class C{  @Override public void respond(String response){  respondWith(getUser().getNick() + ": " + response);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void testDoubleValueNegative1(){  String a="-27467238945";  double result=-2.7467238945E10;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateActions(){  String selectedText=getSelectedText();  if (selectedText == null)   selectedText="";  boolean stuffSelected=!selectedText.equals("");  boolean allSelected=selectedText.equals(getText());  UNDO_ACTION.setEnabled(isEnabled() && isEditable() && isUndoAvailable());  CUT_ACTION.setEnabled(isEnabled() && isEditable() && stuffSelected);  COPY_ACTION.setEnabled(isEnabled() && stuffSelected);  PASTE_ACTION.setEnabled(isEnabled() && isEditable() && isPasteAvailable());  DELETE_ACTION.setEnabled(isEnabled() && stuffSelected);  SELECT_ALL_ACTION.setEnabled(isEnabled() && !allSelected);}  }
class C{  @Override public Collection<V> values(){  throw new RuntimeException();}  }
class C{  @SuppressWarnings("serial") public void testSimpleALPNode(){  final ArbitraryLengthPathNode alpNode=(ArbitraryLengthPathNode)new Helper(){{      tmp=arbitartyLengthPropertyPath(varNode(x),constantNode(b),HelperFlag.ZERO_OR_MORE,joinGroupNode(statementPatternNode(leftVar(),constantNode(c),rightVar(),26)));    }  }.getTmp();  final Set<IVariable<?>> requiredBoundAlpNode=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBoundAlpNode=new HashSet<IVariable<?>>(){{      add(Var.var("x"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBoundAlpNode,alpNode.getRequiredBound(sa));  assertEquals(desiredBoundAlpNode,alpNode.getDesiredBound(sa));}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.PolicyMappings_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public synchronized BaseType createArray(final BaseType elementType,final int numberElements) throws CouldntSaveDataException {  Preconditions.checkNotNull(elementType,"Error: element type argument can not be null.");  final String arrayName=buildArrayName(elementType,numberElements);  final BaseType arrayType=instantiateType(arrayName,elementType.getBitSize() * numberElements,false,null,BaseTypeCategory.ARRAY);  createArrayMember(arrayType,elementType,"array_elements",numberElements);  notifyTypeAdded(arrayType);  return arrayType;}  }
class C{  public void writeToWriter(Writer out) throws IOException {  int ch;  while ((ch=readChar()) >= 0) {    out.write((char)ch);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public FragmentationStats(){  super(Options.set,"Fragmentation Stats","Should we print fragmentation statistics for the free list allocator?",false);}  }
class C{  public boolean saveChunks(boolean p_73151_1_,IProgressUpdate p_73151_2_){  return true;}  }
class C{  private void addSuperBlockStart(int pc){  if (GenerateStackMap) {    if (itsSuperBlockStarts == null) {      itsSuperBlockStarts=new int[SuperBlockStartsSize];    } else     if (itsSuperBlockStarts.length == itsSuperBlockStartsTop) {      int[] tmp=new int[itsSuperBlockStartsTop * 2];      System.arraycopy(itsSuperBlockStarts,0,tmp,0,itsSuperBlockStartsTop);      itsSuperBlockStarts=tmp;    }    itsSuperBlockStarts[itsSuperBlockStartsTop++]=pc;  }}  }
class C{  protected AttributeEvaluator(String expr){  super(expr);}  }
class C{  public void endNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.pop();}  }
class C{  public CertificateExpiredException(String message){  super(message);}  }
class C{  public void drawLine(Graphics graphics,Point p1,Point p2){  graphics.pushState();  graphics.setLineWidth(lineWidth);switch (traceType) {case SOLID_LINE:    graphics.setLineStyle(SWTConstants.LINE_SOLID);  graphics.drawLine(p1,p2);break;case BAR:if (use_advanced_graphics) graphics.setAlpha(areaAlpha);graphics.setLineStyle(SWTConstants.LINE_SOLID);graphics.drawLine(p1,p2);break;case DASH_LINE:graphics.setLineStyle(SWTConstants.LINE_DASH);graphics.drawLine(p1,p2);break;case AREA:int basey;switch (baseLine) {case NEGATIVE_INFINITY:basey=yAxis.getValuePosition(yAxis.getRange().getLower(),false);break;case POSITIVE_INFINITY:basey=yAxis.getValuePosition(yAxis.getRange().getUpper(),false);break;default :basey=yAxis.getValuePosition(0,false);break;}if (use_advanced_graphics) graphics.setAlpha(areaAlpha);graphics.setBackgroundColor(traceColor);graphics.fillPolygon(new int[]{p1.x,p1.y,p1.x,basey,p2.x,basey,p2.x,p2.y});break;case STEP_HORIZONTALLY:graphics.setLineStyle(SWTConstants.LINE_SOLID);graphics.drawLine(p1.x,p1.y,p2.x,p1.y);graphics.drawLine(p2.x,p1.y,p2.x,p2.y);break;case STEP_VERTICALLY:graphics.setLineStyle(SWTConstants.LINE_SOLID);graphics.drawLine(p1.x,p1.y,p1.x,p2.y);graphics.drawLine(p1.x,p2.y,p2.x,p2.y);break;default :break;}graphics.popState();}  }
class C{  private static void updateDebuggerHighlighting(final UnrelocatedAddress address,final NaviNode node,final INaviFunctionNode functionNode){  if (functionNode.getFunction().getAddress().equals(address.getAddress())) {    node.setHighlighting(CHighlightLayers.PROGRAM_COUNTER_LAYER,1,ConfigManager.instance().getDebuggerColorSettings().getActiveLine());  }}  }
class C{  private boolean maybeReconnect(){  if (mAutoReconnect && mBluetoothGatt != null) {    LOG.info("Enabling automatic ble reconnect...");    boolean result=mBluetoothGatt.connect();    if (result) {      setDeviceConnectionState(State.WAITING_FOR_RECONNECT);    }    return result;  }  return false;}  }
class C{  public static void main(String[] args){  new Epoch();}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    Boolean isEnabled=JsonUtils.getBooleanFieldFromJsonObject(jsonObject,"enabled");    if (id != null) {      SuspensionsDao suspensionsDao=new SuspensionsDao();      Suspension suspension=suspensionsDao.getSuspension(id);      name=suspension.getName();    }    SuspensionsDao suspensionsDao=new SuspensionsDao();    Suspension suspension=suspensionsDao.getSuspensionByName(name);    if (suspension == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.Suspensions suspensions=new com.pearson.statsagg.webui.Suspensions();    String result=suspensions.changeSuspensionEnabled(name,isEnabled);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  private static void d_uaColSumGtLe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumLtGeColSumGtLe(0.0,bv,bOp);  int m=in.clen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(0,i);    int cnt=(ai == 0) ? agg0 : sumRowSumLtGeColSumGtLe(ai,bv,bOp);    out.quickSetValue(0,i,cnt);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.753 -0500",hash_original_method="B936E1D4B92F105E0DF31A4819E36563",hash_generated_method="D9B00402E70972A372B16B54B1144946") public synchronized boolean isDestroyed(){  return isDestroyed;}  }
class C{  @Override public void update(final Collection<SolrInputDocument> solrdoc) throws IOException, SolrException {  Collection<SolrInputDocument> docs=new ArrayList<>(solrdoc.size());  for (  SolrInputDocument doc : solrdoc)   docs.add(partialUpdatePatch(doc));  this.add(docs);}  }
class C{  public Path createClasspath(){  if (compileClasspath == null) {    compileClasspath=new Path(getProject());  }  return compileClasspath.createPath();}  }
class C{  public void revokeAuthorization(String userId) throws IOException {  Preconditions.checkNotNull(userId);  if (tokenStore == null) {    throw new IllegalStateException("Method cannot be called if token store is not specified.");  }  String tokenData=tokenStore.load(userId);  if (tokenData == null) {    return;  }  IOException deleteTokenException=null;  try {    tokenStore.delete(userId);  } catch (  IOException e) {    deleteTokenException=e;  }  GenericJson tokenJson=OAuth2Utils.parseJson(tokenData);  String accessTokenValue=OAuth2Utils.validateOptionalString(tokenJson,"access_token",TOKEN_STORE_ERROR);  String refreshToken=OAuth2Utils.validateOptionalString(tokenJson,"refresh_token",TOKEN_STORE_ERROR);  String revokeToken=(refreshToken != null) ? refreshToken : accessTokenValue;  GenericUrl revokeUrl=new GenericUrl(OAuth2Utils.TOKEN_REVOKE_URI);  revokeUrl.put("token",revokeToken);  HttpRequestFactory requestFactory=transportFactory.create().createRequestFactory();  HttpRequest tokenRequest=requestFactory.buildGetRequest(revokeUrl);  tokenRequest.execute();  if (deleteTokenException != null) {    throw deleteTokenException;  }}  }
class C{  RestaurantHolder rating(float rating){  if (rating > 0.0f) {    detail.setText(mContext.getString(R.string.rating,rating));    detail.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_important_small,0,0,0);  } else {    detail.setText(" ");    detail.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);  }  detailIsAddress=false;  return this;}  }
class C{  public RequestSpec<T_Response> pathParam(final String key,final String value){  pathParams.add(key,value);  return reset();}  }
class C{  public static TimeDuration fromNumber(Number number){  return number == null ? ZeroTimeDuration : fromLong(number.longValue());}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  private void emitCodeLines(final HtmlEscapeStringBuilder out,final Line lines,final String meta){  Line line=lines;  final ArrayList<String> list=new ArrayList<>();  while (line != null) {    if (line.isEmpty) {      list.add("");    } else {      list.add(line.value);    }    line=line.next;  }  this.config.codeBlockEmitter.emitBlock(out,list,meta);}  }
class C{  public static void main(String[] args) throws Exception {  new ReferenceSetMerger().start(args);}  }
class C{  public void addToReceivers(String elem){  if (this.receivers == null) {    this.receivers=new ArrayList<String>();  }  this.receivers.add(elem);}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  if (keyComparator != null) {    Multimap<K,V> sortedCopy=MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K,V>build();    List<Map.Entry<K,Collection<V>>> entries=Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(builderMultimap.asMap().entrySet());    for (    Map.Entry<K,Collection<V>> entry : entries) {      sortedCopy.putAll(entry.getKey(),entry.getValue());    }    builderMultimap=sortedCopy;  }  return copyOf(builderMultimap,valueComparator);}  }
class C{  private void initIndexing(){  searchService.initIndexForFulltextSearch(false);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  String countString=getCountString(transformer,sourceNode);  try {    transformer.getResultTreeHandler().characters(countString.toCharArray(),0,countString.length());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  protected OnAudioAction(SwingSet2 swingset){  super("Audio On");  this.swingset=swingset;}  }
class C{  private static void adjust(Comparable[] array,int lower,int upper){  int j, k;  Comparable temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (array[k - 1].compareTo(array[k]) < 0)) {      k+=1;    }    if (array[j - 1].compareTo(array[k - 1]) < 0) {      temp=array[j - 1];      array[j - 1]=array[k - 1];      array[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  public void testDiscriminatingConsumer() throws Exception {  consumerConnection=createConnection();  consumerConnection.start();  LOG.info("consumerConnection = " + consumerConnection);  try {    Thread.sleep(1000);  } catch (  Exception e) {  }  Consumer consumer=new Consumer(consumerConnection,JMSTYPE_EATME);  Thread consumerThread=new Thread(consumer);  consumerThread.start();  producerConnection=createConnection();  producerConnection.start();  LOG.info("producerConnection = " + producerConnection);  try {    Thread.sleep(3000);  } catch (  Exception e) {  }  Producer producer=new Producer(producerConnection);  Thread producerThread=new Thread(producer);  producerThread.start();  consumerThread.join();  producer.stop=true;  if (consumer.getCount() == (testSize / 2)) {    LOG.info("test complete .... all messsages consumed!!");  } else {    LOG.info("test failed .... Sent " + testSize + " original messages, only half of which ("+ (testSize / 2)+ ") were intended to be consumed: consumer paused at: "+ consumer.getCount());  }  assertTrue("Sent " + testSize + " original messages, only half of which ("+ (testSize / 2)+ ") were intended to be consumed: consumer paused at: "+ consumer.getCount(),(consumer.getCount() == (testSize / 2)));  assertTrue("Delivery of messages to consumer was halted during this test as it only wants half",consumer.deliveryHalted());}  }
class C{  public void addMaterializationValue(JavaConstant value){  if (numMaterializationValuesAdded == 0) {    materializedValue=value;  } else {    materializedValue=null;  }  numMaterializationValuesAdded++;}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <S extends Declaration,S2 extends S>SymbolReference<S> solved(S2 symbolDeclaration){  return new SymbolReference(Optional.of(symbolDeclaration));}  }
class C{  private void disableAccessibilityAndMockAccessibilityService(){  Settings.Secure.putInt(getActivity().getContentResolver(),Settings.Secure.ACCESSIBILITY_ENABLED,0);  Settings.Secure.putString(getActivity().getContentResolver(),Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,"");}  }
class C{  public final void negate(Matrix4f m1){  this.m00=-m1.m00;  this.m01=-m1.m01;  this.m02=-m1.m02;  this.m03=-m1.m03;  this.m10=-m1.m10;  this.m11=-m1.m11;  this.m12=-m1.m12;  this.m13=-m1.m13;  this.m20=-m1.m20;  this.m21=-m1.m21;  this.m22=-m1.m22;  this.m23=-m1.m23;  this.m30=-m1.m30;  this.m31=-m1.m31;  this.m32=-m1.m32;  this.m33=-m1.m33;}  }
class C{  public NodeSetDTM(DTMIterator ni){  super();  m_manager=ni.getDTMManager();  m_root=ni.getRoot();  addNodes(ni);}  }
class C{  Node<K,V> find(K key,boolean create){  Comparator<? super K> comparator=this.comparator;  Node<K,V>[] table=this.table;  int hash=secondaryHash(key.hashCode());  int index=hash & (table.length - 1);  Node<K,V> nearest=table[index];  int comparison=0;  if (nearest != null) {    @SuppressWarnings("unchecked") Comparable<Object> comparableKey=(comparator == NATURAL_ORDER) ? (Comparable<Object>)key : null;    while (true) {      comparison=(comparableKey != null) ? comparableKey.compareTo(nearest.key) : comparator.compare(key,nearest.key);      if (comparison == 0) {        return nearest;      }      Node<K,V> child=(comparison < 0) ? nearest.left : nearest.right;      if (child == null) {        break;      }      nearest=child;    }  }  if (!create) {    return null;  }  Node<K,V> header=this.header;  Node<K,V> created;  if (nearest == null) {    if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {      throw new ClassCastException(key.getClass().getName() + " is not Comparable");    }    created=new Node<K,V>(nearest,key,hash,header,header.prev);    table[index]=created;  } else {    created=new Node<K,V>(nearest,key,hash,header,header.prev);    if (comparison < 0) {      nearest.left=created;    } else {      nearest.right=created;    }    rebalance(nearest,true);  }  if (size++ > threshold) {    doubleCapacity();  }  modCount++;  return created;}  }
class C{  public static Result createInfoResult(String message){  InfoResultData infoResultData=new InfoResultData();  infoResultData.addLine(message);  return buildResult(infoResultData);}  }
class C{  protected final void FPR2GPR_32(Instruction s){  int offset=burs.ir.stackManager.allocateSpaceForConversion();  Register FP=regpool.getPhysicalRegisterSet().asPPC().getFP();  RegisterOperand val=(RegisterOperand)Unary.getClearVal(s);  EMIT(MIR_Store.create(PPC_STFS,val,A(FP),IC(offset),null,TG()));  EMIT(MIR_Load.mutate(s,PPC_LWZ,Unary.getClearResult(s),A(FP),IC(offset),null,TG()));}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public void test_engineCreateSSLEngine_01(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLEngine sleng=ssl.engineCreateSSLEngine();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  private void biomeFactor(final int x,final int z,final double addHeight){  float smoothVolatility=0.0F;  float smoothHeight=0.0F;  float biomeWeightSum=0.0F;  final Biome centerBiomeConfig=getCenterBiome(x,z);  final int lookRadius=this.maxSmoothRadius;  for (int nextX=-lookRadius; nextX <= lookRadius; nextX++) {    for (int nextZ=-lookRadius; nextZ <= lookRadius; nextZ++) {      final Biome biome=getOffsetBiome(x,z,nextX,nextZ);      final float biomeHeight=biome.height;      final float biomeVolatility=biome.volatility;      double biomeWeight=calcBiomeWeight(nextX,nextZ,biomeHeight);      biomeWeight=Math.abs(biomeWeight);      if (biomeHeight > centerBiomeConfig.height) {        biomeWeight/=2.0F;      }      smoothVolatility+=biomeVolatility * biomeWeight;      smoothHeight+=biomeHeight * biomeWeight;      biomeWeightSum+=biomeWeight;    }  }  smoothVolatility/=biomeWeightSum;  smoothHeight/=biomeWeightSum;  this.biomeVolatility=smoothVolatility * 0.9 + 0.1;  this.biomeVolatility*=4.0 / 3.0;  this.biomeHeight=0.75 / 64.0;  this.biomeHeight+=smoothHeight * 17.0 / 64.0;  this.biomeHeight+=0.2 * addHeight * 17.0 / 64.0;}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true;  if (getComponent().getTextbox().getValue() != null)   if (m_oldText != null)   return !m_oldText.equals(getComponent().getTextbox().getValue()); else   return true; else   if (m_oldText != null)   return true;  if (m_pAttributeWhere != null)   if (m_oldWhere != null)   return !m_oldWhere.equals(m_pAttributeWhere); else   return true; else   if (m_oldWhere != null)   return true;  return false;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public JCriteriumTreeModel(final JTree jtree,final CCriteriumTree criteriumTree,final List<ICriteriumCreator> criteria){  super(new JCriteriumTreeNode(criteriumTree,criteriumTree.getRoot().getCriterium(),criteria));  m_jtree=jtree;  m_criteriumTree=criteriumTree;  m_criteria=criteria;  m_criteriumTree.addListener(m_internalTreeListener);}  }
class C{  public void truncate(long length) throws SQLException {  throw new FBDriverNotCapableException("Method truncate(long) is not supported");}  }
class C{  private void findKHitMiss(int instNum){  int i, j;  int cl;  double ww;  double temp_diff=0.0;  Instance thisInst=m_trainInstances.instance(instNum);  for (i=0; i < m_numInstances; i++) {    if (i != instNum) {      Instance cmpInst=m_trainInstances.instance(i);      temp_diff=distance(cmpInst,thisInst);      if (m_numericClass) {        cl=0;      } else {        cl=(int)m_trainInstances.instance(i).value(m_classIndex);      }      if (m_stored[cl] < m_Knn) {        m_karray[cl][m_stored[cl]][0]=temp_diff;        m_karray[cl][m_stored[cl]][1]=i;        m_stored[cl]++;        for (j=0, ww=-1.0; j < m_stored[cl]; j++) {          if (m_karray[cl][j][0] > ww) {            ww=m_karray[cl][j][0];            m_index[cl]=j;          }        }        m_worst[cl]=ww;      } else {        if (temp_diff < m_karray[cl][m_index[cl]][0]) {          m_karray[cl][m_index[cl]][0]=temp_diff;          m_karray[cl][m_index[cl]][1]=i;          for (j=0, ww=-1.0; j < m_stored[cl]; j++) {            if (m_karray[cl][j][0] > ww) {              ww=m_karray[cl][j][0];              m_index[cl]=j;            }          }          m_worst[cl]=ww;        }      }    }  }}  }
class C{  protected Matrix secureSubtract(Matrix a){  return new Matrix(subtractComponents(a));}  }
class C{  public static String removeChar(char c,String string){  int nextChar=string.indexOf(c);  if (nextChar == -1)   return string;  int start=0;  StringBuilder ret=new StringBuilder(string.length() - 1);  while (nextChar != -1) {    ret.append(string,start,nextChar);    start=nextChar + 1;    nextChar=string.indexOf(c,start);  }  ret.append(string,start,string.length());  return ret.toString();}  }
class C{  public static void clearAssertionInformation(){  _AssertInfos.clear();  _AssertOccured=false;}  }
class C{  private Geometry changePM(Geometry geom,PrecisionModel newPM){  GeometryEditor geomEditor=createEditor(geom.getFactory(),newPM);  return geomEditor.edit(geom,new GeometryEditor.NoOpGeometryOperation());}  }
class C{  public void deleteOneToOneFileTransfers(ContactId contact) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteOneToOneFileTransfers2(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  protected void writeDDSPixelFormat(DDSPixelFormat pixelFormat,java.nio.ByteBuffer buffer){  int pos=buffer.position();  buffer.putInt(pixelFormat.getSize());  buffer.putInt(pixelFormat.getFlags());  buffer.putInt(pixelFormat.getFourCC());  buffer.putInt(pixelFormat.getRGBBitCount());  buffer.putInt(pixelFormat.getRBitMask());  buffer.putInt(pixelFormat.getGBitMask());  buffer.putInt(pixelFormat.getBBitMask());  buffer.putInt(pixelFormat.getABitMask());  buffer.position(pos + pixelFormat.getSize());}  }
class C{  public Software findByMachineAndAndByMediaTypeAndByName(Machine machine,MediaDevice mediaDevice,String softwareName) throws IOException, InterruptedException, MachineDoesntExistException, MachineHasNoSoftwareListException, SoftwareNotFoundInSoftwareListsException {  SoftwareListsXmlContainer slxc=this.getSoftwareLists(machine);  for (  SoftwareList sl : slxc.getSoftwareLists()) {    for (    Software s : sl.getSoftwares()) {      if (s.getName().equals(softwareName) && s.getMediaInterface().equals(mediaDevice.getMediaInterface())) {        s.setMachine(machine);        s.setSoftwareList(sl);        if (s.isAClone()) {          s.setOriginal(this.findByMachineAndAndByMediaTypeAndByName(machine,mediaDevice,s.getCloneof()));        }        return s;      }    }  }  throw new SoftwareNotFoundInSoftwareListsException(String.format("The software '%s' has not been found on '%s' " + " software lists",softwareName,machine.getDescription()));}  }
class C{  public JdpJmxPacket(byte[] data) throws JdpException {  JdpPacketReader reader;  reader=new JdpPacketReader(data);  Map<String,String> p=reader.getDiscoveryDataAsMap();  String sId=p.get(UUID_KEY);  this.id=(sId == null) ? null : UUID.fromString(sId);  this.jmxServiceUrl=p.get(JMX_SERVICE_URL_KEY);  this.mainClass=p.get(MAIN_CLASS_KEY);  this.instanceName=p.get(INSTANCE_NAME_KEY);  this.processId=p.get(PROCESS_ID_KEY);  this.rmiHostname=p.get(RMI_HOSTNAME_KEY);  this.broadcastInterval=p.get(BROADCAST_INTERVAL_KEY);}  }
class C{  public static double nextDouble(){synchronized (random) {    return random.nextDouble();  }}  }
class C{  public void createBufferStrategy(int numBuffers,BufferCapabilities caps) throws AWTException {  super.createBufferStrategy(numBuffers,caps);}  }
class C{  public void onTick(){  lightLevel=getMobEquipMaxLight(entity);  if (entity.getEntityData().getString("InfernalMobsMod") != null) {    lightLevel=15;  }  if (!enabled && lightLevel > 0) {    enableLight();  } else   if (enabled && lightLevel < 1) {    disableLight();  }}  }
class C{  public final void shiftColumnDown(int row,int col,int numRowsShifted){  if (row >= getNumRows() || col >= getNumColumns()) {    throw new IllegalArgumentException("Out of range:  row = " + row + " col = "+ col);  }  int lastRow=-1;  for (int i=getNumRows() - 1; i >= row; i--) {    if (data[i][col] != null) {      lastRow=i;      break;    }  }  if (lastRow == -1) {    return;  }  resize(getNumRows() + numRowsShifted,getNumColumns());  for (int i=getNumRows() - 1; i >= row + numRowsShifted; i--) {    data[i][col]=data[i - numRowsShifted][col];    data[i - numRowsShifted][col]=null;  }}  }
class C{  public String readConfigName(SolrZkClient zkClient,String collection) throws KeeperException, InterruptedException {  if (collection == null) {    throw new IllegalArgumentException("collection must not be null");  }  String configName=null;  collection=checkForAlias(zkClient,collection);  String path=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection;  if (LOG.isInfoEnabled()) {    LOG.info("Load collection config from:" + path);  }  byte[] data=zkClient.getData(path,null,null,true);  if (data != null) {    ZkNodeProps props=ZkNodeProps.load(data);    configName=props.getStr(ZkController.CONFIGNAME_PROP);  }  if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + "/" + configName,true)) {    LOG.error("Specified config does not exist in ZooKeeper:" + configName);    throw new IllegalArgumentException("Specified config does not exist in ZooKeeper:" + configName);  }  return configName;}  }
class C{  public void stepLeft(boolean shiftDown){  if (shiftDown)   viewpointNode.drag(-1,0); else   viewpointNode.rotate(0,1);}  }
class C{  public final void writeByte(int v) throws IOException {  write(v);}  }
class C{  public void addCatchClause(CatchClause clause){  assertNotNull(clause);  if (catchClauses == null) {    catchClauses=new ArrayList<CatchClause>();  }  catchClauses.add(clause);  clause.setParent(this);}  }
class C{  public EditorType readPref(){  final EditorPreferences editorPreferences=this.preferenceReader.getPreferences();  return readPref(editorPreferences);}  }
class C{  public boolean isParent(int p,int c){  return (this.getEdges().getDoubleValue(p,c) != 0.0);}  }
class C{  protected void analyze(Class<?> dto){  this.dtoModels.add(new DtoModel(dto));}  }
class C{  public static void appendMultiKtab(String tab,KDC... kdcs) throws IOException, KrbException {  for (  KDC kdc : kdcs) {    kdc.writeKtab(tab,true);  }}  }
class C{  public Label(Image icon){  this("");  this.icon=icon;  if (icon != null && icon.requiresDrawImage()) {    legacyRenderer=true;  }  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  @Override public void onPackageUpdateFinished(String packageName,int uid){synchronized (mLock) {    if (packageName.equals(mPackageName)) {      unbindLocked();    }    bindBestPackageLocked(null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.870 -0500",hash_original_method="89453F92BB4E447EC0C2A9408EB7187A",hash_generated_method="268DE9DA1BF629AF38FBAE0685B0BC27") public void removeEntry(String entryName){  mNamedGestures.remove(entryName);  mClassifier.removeInstances(entryName);  mChanged=true;}  }
class C{  static HttpServer startHttpServer() throws IOException {  HttpServer httpServer=HttpServer.create(new InetSocketAddress(0),0);  HttpHandler httpHandler=new SimpleHandler();  httpServer.createContext("/chunked/",httpHandler);  httpServer.start();  return httpServer;}  }
class C{  public void save(){  doSave();  messages.info("Project " + project.getName() + " has been saved.");}  }
class C{  public static boolean isSubtype(ReferenceType t,ReferenceType possibleSupertype) throws ClassNotFoundException {  return Global.getAnalysisCache().getDatabase(Subtypes2.class).isSubtype(t,possibleSupertype);}  }
class C{  public CheckedCollection(Collection<E> c,Class<E> type){  if (c == null || type == null) {    throw new NullPointerException();  }  this.c=c;  this.type=type;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override protected void readNdefMessage(Message message){  if (message.size() > 1) {    toast(getString(R.string.readMultipleRecordNDEFMessage));  } else {    toast(getString(R.string.readSingleRecordNDEFMessage));  }}  }
class C{  public static <K,O>Map<K,List<O>> groupBy(Iterable<O> objs,String field) throws Exception {  Class c=objs.iterator().next().getClass();  Method[] methods=c.getDeclaredMethods();  String trgMethName="get" + field;  Method trgMeth=null;  Field trgField=null;  for (  Method m : methods) {    if (m.getName().equalsIgnoreCase(trgMethName)) {      trgMeth=m;      break;    }  }  if (trgMeth == null) {    Field[] fields=c.getDeclaredFields();    for (    Field f : fields) {      if (f.getName().equalsIgnoreCase(field)) {        trgField=f;        break;      }    }  }  if (trgMeth == null && trgField == null) {    throw new RuntimeException("Couldn't find field or method to access " + field);  }  Map<K,List<O>> map=new HashMap<K,List<O>>();  for (  O obj : objs) {    K key=null;    try {      if (trgMeth != null) {        key=(K)trgMeth.invoke(obj);      } else {        key=(K)trgField.get(obj);      }    } catch (    Exception e) {      throw new RuntimeException();    }    CollectionUtils.addToValueList(map,key,obj);  }  return map;}  }
class C{  public String convertBidiLogicalToVisual(String s){  return impl.convertBidiLogicalToVisual(s);}  }
class C{  private void updateCurrentActionsList(){  currentActionListModel.clear();  for (  UpdateAction action : workspace.getUpdater().getUpdateManager().getActionList()) {    currentActionListModel.addElement(action);  }  repaint();}  }
class C{  public static List<Model> listDir2(File f,Activity caller){  File[] files=f.listFiles();  List<Model> fileList=new ArrayList<Model>();  for (  File file : files) {    if (!file.getName().matches(Constants.FILE_NAME_PATTERN)) {      Log.d(Constants.TAG,String.format("'%s' didn't match the file name pattern",file.getName()));      continue;    }    Model mModel=new Model(file.getName());    String phoneNum=mModel.getCallName().substring(16,mModel.getCallName().length() - 4);    mModel.setUserNameFromContact(getContactName(phoneNum,caller));    fileList.add(mModel);  }  Collections.sort(fileList);  Collections.sort(fileList,Collections.reverseOrder());  return fileList;}  }
class C{  public static void checkCreateFileOK(Resource resource,boolean createParentWhenNotExists) throws IOException {  if (resource.exists()) {    if (resource.isDirectory())     throw new IOException("can't create file [" + resource.getPath() + "], resource already exists as a directory");    if (resource.isFile())     throw new IOException("can't create file [" + resource.getPath() + "], file already exists");  }  Resource parent=resource.getParentResource();  if (parent != null) {    if (!parent.exists()) {      if (createParentWhenNotExists)       parent.createDirectory(true); else       throw new IOException("can't create file [" + resource.getPath() + "], missing parent directory");    } else     if (parent.isFile()) {      throw new IOException("can't create file [" + resource.getPath() + "], parent is a file");    }  }}  }
class C{  void allocScore(){  int maxWidth=0;  Rect widest=null;  for (int i=0; i < 10; i++) {    Rect boundsRect=mTextRes.getTextureRect(TextResources.DIGIT_START + i);    int rectWidth=boundsRect.width();    if (maxWidth < rectWidth) {      maxWidth=rectWidth;      widest=boundsRect;    }  }  float widthHeightRatio=(float)widest.width() / widest.height();  float cellHeight=ARENA_HEIGHT * SCORE_HEIGHT_PERC;  float cellWidth=cellHeight * widthHeightRatio * 1.05f;  float top=SCORE_TOP;  float right=SCORE_RIGHT;  for (int i=0; i < NUM_SCORE_DIGITS; i++) {    mScoreDigits[i]=new TexturedAlignedRect();    mScoreDigits[i].setTexture(mTextRes.getTextureHandle(),mTextRes.getTextureWidth(),mTextRes.getTextureHeight());    mScoreDigits[i].setPosition(SCORE_RIGHT - (i * cellWidth) - cellWidth / 2,SCORE_TOP - cellHeight / 2);  }}  }
class C{  public int removeAllListeners(){  int count=this.listeners.size();  this.listeners.clear();  return count;}  }
class C{  @Override public void reset(){}  }
class C{  void runControler(ActivityFacilitiesImpl zones,ActivityFacilitiesImpl parcels,ActivityFacilitiesImpl opportunities){  Controler controler=new Controler(scenario);  if (ConfigUtils.addOrGetModule(scenario.getConfig(),Matsim4UrbansimConfigGroup.GROUP_NAME,Matsim4UrbansimConfigGroup.class).isUsingRoadPricing()) {    controler.setModules(new ControlerDefaultsWithRoadPricingModule());  }  controler.getConfig().controler().setOverwriteFileSetting(OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles);  controler.getConfig().controler().setCreateGraphs(true);  PtMatrix ptMatrix=null;  MatrixBasedPtRouterConfigGroup ippcm=ConfigUtils.addOrGetModule(scenario.getConfig(),MatrixBasedPtRouterConfigGroup.GROUP_NAME,MatrixBasedPtRouterConfigGroup.class);  if (ippcm.getPtStopsInputFile() != null) {    log.info("Initializing MATSim4UrbanSim pseudo pt router ...");    BoundingBox nbb=BoundingBox.createBoundingBox(controler.getScenario().getNetwork());    ptMatrix=PtMatrix.createPtMatrix(controler.getScenario().getConfig().plansCalcRoute(),nbb,ConfigUtils.addOrGetModule(controler.getScenario().getConfig(),MatrixBasedPtRouterConfigGroup.GROUP_NAME,MatrixBasedPtRouterConfigGroup.class));    controler.addOverridingModule(new MatrixBasedPtModule());    log.error("reconstructing pt route distances; not tested ...");    for (    Person person : scenario.getPopulation().getPersons().values()) {      for (      Plan plan : person.getPlans()) {        for (        PlanElement pe : plan.getPlanElements()) {          if (pe instanceof Leg) {            Leg leg=(Leg)pe;            if (leg.getMode().equals(TransportMode.pt)) {              final Leg leg2=leg;              Activity fromAct=PopulationUtils.getPreviousActivity(((Plan)plan),leg2);              final Leg leg1=leg;              Activity toAct=PopulationUtils.getNextActivity(((Plan)plan),leg1);              Route route=leg.getRoute();              route.setDistance(ptMatrix.getPtTravelDistance_meter(fromAct.getCoord(),toAct.getCoord()));            }          }        }      }    }  }  log.info("Adding controler listener ...");  addControlerListener(zones,parcels,opportunities,controler,ptMatrix);  addFurtherControlerListener(zones,parcels,controler);  log.info("Adding controler listener done!");  controler.run();}  }
class C{  @Override public RegularTimePeriod next(){  Hour result;  if (this.hour != LAST_HOUR_IN_DAY) {    result=new Hour(this.hour + 1,this.day);  } else {    Day nextDay=(Day)this.day.next();    if (nextDay != null) {      result=new Hour(FIRST_HOUR_IN_DAY,nextDay);    } else {      result=null;    }  }  return result;}  }
class C{  public CargoBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  this.bayNumber=bayNumber;}  }
class C{  public LongTermCredentialSession(LongTermCredential longTermCredential,byte[] realm){  this.longTermCredential=longTermCredential;  this.realm=(realm == null) ? null : realm.clone();}  }
class C{  public static LeftIndexedPowerLawMultiSegmentBipartiteGraph buildRandomMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int leftSize,int rightSize,double edgeProbability,Random random){  LeftIndexedPowerLawMultiSegmentBipartiteGraph multiSegmentLeftIndexedPowerLawBipartiteGraph=new LeftIndexedPowerLawMultiSegmentBipartiteGraph(maxNumSegments,maxNumEdgesPerSegment,leftSize / 2,(int)(rightSize * edgeProbability / 2),2.0,rightSize / 2,new IdentityEdgeTypeMask(),new NullStatsReceiver());  for (int i=0; i < leftSize; i++) {    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        multiSegmentLeftIndexedPowerLawBipartiteGraph.addEdge(i,j,(byte)0);      }    }  }  return multiSegmentLeftIndexedPowerLawBipartiteGraph;}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor,Vector2 axis){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  localAxisA.set(bodyA.getLocalVector(axis));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public static void showKeyboard(Context context,View field){  try {    field.requestFocus();    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.showSoftInput(field,InputMethodManager.SHOW_IMPLICIT);  } catch (  Exception ex) {    Log.e("Caffeine","Error occurred trying to show the keyboard.  Exception=" + ex);  }}  }
class C{  public Coordinate(Coordinate c){  this(c.x,c.y,c.z);}  }
class C{  public boolean isFailed(){  return failure != null;}  }
class C{  public SortedInputIterator(Directory tempDir,String tempFileNamePrefix,InputIterator source,Comparator<BytesRef> comparator) throws IOException {  this.hasPayloads=source.hasPayloads();  this.hasContexts=source.hasContexts();  this.source=source;  this.comparator=comparator;  this.tempDir=tempDir;  this.tempFileNamePrefix=tempFileNamePrefix;  this.reader=sort();}  }
class C{  public NamedList<Object> convertToNamedList(){  NamedList<Object> newList=new SimpleOrderedMap<>();  newList.add(PivotListEntry.FIELD.getName(),parentPivot.field);  newList.add(PivotListEntry.VALUE.getName(),value);  newList.add(PivotListEntry.COUNT.getName(),count);  if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {    newList.add(PivotListEntry.PIVOT.getName(),childPivot.convertToListOfNamedLists());  }  return newList;}  }
class C{  @SuppressWarnings("WrongConstant") public View focusNextView(){  if (getImeActionId() == EditorInfo.IME_ACTION_GO) {    return null;  }  View next;  try {    next=focusSearch(View.FOCUS_FORWARD);  } catch (  IllegalArgumentException e) {    next=focusSearch(View.FOCUS_DOWN);  }  if (next != null && next.requestFocus()) {    return next;  }  return null;}  }
class C{  public void put(Operation oOperation,double fValue){  if (oOperation.m_nOperation == Operation.OPERATION_ADD) {    m_fDeltaScoreAdd[oOperation.m_nTail][oOperation.m_nHead]=fValue;  } else {    m_fDeltaScoreDel[oOperation.m_nTail][oOperation.m_nHead]=fValue;  }}  }
class C{  public void snippetResin3xStartAndStopTyped(){  Deployable war=new WAR("path/to/simple.war");  LocalConfiguration configuration=new Resin3xStandaloneLocalConfiguration("target/myresin3x");  configuration.addDeployable(war);  InstalledLocalContainer container=new Resin3xInstalledLocalContainer(configuration);  container.setHome("c:/apps/resin-3.0.18");  container.start();  container.stop();}  }
class C{  protected boolean hasPlainGetMethod(){  return wrapper.getClassIntrospector().get(object.getClass()).get(ClassIntrospector.GENERIC_GET_KEY) != null;}  }
class C{  public static List<Trip> createTripCollection(String sourceTripFile){  List<Trip> tripCollection=new ArrayList<>();  FileReader reader;  try {    reader=new FileReader(sourceTripFile);    BufferedReader readsLines=new BufferedReader(reader);    String newLine=readsLines.readLine();    newLine=readsLines.readLine();    while (newLine != null) {      try {        tripCollection.add(Trip.parseTrip(newLine));      } catch (      Exception e) {        if (!alreadyWarned) {          log.error("Trip file contains entries that can not be read.");          alreadyWarned=true;        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  return tripCollection;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  CipherSuiteList(CipherSuite suite){  cipherSuites=new ArrayList<CipherSuite>(1);  cipherSuites.add(suite);}  }
class C{  public void log(Level logLevel,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public void logStorage(){  Log.d("StorageDelegator","storage dirty? " + isDirty());  Log.d("StorageDelegator","currentStorage");  currentStorage.logStorage();  Log.d("StorageDelegator","apiStorage");  apiStorage.logStorage();}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystemVirtualPool(URI storageSystemId,URI virtualPoolId){  UnManagedVolumeList response=client.get(UnManagedVolumeList.class,PathConstants.UNMANAGED_VOLUME_BY_STORAGE_SYSTEM_AND_VIRTUAL_POOL_URL,storageSystemId,virtualPoolId);  return ResourceUtils.defaultList(response.getNamedUnManagedVolumes());}  }
class C{  public void prepConfirmPane(boolean onlyChanges){  if (log.isDebugEnabled()) {    log.debug("start prepReadPane with onlyChanges=" + onlyChanges);  }  justChanges=onlyChanges;  enableButtons(false);  if (isCvTablePane) {    setCvListFromTable();  }  if (justChanges) {    confirmChangesButton.setEnabled(true);    confirmChangesButton.setSelected(true);  } else {    confirmAllButton.setSelected(true);    confirmAllButton.setEnabled(true);  }  if (container.isBusy() == false) {    container.enableButtons(false);  }  setToRead(justChanges,true);  varListIndex=0;  cvListIterator=cvList.iterator();  indexedCvListIndex=0;}  }
class C{  private static void _registerTypeMapping(RPCServer server,Class clazz){  if (clazz == null)   return;  if (!isComplexType(clazz)) {    if (clazz.isArray()) {      _registerTypeMapping(server,clazz.getComponentType());    }    return;  }  server.registerTypeMapping(clazz);  registerTypeMapping(server,clazz);}  }
class C{  public static void transformedImplicitElse(){  transformedImplicitElse++;}  }
class C{  private void readConsistMemory(int consistNum,int eNum){  if (consistNum > CONSIST_MAX || consistNum < CONSIST_MIN) {    log.error("Requesting consist " + consistNum + " out of range");    return;  }  if (!readWait()) {    log.error("Time out reading NCE command station consist memory");    return;  }  _locoNum=eNum;  int nceMemAddr=(consistNum * 2) + CS_CONSIST_MEM;  if (eNum == REAR) {    nceMemAddr=(consistNum * 2) + CS_CON_MEM_REAR;  }  if (eNum == MID) {    nceMemAddr=(consistNum * 8) + CS_CON_MEM_MID;  }  if (eNum == LEAD || _validConsist) {    byte[] bl=NceBinaryCommand.accMemoryRead(nceMemAddr);    sendNceMessage(bl,REPLY_16);  }}  }
class C{  private void fillSysInfo(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.VERSION,SymphonyServletListener.VERSION);  dataModel.put(Common.ONLINE_VISITOR_CNT,optionQueryService.getOnlineVisitorCount());  final JSONObject statistic=optionQueryService.getStatistic();  dataModel.put(Option.CATEGORY_C_STATISTIC,statistic);}  }
class C{  public static String bytesToHexString(byte[] bytes){  if (bytes == null) {    return null;  }  final StringBuilder hex=new StringBuilder(bytes.length * 2);  int nibble1, nibble2;  for (  byte b : bytes) {    nibble1=(b >>> 4) & 0xf;    nibble2=b & 0xf;    hex.append(HEX_ALPHABET[nibble1]);    hex.append(HEX_ALPHABET[nibble2]);  }  return hex.toString();}  }
class C{  public int startupNewWorker(final int priority,final String tcpUri,final String temporaryDirectory,boolean masterWorker){  this.masterWorker=masterWorker;  int actualWorkersStarted=startupNewWorker(priority,tcpUri,temporaryDirectory);  this.masterWorker=false;  return actualWorkersStarted;}  }
class C{  public static Set<String> validateValues(String[] values){  Set<String> valuesList=new HashSet<String>();  if (values != null) {    for (    String value : values) {      value=cleanQueryString(value);      if (value != null && !"".equals(value)) {        valuesList.add(value);      }    }  }  return valuesList;}  }
class C{  public IssueMatcher type(CheckType expectedType){  return addEqualsMatcher("type",expectedType,null);}  }
class C{  public List<ServiceProcess> searchProcess(long groupId,String keywords,int start,int end){  return serviceProcessFinder.searchProcess(groupId,keywords,start,end);}  }
class C{  Restriction(String whereClause,boolean andCondition,int depth){  DirectWhereClause=whereClause;  this.andCondition=andCondition;  this.joinDepth=depth;}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public void sort(boolean descending){  TreeMap<String,Object> treeMap=new TreeMap<>();  treeMap.putAll(mValues);  if (descending) {    treeMap.descendingMap();  }  mValues.clear();  mValues.putAll(treeMap);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)null);  return;}super.eUnset(featureID);}  }
class C{  static <T0>Tuple1OfNullables<T0> ofNullables(T0 e0){  return new Tuple1OfNullablesImpl<>(e0);}  }
class C{  public Datastore createVmfsDatastore(HostScsiDisk disk,String datastoreName){  VmfsDatastoreCreateSpec createSpec=getVmfsDatastoreCreateSpec(disk,datastoreName);  try {    Datastore datastore=getDatastoreSystem().createVmfsDatastore(createSpec);    return datastore;  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  DuplicateName e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public static Observable<Intent> fromBroadcast(Context context,IntentFilter filter){  return Observable.create(new OnSubscribeBroadcastRegister(context,filter,null,null));}  }
class C{  public boolean isObligatorio(){  return obligatorio;}  }
class C{  public static ValueExp times(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(TIMES,value1,value2);}  }
class C{  void createModel(){  m=new jmri.jmrit.beantable.sensor.SensorTableDataModel();}  }
class C{  @POST @Path("{noteId}/paragraph/{paragraphId}/move/{newIndex}") @ZeppelinApi public Response moveParagraph(@PathParam("noteId") String noteId,@PathParam("paragraphId") String paragraphId,@PathParam("newIndex") String newIndex) throws IOException {  LOG.info("move paragraph {} {} {}",noteId,paragraphId,newIndex);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse(Status.NOT_FOUND,"note not found.").build();  }  Paragraph p=note.getParagraph(paragraphId);  if (p == null) {    return new JsonResponse(Status.NOT_FOUND,"paragraph not found.").build();  }  try {    note.moveParagraph(paragraphId,Integer.parseInt(newIndex),true);    AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());    note.persist(subject);    notebookServer.broadcastNote(note);    return new JsonResponse(Status.OK,"").build();  } catch (  IndexOutOfBoundsException e) {    LOG.error("Exception in NotebookRestApi while moveParagraph ",e);    return new JsonResponse(Status.BAD_REQUEST,"paragraph's new index is out of bound").build();  }}  }
class C{  @SuppressWarnings("SameParameterValue") public TextCharacter withCharacter(char character){  if (this.character == character) {    return this;  }  return new TextCharacter(character,foregroundColor,backgroundColor,modifiers);}  }
class C{  public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  public boolean deletePhotoAndChildren(final Key photoKey) throws DatastoreException {  Query.Builder query=Query.newBuilder();  Filter photoIdFilter=makeFilter("photoId",PropertyFilter.Operator.EQUAL,makeValue(DbUtils.getEntityId(photoKey))).build();  query.setFilter(makeFilter(photoIdFilter));  query.addKindBuilder().setName(VOTE_ENTITY);  RunQueryRequest request=RunQueryRequest.newBuilder().setQuery(query).build();  RunQueryResponse response=datastore.runQuery(request);  for (  EntityResult result : response.getBatch().getEntityResultList()) {    DbUtils.deleteEntity(datastore,result.getEntity().getKey());  }  while (response.getBatch().getMoreResults() == QueryResultBatch.MoreResultsType.NOT_FINISHED) {    ByteString endCursor=response.getBatch().getEndCursor();    query.setStartCursor(endCursor);    request=RunQueryRequest.newBuilder().setQuery(query).build();    response=datastore.runQuery(request);    for (    EntityResult result : response.getBatch().getEntityResultList()) {      DbUtils.deleteEntity(datastore,result.getEntity().getKey());    }  }  return DbUtils.deleteEntityAndChildren(datastore,photoKey);}  }
class C{  public final void resetMassData(){  m_mass=0.0f;  m_invMass=0.0f;  m_I=0.0f;  m_invI=0.0f;  m_sweep.localCenter.setZero();  if (m_type == BodyType.STATIC || m_type == BodyType.KINEMATIC) {    m_sweep.c0.set(m_xf.p);    m_sweep.c.set(m_xf.p);    m_sweep.a0=m_sweep.a;    return;  }  assert (m_type == BodyType.DYNAMIC);  final Vec2 localCenter=m_world.getPool().popVec2();  localCenter.setZero();  final Vec2 temp=m_world.getPool().popVec2();  final MassData massData=pmd;  for (Fixture f=m_fixtureList; f != null; f=f.m_next) {    if (f.m_density == 0.0f) {      continue;    }    f.getMassData(massData);    m_mass+=massData.mass;    temp.set(massData.center).mulLocal(massData.mass);    localCenter.addLocal(temp);    m_I+=massData.I;  }  if (m_mass > 0.0f) {    m_invMass=1.0f / m_mass;    localCenter.mulLocal(m_invMass);  } else {    m_mass=1.0f;    m_invMass=1.0f;  }  if (m_I > 0.0f && (m_flags & e_fixedRotationFlag) == 0) {    m_I-=m_mass * Vec2.dot(localCenter,localCenter);    assert (m_I > 0.0f);    m_invI=1.0f / m_I;  } else {    m_I=0.0f;    m_invI=0.0f;  }  Vec2 oldCenter=m_world.getPool().popVec2();  oldCenter.set(m_sweep.c);  m_sweep.localCenter.set(localCenter);  Transform.mulToOutUnsafe(m_xf,m_sweep.localCenter,m_sweep.c0);  m_sweep.c.set(m_sweep.c0);  temp.set(m_sweep.c).subLocal(oldCenter);  final Vec2 temp2=oldCenter;  Vec2.crossToOutUnsafe(m_angularVelocity,temp,temp2);  m_linearVelocity.addLocal(temp2);  m_world.getPool().pushVec2(3);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof EllipticCurve) {    EllipticCurve curve=(EllipticCurve)obj;    if ((field.equals(curve.field)) && (a.equals(curve.a)) && (b.equals(curve.b))) {      return true;    }  }  return false;}  }
class C{  public static List<String> readFileToList(String filePath,String charsetName){  File file=new File(filePath);  List<String> fileContent=new ArrayList<String>();  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      fileContent.add(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public static void evolve(Permutation p1,Permutation p2){  int n=p1.size();  if (n != p2.size()) {    throw new FrameworkException("permutations not same size");  }  int cuttingPoint1=PRNG.nextInt(n);  int cuttingPoint2=PRNG.nextInt(n - 1);  if (cuttingPoint1 == cuttingPoint2) {    cuttingPoint2=n - 1;  } else   if (cuttingPoint1 > cuttingPoint2) {    int swap=cuttingPoint1;    cuttingPoint1=cuttingPoint2;    cuttingPoint2=swap;  }  int[] parent1=p1.toArray();  int[] parent2=p2.toArray();  int[] offspring1=new int[n];  int[] offspring2=new int[n];  int[] replacement1=new int[n];  int[] replacement2=new int[n];  Arrays.fill(replacement1,-1);  Arrays.fill(replacement2,-1);  for (int i=cuttingPoint1; i <= cuttingPoint2; i++) {    offspring1[i]=parent2[i];    offspring2[i]=parent1[i];    replacement1[parent2[i]]=parent1[i];    replacement2[parent1[i]]=parent2[i];  }  for (int i=0; i < n; i++) {    if ((i < cuttingPoint1) || (i > cuttingPoint2)) {      int n1=parent1[i];      int m1=replacement1[n1];      int n2=parent2[i];      int m2=replacement2[n2];      while (m1 != -1) {        n1=m1;        m1=replacement1[m1];      }      while (m2 != -1) {        n2=m2;        m2=replacement2[m2];      }      offspring1[i]=n1;      offspring2[i]=n2;    }  }  p1.fromArray(offspring1);  p2.fromArray(offspring2);}  }
class C{  @Override public void freezeRotation(boolean freeze) throws RemoteException {  if (freeze)   device.freezeRotation(); else   device.unfreezeRotation();}  }
class C{  private StringBuffer createReusingIndent(StringBuffer buffer,int additional){  int refLength=computeVisualLength(buffer);  int addLength=fPrefs.prefIndentationSize * additional;  int totalLength=Math.max(0,refLength + addLength);  int minLength=Math.min(totalLength,refLength);  int tabSize=fPrefs.prefTabSize;  int maxCopyLength=tabSize > 0 ? minLength - minLength % tabSize : minLength;  stripExceedingChars(buffer,maxCopyLength);  int missing=totalLength - maxCopyLength;  final int tabs, spaces;  if (JavaCore.SPACE.equals(fPrefs.prefTabChar)) {    tabs=0;    spaces=missing;  } else   if (JavaCore.TAB.equals(fPrefs.prefTabChar)) {    tabs=tabSize > 0 ? missing / tabSize : 0;    spaces=tabSize > 0 ? missing % tabSize : missing;  } else   if (DefaultCodeFormatterConstants.MIXED.equals(fPrefs.prefTabChar)) {    tabs=tabSize > 0 ? missing / tabSize : 0;    spaces=tabSize > 0 ? missing % tabSize : missing;  } else {    Assert.isTrue(false);    return null;  }  for (int i=0; i < tabs; i++)   buffer.append('\t');  for (int i=0; i < spaces; i++)   buffer.append(' ');  return buffer;}  }
class C{  @Override public boolean unlock(){  boolean status;  try {    if (null != fileLock) {      fileLock.release();    }    status=true;  } catch (  IOException e) {    status=false;  } finally {    if (null != fileOutputStream) {      try {        fileOutputStream.close();      } catch (      IOException e) {        LOGGER.error(e.getMessage());      }    }  }  return status;}  }
class C{  private long retrieveRowCount(Database conn,Table table) throws SQLException {  return retrieveRowCount(conn,table,-1,-1);}  }
class C{  protected int __vector_len(int offset){  offset+=bb_pos;  offset+=bb.getInt(offset);  return bb.getInt(offset);}  }
class C{  public void go(OutputStream out) throws IOException {  go(new ICalWriter(out,getICalWriterConstructorVersion()));}  }
class C{  public static Query createJoinQuery(String joinField,Query fromQuery,Query toQuery,IndexSearcher searcher,ScoreMode scoreMode,MultiDocValues.OrdinalMap ordinalMap,int min,int max) throws IOException {  IndexReader indexReader=searcher.getIndexReader();  int numSegments=indexReader.leaves().size();  final long valueCount;  if (numSegments == 0) {    return new MatchNoDocsQuery("JoinUtil.createJoinQuery with no segments");  } else   if (numSegments == 1) {    ordinalMap=null;    LeafReader leafReader=searcher.getIndexReader().leaves().get(0).reader();    SortedDocValues joinSortedDocValues=leafReader.getSortedDocValues(joinField);    if (joinSortedDocValues != null) {      valueCount=joinSortedDocValues.getValueCount();    } else {      return new MatchNoDocsQuery("JoinUtil.createJoinQuery: no join values");    }  } else {    if (ordinalMap == null) {      throw new IllegalArgumentException("OrdinalMap is required, because there is more than 1 segment");    }    valueCount=ordinalMap.getValueCount();  }  final Query rewrittenFromQuery=searcher.rewrite(fromQuery);  final Query rewrittenToQuery=searcher.rewrite(toQuery);  GlobalOrdinalsWithScoreCollector globalOrdinalsWithScoreCollector;switch (scoreMode) {case Total:    globalOrdinalsWithScoreCollector=new GlobalOrdinalsWithScoreCollector.Sum(joinField,ordinalMap,valueCount,min,max);  break;case Min:globalOrdinalsWithScoreCollector=new GlobalOrdinalsWithScoreCollector.Min(joinField,ordinalMap,valueCount,min,max);break;case Max:globalOrdinalsWithScoreCollector=new GlobalOrdinalsWithScoreCollector.Max(joinField,ordinalMap,valueCount,min,max);break;case Avg:globalOrdinalsWithScoreCollector=new GlobalOrdinalsWithScoreCollector.Avg(joinField,ordinalMap,valueCount,min,max);break;case None:if (min <= 0 && max == Integer.MAX_VALUE) {GlobalOrdinalsCollector globalOrdinalsCollector=new GlobalOrdinalsCollector(joinField,ordinalMap,valueCount);searcher.search(rewrittenFromQuery,globalOrdinalsCollector);return new GlobalOrdinalsQuery(globalOrdinalsCollector.getCollectorOrdinals(),joinField,ordinalMap,rewrittenToQuery,rewrittenFromQuery,indexReader);} else {globalOrdinalsWithScoreCollector=new GlobalOrdinalsWithScoreCollector.NoScore(joinField,ordinalMap,valueCount,min,max);break;}default :throw new IllegalArgumentException(String.format(Locale.ROOT,"Score mode %s isn't supported.",scoreMode));}searcher.search(rewrittenFromQuery,globalOrdinalsWithScoreCollector);return new GlobalOrdinalsWithScoreQuery(globalOrdinalsWithScoreCollector,joinField,ordinalMap,rewrittenToQuery,rewrittenFromQuery,min,max,indexReader);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","employee");  element=(Element)elementList.item(0);  state=element.hasAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  assertTrue("elementhasattributens01",state);}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  private static String removeLeadingRapidMinerString(String productString){  return productString.startsWith("RapidMiner ") ? productString.substring(11) : productString;}  }
class C{  private void createConsumers(List<Object> consumersConfig){  for (  Object objConsumer : consumersConfig) {    String className=CpeBuilderUtils.getClassNameFromConfig(objConsumer);    Map<String,Object> params=CpeBuilderUtils.getParamsFromConfig(objConsumer);    Optional<AnalysisEngineDescription> desc=createConsumer(className,params,CONSUMER_DEFAULT_PACKAGE);    if (desc.isPresent()) {      String name=CpeBuilderUtils.getComponentName(getConsumerNames(),"consumer:" + className);      addConsumer(name,desc.get());    }  }}  }
class C{  public Pattern_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_source=jcas.getRequiredFeatureDE(casType,"source","uk.gov.dstl.baleen.types.Base",featOkTst);  casFeatCode_source=(null == casFeat_source) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_source).getCode();  casFeat_target=jcas.getRequiredFeatureDE(casType,"target","uk.gov.dstl.baleen.types.Base",featOkTst);  casFeatCode_target=(null == casFeat_target) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_target).getCode();  casFeat_words=jcas.getRequiredFeatureDE(casType,"words","uima.cas.FSArray",featOkTst);  casFeatCode_words=(null == casFeat_words) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_words).getCode();}  }
class C{  public static Color rgbToColor(RGBColor rgbcol){  return new java.awt.Color(rgbcol.getRed().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255f,rgbcol.getGreen().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255f,rgbcol.getBlue().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255f);}  }
class C{  public static void samCat(final OutputStream destination,final File... inputFiles) throws IOException {  samCat(inputFiles.length > 0 && FileUtils.isGzipFilename(inputFiles[0]),destination,false,inputFiles);}  }
class C{  public boolean isFieldAlignTrailing(){  return getFieldAlignmentType().equals(FIELDALIGNMENTTYPE_TrailingRight);}  }
class C{  private void makeResourceSubRequest(final String targetUri,final HttpServerRequest req,final int recursionLevel,final AtomicInteger subRequestCounter,final RecursiveHandlerFactory.RecursiveHandlerTypes recursionHandlerType,final DeltaHandler<ResourceNode> handler,final boolean collection){  Logger log=RequestLoggerFactory.getLogger(ExpansionHandler.class,req);  if (subRequestCounter.get() > maxSubrequestCount) {    handler.handle(new ResourceNode(SERIOUS_EXCEPTION,new ResourceCollectionException("Number of allowed sub requests exceeded. Limit is " + maxSubrequestCount + " requests",StatusCode.BAD_REQUEST)));    return;  }  subRequestCounter.incrementAndGet();  final HttpClientRequest cReq=httpClient.request(HttpMethod.GET,targetUri,null);  if (log.isTraceEnabled()) {    log.trace("set the cReq headers for the subRequest");  }  cReq.setTimeout(TIMEOUT);  cReq.headers().setAll(req.headers());  cReq.headers().set("Accept","application/json");  cReq.headers().set(SELF_REQUEST_HEADER,"");  cReq.setChunked(true);  cReq.exceptionHandler(ExpansionDeltaUtil.createRequestExceptionHandler(req,targetUri,ExpansionHandler.class));  if (log.isTraceEnabled()) {    log.trace("end the cReq for the subRequest");  }  cReq.end();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final boolean isAccessModifier(N4Modifier modifier){  return modifier == N4Modifier.PRIVATE || modifier == N4Modifier.PROJECT || modifier == N4Modifier.PROTECTED || modifier == N4Modifier.PUBLIC;}  }
class C{  public CacheFactory maximumCapacity(int maximumCapacity){  if (maximumCapacity < 0) {    throw new IllegalArgumentException();  }  this.maximumCapacity=maximumCapacity;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.361 -0500",hash_original_method="D15EADA574CC6688E3A5C168E5A51EC1",hash_generated_method="5F00CAF8B081ECDF52D74B2EA73978CD") public ViolationInfo(){  crashInfo=null;  policy=0;}  }
class C{  void processDragExit(DragSourceEvent dse){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragExit(dse);  }}  }
class C{  protected double computeLOFScore(KNNQuery<O> knnq,DBIDRef cur,DoubleDataStore lrds){  final double lrdp=lrds.doubleValue(cur);  if (Double.isInfinite(lrdp)) {    return 1.0;  }  double sum=0.;  int count=0;  final KNNList neighbors=knnq.getKNNForDBID(cur,k);  for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {    if (DBIDUtil.equal(cur,neighbor)) {      continue;    }    sum+=lrds.doubleValue(neighbor);    ++count;  }  return sum / (lrdp * count);}  }
class C{  public static Hours hoursBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.hours());  return Hours.hours(amount);}  }
class C{  public static final void drawRevoluteJoint(GL2 gl,RevoluteJoint joint){  Vector2 anchor=joint.getAnchor1();  gl.glColor4f(0.8f,0.8f,0.8f,1.0f);  RenderUtilities.fillCircleFromCenter(gl,0.025,anchor.x,anchor.y);  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  RenderUtilities.drawCircleFromCenter(gl,0.025,anchor.x,anchor.y,false,false);}  }
class C{  private void boldPlayingTrack(Song s){  View view=mSongToViewMap.get(s);  TextView tvTrackName, tvTrackDuration;  if (mPreviousSongGroup != null) {    tvTrackName=(TextView)mPreviousSongGroup.findViewById(R.id.tvTrackName);    tvTrackDuration=(TextView)mPreviousSongGroup.findViewById(R.id.tvTrackDuration);    tvTrackName.setTypeface(null,Typeface.NORMAL);    tvTrackDuration.setTypeface(null,Typeface.NORMAL);  }  if (view != null) {    tvTrackName=(TextView)view.findViewById(R.id.tvTrackName);    tvTrackDuration=(TextView)view.findViewById(R.id.tvTrackDuration);    tvTrackName.setTypeface(null,Typeface.BOLD);    tvTrackDuration.setTypeface(null,Typeface.BOLD);  }  mPreviousSongGroup=view;}  }
class C{  public static final void fillCircleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey){  double w=Math.abs(sx - ex);  double h=Math.abs(sy - ey);  RenderUtilities.fillCircleFromTopLeft(gl,sx,sy,w,h);}  }
class C{  public CallSpec<Void,HttpError> markConverastionAsUnread(String conversationId,String userId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/users/{user_id}/conversations/{conversation_id}/read",false).pathParam("user_id",userId).pathParam("conversation_id",conversationId).responseAs(Void.class).build();}  }
class C{  public String toFormattedString(){  return "CUDA texture descriptor:\n    " + createString("\n    ");}  }
class C{  public void error(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.error(e);  }}  }
class C{  public static MerkleRoot computeMerkleRoot(List<? extends MerkleTreeNode> nodes){  List<MerkleTreeNode> merkleTreeNodeList=new ArrayList<>(nodes.size());  for (  MerkleTreeNode n : nodes) {    merkleTreeNodeList.add(new PrunedNode(n.getID(),0));  }  MerkleTreeNode rootNode=compress(merkleTreeNodeList).get(0);  return new MerkleRoot(rootNode.getID());}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y,float radius){  canvas.drawCircle(x,y,radius,paint);}  }
class C{  public int charWidth(char ch){  return Display.impl.charWidth(font,ch);}  }
class C{  void andAction(NodeRepresentation nodeRep){  if (nodeRep.getParentVector() == null) {    makeProof(nodeRep,true,false);  } else {    int idx=nodeRep.getParentIndex();    Decomposition decomp=nodeRep.decomposition;    state.hasChanged=false;    if (decomp.definedOp != null) {      state.assumpDefinitions.add(decomp.definedOp);    }    Vector<SemanticNode> addedAssumps=decomp.children;    Vector<NodeRepresentation> addedToAssumeReps=new Vector<NodeRepresentation>();    for (int i=0; i < addedAssumps.size(); i++) {      NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,this.state.assumeReps,null);      rep.initialPosition=nodeRep.initialPosition;      rep.isCreated=false;      addedToAssumeReps.add(rep);    }    this.state.assumeReps.remove(idx);    for (int i=0; i < addedToAssumeReps.size(); i++) {      this.state.assumeReps.add(idx + i,addedToAssumeReps.elementAt(i));    }    if (idx < state.numberOfContextAssumptions) {      state.numberOfContextAssumptions=state.numberOfContextAssumptions + (addedAssumps.size() - 1);    }    if (idx < state.firstAddedAssumption) {      state.firstAddedAssumption=state.firstAddedAssumption + (addedAssumps.size() - 1);    }    raiseWindow();    return;  }}  }
class C{  public void free(int p){  if (p > 0) {    logger.debug("free port " + p);    ports[p - port_start]=false;  }}  }
class C{  protected void parseTransactions(final int transactionsOffset) throws ProtocolException {  cursor=transactionsOffset;  optimalEncodingMessageSize=HEADER_SIZE;  if (payload.length == cursor) {    transactionBytesValid=false;    return;  }  int numTransactions=(int)readVarInt();  optimalEncodingMessageSize+=VarInt.sizeOf(numTransactions);  transactions=new ArrayList<Transaction>(numTransactions);  for (int i=0; i < numTransactions; i++) {    Transaction tx=new Transaction(params,payload,cursor,this,serializer,UNKNOWN_LENGTH);    tx.getConfidence().setSource(TransactionConfidence.Source.NETWORK);    transactions.add(tx);    cursor+=tx.getMessageSize();    optimalEncodingMessageSize+=tx.getOptimalEncodingMessageSize();  }  transactionBytesValid=serializer.isParseRetainMode();}  }
class C{  public boolean equals(XObject obj2){  if (this == obj2) {    return true;  }  if (obj2.getType() == XObject.CLASS_NUMBER)   return obj2.equals(this);  String str=obj2.str();  int n=m_length;  if (n == str.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != str.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public synchronized void signInputs(SigHash hashType,Wallet wallet) throws ScriptException {  signInputs(hashType,wallet,null);}  }
class C{  public boolean isConnectedToMobileAccess(){  return mCnxManager.isConnectedToMobile();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  super.writeToParcel(dest,flags,TYPE_CDMA);  mCellIdentityCdma.writeToParcel(dest,flags);  mCellSignalStrengthCdma.writeToParcel(dest,flags);}  }
class C{  public TimeSynchronizationException(String message,Key errorType){  super(message,errorType,null);}  }
class C{  public static String localizeImgLinksInHTML(final String htmlText){  return localizeImgLinksInHTML(htmlText,AbstractUIContext.getResourceLoader(),null);}  }
class C{  public MoreLikeThisQueryBuilder minWordLength(int minWordLength){  this.minWordLength=minWordLength;  return this;}  }
class C{  public static void addPath(String s) throws Exception {  File f=new File(s);  URI u=f.toURI();  URLClassLoader urlClassLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();  Class<URLClassLoader> urlClass=URLClassLoader.class;  Method method=urlClass.getDeclaredMethod("addURL",new Class[]{URL.class});  method.setAccessible(true);  method.invoke(urlClassLoader,new Object[]{u.toURL()});}  }
class C{  public Attribute export(JavaClass cl,JavaClass target){  target.getConstantPool().addUTF8(getName());  OpaqueAttribute attr=new OpaqueAttribute(getName());  byte[] value=new byte[_value.length];  System.arraycopy(_value,0,value,0,_value.length);  attr.setValue(value);  return attr;}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  private static boolean classNameMatchesFileName(ClassSymbol c,Env<AttrContext> env){  return env.toplevel.sourcefile.isNameCompatible(c.name.toString(),JavaFileObject.Kind.SOURCE);}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  private void labelClearDateMousePressed(MouseEvent e){  userSelectedADate(null);}  }
class C{  protected String doIt() throws Exception {  log.info("M_Warehouse_ID=" + p_M_Warehouse_ID + ", C_BPartner_ID="+ p_C_BPartner_ID+ " - ReplenishmentCreate="+ p_ReplenishmentCreate+ ", C_DocType_ID="+ p_C_DocType_ID);  if (p_ReplenishmentCreate != null && p_C_DocType_ID == 0 && !p_ReplenishmentCreate.equals("PRD"))   throw new AdempiereUserError("@FillMandatory@ @C_DocType_ID@");  MWarehouse wh=MWarehouse.get(getCtx(),p_M_Warehouse_ID);  if (wh.get_ID() == 0)   throw new AdempiereSystemError("@FillMandatory@ @M_Warehouse_ID@");  prepareTable();  fillTable(wh);  if (p_ReplenishmentCreate == null)   return "OK";  MDocType dt=MDocType.get(getCtx(),p_C_DocType_ID);  if (!p_ReplenishmentCreate.equals("PRD") && !dt.getDocBaseType().equals(p_ReplenishmentCreate))   throw new AdempiereSystemError("@C_DocType_ID@=" + dt.getName() + " <> "+ p_ReplenishmentCreate);  if (p_ReplenishmentCreate.equals("POO"))   createPO(); else   if (p_ReplenishmentCreate.equals("POR"))   createRequisition(); else   if (p_ReplenishmentCreate.equals("MMM"))   createMovements(); else   if (p_ReplenishmentCreate.equals("DOO"))   createDO(); else   if (p_ReplenishmentCreate.equals("PRD"))   createProduction();  return m_info;}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);  clientgui.getBoardView().removeBoardViewListener(this);  clientgui.mechD.wPan.weaponList.removeListSelectionListener(this);}  }
class C{  public static Wildcards of(int paramFlags){  int flags=sanitizeInt(paramFlags);switch (flags) {case 0x0000:    return EXACT;case OFMatch.OFPFW_ALL_SANITIZED:  return FULL;case INT_INPORT_L2_MATCH:return INPORT_L2_MATCH;default :return new Wildcards(flags);}}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public LanguageSetting(String name,String[] suffixArray,int minMatchLen){  this.elem=null;  this.name=name;  this.minMatchLen=minMatchLen;  storeMatches="20";  clusterType="";  StringBuffer strbuf=new StringBuffer();  for (int i=0; i < suffixArray.length; i++) {    strbuf.append(suffixArray[i]);    if (i != suffixArray.length - 1)     strbuf.append(',');  }  this.suffixes=strbuf.toString();}  }
class C{  public String message(){  return message;}  }
class C{  public boolean isVisible(int position){  int first=getFirstVisiblePosition();  int last=getLastVisiblePosition();  return first <= position && last >= position;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  map.put(key,value);}  }
class C{  private static void closeBadRequest(HttpServletResponse resp,int httpStatus,MessageQueue mq) throws ServletException {  closeBadRequest(resp,httpStatus,serializeMessageQueue(mq));}  }
class C{  @Override public String globalInfo(){  return "LC aka LP (Laber Powerset) Method.\nTreats each label combination as a single class in a multi-class learning scheme. The set of possible values of each class is the powerset of labels.\n" + "See also LP from MULAN:\n" + "http://mulan.sourceforge.net";}  }
class C{  public void addInfraction(long timestamp){  SystemAssert.requireArgument(timestamp > 0 || timestamp == -1,"Timestamp must be positive or -1.");  this.infractionHistory.add(timestamp);}  }
class C{  public static void silentCloseInputStream(InputStream is){  try {    if (is != null) {      is.close();    }  } catch (  IOException e) {    log.w(LOG_TAG,"Cannot close input stream",e);  }}  }
class C{  public HashCodeBuilder append(short value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public static synchronized boolean removeCert(String certId){  log.trace("removeCert({})",certId);  return forCert(null,null).orElse(false);}  }
class C{  public static VOSteppedPrice toVOSteppedPrice(SteppedPrice steppedPrice){  VOSteppedPrice voSteppedPrice=new VOSteppedPrice();  updateValueObject(voSteppedPrice,steppedPrice);  voSteppedPrice.setLimit(steppedPrice.getLimit());  voSteppedPrice.setPrice(steppedPrice.getPrice());  return voSteppedPrice;}  }
class C{  public final Iterator<AuthorityEntry> authoritiesIterator(){  return mDataAuthorities != null ? mDataAuthorities.iterator() : null;}  }
class C{  public List<TypeId<?>> asList(){  return Collections.unmodifiableList(Arrays.asList(types));}  }
class C{  public Anonymous_methodBody_2_ createAnonymous_methodBody_2_(){  Anonymous_methodBody_2_Impl anonymous_methodBody_2_=new Anonymous_methodBody_2_Impl();  return anonymous_methodBody_2_;}  }
class C{  public static boolean withinClassOrInterface(Declaration decl){  return decl.getContainer() instanceof ClassOrInterface;}  }
class C{  @Override public void initAgents(MessageLogger logger){  if (destinations.size() != 1) {    logger.log("Error: This agent requires exact one destination.");    return;  }  MapEnvironment env=scenario.getEnv();  String goal=destinations.get(0);  MapAgent agent=new MapAgent(env.getMap(),env,search,new String[]{goal});  env.addAgent(agent,scenario.getInitAgentLocation());}  }
class C{  public void testAddOneStagingTrack(){  StagingEditFrame f=new StagingEditFrame();  f.setTitle("Test Staging Add Frame");  f.setLocation(0,0);  f.initComponents(l,null);  f.trackNameTextField.setText("new staging track");  f.trackLengthTextField.setText("34");  getHelper().enterClickAndLeave(new MouseEventData(this,f.addTrackButton));  sleep(1);  Track t=l.getTrackByName("new staging track",null);  Assert.assertNotNull("new staging track",t);  Assert.assertEquals("staging track length",34,t.getLength());  Assert.assertEquals("all directions",ALL,t.getTrainDirections());  Assert.assertEquals("all roads",Track.ALL_ROADS,t.getRoadOption());  f.dispose();}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (comparator.compare(list.get(currentIndex),list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public void addWarning(WarningMessage message){  if (message.isRelevant(configuration.getWarningLevel())) {    if (this.warnings == null) {      this.warnings=new LinkedList();    }    this.warnings.add(message);  }}  }
class C{  protected Object execute(){  init();  if (!getSelectedRemote()) {    return null;  }  File jsonFile=new File(parameter);  String factoryLink=null;  if (!jsonFile.exists()) {    UserProjectReference projectReference=getMultiRemoteCodenvy().getProjectReference(parameter);    if (projectReference == null) {      Ansi buffer=Ansi.ansi();      buffer.fg(RED);      buffer.a("No matching project for identifier '").a(parameter).a("'.");      buffer.reset();      System.out.println(buffer.toString());      return null;    }    factoryLink=createFactoryProject(projectReference);  } else {    factoryLink=getEncodedFactory(jsonFile);  }  if (invoke && factoryLink != null) {    openURL(factoryLink);  } else   if (factoryLink != null) {    System.out.println("Factory URL: " + factoryLink);  }  return null;}  }
class C{  private void logMemory(){  long totalSize=Runtime.getRuntime().totalMemory() / BYTE_TO_MB;  log(TYPE_MEMORY,MEMORY_USED,MEMORY_ARG + COUNT_INDICATOR);  log(TYPE_MEMORY,MEMORY_USED,MEMORY_ARG,totalSize);  logMax(TYPE_MEMORY,MEMORY_USED,MEMORY_ARG,totalSize);}  }
class C{  public boolean isCommutative(){switch (opcode) {case RegOps.AND:case RegOps.OR:case RegOps.XOR:case RegOps.ADD:case RegOps.MUL:    return true;default :  return false;}}  }
class C{  public static void checkAccessAndAliasesForKeystore(String storeLocation,String storePassword,boolean shouldNotBeEmpty) throws ConfigurationException {  final String errorMessage=MessageFormat.format("Could not access or retrieve aliases from {0}",storeLocation);  try {    List<String> aliasesInKeystore=SecurityHelper.getAliasesforKeystore(storeLocation,storePassword);    if (aliasesInKeystore.isEmpty() && shouldNotBeEmpty) {      throw new ConfigurationException(MessageFormat.format("Keystore / Truststore does not contain any aliases: {0}",storeLocation));    }  } catch (  KeyStoreException e) {    throw new ConfigurationException(MessageFormat.format(errorMessage,e));  }catch (  NoSuchAlgorithmException e) {    throw new ConfigurationException(MessageFormat.format(errorMessage,e));  }catch (  CertificateException e) {    throw new ConfigurationException(MessageFormat.format(errorMessage,e));  }catch (  IOException e) {    throw new ConfigurationException(MessageFormat.format(errorMessage,e));  }}  }
class C{  private static String applyReplacements(String text,TreeRangeMap<Integer,String> replacementMap){  Map<Range<Integer>,String> ranges=replacementMap.asDescendingMapOfRanges();  if (ranges.isEmpty()) {    return text;  }  StringBuilder sb=new StringBuilder(text);  for (  Entry<Range<Integer>,String> entry : ranges.entrySet()) {    Range<Integer> range=entry.getKey();    sb.replace(range.lowerEndpoint(),range.upperEndpoint(),entry.getValue());  }  return sb.toString();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__DECLARED_VENDOR_ID:    setDeclaredVendorId((String)newValue);  return;case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__PROJECT_ID:setProjectId((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Deprecated public static void fixDefaultEncodingIfMac(@NotNull Map<String,String> env,@Nullable Project project){  if (SystemInfo.isMac) {    if (!isLocaleDefined(env)) {      setLocaleEnvironment(env,getCharset(project));    }  }}  }
class C{  boolean isAnnotationPresent(Object target,Class<? extends Annotation> annCls,@Nullable GridDeployment dep){  assert target != null;  assert annCls != null;  ClassDescriptor desc=descriptor(dep,target.getClass());  return desc.recursiveFields().length > 0 || desc.annotatedMembers(annCls) != null;}  }
class C{  public JavaCompiler processAnnotations(List<JCCompilationUnit> roots,List<String> classnames){  if (shouldStop(CompileState.PROCESS)) {    if (unrecoverableError()) {      deferredDiagnosticHandler.reportDeferredDiagnostics();      log.popDiagnosticHandler(deferredDiagnosticHandler);      return this;    }  }  if (!processAnnotations) {    if (options.isSet(PROC,"only")) {      log.warning("proc.proc-only.requested.no.procs");      todo.clear();    }    if (!classnames.isEmpty()) {      log.error("proc.no.explicit.annotation.processing.requested",classnames);    }    Assert.checkNull(deferredDiagnosticHandler);    return this;  }  Assert.checkNonNull(deferredDiagnosticHandler);  try {    List<ClassSymbol> classSymbols=List.nil();    List<PackageSymbol> pckSymbols=List.nil();    if (!classnames.isEmpty()) {      if (!explicitAnnotationProcessingRequested()) {        log.error("proc.no.explicit.annotation.processing.requested",classnames);        deferredDiagnosticHandler.reportDeferredDiagnostics();        log.popDiagnosticHandler(deferredDiagnosticHandler);        return this;      } else {        boolean errors=false;        for (        String nameStr : classnames) {          Symbol sym=resolveBinaryNameOrIdent(nameStr);          if (sym == null || (sym.kind == Kinds.PCK && !processPcks) || sym.kind == Kinds.ABSENT_TYP) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }          try {            if (sym.kind == Kinds.PCK)             sym.complete();            if (sym.exists()) {              if (sym.kind == Kinds.PCK)               pckSymbols=pckSymbols.prepend((PackageSymbol)sym); else               classSymbols=classSymbols.prepend((ClassSymbol)sym);              continue;            }            Assert.check(sym.kind == Kinds.PCK);            log.warning("proc.package.does.not.exist",nameStr);            pckSymbols=pckSymbols.prepend((PackageSymbol)sym);          } catch (          CompletionFailure e) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }        }        if (errors) {          deferredDiagnosticHandler.reportDeferredDiagnostics();          log.popDiagnosticHandler(deferredDiagnosticHandler);          return this;        }      }    }    try {      JavaCompiler c=procEnvImpl.doProcessing(context,roots,classSymbols,pckSymbols,deferredDiagnosticHandler);      if (c != this)       annotationProcessingOccurred=c.annotationProcessingOccurred=true;      return c;    }  finally {      procEnvImpl.close();    }  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    deferredDiagnosticHandler.reportDeferredDiagnostics();    log.popDiagnosticHandler(deferredDiagnosticHandler);    return this;  }}  }
class C{  @Override public void processTuple(FilePartitionMapping tuple){  String command=processHiveFile(tuple);  logger.debug("commands is {}",command);  if (command != null) {    Statement stmt;    try {      stmt=store.getConnection().createStatement();      stmt.execute(command);    } catch (    SQLException ex) {      throw new RuntimeException("Moving file into hive failed" + ex);    }  }}  }
class C{  protected String doIt() throws Exception {  createDocumentTypes(getCtx(),getAD_Client_ID(),this,get_TrxName());  createPeriodControls(getCtx(),getAD_Client_ID(),this,get_TrxName());  return "OK";}  }
class C{  LinkedEntry(K key,V value,int hash,HashMapEntry<K,V> next,LinkedEntry<K,V> nxt,LinkedEntry<K,V> prv){  super(key,value,hash,next);  this.nxt=nxt;  this.prv=prv;}  }
class C{  @Override public void addRecord(RecordBuilderImpl recordBuilder) throws IOException {  initXml();  recordBuilder.checkState();  if (mAllNames.contains(recordBuilder.getName())) {    if (recordBuilder.hasExplicitName()) {      throw new AssertionError("Can't create multiple screenshots with the same name: " + recordBuilder.getName());    } else {      throw new AssertionError("Can't create multiple screenshots from the same test, or " + "use .setName() to name each screenshot differently");    }  }  mXmlSerializer.startTag(null,"screenshot");  Tiling tiling=recordBuilder.getTiling();  addTextNode("description",recordBuilder.getDescription());  addTextNode("name",recordBuilder.getName());  addTextNode("test_class",recordBuilder.getTestClass());  addTextNode("test_name",recordBuilder.getTestName());  addTextNode("tile_width",String.valueOf(tiling.getWidth()));  addTextNode("tile_height",String.valueOf(tiling.getHeight()));  File viewHierarchy=getViewHierarchyFile(recordBuilder.getName());  if (viewHierarchy.exists()) {    addTextNode("view_hierarchy",getRelativePath(viewHierarchy,mDir));    viewHierarchy.setReadable(true,false);  }  mXmlSerializer.startTag(null,"extras");  for (  Map.Entry<String,String> entry : recordBuilder.getExtras().entrySet()) {    addTextNode(entry.getKey(),entry.getValue());  }  mXmlSerializer.endTag(null,"extras");  if (recordBuilder.getError() != null) {    addTextNode("error",recordBuilder.getError());  } else {    saveTiling(recordBuilder);  }  if (recordBuilder.getGroup() != null) {    addTextNode("group",recordBuilder.getGroup());  }  mAllNames.add(recordBuilder.getName());  mXmlSerializer.endTag(null,"screenshot");  mXmlSerializer.flush();}  }
class C{  @Uninterruptible public void openNoHandshake(){  schedLock.lockNoHandshake();  open=true;  schedLock.broadcast();  schedLock.unlock();}  }
class C{  public static Region createSubregion(Region root,String name,RegionAttributes attrs,final InternalRegionArguments internalArgs) throws CacheException {  Region value=null;  if (internalArgs == null) {    value=root.createSubregion(name,attrs);  } else {    try {      LocalRegion lr=(LocalRegion)root;      value=lr.createSubregion(name,attrs,internalArgs);    } catch (    IOException e) {      fail("unexpected exception",e);    }catch (    ClassNotFoundException e) {      fail("unexpected exception",e);    }  }  return value;}  }
class C{  private Node local(){  Node node=new Node(NodeType.LOCAL,lineargs);  while (next() != null && (line().startsWith(NodeType.LOCALCOMP.getMatch()) || line().startsWith(NodeType.EXT.getMatch()))) {    if (line().startsWith(NodeType.LOCALCOMP.getMatch())) {      next();    }    node.getChildren().add(extent());  }  return node;}  }
class C{  public static Template asTemplate(Resource resource){  return resource.as(Template.class);}  }
class C{  protected void prepareXLegend(){  StringBuffer a=new StringBuffer();  int length=(int)(((float)(mData.getXVals().get(0).length() + mData.getXVals().get(mData.getXValCount() - 1).length())));  if (mData.getXVals().get(0).length() <= 3)   length*=2;  for (int i=0; i < length; i++) {    a.append("h");  }  mXLegendWidth=calcTextWidth(mXLegendPaint,a.toString());}  }
class C{  public ActiveMQThreadFactory(final String groupName,final boolean daemon,final ClassLoader tccl){  group=new ThreadGroup(groupName + "-" + System.identityHashCode(this));  this.threadPriority=Thread.NORM_PRIORITY;  this.tccl=tccl;  this.daemon=daemon;  this.acc=AccessController.getContext();}  }
class C{  public void handleElement(BridgeContext ctx,Element e){  if (ctx.isDynamic()) {    this.e=e;    this.ctx=ctx;    ((SVGOMElement)e).setSVGContext(this);  }}  }
class C{  protected void BooleanExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_BOOL);  Expr();  int opLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos;  if (opLen == 2) {    error(XPATHErrorResources.ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL,null);  }  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,opLen);}  }
class C{  public void createNewMessage(Message m){  this.router.createNewMessage(m);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public void invalidate(){  MOD_COUNT++;}  }
class C{  private List<Double> toList(double[] x){  List<Double> result=new ArrayList<Double>();  for (int i=0; i < x.length; i++) {    result.add(x[i]);  }  return result;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeInt(values.length);  for (  double v : values) {    out.writeDouble(v);  }}  }
class C{  public boolean browserHasBack(PeerComponent browserPeer){  return ((AndroidImplementation.AndroidBrowserComponent)browserPeer).hasBack();}  }
class C{  public void run() throws SerializationException, SQLException {  final String query=String.format("INSERT INTO %s (" + "audit_log_id, " + "stage, "+ "mappers, "+ "reducers, "+ "cpu_time, "+ "counters) "+ "VALUES (?, ?, ?, ?, ?, ?)",tableName);  Map<String,MapRedStats> statsPerStage=sessionStateLite.getMapRedStats();  for (  String stage : statsPerStage.keySet()) {    MapRedStats stats=statsPerStage.get(stage);    PreparedStatement ps=connection.prepareStatement(query);    int psIndex=1;    ps.setLong(psIndex++,auditLogId);    ps.setString(psIndex++,stage);    ps.setLong(psIndex++,stats.getNumMap());    ps.setLong(psIndex++,stats.getNumReduce());    ps.setLong(psIndex++,stats.getCpuMSec());    ps.setString(psIndex,toJson(stats.getCounters()));    ps.executeUpdate();  }}  }
class C{  public BabyDragon(){  this(null);}  }
class C{  public void auditOperation(String operation,List<? extends TaggedLogAPIEntity> entities,List<String> encodedRowKeys,EntityDefinition entityDefinition){  if (isAuditingRequired(entityDefinition.getService())) {    List<GenericAuditEntity> auditEntities=buildAuditEntities(operation,entities,encodedRowKeys,entityDefinition);    if (null != auditEntities && 0 != auditEntities.size()) {      auditSupport.fireAudit(entityDefinition.getService(),auditEntities);    }  }}  }
class C{  public ThreadGroup(ThreadGroup parent,String name){  this(checkParentAccess(parent),parent,name);}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public LocationConfiguration failOnSettingsApiSuspended(boolean shouldFail){  this.failOnSettingsApiSuspended=shouldFail;  return this;}  }
class C{  public org.dom4j.Entity createEntity(EntityReference entityRef){  return factory.createEntity(entityRef.getName(),entityRef.getDeclaration().getReplacementText());}  }
class C{  private void resetStage(){  stages=null;}  }
class C{  public static String convertASTToSource(ReaderSource readerSource,ASTNode expression) throws Exception {  if (expression == null)   throw new IllegalArgumentException("Null: expression");  StringBuilder result=new StringBuilder();  for (int x=expression.getLineNumber(); x <= expression.getLastLineNumber(); x++) {    String line=readerSource.getLine(x,null);    if (line == null) {      throw new Exception("Error calculating source code for expression. Trying to read line " + x + " from "+ readerSource.getClass());    }    if (x == expression.getLastLineNumber()) {      line=line.substring(0,expression.getLastColumnNumber() - 1);    }    if (x == expression.getLineNumber()) {      line=line.substring(expression.getColumnNumber() - 1);    }    result.append(line).append('\n');  }  String source=result.toString().trim();  return source;}  }
class C{  void configureBasicAuth(HttpServerRequest serverRequest,HttpClientRequest httpClientRequest){  final String authorization=serverRequest.getParam("authorization");  if (authorization != null) {    httpClientRequest.putHeader(HttpHeaders.AUTHORIZATION,authorization);  }}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public void run(){  if (m_links == null)   return;  URL url=null;  try {    url=new URL(m_urlString);  } catch (  Exception e) {    System.err.println("OnlineHelp.Worker.run (url) - " + e);  }  if (url == null)   return;  try {    URLConnection conn=url.openConnection();    InputStream is=conn.getInputStream();    HTMLEditorKit kit=new HTMLEditorKit();    HTMLDocument doc=(HTMLDocument)kit.createDefaultDocument();    doc.putProperty("IgnoreCharsetDirective",new Boolean(true));    kit.read(new InputStreamReader(is),doc,0);    HTMLDocument.Iterator it=doc.getIterator(HTML.Tag.A);    Object target=null;    Object href=null;    while (it != null && it.isValid()) {      AttributeSet as=it.getAttributes();      if (target == null || href == null) {        Enumeration en=as.getAttributeNames();        while (en.hasMoreElements()) {          Object o=en.nextElement();          if (target == null && o.toString().equals("target"))           target=o; else           if (href == null && o.toString().equals("href"))           href=o;        }      }      if (target != null && "Online".equals(as.getAttribute(target))) {        String hrefString=(String)as.getAttribute(href);        if (hrefString != null) {          try {            String AD_Window_ID=hrefString.substring(hrefString.indexOf('/',1),hrefString.lastIndexOf('/'));            m_links.put(AD_Window_ID,hrefString);          } catch (          Exception e) {            System.err.println("OnlineHelp.Worker.run (help) - " + e);          }        }      }      it.next();    }    is.close();  } catch (  ConnectException e) {  }catch (  UnknownHostException uhe) {  }catch (  Exception e) {    System.err.println("OnlineHelp.Worker.run (e) " + e);  }catch (  Throwable t) {    System.err.println("OnlineHelp.Worker.run (t) " + t);  }}  }
class C{  public static boolean isLocalContentUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_CONTENT_SCHEME.equals(scheme);}  }
class C{  public long logIndex(){  return logIndex;}  }
class C{  public Sparse(double sparsity,boolean equalizeEfferents,boolean selfConnectionAllowed){  this.connectionDensity=sparsity;  this.equalizeEfferents=equalizeEfferents;  this.selfConnectionAllowed=selfConnectionAllowed;}  }
class C{  String sourceFormForAnnotation(AnnotationMirror annotationMirror){  StringBuilder sb=new StringBuilder();  new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror,sb);  return sb.toString();}  }
class C{  public void passDataThrough(int fromIndex){  for (  MultiPortPair mpp : getManagedPairs()) {    mpp.singlePort.deliver(mpp.multiPorts.get(fromIndex).getAnyDataOrNull());  }}  }
class C{  void deregisterMediaComponent(Component mediaCmp){  mediaComponents.remove(mediaCmp);}  }
class C{  public static int indexOf(double[] array,double[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    FileShare fsObj=null;    Snapshot snapObj=null;    URI objId=getTaskCompleter().getId();    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    if (_status == JobStatus.SUCCESS) {      _isSuccess=true;      FileExport newExport=null;      if (exportInfo != null) {        newExport=exportInfo.getFileExport();      }      VNXeNfsShare nfsShare=null;      if (isFile) {        fsObj=dbClient.queryObject(FileShare.class,objId);        nfsShare=vnxeApiClient.getNfsShareById(rule.getDeviceExportId());        updateExportRules(vnxeApiClient,dbClient,fsObj,nfsShare);        if (newExport != null) {          updateFSExport(fsObj,dbClient,newExport);        }      } else {        snapObj=dbClient.queryObject(Snapshot.class,objId);        fsObj=dbClient.queryObject(FileShare.class,snapObj.getParent().getURI());        nfsShare=vnxeApiClient.findSnapNfsShare(snapObj.getNativeId(),shareName);        updateExportRules(vnxeApiClient,dbClient,fsObj,nfsShare);        if (newExport != null) {          updateSnapshotExport(snapObj,dbClient,newExport);        }      }    } else     if (_status == JobStatus.FAILED) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to update export rules: %s",opId,objId.toString()));    }    _logger.info(logMsgBuilder.toString());    if (isFile) {      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SYSTEM,_isSuccess,logMsgBuilder.toString(),"",fsObj,storageObj);    } else {      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SNAPSHOT,_isSuccess,logMsgBuilder.toString(),"",snapObj,fsObj,storageObj);    }  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeModifyExportJob",e);    setErrorStatus("Encountered an internal error during update export rules job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public static char docType(final MultiProtocolURL url){  String ext=MultiProtocolURL.getFileExtension(url.getFileName());  if (ext == null)   return DT_UNKNOWN;  return docTypeExt(ext);}  }
class C{  public void addLog(Log log){  caching.add(log);  lastCacheTime=System.currentTimeMillis();  if (caching.size() > cachingSize) {    flushCache();  }}  }
class C{  public boolean importPkcs8(){  return jrbPkcs8.isSelected();}  }
class C{  private static List findIntersectionNodes(PolygonizeDirectedEdge startDE,long label){  PolygonizeDirectedEdge de=startDE;  List intNodes=null;  do {    Node node=de.getFromNode();    if (getDegree(node,label) > 1) {      if (intNodes == null)       intNodes=new ArrayList();      intNodes.add(node);    }    de=de.getNext();    Assert.isTrue(de != null,"found null DE in ring");    Assert.isTrue(de == startDE || !de.isInRing(),"found DE already in ring");  } while (de != startDE);  return intNodes;}  }
class C{  public StdJDBCDelegate(){}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void rebind(String name,java.lang.Object obj) throws NamingException {  rebind(new CompositeName(name),obj);}  }
class C{  private void findAndroid(){  final String re1="^\\d+(\\.\\d+){3}$";  final String re2="^[0-9a-f]+(:[0-9a-f]*)+:[0-9a-f]+$";  ArrayList lserver=new ArrayList();  ArrayList lsearch=new ArrayList();  try {    Class SystemProperties=Class.forName("android.os.SystemProperties");    Method method=SystemProperties.getMethod("get",new Class[]{String.class});    final String[] netdns=new String[]{"net.dns1","net.dns2","net.dns3","net.dns4"};    for (int i=0; i < netdns.length; i++) {      Object[] args=new Object[]{netdns[i]};      String v=(String)method.invoke(null,args);      if (v != null && (v.matches(re1) || v.matches(re2)) && !lserver.contains(v))       lserver.add(v);    }  } catch (  Exception e) {  }  configureFromLists(lserver,lsearch);}  }
class C{  public List<TimestampedValue<OutputT>> peekOutputElementsInWindow(TupleTag<OutputT> tag,BoundedWindow window){  ImmutableList.Builder<TimestampedValue<OutputT>> valuesBuilder=ImmutableList.builder();  for (  WindowedValue<OutputT> value : getOutput(tag)) {    if (value.getWindows().contains(window)) {      valuesBuilder.add(TimestampedValue.of(value.getValue(),value.getTimestamp()));    }  }  return valuesBuilder.build();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.443 -0500",hash_original_method="0689970A4402522168D5BA272C87560D",hash_generated_method="5221D52B2EE9B6519F8D992F992A07B8") @Override public String toString(){  return getName() + ": static final long serialVersionUID =" + getSerialVersionUID()+ "L;";}  }
class C{  public static RefactoringStatus createErrorStatus(String msg,RefactoringStatusContext context){  return createStatus(ERROR,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  protected void executeWithoutLogging(Class<?> loggingClass,Command command) throws Exception {  loggingHelper.executeWithoutLogging(loggingClass,command);}  }
class C{  public boolean isRebootRequired(){  return rebootRequired;}  }
class C{  public void detach(){  if (null != m_val) {    m_val.allowDetachToRelease(true);    m_val.detach();  }}  }
class C{  public LanguageTranslation(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  protected static int offset(int bitIndex){  return bitIndex & BIT_INDEX_MASK;}  }
class C{  public void close() throws IOException {  skipToEnd();}  }
class C{  public static long ceil(double double1,double double2){  return (long)(double1 - double2 * Math.floor(double1 / double2));}  }
class C{  protected void dispose(){  log.fine("#" + m_vo.TabNo);  m_OrderBys=null;  m_parents.clear();  m_parents=null;  m_mTable.close(true);  m_mTable=null;  m_depOnField.clear();  m_depOnField=null;  if (m_Attachments != null)   m_Attachments.clear();  m_Attachments=null;  if (m_Chats != null)   m_Chats.clear();  m_Chats=null;  if (m_vo.isInitFields())   m_vo.getFields().clear();  m_vo=null;  if (m_loader != null) {    if (m_loader.isAlive())     m_loader.interrupt();    m_loader=null;  }}  }
class C{  void addColumn(Column column){  columns.add(column);}  }
class C{  public static void copy(byte[] in,OutputStream out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No OutputStream specified");  out.write(in);}  }
class C{  private void updateTextFieldMask(){  if (m_modeBox.getSelectedIndex() == 0) {    m_inputField.setFormatterFactory(new DefaultFormatterFactory());  } else {    m_inputField.setFormatterFactory(new DefaultFormatterFactory(new CHexFormatter(8)));  }}  }
class C{  protected void drawDrawingVolatileBuffered(Graphics2D g){  Rectangle vr=getVisibleRect();  Point shift=new Point(0,0);  if (bufferedArea.contains(vr) || bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {    shift.x=bufferedArea.x - vr.x;    shift.y=bufferedArea.y - vr.y;    if (shift.x > 0) {      dirtyArea.add(new Rectangle(bufferedArea.x - shift.x,vr.y,shift.x + bufferedArea.width - vr.width,bufferedArea.height));    } else     if (shift.x < 0) {      dirtyArea.add(new Rectangle(bufferedArea.x + vr.width,vr.y,-shift.x + bufferedArea.width - vr.width,bufferedArea.height));    }    if (shift.y > 0) {      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y - shift.y,bufferedArea.width,shift.y + bufferedArea.height - vr.height));    } else     if (shift.y < 0) {      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y + vr.height,bufferedArea.width,-shift.y + bufferedArea.height - vr.height));    }    bufferedArea.x=vr.x;    bufferedArea.y=vr.y;  } else {    bufferedArea.setBounds(vr);    dirtyArea.setBounds(vr);    if (drawingBufferV != null && (drawingBufferV.getWidth() != vr.width || drawingBufferV.getHeight() != vr.height)) {      drawingBufferV.flush();      drawingBufferV=null;    }  }  while (true) {    int valid=(drawingBufferV == null) ? VolatileImage.IMAGE_INCOMPATIBLE : drawingBufferV.validate(getGraphicsConfiguration());switch (valid) {case VolatileImage.IMAGE_INCOMPATIBLE:      try {        drawingBufferV=getGraphicsConfiguration().createCompatibleVolatileImage(vr.width,vr.height,Transparency.TRANSLUCENT);      } catch (      OutOfMemoryError e) {        drawingBufferV=null;      }    dirtyArea.setBounds(bufferedArea);  break;case VolatileImage.IMAGE_RESTORED:dirtyArea.setBounds(bufferedArea);break;}if (drawingBufferV == null) {drawDrawing(g);break;}if (!dirtyArea.isEmpty()) {Graphics2D gBuf=drawingBufferV.createGraphics();setViewRenderingHints(gBuf);gBuf.setComposite(AlphaComposite.Src);if (shift.x != 0 || shift.y != 0) {gBuf.copyArea(Math.max(0,-shift.x),Math.max(0,-shift.y),drawingBufferV.getWidth() - Math.abs(shift.x),drawingBufferV.getHeight() - Math.abs(shift.y),shift.x,shift.y);shift.x=shift.y=0;}gBuf.translate(-bufferedArea.x,-bufferedArea.y);gBuf.clip(dirtyArea);gBuf.setBackground(new Color(0x0,true));gBuf.clearRect(dirtyArea.x,dirtyArea.y,dirtyArea.width,dirtyArea.height);gBuf.setComposite(AlphaComposite.SrcOver);drawDrawing(gBuf);gBuf.dispose();}if (!drawingBufferV.contentsLost()) {g.drawImage(drawingBufferV,bufferedArea.x,bufferedArea.y,null);}if (drawingBufferV.contentsLost()) {dirtyArea.setBounds(bufferedArea);} else {dirtyArea.setSize(-1,-1);break;}}}  }
class C{  public void curve(int cx,int cy,int dx,int dy) throws IOException {  if (outstandingChanges) {    flushChangeRecords();  }  int numBits=OutStream.determineSignedBitSize(cx);  int dyBits=OutStream.determineSignedBitSize(cy);  int adxBits=OutStream.determineSignedBitSize(dx);  int adyBits=OutStream.determineSignedBitSize(dy);  if (dyBits > numBits) {    numBits=dyBits;  }  if (adxBits > numBits) {    numBits=adxBits;  }  if (adyBits > numBits) {    numBits=adyBits;  }  if (numBits < 2) {    numBits=2;  }  out.writeUBits(2,2);  out.writeUBits(4,numBits - 2);  out.writeSBits(numBits,cx);  out.writeSBits(numBits,cy);  out.writeSBits(numBits,dx);  out.writeSBits(numBits,dy);}  }
class C{  private void clearMessages(){  messages.clear();}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 12:{        return myTokenTypes.tagValueSharp();      }case 24:    break;case 17:{    yybegin(CODE_TAG);    return myTokenTypes.commentData();  }case 25:break;case 16:{yybegin(COMMENT_DATA);return myTokenTypes.tagValueGT();}case 26:break;case 3:{return myTokenTypes.space();}case 27:break;case 6:{return myTokenTypes.commentData();}case 28:break;case 4:{yybegin(COMMENT_DATA);return myTokenTypes.inlineTagEnd();}case 29:break;case 21:{yybegin(COMMENT_DATA_START);return myTokenTypes.commentStart();}case 30:break;case 7:{if (checkAhead('<') || checkAhead('\"')) yybegin(COMMENT_DATA); else if (checkAhead('\u007b')) yybegin(COMMENT_DATA); else yybegin(DOC_TAG_VALUE);return myTokenTypes.space();}case 31:break;case 8:{yybegin(DOC_TAG_VALUE);return myTokenTypes.space();}case 32:break;case 10:{return myTokenTypes.tagValueToken();}case 33:break;case 20:{yybegin(TAG_DOC_SPACE);return myTokenTypes.tagName();}case 34:break;case 18:{yybegin(CODE_TAG);return myTokenTypes.space();}case 35:break;case 9:{yybegin(COMMENT_DATA);return myTokenTypes.space();}case 36:break;case 23:{yybegin(PARAM_TAG_SPACE);return myTokenTypes.tagName();}case 37:break;case 22:{yybegin(CODE_TAG_SPACE);return myTokenTypes.tagName();}case 38:break;case 1:{return myTokenTypes.badCharacter();}case 39:break;case 15:{yybegin(DOC_TAG_VALUE);return myTokenTypes.tagValueRParen();}case 40:break;case 11:{yybegin(DOC_TAG_VALUE_IN_PAREN);return myTokenTypes.tagValueLParen();}case 41:break;case 13:{return myTokenTypes.tagValueComma();}case 42:break;case 14:{if (myJdk15Enabled) {yybegin(DOC_TAG_VALUE_IN_LTGT);return myTokenTypes.tagValueLT();} else {yybegin(COMMENT_DATA);return myTokenTypes.commentData();}}case 43:break;case 5:{if (checkAhead('@')) {yybegin(INLINE_TAG_NAME);return myTokenTypes.inlineTagStart();} else {yybegin(COMMENT_DATA);return myTokenTypes.inlineTagStart();}}case 44:break;case 2:{yybegin(COMMENT_DATA);return myTokenTypes.commentData();}case 45:break;case 19:{return myTokenTypes.commentEnd();}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Table(List<RowHeaderType> rowHeaders,List<ColumnHeaderType> columnHeaders){  this.rowHeaders=rowHeaders;  this.columnHeaders=columnHeaders;  this.rows=new Hashtable<RowHeaderType,Hashtable<ColumnHeaderType,ValueType>>();  for (  RowHeaderType rowHeader : rowHeaders) {    rows.put(rowHeader,new Hashtable<ColumnHeaderType,ValueType>());  }}  }
class C{  public StrBuilder replaceAll(final char search,final char replace){  if (search != replace) {    for (int i=0; i < size; i++) {      if (buffer[i] == search) {        buffer[i]=replace;      }    }  }  return this;}  }
class C{  @Override public synchronized void mark(int readlimit){}  }
class C{  public VCardBuilder appendNameProperties(final List<ContentValues> contentValuesList){  if (VCardConfig.isVersion40(mVCardType)) {    return appendNamePropertiesV40(contentValuesList);  }  if (contentValuesList == null || contentValuesList.isEmpty()) {    if (VCardConfig.isVersion30(mVCardType)) {      appendLine(VCardConstants.PROPERTY_N,"");      appendLine(VCardConstants.PROPERTY_FN,"");    } else     if (mIsDoCoMo) {      appendLine(VCardConstants.PROPERTY_N,"");    }    return this;  }  final ContentValues contentValues=getPrimaryContentValueWithStructuredName(contentValuesList);  final String familyName=contentValues.getAsString(StructuredName.FAMILY_NAME);  final String middleName=contentValues.getAsString(StructuredName.MIDDLE_NAME);  final String givenName=contentValues.getAsString(StructuredName.GIVEN_NAME);  final String prefix=contentValues.getAsString(StructuredName.PREFIX);  final String suffix=contentValues.getAsString(StructuredName.SUFFIX);  final String displayName=contentValues.getAsString(StructuredName.DISPLAY_NAME);  if (!TextUtils.isEmpty(familyName) || !TextUtils.isEmpty(givenName)) {    final boolean reallyAppendCharsetParameterToName=shouldAppendCharsetParam(familyName,givenName,middleName,prefix,suffix);    final boolean reallyUseQuotedPrintableToName=(!mRefrainsQPToNameProperties && !(VCardUtils.containsOnlyNonCrLfPrintableAscii(familyName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(givenName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(middleName)&& VCardUtils.containsOnlyNonCrLfPrintableAscii(prefix)&& VCardUtils.containsOnlyNonCrLfPrintableAscii(suffix)));    final String formattedName;    if (!TextUtils.isEmpty(displayName)) {      formattedName=displayName;    } else {      formattedName=VCardUtils.constructNameFromElements(VCardConfig.getNameOrderType(mVCardType),familyName,middleName,givenName,prefix,suffix);    }    final boolean reallyAppendCharsetParameterToFN=shouldAppendCharsetParam(formattedName);    final boolean reallyUseQuotedPrintableToFN=!mRefrainsQPToNameProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(formattedName);    final String encodedFamily;    final String encodedGiven;    final String encodedMiddle;    final String encodedPrefix;    final String encodedSuffix;    if (reallyUseQuotedPrintableToName) {      encodedFamily=encodeQuotedPrintable(familyName);      encodedGiven=encodeQuotedPrintable(givenName);      encodedMiddle=encodeQuotedPrintable(middleName);      encodedPrefix=encodeQuotedPrintable(prefix);      encodedSuffix=encodeQuotedPrintable(suffix);    } else {      encodedFamily=escapeCharacters(familyName);      encodedGiven=escapeCharacters(givenName);      encodedMiddle=escapeCharacters(middleName);      encodedPrefix=escapeCharacters(prefix);      encodedSuffix=escapeCharacters(suffix);    }    final String encodedFormattedname=(reallyUseQuotedPrintableToFN ? encodeQuotedPrintable(formattedName) : escapeCharacters(formattedName));    mBuilder.append(VCardConstants.PROPERTY_N);    if (mIsDoCoMo) {      if (reallyAppendCharsetParameterToName) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(mVCardCharsetParameter);      }      if (reallyUseQuotedPrintableToName) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(VCARD_PARAM_ENCODING_QP);      }      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(formattedName);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);    } else {      if (reallyAppendCharsetParameterToName) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(mVCardCharsetParameter);      }      if (reallyUseQuotedPrintableToName) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(VCARD_PARAM_ENCODING_QP);      }      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(encodedFamily);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(encodedGiven);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(encodedMiddle);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(encodedPrefix);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(encodedSuffix);    }    mBuilder.append(VCARD_END_OF_LINE);    mBuilder.append(VCardConstants.PROPERTY_FN);    if (reallyAppendCharsetParameterToFN) {      mBuilder.append(VCARD_PARAM_SEPARATOR);      mBuilder.append(mVCardCharsetParameter);    }    if (reallyUseQuotedPrintableToFN) {      mBuilder.append(VCARD_PARAM_SEPARATOR);      mBuilder.append(VCARD_PARAM_ENCODING_QP);    }    mBuilder.append(VCARD_DATA_SEPARATOR);    mBuilder.append(encodedFormattedname);    mBuilder.append(VCARD_END_OF_LINE);  } else   if (!TextUtils.isEmpty(displayName)) {    buildSinglePartNameField(VCardConstants.PROPERTY_N,displayName);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_END_OF_LINE);    buildSinglePartNameField(VCardConstants.PROPERTY_FN,displayName);    mBuilder.append(VCARD_END_OF_LINE);  } else   if (VCardConfig.isVersion30(mVCardType)) {    appendLine(VCardConstants.PROPERTY_N,"");    appendLine(VCardConstants.PROPERTY_FN,"");  } else   if (mIsDoCoMo) {    appendLine(VCardConstants.PROPERTY_N,"");  }  appendPhoneticNameFields(contentValues);  return this;}  }
class C{  public boolean isValueTypeEnumeration(){  return valueType == ParameterValueType.ENUMERATION;}  }
class C{  public StartAction(final DeathmatchInfo deathmatchInfo){  this.deathmatchInfo=deathmatchInfo;}  }
class C{  public DiscordWebsocketAdapter(URI serverURI,ImplDiscordAPI api,boolean reconnect,String sessionId,int lastSeq){  this.api=api;  this.ready=SettableFuture.create();  registerHandlers();  this.isReconnect=reconnect;  this.sessionId=sessionId;  this.lastSeq=lastSeq;  WebSocketFactory factory=new WebSocketFactory();  try {    factory.setSSLContext(SSLContext.getDefault());  } catch (  NoSuchAlgorithmException e) {    logger.warn("An error occurred while setting ssl context",e);  }  try {    socket=factory.createSocket(serverURI);    socket.addListener(this);    socket.connect();  } catch (  IOException|WebSocketException e) {    logger.warn("An error occurred while connecting to websocket",e);  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  void abortWithError(String msg,Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  @Override public Object execute(ExecutionEvent event){switch (Commands.valueOf((String)event.getParameters().get(CMD_PARAM_ID))) {case CMD_DUMP:    dumpLog();  break;case CMD_CLEAR:clearLog();break;}return null;}  }
class C{  public String print(String tab){  return tab + toString();}  }
class C{  @Override public CertPath engineGenerateCertPath(InputStream inStream,String encoding) throws CertificateException {  if (inStream == null) {    throw new CertificateException("Missing input stream");  }  try {    byte[] data=readOneBlock(inStream);    if (data != null) {      return new X509CertPath(new ByteArrayInputStream(data),encoding);    } else {      throw new IOException("Empty input");    }  } catch (  IOException ioe) {    throw new CertificateException(ioe.getMessage());  }}  }
class C{  public static boolean isFileExist(String filePath){  if (!isFilePath(filePath)) {    return false;  }  File file=new File(filePath);  if (file != null && file.exists() && file.isFile()) {    return true;  }  return false;}  }
class C{  public static <T>ArrayList<T> arrayList(){  return new ArrayList<T>(4);}  }
class C{  public static void reloadInstance(final String title,final String styleName){  dispose();  initiateInstance(title,styleName);}  }
class C{  public static int countEmojis(String text){  String htmlifiedText=htmlify(text);  Matcher matcher=htmlEntityPattern.matcher(htmlifiedText);  int counter=0;  while (matcher.find()) {    String emojiCode=matcher.group();    if (isEmoji(emojiCode)) {      counter++;    }  }  return counter;}  }
class C{  private void performStorageUnManagedVolumeBookKeeping(URI storagePoolUri) throws IOException {  @SuppressWarnings("deprecation") List<URI> unManagedVolumesInDB=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getPoolUnManagedVolumeConstraint(storagePoolUri));  Set<URI> unManagedVolumesInDBSet=new HashSet<URI>(unManagedVolumesInDB);  SetView<URI> onlyAvailableinDB=Sets.difference(unManagedVolumesInDBSet,unManagedVolumesReturnedFromProvider);  _logger.info("Diff :" + Joiner.on("\t").join(onlyAvailableinDB));  if (!onlyAvailableinDB.isEmpty()) {    List<UnManagedVolume> unManagedVolumeTobeDeleted=new ArrayList<UnManagedVolume>();    Iterator<UnManagedVolume> unManagedVolumes=_dbClient.queryIterativeObjects(UnManagedVolume.class,new ArrayList<URI>(onlyAvailableinDB));    while (unManagedVolumes.hasNext()) {      UnManagedVolume volume=unManagedVolumes.next();      if (null == volume || volume.getInactive()) {        continue;      }      _logger.info("Setting unManagedVolume {} inactive",volume.getId());      volume.setStoragePoolUri(NullColumnValueGetter.getNullURI());      volume.setStorageSystemUri(NullColumnValueGetter.getNullURI());      volume.setInactive(true);      unManagedVolumeTobeDeleted.add(volume);    }    if (!unManagedVolumeTobeDeleted.isEmpty()) {      _partitionManager.updateAndReIndexInBatches(unManagedVolumeTobeDeleted,1000,_dbClient,"UnManagedVolume");    }  }}  }
class C{  public FakeClock(){  this(DEFAULT_TIME);}  }
class C{  private CharSequence insertGrouping(CharSequence s){  StringBuilder result=new StringBuilder(s.length() + s.length() / 3);  int digitsLength=s.length();  int i=0;  if (s.charAt(0) == '-') {    --digitsLength;    ++i;    result.append('-');  }  int headLength=digitsLength % 3;  if (headLength == 0) {    headLength=3;  }  result.append(s,i,i + headLength);  i+=headLength;  for (; i < s.length(); i+=3) {    result.append(localeData.groupingSeparator);    result.append(s,i,i + 3);  }  return result;}  }
class C{  public Future<Boolean> isReady(){  return ready;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof MapEntriesHolder : "Assertion Error: Expected MapEntriesHolder to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[MapEntriesRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  MapEntriesBean meb=(MapEntriesBean)clazz.newInstance();  digester.push(meb);}  }
class C{  public static ImageIcon createColorImageIcon(int w,int h,int c){  BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  for (int i=0; i < h; i++) {    for (int j=0; j < w; j++) {      img.setRGB(j,i,c);    }  }  return new ImageIcon(img);}  }
class C{  @Override public String toString(){  String dropTargetText;  if (context.finalDropController != null) {    dropTargetText="dropTarget=" + StringUtil.getShortTypeName(context.finalDropController.getDropTarget());  } else {    dropTargetText="[cancelled]";  }  return "DragEndEvent(" + dropTargetText + ", source="+ getSourceShortTypeName()+ ")";}  }
class C{  public boolean match(TagElement node,Object other){  if (!(other instanceof TagElement)) {    return false;  }  TagElement o=(TagElement)other;  return (safeEquals(node.getTagName(),o.getTagName()) && safeSubtreeListMatch(node.fragments(),o.fragments()));}  }
class C{  private static void extractDirective(HashMap<String,String> map,String key,String value) throws SaslException {  if (map.get(key) != null) {    throw new SaslException("Peer sent more than one " + key + " directive");  }  map.put(key,value);}  }
class C{  private List<LatLng> loadGpxData(XmlPullParser parser,InputStream gpxIn) throws XmlPullParserException, IOException {  List<LatLng> latLngs=new ArrayList<>();  parser.setInput(gpxIn,null);  parser.nextTag();  while (parser.next() != XmlPullParser.END_DOCUMENT) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    if (parser.getName().equals("wpt")) {      latLngs.add(new LatLng(Double.valueOf(parser.getAttributeValue(null,"lat")),Double.valueOf(parser.getAttributeValue(null,"lon"))));    }  }  return latLngs;}  }
class C{  public static void parseXmlFile(URL remote_url,DefaultHandler handler,boolean validating) throws RSSException {  RSSParser p=new RSSParser();  p.setXmlResource(remote_url);  p.setHandler(handler);  p.setValidate(validating);  p.parse();}  }
class C{  public static Date parseDateLong(String dateString,String pattern) throws ParseException {  return getSimplDateFormat(pattern).parse(dateString);}  }
class C{  public boolean checkVolumeAssociatedWithPhantomSG(CIMObjectPath sgPath,StorageSystem storage,String policy) throws Exception {  String groupName=null;  try {    groupName=(String)sgPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue();    Set<String> volIds=getVolumeDeviceIdsFromStorageGroup(storage,sgPath);    for (    String id : volIds) {      return checkVolumeAssociatedWithAnyPhantomSG(id,groupName,storage,policy);    }  } catch (  Exception e) {    _log.warn("Storage Group {} is not refreshed in DB yet",groupName,e);  }  return false;}  }
class C{  public boolean isPreserveWhitespace(){  return preserveWhitespace;}  }
class C{  public void cleanErrors(){  _errors.clear();}  }
class C{  public ArrayBuilder add(Object parameter){  parameters.add(parameter);  return this;}  }
class C{  public ViewPoint createFromParcel(Parcel in){  ViewPoint r=new ViewPoint();  r.readFromParcel(in);  return r;}  }
class C{  public final Double3D add(Double3D other){  return new Double3D(x + other.x,y + other.y,z + other.z);}  }
class C{  private void ensureConnection() throws DebugExceptionWrapper {  if (!isConnected()) {    throw new DebugExceptionWrapper("Error: Debugger is not connected");  }}  }
class C{  public MalformedConfigurationException(String message,String... infos){  super(message);  for (  String info : infos) {    addTrace(info);  }}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  @Override public String toString(){  return "cudaMemcpy3DPeerParms[" + createString(",") + "]";}  }
class C{  @ObjectiveCName("saveDraftWithPeer:withDraft:") public void saveDraft(Peer peer,String draft){  modules.getMessagesModule().saveDraft(peer,draft);}  }
class C{  public static PrintStream systemDotOut(){  return System.out;}  }
class C{  public Map<TaskName,Integer> readChangeLogPartitionMapping(){  log.debug("Reading changelog partition information");  final HashMap<TaskName,Integer> changelogMapping=new HashMap<TaskName,Integer>();  for (  CoordinatorStreamMessage coordinatorStreamMessage : getBootstrappedStream(SetChangelogMapping.TYPE)) {    SetChangelogMapping changelogMapEntry=new SetChangelogMapping(coordinatorStreamMessage);    changelogMapping.put(new TaskName(changelogMapEntry.getTaskName()),changelogMapEntry.getPartition());    log.debug("TaskName: {} is mapped to {}",changelogMapEntry.getTaskName(),changelogMapEntry.getPartition());  }  return changelogMapping;}  }
class C{  public boolean hasGender(){  return hasExtension(Gender.class);}  }
class C{  public static String print(Object o,boolean prettyPrint){  if (o == null) {    return null;  }  Node n=new Node(getName(o),getIdOrDefault(o),o,null);  if (prettyPrint) {    return n.toJSON();  } else {    return n.toString();  }}  }
class C{  public HasChildQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  private AddGlossaryCommand(){}  }
class C{  public StatusNotification(String title,String content,Status status,DisplayMode displayMode,ProjectConfigDto project,NotificationListener listener){  super(title,content,project,listener);  this.status=status;  this.displayMode=displayMode;}  }
class C{  void removeAddress(final int latchedAddr){  if (latchedAddr == 0)   return;  m_allocationWriteLock.lock();  try {    final FixedAllocator alloc=getBlockByAddress(latchedAddr);    assert alloc != null;    final int addrOffset=getOffset(latchedAddr);    if (alloc == null) {      throw new IllegalArgumentException("Invalid address provided to immediateFree: " + latchedAddr);    }    final long pa=alloc.getPhysicalAddress(addrOffset);    if (log.isTraceEnabled())     log.trace("Freeing allocation at " + latchedAddr + ", physical address: "+ pa);    alloc.free(latchedAddr,0,false);  }  finally {    m_allocationWriteLock.unlock();  }}  }
class C{  protected int retrieveStartingCatchPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNamecatch:        return this.scanner.startPosition;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  public ConfigurationSocketAdapter configure() throws RuntimeException {  configure('/' + "esperio.socket.cfg.xml");  return this;}  }
class C{  public static Date daysBeforeNow(int numDays){  if (numDays <= 0) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(new Date());  cal.add(Calendar.DAY_OF_YEAR,-numDays);  return cal.getTime();}  }
class C{  public static void normalize(double[] counts,double alpha){  double total_count=0;  for (int i=0; i < counts.length; i++)   total_count+=counts[i];  for (int i=0; i < counts.length; i++)   counts[i]=(counts[i] + alpha) / (total_count + counts.length * alpha);}  }
class C{  public SettableForwarder(Consumer<T> destination){  this.destination=destination;}  }
class C{  public static final boolean canTakeKing(Position pos){  pos.setWhiteMove(!pos.whiteMove);  boolean ret=inCheck(pos);  pos.setWhiteMove(!pos.whiteMove);  return ret;}  }
class C{  public Y notBetween(X from,X to){  return add(" NOT BETWEEN ? AND ?",from,to);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  logger.debug("doPost");  PrintWriter out=null;  try {    response.setContentType("application/json");    String result=processPostRequest(request);    out=response.getWriter();    out.println(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  protected ArrayDBIDs affectedkNN(List<? extends KNNList> extract,DBIDs remove){  HashSetModifiableDBIDs ids=DBIDUtil.newHashSet();  for (  KNNList drps : extract) {    for (DBIDIter iter=drps.iter(); iter.valid(); iter.advance()) {      ids.add(iter);    }  }  ids.removeDBIDs(remove);  return DBIDUtil.newArray(ids);}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof Node)) {    return false;  }  final Node other=(Node)obj;  return other.port == this.port && other.m_address.equals(this.m_address);}  }
class C{  public GPTree lightClone(){  try {    return (GPTree)(super.clone());  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  protected boolean logFoundJars(Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  logMsg("#---- BEGIN Listing XML-related jars in: " + desc + " ----");  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + subhash.get(keyStr));      } catch (      Exception e) {        errors=true;        logMsg("Reading-" + key + "= threw: "+ e.toString());      }    }  }  logMsg("#----- END Listing XML-related jars in: " + desc + " -----");  return errors;}  }
class C{  public static Value noExceptionThrowingRhs(Unit unit){  return noExceptionThrowing(rhs(unit));}  }
class C{  public void testWithCycles2() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter w=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("field","here comes kaoma",Field.Store.NO));  w.addDocument(doc);  doc=new Document();  doc.add(newTextField("field","here comes sun sun sun sun kaoma",Field.Store.NO));  w.addDocument(doc);  IndexReader r=w.getReader();  IndexSearcher s=newSearcher(r);  TermAutomatonQuery q=new TermAutomatonQuery("field");  int init=q.createState();  int s1=q.createState();  q.addTransition(init,s1,"here");  int s2=q.createState();  q.addTransition(s1,s2,"comes");  int s3=q.createState();  q.addTransition(s2,s3,"sun");  q.addTransition(s3,s3,"sun");  int s4=q.createState();  q.addTransition(s3,s4,"kaoma");  q.setAccept(s4,true);  q.finish();  assertEquals(1,s.search(q,1).totalHits);  w.close();  r.close();  dir.close();}  }
class C{  public void add(GlowSession session){  sessions.put(session,true);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public Applications createApplications(){  return mAdapter.create(Applications.class);}  }
class C{  public boolean isSetDeleted(){  return EncodingUtils.testBit(__isset_bitfield,__DELETED_ISSET_ID);}  }
class C{  @Override public void emit(HashMap<K,ArrayList<V>> tuple){  bottom.emit(tuple);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USAT16");  translateAll(environment,instruction,"USAT16",instructions);}  }
class C{  private CompositeListener addCompositeListener(JAMonListener listenerToAdd){  if (listener instanceof CompositeListener)   return ((CompositeListener)listener).addListener(listenerToAdd); else   return new CompositeListener().addListener(listener).addListener(listenerToAdd);}  }
class C{  public CResultsTableModel(final Object[][] data,final String[] columnNames){  super(data,columnNames);}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost[] proxies,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxies),secure,tunnelled,layered);}  }
class C{  private String timestamp(){  String timestamp=null;  Calendar cal=Calendar.getInstance();  DateFormat dfm=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");  dfm.setTimeZone(TimeZone.getTimeZone("GMT"));  timestamp=dfm.format(cal.getTime());  return timestamp;}  }
class C{  public byte[] convertIndexToRGB(final byte[] index){  return index;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (baseFeatureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected float[] parseFloatArray(String floatArrayString){  String[] arrayOfNumbers=floatArrayString.trim().split("\\s+");  float[] floats=new float[arrayOfNumbers.length];  int i=0;  for (  String s : arrayOfNumbers) {    floats[i++]=Float.parseFloat(s);  }  return floats;}  }
class C{  public static Test suite(){  return new TestSuite(TestSemXml.class);}  }
class C{  static public CircuitManager createCircuitManager(TorConfig config,DirectoryDownloaderImpl directoryDownloader,Directory directory,ConnectionCache connectionCache,TorInitializationTracker tracker){  return new CircuitManagerImpl(config,directoryDownloader,directory,connectionCache,tracker);}  }
class C{  public static void showFab(FloatingActionButton fab){  fab.show();  fab.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();}  }
class C{  public static ReferenceRanges<String> createExplicitReferenceRange(SequenceNameLocus... regions){  final ReferenceRanges.Accumulator<String> acc=new ReferenceRanges.Accumulator<>();  for (  SequenceNameLocus region : regions) {    if (region == null || region.getSequenceName() == null) {      throw new NullPointerException();    }    final Range wideRange=new Range(region.getStart() == RegionRestriction.MISSING ? Integer.MIN_VALUE : region.getStart(),region.getEnd() == RegionRestriction.MISSING ? Integer.MAX_VALUE : region.getEnd());    acc.addRangeData(region.getSequenceName(),new RangeList.RangeData<>(wideRange,region.toString()));  }  return acc.getReferenceRanges();}  }
class C{  public SingleIndexTest(String name){  super(name);}  }
class C{  public EntryEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void okAction(){  List<String[]> filterList=new LinkedList<>();  for (  String[] tupel : model.getRowTupels()) {    filterList.add(new String[]{ExampleFilter.PARAMETER_FILTERS_ENTRY_KEY,ParameterTypeTupel.transformTupel2String(tupel)});  }  operator.setListParameter(ExampleFilter.PARAMETER_FILTERS_LIST,filterList);  operator.setParameter(ExampleFilter.PARAMETER_FILTERS_LOGIC_AND,Boolean.toString(radioButtonAND.isSelected()));  operator.setParameter(ExampleFilter.PARAMETER_FILTERS_CHECK_METADATA,Boolean.toString(checkBoxMetadata.isSelected()));  dispose();}  }
class C{  public GF2nElement increase(){  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.increaseThis();  return result;}  }
class C{  public static boolean isEmpty(Object value){  if (value == null) {    return (true);  } else   if ((value instanceof String) && (((String)value).length() < 1)) {    return (true);  } else   if (value.getClass().isArray()) {    if (0 == java.lang.reflect.Array.getLength(value)) {      return (true);    }  } else   if (value instanceof List) {    if (((List)value).isEmpty()) {      return (true);    }  } else   if (value instanceof Collection) {    if (((Collection)value).isEmpty()) {      return (true);    }  } else   if ((value instanceof Map) && (((Map)value).isEmpty())) {    return true;  }  return (false);}  }
class C{  public synchronized boolean contains(L leftValue,R rightValue){  if (leftValue == rightValue)   return true;  if (leftValue == null || rightValue == null)   return false;  R right=tableLeft.get(leftValue);  if (right == rightValue)   return true;  return tableLeft.get(leftValue).equals(right);}  }
class C{  protected void appendValueLength(long value){  if (value < LENGTH_QUOTE) {    appendShortLength((int)value);    return;  }  append(LENGTH_QUOTE);  appendUintvarInteger(value);}  }
class C{  public String normalizeSystemName(String systemName){  return (SerialAddress.normalizeSystemName(systemName));}  }
class C{  public static void save(File file,byte[] bytes) throws IOException {  OutputStream os=new FileOutputStream(file);  try {    os=new BufferedOutputStream(os);    for (int i=0; i < bytes.length; i+=2048) {      int len=Math.min(bytes.length - i,2048);      os.write(bytes,i,len);    }  }  finally {    os.close();  }}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public boolean isMinXSet(int scale){  return mMinX[scale] != MathHelper.NULL_VALUE;}  }
class C{  public Target propagateType(int row,int col,Edge edge,Type dataType,Collection<Cell> newCandidates){  Position pathStart=new Position(row,col,edge);  HashSet<Position> seen=new HashSet<Position>();  boolean typeChanged=false;  do {    Cell cell=cell(row,col);    if (cell == null) {      break;    }    Command cmd=cell.command;    if (cmd != null) {      int index=col - cell.col;      if (edge == Edge.TOP && index < cell.inputTypeCache.length) {        Type oldType=cell.inputTypeCache[index];        if (!dataType.equals(oldType)) {          typeChanged=true;          if (oldType != null) {            dataType=Types.commonSuperType(dataType,oldType);          }        }        cell.inputTypeCache[index]=dataType;        if (cmd.inputCount() == 0 || cmd.inputType(index).isAssignableFrom(dataType)) {          if (typeChanged) {            newCandidates.add(cell);          }          return new Target(cell,index,pathStart);        }        System.err.println(cmd.inputType(index) + " not assignable from " + dataType+ " old type: "+ oldType);        typeErrors=true;      }      break;    }    Edge target=cell.connection(edge);    if (target == null) {      break;    }    Type oldType=cell.inputTypeCache[edge.ordinal()];    if (!dataType.equals(oldType)) {      typeChanged=true;      if (oldType != null) {        dataType=Types.commonSuperType(dataType,oldType);      }    }    cell.inputTypeCache[edge.ordinal()]=dataType;    row+=target.row;    col+=target.col;    edge=target.opposite();  } while (seen.add(new Position(row,col,edge)));  return new Target(null,-1,pathStart);}  }
class C{  public AttributeCreatorImpl replaceAttribute(AttributeKey<?> attributeKey){  return addAttribute(attributeKey,Action.REPLACE);}  }
class C{  public boolean hasNotifications(String tag){  return mCenter.hasEntries(ID,tag);}  }
class C{  public void overridenMethodWithDocsToCopy(){}  }
class C{  protected Element createNewElement(String name){  HTMLElement elem=new HTMLElement(name);  return elem;}  }
class C{  public void show(int timeout){  if (!mPlayer.isControlPanelAutoHide()) {    timeout=0;  }  if (!mShowing && mAnchor != null) {    setProgress();    if (mPauseButton != null) {      mPauseButton.requestFocus();    }    disableUnsupportedButtons();    FrameLayout.LayoutParams tlp=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.BOTTOM);    mAnchor.addView(this,tlp);    mShowing=true;  }  updatePausePlay();  updateFullScreen();  updateTitle();  mHandler.sendEmptyMessage(SHOW_PROGRESS);  Message msg=mHandler.obtainMessage(FADE_OUT);  if (timeout != 0) {    mHandler.removeMessages(FADE_OUT);    mHandler.sendMessageDelayed(msg,timeout);  }}  }
class C{  private void initEnumerationParameter(PricedParameterRow curParameter){  List<VOPricedOption> pricedOptionList=curParameter.getPricedParameter().getPricedOptions();  for (int optionIndex=0; optionIndex < pricedOptionList.size(); optionIndex++) {    VOPricedOption pricedOption=pricedOptionList.get(optionIndex);    List<VOPricedRole> oldRoleSpecificUserPrices=pricedOption.getRoleSpecificUserPrices();    for (int indexInCache=0; indexInCache < parametersRoles.size(); indexInCache++) {      VOPricedOption curPricedOption=parametersRoles.get(indexInCache).getPricedOption();      if (curPricedOption != null) {        if (pricedOption.getKey() == curPricedOption.getKey()) {          for (int j=0; j < roles.size(); j++) {            VORoleDefinition role=roles.get(j);            for (int roleIndex=0; roleIndex < oldRoleSpecificUserPrices.size(); roleIndex++) {              VORoleDefinition oldCurRole=oldRoleSpecificUserPrices.get(roleIndex).getRole();              if (oldCurRole.getRoleId().equals(role.getRoleId())) {                BigDecimal pricePerUser=oldRoleSpecificUserPrices.get(roleIndex).getPricePerUser();                VOPricedOption po=pricedParametersOfAllRoles[j][indexInCache].getPricedOption();                po.setPricePerUser(pricePerUser);              }            }          }        }      }    }  }}  }
class C{  public boolean hasPort(){  return port >= 0;}  }
class C{  public boolean isOutline(){  return this.showOutline;}  }
class C{  @Override public void logoutSuccess(Message arg0,HttpServletRequest request,HttpServletResponse response){  String tenant=logoutState.getIdmAccessor().getTenant();  try {    if (logoutState.needLogoutRequest()) {      SamlServiceImpl.sendSLORequestsToOtherParticipants(tenant,logoutState);    }  } catch (  IOException e) {    logger.error("Catch IOException in sending logout requests to other service providers.");  }  try {    if (logoutState.needLogoutResponse()) {      String redirectUrl=SamlServiceImpl.buildResponseUrl(tenant,logoutState);      logger.info("Sending SAML logout response to SP. Redirect url is: {} ",redirectUrl);      if (redirectUrl != null) {        response.sendRedirect(redirectUrl);      } else {        SamlServiceImpl.sendLogoutError(logoutState.getLocale(),response,logoutState,messageSource);      }    }  } catch (  IOException e) {    logger.error("Caught IOException in sending logout response to service provider.");  }}  }
class C{  private void startMarginAnimation(boolean enter){  startMarginAnimation(enter,mStacks[1].isDisplayable());}  }
class C{  private void recordElementInfo(IJavaElement element,int depth){  if (depth >= this.maxDepth) {    return;  }  JavaElementInfo info=(JavaElementInfo)((JavaElement)element).manager.getInfo(element);  if (info == null)   return;  this.infos.put(element,info);  if (element instanceof IParent) {    IJavaElement[] children=info.getChildren();    if (children != null) {      insertPositions(children,false);      for (int i=0, length=children.length; i < length; i++)       recordElementInfo(children[i],depth + 1);    }  }  IAnnotation[] annotations=null;  if (info instanceof AnnotatableInfo)   annotations=((AnnotatableInfo)info).annotations;  if (annotations != null) {    if (this.annotationInfos == null)     this.annotationInfos=new HashMap();    JavaModelManager manager=((JavaElement)element).manager;    for (int i=0, length=annotations.length; i < length; i++) {      this.annotationInfos.put(annotations[i],manager.getInfo(annotations[i]));    }  }}  }
class C{  @SuppressLint("InlinedApi") public static Bitmap blur(Context context,Bitmap sentBitmap,int radius){  if (radius < 0) {    radius=0;    if (DEBUG) {      LogUtils.w(TAG,"radius must be 0 < r < 25 , forcing radius=0");    }  } else   if (radius > 25) {    radius=25;    if (DEBUG) {      LogUtils.w(TAG,"radius must be 0 < r < 25 , forcing radius=25");    }  }  if (Build.VERSION.SDK_INT > 16) {    Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);    final RenderScript rs=RenderScript.create(context);    final Allocation input=Allocation.createFromBitmap(rs,sentBitmap,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);    final Allocation output=Allocation.createTyped(rs,input.getType());    final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    script.setRadius(radius);    script.setInput(input);    script.forEach(output);    output.copyTo(bitmap);    return bitmap;  }  Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean buildIdIndex,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  int shift;  for (shift=0; (blocksize>>>=1) != 0; ++shift)   ;  m_blocksize=1 << shift;  m_SHIFT=shift;  m_MASK=m_blocksize - 1;  m_buildIdIndex=buildIdIndex;  m_values=new Vector(32,512);  m_maxNodeIndex=1 << DTMManager.IDENT_DTM_NODE_BITS;  m_exptype_map0=m_exptype.getMap0();  m_nextsib_map0=m_nextsib.getMap0();  m_firstch_map0=m_firstch.getMap0();  m_parent_map0=m_parent.getMap0();}  }
class C{  private void doSetActiveEditor(IEditorPart part){  IStatusLineManager manager=getActionBars().getStatusLineManager();  manager.setMessage(null);  manager.setErrorMessage(null);  ITextEditor editor=null;  if (part instanceof ITextEditor) {    editor=(ITextEditor)part;  }  togglePresentation.setEditor(editor);  gotoDefinition.setAction(getAction(editor,IVelocityActionConstants.GOTO_DEFINITION));  contentAssist.setAction(getAction(editor,IVelocityActionConstants.CONTENT_ASSIST));  comment.setAction(getAction(editor,IVelocityActionConstants.COMMENT));  uncomment.setAction(getAction(editor,IVelocityActionConstants.UNCOMMENT));  IActionBars actionBars=getActionBars();  if (actionBars != null) {    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),getAction(editor,ITextEditorActionConstants.DELETE));    actionBars.setGlobalActionHandler(ActionFactory.UNDO.getId(),getAction(editor,ITextEditorActionConstants.UNDO));    actionBars.setGlobalActionHandler(ActionFactory.REDO.getId(),getAction(editor,ITextEditorActionConstants.REDO));    actionBars.setGlobalActionHandler(ActionFactory.CUT.getId(),getAction(editor,ITextEditorActionConstants.CUT));    actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),getAction(editor,ITextEditorActionConstants.COPY));    actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),getAction(editor,ITextEditorActionConstants.PASTE));    actionBars.setGlobalActionHandler(ActionFactory.SELECT_ALL.getId(),getAction(editor,ITextEditorActionConstants.SELECT_ALL));    actionBars.setGlobalActionHandler(ActionFactory.FIND.getId(),getAction(editor,ITextEditorActionConstants.FIND));    actionBars.setGlobalActionHandler(IDEActionFactory.BOOKMARK.getId(),getAction(editor,IDEActionFactory.BOOKMARK.getId()));    actionBars.setGlobalActionHandler(IDEActionFactory.ADD_TASK.getId(),getAction(editor,IDEActionFactory.ADD_TASK.getId()));    actionBars.setGlobalActionHandler(ITextEditorActionConstants.GOTO_LINE,getAction(editor,ITextEditorActionDefinitionIds.LINE_GOTO));    actionBars.setGlobalActionHandler(IJavaEditorActionDefinitionIds.COMMENT,getAction(editor,IVelocityActionConstants.COMMENT));    actionBars.setGlobalActionHandler(IJavaEditorActionDefinitionIds.UNCOMMENT,getAction(editor,IVelocityActionConstants.UNCOMMENT));    actionBars.setGlobalActionHandler(IVelocityActionConstants.GOTO_DEFINITION,getAction(editor,IVelocityActionConstants.GOTO_DEFINITION));    actionBars.updateActionBars();  }}  }
class C{  public static boolean containsConstant(Enum<?>[] enumValues,String constant,boolean caseSensitive){  for (  Enum<?> candidate : enumValues) {    if (caseSensitive ? candidate.toString().equals(constant) : candidate.toString().equalsIgnoreCase(constant)) {      return true;    }  }  return false;}  }
class C{  public int doAfterBody() throws JspException {  if (firstPass) {    System.out.println("Evaluating body again...");    BodyContent cont=getBodyContent();    cont.clearBody();    firstPass=false;    return EVAL_BODY_AGAIN;  } else {    return super.doAfterBody();  }}  }
class C{  public void testDocumentBoostOmitNorms() throws Exception {  XmlDoc xml=new XmlDoc();  xml.xml="<doc boost=\"3.0\">" + "<field name=\"id\">2</field>" + "<field name=\"title_stringNoNorms\">mytitle</field>"+ "</doc>";  assertNull(h.validateUpdate(add(xml,new String[0])));}  }
class C{  public void testNullSubmit(){  SubmissionPublisher<Integer> p=basicPublisher();  try {    p.submit(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public ParseException(final int line,final int column,final String message){  super(Integer.toString(line) + ":" + column+ ": "+ message);  this.line=line;  this.column=column;}  }
class C{  public void start(final InputStream in) throws SAXException, IOException, ParserConfigurationException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser saxParser=factory.newSAXParser();  saxParser.parse(in,this);}  }
class C{  private Query analyzeBoolean(String field,TokenStream stream) throws IOException {  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);  stream.reset();  List<Term> terms=new ArrayList<>();  while (stream.incrementToken()) {    terms.add(new Term(field,termAtt.getBytesRef()));  }  return newSynonymQuery(terms.toArray(new Term[terms.size()]));}  }
class C{  protected void sequence_AssignmentExpression(ISerializationContext context,AssignmentExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ASSIGNMENT_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public ObjectDetection(){  detector=FeatureDetector.create(FeatureDetectorType.FAST.val());  extractor=DescriptorExtractor.create(DescriptorExtractorType.BRIEF.val());  matcher=DescriptorMatcher.create(DescriptorMatcherType.BRUTEFORCE_HAMMING.val());}  }
class C{  public CrawlDatum distributeScoreToOutlinks(Text fromUrl,ParseData parseData,Collection<Entry<Text,CrawlDatum>> targets,CrawlDatum adjust,int allCount) throws ScoringFilterException {  float score=scoreInjected;  String scoreString=parseData.getContentMeta().get(Nutch.SCORE_KEY);  if (scoreString != null) {    try {      score=Float.parseFloat(scoreString);    } catch (    Exception e) {      LOG.error("Error: ",e);    }  }  int validCount=targets.size();  if (countFiltered) {    score/=allCount;  } else {    if (validCount == 0) {      return adjust;    }    score/=validCount;  }  float internalScore=score * internalScoreFactor;  float externalScore=score * externalScoreFactor;  for (  Entry<Text,CrawlDatum> target : targets) {    try {      String toHost=new URL(target.getKey().toString()).getHost();      String fromHost=new URL(fromUrl.toString()).getHost();      if (toHost.equalsIgnoreCase(fromHost)) {        target.getValue().setScore(internalScore);      } else {        target.getValue().setScore(externalScore);      }    } catch (    MalformedURLException e) {      LOG.error("Error: ",e);      target.getValue().setScore(externalScore);    }  }  return adjust;}  }
class C{  void blockMix128(long k1,long k2){  h1^=mixK1(k1);  h1=Long.rotateLeft(h1,27);  h1+=h2;  h1=(h1 * 5) + 0x52dce729;  h2^=mixK2(k2);  h2=Long.rotateLeft(h2,31);  h2+=h1;  h2=(h2 * 5) + 0x38495ab5;}  }
class C{  public static boolean afterOrEqual(final Date date,final Date dateToCompare){  return date.after(dateToCompare) || date.equals(dateToCompare);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <T>Mono<T> fromIterable(Iterable<T> t){  return Mono.from(Flux.fromIterable(t));}  }
class C{  public void recordUsingNullReference(Scope scope,LocalVariableBinding local,Expression reference,int checkType,FlowInfo flowInfo){  if ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0 || flowInfo.isDefinitelyUnknown(local)) {    return;  }switch (checkType) {case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:    if (flowInfo.isDefinitelyNonNull(local)) {      if (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {        if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {          scope.problemReporter().localVariableRedundantCheckOnNonNull(local,reference);        }        if (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {          flowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);        }      } else {        if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {          scope.problemReporter().localVariableNonNullComparedToNull(local,reference);        }        if (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {          flowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);        }      }      return;    } else     if (flowInfo.cannotBeDefinitelyNullOrNonNull(local)) {      return;    }case CAN_ONLY_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:case CAN_ONLY_NULL | IN_ASSIGNMENT:case CAN_ONLY_NULL | IN_INSTANCEOF:  if (flowInfo.isDefinitelyNull(local)) {switch (checkType & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:      if (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) {        scope.problemReporter().localVariableNullReference(local,reference);        return;      }    if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {      scope.problemReporter().localVariableRedundantCheckOnNull(local,reference);    }  if (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {    flowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);  }return;case FlowContext.IN_COMPARISON_NON_NULL:if (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariableNullReference(local,reference);return;}if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableNullComparedToNonNull(local,reference);}if (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {flowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);}return;case FlowContext.IN_ASSIGNMENT:scope.problemReporter().localVariableRedundantNullAssignment(local,reference);return;case FlowContext.IN_INSTANCEOF:scope.problemReporter().localVariableNullInstanceof(local,reference);return;}} else if (flowInfo.isPotentiallyNull(local)) {switch (checkType & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:if (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,reference);return;}break;case FlowContext.IN_COMPARISON_NON_NULL:if (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,reference);return;}break;}} else if (flowInfo.cannotBeDefinitelyNullOrNonNull(local)) {return;}break;case MAY_NULL:if (flowInfo.isDefinitelyNull(local)) {scope.problemReporter().localVariableNullReference(local,reference);return;}if (flowInfo.isPotentiallyNull(local)) {scope.problemReporter().localVariablePotentialNullReference(local,reference);return;}break;default :}if (this.parent != null) {this.parent.recordUsingNullReference(scope,local,reference,checkType,flowInfo);}}  }
class C{  static int divideArrayByInt(int dest[],int src[],final int srcLength,final int divisor){  long rem=0;  long bLong=divisor & 0xffffffffL;  for (int i=srcLength - 1; i >= 0; i--) {    long temp=(rem << 32) | (src[i] & 0xffffffffL);    long quot;    if (temp >= 0) {      quot=(temp / bLong);      rem=(temp % bLong);    } else {      long aPos=temp >>> 1;      long bPos=divisor >>> 1;      quot=aPos / bPos;      rem=aPos % bPos;      rem=(rem << 1) + (temp & 1);      if ((divisor & 1) != 0) {        if (quot <= rem) {          rem-=quot;        } else {          if (quot - rem <= bLong) {            rem+=bLong - quot;            quot-=1;          } else {            rem+=(bLong << 1) - quot;            quot-=2;          }        }      }    }    dest[i]=(int)(quot & 0xffffffffL);  }  return (int)rem;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultFilter.gif",BeanVisual.ICON_PATH + "DefaultFilter_animated.gif");  m_visual.setText("SubstringLabeler");}  }
class C{  public static Vector<Object> toXmlRpcProjectsParameters(Collection<Project> projects){  Vector<Object> projectsParams=new Vector<Object>();  for (  Project project : projects) {    projectsParams.add(project.marshallize());  }  return projectsParams;}  }
class C{  protected void childDeserializedHook(Object child,BCSChild bcsc){synchronized (children) {    children.put(child,bcsc);  }}  }
class C{  public void addColumnToAdd(Column column){  if (!columnsToAdd.contains(column)) {    columnsToAdd.add(column);  }}  }
class C{  public void assureProxy(){  for (  TcpProxy[] tcpProxies : proxySet.values()) {    for (    TcpProxy tcpProxy : tcpProxies) {      tcpProxy.assureProxyOk();    }  }}  }
class C{  public MultDatasourceTransactionInterceptor(PlatformTransactionManager ptm,Properties attributes){  setTransactionManager(ptm);  setTransactionAttributes(attributes);}  }
class C{  public void testPolymorphicList() throws Exception {  ObjectMapper mapper=getJaxbMapper();  ListBean input=new ListBean(new Whale("bluey",150),new Buffalo("Bob","black"));  String str=mapper.writeValueAsString(input);  ListBean result=mapper.readValue(str,ListBean.class);  assertEquals(2,result.animals.size());  Animal a1=result.animals.get(0);  assertNotNull(a1);  assertEquals(Whale.class,a1.getClass());  assertEquals("bluey",a1.nickname);  assertEquals(150,((Whale)a1).weightInTons);  Animal a2=result.animals.get(1);  assertNotNull(a2);  assertEquals(Buffalo.class,a2.getClass());  assertEquals("Bob",a2.nickname);  assertEquals("black",((Buffalo)a2).hairColor);}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  @Override protected boolean properState(){  return properState(false);}  }
class C{  private URL makeUrl(URL url,String path,String visibility,String projection) throws MalformedURLException {  if (visibility == null) {    throw new NullPointerException("visibility is null");  }  if (projection == null) {    throw new NullPointerException("projection is null");  }  path=path + "/" + encode(visibility)+ "/"+ encode(projection);  return new URL(url,path);}  }
class C{  private BusinessObjectDataDdl createBusinessObjectDataDdl(BusinessObjectDataDdlRequest request){  BusinessObjectDataDdl businessObjectDataDdl=new BusinessObjectDataDdl();  businessObjectDataDdl.setNamespace(request.getNamespace());  businessObjectDataDdl.setBusinessObjectDefinitionName(request.getBusinessObjectDefinitionName());  businessObjectDataDdl.setBusinessObjectFormatUsage(request.getBusinessObjectFormatUsage());  businessObjectDataDdl.setBusinessObjectFormatFileType(request.getBusinessObjectFormatFileType());  businessObjectDataDdl.setBusinessObjectFormatVersion(request.getBusinessObjectFormatVersion());  businessObjectDataDdl.setPartitionValueFilters(request.getPartitionValueFilters());  businessObjectDataDdl.setPartitionValueFilter(request.getPartitionValueFilter());  businessObjectDataDdl.setBusinessObjectDataVersion(request.getBusinessObjectDataVersion());  businessObjectDataDdl.setStorageNames(request.getStorageNames());  businessObjectDataDdl.setStorageName(request.getStorageName());  businessObjectDataDdl.setOutputFormat(request.getOutputFormat());  businessObjectDataDdl.setTableName(request.getTableName());  businessObjectDataDdl.setCustomDdlName(request.getCustomDdlName());  return businessObjectDataDdl;}  }
class C{  public void emitop0(int op){  emitop(op);  if (!alive)   return;switch (op) {case aaload:{      state.pop(1);      Type a=state.stack[state.stacksize - 1];      state.pop(1);      Type stackType=a.hasTag(BOT) ? syms.objectType : types.erasure(types.elemtype(a));      state.push(stackType);    }  break;case goto_:markDead();break;case nop:case ineg:case lneg:case fneg:case dneg:break;case aconst_null:state.push(syms.botType);break;case iconst_m1:case iconst_0:case iconst_1:case iconst_2:case iconst_3:case iconst_4:case iconst_5:case iload_0:case iload_1:case iload_2:case iload_3:state.push(syms.intType);break;case lconst_0:case lconst_1:case lload_0:case lload_1:case lload_2:case lload_3:state.push(syms.longType);break;case fconst_0:case fconst_1:case fconst_2:case fload_0:case fload_1:case fload_2:case fload_3:state.push(syms.floatType);break;case dconst_0:case dconst_1:case dload_0:case dload_1:case dload_2:case dload_3:state.push(syms.doubleType);break;case aload_0:state.push(lvar[0].sym.type);break;case aload_1:state.push(lvar[1].sym.type);break;case aload_2:state.push(lvar[2].sym.type);break;case aload_3:state.push(lvar[3].sym.type);break;case iaload:case baload:case caload:case saload:state.pop(2);state.push(syms.intType);break;case laload:state.pop(2);state.push(syms.longType);break;case faload:state.pop(2);state.push(syms.floatType);break;case daload:state.pop(2);state.push(syms.doubleType);break;case istore_0:case istore_1:case istore_2:case istore_3:case fstore_0:case fstore_1:case fstore_2:case fstore_3:case astore_0:case astore_1:case astore_2:case astore_3:case pop:case lshr:case lshl:case lushr:state.pop(1);break;case areturn:case ireturn:case freturn:Assert.check(state.nlocks == 0);state.pop(1);markDead();break;case athrow:state.pop(1);markDead();break;case lstore_0:case lstore_1:case lstore_2:case lstore_3:case dstore_0:case dstore_1:case dstore_2:case dstore_3:case pop2:state.pop(2);break;case lreturn:case dreturn:Assert.check(state.nlocks == 0);state.pop(2);markDead();break;case dup:state.push(state.stack[state.stacksize - 1]);break;case return_:Assert.check(state.nlocks == 0);markDead();break;case arraylength:state.pop(1);state.push(syms.intType);break;case isub:case iadd:case imul:case idiv:case imod:case ishl:case ishr:case iushr:case iand:case ior:case ixor:state.pop(1);break;case aastore:state.pop(3);break;case land:case lor:case lxor:case lmod:case ldiv:case lmul:case lsub:case ladd:state.pop(2);break;case lcmp:state.pop(4);state.push(syms.intType);break;case l2i:state.pop(2);state.push(syms.intType);break;case i2l:state.pop(1);state.push(syms.longType);break;case i2f:state.pop(1);state.push(syms.floatType);break;case i2d:state.pop(1);state.push(syms.doubleType);break;case l2f:state.pop(2);state.push(syms.floatType);break;case l2d:state.pop(2);state.push(syms.doubleType);break;case f2i:state.pop(1);state.push(syms.intType);break;case f2l:state.pop(1);state.push(syms.longType);break;case f2d:state.pop(1);state.push(syms.doubleType);break;case d2i:state.pop(2);state.push(syms.intType);break;case d2l:state.pop(2);state.push(syms.longType);break;case d2f:state.pop(2);state.push(syms.floatType);break;case tableswitch:case lookupswitch:state.pop(1);break;case dup_x1:{Type val1=state.pop1();Type val2=state.pop1();state.push(val1);state.push(val2);state.push(val1);break;}case bastore:state.pop(3);break;case int2byte:case int2char:case int2short:break;case fmul:case fadd:case fsub:case fdiv:case fmod:state.pop(1);break;case castore:case iastore:case fastore:case sastore:state.pop(3);break;case lastore:case dastore:state.pop(4);break;case dup2:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();state.push(value2);state.push(value1);state.push(value2);state.push(value1);} else {Type value=state.pop2();state.push(value);state.push(value);}break;case dup2_x1:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();Type value3=state.pop1();state.push(value2);state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value1=state.pop2();Type value2=state.pop1();state.push(value1);state.push(value2);state.push(value1);}break;case dup2_x2:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();if (state.stack[state.stacksize - 1] != null) {Type value3=state.pop1();Type value4=state.pop1();state.push(value2);state.push(value1);state.push(value4);state.push(value3);state.push(value2);state.push(value1);} else {Type value3=state.pop2();state.push(value2);state.push(value1);state.push(value3);state.push(value2);state.push(value1);}} else {Type value1=state.pop2();if (state.stack[state.stacksize - 1] != null) {Type value2=state.pop1();Type value3=state.pop1();state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value2=state.pop2();state.push(value1);state.push(value2);state.push(value1);}}break;case dup_x2:{Type value1=state.pop1();if (state.stack[state.stacksize - 1] != null) {Type value2=state.pop1();Type value3=state.pop1();state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value2=state.pop2();state.push(value1);state.push(value2);state.push(value1);}}break;case fcmpl:case fcmpg:state.pop(2);state.push(syms.intType);break;case dcmpl:case dcmpg:state.pop(4);state.push(syms.intType);break;case swap:{Type value1=state.pop1();Type value2=state.pop1();state.push(value1);state.push(value2);break;}case dadd:case dsub:case dmul:case ddiv:case dmod:state.pop(2);break;case ret:markDead();break;case wide:return;case monitorenter:case monitorexit:state.pop(1);break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  @Override public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesMixedCaseQuotedIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return false;  }  return true;}  }
class C{  private CSteppingHelper(){}  }
class C{  public SMIDAS(double eta,int epochs,double lambda,Loss loss){  this(eta,epochs,lambda,loss,true);}  }
class C{  private boolean verifyDomainRangeUpperBoundInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    double domainUpperBound;    if (inputString.startsWith("-")) {      domainUpperBound=Double.parseDouble(inputString.substring(1));      domainUpperBound=-domainUpperBound;    } else {      domainUpperBound=Double.parseDouble(inputString);    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  @Override public int hashCode(){  return Long.hashCode(this.getAddress());}  }
class C{  public synchronized boolean isSnapshotted(String indexDirPath,long genNumber){  return !nameToDetailsMapping.isEmpty() && nameToDetailsMapping.values().stream().anyMatch(null);}  }
class C{  @Override public void load(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {  List<byte[]> dictionaryChunk=load(columnIdentifier,dictionaryChunkStartOffset,dictionaryChunkEndOffset);  if (loadSortIndex) {    readSortIndexFile(dictionaryInfo,columnIdentifier);  }  dictionaryInfo.addDictionaryChunk(dictionaryChunk);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  public AuthRequest authenticate(DiscoveryInformation discovered,String returnToUrl,String realm) throws MessageException, ConsumerException {  if (discovered == null)   throw new ConsumerException("Authentication cannot continue: " + "no discovery information provided.");  Association assoc=_associations.load(discovered.getOPEndpoint().toString());  if (assoc == null) {    associate(discovered,_maxAssocAttempts);    assoc=_associations.load(discovered.getOPEndpoint().toString());  }  String handle=assoc != null ? assoc.getHandle() : Association.FAILED_ASSOC_HANDLE;  String claimedId, delegate;  if (discovered.hasClaimedIdentifier()) {    claimedId=discovered.getClaimedIdentifier().getIdentifier();    delegate=discovered.hasDelegateIdentifier() ? discovered.getDelegateIdentifier() : claimedId;  } else {    claimedId=AuthRequest.SELECT_ID;    delegate=AuthRequest.SELECT_ID;  }  if (!_allowStateless && Association.FAILED_ASSOC_HANDLE.equals(handle))   throw new ConsumerException("Authentication cannot be performed: " + "no association available and stateless mode is disabled");  _log.info("Creating authentication request for" + " OP-endpoint: " + discovered.getOPEndpoint() + " claimedID: "+ claimedId+ " OP-specific ID: "+ delegate);  if (!discovered.isVersion2())   returnToUrl=insertConsumerNonce(discovered.getOPEndpoint().toString(),returnToUrl);  AuthRequest authReq=AuthRequest.createAuthRequest(claimedId,delegate,!discovered.isVersion2(),returnToUrl,handle,realm,_realmVerifier);  authReq.setOPEndpoint(discovered.getOPEndpoint());  if (!AuthRequest.SELECT_ID.equals(claimedId))   authReq.setImmediate(_immediateAuth);  return authReq;}  }
class C{  public void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener listener){  sharedPreferences.registerOnSharedPreferenceChangeListener(listener);}  }
class C{  public static void writeAll(ExtDataInput reader,ExtDataOutput out) throws IOException {  out.writeCheckChunkTypeInt(reader,CHUNK_STRINGPOOL_TYPE,CHUNK_NULL_TYPE);  int chunkSize=reader.readInt();  out.writeInt(chunkSize);  out.writeBytes(reader,chunkSize - 8);}  }
class C{  public TechnicalServiceOperationException(String message){  super(message);}  }
class C{  public Quarter(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.attributeDecl(eName,aName,type,valueDefault,value);}  }
class C{  public NewOdorWorldAction(Workspace workspace){  super("Odor World",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("SwissIcon.png"));}  }
class C{  public void write(Object object) throws IOException {  if (object instanceof Node) {    write((Node)object);  } else   if (object instanceof String) {    write((String)object);  } else   if (object instanceof List) {    List<?> list=(List<?>)object;    for (    Object aList : list) {      write(aList);    }  } else   if (object != null) {    throw new IOException("Invalid object: " + object);  }}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  public boolean hasTime(){  return super.hasElement(When.KEY);}  }
class C{  protected ComboBoxEditor createEditor(){  return new BasicComboBoxEditor.UIResource();}  }
class C{  public HttpURLConnection open(URL url){  return open(url,null);}  }
class C{  public ChannelMapEvent(ChannelMap channelMap,String previousName){  this(channelMap,Event.RENAME);  mPreviousChannelMapName=previousName;}  }
class C{  private void parseSecondaryVowel(){  if (!validViSyll)   return;  char curChar, nextChar;  if (iCurPos > strSyllable.length() - 1) {    validViSyll=false;    return;  }  curChar=strSyllable.charAt(iCurPos);  if (iCurPos == strSyllable.length() - 1)   nextChar='$'; else   nextChar=strSyllable.charAt(iCurPos + 1);  TONE tone=TONE.NO_TONE;  int idx1=vnVowels.indexOf(curChar);  int idx2=vnVowels.indexOf(nextChar);  if (idx1 == -1)   return;  tone=TONE.getTone(idx1 % 6);  curChar=vnVowels.charAt((idx1 / 6) * 6);  if (idx2 == -1) {    strSecondaryVowel=ZERO;    return;  }  nextChar=vnVowels.charAt((idx2 / 6) * 6);  if (tone.getValue() == TONE.NO_TONE.getValue())   tone=TONE.getTone(idx2 % 6);  if (curChar == 'o') {    if (nextChar == 'a' || nextChar == 'e') {      strSecondaryVowel+=curChar;      iCurPos++;    } else     strSecondaryVowel=ZERO;    return;  } else   if (curChar == 'u') {    if (nextChar != 'i' && nextChar != '$') {      strSecondaryVowel+=curChar;      iCurPos++;    } else     strSecondaryVowel=ZERO;    return;  }}  }
class C{  public ArgumentProcessor(final String progName){  programName=progName;}  }
class C{  private synchronized void kickstartHandshake() throws IOException {switch (connectionState) {case cs_START:    if (!serverModeSet) {      throw new IllegalStateException("Client/Server mode not yet set.");    }  initHandshaker();break;case cs_HANDSHAKE:break;case cs_DATA:if (!secureRenegotiation && !Handshaker.allowUnsafeRenegotiation) {throw new SSLHandshakeException("Insecure renegotiation is not allowed");}if (!secureRenegotiation) {if (debug != null && Debug.isOn("handshake")) {System.out.println("Warning: Using insecure renegotiation");}}initHandshaker();break;case cs_RENEGOTIATE:return;default :throw new SSLException("SSLEngine is closing/closed");}if (!handshaker.activated()) {if (connectionState == cs_RENEGOTIATE) {handshaker.activate(protocolVersion);} else {handshaker.activate(null);}if (handshaker instanceof ClientHandshaker) {handshaker.kickstart();} else {if (connectionState == cs_HANDSHAKE) {} else {handshaker.kickstart();handshaker.handshakeHash.reset();}}}}  }
class C{  public boolean isHeading(){  Object oo=get_Value(COLUMNNAME_IsHeading);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void testTranslationResult(String text,TranslationResult translationResult){  assertNotNull(translationResult);  assertEquals(translationResult.getWordCount().intValue(),text.split(" ").length);  assertNotNull(translationResult.getTranslations());  assertNotNull(translationResult.getTranslations().get(0).getTranslation());}  }
class C{  void addArg(@NonNull String format,@Nullable Object arg,boolean addSeparatorBefore){  if (addSeparatorBefore) {    builder.append(", ");  }  builder.append(format);  if (arg != null) {    args.add(arg);  }}  }
class C{  @Override public String resolve(String host){  Seed seed;  int p;  String subdom=null;  if (host.endsWith(".yacyh")) {    p=host.indexOf('.');    if ((p > 0) && (p != (host.length() - 6))) {      subdom=host.substring(0,p);      host=host.substring(p + 1);    }    String hash=host.substring(0,host.length() - 6);    if (hash.length() > Word.commonHashLength) {      hash=Seed.hexHash2b64Hash(hash);    }    seed=getConnected(hash);    if (seed == null) {      if (this.mySeed == null)       initMySeed();      if (hash.equals(this.mySeed.hash))       seed=this.mySeed; else       return null;    }    return seed.getPublicAddress(seed.getIP()) + ((subdom == null) ? "" : ("/" + subdom));  } else   if (host.endsWith(".yacy")) {    p=host.indexOf('.');    if ((p > 0) && (p != (host.length() - 5))) {      subdom=host.substring(0,p);      host=host.substring(p + 1);    }    final String domain=host.substring(0,host.length() - 5).toLowerCase();    seed=lookupByName(domain);    if (seed == null)     return null;    if (this.mySeed == null)     initMySeed();    if (seed == this.mySeed && !(seed.isOnline())) {      return Switchboard.getSwitchboard().myPublicIP() + ":" + Switchboard.getSwitchboard().getLocalPort()+ ((subdom == null) ? "" : ("/" + subdom));    }    return seed.getPublicAddress(seed.getIP()) + ((subdom == null) ? "" : ("/" + subdom));  } else {    return null;  }}  }
class C{  public static boolean write(File file,Object o) throws Exception {  return write(new FileOutputStream(file),o);}  }
class C{  public CSaveFieldBackground(){  if (m_texture == null) {    try {      final BufferedImage backgroundImage=ImageIO.read(CMain.class.getResource("data/unsaved_bg.png"));      final Double rect=new Rectangle2D.Double(0,0,backgroundImage.getWidth(),backgroundImage.getHeight());      m_texture=new TexturePaint(backgroundImage,rect);    } catch (    final IOException e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public static String toCamelCase(String s){  if (s == null) {    return null;  }  s=s.toLowerCase();  StringBuilder sb=new StringBuilder(s.length());  boolean upperCase=false;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == GlobalConstants.UNDERLINE) {      upperCase=true;    } else     if (upperCase) {      sb.append(Character.toUpperCase(c));      upperCase=false;    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static boolean updateTradeOrder(TradeOrder clientOrder,OrderState clientOrderState,TradeOrder order) throws ParseException {  boolean changed=false;  if (CoreUtils.nullSafeComparator(order.getOrderKey(),clientOrder.getOrderKey()) == 0) {    if (CoreUtils.nullSafeComparator(order.getStatus(),clientOrderState.m_status.toUpperCase()) != 0) {      order.setStatus(clientOrderState.m_status.toUpperCase());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getWarningMessage(),clientOrderState.m_warningText) != 0) {      order.setWarningMessage(clientOrderState.m_warningText);      changed=true;    }    Money comms=new Money(clientOrderState.m_commission);    if (CoreUtils.nullSafeComparator(comms,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getCommission(),comms.getBigDecimalValue()) != 0) {      order.setCommission(comms.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getClientId(),clientOrder.getClientId()) != 0) {      order.setClientId(clientOrder.getClientId());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getAction(),clientOrder.getAction()) != 0) {      order.setAction(clientOrder.getAction());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getQuantity(),clientOrder.getQuantity()) != 0) {      order.setQuantity(clientOrder.getQuantity());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOrderType(),clientOrder.getOrderType()) != 0) {      order.setOrderType(clientOrder.getOrderType());      changed=true;    }    if (CoreUtils.nullSafeComparator(new Money(clientOrder.getLimitPrice()),new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getLimitPrice(),clientOrder.getLimitPrice()) != 0) {      order.setLimitPrice(clientOrder.getLimitPrice());      changed=true;    }    if (CoreUtils.nullSafeComparator(new Money(clientOrder.getAuxPrice()),new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(order.getAuxPrice(),clientOrder.getAuxPrice()) != 0) {      order.setAuxPrice(clientOrder.getAuxPrice());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTimeInForce(),clientOrder.getTimeInForce()) != 0) {      order.setTimeInForce(clientOrder.getTimeInForce());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOcaGroupName(),clientOrder.getOcaGroupName()) != 0) {      order.setOcaGroupName(clientOrder.getOcaGroupName());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOcaType(),clientOrder.getOcaType()) != 0) {      order.setOcaType(clientOrder.getOcaType());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getOrderReference(),clientOrder.getOrderReference()) != 0) {      order.setOrderReference(clientOrder.getOrderReference());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getPermId(),clientOrder.getPermId()) != 0) {      order.setPermId(clientOrder.getPermId());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getParentId(),clientOrder.getParentId()) != 0) {      order.setParentId(clientOrder.getParentId());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTransmit(),clientOrder.getTransmit()) != 0) {      order.setTransmit(clientOrder.getTransmit());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getDisplayQuantity(),clientOrder.getDisplayQuantity()) != 0) {      order.setDisplayQuantity(clientOrder.getDisplayQuantity());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getTriggerMethod(),clientOrder.getTriggerMethod()) != 0) {      order.setTriggerMethod(clientOrder.getTriggerMethod());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getHidden(),clientOrder.getHidden()) != 0) {      order.setHidden(clientOrder.getHidden());      changed=true;    }    if (null != clientOrder.getGoodAfterTime()) {      if (CoreUtils.nullSafeComparator(order.getGoodAfterTime(),clientOrder.getGoodAfterTime()) != 0) {        order.setGoodAfterTime(clientOrder.getGoodAfterTime());        changed=true;      }    }    if (null != clientOrder.getGoodTillTime()) {      if (CoreUtils.nullSafeComparator(order.getGoodTillTime(),clientOrder.getGoodTillTime()) != 0) {        order.setGoodTillTime(clientOrder.getGoodTillTime());        changed=true;      }    }    if (CoreUtils.nullSafeComparator(order.getOverrideConstraints(),clientOrder.getOverrideConstraints()) != 0) {      order.setOverrideConstraints(clientOrder.getOverrideConstraints());      changed=true;    }    if (CoreUtils.nullSafeComparator(order.getAllOrNothing(),clientOrder.getAllOrNothing()) != 0) {      order.setAllOrNothing(clientOrder.getAllOrNothing());      changed=true;    }    if (changed)     order.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());  }  return changed;}  }
class C{  private void initUserData(POProfile profile){  POUser user=profile.getUser();  Set<SettingType> mappedAttributes=getUserMgmtSvc().getMappedAttributes();  model.setUserKey(new FieldData<Long>(Long.valueOf(user.getKey())));  model.setUserVersion(new FieldData<Integer>(Integer.valueOf(user.getVersion())));  String userTitle=user.getTitle() != null ? user.getTitle().name() : null;  model.setUserTitle(new FieldData<String>(userTitle));  boolean roFirstName=mappedAttributes.contains(SettingType.LDAP_ATTR_FIRST_NAME);  model.setUserFirstName(new FieldData<String>(user.getFirstName(),roFirstName));  boolean roLastName=mappedAttributes.contains(SettingType.LDAP_ATTR_LAST_NAME);  model.setUserLastName(new FieldData<String>(user.getLastName(),roLastName));  boolean roUserMail=mappedAttributes.contains(SettingType.LDAP_ATTR_EMAIL);  model.setUserMail(new FieldData<String>(user.getMail(),roUserMail,true));  model.setUserLocale(new FieldData<String>(user.getLocale(),false));  appBean.checkLocaleValidation(user.getLocale());}  }
class C{  public SparseLongArray(int initialCapacity){  initialCapacity=ArrayUtils.idealLongArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new long[initialCapacity];  mSize=0;}  }
class C{  public void onReset(){}  }
class C{  public NumberConverter(final boolean allowDecimals){  super();  this.allowDecimals=allowDecimals;}  }
class C{  private static String[] toRealPath(Config config,String dotPath) throws ExpressionException {  dotPath=dotPath.trim();  while (dotPath.indexOf('.') == 0) {    dotPath=dotPath.substring(1);  }  int len=-1;  while ((len=dotPath.length()) > 0 && dotPath.lastIndexOf('.') == len - 1) {    dotPath=dotPath.substring(0,len - 2);  }  return CustomTagUtil.getFileNames(config,dotPath.replace('.','/'));}  }
class C{  private static void rangeCheck(int arrayLen,int fromIndex,int toIndex){  if (fromIndex > toIndex) {    throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");  }  if (fromIndex < 0)   throw new ArrayIndexOutOfBoundsException(fromIndex);  if (toIndex > arrayLen)   throw new ArrayIndexOutOfBoundsException(toIndex);}  }
class C{  @Override public void process(KeyValPair<K,? extends Number> tuple){  K key=tuple.getKey();  if (!doprocessKey(key)) {    return;  }  MutableDouble val=sums.get(key);  if (val == null) {    val=new MutableDouble(tuple.getValue().doubleValue());  } else {    val.add(tuple.getValue().doubleValue());  }  sums.put(cloneKey(key),val);  MutableLong count=counts.get(key);  if (count == null) {    count=new MutableLong(0);    counts.put(cloneKey(key),count);  }  count.increment();}  }
class C{  public boolean isGeolocTransferred(){  return mGeolocTransferred;}  }
class C{  public ComponentManager(){  gralComponents=new SequenceCollection();  gralSeeds=Collections.unmodifiableSet(Collections.<Sequence>emptySet());}  }
class C{  @Override public void export(OutputStream outputStream) throws Exception {  writeOsmChange(outputStream,null);}  }
class C{  public WrapToken_v2(Krb5Context context,byte[] tokenBytes,int tokenOffset,int tokenLen,MessageProp prop) throws GSSException {  super(Krb5Token.WRAP_ID_v2,context,tokenBytes,tokenOffset,tokenLen,prop);  this.privacy=prop.getPrivacy();}  }
class C{  public ImageIcon(byte[] imageData){  this.image=Toolkit.getDefaultToolkit().createImage(imageData);  if (image == null) {    return;  }  Object o=image.getProperty("comment",imageObserver);  if (o instanceof String) {    description=(String)o;  }  loadImage(image);}  }
class C{  public Matrix4x3f rotateZYX(Vector3f angles){  return rotateZYX(angles.z,angles.y,angles.x);}  }
class C{  public void registerDeviceService(Class<? extends DeviceService> deviceClass,Class<? extends DiscoveryProvider> discoveryClass){  if (!DeviceService.class.isAssignableFrom(deviceClass))   return;  if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass))   return;  try {    DiscoveryProvider discoveryProvider=null;    for (    DiscoveryProvider dp : discoveryProviders) {      if (dp.getClass().isAssignableFrom(discoveryClass)) {        discoveryProvider=dp;        break;      }    }    if (discoveryProvider == null) {      Constructor<? extends DiscoveryProvider> myConstructor=discoveryClass.getConstructor(Context.class);      Object myObj=myConstructor.newInstance(context);      discoveryProvider=(DiscoveryProvider)myObj;      discoveryProvider.addListener(this);      discoveryProviders.add(discoveryProvider);    }    Method m=deviceClass.getMethod("discoveryFilter");    Object result=m.invoke(null);    DiscoveryFilter discoveryFilter=(DiscoveryFilter)result;    String serviceId=discoveryFilter.getServiceId();    deviceClasses.put(serviceId,deviceClass);    discoveryProvider.addDeviceFilter(discoveryFilter);    if (mSearching) {      discoveryProvider.restart();    }  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  RuntimeException e) {    e.printStackTrace();  }}  }
class C{  public SubVector(int startPosition,int length,Vec vec){  if (startPosition < 0 || startPosition >= vec.length())   throw new IndexOutOfBoundsException("Start position out of bounds for input vector"); else   if (length + startPosition > vec.length())   throw new IndexOutOfBoundsException("Length too long for start position for the given vector");  this.startPosition=startPosition;  this.length=length;  this.vec=vec;}  }
class C{  public static void main(String[] args){  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String userName=parser.getValue("username","user","u");  String userPassword=parser.getValue("password","pwd","p");  boolean help=parser.containsKey("help","h");  if (help || (userName == null)) {    usage();    System.exit(1);  }  AnalyticsService myService=new AnalyticsService("exampleCo-exampleApp-1");  try {    run(myService,userName,userPassword);  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  @Override public String generateToolTipFragment(String toolTipText){  return " onMouseOver=\"return stm(['" + ImageMapUtilities.javascriptEscape(this.title) + "','"+ ImageMapUtilities.javascriptEscape(toolTipText)+ "'],Style["+ this.style+ "]);\""+ " onMouseOut=\"return htm();\"";}  }
class C{  public Primitive(Lifeline caller,SequenceDiagram diagram,MessageData data){  super(caller,null,diagram,data);}  }
class C{  private void goToMainActivity(){  if (comingFromOverflow) {    finish();  } else {    startActivity(new Intent(this,MainActivity.class));  }}  }
class C{  protected void loadDataSet(Repository rep,String datasetFile) throws RDFParseException, RepositoryException, IOException {  logger.debug("loading dataset...");  InputStream dataset=SPARQLServiceEvaluationTest.class.getResourceAsStream(datasetFile);  if (dataset == null)   throw new IllegalArgumentException("Datasetfile " + datasetFile + " not found.");  RepositoryConnection con=rep.getConnection();  try {    con.clear();    con.add(dataset,"",Rio.getParserFormatForFileName(datasetFile).orElseThrow(Rio.unsupportedFormat(datasetFile)));  }  finally {    dataset.close();    con.close();  }  logger.debug("dataset loaded.");}  }
class C{  public static short[] copyOfRange(short[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  short[] copy=new short[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  @Override public void waitFor(Class waitingReducer,Set<Class> reducerNames,WaitCallback callback){  ThreadUtils.ensureNotOnMain();  String waitingReducerName=waitingReducer.getName();  if (!isDispatching()) {    throw new IllegalStateException("Cannot wait unless an action is being dispatched");  }  if (reducerNames.contains(waitingReducer)) {    throw new IllegalArgumentException("A reducer cannot wait on itself");  }  Reducer dispatch=mReducers.get(waitingReducerName);  if (dispatch.getWaitingOnList().size() > 0) {    throw new IllegalStateException(waitingReducerName + " is already waiting on reducers");  }  for (  Class reducerName1 : reducerNames) {    String reducerName=reducerName1.getName();    if (!mReducers.containsKey(reducerName)) {      throw new IllegalArgumentException("Cannot wait for non-existent reducer " + reducerName);    }    Reducer reducerDispatch=mReducers.get(reducerName);    if (reducerDispatch.getWaitingOnList().contains(waitingReducerName)) {      throw new IllegalStateException("Circular wait detected between " + waitingReducerName + " and "+ reducerName);    }  }  dispatch.reset();  dispatch.setWaitCallback(callback);  dispatch.addToWaitingOnList(reducerNames);}  }
class C{  public StringBand append(Object obj){  return append(String.valueOf(obj));}  }
class C{  public void onScanResult(int callbackType,ScanResult result){}  }
class C{  public boolean isChecked(){  return getBaseKind() == CHECKED_NULL || getBaseKind() == CHECKED_NN;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public B put(TypeToken<? extends B> key,B value){  throw new UnsupportedOperationException();}  }
class C{  public void testEqualsNull(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertFalse(aNumber.equals(null));}  }
class C{  protected Object readResolve() throws InvalidObjectException {  if (this.getClass() != MessageFormat.Field.class) {    throw new InvalidObjectException("subclass didn't correctly implement readResolve");  }  return ARGUMENT;}  }
class C{  static void clear(Iterator<?> iterator){  Preconditions.checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  private boolean annotationPropertySet(Annotation annotation,String attributeName){  Object defaultValue=AnnotationUtils.getDefaultValue(annotation,attributeName);  Object currentValue=AnnotationUtils.getValue(annotation,attributeName);  return !currentValue.equals(defaultValue);}  }
class C{  public void tagStartSound(int soundId,SoundInfo info) throws IOException {  if (tags != null) {    tags.tagStartSound(soundId,info);  }}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  private int scale(int what,@IntRange(from=0) double factor){  return (int)(Math.floor((double)what * factor));}  }
class C{  public void broadcast(Metadata metadata){  if (mMetadataBroadcaster != null) {    mMetadataBroadcaster.broadcast(metadata);  }}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public static boolean deleteFile(File file){  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  if (file.isDirectory()) {    File[] childFile=file.listFiles();    if (childFile == null || childFile.length == 0) {      return file.delete();    }    for (    File f : childFile) {      deleteFile(f);    }  }  return file.delete();}  }
class C{  @CheckForNull public GitHubBranchCause check(GitHubBranchTrigger gitHubBranchTrigger,GHBranch remoteBranch,@CheckForNull GitHubBranch localBranch,GitHubBranchRepository localRepo,TaskListener listener) throws IOException {  return null;}  }
class C{  private void readParameterAnnotations(int v,final String desc,final char[] buf,final boolean visible,final MethodVisitor mv){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,buf),visible);      v=readAnnotationValues(v + 2,buf,true,av);    }  }}  }
class C{  public static float calculateMaxTurnsAtMax(Aero aero){  int fuelPoints=aero.getFuel();  float fuelPerTurn;  if (aero.getEntityType() == Entity.ETYPE_CONV_FIGHTER) {    fuelPerTurn=aero.getWalkMP() * 0.5f;    if (aero.hasEngine()) {      if (aero.getEngine().isFusion()) {        fuelPerTurn+=(aero.getRunMP() - aero.getWalkMP()) * 2;      } else {        fuelPerTurn+=(aero.getRunMP() - aero.getWalkMP());      }    }  } else {    fuelPerTurn=aero.getWalkMP() + (aero.getRunMP() - aero.getWalkMP()) * 2;  }  return fuelPoints / fuelPerTurn;}  }
class C{  public static long round(double value){  if (USE_JDK_MATH) {    return Math.round(value);  }  double roundedValue=FastMath.floor(value + 0.5);  if (Math.abs(roundedValue) <= (double)Integer.MAX_VALUE) {    return (long)(int)roundedValue;  } else {    return (long)roundedValue;  }}  }
class C{  @SuppressWarnings("rawtypes") private void addMetrics(AggregationBuilder parentAgg,Heading heading,boolean addCount){  for (  Column metric : heading.columns()) {    if (metric.getOp() == Operation.AVG)     parentAgg.subAggregation(AggregationBuilders.avg(metric.getAggName()).field(metric.getColumn())); else     if (addCount && metric.getOp() == Operation.COUNT)     parentAgg.subAggregation(AggregationBuilders.count(metric.getAggName())); else     if (metric.getOp() == Operation.MAX)     parentAgg.subAggregation(AggregationBuilders.max(metric.getAggName()).field(metric.getColumn())); else     if (metric.getOp() == Operation.MIN)     parentAgg.subAggregation(AggregationBuilders.min(metric.getAggName()).field(metric.getColumn())); else     if (metric.getOp() == Operation.SUM)     parentAgg.subAggregation(AggregationBuilders.sum(metric.getAggName()).field(metric.getColumn()));  }}  }
class C{  public ByteInterleavedRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public boolean shouldPrintVersion(){  return cmd != null && cmd.hasOption(Messages.VERSION_SHORT_OPT);}  }
class C{  public Shape triangle_left(float x,float y,float height){  m_path.reset();  m_path.moveTo(x + height,y);  m_path.lineTo(x + height,y + height);  m_path.lineTo(x,y + height / 2);  m_path.closePath();  return m_path;}  }
class C{  protected <T>void registerService(Class<T> clazz,T instance){  applicationContainer.registerComponentInstance(clazz.getName(),instance);}  }
class C{  public void dispatch(EventType type){  dispatch(new AppEvent(type));}  }
class C{  public static KeyczarReader readJsonFromPath(String path){  return new KeyczarJsonReader(readFile(path));}  }
class C{  private boolean isPasteAvailable(){  try {    Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();    return clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor);  } catch (  UnsupportedOperationException he) {    return false;  }catch (  IllegalStateException ise) {    return false;  }}  }
class C{  public void updateTimestamp(int columnIndex,java.sql.Timestamp x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateTimestamp(columnIndex,x);}  }
class C{  public void addRoll(MMRandom rng){  int result=rng.randomInt(this.faces) + this.min;  all.addElement(new Integer(result));  this.total+=result;  if (keep != -1 && all.size() >= keep) {    this.total=0;    Collections.sort(all,Collections.reverseOrder());    for (int i=0; i < keep; i++) {      this.total+=all.get(i);    }  }}  }
class C{  public Cipher(final KeyPair senderKeyPair,final KeyPair recipientKeyPair,final CryptoEngine engine){  this(engine.createBlockCipher(senderKeyPair,recipientKeyPair));}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  private boolean equals(Object o,Object p){  return (o == p || ((o != null) && o.equals(p)));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeparentnode.class,args);}  }
class C{  public NotificationChain basicSetElse(EObject newElse,NotificationChain msgs){  EObject oldElse=else_;  else_=newElse;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.SIF__ELSE,oldElse,newElse);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void linkCommentToNode(Node n){  StringBuilder sb=new StringBuilder();  String sep="\n";  for (  Comment c : group) {    String comment=filterCommentContent(c.type,c.value);    if (!comment.isEmpty()) {      sb.append(sep).append(comment);      sep="\n";    }  }  if (sb.toString().length() > 0) {    nodeComments.putComment(n,sb.toString());  }  group.clear();  forceAddCommentToGroup();}  }
class C{  private void removeAllUnusedTokens(){synchronized (this.tokens) {    if (this.destroyed) {      getStats().incFreeResourcesFailed();      return;    }    Set unusedTokens=Collections.EMPTY_SET;    for (Iterator iter=this.tokens.values().iterator(); iter.hasNext(); ) {      DLockToken token=(DLockToken)iter.next();synchronized (token) {        if (!token.isBeingUsed()) {          if (logger.isTraceEnabled(LogMarker.DLS)) {            logger.trace(LogMarker.DLS,"Freeing {} in {}",token,this);          }          if (unusedTokens == Collections.EMPTY_SET) {            unusedTokens=new HashSet();          }          unusedTokens.add(token);        } else {          getStats().incFreeResourcesFailed();        }      }    }    for (Iterator iter=unusedTokens.iterator(); iter.hasNext(); ) {      DLockToken token=(DLockToken)iter.next();synchronized (token) {        int tokensSizeBefore=this.tokens.size();        Object obj=removeTokenFromMap(token.getName());        Assert.assertTrue(obj != null);        int tokensSizeAfter=this.tokens.size();        Assert.assertTrue(tokensSizeBefore - tokensSizeAfter == 1);        token.destroy();        getStats().incTokens(-1);        getStats().incFreeResourcesCompleted();      }    }  }}  }
class C{  public static final BigInteger decodeBigIntegerFromText(Text text) throws Base64DecodingException {  return new BigInteger(1,Base64.decode(text.getData()));}  }
class C{  public CSVParserBuilder withStrictQuotes(final boolean strictQuotes){  this.strictQuotes=strictQuotes;  return this;}  }
class C{  public int length(){  return length;}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (compileFlags != null) {    appendOptionArgument(cmd,"--compile",compileFlags);  }  if (version != null) {    appendOptionArgument(cmd,"--version",version);  }  if (tap != null) {    if (tap.isEmpty()) {      appendOption(cmd,"--tap");    } else {      appendOption(cmd,"--tap=" + tap);    }  }  if (report) {    appendOption(cmd,"--report");  }  if (autoExportMavenDependencies) {    appendOption(cmd,"--auto-export-maven-dependencies");  }  if (flatClasspath) {    appendOption(cmd,"--flat-classpath");  }  if (linkWithCurrentDistribution) {    appendOption(cmd,"--link-with-current-distribution");  }  for (  Test test : tests) {    appendOptionArgument(cmd,"--test",test.getTest());  }  for (  Module module : moduleSet.getModules()) {    log("Adding module: " + module,Project.MSG_VERBOSE);    cmd.createArgument().setValue(module.toSpec());  }}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static boolean substractTradingFee(Player player,int price){  BigDecimal fee=calculateFee(player,price);  return player.drop("money",fee.intValue());}  }
class C{  public void write(OutputNode node,Object item) throws Exception {  Class expect=type.getType();  String name=entry.getValue();  if (!entry.isInline()) {    if (name == null) {      name=context.getName(expect);    }    writeElement(node,item,name);  } else {    writeAttribute(node,item,name);  }}  }
class C{  private CaseStruct determineViewFromActionOutcome(FacesContext ctx,Set<NavigationCase> caseSet,String fromAction,String outcome,String toFlowDocumentId){  CaseStruct result=new CaseStruct();  boolean match=false;  for (  NavigationCase cnc : caseSet) {    String cncFromAction=cnc.getFromAction();    String cncFromOutcome=cnc.getFromOutcome();    boolean cncHasCondition=cnc.hasCondition();    String cncToViewId=cnc.getToViewId(ctx);    if ((cncFromAction != null && cncFromAction.equals(fromAction)) && (cncFromOutcome != null && cncFromOutcome.equals(outcome))) {      match=true;    } else     if ((cncFromAction == null) && (cncFromOutcome != null && cncFromOutcome.equals(outcome))) {      match=true;    } else     if ((cncFromAction != null && cncFromAction.equals(fromAction)) && (cncFromOutcome == null) && (outcome != null || cncHasCondition)) {      match=true;    } else     if ((cncFromAction == null) && (cncFromOutcome == null) && (outcome != null || cncHasCondition)) {      match=true;    }    if (match) {      result.viewId=cncToViewId;      result.navCase=cnc;      if (cncHasCondition && Boolean.FALSE.equals(cnc.getCondition(ctx))) {        match=false;      } else {        toFlowDocumentId=(null != cnc.getToFlowDocumentId()) ? cnc.getToFlowDocumentId() : toFlowDocumentId;        if (null != toFlowDocumentId) {          FlowHandler fh=ctx.getApplication().getFlowHandler();          if (null != outcome) {            result.isFlowEntryFromExplicitRule=null != fh.getFlow(ctx,toFlowDocumentId,convertToViewIdToFlowOrNodeId(ctx,result));          }        }        return result;      }    }  }  return null;}  }
class C{  public static DiagnosticPosition diagnosticPositionFor(final Symbol sym,final JCTree tree){  JCTree decl=declarationFor(sym,tree);  return ((decl != null) ? decl : tree).pos();}  }
class C{  public static String flagNames(long flags){  return Flags.toString(flags & ExtendedStandardFlags).trim();}  }
class C{  public void transmitAll(JSONObject message){  List<PnPeer> peerList=this.pcClient.getPeers();  for (  PnPeer p : peerList) {    transmit(p.getId(),message);  }}  }
class C{  public static boolean requireOrNewer(Version version,Version required){  int compare=version.compareTo(required);  return compare == 0 || compare == 1;}  }
class C{  public void register(ICalPropertyScribe<? extends ICalProperty> scribe){  for (  ICalVersion version : ICalVersion.values()) {    experimentalPropByName.put(propertyNameKey(scribe,version),scribe);  }  experimentalPropByClass.put(scribe.getPropertyClass(),scribe);  experimentalPropByQName.put(scribe.getQName(),scribe);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  if (entry != null && entry.length > 0) {    DerOutputStream temp=new DerOutputStream();    for (int i=0; i < entry.length; i++)     temp.write(entry[i].asn1Encode());    bytes.write(DerValue.tag_Sequence,temp);    return bytes.toByteArray();  }  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Address maximumObjectRef(Address regionHighAddr){  return JavaHeader.maximumObjectRef(regionHighAddr);}  }
class C{  public void inlineLocalClass(Environment env){  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if ((f.isVariable() || f.isInitializer()) && !f.isStatic()) {      continue;    }    try {      ((SourceMember)f).inline(env);    } catch (    ClassNotFound ee) {      env.error(f.getWhere(),"class.not.found",ee.name,this);    }  }  if (getReferencesFrozen() != null && !inlinedLocalClass) {    inlinedLocalClass=true;    for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {      if (f.isConstructor()) {        ((SourceMember)f).addUplevelArguments();      }    }  }}  }
class C{  @Override public int read(char buf[],int offset,int count) throws IOException {  if (0 <= offset && offset <= buf.length && 0 <= count && count <= buf.length - offset) {synchronized (lock) {      if (isOpen()) {        if (pos == this.count) {          return -1;        }        int end=pos + count > this.count ? this.count : pos + count;        str.getChars(pos,end,buf,offset);        int read=end - pos;        pos=end;        return read;      }      throw new IOException("StringReader is closed");    }  }  throw new ArrayIndexOutOfBoundsException();}  }
class C{  public JPAModelSetupPanelVisual(Project project,WizardDescriptor wizard){  this.project=project;  this.wizard=wizard;  initComponents();  packageComboBoxEditor=((JTextComponent)packageComboBox.getEditor().getEditorComponent());  Document packageComboBoxDocument=packageComboBoxEditor.getDocument();  packageComboBoxDocument.addDocumentListener(this);}  }
class C{  public HeaderGroup copy(){  HeaderGroup clone=new HeaderGroup();  clone.headers.addAll(this.headers);  return clone;}  }
class C{  public Props changeDispatcher(String dispatcher){  return new Props(dispatcher,creator,supervisor);}  }
class C{  public List expressions(){  return this.expressions;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public static void main(String[] args){  File f=new File("no-file.cfg");  ToolIO.out.println("no-file.canRead() = " + f.canRead());  ToolIO.out.println("no-file.canWrite() = " + f.canWrite());  ToolIO.out.println("no-file.exists() = " + f.exists());  f=new File("read-only.cfg");  ToolIO.out.println("read-only.canRead() = " + f.canRead());  ToolIO.out.println("read-only.canWrite() = " + f.canWrite());  ToolIO.out.println("read-only.exists() = " + f.exists());  f=new File("Bakery.cfg");  ToolIO.out.println("Bakery.canRead() = " + f.canRead());  ToolIO.out.println("Bakery.canWrite() = " + f.canWrite());  ToolIO.out.println("Bakery.exists() = " + f.exists());}  }
class C{  private static boolean isSame(Object obj1,Object obj2){  if (obj1 == null) {    return (obj2 == null);  } else   if (obj2 == null) {    return (obj1 == null);  }  return obj1.equals(obj2);}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public final boolean isInSphere(IMovingAgent agent,boolean useSphere){  return (distanceToSphere(agent,true) <= this.getSphereRadius());}  }
class C{  protected boolean hasJavaFilesInFolder(final FolderEntry folderEntry){  try {    return folderEntry.getChildFolders().stream().anyMatch(null) || folderEntry.getChildFiles().stream().anyMatch(null);  } catch (  ServerException e) {    throw new IllegalStateException(String.format("Unable to get files from ''%s''",folderEntry.getName()),e);  }}  }
class C{  public CipherTextIvMac(byte[] c,byte[] i,byte[] h){  cipherText=new byte[c.length];  System.arraycopy(c,0,cipherText,0,c.length);  iv=new byte[i.length];  System.arraycopy(i,0,iv,0,i.length);  mac=new byte[h.length];  System.arraycopy(h,0,mac,0,h.length);}  }
class C{  private static KeyStore keyStoreFromResource(String path,String password){  KeyStore keyStore;  try (InputStream stream=Resources.getResource(path).openStream()){    keyStore=KeyStore.getInstance("PKCS12");    keyStore.load(stream,password.toCharArray());  } catch (  IOException|NoSuchAlgorithmException|CertificateException|KeyStoreException e) {    throw new AssertionError(e);  }  return keyStore;}  }
class C{  public void init(){  loadLocalOvfProps();  addIpreconfigListener();  _coordinator.getZkConnection().curator().getConnectionStateListenable().addListener(_connectionListener);}  }
class C{  public void testComplexFragmentCleanup() throws Exception {  File logDir=prepareLogDir("testComplexFragmentCleanup");  DiskLog log=openLog(logDir,false,3000);  long seqno=-1;  for (int i=0; i < 20; i++) {    LogConnection conn=log.connect(false);    seqno++;    for (int j=0; j <= i; j++) {      THLEvent e=createTHLEvent(seqno,(short)j,(j == i),"test");      conn.store(e,(j == i));    }    for (int j=0; j <= i; j++) {      THLEvent e=createTHLEvent(seqno + 1,(short)j,false,"test");      conn.store(e,true);    }    log.release();    log=openLog(logDir,false);    log.validate();    conn=log.connect(true);    assertTrue("Seek last full xact",conn.seek(seqno,(short)i));    THLEvent eLastFrag=conn.next();    assertNotNull("Last full xact frag should not be null",eLastFrag);    assertTrue("Max seqno in log should be same as last unterminated Xact",log.getMaxSeqno() == eLastFrag.getSeqno());    log.release();    log=openLog(logDir,false);  }  log.release();}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  private int toEven(float value){  int i=(int)(value + .5f);  if (i % 2 == 1) {    return i - 1;  }  return i;}  }
class C{  protected void dispatchOnMonthChanged(final CalendarDay day){  OnMonthChangedListener l=monthListener;  if (l != null) {    l.onMonthChanged(MaterialCalendarView.this,day);  }}  }
class C{  public static <N extends Parameter<?>>String parameterNamesAndValuesToString(List<N> parameters){  StringBuilder buffer=new StringBuilder();  buffer.append('[');  for (int i=0; i < parameters.size(); i++) {    buffer.append(parameters.get(i).getName());    buffer.append(':');    buffer.append(parameters.get(i).getValueAsString());    if (i != parameters.size() - 1) {      buffer.append(", ");    }  }  buffer.append(']');  return buffer.toString();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static boolean launchSigninPromoIfNeeded(final Activity activity){  ChromePreferenceManager preferenceManager=ChromePreferenceManager.getInstance(activity);  if (MultiWindowUtils.getInstance().isMultiWindow(activity))   return false;  if (!preferenceManager.getShowSigninPromo())   return false;  preferenceManager.setShowSigninPromo(false);  String lastSyncName=PrefServiceBridge.getInstance().getSyncLastAccountName();  if (SigninManager.getAndroidSigninPromoExperimentGroup() < 0 || ChromeSigninController.get(activity).isSignedIn() || !TextUtils.isEmpty(lastSyncName)) {    return false;  }  SigninPromoScreen promoScreen=new SigninPromoScreen(activity);  promoScreen.show();  preferenceManager.setSigninPromoShown();  return true;}  }
class C{  public LatLon parseLatLon(String latLonString){  if (latLonString == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  throw new UnsupportedOperationException();}  }
class C{  public void assertReflectionSettersRejectNull(Message.Builder builder) throws Exception {  try {    builder.setField(f("optional_string"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_bytes"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_enum"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_message"),(TestAllTypes.NestedMessage)null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_message"),(TestAllTypes.NestedMessage.Builder)null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_string"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_bytes"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_nested_enum"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_nested_message"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public TextArea(int rows,int columns){  this("",defaultMaxSize,rows,columns,ANY);}  }
class C{  public int declareFieldNumber(MemberDefinition field){  return declare(null,new LocalMember(field));}  }
class C{  @Override public void nodeChanged(){  log.info("Repository info changed. Waking up the upgrade manager...");  wakeup();}  }
class C{  public static void gcd(int a[],int b[],int gcd[]){  if (isZero(a)) {    assign(gcd,a);    return;  }  if (isZero(b)) {    assign(gcd,b);    return;  }  a=copy(normalize(a,b.length));  b=copy(normalize(b,a.length));  int rc=compareTo(a,b);  if (rc == 0) {    assign(gcd,a);    return;  }  if (rc < 0) {    int[] t=b;    b=a;    a=t;  }  int[] quot=new int[a.length];  int[] remainder=new int[a.length];  while (!isZero(b)) {    int[] t=copy(b);    divide(a,b,quot,remainder);    assign(b,remainder);    assign(a,t);  }  assign(gcd,a);}  }
class C{  public void onClick(View v){  if (v instanceof Button) {    CharSequence result=((Button)v).getText();    replaceCharacterAndClose(result);  }}  }
class C{  public QuickConnectDialog(QuickConnectPreferencesPanel panel){  this.panel=panel;  setTitle("Quick Connect Propeties");}  }
class C{  public ImmutableSet<String> lookup(Iterable<String> words){  HashSet<String> documents=null;  try (Jedis jedis=pool.getResource()){    jedis.select(TOKEN_DB);    for (    String word : words) {      word=stemmer.stem(word.toLowerCase()).toString();      if (documents == null) {        documents=new HashSet();        documents.addAll(jedis.smembers(word));      } else {        documents.retainAll(jedis.smembers(word));      }    }  }   if (documents == null) {    return ImmutableSet.<String>of();  }  return ImmutableSet.<String>copyOf(documents);}  }
class C{  @Inline public final void push(Address addr){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr.isZero());  checkHeadInsert(1);  uncheckedHeadInsert(addr);}  }
class C{  public void runAndAssert(int startIndex,int count){  runnable.runOnce();  if (count > 0) {    Mockito.verify(publisher).publishMetrics(data.subList(startIndex,startIndex + count));  }  Mockito.verifyNoMoreInteractions(publisher);}  }
class C{  public static boolean isAllRowsEven1s(int[][] m){  int count=0;  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      if (m[i][j] == 1)       count++;    }    if (count % 2 != 0)     return false;  }  return true;}  }
class C{  public int stepToPreviousEvent(){  mFormEntryController.stepToPreviousEvent();  if (indexIsInFieldList() && getEvent() == FormEntryController.EVENT_QUESTION) {    FormEntryCaption[] captions=getCaptionHierarchy();    FormEntryCaption grp=captions[captions.length - 2];    int event=mFormEntryController.jumpToIndex(grp.getIndex());    FormIndex idx=grp.getIndex();    if (!mFormEntryController.getModel().isIndexRelevant(idx)) {      return stepToPreviousEvent();    }    idx=mFormEntryController.getModel().incrementIndex(idx,true);    while (FormIndex.isSubElement(grp.getIndex(),idx)) {      if (mFormEntryController.getModel().isIndexRelevant(idx)) {        return event;      }      idx=mFormEntryController.getModel().incrementIndex(idx,true);    }    return stepToPreviousEvent();  } else   if (indexIsInFieldList() && getEvent() == FormEntryController.EVENT_GROUP) {    FormIndex grpidx=mFormEntryController.getModel().getFormIndex();    int event=mFormEntryController.getModel().getEvent();    if (!mFormEntryController.getModel().isIndexRelevant(grpidx)) {      return stepToPreviousEvent();    }    FormIndex idx=mFormEntryController.getModel().incrementIndex(grpidx,true);    while (FormIndex.isSubElement(grpidx,idx)) {      if (mFormEntryController.getModel().isIndexRelevant(idx)) {        return event;      }      idx=mFormEntryController.getModel().incrementIndex(idx,true);    }    return stepToPreviousEvent();  }  return getEvent();}  }
class C{  public static Point xy2Point(final double x,final double y){  return geoFac.createPoint(new Coordinate(x,y));}  }
class C{  protected void replaceSignalHeadManager(){  if (InstanceManager.getDefault(jmri.SignalHeadManager.class).getClass().getName().equals(AbstractSignalHeadManager.class.getName())) {    return;  }  if (InstanceManager.getNullableDefault(jmri.SignalHeadManager.class) != null) {    InstanceManager.getDefault(jmri.ConfigureManager.class).deregister(InstanceManager.getDefault(jmri.SignalHeadManager.class));  }  AbstractSignalHeadManager pManager=new AbstractSignalHeadManager();  InstanceManager.setSignalHeadManager(pManager);  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerConfig(pManager,jmri.Manager.SIGNALHEADS);  }}  }
class C{  private List<Metric> _getMetrics(HttpServletRequest req,List<String> expressions){  validateAndGetOwner(req,null);  SystemAssert.requireArgument(expressions != null && !expressions.isEmpty(),"Expression list cannot be null or empty");  final MetricService metricService=system.getServiceFactory().getMetricService();  List<Metric> metrics=new ArrayList<Metric>();  for (  String expression : expressions) {    List<Metric> metricsForThisExpression=metricService.getMetrics(expression);    metrics.addAll(metricsForThisExpression);  }  metricService.dispose();  return metrics;}  }
class C{  public static Object newInstance(File file,Class<?> template){  return newInstance(file,template,new File[0]);}  }
class C{  final ByteBuffer[] map(String resourceDescription,FileChannel fc,long offset,long length) throws IOException {  if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)   throw new IllegalArgumentException("RandomAccessFile too big for chunk size: " + resourceDescription);  final long chunkSize=1L << chunkSizePower;  final int nrBuffers=(int)(length >>> chunkSizePower) + 1;  ByteBuffer buffers[]=new ByteBuffer[nrBuffers];  long bufferStart=0L;  for (int bufNr=0; bufNr < nrBuffers; bufNr++) {    int bufSize=(int)((length > (bufferStart + chunkSize)) ? chunkSize : (length - bufferStart));    MappedByteBuffer buffer;    try {      buffer=fc.map(MapMode.READ_ONLY,offset + bufferStart,bufSize);    } catch (    IOException ioe) {      throw convertMapFailedIOException(ioe,resourceDescription,bufSize);    }    if (preload) {      buffer.load();    }    buffers[bufNr]=buffer;    bufferStart+=bufSize;  }  return buffers;}  }
class C{  private int reallocate(int offset,int remove,final int oldGapSize,int newGapSize,final int newGapStart){  final int newLength=fContent.length - newGapSize;  int newArraySize=(int)(newLength * fSizeMultiplier);  newGapSize=newArraySize - newLength;  if (newGapSize < fMinGapSize) {    newGapSize=fMinGapSize;    newArraySize=newLength + newGapSize;  } else   if (newGapSize > fMaxGapSize) {    newGapSize=fMaxGapSize;    newArraySize=newLength + newGapSize;  }  fThreshold=newGapSize * 2;  final char[] newContent=allocate(newArraySize);  final int newGapEnd=newGapStart + newGapSize;  if (offset < fGapStart) {    arrayCopy(0,newContent,0,offset);    int afterRemove=offset + remove;    if (afterRemove < fGapStart) {      final int betweenSize=fGapStart - afterRemove;      arrayCopy(afterRemove,newContent,newGapEnd,betweenSize);      final int restSize=fContent.length - fGapEnd;      arrayCopy(fGapEnd,newContent,newGapEnd + betweenSize,restSize);    } else {      afterRemove+=oldGapSize;      final int restSize=fContent.length - afterRemove;      arrayCopy(afterRemove,newContent,newGapEnd,restSize);    }  } else {    arrayCopy(0,newContent,0,fGapStart);    final int offsetShifted=offset + oldGapSize;    final int betweenSize=offsetShifted - fGapEnd;    arrayCopy(fGapEnd,newContent,fGapStart,betweenSize);    final int afterRemove=offsetShifted + remove;    final int restSize=fContent.length - afterRemove;    arrayCopy(afterRemove,newContent,newGapEnd,restSize);  }  fContent=newContent;  return newGapEnd;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public static <T>T splitEachLine(Path self,String regex,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),regex,closure);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.171 -0400",hash_original_method="A907B53DAF1F2A5BC22AD1D7E2D6EFC3",hash_generated_method="E526EE4DEE5229727EFE1B904B799919") public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public void removeDetail(){  detail=0;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.456 -0500",hash_original_method="E358DED697FF080F831811D5D578FEBC",hash_generated_method="9CAFB07CB8CADF7A1B737CEF0A85C927") public Intent putExtra(String name,boolean value){  mExtras.put(name,value);  return this;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapPanel && someObj instanceof Container) {    getContentPane().add((Container)someObj);    JMenuBar jmb=((MapPanel)someObj).getMapMenuBar();    if (jmb != null) {      Debug.message("basic","OpenMapApplet: Got MenuBar from MapPanel");      getRootPane().setJMenuBar(jmb);    }    invalidate();  }  if (someObj instanceof JMenuBar) {    getRootPane().setJMenuBar((JMenuBar)someObj);    invalidate();  }}  }
class C{  public Settings(String namespace){  this.oldNamespaces=new Stack<String>();  this.secondaryNamespaces=new Stack<String>();  setNameSpace(namespace);}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("FrequentItemsSketch<T>:").append(LS);  sb.append("  Stream Length    : " + streamLength).append(LS);  sb.append("  Max Error Offset : " + offset).append(LS);  sb.append(hashMap.toString());  return sb.toString();}  }
class C{  public SymbolTableEntryInternal steFor_N4ApiNotImplementedError(){  return getSymbolTableEntryInternal("N4ApiNotImplementedError",true);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void main(String[] args){  TestOverridenPrivateMethodsWithPrivateFlag tester=new TestOverridenPrivateMethodsWithPrivateFlag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void decodeFlipped(ByteBuffer buffer,int stride,Format fmt) throws IOException {  if (stride <= 0) {    throw new IllegalArgumentException("stride");  }  int pos=buffer.position();  int posDelta=(height - 1) * stride;  buffer.position(pos + posDelta);  decode(buffer,-stride,fmt);  buffer.position(buffer.position() + posDelta);}  }
class C{  protected void extractVariables(Set<String> excludedVariables,ContinuousVariableAnalysis variableAnalysis) throws IOException {  List<Integer> excludedVarIndices=new LinkedList<>();  List<Node> nodes=new LinkedList<>();  try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    int index=0;    byte currentChar=-1;    byte prevChar=NEW_LINE;    StringBuilder dataBuilder=new StringBuilder();    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delimiter || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString().trim();        dataBuilder.delete(0,dataBuilder.length());        if (value.length() > 0) {          if (excludedVariables.contains(value)) {            excludedVarIndices.add(index);          } else {            nodes.add(new ContinuousVariable(value));          }        } else {          String errMsg=String.format("Missing variable name at column %d.",index + 1);          LOGGER.error(errMsg);          throw new IOException(errMsg);        }        index++;        if (currentChar == NEW_LINE) {          break;        }      } else       if (currentChar != SINGLE_QUOTE && currentChar != DOUBLE_QUOTE) {        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (currentChar > -1 && currentChar != NEW_LINE) {      if (currentChar == delimiter) {        String errMsg=String.format("Missing variable name at column %d.",index + 1);        LOGGER.error(errMsg);        throw new IOException(errMsg);      } else {        String value=dataBuilder.toString().trim();        dataBuilder.delete(0,dataBuilder.length());        if (value.length() > 0) {          if (excludedVariables.contains(value)) {            excludedVarIndices.add(index);          } else {            nodes.add(new ContinuousVariable(value));          }        } else {          String errMsg=String.format("Missing variable name at column %d.",index + 1);          LOGGER.error(errMsg);          throw new IOException(errMsg);        }      }    }  }   if (excludedVarIndices.isEmpty()) {    excludedVarIndices.add(-1);  }  int[] excludedIndices=new int[excludedVarIndices.size()];  int index=0;  for (  Integer excludedIndex : excludedVarIndices) {    excludedIndices[index++]=excludedIndex;  }  variableAnalysis.setExcludedIndices(excludedIndices);  variableAnalysis.setVariables(nodes);}  }
class C{  public List<VariableDeclarationFragment> fragments(){  return this.variableDeclarationFragments;}  }
class C{  private void openFiles(File[] files,boolean isRecent){  for (int i=0; i < files.length; i++) {    dumpFile=files[i].getAbsolutePath();    if (dumpFile != null) {      if (!firstFile) {        setRootNodeLevel(1);        addDumpFile();      } else {        initDumpDisplay(null);        if (isFileOpen()) {          firstFile=false;        }      }    }    if (!isRecent) {      PrefManager.get().addToRecentFiles(files[i].getAbsolutePath());    }  }  if (isFileOpen()) {    this.getRootPane().revalidate();    displayContent(null);  }}  }
class C{  protected Path recreateSrc(){  src=null;  return createSrc();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.980 -0400",hash_original_method="45A0E2A435B55A4376C3E3C34A986F78",hash_generated_method="160A8598D1E8D7F819C939488C64657F") public boolean isPrivateDnsRouteSet(){  return mPrivateDnsRouteSet.get();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  XObject xobj=m_xpath.execute(xctxt,context,nsNode);  if (null != xobj) {    xobj.appendToFsb(buf);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double exponential(double lambda){  double x=-1 / lambda * Math.log(raw());  return x;}  }
class C{  public LogFormat(double base,String baseLabel,String powerLabel,boolean showBase){  ParamChecks.nullNotPermitted(baseLabel,"baseLabel");  ParamChecks.nullNotPermitted(powerLabel,"powerLabel");  this.base=base;  this.baseLog=Math.log(this.base);  this.baseLabel=baseLabel;  this.showBase=showBase;  this.powerLabel=powerLabel;}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[82];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 66; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }      }    }  }  for (int i=0; i < 82; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  private void updateCABCMode(){  if (!mUseCABC) {    return;  }  mHardware.set(CMHardwareManager.FEATURE_ADAPTIVE_BACKLIGHT,!isLowPowerMode() && isCABCEnabled());}  }
class C{  public static void init(Properties p) throws Exception {  ri.init(p);}  }
class C{  public boolean isSecurityPolicyOverrideAllowed(){  return securityPolicyOverrideAllowed;}  }
class C{  private int calculatePastProgressDegree(){  return (250 * currentProgress) / maxProgress;}  }
class C{  @SafeVarargs public static <Type>Validator<Type> disjunctive(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  return DisjunctiveValidator.create(errorMessage,validators);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public String toString(){  return getClass().getSimpleName() + "[" + _source+ "]";}  }
class C{  public void test4_sources_closed() throws InterruptedException {  final ThickAsynchronousIterator<String> itr1=iterator("a","b","c");  final MultiSourceSequentialCloseableIterator<String> itr=new MultiSourceSequentialCloseableIterator<String>(itr1);  assertEquals("a",itr.next());  assertTrue(itr.hasNext());  assertTrue(itr1.hasNext());  log.info("Will close iterator.");  itr.close();  assertFalse(itr.add(iterator("d")));  assertFalse(itr1.open);  assertFalse(itr1.hasNext());  assertFalse(itr.hasNext());}  }
class C{  private static String readVersion(){  try {    byte[] bytes=IoUtils.readFileAsByteArray(ZONE_DIRECTORY_NAME + "+VERSION");    return new String(bytes,0,bytes.length,StandardCharsets.ISO_8859_1).trim();  } catch (  IOException ex) {    return "unknown";  }}  }
class C{  public static boolean isModeChainFeasible(Plan plan,String[] candidate,Set<String> chainBasedModes,PlanomatConfigGroup.TripStructureAnalysisLayerOption tripStructureAnalysisLayer,ActivityFacilities facilities,Network network){  int numLegs=plan.getPlanElements().size() / 2;  int lastFeasibleLegNum=analyzeModeChainFeasability(plan,candidate,chainBasedModes,tripStructureAnalysisLayer,facilities,network);  return (numLegs == lastFeasibleLegNum);}  }
class C{  static void unregister(Object value){  Set registry=getRegistry();  if (registry != null) {    registry.remove(new IDKey(value));synchronized (HashCodeBuilder.class) {      registry=getRegistry();      if (registry != null && registry.isEmpty()) {        REGISTRY.set(null);      }    }  }}  }
class C{  public void parseHexNumbers(){  parseNumbers();  isParseHexNumbers=true;}  }
class C{  @LargeTest public void testPropertiesH264MainLineProfile() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_MP_960x720_25fps_800kbps_AACLC_48Khz_192Kbps_s_1_17.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int fileType=MediaProperties.FILE_MP4;  final int duration=77500;  final int videoBitrate=800000;  final int audioBitrate=192000;  final int fps=25;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=48000;  final int audioChannel=2;  final int videoProfile=MediaProperties.H264Profile.H264ProfileMain;  final int videoLevel=MediaProperties.H264Level.H264Level31;  final int width=960;  final int height=MediaProperties.HEIGHT_720;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  private void _set_name(InstalledApp app){  String appname=app.get_display_name();  if (appname != null) {    _app_name.setText(appname);  } else {    _app_name.setText(app.get_package_name());  }}  }
class C{  public void close(){  if (mInsertStatement != null) {    mInsertStatement.close();    mInsertStatement=null;  }  if (mReplaceStatement != null) {    mReplaceStatement.close();    mReplaceStatement=null;  }  mInsertSQL=null;  mColumns=null;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public synchronized boolean lastSeekingWasLongAgo(){  if (lastSeekingTime == null) {    return true;  }  return (new Date()).getTime() - lastSeekingTime.getTime() > LONG_AGO_THRESHOLD;}  }
class C{  public CSVWriter(Writer writer){  this(writer,DEFAULT_SEPARATOR);}  }
class C{  public static <T>T filter(T primary,Predicate<? super T> predicate){  if (primary == null) {    return null;  } else {    return predicate.test(primary) ? primary : null;  }}  }
class C{  public static <T,X extends Throwable>Subscription forEachXWithError(final Stream<T> stream,final long x,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError){  val t2=FutureStreamUtils.forEachXWithError(stream,x,consumerElement,consumerError);  t2.v2.run();  return t2.v1.join();}  }
class C{  public void execute2(KahanObject in1,double in2,double count){  double delta=(in2 - in1._sum) / count;  _plus.execute2(in1,delta);}  }
class C{  public AwsPolicyBuilder withS3Prefix(String bucketName,String prefix,S3Actions... actions){  return withS3(bucketName,prefix + "/*",actions);}  }
class C{  public BeanEventBeanWriter(BeanEventPropertyWriter[] writers){  this.writers=writers;}  }
class C{  public Quaterniond slerp(Quaterniondc target,double alpha){  return slerp(target,alpha,this);}  }
class C{  protected void showHistory(){  log.info("");  Integer C_BPartner_ID=getSelectedRowKey();  if (C_BPartner_ID == null)   return;  InvoiceHistory ih=new InvoiceHistory(this,C_BPartner_ID.intValue(),0,0,0);  ih.setVisible(true);  ih=null;}  }
class C{  protected Double wrapValue(double k){  return new Double(k);}  }
class C{  public Result(Stack<IMove> moveStack){  this.moveStack=moveStack;  success=true;}  }
class C{  AttributeSet convertToHTML(AttributeSet from,MutableAttributeSet to){  if (to == null) {    to=convAttr;  }  to.removeAttributes(to);  if (writeCSS) {    convertToHTML40(from,to);  } else {    convertToHTML32(from,to);  }  return to;}  }
class C{  public void toNativeArray(float[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  public static PemInfo decode(InputStream is) throws IOException {  byte[] streamContents=ReadUtil.readFully(is);  LineNumberReader lnr=null;  try {    lnr=new LineNumberReader(new InputStreamReader(new ByteArrayInputStream(streamContents)));    String line=lnr.readLine();    StringBuffer sbBase64=new StringBuffer();    if (line != null) {      line=line.trim();      String headerType=getTypeFromHeader(line);      if (headerType != null) {        line=lnr.readLine();        PemAttributes attributes=null;        if (line != null && line.contains(": ")) {          line=line.trim();          attributes=new PemAttributes();          attributesDone:           while (line != null) {            line=line.trim();            if (line.equals("")) {              line=lnr.readLine();              break;            }            if (!line.contains(": ")) {              return null;            }            int separator=line.indexOf(':');            String attributeName=line.substring(0,separator);            String attributeValue=line.substring(separator + 2);            attributes.add(new PemAttribute(attributeName,attributeValue));            line=lnr.readLine();          }        }        while (line != null) {          line=line.trim();          String footerType=getTypeFromFooter(line);          if (footerType == null) {            sbBase64.append(line);          } else {            if (!headerType.equals(footerType)) {              return null;            } else {              byte[] content=Base64.decode(sbBase64.toString());              return new PemInfo(headerType,attributes,content);            }          }          line=lnr.readLine();        }      }    }  }  finally {    IOUtils.closeQuietly(lnr);  }  return null;}  }
class C{  public static Object use(Object self,Object[] array){  if (array.length < 2)   throw new IllegalArgumentException("Expecting at least 2 arguments, a category class and a Closure");  Closure closure;  try {    closure=(Closure)array[array.length - 1];  } catch (  ClassCastException e) {    throw new IllegalArgumentException("Expecting a Closure to be the last argument");  }  List<Class> list=new ArrayList<Class>(array.length - 1);  for (int i=0; i < array.length - 1; ++i) {    Class categoryClass;    try {      categoryClass=(Class)array[i];    } catch (    ClassCastException e) {      throw new IllegalArgumentException("Expecting a Category Class for argument " + i);    }    list.add(categoryClass);  }  return GroovyCategorySupport.use(list,closure);}  }
class C{  public static Map<String,Object> authOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  boolean reAuth=false;  if (context.get("reAuth") != null) {    reAuth=((Boolean)context.get("reAuth")).booleanValue();  }  GenericValue orderHeader=null;  List<GenericValue> paymentPrefs=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    Map<String,String> lookupMap=UtilMisc.toMap("orderId",orderId,"statusId","PAYMENT_NOT_AUTH");    List<String> orderList=UtilMisc.toList("maxAmount");    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList();    if (reAuth) {      lookupMap.put("orderId",orderId);      lookupMap.put("statusId","PAYMENT_AUTHORIZED");      paymentPrefs.addAll(EntityQuery.use(delegator).from("OrderPaymentPreference").where(lookupMap).orderBy(orderList).queryList());    }  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting the order information",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");    return result;  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal totalRemaining=orh.getOrderGrandTotal();  int finished=0;  int hadError=0;  List<String> messages=FastList.newInstance();  for (  GenericValue paymentPref : paymentPrefs) {    if (reAuth && "PAYMENT_AUTHORIZED".equals(paymentPref.getString("statusId"))) {      String paymentConfig=null;      GenericValue paymentSettings=getPaymentSettings(orh.getOrderHeader(),paymentPref,AUTH_SERVICE_TYPE,false);      if (paymentSettings != null) {        paymentConfig=paymentSettings.getString("paymentPropertiesPath");        if (UtilValidate.isEmpty(paymentConfig)) {          paymentConfig="payment.properties";        }      }      if (PaymentGatewayServices.checkAuthValidity(paymentPref,paymentConfig)) {        finished+=1;        continue;      }    }    Map<String,Object> authContext=FastMap.newInstance();    authContext.put("orderPaymentPreferenceId",paymentPref.getString("orderPaymentPreferenceId"));    authContext.put("userLogin",context.get("userLogin"));    Map<String,Object> results=null;    try {      results=dispatcher.runSync("authOrderPaymentPreference",authContext);    } catch (    GenericServiceException se) {      Debug.logError(se,"Error in calling authOrderPaymentPreference from authOrderPayments",module);      hadError+=1;      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ se.toString());      continue;    }    result.put("authCode",results.get("authCode"));    if (ServiceUtil.isError(results)) {      hadError+=1;      messages.add("Could not authorize OrderPaymentPreference [" + paymentPref.getString("orderPaymentPreferenceId") + "] for order ["+ orderId+ "]: "+ results.get(ModelService.ERROR_MESSAGE));      continue;    }    if (((Boolean)results.get("finished")).booleanValue()) {      finished+=1;    }    if (((Boolean)results.get("errors")).booleanValue()) {      hadError+=1;    }    if (results.get("messages") != null) {      List<String> message=UtilGenerics.checkList(results.get("messages"));      messages.addAll(message);    }    if (results.get("processAmount") != null) {      totalRemaining=totalRemaining.subtract(((BigDecimal)results.get("processAmount")));    }  }  Debug.logInfo("Finished with auth(s) checking results",module);  result.put("authResultMsgs",messages);  if (hadError > 0) {    Debug.logError("Error(s) (" + hadError + ") during auth; returning ERROR",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","ERROR");    return result;  } else   if (finished == paymentPrefs.size()) {    Debug.logInfo("All auth(s) passed total remaining : " + totalRemaining,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","APPROVED");    return result;  } else {    Debug.logInfo("Only [" + finished + "/"+ paymentPrefs.size()+ "] OrderPaymentPreference authorizations passed; returning processResult=FAILED with no message so that message from ProductStore will be used",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put("processResult","FAILED");    return result;  }}  }
class C{  public boolean hasHeaderMetadata(){  return (this.header_byte_count != 0);}  }
class C{  public void addFiles(IFile[] files){  Assert.isNotNull(files);  fFiles.addAll(Arrays.asList(files));}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @Nullable public static String fileMd5(@Nullable File file,@Nullable IgniteLogger log){  String md5=null;  if (file != null) {    if (!file.isFile()) {      U.warn(log,"Failed to find file for md5 calculation: " + file);      return null;    }    InputStream in=null;    try {      in=new BufferedInputStream(new FileInputStream(file));      md5=DigestUtils.md5Hex(in);    } catch (    IOException e) {      U.warn(log,"Failed to open input stream for md5 calculation: " + e.getMessage());    } finally {      U.closeQuiet(in);    }  }  return md5;}  }
class C{  protected int writeUTF16Surrogate(char c,char ch[],int i,int end) throws IOException {  int codePoint=0;  if (i + 1 >= end) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c)}));  }  final char high=c;  final char low=ch[i + 1];  if (!Encodings.isLowUTF16Surrogate(low)) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c) + " " + Integer.toHexString(low)}));  }  final java.io.Writer writer=m_writer;  if (m_encodingInfo.isInEncoding(c,low)) {    writer.write(ch,i,2);  } else {    final String encoding=getEncoding();    if (encoding != null) {      codePoint=Encodings.toCodePoint(high,low);      writer.write('&');      writer.write('#');      writer.write(Integer.toString(codePoint));      writer.write(';');    } else {      writer.write(ch,i,2);    }  }  return codePoint;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (f == null || !f.isVisible()) {    f=new SetPhysicalLocationFrame(_reporter);    f.setVisible(true);  }  f.setExtendedState(Frame.NORMAL);}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public void mapDatasetToRangeAxis(int index,int axisIndex){  List axisIndices=new java.util.ArrayList(1);  axisIndices.add(new Integer(axisIndex));  mapDatasetToRangeAxes(index,axisIndices);}  }
class C{  public boolean equals(int i){  return value == i;}  }
class C{  public PeerAddress(NetworkParameters params,InetAddress addr){  this(params,addr,MainNetParams.get().getPort());}  }
class C{  public static int maxElement(int[] vals){  if (vals.length == 0) {    throw new NoSuchElementException("No Max Element in Empty Array.");  }  return maxElement(vals,0,vals.length);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.NOTEQUALS_OP___NOTEQUALS_OP_1:    return NOTEQUALS_OP_1_EDEFAULT == null ? notequalsOp_1 != null : !NOTEQUALS_OP_1_EDEFAULT.equals(notequalsOp_1);}return super.eIsSet(featureID);}  }
class C{  protected void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        int exName=m_expandedNameTable.getExpandedTypeID(DTM.TEXT_NODE);        int dataIndex=m_data.size();        m_previous=addNode(m_coalescedTextType,exName,m_parents.peek(),m_previous,dataIndex,false);        m_data.addElement(m_textPendingStart);        m_data.addElement(length);      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public static void downloadImageToStorage(String url,String fileName,SuccessCallback<Image> onSuccess){  downloadImageToStorage(url,fileName,onSuccess,new CallbackAdapter<Image>());}  }
class C{  protected Scanner(Environment env){  this.env=env;}  }
class C{  public ProcessResult execute(final Process process,String name,boolean silent){  name=name == null ? " " : " '" + name + "' ";  try {    if (process == null) {      LOGGER.error("Started process" + name + "was null");      return new ProcessResult(ERROR_EXIT_CODE,"","");    }    try (OutputStreamPrinterThread stdOutThread=printerThreadProvider.getPrinterThreadForStdOut(process,silent);OutputStreamPrinterThread stdErrThread=printerThreadProvider.getPrinterThreadForStdErr(process,silent)){      boolean finished=process.waitFor(DEFAULT_PROCESS_TIMEOUT,SECONDS);      if (!finished) {        LOGGER.error("Process didn't finish after " + DEFAULT_PROCESS_TIMEOUT + " "+ SECONDS);        return new ProcessResult(ERROR_EXIT_CODE,"","");      }      stdOutThread.join(DEFAULT_THREAD_TIMEOUT);      stdErrThread.join(DEFAULT_THREAD_TIMEOUT);      ProcessResult processResult=new ProcessResult(process.exitValue(),stdOutThread.toString(),stdErrThread.toString());      if (LOGGER.isDebugEnabled() && (!finished || !processResult.isOK())) {        final String processLog=processResult.toString();        if (!StringExtensions.isNullOrEmpty(processLog)) {          LOGGER.debug(processLog);        }      }      return processResult;    }   } catch (  final InterruptedException e) {    LOGGER.error("Thread was interrupted while waiting for process" + name + "to end.",e);    return new ProcessResult(ERROR_EXIT_CODE,"",writeStackeTrace(e));  } finally {    if (process != null && process.isAlive()) {      try {        process.destroyForcibly().waitFor(DEFAULT_PROCESS_TIMEOUT,SECONDS);      } catch (      final InterruptedException e) {        LOGGER.error("Error while trying to forcefully terminate" + name + "process.",e);      }      if (!process.isAlive()) {        LOGGER.debug("Spawned" + name + "process was successfully terminated.");      } else {        LOGGER.error("Cannot terminate" + name + "subprocess. Termination timeouted after "+ DEFAULT_PROCESS_TIMEOUT+ " "+ SECONDS+ ".");      }    } else {      LOGGER.debug("Spawned" + name + "process was successfully terminated.");    }  }}  }
class C{  private void seedInitialPresenceByAccount(long account){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(TABLE_CONTACTS);  qb.setProjectionMap(sContactsProjectionMap);  mQueryContactIdSelectionArgs1[0]=String.valueOf(account);  final SQLiteDatabase db=getDBHelper().getWritableDatabase();  db.beginTransaction();  Cursor c=null;  try {    ContentValues presenceValues=new ContentValues();    presenceValues.put(Imps.Presence.PRESENCE_STATUS,Imps.Presence.OFFLINE);    presenceValues.put(Imps.Presence.PRESENCE_CUSTOM_STATUS,"");    StringBuilder buf=new StringBuilder();    buf.append(Imps.Presence.CONTACT_ID);    buf.append(" in (select ");    buf.append(Imps.Contacts._ID);    buf.append(" from ");    buf.append(TABLE_CONTACTS);    buf.append(" where ");    buf.append(Imps.Contacts.ACCOUNT);    buf.append("=?) ");    String selection=buf.toString();    log("seedInitialPresence: reset presence selection=" + selection);    int count=db.update(TABLE_PRESENCE,presenceValues,selection,mQueryContactIdSelectionArgs1);    log("seedInitialPresence: reset " + count + " presence rows to OFFLINE");{      log("seedInitialPresence: contacts_with_no_presence_selection => " + CONTACTS_WITH_NO_PRESENCE_SELECTION);    }    c=qb.query(db,CONTACT_ID_PROJECTION,CONTACTS_WITH_NO_PRESENCE_SELECTION,mQueryContactIdSelectionArgs1,null,null,null,null);    log("seedInitialPresence: found " + c.getCount() + " contacts w/o presence");    count=0;    while (c.moveToNext()) {      long id=c.getLong(CONTACT_ID_COLUMN);      presenceValues.put(Imps.Presence.CONTACT_ID,id);      try {        if (db.insert(TABLE_PRESENCE,null,presenceValues) > 0) {          count++;        }      } catch (      SQLiteConstraintException ex) {        log("seedInitialPresence: insert presence for contact_id " + id + " failed, caught "+ ex);      }    }    log("seedInitialPresence: added " + count + " new presence rows");    db.setTransactionSuccessful();  }  finally {    if (c != null) {      c.close();    }    db.endTransaction();  }}  }
class C{  private void dynInit(int C_BPartner_ID){  log.config("C_BPartner_ID=" + C_BPartner_ID);  if (C_BPartner_ID != 0) {    int ShelfLifeMinPct=0;    int ShelfLifeMinDays=0;    String sql="SELECT bp.ShelfLifeMinPct, bpp.ShelfLifeMinPct, bpp.ShelfLifeMinDays " + "FROM C_BPartner bp " + " LEFT OUTER JOIN C_BPartner_Product bpp"+ " ON (bp.C_BPartner_ID=bpp.C_BPartner_ID AND bpp.M_Product_ID=?) "+ "WHERE bp.C_BPartner_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_M_Product_ID);      pstmt.setInt(2,C_BPartner_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        ShelfLifeMinPct=rs.getInt(1);        int pct=rs.getInt(2);        if (pct > 0)         ShelfLifeMinDays=pct;        ShelfLifeMinDays=rs.getInt(3);      }    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    if (ShelfLifeMinPct > 0) {      m_sqlMinLife=" AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;      log.config("PAttributeInstance.dynInit - ShelfLifeMinPct=" + ShelfLifeMinPct);    }    if (ShelfLifeMinDays > 0) {      m_sqlMinLife+=" AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;      log.config("PAttributeInstance.dynInit - ShelfLifeMinDays=" + ShelfLifeMinDays);    }  }  m_sql=m_table.prepareTable(s_layout,s_sqlFrom,m_M_Warehouse_ID == 0 ? s_sqlWhereWithoutWarehouse : s_sqlWhere,false,"s") + " ORDER BY asi.GuaranteeDate, s.QtyOnHand";  m_table.addEventListener(Events.ON_SELECT,this);  refresh();}  }
class C{  public synchronized Reference<? extends T> remove(long timeoutMillis) throws InterruptedException {  if (timeoutMillis < 0) {    throw new IllegalArgumentException("timeout < 0: " + timeoutMillis);  }  if (head != null) {    return poll();  }  if (timeoutMillis == 0 || (timeoutMillis > Long.MAX_VALUE / NANOS_PER_MILLI)) {    do {      wait(0);    } while (head == null);    return poll();  }  long nanosToWait=timeoutMillis * NANOS_PER_MILLI;  int timeoutNanos=0;  long startTime=System.nanoTime();  while (true) {    wait(timeoutMillis,timeoutNanos);    if (head != null) {      break;    }    long nanosElapsed=System.nanoTime() - startTime;    long nanosRemaining=nanosToWait - nanosElapsed;    if (nanosRemaining <= 0) {      break;    }    timeoutMillis=nanosRemaining / NANOS_PER_MILLI;    timeoutNanos=(int)(nanosRemaining - timeoutMillis * NANOS_PER_MILLI);  }  return poll();}  }
class C{  public void validateBusinessObjectData(Integer expectedBusinessObjectDataId,BusinessObjectDataKey expectedBusinessObjectDataKey,Boolean expectedLatestVersion,String expectedStatusCode,BusinessObjectData actualBusinessObjectData){  validateBusinessObjectData(expectedBusinessObjectDataId,expectedBusinessObjectDataKey.getNamespace(),expectedBusinessObjectDataKey.getBusinessObjectDefinitionName(),expectedBusinessObjectDataKey.getBusinessObjectFormatUsage(),expectedBusinessObjectDataKey.getBusinessObjectFormatFileType(),expectedBusinessObjectDataKey.getBusinessObjectFormatVersion(),expectedBusinessObjectDataKey.getPartitionValue(),expectedBusinessObjectDataKey.getSubPartitionValues(),expectedBusinessObjectDataKey.getBusinessObjectDataVersion(),expectedLatestVersion,expectedStatusCode,actualBusinessObjectData);}  }
class C{  public JLBHOptions warmUpIterations(int warmUp){  this.warmUpIterations=warmUp;  return this;}  }
class C{  public void prevFrame() throws IOException {  writeCode(PREVIOUS_FRAME);}  }
class C{  public static List<Dependency> sortDependencies(Collection<Dependency> dependencies){  List<Dependency> result=new LinkedList<>();  for (  Dependency dep : dependencies) {    boolean added=false;    for (int i=0; i < result.size(); i++) {      Dependency other=result.get(i);      if (other.depender.equals(dep.depender)) {        result.add(i,dep);        added=true;        break;      }      if (other.depender.equals(dep.dependsOn)) {        result.add(i,dep);        added=true;        break;      }    }    if (!added) {      result.add(dep);    }  }  return result;}  }
class C{  public CUcontext(){}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ModeUsage))   return false;  ModeUsage other=(ModeUsage)obj;  return this.mode == other.mode && this.currentMode == other.currentMode && Equal.equal(this.modeMap,other.modeMap);}  }
class C{  @Override public void overlayChanged(OverlayChangeEvent event){  repaint();}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case EipPackage.ENDPOINT:{      Endpoint endpoint=(Endpoint)theEObject;      T result=caseEndpoint(endpoint);      if (result == null)       result=caseMetadatable(endpoint);      if (result == null)       result=defaultCase(theEObject);      return result;    }case EipPackage.CHANNEL:{    Channel channel=(Channel)theEObject;    T result=caseChannel(channel);    if (result == null)     result=caseMetadatable(channel);    if (result == null)     result=defaultCase(theEObject);    return result;  }case EipPackage.ADAPTER:{  Adapter adapter=(Adapter)theEObject;  T result=caseAdapter(adapter);  if (result == null)   result=defaultCase(theEObject);  return result;}case EipPackage.ROUTER:{Router router=(Router)theEObject;T result=caseRouter(router);if (result == null) result=caseEndpoint(router);if (result == null) result=caseMetadatable(router);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.FILTER:{Filter filter=(Filter)theEObject;T result=caseFilter(filter);if (result == null) result=caseEndpoint(filter);if (result == null) result=caseMetadatable(filter);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.TRANSFORMER:{Transformer transformer=(Transformer)theEObject;T result=caseTransformer(transformer);if (result == null) result=caseEndpoint(transformer);if (result == null) result=caseMetadatable(transformer);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.GATEWAY:{Gateway gateway=(Gateway)theEObject;T result=caseGateway(gateway);if (result == null) result=caseEndpoint(gateway);if (result == null) result=caseMetadatable(gateway);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.CONDITIONAL_ROUTE:{ConditionalRoute conditionalRoute=(ConditionalRoute)theEObject;T result=caseConditionalRoute(conditionalRoute);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.SPLITTER:{Splitter splitter=(Splitter)theEObject;T result=caseSplitter(splitter);if (result == null) result=caseEndpoint(splitter);if (result == null) result=caseMetadatable(splitter);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.AGGREGATOR:{Aggregator aggregator=(Aggregator)theEObject;T result=caseAggregator(aggregator);if (result == null) result=caseEndpoint(aggregator);if (result == null) result=caseMetadatable(aggregator);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.ROUTE:{Route route=(Route)theEObject;T result=caseRoute(route);if (result == null) result=caseMetadatable(route);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.SERVICE_ACTIVATOR:{ServiceActivator serviceActivator=(ServiceActivator)theEObject;T result=caseServiceActivator(serviceActivator);if (result == null) result=caseInvocableEndpoint(serviceActivator);if (result == null) result=caseEndpoint(serviceActivator);if (result == null) result=caseMetadatable(serviceActivator);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.EIP_MODEL:{EIPModel eipModel=(EIPModel)theEObject;T result=caseEIPModel(eipModel);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.ENRICHER:{Enricher enricher=(Enricher)theEObject;T result=caseEnricher(enricher);if (result == null) result=caseInvocableEndpoint(enricher);if (result == null) result=caseEndpoint(enricher);if (result == null) result=caseMetadatable(enricher);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.COMPOSITE_PROCESSOR:{CompositeProcessor compositeProcessor=(CompositeProcessor)theEObject;T result=caseCompositeProcessor(compositeProcessor);if (result == null) result=caseEndpoint(compositeProcessor);if (result == null) result=caseMetadatable(compositeProcessor);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.RECIPIENT_LIST_ROUTER:{RecipientListRouter recipientListRouter=(RecipientListRouter)theEObject;T result=caseRecipientListRouter(recipientListRouter);if (result == null) result=caseRouter(recipientListRouter);if (result == null) result=caseEndpoint(recipientListRouter);if (result == null) result=caseMetadatable(recipientListRouter);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.SERVICE_REF:{ServiceRef serviceRef=(ServiceRef)theEObject;T result=caseServiceRef(serviceRef);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.SERVICE_INVOCATION:{ServiceInvocation serviceInvocation=(ServiceInvocation)theEObject;T result=caseServiceInvocation(serviceInvocation);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.INVOCABLE_ENDPOINT:{InvocableEndpoint invocableEndpoint=(InvocableEndpoint)theEObject;T result=caseInvocableEndpoint(invocableEndpoint);if (result == null) result=caseEndpoint(invocableEndpoint);if (result == null) result=caseMetadatable(invocableEndpoint);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.CONTENT_FILTER:{ContentFilter contentFilter=(ContentFilter)theEObject;T result=caseContentFilter(contentFilter);if (result == null) result=caseFilter(contentFilter);if (result == null) result=caseEndpoint(contentFilter);if (result == null) result=caseMetadatable(contentFilter);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.RESEQUENCER:{Resequencer resequencer=(Resequencer)theEObject;T result=caseResequencer(resequencer);if (result == null) result=caseAggregator(resequencer);if (result == null) result=caseEndpoint(resequencer);if (result == null) result=caseMetadatable(resequencer);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.METADATA:{Metadata metadata=(Metadata)theEObject;T result=caseMetadata(metadata);if (result == null) result=defaultCase(theEObject);return result;}case EipPackage.METADATABLE:{Metadatable metadatable=(Metadatable)theEObject;T result=caseMetadatable(metadatable);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public Object clone(){  return new ParameterRef(paramType,n);}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public T defaultValue(){  return defaultValue;}  }
class C{  public boolean hasReturnOverall(){  return getReturnOverall() != null;}  }
class C{  private ReferenceExpressionPair readVariable(VariableReference rhs,Scope scope){  String rhs_name=rhs.getName();  ReferenceExpression symb_ref=symb_references.get(rhs_name);  Expression<?> symb_expr=symb_expressions.get(rhs_name);  return new ReferenceExpressionPair(symb_ref,symb_expr);}  }
class C{  public static void onPageEnd(final String activityName){  log.onPageEnd(activityName);}  }
class C{  protected void registerTabbedPaneAttributes(){  addAttributeProcessor(new AttachDefaultTabListenerLmlAttribute(),"defaultListener","attachDefaultListener");  addAttributeProcessor(new OnAllTabsRemovalLmlAttribute(),"onAllRemoved","onAllTabsRemoved","onClear","onTabsClear");  addAttributeProcessor(new OnTabRemoveLmlAttribute(),"onRemove","onTabRemove");  addAttributeProcessor(new OnTabSwitchLmlAttribute(),"onSwitch","onTabSwitch");  addAttributeProcessor(new TabDeselectLmlAttribute(),"allowTabDeselect","tabDeselect");  addAttributeProcessor(new TabHidingActionLmlAttribute(),"tabHideAction");  addAttributeProcessor(new TabListenerLmlAttribute(),"tabListener","tabbedPaneListener");  addAttributeProcessor(new TabSelectedLmlAttribute(),"selected","selectedTab");  addAttributeProcessor(new TabShowingActionLmlAttribute(),"tabShowAction");  addAttributeProcessor(new OnTabDisposeLmlAttribute(),"onDispose","onTabDispose","onRemove","onTabRemove");  addAttributeProcessor(new OnTabHideLmlAttribute(),"onTabHide");  addAttributeProcessor(new OnTabSaveLmlAttribute(),"onSave","onTabSave");  addAttributeProcessor(new OnTabShowLmlAttribute(),"onTabShow");  addAttributeProcessor(new TabCloseableLmlAttribute(),"closeable","closeableByUser");  addAttributeProcessor(new TabDirtyLmlAttribute(),"dirty");  addAttributeProcessor(new TabDisableLmlAttribute(),"disable","disabled");  addAttributeProcessor(new TabSavableLmlAttribute(),"savable");  addAttributeProcessor(new TabTitleLmlAttribute(),"title","name","tabTitle","tabName");}  }
class C{  public static CreatePlatformSessionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreatePlatformSessionResponseE object=new CreatePlatformSessionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","createPlatformSessionResponse").equals(reader.getName())) {          object.setCreatePlatformSessionResponse(CreatePlatformSessionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  static void appendVmSelectMessage(String vm1,String vm2){  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.vmselect",vm1,vm2));}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Relationship> findAllRelationshipsTo(Vertex vertex,Vertex type){  Query query=this.entityManager.createQuery("Select r from Relationship r where r.target = :vertex and r.type = :type");  setHints(query);  query.setParameter("vertex",vertex);  query.setParameter("type",type);  return query.getResultList();}  }
class C{  @Override public <T extends ParseObject.State.Init<?>>T decode(T builder,JSONObject json,ParseDecoder decoder){  ParseUser.State.Builder userBuilder=(State.Builder)builder;  String newSessionToken=json.optString(KEY_SESSION_TOKEN,null);  if (newSessionToken != null) {    userBuilder.sessionToken(newSessionToken);    json.remove(KEY_SESSION_TOKEN);  }  JSONObject newAuthData=json.optJSONObject(KEY_AUTH_DATA);  if (newAuthData != null) {    try {      @SuppressWarnings("rawtypes") Iterator i=newAuthData.keys();      while (i.hasNext()) {        String key=(String)i.next();        if (!newAuthData.isNull(key)) {          userBuilder.putAuthData(key,(Map<String,String>)ParseDecoder.get().decode(newAuthData.getJSONObject(key)));        }      }    } catch (    JSONException e) {      throw new RuntimeException(e);    }    json.remove(KEY_AUTH_DATA);  }  return super.decode(builder,json,decoder);}  }
class C{  public Builder withTime(long timestamp){  request.timestamp=Assert.argNot(timestamp,timestamp <= 0,"timestamp must be positive");  return this;}  }
class C{  public void error(final String message,final Throwable throwable,final LogEvent event){  m_errorHandler.error(message,throwable,event);}  }
class C{  protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){  logger.trace("{}:{} Send Completed",name(),buffer);  activeSendTasks.decrementAndGet();}  }
class C{  public String delete() throws SaaSApplicationException {  if (selectedService == null) {    return OUTCOME_ERROR;  }  if (logger.isDebugLoggingEnabled()) {  }  try {    getProvisioningService().deleteService(selectedService.getVoServiceDetails());    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_DELETED,selectedService.getServiceId());    sessionBean.setSelectedServiceKeyForSupplier(null);    selectedService=null;    services=null;  } catch (  ServiceStateException sse) {    Object[] params=null;    String localizedStatus=JSFUtils.getText("ServiceStatus." + sse.getMessageParams()[1],params);    addMessage(null,FacesMessage.SEVERITY_ERROR,CANNOT_DELETE_ACTIVE_SERVICE,localizedStatus);    return OUTCOME_ERROR;  }  if (logger.isDebugLoggingEnabled()) {  }  return OUTCOME_SUCCESS;}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  private int scoreClustering(List clustering,int ng[][],boolean buffer[]){  int score=0;  for (int i=0; i < buffer.length; i++) {    buffer[i]=true;  }  for (Iterator it1=clustering.iterator(); it1.hasNext(); ) {    int currentCluster[]=(int[])it1.next();    next_item:     for (int i=0; i < currentCluster.length; i++) {      if (!buffer[currentCluster[i]]) {        continue;      }      for (Iterator it2=clustering.iterator(); it2.hasNext(); ) {        int nextCluster[]=(int[])it2.next();        if (nextCluster == currentCluster) {          continue;        }        for (int j=0; j < nextCluster.length; j++) {          if (currentCluster[i] == nextCluster[j]) {            buffer[currentCluster[i]]=false;            continue next_item;          }        }      }    }  }  int localScore;  for (int c1=0; c1 < clustering.size(); c1++) {    int currentCluster[]=(int[])clustering.get(c1);    localScore=0;    next_item:     for (int i=0; i < currentCluster.length; i++) {      if (!buffer[currentCluster[i]]) {        continue;      }      for (int c2=c1 + 1; c2 < clustering.size(); c2++) {        int nextCluster[]=(int[])clustering.get(c2);        for (int j=0; j < nextCluster.length; j++) {          if (!buffer[nextCluster[j]]) {            continue;          }        }      }      localScore++;    }    if (localScore > 1) {      score+=localScore;    }  }  return score;}  }
class C{  public static String clean(String str){  return (str == null ? "" : str.trim());}  }
class C{  public void add(String string,int interval,int pace){  super.addItem(new TimerRateHolder(string,interval,pace));}  }
class C{  public int indexOfKey(Object key){  return indexOf(key,key.hashCode());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void deleteRegion(final long id){  mSingleArg[0]=String.valueOf(id);  mDatabase.delete(Tables.REGIONS,ID_SELECTION,mSingleArg);}  }
class C{  public ScriptedRandomSource(final int[] numbers){  m_numbers=numbers;}  }
class C{  private void updateRatingChoice(){  int current=m_chRating.getSelectedIndex();  m_chRating.removeAllItems();  FactionRecord fRec=(FactionRecord)m_chSubfaction.getSelectedItem();  if (fRec == null) {    fRec=(FactionRecord)m_chFaction.getSelectedItem();  }  ArrayList<String> ratingLevels=fRec.getRatingLevels();  if (ratingLevels.isEmpty()) {    ratingLevels=fRec.getRatingLevelSystem();  }  if (ratingLevels.size() > 1) {    for (int i=ratingLevels.size() - 1; i >= 0; i--) {      m_chRating.addItem(ratingLevels.get(i));    }  }  if (current < 0 && m_chRating.getItemCount() > 0) {    m_chRating.setSelectedIndex(0);  } else {    m_chRating.setSelectedIndex(Math.min(current,m_chRating.getItemCount() - 1));  }}  }
class C{  private StendhalMapStructure generateMapStructure(int width,int height){  LayerDefinition floor=new LayerDefinition(width,height);  floor.setName("0_floor");  floor.build();  LayerDefinition terrain=new LayerDefinition(width,height);  terrain.setName("1_terrain");  LayerDefinition object=new LayerDefinition(width,height);  object.setName("2_object");  LayerDefinition roof=new LayerDefinition(width,height);  roof.setName("3_roof");  LayerDefinition collision=new LayerDefinition(width,height);  collision.setName("collision");  LayerDefinition protection=new LayerDefinition(width,height);  protection.setName("protection");  StendhalMapStructure map=new StendhalMapStructure(width,height);  map.addLayer(floor);  map.addLayer(terrain);  map.addLayer(object);  map.addLayer(roof);  map.addLayer(collision);  map.addLayer(protection);  generateCollisions(collision);  MazePainter painter=new MazePainter();  painter.paint(map);  Point pos=getPortalPosition();  painter.paintPortal(map,pos.x,pos.y);  return map;}  }
class C{  public void deleteJNIRef(int offset){  if (offset > JNIRefsTop) {    VM.sysWrite("JNI ERROR: getJNIRef for illegal offset > TOP, ");    VM.sysWrite(offset);    VM.sysWrite("(top is ");    VM.sysWrite(JNIRefsTop);    VM.sysWrite(")\n");  }  JNIRefs.set(offset >> LOG_BYTES_IN_ADDRESS,Address.zero());  if (offset == JNIRefsTop)   JNIRefsTop-=BYTES_IN_ADDRESS;}  }
class C{  public CleanUpRequirements(boolean requiresAST,boolean requiresFreshAST,boolean requiresChangedRegions,Map<String,String> compilerOptions){  Assert.isLegal(!requiresFreshAST || requiresAST,"Must not request fresh AST if no AST is required");  Assert.isLegal(compilerOptions == null || requiresAST,"Must not provide options if no AST is required");  fRequiresAST=requiresAST;  fRequiresFreshAST=requiresFreshAST;  fRequiresChangedRegions=requiresChangedRegions;  fCompilerOptions=compilerOptions;  if (fCompilerOptions != null)   fCompilerOptions.put(JavaCore.COMPILER_PB_SUPPRESS_WARNINGS,JavaCore.DISABLED);}  }
class C{  public void testToArray_NullArg(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.toArray(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void zoom(float scaleX,float scaleY,float x,float y){  Matrix save=mViewPortHandler.zoom(scaleX,scaleY,x,-y);  mViewPortHandler.refresh(save,this,true);  calculateOffsets();  postInvalidate();}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Signature signature){  serializer.writeBytes(label,signature.getBytes());}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public long skip(long bytes) throws IOException {  return bfdi.skip(bytes);}  }
class C{  public CCopyNodeAction(final NaviNode node){  super("Copy node to clipboard");  m_node=Preconditions.checkNotNull(node,"IE02155: Node argument can not be null");}  }
class C{  public boolean removeEventHandler(EventHandler ev){  if (ev == null) {    return false;  }  boolean found=false;  if (ev == rieh) {    rieh=null;    found=true;  }  if (ev == nseh) {    nseh=null;    found=true;  }  if (ev == meeh) {    meeh=null;    found=true;  }  return found;}  }
class C{  public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  public void registerExtension(BridgeExtension ext){  Iterator i=ext.getImplementedExtensions();  while (i.hasNext())   extensions.add(i.next());}  }
class C{  public void add(long element){  if (size == elements.length)   ensureCapacity(size + 1);  elements[size++]=element;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.132 -0500",hash_original_method="1751DA8EA422A6A8B82F8F3E4926F05B",hash_generated_method="4029DB65867D78066586999C19B204AF") public StorageManager(Looper tgtLooper) throws RemoteException {  mMountService=IMountService.Stub.asInterface(ServiceManager.getService("mount"));  if (mMountService == null) {    Log.e(TAG,"Unable to connect to mount service! - is it running yet?");    return;  }  mTgtLooper=tgtLooper;  mBinderListener=new MountServiceBinderListener();  mMountService.registerListener(mBinderListener);}  }
class C{  public static SpannableString toSpannable(SpannableString text){  SpannableStringBuilder ssb=new SpannableStringBuilder(text);  replaceControlCodes(boldPattern.matcher(ssb),ssb,new StyleSpan(Typeface.BOLD));  replaceControlCodes(underlinePattern.matcher(ssb),ssb,new UnderlineSpan());  replaceControlCodes(italicPattern.matcher(ssb),ssb,new StyleSpan(Typeface.ITALIC));  replaceControlCodes(inversePattern.matcher(ssb),ssb,new BackgroundColorSpan(colors[0] | 0xFF000000));  BackgroundColorSpan[] inverseSpans=ssb.getSpans(0,ssb.length(),BackgroundColorSpan.class);  for (int i=0; i < inverseSpans.length; i++) {    ssb.setSpan(new ForegroundColorSpan(colors[1] | 0xFF000000),ssb.getSpanStart(inverseSpans[i]),ssb.getSpanEnd(inverseSpans[i]),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }  Matcher m=colorPattern.matcher(ssb);  while (m.find()) {    int start=m.start();    int end=m.end();    Integer color=Integer.parseInt(m.group(1));    int codelength=m.group(1).length() + 1;    if (color <= 15 && color >= 0) {      ssb.setSpan(new ForegroundColorSpan(colors[color] | 0xFF000000),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }    if (m.group(2) != null) {      color=Integer.parseInt(m.group(2));      if (color <= 15 && color >= 0) {        ssb.setSpan(new BackgroundColorSpan(colors[color] | 0xFF000000),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }      codelength=codelength + m.group(2).length() + 1;    }    ssb.delete(start,start + codelength);    m.reset(ssb);  }  return new SpannableString(removeStyleAndColors(ssb));}  }
class C{  public ParsedQuery(TupleExpr tupleExpr){  this(null,tupleExpr);}  }
class C{  private static String wordShapeChris1(String s){  int length=s.length();  if (length == 0) {    return "SYMBOL";  }  boolean cardinal=false;  boolean number=true;  boolean seenDigit=false;  boolean seenNonDigit=false;  for (int i=0; i < length; i++) {    char ch=s.charAt(i);    boolean digit=Character.isDigit(ch);    if (digit) {      seenDigit=true;    } else {      seenNonDigit=true;    }    digit=digit || ch == '.' || ch == ',' || (i == 0 && (ch == '-' || ch == '+'));    if (!digit) {      number=false;    }  }  if (!seenDigit) {    number=false;  } else   if (!seenNonDigit) {    cardinal=true;  }  if (cardinal) {    if (length < 4) {      return "CARDINAL13";    } else     if (length == 4) {      return "CARDINAL4";    } else {      return "CARDINAL5PLUS";    }  } else   if (number) {    return "NUMBER";  }  boolean seenLower=false;  boolean seenUpper=false;  boolean allCaps=true;  boolean allLower=true;  boolean initCap=false;  boolean dash=false;  boolean period=false;  for (int i=0; i < length; i++) {    char ch=s.charAt(i);    boolean up=Character.isUpperCase(ch);    boolean let=Character.isLetter(ch);    boolean tit=Character.isTitleCase(ch);    if (ch == '-') {      dash=true;    } else     if (ch == '.') {      period=true;    }    if (tit) {      seenUpper=true;      allLower=false;      seenLower=true;      allCaps=false;    } else     if (up) {      seenUpper=true;      allLower=false;    } else     if (let) {      seenLower=true;      allCaps=false;    }    if (i == 0 && (up || tit)) {      initCap=true;    }  }  if (length == 2 && initCap && period) {    return "ACRONYM1";  } else   if (seenUpper && allCaps && !seenDigit&& period) {    return "ACRONYM";  } else   if (seenDigit && dash && !seenUpper&& !seenLower) {    return "DIGIT-DASH";  } else   if (initCap && seenLower && seenDigit&& dash) {    return "CAPITALIZED-DIGIT-DASH";  } else   if (initCap && seenLower && seenDigit) {    return "CAPITALIZED-DIGIT";  } else   if (initCap && seenLower & dash) {    return "CAPITALIZED-DASH";  } else   if (initCap && seenLower) {    return "CAPITALIZED";  } else   if (seenUpper && allCaps && seenDigit&& dash) {    return "ALLCAPS-DIGIT-DASH";  } else   if (seenUpper && allCaps && seenDigit) {    return "ALLCAPS-DIGIT";  } else   if (seenUpper && allCaps && dash) {    return "ALLCAPS";  } else   if (seenUpper && allCaps) {    return "ALLCAPS";  } else   if (seenLower && allLower && seenDigit&& dash) {    return "LOWERCASE-DIGIT-DASH";  } else   if (seenLower && allLower && seenDigit) {    return "LOWERCASE-DIGIT";  } else   if (seenLower && allLower && dash) {    return "LOWERCASE-DASH";  } else   if (seenLower && allLower) {    return "LOWERCASE";  } else   if (seenLower && seenDigit) {    return "MIXEDCASE-DIGIT";  } else   if (seenLower) {    return "MIXEDCASE";  } else   if (seenDigit) {    return "SYMBOL-DIGIT";  } else {    return "SYMBOL";  }}  }
class C{  public MalformedChallengeException(final String message){  super(message);}  }
class C{  public void await() throws InterruptedException {  try {    future.get();  } catch (  ExecutionException e) {    throw new RuntimeException(e);  }}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public static Builder builder(){  return new Builder(new QueryRequest());}  }
class C{  protected void fireHexEditorEvent(int offset,int added,int removed){  HexEditorEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HexEditorListener.class) {      if (e == null) {        e=new HexEditorEvent(this,offset,added,removed);      }      ((HexEditorListener)listeners[i + 1]).hexBytesChanged(e);    }  }}  }
class C{  public List<IPRange> split(IP ip){  List<IPRange> ranges=new ArrayList<IPRange>();  if (this.contains(ip)) {    ranges.add(new IPRange(this.startIP,ip));    ranges.add(new IPRange(ip,this.endIP));  }  return ranges;}  }
class C{  public static void assertNoTasksEnqueued(String... queueNames) throws Exception {  for (  String queueName : queueNames) {    assertThat(getQueueInfo(queueName).getCountTasks()).isEqualTo(0);  }}  }
class C{  public void encodeEnd(FacesContext context,UIComponent component) throws IOException {  if (context == null || component == null) {    throw new NullPointerException("'context' and/or 'component' is null");  }  if (!component.isRendered()) {    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"End encoding component " + component.getId() + " since "+ "rendered attribute is set to false ");    }    return;  }  context.getApplication().getViewHandler().writeState(context);  ResponseWriter writer=context.getResponseWriter();  buildPost(context,component);  writer.endElement("window");  writer.writeText("\n",null);  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"End encoding component " + component.getId());  }}  }
class C{  public static List<ChildNumber> parsePath(@Nonnull String path){  String[] parsedNodes=path.replace("M","").split("/");  List<ChildNumber> nodes=new ArrayList<ChildNumber>();  for (  String n : parsedNodes) {    n=n.replaceAll(" ","");    if (n.length() == 0)     continue;    boolean isHard=n.endsWith("H");    if (isHard)     n=n.substring(0,n.length() - 1);    int nodeNumber=Integer.parseInt(n);    nodes.add(new ChildNumber(nodeNumber,isHard));  }  return nodes;}  }
class C{  public boolean isMissing(int attIndex){  if (Double.isNaN(m_AttValues[attIndex])) {    return true;  }  return false;}  }
class C{  public static long testTimeArray(double[] list,MyList<Double> array){  long startTime=System.currentTimeMillis();  for (int i=0; i < VALUES; i++) {    array.contains(list[i]);  }  return System.currentTimeMillis() - startTime;}  }
class C{  public FrameworkException(Throwable cause){  super(cause);}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  private View generateHierarchy(Context context){  Resources resources=getResources();  LayoutParams params;  int fivePx=dpToPx(5,resources);  int tenPx=dpToPx(10,resources);  int twentyPx=dpToPx(20,resources);  TableLayout.LayoutParams tableLayoutParams=new TableLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,1f);  tableLayoutParams.setMargins(0,0,fivePx,0);  LinearLayout seekWrapper;  FrameLayout root=new FrameLayout(context);  params=createLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,dpToPx(300,resources));  root.setLayoutParams(params);  FrameLayout container=new FrameLayout(context);  params=createMatchParams();  params.setMargins(0,twentyPx,0,0);  container.setLayoutParams(params);  container.setBackgroundColor(Color.argb(100,0,0,0));  root.addView(container);  mSpringSelectorSpinner=new Spinner(context,Spinner.MODE_DIALOG);  params=createMatchWrapParams();  params.gravity=Gravity.TOP;  params.setMargins(tenPx,tenPx,tenPx,0);  mSpringSelectorSpinner.setLayoutParams(params);  container.addView(mSpringSelectorSpinner);  LinearLayout linearLayout=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(0,0,0,dpToPx(80,resources));  params.gravity=Gravity.BOTTOM;  linearLayout.setLayoutParams(params);  linearLayout.setOrientation(LinearLayout.VERTICAL);  container.addView(linearLayout);  seekWrapper=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(tenPx,tenPx,tenPx,twentyPx);  seekWrapper.setPadding(tenPx,tenPx,tenPx,tenPx);  seekWrapper.setLayoutParams(params);  seekWrapper.setOrientation(LinearLayout.HORIZONTAL);  linearLayout.addView(seekWrapper);  mTensionSeekBar=new SeekBar(context);  mTensionSeekBar.setLayoutParams(tableLayoutParams);  seekWrapper.addView(mTensionSeekBar);  mTensionLabel=new TextView(getContext());  mTensionLabel.setTextColor(mTextColor);  params=createLayoutParams(dpToPx(50,resources),ViewGroup.LayoutParams.MATCH_PARENT);  mTensionLabel.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);  mTensionLabel.setLayoutParams(params);  mTensionLabel.setMaxLines(1);  seekWrapper.addView(mTensionLabel);  seekWrapper=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(tenPx,tenPx,tenPx,twentyPx);  seekWrapper.setPadding(tenPx,tenPx,tenPx,tenPx);  seekWrapper.setLayoutParams(params);  seekWrapper.setOrientation(LinearLayout.HORIZONTAL);  linearLayout.addView(seekWrapper);  mFrictionSeekBar=new SeekBar(context);  mFrictionSeekBar.setLayoutParams(tableLayoutParams);  seekWrapper.addView(mFrictionSeekBar);  mFrictionLabel=new TextView(getContext());  mFrictionLabel.setTextColor(mTextColor);  params=createLayoutParams(dpToPx(50,resources),ViewGroup.LayoutParams.MATCH_PARENT);  mFrictionLabel.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);  mFrictionLabel.setLayoutParams(params);  mFrictionLabel.setMaxLines(1);  seekWrapper.addView(mFrictionLabel);  View nub=new View(context);  params=createLayoutParams(dpToPx(60,resources),dpToPx(40,resources));  params.gravity=Gravity.TOP | Gravity.CENTER;  nub.setLayoutParams(params);  nub.setOnTouchListener(new OnNubTouchListener());  nub.setBackgroundColor(Color.argb(255,0,164,209));  root.addView(nub);  return root;}  }
class C{  private void layoutChildren(){  int offsetX=mPtrIndicator.getCurrentPosY();  int paddingLeft=getPaddingLeft();  int paddingTop=getPaddingTop();  if (mHeaderView != null) {    MarginLayoutParams lp=(MarginLayoutParams)mHeaderView.getLayoutParams();    final int left=paddingLeft + lp.leftMargin;    final int top=paddingTop + lp.topMargin + offsetX - mHeaderHeight;    final int right=left + mHeaderView.getMeasuredWidth();    final int bottom=top + mHeaderView.getMeasuredHeight();    mHeaderView.layout(left,top,right,bottom);    if (DEBUG && DEBUG_LAYOUT) {      PtrCLog.d(LOG_TAG,"onLayout header: %s %s %s %s",left,top,right,bottom);    }  }  if (mContent != null) {    if (isPinContent()) {      offsetX=0;    }    MarginLayoutParams lp=(MarginLayoutParams)mContent.getLayoutParams();    final int left=paddingLeft + lp.leftMargin;    final int top=paddingTop + lp.topMargin + offsetX;    final int right=left + mContent.getMeasuredWidth();    final int bottom=top + mContent.getMeasuredHeight();    if (DEBUG && DEBUG_LAYOUT) {      PtrCLog.d(LOG_TAG,"onLayout content: %s %s %s %s",left,top,right,bottom);    }    mContent.layout(left,top,right,bottom);  }}  }
class C{  private Json(){}  }
class C{  public static boolean isEnableAppRestart(){  return enableAppRestart;}  }
class C{  public void receiveResultcreatePlatformSession(org.oscm.example.client.SessionServiceStub.CreatePlatformSessionResponseE result){}  }
class C{  private Node delete(Node x,Key key){  if (x == null) {    return null;  }  int cmp=key.compareTo(x.key);  if (cmp < 0) {    x.left=delete(x.left,key);  } else   if (cmp > 0) {    x.right=delete(x.right,key);  } else {    if (x.right == null) {      return x.left;    }    if (x.left == null) {      return x.right;    }    Node t=x;    x=min(t.right);    x.right=deleteMin(t.right);    x.left=t.left;  }  x.count=1 + size(x.left) + size(x.right);  return x;}  }
class C{  public static int toInteger(String string) throws NumberFormatException {  try {    return Integer.parseInt(string.replaceAll("[^\\d]",""));  } catch (  NumberFormatException e) {    throw new NumberFormatException(string + " isn't a number!");  }}  }
class C{  public ArrayList<byte[]> encodeBlindedItems(){  ArrayList<byte[]> r=new ArrayList<byte[]>(blindedItems.size());  for (  BigInteger i : blindedItems) {    r.add(i.toByteArray());  }  return r;}  }
class C{  public void removeVolumeFromConsistencyGroup(String instanceId,String cgID) throws StorageCenterAPIException {  RestResult rr=restClient.get(String.format("StorageCenter/ScVolumeConfiguration/%s",instanceId));  if (!checkResults(rr)) {    throw new StorageCenterAPIException(String.format("Error getting volume configuration: %s",rr.getErrorMsg()));  }  ScVolumeConfiguration volConfig=gson.fromJson(rr.getResult(),ScVolumeConfiguration.class);  List<String> profiles=new ArrayList<>();  for (  ScObject profile : volConfig.replayProfileList) {    if (!cgID.equals(profile.instanceId)) {      profiles.add(profile.instanceId);    }  }  Parameters params=new Parameters();  params.add("ReplayProfileList",profiles.toArray(new String[0]));  rr=restClient.put(String.format("StorageCenter/ScVolumeConfiguration/%s",instanceId),params.toJson());  if (!checkResults(rr)) {    throw new StorageCenterAPIException(String.format("Error updating volume replay profile membership: %s",rr.getErrorMsg()));  }}  }
class C{  @Override public void incrementDownstreamRequests(){  requestCounter.incrementAndGet();}  }
class C{  private boolean doZoneExportMasksCreate(ExportGroup exportGroup,List<URI> exportMaskURIs,Collection<URI> volumeURIs,String token,boolean checkZones){  BiosCommandResult result=null;  NetworkFCContext context=new NetworkFCContext();  try {    if (!checkZoningRequired(token,exportGroup.getVirtualArray())) {      return true;    }    volumeURIs=removeDuplicateURIs(volumeURIs);    if (exportMaskURIs == null || exportMaskURIs.isEmpty()) {      WorkflowStepCompleter.stepSucceded(token);      return true;    }    Map<String,List<Zone>> zonesMap=new HashMap<String,List<Zone>>();    if (checkZones) {      zonesMap=getExistingZonesMap(exportMaskURIs,token);    }    List<NetworkFCZoneInfo> zones=_networkScheduler.getZoningTargetsForExportMasks(exportGroup,exportMaskURIs,volumeURIs,zonesMap,checkZones,_dbClient);    context.getZoneInfos().addAll(zones);    logZones(zones);    if (!checkZones) {      if (!context.getZoneInfos().isEmpty()) {        String[] newOrExisting=new String[1];        for (        NetworkFCZoneInfo zoneInfo : context.getZoneInfos()) {          addZoneReference(exportGroup.getId(),zoneInfo,newOrExisting);        }      }      result=BiosCommandResult.createSuccessfulResult();    } else {      result=addRemoveZones(exportGroup.getId(),context.getZoneInfos(),false);    }    WorkflowService.getInstance().storeStepData(token,context);    completeWorkflowState(token,"zoneExportMaskCreate",result);  } catch (  Exception ex) {    _log.error("Exception zoning Export Masks",ex);    WorkflowService.getInstance().storeStepData(token,context);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneExportGroupCreateFailed(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(token,svcError);  }  return (result != null && result.isCommandSuccess());}  }
class C{  private void processVolumeCapacity(CloseableIterator<CIMInstance> volumeInstances,Map<String,Object> keyMap){  while (volumeInstances.hasNext()) {    try {      final CIMInstance volumeInstance=(CIMInstance)volumeInstances.next();      String key=null;      String spaceConsumed=null;      if (keyMap.containsKey(Constants.IS_NEW_SMIS_PROVIDER) && Boolean.valueOf(keyMap.get(Constants.IS_NEW_SMIS_PROVIDER).toString())) {        key=createKeyfor8x(volumeInstance);        spaceConsumed=volumeInstance.getProperty(_emcspaceConsumed).getValue().toString();      } else {        key=createKeyfromProps(volumeInstance);        spaceConsumed=volumeInstance.getProperty(_spaceConsumed).getValue().toString();      }      Object value=getMetrics(keyMap,key);      if (null == value) {        keyMap.put(key,Long.parseLong(spaceConsumed));      } else       if (value instanceof Stat) {        Stat metrics=(Stat)value;        metrics.setProvisionedCapacity(returnProvisionedCapacity(volumeInstance,keyMap));        metrics.setAllocatedCapacity(Long.parseLong(spaceConsumed));      }    } catch (    Exception ex) {      if (!(ex instanceof BaseCollectionException)) {        _logger.error("Provisioned Capacity failure : ",ex);      }    }  }}  }
class C{  public IXMLElement createElement(String fullName,String namespace){  return new XMLElement(fullName,namespace);}  }
class C{  public void unbind(){  try {    context.unbindService(serviceConnection);  } catch (  IllegalArgumentException e) {  }  setTrackRecordingService(null);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tclass name of base learner to use for \taccuracy estimation.\n" + "\tPlace any classifier options LAST on the command line\n" + "\tfollowing a \"--\". eg.:\n"+ "\t\t-B weka.classifiers.bayes.NaiveBayes ... -- -K\n"+ "\t(default: weka.classifiers.rules.ZeroR)","B",1,"-B <base learner>"));  newVector.addElement(new Option("\tnumber of cross validation folds to use for estimating accuracy.\n" + "\t(default=5)","F",1,"-F <num>"));  newVector.addElement(new Option("\tSeed for cross validation accuracy testimation.\n" + "\t(default = 1)","R",1,"-R <seed>"));  newVector.addElement(new Option("\tthreshold by which to execute another cross validation\n" + "\t(standard deviation---expressed as a percentage of the mean).\n" + "\t(default: 0.01 (1%))","T",1,"-T <num>"));  newVector.addElement(new Option("\tPerformance evaluation measure to use for selecting attributes.\n" + "\t(Default = accuracy for discrete class and rmse for numeric class)","E",1,"-E <acc | rmse | mae | f-meas | auc | auprc>"));  newVector.addElement(new Option("\tOptional class value (label or 1-based index) to use in conjunction with\n" + "\tIR statistics (f-meas, auc or auprc). Omitting this option will use\n" + "\tthe class-weighted average.","IRclass",1,"-IRclass <label | index>"));  if ((m_BaseClassifier != null) && (m_BaseClassifier instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to scheme " + m_BaseClassifier.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_BaseClassifier).listOptions()));  }  return newVector.elements();}  }
class C{  public void missingPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  XMLUtil.errorMissingPCData(systemID,lineNr,parentElementName);}  }
class C{  private void fixCtrlH(){  InputMap inputMap=getInputMap();  KeyStroke char010=KeyStroke.getKeyStroke("typed \010");  InputMap parent=inputMap;  while (parent != null) {    parent.remove(char010);    parent=parent.getParent();  }  KeyStroke backspace=KeyStroke.getKeyStroke("BACK_SPACE");  inputMap.put(backspace,DefaultEditorKit.deletePrevCharAction);}  }
class C{  public static CastExpression cast(Expression expression,String typeName){  return new CastExpression(expression,typeName);}  }
class C{  public static boolean isHigherVisibility(int newVisibility,int oldVisibility){  assertVisibility(oldVisibility);  assertVisibility(newVisibility);switch (oldVisibility) {case Modifier.PRIVATE:    return newVisibility == Modifier.NONE || newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.NONE:  return newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.PROTECTED:return newVisibility == Modifier.PUBLIC;case Modifier.PUBLIC:return false;default :Assert.isTrue(false);return false;}}  }
class C{  public void close(){  player.close();}  }
class C{  private static String mergeRealPathes(Mapping mapping,String parentRealPath,String newRealPath,RefBoolean isOutSide){  parentRealPath=pathRemoveLast(parentRealPath,isOutSide);  while (newRealPath.startsWith("../")) {    parentRealPath=pathRemoveLast(parentRealPath,isOutSide);    newRealPath=newRealPath.substring(3);  }  String path=parentRealPath.concat("/").concat(newRealPath);  if (path.startsWith("../")) {    int count=0;    do {      count++;      path=path.substring(3);    } while (path.startsWith("../"));    String strRoot=mapping.getPhysical().getAbsolutePath().replace('\\','/');    if (!StringUtil.endsWith(strRoot,'/')) {      strRoot+='/';    }    int rootLen=strRoot.length();    String[] arr=ListUtil.toStringArray(ListUtil.listToArray(path,'/'),"");    int tmpLen;    for (int i=count; i > 0; i--) {      if (arr.length > i) {        String tmp='/' + list(arr,0,i);        tmpLen=rootLen - tmp.length();        if (strRoot.lastIndexOf(tmp) == tmpLen && tmpLen >= 0) {          StringBuffer rtn=new StringBuffer();          while (i < count - i) {            count--;            rtn.append("../");          }          isOutSide.setValue(rtn.length() != 0);          return (rtn.length() == 0 ? "/" : rtn.toString()) + list(arr,i,arr.length);        }      }    }  }  return parentRealPath.concat("/").concat(newRealPath);}  }
class C{  public static void addMod(EMod mod,IBuildCraftMod actual){  mods.put(mod,actual);}  }
class C{  public void add(String[] titles,double[] values){  add(mCategories.size() + "",titles,values);}  }
class C{  public Boolean isTargetChapSettable(){  return targetChapSettable;}  }
class C{  public static void createHyperlink(StringBuilder buffer,PsiElement refElement,String refText,String label,boolean plainLink){  getInstance().createHyperlinkImpl(buffer,refElement,refText,label,plainLink);}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public boolean createThinImagePair(String snapshotGroupObjId,String hostObjId,String sourNativeId,String snapNativeId,String thinImagePoolId,String model) throws Exception {  log.info("Thin Image pair creation started");  boolean status=false;  InputStream responseStream=null;  String syncTaskMessageId=null;  try {    log.info("snapshotGroupObjId {} ",snapshotGroupObjId);    Map<String,Object> attributeMap=new HashMap<String,Object>();    Add addOp=new Add(HDSConstants.REPLICATION);    addOp.setOption(HDSConstants.INBAND2);    HDSHost host=new HDSHost();    host.setObjectID(hostObjId);    SnapshotGroup snapshotGroup=new SnapshotGroup();    snapshotGroup.setObjectID(snapshotGroupObjId);    snapshotGroup.setReplicationFunction(HDSConstants.THIN_IMAGE);    ReplicationInfo replicationInfo=new ReplicationInfo();    replicationInfo.setPvolDevNum(sourNativeId);    replicationInfo.setSvolDevNum(snapNativeId);    replicationInfo.setPvolPoolID(thinImagePoolId);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.MODEL,model);    attributeMap.put(HDSConstants.HOST,host);    attributeMap.put(HDSConstants.SNAPSHOTGROUP,snapshotGroup);    attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);    String createThinImagePairInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.CREATE_THIN_IMAGE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to create thin image pair : {}",createThinImagePairInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,createThinImagePairInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_THINIMAGE_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.COMPLETED_STR.equalsIgnoreCase(command.getStatus())) {        log.info("ThinImage Pair has been created successfully");        status=true;        SnapshotGroup snapshotGrpResponse=result.getBean(SnapshotGroup.class);        if (null == snapshotGrpResponse) {          throw HDSException.exceptions.notAbleToCreateThinImagePair();        }      } else       if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        syncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Thin Image pair creation failed status messageID: {}",command.getMessageID());        log.error("Thin Image pair creation failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateThinImagePairError(error.getCode(),error.getDescription());      }    } else {      log.error("Thin Image pair creation failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Thin Image pair creation failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while close Thin Image Pair creation response stream");      }    }  }  log.info("Thin Image pair creation completed");  return status;}  }
class C{  public Proposal(String replacementString,int replacementOffset,int replacementLength,int cursorPosition,Images image,String displayString){  Assert.isNotNull(replacementString);  Assert.isTrue(replacementOffset >= 0);  Assert.isTrue(replacementLength >= 0);  Assert.isTrue(cursorPosition >= 0);  fReplacementString=replacementString;  fReplacementOffset=replacementOffset;  fReplacementLength=replacementLength;  fCursorPosition=cursorPosition;  fImage=image;  fDisplayString=displayString;}  }
class C{  private int indexToReplace(String appName){  int index=0;  for (int i=0; i < usages.size(); i++) {    if (usages.get(i).getAppName().equals(appName)) {      index=i;    }  }  return index;}  }
class C{  public MutableLocation toMutableLocation(){  return new MutableLocation(x,y,z,w);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public Vertex parsePushByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex equation=network.createTemporyVertex();  equation.addRelationship(Primitive.INSTANTIATION,Primitive.PUSH);  long id=dataStream.readLong();  if (id == 0) {    return equation;  }  Vertex element=network.findById(id);  if (element != null) {    equation.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);  }  return equation;}  }
class C{  @Override public void clearLog(SolrCore core,PluginInfo ulogPluginInfo){  if (ulogPluginInfo == null)   return;  Path tlogDir=new Path(getTlogDir(core,ulogPluginInfo));  try {    if (fs != null && fs.exists(tlogDir)) {      String[] files=getLogList(tlogDir);      for (      String file : files) {        Path f=new Path(tlogDir,file);        boolean s=fs.delete(f,false);        if (!s) {          log.error("Could not remove tlog file:" + f);        }      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void generateList(){  if (Variable.getVariable().getLocalMaps().isEmpty()) {    refreshList();  } else {    mapAdapter.addAll(Variable.getVariable().getLocalMaps());  }}  }
class C{  private void reset(){  serialInterface.ifPresent(null);  serialInterface=Optional.empty();  cancelRead();  cancelWrite();}  }
class C{  public static char[] toCharArray(byte[] barr,String charset) throws UnsupportedEncodingException {  return new String(barr,charset).toCharArray();}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  public CGraphWindowHotkeyTable(){  super(new CGraphWindowHotkeyTableModel());  setShowVerticalLines(false);  getColumnModel().setColumnMargin(0);  setEnabled(false);}  }
class C{  public X509Extensions generate(){  return new X509Extensions(extOrdering,extensions);}  }
class C{  public void incHarvestedForItem(String name,int quantity){  itemCounter.incHarvestedForItem(name,quantity);}  }
class C{  public void putLineHeightRelative(int i,boolean b){  if (b)   masks[i]|=LINE_HEIGHT_RELATIVE_MASK; else   masks[i]&=~LINE_HEIGHT_RELATIVE_MASK;}  }
class C{  private void copyAndCacheBitmapDuringRendering(int frameNumber,Bitmap sourceBitmap){  CloseableReference<Bitmap> destBitmapReference=obtainBitmapInternal();  try {    Canvas copyCanvas=new Canvas(destBitmapReference.get());    copyCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.SRC);    copyCanvas.drawBitmap(sourceBitmap,0,0,null);    maybeCacheRenderedBitmap(frameNumber,destBitmapReference);  }  finally {    destBitmapReference.close();  }}  }
class C{  @MediumTest public void testNoSelectableItems() throws Exception {  MockContext context=new MockContext2();  ListView listView=new ListView(context);  listView.addHeaderView(new View(context),null,false);  List<String> items=Lists.newArrayList("hello");  Adapter<String> adapter=new Adapter<String>(context,0,items);  listView.setAdapter(adapter);  listView.setSelection(1);  int measureSpec=View.MeasureSpec.makeMeasureSpec(100,View.MeasureSpec.EXACTLY);  adapter.notifyDataSetChanged();  listView.measure(measureSpec,measureSpec);  listView.layout(0,0,100,100);  items.remove(0);  adapter.notifyDataSetChanged();  listView.measure(measureSpec,measureSpec);  listView.layout(0,0,100,100);}  }
class C{  @Override public String toString(){  if (points == null || points.length() == 0) {    return idx + "";  }  StringBuffer bf=new StringBuffer();  try {    bf.append(idx + " p: ");    ListNode temp;    for (int i=0; i < points.size(); i++) {      temp=points.get(i);      if (i == 0) {        bf.append("" + temp.idx);      } else {        bf.append(", " + temp.idx);      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }  return bf.toString();}  }
class C{  public void associateWorkItems(final WorkItemCheckinInfo[] workItemInfos){  boolean added=false;  for (  final WorkItemCheckinInfo info : workItemInfos) {    associatedWorkItems.put(info.getWorkItem().getID(),info);    added=true;  }  if (added) {    fireAssociatedWorkItemsChangedEvent();    updateLastSavedCheckin();  }}  }
class C{  public IRIValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  public void removeModifyListener(final ModifyListener listener){  Check.notNull(listener,"listener");  modifyListeners.removeListener(listener);}  }
class C{  private Usage createTextUsage(Context context){  if (textUsage != null) {    return textUsage;  }  TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){  };  List<Usage> initTextIO=JsonUtils.parseJsonFile(context,"text_io.json",token);  textUsage=initTextIO.get(0);  return textUsage;}  }
class C{  protected synchronized void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<?> it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public boolean canDraw(Gas gas){  if (stored == null || (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  public TreeMap(Comparator c){  this.comparator=c;}  }
class C{  protected boolean shouldRenderPeerImage(){  return false;}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleSet.getModules().isEmpty()) {    throw new BuildException("You must specify a <module> or <moduleset>");  }}  }
class C{  public static ItemBuilder start(final Material material){  return new ItemBuilder(material);}  }
class C{  public boolean catchesEqual(BasicBlock block1,BasicBlock block2){  TypeList catches1=block1.getExceptionHandlerTypes();  TypeList catches2=block2.getExceptionHandlerTypes();  if (!StdTypeList.equalContents(catches1,catches2)) {    return false;  }  IntList succ1=block1.getSuccessors();  IntList succ2=block2.getSuccessors();  int size=succ1.size();  int primary1=block1.getPrimarySuccessor();  int primary2=block2.getPrimarySuccessor();  if (((primary1 == -1) || (primary2 == -1)) && (primary1 != primary2)) {    return false;  }  for (int i=0; i < size; i++) {    int label1=succ1.get(i);    int label2=succ2.get(i);    if (label1 == primary1) {      if (label2 != primary2) {        return false;      }      continue;    }    if (label1 != label2) {      return false;    }  }  return true;}  }
class C{  void sccp_eval(Method m,Expr e,Map<Expr,Object> values,Map<Expr,Typeref> types,Set<Edge> flowWork,Set<Expr> ssaWork,EdgeMap<Expr> uses){  Object v=null;  Typeref tref=null;  if (e.op == OP_phi) {    for (    Expr a : e.args) {      Object av=values.get(a);      if (av == null)       continue;      if (v == null)       v=av; else       if (!av.equals(v))       v=BOTTOM;      Typeref aref=types.get(a);      if (tref == null)       tref=aref; else       if (!tref.equals(aref))       tref=mdb(tref,aref);    }  } else {    for (    Expr a : e.args)     if (!values.containsKey(a))     return;    for (    Expr a : e.scopes)     if (!values.containsKey(a))     return;    for (    Expr a : e.locals)     if (!values.containsKey(a))     return;    v=BOTTOM;    tref=ANY().ref;switch (e.op) {default :      System.err.println("unhandled op:" + e.op + ":"+ opNames[e.op]);    assert (false);case OP_hasnext2_o:case OP_nextname:case OP_nextvalue:case OP_call:case OP_callsuper:case OP_getsuper:case OP_getdescendants:  break;case OP_convert_o:{  tref=types.get(e.args[0]).nonnull();  v=values.get(e.args[0]);  break;}case OP_esc_xattr:case OP_esc_xelem:tref=STRING().ref.nonnull();break;case OP_newcatch:tref=m.handlers[e.imm[0]].activation;break;case OP_newobject:tref=OBJECT().ref.nonnull();break;case OP_newarray:tref=ARRAY().ref.nonnull();break;case OP_newactivation:tref=m.activation;break;case OP_getglobalscope:if (m.cx.scopes.length > 0) {tref=m.cx.scopes[0];} else {v=values.get(e.scopes[0].args[0]);tref=types.get(e.scopes[0].args[0]);}break;case OP_getscopeobject:v=values.get(e.scopes[0].args[0]);tref=types.get(e.scopes[0].args[0]);if (tref == null) {tref=ANY().ref;}break;case OP_newclass:tref=e.c.ref.nonnull();break;case OP_newfunction:tref=FUNCTION().ref.nonnull();break;case OP_finddef:if (TypeCache.instance().globals.contains(e.ref)) tref=TypeCache.instance().globals.get(e.ref);break;case OP_findpropstrict:case OP_findproperty:{int i=findInner(e.ref,e.scopes,types);if (i >= 0) {v=values.get(e.scopes[i]);tref=types.get(e.scopes[i]);} else if ((i=findOuter(e.ref,m.cx.scopes)) >= 0) {tref=m.cx.scopes[i];} else if (TypeCache.instance().globals.contains(e.ref)) {tref=TypeCache.instance().globals.get(e.ref);} else {if (m.cx.scopes.length > 0) {tref=m.cx.scopes[0];} else {v=values.get(e.scopes[0]);tref=types.get(e.scopes[0]);}}break;}case OP_getlex:{int i=findInner(e.ref,e.scopes,types);Typeref stref=i >= 0 ? types.get(e.scopes[i]) : (i=findOuter(e.ref,m.cx.scopes)) >= 0 ? m.cx.scopes[i] : TypeCache.instance().globals.contains(e.ref) ? TypeCache.instance().globals.get(e.ref) : m.cx.scopes.length > 0 ? m.cx.scopes[0] : types.get(e.scopes[0]);Binding b=stref.t.findGet(e.ref);if (isSlot(b)) {tref=b.type;if (isConst(b) && b.defaultValueChanged()) v=b.value;} else if (isMethod(b)) {tref=FUNCTION().ref.nonnull();} else if (isGetter(b)) {tref=b.method.returns;}break;}case OP_construct:{tref=OBJECT().ref.nonnull();break;}case OP_constructprop:{Type ot=type(types,e.args[0]);Binding b=ot.findGet(e.ref);if (b != null && b.type != null && b.type.t.itype != null) {tref=b.type.t.itype.ref.nonnull();break;}break;}case OP_callproperty:case OP_callproplex:{Type ot=type(types,e.args[0]);Binding b=ot.findGet(e.ref);if (isMethod(b)) {tref=b.method.returns;} else if (isSlot(b) && b.type != null) {if (b.type.t.itype == INT()) {tref=INT().ref;if (e.args.length > 1) v=eval_convert_i(values.get(e.args[1]));} else if (b.type.t.itype == UINT()) {tref=UINT().ref;if (e.args.length > 1) v=eval_convert_u(values.get(e.args[1]));} else if (b.type.t.itype == STRING()) {tref=STRING().ref.nonnull();if (e.args.length > 1) v=eval_convert_s(values.get(e.args[1]));} else if (b.type.t.itype == BOOLEAN()) {tref=BOOLEAN().ref;if (e.args.length > 1) v=eval_convert_b(values.get(e.args[1]));} else if (b.type.t.itype == NUMBER()) {tref=NUMBER().ref;if (e.args.length > 1) v=eval_convert_d(values.get(e.args[1]));}}break;}case OP_applytype:tref=types.get(e.args[0]).nonnull();break;case OP_callstatic:tref=e.m.returns;break;case OP_arg:if (e.imm[0] < m.getParams().length) tref=m.getParams()[e.imm[0]]; else if (m.needsArguments() || m.needsRest() && e.imm[0] == m.getParams().length) tref=ARRAY().ref.nonnull(); else tref=VOID().ref;break;case OP_xarg:tref=m.handlers[e.imm[0]].type;break;case OP_getslot:{Type t0=type(types,e.args[0]);Binding b=t0.findSlot(e.imm[0]);if (b != null) tref=b.type;break;}case OP_getproperty:{Type t0=type(types,e.args[0]);Binding b=t0.findGet(e.ref);if (isSlot(b)) {tref=b.type;if (isConst(b) && b.defaultValueChanged()) v=b.value;} else if (isMethod(b)) {tref=FUNCTION().ref.nonnull();} else if (isGetter(b)) {tref=b.method.returns;}break;}case OP_pushundefined:v=e.value;tref=VOID().ref;break;case OP_pushnull:v=e.value;tref=NULL().ref;break;case OP_pushtrue:case OP_pushfalse:v=e.value;tref=BOOLEAN().ref;break;case OP_pushbyte:case OP_pushshort:case OP_pushint:v=e.value;tref=INT().ref;break;case OP_pushuint:v=e.value;tref=UINT().ref;break;case OP_pushstring:v=e.value;tref=STRING().ref.nonnull();break;case OP_pushnan:case OP_pushdouble:v=e.value;tref=NUMBER().ref;break;case OP_pushnamespace:v=e.value;tref=NAMESPACE().ref.nonnull();break;case OP_jump:flowWork.add(e.succ[0]);return;case OP_lookupswitch:{Object v1=values.get(e.args[0]);if (v1 == BOTTOM) for (Edge s : e.succ) flowWork.add(s); else {int i=intValue(v1);if (i < 0 || i >= e.succ.length - 1) i=e.succ.length - 1;flowWork.add(e.succ[i]);}return;}case OP_iffalse:case OP_iftrue:{Object v1=values.get(e.args[0]);if (v1 == BOTTOM) {flowWork.add(e.succ[0]);flowWork.add(e.succ[1]);} else if (e.op == OP_iffalse) flowWork.add(e.succ[booleanValue(v1) ? 0 : 1]); else if (e.op == OP_iftrue) flowWork.add(e.succ[booleanValue(v1) ? 1 : 0]);return;}case OP_pushscope:case OP_pushwith:v=values.get(e.args[0]);tref=types.get(e.args[0]).nonnull();break;case OP_convert_b:tref=BOOLEAN().ref;v=eval_convert_b(values.get(e.args[0]));break;case OP_not:{tref=BOOLEAN().ref;Object v0=values.get(e.args[0]);if (v0 != BOTTOM) v=booleanValue(v0) ? FALSE : TRUE;break;}case OP_deleteproperty:case OP_deldescendants:case OP_hasnext:case OP_hasnext2:case OP_equals:case OP_strictequals:case OP_in:case OP_istype:case OP_istypelate:case OP_instanceof:tref=BOOLEAN().ref;break;case OP_lessthan:case OP_lessequals:case OP_greaterthan:case OP_greaterequals:{tref=BOOLEAN().ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0.equals(NAN) || v0 == UNDEFINED || v1.equals(NAN) || v1 == UNDEFINED) v=FALSE; else if (v0 != BOTTOM && v1 != BOTTOM) v=e.op == OP_lessthan ? lessthan(v0,v1) : e.op == OP_lessequals ? !lessthan(v1,v0) : e.op == OP_greaterthan ? lessthan(v1,v0) : !lessthan(v0,v1);break;}case OP_convert_s:tref=STRING().ref.nonnull();v=eval_convert_s(values.get(e.args[0]));break;case OP_coerce_s:{tref=eval_coerce_s(types.get(e.args[0]));v=eval_coerce_s(values.get(e.args[0]));break;}case OP_coerce_o:{Typeref t0=types.get(e.args[0]);tref=eval_coerce_o(t0);v=eval_coerce_o(values.get(e.args[0]),t0.t);break;}case OP_coerce_a:{if (!(types.get(e.args[0]).equals(VOID().ref))) {v=values.get(e.args[0]);tref=types.get(e.args[0]);} else {tref=ANY().ref;}break;}case OP_coerce:{Typeref t0=types.get(e.args[0]);Object v0=values.get(e.args[0]);Type t=TypeCache.instance().namedTypes.get(e.ref);assert (t != null);if (t == STRING()) {tref=eval_coerce_s(t0);v=eval_coerce_s(v0);} else if (t == OBJECT()) {tref=eval_coerce_o(t0);v=eval_coerce_o(v0,t0.t);} else if (t == INT()) {tref=t.ref;v=eval_convert_i(v0);} else if (t == UINT()) {tref=t.ref;v=eval_convert_u(v0);} else if (t == NUMBER()) {tref=t.ref;v=eval_convert_d(v0);} else if (t == BOOLEAN()) {tref=t.ref;v=eval_convert_b(v0);} else {if (t0.t.extendsOrIsBase(t)) {tref=t0;v=v0;} else if (t0.t == NULL() || t0.t == VOID()) {tref=NULL().ref;} else {tref=t.ref;}}break;}case OP_astype:tref=TypeCache.instance().namedTypes.get(e.ref).ref;break;case OP_astypelate:{Typeref t1=types.get(e.args[1]);if (t1.t.itype != null) {if (t1.t.itype.atom || t1.t.itype.numeric) tref=OBJECT().ref; else tref=t1.t.itype.ref;} else {tref=ANY().ref;}break;}case OP_typeof:{Type t0=type(types,e.args[0]);if (t0 == INT() || t0 == UINT() || t0 == NUMBER()) v="number"; else if (t0 == STRING()) v="string"; else if (t0.extendsOrIsBase(XML()) || t0.extendsOrIsBase(XMLLIST())) v="xml"; else if (t0 == VOID()) v="undefined"; else if (t0 == BOOLEAN()) v="boolean"; else if (t0.extendsOrIsBase(FUNCTION())) v="function"; else if (t0 != OBJECT() && t0.extendsOrIsBase(OBJECT())) v="object";tref=STRING().ref.nonnull();break;}case OP_add:{Expr a0=e.args[0];Expr a1=e.args[1];Typeref t0=types.get(a0);Typeref t1=types.get(a1);Object v0=values.get(a0);Object v1=values.get(a1);if (t0.t == STRING() && !t0.nullable || t1.t == STRING() && !t1.nullable) {tref=STRING().ref.nonnull();if (v0 != BOTTOM && v1 != BOTTOM) v=stringValue(v0) + stringValue(v1);} else if (t0.t.numeric && t1.t.numeric) {tref=NUMBER().ref;if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) + doubleValue(v1);} else {tref=OBJECT().ref.nonnull();}break;}case OP_divide:{tref=NUMBER().ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) / doubleValue(v1);break;}case OP_subtract:case OP_multiply:case OP_modulo:case OP_negate:case OP_increment:case OP_decrement:tref=NUMBER().ref;break;case OP_convert_d:tref=NUMBER().ref;v=eval_convert_d(values.get(e.args[0]));break;case OP_convert_i:tref=INT().ref;v=eval_convert_i(values.get(e.args[0]));break;case OP_convert_u:tref=UINT().ref;v=eval_convert_u(values.get(e.args[0]));break;case OP_bitor:{tref=INT().ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) v=intValue(v0) | intValue(v1);break;}case OP_bitand:{tref=INT().ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) {v=intValue(v0) & intValue(v1);}break;}case OP_bitnot:case OP_add_i:case OP_subtract_i:case OP_multiply_i:case OP_negate_i:case OP_bitxor:case OP_lshift:case OP_rshift:case OP_hasnext2_i:case OP_increment_i:case OP_decrement_i:tref=INT().ref;break;case OP_urshift:tref=UINT().ref;break;case OP_setslot:case OP_setproperty:case OP_setsuper:case OP_initproperty:case OP_callpropvoid:case OP_constructsuper:case OP_callsupervoid:case OP_returnvoid:case OP_returnvalue:case OP_throw:case OP_popscope:case OP_debug:case OP_debugline:case OP_debugfile:case OP_bkpt:case OP_bkptline:case OP_checkfilter:return;}}assert (tref != null && tref.t != null);if (tref.t == VOID()) v=UNDEFINED; else if (tref.t == NULL()) v=NULL();if (v != null && !v.equals(values.get(e))) {values.put(e,v);ssaWork.addAll(uses.get(e));}if (!tref.equals(types.get(e))) {types.put(e,tref);ssaWork.addAll(uses.get(e));}}  }
class C{  @VisibleForTesting void writeDistance(double distance,StringBuilder builder,int resId,String lineBreak){  double distanceInKm=distance * UnitConversions.M_TO_KM;  double distanceInMi=distanceInKm * UnitConversions.KM_TO_MI;  builder.append(context.getString(resId,distanceInKm,distanceInMi));  builder.append(lineBreak);}  }
class C{  protected BasePeriod(ReadableInstant startInstant,ReadableInstant endInstant,PeriodType type){  super();  type=checkPeriodType(type);  if (startInstant == null && endInstant == null) {    iType=type;    iValues=new int[size()];  } else {    long startMillis=DateTimeUtils.getInstantMillis(startInstant);    long endMillis=DateTimeUtils.getInstantMillis(endInstant);    Chronology chrono=DateTimeUtils.getIntervalChronology(startInstant,endInstant);    iType=type;    iValues=chrono.get(this,startMillis,endMillis);  }}  }
class C{  protected void canopyInit(Instances data) throws Exception {  if (m_canopyClusters == null) {    m_canopyClusters=new Canopy();    m_canopyClusters.setNumClusters(m_NumClusters);    m_canopyClusters.setSeed(getSeed());    m_canopyClusters.setT2(getCanopyT2());    m_canopyClusters.setT1(getCanopyT1());    m_canopyClusters.setMaxNumCandidateCanopiesToHoldInMemory(getCanopyMaxNumCanopiesToHoldInMemory());    m_canopyClusters.setPeriodicPruningRate(getCanopyPeriodicPruningRate());    m_canopyClusters.setMinimumCanopyDensity(getCanopyMinimumCanopyDensity());    m_canopyClusters.setDebug(getDebug());    m_canopyClusters.buildClusterer(data);  }  m_ClusterCentroids=m_canopyClusters.getCanopies();}  }
class C{  public static boolean knowsDefinitionForVariableOf(BytecodeInstruction du){  if (!du.isDefUse())   throw new IllegalArgumentException("defuse expected");  String className=du.getClassName();  String methodName=du.getMethodName();  String varName=du.getVariableName();  try {    return defMap.get(className).get(methodName).get(varName).size() > 0;  } catch (  NullPointerException nex) {    return false;  }}  }
class C{  public WaveFileWriter(){  super(new AudioFileFormat.Type[]{AudioFileFormat.Type.WAVE});}  }
class C{  static StepPattern loadSteps(MatchPatternIterator mpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  if (DEBUG_PATTERN_CREATION) {    System.out.println("================");    System.out.println("loadSteps for: " + compiler.getPatternString());  }  int stepType;  StepPattern step=null;  StepPattern firstStep=null, prevStep=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    step=createDefaultStepPattern(compiler,stepOpCodePos,mpi,analysis,firstStep,prevStep);    if (null == firstStep) {      firstStep=step;    } else {      step.setRelativePathPattern(prevStep);    }    prevStep=step;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  int axis=Axis.SELF;  int paxis=Axis.SELF;  StepPattern tail=step;  for (StepPattern pat=step; null != pat; pat=pat.getRelativePathPattern()) {    int nextAxis=pat.getAxis();    pat.setAxis(axis);    int whatToShow=pat.getWhatToShow();    if (whatToShow == DTMFilter.SHOW_ATTRIBUTE || whatToShow == DTMFilter.SHOW_NAMESPACE) {      int newAxis=(whatToShow == DTMFilter.SHOW_ATTRIBUTE) ? Axis.ATTRIBUTE : Axis.NAMESPACE;      if (isDownwardAxisOfMany(axis)) {        StepPattern attrPat=new StepPattern(whatToShow,pat.getNamespace(),pat.getLocalName(),newAxis,0);        XNumber score=pat.getStaticScore();        pat.setNamespace(null);        pat.setLocalName(NodeTest.WILD);        attrPat.setPredicates(pat.getPredicates());        pat.setPredicates(null);        pat.setWhatToShow(DTMFilter.SHOW_ELEMENT);        StepPattern rel=pat.getRelativePathPattern();        pat.setRelativePathPattern(attrPat);        attrPat.setRelativePathPattern(rel);        attrPat.setStaticScore(score);        if (Axis.PRECEDING == pat.getAxis())         pat.setAxis(Axis.PRECEDINGANDANCESTOR); else         if (Axis.DESCENDANT == pat.getAxis())         pat.setAxis(Axis.DESCENDANTORSELF);        pat=attrPat;      } else       if (Axis.CHILD == pat.getAxis()) {        pat.setAxis(Axis.ATTRIBUTE);      }    }    axis=nextAxis;    tail=pat;  }  if (axis < Axis.ALL) {    StepPattern selfPattern=new ContextMatchStepPattern(axis,paxis);    XNumber score=tail.getStaticScore();    tail.setRelativePathPattern(selfPattern);    tail.setStaticScore(score);    selfPattern.setStaticScore(score);  }  if (DEBUG_PATTERN_CREATION) {    System.out.println("Done loading steps: " + step.toString());    System.out.println("");  }  return step;}  }
class C{  public static void createClientCache(String host,Integer port2) throws Exception {  int PORT2=port2.intValue();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new OperationsPropagationDUnitTest().createCache(props);  props.setProperty("retryAttempts","2");  props.setProperty("endpoints","ep1=" + host + ":"+ PORT2);  props.setProperty("redundancyLevel","-1");  props.setProperty("establishCallbackConnection","true");  props.setProperty("LBPolicy","Sticky");  props.setProperty("readTimeout","2000");  props.setProperty("socketBufferSize","1000");  props.setProperty("retryInterval","250");  props.setProperty("connectionsPerServer","2");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  ClientServerTestCase.configureConnectionPool(factory,host,PORT2,-1,true,-1,2,null);  RegionAttributes attrs=factory.create();  region=cache.createRegion(REGION_NAME,attrs);  assertNotNull(region);  region.registerInterest("ALL_KEYS");}  }
class C{  public MemoryTarget(final LogTarget target,final int size,final Priority threshold){  m_target=target;  m_buffer=new LogEvent[size];  m_threshold=threshold;  open();}  }
class C{  public String normalizeUri(String uri,boolean isWindows) throws IOException {  CharBuffer cb=new CharBuffer();  int len=uri.length();  if (_maxURILength < len)   throw new BadRequestException(L.l("The request contains an illegal URL because it is too long."));  char ch;  if (len == 0 || (ch=uri.charAt(0)) != '/' && ch != '\\')   cb.append('/');  for (int i=0; i < len; i++) {    ch=uri.charAt(i);    if (ch == '/' || ch == '\\') {      dots:       while (i + 1 < len) {        ch=uri.charAt(i + 1);        if (ch == '/' || ch == '\\')         i++; else         if (ch != '.')         break dots; else         if (len <= i + 2 || (ch=uri.charAt(i + 2)) == '/' || ch == '\\') {          i+=2;        } else         if (ch != '.')         break dots; else         if (len <= i + 3 || (ch=uri.charAt(i + 3)) == '/' || ch == '\\') {          int j;          for (j=cb.length() - 1; j >= 0; j--) {            if ((ch=cb.charAt(j)) == '/' || ch == '\\')             break;          }          if (j > 0)           cb.length(j); else           cb.length(0);          i+=3;        } else {          throw new BadRequestException(L.l("The request contains an illegal URL."));        }      }      while (isWindows && cb.length() > 0 && ((ch=cb.lastChar()) == '.' || ch == ' ')) {        cb.length(cb.length() - 1);        if (cb.length() > 0 && (ch=cb.lastChar()) == '/' || ch == '\\') {          cb.length(cb.length() - 1);          continue;        }      }      cb.append('/');    } else     if (ch == 0)     throw new BadRequestException(L.l("The request contains an illegal URL.")); else     cb.append(ch);  }  while (isWindows && cb.length() > 0 && ((ch=cb.lastChar()) == '.' || ch == ' ')) {    cb.length(cb.length() - 1);  }  return cb.toString();}  }
class C{  private static void checkTrust(double priority) throws IllegalArgumentException {  if (priority < MIN_TRUST || priority > MAX_PRIORITY_VALUE) {    throw new IllegalArgumentException("Priority " + priority + " is outside valid range of ["+ MIN_TRUST+ ","+ MAX_PRIORITY_VALUE+ "]");  }}  }
class C{  public <T extends Pipeline<?>>T apply(T stream){  stream.prev=Optional.of(this);  return stream;}  }
class C{  public void close() throws SQLException {  if (pooledConnection != null) {    lock.lock();    try {      if (protocol != null && protocol.inTransaction()) {        rollback();      }    }  finally {      lock.unlock();    }    pooledConnection.fireConnectionClosed();    return;  }  protocol.closeExplicit();}  }
class C{  public static long sum(long[] array){  long sum=0;  for (  long x : array) {    sum+=x;  }  return sum;}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.max(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.max(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.max(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  boolean isEmpty(){  return perms.isEmpty();}  }
class C{  public static Object unserialize(Data data){  try {    Class clazz=(Class)Class.forName((String)data.get("class"));    if (clazz.isEnum()) {      return Enum.valueOf(clazz,data.get("value"));    } else     if (clazz == Vector3D.class) {      return new Vector3D(data.get("x"),data.get("y"),data.get("z"));    } else     if (clazz == Vector2D.class) {      return new Vector2D(data.get("x"),(double)data.get("y"));    } else {      return unserialize(clazz,data);    }  } catch (  Exception e) {    throw new DataException(e);  }}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static HttpErrorException from(HttpException cause){  String body="error body not available";  try {    body=cause.response().errorBody().string();  } catch (  Exception ignored) {  }  return new HttpErrorException(cause,body);}  }
class C{  private void throwForNullValue(@Nullable final String value,final Class<?> clazz,final @NonNull String key) throws WrongTypeException {  if (value == null) {    throw new WrongTypeException("The value for key <" + key + "> is null. "+ "You obviously saved this value as String and try to access it with type "+ clazz.getSimpleName()+ " which cannot be null. "+ " Always use getString(key, defaultValue) when accessing data you saved with put(String).");  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","xcu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private static byte CallStaticByteMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticByteMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Byte);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private String extractPasswordFromImageUrl(String imageUrl){  Pattern r=Pattern.compile(IMAGEURL_PASSWORD_SPLIT_REGEX);  Matcher m=r.matcher(imageUrl);  String password=null;  if (m.find() && m.groupCount() >= 2 && StringUtils.isNotBlank(m.group(2))) {    password=m.group(2);    Pattern hostpattern=Pattern.compile(IMAGEURL_HOST_REGEX);    Matcher hostMatcher=hostpattern.matcher(password);    if (hostMatcher.find()) {      String preHostregex="^(.*?)\\@" + hostMatcher.group(1);      Pattern pwdPattern=Pattern.compile(preHostregex);      Matcher pwdMatcher=pwdPattern.matcher(password);      if (pwdMatcher.find()) {        password=pwdMatcher.group(1);      }    }  }  return password;}  }
class C{  public static void reset(){  endLastMajorGC=VM.statistics.nanoTime();  accumulatedGCTime=0;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  exportPrivateKeysPanel.clearMessages();  if (super.bitcoinController.getModel().getActiveWallet() != null && super.bitcoinController.getModel().getActiveWallet().getEncryptionType() == EncryptionType.ENCRYPTED_SCRYPT_AES) {    if (walletPassword.getPassword() == null || walletPassword.getPassword().length == 0) {      exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"));      return;    }    try {      if (!super.bitcoinController.getModel().getActiveWallet().checkPassword(CharBuffer.wrap(walletPassword.getPassword()))) {        exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));        exportPrivateKeysPanel.setMessage2(" ");        return;      }    } catch (    KeyCrypterException kce) {      exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));      exportPrivateKeysPanel.setMessage2(" ");    }  }  String exportPrivateKeysFilename=exportPrivateKeysPanel.getOutputFilename();  if (exportPrivateKeysFilename == null || "".equals(exportPrivateKeysFilename)) {    exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustSelectAnOutputFile"));    return;  }  File exportPrivateKeysFile=new File(exportPrivateKeysFilename);  privateKeysHandler=new PrivateKeysHandler(super.bitcoinController.getModel().getNetworkParameters());  boolean performEncryptionOfExportFile=false;  CharSequence exportPasswordToUse=null;  if (exportPrivateKeysPanel.requiresEncryption()) {    if (exportFilePassword.getPassword() == null || exportFilePassword.getPassword().length == 0) {      exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("showExportPrivateKeysAction.enterPasswords"));      return;    } else {      if (!Arrays.areEqual(exportFilePassword.getPassword(),exportFileRepeatPassword.getPassword())) {        exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("showExportPrivateKeysAction.passwordsAreDifferent"));        return;      } else {        performEncryptionOfExportFile=true;        exportPasswordToUse=CharBuffer.wrap(exportFilePassword.getPassword());      }    }  }  if (exportPrivateKeysFile.exists()) {    String yesText=controller.getLocaliser().getString("showOpenUriView.yesText");    String noText=controller.getLocaliser().getString("showOpenUriView.noText");    String questionText=controller.getLocaliser().getString("showExportPrivateKeysAction.thisFileExistsOverwrite",new Object[]{exportPrivateKeysFile.getName()});    String questionTitle=controller.getLocaliser().getString("showExportPrivateKeysAction.thisFileExistsOverwriteTitle");    int selection=JOptionPane.showOptionDialog(mainFrame,questionText,questionTitle,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,ImageLoader.createImageIcon(ImageLoader.QUESTION_MARK_ICON_FILE),new String[]{yesText,noText},noText);    if (selection != JOptionPane.YES_OPTION) {      return;    }  }  WalletData perWalletModelData=super.bitcoinController.getModel().getActivePerWalletModelData();  if (!perWalletModelData.isBusy()) {    perWalletModelData.setBusy(true);    perWalletModelData.setBusyTaskKey("showExportPrivateKeysAction.text.camel");    exportPrivateKeysPanel.setMessage1(controller.getLocaliser().getString("exportPrivateKeysSubmitAction.exportingPrivateKeys"));    exportPrivateKeysPanel.setMessage2("");    super.bitcoinController.fireWalletBusyChange(true);    CharSequence walletPasswordToUse=null;    if (walletPassword.getPassword() != null) {      walletPasswordToUse=CharBuffer.wrap(walletPassword.getPassword());    }    exportPrivateKeysInBackground(exportPrivateKeysFile,performEncryptionOfExportFile,exportPasswordToUse,walletPasswordToUse);  }}  }
class C{  private static long copy(InputStream from,OutputStream to) throws IOException {  byte[] buf=new byte[BUFFER];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
