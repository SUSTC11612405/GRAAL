class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.319 -0500",hash_original_method="1F4DCB5CD8846A0745009D1673525F1B",hash_generated_method="C6B834E5E9ECD1C45D294C7A6620C669") public static String dumpCursorToString(Cursor cursor){  StringBuilder sb=new StringBuilder();  dumpCursor(cursor,sb);  return sb.toString();}  }
class C{  public void testGetTableTypesOrder() throws Exception {  DatabaseMetaData dmd=con.getMetaData();  ResultSet rs=dmd.getTableTypes();  String previousType="";  while (rs.next()) {    String type=rs.getString(1);    assertTrue(type.compareTo(previousType) >= 0);    previousType=type;  }  rs.close();}  }
class C{  public static void writeTestMatrix(String file,double[][] matrix){  writeTestMatrix(file,matrix,false);}  }
class C{  private synchronized final void closeCache(){  if (cache != null) {    try {      if (!cache.isClosed()) {        CacheTransactionManager txMgr=cache.getCacheTransactionManager();        if (txMgr != null) {          if (txMgr.exists()) {            txMgr.rollback();          }        }        cache.close();      }    }  finally {      cache=null;    }  }}  }
class C{  public static Iterator createShape3D(OMGraphic graphic,double baselineHeight){  Debug.message("3detail","OMGraphicUtil.createShape3D()");  boolean DEBUG_SHAPE=Debug.debugging("3dshape");  if (graphic == null) {    return NULL_ITERATOR;  }  if (graphic instanceof OMGraphicList) {    HashSet set=new HashSet();    for (    OMGraphic subgraphic : (OMGraphicList)graphic) {      Debug.message("3detail","OMGraphicUtil.createShape3D():  recursivly adding list...");      Iterator iterator=createShape3D(subgraphic,baselineHeight);      while (iterator.hasNext()) {        set.add(iterator.next());      }    }    return set.iterator();  } else {    if (DEBUG_SHAPE) {      Debug.output("OMGraphicUtil.createShape3D():  adding shape...");    }    Shape shape=graphic.getShape();    if (shape != null) {      if (graphic.shouldRenderFill()) {        return createShape3D(shape,baselineHeight,graphic.getFillColor(),true);      } else       if (graphic.shouldRenderEdge()) {        return createShape3D(shape,baselineHeight,graphic.getDisplayColor(),false);      } else       if (DEBUG_SHAPE) {        Debug.output("OMGraphicUtil.createShape3D(): can't render graphic");      }    } else     if (DEBUG_SHAPE) {      Debug.output("OMGraphicUtil.createShape3D(): shape from graphic is null");    }  }  return NULL_ITERATOR;}  }
class C{  public AnnotationQuery(String scope,String metric,Map<String,String> tags,String type,Long startTimestamp,Long endTimestamp){  this(scope,metric,tags,startTimestamp,endTimestamp);  requireArgument(type != null && !type.trim().isEmpty(),"Type cannot be null or empty.");  _type=type;}  }
class C{  public static final String decode(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    final int off=8 * (i - 1);    long l=obfuscated[i] ^ key;    final int end=Math.min(encoded.length,off + 8);    for (int i2=off; i2 < end; i2++) {      encoded[i2]=(byte)l;      l>>=8;    }  }  final String decoded;  try {    decoded=new String(encoded,"UTF8");  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  return i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  @Override public String toString(){  return "RefQueueWorker::" + this.workerThread;}  }
class C{  private static int partition(int[] array,int[] index,int l,int r){  double pivot=array[index[(l + r) / 2]];  int help;  while (l < r) {    while ((array[index[l]] < pivot) && (l < r)) {      l++;    }    while ((array[index[r]] > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (array[index[r]] > pivot)) {    r--;  }  return r;}  }
class C{  @Override public boolean processInput(Vertex input,Network network){  if (isStopped()) {    return false;  }  Vertex currentTime=network.createTimestamp();  boolean commit=false;  for (  Sense sense : getBot().awareness().getSenses().values()) {    if (isStopped()) {      return false;    }    if (sense instanceof DiscoverySense) {      commit=((DiscoverySense)sense).discover(input,network,currentTime) | commit;    }  }  return commit;}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderTrackBackground(context,g,x,y,w,h);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  CstLiteral64(long bits){  this.bits=bits;}  }
class C{  public boolean isEmpty(){  return this.lower >= this.upper;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  @Override public void writeProcessingInstruction(String target) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  String createInt(String mId) throws NonUniqueBusinessKeyException, UserRoleAssignmentException, OperationPendingException, MarketplaceRemovedException {  try {    List<UserRoleType> selectedRoles=new ArrayList<>();    for (    UserRole userRole : userRolesForNewUser) {      if (userRole.isSelected()) {        selectedRoles.add(userRole.getUserRoleType());      }    }    newUser.getVOUserDetails().setTenantId(sessionBean.getTenantID());    VOUserDetails createdUser=getIdService().createUser(newUser.getVOUserDetails(),selectedRoles,mId);    newUser=null;    initializeSelectdUserRole();    boolean pending=(createdUser == null);    if (pending) {      return OUTCOME_PENDING;    }    return OUTCOME_SUCCESS;  } catch (  MailOperationException e) {    if (getAuthenticationSettings().isInternal()) {      addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_USER_CREATE_MAIL);    } else {      addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_USER_CREATE_MAIL_NOT_INTERNAL);    }    return OUTCOME_ERROR;  }catch (  ValidationException e) {    String s="";    if (e.getMessageParams() != null) {      s=JSFUtils.getText("UserRoleType." + e.getMessageParams()[0],null);      for (int i=1; i < e.getMessageParams().length; i++) {        final Object[] roles={s,JSFUtils.getText("UserRoleType." + e.getMessageParams()[i],null)};        s=JSFUtils.getText(ERROR_USER_CREATE_INSUFFICIENT_ROLES + "Concat",roles);      }    }    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_USER_CREATE_INSUFFICIENT_ROLES,s);    return OUTCOME_ERROR;  }}  }
class C{  private void keyDownUp(int keyEventCode){  getCurrentInputConnection().sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,keyEventCode));  getCurrentInputConnection().sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,keyEventCode));}  }
class C{  public static byte[] drawableToBytes(Drawable drawable){  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;  Bitmap bitmap=bitmapDrawable.getBitmap();  byte[] bytes=bitmapToBytes(bitmap);  return bytes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.480 -0500",hash_original_method="CC9943DA76C04BDA8199AB8562F111EF",hash_generated_method="C949E2510FB874197211F90E55CF99B1") public boolean performContextMenuAction(int id){  return false;}  }
class C{  @Override default CompletableFuture<OptionalLong> maxLong(final ToLongFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public static Bitmap createVideoThumbnail(String filePath,int kind){  Bitmap bitmap=null;  MediaMetadataRetriever retriever=new MediaMetadataRetriever();  try {    retriever.setDataSource(filePath);    bitmap=retriever.getFrameAtTime(-1);  } catch (  IllegalArgumentException ex) {  }catch (  RuntimeException ex) {  } finally {    try {      retriever.release();    } catch (    RuntimeException ex) {    }  }  if (bitmap == null)   return null;  if (kind == Images.Thumbnails.MINI_KIND) {    int width=bitmap.getWidth();    int height=bitmap.getHeight();    int max=Math.max(width,height);    if (max > 512) {      float scale=512f / max;      int w=Math.round(scale * width);      int h=Math.round(scale * height);      bitmap=Bitmap.createScaledBitmap(bitmap,w,h,true);    }  } else   if (kind == Images.Thumbnails.MICRO_KIND) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO_THUMBNAIL,TARGET_SIZE_MICRO_THUMBNAIL,OPTIONS_RECYCLE_INPUT);  }  return bitmap;}  }
class C{  @Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){  View rootView=super.onCreateView(inflater,container,savedInstanceState);  if (mListView != null && mProfileTabCarousel != null) {    mListView.setOnScrollListener(new VerticalScrollListener(mScrollableHeader,mProfileTabCarousel,1));  }  return rootView;}  }
class C{  public ByteBuffer encrypt(ByteBuffer src) throws SSLException {  assert handshakeFinished;  outNetBuf.clear();  while (src.hasRemaining()) {    int outNetRemaining=outNetBuf.capacity() - outNetBuf.position();    if (outNetRemaining < src.remaining() * 2) {      outNetBuf=expandBuffer(outNetBuf,Math.max(outNetBuf.position() + src.remaining() * 2,outNetBuf.capacity() * 2));      if (log.isDebugEnabled())       log.debug("Expanded output net buffer: " + outNetBuf.capacity());    }    SSLEngineResult res=sslEngine.wrap(src,outNetBuf);    if (log.isDebugEnabled())     log.debug("Encrypted data [status=" + res.getStatus() + ", handshakeStaus="+ res.getHandshakeStatus()+ ']');    if (res.getStatus() == OK) {      if (res.getHandshakeStatus() == NEED_TASK)       runTasks();    } else     throw new SSLException("Failed to encrypt data (SSL engine error) [status=" + res.getStatus() + ", handshakeStatus="+ res.getHandshakeStatus()+ ']');  }  outNetBuf.flip();  return outNetBuf;}  }
class C{  public static void equalsHashTest(final Object[] array){  for (int i=0; i < array.length; i++) {    final Object objectI=array[i];    Assert.assertFalse(objectI.hashCode() == 0);    if (objectI instanceof IntegralAbstract) {      try {        ((IntegralAbstract)objectI).integrity();      } catch (      final ExamException e) {        throw new RuntimeException("i=" + i + " "+ objectI.toString(),e);      }    }  }  for (int i=0; i < array.length; i++) {    final Object objectI=array[i];    Assert.assertEquals(objectI,objectI);    Assert.assertFalse(objectI.equals(null));    for (int j=0; j < i; j++) {      Assert.assertTrue(!array[j].equals(objectI));      Assert.assertTrue(array[j].hashCode() != objectI.hashCode());    }    for (int j=i + 1; j < array.length; j++) {      Assert.assertTrue(i + ":" + objectI+ " == "+ j+ ":"+ array[j],!array[j].equals(objectI));    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociationClassDefinition_();}  }
class C{  public @Test final void testSetGrantsNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.setGrants(null);}  }
class C{  public BlockChainScore(final long score){  this(BigInteger.valueOf(score));}  }
class C{  public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public static boolean isEqual(BigDecimal expected,BigDecimal comparator){  if (expected == null || comparator == null) {    return false;  }  return expected.equals(comparator.setScale(expected.scale(),RoundingMode.HALF_UP));}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to DESede init - " + params.getClass().getName());  }  byte[] keyMaster=((KeyParameter)params).getKey();  if (keyMaster.length != 24 && keyMaster.length != 16) {    throw new IllegalArgumentException("key size must be 16 or 24 bytes.");  }  this.forEncryption=encrypting;  byte[] key1=new byte[8];  System.arraycopy(keyMaster,0,key1,0,key1.length);  workingKey1=generateWorkingKey(encrypting,key1);  byte[] key2=new byte[8];  System.arraycopy(keyMaster,8,key2,0,key2.length);  workingKey2=generateWorkingKey(!encrypting,key2);  if (keyMaster.length == 24) {    byte[] key3=new byte[8];    System.arraycopy(keyMaster,16,key3,0,key3.length);    workingKey3=generateWorkingKey(encrypting,key3);  } else {    workingKey3=workingKey1;  }}  }
class C{  public static DefaultListModel leftShift(DefaultListModel self,Object e){  self.addElement(e);  return self;}  }
class C{  public final void removeAllElements(){  clear();}  }
class C{  void update(BroadphaseKey key,DynamicAABBTreeLeaf<E,T> node,E collidable,T fixture){  Transform tx=collidable.getTransform();  AABB aabb=fixture.getShape().createAABB(tx);  if (node.aabb.contains(aabb)) {    return;  }  aabb.expand(this.expansion);  this.remove(node);  node.aabb=aabb;  this.insert(node);}  }
class C{  private static void initializeVM() throws Exception {  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  props.setProperty(LOG_LEVEL,"info");  distributedSystem=DistributedSystem.connect(props);  cache=CacheFactory.create(distributedSystem);  assertNotNull(cache);  DiskStoreFactory dsf=cache.createDiskStoreFactory();  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  File dir=new File("testingDirectoryDefault");  dir.mkdir();  dir.deleteOnExit();  File[] dirs={dir};  dsf.setDiskDirsAndSizes(dirs,new int[]{Integer.MAX_VALUE});  dsf.setAutoCompact(false);  DiskStore ds=dsf.create(regionName);  factory.setDiskStoreName(ds.getName());  factory.setDiskSynchronous(true);  factory.setDataPolicy(DataPolicy.NORMAL);  factory.setEvictionAttributes(EvictionAttributesImpl.createLIFOEntryAttributes(capacity,EvictionAction.OVERFLOW_TO_DISK));  RegionAttributes attr=factory.create();  ((GemFireCacheImpl)cache).createRegion(regionName,attr);  lifoClockHand=((VMLRURegionMap)((LocalRegion)cache.getRegion(Region.SEPARATOR + regionName)).entries)._getLruList();  lifoStats=lifoClockHand.stats();}  }
class C{  public boolean nonEmpty(){  return tail != null;}  }
class C{  private void updateVDisplay(boolean next){  if (m_archives == null)   m_archives=new MArchive[0];  if (next)   m_index++; else   m_index--;  if (m_index >= m_archives.length - 1)   m_index=m_archives.length - 1;  if (m_index < 0)   m_index=0;  bBack.setEnabled(m_index > 0);  bNext.setEnabled(m_index < m_archives.length - 1);  updateArchive.setEnabled(false);  log.info("Index=" + m_index + ", Length="+ m_archives.length);  if (m_archives.length == 0) {    positionInfo.setValue("No Record Found");    createdByField.setText("");    createdField.setValue(null);    nameField.setText("");    descriptionField.setText("");    helpField.setText("");    iframe.getChildren().clear();    return;  }  positionInfo.setValue(m_index + 1 + " "+ Msg.getMsg(Env.getCtx(),"of")+ " "+ m_archives.length);  MArchive ar=m_archives[m_index];  createdByField.setText(ar.getCreatedByName());  createdField.setValue(ar.getCreated());  nameField.setText(ar.getName());  descriptionField.setText(ar.getDescription());  helpField.setText(ar.getHelp());  try {    InputStream in=ar.getInputStream();    if (in != null)     reportViewer(ar.getBinaryData()); else     iframe.getChildren().clear();  } catch (  Exception e) {    log.log(Level.SEVERE,"pdf",e);    iframe.getChildren().clear();  }}  }
class C{  public boolean isBlocked(){  if (getParentWorld().isObjectsBlockMovement()) {    if (hasCollided()) {      return true;    }  }  return false;}  }
class C{  public RepublishResponse Republish(RepublishRequest req) throws ServiceFaultException, ServiceResultException {  return (RepublishResponse)channel.serviceRequest(req);}  }
class C{  private GF2Polynomial karaMult(GF2Polynomial b){  GF2Polynomial result=new GF2Polynomial(len << 1);  if (len <= 32) {    result.value=mult32(value[0],b.value[0]);    return result;  }  if (len <= 64) {    result.value=mult64(value,b.value);    return result;  }  if (len <= 128) {    result.value=mult128(value,b.value);    return result;  }  if (len <= 256) {    result.value=mult256(value,b.value);    return result;  }  if (len <= 512) {    result.value=mult512(value,b.value);    return result;  }  int n=IntegerFunctions.floorLog(len - 1);  n=bitMask[n];  GF2Polynomial a0=lower(((n - 1) >> 5) + 1);  GF2Polynomial a1=upper(((n - 1) >> 5) + 1);  GF2Polynomial b0=b.lower(((n - 1) >> 5) + 1);  GF2Polynomial b1=b.upper(((n - 1) >> 5) + 1);  GF2Polynomial c=a1.karaMult(b1);  GF2Polynomial e=a0.karaMult(b0);  a0.addToThis(a1);  b0.addToThis(b1);  GF2Polynomial d=a0.karaMult(b0);  result.shiftLeftAddThis(c,n << 1);  result.shiftLeftAddThis(c,n);  result.shiftLeftAddThis(d,n);  result.shiftLeftAddThis(e,n);  result.addToThis(e);  return result;}  }
class C{  private boolean validUsername(String username){  if (username.length() == 0) {    mUsername.setError("Username cannot be empty.");    return false;  }  if (username.length() > 16) {    mUsername.setError("Username too long.");    return false;  }  return true;}  }
class C{  public CenterArrangement(){}  }
class C{  public static double clampLongitude(double degrees){  return degrees > 180 ? 180 : (degrees < -180 ? -180 : degrees);}  }
class C{  public Position_ createPosition_(){  Position_Impl position_=new Position_Impl();  return position_;}  }
class C{  public <T>T read(T value,InputStream source,boolean strict) throws Exception {  return read(value,NodeBuilder.read(source),strict);}  }
class C{  private void convertMaximalToMinimalEdgeRings(List ringEdges){  for (Iterator i=ringEdges.iterator(); i.hasNext(); ) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();    long label=de.getLabel();    List intNodes=findIntersectionNodes(de,label);    if (intNodes == null)     continue;    for (Iterator iNode=intNodes.iterator(); iNode.hasNext(); ) {      Node node=(Node)iNode.next();      computeNextCCWEdges(node,label);    }  }}  }
class C{  protected final Object clone(){  return this;}  }
class C{  private Boolean handleExecutionResponse(HttpURLConnection connection) throws IOException {  int responseCode=connection.getResponseCode();  if (isSuccessful(responseCode)) {    String responseContent=getResponseContentAsString(connection);    String id=responseContent != null ? responseContent : "unknown";    Log.i(TAG,"Minidump " + mFileToUpload.getName() + " uploaded successfully, id: "+ id);    cleanupMinidumpFile();    try {      appendUploadedEntryToLog(id);    } catch (    IOException ioe) {      Log.e(TAG,"Fail to write uploaded entry to log file");    }    return true;  } else {    String msg=String.format(Locale.US,"Failed to upload %s with code: %d (%s).",mFileToUpload.getName(),responseCode,connection.getResponseMessage());    Log.i(TAG,msg);    return false;  }}  }
class C{  public static <T>Set<T> each(Set<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  return (Set<T>)each((Iterable<T>)self,closure);}  }
class C{  public void deletePerms(int destType,int destId,int archId,int perms,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  _destType=destType;  _destId=destId;  _id=archId;  _typeObj=Defs.OBJECT_OWNER_TYPE_ARCHIVE;  if (_logger.isDebugEnabled())   _logger.debug("deletePerms");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    dbConn.beginTransaction();    inTrans=true;    if ((perms & Defs.OBJ_PERM_QUERY) != 0) {      _perm=Defs.OBJ_PERM_QUERY;      deletePerm(entidad);    }    if ((perms & Defs.OBJ_PERM_UPDATE) != 0) {      _perm=Defs.OBJ_PERM_UPDATE;      deletePerm(entidad);    }    if ((perms & Defs.OBJ_PERM_CREATION) != 0) {      _perm=Defs.OBJ_PERM_CREATION;      deletePerm(entidad);    }    if ((perms & Defs.OBJ_PERM_DELETION) != 0) {      _perm=Defs.OBJ_PERM_DELETION;      deletePerm(entidad);    }    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  public BeanFactoryException(){}  }
class C{  private void applyLayout(){  layoutPanel.commitChanges();  neuronGroup.setLayout(layoutPanel.getCurrentLayout());  neuronGroup.applyLayout();}  }
class C{  @Transactional public void addArticleNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_ARTICLE);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=article] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  private long jitterize(long minValue,long maxValue){  Random random=new Random(SystemClock.elapsedRealtime());  long spread=maxValue - minValue;  if (spread > Integer.MAX_VALUE) {    throw new IllegalArgumentException("the difference between the maxValue and the " + "minValue must be less than " + Integer.MAX_VALUE);  }  return minValue + random.nextInt((int)spread);}  }
class C{  protected void prepareRequestContextHeaderFormat(MediaType headerMediaType,MediaType formatMediaType) throws Exception {  context=createODataRequestContext(createODataRequest(GET,headerMediaType),createODataUri(formatMediaType),entityDataModel);}  }
class C{  protected final V unwrapValue(V value){  return value;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.AUTO_TRANSITION_BLOCK___GUARD_1:    return ((InternalEList<?>)getGuard_1()).basicRemove(otherEnd,msgs);case UmplePackage.AUTO_TRANSITION_BLOCK___ACTION_1:  return ((InternalEList<?>)getAction_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static public int nextPowerOfTwo(int value){  if (value == 0) {    return 1;  }  value--;  value|=value >> 1;  value|=value >> 2;  value|=value >> 4;  value|=value >> 8;  value|=value >> 16;  return value + 1;}  }
class C{  protected final void unserialize(InputStream inputStream) throws IOException {  super.unserialize(inputStream);  m_data_=new int[m_dataLength_];  DataInputStream input=new DataInputStream(inputStream);  for (int i=0; i < m_dataLength_; i++) {    m_data_[i]=input.readInt();  }  m_initialValue_=m_data_[0];}  }
class C{  public static boolean isUrl(String resourceLocation){  return (resourceLocation != null && (resourceLocation.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) || ResourceUtils.isUrl(resourceLocation)));}  }
class C{  public static DefUseCoverageTestFitness createGoal(BytecodeInstruction def,BytecodeInstruction use,DefUseCoverageTestFitness.DefUsePairType type){  if (def == null)   throw new IllegalArgumentException("null given as def");  if (use == null)   throw new IllegalArgumentException("null given as use");  Definition definition=DefUsePool.getDefinitionByInstruction(def);  Use usee=DefUsePool.getUseByInstruction(use);  if (definition == null || usee == null)   return null;  return createGoal(definition,usee,type);}  }
class C{  public <T>T fromXML(final String xml,final TypePermission... permissions) throws ClassNotFoundException, ObjectStreamException {  try {    return fromXML(new StringReader(xml),permissions);  } catch (  final ObjectStreamException e) {    throw e;  }catch (  final IOException e) {    throw new StreamException("Unexpected IO error from a StringReader",e);  }}  }
class C{  protected void sort(){  if (!isSorted) {    buffer.sort();    this.isSorted=true;  }}  }
class C{  public static boolean hasTenant(){  return BaggageContents.contains(RETRO_BAGGAGE_NAMESPACE,TENANT_ID_BAGGAGE_FIELD);}  }
class C{  @Override public void undo() throws CannotUndoException {  undoOrRedoInProgress=true;  try {    super.undo();  }  finally {    undoOrRedoInProgress=false;    updateActions();  }}  }
class C{  public ServerHello(HandshakeIODataStream in,int length) throws IOException {  server_version[0]=(byte)in.read();  server_version[1]=(byte)in.read();  Streams.readFully(in,random);  int size=in.readUint8();  session_id=new byte[size];  in.read(session_id,0,size);  byte b0=(byte)in.read();  byte b1=(byte)in.read();  cipher_suite=CipherSuite.getByCode(b0,b1);  compression_method=(byte)in.read();  this.length=38 + session_id.length;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHello");  }}  }
class C{  @Override public boolean equals(Object o){  if (o == null || !(o instanceof JdpJmxPacket)) {    return false;  }  JdpJmxPacket p=(JdpJmxPacket)o;  return Objects.equals(id,p.getId()) && Objects.equals(jmxServiceUrl,p.getJmxServiceUrl());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.EXPRESSION__LEFT:    setLeft((Expression)newValue);  return;case GamlPackage.EXPRESSION__OP:setOp((String)newValue);return;case GamlPackage.EXPRESSION__RIGHT:setRight((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void deallocateDBIDRange(DBIDRange range){  DBIDFactory.FACTORY.deallocateDBIDRange(range);}  }
class C{  @Override public void reset() throws IOException {  ensureOpen();  next=mark;}  }
class C{  private void enableTradestrategyButtons(final Tradestrategy tradestrategy){  boolean enable=false;  if (null != tradestrategy) {    enable=true;    transferButton.setTransferObject(tradestrategy.getIdTradeStrategy());    try {      CodeType codeType=m_tradePersistentModel.findCodeTypeByNameType(tradestrategy.getStrategy().getName(),CodeType.StrategyParameters);      if (null != codeType) {        strategyParmButton.setEnabled(true);      }    } catch (    Exception ex) {      this.setErrorMessage("Error finding CodeTypeByName.",ex.getMessage(),ex);    }  } else {    transferButton.setTransferObject(null);    strategyParmButton.setEnabled(false);  }  deleteTradeOrderButton.setTransferObject(tradestrategy);  cancelStrategiesButton.setTransferObject(tradestrategy);  strategyParmButton.setTransferObject(tradestrategy);  closeAllPositionsButton.setTransferObject(tradestrategy);  testStrategyButton.setTransferObject(tradestrategy);  ordersButton.setTransferObject(tradestrategy);  brokerDataButton.setTransferObject(tradestrategy);  runStrategyButton.setTransferObject(tradestrategy);  deleteTradeOrderButton.setEnabled(enable);  cancelStrategiesButton.setEnabled(enable);  closeAllPositionsButton.setEnabled(enable);  testStrategyButton.setEnabled(enable);  brokerDataButton.setEnabled(enable);  ordersButton.setEnabled(false);  runStrategyButton.setEnabled(false);  if (this.isConnected() && null != tradestrategy) {    runStrategyButton.setEnabled(true);    testStrategyButton.setEnabled(false);    ordersButton.setEnabled(true);  }}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  public PseudostateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  for (  Key key : this)   s.append(key + " ");  return s.toString();}  }
class C{  public void addCRLs(Store crlStore) throws CMSException {  crls.addAll(CMSUtils.getCRLsFromStore(crlStore));}  }
class C{  public ReceiptDetail createReceiptDetail(CChartOfAccounts coa,BigDecimal crAmt,BigDecimal drAmt,CFunction function,long orderNum,String description,ReceiptHeader receiptHeader){  ReceiptDetail receiptDetail=createUnsavedReceiptDetail(coa,crAmt,drAmt,function,orderNum,description,receiptHeader,true);  session.saveOrUpdate(receiptDetail);  return receiptDetail;}  }
class C{  public AnimatorSet createAnimatorSetForType(OverviewAnimationType type,StackTab[] tabs,ViewGroup container,TabModel model,int focusIndex){  AnimatorSet set=null;  if (model != null) {switch (type) {case NEW_TAB_OPENED:      set=createNewTabOpenedAnimatorSet(tabs,container,model,focusIndex);    break;default :  break;}}return set;}  }
class C{  public PuzzleEvaluator2(int target[]){  this.target=target;}  }
class C{  @Deprecated private void initShowAnimation(TypedArray attrs){  if (attrs.hasValue(R.styleable.ActionButton_animation_onShow)) {    final int animResId=attrs.getResourceId(R.styleable.ActionButton_animation_onShow,Animations.NONE.animResId);    setShowAnimation(Animations.load(getContext(),animResId));  }}  }
class C{  public List<Integer> spiralOrder(int[][] matrix){  List<Integer> res=new ArrayList<Integer>();  if (matrix == null || matrix.length == 0) {    return res;  }  int m=matrix.length;  int n=matrix[0].length;  int lv=0;  while (2 * lv < m && 2 * lv < n) {    for (int i=lv; i < n - lv; i++) {      res.add(matrix[lv][i]);    }    for (int i=lv + 1; i < m - lv; i++) {      res.add(matrix[i][n - lv - 1]);    }    if (2 * lv == m - 1 || 2 * lv == n - 1) {      break;    }    for (int i=n - lv - 2; i >= lv; i--) {      res.add(matrix[m - lv - 1][i]);    }    for (int i=m - lv - 2; i >= lv + 1; i--) {      res.add(matrix[i][lv]);    }    lv++;  }  return res;}  }
class C{  public void onContactReferred(){  if (ENABLED) {    trackOpt("Contact Referred",null);  }}  }
class C{  public static InputStream readFileToInputStream(String filePath) throws FileNotFoundException {  InputStream is=null;  try {    is=new FileInputStream(filePath);    logger.info("Completed read file for input stream " + " Path: " + filePath + " at "+ PcDateUtils.getNowDateTimeStr());  } catch (  Exception e) {    logger.error("Error read file." + e);  }  return is;}  }
class C{  private void updateParameterDesign(IParameterMetaData paramMd,DataSetDesign dataSetDesign) throws OdaException {  DataSetParameters paramDesign=DesignSessionUtil.toDataSetParametersDesign(paramMd,DesignSessionUtil.toParameterModeDesign(IParameterMetaData.parameterModeIn));  dataSetDesign.setParameters(paramDesign);  if (paramDesign == null)   return;  paramDesign.setDerivedMetaData(true);  if (paramDesign.getParameterDefinitions().size() > 0) {    ParameterDefinition paramDef=(ParameterDefinition)paramDesign.getParameterDefinitions().get(0);    if (paramDef != null)     paramDef.setDefaultScalarValue("dummy default value");  }}  }
class C{  @Override public void activate() throws BasicException {  taxsent=m_dlSales.getTaxList();  taxeslogic=new TaxesLogic(taxsent.list());  taxcatsent=m_dlSales.getTaxCategoriesList();  taxcatmodel=new ComboBoxValModel(taxcatsent.list());  jComboTax.setModel(taxcatmodel);  m_sentcat=m_dlSales.getCategoriesList();  m_CategoryModel=new ComboBoxValModel(m_sentcat.list());  m_CategoryModel.add(reject_bad_categories_text);  jComboDefaultCategory.setModel(m_CategoryModel);  cat_list=new HashMap<>();  for (  Object category : m_sentcat.list()) {    m_CategoryModel.setSelectedItem(category);    cat_list.put(category.toString(),m_CategoryModel.getSelectedKey().toString());  }  m_CategoryModel.setSelectedItem(null);  taxcatmodel.setSelectedFirst();  jComboSeparator.removeAllItems();  jComboSeparator.addItem(",");  jComboSeparator.addItem(";");  jComboSeparator.addItem("~");  jComboSeparator.addItem("^");  jComboSeparator.addItem("|");  jParamsLocation.init(m_App);  jParamsLocation.activate();}  }
class C{  public static void main(final String[] args){  run(args[0],args[1],args[2],args[3]);}  }
class C{  protected EsriGraphic createPointGraphic(BinaryFile shpFile,Object representation,DrawingAttributes drawingAttributes,ReadByteTracker byteTracker) throws IOException, FormatException {  double x=shpFile.readDouble();  double y=shpFile.readDouble();  byteTracker.addRead(2 * 8);  return createPointGraphic(x,y,representation,drawingAttributes);}  }
class C{  public static QueryDRSMigrationCapabilityForPerformance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryDRSMigrationCapabilityForPerformance object=new QueryDRSMigrationCapabilityForPerformance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryDRSMigrationCapabilityForPerformance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryDRSMigrationCapabilityForPerformance)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","srcUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setSrcUniqueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","dstUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setDstUniqueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","entityType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEntityType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  @Override public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  public void test_restartSafe_multipleWrites(){  IAtomicStore store=(IAtomicStore)getStore();  try {    assertTrue(store.isStable());    Random r=new Random();    final int limit=100;    final long[] addrs=new long[limit];    final byte[][] records=new byte[limit][];    for (int i=0; i < limit; i++) {      byte[] expected=new byte[r.nextInt(100) + 1];      r.nextBytes(expected);      ByteBuffer tmp=ByteBuffer.wrap(expected);      long addr=store.write(tmp);      assertEquals(expected.length,tmp.position());      assertEquals(tmp.position(),tmp.limit());      assertEquals(expected,store.read(addr));      addrs[i]=addr;      records[i]=expected;    }    int[] order=getRandomOrder(limit);    for (int i=0; i < limit; i++) {      long addr=addrs[order[i]];      byte[] expected=records[order[i]];      assertEquals(expected,store.read(addr));    }    store.commit();    store=(IAtomicStore)reopenStore(store);    assertTrue(store.isStable());    order=getRandomOrder(limit);    for (int i=0; i < limit; i++) {      long addr=addrs[order[i]];      byte[] expected=records[order[i]];      assertEquals(expected,store.read(addr));    }  }  finally {    store.destroy();  }}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public EntityItemMetaBuilder start(final EntityItemMeta meta){  return new EntityItemMetaBuilder(meta);}  }
class C{  public void testDisconnect_BeforeConnect() throws IOException {  assertFalse(this.channel1.isConnected());  assertEquals(this.channel1,this.channel1.disconnect());  assertFalse(this.channel1.isConnected());}  }
class C{  protected static boolean isNumeric(String s){  for (  char c : s.toCharArray()) {    if (!Character.isDigit(c))     return false;  }  return true;}  }
class C{  public ResourceId(){  super(KEY);}  }
class C{  public boolean isConst(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.CONST);}  }
class C{  public void checkSourceFile(Environment env,long where){  if (sourceFileChecked)   return;  sourceFileChecked=true;  String fname=getName().getName() + ".java";  String src=((ClassFile)getSource()).getName();  if (!src.equals(fname)) {    if (isPublic()) {      env.error(where,"public.class.file",this,fname);    } else {      env.error(where,"warn.package.class.file",this,src,fname);    }  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info("completeIt - " + toString());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  private String removeOptionalTableReference(String name,QueryState state){  if (name.contains(".")) {    String head=name.split("\\.")[0];    for (    QuerySource tr : state.getSources()) {      if (tr.getAlias() != null && head.equals(tr.getAlias())) {        return name.substring(name.indexOf('.') + 1);      } else       if (head.equals(tr.getSource())) {        return name.substring(name.indexOf('.') + 1);      }    }  }  return name;}  }
class C{  public static ExprDouble toExprDouble(Expression left,Expression right,int operation){  return new OpDouble(left,right,operation);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateFractalDimensionRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateFractalDimensionVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public PathBuilder(Project antProject,IEclipseProject eclipseProject,File workdir){  this.antProject=antProject;  this.eclipseProject=eclipseProject;  this.workdir=workdir;}  }
class C{  public void testHints() throws Exception {  if (!versionMeetsMinimum(5,7,7)) {    return;  }  testHintsSyntax("SELECT /*+ max_execution_time(100) */ SLEEP(5)",true,false);  testHintsSyntax("SELECT/*+ max_execution_time(100) */SLEEP(5)",true,false);  testHintsSyntax("SELECT /*+ max_execution_time(100) */ SLEEP(5) /*+ wrong location, just comments */",true,false);  testHintsSyntax("SELECT /*+ max_execution_time(100) *//* comment */ SLEEP(5)",true,false);  testHintsSyntax("SELECT /*+ max_execution_time *//*+ (100) */ SLEEP(0.5)",false,true);  testHintsSyntax("SELECT /*+! max_execution_time (100) */ SLEEP(0.5)",false,true);  testHintsSyntax("SELECT /*+ max_execution_time (100) bad_hint */ SLEEP(5)",true,true);  testHintsSyntax("/*+ max_execution_time(100) */SELECT SLEEP(0.5)",false,false);  testHintsSyntax("SELECT SLEEP(0.5) /*+ max_execution_time(100) */",false,false);  testHintsSyntax("SELECT /* + max_execution_time(100) */ SLEEP(0.5)",false,false);  testHintsSyntax("SELECT /* comment *//*+ max_execution_time(100) */ SLEEP(0.5)",false,false);  testHintsSyntax("SELECT /*!+1-1, */ 1",false,false);  createTable("testHints","(id INT PRIMARY KEY, txt CHAR(2))");  assertEquals(1,this.stmt.executeUpdate("INSERT /*+ mrr(testHints) */ INTO testHints VALUES (1, 'a')"));  assertNull(this.stmt.getWarnings());  assertEquals(2,this.stmt.executeUpdate("REPLACE /*+ mrr(testHints) */ INTO testHints VALUES (1, 'A')"));  assertNull(this.stmt.getWarnings());  assertEquals(1,this.stmt.executeUpdate("UPDATE /*+ mrr(testHints) */ testHints SET txt = 'Aa'"));  assertNull(this.stmt.getWarnings());  this.rs=this.stmt.executeQuery("SELECT /*+ max_execution_time(100) */ * FROM testHints");  assertNull(this.stmt.getWarnings());  assertTrue(this.rs.next());  assertEquals(1,this.rs.getInt(1));  assertEquals("Aa",this.rs.getString(2));  assertFalse(this.rs.next());  assertEquals(1,this.stmt.executeUpdate("DELETE /*+ mrr(testHints) */ FROM testHints"));  assertNull(this.stmt.getWarnings());  assertEquals(1,this.stmt.executeUpdate("INSERT INTO testHints (SELECT /*+ qb_name(dummy) */ 2, 'b')"));  assertNull(this.stmt.getWarnings());  assertEquals(2,this.stmt.executeUpdate("REPLACE INTO testHints (SELECT /*+ qb_name(dummy) */ 2, 'B')"));  assertNull(this.stmt.getWarnings());  assertEquals(1,this.stmt.executeUpdate("UPDATE testHints SET txt = 'Bb' WHERE id IN (SELECT /*+ qb_name(dummy) */ 2)"));  assertNull(this.stmt.getWarnings());  this.rs=this.stmt.executeQuery("SELECT /*+ max_execution_time(100) */ 1, 'Aa' UNION SELECT /*+ qb_name(dummy) */ * FROM testHints");  assertNull(this.stmt.getWarnings());  assertTrue(this.rs.next());  assertEquals(1,this.rs.getInt(1));  assertEquals("Aa",this.rs.getString(2));  assertTrue(this.rs.next());  assertEquals(2,this.rs.getInt(1));  assertEquals("Bb",this.rs.getString(2));  assertFalse(this.rs.next());  assertEquals(1,this.stmt.executeUpdate("DELETE FROM testHints WHERE id IN (SELECT /*+ qb_name(dummy) */ 2)"));  assertNull(this.stmt.getWarnings());  for (  String connProps : new String[]{"useServerPrepStmts=false","useServerPrepStmts=true"}) {    Connection testConn=null;    testConn=getConnectionWithProps(connProps);    this.pstmt=testConn.prepareStatement("INSERT /*+ mrr(testHints) */ INTO testHints VALUES (?, ?)");    this.pstmt.setInt(1,1);    this.pstmt.setString(2,"a");    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("REPLACE /*+ mrr(testHints) */ INTO testHints VALUES (?, ?)");    this.pstmt.setInt(1,1);    this.pstmt.setString(2,"A");    assertEquals(2,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("UPDATE /*+ mrr(testHints) */ testHints SET txt = ?");    this.pstmt.setString(1,"Aa");    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("SELECT /*+ max_execution_time(100) */ * FROM testHints WHERE id = ?");    this.pstmt.setInt(1,1);    this.rs=this.pstmt.executeQuery();    assertNull(this.pstmt.getWarnings());    assertTrue(this.rs.next());    assertEquals(1,this.rs.getInt(1));    assertEquals("Aa",this.rs.getString(2));    assertFalse(this.rs.next());    this.pstmt=testConn.prepareStatement("DELETE /*+ mrr(testHints) */ FROM testHints WHERE id = ?");    this.pstmt.setInt(1,1);    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("INSERT INTO testHints (SELECT /*+ qb_name(dummy) */ ?, ?)");    this.pstmt.setInt(1,2);    this.pstmt.setString(2,"b");    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("REPLACE INTO testHints (SELECT /*+ qb_name(dummy) */ ?, ?)");    this.pstmt.setInt(1,2);    this.pstmt.setString(2,"B");    assertEquals(2,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("UPDATE testHints SET txt = 'Bb' WHERE id IN (SELECT /*+ qb_name(dummy) */ ?)");    this.pstmt.setInt(1,2);    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    this.pstmt=testConn.prepareStatement("SELECT /*+ max_execution_time(100) */ ?, ? UNION SELECT /*+ qb_name(dummy) */ * FROM testHints");    this.pstmt.setInt(1,1);    this.pstmt.setString(2,"Aa");    this.rs=this.pstmt.executeQuery();    assertNull(this.pstmt.getWarnings());    assertTrue(this.rs.next());    assertEquals(1,this.rs.getInt(1));    assertEquals("Aa",this.rs.getString(2));    assertTrue(this.rs.next());    assertEquals(2,this.rs.getInt(1));    assertEquals("Bb",this.rs.getString(2));    assertFalse(this.rs.next());    this.pstmt=testConn.prepareStatement("DELETE FROM testHints WHERE id IN (SELECT /*+ qb_name(dummy) */ ?)");    this.pstmt.setInt(1,2);    assertEquals(1,this.pstmt.executeUpdate());    assertNull(this.pstmt.getWarnings());    testConn.close();  }}  }
class C{  public MailContent row(String firstCell){  return tag("tr").cell(firstCell).end();}  }
class C{  public void saveAsJPEG(File file,int width,int height) throws IOException, TranscoderException {  saveAsJPEG(file,width,height,DEFAULT_QUALITY);}  }
class C{  public PcLocalRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);  this.sourceGraph=graphWrapper.getGraph();}  }
class C{  protected List<Recommendation> scheduleStorageSourcePoolConstraint(VirtualArray varray,List<VirtualArray> protectionVarrays,VirtualPool vpool,VirtualPoolCapabilityValuesWrapper capabilities,List<StoragePool> candidatePools,Project project,Volume vpoolChangeVolume,Map<VirtualArray,List<StoragePool>> preSelectedCandidateProtectionPoolsMap){  List<Recommendation> recommendations=new ArrayList<Recommendation>();  String candidateSourceInternalSiteName="";  placementStatus=new PlacementStatus();  StringBuffer sb=new StringBuffer("Determining if protection is possible from " + varray.getId() + " to: ");  for (  VirtualArray protectionVarray : protectionVarrays) {    sb.append(protectionVarray.getId()).append(" ");  }  _log.info(sb.toString());  int index=-1;  for (  VirtualArray targetVarray : protectionVarrays) {    if (targetVarray.getId().equals(varray.getId())) {      index=protectionVarrays.indexOf(targetVarray);      break;    }  }  if (index > 0) {    VirtualArray localVarray=protectionVarrays.get(index);    VirtualArray swapVarray=protectionVarrays.get(0);    protectionVarrays.set(0,localVarray);    protectionVarrays.set(index,swapVarray);  }  List<URI> protectionVarrayURIs=new ArrayList<URI>();  for (  VirtualArray vArray : protectionVarrays) {    protectionVarrayURIs.add(vArray.getId());    placementStatus.getProcessedProtectionVArrays().put(vArray.getId(),false);  }  VirtualArray journalVarray=varray;  if (NullColumnValueGetter.isNotNullValue(vpool.getJournalVarray())) {    journalVarray=dbClient.queryObject(VirtualArray.class,URI.create(vpool.getJournalVarray()));  }  VirtualPool journalVpool=vpool;  if (NullColumnValueGetter.isNotNullValue(vpool.getJournalVpool())) {    journalVpool=dbClient.queryObject(VirtualPool.class,URI.create(vpool.getJournalVpool()));  }  placementStatus.setSrcVArray(varray.getLabel());  placementStatus.setSrcVPool(vpool.getLabel());  BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());  int totalRequestedCount=capabilities.getResourceCount();  int totalSatisfiedCount=0;  int requestedCount=totalRequestedCount;  int satisfiedCount=0;  boolean isChangeVpool=(vpoolChangeVolume != null);  RPProtectionRecommendation rpProtectionRecommendation=new RPProtectionRecommendation();  rpProtectionRecommendation.setVpoolChangeVolume(vpoolChangeVolume != null ? vpoolChangeVolume.getId() : null);  rpProtectionRecommendation.setVpoolChangeNewVpool(vpoolChangeVolume != null ? vpool.getId() : null);  rpProtectionRecommendation.setVpoolChangeProtectionAlreadyExists(vpoolChangeVolume != null ? vpoolChangeVolume.checkForRp() : false);  List<Recommendation> sourcePoolRecommendations=new ArrayList<Recommendation>();  if (isChangeVpool) {    Recommendation changeVpoolSourceRecommendation=new Recommendation();    URI existingStoragePoolId=null;    if (RPHelper.isVPlexVolume(vpoolChangeVolume,dbClient)) {      if (null == vpoolChangeVolume.getAssociatedVolumes() || vpoolChangeVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",vpoolChangeVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(vpoolChangeVolume.forDisplay());      }      for (      String associatedVolume : vpoolChangeVolume.getAssociatedVolumes()) {        Volume assocVol=dbClient.queryObject(Volume.class,URI.create(associatedVolume));        if (assocVol.getVirtualArray().equals(varray.getId())) {          existingStoragePoolId=assocVol.getPool();          break;        }      }    } else {      existingStoragePoolId=vpoolChangeVolume.getPool();    }    changeVpoolSourceRecommendation.setSourceStoragePool(existingStoragePoolId);    StoragePool pool=dbClient.queryObject(StoragePool.class,existingStoragePoolId);    changeVpoolSourceRecommendation.setSourceStorageSystem(pool.getStorageDevice());    changeVpoolSourceRecommendation.setResourceCount(1);    sourcePoolRecommendations.add(changeVpoolSourceRecommendation);    _log.info(String.format("RP Placement : Change Virtual Pool - Active source pool already exists, reuse pool: [%s] [%s].",pool.getLabel().toString(),pool.getId().toString()));  } else {    sourcePoolRecommendations=getRecommendedPools(rpProtectionRecommendation,varray,vpool,null,null,capabilities,RPHelper.SOURCE,null);    if (sourcePoolRecommendations == null || sourcePoolRecommendations.isEmpty()) {      _log.error(String.format("RP Placement : No matching storage pools found for the source varray: [%s]. " + "There are no storage pools that " + "match the passed vpool parameters and protocols and/or there are "+ "no pools that have enough capacity to hold at least one resource of the requested size.",varray.getLabel()));      throw APIException.badRequests.noMatchingStoragePoolsForVpoolAndVarray(vpool.getLabel(),varray.getLabel());    }  }  for (  Recommendation sourcePoolRecommendation : sourcePoolRecommendations) {    satisfiedCount=((sourcePoolRecommendation.getResourceCount()) >= requestedCount) ? requestedCount : sourcePoolRecommendation.getResourceCount();    _log.info("Looking to place " + satisfiedCount + " resources...");    Set<ProtectionSystem> protectionSystems=new HashSet<ProtectionSystem>();    ProtectionSystem cgProtectionSystem=getCgProtectionSystem(capabilities.getBlockConsistencyGroup());    StoragePool sourcePool=dbClient.queryObject(StoragePool.class,sourcePoolRecommendation.getSourceStoragePool());    if (cgProtectionSystem != null) {      _log.info(String.format("RP Placement : Narrowing down placement to use ProtectionSystem %s, " + "which is currently used by RecoverPoint consistency group %s.",cgProtectionSystem.getLabel(),cg));      protectionSystems.add(cgProtectionSystem);    } else {      protectionSystems=getProtectionSystemsForStoragePool(sourcePool,varray,VirtualPool.vPoolSpecifiesHighAvailability(vpool));      if (protectionSystems.isEmpty()) {        continue;      }    }    List<ProtectionSystem> protectionSystemsLst=sortProtectionSystems(protectionSystems);    for (    ProtectionSystem candidateProtectionSystem : protectionSystemsLst) {      Calendar cgLastCreated=candidateProtectionSystem.getCgLastCreatedTime();      _log.info(String.format("RP Placement : Attempting to use ProtectionSystem %s, which was last used to create a CG on %s.",candidateProtectionSystem.getLabel(),cgLastCreated != null ? cgLastCreated.getTime().toString() : "N/A"));      List<String> associatedStorageSystems=new ArrayList<String>();      String internalSiteNameandAssocStorageSystem=getCgSourceInternalSiteNameAndAssociatedStorageSystem(capabilities.getBlockConsistencyGroup());      if (internalSiteNameandAssocStorageSystem != null) {        _log.info(String.format("RP Placement : Narrowing down placement to use internal site %s for source, " + "which is currently used by RecoverPoint consistency group %s.",internalSiteNameandAssocStorageSystem,cg));        associatedStorageSystems.add(internalSiteNameandAssocStorageSystem);      } else {        associatedStorageSystems=getCandidateVisibleStorageSystems(sourcePool,candidateProtectionSystem,varray,protectionVarrays,VirtualPool.vPoolSpecifiesHighAvailability(vpool));      }      if (associatedStorageSystems.isEmpty()) {        _log.info(String.format("RP Placement: Protection System %s does not have an RP internal site connected to Storage pool %s ",candidateProtectionSystem.getLabel(),sourcePool.getLabel()));        continue;      }      for (      String associatedStorageSystem : associatedStorageSystems) {        _log.info(String.format("RP Placement : Attempting to find solution using StorageSystem : %s for RP source",associatedStorageSystem));        rpProtectionRecommendation.setProtectionDevice(candidateProtectionSystem.getId());        _log.info(String.format("RP Placement : Build RP Source Recommendation..."));        RPRecommendation rpSourceRecommendation=buildSourceRecommendation(associatedStorageSystem,varray,vpool,candidateProtectionSystem,sourcePool,capabilities,satisfiedCount,placementStatus,vpoolChangeVolume,false);        if (rpSourceRecommendation == null) {          _log.warn(String.format("RP Placement : Could not create Source Recommendation using [%s], continuing...",associatedStorageSystem));          continue;        }        candidateSourceInternalSiteName=rpSourceRecommendation.getInternalSiteName();        String siteName=candidateProtectionSystem.getRpSiteNames().get(candidateSourceInternalSiteName);        _log.info(String.format("RP Placement : Choosing RP internal site %s %s for source",siteName,candidateSourceInternalSiteName));        VirtualPoolCapabilityValuesWrapper haCapabilities=new VirtualPoolCapabilityValuesWrapper(capabilities);        haCapabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,satisfiedCount);        RPRecommendation haRecommendation=this.getHaRecommendation(varray,vpool,project,haCapabilities);        if (haRecommendation != null) {          rpSourceRecommendation.setHaRecommendation(haRecommendation);        }        RPRecommendation sourceJournalRecommendation=null;        if (rpProtectionRecommendation.getSourceJournalRecommendation() == null) {          _log.info(String.format("RP Placement : Build RP Source Journal Recommendation..."));          sourceJournalRecommendation=buildJournalRecommendation(rpProtectionRecommendation,candidateSourceInternalSiteName,vpool.getJournalSize(),journalVarray,journalVpool,candidateProtectionSystem,capabilities,totalRequestedCount,vpoolChangeVolume,false);          if (sourceJournalRecommendation == null) {            _log.warn(String.format("RP Placement : Could not create Source Journal Recommendation using [%s], continuing...",associatedStorageSystem));            continue;          }        }        rpProtectionRecommendation.getSourceRecommendations().add(rpSourceRecommendation);        rpProtectionRecommendation.setSourceJournalRecommendation(sourceJournalRecommendation);        rpProtectionRecommendation.setPlacementStepsCompleted(PlacementProgress.IDENTIFIED_SOLUTION_FOR_SOURCE);        if (placementStatus.isBestSolutionToDate(rpProtectionRecommendation)) {          placementStatus.setLatestInvalidRecommendation(rpProtectionRecommendation);        }        placementStatus.setLatestInvalidRecommendation(null);        if (findSolution(rpProtectionRecommendation,rpSourceRecommendation,varray,vpool,protectionVarrays,capabilities,satisfiedCount,false,null,project)) {          totalSatisfiedCount+=satisfiedCount;          requestedCount=requestedCount - totalSatisfiedCount;          if ((totalSatisfiedCount >= totalRequestedCount)) {            if (!verifyPlacement(candidateProtectionSystem,rpProtectionRecommendation,rpProtectionRecommendation.getResourceCount())) {              rpProtectionRecommendation.getSourceRecommendations().remove(rpSourceRecommendation);              rpProtectionRecommendation.setSourceJournalRecommendation(null);              _log.warn(String.format("RP Placement : Placement could not be verified with " + "current resources, trying placement again...",associatedStorageSystem));              continue;            }            rpProtectionRecommendation.setResourceCount(totalSatisfiedCount);            recommendations.add(rpProtectionRecommendation);            return recommendations;          } else {            break;          }        } else {          _log.info(String.format("RP Placement : Could not find a solution against ProtectionSystem %s " + "and internal site %s",candidateProtectionSystem.getLabel(),candidateSourceInternalSiteName));          rpProtectionRecommendation=getNewProtectionRecommendation(vpoolChangeVolume,vpool);        }      }      rpProtectionRecommendation=getNewProtectionRecommendation(vpoolChangeVolume,vpool);    }  }  _log.error("RP Placement : ViPR could not find matching storage pools that could be protected via RecoverPoint");  throw APIException.badRequests.cannotFindSolutionForRP(placementStatus.toString(dbClient));}  }
class C{  public static void printMasterProps(){  Debug.output("");  Debug.output("#################################################");  Debug.output("# Properties file for the ImageMaster");  Debug.output("# List of unique server nicknames (your choice).");  Debug.output("servers=<server1> <server2> <server3> <etc>");  Debug.output("");  Debug.output("# URL of server1 properties");  Debug.output("# If this is not included, it is assumed that ");  Debug.output("# the ImageServer properties reside in the ");  Debug.output("# ImageMaster properties file.");  Debug.output("server1.properties=http://<url to server1 properties>");  Debug.output("# Projection type of server1 image.");  Debug.output("server1.imageProjection=mercator");  Debug.output("# Center latitude of server1 image.");  Debug.output("server1.imageLatitude=40f");  Debug.output("# Center longitude of server1 image.");  Debug.output("server1.imageLongitude=-72f");  Debug.output("# Projection scale of server1 image.");  Debug.output("server1.imageScale=20000000");  Debug.output("# Pixel height of server1 image.");  Debug.output("server1.imageHeight=640");  Debug.output("# Pixel width of server1 image.");  Debug.output("server1.imageWidth=480");  Debug.output("# ARGB representation of the map background color (default is a saucy blue)");  Debug.output("server1.imageBackgroundColor=ffffffff");  Debug.output("# Complete path to server1 image output.");  Debug.output("server1.outputName=<path to output file>");  Debug.output("");  Debug.output("# Repeat for each server listed in the servers property");  Debug.output("#################################################");  Debug.output("");}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeWhiteSpaceInfo(this);}  }
class C{  public static Map<ComponentWrapper,CC> parseComponentConstraints(Map<ComponentWrapper,String> constrMap){  HashMap<ComponentWrapper,CC> flowConstrMap=new HashMap<ComponentWrapper,CC>();  for (Iterator<Map.Entry<ComponentWrapper,String>> it=constrMap.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<ComponentWrapper,String> entry=it.next();    flowConstrMap.put(entry.getKey(),parseComponentConstraint(entry.getValue()));  }  return flowConstrMap;}  }
class C{  public void removeKeyBinding(String keyBinding){  throw new InternalError("Not yet implemented");}  }
class C{  public static boolean isReferencePart(char ch){  return Character.isLetterOrDigit(ch) || ch == '-' || ch == '_';}  }
class C{  public static void createProject(String qualifiedModuleName,String outDir,GwtSdk gwtRuntime,IProgressMonitor monitor,String[] extraClassPath,String... templates) throws CoreException {  try {    int processStatus=ProcessUtilities.launchProcessAndWaitFor(computeWebAppCreatorCommandLine(qualifiedModuleName,outDir,gwtRuntime,templates,extraClassPath),null,System.out,null);    if (processStatus != 0) {      throw new CoreException(new Status(IStatus.ERROR,GWTPlugin.PLUGIN_ID,"Invocation of " + computeWebAppCreatorClassName() + " failed. See the error log for more details."));    }  } catch (  IOException e) {    throw new CoreException(new Status(IStatus.ERROR,GWTPlugin.PLUGIN_ID,e.getLocalizedMessage(),e));  }catch (  InterruptedException e) {    throw new CoreException(new Status(IStatus.ERROR,GWTPlugin.PLUGIN_ID,e.getLocalizedMessage(),e));  }}  }
class C{  public static PreProcessor changePrefix(String from,String to){  return mkPreProcessorWithMeta(null,new ExtensionMeta("changePrefix","changePrefix(from '" + from + "' to '"+ to+ "')",Arrays.asList(from,to)));}  }
class C{  @Override public void closeWrite() throws IOException {  _socket.closeWrite();}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(m_variable);  sb.append(" { ").append(m_script).append(" } = ").append(getResult(true));  return sb.toString();}  }
class C{  public R proceed(){  return fn.apply(param1,param2,param3);}  }
class C{  public void registerStaticFields(final Class<?>... classes){  for (  final Class<?> c : classes) {    final List<Field> fields=allFields(c);    for (    final Field field : fields) {      final int mods=field.getModifiers();      if (Modifier.isStatic(mods) && !field.getType().isPrimitive()) {        registerConstant(c,field.getName());      }    }  }}  }
class C{  public String sendInvitationHashWithDateObject(String SID,String username,String message,String baseurl,String email,String subject,Long room_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,Date fromDate,Date toDate,Long language_id,Boolean sendMail) throws AxisFault {  return this.getRoomServiceProxy().sendInvitationHashWithDateObject(SID,username,message,baseurl,email,subject,room_id,conferencedomain,isPasswordProtected,invitationpass,valid,fromDate,toDate,language_id,sendMail);}  }
class C{  public Builder metaReadRoles(List<String> metaReadRoles){  this.metaReadRoles=metaReadRoles;  return this;}  }
class C{  public static void printRootCauseStackTrace(final Throwable throwable,final PrintWriter writer){  if (throwable == null) {    return;  }  if (writer == null) {    throw new IllegalArgumentException("The PrintWriter must not be null");  }  final String trace[]=getRootCauseStackTrace(throwable);  for (  final String element : trace) {    writer.println(element);  }  writer.flush();}  }
class C{  public static int EBADSLT(){  return 57;}  }
class C{  private boolean daemon(ClusterNode n){  return "true".equalsIgnoreCase(n.<String>attribute(ATTR_DAEMON));}  }
class C{  protected void installListeners(Component c,int eventID){switch (eventID) {case EventID.ACTION:    try {      removeActionMethod=c.getClass().getMethod("removeActionListener",actionListeners);      addActionMethod=c.getClass().getMethod("addActionListener",actionListeners);      try {        removeActionMethod.invoke(c,actionArgs);        addActionMethod.invoke(c,actionArgs);      } catch (      java.lang.reflect.InvocationTargetException e) {        System.out.println("Exception: " + e.toString());      }catch (      IllegalAccessException e) {        System.out.println("Exception: " + e.toString());      }    } catch (    NoSuchMethodException e) {    }catch (    SecurityException e) {      System.out.println("Exception: " + e.toString());    }  break;case EventID.ADJUSTMENT:if (c instanceof Adjustable) {  ((Adjustable)c).removeAdjustmentListener(this);  ((Adjustable)c).addAdjustmentListener(this);}break;case EventID.COMPONENT:c.removeComponentListener(this);c.addComponentListener(this);break;case EventID.CONTAINER:if (c instanceof Container) {((Container)c).removeContainerListener(this);((Container)c).addContainerListener(this);}break;case EventID.FOCUS:c.removeFocusListener(this);c.addFocusListener(this);if (runningOnJDK1_4) {processFocusGained();} else {if ((c != componentWithFocus_private) && c.hasFocus()) {componentWithFocus_private=c;}}break;case EventID.ITEM:try {removeItemMethod=c.getClass().getMethod("removeItemListener",itemListeners);addItemMethod=c.getClass().getMethod("addItemListener",itemListeners);try {removeItemMethod.invoke(c,itemArgs);addItemMethod.invoke(c,itemArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;case EventID.KEY:c.removeKeyListener(this);c.addKeyListener(this);break;case EventID.MOUSE:c.removeMouseListener(this);c.addMouseListener(this);break;case EventID.MOTION:c.removeMouseMotionListener(this);c.addMouseMotionListener(this);break;case EventID.TEXT:try {removeTextMethod=c.getClass().getMethod("removeTextListener",textListeners);addTextMethod=c.getClass().getMethod("addTextListener",textListeners);try {removeTextMethod.invoke(c,textArgs);addTextMethod.invoke(c,textArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;case EventID.WINDOW:try {removeWindowMethod=c.getClass().getMethod("removeWindowListener",windowListeners);addWindowMethod=c.getClass().getMethod("addWindowListener",windowListeners);try {removeWindowMethod.invoke(c,windowArgs);addWindowMethod.invoke(c,windowArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;default :return;}if (c instanceof Container) {int count=((Container)c).getComponentCount();for (int i=0; i < count; i++) {installListeners(((Container)c).getComponent(i),eventID);}}}  }
class C{  @SuppressWarnings("unused") @Override protected boolean isTransactionInAdvanceOfInstallment(final int currentInstallmentIndex,final List<LoanRepaymentScheduleInstallment> installments,final LocalDate transactionDate,final Money transactionAmount){  final LoanRepaymentScheduleInstallment currentInstallment=installments.get(currentInstallmentIndex);  return transactionDate.isBefore(currentInstallment.getDueDate());}  }
class C{  private void migrateToQueue(){  removeFromStack();  cold();}  }
class C{  public AccountHeaderBuilder withSelectionSecondLine(String selectionSecondLine){  this.mSelectionSecondLine=selectionSecondLine;  return this;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  List oLista=null;  try {    oLista=UserAdminHelper.findUsers(request,oForm);  } catch (  Exception e) {  }  request.setAttribute(LISTA_USUARIOS_KEY,oLista);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public PbrpcServerHandler(ServiceLocator serviceLocator){  this.serviceLocator=(ServiceLocator<Integer>)serviceLocator;}  }
class C{  public boolean compareFacets(Facet selFacet,Facet facet){  if (selFacet.getId() == null) {    return selFacet.getDimensionId().equals(facet.getDimensionId());  } else {    return selFacet.getId().equals(facet.getId());  }}  }
class C{  public static String generateStringFromTemplate(File templateFile,Map<String,Object> parameters){  try {    Template template=getTemplate(templateFile);    Writable finishedTemplate=template.make(parameters);    return finishedTemplate.toString();  } catch (  Exception e) {    DocReporter.printError("Error whilst generating page from template " + templateFile);    DocReporter.printError(e.getMessage());    throw new RuntimeException(e);  }}  }
class C{  public List<ExpectedPartitionValueEntity> createExpectedPartitionValueProcessDates(String partitionKeyGroupName,Calendar startDate,Calendar endDate){  List<String> expectedPartitionValues=new ArrayList<>();  for (int i=0; i < 1000 && startDate.compareTo(endDate) <= 0; i++) {    if ((startDate.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY) && (startDate.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY)) {      expectedPartitionValues.add(new SimpleDateFormat(AbstractHerdDao.DEFAULT_SINGLE_DAY_DATE_MASK).format(startDate.getTime()));    }    startDate.add(Calendar.DAY_OF_MONTH,1);  }  return createExpectedPartitionValueEntities(partitionKeyGroupName,expectedPartitionValues);}  }
class C{  public static String capturePhoto(int width,int height){  CallBack c=new CallBack();  c.targetWidth=width;  c.targetHeight=height;  capturePhoto(c);  Display.getInstance().invokeAndBlock(c);  return c.url;}  }
class C{  public SipTransactionContext sendSubsequentRequest(SipDialogPath dialog,SipRequest request) throws PayloadException, NetworkException {  boolean loggerActivated=sLogger.isActivated();  try {    SessionAuthenticationAgent agent=dialog.getAuthenticationAgent();    if (agent != null) {      agent.setProxyAuthorizationHeader(request);    }    ClientTransaction transaction=createNewTransaction(request);    if (loggerActivated) {      sLogger.debug(">>> Send SIP ".concat(request.getMethod().toUpperCase()));    }    if (mSipTraceEnabled) {      System.out.println(">>> " + request.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    dialog.getStackDialog().sendRequest(transaction);    SipTransactionContext ctx=new SipTransactionContext(transaction);    String id=SipTransactionContext.getTransactionContextId(request);    mTransactions.put(id,ctx);    return ctx;  } catch (  ParseException e) {    throw new PayloadException("Unable to instantiate SIP transaction!",e);  }catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  public void abort(boolean terminateProcess){  aborted=true;  if (terminateProcess)   process.destroy();}  }
class C{  public DetachCommand(final int packetId){  super(DebugCommandType.CMD_DETACH,packetId);}  }
class C{  private File uncommentProperties(URL url) throws IOException {  InputStream in=url.openStream();  assertNotNull(in);  LineIterator it=IOUtils.lineIterator(in,"UTF-8");  Collection<String> lines=new ArrayList<>();  while (it.hasNext())   lines.add(it.nextLine().replace("#ignite.client.","ignite.client."));  IgniteUtils.closeQuiet(in);  File tmp=File.createTempFile(UUID.randomUUID().toString(),"properties");  tmp.deleteOnExit();  FileUtils.writeLines(tmp,lines);  return tmp;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void alphaLayersChanged(){  alphaLayersChanged=true;}  }
class C{  protected AISBinderContext(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void releaseLock(InterProcessLock lock){  try {    if (lock != null) {      log.info("Releasing the lock {}",lock.toString());      lock.release();      log.info("Released the lock {}",lock.toString());    }  } catch (  Exception e) {    log.error("Could not release lock");  }}  }
class C{  public RangeConditionBuilder docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  public GetRepositoriesRequest(String[] repositories){  this.repositories=repositories;}  }
class C{  public static void openImage(Context mContext,String imagePath){  Intent intent=new Intent("android.intent.action.VIEW");  intent.addCategory("android.intent.category.DEFAULT");  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  Uri uri=Uri.fromFile(new File(imagePath));  intent.setDataAndType(uri,"image/*");  mContext.startActivity(intent);}  }
class C{  public static void schedule(MailSender mailSender,Configuration mailConfiguration,String group) throws SchedulerException {  Scheduler scheduler=StdSchedulerFactory.getDefaultScheduler();  JobDetail job=JobBuilder.newJob(MailSenderJob.class).withIdentity("mail.sender",group).build();  int pollInterval=mailConfiguration.getInt(MailProperties.MAIL_SENDER_POLL_INTERVAL,MailScheduler.DEFAULT_POLL_INTERVAL);  Trigger trigger=TriggerBuilder.newTrigger().withIdentity("mail.sender.trigger",group).startNow().withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInMilliseconds(pollInterval).repeatForever()).build();  scheduler.getContext().put(MailSenderJob.MAIL_SENDER_KEY,mailSender);  scheduler.scheduleJob(job,trigger);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){  Range range=getRange();  double axisMin=range.getLowerBound();  double axisMax=range.getUpperBound();  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    max=area.getMinY();    min=area.getMaxY();  }  if (isInverted()) {    return max - ((value - axisMin) / (axisMax - axisMin)) * (max - min);  } else {    return min + ((value - axisMin) / (axisMax - axisMin)) * (max - min);  }}  }
class C{  public WrappedByteBuffer putString(String v,Charset cs){  java.nio.ByteBuffer strBuf=cs.encode(v);  _autoExpand(strBuf.limit());  _buf.put(strBuf);  return this;}  }
class C{  public boolean start(float translateX,float translateY){  if (mRunning) {    return false;  }  mStartRunTime=NEVER;  mTranslateX=translateX;  mTranslateY=translateY;  mStop=false;  mRunning=true;  mHeader.postDelayed(this,SNAP_DELAY);  return true;}  }
class C{  public DJarInfo(JFrame parent,String title,Dialog.ModalityType modality) throws IOException {  super(parent,title,modality);  initComponents();}  }
class C{  public Task<FileShareRestRep> removeExport(URI id,String protocol,String securityType,String permissions,String rootUserMapping,String subDirectory){  UriBuilder builder=client.uriBuilder(getExportsUrl() + "/{protocol},{securityType},{permissions},{rootUserMapping}");  if ((subDirectory != null) && (subDirectory.length() > 0)) {    builder.queryParam(SUBDIRECTORY_PARAM,subDirectory);  }  return deleteTaskURI(builder.build(id,protocol,securityType,permissions,rootUserMapping));}  }
class C{  public String numBoostingIterationsTipText(){  return "Set a fixed number of iterations for LogitBoost. If >= 0, this sets a fixed number of LogitBoost " + "iterations that is used everywhere in the tree. If < 0, the number is cross-validated.";}  }
class C{  public SemUpdaterEditor(SemUpdaterWrapper wrapper){  this(wrapper.getSemUpdater());}  }
class C{  protected void startHarvestTiming(){  harvestCount++;  this.lastStartHarvestingTime=System.currentTimeMillis();}  }
class C{  public void shutDown() throws PluginRuntimeException {}  }
class C{  @Override protected Class<?> findClass(final String className) throws ClassNotFoundException {  String partialName=className.replace('.','/');  final String classFileName=new StringBuilder(partialName).append(".class").toString();  String packageName=null;  int position=partialName.lastIndexOf('/');  if ((position=partialName.lastIndexOf('/')) != -1) {    packageName=partialName.substring(0,position);  }  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    Class<?> res=handler.findClass(packageName,classFileName,className);    if (res != null) {      return res;    }  }  throw new ClassNotFoundException(className);}  }
class C{  void addUndoAction(UndoAction action){  int iAction=m_undoStack.size() - 1;  while (iAction > m_nCurrentEditAction) {    m_undoStack.remove(iAction--);  }  if (m_nSavedPointer > m_nCurrentEditAction) {    m_nSavedPointer=-2;  }  m_undoStack.add(action);  m_nCurrentEditAction++;}  }
class C{  public static String convertNewLines(String string){  int index;  StringBuffer newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\n')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('n');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  string=newStringBuffer.toString();  newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\r')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('r');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  return newStringBuffer.toString();}  }
class C{  public BusinessObjectDataInvalidateUnregisteredResponse invalidateUnregisteredBusinessObjectData(BusinessObjectDataInvalidateUnregisteredRequest businessObjectDataInvalidateUnregisteredRequest){  validateRequest(businessObjectDataInvalidateUnregisteredRequest);  trimRequest(businessObjectDataInvalidateUnregisteredRequest);  BusinessObjectFormatEntity businessObjectFormatEntity=getBusinessObjectFormatEntity(businessObjectDataInvalidateUnregisteredRequest);  String storageName=businessObjectDataInvalidateUnregisteredRequest.getStorageName();  StorageEntity storageEntity=storageDaoHelper.getStorageEntity(storageName);  if (!StoragePlatformEntity.S3.equals(storageEntity.getStoragePlatform().getName())) {    throw new IllegalArgumentException("The specified storage '" + storageName + "' is not an S3 storage platform.");  }  BusinessObjectDataEntity latestBusinessObjectDataEntity=getLatestBusinessObjectDataEntity(businessObjectDataInvalidateUnregisteredRequest);  Integer latestBusinessObjectDataVersion=getBusinessObjectDataVersion(latestBusinessObjectDataEntity);  List<BusinessObjectDataKey> unregisteredBusinessObjectDataKeys=getUnregisteredBusinessObjectDataKeys(businessObjectDataInvalidateUnregisteredRequest,storageEntity,businessObjectFormatEntity,latestBusinessObjectDataVersion);  List<BusinessObjectDataEntity> registeredBusinessObjectDataEntities=registerInvalidBusinessObjectDatas(latestBusinessObjectDataEntity,businessObjectFormatEntity,unregisteredBusinessObjectDataKeys,storageEntity);  processBusinessObjectDataStatusChangeNotificationEvents(registeredBusinessObjectDataEntities);  return getBusinessObjectDataInvalidateUnregisteredResponse(businessObjectDataInvalidateUnregisteredRequest,registeredBusinessObjectDataEntities);}  }
class C{  public void addNameBaseEventType(String nameBaseEventType){  nameBaseEventTypes.add(nameBaseEventType);}  }
class C{  private void deactivateAllServices(Marketplace mp,DataService dm){  String mId=mp.getMarketplaceId();  Query query=dm.createNamedQuery("Product.getTemplatesForMarketplace");  query.setParameter("marketplaceId",mId);  List<Product> productList=ParameterizedTypes.list(query.getResultList(),Product.class);  if (productList != null) {    for (    Product product : productList) {      if (product.getStatus() == ServiceStatus.ACTIVE) {        product.setStatus(ServiceStatus.INACTIVE);      }      deactivateCustomerServices(product);    }  }}  }
class C{  public static double findMaxEig(double[][] weightMatrix){  Factory<?> mf=PrimitiveMatrix.FACTORY;  Builder<?> tmpBuilder=mf.getBuilder(weightMatrix.length,weightMatrix[0].length);  for (int i=0; i < tmpBuilder.countRows(); i++) {    for (int j=0; j < tmpBuilder.countColumns(); j++) {      tmpBuilder.set(i,j,weightMatrix[i][j]);    }  }  BasicMatrix mat=(BasicMatrix)tmpBuilder.build();  List<ComplexNumber> eigs=mat.getEigenvalues();  double maxEig=0.0;  for (int i=0, n=eigs.size(); i < n; i++) {    if (Math.abs(eigs.get(i).getReal()) > maxEig) {      maxEig=Math.abs(eigs.get(i).getReal());    }  }  return maxEig;}  }
class C{  public Index findIndex(Session session,String name){  Index index=indexes.get(name);  if (index == null) {    index=session.findLocalTempTableIndex(name);  }  return index;}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void updateTouchExplorationState(){  final CheckBoxPreference prefTouchExploration=(CheckBoxPreference)findPreferenceByResId(R.string.pref_explore_by_touch_reflect_key);  if (prefTouchExploration == null) {    return;  }  final ContentResolver resolver=getContentResolver();  final Resources res=getResources();  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);  final boolean requestedState=SharedPreferencesUtils.getBooleanPref(prefs,res,R.string.pref_explore_by_touch_key,R.bool.pref_explore_by_touch_default);  final boolean reflectedState=prefTouchExploration.isChecked();  final boolean actualState;  if (TalkBackService.isServiceActive()) {    actualState=isTouchExplorationEnabled(resolver);  } else {    actualState=requestedState;  }  if (requestedState != actualState) {    LogUtils.log(this,Log.DEBUG,"Set touch exploration preference to reflect actual state %b",actualState);    SharedPreferencesUtils.putBooleanPref(prefs,res,R.string.pref_explore_by_touch_key,actualState);  }  if (reflectedState != actualState) {    prefTouchExploration.setChecked(actualState);  }}  }
class C{  public TransformObjectiveOscillate(BBOBFunction function){  super(function);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer(bits.length / 2);  int bitCount=0;  sb.append('{');  boolean comma=false;  for (int i=0; i < bits.length; i++) {    if (bits[i] == 0) {      bitCount+=ELM_SIZE;      continue;    }    for (int j=0; j < ELM_SIZE; j++) {      if (((bits[i] & (TWO_N_ARRAY[j])) != 0)) {        if (comma) {          sb.append(", ");        }        sb.append(bitCount);        comma=true;      }      bitCount++;    }  }  sb.append('}');  return sb.toString();}  }
class C{  public DefaultCoordinateSequence(Coordinate[] coordinates){  if (Geometry.hasNullElements(coordinates)) {    throw new IllegalArgumentException("Null coordinate");  }  this.coordinates=coordinates;}  }
class C{  private boolean _removeActivity(Activity a){  boolean r;synchronized (this) {    r=m_activities.remove(a);    if (r) {      if (m_activities.size() == 0) {        m_nextTime=Long.MAX_VALUE;      }    }  }  if (r) {    a.setScheduled(false);  }  return r;}  }
class C{  public int invokeCompiler(){  List<String> args=getExecArguments();  for (int i=0; i < args.size(); i++) {    String arg=args.get(i);    if (arg.startsWith("-AoutputArgsToFile=")) {      String fileName=arg.substring(19);      args.remove(i);      outputArgumentsToFile(fileName,args);      break;    }  }  return ExecUtil.execute(args.toArray(new String[args.size()]),System.out,System.err);}  }
class C{  private static void initializeStatics(){  InvokeeThreadLocalContext.init();}  }
class C{  @SuppressWarnings("unchecked") @Action(value="/voucher/common-ajaxLoadBanksAccountsWithAssignedRTGS") public String ajaxLoadBanksAccountsWithAssignedRTGS(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Starting ajaxLoadBanksAccountsWithAssignedCheques...");  try {    accNumList=new ArrayList<Bankaccount>();    StringBuffer queryString=new StringBuffer();    queryString=queryString.append("select bankaccount.accountnumber as accountnumber,bankaccount.accounttype as accounttype,cast(bankaccount.id as integer) as id,coa.glcode as glCode " + " from  voucherheader vh,chartofaccounts coa,Bank bank,Bankbranch bankBranch,Bankaccount bankaccount,paymentheader ph,  " + "egf_instrumentvoucher eiv,egf_instrumentheader ih,egw_status egws ").append("where ph.voucherheaderid=vh.id and coa.id=bankaccount.glcodeid and vh.id=eiv.VOUCHERHEADERID and ").append("  eiv.instrumentheaderid=ih.id and egws.id=ih.id_status and egws.moduletype='Instrument' and egws.description='New' and ih.transactionNumber is not null").append("and ih.instrumenttype=(select id from egf_instrumenttype where upper(type)='CHEQUE') and ispaycheque=1 ").append(" and bank.isactive=true  and bankBranch.isactive=true and bankaccount.isactive=true ").append(" and bank.id = bankBranch.bankid and bankBranch.id = bankaccount.branchid and bankaccount.branchid=" + branchId + "  and bankaccount.type in ('RECEIPTS_PAYMENTS','PAYMENTS') and vh.voucherdate <= :date");    queryString=queryString.append(" and ph.bankaccountnumberid=bankaccount.id  order by vh.voucherdate desc");    final List<Object[]> bankAccounts=persistenceService.getSession().createSQLQuery(queryString.toString()).setDate("date",getAsOnDate()).list();    if (LOGGER.isDebugEnabled())     LOGGER.debug("Bank list size is " + bankAccounts.size());    final List<String> addedBanks=new ArrayList<String>();    for (    final Object[] account : bankAccounts) {      final String accountNumberAndType=account[0].toString() + "-" + account[1].toString();      if (!addedBanks.contains(accountNumberAndType)) {        final Bankaccount bankaccount=new Bankaccount();        bankaccount.setAccountnumber(account[0].toString());        bankaccount.setAccounttype(account[1].toString());        bankaccount.setId(Long.valueOf(account[2].toString()));        final CChartOfAccounts chartofaccounts=new CChartOfAccounts();        chartofaccounts.setGlcode(account[3].toString());        bankaccount.setChartofaccounts(chartofaccounts);        addedBanks.add(accountNumberAndType);        accNumList.add(bankaccount);      }    }  } catch (  final HibernateException e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new HibernateException(e.getMessage()));  }catch (  final Exception e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new Exception(e.getMessage()));  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Completed ajaxLoadBanksAccountsWithAssignedCheques.");  return "bankAccNum";}  }
class C{  @Override protected void addSubView(View child,int index){  if (child == null || getRealView() == null) {    return;  }  if (child instanceof WXBaseRefreshLayout) {    return;  }  int count=getRealView().getChildCount();  index=index >= count ? -1 : index;  if (index == -1) {    getRealView().addView(child);  } else {    getRealView().addView(child,index);  }}  }
class C{  public static void initialize(){  threadMXBean=ManagementFactory.getThreadMXBean();  isCPUEnabled=threadMXBean.isCurrentThreadCpuTimeSupported();  if (!isCPUEnabled) {    log.warn("CPU metrics reporting is not enabled by Java VM");  }}  }
class C{  public static boolean isValid(NodeClass nodeClass,UnsignedInteger attributeId){  int ordinalNodeClass=nodeClass.ordinal();  if (attributeId.equals(Attributes.NodeId) || attributeId.equals(Attributes.NodeClass) || attributeId.equals(Attributes.BrowseName)|| attributeId.equals(Attributes.DisplayName)|| attributeId.equals(Attributes.Description)|| attributeId.equals(Attributes.WriteMask)|| attributeId.equals(Attributes.UserWriteMask)) {    return true;  }  if (attributeId.equals(Attributes.Value) || attributeId.equals(Attributes.DataType) || attributeId.equals(Attributes.ValueRank)) {    return (ordinalNodeClass & (org.opcfoundation.ua.core.NodeClass.VariableType.ordinal() | org.opcfoundation.ua.core.NodeClass.Variable.ordinal())) != 0;  }  if (attributeId.equals(Attributes.IsAbstract)) {    return (ordinalNodeClass & (org.opcfoundation.ua.core.NodeClass.VariableType.ordinal() | org.opcfoundation.ua.core.NodeClass.ObjectType.ordinal() | org.opcfoundation.ua.core.NodeClass.DataType.ordinal()| org.opcfoundation.ua.core.NodeClass.ReferenceType.ordinal())) != 0;  }  if (attributeId.equals(Attributes.Symmetric) || attributeId.equals(Attributes.InverseName)) {    return (ordinalNodeClass & org.opcfoundation.ua.core.NodeClass.ReferenceType.ordinal()) != 0;  }  if (attributeId.equals(Attributes.ContainsNoLoops)) {    return (ordinalNodeClass & org.opcfoundation.ua.core.NodeClass.View.ordinal()) != 0;  }  if (attributeId.equals(Attributes.EventNotifier)) {    return (ordinalNodeClass & (org.opcfoundation.ua.core.NodeClass.Object.ordinal() | org.opcfoundation.ua.core.NodeClass.View.ordinal())) != 0;  }  if (attributeId.equals(Attributes.AccessLevel) || attributeId.equals(Attributes.UserAccessLevel) || attributeId.equals(Attributes.MinimumSamplingInterval)|| attributeId.equals(Attributes.Historizing)) {    return (ordinalNodeClass & org.opcfoundation.ua.core.NodeClass.Variable.ordinal()) != 0;  }  if (attributeId.equals(Attributes.ArrayDimensions)) {    return (ordinalNodeClass & (org.opcfoundation.ua.core.NodeClass.Variable.ordinal() | org.opcfoundation.ua.core.NodeClass.VariableType.ordinal())) != 0;  }  if (attributeId.equals(Attributes.Executable) || attributeId.equals(Attributes.UserExecutable)) {    return (ordinalNodeClass & org.opcfoundation.ua.core.NodeClass.Method.ordinal()) != 0;  }  return false;}  }
class C{  public static HashMap<Integer,DNAStrand> createDNAStrands(int firstJulianDay,ArrayList<Event> events,int top,int bottom,int minPixels,int[] dayXs,Context context){  if (!mMinutesLoaded) {    if (context == null) {      Log.wtf(TAG,"No context and haven't loaded parameters yet! Can't create DNA.");    }    Resources res=context.getResources();    CONFLICT_COLOR=res.getColor(R.color.month_dna_conflict_time_color);    WORK_DAY_START_MINUTES=res.getInteger(R.integer.work_start_minutes);    WORK_DAY_END_MINUTES=res.getInteger(R.integer.work_end_minutes);    WORK_DAY_END_LENGTH=DAY_IN_MINUTES - WORK_DAY_END_MINUTES;    WORK_DAY_MINUTES=WORK_DAY_END_MINUTES - WORK_DAY_START_MINUTES;    mMinutesLoaded=true;  }  if (events == null || events.isEmpty() || dayXs == null || dayXs.length < 1 || bottom - top < 8 || minPixels < 0) {    Log.e(TAG,"Bad values for createDNAStrands! events:" + events + " dayXs:"+ Arrays.toString(dayXs)+ " bot-top:"+ (bottom - top)+ " minPixels:"+ minPixels);    return null;  }  LinkedList<DNASegment> segments=new LinkedList<DNASegment>();  HashMap<Integer,DNAStrand> strands=new HashMap<Integer,DNAStrand>();  DNAStrand blackStrand=new DNAStrand();  blackStrand.color=CONFLICT_COLOR;  strands.put(CONFLICT_COLOR,blackStrand);  int minMinutes=minPixels * 4 * WORK_DAY_MINUTES / (3 * (bottom - top));  int minOtherMinutes=minMinutes * 5 / 2;  int lastJulianDay=firstJulianDay + dayXs.length - 1;  Event event=new Event();  for (  Event currEvent : events) {    if (currEvent.endDay < firstJulianDay || currEvent.startDay > lastJulianDay) {      continue;    }    if (currEvent.drawAsAllday()) {      addAllDayToStrands(currEvent,strands,firstJulianDay,dayXs.length);      continue;    }    currEvent.copyTo(event);    if (event.startDay < firstJulianDay) {      event.startDay=firstJulianDay;      event.startTime=0;    }    if (event.startTime > DAY_IN_MINUTES - minOtherMinutes) {      event.startTime=DAY_IN_MINUTES - minOtherMinutes;    }    if (event.endDay > lastJulianDay) {      event.endDay=lastJulianDay;      event.endTime=DAY_IN_MINUTES - 1;    }    if (event.endTime < minOtherMinutes) {      event.endTime=minOtherMinutes;    }    if (event.startDay == event.endDay && event.endTime - event.startTime < minOtherMinutes) {      if (event.startTime < WORK_DAY_START_MINUTES) {        event.endTime=Math.min(event.startTime + minOtherMinutes,WORK_DAY_START_MINUTES + minMinutes);      } else       if (event.endTime > WORK_DAY_END_MINUTES) {        event.endTime=Math.min(event.endTime + minOtherMinutes,DAY_IN_MINUTES - 1);        if (event.endTime - event.startTime < minOtherMinutes) {          event.startTime=event.endTime - minOtherMinutes;        }      }    }    if (segments.size() == 0) {      addNewSegment(segments,event,strands,firstJulianDay,0,minMinutes);      continue;    }    DNASegment lastSegment=segments.getLast();    int startMinute=(event.startDay - firstJulianDay) * DAY_IN_MINUTES + event.startTime;    int endMinute=Math.max((event.endDay - firstJulianDay) * DAY_IN_MINUTES + event.endTime,startMinute + minMinutes);    if (startMinute < 0) {      startMinute=0;    }    if (endMinute >= WEEK_IN_MINUTES) {      endMinute=WEEK_IN_MINUTES - 1;    }    if (startMinute < lastSegment.endMinute) {      int i=segments.size();      while (--i >= 0 && endMinute < segments.get(i).startMinute)       ;      DNASegment currSegment;      for (; i >= 0 && startMinute <= (currSegment=segments.get(i)).endMinute; i--) {        if (currSegment.color == CONFLICT_COLOR) {          continue;        }        if (endMinute < currSegment.endMinute - minMinutes) {          DNASegment rhs=new DNASegment();          rhs.endMinute=currSegment.endMinute;          rhs.color=currSegment.color;          rhs.startMinute=endMinute + 1;          rhs.day=currSegment.day;          currSegment.endMinute=endMinute;          segments.add(i + 1,rhs);          strands.get(rhs.color).count++;          if (DEBUG) {            Log.d(TAG,"Added rhs, curr:" + currSegment.toString() + " i:"+ segments.get(i).toString());          }        }        if (startMinute > currSegment.startMinute + minMinutes) {          DNASegment lhs=new DNASegment();          lhs.startMinute=currSegment.startMinute;          lhs.color=currSegment.color;          lhs.endMinute=startMinute - 1;          lhs.day=currSegment.day;          currSegment.startMinute=startMinute;          segments.add(i++,lhs);          strands.get(lhs.color).count++;          if (DEBUG) {            Log.d(TAG,"Added lhs, curr:" + currSegment.toString() + " i:"+ segments.get(i).toString());          }        }        if (i + 1 < segments.size()) {          DNASegment rhs=segments.get(i + 1);          if (rhs.color == CONFLICT_COLOR && currSegment.day == rhs.day && rhs.startMinute <= currSegment.endMinute + 1) {            rhs.startMinute=Math.min(currSegment.startMinute,rhs.startMinute);            segments.remove(currSegment);            strands.get(currSegment.color).count--;            currSegment=rhs;          }        }        if (i - 1 >= 0) {          DNASegment lhs=segments.get(i - 1);          if (lhs.color == CONFLICT_COLOR && currSegment.day == lhs.day && lhs.endMinute >= currSegment.startMinute - 1) {            lhs.endMinute=Math.max(currSegment.endMinute,lhs.endMinute);            segments.remove(currSegment);            strands.get(currSegment.color).count--;            currSegment=lhs;            i--;          }        }        if (currSegment.color != CONFLICT_COLOR) {          strands.get(currSegment.color).count--;          currSegment.color=CONFLICT_COLOR;          strands.get(CONFLICT_COLOR).count++;        }      }    }    if (endMinute > lastSegment.endMinute) {      addNewSegment(segments,event,strands,firstJulianDay,lastSegment.endMinute,minMinutes);    }  }  weaveDNAStrands(segments,firstJulianDay,strands,top,bottom,dayXs);  return strands;}  }
class C{  public CommonDialogWindow buildCommonDialogWindow(){  final CommonDialogWindow window=new CommonDialogWindow(caption,content,helpLink,saveDialogCloseListener,cancelButtonClickListener,layout,i18n);  decorateWindow(window);  return window;}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  int cursor1=tmpBase;  int cursor2=base2;  int dest=base1;  System.arraycopy(a,base1,tmp,cursor1,len1);  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len2 == 0;    assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getElementPosition_();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:    return basicSetOwner(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static ColorModel createComponentColorModel(SampleModel sm){  int type=sm.getDataType();  int bands=sm.getNumBands();  ComponentColorModel cm=null;  if (type == DataBuffer.TYPE_BYTE) {switch (bands) {case 1:      cm=colorModelGray8;    break;case 2:  cm=colorModelGrayAlpha8;break;case 3:cm=colorModelRGB8;break;case 4:cm=colorModelRGBA8;break;}} else if (type == DataBuffer.TYPE_USHORT) {switch (bands) {case 1:cm=colorModelGray16;break;case 2:cm=colorModelGrayAlpha16;break;case 3:cm=colorModelRGB16;break;case 4:cm=colorModelRGBA16;break;}} else if (type == DataBuffer.TYPE_INT) {switch (bands) {case 1:cm=colorModelGray32;break;case 2:cm=colorModelGrayAlpha32;break;case 3:cm=colorModelRGB32;break;case 4:cm=colorModelRGBA32;break;}}return cm;}  }
class C{  private IPoint[] intersects(ICircle circle,ICircle circle2){  double a=circle.getX();  double b=circle.getY();  double r=circle.getRadius();  double c=circle2.getX();  double d=circle2.getY();  double s=circle2.getRadius();  double D=Math.sqrt((a - c) * (a - c) + (b - d) * (b - d));  double A=Math.sqrt((D + r + s) * (D + r - s) * (D - r + s)* (-D + r + s)) / 4;  double xBase=(a + c) / 2 - (a - c) * (r * r - s * s) / (2 * D * D);  double xDelta=2 * (b - d) * A / (D * D);  double yBase=(b + d) / 2 - (b - d) * (r * r - s * s) / (2 * D * D);  double yDelta=2 * (a - c) * A / (D * D);  if (FloatingPoint.lesserEquals(Math.abs(r - s),D) && FloatingPoint.lesserEquals(D,Math.abs(r + s))) {    IPoint[] vals=new IPoint[]{new TwoDPoint(xBase + xDelta,yBase - yDelta),new TwoDPoint(xBase - xDelta,yBase + yDelta)};    if (vals[0].equals(vals[1])) {      return new IPoint[]{vals[0]};    } else {      return vals;    }  } else {    return null;  }}  }
class C{  public static String prettyXml(String xmlContent) throws IOException, TransformerFactoryConfigurationError, TransformerException, SAXException, ParserConfigurationException {  Document doc=createDocumentFromXml(xmlContent);  return prettyXml(doc);}  }
class C{  public synchronized void write(byte[] buf,int off,int len) throws IOException {  super.write(buf,off,len);  crc.update(buf,off,len);}  }
class C{  public static String[] align(String from,String to,Mode alignMode){  String result[]=null;  PathParser.PathDataNode[] fromList=PathParser.createNodesFromPathData(from);  PathParser.PathDataNode[] toList=PathParser.createNodesFromPathData(to);  System.out.println("Sequences sizes: " + fromList.length + " / "+ toList.length);  if (PathParser.canMorph(fromList,toList)) {    result=new String[]{from,to};    System.out.println(" >> Paths are already morphable!!! Leaving sequences untouched <<");  } else {    boolean equivalent=false;    int extraCloneNodes=0;    ArrayList<PathParser.PathDataNode> alignedFrom=null;    ArrayList<PathParser.PathDataNode> alignedTo=null;    for (int i=0; i < MAX_ALIGN_ITERATIONS && !equivalent; i++) {      System.out.println(i + ". align iteration...");      NWAlignment nw=new NWAlignment(PathNodeUtils.transform(fromList,extraCloneNodes,true),PathNodeUtils.transform(toList,extraCloneNodes,true));      nw.align();      alignedFrom=nw.getAlignedFrom();      alignedTo=nw.getAlignedTo();      equivalent=PathNodeUtils.isEquivalent(nw.getOriginalFrom(),nw.getAlignedFrom()) && PathNodeUtils.isEquivalent(nw.getOriginalTo(),nw.getAlignedTo());      if (equivalent) {        System.out.println("Alignment found!");        System.out.println(PathNodeUtils.pathNodesToString(nw.getAlignedFrom(),true));        System.out.println(PathNodeUtils.pathNodesToString(nw.getAlignedTo(),true));      }      extraCloneNodes++;    }    if (!equivalent) {      System.err.println("Unable to NW-align lists!");      return null;    } else {      System.out.println("Sequence aligned! (" + alignedFrom.size() + " elements)");    }    AbstractFillMode fillMode=null;switch (alignMode) {case BASE:      fillMode=new BaseFillMode();    break;}fillMode.fillInjectedNodes(alignedFrom,alignedTo);PathNodeUtils.simplify(alignedFrom,alignedTo);result=new String[]{PathNodeUtils.pathNodesToString(alignedFrom),PathNodeUtils.pathNodesToString(alignedTo)};}return result;}  }
class C{  public String dump(){  StringBuilder buffer=new StringBuilder();  for (int row=0; row < getRowCount(); row++) {    buffer.append(timestamps[row]);    buffer.append(":  ");    for (int dsIndex=0; dsIndex < getColumnCount(); dsIndex++) {      buffer.append(Util.formatDouble(values[dsIndex][row],true));      buffer.append("  ");    }    buffer.append("\n");  }  return buffer.toString();}  }
class C{  public synchronized void start() throws IOException, ConfigurationException {  logger.info("Connecting client to server: host=" + host + " port="+ port+ " useSSL="+ useSSL+ " sleepMillis="+ sleepMillis);  socket=new ClientSocketWrapper();  socket.setAddress(new InetSocketAddress(host,port));  socket.setUseSSL(useSSL);  socket.connect();  clientThread=new Thread(this);  clientName=clientThread.getName();  clientThread.start();  logger.info("Spawned client thread: " + clientName);}  }
class C{  public static int sp2px(Context context,float spValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(spValue * fontScale + 0.5f);}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || tx.getType() != (tx.getType() & AffineTransform.TYPE_TRANSLATION)) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    for (int i=0; i < coordinates.length; i++) {      tx.transform(coordinates[i],coordinates[i]);    }    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  public boolean isFcoeActive(){  return fcoeActive;}  }
class C{  public LifecycleException(Throwable throwable){  this(null,throwable);}  }
class C{  void onStartTrackingTouch(){  mIsDragging=true;}  }
class C{  private long allocateNodeAddr(final int nbytes){  if (!bufferNodes)   throw new UnsupportedOperationException();  final long offset=nodeAddrFactory.get();  nodeAddrFactory.addAndGet(nbytes);  final long addr1=addressManager.toAddr((int)nbytes,offset);  return addr1;}  }
class C{  public Solution search(INode initial,INode goal){  INodeSet open=StateStorageFactory.create(StateStorageFactory.PRIORITY_RETRIEVAL);  INode copy=initial.copy();  scoringFunction.score(copy);  open.insert(copy);  INodeSet closed=StateStorageFactory.create(closedStorage);  while (!open.isEmpty()) {    INode best=open.remove();    if (best.equals(goal)) {      numOpen=open.size();      numClosed=closed.size();      return new Solution(initial,best);    }    closed.insert(best);    DepthTransition trans=(DepthTransition)best.storedData();    int depth=1;    if (trans != null) {      depth=trans.depth + 1;    }    for (    IMove move : best.validMoves()) {      INode successor=best.copy();      move.execute(successor);      numMoves++;      if (closed.contains(successor) != null) {        continue;      }      successor.storedData(new DepthTransition(move,best,depth));      scoringFunction.score(successor);      INode exist=open.contains(successor);      if (exist == null || successor.score() < exist.score()) {        if (exist != null) {          open.remove(exist);        }        open.insert(successor);      }    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,false);}  }
class C{  protected void initTitleBarStatus(){  if (getUIManager().isThemeConstant("paintsTitleBarBool",false)) {    if (((BorderLayout)getLayout()).getNorth() == null) {      Container bar=new Container();      bar.setUIID("StatusBar");      addComponent(BorderLayout.NORTH,bar);    }  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,long startTime,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,startTime,duration);  mScrollerY.startScroll(startY,dy,startTime,duration);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean wrapIndex=getBool(stack);  int offset=getInt(stack);  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    ZComp focusOwner=uiComp.getLastFocusedChild();    if (focusOwner instanceof ZPseudoComp) {      ZPseudoComp focusComp=(ZPseudoComp)focusOwner;      ZDataTable tabParent=focusComp.getTableParent();      if (tabParent != null) {        Object o1=focusComp.getRelatedContext().safeLookup("TableRow");        int tablePosition=o1 != null ? (Integer.parseInt(o1.toString()) - 1) : 0;        return tabParent.getTableDataFromOffset(tablePosition + offset,wrapIndex);      }    } else {      ZDataTable tabParent=uiComp.getTableParent();      if (tabParent != null) {        return tabParent.getTableDataFromOffset(offset,wrapIndex);      }    }  }  return null;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void putString(String s) throws ArrayIndexOutOfBoundsException, UnsupportedEncodingException {  byte[] bytes=s.getBytes("UTF-8");  int length=bytes.length;  int endAt=m_index + length + 1;  if (endAt > m_content.length)   throw new ArrayIndexOutOfBoundsException(endAt + " > " + m_content.length);  System.arraycopy(bytes,0,m_content,m_index,length);  m_index+=length;  m_content[m_index++]='\0';  debugAppendString(s);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  }  finally {    try {      if (bais != null) {        bais.close();      }    } catch (    Exception ignored) {    }    try {      if (ois != null) {        ois.close();      }    } catch (    Exception ignored) {    }  }  return obj;}  }
class C{  private void storeField(Field field,StructImpl fieldsMap){  String fieldName=field.getName();  Object o=fieldsMap.get(fieldName,null);  Field[] args;  if (o == null) {    args=new Field[1];    fieldsMap.setEL(fieldName,args);  } else {    Field[] fs=(Field[])o;    args=new Field[fs.length + 1];    for (int i=0; i < fs.length; i++) {      fs[i].setAccessible(true);      args[i]=fs[i];    }    fieldsMap.setEL(fieldName,args);  }  args[args.length - 1]=field;}  }
class C{  public static Ed25519GroupElement scalarMultiplyGroupElement(final Ed25519GroupElement g,final Ed25519FieldElement f){  final byte[] bytes=f.encode().getRaw();  Ed25519GroupElement h=Ed25519Group.ZERO_P3;  for (int i=254; i >= 0; i--) {    h=doubleGroupElement(h);    if (ArrayUtils.getBit(bytes,i) == 1) {      h=addGroupElements(h,g);    }  }  return h;}  }
class C{  public void testMoveRenameDirectoryDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.503 -0500",hash_original_method="65087DC5D7FD1CF215D9AA1C8C99653A",hash_generated_method="DC77B6515A50DDA9A7C60FFC96CAD866") public static ProgramStore BLEND_NONE_DEPTH_NONE(RenderScript rs){  if (rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.ALWAYS);    builder.setBlendFunc(BlendSrcFunc.ONE,BlendDstFunc.ZERO);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(false);    rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH=builder.create();  }  return rs.mProgramStore_BLEND_NONE_DEPTH_NO_DEPTH;}  }
class C{  public static final Date endOfMonth(final Date d){  final int m=d.month().value();  final int y=d.year();  return new Date(monthLength(m,isLeap(y)),m,y);}  }
class C{  private void loadInfo(int C_ValidCombination_ID,int C_AcctSchema_ID){  log.fine("C_ValidCombination_ID=" + C_ValidCombination_ID);  String sql="SELECT * FROM C_ValidCombination WHERE C_ValidCombination_ID=? AND C_AcctSchema_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_ValidCombination_ID);    pstmt.setInt(2,C_AcctSchema_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      if (f_Alias != null)       f_Alias.setValue(rs.getString("Alias"));      f_Combination.setValue(rs.getString("Combination"));      loadInfoOf(rs,f_AD_Org_ID,"AD_Org_ID");      loadInfoOf(rs,f_Account_ID,"Account_ID");      loadInfoOf(rs,f_SubAcct_ID,"C_SubAcct_ID");      loadInfoOf(rs,f_M_Product_ID,"M_Product_ID");      loadInfoOf(rs,f_C_BPartner_ID,"C_BPartner_ID");      loadInfoOf(rs,f_C_Campaign_ID,"C_Campaign_ID");      loadInfoOf(rs,f_C_LocFrom_ID,"C_LocFrom_ID");      loadInfoOf(rs,f_C_LocTo_ID,"C_LocTo_ID");      loadInfoOf(rs,f_C_Project_ID,"C_Project_ID");      loadInfoOf(rs,f_C_SalesRegion_ID,"C_SalesRegion_ID");      loadInfoOf(rs,f_AD_OrgTrx_ID,"AD_OrgTrx_ID");      loadInfoOf(rs,f_C_Activity_ID,"C_Activity_ID");      loadInfoOf(rs,f_User1_ID,"User1_ID");      loadInfoOf(rs,f_User2_ID,"User2_ID");      f_Description.setText(rs.getString("Description"));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  static void mklink(File source,File target) throws IOException {  Files.createSymbolicLink(source.toPath(),target.toPath());}  }
class C{  public boolean hasGeoRssWhere(){  return hasExtension(GeoRssWhere.class);}  }
class C{  protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt,Object bean,TokenBuffer unknownTokens) throws IOException, JsonProcessingException {  JsonDeserializer<Object> subDeser;synchronized (this) {    subDeser=(_subDeserializers == null) ? null : _subDeserializers.get(new ClassKey(bean.getClass()));  }  if (subDeser != null) {    return subDeser;  }  DeserializerProvider deserProv=ctxt.getDeserializerProvider();  if (deserProv != null) {    JavaType type=ctxt.constructType(bean.getClass());    subDeser=deserProv.findValueDeserializer(ctxt.getConfig(),type,_property);    if (subDeser != null) {synchronized (this) {        if (_subDeserializers == null) {          _subDeserializers=new HashMap<ClassKey,JsonDeserializer<Object>>();          ;        }        _subDeserializers.put(new ClassKey(bean.getClass()),subDeser);      }    }  }  return subDeser;}  }
class C{  public UnloadStrandedTurn(Iterator<Entity> entities){  super(IPlayer.PLAYER_NONE);  if (null == entities) {    throw new IllegalArgumentException("the passed enumeration of entities is null");  }  if (!entities.hasNext()) {    throw new IllegalArgumentException("the passed enumeration of entities is empty");  }  Entity entity=entities.next();  if (entities.hasNext()) {    int[] ids=new int[entity.game.getNoOfEntities()];    int length=0;    ids[length++]=entity.getId();    while (entities.hasNext()) {      ids[length++]=entities.next().getId();    }    entityIds=new int[length];    System.arraycopy(ids,0,entityIds,0,length);  } else {    entityIds=new int[1];    entityIds[0]=entity.getId();  }}  }
class C{  public boolean isIncludeDefault(){  return includeDefault;}  }
class C{  public String globalInfo(){  return "ReliefFAttributeEval :\n\nEvaluates the worth of an attribute by " + "repeatedly sampling an instance and considering the value of the " + "given attribute for the nearest instance of the same and different "+ "class. Can operate on both discrete and continuous class data.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(getArea(),stream);}  }
class C{  public String next() throws java.io.IOException {  int yy_input;  int yy_action;  int yy_currentPos_l;  int yy_startRead_l;  int yy_markedPos_l;  int yy_endRead_l=yy_endRead;  char[] yy_buffer_l=yy_buffer;  char[] yycmap_l=yycmap;  int[] yytrans_l=yytrans;  int[] yy_rowMap_l=yy_rowMap;  byte[] yy_attr_l=YY_ATTRIBUTE;  while (true) {    yy_markedPos_l=yy_markedPos;    yy_action=-1;    yy_startRead_l=yy_currentPos_l=yy_currentPos=yy_startRead=yy_markedPos_l;    yy_state=yy_lexical_state;    yy_forAction: {      while (true) {        if (yy_currentPos_l < yy_endRead_l)         yy_input=yy_buffer_l[yy_currentPos_l++]; else         if (yy_atEOF) {          yy_input=YYEOF;          break yy_forAction;        } else {          yy_currentPos=yy_currentPos_l;          yy_markedPos=yy_markedPos_l;          boolean eof=yy_refill();          yy_currentPos_l=yy_currentPos;          yy_markedPos_l=yy_markedPos;          yy_buffer_l=yy_buffer;          yy_endRead_l=yy_endRead;          if (eof) {            yy_input=YYEOF;            break yy_forAction;          } else {            yy_input=yy_buffer_l[yy_currentPos_l++];          }        }        int yy_next=yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];        if (yy_next == -1)         break yy_forAction;        yy_state=yy_next;        int yy_attributes=yy_attr_l[yy_state];        if ((yy_attributes & 1) == 1) {          yy_action=yy_state;          yy_markedPos_l=yy_currentPos_l;          if ((yy_attributes & 8) == 8)           break yy_forAction;        }      }    }    yy_markedPos=yy_markedPos_l;switch (yy_action) {case 32:{        return ("N'T");      }case 40:    break;case 31:{    return ("n't");  }case 41:break;case 10:case 11:{return (yytext().substring(1,yytext().length()));}case 42:break;case 1:case 3:case 5:case 6:case 7:case 8:case 19:case 20:case 29:case 30:case 35:case 36:{return (yytext());}case 43:break;case 2:{return (yytext());}case 44:break;case 4:{return (yytext());}case 45:break;case 24:{return ("\"");}case 46:break;case 23:{return ("$");}case 47:break;case 22:{return ("[");}case 48:break;case 21:{return ("(");}case 49:break;case 15:{return (")");}case 50:break;case 16:{return ("]");}case 51:break;case 17:{return ("%");}case 52:break;case 18:{return ("`");}case 53:break;default :if (yy_input == YYEOF && yy_startRead == yy_currentPos) {yy_atEOF=true;{return (null);}} else {yy_ScanError(YY_NO_MATCH);}}}}  }
class C{  public static int generate(int crc,String value){  if (value == null) {    return crc;  }  int len=value.length();  for (int i=0; i < len; i++) {    char ch=value.charAt(i);    if (ch > 0xff)     crc=next(crc,(ch >> 8));    crc=next(crc,ch);  }  return crc;}  }
class C{  protected void revealInEditor(TreeElement<?,?> treeElement,boolean activate){  Object data=treeElement.getData();  if (data instanceof SourceLocationTag) {    IProject project=fTaintMarker.getResource().getProject();    DroidsafePluginUtilities.revealInEditor(project,(SourceLocationTag)data,activate);  }}  }
class C{  public Session(){}  }
class C{  public static ChainingJsonWriter writeJson(Collection<ICalendar> icals){  return new ChainingJsonWriter(icals);}  }
class C{  @Override public WebTarget target(String s){  return this.target(URI.create(s));}  }
class C{  public int writeGamma(int x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(GAMMA[x],GAMMA[x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int l=writeUnary(msb);  return l + (msb != 0 ? writeInt(x,msb) : 0);}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.IMPORT_DECLARATION;}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  protected void applyPatch(State currentState,State patchState){  if (patchState.taskInfo != null) {    if (patchState.taskInfo.stage != currentState.taskInfo.stage || patchState.taskInfo.subStage != currentState.taskInfo.subStage) {      ServiceUtils.logInfo(this,"moving stage to %s:%s",patchState.taskInfo.stage,patchState.taskInfo.subStage);    }    if (patchState.taskInfo.subStage != null) {      adjustStat(patchState.taskInfo.subStage.toString(),1);    }    currentState.taskInfo=patchState.taskInfo;  }  if (patchState.triggeredCopies != null) {    currentState.triggeredCopies=patchState.triggeredCopies;  }  if (patchState.finishedCopies != null) {    currentState.finishedCopies=patchState.finishedCopies;  }  if (patchState.failedOrCancelledCopies != null) {    currentState.failedOrCancelledCopies=patchState.failedOrCancelledCopies;  }}  }
class C{  public boolean isFLAG_OPERATION_FROM_ADD(){switch (value) {case CARRY_FROM_ADD:case NO_CARRY_FROM_ADD:case OVERFLOW_FROM_ADD:case NO_OVERFLOW_FROM_ADD:    return true;default :  return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.907 -0400",hash_original_method="4A3898E47508F62B3E9000B8E032EC41",hash_generated_method="DD6B74641ACC3E1B71054A8389F6D123") public String constantName(){  return constantName;}  }
class C{  public static float length(float x,float y,float z){  return (float)Math.sqrt(x * x + y * y + z * z);}  }
class C{  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int poolSize,PoolStatHelper stats,ThreadFactory tf){  this(q,poolSize,stats,tf,Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT",30000 * 60),false);}  }
class C{  public static void execAsync(String command,@FloatRange(from=0) long timeout,@Nullable ExecuteResultHandler resultHandler,@Nullable ExecuteStreamHandler streamHandler) throws IOException {  if (resultHandler == null) {    resultHandler=new DefaultExecuteResultHandler();  }  CommandLine cmdLine=CommandLine.parse(command);  DefaultExecutor executor=new DefaultExecutor();  executor.setExitValue(0);  ExecuteWatchdog watchdog=new ExecuteWatchdog(timeout);  executor.setWatchdog(watchdog);  if (streamHandler != null) {    executor.setStreamHandler(streamHandler);  }  executor.execute(cmdLine,resultHandler);}  }
class C{  public static ArrayList<GeoPoint> reduceWithTolerance(ArrayList<GeoPoint> shape,double tolerance){  int n=shape.size();  if (tolerance <= 0 || n < 3) {    return shape;  }  boolean[] marked=new boolean[n];  for (int i=1; i < n - 1; i++)   marked[i]=false;  marked[0]=marked[n - 1]=true;  douglasPeuckerReduction(shape,marked,tolerance,0,n - 1);  ArrayList<GeoPoint> newShape=new ArrayList<GeoPoint>(n);  for (int i=0; i < n; i++) {    if (marked[i])     newShape.add(shape.get(i));  }  return newShape;}  }
class C{  public String throwableToString(){  StringBuilder sb=new StringBuilder("Exception:  ");  if (throwable != null)   sb.append(throwable.toString()); else   sb.append("null");  sb.append("\n");  return sb.toString();}  }
class C{  public InputMethodInfo(String packageName,String className,CharSequence label,String settingsActivity){  this(buildDummyResolveInfo(packageName,className,label),false,settingsActivity,null,0,false);}  }
class C{  private static double[] calcMeanValues(double[][] inVectors){  int m=Matrix.getNumOfRows(inVectors);  int n=Matrix.getNumOfColumns(inVectors);  double[] mValues=Vector.newVector(m);  for (int i=0; i < m; ++i) {    mValues[i]=0.0;    for (int j=0; j < n; ++j) {      mValues[i]+=inVectors[i][j];    }    mValues[i]/=n;  }  return (mValues);}  }
class C{  public boolean isReverseAxes(){  return true;}  }
class C{  public final void add(double scalar,Matrix3d m1){  this.m00=m1.m00 + scalar;  this.m01=m1.m01 + scalar;  this.m02=m1.m02 + scalar;  this.m10=m1.m10 + scalar;  this.m11=m1.m11 + scalar;  this.m12=m1.m12 + scalar;  this.m20=m1.m20 + scalar;  this.m21=m1.m21 + scalar;  this.m22=m1.m22 + scalar;}  }
class C{  public static byte[] str2UnicodeByteArray(final JBBPByteOrder byteOrder,final String str){  final byte[] result=new byte[str.length() << 1];  int index=0;  for (int i=0; i < str.length(); i++) {    final int val=str.charAt(i);switch (byteOrder) {case BIG_ENDIAN:{        result[index++]=(byte)(val >> 8);        result[index++]=(byte)val;      }    break;case LITTLE_ENDIAN:{    result[index++]=(byte)val;    result[index++]=(byte)(val >> 8);  }break;default :throw new Error("Unexpected byte order [" + byteOrder + ']');}}return result;}  }
class C{  protected Language(@NotNull String ID,@SuppressWarnings("UnusedParameters") boolean register){  myID=ID;  myBaseLanguage=null;  myMimeTypes=null;}  }
class C{  @Override public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public Color chooseColor(int type,Color presetColor,Color secondaryColor,String name,String text){  setLocationRelativeTo(getParent());  returnNewColor=false;  setTitle("Change Color: " + name);  this.type=type;  this.secondaryColor=secondaryColor;  preview.setText(text);  chooser.setColor(presetColor);  setVisible(true);  if (returnNewColor) {    return chooser.getColor();  }  return presetColor;}  }
class C{  void cleanupAfterExchange(){  setConnecting(null);  setLastExchangeTime();  try {    if (mSocket != null) {      mSocket.close();      log.info("bluetooth socket closed");    }  } catch (  IOException e) {    log.warn("Couldn't close bt socket: ",e);  }  try {    if (mBluetoothSpeaker.mSocket != null) {      mBluetoothSpeaker.mSocket.close();      log.info("bluetooth speaker socket closed");    }  } catch (  IOException e) {    log.warn("Couldn't close bt socket in BTSpeaker: ",e);  }  mSocket=null;  mBluetoothSpeaker.mSocket=null;  log.debug("socket and BluetoothSpeaker socket has been set to null");  direction=0;  remoteAddress=null;}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  private void generateChunksForTable(Table table,long tableChunkSize,String[] columns) throws ReplicatorException, InterruptedException {  long chunkSize;  Integer pkType=getPKType(table);  if (tableChunkSize == 0) {    chunks.put(new NoChunk(table,columns));    return;  } else   if (tableChunkSize < 0) {    chunkSize=this.chunkSize;  } else {    chunkSize=tableChunkSize;  }  if (logger.isDebugEnabled())   logger.debug("Processing table " + table.getSchema() + "."+ table.getName());  if (pkType == null)   chunkLimit(table); else   if (pkType == Types.NUMERIC)   chunkNumericPK(table,columns,chunkSize); else   if (pkType == Types.VARCHAR)   chunkVarcharPK(table);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus notifyInstance(String instanceId,ProvisioningSettings settings,Properties properties) throws APPlatformException {  return null;}  }
class C{  @ObjectiveCName("deleteMessagesWithPeer:withRids:") public void deleteMessages(Peer peer,long[] rids){  modules.getMessagesModule().deleteMessages(peer,rids);}  }
class C{  public void countLocalSearchOnTestSuite(){  suites++;}  }
class C{  public static String stringToNormalString(String source){  String result=source.toLowerCase().replaceAll("\\+"," ").replaceAll("_"," ").replaceAll("-"," ").replaceAll("\\("," (").replaceAll("\\)",") ");  while (result.contains("  ")) {    result=result.replaceAll("  "," ");  }  return result;}  }
class C{  public void shutdown(){  this.shutdown=true;  this.interrupt();  boolean interrupted=Thread.interrupted();  try {    this.join(15 * 1000);  } catch (  InterruptedException e) {    interrupted=true;  } finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }  if (this.isAlive()) {    logger.warn(LocalizedMessage.create(LocalizedStrings.HARegionQueue_QUEUEREMOVALTHREAD_IGNORED_CANCELLATION));  }}  }
class C{  public synchronized Watch<E> watch(WatchPredicate<E> predicate,int taskCount,WatchAction<E> action){  assertNotCancelled();  Watch<E> watch=new Watch<E>(predicate,taskCount,action);  watchList.add(watch);  return watch;}  }
class C{  @Override public void update(Result<Integer> result,int nodeIndex,String sql,Object[] args){  NodePodAmp node=_podKraken.getNode(nodeIndex);  for (int i=0; i < node.serverCount(); i++) {    ServerBartender server=node.server(i);    if (server != null && server.isUp()) {      ClusterServiceKraken proxy=_podKraken.getProxy(server);      proxy.update(result,nodeIndex,sql,args);      return;    }  }  RuntimeException exn=new ServiceException(L.l("update failed with no live servers"));  exn.fillInStackTrace();  result.fail(exn);}  }
class C{  private Criterion applyRestriction(){  final Object convertedValue=convertValueType(searchField,searchString);  if (searchOper.equals("eq"))   return Restrictions.eq(searchField,convertedValue); else   if (searchOper.equals("ne"))   return Restrictions.ne(searchField,convertedValue);  if (convertedValue instanceof String) {    if (searchOper.equals("bw"))     return Restrictions.ilike(searchField,searchString + "%"); else     if (searchOper.equals("cn"))     return Restrictions.ilike(searchField,"%" + searchString + "%"); else     if (searchOper.equals("ew"))     return Restrictions.ilike(searchField,"%" + searchString); else     if (searchOper.equals("bn"))     return Restrictions.not(Restrictions.ilike(searchField,searchString + "%")); else     if (searchOper.equals("en"))     return Restrictions.not(Restrictions.ilike(searchField,"%" + searchString)); else     if (searchOper.equals("nc"))     return Restrictions.not(Restrictions.ilike(searchField,"%" + searchString + "%")); else     if (searchOper.equals("in"))     return Restrictions.in(searchField,searchString.split(",")); else     if (searchOper.equals("ni"))     return Restrictions.not(Restrictions.in(searchField,searchString.split(",")));  } else   if (searchOper.equals("lt"))   return Restrictions.lt(searchField,convertedValue); else   if (searchOper.equals("le"))   return Restrictions.le(searchField,convertedValue); else   if (searchOper.equals("gt"))   return Restrictions.gt(searchField,convertedValue); else   if (searchOper.equals("ge"))   return Restrictions.ge(searchField,convertedValue);  return null;}  }
class C{  public Scriptable requireMain(Context cx,String mainModuleId){  if (this.mainModuleId != null) {    if (!this.mainModuleId.equals(mainModuleId)) {      throw new IllegalStateException("Main module already set to " + this.mainModuleId);    }    return mainExports;  }  ModuleScript moduleScript;  try {    moduleScript=moduleScriptProvider.getModuleScript(cx,mainModuleId,null,paths);  } catch (  RuntimeException x) {    throw x;  }catch (  Exception x) {    throw new RuntimeException(x);  }  if (moduleScript != null) {    mainExports=getExportedModuleInterface(cx,mainModuleId,null,true);  } else   if (!sandboxed) {    URI mainUri=null;    try {      mainUri=new URI(mainModuleId);    } catch (    URISyntaxException usx) {    }    if (mainUri == null || !mainUri.isAbsolute()) {      File file=new File(mainModuleId);      if (!file.isFile()) {        throw ScriptRuntime.throwError(cx,nativeScope,"Module \"" + mainModuleId + "\" not found.");      }      mainUri=file.toURI();    }    mainExports=getExportedModuleInterface(cx,mainUri.toString(),mainUri,true);  }  this.mainModuleId=mainModuleId;  return mainExports;}  }
class C{  public KeyStore load(KeyStoreData keyStoreData){  KeyStore keyStore=null;  try {    if (!keyStoreData.getKeyStoreType().isFileBased()) {      LOGGER.error("NoCreateKeyStoreNotFile.exception.message");    } else {      File file=new File(keyStoreData.getKeyStoreFile());      if (file.exists()) {        finStream=new FileInputStream(file);        keyStore=KeyStore.getInstance(KeyStore.getDefaultType());        keyStore.load(finStream,keyStoreData.getPassword().toCharArray());      } else {        File keyStoresFolder=new File(file.getParent());        if (keyStoresFolder.mkdirs()) {          file.createNewFile();        }        keyStore=KeyStore.getInstance(keyStoreData.getKeyStoreType().jce());        keyStore.load(null,null);        foutStream=new FileOutputStream(file);        keyStore.store(foutStream,keyStoreData.getPassword().toCharArray());      }    }  } catch (  java.security.cert.CertificateException e) {    LOGGER.error("Problem with certificate at keystore.load/store method",e);  }catch (  NoSuchAlgorithmException e) {    LOGGER.error("Error at keystore.load/store method no such algorithm",e);  }catch (  FileNotFoundException e) {    LOGGER.error("KeyStore file not found. Please check if it exists at filesystem.",e);  }catch (  KeyStoreException e) {    LOGGER.error("KeyStore exception while saving/getting keyStore instance",e);  }catch (  IOException e) {    LOGGER.error("Error accessing keyStore file",e);  } finally {    SafeCloseUtil.close(finStream);    SafeCloseUtil.close(foutStream);  }  return keyStore;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public static Integer createInteger(String val){  return Integer.decode(val);}  }
class C{  public LoginCommandImpl(final ShoppingCartCommandRegistry registry,final CustomerService customerService,final ShopService shopService,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.customerService=customerService;  this.shopService=shopService;}  }
class C{  public Object visit(ASTFunNode node,Object data){  PostfixMathCommandI pfmc;  if (node == null)   return null;  if (debug == true) {    System.out.println("Stack size before childrenAccept: " + stack.size());  }  data=node.childrenAccept(this,data);  if (debug == true) {    System.out.println("Stack size after childrenAccept: " + stack.size());  }  pfmc=node.getPFMC();  if (pfmc == null) {    addToErrorList("No function class associated with " + node.getName());    return data;  }{    pfmc.setCurNumberOfParameters(node.jjtGetNumChildren());  }  try {    pfmc.run(stack);  } catch (  ParseException e) {    addToErrorList(e.getMessage());    errorFlag=true;  }  if (debug == true) {    System.out.println("Stack size after run: " + stack.size());  }  return data;}  }
class C{  public static List<ImageReference> collectUxfImgRefs(ICompilationUnit cu) throws JavaModelException {  ArrayList<ImageReference> refs=collectAllImageRefs(cu);  ArrayList<ImageReference> result=new ArrayList<ImageReference>();  for (  ImageReference ref : refs) {    IPath rootRelativePath=getRootRelativePath(cu,ref.srcAttr.value.getValue());    IFile imgFile=getFile(getPackageFragmentRoot(cu),rootRelativePath);    IFile uxf=getUxfDiagramForImgFile(imgFile);    if (uxf.exists()) {      result.add(ref);    }  }  return result;}  }
class C{  public void add(JmsMessage jmsMessage){  QUEUE.get().add(jmsMessage);}  }
class C{  public Statement(String text,Value parameters){  this.text=text;  this.parameters=parameters == null ? Values.EmptyMap : parameters;}  }
class C{  private void handleHtmlBasicHelp(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleHelp();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("help");  pageWrapper.addHeader();  requestAndResponse.print("<table><tr><td>");  startHelpSection(requestAndResponse,"Start Here");  addHelpLink(requestAndResponse,"What CrushPaper Is");  addHelpLink(requestAndResponse,"Why I Created CrushPaper");  addHelpLink(requestAndResponse,"Why CrushPaper Is Free");  addHelpLink(requestAndResponse,"User Guide");  addHelpLink(requestAndResponse,"Account Information");  addHelpLink(requestAndResponse,"Search Help");  addHelpLink(requestAndResponse,"Chrome Extension");  addHelpLink(requestAndResponse,"Chrome Extension Permissions");  addHelpLink(requestAndResponse,"Privacy Policy");  addHelpLink(requestAndResponse,"Future Enhancements");  endHelpSection(requestAndResponse);  requestAndResponse.print("<a onclick=\"newPaneForLink(event, '" + servletText.pageTitleHelp() + "', 'help'); return false;\" class=\"nextLink\" href=\"/advancedHelp/\">Help for administrators and code contributors.</a>");  requestAndResponse.print("</td></tr></table>");  pageWrapper.addFooter();}  }
class C{  public SurfaceQuad(LatLon center,double width,double height,Angle heading){  this(center,width,height);  if (heading == null) {    String message=Logging.getMessage("nullValue.HeadingIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.heading=heading;}  }
class C{  public void addListener(final ISpecialInstructionsModelListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public void processElement(Wrapper<Element> element){  activeElement=element.getContent();  if (parentElement != null) {    parentElement.addContent(activeElement);  }}  }
class C{  public final AlgVector add(AlgVector other){  AlgVector b=null;  if (m_Elements != null) {    int n=m_Elements.length;    try {      b=(AlgVector)clone();    } catch (    CloneNotSupportedException ex) {      b=new AlgVector(n);    }    for (int i=0; i < n; i++) {      b.m_Elements[i]=m_Elements[i] + other.m_Elements[i];    }  }  return b;}  }
class C{  public void log(Throwable error){  getBot().log(this,error);}  }
class C{  protected void writePrimitiveAttribute(mxCodec enc,Object obj,String attr,Object value,Node node){  if (attr == null || obj instanceof Map) {    Node child=enc.document.createElement("add");    if (attr != null) {      mxCodec.setAttribute(child,"as",attr);    }    mxCodec.setAttribute(child,"value",value);    node.appendChild(child);  } else {    mxCodec.setAttribute(node,attr,value);  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public int updateTriggerStatesFromOtherStates(Connection conn,String newState,String oldState1,String oldState2) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_STATES_FROM_OTHER_STATES));    ps.setString(1,newState);    ps.setString(2,oldState1);    ps.setString(3,oldState2);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public static void requireNonNulls(Object o0){  if (o0 == null) {    throw new NullPointerException(FIRST_ARG_IS_NULL);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private byte[] checkOwnerPassword(byte[] ownerPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,byte[] uValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException, EncryptionUnsupportedByProductException, PDFParseException {  final byte[] rc4KeyBytes=getInitialOwnerPasswordKeyBytes(ownerPassword,keyBitLength,revision);  final Cipher rc4=createRC4Cipher();  initDecryption(rc4,createRC4Key(rc4KeyBytes));  final byte[] possibleUserPassword;  if (revision == 2) {    possibleUserPassword=crypt(rc4,oValue);  } else   if (revision >= 3) {    possibleUserPassword=new byte[32];    System.arraycopy(oValue,0,possibleUserPassword,0,possibleUserPassword.length);    rc4unshuffle(rc4,possibleUserPassword,rc4KeyBytes);  } else {    throw new EncryptionUnsupportedByProductException("Unsupported revision: " + revision);  }  return checkUserPassword(possibleUserPassword,firstDocIdValue,keyBitLength,revision,oValue,uValue,pValue,encryptMetadata);}  }
class C{  public int hashCode(){  int retval=0;  if (iv != null) {    for (int i=1; i < iv.length; i++) {      retval+=iv[i] * i;    }  }  retval+=(version + rounds + wordSize);  return retval;}  }
class C{  private Object readResolve(){  return getInstance(iLowerLimit,iUpperLimit);}  }
class C{  static public void loadEmergencyClasses(){  if (emergencyClassesLoaded)   return;  emergencyClassesLoaded=true;  InternalDistributedSystem.loadEmergencyClasses();}  }
class C{  public void appendToString(StringBuffer buffer,String toString){  if (toString != null) {    int pos1=toString.indexOf(contentStart) + contentStart.length();    int pos2=toString.lastIndexOf(contentEnd);    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {      String data=toString.substring(pos1,pos2);      if (fieldSeparatorAtStart) {        removeLastFieldSeparator(buffer);      }      buffer.append(data);      appendFieldSeparator(buffer);    }  }}  }
class C{  private void modifyNode(NeuronNode node){  Neuron neuron=node.getNeuron();  neuron.forceSetActivation(neuron.getUpperBound());  node.update();}  }
class C{  public Quaterniond rotateY(double angle){  return rotateY(angle,this);}  }
class C{  public int compute(int source,int sink){  int maxFlow=0;  while (findAugmentingPath(source,sink)) {    maxFlow+=processPath(source,sink);  }  return maxFlow;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.133 -0500",hash_original_method="052278CA509C38C507499B2FA93CCBD3",hash_generated_method="6360FD2ACFB7F3B7EF98972CB440886C") public static boolean conditionallyEnableDebugLogging(){  return DSUtils.UNKNOWN_BOOLEAN;}  }
class C{  public void toggle(){  if (state == State.OPENED)   close(); else   open();}  }
class C{  private int findSetIndex(RegisterSpec reg){  int i;  for (i=0; i < latticeValues.size(); i++) {    EscapeSet e=latticeValues.get(i);    if (e.regSet.get(reg.getReg())) {      return i;    }  }  return i;}  }
class C{  public SearchResponse search(String query,Integer offset,Integer numberOfResult) throws IOException {  ResponseWrapper responseWrapper=executeGETRequest(SEARCH_URL,new String[][]{{"c","3"},{"q",query},{"o",(offset == null) ? null : String.valueOf(offset)},{"n",(numberOfResult == null) ? null : String.valueOf(numberOfResult)}});  return responseWrapper.getPayload().getSearchResponse();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  protected static int skipWapValue(ByteArrayInputStream pduDataStream,int length){  assert (null != pduDataStream);  byte[] area=new byte[length];  int readLen=pduDataStream.read(area,0,length);  if (readLen < length) {    return -1;  } else {    return readLen;  }}  }
class C{  public static void IMUL(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.IMUL();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static UrlParser parse(final String url,Properties prop) throws SQLException {  if (url != null) {    if (prop == null) {      prop=new Properties();    }    if (url.startsWith("jdbc:mysql:")) {      UrlParser urlParser=new UrlParser();      parseInternal(urlParser,url,prop);      return urlParser;    } else {      if (url.startsWith("jdbc:mariadb:")) {        UrlParser urlParser=new UrlParser();        parseInternal(urlParser,"jdbc:mysql:" + url.substring(13),prop);        return urlParser;      }      if (url.startsWith("jdbc:mariadb_" + Version.version + ":")) {        UrlParser urlParser=new UrlParser();        parseInternal(urlParser,"jdbc:mysql:" + url.substring(("jdbc:mariadb_" + Version.version + ":").length()),prop);        return urlParser;      }    }  }  return null;}  }
class C{  protected void drawIcons(DrawContext dc,Iterable<NodeLayout> nodes){  GL2 gl=dc.getGL().getGL2();  try {    gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_FILL);    gl.glEnable(GL.GL_TEXTURE_2D);    TreeAttributes attributes=this.getActiveAttributes();    Dimension iconSize=attributes.getIconSize();    gl.glColor4d(1d,1d,1d,1);    WWTexture activeTexture=null;    for (    NodeLayout layout : nodes) {      WWTexture texture=layout.node.getTexture();      if (texture == null)       continue;      boolean textureBound;      if ((activeTexture != null) && (texture.getImageSource() == activeTexture.getImageSource())) {        textureBound=true;      } else {        textureBound=texture.bind(dc);        if (textureBound)         activeTexture=texture;      }      if (textureBound) {        int vertAdjustment=0;        if (iconSize.height < layout.bounds.height) {          vertAdjustment=layout.bounds.height - iconSize.height - (this.lineHeight - iconSize.height) / 2;        }        try {          gl.glPushMatrix();          TextureCoords texCoords=activeTexture.getTexCoords();          gl.glTranslated(layout.drawPoint.x,layout.drawPoint.y + vertAdjustment,1.0);          gl.glScaled((double)iconSize.width,(double)iconSize.width,1d);          dc.drawUnitQuad(texCoords);        }  finally {          gl.glPopMatrix();        }        layout.drawPoint.x+=attributes.getIconSize().width + attributes.getIconSpace();      }    }  }  finally {    gl.glDisable(GL.GL_TEXTURE_2D);    gl.glBindTexture(GL.GL_TEXTURE_2D,0);  }}  }
class C{  public boolean isAfterStopping(){  return getState().isAfterStopping();}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  protected void lexError(int pos,String key,Object... args){  log.error(pos,key,args);  tk=TokenKind.ERROR;  errPos=pos;}  }
class C{  private void loadContact(){  getLoaderManager().restartLoader(0,null,this);}  }
class C{  public String word(){  return (String)map.get(WORD_KEY);}  }
class C{  private void resizeDrawables(){  if (mDrawable instanceof StateListDrawable) {    StateListDrawable d=(StateListDrawable)mDrawable;    int maxWidth=0;    int maxHeight=0;    for (int i=0; i < d.getStateCount(); i++) {      Drawable childDrawable=d.getStateDrawable(i);      maxWidth=Math.max(maxWidth,childDrawable.getIntrinsicWidth());      maxHeight=Math.max(maxHeight,childDrawable.getIntrinsicHeight());    }    if (DEBUG)     Log.v(TAG,"union of childDrawable rects " + d + " to: "+ maxWidth+ "x"+ maxHeight);    d.setBounds(0,0,maxWidth,maxHeight);    for (int i=0; i < d.getStateCount(); i++) {      Drawable childDrawable=d.getStateDrawable(i);      if (DEBUG)       Log.v(TAG,"sizing drawable " + childDrawable + " to: "+ maxWidth+ "x"+ maxHeight);      childDrawable.setBounds(0,0,maxWidth,maxHeight);    }  } else   if (mDrawable != null) {    mDrawable.setBounds(0,0,mDrawable.getIntrinsicWidth(),mDrawable.getIntrinsicHeight());  }}  }
class C{  public Boolean isD3On(){  return this.isDigitalOn(3);}  }
class C{  public boolean isReadOnly(){  if (isVirtualColumn())   return true;  return m_vo.IsReadOnly;}  }
class C{  @Override public double[] findArgmin(double[] initX,double[][] constraints) throws Exception {  int l=initX.length;  m_f=objectiveFunction(initX);  if (Double.isNaN(m_f)) {    throw new Exception("Objective function value is NaN!");  }  double[] grad=evaluateGradient(initX), oldGrad, oldX, deltaX=new double[l], direct=new double[l], x=new double[l];  double sum=0;  for (int i=0; i < grad.length; i++) {    direct[i]=-grad[i];    sum+=grad[i] * grad[i];  }  double stpmax=m_STPMX * Math.max(Math.sqrt(sum),l);  boolean[] isFixed=new boolean[initX.length];  DynamicIntArray wsBdsIndx=new DynamicIntArray(initX.length);  double[][] consts=new double[2][initX.length];  for (int i=0; i < initX.length; i++) {    if (!Double.isNaN(constraints[0][i]) || (!Double.isNaN(constraints[1][i]))) {      throw new Exception("Cannot deal with constraints, sorry.");    }    consts[0][i]=constraints[0][i];    consts[1][i]=constraints[1][i];    x[i]=initX[i];  }  boolean finished=false;  for (int step=0; step < m_MAXITS; step++) {    if (m_Debug) {      System.err.println("\nIteration # " + step + ":");    }    oldX=x;    oldGrad=grad;    double[] directB=Arrays.copyOf(direct,direct.length);    m_IsZeroStep=false;    x=lnsrch(x,grad,directB,stpmax,isFixed,constraints,wsBdsIndx);    if (m_IsZeroStep) {      throw new Exception("Exiting due to zero step.");    }    double test=0.0;    for (int h=0; h < x.length; h++) {      deltaX[h]=x[h] - oldX[h];      double tmp=Math.abs(deltaX[h]) / Math.max(Math.abs(x[h]),1.0);      if (tmp > test) {        test=tmp;      }    }    if (test < m_Zero) {      if (m_Debug) {        System.err.println("\nDeltaX converged: " + test);      }      finished=true;      break;    }    grad=evaluateGradient(x);    test=0.0;    for (int g=0; g < l; g++) {      double tmp=Math.abs(grad[g]) * Math.max(Math.abs(directB[g]),1.0) / Math.max(Math.abs(m_f),1.0);      if (tmp > test) {        test=tmp;      }    }    if (test < m_Zero) {      if (m_Debug) {        for (int i=0; i < l; i++) {          System.out.println(grad[i] + " " + directB[i]+ " "+ m_f);        }        System.err.println("Gradient converged: " + test);      }      finished=true;      break;    }    double betaHSNumerator=0, betaDYNumerator=0;    double betaHSandDYDenominator=0;    for (int i=0; i < grad.length; i++) {      betaDYNumerator+=grad[i] * grad[i];      betaHSNumerator+=(grad[i] - oldGrad[i]) * grad[i];      betaHSandDYDenominator+=(grad[i] - oldGrad[i]) * direct[i];    }    double betaHS=betaHSNumerator / betaHSandDYDenominator;    double betaDY=betaDYNumerator / betaHSandDYDenominator;    if (m_Debug) {      System.err.println("Beta HS: " + betaHS);      System.err.println("Beta DY: " + betaDY);    }    for (int i=0; i < direct.length; i++) {      direct[i]=-grad[i] + Math.max(0,Math.min(betaHS,betaDY)) * direct[i];    }  }  if (finished) {    if (m_Debug) {      System.err.println("Minimum found.");    }    m_f=objectiveFunction(x);    if (Double.isNaN(m_f)) {      throw new Exception("Objective function value is NaN!");    }    return x;  }  if (m_Debug) {    System.err.println("Cannot find minimum -- too many iterations!");  }  m_X=x;  return null;}  }
class C{  private boolean isRankConsistent(){  for (int i=0; i < size(); i++)   if (i != rank(select(i)))   return false;  for (  Key key : keys())   if (key.compareTo(select(rank(key))) != 0)   return false;  return true;}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public static double min(double[] array){  double min=array[0];  for (  double i : array) {    if (i < min)     min=i;  }  return min;}  }
class C{  public static List<GraphChange> findHittingSet(List<Set<GraphChange>> Forig){  LinkedList<HsNode> currentLevel=new LinkedList<>();  LinkedList<HsNode> nextLevel=new LinkedList<>();  List<GraphChange> hittingSets=new ArrayList<>();  List<Set<GraphChange>> F;  F=precompute(Forig);  currentLevel.addFirst(new HsNode(new GraphChange(),0));  while (!currentLevel.isEmpty()) {    HsNode n=currentLevel.removeFirst();    if (nodeRedundant(n,hittingSets)) {    } else {      int nextUCSigma=findNextUCSigma(F,n);      if (nextUCSigma == -1)       hittingSets.add(n.getPath()); else {        n.updateLabel(nextUCSigma);        for (        GraphChange nextLCSigma : (F.get(nextUCSigma))) {          GraphChange newPath=new GraphChange(n.getPath());          if (newPath.isConsistent(nextLCSigma)) {            newPath.union(nextLCSigma);            if (pathNecessary(newPath,nextLevel))             nextLevel.add(new HsNode(newPath,n.getLabel()));          }        }      }    }    if (currentLevel.isEmpty()) {      currentLevel=nextLevel;      nextLevel=new LinkedList<>();    }  }  return hittingSets;}  }
class C{  public void register(){  final Map<String,SolrInfoMBean> infoRegistry=core.getInfoRegistry();  infoRegistry.put(STATISTICS_KEY,this);  infoRegistry.put(name,this);  for (  SolrCache cache : cacheList) {    cache.setState(SolrCache.State.LIVE);    infoRegistry.put(cache.name(),cache);  }  registerTime=new Date();}  }
class C{  @NotNull public PsiQuery filter(@NotNull final String name){  return filter(PsiNamedElement.class,name);}  }
class C{  public static void deleteTypeInstanceComment(final SQLProvider provider,final int moduleId,final int instanceId,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkArgument(instanceId >= 0,"Error: instance id must be greater or equal to zero");  Preconditions.checkNotNull(commentId,"Error: comment text argument can not be null");  Preconditions.checkNotNull(userId,"Error: user id argument can not be null");  final String function=" { ? = call delete_type_instance_comment(?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,moduleId);      deleteCommentStatement.setInt(3,instanceId);      deleteCommentStatement.setInt(4,commentId);      deleteCommentStatement.setInt(5,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: The comment id returned from the database was null.");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  private void returnData(Object ret){  if (pluginHost != null) {    pluginHost.returnData(ret);  }}  }
class C{  void QuickSort(int a[],int lo0,int hi0) throws Exception {  int lo=lo0;  int hi=hi0;  int mid;  if (hi0 > lo0) {    mid=a[(lo0 + hi0) / 2];    while (lo <= hi) {      while ((lo < hi0) && pauseTrue(lo0,hi0) && (a[lo] < mid)) {        ++lo;      }      while ((hi > lo0) && pauseTrue(lo0,hi0) && (a[hi] > mid)) {        --hi;      }      if (lo <= hi) {        swap(a,lo,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort(a,lo0,hi);    }    if (lo < hi0) {      QuickSort(a,lo,hi0);    }  }}  }
class C{  public static OperationStateException convertToApi(org.oscm.internal.types.exception.OperationStateException oldEx){  return convertExceptionToApi(oldEx,OperationStateException.class);}  }
class C{  private byte[] loadFileData(String path,String fileName){  File file=new File(path,fileName);  if (file.canRead()) {    try {      FileInputStream stream=new FileInputStream(file);      ByteArrayOutputStream out=new ByteArrayOutputStream(1000);      byte[] b=new byte[1000];      int n;      while ((n=stream.read(b)) != -1)       out.write(b,0,n);      stream.close();      out.close();      return out.toByteArray();    } catch (    IOException e) {    }  }  return null;}  }
class C{  public LoggingProfile(Writer writer,String name){  super(name);  mWriter=writer;}  }
class C{  public boolean hasColumns(){  return hasRepeatingExtension(Column.class);}  }
class C{  public ImmutableMap<String,String> attributes(){  return this.attributes;}  }
class C{  public boolean isValid(MLocator locator){  if (locator == null || getOnly_Warehouse_ID() == 0)   return true;  if (getOnly_Warehouse_ID() == locator.getM_Warehouse_ID())   return locator.isCanStoreProduct(getOnly_Product_ID());  return false;}  }
class C{  protected boolean preCommit(){  return true;}  }
class C{  public final int indexOf(int elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public boolean isCellEditable(int row,int column){  return model.isCellEditable(row,column);}  }
class C{  public void removeNew(int where) throws CannotCompileException {  byte[] data=new NewRemover(this,where).doit();  this.set(data);}  }
class C{  public void computeLegend(ChartData<?> data){  List<String> labels=new ArrayList<String>();  List<Integer> colors=new ArrayList<Integer>();  for (int i=0; i < data.getDataSetCount(); i++) {    DataSet<? extends Entry> dataSet=data.getDataSetByIndex(i);    List<Integer> clrs=dataSet.getColors();    int entryCount=dataSet.getEntryCount();    if (dataSet instanceof BarDataSet && ((BarDataSet)dataSet).isStacked()) {      BarDataSet bds=(BarDataSet)dataSet;      String[] sLabels=bds.getStackLabels();      for (int j=0; j < clrs.size() && j < bds.getStackSize(); j++) {        labels.add(sLabels[j % sLabels.length]);        colors.add(clrs.get(j));      }      colors.add(-2);      labels.add(bds.getLabel());    } else     if (dataSet instanceof PieDataSet) {      List<String> xVals=data.getXVals();      PieDataSet pds=(PieDataSet)dataSet;      for (int j=0; j < clrs.size() && j < entryCount && j < xVals.size(); j++) {        labels.add(xVals.get(j));        colors.add(clrs.get(j));      }      colors.add(-2);      labels.add(pds.getLabel());    } else {      for (int j=0; j < clrs.size() && j < entryCount; j++) {        if (j < clrs.size() - 1 && j < entryCount - 1) {          labels.add(null);        } else {          String label=data.getDataSetByIndex(i).getLabel();          labels.add(label);        }        colors.add(clrs.get(j));      }    }  }  mLegend.setColors(colors);  mLegend.setLabels(labels);  Typeface tf=mLegend.getTypeface();  if (tf != null)   mLegendLabelPaint.setTypeface(tf);  mLegendLabelPaint.setTextSize(mLegend.getTextSize());  mLegendLabelPaint.setColor(mLegend.getTextColor());  mLegend.calculateDimensions(mLegendLabelPaint);}  }
class C{  @Deprecated public void removeEventListener(AbstractPeerEventListener listener){  removeBlocksDownloadedEventListener(listener);  removeChainDownloadStartedEventListener(listener);  removeConnectedEventListener(listener);  removeDisconnectedEventListener(listener);  removeGetDataEventListener(listener);  removeOnTransactionBroadcastListener(listener);  removePreMessageReceivedEventListener(listener);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Builder popExitAnimResId(int popExitAnimResId){  mPopExitAnimResId=popExitAnimResId;  return this;}  }
class C{  @Override public void transform(AffineTransform tx){  super.transform(tx);  updateConnection();}  }
class C{  public Promise<Void> applyChosenImports(String projectPath,String fqn,ConflictImportDTO chosen){  String url=appContext.getDevMachine().getWsAgentBaseUrl() + CODE_ASSIST_URL_PREFIX + "/apply-imports?projectpath="+ projectPath+ "&fqn="+ fqn;  return asyncRequestFactory.createPostRequest(url,chosen).loader(loader).header(CONTENT_TYPE,MimeType.APPLICATION_JSON).send();}  }
class C{  public ViolationMessage(Rules rule,int lineNumber,int columnNumber,Severity severity,String violationMessage){  this.rule=rule;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;  this.severity=severity;  this.violationMessage=violationMessage;}  }
class C{  protected Object evaluateLeftLessRight(List elements,String lvalue,String rvalue){  List array;  if (elements instanceof java.util.Vector) {    array=new java.util.Vector();  } else {    array=new ArrayList();  }  for (Iterator e=elements.iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof StructuredContent) {      if ((o=evaluateLeftLessRight((StructuredContent)o,lvalue,rvalue)) != null) {        array.add(o);      }    }  }  if (array.size() == 1) {    return (StructuredContent)array.get(0);  }  return array;}  }
class C{  static Comparator<File> timeAndRelativeFileName(File relativeTo){  return new CompositeComparator<File>(FILE_LAST_MODIFIED,relativeFileName(relativeTo));}  }
class C{  public boolean isLast() throws SQLException {  checkState();  return rs.isLast();}  }
class C{  public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  protected static void println(String s){  System.out.println(s);}  }
class C{  public ValidationException(String message,ValidationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public static Long toMillisec(String datestring,String format){  Date date=parse(datestring,format);  if (date == null) {    return null;  }  return date.getTime();}  }
class C{  void updateChildSizes(){  int n=getViewCount();  if (majorAxis == X_AXIS) {    for (int i=0; i < n; i++) {      View v=getView(i);      v.setSize((float)majorSpans[i],(float)minorSpans[i]);    }  } else {    for (int i=0; i < n; i++) {      View v=getView(i);      v.setSize((float)minorSpans[i],(float)majorSpans[i]);    }  }}  }
class C{  public boolean isTeleporterCompatible(){  return isEnetOutput() && getBaseMetaTileEntity().getOutputVoltage() >= 128 && getBaseMetaTileEntity().getUniversalEnergyCapacity() >= 500000;}  }
class C{  private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public FPSSurfaceView removeChild(@NonNull DisplayBase displayBase){  displayBase.disable();  mDisplayList.remove(displayBase);  return this;}  }
class C{  public void accept(final Delivery delivery,final AmqpSession session) throws IOException {  accept(delivery,session,true);}  }
class C{  public StreamPosTokenizer(){  wordChars('a','z');  wordChars('A','Z');  wordChars(128 + 32,255);  whitespaceChars(0,' ');  commentChar('/');  quoteChar('"');  quoteChar('\'');  parseNumbers();}  }
class C{  public SVGOMAnimatedRect(AbstractElement elt,String ns,String ln,String def){  super(elt,ns,ln);  defaultValue=def;}  }
class C{  public Peer clone(){  Peer clone=new Peer(network.clone());  return clone;}  }
class C{  private Base64(){}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  if (e.getSource() == m_text)   cmd_text(); else   cmd_button();}  }
class C{  private static void buildMultipleSelectItemNode(String itemName,Element selectItemNode,Element controlNode){  Element node=getMultiSelectItemConceptNode(selectItemNode);  String value=node.getAttributeValue(null,ATTRIBUTE_FIXED);  String label=getConceptName(value);  Element itemLabelNode=controlNode.createElement(NAMESPACE_XFORMS,null);  itemLabelNode.setName(NODE_LABEL);  itemLabelNode.addChild(Element.TEXT,label);  Element itemValNode=controlNode.createElement(NAMESPACE_XFORMS,null);  itemValNode.setName(NODE_VALUE);  itemValNode.addChild(Element.TEXT,itemName);  Element itemNode=controlNode.createElement(NAMESPACE_XFORMS,null);  itemNode.setName(NODE_ITEM);  itemNode.setAttribute(null,ATTRIBUTE_CONCEPT_ID,getConceptId(value).toString());  itemNode.addChild(Element.ELEMENT,itemLabelNode);  itemNode.addChild(Element.ELEMENT,itemValNode);  controlNode.addChild(Element.ELEMENT,itemNode);}  }
class C{  @CanIgnoreReturnValue public static long copy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  checkNotNull(from);  checkNotNull(to);  if (from instanceof FileChannel) {    FileChannel sourceChannel=(FileChannel)from;    long oldPosition=sourceChannel.position();    long position=oldPosition;    long copied;    do {      copied=sourceChannel.transferTo(position,ZERO_COPY_CHUNK_SIZE,to);      position+=copied;      sourceChannel.position(position);    } while (copied > 0 || position < sourceChannel.size());    return position - oldPosition;  }  ByteBuffer buf=ByteBuffer.wrap(createBuffer());  long total=0;  while (from.read(buf) != -1) {    buf.flip();    while (buf.hasRemaining()) {      total+=to.write(buf);    }    buf.clear();  }  return total;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.792 -0500",hash_original_method="AD6759EBE965A5DE70F6CCA865F96916",hash_generated_method="66CCCDB33CFD6B97551E29C13AF35F19") public static Bitmap decodeFileDescriptor(FileDescriptor fd){  return decodeFileDescriptor(fd,null,null);}  }
class C{  static String plurals(final String s,final Integer i){  return i == null ? UNKNOWN + " " + s+ "s" : i.intValue() != 1 ? i + " " + s+ "s" : "one " + s;}  }
class C{  public static byte[] randomBytes(int length){  byte[] bytes=new byte[length];  SEEDED_RANDOM.nextBytes(bytes);  return bytes;}  }
class C{  public static String packCipherSuites(String[] ciphers){  String cipherSet=null;  if (ciphers != null) {    StringBuffer buf=new StringBuffer();    for (int i=0; i < ciphers.length; i++) {      buf.append(ciphers[i]);      if (i < ciphers.length - 1) {        buf.append(',');      }    }    cipherSet=buf.toString();  }  return cipherSet;}  }
class C{  protected void alias(final String from,final String to){  bind(Commands.key(from)).to(Commands.key(to));}  }
class C{  public final void store8(int addr,int value){  store8(addr,value,AccessSource.CODE);}  }
class C{  private void onItemLongPressed(RadialMenuItem item){  if (mSubMenuMode == SubMenuMode.LONG_PRESS) {    if (item != null) {      if (item.hasSubMenu()) {        setSubMenu(item.getSubMenu(),item.offset);      }    } else     if (mSubMenu != null) {      setSubMenu(null,0);    }  }}  }
class C{  public StaticSymbolWhiteSpaceDefinitionStrategy(char... whiteSpaceSymbols){  for (  char symbol : whiteSpaceSymbols) {    myWhiteSpaceSymbols.add(symbol);  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof CDATANode) {    if (TextHelper.ignorableWhitespace(((CDATANode)child).content)) {      return;    } else {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidTextGraphicContent");    }  } else {    super.addChild(child);    contiguous=false;  }}  }
class C{  final void invertGeneral(GMatrix m1){  int size=m1.nRow * m1.nCol;  double temp[]=new double[size];  double result[]=new double[size];  int row_perm[]=new int[m1.nRow];  int[] even_row_exchange=new int[1];  int i, j;  if (m1.nRow != m1.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      temp[i * nCol + j]=m1.values[i][j];    }  }  if (!decomposeLU(m1.nRow,temp,row_perm,even_row_exchange)) {    throw new SingularMatrixException();  }  for (i=0; i < size; i++) {    result[i]=0.0;  }  for (i=0; i < nCol; i++) {    result[i + i * nCol]=1.0;  }  backSubstituteLU(m1.nRow,temp,row_perm,result);  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=result[i * nCol + j];    }  }}  }
class C{  protected boolean[] multiInstanceHandler(){  boolean[] result=new boolean[2];  print("multi-instance classifier...");  if (m_Classifier instanceof MultiInstanceCapabilitiesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void execute() throws BuildException {  log.debug("execute()");  command=command.trim();  if (srcFile == null && command.length() == 0 && filesets.isEmpty()) {    throw new BuildException("Source file does not exist!",getLocation());  }  if (srcFile != null && !srcFile.exists()) {    throw new BuildException("Source file does not exist!",getLocation());  }  try {    PrintStream out=System.out;    try {      if (output != null) {        log.verbose("Opening PrintStream to output file " + output);        out=new PrintStream(new BufferedOutputStream(new FileOutputStream(output.getAbsolutePath(),append)));      }      if (command == null || command.trim().length() == 0) {        createClasspath().add(new Path(getProject(),srcFile.getParentFile().getCanonicalPath()));        command=getText(new BufferedReader(new FileReader(srcFile)));      }      if (command != null) {        execGroovy(command,out);      } else {        throw new BuildException("Source file does not exist!",getLocation());      }    }  finally {      if (out != null && out != System.out) {        out.close();      }    }  } catch (  IOException e) {    throw new BuildException(e,getLocation());  }  log.verbose("statements executed successfully");}  }
class C{  public ImmutableSet<BaseType> deleteType(final BaseType baseType){  Preconditions.checkNotNull(baseType,"IE02766: Base type can not be null.");  final Node containedTypeNode=containedRelationMap.get(baseType);  Preconditions.checkNotNull(containedTypeNode,"Unable to delete type: corresponding node not found in the dependence graph.");  final ImmutableSet<BaseType> affectedTypes=determineDependentTypes(baseType);  containedRelation.removeNode(containedTypeNode);  containedRelationMap.remove(baseType);  return affectedTypes;}  }
class C{  public boolean isParentOf(TypeComposition typeComposition){  boolean ancestor;  SingleBranchTypeComposition that=(SingleBranchTypeComposition)typeComposition;  if (this == that) {    ancestor=false;  } else {    ancestor=isAncestorOf(that);    if (ancestor) {      ancestor=levelsApart(that) > 0;    }  }  return ancestor;}  }
class C{  private PhysicsConfig(){}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VinciLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public List<ManifestFile> addedFiles(){  return added;}  }
class C{  private void writeStub(IndentingWriter p) throws IOException {  p.pln("// Stub class generated by rmic, do not edit.");  p.pln("// Contents subject to change without notice.");  p.pln();  if (remoteClassName.isQualified()) {    p.pln("package " + remoteClassName.getQualifier() + ";");    p.pln();  }  p.plnI("public final class " + Names.mangleClass(stubClassName.getName()));  p.pln("extends " + idRemoteStub);  ClassDefinition[] remoteInterfaces=remoteClass.getRemoteInterfaces();  if (remoteInterfaces.length > 0) {    p.p("implements ");    for (int i=0; i < remoteInterfaces.length; i++) {      if (i > 0)       p.p(", ");      p.p(remoteInterfaces[i].getName().toString());    }    p.pln();  }  p.pOlnI("{");  if (version == STUB_VERSION_1_1 || version == STUB_VERSION_FAT) {    writeOperationsArray(p);    p.pln();    writeInterfaceHash(p);    p.pln();  }  if (version == STUB_VERSION_FAT || version == STUB_VERSION_1_2) {    p.pln("private static final long serialVersionUID = " + STUB_SERIAL_VERSION_UID + ";");    p.pln();    if (methodFieldNames.length > 0) {      if (version == STUB_VERSION_FAT) {        p.pln("private static boolean useNewInvoke;");      }      writeMethodFieldDeclarations(p);      p.pln();      p.plnI("static {");      p.plnI("try {");      if (version == STUB_VERSION_FAT) {        p.plnI(idRemoteRef + ".class.getMethod(\"invoke\",");        p.plnI("new java.lang.Class[] {");        p.pln(idRemote + ".class,");        p.pln("java.lang.reflect.Method.class,");        p.pln("java.lang.Object[].class,");        p.pln("long.class");        p.pOln("});");        p.pO();        p.pln("useNewInvoke = true;");      }      writeMethodFieldInitializers(p);      p.pOlnI("} catch (java.lang.NoSuchMethodException e) {");      if (version == STUB_VERSION_FAT) {        p.pln("useNewInvoke = false;");      } else {        p.plnI("throw new java.lang.NoSuchMethodError(");        p.pln("\"stub class initialization failed\");");        p.pO();      }      p.pOln("}");      p.pOln("}");      p.pln();    }  }  writeStubConstructors(p);  p.pln();  if (remoteMethods.length > 0) {    p.pln("// methods from remote interfaces");    for (int i=0; i < remoteMethods.length; ++i) {      p.pln();      writeStubMethod(p,i);    }  }  p.pOln("}");}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  Map<String,String> propInfo=_coordinator.getPropertyInfo().getProperties();  ArrayList<String> nodeNameProperties=getNodeNameProperties(propInfo);  ArrayList<String> changedProperties=new ArrayList<String>();  String uniqueShortNameValue=getLatestValue(USE_SHORT_NODE_NAME,newProps,propInfo);  if (isProprotyChanged(oldProps,newProps,USE_SHORT_NODE_NAME) && uniqueShortNameValue.equalsIgnoreCase("true")) {    changedProperties.addAll(nodeNameProperties);  } else {    for (    String prop : nodeNameProperties) {      if (isProprotyChanged(oldProps,newProps,prop)) {        changedProperties.add(prop);      }    }  }  if (changedProperties.isEmpty()) {    return;  }  for (  String changedProp : changedProperties) {    String changedValue=getLatestValue(changedProp,newProps,propInfo).toLowerCase();    String nodeNum=changedProp.replaceAll("\\D+","");    if (changedValue.matches("vipr\\d+") && !nodeNum.isEmpty()) {      if (!changedValue.equals("vipr" + nodeNum)) {        throw BadRequestException.badRequests.invalidNodeNameIsIdOfAnotherNode(changedProp,changedValue);      }    }  }  if (uniqueShortNameValue.equalsIgnoreCase("true")) {    for (    String changedProp : changedProperties) {      String changedValue=getLatestValue(changedProp,newProps,propInfo).split("\\.")[0];      for (      String prop : nodeNameProperties) {        String compareValue=getLatestValue(prop,newProps,propInfo).split("\\.")[0];        if (!changedProp.equals(prop) && changedValue.equals(compareValue)) {          throw BadRequestException.badRequests.invalidNodeShortNamesAreNotUnique(changedValue,changedProp,prop);        }      }    }  } else {    for (    String changedProp : changedProperties) {      String changedValue=getLatestValue(changedProp,newProps,propInfo);      for (      String prop : nodeNameProperties) {        String compareValue=getLatestValue(prop,newProps,propInfo);        if (!changedProp.equals(prop) && changedValue.equals(compareValue)) {          throw BadRequestException.badRequests.invalidNodeNamesAreNotUnique(changedValue,changedProp,prop);        }      }    }  }}  }
class C{  public TestEntity(int index,String text){  this(index,text,0.0);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  static void accumMulti(int counts[],int startTermIndex,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  if (startTermIndex == -1 && (map == null || si.getValueCount() < disi.cost() * 10)) {    accumMultiSeg(counts,si,disi,subIndex,map);  } else {    accumMultiGeneric(counts,startTermIndex,si,disi,subIndex,map);  }}  }
class C{  public WatsonService(String name){  this.name=name;  apiKey=CredentialUtils.getAPIKey(name);  client=configureHttpClient();  String url=CredentialUtils.getAPIUrl(name);  if ((url != null) && !url.isEmpty()) {    setEndPoint(url);  }}  }
class C{  public void testSingleMultiPolygonManyPointsNoHoleRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(1000);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  checkRoundTrip(pt);}  }
class C{  XMLName toXMLNameOrIndex(Context cx,Object value){  XMLName result;  if (value instanceof XMLName) {    result=(XMLName)value;  } else   if (value instanceof String) {    String str=(String)value;    long test=ScriptRuntime.testUint32String(str);    if (test >= 0) {      ScriptRuntime.storeUint32Result(cx,test);      result=null;    } else {      result=toXMLNameFromString(cx,str);    }  } else   if (value instanceof Number) {    double d=((Number)value).doubleValue();    long l=(long)d;    if (l == d && 0 <= l && l <= 0xFFFFFFFFL) {      ScriptRuntime.storeUint32Result(cx,l);      result=null;    } else {      throw badXMLName(value);    }  } else   if (value instanceof QName) {    QName qname=(QName)value;    String uri=qname.uri();    boolean number=false;    result=null;    if (uri != null && uri.length() == 0) {      long test=ScriptRuntime.testUint32String(uri);      if (test >= 0) {        ScriptRuntime.storeUint32Result(cx,test);        number=true;      }    }    if (!number) {      result=XMLName.formProperty(uri,qname.localName());    }  } else   if (value instanceof Boolean || value == Undefined.instance || value == null) {    throw badXMLName(value);  } else {    String str=ScriptRuntime.toString(value);    long test=ScriptRuntime.testUint32String(str);    if (test >= 0) {      ScriptRuntime.storeUint32Result(cx,test);      result=null;    } else {      result=toXMLNameFromString(cx,str);    }  }  return result;}  }
class C{  public void loadNewPayLoadTab(String uuid){  initializeLists();  AnchorPane topPane=createFingerPrintPanel(this.filterPanelList,uuid);  AnchorPane buttonPane=createTreeViewPanel(uuid);  SplitPane newSplitPane=new SplitPane(topPane,buttonPane);  int tabNumber=this.filterPanelList.size();  newSplitPane.setOrientation(Orientation.VERTICAL);  AnchorPane tabAnchorPane=new AnchorPane(newSplitPane);  setAnchorPaneAnchors(newSplitPane);  this.payloadTabsId.getTabs().add(createNewTab(tabAnchorPane,tabNumber));}  }
class C{  public CalcMacroZoneTravelTimes(Map<Id<ActivityFacility>,? extends ActivityFacility> map,Map<Id<ActivityFacility>,Id<ActivityFacility>> micro2MacroZone,int startHour,int endHour){  this.legStore=new HashMap<Id,LegStore>();  this.allFacilities=map;  this.micro2MacroZone=micro2MacroZone;  this.mode2zoneTraveltimes=new HashMap<String,Matrix>();  this.mode2zoneTrips=new HashMap<String,Matrix>();  this.start=startHour;  this.end=endHour;}  }
class C{  public <T>T deepClone(final T o){  if (o == null)   return null;  if (!cloningEnabled)   return o;  if (dumpCloned != null) {    dumpCloned.startCloning(o.getClass());  }  final Map<Object,Object> clones=new IdentityHashMap<Object,Object>(16);  try {    return cloneInternal(o,clones);  } catch (  final IllegalAccessException e) {    throw new CloningException("error during cloning of " + o,e);  }}  }
class C{  public CTrackingResultsTableModel(final CTrackingResultContainer container){  m_container=Preconditions.checkNotNull(container,"IE01692: Container argument can not be null");  m_container.addListener(m_resultsListener);}  }
class C{  void processType(Fact typeFact){  Resource type=(Resource)typeFact.getObject();  boolean newType=!knownTypes.containsKey(type);  int t=typeFact.getIteration();  if (newType || t < knownTypes.get(type).getIteration()) {    knownTypes.put(type,typeFact);    typeInference(typeFact);  }}  }
class C{  public static boolean assertNotNull(final String msg,final Object obj){  if (obj == null) {    throw new ExamException(msg + ": Is null");  }  return true;}  }
class C{  public List<Zone> showFabricZones(Integer vsanId) throws NetworkDeviceControllerException {  List<Zone> zones=new ArrayList<Zone>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.showFabricZones.cmd") + vsanId.toString() + "\n",defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  Zone zone=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.showZoneset.zonename.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.pwwn.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.deviceAlias.match")};  Map<String,String> aliasDatabase=showDeviceAliasDatabase();  String[] groups=new String[10];  for (  String line : lines) {    ZoneMember member=null;    int index=match(line,regex,groups);switch (index) {case 0:      if (!vsanId.toString().equals(groups[1])) {        String message="VSAN " + vsanId.toString() + " not the expected VSAN "+ groups[1];        throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);      }    zone=new Zone(groups[0]);  zones.add(zone);break;case 1:case 2:member=new ZoneMember(ZoneMember.ConnectivityMemberType.WWPN);zone.getMembers().add(member);if (index == 1) {member.setAddress(groups[0]);if (groups.length >= 2 && groups[1] != null) {member.setAlias(groups[1].replace("[","").replace("]",""));}} else if (index == 2) {member.setAlias(groups[0]);member.setAliasType(true);String pwwn=getDeviceAliasPwwn(groups[0],aliasDatabase);if (!StringUtils.isEmpty(pwwn)) {member.setAddress(pwwn);}}break;}}return zones;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void computeSupportedAuthnTypes(AuthnRequestState t,AuthnRequest request){  log.debug("Computing authentication types to be enabled for this request.");  Validate.notNull(t,"AuthnRequestState");  Validate.notNull(request,"AuthnRequest");  RequestedAuthnContext authnContext=request.getRequestedAuthnContext();  if (authnContext != null) {    AuthnContextComparisonTypeEnumeration comparisonType=authnContext.getComparison();    if (comparisonType != AuthnContextComparisonTypeEnumeration.EXACT) {      log.warn("WEBSSO only support EXACT comparison type for RequestedAuthnContext. Ignore RequestedAuthnContext the element.");    } else {      AuthnTypesSupported allowedTypes=new AuthnTypesSupported(false,false,false,false);      AuthnTypesSupported tenantAllowedTypes=t.getAuthTypesSupportecd();      List<AuthnContextClassRef> requestedTypes=authnContext.getAuthnContextClassRefs();      if (requestedTypes == null || requestedTypes.size() == 0) {        return;      }      if (requestedTypes.size() == 1 && requestedTypes.get(0).getAuthnContextClassRef().equals(AuthnContext.PPT_AUTHN_CTX)) {        return;      }      for (      AuthnContextClassRef requestedType : requestedTypes) {        String requestedTypeString=requestedType.getAuthnContextClassRef();        if (requestedTypeString == null)         continue;        if (requestedTypeString.equals(AuthnContext.PPT_AUTHN_CTX) && tenantAllowedTypes.supportsPasswordProtectTransport()) {          allowedTypes.setPasswordProtectTransport(true);        } else         if (requestedTypeString.equals(AuthnContext.TLS_CLIENT_AUTHN_CTX) && tenantAllowedTypes.supportsTlsClientCert()) {          allowedTypes.setTlsClientCert(true);        } else         if ((requestedTypeString.equals(AuthnContext.KERBEROS_AUTHN_CTX) || requestedTypeString.equals(OasisNames.INTEGRATED_WINDOWS)) && tenantAllowedTypes.supportsWindowsSession()) {          allowedTypes.setWindowsSession(true);        }      }      t.setAuthnTypesSupported(allowedTypes);    }  }}  }
class C{  public static BlockObject queryFullCopyResource(URI fcResourceURI,UriInfo uriInfo,boolean isSource,DbClient dbClient){  ArgValidator.checkUri(fcResourceURI);  if (isSource) {    if ((!URIUtil.isType(fcResourceURI,Volume.class)) && (!URIUtil.isType(fcResourceURI,BlockSnapshot.class))) {      throw APIException.badRequests.invalidFullCopySource(fcResourceURI.toString());    }  } else   if (!URIUtil.isType(fcResourceURI,Volume.class)) {    throw APIException.badRequests.protectionVolumeNotFullCopy(fcResourceURI);  }  BlockObject blockObj=BlockObject.fetch(dbClient,fcResourceURI);  ArgValidator.checkEntity(blockObj,fcResourceURI,BlockServiceUtils.isIdEmbeddedInURL(fcResourceURI,uriInfo),true);  return blockObj;}  }
class C{  @Override public void layoutContainer(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    boolean ltr=parent.getComponentOrientation().isLeftToRight();    if (ncomponents == 0) {      return;    }    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=parent.getWidth() - (insets.left + insets.right);    int h=parent.getHeight() - (insets.top + insets.bottom);    w=(w - (ncols - 1) * hgap) / ncols;    h=(h - (nrows - 1) * vgap) / nrows;    int i;    if (ltr) {      for (int c=0, x=insets.left; c < ncols; c++, x+=w + hgap) {        for (int r=0, y=insets.top; r < nrows; r++, y+=h + vgap) {          if (isVertical) {            i=r + c * nrows;          } else {            i=r * ncols + c;          }          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,w,h);          }        }      }    } else {      for (int c=0, x=parent.getWidth() - insets.right - w; c < ncols; c++, x-=w + hgap) {        for (int r=0, y=insets.top; r < nrows; r++, y+=h + vgap) {          if (isVertical) {            i=r + c * nrows;          } else {            i=r * ncols + c;          }          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,w,h);          }        }      }    }  }}  }
class C{  private byte[] toBytes(int szx,boolean m,int num){  byte[] bytes=new BlockOption(szx,m,num).getValue();  System.out.println("(szx=" + szx + ", m="+ m+ ", num="+ num+ ") => "+ Utils.toHexString(bytes));  return bytes;}  }
class C{  private void cancelConnectionDragging(){  model.setConnectingPortSource(null);  model.fireMiscChanged();}  }
class C{  public static double[][] F(Instances D){  int L=D.classIndex();  double M[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      M[j][k]=Math.abs(1. - f(D,j,k));    }  }  return M;}  }
class C{  private void deleteRecords(int AD_Client_ID,int AD_Org_ID,int S_Resource_ID,int M_Warehouse_ID) throws SQLException {{    List<Object> params=new ArrayList<Object>();    params.add(AD_Client_ID);    params.add(AD_Org_ID);    params.add(M_Warehouse_ID);    String whereClause="OrderType IN ('FCT','POR', 'SOO', 'POO') AND AD_Client_ID=? AND AD_Org_ID=? AND M_Warehouse_ID=?";    executeUpdate("DELETE FROM PP_MRP WHERE " + whereClause,params);    commitEx();    whereClause="DocStatus IN ('DR','CL') AND AD_Client_ID=? AND AD_Org_ID=? AND M_Warehouse_ID=?";    deletePO(MRequisition.Table_Name,whereClause,params);    commitEx();    params=new ArrayList<Object>();    params.add(AD_Client_ID);    params.add(AD_Org_ID);    params.add(M_Warehouse_ID);    whereClause="DocStatus IN ('DR') AND AD_Client_ID=? AND AD_Org_ID=? AND M_Warehouse_ID=?";    deletePO(MDDOrder.Table_Name,whereClause,params);    commitEx();  }{    List<Object> params=new ArrayList<Object>();    params.add(AD_Client_ID);    params.add(AD_Org_ID);    params.add(S_Resource_ID);    params.add(M_Warehouse_ID);    String whereClause="OrderType IN ('MOP') AND AD_Client_ID=? AND AD_Org_ID=? AND S_Resource_ID= ? AND M_Warehouse_ID=?";    executeUpdate("DELETE FROM PP_MRP WHERE " + whereClause,params);    commitEx();    whereClause="DocStatus='DR' AND AD_Client_ID=? AND AD_Org_ID=? AND S_Resource_ID= ? AND M_Warehouse_ID=?";    deletePO(MPPOrder.Table_Name,whereClause,params);    commitEx();    params=new ArrayList<Object>();    params.add(AD_Client_ID);    params.add(AD_Org_ID);    whereClause="OrderType IN ('DOO') AND AD_Client_ID=? AND AD_Org_ID=? ";    executeUpdate("DELETE FROM PP_MRP WHERE " + whereClause,params);    commitEx();  }{    List<Object> params=new ArrayList<Object>();    params.add(AD_Client_ID);    params.add(AD_Org_ID);    String whereClause="AD_Table_ID=" + MPPMRP.Table_ID + " AND AD_Client_ID=? AND AD_Org_ID=?";    executeUpdate("DELETE FROM AD_Note WHERE " + whereClause,params);    commitEx();  }}  }
class C{  private void writeWifis(final BufferedWriter bw) throws IOException {  Log.i(TAG,"Writing wifi waypoints");  Cursor c=mDbHelper.getReadableDatabase().rawQuery(WIFI_POINTS_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(0)});  final int colLatitude=c.getColumnIndex(Schema.COL_LATITUDE);  final int colLongitude=c.getColumnIndex(Schema.COL_LONGITUDE);  final int colAltitude=c.getColumnIndex(Schema.COL_ALTITUDE);  final int colTimestamp=c.getColumnIndex(Schema.COL_TIMESTAMP);  final int colSsid=c.getColumnIndex(Schema.COL_SSID);  long outer=0;  while (!c.isAfterLast()) {    c.moveToFirst();    while (!c.isAfterLast()) {      StringBuffer out=new StringBuffer();      out.append("<wpt lat=\"");      out.append(String.valueOf(c.getDouble(colLatitude)));      out.append("\" ");      out.append("lon=\"");      out.append(String.valueOf(c.getDouble(colLongitude)));      out.append("\">");      out.append("<ele>");      out.append(String.valueOf(c.getDouble(colAltitude)));      out.append("</ele>\n");      out.append("<time>");      out.append(getGpxDate(c.getLong(colTimestamp)));      out.append("</time>");      out.append("<name>");      out.append(StringEscapeUtils.escapeXml10(c.getString(colSsid)));      out.append("</name>");      out.append("</wpt>");      bw.write(out.toString());      bw.flush();      c.moveToNext();    }    outer+=CURSOR_SIZE;    c.close();    c=mDbHelper.getReadableDatabase().rawQuery(WIFI_POINTS_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  c.close();}  }
class C{  public DrawerRecyclerAdapter(Context context,DrawerRecyclerInterface drawerRecyclerInterface){  this.context=context;  this.drawerRecyclerInterface=drawerRecyclerInterface;}  }
class C{  public boolean isInRange(int i){  return (i >= start) && (i < end);}  }
class C{  @SuppressWarnings("unchecked") public static void init(boolean mustLog){  if (hasToLog == null || hasToLog.booleanValue() != mustLog) {    if (mustLog) {      try {        hasToLog=Boolean.TRUE;        loggerClass=Class.forName("org.slf4j.LoggerFactory");        method=loggerClass.getMethod("getLogger",Class.class);      } catch (      ClassNotFoundException classNotFound) {        System.out.println("Logging cannot be activated, missing slf4j dependency");        hasToLog=Boolean.FALSE;      }catch (      NoSuchMethodException classNotFound) {        System.out.println("Logging cannot be activated, missing slf4j dependency");        hasToLog=Boolean.FALSE;      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    double streamsID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public NormalCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener){  mToolbarListener=toolbarListener;  return this;}  }
class C{  public ObjectInstance(ObjectName objectName,String className){  if (objectName.isPattern()) {    final IllegalArgumentException iae=new IllegalArgumentException("Invalid name->" + objectName.toString());    throw new RuntimeOperationsException(iae);  }  this.name=objectName;  this.className=className;}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  InetAddress destIp=Inet4Address.ALL;  fillInPacket(encap,Inet4Address.ALL,Inet4Address.ANY,destUdp,srcUdp,result,DHCP_BOOTREQUEST,true);  result.flip();  return result;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  boolean addModule(@Nonnull String moduleName){  verifyIsRoot();  if (children.containsKey(moduleName)) {    children.get(moduleName).resetHierarchy();    return false;  } else {    CounterNode newNode=new CounterNode(ImmutableList.of(moduleName),null);    children.put(moduleName,newNode);    return true;  }}  }
class C{  @Override public void findAndModify(String id){}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputHeader=args[2];  if (inputHeader1.isEmpty() || outputHeader.isEmpty() || inputHeader2.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells1=0;    int numCells2=0;    int i=0;    WhiteboxRasterInfo inputFile1=new WhiteboxRasterInfo(inputHeader1);    int rows1=inputFile1.getNumberRows();    int cols1=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    WhiteboxRasterInfo inputFile2=new WhiteboxRasterInfo(inputHeader2);    int rows2=inputFile2.getNumberRows();    int cols2=inputFile2.getNumberColumns();    double noData2=inputFile2.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    double minValue1=inputFile1.getMinimumValue();    double maxValue1=inputFile1.getMaximumValue();    int numBins1=Math.max(2 * (int)Math.ceil(maxValue1 - minValue1 + 1),(int)Math.ceil(Math.pow(rows1 * cols1,1.0 / 3)));    double binSize=(maxValue1 - minValue1) / numBins1;    long[] histogram=new long[numBins1];    int binNum;    int numBinsLessOne1=numBins1 - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          numCells1++;          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins1];    cdf[0]=histogram[0];    for (i=1; i < numBins1; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    for (i=0; i < numBins1; i++) {      cdf[i]=cdf[i] / numCells1;    }    double minValue2=inputFile2.getMinimumValue();    double maxValue2=inputFile2.getMaximumValue();    int numBins2=Math.max(2 * (int)Math.ceil(maxValue2 - minValue2 + 1),(int)Math.ceil(Math.pow(rows2 * cols2,1.0 / 3)));    int numBinsLessOne2=numBins2 - 1;    long[] histogram2=new long[numBins2];    double[][] referenceCDF=new double[numBins2][2];    for (row=0; row < rows2; row++) {      data=inputFile2.getRowValues(row);      for (col=0; col < cols2; col++) {        z=data[col];        if (z != noData2) {          numCells2++;          binNum=(int)((z - minValue2) / binSize);          if (binNum > numBinsLessOne2) {            binNum=numBinsLessOne2;          }          histogram2[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 2 of 3: ",(int)progress);    }    referenceCDF[0][1]=histogram2[0];    for (i=1; i < numBins2; i++) {      referenceCDF[i][1]=referenceCDF[i - 1][1] + histogram2[i];    }    for (i=0; i < numBins2; i++) {      referenceCDF[i][0]=minValue2 + (i / (float)numBins2) * (maxValue2 - minValue2);      referenceCDF[i][1]=referenceCDF[i][1] / numCells2;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numBins2; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numBins2; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions/{sid}/unlink-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep unlinkTargetVolumesForSession(@PathParam("id") URI id,@PathParam("sid") URI sessionId,SnapshotSessionUnlinkTargetsParam param){  validateSessionPartOfConsistencyGroup(id,sessionId);  return unlinkTargetVolumesFromSnapshotSession(sessionId,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);}  }
class C{  public void unsetTiling(){  if (!canWriteTiles()) {    throw new UnsupportedOperationException("Tiling not supported!");  }  if (getTilingMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Tiling mode not MODE_EXPLICIT!");  }  this.tilingSet=false;  this.tileWidth=0;  this.tileHeight=0;  this.tileGridXOffset=0;  this.tileGridYOffset=0;}  }
class C{  public boolean isFusion(){  if ((engineType == COMBUSTION_ENGINE) || (engineType == FISSION) || (engineType == FUEL_CELL)|| (engineType == NONE)|| (engineType == BATTERY)|| (engineType == SOLAR)|| (engineType == STEAM)|| (engineType == MAGLEV)) {    return false;  }  return true;}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,CertStore certsAndCrls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certs=null;  ASN1Set crls=null;  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCertificatesFromStore(certsAndCrls));    if (set.size() != 0) {      certs=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting certs from certStore",e);  }  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(certsAndCrls));    if (set.size() != 0) {      crls=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting crls from certStore",e);  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certs,crls,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public static float distancePointLine(float pointX,float pointY,float x0,float y0,float x1,float y1){  float dx=x1 - x0;  float dy=y1 - y0;  float denom=(float)Math.sqrt(dx * dx + dy * dy);  return (dx * (y0 - pointY) - (x0 - pointX) * dy) / denom;}  }
class C{  private void initMocks(boolean enableMcast,Properties addProp) throws Exception {  if (messenger != null) {    messenger.stop();    messenger=null;  }  Properties nonDefault=new Properties();  nonDefault.put(DISABLE_TCP,"true");  nonDefault.put(MCAST_PORT,enableMcast ? "" + AvailablePortHelper.getRandomAvailableUDPPort() : "0");  nonDefault.put(MCAST_TTL,"0");  nonDefault.put(LOG_FILE,"");  nonDefault.put(LOG_LEVEL,"fine");  nonDefault.put(LOCATORS,"localhost[10344]");  nonDefault.put(ACK_WAIT_THRESHOLD,"1");  nonDefault.putAll(addProp);  DistributionConfigImpl config=new DistributionConfigImpl(nonDefault);  RemoteTransportConfig tconfig=new RemoteTransportConfig(config,DistributionManager.NORMAL_DM_TYPE);  stopper=mock(Stopper.class);  when(stopper.isCancelInProgress()).thenReturn(false);  manager=mock(Manager.class);  when(manager.isMulticastAllowed()).thenReturn(enableMcast);  healthMonitor=mock(HealthMonitor.class);  joinLeave=mock(JoinLeave.class);  ServiceConfig serviceConfig=new ServiceConfig(tconfig,config);  services=mock(Services.class);  when(services.getConfig()).thenReturn(serviceConfig);  when(services.getCancelCriterion()).thenReturn(stopper);  when(services.getHealthMonitor()).thenReturn(healthMonitor);  when(services.getManager()).thenReturn(manager);  when(services.getJoinLeave()).thenReturn(joinLeave);  DM dm=mock(DM.class);  InternalDistributedSystem system=InternalDistributedSystem.newInstanceForTesting(dm,nonDefault);  when(services.getStatistics()).thenReturn(new DistributionStats(system,statsId));  messenger=new JGroupsMessenger();  messenger.init(services);  when(services.getMessenger()).thenReturn(messenger);  String jgroupsConfig=messenger.getJGroupsStackConfig();  int startIdx=jgroupsConfig.indexOf("<org");  int insertIdx=jgroupsConfig.indexOf('>',startIdx + 4) + 1;  jgroupsConfig=jgroupsConfig.substring(0,insertIdx) + "<" + InterceptUDP.class.getName()+ "/>"+ jgroupsConfig.substring(insertIdx);  messenger.setJGroupsStackConfigForTesting(jgroupsConfig);  messenger.start();  messenger.started();  interceptor=(InterceptUDP)messenger.myChannel.getProtocolStack().getTransport().getUpProtocol();}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public boolean isValidInet4Address(String ipv4){  return INET_ADDRESS_VALIDATOR.isValidInet4Address(ipv4);}  }
class C{  @SuppressWarnings("ThrowFromFinallyBlock") private long readUTFSpan(StringBuilder sbuf,long utfLen) throws IOException {  int cpos=0;  int start=pos;  int avail=Math.min(end - pos,CHAR_BUF_SIZE);  int stop=pos + ((utfLen > avail) ? avail - 2 : (int)utfLen);  boolean outOfBounds=false;  try {    while (pos < stop) {      int b1=utfBuf[pos++] & 0xFF;      int b2, b3;switch (b1 >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:        urfCBuf[cpos++]=(char)b1;      break;case 12:case 13:    b2=utfBuf[pos++];  if ((b2 & 0xC0) != 0x80)   throw new UTFDataFormatException();urfCBuf[cpos++]=(char)(((b1 & 0x1F) << 6) | (b2 & 0x3F));break;case 14:b3=utfBuf[pos + 1];b2=utfBuf[pos];pos+=2;if ((b2 & 0xC0) != 0x80 || (b3 & 0xC0) != 0x80) throw new UTFDataFormatException();urfCBuf[cpos++]=(char)(((b1 & 0x0F) << 12) | ((b2 & 0x3F) << 6) | (b3 & 0x3F));break;default :throw new UTFDataFormatException();}}} catch (ArrayIndexOutOfBoundsException ignored) {outOfBounds=true;} finally {if (outOfBounds || (pos - start) > utfLen) {pos=start + (int)utfLen;throw new UTFDataFormatException();}}sbuf.append(urfCBuf,0,cpos);return pos - start;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  public GitlabProject createProject(String name) throws IOException {  return createProject(name,null,null,null,null,null,null,null,null,null,null);}  }
class C{  public static java.lang.Integer valueOf(java.lang.String s) throws java.lang.NumberFormatException {  return null;}  }
class C{  private void buildMainComment(String rawJavaDoc){  Matcher commentMatcher=COMMENT_BLOCK.matcher(rawJavaDoc);  commentMatcher.find();  try {    comment=commentMatcher.group(1);  } catch (  Exception ex) {    comment=rawJavaDoc;  }  comment=NamingHelper.cleanLeadingAndTrailingNewLineAndChars(comment).replaceAll("\\n *\\* *","\n ");}  }
class C{  private static void edgeSplitSuccessors(SsaMethod result){  ArrayList<SsaBasicBlock> blocks=result.getBlocks();  for (int i=blocks.size() - 1; i >= 0; i--) {    SsaBasicBlock block=blocks.get(i);    BitSet successors=(BitSet)block.getSuccessors().clone();    for (int j=successors.nextSetBit(0); j >= 0; j=successors.nextSetBit(j + 1)) {      SsaBasicBlock succ=blocks.get(j);      if (needsNewSuccessor(block,succ)) {        block.insertNewSuccessor(succ);      }    }  }}  }
class C{  public UploadPartCopyResult uploadPartCopy(UploadPartCopyRequest uploadPartCopyRequest) throws OSSException, ClientException {  assertParameterNotNull(uploadPartCopyRequest,"uploadPartCopyRequest");  String key=uploadPartCopyRequest.getKey();  String bucketName=uploadPartCopyRequest.getBucketName();  String uploadId=uploadPartCopyRequest.getUploadId();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  assertStringNotNullOrEmpty(uploadId,"uploadId");  Long partSize=uploadPartCopyRequest.getPartSize();  if (partSize != null) {    if (!checkParamRange(partSize,0,true,DEFAULT_FILE_SIZE_LIMIT,true)) {      throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getString("FileSizeOutOfRange"));    }  }  int partNumber=uploadPartCopyRequest.getPartNumber();  if (!checkParamRange(partNumber,0,false,MAX_PART_NUMBER,true)) {    throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getString("PartNumberOutOfRange"));  }  Map<String,String> headers=new HashMap<String,String>();  populateCopyPartRequestHeaders(uploadPartCopyRequest,headers);  Map<String,String> params=new LinkedHashMap<String,String>();  params.put(PART_NUMBER,Integer.toString(partNumber));  params.put(UPLOAD_ID,uploadId);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(bucketName).setKey(key).setParameters(params).setHeaders(headers).setOriginalRequest(uploadPartCopyRequest).build();  return doOperation(request,new UploadPartCopyResponseParser(partNumber),bucketName,key,true);}  }
class C{  public CallHierarchyTreeElementLabelProvider(CallHierarchyViewPart viewPart){  this.viewPart=viewPart;}  }
class C{  public PubsubFuture<TopicList> listTopics(final String project,final String pageToken){  final String query=(pageToken == null) ? "" : "?pageToken=" + pageToken;  final String path="projects/" + project + "/topics"+ query;  return get("list topics",path,TopicList.class);}  }
class C{  public static void showFormattedError(String errorKey,Object... args){  _callback.showFormattedError(errorKey,args);}  }
class C{  @Override public String toString(){  return this.getTransportUnit() + "/" + this.getLoadUnit().getPhysicalPosition()+ "/"+ this.getLabel();}  }
class C{  public static boolean compare(Context context,String a,String b){  boolean useStrict=context.getResources().getBoolean(com.android.internal.R.bool.config_use_strict_phone_number_comparation);  return compare(a,b,useStrict);}  }
class C{  public void saveConfigForID(String modid){  ConfigContainer configContainer=this.configContainers.get(modid);  if (configContainer != null) {    configContainer.save();  }}  }
class C{  public boolean isMaxYSet(){  return isMaxYSet(0);}  }
class C{  @RequestMapping(value="/renewals/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete Renewal : {}",id);  ownerService.checkOldOwner(renewalRepository,id);  renewalRepository.delete(id);}  }
class C{  public void checkReplicationDataSanity(Pair<SolrCore,SolrCore> request,ReplicationDiagnostics diagnostics) throws Exception {  SolrCore replicatedCore=request.getLhs();  for (int retry=0; retry < 10; retry++) {    try {      replicatedCore.loadStatus();      logger.info("Obtained Core Status successfully " + replicatedCore);      break;    } catch (    Exception e) {      logger.info("Encountered Exception while loading core status " + replicatedCore + " Retrying #"+ retry);      if (retry == 9) {        if (isCollectionQueryable(replicatedCore)) {          logger.info("Unable to load core status but able to query core succesfully:" + replicatedCore.name);          return;        }      }      Thread.sleep(SolrInteractionUtils.DEFAULT_SLEEP_TIME);    }  }  if (!isSourceCoreHealthy(replicatedCore)) {    if (!replicatorConfig.shouldSkipReplicationFailures()) {      throw new ReplicationFailureException("Replication Failed due to Replicated Core being unavailable.." + replicatedCore.name);    }  } else {    SolrCore bestsrcCore=request.getRhs();    Pair<Boolean,String> replicationSuccessToReasonPair=bestsrcCore.dataMatch(replicatedCore);    if (!(replicationSuccessToReasonPair.getLhs())) {      diagnostics.setEntity(replicatedCore.name);      diagnostics.setReason(replicationSuccessToReasonPair.getRhs());      diagnostics.setFailedReplication(true);      logger.info("Replication Failed: " + diagnostics.getEntity() + " "+ diagnostics.getReason());      allDiagnostics.add(diagnostics);      if (!replicatorConfig.shouldSkipReplicationFailures()) {        throw new ReplicationFailureException("Error Replication Data in core " + replicatedCore.name + " . Reason is "+ replicationSuccessToReasonPair.getRhs());      }    } else {      logger.info("Replication Data match succeeded for  " + replicatedCore.name);    }  }}  }
class C{  public static NodeEndpoint fromHost(final String host){  return new NodeEndpoint("http",host,7890);}  }
class C{  @Override public void run(){  for (; ; ) {    CompletionStatus info;    try {      info=GetQueuedCompletionStatus(port);    } catch (    WindowsException x) {      x.printStackTrace();      return;    }    if (info.completionKey() == WAKEUP_COMPLETION_KEY) {      boolean shutdown=processRequests();      if (shutdown) {        return;      }      continue;    }    WindowsWatchKey key=ck2key.get((int)info.completionKey());    if (key == null) {      continue;    }    boolean criticalError=false;    int errorCode=info.error();    int messageSize=info.bytesTransferred();    if (errorCode == ERROR_NOTIFY_ENUM_DIR) {      key.signalEvent(StandardWatchEventKinds.OVERFLOW,null);    } else     if (errorCode != 0 && errorCode != ERROR_MORE_DATA) {      criticalError=true;    } else {      if (messageSize > 0) {        processEvents(key,messageSize);      } else       if (errorCode == 0) {        key.signalEvent(StandardWatchEventKinds.OVERFLOW,null);      }      try {        ReadDirectoryChangesW(key.handle(),key.buffer().address(),CHANGES_BUFFER_SIZE,key.watchSubtree(),ALL_FILE_NOTIFY_EVENTS,key.countAddress(),key.overlappedAddress());      } catch (      WindowsException x) {        criticalError=true;      }    }    if (criticalError) {      implCancelKey(key);      key.signal();    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_TYPE___TRACER_TYPE_1:    setTracerType_1((String)newValue);  return;case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_11:getAnonymous_traceType_1_1().clear();getAnonymous_traceType_1_1().addAll((Collection<? extends Anonymous_traceType_1_>)newValue);return;case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_21:getAnonymous_traceType_2_1().clear();getAnonymous_traceType_2_1().addAll((Collection<? extends Anonymous_traceType_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Media createMedia(String uri,boolean isVideo,Runnable onCompletion) throws IOException {  MMAPIPlayer player=MMAPIPlayer.createPlayer(uri,onCompletion);  if (isVideo) {    return new MIDPVideoComponent(player,canvas);  }  return player;}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getOwner().contains(p);}  }
class C{  public UnsupportedDigestAlgorithmException(){  super();}  }
class C{  public static void activateEntities(World world){  SpigotTimings.entityActivationCheckTimer.startTiming();  final int miscActivationRange=world.getSpigotConfig().miscActivationRange;  final int animalActivationRange=world.getSpigotConfig().animalActivationRange;  final int monsterActivationRange=world.getSpigotConfig().monsterActivationRange;  int maxRange=Math.max(monsterActivationRange,animalActivationRange);  maxRange=Math.max(maxRange,miscActivationRange);  maxRange=Math.min((world.getSpigotConfig().viewDistance << 4) - 8,maxRange);  for (  Entity player : new ArrayList<Entity>(world.playerEntities)) {    player.activatedTick=MinecraftServer.currentTick;    growBB(maxBB,player.boundingBox,maxRange,256,maxRange);    growBB(miscBB,player.boundingBox,miscActivationRange,256,miscActivationRange);    growBB(animalBB,player.boundingBox,animalActivationRange,256,animalActivationRange);    growBB(monsterBB,player.boundingBox,monsterActivationRange,256,monsterActivationRange);    int i=MathHelper.floor_double(maxBB.minX / 16.0D);    int j=MathHelper.floor_double(maxBB.maxX / 16.0D);    int k=MathHelper.floor_double(maxBB.minZ / 16.0D);    int l=MathHelper.floor_double(maxBB.maxZ / 16.0D);    for (int i1=i; i1 <= j; ++i1) {      for (int j1=k; j1 <= l; ++j1) {        if (world.getWorld().isChunkLoaded(i1,j1)) {          activateChunkEntities(world.getChunkFromChunkCoords(i1,j1));        }      }    }  }  SpigotTimings.entityActivationCheckTimer.stopTiming();}  }
class C{  public boolean isEmpty(){  boolean empty=false;  if ((null == m_value) || (null != m_invalidValue)) {    empty=true;  }  return empty;}  }
class C{  public static void threadWantsOwnResources(){  threadWantsOwnResources.set(Boolean.TRUE);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AbLetterFilterListView(Context context,AttributeSet attrs){  super(context,attrs);  init(context);}  }
class C{  private void addDependentClassesToWorklist(GVCongruenceClass c){  for (  ValueGraphVertex v : c) {    for (Enumeration<GraphNode> e=v.inNodes(); e.hasMoreElements(); ) {      ValueGraphVertex in=(ValueGraphVertex)e.nextElement();      int vn=in.getValueNumber();      GVCongruenceClass x=B.get(vn);      workList.push(x);    }  }}  }
class C{  public boolean isParameterized(){  EList<TypeRef> _typeArgs=this.getTypeArgs();  boolean _isEmpty=_typeArgs.isEmpty();  return (!_isEmpty);}  }
class C{  public void validateKeyField(Schema inputSchema){  if (inputSchema != null && inputSchema.getField(keyField) == null) {    throw new IllegalArgumentException(String.format("Key field '%s' does not exist in the input schema %s",keyField,inputSchema));  }}  }
class C{  public boolean isValidateRoot(){  return true;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public synchronized String toString(){  return super.toString();}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  protected void updateDerivedIdField(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor mappingAccessor){  addFieldNameTranslation(embeddableMapping,overrideName,overrideField,mappingAccessor);  updatePrimaryKeyField(mappingAccessor,overrideField);}  }
class C{  public MqttCallbackHandler(final BaseMqttConnection connection,final DaemonMqttConnectionDetails connectionSettings,final BaseScriptManager scriptManager){  this.connection=connection;  this.connectionSettings=connectionSettings;  this.scriptManager=scriptManager;  this.formattingManager=new FormattingManager(scriptManager);  this.messageLogger=new MqttMessageLogger("0",messageQueue,connectionSettings.getMessageLog(),false,10);  for (  final SubscriptionDetails subscriptionDetails : connectionSettings.getSubscription()) {    this.subscriptionsDetails.put(subscriptionDetails.getTopic(),subscriptionDetails);  }  new Thread(messageLogger).start();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public static Date parse(String src,String ptrn) throws java.text.ParseException {  java.text.DateFormat format=new java.text.SimpleDateFormat(ptrn);  return format.parse(src);}  }
class C{  public void logVelocityMessage(int level,String message){  if (message.equals(Introspector.CACHEDUMP_MSG)) {    sawCacheDump=true;  }}  }
class C{  public RangeQueryBuilder to(Object to){  this.to=to;  return this;}  }
class C{  public static void wtf(Throwable thr){  log(LEVEL.ASSERT,null,null,thr);}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  boolean elementExists(String name){  return !"unknown".equals(name) && (elementHash.get(name) != null);}  }
class C{  public DimensionMapping select(Domain domain,DimensionIndex index) throws ScopeException, SQLScopeException {  Space dspace=getUniverse().S(domain);  Axis axis=createAxis(dspace,index.getDimension());  float estimate=axis.getEstimatedSize();  if (estimate > 0)   estimatedComplexity=estimatedComplexity * estimate;  querySize++;  ExpressionAST expr=getUniverse().getParser().parse(domain,index.getDimension());  ISelectPiece piece=select.select(expr,index.getDimension().getName());  piece.addComment(index.getDimensionName() + " (Dimension)");  OrderByPiece orderBy=select.orderBy(piece);  orderBy.setOrdering(getOrdering());  groupBy(index,piece);  if (this.strategy == Strategy.MIXED) {    piece=mixedSelect.select(piece);    mixedSelect.groupingSets(index.getRoot(),piece);  }  DimensionMapping dmap=new DimensionMapping(piece,domain,index);  dx_map.add(dmap);  return dmap;}  }
class C{  static void zSetPopupLocation(CustomPopup popup,int defaultX,int defaultY,JComponent picker,JComponent verticalFlipReference,int verticalFlipDistance,int bottomOverlapAllowed){  Window topWindowOrNull=SwingUtilities.getWindowAncestor(picker);  Rectangle workingArea=InternalUtilities.getScreenWorkingArea(topWindowOrNull);  int popupWidth=popup.getBounds().width;  int popupHeight=popup.getBounds().height;  Rectangle popupRectangle=new Rectangle(defaultX,defaultY,popupWidth,popupHeight);  if (popupRectangle.getMaxY() > (workingArea.getMaxY() + bottomOverlapAllowed)) {    popupRectangle.y=verticalFlipReference.getLocationOnScreen().y - popupHeight - verticalFlipDistance;  }  if (popupRectangle.getMaxX() > (workingArea.getMaxX())) {    popupRectangle.x-=(popupRectangle.getMaxX() - workingArea.getMaxX());  }  if (popupRectangle.getMaxY() > (workingArea.getMaxY() + bottomOverlapAllowed)) {    popupRectangle.y-=(popupRectangle.getMaxY() - workingArea.getMaxY());  }  if (popupRectangle.x < workingArea.x) {    popupRectangle.x+=(workingArea.x - popupRectangle.x);  }  if (popupRectangle.y < workingArea.y) {    popupRectangle.y+=(workingArea.y - popupRectangle.y);  }  popup.setLocation(popupRectangle.x,popupRectangle.y);}  }
class C{  public static SQLException convert(Throwable e){  if (e instanceof SQLException) {    return (SQLException)e;  }  String message;  if (e instanceof InvocationTargetException) {    InvocationTargetException te=(InvocationTargetException)e;    Throwable t=te.getTargetException();    if (t instanceof SQLException) {      return (SQLException)t;    }    message="Invocation exception";  } else   if (e instanceof IOException) {    message="IO exception";  } else {    message="General exception";  }  return new SQLException(message + ": " + e.toString(),e);}  }
class C{  public void sendSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  if (startColumn + length < m_chunkMask && m_innerFSB == null) {    ch.characters(m_array[startChunk],startColumn,length);    return;  }  int stop=start + length;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     m_innerFSB.sendSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     ch.characters(m_array[i],startColumn,m_chunkSize - startColumn);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   m_innerFSB.sendSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    ch.characters(m_array[stopChunk],startColumn,stopColumn - startColumn);  }}  }
class C{  public static FieldSortBuilder fieldSort(String field){  return new FieldSortBuilder(field);}  }
class C{  public static PcMaxRunner serializableInstance(){  return new PcMaxRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  double gridResolution=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFieldsString=args[0];  String outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputFieldsString.length() < 2) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  gridResolution=Double.parseDouble((args[3]));  try {    String[] inputs=inputFieldsString.split(";");    String inputFile=inputs[0];    String fieldName=inputs[1];    ShapeFile shapefile=new ShapeFile(inputFile);    if (shapefile.getShapeType().getBaseType() != ShapeType.POINT) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable table=shapefile.getAttributeTable();    String[] fieldNames=table.getAttributeTableFieldNames();    int fieldNumber=0;    for (int a=0; a < fieldNames.length; a++) {      if (fieldNames[a].equals(fieldName)) {        fieldNumber=a;        break;      }    }    DBFField field=table.getField(fieldNumber);    if (field.getDataType() != DBFDataType.FLOAT && field.getDataType() != DBFDataType.NUMERIC) {      showFeedback("The selected attribute field must be of a numerical type.");      return;    }    double north=shapefile.getyMax();    double south=shapefile.getyMin();    double east=shapefile.getxMax();    double west=shapefile.getxMin();    rows=(int)(Math.abs(north - south) / gridResolution);    cols=(int)(Math.abs(east - west) / gridResolution);    double noData=-32768.0;    output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,0,noData);    ArrayList<Double> xList=new ArrayList<>();    ArrayList<Double> yList=new ArrayList<>();    ArrayList<Double> zList=new ArrayList<>();    double[][] geometry;    for (    ShapeFileRecord record : shapefile.records) {      geometry=getXYFromShapefileRecord(record);      Object[] attData=table.getRecord(record.getRecordNumber() - 1);      value=(double)attData[fieldNumber];      for (int i=0; i < geometry.length; i++) {        xList.add(geometry[i][0]);        yList.add(geometry[i][1]);        zList.add(value);      }    }    int numPoints=xList.size();    double[] x=new double[numPoints];    double[] y=new double[numPoints];    double[] z=new double[numPoints];    for (int a=0; a < numPoints; a++) {      x[a]=(double)xList.get(a);      y[a]=(double)yList.get(a);      z[a]=(double)zList.get(a);    }    String inputHeaderShort=shapefile.getShortName();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IgniteCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  boolean encloses(SimpleBeanContainer container,Point2D llp){  float topLat=container.getTopLatitude();  float leftLon=container.getLeftLongitude();  float botLat=container.getBottomLatitude();  float rightLon=container.getRightLongitude();  float lat=(float)llp.getY();  float lon=(float)llp.getX();  if ((lon > rightLon) || (lon < leftLon))   return false;  if ((lat > topLat) || (lat < botLat))   return false;  return true;}  }
class C{  protected void parsePush(int length,InStream in) throws IOException {  while (in.getBytesRead() < length) {    int pushType=in.readUI8();switch (pushType) {case PUSHTYPE_STRING:      actions.push(in.readString());    break;case PUSHTYPE_FLOAT:  actions.push(in.readFloat());break;case PUSHTYPE_NULL:actions.pushNull();break;case PUSHTYPE_03:break;case PUSHTYPE_REGISTER:actions.pushRegister(in.readUI8());break;case PUSHTYPE_BOOLEAN:actions.push((in.readUI8() != 0) ? true : false);break;case PUSHTYPE_DOUBLE:actions.push(in.readDouble());break;case PUSHTYPE_INTEGER:actions.push(in.readSI32());break;case PUSHTYPE_LOOKUP:actions.lookup(in.readUI8());break;default :}}}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public static double insertInOrder(HashMap<String,Integer> ts,int N){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.nextString(s);    ts.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
class C{  public void markAsDone(){  if (finished.compareAndSet(false,true)) {    assert tempFileNames.isEmpty() : "not all temporary files are renamed";    try {      indexShard.postRecovery("peer recovery done");    }  finally {      decRef();    }    listener.onRecoveryDone(state());  }}  }
class C{  private int parseEndOfLine(String headerPart,int end){  int index=end;  for (; ; ) {    int offset=headerPart.indexOf('\r',index);    if (offset == -1 || offset + 1 >= headerPart.length()) {      throw new IllegalStateException("Expected headers to be terminated by an empty line.");    }    if (headerPart.charAt(offset + 1) == '\n') {      return offset;    }    index=offset + 1;  }}  }
class C{  protected PSource(String pSrcName){  if (pSrcName == null) {    throw new NullPointerException("pSrcName == null");  }  this.pSrcName=pSrcName;}  }
class C{  @Override protected int correct(int currentOff){  if (offsets == null || currentOff < offsets[0]) {    return currentOff;  }  int hi=size - 1;  if (currentOff >= offsets[hi])   return currentOff + diffs[hi];  int lo=0;  int mid=-1;  while (hi >= lo) {    mid=(lo + hi) >>> 1;    if (currentOff < offsets[mid])     hi=mid - 1; else     if (currentOff > offsets[mid])     lo=mid + 1; else     return currentOff + diffs[mid];  }  if (currentOff < offsets[mid])   return mid == 0 ? currentOff : currentOff + diffs[mid - 1]; else   return currentOff + diffs[mid];}  }
class C{  public boolean isRecordable(){  return mRecordable;}  }
class C{  public ReloadablePropertySource(String name,Properties source,Configuration configuration){  this(name,source,configuration,60);}  }
class C{  @Override public void handleAbout(ApplicationEvent event){  AboutDialog2 abd=new AboutDialog2(myProj.getUIFacade());  abd.show();  event.setHandled(true);}  }
class C{  public void removeDetectUrlFile(String url){synchronized (mModifyLock) {    mDetectUrlFileInfoMap.remove(url);  }}  }
class C{  public int index(int position){  return position;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private void checkAnnotationArgument(Functional a,Tree.Expression e){  if (e != null) {    Tree.Term term=e.getTerm();    if (term instanceof Tree.Literal) {    } else     if (term instanceof Tree.NegativeOp && ((Tree.NegativeOp)term).getTerm() instanceof Tree.Literal) {    } else     if (term instanceof Tree.MetaLiteral) {    } else     if (term instanceof Tree.Tuple) {      Tree.Tuple tuple=(Tree.Tuple)term;      Tree.SequencedArgument sa=tuple.getSequencedArgument();      if (sa != null) {        for (        Tree.PositionalArgument arg : sa.getPositionalArguments()) {          if (arg instanceof Tree.ListedArgument) {            Tree.ListedArgument la=(Tree.ListedArgument)arg;            Tree.Expression expression=la.getExpression();            if (expression != null) {              checkAnnotationArgument(a,expression);            }          } else {            e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");          }        }      }    } else     if (term instanceof Tree.SequenceEnumeration) {      Tree.SequenceEnumeration se=(Tree.SequenceEnumeration)term;      Tree.SequencedArgument sa=se.getSequencedArgument();      if (sa != null) {        for (        Tree.PositionalArgument arg : sa.getPositionalArguments()) {          if (arg instanceof Tree.ListedArgument) {            Tree.ListedArgument la=(Tree.ListedArgument)arg;            Tree.Expression expression=la.getExpression();            if (expression != null) {              checkAnnotationArgument(a,expression);            }          } else {            e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");          }        }      }    } else     if (term instanceof Tree.InvocationExpression) {      checkAnnotationInstantiation(a,e,"illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");    } else     if (term instanceof Tree.BaseMemberExpression) {      Tree.BaseMemberExpression bme=(Tree.BaseMemberExpression)term;      Declaration d=bme.getDeclaration();      if (a != null && d != null && d.isParameter()) {        FunctionOrValue mv=(FunctionOrValue)d;        Parameter p=mv.getInitializerParameter();        if (!p.getDeclaration().equals(a)) {          e.addError("illegal annotation argument: must be a reference to a parameter of the annotation");        }      } else       if (d instanceof Value && (((Value)d).isEnumValue() || ((Value)d).getTypeDeclaration().isObjectClass())) {      } else       if (d != null && d.isStatic()) {      } else {        e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");      }    } else     if (term instanceof Tree.QualifiedMemberExpression) {      Tree.QualifiedMemberExpression qme=(Tree.QualifiedMemberExpression)term;      Declaration d=qme.getDeclaration();      if (d != null && !d.isStatic()) {        e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");      } else {        Tree.Primary p=qme.getPrimary();        while (!(p instanceof Tree.BaseTypeExpression)) {          if (p instanceof Tree.QualifiedTypeExpression) {            Tree.QualifiedTypeExpression qte=(Tree.QualifiedTypeExpression)p;            p=qte.getPrimary();          } else {            e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");            break;          }        }      }    } else {      e.addError("illegal annotation argument: must be a literal value, metamodel reference, annotation instantiation, or parameter reference");    }  }}  }
class C{  private void applyPhaseOptions(JimpleBody b,Map opts){  JJOptions options=new JJOptions(opts);  if (options.use_original_names())   PhaseOptions.v().setPhaseOptionIfUnset("jj.lns","only-stack-locals");  if (Options.v().time())   Timers.v().splitTimer.start();  PackManager.v().getTransform("jj.ls").apply(b);  if (Options.v().time())   Timers.v().splitTimer.end();  PackManager.v().getTransform("jj.a").apply(b);  PackManager.v().getTransform("jj.ule").apply(b);  PackManager.v().getTransform("jj.ne").apply(b);  if (Options.v().time())   Timers.v().assignTimer.start();  PackManager.v().getTransform("jj.tr").apply(b);  if (Options.v().time())   Timers.v().assignTimer.end();  if (options.use_original_names()) {    PackManager.v().getTransform("jj.ulp").apply(b);  }  PackManager.v().getTransform("jj.lns").apply(b);  PackManager.v().getTransform("jj.cp").apply(b);  PackManager.v().getTransform("jj.dae").apply(b);  PackManager.v().getTransform("jj.cp-ule").apply(b);  PackManager.v().getTransform("jj.lp").apply(b);  PackManager.v().getTransform("jj.uce").apply(b);  if (Options.v().time())   Timers.v().stmtCount+=b.getUnits().size();}  }
class C{  public IndTestHsic(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  List<Node> nodes=dataSet.getVariables();  this.variables=Collections.unmodifiableList(nodes);  setAlpha(alpha);  this.dataSet=dataSet;}  }
class C{  private void connectionFailed(){  Message msg=mHandler.obtainMessage(BlueToothServer.MESSAGE_TOAST);  Bundle bundle=new Bundle();  bundle.putString(BlueToothServer.TOAST,"Unable to connect device");  msg.setData(bundle);  mHandler.sendMessage(msg);  BluetoothChatService.this.start();}  }
class C{  public String etag(){  return etag.replaceAll("\"","");}  }
class C{  public MlBayesImObs(BayesPm bayesPm,BayesIm oldBayesIm,int initializationMethod) throws IllegalArgumentException {  if (bayesPm == null) {    throw new NullPointerException("BayesPm must not be null.");  }  this.bayesPm=new BayesPm(bayesPm);  Graph graph=bayesPm.getDag();  this.nodes=graph.getNodes().toArray(new Node[graph.getNodes().size()]);  initialize(oldBayesIm,initializationMethod);}  }
class C{  @SuppressWarnings("unchecked") private void initDrawing(Drawing d){  d.setInputFormats((java.util.List<InputFormat>)Collections.EMPTY_LIST);  d.setOutputFormats((java.util.List<OutputFormat>)Collections.EMPTY_LIST);  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new DrawFigureFactory());  d.addInputFormat(ioFormat);  d.addInputFormat(new ImageInputFormat(new ImageFigure()));  d.addInputFormat(new TextInputFormat(new TextFigure()));  d.addOutputFormat(ioFormat);  d.addOutputFormat(new ImageOutputFormat());}  }
class C{  public void afterDispatch(MvcEvent mvce){}  }
class C{  private String makeLine(AddressbookEntry entry){  return entry.getName() + " " + getStringFromCategories(entry.getCategories());}  }
class C{  @Override public void show(long time,boolean animate){  super.show(time,animate);  mLayoutTabs=null;  setStaticTab(mTabModelSelector.getCurrentTabId());}  }
class C{  public T caseAnnotableN4MemberDeclaration(AnnotableN4MemberDeclaration object){  return null;}  }
class C{  private void removeStorageViewInitiators(VPlexStorageViewInfo storageViewInfo,List<VPlexInitiatorInfo> initiatorInfoList) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_REMOVE_INITIATORS);  modifyStorageViewInitiators(storageViewInfo,initiatorInfoList,requestURI);}  }
class C{  public void reset(){  assert pos == 0;  stack[0].reset();}  }
class C{  protected RouterImpl(){  super();}  }
class C{  protected DecompoundedWord makeSplit(String aWord){  int resultValue;  try {    resultValue=splitter.splitCompound(aWord);  } catch (  Exception e) {    return null;  }  if (resultValue != 0) {    return null;  }  return compoundToSplit(splitter.getCompound());}  }
class C{  public JettySolrRunner startJettySolrRunner(String name,String hostContext,JettyConfig config) throws Exception {  Path runnerPath=createInstancePath(name);  String context=getHostContextSuitableForServletContext(hostContext);  JettyConfig newConfig=JettyConfig.builder(config).setContext(context).build();  JettySolrRunner jetty=new JettySolrRunner(runnerPath.toString(),newConfig);  jetty.start();  jettys.add(jetty);  return jetty;}  }
class C{  public Timer(){  this.timeElapsed=0;  this.running=false;}  }
class C{  public void addSection(String sectionCondition){  int h=diagram.getPaintDevice().getTextHeight(true);  diagram.extendLifelines(diagram.getConfiguration().getSeparatorTopMargin());  separators.add(new Pair<Integer,String>(diagram.getVerticalPosition(),sectionCondition));  diagram.extendLifelines(h + diagram.getConfiguration().getSeparatorBottomMargin() + 5);}  }
class C{  public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {  impl.installBuiltinSound(soundIdentifier,data);}  }
class C{  protected void markColInserted(int col){  colsInserted.set(col);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Map<String,Object> alwaysFailProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentTestAuthorizationAlwaysFailed",locale));}  }
class C{  private static void exportMeasurements(Properties props,int opcount,long runtime) throws IOException {  MeasurementsExporter exporter=null;  try {    OutputStream out;    String exportFile=props.getProperty("exportfile");    if (exportFile == null) {      out=System.out;    } else {      out=new FileOutputStream(exportFile);    }    String exporterStr=props.getProperty("exporter","com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter");    try {      exporter=(MeasurementsExporter)Class.forName(exporterStr).getConstructor(OutputStream.class).newInstance(out);    } catch (    Exception e) {      System.err.println("Could not find exporter " + exporterStr + ", will use default text reporter.");      e.printStackTrace();      exporter=new TextMeasurementsExporter(out);    }    exporter.write("OVERALL","RunTime(ms)",runtime);    double throughput=1000.0 * ((double)opcount) / ((double)runtime);    exporter.write("OVERALL","Throughput(ops/sec)",throughput);    Measurements.getMeasurements().exportMeasurements(exporter);  }  finally {    if (exporter != null) {      exporter.close();    }  }}  }
class C{  protected boolean isSupportingRequiredProposals(){  if (fInvocationContext == null)   return false;  ProposalInfo proposalInfo=getProposalInfo();  if (!(proposalInfo instanceof MemberProposalInfo || proposalInfo instanceof AnonymousTypeProposalInfo))   return false;  CompletionProposal proposal=((MemberProposalInfo)proposalInfo).fProposal;  return proposal != null && (proposal.getKind() == CompletionProposal.METHOD_REF || proposal.getKind() == CompletionProposal.FIELD_REF || proposal.getKind() == CompletionProposal.TYPE_REF || proposal.getKind() == CompletionProposal.CONSTRUCTOR_INVOCATION || proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION);}  }
class C{  public static Object readStaticField(final Class<?> cls,final String fieldName) throws IllegalAccessException {  return FieldUtils.readStaticField(cls,fieldName,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void addDomainlessSubProperties(Resource property,Set<Property> results,Set<Resource> reached){  StmtIterator subs=property.getModel().listStatements(null,RDFS.subPropertyOf,property);  while (subs.hasNext()) {    Resource subProperty=subs.next().getSubject();    if (!reached.contains(subProperty)) {      reached.contains(subProperty);      if (!subProperty.hasProperty(RDFS.domain)) {        results.add(subProperty.getModel().getProperty(subProperty.getURI()));        addDomainlessSubProperties(subProperty,results,reached);      }    }  }}  }
class C{  public NameScope(NameScope outerScope){  this.outerScope=outerScope;  this.functionNestingCount=outerScope != null ? outerScope.functionNestingCount : 0;}  }
class C{  protected int engineUpdate(byte[] in,int inOffset,int inLen,byte[] out,int outOffset) throws ShortBufferException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  void resetInspectors(int preferredSelection){  inspectorSwitcher=new JPanel();  inspectorSwitcher.setLayout(inspectorCardLayout=new CardLayout());  int loc=innerInspectorPanel.getDividerLocation();  innerInspectorPanel.setBottomComponent(inspectorSwitcher);  innerInspectorPanel.setDividerLocation(loc);  for (int x=0; x < inspectorToolbars.size(); x++)   inspectorSwitcher.add(((JComponent)(inspectorToolbars.elementAt(x))),"" + x);  inspectorSwitcher.add(new JPanel(),"-1");  inspectorList.setListData(inspectorNames);  if (preferredSelection >= inspectorToolbars.size())   preferredSelection=0;  if (preferredSelection >= inspectorToolbars.size())   preferredSelection=-1;  inspectorCardLayout.show(inspectorSwitcher,"" + preferredSelection);  inspectorList.setSelectedIndex(preferredSelection);  boolean shouldEnableButtons=(inspectorNames.size() > 0);  detatchButton.setEnabled(shouldEnableButtons);  removeButton.setEnabled(shouldEnableButtons);}  }
class C{  public boolean exportFormatPkiPath(){  return formatPkiPath;}  }
class C{  public void sendMessage(Player player){  if (message != null && player != null) {    Channels.getPlayerChannel(player).sendMessage(message);  }}  }
class C{  @RequestProcessing(value="/admin/tags",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/tags.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String tagTitle=request.getParameter(Common.TITLE);  if (!Strings.isEmptyOrNull(tagTitle)) {    requestJSONObject.put(Tag.TAG_TITLE,tagTitle);  }  final Map<String,Class<?>> tagFields=new HashMap<String,Class<?>>();  tagFields.put(Keys.OBJECT_ID,String.class);  tagFields.put(Tag.TAG_TITLE,String.class);  tagFields.put(Tag.TAG_DESCRIPTION,String.class);  tagFields.put(Tag.TAG_ICON_PATH,String.class);  tagFields.put(Tag.TAG_COMMENT_CNT,Integer.class);  tagFields.put(Tag.TAG_REFERENCE_CNT,Integer.class);  tagFields.put(Tag.TAG_FOLLOWER_CNT,Integer.class);  tagFields.put(Tag.TAG_STATUS,Integer.class);  tagFields.put(Tag.TAG_GOOD_CNT,Integer.class);  tagFields.put(Tag.TAG_BAD_CNT,Integer.class);  final JSONObject result=tagQueryService.getTags(requestJSONObject,tagFields);  dataModel.put(Tag.TAGS,CollectionUtils.jsonArrayToList(result.optJSONArray(Tag.TAGS)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public final void shiftThisLeft(int amount){  if (amount > 0) {    int i;    int oldSize=size;    GF2nField f=coeff[0].getField();    enlarge(size + amount);    for (i=oldSize - 1; i >= 0; i--) {      coeff[i + amount]=coeff[i];    }    if (coeff[0] instanceof GF2nPolynomialElement) {      for (i=amount - 1; i >= 0; i--) {        coeff[i]=GF2nPolynomialElement.ZERO((GF2nPolynomialField)f);      }    } else     if (coeff[0] instanceof GF2nONBElement) {      for (i=amount - 1; i >= 0; i--) {        coeff[i]=GF2nONBElement.ZERO((GF2nONBField)f);      }    }  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void onActivityCreated(@Nullable Bundle savedInstanceState){  if (!showsBottomSheet) {    return;  }  View view=fragment.getView();  if (view != null) {    if (view.getParent() != null) {      throw new IllegalStateException("BottomSheetFragment can not be attached to a container view");    }  }}  }
class C{  @Override public void onPurchaseUpdatesResponse(final PurchaseUpdatesResponse purchaseUpdatesResponse){  Log.v(TAG,"onPurchaseUpdatesRecived recieved: Response -" + purchaseUpdatesResponse);  Log.v(TAG,"PurchaseUpdatesRequestStatus:" + purchaseUpdatesResponse.getPurchaseUpdatesRequestStatus());  Log.v(TAG,"RequestID:" + purchaseUpdatesResponse.getRequestId());  new PurchaseUpdatesAsyncTask().execute(purchaseUpdatesResponse);}  }
class C{  public void rectValuesToPixel(List<RectF> rects){  for (int i=0; i < rects.size(); i++)   rectValueToPixel(rects.get(i));}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/secrets") @Produces(APPLICATION_JSON) public Set<SanitizedSecret> secretDetailForGroup(@Auth AutomationClient automationClient,@PathParam("name") String name){  Group group=groupDAO.getGroup(name).orElseThrow(null);  return aclDAO.getSanitizedSecretsFor(group);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static void main(final String[] args){  Config config=ConfigUtils.createConfig();  config.addModule(PublicTransitMappingConfigGroup.createDefaultConfig());  Set<String> toRemove=config.getModules().keySet().stream().filter(null).collect(Collectors.toSet());  toRemove.forEach(null);  new ConfigWriter(config).write(args[0]);}  }
class C{  public void endInternalAtomicEdit(){  if (internalAtomicEditDepth > 0 && --internalAtomicEditDepth == 0) {    addEdit(compoundEdit);    compoundEdit.end();    compoundEdit=null;    updateActions();  }}  }
class C{  private static int mod(int a,final int B){  final int N=a / B;  a-=N * B;  if (a < 0) {    return a + B;  }  return a;}  }
class C{  public ViewPropertyAnimator translationXBy(float value){  animatePropertyBy(TRANSLATION_X,value);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isToken(){  return lastAccepted.token >= 0;}  }
class C{  @Override public String toString(){  return super.toString() + "[" + hasHandled+ "-"+ hasUnhandled+ "]";}  }
class C{  @ApiOperation(value="Load a configuration file to the single engine") @RequestMapping(value="engine/profile",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postProfile(@RequestParam MultipartFile file){  loadProfileImpl(getSymmetricEngine(),file);}  }
class C{  public Quadrant reflect(int direction){  if (direction == QuadTreeNode.WEST || direction == QuadTreeNode.EAST) {    return cSouthWest;  }  return cNorthEast;}  }
class C{  public void addForces(){  physicsState.clearAllForces();  Bag forceGenerators=this.forceGenerators;  for (int i=0; i < forceGenerators.numObjs; i++) {    ForceGenerator fg=(ForceGenerator)forceGenerators.objs[i];    fg.addForce();  }  Bag mobileObjs=this.mobileObjs;  for (int i=0; i < mobileObjs.numObjs; i++) {    MobileObject2D mobj=(MobileObject2D)mobileObjs.objs[i];    addForceField(mobj);    mobj.addFrictionForce();  }}  }
class C{  public BackgroundPainter(String image,int leftWidth,int centerWidth,int topHeight,int centerHeight){  SpriteStore store=SpriteStore.get();  Sprite mother=store.getSprite(image);  images=new Sprite[9];  int[] widths=new int[3];  widths[0]=leftWidth;  widths[1]=centerWidth;  widths[2]=mother.getWidth() - leftWidth - centerWidth;  int[] heights=new int[3];  heights[0]=topHeight;  heights[1]=centerHeight;  heights[2]=mother.getHeight() - topHeight - centerHeight;  int x=0;  int y=0;  int i=0;  for (int yInd=0; yInd < 3; yInd++) {    for (int xInd=0; xInd < 3; xInd++) {      images[i]=store.getTile(mother,x,y,widths[xInd],heights[yInd]);      x+=widths[xInd];      i++;    }    x=0;    y+=heights[yInd];  }}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (withDependencies) {    appendOption(cmd,"--with-dependencies");  }  if (BooleanUtil.isTrue(js)) {    appendOption(cmd,"--js");  }  if (BooleanUtil.isTrue(jvm)) {    appendOption(cmd,"--jvm");  }  if (BooleanUtil.isTrue(src)) {    appendOption(cmd,"--src");  }  if (BooleanUtil.isTrue(scripts)) {    appendOption(cmd,"--scripts");  }  if (BooleanUtil.isTrue(docs)) {    appendOption(cmd,"--docs");  }  if (BooleanUtil.isTrue(all)) {    appendOption(cmd,"--all");  }  for (  Module module : moduleSet.getModules()) {    log("Adding module: " + module,Project.MSG_VERBOSE);    cmd.createArgument().setValue(module.toVersionedSpec());  }}  }
class C{  private BasicBillingInformation parseParameterUserFee(Node nodeParameter,Node nodeUserFee,RDOParameter parameter,PriceConverter formatter){  Node value=XMLConverter.getLastChildNode(nodeParameter,BillingResultXMLTags.PARAMETER_VALUE_NODE_NAME);  if (value != null) {    parameter.setValue(XMLConverter.getStringAttValue(value,BillingResultXMLTags.AMOUNT_ATTRIBUTE_NAME));  }  BigDecimal valueFactor=XMLConverter.getBigDecimalAttValue(nodeUserFee,BillingResultXMLTags.VALUE_FACTOR_ATTRIBUTE_NAME);  parameter.setValueFactor(formatter.getValueToDisplay(valueFactor,true));  return readBasicBillingInformation(nodeUserFee,parameter,formatter);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_details);}  }
class C{  @After public final void verifyMocks(){  if (!mocks.isEmpty() || !mockControls.isEmpty()) {    assertTrue("Created mocks have not been set to replay. Call replayMocks " + "within the test",mocksReplayed);    if (usePowerMock) {      PowerMock.verifyAll();    } else {      EasyMock.verify(mocks.toArray());    }    for (    IMocksControl mockControl : mockControls) {      mockControl.verify();    }  }}  }
class C{  public SocketHintDeclaration(String genericTypeName,List<String> hintNames,boolean isOutput){  this(null,createReferenceType(genericTypeName,0),hintNames,isOutput);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void expand(int minNewSegmentSize){  if (_segments == null) {    _segments=new ArrayList<char[]>();  }  char[] curr=_currentSegment;  _hasSegments=true;  _segments.add(curr);  _segmentSize+=curr.length;  int oldLen=curr.length;  int sizeAddition=oldLen >> 1;  if (sizeAddition < minNewSegmentSize) {    sizeAddition=minNewSegmentSize;  }  curr=_charArray(Math.min(MAX_SEGMENT_LEN,oldLen + sizeAddition));  _currentSize=0;  _currentSegment=curr;}  }
class C{  public static CTraceOptionsDialog show(final JFrame parent){  final CTraceOptionsDialog dlg=new CTraceOptionsDialog(parent);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  return dlg;}  }
class C{  public static Literal pointLiteral(String point){  return new LiteralImpl(point,WKT_LITERAL_URI);}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  while (pesBuffer.bytesLeft() > 0) {    if (!lastByteWas0B) {      lastByteWas0B=pesBuffer.readUnsignedByte() == 0x0B;      continue;    }    int secondByte=pesBuffer.readUnsignedByte();    if (secondByte == 0x77) {      lastByteWas0B=false;      return true;    } else {      lastByteWas0B=secondByte == 0x0B;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.314 -0500",hash_original_method="0B942B492C5F8BB18EE120311A2A0D6B",hash_generated_method="678F242E04D04F6D88BA9B8744D64E7F") public PropertyChangeListenerProxy(String propertyName,PropertyChangeListener listener){  super(listener);  this.propertyName=propertyName;}  }
class C{  final public void enable_tracing(){}  }
class C{  @TruffleBoundary public static Object createTraceback(int skip){  FrameInstance current=Truffle.getRuntime().getCurrentFrame();  if (current != null) {    TracebackVisitor fiv=new TracebackVisitor(skip);    Truffle.getRuntime().iterateFrames(fiv);    return fiv.head == null ? RNull.instance : fiv.head;  } else {    return RNull.instance;  }}  }
class C{  public Synapse(Network newParent,Neuron source,Neuron target,SynapseUpdateRule learningRule,Synapse templateSynapse){  this(templateSynapse);  setSourceAndTarget(source,target);  initSpikeResponder();  setLearningRule(learningRule);  parentNetwork=newParent;}  }
class C{  public static double mean(double[][] input,int column){  return sum(input,column) / (double)input.length;}  }
class C{  private static final Set<String> encode(String src){  if (src == null || src.length() == 0)   return new HashSet<String>();  StringTokenizer tokenizer=new StringTokenizer(src,";");  int size=tokenizer.countTokens();  Set<String> set=new HashSet<String>();  for (int i=0; i < size; i++)   set.add(tokenizer.nextToken());  return set;}  }
class C{  public static void main(String[] argv){  runFilter(new AddCluster(),argv);}  }
class C{  protected String compare(Field f){  requireNonNull(f);  final StringBuilder str=new StringBuilder(".filter(o -> ");  if (isPrimitive(f.getType())) {    str.append("(this.").append(f.getName()).append(" == o.").append(f.getName()).append(")");  } else {    str.append("Objects.equals(this.").append(f.getName()).append(", o.").append(f.getName()).append(")");  }  return str.append(")").toString();}  }
class C{  private ResourceManager(ResourceBundle bundle){  this.bundle=bundle;}  }
class C{  public SinusFactory(int maxPeaks){  this.maxPeaks=maxPeaks;  this.fft=new FastFourierTransform(WindowFunction.BLACKMAN_HARRIS);  this.filter=new SpectrumFilter(SpectrumFilter.NONE);  this.peakFinder=new BinaryPeakFinder();}  }
class C{  private void createRequest(final String uri,final JsonObject requestObject,final Handler<HttpClientResponse> doneHandler){  final Matcher matcher=pattern.matcher(uri);  final String requestUri=matcher.replaceAll(requestObject.getString(URI));  String payloadStr;  try {    payloadStr=requestObject.getString(PAYLOAD);  } catch (  ClassCastException e) {    payloadStr=requestObject.getJsonObject(PAYLOAD).encode();  }  if (payloadStr != null) {    payloadStr=matcher.replaceAll(payloadStr);  }  MultiMap headers=new CaseInsensitiveHeaders();  JsonArray headersArray=requestObject.getJsonArray(HEADERS);  if (headersArray != null) {    if (LOG.isTraceEnabled()) {      LOG.trace("Request headers:");    }    headersArray.forEach(null);  }  HttpClientRequest delegateRequest=selfClient.request(HttpMethod.valueOf(requestObject.getString(METHOD)),requestUri,doneHandler);  delegateRequest.headers().setAll(headers);  delegateRequest.exceptionHandler(null);  delegateRequest.setTimeout(120000);  if (payloadStr != null) {    delegateRequest.end(Buffer.buffer(payloadStr));  } else {    delegateRequest.end();  }}  }
class C{  private void createListener(){  logger.info("Distributer is creating socket listener");  new Thread(null).start();}  }
class C{  public void tagButtonCXForm(int buttonId,ColorTransform transform) throws IOException {  if (tags != null) {    tags.tagButtonCXForm(buttonId,transform);  }}  }
class C{  private void updateBoardSize(){  int width=(game.getBoard().getWidth() * (int)(HEX_WC * scale)) + (int)((HEX_W / 4) * scale);  int height=(game.getBoard().getHeight() * (int)(HEX_H * scale)) + (int)((HEX_H / 2) * scale);  boardSize=new Dimension(width,height);}  }
class C{  @Override protected void copyValue(Object output,Object extractTuple,boolean isLeft){  if (extractTuple == null) {    return;  }  setAndPopulateGetters(extractTuple,isLeft);  List<FieldObjectMap> fieldsMap;  if (isLeft) {    fieldsMap=fieldMap[0];  } else {    fieldsMap=fieldMap[1];  }  for (  FieldObjectMap map : fieldsMap) {    map.set.set(output,map.get.get(extractTuple));  }}  }
class C{  private void updateBasePlan(int addedCost){  basePlanModel.updateBaseCost(addedCost);}  }
class C{  public boolean delete(String value,String name){  Iterator li=this.parameters.iterator();  NameValue nv;  boolean removed=false;  while (li.hasNext()) {    nv=(NameValue)li.next();    if (((String)nv.getValueAsObject()).equalsIgnoreCase(value) && nv.getName().equalsIgnoreCase(name)) {      li.remove();      removed=true;    }  }  return removed;}  }
class C{  protected void tagHandlerGeneralMethods() throws Exception {  writer.writeLineComment("General Methods");  String rendererType=renderer.getRendererType();  String componentType=component.getComponentType();  writer.fwrite("public String getRendererType() {\n");  writer.indent();  writer.fwrite("return ");  writer.write('\"' + rendererType + "\";\n");  writer.outdent();  writer.fwrite("}\n\n");  writer.fwrite("public String getComponentType() {\n");  writer.indent();  writer.fwrite("return ");  if (componentType.equals(rendererType)) {    writer.write("\"javax.faces.Html" + GeneratorUtil.stripJavaxFacesPrefix(componentType) + "\";\n");  } else {    writer.write("\"javax.faces.Html" + GeneratorUtil.stripJavaxFacesPrefix(componentType) + GeneratorUtil.stripJavaxFacesPrefix(rendererType)+ "\";\n");  }  writer.outdent();  writer.fwrite("}\n\n");}  }
class C{  public boolean contains(S2LatLngRect other){  return lat.contains(other.lat) && lng.contains(other.lng);}  }
class C{  boolean allow(Socket socket){  if (allowOthers) {    return true;  }  try {    return NetUtils.isLocalAddress(socket);  } catch (  UnknownHostException e) {    traceError(e);    return false;  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(getArea(),stream);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:    return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Window(Interpreter interp,String lang){  interpreter=interp;  language=lang;}  }
class C{  public Optional<Target> addTarget(File target,final double x,final double y){  if ('@' != target.toString().charAt(0) && !target.isAbsolute())   target=new File(System.getProperty("shootoff.home") + File.separator + target.getPath());  final Optional<Target> newTarget=arenaPane.getCanvasManager().addTarget(target,false);  if (newTarget.isPresent()) {    final Target t=newTarget.get();    t.setPosition(x,y);    if (isPerspectiveInitialized()) {      arenaPane.resizeTargetToDefaultPerspective(t);    }    targets.add(t);  }  return newTarget;}  }
class C{  @DSComment("System settings/policy") @DSSpec(DSCat.SYSTEM) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.525 -0500",hash_original_method="5F86FAE7117D2E108E68CEB80BF49DA7",hash_generated_method="6ED7733ABB42EB8D1CAB516377E36AA4") public static boolean putInt(ContentResolver cr,String name,int value){  return putString(cr,name,Integer.toString(value));}  }
class C{  public boolean hasSidedRedstoneOutputBehavior(){  return false;}  }
class C{  @Override public void send(final Queue destination,final Message message) throws JMSException {  session.lock();  try {    if (ActiveMQRAQueueSender.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message);    }    checkState();    producer.send(destination,message);    if (ActiveMQRAQueueSender.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public String toString(){  return name;}  }
class C{  public JoinGroupNode(){  super();}  }
class C{  public void writeSpeedCounts(String outputFolder){  String filename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "speedClassCounts.csv";  LOG.info("Writing the speed class counts to " + filename);  BufferedWriter bw=IOUtils.getBufferedWriter(filename);  try {    bw.write("speedClass,count");    bw.newLine();    for (int i=0; i < this.speedObservations.length; i++) {      bw.write(String.format("%d,%.1f\n",i,this.speedObservations[i]));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }  LOG.info("Done writing the speed class counts.");}  }
class C{  public boolean postMortem(PostMortem pm){  for (int integer=0; integer < this.domain; integer+=1) {    if (!postMortem(integer)) {      JSONzip.log("\nBad huff ");      JSONzip.logchar(integer,integer);      return false;    }  }  return this.table.postMortem(((Huff)pm).table);}  }
class C{  @Override public EppResourceIndex next() throws NoSuchElementException {  return nextEri();}  }
class C{  public ESParameterOptimization(EvolutionaryParameterOptimizationOperator operator,int individualSize,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showPlot,RandomGenerator random,LoggingHandler logging){  super(0,1,popSize,individualSize,initType,maxIterations,generationsWithoutImprovement,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showPlot,false,random,logging,operator);  this.operator=operator;}  }
class C{  @Override public final byte readByte() throws IOException {  return dis.readByte();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Jerry not(String cssSelector){  Node[] notNodes=root().find(cssSelector).nodes;  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    if (ArraysUtil.contains(notNodes,node) == false) {      result.add(node);    }  }  return new Jerry(this,result);}  }
class C{  public boolean publishPresenceInfo(PresenceInfo info) throws PayloadException, NetworkException {  boolean result=false;  result=updatePhotoIcon(info.getPhotoIcon());  if (!result) {    return result;  }  info.resetTimestamp();  if (mPermanentState) {    if (sLogger.isActivated()) {      sLogger.info("Publish presence info via XDM request (permanent state)");    }    String xml=buildPermanentPresenceInfoDocument(info);    HttpResponse response=mXdm.setPresenceInfo(xml);    if ((response != null) && response.isSuccessfullResponse()) {      result=true;    } else {      result=false;    }  } else {    if (sLogger.isActivated()) {      sLogger.info("Publish presence info via SIP request");    }    String xml=buildPresenceInfoDocument(info);    result=mPublisher.publish(xml);  }  if (result) {    mPresenceInfo=info;  }  return result;}  }
class C{  protected synchronized void enqueueKeyEvents(long after,Component untilFocused){  if (untilFocused == null) {    return;  }  if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {    focusLog.finer("Enqueue at {0} for {1}",after,untilFocused);  }  int insertionIndex=0, i=typeAheadMarkers.size();  ListIterator<TypeAheadMarker> iter=typeAheadMarkers.listIterator(i);  for (; i > 0; i--) {    TypeAheadMarker marker=iter.previous();    if (marker.after <= after) {      insertionIndex=i;      break;    }  }  typeAheadMarkers.add(insertionIndex,new TypeAheadMarker(after,untilFocused));}  }
class C{  @Override public boolean equals(final Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (o instanceof UsernamePasswordCredentials) {    final UsernamePasswordCredentials that=(UsernamePasswordCredentials)o;    if (LangUtils.equals(username,that.username) && LangUtils.equals(password,that.password)) {      return true;    }  }  return false;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public boolean enableExclusiveNfc(){  NfcAdapter adapter=NfcAdapter.getDefaultAdapter(activity);  if (adapter != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      enableReaderMode(adapter);    } else {      enableForegroundDispatch(adapter);    }    return true;  }  return false;}  }
class C{  public final boolean isResourceAbsent(long resourceID){  return this.isResourceAbsent(Long.toString(resourceID));}  }
class C{  public static void main(String[] args){}  }
class C{  public static <T>T[] append(T[] buffer,T newElement){  T[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public GroovyFieldDoc[] properties(){  Collections.sort(properties);  return properties.toArray(new GroovyFieldDoc[properties.size()]);}  }
class C{  public static void main(String[] argv){  runFilter(new Add(),argv);}  }
class C{  protected PropertyGetterDeclarationImpl(){  super();}  }
class C{  public static String join(String separator,float... elements){  if (elements == null || elements.length == 0) {    return "";  }  List<Number> list=new ArrayList<Number>(elements.length);  for (  Float elem : elements) {    list.add(elem);  }  return join(separator,list);}  }
class C{  @Override @SuppressWarnings("deprecation") public void clear() throws Exception {  super.clear();  m_CustomMethods.register(this,DefaultListModel.class,"DefaultListModel");  m_CustomMethods.register(this,HashMap.class,"Map");  m_CustomMethods.register(this,HashSet.class,"Collection");  m_CustomMethods.register(this,Hashtable.class,"Map");  m_CustomMethods.register(this,LinkedList.class,"Collection");  m_CustomMethods.register(this,Properties.class,"Map");  m_CustomMethods.register(this,Stack.class,"Collection");  m_CustomMethods.register(this,TreeMap.class,"Map");  m_CustomMethods.register(this,TreeSet.class,"Collection");  m_CustomMethods.register(this,Vector.class,"Collection");  m_CustomMethods.register(this,weka.core.matrix.Matrix.class,"Matrix");  m_CustomMethods.register(this,weka.core.Matrix.class,"MatrixOld");  m_CustomMethods.register(this,weka.classifiers.CostMatrix.class,"CostMatrixOld");}  }
class C{  public void fixFosterElements(Document document){  findFosterNodes(document);  fixElements();  fixText();}  }
class C{  public InsertContact emailType(int emailType){  mIntent.putExtra(Insert.EMAIL_TYPE,emailType);  return this;}  }
class C{  public Clipboard(String name){  this.name=name;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static byte[] decrypt(CipherTextIvMac civ,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(civ.getIv(),civ.getCipherText());  byte[] computedMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  if (constantTimeEq(computedMac,civ.getMac())) {    Cipher aesCipherForDecryption=Cipher.getInstance(CIPHER_TRANSFORMATION);    aesCipherForDecryption.init(Cipher.DECRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(civ.getIv()));    return aesCipherForDecryption.doFinal(civ.getCipherText());  } else {    throw new GeneralSecurityException("MAC stored in civ does not match computed MAC.");  }}  }
class C{  @Retained TxEntryEventImpl(LocalRegion r,Object key){  super(r,getNearSideOperation(),key,getNearSidePendingValue(),TXEntryState.this.getCallbackArgument(),false,r.getMyId(),true,true);}  }
class C{  public MethodInvokingStateMachineRuntimeProcessor(Object targetObject,Method method){  delegate=new StateMachineMethodInvokerHelper<T,S,E>(targetObject,method);}  }
class C{  @Override public void onPause(){  super.onPause();  this.isPaused=true;  this.reset();}  }
class C{  public void removeTableModelListener(TableModelListener l){  listener.remove(l);}  }
class C{  private void insertContained(Node tree,Interval itemInterval,Object item){  Assert.isTrue(tree.getInterval().contains(itemInterval));  boolean isZeroArea=IntervalSize.isZeroWidth(itemInterval.getMin(),itemInterval.getMax());  NodeBase node;  if (isZeroArea)   node=tree.find(itemInterval); else   node=tree.getNode(itemInterval);  node.add(item);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ABSTRACT_CATCH_BLOCK;}  }
class C{  protected long uptime(){  final long t=serviceStartTime.get();  if (t == 0) {    throw new IllegalStateException("Not running.");  }  return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - t);}  }
class C{  public ExpressionParser(){  this.restrictionParameters=Collections.emptySet();  this.parameters=new LinkedHashSet<>();}  }
class C{  public SectionExtractor(){  SimpleWikiConfiguration config=null;  try {    config=new SimpleWikiConfiguration(WikiConstants.SWEBLE_CONFIG);  } catch (  IOException e) {    e.printStackTrace();  }catch (  JAXBException e) {    e.printStackTrace();  }  this.config=config;}  }
class C{  public boolean isModifiedNow(){  _checkExpiresTime=0;  return isModified(false);}  }
class C{  private void addAdvice(RequestSecurityTokenType request){  if (!spec.getAdvice().isEmpty()) {    com.rsa.names._2009._12.std_ext.ws_trust1_4.advice.ObjectFactory adviceFactory=new com.rsa.names._2009._12.std_ext.ws_trust1_4.advice.ObjectFactory();    AdviceSetType adviceSet=adviceFactory.createAdviceSetType();    for (    Advice advice : spec.getAdvice()) {      AdviceType wsAdvice=adviceFactory.createAdviceType();      wsAdvice.setAdviceSource(advice.getSource());      List<AttributeType> attributeList=wsAdvice.getAttribute();      for (      AdviceAttribute attribute : advice.getAttributes()) {        AttributeType attr=adviceFactory.createAttributeType();        attr.setName(attribute.getName());        for (        String attributeValue : attribute.getValue()) {          attr.getAttributeValue().add(attributeValue);        }        attributeList.add(attr);      }      adviceSet.getAdvice().add(wsAdvice);    }    request.setAdviceSet(adviceSet);  }}  }
class C{  public Slf4jLogger(Logger impl){  assert impl != null;  this.impl=impl;}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer) throws CMSException {  return this.generate(new CMSProcessableByteArray(null,signer.getSignature()),false).getSignerInfos();}  }
class C{  public void requestUpdateFromLayout(){  XNetMessage msg=XNetMessage.getFeedbackRequestMsg(mNumber,((mNumber - 1) % 4) < 2);synchronized (this) {    internalState=STATUSREQUESTSENT;  }  tc.sendXNetMessage(msg,null);}  }
class C{  @Override public double[] projectDataToScaledSpace(double[] data){  final int dim=data.length;  double[] dst=new double[dim];  for (int d=0; d < dim; d++) {    dst[d]=scales[d].getScaled(data[d]);  }  return dst;}  }
class C{  public static <A>EvalTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public float[] generateTransformedValuesScatter(List<? extends Entry> entries,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public WriteGraph find(Object map){  WriteGraph write=fetch(map);  if (write == null) {    write=new WriteGraph(contract);    cache(map,write);  }  return write;}  }
class C{  public static String addAndDeHump(String input){  StringBuilder sb=new StringBuilder();  for (int i=0; i < input.length(); i++) {    if ((i != 0) && Character.isUpperCase(input.charAt(i))) {      sb.append('-');    }    sb.append(input.charAt(i));  }  return sb.toString().trim().toLowerCase(Locale.ENGLISH);}  }
class C{  @Override @Unpreemptible("Unwind stack possibly from unpreemptible code") public void unwindStackFrame(CompiledMethod compiledMethod,AbstractRegisters registers){  NormalMethod method=(NormalMethod)compiledMethod.getMethod();  Address fp=registers.getInnermostFramePointer();  if (method.isSynchronized()) {    Address ip=registers.getInnermostInstructionAddress();    Offset instr=compiledMethod.getInstructionOffset(ip);    Offset lockOffset=((BaselineCompiledMethod)compiledMethod).getLockAcquisitionOffset();    if (instr.sGT(lockOffset)) {      Object lock;      if (method.isStatic()) {        lock=method.getDeclaringClass().getResolvedClassForType();      } else {        lock=Magic.addressAsObject(fp.plus(BaselineCompilerImpl.locationToOffset(((BaselineCompiledMethod)compiledMethod).getGeneralLocalLocation(0)) - BYTES_IN_ADDRESS).loadAddress());      }      if (ObjectModel.holdsLock(lock,RVMThread.getCurrentThread())) {        ObjectModel.genericUnlock(lock);      }    }  }  if (VM.VerifyAssertions)   VM._assert(SAVED_GPRS == 2);  registers.getGPRs().set(EDI.value(),fp.plus(EDI_SAVE_OFFSET).loadWord());  registers.getGPRs().set(EBX.value(),fp.plus(EBX_SAVE_OFFSET).loadWord());  if (method.hasBaselineSaveLSRegistersAnnotation()) {    registers.getGPRs().set(EBP.value(),fp.plus(EBP_SAVE_OFFSET).toWord());  }  registers.unwindStackFrame();}  }
class C{  public String addExtension(MessageExtension extension,String preferredAlias) throws MessageException {  String typeUri=extension.getTypeUri();  if (hasExtension(typeUri))   throw new MessageException("Extension already present: " + typeUri);  String alias=preferredAlias != null && !_extAliases.containsValue(preferredAlias) ? preferredAlias : "ext" + Integer.toString(++_extCounter);  if (!hasParameter("openid.ns") && preferredAlias != null && !alias.equals(preferredAlias))   throw new MessageException("Cannot add (pseudo) extension to v1 message for alias: " + preferredAlias);  if (SRegMessage.OPENID_NS_SREG.equals(typeUri))   alias="sreg";  _extAliases.put(typeUri,alias);  if (DEBUG)   _log.debug("Adding extension; type URI: " + typeUri + " alias: "+ alias);  set("openid.ns." + alias,typeUri);  Iterator iter=extension.getParameters().getParameters().iterator();  while (iter.hasNext()) {    Parameter param=(Parameter)iter.next();    String paramName=param.getKey().length() > 0 ? "openid." + alias + "."+ param.getKey() : "openid." + alias;    set(paramName,param.getValue());  }  if (this instanceof AuthSuccess) {    if (extension.signRequired())     ((AuthSuccess)this).addSignExtension(typeUri);    if (((AuthSuccess)this).getSignExtensions().contains(typeUri))     ((AuthSuccess)this).buildSignedList();  }  return alias;}  }
class C{  @Override final public int compareTo(final Bucket o){  if (hashCode > o.hashCode)   return 1;  if (hashCode < o.hashCode)   return -1;  return 0;}  }
class C{  public void saveToGeode(String regionPath,GeodeConnectionConf connConf){  dsf.saveToGeode(regionPath,connConf,emptyStrStrMap());}  }
class C{  public static Sphere createBoundingSphere(Vec4 points[]){  if (points == null) {    String message=Logging.getMessage("nullValue.PointsArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (points.length < 1) {    String message=Logging.getMessage("Geom.Sphere.NoPointsSpecified");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4[] extrema=Vec4.computeExtrema(points);  Vec4 center=new Vec4((extrema[0].x + extrema[1].x) / 2.0,(extrema[0].y + extrema[1].y) / 2.0,(extrema[0].z + extrema[1].z) / 2.0);  double radius=extrema[0].distanceTo3(extrema[1]) / 2.0;  return new Sphere(center,radius);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static BitmapRegionDecoderCompat newInstance(byte[] data,int offset,int length,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(data,offset,length,isShareable) : BitmapRegionDecoderGinger.newInstance(data,offset,length,isShareable));}  }
class C{  void freeInterval(SpillLocationInterval i){  freeIntervals.add(i);}  }
class C{  public boolean hasFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag.getQuick(j) == 0)     return false;  }  return true;}  }
class C{  public void resetLabel(){  updateLabel(originalText,originalIsOpaque,originalFGColor,originalBGColor);}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  if (delegate == null) {    byte[] data=p.getData();    p.setLength((data == null) ? 0 : (data.length - p.getOffset()));    super.receive(p);    if (StunDatagramPacketFilter.isStunPacket(p) || logNonStun(++nbReceivedPackets)) {      StunStack.logPacketToPcap(p,false,getLocalAddress(),getLocalPort());    }  } else {    delegate.receive(p);  }}  }
class C{  public MySquidDatabase(Context context){  super();  this.context=context;}  }
class C{  public void write(URL url) throws IOException {  outList.add(url);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() / right.num());}  }
class C{  public Builder withResult(final Consumer<Object> withResult){  this.withResult=withResult;  return this;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public Statement regexp(CharSequence regexp){  statement.append(" REGEXP '").append(regexp).append('\'');  return this;}  }
class C{  private Transform matchType(Class type) throws Exception {  if (type.isArray()) {    return array.match(type);  }  if (type.isPrimitive()) {    return primitive.match(type);  }  return stock.match(type);}  }
class C{  public Splitter(){  this(false);}  }
class C{  public static void clear(final PooledLinkedList<?>... lists){  for (  final PooledLinkedList<?> list : lists) {    if (list != null) {      list.clear();    }  }}  }
class C{  public boolean rename(IFileManagerComposite composite){  return false;}  }
class C{  public Vector2i mul(int x,int y,Vector2i dest){  dest.x=this.x * x;  dest.y=this.y * y;  return dest;}  }
class C{  public int append(VecBuffer buffer){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int minVecCount=buffer.getSize() + this.vecCount;  if (minVecCount > this.buffer.getSize())   this.expandBufferCapacity(minVecCount);  int newBufferPos=this.vecCount;  this.buffer.putSubBuffer(newBufferPos,buffer);  this.vecCount+=buffer.getSize();  return this.addSubBuffer(newBufferPos,buffer.getSize());}  }
class C{  public final Node peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  public void addMetadata(Collection<String> metadata){  this.metadata.addAll(metadata);}  }
class C{  @Override public int compareTo(Correction other){  return compareTo(other.score,other.candidates);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static JSONArray array(Long... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  long value : values) {    array.add(value);  }  return array;}  }
class C{  public static int codePointBefore(CharSequence seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 1 || index > len) {    throw new IndexOutOfBoundsException();  }  char low=seq.charAt(--index);  if (--index < 0) {    return low;  }  char high=seq.charAt(index);  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  public _QueryOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  @Override public void close(){  service.close();}  }
class C{  public void testRemoveElement(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=1; i < SIZE; i+=2) {    assertTrue(q.contains(i));    assertTrue(q.remove(i));    assertFalse(q.contains(i));    assertTrue(q.contains(i - 1));  }  for (int i=0; i < SIZE; i+=2) {    assertTrue(q.contains(i));    assertTrue(q.remove(i));    assertFalse(q.contains(i));    assertFalse(q.remove(i + 1));    assertFalse(q.contains(i + 1));  }  assertTrue(q.isEmpty());}  }
class C{  public void startListening(){  int[] updatedIds;  ArrayList<RemoteViews> updatedViews=new ArrayList<RemoteViews>();  final int userId=mContext.getUserId();  try {    if (mPackageName == null) {      mPackageName=mContext.getPackageName();    }    updatedIds=sService.startListening(mCallbacks,mPackageName,mHostId,updatedViews,userId);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }  final int N=updatedIds.length;  for (int i=0; i < N; i++) {    if (updatedViews.get(i) != null) {      updatedViews.get(i).setUser(new UserHandle(userId));    }    updateAppWidgetView(updatedIds[i],updatedViews.get(i),userId);  }}  }
class C{  public static void createAndPopulatePcj(final RepositoryConnection ryaConn,final Connector accumuloConn,final String pcjTableName,final String sparql,final String[] resultVariables,final Optional<PcjVarOrderFactory> pcjVarOrderFactory) throws PcjException {  checkNotNull(ryaConn);  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(sparql);  checkNotNull(resultVariables);  checkNotNull(pcjVarOrderFactory);  final PcjTables pcj=new PcjTables();  final PcjVarOrderFactory varOrderFactory=pcjVarOrderFactory.or(new ShiftVarOrderFactory());  final Set<VariableOrder> varOrders=varOrderFactory.makeVarOrders(new VariableOrder(resultVariables));  pcj.createPcjTable(accumuloConn,pcjTableName,varOrders,sparql);  populatePcj(accumuloConn,pcjTableName,ryaConn);}  }
class C{  public FacebookOperationCanceledException(){  super();}  }
class C{  public static long toUint32(Session session,Value v){  v=safeValue(v,Isolate.DEFAULT_ID);  long n=toInt32(session,v);  if (n < 0)   n=n + (long)0x10000 * (long)0x10000;  return n;}  }
class C{  public static void selectInList(String listName,int offset){  selectListOffset(findByName(listName),offset);}  }
class C{  private static void addIndent(IDocument document,int line,CharSequence indent,boolean[] commentlines,int relative) throws BadLocationException {  IRegion region=document.getLineInformation(line);  int insert=region.getOffset();  int endOffset=region.getOffset() + region.getLength();  if (!commentlines[relative]) {    while (insert < endOffset - 2 && document.get(insert,2).equals(SLASHES))     insert+=2;  }  document.replace(insert,0,indent.toString());}  }
class C{  public SimpleResolver() throws UnknownHostException {  this(null);}  }
class C{  public static boolean isWhitespace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isWhitespace(str.charAt(i)) == false)) {      return false;    }  }  return true;}  }
class C{  public void propertyChanged(String name,String value,String prio) throws DOMException {  boolean important=prio != null && prio.length() > 0;  cssEngine.setMainProperties(SVGStylableElement.this,this,name,value,important);  mutate=true;  setAttributeNS(null,SVG_STYLE_ATTRIBUTE,declaration.toString(cssEngine));  mutate=false;}  }
class C{  public SVGFeFuncAElementBridge(){}  }
class C{  public boolean match(Block node,Object other){  if (!(other instanceof Block)) {    return false;  }  Block o=(Block)other;  return safeSubtreeListMatch(node.statements(),o.statements());}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder("VALUE GRAPH: \n");  for (Enumeration<GraphNode> n=graph.enumerateNodes(); n.hasMoreElements(); ) {    ValueGraphVertex node=(ValueGraphVertex)n.nextElement();    s.append(node).append("\n");  }  return s.toString();}  }
class C{  private static boolean equals(DirectColorModel d1,DirectColorModel d2){  if (d1.getAlphaMask() != d2.getAlphaMask())   return false;  if (d1.getGreenMask() != d2.getGreenMask())   return false;  if (d1.getRedMask() != d2.getRedMask())   return false;  if (d1.getBlueMask() != d2.getBlueMask())   return false;  if (d1.getColorSpace() != d2.getColorSpace())   return false;  if (d1.isAlphaPremultiplied() != d2.isAlphaPremultiplied())   return false;  if (d1.getTransferType() != d2.getTransferType())   return false;  if (d1.getTransparency() != d2.getTransparency())   return false;  return true;}  }
class C{  public void testGetF27Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF27Momentary();  assertEquals(expResult,result);}  }
class C{  void start(ExoPlayer player,Handler mainHandler){  rootNode.schedule(player,mainHandler);}  }
class C{  protected void deflate() throws IOException {  int byteCount;  while ((byteCount=def.deflate(buf)) != 0) {    out.write(buf,0,byteCount);  }}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public void updateAsset(MAsset asset){  asset.setM_Product_ID(getM_Product_ID());  asset.setM_AttributeSetInstance_ID(getM_AttributeSetInstance_ID());}  }
class C{  public XMLException(String msg){  this(null,-1,null,msg,false);}  }
class C{  public void SystemChecks(JSONBuilder json){  json.addObject("system");  SystemCommandController commands=new SystemCommandController();  json.addElement("os",this.summary.getOperatingSystem());  json.addElement("iscloudjss",this.isCloudJSS);  json.addElement("javaversion",this.summary.getJavaVersion());  json.addElement("javavendor",this.summary.getJavaVendor());  json.addElement("webapp_dir",this.summary.getWebAppDir());  json.addElement("clustering",this.summary.getIsClustered());  json.addElement("mysql_version",this.summary.getMySQLVersion().trim());  ArrayList<String[]> large_tables=this.summary.getLargeMySQLTables();  json.addArrayObject("largeSQLtables");  for (int i=0; i < large_tables.size(); i++) {    String[] table=large_tables.get(i);    json.openArrayObject();    json.addElement("table_name",table[0]);    json.addFinalElement("table_size",table[1] + " MB");    json.closeObject();  }  if (large_tables.size() > 0) {    json.removeComma();  }  json.closeArrayObject();  json.addElement("database_size",Double.toString(this.summary.getDatabaseSize()));  json.addElement("proc_cores",Integer.toString(commands.getProcCores()));  json.addElement("free_memory",Long.toString(commands.getFreeMem()));  json.addElement("max_memory",Long.toString(commands.getMaxMemory()));  json.addElement("memory_currently_in_use",Long.toString(commands.getMemoryInUse()));  json.addElement("total_space",Long.toString(commands.getSpaceDetails()[0]));  json.addElement("free_space",Long.toString(commands.getSpaceDetails()[1]));  json.addElement("usable_space",Long.toString(commands.getSpaceDetails()[2]));  json.removeComma();  json.closeObject();}  }
class C{  public void ensureFileIsVisible(JFileChooser a,File b){  for (int i=0; i < uis.size(); i++) {    ((FileChooserUI)(uis.elementAt(i))).ensureFileIsVisible(a,b);  }}  }
class C{  protected void drawPie(Graphics2D g2,Rectangle2D plotArea,PlotRenderingInfo info){  PiePlotState state=initialise(g2,plotArea,this,null,info);  double labelReserve=0.0;  if (this.labelGenerator != null && !this.simpleLabels) {    labelReserve=this.labelGap + this.maximumLabelWidth;  }  double gapHorizontal=plotArea.getWidth() * labelReserve * 2.0;  double gapVertical=plotArea.getHeight() * this.interiorGap * 2.0;  if (DEBUG_DRAW_INTERIOR) {    double hGap=plotArea.getWidth() * this.interiorGap;    double vGap=plotArea.getHeight() * this.interiorGap;    double igx1=plotArea.getX() + hGap;    double igx2=plotArea.getMaxX() - hGap;    double igy1=plotArea.getY() + vGap;    double igy2=plotArea.getMaxY() - vGap;    g2.setPaint(Color.gray);    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));  }  double linkX=plotArea.getX() + gapHorizontal / 2;  double linkY=plotArea.getY() + gapVertical / 2;  double linkW=plotArea.getWidth() - gapHorizontal;  double linkH=plotArea.getHeight() - gapVertical;  if (this.circular) {    double min=Math.min(linkW,linkH) / 2;    linkX=(linkX + linkX + linkW) / 2 - min;    linkY=(linkY + linkY + linkH) / 2 - min;    linkW=2 * min;    linkH=2 * min;  }  Rectangle2D linkArea=new Rectangle2D.Double(linkX,linkY,linkW,linkH);  state.setLinkArea(linkArea);  if (DEBUG_DRAW_LINK_AREA) {    g2.setPaint(Color.blue);    g2.draw(linkArea);    g2.setPaint(Color.yellow);    g2.draw(new Ellipse2D.Double(linkArea.getX(),linkArea.getY(),linkArea.getWidth(),linkArea.getHeight()));  }  double lm=0.0;  if (!this.simpleLabels) {    lm=this.labelLinkMargin;  }  double hh=linkArea.getWidth() * lm * 2.0;  double vv=linkArea.getHeight() * lm * 2.0;  Rectangle2D explodeArea=new Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);  state.setExplodedPieArea(explodeArea);  double maximumExplodePercent=getMaximumExplodePercent();  double percent=maximumExplodePercent / (1.0 + maximumExplodePercent);  double h1=explodeArea.getWidth() * percent;  double v1=explodeArea.getHeight() * percent;  Rectangle2D pieArea=new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);  if (DEBUG_DRAW_PIE_AREA) {    g2.setPaint(Color.green);    g2.draw(pieArea);  }  state.setPieArea(pieArea);  state.setPieCenterX(pieArea.getCenterX());  state.setPieCenterY(pieArea.getCenterY());  state.setPieWRadius(pieArea.getWidth() / 2.0);  state.setPieHRadius(pieArea.getHeight() / 2.0);  if ((this.dataset != null) && (this.dataset.getKeys().size() > 0)) {    List keys=this.dataset.getKeys();    double totalValue=DatasetUtilities.calculatePieDatasetTotal(this.dataset);    int passesRequired=state.getPassesRequired();    for (int pass=0; pass < passesRequired; pass++) {      double runningTotal=0.0;      for (int section=0; section < keys.size(); section++) {        Number n=this.dataset.getValue(section);        if (n != null) {          double value=n.doubleValue();          if (value > 0.0) {            runningTotal+=value;            drawItem(g2,section,explodeArea,state,pass);          }        }      }    }    if (this.simpleLabels) {      drawSimpleLabels(g2,keys,totalValue,plotArea,linkArea,state);    } else {      drawLabels(g2,keys,totalValue,plotArea,linkArea,state);    }  } else {    drawNoDataMessage(g2,plotArea);  }}  }
class C{  @Nullable private Collection<Field> fieldsFromCache(Class<?> cls,Class<? extends Annotation> annCls){  assert cls != null;  assert annCls != null;  Map<Class<? extends Annotation>,Collection<Field>> annCache=fieldCache.get(cls);  return annCache != null ? annCache.get(annCls) : null;}  }
class C{  static public byte processLiteralTag(boolean hasAttributes,boolean hasContent){  if (hasAttributes && hasContent) {    return WbXmlLiterals.LITERAL_AC;  } else   if (hasContent) {    return WbXmlLiterals.LITERAL_C;  } else   if (hasAttributes) {    return WbXmlLiterals.LITERAL_A;  } else {    return WbXmlLiterals.LITERAL;  }}  }
class C{  public LBFGS(int m,int maxIterations,LineSearch lineSearch){  setM(m);  setMaximumIterations(maxIterations);  setLineSearch(lineSearch);}  }
class C{  public IpV4(){  super(IPV4_REGEX,false,1.0f);}  }
class C{  public DiscardOldestPolicy(){}  }
class C{  public static float fastSin(float currentPhase){  float yp=(currentPhase > 0.5f) ? 1.0f - currentPhase : ((currentPhase < (-0.5f)) ? (-1.0f) - currentPhase : currentPhase);  float x=(float)(yp * Math.PI);  float x2=(x * x);  return x * (x2 * (x2 * (x2 * (x2 * ((x2 * (-IF11)) + IF9) - IF7) + IF5) - IF3) + 1);}  }
class C{  private void init(){  addProducerType(new AttributeType(this,"TokenVectors",double[].class,true));  addProducerType(new AttributeType(this,"TokenScalars",double.class,true));  addProducerType(new AttributeType(this,"Letters",double.class,false));}  }
class C{  @SideEffectFree protected Error(@Nullable String message,@Nullable Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  private static int intGCD(int a,int b){  while (b > 0) {    int temp=b;    b=a % b;    a=temp;  }  return a;}  }
class C{  NameFilePair(final File names,final File pointers,final long limit) throws IOException {  mNameData=new BufferedOutputStreamFix(new FileOutputStream(names),FileUtils.BUFFERED_STREAM_SIZE);  mPointers=new DataOutputStream(new BufferedOutputStreamFix(new FileOutputStream(pointers),FileUtils.BUFFERED_STREAM_SIZE));  mLimit=limit;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE",justification="Return value for file delete is not important here.") private void initLogWriter() throws org.apache.geode.admin.AdminException {  final LogConfig logConfig=this.agentConfig.createLogConfig();  this.logWriterAppender=LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.MAIN,false,logConfig,false);  InternalLogWriter existingLogWriter=this.agentConfig.getInternalLogWriter();  if (existingLogWriter != null) {    this.logWriter=existingLogWriter;  } else {    this.logWriter=LogWriterFactory.createLogWriterLogger(false,false,logConfig,false);    this.logWriter.info(Banner.getString(null));    this.agentConfig.setInternalLogWriter(this.logWriter);  }  this.logWriter=LogWriterFactory.createLogWriterLogger(false,false,logConfig,false);  this.agentConfig.setInternalLogWriter(this.logWriter);  logger.info(Banner.getString(this.agentConfig.getOriginalArgs()));  logger.info(LogMarker.CONFIG,LocalizedStrings.AgentImpl_AGENT_CONFIG_PROPERTY_FILE_NAME_0.toLocalizedString(AgentConfigImpl.retrievePropertyFile()));  logger.info(LogMarker.CONFIG,this.agentConfig.getPropertyFileDescription());  logger.info(LogMarker.CONFIG,this.agentConfig.toPropertiesAsString());}  }
class C{  public boolean createCluster(final String xivSystem,final String clusterName) throws Exception {  boolean isAvailable=findAvailability(MessageFormat.format(CLUSTER_INSTANCE_URL,xivSystem,clusterName));  if (isAvailable) {    _log.info("Cluster {} already exist on XIV {}. Skipping creation!",clusterName,xivSystem);  } else {    final String body=MessageFormat.format(CLUSTER_CREATE_BODY,clusterName);    ResponseValidator failureStatus=executePOSTRequest(xivSystem,MessageFormat.format(CLUSTER_URL,xivSystem),body);    if (failureStatus.isFailed()) {      throw XIVRestException.exceptions.clusterCreationFailure(xivSystem,clusterName,failureStatus.toString());    }  }  return isAvailable;}  }
class C{  public Iterable deleteAllInBatch(){  log.info("Attempting to delete all the entities in the data store in a batch");  return deleteByKeysInBatch(getDataStore().keys());}  }
class C{  public final void calcScore(){  m_score=SCORE_OTHER;  if (null == m_targetString)   calcTargetString();}  }
class C{  public static boolean isMainThread(){  return sIsMainThread.get();}  }
class C{  private IIndex findCorrespondingIndex(Table table,IIndex index){  for (int indexIdx=0; indexIdx < table.getIndexCount(); indexIdx++) {    IIndex curIndex=table.getIndex(indexIdx);    if ((caseSensitive && index.equals(curIndex)) || (!caseSensitive && index.equalsIgnoreCase(curIndex))) {      return curIndex;    }  }  return null;}  }
class C{  public ValueModelUserEmail(String name,ArrayListUserEmail defaultValue){  super(name,defaultValue);}  }
class C{  public DTMNamedNodeMap(DTM dtm,int element){  this.dtm=dtm;  this.element=element;}  }
class C{  public final boolean isForbidden(String var1,String var2){  for (  OrderedPair<Set<MyNode>> rule : forbiddenRulesSpecs) {    if (rule.getFirst().contains(getVar(var1))) {      if (rule.getSecond().contains(getVar(var2))) {        if (!var1.equals(var2)) {          return true;        }      }    }  }  if (isForbiddenByTiers(var1,var2))   return false;  return false;}  }
class C{  public static Image createImage(String path) throws IOException {  try {    return new Image(Display.impl.createImage(path));  } catch (  OutOfMemoryError err) {    System.gc();    System.gc();    return new Image(Display.impl.createImage(path));  }}  }
class C{  public Created(Date date){  super(date);}  }
class C{  @Override public void run(int connId,String[] args){  String path="exportlist.txt";  try {    if (args.length > 1) {      path=args[1];    }  } catch (  Exception ex) {    server.sendServerChat(connId,"/exportlist: error parsing command");    return;  }  exportList(connId,path);}  }
class C{  public void testInitString(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals("",instance.initString());}  }
class C{  public String hiddenToEncodedString(){  StringBuilder buf=new StringBuilder();  for (Iterator<String> i=hiddenBugCategorySet.iterator(); i.hasNext(); ) {    buf.append(i.next());    if (i.hasNext()) {      buf.append(LISTITEM_DELIMITER);    }  }  buf.append(FIELD_DELIMITER);  return buf.toString();}  }
class C{  static String checkElement(Element el,String name,String suffix){  for (  Object obj : el.getChildren(name)) {    Element e=(Element)obj;    Attribute a=e.getAttribute("lang",Namespace.XML_NAMESPACE);    if (a != null) {      if (a.getValue().equals(suffix)) {        return e.getText();      }    }  }  return null;}  }
class C{  public static URI create(String path){  return create(path,null);}  }
class C{  public HttpInputStream(InputStream in) throws IOException {  super(in);  if (in.markSupported())   in.mark(0);  DataInputStream dis=new DataInputStream(in);  String key="Content-length:".toLowerCase();  boolean contentLengthFound=false;  String line;  do {    line=dis.readLine();    if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) {      RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"received header line: \"" + line + "\"");    }    if (line == null)     throw new EOFException();    if (line.toLowerCase().startsWith(key)) {      if (contentLengthFound) {        throw new IOException("Multiple Content-length entries found.");      } else {        bytesLeft=Integer.parseInt(line.substring(key.length()).trim());        contentLengthFound=true;      }    }  } while ((line.length() != 0) && (line.charAt(0) != '\r') && (line.charAt(0) != '\n'));  if (!contentLengthFound || bytesLeft < 0) {    bytesLeft=Integer.MAX_VALUE;  }  bytesLeftAtMark=bytesLeft;  if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) {    RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"content length: " + bytesLeft);  }}  }
class C{  public Iterator<? extends ITPS> rangeIterator(final Schema schema,final Object fromKey,final Object toKey){  return rangeIterator(schema,fromKey,toKey,0,MIN_TIMESTAMP,CURRENT_ROW,null);}  }
class C{  public FSColor asColor(){  return _color;}  }
class C{  public static void printList(Object[] list){  for (int i=0; i < list.length; i++)   System.out.print(list[i] + " ");  System.out.println();}  }
class C{  public void transitionTo(Thread.State tstate) throws InterruptedException {switch (tstate) {case RUNNABLE:    nextState(S_RUNNABLE);  break;case BLOCKED:nextState(S_BLOCKED);break;case WAITING:nextState(S_WAITING);break;case TIMED_WAITING:nextState(S_TIMED_WAITING);break;case TERMINATED:nextState(S_TERMINATE);break;default :break;}}  }
class C{  public void addRecurring(DateTimeZoneBuilder builder,String nameKey,int saveMillis,int fromYear,int toYear){  builder.addRecurringSavings(nameKey,saveMillis,fromYear,toYear,iZoneChar,iMonthOfYear,iDayOfMonth,iDayOfWeek,iAdvanceDayOfWeek,iMillisOfDay);}  }
class C{  static UnionImpl initNewHeapInstance(int lgNomLongs,long seed,float p,ResizeFactor rf){  UpdateSketch gadget=HeapQuickSelectSketch.getInstance(lgNomLongs,seed,p,rf,true);  UnionImpl unionImpl=new UnionImpl(gadget,seed);  unionImpl.unionMem_=null;  return unionImpl;}  }
class C{  public Image createRotatedImage(Image pImage,Component pComponent,int pRotation){  if (log.isDebugEnabled()) {    log.debug("createRotatedImage: pRotation= " + pRotation + ", mRotation= "+ mRotation);  }  if (pRotation == 0) {    return pImage;  }  MediaTracker mt=new MediaTracker(pComponent);  mt.addImage(pImage,0);  try {    mt.waitForAll();  } catch (  InterruptedException ie) {    Thread.currentThread().interrupt();  }  int w=pImage.getWidth(null);  int h=pImage.getHeight(null);  int[] pixels=new int[w * h];  PixelGrabber pg=new PixelGrabber(pImage,0,0,w,h,pixels,0,w);  try {    pg.grabPixels();  } catch (  InterruptedException ie) {  }  int[] newPixels=new int[w * h];  MemoryImageSource imageSource=null;switch (pRotation) {case 1:    for (int y=0; y < h; ++y) {      for (int x=0; x < w; ++x) {        newPixels[x * h + y]=pixels[y * w + (w - 1 - x)];      }    }  imageSource=new MemoryImageSource(h,w,ColorModel.getRGBdefault(),newPixels,0,h);break;case 2:for (int y=0; y < h; ++y) {for (int x=0; x < w; ++x) {  newPixels[x * h + y]=pixels[(w - 1 - x) * h + (h - 1 - y)];}}imageSource=new MemoryImageSource(w,h,ColorModel.getRGBdefault(),newPixels,0,w);break;case 3:for (int y=0; y < h; ++y) {for (int x=0; x < w; ++x) {newPixels[x * h + y]=pixels[(h - 1 - y) * w + x];}}imageSource=new MemoryImageSource(h,w,ColorModel.getRGBdefault(),newPixels,0,h);break;}Image myImage=pComponent.createImage(imageSource);mt.addImage(myImage,1);try {mt.waitForAll();} catch (InterruptedException ie) {}return myImage;}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  void info(Throwable t,String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,s,t);  }}  }
class C{  public boolean isExplicitCostAdjustment(){  Object oo=get_Value(COLUMNNAME_IsExplicitCostAdjustment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public TungstenProperties createRuntimeWithStore(int nfrags) throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","extract, apply","queue");  builder.addStage("extract","dummy","q-apply",null);  builder.addStage("apply","q-extract","dummy",null);  builder.addComponent("extractor","dummy",DummyExtractor.class);  builder.addProperty("extractor","dummy","nFrags",new Integer(nfrags).toString());  builder.addComponent("applier","q-apply",InMemoryQueueAdapter.class);  builder.addProperty("applier","q-apply","storeName","queue");  builder.addComponent("extractor","q-extract",InMemoryQueueAdapter.class);  builder.addProperty("extractor","q-extract","storeName","queue");  builder.addComponent("applier","dummy",DummyApplier.class);  builder.addComponent("store","queue",InMemoryQueueStore.class);  builder.addProperty("store","queue","maxSize","10");  return builder.getConfig();}  }
class C{  public void assemble(Model model,Order order) throws Exception {  assembleElements(model,order);  assembleAttributes(model,order);}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  public void addAssignmentForDuplicate(Column column,Expression expression){  if (duplicateKeyAssignmentMap == null) {    duplicateKeyAssignmentMap=New.hashMap();  }  if (duplicateKeyAssignmentMap.containsKey(column)) {    throw DbException.get(ErrorCode.DUPLICATE_COLUMN_NAME_1,column.getName());  }  duplicateKeyAssignmentMap.put(column,expression);}  }
class C{  public DataSource createDataSource(String configName,DataObject[] objs){  CustomConfigType item=configTypeProvider.getCustomConfigType(configName);  Map<Class<? extends DataObject>,DataObject> objectsMap=toMap(objs);  DataSource dataSource=new DataSource();  DataObject object=null;  Object val=null;  for (  DataSourceVariable prop : item.getDataSourceVariables().keySet()) {    object=objectsMap.get(prop.getSourceClass());    if (object != null) {      val=DataObjectUtils.getPropertyValue(object.getClass(),object,prop.getPropertyName());      dataSource.addProperty(prop.getDisplayName(),val == null ? "" : val.toString());    }  }  return dataSource;}  }
class C{  public boolean isChromeGoogleSigned(Context context){  return isGoogleSigned(context.getApplicationContext().getPackageManager(),context.getPackageName());}  }
class C{  protected void onUserMode(String targetNick,String sourceNick,String sourceLogin,String sourceHostname,String mode){}  }
class C{  static RepaintManager currentManager(AppContext appContext){  RepaintManager rm=(RepaintManager)appContext.get(repaintManagerKey);  if (rm == null) {    rm=new RepaintManager(BUFFER_STRATEGY_TYPE);    appContext.put(repaintManagerKey,rm);  }  return rm;}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View)&& PROXY_PROPERTIES.containsKey(mPropertyName)) {      setProperty(PROXY_PROPERTIES.get(mPropertyName));    }    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  public QueryService addPrefixes(HashMap<String,String> prefixes){  queryServiceDTO.getPrefixes().putAll(prefixes);  return this;}  }
class C{  public ImageTile(double ullat,double ullon,double lrlat,double lrlon,BufferedImage image){  super(ullat,ullon,lrlat,lrlon,image);}  }
class C{  public boolean isSegmentBalanced(){  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;  }  return true;}  }
class C{  private static Map configureLogHandlers(List loggers,final String handlerClassList){  final String[] names=handlerClassList.split(" ");  final Map handlers=new HashMap(names.length);  for (int i=0; i < names.length; i++) {    final String name=names[i];    try {      Class handlerClass=Class.forName(name);      Handler handler=(Handler)handlerClass.newInstance();      handlers.put(name,handler);      String hl=Configuration.valueFor("xr.util-logging." + name + ".level","INFO");      handler.setLevel(LoggerUtil.parseLogLevel(hl,Level.INFO));    } catch (    ClassNotFoundException e) {      throw new XRRuntimeException("Could not initialize logging properties; " + "Handler class not found: " + name);    }catch (    IllegalAccessException e) {      throw new XRRuntimeException("Could not initialize logging properties; " + "Can't instantiate Handler class (IllegalAccessException): " + name);    }catch (    InstantiationException e) {      throw new XRRuntimeException("Could not initialize logging properties; " + "Can't instantiate Handler class (InstantiationException): " + name);    }  }  for (Iterator iterator=loggers.iterator(); iterator.hasNext(); ) {    Logger logger=(Logger)iterator.next();    for (Iterator ith=handlers.values().iterator(); ith.hasNext(); ) {      Handler handler=(Handler)ith.next();      logger.addHandler(handler);    }  }  return handlers;}  }
class C{  public static int atoi(String str){  if (str == null || str.length() == 0)   return 0;  long longRes=0;  str=str.trim();  boolean neg=false;  if (str.charAt(0) == '-') {    neg=true;    str=str.substring(1,str.length());  } else   if (str.charAt(0) == '+') {    str=str.substring(1,str.length());  }  int i=0;  while (i < str.length()) {    char c=str.charAt(i);    if (c >= '0' && c <= '9') {      longRes=longRes * 10 + (c - '0');    } else     break;    i++;  }  longRes=neg ? longRes * (-1) : longRes;  if (longRes > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else   if (longRes < Integer.MIN_VALUE) {    return Integer.MIN_VALUE;  }  return (int)longRes;}  }
class C{  public void assureProxyOk(){  if (socket.isClosed()) {    restart();  }}  }
class C{  private void handleRightClick(final int clickCount,final NaviNode node){  if (clickCount == 1) {    MoveFunctions.centerNode(m_graph,node);  } else   if (clickCount == 2) {    ZoomFunctions.zoomToNode(m_graph,node);  }}  }
class C{  private boolean boundAlwaysSatisifed(final IValueExpressionNode vexp,final Set<IVariable<?>> definiteVars){  if (!(vexp instanceof FunctionNode)) {    return false;  }  final FunctionNode functionNode=(FunctionNode)vexp;  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.BOUND)) {    if (functionNode.arity() == 1) {      BOp varBop=functionNode.get(0);      if (varBop instanceof VarNode) {        VarNode varNode=(VarNode)varBop;        return definiteVars.contains(varNode.getValueExpression());      }    }  }  return false;}  }
class C{  private ArrayList<Positionable> makePathGroup(OPath path){  Portal fromPortal=path.getFromPortal();  Portal toPortal=path.getToPortal();  String name=path.getName();  java.util.List<Positionable> list=_parent.getCircuitGroup();  if (log.isDebugEnabled()) {    log.debug("makePathGroup for " + name + " CircuitGroup size= "+ list.size());  }  ArrayList<Positionable> pathGroup=new ArrayList<Positionable>();  for (int i=0; i < list.size(); i++) {    Positionable pos=list.get(i);    if (pos instanceof IndicatorTrack) {      ArrayList<String> paths=((IndicatorTrack)pos).getPaths();      if (paths != null) {        for (int j=0; j < paths.size(); j++) {          if (name.equals(paths.get(j))) {            ((IndicatorTrack)pos).setControlling(true);            pathGroup.add(pos);          }        }      }    } else {      PortalIcon icon=(PortalIcon)pos;      Portal portal=icon.getPortal();      if (portal.equals(fromPortal)) {        pathGroup.add(icon);      } else       if (portal.equals(toPortal)) {        pathGroup.add(icon);      }    }  }  return pathGroup;}  }
class C{  public boolean isReverse(){  return getStringCustomParameter(REVERSE) != null;}  }
class C{  public Class<? extends ContentFormatter> bindContentFormatter(){  return FixedContentFormatter.class;}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public Object remove(Object okey){  String key=(String)okey;  Object oldValue=context.getAttribute(key,ENGINE_SCOPE);  context.removeAttribute(key,ENGINE_SCOPE);  return oldValue;}  }
class C{  public Vector2f mult(float scalar){  return new Vector2f(x * scalar,y * scalar);}  }
class C{  private boolean isConstantZeroArgFunction(FunctionCall functionCall){  Function function=FunctionRegistry.getInstance().get(functionCall.getURI()).orElseThrow(null);  if (function instanceof Rand || function instanceof UUID || function instanceof STRUUID) {    return false;  }  return true;}  }
class C{  public static <T extends Comparable<?>>Range<T> closedOpen(T lowerEndpoint,T upperEndpoint){  return Range.range(lowerEndpoint,BoundType.CLOSED,upperEndpoint,BoundType.OPEN);}  }
class C{  private GPNode pickCompatibleNode(final GPNode original,final GPFunctionSet set,final EvolutionState state,final GPType returntype,final int thread){  int numValidNodes=0;  int type=returntype.type;  GPInitializer initializer=((GPInitializer)state.initializer);  int len=original.constraints(initializer).childtypes.length;  boolean failed;  if (initializer.numAtomicTypes + initializer.numSetTypes == 1)   numValidNodes=set.nodesByArity[type][len].length; else   for (int x=0; x < set.nodesByArity[type][len].length; x++) {    failed=false;    for (int y=0; y < set.nodesByArity[type][len][x].constraints(initializer).childtypes.length; y++)     if (!set.nodesByArity[type][len][x].constraints(initializer).childtypes[y].compatibleWith(initializer,original.children[y].constraints(initializer).returntype)) {      failed=true;      break;    }    if (!failed)     numValidNodes++;  }  int nodenum=state.random[thread].nextInt(numValidNodes);  int prosnode=0;  if (numValidNodes == set.nodesByArity[type][len].length)   return set.nodesByArity[type][len][nodenum]; else   for (int x=0; x < set.nodesByArity[type][len].length; x++) {    failed=false;    for (int y=0; y < set.nodesByArity[type][len][x].constraints(initializer).childtypes.length; y++)     if (!set.nodesByArity[type][len][x].constraints(initializer).childtypes[y].compatibleWith(initializer,original.children[y].constraints(initializer).returntype)) {      failed=true;      break;    }    if (!failed) {      if (prosnode == nodenum)       return set.nodesByArity[type][len][x];      prosnode++;    }  }  throw new InternalError();}  }
class C{  public static Address fromIntZeroExtend(int address){  return new Address(ArchitecturalWord.fromIntZeroExtend(address));}  }
class C{  public ContactPage(final PageParameters params){  super(params);  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));  add(new ContactForm("contactForm"));  add(new FeedbackPanel("feedback"));}  }
class C{  public static MockTwoAxisAccelerometer accelerometer2Axis(){  return new MockTwoAxisAccelerometer();}  }
class C{  public synchronized void add(String category,double minValue,double maxValue){  super.add(category,minValue);  mMaxValues.add(maxValue);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.619 -0400",hash_original_method="9550C69BAA91C5298BA75D226127D5FF",hash_generated_method="D1146B99C52208B28E4F9EC1242180A7") public int size(){  return mSize;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  final String inputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getSsfInputFileTemplate());  int count=0;  int waitTimeFactor=3;  Long proteinCount=stepInstance.getTopProtein() - stepInstance.getBottomProtein();  Long now=System.currentTimeMillis();  Set<RawProtein<Gene3dHmmer3RawMatch>> rawProteins=this.getRawMatchDAO().getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),getSignatureLibraryRelease());  if (rawProteins.size() > 0) {    for (    RawProtein<Gene3dHmmer3RawMatch> rawProtein : rawProteins) {      count+=rawProtein.getMatches().size();    }  }  Long timeTaken=System.currentTimeMillis() - now;  while (count == 0) {    int matchesFound=0;    int countForWaitTime=proteinCount.intValue() * 200;    waitTimeFactor=Utilities.getWaitTimeFactor(countForWaitTime).intValue();    Utilities.sleep(waitTimeFactor * 1000);    rawProteins=this.getRawMatchDAO().getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),getSignatureLibraryRelease());    if (rawProteins.size() > 0) {      for (      RawProtein<Gene3dHmmer3RawMatch> rawProtein : rawProteins) {        count+=rawProtein.getMatches().size();      }    }    Utilities.verboseLog("Raw matches not found (1st check): raw proteins: " + rawProteins.size() + " protein-range : "+ stepInstance.getBottomProtein()+ " - "+ stepInstance.getTopProtein()+ " signature : "+ getSignatureLibraryRelease()+ " matchesCount (2nd check): "+ count);    timeTaken=System.currentTimeMillis() - now;    long chunkSize=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    if (timeTaken > (waitTimeFactor * 10 * 1000)) {      if (chunkSize > 100 && !Utilities.isRunningInSingleSeqMode()) {        LOGGER.warn("Possible H2 database problem: failed to  get Gene3d matches for the domain finder raw proteins: " + rawProteins.size() + " protein-range : "+ stepInstance.getBottomProtein()+ " - "+ stepInstance.getTopProtein()+ " signature : "+ getSignatureLibraryRelease()+ " matchesCount: "+ count);      }      break;    }  }  Utilities.verboseLog("Raw proteins: " + rawProteins.size() + " matches: "+ count+ " timeTaken: "+ timeTaken);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("In execute() method of Gene3dHmmer3FilterStep.java (Gene3D Post Processing.)");    LOGGER.debug("DAO returned " + rawProteins.size() + " raw proteins to filter.");  }  this.getSsfFileWriter().writeSsfFile(rawProteins,inputFilePath);}  }
class C{  public Document exportSaml2Metadata(String tenantName) throws Exception {  this.tenantName=tenantName;  DocumentBuilder docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  doc=docBuilder.newDocument();  Element entityEle=doc.createElementNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.ENTDESCRIPTOR);  entityEle.setAttribute(SAMLNames.NS_NAME_SAML_SAML,SAMLNames.NS_VAL_SAML_SAML);  entityEle.setAttribute(SAMLNames.NS_NAME_SAML_VMWARE_ES,SAMLNames.NS_VAL_SAML_VMWARE_ES);  Element extEle=createExtensions();  entityEle.appendChild(extEle);  doc.appendChild(entityEle);  String id=this.getEntityId(tenantName);  entityEle.setAttribute(SAMLNames.ENTID,id);  Element idpSSO=createIDPSSODescriptor(false);  entityEle.appendChild(idpSSO);  appendSPSSODescriptorForCastleAsSP(entityEle,id);  return doc;}  }
class C{  private void validateNotSameNameProjectAndVarray(ExportCreateParam param){  URIQueryResultList exportGroupURIList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getProjectExportGroupConstraint(param.getProject()),exportGroupURIList);  Iterator<URI> exportGroupURIIterator=exportGroupURIList.iterator();  while (exportGroupURIIterator.hasNext()) {    ExportGroup eg=_dbClient.queryObject(ExportGroup.class,exportGroupURIIterator.next());    if ((null != eg) && eg.getLabel().equals(param.getName()) && eg.getVirtualArray().equals(param.getVarray())) {      throw APIException.badRequests.duplicateExportGroupProjectAndVarray(param.getName());    }  }}  }
class C{  public static Thread createThread(RVMThread vmdata,String myName){  return new Thread(vmdata,myName);}  }
class C{  public static byte[] chars2utf(char[] src,int sindex,int len){  byte[] dst=new byte[len * 3];  int len1=chars2utf(src,sindex,dst,0,len);  byte[] result=new byte[len1];  System.arraycopy(dst,0,result,0,len1);  return result;}  }
class C{  @Override protected List<Double> computeRelatedness(Page page1,Page page2) throws WikiApiException {  List<Double> relatednessValues=new ArrayList<Double>();  Set<Category> categories1=relatednessUtilities.getCategories(page1);  Set<Category> categories2=relatednessUtilities.getCategories(page2);  if (categories1 == null || categories2 == null) {    return null;  }  Category root=wiki.getMetaData().getMainCategory();  if (!catGraph.getGraph().containsVertex(root.getPageId())) {    logger.error("The root node is not part of this graph. Cannot compute JiangConrath relatedness.");    return null;  }  for (  Category cat1 : categories1) {    for (    Category cat2 : categories2) {      Category lcs=catGraph.getLCS(cat1,cat2);      if (lcs == null) {        continue;      }      double iicCat1=catGraph.getIntrinsicInformationContent(cat1);      double iicCat2=catGraph.getIntrinsicInformationContent(cat2);      double iicLcs=catGraph.getIntrinsicInformationContent(lcs);      double relatedness=(2 - (iicCat1 + iicCat2 - 2 * iicLcs)) / 2;      relatednessValues.add(relatedness);    }  }  return relatednessValues;}  }
class C{  @Override public void unregisterListener(ICustomTileListener listener,int userid){  enforceBindCustomTileListener();  mCustomTileListeners.unregisterService(listener,userid);}  }
class C{  public void installDefaults(AbstractButton b){  super.installDefaults(b);  b.setOpaque(false);}  }
class C{  public Preferences userRoot(){  return WindowsPreferences.userRoot;}  }
class C{  public void updateUI(){  if (collapsePane == null) {    return;  }  setUI((TaskPaneGroupUI)LookAndFeelAddons.getUI(this,TaskPaneGroupUI.class));}  }
class C{  @Override public void analyze(Graph graph,Map<String,DescriptiveStatistics> statsMap){  DescriptiveStatistics distr=module.distribution(graph);  double numComponents=distr.getN();  singleValueStats(NUM_COMPONENTS,numComponents,statsMap);  logger.info(String.format("%1$s disconnected components.",numComponents));  if (outputDirectoryNotNull()) {    TDoubleDoubleHashMap hist=Histogram.createHistogram(distr,new LinearDiscretizer(1.0),false);    try {      StatsWriter.writeHistogram(hist,"size","n",String.format("%1$s/components.txt",getOutputDirectory()));    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @SafeVarargs public static <I,O>Flux<O> zip(final Function<? super Object[],? extends O> combinator,int prefetch,Publisher<? extends I>... sources){  if (sources.length == 0) {    return empty();  }  if (sources.length == 1) {    Publisher<? extends I> source=sources[0];    if (source instanceof Fuseable) {      return onAssembly(new FluxMapFuseable<>(source,null));    }    return onAssembly(new FluxMap<>(source,null));  }  return onAssembly(new FluxZip<>(sources,combinator,QueueSupplier.get(prefetch),prefetch));}  }
class C{  @Nullable public static List<Byte> readByteList(DataInput in) throws IOException {  int size=in.readInt();  if (size == -1)   return null;  List<Byte> col=new ArrayList<>(size);  for (int i=0; i < size; i++)   col.add(in.readByte());  return col;}  }
class C{  public JSONObject jsonSerialize(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_REQUEST,request.jsonSerialize());  JsonUtil.putIfNotNull(json,KEY_TOKEN_TYPE,tokenType);  JsonUtil.putIfNotNull(json,KEY_ACCESS_TOKEN,accessToken);  JsonUtil.putIfNotNull(json,KEY_EXPIRES_AT,accessTokenExpirationTime);  JsonUtil.putIfNotNull(json,KEY_ID_TOKEN,idToken);  JsonUtil.putIfNotNull(json,KEY_REFRESH_TOKEN,refreshToken);  JsonUtil.putIfNotNull(json,KEY_SCOPE,scope);  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  @Deprecated public void clearBasicAuth(){  clearCredentialsProvider();}  }
class C{  public MemoryFileManager(JavaFileManager fileManager){  super(fileManager);  classes=new HashMap<String,byte[]>();}  }
class C{  final String readString(String encoding,ExceptionInterceptor exceptionInterceptor,int expectedLength) throws SQLException {  if (this.position + expectedLength > getBufLength()) {    throw SQLError.createSQLException(Messages.getString("ByteArrayBuffer.2"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,exceptionInterceptor);  }  try {    return StringUtils.toString(this.byteBuffer,this.position,expectedLength,encoding);  } catch (  UnsupportedEncodingException uEE) {    throw SQLError.createSQLException(Messages.getString("ByteArrayBuffer.1") + encoding + "'",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,exceptionInterceptor);  } finally {    this.position+=expectedLength;  }}  }
class C{  public DelphiArgument(String argName,String argType){  name=argName.toLowerCase();  type=argType.toLowerCase();}  }
class C{  private int viewIndexForColumn(TableColumn aColumn){  TableColumnModel cm=TableHeaderUI.this.header.getColumnModel();  for (int column=0; column < cm.getColumnCount(); column++) {    if (cm.getColumn(column) == aColumn) {      return column;    }  }  return -1;}  }
class C{  private boolean isScenarioOnlyLoadPage(String scenario) throws IOException, JSONException, SuiteException {  Script script=scriptFactory.parse(scenario);  for (  Step step : script.steps) {    if (!(step.type instanceof Get)) {      return false;    }  }  return true;}  }
class C{  public boolean isError(){  return error;}  }
class C{  @Override public boolean isViewFromObject(View view,Object object){  return view == object;}  }
class C{  public boolean isStatic(){  return this.modifierKeyword == ModifierKeyword.STATIC_KEYWORD;}  }
class C{  public EntryData(S source,S target){  this.source=source;  this.target=target;}  }
class C{  public static final void disconnectFromDS(){  JUnit4DistributedTestCase.disconnectFromDS();}  }
class C{  public void enableOkButton(){  okButton.setEnabled(true);}  }
class C{  public DynamicIntArray(){  this(10);}  }
class C{  @NonNull public BrowserDescriptor changeUseCustomTab(boolean newUseCustomTabValue){  return new BrowserDescriptor(packageName,signatureHashes,version,newUseCustomTabValue);}  }
class C{  public WFG8(int k,int l,int M){  super(k,l,M);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(elementData.length);  for (int i=0; i < size; i++)   s.writeObject(elementData[i]);}  }
class C{  public boolean containsKey(long key){  int ptr=(int)((Tools.phiMix(key) & m_mask));  OsmElement e=m_data[ptr];  if (e == FREE_KEY) {    return false;  }  if (e.getOsmId() == key) {    return true;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      return false;    }    if (e.getOsmId() == key) {      return true;    }  }}  }
class C{  public void add_return(StorageProcessor param){  if (local_return == null) {    local_return=new StorageProcessor[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageProcessor[])list.toArray(new StorageProcessor[list.size()]);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  private void writeStorageCapacityWarningFile(String outputFolder) throws IOException {  File file=new File(outputFolder + "storageCapacityWarning" + this.TXTfile);  FileWriter writer;  double cellWidth=((Network)this.network).getEffectiveCellSize();  writer=new FileWriter(file);  for (  Link link : this.lengthBelowStorageCapacity) {    writer.write("length of link " + link.getId() + " below min length for storage capacity of one vehicle ("+ link.getLength()+ "m instead of "+ cellWidth+ " m)\n");  }  writer.flush();  writer.close();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BINDING_PROPERTY__VALUE:    return basicSetValue(null,msgs);case N4JSPackage.BINDING_PROPERTY__VAR_DECL:  return basicSetVarDecl(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.PRESENCE;}  }
class C{  public boolean validate(InputNode node) throws Exception {  if (node.isElement()) {    validateElement(node);  } else {    node.getValue();  }  return true;}  }
class C{  public boolean isExpanded(){  return groupMetadata != null;}  }
class C{  public boolean isFinished(){  if (index == -1) {    return false;  }  boolean completed=false;  final long finish=resList.get(index).finishedSoFar;  final long result=cloudletLength - finish;  if (result <= 0.0) {    completed=true;  }  return completed;}  }
class C{  public static boolean byteArrayOutputStreamToFile(final ByteArrayOutputStream bos,final File targetFile){  return byteArrayOutputStreamToFile(bos,targetFile,false);}  }
class C{  public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if ("hasMarker".equals(property)) {    if (args.length > 0 && args[0] instanceof String) {      String markerId=(String)args[0];      String attributeName=null;      if (args.length > 1 && args[1] instanceof String) {        attributeName=(String)args[1];      }      if (receiver != null && receiver instanceof Model) {        final Model model=(Model)receiver;        final IFile file=model.getLaunchConfiguration().getFile();        if (!file.exists()) {          return false;        }        try {          IMarker[] foundMarkers=file.findMarkers(markerId,true,IResource.DEPTH_INFINITE);          if (attributeName != null) {            for (int i=0; i < foundMarkers.length; i++) {              Object value=foundMarkers[i].getAttribute(attributeName);              if (value == null || !value.equals(expectedValue)) {                return false;              }            }            return foundMarkers.length > 0;          } else {            boolean result;            int expectedCount=-1;            if (expectedValue != null && expectedValue instanceof Integer) {              expectedCount=((Integer)expectedValue).intValue();            }            if (expectedCount == -1) {              result=foundMarkers.length > 0;            } else {              result=foundMarkers.length == expectedCount;            }            return result;          }        } catch (        CoreException e) {          TLCActivator.logError("Error testing markers",e);        }      }    }  }  return false;}  }
class C{  public void addContentChild(FXGNode child){  if (child instanceof ParagraphNode || child instanceof DivNode || child instanceof SpanNode|| child instanceof BRNode|| child instanceof TabNode|| child instanceof TCYNode|| child instanceof LinkNode|| child instanceof ImgNode|| child instanceof CDATANode) {    if (child instanceof LinkNode && (((LinkNode)child).href == null)) {      throw new FXGException(getStartLine(),getStartColumn(),"MissingHref");    }    if (content == null) {      content=new ArrayList<TextNode>();      contiguous=true;    }    if (!contiguous) {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidRichTextContent");    }    content.add((TextNode)child);  } else {    throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildNode",child.getNodeName(),getNodeName());  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  public static int staticNextIntFromTo(int from,int to){synchronized (shared) {    return shared.nextIntFromTo(from,to);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ColorBar)) {    return false;  }  ColorBar that=(ColorBar)obj;  if (!this.axis.equals(that.axis)) {    return false;  }  if (this.colorBarThickness != that.colorBarThickness) {    return false;  }  if (this.colorBarThicknessPercent != that.colorBarThicknessPercent) {    return false;  }  if (!this.colorPalette.equals(that.colorPalette)) {    return false;  }  if (this.colorBarLength != that.colorBarLength) {    return false;  }  if (this.outerGap != that.outerGap) {    return false;  }  return true;}  }
class C{  private static Point findLocation(final StendhalRPZone zone,final Entity entity,final Shape allowedArea,final int x,final int y,final boolean checkPath){  for (int totalShift=1; totalShift <= maxDisplacement; totalShift++) {    for (int tilt=(totalShift + 1) / 2; tilt > 0; tilt--) {      final int spread=totalShift - tilt;      int tmpx=x - tilt;      int tmpy=y - spread;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpx=x + tilt;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpy=y + spread;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpx=x - tilt;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      if (spread == tilt) {        continue;      }      tmpx=x - spread;      tmpy=y - tilt;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpx=x + spread;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpy=y + tilt;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }      tmpx=x - spread;      if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {        return new Point(tmpx,tmpy);      }    }    int tmpx=x;    int tmpy=y - totalShift;    if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {      return new Point(tmpx,tmpy);    }    tmpy=y + totalShift;    if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {      return new Point(tmpx,tmpy);    }    tmpy=y;    tmpx=x - totalShift;    if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {      return new Point(tmpx,tmpy);    }    tmpx=x + totalShift;    if (isValidPlacement(zone,entity,allowedArea,x,y,tmpx,tmpy,checkPath)) {      return new Point(tmpx,tmpy);    }  }  return null;}  }
class C{  public GVector(int length){  this.length=length;  values=new double[length];  for (int i=0; i < length; i++) {    values[i]=0.0;  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case BONK:    return isSetBonk();}throw new IllegalStateException();}  }
class C{  @IntRange(from=MIN_SEGMENT,to=MAX_SEGMENT) public static int extractSegmentPart(int composedViewType){  return (composedViewType & BIT_MASK_SEGMENT) >>> BIT_OFFSET_SEGMENT;}  }
class C{  public boolean match(ForStatement node,Object other){  if (!(other instanceof ForStatement)) {    return false;  }  ForStatement o=(ForStatement)other;  return (safeSubtreeListMatch(node.initializers(),o.initializers()) && safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeListMatch(node.updaters(),o.updaters())&& safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.597 -0500",hash_original_method="2B31DF94CF8024B200C12FFD3895E8BE",hash_generated_method="5F64586168BAF6F6F403282E848793A6") public void removeActiveSync(SyncInfo syncInfo){synchronized (mAuthorities) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"removeActiveSync: account=" + syncInfo.account + " auth="+ syncInfo.authority);    }    mCurrentSyncs.remove(syncInfo);  }  reportActiveChange();}  }
class C{  public boolean isLocation(String str){  return links.isVertexLabel(str);}  }
class C{  public Varargs loadFile(String filename,String mode,LuaValue env){  InputStream is=globals.finder.findResource(filename);  if (is == null)   return varargsOf(NIL,valueOf("cannot open " + filename + ": No such file or directory"));  try {    return loadStream(is,"@" + filename,mode,env);  }  finally {    try {      is.close();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public ShapeLayer(){  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));  setRenderPolicy(new BufferedImageRenderPolicy(this));}  }
class C{  public boolean onBackPressed(){  if (isFullScreen()) {    exitFullScreen();    return true;  }  return false;}  }
class C{  public static SchemaModel loadAndMap(String schemaResource,String schemaText){  XSModel model;  try {    model=readSchemaInternal(schemaResource,schemaText);  } catch (  ConfigurationException ex) {    throw ex;  }catch (  Exception ex) {    throw new ConfigurationException("Failed to read schema '" + schemaResource + "' : "+ ex.getMessage(),ex);  }  return map(model);}  }
class C{  public boolean mouseMoved(MouseEvent e){  OMGraphic newSelectedGraphic=omgraphics.selectClosest(e.getX(),e.getY(),2.0f);  if (newSelectedGraphic != selectedGraphic) {    if (selectedGraphic != null)     selectedGraphic.setFillPaint(oldFillColor);    selectedGraphic=newSelectedGraphic;    if (newSelectedGraphic != null) {      oldFillColor=newSelectedGraphic.getFillColor();      newSelectedGraphic.setFillPaint(Color.white);      fireRequestInfoLine(newSelectedGraphic.getAttribute(OMGraphic.INFOLINE).toString());    }    repaint();  }  return true;}  }
class C{  protected LongStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public StateLog(int id,int k,byte[] initialState,byte[] initialHash){  this.messageBatches=new CommandsInfo[k - 1];  this.lastCheckpointCID=-1;  this.state=initialState;  this.stateHash=initialHash;  this.position=0;  this.lastCID=-1;  this.id=id;}  }
class C{  protected SVGOMAnimationElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void parse(Reader reader,int buffersize) throws IOException {  if (reader == null) {    throw new NullPointerException("reader is null");  }  if (buffersize <= 0) {    throw new IllegalArgumentException("buffersize is zero or negative");  }  this.reader=reader;  buffer=new char[buffersize];  bufferOffset=0;  index=0;  fill=0;  line=1;  lineOffset=0;  current=0;  captureStart=-1;  read();  skipWhiteSpace();  readValue();  skipWhiteSpace();  if (!isEndOfText()) {    throw error("Unexpected character");  }}  }
class C{  public static TelephoneType find(String value){  return enums.find(value);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.GAML_DEFINITION;}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<E> q=head;    for (; ; ) {      Index<E> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  @Override public E remove(Object key){  if (key instanceof Integer) {    return remove((int)key);  }  return null;}  }
class C{  public boolean addItemUnique(Album a){synchronized (mAlbums) {    if (!mAlbums.contains(a)) {      mAlbums.add(a);      sortListLocked();      return true;    } else {      return false;    }  }}  }
class C{  public MoveTargetEdit(int offset,MoveSourceEdit source){  this(offset);  setSourceEdit(source);}  }
class C{  public static LatLonPoint moonPosition(long mssue){  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(new Date(mssue));  double julianDate=calculateJulianDate(cal);  long gmtOffset=cal.get(Calendar.ZONE_OFFSET);  cal.setTime(new Date(mssue - gmtOffset));  double numDaysSinceEpoch=((mssue / 1000) - EPOCH_TIME_SECS) / (24.0f * 3600.0f);  double M0=sunMeanAnomaly(numDaysSinceEpoch);  double sunLongitude=sunEclipticLongitude(M0);  double el=(13.1763966 * numDaysSinceEpoch * Math.PI / 180) + el0;  el=adjustWithin2PI(el);  double Mm=el - (.1114041 * numDaysSinceEpoch * Math.PI / 180) - P0;  Mm=adjustWithin2PI(Mm);  double N=N0 - (.0529539 * numDaysSinceEpoch * Math.PI / 180);  N=adjustWithin2PI(N);  double C=el - sunLongitude;  double Ev=1.2739 * Math.sin(2 * C - Mm);  double Ae=.1858 * Math.sin(M0);  double A3=.37 * Math.sin(M0);  double Mmp=Mm + Ev - Ae - A3;  double Ec=6.2886 * Math.sin(Mmp);  double A4=0.214 * Math.sin(2 * Mmp);  double elp=el + Ev + Ec - Ae + A4;  double V=.6583 * Math.sin(2 * (elp - sunLongitude));  double elpp=elp + V;  double Np=N - (.16 * Math.sin(M0));  double y=Math.sin(elpp - Np) * Math.cos(eye);  double x=Math.cos(elpp - Np);  double amb=Math.atan2(y,x);  double lambda_m=amb + Np;  double beta_m=Math.asin(Math.sin(elpp - Np) * Math.sin(eye));  double moonAscension=eclipticToEquatorialAscension(lambda_m,beta_m);  double moonDeclination=eclipticToEquatorialDeclination(lambda_m,beta_m);  double tmpAscension=moonAscension - (MoreMath.TWO_PI / 24) * greenwichSiderealTime(julianDate,cal);  return new LatLonPoint.Double(moonDeclination,tmpAscension,true);}  }
class C{  @Override public void apply(World world,Entity entity,Random random,Object data){  if (potionId > 0) {    if (entity instanceof EntityLivingBase) {      ((EntityLivingBase)entity).removePotionEffect(potionId);    }  }}  }
class C{  private void adjustQualitySelector(int id,int level){  ImageButton button=(ImageButton)(getView().findViewById(id));  if (button != null) {    button.setImageLevel(level);    button.setOnClickListener(this);  }}  }
class C{  @Override public Set<IGamePlayer> createPlayers(final Map<String,String> players){  return null;}  }
class C{  public void removeImage(String image) throws IOException {  removeImage(RemoveImageParams.create(image));}  }
class C{  final static boolean arrayRegionMatches(byte[] source,int sourceStart,byte[] target,int targetStart,int len){  int sourceEnd=sourceStart + len;  int delta=targetStart - sourceStart;  for (int i=sourceStart; i < sourceEnd; i++) {    if (source[i] != target[i + delta])     return false;  }  return true;}  }
class C{  private void activateMap(String file){  Log.d(TAG,"Activating " + new File(file).getName());  SharedPreferences sharedPref=getContext().getSharedPreferences(Preferences.KEY_MAP_FILE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sharedPref.edit();  editor.putString(Preferences.KEY_MAP_FILE,new File(file).getName());  editor.apply();}  }
class C{  protected void fillGap(boolean down){  final int count=getChildCount();  if (down) {    int position=mFirstPosition + count;    final int startOffset=getChildTop(position);    fillDown(position,startOffset);  } else {    int position=mFirstPosition - 1;    final int startOffset=getChildBottom(position);    fillUp(position,startOffset);  }  adjustViewsAfterFillGap(down);}  }
class C{  @RequestMapping(value="/stub/admin/users/count") public ResponseEntity<?> usersListCount(@RequestParam(value="filter",defaultValue="") String filter) throws UserServiceException {  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    return new ResponseEntity<>("{\"count\":" + userService.countByFilter(filter) + "}",HttpStatus.OK);  } catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }}  }
class C{  public int declare(Environment env,LocalMember local){  local.scopeNumber=scopeNumber;  if (this.field == null && idThis.equals(local.getName())) {    local.scopeNumber+=1;  }  if (local.isInnerClass()) {    local.prev=classes;    classes=local;    return 0;  }  local.prev=locals;  locals=local;  local.number=varNumber;  varNumber+=local.getType().stackSize();  return local.number;}  }
class C{  @Override public boolean isOverflowEnabled(){  return false;}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  initPredicateInfo(compiler,opPos);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedataoffsetnegative.class,args);}  }
class C{  public static <T>boolean addAllIterable(Iterable<? extends T> iterable,Collection<T> targetCollection){  if (iterable == null) {    throw new NullPointerException();  }  if (iterable instanceof Collection<?>) {    return targetCollection.addAll((Collection<T>)iterable);  }  int oldSize=targetCollection.size();  Iterate.forEachWith(iterable,Procedures2.addToCollection(),targetCollection);  return targetCollection.size() != oldSize;}  }
class C{  public List<GeoPoint> visible(){  return visible;}  }
class C{  private byte[] decodeData() throws IOException {  if (_encodedData.length < WRAPPER_HEADER_SIZE) {    throw new IOException("Unknown encoded attachment data format");  }  ByteBuffer bb=PageChannel.wrap(_encodedData);  int typeFlag=bb.getInt();  int dataLen=bb.getInt();  DataInputStream contentStream=null;  try {    InputStream bin=new ByteArrayInputStream(_encodedData,WRAPPER_HEADER_SIZE,_encodedData.length - WRAPPER_HEADER_SIZE);    if (typeFlag == DATA_TYPE_RAW) {    } else     if (typeFlag == DATA_TYPE_COMPRESSED) {      bin=new InflaterInputStream(bin);    } else {      throw new IOException("Unknown encoded attachment data type " + typeFlag);    }    contentStream=new DataInputStream(bin);    byte[] tmpBytes=new byte[4];    contentStream.readFully(tmpBytes);    int headerLen=PageChannel.wrap(tmpBytes).getInt();    contentStream.skipBytes(headerLen - 4);    tmpBytes=new byte[dataLen - headerLen];    contentStream.readFully(tmpBytes);    return tmpBytes;  }  finally {    ByteUtil.closeQuietly(contentStream);  }}  }
class C{  private JmsMessage processMessage(String messageText,String messageName){  JmsMessage jmsMessage=null;  boolean herdSqsNotificationEnabled=isHerdSqsNotificationEnabled();  LOGGER.debug(String.format("herdSqsNotificationEnabled: %s, messageName: %s, messageText:%n%s",herdSqsNotificationEnabled,messageName,messageText));  if (herdSqsNotificationEnabled) {    if (StringUtils.isBlank(messageText)) {      LOGGER.warn("Not sending \"" + messageName + "\" message because it is not configured.");    } else {      jmsMessage=new JmsMessage(getSqsQueueName(),messageText);      jmsMessageInMemoryQueue.add(jmsMessage);    }  }  return jmsMessage;}  }
class C{  public void init(CipherParameters params) throws IllegalArgumentException {  byte[] nonce=null;  if (cipher != null) {    if (!(params instanceof ParametersWithIV)) {      throw new IllegalArgumentException("Poly1305 requires an IV when used with a block cipher.");    }    ParametersWithIV ivParams=(ParametersWithIV)params;    nonce=ivParams.getIV();    params=ivParams.getParameters();  }  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("Poly1305 requires a key.");  }  KeyParameter keyParams=(KeyParameter)params;  setKey(keyParams.getKey(),nonce);  reset();}  }
class C{  private String testMail(){  String server=p_panel != null ? p_panel.fMailServer.getText() : (String)p_properties.get(ADEMPIERE_MAIL_SERVER);  boolean pass=server != null && server.length() > 0 && server.toLowerCase().indexOf("localhost") == -1 && !server.equals("127.0.0.1");  String error="Error Mail Server = " + server;  InetAddress mailServer=null;  try {    if (pass)     mailServer=InetAddress.getByName(server);  } catch (  Exception e) {    error+=" - " + e.getMessage();    pass=false;  }  if (p_panel != null)   p_panel.signalOK(p_panel.okMailServer,"ErrorMailServer",pass,true,error);  if (!pass) {    p_properties.setProperty(ADEMPIERE_MAIL_SERVER,"");    return error;  }  p_properties.setProperty(ADEMPIERE_MAIL_SERVER,mailServer.getHostName());  String mailUser=p_panel != null ? p_panel.fMailUser.getText() : (String)p_properties.get(ADEMPIERE_MAIL_USER);  String mailPassword=p_panel != null ? new String(p_panel.fMailPassword.getPassword()) : (String)p_properties.get(ADEMPIERE_MAIL_PASSWORD);  String adminEMailString=p_panel != null ? p_panel.fAdminEMail.getText() : (String)p_properties.get(ADEMPIERE_ADMIN_EMAIL);  InternetAddress adminEMail=null;  try {    adminEMail=new InternetAddress(adminEMailString);  } catch (  Exception e) {    error="Not valid: " + adminEMailString + " - "+ e.getMessage();    pass=false;  }  if (pass) {    error="Not verified EMail = " + adminEMail;    pass=testMailServer(mailServer,adminEMail,mailUser,mailPassword);  }  if (p_panel != null)   p_panel.signalOK(p_panel.okMailUser,"ErrorMail",pass,false,error);  if (pass) {    log.info("OK: EMail = " + adminEMail);    p_properties.setProperty(ADEMPIERE_ADMIN_EMAIL,adminEMail.toString());    p_properties.setProperty(ADEMPIERE_MAIL_USER,mailUser);    p_properties.setProperty(ADEMPIERE_MAIL_PASSWORD,mailPassword);    p_properties.setProperty(ADEMPIERE_MAIL_UPDATED,"No");  } else {    log.warning(error);    p_properties.setProperty(ADEMPIERE_ADMIN_EMAIL,"");    p_properties.setProperty(ADEMPIERE_MAIL_USER,"");    p_properties.setProperty(ADEMPIERE_MAIL_PASSWORD,"");    p_properties.setProperty(ADEMPIERE_MAIL_UPDATED,"");  }  return null;}  }
class C{  public Pyramid(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  private boolean matches(Collection<Address> left,Collection<Address> right){  if (left.size() != right.size())   return false;  for (  Address address : left) {    if (!right.contains(address)) {      return false;    }  }  return true;}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || DataSyncPreferenceFragment.class.getName().equals(fragmentName)|| NotificationPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  private boolean isForceBlocked(String permissionName){  List<PermissionRule> access=access(permissionName);  List<PermissionRule> overridden=relevant.getOverridden(permissionName);  Set<ProjectRef> allows=new HashSet<>();  Set<ProjectRef> blocks=new HashSet<>();  for (  PermissionRule rule : access) {    if (rule.isBlock()) {      blocks.add(relevant.getRuleProps(rule));    } else     if (rule.getForce()) {      allows.add(relevant.getRuleProps(rule));    }  }  for (  PermissionRule rule : overridden) {    if (rule.getForce()) {      blocks.remove(relevant.getRuleProps(rule));    }  }  blocks.removeAll(allows);  return !blocks.isEmpty();}  }
class C{  public static Vector<Object> toXmlRpcRepositoriesParameters(Collection<Repository> repositories){  Vector<Object> repositoriesParams=new Vector<Object>();  for (  Repository repo : repositories) {    repositoriesParams.add(repo.marshallize());  }  return repositoriesParams;}  }
class C{  public StaticSentence(Session s,ISQLBuilderStatic sentence,SerializerWrite serwrite){  this(s,sentence,serwrite,null);}  }
class C{  boolean hasPositionSensitivity(){  return spanQueries.isEmpty() == false;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  @Override public int hashCode(){  int result=algorithm.length();  for (  byte element : key) {    result+=element;  }  return result;}  }
class C{  private void processSameAs2(ISPO spo){  final ISPO[] spos=new ISPO[chunkSize];  int numSPOs=0;  final Iterator<IV> samesIt=getSames(spo.s()).iterator();  while (samesIt.hasNext()) {    IV same=samesIt.next();    if (IVUtility.equals(spo.p(),sameAs) && IVUtility.equals(same,spo.o())) {      continue;    }    if (numSPOs == chunkSize) {      boolean present=false;      IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);      if (absent.hasNext()) {        if (sameAs2 == null) {          sameAs2=createTempTripleStore();        }        db.addStatements(sameAs2,copyOnly,absent,null);      }      numSPOs=0;    }    spos[numSPOs++]=new SPO(same,spo.p(),spo.o(),StatementEnum.Inferred);    dumpSPO(spos[numSPOs - 1]);  }  if (numSPOs > 0) {    boolean present=false;    IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);    if (absent.hasNext()) {      if (sameAs2 == null) {        sameAs2=createTempTripleStore();      }      db.addStatements(sameAs2,copyOnly,absent,null);    }  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean equals(Vector2D op2){  if (op2 == null)   return false;  return Util.compareDoubles(this.x,op2.x) && Util.compareDoubles(this.y,op2.y);}  }
class C{  private void handleFlawedDiscovery(String logAdapterClassName,ClassLoader classLoader,Throwable discoveryFlaw){  if (isDiagnosticsEnabled()) {    logDiagnostic("Could not instantiate Log '" + logAdapterClassName + "' -- "+ discoveryFlaw.getClass().getName()+ ": "+ discoveryFlaw.getLocalizedMessage());  }  if (!allowFlawedDiscovery) {    throw new LogConfigurationException(discoveryFlaw);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("xml","1.0");  assertTrue("throw_True",state);}  }
class C{  protected boolean isZoneChangeAllowed(){  return false;}  }
class C{  private void addToken(List list,String tok){  if (tok == null || tok.length() == 0) {    if (isIgnoreEmptyTokens()) {      return;    }    if (isEmptyTokenAsNull()) {      tok=null;    }  }  list.add(tok);}  }
class C{  public void add(String name,T asset,Class<T> type){  if (!map.containsKey(type)) {    map.put(type,new ObjectMap<String,T>());  }  ObjectMap<String,T> innerMap=map.get(type);  if (innerMap.containsKey(name)) {    throw new GdxRuntimeException("Asset name is already used, try changing it: '" + name + "'");  }  innerMap.put(name,asset);}  }
class C{  public static double sum(double[] a){  double total=0.0;  for (int i=0; i < a.length; i++) {    total+=a[i];  }  return total;}  }
class C{  public static void createChildren(DefaultMutableTreeNode parent,Object children){  if (children instanceof Vector) {    Vector<?> childVector=(Vector)children;    for (int counter=0, maxCounter=childVector.size(); counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childVector.elementAt(counter),childVector.elementAt(counter)));  } else   if (children instanceof Hashtable) {    Hashtable<?,?> childHT=(Hashtable)children;    Enumeration<?> keys=childHT.keys();    Object aKey;    while (keys.hasMoreElements()) {      aKey=keys.nextElement();      parent.add(new DynamicUtilTreeNode(aKey,childHT.get(aKey)));    }  } else   if (children instanceof Object[]) {    Object[] childArray=(Object[])children;    for (int counter=0, maxCounter=childArray.length; counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childArray[counter],childArray[counter]));  }}  }
class C{  public void freeUniqueName(String name){  if (name != null) {synchronized (temporaryUniqueNames) {      temporaryUniqueNames.remove(name);    }  }}  }
class C{  public void failedExecutionCycle(){  nextLoadPointer=firstPointer;  nextUnloadPointer=null;  firstCutpointPointer=null;}  }
class C{  public void translateInScreenPlane(double dx,double dy){  if (hikeMode || mapMode)   return;  double s=camera.getPixelSizeAt(camera.getLookAt(),false) * 0.5;  workVec.set(dx * s,dy * s,0);  rotate.applyPost(workVec,workVec);  translate(workVec);}  }
class C{  public void testNextCleanRetainedWhitespace() throws JSONException {  assertNotClean("null",'\u0000');  assertNotClean("next line",'\u0085');  assertNotClean("non-breaking space",'\u00a0');  assertNotClean("ogham space mark",'\u1680');  assertNotClean("mongolian vowel separator",'\u180e');  assertNotClean("en quad",'\u2000');  assertNotClean("em quad",'\u2001');  assertNotClean("en space",'\u2002');  assertNotClean("em space",'\u2003');  assertNotClean("three-per-em space",'\u2004');  assertNotClean("four-per-em space",'\u2005');  assertNotClean("six-per-em space",'\u2006');  assertNotClean("figure space",'\u2007');  assertNotClean("punctuation space",'\u2008');  assertNotClean("thin space",'\u2009');  assertNotClean("hair space",'\u200a');  assertNotClean("zero-width space",'\u200b');  assertNotClean("left-to-right mark",'\u200e');  assertNotClean("right-to-left mark",'\u200f');  assertNotClean("line separator",'\u2028');  assertNotClean("paragraph separator",'\u2029');  assertNotClean("narrow non-breaking space",'\u202f');  assertNotClean("medium mathematical space",'\u205f');  assertNotClean("ideographic space",'\u3000');  assertNotClean("line tabulation",'\u000b');  assertNotClean("form feed",'\u000c');  assertNotClean("information separator 4",'\u001c');  assertNotClean("information separator 3",'\u001d');  assertNotClean("information separator 2",'\u001e');  assertNotClean("information separator 1",'\u001f');}  }
class C{  public static ACLRule jsonToRule(String json) throws IOException {  ACLRule rule=new ACLRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createParser(json);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String key=jp.getCurrentName();    jp.nextToken();    String value=jp.getText();    if (value.equals(""))     continue;    if ("ruleid".equals(key)) {      try {        rule.setId(Integer.parseInt(value));      } catch (      NumberFormatException e) {        throw new NumberFormatException("ruleid must be specified as a number.");      }    } else     if ("src-ip".equals(key)) {      rule.setNw_src(value);      int[] cidr=IPAddressUtil.parseCIDR(value);      rule.setNw_src_prefix(cidr[0]);      rule.setNw_src_maskbits(cidr[1]);    } else     if ("dst-ip".equals(key)) {      rule.setNw_dst(value);      int[] cidr=IPAddressUtil.parseCIDR(value);      rule.setNw_dst_prefix(cidr[0]);      rule.setNw_dst_maskbits(cidr[1]);    } else     if ("nw-proto".equals(key)) {      if ("TCP".equalsIgnoreCase(value)) {        rule.setNw_proto(6);      } else       if ("UDP".equalsIgnoreCase(value)) {        rule.setNw_proto(11);      } else       if ("ICMP".equalsIgnoreCase(value)) {        rule.setNw_proto(1);      } else {        throw new IllegalArgumentException("nw-proto must be specified as (TCP || UDP || ICMP).");      }    } else     if ("tp-dst".equals(key)) {      if (rule.getNw_proto() == 6 || rule.getNw_proto() == 11) {        try {          rule.setTp_dst(Integer.parseInt(value));        } catch (        NumberFormatException e) {          throw new NumberFormatException("tp-dst must be specified as a number.");        }      }    } else     if (key == "action") {      if ("allow".equalsIgnoreCase(value)) {        rule.setAction(ACLRule.Action.ALLOW);      } else       if ("deny".equalsIgnoreCase(value)) {        rule.setAction(ACLRule.Action.DENY);      } else {        throw new IllegalArgumentException("action must be specidied as (allow || deny).");      }    }  }  return rule;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void deferredCreateContent(){  fillToolbar();  createAnnotationInformation(fParent,getAnnotationInfo().annotation);  setColorAndFont(fParent,fParent.getForeground(),fParent.getBackground(),JFaceResources.getDialogFont());  ICompletionProposal[] proposals=getAnnotationInfo().getCompletionProposals();  if (proposals.length > 0)   createCompletionProposalsControl(fParent,proposals);  fParent.layout(true);}  }
class C{  public static String processStatement(String sqlStatement,boolean allowDML){  if (sqlStatement == null)   return "";  StringBuffer sb=new StringBuffer();  char[] chars=sqlStatement.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (Character.isWhitespace(c))     sb.append(' '); else     sb.append(c);  }  String sql=sb.toString().trim();  if (sql.length() == 0)   return "";  StringBuffer result=new StringBuffer("SQL> ").append(sql).append(Env.NL);  if (!allowDML) {    boolean error=false;    String SQL=sql.toUpperCase();    for (int i=0; i < DML_KEYWORDS.length; i++) {      if (SQL.startsWith(DML_KEYWORDS[i] + " ") || SQL.indexOf(" " + DML_KEYWORDS[i] + " ") != -1 || SQL.indexOf("(" + DML_KEYWORDS[i] + " ") != -1) {        result.append("===> ERROR: Not Allowed Keyword ").append(DML_KEYWORDS[i]).append(Env.NL);        error=true;      }    }    if (error)     return result.toString();  }  Connection conn=DB.createConnection(true,Connection.TRANSACTION_READ_COMMITTED);  Statement stmt=null;  try {    stmt=conn.createStatement();    boolean OK=stmt.execute(sql);    int count=stmt.getUpdateCount();    if (count == -1) {      result.append("---> ResultSet");    } else     result.append("---> Result=").append(count);  } catch (  SQLException e) {    log.log(Level.SEVERE,"process statement: " + sql + " - "+ e.toString());    result.append("===> ").append(e.toString());  }  try {    stmt.close();  } catch (  SQLException e1) {    log.log(Level.SEVERE,"processStatement - close statement",e1);  }  stmt=null;  try {    conn.close();  } catch (  SQLException e2) {    log.log(Level.SEVERE,"processStatement - close connection",e2);  }  conn=null;  result.append(Env.NL);  return result.toString();}  }
class C{  private static TerminalBindingCondition create(final String condition,final String message){  return createWithCode(condition,message,null);}  }
class C{  public void addMacroRecord(MacroRecord record){  if (record != null)   macroRecords.add(record);}  }
class C{  public void paintTreeCellFocus(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void prepare(){  m_AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Org_ID")) {      p_AD_Org_ID=para[i].getParameterAsInt();    } else     if (name.equals("S_Resource_ID")) {      p_S_Resource_ID=para[i].getParameterAsInt();    } else     if (name.equals("M_Warehouse_ID")) {      p_M_Warehouse_ID=para[i].getParameterAsInt();    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("file") @Valid File file,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    file.setCreationTS(DateConverter.stringToDate(file.getTableCreationTS()));    fileDAO.insert(file);    restWrapper=new RestWrapper(file,RestWrapper.OK);    LOGGER.info("Record with ID:" + file.getBatchId() + " inserted in File by User:"+ principal.getName()+ file);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private List<Graph> generateSkeletons(Graph graph,Map<Triple,List<Set<Edge>>> colliderSet){  Graph newGraph=new EdgeListGraph(graph);  for (  Triple triple : colliderSet.keySet()) {    newGraph.setEndpoint(triple.getX(),triple.getY(),Endpoint.ARROW);    newGraph.setEndpoint(triple.getZ(),triple.getY(),Endpoint.ARROW);  }  List<Graph> graphs=new ArrayList<>();  graphs.add(newGraph);  for (  Triple triple : colliderSet.keySet()) {    generateSkeletons(graphs,triple,colliderSet.get(triple));  }  return graphs;}  }
class C{  private void init(){  rm=new POSConfigurator().getDefaultConfig();  String knownModelFile=rm.getString("knownModelPath");  String knownLexFile=rm.getString("knownLexPath");  String unknownModelFile=rm.getString("unknownModelPath");  String unknownLexFile=rm.getString("unknownLexPath");  String baselineModelFile=rm.getString("baselineModelPath");  String baselineLexFile=rm.getString("baselineLexPath");  String mikheevModelFile=rm.getString("mikheevModelPath");  String mikheevLexFile=rm.getString("mikheevLexPath");  baselineTarget=new BaselineTarget(baselineModelFile,baselineLexFile);  mikheevTable=new MikheevTable(mikheevModelFile,mikheevLexFile);  taggerKnown=new POSTaggerKnown(knownModelFile,knownLexFile,baselineTarget);  taggerUnknown=new POSTaggerUnknown(unknownModelFile,unknownLexFile,mikheevTable);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.917 -0500",hash_original_method="EBC869C8721A27887ED9951AEA7B17B3",hash_generated_method="1504F92F15CA490B1D914F13AB913CE9") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static String md5Hex(byte[] data){  return Hex.encodeHexString(data);}  }
class C{  @Override public void addDeviceFilter(DiscoveryFilter filter){}  }
class C{  private void quadFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public Class<? extends ParserBasedContentAssistContextFactory.StatefulFactory> bindStatefulParserBasedContentAssistContextFactory(){  return ContentAssistContextFactory.class;}  }
class C{  protected void validateParameterValues(org.oscm.xsd.ServiceParameter[] param){}  }
class C{  public static MetadataContext forProjection(String projection){  return forContext(null,projection,null);}  }
class C{  public boolean isOperator(int i){  return i >= 0 && i < size() && getArgument(i) instanceof MathCharacter && ((MathCharacter)getArgument(i)).isOperator();}  }
class C{  public DValue(int type,String typeName,String className,int attribs,Object value,int isolateId){  init(type,typeName,className,attribs,value);  setIsolateId(isolateId);}  }
class C{  public CMemorySectionPanelSynchronizer(final CMemorySectionBox sectionBox,final CDebugPerspectiveModel debugPerspectiveModel){  memorySectionBox=Preconditions.checkNotNull(sectionBox,"IE01454: Section box argument can not be null");  this.debugPerspectiveModel=Preconditions.checkNotNull(debugPerspectiveModel,"IE01455: Debug perspective model argument can not be null");  synchronizeDebugger(null,debugPerspectiveModel.getCurrentSelectedDebugger());  debugPerspectiveModel.addListener(debugListener);  memorySectionBox.addItemListener(memoryBoxListener);}  }
class C{  @Override public void logic(){  if (!getZone().getPlayers().isEmpty()) {    hunger++;  }  if (isOwnerCallingMe()) {    moveToOwner();    maybeMakeSound(20);  } else   if (stopped()) {    if ((hunger < HUNGER_HUNGRY) || !onHungry()) {      onIdle();    }  } else   if (hunger >= HUNGER_EXTREMELY_HUNGRY) {    onHungry();  }  if (hunger >= HUNGER_STARVATION) {    onStarve();  }  applyMovement();  notifyWorldAboutChanges();}  }
class C{  public void rollLookLeft(){  if (DEBUG) {    Debug.output("Tilting left");  }  doLookZ(getRollLeftAmount());}  }
class C{  public Document build(InputSource is) throws ParsingException, IOException {  xomTreeBuilder.setFragmentContext(null);  tokenize(is);  return xomTreeBuilder.getDocument();}  }
class C{  public PostscriptWriter(JComponent c){  super(c);}  }
class C{  public byte[] convert(){  try {    byte[] ret;    ret=convert0();    if (DEBUG) {      for (int i=0; i < ret.length; i++) {        System.err.printf("byte %02x\n",(0xff & ret[i]));      }    }    return ret;  } catch (  IOException ex) {    throw ExceptionWithContext.withContext(ex,"...while encoding debug info");  }}  }
class C{  public static String padLeft(String s,int length){  if (s.length() > length) {    throw new RuntimeException(s + " cannot be padded to length " + length+ ", it is too long");  }  String t="";  for (int i=0; i < length - s.length(); i++) {    t+=" ";  }  return t + s;}  }
class C{  public boolean onOverrideUrlLoading(String url){  for (  PluginEntry entry : this.entryMap.values()) {    List<String> urlFilters=urlMap.get(entry.service);    if (urlFilters != null) {      for (      String s : urlFilters) {        if (url.startsWith(s)) {          return getPlugin(entry.service).onOverrideUrlLoading(url);        }      }    } else {      CordovaPlugin plugin=pluginMap.get(entry.service);      if (plugin != null && plugin.onOverrideUrlLoading(url)) {        return true;      }    }  }  return false;}  }
class C{  protected String createIdForDeployable(Deployable deployable){  String name=null;  if (deployable.getType() == DeployableType.WAR) {    name=((WAR)deployable).getContext();  } else   if (deployable.getType() == DeployableType.EAR) {    name=((EAR)deployable).getName();  } else   if (deployable.getType() == DeployableType.EJB || deployable.getType() == DeployableType.RAR) {    name=createIdFromFileName(deployable);  } else {    throw new DeployableException("name extraction for " + deployable.getType() + " not currently supported");  }  return name;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ABSTRACT___ABSTRACT_1:    setAbstract_1(ABSTRACT_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static String escapeAndShorten(String raw,int maxLength){  if (raw == null) {    return "";  }  StringBuilder retval=new StringBuilder();  int length=raw.length();  boolean shortened=false;  if (maxLength != -1 && length > maxLength) {    length=maxLength;    shortened=true;  }  for (int i=0; i < length; i++) {    char c=raw.charAt(i);switch (c) {case '<':      retval.append("&lt;");    break;case '>':  retval.append("&gt;");break;case '&':retval.append("&amp;");break;case '\'':retval.append("&#039;");break;case '"':retval.append("&#034;");break;default :retval.append(c);break;}}if (shortened) {retval.append("<b>...</b>");}return retval.toString();}  }
class C{  public LocationStorage(WorldDataBase<?> worldStorage,UUID uuid,String name,EnumLocationType type){  super(worldStorage,uuid);  this.name=name;  if (type == null)   type=EnumLocationType.NONE;  this.type=type;}  }
class C{  public static boolean isFileOnPackageFragment(String fileName,IPackageFragment pckgFragment) throws JavaModelException {  return resolveFileOnPackageFragment(fileName,pckgFragment) != null;}  }
class C{  public StateSet duplicate(){  StateSet dup=new StateSet(factory);  dup.copyFrom(this);  return dup;}  }
class C{  public ODataProductSynchronizer(SynchronizerConf sc) throws IOException, ODataException {  super(sc);  String urilit=sc.getConfig("service_uri");  serviceUser=sc.getConfig("service_username");  servicePass=sc.getConfig("service_password");  if (urilit == null || urilit.isEmpty()) {    throw new IllegalStateException("`service_uri` is not set");  }  try {    client=new ODataClient(urilit,serviceUser,servicePass);  } catch (  URISyntaxException e) {    throw new IllegalStateException("`service_uri` is malformed");  }  String dec_name=client.getSchema().getDefaultEntityContainer().getName();  if (!dec_name.equals(V1Model.ENTITY_CONTAINER)) {    throw new IllegalStateException("`service_uri` does not reference a DHuS odata service");  }  String last_cr=sc.getConfig("last_created");  if (last_cr != null && !last_cr.isEmpty()) {    lastCreated=new Date(Long.decode(last_cr));  } else {    lastCreated=new Date(0L);  }  String last_up=sc.getConfig("last_updated");  if (last_up != null && !last_up.isEmpty()) {    lastUpdated=new Date(Long.decode(last_up));  } else {    lastUpdated=new Date(0L);  }  String last_del=sc.getConfig("last_deleted");  if (last_del != null && !last_del.isEmpty()) {    lastDeleted=new Date(Long.decode(last_del));  } else {    lastDeleted=new Date(0L);  }  String page_size=sc.getConfig("page_size");  if (page_size != null && !page_size.isEmpty()) {    pageSize=Integer.decode(page_size);  } else {    pageSize=30;  }  String remote_incoming=sc.getConfig("remote_incoming_path");  if (remote_incoming != null && !remote_incoming.isEmpty()) {    File ri=new File(remote_incoming);    if (!ri.exists() || !ri.isDirectory() || !ri.canRead()) {      throw new IOException("Cannot access remote incoming " + remote_incoming);    }    this.remoteIncoming=remote_incoming;  } else {    this.remoteIncoming=null;  }  String target_collection=sc.getConfig("target_collection");  if (target_collection != null && !target_collection.isEmpty()) {    this.targetCollection=Long.parseLong(target_collection);  } else {    this.targetCollection=null;  }  String filter_param=sc.getConfig("filter_param");  if (filter_param != null && !filter_param.isEmpty()) {    filterParam=filter_param;  } else {    filterParam=null;  }  String source_collection=sc.getConfig("source_collection");  if (source_collection != null && !source_collection.isEmpty()) {    sourceCollection=source_collection;  } else {    sourceCollection="";  }  String copy_product=sc.getConfig("copy_product");  if (copy_product != null && !copy_product.isEmpty()) {    this.copyProduct=Boolean.parseBoolean(copy_product);  } else {    this.copyProduct=false;  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  name="";  ignoreTooFar=false;  ignoreRoomCheck=false;  coordX=null;  coordY=null;  area=null;  externalId=null;}  }
class C{  public JdpBroadcaster(InetAddress address,int port,int ttl) throws IOException, JdpException {  this(address,null,port,ttl);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int rowsLessOne=rows - 1;    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    if (myHost != null) {      DEM.setCommunicator(myHost);      output.setCommunicator(myHost);    }    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                flowDir=1 << i;              }            }            if (dist == gridRes) {              dist=diagGridRes;            } else {              dist=gridRes;            }          }          if (maxSlope > 0) {            output.setValue(row,col,flowDir);          } else {            output.setValue(row,col,0);          }        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  V readValUnderLock(HE<K,V> e){  lock();  try {    return e.v;  }  finally {    unlock();  }}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int nAddress=-1;  nAddress=SerialAddress.getNodeAddressFromSystemName(systemName);  if (nAddress == -1) {    return (null);  }  int bitNum=SerialAddress.getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String conflict="";  conflict=SerialAddress.isOutputBitFree(nAddress,bitNum);  if (!conflict.equals("")) {    log.error("Assignment conflict with " + conflict + ".  Light not created.");    notifyLightCreationError(conflict,bitNum);    return (null);  }  if (SerialAddress.validSystemNameFormat(systemName,'L')) {    lgt=new SerialLight(systemName,userName,_memo);    if (!SerialAddress.validSystemNameConfig(systemName,'L',_memo.getTrafficController())) {      log.warn("Light system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  public void swapCursor(Cursor cursor){  this.mCursorAdapter.swapCursor(cursor);  notifyDataSetChanged();}  }
class C{  public int importKeysAndEncrypt(final List<ECKey> keys,KeyParameter aesKey){  checkState(keyCrypter != null,"Not encrypted");  LinkedList<ECKey> encryptedKeys=Lists.newLinkedList();  for (  ECKey key : keys) {    if (key.isEncrypted())     throw new IllegalArgumentException("Cannot provide already encrypted keys");    encryptedKeys.add(key.encrypt(keyCrypter,aesKey));  }  return importKeys(encryptedKeys);}  }
class C{  public IMarker findTaintMarker(IFile file,int offset,int length){  String className=getClassName(file);  if (className != null) {    ClassMarkerProcessor processor=get(className);    if (processor != null)     return processor.findTaintMarker(offset,length);  }  return null;}  }
class C{  public void writeToParcel(Parcel dest,int flags){synchronized (this) {    dest.writeInt(mNetworkType);    dest.writeInt(mSubtype);    dest.writeString(mTypeName);    dest.writeString(mSubtypeName);    dest.writeString(mState.name());    dest.writeString(mDetailedState.name());    dest.writeInt(mIsFailover ? 1 : 0);    dest.writeInt(mIsAvailable ? 1 : 0);    dest.writeInt(mIsRoaming ? 1 : 0);    dest.writeInt(mIsConnectedToProvisioningNetwork ? 1 : 0);    dest.writeString(mReason);    dest.writeString(mExtraInfo);  }}  }
class C{  private JPanel create2ColPane(String description,JRadioButton[] radioButtons,JButton showButton){  JLabel label=new JLabel(description);  int numPerColumn=radioButtons.length / 2;  JPanel grid=new JPanel(new GridLayout(0,2));  for (int i=0; i < numPerColumn; i++) {    grid.add(radioButtons[i]);    grid.add(radioButtons[i + numPerColumn]);  }  JPanel box=new JPanel();  box.setLayout(new BoxLayout(box,BoxLayout.PAGE_AXIS));  box.add(label);  grid.setAlignmentX(0.0f);  box.add(grid);  JPanel pane=new JPanel(new BorderLayout());  pane.add(box,BorderLayout.PAGE_START);  pane.add(showButton,BorderLayout.PAGE_END);  return pane;}  }
class C{  public void copyMemory(long srcPtr,long destPtr,long len){  GridUnsafe.copyMemory(srcPtr,destPtr,len);}  }
class C{  private static void pipe(InputStream source,OutputStream dest) throws IOException {  byte[] buf=new byte[1024];  int read=0;  while ((read=source.read(buf)) >= 0) {    if (null != dest)     dest.write(buf,0,read);  }  if (null != dest)   dest.flush();}  }
class C{  public double distance(TSPInstance problem){  DistanceTable distanceTable=problem.getDistanceTable();  double result=0.0;  for (int i=0; i < nodes.size(); i++) {    result+=distanceTable.getDistanceBetween(get(i),get(i + 1));  }  return result;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession();  WebSessionCtx wsc=WebSessionCtx.get(request);  Properties ctx=wsc.ctx;  if (ctx == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  MWorkflow wf=(MWorkflow)sess.getAttribute(WORKFLOW);  MWFNode[] nodes=(MWFNode[])sess.getAttribute(NODES);  ArrayList nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  int[][] imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  int activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  String m_command=request.getParameter(M_Command);  int j_command=WebUtil.getParameterAsInt(request,J_Command);  executeCommand(m_command,j_command,wf,activeNode,nodes,nodes_ID,sess);  wf=(MWorkflow)sess.getAttribute(WORKFLOW);  nodes=(MWFNode[])sess.getAttribute(NODES);  nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  WebDoc doc=preparePage("loginInfo");  doc=createLayout(doc,wf,activeNode,nodes,nodes_ID,imageMap);  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Date date(){  if (this.date_cache_Date != null)   return this.date_cache_Date;  final Date d=headerDate(HeaderFramework.DATE);  final Date now=new Date();  this.date_cache_Date=(d == null) ? now : d.after(now) ? now : d;  return this.date_cache_Date;}  }
class C{  @Override protected boolean stillWaiting(){  if (finishedWaiting) {    return false;  }  if (this.msgsBeingProcessed.get() > 0 && this.numMembers() > 0) {    return true;  }  finishedWaiting=finishedWaiting || !stillWaitingFromNodes();  return !finishedWaiting;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  InsertionX.sort(a);  show(a);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void deleteInstance(){  int index;  index=m_TableData.getSelectedRow();  if (index == -1) {    return;  }  ((DataSortedTableModel)m_TableData.getModel()).deleteInstanceAt(index);}  }
class C{  public void build() throws IOException {  List<Arch> archs=this.config.getArchs();  if (archs.isEmpty()) {    archs=config.getTarget().getDefaultArchs();  }  if (archs.isEmpty()) {    throw new IllegalArgumentException("No archs specified in config");  }  if (archs.size() == 1 && this.config.getArch().equals(archs.get(0))) {    compile();  } else {    Map<Arch,File> slices=new TreeMap<>();    for (    Arch arch : archs) {      this.config.getLogger().info("Building %s slice",arch);      Config sliceConfig=this.config.builder().arch(arch).tmpDir(new File(this.config.getTmpDir(),arch.toString())).build();      new AppCompiler(sliceConfig).compile();      slices.put(arch,new File(sliceConfig.getTmpDir(),sliceConfig.getExecutableName()));      for (      Path path : sliceConfig.getResourcesPaths()) {        if (!this.config.getResourcesPaths().contains(path)) {          this.config.addResourcesPath(path);        }      }    }    this.config.getTarget().buildFat(slices);  }}  }
class C{  public void forEach(Allocation aout){  forEach(0,null,aout,null);}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    inf.end();    closed=true;    eof=true;    super.close();  }}  }
class C{  public static void main(String[] args){  String grammar_dir=null;  try {    grammar_dir=args[0];    EncoderConfiguration encoding=new EncoderConfiguration();    encoding.load(grammar_dir + File.separator + "encoding");    int num_features=encoding.getNumFeatures();    System.out.println(String.format("num_features = %d",encoding.getNumFeatures()));    for (int feature_id=0; feature_id < num_features; feature_id++) {      if (Vocabulary.size() == 1) {        System.out.println(String.format("feature: %d",feature_id));      } else {        String name=Vocabulary.word(encoding.outerId(feature_id));        System.out.println(String.format("feature: %s",name));      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new RuntimeException("Usage: EncoderConfiguration <packed_directory>");  }catch (  IOException e) {    throw new RuntimeException(String.format("* FATAL: can't find file %s/encoding",grammar_dir));  }}  }
class C{  public LocationConfiguration failOnConnectionSuspended(boolean shouldFail){  this.failOnConnectionSuspended=shouldFail;  return this;}  }
class C{  public Iterator<Entry<String,String>> httpHeaders(){  return headers.iterator();}  }
class C{  public void startUsingVelocity(float initialVelocity){  if (initialVelocity == 0)   return;  startCommon();  mLastFlingAngle=0.0f;  mRotator.fling(initialVelocity);  post(this);}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.BOOL_LITERAL;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.653 -0500",hash_original_method="1D26914F95E4E8CAB857832B14C412F2",hash_generated_method="1D26914F95E4E8CAB857832B14C412F2") void onHangupLocal(){  cause=DisconnectCause.LOCAL;}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null) {    String prefix1=getPrefixPart(m_firstElementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_firstElementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  public O removeObject(O e){  int pos=index.get(e);  if (pos >= 0) {    return removeAt(pos);  } else {    return null;  }}  }
class C{  public static void rotateM(double[] rm,int rmOffset,double[] m,int mOffset,double a,double x,double y,double z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(rm,rmOffset,m,mOffset,sTemp,0);  }}  }
class C{  public boolean deleteCalendar(String calName) throws SchedulerException {  try {    return getRemoteScheduler().deleteCalendar(calName);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public int start(){  NullAppender na=new NullAppender();  Logger.getRootLogger().addAppender(na);  Logger.getRootLogger().setLevel(Level.OFF);  Logger.getLogger(ConfigurationUtils.class).addAppender(na);  Logger.getLogger(DefaultFileSystem.class).addAppender(na);  try {    Constant.getInstance();  } catch (  final Throwable e) {    System.err.println(e.getMessage());    return 1;  }  Constant.setLowMemoryOption(getArgs().isLowMem());  return 0;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public WeakHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private void writeObject(ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeObject(toString());}  }
class C{  private void fillConversations(){  conversations.add("Good day, Mayor Chalmers. What did you call me here for?");  conversations.add("Hello, very glad to see our respectable hero here. Who hasn't heard about you, there is almost...");  conversations.add("Please talk about your business to me, my time is precious.");  conversations.add("... ok, what was I saying? Ah yes, our city has a little problem with #rats.");  conversations.add("Again?");  conversations.add("Yes, these animals are too stupid to remember a lesson they learnt only recently.");  conversations.add("I can help, if you are ready to pay.");  conversations.add("Ados City has no other way to eliminate this nuisance. We will pay you.");  conversations.add("Do you know my usual price?");  conversations.add("Yes, I have it written somewhere in my papers.");  conversations.add("Good. I will return for my reward soon, please prepare it.");  conversations.add("Don't worry, how can I break your trust in me and my city?");}  }
class C{  public final void testValidateCaseInsensitiveNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,false,allowedCharacters);  assertFalse(characterValidator.validate("Ab C2-"));}  }
class C{  public static void e(String message,Throwable cause){  if (BuildConfig.DEBUG) {    Log.e(LOG_TAG,"[" + message + "]",cause);  }}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "index="+ index+ ","+ "insert="+ isInsert+ "]";}  }
class C{  public void callOnProgressUpdate(String... progressParams){  publishProgress(progressParams);}  }
class C{  @Override protected void initData(){}  }
class C{  public static void showReilCode(final Window parent,final INaviInstruction instruction){  try {    CReilInstructionDialog.show(parent,instruction);  } catch (  final InternalTranslationException exception) {    CUtilityFunctions.logException(exception);    final String message="E00035: " + "Could not show REIL code";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not show the REIL code of instruction '%s'.",instruction.toString()),new String[]{"The instruction could not be converted to REIL code."},new String[]{"You can not fix this problem yourself. Please contact the " + "BinNavi support."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  public static void logInfo(String message){  message="<li><font color='#00cd00'>" + message + "</font></li>";  log(message,false,false);}  }
class C{  public List<Message> removeWithSelector(String selector) throws MailQueueException {  Connection connection=null;  Session session=null;  Message message=null;  MessageConsumer consumer=null;  boolean first=true;  List<Message> messages=new ArrayList<Message>();  try {    connection=connectionFactory.createConnection();    connection.start();    session=connection.createSession(true,Session.SESSION_TRANSACTED);    Queue queue=session.createQueue(queueName);    consumer=session.createConsumer(queue,selector);    while (first || message != null) {      if (first) {        message=consumer.receive(2000);      } else {        message=consumer.receiveNoWait();      }      first=false;      if (message != null) {        messages.add(message);      }    }    session.commit();    return messages;  } catch (  Exception e) {    try {      session.rollback();    } catch (    JMSException e1) {    }    throw new MailQueueException("Unable to remove mails",e);  } finally {    if (consumer != null) {      try {        consumer.close();      } catch (      JMSException e1) {      }    }    try {      if (session != null)       session.close();    } catch (    JMSException e1) {    }    try {      if (connection != null)       connection.close();    } catch (    JMSException e1) {    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=createCaller().init();  test.config.traceTest=true;  test.config.memory=true;  test.config.networked=true;  test.config.beforeTest();  test.test();  test.config.afterTest();}  }
class C{  public static Ed25519FieldElement toFieldElement(final BigInteger b){  return new Ed25519EncodedFieldElement(toByteArray(b)).decode();}  }
class C{  protected Shape createBorder(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x,y,w + 2,h,CornerSize.BORDER,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y,w + 4,h);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y,w + 2,h,CornerSize.BORDER,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x,y,w,h,CornerSize.BORDER);}}  }
class C{  public static void show(){  CPluginOutputDialog.instance().showDialog();}  }
class C{  public void inputSentence(String text,String userName,String targetUserName,Network network){  Vertex input=createInput(text.trim(),network);  Vertex user=network.createSpeaker(userName);  Vertex self=network.createVertex(Primitive.SELF);  input.addRelationship(Primitive.SPEAKER,user);  input.addRelationship(Primitive.TARGET,self);  user.addRelationship(Primitive.INPUT,input);  Vertex conversation=network.createInstance(Primitive.CONVERSATION);  conversation.addRelationship(Primitive.TYPE,Primitive.DIRECTMESSAGE);  conversation.addRelationship(Primitive.SPEAKER,user);  conversation.addRelationship(Primitive.SPEAKER,self);  Language.addToConversation(input,conversation);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public static void main(String[] args){  Header.printHeader(PopulationUtils.class.toString(),args);  int option=Integer.parseInt(args[0]);switch (option) {case 1:    printHouseholdStatistics(args[1]);  break;case 2:printPopulationStatistics(args[1]);break;case 3:printActivityStatistics(args[1]);break;case 4:printNumberOfEmployedPersons(args[1]);break;case 5:printNumberOfAgentTypes(args[1]);break;case 6:idActivityChainTypes(args[1],args[2]);break;case 7:printNumberOfRideStatistics(args[1]);break;default :LOG.warn("Cannot print any statistics for option `" + option + "'");}Header.printFooter();}  }
class C{  public static boolean isUserTagged(String username){  return Reddit.tags.contains("user-tag" + username.toLowerCase());}  }
class C{  private void writeByteDirect(int n) throws TException {  writeByteDirect((byte)n);}  }
class C{  protected void convertInstance(Instance instance) throws Exception {  Instance cp=(Instance)instance.copy();  cp.setWeight(1.0);  double[] instanceVals=new double[outputFormatPeek().numAttributes()];  double[] vals=m_partitionGenerator.getMembershipValues(cp);  System.arraycopy(vals,0,instanceVals,0,vals.length);  if (instance.classIndex() >= 0) {    instanceVals[instanceVals.length - 1]=instance.classValue();  }  push(new SparseInstance(instance.weight(),instanceVals));}  }
class C{  LocalIdManager(File root){  diskPath=new File(root,"LocalId");  random=new Random();}  }
class C{  public TopHitsBuilder addScriptField(String name,Script script){  sourceBuilder().scriptField(name,script);  return this;}  }
class C{  public boolean isLastLaidOutView(View view){  int recyclerHeight=mCallback.getHeight();  return mQuadrantHelper.isLastLayoutedView(recyclerHeight,view);}  }
class C{  public static String save(String str){  String path;synchronized (SAVE_DELETE_LOCK) {    path=save("looper",str);  }  return path;}  }
class C{  public int size(){  return m.size();}  }
class C{  protected Annotation(){  this(null,false,null);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a, b, c, d, e, f: ");  double a=input.nextDouble();  double b=input.nextDouble();  double c=input.nextDouble();  double d=input.nextDouble();  double e=input.nextDouble();  double f=input.nextDouble();  LinearEquation linearEquation=new LinearEquation(a,b,c,d,e,f);  if (linearEquation.isSolvable()) {    System.out.println("x is " + linearEquation.getX() + " and y is "+ linearEquation.getY());  } else   System.out.println("The equation has no solution.");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociationDefinition_();}  }
class C{  public boolean isEmpty(){  if (root == null)   return true;  return false;}  }
class C{  public AccountHeaderBuilder withCurrentProfileHiddenInList(boolean currentProfileHiddenInList){  mCurrentHiddenInList=currentProfileHiddenInList;  return this;}  }
class C{  public String[] listChildren(){  checkChildren();  String[] outgoing=new String[children.length];  for (int i=0; i < children.length; i++) {    outgoing[i]=children[i].getName();  }  return outgoing;}  }
class C{  private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {  CarbonDictionaryMetadataReaderImpl columnMetadataReaderImpl=new CarbonDictionaryMetadataReaderImpl(this.carbonStorePath,this.carbonTableIdentifier,this.columnIdentifier);  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList=null;  try {    dictionaryMetaChunkList=columnMetadataReaderImpl.read();  }  finally {    columnMetadataReaderImpl.close();  }  return dictionaryMetaChunkList;}  }
class C{  public List<LocalDate> top(int n){  List<LocalDate> top=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalDate.asLocalDate(values[i]));  }  return top;}  }
class C{  public static void closeAllLockers(String[] lockers){  for (int i=0; i < lockers.length; i++) {    lockers[i]="CLOSED";  }}  }
class C{  public VectorPortrayal2D(){  this(SHAPE_LINE_ARROW,null,null,null,null);}  }
class C{  public void doEvict(){  Set<Product> products=getProducts();  evictionDao.setProducts(new HashSet<Product>());  int evicted=0;  if (products != null) {    evicted=products.size();    doEvict(products);  }  if (evicted == 0) {    logger.info("No product Evicted.");  }}  }
class C{  public Matrix4d invertOrtho(){  return invertOrtho(this);}  }
class C{  public NullPointerException(){  super();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  @Override public void remove(Statement st,Resource... contexts) throws RepositoryException {  if (isAllContext(contexts) && st.getContext() == null) {    super.remove(st,getRemoveContexts());  } else {    super.remove(st,contexts);  }}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  int blockSize=cipher.getBlockSize();  int resultLen=0;  if (forEncryption) {    if (bufOff == blockSize) {      if ((outOff + 2 * blockSize) > out.length) {        reset();        throw new OutputLengthException("output buffer too short");      }      resultLen=cipher.processBlock(buf,0,out,outOff);      bufOff=0;    }    padding.addPadding(buf,bufOff);    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    reset();  } else {    if (bufOff == blockSize) {      resultLen=cipher.processBlock(buf,0,buf,0);      bufOff=0;    } else {      reset();      throw new DataLengthException("last block incomplete in decryption");    }    try {      resultLen-=padding.padCount(buf);      System.arraycopy(buf,0,out,outOff,resultLen);    }  finally {      reset();    }  }  return resultLen;}  }
class C{  public static int cigarRefLength(final String cigar){  int refLen=0;  int numStartPos=0;  for (int i=0; i < cigar.length(); i++) {    final char c=cigar.charAt(i);    if (c < '0' || c > '9') {switch (c) {case 'M':case 'D':case 'N':case 'P':case '=':case 'X':        int mult=1;      for (int j=i - 1; j >= numStartPos; j--) {        refLen+=mult * (cigar.charAt(j) - '0');        mult*=10;      }    break;default :  break;}numStartPos=i + 1;}}return refLen;}  }
class C{  public WFG6(int k,int l,int M){  super(k,l,M);}  }
class C{  public static WebElement moveTo(RemoteWebDriver parent,By moveTo,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(moveTo);  WebElement moveToElement=findElementVisibleAfter(parent,moveTo,waitInSeconds);  new Actions(parent).moveToElement(moveToElement).perform();  return moveToElement;}  }
class C{  public kbd addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void unsubscribe(){  if (subscriber != null && !subscriber.isUnsubscribed()) {    subscriber.unsubscribe();  }  subscriber=null;}  }
class C{  private Vset checkCommon(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc,boolean isLHS){  if (id == idClass) {    Type t=right.toType(env,ctx);    if (!t.isType(TC_CLASS) && !t.isType(TC_ARRAY)) {      if (t.isType(TC_ERROR)) {        type=Type.tClassDesc;        return vset;      }      String wrc=null;switch (t.getTypeCode()) {case TC_VOID:        wrc="Void";      break;case TC_BOOLEAN:    wrc="Boolean";  break;case TC_BYTE:wrc="Byte";break;case TC_CHAR:wrc="Character";break;case TC_SHORT:wrc="Short";break;case TC_INT:wrc="Integer";break;case TC_FLOAT:wrc="Float";break;case TC_LONG:wrc="Long";break;case TC_DOUBLE:wrc="Double";break;default :env.error(right.where,"invalid.type.expr");return vset;}Identifier wid=Identifier.lookup(idJavaLang + "." + wrc);Expression wcls=new TypeExpression(where,Type.tClass(wid));implementation=new FieldExpression(where,wcls,idTYPE);vset=implementation.checkValue(env,ctx,vset,exp);type=implementation.type;return vset;}if (t.isVoidArray()) {type=Type.tClassDesc;env.error(right.where,"void.array");return vset;}long fwhere=ctx.field.getWhere();ClassDefinition fcls=ctx.field.getClassDefinition();MemberDefinition lookup=fcls.getClassLiteralLookup(fwhere);String sig=t.getTypeSignature();String className;if (t.isType(TC_CLASS)) {className=sig.substring(1,sig.length() - 1).replace(SIGC_PACKAGE,'.');} else {className=sig.replace(SIGC_PACKAGE,'.');}if (fcls.isInterface()) {implementation=makeClassLiteralInlineRef(env,ctx,lookup,className);} else {ClassDefinition inClass=lookup.getClassDefinition();MemberDefinition cfld=getClassLiteralCache(env,ctx,className,inClass);implementation=makeClassLiteralCacheRef(env,ctx,lookup,cfld,className);}vset=implementation.checkValue(env,ctx,vset,exp);type=implementation.type;return vset;}if (field != null) {implementation=implementFieldAccess(env,ctx,right,isLHS);return (right == null) ? vset : right.checkAmbigName(env,ctx,vset,exp,this);}vset=right.checkAmbigName(env,ctx,vset,exp,this);if (right.type == Type.tPackage) {if (loc == null) {FieldExpression.reportFailedPackagePrefix(env,right);return vset;}Identifier nm=toIdentifier(this);if ((nm != null) && env.classExists(nm)) {loc.right=new TypeExpression(where,Type.tClass(nm));ClassDefinition ctxClass=ctx.field.getClassDefinition();env.resolve(where,ctxClass,loc.right.type);return vset;}type=Type.tPackage;return vset;}ClassDefinition ctxClass=ctx.field.getClassDefinition();boolean staticRef=(right instanceof TypeExpression);try {if (!right.type.isType(TC_CLASS)) {if (right.type.isType(TC_ARRAY) && id.equals(idLength)) {if (!FieldExpression.isTypeAccessible(where,env,right.type,ctxClass)) {ClassDeclaration cdecl=ctxClass.getClassDeclaration();if (staticRef) {env.error(where,"no.type.access",id,right.type.toString(),cdecl);} else {env.error(where,"cant.access.member.type",id,right.type.toString(),cdecl);}}type=Type.tInt;implementation=new LengthExpression(where,right);return vset;}if (!right.type.isType(TC_ERROR)) {env.error(where,"invalid.field.reference",id,right.type);}return vset;}ClassDefinition sourceClass=ctxClass;if (right instanceof FieldExpression) {Identifier id=((FieldExpression)right).id;if (id == idThis) {sourceClass=((FieldExpression)right).clazz;} else if (id == idSuper) {sourceClass=((FieldExpression)right).clazz;superBase=sourceClass;}}clazz=env.getClassDefinition(right.type);if (id == idThis || id == idSuper) {if (!staticRef) {env.error(right.where,"invalid.type.expr");}if (ctx.field.isSynthetic()) throw new CompilerError("synthetic qualified this");implementation=ctx.findOuterLink(env,where,clazz,null,true);vset=implementation.checkValue(env,ctx,vset,exp);if (id == idSuper) {type=clazz.getSuperClass().getType();} else {type=clazz.getType();}return vset;}field=clazz.getVariable(env,id,sourceClass);if (field == null && staticRef && loc != null) {field=clazz.getInnerClass(env,id);if (field != null) {return checkInnerClass(env,ctx,vset,exp,loc);}}if (field == null) {if ((field=clazz.findAnyMethod(env,id)) != null) {env.error(where,"invalid.field",id,field.getClassDeclaration());} else {env.error(where,"no.such.field",id,clazz);}return vset;}if (!FieldExpression.isTypeAccessible(where,env,right.type,sourceClass)) {ClassDeclaration cdecl=sourceClass.getClassDeclaration();if (staticRef) {env.error(where,"no.type.access",id,right.type.toString(),cdecl);} else {env.error(where,"cant.access.member.type",id,right.type.toString(),cdecl);}}type=field.getType();if (!sourceClass.canAccess(env,field)) {env.error(where,"no.field.access",id,clazz,sourceClass.getClassDeclaration());return vset;}if (staticRef && !field.isStatic()) {env.error(where,"no.static.field.access",id,clazz);return vset;} else {implementation=implementFieldAccess(env,ctx,right,isLHS);}if (field.isProtected() && !(right instanceof SuperExpression || (right instanceof FieldExpression && ((FieldExpression)right).id == idSuper)) && !sourceClass.protectedAccess(env,field,right.type)) {env.error(where,"invalid.protected.field.use",field.getName(),field.getClassDeclaration(),right.type);return vset;}if ((!field.isStatic()) && (right.op == THIS) && !vset.testVar(ctx.getThisNumber())) {env.error(where,"access.inst.before.super",id);}if (field.reportDeprecated(env)) {env.error(where,"warn." + "field.is.deprecated",id,field.getClassDefinition());}if (sourceClass == ctxClass) {ClassDefinition declarer=field.getClassDefinition();if (declarer.isPackagePrivate() && !declarer.getName().getQualifier().equals(sourceClass.getName().getQualifier())) {field=MemberDefinition.makeProxyMember(field,clazz,env);}}sourceClass.addDependency(field.getClassDeclaration());} catch (ClassNotFound e) {env.error(where,"class.not.found",e.name,ctx.field);}catch (AmbiguousMember e) {env.error(where,"ambig.field",id,e.field1.getClassDeclaration(),e.field2.getClassDeclaration());}return vset;}  }
class C{  public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));  if (this.oldAPs != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.oldAPs);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.oldAPs=apList;    }  }  if (this.attachmentPoints != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.attachmentPoints);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.attachmentPoints=apList;      return true;    }  }  return false;}  }
class C{  public SwingFormButtonListener(final String normalCaption,final String rolloverCaption,final String downCaption){  if (showMethods) {    System.out.println("SwingFormButtonListener.SwingFormButtonListener(string string string)");  }  int captions=0;  captionChanger=new HashMap<String,String>();  if (rolloverCaption != null && !rolloverCaption.isEmpty()) {    captionChanger.put("rollover",rolloverCaption);    captions++;  }  if (downCaption != null && !downCaption.isEmpty()) {    captionChanger.put("down",downCaption);    captions++;  }  if (normalCaption != null && !normalCaption.isEmpty()) {    captionChanger.put("normal",normalCaption);    captions++;  }  if (captions == 0) {    captionChanger=null;  }}  }
class C{  public void addField(SootField f){  checkLevel(SIGNATURES);  if (f.isDeclared())   throw new RuntimeException("already declared: " + f.getName());  if (declaresField(f.getName()))   throw new RuntimeException("Field already exists : " + f.getName());  fields.add(f);  f.isDeclared=true;  f.declaringClass=this;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void indexAllKids(){}  }
class C{  public static Number sqrt(Number a){  if ((a.doubleValue() < 0.0) && Settings.isProtectedFunctions()) {    return Math.sqrt(Math.abs(a.doubleValue()));  } else {    return Math.sqrt(a.doubleValue());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Entrypoint public static Object unresolvedNewArray(int numElements,int id,int site) throws NoClassDefFoundError, OutOfMemoryError, NegativeArraySizeException {  TypeReference tRef=TypeReference.getTypeRef(id);  RVMType t=tRef.peekType();  if (t == null) {    t=tRef.resolve();  }  RVMArray array=t.asArray();  if (!array.isInitialized()) {    array.resolve();    array.instantiate();  }  return resolvedNewArray(numElements,array,site);}  }
class C{  public void addArea(PMElement ha){  gr.addElement(ha);}  }
class C{  private void createGroupCellData(Vector<PlotDimension> dimensionList,int dimensionIdx,DataTable data,GroupCellKey groupCellKey){  if (data == null) {    return;  }  PlotDimension dimension=null;  if (dimensionIdx < dimensionList.size()) {    dimension=dimensionList.get(dimensionIdx);  }  DefaultDimensionConfig dimensionConfig;  if (dimension == PlotDimension.DOMAIN) {    dimensionConfig=valueSource.getDomainConfig();  } else {    dimensionConfig=(DefaultDimensionConfig)plotInstance.getCurrentPlotConfigurationClone().getDimensionConfig(dimension);  }  DimensionConfigData dimensionConfigData=plotInstance.getPlotData().getDimensionConfigData(dimensionConfig);  if (!dimensionConfig.isValid() || dimensionConfigData.getColumnIdx() < 0) {    ConfigurationChangeResponse response=new ConfigurationChangeResponse();    response.addError(new PlotConfigurationError("undefined_dimension",dimensionConfig.getDimension().getName()));    plotInstance.getMasterOfDesaster().registerConfigurationChangeResponse(response);    return;  }  if (groupCellKey == null) {    groupCellKey=new GroupCellKey();  }  int nextIdx=dimensionIdx + 1;  List<ValueRange> allValueGroups=null;  allValueGroups=dimensionConfigData.getGroupingModel();  if (allValueGroups == null) {    if (dimensionIdx < dimensionList.size() - 1) {      createGroupCellData(dimensionList,nextIdx,data,groupCellKey);    } else     if (data != null) {      cachedGroupCellToDataTableMap.put((GroupCellKey)groupCellKey.clone(),data);    }  } else {    Vector<ValueRange> valueGroupsForFiltering;    if (dimension == PlotDimension.DOMAIN) {      valueGroupsForFiltering=new Vector<ValueRange>(valueSource.getAggregationWindowing().applyOnGrouping(allValueGroups));    } else {      valueGroupsForFiltering=new Vector<ValueRange>(allValueGroups);    }    int idx=0;    for (    ValueRange group : allValueGroups) {      groupCellKey.setRangeForDimension(dimension,group);      FilteredDataTable dataFilteredToValueGroupRange=new FilteredDataTable(data);      ValueRange condition=valueGroupsForFiltering.get(idx);      if (condition != null) {        dataFilteredToValueGroupRange.addCondition(condition);      } else {        dataFilteredToValueGroupRange=null;      }      if (dimensionIdx < dimensionList.size() - 1) {        createGroupCellData(dimensionList,nextIdx,dataFilteredToValueGroupRange,groupCellKey);      } else {        cachedGroupCellToDataTableMap.put((GroupCellKey)groupCellKey.clone(),dataFilteredToValueGroupRange);      }      ++idx;    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public HashtableKeyValueEditor(EditableResources res,String keyString,Object value){  initComponents();  this.res=res;  ResourceEditorView.initImagesComboBox(imageValue,res,true,false);  String[] arr=new String[res.getUIResourceNames().length];  System.arraycopy(res.getUIResourceNames(),0,arr,0,arr.length);  Arrays.sort(arr);  navigationCombo.setModel(new DefaultComboBoxModel(arr));  if (keyString != null) {    key.setText(keyString);    if (value instanceof String) {      if (keyString.equals("$navigation")) {        isNavigation.setSelected(true);        stringValue.setEnabled(false);        key.setEnabled(false);        navigationCombo.setEnabled(true);        navigationCombo.setSelectedItem(value);      }      if (value.equals("true") || value.equals("false")) {        booleanValue.setSelected(true);        booleanValue.setEnabled(true);        isBoolean.setSelected(true);        stringValue.setEnabled(false);      } else {        stringValue.setText((String)value);      }      return;    }    if (value instanceof com.codename1.ui.Image) {      isImage.setSelected(true);      imageValue.setSelectedItem(res.findId(value));      stringValue.setEnabled(false);      imageValue.setEnabled(true);      return;    }  }}  }
class C{  public SyncRequestMessage(SyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetKeys()) {    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();    for (    ByteBuffer other_element : other.keys) {      ByteBuffer temp_binary_element=org.apache.thrift.TBaseHelper.copyBinary(other_element);      ;      __this__keys.add(temp_binary_element);    }    this.keys=__this__keys;  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public void generate(XmlWriter w) throws IOException {  XmlNamespace openSearchDescNs=Namespaces.getOpenSearchDescNs();  w.startElement(openSearchDescNs,"OpenSearchDescription",null,null);  if (url != null) {    w.simpleElement(openSearchDescNs,"Url",null,url);  }  if (format != null) {    w.simpleElement(openSearchDescNs,"Format",null,format);  }  if (shortName != null) {    w.simpleElement(openSearchDescNs,"ShortName",null,shortName);  }  if (longName != null) {    w.simpleElement(openSearchDescNs,"LongName",null,longName);  }  if (description != null) {    w.simpleElement(openSearchDescNs,"Description",null,description);  }  if (tags != null) {    w.simpleElement(openSearchDescNs,"Tags",null,tags);  }  if (image != null) {    w.simpleElement(openSearchDescNs,"Image",null,image);  }  if (sampleSearch != null) {    w.simpleElement(openSearchDescNs,"SampleSearch",null,sampleSearch);  }  if (developer != null) {    w.simpleElement(openSearchDescNs,"Developer",null,developer);  }  if (contact != null) {    w.simpleElement(openSearchDescNs,"Contact",null,contact);  }  if (attribution != null) {    w.simpleElement(openSearchDescNs,"Attribution",null,attribution);  }  String syndicationRightString;switch (syndicationRight) {case SyndicationRight.OPEN:default :    syndicationRightString="open";  break;case SyndicationRight.LIMITED:syndicationRightString="limited";break;case SyndicationRight.PRIVATE:syndicationRightString="private";break;case SyndicationRight.CLOSED:syndicationRightString="closed";break;}w.simpleElement(openSearchDescNs,"SyndicationRight",null,syndicationRightString);if (adultContent) {w.simpleElement(openSearchDescNs,"AdultContent",null,"true");}w.endElement(openSearchDescNs,"OpenSearchDescription");}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public void logSamples(OutputFormatter formatter,int headerRate,int sampleInterval,int sampleCount,PrintStream out) throws MonitorException {  long iterationCount=0;  int printHeaderCount=0;  int printHeader=headerRate;  if (printHeader == 0) {    out.println(formatter.getHeader());    printHeader=-1;  }  while (active) {    if (printHeader > 0 && --printHeaderCount <= 0) {      printHeaderCount=printHeader;      out.println(formatter.getHeader());    }    out.println(formatter.getRow());    if (sampleCount > 0 && ++iterationCount >= sampleCount) {      break;    }    try {      Thread.sleep(sampleInterval);    } catch (    Exception e) {    }    ;  }}  }
class C{  @Override public void PV(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PV()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PVdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PV);    currentPdfFile.checkResolved(PVdictionary);    if (PVdictionary != null) {      final String jsCode=PVdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileChainCleanerjava.class.toString(),args);  String processedFolder=args[0];  int numberOfThreads=Integer.parseInt(args[1]);  List<File> inputFiles=GrainUtils.getMonthlyOutputFolders(processedFolder);  for (  File month : inputFiles) {    LOG.info("====> Processing month " + month.getAbsolutePath());    String thisXmlFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/") + "20_20/xml2/";    String[] sa={thisXmlFolder,String.valueOf(numberOfThreads)};    DigicoreChainCleaner.main(sa);    LOG.info("====> Done processing month.");  }  Header.printFooter();}  }
class C{  public void send(String subject,String body){  try {    MimeMessage msg=new MimeMessage(getSession());    if (_from.length > 0)     msg.addFrom(_from);    msg.addRecipients(RecipientType.TO,_to);    if (subject != null)     msg.setSubject(subject);    msg.setContent(body,"text/plain");    send(msg);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Deprecated public String readPasswordFromMail() throws MessagingException {  return readInformationFromMail(MAIL_SUBJECT_USER_ACCOUNT_CREATED_EN,MAIL_BODY_PASSWORD_PATTERN_EN);}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public void valueChanged(ListSelectionEvent evt){  boolean lastTokIsOperation;  int tokSize=filterToks.size();  lastTokIsOperation=((tokSize == 0) || (filterToks.elementAt(tokSize - 1) instanceof OperationFT));  if (evt.getSource().equals(tblWeapons.getSelectionModel())) {    if ((tblWeapons.getSelectedRow() >= 0) && lastTokIsOperation) {      tblEquipment.clearSelection();      btnAdd.setEnabled(true);    } else     if (tblWeapons.getSelectedRow() >= 0) {      tblEquipment.clearSelection();    }  } else   if (evt.getSource().equals(tblEquipment.getSelectionModel())) {    if ((tblEquipment.getSelectedRow() >= 0) && lastTokIsOperation) {      tblWeapons.clearSelection();      btnAdd.setEnabled(true);    } else     if (tblEquipment.getSelectedRow() >= 0) {      tblWeapons.clearSelection();    }  }}  }
class C{  public TcpEchoServer(boolean idle){  try {    this.idle=idle;    setServer(new ServerSocket(port));  } catch (  Exception ex) {    System.err.println("Could not listen on port: " + port + " "+ PcStringUtils.printStackTrace(ex));  }}  }
class C{  public void addRolePricingDataForPricedParameterKey(Long paramKey,RolePricingData dataToSet){  parameterOptionCosts.put(paramKey,dataToSet);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.835 -0500",hash_original_method="63DFD446B1AADA69AC0B8E51A8B5B261",hash_generated_method="D877C7116F720B085DA5A516A1965C66") public boolean after(Time that){  return Time.compare(this,that) > 0;}  }
class C{  private String normalize(String identifier){  if (null == identifier)   return identifier;  Matcher matcher=WORD_SEP_PATTERN.matcher(identifier.toLowerCase(Locale.ENGLISH));  return matcher.replaceAll("").replace(':','=');}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.862 -0500",hash_original_method="2B91B7FBA2B0FAF5EF0FAB9CE5B285D1",hash_generated_method="0493EC789F1A82BF13E272C6288FC0E7") private void checkPixelsAccess(int x,int y,int width,int height,int offset,int stride,int pixels[]){  checkXYSign(x,y);  if (width < 0) {    throw new IllegalArgumentException("width must be >= 0");  }  if (height < 0) {    throw new IllegalArgumentException("height must be >= 0");  }  if (x + width > getWidth()) {    throw new IllegalArgumentException("x + width must be <= bitmap.width()");  }  if (y + height > getHeight()) {    throw new IllegalArgumentException("y + height must be <= bitmap.height()");  }  if (Math.abs(stride) < width) {    throw new IllegalArgumentException("abs(stride) must be >= width");  }  int lastScanline=offset + (height - 1) * stride;  int length=pixels.length;  if (offset < 0 || (offset + width > length) || lastScanline < 0 || (lastScanline + width > length)) {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  static void schemaUpdated(Configuration conf){  conf.setInt(SCHEMA_UPDATE_PROP,getCurrentIteration(conf));}  }
class C{  public boolean created(URI storageSystemUri,String replicationGroupName){  if (storageSystemUri != null && systemConsistencyGroups != null && !systemConsistencyGroups.isEmpty()) {    StringSet cgNames=systemConsistencyGroups.get(storageSystemUri.toString());    if (cgNames != null && !cgNames.isEmpty()) {      if (replicationGroupName != null && !replicationGroupName.isEmpty()) {        if (cgNames.contains(replicationGroupName)) {          return true;        } else {          return false;        }      } else {        return true;      }    }  }  return false;}  }
class C{  @Experimental public boolean hasThrowable(){  Object o=state.get();  return nl.isError(o);}  }
class C{  protected ASTRequestor(){}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static FeaturesConfig fromXml(final InputStream toConvert) throws JAXBException {  Unmarshaller stringUnmarshaller=getUnmarshaller();  return (FeaturesConfig)stringUnmarshaller.unmarshal(toConvert);}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mSignalStrength);  dest.writeInt(mRsrp);  dest.writeInt(mRsrq);  dest.writeInt(mRssnr);  dest.writeInt(mCqi);  dest.writeInt(mTimingAdvance);}  }
class C{  public boolean isLeaf(){  return right == null && left == null;}  }
class C{  public static ClientId create(String xRoadInstance,String memberClass,String memberCode,String subsystemCode){  validateField("xRoadInstance",xRoadInstance);  validateField("memberClass",memberClass);  validateField("memberCode",memberCode);  validateOptionalField("subsystemCode",subsystemCode);  return new ClientId(xRoadInstance,memberClass,memberCode,subsystemCode);}  }
class C{  public void checkConnection(){  List<Fragment> fragments=getFragmentManager().getFragments();  onAttachFragment(fragments.get(0) != null ? fragments.get(0) : fragments.get(1));  mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    addDebugText("Connection OK");    listener.onConnectionOk();  } else {    listener.onConnectionFailed();    setErrorMessage(getString(R.string.error_notConnected));  }  ;}  }
