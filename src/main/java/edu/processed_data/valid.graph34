class C{  public int size(){  return m_firstFree;}  }
class C{  public boolean replayOperation(PreOperationModifyOperation modifyOperation,Entry modifiedEntry){  boolean bConflict=false;  List<Modification> mods=modifyOperation.getModifications();  CSN modOpCSN=OperationContext.getCSN(modifyOperation);  for (Iterator<Modification> it=mods.iterator(); it.hasNext(); ) {    Modification m=it.next();    AttrHistorical attrHist=getOrCreateAttrHistorical(m);    if (attrHist.replayOperation(it,modOpCSN,modifiedEntry,m)) {      bConflict=true;    }  }  return bConflict;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodetype.class,args);}  }
class C{  private void buildMonitorEnter(MethodVisitor methodVisitor,CodeInfo info,Ins.MonitorEnter monitorEnter){  buildValueAccess(methodVisitor,info,monitorEnter.valueToMonitor(),true);  methodVisitor.visitInsn(Opcodes.DUP);  info.push(CodeInfo.Size._1);  methodVisitor.visitVarInsn(Opcodes.ASTORE,monitorEnter.storeIndex());  info.pop(1);  methodVisitor.visitInsn(Opcodes.MONITORENTER);  info.pop(1);}  }
class C{  public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void delete(SSOToken token,String dn) throws SMSException, SSOException {  for (  String entry : subEntries(token,dn,"*",0,false,false)) {    debug.message("SMSLdapObject: deleting sub-entry: {}",entry);    delete(token,getNamingAttribute() + "=" + entry+ ","+ dn);  }  for (  String subOrg : searchSubOrgNames(token,dn,"*",0,false,false,false)) {    debug.message("SMSLdapObject: deleting suborganization: {}",subOrg);    delete(token,subOrg);  }  delete(token.getPrincipal(),dn);  objectChanged(dn,DELETE);}  }
class C{  private void append(StringBuffer result,CharacterIterator iterator){  if (iterator.first() != CharacterIterator.DONE) {    char aChar;    result.append(iterator.first());    while ((aChar=iterator.next()) != CharacterIterator.DONE) {      result.append(aChar);    }  }}  }
class C{  public static NamePath dotted(String... pieces){  return parse("\\.",pieces);}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.XACMLAuthzDecisionQueryConfigElement createXACMLAuthzDecisionQueryConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.XACMLAuthzDecisionQueryConfigElementImpl();}  }
class C{  public AMConsoleException(Throwable t){  this(t.getMessage(),t);}  }
class C{  public DocumentType createDocumentType(String qualifiedName,String publicId,String systemId) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not Implemented");}  }
class C{  private static Map<String,MappedClass> generateClassMapping(ClassNode node,Map<String,ClassNode> nodes,Map<String,MappedClass> mappings){  boolean hasParents=!node.name.equals("java/lang/Object");  boolean hasInterfaces=node.interfaces.size() > 0;  if (hasParents) {    boolean parentRenamed=mappings.containsKey(node.superName);    ClassNode parentNode=nodes.get(node.superName);    if (parentNode != null && !parentRenamed) {      boolean conflict=ParentUtils.isLoop(node,nodes,0);      if (conflict) {        parentNode.superName="java/lang/Object";      } else {        generateClassMapping(parentNode,nodes,mappings);      }    }  }  if (hasInterfaces) {    for (    String interfaze : node.interfaces) {      boolean interfaceRenamed=mappings.containsKey(interfaze);      ClassNode interfaceNode=nodes.get(interfaze);      if (interfaceNode != null && !interfaceRenamed) {        generateClassMapping(interfaceNode,nodes,mappings);      }    }  }  if (!mappings.containsKey(node.name)) {    MappedClass mappedClass=new MappedClass(node,node.name);    for (    FieldNode fn : node.fields) {      mappedClass.addField(new MappedMember(mappedClass,fn,mappedClass.getFields().size(),fn.desc,fn.name));    }    for (    MethodNode mn : node.methods) {      mappedClass.addMethod(new MappedMember(mappedClass,mn,mappedClass.getMethods().size(),mn.desc,mn.name));    }    mappings.put(node.name,mappedClass);  }  return mappings;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.DisplayNameType createDisplayNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.DisplayNameTypeImpl();}  }
class C{  void processServerHelloDone(){  PrivateKey clientKey=null;  if (serverCert != null) {    if (session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }    verifyServerCert();  } else {    if (!session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }  }  if (certificateRequest != null) {    X509Certificate[] certs=null;    String alias=null;    String[] certTypes=certificateRequest.getTypesAsString();    X500Principal[] issuers=certificateRequest.certificate_authorities;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseClientAlias(certTypes,issuers,this.socketOwner);      } else {        alias=ekm.chooseEngineClientAlias(certTypes,issuers,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseClientAlias(certTypes,issuers,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    session.localCertificates=certs;    clientCert=new CertificateMessage(certs);    clientKey=km.getPrivateKey(alias);    send(clientCert);  }  if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    Cipher c;    try {      c=Cipher.getInstance("RSA/ECB/PKCS1Padding");      if (serverKeyExchange != null) {        if (!session.cipherSuite.isAnonymous()) {          DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());          ds.init(serverCert.certs[0]);          ds.update(clientHello.getRandom());          ds.update(serverHello.getRandom());          if (!serverKeyExchange.verifySignature(ds)) {            fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify RSA params");            return;          }        }        c.init(Cipher.WRAP_MODE,serverKeyExchange.getRSAPublicKey());      } else {        c.init(Cipher.WRAP_MODE,serverCert.certs[0]);      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }    preMasterSecret=new byte[48];    parameters.getSecureRandom().nextBytes(preMasterSecret);    System.arraycopy(clientHello.client_version,0,preMasterSecret,0,2);    try {      clientKeyExchange=new ClientKeyExchange(c.wrap(new SecretKeySpec(preMasterSecret,"preMasterSecret")),serverHello.server_version[1] == 1);    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else   if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {    if (serverKeyExchange == null) {      fatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,"Expected ServerKeyExchange");      return;    }    if (session.cipherSuite.isAnonymous() != serverKeyExchange.isAnonymous()) {      fatalAlert(AlertProtocol.DECRYPT_ERROR,"Wrong type in ServerKeyExchange");      return;    }    try {      if (!session.cipherSuite.isAnonymous()) {        DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());        ds.init(serverCert.certs[0]);        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (!serverKeyExchange.verifySignature(ds)) {          fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify DH params");          return;        }      }      KeyFactory kf=KeyFactory.getInstance("DH");      KeyAgreement agreement=KeyAgreement.getInstance("DH");      KeyPairGenerator kpg=KeyPairGenerator.getInstance("DH");      PublicKey serverDhPublic=kf.generatePublic(new DHPublicKeySpec(serverKeyExchange.par3,serverKeyExchange.par1,serverKeyExchange.par2));      DHParameterSpec spec=new DHParameterSpec(serverKeyExchange.par1,serverKeyExchange.par2);      kpg.initialize(spec);      KeyPair kp=kpg.generateKeyPair();      DHPublicKey pubDhKey=(DHPublicKey)kp.getPublic();      clientKeyExchange=new ClientKeyExchange(pubDhKey.getY());      PrivateKey privDhKey=kp.getPrivate();      agreement.init(privDhKey);      agreement.doPhase(serverDhPublic,true);      preMasterSecret=agreement.generateSecret();    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else {    fatalAlert(AlertProtocol.DECRYPT_ERROR,"Unsupported handshake type");    return;  }  if (clientKeyExchange != null) {    send(clientKeyExchange);  }  computerMasterSecret();  if (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty()) {    String authType=clientKey.getAlgorithm();    DigitalSignature ds=new DigitalSignature(authType);    ds.init(clientKey);    if ("RSA".equals(authType)) {      ds.setMD5(io_stream.getDigestMD5());      ds.setSHA(io_stream.getDigestSHA());    } else     if ("DSA".equals(authType)) {      ds.setSHA(io_stream.getDigestSHA());    }    certificateVerify=new CertificateVerify(ds.sign());    send(certificateVerify);  }  sendChangeCipherSpec();}  }
class C{  public LDAPControl(String oid){  super(oid,false);}  }
class C{  public static boolean saveAttributes(final String filepath,Bundle bundle){  ExifInterface exif;  try {    exif=new ExifInterface(filepath);  } catch (  IOException e) {    e.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    if (bundle.containsKey(tag)) {      exif.setAttribute(tag,bundle.getString(tag));    }  }  try {    exif.saveAttributes();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public int createTextureObject(){  return mProgram.createTextureObject();}  }
class C{  @ConstructorProperties({"target","axis"}) public BoxLayout(Container target,int axis){  if (axis != X_AXIS && axis != Y_AXIS && axis != LINE_AXIS && axis != PAGE_AXIS) {    throw new AWTError("Invalid axis");  }  this.axis=axis;  this.target=target;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  AccessibleContext ac=getCurrentAccessibleContext();  if (ac != null) {    ac.removePropertyChangeListener(l);  } else {    super.removePropertyChangeListener(l);  }}  }
class C{  public WSAuthNServicesModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  private DN retrieveParentDNForAdd(final DN entryDN) throws DirectoryException {  final DN parentDN=entryDN.parent();  if (parentDN == null) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_ADD_NO_PARENT_DN.get(entryDN));  }  if (!backend.contains(parentDN)) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_ADD_NO_PARENT.get(entryDN,parentDN),getMatchedDN(parentDN),null);  }  return parentDN;}  }
class C{  public void addReferralPrivilege(ReferralPrivilege referralPrivilege){  referralPrivileges.add(referralPrivilege);}  }
class C{  protected URISyntax(URI uri){  this.uri=verify(uri);}  }
class C{  public SocketException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  protected void preDestroy(Object instance,final Class<?> clazz) throws IllegalAccessException, InvocationTargetException {  Class<?> superClass=clazz.getSuperclass();  if (superClass != Object.class) {    preDestroy(instance,superClass);  }  AnnotationCacheEntry[] annotations=null;synchronized (annotationCache) {    annotations=annotationCache.get(clazz);  }  if (annotations == null) {    return;  }  for (  AnnotationCacheEntry entry : annotations) {    if (entry.getType() == AnnotationCacheEntryType.PRE_DESTROY) {      Method preDestroy=getMethod(clazz,entry);synchronized (preDestroy) {        boolean accessibility=preDestroy.isAccessible();        preDestroy.setAccessible(true);        preDestroy.invoke(instance);        preDestroy.setAccessible(accessibility);      }    }  }}  }
class C{  public void logSdkEvent(String eventName,Double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,true);}  }
class C{  Script reparse(String className,String text) throws CompilationFailedException {  return super.parse(new GroovyCodeSource(text,className,DEFAULT_CODE_BASE));}  }
class C{  public boolean signAssertion(){  return signAssertion;}  }
class C{  protected LdapException(final Result result){  super(getMessage(result),result.getCause());  this.result=result;}  }
class C{  private HijrahDate(HijrahChronology chrono,long epochDay){  int[] dateInfo=chrono.getHijrahDateInfo((int)epochDay);  this.chrono=chrono;  this.prolepticYear=dateInfo[0];  this.monthOfYear=dateInfo[1];  this.dayOfMonth=dateInfo[2];}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String[] params={siteName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_SITE_MEMBERS",params);  IOutput outputWriter=getOutputWriter();  try {    Set members=SiteConfiguration.listServers(adminSSOToken,siteName);    if ((members != null) && !members.isEmpty()) {      for (Iterator i=members.iterator(); i.hasNext(); ) {        outputWriter.printlnMessage((String)i.next());      }    } else {      outputWriter.printlnMessage(getResourceString("show-site-members-no-members"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_SITE_MEMBERS",params);  } catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("ShowSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("ShowSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("ShowSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static Cookie newCookie(String name,String value){  return newCookie(name,value,defAge,null,null);}  }
class C{  private boolean checkForValidIntegerKeyInValue(Set<String> values){  boolean valid=true;  HashSet<String> keySet=new HashSet<>();  int indexNumber=-1;  if (!CollectionUtils.isEmpty(values)) {    for (    String val : values) {      if (!valid) {        break;      }      if (val.length() > 0) {        int startIndex=val.indexOf("[");        int endIndex=val.indexOf("]");        val=val.substring(startIndex + 1,endIndex).trim();        try {          indexNumber=Integer.parseInt(val);        } catch (        NumberFormatException nfe) {          valid=false;        }        if (indexNumber < 0) {          valid=false;        }        if (!keySet.add(val)) {          valid=false;        }      }    }  }  return valid;}  }
class C{  @Override public void removeByUuid(String uuid){  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  public void test_wrap_03() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10).asReadOnlyBuffer();  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,0,bbA.length,bb);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }}  }
class C{  public Compiler(ErrorListener errorHandler,SourceLocator locator,FunctionTable fTable){  m_errorHandler=errorHandler;  m_locator=locator;  m_functionTable=fTable;}  }
class C{  public static boolean isLink(String input){  String regex="[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/=]*)";  if (input.contains("/") && input.contains(".") && input.matches(regex)) {    return true;  }  String[] lookFor=new String[]{"http://","https://","www.",".","ftp:",".net",".gov",".com",".org",".php",".tk","www",".io",".xyz",".cf","upload"};  int i=0;  for (  String lf : lookFor) {    if (input.toLowerCase().contains(lf.toLowerCase())) {      i++;      if (i > 2) {        return true;      }    }  }  return false;}  }
class C{  private static Set removeDuplicateResourceNames(Set resourceNames,ServiceType serviceType){  Set answer=resourceNames;  if ((resourceNames != null) && (serviceType != null)) {    answer=new HashSet(resourceNames.size());    Iterator iter=resourceNames.iterator();    while (iter.hasNext()) {      String resourceName=(String)iter.next();      Iterator answerIter=answer.iterator();      boolean duplicate=false;      while (answerIter.hasNext()) {        String answerResourceName=(String)answerIter.next();        if (serviceType.compare(resourceName,answerResourceName,false).equals(ResourceMatch.EXACT_MATCH)) {          duplicate=true;          break;        }      }      if (!duplicate) {        answer.add(resourceName);      }    }  }  return answer;}  }
class C{  protected final void closeSessionAndClearTokenInformation(){  if (sessionTracker != null) {    Session currentSession=sessionTracker.getOpenSession();    if (currentSession != null) {      currentSession.closeAndClearTokenInformation();    }  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (entityResolver != null) {    return entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","notification");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"notification\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (clone.getFieldValue("severity") == null) {    clone.setField("severity","6");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor severity field to 6");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"notification".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"notification\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  public JTree(Hashtable<?,?> value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  public LiteralElementAttributes(){}  }
class C{  public ConditionDecision evaluate(String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  Set<EntitlementCondition> conditions=getEConditions();  if (CollectionUtils.isEmpty(conditions)) {    return ConditionDecision.newSuccessBuilder().build();  }  Map<String,Set<String>> advice=new HashMap<>();  Map<String,Set<String>> responseAttributes=new HashMap<>();  long ttl=Long.MAX_VALUE;  for (  EntitlementCondition condition : conditions) {    ConditionDecision decision=condition.evaluate(realm,subject,resourceName,environment);    advice.putAll(decision.getAdvice());    responseAttributes.putAll(decision.getResponseAttributes());    if (decision.getTimeToLive() < ttl) {      ttl=decision.getTimeToLive();    }    if (!decision.isSatisfied()) {      return ConditionDecision.newFailureBuilder().setAdvice(advice).setResponseAttributes(responseAttributes).build();    }  }  return ConditionDecision.newSuccessBuilder().setResponseAttributes(responseAttributes).setTimeToLive(ttl).build();}  }
class C{  private boolean matchValuePattern(List<ByteString> pattern,AVA ava){  if (pattern == null) {    return true;  }  final AttributeType type=ava.getAttributeType();  ByteString value=ava.getAttributeValue();  try {    if (pattern.size() == 1) {      MatchingRule rule=type.getEqualityMatchingRule();      ByteString thatNormValue=rule.normalizeAttributeValue(value);      return rule.getAssertion(pattern.get(0)).matches(thatNormValue).toBoolean();    }    ByteString subInitial=pattern.get(0);    if (subInitial.length() == 0) {      subInitial=null;    }    ByteString subFinal=pattern.get(pattern.size() - 1);    if (subFinal.length() == 0) {      subFinal=null;    }    List<ByteString> subAnyElements;    if (pattern.size() > 2) {      subAnyElements=pattern.subList(1,pattern.size() - 1);    } else {      subAnyElements=null;    }    Attribute attr=Attributes.create(type,value);    return attr.matchesSubstring(subInitial,subAnyElements,subFinal).toBoolean();  } catch (  DecodeException e) {    logger.traceException(e);    return false;  }}  }
class C{  private List<String> parseProp(String prop){  String[] items=new String[0];  if (prop != null) {    items=prop.split(",\\s*");  }  return Arrays.asList(items);}  }
class C{  public void pause(){  setPaused(true);}  }
class C{  public INITIALIZE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  CodeStream put11(final int b1,final int b2){  ensureCapacity(2);  _data[_length++]=(byte)(b1 & 0xFF);  _data[_length++]=(byte)(b2 & 0xFF);  return this;}  }
class C{  public void removeUser(User user) throws AccessRightsException, UMSException {  super.removeChild(user);}  }
class C{  @Override public void accept(double value){  ++count;  simpleSum+=value;  sumWithCompensation(value);  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  public static Object deserializeToObject(String encObj) throws IOException, ClassNotFoundException {  Object obj=null;  if (encObj != null && encObj.length() > 0) {    obj=IOUtils.deserialise(Base64.decode(encObj),false);  }  return obj;}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  String name=request.getParameter("name");  response.setContentType("text/html; charset=" + Constants.CHARSET);  String message="";  if (command == null) {  } else   if (command.equals("/add")) {    message=add(request,name,smClient);  } else   if (command.equals("/remove")) {    message=remove(name,smClient);  } else   if (command.equals("/start")) {    message=start(name,smClient);  } else   if (command.equals("/stop")) {    message=stop(name,smClient);  } else   if (command.equals("/persist")) {    message=persist(smClient);  } else {    doGet(request,response);  }  list(request,response,message,smClient);}  }
class C{  protected void installNonRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    if (component instanceof JComponent) {      ((JComponent)component).updateUI();      setBorderToNonRollover(component);    }  }}  }
class C{  public static GenericExtendedRequest unmodifiableGenericExtendedRequest(final GenericExtendedRequest request){  if (request instanceof UnmodifiableGenericExtendedRequestImpl) {    return request;  }  return new UnmodifiableGenericExtendedRequestImpl(request);}  }
class C{  public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean deleteOldRDN(){  return deleteOldRDN;}  }
class C{  protected String arrayTypeName(Field field){  return arrayTypeName(elementTypeName(field));}  }
class C{  public boolean isMaximum(){  return isMaximum;}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public LDIFImportConfig(InputStream ldifInputStream){  this(Collections.<String>emptyList());  this.ldifInputStream=ldifInputStream;}  }
class C{  public MazeSearch(ArtEngine p_art_engine,ArtControl p_ctrl,Set<BrdItem> p_start_items,Set<BrdItem> p_destination_items){  art_engine=p_art_engine;  r_board=art_engine.r_board;  art_ctrl=p_ctrl;  random_generator.setSeed(p_ctrl.ripup_costs);  search_tree=p_art_engine.art_search_tree;  destination_distance=new ExpandDestinationDistance(art_ctrl.trace_costs,art_ctrl.layer_active,art_ctrl.min_normal_via_cost,art_ctrl.min_cheap_via_cost);  maze_shove_trace=new MazeShoveTraceAlgo(r_board,art_ctrl);  is_initialized=false;  reduce_trace_shapes_at_tie_pins(p_start_items,art_ctrl.net_no,search_tree);  reduce_trace_shapes_at_tie_pins(p_destination_items,art_ctrl.net_no,search_tree);  for (  BrdItem curr_item : p_destination_items) {    ArtItem curr_info=curr_item.art_item_get();    curr_info.set_start_info(false);    int tree_shape_count=curr_item.tree_shape_count(search_tree);    for (int index=0; index < tree_shape_count; ++index) {      ShapeTile curr_tree_shape=curr_item.get_tree_shape(search_tree,index);      if (curr_tree_shape == null)       continue;      destination_distance.join(curr_tree_shape.bounding_box(),curr_item.shape_layer(index));    }  }  if (art_ctrl.is_fanout) {    ShapeTileBox board_bounding_box=r_board.bounding_box;    destination_distance.join(board_bounding_box,0);    destination_distance.join(board_bounding_box,art_ctrl.layer_count - 1);  }  LinkedList<ExpandRoomFreespaceIncomplete> start_rooms=new LinkedList<ExpandRoomFreespaceIncomplete>();  for (  BrdItem curr_item : p_start_items) {    ArtItem curr_info=curr_item.art_item_get();    curr_info.set_start_info(true);    if (!(curr_item instanceof BrdConnectable))     continue;    BrdConnectable a_conn=(BrdConnectable)curr_item;    int tree_shape_count=curr_item.tree_shape_count(search_tree);    for (int index=0; index < tree_shape_count; ++index) {      ShapeTile contained_shape=a_conn.get_trace_connection_shape(search_tree,index);      ExpandRoomFreespaceIncomplete new_start_room=art_engine.add_incomplete_expansion_room(null,curr_item.shape_layer(index),contained_shape);      start_rooms.add(new_start_room);    }  }  LinkedList<ExpandRoomFreespaceComplete> completed_start_rooms=new LinkedList<ExpandRoomFreespaceComplete>();  for (  ExpandRoomFreespaceIncomplete curr_room : start_rooms) {    Collection<ExpandRoomFreespaceComplete> curr_completed_rooms=art_engine.complete_expansion_room(curr_room);    completed_start_rooms.addAll(curr_completed_rooms);  }  for (  ExpandRoomFreespaceComplete curr_room : completed_start_rooms) {    for (    ExpandDoorItem curr_door : curr_room.get_target_doors()) {      if (curr_door.is_destination_door())       continue;      ShapeTile connection_shape=((BrdConnectable)curr_door.item).get_trace_connection_shape(search_tree,curr_door.tree_entry_no);      connection_shape=connection_shape.intersection(curr_door.room.get_shape());      PlaPointFloat curr_center=connection_shape.centre_of_gravity();      PlaSegmentFloat shape_entry=new PlaSegmentFloat(curr_center,curr_center);      double sorting_value=destination_distance.calculate(curr_center,curr_room.get_layer());      MazeListElement new_list_element=new MazeListElement(curr_door,0,null,0,0,sorting_value,curr_room,shape_entry,false,MazeAdjustment.NONE,false);      maze_expansion_list.add(new_list_element);      is_initialized=true;    }  }}  }
class C{  public static String addTrackerToZip(ZipOutputStream zip,AbstractTracker tracker,Bitmap icon,int pos,Context context) throws Exception {  addImage(zip,icon,pos + ".png");  if (tracker == null) {    return "";  }  if (tracker instanceof SimpleShortcut) {    SimpleShortcut shrt=(SimpleShortcut)tracker;    Intent intent=shrt.getIntent();    if (FolderUtils.ACTION.equals(intent.getAction())) {      addDbToZip(intent.getData().getQuery(),zip,context,pos);    }    return "\n" + intent.toUri(Intent.URI_INTENT_SCHEME) + "\n"+ shrt.getLabel(null);  } else   if (tracker instanceof PluginTracker) {    PluginTracker plugin=(PluginTracker)tracker;    return "\n" + plugin.getIntent().toUri(Intent.URI_INTENT_SCHEME) + "\n"+ plugin.getLabel(null);  }  return "";}  }
class C{  public void addHeader(String name,String value){  if ((name == null) || name.equals(""))   throw new IllegalArgumentException("Illegal MimeHeader name");  int pos=headers.size();  for (int i=pos - 1; i >= 0; i--) {    MimeHeader hdr=(MimeHeader)headers.elementAt(i);    if (hdr.getName().equalsIgnoreCase(name)) {      headers.insertElementAt(new MimeHeader(name,value),i + 1);      return;    }  }  headers.addElement(new MimeHeader(name,value));}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Matrix))   return false;  return Arrays.equals(vals,((Matrix)obj).vals);}  }
class C{  private int scanToken(int startPos){  int position=startPos;  while (position < maxPosition) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       break;      position++;    } else {      int c=str.codePointAt(position);      if ((c <= maxDelimCodePoint) && isDelimiter(c))       break;      position+=Character.charCount(c);    }  }  if (retDelims && (startPos == position)) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       position++;    } else {      int c=str.codePointAt(position);      if ((c <= maxDelimCodePoint) && isDelimiter(c))       position+=Character.charCount(c);    }  }  return position;}  }
class C{  private void handleLECPRequest(HttpServletRequest request,HttpServletResponse response,FSAuthnRequest authnRequest,IDPDescriptorType hostedDesc,BaseConfigType hostedConfig,String realm,String hostEntityId,String metaAlias){  FSUtils.debug.message("FSSSOAndFedService.handleLECPRequest:");  try {    FSServiceManager sm=FSServiceManager.getInstance();    FSSSOLECPProfileHandler handler=sm.getLECPProfileHandler(request,response,authnRequest,realm);    handler.setHostedEntityId(hostEntityId);    handler.setMetaAlias(metaAlias);    handler.setHostedDescriptor(hostedDesc);    handler.setHostedDescriptorConfig(hostedConfig);    handler.setRealm(realm);    handler.processLECPAuthnRequest(authnRequest);  } catch (  Exception se) {    FSUtils.debug.error("FSSSOAndFedService.handleLECPRequest: " + "processing LECP request failed." + se);    return;  }}  }
class C{  public void initialize(Map configParams) throws PolicyException {}  }
class C{  public String sendRestCommand(URL url,String requestMethod,Map<String,String> headers,String data) throws IOException {  HttpURLConnection conn=HttpURLConnectionManager.getConnection(url);  try {    conn=HttpURLConnectionManager.getConnection(url);    conn.setRequestMethod(requestMethod);    for (    Map.Entry<String,String> headersEntry : headers.entrySet()) {      conn.setRequestProperty(headersEntry.getKey(),headersEntry.getValue());    }    conn.setRequestProperty("accept","*/*");    if (data != null && !data.isEmpty()) {      conn.setDoOutput(true);      OutputStream os=conn.getOutputStream();      os.write(data.getBytes("UTF8"));      os.flush();      os.close();    }    debug.message("Response code '{}'.",conn.getResponseCode());    InputStream inputStream=conn.getErrorStream();    if (inputStream != null) {      return IOUtils.readStream(inputStream);    }    debug.message("Error stream is null: there is no error from the server");    return IOUtils.readStream(conn.getInputStream());  } catch (  IOException e) {    try {      int respCode=conn.getResponseCode();      debug.error("IOException occurred. Response code : {}",respCode,e);      return IOUtils.readStream(conn.getErrorStream());    } catch (    IOException ex) {      debug.error("An IOException occurred. Can't get the content of the error stream",e);      return "";    }  } finally {    if (conn != null) {      conn.disconnect();    }  }}  }
class C{  public ResourceSet(){  super();}  }
class C{  public void append(char digit){  if (count == digits.length) {    char[] data=new char[count + 100];    System.arraycopy(digits,0,data,0,count);    digits=data;  }  digits[count++]=digit;}  }
class C{  void leftShift(int n){  if (intLen == 0)   return;  int nInts=n >>> 5;  int nBits=n & 0x1F;  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);  if (n <= (32 - bitsInHighWord)) {    primitiveLeftShift(nBits);    return;  }  int newLen=intLen + nInts + 1;  if (nBits <= (32 - bitsInHighWord))   newLen--;  if (value.length < newLen) {    int[] result=new int[newLen];    for (int i=0; i < intLen; i++)     result[i]=value[offset + i];    setValue(result,newLen);  } else   if (value.length - offset >= newLen) {    for (int i=0; i < newLen - intLen; i++)     value[offset + intLen + i]=0;  } else {    for (int i=0; i < intLen; i++)     value[i]=value[offset + i];    for (int i=intLen; i < newLen; i++)     value[i]=0;    offset=0;  }  intLen=newLen;  if (nBits == 0)   return;  if (nBits <= (32 - bitsInHighWord))   primitiveLeftShift(nBits); else   primitiveRightShift(32 - nBits);}  }
class C{  public boolean cancelTask(Task task){  for (  ThreadRunnable threadRunnable : runableMap.keySet()) {    if (threadRunnable.task == task) {      Future future=runableMap.remove(threadRunnable);      if (future != null) {        future.cancel(true);      }      return true;    }  }  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.MgmtDataElement createMgmtDataElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.MgmtDataElementImpl(value);}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  @SuppressWarnings("unchecked") private void genAllManagedObject(TreeMap<String,AbstractManagedObjectDefinition> list){  for (  AbstractManagedObjectDefinition mo : list.values()) {    RelationDefinition relDefn=relList.get(mo.getName());    if (relDefn != null && relDefn.hasOption(RelationOption.HIDDEN)) {      continue;    }    moList.put(mo.getName(),mo);    genManagedObject(mo);    if (mo.hasChildren()) {      genAllManagedObject(makeMOTreeMap(mo.getChildren()));    }  }}  }
class C{  public NotCondition(EntitlementCondition eConditions,String pConditionName){  this.eCondition=eConditions;  this.pConditionName=pConditionName;}  }
class C{  private static boolean valueEquals(Object obj1,Object obj2){  if (obj1 == obj2) {    return true;  }  if (obj1 == null) {    return false;  }  if (obj1.getClass().isArray() && obj2.getClass().isArray()) {    return arrayEquals(obj1,obj2);  }  return (obj1.equals(obj2));}  }
class C{  public FSSAMLServiceModelImpl(HttpServletRequest req,Map map){  super(req,map);  init();}  }
class C{  public AlreadyRegisteredException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  private boolean isRecordFileExist(){  String fileName=null;  fileName=mService.getRecordingNameWithPath();  File recordingFileToSave=new File(fileName + FmRecorder.RECORDING_FILE_EXTENSION);  return recordingFileToSave.exists();}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenodenomodificationallowederr.class,args);}  }
class C{  public FrameBodyWORS(){}  }
class C{  public static int read(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return 0;  }  try {    int readCount=Libcore.os.read(fd,bytes,byteOffset,byteCount);    if (readCount == 0) {      return -1;    }    return readCount;  } catch (  ErrnoException errnoException) {    if (errnoException.errno == EAGAIN) {      return 0;    }    throw errnoException.rethrowAsIOException();  }}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  @Override public void clearBatch() throws SQLException {  batchAdded=false;  super.clearBatch();}  }
class C{  public boolean equals(MenuShortcut s){  return (s != null && (s.getKey() == key) && (s.usesShiftModifier() == usesShift));}  }
class C{  protected void paintTabArea(Graphics g,int tabPlacement,int selectedIndex){  int tabCount=tabPane.getTabCount();  Rectangle iconRect=new Rectangle(), textRect=new Rectangle();  Rectangle clipRect=g.getClipBounds();  for (int i=runCount - 1; i >= 0; i--) {    int start=tabRuns[i];    int next=tabRuns[(i == runCount - 1) ? 0 : i + 1];    int end=(next != 0 ? next - 1 : tabCount - 1);    for (int j=start; j <= end; j++) {      if (j != selectedIndex && rects[j].intersects(clipRect)) {        paintTab(g,tabPlacement,rects,j,iconRect,textRect);      }    }  }  if (selectedIndex >= 0 && rects[selectedIndex].intersects(clipRect)) {    paintTab(g,tabPlacement,rects,selectedIndex,iconRect,textRect);  }}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ServerSocket() throws IOException {  setImpl();}  }
class C{  @KnownFailure("Not supported : pattern with %") public void test_getColumnsArbitrary() throws SQLException {  ResultSet setAllNull=null;  ResultSet setMixed=null;  ResultSet allArbitrary=null;  String[] tablesName={DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  Arrays.sort(tablesName);  int setSize=0;  try {    allArbitrary=meta.getColumns("%","%","%","%");    assertNotNull(allArbitrary);    checkColumnsShape(allArbitrary);    setSize=crossCheckGetColumnsAndResultSetMetaData(allArbitrary,false);    assertEquals(6,setSize);    setMixed=meta.getColumns(null,null,"%","%");    assertNotNull(setMixed);    checkColumnsShape(setMixed);    setSize=crossCheckGetColumnsAndResultSetMetaData(setMixed,false);    assertEquals(6,setSize);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  intent.setAction(RegistrationIntentService.ACTION_REGISTER);  startService(intent);}  }
class C{  private static XMPNode findQualifierNode(XMPNode parent,String qualName,boolean createNodes) throws XMPException {  assert !qualName.startsWith("?");  XMPNode qualNode=parent.findQualifierByName(qualName);  if (qualNode == null && createNodes) {    qualNode=new XMPNode(qualName,null);    qualNode.setImplicit(true);    parent.addQualifier(qualNode);  }  return qualNode;}  }
class C{  public static int appendLengthLength(int len,byte[] buffer,int ptr){  if (len <= 0x7F) {    buffer[ptr++]=(byte)len;    return ptr;  }  do {    buffer[ptr++]=(byte)(0x80 + (len & 0x7F));    len=len >> 7;  } while (len > 0x7F);  buffer[ptr++]=(byte)len;  return ptr;}  }
class C{  public void testConstructorStringRadix16(){  String value="fe2340a8b5ce790";  int radix=16;  byte rBytes[]={15,-30,52,10,-117,92,-25,-112};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private void okClicked(){  isCanceled=false;  dispose();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonenodefalse.class,args);}  }
class C{  public boolean parseWebXml(URL url,WebXml dest,boolean fragment) throws IOException {  if (url == null) {    return true;  }  InputSource source=new InputSource(url.toExternalForm());  source.setByteStream(url.openStream());  return parseWebXml(source,dest,fragment);}  }
class C{  @Override public boolean isMutable(){  return isMutable;}  }
class C{  public JsonValue build() throws IOException {  return JsonValueBuilder.toJsonValue(JsonValueBuilder.getObjectMapper().writeValueAsString(this));}  }
class C{  public final int bytesProduced(){  return bytesProduced;}  }
class C{  public OrFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  public static void processMultiProtocolLogout(HttpServletRequest request,HttpServletResponse response,Object userSession){  debug.message("WSFederationUtils.processMPSingleLogout");  try {    String wreply=(String)request.getAttribute(WSFederationConstants.LOGOUT_WREPLY);    String realm=(String)request.getAttribute(WSFederationConstants.REALM_PARAM);    String idpEntityId=(String)request.getAttribute(WSFederationConstants.ENTITYID_PARAM);    Set sessSet=new HashSet();    sessSet.add(userSession);    String sessUser=SessionManager.getProvider().getPrincipalName(userSession);    SingleLogoutManager manager=SingleLogoutManager.getInstance();    int status=manager.doIDPSingleLogout(sessSet,sessUser,request,response,false,true,SingleLogoutManager.WS_FED,realm,idpEntityId,null,wreply,null,null,SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS);    if (status != SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {      response.sendRedirect(wreply);    }  } catch (  SessionException ex) {    debug.message("WSFederationUtils.processMultiProtocolLogout",ex);  }catch (  IOException ex) {    debug.message("WSFederationUtils.processMultiProtocolLogout",ex);  }catch (  Exception ex) {    debug.message("WSFederationUtils.processMultiProtocolLogout",ex);  }}  }
class C{  public final void testPSSParameterSpec0205(){  try {    new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,-1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void addHeader(String name,String value){  header.put(name,value);}  }
class C{  private static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  private void exitRecordingMode(boolean isInRecordingMode){  refreshImageButton(mIsPlaying);  refreshActionMenuItem(mIsPlaying);  refreshPopupMenuItem(mIsPlaying);  refreshActionMenuPower(true);  if (!isInRecordingMode) {    mIsInRecordingMode=false;    switchRecordLayout(isInRecordingMode);  }}  }
class C{  private static void readGraphicControlExt(GifParameters gif) throws java.io.IOException {  gif.input.read();  int packed=gif.input.read();  gif.dispose=(packed & 0x1c) >> 2;  if (gif.dispose == 0)   gif.dispose=1;  gif.transparency=(packed & 1) != 0;  gif.delay=readShort(gif) * 10;  gif.transIndex=gif.input.read();  gif.input.read();}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public void beginDisplay(DisplayEvent e) throws ModelControlException {  super.beginDisplay(e);  setInlineAlertMessage(messageType,messageTitle,message);}  }
class C{  @Override public ShapeTileSimplex enlarge(double p_offset){  if (p_offset == 0)   return this;  ShapeTileSimplex offset_simplex=offset(p_offset);  ShapeTileOctagon bounding_oct=bounding_octagon();  if (bounding_oct.is_NaN())   return ShapeTileSimplex.EMPTY;  ShapeTileOctagon offset_oct=bounding_oct.offset(p_offset);  return offset_simplex.intersection(offset_oct.to_Simplex());}  }
class C{  public void clearCoRoutine(boolean callDoTerminate){  if (null != m_incrementalSAXSource) {    if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);    m_incrementalSAXSource=null;  }}  }
class C{  public boolean canSetParameter(String name,Object value){  if (value instanceof Boolean) {    if (name.equalsIgnoreCase(DOMConstants.DOM_CDATA_SECTIONS) || name.equalsIgnoreCase(DOMConstants.DOM_COMMENTS) || name.equalsIgnoreCase(DOMConstants.DOM_ENTITIES)|| name.equalsIgnoreCase(DOMConstants.DOM_INFOSET)|| name.equalsIgnoreCase(DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACES)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACE_DECLARATIONS)|| name.equalsIgnoreCase(DOMConstants.DOM_SPLIT_CDATA)|| name.equalsIgnoreCase(DOMConstants.DOM_WELLFORMED)|| name.equalsIgnoreCase(DOMConstants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(DOMConstants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)) {      return true;    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(DOMConstants.DOM_CHECK_CHAR_NORMALIZATION) || name.equalsIgnoreCase(DOMConstants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE_IF_SCHEMA)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE)) {      return !((Boolean)value).booleanValue();    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {      return ((Boolean)value).booleanValue();    }  } else   if (name.equalsIgnoreCase(DOMConstants.DOM_ERROR_HANDLER) && value == null || value instanceof DOMErrorHandler) {    return true;  }  return false;}  }
class C{  public boolean isWritable(){  return isWrite;}  }
class C{  public void replaceAttributeValue(String attrName,String oldValue,String newValue) throws SSOException, SMSException {  validateServiceInstance();  SMSEntry e=instance.getSMSEntry();  SMSUtils.replaceAttributeValue(e,attrName,oldValue,newValue,Collections.EMPTY_SET);  e.save(token);  instance.refresh(e);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataElement createX509DataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataElementImpl();}  }
class C{  public int count(){  return component_list.size();}  }
class C{  public static String bytesToColonDelimitedHex(byte[] b){  if (b == null || b.length == 0) {    return "";  }  int arrayLength=b.length;  StringBuilder buffer=new StringBuilder((arrayLength - 1) * 3 + 2);  buffer.append(byteToHex(b[0]));  for (int i=1; i < arrayLength; i++) {    buffer.append(":");    buffer.append(byteToHex(b[i]));  }  return buffer.toString();}  }
class C{  public LogConfigurationException(){  super();}  }
class C{  public BooleanHolder(){}  }
class C{  public static boolean isAddressInUse(InetAddress address,int port,boolean allowReuse){  try {    if (address.isAnyLocalAddress()) {      try (Socket clientSocket=new Socket()){        clientSocket.connect(new InetSocketAddress(address,port));        if (clientSocket.isConnected()) {          return true;        }      } catch (      IOException ignore) {      }    }    try (ServerSocket serverSocket=new ServerSocket()){      serverSocket.setReuseAddress(allowReuse);      serverSocket.bind(new InetSocketAddress(address,port));      return false;    }   } catch (  IOException ignore) {  }  return true;}  }
class C{  public int createTextureObject(){  int[] textures=new int[1];  GLES20.glGenTextures(1,textures,0);  GlUtil.checkGlError("glGenTextures");  int texId=textures[0];  GLES20.glBindTexture(mTextureTarget,texId);  GlUtil.checkGlError("glBindTexture " + texId);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  return texId;}  }
class C{  public void close() throws IOException {  byte[] buffer;  while ((buffer=buf) != null) {    if (bufUpdater.compareAndSet(this,buffer,null)) {      InputStream input=in;      in=null;      if (input != null)       input.close();      return;    }  }}  }
class C{  public ServiceConfigurationError(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void addACI(ACI aci) throws AccessRightsException, UMSException {  Attr attr=new Attr(ACI.ACI,aci.toString());  modify(attr,ModificationType.ADD);  save();}  }
class C{  public boolean isSslEncryption(){  return sslEncryption;}  }
class C{  public void paintDesktopPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public PortLimitAttribute(byte[] octets){  super(octets);  port=OctetUtils.toIntVal(octets);}  }
class C{  public ContextResourceLinkMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public Set<String> search(Subject adminSubject,String realm,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {  return search(adminSubject,realm,filter,numOfEntries,sortResults,ascendingOrder,null);}  }
class C{  private void removeFromCircleOfTrust(BaseConfigType config,String realm,String entityId){  String classMethod="IDFFMetaManager:removeFromCircleOfTrust:";  try {    if (config != null) {      Map attr=IDFFMetaUtils.getAttributes(config);      List cotAttr=(List)attr.get(COTConstants.COT_LIST);      List cotList=new ArrayList(cotAttr);      if ((cotList != null) && !cotList.isEmpty()) {        for (Iterator iter=cotList.iterator(); iter.hasNext(); ) {          String cotName=(String)iter.next();          if (cotName != null && cotName.length() > 0) {            try {              cotManager.removeCircleOfTrustMember(realm,cotName,COTConstants.IDFF,entityId);            } catch (            COTException ce) {              if (debug.messageEnabled()) {                debug.message(classMethod + "Invalid COT: " + cotName);              }            }          }        }      }    }  } catch (  Exception e) {    debug.error("IDFFMetaManager.removeFromCircleOfTrust:" + "Error while removing entity " + entityId + " from COT.",e);  }}  }
class C{  public ClientConnectionMonitorProvider(ConnectionHandler handler){  this.handler=handler;}  }
class C{  public LoginLATPortAttribute(byte[] octets){  super(octets);  latPort=new String(octets,2,octets.length - 2);}  }
class C{  static boolean validateType(ActionSchema as,Set values){  if ((values == null) || values.isEmpty()) {    return (true);  }  AttributeSchema.Type type=as.getType();  boolean checkType=false;  if (type.equals(AttributeSchema.Type.SINGLE) || type.equals(AttributeSchema.Type.SINGLE_CHOICE)) {    checkType=true;    if (values.size() > 1) {      return (false);    }  }  if (type.equals(AttributeSchema.Type.SINGLE_CHOICE) || type.equals(AttributeSchema.Type.MULTIPLE_CHOICE)) {    checkType=true;    Set validValues=as.getActionValues();    Iterator givenValues=values.iterator();    while (givenValues.hasNext()) {      if (!validValues.contains(givenValues.next())) {        return (false);      }    }  }  if (!checkType && !type.equals(AttributeSchema.Type.LIST)) {    return (false);  }  return (true);}  }
class C{  public static int mainCLI(String[] args,final TempLogFile tempLogFile){  return mainCLI(args,System.out,System.err,tempLogFile);}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  return new OfRef<>(upstream,comparator);}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  public DeleteChangeRecordEntry(DN dn){  super(dn);}  }
class C{  protected Map loadExternalClient(String clientType){  Map eMap=(Map)loadedExternalClients.get(clientType);  if (eMap == null) {    if (extCapInstance != null) {      eMap=extCapInstance.getProperties(clientType);    }    if (eMap == null) {      return null;    }    loadedExternalClients.put(clientType,eMap);    externalClientData.put(clientType,eMap);  }  return eMap;}  }
class C{  public void assignServices(Map serviceNamesAndAttr,boolean store) throws AMException, SSOException {  if (!((profileType == AMObject.ORGANIZATION) || (profileType == AMObject.USER) || (profileType == AMObject.STATIC_GROUP)|| (profileType == AMObject.DYNAMIC_GROUP)|| (profileType == AMObject.ORGANIZATIONAL_UNIT)|| (profileType == AMObject.ASSIGNABLE_DYNAMIC_GROUP)|| (profileType == AMObject.GROUP))) {    throw new UnsupportedOperationException();  }  if ((serviceNamesAndAttr == null) || serviceNamesAndAttr.isEmpty()) {    return;  }  Set newOCs=new HashSet();  Set canAssign=new HashSet();  if (store) {    Set assignedServices=getAssignedServices();    Set toAssign=serviceNamesAndAttr.keySet();    Iterator it=toAssign.iterator();    while (it.hasNext()) {      String thisService=(String)it.next();      if (!assignedServices.contains(thisService)) {        canAssign.add(thisService);      } else {        if (debug.warningEnabled()) {          debug.warning("AMObjectImpl.assignService()-> " + thisService + " is already assigned to "+ entryDN);        }      }    }    Set registered=null;    if (profileType == ORGANIZATION) {      registered=dsServices.getRegisteredServiceNames(null,entryDN);    } else {      registered=dsServices.getRegisteredServiceNames(null,getOrganizationDN());    }    it=canAssign.iterator();    while (it.hasNext()) {      if (!registered.contains((String)it.next())) {        throw new AMException(AMSDKBundle.getString("126",locale),"126");      }    }  } else {    canAssign=serviceNamesAndAttr.keySet();  }  newOCs=AMServiceUtils.getServiceObjectClasses(token,canAssign);  if (store) {    Set oldOCs=getAttribute("objectclass");    newOCs=AMCommonUtils.combineOCs(newOCs,oldOCs);  }  setAttribute("objectclass",newOCs);  Iterator it=canAssign.iterator();  while (it.hasNext()) {    String thisService=(String)it.next();    Map attrMap=(Map)serviceNamesAndAttr.get(thisService);    if ((attrMap == null) || attrMap.isEmpty()) {      attrMap=new HashMap();    }    try {      ServiceSchemaManager ssm=new ServiceSchemaManager(thisService,token);      ServiceSchema ss=null;      Object args[]={thisService};      if (profileType == AMObject.USER) {        ss=ssm.getSchema(SchemaType.USER);        if (ss == null) {          ss=ssm.getSchema(SchemaType.DYNAMIC);        }      } else       if ((profileType == AMObject.ORGANIZATION) || (profileType == AMObject.ORGANIZATIONAL_UNIT)) {        ss=ssm.getSchema(SchemaType.DOMAIN);      } else       if ((profileType == AMObject.STATIC_GROUP) || (profileType == AMObject.DYNAMIC_GROUP) || (profileType == AMObject.ASSIGNABLE_DYNAMIC_GROUP)|| (profileType == AMObject.GROUP)) {        ss=ssm.getSchema(SchemaType.GROUP);      }      if (ss == null) {        debug.warning(AMSDKBundle.getString("1001"));        throw new AMException(AMSDKBundle.getString("1001",args,locale),"1001",args);      }      if (ss.getServiceType() != SchemaType.DYNAMIC) {        attrMap=ss.validateAndInheritDefaults(attrMap,true);      }      attrMap=AMCommonUtils.removeEmptyValues(attrMap);    } catch (    SMSException smse) {      debug.error("AMObjectImpl:assignService-> " + "unable to validate attributes for " + thisService,smse);      throw new AMException(AMSDKBundle.getString("908",locale),"908");    }    setAttributes(attrMap);  }  if (store) {    store();  }}  }
class C{  @Override public synchronized void mark(int idx) throws IOException {  try {    in.mark(idx);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  protected Type(String name){  super(name);}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aElement) throws Exception {  StoreDescription elementDesc=getRegistry().findDescription(aElement.getClass());  if (elementDesc != null) {    if (log.isDebugEnabled())     log.debug("store " + elementDesc.getTag() + "( "+ aElement+ " )");    storeChildren(aWriter,indent,aElement,elementDesc);  } else {    if (log.isWarnEnabled())     log.warn("Descriptor for element" + aElement.getClass() + " not configured!");  }}  }
class C{  @Override protected Member[] publishEntryInfo(Object key,Object value) throws ChannelException {  if (!(key instanceof Serializable && value instanceof Serializable))   return new Member[0];  Member[] members=getMapMembers();  int firstIdx=getNextBackupIndex();  int nextIdx=firstIdx;  Member[] backup=new Member[0];  if (members.length == 0 || firstIdx == -1)   return backup;  boolean success=false;  do {    Member next=members[nextIdx];    nextIdx=nextIdx + 1;    if (nextIdx >= members.length)     nextIdx=0;    if (next == null) {      continue;    }    MapMessage msg=null;    try {      Member[] tmpBackup=wrap(next);      msg=new MapMessage(getMapContextName(),MapMessage.MSG_BACKUP,false,(Serializable)key,(Serializable)value,null,channel.getLocalMember(false),tmpBackup);      if (log.isTraceEnabled())       log.trace("Publishing backup data:" + msg + " to: "+ next.getName());      UniqueId id=getChannel().send(tmpBackup,msg,getChannelSendOptions());      if (log.isTraceEnabled())       log.trace("Data published:" + msg + " msg Id:"+ id);      success=true;      backup=tmpBackup;    } catch (    ChannelException x) {      log.error(sm.getString("lazyReplicatedMap.unableReplicate.backup",key,next,x.getMessage()),x);      continue;    }    try {      Member[] proxies=excludeFromSet(backup,getMapMembers());      if (success && proxies.length > 0) {        msg=new MapMessage(getMapContextName(),MapMessage.MSG_PROXY,false,(Serializable)key,null,null,channel.getLocalMember(false),backup);        if (log.isTraceEnabled())         log.trace("Publishing proxy data:" + msg + " to: "+ Arrays.toNameString(proxies));        getChannel().send(proxies,msg,getChannelSendOptions());      }    } catch (    ChannelException x) {      log.error(sm.getString("lazyReplicatedMap.unableReplicate.proxy",key,next,x.getMessage()),x);    }  } while (!success && (firstIdx != nextIdx));  return backup;}  }
class C{  public void delete(SSOToken token,String objName) throws SMSException, SSOException {  try {    String[] objs={token.getTokenID().toString(),objName};    client.send(client.encodeMessage("delete",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:delete -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-cannot-delete"));  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String any=getStringOptionValue(ARGUMENT_ANY);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,any};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_ANY",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,any,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_ANY",args);    }    attrSchema.setAny(any);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_ANY",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-any-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,any,e.getMessage()};    debugError("ModifyAttributeSchemaAny.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_ANY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,any,e.getMessage()};    debugError("ModifyAttributeSchemaAny.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_ANY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void removeEventListener(AMEventListener listener){  boolean removed=false;synchronized (listeners) {    removed=listeners.remove(listener);  }  if (removed && listeners.isEmpty()) {    if (debug.messageEnabled()) {      debug.message("AMObjectImpl.removeEventListener(..): " + "private listener table empty for this instance");    }synchronized (objImplListeners) {      Set destObjs=(Set)objImplListeners.get(entryDN.toLowerCase());      if (destObjs != null) {        destObjs.remove(this);        if (destObjs.isEmpty()) {          objImplListeners.remove(entryDN);        }      }      this.isRegistered=false;    }    removeFromProfileNameTable(token,entryDN);  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  flavorMap=(FlavorMap)s.readObject();  if (flavorMap == null) {    flavorMap=SystemFlavorMap.getDefaultFlavorMap();  }  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (dragSourceListenerK == key) {      addDragSourceListener((DragSourceListener)(s.readObject()));    } else     if (dragSourceMotionListenerK == key) {      addDragSourceMotionListener((DragSourceMotionListener)(s.readObject()));    } else {      s.readObject();    }  }}  }
class C{  protected boolean reportNode(){  state=ITERATE_CHILDREN;  if (visitedNode.getParent() != null && (!getOptions().isJustLeafnodes() || !visitedNode.hasChildren())) {    returnProperty=createPropertyInfo(visitedNode,getBaseNS(),path);    return true;  } else {    return hasNext();  }}  }
class C{  @Override public List<Rule> rules(){  return (this.rules);}  }
class C{  static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public void connectToHost(String bindDN,String bindPassword,AtomicInteger nextMessageID) throws LDAPConnectionException {  connectToHost(bindDN,bindPassword,nextMessageID,0);}  }
class C{  @DataProvider(name="createRDNTestData") public Object[][] createRDNTestData(){  return new Object[][]{{"dc=com",0,"dc=com"},{"dc=opendj,dc=com",0,"dc=opendj"},{"dc=opendj,dc=com",1,"dc=com"},{"dc=hello,dc=world,dc=opendj,dc=com",0,"dc=hello"},{"dc=hello,dc=world,dc=opendj,dc=com",1,"dc=world"},{"dc=hello,dc=world,dc=opendj,dc=com",2,"dc=opendj"},{"dc=hello,dc=world,dc=opendj,dc=com",3,"dc=com"}};}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  @Override public int countByUuid_C(String uuid,long companyId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;  Object[] finderArgs=new Object[]{uuid,companyId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_C_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_C_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_C_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(companyId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public NetPermission(String name){  super(name);}  }
class C{  public Object parse(InputStream xmlin) throws XMLException {  DocumentBuilder db=null;  try {    db=XMLUtils.getSafeDocumentBuilder(false);  } catch (  ParserConfigurationException e) {    throw new XMLException("DBG:Got ParserConfigurationException:" + e.toString());  }  Document doc=null;  try {    doc=db.parse(xmlin);  } catch (  SAXParseException e) {    throw new XMLException("DBG:Got SAXParseException:" + e.toString() + "line:"+ e.getLineNumber()+ " col :"+ e.getColumnNumber());  }catch (  SAXException e) {    throw new XMLException("DBG:Got SAXException:" + e.toString());  }catch (  IOException ex) {    throw new XMLException("DBG: Got IOException:" + ex.toString());  }  Element elem=doc.getDocumentElement();  return (walkTree(elem));}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && (p.equals(t)));}  }
class C{  public boolean hasTrail(){  return trail;}  }
class C{  public LineNumberReader(Reader in){  super(in);}  }
class C{  public PrefixFileFilter(List<String> prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The list of prefixes must not be null");  }  this.prefixes=prefixes.toArray(new String[prefixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  @Override public void put(String name,long value){  emulatedFields.put(name,value);}  }
class C{  public static int calculate(String source,String target){  ifNull(source,target);  int sl=source.length();  int tl=target.length();  if (sl == 0) {    return tl;  } else   if (tl == 0) {    return sl;  }  int w=sl + 1;  int h=tl + 1;  int[][] m=new int[w][h];  for (int i=0; i < w; i++) {    m[i][0]=i;  }  for (int i=1; i < h; i++) {    m[0][i]=i;  }  for (int i=0, x=1; i < sl; i++, x++) {    char s=source.charAt(i);    for (int j=0, y=1; j < tl; j++, y++) {      char t=target.charAt(j);      m[x][y]=Math.min(Math.min((m[i][y] + 1),(m[x][j] + 1)),(m[i][j] + ((s == t) ? 0 : 1)));    }  }  return m[sl][tl];}  }
class C{  ByteStringBuilder toNormalizedByteString(final ByteStringBuilder builder){  builder.appendUtf8(toLowerCase(attributeType.getNameOrOID()));  builder.appendUtf8("=");  final ByteString value=getEqualityNormalizedValue();  if (value.length() > 0) {    builder.appendBytes(escapeBytes(value));  }  return builder;}  }
class C{  @Override protected final JsonValue createTemplate(){  JsonValue result=super.createTemplate();  if (dynamicSchema != null) {    result.add("dynamic",dynamicConverter.toJson(dynamicSchema.getAttributeDefaults(),false).getObject());  }  return result;}  }
class C{  public boolean isActive() throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  return idServices.isActive(token,type,name,orgName,univDN);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.com/";  String qualifiedName;  Document doc;  Attr newAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,"");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="domestic";  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.removeAttributeNS(namespaceURI,localName);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  @RequestMapping(value="/bars",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Bar> createBar(@RequestBody Bar bar) throws URISyntaxException {  log.debug("REST request to save Bar : {}",bar);  if (bar.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("bar","idexists","A new bar cannot already have an ID")).body(null);  }  Bar result=barRepository.save(bar);  return ResponseEntity.created(new URI("/api/bars/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("bar",result.getId().toString())).body(result);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns05.class,args);}  }
class C{  public static String DNtoName(String dn){  return DNtoName(dn,true);}  }
class C{  public void notifyEntryChanged(BrowserNodeInfo nodeInfo){  BasicNode node=nodeInfo.getNode();  startRefreshNode(node,null,false);}  }
class C{  public SwallowedExceptionLogger(final Log log){  this(log,true);}  }
class C{  public AsfTagField(final AsfFieldKey field){  assert field != null;  this.toWrap=new MetadataDescriptor(field.getHighestContainer(),field.getFieldName(),MetadataDescriptor.TYPE_STRING);}  }
class C{  public void addProviders(String realm,String cotName,Collection names) throws AMConsoleException {  String cotType=COTConstants.SAML2;  String entityId=null;  String providerNames=AMAdminUtils.getString(names,",",false);  String[] params={realm,cotName,providerNames};  logEvent("ATTEMPT_ADD_PROVIDERS_TO_AUTH_DOMAIN",params);  try {    CircleOfTrustManager manager=getCircleOfTrustManager();    CircleOfTrustDescriptor cotDescriptor=manager.getCircleOfTrust(realm,cotName);    Set existingEntity=cotDescriptor.getTrustedProviders();    if (existingEntity != null) {      Iterator it=existingEntity.iterator();      while (it.hasNext()) {        String entityString=(String)it.next();        String delims="|";        StringTokenizer tokens=new StringTokenizer(entityString,delims);        if (tokens.countTokens() == 2) {          entityId=tokens.nextToken();          cotType=tokens.nextToken();          manager.removeCircleOfTrustMember(realm,cotName,cotType,entityId);        }      }    }    if (names != null) {      int sz=names.size();      for (int i=0; i < sz; i++) {        String entityString=(String)((ArrayList)names).get(i);        String delims="|";        StringTokenizer tokens=new StringTokenizer(entityString,delims);        if (tokens.countTokens() == 2) {          entityId=tokens.nextToken();          cotType=tokens.nextToken();          manager.addCircleOfTrustMember(realm,cotName,cotType,entityId);        }      }    }    logEvent("SUCCEED_ADD_PROVIDERS_TO_AUTH_DOMAIN",params);  } catch (  COTException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,cotName,providerNames,strError};    logEvent("FEDERATION_EXCEPTION_ADD_PROVIDERS_TO_AUTH_DOMAIN",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  private void ArtifactHandler(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  javax.security.auth.Subject authSubject=null;  String targeturl=request.getParameter((String)SAMLServiceManager.getAttribute(SAMLConstants.TARGET_SPECIFIER));  String artifactName=(String)SAMLServiceManager.getAttribute(SAMLConstants.ARTIFACT_NAME);  String[] arti=request.getParameterValues(artifactName);  List assts=null;  Map attrMap=null;  try {    Map sessionAttr=SAMLUtils.processArtifact(arti,targeturl);    Object token=SAMLUtils.generateSession(request,response,sessionAttr);  } catch (  Exception ex) {    SAMLUtils.debug.error("generateSession: ",ex);    String[] data={SAMLUtils.bundle.getString("failedCreateSSOToken")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.FAILED_TO_CREATE_SSO_TOKEN,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedCreateSSOToken",SAMLUtils.bundle.getString("failedCreateSSOToken"));    return;  }  String[] data={SAMLUtils.bundle.getString("accessGranted")};  LogUtils.access(java.util.logging.Level.INFO,LogUtils.ACCESS_GRANTED,data);  if (SAMLUtils.postYN(targeturl)) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("POST to target:" + targeturl);    }    SAMLUtils.postToTarget(response,response.getWriter(),assts,targeturl,attrMap);  } else {    response.sendRedirect(targeturl);  }}  }
class C{  private boolean isValidLocalPart(String atom){  char ch;  int val;  Character character;  StringBuilder buf=new StringBuilder(atom);  for (int i=0; i < buf.length(); i++) {    ch=buf.charAt(i);    val=ch;    character=new Character(ch);    if (val < 33 || val > 126 || !isValidChar(character.toString())) {      return false;    }  }  return true;}  }
class C{  public String toString(){  int selCount=getSelectionCount();  StringBuffer retBuffer=new StringBuffer();  int[] rows;  if (rowMapper != null)   rows=rowMapper.getRowsForPaths(selection); else   rows=null;  retBuffer.append(getClass().getName() + " " + hashCode()+ " [ ");  for (int counter=0; counter < selCount; counter++) {    if (rows != null)     retBuffer.append(selection[counter].toString() + "@" + Integer.toString(rows[counter])+ " "); else     retBuffer.append(selection[counter].toString() + " ");  }  retBuffer.append("]");  return retBuffer.toString();}  }
class C{  protected String savedRequestURL(Session session){  SavedRequest saved=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);  if (saved == null) {    return (null);  }  StringBuilder sb=new StringBuilder(saved.getRequestURI());  if (saved.getQueryString() != null) {    sb.append('?');    sb.append(saved.getQueryString());  }  return (sb.toString());}  }
class C{  public String toString(){  String[] theTable=getStringTable();  int theIndex=value - getOffset();  return theTable != null && theIndex >= 0 && theIndex < theTable.length ? theTable[theIndex] : Integer.toString(value);}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  String username=attributes.getValue("username");  if (username == null) {    username=attributes.getValue("name");  }  String password=attributes.getValue("password");  String roles=attributes.getValue("roles");  MemoryRealm realm=(MemoryRealm)digester.peek(digester.getCount() - 1);  realm.addUser(username,password,roles);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SymmetricBindingElement createSymmetricBindingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SymmetricBindingElementImpl();}  }
class C{  public static List<SearchResultEntry> findStringsContaining(String text){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    for (    MethodNode mn : cn.methods) {      for (      AbstractInsnNode ain : mn.instructions.toArray()) {        if (ain.getType() == AbstractInsnNode.LDC_INSN) {          if (((LdcInsnNode)ain).cst.toString().toLowerCase().contains(text.toLowerCase())) {            results.add(new SearchResultEntry(cn,mn,OpUtils.getIndex(ain)));          }        }      }    }  }  return results;}  }
class C{  protected void autoScrollUp(){  int index=list.getSelectedIndex();  if (index > 0) {    list.setSelectedIndex(index - 1);    list.ensureIndexIsVisible(index - 1);  }}  }
class C{  public void beginMonitoringOf(final InetAddress inetAddress,final int inode){  final long socketIdentifier=fromInet4AddressAndInode(inetAddress,inode);  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);}  }
class C{  public void close() throws IOException {  isClosed=true;  impl.close();}  }
class C{  public void test_loadLjava_io_InputStream$C() throws Exception {  byte[] keyStore=creatCertificate();  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  InputStream in=new ByteArrayInputStream(keyStore);  keyTest.load(in,pssWord);  in.close();  assertTrue("alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  assertTrue("alias2 is not a keyEntry",keyTest.isKeyEntry("alias2"));  assertTrue("alias3 is not a certificate",keyTest.isCertificateEntry("alias3"));  keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  in=new ByteArrayInputStream(keyStore);  keyTest.load(in,null);  in.close();  assertTrue("alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  assertTrue("alias2 is not a keyEntry",keyTest.isKeyEntry("alias2"));  assertTrue("alias3 is not a certificate",keyTest.isCertificateEntry("alias3"));}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void deleteEntityDescriptor(String realm,String entityID) throws IDFFMetaException {  if (entityID == null) {    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_ID,null);    throw new IDFFMetaException("nullEntityID",null);  } else {    if ((realm == null) || (realm.length() == 0)) {      realm=ROOT_REALM;    }    String[] args={entityID,realm};    try {      Map oldAttrs=idffMetaConfigInstance.getConfiguration(realm,entityID);      if (oldAttrs == null || oldAttrs.isEmpty()) {        LogUtil.error(Level.INFO,LogUtil.ENTITY_DOES_NOT_EXISTS,args);        throw new IDFFMetaException("entityDoesNotExists",args);      }      removeEntityFromCOT(realm,entityID);      idffMetaConfigInstance.deleteConfiguration(realm,entityID,null);      LogUtil.access(Level.INFO,LogUtil.DELETE_ENTITY_SUCCEEDED,args);      IDFFMetaCache.setEntityDescriptor(realm,entityID,null);    } catch (    ConfigurationException ce) {      debug.error("Error deleting Entity Descriptor" + entityID,ce);      LogUtil.error(Level.INFO,LogUtil.DELETE_ENTITY_FAILED,args);      throw new IDFFMetaException(ce);    }catch (    UnsupportedOperationException uoe) {      debug.error("Unsupported operation",uoe);      LogUtil.error(Level.INFO,LogUtil.UNSUPPORTED_OPERATION,null);      throw new IDFFMetaException("unsupportedOperation",null);    }  }}  }
class C{  public MalformedCookieException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isDeclared(int index){  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException("No attribute at index: " + index);  return declared[index];}  }
class C{  public boolean isAttribution(){  return attribution;}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation2");  publicId=notationNode.getPublicId();  assertNull("publicId",publicId);}  }
class C{  public static Map<String,Set<String>> readMap(InputStream is) throws IOException {  BufferedReader br=new BufferedReader(new InputStreamReader(is));  try {    Map<String,Set<String>> result=new CaseInsensitiveHashMap();    String line;    while ((line=br.readLine()) != null) {      line=line.trim();      if (line.length() == 0 || line.startsWith("#")) {        continue;      }      int idx=line.indexOf('=');      if (idx != -1) {        String key=line.substring(0,idx);        String value=line.substring(idx + 1);        if (!value.isEmpty()) {          Set<String> values=result.get(key);          if (values == null) {            values=new CaseInsensitiveHashSet(1);          }          values.add(value);          result.put(key,values);        }      }    }    return result;  }  finally {    IOUtils.closeIfNotNull(br);  }}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  static Promise<Integer> promiseInt(){  return new BasePromise<>();}  }
class C{  @SuppressWarnings("unchecked") public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration((List<Permission>)(List)perms);  }}  }
class C{  public void deleteApiKey(EntityManager em,String tenantId,String apiKey,ApplicationManager am) throws Exception {  Tenant tenant=getTenant(em,tenantId);  if (tenant == null) {    throw new NullPointerException("Tenant can't be empty");  }  EntityTransaction t=em.getTransaction();  try {    ApiKey key=getApiKey(em,tenant,apiKey);    t.begin();    em.remove(key);    sendApikeyToKafka(am,DELETED_APIKEY,tenant.getTenant_id(),key.getApikey());    em.flush();    t.commit();    logger.info("Deleted Apikey:" + apiKey + " for Tenant:"+ tenantId);  } catch (  Exception e) {    if (t.isActive()) {      t.rollback();    }    logger.log(Level.SEVERE,"Failed to create tenant:" + tenant,e);    throw e;  }}  }
class C{  @Override public Object invoke(String actionName,Object[] params,String[] signature) throws MBeanException {  StringBuilder buffer=new StringBuilder();  buffer.append(actionName);  buffer.append("(");  if (signature.length > 0) {    buffer.append(signature[0]);    for (int i=1; i < signature.length; i++) {      buffer.append(", ");      buffer.append(signature[i]);    }  }  buffer.append(")");  LocalizableMessage message=ERR_CONFIG_JMX_NO_METHOD.get(buffer,configEntryDN);  throw new MBeanException(new ConfigException(message));}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.StatusElementImpl();}  }
class C{  public void writeTo(Writer out) throws IOException {synchronized (lock) {    out.write(buf,0,count);  }}  }
class C{  private final int increment(int aStrength,int lastValue){switch (aStrength) {case Collator.PRIMARY:    lastValue+=PRIMARYORDERINCREMENT;  lastValue&=RBCollationTables.PRIMARYORDERMASK;isOverIgnore=true;break;case Collator.SECONDARY:lastValue+=SECONDARYORDERINCREMENT;lastValue&=RBCollationTables.SECONDARYDIFFERENCEONLY;if (!isOverIgnore) maxSecOrder++;break;case Collator.TERTIARY:lastValue+=TERTIARYORDERINCREMENT;if (!isOverIgnore) maxTerOrder++;break;}return lastValue;}  }
class C{  @Override public void clear() throws IOException {  String[] keys=keys();  for (int i=0; i < keys.length; i++) {    remove(keys[i]);  }}  }
class C{  public static boolean copy(File src,File dest){  boolean result=false;  try {    if (src != null && !src.getCanonicalPath().equals(dest.getCanonicalPath())) {      result=copyInternal(src,dest,new byte[4096]);    }  } catch (  IOException e) {    e.printStackTrace();  }  return result;}  }
class C{  public void testCborBasicMap() throws IOException {  ByteArrayOutputStream payloadOut=new ByteArrayOutputStream();  CBORFactory factory=new CBORFactory();  CBORGenerator gen=factory.createGenerator(payloadOut);  gen.writeStartObject();  gen.writeBooleanField("Fun",true);  gen.writeNumberField("Amt",-2);  gen.writeEndObject();  gen.close();  byte[] bytes=payloadOut.toByteArray();  String hexData=javax.xml.bind.DatatypeConverter.printHexBinary(bytes);  assertTrue(hexData.equalsIgnoreCase("bf6346756ef563416d7421ff"));}  }
class C{  public void removeOperations(Operation operation,Object token){  if (isRunning) {    if (operationHandlerThreadHandler == null)     return;    operationHandlerThreadHandler.removeCallbacks(new AndroidOperation(this,operation),token);  } else {    operationQueue.remove(new AndroidOperation(this,operation,AndroidOperation.Type.NORMAL,token,0));  }}  }
class C{  protected static boolean isComplianceUserDeletionEnabled() throws AMException {  try {    if (AMDCTree.gsc == null) {      ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()));      AMDCTree.gsc=scm.getGlobalSchema();    }    Map attrMap=AMDCTree.gsc.getReadOnlyAttributeDefaults();    Set values=(Set)attrMap.get(COMPLIANCE_USER_DELETION_ATTR);    boolean enabled=false;    if (values == null || values.isEmpty()) {      enabled=false;    } else {      String val=(String)values.iterator().next();      enabled=(val.equalsIgnoreCase("true"));    }    if (debug.messageEnabled()) {      debug.message("Compliance.isComplianceUserDeletionEnabled = " + enabled);    }    return enabled;  } catch (  SMSException ex) {    debug.error(AMSDKBundle.getString("359"),ex);    throw new AMException(AMSDKBundle.getString("359"),"359");  }catch (  SSOException ex) {    debug.error(AMSDKBundle.getString("359"),ex);    throw new AMException(AMSDKBundle.getString("359"),"359");  }}  }
class C{  public Set generateUserIDs(String orgName,Map attributes,int num){  Set userIDs=new HashSet();  String lastName=getAttributeValue(attributes,ATTRIBUTE_LAST_NAME).toLowerCase();  String firstName=getAttributeValue(attributes,ATTRIBUTE_FIRST_NAME).toLowerCase();  if (firstName.equals(EMPTY_STRING) || lastName.equals(EMPTY_STRING)) {    return userIDs;  }  firstName=filterNonAsciiChars(firstName);  if (firstName.length() == 0)   return userIDs;  lastName=filterNonAsciiChars(lastName);  if (lastName.length() == 0)   return userIDs;  userIDs.add(firstName + lastName);  userIDs.add(firstName + NAME_SEPARATOR + lastName);  userIDs.add(lastName + firstName);  userIDs.add(lastName + NAME_SEPARATOR + firstName);  String firstCharFirstName=firstName.substring(0,1);  String firstCharLastName=lastName.substring(0,1);  userIDs.add(firstCharFirstName + lastName);  userIDs.add(firstCharFirstName + NAME_SEPARATOR + lastName);  userIDs.add(firstCharLastName + firstName);  userIDs.add(firstCharLastName + NAME_SEPARATOR + firstName);  userIDs.add(firstName + firstCharLastName);  userIDs.add(firstName + NAME_SEPARATOR + firstCharLastName);  if (num == 0) {    return userIDs;  } else {    return returnSet(userIDs,num);  }}  }
class C{  public static String findPathJar(final Class clas) throws IllegalStateException {  URL url;  String extURL;  try {    url=clas.getProtectionDomain().getCodeSource().getLocation();  } catch (  final SecurityException ex) {    url=clas.getResource(clas.getSimpleName() + ".class");  }  extURL=url.toExternalForm();  try {    url=new URL(extURL);  } catch (  final MalformedURLException mux) {  }  try {    return new File(url.toURI()).toString();  } catch (  final Exception ex) {    return new File(url.getPath()).toString();  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private String cookieToString(Cookie cookie){  return cookie.getClass().getSimpleName() + "[version=" + cookie.getVersion()+ ",name="+ cookie.getName()+ ",domain="+ cookie.getDomain()+ ",path="+ cookie.getPath()+ ",expiry="+ cookie.getExpiryDate()+ "]";}  }
class C{  public static synchronized void deregisterSupportedLDAPVersion(int supportedLDAPVersion,ConnectionHandler<?> connectionHandler){  List<ConnectionHandler<?>> handlers=directoryServer.supportedLDAPVersions.get(supportedLDAPVersion);  if (handlers != null) {    handlers.remove(connectionHandler);    if (handlers.isEmpty()) {      directoryServer.supportedLDAPVersions.remove(supportedLDAPVersion);    }  }}  }
class C{  private WindowObjectVisibility(BoardFrame p_board_frame,String p_title,String p_header_message,String[] p_message_arr){  super(p_board_frame,p_title,p_header_message,p_message_arr);}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  private BigDecimal audit(){  if (intCompact == INFLATED) {    if (intVal == null) {      print("audit",this);      throw new AssertionError("null intVal");    }    if (precision > 0 && precision != bigDigitLength(intVal)) {      print("audit",this);      throw new AssertionError("precision mismatch");    }  } else {    if (intVal != null) {      long val=intVal.longValue();      if (val != intCompact) {        print("audit",this);        throw new AssertionError("Inconsistent state, intCompact=" + intCompact + "\t intVal="+ val);      }    }    if (precision > 0 && precision != longDigitLength(intCompact)) {      print("audit",this);      throw new AssertionError("precision mismatch");    }  }  return this;}  }
class C{  protected static Vector convertToVector(final Object[][] anArray){  if (anArray == null) {    return null;  }  final Vector v=new Vector(anArray.length);  for (  final Object[] element : anArray) {    v.addElement(convertToVector(element));  }  return v;}  }
class C{  public static PlainSASLBindRequest newPlainSASLBindRequest(final String authenticationID,final byte[] password){  return new PlainSASLBindRequestImpl(authenticationID,password);}  }
class C{  static String applyTemplate(final String template,final Map<String,Object> map){  configuration=getConfiguration();  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream();Writer writer=new OutputStreamWriter(outputStream)){    Template configurationTemplate=configuration.getTemplate(template);    configurationTemplate.process(map,writer);    return outputStream.toString();  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public void registerEvent(Class<? extends Event> event,Listener listener,EventPriority priority,EventExecutor executor,Plugin plugin,boolean ignoreCancelled){  Validate.notNull(listener,"Listener cannot be null");  Validate.notNull(priority,"Priority cannot be null");  Validate.notNull(executor,"Executor cannot be null");  Validate.notNull(plugin,"Plugin cannot be null");  if (!plugin.isEnabled()) {    throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");  }  if (useTimings) {    getEventListeners(event).register(new TimedRegisteredListener(listener,executor,priority,plugin,ignoreCancelled));  } else {    getEventListeners(event).register(new RegisteredListener(listener,executor,priority,plugin,ignoreCancelled));  }}  }
class C{  public <M extends Configuration>void deregisterAddListener(SetRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterAddListener(baseDN,listener);}  }
class C{  private void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet,QName attributeSetsNames[]) throws TransformerException {  if (null != attributeSetsNames) {    int nNames=attributeSetsNames.length;    for (int i=0; i < nNames; i++) {      QName qname=attributeSetsNames[i];      java.util.List attrSets=stylesheet.getAttributeSetComposed(qname);      if (null != attrSets) {        int nSets=attrSets.size();        for (int k=nSets - 1; k >= 0; k--) {          ElemAttributeSet attrSet=(ElemAttributeSet)attrSets.get(k);          attrSet.execute(transformer);        }      } else {        throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_ATTRIB_SET,new Object[]{qname}),this);      }    }  }}  }
class C{  public int indexOf(int elem){  runTo(-1);  return super.indexOf(elem);}  }
class C{  void addToParent(Element respE) throws AuthnSvcException {  if (transforms == null || transforms.isEmpty()) {    throw new AuthnSvcException("noChildPT");  }  Document doc=respE.getOwnerDocument();  Element ptE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_PASSWORD_TRANSFORMS);  respE.appendChild(ptE);  for (Iterator iter=transforms.iterator(); iter.hasNext(); ) {    Transform tf=(Transform)iter.next();    tf.addToParent(ptE);  }}  }
class C{  public Segment(char[] array,int offset,int count){  this.array=array;  this.offset=offset;  this.count=count;  partialReturn=false;}  }
class C{  private static void log(final String message){  System.out.println(message);}  }
class C{  public Response createResponse() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESPONSE);  if (object == null) {    return new ResponseImpl();  } else {    return (Response)object;  }}  }
class C{  private static Class safeLoadClass(String className,ClassLoader classLoader) throws ClassNotFoundException {  try {    SecurityManager s=System.getSecurityManager();    if (s != null) {      int i=className.lastIndexOf('.');      if (i != -1) {        s.checkPackageAccess(className.substring(0,i));      }    }    if (classLoader == null)     return Class.forName(className); else     return classLoader.loadClass(className);  } catch (  SecurityException se) {    if (isDefaultImplementation(className))     return Class.forName(className);    throw se;  }}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyWSSSignature(document,certAlias);}  }
class C{  public boolean isMustBePresent(){  return mustBePresent;}  }
class C{  public TagField createField(String vorbisCommentFieldKey,String value){  if (value == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  return new VorbisCommentTagField(vorbisCommentFieldKey,value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodenull.class,args);}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  short nodeType=dtm.getNodeType(context);  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << (nodeType - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeTypeImpl();}  }
class C{  public static boolean scheduleTask(Runnable task){  boolean success=true;  if (!initialized) {    initialize(false);  }  try {    thrdPool.run(task);  } catch (  ThreadPoolException e) {    debug.error("SMSThreadPool: unable to schedule task" + e);    success=false;  }  return success;}  }
class C{  InterfaceAddress(Inet6Address address,short prefixLength){  this.address=address;  this.broadcastAddress=null;  this.prefixLength=prefixLength;}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  private void closeConnection(){  try {    if (connection != null) {      connection.close();      connection=null;    }  } catch (  Exception e) {    DEBUG.warning("Connection failed to close.",e);  }}  }
class C{  public AddContext(CSN csn,String entryUUID,String parentEntryUUID){  super(csn,entryUUID);  this.parentEntryUUID=parentEntryUUID;}  }
class C{  public AuthErrorCodeException(String authErrorCode,String rbName,String messageCode,Object[] args){  super(rbName,messageCode,args);  this.authErrorCode=authErrorCode;}  }
class C{  @SideEffect("Support_TestWebServer requires isolation.") public void test_findResource_String() throws Exception {  File tempFile1=File.createTempFile("textFile",".txt");  tempFile1.createNewFile();  tempFile1.deleteOnExit();  File tempFile2=File.createTempFile("jarFile",".jar");  tempFile2.delete();  tempFile2.deleteOnExit();  Support_TestWebServer server=new Support_TestWebServer();  try {    int port=server.initServer();    String tempPath1=tempFile1.getParentFile().getAbsolutePath() + "/";    InputStream is=getClass().getResourceAsStream("/tests/resources/hyts_patch.jar");    Support_Resources.copyLocalFileto(tempFile2,is);    String tempPath2=tempFile2.getAbsolutePath();    String tempPath3="http://localhost:" + port + "/";    URLClassLoader urlLoader=getURLClassLoader(tempPath1,tempPath2);    assertNull("Found inexistant resource",urlLoader.findResource("XXX"));    assertNotNull("Couldn't find resource from directory",urlLoader.findResource(tempFile1.getName()));    assertNotNull("Couldn't find resource from jar",urlLoader.findResource("Blah.txt"));    urlLoader=getURLClassLoader(tempPath1,tempPath2,tempPath3);    assertNotNull("Couldn't find resource from web",urlLoader.findResource("test1"));    assertNull("Found inexistant resource from web",urlLoader.findResource("test3"));  }  finally {    server.close();  }}  }
class C{  public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  public void handleTblButtonGroupAddRequest(RequestInvocationEvent event){  AgentGroupAddViewBean vb=(AgentGroupAddViewBean)getViewBean(AgentGroupAddViewBean.class);  String hiddenType=getRequestContext().getRequest().getParameter("agenttype");  if ((hiddenType != null) && (hiddenType.trim().length() > 0)) {    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,hiddenType);  } else {    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,getDisplayIDType());  }  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean delete(Long dataFilterID){  if (dataFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_DATAFILTERID + "=" + dataFilterID,null) > 0;}  }
class C{  public Builder withSystemSecurityManager(){  return withSecurityManager(System.getSecurityManager());}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    this.inviteCount++;    logger.info("shootme: got an Invite " + request);    assertTrue(request.getHeader(ContactHeader.NAME) != null);    Response response=protocolObjects.messageFactory.createResponse(Response.TRYING,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport="+ protocolObjects.transport+ ">");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    Dialog dialog=st.getDialog();    assertTrue(this.dialog != dialog);    this.dialogCount++;    this.dialog=dialog;    logger.info("Shootme: dialog = " + dialog);    st.sendResponse(response);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    if (((SipURI)(request.getRequestURI())).getParameter("redirection") == null) {      Response moved=protocolObjects.messageFactory.createResponse(Response.MOVED_TEMPORARILY,request);      moved.addHeader(contactHeader);      toHeader=(ToHeader)moved.getHeader(ToHeader.NAME);      toHeader.setTag("4321");      st.sendResponse(moved);      assertTrue("dialog state should be terminated",dialog.getState() == DialogState.TERMINATED);    } else {      Response ringing=protocolObjects.messageFactory.createResponse(Response.RINGING,request);      toHeader=(ToHeader)ringing.getHeader(ToHeader.NAME);      toHeader.setTag("5432");      st.sendResponse(ringing);      assertTrue("server tx state should be proceeding",st.getState() == TransactionState.PROCEEDING);      this.okResponse=protocolObjects.messageFactory.createResponse(Response.OK,request);      toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);      toHeader.setTag("5432");      okResponse.addHeader(contactHeader);      this.inviteTid=st;      this.inviteRequest=request;      new Timer().schedule(new MyTimerTask(this),1000);    }  } catch (  Exception ex) {    ex.printStackTrace();    fail("Error sending response to INVITE");  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=stream.putFields();  fields.put("positivePrefix",ndf.getPositivePrefix());  fields.put("positiveSuffix",ndf.getPositiveSuffix());  fields.put("negativePrefix",ndf.getNegativePrefix());  fields.put("negativeSuffix",ndf.getNegativeSuffix());  fields.put("posPrefixPattern",(String)null);  fields.put("posSuffixPattern",(String)null);  fields.put("negPrefixPattern",(String)null);  fields.put("negSuffixPattern",(String)null);  fields.put("multiplier",ndf.getMultiplier());  fields.put("groupingSize",(byte)ndf.getGroupingSize());  fields.put("groupingUsed",ndf.isGroupingUsed());  fields.put("decimalSeparatorAlwaysShown",ndf.isDecimalSeparatorAlwaysShown());  fields.put("parseBigDecimal",ndf.isParseBigDecimal());  fields.put("roundingMode",roundingMode);  fields.put("symbols",symbols);  fields.put("useExponentialNotation",false);  fields.put("minExponentDigits",(byte)0);  fields.put("maximumIntegerDigits",ndf.getMaximumIntegerDigits());  fields.put("minimumIntegerDigits",ndf.getMinimumIntegerDigits());  fields.put("maximumFractionDigits",ndf.getMaximumFractionDigits());  fields.put("minimumFractionDigits",ndf.getMinimumFractionDigits());  fields.put("serialVersionOnStream",4);  stream.writeFields();}  }
class C{  public boolean sendMail(Alert alert){  final MimeMessage msg=new MimeMessage(session);  if (logger.isDebugEnabled()) {    logger.debug("MAIL BOLT: " + alert);  }  try {    setMessage(msg,alert);    Transport.send(msg);    return true;  } catch (  Exception e) {    logger.info("Error when trying to send e-mail via, tenant ID: " + alert.getRuleGroup(),e);    return false;  }}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  try {    engine=(Engine)event.getLifecycle();  } catch (  ClassCastException e) {    log.error(sm.getString("engineConfig.cce",event.getLifecycle()),e);    return;  }  if (event.getType().equals(Lifecycle.START_EVENT))   start(); else   if (event.getType().equals(Lifecycle.STOP_EVENT))   stop();}  }
class C{  public NameNotFoundException(){  super();}  }
class C{  public boolean deleteAllNamedPolicyTemplates(String policyDN) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public void removeMessageDestination(String name){synchronized (messageDestinations) {    messageDestinations.remove(name);  }  fireContainerEvent("removeMessageDestination",name);}  }
class C{  public void testField(){  checkPrivateKey cPrKey=new checkPrivateKey();  assertEquals("Incorrect serialVersionUID",cPrKey.getSerVerUID(),6034044314589513430L);}  }
class C{  public void testUpdate5() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  statement.executeUpdate("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");  ResultSet r=statement.executeQuery("SELECT COUNT(*) " + "FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r=statement.executeQuery("SELECT COUNT(*) " + "FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 5;");  r.next();  assertEquals("Should be 0 rows",0,r.getInt(1));  r.close();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] appendElement(Class<T> kind,T[] array,T element){  final T[] result;  final int end;  if (array != null) {    end=array.length;    result=(T[])Array.newInstance(kind,end + 1);    System.arraycopy(array,0,result,0,end);  } else {    end=0;    result=(T[])Array.newInstance(kind,1);  }  result[end]=element;  return result;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    XPathContext xctxt=transformer.getXPathContext();    int sourceNode=xctxt.getCurrentNode();    XObject value=m_selectExpression.execute(xctxt,sourceNode,this);    SerializationHandler handler=transformer.getSerializationHandler();    if (null != value) {      int type=value.getType();      String s;switch (type) {case XObject.CLASS_BOOLEAN:case XObject.CLASS_NUMBER:case XObject.CLASS_STRING:        s=value.str();      handler.characters(s.toCharArray(),0,s.length());    break;case XObject.CLASS_NODESET:  DTMIterator nl=value.iter();DTMTreeWalker tw=new TreeWalker2Result(transformer,handler);int pos;while (DTM.NULL != (pos=nl.nextNode())) {DTM dtm=xctxt.getDTMManager().getDTM(pos);short t=dtm.getNodeType(pos);if (t == DTM.DOCUMENT_NODE) {for (int child=dtm.getFirstChild(pos); child != DTM.NULL; child=dtm.getNextSibling(child)) {  tw.traverse(child);}} else if (t == DTM.ATTRIBUTE_NODE) {SerializerUtils.addAttribute(handler,pos);} else {tw.traverse(pos);}}break;case XObject.CLASS_RTREEFRAG:SerializerUtils.outputResultTreeFragment(handler,value,transformer.getXPathContext());break;default :s=value.str();handler.characters(s.toCharArray(),0,s.length());break;}}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IdType idType=convert2IdType(type);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,type,idName,serviceName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_MODIFY_SERVICE",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    amid.modifyService(serviceName,attributeValues);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-modify-service-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_MODIFY_SERVICE",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("ModifyService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_MODIFY_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("ModifyService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_MODIFY_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private void addAttributesToSession(final Session session,Map<?,?> assertion){  @SuppressWarnings("unchecked") Map<String,Set<String>> attributeStatement=(Map<String,Set<String>>)assertion.get(SAML2Constants.ATTRIBUTE_MAP);  if (attributeStatement != null && !attributeStatement.isEmpty()) {    for (    String key : attributeMapping.keySet()) {      Set<String> values=attributeStatement.get(attributeMapping.get(key));      if (values != null && !values.isEmpty()) {        session.put(key,new ArrayList<>(values));      } else {        logger.warn("addAttributesToSession: Warning no assertion attribute found for : {}",attributeMapping.get(key));      }    }  } else {    logger.warn("addAttributesToSession: Attribute statement was not present in assertion");  }  if (subjectMapping != null) {    String subjectValue=((Subject)assertion.get(SAML2Constants.SUBJECT)).getNameID().getValue();    session.put(subjectMapping,subjectValue);    logger.debug("addAttributesToSession: Adding subject to session: {} = {}",subjectMapping,subjectValue);  }  if (sessionIndexMapping != null) {    String sessionIndexValue=(String)assertion.get(SAML2Constants.SESSION_INDEX);    session.put(sessionIndexMapping,sessionIndexValue);    logger.debug("addAttributesToSession: Adding session index: {} = {}",sessionIndexMapping,sessionIndexValue);  }  if (authnContext != null) {    List<AuthnStatement> authnStatements=((Assertion)assertion.get(SAML2Constants.ASSERTION)).getAuthnStatements();    StringBuilder authnContextValues=new StringBuilder();    for (    AuthnStatement authnStatement : authnStatements) {      String authnContextValue=authnStatement.getAuthnContext().getAuthnContextClassRef();      if (authnContextValue != null && !authnContextValue.isEmpty()) {        authnContextValues.append(authnContextValue);        authnContextValues.append(authnContextDelimiter);      }    }    if (authnContextValues.length() > 0) {      authnContextValues.deleteCharAt(authnContextValues.length() - 1);      session.put(authnContext,authnContextValues.toString());      logger.debug("addAttributesToSession: Adding authentication contexts to session: {} = {}",authnContext,authnContextValues);    }  }}  }
class C{  protected void didAdjustTree(){}  }
class C{  private SessionContextStatement createSessionContextStatement(NameIdentifier senderIdentity,SessionContext invocatorSession,boolean isBear) throws SecurityTokenException {  try {    ProxySubject proxySubject=null;    Subject subject=null;    List subjects=createSubjectAndProxySubject(senderIdentity,invocatorSession,isBear);    subject=(Subject)subjects.get(0);    if (subjects.size() == 2) {      proxySubject=(ProxySubject)subjects.get(1);    }    return new SessionContextStatement(invocatorSession,proxySubject,subject);  } catch (  Exception e) {    debug.error("createSessionContextStatement: ",e);    throw new SecurityTokenException(e.getMessage());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void closeIdleConnections(long idleTime){  long idleTimeout=System.currentTimeMillis() - idleTime;  if (log.isDebugEnabled()) {    log.debug("Checking for connections, idleTimeout: " + idleTimeout);  }  Iterator<HttpConnection> connectionIter=connectionToTimes.keySet().iterator();  while (connectionIter.hasNext()) {    HttpConnection conn=connectionIter.next();    TimeValues times=connectionToTimes.get(conn);    Long connectionTime=times.timeAdded;    if (connectionTime.longValue() <= idleTimeout) {      if (log.isDebugEnabled()) {        log.debug("Closing connection, connection time: " + connectionTime);      }      connectionIter.remove();      try {        conn.close();      } catch (      IOException ex) {        log.debug("I/O error closing connection",ex);      }    }  }}  }
class C{  public ReasonHeader createReasonHeader(String protocol,int cause,String text) throws InvalidArgumentException, ParseException {  if (protocol == null)   throw new NullPointerException("bad protocol arg");  if (cause < 0)   throw new InvalidArgumentException("bad cause");  Reason reason=new Reason();  reason.setProtocol(protocol);  reason.setCause(cause);  reason.setText(text);  return reason;}  }
class C{  private void sendNewFakeUpdate() throws TimeoutException {  DeleteMsg delMsg=new DeleteMsg(getBaseDN(),gen.newCSN(),UUID.randomUUID().toString());  prepareWaitForAckIfAssuredEnabled(delMsg);  publish(delMsg);  waitForAckIfAssuredEnabled(delMsg);}  }
class C{  private static LDAPFilter createGreaterOrEqualFilter(AttributeValueAssertion ava) throws IOException {  return LDAPFilter.createGreaterOrEqualFilter(ava.getName(),ByteStringUtility.convertValue(ava.getValue()));}  }
class C{  public Annotation(Object value){  this.value=value;}  }
class C{  public byte[] computeUserPassword(byte[] ownerPassword){  byte[] userPassword=null;  if (securityHandler instanceof StandardHandlerUsingStandard40) {    userPassword=((StandardHandlerUsingStandard40)securityHandler).computeUserPassword(ownerPassword,getPdfObject());  }  return userPassword;}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  static public PrintWriter log(Throwable xcpt,PrintWriter out){  out.println("-----------");  out.println(xcpt.toString());  out.println("Stack Trace:");  out.print(getStackTrace(xcpt));  out.println("-----------");  out.flush();  return out;}  }
class C{  protected boolean canEditImmediately(EventObject event){  if ((event instanceof MouseEvent) && SwingUtilities.isLeftMouseButton((MouseEvent)event)) {    MouseEvent me=(MouseEvent)event;    return ((me.getClickCount() > 2) && inHitRegion(me.getX(),me.getY()));  }  return (event == null);}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public void test_getLowestSetBitZero(){  byte[] aBytes={0};  int aSign=0;  int iNumber=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes_={0,0,0};  iNumber=-1;  aNumber=new BigInteger(aSign,aBytes_);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  public LibPadstack add(String p_name,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){  int pad_no=count() + 1;  LibPadstack new_padstack=new LibPadstack(p_name,pad_no,p_shapes,p_attach_allowed,p_placed_absolute);  padstack_list.add(new_padstack);  return new_padstack;}  }
class C{  public NO_RESPONSE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  @Override public String generateSessionId(){  return generateSessionId(jvmRoute);}  }
class C{  public DecimalStyle withDecimalSeparator(char decimalSeparator){  if (decimalSeparator == this.decimalSeparator) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  protected MouseMotionListener createMouseMotionListener(){  return getHandler();}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  if (null == prefix || prefix.equals(""))   prefix="xmlns"; else   prefix="xmlns:" + prefix;  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  public boolean isEmpty(){  return table.isEmpty();}  }
class C{  public OrValidator(final Validator<T>... initial){  this.validators.addAll(Arrays.asList(initial));}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=nextDouble();  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  boolean forwarded=false;  submitCycle=true;  bFilter=true;  try {    Subject subject=createSubject();    if (subject != null) {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      String name=(String)propertySheetModel.getValue(SUBJECT_NAME);      policy.addSubject(name,subject,isExclusive());      backTrail();      forwardToPolicyViewBean();      forwarded=true;    }  } catch (  NameAlreadyExistsException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));  }catch (  InvalidNameException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  } finally {    if (!forwarded) {      forwardTo();    }  }}  }
class C{  @Override public List<Foo> findByField2(boolean field2){  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SPKIDataType createSPKIDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SPKIDataTypeImpl();}  }
class C{  public Callback[] createChoiceCallback() throws AuthException {  debug.message("In createChoiceCallback");  String[] moduleList=getModuleList();  Callback[] callbacks=new Callback[1];  try {    ChoiceCallback choiceCallback=new ChoiceCallback(Locale.getString(rb,"modulePrompt",debug),moduleList,0,false);    callbacks[0]=choiceCallback;  } catch (  IllegalArgumentException ie) {    debug.error("Number of arguments not correct",ie);    throw new AuthException("callbackError",null);  }catch (  Exception e) {    debug.error("Error: ",e);    throw new AuthException("callbackError",null);  }  if (debug.messageEnabled()) {    debug.message("Callback is.. :" + callbacks[0]);  }  return callbacks;}  }
class C{  protected static void clearCache(){  attributeMappings=new CaseInsensitiveHashMap();  reverseAttributeMappings=new CaseInsensitiveHashMap();  amsdkdn2realmname=new CaseInsensitiveHashMap();  amsdkConfiguredRealms=new CaseInsensitiveHashMap();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node insertedNode;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  childName=insertedNode.getNodeName();  assertEquals("nodeInsertBeforeNodeNameAssert1","newChild",childName);}  }
class C{  void bind(String jndiUrl,Hashtable<?,?> attributes,RMIServer rmiServer,boolean rebind) throws NamingException, MalformedURLException {  InitialContext ctx=new InitialContext(attributes);  if (rebind)   ctx.rebind(jndiUrl,rmiServer); else   ctx.bind(jndiUrl,rmiServer);  ctx.close();}  }
class C{  public FileSystemLoopException(String file){  super(file);}  }
class C{  public ServerStartCommandExecutor(final String command){  this.startCommand=command + " ";  serverOutput=new LinkedList<>();  serverErrorOutput=new LinkedList<>();}  }
class C{  private void resetSerializerBase(){  this.m_attributes.clear();  this.m_CdataElems=null;  this.m_cdataTagOpen=false;  this.m_docIsEmpty=true;  this.m_doctypePublic=null;  this.m_doctypeSystem=null;  this.m_doIndent=false;  this.m_elemContext=new ElemContext();  this.m_indentAmount=0;  this.m_inEntityRef=false;  this.m_inExternalDTD=false;  this.m_mediatype=null;  this.m_needToCallStartDocument=true;  this.m_needToOutputDocTypeDecl=false;  if (m_OutputProps != null)   this.m_OutputProps.clear();  if (m_OutputPropsDefault != null)   this.m_OutputPropsDefault.clear();  if (this.m_prefixMap != null)   this.m_prefixMap.reset();  this.m_shouldNotWriteXMLHeader=false;  this.m_sourceLocator=null;  this.m_standalone=null;  this.m_standaloneWasSpecified=false;  this.m_StringOfCDATASections=null;  this.m_tracer=null;  this.m_transformer=null;  this.m_version=null;}  }
class C{  public static String encode(String s){  String ret=null;  try {    ret=encode(s,UTF_8);  } catch (  UnsupportedEncodingException e) {  }  return ret;}  }
class C{  HugeEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;  bits=new long[(enums.length + BIT_IN_LONG - 1) / BIT_IN_LONG];}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  private static int readShort(GifParameters gif) throws java.io.IOException {  return gif.input.read() | gif.input.read() << 8;}  }
class C{  public static CartEvent createCheckoutEvent(String userId){  return new CartEvent(CartEventType.CHECKOUT,userId,"all",0);}  }
class C{  final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof UnknownTag) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public void paintTabbedPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public synchronized void releaseLockAndNotify() throws IllegalMonitorStateException {  if (owner == Thread.currentThread()) {    if (acquireCount > 1) {      acquireCount--;    } else {      owner=null;      acquireCount=0;      if (waitCount > 0) {        if (expired) {          this.notifyAll();        } else {          this.notify();        }      }    }  } else {    throw new IllegalMonitorStateException("The calling thread is not the owner of the lock!");  }}  }
class C{  public void testIntValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int result=218520473;  assertTrue("incorrect value",aNumber.intValue() == result);}  }
class C{  public void register(@NonNull Object subscriber){  assignThreadForSubscriber(subscriber);  for (  Map.Entry<Class<?>,List<EventHandler>> entry : Cache.findAllEventHandlersForSubscriber(subscriber).entrySet()) {    Class<?> eventType=entry.getKey();    CopyOnWriteArraySet<EventHandler> registeredEventHandlersForEventType=mRegisteredEventHandlersByEventType.get(eventType);    if (registeredEventHandlersForEventType == null) {synchronized (mRegisteredEventHandlersByEventType) {        registeredEventHandlersForEventType=mRegisteredEventHandlersByEventType.get(eventType);        if (registeredEventHandlersForEventType == null) {          registeredEventHandlersForEventType=new CopyOnWriteArraySet<>();          mRegisteredEventHandlersByEventType.put(eventType,registeredEventHandlersForEventType);        }      }    }    registeredEventHandlersForEventType.addAll(entry.getValue());    Object stickyEvent=Cache.stickyEvents.get(entry.getKey());    if (stickyEvent != null) {      sendTo(stickyEvent,subscriber);    }  }}  }
class C{  public void testSetBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=223;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static int bitLength(int[] val,int len){  if (len == 0)   return 0;  return ((len - 1) << 5) + bitLengthForInt(val[0]);}  }
class C{  public static int parseUnsignedShort(String lexicalXSDUnsignedShort){  if (theConverter == null)   initConverter();  return theConverter.parseUnsignedShort(lexicalXSDUnsignedShort);}  }
class C{  public BindRequestProtocolOp(ByteString dn,String saslMechanism,ByteString saslCredentials){  this.dn=dn;  this.saslMechanism=saslMechanism;  this.saslCredentials=saslCredentials;  authenticationType=AuthenticationType.SASL;  protocolVersion=3;  simplePassword=null;}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public synchronized void nonBlockingFlush(){  if (recCount <= 0) {    if (Debug.messageEnabled()) {      Debug.message("RemoteHandler.nonBlockingFlush(): no records " + "in buffer to send");    }    return;  }  FlushTask task=new FlushTask(reqSetMap);  try {    LoggingThread.getInstance().run(task);  } catch (  ThreadPoolException ex) {    if (Debug.messageEnabled()) {      Debug.message("RemoteHandler.nonBlockingFlush(): ThreadPoolException" + ". Performing blocking flush.");    }    task.run();  }  this.recCount=0;  reqSetMap=new HashMap();}  }
class C{  public SAXException(Exception e){  super();  this.exception=e;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (dialog.getState() == DialogState.CONFIRMED) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);      logger.info("shootme: got an ACK -- sending bye! ");      dialog.sendRequest(tr);      logger.info("Dialog State = " + dialog.getState());    }  } catch (  Exception ex) {    logger.error(ex);    fail(unexpectedException);  }}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean validateServiceAttributes(String token,String validatorClass,Set values) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::validateServiceAttributes: " + validatorClass + " Values: "+ values);  }  try {    Class clazz=Class.forName(validatorClass);    ServiceAttributeValidator v=(ServiceAttributeValidator)clazz.newInstance();    return v.validate(values);  } catch (  InstantiationException ex) {    throw new SMSException("sms-validator_cannot_instantiate_class");  }catch (  IllegalAccessException ex) {    throw new SMSException("sms-validator_cannot_instantiate_class");  }catch (  ClassNotFoundException ex) {    throw new SMSException("sms-validator_cannot_instantiate_class");  }}  }
class C{  public void handleTblCharsetAliasHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    G11NCharsetAliasEditViewBean vb=(G11NCharsetAliasEditViewBean)getViewBean(G11NCharsetAliasEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue("tblCharsetAliasHrefAction"));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  public static ADNotificationRequestControl newControl(final boolean isCritical){  return new ADNotificationRequestControl(isCritical);}  }
class C{  public RepoJobStore(){}  }
class C{  public static void parallelSort(char[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJChar.Sorter(null,a,new char[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public boolean isGetAllReturnAttributesEnabled(){  return getAllAttributesEnabled;}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttributeSet attributes){  super(attributes,PrintRequestAttribute.class);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS04.class,args);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextResourceEnvRef[");  sb.append("name=");  sb.append(getName());  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  sb.append(", override=");  sb.append(override);  sb.append("]");  return (sb.toString());}  }
class C{  public static String DNToName(AMModel model,String dn){  if (LDAPUtils.isDN(dn)) {    if (DN.valueOf(dn).equals(DN.valueOf(SMSEntry.getRootSuffix()))) {      return model.getLocalizedString("top.level.realm");    } else {      return LDAPUtils.rdnValueFromDn(dn);    }  }  return dn;}  }
class C{  public static void computeMonitoringPossibleResults(SearchResultEntry monitor1,SearchResultEntry monitor2,List<Integer> possibleResults,Collection<String> attrNames){  for (  String attrName : attrNames) {    possibleResults.add(compareForAttribute(monitor1,monitor2,attrName));  }}  }
class C{  public void removeAllMembers() throws UMSException {  SearchResults searchResults=getMemberIDs();  while (searchResults.hasMoreElements()) {    removeMember(searchResults.next());  }}  }
class C{  public static int computeIncreaseStation(int station){  int result=station + STEP;  if (result > HIGHEST_STATION) {    result=LOWEST_STATION;  }  return result;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InteractionResponseType createInteractionResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionResponseTypeImpl();}  }
class C{  public byte[] toByteArray(){  if (places.length == 0) {    byte zero[]=new byte[1];    zero[0]=(byte)0;    return zero;  } else {    return (byte[])places.clone();  }}  }
class C{  public void test_getBundleLjava_lang_StringLjava_util_Locale(){  ResourceBundle bundle;  String name="tests.support.Support_TestResource";  Locale defLocale=Locale.getDefault();  Locale.setDefault(new Locale("en","US"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","FR","VAR"));  assertEquals("Wrong bundle fr_FR_VAR","frFRVARValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","FR","v1"));  assertEquals("Wrong bundle fr_FR_v1","frFRValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","US","VAR"));  assertEquals("Wrong bundle fr_US_var","frValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","VAR"));  assertEquals("Wrong bundle de_FR_var","enUSValue4",bundle.getString("parent4"));  Locale.setDefault(new Locale("fr","FR","VAR"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","v1"));  assertEquals("Wrong bundle de_FR_var 2","frFRVARValue4",bundle.getString("parent4"));  Locale.setDefault(new Locale("de","US"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","var"));  assertEquals("Wrong bundle de_FR_var 2","parentValue4",bundle.getString("parent4"));  try {    ResourceBundle.getBundle(null,Locale.US);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("blah",(Locale)null);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("",new Locale("xx","yy"));    fail("MissingResourceException expected");  } catch (  MissingResourceException ee) {  }}  }
class C{  public static <T>MenuResult<T> cancel(){  return new MenuResult<>(Type.CANCEL,Collections.<T>emptyList());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.EmptyTypeImpl();}  }
class C{  public static Feature fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  gson.registerTypeAdapter(Geometry.class,new GeometryDeserializer());  return gson.create().fromJson(json,Feature.class);}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Color color=getColor();  if (color == null) {    g.setColor(c.getSelectionColor());  } else {    g.setColor(color);  }  Rectangle r;  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    if (bounds instanceof Rectangle) {      r=(Rectangle)bounds;    } else {      r=bounds.getBounds();    }  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();    } catch (    BadLocationException e) {      r=null;    }  }  if (r != null) {    r.width=Math.max(r.width,1);    g.fillRect(r.x,r.y,r.width,r.height);  }  return r;}  }
class C{  public SequenceInputStream(Enumeration<? extends InputStream> e){  this.e=e;  try {    nextStream();  } catch (  IOException ex) {    throw new Error("panic");  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String[] params={};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_SERVERS",params);    Set servers=ServerConfiguration.getServers(adminSSOToken);    if ((servers != null) && !servers.isEmpty()) {      for (Iterator i=servers.iterator(); i.hasNext(); ) {        outputWriter.printlnMessage((String)i.next());      }    } else {      outputWriter.printlnMessage(getResourceString("list-servers-no-instances"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_SERVERS",params);  } catch (  SSOException e) {    String[] args={e.getMessage()};    debugError("ListServers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SERVERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={e.getMessage()};    debugError("ListServers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_SERVERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public void initialize(String realm,Subject subject){  super.initialize(realm,subject);  this.realm=realm;  SSOToken ssoToken=SubjectUtils.getSSOToken(subject);}  }
class C{  public void testShiftLeft1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=0;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public List<Long> generateAndWrite() throws FileNotFoundException, UnsupportedEncodingException {  List<Long> toReturn=generateBuckets();  writeResults(toReturn);  return toReturn;}  }
class C{  private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){  int numMonths=(maxYear - minYear + 1) * 12 + 1;  int epochMonth=0;  int[] epochMonths=new int[numMonths];  minMonthLength=Integer.MAX_VALUE;  maxMonthLength=Integer.MIN_VALUE;  for (int year=minYear; year <= maxYear; year++) {    int[] months=years.get(year);    for (int month=0; month < 12; month++) {      int length=months[month];      epochMonths[epochMonth++]=epochDay;      if (length < 29 || length > 32) {        throw new IllegalArgumentException("Invalid month length in year: " + minYear);      }      epochDay+=length;      minMonthLength=Math.min(minMonthLength,length);      maxMonthLength=Math.max(maxMonthLength,length);    }  }  epochMonths[epochMonth++]=epochDay;  if (epochMonth != epochMonths.length) {    throw new IllegalStateException("Did not fill epochMonths exactly: ndx = " + epochMonth + " should be "+ epochMonths.length);  }  return epochMonths;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.CHRONO_ZONE_DATE_TIME_TYPE,this);}  }
class C{  public boolean containsKey(Object key){  checkKey(key);  return map.containsKey(key);}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);}  }
class C{  public void onLoadMore(){  isReady=false;  mLoadingType=LoadingType.LOADING;  QuickConfig.eLoad("onLoadMore");  if (listener != null) {    if (iLoadFooterView != null) {      iLoadFooterView.setVisibility(View.VISIBLE);      ((ILoadMoreFrameLayout)iLoadFooterView).loading();      mQuickAdapter.addFooterView(iLoadFooterView);      listView.smoothScrollToPosition(listView.getAdapter().getCount() - 1);    }    listener.onLoadMore();  }}  }
class C{  public void clearQheaders(){  qheaders=new NameValueList();}  }
class C{  public ZotifyApi cache(){  return this.obtain(ZotifyApi.class,ApiProvider.ZOTIFY_URL,new ZotifyFilter());}  }
class C{  @DataProvider(name="createSubordinateTestData") public Object[][] createSubordinateTestData(){  return new Object[][]{{"","",true},{"","dc=org",false},{"","dc=opendj,dc=org",false},{"","dc=foo,dc=opendj,dc=org",false},{"dc=org","",true},{"dc=org","dc=org",true},{"dc=org","dc=opendj,dc=org",false},{"dc=org","dc=foo,dc=opendj,dc=org",false},{"dc=opendj,dc=org","",true},{"dc=opendj,dc=org","dc=org",true},{"dc=opendj,dc=org","dc=opendj,dc=org",true},{"dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",false},{"dc=foo,dc=opendj,dc=org","",true},{"dc=foo,dc=opendj,dc=org","dc=org",true},{"dc=foo,dc=opendj,dc=org","dc=opendj,dc=org",true},{"dc=foo,dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",true},{"dc=org","dc=com",false},{"dc=opendj,dc=org","dc=foo,dc=org",false},{"dc=opendj,dc=org","dc=opendj,dc=com",false}};}  }
class C{  boolean isPainting(){  Container component=this;  while (component != null) {    if (component instanceof JComponent && ((JComponent)component).getFlag(ANCESTOR_USING_BUFFER)) {      return true;    }    component=component.getParent();  }  return false;}  }
class C{  void onShutdown(){}  }
class C{  protected Element defElement(String name,int type,boolean omitStart,boolean omitEnd,ContentModel content,String[] exclusions,String[] inclusions,AttributeList atts){  BitSet excl=null;  if (exclusions != null && exclusions.length > 0) {    excl=new BitSet();    for (    String str : exclusions) {      if (str.length() > 0) {        excl.set(getElement(str).getIndex());      }    }  }  BitSet incl=null;  if (inclusions != null && inclusions.length > 0) {    incl=new BitSet();    for (    String str : inclusions) {      if (str.length() > 0) {        incl.set(getElement(str).getIndex());      }    }  }  return defineElement(name,type,omitStart,omitEnd,content,excl,incl,atts);}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_tracer != null)   this.fireStartDoc();}  }
class C{  public void removeHeader(Header header){  if (header == null) {    return;  }  headers.remove(header);}  }
class C{  public void displayFieldInvalid(FieldName fieldName,boolean invalid){  for (  WizardStep s : hmPanels.keySet()) {    getPanel(s).displayFieldInvalid(fieldName,invalid);  }}  }
class C{  public static ConnectionFactory newFailoverConnectionPool(Set<LDAPURL> servers,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){  List<ConnectionFactory> factories=new ArrayList<ConnectionFactory>(servers.size());  for (  LDAPURL ldapurl : servers) {    ConnectionFactory cf=Connections.newFixedConnectionPool(newConnectionFactory(ldapurl,username,password,heartBeatInterval,heartBeatTimeUnit,ldapOptions),maxSize);    factories.add(cf);  }  return loadBalanceFactories(factories);}  }
class C{  public void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {  try {    sessionUtilsWrapper.checkPermissionToSetProperty(clientToken,key,value);  } catch (  SessionException se) {    fireSessionEvent(SessionEventType.PROTECTED_PROPERTY);    sessionLogging.logEvent(toSessionInfo(),SessionEventType.PROTECTED_PROPERTY);    throw se;  }  internalPutProperty(key,value);  debug.message("Updated protected property after validating client identity and permissions");}  }
class C{  @AfterClass public static void afterClass(){  f.clearTestTables();}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  protected void addParams(final StringBuilder uri){  UrlUtils.addParams(getParams(),uri);}  }
class C{  public CryptoException(String message){  super(message);}  }
class C{  protected synchronized void dequeueKeyEvents(long after,Component untilFocused){  if (untilFocused == null) {    return;  }  if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {    focusLog.finer("Dequeue at {0} for {1}",after,untilFocused);  }  TypeAheadMarker marker;  ListIterator<TypeAheadMarker> iter=typeAheadMarkers.listIterator((after >= 0) ? typeAheadMarkers.size() : 0);  if (after < 0) {    while (iter.hasNext()) {      marker=iter.next();      if (marker.untilFocused == untilFocused) {        iter.remove();        return;      }    }  } else {    while (iter.hasPrevious()) {      marker=iter.previous();      if (marker.untilFocused == untilFocused && marker.after == after) {        iter.remove();        return;      }    }  }}  }
class C{  private static boolean seeAllp(){  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    return true;  } else {    if (debug != null) {      if (sm.getClass().getClassLoader() == null && Policy.getPolicyNoCheck().getClass().getClassLoader() == null) {        return true;      }    } else {      try {        sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);        return true;      } catch (      SecurityException se) {      }    }  }  return false;}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void removeContextVersion(Context ctxt,String hostName,String path,String version){  hostName=renameWildcardHost(hostName);  contextObjectToContextVersionMap.remove(ctxt);  MappedHost host=exactFind(hosts,hostName);  if (host == null || host.isAlias()) {    return;  }synchronized (host) {    ContextList contextList=host.contextList;    MappedContext context=exactFind(contextList.contexts,path);    if (context == null) {      return;    }    ContextVersion[] contextVersions=context.versions;    ContextVersion[] newContextVersions=new ContextVersion[contextVersions.length - 1];    if (removeMap(contextVersions,newContextVersions,version)) {      if (newContextVersions.length == 0) {        ContextList newContextList=contextList.removeContext(path);        if (newContextList != null) {          updateContextList(host,newContextList);        }      } else {        context.versions=newContextVersions;      }    }  }}  }
class C{  public void comment(String data) throws org.xml.sax.SAXException {  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  public void validateMetaAliasForNewEntity(String realm,List<String> newMetaAliases) throws SAML2MetaException {  if (null != newMetaAliases && !newMetaAliases.isEmpty()) {    if (newMetaAliases.size() > 1) {      Set checkForDuplicates=new HashSet<String>(newMetaAliases);      if (checkForDuplicates.size() < newMetaAliases.size()) {        debug.error("SAML2MetaManager.validateMetaAliasForNewEntity:Duplicate" + " metaAlias values provided in list:\n" + newMetaAliases);        String[] data={newMetaAliases.toString()};        throw new SAML2MetaException("meta_alias_duplicate",data);      }    }    List<String> allRealmMetaAliaes=getAllHostedMetaAliasesByRealm(realm);    if (!allRealmMetaAliaes.isEmpty()) {      List<String> duplicateMetaAliases=new ArrayList<String>();      for (      String metaAlias : newMetaAliases) {        if (allRealmMetaAliaes.contains(metaAlias)) {          duplicateMetaAliases.add(metaAlias);        }      }      if (!duplicateMetaAliases.isEmpty()) {        StringBuilder sb=new StringBuilder();        for (        String value : duplicateMetaAliases) {          sb.append(value);          sb.append("\t");        }        debug.error("SAML2MetaManager.validateMetaAliasForNewEntity: metaAliases " + sb.toString() + " already exists in the realm: "+ realm);        String[] data={sb.toString(),realm};        throw new SAML2MetaException("meta_alias_exists",data);      }    }  }}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public void handleBtnPreviousRequest(RequestInvocationEvent event){  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String value=(String)getPageSessionAttribute(USER_ATTR_VALUE);  String locale=(String)getPageSessionAttribute(URL_LOCALE);  String initialOrgDN=(String)getPageSessionAttribute(INITIAL_ORG_DN);  PWResetUserValidationViewBean vb=(PWResetUserValidationViewBean)getViewBean(PWResetUserValidationViewBean.class);  vb.setPageSessionAttribute(ORG_DN,initialOrgDN);  vb.setPageSessionAttribute(USER_ATTR_VALUE,value);  vb.setPageSessionAttribute(URL_LOCALE,locale);  String orgDNFlag=(String)getPageSessionAttribute(ORG_DN_FLAG);  if (orgDNFlag != null && orgDNFlag.equals(STRING_TRUE)) {    vb.setPageSessionAttribute(ORG_DN_FLAG,STRING_TRUE);  }  vb.forwardTo(getRequestContext());}  }
class C{  public void displayMultiple(){  ((CardLayout)mainPanel.getLayout()).show(mainPanel,MULTIPLE_SELECTED);}  }
class C{  public final int _exptype(int identity){  return m_exptype.elementAt(identity);}  }
class C{  public ScriptCompiler(ClassLoader parentLoader){  this.compiler=new Compiler(parentLoader);}  }
class C{  public int currentSegment(double[] coords){  if (index >= poly.npoints) {    return SEG_CLOSE;  }  coords[0]=poly.xpoints[index];  coords[1]=poly.ypoints[index];  if (transform != null) {    transform.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    Color fg=this.fg;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        fg=Color.decode(s);      } catch (      NumberFormatException nfe) {      }    }    if (fg != null) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setForeground(attr,fg);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  public static void error(CommandManager mgr,String msg,Throwable t){  dumpToOutput(mgr,msg,t);  mgr.getDebugger().error(msg,t);}  }
class C{  public void clearInMemory(){  state.clear();  state.setSaved(false);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-creation-attributes"}) @Test(groups={"api"}) public void createIdentityWithLongName(String parentRealm,String idType,String entityName,String createAttributes) throws IdRepoException, SSOException {  Object[] params={parentRealm,idType,entityName,createAttributes};  entering("createIdentityWithLongName",params);  try {    String name=entityName;    for (int i=0; i < 100; i++) {      name+=entityName;    }    IdType type=IdUtils.getType(idType);    Map values=CollectionUtils.parseStringToMap(createAttributes);    createIdentity(parentRealm,type,name,values);    deleteIdentity(parentRealm,type,name);  } catch (  SSOException e) {    log(Level.SEVERE,"createIdentityWithLongName",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("createIdentityWithLongName");}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignaturePropertyType createSignaturePropertyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignaturePropertyTypeImpl();}  }
class C{  public void clearLocalSlots(int start,int len){  start+=_currentFrameBottom;  System.arraycopy(m_nulls,0,_stackFrames,start,len);}  }
class C{  private boolean isDomain(String domain){  if (domain == null)   return true;  final int len=domain.length();  int next=0;  while (next < len) {    final char c=domain.charAt(next++);switch (c) {case ':':case '\n':      return false;case '*':case '?':    _domain_pattern=true;  break;}}return true;}  }
class C{  @Override protected Object createSsoServerPolicySvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   policySvcGroup=new SsoServerPolicySvcImpl(this,server); else   policySvcGroup=new SsoServerPolicySvcImpl(this);  return policySvcGroup;}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(3);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.KeysType createKeysType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.KeysTypeImpl();}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public UiLifecycleHelper(Activity activity,Session.StatusCallback callback){  if (activity == null) {    throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);  }  this.activity=activity;  this.callback=callback;  this.receiver=new ActiveSessionBroadcastReceiver();  this.broadcastManager=LocalBroadcastManager.getInstance(activity);  this.pendingFacebookDialogCallStore=PendingCallStore.getInstance();  Settings.sdkInitialize(activity);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.PseudonymBasisElement createPseudonymBasisElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PseudonymBasisElementImpl();}  }
class C{  public FSNameMappingHandler(String entityID,ProviderDescriptorType hostedDesc,BaseConfigType hostedConfig,String metaAlias){  FSUtils.debug.message("FSNameMappingHandler: entering constructor");  hostedEntityID=entityID;  hostedProviderDesc=hostedDesc;  this.hostedConfig=hostedConfig;  this.metaAlias=metaAlias;  this.realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);  try {    accountMgr=FSAccountManager.getInstance(metaAlias);  } catch (  FSAccountMgmtException e) {    FSUtils.debug.error("FSNameMappingHandler: " + FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_ACCOUNT_INSTANCE));  }}  }
class C{  public void testUpdate8(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2=NULL";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      assertNull("value of field2 should be NULL",result.getObject("field2"));    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public char charAt(int index){  return m_str.charAt(index);}  }
class C{  public HashPrintServiceAttributeSet(){  super(PrintServiceAttribute.class);}  }
class C{  public void addAttribute(Attribute attribute,Object value,int beginIndex,int endIndex){  if (attribute == null) {    throw new NullPointerException();  }  if (beginIndex < 0 || endIndex > length() || beginIndex >= endIndex) {    throw new IllegalArgumentException("Invalid substring range");  }  addAttributeImpl(attribute,value,beginIndex,endIndex);}  }
class C{  @Override public void destroy(){}  }
class C{  public Iterator<Integer> ldapIterator(){  return data.ldapStates.keySet().iterator();}  }
class C{  private boolean containsHeader(final Map<String,Object> headerMap,final String headerName){  for (  final String name : headerMap.keySet()) {    if (name.trim().equalsIgnoreCase(headerName)) {      return true;    }  }  return false;}  }
class C{  public void startElement(){  nss.pushContext();  inCollectingMode=true;}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public IdentityResourceV1(String objectType,MailServerLoader mailServerLoader,IdentityServicesImpl identityServices,CoreWrapper coreWrapper,RestSecurityProvider restSecurityProvider,ConsoleConfigHandler configHandler,Set<UiRolePredicate> uiRolePredicates){  this(objectType,null,null,mailServerLoader,identityServices,coreWrapper,restSecurityProvider,configHandler,uiRolePredicates);}  }
class C{  public Duration minusNanos(long nanosToSubtract){  return (nanosToSubtract == Long.MIN_VALUE ? plusNanos(Long.MAX_VALUE).plusNanos(1) : plusNanos(-nanosToSubtract));}  }
class C{  @VisibleForTesting public Uri buildDeepLink(@NonNull Uri deepLink,int minVersion,boolean isAd){  String appCode=getString(R.string.app_code);  String packageName=getApplicationContext().getPackageName();  Uri.Builder builder=new Uri.Builder().scheme("https").authority(appCode + ".app.goo.gl").path("/").appendQueryParameter("link",deepLink.toString()).appendQueryParameter("apn",packageName);  if (isAd) {    builder.appendQueryParameter("ad","1");  }  if (minVersion > 0) {    builder.appendQueryParameter("amv",Integer.toString(minVersion));  }  return builder.build();}  }
class C{  private static int checkPtypes(Class<?>[] ptypes){  int slots=0;  for (  Class<?> ptype : ptypes) {    checkPtype(ptype);    if (ptype == double.class || ptype == long.class) {      slots++;    }  }  checkSlotCount(ptypes.length + slots);  return slots;}  }
class C{  public CompositeName(){  impl=new NameImpl(null);}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void unread(int b) throws IOException {  ensureOpen();  if (pos == 0) {    throw new IOException("Push back buffer is full");  }  buf[--pos]=(byte)b;}  }
class C{  public void testAndNotNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ID3v22Frame(AbstractID3v2Frame frame) throws InvalidFrameException {  logger.config("Creating frame from a frame of a different version");  if (frame instanceof ID3v22Frame) {    throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");  }  if (frame instanceof ID3v24Frame) {    ID3v23Frame v23Frame=new ID3v23Frame(frame);    createV22FrameFromV23Frame(v23Frame);  } else   if (frame instanceof ID3v23Frame) {    createV22FrameFromV23Frame((ID3v23Frame)frame);  }  this.frameBody.setHeader(this);  logger.config("Created frame from a frame of a different version");}  }
class C{  public void stopMasking(){  this.stop=true;}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {  CGIEnvironment cgiEnv=new CGIEnvironment(req,getServletContext());  if (cgiEnv.isValid()) {    CGIRunner cgi=new CGIRunner(cgiEnv.getCommand(),cgiEnv.getEnvironment(),cgiEnv.getWorkingDirectory(),cgiEnv.getParameters());    if ("POST".equals(req.getMethod())) {      cgi.setInput(req.getInputStream());    }    cgi.setResponse(res);    cgi.run();  } else {    res.sendError(404);  }  if (log.isTraceEnabled()) {    String[] cgiEnvLines=cgiEnv.toString().split(System.lineSeparator());    for (    String cgiEnvLine : cgiEnvLines) {      log.trace(cgiEnvLine);    }    printServletEnvironment(req);  }}  }
class C{  @Deactivate protected void deactivate(ComponentContext context){  managedRouter.removeAllRoutes();  managedRoutes.clear();}  }
class C{  private static synchronized String makeDateString(Date date){  return sdfDefault.format(date);}  }
class C{  protected void checkClosingStatus(){  if (getPdfDocument().isClosed()) {    throw new PdfException(PdfException.DocumentClosedItIsImpossibleToExecuteAction);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetnegative.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateentityreferenceknown.class,args);}  }
class C{  public void GetInstance01(boolean mode) throws CertificateException, CRLException {  try {    CertificateFactory.getInstance(null);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i]);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i]);    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider(),mProv);    checkResult(cerF,mode);  }}  }
class C{  public String toString(){  return oid.toString();}  }
class C{  public static String decrypt(String encoded){  return decode(encoded);}  }
class C{  public boolean hasRealAliases() throws KeyStoreException {  if (realAliases == null) {    String[] aliases=getCertificateAliases();    if (aliases == null || aliases.length == 0) {      realAliases=Boolean.FALSE;    } else     if (aliases.length > 1) {      realAliases=Boolean.TRUE;    } else {      CertificateManager certManager2=new CertificateManager(keyStorePath,keyStoreType,password);      String[] aliases2=certManager2.getCertificateAliases();      if (aliases2 != null && aliases2.length == 1) {        realAliases=aliases[0].equalsIgnoreCase(aliases2[0]);      } else {        realAliases=Boolean.FALSE;      }    }  }  return realAliases;}  }
class C{  public static <T>void prefill(final ObjectPool<T> pool,final int count) throws Exception, IllegalArgumentException {  if (pool == null) {    throw new IllegalArgumentException("pool must not be null.");  }  for (int i=0; i < count; i++) {    pool.addObject();  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeName=getStringOptionValue(IArgument.ATTRIBUTE_NAME);  List choiceValues=(List)rc.getOption(IArgument.CHOICE_VALUES);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName,attributeName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_ATTRIBUTE_SCHEMA_CHOICE_VALUE",params);  try {    AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeName,"attribute schema does not exist"};      attributeSchemaNoExist(attributeName,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_CHOICE_VALUE",args);    }    for (Iterator i=choiceValues.iterator(); i.hasNext(); ) {      String choiceValue=(String)i.next();      attrSchema.removeChoiceValue(choiceValue);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_ATTRIBUTE_SCHEMA_CHOICE_VALUE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-remove-choice-value-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("RemoveAttributeSchemaChoiceValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_CHOICE_VALUE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("RemoveAttributeSchemaChoiceValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_CHOICE_VALUE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  public static long[] copyOf(long[] original,int newLength){  long[] copy=new long[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  private static String decode(String s,String enc) throws UnsupportedEncodingException {  boolean needToChange=false;  StringBuffer sb=new StringBuffer();  int numChars=s.length();  int i=0;  if (enc.length() == 0) {    throw new UnsupportedEncodingException("URLDecoder: empty string enc parameter");  }  while (i < numChars) {    char c=s.charAt(i);switch (c) {case '+':      sb.append(' ');    i++;  needToChange=true;break;case '%':try {byte[] bytes=new byte[(numChars - i) / 3];int pos=0;while (((i + 2) < numChars) && (c == '%')) {  bytes[pos++]=(byte)Integer.parseInt(s.substring(i + 1,i + 3),16);  i+=3;  if (i < numChars)   c=s.charAt(i);}if ((i < numChars) && (c == '%')) throw new IllegalArgumentException("URLDecoder: Incomplete trailing " + "escape (%) pattern");sb.append(new String(bytes,0,pos,enc));} catch (NumberFormatException e) {throw new IllegalArgumentException("URLDecoder: Illegal hex characters " + "in escape (%) pattern - " + e.getMessage());}needToChange=true;break;default :sb.append(c);i++;break;}}return (needToChange ? sb.toString() : s);}  }
class C{  public static RepaintManager currentManager(Component c){  return currentManager(AppContext.getAppContext());}  }
class C{  private RMIServer findRMIServerJNDI(String jndiURL,Map<String,?> env,boolean isIiop) throws NamingException {  InitialContext ctx=new InitialContext(EnvHelp.mapToHashtable(env));  Object objref=ctx.lookup(jndiURL);  ctx.close();  if (isIiop)   return narrowIIOPServer(objref); else   return narrowJRMPServer(objref);}  }
class C{  @DataProvider(name="hostnameTestData") public Object[][] createHostnameTestData() throws Exception {  X509Certificate cert1=getTestCertificate("cert1.pem");  X509Certificate cert2=getTestCertificate("cert2.pem");  X509Certificate cert3=getTestCertificate("cert3.pem");  X509Certificate cert4=getTestCertificate("cert4.pem");  X509Certificate cert5=getTestCertificate("cert5.pem");  X509Certificate cert6=getTestCertificate("cert6.pem");  X509Certificate cert7=getTestCertificate("cert7.pem");  X509Certificate cert8=getTestCertificate("cert8.pem");  X509Certificate cert9=getTestCertificate("cert9.pem");  X509Certificate cert10=getTestCertificate("cert10.pem");  X509Certificate cert11=getTestCertificate("cert11.pem");  X509Certificate cert12=getTestCertificate("cert12.pem");  X509Certificate cert13=getTestCertificate("cert13.pem");  return new Object[][]{{cert1,"ldap.example.com",true},{cert1,"ldap2.example.com",false},{cert1,"192.168.0.1",false},{cert1,"2001:db8::1:0:0:1",false},{cert1,"*.example.com",false},{cert2,"ldap.example.com",true},{cert2,"ldap2.example.com",false},{cert2,"192.168.0.1",false},{cert2,"2001:db8::1:0:0:1",false},{cert2,"info",false},{cert3,"ldap.example.org",true},{cert3,"ldap.example.com",false},{cert3,"ldap2.example.org",false},{cert3,"192.168.0.1",false},{cert3,"2001:db8::1:0:0:1",false},{cert4,"ldap.example.org",true},{cert4,"ldap.example.com",true},{cert4,"ldap2.example.org",false},{cert4,"192.168.0.1",false},{cert4,"2001:db8::1:0:0:1",false},{cert5,"ldap.example.com",false},{cert5,"server",false},{cert5,"ldap1.example.com",true},{cert5,"ldap2.example.com",true},{cert6,"ldap.example.com",true},{cert6,"ldap10.example.com",true},{cert6,"ldap.dev.example.com",false},{cert6,"server",false},{cert7,"ldap1.example.com",true},{cert7,"ldap2.example.com",true},{cert7,"ldap.dev.example.com",false},{cert7,"192.168.0.1",false},{cert7,"2001:db8::1:0:0:1",false},{cert7,"ldap.example.org",false},{cert8,"ldap.example.com",true},{cert8,"192.168.0.1",true},{cert8,"ldap2.example.com",false},{cert8,"192.168.0.2",false},{cert8,"2001:db8::1:0:0:1",false},{cert8,"server",false},{cert9,"2001:db8::1:0:0:1",true},{cert9,"ldap.example.com",false},{cert9,"server",false},{cert10,"ldap.example.com",false},{cert10,"server",false},{cert11,"ldap.example.com",false},{cert12,"ldap.example.com",true},{cert12,"server",true},{cert13,"ldap.example.com",true},{cert13,"server",false}};}  }
class C{  public static ModifyRequest newModifyRequest(final String name){  return Requests.newModifyRequest(name).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  @KnownFailure("If no schema is associated: returns empty string where actually null be returned?. Ticket 98") public void test_getTablesLjava_lang_StringLjava_lang_StringLjava_lang_String$Ljava_lang_String() throws SQLException {  String[] tablesName={VIEW_NAME,DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  String[] tablesType={"TABLE","VIEW"};  Arrays.sort(tablesName);  Arrays.sort(tablesType);  ResultSet rs=meta.getTables(null,null,null,null);  while (rs.next()) {    assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);    assertNull("Wrong table schema: " + rs.getString("TABLE_SCHEM"),rs.getString("TABLE_SCHEM"));    assertTrue("Wrong table type",Arrays.binarySearch(tablesType,rs.getString("TABLE_TYPE")) > -1);    assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  }  rs.close();  rs=meta.getTables(conn.getCatalog(),null,null,new String[]{"SYSTEM TABLE","LOCAL TEMPORARY"});  assertFalse("Some tables exist",rs.next());  rs.close();  rs=meta.getTables(conn.getCatalog(),null,null,new String[]{"VIEW","LOCAL TEMPORARY"});  assertTrue("No tables exist",rs.next());  assertEquals("Wrong table name",VIEW_NAME,rs.getString("TABLE_NAME"));  assertNull("Wrong table schema: " + rs.getString("TABLE_SCHEM"),rs.getString("TABLE_SCHEM"));  assertEquals("Wrong table type","VIEW",rs.getString("TABLE_TYPE"));  assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  assertFalse("Wrong size of result set",rs.next());  assertFalse("Some tables exist",rs.next());  rs.close();  rs=meta.getTables(null,null,"%",null);  while (rs.next()) {    assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);    assertNull("Wrong table schema ",rs.getString("TABLE_SCHEM"));    assertTrue("Wrong table type",Arrays.binarySearch(tablesType,rs.getString("TABLE_TYPE")) > -1);    assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  }  rs.close();  conn.close();  try {    meta.getTables(null,null,null,null);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  protected void enableSnmp() throws Exception {  this.snmpPort=TestCaseUtils.findFreePort();  this.trapSnmpPort=TestCaseUtils.findFreePort();  ArrayList<Modification> mods=new ArrayList<Modification>();  InternalClientConnection conn=InternalClientConnection.getRootConnection();  mods.add(new Modification(ModificationType.REPLACE,Attributes.create("ds-cfg-listen-port",String.valueOf(this.snmpPort))));  mods.add(new Modification(ModificationType.REPLACE,Attributes.create("ds-cfg-trap-port",String.valueOf(this.trapSnmpPort))));  String hosts=InetAddress.getLocalHost().getCanonicalHostName();  mods.add(new Modification(ModificationType.ADD,Attributes.create("ds-cfg-traps-destination",hosts)));  String jarFileLocation=System.getProperty("org.opends.server.snmp.opendmk");  mods.add(new Modification(ModificationType.ADD,Attributes.create("ds-cfg-opendmk-jarfile",jarFileLocation + File.separator + "jdmkrt.jar")));  ModifyOperationBasis op=new ModifyOperationBasis(conn,conn.nextOperationID(),conn.nextMessageID(),new ArrayList<Control>(),DN.valueOf("cn=SNMP Connection Handler,cn=Connection Handlers,cn=config"),mods);  op.run();  mods.clear();  mods.add(new Modification(ModificationType.REPLACE,Attributes.create("ds-cfg-enabled","true")));  op=new ModifyOperationBasis(conn,conn.nextOperationID(),conn.nextMessageID(),new ArrayList<Control>(),DN.valueOf("cn=SNMP Connection Handler,cn=Connection Handlers,cn=config"),mods);  op.run();}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPRequest that=(SIPRequest)other;  return requestLine.equals(that.requestLine) && super.equals(other);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedatamiddle.class,args);}  }
class C{  private String updateClassName(String name){  ClassNode cn=getClassNode(name);  if (cn != null) {    return getRefactoredName(cn);  }  return name;}  }
class C{  public ArrayList<ShortcutInfo> bindItems(ArrayList<ShortcutInfo> items){  ArrayList<View> icons=new ArrayList<View>();  ArrayList<ShortcutInfo> extra=new ArrayList<ShortcutInfo>();  for (  ShortcutInfo item : items) {    if (!ALLOW_FOLDER_SCROLL && icons.size() >= mMaxItemsPerPage) {      extra.add(item);    } else {      icons.add(createNewView(item));    }  }  arrangeChildren(icons,icons.size(),false);  return extra;}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  rehash();  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashtableEntry<K,V> e=oldTable[i]; e != null; ) {        HashtableEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashtableEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  private boolean isVLVAttrs(String name){  for (int i=0; i < vlvAttrNames.length; i++) {    if (name.equalsIgnoreCase(vlvAttrNames[i])) {      return true;    }  }  return false;}  }
class C{  public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  if (rootStore == null)   return super.verify(signCert,issuerCert,signDate);  try {    List<VerificationOK> result=new ArrayList<>();    for (    X509Certificate anchor : SignUtils.getCertificates(rootStore)) {      try {        signCert.verify(anchor.getPublicKey());        result.add(new VerificationOK(signCert,this.getClass(),"Certificate verified against root store."));        result.addAll(super.verify(signCert,issuerCert,signDate));        return result;      } catch (      GeneralSecurityException e) {        continue;      }    }    result.addAll(super.verify(signCert,issuerCert,signDate));    return result;  } catch (  GeneralSecurityException e) {    return super.verify(signCert,issuerCert,signDate);  }}  }
class C{  protected static Long convertUuidToLong(UUID uuid){  if (uuid == null) {    return null;  }  Long convertedUuid;  if (uuid.version() == 1) {    convertedUuid=uuid.timestamp();  } else {    convertedUuid=uuid.getMostSignificantBits();  }  return convertedUuid;}  }
class C{  @Override public void close(){  for (  final PooledConnectionManager manager : managers.values()) {    try {      ((CPDSConnectionFactory)manager).getPool().close();    } catch (    final Exception closePoolException) {    }  }  InstanceKeyDataSourceFactory.removeInstance(getInstanceKey());}  }
class C{  public AuthenticationInfo(){  isAuthenticated=false;  isRoot=false;  mustChangePassword=false;  authenticationType=null;  authenticationEntry=null;  authorizationEntry=null;  simpleBindDN=null;  saslMechanism=null;}  }
class C{  public static int sp2px(Context context,float spValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(spValue * scale + 0.5f);}  }
class C{  @Deprecated public void disableResizedPosting(){  resizedPostingDisableCount++;}  }
class C{  protected void updateBaseDNCombo(BackendDescriptor backend){  List<Object> newElements=new ArrayList<>();  for (  BaseDNDescriptor baseDN : backend.getBaseDns()) {    String dn=null;    try {      dn=Utilities.unescapeUtf8(baseDN.getDn().toString());    } catch (    Throwable t) {      throw new RuntimeException("Unexpected error: " + t,t);    }    newElements.add(dn);  }  newElements.add(COMBO_SEPARATOR);  newElements.add(OTHER_BASE_DN);  updateComboBoxModel(newElements,(DefaultComboBoxModel)baseDNs.getModel());}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.EncryptedResourceIDElement createEncryptedResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.EncryptedResourceIDElementImpl();}  }
class C{  public void initializeKeyManagerProviders() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addKeyManagerProviderAddListener(this);  rootConfiguration.addKeyManagerProviderDeleteListener(this);  for (  String name : rootConfiguration.listKeyManagerProviders()) {    KeyManagerProviderCfg providerConfig=rootConfiguration.getKeyManagerProvider(name);    providerConfig.addChangeListener(this);    if (providerConfig.isEnabled()) {      String className=providerConfig.getJavaClass();      try {        KeyManagerProvider provider=loadProvider(className,providerConfig,true);        providers.put(providerConfig.dn(),provider);        DirectoryServer.registerKeyManagerProvider(providerConfig.dn(),provider);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public static void importServerInstance(SSOToken ssoToken,String serverName,String xmlFile) throws SMSException, SSOException, IOException, SAXException, ParserConfigurationException, ConfigurationException {  try {    new URL(serverName);  } catch (  MalformedURLException ex) {    String[] param={serverName};    throw new ConfigurationException("invalid.server.name",param);  }  ServiceConfig cfg=getServerConfig(ssoToken,serverName);  if (cfg == null) {    DocumentBuilder builder=XMLUtils.getSafeDocumentBuilder(false);    Document document=builder.parse(xmlFile);    Element topElement=document.getDocumentElement();    Map map=XMLUtils.parseAttributeValuePairTags((Node)topElement);    ServiceConfig sc=getRootServerConfigWithRetry(ssoToken);    if (sc != null) {      String serverId=getNextId(ssoToken);      Set setID=new HashSet(2);      setID.add(serverId);      map.put(ATTR_SERVER_ID,setID);      sc.addSubConfig(serverName,SUBSCHEMA_SERVER,0,map);      updateOrganizationAlias(ssoToken,serverName,true);    }  }}  }
class C{  private static String[] tokenizeToStringArray(String str,String delimiters){  if (str == null) {    return null;  }  StringTokenizer st=new StringTokenizer(str,delimiters);  List<String> tokens=new ArrayList<String>();  while (st.hasMoreTokens()) {    String token=st.nextToken();    token=token.trim();    if (token.length() > 0) {      tokens.add(token);    }  }  return tokens.toArray(new String[tokens.size()]);}  }
class C{  private MethodDef parse_method_def_no_par() throws SyntaxException {  LineCol lineCol=current.getLineCol();  String name=((Element)current).getContent();  Set<AST.Anno> annoSet=new HashSet<>(annos);  annos.clear();  Set<Modifier> modSet=new HashSet<>(modifiers);  modifiers.clear();  nextNode(true);  if (current == null || current instanceof EndingNode) {    return new MethodDef(name,modSet,null,Collections.emptyList(),annoSet,Collections.emptyList(),lineCol);  } else   if (current instanceof ElementStartNode) {    return new MethodDef(name,modSet,null,Collections.emptyList(),annoSet,parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false),lineCol);  } else   if (current instanceof Element) {    try {      expecting(":",current.previous(),current,err);    } catch (    SyntaxException ignore) {      expecting("=",current.previous(),current,err);      return new MethodDef(name,modSet,null,Collections.emptyList(),annoSet,Collections.singletonList(next_exp(false)),lineCol);    }    nextNode(false);    AST.Access type=parse_cls_for_type_spec();    if (current == null || current instanceof EndingNode) {      return new MethodDef(name,modSet,type,Collections.emptyList(),annoSet,Collections.emptyList(),lineCol);    } else     if (current instanceof ElementStartNode) {      return new MethodDef(name,modSet,type,Collections.emptyList(),annoSet,parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false),lineCol);    } else     if (current instanceof Element && ((Element)current).getContent().equals("=")) {      return new MethodDef(name,modSet,type,Collections.emptyList(),annoSet,Collections.singletonList(next_exp(false)),lineCol);    } else {      err.UnexpectedTokenException("end of definition or method body",current.toString(),current.getLineCol());      err.debug("assume it's empty body");      return new MethodDef(name,modSet,type,Collections.emptyList(),annoSet,Collections.emptyList(),lineCol);    }  } else   throw new LtBug("unknown node type");}  }
class C{  public void test_checkServerTrusted_03() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setX509Certificate();  xtm.checkServerTrusted(xcert,"SSL");}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryResponseElement createQueryResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryResponseElementImpl();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public static XMPDateTime createFromCalendar(Calendar calendar){  return new XMPDateTimeImpl(calendar);}  }
class C{  void noteBytesRead(int pBytes){  bytesRead+=pBytes;  notifyListener();}  }
class C{  public static Request processAuthHeader(Authenticator authenticator,Response response,Proxy proxy) throws IOException {  return response.code() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,response) : authenticator.authenticate(proxy,response);}  }
class C{  private TextHitInfo(int charIndex,boolean isLeadingEdge){  this.charIndex=charIndex;  this.isLeadingEdge=isLeadingEdge;}  }
class C{  public void findMethodFromInterfaceWithArguments(String name,List<Value> argList,SInterfaceDef sInterfaceDef,int mode,List<SMethodDef> matchedMethods,boolean checkSuper) throws SyntaxException {  out:   for (  SMethodDef m : sInterfaceDef.methods()) {    if (!m.name().equals(name))     continue;    if (mode == FIND_MODE_STATIC) {      if (!m.modifiers().contains(SModifier.STATIC))       continue;    } else     if (mode == FIND_MODE_NON_STATIC) {      if (m.modifiers().contains(SModifier.STATIC))       continue;    }    List<SParameter> parameters=m.getParameters();    if (parameters.size() == argList.size()) {      for (int i=0; i < parameters.size(); ++i) {        SParameter param=parameters.get(i);        Value v=argList.get(i);        if (!param.type().isAssignableFrom(v.type())) {          if (!(param.type() instanceof PrimitiveTypeDef) && v.type() instanceof PrimitiveTypeDef) {            v=boxPrimitive(v,LineCol.SYNTHETIC);            if (!param.type().isAssignableFrom(v.type()))             continue out;          } else           continue out;        }      }      if (!whetherTheMethodIsOverriddenByMethodsInTheList(m,matchedMethods))       matchedMethods.add(m);    }  }  if (checkSuper) {    for (    SInterfaceDef i : sInterfaceDef.superInterfaces()) {      findMethodFromInterfaceWithArguments(name,argList,i,mode,matchedMethods,true);    }  }}  }
class C{  private boolean checkResourceType(ResourceBase resource){  if (!(container instanceof Context)) {    return true;  }  if (resource.getInjectionTargets() == null || resource.getInjectionTargets().size() == 0) {    return true;  }  Context context=(Context)container;  String typeName=resource.getType();  Class<?> typeClass=null;  if (typeName != null) {    typeClass=Introspection.loadClass(context,typeName);    if (typeClass == null) {      return true;    }  }  Class<?> compatibleClass=getCompatibleType(context,resource,typeClass);  if (compatibleClass == null) {    return false;  }  resource.setType(compatibleClass.getCanonicalName());  return true;}  }
class C{  public static int bitCount(long v){  v-=(v >>> 1) & 0x5555555555555555L;  v=(v & 0x3333333333333333L) + ((v >>> 2) & 0x3333333333333333L);  int i=((int)(v >>> 32)) + (int)v;  i=(i & 0x0F0F0F0F) + ((i >>> 4) & 0x0F0F0F0F);  i+=i >>> 8;  i+=i >>> 16;  return i & 0x0000007F;}  }
class C{  public void testBitLengthPositive2(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(96,aNumber.bitLength());}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  protected void onBeforeResetProfile(){}  }
class C{  public static void deregisterAlertGenerator(AlertGenerator alertGenerator){  DirectoryServer.deregisterAlertGenerator(alertGenerator);}  }
class C{  public void map(MessageBytes host,MessageBytes uri,String version,MappingData mappingData) throws IOException {  if (host.isNull()) {    host.getCharChunk().append(defaultHostName);  }  host.toChars();  uri.toChars();  internalMap(host.getCharChunk(),uri.getCharChunk(),version,mappingData);}  }
class C{  void sendNotification(Date timeStamp,TimerNotification notification){  if (TIMER_LOGGER.isLoggable(Level.FINER)) {    StringBuilder strb=new StringBuilder().append("sending timer notification:").append("\n\tNotification source = ").append(notification.getSource()).append("\n\tNotification type = ").append(notification.getType()).append("\n\tNotification ID = ").append(notification.getNotificationID()).append("\n\tNotification date = ").append(timeStamp);    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendNotification",strb.toString());  }  long curSeqNumber;synchronized (this) {    sequenceNumber=sequenceNumber + 1;    curSeqNumber=sequenceNumber;  }synchronized (notification) {    notification.setTimeStamp(timeStamp.getTime());    notification.setSequenceNumber(curSeqNumber);    this.sendNotification((TimerNotification)notification.cloneTimerNotification());  }  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendNotification","timer notification sent");}  }
class C{  public static String normalize(CharSequence src,Form form){  return NativeNormalizer.normalize(src,form);}  }
class C{  public boolean selectInputMethod(Locale locale){  return false;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  if (!equals(beanContextChildPeer) && !(beanContextChildPeer instanceof Serializable))   throw new IOException("BeanContextChildSupport beanContextChildPeer not Serializable"); else   oos.defaultWriteObject();}  }
class C{  protected void doClick(MenuSelectionManager msm){  if (!isInternalFrameSystemMenu()) {    BasicLookAndFeel.playSound(menuItem,getPropertyPrefix() + ".commandSound");  }  if (msm == null) {    msm=MenuSelectionManager.defaultManager();  }  msm.clearSelectedPath();  menuItem.doClick(0);}  }
class C{  public static boolean pointInView(View v,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("<group groupname=\"");  sb.append(groupname);  sb.append("\"");  if (description != null) {    sb.append(" description=\"");    sb.append(description);    sb.append("\"");  }synchronized (roles) {    if (roles.size() > 0) {      sb.append(" roles=\"");      int n=0;      Iterator<Role> values=roles.iterator();      while (values.hasNext()) {        if (n > 0) {          sb.append(',');        }        n++;        sb.append((values.next()).getRolename());      }      sb.append("\"");    }  }  sb.append("/>");  return (sb.toString());}  }
class C{  private void encodeV3(ByteStringBuilder buffer,EntryEncodeConfig config) throws DirectoryException {  buffer.appendByte(0x03);  config.encode(buffer);  if (!config.excludeDN()) {    byte[] dnBytes=getBytes(dn.toString());    buffer.appendBERLength(dnBytes.length);    buffer.appendBytes(dnBytes);  }  if (config.compressObjectClassSets()) {    config.getCompressedSchema().encodeObjectClasses(buffer,objectClasses);  } else {    buffer.appendBERLength(objectClasses.size());    for (    String ocName : objectClasses.values()) {      buffer.appendUtf8(ocName);      buffer.appendByte(0x00);    }  }  encodeAttributes(buffer,userAttributes,config);  encodeAttributes(buffer,operationalAttributes,config);}  }
class C{  public Advice createAdvice(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ADVICE);  if (obj == null) {    return new AdviceImpl();  } else {    return (Advice)obj;  }}  }
class C{  public ObjectName(String domain,Hashtable<String,String> table) throws MalformedObjectNameException {  construct(domain,table);}  }
class C{  private int accumDefaultEscape(Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  int pos=accumDefaultEntity(writer,ch,i,chars,len,fromTextNode,escLF);  if (i == pos) {    if (Encodings.isHighUTF16Surrogate(ch)) {      char next;      int codePoint=0;      if (i + 1 >= len) {        throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch)}));      } else {        next=chars[++i];        if (!(Encodings.isLowUTF16Surrogate(next)))         throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch) + " " + Integer.toHexString(next)}));        codePoint=Encodings.toCodePoint(ch,next);      }      writer.write("&#");      writer.write(Integer.toString(codePoint));      writer.write(';');      pos+=2;    } else {      if (isCharacterInC0orC1Range(ch) || isNELorLSEPCharacter(ch)) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else       if ((!escapingNotNeeded(ch) || ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch)))) && m_elemContext.m_currentElemDepth > 0) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else {        writer.write(ch);      }      pos++;    }  }  return pos;}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    if (cookie instanceof ClientCookie && !((ClientCookie)cookie).containsAttribute(ClientCookie.VERSION_ATTR)) {      throw new MalformedCookieException("Violates RFC 2965. Version attribute is required.");    }  }}  }
class C{  void addChronoChangedListener(Consumer<Chronology> listener){  if (chronoListeners == null) {    chronoListeners=new ArrayList<Consumer<Chronology>>();  }  chronoListeners.add(listener);}  }
class C{  static boolean isConfigurationAcceptable(ReplicationDomainCfg configuration,List<LocalizableMessage> unacceptableReasons){  final DN dn=configuration.getBaseDN();  LDAPReplicationDomain domain=MultimasterReplication.findDomain(dn,null);  if (domain != null && domain.getBaseDN().equals(dn)) {    unacceptableReasons.add(ERR_SYNC_INVALID_DN.get());    return false;  }  if (DirectoryServer.getBackend(dn) == null) {    unacceptableReasons.add(ERR_UNKNOWN_DN.get(dn));    return false;  }  try {    isFractionalConfigAcceptable(configuration);  } catch (  ConfigException e) {    unacceptableReasons.add(e.getMessageObject());    return false;  }  return true;}  }
class C{  public InvalidValue(String reason){  super(reason);}  }
class C{  @DataProvider(name="createChildDNTestData") public Object[][] createChildDNTestData(){  return new Object[][]{{"","",""},{"","dc=org","dc=org"},{"","dc=opendj,dc=org","dc=opendj,dc=org"},{"dc=org","","dc=org"},{"dc=org","dc=opendj","dc=opendj,dc=org"},{"dc=org","dc=foo,dc=opendj","dc=foo,dc=opendj,dc=org"},{"dc=opendj,dc=org","","dc=opendj,dc=org"},{"dc=opendj,dc=org","dc=foo","dc=foo,dc=opendj,dc=org"},{"dc=opendj,dc=org","dc=bar,dc=foo","dc=bar,dc=foo,dc=opendj,dc=org"}};}  }
class C{  public static void updateCoins(){  int coins=Integer.parseInt(coinCount.getText().replaceAll("[^0-9]",""));  coinCount.setText("x" + ++coins);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  NodeList clonedList;  Node clonedChild;  String clonedChildName;  NodeList origList;  Node origChild;  String origChildName;  java.util.List result=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  origList=employeeNode.getChildNodes();  for (int indexN10065=0; indexN10065 < origList.getLength(); indexN10065++) {    origChild=(Node)origList.item(indexN10065);    origChildName=origChild.getNodeName();    expected.add(origChildName);  }  clonedNode=employeeNode.cloneNode(true);  clonedList=clonedNode.getChildNodes();  for (int indexN1007B=0; indexN1007B < clonedList.getLength(); indexN1007B++) {    clonedChild=(Node)clonedList.item(indexN1007B);    clonedChildName=clonedChild.getNodeName();    result.add(clonedChildName);  }  assertEquals("clone",expected,result);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public boolean imageUpdate(Image img,int infoflags,int x,int y,int w,int h){  Icon iconDisplayed=null;  if (!model.isEnabled()) {    if (model.isSelected()) {      iconDisplayed=getDisabledSelectedIcon();    } else {      iconDisplayed=getDisabledIcon();    }  } else   if (model.isPressed() && model.isArmed()) {    iconDisplayed=getPressedIcon();  } else   if (isRolloverEnabled() && model.isRollover()) {    if (model.isSelected()) {      iconDisplayed=getRolloverSelectedIcon();    } else {      iconDisplayed=getRolloverIcon();    }  } else   if (model.isSelected()) {    iconDisplayed=getSelectedIcon();  }  if (iconDisplayed == null) {    iconDisplayed=getIcon();  }  if (iconDisplayed == null || !SwingUtilities.doesIconReferenceImage(iconDisplayed,img)) {    return false;  }  return super.imageUpdate(img,infoflags,x,y,w,h);}  }
class C{  private Promise<ResourceResponse,ResourceException> queryRelationship(final Context context,final String managedObjectId){  try {    final String resourceFullPath=resourceContainer.child(managedObjectId).toString();    final QueryRequest queryRequest=Requests.newQueryRequest(REPO_RESOURCE_PATH).setQueryId(RELATIONSHIP_QUERY_ID).setAdditionalParameter(QUERY_FIELD_RESOURCE_PATH,resourceFullPath).setAdditionalParameter(QUERY_FIELD_FIELD_NAME,schemaField.getName()).setAdditionalParameter(PARAM_MANAGED_OBJECT_ID,managedObjectId);    final List<ResourceResponse> relationships=new ArrayList<>();    getConnection().query(context,queryRequest,relationships);    if (relationships.isEmpty()) {      return new NotFoundException().asPromise();    } else     if (relationships.size() == 1) {      return newResultPromise(formatResponse(context,queryRequest).apply(relationships.get(0)));    } else {      List<String> errorReferences=new ArrayList<>();      for (      ResourceResponse relationship : relationships) {        JsonValue content=relationship.getContent();        if (schemaField.isReverseRelationship() && content.get(REPO_FIELD_FIRST_ID).defaultTo("").asString().equals(resourceFullPath)) {          errorReferences.add(content.get(REPO_FIELD_SECOND_ID).asString());        } else {          errorReferences.add(content.get(REPO_FIELD_FIRST_ID).asString());        }      }      ResourceResponse relationship=relationships.get(0);      relationship.getContent().add(RelationshipUtil.REFERENCE_ERROR,true);      relationship.getContent().add(RelationshipUtil.REFERENCE_ERROR_MESSAGE,"Multiple references found for singleton relationship " + errorReferences);      return newResultPromise(formatResponse(context,queryRequest).apply(relationship));    }  } catch (  ResourceException e) {    return e.asPromise();  }}  }
class C{  private void cleanupTasks(){  Set<Task> toClean=new HashSet<>();  for (  Task task : tasks) {    if (task.getState() == Task.State.FINISHED_SUCCESSFULLY || task.getState() == Task.State.FINISHED_WITH_ERROR) {      toClean.add(task);    }  }  for (  Task task : toClean) {    unregisterTask(task);  }}  }
class C{  private static BigInteger smallPrime(int bitLength,int certainty,Random rnd){  int magLen=(bitLength + 31) >>> 5;  int temp[]=new int[magLen];  int highBit=1 << ((bitLength + 31) & 0x1f);  int highMask=(highBit << 1) - 1;  while (true) {    for (int i=0; i < magLen; i++)     temp[i]=rnd.nextInt();    temp[0]=(temp[0] & highMask) | highBit;    if (bitLength > 2)     temp[magLen - 1]|=1;    BigInteger p=new BigInteger(temp,1);    if (bitLength > 6) {      long r=p.remainder(SMALL_PRIME_PRODUCT).longValue();      if ((r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0)|| (r % 11 == 0)|| (r % 13 == 0)|| (r % 17 == 0)|| (r % 19 == 0)|| (r % 23 == 0)|| (r % 29 == 0)|| (r % 31 == 0)|| (r % 37 == 0)|| (r % 41 == 0))       continue;    }    if (bitLength < 4)     return p;    if (p.primeToCertainty(certainty,rnd))     return p;  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  private static String makeKeyFromRecord(ConnectionRecord rec){  ConnectionWrapper conn=rec.conn.getConnectionWrapper();  return (conn.isLdaps() ? "LDAPS" : "LDAP") + ":" + conn.getHostPort();}  }
class C{  public CertException(int code,String moredata){  verfCode=code;  moreData=moredata;}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  public boolean isBedSpawn(){  return this.isBedSpawn;}  }
class C{  @Override public boolean shouldShowRequestPermissionRationale(@NonNull final String permission){  return delegate.shouldShowRequestPermissionRationale(permission);}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ContextRuleSet(String prefix,boolean create){  this.namespaceURI=null;  this.prefix=prefix;  this.create=create;}  }
class C{  protected void enableClusteredSession(Router router){  router.route().handler(CookieHandler.create());  router.route().handler(SessionHandler.create(ClusteredSessionStore.create(vertx,"shopping.user.session")));}  }
class C{  public ConditionDecision(boolean allowed,long timeToLive,Map advices){  this.allowed=allowed;  this.timeToLive=timeToLive;  this.advices=advices;}  }
class C{  public void reportEvent(ValidatableObject source,Exception nestedException) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,nestedException.toString(),new ValidationEventLocatorImpl(source),nestedException));}  }
class C{  public static String constructUserKey(String lang,String country,Map<String,String> hyphPatNames){  String userKey=null;  if (hyphPatNames != null) {    String key=constructLlccKey(lang,country);    key=key.replace('_','-');    userKey=hyphPatNames.get(key);  }  return userKey;}  }
class C{  public FailedLoginException(String msg){  super(msg);}  }
class C{  private void checkImportDataArguments(Collection<LocalizableMessage> errorMessages){  addErrorMessageIfArgumentsConflict(errorMessages,addBaseEntryArg,importLDIFArg);  addErrorMessageIfArgumentsConflict(errorMessages,addBaseEntryArg,sampleDataArg);  addErrorMessageIfArgumentsConflict(errorMessages,importLDIFArg,sampleDataArg);  addErrorMessageIfArgumentsConflict(errorMessages,addBaseEntryArg,rejectedImportFileArg);  addErrorMessageIfArgumentsConflict(errorMessages,rejectedImportFileArg,sampleDataArg);  addErrorMessageIfArgumentsConflict(errorMessages,addBaseEntryArg,skippedImportFileArg);  addErrorMessageIfArgumentsConflict(errorMessages,skippedImportFileArg,sampleDataArg);  final boolean noBaseDNProvided=!baseDNArg.isPresent() && baseDNArg.getDefaultValue() == null;  if (noPromptArg.isPresent() && noBaseDNProvided) {    final Argument[] args={importLDIFArg,addBaseEntryArg,sampleDataArg,backendTypeArg};    for (    Argument arg : args) {      if (arg.isPresent()) {        errorMessages.add(ERR_INSTALLDS_NO_BASE_DN_AND_CONFLICTING_ARG.get("--" + arg.getLongIdentifier()));      }    }  }}  }
class C{  @Override public void loadPlugins(File[] files,Map<World,List<String>> worldPlugins,List<String> serverPlugins,Collection<World> serverWorlds){  final Map<String,PluginInfos> infosMap=new HashMap<>();  final List<String> serverPluginsVersions=new ArrayList<>(serverPlugins.size());  final List<PluginInfos> nonGlobalServerPlugins=new ArrayList<>();  final List<Throwable> errors=new ArrayList<>();  log.debug("Gathering informations about the plugins...");  for (  File file : files) {    try {      PluginClassLoader classLoader=new PluginClassLoader(file.toURI().toURL(),GLOBAL_CLASS_SHARER);      Class<? extends Plugin> clazz=PluginClassFinder.findPluginClass(file,classLoader);      if (clazz == null) {        throw new PluginClassNotFoundException(file);      }      PluginDescription description=clazz.getAnnotation(PluginDescription.class);      if (description == null) {        throw new MissingPluginDescriptionException(clazz);      }      PluginInfos infos=new PluginInfos(clazz,classLoader,description);      infosMap.put(description.name(),infos);      log.trace("Valid plugin found: {} -> infos: {}.",file,infos);    } catch (    Exception|NoClassDefFoundError error) {      errors.add(error);    }  }  log.debug("Resolving dependencies for the actual server plugins...");  DependencyResolver resolver=new DependencyResolver();  for (Iterator<String> it=serverPlugins.iterator(); it.hasNext(); ) {    String plugin=it.next();    PluginInfos infos=infosMap.get(plugin);    if (ServerPlugin.class.isAssignableFrom(infos.clazz)) {      serverPluginsVersions.add(infos.description.version());      resolver.addToResolve(infos.description);    } else {      it.remove();      for (      Map.Entry<World,List<String>> entry : worldPlugins.entrySet()) {        entry.getValue().add(plugin);      }    }  }  Solution solution=resolver.resolve(errors);  log.debug("Solution: {}",solution.resolvedOrder);  log.info("{} out of {} server plugins will be loaded.",solution.resolvedOrder.size(),serverPluginsVersions.size());  for (  Throwable ex : solution.errors) {    log.error(ex.toString());  }  errors.clear();  log.debug("Loading the server plugins...");  for (  String plugin : solution.resolvedOrder) {    PluginInfos infos=infosMap.get(plugin);    infos.setWorlds(serverWorlds);    loadServerPlugin(infos);  }  log.info("Loading plugins per world...");  for (  Map.Entry<World,List<String>> entry : worldPlugins.entrySet()) {    final World world=entry.getKey();    final List<String> plugins=entry.getValue();    log.debug("Resolving dependencies for the plugins of the world {}...",world.getName());    resolver=new DependencyResolver();    resolver.addAvailable(serverPlugins,serverPluginsVersions);    for (    String plugin : plugins) {      PluginInfos infos=infosMap.get(plugin);      resolver.addToResolve(infos.description);    }    solution=resolver.resolve(errors);    log.debug("Solution: {}",solution.resolvedOrder);    log.info("{} out of {} plugins will be loaded in world {}.",solution.resolvedOrder.size(),plugins.size(),world);    for (    Throwable ex : solution.errors) {      log.error(ex.toString());    }    log.debug("Loading the plugins in world {}...",world.getName());    for (    String plugin : solution.resolvedOrder) {      PluginInfos infos=infosMap.get(plugin);      try {        if (ServerPlugin.class.isAssignableFrom(infos.clazz)) {          infos.getWorlds().add(world);          nonGlobalServerPlugins.add(infos);        } else         if (WorldPlugin.class.isAssignableFrom(infos.clazz)) {          loadWorldPlugin(infos,world);        } else {          loadOtherPlugin(infos,world);        }      } catch (      Exception ex) {        log.error("Unable to load the plugin {}.",plugin,ex);      }    }  }  log.info("Loading the non-global server plugins...");  for (  PluginInfos infos : nonGlobalServerPlugins) {    loadServerPlugin(infos);  }}  }
class C{  private static String createSOAPReceiverUrl(com.sun.identity.saml.common.SAMLServiceManager.SOAPEntry destSite,String to) throws IOException, SAMLException {  if (destSite == null || to == null || to.length() == 0) {    throw new SAMLException(SAMLUtils.bundle.getString("nullInput"));  }  String authtype=destSite.getAuthType();  String urlEndpoint=null;  int idnx=-1;  if ((idnx=to.indexOf("//")) == -1) {    SAMLUtils.debug.error("SAMLClient:createSOAPReceiverUrl:" + "Illegal format of input parameter.");    throw new SAMLException(SAMLUtils.bundle.getString("illegalFormatSOAPUrl"));  }  String protocol=to.substring(0,idnx - 1);  if (authtype.equalsIgnoreCase(SAMLConstants.BASICAUTH) || authtype.equalsIgnoreCase(SAMLConstants.NOAUTH)) {    if (!protocol.equals(SAMLConstants.HTTP)) {      if (SystemConfigurationUtil.isServerMode()) {        String[] data={SAMLUtils.bundle.getString("mismatchAuthTypeandProtocol")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.AUTH_PROTOCOL_MISMATCH,data);      }      throw new SAMLException(SAMLUtils.bundle.getString("mismatchAuthTypeandProtocol"));    }  } else   if (authtype.equalsIgnoreCase(SAMLConstants.SSLWITHBASICAUTH) || authtype.equalsIgnoreCase(SAMLConstants.SSL)) {    if (!protocol.equals(SAMLConstants.HTTPS)) {      if (SystemConfigurationUtil.isServerMode()) {        String[] data={SAMLUtils.bundle.getString("mismatchAuthTypeandProtocol")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.AUTH_PROTOCOL_MISMATCH,data);      }      throw new SAMLException(SAMLUtils.bundle.getString("mismatchAuthTypeandProtocol"));    }  } else {    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("wrongAuthType")};      LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_AUTH_TYPE,data);    }    throw new SAMLException(SAMLUtils.bundle.getString("wrongAuthType"));  }  if (authtype.equalsIgnoreCase(SAMLConstants.BASICAUTH) || authtype.equalsIgnoreCase(SAMLConstants.SSLWITHBASICAUTH)) {    String username=destSite.getBasicAuthUserID();    String password=destSite.getBasicAuthPassword();    if (username == null || password == null) {      SAMLUtils.debug.error("SAMLClient:createSOAPReceiverUrl:" + "PartnerSite required basic authentication. But the " + "user name or password used for authentication is null.");      throw new SAMLException(SAMLUtils.bundle.getString("wrongConfigBasicAuth"));    }    String toSOAP=to.substring(0,idnx + 2) + username + ":"+ password+ "@"+ to.substring(idnx + 2);    urlEndpoint=toSOAP;  } else {    urlEndpoint=to;  }  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("Sending message to URL: " + urlEndpoint);  }  if (SystemConfigurationUtil.isServerMode()) {    String[] data={SAMLUtils.bundle.getString("SOAPReceiverURL"),urlEndpoint};    LogUtils.access(java.util.logging.Level.FINE,LogUtils.SOAP_RECEIVER_URL,data);  }  return urlEndpoint;}  }
class C{  public String toString(){  return (this.toString(true,false));}  }
class C{  public InvalidDescriptionException(final Throwable cause){  super("Invalid plugin.yml",cause);}  }
class C{  public void handleTblHandlersButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSAuthNServicesHandlersAddViewBean vb=(WSAuthNServicesHandlersAddViewBean)getViewBean(WSAuthNServicesHandlersAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public MethodNotSupportedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthenticationStatementElement createAuthenticationStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementElementImpl();}  }
class C{  private void popContentSource(){  buffer=nextContentSource.buffer;  position=nextContentSource.position;  limit=nextContentSource.limit;  nextContentSource=nextContentSource.next;}  }
class C{  public ButtonTiledView(View parent,String name){  super(parent,name);  setPrimaryModel((DatasetModel)getDefaultModel());  registerChildren();}  }
class C{  protected ApplicationWrapper createApplicationWrapper(JsonValue jsonValue) throws EntitlementException {  try {    return mapper.readValue(jsonValue.toString(),ApplicationWrapper.class);  } catch (  IOException e) {    throw new EntitlementException(EntitlementException.INVALID_CLASS,e.getCause().getMessage());  }}  }
class C{  public static String encode(byte[] rawData){  ifNull(rawData);  StringBuilder buffer=new StringBuilder(4 * rawData.length / 3);  int pos=0;  int iterations=rawData.length / 3;  for (int i=0; i < iterations; i++) {    int value=((rawData[pos++] & 0xFF) << 16) | ((rawData[pos++] & 0xFF) << 8) | (rawData[pos++] & 0xFF);    buffer.append(BASE64_ALPHABET[(value >>> 18) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 12) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 6) & 0x3F]);    buffer.append(BASE64_ALPHABET[value & 0x3F]);  }switch (rawData.length % 3) {case 1:    buffer.append(BASE64_ALPHABET[(rawData[pos] >>> 2) & 0x3F]);  buffer.append(BASE64_ALPHABET[(rawData[pos] << 4) & 0x3F]);buffer.append("==");break;case 2:int value=((rawData[pos++] & 0xFF) << 8) | (rawData[pos] & 0xFF);buffer.append(BASE64_ALPHABET[(value >>> 10) & 0x3F]);buffer.append(BASE64_ALPHABET[(value >>> 4) & 0x3F]);buffer.append(BASE64_ALPHABET[(value << 2) & 0x3F]);buffer.append("=");break;}return buffer.toString();}  }
class C{  public short popShort(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Short value=(Short)wrapper.getValue();  return value.shortValue();}  }
class C{  protected void paintRow(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (editingComponent != null && editingRow == row)   return;  int leadIndex;  if (tree.hasFocus()) {    leadIndex=getLeadSelectionRow();  } else   leadIndex=-1;  Component component;  component=currentCellRenderer.getTreeCellRendererComponent(tree,path.getLastPathComponent(),tree.isRowSelected(row),isExpanded,isLeaf,row,(leadIndex == row));  rendererPane.paintComponent(g,component,tree,bounds.x,bounds.y,bounds.width,bounds.height,true);}  }
class C{  private void redirectForAuthentication(HttpServletRequest request,HttpServletResponse response,String policyAdviceList) throws IOException {  StringBuilder redirectURL=new StringBuilder(1024);  String authURL=null;  Cookie authCookie=CookieUtils.getCookieFromReq(request,authURLCookieName);  if (authCookie != null) {    authURL=CookieUtils.getCookieValue(authCookie);    if (debug.messageEnabled()) {      debug.message("CDCServlet.redirectForAuthentiation: " + "got an authenticated URL: " + authURL);    }  }  try {    if ((authURL == null) || (authURL.length() == 0) || (policyAdviceList != null)|| !authURL.toLowerCase().startsWith("http")) {      String finalURL=getRedirectURL(request,response);      if (finalURL != null) {        StringBuilder gotoURL=new StringBuilder(1024);        gotoURL.append(deployDescriptor).append(CDCURI).append(QUESTION_MARK).append(TARGET_PARAMETER).append(EQUALS).append(URLEncDec.encode(finalURL)).append(AMP).append(getParameterString(request));        String loginURI=request.getParameter(LOGIN_URI);        String cdcUri;        if (loginURI != null && !finalURL.isEmpty() && isValidCDCURI(loginURI)) {          if (debug.messageEnabled()) {            debug.message("CDCServlet.redirectForAuthentication:found " + LOGIN_URI + "="+ loginURI);          }          cdcUri=loginURI;        } else {          cdcUri=AUTHURI;        }        if (debug.messageEnabled()) {          debug.message("CDCServlet.redirectForAuthentication: redirect URL is set to = " + cdcUri);        }        if (cdcUri.indexOf(QUESTION_MARK) == -1) {          redirectURL.append(cdcUri).append(QUESTION_MARK);        } else {          redirectURL.append(cdcUri).append(AMP);        }        String resourceAuth=request.getParameter(ISAuthConstants.IP_RESOURCE_ENV_PARAM);        if ((resourceAuth != null) && resourceAuth.equalsIgnoreCase("true")) {          redirectURL.append(ISAuthConstants.RESOURCE_URL_PARAM).append(EQUALS);          String resourceUrl=request.getParameter(ISAuthConstants.RESOURCE_URL_PARAM);          if (resourceUrl == null) {            redirectURL.append(URLEncDec.encode(finalURL)).append(AMP);          } else {            redirectURL.append(URLEncDec.encode(resourceUrl)).append(AMP);          }        }        if (policyAdviceList != null) {          redirectURL.append(policyAdviceList).append(AMP);        }        redirectURL.append(GOTO_PARAMETER).append(EQUALS).append(URLEncDec.encode(gotoURL.toString()));        if (debug.messageEnabled()) {          debug.message("CDCServlet.redirectForAuthentication:" + " final forward URL=" + redirectURL.toString());        }        RequestDispatcher dispatcher=request.getRequestDispatcher(redirectURL.toString());        dispatcher.forward(request,response);      }    } else {      boolean valid=false;      for (      String serverId : WebtopNaming.getAllServerIDs()) {        String serverUrl=WebtopNaming.getServerFromID(serverId);        serverUrl=serverUrl.substring(0,serverUrl.length() - deployDescriptor.length());        if (StringUtils.compareCaseInsensitiveString(serverUrl,authURL)) {          valid=true;          break;        }      }      if (!valid) {        response.sendError(HttpURLConnection.HTTP_BAD_REQUEST,"Invalid cookie");        return;      }      redirectURL.append(authURL).append(deployDescriptor).append(CDCURI).append(QUESTION_MARK).append(request.getQueryString());      authCookie.setValue("");      response.addCookie(authCookie);      response.sendRedirect(redirectURL.toString());    }    if (debug.messageEnabled()) {      debug.message("Forwarding for authentication to: " + redirectURL);    }  } catch (  Exception e) {    debug.error("CDCServlet.redirectForAuthentication",e);    showError(response);  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  cstate.resetStackFrameSize();  m_inArgsSize=0;}  }
class C{  public static GenericControl newControl(final String oid){  return new GenericControl(oid,false,null);}  }
class C{  public Builder noTransform(){  this.noTransform=true;  return this;}  }
class C{  public StreamBitratePropertiesChunk(final BigInteger chunkLen){  super(GUID.GUID_STREAM_BITRATE_PROPERTIES,chunkLen);  this.bitRates=new ArrayList<Long>();  this.streamNumbers=new ArrayList<Integer>();}  }
class C{  public static Object unifyReferences(final Hashtable hash,Object object){  final Object itemAtHash=hash.get(object.hashCode());  if (itemAtHash == null) {    hash.put(object.hashCode(),object);  } else {    object=itemAtHash;  }  return object;}  }
class C{  public Trie(){  m_Root=new Node();  m_lowerCaseOnly=false;}  }
class C{  public void remove_all_doors(ExpandRoom p_room){  for (  ExpandDoor curr_door : p_room.get_doors()) {    ExpandRoom other_room=curr_door.other_room(p_room);    if (other_room == null)     continue;    other_room.remove_door(curr_door);    if (other_room instanceof ExpandRoomFreespaceIncomplete) {      remove_incomplete_expansion_room((ExpandRoomFreespaceIncomplete)other_room);    }  }  p_room.clear_doors();}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public final void disable(){  redirect=null;}  }
class C{  private static void writeDelete(LDIFWriter writer,Entry entry) throws IOException {  writer.writeDeleteChangeRecord(entry,true);  writer.flush();}  }
class C{  public static BlockMultiPlaceEvent callBlockMultiPlaceEvent(World world,EntityHuman who,EnumHand hand,List<BlockState> blockStates,int clickedX,int clickedY,int clickedZ){  CraftWorld craftWorld=world.getWorld();  CraftServer craftServer=world.getServer();  Player player=(Player)who.getBukkitEntity();  Block blockClicked=craftWorld.getBlockAt(clickedX,clickedY,clickedZ);  boolean canBuild=true;  for (int i=0; i < blockStates.size(); i++) {    if (!canBuild(craftWorld,player,blockStates.get(i).getX(),blockStates.get(i).getZ())) {      canBuild=false;      break;    }  }  org.bukkit.inventory.ItemStack item;  if (hand == EnumHand.MAIN_HAND) {    item=player.getInventory().getItemInMainHand();  } else {    item=player.getInventory().getItemInOffHand();  }  BlockMultiPlaceEvent event=new BlockMultiPlaceEvent(blockStates,blockClicked,item,player,canBuild);  craftServer.getPluginManager().callEvent(event);  return event;}  }
class C{  private static String writeUrlInPath(String url,String cookieStr,short encodingScheme){  String sessionDelimiter=SLASH_SESS_DELIMITER;  if (encodingScheme == SessionUtils.SEMICOLON) {    sessionDelimiter=SESS_DELIMITER;  }  StringBuilder encodedURLBuf=new StringBuilder();  if (url.indexOf(cookieStr) == -1) {    int i=url.indexOf(QUERY);    if (i != -1) {      String uri=url.substring(0,i);      String query=url.substring(i,url.length());      encodedURLBuf.append(uri).append(sessionDelimiter).append(cookieStr).append(query);    } else {      encodedURLBuf.append(url).append(sessionDelimiter).append(cookieStr);    }  } else {    encodedURLBuf.append(url);  }  String encodedURL=encodedURLBuf.toString();  if (debug.messageEnabled()) {    debug.message("writeUrlInPath : encoded URL : " + encodedURL);  }  return encodedURL;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public Location subtract(double x,double y,double z){  this.x-=x;  this.y-=y;  this.z-=z;  return this;}  }
class C{  public XMLReaderAdapter() throws SAXException {  setup(XMLReaderFactory.createXMLReader());}  }
class C{  public long now(){  return currentTimeMillis();}  }
class C{  public FREE_MEM(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static MatchingResourcePath resourcePath(String path){  return new MatchingResourcePath(ResourcePath.resourcePath(path));}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://ecommerce.org/schema";  String qualifiedName="prefix:myDoc";  String publicId="http://www.localhost.com";  String systemId="myDoc.dtd";  Document doc;  DOMImplementation domImpl;  DocumentType newType=null;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newType=domImpl.createDocumentType(qualifiedName,publicId,systemId);  nodeName=newType.getNodeName();  assertEquals("nodeName","prefix:myDoc",nodeName);  nodeValue=newType.getNodeValue();  assertNull("nodeValue",nodeValue);}  }
class C{  public void add_int(int p_int){  if (!write_enabled)   return;  try {    file_writer.write((new Integer(p_int)).toString());    file_writer.write("\n");  } catch (  IOException e2) {    System.out.println("unable to write integer to logfile");  }}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (!portMatch(port,cookie.getPorts())) {      throw new MalformedCookieException("Port attribute violates RFC 2965: " + "Request port not found in cookie's port list.");    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequestSecurityTokenTemplateType createRequestSecurityTokenTemplateType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequestSecurityTokenTemplateTypeImpl();}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.removeUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public void handleMessage(@NotNull IUser user,@NotNull TLUpdateShortMessage message){  try {    handleMessageInternal(user,message.getMessage());  } catch (  RpcException e) {    BotLogger.severe(LOGTAG,e);  }}  }
class C{  public static String leftTrim(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.replaceAll("^\\s+","");}  }
class C{  private boolean expand_to_target_doors(MazeListElement p_list_element,boolean p_next_room_is_thick,boolean p_curr_door_is_small,PlaPointFloat p_shape_entry_middle){  if (p_curr_door_is_small) {    boolean enter_through_small_door=false;    if (p_list_element.door instanceof ExpandDoor) {      ExpandRoomComplete from_room=((ExpandDoor)p_list_element.door).other_room_complete(p_list_element.next_room);      if (from_room instanceof ExpandRoomObstacle) {        enter_through_small_door=true;      }    }    if (!enter_through_small_door)     return false;  }  boolean result=false;  for (  ExpandDoorItem to_door : p_list_element.next_room.get_target_doors()) {    if (to_door == p_list_element.door)     continue;    ShapeTile target_shape=((BrdConnectable)to_door.item).get_trace_connection_shape(art_engine.art_search_tree,to_door.tree_entry_no);    PlaPointFloat connection_point=target_shape.nearest_point_approx(p_shape_entry_middle);    if (!p_next_room_is_thick) {      NetNosList curr_net_no_arr=new NetNosList(art_ctrl.net_no);      int curr_layer=p_list_element.next_room.get_layer();      PlaPointIntAlist check_points=new PlaPointIntAlist(2);      check_points.add(p_shape_entry_middle.round());      check_points.add(connection_point.round());      if (check_points.get(0).equals(check_points.get(1)))       continue;      Polyline check_polyline=new Polyline(check_points);      boolean check_ok=r_board.check_trace(check_polyline,art_ctrl.trace_half_width[curr_layer],curr_layer,curr_net_no_arr,art_ctrl.trace_clearance_idx,art_ctrl.max_shove_trace_recursion_depth,art_ctrl.max_shove_via_recursion_depth,art_ctrl.max_spring_over_recursion_depth);      if (!check_ok)       continue;    }    PlaSegmentFloat new_shape_entry=new PlaSegmentFloat(connection_point,connection_point);    if (expand_to_door_section(to_door,0,new_shape_entry,p_list_element,0,MazeAdjustment.NONE))     result=true;  }  return result;}  }
class C{  public void destroy(){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("destroy",true);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    destroy();  } finally {    _releaseReply($in);  }}  }
class C{  public DsTableEntryImpl(SnmpMib mib,MBeanServer server,int index){  super(mib);  this.server=server;  this.monitor=SNMPMonitor.getMonitor(server);  this.applIndex=new Integer(index);}  }
class C{  public static PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme,URL rURL,Authenticator.RequestorType reqType){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.url=rURL;  thisAuthenticator.rt=reqType;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  String attrName;  java.util.Collection attrList=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(2);  addrAttr=testAddr.getAttributes();  for (int indexN10070=0; indexN10070 < addrAttr.getLength(); indexN10070++) {    attrNode=(Node)addrAttr.item(indexN10070);    attrName=attrNode.getNodeName();    attrList.add(attrName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrNames_html",htmlExpected,attrList);  } else {    assertEquals("attrNames",expected,attrList);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new NotSerializableException();}  }
class C{  public boolean processPostAuthnSSO(FSAuthnRequest authnRequest){  FSUtils.debug.message("FSSSOAndFedHandler.processPostAuthnSSO: Called");  SessionProvider sessionProvider=null;  try {    sessionProvider=SessionManager.getProvider();    if (ssoToken == null) {      ssoToken=sessionProvider.getSession(request);    }    if ((ssoToken == null) || (!sessionProvider.isValid(ssoToken))) {      FSUtils.debug.error("FSSSOAndFedHandler.processPostAuthnSSO: " + "session is not valid.");      return false;    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler.processPostAuthnSSO: " + "session is valid.");      }    }  } catch (  SessionException se) {    FSUtils.debug.error("FSSSOAndFedHandler.processPostAuthnSSO: ",se);    return false;  }  String userID=null;  String sessionID=null;  try {    userID=sessionProvider.getPrincipalName(ssoToken);    sessionID=sessionProvider.getSessionID(ssoToken);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedHandler.processPostAuthnSSO: " + "UserID of the principal in the session: " + userID + "sessionID of the session: "+ sessionID);    }  } catch (  SessionException ex) {    FSUtils.debug.error("FSSSOAndFedHandler.processPostAuthnSSO: " + "SessionException occured. " + "Principal information not found in the session: ",ex);    return false;  }  FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);  FSSession session=sessionManager.getSession(userID,sessionID);  if (session != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedHandler.processPostAuthnSSO: " + "An existing SSO session found with ID:" + session.getSessionID());    }    session.addSessionPartner(new FSSessionPartner(spEntityId,false));    sessionManager.addSession(userID,session);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedHandler.processPostAuthnSSO: " + "No existing SSO session found. " + "Entering a new session to the session manager with ID: "+ sessionID);    }    session=new FSSession(sessionID);    String sessionIndex=SAMLUtils.generateID();    session.setSessionIndex(sessionIndex);    session.addSessionPartner(new FSSessionPartner(spEntityId,false));    sessionManager.addSession(userID,session);  }  String autoFedStr=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.ENABLE_AUTO_FEDERATION);  if (authnRequest.getFederate() || (autoFedStr != null && autoFedStr.equalsIgnoreCase("true"))) {    FSAccountFedInfo fedInfo=doAccountFederation(ssoToken,authnRequest,session);    NameIdentifier spNI=null;    NameIdentifier idpNI=null;    if (fedInfo == null) {      FSUtils.debug.error("FSSSOAndFedHandler.processPostAuthnSSO: " + "Accountfederation failed");      return false;    } else {      spNI=fedInfo.getRemoteNameIdentifier();      idpNI=fedInfo.getLocalNameIdentifier();      if (idpNI == null) {        idpNI=fedInfo.getRemoteNameIdentifier();        if (idpNI == null) {          FSUtils.debug.error("FSSSOAndFedHandler.processPost" + "AuthnSSO: Opaque handle not found");          return false;        }      }      if (spNI == null) {        spNI=idpNI;      }    }    return doSingleSignOn(ssoToken,authnRequest.getRequestID(),spNI,idpNI);  } else {    return doSingleSignOn(ssoToken,authnRequest.getRequestID());  }}  }
class C{  @Override public void write(int oneByte) throws IOException {  Streams.writeSingleByte(this,oneByte);}  }
class C{  @Override public void replaceSelection(String content){  if (!isEditable()) {    UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);    return;  }  EditorKit kit=getEditorKit();  if (kit instanceof StyledEditorKit) {    try {      Document doc=getDocument();      Caret caret=getCaret();      boolean composedTextSaved=saveComposedText(caret.getDot());      int p0=Math.min(caret.getDot(),caret.getMark());      int p1=Math.max(caret.getDot(),caret.getMark());      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(p0,p1 - p0,content,((StyledEditorKit)kit).getInputAttributes());      } else {        if (p0 != p1) {          doc.remove(p0,p1 - p0);        }        if (content != null && content.length() > 0) {          doc.insertString(p0,content,((StyledEditorKit)kit).getInputAttributes());        }      }      if (composedTextSaved) {        restoreComposedText();      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);    }  } else {    super.replaceSelection(content);  }}  }
class C{  public Float(float x,float y,float w,float h){  setFrame(x,y,w,h);}  }
class C{  public FileImageOutputStream(File f) throws FileNotFoundException, IOException {  this(f == null ? null : new RandomAccessFile(f,"rw"));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturenoversion.class,args);}  }
class C{  float nextTab(float h){  if (mTabs != null) {    return mTabs.nextTab(h);  }  return Layout.TabStops.nextDefaultStop(h,Layout.TAB_INCREMENT);}  }
class C{  public int size(){  return size;}  }
class C{  private Socket[] newSocketChannelPair() throws IOException {  ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();  serverSocketChannel.socket().bind(new InetSocketAddress(0));  SocketChannel clientSocketChannel=SocketChannel.open();  clientSocketChannel.connect(serverSocketChannel.socket().getLocalSocketAddress());  SocketChannel server=serverSocketChannel.accept();  serverSocketChannel.close();  return new Socket[]{clientSocketChannel.socket(),server.socket()};}  }
class C{  public void constrainViewportRect(float left,float top,float right,float bottom){  viewportRect.set(left,top,right,bottom);}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "index="+ index+ ","+ "bias="+ bias+ "]";}  }
class C{  public void testReceive_BlockNoServerReadonly() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerReadonly();}  }
class C{  public NodeChangeEvent(Preferences parent,Preferences child){  super(parent);  this.child=child;}  }
class C{  public static Color fromRGB(int rgb) throws IllegalArgumentException {  Validate.isTrue((rgb >> 24) == 0,"Extrenuous data in: ",rgb);  return fromRGB(rgb >> 16 & BIT_MASK,rgb >> 8 & BIT_MASK,rgb >> 0 & BIT_MASK);}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  public ActionEvent(Object source,int id,String command,long when,int modifiers){  super(source,id);  this.actionCommand=command;  this.when=when;  this.modifiers=modifiers;}  }
class C{  @Override public void onClick(DialogInterface dialog,int which){  if (which == DialogInterface.BUTTON_POSITIVE) {    int value=0;    for (int i=0; i < 6; i++) {      if (mCheckedItems[i]) {        value+=1 << i;      }    }    mPrefs.edit().putInt(mKey,value).commit();  }  mIcons.recycle();}  }
class C{  public long skip(long n) throws IOException {  if (n < 0) {    throw new IllegalArgumentException("negative skip length");  }  ensureOpen();  int max=(int)Math.min(n,Integer.MAX_VALUE);  int total=0;  while (total < max) {    int len=max - total;    if (len > b.length) {      len=b.length;    }    len=read(b,0,len);    if (len == -1) {      reachEOF=true;      break;    }    total+=len;  }  return total;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public static void processMouseDragged(MouseEvent e){  sharedInstance._processMouseDragged(e);}  }
class C{  @RequestMapping(value="/users/{login:" + Constants.LOGIN_REGEX + "}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){  log.debug("REST request to delete User: {}",login);  userService.deleteUser(login);  return ResponseEntity.ok().headers(HeaderUtil.createAlert("userManagement.deleted",login)).build();}  }
class C{  public boolean isWheelScrollingEnabled(){  return wheelScrollState;}  }
class C{  private static void executeOnRootDSE(Operation operation,LocalBackendWorkflowElement workflow) throws CanceledOperationException {  OperationType operationType=operation.getOperationType();  if (operationType == OperationType.SEARCH) {    executeSearch((SearchOperation)operation,workflow);  } else {    workflow.execute(operation);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    if (serverTransaction == null) {      serverTransaction=sipProvider.getNewServerTransaction(request);    }    Response okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Unexpected exception ");  }}  }
class C{  public FrameBodyTOWN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public String toString(){  return typeString;}  }
class C{  public boolean remove_if_cycle(BrdTracep p_trace){  if (!p_trace.is_on_the_board())   return false;  if (!p_trace.has_cycle())   return false;  int curr_layer=p_trace.get_layer();  PlaPoint[] end_corners=new PlaPoint[2];  end_corners[0]=p_trace.corner_first();  end_corners[1]=p_trace.corner_last();  boolean[] tail_at_endpoint_before=new boolean[2];  for (int index=0; index < 2; ++index) {    BrdTracep tail=get_trace_tail(end_corners[index],curr_layer,p_trace.net_nos);    tail_at_endpoint_before[index]=(tail != null);  }  Set<BrdItem> connection_items=p_trace.get_connection_items();  remove_items_unfixed(connection_items);  for (int index=0; index < 2; ++index) {    if (tail_at_endpoint_before[index])     continue;    BrdTracep tail=get_trace_tail(end_corners[index],curr_layer,p_trace.net_nos);    if (tail == null)     continue;    remove_items_unfixed(tail.get_connection_items());  }  return true;}  }
class C{  public boolean equals(Object o){  return map.equals(o);}  }
class C{  public WorldCreator generatorSettings(String generatorSettings){  this.generatorSettings=generatorSettings;  return this;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Override public Set<Object> keySet(){  checkInitialized();  return Collections.unmodifiableSet(super.keySet());}  }
class C{  public void paint(Graphics g,Shape a){  if (c != null) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    c.setBounds(alloc.x,alloc.y,alloc.width,alloc.height);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPEntryType createIDPEntryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPEntryTypeImpl();}  }
class C{  public void testCreateDocument1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  boolean success=false;  try {    domImpl.createDocument(namespaceURI,malformedName,docType);  } catch (  DOMException ex) {    success=(ex.code == DOMException.NAMESPACE_ERR);  }  assertTrue("throw_NAMESPACE_ERR",success);}  }
class C{  public int size(){  return this.values.size();}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  if (!(event.getSource() instanceof Context))   return;  if (event.getPropertyName().equals("reloadable")) {    try {      setReloadable(((Boolean)event.getNewValue()).booleanValue());    } catch (    NumberFormatException e) {      log.error(sm.getString("webappLoader.reloadable",event.getNewValue().toString()));    }  }}  }
class C{  public void printJobNoMoreEvents(PrintJobEvent pje){}  }
class C{  private final boolean isTextType(int type){  return (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.updateFoo(foo);}  }
class C{  public Element first(){  return (state != null) ? state.first() : null;}  }
class C{  public SAML11RequestedSecurityToken(Node token) throws WSFederationException {  String classMethod="SAML11RequestedSecurityToken.SAML11RequestedSecurityToken(Node)";  if (!token.getLocalName().equals("RequestedSecurityToken")) {    debug.error("Got node " + token.getLocalName() + " (expecting "+ SAMLConstants.assertionSAMLNameSpaceURI+ ":"+ SAMLConstants.TAG_ASSERTION+ ")");    throw new WSFederationException(WSFederationUtils.bundle.getString("invalidToken"));  }  Element ae=(Element)token.getFirstChild();  if (!(ae.getNamespaceURI().equals(SAMLConstants.assertionSAMLNameSpaceURI) && ae.getLocalName().equals(SAMLConstants.TAG_ASSERTION))) {    debug.error("Got node " + ae.getLocalName() + " (expecting "+ SAMLConstants.assertionSAMLNameSpaceURI+ ":"+ SAMLConstants.TAG_ASSERTION+ ")");    throw new WSFederationException(WSFederationUtils.bundle.getString("invalidToken"));  }  this.assertionE=ae;  try {    assertion=new Assertion(ae);  } catch (  SAMLException se) {    if (debug.messageEnabled()) {      debug.message("Caught SAMLException, " + "rethrowing",se);    }    throw new WSFederationException(se);  }  if (debug.messageEnabled()) {    debug.message(classMethod + "found Assertion with issuer:" + assertion.getIssuer());  }  List signs=XMLUtils.getElementsByTagNameNS1(ae,SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.XMLSIG_ELEMENT_NAME);  int signsSize=signs.size();  if (signsSize == 1) {    xmlString=XMLUtils.print(ae);    signed=true;    if (debug.messageEnabled()) {      debug.message(classMethod + "found signature");    }  } else   if (signsSize != 0) {    if (debug.messageEnabled()) {      debug.message(classMethod + "included more than one Signature element.");    }    throw new WSFederationException(WSFederationUtils.bundle.getString("moreElement"));  }}  }
class C{  public boolean isOperational(){  return getUsage().isOperational();}  }
class C{  public void test_WantClientAuth() throws UnknownHostException, IOException {  SSLSocket ssl=getSSLSocket();  ssl.setWantClientAuth(true);  assertTrue(ssl.getWantClientAuth());  ssl.setWantClientAuth(false);  assertFalse(ssl.getWantClientAuth());  ssl.close();}  }
class C{  public void firePrivilegeChanged(String serviceName,Set affectedResourceNames,int changeType){  if (DEBUG.messageEnabled()) {    StringBuilder sb=new StringBuilder();    sb.append("at firePrivilegeChanged(serrviceName,affectedResourceNames):");    sb.append(serviceName).append(":");    sb.append(affectedResourceNames.toString());    DEBUG.message(sb.toString());  }  PolicyEvent policyEvent=new PolicyEvent();  policyEvent.setResourceNames(affectedResourceNames);  policyEvent.setChangeType(changeType);  Set pListeners=(Set)policyListenersMap.get(serviceName);  if (pListeners != null) {    Iterator listeners=pListeners.iterator();    while (listeners.hasNext()) {      PolicyListener policyListener=(PolicyListener)listeners.next();      try {        policyListener.policyChanged(policyEvent);      } catch (      Exception e) {        DEBUG.error("policy change not handled properly",e);      }    }  }  PolicyEvaluator.policyChanged(serviceName,policyEvent);}  }
class C{  public boolean isFacePainted(BlockFace face){  byte data=getData();  if (data == MushroomBlockTexture.ALL_PORES.getData() || data == MushroomBlockTexture.STEM_SIDES.getData() || data == MushroomBlockTexture.ALL_STEM.getData()) {    return false;  }switch (face) {case WEST:    return data < NORTH_LIMIT;case EAST:  return data > SOUTH_LIMIT;case NORTH:return data % EAST_WEST_LIMIT == EAST_REMAINDER;case SOUTH:return data % EAST_WEST_LIMIT == WEST_REMAINDER;case UP:return true;case DOWN:case SELF:return data == MushroomBlockTexture.ALL_CAP.getData();default :return false;}}  }
class C{  public static List<Foo> findByUuid(java.lang.String uuid){  return getPersistence().findByUuid(uuid);}  }
class C{  public IIOMetadataNode(){}  }
class C{  public void login(IndexType indexType,String indexName,String[] params,Map envMap) throws AuthLoginException {  login(indexType,indexName,params,envMap,null,null);}  }
class C{  private int findMax(int[] lastPositions){  int max=lastPositions[0];  for (  int value : lastPositions) {    if (value > max) {      max=value;    }  }  return max;}  }
class C{  static void clear(){  if (debug.messageEnabled()) {    debug.message("SAML2MetaCache.clear() called");  }  descriptorCache.clear();  configCache.clear();}  }
class C{  public void remove(BrdItem p_item){  if (!p_item.is_on_the_board())   return;  for (  AwtreeShapeSearch curr_tree : search_trees) {    AwtreeNodeLeaf[] curr_tree_entries=p_item.get_search_tree_entries(curr_tree);    if (curr_tree_entries == null)     continue;    curr_tree.remove(curr_tree_entries);  }  p_item.clear_search_tree_entries();  p_item.set_on_the_board(false);}  }
class C{  public static byte[] serializeECPoint(ECPointFormat[] ecPointFormats,ECPoint point) throws IOException {  short[] pf=convertPointFormats(ecPointFormats);  return TlsECCUtils.serializeECPoint(pf,point);}  }
class C{  public boolean supportsAuthentication(){  if (debug.messageEnabled()) {    debug.message("AMSDKRepo: supportsAuthentication." + " authenticationEnabled=" + true);  }  return (true);}  }
class C{  public String formatMulticastAddress(String addr,int ttl,int numAddrs){  String res=addr + "/" + ttl+ "/"+ numAddrs;  return res;}  }
class C{  public FrameBodyXSOA(){}  }
class C{  private String resolveDebugFileName(){  if (mergeAllMode) {    return DebugConstants.CONFIG_DEBUG_MERGEALL_FILE;  } else {    String nm=INSTANCE_NAMES.get(debugName);    if (nm != null) {      return nm;    } else {      return debugName;    }  }}  }
class C{  public void run(){synchronized (map) {synchronized (thisTurn) {      map.keySet().removeAll(thisTurn);      thisTurn.clear();    }  }synchronized (nextTurn[containerNeeded - 1]) {    Set tempSet=thisTurn;    for (int i=0; i < containerNeeded + 1; i++) {      if (i == 0) {        thisTurn=nextTurn[0];      } else {        if (i == containerNeeded) {          nextTurn[containerNeeded - 1]=tempSet;        } else {          nextTurn[i - 1]=nextTurn[i];        }      }    }  }}  }
class C{  public TokenBucket(Ticker ticker,ThrottlingRate rate){  Reject.ifNull(ticker);  this.ticker=ticker;  this.throttlingRate=rate;  this.capacity=rate.getNumberOfRequests();  this.duration=rate.getDuration().to(NANOSECONDS);  this.nanosToWaitForNextToken=(long)Math.ceil(duration / (double)capacity);  this.state=new AtomicReference<>();}  }
class C{  public ConfigManagerException(){  super();}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum > 3) || (argNum < 2))   reportWrongNumberArgs();}  }
class C{  public ArraySpliterator(Object[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public int put(int key,int value){  Entry[] tab=table;  int index=(key & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.key == key) {      int old=e.value;      e.value=value;      return old;    }  }  if (count >= threshold) {    rehash();    tab=table;    index=(key & 0x7FFFFFFF) % tab.length;  }  Entry e=new Entry(key,value,tab[index]);  tab[index]=e;  count++;  return 0;}  }
class C{  public FrameBodyETCO(final ByteBuffer byteBuffer,final int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  protected void doFlush(boolean realFlush) throws IOException {  if (suspended) {    return;  }  try {    doFlush=true;    if (initial) {      coyoteResponse.sendHeaders();      initial=false;    }    if (cb.getLength() > 0) {      cb.flushBuffer();    }    if (bb.getLength() > 0) {      bb.flushBuffer();    }  }  finally {    doFlush=false;  }  if (realFlush) {    coyoteResponse.action(ActionCode.CLIENT_FLUSH,null);    if (coyoteResponse.isExceptionPresent()) {      throw new ClientAbortException(coyoteResponse.getErrorException());    }  }}  }
class C{  public ScriptCompiler add(String classPath) throws IOException {  compiler.add(classPath);  return this;}  }
class C{  private String createAddress(AddressType ae){  StringBuffer sb=new StringBuffer();  DSTString postalAddress=ae.getPostalAddress();  if (postalAddress != null) {    sb.append("PostalAddress=").append(postalAddress.getValue()).append("|");  }  DSTString city=ae.getL();  if (city != null) {    sb.append("L=").append(city.getValue()).append("|");  }  DSTString state=ae.getSt();  if (state != null) {    sb.append("St=").append(state.getValue()).append("|");  }  DSTString postalCode=ae.getPostalCode();  if (postalCode != null) {    sb.append("PostalCode=").append(postalCode.getValue()).append("|");  }  DSTString country=ae.getC();  if (country != null) {    sb.append("C=").append(country.getValue()).append("|");  }  return sb.toString();}  }
class C{  public ConfigGeneratorApi(ToolOptions options){  super(options);}  }
class C{  public void addChild(MappedClass child){  children.put(child.getOriginalName(),child);}  }
class C{  public boolean isAllowed(SSOToken token,DelegationPermission permission,Map envParams) throws SSOException, DelegationException {  SSOTokenID tokenId;  PolicyDecision pd;  String resource=null;  boolean result=false;  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl.isAllowed() is called");  }  if ((token != null) && ((tokenId=token.getTokenID()) != null) && (permission != null)) {    String tokenIdStr=tokenId.toString();    Set actions=permission.getActions();    if ((actions != null) && (!actions.isEmpty())) {      if (GLOBALCONFIG.equals(permission.getConfigType()) && actions.equals(Collections.singleton(READ))) {        return hasDelegationPermissionsForRealm(token,token.getProperty(ISAuthConstants.ORGANIZATION));      }      try {        resource=getResourceName(permission);        pd=getResultFromCache(tokenIdStr,resource,envParams);        if (pd != null) {          if (DelegationManager.debug.messageEnabled()) {            DelegationManager.debug.message("got delegation evaluation result from cache.");          }        } else {          pd=pe.getPolicyDecision(token,resource,null,envParams);          putResultIntoCache(tokenIdStr,resource,envParams,pd);          if (DelegationManager.debug.messageEnabled()) {            DelegationManager.debug.message("put delegation evaluation result into cache.");          }        }        Map ads=pd.getActionDecisions();        if ((ads != null) && (!ads.isEmpty())) {          result=true;          Iterator it=actions.iterator();          while (it.hasNext() && result) {            String actionName=(String)it.next();            ActionDecision ad=(ActionDecision)ads.get(actionName);            if (ad != null) {              Set values=ad.getValues();              if ((values == null) || values.isEmpty() || values.contains(ACTION_DENY)) {                result=false;              }            } else {              result=false;            }          }        }      } catch (      PolicyException pe) {        throw new DelegationException(pe);      }    }    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("DelegationPolicyImpl.isAllowed(): " + "actions=" + actions + "  resource="+ resource+ "  result is:"+ result);    }  }  return result;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public synchronized NSObject[] allObjects(){  return set.toArray(new NSObject[count()]);}  }
class C{  public Builder noUserModification(boolean isNoUserModification){  this.isNoUserModification=isNoUserModification;  return this;}  }
class C{  public CollectionRelationshipProvider(final ConnectionFactory connectionFactory,final ResourcePath resourcePath,final SchemaField schemaField,final ActivityLogger activityLogger,final ManagedObjectSetService managedObjectSyncService){  super(connectionFactory,resourcePath,schemaField,activityLogger,managedObjectSyncService);  final Router router=new Router();  router.addRoute(RoutingMode.STARTS_WITH,uriTemplate(String.format("{%s}/%s",PARAM_MANAGED_OBJECT_ID,schemaField.getName())),Resources.newHandler(this));  this.requestHandler=router;}  }
class C{  public void test_parkUntil_3() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(1);  Parker parker=new Parker(barrier,true,1000);  Thread parkerThread=new Thread(parker);  UNSAFE.unpark(parkerThread);  parkerThread.start();  parker.assertDurationIsInRange(0);  parkerThread.join();}  }
class C{  public static void clean(String suffix){}  }
class C{  void pushBaseIndentifier(String baseID){  if (null != baseID) {    int posOfHash=baseID.indexOf('#');    if (posOfHash > -1) {      m_fragmentIDString=baseID.substring(posOfHash + 1);      m_shouldProcess=false;    } else     m_shouldProcess=true;  } else   m_shouldProcess=true;  m_baseIdentifiers.push(baseID);}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  protected String[] filterWatchedResources(StandardContext context,String[] wresources) throws Exception {  File configBase=configBase(context);  String confContext=new File(System.getProperty("catalina.base"),"conf/context.xml").getCanonicalPath();  String confWeb=new File(System.getProperty("catalina.base"),"conf/web.xml").getCanonicalPath();  String confHostDefault=new File(configBase,"context.xml.default").getCanonicalPath();  String configFile=(context.getConfigFile() != null ? new File(context.getConfigFile().toURI()).getCanonicalPath() : null);  String webxml="WEB-INF/web.xml";  List<String> resource=new ArrayList<>();  for (int i=0; i < wresources.length; i++) {    if (wresources[i].equals(confContext))     continue;    if (wresources[i].equals(confWeb))     continue;    if (wresources[i].equals(confHostDefault))     continue;    if (wresources[i].equals(configFile))     continue;    if (wresources[i].equals(webxml))     continue;    resource.add(wresources[i]);  }  return resource.toArray(new String[resource.size()]);}  }
class C{  public OpenDJProvider(final URI configFile){  this(configFile != null ? parseConfig(configFile) : null);}  }
class C{  private void handleNewPrivileges() throws SSOException, SMSException {  for (  ChangeSet<String,Node> change : newPrivileges) {    final String configName=change.getIdentifier();    final Node configNode=change.getData();    final Map<String,Set<String>> newAttributes=parseAttributeValuePairTags(configNode);    privilegesConfig.addSubConfig(configName,PRIVILEGE,CONFIG_PRIORITY,newAttributes);  }}  }
class C{  public boolean isOnline(){  return online;}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {  super.endNode(node);  if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {    m_transformer.getXPathContext().popCurrentNode();  }}  }
class C{  public String type(){  return type;}  }
class C{  private void clearSession(SSOToken ssoToken) throws SSOException {  ssoToken.setProperty(SAML2Constants.RELAY_STATE,"");  ssoToken.setProperty(SAML2Constants.SESSION_INDEX,"");  ssoToken.setProperty(SAML2Constants.IDPENTITYID,"");  ssoToken.setProperty(SAML2Constants.SPENTITYID,"");  ssoToken.setProperty(SAML2Constants.METAALIAS,"");  ssoToken.setProperty(SAML2Constants.REQ_BINDING,"");  ssoToken.setProperty(SAML2Constants.NAMEID,"");  ssoToken.setProperty(Constants.IS_TRANSIENT,"");  ssoToken.setProperty(Constants.REQUEST_ID,"");  ssoToken.setProperty(Constants.CACHE_KEY,"");}  }
class C{  protected UserException(){  super();}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  boolean hasAttribute(final AttributeType attributeType){  for (  final TemplateLine line : templateLines) {    if (line.getAttributeType().equals(attributeType)) {      return true;    }  }  return false;}  }
class C{  public void clearance_value_changed(){  Iterator<AwtreeShapeSearch> iter=search_trees.iterator();  while (iter.hasNext()) {    AwtreeShapeSearch curr_tree=iter.next();    if (curr_tree.compensated_clearance_class_no != default_tree.compensated_clearance_class_no) {      iter.remove();    }  }}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public void reshape(int x,int y,int width,int height){  super.reshape(x,y,width,height);  validate();  repaint();}  }
class C{  private int performModRdnOperation(boolean authentication) throws Exception {  String path=TestCaseUtils.createTempFile("dn: o=rejectTestCase,o=Test","changetype: modrdn","newrdn: o=mod_rejectTestCase","deleteoldrdn: 0");  return LDAPModify.mainModify(modRdnArgs(authentication,path),false,null,null);}  }
class C{  protected boolean verifyRequestSignature(Element elt,SOAPMessage msg,X509Certificate cert){  FSUtils.debug.message("FSSOAPReceiver::verifyRequestSignature: Called");  try {    if (cert == null) {      FSUtils.debug.error("FSSOAPReceiver.verifyRequestSignature" + ": couldn't obtain this site's cert.");      throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSOAPReceiver::verifyRequestSignature: " + "Provider's cert is found. " + "\nxmlString to be verified: "+ XMLUtils.print(elt));    }    XMLSignatureManager manager=XMLSignatureManager.getInstance();    Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);    return manager.verifyXMLSignature(doc,cert);  } catch (  Exception e) {    FSUtils.debug.error("FSSOPAReceiver::verifyRequestSignature " + " Exception occured while verifying signature:",e);    return false;  }}  }
class C{  public SearchRequest addAttribute(final String... attributeDescriptions){  for (  final String attributeDescription : attributeDescriptions) {    attributes.add(Reject.checkNotNull(attributeDescription));  }  return this;}  }
class C{  @Override public ShapeTileSimplex translate_by(PlaVectorInt p_vector){  if (p_vector.equals(PlaVectorInt.ZERO))   return this;  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size());  for (int index=0; index < lines_size(); ++index)   new_arr.add(tline_get(index).translate_by(p_vector));  return new ShapeTileSimplex(new_arr);}  }
class C{  public NSObject remove(String key){  return dict.remove(key);}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static Boolean isMember(String tokenID,String ldapServer,String valueDN){  Boolean member=null;  if (subjectEvalCacheTTL > 0) {    String subjectId=ldapServer + ":" + valueDN;    Map<String,Long[]> subjectEntries=subjectEvaluationCache.get(tokenID);    if (subjectEntries != null) {      Long[] element=subjectEntries.get(subjectId);      if (element != null) {        long timeToLive=element[0].longValue();        long currentTime=currentTimeMillis();        if (timeToLive > currentTime) {          if (DEBUG.messageEnabled()) {            DEBUG.message("SubjectEvaluationCache.isMember():" + " getting the membership result from cache.\n");          }          member=Boolean.valueOf(element[1].longValue() == 1);        }      }    }  }  return member;}  }
class C{  public UpdateMsg removeFirst(){synchronized (lock) {    final UpdateMsg update=map.get(map.firstKey());    map.remove(update.getCSN());    bytesCount-=update.size();    if (map.isEmpty() && bytesCount != 0) {      logger.error(ERR_BYTE_COUNT,bytesCount);      bytesCount=0;    }    return update;  }}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public EventSetDescriptor(Class<?> sourceClass,String eventSetName,Class<?> listenerType,String listenerMethodNames[],String addListenerMethodName,String removeListenerMethodName) throws IntrospectionException {  this(sourceClass,eventSetName,listenerType,listenerMethodNames,addListenerMethodName,removeListenerMethodName,null);}  }
class C{  public SimplePropertyMapper decoder(final Function<ByteString,?,? extends Exception> f){  this.decoder=f;  return this;}  }
class C{  boolean validateAttributes(Map<String,Set<String>> attributeSet,boolean encodePassword) throws SMSException {  return (validateAttributes(attributeSet,encodePassword,null));}  }
class C{  public ProductService addProduct(Product product,Handler<AsyncResult<Void>> resultHandler){  delegate.addProduct(product,resultHandler);  return this;}  }
class C{  @Override public boolean isCellEditable(final int row,final int column){  return true;}  }
class C{  protected final MetadataDescriptor assertDescriptor(final String key,final int type){  MetadataDescriptor desc;  final List<MetadataDescriptor> descriptorsByName=getDescriptorsByName(key);  if (descriptorsByName == null || descriptorsByName.isEmpty()) {    desc=new MetadataDescriptor(getContainerType(),key,type);    addDescriptor(desc);  } else {    desc=descriptorsByName.get(0);  }  return desc;}  }
class C{  public AciException(LocalizableMessage message){  super(message);}  }
class C{  public static Set<String> varyFields(Headers responseHeaders){  Set<String> result=Collections.emptySet();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!"Vary".equalsIgnoreCase(responseHeaders.name(i)))     continue;    String value=responseHeaders.value(i);    if (result.isEmpty()) {      result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);    }    for (    String varyField : value.split(",")) {      result.add(varyField.trim());    }  }  return result;}  }
class C{  private ArrayList<LocalizableMessage> checkKeystore(){  ArrayList<LocalizableMessage> errorMsgs=new ArrayList<>();  boolean pathValid=true;  boolean pwdValid=true;  if (rbUseExistingCertificate.isSelected() && (cbEnableSSL.isSelected() || cbEnableStartTLS.isSelected())) {    String path=tfKeystorePath.getText();    if (rbJKS.isSelected() || rbJCEKS.isSelected() || rbPKCS12.isSelected()) {      if (path == null || path.length() == 0) {        errorMsgs.add(INFO_KEYSTORE_PATH_NOT_PROVIDED.get());      } else {        File f=new File(path);        if (!f.exists()) {          errorMsgs.add(INFO_KEYSTORE_PATH_DOES_NOT_EXIST.get());        } else         if (!f.isFile()) {          errorMsgs.add(INFO_KEYSTORE_PATH_NOT_A_FILE.get());        }      }      pathValid=errorMsgs.isEmpty();    }    String pwd=String.valueOf(tfKeystorePwd.getPassword());    if (pathValid) {      try {        CertificateManager certManager;        if (rbJKS.isSelected()) {          certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_JKS,pwd);        } else         if (rbJCEKS.isSelected()) {          certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_JCEKS,pwd);        } else         if (rbPKCS12.isSelected()) {          certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_PKCS12,pwd);        } else         if (rbPKCS11.isSelected()) {          certManager=new CertificateManager(CertificateManager.KEY_STORE_PATH_PKCS11,CertificateManager.KEY_STORE_TYPE_PKCS11,pwd);        } else {          throw new IllegalStateException("No keystore type selected.");        }        aliases=certManager.getCertificateAliases();        if (aliases == null || aliases.length == 0) {          if (rbPKCS11.isSelected()) {            errorMsgs.add(INFO_PKCS11_KEYSTORE_DOES_NOT_EXIST.get());          } else {            if (rbJKS.isSelected()) {              errorMsgs.add(INFO_JKS_KEYSTORE_DOES_NOT_EXIST.get());            } else             if (rbJCEKS.isSelected()) {              errorMsgs.add(INFO_JCEKS_KEYSTORE_DOES_NOT_EXIST.get());            } else {              errorMsgs.add(INFO_PKCS12_KEYSTORE_DOES_NOT_EXIST.get());            }            pathValid=false;          }        } else {          certificateHasAlias=certManager.hasRealAliases();        }      } catch (      KeyStoreException ke) {        if (StaticUtils.stackTraceContainsCause(ke,ArithmeticException.class)) {          errorMsgs.add(INFO_ERROR_ACCESSING_KEYSTORE_JDK_BUG.get());        } else {          pwdValid=false;          if (!rbPKCS11.isSelected()) {            pathValid=false;          }          if (rbPKCS11.isSelected()) {            errorMsgs.add(INFO_ERROR_ACCESSING_PKCS11_KEYSTORE.get());          } else {            if (rbJKS.isSelected()) {              errorMsgs.add(INFO_ERROR_ACCESSING_JKS_KEYSTORE.get());            } else             if (rbJCEKS.isSelected()) {              errorMsgs.add(INFO_ERROR_ACCESSING_JCEKS_KEYSTORE.get());            } else {              errorMsgs.add(INFO_ERROR_ACCESSING_PKCS12_KEYSTORE.get());            }            pathValid=false;          }        }      }    }  }  setValidLater(lKeystorePath,pathValid);  setValidLater(lKeystorePwd,pwdValid);  return errorMsgs;}  }
class C{  public void test_getAlgorithm() throws NoSuchAlgorithmException, NoSuchProviderException {  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm()).getAlgorithm());  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProviderName()).getAlgorithm());  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProvider()).getAlgorithm());}  }
class C{  public void createSubConfig(String name,String schemaName,Map values) throws AMConsoleException {  if ((name == null) || (name.trim().length() == 0)) {    throw new AMConsoleException("subconfig.missing.subconfiguration.name.message");  }  subConfigMeta.createSubConfig(name,schemaName,values);}  }
class C{  Attributes parseAttributes() throws JasperException {  return parseAttributes(false);}  }
class C{  public MarshalException(String message){  super(message);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public InvalidPasswordException(String message){  super(message);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.AttributedQNameType createAttributedQNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.AttributedQNameTypeImpl();}  }
class C{  private void updateMenus(ServerDescriptor desc){  menuBar.newEntryFromLDIFMenuItem.setEnabled(desc.isAuthenticated());  menuBar.deleteBackendMenuItem.setEnabled(desc.isAuthenticated());  menuBar.deleteBaseDNMenuItem.setEnabled(desc.isAuthenticated());}  }
class C{  static Promise<Void> all(final Promise<?>... promises){  return new AllPromise(promises);}  }
class C{  public void addMember(Guid userGuid) throws UMSException {  if (getPrincipal() == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_PRINCIPAL));  }  addMember(UMSObject.getObject(getPrincipal(),userGuid));}  }
class C{  public void recompose(Vector recomposableElements) throws TransformerException {  int n=getIncludeCountComposed();  for (int i=-1; i < n; i++) {    Stylesheet included=getIncludeComposed(i);    int s=included.getOutputCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getOutput(j));    }    s=included.getAttributeSetCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getAttributeSet(j));    }    s=included.getDecimalFormatCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getDecimalFormat(j));    }    s=included.getKeyCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getKey(j));    }    s=included.getNamespaceAliasCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getNamespaceAlias(j));    }    s=included.getTemplateCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getTemplate(j));    }    s=included.getVariableOrParamCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getVariableOrParam(j));    }    s=included.getStripSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getStripSpace(j));    }    s=included.getPreserveSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getPreserveSpace(j));    }  }}  }
class C{  public boolean isPopupTrigger(MouseEvent a){  boolean returnValue=((PopupMenuUI)(uis.elementAt(0))).isPopupTrigger(a);  for (int i=1; i < uis.size(); i++) {    ((PopupMenuUI)(uis.elementAt(i))).isPopupTrigger(a);  }  return returnValue;}  }
class C{  protected void flushObject(PdfObject pdfObject,boolean canBeInObjStm) throws IOException {  writer.flushObject(pdfObject,canBeInObjStm);}  }
class C{  private int[] findNearestArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,boolean ignoreOccupied,int[] result,int[] resultSpan){  lazyInitTempRectStack();  pixelX-=(mCellWidth + mWidthGap) * (spanX - 1) / 2f;  pixelY-=(mCellHeight + mHeightGap) * (spanY - 1) / 2f;  final int[] bestXY=result != null ? result : new int[2];  double bestDistance=Double.MAX_VALUE;  final Rect bestRect=new Rect(-1,-1,-1,-1);  final Stack<Rect> validRegions=new Stack<Rect>();  final int countX=mCountX;  final int countY=mCountY;  if (minSpanX <= 0 || minSpanY <= 0 || spanX <= 0 || spanY <= 0 || spanX < minSpanX || spanY < minSpanY) {    return bestXY;  }  for (int y=0; y < countY - (minSpanY - 1); y++) {    inner:     for (int x=0; x < countX - (minSpanX - 1); x++) {      int ySize=-1;      int xSize=-1;      if (ignoreOccupied) {        for (int i=0; i < minSpanX; i++) {          for (int j=0; j < minSpanY; j++) {            if (mOccupied[x + i][y + j]) {              continue inner;            }          }        }        xSize=minSpanX;        ySize=minSpanY;        boolean incX=true;        boolean hitMaxX=xSize >= spanX;        boolean hitMaxY=ySize >= spanY;        while (!(hitMaxX && hitMaxY)) {          if (incX && !hitMaxX) {            for (int j=0; j < ySize; j++) {              if (x + xSize > countX - 1 || mOccupied[x + xSize][y + j]) {                hitMaxX=true;              }            }            if (!hitMaxX) {              xSize++;            }          } else           if (!hitMaxY) {            for (int i=0; i < xSize; i++) {              if (y + ySize > countY - 1 || mOccupied[x + i][y + ySize]) {                hitMaxY=true;              }            }            if (!hitMaxY) {              ySize++;            }          }          hitMaxX|=xSize >= spanX;          hitMaxY|=ySize >= spanY;          incX=!incX;        }        incX=true;        hitMaxX=xSize >= spanX;        hitMaxY=ySize >= spanY;      }      final int[] cellXY=mTmpPoint;      cellToCenterPoint(x,y,cellXY);      Rect currentRect=mTempRectStack.pop();      currentRect.set(x,y,x + xSize,y + ySize);      boolean contained=false;      for (      Rect r : validRegions) {        if (r.contains(currentRect)) {          contained=true;          break;        }      }      validRegions.push(currentRect);      double distance=Math.hypot(cellXY[0] - pixelX,cellXY[1] - pixelY);      if ((distance <= bestDistance && !contained) || currentRect.contains(bestRect)) {        bestDistance=distance;        bestXY[0]=x;        bestXY[1]=y;        if (resultSpan != null) {          resultSpan[0]=xSize;          resultSpan[1]=ySize;        }        bestRect.set(currentRect);      }    }  }  if (bestDistance == Double.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  recycleTempRects(validRegions);  return bestXY;}  }
class C{  public void endMonitoringOf(final InetSocketAddress socketAddress,final int inode){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4SocketAddressAndInode(socketAddress,inode));}  }
class C{  public NSSet(boolean ordered){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();}  }
class C{  public static Foo remove(long fooId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().remove(fooId);}  }
class C{  public ArrayList(int initialCapacity){  if (initialCapacity > 0) {    this.elementData=new Object[initialCapacity];  } else   if (initialCapacity == 0) {    this.elementData=EMPTY_ELEMENTDATA;  } else {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }}  }
class C{  public void run() throws ArgumentException {  run(true);}  }
class C{  private boolean adjust_plane_autoroute_settings(){  RoutingBoard routing_board=itera_board.get_routing_board();  BrdLayerStructure board_layer_structure=routing_board.layer_structure;  if (board_layer_structure.size() <= 2)   return false;  if (board_layer_structure.get_first_signal_layer_no() < 0)   return false;  boolean[] layer_contains_wires_arr=new boolean[board_layer_structure.size()];  boolean[] changed_layer_arr=new boolean[board_layer_structure.size()];  for (int index=0; index < layer_contains_wires_arr.length; ++index) {    layer_contains_wires_arr[index]=false;    changed_layer_arr[index]=false;  }  Collection<BrdAreaConduction> conduction_area_list=new LinkedList<BrdAreaConduction>();  Collection<BrdItem> item_list=routing_board.get_items();  for (  BrdItem curr_item : item_list) {    if (curr_item instanceof BrdTracep) {      int curr_layer=((BrdTracep)curr_item).get_layer();      layer_contains_wires_arr[curr_layer]=true;    } else     if (curr_item instanceof BrdAreaConduction) {      conduction_area_list.add((BrdAreaConduction)curr_item);    }  }  boolean nothing_changed=true;  BrdOutline board_outline=routing_board.get_outline();  double board_area=0;  for (int i=0; i < board_outline.shape_count(); ++i) {    freert.planar.ShapeTile[] curr_piece_arr=board_outline.get_shape(i).split_to_convex();    if (curr_piece_arr != null) {      for (      freert.planar.ShapeTile curr_piece : curr_piece_arr) {        board_area+=curr_piece.area();      }    }  }  for (  BrdAreaConduction curr_conduction_area : conduction_area_list) {    int layer_no=curr_conduction_area.get_layer();    if (layer_contains_wires_arr[layer_no]) {      continue;    }    BrdLayer curr_layer=routing_board.layer_structure.get(layer_no);    if (!curr_layer.is_signal || layer_no == 0 || layer_no == board_layer_structure.size() - 1) {      continue;    }    freert.planar.ShapeTile[] convex_pieces=curr_conduction_area.get_area().split_to_convex();    double curr_area=0;    for (    freert.planar.ShapeTile curr_piece : convex_pieces) {      curr_area+=curr_piece.area();    }    if (curr_area < 0.5 * board_area) {      continue;    }    for (int i=0; i < curr_conduction_area.net_count(); ++i) {      freert.rules.RuleNet curr_net=routing_board.brd_rules.nets.get(curr_conduction_area.get_net_no(i));      curr_net.set_contains_plane(true);      nothing_changed=false;    }    changed_layer_arr[layer_no]=true;    if (curr_conduction_area.get_fixed_state().ordinal() < board.varie.ItemFixState.USER_FIXED.ordinal()) {      curr_conduction_area.set_fixed_state(board.varie.ItemFixState.USER_FIXED);    }  }  if (nothing_changed) {    return false;  }  autoroute.ArtSettings autoroute_settings=itera_board.itera_settings.autoroute_settings;  int layer_count=routing_board.get_layer_count();  boolean curr_preferred_direction_is_horizontal=autoroute_settings.is_preferred_direction_horizontal(0);  for (int i=0; i < layer_count; ++i) {    if (changed_layer_arr[i]) {      autoroute_settings.set_layer_active(i,false);    } else     if (autoroute_settings.get_layer_active(i)) {      autoroute_settings.set_preferred_direction_horizontal(i,curr_preferred_direction_is_horizontal);      curr_preferred_direction_is_horizontal=!curr_preferred_direction_is_horizontal;    }  }  return true;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());    }    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    reSendSt=st;    reSendResponse=response;    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    AckReTransmissionTest.fail(s);  }}  }
class C{  public DataStoreProviderException(String message){  super(message);}  }
class C{  public static void main(final String[] args){  getAmountAsString(515);}  }
class C{  private void deactivateSecurityConfigurators(ComponentContext context,HttpContext httpContext){  for (  SecurityConfigurator configurator : securityConfigurators) {    configurator.deactivate(httpService,httpContext,context);    logger.debug("Deactivated security configurator {}",configurator.getClass().getName());  }}  }
class C{  private void electChildren(char searchTerm,TreeNode child,List<TreeNode> candidates,SearchContext context){  while (child != null) {    if (child.hasInterestIn(searchTerm,context)) {      candidates.add(child);      lastChanceElection(searchTerm,child.getChild(),candidates,context);    }    if (child.isWildcard()) {      electChildren(searchTerm,child.getChild(),candidates,context);    }    child=child.getSibling();  }}  }
class C{  public OpenDialog(Shell parentShell){  super(parentShell);  setShellStyle(SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);}  }
class C{  public RequestAuthenticator(byte[] octets){  this.octets=octets;}  }
class C{  public PdfCanvas endVariableText(){  return endMarkedContent();}  }
class C{  public static boolean isAdminGroupsEnabled(String orgDN) throws AMException {  if (!isUnderRootSuffix(orgDN)) {    return false;  }  try {    if (gsc == null) {      ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,internalToken);      gsc=scm.getGlobalSchema();    }    Map attrMap=gsc.getReadOnlyAttributeDefaults();    Set values=(Set)attrMap.get(ADMIN_GROUPS_ENABLED_ATTR);    boolean enabled=false;    if (values == null || values.isEmpty()) {      enabled=false;    } else {      String val=(String)values.iterator().next();      enabled=(val.equalsIgnoreCase("true"));    }    if (debug.messageEnabled()) {      debug.message("Compliance.isAdminGroupsEnabled = " + enabled);    }    return enabled;  } catch (  SMSException ex) {    debug.error(AMSDKBundle.getString("357"),ex);    throw new AMException(AMSDKBundle.getString("357"),"357");  }catch (  SSOException ex) {    debug.error(AMSDKBundle.getString("357"),ex);    throw new AMException(AMSDKBundle.getString("357"),"357");  }}  }
class C{  public boolean isDirectory(){  return name.endsWith("/");}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  private void validateEnableReplicationOptions(LocalizableMessageBuilder buf){  appendErrorMessageIfArgumentsConflict(buf,server1.bindPasswordArg,server1.bindPasswordFileArg);  appendErrorMessageIfArgumentsConflict(buf,server2.bindPasswordArg,server2.bindPasswordFileArg);  appendErrorMessageIfArgumentsConflict(buf,server1.replicationPortArg,server1.noReplicationServerArg);  appendErrorMessageIfArgumentsConflict(buf,server1.noReplicationServerArg,server1.onlyReplicationServerArg);  appendErrorMessageIfArgumentsConflict(buf,server2.replicationPortArg,server2.noReplicationServerArg);  appendErrorMessageIfArgumentsConflict(buf,server2.noReplicationServerArg,server2.onlyReplicationServerArg);  appendErrorMessageIfArgumentsConflict(buf,noSchemaReplicationArg,useSecondServerAsSchemaSourceArg);  if (server1.hostNameArg.getValue().equalsIgnoreCase(server2.hostNameArg.getValue()) && !isInteractive() && server1.portArg.getValue().equals(server2.portArg.getValue())) {    LocalizableMessage message=ERR_REPLICATION_ENABLE_SAME_SERVER_PORT.get(server1.hostNameArg.getValue(),server1.portArg.getValue());    addMessage(buf,message);  }}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(contentEncoding);}  }
class C{  public void testCase6(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127};  byte bBytes[]={15,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void testCompareToPosPos2(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  private void addAttachment(File attachmentFile) throws MessagingException {  MimeBodyPart attachment=new MimeBodyPart();  FileDataSource dataSource=new FileDataSource(attachmentFile);  attachment.setDataHandler(new DataHandler(dataSource));  attachment.setFileName(attachmentFile.getName());  attachments.add(attachment);}  }
class C{  private LDIF(){}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  static boolean shouldProcess(KeyEvent e){switch (e.getID()) {case KeyEvent.KEY_PRESSED:    if (!keyIsPressed(e.getKeyCode())) {      registerKeyPressed(e.getKeyCode());    }  return true;case KeyEvent.KEY_RELEASED:if (keyIsPressed(e.getKeyCode()) || e.getKeyCode() == KeyEvent.VK_PRINTSCREEN) {  registerKeyReleased(e.getKeyCode());  return true;}return false;case KeyEvent.KEY_TYPED:return true;default :return false;}}  }
class C{  protected void checkSAXVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String SAX_VERSION1_CLASS="org.xml.sax.Parser";  final String SAX_VERSION1_METHOD="parse";  final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader";  final String SAX_VERSION2_METHOD="parse";  final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl";  final String SAX_VERSION2BETA_METHODNF="setAttributes";  final Class oneStringArg[]={java.lang.String.class};  final Class attributesArg[]={org.xml.sax.Attributes.class};  try {    Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg);    h.put(VERSION + "SAX","2.0");  } catch (  Exception e) {    h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);    try {      Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true);      Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg);      h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier");    } catch (    Exception e2) {      h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());      h.put(ERROR,ERROR_FOUND);      try {        Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true);        Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg);        h.put(VERSION + "SAX-backlevel","1.0");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString());      }    }  }}  }
class C{  @Override public int hashCode(){  int result=algorithm.length();  for (  byte element : key) {    result+=element;  }  return result;}  }
class C{  public void execute(String command,InputStream istream,String contentType,long contentLength) throws BuildException {  URLConnection conn=null;  InputStreamReader reader=null;  try {    conn=(new URL(url + command)).openConnection();    HttpURLConnection hconn=(HttpURLConnection)conn;    hconn.setAllowUserInteraction(false);    hconn.setDoInput(true);    hconn.setUseCaches(false);    if (istream != null) {      hconn.setDoOutput(true);      hconn.setRequestMethod("PUT");      if (contentType != null) {        hconn.setRequestProperty("Content-Type",contentType);      }      if (contentLength >= 0) {        hconn.setRequestProperty("Content-Length","" + contentLength);        hconn.setFixedLengthStreamingMode(contentLength);      }    } else {      hconn.setDoOutput(false);      hconn.setRequestMethod("GET");    }    hconn.setRequestProperty("User-Agent","Catalina-Ant-Task/1.0");    String input=username + ":" + password;    String output=Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1));    hconn.setRequestProperty("Authorization","Basic " + output);    hconn.connect();    if (istream != null) {      try (BufferedOutputStream ostream=new BufferedOutputStream(hconn.getOutputStream(),1024)){        byte buffer[]=new byte[1024];        while (true) {          int n=istream.read(buffer);          if (n < 0) {            break;          }          ostream.write(buffer,0,n);        }        ostream.flush();      }  finally {        try {          istream.close();        } catch (        Exception e) {        }      }    }    reader=new InputStreamReader(hconn.getInputStream(),CHARSET);    StringBuilder buff=new StringBuilder();    String error=null;    int msgPriority=Project.MSG_INFO;    boolean first=true;    while (true) {      int ch=reader.read();      if (ch < 0) {        break;      } else       if ((ch == '\r') || (ch == '\n')) {        if (buff.length() > 0) {          String line=buff.toString();          buff.setLength(0);          if (!ignoreResponseConstraint && first) {            if (!line.startsWith("OK -")) {              error=line;              msgPriority=Project.MSG_ERR;            }            first=false;          }          handleOutput(line,msgPriority);        }      } else {        buff.append((char)ch);      }    }    if (buff.length() > 0) {      handleOutput(buff.toString(),msgPriority);    }    if (error != null && isFailOnError()) {      throw new BuildException(error);    }  } catch (  Exception e) {    if (isFailOnError()) {      throw new BuildException(e);    } else {      handleErrorOutput(e.getMessage());    }  } finally {    closeRedirector();    if (reader != null) {      try {        reader.close();      } catch (      IOException ioe) {      }      reader=null;    }    if (istream != null) {      try {        istream.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public static RequirementsBuilder newObject(String description){  return new RequirementsBuilder(BuilderType.OBJECT,description);}  }
class C{  public synchronized Object clone(){  try {    ElementIterator it=new ElementIterator(root);    if (elementStack != null) {      it.elementStack=new Stack<StackItem>();      for (int i=0; i < elementStack.size(); i++) {        StackItem item=elementStack.elementAt(i);        StackItem clonee=(StackItem)item.clone();        it.elementStack.push(clonee);      }    }    return it;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @SuppressWarnings("unchecked") public void writeObject(SQLData x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialStruct(x,map));  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      NS=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      NS=IFSConstants.LIB_NAMESPACE_STRING;    }  }  if (includeNS)   appendNS=IFSConstants.LIB_PREFIX;  xml.append("<").append(appendNS).append("OldProvidedNameIdentifier").append(" ").append(NS).append(" ");  if ((getNameQualifier() != null) && (!(getNameQualifier().length() == 0))) {    xml.append("NameQualifier").append("=\"").append(getNameQualifier()).append("\"").append(" ");  }  if ((getFormat() != null) && (!(getFormat().length() == 0))) {    xml.append("Format").append("=\"").append(getFormat()).append("\"").append(" ");  }  if ((getName() != null) && (!(getName().length() == 0))) {    xml.append(">").append(getName());    xml.append("</").append(appendNS).append("OldProvidedNameIdentifier").append(">\n");  }  return xml.toString();}  }
class C{  protected int yPositionForValue(int value,int trackY,int trackHeight){  int min=slider.getMinimum();  int max=slider.getMaximum();  double valueRange=(double)max - (double)min;  double pixelsPerValue=(double)trackHeight / valueRange;  int trackBottom=trackY + (trackHeight - 1);  int yPosition;  if (!drawInverted()) {    yPosition=trackY;    yPosition+=Math.round(pixelsPerValue * ((double)max - value));  } else {    yPosition=trackY;    yPosition+=Math.round(pixelsPerValue * ((double)value - min));  }  yPosition=Math.max(trackY,yPosition);  yPosition=Math.min(trackBottom,yPosition);  return yPosition;}  }
class C{  public void close() throws java.io.IOException {}  }
class C{  public Triangulation(Triangle triangle){  triGraph=new Graph<Triangle>();  triGraph.add(triangle);  mostRecent=triangle;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public GenericPrincipal(String name,String password,List<String> roles){  this(name,password,roles,null);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  PWResetUncaughtExceptionModel model=(PWResetUncaughtExceptionModel)getModel();  setErrorMessage(model.getErrorTitle(),model.getErrorMessage());}  }
class C{  public InvalidFormatException(String rbName,String errCode,Object[] args,Throwable t,String name,int type){  super(rbName,errCode,args,t);  fillInStackTrace();  this.name=name;  this.type=type;}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId){  return new AppEventsLogger(context,applicationId,null);}  }
class C{  public void test_getInstanceLjava_lang_String() throws NoSuchAlgorithmException, KeyManagementException {  try {    SSLContext.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i]);    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider(),mProv);    checkSSLContext(sslC);  }}  }
class C{  public static void deleteAlias(KeyStore ks,String ksPath,String alias,char[] pwd) throws KeyStoreException {  IMPL.deleteAlias(ks,ksPath,alias,pwd);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedataoffsetgreater.class,args);}  }
class C{  public UnknownException(Throwable ex){  super("",0,org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);  originalEx=ex;}  }
class C{  public void popMode(){  m_modes.pop();}  }
class C{  public synchronized BukkitTask runTaskLaterAsynchronously(Plugin plugin,long delay) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTaskLaterAsynchronously(plugin,(Runnable)this,delay));}  }
class C{  protected int[][] readBbox(int unitsPerEm) throws java.io.IOException {  int tableLocation[];  tableLocation=tables.get("head");  if (tableLocation == null) {    if (fileName != null) {      throw new IOException("table.1.does.not.exist.in.2").setMessageParams("head",fileName);    } else {      throw new IOException("table.1.does.not.exist").setMessageParams("head");    }  }  raf.seek(tableLocation[0] + FontConstants.HEAD_LOCA_FORMAT_OFFSET);  boolean locaShortTable=raf.readUnsignedShort() == 0;  tableLocation=tables.get("loca");  if (tableLocation == null) {    return null;  }  raf.seek(tableLocation[0]);  int locaTable[];  if (locaShortTable) {    int entries=tableLocation[1] / 2;    locaTable=new int[entries];    for (int k=0; k < entries; ++k) {      locaTable[k]=raf.readUnsignedShort() * 2;    }  } else {    int entries=tableLocation[1] / 4;    locaTable=new int[entries];    for (int k=0; k < entries; ++k) {      locaTable[k]=raf.readInt();    }  }  tableLocation=tables.get("glyf");  if (tableLocation == null) {    if (fileName != null) {      throw new IOException("table.1.does.not.exist.in.2").setMessageParams("glyf",fileName);    } else {      throw new IOException("table.1.does.not.exist").setMessageParams("glyf");    }  }  int tableGlyphOffset=tableLocation[0];  int[][] bboxes=new int[locaTable.length - 1][];  for (int glyph=0; glyph < locaTable.length - 1; ++glyph) {    int start=locaTable[glyph];    if (start != locaTable[glyph + 1]) {      raf.seek(tableGlyphOffset + start + 2);      bboxes[glyph]=new int[]{raf.readShort() * TrueTypeFont.UNITS_NORMALIZATION / unitsPerEm,raf.readShort() * TrueTypeFont.UNITS_NORMALIZATION / unitsPerEm,raf.readShort() * TrueTypeFont.UNITS_NORMALIZATION / unitsPerEm,raf.readShort() * TrueTypeFont.UNITS_NORMALIZATION / unitsPerEm};    }  }  return bboxes;}  }
class C{  protected void add(HttpServletRequest request,PrintWriter writer,String name,boolean htmlMode,StringManager smClient){  String aliases=request.getParameter("aliases");  String appBase=request.getParameter("appBase");  boolean manager=booleanParameter(request,"manager",false,htmlMode);  boolean autoDeploy=booleanParameter(request,"autoDeploy",true,htmlMode);  boolean deployOnStartup=booleanParameter(request,"deployOnStartup",true,htmlMode);  boolean deployXML=booleanParameter(request,"deployXML",true,htmlMode);  boolean unpackWARs=booleanParameter(request,"unpackWARs",true,htmlMode);  boolean copyXML=booleanParameter(request,"copyXML",false,htmlMode);  add(writer,name,aliases,appBase,manager,autoDeploy,deployOnStartup,deployXML,unpackWARs,copyXML,smClient);}  }
class C{  public void replaceAttributeValues(String attrName,Set oldValues,Set newValues) throws SSOException, SMSException {  validateServiceInstance();  SMSEntry e=instance.getSMSEntry();  SMSUtils.replaceAttributeValues(e,attrName,oldValues,newValues,Collections.EMPTY_SET);  e.save(token);  instance.refresh(e);}  }
class C{  public void passPgSessionMapEx(ViewBean other){  Map attributes=getPageSessionAttributes();  for (Iterator i=retainPageSessionsBtwTabs.iterator(); i.hasNext(); ) {    String key=(String)i.next();    other.setPageSessionAttribute(key,(Serializable)attributes.get(key));  }  other.setPageSessionAttribute(getTrackingTabIDName(),(Serializable)attributes.get(getTrackingTabIDName()));}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EmptyTypeImpl();}  }
class C{  public static IOFileFilter ageFileFilter(long cutoff,boolean acceptOlder){  return new AgeFileFilter(cutoff,acceptOlder);}  }
class C{  protected boolean handleSignature(boolean consumeFirstByte,boolean throwException) throws IOException {  if (consumeFirstByte) {    ++_inputPtr;  }  if (_nextByteGuaranteed() != SmileConstants.HEADER_BYTE_2) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0x29");    }    return false;  }  if (_nextByteGuaranteed() != SmileConstants.HEADER_BYTE_3) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a, 0x29, but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0xA");    }    return false;  }  int ch=_nextByteGuaranteed();  int versionBits=(ch >> 4) & 0x0F;  if (versionBits != SmileConstants.HEADER_VERSION_0) {    _reportError("Header version number bits (0x" + Integer.toHexString(versionBits) + ") indicate unrecognized version; only 0x0 handled by parser");  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_NAMES) == 0) {    _seenNames=null;    _seenNameCount=-1;  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_STRING_VALUES) != 0) {    _seenStringValues=NO_STRINGS;    _seenStringValueCount=0;  }  _mayContainRawBinary=((ch & SmileConstants.HEADER_BIT_HAS_RAW_BINARY) != 0);  return true;}  }
class C{  public void removeParameter(String name){  parameters.remove(name);}  }
class C{  private void installDefaults(){  setFont(UIManager.getFont("InternalFrame.titleFont",getLocale()));}  }
class C{  private static void addEntryLevelRights(AciLDAPOperationContainer container,AciHandler handler,int mask,final Entry retEntry,boolean skipCheck){  StringBuilder evalInfo=new StringBuilder();  container.setCurrentAttributeType(null);  container.setRights(ACI_ADD | ACI_SKIP_PROXY_CHECK);  evalInfo.append(rightsString(container,handler,skipCheck,"add"));  addEntryLevelRightsInfo(container,mask,retEntry,"add");  evalInfo.append(',');  container.setCurrentAttributeType(null);  container.setRights(ACI_DELETE | ACI_SKIP_PROXY_CHECK);  evalInfo.append(rightsString(container,handler,skipCheck,"delete"));  addEntryLevelRightsInfo(container,mask,retEntry,"delete");  evalInfo.append(',');  container.setCurrentAttributeType(null);  container.setRights(ACI_READ | ACI_SKIP_PROXY_CHECK);  evalInfo.append(rightsString(container,handler,skipCheck,"read"));  addEntryLevelRightsInfo(container,mask,retEntry,"read");  evalInfo.append(',');  container.setCurrentAttributeType(null);  container.setRights(ACI_WRITE | ACI_SKIP_PROXY_CHECK);  evalInfo.append(rightsString(container,handler,skipCheck,"write"));  addEntryLevelRightsInfo(container,mask,retEntry,"write");  evalInfo.append(',');  container.setCurrentAttributeType(null);  container.setRights(ACI_PROXY | ACI_SKIP_PROXY_CHECK);  evalInfo.append(rightsString(container,handler,skipCheck,"proxy"));  addEntryLevelRightsInfo(container,mask,retEntry,"proxy");  if (hasAttrMask(mask,ACL_RIGHTS)) {    Attribute attr=Attributes.create(aclRightsEntryLevelStr,evalInfo.toString());    retEntry.addAttribute(attr,null);  }}  }
class C{  public void show(){  comboBox.firePopupMenuWillBecomeVisible();  setListSelection(comboBox.getSelectedIndex());  Point location=getPopupLocation();  show(comboBox,location.x,location.y);}  }
class C{  public <M extends Configuration>void registerAddListener(InstantiableRelationDefinition<?,M> d,ConfigurationAddListener<M> listener) throws ConfigException {  registerAddListener(d,new ServerManagedObjectAddListenerAdaptor<M>(listener));}  }
class C{  static ModifyMsg createV1(byte[] in) throws DataFormatException {  ModifyMsg msg=new ModifyMsg(in);  msg.bytes=null;  return msg;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","employee");  element=(Element)elementList.item(0);  state=element.hasAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  assertTrue("elementhasattributens01",state);}  }
class C{  protected IntegerSyntax(int value){  this.value=value;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (getPrimaryModel() == null) {    throw new ModelControlException("Primary model is null");  }  if (questionKeys != null) {    getPrimaryModel().setSize(questionKeys.size());  } else {    getPrimaryModel().setSize(0);  }  super.beginDisplay(event);  resetTileIndex();}  }
class C{  private void parseTrailerHeaders() throws IOException {  try {    this.footers=AbstractMessageParser.parseHeaders(in,-1,-1,null);  } catch (  HttpException e) {    IOException ioe=new MalformedChunkCodingException("Invalid footer: " + e.getMessage());    ExceptionUtils.initCause(ioe,e);    throw ioe;  }}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  @Override public void run(){  while (!isShuttingDown()) {    try {      sleep(getInterval());    } catch (    InterruptedException e) {      continue;    }catch (    Exception e) {      logger.traceException(e);    }    processLog();  }}  }
class C{  @Override public <T>List<T> dynamicQuery(DynamicQuery dynamicQuery){  return fooPersistence.findWithDynamicQuery(dynamicQuery);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI=null;  String qualifiedName="dom:root";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument04",success);  }}  }
class C{  private final static void println(String msg){  System.out.println(msg);}  }
class C{  public Image scale(float horizontalScaling,float verticalScaling){  setProperty(Property.HORIZONTAL_SCALING,horizontalScaling);  setProperty(Property.VERTICAL_SCALING,verticalScaling);  return this;}  }
class C{  void removePolicyFromResourceTree(Policy policy) throws PolicyException, SSOException {  Set ruleNames=policy.getRuleNames();  Iterator i=ruleNames.iterator();  String ruleName=null;  Rule rule=null;  while (i.hasNext()) {    ruleName=(String)i.next();    rule=policy.getRule(ruleName);    removeRuleFromResourceTree(policy.getName(),rule.getResourceName(),rule.getServiceTypeName(),rule.getServiceType());  }  Referrals referrals=policy.getReferrals();  if (referrals != null) {    Set referralNames=referrals.getReferralNames();    if ((referralNames != null) && (!referralNames.isEmpty())) {      Iterator referralIter=referralNames.iterator();      while (referralIter.hasNext()) {        String referralName=(String)referralIter.next();        Referral referral=referrals.getReferral(referralName);        if (referral instanceof OrgReferral) {          Set values=referral.getValues();          if ((values != null) && (!values.isEmpty())) {            Iterator valueIter=values.iterator();            while (valueIter.hasNext()) {              String value=(String)valueIter.next();              PolicyManager pm=new PolicyManager(token,value);              ResourceManager rm=pm.getResourceManager();              Iterator ruleIter=policy.getRuleNames().iterator();              while (ruleIter.hasNext()) {                String ruleName1=(String)ruleIter.next();                Rule rule1=policy.getRule(ruleName);                String resourceName=rule1.getResourceName();                if (resourceName != null) {                  String serviceTypeName=rule1.getServiceTypeName();                  Set resourceNames=new HashSet();                  resourceNames.add(resourceName);                  rm.removeResourcePrefixes(serviceTypeName,resourceNames);                }              }            }          }        }      }    }  }}  }
class C{  public static int w(String tag,Throwable tr){  return Log.w(tag,tr);}  }
class C{  ApplicationImportStep(DiffStatus diffStatus,Application application,ApplicationService applicationService){  this.diffStatus=diffStatus;  this.application=application;  this.applicationService=applicationService;}  }
class C{  public void stopSpinning(){  isSpinning=false;  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  public Name add(int posn,Rdn comp){  if (comp == null) {    throw new NullPointerException("Cannot set comp to null");  }  rdns.add(posn,comp);  unparsed=null;  return this;}  }
class C{  private boolean checkRDN(int right,RDN rdn,AciContainer container){  container.setRights(right);  for (  AVA ava : rdn) {    container.setCurrentAttributeType(ava.getAttributeType());    container.setCurrentAttributeValue(ava.getAttributeValue());    if (!accessAllowed(container)) {      return false;    }  }  return true;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public <O extends UCrop.Options>BuilderImages<T> crop(O options){  this.config.setCrop(options);  return this;}  }
class C{  public final void testGetCrtCoefficient(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L));  assertTrue(BigInteger.valueOf(5L).equals(ks.getCrtCoefficient()));}  }
class C{  public QueryFailedException(TokenFilter tokenFilter,Exception e){  super(MessageFormat.format("Query operation Failed:\n" + "Error:  {0}\n" + "Filter: {1}",e.getMessage(),tokenFilter),e);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public static String toRealmQualifiedAuthnData(String realm,String data){  String realmQualifedData=data;  if (realm != null && realm.length() != 0) {    realmQualifedData=realm.trim() + ISAuthConstants.COLON + data.trim();  }  return realmQualifedData;}  }
class C{  public BeanContextSupport(){  this(null,null,false,true);}  }
class C{  EntryContainer unregisterEntryContainer(DN baseDN){  return entryContainers.remove(baseDN);}  }
class C{  public StatusCodeImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public void optimize(File jar,Map<String,ClassNode> nodes,Map<String,MappedClass> mappings){  Logger.logLow("Beginning optimization...");  String mainClass=JarUtils.getManifestMainClass(jar);  boolean hasMain=mainClass != null;  boolean optionRemove=boolOpts.getOrDefault(Lang.OPTION_OPTIM_CLASS_REMOVE_MEMBERS,false).booleanValue();  boolean removeMethods=hasMain && optionRemove;  if (hasMain) {    Logger.logLow("Found main class: " + mainClass);    Logger.logLow("Searching for unused classes...");  } else   if (optionRemove) {    Logger.logLow("Member removal was enabled, but could not find an entry point! Skipping removal.");  }  Remover remover=new SimpleRemover();  Map<String,ClassNode> mapForRemoval=new HashMap<String,ClassNode>();  for (  String name : mappings.keySet()) {    MappedClass mc=mappings.get(name);    if (!mc.isLibrary() && nodes.containsKey(name)) {      mapForRemoval.put(name,nodes.get(name));    }  }  List<String> names=new ArrayList<String>();  if (removeMethods) {    remover.getUsedClasses(mainClass,mapForRemoval);    Set<String> keep=remover.getKeptClasses();    Logger.logLow("Removing unused classes [" + (keep.size() - mapForRemoval.size()) + " marked]...");    Set<String> set=new HashSet<String>(nodes.keySet());    for (    String name : set) {      if (!keep.contains(name)) {        nodes.remove(name);        mappings.remove(name);      }    }    names.addAll(keep);  } else {    names.addAll(nodes.keySet());  }  Logger.logLow("Optimizing classes...");  for (  String name : names) {    try {      MappedClass mc=mappings.get(name);      if (mc == null) {        continue;      }      ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);      ClassVisitor remapper=new ClassOptimizerImpl(remover,mc,cw);      mc.getNode().accept(remapper);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  @Override public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  String formatRomanNumerals(int level,int num){  if (num < 10) {    return formatRomanDigit(level,num);  } else {    return formatRomanNumerals(level + 1,num / 10) + formatRomanDigit(level,num % 10);  }}  }
class C{  protected static Long convertIntegerToBucketingLong(Integer integer){  if (integer == null) {    return null;  }  if (integer == Integer.MIN_VALUE) {    integer++;  }  long toReturn=integer.longValue();  return toReturn;}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  private void cleanBufferPool(){  ByteBuffer buf;  while ((buf=bufferPool.poll()) != null) {    CryptoInputStream.freeDirectBuffer(buf);  }}  }
class C{  public void testPosNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public MethodHandle findStaticGetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_getStatic,refc,name,type);  return getDirectField(REF_getStatic,refc,field);}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public final Key translateKey(Key key) throws InvalidKeyException {  if (serviceIterator == null) {    return spi.engineTranslateKey(key);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineTranslateKey(key);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeyException) {    throw (InvalidKeyException)failure;  }  throw new InvalidKeyException("Could not translate key",failure);}  }
class C{  private void skipWhitespacesAndComments(){  boolean commentSkipped;  do {    commentSkipped=false;    while (accept(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE,WHITESPACE_SPACE,WHITESPACE_TAB)) {      skip();    }    if (acceptSequence(COMMENT_BEGIN_TOKEN,SINGLELINE_COMMENT_SECOND_TOKEN)) {      skip(2);      readInputUntil(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE);      commentSkipped=true;    } else     if (acceptSequence(COMMENT_BEGIN_TOKEN,MULTILINE_COMMENT_SECOND_TOKEN)) {      skip(2);      while (true) {        if (acceptSequence(MULTILINE_COMMENT_SECOND_TOKEN,MULTILINE_COMMENT_END_TOKEN)) {          skip(2);          break;        }        skip();      }      commentSkipped=true;    }  } while (commentSkipped);}  }
class C{  public StoreDescription unregisterDescription(StoreDescription desc){  String key=desc.getId();  if (key == null || "".equals(key))   key=desc.getTagClass();  return descriptors.remove(key);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.restartServer();}  }
class C{  private void startRefreshNode(BasicNode node,SearchResultEntry localEntry,boolean recursive){  if (node == rootNode) {    if (recursive) {      Enumeration<?> e=rootNode.children();      while (e.hasMoreElements()) {        BasicNode child=(BasicNode)e.nextElement();        startRefreshNode(child,null,true);      }    }  } else {    refreshQueue.queue(new NodeRefresher(node,this,localEntry,recursive));    if (recursive && node instanceof SuffixNode) {      Enumeration<?> e=node.children();      while (e.hasMoreElements()) {        BasicNode child=(BasicNode)e.nextElement();        if (child instanceof SuffixNode) {          startRefreshNode(child,null,true);        }      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthenticationQueryType createAuthenticationQueryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthenticationQueryTypeImpl();}  }
class C{  private void addItem(File directory){  if (directory == null) {    return;  }  boolean useShellFolder=FilePane.usesShellFolder(chooser);  directories.clear();  File[] baseFolders=(useShellFolder) ? (File[])ShellFolder.get("fileChooserComboBoxFolders") : fsv.getRoots();  directories.addAll(Arrays.asList(baseFolders));  File canonical;  try {    canonical=ShellFolder.getNormalizedFile(directory);  } catch (  IOException e) {    canonical=directory;  }  try {    File sf=useShellFolder ? ShellFolder.getShellFolder(canonical) : canonical;    File f=sf;    Vector<File> path=new Vector<File>(10);    do {      path.addElement(f);    } while ((f=f.getParentFile()) != null);    int pathCount=path.size();    for (int i=0; i < pathCount; i++) {      f=path.get(i);      if (directories.contains(f)) {        int topIndex=directories.indexOf(f);        for (int j=i - 1; j >= 0; j--) {          directories.insertElementAt(path.get(j),topIndex + i - j);        }        break;      }    }    calculateDepths();    setSelectedItem(sf);  } catch (  FileNotFoundException ex) {    calculateDepths();  }}  }
class C{  public static Completion of(String value,String message){  return new SimpleCompletion(value,message);}  }
class C{  public FrameBodyTOAL(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public AMPreCallBackException(String msg,String errorCode){  super(msg,errorCode);}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  PreparedStatement parseQueryFilter(Connection con,QueryFilter<JsonPointer> filter,Map<String,Object> params) throws SQLException, ResourceException {  Map<String,Object> replacementTokens=new LinkedHashMap<String,Object>();  String rawQuery=tableHandler.renderQueryFilter(filter,replacementTokens,params);  Map<String,String> replacements=new LinkedHashMap<String,String>();  replacements.put("_mainTable",mainTableName);  replacements.put("_propTable",propTableName);  replacements.put("_dbSchema",dbSchemaName);  TokenHandler tokenHandler=new TokenHandler();  String tempQueryString=tokenHandler.replaceSomeTokens(rawQuery,replacements);  logger.debug("Tokenized statement: {} with replacementTokens: {}",rawQuery,replacementTokens);  List<String> tokenNames=tokenHandler.extractTokens(tempQueryString);  String queryString=tokenHandler.replaceTokens(tempQueryString,"?",PREFIX_LIST);  QueryInfo queryInfo=new QueryInfo(queryString,tokenNames);  return resolveQuery(queryInfo,con,replacementTokens);}  }
class C{  public ResultSet readForUpdate(String fullId,String type,String localId,Connection connection) throws NotFoundException, SQLException {  PreparedStatement readForUpdateStatement=null;  ResultSet rs=null;  try {    readForUpdateStatement=getPreparedStatement(connection,QueryDefinition.READFORUPDATEQUERYSTR);    logger.trace("Populating prepared statement {} for {}",readForUpdateStatement,fullId);    readForUpdateStatement.setString(1,type);    readForUpdateStatement.setString(2,localId);    logger.debug("Executing: {}",readForUpdateStatement);    rs=readForUpdateStatement.executeQuery();    if (rs.next()) {      logger.debug("Read for update full id: {}",fullId);      return rs;    } else {      CleanupHelper.loggedClose(rs);      CleanupHelper.loggedClose(readForUpdateStatement);      throw new NotFoundException("Object " + fullId + " not found in "+ type);    }  } catch (  SQLException ex) {    CleanupHelper.loggedClose(rs);    CleanupHelper.loggedClose(readForUpdateStatement);    throw ex;  }}  }
class C{  @Override public void close(){  StaticUtils.close(reader,rejectWriter,skipWriter);}  }
class C{  public static Long counter32Value(Long V){  long v=V.longValue();  if (v > (pow(2,32) - 1)) {    return new Long(v % pow(2,32));  } else {    return V;  }}  }
class C{  public String charAsString(int nchars){  return String.valueOf(buffer,ptr,nchars - 1);}  }
class C{  public int columnAtPoint(Point point){  int x=point.x;  if (!getComponentOrientation().isLeftToRight()) {    x=getWidthInRightToLeft() - x - 1;  }  return getColumnModel().getColumnIndexAtX(x);}  }
class C{  public void addSubjectAlternativeName(int tag,byte[] name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public void autoroute_clear(){  for (  ExpandRoomFreespaceComplete curr_room : complete_expansion_rooms)   curr_room.remove_from_tree(art_search_tree);  complete_expansion_rooms.clear();  incomplete_expansion_rooms.clear();  expansion_room_instance_count.clear();  autoroute_clear_items();}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  public WorldCreator(String name){  if (name == null) {    throw new IllegalArgumentException("World name cannot be null");  }  this.name=name;  this.seed=(new Random()).nextLong();}  }
class C{  public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  public LogConfigurationException(String message){  super(message);}  }
class C{  public static void addAttributeToSchema(ServiceSchema serviceSchema,Node attributeSchemaNode) throws UpgradeException {  String classMethod="UpgradeUtils:addAttributeToSchema: ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Adding attributeschema :" + "for service :"+ serviceSchema.getName());  }  ByteArrayInputStream bis=null;  try {    bis=new ByteArrayInputStream(XMLUtils.print(attributeSchemaNode).getBytes());    serviceSchema.addAttributeSchema(bis);  } catch (  SMSException sme) {    debug.error(classMethod + "Cannot add attribute schema for " + serviceSchema.getName(),sme);    throw new UpgradeException(sme.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken : ",ssoe);    throw new UpgradeException(ssoe.getMessage());  }}  }
class C{  private static void updatePlatformServerList(String serverURL,String hostName) throws SMSException, SSOException {  SSOToken token=getAdminSSOToken();  ServiceSchemaManager ssm=new ServiceSchemaManager("iPlanetAMPlatformService",token);  ServiceSchema ss=ssm.getGlobalSchema();  AttributeSchema as=ss.getAttributeSchema("iplanet-am-platform-server-list");  Set<String> values=as.getDefaultValues();  if (!isInPlatformList(values,serverURL)) {    String instanceName=getNextAvailableServerId(values);    values.add(serverURL + "|" + instanceName);    as.setDefaultValues(values);    OrganizationConfigManager ocm=new OrganizationConfigManager(token,"/");    Map<String,Object> attrs=ocm.getAttributes("sunIdentityRepositoryService");    Set<String> origValues=(Set<String>)attrs.get("sunOrganizationAliases");    if (!origValues.contains(hostName)) {      values=new HashSet<String>();      values.add(hostName);      ocm.addAttributeValues("sunIdentityRepositoryService","sunOrganizationAliases",values);    }  }}  }
class C{  public static void logRequestInfo(HTTPRequestInfo requestInfo){  for (  HTTPAccessLogPublisher<?> publisher : loggerStorage.getLogPublishers()) {    publisher.logRequestInfo(requestInfo);  }}  }
class C{  public SessionName createSessionName(String name){  SessionNameField sessionNameImpl=new SessionNameField();  try {    sessionNameImpl.setValue(name);  } catch (  SdpException s) {    s.printStackTrace();  }  return sessionNameImpl;}  }
class C{  public void test_setCharLjava_lang_ObjectC() throws Exception {  TestField x=new TestField();  Field f=null;  char val=0;  try {    f=x.getClass().getDeclaredField("charField");    f.setChar(x,(char)1);    val=f.getChar(x);  } catch (  Exception e) {    fail("Exception during setChar test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",1,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setChar(x,Character.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("charPFField");    assertFalse(f.isAccessible());    f.setChar(x,Character.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("charField");    f.setChar(null,Character.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("charSField");  f.setChar(null,Character.MIN_VALUE);  val=f.getChar(x);  assertEquals("Returned incorrect char field value",Character.MIN_VALUE,val);}  }
class C{  public WSFederationException(String message){  super(message);}  }
class C{  public INITIALIZE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public InvalidAlgorithmParameterException(){  super();}  }
class C{  private void initParticleField(Context context,AttributeSet attributeSet){  BaseOneParticleInitializer initializerOne=new BaseOneParticleInitializer();  initializerOne.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerTwo=new BaseOneParticleInitializer();  initializerTwo.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerThree=new BaseOneParticleInitializer();  initializerThree.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerFour=new BaseOneParticleInitializer();  initializerFour.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerFive=new BaseOneParticleInitializer();  initializerFive.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerSix=new BaseOneParticleInitializer();  initializerSix.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerSeven=new BaseOneParticleInitializer();  initializerSeven.setParticleBitmap(bitmapDisappearDust);  BaseOneParticleInitializer initializerEight=new BaseOneParticleInitializer();  initializerEight.setParticleBitmap(bitmapDisappearDust);  mParticleInitializers=new ArrayList<>();  mParticleInitializers.add(initializerOne);  mParticleInitializers.add(initializerTwo);  mParticleInitializers.add(initializerThree);  mParticleInitializers.add(initializerFour);  mParticleInitializers.add(initializerFive);  mParticleInitializers.add(initializerSix);  mParticleInitializers.add(initializerSeven);  mParticleInitializers.add(initializerEight);  mParticleField=new ParticleField.ViewGenerator().setContext(context).setAttributeSet(attributeSet).setParticleNumbers(8).generate();  mDisappearField=new ParticleField.ViewGenerator().setContext(context).setAttributeSet(attributeSet).setParticleInitializers(mParticleInitializers).generate();}  }
class C{  protected void addUrl(String url){  try {    addUrl(new URL(url));  } catch (  IOException e) {    LOGGER.info("Skipped CRL url (malformed): " + url);  }}  }
class C{  public static void runTests(){  Robin robin=new Robin();  Deep deep=new Deep();  Large large=new Large();  robin.start();  deep.start();  large.start();  sleep(TEST_TIME * 1000);  quit=true;  try {    robin.join();    deep.join();    large.join();  } catch (  InterruptedException ie) {    System.err.println("join was interrupted");  }}  }
class C{  public void close() throws java.io.IOException {  isBack=false;  byteSource.close();}  }
class C{  public static int calculateB(int baseB,int level){switch (level) {case 0:    return 238;case 1:  return baseB;case 2:return (int)(baseB * (37 + 29 + 35) / (32f + 37 + 29+ 35));case 3:return (int)(baseB * (29 + 35) / (32f + 37 + 29+ 35));case 4:return (int)(baseB * (35) / (32f + 37 + 29+ 35));default :return 238;}}  }
class C{  @Deprecated public int _INVALID_getAmount(){  return NumberConversions.ceil(getAmount());}  }
class C{  @Inject public AuthorizeRequestValidatorImpl(ClientRegistrationStore clientRegistrationStore,RedirectUriValidator redirectUriValidator,OAuth2ProviderSettingsFactory providerSettingsFactory,ResponseTypeValidator responseTypeValidator){  this.clientRegistrationStore=clientRegistrationStore;  this.redirectUriValidator=redirectUriValidator;  this.providerSettingsFactory=providerSettingsFactory;  this.responseTypeValidator=responseTypeValidator;}  }
class C{  public PluginResult.PostOperation invokePostOperationDeletePlugins(PostOperationDeleteOperation deleteOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(deleteOperation);  for (  DirectoryServerPlugin p : postOperationDeletePlugins) {    if (isInternalOperation(deleteOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(deleteOperation);    } catch (    Exception e) {      logException(deleteOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(deleteOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textindexsizeerroffsetoutofbounds.class,args);}  }
class C{  private EntitlementException causeOf(EntitlementException ex){  if (ex.getErrorCode() == EntitlementException.INVALID_JSON) {    if (ex.getCause() instanceof JsonMappingException) {      if (ex.getCause().getCause() instanceof EntitlementException) {        EntitlementException cause=(EntitlementException)ex.getCause().getCause();        if (errorCodeMapping.containsKey(cause.getErrorCode())) {          return cause;        }      }    }  }  return ex;}  }
class C{  public CommandException(){}  }
class C{  public Polyline mirror_vertical(PlaPointInt p_pole){  PlaLineIntAlist new_arr=new PlaLineIntAlist(plaline_len());  int len=plaline_len();  for (int index=0; index < len; ++index) {    new_arr.add(plaline(index).mirror_vertical(p_pole));  }  return new Polyline(new_arr);}  }
class C{  BigInteger(int sign,int numberLength,int[] digits){  setJavaRepresentation(sign,numberLength,digits);}  }
class C{  public ContentInfo toASN1Structure(){  return contentInfo;}  }
class C{  public org.omg.CORBA.TCKind member_kind() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("member_kind",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.member_kind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException {  return verifyXMLSignature(element,DEF_ID_ATTRIBUTE,certAlias);}  }
class C{  public void dropComplete(boolean success) throws InvalidDnDOperationException {  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.dropComplete(success);  }}  }
class C{  @Inject public DataLayerConnectionFactoryCache(ConnectionType connectionType,ShutdownManager shutdownManager,ConnectionFactoryProvider connectionFactoryProvider,@Named(DataLayerConstants.DATA_LAYER_DEBUG) Debug debug){  this.connectionType=connectionType;  this.connectionFactoryProvider=connectionFactoryProvider;  shutdownManager.addShutdownListener(this);  this.debug=debug;}  }
class C{  public static void updateProviderKeyInfo(String realm,String entityID,String certAlias,boolean isSigning,boolean isIDP,String encAlgo,int keySize) throws IDFFMetaException {  IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();  EntityConfigElement config=metaManager.getEntityConfig(realm,entityID);  if (!config.isHosted()) {    String[] args={entityID,realm};    throw new IDFFMetaException("entityNotHosted",args);  }  EntityDescriptorElement desp=metaManager.getEntityDescriptor(realm,entityID);  if (isIDP) {    IDPDescriptorConfigElement idpConfig=IDFFMetaUtils.getIDPDescriptorConfig(config);    IDPDescriptorType idpDesp=IDFFMetaUtils.getIDPDescriptor(desp);    if ((idpConfig == null) || (idpDesp == null)) {      String[] args={entityID,realm};      throw new IDFFMetaException("entityNotIDP",args);    }    if ((certAlias == null) || (certAlias.length() == 0)) {      removeKeyDescriptor(idpDesp,isSigning);      if (isSigning) {        setExtendedAttributeValue(idpConfig,IFSConstants.SIGNING_CERT_ALIAS,null);      } else {        setExtendedAttributeValue(idpConfig,IFSConstants.ENCRYPTION_CERT_ALIAS,null);      }    } else {      KeyDescriptorElement kde=getKeyDescriptor(certAlias,isSigning,encAlgo,keySize);      updateKeyDescriptor(idpDesp,kde);      Set value=new HashSet();      value.add(certAlias);      if (isSigning) {        setExtendedAttributeValue(idpConfig,IFSConstants.SIGNING_CERT_ALIAS,value);      } else {        setExtendedAttributeValue(idpConfig,IFSConstants.ENCRYPTION_CERT_ALIAS,value);      }    }    metaManager.setEntityDescriptor(realm,desp);    metaManager.setEntityConfig(realm,config);  } else {    SPDescriptorConfigElement spConfig=IDFFMetaUtils.getSPDescriptorConfig(config);    SPDescriptorType spDesp=IDFFMetaUtils.getSPDescriptor(desp);    if ((spConfig == null) || (spDesp == null)) {      String[] args={entityID,realm};      throw new IDFFMetaException("entityNotSP",args);    }    if ((certAlias == null) || (certAlias.length() == 0)) {      removeKeyDescriptor(spDesp,isSigning);      if (isSigning) {        setExtendedAttributeValue(spConfig,IFSConstants.SIGNING_CERT_ALIAS,null);      } else {        setExtendedAttributeValue(spConfig,IFSConstants.ENCRYPTION_CERT_ALIAS,null);      }    } else {      KeyDescriptorElement kde=getKeyDescriptor(certAlias,isSigning,encAlgo,keySize);      updateKeyDescriptor(spDesp,kde);      Set value=new HashSet();      value.add(certAlias);      if (isSigning) {        setExtendedAttributeValue(spConfig,IFSConstants.SIGNING_CERT_ALIAS,value);      } else {        setExtendedAttributeValue(spConfig,IFSConstants.ENCRYPTION_CERT_ALIAS,value);      }    }    metaManager.setEntityDescriptor(realm,desp);    metaManager.setEntityConfig(realm,config);  }}  }
class C{  public boolean hasParameter(String name){  return authParams.getNameValue(name) != null;}  }
class C{  public static boolean isClassAvailable(final String className){  try {    Class.forName(className);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public BrdConnectable make_conductive(BrdArea p_area,int p_net_no){  BrdItem new_item;  PlaArea curr_area=p_area.get_relative_area();  int layer=p_area.get_layer();  ItemFixState fixed_state=p_area.get_fixed_state();  PlaVectorInt translation=p_area.get_translation();  int deg_rotation=p_area.get_rotation_in_degree();  boolean side_changed=p_area.get_side_changed();  NetNosList net_no_arr=new NetNosList(p_net_no);  new_item=new BrdAreaConduction(curr_area,layer,translation,deg_rotation,side_changed,net_no_arr,p_area.clearance_idx(),0,p_area.get_component_no(),p_area.area_name,true,fixed_state,this);  remove_item(p_area);  insert_item(new_item);  return (BrdConnectable)new_item;}  }
class C{  public static String[] importData(String realm,String metadata,String extended) throws WorkflowException {  String entityID=null;  try {    SAML2MetaManager metaManager=new SAML2MetaManager();    EntityConfigElement configElt=null;    if (extended != null) {      Object obj=SAML2MetaUtils.convertStringToJAXB(extended);      configElt=(obj instanceof EntityConfigElement) ? (EntityConfigElement)obj : null;      if (configElt != null && configElt.isHosted()) {        List config=configElt.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();        if (!config.isEmpty()) {          BaseConfigType bConfig=(BaseConfigType)config.iterator().next();          realm=SAML2MetaUtils.getRealmByMetaAlias(bConfig.getMetaAlias());        }      }    }    if (metadata != null) {      entityID=importSAML2MetaData(metaManager,realm,metadata);    }    if (configElt != null) {      metaManager.createEntityConfig(realm,configElt);    }  } catch (  SAML2MetaException e) {    DEBUG.error("An error occurred while importing the SAML metadata",e);    throw new WorkflowException(e.getMessage());  }catch (  JAXBException e) {    DEBUG.error("An error occurred while importing the SAML metadata",e);    throw new WorkflowException(e.getMessage());  }  String[] results={realm,entityID};  return results;}  }
class C{  private ConnectionWithControls findConnectionForLocalEntry(BasicNode node,boolean isConfigurationNode) throws LdapException {  if (node == rootNode) {    return connConfig;  }  final BasicNode parent=(BasicNode)node.getParent();  if (parent != null && parent != rootNode) {    return findConnectionForDisplayedEntry(parent,isConfigurationNode);  }  return isConfigurationNode ? connConfig : connUserData;}  }
class C{  public static void registerAlertGenerator(AlertGenerator alertGenerator){  DN componentDN=alertGenerator.getComponentEntryDN();  JMXMBean mBean=directoryServer.mBeans.get(componentDN);  if (mBean == null) {    mBean=new JMXMBean(componentDN);    mBean.addAlertGenerator(alertGenerator);    directoryServer.mBeans.put(componentDN,mBean);  } else {    mBean.addAlertGenerator(alertGenerator);  }}  }
class C{  public NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  public static String jsseToOpenSSL(String jsseCipherName){  if (!initialized) {    init();  }  return jsseToOpenSSL.get(jsseCipherName);}  }
class C{  public CannotReadException(String message){  super(message);}  }
class C{  public void clear(){  initialize();}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().deleteFoo(foo);}  }
class C{  public static String encodeForPOST(final String str){  try {    return Base64.encode(str.getBytes("UTF-8"),true);  } catch (  UnsupportedEncodingException uee) {    debug.error("SAML2Utils.encodeForPOST",uee);    return null;  }}  }
class C{  @Override public synchronized void startHandshake() throws IOException {synchronized (handshakeLock) {    checkOpen();    if (!handshakeStarted) {      handshakeStarted=true;    } else {      return;    }  }  final int seedLengthInBytes=NativeCrypto.RAND_SEED_LENGTH_IN_BYTES;  final SecureRandom secureRandom=sslParameters.getSecureRandomMember();  if (secureRandom == null) {    NativeCrypto.RAND_load_file("/dev/urandom",seedLengthInBytes);  } else {    NativeCrypto.RAND_seed(secureRandom.generateSeed(seedLengthInBytes));  }  final boolean client=sslParameters.getUseClientMode();  final long sslCtxNativePointer=(client) ? sslParameters.getClientSessionContext().sslCtxNativePointer : sslParameters.getServerSessionContext().sslCtxNativePointer;  this.sslNativePointer=0;  boolean exception=true;  try {    sslNativePointer=NativeCrypto.SSL_new(sslCtxNativePointer);    guard.open("close");    if (npnProtocols != null) {      NativeCrypto.SSL_CTX_enable_npn(sslCtxNativePointer);    }    if (client && alpnProtocols != null) {      NativeCrypto.SSL_CTX_set_alpn_protos(sslCtxNativePointer,alpnProtocols);    }    if (!client) {      Set<String> keyTypes=new HashSet<String>();      for (      String enabledCipherSuite : enabledCipherSuites) {        if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {          continue;        }        String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();        if (keyType != null) {          keyTypes.add(keyType);        }      }      for (      String keyType : keyTypes) {        try {          setCertificate(sslParameters.getKeyManager().chooseServerAlias(keyType,null,this));        } catch (        CertificateEncodingException e) {          throw new IOException(e);        }      }    }    NativeCrypto.setEnabledProtocols(sslNativePointer,enabledProtocols);    NativeCrypto.setEnabledCipherSuites(sslNativePointer,enabledCipherSuites);    if (useSessionTickets) {      NativeCrypto.SSL_clear_options(sslNativePointer,NativeCrypto.SSL_OP_NO_TICKET);    }    if (hostname != null) {      NativeCrypto.SSL_set_tlsext_host_name(sslNativePointer,hostname);    }    boolean enableSessionCreation=sslParameters.getEnableSessionCreation();    if (!enableSessionCreation) {      NativeCrypto.SSL_set_session_creation_enabled(sslNativePointer,enableSessionCreation);    }    AbstractSessionContext sessionContext;    OpenSSLSessionImpl sessionToReuse;    if (client) {      ClientSessionContext clientSessionContext=sslParameters.getClientSessionContext();      sessionContext=clientSessionContext;      sessionToReuse=getCachedClientSession(clientSessionContext);      if (sessionToReuse != null) {        NativeCrypto.SSL_set_session(sslNativePointer,sessionToReuse.sslSessionNativePointer);      }    } else {      sessionContext=sslParameters.getServerSessionContext();      sessionToReuse=null;    }    if (client) {    } else {      boolean certRequested;      if (sslParameters.getNeedClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER | NativeCrypto.SSL_VERIFY_FAIL_IF_NO_PEER_CERT);        certRequested=true;      } else       if (sslParameters.getWantClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER);        certRequested=true;      } else {        certRequested=false;      }      if (certRequested) {        X509TrustManager trustManager=sslParameters.getTrustManager();        X509Certificate[] issuers=trustManager.getAcceptedIssuers();        if (issuers != null && issuers.length != 0) {          byte[][] issuersBytes;          try {            issuersBytes=encodeIssuerX509Principals(issuers);          } catch (          CertificateEncodingException e) {            throw new IOException("Problem encoding principals",e);          }          NativeCrypto.SSL_set_client_CA_list(sslNativePointer,issuersBytes);        }      }    }    int savedReadTimeoutMilliseconds=getSoTimeout();    int savedWriteTimeoutMilliseconds=getSoWriteTimeout();    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(handshakeTimeoutMilliseconds);      setSoWriteTimeout(handshakeTimeoutMilliseconds);    }    if (channelIdEnabled) {      if (client) {        if (channelIdPrivateKey == null) {          throw new SSLHandshakeException("Invalid TLS channel ID key specified");        }        NativeCrypto.SSL_set1_tls_channel_id(sslNativePointer,channelIdPrivateKey.getPkeyContext());      } else {        NativeCrypto.SSL_enable_tls_channel_id(sslNativePointer);      }    }    long sslSessionNativePointer;    try {      sslSessionNativePointer=NativeCrypto.SSL_do_handshake(sslNativePointer,socket.getFileDescriptor$(),this,getSoTimeout(),client,npnProtocols,client ? null : alpnProtocols);    } catch (    CertificateException e) {      SSLHandshakeException wrapper=new SSLHandshakeException(e.getMessage());      wrapper.initCause(e);      throw wrapper;    }    byte[] sessionId=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);    if (sessionToReuse != null && Arrays.equals(sessionToReuse.getId(),sessionId)) {      this.sslSession=sessionToReuse;      sslSession.lastAccessedTime=System.currentTimeMillis();      NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);    } else {      if (!enableSessionCreation) {        throw new IllegalStateException("SSL Session may not be created");      }      X509Certificate[] localCertificates=createCertChain(NativeCrypto.SSL_get_certificate(sslNativePointer));      X509Certificate[] peerCertificates=createCertChain(NativeCrypto.SSL_get_peer_cert_chain(sslNativePointer));      this.sslSession=new OpenSSLSessionImpl(sslSessionNativePointer,localCertificates,peerCertificates,getPeerHostName(),getPeerPort(),sessionContext);      if (handshakeCompleted) {        sessionContext.putSession(sslSession);      }    }    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(savedReadTimeoutMilliseconds);      setSoWriteTimeout(savedWriteTimeoutMilliseconds);    }    if (handshakeCompleted) {      notifyHandshakeCompletedListeners();    }    exception=false;  } catch (  SSLProtocolException e) {    throw new SSLHandshakeException(e);  } finally {    if (exception) {      close();    }  }}  }
class C{  public void logModifyResponse(ModifyOperation modifyOperation){}  }
class C{  protected final void openSessionForPublish(String applicationId,List<String> permissions){  openSessionForPublish(applicationId,permissions,SessionLoginBehavior.SSO_WITH_FALLBACK,Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE);}  }
class C{  private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  void deregisterAllGroups(){  lock.writeLock().lock();  try {    groupInstances.clear();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Inject public UmaResourceSetRegistrationHook(ResourceTypeService resourceTypeService,ApplicationServiceFactory applicationServiceFactory,UmaPolicyService policyService,SessionCache sessionCache) throws EntitlementException {  this.resourceTypeService=resourceTypeService;  this.applicationServiceFactory=applicationServiceFactory;  this.policyService=policyService;  this.sessionCache=sessionCache;}  }
class C{  @DataProvider(name="csnData") public Object[][] createCSNData(){  return new Object[][]{{new CSN(1,0,1)},{new CSN(TimeThread.getTime(),123,45)}};}  }
class C{  protected View createChild(String name){  if (model.isChildSupported(name)) {    return model.createChild(this,name);  } else {    throw new IllegalArgumentException("Invalid child name [" + name + "]");  }}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public static boolean hasServerOrSiteId(SSOToken ssoToken,String serverId) throws SMSException, SSOException {  return getServerConfigurationId(getRootServerConfigWithRetry(ssoToken)).contains(serverId) || getSiteConfigurationId(getRootSiteConfig(ssoToken)).contains(serverId);}  }
class C{  public Builder aliasPrefix(String aliasPrefix){  this.aliasPrefix=aliasPrefix;  return this;}  }
class C{  protected void verifyAndUnLinkGroupToRole(SSOToken token,Set members,String groupDN) throws AMException {  DN dn=DN.valueOf(groupDN);  String roleName=getRoleFromGroupDN(dn);  if (roleName != null) {    String orgDN=dn.parent().parent().toString();    String roleDN=NamingAttributeManager.getNamingAttribute(AMObject.ROLE) + "=" + roleName+ ","+ orgDN;    if (debug.messageEnabled()) {      debug.message("Compliance.verifyAndUnlinkGroupToRole(): " + "Unlinking group: " + groupDN + " to role :"+ roleDN);    }    Iterator itr=members.iterator();    try {      ManagedRole role=(ManagedRole)UMSObject.getObject(token,new Guid(roleDN));      while (itr.hasNext()) {        String memberDN=(String)itr.next();        role.removeMember(new Guid(memberDN));      }    } catch (    EntryNotFoundException ex) {      debug.error("Compliance.verifyAndUnLinkGroupToRole: Admin " + "groups are missing");    }catch (    UMSException ue) {      debug.error("Compliance.verifyAndUnLinkGroupToRole(): ",ue);      Object args[]={roleDN};      throw new AMException(AMSDKBundle.getString("972",args),"772",args);    }  }}  }
class C{  private double check_neck_down_at_dest_pin(ExpandRoomComplete p_room){  Collection<ExpandDoorItem> target_doors=p_room.get_target_doors();  for (  ExpandDoorItem curr_target_door : target_doors) {    if (curr_target_door.item instanceof board.items.BrdAbitPin) {      return ((board.items.BrdAbitPin)curr_target_door.item).get_trace_neckdown_halfwidth(p_room.get_layer());    }  }  return 0;}  }
class C{  public ParserAdapter() throws SAXException {  String driver=System.getProperty("org.xml.sax.parser");  try {    setup(ParserFactory.makeParser());  } catch (  ClassNotFoundException e1) {    throw new SAXException("Cannot find SAX1 driver class " + driver,e1);  }catch (  IllegalAccessException e2) {    throw new SAXException("SAX1 driver class " + driver + " found but cannot be loaded",e2);  }catch (  InstantiationException e3) {    throw new SAXException("SAX1 driver class " + driver + " loaded but cannot be instantiated",e3);  }catch (  ClassCastException e4) {    throw new SAXException("SAX1 driver class " + driver + " does not implement org.xml.sax.Parser");  }catch (  NullPointerException e5) {    throw new SAXException("System property org.xml.sax.parser not specified");  }}  }
class C{  public Environment createEnvironment(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ENVIRONMENT,elem);  if (obj == null) {    return new EnvironmentImpl(elem);  } else {    return (Environment)obj;  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.NameIDType createNameIDType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl();}  }
class C{  public INV_FLAG(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  protected void updateLeadIndex(){  if (leadPath != null) {    if (selection == null) {      leadPath=null;      leadIndex=leadRow=-1;    } else {      leadRow=leadIndex=-1;      for (int counter=selection.length - 1; counter >= 0; counter--) {        if (selection[counter] == leadPath) {          leadIndex=counter;          break;        }      }    }  } else {    leadIndex=-1;  }}  }
class C{  public NoSuchProviderException(String msg){  super(msg);}  }
class C{  private void mainOutsideEventThread(String[] args){  displaySplashScreen();  long splashDisplayStartTime=System.currentTimeMillis();  constructApplication(args);  sleepIfNecessary(splashDisplayStartTime);  disposeSplashScreen();  displayApplication();}  }
class C{  public void startDrag(Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,dragImage,imageOffset,transferable,dsl);}  }
class C{  public IllegalSelectorException(){}  }
class C{  public BarcodeQRCode(String code,Map<EncodeHintType,Object> hints){  this.code=code;  this.hints=hints;  regenerate();}  }
class C{  public boolean isEquals(String partnerID){  return this.sessionPartner.equals(partnerID);}  }
class C{  @Override public void begin(String namespace,String nameX,Attributes attributes) throws Exception {  for (int i=0; i < attributes.getLength(); i++) {    String name=attributes.getLocalName(i);    if ("".equals(name)) {      name=attributes.getQName(i);    }    String value=attributes.getValue(i);    if (!excludes.containsKey(name)) {      if (!digester.isFakeAttribute(digester.peek(),name) && !IntrospectionUtils.setProperty(digester.peek(),name,value) && digester.getRulesValidation()) {        digester.getLogger().warn("[SetAllPropertiesRule]{" + digester.getMatch() + "} Setting property '"+ name+ "' to '"+ value+ "' did not find a matching property.");      }    }  }}  }
class C{  @Override public boolean isFullSpan(){  return true;}  }
class C{  @Override public int read(char[] buf,int offset,int len) throws IOException {  return reader.read(buf,offset,len);}  }
class C{  static Promise<Integer> blockingPromiseInt(){  return new BlockingPromise<>();}  }
class C{  public boolean canContinueReading(){  return canContinueReading;}  }
class C{  public String replaceTokens(String queryString,String replacement){  return replaceTokens(queryString,replacement,new String[]{});}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_size - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return resetPosition();}  }
class C{  public static boolean equalsMaps(HashMap<String,String> original,HashMap<String,String> result){  if (original == null && result == null) {    return true;  } else {    if (original.size() != result.size())     return false;    for (int i=0; i < KEYS.length; i++) {      if (!original.get(KEYS[i]).equals(result.get(KEYS[i]))) {        System.out.println("for " + KEYS[i] + ": original:"+ original.get(KEYS[i]));        System.out.println();        System.out.println("  result:" + result.get(KEYS[i]));        System.out.println();        return false;      }    }    return true;  }}  }
class C{  @Override public void destroyModuleState(){  userTokenId=null;  userPrincipal=null;}  }
class C{  @Ignore @Test public void b4636331() throws Exception {  boolean failed=false;  MyHttpServer svr=MyHttpServer.create();  URL urls[]={new URL("http://localhost:" + svr.port() + "/dir1/"),new URL("http://localhost:" + svr.port() + "/dir2/")};  URLClassLoader cl=new URLClassLoader(urls);  svr.counters().reset();  URL url=cl.getResource("foo.gif");  if (svr.counters().getCount() > 0 || svr.counters().headCount() > 1) {    failed=true;  }  svr.counters().reset();  InputStream in=cl.getResourceAsStream("foo2.gif");  in.close();  if (svr.counters().getCount() > 1) {    failed=true;  }  svr.counters().reset();  Enumeration<?> e=cl.getResources("foos.gif");  try {    for (; ; ) {      e.nextElement();    }  } catch (  NoSuchElementException exc) {  }  if (svr.counters().getCount() > 1) {    failed=true;  }  if (failed) {    throw new Exception("Excessive http connections established - Test failed");  }}  }
class C{  @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  @SuppressWarnings("fallthrough") public void applyPattern(String pattern){  StringBuilder[] segments=new StringBuilder[4];  segments[SEG_RAW]=new StringBuilder();  int part=SEG_RAW;  int formatNumber=0;  boolean inQuote=false;  int braceStack=0;  maxOffset=-1;  for (int i=0; i < pattern.length(); ++i) {    char ch=pattern.charAt(i);    if (part == SEG_RAW) {      if (ch == '\'') {        if (i + 1 < pattern.length() && pattern.charAt(i + 1) == '\'') {          segments[part].append(ch);          ++i;        } else {          inQuote=!inQuote;        }      } else       if (ch == '{' && !inQuote) {        part=SEG_INDEX;        if (segments[SEG_INDEX] == null) {          segments[SEG_INDEX]=new StringBuilder();        }      } else {        segments[part].append(ch);      }    } else {      if (inQuote) {        segments[part].append(ch);        if (ch == '\'') {          inQuote=false;        }      } else {switch (ch) {case ',':          if (part < SEG_MODIFIER) {            if (segments[++part] == null) {              segments[part]=new StringBuilder();            }          } else {            segments[part].append(ch);          }        break;case '{':      ++braceStack;    segments[part].append(ch);  break;case '}':if (braceStack == 0) {  part=SEG_RAW;  makeFormat(i,formatNumber,segments);  formatNumber++;  segments[SEG_INDEX]=null;  segments[SEG_TYPE]=null;  segments[SEG_MODIFIER]=null;} else {  --braceStack;  segments[part].append(ch);}break;case ' ':if (part != SEG_TYPE || segments[SEG_TYPE].length() > 0) {segments[part].append(ch);}break;case '\'':inQuote=true;default :segments[part].append(ch);break;}}}}if (braceStack == 0 && part != 0) {maxOffset=-1;throw new IllegalArgumentException("Unmatched braces in the pattern.");}this.pattern=segments[0].toString();}  }
class C{  public Set createStaticGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public MapFailedException(java.io.IOException e){  super(e.getMessage());  initCause(e);}  }
class C{  public static void bakeAll(){synchronized (allLists) {    for (    HandlerList h : allLists) {      h.bake();    }  }}  }
class C{  public void unFollow(String login,String access_token,Callback<ActionResponse> callback){  userApi=getRetrofitForSimpleJson().create(UserApi.class);  userApi.unFollow(login,access_token).enqueue(callback);}  }
class C{  static String toLowerCase(String s){  int len=s.length();  StringBuilder sb=null;  for (int i=0; i < len; i++) {    char c=s.charAt(i);    if ((c >= 'a' && c <= 'z') || (c == '.')) {      if (sb != null)       sb.append(c);    } else     if ((c >= '0' && c <= '9') || (c == '-')) {      if (sb != null)       sb.append(c);    } else     if (c >= 'A' && c <= 'Z') {      if (sb == null) {        sb=new StringBuilder(len);        sb.append(s,0,i);      }      sb.append((char)(c - CASE_DIFF));    } else {      throw new IllegalArgumentException("Invalid characters in hostname");    }  }  return sb == null ? s : sb.toString();}  }
class C{  public SmapStratum(String stratumName){  this.stratumName=stratumName;  fileNameList=new ArrayList<>();  filePathList=new ArrayList<>();  lineData=new ArrayList<>();  lastFileID=0;}  }
class C{  public static String BooleanToString(Boolean bool){  if (bool == null) {    return "";  }  return bool.booleanValue() ? "1" : "0";}  }
class C{  public EntitiesViewBean(){  super("Entities");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createTableModel();  registerChildren();}  }
class C{  public void updateLineNumberCount(int lineNumber,long numOccurrences){  Long existingCount=lineNumbers.get(lineNumber);  if (existingCount == null) {    lineNumbers.put(lineNumber,numOccurrences);  } else {    lineNumbers.put(lineNumber,existingCount + numOccurrences);  }}  }
class C{  public static String printDocument(Node root) throws TransformerException, TransformerConfigurationException, FileNotFoundException {  TransformerFactory tf=XMLUtils.getTransformerFactory();  Transformer transformer=tf.newTransformer();  StringWriter writer=new StringWriter();  transformer.transform(new DOMSource(root),new StreamResult(writer));  return writer.getBuffer().toString();}  }
class C{  public Object peek(){  try {    return (stack.peek());  } catch (  EmptyStackException e) {    log.warn("Empty stack (returning null)");    return (null);  }}  }
class C{  public void logInfo(String string){  getLogger().info(string);}  }
class C{  private static String unCapitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  char chars[]=name.toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  protected void onBeforeBuildingXML(Map<SchemaType,Set<AttributeSchema>> map){  if (serviceName.equals("iPlanetAMSessionService")) {    Set<AttributeSchema> attrs=map.get(SchemaType.GLOBAL);    if (attrs != null) {      Iterator<AttributeSchema> it=attrs.iterator();      while (it.hasNext()) {        if (it.next().getName().equals("iplanet-am-session-constraint-resulting-behavior")) {          it.remove();          break;        }      }    }  }}  }
class C{  public boolean isLoaded(String id){  try {    if (super.findSession(id) != null)     return true;  } catch (  IOException e) {    log.error("checking isLoaded for id, " + id + ", "+ e.getMessage(),e);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateelement.class,args);}  }
class C{  public boolean containsProvider(String providerID){  EntityDescriptorElement ed=null;  try {    ed=metaManager.getEntityDescriptor("/",providerID);  } catch (  SAML2MetaException smex) {    SAML2Utils.debug.error("SAML2ProviderManager.containsProvider:",smex);  }  return (ed != null);}  }
class C{  public Assertion createAssertion(Object token) throws SAMLException {  if (useLocal) {    return (assertionManager.createAssertion(token));  }  String assertion=null;  try {    SessionProvider sessionProvider=SessionManager.getProvider();    Object[] args={sessionProvider.getSessionID(token)};    assertion=(String)stub.send("createAssertion",args,null,null);    return (new Assertion(XMLUtils.toDOMDocument(assertion,SAMLUtils.debug).getDocumentElement()));  } catch (  Exception re) {    if (SAMLUtils.debug.warningEnabled()) {      SAMLUtils.debug.warning("AMC:createAssertion(SSO)",re);    }    throw (new SAMLException(re.getMessage()));  }}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public void beginDisplay(DisplayEvent event){  redirectToXui(getRequestContext().getRequest(),getRedirectRealm(this),MessageFormat.format("realms/{0}/scripts",getCurrentRealmEncoded()));}  }
class C{  public static SearchResultEntry newSearchResultEntry(final DN name){  final Entry entry=new LinkedHashMapEntry().setName(name);  return new SearchResultEntryImpl(entry);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public JTree(){  this(getDefaultTreeModel());}  }
class C{  public void testNamedNodeMapInvalidType() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element docElem;  Element newElem;  doc=(Document)load("hc_staff",builder);  docElem=doc.getDocumentElement();  attributes=docElem.getAttributes();  newElem=doc.createElement("html");{    boolean success=false;    try {      attributes.setNamedItem(newElem);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  @Override public void stopInternal(){  releaseConnectionLatch();  if (!paused) {    pause();  }  if (running) {    running=false;    unlockAccept();    for (int i=0; pollers != null && i < pollers.length; i++) {      if (pollers[i] == null)       continue;      pollers[i].destroy();      pollers[i]=null;    }    try {      stopLatch.await(selectorTimeout + 100,TimeUnit.MILLISECONDS);    } catch (    InterruptedException ignore) {    }    shutdownExecutor();    eventCache.clear();    nioChannels.clear();    processorCache.clear();  }}  }
class C{  public boolean regenerateField(){  PdfName type=getFormType();  String value=getValueAsString();  PdfPage page=null;  if (getWidgets().size() > 0) {    page=getWidgets().get(0).getPage();  }  if (PdfName.Tx.equals(type) || PdfName.Ch.equals(type)) {    try {      PdfDictionary apDic=getPdfObject().getAsDictionary(PdfName.AP);      PdfStream asNormal=null;      if (apDic != null) {        asNormal=apDic.getAsStream(PdfName.N);      }      PdfArray bBox=getPdfObject().getAsArray(PdfName.Rect);      if (bBox == null) {        PdfArray kids=getKids();        if (kids == null) {          throw new PdfException(PdfException.WrongFormFieldAddAnnotationToTheField);        }        bBox=((PdfDictionary)kids.get(0)).getAsArray(PdfName.Rect);      }      Object[] fontAndSize=getFontAndSize(asNormal);      PdfFont localFont=(PdfFont)fontAndSize[0];      float fontSize=(float)fontAndSize[1];      if (fontSize == 0) {        fontSize=(float)DEFAULT_FONT_SIZE;      }      int pageRotation=0;      if (page != null) {        pageRotation=page.getRotation();        pageRotation*=-1;      }      PdfArray matrix;      if (pageRotation % 90 == 0) {        double angle=pageRotation % 360;        angle=degreeToRadians(angle);        Rectangle rect=bBox.toRectangle();        double translationWidth=0;        double translationHeight=0;        if (angle >= -1 * Math.PI && angle <= -1 * Math.PI / 2) {          translationWidth=rect.getWidth();        }        if (angle <= -1 * Math.PI) {          translationHeight=rect.getHeight();        }        matrix=new PdfArray(new double[]{Math.cos(angle),-Math.sin(angle),Math.sin(angle),Math.cos(angle),translationWidth,translationHeight});        if (angle % (Math.PI / 2) == 0 && angle % (Math.PI) != 0) {          rect.setWidth(bBox.toRectangle().getHeight());          rect.setHeight(bBox.toRectangle().getWidth());        }        rect.setX(rect.getX() + (float)translationWidth);        rect.setY(rect.getY() + (float)translationHeight);        bBox=new PdfArray(rect);      } else {        Logger logger=LoggerFactory.getLogger(PdfFormField.class);        logger.error(LogMessageConstant.INCORRECT_PAGEROTATION);        matrix=new PdfArray(new double[]{1,0,0,1,0,0});      }      float fieldRotation=0;      if (this.getPdfObject().getAsDictionary(PdfName.MK) != null && this.getPdfObject().getAsDictionary(PdfName.MK).get(PdfName.R) != null) {        fieldRotation=(float)this.getPdfObject().getAsDictionary(PdfName.MK).getAsFloat(PdfName.R);        fieldRotation+=pageRotation;      }      if (fieldRotation % 90 == 0) {        double angle=fieldRotation % 360;        angle=degreeToRadians(angle);        double translationWidth=calculateTranslationWidthAfterFieldRot(bBox.toRectangle(),degreeToRadians(pageRotation),angle);        double translationHeight=calculateTranslationHeightAfterFieldRot(bBox.toRectangle(),degreeToRadians(pageRotation),angle);        Matrix currentMatrix=new Matrix(matrix.getAsNumber(0).floatValue(),matrix.getAsNumber(1).floatValue(),matrix.getAsNumber(2).floatValue(),matrix.getAsNumber(3).floatValue(),matrix.getAsNumber(4).floatValue(),matrix.getAsNumber(5).floatValue());        Matrix toConcatenate=new Matrix((float)Math.cos(angle),(float)(-Math.sin(angle)),(float)(Math.sin(angle)),(float)(Math.cos(angle)),(float)translationWidth,(float)translationHeight);        currentMatrix=currentMatrix.multiply(toConcatenate);        matrix=new PdfArray(new float[]{currentMatrix.get(0),currentMatrix.get(1),currentMatrix.get(3),currentMatrix.get(4),currentMatrix.get(6),currentMatrix.get(7)});        Rectangle rect=bBox.toRectangle();        if (angle % (Math.PI / 2) == 0 && angle % (Math.PI) != 0) {          rect.setWidth(bBox.toRectangle().getHeight());          rect.setHeight(bBox.toRectangle().getWidth());        }        rect.setX(rect.getX() + (float)translationWidth);        rect.setY(rect.getY() + (float)translationHeight);        bBox=new PdfArray(rect);      }      PdfFormXObject appearance=null;      if (asNormal != null) {        appearance=new PdfFormXObject(asNormal);        appearance.setBBox(new PdfArray(new float[]{0,0,bBox.toRectangle().getWidth(),bBox.toRectangle().getHeight()}));      }      if (appearance == null) {        appearance=new PdfFormXObject(new Rectangle(0,0,bBox.toRectangle().getWidth(),bBox.toRectangle().getHeight()));      }      if (matrix != null) {        appearance.put(PdfName.Matrix,matrix);      }      if (PdfName.Tx.equals(type)) {        if (!isMultiline()) {          drawTextAppearance(bBox.toRectangle(),localFont,fontSize,value,appearance);        } else {          drawMultiLineTextAppearance(bBox.toRectangle(),localFont,fontSize,value,appearance);        }      } else {        if (!getFieldFlag(PdfChoiceFormField.FF_COMBO)) {          PdfNumber topIndex=((PdfChoiceFormField)this).getTopIndex();          PdfArray options=(PdfArray)getOptions().clone();          if (topIndex != null) {            PdfObject object=options.get(topIndex.intValue());            options.remove(topIndex.intValue());            options.add(0,object);          }          value=optionsArrayToString(options);        }        drawMultiLineTextAppearance(bBox.toRectangle(),localFont,fontSize,value,appearance);      }      appearance.getResources().addFont(getDocument(),localFont);      PdfDictionary ap=new PdfDictionary();      ap.put(PdfName.N,appearance.getPdfObject());      put(PdfName.AP,ap);      return true;    } catch (    IOException e) {      throw new PdfException(e);    }  } else   if (PdfName.Btn.equals(type)) {    int ff=getFieldFlags();    if ((ff & PdfButtonFormField.FF_PUSH_BUTTON) != 0) {      try {        value=text;        PdfFormXObject appearance;        Rectangle rect=getRect(getPdfObject());        PdfDictionary apDic=getPdfObject().getAsDictionary(PdfName.AP);        if (apDic == null) {          List<PdfWidgetAnnotation> widgets=getWidgets();          if (widgets.size() == 1) {            apDic=widgets.get(0).getPdfObject().getAsDictionary(PdfName.AP);          }        }        if (img != null) {          appearance=drawPushButtonAppearance(rect.getWidth(),rect.getHeight(),value,null,0);        } else         if (form != null) {          appearance=drawPushButtonAppearance(rect.getWidth(),rect.getHeight(),value,null,0);        } else {          PdfStream asNormal=null;          if (apDic != null) {            asNormal=apDic.getAsStream(PdfName.N);          }          Object[] fontAndSize=getFontAndSize(asNormal);          PdfFont localFont=(PdfFont)fontAndSize[0];          float fontSize=(float)fontAndSize[1];          appearance=drawPushButtonAppearance(rect.getWidth(),rect.getHeight(),value,localFont,fontSize);          appearance.getResources().addFont(getDocument(),localFont);        }        if (apDic == null) {          apDic=new PdfDictionary();          put(PdfName.AP,apDic);        }        apDic.put(PdfName.N,appearance.getPdfObject());      } catch (      IOException e) {        throw new PdfException(e);      }    } else     if ((ff & PdfButtonFormField.FF_RADIO) != 0) {      PdfArray kids=getKids();      for (int i=0; i < kids.size(); i++) {        PdfObject kid=kids.get(i);        if (kid.isIndirectReference()) {          kid=((PdfIndirectReference)kid).getRefersTo();        }        PdfFormField field=new PdfFormField((PdfDictionary)kid);        PdfWidgetAnnotation widget=field.getWidgets().get(0);        PdfDictionary buttonValues=field.getPdfObject().getAsDictionary(PdfName.AP).getAsDictionary(PdfName.N);        String state;        if (buttonValues.get(new PdfName(value)) != null) {          state=value;        } else {          state="Off";        }        widget.setAppearanceState(new PdfName(state));      }    } else {      Rectangle rect=getRect(getPdfObject());      setCheckType(checkType);      String pdfAVersion=pdfAConformanceLevel != null ? pdfAConformanceLevel.getPart() : "";switch (pdfAVersion) {case "1":        drawPdfA1CheckAppearance(rect.getWidth(),rect.getHeight(),value,checkType);      break;case "2":    drawPdfA2CheckAppearance(rect.getWidth(),rect.getHeight(),value,checkType);  break;case "3":drawPdfA2CheckAppearance(rect.getWidth(),rect.getHeight(),value,checkType);break;default :drawCheckAppearance(rect.getWidth(),rect.getHeight(),value);break;}PdfWidgetAnnotation widget=getWidgets().get(0);if (widget.getNormalAppearanceObject() != null && widget.getNormalAppearanceObject().containsKey(new PdfName(value))) {widget.setAppearanceState(new PdfName(value));} else {widget.setAppearanceState(new PdfName("Off"));}}}return true;}  }
class C{  public void testDestroyFailedException03(){  String msg=null;  DestroyFailedException dfE=new DestroyFailedException(msg);  assertNull("getMessage() must return null.",dfE.getMessage());  assertNull("getCause() must return null",dfE.getCause());}  }
class C{  public static String removeNewLineChars(final String string){  if (StringUtils.isBlank(string)) {    return string;  }  String newLineRegularExpression="(\\n)";  return string.replaceAll(newLineRegularExpression,"");}  }
class C{  public SynchronizationException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public void writeBindRequest(final int messageID,final int version,final GenericBindRequest request) throws IOException {  logger.trace("ENCODE LDAP BIND REQUEST(messageID=%d, auth=0x%x, request=%s)",messageID,request.getAuthenticationType(),request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_BIND_REQUEST);{      writer.writeInteger(version);      writer.writeOctetString(request.getName());      writer.writeOctetString(request.getAuthenticationType(),request.getAuthenticationValue());    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  public JobKOctetsProcessed(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Inject public UmaWellKnownConfigurationEndpoint(UmaUrisFactory urisFactory,UmaProviderSettingsFactory providerSettingsFactory,UmaExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.urisFactory=urisFactory;  this.providerSettingsFactory=providerSettingsFactory;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public void doLayout(){  if (editingComponent != null) {    int width=getWidth();    int height=getHeight();    if (getComponentOrientation().isLeftToRight()) {      editingComponent.setBounds(offset,0,width - offset,height);    } else {      editingComponent.setBounds(0,0,width - offset,height);    }  }}  }
class C{  public static LDAPURL valueOf(String host,int port){  return valueOf(host,port,null);}  }
class C{  public static void logVersionInfo(){  Log.i(TAG,"vendor  : " + GLES20.glGetString(GLES20.GL_VENDOR));  Log.i(TAG,"renderer: " + GLES20.glGetString(GLES20.GL_RENDERER));  Log.i(TAG,"version : " + GLES20.glGetString(GLES20.GL_VERSION));  if (false) {    int[] values=new int[1];    GLES30.glGetIntegerv(GLES30.GL_MAJOR_VERSION,values,0);    int majorVersion=values[0];    GLES30.glGetIntegerv(GLES30.GL_MINOR_VERSION,values,0);    int minorVersion=values[0];    if (GLES30.glGetError() == GLES30.GL_NO_ERROR) {      Log.i(TAG,"iversion: " + majorVersion + "."+ minorVersion);    }  }}  }
class C{  public Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  public String encodeURL(String url){  checkTokenType("encodeURL");  return sessionURL.encodeURL(url,session);}  }
class C{  public NoSuchMethodException(){  super();}  }
class C{  boolean shuttingDown(){  return shutdown;}  }
class C{  public void testCase12(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Override public int hashCode(){  int code=1;  if (propertyName != null) {    code=31 * code + propertyName.hashCode();  }  if (propertyValues != null) {    code=31 * code + propertyValues.hashCode();  }  if (pResponseProviderName != null) {    code=31 * code + pResponseProviderName.hashCode();  }  return code;}  }
class C{  public static void bindThread(Object obj,Object token) throws NamingException {  if (ContextAccessController.checkSecurityToken(obj,token)) {    Context context=objectBindings.get(obj);    if (context == null) {      throw new NamingException(sm.getString("contextBindings.unknownContext",obj));    }    threadBindings.put(Thread.currentThread(),context);    threadObjectBindings.put(Thread.currentThread(),obj);  }}  }
class C{  private void parseAndStoreReader(BufferedReader in) throws IOException {  while (true) {    String line=in.readLine();    if (line == null) {      return;    }    if (line.length() > 0) {      char firstChar=line.charAt(0);      if (firstChar != '#' && firstChar != '!') {        while (continueLine(line)) {          String nextLine=in.readLine();          if (nextLine == null) {            nextLine="";          }          String loppedLine=line.substring(0,line.length() - 1);          int startIndex=0;          for (; startIndex < nextLine.length(); startIndex++) {            if (whiteSpaceChars.indexOf(nextLine.charAt(startIndex)) == -1) {              break;            }          }          nextLine=nextLine.substring(startIndex,nextLine.length());          line=loppedLine + nextLine;        }        int len=line.length();        int keyStart=0;        for (; keyStart < len; keyStart++) {          if (whiteSpaceChars.indexOf(line.charAt(keyStart)) == -1) {            break;          }        }        if (keyStart == len) {          continue;        }        int separatorIndex=keyStart;        for (; separatorIndex < len; separatorIndex++) {          char currentChar=line.charAt(separatorIndex);          if (currentChar == '\\') {            separatorIndex++;          } else           if (keyValueSeparators.indexOf(currentChar) != -1) {            break;          }        }        int valueIndex=separatorIndex;        for (; valueIndex < len; valueIndex++) {          if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {            break;          }        }        if (valueIndex < len) {          if (strictKeyValueSeparators.indexOf(line.charAt(valueIndex)) != -1) {            valueIndex++;          }        }        while (valueIndex < len) {          if (whiteSpaceChars.indexOf(line.charAt(valueIndex)) == -1) {            break;          }          valueIndex++;        }        String key=line.substring(keyStart,separatorIndex);        String value=(separatorIndex < len) ? line.substring(valueIndex,len) : "";        key=loadConvert(key);        value=loadConvert(value);        try {          MimeType mime=new MimeType(value);          if ("text".equals(mime.getPrimaryType())) {            String charset=mime.getParameter("charset");            if (DataTransferer.doesSubtypeSupportCharset(mime.getSubType(),charset)) {              DataTransferer transferer=DataTransferer.getInstance();              if (transferer != null) {                transferer.registerTextFlavorProperties(key,charset,mime.getParameter("eoln"),mime.getParameter("terminators"));              }            }            mime.removeParameter("charset");            mime.removeParameter("class");            mime.removeParameter("eoln");            mime.removeParameter("terminators");            value=mime.toString();          }        } catch (        MimeTypeParseException e) {          e.printStackTrace();          continue;        }        DataFlavor flavor;        try {          flavor=new DataFlavor(value);        } catch (        Exception e) {          try {            flavor=new DataFlavor(value,null);          } catch (          Exception ee) {            ee.printStackTrace();            continue;          }        }        final LinkedHashSet<DataFlavor> dfs=new LinkedHashSet<>();        dfs.add(flavor);        if ("text".equals(flavor.getPrimaryType())) {          dfs.addAll(convertMimeTypeToDataFlavors(value));          store(flavor.mimeType.getBaseType(),key,getTextTypeToNative());        }        for (        DataFlavor df : dfs) {          store(df,key,getFlavorToNative());          store(key,df,getNativeToFlavor());        }      }    }  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  @Override public void afterTokenHandling(OAuth2Request o2request,Request request,Response response){  removeCookie(request,response);}  }
class C{  private ShareTemplate findShareTemplate(final String resourcePath){  ShareTemplate matching=null;  int longest=-1;  for (  ShareTemplate template : templates) {    Matcher matcher=template.getPattern().matcher(resourcePath);    if (matcher.matches() && (matcher.end() > longest)) {      matching=template;      longest=matcher.end();    }  }  return matching;}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    if (m_scheme != null && p_base != null) {      if (uriSpec.startsWith("/") || !m_scheme.equals(p_base.m_scheme) || !p_base.getSchemeSpecificPart().startsWith("/")) {        p_base=null;      }    }    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  protected Expression notequals(int opPos) throws TransformerException {  return compileOperation(new NotEquals(),opPos);}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  public MakeLDIFInputStream(TemplateFile templateFile){  this.templateFile=templateFile;  allGenerated=false;  closed=false;  entryQueue=new LinkedBlockingQueue<>(10);  ioException=null;  entryBytes=null;  entryOutputStream=new ByteArrayOutputStream(8192);  LDIFExportConfig exportConfig=new LDIFExportConfig(entryOutputStream);  try {    ldifWriter=new LDIFWriter(exportConfig);  } catch (  IOException ioe) {    ioException=ioe;  }  generatorThread=new MakeLDIFInputStreamThread(this,templateFile);  generatorThread.start();}  }
class C{  public ReferenceQueue(){}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public RhinoScriptEngineFactory(){  this(new ContextFactory());}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      int type=_type2(_currentNode);      if (type != ATTRIBUTE_NODE && type != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  public void testToBigIntegerPos3(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+45";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849027687876782870000000000000000");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public void createAMConfigProperties(String configFile,String templateFile,Properties properties) throws IOException {  String content=getFileContent(templateFile);  String uriWithSlash=(String)properties.get("DEPLOY_URI");  if ((uriWithSlash != null) && (uriWithSlash.length() > 0)) {    if (uriWithSlash.charAt(0) != '/') {      uriWithSlash="/" + uriWithSlash;      properties.put("DEPLOY_URI",uriWithSlash);    }    content=content.replaceAll("/@DEPLOY_URI@",uriWithSlash);  }  for (Iterator i=properties.keySet().iterator(); i.hasNext(); ) {    String tag=(String)i.next();    content=content.replaceAll("@" + tag + "@",(String)properties.get(tag));  }  String protocol=(String)properties.get(TAG_SERVER_PROTOCOL);  if (protocol.equalsIgnoreCase("https")) {    content+=TRUST_ALL_CERTS;  }  URL url=servletContext.getResource("/WEB-INF/lib/openssoclientsdk.jar");  if (url != null) {    String keystoreLocation=(url.toString()).substring(5);    int index=keystoreLocation.indexOf("WEB-INF");    keystoreLocation=keystoreLocation.substring(0,index - 1);    content=content.replaceAll("@BASE_DIR@",keystoreLocation);  }  String configDir=(String)properties.get("CONFIG_DIR");  if ((configDir != null) && (configDir.trim().length() > 0)) {    content+="\n" + SystemProperties.CONFIG_PATH + "="+ configDir+ "\n";  }  String consoleRemote=(String)properties.get("CONSOLE_REMOTE");  if ((consoleRemote != null) && consoleRemote.equals("true")) {    content=content.replaceAll("com.iplanet.am.sdk.remote","com.iplanet.am.sdk.ldap");  }  File file=new File(configFile);  String parentDir=file.getParent();  if (parentDir != null) {    file=new File(parentDir);    if (!file.exists()) {      file.mkdirs();    }  }  BufferedWriter out=new BufferedWriter(new FileWriter(configFile));  out.write(content);  out.close();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @Override public long skip(long n) throws IOException {  long toSkip=max >= 0 ? Math.min(n,max - pos) : n;  long skippedBytes=in.skip(toSkip);  pos+=skippedBytes;  return skippedBytes;}  }
class C{  public static byte[] readFileAsByteArray(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toByteArray();}  }
class C{  public void onClick(View v){switch (v.getId()) {case R.id.FMR_Antenna_short:    switchAntenna(1);  break;case R.id.FMR_Antenna_long:switchAntenna(0);break;case R.id.FMR_Stereomono_stereo:setStereoMono(false);break;case R.id.FMR_Stereomono_mono:setStereoMono(true);break;case R.id.FMR_Freq_tune:String s=mEditFreq.getText().toString();float freq=0;try {freq=Float.valueOf(s);int station=FmRadioUtils.computeStation(freq);if (!FmRadioUtils.isValidStation(station)) {Toast.makeText(FmRadioEmActivity.this,"Please input 87.5 ~ 108.0.",Toast.LENGTH_SHORT).show();mEditFreq.setText(FmRadioUtils.formatStation(mCurrentStation));return;}} catch (NumberFormatException e) {Toast.makeText(FmRadioEmActivity.this,"bad float format.",Toast.LENGTH_SHORT).show();mEditFreq.setText(FmRadioUtils.formatStation(mCurrentStation));return;}mButtonTune.setEnabled(false);tuneToStation(FmRadioUtils.computeStation(freq));break;case R.id.FMR_EM_RSSI_THRESHOLD_OK:String rssi=mEditRssiThreshold.getText().toString();int rssi_edit=0;try {rssi_edit=Integer.valueOf(rssi);} catch (NumberFormatException e) {Log.e(TAG,"click rssi threshold button:" + e);Toast.makeText(FmRadioEmActivity.this,"bad format.",Toast.LENGTH_SHORT).show();mEditFreq.setText("0");return;}mButtonRssiThreshold.setEnabled(false);boolean isRssiOk=mService.setEmth(0,rssi_edit);mButtonRssiThreshold.setEnabled(true);if (isRssiOk) {Toast.makeText(FmRadioEmActivity.this,"Rssi Threshold set OK.",Toast.LENGTH_SHORT).show();} else {Toast.makeText(FmRadioEmActivity.this,"Rssi Threshold set fail.",Toast.LENGTH_SHORT).show();}break;case R.id.FMR_EM_DESENSE_RSSI_OK:String deRssi=mEditDesenseRssi.getText().toString();int deRssi_edit=0;try {deRssi_edit=Integer.valueOf(deRssi);} catch (NumberFormatException e) {Log.e(TAG,"click desense rssi button:" + e);Toast.makeText(FmRadioEmActivity.this,"bad format.",Toast.LENGTH_SHORT).show();mEditDesenseRssi.setText("0");return;}mButtonDesenseRssi.setEnabled(false);boolean isDeRssiOk=mService.setEmth(1,deRssi_edit);mButtonDesenseRssi.setEnabled(true);if (isDeRssiOk) {Toast.makeText(FmRadioEmActivity.this,"Desense Rssi Threshold set OK.",Toast.LENGTH_SHORT).show();} else {Toast.makeText(FmRadioEmActivity.this,"Desense Rssi Threshold set fail.",Toast.LENGTH_SHORT).show();}break;case R.id.FMR_EM_MUTE_GAIN_OK:String mutegain=mEditMuteGain.getText().toString();int mutegain_edit=0;try {mutegain_edit=Integer.valueOf(mutegain);} catch (NumberFormatException e) {Log.e(TAG,"click mute gain button:" + e);Toast.makeText(FmRadioEmActivity.this,"bad format.",Toast.LENGTH_SHORT).show();mEditMuteGain.setText("0");return;}mButtonMuteGain.setEnabled(false);boolean isMuteOk=mService.setEmth(2,mutegain_edit);mButtonMuteGain.setEnabled(true);if (isMuteOk) {Toast.makeText(FmRadioEmActivity.this,"Software mute gain set OK.",Toast.LENGTH_SHORT).show();} else {Toast.makeText(FmRadioEmActivity.this,"Software mute gain set fail.",Toast.LENGTH_SHORT).show();}break;case R.id.FMR_EM_CMD_OK:String cmd0=mEditCMD0.getText().toString();String cmd1=mEditCMD1.getText().toString();String cmd2=mEditCMD2.getText().toString();String cmd3=mEditCMD3.getText().toString();String cmd4=mEditCMD4.getText().toString();String cmd5=mEditCMD5.getText().toString();String cmd6=mEditCMD6.getText().toString();String cmd7=mEditCMD7.getText().toString();String cmd8=mEditCMD8.getText().toString();String cmd9=mEditCMD9.getText().toString();String cmd10=mEditCMD10.getText().toString();String cmd11=mEditCMD11.getText().toString();String cmd12=mEditCMD12.getText().toString();String cmd13=mEditCMD13.getText().toString();String cmd14=mEditCMD14.getText().toString();String cmd15=mEditCMD15.getText().toString();String cmd16=mEditCMD16.getText().toString();String cmd17=mEditCMD17.getText().toString();String cmd18=mEditCMD18.getText().toString();String cmd19=mEditCMD19.getText().toString();short[] cmdArray=new short[20];try {cmdArray=new short[]{Short.valueOf(cmd0),Short.valueOf(cmd1),Short.valueOf(cmd2),Short.valueOf(cmd3),Short.valueOf(cmd4),Short.valueOf(cmd5),Short.valueOf(cmd6),Short.valueOf(cmd7),Short.valueOf(cmd8),Short.valueOf(cmd9),Short.valueOf(cmd10),Short.valueOf(cmd11),Short.valueOf(cmd12),Short.valueOf(cmd13),Short.valueOf(cmd14),Short.valueOf(cmd15),Short.valueOf(cmd16),Short.valueOf(cmd17),Short.valueOf(cmd18),Short.valueOf(cmd19)};} catch (Exception e) {Log.e(TAG,"click cmd button:" + e);Toast.makeText(FmRadioEmActivity.this,"bad format.",Toast.LENGTH_SHORT).show();return;}short[] cmds=mService.emcmd(cmdArray);if (cmds == null) {Toast.makeText(FmRadioEmActivity.this,"cmd execute fail.",Toast.LENGTH_SHORT).show();Log.d(TAG,"cmd expand execute fail");return;}int size=cmds.length;int count=0;String[] values=new String[]{"","","","",""};int line=-1;while (count < size) {if (count % 4 == 0) {line+=1;}values[line]+=("0X" + cmds[count]);++count;}mTextCMDReturn0.setText(values[0]);mTextCMDReturn1.setText(values[1]);mTextCMDReturn2.setText(values[2]);mTextCMDReturn3.setText(values[3]);mTextCMDReturn4.setText(values[4]);break;default :Log.d(TAG,"invalid view id");}}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  public static void initializeTestBackend(boolean createBaseEntry) throws Exception {  initializeMemoryBackend(TEST_BACKEND_ID,TEST_ROOT_DN_STRING,createBaseEntry);}  }
class C{  public boolean hasReachedZero(){  return maxForwards == 0;}  }
class C{  public AttributeFilter includeAllOperationalAttributes(final boolean include){  this.includeAllOperationalAttributes=include;  return this;}  }
class C{  void updateEntityConfig(String realm,String cotName,String protocolType,Set trustedProviders) throws COTException {  if (protocolType.equalsIgnoreCase(COTConstants.IDFF)) {    updateIDFFEntityConfig(realm,cotName,trustedProviders);  } else   if (protocolType.equalsIgnoreCase(COTConstants.SAML2)) {    updateSAML2EntityConfig(realm,cotName,trustedProviders);  } else   if (protocolType.equalsIgnoreCase(COTConstants.WS_FED)) {    updateWSFedEntityConfig(realm,cotName,trustedProviders);  } else {    String[] args={protocolType};    throw new COTException("invalidProtocolType",args);  }}  }
class C{  boolean removeArgument(final Argument arg){  return this.args.remove(arg);}  }
class C{  public void loadPatterns(String filename) throws HyphenationException, FileNotFoundException {  loadPatterns(new FileInputStream(filename),filename);}  }
class C{  protected static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){  Map attributesMap=new AMHashMap(fetchByteValues);  if (attrSet == null) {    return attributesMap;  }  int attrSetSize=attrSet.size();  if (!fetchByteValues) {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      String values[]=attr.getStringValues();      attributesMap.put(attr.getName(),stringArrayToSet(values));    }  } else {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      attributesMap.put(attr.getName(),attr.getByteValues());    }  }  return attributesMap;}  }
class C{  public static void removeJarFiles(String srcDir,String fileName){  String src=srcDir + FILE_SEP + fileName;  File file=new File(src);  if (file.exists()) {    file.delete();  } else   Debug.log("FileUtils.removeJarFiles() Unable to remove file");}  }
class C{  public static void main(String p_args[]){  new MainApplication(p_args);}  }
class C{  public void requestPasswordChangedTime(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_CHANGED_TIME);}  }
class C{  void pushChar(){  current.cursor--;  current.col--;}  }
class C{  protected void copy(WebResource resource,InputStream is,ServletOutputStream ostream) throws IOException {  IOException exception=null;  InputStream istream=new BufferedInputStream(is,input);  exception=copyRange(istream,ostream);  istream.close();  if (exception != null)   throw exception;}  }
class C{  public ResourceAccessStatement(String resourceID,Subject subject) throws SAMLException {  if (subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _resourceID=new ResourceID(resourceID);}  }
class C{  public Boolean isPassive(){  return isPassive;}  }
class C{  public boolean isCaseSensitive(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].caseSensitive;}  }
class C{  public void test_initLjava_security_KeyStore_02() throws Exception {  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  trustMF[0].init(ks);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @NonNull public static Animator fade(@NonNull final View view,float fromAlpha,float toAlpha,int duration){  ObjectAnimator animator=ObjectAnimator.ofFloat(view,"alpha",fromAlpha,toAlpha);  animator.setDuration(duration);  return animator;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("\nService Config Manager: ").append(serviceName).append("\n\tVersion: ").append(version);  try {    Iterator instances=getInstanceNames().iterator();    while (instances.hasNext()) {      String instanceName=(String)instances.next();      sb.append(getInstance(instanceName));      ServiceConfig config=null;      try {        config=getGlobalConfig(instanceName);        if (config != null) {          sb.append("\nGlobal Configuation:\n").append(config);        }      } catch (      SMSException e) {      }      try {        config=getOrganizationConfig(null,instanceName);        if (config != null) {          sb.append("Org Configuation:\n").append(config);        }      } catch (      SMSException e) {      }    }    sb.append("\n");  } catch (  SMSException smse) {    sb.append(smse.getMessage());  }catch (  SSOException ssoe) {    sb.append(ssoe.getMessage());  }  return (sb.toString());}  }
class C{  public XPath createXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.SELECT,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  public Builder superiorRules(final int... superiorRuleIDs){  for (  int ruleID : superiorRuleIDs) {    this.superiorRuleIDs.add(ruleID);  }  return this;}  }
class C{  public void minimizeFrame(JInternalFrame f){  if (f.isIcon()) {    iconifyFrame(f);    return;  }  if ((f.getNormalBounds()) != null) {    Rectangle r=f.getNormalBounds();    f.setNormalBounds(null);    try {      f.setSelected(true);    } catch (    PropertyVetoException e2) {    }    setBoundsForFrame(f,r.x,r.y,r.width,r.height);  }}  }
class C{  public FrameBodyTPE2(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private void updateTrustManager(UninstallUserData userData,LDAPConnectionConsoleInteraction ci){  userData.setTrustManager(getTrustManager(ci));}  }
class C{  private void prepareRequest(){  byte methodCode=requestHeaderMessage.getByte();  if (methodCode != Constants.SC_M_JK_STORED) {    String methodName=Constants.getMethodForCode(methodCode - 1);    request.method().setString(methodName);  }  requestHeaderMessage.getBytes(request.protocol());  requestHeaderMessage.getBytes(request.requestURI());  requestHeaderMessage.getBytes(request.remoteAddr());  requestHeaderMessage.getBytes(request.remoteHost());  requestHeaderMessage.getBytes(request.localName());  request.setLocalPort(requestHeaderMessage.getInt());  boolean isSSL=requestHeaderMessage.getByte() != 0;  if (isSSL) {    request.scheme().setString("https");  }  MimeHeaders headers=request.getMimeHeaders();  headers.setLimit(endpoint.getMaxHeaderCount());  request.getCookies().setLimit(getMaxCookieCount());  boolean contentLengthSet=false;  int hCount=requestHeaderMessage.getInt();  for (int i=0; i < hCount; i++) {    String hName=null;    int isc=requestHeaderMessage.peekInt();    int hId=isc & 0xFF;    MessageBytes vMB=null;    isc&=0xFF00;    if (0xA000 == isc) {      requestHeaderMessage.getInt();      hName=Constants.getHeaderForCode(hId - 1);      vMB=headers.addValue(hName);    } else {      hId=-1;      requestHeaderMessage.getBytes(tmpMB);      ByteChunk bc=tmpMB.getByteChunk();      vMB=headers.addValue(bc.getBuffer(),bc.getStart(),bc.getLength());    }    requestHeaderMessage.getBytes(vMB);    if (hId == Constants.SC_REQ_CONTENT_LENGTH || (hId == -1 && tmpMB.equalsIgnoreCase("Content-Length"))) {      long cl=vMB.getLong();      if (contentLengthSet) {        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);        setErrorState(ErrorState.CLOSE_CLEAN,null);      } else {        contentLengthSet=true;        request.setContentLength(cl);      }    } else     if (hId == Constants.SC_REQ_CONTENT_TYPE || (hId == -1 && tmpMB.equalsIgnoreCase("Content-Type"))) {      ByteChunk bchunk=vMB.getByteChunk();      request.contentType().setBytes(bchunk.getBytes(),bchunk.getOffset(),bchunk.getLength());    }  }  boolean secret=false;  byte attributeCode;  while ((attributeCode=requestHeaderMessage.getByte()) != Constants.SC_A_ARE_DONE) {switch (attributeCode) {case Constants.SC_A_REQ_ATTRIBUTE:      requestHeaderMessage.getBytes(tmpMB);    String n=tmpMB.toString();  requestHeaderMessage.getBytes(tmpMB);String v=tmpMB.toString();if (n.equals(Constants.SC_A_REQ_LOCAL_ADDR)) {request.localAddr().setString(v);} else if (n.equals(Constants.SC_A_REQ_REMOTE_PORT)) {try {  request.setRemotePort(Integer.parseInt(v));} catch (NumberFormatException nfe) {}} else if (n.equals(Constants.SC_A_SSL_PROTOCOL)) {request.setAttribute(SSLSupport.PROTOCOL_VERSION_KEY,v);} else {request.setAttribute(n,v);}break;case Constants.SC_A_CONTEXT:requestHeaderMessage.getBytes(tmpMB);break;case Constants.SC_A_SERVLET_PATH:requestHeaderMessage.getBytes(tmpMB);break;case Constants.SC_A_REMOTE_USER:if (tomcatAuthorization || !tomcatAuthentication) {requestHeaderMessage.getBytes(request.getRemoteUser());request.setRemoteUserNeedsAuthorization(tomcatAuthorization);} else {requestHeaderMessage.getBytes(tmpMB);}break;case Constants.SC_A_AUTH_TYPE:if (tomcatAuthentication) {requestHeaderMessage.getBytes(tmpMB);} else {requestHeaderMessage.getBytes(request.getAuthType());}break;case Constants.SC_A_QUERY_STRING:requestHeaderMessage.getBytes(request.queryString());break;case Constants.SC_A_JVM_ROUTE:requestHeaderMessage.getBytes(tmpMB);break;case Constants.SC_A_SSL_CERT:requestHeaderMessage.getBytes(certificates);break;case Constants.SC_A_SSL_CIPHER:requestHeaderMessage.getBytes(tmpMB);request.setAttribute(SSLSupport.CIPHER_SUITE_KEY,tmpMB.toString());break;case Constants.SC_A_SSL_SESSION:requestHeaderMessage.getBytes(tmpMB);request.setAttribute(SSLSupport.SESSION_ID_KEY,tmpMB.toString());break;case Constants.SC_A_SSL_KEY_SIZE:request.setAttribute(SSLSupport.KEY_SIZE_KEY,Integer.valueOf(requestHeaderMessage.getInt()));break;case Constants.SC_A_STORED_METHOD:requestHeaderMessage.getBytes(request.method());break;case Constants.SC_A_SECRET:requestHeaderMessage.getBytes(tmpMB);if (requiredSecret != null) {secret=true;if (!tmpMB.equals(requiredSecret)) {response.setStatus(403);setErrorState(ErrorState.CLOSE_CLEAN,null);}}break;default :break;}}if ((requiredSecret != null) && !secret) {response.setStatus(403);setErrorState(ErrorState.CLOSE_CLEAN,null);}ByteChunk uriBC=request.requestURI().getByteChunk();if (uriBC.startsWithIgnoreCase("http",0)) {int pos=uriBC.indexOf("://",0,3,4);int uriBCStart=uriBC.getStart();int slashPos=-1;if (pos != -1) {byte[] uriB=uriBC.getBytes();slashPos=uriBC.indexOf('/',pos + 3);if (slashPos == -1) {slashPos=uriBC.getLength();request.requestURI().setBytes(uriB,uriBCStart + pos + 1,1);} else {request.requestURI().setBytes(uriB,uriBCStart + slashPos,uriBC.getLength() - slashPos);}MessageBytes hostMB=headers.setValue("host");hostMB.setBytes(uriB,uriBCStart + pos + 3,slashPos - pos - 3);}}MessageBytes valueMB=request.getMimeHeaders().getValue("host");parseHost(valueMB);if (getErrorState().isError()) {getAdapter().log(request,response,0);}}  }
class C{  public static String decode(String s){  String ret=null;  try {    ret=decode(s,UTF_8);  } catch (  UnsupportedEncodingException e) {  }  return ret;}  }
class C{  public static Map<String,MappedClass> mappingsFromSRG(File file,Map<String,ClassNode> nodes){  Map<String,MappedClass> base=mappingsFromNodes(nodes);  MappingLoader loader=new SRGLoader(nodes);  try {    Map<String,MappedClass> newMappings=loader.read(new FileReader(file));    for (    MappedClass mappedClass : newMappings.values()) {      newMappings=linkMappings(mappedClass,newMappings);    }    base=fixFromMappingsText(base,newMappings);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  return base;}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  public GalleryHelper(Activity activity){  this.activity=activity;}  }
class C{  public static File createTemporaryDirectory(String prefix) throws IOException {  File tmpDir=File.createTempFile(prefix,null);  if (!tmpDir.delete()) {    throw new IOException("Unable to delete temporary file: " + tmpDir);  }  if (!tmpDir.mkdir()) {    throw new IOException("Unable to create temporary directory: " + tmpDir);  }  return tmpDir;}  }
class C{  public String readStringUtf8(final int length){  if (remaining() < length) {    throw new IndexOutOfBoundsException();  }  final int newPos=pos + length;  final String str=sequence.subSequence(pos,pos + length).toString();  pos=newPos;  return str;}  }
class C{  private void initSkinLoader(){  SkinManager.getInstance().init(mContext);  SkinManager.getInstance().load();}  }
class C{  static String byteArrayToBase64(byte[] a){  return byteArrayToBase64(a,false);}  }
class C{  public OAuth2ErrorException(final OAuth2Error error){  super(error.toString());  this.error=error;}  }
class C{  public static List<Entry> entriesFromLdifString(String ldif) throws Exception {  LDIFImportConfig ldifImportConfig=new LDIFImportConfig(new StringReader(ldif));  ldifImportConfig.setValidateSchema(false);  try (LDIFReader reader=new LDIFReader(ldifImportConfig)){    List<Entry> entries=new ArrayList<>();    Entry entry;    while ((entry=reader.readEntry()) != null) {      entries.add(entry);    }    return entries;  } }  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  private void findFreePorts() throws IOException {  int[] ports=TestCaseUtils.findFreePorts(3);  int i=0;  rs1Port=ports[i++];  rs2Port=ports[i++];  rs3Port=ports[i++];}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.DescriptionType createDescriptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.DescriptionTypeImpl();}  }
class C{  public void shutdown(){synchronized (msgQueue) {    msgQueue.clear();    msgQueue.notify();    msgQueue.notifyAll();  }  DirectoryServer.deregisterMonitorProvider(this);}  }
class C{  protected EnumSyntax(int value){  this.value=value;}  }
class C{  protected void entering(String methodName,Object[] params){  if (params != null) {    logger.entering(className,methodName,params);  } else {    logger.entering(className,methodName);  }}  }
class C{  ShapePolygonDivisionPoint(ArrayList<PlaPointInt> corners,int p_concave_corner_no){  PlaPointFloat concave_corner=corners.get(p_concave_corner_no).to_float();  PlaPointFloat before_concave_corner;  if (p_concave_corner_no != 0)   before_concave_corner=corners.get(p_concave_corner_no - 1).to_float(); else   before_concave_corner=corners.get(corners.size() - 1).to_float();  PlaPointFloat after_concave_corner;  if (p_concave_corner_no == corners.size() - 1)   after_concave_corner=corners.get(0).to_float(); else   after_concave_corner=corners.get(p_concave_corner_no + 1).to_float();  boolean search_right=before_concave_corner.v_y > concave_corner.v_y || concave_corner.v_y > after_concave_corner.v_y;  boolean search_left=before_concave_corner.v_y < concave_corner.v_y || concave_corner.v_y < after_concave_corner.v_y;  boolean search_up=before_concave_corner.v_x < concave_corner.v_x || concave_corner.v_x < after_concave_corner.v_x;  boolean search_down=before_concave_corner.v_x > concave_corner.v_x || concave_corner.v_x > after_concave_corner.v_x;  double min_projection_dist=Integer.MAX_VALUE;  PlaPointFloat min_projection=null;  int corner_no_after_min_projection=0;  int corner_no_after_curr_projection=(p_concave_corner_no + 2) % corners.size();  PlaPointInt corner_before_curr_projection;  if (corner_no_after_curr_projection != 0)   corner_before_curr_projection=corners.get(corner_no_after_curr_projection - 1); else   corner_before_curr_projection=corners.get(corners.size() - 1);  PlaPointFloat corner_before_projection_approx=corner_before_curr_projection.to_float();  double curr_dist;  int loop_end=corners.size() - 2;  for (int i=0; i < loop_end; ++i) {    PlaPointInt corner_after_curr_projection=corners.get(corner_no_after_curr_projection);    PlaPointFloat corner_after_projection_approx=corner_after_curr_projection.to_float();    if (corner_before_projection_approx.v_y != corner_after_projection_approx.v_y) {      double min_y;      double max_y;      if (corner_after_projection_approx.v_y > corner_before_projection_approx.v_y) {        min_y=corner_before_projection_approx.v_y;        max_y=corner_after_projection_approx.v_y;      } else {        min_y=corner_after_projection_approx.v_y;        max_y=corner_before_projection_approx.v_y;      }      if (concave_corner.v_y >= min_y && concave_corner.v_y <= max_y) {        PlaLineInt curr_line=new PlaLineInt(corner_before_curr_projection,corner_after_curr_projection);        double x_intersect=curr_line.function_in_y_value_approx(concave_corner.v_y);        curr_dist=Math.abs(x_intersect - concave_corner.v_x);        boolean projection_ok=curr_dist < min_projection_dist && (search_right && x_intersect > concave_corner.v_x && concave_corner.v_y <= corner_after_projection_approx.v_y || search_left && x_intersect < concave_corner.v_x && concave_corner.v_y >= corner_after_projection_approx.v_y);        if (projection_ok) {          min_projection_dist=curr_dist;          corner_no_after_min_projection=corner_no_after_curr_projection;          min_projection=new PlaPointFloat(x_intersect,concave_corner.v_y);        }      }    }    if (corner_before_projection_approx.v_x != corner_after_projection_approx.v_x) {      double min_x;      double max_x;      if (corner_after_projection_approx.v_x > corner_before_projection_approx.v_x) {        min_x=corner_before_projection_approx.v_x;        max_x=corner_after_projection_approx.v_x;      } else {        min_x=corner_after_projection_approx.v_x;        max_x=corner_before_projection_approx.v_x;      }      if (concave_corner.v_x >= min_x && concave_corner.v_x <= max_x) {        PlaLineInt curr_line=new PlaLineInt(corner_before_curr_projection,corner_after_curr_projection);        double y_intersect=curr_line.function_value_approx(concave_corner.v_x);        curr_dist=Math.abs(y_intersect - concave_corner.v_y);        boolean projection_ok=curr_dist < min_projection_dist && (search_up && y_intersect > concave_corner.v_y && concave_corner.v_x >= corner_after_projection_approx.v_x || search_down && y_intersect < concave_corner.v_y && concave_corner.v_x <= corner_after_projection_approx.v_x);        if (projection_ok) {          min_projection_dist=curr_dist;          corner_no_after_min_projection=corner_no_after_curr_projection;          min_projection=new PlaPointFloat(concave_corner.v_x,y_intersect);        }      }    }    corner_before_curr_projection=corner_after_curr_projection;    corner_before_projection_approx=corner_after_projection_approx;    if (corner_no_after_curr_projection == corners.size() - 1) {      corner_no_after_curr_projection=0;    } else {      ++corner_no_after_curr_projection;    }  }  if (min_projection_dist == Integer.MAX_VALUE) {    System.out.println("PolygonShape.DivisionPoint: projection not found");  }  projection=min_projection;  corner_no_after_projection=corner_no_after_min_projection;}  }
class C{  public boolean doAuthenticatePlainTextPassword(Request request,String pass){  ProxyAuthorizationHeader authHeader=(ProxyAuthorizationHeader)request.getHeader(ProxyAuthorizationHeader.NAME);  if (authHeader == null)   return false;  String realm=authHeader.getRealm();  String username=authHeader.getUsername();  if (username == null || realm == null) {    return false;  }  String nonce=authHeader.getNonce();  URI uri=authHeader.getURI();  if (uri == null) {    return false;  }  String A1=username + ":" + realm+ ":"+ pass;  String A2=request.getMethod().toUpperCase() + ":" + uri.toString();  byte mdbytes[]=messageDigest.digest(A1.getBytes());  String HA1=toHexString(mdbytes);  mdbytes=messageDigest.digest(A2.getBytes());  String HA2=toHexString(mdbytes);  String cnonce=authHeader.getCNonce();  String KD=HA1 + ":" + nonce;  if (cnonce != null) {    KD+=":" + cnonce;  }  KD+=":" + HA2;  mdbytes=messageDigest.digest(KD.getBytes());  String mdString=toHexString(mdbytes);  String response=authHeader.getResponse();  return mdString.equals(response);}  }
class C{  public PdfCollectionItem addItem(String key,String value){  PdfCollectionField field=schema.getField(key);  getPdfObject().put(new PdfName(key),field.getValue(value));  return this;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  EntitiesModel model=(EntitiesModel)getModel();  try {    Map values=getValues();    String universalId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);    String serviceName=(String)getPageSessionAttribute(SERVICE_NAME);    model.assignService(universalId,serviceName,values);    forwardToServicesViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  @Inject public LoginAuthenticator(CoreServicesWrapper coreServicesWrapper){  this.coreServicesWrapper=coreServicesWrapper;}  }
class C{  public void close(){  flush();  writeln("</java>");  try {    out.close();  } catch (  IOException e) {    getExceptionListener().exceptionThrown(e);  }}  }
class C{  private void newClient() throws Exception {  debugInfo("Starting newClient");  ReplicationBroker broker=null;  try {    broker=openReplicationSession(TEST_ROOT_DN,3,100,replicationServerPort,1000);    ReplicationMsg receivedMsg=broker.receive();    broker.updateWindowAfterReplay();    assertDeleteMsgCSNEquals(receivedMsg,firstCSNServer1,"first");    debugInfo("Ending newClient");  }  finally {    stop(broker);  }}  }
class C{  public ParameterBlock add(double d){  return add(new Double(d));}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSLogoutNotification.toURLEncodedQueryString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSLogoutNotification.toURLEncodedQueryString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(majorVersion).append(IFSConstants.AMPERSAND).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(minorVersion).append(IFSConstants.AMPERSAND);  if (issueInstant != null) {    urlEncodedAuthnReq.append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      notOnOrAfter=new Date(issueInstant.getTime() + IFSConstants.ASSERTION_TIMEOUT_ALLOWED_DIFFERENCE);      urlEncodedAuthnReq.append(IFSConstants.NOT_ON_OR_AFTER).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(notOnOrAfter))).append(IFSConstants.AMPERSAND);    }  } else {    FSUtils.debug.error("FSLogoutNotification." + "toURLEncodedQueryString: issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  if (providerId != null && providerId.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.PROVIDER_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  }  if (sessionIndex != null && sessionIndex.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.SESSION_INDEX).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(sessionIndex)).append(IFSConstants.AMPERSAND);  }  if (relayState != null && relayState.length() != 0) {    urlEncodedAuthnReq.append(IFSConstants.RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  }  if (nameIdentifier != null) {    if (nameIdentifier.getName() != null && nameIdentifier.getName().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getName())).append(IFSConstants.AMPERSAND).append(IFSConstants.NAME_IDENTIFIER).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getName())).append(IFSConstants.AMPERSAND);    }    if (nameIdentifier.getNameQualifier() != null && nameIdentifier.getNameQualifier().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME_QUALIFIER).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getNameQualifier())).append(IFSConstants.AMPERSAND);    }    if (nameIdentifier.getFormat() != null && nameIdentifier.getFormat().length() != 0) {      urlEncodedAuthnReq.append(IFSConstants.NAME_FORMAT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(nameIdentifier.getFormat())).append(IFSConstants.AMPERSAND);    }  }  return urlEncodedAuthnReq.toString();}  }
class C{  public Decision createDecision(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.DECISION,xml);  if (object == null) {    return new DecisionImpl(xml);  } else {    return (Decision)object;  }}  }
class C{  public static String convertFromDouble(double value){  return String.valueOf(value);}  }
class C{  public static String filter(String message){  if (message == null) {    return null;  }  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return result.toString();}  }
class C{  public boolean hasEventID(){  return fieldSetFlags()[1];}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String instanceName=getStringOptionValue(AuthOptions.AUTH_INSTANCE_NAME);  String[] params={realm,instanceName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_AUTH_INSTANCE",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,realm);    AMAuthenticationInstance ai=mgr.getAuthenticationInstance(instanceName);    if (ai != null) {      IOutput outputWriter=getOutputWriter();      Map attributeValues=ai.getAttributeValues();      if ((attributeValues != null) && !attributeValues.isEmpty()) {        AMAuthenticationSchema schema=mgr.getAuthenticationSchema(ai.getType());        String serviceName=schema.getServiceName();        outputWriter.printlnMessage(getResourceString("authentication-get-auth-instance-succeeded"));        outputWriter.printlnMessage(FormatUtils.printAttributeValues(getResourceString("authentication-get-auth-instance-result"),attributeValues,CLIUtil.getPasswordFields(serviceName)));      } else {        outputWriter.printlnMessage(getResourceString("authentication-get-auth-instance-no-values"));      }      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_GET_AUTH_INSTANCE",params);    } else {      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_INSTANCE",params);      throw new CLIException(getResourceString("authentication-get-auth-instance-not-found"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  SSOException e) {    debugError("GetAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("GetAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  AMConfigurationException e) {    debugError("GetAuthInstance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_INSTANCE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public TreePath pathByAddingChild(Object child){  if (child == null)   throw new NullPointerException("Null child not allowed");  return new TreePath(this,child);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EmploymentIdentityElement createEmploymentIdentityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EmploymentIdentityElementImpl();}  }
class C{  ApiDescription collectionApi(boolean isReadOnly){  org.forgerock.api.models.Resource.Builder resource=org.forgerock.api.models.Resource.resource().title(id).description(toLS(description)).resourceSchema(schemaRef("#/definitions/" + id)).mvccSupported(isMvccSupported());  resource.items(buildItems(isReadOnly));  resource.create(createOperation(CreateMode.ID_FROM_SERVER));  resource.query(Query.query().stability(EVOLVING).type(QueryType.FILTER).queryableFields(ALL_FIELDS).pagingModes(COOKIE,OFFSET).countPolicies(NONE).error(errorRef(ERROR_BAD_REQUEST)).error(errorRef(ERROR_UNAUTHORIZED)).error(errorRef(ERROR_FORBIDDEN)).error(errorRef(ERROR_REQUEST_TIMEOUT)).error(errorRef(ERROR_ADMIN_LIMIT_EXCEEDED)).error(errorRef(ERROR_INTERNAL_SERVER_ERROR)).error(errorRef(ERROR_UNAVAILABLE)).build());  return ApiDescription.apiDescription().id("unused").version("unused").definitions(definitions()).services(services(resource)).paths(paths()).errors(errors()).build();}  }
class C{  public DisconnectClientControl(boolean isCritical,String section){  super(OID_DISCONNECT_REQUEST,isCritical);  this.section=section;}  }
