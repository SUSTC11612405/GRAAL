class C{  public AccountSaveProfileInfoQuery screenName(String value){  return unsafeParam("screen_name",value);}  }
class C{  public TwoColumnOutput(@Nonnull Writer out,int leftWidth,int rightWidth,@Nonnull String spacer){  if (leftWidth < 1) {    throw new IllegalArgumentException("leftWidth < 1");  }  if (rightWidth < 1) {    throw new IllegalArgumentException("rightWidth < 1");  }  this.out=out;  this.leftWidth=leftWidth;  this.rightWidth=rightWidth;  this.spacer=spacer;}  }
class C{  public void refreshSelectLast(){  final int TIME_DELAY_REFRESH_SELECT_LAST=100;  handler.removeMessages(HANDLER_MESSAGE_REFRESH_LIST);  handler.removeMessages(HANDLER_MESSAGE_SELECT_LAST);  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_REFRESH_LIST,TIME_DELAY_REFRESH_SELECT_LAST);  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_SELECT_LAST,TIME_DELAY_REFRESH_SELECT_LAST);}  }
class C{  public void openThriftReader(String filePath) throws IOException {  thriftReader=new ThriftReader(filePath);  thriftReader.open();}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  private char peek(int n){  return getLITERAL().charAt(idx + n);}  }
class C{  private MetricDictionary(ScopeMap<String,String,LogicalMetric,MetricDictionary> parentScope){  super(parentScope);}  }
class C{  private List<SysMenu> buildSystemMenus(String userId){  List<SysMenu> menuList=new ArrayList<SysMenu>();  List<Module> modules=moduleDao.getModulesByUserId(userId);  if (modules != null && !modules.isEmpty()) {    for (    Module module : modules) {      if (module.getParent() == null)       menuList.add(buildMenuFromModule(module));    }    for (    SysMenu firstMenu : menuList) {      buildSubMenu(firstMenu,modules);      if (firstMenu.getSubMenus() != null) {        for (        SysMenu secondMenu : firstMenu.getSubMenus())         buildSubMenu(secondMenu,modules);      }    }  }  return menuList;}  }
class C{  public InvalidPluginException(){}  }
class C{  public static String stringFilterStrict(String searchText){  return searchText.replaceAll("[^ a-zA-Z0-9\\u4e00-\\u9fa5]","");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300100,value0);}  }
class C{  public boolean needParticipantsJoin() throws RemoteException {  return true;}  }
class C{  public boolean hasImage(){  return mImage != null;}  }
class C{  private void runScript(Connection conn,Reader reader) throws IOException, SQLException {  StringBuffer command=null;  try {    LineNumberReader lineReader=new LineNumberReader(reader);    String line;    while ((line=lineReader.readLine()) != null) {      if (command == null) {        command=new StringBuffer();      }      String trimmedLine=line.trim();      final Matcher delimMatch=delimP.matcher(trimmedLine);      if (trimmedLine.length() < 1 || trimmedLine.startsWith("//")) {      } else       if (delimMatch.matches()) {        setDelimiter(delimMatch.group(2),false);      } else       if (trimmedLine.startsWith("--")) {        println(trimmedLine);      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("--")) {      } else       if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {        command.append(line.substring(0,line.lastIndexOf(getDelimiter())));        command.append(" ");        this.execCommand(conn,command,lineReader);        command=null;      } else {        command.append(line);        command.append("\n");      }    }    if (command != null) {      this.execCommand(conn,command,lineReader);    }    if (!autoCommit) {      conn.commit();    }  } catch (  Exception e) {    throw new IOException(String.format("Error executing '%s': %s",command,e.getMessage()),e);  } finally {    conn.rollback();    flush();  }}  }
class C{  public synchronized DHCPMessage internalize(byte[] ibuff){  ByteArrayInputStream inBStream=new ByteArrayInputStream(ibuff,0,ibuff.length);  DataInputStream inStream=new DataInputStream(inBStream);  try {    this.op=inStream.readByte();    this.htype=inStream.readByte();    this.hlen=inStream.readByte();    this.hops=inStream.readByte();    this.xid=inStream.readInt();    this.secs=inStream.readShort();    this.flags=inStream.readShort();    inStream.readFully(this.ciaddr,0,4);    inStream.readFully(this.yiaddr,0,4);    inStream.readFully(this.siaddr,0,4);    inStream.readFully(this.giaddr,0,4);    inStream.readFully(this.chaddr,0,16);    inStream.readFully(this.sname,0,64);    inStream.readFully(this.file,0,128);    byte[] options=new byte[312];    inStream.readFully(options,0,312);    if (this.optionsList == null) {      initialize();    }    this.optionsList.internalize(options);  } catch (  IOException e) {    System.err.println(e);  }  return this;}  }
class C{  private void selectComponentAt(@SwingCoordinate int x,@SwingCoordinate int y,boolean allowToggle,boolean ignoreIfAlreadySelected){  ScreenView screenView=mySurface.getScreenView(x,y);  if (screenView == null) {    return;  }  SelectionModel selectionModel=screenView.getSelectionModel();  NlComponent component=Coordinates.findComponent(screenView,x,y);  if (component == null) {    int mx=Coordinates.getAndroidX(screenView,x);    int my=Coordinates.getAndroidY(screenView,y);    int max=Coordinates.getAndroidDimension(screenView,PIXEL_RADIUS + PIXEL_MARGIN);    SelectionHandle handle=selectionModel.findHandle(mx,my,max);    if (handle != null) {      component=handle.component;    }  }  if (ignoreIfAlreadySelected && component != null && selectionModel.isSelected(component)) {    return;  }  if (component == null) {    selectionModel.clear();  } else   if (allowToggle) {    selectionModel.toggle(component);  } else {    selectionModel.setSelection(Collections.singletonList(component));  }}  }
class C{  protected void onReleaseResources(T apps){}  }
class C{  protected void internalTransform(Body body,String phaseName,Map<String,String> options){  gOptions=options;  Instance instance=new Instance();  instance.mBody=body;  instance.mUnits=body.getUnits();  debug=PhaseOptions.getBoolean(gOptions,"debug");  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Performing LoadStore optimizations...");  if (debug) {    G.v().out.println("\n\nOptimizing Method: " + body.getMethod().getName());  }  instance.go();}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public Quaternion(final double[] v){  this(0,v);}  }
class C{  public void search(UnivariateFunction func,GoalType goal,double xA,double xB){  final FunctionEvaluator eval=new FunctionEvaluator(func);  final boolean isMinim=goal == GoalType.MINIMIZE;  double fA=eval.value(xA);  double fB=eval.value(xB);  if (isMinim ? fA < fB : fA > fB) {    double tmp=xA;    xA=xB;    xB=tmp;    tmp=fA;    fA=fB;    fB=tmp;  }  double xC=xB + GOLD * (xB - xA);  double fC=eval.value(xC);  while (isMinim ? fC < fB : fC > fB) {    double tmp1=(xB - xA) * (fB - fC);    double tmp2=(xB - xC) * (fB - fA);    double val=tmp2 - tmp1;    double denom=FastMath.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;    double w=xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;    double wLim=xB + growLimit * (xC - xB);    double fW;    if ((w - xC) * (xB - w) > 0) {      fW=eval.value(w);      if (isMinim ? fW < fC : fW > fC) {        xA=xB;        xB=w;        fA=fB;        fB=fW;        break;      } else       if (isMinim ? fW > fB : fW < fB) {        xC=w;        fC=fW;        break;      }      w=xC + GOLD * (xC - xB);      fW=eval.value(w);    } else     if ((w - wLim) * (wLim - xC) >= 0) {      w=wLim;      fW=eval.value(w);    } else     if ((w - wLim) * (xC - w) > 0) {      fW=eval.value(w);      if (isMinim ? fW < fC : fW > fC) {        xB=xC;        xC=w;        w=xC + GOLD * (xC - xB);        fB=fC;        fC=fW;        fW=eval.value(w);      }    } else {      w=xC + GOLD * (xC - xB);      fW=eval.value(w);    }    xA=xB;    fA=fB;    xB=xC;    fB=fC;    xC=w;    fC=fW;  }  lo=xA;  fLo=fA;  mid=xB;  fMid=fB;  hi=xC;  fHi=fC;  if (lo > hi) {    double tmp=lo;    lo=hi;    hi=tmp;    tmp=fLo;    fLo=fHi;    fHi=tmp;  }}  }
class C{  private void updateStatus(){  conflicts=null;  if (resource == null && remoteResource == null) {    statusLabel.setText("");    return;  }  if (resource != null) {    try {      LocalResourceStatus status=resource.getStatus();      if (!resource.isManaged()) {        statusLabel.setText(Policy.bind("SvnPropertiesView.resourceNotManaged"));      } else       if (status.getPropStatus().equals(SVNStatusKind.MODIFIED)) {        statusLabel.setText(Policy.bind("SvnPropertiesView.somePropertiesModified"));      } else       if (status.getPropStatus().equals(SVNStatusKind.NORMAL)) {        statusLabel.setText(Policy.bind("SvnPropertiesView.noPropertiesModified"));      } else       if (status.getPropStatus().equals(SVNStatusKind.CONFLICTED)) {        statusLabel.setText(Policy.bind("SvnPropertiesView.conflictOnProperties"));        try {          conflicts=PropertyConflict.getPropertyConflicts(resource);        } catch (        Exception e) {        }      } else {        statusLabel.setText("");      }    } catch (    SVNException e) {      statusLabel.setText(Policy.bind("SvnPropertiesView.errorGettingStatus"));    }  }}  }
class C{  private static void checkAllFiniteReal(final double[] values){  for (int i=0; i < values.length; i++) {    MathUtils.checkFinite(values[i]);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {}  }
class C{  public BifocalDistortion(){  this(0.1,3);}  }
class C{  private void populateMqttConnectOptions() throws SpyException {  options=new MqttConnectOptions();  if (ProtocolVersionEnum.MQTT_3_1_1.equals(getProtocol())) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);  } else   if (ProtocolVersionEnum.MQTT_3_1.equals(getProtocol())) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1);  } else {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_DEFAULT);  }  if (getServerURI().size() > 1) {    options.setServerURIs(getServerURI().toArray(new String[getServerURI().size()]));  }  options.setCleanSession(isCleanSession());  options.setConnectionTimeout(getConnectionTimeout());  options.setKeepAliveInterval(getKeepAliveInterval());  if (getUserCredentials() != null) {    options.setUserName(getUserCredentials().getUsername());    options.setPassword(ConversionUtils.base64ToString(getUserCredentials().getPassword()).toCharArray());  }  if (getLastWillAndTestament() != null) {    options.setWill(getLastWillAndTestament().getTopic(),Base64.decodeBase64(getLastWillAndTestament().getValue()),getLastWillAndTestament().getQos(),getLastWillAndTestament().isRetained());  }  if (getSSL() == null) {  } else {    if (SecureSocketModeEnum.PROPERTIES.equals(getSSL().getMode())) {      Properties props=new Properties();      for (      final Property prop : getSSL().getProperty()) {        props.put(prop.getName(),prop.getValue());      }      options.setSSLProperties(props);    } else     if (SecureSocketModeEnum.BASIC.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol()));    } else     if (SecureSocketModeEnum.SERVER_ONLY.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getCertificateAuthorityFile()));    } else     if (SecureSocketModeEnum.SERVER_KEYSTORE.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getServerKeyStoreFile(),getSSL().getServerKeyStorePassword()));    } else     if (SecureSocketModeEnum.SERVER_AND_CLIENT.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getCertificateAuthorityFile(),getSSL().getClientCertificateFile(),getSSL().getClientKeyFile(),getSSL().getClientKeyPassword(),Boolean.TRUE.equals(getSSL().isClientKeyPEM())));    } else     if (SecureSocketModeEnum.SERVER_AND_CLIENT_KEYSTORES.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getServerKeyStoreFile(),getSSL().getServerKeyStorePassword(),getSSL().getClientKeyStoreFile(),getSSL().getClientKeyStorePassword(),getSSL().getClientKeyPassword()));    }  }}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  public AemFieldset expand(){  if (isFolded()) {    foldButton.click();  }  bobcatWait.withTimeout(Timeouts.BIG).until(null,Timeouts.MINIMAL);  return this;}  }
class C{  public Exception[] cancelAll(String[] entryUids,String[] classNames,int[] objectTypes){  ArrayList<Exception> exceptionsList=new ArrayList<Exception>(0);  for (int i=0; i < entryUids.length; i++) {    try {      cancel(entryUids[i],classNames[i],objectTypes[i],false,true,false);    } catch (    Exception ex) {      exceptionsList.add(ex);    }  }  return exceptionsList.toArray(new Exception[exceptionsList.size()]);}  }
class C{  public int addRootRow(){  if (getNodeCount() != 0) {    throw new IllegalStateException("Can only add a root node to an empty tree");  }  return (m_root=addNodeRow());}  }
class C{  @Override public void computeAxis(float yMin,float yMax,boolean inverted){  if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {    MPPointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    MPPointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());    if (!inverted) {      yMin=(float)p1.x;      yMax=(float)p2.x;    } else {      yMin=(float)p2.x;      yMax=(float)p1.x;    }    MPPointD.recycleInstance(p1);    MPPointD.recycleInstance(p2);  }  computeAxisValues(yMin,yMax);}  }
class C{  public DocumentNGramHistogram(int iMinSize,int iMaxSize){  MinSize=iMinSize;  MaxSize=iMaxSize;  DataString="";  NGramHistogram=new HashMap();}  }
class C{  @Override public final void writeChars(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    writeChar(s.charAt(i));  }}  }
class C{  protected final boolean handleAllocNode(AllocNode src){  boolean ret=false;  Node[] targets=pag.allocLookup(src);  for (  Node element : targets) {    if (element.makeP2Set().add(src)) {      addToWorklist((VarNode)element);      ret=true;    }  }  return ret;}  }
class C{  public Stat stat(final Txn<T> txn){  if (SHOULD_CHECK) {    requireNonNull(txn);    txn.checkReady();  }  final MDB_stat stat=new MDB_stat(RUNTIME);  checkRc(LIB.mdb_stat(txn.pointer(),ptr,stat));  return new Stat(stat.f0_ms_psize.intValue(),stat.f1_ms_depth.intValue(),stat.f2_ms_branch_pages.longValue(),stat.f3_ms_leaf_pages.longValue(),stat.f4_ms_overflow_pages.longValue(),stat.f5_ms_entries.longValue());}  }
class C{  public Shape triangle_down(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y);  m_path.lineTo(x + height,y);  m_path.lineTo(x + height / 2,(y + height));  m_path.closePath();  return m_path;}  }
class C{  static String toS(float[] a){  String s="[";  if (a == null) {    return "[null]";  }  for (int i=0; i < a.length; i++) {    if (i != 0) {      s+=" , ";    }    String t=df.format(a[i]) + "       ";    s+=t.substring(0,7);  }  s+="]";  return s;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200738,skillcaster,skillname);}  }
class C{  private void sortNode(int currentFeatureIdx,MaryNode currentNode){  if (currentFeatureIdx == featureSequence.length) {    Arrays.sort(featureVectors,currentNode.from,currentNode.to,cui);    numberOfLeaves++;    return;  }  int currentFeature=featureSequence[currentFeatureIdx];  FeatureVector.FeatureType featureType=featureVectors[0].getFeatureType(currentFeature);  currentNode.setFeatureIndex(currentFeature);  c.setFeatureIdx(currentFeature,featureType);  Arrays.sort(featureVectors,currentNode.from,currentNode.to,c);  int nVal=featureDefinition.getNumberOfValues(currentFeature);  currentNode.split(nVal);  int nextFrom=currentNode.from;  int nextTo=currentNode.from;  for (int i=0; i < nVal; i++) {    nextFrom=nextTo;    while ((nextTo < currentNode.to) && (featureVectors[nextTo].getFeatureAsInt(currentFeature) == i)) {      nextTo++;    }    if ((nextTo - nextFrom) != 0) {      MaryNode nod=new MaryNode(nextFrom,nextTo);      currentNode.setChild(i,nod);      sortNode(currentFeatureIdx + 1,nod);    } else     currentNode.setChild(i,null);  }}  }
class C{  public void addGraphModelListener(GraphListener listnr){  if (!m_listeners.contains(listnr))   m_listeners.add(listnr);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  final InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  final TreePath[] paths=inspectorWindow.getDataTree().getSelectionPaths();  if (paths != null) {    inspectorWindow.expand(paths);  } else {    for (    NodeBase root : inspectorWindow.getClassification2RootNode().values()) {      inspectorWindow.expand(root);    }  }}  }
class C{  public static void i(String msg){  if (LOG_ENABLE) {    Log.i(TAG,buildMsg(msg));  }}  }
class C{  public GeoServerInput(ToolSelectionInterface toolMgr){  logger.debug("Adding GeoServerInput extension");  this.toolMgr=toolMgr;  if (toolMgr != null) {    geoServerConnectionTool=new GeoServerConnectionTool(this);    ToolManager.getInstance().registerTool(GeoServerNode.class,geoServerConnectionTool);    GeoServerConnectionListTool connectionListTool=new GeoServerConnectionListTool(this);    ToolManager.getInstance().registerTool(GeoServerOverallNode.class,connectionListTool);    ToolManager.getInstance().registerTool(GeoServerNode.class,connectionListTool);    ToolManager.getInstance().registerTool(GeoServerStyleNode.class,new SaveSLDTool());    ToolManager.getInstance().registerTool(GeoServerStyleNode.class,new LegendTool());    ToolManager.getInstance().registerTool(GeoServerStyleHeadingNode.class,new ScaleTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(GeoServerWorkspaceNode.class,new ScaleTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(GeoServerStyleNode.class,new ScaleTool(toolMgr.getApplication()));    ToolManager.getInstance().registerTool(GeoServerLayerNode.class,new GeoServerLayerUpdateTool(this));    ToolManager.getInstance().registerTool(GeoServerOverallNode.class,new GeoServerLayerUpdateTool(this));    ToolManager.getInstance().registerTool(GeoServerWorkspaceNode.class,new GeoServerLayerUpdateTool(this));    ToolManager.getInstance().registerTool(GeoServerLayerHeadingNode.class,new GeoServerLayerUpdateTool(this));  }  readPropertyFile();}  }
class C{  public PegasusSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy,Method.PEGASUS);}  }
class C{  private AudioOption createOption4(ChannelType... channels){  AudioOption option=new AudioOption();  Stream.of(createTrack(new Channel(FL.name(),channels[0])),createTrack(new Channel(FR.name(),channels[1])),createTrack(new Channel(FC.name(),channels[2])),createTrack(new Channel(LFE.name(),channels[3])),createTrack(new Channel(SL.name(),channels[4])),createTrack(new Channel(SR.name(),channels[5]))).forEach(null);  option.add(createTrack(new Channel(FL.name(),channels[6]),new Channel(FR.name(),channels[7])));  return option;}  }
class C{  public static void deleteCachedLocations(){  FileHelper.deleteFile(LOCATION_FILE);  SAVED_LOCATIONS.clear();  System.out.println("Deleted cached locations.");}  }
class C{  public boolean all_reachable(){  return soot.PhaseOptions.getBoolean(options,"all-reachable");}  }
class C{  public void actionPerformed(ActionEvent ev){  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),"Choose label fill color",null);  if (color != null)   execute("set labelFillColor=" + color.getRed() + " "+ color.getGreen()+ " "+ color.getBlue()+ ";");}  }
class C{  public static double[] readDoubles(String filename){  return new In(filename).readAllDoubles();}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  private LinkedHashSet<MetricColumn> generateApiMetricColumns(Set<String> apiMetricColumnNames){  Map<String,MetricColumn> metricColumnMap=resultSet.getSchema().getColumns(MetricColumn.class).stream().collect(StreamUtils.toLinkedDictionary(null));  return apiMetricColumnNames.stream().map(null).collect(Collectors.toCollection(null));}  }
class C{  public PanControl(int mouseButton,boolean panOverItem){  m_button=mouseButton;  m_panOverItem=panOverItem;}  }
class C{  public boolean hasCondition(){  return getConditionOpt().getNumChild() != 0;}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager,TrustedCertificateStore certStore){  this(keyStore,manager,certStore,null);}  }
class C{  public SimpleModule build(ResourceRegistry resourceRegistry,boolean isClient){  SimpleModule simpleModule=new SimpleModule(JSON_API_MODULE_NAME,new Version(1,0,0,null,null,null));  simpleModule.addSerializer(new ContainerSerializer(resourceRegistry,isClient)).addSerializer(new DataLinksContainerSerializer(resourceRegistry)).addSerializer(new RelationshipContainerSerializer(resourceRegistry,isClient)).addSerializer(new LinkageContainerSerializer()).addSerializer(new BaseResponseSerializer(resourceRegistry)).addSerializer(new ErrorResponseSerializer());  return simpleModule;}  }
class C{  public MessageInfoBar(CharSequence title){  this(null,0,title);}  }
class C{  public static char[] encodeHex(byte[] data){  return encodeHex(data,true);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private static void addToParentGroup(final ModifiableConnection connectionDetails,final ConfiguredConnectionGroupDetails parent){  connectionDetails.setGroup(new ConnectionGroupReference(parent));  parent.getConnections().add(new ConnectionReference(connectionDetails));}  }
class C{  public static void resetCount(){  count=1;}  }
class C{  public IfExpression(Predicate test,Expression thenExpr,Expression elseExpr){  m_test=test;  m_then=thenExpr;  m_else=elseExpr;}  }
class C{  public static boolean hasDependency(Expression expr){  ColumnCollector cc=new ColumnCollector(false);  expr.visit(cc);  return cc.getColumnCount() > 0;}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CHANGE_LOOT_PROCESSING_HIS_REQUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300208,value0);}  }
class C{  public NewsfeedGetListsQuery listIds(Integer... value){  return unsafeParam("list_ids",value);}  }
class C{  public void resultPhoto(int requestCode,int resultCode,Intent data){  if (resultCode == Activity.RESULT_OK) {    if (requestCode == SELECT_PHOTO) {      this.myPhoto=onSelectFromGalleryResult(data);    } else     if (requestCode == TAKE_PHOTO) {      this.myPhoto=onTakePhotoResult();    }    if (this.myPhoto != null) {      if (ifCameraLandScape(true) == LANDSCAPE_CAMERA) {        this.myPhoto=rotateImage(getMyPhoto(),270);      }    }  }}  }
class C{  private static boolean wasSuccessful(Future<AndroidDebugBridge> future){  if (!future.isDone()) {    return false;  }  try {    AndroidDebugBridge bridge=future.get();    return bridge != null && bridge.isConnected();  } catch (  Exception e) {    return false;  }}  }
class C{  private ChannelType createXmlChannel(Pair<SequenceUUID,Integer> pair){  ChannelType channel=new ChannelType();  channel.setCPLVirtualTrackId(pair.getLeft().getUuid());  channel.setCPLVirtualTrackChannel(pair.getRight());  return channel;}  }
class C{  public static Map<String,Object> releaseOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String orderId="";  GenericValue paymentPref=null;  try {    if (orderPaymentPreferenceId != null) {      paymentPref=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();      orderId=paymentPref.getString("orderId");    } else {      orderId=(String)context.get("orderId");    }  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  List<GenericValue> paymentPrefs=null;  try {    List<EntityExpr> othExpr=UtilMisc.toList(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"EFT_ACCOUNT"));    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"GIFT_CARD"));    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"FIN_ACCOUNT"));    EntityCondition con1=EntityCondition.makeCondition(othExpr,EntityJoinOperator.OR);    EntityCondition statExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_SETTLED");    EntityCondition con2=EntityCondition.makeCondition(UtilMisc.toList(con1,statExpr),EntityOperator.AND);    EntityCondition authExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_AUTHORIZED");    EntityCondition con3=EntityCondition.makeCondition(UtilMisc.toList(con2,authExpr),EntityOperator.OR);    EntityExpr orderExpr=EntityCondition.makeCondition("orderId",EntityOperator.EQUALS,orderId);    EntityCondition con4=EntityCondition.makeCondition(UtilMisc.toList(con3,orderExpr),EntityOperator.AND);    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(con4).queryList();  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");    return result;  }  if (paymentPrefs.size() == 0) {    Debug.logWarning("No OrderPaymentPreference records available for release",module);    result.put("processResult","COMPLETE");    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  List<GenericValue> finished=FastList.newInstance();  for (  GenericValue pPref : paymentPrefs) {    Map<String,Object> releaseContext=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",pPref.getString("orderPaymentPreferenceId"));    Map<String,Object> releaseResult=null;    try {      releaseResult=dispatcher.runSync("releaseOrderPaymentPreference",releaseContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem calling releaseOrderPaymentPreference service for orderPaymentPreferenceId" + paymentPref.getString("orderPaymentPreferenceId"),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("orderPaymentPreferenceId"));    }    if (ServiceUtil.isError(releaseResult)) {      Debug.logError(ServiceUtil.getErrorMessage(releaseResult),module);      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));    } else     if (!ServiceUtil.isFailure(releaseResult)) {      finished.add(paymentPref);    }  }  result=ServiceUtil.returnSuccess();  if (finished.size() == paymentPrefs.size()) {    result.put("processResult","COMPLETE");  } else {    result.put("processResult","FAILED");  }  return result;}  }
class C{  protected void addLanguageVariables(BundleContext context,Language language){  if (languageVariablesNotAdded) {    languageVariablesNotAdded=false;    try {      URL resourceURL=context.getBundle().getResource("conf/Language-ext.properties");      PropertyResourceBundle resourceBundle=new PropertyResourceBundle(resourceURL.openStream());      Map<String,String> languageVariables=new HashMap<String,String>();      for (      String key : resourceBundle.keySet()) {        languageVariables.put(key,resourceBundle.getString(key));      }      addLanguageVariables(languageVariables,language);    } catch (    IOException e) {      Logger.warn(this,"Exception while registering language variables",e);    }  }}  }
class C{  public DoubleDataSource apply(DoubleDataSource signal){  return new FIROutput(signal);}  }
class C{  public void info(String message,Object... args){  currentTest.get().info(String.format(message,args));}  }
class C{  public static int mulAndCheck(int x,int y) throws MathRuntimeException {  long m=((long)x) * ((long)y);  if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);  }  return (int)m;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public FaveGetPhotosQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public void putValue(String series,String className,Number value){  if (value == null)   value=0;  Map<String,Number> class2value=series2Class2Values.get(series);  if (class2value == null) {    class2value=new HashMap<>();    series2Class2Values.put(series,class2value);  }  class2value.put(className,value);  Pair<Number,Number> range=getRange(series);  if (range == null) {    range=new Pair<>(value,value);    series2Range.put(series,range);  } else {    if (value.doubleValue() < range.get1().doubleValue())     range.set1(value);    if (value.doubleValue() > range.get2().doubleValue())     range.set2(value);  }  Pair<Number,Number> wholeRange=getRange();  if (wholeRange == null) {    this.range=new Pair<>(value,value);  } else {    if (value.doubleValue() < wholeRange.get1().doubleValue())     wholeRange.set1(value);    if (value.doubleValue() > wholeRange.get2().doubleValue())     wholeRange.set2(value);  }  Double previous=series2total.get(series);  series2total.put(series,previous == null ? value.doubleValue() : previous + value.doubleValue());  samplesTooltips.put(series,String.format("%s: %.0f",series,series2total.get(series)));  previous=classes2total.get(className);  classes2total.put(className,previous == null ? value.doubleValue() : previous + value.doubleValue());  classesTooltips.put(className,String.format("%s: %.0f",className,classes2total.get(className)));}  }
class C{  protected AuthSignupQuery clientId(int value){  return unsafeParam("client_id",value);}  }
class C{  public GroupsEditQuery title(String value){  return unsafeParam("title",value);}  }
class C{  protected PhotosGetByIdQueryWithExtended photos(String... value){  return unsafeParam("photos",value);}  }
class C{  private Optional<MetricValue> rewrite_(MetricValue v){  return v.asString().map(null).filter(null).map(null).map(null).map(null);}  }
class C{  @Override public void onRequestError(int code,String message){  progressDialog.cancel();  if (code == ConnectAPI.COUPON_CODE) {    showMessage(message);  }}  }
class C{  public static String updateEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotUpdateCacheSetting",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String maxInMemoryStr=request.getParameter("UTIL_CACHE_MAX_IN_MEMORY");  String expireTimeStr=request.getParameter("UTIL_CACHE_EXPIRE_TIME");  String useSoftReferenceStr=request.getParameter("UTIL_CACHE_USE_SOFT_REFERENCE");  Integer maxInMemory=null;  Long expireTime=null;  try {    maxInMemory=Integer.valueOf(maxInMemoryStr);  } catch (  Exception e) {  }  try {    expireTime=Long.valueOf(expireTimeStr);  } catch (  Exception e) {  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    if (maxInMemory != null)     utilCache.setMaxInMemory(maxInMemory.intValue());    if (expireTime != null)     utilCache.setExpireTime(expireTime.longValue());    if (useSoftReferenceStr != null) {      utilCache.setUseSoftReference("true".equals(useSoftReferenceStr));    }  }  return "success";}  }
class C{  public static void main(String[] args){  RenderingImagesOnBodies simulation=new RenderingImagesOnBodies();  simulation.run();}  }
class C{  public static void putFloat(String key,float value){  prefs.edit().putFloat(key,value).commit();}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException("No scheme found in URI.");  } else {    setScheme(scheme);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABYSS_SKILL_IS_FIRED(Player player,DescriptionId skill){  return new SM_SYSTEM_MESSAGE(1390155,player.getRace().getRaceDescriptionId(),player.getName(),"%SubZone:" + player.getPosition().getMapId() + " "+ player.getPosition().getX()+ " "+ player.getPosition().getY()+ " "+ player.getPosition().getZ(),skill);}  }
class C{  public MultidimensionalCounter(int... size) throws MathIllegalArgumentException {  dimension=size.length;  this.size=size.clone();  uniCounterOffset=new int[dimension];  last=dimension - 1;  int tS=size[last];  for (int i=0; i < last; i++) {    int count=1;    for (int j=i + 1; j < dimension; j++) {      count*=size[j];    }    uniCounterOffset[i]=count;    tS*=size[i];  }  uniCounterOffset[last]=0;  if (tS <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,tS,0);  }  totalSize=tS;}  }
class C{  public void registerConfigAspect(ConfigAspect aspect){  configAspects.add(aspect);}  }
class C{  private void broadcastToLeagueMembers(final Player player){  player.getPlayerAlliance2().getLeague().sendPacket(new SM_MESSAGE(player,message,type));}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (colourButton != null) {      return colourButton.isEnabled();    }  }  return false;}  }
class C{  protected String deStress(String phone){  String retPhone=phone;  if (isStressed(phone)) {    retPhone=phone.substring(0,phone.length() - 1);  }  return retPhone;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  protected int findClosest(Color c){  if (colorTab == null)   return -1;  int r=c.getRed();  int g=c.getGreen();  int b=c.getBlue();  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  public DelimitedTextTableReader(ParserFactory parserFactory){  this("\t",parserFactory);}  }
class C{  public void handleLockedFifoEntriesOnXtnEnd(Context context,XtnEntry xtnEntry,boolean fromRollback) throws SAException {  ISAdapterIterator entriesIter=null;  ILockObject entryLock=null;  long fifoXtnNumber=_cacheManager.getFifoXtnNumber(xtnEntry);  if (!xtnEntry.anyFifoEntriesUnderXtn())   return;  TreeMap<IEntryHolder,FifoBackgroundRequest> orderedXtnEntries=new TreeMap<IEntryHolder,FifoBackgroundRequest>(_comparator);  try {    entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_FIFO_ENTRIES,true);    if (entriesIter != null) {      final XtnData pXtn=xtnEntry.getXtnData();      ENTRY_LOOP:       while (true) {        IEntryCacheInfo entryCacheHolder=(IEntryCacheInfo)entriesIter.next();        if (entryCacheHolder == null)         break ENTRY_LOOP;        IEntryHolder entry=_cacheManager.getEntryFromCacheHolder(entryCacheHolder);        if (entry == null)         break ENTRY_LOOP;        context.setOperationID(pXtn.getOperationID(entry.getUID()));        try {          entryLock=getEntryLockObject(entry);synchronized (entryLock) {            IEntryHolder original=entry;            entry=_cacheManager.getEntry(context,entry,true,true);            if (entry == null || !entry.isSameEntryInstance(original)) {              continue ENTRY_LOOP;            }            if (entry.isExpired(xtnEntry.m_CommitRollbackTimeStamp) && (!entry.isEntryUnderWriteLockXtn() || !_engine.getLeaseManager().isNoReapUnderXtnLeases()))             if (!_engine.isExpiredEntryStayInSpace(entry) && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp)))             continue ENTRY_LOOP;            boolean writeLock=false;            if (entry.getWriteLockOwner() == xtnEntry)             writeLock=true;            if (!fromRollback && writeLock && ((entry.getWriteLockOperation() == SpaceOperations.TAKE || entry.getWriteLockOperation() == SpaceOperations.TAKE_IE)))             continue;            if (fromRollback && writeLock && entry.getWriteLockOperation() == SpaceOperations.WRITE)             continue;          }        }  finally {          if (entryLock != null)           freeEntryLockObject(entryLock);          entryLock=null;        }        _engine.touchLastEntryTimestamp();        if (_cacheManager.getTemplatesManager().anyNonNotifyFifoTemplates()) {          FifoBackgroundRequest red=new FifoBackgroundRequest(context.getOperationID(),false,true,entry,null,false,SpaceOperations.WRITE,null,null);          red.setXtnEnd();          orderedXtnEntries.put(entry,red);        }      }    }    Iterator<Map.Entry<IEntryHolder,FifoBackgroundRequest>> titer=orderedXtnEntries.entrySet().iterator();    while (titer.hasNext()) {      Map.Entry<IEntryHolder,FifoBackgroundRequest> me=titer.next();      IEntryHolder eh=me.getKey();      if (eh.isDeleted())       continue;      FifoBackgroundRequest red=me.getValue();      red.setFifoXtnNumber(fifoXtnNumber);      _fifoBackgroundDispatcher.positionAndActivateRequest(red);    }  }  finally {    if (entriesIter != null)     entriesIter.close();  }}  }
class C{  public boolean checkPacket(int packetHeader){  return checkPacket(new byte[]{(byte)((packetHeader >> 24) & 0xFF),(byte)((packetHeader >> 16) & 0xFF)});}  }
class C{  public static void fitViewToBounds(Display display,Rectangle2D bounds,Point2D center,long duration){  double w=display.getWidth(), h=display.getHeight();  double cx=(center == null ? bounds.getCenterX() : center.getX());  double cy=(center == null ? bounds.getCenterY() : center.getY());  double wb=Math.max(cx - bounds.getMinX(),bounds.getMaxX() - cx);  double hb=Math.max(cy - bounds.getMinY(),bounds.getMaxY() - cy);  double scale=Math.min(w / (2 * wb),h / (2 * hb)) / display.getScale();  if (center == null)   center=new Point2D.Double(cx,cy);  if (duration > 0) {    display.animatePanAndZoomToAbs(center,scale,duration);  } else {    display.panToAbs(center);    display.zoomAbs(center,scale);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'VIDEO_BEAN' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'VIDEO_NAME' TEXT NOT NULL ,"+ "'VIDEO_LINK' TEXT,"+ "'THUMBNAIL_PATH' TEXT,"+ "'TOTALSIZE' TEXT,"+ "'TOTALDURATION' TEXT,"+ "'TYPE' INTEGER);");}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  public void timeToSpeech(int hour,int min){  if (hour < 0 || hour > 23) {    throw new IllegalArgumentException("Bad time format: hour");  }  if (min < 0 || min > 59) {    throw new IllegalArgumentException("Bad time format: min");  }  String theTime=timeToString(hour,min);  textToSpeech(theTime);}  }
class C{  public static boolean isExternalMemoryFull(){  return getAvailableExternalMemorySize() - AVALIABLE_EXTERNAL_MEMORY_SIZE < 0;}  }
class C{  public String resolveSystem(String systemId) throws IOException {  catalogManager.debug.message(3,"resolveSystem(" + systemId + ")");  systemId=normalizeURI(systemId);  if (systemId != null && systemId.startsWith("urn:publicid:")) {    systemId=PublicId.decodeURN(systemId);    return resolvePublic(systemId,null);  }  if (systemId != null) {    String resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  return resolveSubordinateCatalogs(SYSTEM,null,null,systemId);}  }
class C{  public static Bitmap makeRoundUserPicture(Bitmap bitmap){  if (bitmap == null)   return null;  Bitmap output=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final Paint paint=new Paint();  final Rect rect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());  canvas.drawARGB(0,0,0,0);  paint.setAntiAlias(true);  paint.setColor(0xFFFFFFFF);  canvas.drawCircle(bitmap.getWidth() * 0.5f,bitmap.getHeight() * 0.5f,bitmap.getWidth() * 0.5f,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,rect,rect,paint);  return output;}  }
class C{  protected OrderListState(){  viewSize=UtilProperties.getPropertyAsInteger("order.properties","order.paginate.defaultViewSize",10);  viewIndex=0;  orderStatusState=FastMap.newInstance();  orderTypeState=FastMap.newInstance();  orderFilterState=FastMap.newInstance();  orderStatusState.put("viewcreated","Y");  orderStatusState.put("viewprocessing","Y");  orderStatusState.put("viewapproved","Y");  orderStatusState.put("viewhold","N");  orderStatusState.put("viewcompleted","N");  orderStatusState.put("viewsent","N");  orderStatusState.put("viewrejected","N");  orderStatusState.put("viewcancelled","N");  orderTypeState.put("view_SALES_ORDER","Y");}  }
class C{  protected void resetCommon() throws XNIException {  int count=fCommonComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fCommonComponents.get(i);    c.reset(this);  }}  }
class C{  public void update(float ipd,float yawHeadDegrees,float pitchHeadDegrees,float rollHeadDegrees,float worldYawOffsetDegrees,float worldPitchOffsetDegrees,float worldRollOffsetDegrees){}  }
class C{  public void incrementResendCount(){  if (++resendCount >= 3) {    setNodeState(ZWaveNodeState.DEAD);  }  retryCount++;}  }
class C{  @AfterMethod private void runAfterMethod(ITestResult result){  LOGGER.info(pfr.getResultString(result) + " <===============\n\n\n");}  }
class C{  public void testFindResourceFieldsWithInheritance() throws Exception {  myFixture.copyFileToProject("R.java","gen/p1/p2/R.java");  Module libModule=myAdditionalModules.get(0);  deleteManifest(libModule);  myFixture.copyFileToProject("util/lib/AndroidManifest.xml","additionalModules/lib/AndroidManifest.xml");  myFixture.copyFileToProject("util/lib/R.java","additionalModules/lib/gen/p1/p2/lib/R.java");  myFixture.copyFileToProject("util/lib/strings.xml","additionalModules/lib/res/values/strings.xml");  PsiField[] fields=AndroidResourceUtil.findResourceFields(AndroidFacet.getInstance(libModule),"string","lib_hello",false);  Set<String> dirNames=Sets.newHashSet();  for (  PsiField field : fields) {    assertEquals("lib_hello",field.getName());    dirNames.add(field.getContainingFile().getContainingDirectory().getName());  }  assertEquals(ImmutableSet.of("p2","lib"),dirNames);  assertEquals(2,fields.length);}  }
class C{  public void apply(Map<Integer,String> taxId2TaxName,Map<String,Integer> taxName2TaxId){  for (  Edit edit : list) {switch (edit.type) {case Edit.APPEND:      taxId2TaxName.put(edit.taxId,edit.taxName);    taxName2TaxId.put(edit.taxName,edit.taxId);  break;case Edit.RENAME:taxId2TaxName.put(edit.taxId,edit.taxName);taxName2TaxId.put(edit.taxName,edit.taxId);break;case Edit.DELETE:taxId2TaxName.remove(edit.taxId);taxName2TaxId.remove(edit.taxName);break;default :break;}}}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ClassInstanceExpr fullCopy(){  ClassInstanceExpr tree=(ClassInstanceExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  protected DTDDVFactory createDatatypeValidatorFactory(){  return DTDDVFactory.getInstance();}  }
class C{  public void defineRuleExpression(final RuleExpression ruleExpression){  this.ruleExpressionStr=ruleExpression.getExpression();}  }
class C{  public void removeEntry(String entry){  _classpathList.remove(entry);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200784,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  public static double min(final double a,final double b){  if (a > b) {    return b;  }  if (a < b) {    return a;  }  if (a != b) {    return Double.NaN;  }  long bits=Double.doubleToRawLongBits(a);  if (bits == 0x8000000000000000L) {    return a;  }  return b;}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }switch (model.getPhotosType()) {case PhotosObject.PHOTOS_TYPE_NEW:      if (model.isRandomType()) {        requestNewPhotosRandom(c,page,refresh);      } else {        requestNewPhotosOrders(c,page,refresh);      }    break;case PhotosObject.PHOTOS_TYPE_FEATURED:  if (model.isRandomType()) {    requestFeaturePhotosRandom(c,page,refresh);  } else {    requestFeaturePhotosOrders(c,page,refresh);  }break;}}}  }
class C{  public static double atan2(double y,double x){  if (Double.isNaN(x) || Double.isNaN(y)) {    return Double.NaN;  }  if (y == 0) {    final double result=x * y;    final double invx=1d / x;    final double invy=1d / y;    if (invx == 0) {      if (x > 0) {        return y;      } else {        return copySign(Math.PI,y);      }    }    if (x < 0 || invx < 0) {      if (y < 0 || invy < 0) {        return -Math.PI;      } else {        return Math.PI;      }    } else {      return result;    }  }  if (y == Double.POSITIVE_INFINITY) {    if (x == Double.POSITIVE_INFINITY) {      return Math.PI * F_1_4;    }    if (x == Double.NEGATIVE_INFINITY) {      return Math.PI * F_3_4;    }    return Math.PI * F_1_2;  }  if (y == Double.NEGATIVE_INFINITY) {    if (x == Double.POSITIVE_INFINITY) {      return -Math.PI * F_1_4;    }    if (x == Double.NEGATIVE_INFINITY) {      return -Math.PI * F_3_4;    }    return -Math.PI * F_1_2;  }  if (x == Double.POSITIVE_INFINITY) {    if (y > 0 || 1 / y > 0) {      return 0d;    }    if (y < 0 || 1 / y < 0) {      return -0d;    }  }  if (x == Double.NEGATIVE_INFINITY) {    if (y > 0.0 || 1 / y > 0.0) {      return Math.PI;    }    if (y < 0 || 1 / y < 0) {      return -Math.PI;    }  }  if (x == 0) {    if (y > 0 || 1 / y > 0) {      return Math.PI * F_1_2;    }    if (y < 0 || 1 / y < 0) {      return -Math.PI * F_1_2;    }  }  final double r=y / x;  if (Double.isInfinite(r)) {    return atan(r,0,x < 0);  }  double ra=doubleHighPart(r);  double rb=r - ra;  final double xa=doubleHighPart(x);  final double xb=x - xa;  rb+=(y - ra * xa - ra * xb - rb * xa - rb * xb) / x;  final double temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  if (ra == 0) {    ra=copySign(0d,y);  }  final double result=atan(ra,rb,x < 0);  return result;}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace(System.err);    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(++iCnt);    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public GroupsEditQuery obsceneFilter(Boolean value){  return unsafeParam("obscene_filter",value);}  }
class C{  public void updateStyle(){  styler.updateStyle();}  }
class C{  public PulsarAdmin(URL serviceUrl,String authPluginClassName,String authParamsString) throws PulsarClientException {  this(serviceUrl,AuthenticationFactory.create(authPluginClassName,authParamsString));}  }
class C{  private String readLineTrimComments(BufferedReader br) throws IOException {  String line=br.readLine();  if (line != null) {    line=line.trim();    if (line.indexOf('#') == 0) {      line="";    }  }  return line;}  }
class C{  void onAnchorReady(RecyclerView.State state,AnchorInfo anchorInfo){}  }
class C{  private void initModel(int type){switch (type) {case SEARCH_PHOTOS_TYPE:    this.searchModel=new SearchPhotosObject(getContext());  break;case SEARCH_COLLECTIONS_TYPE:this.searchModel=new SearchCollectionsObject(getContext());break;case SEARCH_USERS_TYPE:this.searchModel=new SearchUsersObject(getContext());break;}this.loadModel=new LoadObject(LoadObject.FAILED_STATE);this.scrollModel=new ScrollObject();}  }
class C{  private void calculateMaxMin(Object[] max,Object[] min,int[] decimal,int[] msrIndex,Object[] row){  for (int i=0; i < msrIndex.length; i++) {    int count=msrIndex[i];    if (row[count] != null) {      if (type[count] == CarbonCommonConstants.SUM_COUNT_VALUE_MEASURE) {        double value=(double)row[count];        double maxVal=(double)max[count];        double minVal=(double)min[count];        max[count]=(maxVal > value ? max[count] : value);        min[count]=(minVal < value ? min[count] : value);        int num=getDecimalCount(value);        decimal[count]=(decimal[count] > num ? decimal[count] : num);      } else       if (type[count] == CarbonCommonConstants.BIG_INT_MEASURE) {        long value=(long)row[count];        long maxVal=(long)max[count];        long minVal=(long)min[count];        max[count]=(maxVal > value ? max[count] : value);        min[count]=(minVal < value ? min[count] : value);        int num=getDecimalCount(value);        decimal[count]=(decimal[count] > num ? decimal[count] : num);      } else       if (type[count] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {        byte[] buff=null;        if (this.compactionFlow) {          BigDecimal bigDecimal=((Decimal)row[count]).toJavaBigDecimal();          buff=DataTypeUtil.bigDecimalToByte(bigDecimal);        } else {          buff=(byte[])row[count];        }        BigDecimal value=DataTypeUtil.byteToBigDecimal(buff);        BigDecimal minVal=(BigDecimal)min[count];        min[count]=minVal.min(value);      }    }  }}  }
class C{  @Override public void onDialogClosed(boolean positiveResult){  if (positiveResult) {    int hours;    int minutes;    if (Build.VERSION.SDK_INT >= 23) {      hours=mTimePicker.getHour();      minutes=mTimePicker.getMinute();    } else {      hours=mTimePicker.getCurrentHour();      minutes=mTimePicker.getCurrentMinute();    }    int minutesAfterMidnight=(hours * 60) + minutes;    DialogPreference preference=getPreference();    if (preference instanceof TimePreference) {      TimePreference timePreference=((TimePreference)preference);      if (timePreference.callChangeListener(minutesAfterMidnight)) {        timePreference.setTime(minutesAfterMidnight);      }    }  }}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  public Builder tms(Boolean tms){  this.tms=tms;  return this;}  }
class C{  public void run(){  try {    while (true) {      Reference ref=queue.remove();      ref.clear();synchronized (refs) {        refs.remove(ref);        if (refs.isEmpty()) {          reaper=null;          return;        }      }    }  } catch (  InterruptedException e) {  }}  }
class C{  public ElementType parent(){  return theParent;}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public int hashCode(){  return registrarID.hashCode();}  }
class C{  public void disconnectAndCloseTab(final MqttAsyncConnection connection){  disconnectFromBroker(connection);  connection.closeConnection();  if (connection.getMessageLogger() != null && connection.getMessageLogger().isRunning()) {    connection.getMessageLogger().stop();  }  TabUtils.requestClose(connectionControllersMapping.get(connection).getTab());  subscriptionManagers.remove(connectionControllersMapping.get(connection));  connectionControllersMapping.remove(connection);  connectionTabs.remove(connection);  logger.debug("Closing connection tab; sm = {}; cc = {}; ct = {}",subscriptionManagers.keySet().size(),connectionControllersMapping.keySet().size(),connectionTabs.keySet().size());  connection.getScriptManager().stopScripts();  for (  final BaseMqttSubscription subscription : connection.getSubscriptions().values()) {    subscription.getStore().cleanUp();  }  connection.getStore().cleanUp();}  }
class C{  private void cancelUploadsForAccount(Account account){  mPendingUploads.remove(account.name);  mUploadsStorageManager.removeUploads(account.name);}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new BigDecimal(value);}  }
class C{  static void updateWidget(@NotNull ConstraintModel constraintModel,@Nullable ConstraintWidget widget,@Nullable NlComponent component){  if (component == null || widget == null) {    return;  }  AttributesTransaction attributes=component.startAttributeTransaction();  if (!(widget instanceof Guideline)) {    widget.setVisibility(component.getAndroidViewVisibility());  }  widget.setDebugName(component.getId());  WidgetsScene scene=constraintModel.getScene();  Insets padding=component.getPadding(true);  if (widget instanceof ConstraintWidgetContainer) {    ((ConstraintWidgetContainer)widget).setPadding(constraintModel.pxToDp(padding.left),constraintModel.pxToDp(padding.top),constraintModel.pxToDp(padding.right),constraintModel.pxToDp(padding.bottom));  } else {    widget.setDimension(constraintModel.pxToDp(component.w),constraintModel.pxToDp(component.h));  }  String absoluteWidth=attributes.getAttribute(SdkConstants.TOOLS_URI,ConvertToConstraintLayoutAction.ATTR_LAYOUT_CONVERSION_ABSOLUTE_WIDTH);  if (absoluteWidth != null) {    Configuration configuration=component.getModel().getConfiguration();    ResourceResolver resourceResolver=configuration.getResourceResolver();    int size=ResourceHelper.resolveDimensionPixelSize(resourceResolver,absoluteWidth,configuration);    size=constraintModel.pxToDp(size);    widget.setWidth(size);  }  String absoluteHeight=attributes.getAttribute(SdkConstants.TOOLS_URI,ConvertToConstraintLayoutAction.ATTR_LAYOUT_CONVERSION_ABSOLUTE_HEIGHT);  if (absoluteHeight != null) {    Configuration configuration=component.getModel().getConfiguration();    ResourceResolver resourceResolver=configuration.getResourceResolver();    int size=ResourceHelper.resolveDimensionPixelSize(resourceResolver,absoluteHeight,configuration);    size=constraintModel.pxToDp(size);    widget.setHeight(size);  }  widget.setMinWidth(constraintModel.pxToDp(component.getMinimumWidth()));  widget.setMinHeight(constraintModel.pxToDp(component.getMinimumHeight()));  NlComponent parent=component.getParent();  NlModel model=component.getModel();  if (parent != null) {    ConstraintWidget parentWidget=scene.getWidget(parent);    if (parentWidget instanceof WidgetContainer) {      WidgetContainer parentContainerWidget=(WidgetContainer)parentWidget;      if (widget.getParent() != parentContainerWidget) {        parentContainerWidget.add(widget);      }    }  }  String layout_width=attributes.getAttribute(SdkConstants.ANDROID_URI,SdkConstants.ATTR_LAYOUT_WIDTH);  if (component.w == 0 || getLayoutDimensionDpValue(component,layout_width) == 0) {    widget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.ANY);  } else   if (layout_width != null && layout_width.equalsIgnoreCase(SdkConstants.VALUE_WRAP_CONTENT)) {    widget.setWrapWidth(widget.getWidth());    widget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);  } else   if (layout_width != null && layout_width.equalsIgnoreCase(SdkConstants.VALUE_MATCH_PARENT)) {    widget.setWrapWidth(widget.getWidth());    if (isWidgetInsideConstraintLayout(widget)) {      if (widget.getAnchor(ConstraintAnchor.Type.LEFT).isConnected() && widget.getAnchor(ConstraintAnchor.Type.RIGHT).isConnected()) {        widget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.ANY);      } else {        widget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);      }    }  } else {    widget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);  }  String layout_height=attributes.getAttribute(SdkConstants.ANDROID_URI,SdkConstants.ATTR_LAYOUT_HEIGHT);  if (component.h == 0 || getLayoutDimensionDpValue(component,layout_height) == 0) {    widget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.ANY);  } else   if (layout_height != null && layout_height.equalsIgnoreCase(SdkConstants.VALUE_WRAP_CONTENT)) {    widget.setWrapHeight(widget.getHeight());    widget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);  } else   if (layout_height != null && layout_height.equalsIgnoreCase(SdkConstants.VALUE_MATCH_PARENT)) {    widget.setWrapHeight(widget.getHeight());    if (isWidgetInsideConstraintLayout(widget)) {      if ((widget.getAnchor(ConstraintAnchor.Type.TOP).isConnected() && widget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected())) {        widget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.ANY);      } else {        widget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);      }    }  } else {    widget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);  }  int x=constraintModel.pxToDp(component.x);  int y=constraintModel.pxToDp(component.y);  if (widget instanceof ConstraintWidgetContainer) {    x+=constraintModel.pxToDp(padding.left);    y+=constraintModel.pxToDp(padding.top);  }  WidgetContainer parentContainer=(WidgetContainer)widget.getParent();  if (parentContainer != null) {    if (!(parentContainer instanceof ConstraintWidgetContainer)) {      x=constraintModel.pxToDp(component.x - component.getParent().x);      y=constraintModel.pxToDp(component.y - component.getParent().y);    } else {      x-=parentContainer.getDrawX();      y-=parentContainer.getDrawY();    }  }  String absoluteX=attributes.getAttribute(SdkConstants.TOOLS_URI,ConvertToConstraintLayoutAction.ATTR_LAYOUT_CONVERSION_ABSOLUTE_X);  if (absoluteX != null) {    Configuration configuration=component.getModel().getConfiguration();    ResourceResolver resourceResolver=configuration.getResourceResolver();    int position=ResourceHelper.resolveDimensionPixelSize(resourceResolver,absoluteX,configuration);    x=constraintModel.pxToDp(position);  }  String absoluteY=attributes.getAttribute(SdkConstants.TOOLS_URI,ConvertToConstraintLayoutAction.ATTR_LAYOUT_CONVERSION_ABSOLUTE_Y);  if (absoluteY != null) {    Configuration configuration=component.getModel().getConfiguration();    ResourceResolver resourceResolver=configuration.getResourceResolver();    int position=ResourceHelper.resolveDimensionPixelSize(resourceResolver,absoluteY,configuration);    y=constraintModel.pxToDp(position);  }  if (widget.getX() != x || widget.getY() != y) {    widget.setOrigin(x,y);    widget.forceUpdateDrawPosition();  }  widget.setBaselineDistance(constraintModel.pxToDp(component.getBaseline()));  widget.resetAnchors();  String left1=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_LEFT_OF);  String left2=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_RIGHT_OF);  String right1=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_LEFT_OF);  String right2=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_RIGHT_OF);  String top1=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_TOP_OF);  String top2=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_BOTTOM_OF);  String bottom1=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_TOP_OF);  String bottom2=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_BOTTOM_OF);  String baseline=attributes.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BASELINE_TO_BASELINE_OF);  WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();  companion.getWidgetProperties().clear();  setMarginType(ConstraintAnchor.Type.LEFT,component,widget);  setMarginType(ConstraintAnchor.Type.RIGHT,component,widget);  setMarginType(ConstraintAnchor.Type.TOP,component,widget);  setMarginType(ConstraintAnchor.Type.BOTTOM,component,widget);  setTarget(model,scene,left1,widget,ConstraintAnchor.Type.LEFT,ConstraintAnchor.Type.LEFT);  setStartMargin(left1,component,widget);  setTarget(model,scene,left2,widget,ConstraintAnchor.Type.LEFT,ConstraintAnchor.Type.RIGHT);  setStartMargin(left2,component,widget);  setTarget(model,scene,right1,widget,ConstraintAnchor.Type.RIGHT,ConstraintAnchor.Type.LEFT);  setEndMargin(right1,component,widget);  setTarget(model,scene,right2,widget,ConstraintAnchor.Type.RIGHT,ConstraintAnchor.Type.RIGHT);  setEndMargin(right2,component,widget);  setTarget(model,scene,top1,widget,ConstraintAnchor.Type.TOP,ConstraintAnchor.Type.TOP);  setTopMargin(top1,component,widget);  setTarget(model,scene,top2,widget,ConstraintAnchor.Type.TOP,ConstraintAnchor.Type.BOTTOM);  setTopMargin(top2,component,widget);  setTarget(model,scene,bottom1,widget,ConstraintAnchor.Type.BOTTOM,ConstraintAnchor.Type.TOP);  setBottomMargin(bottom1,component,widget);  setTarget(model,scene,bottom2,widget,ConstraintAnchor.Type.BOTTOM,ConstraintAnchor.Type.BOTTOM);  setBottomMargin(bottom2,component,widget);  setTarget(model,scene,baseline,widget,ConstraintAnchor.Type.BASELINE,ConstraintAnchor.Type.BASELINE);  setBias(SdkConstants.ATTR_LAYOUT_HORIZONTAL_BIAS,component,widget);  setBias(SdkConstants.ATTR_LAYOUT_VERTICAL_BIAS,component,widget);  setDimensionRatio(SdkConstants.ATTR_LAYOUT_DIMENSION_RATIO,component,widget);  if (widget instanceof Guideline) {    Guideline guideline=(Guideline)widget;    setGuideline(component,guideline);  }  WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);  if (decorator != null && decorator instanceof TextWidget) {    TextWidget textWidget=(TextWidget)decorator;    textWidget.setText(getResolvedText(component));    Configuration configuration=component.getModel().getConfiguration();    ResourceResolver resourceResolver=configuration.getResourceResolver();    Integer size=null;    if (resourceResolver != null) {      String textSize=attributes.getAttribute(SdkConstants.ANDROID_URI,SdkConstants.ATTR_TEXT_SIZE);      if (textSize != null) {        size=ResourceHelper.resolveDimensionPixelSize(resourceResolver,textSize,configuration);      }    }    if (size == null) {      size=ResourceHelper.resolveDimensionPixelSize(resourceResolver,"15sp",configuration);    }    textWidget.setTextSize(constraintModel.pxToDp(size));  }}  }
class C{  private void initWidget(){  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_settings_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  Toolbar toolbar=(Toolbar)findViewById(R.id.activity_settings_toolbar);  if (Mysplash.getInstance().isLightTheme()) {    toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);  } else {    toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);  }  toolbar.setNavigationOnClickListener(this);  this.container=(CoordinatorLayout)findViewById(R.id.activity_settings_container);}  }
class C{  private boolean checkLastStamp(Timestamp lastStamp){  Timestamp now=new Timestamp(System.currentTimeMillis());  Calendar c=Calendar.getInstance();  c.setTimeInMillis(lastStamp.getTime());  c.add(Calendar.DATE,1);  c.set(Calendar.HOUR_OF_DAY,9);  c.set(Calendar.MINUTE,0);  Timestamp nextStamp=new Timestamp(c.getTime().getTime());  return now.after(nextStamp);}  }
class C{  private boolean inflate(boolean force){  Configuration configuration=myConfiguration;  if (configuration == null) {    return false;  }  ResourceNotificationManager resourceNotificationManager=ResourceNotificationManager.getInstance(myFile.getProject());  LayoutPullParserFactory.saveFileIfNecessary(myFile);  RenderResult result=null;synchronized (RENDERING_LOCK) {    if (myRenderTask != null && !force) {      return false;    }    myRenderedVersion=resourceNotificationManager.getCurrentVersion(myFacet,myFile,myConfiguration);    RenderService renderService=RenderService.get(myFacet);    RenderLogger logger=renderService.createLogger();    if (myRenderTask != null) {      myRenderTask.dispose();    }    myRenderTask=renderService.createTask(myFile,configuration,logger,mySurface);    if (myRenderTask != null) {      if (!isRenderViewPort()) {        myRenderTask.useDesignMode(myFile);      }      result=myRenderTask.inflate();      if (result == null || !result.getRenderResult().isSuccess()) {        myRenderTask.dispose();        myRenderTask=null;        if (result == null) {          result=RenderResult.createBlank(myFile,logger);        }      }    }    myRenderResultLock.writeLock().lock();    try {      myRenderResult=result;      updateHierarchy(result);    }  finally {      myRenderResultLock.writeLock().unlock();    }    return myRenderTask != null;  }}  }
class C{  public static String format(Object... parts){  StringBuilder key=new StringBuilder(DIABLO_NAMESPACE);  for (  Object part : parts) {    key.append(KEY_DELIMITER).append(part);  }  return key.toString();}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public boolean isNested(){  return false;}  }
class C{  public void repaint(){  mySceneDraw.repaint();}  }
class C{  public void addModifier(ItemIdOuterClass.ItemId item) throws LoginFailedException, RemoteServerException {  AsyncHelper.toBlocking(addModifierAsync(item));}  }
class C{  public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){  StringBuilder builder=new StringBuilder();  int index=0;  for (; index < noDictionaryDimsMapping.length; index++) {    builder.append(noDictionaryDimsMapping[index]);    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);  }  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();  return str;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  private static double atan(double xa,double xb,boolean leftPlane){  if (xa == 0.0) {    return leftPlane ? copySign(Math.PI,xa) : xa;  }  final boolean negate;  if (xa < 0) {    xa=-xa;    xb=-xb;    negate=true;  } else {    negate=false;  }  if (xa > 1.633123935319537E16) {    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);  }  final int idx;  if (xa < 1) {    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);  } else {    final double oneOverXa=1 / xa;    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);  }  final double ttA=TANGENT_TABLE_A[idx];  final double ttB=TANGENT_TABLE_B[idx];  double epsA=xa - ttA;  double epsB=-(epsA - xa + ttA);  epsB+=xb - ttB;  double temp=epsA + epsB;  epsB=-(temp - epsA - epsB);  epsA=temp;  temp=xa * HEX_40000000;  double ya=xa + temp - temp;  double yb=xb + xa - ya;  xa=ya;  xb+=yb;  if (idx == 0) {    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));    ya=epsA * denom;    yb=epsB * denom;  } else {    double temp2=xa * ttA;    double za=1d + temp2;    double zb=-(za - 1d - temp2);    temp2=xb * ttA + xa * ttB;    temp=za + temp2;    zb+=-(temp - za - temp2);    za=temp;    zb+=xb * ttB;    ya=epsA / za;    temp=ya * HEX_40000000;    final double yaa=(ya + temp) - temp;    final double yab=ya - yaa;    temp=za * HEX_40000000;    final double zaa=(za + temp) - temp;    final double zab=za - zaa;    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;    yb+=-epsA * zb / za / za;    yb+=epsB / za;  }  epsA=ya;  epsB=yb;  final double epsA2=epsA * epsA;  yb=0.07490822288864472;  yb=yb * epsA2 - 0.09088450866185192;  yb=yb * epsA2 + 0.11111095942313305;  yb=yb * epsA2 - 0.1428571423679182;  yb=yb * epsA2 + 0.19999999999923582;  yb=yb * epsA2 - 0.33333333333333287;  yb=yb * epsA2 * epsA;  ya=epsA;  temp=ya + yb;  yb=-(temp - ya - yb);  ya=temp;  yb+=epsB / (1d + epsA * epsA);  final double eighths=EIGHTHS[idx];  double za=eighths + ya;  double zb=-(za - eighths - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double result=za + zb;  if (leftPlane) {    final double resultb=-(result - za - zb);    final double pia=1.5707963267948966 * 2;    final double pib=6.123233995736766E-17 * 2;    za=pia - result;    zb=-(za - pia + result);    zb+=pib - resultb;    result=za + zb;  }  if (negate ^ leftPlane) {    result=-result;  }  return result;}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (other == null || getClass() != other.getClass())   return false;  DictionaryColumnUniqueIdentifier that=(DictionaryColumnUniqueIdentifier)other;  if (!carbonTableIdentifier.equals(that.carbonTableIdentifier))   return false;  return columnIdentifier.equals(that.columnIdentifier);}  }
class C{  public void updateFileDetails(boolean transferring,boolean refresh){  if (readyToShow()) {    FileDataStorageManager storageManager=mContainerActivity.getStorageManager();    if (refresh && storageManager != null) {      setFile(storageManager.getFileByPath(getFile().getRemotePath()));    }    OCFile file=getFile();    setFilename(file.getFileName());    setFiletype(file);    setFilesize(file.getFileLength());    setTimeModified(file.getModificationTimestamp());    CheckBox cb=(CheckBox)getView().findViewById(R.id.fdFavorite);    cb.setChecked(file.isFavorite());    FileDownloaderBinder downloaderBinder=mContainerActivity.getFileDownloaderBinder();    FileUploaderBinder uploaderBinder=mContainerActivity.getFileUploaderBinder();    if (transferring || (downloaderBinder != null && downloaderBinder.isDownloading(mAccount,file)) || (uploaderBinder != null && uploaderBinder.isUploading(mAccount,file))) {      setButtonsForTransferring();    } else     if (file.isDown()) {      setButtonsForDown();    } else {      setButtonsForRemote();    }  }  getView().invalidate();}  }
class C{  public boolean isImageOutlinePolygonVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    if (obj instanceof RasterSymbolizer) {      RasterSymbolizer raster=(RasterSymbolizer)obj;      enabled=(raster.getImageOutline() == null) && (geometryType == GeometryTypeEnum.RASTER);    }  }  return enabled;}  }
class C{  public INSECTCategoryDB(){}  }
class C{  public GroupsGetInvitedUsersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public PolarLocationAnimator(){  super();}  }
class C{  public static boolean isNegativeInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp < 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public void onKeyDown(){}  }
class C{  public Ticket schedule(long when,Runnable task,ThreadDesc threadDesc){synchronized (contents) {    if (dead)     throw new IllegalStateException("trying to add task to stopped WakeupManager");    Ticket t=newTicket(when,task,threadDesc);    contents.add(t);    if (kickerThread == null) {      logger.log(Level.FINEST,"starting queue's thread");      try {        final Thread thread=kickerDesc.thread(kicker);        thread.start();        kickerThread=thread;      } catch (      Throwable tt) {        try {          logger.log(Level.SEVERE,"queue thread creation exception",tt);        } catch (        Throwable ttt) {        }      }    }    checkHead();    return t;  }}  }
class C{  public void removeClient(SocketAddress address){  ProxyClient sc=address2Services.remove(address);  if (null != sc) {    logger.info("Removed host {}.",address);    sc.close();  }}  }
class C{  public boolean isComponentGroupPresent(String groupName){  return getComponentGroupNames().contains(groupName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_DOOR_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400305,value1,value0);}  }
class C{  private static Reader internalGetContentReader(IMember member) throws JavaModelException {  IBuffer buf=member.getOpenable().getBuffer();  if (buf == null) {    return null;  }  ISourceRange javadocRange=member.getJavadocRange();  if (javadocRange != null) {    JavaDocCommentReader reader=new JavaDocCommentReader(buf,javadocRange.getOffset(),javadocRange.getOffset() + javadocRange.getLength() - 1);    if (!containsOnlyInheritDoc(reader,javadocRange.getLength())) {      reader.reset();      return reader;    }  }  return null;}  }
class C{  public static boolean isAllowed(Class<?> typeToCheck,Class<?> attributeType){  if (allowedClassTypeMap.isEmpty()) {    initialise();  }  List<Class<?>> list=allowedClassTypeMap.get(attributeType);  if (list == null) {    return false;  }  return list.contains(typeToCheck);}  }
class C{  public synchronized void resetTime(){}  }
class C{  private void drawBorder(Canvas canvas){  if (borderWidth > 0) {    Paint paint=new Paint();    paint.setStrokeWidth(borderWidth);    paint.setStyle(Paint.Style.STROKE);    paint.setColor(borderColor);    paint.setAntiAlias(true);    if (shapeType == 1) {      canvas.drawCircle(width / 2,height / 2,(width - borderWidth) / 2,paint);    } else     if (shapeType == 2) {      RectF rectf=new RectF(borderWidth / 2,borderWidth / 2,getWidth() - borderWidth / 2,getHeight() - borderWidth / 2);      canvas.drawRoundRect(rectf,radius,radius,paint);    }  }}  }
class C{  public FieldMatrix<T> outerProduct(ArrayFieldVector<T> v){  final int m=data.length;  final int n=v.data.length;  final FieldMatrix<T> out=new Array2DRowFieldMatrix<T>(field,m,n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      out.setEntry(i,j,data[i].multiply(v.data[j]));    }  }  return out;}  }
class C{  public MarketGetAlbumsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public PhotosGetCommentsQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  public Bitmap onTakePhotoResult(){  Uri takenPhotoUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);  if (takenPhotoUri != null) {    Bitmap takenImage=BitmapFactory.decodeFile(takenPhotoUri.getPath());    takenImage=resizePhoto(takenImage,this.resizePhoto,true);    return takenImage;  } else {    return null;  }}  }
class C{  protected HTSUttModel processTargetList(List<Target> targetFeaturesList,List<Element> segmentsAndBoundaries,HMMData htsData) throws Exception {  HTSUttModel um=new HTSUttModel();  CartTreeSet cart=htsData.getCartTreeSet();  realisedDurations="#\n";  int numLab=0;  double diffdurOld=0.0;  int alignDurSize=0;  final float fperiodmillisec=((float)htsData.getFperiod() / (float)htsData.getRate()) * 1000;  final float fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());  boolean firstPh=true;  float durVal=0.0f;  FeatureDefinition feaDef=htsData.getFeatureDefinition();  int featureIndex=feaDef.getFeatureIndex("phone");  if (htsData.getUseAcousticModels()) {    phoneAlignmentForDurations=true;    Log.i(Mary.LOG,"Using prosody from acoustparams.");  } else {    phoneAlignmentForDurations=false;    Log.i(Mary.LOG,"Estimating state durations from (Gaussian) state duration model.");  }  int i=0;  for (  Target target : targetFeaturesList) {    FeatureVector fv=target.getFeatureVector();    HTSModel m=new HTSModel(cart.getNumStates());    um.addUttModel(m);    m.setPhoneName(fv.getFeatureAsString(featureIndex,feaDef));    if (htsData.getUseContextDependentGV()) {      if (m.getPhoneName().contentEquals("_"))       m.setGvSwitch(false);    }    double diffdurNew;    if (phoneAlignmentForDurations && segmentsAndBoundaries != null) {      Element e=segmentsAndBoundaries.get(i);      diffdurNew=cart.searchDurInCartTree(m,fv,htsData,firstPh,false,diffdurOld);      if (e.getTagName().contentEquals("ph")) {        m.setMaryXmlDur(e.getAttribute("d"));        durVal=Float.parseFloat(m.getMaryXmlDur());        double durationsFraction=durVal / (fperiodmillisec * m.getTotalDur());        m.setTotalDur(0);        for (int k=0; k < cart.getNumStates(); k++) {          int newStateDuration=(int)(durationsFraction * m.getDur(k) + newStateDurationFactor);          newStateDuration=Math.max(1,newStateDuration);          m.setDur(k,newStateDuration);          m.incrTotalDur(newStateDuration);        }      } else       if (e.getTagName().contentEquals("boundary")) {        durVal=0;        if (!e.getAttribute("duration").isEmpty())         durVal=Float.parseFloat(e.getAttribute("duration"));        if (durVal != 400) {          int durValFrames=Math.round(durVal / fperiodmillisec);          int totalDurGaussians=m.getTotalDur();          m.setTotalDur(durValFrames);          float durationsFraction=durVal / (fperiodmillisec * m.getTotalDur());          m.setTotalDur(0);          for (int k=0; k < cart.getNumStates(); k++) {            int newStateDuration=Math.round(((float)m.getDur(k) / (float)totalDurGaussians) * durValFrames);            newStateDuration=Math.max(newStateDuration,1);            m.setDur(k,newStateDuration);            m.setTotalDur(m.getTotalDur() + m.getDur(k));          }        } else {          if (!e.getAttribute("breakindex").isEmpty()) {            durVal=Float.parseFloat(e.getAttribute("breakindex"));          }          durVal=(m.getTotalDur() * fperiodmillisec);        }        m.setMaryXmlDur(Float.toString(durVal));      }      if (e.hasAttribute("f0")) {        m.setMaryXmlF0(e.getAttribute("f0"));      }    } else {      diffdurNew=cart.searchDurInCartTree(m,fv,htsData,firstPh,false,diffdurOld);    }    um.setTotalFrame(um.getTotalFrame() + m.getTotalDur());    m.setTotalDurMillisec((int)(fperiodmillisec * m.getTotalDur()));    double durSec=um.getTotalFrame() * fperiodsec;    realisedDurations+=Double.toString(durSec) + " " + numLab+ " "+ m.getPhoneName()+ "\n";    numLab++;    diffdurOld=diffdurNew;    cart.searchLf0InCartTree(m,fv,feaDef,htsData.getUV());    cart.searchMgcInCartTree(m,fv,feaDef);    if (htsData.getTreeStrStream() != null)     cart.searchStrInCartTree(m,fv,feaDef);    if (htsData.getTreeMagStream() != null)     cart.searchMagInCartTree(m,fv,feaDef);    um.setNumModel(um.getNumModel() + 1);    um.setNumState(um.getNumState() + cart.getNumStates());    i++;    firstPh=false;  }  if (phoneAlignmentForDurations && alignDur != null)   if (um.getNumUttModel() != alignDurSize)   throw new Exception("The number of durations provided for phone alignment (" + alignDurSize + ") is greater than the number of feature vectors ("+ um.getNumUttModel()+ ").");  for (i=0; i < um.getNumUttModel(); i++) {    HTSModel m=um.getUttModel(i);    for (int mstate=0; mstate < cart.getNumStates(); mstate++)     if (m.getVoiced(mstate))     for (int frame=0; frame < m.getDur(mstate); frame++)     um.setLf0Frame(um.getLf0Frame() + 1);  }  Log.i(Mary.LOG,"Number of models in sentence numModel=" + um.getNumModel() + "  Total number of states numState="+ um.getNumState());  Log.i(Mary.LOG,"Total number of frames=" + um.getTotalFrame() + "  Number of voiced frames="+ um.getLf0Frame());  return um;}  }
class C{  public boolean isLoaded(MapType mapType){  return loadedMaps.contains(mapType);}  }
class C{  public static Map<String,Object> lookupRoutingTask(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  String workEffortName=(String)context.get("workEffortName");  String fixedAssetId=(String)context.get("fixedAssetId");  List<GenericValue> listRoutingTask=null;  List<EntityExpr> constraints=FastList.newInstance();  if (UtilValidate.isNotEmpty(workEffortName)) {    constraints.add(EntityCondition.makeCondition("workEffortName",EntityOperator.GREATER_THAN_EQUAL_TO,workEffortName));  }  if (UtilValidate.isNotEmpty(fixedAssetId) && !"ANY".equals(fixedAssetId)) {    constraints.add(EntityCondition.makeCondition("fixedAssetId",EntityOperator.EQUALS,fixedAssetId));  }  constraints.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"ROU_ACTIVE"));  constraints.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"ROU_TASK"));  try {    listRoutingTask=EntityQuery.use(delegator).from("WorkEffort").where(constraints).orderBy("workEffortName").queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingTechDataWorkEffortNotExist",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (listRoutingTask == null) {    listRoutingTask=FastList.newInstance();  }  if (listRoutingTask.size() == 0) {  }  result.put("lookupResult",listRoutingTask);  return result;}  }
class C{  @Override public IScanListIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive,boolean ordered){  ordered|=FORCE_ORDERED_SCAN;  long startTime=_recentExtendedIndexUpdates != null ? System.currentTimeMillis() : 0;  IScanListIterator<IEntryCacheInfo> res=ordered ? establishScanOrdered(startPos,relation,endPos,endPosInclusive) : establishScanUnOrdered(startPos,relation,endPos,endPosInclusive);  if (_recentExtendedIndexUpdates != null && !_recentExtendedIndexUpdates.isEmpty()) {    MultiStoredList<IEntryCacheInfo> msl=new MultiStoredList<IEntryCacheInfo>();    msl.add(res);    msl.add(_recentExtendedIndexUpdates.iterator(startTime,(ExtendedIndexIterator)res));    return msl;  } else   return res;}  }
class C{  public QuestRewardCursor queryQuestRewardItem(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_QUEST_REWARDS;  qh.Selection="qr." + S.COLUMN_QUEST_REWARDS_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="q." + S.COLUMN_QUESTS_HUB + " ASC, "+ "q."+ S.COLUMN_QUESTS_STARS+ " ASC";  qh.Limit=null;  return new QuestRewardCursor(wrapJoinHelper(builderQuestReward(),qh));}  }
class C{  public void clear(){  this.root=null;  this.size=0;}  }
class C{  private void fillQName(QName toFill,mf.javax.xml.namespace.QName toCopy){  fillQName(toFill,toCopy.getNamespaceURI(),toCopy.getLocalPart(),toCopy.getPrefix());}  }
class C{  public ByteFileGetterInMemory(File file) throws IOException, CanceledException {  limit=file.length();  data=new byte[(int)((limit >>> BITS)) + 1][];  final int length0=(1 << BITS);  for (int i=0; i < data.length; i++) {    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);    data[i]=new byte[length];  }  try (InputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage("Reading file: " + file,limit)){    int whichArray=0;    int indexInArray=0;    for (long index=0; index < limit; index++) {      data[whichArray][indexInArray]=(byte)ins.read();      if (++indexInArray == length0) {        whichArray++;        indexInArray=0;      }      progress.setProgress(index);    }    progress.close();  } }  }
class C{  public static StatelessIntHash murmur3_32(int seed){  return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32,seed));}  }
class C{  @Override public ASModel createAS(boolean isNamespaceAware){  return new ASModelImpl(isNamespaceAware);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  @SuppressWarnings("unchecked") private void runRules(Element elem){  Class<?> type=elem.getClass();  while (Element.class.isAssignableFrom(type)) {    for (    LintRule<? extends Element> rule : lintRules.get((Class<? extends Element>)type)) {      @SuppressWarnings("unchecked") LintRule<Element> castedRule=(LintRule<Element>)rule;      castedRule.run(elem);    }    type=type.getSuperclass();  }}  }
class C{  public WidgetsGetCommentsQuery order(String value){  return unsafeParam("order",value);}  }
class C{  private void updateButtonGroupForRow(int row){  int startEndMargin=row == ROW_MAIN ? mMargin : 0;  mButtonGroup.setHorizontalMode(mMargin / 2,startEndMargin,startEndMargin);  mButtonGroup.gravity=Gravity.END;  if (row == ROW_OTHER && mButtonGroup.views.length >= 2) {    int extraWidth=availableWidth() - getWidthWithMargins(mButtonGroup);    if (extraWidth < 0) {      mButtonGroup.setVerticalMode(mMargin / 2,0);      mButtonGroup.gravity=Gravity.FILL_HORIZONTAL;    } else     if (mTertiaryButton != null) {      ((LayoutParams)mTertiaryButton.getLayoutParams()).endMargin+=extraWidth;    }  }  if (row == ROW_MAIN && mCustomButton != null) {    ((LayoutParams)mCustomButton.getLayoutParams()).endMargin=mMargin;  }}  }
class C{  public void initializeWithNative(){  initialize(this);}  }
class C{  public boolean isCentralDB(){  return _isCentralDB;}  }
class C{  public IteratorBuilder(GigaSpace gigaSpace){  this.gigaSpace=gigaSpace;}  }
class C{  private void drawXAxis(Graphics2D gc){  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  gc.setColor(Color.BLACK);  gc.drawLine(x0,y0,x1 + 10,y0);  drawArrowHead(gc,new Point(x0,y0),new Point(x1 + 10,y0));  drawXAxisTicks(gc);  if (getChartData().getSeriesLabel() != null) {    gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));    gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));    int x=5;    int y=getHeight() - bottomMargin + 25;    if (isTranspose())     gc.drawString(getChartData().getClassesLabel(),x,y); else     gc.drawString(getChartData().getSeriesLabel(),x,y);  }}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AnnotationMethodDecl fullCopy(){  AnnotationMethodDecl tree=(AnnotationMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void parseLabels() throws IOException {  String line;  boolean headerComplete=false;  ArrayList<Double> timesList=new ArrayList<Double>();  ArrayList<String> labelsList=new ArrayList<String>();  ArrayList<String> headersList=new ArrayList<String>();  Pattern linePattern=Pattern.compile("^\\s*(\\d+(?:\\.\\d+)?)\\s+.+?\\s+?(.*)$");  boolean matches=false;  String timeStr=null;  String label=null;  double time;  while ((line=reader.readLine()) != null) {    Matcher lineMatcher=linePattern.matcher(line);    matches=lineMatcher.matches();    if (matches) {      headerComplete=true;      timeStr=lineMatcher.group(1);      label=lineMatcher.group(2);      try {        time=Double.parseDouble(timeStr);        timesList.add(time);      } catch (      NumberFormatException nfe) {        throw nfe;      }      labelsList.add(label);    } else {      if (!headerComplete) {        if (line.trim().startsWith("#"))         headerComplete=true; else         headersList.add(line);      } else {        System.err.println("Malformed line found outside of header:\n" + line);        throw new IOException();      }    }  }  assert timesList.size() == labelsList.size() : "";  times=new Double[timesList.size()];  int t;  for (t=0; t < timesList.size(); t++) {    times[t]=timesList.get(t);  }  labels=labelsList.toArray(new String[0]);  header=headersList.toArray(new String[0]);  return;}  }
class C{  public boolean tryReadLockOnKey(K id,Long timeout){  try {    return cache.tryReadLockOnKey(id,timeout);  } catch (  InterruptedException e) {    LOGGER.debug("Thread interrupted for id=" + String.valueOf(id) + " ("+ this.getClass()+ ")");    return false;  }}  }
class C{  static public void check(long got,long expected) throws IOException {  if (expected != got)   throw new IOException("RMA2 file corrupt? Expected: " + expected + ", got: "+ got);}  }
class C{  public String end_graph(){  return "}";}  }
class C{  private static List<DependencyGraph> readCoNLLX(String fileName){  List<DependencyGraph> graphs=new ArrayList<DependencyGraph>();  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),"UTF-8"));    String line=null;    List<String> tokens=new ArrayList<String>();    tokens.add("ROOT");    List<String> tags=new ArrayList<String>();    tags.add("ROOT");    List<Integer> heads=new ArrayList<Integer>();    heads.add(-1);    List<String> labels=new ArrayList<String>();    labels.add("NULL");    while ((line=br.readLine()) != null) {      if (line.trim().length() == 0) {        int n=tokens.size();        Sentence sentence=new Sentence(tokens.toArray(new String[n]),tags.toArray(new String[n]));        DependencyGraph graph=new DependencyGraph(sentence,heads.toArray(new Integer[n]),labels.toArray(new String[n]));        graphs.add(graph);        tokens=new ArrayList<String>();        tokens.add("ROOT");        tags=new ArrayList<String>();        tags.add("ROOT");        heads=new ArrayList<Integer>();        heads.add(-1);        labels=new ArrayList<String>();        labels.add("NULL");      } else {        String[] parts=line.split("\\s+");        if (parts.length != 10) {          throw new IllegalArgumentException("Bad file format! " + line);        }        tokens.add(parts[1]);        tags.add(parts[4]);        heads.add(new Integer(parts[6]));        labels.add(parts[7]);      }    }    br.close();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return graphs;}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_SELL_NPC(long value0){  return new SM_SYSTEM_MESSAGE(1400938,value0);}  }
class C{  public void onTargetDismissed(TapTargetView view,boolean userInitiated){}  }
class C{  public boolean isGameRunning(){  return isGameRunning;}  }
class C{  public Bucket(String label,String experimentId,double allocationPercent,boolean isControl,String description){  this(label,experimentId,allocationPercent,isControl,description,null);}  }
class C{  public static <T>ArrayList<T> provideArrayList(final Class<T> ignored){  return new ArrayList<>();}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public MarketGetQueryWithExtended albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public TabState restoreTabState(int tabId,boolean encrypted){  return TabState.restoreTabState(getTabStateFile(tabId,encrypted),encrypted);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  protected LeadsCheckUserQuery leadId(int value){  return unsafeParam("lead_id",value);}  }
class C{  boolean isChrOrderValid(){  if (reader.getVersion() >= 4) {    String chromosomeNames;    List<String> fileChromos=null;    try {      TDFGroup rootGroup=reader.getGroup(TDFWriter.ROOT_GROUP);      chromosomeNames=rootGroup.getAttribute(TDFWriter.CHROMOSOMES);      fileChromos=new ArrayList<String>(Arrays.asList(chromosomeNames.split(",")));    } catch (    Exception e) {      return false;    }    return checkChromoNameOrder(fileChromos,genome.getLongChromosomeNames());  } else   if (genome != null) {    String genomeId=genome.getId();    return WELL_KNOWN_GENOMES.contains(genomeId);  } else {    return false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EVENT_LOSE_ARTIFACT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390204,value0,value1);}  }
class C{  public String namespace(){  return theType.namespace();}  }
class C{  public static void initTaskMgr(){  taskMgr=new TaskMgr();}  }
class C{  @Override public void addObservation(final double[] x,final double y) throws MathIllegalArgumentException {  if (x == null || x.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INVALID_REGRESSION_OBSERVATION,x != null ? x.length : 0,1);  }  addData(x[0],y);}  }
class C{  public FriendsSearchQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200461,skilltarget,skillname);}  }
class C{  public synchronized int createRequest(String rawArgs,int action,CallbackContext callbackContext){  Request req=new Request(rawArgs,action,callbackContext);  requests.put(req.requestCode,req);  return req.requestCode;}  }
class C{  protected int findUTCSign(String buffer,int start,int end){  int c;  for (int i=start; i < end; i++) {    c=buffer.charAt(i);    if (c == 'Z' || c == '+' || c == '-') {      return i;    }  }  return -1;}  }
class C{  public Builder maxZoom(Number maxZoom){  this.maxZoom=maxZoom;  return this;}  }
class C{  public boolean isPreclosed(){  return preclosed;}  }
class C{  public PaddingDecimalFormat(String pattern,DecimalFormatSymbols symbols,int minLength){  super(pattern,symbols);  minimumLength=minLength;}  }
class C{  synchronized void executed(RTEditText editor,Operation op){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  while (!undoStack.empty() && op.canMerge(undoStack.peek())) {    Operation previousOp=undoStack.pop();    op.merge(previousOp);  }  push(op,undoStack);  redoStack.clear();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200825,skillcaster,num0,skillname);}  }
class C{  public Vector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public AdsCreateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.createCampaigns",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAircraft && getAircraftId().equals(((AirMapAircraft)o).getAircraftId());}  }
class C{  public CodeCursor(){  this.baseAddressMap=new SparseIntArray();  this.cursor=0;}  }
class C{  public AddExpr newAddExpr(Value op1,Value op2){  return new GAddExpr(op1,op2);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public ReplicationFilterProvider(IReplicationFilter inputFilter,IReplicationFilter outputFilter){  this.inputFilter=inputFilter;  this.outputFilter=outputFilter;}  }
class C{  @Override public void onDragStateChange(int state){}  }
class C{  public boolean isMember(int playerObjId){  return legionMembers.contains(playerObjId);}  }
class C{  @NotNull private static ModuleDependency addAndroidModule(@NotNull AndroidLibrary library,@NotNull String gradleProjectPath,@NotNull DependencySet dependencies,@NotNull DependencyScope scope,@NotNull Set<File> unique,boolean supportsDependencyGraph){  ModuleDependency dependency=new ModuleDependency(gradleProjectPath,scope);  dependencies.add(dependency);  addTransitiveDependencies(library,dependencies,scope,unique,supportsDependencyGraph);  return dependency;}  }
class C{  public MessagesCreateChatQuery(VkApiClient client,UserActor actor,int... userIds){  super(client,"messages.createChat",Integer.class);  accessToken(actor.getAccessToken());  userIds(userIds);}  }
class C{  TestException(String message){  super(message);}  }
class C{  public static boolean isValidBedLine(String line){  String[] bdg=line.split("\t");  if (bdg.length < 3) {    return false;  }  try {    Integer.parseInt(bdg[1]);    Integer.parseInt(bdg[2]);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public DataSourceDescriptor(X ds,String n,String desc,Image ic,int pos,int aep){  if (ds == null)   throw new NullPointerException("DataSource cannot be null");  dataSource=ds;  changeSupport=new PropertyChangeSupport(dataSource);  name=n;  description=desc;  icon=ic;  preferredPosition=pos;  autoExpansionPolicy=aep;}  }
class C{  private static List<ResolveInfo> findActivitiesForPackage(Context context,String packageName){  final PackageManager packageManager=context.getPackageManager();  final Intent mainIntent=new Intent(Intent.ACTION_MAIN,null);  mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);  mainIntent.setPackage(packageName);  final List<ResolveInfo> apps=packageManager.queryIntentActivities(mainIntent,0);  return apps != null ? apps : new ArrayList<ResolveInfo>();}  }
class C{  public void addDeleted(boolean deleted){  query.append(" +deleted:" + deleted);}  }
class C{  public static Quaternion multiply(final Quaternion q1,final Quaternion q2){  final double q1a=q1.getQ0();  final double q1b=q1.getQ1();  final double q1c=q1.getQ2();  final double q1d=q1.getQ3();  final double q2a=q2.getQ0();  final double q2b=q2.getQ1();  final double q2c=q2.getQ2();  final double q2d=q2.getQ3();  final double w=q1a * q2a - q1b * q2b - q1c * q2c - q1d * q2d;  final double x=q1a * q2b + q1b * q2a + q1c * q2d - q1d * q2c;  final double y=q1a * q2c - q1b * q2d + q1c * q2a + q1d * q2b;  final double z=q1a * q2d + q1b * q2c - q1c * q2b + q1d * q2a;  return new Quaternion(w,x,y,z);}  }
class C{  private static void markDimensionCacheHealthy(int port) throws IOException {  for (  DimensionConfig dimensionConfig : new WikiDimensions().getAllDimensionConfigurations()) {    String dimension=dimensionConfig.getApiName();    HttpPost post=new HttpPost("http://localhost:" + port + "/v1/cache/dimensions/"+ dimension);    post.setHeader("Content-type","application/json");    post.setEntity(new StringEntity(String.format("{\n \"name\":\"%s\",\n \"lastUpdated\":\"2016-01-01\"\n}",dimension)));    CloseableHttpClient client=HttpClientBuilder.create().build();    CloseableHttpResponse response=client.execute(post);    LOG.debug("Mark Dimension Cache Updated Response: ",response);  }}  }
class C{  public boolean isFolder(){  return isFolder;}  }
class C{  public InvalidDatatypeValueException(String key,Object[] args){  super(key,args);}  }
class C{  public double secondsSinceStart(){  return (timeSinceStart()) / 1000.0;}  }
class C{  @Override public void rightMouseButton(Object selectedItem,MouseEvent e){}  }
class C{  public void readMap(int map_Number){  InputStream map_file;  try {    map_file=new FileInputStream("src/Asset/stage0" + map_Number + ".stg");    try {      byte[] data=new byte[map_file.available()];      map_file.read(data);      map_file.close();      String load_data=new String(data,"EUC-KR");      makeMap(load_data);    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  FileNotFoundException e1) {    e1.printStackTrace();  }}  }
class C{  public void put(String key,Object ser){  put(key,ser,null);}  }
class C{  @Override public void populateField(ColorMap value){  if (model != null) {    if (value != null) {      if (colourRampConfig != null) {        colourRampConfig.populate(value);      }      model.populate(value);      if (colourMapEntryPanel != null) {        colourMapEntryPanel.setSelectedEntry(null);      }      UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));      oldValueObj=value;      valueUpdated();    }  }}  }
class C{  public WikiMetricLoader(int sketchSize){  this.sketchSize=sketchSize;}  }
class C{  public void showMetrics(){}  }
class C{  public BoolDataType(boolean b){  this.bool=b;}  }
class C{  protected NewsfeedUnignoreItemQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  BeyondImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new BeyondExtended();  } else {    filter=new BeyondExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public Image createSnapshotIcon(Image icon){  return ImageUtilities.mergeImages(icon,SNAPSHOT_BADGE,0,0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_UP_02_01(String value0){  return new SM_SYSTEM_MESSAGE(1400868,value0);}  }
class C{  public static final void drawCircle(GL2 gl,Circle c,boolean points,boolean line){  double r=c.getRadius();  Vector2 ce=c.getCenter();  double cx=ce.x;  double cy=ce.y;  RenderUtilities.drawCircleFromCenter(gl,r,cx,cy,points,line);}  }
class C{  public void printSinks(){  if (this.sourceSinkProvider == null) {    System.err.println("Sinks not calculated yet");    return;  }  System.out.println("Sinks:");  for (  SourceSinkDefinition am : getSinks()) {    System.out.println(am.toString());  }  System.out.println("End of Sinks");}  }
class C{  public MultiDirectionalSimplex(final double[][] referenceSimplex){  this(referenceSimplex,DEFAULT_KHI,DEFAULT_GAMMA);}  }
class C{  public Builder animate(Boolean animate){  this.animate=animate;  return this;}  }
class C{  private byte[] readBytesNonBlocking(Context ctx) throws IOException, IOFilterException {  ByteBuffer bytes=readBytesFromChannelNoneBlocking(ctx);  if (bytes == null) {    return null;  }  if (ctx.phase == Context.Phase.FINISH) {    if (_filterManager == null || ctx.isSystemRequest())     return bytes.array();    return _filterManager.handleNoneBlockingContant(ctx,toByteArray(bytes));  }  return null;}  }
class C{  public String toString(){  String s="DelegationRelativeTime[start: ";  if (minStart == maxStart) {    s+=minStart + ", stop: ";  } else {    s+="[" + minStart + ", "+ maxStart+ "], stop: ";  }  if (minStop == maxStop) {    s+=minStop + "]";  } else {    s+="[" + minStop + ", "+ maxStop+ "]]";  }  return s;}  }
class C{  public static String unescape(String s){  int len=s.length();  StringBuilder b=new StringBuilder();  for (int i=0; i < len; ++i) {    char c=s.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < len) {      int d=JSONTokener.dehexchar(s.charAt(i + 1));      int e=JSONTokener.dehexchar(s.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    b.append(c);  }  return b.toString();}  }
class C{  public Book toEntity(BookDTO dto){  return toEntity(dto,1);}  }
class C{  @SuppressWarnings("rawtypes") public boolean contextsByAnyCallEdge(Edge sootEdge,Local l,SparkField field,PtSensVisitor visitor){  Obj_full_extractor pts_l=new Obj_full_extractor();  if (contexsByAnyCallEdge(sootEdge,l,pts_l) == false)   return false;  visitor.prepare();  for (  IntervalContextVar icv : pts_l.outList) {    AllocNode obj=(AllocNode)icv.var;    AllocDotField obj_f=geomPts.findAllocDotField(obj,field);    if (obj_f == null)     continue;    IVarAbstraction objField=geomPts.findInternalNode(obj_f);    if (objField == null)     continue;    long L=icv.L;    long R=icv.R;    assert L < R;    objField.get_all_context_sensitive_objects(L,R,visitor);  }  pts_l=null;  visitor.finish();  return visitor.numOfDiffObjects() != 0;}  }
class C{  @PickTriggerResult @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2) public int fromDocuments(final boolean pAllowMultiple){  return this.triggerPick(this.prepareDocumentsIntent(pAllowMultiple),QiPick.REQ_DOCUMENTS);}  }
class C{  public void stop() throws ShutDownException {  if (rabbitMqProcess == null) {    throw new IllegalStateException("Stop shouldn't be called unless 'start()' was successful.");  }  new ShutdownHelper(config,rabbitMqProcess).run();  rabbitMqProcess=null;}  }
class C{  public AppsSendRequestQuery key(String value){  return unsafeParam("key",value);}  }
class C{  public Node interpretToNode(FeatureVector featureVector,int minNumberOfData){  Node currentNode=rootNode;  Node prevNode=null;  while (currentNode != null && currentNode.getNumberOfData() > minNumberOfData && !(currentNode instanceof LeafNode)) {    prevNode=currentNode;    currentNode=((DecisionNode)currentNode).getNextNode(featureVector);  }  if (currentNode == null || currentNode.getNumberOfData() < minNumberOfData && prevNode != null) {    currentNode=prevNode;  }  assert currentNode.getNumberOfData() >= minNumberOfData || currentNode == rootNode;  assert minNumberOfData > 0 || (currentNode instanceof LeafNode);  return currentNode;}  }
class C{  @Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {  try {    fillScannedResult(blocksChunkHolder);  } catch (  FilterUnsupportedException e) {    throw new QueryExecutionException(e.getMessage());  }  return scannedResult;}  }
class C{  public synchronized VisualTupleSet add(String group,TupleSet data,Predicate filter){  if (data instanceof Table) {    return addTable(group,(Table)data,filter);  } else   if (data instanceof Tree) {    return addTree(group,(Tree)data,filter);  } else   if (data instanceof Graph) {    return addGraph(group,(Graph)data,filter);  } else {    throw new IllegalArgumentException("Unsupported TupleSet type.");  }}  }
class C{  protected SecureGetUserLevelQuery userIds(int... value){  return unsafeParam("user_ids",value);}  }
class C{  @Override public String toString(){  return "[" + getNodeName() + ": "+ getNodeValue()+ "]";}  }
class C{  public DefaultChunkListDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  @Override public void readPacketData(PacketBuffer buf) throws IOException {  AbstractChannel<?> channel=ChannelManager.get(buf.readInt());  packet=channel.read(buf);}  }
class C{  public EntityListIterator findListIteratorByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition whereEntityCondition,EntityCondition havingEntityCondition,Collection<String> fieldsToSelect,List<String> orderBy,EntityFindOptions findOptions) throws GenericEntityException {  return genericDAO.selectListIteratorByCondition(delegator,modelEntity,whereEntityCondition,havingEntityCondition,fieldsToSelect,orderBy,findOptions);}  }
class C{  private void subCheckTheTicTacTocWin(int tag,int i,int j){  if (_isGameContinueCheck)   if (getTictactocBoardStatues()[j][i] == tag) {    _counter++;    if (_counter >= Settings.nWinTheTicTacTocCountNumber) {      setTheClientScoreAboutTicTacTok(tag);    }  } else {    _counter=0;  }}  }
class C{  private static boolean inRange(long value,long min,long max){  return (min <= value) && (value <= max);}  }
class C{  public Access substituted(Collection<TypeVariable> original,List<TypeVariable> substitution){  ASTNode$State state=state();  try {    List<Access> substArgs=new List<Access>();    for (    Access arg : getTypeArgumentList())     substArgs.add(arg.substituted(original,substitution));    return new ParTypeAccess(getTypeAccess().substituted(original,substitution),substArgs);  }  finally {  }}  }
class C{  public static PsiElement lastElementInSubtree(PsiElement element){  PsiElement lastChild;  while ((lastChild=element.getLastChild()) != null) {    element=lastChild;  }  return element;}  }
class C{  @Override public List<BigInteger> arrayToPartitions(List<?> elementList,String type){  List<BigInteger> parts=new ArrayList<>();  int numArrayElementsToReturn=SystemConfiguration.getIntProperty("pir.numReturnArrayElements",1);  for (int i=0; i < numArrayElementsToReturn; ++i) {    if (elementList.size() > i) {      parts.addAll(toPartitions(elementList.get(i),type));    } else {      parts.addAll(getPaddedPartitions(type));    }  }  return parts;}  }
class C{  public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  checkIndices(start,end);  visitor.start(getDimension(),start,end);  for (int i=start; i <= end; i++) {    setEntry(i,visitor.visit(i,getEntry(i)));  }  return visitor.end();}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int width=getWidth();  int screenLeft=getScrollX();  int screenRight=screenLeft + width;  int fadingEdge=getHorizontalFadingEdgeLength();  if (rect.left > 0) {    screenLeft+=fadingEdge;  }  if (rect.right < getChildAt(0).getWidth()) {    screenRight-=fadingEdge;  }  int scrollXDelta=0;  if (rect.right > screenRight && rect.left > screenLeft) {    if (rect.width() > width) {      scrollXDelta+=(rect.left - screenLeft);    } else {      scrollXDelta+=(rect.right - screenRight);    }    int right=getChildAt(0).getRight();    int distanceToRight=right - screenRight;    scrollXDelta=Math.min(scrollXDelta,distanceToRight);  } else   if (rect.left < screenLeft && rect.right < screenRight) {    if (rect.width() > width) {      scrollXDelta-=(screenRight - rect.right);    } else {      scrollXDelta-=(screenLeft - rect.left);    }    scrollXDelta=Math.max(scrollXDelta,-getScrollX());  }  return scrollXDelta;}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public int size(){  return counter;}  }
class C{  public static OfbizUrlBuilder from(WebappInfo webAppInfo,Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {  WebSiteProperties webSiteProps=null;  ControllerConfig config=null;  String servletPath=null;  String contextPath=null;  if (webAppInfo != null) {    Assert.notNull("delegator",delegator);    String webSiteId=WebAppUtil.getWebSiteId(webAppInfo);    if (webSiteId != null) {      GenericValue webSiteValue=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache().queryOne();      if (webSiteValue != null) {        webSiteProps=WebSiteProperties.from(webSiteValue);      }    }    config=ConfigXMLReader.getControllerConfig(webAppInfo);    servletPath=WebAppUtil.getControlServletPath(webAppInfo);    contextPath=webAppInfo.getContextRoot();  }  if (webSiteProps == null) {    webSiteProps=WebSiteProperties.defaults(delegator);  }  return new OfbizUrlBuilder(config,webSiteProps,servletPath,contextPath);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200572,skilltarget,value0,skillname);}  }
class C{  private void oneToAnyConditions(String className,Field field,int action) throws ClassNotFoundException {  Class<?> fieldTypeClass=field.getType();  if (LitePalAttr.getInstance().getClassNames().contains(fieldTypeClass.getName())) {    Class<?> reverseDynamicClass=Class.forName(fieldTypeClass.getName());    Field[] reverseFields=reverseDynamicClass.getDeclaredFields();    boolean reverseAssociations=false;    for (int i=0; i < reverseFields.length; i++) {      Field reverseField=reverseFields[i];      if (!Modifier.isStatic(reverseField.getModifiers())) {        Class<?> reverseFieldTypeClass=reverseField.getType();        if (className.equals(reverseFieldTypeClass.getName())) {          if (action == GET_ASSOCIATIONS_ACTION) {            addIntoAssociationModelCollection(className,fieldTypeClass.getName(),fieldTypeClass.getName(),Const.Model.ONE_TO_ONE);          } else           if (action == GET_ASSOCIATION_INFO_ACTION) {            addIntoAssociationInfoCollection(className,fieldTypeClass.getName(),fieldTypeClass.getName(),field,reverseField,Const.Model.ONE_TO_ONE);          }          reverseAssociations=true;        } else         if (isCollection(reverseFieldTypeClass)) {          String genericTypeName=getGenericTypeName(reverseField);          if (className.equals(genericTypeName)) {            if (action == GET_ASSOCIATIONS_ACTION) {              addIntoAssociationModelCollection(className,fieldTypeClass.getName(),className,Const.Model.MANY_TO_ONE);            } else             if (action == GET_ASSOCIATION_INFO_ACTION) {              addIntoAssociationInfoCollection(className,fieldTypeClass.getName(),className,field,reverseField,Const.Model.MANY_TO_ONE);            }            reverseAssociations=true;          }        }      }    }    if (!reverseAssociations) {      if (action == GET_ASSOCIATIONS_ACTION) {        addIntoAssociationModelCollection(className,fieldTypeClass.getName(),fieldTypeClass.getName(),Const.Model.ONE_TO_ONE);      } else       if (action == GET_ASSOCIATION_INFO_ACTION) {        addIntoAssociationInfoCollection(className,fieldTypeClass.getName(),fieldTypeClass.getName(),field,null,Const.Model.ONE_TO_ONE);      }    }  }}  }
class C{  private static BitmapFactory.Options decodeImageForOption(ContentResolver resolver,Uri uri) throws FileNotFoundException {  InputStream stream=null;  try {    stream=resolver.openInputStream(uri);    BitmapFactory.Options options=new BitmapFactory.Options();    options.inJustDecodeBounds=true;    BitmapFactory.decodeStream(stream,EMPTY_RECT,options);    options.inJustDecodeBounds=false;    return options;  }  finally {    closeSafe(stream);  }}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public InstanceNotExistException(){  super();}  }
class C{  public PlacesSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public VideoGetAlbumsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void onPathPositionUpdate(Path invokedPath,float distance,float[] pos,float[] tan){}  }
class C{  protected H2DatabaseType(){}  }
class C{  private int partition(final double[] work,final int begin,final int end,final int pivot){  final double value=work[pivot];  work[pivot]=work[begin];  int i=begin + 1;  int j=end - 1;  while (i < j) {    while (i < j && Double.compare(work[j],value) > 0) {      --j;    }    while (i < j && Double.compare(work[i],value) < 0) {      ++i;    }    if (i < j) {      final double tmp=work[i];      work[i++]=work[j];      work[j--]=tmp;    }  }  if (i >= end || Double.compare(work[i],value) > 0) {    --i;  }  work[begin]=work[i];  work[i]=value;  return i;}  }
class C{  public XMLGrammarCachingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  fSchemaLoader=new XMLSchemaLoader(fSymbolTable);  fSchemaLoader.setProperty(XMLGRAMMAR_POOL,fGrammarPool);  fDTDLoader=new XMLDTDLoader(fSymbolTable,fGrammarPool);}  }
class C{  public static long addAndCheck(long a,long b) throws MathRuntimeException {  return addAndCheck(a,b,LocalizedCoreFormats.OVERFLOW_IN_ADDITION);}  }
class C{  public static Element addChildElementNSElement(Element element,String childElementName,Document document,String nameSpaceUrl){  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);  element.appendChild(newElement);  return element;}  }
class C{  private int measureWidthSize(int measureSpec){  int defSize=dp2px(DEFAULT_WIDTH);  int specSize=MeasureSpec.getSize(measureSpec);  int specMode=MeasureSpec.getMode(measureSpec);  int result=0;switch (specMode) {case MeasureSpec.UNSPECIFIED:case MeasureSpec.AT_MOST:    result=Math.min(defSize,specSize);  break;case MeasureSpec.EXACTLY:result=specSize;break;}return result;}  }
class C{  public void thrunkAtLowerBoundary(double value){  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++) {    if (A[i][j] < value)     A[i][j]=value;  }}  }
class C{  private static boolean isAccented(Item item){  return (item.getFeatures().isPresent("accent") || item.getFeatures().isPresent("endtone"));}  }
class C{  protected PollsGetVotersQuery answerIds(List<Integer> value){  return unsafeParam("answer_ids",value);}  }
class C{  private static VectorTile.Tile.Feature toFeature(Geometry geom,Vec2d cursor,MvtLayerProps layerProps,IUserDataConverter userDataConverter){  final VectorTile.Tile.GeomType mvtGeomType=JtsAdapter.toGeomType(geom);  if (mvtGeomType == VectorTile.Tile.GeomType.UNKNOWN) {    return null;  }  final VectorTile.Tile.Feature.Builder featureBuilder=VectorTile.Tile.Feature.newBuilder();  final boolean mvtClosePath=MvtUtil.shouldClosePath(mvtGeomType);  final List<Integer> mvtGeom=new ArrayList<>();  featureBuilder.setType(mvtGeomType);  if (geom instanceof Point || geom instanceof MultiPoint) {    mvtGeom.addAll(ptsToGeomCmds(geom,cursor));  } else   if (geom instanceof LineString || geom instanceof MultiLineString) {    for (int i=0; i < geom.getNumGeometries(); ++i) {      mvtGeom.addAll(linesToGeomCmds(geom.getGeometryN(i),mvtClosePath,cursor,1));    }  } else   if (geom instanceof MultiPolygon || geom instanceof Polygon) {    for (int i=0; i < geom.getNumGeometries(); ++i) {      final Polygon nextPoly=(Polygon)geom.getGeometryN(i);      final List<Integer> nextPolyGeom=new ArrayList<>();      boolean valid=true;      final LineString exteriorRing=nextPoly.getExteriorRing();      final double exteriorArea=CGAlgorithms.signedArea(exteriorRing.getCoordinates());      if (((int)Math.round(exteriorArea)) == 0) {        continue;      }      if (exteriorArea < 0d) {        CoordinateArrays.reverse(exteriorRing.getCoordinates());      }      nextPolyGeom.addAll(linesToGeomCmds(exteriorRing,mvtClosePath,cursor,2));      for (int ringIndex=0; ringIndex < nextPoly.getNumInteriorRing(); ++ringIndex) {        final LineString nextInteriorRing=nextPoly.getInteriorRingN(ringIndex);        final double interiorArea=CGAlgorithms.signedArea(nextInteriorRing.getCoordinates());        if (((int)Math.round(interiorArea)) == 0) {          continue;        }        if (interiorArea > 0d) {          CoordinateArrays.reverse(nextInteriorRing.getCoordinates());        }        if (Math.abs(exteriorArea) <= Math.abs(interiorArea)) {          valid=false;          break;        }        nextPolyGeom.addAll(linesToGeomCmds(nextInteriorRing,mvtClosePath,cursor,2));      }      if (valid) {        mvtGeom.addAll(nextPolyGeom);      }    }  }  if (mvtGeom.size() < 1) {    return null;  }  featureBuilder.addAllGeometry(mvtGeom);  userDataConverter.addTags(geom.getUserData(),layerProps,featureBuilder);  return featureBuilder.build();}  }
class C{  @Override public void addMessage(String message){  textPane.setForeground(Color.BLACK);  textPane.append(message);  textPane.append("\n");}  }
class C{  @Override public boolean isSubstitutionGroupExclusion(short exclusion){  return (fFinal & exclusion) != 0;}  }
class C{  public Sentence(String[] tokens,String[] lemmas,String[] tags){  this(tokens,tags);  this.lemmas=lemmas;}  }
class C{  public void afterOperationsBatchSynchronization(OperationsBatchData batchData){}  }
class C{  public void atan2(final double[] y,final int yOffset,final double[] x,final int xOffset,final double[] result,final int resultOffset){  double[] tmp1=new double[getSize()];  multiply(x,xOffset,x,xOffset,tmp1,0);  double[] tmp2=new double[getSize()];  multiply(y,yOffset,y,yOffset,tmp2,0);  add(tmp1,0,tmp2,0,tmp2,0);  rootN(tmp2,0,2,tmp1,0);  if (x[xOffset] >= 0) {    add(tmp1,0,x,xOffset,tmp2,0);    divide(y,yOffset,tmp2,0,tmp1,0);    atan(tmp1,0,tmp2,0);    for (int i=0; i < tmp2.length; ++i) {      result[resultOffset + i]=2 * tmp2[i];    }  } else {    subtract(tmp1,0,x,xOffset,tmp2,0);    divide(y,yOffset,tmp2,0,tmp1,0);    atan(tmp1,0,tmp2,0);    result[resultOffset]=((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];    for (int i=1; i < tmp2.length; ++i) {      result[resultOffset + i]=-2 * tmp2[i];    }  }  result[resultOffset]=FastMath.atan2(y[yOffset],x[xOffset]);}  }
class C{  public final static <T extends Bean>List<T> load(String[] cols,String where,Object[] args,Class<T> clazz){  return load(cols,where,args,null,-1,-1,clazz);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_GMSEAL_UNSEAL_IMPOSSIBLE(String value0){  return new SM_SYSTEM_MESSAGE(1400901,value0);}  }
class C{  protected int findClosest(Color c){  if (colorTab == null)   return -1;  int r=c.getRed();  int g=c.getGreen();  int b=c.getBlue();  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  public boolean only_regular_locals(){  return soot.PhaseOptions.getBoolean(options,"only-regular-locals");}  }
class C{  public boolean removeChild(int node){  while (getChildCount(node) > 0) {    removeChild(getLastChildRow(node));  }  return removeNode(node);}  }
class C{  private void fillScannedResult(BlocksChunkHolder blocksChunkHolder) throws FilterUnsupportedException {  scannedResult.reset();  QueryStatistic totalBlockletStatistic=queryStatisticsModel.getStatisticsTypeAndObjMap().get(QueryStatisticsConstants.TOTAL_BLOCKLET_NUM);  totalBlockletStatistic.addCountStatistic(QueryStatisticsConstants.TOTAL_BLOCKLET_NUM,totalBlockletStatistic.getCount() + 1);  queryStatisticsModel.getRecorder().recordStatistics(totalBlockletStatistic);  if (isMinMaxEnabled) {    BitSet bitSet=this.filterExecuter.isScanRequired(blocksChunkHolder.getDataBlock().getColumnsMaxValue(),blocksChunkHolder.getDataBlock().getColumnsMinValue());    if (bitSet.isEmpty()) {      scannedResult.setNumberOfRows(0);      scannedResult.setIndexes(new int[0]);      return;    }  }  BitSet bitSet=this.filterExecuter.applyFilter(blocksChunkHolder);  if (bitSet.isEmpty()) {    scannedResult.setNumberOfRows(0);    scannedResult.setIndexes(new int[0]);    return;  }  QueryStatistic validScannedBlockletStatistic=queryStatisticsModel.getStatisticsTypeAndObjMap().get(QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM);  validScannedBlockletStatistic.addCountStatistic(QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM,validScannedBlockletStatistic.getCount() + 1);  queryStatisticsModel.getRecorder().recordStatistics(validScannedBlockletStatistic);  int[] indexes=new int[bitSet.cardinality()];  int index=0;  for (int i=bitSet.nextSetBit(0); i >= 0; i=bitSet.nextSetBit(i + 1)) {    indexes[index++]=i;  }  FileHolder fileReader=blocksChunkHolder.getFileReader();  int[] allSelectedDimensionBlocksIndexes=blockExecutionInfo.getAllSelectedDimensionBlocksIndexes();  DimensionColumnDataChunk[] dimensionColumnDataChunk=new DimensionColumnDataChunk[blockExecutionInfo.getTotalNumberDimensionBlock()];  for (int i=0; i < allSelectedDimensionBlocksIndexes.length; i++) {    if (null == blocksChunkHolder.getDimensionDataChunk()[allSelectedDimensionBlocksIndexes[i]]) {      dimensionColumnDataChunk[allSelectedDimensionBlocksIndexes[i]]=blocksChunkHolder.getDataBlock().getDimensionChunk(fileReader,allSelectedDimensionBlocksIndexes[i]);    } else {      dimensionColumnDataChunk[allSelectedDimensionBlocksIndexes[i]]=blocksChunkHolder.getDimensionDataChunk()[allSelectedDimensionBlocksIndexes[i]];    }  }  MeasureColumnDataChunk[] measureColumnDataChunk=new MeasureColumnDataChunk[blockExecutionInfo.getTotalNumberOfMeasureBlock()];  int[] allSelectedMeasureBlocksIndexes=blockExecutionInfo.getAllSelectedMeasureBlocksIndexes();  for (int i=0; i < allSelectedMeasureBlocksIndexes.length; i++) {    if (null == blocksChunkHolder.getMeasureDataChunk()[allSelectedMeasureBlocksIndexes[i]]) {      measureColumnDataChunk[allSelectedMeasureBlocksIndexes[i]]=blocksChunkHolder.getDataBlock().getMeasureChunk(fileReader,allSelectedMeasureBlocksIndexes[i]);    } else {      measureColumnDataChunk[allSelectedMeasureBlocksIndexes[i]]=blocksChunkHolder.getMeasureDataChunk()[allSelectedMeasureBlocksIndexes[i]];    }  }  scannedResult.setDimensionChunks(dimensionColumnDataChunk);  scannedResult.setIndexes(indexes);  scannedResult.setMeasureChunks(measureColumnDataChunk);  scannedResult.setNumberOfRows(indexes.length);}  }
class C{  public static void endFlight(AirMapFlight flight,AirMapCallback<AirMapFlight> listener){  String url=String.format(flightEndUrl,flight.getFlightId());  AirMap.getClient().post(url,new GenericOkHttpCallback(listener,AirMapFlight.class));}  }
class C{  public EqualsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public Object onMessage(String id,Object data){  if ("onReceivedError".equals(id)) {    JSONObject d=(JSONObject)data;    try {      this.onReceivedError(d.getInt("errorCode"),d.getString("description"),d.getString("url"));    } catch (    JSONException e) {      e.printStackTrace();    }  } else   if ("exit".equals(id)) {    finish();  }  return null;}  }
class C{  public static double nextUp(final double a){  return nextAfter(a,Double.POSITIVE_INFINITY);}  }
class C{  public void clearSavedState(){  baseObjId=0;}  }
class C{  public Item createDaughter(){  return addDaughter(null);}  }
class C{  public static String toHexString(byte... bytes){  char[] DIGITS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  char[] buffer=new char[bytes.length * 2];  for (int i=0, j=0; i < bytes.length; ++i) {    int u=bytes[i] < 0 ? bytes[i] + 256 : bytes[i];    buffer[j++]=DIGITS[u >>> 4];    buffer[j++]=DIGITS[u & 0xf];  }  return new String(buffer);}  }
class C{  public String[] upload_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 240) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  @Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){  Calendar calendar=getCalendar();  List<Period> periods=Lists.newArrayList();  dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1);  dateTimeUnit=calendar.minusDays(dateTimeUnit,357);  for (int i=0; i < 52; i++) {    periods.add(createPeriod(dateTimeUnit,calendar));    dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1);  }  return periods;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private static void maybeAddRunConfiguration(Project project,BlazeProjectData blazeProjectData,Label label){  final RunManager runManager=RunManager.getInstance(project);  for (  BlazeRunConfigurationFactory configurationFactory : BlazeRunConfigurationFactory.EP_NAME.getExtensions()) {    if (configurationFactory.handlesTarget(project,blazeProjectData,label)) {      final RunnerAndConfigurationSettings settings=configurationFactory.createForTarget(project,runManager,label);      runManager.addConfiguration(settings,false);      if (runManager.getSelectedConfiguration() == null) {        runManager.setSelectedConfiguration(settings);      }      break;    }  }}  }
class C{  public TIntHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  Rectangle embedCladogramRec(Node v,Edge e){  Rectangle bbox=null;  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    Rectangle subBox=embedCladogramRec(f.getOpposite(v),f);    if (bbox == null)     bbox=subBox; else     bbox.add(subBox);  }  Point location;  if (bbox == null) {    location=new Point(0,XSTEP * taxonLevel++);    bbox=new Rectangle(location.x,location.y,HLEAFBOX,YSTEP);    setLocation(v,location);  } else {    location=new Point(bbox.x - XSTEP,bbox.y + (bbox.height - YSTEP) / 2);    bbox.add(location);    setLocation(v,location);  }  int num;  NodeData nodeData=super.getNodeData(v);  if (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Summarized || (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Assigned && v.getOutDegree() == 0))   num=(nodeData == null ? 0 : nodeData.getCountSummarized()); else   if (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Assigned)   num=(nodeData == null ? 0 : nodeData.getCountAssigned()); else   num=0;  if (num > 0) {    int radius=(int)Math.max(1.0,nodeDrawer.getScaledSize(num));    this.setHeight(v,2 * radius);    this.setWidth(v,2 * radius);  } else {    this.setWidth(v,1);    this.setHeight(v,1);  }  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    Node w=f.getOpposite(v);    if (getLocation(w) != null && getLocation(v).getY() != getLocation(w).getY()) {      List<Point2D> list=new LinkedList<>();      list.add(new Point2D.Double(getLocation(v).getX(),getLocation(w).getY()));      setInternalPoints(f,list);    }  }  node2BoundingBox.set(v,(Rectangle)bbox.clone());  return bbox;}  }
class C{  public RollbackRecord(BasicLogRecord rec){  this.txNum=(Long)rec.nextVal(BIGINT).asJavaVal();  lsn=rec.getLSN();}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public static void runDBScript(File f,Module m) throws IOException, SQLException {  int count=0;  BufferedReader in=null;  Connection c=null;  Statement s=null;  try {    c=RDSHelper.getConnection();    if (c != null) {      in=new BufferedReader(new InputStreamReader(new FileInputStream(f),"utf-8"));      StringBuilder sb=new StringBuilder();      try {        String line=in.readLine();        while (line != null) {          line=line.trim();          if (!"".equals(line) && !line.startsWith("#")) {            sb.append(line).append("\r\n");            if (line.endsWith(";")) {              String sql=sb.toString().trim();              try {                if (!X.isEmpty(sql)) {                  s=c.createStatement();                  s.executeUpdate(sql);                  s.close();                  count++;                }              } catch (              Exception e) {                log.error(sb.toString(),e);                OpLog.error(m.getName(),"init",e.getMessage(),e,null,null);                m.setError(e.getMessage());              }              s=null;              sb=new StringBuilder();            }          }          line=in.readLine();        }        String sql=sb.toString().trim();        if (!"".equals(sql)) {          s=c.createStatement();          s.executeUpdate(sql);        }      } catch (      Exception e) {        if (log.isErrorEnabled()) {          log.error(sb.toString(),e);          OpLog.error(m.getName(),"init",e.getMessage(),e,null,null);        }        m.setError(e.getMessage());      }    } else {      if (log.isWarnEnabled()) {        log.warn("database not configured !");      }    }  } catch (  Exception e) {    log.error(e.getMessage(),e);    OpLog.error(m.getName(),"init",e.getMessage(),e,null,null);    m.setError(e.getMessage());  } finally {    if (in != null) {      in.close();    }    RDSHelper.close(s,c);  }  if (count > 0) {  }}  }
class C{  String nextConsumerId(){  return m_sessionID + "_cons_" + m_consumersC.increment();}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public JRangeSlider(BoundedRangeModel model,int orientation,int direction){  super.setFocusable(true);  this.model=model;  this.orientation=orientation;  this.direction=direction;  setForeground(Color.LIGHT_GRAY);  this.lstnr=createListener();  model.addChangeListener(lstnr);  addMouseListener(this);  addMouseMotionListener(this);  addKeyListener(this);}  }
class C{  public static String formatQuantity(long quantity){  return formatQuantity((double)quantity);}  }
class C{  public WidgetsGetCommentsQuery pageId(String value){  return unsafeParam("page_id",value);}  }
class C{  private void parseFile(String filename,Handler<AsyncResult<Void>> handler){  OpenOptions options=new OpenOptions().setRead(true).setWrite(false);  vertx.fileSystem().open(filename,options,null);}  }
class C{  public boolean isEmptyResult(){  return _results.getRowNumber() == 0;}  }
class C{  public Builder animate(Boolean animate){  this.animate=animate;  return this;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static void buildCustomerTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE Customer" + "( CustomerNumber CHAR(10) NOT NULL PRIMARY KEY, " + "  Name CHAR(25),"+ "  Address CHAR(25),"+ "  City CHAR(12),"+ "  State CHAR(2),"+ "  Zip CHAR(5) )");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('101', 'Downtown Cafe', '17 N. Main Street'," + " 'Asheville', 'NC', '55515')");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('102', 'Main Street Grocery'," + " '110 E. Main Street',"+ " 'Canton', 'NC', '55555')");    stmt.executeUpdate("INSERT INTO Customer VALUES" + "('103', 'The Coffee Place', '101 Center Plaza'," + " 'Waynesville', 'NC', '55516')");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (context.useNamespaces()) {    if (!XML11Char.isXML11ValidNCName(content)) {      throw new InvalidDatatypeValueException("IDInvalidWithNamespaces",new Object[]{content});    }  } else {    if (!XML11Char.isXML11ValidName(content)) {      throw new InvalidDatatypeValueException("IDInvalid",new Object[]{content});    }  }  if (context.isIdDeclared(content)) {    throw new InvalidDatatypeValueException("IDNotUnique",new Object[]{content});  }  context.addId(content);}  }
class C{  @SuppressWarnings("rawtypes") public void renderTreeString(Appendable writer,Map<String,Object> context,TreeStringRenderer treeStringRenderer) throws GeneralException {  Map<String,Object> parameters=UtilGenerics.checkMap(context.get("parameters"));  ModelNode node=nodeMap.get(rootNodeName);  String trailName=trailNameExdr.expandString(context);  String treeString=(String)context.get(trailName);  if (UtilValidate.isEmpty(treeString)) {    treeString=(String)parameters.get(trailName);  }  List<String> trail=null;  if (UtilValidate.isNotEmpty(treeString)) {    trail=StringUtil.split(treeString,"|");    if (UtilValidate.isEmpty(trail))     throw new RuntimeException("Tree 'trail' value is empty.");    context.put("rootEntityId",trail.get(0));    context.put(getDefaultPkName(context),trail.get(0));  } else {    trail=new LinkedList<String>();  }  context.put("targetNodeTrail",trail);  context.put("currentNodeTrail",new LinkedList());  try {    node.renderNodeString(writer,context,treeStringRenderer,0);  } catch (  IOException e2) {    String errMsg="Error rendering included label with name [" + getName() + "] : "+ e2.toString();    Debug.logError(e2,errMsg,module);    throw new RuntimeException(errMsg);  }}  }
class C{  public void toString(StringBuffer s){}  }
class C{  public boolean isFullyGrown(){  return level == 7;}  }
class C{  public static Pair<View,String>[] createSafeTransitionParticipants(@NonNull Activity activity,boolean includeStatusBar,@Nullable Pair... otherParticipants){  View decor=activity.getWindow().getDecorView();  View statusBar=null;  if (includeStatusBar) {    statusBar=decor.findViewById(android.R.id.statusBarBackground);  }  View navBar=decor.findViewById(android.R.id.navigationBarBackground);  List<Pair> participants=new ArrayList<>(3);  addNonNullViewToTransitionParticipants(statusBar,participants);  addNonNullViewToTransitionParticipants(navBar,participants);  if (otherParticipants != null && !(otherParticipants.length == 1 && otherParticipants[0] == null)) {    participants.addAll(Arrays.asList(otherParticipants));  }  return participants.toArray(new Pair[participants.size()]);}  }
class C{  private String resolvePathPrefix(){  String fullExecutablePath=this.getClass().getResource("").getPath();  String rootPath=Paths.get(".").toUri().normalize().getPath();  String extractedPath=fullExecutablePath.replace(rootPath,"");  int extractionEndIndex=extractedPath.indexOf("build/");  if (extractionEndIndex <= 0) {    return "";  }  return extractedPath.substring(0,extractionEndIndex);}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public MessagesGetChatQueryWithFields chatId(Integer value){  return unsafeParam("chat_id",value);}  }
class C{  public void remove(String key){  if (key == null || key.isEmpty())   return;  if (super.containsKey(key))   super.remove(key); else   if (this.containsKey(".")) {    String[] keys=key.split("\\.",2);    if (super.get(keys[0]) instanceof ConfigSection) {      ConfigSection section=(ConfigSection)super.get(keys[0]);      section.remove(keys[1]);    }  }}  }
class C{  @Deployment public void testActivitySignalEventsWithinProcess() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("signalProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  Execution executionWithSignalEvent=runtimeService.createExecutionQuery().activityId("shipOrder").singleResult();  taskService.complete(task.getId());  assertEquals(1L,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiSignalEvent);  ActivitiSignalEvent signalEvent=(ActivitiSignalEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_SIGNALED,signalEvent.getType());  assertEquals("shipOrder",signalEvent.getActivityId());  assertEquals(executionWithSignalEvent.getId(),signalEvent.getExecutionId());  assertEquals(executionWithSignalEvent.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertEquals("alert",signalEvent.getSignalName());  assertNull(signalEvent.getSignalData());}  }
class C{  public int insertFromScan(Scan s){  if (!super.insertIntoNextEmptySlot()) {    return 0;  }  for (  String fldName : sch.fields()) {    Constant val=s.getVal(fldName);    this.setVal(fldName,val);  }  if (s.next())   return 1; else   return -1;}  }
class C{  public static void deleteFile(final File file,final boolean deleteDir){  if (file.isDirectory()) {    for (    final File subFile : file.listFiles()) {      deleteFile(subFile,true);    }    if (deleteDir) {      file.delete();    }  } else {    file.delete();  }}  }
class C{  public boolean checkAllophoneSyntax(String allophoneString){  try {    splitIntoAllophoneList(allophoneString,false);    return true;  } catch (  IllegalArgumentException e) {    return false;  }}  }
class C{  private void updateAttributes2TaxaNames(String attribute,int propertyIndex,String taxname){  String property=this.attributes2Properties.get(attribute)[propertyIndex];  if (this.attribute2kind2taxaNames.containsKey(attribute)) {    Hashtable<String,ArrayList<String>> property2TaxaNames=this.attribute2kind2taxaNames.get(attribute);    if (property2TaxaNames.containsKey(property)) {      ArrayList<String> propertyList=property2TaxaNames.get(property);      propertyList.add(taxname);    } else {      ArrayList<String> l=new ArrayList<>();      l.add(taxname);      property2TaxaNames.put(property,l);    }  } else {    Hashtable<String,ArrayList<String>> property2TaxaNames=new Hashtable<>();    ArrayList<String> l=new ArrayList<>();    l.add(taxname);    property2TaxaNames.put(property,l);    this.attribute2kind2taxaNames.put(attribute,property2TaxaNames);  }}  }
class C{  private AttackGymResponse sendBlankAction() throws LoginFailedException, RemoteServerException {  AttackGymMessage message=AttackGymMessage.newBuilder().setGymId(gym.getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setBattleId(battleResponse.getBattleId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.ATTACK_GYM,message);  api.getRequestHandler().sendServerRequests(serverRequest);  try {    return AttackGymResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException();  }}  }
class C{  protected boolean onInterceptBarClick(){  return false;}  }
class C{  public WriteModifiers add(WriteModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  public static String loadCartFromOrder(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String orderId=request.getParameter("orderId");  String createAsNewOrder=request.getParameter("createAsNewOrder");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromOrder",UtilMisc.<String,Object>toMap("orderId",orderId,"createAsNewOrder",createAsNewOrder,"skipProductChecks",Boolean.TRUE,"userLogin",userLogin));    if (!ServiceUtil.isSuccess(outMap)) {      request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(outMap));      return "error";    }    cart=(ShoppingCart)outMap.get("shoppingCart");    cart.removeAdjustmentByType("SALES_TAX");    cart.removeAdjustmentByType("VAT_TAX");    cart.removeAdjustmentByType("VAT_PRICE_CORRECT");    cart.removeAdjustmentByType("PROMOTION_ADJUSTMENT");    String shipGroupSeqId=null;    long groupIndex=cart.getShipInfoSize();    List<GenericValue> orderAdjustmentList=new ArrayList<GenericValue>();    List<GenericValue> orderAdjustments=new ArrayList<GenericValue>();    orderAdjustments=cart.getAdjustments();    try {      orderAdjustmentList=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId).queryList();    } catch (    Exception e) {      Debug.logError(e,module);    }    for (long itr=1; itr <= groupIndex; itr++) {      shipGroupSeqId=UtilFormatOut.formatPaddedNumber(itr,5);      List<GenericValue> duplicateAdjustmentList=new ArrayList<GenericValue>();      for (      GenericValue adjustment : orderAdjustmentList) {        if ("PROMOTION_ADJUSTMENT".equals(adjustment.get("orderAdjustmentTypeId"))) {          cart.addAdjustment(adjustment);        }        if ("SALES_TAX".equals(adjustment.get("orderAdjustmentTypeId"))) {          if (adjustment.get("description") != null && ((String)adjustment.get("description")).startsWith("Tax adjustment due")) {            cart.addAdjustment(adjustment);          }          if ("Y".equals(adjustment.getString("isManual"))) {            cart.addAdjustment(adjustment);          }        }      }      for (      GenericValue orderAdjustment : orderAdjustments) {        if ("OrderAdjustment".equals(orderAdjustment.getEntityName())) {          if (("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) && orderAdjustment.get("orderId").equals(orderId) && orderAdjustment.get("shipGroupSeqId").equals(shipGroupSeqId)&& orderAdjustment.get("comments") == null) {            duplicateAdjustmentList.add(orderAdjustment);          }        }      }      orderAdjustments.removeAll(duplicateAdjustmentList);    }  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  cart.setAttribute("addpty","Y");  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  cart.setOrderId(null);  return "success";}  }
class C{  public void init(){  LocalBroadcastManager.getInstance(mContext).registerReceiver(mMessageReceiver,new IntentFilter(PrefsHelper.REGISTRATION_COMPLETE));  GoogleApiAvailability api=GoogleApiAvailability.getInstance();  int status=api.isGooglePlayServicesAvailable(mContext);  if (status == ConnectionResult.SUCCESS) {    mContext.startService(new Intent(mContext,SaveFCMIdService.class));  } else {    if (mFCMListener != null)     mFCMListener.onPlayServiceError();  }}  }
class C{  public static <T extends RealFieldElement<T>>T distance(final FieldVector3D<T> v1,final Vector3D v2){  return v1.distance(v2);}  }
class C{  GitReference resolveReference(String reference) throws RepoException {  return new GitReference(this,revParse(reference));}  }
class C{  public TShortArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  Version(String s){  ver=s;  ss=s.split("\\.");}  }
class C{  private boolean isDerivedByUnion(String ancestorNS,String ancestorName,XSTypeDefinition type){  if (type != null && ((XSSimpleTypeDefinition)type).getVariety() == VARIETY_UNION) {    XSObjectList memberTypes=((XSSimpleTypeDefinition)type).getMemberTypes();    for (int i=0; i < memberTypes.getLength(); i++) {      if (memberTypes.item(i) != null) {        if (isDerivedByRestriction(ancestorNS,ancestorName,(XSSimpleTypeDefinition)memberTypes.item(i))) {          return true;        }      }    }  }  return false;}  }
class C{  private List<TestItem> processLaunchTree(Map<List<String>,List<TestItem>> input,List<TestItem> processing){  Map<List<String>,List<TestItem>> c=new LinkedHashMap<>(input);  List<String> currentKey=Lists.newArrayList();  if (c.get(Lists.newArrayList()).size() == 0) {    return processing;  }  TestItem zero=c.get(Lists.newArrayList()).get(0);  currentKey.add(zero.getId());  if (!processing.contains(zero)) {    processing.add(zero);  }  while ((null != c.get(currentKey)) && (c.get(currentKey).size() > 0)) {    List<TestItem> value=c.get(currentKey);    TestItem first=value.get(0);    if (!first.hasChilds()) {      value.stream().forEach(null);      c.remove(currentKey);    } else {      if (!processing.contains(first))       processing.add(first);      currentKey.add(first.getId());    }  }  c.remove(currentKey);  String last=currentKey.get(currentKey.size() - 1);  currentKey.remove(last);  c.put(currentKey,c.get(currentKey).stream().filter(null).collect(Collectors.toList()));  return processLaunchTree(c,processing);}  }
class C{  public static double erf(double x1,double x2){  if (x1 > x2) {    return -erf(x2,x1);  }  return x1 < -X_CRIT ? x2 < 0.0 ? erfc(-x2) - erfc(-x1) : erf(x2) - erf(x1) : x2 > X_CRIT && x1 > 0.0 ? erfc(x1) - erfc(x2) : erf(x2) - erf(x1);}  }
class C{  public SparseFieldVector(Field<T> field,int dimension,int expectedSize){  this.field=field;  virtualSize=dimension;  entries=new OpenIntToFieldHashMap<T>(field,expectedSize);}  }
class C{  public S1Angle lng(){  return S1Angle.radians(lngRadians);}  }
class C{  public final String toString(){  if (this.objectData == null) {    this.setObjectData(STR_LINE);  }  return this.objectData;}  }
class C{  public void addWatch(FileWatcherUpdateInterface parent,Path path){  if (path != null) {    try {      WatchKey key=path.register(watchService,StandardWatchEventKinds.ENTRY_CREATE,StandardWatchEventKinds.ENTRY_DELETE,StandardWatchEventKinds.ENTRY_MODIFY);      watcherMap.put(key,parent);    } catch (    IOException e) {    }  }}  }
class C{  private void performCrop(Uri picUri,int destType,Intent cameraIntent){  try {    Intent cropIntent=new Intent("com.android.camera.action.CROP");    cropIntent.setDataAndType(picUri,"image/*");    cropIntent.putExtra("crop","true");    if (targetWidth > 0) {      cropIntent.putExtra("outputX",targetWidth);    }    if (targetHeight > 0) {      cropIntent.putExtra("outputY",targetHeight);    }    if (targetHeight > 0 && targetWidth > 0 && targetWidth == targetHeight) {      cropIntent.putExtra("aspectX",1);      cropIntent.putExtra("aspectY",1);    }    croppedUri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));    cropIntent.putExtra("output",croppedUri);    if (this.cordova != null) {      this.cordova.startActivityForResult((CordovaPlugin)this,cropIntent,CROP_CAMERA + destType);    }  } catch (  ActivityNotFoundException anfe) {    Log.e(LOG_TAG,"Crop operation not supported on this device");    try {      processResultFromCamera(destType,cameraIntent);    } catch (    IOException e) {      e.printStackTrace();      Log.e(LOG_TAG,"Unable to write to file");    }  }}  }
class C{  public boolean isPhantomClass(){  return Scene.v().getPhantomClasses().contains(this);}  }
class C{  public int createDeferredComment(String data){  int nodeIndex=createNode(Node.COMMENT_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeValue,data,chunk,index);  return nodeIndex;}  }
class C{  public UsersSearchQuery fromList(List<String> value){  return unsafeParam("from_list",value);}  }
class C{  public void destroy(){  BackgroundExecutor.cancelAll("",true);  UiThreadExecutor.cancelAll("");}  }
class C{  int observerCount(){  return observers.get().length;}  }
class C{  public static long duelAbility(final Pokemon p){  return duelAbility(p.getPokemonId(),p.getMove1(),p.getMove2(),p.getIndividualAttack(),p.getIndividualDefense(),p.getIndividualStamina());}  }
class C{  public String toString(){  return "ViterbiPath score " + score + " state "+ state;}  }
class C{  protected boolean matches(TokenKind kind){  if (currentToken() == kind) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  public AdsGetSuggestionsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  public void addEntry(String entry){  _classpathList.add(entry);}  }
class C{  public SM_QUEST_ACTION(int questId,int status,int step){  this.action=1;  this.questId=questId;  this.status=status;  this.step=step;}  }
class C{  @Override public void flush() throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.flush();  }}  }
class C{  public void removeFeature(int selectedRow){  if ((selectedRow < 0) || (selectedRow >= getRowCount())) {    return;  }  SimpleFeatureType featureType=userLayer.getInlineFeatureType();  String typeName=userLayer.getInlineFeatureType().getTypeName();  try {    SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);    SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(featureType);    ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();    SimpleFeatureIterator it=featureSource.getFeatures().features();    try {      int index=0;      while (it.hasNext()) {        SimpleFeature sf=it.next();        if (index != selectedRow) {          List<Object> attributeValueList=sf.getAttributes();          sfb.addAll(attributeValueList);          featureList.add(sfb.buildFeature(null));        }        index++;      }    }  finally {      it.close();    }    SimpleFeatureCollection collection=new ListFeatureCollection(featureType,featureList);    DataStore dataStore=DataUtilities.dataStore(collection);    featureCollection=collection;    cachedFeature=null;    lastRow=-1;    userLayer.setInlineFeatureDatastore(dataStore);  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);  }  this.fireTableStructureChanged();  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.inlineFeatureUpdated();  }}  }
class C{  private void appointRank(Player activePlayer,Player targetPlayer,int rankId){  if (legionRestrictions.canAppointRank(activePlayer,targetPlayer.getObjectId())) {    Legion legion=activePlayer.getLegion();    int msgId=0;    LegionRank rank=LegionRank.values()[rankId];    LegionMember legionMember=targetPlayer.getLegionMember();switch (rank) {case DEPUTY:      msgId=1400902;    break;case LEGIONARY:  msgId=1300268;break;case CENTURION:msgId=1300267;break;case VOLUNTEER:msgId=1400903;default :break;}legionMember.setRank(rank);PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_UPDATE_MEMBER(targetPlayer,msgId,targetPlayer.getName()));}}  }
class C{  void moveMethod(String m,int pos){  int i, j;  method_info mthd;  G.v().out.println("Moving " + m + " to position "+ pos+ " of "+ methods_count);  for (i=0; i < methods_count; i++) {    if (m.compareTo(methods[i].toName(constant_pool)) == 0) {      mthd=methods[i];      if (i > pos) {        for (j=i; j > pos && j > 0; j--)         methods[j]=methods[j - 1];        methods[pos]=mthd;      } else       if (i < pos) {        for (j=i; j < pos && j < methods_count - 1; j++)         methods[j]=methods[j + 1];        methods[pos]=mthd;      }      return;    }  }}  }
class C{  public static void assemble(String dest_dir,String fname,boolean number_lines){  File file=new File(fname);  File out_file=null;  ClassFile classFile=new ClassFile();  try {    InputStream inp=new BufferedInputStream(new FileInputStream(fname));    classFile.readJasmin(inp,file.getName(),number_lines);    inp.close();    if (classFile.errorCount() > 0) {      System.err.println(fname + ": Found " + classFile.errorCount()+ " errors");      return;    }    String class_path[]=(ScannerUtils.splitClassField(classFile.getClassName()));    String class_name=class_path[1];    if (class_path[0] != null) {      String class_dir=ScannerUtils.convertChars(class_path[0],"./",File.separatorChar);      if (dest_dir != null) {        dest_dir=dest_dir + File.separator + class_dir;      } else {        dest_dir=class_dir;      }    }    if (dest_dir == null) {      out_file=new File(class_name + ".class");    } else {      out_file=new File(dest_dir,class_name + ".class");      File dest=new File(dest_dir);      if (!dest.exists()) {        dest.mkdirs();      }      if (!dest.isDirectory()) {        throw new IOException("Cannot create directory");      }    }    FileOutputStream outp=new FileOutputStream(out_file);    classFile.write(outp);    outp.close();  } catch (  java.io.FileNotFoundException e) {    System.err.println(fname + ": file not found");    System.exit(-1);  }catch (  jasError e) {    classFile.report_error("JAS Error " + e.getMessage());    e.printStackTrace();  }catch (  Exception e) {    classFile.report_error(fname + ": exception - <" + e.getClass().getName()+ "> "+ e.getMessage()+ ".");    e.printStackTrace();  }  if (classFile.errorCount() > 0) {    System.err.println(fname + ": Found " + classFile.errorCount()+ " errors");  }}  }
class C{  public void commitMetrics(){  if (mCommitted)   return;  mCommitted=true;  assert mSplashScreenBackgroundColor != SPLASHSCREEN_COLOR_STATUS_MAX;  RecordHistogram.recordEnumeratedHistogram(HISTOGRAM_SPLASHSCREEN_BACKGROUNDCOLOR,mSplashScreenBackgroundColor,SPLASHSCREEN_COLOR_STATUS_MAX);  mSplashScreenBackgroundColor=SPLASHSCREEN_COLOR_STATUS_MAX;  assert mSplashScreenIconType != SPLASHSCREEN_ICON_TYPE_MAX;  RecordHistogram.recordEnumeratedHistogram(HISTOGRAM_SPLASHSCREEN_ICON_TYPE,mSplashScreenIconType,SPLASHSCREEN_ICON_TYPE_MAX);  if (mSplashScreenIconType == SPLASHSCREEN_ICON_TYPE_NONE) {    assert mSplashScreenIconSize == -1;  } else {    assert mSplashScreenIconSize >= 0;    RecordHistogram.recordCount1000Histogram(HISTOGRAM_SPLASHSCREEN_ICON_SIZE,mSplashScreenIconSize);  }  mSplashScreenIconType=SPLASHSCREEN_ICON_TYPE_MAX;  mSplashScreenIconSize=-1;  assert mSplashScreenThemeColor != SPLASHSCREEN_COLOR_STATUS_MAX;  RecordHistogram.recordEnumeratedHistogram(HISTOGRAM_SPLASHSCREEN_THEMECOLOR,mSplashScreenThemeColor,SPLASHSCREEN_COLOR_STATUS_MAX);  mSplashScreenThemeColor=SPLASHSCREEN_COLOR_STATUS_MAX;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSTATUS_SKILL_TURNED_OFF(String value0){  return new SM_SYSTEM_MESSAGE(1300055,value0);}  }
class C{  @Override public Object apply(SqlFunctionExecutionContext context){  Object arg=context.getArgument(0);  Integer decimalPlaces=0;  if (context.getNumberOfArguments() >= 2) {    decimalPlaces=(Integer)context.getArgument(1);  }  if (!(arg instanceof Number)) {    throw new RuntimeException("Round function - wrong argument type, should be type Number - : " + arg);  }  double factor=Math.pow(10,decimalPlaces);  if (arg instanceof Double) {    long res=Math.round((Double)arg * factor);    return res / factor;  } else   if (arg instanceof Float) {    long res=Math.round((Float)arg * factor);    return new Double(res / factor).floatValue();  } else {    return arg;  }}  }
class C{  @NotNull public static String listToString(@NotNull JListFixture list,int startRow,int endRow,int cellWidth){  String[] contents=list.contents();  StringBuilder sb=new StringBuilder();  String formatString="%-" + Integer.toString(cellWidth) + "s";  for (int row=Math.max(0,startRow); row < Math.min(endRow,contents.length); row++) {    String cell=contents[row];    if (cell.length() > cellWidth) {      cell=cell.substring(0,cellWidth - 3) + "...";    }    sb.append(String.format(formatString,cell));    sb.append('\n');  }  return sb.toString();}  }
class C{  public TakeModifiers(TakeModifiers modifiers1,TakeModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  public UsersGetNearbyQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private static boolean checkSingular(double[] diag,double min,boolean raise){  final int len=diag.length;  for (int i=0; i < len; i++) {    final double d=diag[i];    if (FastMath.abs(d) <= min) {      if (raise) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.SINGULAR_MATRIX);      } else {        return true;      }    }  }  return false;}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public static String toString(int m){  StringBuffer buffer=new StringBuffer();  if (isPublic(m))   buffer.append("public "); else   if (isPrivate(m))   buffer.append("private "); else   if (isProtected(m))   buffer.append("protected ");  if (isAbstract(m))   buffer.append("abstract ");  if (isStatic(m))   buffer.append("static ");  if (isFinal(m))   buffer.append("final ");  if (isSynchronized(m))   buffer.append("synchronized ");  if (isNative(m))   buffer.append("native ");  if (isTransient(m))   buffer.append("transient ");  if (isVolatile(m))   buffer.append("volatile ");  if (isStrictFP(m))   buffer.append("strictfp ");  if (isAnnotation(m))   buffer.append("annotation ");  if (isEnum(m))   buffer.append("enum ");  if (isInterface(m))   buffer.append("interface ");  return (buffer.toString()).trim();}  }
class C{  public void flushInsert(){  if (!useBulkInsert) {    for (int i=0; i < numberOfQueues; i++) {      if (!insertLists[i].isEmpty()) {        this.submitTaskToQueue(this.createInsertTask(insertLists[i]),i,processedInserts);        this.insertLists[i]=new ArrayList(batchSize);        this.insertsQueued++;      }    }  }}  }
class C{  public int conf(){  String s=soot.PhaseOptions.getString(options,"conf");  if (s.equalsIgnoreCase("ofcg"))   return conf_ofcg;  if (s.equalsIgnoreCase("cha"))   return conf_cha;  if (s.equalsIgnoreCase("cha-aot"))   return conf_cha_aot;  if (s.equalsIgnoreCase("ofcg-aot"))   return conf_ofcg_aot;  if (s.equalsIgnoreCase("cha-context-aot"))   return conf_cha_context_aot;  if (s.equalsIgnoreCase("ofcg-context-aot"))   return conf_ofcg_context_aot;  if (s.equalsIgnoreCase("cha-context"))   return conf_cha_context;  if (s.equalsIgnoreCase("ofcg-context"))   return conf_ofcg_context;  throw new RuntimeException("Invalid value " + s + " of phase option conf");}  }
class C{  public SlowedProgressBar(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  private boolean isRemovedFromClass(String columnName){  return !mTableModel.containsColumn(columnName);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  if (remoteServiceBrowser != null) {    String url=remoteServiceBrowser.getURL();    if (url.length() > 0) {      execute("detach remoteServer=" + url + ";");    }  }}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public FileSystemDropImporter(Path localizedFolderPath){  this.localizedFolderPath=localizedFolderPath;}  }
class C{  public static void startActionBaz(Context context,String param1,String param2){  Intent intent=new Intent(context,OnBootUpAlarmScheduler.class);  intent.setAction(ACTION_BAZ);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public ByteBuffer flushAndReleaseBuffer() throws IOException {  _lock.lock();  try {    _flushPending=true;    while (_bufferUseCount != 0) {      _flushReady.await();    }    _buffer.flip();    if (_buffer.limit() != 0 && _modified) {      if (_backingFile == null) {        _backingFile=Files.createTempFile("tablebuffer",".tmp");      }      _log.debug("Flushing buffer for index {} to {} ({}/{} bytes)",_startIndex,_backingFile,_buffer.limit(),_blockSize);      try (ByteChannel out=Files.newByteChannel(_backingFile,WRITE)){        out.write(_buffer);      }     } else {      _log.debug("Releasing unmodified buffer for index {}",_startIndex);    }    ByteBuffer oldBuffer=_buffer;    _buffer=null;    _loaded=false;    return oldBuffer;  } catch (  InterruptedException e) {    throw Throwables.propagate(e);  } finally {    _flushPending=false;    _flushComplete.signalAll();    _lock.unlock();  }}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigTTF copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigTTF(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  private boolean isFieldPackagePrivate(Element attribute){  Set<Modifier> modifiers=attribute.getModifiers();  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_NOTIFY_SELF(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1300857,value1,value0);}  }
class C{  public void clearSubHeaderCache(){  mSubHeaderCache.clear();}  }
class C{  public void logStatistics(){}  }
class C{  public Part readNextPart() throws IOException {  if (lastFilePart != null) {    lastFilePart.getInputStream().close();    lastFilePart=null;  }  Vector headers=new Vector();  String line=readLine();  if (line == null) {    return null;  } else   if (line.length() == 0) {    return null;  }  while (line != null && line.length() > 0) {    String nextLine=null;    boolean getNextLine=true;    while (getNextLine) {      nextLine=readLine();      if (nextLine != null && (nextLine.startsWith(" ") || nextLine.startsWith("\t"))) {        line=line + nextLine;      } else {        getNextLine=false;      }    }    headers.addElement(line);    line=nextLine;  }  if (line == null) {    return null;  }  String name=null;  String filename=null;  String origname=null;  String contentType="text/plain";  Enumeration enumeration=headers.elements();  while (enumeration.hasMoreElements()) {    String headerline=(String)enumeration.nextElement();    if (headerline.toLowerCase().startsWith("content-disposition:")) {      String[] dispInfo=extractDispositionInfo(headerline);      name=dispInfo[1];      filename=dispInfo[2];      origname=dispInfo[3];    } else     if (headerline.toLowerCase().startsWith("content-type:")) {      contentType=extractContentType(headerline);    }  }  if (filename == null) {    return new ParamPart(name,in,boundary,encoding);  } else {    if (filename.equals("")) {      filename=null;    }    lastFilePart=new FilePart(name,in,boundary,contentType,filename,origname);    return lastFilePart;  }}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){  Collection<T> newCollection;  try {    @SuppressWarnings("unchecked") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();    newCollection=cls.newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    throw new IllegalStateException(e);  }  for (  T element : mutableCollection) {    newCollection.add(Utils.makeImmutable(element));  }  return Collections.unmodifiableCollection(newCollection);}  }
class C{  public static final void shuffle(Object[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    Object t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public void stop(){  ActivityManager.stopThread();}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent,List<Integer> skipIds){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,skipIds);}  }
class C{  public void moveTo(float offsetX,float offsetY,boolean moveHandle){  if (swipeVertical) {    if (toCurrentScale(optimalPageWidth) < getWidth()) {      offsetX=getWidth() / 2 - toCurrentScale(optimalPageWidth) / 2;    } else {      if (offsetX > 0) {        offsetX=0;      } else       if (offsetX + toCurrentScale(optimalPageWidth) < getWidth()) {        offsetX=getWidth() - toCurrentScale(optimalPageWidth);      }    }    if (getPageCount() * toCurrentScale(optimalPageHeight) < getHeight()) {      offsetY=(getHeight() - getPageCount() * toCurrentScale(optimalPageHeight)) / 2;    } else {      if (offsetY > 0) {        offsetY=0;      } else       if (offsetY + toCurrentScale(getPageCount() * optimalPageHeight) < getHeight()) {        offsetY=-toCurrentScale(getPageCount() * optimalPageHeight) + getHeight();      }    }    if (offsetY < currentYOffset) {      scrollDir=ScrollDir.END;    } else     if (offsetY > currentYOffset) {      scrollDir=ScrollDir.START;    } else {      scrollDir=ScrollDir.NONE;    }  } else {    if (toCurrentScale(optimalPageHeight) < getHeight()) {      offsetY=getHeight() / 2 - toCurrentScale(optimalPageHeight) / 2;    } else {      if (offsetY > 0) {        offsetY=0;      } else       if (offsetY + toCurrentScale(optimalPageHeight) < getHeight()) {        offsetY=getHeight() - toCurrentScale(optimalPageHeight);      }    }    if (getPageCount() * toCurrentScale(optimalPageWidth) < getWidth()) {      offsetX=(getWidth() - getPageCount() * toCurrentScale(optimalPageWidth)) / 2;    } else {      if (offsetX > 0) {        offsetX=0;      } else       if (offsetX + toCurrentScale(getPageCount() * optimalPageWidth) < getWidth()) {        offsetX=-toCurrentScale(getPageCount() * optimalPageWidth) + getWidth();      }    }    if (offsetX < currentXOffset) {      scrollDir=ScrollDir.END;    } else     if (offsetX > currentXOffset) {      scrollDir=ScrollDir.START;    } else {      scrollDir=ScrollDir.NONE;    }  }  currentXOffset=offsetX;  currentYOffset=offsetY;  float positionOffset=getPositionOffset();  if (moveHandle && scrollHandle != null && !documentFitsView()) {    scrollHandle.setScroll(positionOffset);  }  if (onPageScrollListener != null) {    onPageScrollListener.onPageScrolled(getCurrentPage(),positionOffset);  }  redraw();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public NumberRangeModel(int lo,int hi,int min,int max){  this(new Integer(lo),new Integer(hi),new Integer(min),new Integer(hi));}  }
class C{  public int addRootRow(){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public PriorityQueue priorityQueue(int concurrency){  return new PriorityQueue(this.executor_,concurrency);}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public String apply(Integer taxonId){  final String taxonName=TaxonomyData.getName2IdMap().get(taxonId);  final Hashtable<String,String> attributes2Properties=AttributeData.getInstance().getTaxaName2Attributes2Properties().get(taxonName);  if (attributes2Properties != null) {    StringBuilder buffer=new StringBuilder();    buffer.append("---- Attributes: ----\n");    buffer.append("Name:       \t").append(taxonName).append("\n");    buffer.append("TaxId:      \t").append(taxonId).append("\n");    buffer.append("Kingdom:    \t").append(attributes2Properties.get(AttributeData.attributeList[11])).append("\n");    buffer.append("Group:      \t").append(attributes2Properties.get(AttributeData.attributeList[10])).append("\n");    buffer.append("Genome size:\t").append(attributes2Properties.get(AttributeData.attributeList[8])).append(" MB\n");    buffer.append("GC Content: \t").append(attributes2Properties.get(AttributeData.attributeList[9])).append(" %\n");    int i=0;    for (    String attribute : AttributeData.attributeList) {      i++;      if (i < 8)       buffer.append(attribute).append(":\t").append(attributes2Properties.get(attribute)).append("\n");    }    final Node v=dir.getMainViewer().getTaxId2Node(taxonId);    if (v != null) {      buffer.append("Reads assigned:\t").append(((NodeData)v.getData()).getCountAssigned()).append("\n");      buffer.append("Summarized:    \t").append(((NodeData)v.getData()).getCountSummarized()).append("\n");    }    return buffer.toString();  }  return "Unknown\n";}  }
class C{  public LeadsStartQuery start(UserActor actor,int leadId,String secret){  return new LeadsStartQuery(getClient(),actor,leadId,secret);}  }
class C{  public static String createStopList(FileSystem fs,boolean hdfs) throws IOException, PIRException {  logger.info("StopList file being created");  List<String> elements=Arrays.asList("something.else.on.stoplist","3.3.3.132");  if (hdfs) {    String pirStopListFile=SystemConfiguration.getProperty(DistributedTestDriver.PIR_STOPLIST_FILE);    if (pirStopListFile == null) {      throw new PIRException("HDFS stop list file configuration name is required.");    }    HDFS.writeFile(elements,fs,pirStopListFile,true);    logger.info("pirStopListFile file successfully created on hdfs!");  }  String prefix=SystemConfiguration.getProperty("pir.stopListFile");  if (prefix == null) {    throw new PIRException("Local stop list file configuration name is required.");  }  return TestUtils.writeToTmpFile(elements,prefix,null);}  }
class C{  public synchronized byte[] externalize(){  ByteArrayOutputStream outBStream=new ByteArrayOutputStream();  DataOutputStream outStream=new DataOutputStream(outBStream);  try {    outStream.writeByte(this.op);    outStream.writeByte(this.htype);    outStream.writeByte(this.hlen);    outStream.writeByte(this.hops);    outStream.writeInt(this.xid);    outStream.writeShort(this.secs);    outStream.writeShort(this.flags);    outStream.write(this.ciaddr,0,4);    outStream.write(this.yiaddr,0,4);    outStream.write(this.siaddr,0,4);    outStream.write(this.giaddr,0,4);    outStream.write(this.chaddr,0,16);    outStream.write(this.sname,0,64);    outStream.write(this.file,0,128);    byte[] options=new byte[312];    if (this.optionsList == null) {      initialize();    }    options=this.optionsList.externalize();    outStream.write(options,0,312);  } catch (  IOException e) {    System.err.println(e);  }  byte data[]=outBStream.toByteArray();  return data;}  }
class C{  static public char[] encode(byte[] data){  char[] out=new char[((data.length + 2) / 3) * 4];  for (int i=0, index=0; i < data.length; i+=3, index+=4) {    boolean quad=false;    boolean trip=false;    int val=(0xFF & data[i]);    val<<=8;    if ((i + 1) < data.length) {      val|=(0xFF & data[i + 1]);      trip=true;    }    val<<=8;    if ((i + 2) < data.length) {      val|=(0xFF & data[i + 2]);      quad=true;    }    out[index + 3]=alphabet[(quad ? (val & 0x3F) : 64)];    val>>=6;    out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];    val>>=6;    out[index + 1]=alphabet[val & 0x3F];    val>>=6;    out[index + 0]=alphabet[val & 0x3F];  }  return out;}  }
class C{  @Nullable public static Label createLabelFromString(@Nullable BuildFile file,@Nullable String labelString){  if (labelString == null) {    return null;  }  int colonIndex=labelString.indexOf(':');  if (labelString.startsWith("//")) {    if (colonIndex == -1) {      labelString+=":" + PathUtil.getFileName(labelString);    }    return Label.createIfValid(labelString);  }  WorkspacePath packagePath=file != null ? file.getPackageWorkspacePath() : null;  if (packagePath == null) {    return null;  }  String localPath=colonIndex == -1 ? labelString : labelString.substring(1);  return Label.createIfValid("//" + packagePath.relativePath() + ":"+ localPath);}  }
class C{  public static String loadCartFromQuote(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String quoteId=request.getParameter("quoteId");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromQuote",UtilMisc.<String,Object>toMap("quoteId",quoteId,"applyQuoteAdjustments","true","userLogin",userLogin));    if (!ServiceUtil.isSuccess(outMap)) {      request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(outMap));      return "error";    }    cart=(ShoppingCart)outMap.get("shoppingCart");  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  cart.setDefaultCheckoutOptions(dispatcher);  cart.setReadOnlyCart(true);  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  return "success";}  }
class C{  public HumanTime h(){  return h(1);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", cascadeId=").append(cascadeId);  sb.append(", rootKey=").append(rootKey);  sb.append(", rootName=").append(rootName);  sb.append(", name=").append(name);  sb.append(", hotkey=").append(hotkey);  sb.append(", parentId=").append(parentId);  sb.append(", isLeaf=").append(isLeaf);  sb.append(", isAutoExpand=").append(isAutoExpand);  sb.append(", iconName=").append(iconName);  sb.append(", sortNo=").append(sortNo);  sb.append("]");  return sb.toString();}  }
class C{  public static <R>Observable<R> ifThen(BooleanSupplier condition,ObservableSource<? extends R> then,Observable<? extends R> orElse){  ObjectHelper.requireNonNull(condition,"condition is null");  ObjectHelper.requireNonNull(then,"then is null");  ObjectHelper.requireNonNull(orElse,"orElse is null");  return RxJavaPlugins.onAssembly(new ObservableIfThen<R>(condition,then,orElse));}  }
class C{  public ScatterDataSet(List<Entry> yVals,String label){  super(yVals,label);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static String parseHumpName(String str,boolean isFirstUpper,boolean isHump){  str=str.toLowerCase();  if (isHump && str.indexOf("_") != -1) {    boolean isUpper=false;    StringBuilder builder=new StringBuilder();    for (    char c : str.toCharArray()) {      if (isUpper) {        c=Character.toUpperCase(c);        isUpper=false;      }      if (c == '_') {        isUpper=true;        continue;      }      builder.append(c);    }    str=builder.toString();  }  if (isFirstUpper) {    return upperFirst(str);  }  return lowerFirst(str);}  }
class C{  public TypeRef makeOptional(){  return interner.intern(new TypeRef(kind,Cardinality.OPTIONAL,messageType,enumType));}  }
class C{  public void user_init() throws java.lang.Exception {  action_obj.scanner=scanner;  action_obj.classFile=classFile;}  }
class C{  public void calcWelzl(FloatBuffer points){  if (center == null) {    center=new Vector3f();  }  FloatBuffer buf=BufferUtils.createFloatBuffer(points.limit());  points.rewind();  buf.put(points);  buf.flip();  recurseMini(buf,buf.limit() / 3,0,0);}  }
class C{  protected void validateNamespaceOwnershipWithBundles(String property,String cluster,String namespace,boolean authoritative,boolean readOnly,BundlesData bundleData){  NamespaceName fqnn=new NamespaceName(property,cluster,namespace);  try {    NamespaceBundles bundles=pulsar().getNamespaceService().getNamespaceBundleFactory().getBundles(fqnn,bundleData);    for (    NamespaceBundle bundle : bundles.getBundles()) {      validateServiceUnitOwnership(bundle,authoritative,readOnly);    }  } catch (  WebApplicationException wae) {    throw wae;  }catch (  Exception oe) {    log.debug(String.format("Failed to find owner for namespace %s",fqnn),oe);    throw new RestException(oe);  }}  }
class C{  public void addMP(int delta){  addMP(delta,false);}  }
class C{  public void removeHeader(Header header){  if (header == null) {    return;  }  headers.remove(header);}  }
class C{  @TargetApi(Build.VERSION_CODES.FROYO) public static void createSyncAccount(Context context){  boolean newAccount;  boolean setupComplete=PreferenceManager.getDefaultSharedPreferences(context).getBoolean(PREF_SETUP_COMPLETE,false);  Account account=AccountUtils.getAccount();  newAccount=AccountUtils.addAccount(context,account,SYNC_FREQUENCY);  if (newAccount || !setupComplete) {    triggerRefresh();    PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(PREF_SETUP_COMPLETE,true).commit();  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showBiPlot=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.getPcoaTab().setShowBiPlot(show);  try {    viewer.updateView(IDirector.ENABLE_STATE);  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public void updateEntryReferences(CacheManager cacheManager,IEntryHolder eh,IEntryCacheInfo pEntry,IEntryData oldEntryData){  if (!hasIndexes())   return;  if (pEntry.getEntryHolder(cacheManager).hasShadow()) {    updateEntryReferencesUnderXtn(cacheManager,pEntry,oldEntryData);    return;  }  boolean insertedNewValues=false;  int refpos=1;  ArrayList<IObjectInfo<IEntryCacheInfo>> deletedBackRefs=pEntry.getBackRefs();  if (deletedBackRefs != null) {    pEntry.setBackRefs(new ArrayList<IObjectInfo<IEntryCacheInfo>>(deletedBackRefs.size()));    pEntry.getBackRefs().add(deletedBackRefs.get(0));  }  IEntryData entryData=pEntry.getEntryHolder(cacheManager).getEntryData();  int numOfFieldsDone=0;  ArrayList<Object> originalUniques=null;  try {    for (    TypeDataIndex<Object> index : _indexes) {      if (index.disableIndexUsageForOperation(this,pEntry.getLatestIndexCreationNumber()))       continue;      Object fieldValue=index.getIndexValue(entryData);      Object oldFieldValue=index.getIndexValue(oldEntryData);      if (index.isUniqueIndex() && getNumUniqueIndexes() > 1) {        int originalpos=refpos;        refpos=index.updateIndexValue(this,pEntry.getEntryHolder(cacheManager),pEntry,oldFieldValue,fieldValue,deletedBackRefs,refpos,UpdateIndexModes.INSERT_NONEQUALS);        if (deletedBackRefs != null) {          if (deletedBackRefs.get(originalpos) != null) {            if (originalUniques == null)             originalUniques=new ArrayList<Object>(getNumUniqueIndexes() * 2);            originalUniques.add(index);            originalUniques.add(originalpos);          }        } else {          if (!TypeData.objectsEquality(oldFieldValue,fieldValue)) {            if (originalUniques == null)             originalUniques=new ArrayList<Object>(getNumUniqueIndexes() * 2);            originalUniques.add(index);            originalUniques.add(-1);          }        }      } else       refpos=index.updateIndexValue(this,pEntry.getEntryHolder(cacheManager),pEntry,oldFieldValue,fieldValue,deletedBackRefs,refpos,UpdateIndexModes.REPLACE_NONEQUALS);      numOfFieldsDone++;    }    for (    QueryExtensionIndexManagerWrapper queryExtensionIndexManager : getForeignQueriesHandlers()) {      try {        queryExtensionIndexManager.replaceEntry(new SpaceServerEntryImpl(pEntry,cacheManager));      } catch (      Exception ex) {        throw new RuntimeException("Remove entry to foreign index failed",ex);      }    }    insertedNewValues=true;    if (originalUniques != null) {      for (int pos=0; pos < originalUniques.size(); pos++) {        TypeDataIndex index=(TypeDataIndex)originalUniques.get(pos++);        Object fieldValue=index.getIndexValue(entryData);        Object oldFieldValue=index.getIndexValue(oldEntryData);        refpos=(Integer)originalUniques.get(pos);        index.updateIndexValue(this,pEntry.getEntryHolder(cacheManager),pEntry,oldFieldValue,fieldValue,deletedBackRefs,refpos,UpdateIndexModes.REMOVE_NONEQUALS);      }    }  } catch (  RuntimeException ex) {    try {      restoreReferencesAfterUpdateFailure(cacheManager,eh,pEntry,oldEntryData,deletedBackRefs,numOfFieldsDone,insertedNewValues,originalUniques);    } catch (    Exception ex1) {      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,"failed to restore entry after update failure ",ex1);    }    throw ex;  }}  }
class C{  public AdsCreateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,String name){  super(client,"ads.createTargetGroup",CreateTargetGroupResponse.class);  accessToken(actor.getAccessToken());  accountId(accountId);  name(name);}  }
class C{  public static boolean onKeyDown(KeyEvent event,ChromeActivity activity,boolean isCurrentTabVisible,boolean tabSwitchingEnabled){  int keyCode=event.getKeyCode();  if (event.getRepeatCount() != 0 || KeyEvent.isModifierKey(keyCode))   return false;  if (KeyEvent.isGamepadButton(keyCode)) {    if (isGamepadAPIActive(activity))     return false;  } else   if (!event.isCtrlPressed() && !event.isAltPressed() && keyCode != KeyEvent.KEYCODE_F3 && keyCode != KeyEvent.KEYCODE_F5 && keyCode != KeyEvent.KEYCODE_FORWARD) {    return false;  }  TabModel curModel=activity.getCurrentTabModel();  int count=curModel.getCount();  int metaState=getMetaState(event);  int keyCodeAndMeta=keyCode | metaState;switch (keyCodeAndMeta) {case CTRL | KeyEvent.KEYCODE_T:    activity.onMenuOrKeyboardAction(curModel.isIncognito() ? R.id.new_incognito_tab_menu_id : R.id.new_tab_menu_id,false);  return true;case CTRL | KeyEvent.KEYCODE_N:activity.onMenuOrKeyboardAction(R.id.new_tab_menu_id,false);return true;case CTRL | SHIFT | KeyEvent.KEYCODE_N:activity.onMenuOrKeyboardAction(R.id.new_incognito_tab_menu_id,false);return true;case ALT | KeyEvent.KEYCODE_F:case KeyEvent.KEYCODE_BUTTON_Y:activity.onMenuOrKeyboardAction(R.id.show_menu,false);return true;}if (isCurrentTabVisible) {if (tabSwitchingEnabled && (metaState == CTRL || metaState == ALT)) {int numCode=keyCode - KeyEvent.KEYCODE_0;if (numCode > 0 && numCode <= Math.min(count,8)) {TabModelUtils.setIndex(curModel,numCode - 1);return true;} else if (numCode == 9 && count != 0) {TabModelUtils.setIndex(curModel,count - 1);return true;}}switch (keyCodeAndMeta) {case CTRL | KeyEvent.KEYCODE_TAB:case CTRL | KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_BUTTON_R1:if (tabSwitchingEnabled && count > 1) {TabModelUtils.setIndex(curModel,(curModel.index() + 1) % count);}return true;case CTRL | SHIFT | KeyEvent.KEYCODE_TAB:case CTRL | KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_BUTTON_L1:if (tabSwitchingEnabled && count > 1) {TabModelUtils.setIndex(curModel,(curModel.index() + count - 1) % count);}return true;case CTRL | KeyEvent.KEYCODE_W:case CTRL | KeyEvent.KEYCODE_F4:case KeyEvent.KEYCODE_BUTTON_B:TabModelUtils.closeCurrentTab(curModel);return true;case CTRL | KeyEvent.KEYCODE_F:case CTRL | KeyEvent.KEYCODE_G:case CTRL | SHIFT | KeyEvent.KEYCODE_G:case KeyEvent.KEYCODE_F3:case SHIFT | KeyEvent.KEYCODE_F3:activity.onMenuOrKeyboardAction(R.id.find_in_page_id,false);return true;case CTRL | KeyEvent.KEYCODE_L:case ALT | KeyEvent.KEYCODE_D:case KeyEvent.KEYCODE_BUTTON_X:activity.onMenuOrKeyboardAction(R.id.focus_url_bar,false);return true;case CTRL | SHIFT | KeyEvent.KEYCODE_B:activity.onMenuOrKeyboardAction(R.id.all_bookmarks_menu_id,false);return true;case KeyEvent.KEYCODE_BOOKMARK:case CTRL | KeyEvent.KEYCODE_D:activity.onMenuOrKeyboardAction(R.id.bookmark_this_page_id,false);return true;case CTRL | KeyEvent.KEYCODE_H:activity.onMenuOrKeyboardAction(R.id.open_history_menu_id,false);return true;case CTRL | KeyEvent.KEYCODE_P:activity.onMenuOrKeyboardAction(R.id.print_id,false);return true;case CTRL | KeyEvent.KEYCODE_PLUS:case CTRL | KeyEvent.KEYCODE_EQUALS:case CTRL | SHIFT | KeyEvent.KEYCODE_PLUS:case CTRL | SHIFT | KeyEvent.KEYCODE_EQUALS:case KeyEvent.KEYCODE_ZOOM_IN:ContentViewCore cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomIn();return true;case CTRL | KeyEvent.KEYCODE_MINUS:case KeyEvent.KEYCODE_ZOOM_OUT:cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomOut();return true;case CTRL | KeyEvent.KEYCODE_0:cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomReset();return true;case SHIFT | CTRL | KeyEvent.KEYCODE_R:case CTRL | KeyEvent.KEYCODE_R:case SHIFT | KeyEvent.KEYCODE_F5:case KeyEvent.KEYCODE_F5:Tab tab=activity.getActivityTab();if (tab != null) {if ((keyCodeAndMeta & SHIFT) == SHIFT) {tab.reloadIgnoringCache();} else {tab.reload();}if (activity.getToolbarManager() != null && tab.getWebContents() != null && tab.getWebContents().focusLocationBarByDefault()) {activity.getToolbarManager().revertLocationBarChanges();} else {tab.requestFocus();}}return true;case ALT | KeyEvent.KEYCODE_DPAD_LEFT:tab=activity.getActivityTab();if (tab != null && tab.canGoBack()) tab.goBack();return true;case ALT | KeyEvent.KEYCODE_DPAD_RIGHT:case KeyEvent.KEYCODE_FORWARD:case KeyEvent.KEYCODE_BUTTON_START:tab=activity.getActivityTab();if (tab != null && tab.canGoForward()) tab.goForward();return true;case CTRL | SHIFT | KeyEvent.KEYCODE_SLASH:activity.onMenuOrKeyboardAction(R.id.help_id,false);return true;}}return false;}  }
class C{  public static StorableTimeFence inMondayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(MONDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  private void filterOutDuplicates(int code,SegmentNode p){  boolean flag;  SegmentNode q_head, q_tail;  SegmentNode pold;  int countAll;  for (int i=code; i > -1; --i) {    pold=header[i];    q_head=null;    q_tail=null;    countAll=0;    while (pold != null) {      flag=false;switch (i) {case GeometricManager.ONE_TO_ONE:        if (code == GeometricManager.MANY_TO_MANY) {          if (pold.I1 >= p.I1 && pold.I2 >= p.I2) {            if ((pold.I1 + pold.L) <= (p.I1 + p.L) && (pold.I2 + pold.L) <= (p.I2 + ((RectangleNode)p).L_prime))             flag=true;          }        } else {          if ((p.I2 - p.I1) == (pold.I2 - pold.I1)) {            if (pold.I1 >= p.I1 && (pold.I1 + pold.L) <= (p.I1 + p.L))             flag=true;          }        }      break;case GeometricManager.MANY_TO_MANY:    if (pold.I1 >= p.I1 && pold.I2 >= p.I2) {      if ((pold.I1 + pold.L) <= (p.I1 + p.L) && (pold.I2 + ((RectangleNode)pold).L_prime) <= (p.I2 + ((RectangleNode)p).L_prime))       flag=true;    }  break;}if (flag == false) {if (q_head == null) q_head=pold; else q_tail.next=pold;q_tail=pold;++countAll;pold=pold.next;} else {if (i == GeometricManager.ONE_TO_ONE) pold=reclaimSegmentNode(pold); else pold=reclaimRectangleNode(pold);}}if (q_tail != null) q_tail.next=null;header[i]=q_head;size[i]=countAll;}}  }
class C{  public UsersSearchQuery university(Integer value){  return unsafeParam("university",value);}  }
class C{  @Override public void characters(char ch[],int start,int length) throws SAXException {  return;}  }
class C{  protected void include(boolean include){  this.include=include;}  }
class C{  @Override protected boolean scanAttributeValue(XMLString value,XMLString nonNormalizedValue,String atName,boolean checkEntities,String eleName) throws IOException, XNIException {  int quote=fEntityScanner.peekChar();  if (quote != '\'' && quote != '"') {    reportFatalError("OpenQuoteExpected",new Object[]{eleName,atName});  }  fEntityScanner.scanChar();  int entityDepth=fEntityDepth;  int c=fEntityScanner.scanLiteral(quote,value);  if (DEBUG_ATTR_NORMALIZATION) {    System.out.println("** scanLiteral -> \"" + value.toString() + "\"");  }  int fromIndex=0;  if (c == quote && (fromIndex=isUnchangedByNormalization(value)) == -1) {    nonNormalizedValue.setValues(value);    int cquote=fEntityScanner.scanChar();    if (cquote != quote) {      reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});    }    return true;  }  fStringBuffer2.clear();  fStringBuffer2.append(value);  normalizeWhitespace(value,fromIndex);  if (DEBUG_ATTR_NORMALIZATION) {    System.out.println("** normalizeWhitespace -> \"" + value.toString() + "\"");  }  if (c != quote) {    fScanningAttribute=true;    fStringBuffer.clear();    do {      fStringBuffer.append(value);      if (DEBUG_ATTR_NORMALIZATION) {        System.out.println("** value2: \"" + fStringBuffer.toString() + "\"");      }      if (c == '&') {        fEntityScanner.skipChar('&');        if (entityDepth == fEntityDepth) {          fStringBuffer2.append('&');        }        if (fEntityScanner.skipChar('#')) {          if (entityDepth == fEntityDepth) {            fStringBuffer2.append('#');          }          int ch=scanCharReferenceValue(fStringBuffer,fStringBuffer2);          if (ch != -1) {            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value3: \"" + fStringBuffer.toString() + "\"");            }          }        } else {          String entityName=fEntityScanner.scanName();          if (entityName == null) {            reportFatalError("NameRequiredInReference",null);          } else           if (entityDepth == fEntityDepth) {            fStringBuffer2.append(entityName);          }          if (!fEntityScanner.skipChar(';')) {            reportFatalError("SemicolonRequiredInReference",new Object[]{entityName});          } else           if (entityDepth == fEntityDepth) {            fStringBuffer2.append(';');          }          if (entityName == fAmpSymbol) {            fStringBuffer.append('&');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value5: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fAposSymbol) {            fStringBuffer.append('\'');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value7: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fLtSymbol) {            fStringBuffer.append('<');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** value9: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fGtSymbol) {            fStringBuffer.append('>');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** valueB: \"" + fStringBuffer.toString() + "\"");            }          } else           if (entityName == fQuotSymbol) {            fStringBuffer.append('"');            if (DEBUG_ATTR_NORMALIZATION) {              System.out.println("** valueD: \"" + fStringBuffer.toString() + "\"");            }          } else {            if (fEntityManager.isExternalEntity(entityName)) {              reportFatalError("ReferenceToExternalEntity",new Object[]{entityName});            } else {              if (!fEntityManager.isDeclaredEntity(entityName)) {                if (checkEntities) {                  if (fValidation) {                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"EntityNotDeclared",new Object[]{entityName},XMLErrorReporter.SEVERITY_ERROR);                  }                } else {                  reportFatalError("EntityNotDeclared",new Object[]{entityName});                }              }              fEntityManager.startEntity(entityName,true);            }          }        }      } else       if (c == '<') {        reportFatalError("LessthanInAttValue",new Object[]{eleName,atName});        fEntityScanner.scanChar();        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }      } else       if (c == '%' || c == ']') {        fEntityScanner.scanChar();        fStringBuffer.append((char)c);        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }        if (DEBUG_ATTR_NORMALIZATION) {          System.out.println("** valueF: \"" + fStringBuffer.toString() + "\"");        }      } else       if (c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {        fEntityScanner.scanChar();        fStringBuffer.append(' ');        if (entityDepth == fEntityDepth) {          fStringBuffer2.append('\n');        }      } else       if (c != -1 && XMLChar.isHighSurrogate(c)) {        fStringBuffer3.clear();        if (scanSurrogates(fStringBuffer3)) {          fStringBuffer.append(fStringBuffer3);          if (entityDepth == fEntityDepth) {            fStringBuffer2.append(fStringBuffer3);          }          if (DEBUG_ATTR_NORMALIZATION) {            System.out.println("** valueI: \"" + fStringBuffer.toString() + "\"");          }        }      } else       if (c != -1 && isInvalidLiteral(c)) {        reportFatalError("InvalidCharInAttValue",new Object[]{eleName,atName,Integer.toString(c,16)});        fEntityScanner.scanChar();        if (entityDepth == fEntityDepth) {          fStringBuffer2.append((char)c);        }      }      c=fEntityScanner.scanLiteral(quote,value);      if (entityDepth == fEntityDepth) {        fStringBuffer2.append(value);      }      normalizeWhitespace(value);    } while (c != quote || entityDepth != fEntityDepth);    fStringBuffer.append(value);    if (DEBUG_ATTR_NORMALIZATION) {      System.out.println("** valueN: \"" + fStringBuffer.toString() + "\"");    }    value.setValues(fStringBuffer);    fScanningAttribute=false;  }  nonNormalizedValue.setValues(fStringBuffer2);  int cquote=fEntityScanner.scanChar();  if (cquote != quote) {    reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});  }  return nonNormalizedValue.equals(value.ch,value.offset,value.length);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){  Element element=document.createElement("array");  element.setAttribute("name",name);  for (  String value : values) {    Element valueElement=document.createElement("item");    valueElement.appendChild(document.createTextNode(value));    element.appendChild(valueElement);  }  resourceElement.appendChild(element);  return this;}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,7,7,8,9,10,Integer.MAX_VALUE};}  }
class C{  @Override protected void onPreExecute(){  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  ShimpleBody(SootMethod m,Map options){  super(m);  this.options=new ShimpleOptions(options);  setSSA(true);  isExtendedSSA=this.options.extended();  unitChain=new SPatchingChain(this,new HashChain());  sbb=new ShimpleBodyBuilder(this);}  }
class C{  public final boolean canSetBoolean(String field){  return m_table.canSetBoolean(field);}  }
class C{  public static int exportName2Counts(String format,ViewerBase cViewer,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);    final String shortName=(cViewer.getClassName().toLowerCase().equals("taxonomy") ? "Taxon" : cViewer.getClassName());    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final List<String> names=cViewer.getDocument().getSampleNames();      if (names.size() > 1) {        w.write("#Datasets");        for (        String name : names) {          if (name == null)           System.err.println("Internal error, sample name is null"); else {            if (separator == ',')             name=name.replaceAll(",","_");          }          w.write(separator + " " + name);        }        w.write("\n");      }      final NodeSet selected=cViewer.getSelectedNodes();      progressListener.setSubtask(shortName + " to counts");      progressListener.setMaximum(selected.size());      progressListener.setProgress(0);      Set<Integer> seen=new HashSet<>();      for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {        Integer id=(Integer)v.getInfo();        if (id != null && !seen.contains(id)) {          seen.add(id);          final NodeData data=cViewer.getNodeData(v);          final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());          final String name=getLabelSource(shortName,classification,format,v);          if (name != null) {            if (counts.length == names.size()) {              w.write(name);              for (              int a : counts)               w.write(separator + " " + a);              w.write("\n");              totalLines++;            } else             System.err.println("Skipped " + name + ", number of values: "+ counts.length);          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public boolean show_lib_meths(){  return soot.PhaseOptions.getBoolean(options,"show-lib-meths");}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public Utf8_Enumeration(byte b[]){  bytes=b;  curindex=(short)2;  length=(short)(((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff) + 2);}  }
class C{  static <T>AnyVal<Object> anyHeadTail(AnyVal<T> head,ConsList<T> tail){  return new AnyConsImpl(null,head,tail,null);}  }
class C{  public static void printLogs(){  System.out.println(getLogString());}  }
class C{  public boolean hasValue(){  return observers.get() == TERMINATED && value != null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200431,skilltarget,skillname);}  }
class C{  String brewJava(){  StringBuilder java=new StringBuilder();  java.append("package ").append(classPackage).append(";").append("\n");  java.append("\n");  java.append("import android.os.Bundle;").append("\n");  java.append("import android.os.Parcelable;").append("\n");  java.append("import java.io.Serializable;").append("\n");  java.append("import java.util.ArrayList;").append("\n");  java.append("\n");  java.append("import com.thirtydegreesray.dataautoaccess.DataAutoAccess;").append("\n");  java.append("import com.thirtydegreesray.dataautoaccess.DataAutoAccess.DataAccessor;").append("\n");  java.append("\n");  java.append("public class ").append(className).append("<T extends ").append(targetClass).append(">").append(" implements").append(" DataAccessor<T>").append("{\n");  generateGetDataCode(java);  generateSaveDataCode(java);  java.append("}\n");  return java.toString();}  }
class C{  private static int nextPowerOfTwo(final int i){  return Integer.highestOneBit(i) << 1;}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  @DataProvider public Object[][] state(){  return new Object[][]{new Object[]{"OBVIOUSLY_INVALID_EXPERIMENT_STATE",HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_DRAFT,HttpStatus.SC_OK},new Object[]{Constants.EXPERIMENT_STATE_PAUSED,HttpStatus.SC_OK},new Object[]{"OBVIOUSLY_INVALID_EXPERIMENT_STATE",HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_PAUSED,HttpStatus.SC_OK},new Object[]{Constants.EXPERIMENT_STATE_DRAFT,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_RUNNING,HttpStatus.SC_OK},new Object[]{"OBVIOUSLY_INVALID_EXPERIMENT_STATE",HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_RUNNING,HttpStatus.SC_OK},new Object[]{Constants.EXPERIMENT_STATE_DELETED,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_DRAFT,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_PAUSED,HttpStatus.SC_OK},new Object[]{Constants.EXPERIMENT_STATE_DELETED,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_TERMINATED,HttpStatus.SC_OK},new Object[]{"OBVIOUSLY_INVALID_EXPERIMENT_STATE",HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_RUNNING,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_TERMINATED,HttpStatus.SC_OK},new Object[]{Constants.EXPERIMENT_STATE_PAUSED,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_DRAFT,HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_DELETED,HttpStatus.SC_NO_CONTENT},new Object[]{"OBVIOUSLY_INVALID_EXPERIMENT_STATE",HttpStatus.SC_BAD_REQUEST},new Object[]{Constants.EXPERIMENT_STATE_DELETED,HttpStatus.SC_NOT_FOUND},new Object[]{Constants.EXPERIMENT_STATE_RUNNING,HttpStatus.SC_NOT_FOUND},new Object[]{Constants.EXPERIMENT_STATE_PAUSED,HttpStatus.SC_NOT_FOUND},new Object[]{Constants.EXPERIMENT_STATE_DRAFT,HttpStatus.SC_NOT_FOUND},new Object[]{Constants.EXPERIMENT_STATE_TERMINATED,HttpStatus.SC_NOT_FOUND}};}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  if (length > fBuffer.length) {    length=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,length);  for (int i=0; i < count; i++) {    int b0=fBuffer[i];    if (b0 < 0) {      throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"InvalidASCII",new Object[]{Integer.toString(b0 & 0x0FF)});    }    ch[offset + i]=(char)b0;  }  return count;}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.PUT,produces="application/json",consumes="application/json") public void updateUserKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,HttpServletResponse response) throws WebMessageException, IOException {  UserKeyJsonValue userKeyJsonValue=userKeyJsonValueService.getUserKeyJsonValue(currentUserService.getCurrentUser(),namespace,key);  if (userKeyJsonValue == null) {    throw new WebMessageException(WebMessageUtils.notFound("The key '" + key + "' was not found in the namespace '"+ namespace+ "'."));  }  if (!renderService.isValidJson(body)) {    throw new WebMessageException(WebMessageUtils.badRequest("The data is not valid JSON."));  }  userKeyJsonValue.setValue(body);  userKeyJsonValueService.updateUserKeyJsonValue(userKeyJsonValue);  response.setStatus(HttpServletResponse.SC_OK);  messageService.sendJson(WebMessageUtils.created("Key '" + key + "' in namespace '"+ namespace+ "' updated."),response);}  }
class C{  public VersionChecker(Context ctx,String versionUrl,int iconResId,int uniqueNotificationId,String notificationUrl){  handler=new LeakGuardHandlerWrapper<Context>(ctx);  this.userAgent=new OkHttpClient();  this.versionUrl=versionUrl;  this.iconResId=iconResId;  this.notificationUrl=notificationUrl;  this.uniqueNotificationId=uniqueNotificationId;  try {    this.currentVersion=ctx.getPackageManager().getPackageInfo(ctx.getPackageName(),0).versionCode;  } catch (  NameNotFoundException e) {  }}  }
class C{  protected DOMConfigurationImpl(SymbolTable symbolTable){  this(symbolTable,null);}  }
class C{  public void resetHighThreshold(){  this.currentHighThreshold=highThreshold;}  }
class C{  @Override public BigFraction subtract(final BigFraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (fraction.numerator.signum() == 0) {    return this;  }  if (numerator.signum() == 0) {    return fraction.negate();  }  BigInteger num=null;  BigInteger den=null;  if (denominator.equals(fraction.denominator)) {    num=numerator.subtract(fraction.numerator);    den=denominator;  } else {    num=(numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));    den=denominator.multiply(fraction.denominator);  }  return new BigFraction(num,den);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200847,skillcaster,skillname);}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  private void startSyncOperation(String fileName){  FileDataStorageManager storageManager=new FileDataStorageManager(mAccount,mContext.getContentResolver());  OCFile file=storageManager.getFileByLocalPath(mPath + File.separator + fileName);  SynchronizeFileOperation sfo=new SynchronizeFileOperation(file,null,mAccount,true,mContext);  RemoteOperationResult result=sfo.execute(storageManager,mContext);  if (result.getCode() == ResultCode.SYNC_CONFLICT) {    Intent i=new Intent(mContext,ConflictsResolveActivity.class);    i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);    i.putExtra(ConflictsResolveActivity.EXTRA_FILE,file);    i.putExtra(ConflictsResolveActivity.EXTRA_ACCOUNT,mAccount);    mContext.startActivity(i);  }}  }
class C{  @Override public Serializable parseIdString(String id){  return (Serializable)meta.getPrimaryKey().fromKeyString(id);}  }
class C{  public static String decompressToStringForZlib(byte[] bytesToDecompress){  byte[] bytesDecompressed=decompressForZlib(bytesToDecompress);  String returnValue=null;  try {    returnValue=new String(bytesDecompressed,0,bytesDecompressed.length,"UTF-8");  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();  }  return returnValue;}  }
class C{  public RepositoryStatistic computeBaseStatistics(Long repositoryId){  logger.debug("Compute text unit counts for repository id: {}",repositoryId);  Query createNativeQuery=entityManager.createNamedQuery("RepositoryStatistic.computeBaseStatistics");  createNativeQuery.setParameter(1,repositoryId);  return (RepositoryStatistic)createNativeQuery.getSingleResult();}  }
class C{  public int read() throws IOException {  if (nextF) {    nextF=false;    return nextch;  }  int ch=super.read();  if (ch != '\\')   return ch;  mini=new StringBuffer();  ch=super.read();  if (ch != 'u') {    nextF=true;    nextch=ch;    return '\\';  }  mini.append("\\u");  while (mini.length() < 6) {    ch=super.read();    mini.append((char)ch);  }  ch=Integer.parseInt(mini.substring(2).toString(),16);  return ch;}  }
class C{  private void testArrayForNullElement(String[] groupArray){  if (groupArray == null)   return;  for (int i=0; i < groupArray.length; i++) {    if (groupArray[i] == null) {      throw new NullPointerException("null element in group array");    }  }}  }
class C{  public AdsDeleteTargetGroupQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public boolean transmissionPolicyDefined(){  return replTransmissionPolicies != null;}  }
class C{  private boolean isProgressDialogShowing(){  return null != mProgressDialog && mProgressDialog.isShowing();}  }
class C{  public final void testFallBack(){  boolean empty=true;  try {    fFileManager.fallback((IFallback)data.get(0));    empty=fFileManager.isFallbackFileEmpty();  } catch (  DataFallbackException e) {    fail("Data could not be written to the log file " + e.getMessage());  }  assertFalse(empty);}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(++iCnt);    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  @Override public void onViewSwipedToRight(int position){  adapter.add(couponsList.get(position),couponsList.size());  adapter.notifyDataSetChanged();  updateQrCode(position == couponsList.size() - 1 ? 0 : position + 1);}  }
class C{  public AemSidekick clickCustomOperation(String optionName){  getCustomOperation(optionName).click();  return this;}  }
class C{  private void visitDescendants(NodeItem p,NodeItem skip){  int lidx=(skip == null ? 0 : p.getChildIndex(skip));  Iterator children=p.children();  p.setExpanded(children.hasNext());  for (int i=0; children.hasNext(); ++i) {    NodeItem c=(NodeItem)children.next();    if (c == skip) {      continue;    }    int doi=(int)(p.getDOI() - 1);    visit(c,c,doi,Math.abs(lidx - i));    if (doi > m_threshold)     visitDescendants(c,null);  }}  }
class C{  public static String unEscapeString(String str){  return unEscapeString(str,ESCAPE_CHAR,COMMA);}  }
class C{  public synchronized void invalidate() throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(MultiLogManager.class.getName(),"invalidate");  }  if (persistenceLogger.isLoggable(Level.FINEST)) {    persistenceLogger.log(Level.FINEST,"Invalidating log for cookie: {0}",new Long(cookie));  }  if (valid) {    valid=false;    logMgr.release(cookie);  }  try {    if (out != null) {      if (persistenceLogger.isLoggable(Level.FINEST)) {        persistenceLogger.log(Level.FINEST,"Closing log file for: {0}",new Long(cookie));      }      out.close();    }  } catch (  IOException ioe) {    if (persistenceLogger.isLoggable(Levels.HANDLED)) {      persistenceLogger.log(Levels.HANDLED,"Problem closing log file",ioe);    }  }  try {    File fl=new File(name);    if (persistenceLogger.isLoggable(Level.FINEST)) {      persistenceLogger.log(Level.FINEST,"Deleting log file for: {0}",new Long(cookie));    }    if (!fl.delete()) {      if (persistenceLogger.isLoggable(Levels.HANDLED)) {        persistenceLogger.log(Levels.HANDLED,"Could not delete log file");      }    }  } catch (  SecurityException se) {    if (persistenceLogger.isLoggable(Level.FINEST)) {      persistenceLogger.log(Level.FINEST,"SecurityException on log deletion",se);    }    throw new LogException("SimpleLogFile: invalidate: " + "cannot delete log file.");  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(MultiLogManager.class.getName(),"invalidate");  }}  }
class C{  public BoardRestoreCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){  super(client,"board.restoreComment",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);  commentId(commentId);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  CordovaResourceApi resourceApi=webView.getResourceApi();  PluginResult.Status status=PluginResult.Status.OK;  String result="";  if (action.equals("startRecordingAudio")) {    recordId=args.getString(0);    String target=args.getString(1);    try {      Uri targetUri=resourceApi.remapUri(Uri.parse(target));      fileUriStr=targetUri.toString();    } catch (    IllegalArgumentException e) {      fileUriStr=target;    }    promptForRecord();  } else   if (action.equals("stopRecordingAudio")) {    this.stopRecordingAudio(args.getString(0));  } else   if (action.equals("startPlayingAudio")) {    String target=args.getString(1);    String fileUriStr;    try {      Uri targetUri=resourceApi.remapUri(Uri.parse(target));      fileUriStr=targetUri.toString();    } catch (    IllegalArgumentException e) {      fileUriStr=target;    }    this.startPlayingAudio(args.getString(0),FileHelper.stripFileProtocol(fileUriStr));  } else   if (action.equals("seekToAudio")) {    this.seekToAudio(args.getString(0),args.getInt(1));  } else   if (action.equals("pausePlayingAudio")) {    this.pausePlayingAudio(args.getString(0));  } else   if (action.equals("stopPlayingAudio")) {    this.stopPlayingAudio(args.getString(0));  } else   if (action.equals("setVolume")) {    try {      this.setVolume(args.getString(0),Float.parseFloat(args.getString(1)));    } catch (    NumberFormatException nfe) {    }  } else   if (action.equals("getCurrentPositionAudio")) {    float f=this.getCurrentPositionAudio(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else   if (action.equals("getDurationAudio")) {    float f=this.getDurationAudio(args.getString(0),args.getString(1));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else   if (action.equals("create")) {    String id=args.getString(0);    String src=FileHelper.stripFileProtocol(args.getString(1));    getOrCreatePlayer(id,src);  } else   if (action.equals("release")) {    boolean b=this.release(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,b));    return true;  } else   if (action.equals("messageChannel")) {    messageChannel=callbackContext;    return true;  } else   if (action.equals("getCurrentAmplitudeAudio")) {    float f=this.getCurrentAmplitudeAudio(args.getString(0));    callbackContext.sendPluginResult(new PluginResult(status,f));    return true;  } else {    return false;  }  callbackContext.sendPluginResult(new PluginResult(status,result));  return true;}  }
class C{  @Override public boolean truncate(String fileName,long validDataEndOffset){  DataOutputStream dataOutputStream=null;  DataInputStream dataInputStream=null;  boolean fileTruncatedSuccessfully=false;  int bufferSize=validDataEndOffset > CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR ? CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR : (int)validDataEndOffset;  String tempWriteFilePath=fileName + CarbonCommonConstants.TEMPWRITEFILEEXTENSION;  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  try {    CarbonFile tempFile=null;    if (FileFactory.isFileExist(tempWriteFilePath,fileType)) {      tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);      tempFile.delete();    }    FileFactory.createNewFile(tempWriteFilePath,fileType);    tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);    byte[] buff=new byte[bufferSize];    dataInputStream=FileFactory.getDataInputStream(fileName,fileType);    int read=dataInputStream.read(buff,0,buff.length);    dataOutputStream=FileFactory.getDataOutputStream(tempWriteFilePath,fileType);    dataOutputStream.write(buff,0,read);    long remaining=validDataEndOffset - read;    while (remaining > 0) {      if (remaining > bufferSize) {        buff=new byte[bufferSize];      } else {        buff=new byte[(int)remaining];      }      read=dataInputStream.read(buff,0,buff.length);      dataOutputStream.write(buff,0,read);      remaining=remaining - read;    }    CarbonUtil.closeStreams(dataInputStream,dataOutputStream);    tempFile.renameForce(fileName);    fileTruncatedSuccessfully=true;  } catch (  IOException e) {    LOGGER.error("Exception occured while truncating the file " + e.getMessage());  } finally {    CarbonUtil.closeStreams(dataOutputStream,dataInputStream);  }  return fileTruncatedSuccessfully;}  }
class C{  public ResponsePacket executeOnSpace(ISpaceProxy space,Transaction txn) throws SQLException {  ResponsePacket response=new ResponsePacket();  try {    if (getSecurityInterceptor() != null) {      SpaceContext spaceContext=getSession().getConnectionContext().getSpaceContext();      SecurityContext securityContext=SpaceContextHelper.getSecurityContext(spaceContext);      getSecurityInterceptor().intercept(securityContext,SpacePrivilege.ALTER,tableName);    }    ExternalEntry template=new ExternalEntry(tableName,null,null);    template.setFieldsNames(_columnNames);    template.setFieldsTypes(_columnTypes);    template.setIndexIndicators(_indices);    template.setRoutingFieldName(_routingFieldName);    space.snapshot(template);    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Wrote a new table to space [" + tableName + "]");    }    response.setIntResult(0);  } catch (  Exception e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,e.getMessage(),e);    }    SQLException se=new SQLException("Failed to create table [" + tableName + "]; Cause: "+ e,"GSP",-106);    se.initCause(e);    throw se;  }  return response;}  }
class C{  public AemSidekick clickModeIcon(ModeIcon iconName){  final String xpath=String.format(ICON_BOTTOM_XPATH,iconName.getIconName());  final WebElement iconBottom=driver.findElement(By.xpath(xpath));  iconBottom.click();  return this;}  }
class C{  public LinkedHashMap<K,V> flatView(){  return entryStream().collect(StreamUtils.toLinkedMap(null,null));}  }
class C{  public int detachChild(Spatial child){  if (child == null) {    throw new NullPointerException();  }  if (child.getParent() == this) {    int index=children.indexOf(child);    if (index != -1) {      detachChildAt(index);    }    return index;  }  return -1;}  }
class C{  public DataSourceAttributeData(DataSourceAttributeData objectToCopy){  super();  this.name=objectToCopy.name;  this.type=objectToCopy.type;  this.value=objectToCopy.value;}  }
class C{  public boolean compare_type_assigners(){  return soot.PhaseOptions.getBoolean(options,"compare-type-assigners");}  }
class C{  TestType(final String name){  this.name=name;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_IT_CAN_NOT_BE_ENCHANTED(String value0){  return new SM_SYSTEM_MESSAGE(1300453,value0);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph,Predicate filter){  return addGraph(group,graph,filter,VisualItem.SCHEMA,VisualItem.SCHEMA);}  }
class C{  private double[] basicGuess(WeightedObservedPoint[] points){  final int maxYIdx=findMaxY(points);  final double n=points[maxYIdx].getY();  final double m=points[maxYIdx].getX();  double fwhmApprox;  try {    final double halfY=n + ((m - n) / 2);    final double fwhmX1=interpolateXAtY(points,maxYIdx,-1,halfY);    final double fwhmX2=interpolateXAtY(points,maxYIdx,1,halfY);    fwhmApprox=fwhmX2 - fwhmX1;  } catch (  MathIllegalArgumentException e) {    fwhmApprox=points[points.length - 1].getX() - points[0].getX();  }  final double s=fwhmApprox / (2 * FastMath.sqrt(2 * FastMath.log(2)));  return new double[]{n,m,s};}  }
class C{  private void computeOffsets(@Nullable ScreenView currentScreenView){  if (myDesignSurface != null && currentScreenView != null) {    myCurrentScreenViewSize=currentScreenView.getSize(myCurrentScreenViewSize);    if (myDesignSurface.getScreenMode() == BOTH) {      if (myDesignSurface.isStackVertically()) {        mySecondScreenOffset.setLocation(0,myDeviceSize.getHeight() * myDeviceScale + myScaledScreenSpace);      } else {        mySecondScreenOffset.setLocation(myDeviceSize.getWidth() * myDeviceScale + myScaledScreenSpace,0);      }    }  }  myCenterOffset=(int)Math.round((PREFERRED_SIZE.getWidth() - myXScreenNumber * myDeviceSize.getWidth() * myDeviceScale) / 2);}  }
class C{  public MessagesGetLongPollHistoryQuery previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  private LinkedHashSet<DimensionField> bindShowClause(PathSegment pathSegment,DimensionDictionary dimensionDictionary) throws BadApiRequestException {  Dimension dimension=dimensionDictionary.findByApiName(pathSegment.getPath());  List<String> showFields=pathSegment.getMatrixParameters().entrySet().stream().filter(null).flatMap(null).flatMap(null).collect(Collectors.toList());  if (showFields.size() == 1 && showFields.contains(DimensionFieldSpecifierKeywords.ALL.toString())) {    return dimension.getDimensionFields();  } else   if (showFields.size() == 1 && showFields.contains(DimensionFieldSpecifierKeywords.NONE.toString())) {    return new LinkedHashSet<>();  } else   if (!showFields.isEmpty()) {    return bindDimensionFields(dimension,showFields);  } else {    return dimension.getDefaultDimensionFields();  }}  }
class C{  public boolean isUserInRole(String role){  return roles.contains(role);}  }
class C{  public void stop(boolean verbose){  if (startTime == 0L) {    notReliable=true;  }  curTime=System.currentTimeMillis() - startTime;  startTime=0L;  if (curTime > maxTime) {    maxTime=curTime;  }  if (curTime < minTime) {    minTime=curTime;  }  count++;  sum+=curTime;  if (verbose) {    showTimesShort(0L);  }}  }
class C{  private void connectToGeoServer(GeoServerConnection connection){  GeoServerClientInterface client=connectionMap.get(connection);  if (client != null) {    client.connect();    if (client.isConnected()) {      client.retrieveData();    }  }}  }
class C{  protected void keyTyped(char typedChar,int keyCode){  for (int i=0; i < 12; i++) {    GuiTextField txt=((GuiQuickCommandsList.CommandEntry)this.guiList.getListEntry(i)).txt;    if (txt.isFocused()) {      txt.textboxKeyTyped(typedChar,keyCode);    }  }}  }
class C{  private static boolean genMainDexList(Project project,boolean minifyEnabled,File mappingFile,File jarMergingOutputFile,File andMainDexList,DexKnifeConfig dexKnifeConfig) throws Exception {  System.out.println(":" + project.getName() + ":genMainDexList");  HashSet<String> mainCls=null;  if (dexKnifeConfig.useSuggest) {    PatternSet patternSet=dexKnifeConfig.suggestPatternSet;    if (dexKnifeConfig.filterSuggest && patternSet == null) {      patternSet=dexKnifeConfig.patternSet;    }    mainCls=getAdtMainDexClasses(andMainDexList,patternSet,dexKnifeConfig.logFilterSuggest);    System.out.println("DexKnife: use suggest");  }  File keepFile=project.file(MAINDEXLIST_TXT);  keepFile.delete();  ArrayList<String> mainClasses=null;  if (minifyEnabled) {    System.err.println("DexKnife: From Mapping");    mainClasses=getMainClassesFromMapping(mappingFile,dexKnifeConfig.patternSet,mainCls);  } else {    System.out.println("DexKnife: From MergedJar: " + jarMergingOutputFile);    if (jarMergingOutputFile != null) {      mainClasses=getMainClassesFromJar(jarMergingOutputFile,dexKnifeConfig.patternSet,mainCls);    } else {      System.err.println("DexKnife: The Merged Jar is not exist! Can't be processed!");    }  }  if (mainClasses != null && mainClasses.size() > 0) {    BufferedWriter writer=new BufferedWriter(new FileWriter(keepFile));    for (    String mainClass : mainClasses) {      writer.write(mainClass);      writer.newLine();      if (dexKnifeConfig.logMainList) {        System.out.println(mainClass);      }    }    writer.close();    return true;  }  throw new Exception("DexKnife Warning: Main dex is EMPTY ! Check your config and project!");}  }
class C{  private static LeaseMap createBatchLeaseMap(List<Entry> bList,long now){  Iterator<Entry> iter=bList.iterator();  Entry e=iter.next();  LeaseMap batchLeaseMap=e.lease.createLeaseMap(e.getRenewDuration(now));  if (e.lease instanceof RemoteMethodControl && batchLeaseMap instanceof RemoteMethodControl) {    batchLeaseMap=(LeaseMap)((RemoteMethodControl)batchLeaseMap).setConstraints(ConstrainableProxyUtil.translateConstraints(((RemoteMethodControl)e.lease).getConstraints(),leaseToLeaseMapMethods));  }  while (iter.hasNext()) {    e=iter.next();    batchLeaseMap.put(e.lease,new Long(e.getRenewDuration(now)));  }  return batchLeaseMap;}  }
class C{  public DocsSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void createRecursivly(String path) throws KeeperException, InterruptedException {  try {    if (zk.exists(path,true) == null && path.length() > 0) {      String temp=path.substring(0,path.lastIndexOf(File.separator));      createRecursivly(temp);      zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    } else {      return;    }  } catch (  KeeperException e) {    throw e;  }catch (  InterruptedException e) {    throw e;  }}  }
class C{  public void clearAuthenticationTokens(){  this.authenticationTokens.clear();}  }
class C{  private void updateMaxKeyInfo(String tabColumnName,int maxKey){  checkAndUpdateMap(maxKey,tabColumnName);}  }
class C{  public void onEmojiconInputEvent(CharSequence emojiContent){  editText.append(emojiContent);}  }
class C{  @Override public boolean canSetSpeed(){  Log.d(SBMP_TAG,"canSetSpeed() 180");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  if (pmInterface != null) {    try {      return pmInterface.canSetSpeed(ServiceBackedMediaPlayer.this.sessionId);    } catch (    RemoteException e) {      e.printStackTrace();      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  return false;}  }
class C{  public void pls(){  mDna.evolve();}  }
class C{  @Override public Expression createExpression(FunctionName functionName){  if (functionName == null) {    return null;  }  List<Expression> parameters=null;  Literal fallback=null;  Function function=functionFactory.function(functionName.getFunctionName(),parameters,fallback);  return function;}  }
class C{  public boolean removeAll(Collection<?> collection){  return MapCollections.removeAllHelper(this,collection);}  }
class C{  public static FloatBuffer clone(FloatBuffer buf){  if (buf == null) {    return null;  }  buf.rewind();  FloatBuffer copy;  if (buf.isDirect()) {    copy=createFloatBuffer(buf.limit());  } else {    copy=FloatBuffer.allocate(buf.limit());  }  copy.put(buf);  return copy;}  }
class C{  public TimelineReader(String fileName) throws MaryConfigurationException {  this(fileName,true);}  }
class C{  public void lockIds(Iterable<Integer> ids){  try {    lock.lock();    for (    int id : ids) {      boolean status=idList.get(id);      if (status) {        throw new IDFactoryError("ID " + id + " is already taken, fatal error!!!");      }      idList.set(id);    }  }  finally {    lock.unlock();  }}  }
class C{  @deprecated public ComposedCharIter(){  this(false,0);}  }
class C{  @NonNull private Rect viewRectInNeighborCoords(@NonNull View view,@NonNull View neighbor){  final Rect bounds=new Rect();  view.getDrawingRect(bounds);  offsetDescendantRectToMyCoords(view,bounds);  offsetRectIntoDescendantCoords(neighbor,bounds);  return bounds;}  }
class C{  private static Class<?> convertFieldType(String fieldType){  if (fieldTypeMap.containsKey(fieldType)) {    return fieldTypeMap.get(fieldType);  }  return null;}  }
class C{  protected Session(AbstractSessionManager manager,HttpServletRequest request){  super(manager,request);  _data=new SessionData(getClusterId());  _data.setMaxIdleMs(TimeUnit.SECONDS.toMillis(_dftMaxIdleSecs));  _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));  _data.setCookieSet(0);  Enumeration<String> attributeNames=getAttributeNames();  HashMap<String,Object> attributes=new HashMap<String,Object>();  while (attributeNames.hasMoreElements()) {    String nextAttribute=attributeNames.nextElement();    attributes.put(nextAttribute,request.getAttribute(nextAttribute));  }  _data.setAttributeMap(attributes);  if (Log.isDebugEnabled())   Log.debug("New Session from request, " + _data.toStringExtended());}  }
class C{  @NotNull public DeleteFaceListAction deleteFaceList(@NotNull String faceListId){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new DeleteFaceListAction(cognitiveContext,faceListId);}  }
class C{  public static float[] mean(float[][] p){  int order=p[0].length - 1;  float[] meanCoeffs=new float[order + 1];  for (int k=0; k <= order; k++) {    for (int i=0; i < p.length; i++) {      meanCoeffs[k]+=p[i][k];    }    meanCoeffs[k]/=p.length;  }  return meanCoeffs;}  }
class C{  public void insert(final T object,final int index){synchronized (mLock) {    mList.add(index,object);  }  notifyDataSetChanged();}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public WallSearchQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  ImportNoteBuilder addMessage(ImportNoteMessage.Type type,String message){  if (!Strings.isNullOrEmpty(message)) {    messages.add(new ImportNoteMessage(type,message));  }  return this;}  }
class C{  public void revertSelection(TreePath previousSelectedPath){  setIgnoreSelection(true);  setSelectionPath(previousSelectedPath);  setIgnoreSelection(false);}  }
class C{  public static boolean checkIfAutoLoadMergingRequired(){  String isLoadMergeEnabled=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_AUTO_LOAD_MERGE,CarbonCommonConstants.DEFAULT_ENABLE_AUTO_LOAD_MERGE);  if (isLoadMergeEnabled.equalsIgnoreCase("false")) {    return false;  }  return true;}  }
class C{  protected boolean isEmpty(){  return children.isEmpty() || getItemCount(children) == 0;}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  private void hideSeeAllLinkIfFlagSet(IVScanResult ivScanResult){  if (ivScanResult.tooManyPossibilities) {    seeAllPossibilities.setVisibility(View.GONE);  } else {    seeAllPossibilities.setVisibility(View.VISIBLE);  }}  }
class C{  public void testWholeHighlight() throws Exception {  deleteAllDocs();  long gen=addDocument(0,"Lisa","this is a test.  here is a random sentence.  here is another sentence with test in it.",10.99f,"2012/10/17");  JSONObject o=search("test",gen,null,false,false,null,null);  assertEquals("this is a <b>test</b>.  here is a random sentence.  here is another sentence with <b>test</b> in it.",renderHighlight(getArray(o,"hits[0].fields.body")));}  }
class C{  protected FavoriteOperation(){  super();}  }
class C{  public boolean exists(OpenJPAStateManager sm,Object edata){  ClassMetaData cm=sm.getMetaData();  final Object[] ids=ApplicationIds.toPKValues(sm.getObjectId(),cm);  ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();  try {    Object result=proxy.readById(cm.getDescribedType().getName(),ids[0],null,_transaction,0,ReadModifiers.DIRTY_READ,false,QueryResultTypeInternal.EXTERNAL_ENTRY,null);    return result != null;  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public NewsfeedGetCommentsQuery filters(List<NewsfeedGetCommentsFilter> value){  return unsafeParam("filters",value);}  }
class C{  public double norm2(){  return s[0];}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200767,skillcaster,skillname);}  }
class C{  protected void validateAggregatability(Set<Dimension> apiDimensions,Map<Dimension,Set<ApiFilter>> apiFilters) throws BadApiRequestException {  Set<Dimension> nonAggGroupByDimensions=apiDimensions.stream().filter(StreamUtils.not(null)).collect(Collectors.toSet());  boolean isValid=apiFilters.entrySet().stream().filter(null).filter(null).map(null).noneMatch(null);  if (!isValid) {    List<String> invalidDimensionsInFilters=apiFilters.entrySet().stream().filter(null).filter(null).filter(null).map(null).map(null).collect(Collectors.toList());    LOG.debug(NON_AGGREGATABLE_INVALID.logFormat(invalidDimensionsInFilters));    throw new BadApiRequestException(NON_AGGREGATABLE_INVALID.format(invalidDimensionsInFilters));  }}  }
class C{  public static List<? extends Element> childElementList(Element element,String childElementName){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getNodeName()))) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  boolean needsRollover(){  Calendar now=GregorianCalendar.getInstance();  if (now.compareTo(nextRollover) > 0) {    setTimestamp();    return true;  } else {    return false;  }}  }
class C{  public void decreaseShield(){  this.shield--;  if (shield <= 0)   this.isDead=true;}  }
class C{  private void processResultFromCamera(int destType,Intent intent) throws IOException {  int rotate=0;  ExifHelper exif=new ExifHelper();  String sourcePath=(this.allowEdit && this.croppedUri != null) ? FileHelper.stripFileProtocol(this.croppedUri.toString()) : FileHelper.stripFileProtocol(this.imageUri.toString());  if (this.encodingType == JPEG) {    try {      exif.createInFile(sourcePath);      exif.readExifData();      rotate=exif.getOrientation();    } catch (    IOException e) {      e.printStackTrace();    }  }  Bitmap bitmap=null;  Uri galleryUri=null;  if (this.saveToPhotoAlbum) {    galleryUri=Uri.fromFile(new File(getPicutresPath()));    if (this.allowEdit && this.croppedUri != null) {      writeUncompressedImage(this.croppedUri,galleryUri);    } else {      writeUncompressedImage(this.imageUri,galleryUri);    }    refreshGallery(galleryUri);  }  if (destType == DATA_URL) {    bitmap=getScaledBitmap(sourcePath);    if (bitmap == null) {      bitmap=(Bitmap)intent.getExtras().get("data");    }    if (bitmap == null) {      Log.d(LOG_TAG,"I either have a null image path or bitmap");      this.failPicture("Unable to create bitmap!");      return;    }    if (rotate != 0 && this.correctOrientation) {      bitmap=getRotatedBitmap(rotate,bitmap,exif);    }    this.processPicture(bitmap,this.encodingType);    if (!this.saveToPhotoAlbum) {      checkForDuplicateImage(DATA_URL);    }  } else   if (destType == FILE_URI || destType == NATIVE_URI) {    if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation) {      if (this.saveToPhotoAlbum) {        this.callbackContext.success(galleryUri.toString());      } else {        Uri uri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));        if (this.allowEdit && this.croppedUri != null) {          writeUncompressedImage(this.croppedUri,uri);        } else {          writeUncompressedImage(this.imageUri,uri);        }        this.callbackContext.success(uri.toString());      }    } else {      Uri uri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));      bitmap=getScaledBitmap(sourcePath);      if (bitmap == null) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to create bitmap!");        return;      }      if (rotate != 0 && this.correctOrientation) {        bitmap=getRotatedBitmap(rotate,bitmap,exif);      }      OutputStream os=this.cordova.getActivity().getContentResolver().openOutputStream(uri);      CompressFormat compressFormat=encodingType == JPEG ? CompressFormat.JPEG : CompressFormat.PNG;      bitmap.compress(compressFormat,this.mQuality,os);      os.close();      if (this.encodingType == JPEG) {        String exifPath;        exifPath=uri.getPath();        exif.createOutFile(exifPath);        exif.writeExifData();      }      this.callbackContext.success(uri.toString());    }  } else {    throw new IllegalStateException();  }  this.cleanup(FILE_URI,this.imageUri,galleryUri,bitmap);  bitmap=null;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector3f)) {    return false;  }  if (this == o) {    return true;  }  Vector3f comp=(Vector3f)o;  if (Float.compare(x,comp.x) != 0) {    return false;  }  if (Float.compare(y,comp.y) != 0) {    return false;  }  if (Float.compare(z,comp.z) != 0) {    return false;  }  return true;}  }
class C{  @Override public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  public int addSegmentList(int index,WKTSegmentList segmentListToAdd){  List<WKTSegmentList> localSegmentList=null;  if (index < 0) {    return -1;  } else {    if (index >= segmentList.size()) {      localSegmentList=new ArrayList<WKTSegmentList>();      segmentList.add(localSegmentList);    } else {      localSegmentList=segmentList.get(index);    }    localSegmentList.add(segmentListToAdd);  }  return localSegmentList.size() - 1;}  }
class C{  public static boolean verify(@NotNull Project project,@NotNull String title,@NotNull Collection<BlazeValidationError> errors){  if (!errors.isEmpty()) {    BlazeValidationError error=errors.iterator().next();    Messages.showErrorDialog(project,error.getError(),title);    return false;  }  return true;}  }
class C{  protected Object newInitialFlow(){  return emptySet.clone();}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongObjectHashMap)) {    return false;  }  TLongObjectHashMap that=(TLongObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public double lengthSquared(){  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);}  }
class C{  public void read(ByteInputBuffer buffer){  size=0;  for (PackedOperation op=new PackedOperation(buffer.read()); !op.equals(PackedOperation.terminator()); op=new PackedOperation(buffer.read())) {    if (size == transcript.length - 1) {      final PackedOperation[] tmp=new PackedOperation[2 * transcript.length];      System.arraycopy(transcript,0,tmp,0,size);      transcript=tmp;    }    transcript[size++]=op;  }}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,BigDecimal selectedAmount){  return equals(productId,reservStart,reservLength,reservPersons,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false);}  }
class C{  public WidgetsGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ConfigurableValidationState(){  super();  fIdIdrefChecking=true;  fUnparsedEntityChecking=true;}  }
class C{  public void acquireReadLock(int segmentId){  _readLocks[segmentId].lock();}  }
class C{  public static boolean hasLayoutRenderingIssue(@NotNull AndroidProject model){  String modelVersion=model.getModelVersion();  return modelVersion.startsWith("1.2.0") || modelVersion.equals("1.2.1") || modelVersion.equals("1.2.2");}  }
class C{  public PhotosReorderAlbumsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public FriendsGetByPhonesQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private boolean hasSuperMethod(TypeElement classElement,String methodName){  if (!isEpoxyModel(classElement.asType())) {    return false;  }  for (  Element subElement : classElement.getEnclosedElements()) {    if (subElement.getKind() == ElementKind.METHOD && !subElement.getModifiers().contains(Modifier.PRIVATE) && subElement.getSimpleName().toString().equals(methodName)) {      return true;    }  }  Element superClass=typeUtils.asElement(classElement.getSuperclass());  return (superClass instanceof TypeElement) && hasSuperMethod((TypeElement)superClass,methodName);}  }
class C{  public static Observable<float[]> createLowPassFilter(Observable<float[]> stream){  return createLowPassFilter(stream,0.8f);}  }
class C{  @Override public void pull(final PullEvent event) throws PullException {  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("entering pull() of proxy low priority buffer...");    LOGGER.trace("\t Number of pulled dataTagValueUpdate objects (collections!) : " + event.getPulled().size());  }  Iterator<DataTagValueUpdate> it=event.getPulled().iterator();  while (it.hasNext()) {    try {      wrappedSender.processValues(it.next());    } catch (    Exception ex) {      LOGGER.error("JMSException caught when calling the proxied JMSSender's processValue method",ex);    }  }  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("leaving pull()...");  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  overridePendingTransition(0,0);  Scoop.getInstance().apply(this);  setContentView(R.layout.activity_main);  ButterKnife.bind(this);  Scoop.sugarCone().bind(this);  setSupportActionBar(mAppBar);}  }
class C{  public MarketCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  public AppsGetQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  protected Collection<InetAddress> resolveHostByType(String host,int type){  Lookup lookup;  try {    lookup=new Lookup(host,type,DClass.IN);  } catch (  TextParseException e) {    return Collections.emptyList();  }  lookup.setCache(cache);  int retryCount=-1;  Record[] records;  do {    records=lookup.run();    retryCount++;  } while (lookup.getResult() == Lookup.TRY_AGAIN && retryCount < DNS_NETWORK_FAILURE_RETRY_COUNT);  if (records == null) {    return Collections.emptyList();  }  List<InetAddress> addrList=new ArrayList<InetAddress>(records.length);  for (  Record record : records) {    if (record instanceof ARecord) {      ARecord ipv4Record=(ARecord)record;      try {        InetAddress resolvedAddress=InetAddress.getByAddress(host,ipv4Record.getAddress().getAddress());        addrList.add(resolvedAddress);      } catch (      UnknownHostException e) {        log.warn("dnsjava resolver returned an invalid InetAddress for host: " + host,e);        continue;      }    } else     if (record instanceof AAAARecord) {      AAAARecord ipv6Record=(AAAARecord)record;      try {        InetAddress resolvedAddress=InetAddress.getByAddress(host,ipv6Record.getAddress().getAddress());        addrList.add(resolvedAddress);      } catch (      UnknownHostException e) {        log.warn("dnsjava resolver returned an invalid InetAddress for host: " + host,e);        continue;      }    }  }  return addrList;}  }
class C{  GSQueueBrowserImpl(GSSessionImpl sess,Queue queue,String selector) throws JMSException {  this.m_session=sess;  this.m_queue=queue;  this.m_selector=selector;  if (m_queue == null)   throw new InvalidDestinationException("GSQueueBrowserImpl Invalid queue: " + m_queue);  GSMessageImpl template=new GSMessageImpl();  template.setDestinationName(m_queue.getQueueName());  ArrayList<GSMessageImpl> templates=new ArrayList<GSMessageImpl>(1);  templates.add(template);  GSIteratorConfig config=new GSIteratorConfig();  config.setBufferSize(iteratorBufferSize);  config.setIteratorScope(IteratorScope.CURRENT_AND_FUTURE);  try {    gsIterator=new GSIterator(m_session.getConn().getSpace(),templates,config);  } catch (  RemoteException re) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Exception inside GSQueueBrowserImpl: " + re.toString(),re);    }    JMSException e=new JMSException("RemoteException: " + re.toString());    e.setLinkedException(re);    throw e;  }catch (  UnusableEntryException uue) {    if (uue instanceof EntryNotInSpaceException) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"The Entry " + ((EntryNotInSpaceException)uue).getUID() + " is no longer in Space "+ uue.getCause(),uue);      }    } else {      final JMSException ex=new JMSException("UnusableEntryException : ");      ex.setLinkedException(uue);      throw ex;    }  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public WishlistComponentCursor queryWishlistComponents(long id){  return mHelper.queryWishlistComponents(id);}  }
class C{  private void addFixtureAction(Image icon,ConvexShapePanel shapePanel){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      BodyFixture fixture=AddConvexFixtureDialog.show(ControlUtilities.getParentWindow(this),icon,shapePanel);      SandboxBody body=(SandboxBody)node.getUserObject();      if (fixture != null) {synchronized (Simulation.LOCK) {          body.addFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);        this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        this.tree.expandPath(new TreePath(fixtureNode.getPath()).getParentPath());      }    }  }}  }
class C{  private boolean canModifyPrev(Node node){  boolean textLastChild=false;  Node prev=node.getPreviousSibling();  while (prev != null) {    short type=prev.getNodeType();    if (type == Node.ENTITY_REFERENCE_NODE) {      Node lastChild=prev.getLastChild();      if (lastChild == null) {        return false;      }      while (lastChild != null) {        short lType=lastChild.getNodeType();        if (lType == Node.TEXT_NODE || lType == Node.CDATA_SECTION_NODE) {          textLastChild=true;        } else         if (lType == Node.ENTITY_REFERENCE_NODE) {          if (!canModifyPrev(lastChild)) {            return false;          } else {            textLastChild=true;          }        } else {          return !textLastChild;        }        lastChild=lastChild.getPreviousSibling();      }    } else     if (type == Node.TEXT_NODE || type == Node.CDATA_SECTION_NODE) {    } else {      return true;    }    prev=prev.getPreviousSibling();  }  return true;}  }
class C{  public SaveProtocolVersion(String protocol,int major,int minor){  if (protocol == null) {    throw new IllegalArgumentException("Protocol name must not be null.");  }  if (major < 0) {    throw new IllegalArgumentException("Protocol major version number must not be negative.");  }  if (minor < 0) {    throw new IllegalArgumentException("Protocol minor version number may not be negative");  }  this.protocol=protocol;  this.major=major;  this.minor=minor;}  }
class C{  private static boolean quickRejectField(Object entryValue,Object templateValue){  if (templateValue == null)   return false;  if (entryValue == null)   return true;  return (templateValue.hashCode() != entryValue.hashCode());}  }
class C{  protected void renderFixture(Graphics2D g,double scale,BodyFixture fixture,Color color){  Convex convex=fixture.getShape();  if (this.isAsleep()) {    color=color.brighter();  }  Graphics2DRenderer.render(g,convex,scale,color);}  }
class C{  public static Bitmap takeScreenShoteWithoutStatusBar(Activity activity){  View view=activity.getWindow().getDecorView();  view.setDrawingCacheEnabled(true);  view.buildDrawingCache();  Bitmap bmp=view.getDrawingCache();  int statusBarHeight=getStatusBarHeight(activity);  int width=getScreenWidthInPx(activity);  int height=getScreenHeightInPx(activity);  Bitmap bp=Bitmap.createBitmap(bmp,0,statusBarHeight,width,height - statusBarHeight);  view.destroyDrawingCache();  return bp;}  }
class C{  public boolean isLongPressDragEnabled(){  initializeItemTouchHelper();  return this.mDefaultItemTouchHelper.isLongPressDragEnabled();}  }
class C{  public StorageGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public BufferedReadOnlyIterator(int fromIndex){  _externalIteratorExhausted=true;  _externalIterator=null;  _bufferIterator=_buffer.listIterator(fromIndex);}  }
class C{  private void visitAncestors(NodeItem n){  if (n == m_root)   return;  visitFocus((NodeItem)n.getParent(),n);}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  private List<List<TextRead>> stackReads(List<TextRead> textReads){  List<List<TextRead>> listOfLines=new ArrayList<List<TextRead>>();  if (textReads.size() == 0) {    return listOfLines;  }  List<TextRead> line=new ArrayList<TextRead>();  line.add(textReads.get(0));  textReads.remove(0);  listOfLines.add(line);  while (true) {    ArrayList<TextRead> trToRemove=new ArrayList<TextRead>();    for (int i=0; i < textReads.size(); i++) {      TextRead tr=textReads.get(i);      int gap=(this.getGc().getBpPerScreenColumn() > 1) ? 0 : 1;      if (tr.getTextStart() > line.get(line.size() - 1).getTextEnd() + gap) {        listOfLines.get(listOfLines.size() - 1).add(tr);        trToRemove.add(tr);      }    }    for (    TextRead tr : trToRemove) {      textReads.remove(textReads.indexOf(tr));    }    if (textReads.size() > 0) {      line=new ArrayList<TextRead>();      line.add(textReads.get(0));      listOfLines.add(line);      textReads.remove(0);    } else {      break;    }  }  return listOfLines;}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201225,skillcaster,num0,skillname);}  }
class C{  public LeadsMetricHitQuery(VkApiClient client,UserActor actor,String data){  super(client,"leads.metricHit",MetricHitResponse.class);  accessToken(actor.getAccessToken());  data(data);}  }
class C{  public BracketingNthOrderBrentSolver(final double relativeAccuracy,final double absoluteAccuracy,final int maximalOrder) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy);  if (maximalOrder < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,maximalOrder,2);  }  this.maximalOrder=maximalOrder;  this.allowed=AllowedSolution.ANY_SIDE;}  }
class C{  protected void reportError(String key,Object[] arguments) throws XNIException {  throw new XNIException((fErrorReporter.getMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN)).formatMessage(fErrorReporter.getLocale(),key,arguments));}  }
class C{  private void initiateInstanceVariables(){  cth=new ClipboardTokenHandler(this);  clipboardMaxLength=(TextView)findViewById(R.id.clipboardMaxLength);  clipboardPreview=(TextView)findViewById(R.id.clipboardPreview);  clipboardDescription=(TextView)findViewById(R.id.clipboardDescription);  clipboardShowcase=(LinearLayout)findViewById(R.id.clipboardShowcase);  clipTokenEditor=(LinearLayout)findViewById(R.id.clipTokenEditor);  clipboardMaxEvolutionVariant=(CheckBox)findViewById(R.id.clipboardMaxEvolutionVariant);}  }
class C{  static public Object deserialiseObject(String xml,String xsdFile,Class<?> objclass) throws JAXBException, SAXException, XMLStreamException {  Object obj=null;  JAXBContext jaxbContext=getJAXBContext(objclass);  SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  final String schemaResourceFilename=new String(xsdFile);  URL schemaURL=MalmoMod.class.getClassLoader().getResource(schemaResourceFilename);  Schema schema=schemaFactory.newSchema(schemaURL);  Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();  jaxbUnmarshaller.setSchema(schema);  StringReader stringReader=new StringReader(xml);  XMLInputFactory xif=XMLInputFactory.newFactory();  xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES,false);  xif.setProperty(XMLInputFactory.SUPPORT_DTD,false);  XMLStreamReader XMLreader=xif.createXMLStreamReader(stringReader);  obj=jaxbUnmarshaller.unmarshal(XMLreader);  return obj;}  }
class C{  public WriteEntryResult(){}  }
class C{  public @Nullable Uri insertItemTo(long playlistId,long audioId,int position){  ContentValues value=new ContentValues();  value.put(MediaStore.Audio.Playlists.Members.AUDIO_ID,audioId);  value.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,position);  return resolver.insert(MediaStore.Audio.Playlists.Members.getContentUri("external",playlistId),value);}  }
class C{  protected RTTypeface(){}  }
class C{  public void pushContext(){  fContextStack.push(fMatchersCount);}  }
class C{  private void preBufferAccess(){  _mostRecentUse=System.currentTimeMillis();  _lock.lock();  try {    while (_flushPending) {      _flushComplete.await();    }    ensureBufferAvailable(this);    ensureLoaded();    _bufferUseCount++;  } catch (  Exception e) {    throw Throwables.propagate(e);  } finally {    _lock.unlock();  }}  }
class C{  protected AuthSignupQuery firstName(String value){  return unsafeParam("first_name",value);}  }
class C{  private boolean isTypedTimeFullyLegal(){  if (mIs24HourView) {    int[] values=getEnteredTime(null);    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);  } else {    return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) || mTypedTimes.contains(getAmOrPmKeyCode(PM)));  }}  }
class C{  public boolean hasMoreLine(){  return mHasMoreByMaxLine;}  }
class C{  @Override public synchronized void addEdge(Edge edge) throws Exception {  Vertex vH, vT;  Vertex vHead=edge.getVertexA();  Vertex vTail=edge.getVertexB();  boolean bVertexMissed=false;  if ((vH=locateVertex(vHead)) == null) {    add(vH=vHead);    bVertexMissed=true;  }  if ((vT=locateVertex(vTail)) == null) {    add(vT=vTail);    bVertexMissed=true;  }  Edge e=null;  if (eclLocator == null) {    if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);    if (e == null) {      super.addEdge(edge);      return;    } else     return;  } else {    if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);    if (e == null) {      super.addEdge(edge);      eclLocator.addedEdge(edge);      return;    } else     return;  }}  }
class C{  public String process(Item syl) throws ProcessException {  int count=0;  Item daughter=syl.getItemAs(Relation.SYLLABLE_STRUCTURE).getLastDaughter();  while (daughter != null) {    if ("+".equals(getPhoneFeature(daughter,"vc"))) {      break;    }    daughter=daughter.getPrevious();    count++;  }  return Integer.toString(rail(count));}  }
class C{  public AgeFileFilter(long cutoff){  this(cutoff,true);}  }
class C{  public MaryHeader(DataInput input) throws MaryConfigurationException {  try {    this.load(input);  } catch (  IOException e) {    Log.d(Mary.LOG,"Cannot load mary header" + e);    throw new MaryConfigurationException("Cannot load mary header",e);  }  if (!hasLegalMagic() || !hasLegalType()) {    Log.d(Mary.LOG,"Ill-formed Mary header!");    throw new MaryConfigurationException("Ill-formed Mary header!");  }  assert hasLegalMagic();  assert hasLegalType();}  }
class C{  public TokenizerImpl(String string){  setInputText(string);}  }
class C{  public static int checkTinkerPackage(Context context,int tinkerFlag,File patchFile,ShareSecurityCheck securityCheck){  int returnCode=checkSignatureAndTinkerID(context,patchFile,securityCheck);  if (returnCode == ShareConstants.ERROR_PACKAGE_CHECK_OK) {    returnCode=checkPackageAndTinkerFlag(securityCheck,tinkerFlag);  }  return returnCode;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private String replaceVariablesInTemplate(Map<String,String> variables,ST template){  if (variables != null) {    for (    String key : variables.keySet()) {      String representation=variables.get(key) == null ? "null" : variables.get(key);      template.add(key,representation);    }  }  return template.render();}  }
class C{  public static boolean isOptionalClosing(String tagName){  return isElement(tagName,OPT_CLOSING);}  }
class C{  private boolean log(final List<T> data){  int size;  boolean connectionDown=false;  int commitedTags;  IFallback fallbackObj;  if (data == null) {    LOG.warn("log([Collection]) : called with a null collection.");    return connectionDown;  }  size=data.size();  if (size == 0) {    LOG.debug("log([Collection]) : called with an empty collection.");    return connectionDown;  }  if (LOG.isDebugEnabled()) {    StringBuffer str=new StringBuffer("log([Collection]) : ");    str.append(size);    str.append(" data to be logged.");    LOG.debug(str.toString());  }  try {    dbHandler.storeData(data);    LOG.info("log([Collection]) : " + size + " tags have been successfully logged into the DB");    alarmSender.dbUnavailable(DOWN,null,dbHandler.getDBInfo());  } catch (  IDBPersistenceException e) {    connectionDown=true;    commitedTags=e.getCommited();    if (size > commitedTags) {      List<T> temp=data.subList(commitedTags,size);synchronized (fallbackManager.getFallbackFileController()) {        if (!writeToFallback(temp)) {          for (int i=0; i < temp.size(); i++) {            fallbackObj=temp.get(i);            FALLBACK_LOG.info(fallbackObj.toString());          }        }      }    }    if (LOG.isDebugEnabled())     LOG.debug("log([Collection]) : Sending an alarm for warning about the DB problems " + e.getMessage());    alarmSender.dbUnavailable(ACTIVATED,e.getMessage(),dbHandler.getDBInfo());  }  return !connectionDown;}  }
class C{  public static void writeRJava(String outputDirectory,Map<String,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> packageRTypeResourceMap,boolean isFinal){  for (  String packageName : packageRTypeResourceMap.keySet()) {    Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> rTypeResourceMap=packageRTypeResourceMap.get(packageName);    writeRJava(outputDirectory,packageName,rTypeResourceMap,isFinal);  }}  }
class C{  public int computeId(final BitSet activeMatches,final IReadBlock readBlock){  if (readBlock.getNumberOfMatches() == 0)   return IdMapper.NOHITS_ID;  if (activeMatches.cardinality() > 0) {    int arrayLength=0;    boolean hasDisabledMatches=false;    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);      int taxId=(cNameIsTaxonomy ? matchBlock.getTaxonId() : matchBlock.getId(cName));      if (taxId > 0) {        if (!allowBelowSpeciesAssignment) {          int species=taxId2SpeciesId.get(taxId);          if (species != 0 && species != taxId)           taxId=species;        }        if (!idMapper.isDisabled(taxId)) {          final String address=fullTree.getAddress(taxId);          if (address != null) {            if (arrayLength == addressingArray.length)             AssignmentUsingWeightedLCA.resizeArray(addressingArray,2 * addressingArray.length);            if (ref2weight != null) {              final String ref=matchBlock.getTextFirstWord();              Integer weight=ref2weight.get(ref);              if (weight == null)               weight=1;              addressingArray[arrayLength++].set(address,weight);            } else {              final int refId=((MatchBlockDAA)matchBlock).getSubjectId();              int weight=Math.max(1,refId2weight[refId]);              addressingArray[arrayLength++].set(address,weight);            }          }        } else         hasDisabledMatches=true;      }    }    if (arrayLength == 0 && hasDisabledMatches) {      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);        int taxId=(cNameIsTaxonomy ? matchBlock.getTaxonId() : matchBlock.getId(cName));        if (taxId > 0) {          if (!allowBelowSpeciesAssignment) {            int species=taxId2SpeciesId.get(taxId);            if (species != 0 && species != taxId)             taxId=species;          }          if (!idMapper.isDisabled(taxId)) {            final String address=fullTree.getAddress(taxId);            if (address != null) {              if (arrayLength == addressingArray.length)               AssignmentUsingWeightedLCA.resizeArray(addressingArray,2 * addressingArray.length);              if (ref2weight != null) {                final String ref=matchBlock.getTextFirstWord();                Integer weight=ref2weight.get(ref);                if (weight == null)                 weight=1;                addressingArray[arrayLength++].set(address,weight);              } else {                final int refId=((MatchBlockDAA)matchBlock).getSubjectId();                int weight=Math.max(1,refId2weight[refId]);                addressingArray[arrayLength++].set(address,weight);              }            }          }        }      }    }    if (arrayLength > 0) {      final String address=computeWeightedLCA(percentToCover,addressingArray,arrayLength);      Integer id=fullTree.getAddress2Id(address);      if (id == null) {        System.err.println("WCA: internal error, address not mapped");      } else       if (id > 0) {        if (useIdentityFilter) {          return AssignmentUsingLCAForTaxonomy.adjustByPercentIdentity(id,activeMatches,readBlock,fullTree,name2IdMap);        }        if (allowBelowSpeciesAssignment)         return id;        int species=taxId2SpeciesId.get(id);        return species > 0 ? species : id;      }    }  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  @Override public WebElement findElementByCssSelector(String cssSelector){  return ((FindsByCssSelector)super.getWrappedDriver()).findElementByCssSelector(cssSelector);}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer fetchSize(int fetchSize){  this.fetchSize=fetchSize;  return this;}  }
class C{  public <U>Domino<T,U> dominoMap(final Domino<? super R,? extends U> domino){  return merge((Domino<R,U>[])new Domino[]{domino});}  }
class C{  protected void fail(){  Assert.fail();}  }
class C{  void addConnection(GSConnectionImpl connection) throws JMSException {  connectionsHash.put(connection.connFacParent.getSpaceURL().getURL(),connection);}  }
class C{  protected void stopListening(){  mouseListener.stopListening();}  }
class C{  public void internalTransform(Body b,String phaseName,Map<String,String> options){  JimpleBody body=(JimpleBody)b;  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding Jimple constructors...");  Chain<Unit> units=body.getUnits();  List<Unit> stmtList=new ArrayList<Unit>();  stmtList.addAll(units);  Iterator<Unit> it=stmtList.iterator();  Iterator<Unit> nextStmtIt=stmtList.iterator();  nextStmtIt.next();  LocalUses localUses=LocalUses.Factory.newLocalUses(body);  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    if (!(s instanceof AssignStmt))     continue;    Value lhs=((AssignStmt)s).getLeftOp();    if (!(lhs instanceof Local))     continue;    Value rhs=((AssignStmt)s).getRightOp();    if (!(rhs instanceof NewExpr))     continue;    if (nextStmtIt.hasNext()) {      Stmt next=(Stmt)nextStmtIt.next();      if (next instanceof InvokeStmt) {        InvokeStmt invoke=(InvokeStmt)next;        if (invoke.getInvokeExpr() instanceof SpecialInvokeExpr) {          SpecialInvokeExpr invokeExpr=(SpecialInvokeExpr)invoke.getInvokeExpr();          if (invokeExpr.getBase() == lhs) {            break;          }        }      }    }    if (!types.contains(((NewExpr)rhs).getType()))     continue;    List<UnitValueBoxPair> lu=localUses.getUsesOf(s);    Iterator<UnitValueBoxPair> luIter=lu.iterator();    boolean MadeNewInvokeExpr=false;    while (luIter.hasNext()) {      Unit use=((luIter.next())).unit;      if (!(use instanceof InvokeStmt))       continue;      InvokeStmt is=(InvokeStmt)use;      if (!(is.getInvokeExpr() instanceof SpecialInvokeExpr) || lhs != ((SpecialInvokeExpr)is.getInvokeExpr()).getBase())       continue;      AssignStmt constructStmt=Jimple.v().newAssignStmt(((DefinitionStmt)s).getLeftOp(),((DefinitionStmt)s).getRightOp());      constructStmt.setRightOp(Jimple.v().newNewExpr(((NewExpr)rhs).getBaseType()));      MadeNewInvokeExpr=true;      use.redirectJumpsToThisTo(constructStmt);      units.insertBefore(constructStmt,use);      constructStmt.addTag(s.getTag("SourceLnPosTag"));    }    if (MadeNewInvokeExpr) {      units.remove(s);    }  }}  }
class C{  public SpaceRemoteEvent(){  super(EMPTY_STRING,0,0,null);}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  public static Session parse(String uri) throws IllegalStateException, IOException {  SessionBuilder builder=SessionBuilder.getInstance().clone();  byte audioApi=0, videoApi=0;  if (builder.getVideoEncoder() == VIDEO_NONE && builder.getAudioEncoder() == AUDIO_NONE) {    SessionBuilder b=SessionBuilder.getInstance();    builder.setVideoEncoder(b.getVideoEncoder());    builder.setAudioEncoder(b.getAudioEncoder());  }  Session session=builder.build();  if (videoApi > 0 && session.getVideoTrack() != null) {    session.getVideoTrack().setStreamingMethod(videoApi);  }  if (audioApi > 0 && session.getAudioTrack() != null) {    session.getAudioTrack().setStreamingMethod(audioApi);  }  return session;}  }
class C{  private LogUtil(){  throw new AssertionError("com.sun.jini.logging.LogUtil cannot be instantiated");}  }
class C{  public Schema(){  this(10);}  }
class C{  public SecureSetCounterQuery counters(List<String> value){  return unsafeParam("counters",value);}  }
class C{  public SootClass makeClassRef(String className){  if (Scene.v().containsClass(className))   return Scene.v().getSootClass(className);  SootClass newClass;  newClass=new SootClass(className);  newClass.setResolvingLevel(SootClass.DANGLING);  Scene.v().addClass(newClass);  return newClass;}  }
class C{  public void updateEnableState(String commandName){  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState(commandName);  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {    ICommand command=menuItem2CommandFX.get(menuItem);    if (command.getName().equals(commandName)) {      menuItem.setDisable(!command.isApplicable());      if (command instanceof ICheckBoxCommand) {        ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());      }    }  }}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public NewArrayExpr newNewArrayExpr(Type type,Value size){  return new JNewArrayExpr(type,size);}  }
class C{  @Override public void onErrorResponse(VolleyError error){  Toast.makeText(Okhttp3GsonActivity.this,error != null && error.getMessage() != null ? error.getMessage() : "No error message",Toast.LENGTH_LONG).show();  Log.d("GsonRequest",error != null && error.getMessage() != null ? error.getMessage() : "No error message");}  }
class C{  public FaveGetPostsQuery(VkApiClient client,UserActor actor){  super(client,"fave.getPosts",GetPostsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void typeCheck(){  if (constant().error)   error("The integer literal \"" + getLITERAL() + "\" is too large for type long.");}  }
class C{  private void notifyDownloadResult(DownloadFileOperation download,RemoteOperationResult downloadResult){  mNotificationManager.cancel(R.string.downloader_download_in_progress_ticker);  if (!downloadResult.isCancelled()) {    int tickerId=(downloadResult.isSuccess()) ? R.string.downloader_download_succeeded_ticker : R.string.downloader_download_failed_ticker;    boolean needsToUpdateCredentials=(ResultCode.UNAUTHORIZED.equals(downloadResult.getCode()));    tickerId=(needsToUpdateCredentials) ? R.string.downloader_download_failed_credentials_error : tickerId;    mNotificationBuilder.setTicker(getString(tickerId)).setContentTitle(getString(tickerId)).setAutoCancel(true).setOngoing(false).setProgress(0,0,false);    if (needsToUpdateCredentials) {      Intent updateAccountCredentials=new Intent(this,AuthenticatorActivity.class);      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,download.getAccount());      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);      updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT));    } else {      Intent showDetailsIntent=new Intent();      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));    }    mNotificationBuilder.setContentText(ErrorMessageAdapter.getErrorCauseMessage(downloadResult,download,getResources()));    mNotificationManager.notify(tickerId,mNotificationBuilder.build());    if (downloadResult.isSuccess()) {      NotificationUtils.cancelWithDelay(mNotificationManager,R.string.downloader_download_succeeded_ticker,2000);    }  }}  }
class C{  public PhotosEditCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public GridLayout(String group){  super(group);  analyze=true;}  }
class C{  public static HashProvider best(HashParameters params){  return best(params,EnumSet.of(HashSupport.STATEFUL));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200404,skillname);}  }
class C{  public ISourceCommandTag findCommandTag(final Long commandTagId){  Map<Long,EquipmentConfiguration> equipmentMap=getProcessConfiguration().getEquipmentConfigurations();  for (  EquipmentConfiguration equipmentConfiguration : equipmentMap.values()) {    if (equipmentConfiguration.hasSourceCommandTag(commandTagId)) {      return equipmentConfiguration.getSourceCommandTag(commandTagId);    }  }  return null;}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  private void shutdown(){  for (  JarFileInfo jarFileInfo : lstJarFile) {    try {      jarFileInfo.jarFile.close();    } catch (    IOException e) {    }    File file=jarFileInfo.fileDeleteOnExit;    if (file != null && !file.delete()) {      hsDeleteOnExit.add(file);    }  }  File fileCfg=new File(System.getProperty("user.home") + File.separator + ".JarClassLoader");  deleteOldTemp(fileCfg);  persistNewTemp(fileCfg);}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200866,skillcaster,skillname);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysUserThirdparty other=(SysUserThirdparty)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId())) && (this.getProvider() == null ? other.getProvider() == null : this.getProvider().equals(other.getProvider()))&& (this.getOpenId() == null ? other.getOpenId() == null : this.getOpenId().equals(other.getOpenId()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  @Override protected Object onGetDefaultValue(TypedArray a,int index){  int colorInt;  String mHexDefaultValue=a.getString(index);  if (mHexDefaultValue != null && mHexDefaultValue.startsWith("#")) {    colorInt=convertToColorInt(mHexDefaultValue);    return colorInt;  } else {    return a.getColor(index,Color.BLACK);  }}  }
class C{  protected boolean isUseScrollableResultSet(){  return useScrollableResultSet;}  }
class C{  private void enqueueReusableAnnotationViewWithIdentifier(AnnotationView annotationView){  if (annotationView == null) {    throw new NullPointerException("AnnotationView cannot be null when enqueuing");  }  annotationView.setAnnotation(null);  if (this.mapReuseIdToAnnotationViewsQueue.containsKey(annotationView.getReuseId())) {    this.mapReuseIdToAnnotationViewsQueue.get(annotationView.getReuseId()).add(annotationView);  } else {    List<AnnotationView> annotationViewList=new ArrayList<>();    annotationViewList.add(annotationView);    this.mapReuseIdToAnnotationViewsQueue.put(annotationView.getReuseId(),annotationViewList);  }}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public DOMASBuilderImpl(XMLGrammarCachingConfiguration config){  super(config);}  }
class C{  protected XMLDTDScanner createDTDScanner(){  return new XMLDTDScannerImpl();}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_search,container,false);  initModel();  initPresenter();  initView(view);  messageManagePresenter.sendMessage(1,null);  return view;}  }
class C{  public static boolean isSdcardExist(){  if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))   return true; else   return false;}  }
class C{  public T walkInOptimizedOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  return walkInDefaultOrder(visitor,start,end);}  }
class C{  private void sourceIteratorExhaushted(){  if (_logger.isLoggable(Level.FINEST))   _logger.finest("shared iterator source wrapped iterator is exhausted [" + _identifier + "]");  _sourceIteratorExhausted=true;}  }
class C{  public void append(byte[] bytes,int offset,int length){  setCapacity(count + length);  System.arraycopy(bytes,offset,this.get(),count,length);  count=count + length;}  }
class C{  public void selectAll(boolean select){  if (select) {    table.getSelectionModel().selectAll();  } else {    table.getSelectionModel().clearSelection();  }}  }
class C{  protected void afterMove(){  if (!Silent) synchronized (System.err) {    System.err.println(this.getName() + ":" + "Move finished...");  }  super.afterMove();  addBehaviour(new InformForCompleteMoveBehaviour());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_BINDSTONE_CANNOT_FOR_INVALID_RIGHT(String value0){  return new SM_SYSTEM_MESSAGE(1400115,value0);}  }
class C{  private static void logThrow(Logger logger,Level level,String clazz,String method,String msg,Object[] args,Throwable t){  LogRecord lr=new LogRecord(level,msg);  lr.setLoggerName(logger.getName());  lr.setSourceClassName(clazz);  lr.setSourceMethodName(method);  lr.setParameters(args);  lr.setThrown(t);  logger.log(lr);}  }
class C{  public ObjectFactory(){}  }
class C{  public static void main(String args[]){  if (args.length < 2) {    System.out.println("Error: Must have 2 parameters, one is config filename, " + "the other is the local filename to upload");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  String local_filename=args[1];  try {    ClientGlobal.init(conf_filename);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    long startTime;    String group_name;    String remote_filename;    ServerInfo[] servers;    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    StorageServer storageServer=null;    StorageClient client=new StorageClient(trackerServer,storageServer);    byte[] file_buff;    NameValuePair[] meta_list;    String[] results;    String appender_filename;    String file_ext_name;    int errno;    meta_list=new NameValuePair[4];    meta_list[0]=new NameValuePair("width","800");    meta_list[1]=new NameValuePair("heigth","600");    meta_list[2]=new NameValuePair("bgcolor","#FFFFFF");    meta_list[3]=new NameValuePair("author","Mike");    file_buff="this is a test".getBytes(ClientGlobal.g_charset);    System.out.println("file length: " + file_buff.length);    group_name=null;    StorageServer[] storageServers=tracker.getStoreStorages(trackerServer,group_name);    if (storageServers == null) {      System.err.println("get store storage servers fail, error code: " + tracker.getErrorCode());    } else {      System.err.println("store storage servers count: " + storageServers.length);      for (int k=0; k < storageServers.length; k++) {        System.err.println((k + 1) + ". " + storageServers[k].getInetSocketAddress().getAddress().getHostAddress()+ ":"+ storageServers[k].getInetSocketAddress().getPort());      }      System.err.println("");    }    startTime=System.currentTimeMillis();    results=client.upload_appender_file(file_buff,"txt",meta_list);    System.out.println("upload_appender_file time used: " + (System.currentTimeMillis() - startTime) + " ms");    if (results == null) {      System.err.println("upload file fail, error code: " + client.getErrorCode());      return;    } else {      group_name=results[0];      remote_filename=results[1];      System.err.println("group_name: " + group_name + ", remote_filename: "+ remote_filename);      System.err.println(client.get_file_info(group_name,remote_filename));      servers=tracker.getFetchStorages(trackerServer,group_name,remote_filename);      if (servers == null) {        System.err.println("get storage servers fail, error code: " + tracker.getErrorCode());      } else {        System.err.println("storage servers count: " + servers.length);        for (int k=0; k < servers.length; k++) {          System.err.println((k + 1) + ". " + servers[k].getIpAddr()+ ":"+ servers[k].getPort());        }        System.err.println("");      }      meta_list=new NameValuePair[4];      meta_list[0]=new NameValuePair("width","1024");      meta_list[1]=new NameValuePair("heigth","768");      meta_list[2]=new NameValuePair("bgcolor","#000000");      meta_list[3]=new NameValuePair("title","Untitle");      startTime=System.currentTimeMillis();      errno=client.set_metadata(group_name,remote_filename,meta_list,ProtoCommon.STORAGE_SET_METADATA_FLAG_MERGE);      System.out.println("set_metadata time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("set_metadata success");      } else {        System.err.println("set_metadata fail, error no: " + errno);      }      meta_list=client.get_metadata(group_name,remote_filename);      if (meta_list != null) {        for (int i=0; i < meta_list.length; i++) {          System.out.println(meta_list[i].getName() + " " + meta_list[i].getValue());        }      }      startTime=System.currentTimeMillis();      file_buff=client.download_file(group_name,remote_filename);      System.out.println("download_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (file_buff != null) {        System.out.println("file length:" + file_buff.length);        System.out.println((new String(file_buff)));      }      file_buff="this is a slave buff".getBytes(ClientGlobal.g_charset);      appender_filename=remote_filename;      file_ext_name="txt";      startTime=System.currentTimeMillis();      errno=client.append_file(group_name,appender_filename,file_buff);      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info(group_name,appender_filename));      } else {        System.err.println("append file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.delete_file(group_name,remote_filename);      System.out.println("delete_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("Delete file success");      } else {        System.err.println("Delete file fail, error no: " + errno);      }    }    results=client.upload_appender_file(local_filename,null,meta_list);    if (results != null) {      String file_id;      int ts;      String token;      String file_url;      InetSocketAddress inetSockAddr;      group_name=results[0];      remote_filename=results[1];      file_id=group_name + StorageClient1.SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + remote_filename;      inetSockAddr=trackerServer.getInetSocketAddress();      file_url="http://" + inetSockAddr.getAddress().getHostAddress();      if (ClientGlobal.g_tracker_http_port != 80) {        file_url+=":" + ClientGlobal.g_tracker_http_port;      }      file_url+="/" + file_id;      if (ClientGlobal.g_anti_steal_token) {        ts=(int)(System.currentTimeMillis() / 1000);        token=ProtoCommon.getToken(file_id,ts,ClientGlobal.g_secret_key);        file_url+="?token=" + token + "&ts="+ ts;      }      System.err.println("group_name: " + group_name + ", remote_filename: "+ remote_filename);      System.err.println(client.get_file_info(group_name,remote_filename));      System.err.println("file url: " + file_url);      errno=client.download_file(group_name,remote_filename,0,0,"c:\\" + remote_filename.replaceAll("/","_"));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      errno=client.download_file(group_name,remote_filename,0,0,new DownloadFileWriter("c:\\" + remote_filename.replaceAll("/","-")));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      appender_filename=remote_filename;      file_ext_name=null;      startTime=System.currentTimeMillis();      errno=client.append_file(group_name,appender_filename,local_filename);      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info(group_name,appender_filename));      } else {        System.err.println("append file fail, error no: " + errno);      }    }    File f;    f=new File(local_filename);    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    } else {      file_ext_name=null;    }    results=client.upload_appender_file(null,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);    if (results != null) {      group_name=results[0];      remote_filename=results[1];      System.out.println("group name: " + group_name + ", remote filename: "+ remote_filename);      System.out.println(client.get_file_info(group_name,remote_filename));      appender_filename=remote_filename;      startTime=System.currentTimeMillis();      errno=client.append_file(group_name,appender_filename,f.length(),new UploadLocalFileSender(local_filename));      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info(group_name,appender_filename));      } else {        System.err.println("append file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.modify_file(group_name,appender_filename,0,f.length(),new UploadLocalFileSender(local_filename));      System.out.println("modify_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info(group_name,appender_filename));      } else {        System.err.println("modify file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.truncate_file(group_name,appender_filename);      System.out.println("truncate_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info(group_name,appender_filename));      } else {        System.err.println("truncate file fail, error no: " + errno);      }    } else {      System.err.println("Upload file fail, error no: " + errno);    }    storageServer=tracker.getFetchStorage(trackerServer,group_name,remote_filename);    if (storageServer == null) {      System.out.println("getFetchStorage fail, errno code: " + tracker.getErrorCode());      return;    }    System.out.println("active test to storage server: " + ProtoCommon.activeTest(storageServer.getSocket()));    storageServer.close();    System.out.println("active test to tracker server: " + ProtoCommon.activeTest(trackerServer.getSocket()));    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static double correlation(double[] x,double[] y){  if (x.length == y.length) {    double mx=MathUtils.mean(x);    double my=MathUtils.mean(y);    double sx=Math.sqrt(MathUtils.variance(x));    double sy=Math.sqrt(MathUtils.variance(y));    int n=x.length;    double nval=0.0;    for (int i=0; i < n; i++) {      nval+=(x[i] - mx) * (y[i] - my);    }    double r=nval / ((n - 1) * sx * sy);    return r;  } else   throw new IllegalArgumentException("vectors of different size");}  }
class C{  public SM_RESTORE_CHARACTER(int chaOid,boolean success){  this.chaOid=chaOid;  this.success=success;}  }
class C{  @Override public IString2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {  if (String2IntegerFileBasedABinMap.isTableFile(fileName))   return new String2IntegerFileBasedABinMap(fileName); else   return new Accession2IdMap(label2id,fileName,progress);}  }
class C{  public BigReal(char[] in,MathContext mc){  d=new BigDecimal(in,mc);}  }
class C{  public LikesDeleteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  private void changeState(final ScriptRunningState newState){  changeState(eventBus,script.getName(),newState,script,executor);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public PspRuntimeException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  @Override public int compareTo(IntArrayWrapper other){  for (int i=0; i < data.length; i++) {    if (data[i] > other.data[i]) {      return 1;    } else     if (data[i] < other.data[i]) {      return -1;    }  }  return 0;}  }
class C{  public void release(){  if (_entries != null)   _entries.freeSLHolder(_pos);  _pos=null;  _entries=null;}  }
class C{  private <T>Iterator<T> touch(Iterator<T> iter){  iter.hasNext();  return iter;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public WheelZoomControl(boolean inverted,boolean atPointer){  this.inverted=inverted;  this.atPointer=atPointer;}  }
class C{  public final Account removeAccountFromGameServer(int accountId){  return accountsOnGameServer.remove(accountId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_GUILD_WIN_CASTLE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400297,value0,value1);}  }
class C{  public BoardEditCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){  super(client,"board.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);  commentId(commentId);}  }
class C{  public static <S,K,V,M extends Map<K,V>>Collector<S,?,M> toMap(Function<? super S,? extends K> keyMapper,Function<? super S,? extends V> valueMapper,Supplier<M> mapSupplier){  return Collectors.toMap(keyMapper,valueMapper,StreamUtils.throwingMerger(),mapSupplier);}  }
class C{  public void onResume(boolean multitasking){}  }
class C{  public static String makeSafe(String s){  return (s == null) ? "" : s;}  }
class C{  public VideoGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static int calcCount(int totalhosts,int vcclustersize){  final Float f=((float)totalhosts / (float)vcclustersize);  final int i=(int)Math.ceil(f);  return i;}  }
class C{  public static Map<String,Object> updateContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  String contentIdFrom=(String)context.get("contentId");  String contentIdTo=(String)context.get("contentIdTo");  String contentId=(String)context.get("contentId");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue contentAssoc=null;  try {    contentAssoc=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",contentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (contentAssoc == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocUpdateError",locale));  }  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));  contentAssoc.put("dataSourceId",context.get("dataSourceId"));  contentAssoc.set("thruDate",context.get("thruDate"));  contentAssoc.set("sequenceNum",context.get("sequenceNum"));  contentAssoc.put("mapKey",context.get("mapKey"));  String upperCoordinateStr=(String)context.get("upperCoordinate");  if (UtilValidate.isEmpty(upperCoordinateStr)) {    contentAssoc.put("upperCoordinate",null);  } else {    contentAssoc.setString("upperCoordinate",upperCoordinateStr);  }  String leftCoordinateStr=(String)context.get("leftCoordinate");  if (UtilValidate.isEmpty(leftCoordinateStr)) {    contentAssoc.put("leftCoordinate",null);  } else {    contentAssoc.setString("leftCoordinate",leftCoordinateStr);  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String lastModifiedByUserLogin=userLoginId;  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  String permissionStatus=null;  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentIdTo",contentIdTo);  serviceInMap.put("contentIdFrom",contentIdFrom);  Map<String,Object> permResults=null;  try {    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem checking permissions","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));  }  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    try {      contentAssoc.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  public void removeException(SootClass e){  if (DEBUG)   System.out.println("Removing exception " + e);  if (exceptions == null)   exceptions=new ArrayList<SootClass>();  if (!exceptions.contains(e))   throw new RuntimeException("does not throw exception " + e.getName());  exceptions.remove(e);}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  private void initialize(){  if (_map == null) {synchronized (lazyLock) {      if (_map == null) {        _map=new ConcurrentHashMap<Key,SoftReference<Value>>();      }    }  }}  }
class C{  @Override public boolean isToTop(){  return toTop;}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  private static void dumpAudioTypes(){  AudioFileFormat.Type[] types=AudioSystem.getAudioFileTypes();  for (int i=0; i < types.length; i++) {    System.out.println(types[i].getExtension());  }}  }
class C{  @Override public void applyTo(List<Element> elements) throws MaryConfigurationException {  Log.d(Mary.LOG,"predicting duration");  HTSUttModel um=predictAndSetDuration(elements,elements);  if (predictDurAndF0) {    uttModels.put(elements,um);  }}  }
class C{  public CorpusPack(Language language){  this.language=language;}  }
class C{  public Fall(EntityLivingBase living,float distance,float damageMultiplier){  super(living);  this.distance=distance;  this.damageMultiplier=damageMultiplier;}  }
class C{  public Iterator items(String group){  return items(group,(Predicate)null);}  }
class C{  public static boolean isFullyEvolved(PokemonId pokemonId){  if (EEVEE_FINAL_EVOLUTIONS.contains(pokemonId)) {    return true;  } else {    PokemonId[] info=EVOLUTION_INFO.get(pokemonId);    return info[info.length - 1] == pokemonId;  }}  }
class C{  public boolean disableCharacteristicNotify(BluetoothGattCharacteristic characteristic){  if (characteristic != null && (characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {    BleLog.w(TAG,"characteristic.getProperties():" + characteristic.getProperties());    return setCharacteristicNotification(getBluetoothGatt(),characteristic,false);  } else {    return false;  }}  }
class C{  public void provideStepResult(ConditionStatus status){  LOG.debug("Evaluated loadable condition " + progressData.peekLast().getLoadableComponentInfo() + " with status "+ status.getMessage());  progressData.peekLast().setStepStatus(status);}  }
class C{  public VisibilityAnimator(){  super();}  }
class C{  public void typeCheck(){  TypeDecl type=getExpr().type();  if ((!type.isIntegralType() || type.isLong()) && !type.isEnumDecl() && !type.isString())   error("Switch expression must be of type " + "char, byte, short, int, enum, or string");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_CANCELED(DescriptionId race,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301035,race,descriptionId);}  }
class C{  public StaticFieldRef newStaticFieldRef(SootFieldRef f){  return new StaticFieldRef(f);}  }
class C{  static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public synchronized void parseCatalog(String fileName) throws IOException {  default_override=catalogManager.getPreferPublic();  catalogManager.debug.message(4,"Parse catalog: " + fileName);  catalogFiles.addElement(fileName);  parsePendingCatalogs();}  }
class C{  protected double t(final double m,final double mu,final double v,final double n){  return (m - mu) / FastMath.sqrt(v / n);}  }
class C{  public BoardGetCommentsQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  public Z Minus(Z a){  re=-a.re;  im=-a.im;  return this;}  }
class C{  public static boolean isUnix(){  return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0);}  }
class C{  private static String readAll(InputStreamReader reader) throws IOException {  return readAll(reader,1024 * 1024);}  }
class C{  public GroupsEditQuery publicDate(String value){  return unsafeParam("public_date",value);}  }
class C{  public void updateDisplayName(){  setDisplayName(computeDisplayName());}  }
class C{  public static DexlibAbstractInstruction fromInstruction(Instruction instruction,int codeAddress){  return fromOpcode(instruction.getOpcode(),instruction,codeAddress);}  }
class C{  public static Table read(String fileName,boolean header,char delimiter) throws IOException {  ColumnType[] columnTypes=detectColumnTypes(fileName,header,delimiter);  return read(columnTypes,true,delimiter,fileName);}  }
class C{  public GroupsEditQuery publicSubcategory(Integer value){  return unsafeParam("public_subcategory",value);}  }
class C{  public static NameValue create(String name,String value){  NameValue h=new NameValue();  h.name=name;  h.value=value;  return h;}  }
class C{  protected void postProcessEntities(List<T> entityList,WebOptions options,Map<String,String> parameters){}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static final Date toDate(float JD){  float Z=(normalizedJulian(JD)) + 0.5f;  float W=(int)((Z - 1867216.25f) / 36524.25f);  float X=(int)(W / 4f);  float A=Z + 1 + W - X;  float B=A + 1524;  float C=(int)((B - 122.1) / 365.25);  float D=(int)(365.25f * C);  float E=(int)((B - D) / 30.6001);  float F=(int)(30.6001f * E);  int day=(int)(B - D - F);  int month=(int)(E - 1);  if (month > 12) {    month=month - 12;  }  int year=(int)(C - 4715);  if (month > 2) {    year--;  }  Calendar c=Calendar.getInstance();  c.set(Calendar.YEAR,year);  c.set(Calendar.MONTH,month - 1);  c.set(Calendar.DATE,day);  return c.getTime();}  }
class C{  public static boolean isStoreInventoryRequiredAndAvailable(ServletRequest request,GenericValue product,BigDecimal quantity,Boolean wantRequired,Boolean wantAvailable){  GenericValue productStore=getProductStore(request);  if (productStore == null) {    Debug.logWarning("No ProductStore found, return false for inventory check",module);    return false;  }  if (product == null) {    Debug.logWarning("No Product passed, return false for inventory check",module);    return false;  }  if (quantity == null)   quantity=BigDecimal.ONE;  String productStoreId=productStore.getString("productStoreId");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  try {    Boolean requiredOkay=null;    if (wantRequired != null) {      Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryRequired",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"productStore",productStore));      if (ServiceUtil.isError(invReqResult)) {        Debug.logError("Error calling isStoreInventoryRequired service, result is: " + invReqResult,module);        return false;      }      requiredOkay=Boolean.valueOf(wantRequired.booleanValue() == "Y".equals(invReqResult.get("requireInventory")));    }    Boolean availableOkay=null;    if (wantAvailable != null) {      Map<String,Object> invAvailResult=dispatcher.runSync("isStoreInventoryAvailable",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"productStore",productStore,"quantity",quantity));      if (ServiceUtil.isError(invAvailResult)) {        Debug.logError("Error calling isStoreInventoryAvailable service, result is: " + invAvailResult,module);        return false;      }      availableOkay=Boolean.valueOf(wantAvailable.booleanValue() == "Y".equals(invAvailResult.get("available")));    }    if ((requiredOkay == null || requiredOkay.booleanValue()) && (availableOkay == null || availableOkay.booleanValue())) {      return true;    } else {      return false;    }  } catch (  GenericServiceException e) {    String errMsg="Fatal error calling inventory checking services: " + e.toString();    Debug.logError(e,errMsg,module);    return false;  }}  }
class C{  public boolean isSelectionFindable(){  return false;}  }
class C{  @Override public void messageReceived(ChannelHandlerContext channelHandlerContext,MessageEvent messageEvent) throws Exception {  ChannelBuffer in=(ChannelBuffer)messageEvent.getMessage();  try {    if (status.state == SessionStatus.State.PROCESSING) {      List<byte[]> pieces=new ArrayList<byte[]>(6);      int pos=in.bytesBefore((byte)' ');      do {        if (pos != -1) {          byte[] piece=new byte[pos];          in.readBytes(piece);          pieces.add(piece);          in.skipBytes(1);        }      } while ((pos=in.bytesBefore((byte)' ')) != -1);      byte[] remainder=new byte[in.readableBytes()];      in.readBytes(remainder);      pieces.add(remainder);      processLine(pieces,messageEvent.getChannel(),channelHandlerContext);    } else     if (status.state == SessionStatus.State.PROCESSING_MULTILINE) {      ChannelBuffer slice=in.copy();      byte[] payload=slice.array();      in.skipBytes(in.readableBytes());      continueSet(messageEvent.getChannel(),status,payload,channelHandlerContext);    } else {      throw new InvalidProtocolStateException("invalid protocol state");    }  }  finally {    if (status.state != SessionStatus.State.WAITING_FOR_DATA)     status.ready();  }}  }
class C{  private void changeColumnsConstraints(){  if (hasConstraintChanged) {    LogUtil.d(TAG,"do changeColumnsConstraints");    execute(getChangeColumnsConstraintsSQL(),mDb);  }}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public void addListener(final FileAlterationListener listener){  if (listener != null) {    listeners.add(listener);  }}  }
class C{  public BTPageFormatter(Schema sch,long[] flags){  this.sch=sch;  this.flags=flags;  myOffsetMap=BTreePage.offsetMap(sch);}  }
class C{  @Override public void notifyOnUpdate(final Tag tag,final List<Alarm> alarms){  TagWithAlarms tagWithAlarms=new TagWithAlarmsImpl(tag,alarms);  try {    publish(tagWithAlarms);  } catch (  JmsException e) {    LOGGER.error("notifyOnUpdate - Error publishing tag update to topic for tag " + tagWithAlarms.getTag().getId() + " - submitting for republication",e);    republisher.publicationFailed(tagWithAlarms);  }}  }
class C{  public Counter(){  this(0);}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public Builder showVerticalLineWhenStepsAreCollapsed(boolean showVerticalLineWhenStepsAreCollapsed){  this.showVerticalLineWhenStepsAreCollapsed=showVerticalLineWhenStepsAreCollapsed;  return this;}  }
class C{  public ClassicCompleteUnitGraph(Body body){  super(body);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void ensureBufferAvailable(TableBlock block) throws IOException {  if (!block.hasBuffer()) {synchronized (this) {      if (!block.hasBuffer()) {        ByteBuffer buffer=getBuffer();        block.setBuffer(buffer);      }    }  }}  }
class C{  @Override public LoginToken logIn(final String authHeader){  LOGGER.debug("Authentication header received as: {}",authHeader);  UserCredential credential=parseUsernamePassword(fromNullable(authHeader));  if (isBasicAuthenicationValid(credential)) {    return withAccessToken(credential.toBase64Encode()).withTokenType(BASIC).build();  } else {    throw new AuthenticationException("Authentication login failed. Invalid Login Credential");  }}  }
class C{  public LikesAddQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean loadLibraryFromTinker(Context context,String relativePath,String libname) throws UnsatisfiedLinkError {  final Tinker tinker=Tinker.with(context);  libname=libname.startsWith("lib") ? libname : "lib" + libname;  libname=libname.endsWith(".so") ? libname : libname + ".so";  String relativeLibPath=relativePath + "/" + libname;  if (tinker.isEnabledForNativeLib() && tinker.isTinkerLoaded()) {    TinkerLoadResult loadResult=tinker.getTinkerLoadResultIfPresent();    if (loadResult.libs != null) {      for (      String name : loadResult.libs.keySet()) {        if (name.equals(relativeLibPath)) {          String patchLibraryPath=loadResult.libraryDirectory + "/" + name;          File library=new File(patchLibraryPath);          if (library.exists()) {            boolean verifyMd5=tinker.isTinkerLoadVerify();            if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadResult.libs.get(name))) {              tinker.getLoadReporter().onLoadFileMd5Mismatch(library,ShareConstants.TYPE_LIBRARY);            } else {              System.load(patchLibraryPath);              TinkerLog.i(TAG,"loadLibraryFromTinker success:" + patchLibraryPath);              return true;            }          }        }      }    }  }  return false;}  }
class C{  @Override public void close(){  try {    raf.close();    System.err.println("Closing file: " + file.getName() + " ("+ pages+ "/"+ data.length+ " pages)");  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  @Override public WebElement findElementByLinkText(String linkText){  return ((FindsByLinkText)super.getWrappedDriver()).findElementByLinkText(linkText);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EnumInstanceExpr fullCopy(){  EnumInstanceExpr tree=(EnumInstanceExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 1:        tree.children[i]=null;      continue;case 2:    tree.children[i]=new List();  continue;}ASTNode child=(ASTNode)children[i];if (child != null) {child=child.fullCopy();tree.setChild(child,i);}}}return tree;}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public static long editUnitToMilliSeconds(BigInteger eu,BigFraction unitsInSec){  BigFraction editUnits=new BigFraction(eu);  return editUnits.divide(unitsInSec).multiply(1000).longValue();}  }
class C{  private Button createRadio(Composite parent,String label,int span){  Button button=new Button(parent,SWT.RADIO);  button.setText(label);  GridData data=new GridData();  data.horizontalSpan=span;  button.setLayoutData(data);  return button;}  }
class C{  public static Map<String,Object> handleFedexShipReply(String fDXShipReplyString,GenericValue shipmentRouteSegment,List<GenericValue> shipmentPackageRouteSegs,Locale locale) throws GenericEntityException {  List<Object> errorList=FastList.newInstance();  GenericValue shipmentPackageRouteSeg=shipmentPackageRouteSegs.get(0);  Document fdxShipReplyDocument=null;  try {    fdxShipReplyDocument=UtilXml.readXmlDocument(fDXShipReplyString,false);  } catch (  Exception e) {    String errorMessage="Error parsing the FDXShipReply: " + e.toString();    Debug.logError(e,errorMessage,module);  }  if (UtilValidate.isEmpty(fdxShipReplyDocument)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateParsingError",locale));  }  Element rootElement=fdxShipReplyDocument.getDocumentElement();  handleErrors(rootElement,errorList,locale);  if (UtilValidate.isNotEmpty(errorList)) {    return ServiceUtil.returnError(errorList);  }  Element trackingElement=UtilXml.firstChildElement(rootElement,"Tracking");  String trackingNumber=UtilXml.childElementValue(trackingElement,"TrackingNumber");  Element labelElement=UtilXml.firstChildElement(rootElement,"Labels");  String encodedImageString=UtilXml.childElementValue(labelElement,"OutboundLabel");  if (UtilValidate.isEmpty(encodedImageString)) {    Debug.logError("Cannot find FDXShipReply label. FDXShipReply document is: " + fDXShipReplyString,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateLabelNotFound",UtilMisc.toMap("shipmentPackageRouteSeg",shipmentPackageRouteSeg,"fDXShipReplyString",fDXShipReplyString),locale));  }  byte[] labelBytes=Base64.base64Decode(encodedImageString.getBytes());  if (labelBytes != null) {    shipmentPackageRouteSeg.setBytes("labelImage",labelBytes);  } else {    Debug.logInfo("Failed to either decode returned FedEx label or no data found in Labels/OutboundLabel.",module);  }  shipmentPackageRouteSeg.set("trackingCode",trackingNumber);  shipmentPackageRouteSeg.set("labelHtml",encodedImageString);  shipmentPackageRouteSeg.store();  shipmentRouteSegment.set("trackingIdNumber",trackingNumber);  shipmentRouteSegment.put("carrierServiceStatusId","SHRSCS_CONFIRMED");  shipmentRouteSegment.store();  return ServiceUtil.returnSuccess(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentConfirmed",locale));}  }
class C{  public boolean removeClientDataTagUpdateListener(final BaseTagListener listener){  boolean retval=false;  try {    listenersLock.writeLock().lock();    retval=listeners.remove(listener);  }  finally {    listenersLock.writeLock().unlock();  }  return retval;}  }
class C{  public void populate(ProcessBriefType selectedFunction){  ProcessDescriptionType selectedCustomFunction=(ProcessDescriptionType)selectedFunction;  this.selectedFunction.setSelectedCustomFunction(selectedCustomFunction);  valueList=this.selectedFunction.extractParameters();}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public void advance() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  current=next;  try {    while (states[++next] != FULL) {    }  } catch (  ArrayIndexOutOfBoundsException e) {    next=-2;    if (current < 0) {      throw new NoSuchElementException();    }  }}  }
class C{  public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  public static void applyForPermit(AirMapAvailablePermit permit,@Nullable AirMapCallback<AirMapPilotPermit> callback){  PermitService.applyForPermit(permit,callback);}  }
class C{  public XmlStreamWriter(OutputStream out){  this(out,null);}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  return intersects(cell.id());}  }
class C{  @ScheduleResult public int schedule(@NonNull Job job){  if (!mDriver.isAvailable()) {    return SCHEDULE_RESULT_NO_DRIVER_AVAILABLE;  }  return mDriver.schedule(job);}  }
class C{  IdeFrameFixture create(){  WelcomeFrameFixture.find(guiTest.robot()).createNewProject();  NewProjectWizardFixture newProjectWizard=NewProjectWizardFixture.find(guiTest.robot());  ConfigureAndroidProjectStepFixture configureAndroidProjectStep=newProjectWizard.getConfigureAndroidProjectStep();  configureAndroidProjectStep.enterApplicationName(myName).enterCompanyDomain(myDomain).enterPackageName(myPkg);  guiTest.setProjectPath(configureAndroidProjectStep.getLocationInFileSystem());  newProjectWizard.clickNext();  newProjectWizard.getConfigureFormFactorStep().selectMinimumSdkApi(MOBILE,myMinSdk);  newProjectWizard.clickNext();  newProjectWizard.clickNext();  newProjectWizard.getChooseOptionsForNewFileStep().enterActivityName(myActivity);  newProjectWizard.clickFinish();  guiTest.ideFrame().requestFocusIfLost();  if (myWaitForSync) {    guiTest.ideFrame().waitForGradleProjectSyncToFinish();  }  return guiTest.ideFrame();}  }
class C{  public void addTypeBound(Access node){  List<Access> list=(parent == null || state == null) ? getTypeBoundListNoTransform() : getTypeBoundList();  list.addChild(node);}  }
class C{  public void parse(XMLInputSource inputSource) throws IOException {  config.parse(inputSource);}  }
class C{  private void initialize(){  location=null;  IAdaptable element=getElement();  if (element instanceof ISVNRepositoryLocation) {    location=(ISVNRepositoryLocation)element;  } else {    Object adapter=element.getAdapter(ISVNRepositoryLocation.class);    if (adapter instanceof ISVNRepositoryLocation) {      location=(ISVNRepositoryLocation)adapter;    }  }  showCredentials=SVNProviderPlugin.getPlugin().getSVNClientManager().getSvnClientInterface().equals(COMMANDLINE_CLIENT);  if (!showCredentials) {    if (location.getUsername() != null && !location.getUsername().trim().equals(""))     showCredentials=true;  }}  }
class C{  private void addCachedLegion(Legion legion){  this.allCachedLegions.add(legion);}  }
class C{  public Builder reduceSequenceByWindow(IReducer reducer,WindowFunction windowFunction){  actionList.add(new DataAction(new ReduceSequenceByWindowTransform(reducer,windowFunction)));  return this;}  }
class C{  public LogSubject matchesNext(@Nullable MessageType type,String regex){  return assertRegex(type,regex);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_about);}  }
class C{  public void showEmptyView(){  if (null != mBaseLayout) {    mBaseLayout.showEmptyView();  }}  }
class C{  static void printarray(PrintStream out,String name,int expectedLen,double[] array){  out.println(name + "=");  MathUtils.checkDimension(expectedLen,array.length);  out.println(TABLE_START_DECL);  for (  double d : array) {    out.printf("        %s%n",format(d));  }  out.println(TABLE_END_DECL);}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == -1) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  public WallRestoreCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  protected void addNameToAST(String name){  if (sootNameToAST == null) {    sootNameToAST=new HashMap<String,Node>();  }  sootNameToAST.put(name,astNode);}  }
class C{  public PhotosSaveQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  public AccessToken accessToken(String code){  return getClient(null);}  }
class C{  public ChangeSet increment(String path,byte delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public static Object ElementDefaultValidImmediate(XSTypeDefinition type,String value,ValidationContext context,ValidatedInfo vinfo){  XSSimpleType dv=null;  if (type.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {    dv=(XSSimpleType)type;  } else {    XSComplexTypeDecl ctype=(XSComplexTypeDecl)type;    if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_SIMPLE) {      dv=ctype.fXSSimpleType;    } else     if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_MIXED) {      if (!((XSParticleDecl)ctype.getParticle()).emptiable())       return null;    } else {      return null;    }  }  Object actualValue=null;  if (dv == null) {    dv=STRING_TYPE;  }  try {    actualValue=dv.validate(value,context,vinfo);    if (vinfo != null)     actualValue=dv.validate(vinfo.stringValue(),context,vinfo);  } catch (  InvalidDatatypeValueException ide) {    return null;  }  return actualValue;}  }
class C{  public ZWaveMultiCommandCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  private void addBlock(Unit head,Unit tail,int index,int length,List<Block> blockList,Map<Unit,Block> unitToBlock){  Block block=new Block(head,tail,mBody,index,length,this);  blockList.add(block);  unitToBlock.put(tail,block);  unitToBlock.put(head,block);}  }
class C{  FourthMoment(){  super();  m4=Double.NaN;}  }
class C{  @VisibleForTesting public static void overrideAccountAdderForTests(AccountAdder adder){  sInstance=adder;}  }
class C{  public ByteOrderMark(String charsetName,int... bytes){  if (charsetName == null || charsetName.length() == 0) {    throw new IllegalArgumentException("No charsetName specified");  }  if (bytes == null || bytes.length == 0) {    throw new IllegalArgumentException("No bytes specified");  }  this.charsetName=charsetName;  this.bytes=new int[bytes.length];  System.arraycopy(bytes,0,this.bytes,0,bytes.length);}  }
class C{  public DynamicTemplateParameterContext addParameter(DynamicContextParameters param,String paramValue,boolean deleteOnExit,ContextInfo contextInfo){  return addParameter(param.getName(),paramValue,deleteOnExit,contextInfo);}  }
class C{  public void calculate(float dataMin,float dataMax){  float min=mCustomAxisMin ? mAxisMinimum : dataMin;  float max=mCustomAxisMax ? mAxisMaximum : dataMax;  float range=Math.abs(max - min);  if (range == 0f) {    max=max + 1f;    min=min - 1f;  }  if (!mCustomAxisMin) {    float bottomSpace=range / 100f * getSpaceBottom();    this.mAxisMinimum=(min - bottomSpace);  }  if (!mCustomAxisMax) {    float topSpace=range / 100f * getSpaceTop();    this.mAxisMaximum=(max + topSpace);  }  this.mAxisRange=Math.abs(this.mAxisMaximum - this.mAxisMinimum);}  }
class C{  public DynamicTemplateParameterContext addParameter(String paramName,String paramValue,boolean deleteOnExit,ContextInfo contextInfo){  paramName=parameterResolver.resolveTemplateParameter(paramName,contextInfo);  paramValue=parameterResolver.resolveTemplateParameter(paramValue,contextInfo);  params.put(paramName,new CustomParameterValue(paramValue,deleteOnExit));  return this;}  }
class C{  private Object invokeRemoteMethodControlMethod(Object proxy,Method method,Object[] args) throws Throwable {  String name=method.getName();  if (name.equals("setConstraints")) {    if (Proxy.getInvocationHandler(proxy) != this) {      throw new IllegalArgumentException("not proxy for this");    }    Remote newProxy;synchronized (this) {      newProxy=uproxy;    }    MethodConstraints mc=(MethodConstraints)args[0];    if (newProxy instanceof RemoteMethodControl) {      newProxy=(Remote)((RemoteMethodControl)newProxy).setConstraints(mc);    }    Class proxyClass=proxy.getClass();    return Proxy.newProxyInstance(getProxyLoader(proxyClass),proxyClass.getInterfaces(),new ActivatableInvocationHandler(id,newProxy,mc));  } else   if (name.equals("getConstraints")) {    return clientConstraints;  } else {    throw new AssertionError(method);  }}  }
class C{  public boolean rightAllowed(){  return (myFlags & RIGHT_EDGE) != 0;}  }
class C{  public void testStyleParentRename() throws Throwable {  doTestStyleInheritance("styles13.xml","styles13_after.xml","myStyle42");}  }
class C{  public boolean hasDimensionOrFilter(String key){  return dimensions.indexOf(new BaseDimensionalObject(key)) != -1 || filters.indexOf(new BaseDimensionalObject(key)) != -1;}  }
class C{  @SuppressWarnings("unchecked") public static Object convertType(Object obj,Class<?> targetClass,Locale locale,TimeZone timeZone,String format) throws Exception {  if (obj == null || obj == GenericEntity.NULL_FIELD) {    return null;  }  if (obj instanceof Node) {    Node node=(Node)obj;    String nodeValue=node.getTextContent();    if (targetClass == String.class) {      return nodeValue;    } else {      return convertType(nodeValue,targetClass,locale,timeZone,format);    }  }  if (targetClass == PlainString.class) {    return obj.toString();  }  Class<?> sourceClass=obj.getClass();  if (sourceClass == targetClass) {    return obj;  }  Converter<Object,Object> converter=(Converter<Object,Object>)Converters.getConverter(sourceClass,targetClass);  LocalizedConverter<Object,Object> localizedConverter=null;  try {    localizedConverter=(LocalizedConverter)converter;    if (locale == null) {      locale=Locale.getDefault();    }    if (timeZone == null) {      timeZone=TimeZone.getDefault();    }    if (format != null && format.isEmpty()) {      format=null;    }    return localizedConverter.convert(obj,locale,timeZone,format);  } catch (  ClassCastException e) {  }  return converter.convert(obj);}  }
class C{  public void run() throws RepoException {  List<String> params=Lists.newArrayList("add");  if (force) {    params.add("-f");  }  if (all) {    params.add("--all");  }  params.add("--");  Iterables.addAll(params,files);  git(getCwd(),addGitDirAndWorkTreeParams(params));}  }
class C{  public String process(Item item) throws ProcessException {  if (isAccented(item)) {    return "1";  } else {    return "0";  }}  }
class C{  public void addCondition(FallbackCondition condition){  this.fallbackConditions.add(condition);  Collections.sort(this.fallbackConditions);}  }
class C{  public String toString(){  return "ClusterUnitPitchmarkGenerator";}  }
class C{  public void disable(){  reportUsageEndedIfNecessary();  if (mSelectorTabObserver != null) {    mSelectorTabObserver.destroy();    mSelectorTabObserver=null;  }  if (mModelObserver != null) {    for (    TabModel model : mActivity.getTabModelSelector().getModels()) {      model.removeObserver(mModelObserver);    }    mModelObserver=null;  }  if (mContextualSearchObserver != null && mActivity.getContextualSearchManager() != null) {    mActivity.getContextualSearchManager().removeObserver(mContextualSearchObserver);    mContextualSearchObserver=null;  }}  }
class C{  public SpaceTypeDescriptorBuilder fifoGroupingProperty(String fifoGroupingPropertyPath){  if (fifoGroupingPropertyPath == null)   throw new IllegalArgumentException("Argument cannot be null - 'fifoGroupingPropertyPath'.");  if (_fifoGroupingPropertyPath != null)   throw new IllegalStateException("Cannot set fifo grouping to '" + fifoGroupingPropertyPath + "' - it was already set to '"+ _fifoGroupingPropertyPath+ "'.");  validateNoCollectionPath(fifoGroupingPropertyPath);  this._fifoGroupingPropertyPath=fifoGroupingPropertyPath;  return this;}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("ToolBarDemo2");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.add(new ToolBarDemo2());  frame.pack();  frame.setVisible(true);}  }
class C{  public DataSourceAttributeModel(){  columnList.add(Localisation.getString(DataSourceAttributeModel.class,"DataSourceAttributeModel.name"));  columnList.add(Localisation.getString(DataSourceAttributeModel.class,"DataSourceAttributeModel.type"));  columnList.add(Localisation.getString(DataSourceAttributeModel.class,"DataSourceAttributeModel.value"));  int index=0;  while (index < GEOMETRY_NAME.length) {    typeMap.put(CLASSTYPE[index],GEOMETRY_NAME[index]);    index++;  }}  }
class C{  private String detectScriptUrlPerDHCP(){  Logger.log(getClass(),LogLevel.DEBUG,"Searching per DHCP not supported yet.");  return null;}  }
class C{  protected void firePostPaint(Graphics2D g){  if (m_painters != null && m_painters.size() > 0) {    Object[] lstnrs=m_painters.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((PaintListener)lstnrs[i]).postPaint(this,g);      } catch (      Exception e) {        s_logger.warning("Exception thrown by PaintListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  public static ULong ulong(String value) throws NumberFormatException {  return value == null ? null : ULong.valueOf(value);}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  protected void loadUnitDatabase(String audioTimelineFileName,String basenameTimelineFileName,String unitFileName) throws IOException, MaryConfigurationException {  unitDB=new UnitDatabase();  UnitFileReader unitFileReader=new UnitFileReader(unitFileName);  TimelineReader audioTimelineReader=loadAudioTimeline(audioTimelineFileName);  TimelineReader basenameTimelineReader=new TimelineReader(basenameTimelineFileName);  unitDB.load(null,null,unitFileReader,null,audioTimelineReader,basenameTimelineReader,0);}  }
class C{  public static void abort(@Nullable AsyncAbortable abortable,boolean swallowIOException) throws IOException {  if (null == abortable) {    return;  }  try {    FutureUtils.result(abortable.asyncAbort());  } catch (  IOException ioe) {    if (swallowIOException) {      logger.warn("IOException thrown while aborting Abortable {} : ",abortable,ioe);    } else {      throw ioe;    }  }}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (this.textField != null) {    String text=textField.getText();    if ((text != null) && !text.isEmpty()) {      expression=getFilterFactory().literal(text);    }  }  return expression;}  }
class C{  @Override public void reset() throws XNIException {  super.reset();  fInDTD=false;  fVersion="1.0";  fStandalone=false;  fNamespaces=fConfiguration.getFeature(NAMESPACES);  fAugmentations=null;  fDeclaredAttrs=null;}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  public static byte[] bigDecimalToByte(BigDecimal num){  BigInteger sig=new BigInteger(num.unscaledValue().toString());  int scale=num.scale();  byte[] bscale=new byte[]{(byte)(scale)};  byte[] buff=sig.toByteArray();  byte[] completeArr=new byte[buff.length + bscale.length];  System.arraycopy(bscale,0,completeArr,0,bscale.length);  System.arraycopy(buff,0,completeArr,bscale.length,buff.length);  return completeArr;}  }
class C{  public static OfbizUrlBuilder from(WebappInfo webAppInfo,WebSiteProperties webSiteProps,Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {  ControllerConfig config=null;  String servletPath=null;  String contextPath=null;  if (webAppInfo != null) {    Assert.notNull("delegator",delegator);    config=ConfigXMLReader.getControllerConfig(webAppInfo);    servletPath=WebAppUtil.getControlServletPath(webAppInfo);    contextPath=webAppInfo.getContextRoot();  }  if (webSiteProps == null) {    webSiteProps=WebSiteProperties.defaults(delegator);  }  return new OfbizUrlBuilder(config,webSiteProps,servletPath,contextPath);}  }
class C{  public XMLDocumentParser(XMLParserConfiguration config){  super(config);}  }
class C{  public boolean isDOMDerivedFrom(String ancestorNS,String ancestorName,int derivationMethod){  if (ancestorName == null)   return false;  if (SchemaSymbols.URI_SCHEMAFORSCHEMA.equals(ancestorNS) && SchemaSymbols.ATTVAL_ANYTYPE.equals(ancestorName) && (((derivationMethod & DERIVATION_RESTRICTION) != 0) || (derivationMethod == DERIVATION_ANY))) {    return true;  }  if ((derivationMethod & DERIVATION_RESTRICTION) != 0) {    if (isDerivedByRestriction(ancestorNS,ancestorName,this)) {      return true;    }  }  if ((derivationMethod & DERIVATION_LIST) != 0) {    if (isDerivedByList(ancestorNS,ancestorName,this)) {      return true;    }  }  if ((derivationMethod & DERIVATION_UNION) != 0) {    if (isDerivedByUnion(ancestorNS,ancestorName,this)) {      return true;    }  }  if (((derivationMethod & DERIVATION_EXTENSION) != 0) && (((derivationMethod & DERIVATION_RESTRICTION) == 0) && ((derivationMethod & DERIVATION_LIST) == 0) && ((derivationMethod & DERIVATION_UNION) == 0))) {    return false;  }  if (((derivationMethod & DERIVATION_EXTENSION) == 0) && (((derivationMethod & DERIVATION_RESTRICTION) == 0) && ((derivationMethod & DERIVATION_LIST) == 0) && ((derivationMethod & DERIVATION_UNION) == 0))) {    return isDerivedByAny(ancestorNS,ancestorName,this);  }  return false;}  }
class C{  public void checkCompatibility(final DSCompiler compiler) throws MathIllegalArgumentException {  MathUtils.checkDimension(parameters,compiler.parameters);  MathUtils.checkDimension(order,compiler.order);}  }
class C{  public ArrayMap(int capacity){  super(capacity);}  }
class C{  @deprecated public TimeZoneFormat freeze(){  this._frozen=true;  return this;}  }
class C{  protected void showModel(EpoxyModel<?> model,boolean show){  if (model.isShown() == show) {    return;  }  model.show(show);  notifyModelChanged(model);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200285,skillname);}  }
class C{  protected double partialerror(double x[],double z) throws IllegalArgumentException {  if (x.length < 1) {    throw new IllegalArgumentException("Interpolation array cannot be empty.");  }  double out=1;  for (int i=0; i < x.length; i++) {    out*=(z - x[i]) / (i + 1);  }  return out;}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  private void addAnnotationOnTarget(ITextUnit textUnit,Issue issue){  TextContainer targetContainer=textUnit.getTarget(targetLocale);  addAnnotation(targetContainer,issue);}  }
class C{  public void initGui(){  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));  VRSettings.VrOptions[] buttons=hudOptions;  for (int var12=2; var12 < buttons.length + 2; ++var12) {    VRSettings.VrOptions var8=buttons[var12 - 2];    int width=this.width / 2 - 155 + var12 % 2 * 160;    int height=this.height / 6 + 21 * (var12 / 2) - 10;    if (var8 == VRSettings.VrOptions.DUMMY)     continue;    if (var8.getEnumFloat()) {      float minValue=0.0f;      float maxValue=1.0f;      float increment=0.01f;      if (var8 == VRSettings.VrOptions.CROSSHAIR_SCALE) {        minValue=0.25f;        maxValue=2.5f;        increment=0.01f;      } else       if (var8 == VRSettings.VrOptions.MENU_CROSSHAIR_SCALE) {        minValue=0.25f;        maxValue=2.5f;        increment=0.01f;      }      this.buttonList.add(new GuiSliderEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8),minValue,maxValue,increment,this.guivrSettings.getOptionFloatValue(var8)));    } else {      this.buttonList.add(new GuiSmallButtonEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8)));    }  }}  }
class C{  public AemSidekick clickTab(SidekickTab tab){  final By locator=By.className(AEM_SIDEKICK_TAB_ICON_PARTIAL_CLASS + tab.getTabName());  final WebElement element=driver.findElement(locator);  bobcatWait.withTimeout(Timeouts.SMALL).until(SidekickActions.showSidekickTab(element));  return this;}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public static double entropy(double[] vector){  if (vector == null)   return 0; else   if (vector.length < 1)   return 0; else {    double ret=0;    for (    double d : vector)     ret+=d * Math.log(d);    return ret;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static DataTag buildCreateAllFieldsDataTag(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  DataTag dataTag=DataTag.create("DataTag" + id,Integer.class,new DataTagAddress()).id(id).description("foo").mode(TagMode.OPERATIONAL).isLogged(false).minValue(0).maxValue(10).unit("testUnit").metadata(Metadata.builder().addMetadata("testMetadata",11).build()).build();  dataTag.setEquipmentId(10L);  properties.setProperty("name","DataTag" + id);  properties.setProperty("description","foo");  properties.setProperty("mode",String.valueOf(TagMode.OPERATIONAL.ordinal()));  properties.setProperty("dataType",Integer.class.getName());  properties.setProperty("isLogged",String.valueOf(false));  properties.setProperty("minValue",String.valueOf(0));  properties.setProperty("maxValue",String.valueOf(10));  properties.setProperty("address",new DataTagAddress().toConfigXML());  properties.setProperty("equipmentId",String.valueOf(10l));  properties.setProperty("metadata",Metadata.toJSON(Metadata.builder().addMetadata("testMetadata",11).build()));  properties.setProperty("unit","testUnit");  return dataTag;}  }
class C{  public TLongHash(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity);  this._hashingStrategy=strategy;}  }
class C{  @RequestMapping(value="/clients",method=RequestMethod.GET) public JsonResponse clients(@RequestParam("appId") Long appId){  Response<List<ClientDto>> clientsResp=clusterService.listClients(appId);  if (!clientsResp.isSuccess()) {    return JsonResponse.notOk(clientsResp.getErr());  }  return JsonResponse.ok(clientsResp.getData());}  }
class C{  public IResource updateCache(IResource resource,ISVNStatus status){  if (resource != null && status != null && status.getTextStatus() != null && !resource.exists() && status.getTextStatus().equals(SVNStatusKind.MISSING) && (status.getLastChangedRevision() == null || status.getLastChangedRevision().getNumber() == -1)) {    statusCache.removeStatus(resource);    return resource;  }  return statusCache.addStatus(resource,new LocalResourceStatus(status,getURL(status),checkForReadOnly));}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (textField != null) {      if (undoRedoObject.getNewValue() instanceof String) {        String newValue=(String)undoRedoObject.getNewValue();        textField.setText(newValue);      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VarDeclStmt fullCopy(){  VarDeclStmt tree=(VarDeclStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void resizeFrames(int numberOfFrames){  times=new int[numberOfFrames];  frames=new short[numberOfFrames][];  sizes=new int[numberOfFrames];  this.numberOfFrames=numberOfFrames;}  }
class C{  public static DateTime quarterlyRound(DateTime from){  DateTime.Property property=from.monthOfYear();  return property.addToCopy(-1 * ((property.get() - 1) % 3)).monthOfYear().roundFloorCopy();}  }
class C{  public static int deleteAccountsCharsFromDB(int accountId){  List<Integer> charIds=DAOManager.getDAO(PlayerDAO.class).getPlayerOidsOnAccount(accountId);  for (  int playerId : charIds) {    deletePlayerFromDB(playerId);  }  return charIds.size();}  }
class C{  public static Intent createAddToHomeIntent(String url,String title,Bitmap icon,Intent shortcutIntent){  Intent i=new Intent(INSTALL_SHORTCUT);  i.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);  i.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  i.putExtra(Intent.EXTRA_SHORTCUT_ICON,icon);  return i;}  }
class C{  public CreateSiteWindow typeName(String name){  textField.setValue(name);  return this;}  }
class C{  public static long toEpochDay(int packedDate){  long y=PackedLocalDate.getYear(packedDate);  long m=PackedLocalDate.getMonthValue(packedDate);  long total=0;  total+=365 * y;  if (y >= 0) {    total+=(y + 3) / 4 - (y + 99) / 100 + (y + 399) / 400;  } else {    total-=y / -4 - y / -100 + y / -400;  }  total+=((367 * m - 362) / 12);  total+=getDayOfMonth(packedDate) - 1;  if (m > 2) {    total--;    if (!isLeapYear(packedDate)) {      total--;    }  }  return total - DAYS_0000_TO_1970;}  }
class C{  public void printList(){  System.out.println(this.optionsTable.toString());}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  protected BoardCloseTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  protected int computeHashCode(){  final int prime=31;  int result=1;  result=prime * result + ((owner == null) ? 0 : owner.hashCode());  if (stmtAfterAssignStmt != null && (assignedLocal.getType() instanceof RefLikeType)) {    result=prime * result + lmaa.instanceKeyString(assignedLocal,stmtAfterAssignStmt).hashCode();  } else   if (stmtAfterAssignStmt == null) {    result=prime * result + pts.hashCode();  }  return result;}  }
class C{  public static String[] handle(String[] args,ICommand command,ICommandSender sender){  final CommandEvent event=new CommandEvent(args,command,sender);  return OpenModLoader.getEventBus().post(event) ? event.getArgs() : null;}  }
class C{  public static ICacheSystem create(Configuration conf){  String server=conf.getString("cache.url");  MemCache f=new MemCache();  SockIOPool pool=SockIOPool.getInstance();  pool.setServers(new String[]{server.substring(Cache.MEMCACHED.length())});  pool.setFailover(true);  pool.setInitConn(10);  pool.setMinConn(5);  pool.setMaxConn(1000);  pool.setMaintSleep(30);  pool.setNagle(false);  pool.setSocketTO(3000);  pool.setAliveCheck(true);  pool.initialize();  f.memCachedClient=new MemCachedClient();  return f;}  }
class C{  public static String pad(Object obj,int totalChars){  return pad(obj.toString(),totalChars);}  }
class C{  public PointVectorValuePair(final double[] point,final double[] value){  this(point,value,true);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private static String parsePiece(String whole,int[] idx) throws IllegalArgumentException {  int start=idx[0];  while (idx[0] < whole.length() && isDigitOrPeriod(whole.charAt(idx[0]))) {    idx[0]++;  }  if (idx[0] == whole.length()) {    throw new IllegalArgumentException(whole);  }  idx[0]++;  return whole.substring(start,idx[0]);}  }
class C{  public void computeStandaloneResponse() throws IOException {  String inputData=SystemConfiguration.getProperty("pir.inputData");  try {    BufferedReader br=new BufferedReader(new FileReader(inputData));    String line;    JSONParser jsonParser=new JSONParser();    while ((line=br.readLine()) != null) {      logger.info("line = " + line);      JSONObject jsonData=(JSONObject)jsonParser.parse(line);      logger.info("jsonData = " + jsonData.toJSONString());      String selector=QueryUtils.getSelectorByQueryTypeJSON(qSchema,jsonData);      addDataElement(selector,jsonData);    }    br.close();  } catch (  Exception e) {    e.printStackTrace();  }  String outputFile=SystemConfiguration.getProperty("pir.outputFile");  setResponseElements();  new LocalFileSystemStore().store(outputFile,response);}  }
class C{  public GroupsGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private boolean doChangeState(State currentState,State acquireState) throws RemoteException, InterruptedException {  ServiceItem activeCandidate=findActive();  if (activeCandidate != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Advance from [" + currentState + "] to ["+ acquireState+ "] was rejected - found ["+ activeCandidate.service+ "] in [ACTIVE] state");    }    return false;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("Advance from [" + currentState + "] to ["+ acquireState+ "] was accepted");  }  return changeState(currentState,acquireState,false);}  }
class C{  static VersionNumber parseFirstVersionNumber(@Nonnull final String text){  Check.notNull(text,"text");  final Matcher matcher=VERSIONNUMBER_WITH_SUFFIX.matcher(text);  String[] split=null;  String ext=null;  if (matcher.find()) {    split=matcher.group(MAJOR_INDEX).split("\\.");    ext=matcher.group(EXTENSION_INDEX);  }  final String extension=ext == null ? VersionNumber.EMPTY_EXTENSION : trimRight(ext);  return split == null ? VersionNumber.UNKNOWN : new VersionNumber(Arrays.asList(split),extension);}  }
class C{  void addRow(int rowIndex,Table sourceTable){  for (int i=0; i < columnCount(); i++) {    Column column=column(i);    ColumnType type=column.type();switch (type) {case FLOAT:      FloatColumn floatColumn=(FloatColumn)column;    floatColumn.add(sourceTable.floatColumn(i).get(rowIndex));  break;case INTEGER:IntColumn intColumn=(IntColumn)column;intColumn.add(sourceTable.intColumn(i).get(rowIndex));break;case SHORT_INT:ShortColumn shortColumn=(ShortColumn)column;shortColumn.add(sourceTable.shortColumn(i).get(rowIndex));break;case LONG_INT:LongColumn longColumn=(LongColumn)column;longColumn.add(sourceTable.longColumn(i).get(rowIndex));break;case BOOLEAN:BooleanColumn booleanColumn=(BooleanColumn)column;booleanColumn.add(sourceTable.booleanColumn(i).get(rowIndex));break;case LOCAL_DATE:DateColumn localDateColumn=(DateColumn)column;localDateColumn.add(sourceTable.dateColumn(i).getInt(rowIndex));break;case LOCAL_TIME:TimeColumn timeColumn=(TimeColumn)column;timeColumn.add(sourceTable.timeColumn(i).getInt(rowIndex));break;case LOCAL_DATE_TIME:DateTimeColumn localDateTimeColumn=(DateTimeColumn)column;localDateTimeColumn.add(sourceTable.dateTimeColumn(i).getLong(rowIndex));break;case CATEGORY:CategoryColumn categoryColumn=(CategoryColumn)column;categoryColumn.add(sourceTable.categoryColumn(i).get(rowIndex));break;default :throw new RuntimeException("Unhandled column type updating columns");}}}  }
class C{  public boolean intersects(Rectangle2D r){  return intersects(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  void assignLocalToField(Local right,Local left,String field){  Iterator itLeft=locals.get(left).iterator();  while (itLeft.hasNext()) {    PurityNode nodeLeft=(PurityNode)itLeft.next();    Iterator itRight=locals.get(right).iterator();    while (itRight.hasNext()) {      PurityNode nodeRight=(PurityNode)itRight.next();      PurityEdge edge=cacheEdge(new PurityEdge(nodeLeft,field,nodeRight,true));      if (edges.put(nodeLeft,edge))       backEdges.put(nodeRight,edge);    }    if (!nodeLeft.isInside())     mutated.put(nodeLeft,field);  }  if (doCheck)   sanityCheck();}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  public static void removeEndpoints(String inputFile,String outputFile,int energyBufferLength,double speechStartLikelihood,double speechEndLikelihood,double shiftFromMinimumEnergyCenter,int numClusters,double minimumStartSilenceInSeconds,double minimumEndSilenceInSeconds) throws IOException, UnsupportedAudioFileException {  AudioInputStream ais=AudioSystem.getAudioInputStream(new File(inputFile));  if (!ais.getFormat().getEncoding().equals(AudioFormat.Encoding.PCM_SIGNED)) {    ais=AudioSystem.getAudioInputStream(AudioFormat.Encoding.PCM_SIGNED,ais);  }  if (ais.getFormat().getChannels() > 1) {    throw new IllegalArgumentException("Can only deal with mono audio signals");  }  int samplingRate=(int)ais.getFormat().getSampleRate();  DoubleDataSource signal=new AudioDoubleDataSource(ais);  int framelength=(int)(0.01 * samplingRate);  EnergyAnalyser ea=new EnergyAnalyser(signal,framelength,framelength,samplingRate);  double[][] speechStretches=ea.getSpeechStretchesUsingEnergyHistory(energyBufferLength,speechStartLikelihood,speechEndLikelihood,shiftFromMinimumEnergyCenter,numClusters);  ais.close();  try {    ais=AudioSystem.getAudioInputStream(new File(inputFile));  } catch (  UnsupportedAudioFileException e) {    e.printStackTrace();  }  signal=new AudioDoubleDataSource(ais);  double[] x=signal.getAllData();  ais.close();  if (speechStretches.length == 0) {    System.out.println("No segments detected in " + inputFile + " copying whole file...");    DDSAudioInputStream outputAudio=new DDSAudioInputStream(new BufferedDoubleDataSource(x),ais.getFormat());    AudioSystem.write(outputAudio,AudioFileFormat.Type.WAVE,new File(outputFile));  } else {    int numStretches=speechStretches.length;    int speechStartIndex=(int)(samplingRate * speechStretches[0][0]);    int speechEndIndex=(int)(samplingRate * speechStretches[numStretches - 1][1]);    int silStartRequired=Math.max(0,(int)(samplingRate * minimumStartSilenceInSeconds));    int silStartLen=0;    if (speechStartIndex < silStartRequired) {      silStartLen=silStartRequired - speechStartIndex;      speechStartIndex=0;    } else     speechStartIndex-=silStartRequired;    double[] silStart=null;    if (silStartLen > 0)     silStart=SignalProcUtils.getWhiteNoise(silStartLen,1e-20);    int silEndRequired=Math.max(0,(int)(samplingRate * minimumEndSilenceInSeconds));    int silEndLen=0;    if (x.length - speechEndIndex < silEndRequired) {      silEndLen=silEndRequired - (x.length - speechEndIndex);      speechEndIndex=x.length - 1;    } else     speechEndIndex+=silEndRequired;    double[] silEnd=null;    if (silEndLen > 0)     silEnd=SignalProcUtils.getWhiteNoise(silEndLen,1e-20);    double[] y=null;    if (speechEndIndex - speechStartIndex + silStartLen + silEndLen > 0)     y=new double[speechEndIndex - speechStartIndex + silStartLen + silEndLen]; else     throw new Error("No output samples to write for " + inputFile);    int start=0;    if (silStartLen > 0) {      System.arraycopy(silStart,0,y,start,silStartLen);      start+=silStartLen;    }    if (speechEndIndex - speechStartIndex > 0) {      System.arraycopy(x,speechStartIndex,y,start,speechEndIndex - speechStartIndex);      start+=(speechEndIndex - speechStartIndex);    }    if (silEndLen > 0) {      System.arraycopy(silEnd,0,y,start,silEndLen);      start+=silEndLen;    }    DDSAudioInputStream outputAudio=new DDSAudioInputStream(new BufferedDoubleDataSource(y),ais.getFormat());    AudioSystem.write(outputAudio,AudioFileFormat.Type.WAVE,new File(outputFile));  }}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  @Override public boolean hasFixedPropertiesArray(){  return false;}  }
class C{  public static String[] wordWrap(String rawString,int lineLength){  if (rawString == null) {    return new String[]{""};  }  if (rawString.length() <= lineLength && !rawString.contains("\n")) {    return new String[]{rawString};  }  char[] rawChars=(rawString + ' ').toCharArray();  StringBuilder word=new StringBuilder();  StringBuilder line=new StringBuilder();  List<String> lines=new LinkedList<String>();  int lineColorChars=0;  for (int i=0; i < rawChars.length; i++) {    char c=rawChars[i];    if (c == ChatColor.COLOR_CHAR) {      word.append(ChatColor.getByChar(rawChars[i + 1]));      lineColorChars+=2;      i++;      continue;    }    if (c == ' ' || c == '\n') {      if (line.length() == 0 && word.length() > lineLength) {        for (        String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {          lines.add(partialWord);        }      } else       if (line.length() + word.length() - lineColorChars == lineLength) {        line.append(word);        lines.add(line.toString());        line=new StringBuilder();        lineColorChars=0;      } else       if (line.length() + 1 + word.length() - lineColorChars > lineLength) {        for (        String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {          lines.add(line.toString());          line=new StringBuilder(partialWord);        }        lineColorChars=0;      } else {        if (line.length() > 0) {          line.append(' ');        }        line.append(word);      }      word=new StringBuilder();      if (c == '\n') {        lines.add(line.toString());        line=new StringBuilder();      }    } else {      word.append(c);    }  }  if (line.length() > 0) {    lines.add(line.toString());  }  if (lines.get(0).length() == 0 || lines.get(0).charAt(0) != ChatColor.COLOR_CHAR) {    lines.set(0,ChatColor.WHITE + lines.get(0));  }  for (int i=1; i < lines.size(); i++) {    final String pLine=lines.get(i - 1);    final String subLine=lines.get(i);    char color=pLine.charAt(pLine.lastIndexOf(ChatColor.COLOR_CHAR) + 1);    if (subLine.length() == 0 || subLine.charAt(0) != ChatColor.COLOR_CHAR) {      lines.set(i,ChatColor.getByChar(color) + subLine);    }  }  return lines.toArray(new String[lines.size()]);}  }
class C{  public synchronized void reloadConfiguration(){  properties=null;  finalParameters.clear();}  }
class C{  public static void openUrl(Context context,String url){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setData(Uri.parse(url));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  synchronized private void saveState(){  try {    File oldFile=new File(m_FileNameWithoutExtention + ".old");    if (oldFile.exists())     oldFile.delete(); else     if (m_ContainerFile != null)     m_ContainerFile.renameTo(oldFile);    if (m_rootContainerElement != null) {      PrintStream attrStream=new PrintStream(new FileOutputStream(m_FileNameWithoutExtention + ".xml"));      JSpaceUtilities.domWriter(m_rootContainerElement,attrStream,"");      attrStream.close();    }    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("The " + m_ContainerFile + " XML file for "+ _containerName+ " container has been updated");    }  } catch (  FileNotFoundException ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"FileNotFoundException: ",ex);    }  }}  }
class C{  private void saveSettings(){  Properties pOut=new Properties();  pOut.setProperty("ModelDir",ModelsRootDirEdt.getText());  pOut.setProperty("SummaryDir",SummariesRootDirEdt.getText());  pOut.setProperty("OutputFile",OutputFileEdt.getText());  pOut.setProperty("Threads",ThreadCntEdt.getValue().toString());  pOut.setProperty("Silent",String.valueOf(SilentChk.isSelected()));  pOut.setProperty("ShowProgress",String.valueOf(ProgressChk.isSelected()));  pOut.setProperty("DoWord",String.valueOf(DoWordChk.isSelected()));  pOut.setProperty("DoChar",String.valueOf(DoCharChk.isSelected()));  pOut.setProperty("Use",OccurencesChk.isSelected() ? "Occurences" : "Distros");  pOut.setProperty("CharMin",String.valueOf(CharMinEdt.getValue()));  pOut.setProperty("CharMax",String.valueOf(CharMaxEdt.getValue()));  pOut.setProperty("CharDist",String.valueOf(CharDistEdt.getValue()));  pOut.setProperty("WordMin",String.valueOf(WordMinEdt.getValue()));  pOut.setProperty("WordMax",String.valueOf(WordMaxEdt.getValue()));  pOut.setProperty("WordDist",String.valueOf(WordDistEdt.getValue()));  try {    FileOutputStream fsOut=new FileOutputStream("AutoSummENGGUI.properties");    pOut.storeToXML(fsOut,"");    fsOut.flush();    fsOut.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);  }}  }
class C{  @Nullable public static String createFilePositionUrl(@NotNull File file,int line,int column){  try {    String fileUrl=SdkUtils.fileToUrlString(file);    if (line != -1) {      if (column > 0) {        return fileUrl + ':' + line+ ':'+ column;      } else {        return fileUrl + ':' + line;      }    }    return fileUrl;  } catch (  MalformedURLException e) {    Logger.getInstance(HtmlLinkManager.class).error(e);    return null;  }}  }
class C{  public void addNeighbor(Integer nodeId){  nodeNeighbors.add(nodeId);}  }
class C{  protected void decomposePolygon(List<Vector2> polygon,List<Convex> polygons){  int size=polygon.size();  Vector2 upperIntersection=new Vector2();  Vector2 lowerIntersection=new Vector2();  double upperDistance=Double.MAX_VALUE;  double lowerDistance=Double.MAX_VALUE;  double closestDistance=Double.MAX_VALUE;  int upperIndex=0;  int lowerIndex=0;  int closestIndex=0;  List<Vector2> lower=new ArrayList<Vector2>();  List<Vector2> upper=new ArrayList<Vector2>();  for (int i=0; i < size; i++) {    Vector2 p=polygon.get(i);    Vector2 p0=polygon.get(i - 1 < 0 ? size - 1 : i - 1);    Vector2 p1=polygon.get(i + 1 == size ? 0 : i + 1);    if (isReflex(p0,p,p1)) {      for (int j=0; j < size; j++) {        Vector2 q=polygon.get(j);        Vector2 q0=polygon.get(j - 1 < 0 ? size - 1 : j - 1);        Vector2 q1=polygon.get(j + 1 == size ? 0 : j + 1);        Vector2 s=new Vector2();        if (left(p0,p,q) && rightOn(p0,p,q0)) {          if (this.getIntersection(p0,p,q,q0,s)) {            if (right(p1,p,s)) {              double dist=p.distanceSquared(s);              if (dist < lowerDistance) {                lowerDistance=dist;                lowerIntersection.set(s);                lowerIndex=j;              }            }          }        }        if (left(p1,p,q1) && rightOn(p1,p,q)) {          if (this.getIntersection(p1,p,q,q1,s)) {            if (left(p0,p,s)) {              double dist=p.distanceSquared(s);              if (dist < upperDistance) {                upperDistance=dist;                upperIntersection.set(s);                upperIndex=j;              }            }          }        }      }      if (lowerIndex == (upperIndex + 1) % size) {        Vector2 s=upperIntersection.sum(lowerIntersection).multiply(0.5);        if (i < upperIndex) {          lower.addAll(polygon.subList(i,upperIndex + 1));          lower.add(s);          upper.add(s);          if (lowerIndex != 0)           upper.addAll(polygon.subList(lowerIndex,size));          upper.addAll(polygon.subList(0,i + 1));        } else {          if (i != 0)           lower.addAll(polygon.subList(i,size));          lower.addAll(polygon.subList(0,upperIndex + 1));          lower.add(s);          upper.add(s);          upper.addAll(polygon.subList(lowerIndex,i + 1));        }      } else {        if (lowerIndex > upperIndex) {          upperIndex+=size;        }        closestIndex=lowerIndex;        for (int j=lowerIndex; j <= upperIndex; j++) {          int jmod=j % size;          Vector2 q=polygon.get(jmod);          if (q == p || q == p0 || q == p1)           continue;          double dist=p.distanceSquared(q);          if (dist < closestDistance) {            if (this.isVisible(polygon,i,jmod)) {              closestDistance=dist;              closestIndex=jmod;            }          }        }        if (i < closestIndex) {          lower.addAll(polygon.subList(i,closestIndex + 1));          if (closestIndex != 0)           upper.addAll(polygon.subList(closestIndex,size));          upper.addAll(polygon.subList(0,i + 1));        } else {          if (i != 0)           lower.addAll(polygon.subList(i,size));          lower.addAll(polygon.subList(0,closestIndex + 1));          upper.addAll(polygon.subList(closestIndex,i + 1));        }      }      if (lower.size() < upper.size()) {        decomposePolygon(lower,polygons);        decomposePolygon(upper,polygons);      } else {        decomposePolygon(upper,polygons);        decomposePolygon(lower,polygons);      }      return;    }  }  if (polygon.size() < 3) {    throw new IllegalArgumentException(Messages.getString("geometry.decompose.crossingEdges"));  }  Vector2[] vertices=new Vector2[polygon.size()];  polygon.toArray(vertices);  polygons.add(Geometry.createPolygon(vertices));}  }
class C{  public static void validateCmdLineArguments(DppInputParameters inputParameters) throws ArgumentValidationException {switch (inputParameters.getCmdLineArgs().getMode()) {case convert:    validateConvertMode(inputParameters);  break;case metadata:validateMetadataMode(inputParameters);break;case audiomap:validateAudiomapMode(inputParameters);break;default :}}  }
class C{  public String process(Item item) throws ProcessException {  String type;  Item s=item.getItemAs(Relation.SYLLABLE_STRUCTURE);  if (s == null) {    type="single";  } else   if (s.getNext() == null) {    if (s.getPrevious() == null) {      type="single";    } else {      type="final";    }  } else   if (s.getPrevious() == null) {    type="initial";  } else {    type="mid";  }  return type;}  }
class C{  private void initPresenter(){  this.photosPresenter=new PhotosImplementor(photosModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.swipeBackPresenter=new SwipeBackImplementor(this);}  }
class C{  Node internalRemoveChild(Node oldChild,boolean replace) throws DOMException {  CoreDocumentImpl ownerDocument=ownerDocument();  if (ownerDocument.errorChecking) {    if (isReadOnly()) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);    }    if (oldChild != null && oldChild.getParentNode() != this) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);      throw new DOMException(DOMException.NOT_FOUND_ERR,msg);    }  }  ChildNode oldInternal=(ChildNode)oldChild;  ownerDocument.removingNode(this,oldInternal,replace);  if (oldInternal == value) {    oldInternal.isFirstChild(false);    value=oldInternal.nextSibling;    ChildNode firstChild=(ChildNode)value;    if (firstChild != null) {      firstChild.isFirstChild(true);      firstChild.previousSibling=oldInternal.previousSibling;    }  } else {    ChildNode prev=oldInternal.previousSibling;    ChildNode next=oldInternal.nextSibling;    prev.nextSibling=next;    if (next == null) {      ChildNode firstChild=(ChildNode)value;      firstChild.previousSibling=prev;    } else {      next.previousSibling=prev;    }  }  ChildNode oldPreviousSibling=oldInternal.previousSibling();  oldInternal.ownerNode=ownerDocument;  oldInternal.isOwned(false);  oldInternal.nextSibling=null;  oldInternal.previousSibling=null;  changed();  ownerDocument.removedNode(this,replace);  checkNormalizationAfterRemove(oldPreviousSibling);  return oldInternal;}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public void removeAllEffects(){  this.removeAllEffects(false);}  }
class C{  private Object readResolve() throws ObjectStreamException {  UInteger cached;  rangeCheck(value);  if ((cached=getCached(value)) != null)   return cached;  return this;}  }
class C{  public void cancelUseItem(){}  }
class C{  private String doLenientDetection(String httpContentType,XmlStreamReaderException ex) throws IOException {  if (httpContentType != null && httpContentType.startsWith("text/html")) {    httpContentType=httpContentType.substring("text/html".length());    httpContentType="text/xml" + httpContentType;    try {      return calculateHttpEncoding(httpContentType,ex.getBomEncoding(),ex.getXmlGuessEncoding(),ex.getXmlEncoding(),true);    } catch (    XmlStreamReaderException ex2) {      ex=ex2;    }  }  String encoding=ex.getXmlEncoding();  if (encoding == null) {    encoding=ex.getContentTypeEncoding();  }  if (encoding == null) {    encoding=defaultEncoding == null ? UTF_8 : defaultEncoding;  }  return encoding;}  }
class C{  public static Properties loadProperties(String configurationPath) throws Exception {  Properties props=new Properties();  try (FileInputStream inputStream=new FileInputStream(configurationPath)){    props.load(inputStream);  }   return props;}  }
class C{  public String makeLinkFullWithQueryString(HttpServletRequest request,HttpServletResponse response,String url,ConfigXMLReader.RequestResponse requestResponse){  return makeLinkWithQueryString(request,response,url,true,null,null,requestResponse);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  return null;}  }
class C{  private static Rectangle[] widgetsToRectangles(ScoutWidget[] list){  Rectangle[] ret=new Rectangle[list.length];  for (int i=0; i < ret.length; i++) {    int x=list[i].mConstraintWidget.getX();    int y=list[i].mConstraintWidget.getY();    int w=list[i].mConstraintWidget.getWidth();    int h=list[i].mConstraintWidget.getHeight();    ret[i]=new Rectangle(x,y,w,h);  }  return ret;}  }
class C{  public boolean equals(Object other){  if (other instanceof UnitValueBoxPair) {    UnitValueBoxPair otherPair=(UnitValueBoxPair)other;    if (unit.equals(otherPair.unit) && valueBox.equals(otherPair.valueBox))     return true;  }  return false;}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {  try {    this.tabelName=rep.getStepAttributeString(idStep,"TableName");    this.outputRowSize=rep.getStepAttributeString(idStep,"outputRowSize");    this.databaseName=rep.getStepAttributeString(idStep,"databaseName");    this.tableName=rep.getStepAttributeString(idStep,"tableName");    this.dimensionCount=rep.getStepAttributeString(idStep,"dimensionCount");    this.noDictionaryDims=rep.getStepAttributeString(idStep,"noDictionaryDims");    this.noDictionaryDims=rep.getStepAttributeString(idStep,"noDictionaryDimsMapping");    this.complexDimensionCount=rep.getStepAttributeString(idStep,"complexDimensionCount");    this.measureCount=rep.getStepAttributeString(idStep,"measureCount");    this.updateMemberRequest=rep.getStepAttributeString(idStep,"isUpdateMemberRequest");    this.measureDataType=rep.getStepAttributeString(idStep,"measureDataType");    this.partitionID=rep.getStepAttributeString(idStep,"partitionID");    this.segmentId=rep.getStepAttributeString(idStep,"segmentId");    this.taskNo=rep.getStepAttributeString(idStep,"taskNo");  } catch (  Exception ex) {    throw new KettleException(BaseMessages.getString(PKG,"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo",new String[0]),ex);  }}  }
class C{  private static final String export(Settings settings){  StringBuilder sb=new StringBuilder();  if (settings.getStepFrequency() != Settings.DEFAULT_STEP_FREQUENCY) {    sb.append(TAB2).append("settings.setStepFrequency(").append(1.0 / settings.getStepFrequency()).append(");").append(NEW_LINE);  }  if (settings.getMaximumTranslation() != Settings.DEFAULT_MAXIMUM_TRANSLATION) {    sb.append(TAB2).append("settings.setMaximumTranslation(").append(settings.getMaximumTranslation()).append(");").append(NEW_LINE);  }  if (settings.getMaximumRotation() != Settings.DEFAULT_MAXIMUM_ROTATION) {    sb.append(TAB2).append("settings.setMaximumRotation(Math.toRadians(").append(Math.toDegrees(settings.getMaximumRotation())).append("));").append(NEW_LINE);  }  if (!settings.isAutoSleepingEnabled()) {    sb.append(TAB2).append("settings.setAutoSleep(false);").append(NEW_LINE);  }  if (settings.getSleepLinearVelocity() != Settings.DEFAULT_SLEEP_LINEAR_VELOCITY) {    sb.append(TAB2).append("settings.setSleepLinearVelocity(").append(settings.getSleepLinearVelocity()).append(");").append(NEW_LINE);  }  if (settings.getSleepAngularVelocity() != Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY) {    sb.append(TAB2).append("settings.setSleepAngularVelocity(Math.toRadians(").append(Math.toDegrees(settings.getSleepAngularVelocity())).append("));").append(NEW_LINE);  }  if (settings.getSleepTime() != Settings.DEFAULT_SLEEP_TIME) {    sb.append(TAB2).append("settings.setSleepTime(").append(settings.getSleepTime()).append(");").append(NEW_LINE);  }  if (settings.getVelocityConstraintSolverIterations() != Settings.DEFAULT_SOLVER_ITERATIONS) {    sb.append(TAB2).append("settings.setVelocityConstraintSolverIterations(").append(settings.getVelocityConstraintSolverIterations()).append(");").append(NEW_LINE);  }  if (settings.getPositionConstraintSolverIterations() != Settings.DEFAULT_SOLVER_ITERATIONS) {    sb.append(TAB2).append("settings.setPositionConstraintSolverIterations(").append(settings.getPositionConstraintSolverIterations()).append(");").append(NEW_LINE);  }  if (settings.getWarmStartDistance() != Settings.DEFAULT_WARM_START_DISTANCE) {    sb.append(TAB2).append("settings.setWarmStartDistance(").append(settings.getWarmStartDistance()).append(");").append(NEW_LINE);  }  if (settings.getRestitutionVelocity() != Settings.DEFAULT_RESTITUTION_VELOCITY) {    sb.append(TAB2).append("settings.setRestitutionVelocity(").append(settings.getRestitutionVelocity()).append(");").append(NEW_LINE);  }  if (settings.getLinearTolerance() != Settings.DEFAULT_LINEAR_TOLERANCE) {    sb.append(TAB2).append("settings.setLinearTolerance(").append(settings.getLinearTolerance()).append(");").append(NEW_LINE);  }  if (settings.getAngularTolerance() != Settings.DEFAULT_ANGULAR_TOLERANCE) {    sb.append(TAB2).append("settings.setAngularTolerance(Math.toRadians(").append(Math.toDegrees(settings.getAngularTolerance())).append("));").append(NEW_LINE);  }  if (settings.getMaximumLinearCorrection() != Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION) {    sb.append(TAB2).append("settings.setMaximumLinearCorrection(").append(settings.getMaximumLinearCorrection()).append(");").append(NEW_LINE);  }  if (settings.getMaximumAngularCorrection() != Settings.DEFAULT_MAXIMUM_ANGULAR_CORRECTION) {    sb.append(TAB2).append("settings.setMaximumAngularCorrection(Math.toRadians(").append(Math.toDegrees(settings.getMaximumAngularCorrection())).append("));").append(NEW_LINE);  }  if (settings.getBaumgarte() != Settings.DEFAULT_BAUMGARTE) {    sb.append(TAB2).append("settings.setBaumgarte(").append(settings.getBaumgarte()).append(");").append(NEW_LINE);  }  if (settings.getContinuousDetectionMode() != ContinuousDetectionMode.ALL) {    sb.append(TAB2).append("settings.setContinuousDetectionMode(Settings.ContinuousDetectionMode.").append(settings.getContinuousDetectionMode()).append(");").append(NEW_LINE);  }  return sb.toString();}  }
class C{  public void changeTopic(String topic){  skype.changeGroupTopic(this,topic);}  }
class C{  public static boolean interfaceOf(Object obj,Class<?> interfaceClass){  Class<?> objectClass=obj.getClass();  return interfaceOf(objectClass,interfaceClass);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_ME_TO_B(String skillcaster,String value0d,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200529,skillcaster,value0d,skilltarget,value0,skillname);}  }
class C{  protected AbstractIntegrator(final String name){  this.name=name;  stepHandlers=new ArrayList<>();  stepStart=null;  stepSize=Double.NaN;  eventsStates=new ArrayList<>();  statesInitialized=false;  evaluations=new Incrementor();}  }
class C{  public boolean containsCondition(FallbackCondition condition){  return this.fallbackConditions.contains(condition);}  }
class C{  public void put(E key,double count,boolean keepHigher){  if (keepHigher && entries.containsKey(key)) {    double oldCount=entries.get(key);    if (count > oldCount) {      entries.put(key,count);    }  } else {    entries.put(key,count);  }  dirty=true;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static HelpNode fromXml(String xml) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(new StringReader(xml)));}  }
class C{  public static JsonNode replaceChildren(JsonNode parent,Map<String,JsonNode> replacingChildren){  if (parent == null) {    return null;  }  List<JsonField> fields=new ArrayList<JsonField>();  for (  JsonField field : parent.getFieldList()) {    String key=field.getName().getText();    if (parent.isNode(key)) {      if (replacingChildren.containsKey(key)) {        fields.add(JsonNodeFactories.field(key,replacingChildren.get(key)));      } else {        fields.add(field);      }    }  }  return JsonNodeFactories.object(fields);}  }
class C{  @NonNull public String tag(){  return getClass().getSimpleName();}  }
class C{  @Override protected void reset(){  Pokedex.initiate(this);  List<Pokemon> pokemonList=Pokedex.getBillsPCID();  List<UndoAdapter.UndoItem> list=new ArrayList<>();  for (int i=0; i < pokemonList.size(); i++) {    UndoAdapter.UndoItem undoItem=new UndoAdapter.UndoItem("",pokemonList.get(i));    list.add(i,undoItem);  }  adapter.swap(list);}  }
class C{  public void process(int direction,IReplicationFilterEntry replicationFilterEntry,String remoteSpaceMemberName){  ReplicationOperationType operationType=replicationFilterEntry.getOperationType();  String uid=replicationFilterEntry.getUID();switch (operationType) {case TAKE:    if (uid != null) {      phantomTable.add(uid);    }  break;case WRITE:case UPDATE:if (phantomTable.contains(uid)) {  replicationFilterEntry.discard();}break;}}  }
class C{  protected PhotosGetByIdQueryWithExtended photos(List<String> value){  return unsafeParam("photos",value);}  }
class C{  public static UShort valueOf(short value){  return new UShort(value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_WAIT_TO_QUIT(String value0){  return new SM_SYSTEM_MESSAGE(1300698,value0);}  }
class C{  public FileTreeNode(Path parent) throws SecurityException, FileNotFoundException {  if (parent == null) {    throw new FileNotFoundException();  }  this.name=parent.toString();  Path pathPath=parent;  path=pathPath.toString();  isDir=true;  isRoot=true;  setUserObject(this.name);}  }
class C{  public static void writeString(DataOutputStream os,String s) throws IOException {  if (s == null) {    os.writeInt(-1);  } else {    byte array[]=s.getBytes();    os.writeInt(array.length);    os.write(array);  }}  }
class C{  public float fractionFilled(){  return mWidgetArea / (float)mGroupArea;}  }
class C{  public Iterator outNeighbors(Node n){  return new NeighborIterator(n,outEdges(n));}  }
class C{  @Override public void justSelected(){  setCachedExpression(generateExpression());  checkSymbolIsValid();}  }
class C{  public static int compareResourceFiles(@Nullable VirtualFile file1,@Nullable VirtualFile file2){  if (file1 != null && file1.equals(file2) || file1 == file2) {    return 0;  } else   if (file1 != null && file2 != null) {    boolean xml1=file1.getFileType() == StdFileTypes.XML;    boolean xml2=file2.getFileType() == StdFileTypes.XML;    if (xml1 != xml2) {      return xml1 ? -1 : 1;    }    VirtualFile parent1=file1.getParent();    VirtualFile parent2=file2.getParent();    if (parent1 != null && parent2 != null && !parent1.equals(parent2)) {      String parentName1=parent1.getName();      String parentName2=parent2.getName();      boolean qualifier1=parentName1.indexOf('-') != -1;      boolean qualifier2=parentName2.indexOf('-') != -1;      if (qualifier1 != qualifier2) {        return qualifier1 ? 1 : -1;      }      if (qualifier1) {        FolderConfiguration config1=FolderConfiguration.getConfigForFolder(parentName1);        FolderConfiguration config2=FolderConfiguration.getConfigForFolder(parentName2);        if (config1 != null && config2 != null) {          return config1.compareTo(config2);        } else         if (config1 != null) {          return -1;        } else         if (config2 != null) {          return 1;        }        int delta=parentName1.compareTo(parentName2);        if (delta != 0) {          return delta;        }      }    }    return file1.getPath().compareTo(file2.getPath());  } else   if (file1 != null) {    return -1;  } else {    return 1;  }}  }
class C{  public static ObjectMapper createObjectMapper(){  return new ObjectMapper(new YAMLFactory());}  }
class C{  public synchronized void acquireLock(String tableName,long transNum,LockType lockType){  while (this.databaseLocked) {    if (this.databaseTransactionOwner == transNum) {      break;    }    try {      wait();    } catch (    InterruptedException e) {    }  }  this.databaseTransactionOwner=transNum;  this.databaseLocked=true;}  }
class C{  @After public void afterTest(){  removeTestData();}  }
class C{  protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){  int l=(int)(4 / normalisedTransitionBandwidth);  if (l % 2 == 0)   l++;  return l;}  }
class C{  private void initPresenter(){  this.userPresenter=new UserImplementor(userModel,this);  this.loadPresenter=new LoadImplementor(loadModel,this);}  }
class C{  public void chooseDevice(@NotNull String label){  JButton menuButton=findToolbarButton("The virtual device to render the layout with");  myRobot.click(menuButton);  clickPopupMenuItemMatching(new DeviceNameMatcher(label),myToolBar.getComponent(),myRobot);}  }
class C{  public RepublisherImpl(Publisher<T> publisher,String eventName){  super();  this.publisher=publisher;  this.eventName=eventName;}  }
class C{  protected Type(String name){  super(name);}  }
class C{  public void callHandler(String handlerName,String data,CallBackFunction callBack){  doSend(handlerName,data,callBack);}  }
class C{  private void beforeMovingToPrimary() throws SpaceComponentsInitializeException {switch (_spaceMode) {case NONE:    initPrimaryOnlyComponents();  initBackupComponents();break;case BACKUP:initPrimaryOnlyComponents();break;}}  }
class C{  @deprecated protected int handleGetExtendedYear(){  int eyear;  int eyear;  if (newerField(19,1) == 19) {    eyear=internalGet(19,1);  } else {    int eyear;    if (isAmeteAlemEra()) {      eyear=internalGet(1,5501) - 5500;    } else {      int era=internalGet(0,1);      int eyear;      if (era == 1) {        eyear=internalGet(1,1);      } else       eyear=internalGet(1,1) - 5500;    }  }  return eyear;}  }
class C{  @POST @Path("{experimentID}/pages") @Consumes(APPLICATION_JSON) @ApiOperation(value="Post a list of pages to an experiment",notes="Pages can only be added to an experiment with DRAFT, RUNNING, or PAUSED states") @Timed public Response postPages(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,final ExperimentPageList experimentPageList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),CREATE);  pages.postPages(experimentID,experimentPageList,authorization.getUserInfo(userName));  return httpHeader.headers(CREATED).build();}  }
class C{  public SyllableIterator(FeatureFileReader features,int fromUnitIndex,int toUnitIndex){  this.features=features;  this.fromUnitIndex=fromUnitIndex;  this.toUnitIndex=toUnitIndex;  FeatureDefinition featureDefinition=features.getFeatureDefinition();  fiPhone=featureDefinition.getFeatureIndex("phone");  fvPhone_0=featureDefinition.getFeatureValueAsByte(fiPhone,"0");  fvPhone_Silence=featureDefinition.getFeatureValueAsByte(fiPhone,"_");  fiSylStart=featureDefinition.getFeatureIndex("segs_from_syl_start");  fiSylEnd=featureDefinition.getFeatureIndex("segs_from_syl_end");  String halfphoneFeature="halfphone_lr";  if (featureDefinition.hasFeature(halfphoneFeature)) {    isHalfphone=true;    fiLR=featureDefinition.getFeatureIndex(halfphoneFeature);    fvLR_L=featureDefinition.getFeatureValueAsByte(fiLR,"L");    fvLR_R=featureDefinition.getFeatureValueAsByte(fiLR,"R");  } else {    isHalfphone=false;    fiLR=fvLR_L=fvLR_R=0;  }  i=fromUnitIndex;}  }
class C{  public int id(){  return id;}  }
class C{  public AwsIotCompletion(AWSIotMessage req,long timeout,boolean isAsync){  super(req.getTopic(),req.getQos(),req.getPayload());  this.request=req;  this.timeout=timeout;  this.isAsync=isAsync;}  }
class C{  public CastExpr newCastExpr(Value op1,Type t){  return new GCastExpr(op1,t);}  }
class C{  private int metricName_index(dictionary_delta dict_delta,MetricName metric){  final BiMap<MetricName,Integer> dict=from_.getMetricDict().inverse();  final Integer resolved=dict.get(metric);  if (resolved != null)   return resolved;  final int allocated=allocate_index_(dict);  dict.put(metric,allocated);  path_dictionary_delta mdd=new path_dictionary_delta();  mdd.id=allocated;  mdd.value=new_path_(metric.getPath());  dict_delta.mdd=Stream.concat(Arrays.stream(dict_delta.mdd),Stream.of(mdd)).toArray(null);  LOG.log(Level.FINE,"dict_delta.mdd: {0} items (added {1})",new Object[]{dict_delta.mdd.length,metric});  return allocated;}  }
class C{  private void resetTouchBehaviors(){  if (mBehaviorTouchView != null) {    final Behavior b=((LayoutParams)mBehaviorTouchView.getLayoutParams()).getBehavior();    if (b != null) {      final long now=SystemClock.uptimeMillis();      final MotionEvent cancelEvent=MotionEvent.obtain(now,now,MotionEvent.ACTION_CANCEL,0.0f,0.0f,0);      b.onTouchEvent(this,mBehaviorTouchView,cancelEvent);      cancelEvent.recycle();    }    mBehaviorTouchView=null;  }  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final View child=getChildAt(i);    final LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.resetTouchBehaviorTracking();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200945,skillcaster,skilltarget,skillname);}  }
class C{  public BoxUser.Info createAppUser(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId) throws BoxSDKServiceException {  logger.debug("Creating Box App User: {}",MOJITO_APP_USER_NAME);  JWTEncryptionPreferences jwtEncryptionPreferences=boxSDKJWTProvider.getJWTEncryptionPreferences(publicKeyId,privateKey,privateKeyPassword);  BoxDeveloperEditionAPIConnection appEnterpriseConnection=BoxDeveloperEditionAPIConnection.getAppEnterpriseConnection(enterpriseId,clientId,clientSecret,jwtEncryptionPreferences,new InMemoryLRUAccessTokenCache(5));  CreateUserParams createUserParams=new CreateUserParams();  createUserParams.setSpaceAmount(UNLIMITED_SPACE);  try {    return BoxUser.createAppUser(appEnterpriseConnection,MOJITO_APP_USER_NAME,createUserParams);  } catch (  BoxAPIException e) {    throw new BoxSDKServiceException("Couldn't create App User",e);  }}  }
class C{  public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  iWordDist=iWordWindow;  iCharDist=iCharWindow;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  Iterator iTexts=FileNames.iterator();  while (iTexts.hasNext()) {    String sFile=(String)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(sFile));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));  }}  }
class C{  public int mouseDragged(MouseEvent e){  mIsControlDown=e.isControlDown();  mIsShiftDown=e.isShiftDown();  mIsAltDown=e.isAltDown();  int x=mViewTransform.getAndroidX(e.getX());  int y=mViewTransform.getAndroidY(e.getY());  return mouseDragged(x,y);}  }
class C{  public void download(String remoteFileName,File localFile,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  download(remoteFileName,localFile,0,listener);}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.startCDATA(augs);  }}  }
class C{  private void showNoAppForFileTypeToast(Context context){  Toast.makeText(context,R.string.file_list_no_app_for_file_type,Toast.LENGTH_SHORT).show();}  }
class C{  public String toString(){  return String.valueOf(getValue());}  }
class C{  private void makeCacheDirectory(){  File cacheDir=new File(CACHE_DIRECTORY);  if (!cacheDir.exists()) {    cacheDir.mkdir();  }}  }
class C{  public static byte[] compressForZlib(byte[] bytesToCompress){  Deflater deflater=new Deflater();  deflater.setInput(bytesToCompress);  deflater.finish();  byte[] bytesCompressed=new byte[Short.MAX_VALUE];  int numberOfBytesAfterCompression=deflater.deflate(bytesCompressed);  byte[] returnValues=new byte[numberOfBytesAfterCompression];  System.arraycopy(bytesCompressed,0,returnValues,0,numberOfBytesAfterCompression);  return returnValues;}  }
class C{  public void write(OutputStream outputStream,Storable obj) throws IOException {  ObjectOutputStream oos=new ObjectOutputStream(outputStream);  oos.writeObject(obj);}  }
class C{  public Object clone(){  TIntArrayList list=null;  try {    list=(TIntArrayList)super.clone();    list._data=toNativeArray();  } catch (  CloneNotSupportedException e) {  }  return list;}  }
class C{  protected void cloneNode(CoreDocumentImpl newdoc,boolean deep){  if (needsSyncChildren()) {    synchronizeChildren();  }  if (deep) {    HashMap reversedIdentifiers=null;    if (identifiers != null) {      reversedIdentifiers=new HashMap();      Iterator entries=identifiers.entrySet().iterator();      while (entries.hasNext()) {        Map.Entry entry=(Map.Entry)entries.next();        Object elementId=entry.getKey();        Object elementNode=entry.getValue();        reversedIdentifiers.put(elementNode,elementId);      }    }    for (ChildNode kid=firstChild; kid != null; kid=kid.nextSibling) {      newdoc.appendChild(newdoc.importNode(kid,true,true,reversedIdentifiers));    }  }  newdoc.allowGrammarAccess=allowGrammarAccess;  newdoc.errorChecking=errorChecking;}  }
class C{  @Override public void write(DataOutput out) throws IOException {}  }
class C{  public void reloadData(){  loadData();}  }
class C{  public VideoQuality(){}  }
class C{  private void GetPath(int num){  sPath=this.map_controler.get_Path(num);  if (sPath.get_Start_X() != -99)   position.x=sPath.get_Start_X();  if (sPath.get_Start_Y() != -99)   position.y=sPath.get_Start_Y();  col=0;  GetDir(col);}  }
class C{  public FilterNode(){  setDisplayString();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public VendorOptionTextFactory(Class<?> panelId,FunctionNameInterface functionManager){  vendorOptionGeoServerLabelling=new VOGeoServerLabelling(panelId,functionManager);  vendorOptionList.add(vendorOptionGeoServerLabelling);  PrefManager.getInstance().addVendorOptionListener(this);}  }
class C{  public CommandTagRemove(final long changeId,final long commandTagId,final long equipmentId){  setChangeId(changeId);  this.commandTagId=commandTagId;  this.equipmentId=equipmentId;}  }
class C{  private boolean dictionaryCacheAlreadyExists(CacheType cacheType){  return null != cacheTypeToCacheMap.get(cacheType);}  }
class C{  @Before public void beforeTest(){  removeTestData();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_OK1(String value0){  return new SM_SYSTEM_MESSAGE(1300552,value0);}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public Leaves(final Material type,TreeSpecies species){  this(type,species,DEFAULT_DECAYABLE);}  }
class C{  public void save(String key,String value){  prefs.edit().putString(key,value).apply();}  }
class C{  public void unregisterToolbar(RTToolbar toolbar){  mToolbars.remove(toolbar.getId());  toolbar.removeToolbarListener();  updateToolbarVisibility();}  }
class C{  public static double[] convexHull(double[] pts,int len,float[] angles,int[] idx,int[] stack){  int plen=len / 2 - 1;  if (len < 6) {    throw new IllegalArgumentException("Input must have at least 3 points");  }  if (angles.length < plen || idx.length < plen || stack.length < len / 2) {    throw new IllegalArgumentException("Pre-allocated data structure too small");  }  int i0=0;  for (int i=2; i < len; i+=2) {    if (pts[i + 1] < pts[i0 + 1]) {      i0=i;    } else     if (pts[i + 1] == pts[i0 + 1]) {      i0=(pts[i] < pts[i0] ? i : i0);    }  }  for (int i=0, j=0; i < len; i+=2) {    if (i == i0)     continue;    angles[j]=(float)Math.atan2(pts[i + 1] - pts[i0 + 1],pts[i] - pts[i0]);    idx[j++]=i;  }  ArrayLib.sort(angles,idx,plen);  float angle=angles[0];  int ti=0, tj=idx[0];  for (int i=1; i < plen; i++) {    int j=idx[i];    if (angle == angles[i]) {      double x1=pts[tj] - pts[i0];      double y1=pts[tj + 1] - pts[i0 + 1];      double x2=pts[j] - pts[i0];      double y2=pts[j + 1] - pts[i0 + 1];      double d1=x1 * x1 + y1 * y1;      double d2=x2 * x2 + y2 * y2;      if (d1 >= d2) {        idx[i]=-1;      } else {        idx[ti]=-1;        angle=angles[i];        ti=i;        tj=j;      }    } else {      angle=angles[i];      ti=i;      tj=j;    }  }  int sp=0;  stack[sp++]=i0;  int j=0;  for (int k=0; k < 2; j++) {    if (idx[j] != -1) {      stack[sp++]=idx[j];      k++;    }  }  for (; j < plen; j++) {    if (idx[j] == -1)     continue;    while (isNonLeft(i0,stack[sp - 2],stack[sp - 1],idx[j],pts)) {      sp--;    }    stack[sp++]=idx[j];  }  double[] hull=new double[2 * sp];  for (int i=0; i < sp; i++) {    hull[2 * i]=pts[stack[i]];    hull[2 * i + 1]=pts[stack[i] + 1];  }  return hull;}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  CharSequence buildHistory(){  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);    StringBuilder historyText=new StringBuilder(1000);    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(format.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  public LogException(String s){  super(s);  initCause(null);}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  public SecureSendNotificationQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200900,skilltarget,skillcaster,skillname);}  }
class C{  public AudioGetRecommendationsQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public static int write(Sequence in,int fileType,OutputStream out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,in)) {      bytesWritten=writer.write(in,fileType,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  public static double pareto(double alpha){  if (!(alpha > 0.0))   throw new IllegalArgumentException("Shape parameter alpha must be positive");  return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0;}  }
class C{  public static FormatDefinition fromString(String string){  FormatDefinition formatDefinition=new FormatDefinition();  String[] tokens=string.split(" ");  for (  String word : tokens) {    int pos=word.indexOf(":");    formatDefinition.addItem(word.substring(0,pos),Type.valueOf(word.substring(pos + 1)));  }  return formatDefinition;}  }
class C{  public DataSourceAttributeData(Name name,Class<?> type,Object value){  super();  this.name=name;  this.type=type;  this.value=value;}  }
class C{  public boolean isContent(){  return state.equals(CONTENT);}  }
class C{  private void notifyListeners(final Tag tag,final List<Alarm> alarmList){  for (  AlarmAggregatorListener listener : listeners) {    try {      listener.notifyOnUpdate((Tag)tag.clone(),alarmList);    } catch (    CloneNotSupportedException e) {      LOGGER.error("Unexpected exception caught: clone should be implemented for this class! " + "Alarm & tag listener was not notified: " + listener.getClass().getSimpleName());    }  }}  }
class C{  public GroupsGetByIdQuery fields(GroupField... value){  return unsafeParam("fields",value);}  }
class C{  public String timerString(String message){  return timerString(message,this.getClass().getName());}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {  XMLElementDecl tmpElementDecl=(XMLElementDecl)fElementDeclTab.get(name);  if (tmpElementDecl != null) {    if (tmpElementDecl.type == -1) {      fCurrentElementIndex=getElementDeclIndex(name);    } else {      return;    }  } else {    fCurrentElementIndex=createElementDecl();  }  XMLElementDecl elementDecl=new XMLElementDecl();  fQName.setValues(null,name,name,null);  elementDecl.name.setValues(fQName);  elementDecl.contentModelValidator=null;  elementDecl.scope=-1;  if (contentModel.equals("EMPTY")) {    elementDecl.type=XMLElementDecl.TYPE_EMPTY;  } else   if (contentModel.equals("ANY")) {    elementDecl.type=XMLElementDecl.TYPE_ANY;  } else   if (contentModel.startsWith("(")) {    if (contentModel.indexOf("#PCDATA") > 0) {      elementDecl.type=XMLElementDecl.TYPE_MIXED;    } else {      elementDecl.type=XMLElementDecl.TYPE_CHILDREN;    }  }  this.fElementDeclTab.put(name,elementDecl);  fElementDecl=elementDecl;  addContentSpecToElement(elementDecl);  if (DEBUG) {    System.out.println("name = " + fElementDecl.name.localpart);    System.out.println("Type = " + fElementDecl.type);  }  setElementDecl(fCurrentElementIndex,fElementDecl);  int chunk=fCurrentElementIndex >> CHUNK_SHIFT;  int index=fCurrentElementIndex & CHUNK_MASK;  ensureElementDeclCapacity(chunk);  fElementDeclIsExternal[chunk][index]=(fReadingExternalDTD || fPEDepth > 0) ? 1 : 0;}  }
class C{  public void addAndRemoveEventListenerTyped() throws Exception {  TestActivitiEventListener newListener=new TestActivitiEventListener();  dispatcher.addEventListener(newListener,ActivitiEventType.ENTITY_CREATED,ActivitiEventType.ENTITY_DELETED);  ActivitiEntityEventImpl event1=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);  ActivitiEntityEventImpl event2=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_DELETED);  ActivitiEntityEventImpl event3=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_UPDATED);  dispatcher.dispatchEvent(event1);  dispatcher.dispatchEvent(event2);  dispatcher.dispatchEvent(event3);  assertEquals(2,newListener.getEventsReceived().size());  assertEquals(event1,newListener.getEventsReceived().get(0));  assertEquals(event2,newListener.getEventsReceived().get(1));  dispatcher.removeEventListener(newListener);  newListener.clearEventsReceived();  dispatcher.dispatchEvent(event1);  dispatcher.dispatchEvent(event2);  assertTrue(newListener.getEventsReceived().isEmpty());}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public boolean isTitleEnabled(){  return mCollapsingTitleEnabled;}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public String serialize(byte version){  return Base64.encodeBase64String(serializeBytes(version));}  }
class C{  void decode(){  for (ViterbiPoint p=timeline; p.next != null; p=p.next) {    p.cands=getCandidate(p.item);    if (DEBUG) {      debug("decode " + p.cands);    }    if (numStates != 0) {      if (numStates == -1) {        p.next.initDynamicPathArray(p.cands);      }      for (int i=0; i < p.numStates; i++) {        if ((p == timeline && i == 0) || (p.statePaths[i] != null)) {          for (ViterbiCandidate c=p.cands; c != null; c=c.next) {            ViterbiPath np=getPath(p.statePaths[i],c);            addPaths(p.next,np);          }        }      }    } else {      System.err.println("Viterbi.decode: general beam search not implemented");    }  }}  }
class C{  public static HarResponse createHarResponseForFailure(){  return new HarResponse(HTTP_STATUS_CODE_FOR_FAILURE,HTTP_REASON_PHRASE_FOR_FAILURE,HTTP_VERSION_STRING_FOR_FAILURE);}  }
class C{  @DataProvider public Object[][] InvalidAuthProvider(){  return new Object[][]{{"user@foo.com",""},{"","user01"},{"user@foo.com","notMyPassword"},{"",""}};}  }
class C{  private JTableColumnPacker(){}  }
class C{  @Override public String printToScreen(){  if (this.getyMaxLines() == 0) {    return "";  } else   if (this.screenLocusInfoList.size() == 0) {    if (this.getGc().getGenomicWindowSize() >= this.MAX_REGION_SIZE) {      return "Track not shown: Window is too large";    }    return "";  }  List<Double> yValues=new ArrayList<Double>();  for (  ScreenLocusInfo x : this.screenLocusInfoList) {    yValues.add(x.getMeanDepth());  }  this.setScreenScores(yValues);  if (this.isRpm()) {    for (int i=0; i < yValues.size(); i++) {      yValues.set(i,yValues.get(i) / this.alnRecCnt * 1000000.0);    }  }  TextProfile textProfile=new TextProfile(yValues,this.getyMaxLines(),this.getYLimitMin(),this.getYLimitMax());  ArrayList<String> lineStrings=new ArrayList<String>();  for (int i=(textProfile.getProfile().size() - 1); i >= 0; i--) {    List<String> xl=textProfile.getProfile().get(i);    lineStrings.add(StringUtils.join(xl,""));  }  String printable=Joiner.on("\n").join(lineStrings);  if (!this.isNoFormat()) {    printable="\033[0;" + Utils.ansiColorCodes().get(this.getTitleColour()) + "m"+ printable+ "\033[0m";  }  return printable;}  }
class C{  protected static Map<String,String> loadMacros(String macroPath,Map<String,String> macroMap) throws IOException {  BufferedReader in=null;  if (FileTools.openResourceFileAsStream(macroPath.toString()) == null)   return macroMap;  in=new BufferedReader(new InputStreamReader(FileTools.openResourceFileAsStream(macroPath.toString()),"utf-8"));  String line;  while ((line=in.readLine()) != null) {    line=line.trim();    if (line.length() == 0 || line.startsWith("#")) {      continue;    }    int sep=line.indexOf(":");    if (sep == -1) {      throw new InitializationException(String.format("missing separator in macros configuration line %s",line));    }    String macroName=line.substring(0,sep).trim();    String regExpString=line.substring(sep + 1).trim();    regExpString=replaceReferences(regExpString,macroMap);    macroMap.put(macroName,regExpString);  }  return macroMap;}  }
class C{  public PhotosGetMarketUploadServerQuery cropWidth(Integer value){  return unsafeParam("crop_width",value);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_category,container,false);  initPresenter();  initView(view);  return view;}  }
class C{  @Override public void cleanup(){}  }
class C{  @Override public void draw(Canvas canvas){  canvas.save();  canvas.translate(mStrokeSize,mStrokeSize);  for (int i=0; i < getNumberOfLayers() - 1; i++) {    getContentDrawable(i).draw(canvas);  }  canvas.restore();  getProgressDrawable().draw(canvas);}  }
