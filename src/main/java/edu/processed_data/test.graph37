class C{  public void eatDelim(char delimiter){  if (!matchDelim(delimiter))   throw new BadSyntaxException();  nextToken();}  }
class C{  public boolean catchHandlesException(TypeDecl exceptionType){  ASTNode$State state=state();  try {    for (int i=0; i < getNumCatchClause(); i++)     if (getCatchClause(i).handles(exceptionType))     return true;    return false;  }  finally {  }}  }
class C{  public static Object evaluateProvisioningTimeBindings(Object state,List<Binding> bindings,Map<String,Object> provisionedResources){  Object result=state;  for (  Binding binding : bindings) {    if (!binding.isProvisioningTimeBinding()) {      continue;    }    try {      result=evaluateProvisioningTimeBinding(binding,state,provisionedResources);    } catch (    ReflectiveOperationException|IOException e) {      throw new RuntimeException(e);    }  }  return result;}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length() + 3];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  while ((p % 4) != 0)   buf[p++]='0';  return decode(buf,0,p);}  }
class C{  private void incrementParameter(String paramName,String addedValueStr,ContextInfo contextInfo){  String paramValue;  paramName=parameterResolver.resolveTemplateParameter(paramName,contextInfo);  addedValueStr=parameterResolver.resolveTemplateParameter(addedValueStr,contextInfo);  paramValue=(!params.containsKey(paramName)) ? "0" : params.get(paramName).getValue();  try {    paramValue=String.valueOf(Integer.parseInt(paramValue) + Integer.parseInt(addedValueStr));  } catch (  NumberFormatException e) {    throw new ConversionException("Parameter to increment should be an integer type.",e);  }  params.put(paramName,new CustomParameterValue(paramValue));}  }
class C{  public static double sumOfMeanDifferencesOnePoint(double[] vector){  double mean=sum(vector) / vector.length;  double ret=0;  for (int i=0; i < vector.length; i++) {    double vec1Diff=Math.pow(vector[i] - mean,2);    ret+=vec1Diff;  }  return ret;}  }
class C{  private void handleEmptyAxis(T firstLeft,T firstRight){  if (firstLeft == null) {    mLeftAxisMax=mRightAxisMax;    mLeftAxisMin=mRightAxisMin;  } else   if (firstRight == null) {    mRightAxisMax=mLeftAxisMax;    mRightAxisMin=mLeftAxisMin;  }}  }
class C{  private ClientCommandTagImpl createCommandTag(Long id){  ClientCommandTagImpl commandTag=new ClientCommandTagImpl(id);  commandTag.update(createCommandTagHandleImpl(id));  try {    commandTag.setValue((Object)(new String("HI!")));  } catch (  CommandTagValueException e) {    e.printStackTrace();  }  return commandTag;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201027,skillcaster,num0,skilltarget,skillname);}  }
class C{  public ZWaveFirmwareUpdateCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public <R>Plan<R> then(Function6<T1,T2,T3,T4,T5,T6,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan6<T1,T2,T3,T4,T5,T6,R>(this,selector);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void reset(){  m_bfs=new BreadthFirstIterator();}  }
class C{  protected void copyTo(GSMessageImpl dup){  dup.setFifo(this.isFifo());  if (this.isTransient()) {    dup.makeTransient();  } else {    dup.makePersistent();  }  dup.setNOWriteLeaseMode(this.isNOWriteLeaseMode());  dup.bodyRO=this.bodyRO;  dup.propertiesRO=this.propertiesRO;  dup.session=this.session;  dup.DestinationName=this.DestinationName;  dup.ttl=this.ttl;  dup.JMSDestination=this.JMSDestination;  dup.JMSDeliveryMode=this.JMSDeliveryMode;  dup.JMSExpiration=this.JMSExpiration;  dup.JMSPriority=this.JMSPriority;  dup.JMSMessageID=this.JMSMessageID;  dup.JMSTimestamp=this.JMSTimestamp;  dup.JMSCorrelationID=this.JMSCorrelationID;  dup.JMSReplyTo=this.JMSReplyTo;  dup.JMSType=this.JMSType;  dup.JMSRedelivered=this.JMSRedelivered;  dup.Body=cloneBody();  dup.Properties=cloneProperties();}  }
class C{  public FieldExpandableODE(final FieldOrdinaryDifferentialEquation<T> primary){  this.primary=primary;  this.components=new ArrayList<FieldSecondaryODE<T>>();  this.mapper=new FieldEquationsMapper<T>(null,primary.getDimension());}  }
class C{  public UnicastSocketTimeout(int timeout){  if (timeout < 0) {    throw new IllegalArgumentException("invalid timeout");  }  this.timeout=timeout;}  }
class C{  public AudioGetCountQuery(VkApiClient client,UserActor actor,int ownerId){  super(client,"audio.getCount",Integer.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);}  }
class C{  public static NBTTagList readNBTList(PacketBuffer buf){  NBTTagList value=new NBTTagList();  for (int i=0; i < buf.readInt(); i++) {    value.set(i,buf.readNBTTagCompoundFromBuffer());  }  return value;}  }
class C{  public void generateSourcesOnly(boolean cleanProject){  if (!isSourceGenerationEnabled()) {    return;  }  if (requiresAndroidModel(myProject)) {    if (isDirectGradleInvocationEnabled(myProject)) {      GradleInvoker.getInstance(myProject).generateSources(cleanProject);    } else {      buildProjectWithJps(SOURCE_GEN);    }  }}  }
class C{  public BoardGetCommentsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void populateConnections(final List<ConfiguredConnectionGroupDetails> groups){  rootItem.getChildren().clear();  rootItemProperties.getChildren().clear();  final List<ConnectionTreeItemProperties> treeItemGroupProperties=new ArrayList<>();  final List<ConnectionTreeItemProperties> treeItemConnectionProperties=new ArrayList<>();  buildTree(rootItemProperties,treeItemGroupProperties,treeItemConnectionProperties);  addToTree(rootItem,rootItemProperties);}  }
class C{  public double[] toArray(){  return new double[]{x,y};}  }
class C{  public AdsGetAdsTargetingQuery adIds(String value){  return unsafeParam("ad_ids",value);}  }
class C{  private SegmentNode generate_all_to_many(SegmentNode mp){  long left, right, t;  SegmentNode p;  left=mp.I2;  right=left + mp.L;  p=mp.next;  while (p != null) {    if (p.I2 < left)     left=p.I2;    t=p.I2 + p.L;    if (t > right)     right=t;    p=p.next;  }  mp.I1=0;  mp.I2=left;  mp.L=right - left;  mp.next=null;  return mp;}  }
class C{  public static RuntimeEnvironment system(){  return SystemRuntimeEnvironment.getInstance();}  }
class C{  void forgetAllOpeners(){  TabModel currentModel=mTabModelSelector.getCurrentModel();  int count=currentModel.getCount();  for (int i=0; i < count; i++) {    currentModel.getTabAt(i).setGroupedWithParent(false);  }}  }
class C{  private void showProgress(GeoServerConnection connection){  GeoServerNode geoServerNode=nodeMap.get(connection);  if (geoServerNode == null) {    return;  }  DefaultMutableTreeNode stylesNode=getNode(geoServerNode,PROGRESS_NODE_TITLE);  if (stylesNode == null) {    stylesNode=new DefaultMutableTreeNode(PROGRESS_NODE_TITLE);    geoServerNode.add(stylesNode);    if (treeModel != null) {      TreeNode[] nodes=treeModel.getPathToRoot(geoServerNode);      TreePath path=new TreePath(nodes);      tree.expandPath(path);      nodes=treeModel.getPathToRoot(stylesNode);      path=new TreePath(nodes);      tree.scrollPathToVisible(path);    }  }  stylesNode.setUserObject(String.format("%s - %s %s",PROGRESS_NODE_TITLE,styleProgressText,layerProgressText));  if (treeModel != null) {    treeModel.reload(stylesNode);  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public static String extractCSVOutputLineFreq(String csvOut){  String tokens[]=csvOut.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)",-1);  return tokens[0];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_A_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1201093,value0);}  }
class C{  public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort == OBJECT || sort == ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  @NotNull private static String toIniString(@NotNull Boolean b){  return b ? "yes" : "no";}  }
class C{  public void lockValues(){  mLock=true;}  }
class C{  public RoleDTO toDTO(Role role){  return toDTO(role,1);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),2);}  }
class C{  public Iterator sourceMethods(){  return new ArrayList(srcMap.keySet()).iterator();}  }
class C{  public static void main(String[] args){  if (args.length < 4) {    usage();  }  BigQuery bigQuery=new BigQueryHelper().connect(args[1],args[0]);  for (int i=3; i < args.length; i++) {    if (bigQuery.delete(args[2],args[i])) {      logger.info("Table {} in dataset {} deleted successfully",args[i],args[2]);    } else {      logger.info("Table {} in dataset {} does not exist",args[i],args[2]);    }  }}  }
class C{  public double normality(String s){  DistributionDocument dDoc=new DistributionDocument(NeighbourhoodWindow,SourceNGramSize);  dDoc.setDataString(s,SourceNGramSize,true);  double dRes=0.0;  int iCnt=0;  try {    Iterator iIter=dDoc.Graph.getEdgeSet().iterator();    while (iIter.hasNext()) {      Edge eCur=(Edge)iIter.next();      Distribution dCur=dDoc.Graph.getEdgeDistro(eCur);      Edge e=gr.demokritos.iit.jinsect.utils.locateEdgeInGraph(Graph,eCur.getVertexA(),eCur.getVertexB());      if (e != null) {        Distribution d=(Graph.getEdgeDistro(e) == null) ? new Distribution() : Graph.getEdgeDistro(e);        if (OnCompare != null)         dRes+=OnCompare.compareDistributions(dCur,d); else         dRes+=dCur.similarityTo(d);      }      iCnt++;    }  } catch (  Exception exc) {    exc.printStackTrace();    return 0.0;  }  return dRes / (iCnt == 0 ? 1 : iCnt);}  }
class C{  public void hideOverlappingContainer(){  mFrameLayoutOverlappingViewContainer.setVisibility(GONE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_EQUIP_STONE_YOU_DO_NOT_HAVE_THIS_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1300407,value0);}  }
class C{  protected PhotosGetQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static String imageToString(Image image,String format){  byte[] imageBytes=imageToBytes(image,format);  return imageBytes != null ? Base64.byteArrayToBase64(imageBytes) : null;}  }
class C{  private void buildOverlapGraph(ReadData[] reads,Map<String,SortedSet<MatchData>> ref2matches,int minOverlap){  final Node[] nodes=new Node[reads.length];  final BitSet containedReadIds=new BitSet();  for (  String refName : ref2matches.keySet()) {    final MatchData[] matches=ref2matches.get(refName).toArray(new MatchData[ref2matches.get(refName).size()]);    for (int i=0; i < matches.length; i++) {      final MatchData iMatch=matches[i];      if (!containedReadIds.get(iMatch.getRead().getId())) {        Node v=nodes[iMatch.getRead().getId()];        if (v == null) {          v=nodes[iMatch.getRead().getId()]=overlapGraph.newNode(iMatch.getRead().getId());          node2readName.set(v,iMatch.getRead().getName());        }        for (int j=i + 1; j < matches.length; j++) {          final MatchData jMatch=matches[j];          if (3 * (iMatch.getLastPosInRef() - jMatch.getFirstPosInRef()) <= minOverlap)           break;          int overlapLength=computePerfectOverlapLength(iMatch,jMatch);          if (overlapLength > 0 && jMatch.getLastPosInRef() <= iMatch.getLastPosInRef()) {            containedReadIds.set(jMatch.getRead().getId());            List<Integer> contained=readId2ContainedReads[i];            if (contained == null) {              contained=readId2ContainedReads[i]=new ArrayList<>();            }            contained.add(j);          } else           if (overlapLength >= minOverlap) {            Node w=nodes[jMatch.getRead().getId()];            if (w == null) {              w=nodes[jMatch.getRead().getId()]=overlapGraph.newNode(jMatch.getRead().getId());              node2readName.set(w,jMatch.getRead().getName());            }            final Edge e=overlapGraph.getCommonEdge(v,w);            if (e == null) {              overlapGraph.newEdge(v,w,overlapLength);            } else             if ((Integer)e.getInfo() < overlapLength) {              e.setInfo(overlapLength);            }          }        }      }    }  }  if (verbose) {    System.err.println(String.format("Graph nodes:%,10d",overlapGraph.getNumberOfNodes()));    System.err.println(String.format("Graph edges:%,10d",overlapGraph.getNumberOfEdges()));    System.err.println(String.format("Cont. reads:%,10d",containedReadIds.cardinality()));  }}  }
class C{  public Configurator fromUri(Uri uri){  return new Configurator(uri.toString(),false);}  }
class C{  @Deployment public void testNestedSimpleSubProcess(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("nestedSimpleSubProcess",CollectionUtil.singletonMap("someVar","abc"));  runtimeService.deleteProcessInstance(pi.getId(),"deleted");  pi=runtimeService.startProcessInstanceByKey("nestedSimpleSubProcess");  Task subProcessTask=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Task in subprocess",subProcessTask.getName());  taskService.complete(subProcessTask.getId());  Task taskAfterSubProcesses=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertNotNull(taskAfterSubProcesses);  assertEquals("Task after subprocesses",taskAfterSubProcesses.getName());  taskService.complete(taskAfterSubProcesses.getId());  assertProcessEnded(pi.getId());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200428,skillname);}  }
class C{  public void groupBy(String column) throws QueryPlanException {  this.groupByColumn=column;}  }
class C{  public VideoGetCommentsQueryWithExtended needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){  String jobName=clazz.getName();  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();  JobDetail job=new JobDetail(jobName,jobGroup,clazz);  job.setDurability(false);  job.setVolatility(true);  job.setDescription(jobName);  try {    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);    if (scheduler == null) {      if (schedulerProperties == null) {        schedulerProperties=getDefaultSchedulerProperties();      }      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();      scheduler.start();    }    Date date=scheduler.scheduleJob(job,trigger);    Logger.info(this,"Scheduled job " + jobName + ", next trigger is on "+ date);  } catch (  ParseException e) {    Logger.error(this,"Cron expression '" + cronExpression + "' has an exception. Throwing IllegalArgumentException",e);    throw new IllegalArgumentException(e);  }catch (  SchedulerException e) {    Logger.error(this,"Unable to schedule job " + jobName,e);  }}  }
class C{  public PagesSaveAccessQuery view(PagesSaveAccess value){  return unsafeParam("view",value);}  }
class C{  public final void writeAsciiString(final String s){  write(s.getBytes(ASCII));}  }
class C{  final public void println(Object o){  print(o + "<br>");}  }
class C{  private void resetTimer(){  if (mTimer != null) {    mTimer.cancel();    mTimer.purge();    mTimer=null;    times_current=0;  }}  }
class C{  public static final Circle scale(Circle circle,double scale){  if (circle == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Circle(circle.radius * scale);}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public String[] upload_appender_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);}  }
class C{  public boolean isDrawSliceTextEnabled(){  return mDrawXLabels;}  }
class C{  public static void showSoftKeyboard(Context context,View view){  view.setFocusable(true);  view.setFocusableInTouchMode(true);  view.requestFocus();  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  inputManager.showSoftInput(view,0);}  }
class C{  public NotSupportedDisplayer(String object){  JLabel notSupportedLabel=new JLabel(NbBundle.getMessage(NotSupportedDisplayer.class,"MSG_Not_supported",object),SwingConstants.CENTER);  notSupportedLabel.setEnabled(false);  setLayout(new BorderLayout());  setOpaque(false);  add(notSupportedLabel,BorderLayout.CENTER);}  }
class C{  public byte[] compress(short[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  private long parseLong(int start,int end,int radix){  long result=0;  long digit;  for (int i=start; i < end; i++) {    digit=Character.digit(yycharat(i),radix);    result*=radix;    result+=digit;  }  return result;}  }
class C{  public HectorCassandraClientConfigurer columnFamilyGcGraceSeconds(Integer columnFamilyGcGraceSeconds){  this.columnFamilyGcGraceSeconds=columnFamilyGcGraceSeconds;  return this;}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  private void maybePrefetchDnsInBackground(){  if (getIntent() != null && Intent.ACTION_VIEW.equals(getIntent().getAction())) {    String maybeUrl=IntentHandler.getUrlFromIntent(getIntent());    if (maybeUrl != null) {      WarmupManager.getInstance().maybePrefetchDnsForUrlInBackground(this,maybeUrl);    }  }}  }
class C{  private static void extractFile(ZipInputStream zipIn,String filePath) throws IOException {  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(filePath));  byte[] bytesIn=new byte[BUFFER_SIZE];  int read=0;  while ((read=zipIn.read(bytesIn)) != -1) {    bos.write(bytesIn,0,read);  }  bos.close();}  }
class C{  private void configureUI(){  if (mWidget == null) {    return;  }  int top=getMargin(ConstraintAnchor.Type.TOP);  int left=getMargin(ConstraintAnchor.Type.LEFT);  int right=getMargin(ConstraintAnchor.Type.RIGHT);  int bottom=getMargin(ConstraintAnchor.Type.BOTTOM);  boolean baseline=hasBaseline();  boolean showVerticalSlider=bottom != UNCONNECTED && top != UNCONNECTED;  boolean showHorizontalSlider=left != UNCONNECTED && right != UNCONNECTED;  if (showHorizontalSlider) {    float bias=mWidget.getHorizontalBiasPercent();    mHorizontalSlider.setValue((int)(bias * 100));  }  if (showVerticalSlider) {    float bias=mWidget.getVerticalBiasPercent();    mVerticalSlider.setValue(100 - (int)(bias * 100));  }  mVerticalSlider.setEnabled(showVerticalSlider);  mHorizontalSlider.setEnabled(showHorizontalSlider);  mHorizontalSlider.invalidate();  mVerticalSlider.invalidate();  mVerticalSlider.setToolTipText(showVerticalSlider ? VERTICAL_TOOL_TIP_TEXT : null);  mHorizontalSlider.setToolTipText(showHorizontalSlider ? HORIZONTAL_TOOL_TIP_TEXT : null);  int widthVal=convert(mWidget.getHorizontalDimensionBehaviour());  int heightValue=convert(mWidget.getVerticalDimensionBehaviour());  mMain.configureUi(bottom,top,left,right,baseline,widthVal,heightValue);}  }
class C{  private void validate(String value){  for (int i=0; i < validators.size(); i++) {    if (!validators.get(i).validate(value)) {      onValidationErrorListener.onError(input,inputParent,validators.get(i).getValidationMessage());    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_Reject_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400099,value0);}  }
class C{  public PlacesAddQuery city(Integer value){  return unsafeParam("city",value);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private static boolean insideQuadrilateral(final Vector2D point,final List<Vector2D> quadrilateralPoints){  Vector2D p1=quadrilateralPoints.get(0);  Vector2D p2=quadrilateralPoints.get(1);  if (point.equals(p1) || point.equals(p2)) {    return true;  }  final double last=point.crossProduct(p1,p2);  final int size=quadrilateralPoints.size();  for (int i=1; i < size; i++) {    p1=p2;    p2=quadrilateralPoints.get((i + 1) == size ? 0 : i + 1);    if (point.equals(p1) || point.equals(p2)) {      return true;    }    if (last * point.crossProduct(p1,p2) < 0) {      return false;    }  }  return true;}  }
class C{  public ServiceTest(String caseName,Element mainElement){  super(caseName);  this.serviceName=mainElement.getAttribute("service-name");}  }
class C{  public void startModification() throws IOException {  io=new InputOutputReaderWriter(new File(getFileName()),READ_WRITE);  getClassificationsFooter().clear();  io.seek(getFileFooter().getClassificationsStart());  io.setLength(io.getPosition());}  }
class C{  public DocumentNGramSymWinDistroGraph(){  InitGraphs();}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  public ZWaveThermostatSetbackCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  private Object[] compile(String path){  List list=new ArrayList();  if (path == null) {    return list.toArray();  }  StringTokenizer tok=new StringTokenizer(path,":.");  while (tok.hasMoreTokens()) {    String token=tok.nextToken();    OpEnum op=OpEnum.getInstance(token);    if (op == null) {      throw new Error("Bad path compiled " + path);    }    list.add(op);    if (op == OpEnum.RELATION) {      list.add(tok.nextToken());    }  }  return list.toArray();}  }
class C{  public static int nullSafeHashCode(long[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  private static int convert(ConstraintWidget.DimensionBehaviour behaviour){switch (behaviour) {case FIXED:    return SingleWidgetView.FIXED;case WRAP_CONTENT:  return SingleWidgetView.WRAP_CONTENT;case ANY:return SingleWidgetView.ANY;}return SingleWidgetView.FIXED;}  }
class C{  public BlockVector(){  this.x=0;  this.y=0;  this.z=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_INFO_FORMAT(String value0,String value1,String value2,int num3){  return new SM_SYSTEM_MESSAGE(1300900,value0,value1,value2,num3);}  }
class C{  static Object find(String factoryId,ClassLoader cl,String fallbackClassName) throws ConfigurationError {  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(systemProp,null,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  String configFile=null;  try {    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "stax.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          } else {            configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";            f=new File(configFile);            if (ss.doesFileExist(f)) {              dPrint("Read properties file " + f);              cacheProps.load(ss.getFileInputStream(f));            }          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in " + configFile + " value="+ factoryClassName);      return newInstance(factoryClassName,null,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  private static int determineConsecutiveBinaryCount(String msg,int startpos,Charset encoding) throws WriterException {  final CharsetEncoder encoder=encoding.newEncoder();  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (!encoder.canEncode(ch)) {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public Html parse(String body){  return Html.create(body);}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public DHCPMessage(){  initialize();  this.destination_IP=BROADCAST_ADDR;  this.gPort=SERVER_PORT;}  }
class C{  public static String formatText(final FormatterDetails customFormatter,final String text,final byte[] rawText){  logger.trace("Formatting '" + text + "' with "+ customFormatter.getName());  String formattedText=text;  for (  final FormatterFunction function : customFormatter.getFunction()) {    if (function.getSubstringReplace() != null) {      formattedText=doSubstringReplacement(function.getSubstringReplace(),formattedText);    } else     if (function.getSubstringExtract() != null) {      formattedText=doSubstringExtract(function.getSubstringExtract(),formattedText);    } else     if (function.getSubstringConversion() != null) {      formattedText=doSubstringConversion(function.getSubstringConversion(),formattedText);    } else     if (function.getConversion() != null) {      if (customFormatter.getFunction().size() == 1 && rawText != null) {        formattedText=convertText(function.getConversion().getFormat(),rawText);      } else {        formattedText=convertText(function.getConversion().getFormat(),formattedText);      }    } else     if (function.getCharacterReplace() != null) {      formattedText=replaceCharacters(function.getCharacterReplace().getFormat(),formattedText,function.getCharacterReplace().getCharacterRangeFrom(),function.getCharacterReplace().getCharacterRangeTo(),function.getCharacterReplace().getWrapCharacter());    }    logger.trace("After function transformation = '" + formattedText + "'");  }  return formattedText;}  }
class C{  public ControlTagCacheObject(Long id,String name,String datatype,short mode){  super(id,name,datatype,mode);}  }
class C{  protected SimilarityArray calcSimilarityMeasures(CategorizedFileEntry cfeCur,List dsModelSet,boolean bOutput,PrintStream pOut,Semaphore sSem,String sDocumentClass,String sEvaluatorClass,int NGramSize_Min,int NGramSize_Max,int Dmax,boolean bSilent){  if (pOut == null)   pOut=System.out;  SimilarityArray saRes=new SimilarityArray();  ILoadableTextPrint ndNDoc1=null;  try {    int iIdx=getConstructor(DocumentClass,3);    if (iIdx > -1)     ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax); else {      iIdx=getConstructor(DocumentClass,5);      ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax,NGramSize_Min,NGramSize_Max);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return new SimilarityArray();  ndNDoc1.loadDataStringFromFile(cfeCur.getFileName());  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=getConstructor(ComparatorClass,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClass).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClass).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return new SimilarityArray();  Iterator iOtherIter=dsModelSet.iterator();  while (iOtherIter.hasNext()) {    CategorizedFileEntry cfeOther=(CategorizedFileEntry)iOtherIter.next();    String sSumName=new File(cfeOther.getFileName()).getName();    String sModelName=new File(cfeCur.getFileName()).getName();    if (sSumName.equals(sModelName)) {      if (!bSilent) synchronized (System.err) {        System.err.println("Ignoring identically named files:" + cfeOther.getFileName() + " , "+ cfeCur.getFileName());      }      continue;    }    if (!bSilent) synchronized (System.err) {      System.err.println("Comparing files:" + cfeOther.getFileName() + " , "+ cfeCur.getFileName());    }    ILoadableTextPrint ndNDoc2=null;synchronized (hModelCache) {      if (hModelCache.containsKey(cfeOther.getFileName()))       ndNDoc2=(ILoadableTextPrint)hModelCache.get(cfeOther.getFileName()); else {        try {          int iIdx=getConstructor(DocumentClass,3);          if (iIdx > -1)           ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax); else {            iIdx=getConstructor(DocumentClass,5);            ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax,NGramSize_Min,NGramSize_Max);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return new SimilarityArray();        ndNDoc2.loadDataStringFromFile(cfeOther.getFileName());        hModelCache.put(cfeOther.getFileName(),ndNDoc2);      }    }    Thread.yield();    try {      GraphSimilarity sSimil=null;      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      String[] sFileNameData=new File(cfeCur.getFileName()).getName().split("\\.");      String sID=sFileNameData[0] + "\t" + sFileNameData[4];      if (bOutput) {        if (sSem != null)         try {          sSem.acquire();        } catch (        InterruptedException ie) {          return null;        }        try {          pOut.print(sID + "\t");          pOut.print(sSimil.ContainmentSimilarity + "\t" + sSimil.ValueSimilarity+ "\t"+ sSimil.SizeSimilarity+ "\t"+ "0.0\t"+ "0.0\t"+ "0.0\t"+ sSimil.getOverallSimilarity());          pOut.println();          pOut.flush();        }  finally {          if (sSem != null)           sSem.release();        }      }    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");    }    Thread.yield();  }  return saRes;}  }
class C{  public static Predicate<ItemStack> matcherOf(Block value){  return matcherOf(new ItemStack(value,1,WILDCARD_METADATA),false);}  }
class C{  private void internal_deleteConnection(GeoServerConnection connection){  map.remove(connection);}  }
class C{  public void dataSinkUpdate(DataSinkEvent evt){  if (evt instanceof EndOfStreamEvent) {synchronized (waitFileSync) {      fileDone=true;      waitFileSync.notifyAll();    }  } else   if (evt instanceof DataSinkErrorEvent) {synchronized (waitFileSync) {      fileDone=true;      fileSuccess=false;      waitFileSync.notifyAll();    }  }}  }
class C{  private static void resolveBinaryExpression(BinaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  PsiElement objOperation=objSubjectExpression.getOperation();  if (null == objOperation) {    return;  }  IElementType objOperationType=objOperation.getNode().getElementType();  if (objOperationType == PhpTokenTypes.opCONCAT) {    objTypesSet.add(Types.strString);    return;  } else   if (objOperationType == PhpTokenTypes.opAND || objOperationType == PhpTokenTypes.opOR) {    objTypesSet.add(Types.strBoolean);    return;  }  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);}  }
class C{  public GossipDataMessage findPerNodeData(String nodeId,String key){  return getGossipManager().findPerNodeGossipData(nodeId,key);}  }
class C{  public CleanupTask(Configuration conf){  home=Model.GIIWA_HOME;}  }
class C{  public MessagesSendQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public LogisticDistribution(double mu,double s) throws MathIllegalArgumentException {  if (s <= 0.0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_SCALE,s);  }  this.mu=mu;  this.s=s;}  }
class C{  Segment(UUID id,@Nullable ByteBuffer min,long splitThresholdBytes,SplitQueue<Segment> splitQueue){  _id=id;  _dataId=TimeUUIDs.newUUID();  _min=min;  _distinctAdds=new HyperLogLog(HLL_LOG2M);  _bytesUntilSplitCheckSize=splitThresholdBytes / 16;  _bytesUntilSplitCheckRemaining=_bytesUntilSplitCheckSize;  _splitThresholdBytes=splitThresholdBytes;  _splitQueue=checkNotNull(splitQueue,"splitQueue");}  }
class C{  private boolean isLastBeforeBoundary(Element syllable,int minBreakindex){  Document doc=syllable.getOwnerDocument();  Element sentence=(Element)DomUtils.getAncestor(syllable,MaryXML.SENTENCE);  TreeWalker tw=((DocumentTraversal)doc).createTreeWalker(sentence,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.SYLLABLE,MaryXML.BOUNDARY),false);  tw.setCurrentNode(syllable);  Element next=(Element)tw.nextNode();  if (next == null) {    return true;  }  if (next.getNodeName().equals(MaryXML.BOUNDARY)) {    if (getBreakindex(next) >= minBreakindex)     return true;  }  return false;}  }
class C{  public int computeNaiveLCA(Collection<Integer> taxonIds){  if (taxonIds.size() == 0)   return IdMapper.NOHITS_ID; else   if (taxonIds.size() == 1)   return taxonIds.iterator().next();  if (taxonIds.size() > addresses.length) {    addresses=new String[taxonIds.size()];    weights=new int[taxonIds.size()];  }  int numberOfAddresses=0;  for (  Integer taxonId : taxonIds) {    if (!TaxonomyData.isTaxonDisabled(taxonId)) {      String address=TaxonomyData.getAddress(taxonId);      if (address != null) {        addresses[numberOfAddresses++]=address;      }    }  }  if (numberOfAddresses > 0) {    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);    return TaxonomyData.getAddress2Id(address);  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  @Override public void preventDefault(){  preventDefault=true;}  }
class C{  public static final void show(Window owner,Image icon,SandboxBody body,BodyFixture fixture){  EditFixtureDialog dialog=new EditFixtureDialog(owner,icon,fixture);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    BodyFixture newFixture=dialog.fixture;    Convex convex=fixture.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    fixture.setFilter(newFixture.getFilter());    fixture.setFriction(newFixture.getFriction());    fixture.setRestitution(newFixture.getRestitution());    fixture.setSensor(newFixture.isSensor());    fixture.setDensity(newFixture.getDensity());    if (!body.isMassExplicit()) {      body.updateMass();    }  }}  }
class C{  private ProxySelector autodetectProxyIfAvailable(Dict proxySettings,ProxySelector result) throws ProxyException {  if (isActive(proxySettings.get("ProxyAutoDiscoveryEnable"))) {    ProxySelector wp=new WpadProxySearchStrategy().getProxySelector();    if (wp != null) {      result=wp;    }  }  return result;}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  date.year=YEAR;  if (str.charAt(0) != '-' || str.charAt(1) != '-') {    throw new SchemaDateTimeException("Invalid format for gMonthDay: " + str);  }  date.month=parseInt(str,2,4);  int start=4;  if (str.charAt(start++) != '-') {    throw new SchemaDateTimeException("Invalid format for gMonthDay: " + str);  }  date.day=parseInt(str,start,start + 2);  if (MONTHDAY_SIZE < len) {    if (!isNextCharUTCSign(str,MONTHDAY_SIZE,len)) {      throw new SchemaDateTimeException("Error in month parsing:" + str);    } else {      getTimeZone(str,date,MONTHDAY_SIZE,len);    }  }  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  date.position=1;  return date;}  }
class C{  public boolean addSiblingAfter(AXmlNode sibling){  if (this.parent != null) {    this.parent.addChild(sibling,this.parent.getChildren().indexOf(this) + 1);    return true;  } else {    return false;  }}  }
class C{  public static float readFloat(){  return scanner.nextFloat();}  }
class C{  private InputSplit[] generateDebugSplits(Path input_path,JobConf job){  long block_size=localFs.getDefaultBlockSize();  System.out.println("default block size: " + (block_size / 1024 / 1024) + "MB");  FileInputFormat.setInputPaths(job,input_path);  TextInputFormat format=new TextInputFormat();  format.configure(job);  int numSplits=1;  InputSplit[] splits=null;  try {    splits=format.getSplits(job,numSplits);  } catch (  IOException e) {    e.printStackTrace();  }  return splits;}  }
class C{  public void prepareTransition(View viewToShow){  assert mViewToHide == null && mViewToShow == null;  assert getChildCount() <= 2;  if (hasChildView()) {    mViewToHide=getChildAt(CONTENT_INDEX);  }  mViewToShow=viewToShow;  assert mViewToHide != null || mViewToShow != null;  assert mViewToHide != mViewToShow;}  }
class C{  public synchronized void resetTime(){}  }
class C{  public int order(){  return soot.PhaseOptions.getInt(options,"order");}  }
class C{  private MarkerOptions searchForId(String id){  for (  MarkerOptions options : markers) {    if (options.getTitle().equals(id)) {      return options;    }  }  return null;}  }
class C{  public static String dateToStringWithTime(Date date){  return dateToString(date,DATETIME_PATTERN);}  }
class C{  public void addDataSet(T d){  if (d == null)   return;  calcMinMax(d);  mDataSets.add(d);}  }
class C{  public void pause(){  if (!paused) {    setPaused(true);    if (currentClip != null) {      currentClip.stop();    }synchronized (this) {      notifyAll();    }  }}  }
class C{  public void destroy(){  ActivityManager.stopThread();}  }
class C{  protected boolean fetchRelations(String fieldName){  return false;}  }
class C{  public final boolean isSearch(){  return (this.collidable == null || this.fixture == null);}  }
class C{  public boolean isApplicable(){  return (getDoc().getMeganFile().isRMA2File() || getDoc().getMeganFile().isRMA3File()) || (getDoc().getSampleNames().size() > 0 && getDoc().getSampleAttributeTable().get(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute) != null);}  }
class C{  public static Sample loadBinary(ByteBuffer bb) throws IOException {  int frameDataSize=bb.getInt();  short[] frameData=new short[frameDataSize];  for (int i=0; i < frameData.length; i++) {    frameData[i]=bb.getShort();  }  int residualDataSize=bb.getInt();  byte[] residualData=new byte[residualDataSize];  for (int i=0; i < residualData.length; i++) {    residualData[i]=bb.get();  }  return new Sample(frameData,residualData,residualDataSize);}  }
class C{  public IDBPersistenceException(final String msg){  super(msg);}  }
class C{  private String parseIpFromPing(String ping){  String ip="";  if (ping.contains(FROM_PING) || ping.contains(SMALL_FROM_PING)) {    int index=ping.indexOf(FROM_PING);    if (index == 0) {      index=ping.indexOf(SMALL_FROM_PING);    }    ip=ping.substring(index + 5);    if (ip.contains(PARENTHESE_OPEN_PING)) {      int indexOpen=ip.indexOf(PARENTHESE_OPEN_PING);      int indexClose=ip.indexOf(PARENTHESE_CLOSE_PING);      ip=ip.substring(indexOpen + 1,indexClose);    } else {      ip=ip.substring(0,ip.indexOf("\n"));      if (ip.contains(":")) {        index=ip.indexOf(":");      } else {        index=ip.indexOf(" ");      }      ip=ip.substring(0,index);    }  } else {    int indexOpen=ping.indexOf(PARENTHESE_OPEN_PING);    int indexClose=ping.indexOf(PARENTHESE_CLOSE_PING);    ip=ping.substring(indexOpen + 1,indexClose);  }  return ip;}  }
class C{  void handleClassAnnotation(ClassDef classDef){  Set<? extends Annotation> aSet=classDef.getAnnotations();  if (aSet == null || aSet.isEmpty())   return;  List<Tag> tags=handleAnnotation(aSet,classDef.getType());  if (tags == null)   return;  InnerClassAttribute ica=null;  for (  Tag t : tags)   if (t != null) {    if (t instanceof InnerClassTag) {      if (ica == null) {        ica=(InnerClassAttribute)clazz.getTag("InnerClassAttribute");        if (ica == null) {          ica=new InnerClassAttribute();          clazz.addTag(ica);        }      }      ica.add((InnerClassTag)t);    } else     if (t instanceof VisibilityAnnotationTag) {      VisibilityAnnotationTag vt=(VisibilityAnnotationTag)t;      for (      AnnotationTag a : vt.getAnnotations()) {        if (a.getType().equals("Ldalvik/annotation/AnnotationDefault;")) {          for (          AnnotationElem ae : a.getElems()) {            if (ae instanceof AnnotationAnnotationElem) {              AnnotationAnnotationElem aae=(AnnotationAnnotationElem)ae;              AnnotationTag at=aae.getValue();              Map<String,AnnotationElem> defaults=new HashMap<String,AnnotationElem>();              for (              AnnotationElem aelem : at.getElems()) {                defaults.put(aelem.getName(),aelem);              }              for (              SootMethod sm : clazz.getMethods()) {                String methodName=sm.getName();                if (defaults.containsKey(methodName)) {                  AnnotationElem e=defaults.get(methodName);                  Type annotationType=getSootType(e);                  boolean isCorrectType=false;                  if (annotationType == null) {                    isCorrectType=true;                  } else {                    if (annotationType.equals(sm.getReturnType())) {                      isCorrectType=true;                    } else                     if (annotationType.equals(ARRAY_TYPE)) {                      if (sm.getReturnType() instanceof ArrayType)                       isCorrectType=true;                    }                  }                  if (isCorrectType && sm.getParameterCount() == 0) {                    e.setName("default");                    AnnotationDefaultTag d=new AnnotationDefaultTag(e);                    sm.addTag(d);                    defaults.remove(sm.getName());                  }                }              }              for (              Entry<String,AnnotationElem> leftOverEntry : defaults.entrySet()) {                SootMethod found=clazz.getMethodByNameUnsafe(leftOverEntry.getKey());                AnnotationElem element=leftOverEntry.getValue();                if (found != null) {                  element.setName("default");                  AnnotationDefaultTag d=new AnnotationDefaultTag(element);                  found.addTag(d);                }              }            }          }        }      }      if (!(vt.getVisibility() == AnnotationConstants.RUNTIME_INVISIBLE))       clazz.addTag(vt);    } else {      clazz.addTag(t);    }    Debug.printDbg("add class annotation: ",t," type: ",t.getClass());  }}  }
class C{  @NotNull public IntProperty outputWidth(){  return myOutputWidth;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private Map<Integer,String> jsonToMap(List<String> jsonAttributeValues) throws IOException {  Map<Integer,String> parsed=Maps.newHashMap();  ObjectMapper mapper=new ObjectMapper();  for (  String jsonString : jsonAttributeValues) {    JsonNode node=mapper.readValue(jsonString,JsonNode.class);    JsonNode nId=node.get("id");    JsonNode nValue=node.get("value");    if (nId == null || nId.isNull()) {      continue;    }    parsed.put(nId.asInt(),nValue.asText());  }  return parsed;}  }
class C{  public void addRelationshipFilter(RelatedFinder relatedFinder,Operation filter){  Operation existing=this.filters.get(relatedFinder);  this.filters.put(relatedFinder,existing == null ? filter : existing.or(filter));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean isSetMethodQpsMap(){  return this.methodQpsMap != null;}  }
class C{  public RTText convertTo(RTFormat destFormat,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  if (destFormat == mRTFormat) {    return this;  }  throw new UnsupportedOperationException("Can't convert from " + mRTFormat.getClass().getSimpleName() + " to "+ destFormat.getClass().getSimpleName());}  }
class C{  public void deriveValues(@NotNull ScopedStateStore stateStore,@NotNull Set<ScopedStateStore.Key> modified){  myMinSdkCombobox.deriveValues(stateStore,modified);}  }
class C{  public static int binaryLogUp(int n_){  int k=0;  while ((1 << k) < n_)   k++;  return k;}  }
class C{  public Matrix4f readFloatBuffer(FloatBuffer fb,boolean columnMajor){  if (columnMajor) {    m00=fb.get();    m10=fb.get();    m20=fb.get();    m30=fb.get();    m01=fb.get();    m11=fb.get();    m21=fb.get();    m31=fb.get();    m02=fb.get();    m12=fb.get();    m22=fb.get();    m32=fb.get();    m03=fb.get();    m13=fb.get();    m23=fb.get();    m33=fb.get();  } else {    m00=fb.get();    m01=fb.get();    m02=fb.get();    m03=fb.get();    m10=fb.get();    m11=fb.get();    m12=fb.get();    m13=fb.get();    m20=fb.get();    m21=fb.get();    m22=fb.get();    m23=fb.get();    m30=fb.get();    m31=fb.get();    m32=fb.get();    m33=fb.get();  }  return this;}  }
class C{  public Boolean doOutputSTL(){  return doOutputSTL;}  }
class C{  @Override public void apply(NexusStreamParser np) throws IOException {  ClusterViewer viewer=getViewer();  np.matchIgnoreCase("export data=distances file=");  String fileName=np.getAbsoluteFileName();  boolean replace=false;  if (np.peekMatchIgnoreCase("replace")) {    np.matchIgnoreCase("replace=");    replace=np.getBoolean();  }  np.matchIgnoreCase(";");  File file=new File(fileName);  if (!replace && file.exists())   throw new IOException("File exists: " + fileName + ", use REPLACE=true to overwrite");  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){    w.write("#NEXUS [generated by MEGAN]\n");    w.write("[! Computed using " + viewer.getEcologicalIndex() + " applied to "+ viewer.getDataType()+ "data]\n");    TableModel model=viewer.getMatrixTab().getTable().getModel();    w.write("begin taxa;\ndimensions ntax=" + model.getRowCount() + ";\n taxlabels\n");    for (int r=0; r < model.getRowCount(); r++) {      w.write("'" + Basic.toCleanName(model.getValueAt(r,0).toString()) + "'\n");    }    w.write(";\n");    w.write("end;\n");    w.write("begin distances;\ndimensions ntax=" + model.getRowCount() + ";\n");    w.write("format triangle=both diagonal labels;\nmatrix\n");    for (int r=0; r < model.getRowCount(); r++) {      w.write("'" + Basic.toCleanName(model.getValueAt(r,0).toString()) + "'");      for (int c=1; c < model.getColumnCount(); c++) {        w.write(" " + model.getValueAt(r,c));      }      w.write("\n");    }    w.write(";\n");    w.write("end;\n");  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  private void populateAvailableDataStores(){  DataAccessFactory fac;  logger.debug("Available data store factories:");  Iterator<DataStoreFactorySpi> iterator=DataStoreFinder.getAvailableDataStores();  while (iterator.hasNext()) {    fac=(DataAccessFactory)iterator.next();    logger.debug("\t" + fac.getDisplayName());    availableDataStoreList.add(fac.getDisplayName());  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new Opt(),1);}  }
class C{  public static double indicator(final double x){  if (Double.isNaN(x)) {    return Double.NaN;  }  return (x >= 0.0) ? 1.0 : -1.0;}  }
class C{  ConcurrentSuiteRunnerScheduler(Class<?> clazz,Properties properties,ReportingHandler reportingHandler,WebDriverRegistry webDriverRegistry){  this.properties=properties;  this.reportingHandler=reportingHandler;  this.webDriverRegistry=webDriverRegistry;  executorService=Executors.newFixedThreadPool(determineNumberOfThreads(clazz),new NamedThreadFactory(clazz.getSimpleName()));  completionService=new ExecutorCompletionService<>(executorService);}  }
class C{  private void updateFingerprint(String workspaceId) throws IOException {  Fingerprint f=Jenkins.getActiveInstance()._getFingerprint(workspaceId);  if (f == null) {    throw new AbortException("Couldn't find any Fingerprint for: " + workspaceId);  }  Fingerprint.RangeSet set=f.getUsages().get(run.getParent().getFullName());  if (set == null || !set.includes(run.getNumber())) {    f.addFor(run);    f.save();  }}  }
class C{  public void close(){  _spaceImpl.removeInternalSpaceModeListener(this);  _cacheManager.closeQueryExtensionManagers();  if (_replicationManager != null)   _replicationManager.close();  if (_processorWG != null)   _processorWG.shutdown();  if (_leaseManager != null)   _leaseManager.close();  if (_filterManager != null)   _filterManager.close();  if (_cacheManager != null)   _cacheManager.shutDown();  if (_memoryManager != null)   _memoryManager.close();  if (_dataEventManager != null)   _dataEventManager.close();  if (_spaceImpl.getClusterFailureDetector() != null) {    _spaceImpl.getClusterFailureDetector().terminate();  }  if (_metricRegistrator != null)   _metricRegistrator.clear();  if (_metricManager != null)   _metricManager.close();}  }
class C{  public static Tuple max(TupleSet tuples,String field){  return max(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public int updateUpload(OCUpload ocUpload){  Log_OC.v(TAG,"Updating " + ocUpload.getLocalPath() + " with status="+ ocUpload.getUploadStatus());  ContentValues cv=new ContentValues();  cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH,ocUpload.getLocalPath());  cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH,ocUpload.getRemotePath());  cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME,ocUpload.getAccountName());  cv.put(ProviderTableMeta.UPLOADS_STATUS,ocUpload.getUploadStatus().value);  cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT,ocUpload.getLastResult().getValue());  cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP,ocUpload.getUploadEndTimestamp());  int result=getDB().update(ProviderTableMeta.CONTENT_URI_UPLOADS,cv,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(ocUpload.getUploadId())});  Log_OC.d(TAG,"updateUpload returns with: " + result + " for file: "+ ocUpload.getLocalPath());  if (result != 1) {    Log_OC.e(TAG,"Failed to update item " + ocUpload.getLocalPath() + " into upload db.");  } else {    notifyObserversNow();  }  return result;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public Application(Host host,String id){  if (host == null)   throw new IllegalArgumentException("Host cannot be null");  if (id == null)   throw new IllegalArgumentException("Application id cannot be null");  this.host=host;  this.id=id;}  }
class C{  public MPPointF createFromParcel(Parcel in){  MPPointF r=new MPPointF(0,0);  r.my_readFromParcel(in);  return r;}  }
class C{  public GsonBuilder addDeserializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,false,true);  return this;}  }
class C{  public int addFile(File file,Long fileSize){  int fileId=getFileId(file);  if (fileSize != null)   fileSizes.set(fileId,fileSize);  return fileId;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static ITaintPropagationWrapper createLibrarySummaryTW() throws IOException {  try {    Class clzLazySummary=Class.forName("soot.jimple.infoflow.methodSummary.data.impl.LazySummary");    Object lazySummary=clzLazySummary.getConstructor(File.class).newInstance(new File(summaryPath));    ITaintPropagationWrapper summaryWrapper=(ITaintPropagationWrapper)Class.forName("soot.jimple.infoflow.methodSummary.taintWrappers.SummaryTaintWrapper").getConstructor(clzLazySummary).newInstance(lazySummary);    final TaintWrapperSet taintWrapperSet=new TaintWrapperSet();    taintWrapperSet.addWrapper(summaryWrapper);    taintWrapperSet.addWrapper(new EasyTaintWrapper("EasyTaintWrapperConversion.txt"));    return taintWrapperSet;  } catch (  ClassNotFoundException|NoSuchMethodException ex) {    System.err.println("Could not find library summary classes: " + ex.getMessage());    ex.printStackTrace();    return null;  }catch (  InvocationTargetException ex) {    System.err.println("Could not initialize library summaries: " + ex.getMessage());    ex.printStackTrace();    return null;  }catch (  IllegalAccessException|InstantiationException ex) {    System.err.println("Internal error in library summary initialization: " + ex.getMessage());    ex.printStackTrace();    return null;  }}  }
class C{  public int size(){  return size;}  }
class C{  @JsonIgnore public boolean isInOperation(){  return (this.mode == DataTagConstants.MODE_OPERATIONAL);}  }
class C{  public Local newLocal(String name,Type t){  return new BafLocal(name,t);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200643,skillcaster,value0,skillname);}  }
class C{  public ScrollImplementor(ScrollModel model,ScrollView view){  this.model=model;  this.view=view;}  }
class C{  public SandboxRay(String name,Vector2 direction){  super(direction);  this.name=name;}  }
class C{  private ExecutorServices(){}  }
class C{  private void computeRestDistance(){  Vector2 p1=new Vector2(ControlUtilities.getDoubleValue(this.txtX1),ControlUtilities.getDoubleValue(this.txtY1));  Vector2 p2=new Vector2(ControlUtilities.getDoubleValue(this.txtX2),ControlUtilities.getDoubleValue(this.txtY2));  double d=p1.distance(p2);  this.txtRestDistance.setValue(d);}  }
class C{  @Override public boolean processData(ByteBuffer data){  GsClientPacket pck=GsPacketHandlerFactory.handle(data,this);  if (pck != null && pck.read()) {    ThreadPoolManager.getInstance().executeLsPacket(pck);  }  return true;}  }
class C{  @Override public int read(char[] chars) throws IOException {  return read(chars,0,chars.length);}  }
class C{  @Override public Group apply(String name){  return new Group(name,plugin);}  }
class C{  public ReplicationPolicy(){  m_ReplicationGroupName=null;  m_ReplicationGroupMembersNames=null;  m_ReplicationGroupMembersURLs=null;  m_ReplMemberPolicyDescTable=null;  m_SyncReplPolicy=null;  multiBucketReplicationPolicy=null;  swapRedologPolicy=null;  clusterName=null;}  }
class C{  public List<Configuration> loadConfigurations(String name) throws IOException {  return loadResourcesWithName(name).map(null).collect(Collectors.toList());}  }
class C{  public void htsMaximumLikelihoodParameterGeneration(HTSUttModel um,final HMMData htsData) throws Exception {  CartTreeSet ms=htsData.getCartTreeSet();  if (htsData.getPdfMgcStream() != null)   mcepPst=new HTSPStream(ms.getMcepVsize(),um.getTotalFrame(),HMMData.FeatureType.MGC,htsData.getMaxMgcGvIter());  if (htsData.getPdfLf0Stream() != null)   lf0Pst=new HTSPStream(ms.getLf0Stream(),um.getLf0Frame(),HMMData.FeatureType.LF0,htsData.getMaxLf0GvIter());  if (htsData.getPdfStrStream() != null)   strPst=new HTSPStream(ms.getStrVsize(),um.getTotalFrame(),HMMData.FeatureType.STR,htsData.getMaxStrGvIter());  if (htsData.getPdfMagStream() != null)   magPst=new HTSPStream(ms.getMagVsize(),um.getTotalFrame(),HMMData.FeatureType.MAG,htsData.getMaxMagGvIter());  int lf0Frame=0;  int uttFrame=0;  voiced=new boolean[um.getTotalFrame()];  int msNumStates=ms.getNumStates();  int totalFrames=um.getTotalFrame();  for (int i=0; i < um.getNumUttModel(); i++) {    HTSModel m=um.getUttModel(i);    int numVoicedInModel=0;    for (int state=0; state < msNumStates; state++) {      Arrays.fill(voiced,uttFrame,uttFrame+=m.getDur(state),m.getVoiced(state));      if (m.getVoiced(state))       lf0Frame+=m.getDur(state);    }  }  Log.d(Mary.LOG,"utteranceFrame=" + uttFrame + " lf0frame="+ lf0Frame);  uttFrame=0;  lf0Frame=0;  for (int i=0; i < um.getNumUttModel(); i++) {    HTSModel m=um.getUttModel(i);    boolean gvSwitch=m.getGvSwitch();    for (int state=0; state < msNumStates; state++) {      for (int frame=0; frame < m.getDur(state); frame++) {        if (mcepPst != null) {          mcepPst.setMseq(uttFrame,m.getMean(FeatureType.MGC,state));          mcepPst.setVseq(uttFrame,m.getVariance(FeatureType.MGC,state));          if (!gvSwitch)           mcepPst.setGvSwitch(uttFrame,false);        }        if (strPst != null) {          strPst.setMseq(uttFrame,m.getMean(FeatureType.STR,state));          strPst.setVseq(uttFrame,m.getVariance(FeatureType.STR,state));          if (!gvSwitch)           strPst.setGvSwitch(uttFrame,false);        }        if (magPst != null) {          magPst.setMseq(uttFrame,m.getMean(FeatureType.MAG,state));          magPst.setVseq(uttFrame,m.getVariance(FeatureType.MAG,state));          if (!gvSwitch)           magPst.setGvSwitch(uttFrame,false);        }        if (lf0Pst != null && !htsData.getUseAcousticModels()) {          for (int k=0; k < ms.getLf0Stream(); k++) {            boolean nobound=true;            for (int n=lf0Pst.getDWLeftBoundary(k); n <= lf0Pst.getDWRightBoundary(k); n++)             if ((uttFrame + n) <= 0 || totalFrames <= (uttFrame + n))             nobound=false; else             nobound=(nobound && voiced[uttFrame + n]);            if (voiced[uttFrame]) {              lf0Pst.setMseq(lf0Frame,k,m.getLf0Mean(state,k));              if (nobound || k == 0)               lf0Pst.setIvseq(lf0Frame,k,finv(m.getLf0Variance(state,k))); else               lf0Pst.setIvseq(lf0Frame,k,0.0);            }          }        }        if (voiced[uttFrame]) {          if (!gvSwitch)           lf0Pst.setGvSwitch(lf0Frame,false);          lf0Frame++;        }        uttFrame++;      }    }  }  GVModelSet gvms=htsData.getGVModelSet();  if (mcepPst != null)   mcepPst.fixDynFeatOnBoundaries();  if (strPst != null)   strPst.fixDynFeatOnBoundaries();  if (magPst != null)   magPst.fixDynFeatOnBoundaries();  if (mcepPst != null) {    Log.i(Mary.LOG,"Parameter generation for MGC: ");    if (htsData.getUseGV() && (htsData.getPdfMgcGVStream() != null))     mcepPst.setGvMeanVar(gvms.getGVmeanMgc(),gvms.getGVcovInvMgc());    mcepPst.mlpg(htsData,htsData.getUseGV());  }  if (htsData.getUseAcousticModels())   loadMaryXmlF0(um,htsData); else   if (lf0Pst != null) {    Log.i(Mary.LOG,"Parameter generation for LF0: ");    if (htsData.getUseGV() && (htsData.getPdfLf0GVStream() != null))     lf0Pst.setGvMeanVar(gvms.getGVmeanLf0(),gvms.getGVcovInvLf0());    lf0Pst.mlpg(htsData,htsData.getUseGV());    setRealisedF0(lf0Pst,um,msNumStates);  }  boolean useGV=false;  if (strPst != null) {    Log.d(Mary.LOG,"Parameter generation for STR ");    if (htsData.getUseGV() && (htsData.getPdfStrGVStream() != null)) {      useGV=true;      strPst.setGvMeanVar(gvms.getGVmeanStr(),gvms.getGVcovInvStr());    }    strPst.mlpg(htsData,useGV);  }  useGV=false;  if (magPst != null) {    Log.i(Mary.LOG,"Parameter generation for MAG ");    if (htsData.getUseGV() && (htsData.getPdfMagGVStream() != null)) {      useGV=true;      magPst.setGvMeanVar(gvms.getGVmeanMag(),gvms.getGVcovInvMag());    }    magPst.mlpg(htsData,useGV);  }}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  @PostConstruct public void init(){  listenerContainer=supervisionNotifier.registerAsListener(this);}  }
class C{  @Nonnull private String computeDefaultPathOnDisk(@Nonnull String diskId,@CheckForNull String physicalPathOnDisk) throws IOException {  if (physicalPathOnDisk == null) {    physicalPathOnDisk=StringUtils.EMPTY;  }  if (!isRelativePath(physicalPathOnDisk)) {    String message=format("Physical path on disk defined for Disk ID '%s', within Disk Pool ID '%s' must be a relative path",diskId,step.getDiskPoolId());    throw new AbortException(message);  }  File pathOnDisk=Paths.get(physicalPathOnDisk,run.getParent().getFullName(),String.valueOf(run.getNumber())).toFile();  return new FilePath(pathOnDisk).getRemote();}  }
class C{  @Override public <T>Future<T> submit(Callable<T> task){synchronized (this) {    active.incrementAndGet();    long timeout=0;    while (queue.remainingCapacity() == 0) {      try {        if (timeout <= giveupTime) {          Thread.sleep(DEFAULT_SLEEP);          timeout+=DEFAULT_SLEEP;        } else {          throw new RuntimeException("Timed out because TPE is too busy...");        }      } catch (      InterruptedException e) {        throw new RuntimeException(e);      }    }    return super.submit(task);  }}  }
class C{  public Matrix3f multLocal(Matrix3f mat){  return mult(mat,this);}  }
class C{  public ElementType type(){  return theType;}  }
class C{  @Nullable public Variant findVariantByName(@NotNull String variantName){  return myVariantsByName.get(variantName);}  }
class C{  public ResourceLazyLoadingScript type(String type){  this.type=type;  return this;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  protected void fireChangeEvent(){  Iterator iter=m_listeners.iterator();  ChangeEvent evt=new ChangeEvent(this);  while (iter.hasNext()) {    ChangeListener cl=(ChangeListener)iter.next();    cl.stateChanged(evt);  }}  }
class C{  protected AbstractEntry(){}  }
class C{  public void addCategoryLimitations(boolean include,Category... categories){  String[] categoryVelocityVarNames=new String[categories.length];  for (int i=0; i < categories.length; i++) {    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();  }  addCategoryLimitations(include,categoryVelocityVarNames);}  }
class C{  public void performSignIn(){  mAuthClient.authorize(mActivity,mCallback);}  }
class C{  @Override public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunks=new ArrayList<CarbonDictionaryColumnMetaChunk>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonDictionaryColumnMetaChunk columnMetaChunk=null;  ColumnDictionaryChunkMeta dictionaryChunkMeta=null;  openThriftReader();  while (dictionaryMetadataFileReader.hasNext()) {    dictionaryChunkMeta=(ColumnDictionaryChunkMeta)dictionaryMetadataFileReader.read();    columnMetaChunk=getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);    dictionaryMetaChunks.add(columnMetaChunk);  }  return dictionaryMetaChunks;}  }
class C{  private static void check(Entry e){  if (e instanceof ServiceControlled)   throw new SecurityException("attempt to add or modify a ServiceControlled attribute set");}  }
class C{  public String addSection(Section section){  String tag=UUID.randomUUID().toString();  addSection(tag,section);  return tag;}  }
class C{  protected void buildBidirectionalAssociations(DataSupport baseObj,DataSupport associatedModel,AssociationsInfo associationInfo) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  putSetMethodValueByField(associatedModel,associationInfo.getAssociateSelfFromOtherModel(),baseObj);}  }
class C{  @Override public SplitSubHyperplane<Euclidean3D> split(Hyperplane<Euclidean3D> hyperplane){  final Plane otherPlane=(Plane)hyperplane;  final Plane thisPlane=(Plane)getHyperplane();  final Line inter=otherPlane.intersection(thisPlane);  final double tolerance=thisPlane.getTolerance();  if (inter == null) {    final double global=otherPlane.getOffset(thisPlane);    if (global < -tolerance) {      return new SplitSubHyperplane<Euclidean3D>(null,this);    } else     if (global > tolerance) {      return new SplitSubHyperplane<Euclidean3D>(this,null);    } else {      return new SplitSubHyperplane<Euclidean3D>(null,null);    }  }  Vector2D p=thisPlane.toSubSpace((Point<Euclidean3D>)inter.toSpace((Point<Euclidean1D>)Vector1D.ZERO));  Vector2D q=thisPlane.toSubSpace((Point<Euclidean3D>)inter.toSpace((Point<Euclidean1D>)Vector1D.ONE));  Vector3D crossP=Vector3D.crossProduct(inter.getDirection(),thisPlane.getNormal());  if (crossP.dotProduct(otherPlane.getNormal()) < 0) {    final Vector2D tmp=p;    p=q;    q=tmp;  }  final SubHyperplane<Euclidean2D> l2DMinus=new org.hipparchus.geometry.euclidean.twod.Line(p,q,tolerance).wholeHyperplane();  final SubHyperplane<Euclidean2D> l2DPlus=new org.hipparchus.geometry.euclidean.twod.Line(q,p,tolerance).wholeHyperplane();  final BSPTree<Euclidean2D> splitTree=getRemainingRegion().getTree(false).split(l2DMinus);  final BSPTree<Euclidean2D> plusTree=getRemainingRegion().isEmpty(splitTree.getPlus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DPlus,new BSPTree<Euclidean2D>(Boolean.FALSE),splitTree.getPlus(),null);  final BSPTree<Euclidean2D> minusTree=getRemainingRegion().isEmpty(splitTree.getMinus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DMinus,new BSPTree<Euclidean2D>(Boolean.FALSE),splitTree.getMinus(),null);  return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(),new PolygonsSet(plusTree,tolerance)),new SubPlane(thisPlane.copySelf(),new PolygonsSet(minusTree,tolerance)));}  }
class C{  public boolean accept(File file){  return true;}  }
class C{  private static double tanQ(double xa,double xb,boolean cotanFlag){  int idx=(int)((xa * 8.0) + 0.5);  final double epsilon=xa - EIGHTHS[idx];  final double sintA=SINE_TABLE_A[idx];  final double sintB=SINE_TABLE_B[idx];  final double costA=COSINE_TABLE_A[idx];  final double costB=COSINE_TABLE_B[idx];  double sinEpsA=epsilon;  double sinEpsB=polySine(epsilon);  final double cosEpsA=1.0;  final double cosEpsB=polyCosine(epsilon);  double temp=sinEpsA * HEX_40000000;  double temp2=(sinEpsA + temp) - temp;  sinEpsB+=sinEpsA - temp2;  sinEpsA=temp2;  double a=0;  double b=0;  double t=sintA;  double c=a + t;  double d=-(c - a - t);  a=c;  b+=d;  t=costA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b+=sintA * cosEpsB + costA * sinEpsB;  b+=sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;  double sina=a + b;  double sinb=-(sina - a - b);  a=b=c=d=0.0;  t=costA * cosEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  t=-sintA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b+=costB * cosEpsA + costA * cosEpsB + costB * cosEpsB;  b-=sintB * sinEpsA + sintA * sinEpsB + sintB * sinEpsB;  double cosa=a + b;  double cosb=-(cosa - a - b);  if (cotanFlag) {    double tmp;    tmp=cosa;    cosa=sina;    sina=tmp;    tmp=cosb;    cosb=sinb;    sinb=tmp;  }  double est=sina / cosa;  temp=est * HEX_40000000;  double esta=(est + temp) - temp;  double estb=est - esta;  temp=cosa * HEX_40000000;  double cosaa=(cosa + temp) - temp;  double cosab=cosa - cosaa;  double err=(sina - esta * cosaa - esta * cosab - estb * cosaa - estb * cosab) / cosa;  err+=sinb / cosa;  err+=-sina * cosb / cosa / cosa;  if (xb != 0.0) {    double xbadj=xb + est * est * xb;    if (cotanFlag) {      xbadj=-xbadj;    }    err+=xbadj;  }  return est + err;}  }
class C{  public void lastPage(){  goToPage(getRowCount(),getNumPages());}  }
class C{  private ZKLogMetadataForReader(URI uri,String logName,String logIdentifier){  super(uri,logName,logIdentifier);}  }
class C{  public static void recordAppStart(){  TcStatSdk.getInstance(context).recordAppStart();}  }
class C{  public boolean hasOrganisationUnits(){  List<DimensionalItemObject> dimOpts=getDimensionOptions(ORGUNIT_DIM_ID);  List<DimensionalItemObject> filterOpts=getFilterOptions(ORGUNIT_DIM_ID);  return !dimOpts.isEmpty() || !filterOpts.isEmpty();}  }
class C{  public void addFooter(@LayoutRes int layoutId){  addFooter(layoutId,null);}  }
class C{  private static ECPoint publicPointFromPrivate(BigInteger privKey){  if (privKey.bitLength() > CURVE.getN().bitLength()) {    privKey=privKey.mod(CURVE.getN());  }  return new FixedPointCombMultiplier().multiply(CURVE.getG(),privKey);}  }
class C{  public static int update(long id,V v){  String passwd=(String)v.value("password");  if (!X.isEmpty(passwd)) {    passwd=encrypt(passwd);    v.set("password",passwd,true);  } else {    v.remove("password");  }  return Helper.update(id,v.set("updated",System.currentTimeMillis()),User.class);}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public static Map<String,Object> createPaymentPreference(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String statusId=(String)context.get("statusId");  String paymentMethodTypeId=(String)context.get("paymentMethodTypeId");  String paymentMethodId=(String)context.get("paymentMethodId");  BigDecimal maxAmount=(BigDecimal)context.get("maxAmount");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String prefId=null;  try {    prefId=delegator.getNextSeqId("OrderPaymentPreference");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotCreateOrderPaymentPreferenceIdGenerationFailure",locale));  }  Map<String,Object> fields=UtilMisc.<String,Object>toMap("orderPaymentPreferenceId",prefId,"orderId",orderId,"paymentMethodTypeId",paymentMethodTypeId,"paymentMethodId",paymentMethodId,"maxAmount",maxAmount);  if (statusId != null) {    fields.put("statusId",statusId);  }  try {    GenericValue v=delegator.makeValue("OrderPaymentPreference",fields);    v.set("createdDate",UtilDateTime.nowTimestamp());    if (userLogin != null) {      v.set("createdByUserLogin",userLogin.getString("userLoginId"));    }    delegator.create(v);  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resource,"OrderOrderPaymentPreferencesCannotBeCreated",UtilMisc.toMap("errorString",e.getMessage()),locale));    return ServiceUtil.returnFailure();  }  result.put("orderPaymentPreferenceId",prefId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public boolean next(){  currentSlot++;  if (!overflowing) {    if (currentSlot >= currentPage.getNumRecords()) {      if (getSiblingFlag(currentPage) != -1) {        moveTo(getSiblingFlag(currentPage),-1);        return next();      }      return false;    } else     if (searchRange.contains(getKey(currentPage,currentSlot))) {      if (currentSlot == 0 && getOverflowFlag(currentPage) != -1) {        overflowing=true;        overflowFrom=currentPage.currentBlk().number();        moveTo(getOverflowFlag(currentPage),0);      }      return true;    } else     return false;  } else {    if (currentSlot >= currentPage.getNumRecords()) {      moveTo(getOverflowFlag(currentPage),0);      if (currentPage.currentBlk().number() == overflowFrom) {        overflowing=false;        overflowFrom=-1;      }    }    return true;  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public AudioSearchQuery search(UserActor actor){  return new AudioSearchQuery(getClient(),actor);}  }
class C{  private boolean canModifyUserConversation(User currentUser,User user){  return currentUser.equals(user) || currentUser.isSuper();}  }
class C{  public VideoReorderVideosQuery beforeOwnerId(Integer value){  return unsafeParam("before_owner_id",value);}  }
class C{  public final boolean equals(Object obj){  if (obj instanceof Uuid) {    Uuid other=(Uuid)obj;    return bits0 == other.bits0 && bits1 == other.bits1;  } else {    return false;  }}  }
class C{  public void putLong(String key,long value){  checkForNullKey(key);  preferences.edit().putLong(key,value).apply();}  }
class C{  private void populateLayers(GeoServerConnection connection,GeoServerNode geoServerNode){  removeNode(geoServerNode,LAYERS_NODE_TITLE);  GeoServerLayerHeadingNode layersNode=new GeoServerLayerHeadingNode(this.handler,connection,LAYERS_NODE_TITLE);  geoServerNode.add(layersNode);  Map<String,List<GeoServerLayer>> layerMap=geoServerLayerMap.get(connection);  for (  String workspaceName : layerMap.keySet()) {    List<GeoServerLayer> layerList=layerMap.get(workspaceName);    GeoServerWorkspaceNode workspaceNode=new GeoServerWorkspaceNode(this.handler,connection,workspaceName,false);    treeModel.insertNodeInto(workspaceNode,layersNode,layersNode.getChildCount());    for (    GeoServerLayer layer : layerList) {      GeoServerLayerNode childNode=new GeoServerLayerNode(this.handler,layer);      treeModel.insertNodeInto(childNode,workspaceNode,workspaceNode.getChildCount());    }  }}  }
class C{  public int nextInt(){  int val=iterator.val;  if (iterator != null) {    iterator=iterator.next;  }  return val;}  }
class C{  public GoogleUserCredentialProvider(OkHttpClient client,String refreshToken) throws LoginFailedException, RemoteServerException {  this.time=new SystemTimeImpl();  this.client=client;  this.refreshToken=refreshToken;  refreshToken(refreshToken);  authbuilder=AuthInfo.newBuilder();}  }
class C{  @Override public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_collection,parent,false);  return new ViewHolder(v,viewType);}  }
class C{  static void cancelActivity(Activity a){  getInstance()._cancelActivity(a);}  }
class C{  @Override public void endAttlist(Augmentations augmentations) throws XNIException {}  }
class C{  public void logStatistics(){  for (  QueryStatistic statistic : queryStatistics) {    LOGGER.statistic(statistic.getStatistics(queryIWthTask));  }}  }
class C{  @Transactional private void deleteAssetExtractionAndRelatedEntities(Long assetExtractionIdToDelete){  assetTextUnitToTMTextUnitRepository.deleteByAssetExtractionId(assetExtractionIdToDelete);  assetTextUnitRepository.deleteByAssetExtractionId(assetExtractionIdToDelete);  assetExtractionRepository.delete(assetExtractionIdToDelete);}  }
class C{  protected void resetXML11() throws XNIException {  int count=fXML11Components.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fXML11Components.get(i);    c.reset(this);  }}  }
class C{  private void buildDFA(CMNode syntaxTree){  fQName.setValues(null,fEOCString,fEOCString,null);  CMLeaf nodeEOC=new CMLeaf(fQName);  fHeadNode=new CMBinOp(XMLContentSpec.CONTENTSPECNODE_SEQ,syntaxTree,nodeEOC);  fEOCPos=fLeafCount;  nodeEOC.setPosition(fLeafCount++);  fLeafList=new CMLeaf[fLeafCount];  fLeafListType=new int[fLeafCount];  postTreeBuildInit(fHeadNode,0);  fFollowList=new CMStateSet[fLeafCount];  for (int index=0; index < fLeafCount; index++)   fFollowList[index]=new CMStateSet(fLeafCount);  calcFollowList(fHeadNode);  fElemMap=new QName[fLeafCount];  fElemMapType=new int[fLeafCount];  fElemMapSize=0;  for (int outIndex=0; outIndex < fLeafCount; outIndex++) {    fElemMap[outIndex]=new QName();    final QName element=fLeafList[outIndex].getElement();    int inIndex=0;    for (; inIndex < fElemMapSize; inIndex++) {      if (fElemMap[inIndex].rawname == element.rawname) {        break;      }    }    if (inIndex == fElemMapSize) {      fElemMap[fElemMapSize].setValues(element);      fElemMapType[fElemMapSize]=fLeafListType[outIndex];      fElemMapSize++;    }  }  int[] fLeafSorter=new int[fLeafCount + fElemMapSize];  int fSortCount=0;  for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {    for (int leafIndex=0; leafIndex < fLeafCount; leafIndex++) {      final QName leaf=fLeafList[leafIndex].getElement();      final QName element=fElemMap[elemIndex];      if (leaf.rawname == element.rawname) {        fLeafSorter[fSortCount++]=leafIndex;      }    }    fLeafSorter[fSortCount++]=-1;  }  int curArraySize=fLeafCount * 4;  CMStateSet[] statesToDo=new CMStateSet[curArraySize];  fFinalStateFlags=new boolean[curArraySize];  fTransTable=new int[curArraySize][];  CMStateSet setT=fHeadNode.firstPos();  int unmarkedState=0;  int curState=0;  fTransTable[curState]=makeDefStateList();  statesToDo[curState]=setT;  curState++;  HashMap stateTable=new HashMap();  while (unmarkedState < curState) {    setT=statesToDo[unmarkedState];    int[] transEntry=fTransTable[unmarkedState];    fFinalStateFlags[unmarkedState]=setT.getBit(fEOCPos);    unmarkedState++;    CMStateSet newSet=null;    int sorterIndex=0;    for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {      if (newSet == null)       newSet=new CMStateSet(fLeafCount); else       newSet.zeroBits();      int leafIndex=fLeafSorter[sorterIndex++];      while (leafIndex != -1) {        if (setT.getBit(leafIndex)) {          newSet.union(fFollowList[leafIndex]);        }        leafIndex=fLeafSorter[sorterIndex++];      }      if (!newSet.isEmpty()) {        Integer stateObj=(Integer)stateTable.get(newSet);        int stateIndex=(stateObj == null ? curState : stateObj.intValue());        if (stateIndex == curState) {          statesToDo[curState]=newSet;          fTransTable[curState]=makeDefStateList();          stateTable.put(newSet,new Integer(curState));          curState++;          newSet=null;        }        transEntry[elemIndex]=stateIndex;        if (curState == curArraySize) {          final int newSize=(int)(curArraySize * 1.5);          CMStateSet[] newToDo=new CMStateSet[newSize];          boolean[] newFinalFlags=new boolean[newSize];          int[][] newTransTable=new int[newSize][];          System.arraycopy(statesToDo,0,newToDo,0,curArraySize);          System.arraycopy(fFinalStateFlags,0,newFinalFlags,0,curArraySize);          System.arraycopy(fTransTable,0,newTransTable,0,curArraySize);          curArraySize=newSize;          statesToDo=newToDo;          fFinalStateFlags=newFinalFlags;          fTransTable=newTransTable;        }      }    }  }  fEmptyContentIsValid=((CMBinOp)fHeadNode).getLeft().isNullable();  if (DEBUG_VALIDATE_CONTENT)   dumpTree(fHeadNode,0);  fHeadNode=null;  fLeafList=null;  fFollowList=null;}  }
class C{  public NewMultiArrayExpr newNewMultiArrayExpr(ArrayType type,List sizes){  return new GNewMultiArrayExpr(type,sizes);}  }
class C{  public LPCDatagram(long setDuration,float[] coeffs,short[] residual,float lpcMin,float lpcRange){  super(setDuration);  this.quantizedCoeffs=General.quantize(coeffs,lpcMin,lpcRange);  this.quantizedResidual=General.shortToUlaw(residual);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public GroupsEditPlaceQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public boolean canManage(User user){  if (user == null || user.getGroups() == null) {    return false;  }  for (  UserGroup group : user.getGroups()) {    if (canManage(group)) {      return true;    }  }  return false;}  }
class C{  private void checkDigest() throws WrongMessageDigestException {  if (!checked) {    byte[] result=messageDigest.digest();    checked=true;    if (!MessageDigest.isEqual(result,expectedDigest)) {      failed="Incorrect message digest for " + url + ": "+ HttpmdUtil.digestString(result);      checkFailed();    }  }}  }
class C{  public Action remove(int i){  return (Action)m_actions.remove(i);}  }
class C{  public Matrix zoomIn(float x,float y){  Matrix save=new Matrix();  zoomIn(x,y,save);  return save;}  }
class C{  private void endList(){  List list=(List)getLast(List.class);  if (list != null) {    if (mResult.length() == 0 || mResult.charAt(mResult.length() - 1) != '\n') {      mResult.append('\n');    }    int start=mResult.getSpanStart(list);    int end=mResult.length();    int nrOfIndents=list.mNrOfIndents;    if (!list.mIsIndentation) {      nrOfIndents--;      int margin=Helper.getLeadingMarging();      Object span=list instanceof UL ? new BulletSpan(margin,start == end,false,false) : new NumberSpan(1,margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    if (nrOfIndents > 0) {      int margin=nrOfIndents * Helper.getLeadingMarging();      IndentationSpan span=new IndentationSpan(margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    mResult.removeSpan(list);  }}  }
class C{  private final boolean isItemFilledScreen(){  return (getLastVisiblePosition() - getFirstVisiblePosition() + 1) < getCount();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201042,skilltarget,num0,skillname);}  }
class C{  ComponentGroup(@NotNull String name,@NotNull String orientation){  this.name=name;  this.orientation=orientation;}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  return Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius;}  }
class C{  public ServiceInfo(String name,String manufacturer,String vendor,String version,String model,String serialNumber){  this.name=name;  this.manufacturer=manufacturer;  this.vendor=vendor;  this.version=version;  this.model=model;  this.serialNumber=serialNumber;}  }
class C{  public boolean hasScript(){  return script != null;}  }
class C{  public boolean splitsTaxa(BitSet taxa){  return A.intersects(taxa) && B.intersects(taxa);}  }
class C{  public AbstractSpaceActionInfo(){}  }
class C{  public static AlarmCacheObject createTestAlarm3(){  AlarmCacheObject alarm3=new AlarmCacheObject();  alarm3.setId(Long.valueOf(3));  alarm3.setFaultFamily("fault family");  alarm3.setFaultMember("fault member");  alarm3.setFaultCode(0);  AlarmCondition condition=AlarmCondition.fromConfigXML("<AlarmCondition class=\"cern.c2mon.server.common.alarm.ValueAlarmCondition\">" + "<alarm-value type=\"String\">DOWN</alarm-value></AlarmCondition>");  alarm3.setCondition(condition);  alarm3.setInfo("alarm info");  alarm3.setState(AlarmCondition.TERMINATE);  alarm3.setTimestamp(new Timestamp(System.currentTimeMillis() - 2000));  alarm3.setDataTagId(100003L);  alarm3.setMetadata(Metadata.builder().addMetadata("testMetadata",11).build());  alarm3.hasBeenPublished(new Timestamp(System.currentTimeMillis()));  return alarm3;}  }
class C{  protected AbstractUnivariateSolver(final double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public Map<String,List<Pair<SequenceUUID,Integer>>> guessAlternatives(String mainLang){  List<SoundfieldGroupInfo> stereo=findInputForChannelGroup(STEREO_LAYOUT);  return stereo.stream().filter(null).filter(null).collect(Collectors.toMap(null,null));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_CHANGE_LEADER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400580,value0,value1);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Constant constant(){  if (constant_computed) {    return constant_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  constant_value=constant_compute();  if (isFinal && num == state().boundariesCrossed)   constant_computed=true;  return constant_value;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  protected Record(ModelRecord modelRecord){  if (modelRecord == null)   throw new IllegalArgumentException("Cannont create a Record with a null modelRecord parameter");  this.recordName=modelRecord.name;  this.modelRecord=modelRecord;  this.fields=new HashMap<String,Object>();}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  Set<Map.Entry<String,TableOption>> entries=mapOFOptions.entrySet();  Iterator<Map.Entry<String,TableOption>> iterator=entries.iterator();  while (iterator.hasNext()) {    Map.Entry<String,TableOption> entry=iterator.next();    builder.append(entry.getValue().toString());    builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);  }  return builder.toString();}  }
class C{  private void makeNotification(){  Intent openAppIntent=new Intent(this,MainActivity.class);  PendingIntent openAppPendingIntent=PendingIntent.getActivity(this,0,openAppIntent,PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.Action openAppAction=new NotificationCompat.Action.Builder(android.R.drawable.ic_menu_more,getString(R.string.notification_open_app),openAppPendingIntent).build();  Intent stopServiceIntent=new Intent(this,Pokefly.class);  stopServiceIntent.setAction(ACTION_STOP);  PendingIntent stopServicePendingIntent=PendingIntent.getService(this,0,stopServiceIntent,PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.Action stopServiceAction=new NotificationCompat.Action.Builder(android.R.drawable.ic_menu_close_clear_cancel,getString(R.string.main_stop),stopServicePendingIntent).build();  Notification notification=new NotificationCompat.Builder(this).setOngoing(true).setCategory(NotificationCompat.CATEGORY_SERVICE).setColor(getColorC(R.color.colorPrimary)).setSmallIcon(R.drawable.notification_icon).setContentTitle(getString(R.string.notification_title,trainerLevel)).setContentIntent(openAppPendingIntent).addAction(openAppAction).addAction(stopServiceAction).build();  startForeground(NOTIFICATION_REQ_CODE,notification);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"TRANSLATE\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"SEARCH_NAME\" TEXT,"+ "\"SEARCH_RESULT\" TEXT);");}  }
class C{  public Vec2d add(Vec2d v){  return add(v.x,v.y);}  }
class C{  private synchronized void expungeStaleEntries(){  if (size == 0)   return;  Object r;  while ((r=queue.poll()) != null) {    Entry e=(Entry)r;    unlink(e);    int h=e.hash;    int i=indexFor(h,table.length);    Entry prev=table[i];    Entry p=prev;    while (p != null) {      Entry next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        size--;        break;      }      prev=p;      p=next;    }  }}  }
class C{  @Override public void softAssertion(SoftAssertionFailedEntry softAssertionFailedEntry){  throw new UnsupportedOperationException();}  }
class C{  public JValueSlider(String title,double min,double max,double value){  this(title,new Double(min),new Double(max),new Double(value));}  }
class C{  public IObjectInfo<T> add(T subject){  return addImpl(subject,true);}  }
class C{  public synchronized boolean remove(Object o){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=len - 1;    Object[] newElements=new Object[newlen];    for (int i=0; i < newlen; ++i) {      if (eq(o,elements[i])) {        for (int k=i + 1; k < len; ++k)         newElements[k - 1]=elements[k];        setArray(newElements);        return true;      } else       newElements[i]=elements[i];    }    if (eq(o,elements[newlen])) {      setArray(newElements);      return true;    }  }  return false;}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  public Scoop bind(Object obj,int toppingId,IBinding binding){  Topping topping=getOrCreateTopping(toppingId);  autoUpdateBinding(binding,topping);  Set<IBinding> bindings=getBindings(obj.getClass());  bindings.add(binding);  return this;}  }
class C{  public static void generateSampleXml(String path){  File file=new File(path);  JAXBContext jaxbContext;  try {    jaxbContext=JAXBContext.newInstance(FilmMetadataDescriptor.INSTANCE.getMetadataClass());    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    JAXBElement<PackageType> metadataJaxb=new ObjectFactory().createPackage(FilmMetadataXmlSampleBuilder.buildPackage());    jaxbMarshaller.marshal(metadataJaxb,file);  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  public byte[] array(){  return _tempBuffer;}  }
class C{  public void addElementReport(final ConfigurationElementReport pReport){  if (pReport != null) {    this.elementReports.add(pReport);  }  if (pReport.isFailure()) {    this.status=Status.FAILURE;    this.statusDescription="Configuration failed: see detailed report below.";  } else   if (this.status != Status.FAILURE && pReport.requiresReboot()) {    this.status=Status.RESTART;    this.statusDescription="Some DAQs need restarting for the configuration to take full effect: see details below.";  }}  }
class C{  private static String extractDimensionTableName(String dimensionColName,CarbonDataLoadSchema carbonDataLoadSchema){  List<DimensionRelation> dimensionRelationList=carbonDataLoadSchema.getDimensionRelationList();  for (  DimensionRelation dimensionRelation : dimensionRelationList) {    for (    String field : dimensionRelation.getColumns()) {      if (dimensionColName.equals(field)) {        return dimensionRelation.getTableName();      }    }  }  return carbonDataLoadSchema.getCarbonTable().getFactTableName();}  }
class C{  @Override public boolean isFinal(short derivation){  return (fFinal & derivation) != 0;}  }
class C{  public LeastSquaresConverter(final MultivariateVectorFunction function,final double[] observations){  this.function=function;  this.observations=observations.clone();  this.weights=null;  this.scale=null;}  }
class C{  public ByteStringTranslator(String[] strings){  if (strings.length > MAXNUM) {    StringBuilder buf=new StringBuilder();    for (int i=0; i < strings.length; i++) {      buf.append("\"" + strings[i] + "\" ");    }    throw new IllegalArgumentException("Too many strings for a byte-string translator: \n" + buf.toString() + "("+ strings.length+ " strings)");  }  list=new ArrayList<String>(Arrays.asList(strings));  map=new HashMap<String,Byte>();  for (int i=0; i < strings.length; i++) {    map.put(strings[i],(byte)i);  }}  }
class C{  public BaseMessage(final long id,final String topic,final String payload,final Date date){  this.id=id;  this.topic=topic;  this.payload=payload;  this.date=date;}  }
class C{  protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {  int len=str.length();  DateTimeData date=new DateTimeData(str,this);  int start=0;  char c=str.charAt(start++);  if (c != 'P' && c != '-') {    throw new SchemaDateTimeException();  } else {    date.utc=(c == '-') ? '-' : 0;    if (c == '-' && str.charAt(start++) != 'P') {      throw new SchemaDateTimeException();    }  }  int negate=1;  if (date.utc == '-') {    negate=-1;  }  boolean designator=false;  int endDate=indexOf(str,start,len,'T');  if (endDate == -1) {    endDate=len;  } else   if (durationType == YEARMONTHDURATION_TYPE) {    throw new SchemaDateTimeException();  }  int end=indexOf(str,start,endDate,'Y');  if (end != -1) {    if (durationType == DAYTIMEDURATION_TYPE) {      throw new SchemaDateTimeException();    }    date.year=negate * parseInt(str,start,end);    start=end + 1;    designator=true;  }  end=indexOf(str,start,endDate,'M');  if (end != -1) {    if (durationType == DAYTIMEDURATION_TYPE) {      throw new SchemaDateTimeException();    }    date.month=negate * parseInt(str,start,end);    start=end + 1;    designator=true;  }  end=indexOf(str,start,endDate,'D');  if (end != -1) {    if (durationType == YEARMONTHDURATION_TYPE) {      throw new SchemaDateTimeException();    }    date.day=negate * parseInt(str,start,end);    start=end + 1;    designator=true;  }  if (len == endDate && start != len) {    throw new SchemaDateTimeException();  }  if (len != endDate) {    end=indexOf(str,++start,len,'H');    if (end != -1) {      date.hour=negate * parseInt(str,start,end);      start=end + 1;      designator=true;    }    end=indexOf(str,start,len,'M');    if (end != -1) {      date.minute=negate * parseInt(str,start,end);      start=end + 1;      designator=true;    }    end=indexOf(str,start,len,'S');    if (end != -1) {      date.second=negate * parseSecond(str,start,end);      start=end + 1;      designator=true;    }    if (start != len || str.charAt(--start) == 'T') {      throw new SchemaDateTimeException();    }  }  if (!designator) {    throw new SchemaDateTimeException();  }  return date;}  }
class C{  public VisibilityAnimator(String group){  super(group);}  }
class C{  @Override public void onPatchException(File patchFile,Throwable e,boolean isUpgradePatch){  TinkerLog.i(TAG,"patchReporter: patch exception path:%s, throwable:%s, isUpgrade:%b",patchFile.getAbsolutePath(),e.getMessage(),isUpgradePatch);  TinkerLog.printErrStackTrace(TAG,e,"tinker patch exception");  Tinker.with(context).setTinkerDisable();  Tinker.with(context).cleanPatchByVersion(patchFile);}  }
class C{  public GeneralRuntimeException(String msg,Throwable nested){  super(msg);  this.nested=nested;}  }
class C{  public static InputStream streamFromString(String location) throws IOException {  InputStream is=null;  URL url=urlFromString(location,null,false);  if (url != null) {    is=url.openStream();  } else {    File f=new File(location);    if (f.exists())     is=new FileInputStream(f);  }  if (is == null) {    return null;  } else   if (isGZipFile(location)) {    return new GZIPInputStream(is);  } else {    return is;  }}  }
class C{  public AdsGetSuggestionsQueryWithSchools ids(String value){  return unsafeParam("ids",value);}  }
class C{  public float progressValue(){  return mProgressValue;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  void pairWithSelf(){  if (pair != null) {    throw new IllegalStateException("Already paired.");  }  pair=new ModelState();  pair.lastMoveOp=0;  pair.id=id;  pair.position=position;  pair.hashCode=hashCode;  pair.pair=this;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){}  }
class C{  public Builder withDryRun(boolean dryRun){  myDryRun=dryRun;  return this;}  }
class C{  public static List<String> splitPath(File file){  List<String> output=new ArrayList<>();  File current=file;  while (current != null) {    output.add(current.getName());    current=current.getParentFile();  }  Collections.reverse(output);  return output;}  }
class C{  public UnregisterReplicationNotificationRequestInfo(){}  }
class C{  private TableDDL createTableDDL(String tableName){  TableMetadata tableMetadata=_keyspace.getKeyspaceMetadata().getTable(tableName);  String rowKeyColumnName=tableMetadata.getPrimaryKey().get(0).getName();  String timeSeriesColumnName=tableMetadata.getPrimaryKey().get(1).getName();  String valueColumnName=tableMetadata.getColumns().get(2).getName();  return new TableDDL(tableMetadata,rowKeyColumnName,timeSeriesColumnName,valueColumnName);}  }
class C{  public void replaceData(String value){  data=value;}  }
class C{  public AccountSetSilenceModeQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  public OutlineExtractor(final Vector3D u,final Vector3D v){  this.u=u;  this.v=v;  w=Vector3D.crossProduct(u,v);}  }
class C{  public static String computeShannonWeaver(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {  if (viewer instanceof MainViewer)   return toString(computeShannonWeaver((MainViewer)viewer,progressListener)); else   if (viewer instanceof ClassificationViewer)   return toString(computeShannonWeaver((ClassificationViewer)viewer,progressListener)); else   return null;}  }
class C{  private int dp2px(float dpValue){  final float scale=getContext().getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  public void addActionClickListener(int id,OnClickListener clickListener){  ActionButton button=(ActionButton)buttonBar.findViewById(id);  if (button != null) {    button.setOnClickListener(clickListener);  }}  }
class C{  public boolean matches(InventoryCrafting inv,World worldIn){  ItemStack itemstack=null;  List<ItemStack> list=Lists.<ItemStack>newArrayList();  for (int i=0; i < inv.getSizeInventory(); ++i) {    ItemStack itemstack1=inv.getStackInSlot(i);    if (itemstack1 != null) {      if (itemstack1.getItem() instanceof ItemArmor) {        ItemArmor itemarmor=(ItemArmor)itemstack1.getItem();        if (itemarmor.getArmorMaterial() != CyberwareContent.trenchMat || itemstack != null) {          return false;        }        itemstack=itemstack1;      } else {        if (itemstack1.getItem() != Items.DYE) {          return false;        }        list.add(itemstack1);      }    }  }  return itemstack != null && !list.isEmpty();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_PARTY_ME(String value0){  return new SM_SYSTEM_MESSAGE(1300970,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DOWN_TO_NOMAL_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400145,value0);}  }
class C{  public static boolean isBodyAsleepColorEnabled(){  return bodyAsleepColorEnabled;}  }
class C{  public IntervalFeatureSet(String infile) throws IOException, InvalidGenomicCoordsException {  this.type=Utils.getFileTypeFromName(new File(infile).getName());  if (Utils.hasTabixIndex(new File(infile).getAbsolutePath())) {    this.tabixReader=new TabixReader(new File(infile).getAbsolutePath());    this.isTabix=true;  } else {    this.intervalMap=loadFileIntoIntervalMap(infile);    this.sortIntervalsWithinChroms();    this.isTabix=false;  }}  }
class C{  public BTreePage(BlockId blk,int numFlags,Schema schema,Transaction tx){  this.blk=blk;  this.tx=tx;  this.schema=schema;  currentBuff=tx.bufferMgr().pin(blk);  slotSize=slotSize(schema);  headerSize=Page.maxSize(INTEGER) + Page.maxSize(BIGINT) * numFlags;  myOffsetMap=offsetMap(schema);  numberOfRecords=-1;}  }
class C{  public ParserException(Exception exception){  this(null,exception);  return;}  }
class C{  private void updatePropertyFile(){  GeoServerConnectionManager.getInstance().updateList(connectionMap.keySet());}  }
class C{  public static double lerp(double a,double b,double t){  return a + ((b - a) * t);}  }
class C{  @Nullable public static PsiFileSystemItem asFileSystemItemSearch(PsiElement elementToSearch){  if (elementToSearch instanceof PsiFileSystemItem) {    return (PsiFileSystemItem)elementToSearch;  }  return asFileSearch(elementToSearch);}  }
class C{  public IBlockState withMirror(IBlockState state,Mirror mirrorIn){switch (mirrorIn) {case LEFT_RIGHT:    return state.withProperty(NORTH,state.getValue(SOUTH)).withProperty(SOUTH,state.getValue(NORTH));case FRONT_BACK:  return state.withProperty(EAST,state.getValue(WEST)).withProperty(WEST,state.getValue(EAST));default :return super.withMirror(state,mirrorIn);}}  }
class C{  public static boolean writeJson(HttpServletResponse resp,Object msg){  return write(resp,"application/json",msg);}  }
class C{  public static void main(final String[] args){  final List<Integer> zeroToNine=Arrays.asList(0,1,2,3,4,5,6,7,8,9);  zeroToNine.stream().filter(null).forEach(null);}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (this == other)   return true;  if (!(other instanceof WeakKeyReference))   return false;  Object thisRef=get();  Object otherRef=((WeakKeyReference)other).get();  if (thisRef == null || otherRef == null)   return false; else   return thisRef.equals(otherRef);}  }
class C{  private boolean hasIdleInvokers(){  for (  AsyncEventListenerInvoker invoker : this.scheduledInvokers) {    if (invoker.isIdle()) {      return true;    }  }  return false;}  }
class C{  private long wakeupTime(){  if (leases.isEmpty())   return Long.MAX_VALUE;  return leases.lastKey().actualRenew;}  }
class C{  private static byte[] stringToUtf8Pattern(String s){  byte[] origBytes=s.getBytes();  int length=origBytes.length;  final byte CONSTANT_Utf8=1;  byte[] result=new byte[length + 3];  result[0]=CONSTANT_Utf8;  result[1]=(byte)(length & 0xff00);  result[2]=(byte)(length & 0x00ff);  for (int i=0; i < length; i++) {    result[i + 3]=origBytes[i];  }  return result;}  }
class C{  public WallReportPostQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  private void hilite(Node v){  NodeView nv=viewer.getNV(v);  if (nv.getLocation() == null)   return;{    int scaledWidth;    int scaledHeight;    if (nv.getShape() == NodeView.NONE_NODE) {      scaledWidth=scaledHeight=2;    } else {      if (nv.getFixedSize()) {        scaledWidth=nv.getWidth();        scaledHeight=nv.getHeight();      } else {        scaledWidth=NodeView.computeScaledWidth(viewer.trans,nv.getWidth());        scaledHeight=NodeView.computeScaledHeight(viewer.trans,nv.getHeight());      }    }    Point apt=viewer.trans.w2d(nv.getLocation());    apt.x-=(scaledWidth >> 1);    apt.y-=(scaledHeight >> 1);    gc.setColor(ProgramProperties.SELECTION_COLOR);    Shape shape=new Rectangle(apt.x - 2,apt.y - 2,scaledWidth + 4,scaledHeight + 4);    gc.fill(shape);    gc.setColor(ProgramProperties.SELECTION_COLOR_DARKER);    final Stroke oldStroke=gc.getStroke();    gc.setStroke(NodeView.NORMAL_STROKE);    gc.draw(shape);    gc.setStroke(oldStroke);  }}  }
class C{  public boolean isDataLayer(){  return MapView.DATA_LAYERS.contains(layer);}  }
class C{  public static MyServicePrx checkedCast(Ice.ObjectPrx __obj,java.util.Map<String,String> __ctx){  return checkedCastImpl(__obj,__ctx,ice_staticId(),MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public static String encode(String namespacePrefix,String element){  if ((namespacePrefix != null) && !namespacePrefix.isEmpty()) {    return String.format("%s:%s",namespacePrefix,element);  } else {    return element;  }}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof DiscoveryPermission))   return false;  String grp=p.getName();  String group=getName();  if (group.startsWith("*")) {    if (group.length() == 1)     return true;    if (grp.length() == 1)     return false;    return (grp.length() >= group.length() && group.regionMatches(false,2,grp,grp.length() - group.length() + 2,group.length() - 2));  }  if (grp.startsWith("*"))   return false;  return group.equals(grp);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public void addSelectionListener(ExplorerSelectionListener listener){  selectionListeners.add(listener);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200532,num0,skilltarget,skillname);}  }
class C{  private static int snapHorizontal(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,int position,ArrayList<SnapCandidate> snapCandidates){  SnapCandidate candidate=new SnapCandidate();  ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);  handle.setDrawX(position);  SnapPlacement.snapAnchor(widgets,widget,anchor,candidate);  if (candidate.target != null) {    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(candidate.target);    int tx=candidate.x;    if (targetHandle != null) {      tx=targetHandle.getDrawX();    }    position=tx + candidate.margin;    snapCandidates.add(candidate);  }  return position;}  }
class C{  public boolean isEnabled(String setting){  return "true".equalsIgnoreCase(get(setting,"false"));}  }
class C{  public static Circle circle(Point center,double radius){  return new CircleImpl(center.getX(),center.getY(),radius);}  }
class C{  private List<Proxy> findProxy(URI uri){  try {    List<Proxy> proxies=new ArrayList<Proxy>();    String parseResult=this.pacScriptParser.evaluate(uri.toString(),uri.getHost());    if (parseResult == null) {      parseResult=PAC_DIRECT;    }    String[] proxyDefinitions=parseResult.split("[;]");    for (    String proxyDef : proxyDefinitions) {      if (proxyDef.trim().length() > 0) {        proxies.add(buildProxyFromPacResult(proxyDef));      }    }    return proxies;  } catch (  ProxyEvaluationException e) {    Logger.log(getClass(),LogLevel.ERROR,"PAC resolving error.",e);    return ProxyUtil.noProxyList();  }}  }
class C{  private ImportReport inviteUser(User user,HttpServletRequest request,HttpServletResponse response) throws Exception {  RestoreOptions restoreOptions=user.getUsername() == null || user.getUsername().isEmpty() ? RestoreOptions.INVITE_WITH_USERNAME_CHOICE : RestoreOptions.INVITE_WITH_DEFINED_USERNAME;  securityService.prepareUserForInvite(user);  ImportReport importReport=createUser(user,response);  if (importReport.getStatus() == Status.OK && importReport.getStats().getCreated() == 1) {    securityService.sendRestoreMessage(user.getUserCredentials(),ContextUtils.getContextPath(request),restoreOptions);  }  return importReport;}  }
class C{  @Override public int next(){  moveToNext();  return matchesInResult;}  }
class C{  private Frame padFrameRight(Frame originalFrame,int newWidth){  Frame.Metadata metadata=originalFrame.getMetadata();  int width=metadata.getWidth();  int height=metadata.getHeight();  Log.i(TAG,"Padded image from: " + width + "x"+ height+ " to "+ newWidth+ "x"+ height);  ByteBuffer origBuffer=originalFrame.getGrayscaleImageData();  int origOffset=origBuffer.arrayOffset();  byte[] origBytes=origBuffer.array();  ByteBuffer paddedBuffer=ByteBuffer.allocateDirect(newWidth * height);  int paddedOffset=paddedBuffer.arrayOffset();  byte[] paddedBytes=paddedBuffer.array();  Arrays.fill(paddedBytes,(byte)0);  for (int y=0; y < height; ++y) {    int origStride=origOffset + y * width;    int paddedStride=paddedOffset + y * newWidth;    System.arraycopy(origBytes,origStride,paddedBytes,paddedStride,width);  }  return new Frame.Builder().setImageData(paddedBuffer,newWidth,height,ImageFormat.NV21).setId(metadata.getId()).setRotation(metadata.getRotation()).setTimestampMillis(metadata.getTimestampMillis()).build();}  }
class C{  public MarqueeInteraction(@NotNull ScreenView surface,boolean toggle){  myScreenView=surface;  if (toggle) {    myInitialSelection=myScreenView.getSelectionModel().getSelection();  } else {    myInitialSelection=Collections.emptySet();  }}  }
class C{  private void indexSplitDoc(){  try {    _indexSplitDoc();  }  finally {    semaphore.release();    shardState.indexState.globalState.indexingJobsRunning.release();    ctx.inFlightChunks.arrive();  }}  }
class C{  public VideoRestoreQuery restore(UserActor actor,int videoId){  return new VideoRestoreQuery(getClient(),actor,videoId);}  }
class C{  public static int countCharacters(final String str,final char chr){  int ret=0;  for (int i=0; i < str.length(); i++) {    if (str.charAt(i) == chr) {      ret++;    }  }  return ret;}  }
class C{  @Override public void populateField(UserLayer value){  String inlineFeaturesText=InlineFeatureUtils.getInlineFeaturesText(value);  if (inlineGML != null) {    inlineGML.setInlineFeatures(inlineFeaturesText);  }  if (inlineFeature != null) {    inlineFeature.setInlineFeatures(value);  }  UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,new String(inlineFeaturesText)));  oldValueObj=new String(inlineFeaturesText);  valueUpdated();}  }
class C{  public String isRestorable(){  if (restoreToken == null) {    return "account_restoreToken_is_null";  }  if (restoreCode == null) {    return "account_restoreCode_is_null";  }  if (restoreExpiry == null) {    return "account_restoreExpiry_is_null";  }  return null;}  }
class C{  public LockableFileWriter(File file) throws IOException {  this(file,false,null);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      if (count > 0) {        String s=decodeBase900toBase10(numericCodewords,count);        result.append(s);        count=0;      }    }  }  return codeIndex;}  }
class C{  public CM_EMOTION(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private void checkLiteralValue(String message,Expression expression,int expectedValue){  Assert.assertEquals(expression.getClass(),LiteralExpressionImpl.class);  LiteralExpressionImpl literalExpression=(LiteralExpressionImpl)expression;  Object value=literalExpression.getValue();  Assert.assertEquals(message,value.getClass(),Integer.class);  Integer actualValue=(Integer)value;  String additional=String.format(" Expected '%d' Actual '%d'",expectedValue,actualValue);  Assert.assertTrue(message + additional,(expectedValue == actualValue));}  }
class C{  public boolean isReifiable(){  ASTNode$State state=state();  try {    return elementType().isReifiable();  }  finally {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300972,value0);}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  return execute(method,targetUrl,null,null);}  }
class C{  public ConfettiManager disableFadeOut(){  this.fadeOutInterpolator=null;  return this;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public static List<Writable> sampleInvalidFromColumnSequence(int numToSample,String columnName,Schema schema,JavaRDD<List<List<Writable>>> data){  JavaRDD<List<Writable>> flattened=data.flatMap(new SequenceFlatMapFunction());  return sampleInvalidFromColumn(numToSample,columnName,schema,flattened);}  }
class C{  public Bucket(){}  }
class C{  public boolean trim_clinit(){  return soot.PhaseOptions.getBoolean(options,"trim-clinit");}  }
class C{  public JsonPath buildPath(String path){  String[] strings=splitPath(path);  if (strings.length == 0 || (strings.length == 1 && "".equals(strings[0]))) {    throw new ResourceException("Path is empty");  }  JsonPath previousJsonPath=null, currentJsonPath=null;  PathIds pathIds;  boolean relationshipMark;  String elementName;  for (int currentElementIdx=0; currentElementIdx < strings.length; ) {    elementName=null;    pathIds=null;    relationshipMark=false;    if (RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      relationshipMark=true;      currentElementIdx++;    }    if (currentElementIdx < strings.length && !RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      elementName=strings[currentElementIdx];      currentElementIdx++;    }    if (currentElementIdx < strings.length && !RELATIONSHIP_MARK.equals(strings[currentElementIdx])) {      pathIds=createPathIds(strings[currentElementIdx]);      currentElementIdx++;    }    RegistryEntry entry=resourceRegistry.getEntry(elementName);    if (previousJsonPath != null) {      currentJsonPath=getNonResourcePath(previousJsonPath,elementName,relationshipMark);      if (pathIds != null) {        throw new ResourceException("RelationshipsPath and FieldPath cannot contain ids");      }    } else     if (entry != null && !relationshipMark) {      currentJsonPath=new ResourcePath(elementName);    } else {      throw new ResourceNotFoundException(path);    }    if (pathIds != null) {      currentJsonPath.setIds(pathIds);    }    if (previousJsonPath != null) {      previousJsonPath.setChildResource(currentJsonPath);      currentJsonPath.setParentResource(previousJsonPath);    }    previousJsonPath=currentJsonPath;  }  return currentJsonPath;}  }
class C{  private void removeFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof BodyFixture) {      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();      SandboxBody body=(SandboxBody)parent.getUserObject();      BodyFixture fixture=(BodyFixture)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.fixture.remove.warning"),fixture.getUserData(),body.getName()),Messages.getString("menu.context.fixture.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.removeFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  public static byte[] copyBytes(byte[] source,byte[] target,int position){  byte[] newBytes=new byte[target.length + source.length];  for (int i=0, n=0, x=0; i < newBytes.length; i++) {    if (i < position || i > (position + source.length - 2)) {      newBytes[i]=target[n];      n++;    } else {      for (; x < source.length; x++) {        newBytes[i]=source[x];        if (source.length - 1 > x) {          i++;        }      }    }  }  return newBytes;}  }
class C{  public static int dpToPixels(int dp,Context context){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  @RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<UserDTO>> findAll(@RequestBody PageRequestByExample<UserDTO> prbe) throws URISyntaxException {  PageResponse<UserDTO> pageResponse=userDTOService.findAll(prbe);  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);}  }
class C{  private static void computeGappedSequenceBlastN(String readName,String readSequence,String text,Collection<Pair<Integer,String>> insertions,boolean showInsertions,Single<char[]> referenceSequence,Alignment alignment) throws IOException {  boolean hasExactLength;  Integer length=Basic.parseInt(grabNext(text,"Length =","Length="));  if (length > 0) {    hasExactLength=true;  } else {    hasExactLength=false;    length=Basic.parseInt(grabNext(text,"Length >=","Length>="));    if (referenceSequence.get() != null && referenceSequence.get().length < length) {      char[] newRef=new char[length + 1];      System.arraycopy(referenceSequence.get(),0,newRef,0,referenceSequence.get().length);      referenceSequence.set(newRef);    }  }  String[] strand;  String tmpString=grabNext(text,"Strand =","Strand=");  if (tmpString != null && tmpString.contains("/")) {    int pos=tmpString.indexOf("/");    strand=new String[]{tmpString.substring(0,pos),"/",tmpString.substring(pos + 1)};  } else   strand=grabNext3(text,"Strand =","Strand=");  if (referenceSequence.get() == null)   referenceSequence.set(new char[length + 10000]);  int startQuery=Basic.parseInt(grabNext(text,"Query:","Query"));  int endQuery=Basic.parseInt(grabLastInLinePassedScore(text,"Query"));  if (readSequence == null)   throw new IOException("Read '" + readName + "': sequence not found");  if (readSequence.length() < Math.max(startQuery,endQuery)) {    throw new IOException("Read '" + readName + "': read length too short: "+ readSequence.length()+ " < "+ Math.max(startQuery,endQuery));  }  int startSubject=Basic.parseInt(grabNext(text,"Sbjct:","Sbjct"));  int endSubject=Basic.parseInt(grabLastInLinePassedScore(text,"Sbjct"));  String queryString=grabQueryString(text);  String subjectString=grabSubjectString(text);  if (strand != null && strand[0].equalsIgnoreCase("Minus") && strand[2].equalsIgnoreCase("Minus")) {    throw new IOException("Can't parse matches with Strand = Minus / Minus");  }  if (strand != null && strand[0].equalsIgnoreCase("Minus")) {    int tmp=Math.max(startQuery,endQuery);    startQuery=Math.min(startQuery,endQuery);    endQuery=tmp;    readName+=" (-/+)";  }  if (strand != null && strand[2].equalsIgnoreCase("Minus")) {    int tmp=Math.max(startSubject,endSubject);    startSubject=Math.min(startSubject,endSubject);    endSubject=tmp;    queryString=SequenceUtils.getReverseComplement(queryString);    subjectString=SequenceUtils.getReverseComplement(subjectString);    if (!strand[0].equalsIgnoreCase("Minus"))     readName+=" (+/-)";  }  int p=startSubject;  for (int i=0; i < subjectString.length(); i++) {    if (subjectString.charAt(i) != '-') {      if (false) {        if (referenceSequence.get()[p - 1] != 0 && referenceSequence.get()[p - 1] != 'N' && referenceSequence.get()[p - 1] != subjectString.charAt(i))         System.err.println("Warning: discrepancy between refSequence and refSequence for read: " + Basic.getFirstWord(readName) + " at position p-1="+ (p - 1)+ ", i="+ i+ ": "+ referenceSequence.get()[p - 1]+ " vs "+ subjectString.charAt(i));      }      referenceSequence.get()[p - 1]=subjectString.charAt(i);      p++;    }  }  int alignPos=(startSubject - 1);  StringWriter w=new StringWriter();  Pair<Integer,String> insertion=null;  for (int mPos=0; mPos < queryString.length(); mPos++) {    char ch=queryString.charAt(mPos);    if (ch == '-') {      if (insertion != null) {        insertion=null;      }      w.write("-");      alignPos+=1;    } else     if (subjectString.charAt(mPos) == '-') {      if (showInsertions) {        if (insertion == null) {          insertion=new Pair<>(alignPos - 1,queryString.substring(mPos,mPos + 1));          insertions.add(insertion);        } else {          insertion.setSecond(insertion.getSecond() + queryString.substring(mPos,mPos + 1));        }      }      alignPos+=1;    } else {      if (insertion != null) {        insertion=null;      }{        w.write(ch);        alignPos+=1;      }    }  }  String block=w.toString();  int leadingGaps=startSubject - 1;  int trailingGaps=length - endSubject;  String unalignedPrefix=readSequence.substring(0,startQuery - 1);  String unalignedSuffix=readSequence.substring(endQuery,readSequence.length());  alignment.addSequence(readName,text,null,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix);  if (!hasExactLength) {    boolean hasLengthDifferences=false;    int longest=0;    for (int row=0; row < alignment.getNumberOfSequences(); row++) {      int aLength=alignment.getLane(row).getLength();      if (aLength > longest) {        if (longest > 0)         hasLengthDifferences=true;        longest=aLength;      }    }    if (hasLengthDifferences) {      for (int row=0; row < alignment.getNumberOfSequences(); row++) {        Lane lane=alignment.getLane(row);        if (lane.getLength() < longest) {          lane.setTrailingGaps(lane.getTrailingGaps() + (longest - lane.getLength()));        }      }    }  }}  }
class C{  public void onContentViewCreated(ContentViewCore contentViewCore){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201043,num0,skillname);}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  public static X509Certificate decodeCertificate(byte[] certificateBytes) throws UaException {  Preconditions.checkNotNull(certificateBytes,"certificateBytes cannot be null");  return decodeCertificate(new ByteArrayInputStream(certificateBytes));}  }
class C{  public void beginObject() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_OBJECT) {    push(JsonScope.EMPTY_OBJECT);    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected BEGIN_OBJECT but was " + peek() + locationString());  }}  }
class C{  private boolean isIndexExisting(String index){  ActionFuture<IndicesExistsResponse> response=client.admin().indices().exists(new IndicesExistsRequest(index));  return response.actionGet(1000L).isExists();}  }
class C{  public VideoGetCommentsQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @NotNull public static String dominantEmotion(@NotNull Emotion emotion){  Map<Emotion.EmotionScore,Double> scores=emotion.scores.scores();  Emotion.EmotionScore key=scores.entrySet().stream().max(null).get().getKey();  return StringUtils.capitalize(key.name());}  }
class C{  public MemcachedFrameDecoder(SessionStatus status,int maxFrameLength){  this.status=status;  validateMaxFrameLength(maxFrameLength);  this.maxFrameLength=maxFrameLength;}  }
class C{  public CylinderArea(ZoneName zoneName,int worldId,float x,float y,float radius,float minZ,float maxZ){  super(zoneName,worldId,minZ,maxZ);  this.centerX=x;  this.centerY=y;  this.radius=radius;}  }
class C{  private void initCountBlock(ViewHolderCardItem holder,MediaItem currentItem){  if (mediaItemType == MediaItemType.PODCAST_FAVORITE && currentItem instanceof Podcast && ((Podcast)currentItem).getNewEpisodsCount() > 0) {    long newEpisodesCount=((Podcast)currentItem).getNewEpisodsCount();    holder.tvItemCount.setText(String.valueOf(newEpisodesCount));    holder.tvItemCount.setVisibility(View.VISIBLE);  } else {    holder.tvItemCount.setVisibility(View.GONE);  }}  }
class C{  protected boolean isZeroComparison(ConditionExpr expr){  if (expr instanceof EqExpr || expr instanceof NeExpr) {    if (expr.getOp2() instanceof IntConstant && ((IntConstant)expr.getOp2()).value == 0)     return true;    if (expr.getOp2() instanceof LongConstant && ((LongConstant)expr.getOp2()).value == 0)     return true;  }  return false;}  }
class C{  public static void rollback(Throwable causeThrowable) throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int status=ut.getStatus();      Debug.logVerbose("Current status : " + getTransactionStateString(status),module);      if (status != STATUS_NO_TRANSACTION) {        if (causeThrowable == null && Debug.infoOn()) {          Exception newE=new Exception("Stack Trace");          Debug.logError(newE,"[TransactionUtil.rollback]",module);        }        clearTransactionStamps();        clearTransactionBeginStack();        clearSetRollbackOnlyCause();        ut.rollback();        Debug.logInfo("Transaction rolled back",module);      } else {        Debug.logWarning("Transaction not rolled back, status is STATUS_NO_TRANSACTION",module);      }    } catch (    IllegalStateException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("Could not rollback transaction, IllegalStateException exception: " + t.toString(),t);    }catch (    SystemException e) {      Throwable t=e.getCause() == null ? e : e.getCause();      throw new GenericTransactionException("System error, could not rollback transaction: " + t.toString(),t);    }  } else {    Debug.logInfo("No UserTransaction, transaction not rolled back",module);  }}  }
class C{  public void shutdownAll(){  ChannelGroupFuture future=channelGroup.close();  future.awaitUninterruptibly();  loginToClientChannelFactory.releaseExternalResources();  nioServer.shutdown();}  }
class C{  public void writeMedia(String name,String filename,InputStream in) throws IOException {  writeBoundary();  String header="Content-Disposition: form-data;" + " name=\"" + name + "\";"+ " filename=\""+ filename+ "\"\r\n"+ "Content-Type: application/octet-stream\r\n\r\n";  out.write(header.getBytes(UTF8));  byte[] buf=new byte[BUFFER_SIZE];  while (true) {    int numRead=in.read(buf);    if (numRead < 0) {      break;    }    out.write(buf,0,numRead);  }  out.write("\r\n".getBytes(UTF8));}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public static long subAndCheck(long a,long b) throws MathRuntimeException {  long ret;  if (b == Long.MIN_VALUE) {    if (a < 0) {      ret=a - b;    } else {      throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,a,-b);    }  } else {    ret=addAndCheck(a,-b,LocalizedCoreFormats.OVERFLOW_IN_ADDITION);  }  return ret;}  }
class C{  public EventReaderDelegate(){}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void callHandler(String handlerName,String data,CallBackFunction callBack){  doSend(handlerName,data,callBack);}  }
class C{  @SuppressWarnings("unchecked") public void writeAllProperties(String yamlLocation,String hostname,String seedProvider) throws IOException {  DumperOptions options=new DumperOptions();  options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);  Yaml yaml=new Yaml(options);  File yamlFile=new File(yamlLocation);  Map map=(Map)yaml.load(new FileInputStream(yamlFile));  Map entries=(Map)map.get(ROOT_NAME);  entries.put("auto_eject_hosts",config.getAutoEjectHosts());  entries.put("rack",config.getRack());  entries.put("distribution",config.getDistribution());  entries.put("dyn_listen",config.getDynListenPort());  entries.put("dyn_seed_provider",config.getSeedProviderName());  entries.put("gos_interval",config.getGossipInterval());  entries.put("hash",config.getHash());  entries.put("listen",config.getClientListenPort());  entries.put("preconnect",config.getPreconnect());  entries.put("server_retry_timeout",config.getServerRetryTimeout());  entries.put("timeout",config.getTimeout());  entries.put("tokens",ii.getTokens());  entries.put("secure_server_option",config.getSecuredOption());  entries.remove("redis");  entries.put("datacenter",config.getDataCenter());  entries.put("read_consistency",config.getReadConsistency());  entries.put("write_consistency",config.getWriteConsistency());  entries.put("pem_key_file","/apps/dynomite/conf/dynomite.pem");  List seedp=(List)entries.get("dyn_seeds");  if (seedp == null) {    seedp=new ArrayList<String>();    entries.put("dyn_seeds",seedp);  } else {    seedp.clear();  }  List<String> seeds=ii.getSeeds();  if (seeds.size() != 0) {    for (    String seed : seeds) {      seedp.add(seed);    }  } else {    entries.remove("dyn_seeds");  }  List servers=(List)entries.get("servers");  if (servers == null) {    servers=new ArrayList<String>();    entries.put("servers",servers);  } else {    servers.clear();  }  entries.put("data_store",storageProxy.getEngineNumber());  servers.add(storageProxy.getIpAddress() + ":" + storageProxy.getPort()+ ":"+ 1);  if (!this.instanceState.getYmlWritten()) {    logger.info("YAML Dump: ");    logger.info(yaml.dump(map));    storageProxy.updateConfiguration();  } else {    logger.info("Updating dynomite.yml with latest information");  }  yaml.dump(map,new FileWriter(yamlLocation));  this.instanceState.setYmlWritten(true);}  }
class C{  @Override public void createUI(){  int xPos=getXPos();  int maxNoOfFilterRows=6;  int maxNoOfExtentRows=6;  int maxY=getRowY(maxNoOfFilterRows + maxNoOfExtentRows);  FieldPanel fieldPanel=createFieldPanel(xPos,maxY,getLabel());  createFilterTable(xPos,maxNoOfFilterRows,fieldPanel);  createExtentTable(xPos,maxNoOfFilterRows,maxNoOfExtentRows,fieldPanel);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Mysplash.getInstance().addActivity(this);  setTheme();  LanguageUtils.setLanguage(this);  DisplayUtils.setWindowTop(this);  setContentView(R.layout.activity_preview_photo);}  }
class C{  protected void sanityChecks(final ODEState initialState,final double t) throws MathIllegalArgumentException {  final double threshold=1000 * FastMath.ulp(FastMath.max(FastMath.abs(initialState.getTime()),FastMath.abs(t)));  final double dt=FastMath.abs(initialState.getTime() - t);  if (dt <= threshold) {    throw new MathIllegalArgumentException(LocalizedODEFormats.TOO_SMALL_INTEGRATION_INTERVAL,dt,threshold,false);  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FRIEND' ("+ "'USER_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT,"+ "'DISPLAY_NAME' TEXT,"+ "'STATUS' TEXT,"+ "'TIMESTAMP' INTEGER);");}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public void flush() throws IOException {  super.flush();  this.branch.flush();}  }
class C{  public void watchThreadsPoll(PreferenceChangeListener pcl){  addListener(INT_KEY_THREADS_POLL,pcl);}  }
class C{  public static boolean delete(File file,boolean deleteOnExit){  if (file == null)   throw new NullPointerException("File cannot be null");  if (!file.exists())   return true;  if (file.isDirectory()) {    File[] files=file.listFiles();    for (int i=0; i < files.length; i++)     delete(files[i],deleteOnExit);  }  if (!file.delete()) {    if (Utilities.isWindows() && file.isFile()) {      for (int i=0; i < 5; i++) {        System.gc();        if (file.delete())         return true;      }    }    if (deleteOnExit)     file.deleteOnExit();    return false;  }  return true;}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0,0.0282475249,0.0847425747,0.139825248255,0.167790297906,0.163595540458,0.137420253985,0.103065190489,0.070673273478,0.0450542118422,0.0270325271053,0.0154085404500,0.0084046584273};}  }
class C{  public boolean isNormal(boolean bOnlyValue,double dPValueForRejection){  double dPRes=0.0;  double dSD=standardDeviation(bOnlyValue);  double dSkewness=getCentralMoment(bOnlyValue,3) / Math.pow(dSD,3.0);  double dKurtosis=getCentralMoment(bOnlyValue,4) / Math.pow(dSD,4.0);  double dJB=(observationCount(bOnlyValue) / 6.0) * (Math.pow(dSkewness,2.0) + (Math.pow(dKurtosis - 3,2.0) / 4));  dPRes=ChiSquareDistributionBase.getPValue(dJB);  return dPRes > dPValueForRejection;}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    int[] tmp=new int[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public <T,Y>ResourceLazyLoadingScript broadcast(RemoteResultReducer<T,Y> reducer){  this.broadcast=true;  this.remoteResultReducer=reducer;  return this;}  }
class C{  public Expression and(Expression exp1,Expression exp2){  return new LogicalExpression(exp1,exp2,ExpressionType.AND);}  }
class C{  public void onLoad(boolean viewRecreated){}  }
class C{  public void initGui(){  this.guiList=new GuiVRControlsList(this,mc);  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));}  }
class C{  public Vector2f subtractLocal(float valX,float valY){  x-=valX;  y-=valY;  return this;}  }
class C{  private static void expand2DigitNumber(String numberString,WordRelation wordRelation){  if (numberString.charAt(0) == '0') {    if (numberString.charAt(1) == '0') {    } else {      String number=digit2num[numberString.charAt(1) - '0'];      wordRelation.addWord(number);    }  } else   if (numberString.charAt(1) == '0') {    String number=digit2enty[numberString.charAt(0) - '0'];    wordRelation.addWord(number);  } else   if (numberString.charAt(0) == '1') {    String number=digit2teen[numberString.charAt(1) - '0'];    wordRelation.addWord(number);  } else {    String enty=digit2enty[numberString.charAt(0) - '0'];    wordRelation.addWord(enty);    expandDigits(numberString.substring(1,numberString.length()),wordRelation);  }}  }
class C{  private boolean isEndingContextualSearch(PanelState fromState,PanelState toState,boolean isStartingSearch){  return isOngoingContextualSearch(fromState) && (toState == PanelState.CLOSED || isStartingSearch);}  }
class C{  private void loadTextData(DataInputStream dis) throws IOException {  for (int f=0; f < numFrames; f++) {    times[f]=Float.parseFloat(General.readWord(dis));    General.readWord(dis);    for (int c=0; c < numChannels; c++) {      frames[f][c]=Float.parseFloat(General.readWord(dis));    }  }}  }
class C{  public static VersionNumber parseOperatingSystemVersion(@Nonnull final OperatingSystemFamily family,@Nonnull final String userAgent){  Check.notNull(family,"family");  Check.notNull(userAgent,"userAgent");  final VersionNumber v;  if (OperatingSystemFamily.ANDROID == family) {    v=identifyAndroidVersion(userAgent);  } else   if (OperatingSystemFamily.BADA == family) {    v=identifyBadaVersion(userAgent);  } else   if (OperatingSystemFamily.BSD == family) {    v=identifyBSDVersion(userAgent);  } else   if (OperatingSystemFamily.IOS == family) {    v=identifyIOSVersion(userAgent);  } else   if (OperatingSystemFamily.JVM == family) {    v=identifyJavaVersion(userAgent);  } else   if (OperatingSystemFamily.OS_X == family) {    v=identifyOSXVersion(userAgent);  } else   if (OperatingSystemFamily.SYMBIAN == family) {    v=identifySymbianVersion(userAgent);  } else   if (OperatingSystemFamily.WEBOS == family) {    v=identifyWebOSVersion(userAgent);  } else   if (OperatingSystemFamily.WINDOWS == family) {    v=identifyWindowsVersion(userAgent);  } else {    v=VersionNumber.UNKNOWN;  }  return v;}  }
class C{  public GaussianCurveFitter withMaxIterations(int newMaxIter){  return new GaussianCurveFitter(initialGuess,newMaxIter);}  }
class C{  public double area(){  if (isEmpty()) {    return 0;  }  return lng().getLength() * Math.abs(Math.sin(latHi().radians()) - Math.sin(latLo().radians()));}  }
class C{  public Builder clearName(){  name_=getDefaultInstance().getName();  onChanged();  return this;}  }
class C{  protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("type")) {      if (!currentVal.startsWith("!")) {        if (!prosodicPositionType.equals(currentVal))         return false;      } else {        currentVal=currentVal.substring(1,currentVal.length());        if (prosodicPositionType.equals(currentVal))         return false;      }    }  }  return true;}  }
class C{  public boolean print_table(){  return soot.PhaseOptions.getBoolean(options,"print-table");}  }
class C{  static boolean isOSMatch(final String osName,final String osVersion,final String osNamePrefix,final String osVersionPrefix){  if (osName == null || osVersion == null) {    return false;  }  return isOSNameMatch(osName,osNamePrefix) && isOSVersionMatch(osVersion,osVersionPrefix);}  }
class C{  public static boolean isPosterMethod(HttpRequest request){  String method=request.getRequestLine().getMethod();  return "POST".equalsIgnoreCase(method);}  }
class C{  private boolean matchesExpression(String toSearch,String expression){  if (toSearch == null || expression == null) {    return false;  }  int toSearchIndex=0;  int exprIndex=0;  while ((exprIndex < expression.length()) && (toSearchIndex < toSearch.length())) {    if (expression.charAt(exprIndex) == CHAR_MATCH_ESCAPE) {      exprIndex++;      if (exprIndex == expression.length()) {        return false;      }      if (expression.charAt(exprIndex) == toSearch.charAt(toSearchIndex)) {        exprIndex++;        toSearchIndex++;      } else {        return false;      }    } else     if (expression.charAt(exprIndex) == CHAR_MATCH_MANY) {      String partExpr=expression.substring(exprIndex + 1);      for (int j=toSearchIndex; j <= toSearch.length(); j++) {        if (matchesExpression(toSearch.substring(j),partExpr)) {          return true;        }      }      return false;    } else     if (expression.charAt(exprIndex) == CHAR_MATCH_ONE) {      return matchesExpression(toSearch.substring(toSearchIndex + 1),expression.substring(exprIndex + 1));    } else     if (toSearch.charAt(toSearchIndex) == expression.charAt(exprIndex)) {      toSearchIndex++;      exprIndex++;    } else {      return false;    }  }  for (int i=exprIndex; i < expression.length(); i++) {    if (expression.charAt(i) != CHAR_MATCH_MANY) {      break;    }    exprIndex++;  }  return ((toSearch.length() == toSearchIndex) && (expression.length() == exprIndex));}  }
class C{  public IntervalFeature(String line,TrackFormat type) throws InvalidGenomicCoordsException {  if (type.equals(TrackFormat.BED) || type.equals(TrackFormat.BEDGRAPH)) {    this.intervalFeatureFromBedLine(line);    this.format=TrackFormat.BED;  } else   if (type.equals(TrackFormat.GFF)) {    this.intervalFeatureFromGtfLine(line);    this.format=TrackFormat.GFF;  } else   if (type.equals(TrackFormat.VCF)) {    this.intervalFeatureFromVcfLine(line);    this.format=TrackFormat.VCF;  } else {    System.err.println("Format " + type + " not supported");    throw new RuntimeException();  }}  }
class C{  public void saveMergeSource(String mergeFrom,String commonRoot){  List<String> fromUrls=new ArrayList<String>();  fromUrls.add(mergeFrom);  String previousFromUrls=null;  try {    previousFromUrls=Activator.getDefault().getDialogSettings().get("mergeFromUrls_" + commonRoot);  } catch (  Exception e) {  }  if (previousFromUrls != null) {    String[] urls=previousFromUrls.split("\\,");    for (    String url : urls) {      if (!fromUrls.contains(url))       fromUrls.add(url);    }  }  StringBuffer mergeFromBuffer=new StringBuffer(mergeFrom);  for (  String url : fromUrls) {    mergeFromBuffer.append("," + url);  }  Activator.getDefault().getDialogSettings().put("mergeFromUrls_" + commonRoot,mergeFromBuffer.toString());}  }
class C{  @Override public void delete(Constant key,RecordId dataRecordId,boolean doLogicalLogging){  beforeFirst(ConstantRange.newInstance(key));  if (doLogicalLogging)   tx.recoveryMgr().logLogicalStart();  while (next())   if (getDataRecordId().equals(dataRecordId)) {    rf.delete();    return;  }  if (doLogicalLogging)   tx.recoveryMgr().logIndexDeletionEnd(ii.tableName(),ii.fieldName(),key,dataRecordId.block().number(),dataRecordId.id());}  }
class C{  public BoardAddTopicQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public BeanMetricManager createBeanMetricManager(String name){  return metricRegistrator.extend(name);}  }
class C{  public static void toHtmlCss(Grid grid,Writer writer){  render(grid,null,writer,HTML_CSS_TEMPLATE);}  }
class C{  public Iterable<T> asIterable(){  return internalArray;}  }
class C{  @AssistedInject public PublishPage(@Assisted String path){  this.path=path;}  }
class C{  private void comfirmOperation(final OperationId operation){  final List<Operation> operations=Operation.generateOperations(operation,getSelectedItems());  new OperationConfirmationController(new ObservableListWrapper<>(operations));}  }
class C{  private void registerTaskInstances(){  for (  TaskFromDBTrigger trigger : tasksList) {    if (trigger.isValid()) {      trigger.initTrigger();    } else {      log.error("Cannot load task from db with ID: " + trigger.getTaskId());    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_BECOME_PARTY_LEADER(String value0){  return new SM_SYSTEM_MESSAGE(1300205,value0);}  }
class C{  @Override public final String readUTF() throws IOException {  return dis.readUTF();}  }
class C{  public void nextGroup() throws SAException {  if (_curGroupValue != null) {    if (_alreadyUsedGroupValues == null)     _alreadyUsedGroupValues=new HashSet<Object>();    _alreadyUsedGroupValues.add(_curGroupValue);    _curGroupValue=null;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ENTER_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1400018,value0);}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public GroupsAddLinkQuery addLink(UserActor actor,int groupId,String link){  return new GroupsAddLinkQuery(getClient(),actor,groupId,link);}  }
class C{  public InsertData(String tblName,List<String> fields,List<Constant> vals){  this.tblName=tblName;  this.fields=fields;  this.vals=vals;}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public static String toString(final byte[] bytes){  StringBuilder hexed=new StringBuilder();  for (int i=0; i < bytes.length; i++) {    hexed.append(toString(bytes[i]));    hexed.append(' ');  }  return hexed.substring(0,hexed.length() - 1);}  }
class C{  @BeforeClass public static void init() throws Exception {  testBrokerService.createAndStartBroker();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_INVENTORY_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300594,descriptionId);}  }
class C{  private void init() throws IOException {  initDictionaryChunkSize();  initPaths();  boolean dictFileExists=CarbonUtil.isFileExists(this.dictionaryFilePath);  if (dictFileExists && CarbonUtil.isFileExists(this.dictionaryMetaFilePath)) {    this.chunk_start_offset=CarbonUtil.getFileSize(this.dictionaryFilePath);    validateDictionaryFileOffsetWithLastSegmentEntryOffset();  } else   if (dictFileExists) {    FileFactory.getCarbonFile(dictionaryFilePath,FileFactory.getFileType(dictionaryFilePath)).delete();  }  openThriftWriter(this.dictionaryFilePath);  createChunkList();}  }
class C{  public void testIsRJavaFileImportedNoManifest() throws Exception {  Module libModule=myAdditionalModules.get(0);  deleteManifest(libModule);  myFixture.copyFileToProject("util/lib/AndroidManifest.xml","additionalModules/lib/AndroidManifest.xml");  VirtualFile libRFile=myFixture.copyFileToProject("util/lib/R.java","additionalModules/lib/gen/p1/p2/lib/R.java");  myFixture.copyFileToProject("util/lib/strings.xml","additionalModules/lib/res/values/strings.xml");  deleteManifest(myModule);  PsiField[] mainFields=AndroidResourceUtil.findResourceFields(AndroidFacet.getInstance(myModule),"string","lib_hello",false);  assertEmpty(mainFields);  PsiManager psiManager=PsiManager.getInstance(getProject());  PsiFile libRClassFile=psiManager.findFile(libRFile);  assertNotNull(libRClassFile);  assertTrue(AndroidResourceUtil.isRJavaFile(myFacet,libRClassFile));}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  private Names(){}  }
class C{  public static final String[] splitToWords(String sStr,boolean bStem){  PorterStemmer sStem=new PorterStemmer();  String[] sRes=sStr.split("(\\s|\\p{Punct})+");  if (bStem)   for (int iCnt=0; iCnt < sRes.length; iCnt++)   if (!sRes[iCnt].trim().equals(""))   try {    sRes[iCnt]=sStem.stem(sRes[iCnt]);  } catch (  Exception e) {  }  return sRes;}  }
class C{  public static boolean checkExtension(String query){  for (  String ext : getExtensions()) {    if (ext.equals(query)) {      return true;    }  }  return false;}  }
class C{  public ApiJobStoreException(JobRow jobRow){  this.jobRow=jobRow;}  }
class C{  int observerCount(){  return observers.get().length;}  }
class C{  public void recordTimestamp(){  long curTimestamp=System.currentTimeMillis();  if (usedFields > 0) {    long diff=curTimestamp - lastValue;    if (usedFields == diffs.length) {      long removedValue=diffs[curPosition];      diffs[curPosition]=diff;      calculateNewAverage(removedValue,diff,false);      shiftEnd();    } else {      calculateNewAverage(0,diff,true);      diffs[curPosition]=diff;      shiftEnd();    }  } else   if (lastValue != -1) {    long diff=curTimestamp - lastValue;    currentAverage=0;    diffs[curPosition]=diff;    calculateNewAverage(0,diff,true);    shiftEnd();  }  lastValue=curTimestamp;}  }
class C{  public boolean hasMapObjects(){  return mapObjects != null && !mapObjects.isEmpty();}  }
class C{  public boolean end(){  ByteArrayInputStream bais=new ByteArrayInputStream(outputData);  AudioInputStream ais=new AudioInputStream(bais,currentFormat,outputData.length / currentFormat.getFrameSize());  String name=baseName;  name=name + fileCount;  name=name + "." + outputType.getExtension();  File file=new File(name);  try {    AudioSystem.write(ais,outputType,file);    System.out.println("Wrote synthesized speech to " + name);  } catch (  IOException ioe) {    System.err.println("Can't write audio to " + file);    return false;  }catch (  IllegalArgumentException iae) {    System.err.println("Can't write audio type " + outputType);    return false;  }  fileCount++;  return true;}  }
class C{  public Iterator items(){  return items((Predicate)null);}  }
class C{  private String readBoundary() throws IOException {  BufferedReader reader=new BufferedReader(new FileReader(mFileToUpload));  String boundary=reader.readLine();  reader.close();  if (boundary == null || boundary.trim().isEmpty()) {    Log.e(TAG,"Ignoring invalid crash dump: '" + mFileToUpload + "'");    return null;  }  boundary=boundary.trim();  if (!boundary.startsWith("--") || boundary.length() < 10) {    Log.e(TAG,"Ignoring invalidly bound crash dump: '" + mFileToUpload + "'");    return null;  }  boundary=boundary.substring(2);  return boundary;}  }
class C{  @SuppressWarnings("unchecked") @Override public void run(){synchronized (threadMonitorObject) {    if (incomingQueue.isEmpty()) {      try {        threadMonitorObject.wait();      } catch (      InterruptedException e) {        LOGGER.error("ThreadHandler interrupted while waiting on monitor object");      }    }  }  while (handlerEnabled || !incomingQueue.isEmpty()) {    while (!incomingQueue.isEmpty()) {synchronized (threadMonitorObject) {        incomingQueue.drainTo(copyList);      }      while (!copyList.isEmpty()) {        try {          methodToCall.invoke(objectToCall,copyList.pollFirst());        } catch (        IllegalArgumentException e) {          LOGGER.error("ThreadHandler passed incorrect parameters - unable to process them: {}",e.getMessage());        }catch (        IllegalAccessException e) {          LOGGER.error("IllegalAccessException caught while invoking method on ThreadHandler: {}",e.getMessage());        }catch (        InvocationTargetException e) {          LOGGER.error("InvocationTargetException caught while invoking method on ThreadHandler: {}",e.getMessage());        }catch (        Exception e) {          LOGGER.error("Unidentified exception caught in the ThreadHandler thread: {}",e.getMessage());        }      }    }synchronized (threadMonitorObject) {      if (incomingQueue.isEmpty()) {        try {          threadMonitorObject.wait();        } catch (        InterruptedException e) {          LOGGER.error("Interrupted while waiting.");          e.printStackTrace();        }      }    }  }}  }
class C{  public Page fetchPage(int pageNum){  if (pageNum < 0) {    throw new PageException("invalid page number -- out of bounds");  }  numIOs.getAndIncrement();synchronized (PageAllocator.class) {    if (pageLRU.containsKey(translatePageNum(pageNum))) {      return pageLRU.get(translatePageNum(pageNum));    }  }  int headPageIndex=pageNum / Page.pageSize;  if (headPageIndex >= numHeaderPages) {    throw new PageException("invalid page number -- out of bounds");  }  byte[] headCountBytes=this.masterPage.readBytes(headPageIndex * 4,4);  int headCount=ByteBuffer.wrap(headCountBytes).getInt();  if (headCount < 1) {    throw new PageException("invalid page number -- page not allocated");  }  Page headPage=getHeadPage(headPageIndex);  int dataPageIndex=pageNum % Page.pageSize;  byte validByte=headPage.readByte(dataPageIndex);  if (validByte == 0) {    throw new PageException("invalid page number -- page not allocated");  }  int dataBlockID=2 + headPageIndex * (Page.pageSize + 1) + dataPageIndex;  Page dataPage=new Page(this.fc,dataBlockID,pageNum,this.durable);synchronized (PageAllocator.class) {    pageLRU.put(translatePageNum(pageNum),dataPage);  }  return dataPage;}  }
class C{  public void contentTag(String tag,String content){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print('>');  escapeString(content);  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  public static void burnInventory(EntityPlayerMP player,int burnAmount,ItemStack input){  if (!fuelCaches.containsKey(player))   fuelCaches.put(player,-burnAmount); else   fuelCaches.put(player,fuelCaches.get(player) - burnAmount);  int index=0;  while (fuelCaches.get(player) < 0 && index < player.inventory.mainInventory.length) {    ItemStack is=player.inventory.mainInventory[index];    if (is != null) {      int burnTime=TileEntityFurnace.getItemBurnTime(is);      if (burnTime != 0) {        if (is.stackSize > 1)         is.stackSize--; else {          if (is.getItem() == Items.lava_bucket) {            if (input.getItem() == Item.getItemFromBlock(Blocks.sponge) && input.getMetadata() == 1)             player.inventory.mainInventory[index]=new ItemStack(Items.water_bucket); else             player.inventory.mainInventory[index]=new ItemStack(Items.bucket);          } else           player.inventory.mainInventory[index]=null;          index++;        }        fuelCaches.put(player,fuelCaches.get(player) + burnTime);      } else       index++;    } else     index++;  }}  }
class C{  public String tableName(){  return tblName;}  }
class C{  public boolean showWarnings(){  return myShowErrors && myDryRun;}  }
class C{  public static boolean copyFile(File file,File copy){  if (file == null || copy == null)   throw new NullPointerException("File cannot be null");  if (!file.isFile() || copy.isDirectory())   throw new IllegalArgumentException("Not a valid file");  FileInputStream fis=null;  FileOutputStream fos=null;  try {    fis=new FileInputStream(file);    fos=new FileOutputStream(copy);    int bytes;    byte[] packet=new byte[COPY_PACKET_SIZE];    while ((bytes=fis.read(packet,0,COPY_PACKET_SIZE)) != -1)     fos.write(packet,0,bytes);    return true;  } catch (  Exception e) {    LOGGER.log(Level.SEVERE,"Error copying file",e);    return false;  } finally {    try {      if (fos != null)       fos.close();    } catch (    Exception e) {      LOGGER.log(Level.SEVERE,"Problem closing target stream",e);    }    try {      if (fis != null)       fis.close();    } catch (    Exception e) {      LOGGER.log(Level.SEVERE,"Problem closing source stream",e);    }  }}  }
class C{  private void onInvalidTapDetectionTimeout(){  mHandler.handleInvalidTap();  mIsWaitingForInvalidTapDetection=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Heal_TO_OTHER(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1201203,value0,num1);}  }
class C{  private static void createDataSchema(boolean hdfs) throws IOException {  createDataSchema(null,hdfs);}  }
class C{  public static void markToken(JTextComponent pane,Token token,SimpleMarker marker){  markText(pane,token.start,token.end(),marker);}  }
class C{  void enableDynamicServiceLoading(){  startService(Operation.createPost(UriUtils.buildUri(this,LoaderFactoryService.class)),new LoaderFactoryService());  LoaderService.LoaderServiceState payload=new LoaderService.LoaderServiceState();  payload.loaderType=LoaderService.LoaderType.FILESYSTEM;  payload.path=DYNAMIC_SERVICES_PATH;  payload.servicePackages=new HashMap<>();  sendRequest(Operation.createPost(UriUtils.buildUri(this,LoaderFactoryService.class)).setBody(payload).setReferer(getUri()));}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public void populateDoubleField(FieldIdEnum fieldId,Double value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (value != null) {    ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);  } else {    fieldConfig.revertToDefaultValue();  }}  }
class C{  public static int patchFast(File oldFile,File newFile,File diffFile,int extLen) throws IOException {  if (oldFile == null || oldFile.length() <= 0) {    return RETURN_OLD_FILE_ERR;  }  if (newFile == null) {    return RETURN_NEW_FILE_ERR;  }  if (diffFile == null || diffFile.length() <= 0) {    return RETURN_DIFF_FILE_ERR;  }  InputStream oldInputStream=new BufferedInputStream(new FileInputStream(oldFile));  byte[] diffBytes=new byte[(int)diffFile.length()];  InputStream diffInputStream=new FileInputStream(diffFile);  try {    BSUtil.readFromStream(diffInputStream,diffBytes,0,diffBytes.length);  }  finally {    diffInputStream.close();  }  byte[] newBytes=patchFast(oldInputStream,(int)oldFile.length(),diffBytes,extLen);  OutputStream newOutputStream=new FileOutputStream(newFile);  try {    newOutputStream.write(newBytes);  }  finally {    newOutputStream.close();  }  return RETURN_SUCCESS;}  }
class C{  public NullAudioPlayer(){}  }
class C{  public SenderConnection(EmailProtocol protocol,String username,String password,String host,int port,long connectionTimeout,long readTimeout,long writeTimeout,Map<String,String> properties){  super(protocol,username,password,host,port,connectionTimeout,readTimeout,writeTimeout,properties);}  }
class C{  public static void stop(Thread thread){  if (thread != null) {    thread.interrupt();  }}  }
class C{  @Override public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator authenticate() -- returning false",module);  return true;}  }
class C{  public static double meanDifference(final double[] sample1,final double[] sample2) throws MathIllegalArgumentException {  return sumDifference(sample1,sample2) / sample1.length;}  }
class C{  public Polygon2D(float[] xpoints,float[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  System.arraycopy(xpoints,0,this.xpoints,0,npoints);  System.arraycopy(ypoints,0,this.ypoints,0,npoints);  calculatePath();}  }
class C{  private String encode(String str){  if (str == null) {    return null;  }  try {    return URLEncoder.encode(str,Charsets.UTF_8.name());  } catch (  UnsupportedEncodingException e) {    throw Throwables.propagate(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200547,skilltarget,num0,skillname);}  }
class C{  @Override public void onRemoveDataTag(final ISourceDataTag sourceDataTag,final ChangeReport changeReport){  changeReport.appendError("The equipment has no implementation to" + " remove data tags. You have to restart the DAQ.");  changeReport.setState(CHANGE_STATE.REBOOT);}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,String parentName) throws ClassNotFoundException {  Class<?> parentClass=loadClass(parentName);  return isOrSubOf(objectClass,parentClass);}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  public CMM(CMMParams params){  this.params=params;}  }
class C{  public static String diagToString(Diag diag,boolean colored){  Doc text;switch (diag.getKind()) {case ERROR:    text=Doc.text("ERROR: ");  if (colored) {    text=Doc.color(AnsiColor.RED,text);  }break;case WARNING:text=Doc.text("WARNING: ");if (colored) {text=Doc.color(AnsiColor.YELLOW,text);}break;default :text=Doc.text("HINT:");break;}text=text.add(Doc.text(diag.getLocation().getDisplayString())).add(Doc.text(": ")).add(Doc.text(diag.getMessage()));return text.toString();}  }
class C{  public static String makeMessageList(List<? extends Object> msgList,String msgPrefix,String msgSuffix){  StringBuilder outMsg=new StringBuilder();  if (msgPrefix == null) {    msgPrefix=defaultMessagePrefix;  }  if (UtilValidate.isNotEmpty(msgList)) {    for (    Object msg : msgList) {      if (msg == null)       continue;      String curMsg=msg.toString();      if (msgPrefix != null)       outMsg.append(msgPrefix);      outMsg.append(curMsg);      if (msgSuffix != null)       outMsg.append(msgSuffix);    }  }  return outMsg.toString();}  }
class C{  public void onStart(){}  }
class C{  public static int pow(final int k,int e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  int result=1;  int k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result*=k2p;    }    k2p*=k2p;    e=e >> 1;  }  return result;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public Black2RedGradient(int maxCount){  this.maxCount=maxCount;  factor=maxCount / Math.log(maxCount);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public static String toString(Object object){  return object != null ? object.toString() : null;}  }
class C{  public Builder riseOnHover(Boolean riseOnHover){  this.riseOnHover=riseOnHover;  return this;}  }
class C{  public void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  @Override public void keyPressed(KeyEvent e){  super.keyPressed(e);}  }
class C{  public static String locale2xmllang(Locale locale){  if (locale == null)   throw new IllegalArgumentException("Locale must not be null");  String country=locale.getCountry();  if (!"".equals(country))   return locale.getLanguage() + "-" + country;  return locale.getLanguage();}  }
class C{  private void drawTicks(Canvas canvas){  for (int i=0; i < mNumSegments; i++) {    final float x=i * mTickDistance + mLeftX;    canvas.drawLine(x,mTickStartY,x,mTickEndY,mPaint);  }  canvas.drawLine(mRightX,mTickStartY,mRightX,mTickEndY,mPaint);}  }
class C{  private GaussianCurveFitter(double[] initialGuess,int maxIter){  this.initialGuess=initialGuess;  this.maxIter=maxIter;}  }
class C{  private void timeout(){  if (this.status == AccelListener.STARTING) {    this.timestamp=System.currentTimeMillis();    this.win();  }}  }
class C{  private void startMarginAnimation(boolean enter){  startMarginAnimation(enter,mStacks[1].isDisplayable());}  }
class C{  public boolean isReversed(){  return reversed;}  }
class C{  private void disable(){  signin.setClickable(false);  signin.setText("Signing in...");  signin.setBackgroundColor(getResources().getColor(R.color.textColorSecondary));}  }
class C{  SegmentationProfile mergePersonalizationResponseWithSegmentation(SegmentationProfile segmentationProfile,PersonalizationEngineResponse personalizationEngineResponse){  if (personalizationEngineResponse != null) {    segmentationProfile.addAttribute("tid",personalizationEngineResponse.getTid());    segmentationProfile.addAttribute("data",personalizationEngineResponse.getData());    segmentationProfile.addAttribute("model",personalizationEngineResponse.getModel());  }  return segmentationProfile;}  }
class C{  public static String encodeURN(String publicId){  String urn=PublicId.normalize(publicId);  urn=PublicId.stringReplace(urn,"%","%25");  urn=PublicId.stringReplace(urn,";","%3B");  urn=PublicId.stringReplace(urn,"'","%27");  urn=PublicId.stringReplace(urn,"?","%3F");  urn=PublicId.stringReplace(urn,"#","%23");  urn=PublicId.stringReplace(urn,"+","%2B");  urn=PublicId.stringReplace(urn," ","+");  urn=PublicId.stringReplace(urn,"::",";");  urn=PublicId.stringReplace(urn,":","%3A");  urn=PublicId.stringReplace(urn,"//",":");  urn=PublicId.stringReplace(urn,"/","%2F");  return "urn:publicid:" + urn;}  }
class C{  public void addToPAG(Context varNodeParameter){  if (!hasBeenBuilt)   throw new RuntimeException();  if (varNodeParameter == null) {    if (hasBeenAdded)     return;    hasBeenAdded=true;  } else {    if (addedContexts == null)     addedContexts=new HashSet<Context>();    if (!addedContexts.add(varNodeParameter))     return;  }  QueueReader<Node> reader=internalReader.clone();  while (reader.hasNext()) {    Node src=(Node)reader.next();    src=parameterize(src,varNodeParameter);    Node dst=(Node)reader.next();    dst=parameterize(dst,varNodeParameter);    pag.addEdge(src,dst);  }  reader=inReader.clone();  while (reader.hasNext()) {    Node src=(Node)reader.next();    Node dst=(Node)reader.next();    dst=parameterize(dst,varNodeParameter);    pag.addEdge(src,dst);  }  reader=outReader.clone();  while (reader.hasNext()) {    Node src=(Node)reader.next();    src=parameterize(src,varNodeParameter);    Node dst=(Node)reader.next();    pag.addEdge(src,dst);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new Opt(),0);}  }
class C{  private float y(TouchState s){  final float currToTan=(float)Math.sqrt((s.distance * s.distance) - (mScaledTouchSlop * mScaledTouchSlop));  return currToTan * (mScaledTouchSlop / s.distance);}  }
class C{  private void debugPrint(String msg){  if (debug) {    System.out.println(toString() + ": " + msg);  }}  }
class C{  protected FaveAddUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public void write(short codeUnit){  ensureArrayLength(1);  array[cursor()]=codeUnit;  advance(1);}  }
class C{  protected Expression generateExpression(){  Expression expression=null;  if (comboBox != null) {    ValueComboBoxData value=comboBox.getSelectedValue();    if (value != null) {      expression=getFilterFactory().literal(value.getKey());    }  }  return expression;}  }
class C{  public AWSIotMqttClient(String clientEndpoint,String clientId,String awsAccessKeyId,String awsSecretAccessKey){  super(clientEndpoint,clientId,awsAccessKeyId,awsSecretAccessKey,null);}  }
class C{  public @Nullable Uri createNew(String name){  ContentValues value=new ContentValues();  value.put(MediaStore.Audio.Playlists.NAME,name);  return resolver.insert(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,value);}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void rejectDocument(NGramDocument dDoc,double fLearningRate){  dDoc.getDocumentGraph().nullify();  dDoc.getDocumentHistogram().nullify();  if (this.getDocumentHistogram().length() > 0)   getDocumentHistogram().mergeHistogram(dDoc.getDocumentHistogram(),fLearningRate);  if (!this.getDocumentGraph().isEmpty())   this.getDocumentGraph().mergeGraph(dDoc.getDocumentGraph(),fLearningRate);}  }
class C{  static public InputStream findClusterXSLSchema(InputStream _clusterXMLInputStream) throws ClusterConfigurationException {  Document clusterXMLDocumet;  String schemaNameToBeUsed=null;  try {    clusterXMLDocumet=XmlUtils.getDocumentBuilder().parse(_clusterXMLInputStream);    schemaNameToBeUsed=ClusterXML.getNodeValueIfExists(clusterXMLDocumet.getDocumentElement(),ClusterXML.CLUSTER_SCHEMA_NAME_TAG);    if (JSpaceUtilities.isEmpty(schemaNameToBeUsed)) {      String missingSchemaMsg="Could not find the <cluster-schema-name> tag in the cluster members xml file.";      throw new ClusterConfigurationException(missingSchemaMsg);    }  } catch (  SAXException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  ParserConfigurationException e) {    e.printStackTrace();  }  return ResourceLoader.findClusterXSLSchema(schemaNameToBeUsed);}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  private void initTemplates(){  m_jmsMessageTemplate=new GSMessageImpl();  m_jmsMessageTemplate.setDestinationName(m_destName);  m_jmsMessageTemplate.setProperties(null);}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  public boolean onDown(float x,float y){  if (checkClicked(x,y)) {    setPressed(true);    return true;  }  return false;}  }
class C{  public void save(File file,boolean append) throws IOException {  try (DataOutputStream outs=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file,append)))){    outs.writeInt(MAGIC_NUMBER);    outs.writeBoolean(m_hasFreeKey);    outs.writeInt(m_freeValue);    outs.writeFloat(m_fillFactor);    outs.writeInt(m_threshold);    outs.writeInt(m_size);    outs.writeInt(m_mask);    outs.writeInt(m_mask2);    outs.writeInt(m_data.length);    for (    int a : m_data)     outs.writeInt(a);  } }  }
class C{  public boolean compare_type_assigners(){  return soot.PhaseOptions.getBoolean(options,"compare-type-assigners");}  }
class C{  public static void sendMessage(Player player,String msg){  sendPacket(player,new SM_MESSAGE(0,null,msg,ChatType.GOLDEN_YELLOW));}  }
class C{  public void release(final UnsummonType unsummonType){  SummonsService.release(getOwner(),unsummonType,isAttacked);}  }
class C{  public static double lerp(double start,double end,double progress){  return start - progress * (start - end);}  }
class C{  @Override public void startEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  super.startEntity(name,identifier,encoding,augs);  boolean dtdEntity=name.equals("[dtd]");  if (dtdEntity) {    if (fDTDHandler != null && !fStartDTDCalled) {      fDTDHandler.startDTD(fEntityScanner,null);    }    if (fDTDHandler != null) {      fDTDHandler.startExternalSubset(identifier,null);    }    fEntityManager.startExternalSubset();    fExtEntityDepth++;  } else   if (name.charAt(0) == '%') {    pushPEStack(fMarkUpDepth,fReportEntity);    if (fEntityScanner.isExternal()) {      fExtEntityDepth++;    }  }  if (fDTDHandler != null && !dtdEntity && fReportEntity) {    fDTDHandler.startParameterEntity(name,identifier,encoding,augs);  }}  }
class C{  public void java_lang_ClassLoader_getCallerClassLoader(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public FactorialLog withCache(final int cacheSize){  return new FactorialLog(cacheSize,LOG_FACTORIALS);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  put(index,new Long(value));  return this;}  }
class C{  @Nonnull private String computePathBasedOnTemplate(@Nonnull String template) throws IOException {  if (!isRelativePath(template)) {    throw new AbortException(format("Workspace template defined for Disk Pool '%s' must be a relative path",step.getDiskPoolId()));  }  String path=replaceMacro(template,envVars);  if (path == null) {    String message=format("Path is null after resolving environment variables for the defined workspace template: %s",template);    throw new AbortException(message);  }  if (path.contains("${")) {    String message=format("Can't resolve the following workspace template: %s. The resulting path is: %s. " + "Did you provide all the needed environment variables?",template,path);    throw new AbortException(message);  }  return new FilePath(new File(path)).getRemote();}  }
class C{  protected Complex createComplex(double realPart,double imaginaryPart){  return new Complex(realPart,imaginaryPart);}  }
class C{  @Override public List<Integer> readInvertedSortIndex() throws IOException {  if (null == columnSortInfo) {    readColumnSortInfo();  }  return columnSortInfo.getSort_index_inverted();}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  public GraphicPanelFieldManager(Class<?> panelId){  this.panelId=panelId;  Map<FieldIdEnum,FieldConfigBase> fieldMap=new HashMap<FieldIdEnum,FieldConfigBase>();  fieldConfigMap.put(this.panelId,fieldMap);}  }
class C{  public static String collectionToCommaDelimitedString(Collection<String> coll){  return collectionToDelimitedString(coll,",");}  }
class C{  public void dragComponent(@AndroidCoordinate int x,@AndroidCoordinate int y){  if (myDragDropWidget == null) {    return;  }  int ax=pxToDp(x);  int ay=pxToDp(y);  myDragDropWidget.setX(ax);  myDragDropWidget.setY(ay);  myDragDropWidget.forceUpdateDrawPosition();  for (  DrawConstraintModel drawConstraintModel : getDrawConstraintModels()) {    drawConstraintModel.getMouseInteraction().dragAndDrop(myDragDropWidget,ax,ay);  }}  }
class C{  private void updateFieldStates(){  backgroundColourButton.setEnabled(!chckboxTransparent.isSelected());  borderColourButton.setEnabled(chckboxShowBorder.isSelected());}  }
class C{  public boolean isDurableWriteEnabled(){  return getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,defaultConfig.getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,BKDL_IS_DURABLE_WRITE_ENABLED_DEFAULT));}  }
class C{  public AppsGetLeaderboardQuery(VkApiClient client,UserActor actor,AppsGetLeaderboardType type){  super(client,"apps.getLeaderboard",GetLeaderboardResponse.class);  accessToken(actor.getAccessToken());  type(type);}  }
class C{  @RequestMapping(value="/account/reset_password/finish",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<String> finishPasswordReset(@RequestBody KeyAndPasswordDTO keyAndPassword){  if (!checkPasswordLength(keyAndPassword.getNewPassword())) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  return userService.completePasswordReset(keyAndPassword.getNewPassword(),keyAndPassword.getKey()).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public void removeAllElements(){  size=0;}  }
class C{  public void gen() throws Exception {  infoGen.gen();}  }
class C{  private int requiredApprovalLevel(OrganisationUnit orgUnit,User user,List<DataApprovalLevel> approvalLevels){  DataApprovalLevel userLevel=getUserApprovalLevel(orgUnit,user,approvalLevels);  int totalLevels=approvalLevels.size();  return userLevel == null ? 0 : userLevel.getLevel() == totalLevels ? APPROVAL_LEVEL_UNAPPROVED : userLevel.getLevel() + 1;}  }
class C{  private void onPermissionsNotGranted(){  Toast.makeText(this,R.string.toast_permissions_not_granted,Toast.LENGTH_SHORT).show();  finish();}  }
class C{  public static <T extends Collection<?>>void notEmpty(String argumentName,T argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.size() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  @Override public void empty(Augmentations augs) throws XNIException {}  }
class C{  public String parse(String str,Model m){  try {    str=VEngine.parse(str,m.context);  } catch (  Exception e) {    log.error(str,e);  }  return str;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP(String value0,long num1){  return new SM_SYSTEM_MESSAGE(1370000,value0,num1);}  }
class C{  private static JValueSlider createField(Force f,int param){  double value=f.getParameter(param);  double min=f.getMinValue(param);  double max=f.getMaxValue(param);  String name=f.getParameterName(param);  JValueSlider s=new JValueSlider(name,min,max,value);  s.setBackground(Color.WHITE);  s.putClientProperty("force",f);  s.putClientProperty("param",new Integer(param));  s.setPreferredSize(new Dimension(300,30));  s.setMaximumSize(new Dimension(300,30));  return s;}  }
class C{  public void hertelMehlhorn(){  int vSize=this.vertices.size();  int i=vSize * 2;  while (i < this.edges.size()) {    DoubleEdgeListHalfEdge e=this.edges.get(i);    DoubleEdgeListVertex v1=e.origin;    DoubleEdgeListVertex v0=e.getPrevious().origin;    DoubleEdgeListVertex v2=e.twin.next.next.origin;    if (isReflex(v0,v1,v2)) {      i+=2;      continue;    }    v1=e.twin.origin;    v0=e.twin.getPrevious().origin;    v2=e.next.next.origin;    if (isReflex(v0,v1,v2)) {      i+=2;      continue;    }    this.removeHalfEdges(i,e);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_SUFFIX\" ("+ "\"ID\" INTEGER PRIMARY KEY ,"+ "\"SUFFIX\" TEXT);");}  }
class C{  public long createAlarm(Intent intent,long timestamp){  PendingIntent retryPIntent=PendingIntent.getService(mContext,0,intent,0);  AlarmManager am=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);  setAlarm(am,timestamp,retryPIntent);  return timestamp;}  }
class C{  public PreferenceStore(){  myFilename=null;}  }
class C{  private void populateAllIvPossibilities(IVScanResult ivScanResult){  IVResultsAdapter ivResults=new IVResultsAdapter(ivScanResult);  rvResults.setAdapter(ivResults);}  }
class C{  public void dataSourceLoaded(DataSourceInterface dataSource){  this.dataSource=dataSource;  if (this.dataSource != null) {    attributeNameList=this.dataSource.getAttributes(expectedDataType);  }  populateAttributeComboBox();}  }
class C{  protected static char[] encodeHex(final byte[] data){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS_LOWER[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS_LOWER[0x0F & data[i]];  }  return out;}  }
class C{  private void joinRoom(final Invitation invitation){  controller=createController();  Games.RealTimeMultiplayer.join(client,RoomConfig.builder(controller).setRoomStatusUpdateListener(controller).setMessageReceivedListener(controller).setVariant(invitation.getVariant()).setInvitationIdToAccept(invitation.getInvitationId()).build());}  }
class C{  protected void flowThrough(Object inValue,Object unit,Object outValue){  FlowSet in=(FlowSet)inValue, out=(FlowSet)outValue;  in.union(unitToGenerateSet.get(unit),out);}  }
class C{  public void transformValues(TShortFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  public boolean geom_blocking(){  return soot.PhaseOptions.getBoolean(options,"geom-blocking");}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  public boolean disJoin(TransactionParticipant part) throws RemoteException {  if (finer_op_logger) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"disjoin",part);  }  int state=getState();  if (state != ACTIVE)   throw new RuntimeException("not active");synchronized (this) {    ParticipantHandle ph=new ParticipantHandle(part,0,null,_persistent);    ParticipantHandle[] ps=parthandles();    if (ps == null)     return false;    ILRMIProxy stub=(ILRMIProxy)part;    ph.setStubId(stub.getStubId());    for (    ParticipantHandle p : ps) {      if (p.equals(ph)) {        if (p.isDisableDisjoin())         return false;        if (_parts != null) {          _parts.remove(p);          if (_parts.size() == 0)           _parts=null;        }        if (_singleHandle != null && _singleHandle.equals(ph)) {          _singleHandle=null;          ParticipantHandle[] psAfter=parthandles();          if (psAfter != null && psAfter.length > 0)           _singleHandle=psAfter[0];        }        return true;      }    }    return false;  }}  }
class C{  public void performRankingUpdate(Map<Integer,Integer> legionRanking){  log.info("Legion ranking update task started");  long startTime=System.currentTimeMillis();  Iterator<Legion> legionsIterator=allCachedLegions.iterator();  int legionsUpdated=0;  this.legionRanking=legionRanking;  while (legionsIterator.hasNext()) {    Legion legion=legionsIterator.next();    if (legionRanking.containsKey(legion.getLegionId())) {      legion.setLegionRank(legionRanking.get(legion.getLegionId()));      PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x01,legion));    }    legionsUpdated++;  }  long workTime=System.currentTimeMillis() - startTime;  log.info("Legion ranking update: " + workTime + " ms, legions: "+ legionsUpdated);}  }
class C{  T toResponse(ResponseBody body) throws IOException {  return responseConverter.convert(body);}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  private void onDisconnect(){  onDisconnect(true);}  }
class C{  public static ConstraintWidget gapWidget(Direction direction,Rectangle region,ConstraintWidget[] list){  int rootWidth=list[0].getParent().getWidth();  int rootHeight=list[0].getParent().getHeight();  Rectangle rect=new Rectangle();switch (direction) {case NORTH:{      rect.y=0;      rect.x=region.x + 1;      rect.width=region.width - 2;      rect.height=region.y;    }  break;case SOUTH:{  rect.y=region.y + region.height + 1;  rect.x=region.x + 1;  rect.width=region.width - 2;  rect.height=rootHeight - rect.y;}break;case WEST:{rect.y=region.y + 1;rect.x=0;rect.width=region.x;rect.height=region.height - 2;}break;case EAST:{rect.y=region.y + 1;rect.x=region.x + region.width + 1;rect.width=rootWidth - rect.x;rect.height=region.height - 2;}break;}int min=Integer.MAX_VALUE;ConstraintWidget minWidget=null;for (ConstraintWidget widget : list) {Rectangle r=getRectangle(widget);if (r.intersects(rect)) {int dist=(int)distance(r,region);if (min > dist) {minWidget=widget;min=dist;}}}if (min > Math.max(rootHeight,rootWidth)) {return list[0].getParent();}return minWidget;}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph,Predicate filter,Schema nodeSchema,Schema edgeSchema){  checkGroupExists(group);  String ngroup=PrefuseLib.getGroupName(group,Graph.NODES);  String egroup=PrefuseLib.getGroupName(group,Graph.EDGES);  VisualTable nt, et;  nt=addTable(ngroup,graph.getNodeTable(),filter,nodeSchema);  et=addTable(egroup,graph.getEdgeTable(),filter,edgeSchema);  VisualGraph vg=new VisualGraph(nt,et,graph.isDirected(),graph.getNodeKeyField(),graph.getEdgeSourceField(),graph.getEdgeTargetField());  vg.setVisualization(this);  vg.setGroup(group);  addDataGroup(group,vg,graph);  TupleManager ntm=new TupleManager(nt,vg,TableNodeItem.class);  TupleManager etm=new TupleManager(et,vg,TableEdgeItem.class);  nt.setTupleManager(ntm);  et.setTupleManager(etm);  vg.setTupleManagers(ntm,etm);  return vg;}  }
class C{  public int compare(Viewer viewer,Object o1,Object o2){  LogEntryChangePath p1=(LogEntryChangePath)o1;  LogEntryChangePath p2=(LogEntryChangePath)o2;  int result=0;  if (p1 == null || p2 == null) {    result=super.compare(viewer,o1,o2);  } else {    int[] columnSortOrder=SORT_ORDERS_BY_COLUMN[columnNumber];    for (int i=0; i < columnSortOrder.length; ++i) {      result=compareColumnValue(columnSortOrder[i],p1,p2);      if (result != 0)       break;    }  }  if (reversed)   result=-result;  return result;}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  meta=(MDKeyGenStepMeta)smi;  StandardLogService.setThreadName(meta.getPartitionID(),null);  data=(MDKeyGenStepData)sdi;  meta.initialize();  Object[] row=getRow();  if (first) {    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordMdkGenerateTotalTime(meta.getPartitionID(),System.currentTimeMillis());    first=false;    data.outputRowMeta=new RowMeta();    boolean isExecutionRequired=setStepConfiguration();    if (!isExecutionRequired) {      processingComplete();      return false;    }    setStepOutputInterface();  }  if (null != row) {    putRow(data.outputRowMeta,new Object[measureCount + 1]);    return true;  }  try {    initDataHandler();    dataHandler.initialise();    finalMerger.startFinalMerge();    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValue2MdkAdd2FileTime(meta.getPartitionID(),System.currentTimeMillis());    while (finalMerger.hasNext()) {      Object[] r=finalMerger.next();      readCounter++;      Object[] outputRow=process(r);      dataHandler.addDataToStore(outputRow);      writeCounter++;    }  } catch (  CarbonDataWriterException e) {    LOGGER.error(e,"Failed for table: " + this.tableName + " in MDKeyGenStep");    throw new KettleException("Error while initializing data handler : " + e.getMessage());  }catch (  Exception e) {    LOGGER.error(e,"Failed for table: " + this.tableName + " in MDKeyGenStep");    throw new KettleException("There is an unexpected error: " + e.getMessage());  } finally {    try {      dataHandler.finish();    } catch (    CarbonDataWriterException e) {      LOGGER.error(e,"Failed for table: " + this.tableName + " in  finishing data handler");    }catch (    Exception e) {      LOGGER.error(e,"Failed for table: " + this.tableName + " in  finishing data handler");    }  }  LOGGER.info("Record Procerssed For table: " + this.tableName);  String logMessage="Finished Carbon Mdkey Generation Step: Read: " + readCounter + ": Write: "+ writeCounter;  LOGGER.info(logMessage);  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordTotalRecords(writeCounter);  processingComplete();  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValue2MdkAdd2FileTime(meta.getPartitionID(),System.currentTimeMillis());  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordMdkGenerateTotalTime(meta.getPartitionID(),System.currentTimeMillis());  return false;}  }
class C{  public SafeFaceDetector(Detector<Face> delegate){  mDelegate=delegate;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  @DataProvider(name="pitstops") public Object[][] createPitstopData(){  return new Object[][]{{"1",1},{"2",3},{"3",2},{"4",2}};}  }
class C{  @Override public void updateFields(DataSourceAttributeListInterface attributeData){  if (attributeData != null) {    if (connectedToDataSourceFlag == false) {      List<DataSourceAttributeData> attributeDataList=attributeData.getData();      List<DataSourceFieldInterface> fieldList=new ArrayList<DataSourceFieldInterface>();      for (      DataSourceAttributeData attributeFieldData : attributeDataList) {        DataSourceField field=new DataSourceField(attributeFieldData.getName().getLocalPart(),attributeFieldData.getType());        fieldList.add(field);      }      this.editorFileInterface.getSLDData().setFieldList(fieldList);      createInternalDataSource();    }  }}  }
class C{  @Override protected void analyzeInteraction(){  int critVal=(int)(Rnd.get(55000) / (skillLvlDiff + 1));  if (critVal < CraftConfig.CRAFT_CHANCE_PURPLECRIT) {    critType=CraftCritType.PURPLE;    currentSuccessValue=maxSuccessValue;    return;  } else   if (critVal < CraftConfig.CRAFT_CHANCE_BLUECRIT) {    critType=CraftCritType.BLUE;  } else   if (critVal < CraftConfig.CRAFT_CHANCE_INSTANT) {    critType=CraftCritType.INSTANT;    currentSuccessValue=maxSuccessValue;    return;  }  if (CraftConfig.CRAFT_CHECKTASK) {    if (this.task == null) {      return;    }  }  double mod=Math.sqrt((double)skillLvlDiff / 450f) * 100f + Rnd.nextGaussian() * 10f;  mod-=(double)this.itemQuality.getQualityId();  if (mod < 0) {    currentFailureValue-=(int)mod;  } else {    currentSuccessValue+=(int)mod;  }  if (currentSuccessValue >= maxSuccessValue) {    currentSuccessValue=maxSuccessValue;  } else   if (currentFailureValue >= maxFailureValue) {    currentFailureValue=maxFailureValue;  }}  }
class C{  public void showTextOnly(){  isTextOnlyMode=true;}  }
class C{  public void writeContentType(String type) throws IOException {  writeHeader(HttpWriter.CONTENT_TYPE,type);}  }
class C{  public void populateExpression(Expression expression){  if (valueTextField != null) {    valueTextField.setText(expression.toString());  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValueObj=(String)undoRedoObject.getNewValue();  filterComboBox.setSelectedItem(newValueObj);}  }
class C{  public void stopPlayingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.stopPlaying();  }}  }
class C{  public Vector3f cross(Vector3f v,Vector3f result){  return cross(v.x,v.y,v.z,result);}  }
class C{  private Socket ensureTls(Socket socket){  if (socket != null && (socket instanceof SSLSocket)) {    ((SSLSocket)socket).setEnabledProtocols(new String[]{TLS_V_1_2});  }  return socket;}  }
class C{  @Deployment public void testEventBasedGateway(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("catchSignal");  Execution waitingExecution=runtimeService.createExecutionQuery().signalEventSubscriptionName("alert").singleResult();  assertNotNull(waitingExecution);  runtimeService.signalEventReceived("alert",waitingExecution.getId());  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());  HistoricActivityInstance historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId("eventBasedgateway").processInstanceId(processInstance.getId()).singleResult();  assertNotNull(historicActivityInstance);}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace(System.err);    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    Distribution dDist=null;    if (weCorrectEdge == null) {      dDist=new Distribution();    } else {      dDist=(Distribution)EdgeDistros.get(weCorrectEdge);      if (dDist == null) {        dDist=new Distribution();      }    }    dDist.increaseValue(Double.valueOf(++iCnt),1);    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,0.0);        eclLocator.addedEdge(e);        EdgeDistros.put(e,dDist);      } else {        EdgeDistros.put(weCorrectEdge,dDist);      }    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null) {      dDist=new Distribution();    }    dDist.increaseValue(Double.valueOf(iCnt),1);    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,0.0);        eclLocator.addedEdge(e);        EdgeDistros.put(e,dDist);      } else {        dDist=(Distribution)EdgeDistros.get(weCorrectEdge);        if (dDist == null) {          dDist=new Distribution();        }        weCorrectEdge.setWeight(0.0);        EdgeDistros.put(weCorrectEdge,dDist);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  @Override public void initiateSpeculativeRequest(final ScheduledExecutorService scheduler,final SpeculativeRequestExecutor requestExecutor){  issueSpeculativeRequest(scheduler,requestExecutor);}  }
class C{  public List<DependencyGraph> dependencyTreebankTest(){switch (language) {case ENGLISH:    return DependencyGraphReader.read("/export/dat/udt/en/en-ud-test.conllu",'u');case VIETNAMESE:  return DependencyGraphReader.read("/export/dat/udt/vi/01-test.conll",'x');}return null;}  }
class C{  public SourceDataTag(final Long id,final String name,final boolean control){  this(id,name,control,DataTagConstants.MODE_OPERATIONAL,null,null);}  }
class C{  public CartPaymentInfo makePaymentInfo(String id,String refNum,BigDecimal amount){  CartPaymentInfo inf=new CartPaymentInfo();  inf.refNum[0]=refNum;  inf.amount=amount;  inf.origAmount=amount;  if (!isPaymentMethodType(id)) {    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);    inf.paymentMethodId=id;  } else {    inf.paymentMethodTypeId=id;  }  return inf;}  }
class C{  public void tanh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  final double[] function=new double[1 + order];  final double t=FastMath.tanh(operand[operandOffset]);  function[0]=t;  if (order > 0) {    final double[] p=new double[order + 2];    p[1]=1;    final double t2=t * t;    for (int n=1; n <= order; ++n) {      double v=0;      p[n + 1]=-n * p[n];      for (int k=n + 1; k >= 0; k-=2) {        v=v * t2 + p[k];        if (k > 2) {          p[k - 2]=(k - 1) * p[k - 1] - (k - 3) * p[k - 3];        } else         if (k == 2) {          p[0]=p[1];        }      }      if ((n & 0x1) == 0) {        v*=t;      }      function[n]=v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public void register(String key,Item value){  register(key,matcherOf(value));}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigDouble copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigDouble(fieldConfigBase.getCommonData());    FieldConfigDouble doubleFieldConfig=(FieldConfigDouble)fieldConfigBase;    copy.setConfig(doubleFieldConfig.minValue,doubleFieldConfig.maxValue,doubleFieldConfig.stepSize,doubleFieldConfig.noOfDecimalPlaces);    copy.setDefaultValue(doubleFieldConfig.defaultValue);  }  return copy;}  }
class C{  @Override public long blocksAccessed(){  return si.blocksAccessed();}  }
class C{  public PerformanceTableModel(){  Vector<String> vSysID=new Vector<String>();  Vector<String> vTopicID=new Vector<String>();  Vector<Double> vPerformance=new Vector<Double>();  lCols=new TreeMap<String,Vector>();  lCols.put(COLUMNNAME_SYSTEMID,vSysID);  lCols.put(COLUMNNAME_TOPICID,vTopicID);  lCols.put(COLUMNNAME_PERFORMANCE,vPerformance);}  }
class C{  public int read(ByteBuffer dst) throws IOException {  if (!dst.hasRemaining())   return 0;  if (!isHandShakeComplete()) {    if (isBlocking()) {      while (!isHandShakeComplete()) {        processHandshake();      }    } else {      processHandshake();      if (!isHandShakeComplete()) {        return 0;      }    }  }  int purged=readRemaining(dst);  if (purged != 0)   return purged;  assert (inData.position() == 0);  inData.clear();  if (!inCrypt.hasRemaining())   inCrypt.clear(); else   inCrypt.compact();  if (isBlocking() || readEngineResult.getStatus() == Status.BUFFER_UNDERFLOW)   if (socketChannel.read(inCrypt) == -1) {    return -1;  }  inCrypt.flip();  unwrap();  int transfered=transfereTo(inData,dst);  if (transfered == 0 && isBlocking()) {    return read(dst);  }  return transfered;}  }
class C{  public Graph(){  this(false);}  }
class C{  private static MaryData extractParagraphAsMaryData(MaryData maryxml,Element paragraph){  if (!maryxml.getType().isMaryXML()) {    throw new IllegalArgumentException("Expected MaryXML data");  }  String rootLanguage=maryxml.getDocument().getDocumentElement().getAttribute("xml:lang");  Document newDoc=MaryXML.newDocument();  Element newRoot=newDoc.getDocumentElement();  Element importedInner=(Element)newDoc.importNode(paragraph,true);  Element toImport=(Element)paragraph.getParentNode();  while (!toImport.getTagName().equals(MaryXML.MARYXML)) {    Element imported=(Element)newDoc.importNode(toImport,false);    imported.appendChild(importedInner);    importedInner=imported;    toImport=(Element)toImport.getParentNode();  }  newRoot.appendChild(importedInner);  String language=rootLanguage;  Element voice=(Element)DomUtils.getAncestor(paragraph,MaryXML.VOICE);  if (voice != null) {    if (voice.hasAttribute("xml:lang")) {      language=voice.getAttribute("xml:lang");    } else     if (voice.hasAttribute("name")) {      String name=voice.getAttribute("name");      Voice v=Voice.getVoice(name);      if (v != null && v.getLocale() != null)       language=MaryUtils.locale2xmllang(v.getLocale());    }  }  newRoot.setAttribute("xml:lang",language);  MaryData md=new MaryData(maryxml.getType(),MaryUtils.string2locale(language));  Voice dVoice=maryxml.getDefaultVoice();  if (dVoice != null) {    md.setDefaultVoice(dVoice);  }  md.setDocument(newDoc);  return md;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/history/oneTaskProcess.bpmn20.xml"}) public void testQueryHistoricProcessInstanceIncludeBinaryVariable() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("binaryVariable",(Object)"It is I, le binary".getBytes()));  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.complete(task.getId());  HistoricProcessInstance historicProcess=historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance.getId()).includeProcessVariables().singleResult();  assertNotNull(historicProcess);  assertNotNull(historicProcess.getProcessVariables());  byte[] bytes=(byte[])historicProcess.getProcessVariables().get("binaryVariable");  assertEquals("It is I, le binary",new String(bytes));}  }
class C{  public static byte[] translate(byte[] sequence,byte[] alphabet){  return translate(sequence,alphabet,0,sequence.length);}  }
class C{  public void testUserEntityEvents() throws Exception {  User user=null;  try {    user=identityService.newUser("fred");    user.setFirstName("Frederik");    user.setLastName("Heremans");    identityService.saveUser(user);    assertEquals(2,listener.getEventsReceived().size());    ActivitiIdmEntityEvent event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_CREATED,event.getType());    assertTrue(event.getEntity() instanceof User);    User userFromEvent=(User)event.getEntity();    assertEquals("fred",userFromEvent.getId());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiIdmEventType.ENTITY_INITIALIZED,event.getType());    listener.clearEventsReceived();    user.setFirstName("Anna");    identityService.saveUser(user);    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_UPDATED,event.getType());    assertTrue(event.getEntity() instanceof User);    userFromEvent=(User)event.getEntity();    assertEquals("fred",userFromEvent.getId());    assertEquals("Anna",userFromEvent.getFirstName());    listener.clearEventsReceived();    identityService.deleteUser(user.getId());    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiIdmEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiIdmEventType.ENTITY_DELETED,event.getType());    assertTrue(event.getEntity() instanceof User);    userFromEvent=(User)event.getEntity();    assertEquals("fred",userFromEvent.getId());    listener.clearEventsReceived();  }  finally {    if (user != null && user.getId() != null) {      identityService.deleteUser(user.getId());    }  }}  }
class C{  @Override public WebElement findElementByPartialLinkText(String partialLinkText){  return ((FindsByLinkText)super.getWrappedDriver()).findElementByPartialLinkText(partialLinkText);}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  private static long readLong(InputStream in) throws IOException {  int b0=in.read();  int b1=in.read();  int b2=in.read();  int b3=in.read();  if ((b0 | b1 | b2| b3) == -1) {    throw new EOFException();  }  int upper=(b0 << 24) | (b1 << 16) | (b2 << 8)| b3;  b0=in.read();  b1=in.read();  b2=in.read();  b3=in.read();  if ((b0 | b1 | b2| b3) == -1) {    throw new EOFException();  }  int lower=(b0 << 24) | (b1 << 16) | (b2 << 8)| b3;  return ((long)upper << 32) | (lower & 0xFFFFFFFFL);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200837,skillcaster,num0,skillname);}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,boolean isSingleUse){  return this.addPaymentAmount(id,amount,null,null,isSingleUse,false,true);}  }
class C{  public RandomPathFilter(Random random,String[] extensions,int maxPaths){  this.random=random;  this.extensions=extensions;  this.maxPaths=maxPaths;}  }
class C{  public static IOFileFilter ageFileFilter(long cutoff){  return new AgeFileFilter(cutoff);}  }
class C{  public void confirm(){  okButton.click();  verifyIsHidden();}  }
class C{  @Override public int compareTo(IntDoublePair other){  return Double.compare(value,other.value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_USE_ABYSSPOINT(int num0){  return new SM_SYSTEM_MESSAGE(1300965,num0);}  }
class C{  public void afterLast() throws GenericEntityException {  try {    resultSet.afterLast();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to afterLast",e);  }}  }
class C{  @Override public CompletableFuture<Void> doUnsubscribe(Consumer consumer){  CompletableFuture<Void> future=new CompletableFuture<>();  try {    if (dispatcher.canUnsubscribe(consumer)) {      consumer.close();      return delete();    }    future.completeExceptionally(new ServerMetadataException("Unconnected or shared consumer attempting to unsubscribe"));  } catch (  BrokerServiceException e) {    log.warn("Error removing consumer {}",consumer);    future.completeExceptionally(e);  }  return future;}  }
class C{  public void addClassification(String name,int size,long dumpStart,long dumpEnd,long indexStart,long indexEnd){  classificationNames=extend(classificationNames,name);  classificationSizes=extend(classificationSizes,size);  classificationDumpSectionStart=extend(classificationDumpSectionStart,dumpStart);  classificationDumpSectionEnd=extend(classificationDumpSectionEnd,dumpEnd);  classificationIndexSectionStart=extend(classificationIndexSectionStart,indexStart);  classificationIndexSectionEnd=extend(classificationIndexSectionEnd,indexEnd);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback,boolean useBSClsLoader) throws ConfigurationError {  try {    Class providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public FriendList(Player player){  this(player,new ConcurrentLinkedQueue<Friend>());}  }
class C{  public Txn<T> txn(final Txn<T> parent,final TxnFlags... flags){  if (closed) {    throw new AlreadyClosedException();  }  return new Txn<>(this,parent,proxy,flags);}  }
class C{  protected <T>T decodeValue(String str,Class<T> clazz) throws DecodeException {  try {    return mapper.readValue(str,clazz);  } catch (  Exception e) {    throw new DecodeException("Failed to decode:" + e.getMessage());  }}  }
class C{  public Vector2DFormat(final String prefix,final String suffix,final String separator){  super(prefix,suffix,separator,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public static S2Cap fromAxisHeight(S2Point axis,double height){  return new S2Cap(axis,height);}  }
class C{  public static StringBuffer readFromFile(File file){  StringBuffer output=new StringBuffer("");  FileInputStream fr=null;  try {    fr=new FileInputStream(file);    InputStreamReader char_input=new InputStreamReader(fr,Charset.forName("UTF-8").newDecoder());    BufferedReader br=new BufferedReader(char_input);    while (true) {      String in=br.readLine();      if (in == null) {        break;      }      output.append(in).append("\n");    }    br.close();  } catch (  IOException e) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);    return null;  } finally {    if (fr != null) {      try {        fr.close();      } catch (      IOException e) {        Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);      }    }  }  return output;}  }
class C{  private boolean isSuppressWarningsTest(String baseName){  return baseName.equals("suppress_warnings");}  }
class C{  public Builder withModule(@NotNull Module module){  VirtualFile[] roots=ModuleRootManager.getInstance(module).getContentRoots();  assert roots.length > 0;  myModuleRoot=VfsUtilCore.virtualToIoFile(roots[0]);  return this;}  }
class C{  private void removeOrphanedStates(Context context){  AppWidgetManager wm=AppWidgetManager.getInstance(context);  int[] ids=wm.getAppWidgetIds(getComponentName(context));  for (  int id : ids) {    BookmarkThumbnailWidgetService.deleteWidgetState(context,id);  }}  }
class C{  public TournamentPlayer(CKPlayerFactory player,int groupId){  this.player=player;  this.groupId=groupId;  rank=0;}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  static double[] loadExpFracB(){  return EXP_FRAC_B.clone();}  }
class C{  @PostConstruct public void init(){  listenerContainer=cacheRegistrationService.registerBufferedListenerToTags(this);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);}  }
class C{  public boolean isDimensional(){  return !getDataElements().isEmpty() && (columnDimensions.contains(CATEGORYOPTIONCOMBO_DIM_ID) || rowDimensions.contains(CATEGORYOPTIONCOMBO_DIM_ID));}  }
class C{  public void printEntrypoints(){  if (this.entrypoints == null)   System.out.println("Entry points not initialized"); else {    System.out.println("Classes containing entry points:");    for (    String className : entrypoints)     System.out.println("\t" + className);    System.out.println("End of Entrypoints");  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void drawChart(Graphics2D gc){  int x0=2;  int x1=getWidth() - 2;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Updating coordinates...",20,20);    return;  }  if (rTree.size() == 0)   return;  Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);  deviceBBox.x+=deviceBBox.width / 2;  deviceBBox.y+=deviceBBox.height / 2;  Rectangle worldBBox=new Rectangle();  rTree.getBoundingBox(worldBBox);  worldBBox.x+=worldBBox.width / 2;  worldBBox.y+=worldBBox.height / 2;  double xFactor=deviceBBox.width / (double)worldBBox.width;  double yFactor=deviceBBox.height / (double)worldBBox.height;  if (xFactor > 1)   xFactor=1;  if (yFactor > 1)   yFactor=1;  double factor=Math.min(xFactor,yFactor);  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  for (Iterator<Pair<Rectangle2D,Pair<String,Integer>>> it=rTree.iterator(); it.hasNext(); ) {    Pair<Rectangle2D,Pair<String,Integer>> pair=it.next();    Rectangle2D rect=pair.get1();    String label=pair.get2().get1();    Integer fontSize=(int)(factor * pair.get2().get2());    gc.setFont(getFontForSize(fontSize));    if (fontSize >= 1) {      double x=rect.getX();      double y=rect.getY() + rect.getHeight();      x=factor * (x - worldBBox.x) + deviceBBox.x;      y=factor * (y - worldBBox.y) + deviceBBox.y;      if (getChartData().getChartSelection().isSelected(null,label)) {        Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();        gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));        gc.setStroke(NORMAL_STROKE);        fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      Color color=getFontColor(ChartViewer.FontKeys.DrawFont.toString(),null);      if (color == null)       color=getChartColors().getClassColor(class2HigherClassMapper.get(label));      gc.setColor(color);      if (sgc != null)       sgc.setCurrentItem(new String[]{null,label});      gc.drawString(label,(int)Math.round(x),(int)Math.round(y));      if (sgc != null)       sgc.clearCurrentItem();    }  }}  }
class C{  protected void recoverAfterListenerSetupFailure(){  refreshConnectionUntilSuccessful();}  }
class C{  @POST @Path("/login") @Consumes(APPLICATION_FORM_URLENCODED) @Produces(APPLICATION_JSON) @ApiOperation(value="Log a user in") @Timed public Response logUserIn(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader,@FormParam("grant_type") @DefaultValue("client_credentials") @ApiParam(value="please enter client_credentials in this field") final String grantType){  if (!"client_credentials".equals(grantType)) {    throw new AuthenticationException("error, grant_type was not provided");  }  return httpHeader.headers().entity(authentication.logIn(authorizationHeader)).build();}  }
class C{  public EqDataTagException(final int code){  super(code);}  }
class C{  public void localCopy(Local to,Local from){  int baseTo=types.size() * locals.indexOf(to);  int baseFrom=types.size() * locals.indexOf(from);  for (int i=0; i < types.size(); i++) {    if (get(i + baseFrom)) {      set(i + baseTo);    } else {      clear(i + baseTo);    }  }}  }
class C{  private void mapRelativeToAbsolute(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=srcPoints[i * 2 + 0] * mImageBounds.width() + mImageBounds.left;    destPoints[i * 2 + 1]=srcPoints[i * 2 + 1] * mImageBounds.height() + mImageBounds.top;  }}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  @NotNull public static String computeModuleName(@NotNull String appName,@Nullable Project project){  String moduleName=appName.toLowerCase(Locale.US).replaceAll(WizardConstants.INVALID_FILENAME_CHARS,"");  moduleName=moduleName.replaceAll("\\s","");  if (!isUniqueModuleName(moduleName,project)) {    int i=2;    while (!isUniqueModuleName(moduleName + Integer.toString(i),project)) {      i++;    }    moduleName+=Integer.toString(i);  }  return moduleName;}  }
class C{  public Well19937c(int seed){  super(K,seed);}  }
class C{  public PhotosGetByIdQuery(VkApiClient client,String... photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,Photo.class));  photos(photos);}  }
class C{  public void onDestroy(boolean isSaved){  EventBus.getDefault().unregister(this);  for (  RTEditText editor : mEditors.values()) {    editor.unregister();    editor.onDestroy(isSaved);  }  mEditors.clear();  for (  RTToolbar toolbar : mToolbars.values()) {    toolbar.removeToolbarListener();  }  mToolbars.clear();  mRTApi=null;}  }
class C{  public MemBasedCache(int maxCacheSizeInBytes){  mMaxCacheSizeInBytes=maxCacheSizeInBytes;  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);}  }
class C{  @Override public final void endDTD(Augmentations augs) throws XNIException {  super.endDTD(augs);  fOpStack=null;  fGroupIndexStack=null;  fGroupIndexStackSizes=null;}  }
class C{  public SimpleTextDocument(){  Graph=new DocumentWordGraph();  Histogram=new DocumentWordHistogram();}  }
class C{  @Override public boolean addAll(Collection<? extends Pair<K,V>> c){  return backedSet.addAll(c);}  }
class C{  public static String checkCart(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  if (cart == null || cart.size() <= 0) {    return "cartEmpty";  }  return "success";}  }
class C{  public JsonObject(){  names=new ArrayList<String>();  values=new ArrayList<JsonValue>();  table=new HashIndexTable();}  }
class C{  public BinarySearchTree(){  this.root=null;  this.size=0;  this.selfBalancing=false;}  }
class C{  public static void enable(String event){  instance.disabled.remove(event);  log(event + " enabled");}  }
class C{  private static int changeIndexSign(final int index){  return -index - 1;}  }
class C{  public FieldConfigColourMap(FieldConfigCommonData commonData){  super(commonData);  model=new ColourMapModel(this);}  }
class C{  public static void addTriggerToLayoutActiveTriggers(GoosciSensorLayout.SensorLayout layout,String triggerId){  int oldSize=layout.activeSensorTriggerIds.length;  for (int i=0; i < oldSize; i++) {    if (TextUtils.equals(layout.activeSensorTriggerIds[i],triggerId)) {      return;    }  }  String[] newTriggerIds=new String[oldSize + 1];  System.arraycopy(layout.activeSensorTriggerIds,0,newTriggerIds,0,layout.activeSensorTriggerIds.length);  newTriggerIds[oldSize]=triggerId;  layout.activeSensorTriggerIds=newTriggerIds;}  }
class C{  private void updateVendorOptionPanels(){  if (vendorOptionRasterFactory != null) {    List<VendorOptionInterface> veList=vendorOptionRasterFactory.getVendorOptionList();    if (veList != null) {      for (      VendorOptionInterface vendorOption : veList) {        boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionList,vendorOption.getVendorOption());        BasePanel extensionPanel=vendorOption.getPanel();        if (extensionPanel != null) {          removePanel(vendorOption.getPanel());          if (displayVendorOption) {            appendPanel(vendorOption.getPanel());          }        }      }    }  }}  }
class C{  public MarketDeleteQuery delete(UserActor actor,int ownerId,int itemId){  return new MarketDeleteQuery(getClient(),actor,ownerId,itemId);}  }
class C{  public void reset(){  if (mBitmap != null)   mBitmap.recycle();}  }
class C{  @SuppressWarnings("unchecked") public final void storeData(final List data) throws IDBPersistenceException {  SqlSession session=null;  int size=data.size();  int commited=0;  T dtShortTermLog;  try {    session=sqlSessionFactory.openSession(ExecutorType.BATCH,false);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Obtained batch transacted SQL session (session: " + session.toString() + ")");    }    LoggerMapper<T> persistenceMapper=session.getMapper(mapperInterface);    for (int i=0; i != size; i++) {      if ((0 == i % RECORDS_PER_BATCH) && i > 0) {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("storeData([Collection]) : Commiting rows for i=" + i);        }        session.commit();        commited=i;      }      if (data.get(i) != null) {        dtShortTermLog=(T)data.get(i);        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("Logging object with ID: " + dtShortTermLog.getId());        }        persistenceMapper.insertLog(dtShortTermLog);      }    }    session.commit();    commited=size;  } catch (  PersistenceException e) {    LOGGER.error("storeData([Collection]) : Error executing/closing prepared statement for " + data.size() + " dataTags",e);    try {      if (session != null) {        session.rollback();      }    } catch (    Exception sql) {      LOGGER.error("storeData([Collection]) : Error rolling back transaction.",sql);    }    throw new IDBPersistenceException(e.getMessage(),commited);  } finally {    try {      if (session != null) {        session.close();      }    } catch (    Exception e) {      LOGGER.error("storeData([Collection]) : Error closing session.",e);    }  }}  }
class C{  private List<IntervalFeature> squashFeatures(List<IntervalFeature> intervalList){  List<IntervalFeature> stack=new ArrayList<IntervalFeature>();  List<IntervalFeature> squashed=new ArrayList<IntervalFeature>();  for (  IntervalFeature interval : intervalList) {    if (stack.size() == 0 || stack.get(0).equalStranded(interval)) {      stack.add(interval);    } else {      squashed.add(stack.get(0));      stack.clear();      stack.add(interval);    }  }  if (stack.size() > 0) {    squashed.add(stack.get(0));  }  return squashed;}  }
class C{  public PhotosCreateAlbumQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  @RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<ProjectDTO>> findAll(@RequestBody PageRequestByExample<ProjectDTO> prbe) throws URISyntaxException {  PageResponse<ProjectDTO> pageResponse=projectDTOService.findAll(prbe);  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);}  }
class C{  protected boolean doMatch(String pattern,String path,boolean fullMatch){  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {    return false;  }  String[] pattDirs=tokenizeToStringArray(pattern,this.pathSeparator);  String[] pathDirs=tokenizeToStringArray(path,this.pathSeparator);  int pattIdxStart=0;  int pattIdxEnd=pattDirs.length - 1;  int pathIdxStart=0;  int pathIdxEnd=pathDirs.length - 1;  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxStart];    if ("**".equals(patDir)) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxStart])) {      return false;    }    pattIdxStart++;    pathIdxStart++;  }  if (pathIdxStart > pathIdxEnd) {    if (pattIdxStart > pattIdxEnd) {      return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));    }    if (!fullMatch) {      return true;    }    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {      return true;    }    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  } else   if (pattIdxStart > pattIdxEnd) {    return false;  } else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {    return true;  }  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxEnd];    if (patDir.equals("**")) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxEnd])) {      return false;    }    pattIdxEnd--;    pathIdxEnd--;  }  if (pathIdxStart > pathIdxEnd) {    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  }  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {    int patIdxTmp=-1;    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {      if (pattDirs[i].equals("**")) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == pattIdxStart + 1) {      pattIdxStart++;      continue;    }    int patLength=(patIdxTmp - pattIdxStart - 1);    int strLength=(pathIdxEnd - pathIdxStart + 1);    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=(String)pattDirs[pattIdxStart + j + 1];        String subStr=(String)pathDirs[pathIdxStart + i + j];        if (!matchStrings(subPat,subStr)) {          continue strLoop;        }      }      foundIdx=pathIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    pattIdxStart=patIdxTmp;    pathIdxStart=foundIdx + patLength;  }  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {    if (!pattDirs[i].equals("**")) {      return false;    }  }  return true;}  }
class C{  public TransactionManager manager(){  readyState.check();  return txnMgrProxy;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  int width=widthSize;  int maxLength=getMaxTextLength();  if (maxLength > 0) {    float textWidth=Layout.getDesiredWidth("0",itemsPaint);    itemsWidth=(int)(maxLength * textWidth);  } else {    itemsWidth=0;  }  itemsWidth+=ADDITIONAL_ITEMS_SPACE;  labelWidth=0;  if (label != null && label.length() > 0) {    labelWidth=(int)Layout.getDesiredWidth(label,valuePaint);  }  boolean recalculate=false;  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;    recalculate=true;  } else {    width=itemsWidth + labelWidth + 2 * PADDING;    if (labelWidth > 0) {      width+=LABEL_OFFSET;    }    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;      recalculate=true;    }  }  if (recalculate) {    int pureWidth=width - LABEL_OFFSET - 2 * PADDING;    if (pureWidth <= 0) {      itemsWidth=labelWidth=0;    }    if (labelWidth > 0) {      double newWidthItems=(double)itemsWidth * pureWidth / (itemsWidth + labelWidth);      itemsWidth=(int)newWidthItems;      labelWidth=pureWidth - itemsWidth;    } else {      itemsWidth=pureWidth + LABEL_OFFSET;    }  }  if (itemsWidth > 0) {    createLayouts(itemsWidth,labelWidth);  }  return width;}  }
class C{  @Override protected void write0(WriteRequest writeRequest){}  }
class C{  public synchronized static void ensureSecurityManager(@SuppressWarnings("UnusedParameters") String[] args){  SecurityPolicyLoader.load(SystemBoot.class,"policy.all");  System.setSecurityManager(new RMISecurityManager());}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public boolean isTotal(){  return operandType != null && operandType.equals(TYPE_TOTAL);}  }
class C{  private void loadText(InputStream is){  BufferedReader reader;  String line;  if (is == null) {    throw new Error("Can't load diphone db file.");  }  reader=new BufferedReader(new InputStreamReader(is));  try {    line=reader.readLine();    lineCount++;    while (line != null) {      if (!line.startsWith("***")) {        parseAndAdd(line,reader);      }      line=reader.readLine();    }    reader.close();  } catch (  IOException e) {    throw new Error(e.getMessage() + " at line " + lineCount);  } finally {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_DONE(String value0){  return new SM_SYSTEM_MESSAGE(1400797,value0);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public WallGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public GroupsEditQuery photos(GroupsEditPhotos value){  return unsafeParam("photos",value);}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  public Match(Segment edge,Segment with,ConstraintType type,int delta){  this.edge=edge;  this.with=with;  this.type=type;  this.delta=delta;}  }
class C{  public static int robustCCW(S2Point a,S2Point b,S2Point c,S2Point aCrossB){  final double kMinAbsValue=1.6e-15;  double det=aCrossB.dotProd(c);  if (det > kMinAbsValue) {    return 1;  }  if (det < -kMinAbsValue) {    return -1;  }  return expensiveCCW(a,b,c);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOUND_ERROR_NOT_AVAILABLE(int i){  return new SM_SYSTEM_MESSAGE(1400373,new DescriptionId(i));}  }
class C{  private String readAlternateLink(XmlPullParser parser) throws IOException, XmlPullParserException {  String link=null;  parser.require(XmlPullParser.START_TAG,ns,"link");  String tag=parser.getName();  String relType=parser.getAttributeValue(null,"rel");  if (relType.equals("alternate")) {    link=parser.getAttributeValue(null,"href");  }  while (true) {    if (parser.nextTag() == XmlPullParser.END_TAG) {      break;    }  }  return link;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public StatelessChunkScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(entityName,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  public static void resetAnchor(@NotNull AttributesTransaction attributes,@NotNull ConstraintAnchor.Type anchorType){switch (anchorType) {case LEFT:{      attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_START,null);      attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_LEFT,null);      attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_LEFT_OF,null);      attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_RIGHT_OF,null);      attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_LEFT_CREATOR,null);      attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_HORIZONTAL_BIAS,null);      break;    }case TOP:{    attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_TOP,null);    attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_TOP_OF,null);    attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_BOTTOM_OF,null);    attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_TOP_CREATOR,null);    attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_VERTICAL_BIAS,null);    break;  }case RIGHT:{  attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_END,null);  attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_RIGHT,null);  attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_LEFT_OF,null);  attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_RIGHT_OF,null);  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_RIGHT_CREATOR,null);  attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_HORIZONTAL_BIAS,null);  break;}case BOTTOM:{attributes.setAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_LAYOUT_MARGIN_BOTTOM,null);attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_TOP_OF,null);attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_BOTTOM_OF,null);attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_CREATOR,null);attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_VERTICAL_BIAS,null);break;}case BASELINE:{attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BASELINE_TO_BASELINE_OF,null);attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_BASELINE_CREATOR,null);attributes.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_VERTICAL_BIAS,null);}break;}}  }
class C{  public void startPlaying(String file){  if (this.readyPlayer(file) && this.player != null) {    this.player.start();    this.setState(STATE.MEDIA_RUNNING);    this.seekOnPrepared=0;  } else {    this.prepareOnly=false;  }}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  @Override public boolean addAll(int location,@NonNull Collection<? extends MODEL> collection){  if (collection.size() == 0) {    return false;  }  int insertPosition=calcInsertPosition(location);  boolean result;  if (insertPosition == getItemCount()) {    result=mItems.addAll(collection);  } else {    result=mItems.addAll(insertPosition,collection);  }  notifyIfNeed();  return result;}  }
class C{  @Override public boolean equals(Object o){  GameTime other=(GameTime)o;  return this.getTime() == other.getTime();}  }
class C{  @Override public int read(byte[] b) throws IOException {  return this.read(b,0,b.length);}  }
class C{  public void onTaskFail(Throwable e){  if (this.retries_ > 0) {    --this.retries_;    if (this.interval_ > 0) {      if ((this.executor_ instanceof ScheduledExecutorService)) {        ScheduledExecutorService service=(ScheduledExecutorService)this.executor_;        service.schedule(this,this.interval_,TimeUnit.MILLISECONDS);      }    } else {      this.executor_.execute(this);    }  } else {    fail(e);  }}  }
class C{  protected Augmentations modifyAugmentations(Augmentations augs){  return modifyAugmentations(augs,false);}  }
class C{  private void onTimeChanged(){  sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);  if (mOnTimeChangedListener != null) {    mOnTimeChangedListener.onTimeChanged(this,getCurrentHour(),getCurrentMinute());  }}  }
class C{  public static float log(float value,float base){  return (float)(Math.log(value) / Math.log(base));}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(this.getModifiers());}  }
class C{  public final boolean isOverridingNightMode(){  return (myOverride & CFG_NIGHT_MODE) != 0;}  }
class C{  public FriendsEditListQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public ScrollImplementor(ScrollModel model,ScrollView view){  this.model=model;  this.view=view;}  }
class C{  public void onPlayerLogin(Player player){  if (player.getMailbox() == null) {    return;  }  List<Letter> letters=player.getMailbox().getNewSystemLetters("$$HS_AUCTION_MAIL");  boolean needsRefresh=false;  for (  Letter letter : letters) {    String[] titleParts=letter.getTitle().split(",");    String[] bodyParts=letter.getMessage().split(",");    AuctionResult result=AuctionResult.getResultFromId(Integer.parseInt(titleParts[0]));    if (result == AuctionResult.FAILED_BID) {      needsRefresh=true;      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_BID_CANCEL);    } else     if (result == AuctionResult.WIN_BID || result == AuctionResult.GRACE_START) {      needsRefresh=true;      int address=Integer.parseInt(bodyParts[1]);      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_BID_WIN(address));    } else     if (result == AuctionResult.FAILED_SALE) {      needsRefresh=true;      int address=Integer.parseInt(bodyParts[1]);      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_AUCTION_FAIL(address));    } else     if (result == AuctionResult.SUCCESS_SALE || result == AuctionResult.GRACE_SUCCESS) {      needsRefresh=true;      int address=Integer.parseInt(bodyParts[1]);      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_AUCTION_SUCCESS(address));    }  }  if (needsRefresh) {    PacketSendUtility.sendPacket(player,new SM_RECEIVE_BIDS(0));  }  letters=player.getMailbox().getNewSystemLetters("$$HS_OVERDUE_");  for (  Letter letter : letters) {    if (letter.getSenderName().endsWith("FINAL") || letter.getSenderName().endsWith("3RD")) {      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_SEQUESTRATE);    } else {      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_HOUSING_OVERDUE);    }  }}  }
class C{  public static void logSerpLoadedOnClose(boolean fullyLoaded){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchSerpLoadedOnClose",fullyLoaded ? FULLY_LOADED : PARTIALLY_LOADED,LOADED_BOUNDARY);}  }
class C{  @Override public final void write(final byte[] b){  for (int x=0; x < b.length; x++) {    bos.writeByte(b[x]);  }}  }
class C{  public static AlarmValueImpl createAlarmValue(final Alarm alarm){  AlarmValueImpl alarmValueImpl=null;  if (alarm != null) {    alarmValueImpl=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),alarm.getTimestamp(),alarm.isActive());  }  return alarmValueImpl;}  }
class C{  public Iterator<Record> execute() throws QueryPlanException, DatabaseException {  Map<String,String> hashGroupTempTables=new HashMap<String,String>();  Iterator<Record> inputRecords=this.getSource().execute();  while (inputRecords.hasNext()) {    Record record=inputRecords.next();    DataType groupByColumn=record.getValues().get(this.groupByColumnIndex);    String tableName;    if (!hashGroupTempTables.containsKey(groupByColumn.toString())) {      tableName="Temp" + this.groupByColumn + "GroupBy"+ hashGroupTempTables.size();      this.transaction.createTempTable(this.getSource().getOutputSchema(),tableName);      hashGroupTempTables.put(groupByColumn.toString(),tableName);    } else {      tableName=hashGroupTempTables.get(groupByColumn.toString());    }    this.transaction.addRecord(tableName,record.getValues());  }  MarkerRecord markerRecord=MarkerRecord.getMarker();  List<Record> recordList=new ArrayList<Record>();  int count=0;  for (  String key : hashGroupTempTables.keySet()) {    String tableName=hashGroupTempTables.get(key);    Iterator<Record> recordIterator=this.transaction.getRecordIterator(tableName);    while (recordIterator.hasNext()) {      recordList.add(recordIterator.next());    }    if (++count < hashGroupTempTables.size()) {      recordList.add(markerRecord);    }  }  return recordList.iterator();}  }
class C{  private static void read(GigaSpace space,Phrase template){  Phrase[] results=space.readMultiple(template);  System.out.println("read - " + Arrays.toString(results));}  }
class C{  protected String generateDropTableSQL(TableModel tableModel){  return generateDropTableSQL(tableModel.getTableName());}  }
class C{  private static void cloneWorkEffortPartyAssignments(DispatchContext dctx,GenericValue userLogin,String routingTaskId,String productionRunTaskId){  List<GenericValue> workEffortPartyAssignments=null;  try {    workEffortPartyAssignments=EntityUtil.filterByDate(dctx.getDelegator().findByAnd("WorkEffortPartyAssignment",UtilMisc.toMap("workEffortId",routingTaskId),null,false));  } catch (  GenericEntityException e) {    Debug.logError(e.getMessage(),module);  }  if (workEffortPartyAssignments != null) {    for (    GenericValue workEffortPartyAssignment : workEffortPartyAssignments) {      Map<String,Object> partyToWorkEffort=UtilMisc.<String,Object>toMap("workEffortId",productionRunTaskId,"partyId",workEffortPartyAssignment.getString("partyId"),"roleTypeId",workEffortPartyAssignment.getString("roleTypeId"),"fromDate",workEffortPartyAssignment.getTimestamp("fromDate"),"statusId",workEffortPartyAssignment.getString("statusId"),"userLogin",userLogin);      try {        dctx.getDispatcher().runSync("assignPartyToWorkEffort",partyToWorkEffort);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the assignPartyToWorkEffort service",module);      }      if (Debug.infoOn())       Debug.logInfo("ProductionRunPartyassigment for party: " + workEffortPartyAssignment.get("partyId") + " created",module);    }  }}  }
class C{  @Override public int read(){  return -1;}  }
class C{  @Override public List<String> searchRoleByUserId(String userId){  return sessionTemplate.selectList(NAMESPACE + ".searchRoleByUserId",userId);}  }
class C{  public PhotosReorderAlbumsQuery reorderAlbums(UserActor actor,int albumId){  return new PhotosReorderAlbumsQuery(getClient(),actor,albumId);}  }
class C{  public static final boolean isXMLName(String s,boolean xml11Version){  if (s == null) {    return false;  }  if (!xml11Version)   return XMLChar.isValidName(s); else   return XML11Char.isXML11ValidName(s);}  }
class C{  public static String decode2S(String data){  byte[] bb=decode(data);  try {    return new String(bb,"UTF-8");  } catch (  Exception e) {  }  return new String(bb);}  }
class C{  public Builder timeout(Number timeout){  this.timeout=timeout;  return this;}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\ttreat missing values as a seperate " + "value.","M",0,"-M"));  newVector.addElement(new Option("\tjust binarize numeric attributes instead \n" + "\tof properly discretizing them.","B",0,"-B"));  return newVector.elements();}  }
class C{  public void destroy(){  if (mTabModelSelector != null) {    mTabModelSelector.removeObserver(mSelectorObserver);    mTabModelSelector=null;  }}  }
class C{  void removeAnnotations(Annotation[] annotations){  for (  Annotation annotation : annotations) {    this.annotationToAnnotationViewMap.remove(annotation);  }  this.update();}  }
class C{  public void union(Rectangle2D r){  if (status == INVALID)   return;  double minx=r.getMinX();  double miny=r.getMinY();  double maxx=r.getMaxX();  double maxy=r.getMaxY();  if (Double.isNaN(minx) || Double.isNaN(miny) || Double.isNaN(maxx)|| Double.isNaN(maxy)) {    Logger.getLogger(getClass().getName()).warning("Union with invalid clip region: " + r);    return;  }  if (status == EMPTY) {    setClip(r);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],minx);  clip[1]=Math.min(clip[1],miny);  clip[6]=Math.max(clip[6],maxx);  clip[7]=Math.max(clip[7],maxy);}  }
class C{  public boolean isAscending(int i){  return m_ascend[i];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200330,skillname);}  }
class C{  public void stopMoving(){  Creature owner=getOwner();  World.getInstance().updatePosition(owner,owner.getX(),owner.getY(),owner.getZ(),owner.getHeading());  PacketSendUtility.broadcastPacket(owner,new SM_MOVE(owner));}  }
class C{  public NameFileFilter(String[] names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The array of names must not be null");  }  this.names=new String[names.length];  System.arraycopy(names,0,this.names,0,names.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_ME_TO_SELF(String value0d,String skillname){  return new SM_SYSTEM_MESSAGE(1200341,value0d,skillname);}  }
class C{  public static String derivePath(String fileName){  Properties props=deriveDirectories();  String baseDir=(String)props.get(GS_HOME);  Logger logger=Logger.getLogger(COMPONENT);  if (logger.isLoggable(Level.FINE))   logger.log(Level.FINE,"Derive path for file: " + fileName + " | locations: "+ props.toString());  return (derivePath(baseDir,fileName));}  }
class C{  private int maxChildrenShift(){  return 2 * levelMod;}  }
class C{  public In(){  scanner=new Scanner(new BufferedInputStream(System.in),CHARSET_NAME);  scanner.useLocale(LOCALE);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("hide what=unSelected;");}  }
class C{  public OpenMapRealVector(double[] values){  this(values,DEFAULT_ZERO_TOLERANCE);}  }
class C{  protected void drawYAxisLog(Graphics2D gc,Dimension size){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  boolean doDraw=(size == null);  Rectangle bbox=null;  double maxValue=getMaxValue();  double yFactor=(y0 - y1) / computeMaxYAxisValueLogScale(maxValue);  double value=0;  double previousY=-100000;  int mantisse=0;  int exponent=0;  while (value <= maxValue) {    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;    double yPos=y0 - (value > 0 ? Math.log10(value) : 0) * yFactor;    if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {      String label=String.format("%,d",(long)value);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      previousY=yPos;      int x=leftMargin - (int)(labelSize.getWidth() + 3);      int y=(int)(yPos + labelSize.getHeight() / 2.0);      if (doDraw) {        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));        gc.drawString(label,x,y);        if (value == 0 || isShowVerticalGridLines()) {          gc.setColor(Color.LIGHT_GRAY);          gc.drawLine(x0,(int)Math.round(yPos),x1,(int)Math.round(yPos));        }      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }    }    if (mantisse < 9)     mantisse++; else {      mantisse=1;      exponent++;    }    value=mantisse * Math.pow(10,exponent);  }  String axisLabel=getChartData().getCountsLabel();  Dimension labelSize=Basic.getStringSize(gc,axisLabel,gc.getFont()).getSize();  int x=10;  int y=(y0 + y1) / 2 - labelSize.width;  if (doDraw) {    gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    drawString(gc,axisLabel,x,y,Math.PI / 2);  } else {    Rectangle rect=new Rectangle(x,y,labelSize.height,labelSize.width);    if (bbox == null)     bbox=rect; else     bbox.add(rect);  }  if (doDraw) {    gc.setColor(Color.BLACK);    gc.drawLine(x0,y0,x0,y1);    drawArrowHead(gc,new Point(x0,y0),new Point(x0,y1));  }  if (size != null)   size.setSize(bbox.width + 5,bbox.height);}  }
class C{  public static Schema fromStructType(StructType structType){  Schema.Builder builder=new Schema.Builder();  StructField[] fields=structType.fields();  String[] fieldNames=structType.fieldNames();  for (int i=0; i < fields.length; i++) {    String name=fields[i].dataType().typeName().toLowerCase();switch (name) {case "double":      builder.addColumnDouble(fieldNames[i]);    break;case "float":  builder.addColumnFloat(fieldNames[i]);break;case "long":builder.addColumnLong(fieldNames[i]);break;case "int":case "integer":builder.addColumnInteger(fieldNames[i]);break;case "string":builder.addColumnString(fieldNames[i]);break;default :throw new RuntimeException("Unknown type: " + name);}}return builder.build();}  }
class C{  public boolean execute(String verb,String parameter){  if (verb != null && verb.equalsIgnoreCase(getCommandString())) {    if (parameter != null && parameter.equalsIgnoreCase(DOWN_COMMAND_STRING)) {      press();    } else     if (parameter != null && parameter.equalsIgnoreCase(UP_COMMAND_STRING)) {      release();    } else {      return false;    }    return true;  }  return false;}  }
class C{  public RowManager(Table table){  m_table=table;}  }
class C{  public static void updateFrame(){  componentMap=new HashMap<String,Component>();  int totalTabs=tabbedpanel_results.getTabCount();  for (int i=0; i < totalTabs; i++) {    JPanel c=(JPanel)tabbedpanel_results.getComponentAt(i);    Component[] components=c.getComponents();    for (int n=0; n < components.length; ++n) {      if (components[n].getClass() == JLabel.class & components[n].getName() != null) {        componentMap.put(components[n].getName(),components[n]);      }    }  }  JLabel aa=(JLabel)componentMap.get("numberofhostslabelvalue");  JLabel ab=(JLabel)componentMap.get("coresperhostlabelvalue");  JLabel ac=(JLabel)componentMap.get("hostcoremhzlabelvalue");  JLabel ad=(JLabel)componentMap.get("hostvmcountlabelvalue");  JLabel ag=(JLabel)componentMap.get("hostmemorytotallabelvalue");  JLabel ah=(JLabel)componentMap.get("hostmemorytotalovercommitlabelvalue");  JLabel ai=(JLabel)componentMap.get("hostlocalusablecapacitylabelvalue");  JLabel aj=(JLabel)componentMap.get("vcclusterslabelvalue");  aa.setText(String.valueOf(Host.getCount()));  ab.setText(String.valueOf(Host.getCorescount()));  ac.setText(String.valueOf(Host.getCoremhz()));  ad.setText(String.valueOf(Host.getVmcount()));  ag.setText(String.valueOf(Host.getMemoryNoTPS()));  ah.setText(String.valueOf(Host.getMemoryTPS()));  ai.setText(String.valueOf(Host.getLocalswapsize()));  aj.setText(String.valueOf(Cluster.getCount()));  if (desktopbrokertypecombo.getSelectedItem().toString().equalsIgnoreCase("view")) {    JLabel ca=(JLabel)componentMap.get("storageparentusablecapacitylabelvalue");    JLabel cb=(JLabel)componentMap.get("storagereplicausablecapacitylabelvalue");    JLabel cc=(JLabel)componentMap.get("storagepersistentusablecapacitylabelvalue");    JLabel cd=(JLabel)componentMap.get("storagecloneusablecapacitylabelvalue");    JLabel ce=(JLabel)componentMap.get("storageusablecapacitylabelvalue");    JLabel cf=(JLabel)componentMap.get("storagefrontendIOPSlabelvalue");    JLabel cg=(JLabel)componentMap.get("storagebackendIOPSlabelvalue");    JLabel ch=(JLabel)componentMap.get("storagereplicafrontendIOPSlabelvalue");    JLabel ci=(JLabel)componentMap.get("storagereplicafrontendIOPSlabelvalue");    JLabel cj=(JLabel)componentMap.get("storagereplicabackendIOPSlabelvalue");    JLabel ck=(JLabel)componentMap.get("storageclonefrontendIOPSlabelvalue");    JLabel cl=(JLabel)componentMap.get("storageclonebackendIOPSlabelvalue");    JLabel cm=(JLabel)componentMap.get("storagepersistentfrontendIOPSlabelvalue");    JLabel cn=(JLabel)componentMap.get("storagepersistentbackendIOPSlabelvalue");    JLabel co=(JLabel)componentMap.get("storagepersistentdatastorecountlabelvalue");    JLabel cp=(JLabel)componentMap.get("storagepersistentdatastoresizelabelvalue");    JLabel cq=(JLabel)componentMap.get("storagedatastorecountlabelvalue");    JLabel cr=(JLabel)componentMap.get("storagedatastoresizelabelvalue");    ca.setText(String.valueOf(storageobj.getParentusablecapacity()));    cb.setText(String.valueOf(storageobj.getReplicausablecapacity()));    cc.setText(storageobj.getPersistentusablecapacity().toString());    cd.setText(storageobj.cloneusablecapacity.toString());    ce.setText(String.valueOf(storageobj.getUsablecapacity()));    cf.setText(String.valueOf(storageobj.getFrontendIOPS()));    cg.setText(String.valueOf(storageobj.getBackendIOPS()));    ch.setText(storageobj.replicareadfrontendIOPS.toString());    ci.setText(storageobj.replicareadfrontendIOPS.toString());    cj.setText(storageobj.getReplicaBackEndIOPS().toString());    ck.setText(storageobj.getCloneFrontendIOPS().toString());    cl.setText(storageobj.getCloneBackendIOPS().toString());    cm.setText(storageobj.getPersistentFrondendIOPS().toString());    cn.setText(storageobj.getPersistentBackendIOPS().toString());    co.setText(String.valueOf(storageobj.persistentdatastorecount));    cp.setText(String.valueOf(storageobj.persistentdatastoresize));    cq.setText(String.valueOf(storageobj.datastorecount));    cr.setText(String.valueOf(storageobj.datastoresize));  } else   if (desktopbrokertypecombo.getSelectedItem().toString().equalsIgnoreCase("xen")) {    JLabel ea=(JLabel)componentMap.get("storageparentusablecapacitylabelvalue_xen");    JLabel eb=(JLabel)componentMap.get("storagereplicausablecapacitylabelvalue_xen");    JLabel ec=(JLabel)componentMap.get("storagecloneusablecapacitylabelvalue_xen");    JLabel ed=(JLabel)componentMap.get("storageclonefrontendIOPSlabelvalue_xen");    JLabel ee=(JLabel)componentMap.get("storageclonebackendIOPSlabelvalue_xen");    JLabel ef=(JLabel)componentMap.get("storagedatastorecountlabelvalue_xen");    JLabel eg=(JLabel)componentMap.get("storagedatastoresizelabelvalue_xen");    JLabel eh=(JLabel)componentMap.get("storageusablecapacitylabelvalue_xen");    JLabel ei=(JLabel)componentMap.get("storagefrontendIOPSlabelvalue_xen");    JLabel ej=(JLabel)componentMap.get("storagebackendIOPSlabelvalue_xen");    JLabel ek=(JLabel)componentMap.get("storagepersistentusablecapacitylabelvalue_xen");    JLabel el=(JLabel)componentMap.get("storagepersistentfrontendIOPSlabelvalue_xen");    JLabel em=(JLabel)componentMap.get("storagepersistentbackendIOPSlabelvalue_xen");    JLabel en=(JLabel)componentMap.get("storagepersistentdatastorecountlabelvalue_xen");    JLabel eo=(JLabel)componentMap.get("storagepersistentdatastoresizelabelvalue_xen");    ea.setText(String.valueOf(storageobj.getParentusablecapacity()));    eb.setText(String.valueOf(storageobj.getReplicausablecapacity()));    ec.setText(storageobj.cloneusablecapacity.toString());    ed.setText(String.valueOf(storageobj.getCloneFrontendIOPS()));    ee.setText(storageobj.getCloneBackendIOPS().toString());    ef.setText(String.valueOf(storageobj.datastorecount));    eg.setText(String.valueOf(storageobj.datastoresize));    eh.setText(String.valueOf(storageobj.getUsablecapacity()));    ei.setText(String.valueOf(storageobj.getFrontendIOPS()));    ej.setText(String.valueOf(storageobj.getBackendIOPS()));    ek.setText(storageobj.getPersistentusablecapacity().toString());    el.setText(storageobj.getPersistentFrondendIOPS().toString());    em.setText(storageobj.getPersistentBackendIOPS().toString());    en.setText(String.valueOf(storageobj.persistentdatastorecount));    eo.setText(String.valueOf(storageobj.persistentdatastoresize));  }  JLabel da=(JLabel)componentMap.get("storagedisposableusablecapacitylabelvalue");  JLabel db=(JLabel)componentMap.get("storageswapusablecapacitylabelvalue");  JLabel dc=(JLabel)componentMap.get("storageswappowerstatecapacityreductionlabelvalue");  JLabel dd=(JLabel)componentMap.get("storagesuspendusablecapacitylabelvalue");  da.setText(String.valueOf(storageobj.disposableusablecapacity));  db.setText(String.valueOf(storageobj.getLocalswapsizetotal()));  dc.setText(String.valueOf(storageobj.getSwappowerstatecapacityreduction()));  dd.setText(String.valueOf(storageobj.getSuspendusablecapacity()));  if (desktopbrokertypecombo.getSelectedItem().toString().equalsIgnoreCase("view")) {    JLabel fa=(JLabel)componentMap.get("vccountlabelvalue");    JLabel fb=(JLabel)componentMap.get("viewconnectionservercountlabelvalue");    JLabel fc=(JLabel)componentMap.get("viewsecurityservercountlabelvalue");    fa.setText(String.valueOf(View.getVccount()));    fb.setText(String.valueOf(View.getCscount()));    fc.setText(String.valueOf(View.getSscount()));  } else   if (desktopbrokertypecombo.getSelectedItem().toString().equalsIgnoreCase("xen")) {    JLabel ga=(JLabel)componentMap.get("xenvccountlabelvalue");    JLabel gb=(JLabel)componentMap.get("xendeliverycontrollerlabelvalue");    ga.setText(String.valueOf(View.getVccount()));    gb.setText(String.valueOf(Xen.getDdccount()));  }  if (Integer.parseInt(ac.getText()) >= Integer.parseInt(DEFAULTS.getString("hostvcpumhztotal.maximum"))) {    JOptionPane.showMessageDialog(null,MESSAGES.getString("warningcpuutilizationintel.validation"),"Warning",JOptionPane.WARNING_MESSAGE);  }}  }
class C{  @Override public boolean saveVersion(VersionType versionType){  MetadataVersion currentVersion=getCurrentVersion();  String versionName=MetadataVersionNameGenerator.getNextVersionName(currentVersion);  Date minDate;  if (currentVersion == null) {    minDate=null;  } else {    minDate=currentVersion.getCreated();  }  ByteArrayOutputStream os=getMetadataExport(minDate);  String value=getBodyAsString(StandardCharsets.UTF_8,os);  createMetadataVersionInDataStore(versionName,value);  MetadataVersion version=new MetadataVersion();  version.setName(versionName);  version.setCreated(new Date());  version.setType(versionType);  try {    String hashCode=HashCodeGenerator.getHashCode(value);    version.setHashCode(hashCode);  } catch (  NoSuchAlgorithmException e) {    String message="Exception occurred while generating MetadataVersion HashCode " + e.getMessage();    log.error(message,e);    throw new MetadataVersionServiceException(message,e);  }  try {    addVersion(version);    metadataSystemSettingService.setSystemMetadataVersion(version.getName());  } catch (  Exception ex) {    String message="Exception occurred while saving a new MetadataVersion " + ex.getMessage();    log.error(message,ex);    throw new MetadataVersionServiceException(message,ex);  }  return true;}  }
class C{  public void nextRow() throws SQLException {  currentRow.next();}  }
class C{  public ClassFile(){}  }
class C{  public Builder add(String property){  properties.add(property);  return this;}  }
class C{  private int reduceRemovableOffset(int newOffset){  int currentRawOffset=getRawTopAndBottomOffset();  if (currentRawOffset == 0) {    return newOffset;  }  int currentAllOffset=getTopAndBottomOffset();  if (!offsetValidation(currentAllOffset,currentRawOffset)) {    return newOffset;  }  boolean sameSign=MathUtils.sameSign(newOffset,currentAllOffset);  int reduce=Math.abs(currentAllOffset) - Math.abs(newOffset);  if (sameSign && reduce >= 0) {    int offset=Math.max(0,currentRawOffset - reduce);    setRawTopAndBottomOffset(offset);    return newOffset - offset;  }  if (!sameSign) {    setRawTopAndBottomOffset(0);    return newOffset;  }  return newOffset - currentRawOffset;}  }
class C{  public JobRequestFailedException(Throwable cause){  super(cause);}  }
class C{  public AuthRestoreQuery restore(UserActor actor,String phone){  return new AuthRestoreQuery(getClient(),actor,phone);}  }
class C{  public void put(TransactionLocal key,Object value){  Entry[] tab=table;  int len=tab.length;  int i=key.hashCode & (len - 1);  for (Entry e=tab[i]; e != null; e=tab[i=nextIndex(i,len)]) {    if (e.key == key) {      e.value=value;      return;    }  }  tab[i]=new Entry(key,value);  int sz=++size;  if (sz >= threshold)   rehash();}  }
class C{  public XPathException(){  super();  fKey="c-general-xpath";}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  private Integer[] splitPointsByDelimiterList(String sStr,char[] lDelimiters){  TreeMap tmDels=new TreeMap();  for (int iCnt=0; iCnt < lDelimiters.length; iCnt++)   tmDels.put(iCnt,new String() + lDelimiters[iCnt]);  return splitPointsByDelimiterList(sStr,tmDels);}  }
class C{  public static EntryRep[] toEntryRep(Entry[] entries,boolean needCodebase) throws RemoteException {  EntryRep[] reps=null;  if (entries != null) {    reps=new EntryRep[entries.length];    for (int i=entries.length; --i >= 0; ) {      if (entries[i] != null) {        reps[i]=new EntryRep(entries[i]);        if (!needCodebase)         reps[i].codebase=null;      }    }  }  return reps;}  }
class C{  public int safety(){  String s=soot.PhaseOptions.getString(options,"safety");  if (s.equalsIgnoreCase("safe"))   return safety_safe;  if (s.equalsIgnoreCase("medium"))   return safety_medium;  if (s.equalsIgnoreCase("unsafe"))   return safety_unsafe;  throw new RuntimeException("Invalid value " + s + " of phase option safety");}  }
class C{  private void notifyAlarmListeners(final AlarmValue alarm){  log.debug("onAlarmUpdate() -  there is:" + alarmListeners.size() + " listeners waiting to be notified!");  for (  AlarmListener listener : alarmListeners) {    listener.onAlarmUpdate(alarm);  }}  }
class C{  @Override public void startDocument() throws SAXException {  writeText4Links();  reset();  if (!("yes".equals(outputProperties.getProperty(OMIT_XML_DECLARATION,"no")))) {    write("<?xml");    if (version == null) {      write(" version=\"1.0\"");    } else {      write(" version=\"");      write(version);      write("\"");    }    if (outputEncoding != null && outputEncoding != "") {      write(" encoding=\"");      write(outputEncoding);      write("\"");    }    if (standalone == null) {      write(" standalone=\"yes\"?>\n");    } else {      write(" standalone=\"");      write(standalone);      write("\"");    }  }  super.startDocument();}  }
class C{  public LedgerAllocatorDelegator(LedgerAllocator allocator,boolean ownAllocator) throws IOException {  this.allocator=allocator;  this.ownAllocator=ownAllocator;  if (this.ownAllocator) {    this.allocator.start();  }}  }
class C{  @PostConstruct public void init(){  if (!host.equalsIgnoreCase("localhost") && !host.equalsIgnoreCase("local")) {    setLocal(false);  }  initializationSteps();  findClusterAndLaunchBulk();}  }
class C{  public boolean useAppsecretProof(){  return mUseAppsecretProof;}  }
class C{  public static String urlsToPath(URL[] urls){  if (urls.length == 0) {    return ("");  } else   if (urls.length == 1) {    return (urls[0].toExternalForm());  } else {    StringBuffer path=new StringBuffer(urls[0].toExternalForm());    for (int i=1; i < urls.length; i++) {      path.append(' ');      path.append(urls[i].toExternalForm());    }    return (path.toString());  }}  }
class C{  public void removeAllEdges(PDGNode from,PDGNode to){  if (!containsAnyEdge(from,to))   return;  List<String> labels=new ArrayList<String>(this.getLabelsForEdges(from,to));  for (  String label : labels) {    this.removeEdge(from,to,label);  }}  }
class C{  private void initModel(Activity a){  this.collectionsModel=new CollectionsObject(a);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(new BorderLayout());  createTopPanel();  createFieldPanel();}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public boolean loadXML(String source){  return false;}  }
class C{  public NotificationsGetQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  @Deployment public void testSimpleAutomaticSubProcess(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("simpleSubProcessAutomatic");  assertTrue(pi.isEnded());  assertProcessEnded(pi.getId());}  }
class C{  private Names(){}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  @Override public void write(String str,int st,int end){}  }
class C{  public NotesRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"notes.restoreComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public EntityListIterator queryStartupJobsAlways(EntityCondition commonCondition) throws GenericEntityException {  EntityCondition mainCondition=EntityCondition.makeCondition(commonCondition,EntityCondition.makeCondition("eventId","SCH_EVENT_STARTUP"));  return EntityQuery.use(delegator).from("JobSandbox").where(mainCondition).orderBy("runTime").queryIterator();}  }
class C{  private Locale toLocale(String str){  if (str == null)   return null;  String[] split=str.split("_");  if (split.length == 0)   return new Locale(""); else   if (split.length == 1)   return new Locale(split[0]); else   if (split.length == 2)   return new Locale(split[0],split[1]); else   return new Locale(split[0],split[1],split[2]);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public MarketCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static Map<String,Object> createMrpEvent(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,Object> parameters=UtilMisc.<String,Object>toMap("mrpId",context.get("mrpId"),"productId",context.get("productId"),"eventDate",context.get("eventDate"),"mrpEventTypeId",context.get("mrpEventTypeId"));  BigDecimal quantity=(BigDecimal)context.get("quantity");  try {    createOrUpdateMrpEvent(parameters,quantity,(String)context.get("facilityId"),(String)context.get("eventName"),false,delegator);  } catch (  GenericEntityException e) {    Debug.logError(e,"Error : findOne(\"MrpEvent\", parameters =)" + parameters,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public void onClick(View view){  if (view.getId() != R.id.button_tertiary) {    mInfoBarView.setControlsEnabled(false);  }  if (view.getId() == R.id.infobar_close_button) {    mInfoBarView.onCloseButtonClicked();  } else   if (view.getId() == R.id.button_primary) {    mInfoBarView.onButtonClicked(true);  } else   if (view.getId() == R.id.button_secondary) {    mInfoBarView.onButtonClicked(false);  } else   if (view.getId() == R.id.button_tertiary) {    mInfoBarView.onLinkClicked();  }}  }
class C{  public static String[] toArray(String arg){  if (arg == null) {    return new String[0];  }  StringTokenizer tok=new StringTokenizer(arg," ,");  String[] array=new String[tok.countTokens()];  int i=0;  while (tok.hasMoreTokens()) {    array[i]=tok.nextToken();    i++;  }  return (array);}  }
class C{  public void recordOpenedHistory(){  setFirstAction(OPENED_HISTORY);}  }
class C{  public TextReaderDoubleDataSource(File file) throws FileNotFoundException {  this(new FileReader(file));}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public void syncLocationManager2InfoSection(LocationManager locationManager) throws IOException {  if (textStoragePolicy != locationManager.getTextStoragePolicy())   throw new IOException("setLocationManager(): attempting to change textStoragePolicy from " + textStoragePolicy + " to "+ locationManager.getTextStoragePolicy());  textStoragePolicy=locationManager.getTextStoragePolicy();  textFileNames=locationManager.getFileNames();  textFileSizes=locationManager.getFileSizes();}  }
class C{  public MicrosphereProjectionInterpolator(int dimension,int elements,double maxDarkFraction,double darkThreshold,double background,double exponent,boolean sharedSphere,double noInterpolationTolerance){  this(new InterpolatingMicrosphere(dimension,elements,maxDarkFraction,darkThreshold,background,new UnitSphereRandomVectorGenerator(dimension)),exponent,sharedSphere,noInterpolationTolerance);}  }
class C{  private static EntryClass toEntryClass(Class cls) throws MarshalException {  if (cls != null)   return toEntryClassBase(cls,false).eclass;  return null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EnumDecl fullCopy(){  EnumDecl tree=(EnumDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 4:        tree.children[i]=new Opt();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public CompletionProposalDescriptionProvider(CompletionContext context){  super();  fContext=context;}  }
class C{  public void run(){  SimilarityArray sa;switch (WeightingMethod) {case summaryEvaluator.USE_DISTRO_AVERAGE_AS_WEIGHT:    sa=Caller.calcDistroSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);  break;case summaryEvaluator.USE_OCCURENCES_AS_WEIGHT:sa=Caller.calcSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);break;default :sa=new SimilarityArray();}}  }
class C{  public DestTemplateParameterContext addParameter(String paramName,String paramValue){  DestContextParamType parameter=new DestContextParamType();  parameter.setName(paramName);  parameter.setValue(paramValue);  destContextMap.getMap().put(paramName,parameter);  return this;}  }
class C{  @Override public void writeByte(final byte b){  bb.put(b);}  }
class C{  public static StructType fromSchema(Schema schema){  StructField[] structFields=new StructField[schema.numColumns()];  for (int i=0; i < structFields.length; i++) {switch (schema.getColumnTypes().get(i)) {case Double:      structFields[i]=new StructField(schema.getName(i),DataTypes.DoubleType,false,Metadata.empty());    break;case Integer:  structFields[i]=new StructField(schema.getName(i),DataTypes.IntegerType,false,Metadata.empty());break;case Long:structFields[i]=new StructField(schema.getName(i),DataTypes.LongType,false,Metadata.empty());break;case Float:structFields[i]=new StructField(schema.getName(i),DataTypes.FloatType,false,Metadata.empty());break;default :throw new IllegalStateException("This api should not be used with strings , binary data or ndarrays. This is only for columnar data");}}return new StructType(structFields);}  }
class C{  public CurlLoggerInterceptor(String tag){  this.tag=tag;}  }
class C{  @Override public void renderSymbol(){  validSymbol=SelectedSymbol.getInstance().isValid();  if (validSymbol) {    StyledLayerDescriptor sld=SelectedSymbol.getInstance().getSld();    SLDDataInterface sldData=SLDEditorFile.getInstance().getSLDData();    if (sld != null) {      for (      SLDOutputInterface sldOutput : sldOutputList) {        sldOutput.updatedSLD(sldData,sld);      }      renderSymbol((Style)renderSymbol.getRenderStyle(SelectedSymbol.getInstance()));    } else {      renderSymbol(null);    }  } else {    repaint();  }}  }
class C{  public ByteStringTranslator(){  list=new ArrayList<String>();  map=new HashMap<String,Byte>();}  }
class C{  @JsonValue public List<Interval> asList(){  return Collections.unmodifiableList(this);}  }
class C{  @Override public final void run(){  try {    runImpl();  } catch (  Throwable e) {    log.warn("error handling ls (" + getConnection().getIP() + ") message "+ this,e);  }}  }
class C{  public static String dump(byte[] arr,int offset,int length,int outOffset,int bpl,int addressLength){  int end=offset + length;  if (((offset | length | end) < 0) || (end > arr.length)) {    throw new IndexOutOfBoundsException("arr.length " + arr.length + "; "+ offset+ "..!"+ end);  }  if (outOffset < 0) {    throw new IllegalArgumentException("outOffset < 0");  }  if (length == 0) {    return "";  }  StringBuffer sb=new StringBuffer(length * 4 + 6);  boolean bol=true;  int col=0;  while (length > 0) {    if (col == 0) {      String astr;switch (addressLength) {case 2:        astr=Hex.u1(outOffset);      break;case 4:    astr=Hex.u2(outOffset);  break;case 6:astr=Hex.u3(outOffset);break;default :astr=Hex.u4(outOffset);break;}sb.append(astr);sb.append(": ");} else if ((col & 1) == 0) {sb.append(' ');}sb.append(Hex.u1(arr[offset]));outOffset++;offset++;col++;if (col == bpl) {sb.append('\n');col=0;}length--;}if (col != 0) {sb.append('\n');}return sb.toString();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void annotate(int length,@Nonnull String msg,Object... formatArgs){  if (startLimit != -1 && endLimit != -1 && (cursor < startLimit || cursor >= endLimit)) {    throw new ExceptionWithContext("Annotating outside the parent bounds");  }  String formattedMsg;  if (formatArgs != null && formatArgs.length > 0) {    formattedMsg=String.format(msg,formatArgs);  } else {    formattedMsg=msg;  }  int exclusiveEndOffset=cursor + length;  AnnotationEndpoint endPoint=null;  AnnotationEndpoint startPoint=annotatations.get(cursor);  if (startPoint == null) {    Map.Entry<Integer,AnnotationEndpoint> previousEntry=annotatations.lowerEntry(cursor);    if (previousEntry != null) {      AnnotationEndpoint previousAnnotations=previousEntry.getValue();      AnnotationItem previousRangeAnnotation=previousAnnotations.rangeAnnotation;      if (previousRangeAnnotation != null) {        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(previousEntry.getKey(),previousRangeAnnotation.annotation));      }    }  } else   if (length > 0) {    AnnotationItem existingRangeAnnotation=startPoint.rangeAnnotation;    if (existingRangeAnnotation != null) {      throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(cursor,existingRangeAnnotation.annotation));    }  }  if (length > 0) {    Map.Entry<Integer,AnnotationEndpoint> nextEntry=annotatations.higherEntry(cursor);    if (nextEntry != null) {      int nextKey=nextEntry.getKey();      if (nextKey < exclusiveEndOffset) {        AnnotationEndpoint nextEndpoint=nextEntry.getValue();        AnnotationItem nextRangeAnnotation=nextEndpoint.rangeAnnotation;        if (nextRangeAnnotation != null) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextRangeAnnotation.annotation));        }        if (nextEndpoint.pointAnnotations.size() > 0) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextKey,nextEndpoint.pointAnnotations.get(0).annotation));        }        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation endpoint at %d",formatAnnotation(cursor,cursor + length,formattedMsg),nextKey);      }      if (nextKey == exclusiveEndOffset) {        endPoint=nextEntry.getValue();      }    }  }  if (startPoint == null) {    startPoint=new AnnotationEndpoint();    annotatations.put(cursor,startPoint);  }  if (length == 0) {    startPoint.pointAnnotations.add(new AnnotationItem(indentLevel,formattedMsg));  } else {    startPoint.rangeAnnotation=new AnnotationItem(indentLevel,formattedMsg);    if (endPoint == null) {      endPoint=new AnnotationEndpoint();      annotatations.put(exclusiveEndOffset,endPoint);    }  }  cursor+=length;}  }
class C{  public String readString(){  int s=readInt();  if (s == 0) {    return null;  }  byte[] b=new byte[s];  System.arraycopy(data,offset,b,0,s);  offset+=s;  return new String(b);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public void takeThreadDump(Application application,boolean openView){  threadDumpProvider.createThreadDump(application,openView);}  }
class C{  public Entry(float x,float y,Object data){  this.x=x;  this.y=y;  this.data=data;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200793,skillcaster,skillname);}  }
class C{  public static double erfInv(final double x){  double w=-FastMath.log((1.0 - x) * (1.0 + x));  double p;  if (w < 6.25) {    w-=3.125;    p=-3.6444120640178196996e-21;    p=-1.685059138182016589e-19 + p * w;    p=1.2858480715256400167e-18 + p * w;    p=1.115787767802518096e-17 + p * w;    p=-1.333171662854620906e-16 + p * w;    p=2.0972767875968561637e-17 + p * w;    p=6.6376381343583238325e-15 + p * w;    p=-4.0545662729752068639e-14 + p * w;    p=-8.1519341976054721522e-14 + p * w;    p=2.6335093153082322977e-12 + p * w;    p=-1.2975133253453532498e-11 + p * w;    p=-5.4154120542946279317e-11 + p * w;    p=1.051212273321532285e-09 + p * w;    p=-4.1126339803469836976e-09 + p * w;    p=-2.9070369957882005086e-08 + p * w;    p=4.2347877827932403518e-07 + p * w;    p=-1.3654692000834678645e-06 + p * w;    p=-1.3882523362786468719e-05 + p * w;    p=0.0001867342080340571352 + p * w;    p=-0.00074070253416626697512 + p * w;    p=-0.0060336708714301490533 + p * w;    p=0.24015818242558961693 + p * w;    p=1.6536545626831027356 + p * w;  } else   if (w < 16.0) {    w=FastMath.sqrt(w) - 3.25;    p=2.2137376921775787049e-09;    p=9.0756561938885390979e-08 + p * w;    p=-2.7517406297064545428e-07 + p * w;    p=1.8239629214389227755e-08 + p * w;    p=1.5027403968909827627e-06 + p * w;    p=-4.013867526981545969e-06 + p * w;    p=2.9234449089955446044e-06 + p * w;    p=1.2475304481671778723e-05 + p * w;    p=-4.7318229009055733981e-05 + p * w;    p=6.8284851459573175448e-05 + p * w;    p=2.4031110387097893999e-05 + p * w;    p=-0.0003550375203628474796 + p * w;    p=0.00095328937973738049703 + p * w;    p=-0.0016882755560235047313 + p * w;    p=0.0024914420961078508066 + p * w;    p=-0.0037512085075692412107 + p * w;    p=0.005370914553590063617 + p * w;    p=1.0052589676941592334 + p * w;    p=3.0838856104922207635 + p * w;  } else   if (!Double.isInfinite(w)) {    w=FastMath.sqrt(w) - 5.0;    p=-2.7109920616438573243e-11;    p=-2.5556418169965252055e-10 + p * w;    p=1.5076572693500548083e-09 + p * w;    p=-3.7894654401267369937e-09 + p * w;    p=7.6157012080783393804e-09 + p * w;    p=-1.4960026627149240478e-08 + p * w;    p=2.9147953450901080826e-08 + p * w;    p=-6.7711997758452339498e-08 + p * w;    p=2.2900482228026654717e-07 + p * w;    p=-9.9298272942317002539e-07 + p * w;    p=4.5260625972231537039e-06 + p * w;    p=-1.9681778105531670567e-05 + p * w;    p=7.5995277030017761139e-05 + p * w;    p=-0.00021503011930044477347 + p * w;    p=-0.00013871931833623122026 + p * w;    p=1.0103004648645343977 + p * w;    p=4.8499064014085844221 + p * w;  } else {    p=Double.POSITIVE_INFINITY;  }  return p * x;}  }
class C{  private void generateHelpText(){  String filename="resources/files/attributehelp.txt";  helpText=new StringBuilder(3000);  try {    String line;    BufferedReader br=new BufferedReader(new FileReader(filename));    while (true) {      line=br.readLine();      if (line == null)       break;      helpText.append(line);    }  } catch (  IOException e1) {    System.out.println("Could not find/parse " + filename);    e1.printStackTrace();  }}  }
class C{  public void resetStartTime(){  dStart=new Date();}  }
class C{  public QiNiuUpLoad(){  congigFile=new File("config.data");  getConfig();  initialize();}  }
class C{  @Override public void removeAllAttributes(){  fLength=0;}  }
class C{  public T read(PacketBuffer buf){  return reader.apply(buf);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public PhotosGetOwnerPhotoUploadServerQuery(VkApiClient client,UserActor actor){  super(client,"photos.getOwnerPhotoUploadServer",GetOwnerPhotoUploadServerResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public ExceptionEntry(String message,Throwable exception){  super();  this.message=message;  this.exception=exception;}  }
class C{  public static String removeLastAnd(String string){  string=StringUtils.stripEnd(string," ");  return StringUtils.removeEndIgnoreCase(string,"and");}  }
class C{  public MonsterToArenaCursor queryMonsterToArenaMonster(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_MONSTER_TO_ARENA;  qh.Columns=null;  qh.Selection="mta." + S.COLUMN_MONSTER_TO_ARENA_MONSTER_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy="a." + S.COLUMN_ARENA_QUESTS_NAME;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterToArenaCursor(wrapJoinHelper(builderMonsterToArena(qh.Distinct),qh));}  }
class C{  public AdsGetDemographicsQuery(VkApiClient client,UserActor actor,int accountId,AdsGetDemographicsIdsType idsType,String ids,String period,String dateFrom,String dateTo){  super(client,"ads.getDemographics",Utils.buildParametrizedType(List.class,DemoStats.class));  accessToken(actor.getAccessToken());  accountId(accountId);  idsType(idsType);  ids(ids);  period(period);  dateFrom(dateFrom);  dateTo(dateTo);}  }
class C{  public Builder withRationaleDialogMsg(String rationaleMsg){  buildObj.rationaleDialogMsg=rationaleMsg;  buildObj.showRationaleDialog=true;  return this;}  }
class C{  public MarketCreateCommentQuery createComment(UserActor actor,int ownerId,int itemId){  return new MarketCreateCommentQuery(getClient(),actor,ownerId,itemId);}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static void restartBridge(boolean debug){  WXEnvironment.sDebugMode=debug;  WXSDKManager.getInstance().restartBridge();}  }
class C{  public synchronized void changeStripedCount(long diff){  this.count+=diff;  if (this.count == 0) {    this.signalTaskCompleted();  }}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  private boolean matchesPartPhoneNumber(String tokenVal){  String n_name=(String)tokenItem.findFeature("n.name");  String n_n_name=(String)tokenItem.findFeature("n.n.name");  String p_name=(String)tokenItem.findFeature("p.name");  String p_p_name=(String)tokenItem.findFeature("p.p.name");  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));}  }
class C{  public static void deleteESInput(){  String esPIRIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + ":" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ "/"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY);  logger.info("ES input being deleted at " + esPIRIndex);  ProcessBuilder pDeletePIR=new ProcessBuilder("curl","-XDELETE",esPIRIndex);  try {    TestUtils.executeCommand(pDeletePIR);    logger.info("ES input deleted!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isFace(){  return (id & (lowestOnBitForLevel(0) - 1)) == 0;}  }
class C{  public SourceDataQuality clone() throws CloneNotSupportedException {  return (SourceDataQuality)super.clone();}  }
class C{  BKDistributedLogManager(String name,DistributedLogConfiguration conf,URI uri,ZooKeeperClientBuilder writerZKCBuilder,ZooKeeperClientBuilder readerZKCBuilder,ZooKeeperClient zkcForWriterBKC,ZooKeeperClient zkcForReaderBKC,BookKeeperClientBuilder writerBKCBuilder,BookKeeperClientBuilder readerBKCBuilder,FeatureProvider featureProvider,PermitLimiter writeLimiter,StatsLogger statsLogger) throws IOException {  this(name,conf,ConfUtils.getConstDynConf(conf),uri,writerZKCBuilder,readerZKCBuilder,zkcForWriterBKC,zkcForReaderBKC,writerBKCBuilder,readerBKCBuilder,null,null,null,OrderedScheduler.newBuilder().name("BKDL-" + name).corePoolSize(1).build(),null,null,null,null,new ReadAheadExceptionsLogger(statsLogger),DistributedLogConstants.UNKNOWN_CLIENT_ID,DistributedLogConstants.LOCAL_REGION_ID,null,writeLimiter,PermitManager.UNLIMITED_PERMIT_MANAGER,featureProvider,statsLogger,NullStatsLogger.INSTANCE);  this.ownExecutor=true;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/bpmn/callactivity/CallActivity.testSubProcessDataInputOutput.bpmn20.xml","org/activiti/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml"}) public void testSubProcessWithDataInputOutput(){  Map<String,Object> vars=new HashMap<String,Object>();  vars.put("superVariable","Hello from the super process.");  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("subProcessDataInputOutput",vars);  TaskQuery taskQuery=taskService.createTaskQuery();  Task taskBeforeSubProcess=taskQuery.singleResult();  assertEquals("Task in subprocess",taskBeforeSubProcess.getName());  assertEquals("Hello from the super process.",runtimeService.getVariable(taskBeforeSubProcess.getProcessInstanceId(),"subVariable"));  assertEquals("Hello from the super process.",taskService.getVariable(taskBeforeSubProcess.getId(),"subVariable"));  runtimeService.setVariable(taskBeforeSubProcess.getProcessInstanceId(),"subVariable","Hello from sub process.");  assertEquals("Hello from the super process.",runtimeService.getVariable(processInstance.getId(),"superVariable"));  taskService.complete(taskBeforeSubProcess.getId());  Task taskAfterSubProcess=taskQuery.singleResult();  assertEquals("Task in super process",taskAfterSubProcess.getName());  assertEquals("Hello from sub process.",runtimeService.getVariable(processInstance.getId(),"superVariable"));  assertEquals("Hello from sub process.",taskService.getVariable(taskAfterSubProcess.getId(),"superVariable"));  vars.clear();  vars.put("x",5l);  taskService.complete(taskAfterSubProcess.getId(),vars);  Task taskInSecondSubProcess=taskQuery.singleResult();  assertEquals("Task in subprocess",taskInSecondSubProcess.getName());  assertEquals(10l,runtimeService.getVariable(taskInSecondSubProcess.getProcessInstanceId(),"y"));  assertEquals(10l,taskService.getVariable(taskInSecondSubProcess.getId(),"y"));  taskService.complete(taskInSecondSubProcess.getId());  Task taskAfterSecondSubProcess=taskQuery.singleResult();  assertEquals("Task in super process",taskAfterSecondSubProcess.getName());  assertEquals(15l,runtimeService.getVariable(taskAfterSecondSubProcess.getProcessInstanceId(),"z"));  assertEquals(15l,taskService.getVariable(taskAfterSecondSubProcess.getId(),"z"));  taskService.complete(taskAfterSecondSubProcess.getId());  assertProcessEnded(processInstance.getId());  assertEquals(0,runtimeService.createExecutionQuery().list().size());}  }
class C{  public static UUID minimumUuid(){  return new UUID(getMostSignificantBits(0),getLeastSignificantBits(0,0));}  }
class C{  @Override public void onClick(View v){  hide();}  }
class C{  protected void performDefaults(){  super.performDefaults();  IPreferenceStore store=getPreferenceStore();  int iconSet=store.getDefaultInt(ISVNUIConstants.PREF_MENU_ICON_SET);  useTortoiseSVN.setSelection(ISVNUIConstants.MENU_ICON_SET_TORTOISESVN == iconSet);  useDefault.setSelection(ISVNUIConstants.MENU_ICON_SET_DEFAULT == iconSet);  useDefault.setSelection(ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE == iconSet);  verifyValidation();}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  private Map<ISVNRepositoryLocation,List<IResource>> groupByRepository(IResource[] resourceArray,SyncInfoSet set){  Map<ISVNRepositoryLocation,List<IResource>> resourceMap=new HashMap<ISVNRepositoryLocation,List<IResource>>();  final SyncInfo[] syncInfos=set.getSyncInfos();  for (int i=0; i < syncInfos.length; i++) {    SVNStatusSyncInfo syncInfo=(SVNStatusSyncInfo)syncInfos[i];    IResource local=syncInfo.getLocal();    resourceLoop:     for (int j=0; j < resourceArray.length; j++) {      if (resourceArray[j].equals(local)) {        IResourceVariant remote=syncInfo.getRemote();        if (remote != null && remote instanceof ISVNRemoteResource) {          if (syncInfo.getRemoteResourceStatus() != null) {            ISVNRepositoryLocation repos=syncInfo.getRemoteResourceStatus().getRepository();            List<IResource> resList=(List<IResource>)resourceMap.get(repos);            if (resList == null)             resList=new ArrayList<IResource>(resourceArray.length);            resList.add(resourceArray[j]);            resourceMap.put(repos,resList);          }        }        break resourceLoop;      }    }  }  return resourceMap;}  }
class C{  private void printLines(){  for (  final String s : testLines) {    System.out.println(s);  }}  }
class C{  public boolean runAfter(List tasks,int size){  return false;}  }
class C{  public ValueComboBoxDataGroup(List<ValueComboBoxData> dataList){  super();  this.groupName="Not Set";  this.dataList=dataList;  this.isSubMenu=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMAIN_PLAYTIME(String value0){  return new SM_SYSTEM_MESSAGE(1300719,value0);}  }
class C{  private static boolean contains(Entry[] eSet1,Entry[] eSet2){  if (eSet2 == null || eSet2.length == 0)   return true;  if (eSet1 == null || eSet1.length < eSet2.length)   return false;  for (int i=0; i < eSet2.length; i++)   if (!contains(eSet1,eSet2[i]))   return false;  return true;}  }
class C{  public void stop(){  this.stopTime=this.world.getTotalWorldTime();}  }
class C{  public synchronized static long next(String key){  long prefix=Global.getLong("system.code",0) * 10000000000000L;  try {    Cache.remove("global/" + key);    Global f=Helper.load(key,Global.class);    long v=1;    if (f == null) {      String linkid=UID.random();      Helper.insert(V.create(X.ID,key).set("l",v).set("linkid",linkid),Global.class);      f=Helper.load(key,Global.class);      if (f == null) {        log.error("occur error when create unique id, name=" + key);        return -1;      } else       if (!X.isSame(f.getString("linkid"),linkid)) {        return next(key);      }    } else {      v=f.getLong("l");      if (Helper.update(W.create(X.ID,key).and("l",v),V.create("l",v + 1L),Global.class) <= 0) {        return next(key);      }      v+=1;    }    return prefix + v;  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return -1;}  }
class C{  @Nullable public static String overrideXmlContent(@NonNull Document document,@NonNull VdOverrideInfo info,@Nullable StringBuilder errorLog){  boolean isXmlFileContentChanged=false;  Element root=document.getDocumentElement();  NamedNodeMap attr=root.getAttributes();  if (info.needsOverrideWidth()) {    Node nodeAttr=attr.getNamedItem(ANDROID_WIDTH);    int overrideValue=info.getWidth();    int originalValue=parseDimension(overrideValue,nodeAttr,true);    if (originalValue != overrideValue) {      isXmlFileContentChanged=true;    }  }  if (info.needsOverrideHeight()) {    Node nodeAttr=attr.getNamedItem(ANDROID_HEIGHT);    int overrideValue=info.getHeight();    int originalValue=parseDimension(overrideValue,nodeAttr,true);    if (originalValue != overrideValue) {      isXmlFileContentChanged=true;    }  }  if (info.needsOverrideOpacity()) {    Node nodeAttr=attr.getNamedItem(ANDROID_ALPHA);    String opacityValue=String.format("%.2f",info.getOpacity() / 100.0f);    if (nodeAttr != null) {      nodeAttr.setTextContent(opacityValue);    } else {      root.setAttribute(ANDROID_ALPHA,opacityValue);    }    isXmlFileContentChanged=true;  }  if (info.needsOverrideAutoMirrored()) {    Node nodeAttr=attr.getNamedItem(ANDROID_AUTO_MIRRORED);    if (nodeAttr != null) {      nodeAttr.setTextContent("true");    } else {      root.setAttribute(ANDROID_AUTO_MIRRORED,"true");    }    isXmlFileContentChanged=true;  }  if (isXmlFileContentChanged) {    StringWriter stringOut=new StringWriter();    XMLSerializer serial=new XMLSerializer(stringOut,getPrettyPrintFormat());    try {      serial.serialize(document);    } catch (    IOException e) {      if (errorLog != null) {        errorLog.append("Exception while parsing XML file:\n").append(e.getMessage());      }    }    return stringOut.toString();  } else {    return null;  }}  }
class C{  public void diff_cleanupSemanticLossless(LinkedList<Diff> diffs){  String equality1, edit, equality2;  String commonString;  int commonOffset;  int score, bestScore;  String bestEquality1, bestEdit, bestEquality2;  ListIterator<Diff> pointer=diffs.listIterator();  Diff prevDiff=pointer.hasNext() ? pointer.next() : null;  Diff thisDiff=pointer.hasNext() ? pointer.next() : null;  Diff nextDiff=pointer.hasNext() ? pointer.next() : null;  while (nextDiff != null) {    if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {      equality1=prevDiff.text;      edit=thisDiff.text;      equality2=nextDiff.text;      commonOffset=diff_commonSuffix(equality1,edit);      if (commonOffset != 0) {        commonString=edit.substring(edit.length() - commonOffset);        equality1=equality1.substring(0,equality1.length() - commonOffset);        edit=commonString + edit.substring(0,edit.length() - commonOffset);        equality2=commonString + equality2;      }      bestEquality1=equality1;      bestEdit=edit;      bestEquality2=equality2;      bestScore=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);      while (edit.length() != 0 && equality2.length() != 0 && edit.charAt(0) == equality2.charAt(0)) {        equality1+=edit.charAt(0);        edit=edit.substring(1) + equality2.charAt(0);        equality2=equality2.substring(1);        score=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);        if (score >= bestScore) {          bestScore=score;          bestEquality1=equality1;          bestEdit=edit;          bestEquality2=equality2;        }      }      if (!prevDiff.text.equals(bestEquality1)) {        if (bestEquality1.length() != 0) {          prevDiff.text=bestEquality1;        } else {          pointer.previous();          pointer.previous();          pointer.previous();          pointer.remove();          pointer.next();          pointer.next();        }        thisDiff.text=bestEdit;        if (bestEquality2.length() != 0) {          nextDiff.text=bestEquality2;        } else {          pointer.remove();          nextDiff=thisDiff;          thisDiff=prevDiff;        }      }    }    prevDiff=thisDiff;    thisDiff=nextDiff;    nextDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public Expression startsWith(Value str1,Value str2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200961,skilltarget,skillcaster,skillname);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201136,value0);}  }
class C{  @NonNull @Override public CoreContract.Presenter initPresenter(@NonNull final CoreContract.Service service){  requireNonNull(service);  CoreContract.Presenter presenter=new MessagePresenter(this,service);  this.changePresenter(presenter);  return presenter;}  }
class C{  public DistributedLogNamespace build() throws IllegalArgumentException, NullPointerException, IOException {  Preconditions.checkNotNull(_conf,"No DistributedLog Configuration.");  Preconditions.checkNotNull(_uri,"No DistributedLog URI");  String scheme=_uri.getScheme();  Preconditions.checkNotNull(scheme,"Invalid DistributedLog URI : " + _uri);  String[] schemeParts=StringUtils.split(scheme,'-');  Preconditions.checkArgument(schemeParts.length > 0,"Invalid distributedlog scheme found : " + _uri);  Preconditions.checkArgument(Objects.equal(DistributedLogConstants.SCHEME_PREFIX,schemeParts[0].toLowerCase()),"Unknown distributedlog scheme found : " + _uri);  if (schemeParts.length > 1) {    String backendProvider=schemeParts[1];    Preconditions.checkArgument(Objects.equal(DistributedLogConstants.BACKEND_BK,backendProvider.toLowerCase()),"Backend '" + backendProvider + "' is not supported yet.");  }  FeatureProvider featureProvider;  if (null == _featureProvider) {    featureProvider=new SettableFeatureProvider("",0);    logger.info("No feature provider is set. All features are disabled now.");  } else {    featureProvider=_featureProvider;  }  URI bkUri;  try {    bkUri=new URI(schemeParts[0],_uri.getAuthority(),_uri.getPath(),_uri.getQuery(),_uri.getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("Invalid distributedlog uri found : " + _uri,e);  }  return BKDistributedLogNamespace.newBuilder().conf(_conf).uri(bkUri).statsLogger(_statsLogger).featureProvider(featureProvider).clientId(_clientId).regionId(_regionId).build();}  }
class C{  private void updateQrCode(int pos){  MultiFormatWriter multiFormatWriter=new MultiFormatWriter();  try {    BitMatrix bitMatrix=multiFormatWriter.encode(couponsList.get(pos).getCouponCode(),BarcodeFormat.QR_CODE,200,200);    BarcodeEncoder barcodeEncoder=new BarcodeEncoder();    Bitmap bitmap=barcodeEncoder.createBitmap(bitMatrix);    qrCodeImage.setImageBitmap(bitmap);  } catch (  WriterException e) {    e.printStackTrace();  }}  }
class C{  public double distance(double x,double y,double z){  double xd=this.x - x;  double yd=this.y - y;  double zd=this.z - z;  return Math.sqrt(xd * xd + yd * yd + zd * zd);}  }
class C{  public DerivativeStructure(final int parameters,final int order,final double... derivatives) throws MathIllegalArgumentException {  this(parameters,order);  MathArrays.checkEqualLength(derivatives,data);  System.arraycopy(derivatives,0,data,0,data.length);}  }
class C{  public byte readByte() throws IOException, EOFException {  return (byte)in.read();}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200436,skilltarget,skillname);}  }
class C{  @VisibleForTesting public void subscribeForTesting(){  mObservable.subscribe(mObserver);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysUserMenu other=(SysUserMenu)that;  return (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId())) && (this.getMenuId() == null ? other.getMenuId() == null : this.getMenuId().equals(other.getMenuId())) && (this.getPermission() == null ? other.getPermission() == null : this.getPermission().equals(other.getPermission()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  public void mouseClicked(MouseEvent me){  int meX=me.getX();  int meY=me.getY();  if (inPopup) {    inPopup=false;    return;  }  getHits(meX,meY,false);  if (current == inScrollByMouse) {    if (hitNodes.size() == 0 && hitEdges.size() == 0 && hitNodeLabels.size() == 0 && hitEdgeLabels.size() == 0) {      viewer.selectAllNodes(false);      viewer.selectAllEdges(false);      viewer.repaint();      return;    }  }  current=inClick;  if (hitNodes.size() != 0)   viewer.fireDoClick(hitNodes,me.getClickCount());  if (hitEdges.size() != 0)   viewer.fireDoClick(hitEdges,me.getClickCount());  if (hitNodeLabels.size() != 0)   viewer.fireDoClickLabel(hitNodeLabels,me.getClickCount());  if (hitEdgeLabels.size() != 0)   viewer.fireDoClickLabel(hitEdgeLabels,me.getClickCount());  if (me.getClickCount() == 1) {    if (!hitNodes.isEmpty() || !hitEdges.isEmpty())     selectNodesEdges(hitNodes,hitEdges,me.isShiftDown(),me.getClickCount()); else     if (!hitNodeLabels.isEmpty() || !hitEdgeLabels.isEmpty())     selectNodesEdges(hitNodeLabels,hitEdgeLabels,me.isShiftDown(),me.getClickCount());  }  if (me.getClickCount() == 2 && viewer.getAllowEdit() && hitNodes.size() == 0 && hitEdges.size() == 0) {    if (viewer.getAllowNewNodeDoubleClick()) {      viewer.setDefaultNodeLocation(viewer.trans.d2w(me.getPoint()));      Node v=viewer.newNode();      if (v != null) {        try {          viewer.setLocation(v,viewer.trans.d2w(me.getPoint()));          viewer.setDefaultNodeLocation(viewer.trans.d2w(new Point(meX + 10,meY + 10)));          viewer.repaint();        } catch (        NotOwnerException ex) {        }      }    }  } else   if (me.getClickCount() == 3 && viewer.isAllowInternalEdgePoints() && hitNodes.size() == 0 && hitEdges.size() == 1) {    Edge e=hitEdges.getFirstElement();    try {      EdgeView ev=viewer.getEV(e);      Point vp=viewer.trans.w2d(viewer.getLocation(viewer.getGraph().getSource(e)));      Point wp=viewer.trans.w2d(viewer.getLocation(viewer.getGraph().getTarget(e)));      int index=ev.hitEdgeRank(vp,wp,viewer.trans,me.getX(),meY,3);      java.util.List<Point2D> list=viewer.getInternalPoints(e);      Point2D aptWorld=viewer.trans.d2w(me.getPoint());      if (list == null) {        list=new LinkedList<>();        list.add(aptWorld);        viewer.setInternalPoints(e,list);      } else       list.add(index,aptWorld);    } catch (    NotOwnerException ex) {      Basic.caught(ex);    }  } else   if (me.getClickCount() == 2 && ((viewer.isAllowEditNodeLabelsOnDoubleClick() && hitNodeLabels.size() > 0) || (viewer.isAllowEditNodeLabelsOnDoubleClick() && hitNodes.size() > 0))) {    try {      Node v;      if (viewer.isAllowEditNodeLabelsOnDoubleClick() && hitNodeLabels.size() > 0)       v=hitNodeLabels.getLastElement(); else       v=hitNodes.getLastElement();      String label=viewer.getLabel(v);      label=JOptionPane.showInputDialog(viewer.getFrame(),"Edit Node Label:",label);      if (label != null && !label.equals(viewer.getLabel(v))) {        viewer.setLabel(v,label);        viewer.setLabelVisible(v,label.length() > 0);        viewer.repaint();      }    } catch (    NotOwnerException ex) {      Basic.caught(ex);    }  } else   if (me.getClickCount() == 2 && ((viewer.isAllowEditEdgeLabelsOnDoubleClick() && hitEdgeLabels.size() > 0) || (viewer.isAllowEditEdgeLabelsOnDoubleClick() && hitEdges.size() > 0))) {    try {      Edge e;      if (viewer.isAllowEditEdgeLabelsOnDoubleClick() && hitEdgeLabels.size() > 0)       e=hitEdgeLabels.getLastElement(); else       e=hitEdges.getLastElement();      String label=viewer.getLabel(e);      label=JOptionPane.showInputDialog(viewer.getFrame(),"Edit Edge Label:",label);      if (label != null && !label.equals(viewer.getLabel(e))) {        viewer.setLabel(e,label);        viewer.setLabelVisible(e,label.length() > 0);        viewer.repaint();      }    } catch (    NotOwnerException ex) {      Basic.caught(ex);    }  }  current=0;}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augmentations) throws XNIException {}  }
class C{  public Edge addChildEdge(Node parent,Node child){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  private boolean lollipopAndAbove(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public static Map<String,Object> prodFindProduct(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  if (UtilValidate.isEmpty(productId)) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.invalid_productId_passed",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  try {    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();    GenericValue mainProduct=product;    if (product.get("isVariant") != null && product.getString("isVariant").equalsIgnoreCase("Y")) {      List<GenericValue> c=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_VARIANT"),null,true);      c=EntityUtil.filterByDate(c);      if (c.size() > 0) {        GenericValue asV=c.iterator().next();        mainProduct=asV.getRelatedOne("MainProduct",true);      }    }    result.put("product",mainProduct);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    e.printStackTrace();    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_reading_product_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  public LogSegmentMetadata remove(String name){synchronized (logSegments) {    LogSegmentMetadata metadata=logSegments.remove(name);    if (null != metadata) {      lid2LogSegments.remove(metadata.getLedgerId(),metadata);      LOG.debug("Removed log segment ({} : {}) from cache.",name,metadata);    }    return metadata;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public BoardCreateCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  private SimpleCurveFitter(ParametricUnivariateFunction function,double[] initialGuess,int maxIter){  this.function=function;  this.initialGuess=initialGuess;  this.maxIter=maxIter;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignMinusExpr fullCopy(){  AssignMinusExpr tree=(AssignMinusExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public final TestSubscriber<T> assertNoError(){  int s=errors.size();  if (s == 1) {    Throwable e=errors.get(0);    String valueAndClass=e == null ? null : e + " (" + e.getClass().getSimpleName()+ ")";    throw new AssertionError("Error present: " + valueAndClass,null);  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public static double log1p(final double x){  if (x == -1) {    return Double.NEGATIVE_INFINITY;  }  if (x == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  }  if (x > 1e-6 || x < -1e-6) {    final double xpa=1 + x;    final double xpb=-(xpa - 1 - x);    final double[] hiPrec=new double[2];    final double lores=log(xpa,hiPrec);    if (Double.isInfinite(lores)) {      return lores;    }    final double fx1=xpb / xpa;    final double epsilon=0.5 * fx1 + 1;    return epsilon * fx1 + hiPrec[1] + hiPrec[0];  } else {    final double y=(x * F_1_3 - F_1_2) * x + 1;    return y * x;  }}  }
class C{  public static String removeFileExtension(String s){  String separator=System.getProperty("file.separator");  String filename;  int lastSeparatorIndex=s.lastIndexOf(separator);  if (lastSeparatorIndex == -1) {    filename=s;  } else {    filename=s.substring(lastSeparatorIndex + 1);  }  return filename;}  }
class C{  public ConsistencyLevel clamp(ConsistencyLevel consistencyLevel){  if ((consistencyLevel == ConsistencyLevel.CL_LOCAL_QUORUM || consistencyLevel == ConsistencyLevel.CL_EACH_QUORUM) && !_networkTopology) {    consistencyLevel=ConsistencyLevel.CL_QUORUM;  }  if (consistencyLevel == ConsistencyLevel.CL_THREE && _replicationFactor < 3) {    consistencyLevel=ConsistencyLevel.CL_TWO;  }  if (consistencyLevel == ConsistencyLevel.CL_TWO && _replicationFactor < 2) {    consistencyLevel=ConsistencyLevel.CL_ONE;  }  return consistencyLevel;}  }
class C{  @Override public BigFraction multiply(final BigFraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (numerator.signum() == 0 || fraction.numerator.signum() == 0) {    return ZERO;  }  return new BigFraction(numerator.multiply(fraction.numerator),denominator.multiply(fraction.denominator));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200681,skillcaster,skillname);}  }
class C{  public GravitationalForce(){  this(DEFAULT_FORCE_CONSTANT,DEFAULT_DIRECTION);}  }
class C{  public Host(String hostName) throws UnknownHostException {  this(hostName,InetAddress.getByName(hostName));}  }
class C{  public static Map<String,Object> updateEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);  newContext.put("infoString",newContext.get("emailAddress"));  newContext.remove("emailAddress");  return updateContactMech(ctx,newContext);}  }
class C{  private static ArrayList<IVCombination> findIVIntersection(IVScanResult poke1,IVScanResult poke2){  ArrayList<IVCombination> intersection=new ArrayList<>();  if (poke1 != null && poke2 != null) {    ArrayList<IVCombination> p1IVs=poke1.iVCombinations;    ArrayList<IVCombination> p2IVs=poke2.iVCombinations;    for (    IVCombination p1IV : p1IVs) {      for (      IVCombination p2IV : p2IVs) {        if (p1IV.equals(p2IV)) {          intersection.add(p1IV);        }      }    }  }  return intersection;}  }
class C{  public StandardDocumentComparator(){  sGraph=new GraphSimilarity();  sHistogram=new GraphSimilarity();}  }
class C{  @Override public void startGroup(Augmentations augs) throws XNIException {}  }
class C{  public BlockId(String fileName,long blkNum){  this.fileName=fileName;  this.blkNum=blkNum;  myString="[file " + fileName + ", block "+ blkNum+ "]";  myHashCode=myString.hashCode();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200425,value0,skillname);}  }
class C{  public final boolean isFallBackFileEmpty(){  boolean isEmpty=false;  try {    openFallbackInputStream();    if (!getInput().ready()) {      isEmpty=true;    }  } catch (  IOException e) {    LOG.error("isFallBackFileEmpty() : A problem has ocurred while trying to determine if the file was empty",e);  }catch (  Exception ex) {    LOG.error("isFallBackFileEmpty() : " + ex.getMessage());  } finally {    try {      closeFallbackInputStream();    } catch (    Exception ex) {      LOG.error("isFallBackFileEmpty() : " + ex.getMessage());    }  }  if (LOG.isDebugEnabled())   LOG.debug("isFallBackFileEmpty() : The result of checking whether the file is empty or not is " + isEmpty);  return isEmpty;}  }
class C{  protected WallGetByIdQuery posts(List<String> value){  return unsafeParam("posts",value);}  }
class C{  private final void swap(int i,int j){  int tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public Spannable build(){  boolean first=true;  SpannableStringBuilder builder=new SpannableStringBuilder();  for (  final Pair<CharSequence,BackgroundHolder> stringPart : mTextParts) {    if (first) {      first=false;    } else {      builder.append(mSeparator);    }    if (stringPart.second != null) {      stringPart.second.mStart=builder.length();    }    builder.append(stringPart.first);    if (stringPart.second != null) {      stringPart.second.mEnd=builder.length();    }  }  RoundedCornersBackgroundSpan span=new RoundedCornersBackgroundSpan(this);  builder.setSpan(span,0,builder.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  return builder;}  }
class C{  public static StorableTimeFence inFridayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(FRIDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  public boolean canSet(Class type){  if (type == null)   return false;  if (m_columnType.isPrimitive()) {    return m_columnType.isAssignableFrom(type) || TypeLib.getWrapperType(m_columnType).isAssignableFrom(type) || String.class.isAssignableFrom(type);  } else {    return m_columnType.isAssignableFrom(type);  }}  }
class C{  public VideoGetAlbumsByVideoQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  public void close(){  this.pw.flush();}  }
class C{  @deprecated protected int writeDeltaTo(int jumpTarget){  int i=this.charsLength - jumpTarget;  assert (i >= 0);  if (i <= 64511)   return write(i);  int length;  int length;  if (i <= 67043327) {    this.intUnits[0]=((char)(64512 + (i >> 16)));    length=1;  } else {    this.intUnits[0]=65535;    this.intUnits[1]=((char)(i >> 16));    length=2;  }  this.intUnits[(length++)]=((char)i);  return write(this.intUnits,length);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200382,num0,skillname);}  }
class C{  public TranslateLanguagePanel(SubPanelListener listener,TranslateOptions options){  mListener=listener;  mOptions=options;  mSessionOptions=new TranslateOptions(mOptions);}  }
class C{  public AdsCreateTargetGroupQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  public long blockNumber(){  return blockNum;}  }
class C{  protected String normalizeURI(String uriref){  String newRef="";  byte[] bytes;  if (uriref == null) {    return null;  }  try {    bytes=uriref.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    catalogManager.debug.message(1,"UTF-8 is an unsupported encoding!?");    return uriref;  }  for (int count=0; count < bytes.length; count++) {    int ch=bytes[count] & 0xFF;    if ((ch <= 0x20) || (ch > 0x7F) || (ch == 0x22)|| (ch == 0x3C)|| (ch == 0x3E)|| (ch == 0x5C)|| (ch == 0x5E)|| (ch == 0x60)|| (ch == 0x7B)|| (ch == 0x7C)|| (ch == 0x7D)|| (ch == 0x7F)) {      newRef+=encodedByte(ch);    } else {      newRef+=(char)bytes[count];    }  }  return newRef;}  }
class C{  public boolean isValidGenericTld(String gTld){  gTld=unicodeToASCII(gTld);  return Arrays.binarySearch(GENERIC_TLDS,chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  public void read(Buffer buf) throws IOException {  if (currentFrame >= mip.getNumberOfFrames()) {    buf.setEOM(true);    buf.setOffset(0);    buf.setLength(0);    finished=true;    return;  }  byte[] data=ip.getImage(currentFrame);  buf.setLength(data.length);  buf.setTimeStamp((long)(currentFrame * (1000 / mip.getFPS()) * 1000000L));  buf.setSequenceNumber(currentFrame);  buf.setOffset(0);  buf.setFormat(videoFormat);  buf.setFlags(buf.getFlags() | buf.FLAG_KEY_FRAME);  buf.setData(data);  fireFrameSaved(currentFrame);  currentFrame++;}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null;}  }
class C{  public static boolean isBanned(String ip){  for (  BannedIP ipBan : banList) {    if (ipBan.isActive() && NetworkUtils.checkIPMatching(ipBan.getMask(),ip)) {      return true;    }  }  return false;}  }
class C{  private void refreshPages(){  timelineDisplayFragment.setImage(currentPhase.getImageUrl());  timelineAboutFragment.setAboutText(currentPhase.getDescription());}  }
class C{  private static Random initRandom(long seed){  System.out.printf("%s using random seed: %d%n",PersistentSortedQueueTest.class.getSimpleName(),seed);  Random random=new Random(seed);  PersistentSortedQueue.RANDOM=random;  PersistentSortedQueueTest.RANDOM=random;  return random;}  }
class C{  public boolean removeEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex >= mDataSets.size())   return false;  IDataSet set=mDataSets.get(dataSetIndex);  if (set != null) {    boolean removed=set.removeEntry(e);    if (removed) {      mYValCount-=1;      calcMinMax(0,mYValCount);    }    return removed;  } else   return false;}  }
class C{  protected Visitor(Scoper scoper,boolean ignoreMapEntry){  super(Element.class);  this.scoper=Preconditions.checkNotNull(scoper);  this.ignoreMapEntry=ignoreMapEntry;}  }
class C{  public RRQRDecomposition(RealMatrix matrix){  this(matrix,0d);}  }
class C{  @Override public Document parseURI(String uri) throws LSException {  if (fBusy) {    throw newInvalidStateError();  }  XMLInputSource source=new XMLInputSource(null,uri,null);  try {    currentThread=Thread.currentThread();    fBusy=true;    parse(source);    fBusy=false;    if (abortNow && currentThread.isInterrupted()) {      abortNow=false;      Thread.interrupted();    }  } catch (  Exception e) {    fBusy=false;    if (abortNow && currentThread.isInterrupted()) {      Thread.interrupted();    }    if (abortNow) {      abortNow=false;      restoreHandlers();      return null;    }    if (e != Abort.INSTANCE) {      if (!(e instanceof XMLParseException) && fErrorHandler != null) {        DOMErrorImpl error=new DOMErrorImpl();        error.fException=e;        error.fMessage=e.getMessage();        error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;        fErrorHandler.getErrorHandler().handleError(error);      }      if (DEBUG) {        e.printStackTrace();      }      throw (LSException)DOMUtil.createLSException(LSException.PARSE_ERR,e).fillInStackTrace();    }  }  Document doc=getDocument();  dropDocumentReferences();  return doc;}  }
class C{  void notifyPendingReceivedCallback(final MessageImpl message,Exception exception){  if (!pendingReceives.isEmpty()) {    CompletableFuture<Message> receivedFuture=pendingReceives.poll();    if (exception == null) {      checkNotNull(message,"received message can't be null");      if (receivedFuture != null) {        if (conf.getReceiverQueueSize() == 0) {          receivedFuture.complete(message);        } else {          messageProcessed(message);          listenerExecutor.execute(null);        }      }    } else {      listenerExecutor.execute(null);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201251,skilltarget,skillname);}  }
class C{  protected static void addSourceFileTag(SootClass sc,String fileName){  soot.tagkit.SourceFileTag tag=null;  if (sc.hasTag("SourceFileTag")) {    return;  } else {    tag=new soot.tagkit.SourceFileTag();    sc.addTag(tag);  }  tag.setSourceFile(fileName);}  }
class C{  public void inc(Counter<KeyType> another){  for (  Entry<KeyType,Long> e : another.hash.entrySet()) {    inc(e.getKey(),e.getValue());  }}  }
class C{  public RTMClient rtm(String apiToken) throws IOException {  try {    return new RTMClient(methods().rtmStart(RTMStartRequest.builder().token(apiToken).build()).getUrl());  } catch (  SlackApiException|URISyntaxException e) {    throw new IllegalStateException("Couldn't fetch RTM API WebSocket endpoint. Ensure the apiToken value.");  }}  }
class C{  public AccessDeniedException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void updateForAppearanceAnimation(float percentage){  mRippleWidthPx=Math.round(MathUtils.interpolate(mRippleMinimumWidthPx,mRippleMaximumWidthPx,percentage));  mRippleOpacity=MathUtils.interpolate(0.f,1.f,percentage);  float textOpacityDelay=0.5f;  float textOpacityPercentage=Math.max(0,percentage - textOpacityDelay) / (1.f - textOpacityDelay);  mTextOpacity=MathUtils.interpolate(0.f,1.f,textOpacityPercentage);}  }
class C{  @Override public void onTxRollback(Transaction tx){  if (!tx.isReadOnly() && enableLogging) {    doRollback(tx);    LogSeqNum lsn=new RollbackRecord(txNum).writeToLog();    VanillaDb.logMgr().flush(lsn);  }}  }
class C{  public void clear(){  mAnimations.clear();}  }
class C{  public void addField(Field field){  if (fFields == null)   fFields=new Field[4]; else   if (fFieldCount == fFields.length)   fFields=resize(fFields,fFieldCount * 2);  fFields[fFieldCount++]=field;}  }
class C{  @Override public void onRequestInitiated(int code){  if (code == ConnectAPI.LOGIN_CODE) {    email.setClickable(false);    password.setClickable(false);  }}  }
class C{  @Override public IBinder onBind(Intent arg0){  return mBinder;}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  @Override protected Expression generateExpression(){  return getFilterFactory().literal(getBooleanValue());}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  propertyPanel.dataSourceLoaded(dataSource);  expressionPanel.dataSourceLoaded(dataSource);}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  protected void onInitialized(ActivitiEvent event){}  }
class C{  private boolean checkCameraHardware(Context context){  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    return true;  } else   if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)) {    return true;  } else   if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY)) {    return true;  } else {    return false;  }}  }
class C{  public void pasteComponentByContextMenu(){  final int componentsCount=componentsCount();  wait.withTimeout(Timeouts.BIG).until(null,2);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void testGetQueryParamGreeting() throws Exception {  mvc.perform(MockMvcRequestBuilders.get("/hello?name=" + NAME)).andExpect(MockMvcResultMatchers.status().isOk()).andExpect(MockMvcResultMatchers.content().string("Hello " + NAME));}  }
class C{  public CompletableFuture<Void> clearBacklog(String cursorName){  log.info("[{}] Clearing backlog for cursor {} in the topic.",topic,cursorName);  PersistentSubscription sub=getPersistentSubscription(cursorName);  if (sub != null) {    return sub.clearBacklog();  }  PersistentReplicator repl=getPersistentReplicator(cursorName);  if (repl != null) {    return repl.clearBacklog();  }  return FutureUtil.failedFuture(new BrokerServiceException("Cursor not found"));}  }
class C{  @Override public void addErrorMessage(String errorMessage){  textPane.setForeground(Color.RED);  textPane.append(errorMessage);  textPane.append("\n");}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_READ_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      pickFromGallery();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public Whitelist(int statusCode){  this.patterns=Collections.emptyList();  this.statusCode=statusCode;  this.enabled=true;}  }
class C{  @EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onBlockExplode(BlockExplodeEvent event){  List<Block> blocks=event.blockList();  if (blocks.isEmpty())   return;  BlockPos pos=plugin.blockPos(blocks.get(0));  ClaimedChunk chunk=plugin.mineCity.provideChunk(pos.getChunk());  for (Iterator<Block> iter=blocks.iterator(); iter.hasNext(); ) {    Block block=iter.next();    BlockPos blockPos=plugin.blockPos(pos,block);    ClaimedChunk claim=plugin.mineCity.provideChunk(blockPos.getChunk(),chunk);    if (claim.reserve || claim.owner instanceof Nature) {      if (blockPos.y >= 40)       iter.remove();    } else {      iter.remove();    }  }}  }
class C{  public static void mgc2mgc(double c1[],int m1,double a1,double g1,double c2[],int m2,double a2,double g2){  if (a1 == a2) {    gnorm(c1,c1,m1,g1);    gc2gc(c1,m1,g1,c2,m2,g2);    ignorm(c2,c2,m2,g2);  } else {    double a=(a2 - a1) / (1 - a1 * a2);    freqt(c1,m1,c2,m2,a);    gnorm(c2,c2,m2,g1);    gc2gc(c2,m2,g1,c2,m2,g2);    ignorm(c2,c2,m2,g2);  }}  }
class C{  public void exceptionHandling(){  for (  ResourceDeclaration resource : getResourceList()) {    MethodDecl close=lookupClose(resource);    if (close == null)     continue;    for (    Access exception : close.getExceptionList()) {      TypeDecl exceptionType=exception.type();      if (!twrHandlesException(exceptionType))       error("automatic closing of resource " + resource.name() + " may raise the uncaught exception "+ exceptionType.fullName()+ "; "+ "it must be caught or declared as being thrown");    }  }}  }
class C{  public static String joinDash(String input){  String[] temp=input.split("-");  for (int i=1; i < temp.length; i++) {    temp[i]=upperCaseFirstChar(temp[i]);  }  return join(temp,"");}  }
class C{  public boolean isPingOptIn(){  if (StatisticsUploadAssistant.isSendAllowed()) {    return true;  }  PreferenceStore prefs=getPreferenceStore();synchronized (DdmsPreferenceStore.class) {    return prefs != null && prefs.contains(PING_OPT_IN);  }}  }
class C{  protected void flowThrough(Object in,Unit s,List fallOut,List branchOuts){  FlowSet fin=((FlowSet)in).clone();  if (fin.isEmpty())   return;  Pair pair=processDefinitionStmt(s);  if (pair != null)   fin.add(pair);  if (!s.branches() && s.fallsThrough()) {    Iterator fallOutIt=fallOut.iterator();    while (fallOutIt.hasNext()) {      FlowSet fallSet=(FlowSet)fallOutIt.next();      fallSet.union(fin);    }    return;  }  boolean conservative=true;  boolean fall=false;  boolean branch=false;  FlowSet oneBranch=null;  IFSTMT: {    if (s instanceof IfStmt) {      IfStmt ifStmt=(IfStmt)s;      Value cond=ifStmt.getCondition();      Constant constant=SEvaluator.getFuzzyConstantValueOf(cond,localToConstant);      if (constant instanceof BottomConstant) {        deadStmts.remove(ifStmt);        stmtToReplacement.remove(ifStmt);        break IFSTMT;      }      if (constant instanceof TopConstant)       return;      conservative=false;      Constant trueC=IntConstant.v(1);      Constant falseC=IntConstant.v(0);      if (constant.equals(trueC)) {        branch=true;        GotoStmt gotoStmt=Jimple.v().newGotoStmt(ifStmt.getTargetBox());        stmtToReplacement.put(ifStmt,gotoStmt);      }      if (constant.equals(falseC)) {        fall=true;        deadStmts.add(ifStmt);      }    }  }  TABLESWITCHSTMT: {    if (s instanceof TableSwitchStmt) {      TableSwitchStmt table=(TableSwitchStmt)s;      Value keyV=table.getKey();      Constant keyC=SEvaluator.getFuzzyConstantValueOf(keyV,localToConstant);      if (keyC instanceof BottomConstant) {        stmtToReplacement.remove(table);        break TABLESWITCHSTMT;      }      if (keyC instanceof TopConstant)       return;      if (!(keyC instanceof IntConstant))       break TABLESWITCHSTMT;      conservative=false;      int key=((IntConstant)keyC).value;      int low=table.getLowIndex();      int high=table.getHighIndex();      int index=key - low;      UnitBox branchBox=null;      if (index < 0 || index > high)       branchBox=table.getDefaultTargetBox(); else       branchBox=table.getTargetBox(index);      GotoStmt gotoStmt=Jimple.v().newGotoStmt(branchBox);      stmtToReplacement.put(table,gotoStmt);      List unitBoxes=table.getUnitBoxes();      int setIndex=unitBoxes.indexOf(branchBox);      oneBranch=(FlowSet)branchOuts.get(setIndex);    }  }  LOOKUPSWITCHSTMT: {    if (s instanceof LookupSwitchStmt) {      LookupSwitchStmt lookup=(LookupSwitchStmt)s;      Value keyV=lookup.getKey();      Constant keyC=SEvaluator.getFuzzyConstantValueOf(keyV,localToConstant);      if (keyC instanceof BottomConstant) {        stmtToReplacement.remove(lookup);        break LOOKUPSWITCHSTMT;      }      if (keyC instanceof TopConstant)       return;      if (!(keyC instanceof IntConstant))       break LOOKUPSWITCHSTMT;      conservative=false;      int index=lookup.getLookupValues().indexOf(keyC);      UnitBox branchBox=null;      if (index == -1)       branchBox=lookup.getDefaultTargetBox(); else       branchBox=lookup.getTargetBox(index);      GotoStmt gotoStmt=Jimple.v().newGotoStmt(branchBox);      stmtToReplacement.put(lookup,gotoStmt);      List unitBoxes=lookup.getUnitBoxes();      int setIndex=unitBoxes.indexOf(branchBox);      oneBranch=(FlowSet)branchOuts.get(setIndex);    }  }  if (conservative) {    fall=s.fallsThrough();    branch=s.branches();  }  if (fall) {    Iterator fallOutIt=fallOut.iterator();    while (fallOutIt.hasNext()) {      FlowSet fallSet=(FlowSet)fallOutIt.next();      fallSet.union(fin);    }  }  if (branch) {    Iterator branchOutsIt=branchOuts.iterator();    while (branchOutsIt.hasNext()) {      FlowSet branchSet=(FlowSet)branchOutsIt.next();      branchSet.union(fin);    }  }  if (oneBranch != null) {    oneBranch.union(fin);  }}  }
class C{  @Override public int compareTo(StyleWrapper o){  if (o == null) {    return -1;  }  String s1=this.workspace + this.style;  String s2=o.workspace + o.style;  return s1.compareTo(s2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200409,num0,skillname);}  }
class C{  public boolean containsValue(V value){  if (value == null)   return false;  for (  Map<C,V> row : dataMap.values()) {    if (row.containsValue(value))     return true;  }  return false;}  }
class C{  public static final int binarySearch(int[] a,int key,int length){  int x1=0;  int x2=length;  int i=x2 / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public FaveRemoveUserQuery removeUser(UserActor actor,int userId){  return new FaveRemoveUserQuery(getClient(),actor,userId);}  }
class C{  public Builder hideKeyboard(boolean hideKeyboard){  this.hideKeyboard=hideKeyboard;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FATIGUE_UPGRADE_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400464,value0);}  }
class C{  public Pair<Integer,List<Long>> next(){  try {    classesProcessed++;    Integer key=iterator.next();    long pos=classificationBlockRMA2.getPos(key);    int count=classificationBlockRMA2.getSum(key);    classDumpReader.seek(pos);    List<Long> list=new LinkedList<>();    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());    return new Pair<>(key,list);  } catch (  Exception e) {    Basic.caught(e);    error=true;    return null;  }}  }
class C{  public boolean isChromeLocationSettingEnabled(){  return PrefServiceBridge.getInstance().isAllowLocationEnabled();}  }
class C{  @Override public void addField(DataSourceFieldInterface dataSourceField){}  }
class C{  public boolean isApplicable(){  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getChildCount(remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot()) > 0;}  }
class C{  protected PagesClearCacheQuery url(String value){  return unsafeParam("url",value);}  }
class C{  public static boolean isPositiveInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    long temp=Long.parseLong(s);    if (temp > 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public void disconnectAll(){  for (  final MqttAsyncConnection connection : getMqttConnections()) {    disconnectFromBroker(connection);  }}  }
class C{  public ClusterInfo(String schema,Integer instanceId,Integer backupId,Integer numberOfInstances,Integer numberOfBackups){  this.schema=schema;  this.instanceId=instanceId;  this.backupId=backupId;  this.numberOfInstances=numberOfInstances;  this.numberOfBackups=numberOfBackups;}  }
class C{  public StaticScript routing(Object routing){  this.routing=routing;  return this;}  }
class C{  public IAssignmentAlgorithm createAssignmentAlgorithm(){  return new AssignmentUsingWeightedLCA(cName,refId2weight,ref2weight,taxId2SpeciesId,percentToCover,useIdentityFilter);}  }
class C{  private void removeLease(long leaseId){  if (this.keepAlives.containsKey(leaseId)) {    this.keepAlives.remove(leaseId);  }}  }
class C{  private void internal_populateDoubleField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Double value=Double.valueOf(storedValue);    fieldConfigVisitor.populateDoubleField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public boolean update(long elapsedTime){  this.frames++;  this.time+=elapsedTime;  if (this.time >= Fps.ONE_SECOND_IN_NANOSECONDS) {synchronized (this) {      this.fps=this.frames * Fps.ONE_SECOND_IN_NANOSECONDS / this.time;    }    this.frames=0;    this.time=0;    return true;  }  return false;}  }
class C{  public void copy(final File path,final CopyFlags... flags){  requireNonNull(path);  if (!path.exists()) {    throw new InvalidCopyDestination("Path must exist");  }  if (!path.isDirectory()) {    throw new InvalidCopyDestination("Path must be a directory");  }  final String[] files=path.list();  if (files != null && files.length > 0) {    throw new InvalidCopyDestination("Path must contain no files");  }  final int flagsMask=mask(flags);  checkRc(LIB.mdb_env_copy2(ptr,path.getAbsolutePath(),flagsMask));}  }
class C{  public static RefType v(SootClass c){  return v(c.getName());}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  startParameterEntity("[dtd]",null,null,augs);}  }
class C{  protected boolean isPanelEnabled(GroupIdEnum groupId){  boolean isEnabled=false;  GroupConfigInterface group=getGroup(groupId);  if (group != null) {    isEnabled=group.isPanelEnabled();  }  return isEnabled;}  }
class C{  public void encoding(){  outputRes();  rdp_encoding();}  }
class C{  public static void equals(final AlarmCacheObject alarm1,final AlarmCacheObject alarm2){  assertEquals(alarm1.getId(),alarm2.getId());  assertEquals(alarm1.getTagId(),alarm2.getTagId());  assertEquals(alarm1.getFaultCode(),alarm2.getFaultCode());  assertEquals(alarm1.getFaultFamily(),alarm2.getFaultFamily());  assertEquals(alarm1.getFaultMember(),alarm2.getFaultMember());  assertEquals(alarm1.getState(),alarm2.getState());  assertEquals(alarm1.getInfo(),alarm2.getInfo());  assertEquals(alarm1.getCondition(),alarm2.getCondition());  assertEquals(alarm1.getTimestamp(),alarm2.getTimestamp());  assertEquals(alarm1.isPublished(),alarm2.isPublished());  if (alarm1.getLastPublication() != null) {    assertEquals(alarm1.getLastPublication().getState(),alarm2.getLastPublication().getState());    assertEquals(alarm1.getLastPublication().getInfo(),alarm2.getLastPublication().getInfo());    assertEquals(alarm1.getLastPublication().getPublicationTime(),alarm2.getLastPublication().getPublicationTime());  }}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>endParameterEntity: " + name);  }  fBaseURIStack.pop();}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new BinomialDistribution(10,0.70);}  }
class C{  public int min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  int min=Integer.MAX_VALUE;  for (int i=0; i < _pos; i++) {    if (_data[i] < min) {      min=_data[i];    }  }  return min;}  }
class C{  public void notifyDataSetChanged(){  calcMinMax();}  }
class C{  @Subscribe(sticky=true,threadMode=ThreadMode.MAIN) public void onEventMainThread(MediaEvent event){  RTEditText editor=mEditors.get(mActiveEditor);  RTMedia media=event.getMedia();  if (editor != null && media instanceof RTImage) {    insertImage(editor,(RTImage)media);    EventBus.getDefault().removeStickyEvent(event);  }}  }
class C{  public boolean isRasterSymbol(){  return rasterSymbol;}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  public static final String readString(byte[] bytes,String charset) throws IOException {  return readString(bytes,0,bytes.length,Charset.forName(charset));}  }
class C{  public static long multiplyExact(final long a,final long b){  if (((b > 0l) && (a > Long.MAX_VALUE / b || a < Long.MIN_VALUE / b)) || ((b < -1l) && (a > Long.MIN_VALUE / b || a < Long.MAX_VALUE / b)) || ((b == -1l) && (a == Long.MIN_VALUE))) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_MULTIPLICATION,a,b);  }  return a * b;}  }
class C{  private static int probe(final int perturb,final int j){  return (j << 2) + j + perturb+ 1;}  }
class C{  public static <K,R>Flowable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends Publisher<? extends R>> mapOfCases){  return switchCase(caseSelector,mapOfCases,Flowable.<R>empty());}  }
class C{  public boolean isApplicable(){  final ChartViewer viewer=(ChartViewer)getViewer();  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;}  }
class C{  public synchronized void removeFrameSavedListener(FrameSavedListener listener){  listenerList.remove(FrameSavedListener.class,listener);}  }
class C{  public static void kickOffReading(Context context){  if (sIsReadingAttempted)   return;  sIsReadingAttempted=true;  PartnerBookmarksReader reader=new PartnerBookmarksReader(context);  if ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_SYSTEM) == 0) {    reader.onBookmarksRead();    return;  }  reader.readBookmarks();}  }
class C{  private long nextID(){  return _idGens[(int)Thread.currentThread().getId() % IDSIZE].getNum();}  }
class C{  public void stackEntered(long time,boolean focused){  boolean finishImmediately=!focused;  mSpacing=computeSpacing(mStackTabs != null ? mStackTabs.length : 0);  resetAllScrollOffset();  startAnimation(time,OverviewAnimationType.ENTER_STACK,finishImmediately);}  }
class C{  public final TestSubscriber<T> assertTerminated(){  if (cdl.getCount() != 0) {    throw new AssertionError("Not terminated",null);  }  return this;}  }
class C{  public static List<String> tokenize(String str,String delim){  return tokenize(str,delim,true);}  }
class C{  public ResizeHandle findResizeHandle(float x,float y,ViewTransform transform){  for (  Selection.Element element : mSelection.getElements()) {    ConstraintWidget widget=element.widget;    ResizeHandle handle=findResizeHandleInWidget(widget,x,y,transform);    if (handle != null) {      return handle;    }  }  for (  ConstraintWidget widget : mWidgets.values()) {    if (widget.isRootContainer()) {      continue;    }    ResizeHandle handle=findResizeHandleInWidget(widget,x,y,transform);    if (handle != null) {      return handle;    }  }  return null;}  }
class C{  public void update(String url,int securityLevel){  URI uri=createURI(url);  updateSecurityIcon(securityLevel);  updateDisplayedUrl(url,uri);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void loadFields(OpenJPAStateManager sm,IEntryPacket entry,FieldMetaData[] fms){  int spacePropertyIndex=-1;  for (int i=0; i < fms.length; i++) {    if (fms[i].isVersion())     continue;    spacePropertyIndex++;    if (fms[i].isPrimaryKey() || sm.getLoaded().get(fms[i].getIndex()))     continue;    Integer associationType=_classesRelationStatus.get(fms[i].getElement().getDeclaredType());    if (associationType != null)     fms[i].setAssociationType(associationType);    if (fms[i].getAssociationType() == FieldMetaData.ONE_TO_ONE) {      sm.store(i,entry.getFieldValue(spacePropertyIndex));      sm.getLoaded().set(fms[i].getIndex(),false);    } else     if (fms[i].getAssociationType() == FieldMetaData.ONE_TO_MANY) {      sm.store(i,entry.getFieldValue(spacePropertyIndex));      sm.getLoaded().set(fms[i].getIndex(),false);    } else     if (fms[i].isEmbeddedPC()) {      loadEmbeddedObject(fms[i],sm,entry.getFieldValue(spacePropertyIndex));    } else {      sm.store(i,entry.getFieldValue(spacePropertyIndex));    }  }  sm.setVersion(entry.getVersion());  ((StateManager)sm).resetClearedState();}  }
class C{  public OpenMapRealMatrix(int rowDimension,int columnDimension) throws MathIllegalArgumentException {  super(rowDimension,columnDimension);  long lRow=rowDimension;  long lCol=columnDimension;  if (lRow * lCol >= Integer.MAX_VALUE) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,lRow * lCol,Integer.MAX_VALUE);  }  this.rows=rowDimension;  this.columns=columnDimension;  this.entries=new OpenIntToDoubleHashMap(0.0);}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public BigReal(String val,MathContext mc){  d=new BigDecimal(val,mc);}  }
class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  public boolean isActivePublication(){  return state != null && state.equals(AlarmCondition.ACTIVE);}  }
class C{  public void success(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ITEM_COLOR_CHANGE_ERROR_CANNOTDYE(String value0){  return new SM_SYSTEM_MESSAGE(1300512,value0);}  }
class C{  public static Application createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Application.class);}  }
class C{  public GroupsIsMemberQueryWithExtended(VkApiClient client,UserActor actor,String groupId){  super(client,"groups.isMember",IsMemberExtendedResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  extended(true);}  }
class C{  public synchronized void close(){  if (currentClip != null) {    currentClip.drain();    if (drainDelay > 0L) {      try {        Thread.sleep(drainDelay);      } catch (      InterruptedException e) {      }    }    currentClip.close();  }  notifyAll();}  }
class C{  public static InetSocketAddress createMapAddress(Map map) throws MessageException {  if (!map.containsKey(PORT) || !map.containsKey(ADDRESS))   throw new MessageException("Invalid address map");  int port=(int)(long)map.get(PORT);  String address=(String)map.get(ADDRESS);  return new InetSocketAddress(address,port);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public IsLikeExtended(Expression expr,String pattern,String wildcardMulti,String wildcardSingle,String escape,boolean matchCase){  super(expr,pattern,wildcardMulti,wildcardSingle,escape);  setMatchCase(matchCase);}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public static void toXml(Object obj,OutputStream output){  xstream.toXML(obj,output);}  }
class C{  public void stepStart(LoadableComponentContext context){  String info=produceLoadableComponentInfo(context.getConditionContext());  LOG.debug("Started lodable component condition evaluation: " + info);  progressData.add(new ConditionProgressStep(info));}  }
class C{  private AbstractEntryReplicaData buildEntryReplicaData(IEntryHolder entry,ISynchronizationCallback syncCallback){  while (entry != null) {    XtnEntry wlXtn=entry.getWriteLockOwner();    boolean locked=acquireTransactionLock(entry,wlXtn);    ILockObject entryLock=_engine.getCacheManager().getLockManager().getLockObject(entry);    try {synchronized (entryLock) {        IEntryPacket entryPacket=getEntryPacketSafely(entry,wlXtn,locked);        if (entryPacket == null)         return null;        AbstractEntryReplicaData data=newEntryReplicaData(entryPacket);        boolean duplicateUid=syncCallback.synchronizationDataGenerated(data);        if (duplicateUid)         return null;        return data;      }    } catch (    TransactionConflictException e) {      entry=handleTransactionConflict(entry);    } finally {      _engine.getCacheManager().getLockManager().freeLockObject(entryLock);      releaseTransactionLock(wlXtn,locked);    }  }  return null;}  }
class C{  private int[] makeDefStateList(){  int[] retArray=new int[fElemMapSize];  for (int index=0; index < fElemMapSize; index++)   retArray[index]=-1;  return retArray;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200666,skillcaster,skillname);}  }
class C{  public final void fileNotReachable(final boolean alarmUp,final File file){  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {    ArrayList recipients=new ArrayList();    MailDetailsBean mailDetails=new MailDetailsBean();    mailDetails.setSender("mruizgar@cern.ch");    recipients.add("mruizgar@cern.ch");    mailDetails.setToRecipients(recipients);    mailDetails.setSubject("File not reachable");    mailDetails.setServer("cernmx.cern.ch");    mailDetails.setMessage("The file " + file.getAbsolutePath() + " could not be reached");    SMTPMailSender mailSender=new SMTPMailSender();    try {      mailSender.sendMail(mailDetails);    } catch (    MailSenderException e) {      LOG.debug(e.getMessage());    }  }}  }
class C{  public BigReal(BigInteger unscaledVal,int scale,MathContext mc){  d=new BigDecimal(unscaledVal,scale,mc);}  }
class C{  @Override protected void synchronizeChildren(){  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  ownerDocument.synchronizeChildren(this,fNodeIndex);}  }
class C{  protected String renderHighlight(JSONArray hit){  StringBuilder sb=new StringBuilder();  for (  Object o : hit) {    if (sb.length() != 0) {      sb.append("...");    }    sb.append(renderSingleHighlight(getArray(o,"parts")));  }  return sb.toString();}  }
class C{  @Override public int read() throws IOException {  int c=in.read();  if (c == -1)   return -1;  if ((c & ~0xff) != 0) {    System.out.println("MD5InputStream.read() got character with (c & ~0xff) != 0)!");  } else {    md5.Update(c);  }  return c;}  }
class C{  public void cancelCast(){  isCancelled=true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_BLOCK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1220219,value0,value1);}  }
class C{  public String replaceTrickyPhones(String lab){  String s=lab;  if (trickyPhones.containsKey(lab)) {    s=trickyPhones.get(lab);  }  return s;}  }
class C{  public static String join(List l){  return join(l," ");}  }
class C{  private boolean isNullableCoreType(HashSet<String> resolvedTypesSet){  if (resolvedTypesSet.size() != 2 || !resolvedTypesSet.contains(Types.strNull)) {    return false;  }  return resolvedTypesSet.contains(Types.strInteger) || resolvedTypesSet.contains(Types.strFloat) || resolvedTypesSet.contains(Types.strResource);}  }
class C{  public AxisLayout(String group,String field,int axis){  this(group,field);  setAxis(axis);}  }
class C{  public static TapTarget forBounds(Rect bounds,CharSequence title){  return forBounds(bounds,title,null);}  }
class C{  public SelectorElementLocator(SearchContext searchContext,By selector){  this.searchContext=searchContext;  this.selector=selector;}  }
class C{  public static boolean verifyFileMd5(File file,String md5){  if (md5 == null) {    return false;  }  String fileMd5=getMD5(file);  if (fileMd5 == null) {    return false;  }  return md5.equals(fileMd5);}  }
class C{  public boolean isReadOnly(){  return !(isDataPersister() || isBulkDataPersister());}  }
class C{  public static int handle(Entity entity,int previousDimension,int newDimension){  final EntityEvent.ChangeDimension event=new EntityEvent.ChangeDimension(entity,previousDimension,newDimension);  OpenModLoader.getEventBus().post(event);  return event.isCanceled() ? event.previousDimension : event.newDimension;}  }
class C{  public boolean hasPrevious(){  try {    if (resultSet.isFirst() || resultSet.isBeforeFirst()) {      return false;    } else {      if (!haveMadeValue && !resultSet.isAfterLast() && !resultSet.isLast()) {        return false;      } else {        return true;      }    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error while checking to see if this is the first result",e);  }}  }
class C{  private void retryBadNics(){  if (retryNics == null)   return;  if (!retryNics.isEmpty()) {    String recoveredStr="network interface has recovered " + "from previous failure: {0}";    ArrayList tmpList=(ArrayList)retryNics.clone();    retryNics.clear();    for (int i=0; i < tmpList.size(); i++) {      NetworkInterface nic=(NetworkInterface)tmpList.get(i);      try {        sock.setNetworkInterface(nic);        sock.joinGroup(Constants.getAnnouncementAddress());        if (nicsToUse == NICS_USE_LIST) {          logger.log(Level.INFO,recoveredStr,nic);        } else {          logger.log(Level.FINE,recoveredStr,nic);        }      } catch (      IOException e1) {        retryNics.add(nic);      }    }    if (retryNics.isEmpty())     retryNics=null;  } else {    try {      sock.joinGroup(Constants.getAnnouncementAddress());      retryNics=null;      logger.log(Level.INFO,"system default network " + "interface has recovered from " + "previous failure");    } catch (    IOException e1) {    }  }}  }
class C{  private void updateStatusBar(){  SampleAttributeTable sampleAttributeTable=doc.getSampleAttributeTable();  String message="Samples=" + sampleAttributeTable.getNumberOfSamples();  message+=" Attributes=" + sampleAttributeTable.getNumberOfUnhiddenAttributes();  if (getSamplesTable().getNumberOfSelectedSamples() > 0 || getSamplesTable().getNumberOfSelectedCols() > 0) {    message+=" (Selection: " + getSamplesTable().getNumberOfSelectedSamples() + " samples, "+ getSamplesTable().getNumberOfSelectedCols()+ " attributes)";  }  statusbar.setText2(message);}  }
class C{  public static final void fillRectangleFromTopLeft(GL2 gl,double sx,double sy,double w,double h){  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + w,sy);  gl.glVertex2d(sx + w,sy - h);  gl.glVertex2d(sx,sy - h);  gl.glEnd();}  }
class C{  public IntegratedParserConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public static <T extends Collection<? super String>>T copyPartialMatches(final String token,final Iterable<String> originals,final T collection) throws UnsupportedOperationException, IllegalArgumentException {  Validate.notNull(token,"Search token cannot be null");  Validate.notNull(collection,"Collection cannot be null");  Validate.notNull(originals,"Originals cannot be null");  for (  String string : originals) {    if (startsWithIgnoreCase(string,token)) {      collection.add(string);    }  }  return collection;}  }
class C{  protected void configurePipeline(){  if (fCurrentDVFactory != fDatatypeValidatorFactory) {    fCurrentDVFactory=fDatatypeValidatorFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fDTDScanner) {    fCurrentDTDScanner=fDTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fDTDProcessor);  }  fDTDScanner.setDTDHandler(fDTDProcessor);  fDTDProcessor.setDTDSource(fDTDScanner);  fDTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fDTDProcessor);  }  fDTDScanner.setDTDContentModelHandler(fDTDProcessor);  fDTDProcessor.setDTDContentModelSource(fDTDScanner);  fDTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fDTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fNamespaceScanner) {      fCurrentScanner=fNamespaceScanner;      setProperty(DOCUMENT_SCANNER,fNamespaceScanner);      setProperty(DTD_VALIDATOR,fDTDValidator);    }    fNamespaceScanner.setDTDValidator(fDTDValidator);    fNamespaceScanner.setDocumentHandler(fDTDValidator);    fDTDValidator.setDocumentSource(fNamespaceScanner);    fDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fDTDValidator);    }    fLastComponent=fDTDValidator;  } else {    if (fNonNSScanner == null) {      fNonNSScanner=new XMLDocumentScannerImpl();      fNonNSDTDValidator=new XMLDTDValidator();      addComponent(fNonNSScanner);      addComponent(fNonNSDTDValidator);    }    if (fCurrentScanner != fNonNSScanner) {      fCurrentScanner=fNonNSScanner;      setProperty(DOCUMENT_SCANNER,fNonNSScanner);      setProperty(DTD_VALIDATOR,fNonNSDTDValidator);    }    fNonNSScanner.setDocumentHandler(fNonNSDTDValidator);    fNonNSDTDValidator.setDocumentSource(fNonNSScanner);    fNonNSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fNonNSDTDValidator);    }    fLastComponent=fNonNSDTDValidator;  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      setProperty(SCHEMA_VALIDATOR,fSchemaValidator);      addCommonComponent(fSchemaValidator);      fSchemaValidator.reset(this);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public void invokeMenuPath(@NotNull String... path){  getMenuFixture().invokeMenuPath(path);}  }
class C{  public void clear(){  fPublicId=null;  fLiteralSystemId=null;  fBaseSystemId=null;  fExpandedSystemId=null;  fNamespace=null;}  }
class C{  public final boolean isEmpty(){  return getHotkeys().isEmpty() && getMouseGestures().isEmpty();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void updateSelectedPerspective(final SpyPerspective selectedPerspective){switch (selectedPerspective) {case BASIC:    basicPerspective.setSelected(true);  break;case DETAILED:detailedPerspective.setSelected(true);break;case SPY:spyPerspective.setSelected(true);break;case SUPER_SPY:superSpyPerspective.setSelected(true);break;default :defaultPerspective.setSelected(true);break;}eventBus.publish(new NewPerspectiveSelectedEvent(selectedPerspective));}  }
class C{  public AlarmSourceHardwareAddressImpl(String faultFamily,String faultMember,int faultCode) throws ConfigurationException {  setFaultFamily(faultFamily);  setFaultMember(faultMember);  setFaultCode(faultCode);}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  @Override public Node cloneNode(boolean deep){  ElementImpl newnode=(ElementImpl)super.cloneNode(deep);  if (attributes != null) {    newnode.attributes=(AttributeMap)attributes.cloneMap(newnode);  }  return newnode;}  }
class C{  public static String meaningToString(Object oWd){  String sRes="";  if ((oWd == null) || !(oWd instanceof WordDefinition))   return sRes;  WordDefinition wd=(WordDefinition)oWd;  for (  Definition dDef : wd.getDefinitions().getDefinition()) {    sRes+=dDef.getWordDefinition() + "\n";  }  return sRes;}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  meta=(CarbonSliceMergerStepMeta)smi;  data=(CarbonSliceMergerStepData)sdi;  super.dispose(smi,sdi);}  }
class C{  public void start(){  this.last=System.nanoTime();  Animator animator=new Animator(this.canvas);  animator.setRunAsFastAsPossible(true);  animator.start();}  }
class C{  public static String toHexString(String str){  if (TextUtils.isEmpty(str))   return "";  StringBuilder buffer=new StringBuilder();  byte[] bytes=str.getBytes();  for (  byte aByte : bytes) {    buffer.append(Integer.toHexString(Integer.valueOf(0xFF & aByte).intValue()));    buffer.append(" ");  }  return buffer.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200649,skillcaster,skillname);}  }
