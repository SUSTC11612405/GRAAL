class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  @CalledByNative InfoBar showConfirmInfoBar(WindowAndroid windowAndroid,int enumeratedIconId,Bitmap iconBitmap,String message,String linkText,String buttonOk,String buttonCancel,int[] contentSettings){  int drawableId=ResourceId.mapToDrawableId(enumeratedIconId);  ConfirmInfoBar infoBar=new ConfirmInfoBar(null,drawableId,iconBitmap,message,linkText,buttonOk,buttonCancel);  infoBar.setContentSettings(windowAndroid,contentSettings);  return infoBar;}  }
class C{  public static void arraycopy64Bit(Object src,int srcIdx,Object dst,int dstIdx,int len){  Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_DOUBLE);  Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_DOUBLE);  int copyBytes=len << LOG_BYTES_IN_DOUBLE;  aligned64Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),copyBytes);}  }
class C{  public DtoCarrierServiceImpl(final GenericService<Carrier> carrierGenericService,final GenericDAO<Shop,Long> shopDao,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,carrierGenericService,adaptersRepository);  this.shopDao=shopDao;  shopAssembler=DTOAssembler.newAssembler(ShopDTOImpl.class,Shop.class);}  }
class C{  public FilePath(String path){  path=path.trim();  if (path.startsWith("/"))   absolute=true; else   absolute=false;  append(path);}  }
class C{  protected static void addTriangleNormal(int a,int b,int c,FloatBuffer vertices,FloatBuffer normals){  vertices.position(a);  float ax=vertices.get();  float ay=vertices.get();  float az=vertices.get();  vertices.position(b);  float bx=vertices.get();  float by=vertices.get();  float bz=vertices.get();  vertices.position(c);  float cx=vertices.get();  float cy=vertices.get();  float cz=vertices.get();  float x=((by - ay) * (cz - az)) - ((bz - az) * (cy - ay));  float y=((bz - az) * (cx - ax)) - ((bx - ax) * (cz - az));  float z=((bx - ax) * (cy - ay)) - ((by - ay) * (cx - ax));  float length=(x * x) + (y * y) + (z * z);  if (length > 0d) {    length=(float)Math.sqrt(length);    x/=length;    y/=length;    z/=length;  }  normals.position(a);  float nx=normals.get();  float ny=normals.get();  float nz=normals.get();  normals.position(a);  normals.put(nx + x);  normals.put(ny + y);  normals.put(nz + z);  normals.position(b);  nx=normals.get();  ny=normals.get();  nz=normals.get();  normals.position(b);  normals.put(nx + x);  normals.put(ny + y);  normals.put(nz + z);  normals.position(c);  nx=normals.get();  ny=normals.get();  nz=normals.get();  normals.position(c);  normals.put(nx + x);  normals.put(ny + y);  normals.put(nz + z);}  }
class C{  public void resume() throws DebugException {  try {    m_debugger.resume();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z > minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isPortrait(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;}  }
class C{  public synchronized boolean end(CnATreeElement o){  if (!o.equals(initiator)) {    return false;  }  visited=new HashSet<CnATreeElement>();  initiator=null;  aborted=false;  return true;}  }
class C{  private static int selectColor(double baseScore,double targetScore){  double res=calculateSpeedupPercentage(baseScore,targetScore);  if (res < -10) {    return 2;  } else   if (res > 10) {    return 0;  } else {    return 1;  }}  }
class C{  public boolean canBeShortAddress(int address){  return (address <= 127);}  }
class C{  public CellTable(int[] dims){  this.table=new MultiDimIntTable(dims);}  }
class C{  public static int compare(List<String> list1,List<String> list2){  if ((null != list1) && (null != list2)) {    int i=0;    int listSize1=list1.size();    int listSize2=list2.size();    while ((i < listSize1) && (i < listSize2)) {      int result=ObjectUtils.compare(list1.get(i),list2.get(i));      if (0 != result) {        return result;      }      i++;    }    return listSize1 - listSize2;  } else   if (null != list1) {    return 1;  } else   if (null != list2) {    return -1;  } else {    return 0;  }}  }
class C{  public Unary createUnary(){  UnaryImpl unary=new UnaryImpl();  return unary;}  }
class C{  protected String doIt() throws Exception {  String[] tables=new String[]{"AD_Window_Access","AD_Process_Access","AD_Form_Access","AD_Workflow_Access","AD_Task_Access","AD_Document_Action_Access",I_AD_Role_Included.Table_Name};  String[] keycolumns=new String[]{"AD_Window_ID","AD_Process_ID","AD_Form_ID","AD_Workflow_ID","AD_Task_ID","C_DocType_ID, AD_Ref_List_ID",I_AD_Role_Included.COLUMNNAME_Included_Role_ID};  int action=0;  for (int i=0; i < tables.length; i++) {    String table=tables[i];    String keycolumn=keycolumns[i];    String sql="DELETE FROM " + table + " WHERE AD_Role_ID = "+ m_AD_Role_ID_To;    int no=DB.executeUpdateEx(sql,get_TrxName());    addLog(action++,null,BigDecimal.valueOf(no),"Old records deleted from " + table);    final boolean column_IsReadWrite=!table.equals("AD_Document_Action_Access") && !table.equals(I_AD_Role_Included.Table_Name);    final boolean column_SeqNo=table.equals(I_AD_Role_Included.Table_Name);    sql="INSERT INTO " + table + " (AD_Client_ID, AD_Org_ID, Created, CreatedBy, Updated, UpdatedBy, "+ "AD_Role_ID, "+ keycolumn+ ", isActive";    if (column_SeqNo)     sql+=", SeqNo ";    if (column_IsReadWrite)     sql+=", isReadWrite) "; else     sql+=") ";    sql+="SELECT " + m_AD_Client_ID + ", "+ m_AD_Org_ID+ ", getdate(), "+ Env.getAD_User_ID(Env.getCtx())+ ", getdate(), "+ Env.getAD_User_ID(Env.getCtx())+ ", "+ m_AD_Role_ID_To+ ", "+ keycolumn+ ", IsActive ";    if (column_SeqNo)     sql+=", SeqNo ";    if (column_IsReadWrite)     sql+=", isReadWrite ";    sql+="FROM " + table + " WHERE AD_Role_ID = "+ m_AD_Role_ID_From;    no=DB.executeUpdateEx(sql,get_TrxName());    addLog(action++,null,new BigDecimal(no),"New records inserted into " + table);  }  return "Role copied";}  }
class C{  public synchronized void addChartListener(ChartListener cl){  m_listeners.addElement(cl);}  }
class C{  public void clearSymbolTable(){  symbolTable.removeAll();}  }
class C{  private void handleYarnContainerChange(String containerCountAsString) throws IOException, YarnException {  String applicationId=yarnUtil.getRunningAppId(jobName,jobID);  int containerCount=Integer.valueOf(containerCountAsString);  int currentNumTask=getCurrentNumTasks();  int currentNumContainers=getCurrentNumContainers();  if (containerCount == currentNumContainers) {    log.error("The new number of containers is equal to the current number of containers, skipping this message");    return;  }  if (containerCount <= 0) {    log.error("The number of containers cannot be zero or less, skipping this message");    return;  }  if (containerCount > currentNumTask) {    log.error("The number of containers cannot be more than the number of task, skipping this message");    return;  }  log.info("Killing the current job");  yarnUtil.killApplication(applicationId);  coordinatorServerURL=null;  try {    String state=yarnUtil.getApplicationState(applicationId);    Thread.sleep(1000);    int countSleep=1;    while (!state.equals("KILLED")) {      state=yarnUtil.getApplicationState(applicationId);      log.info("Job kill signal sent, but job not killed yet for " + applicationId + ". Sleeping for another 1000ms");      Thread.sleep(1000);      countSleep++;      if (countSleep > 10) {        throw new IllegalStateException("Job has not been killed after 10 attempts.");      }    }  } catch (  InterruptedException e) {    e.printStackTrace();  }  log.info("Killed the current job successfully");  log.info("Staring the job again");  skipUnreadMessages();  JobRunner jobRunner=new JobRunner(config);  jobRunner.run(false);}  }
class C{  public void killLoadsOfField(XField field){  if (!REDUNDANT_LOAD_ELIMINATION) {    return;  }  HashSet<AvailableLoad> killMe=new HashSet<AvailableLoad>();  for (  AvailableLoad availableLoad : getAvailableLoadMap().keySet()) {    if (availableLoad.getField().equals(field)) {      if (RLE_DEBUG) {        System.out.println("KILLING Load of " + availableLoad + " in "+ this);      }      killMe.add(availableLoad);    }  }  killAvailableLoads(killMe);}  }
class C{  public static boolean isEqualMethod(IMethodBinding method,String methodName,ITypeBinding[] parameters){  if (!method.getName().equals(methodName))   return false;  ITypeBinding[] methodParameters=method.getParameterTypes();  if (methodParameters.length != parameters.length)   return false;  for (int i=0; i < parameters.length; i++) {    if (!equals(methodParameters[i].getErasure(),parameters[i].getErasure()))     return false;  }  return true;}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  private Order reviseOrder(Order order,SimpleObject edits){  Order newOrder=order.cloneForRevision();  boolean changed=populateFromJson(newOrder,edits);  if (!changed) {    return null;  }  populateDefaultsForAllOrders(newOrder);  if (orderHasExpired(order)) {    newOrder.setAction(Order.Action.NEW);  }  return newOrder;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  public JsonNewUser(String givenName,String familyName){  this();  this.givenName=givenName;  this.familyName=familyName;}  }
class C{  public void assertDurationIsInRange(long expectedMillis){  long minimum=(long)((double)expectedMillis * 0.90);  long maximum=Math.max((long)((double)expectedMillis * 1.10),10);  long waitMillis=Math.max(expectedMillis * 10,10);  long duration=getDurationMillis(waitMillis);  if (duration < minimum) {    Assert.fail("expected duration: " + expectedMillis + " minimum duration: "+ minimum+ " actual duration too short: "+ duration);  } else   if (duration > maximum) {    Assert.fail("expected duration: " + expectedMillis + " maximum duration: "+ maximum+ " actual duration too long: "+ duration);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String reclassFile=null;  int row, col;  float progress=0;  double z, val;  int i;  double noData;  boolean assignMode=false;  boolean assignModeFound=false;  boolean delimiterFound=false;  double[][] reclassData=new double[0][0];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassFile=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null) || (reclassFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int numClasses=countLines(reclassFile);    DataInputStream in=null;    BufferedReader br=null;    try {      FileInputStream fstream=new FileInputStream(reclassFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      if (reclassFile != null) {        String line;        String[] str;        if (!assignMode) {          reclassData=new double[3][numClasses];        } else {          reclassData=new double[2][numClasses];        }        i=0;        while ((line=br.readLine().trim()) != null) {          str=line.split(delimiter);          if (!delimiterFound) {            if (str.length < 2) {              delimiter=",";              str=line.split(delimiter);              if (str.length < 2) {                delimiter=" ";                str=line.split(delimiter);                if (str.length < 2) {                  showFeedback("No recognizable delimiter in text file. Columns must " + "be seperated by tabs, commas, or spaces.");                  return;                } else {                  delimiterFound=true;                }              } else {                delimiterFound=true;              }            } else {              delimiterFound=true;            }          }          if (!assignModeFound) {            if (str.length == 2) {              assignMode=true;            } else {              assignMode=false;            }            assignModeFound=true;          }          if (!assignMode) {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);            reclassData[2][i]=Double.parseDouble(str[2]);          } else {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);          }          i++;        }        in.close();        br.close();      }    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      try {        if (in != null || br != null) {          in.close();          br.close();        }      } catch (      java.io.IOException ex) {      }    }    if (!assignMode) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z >= reclassData[1][i]) && (z < reclassData[2][i])) {                val=reclassData[0][i];                break;              }            }            if (val != noData) {              output.setValue(row,col,val);            } else {              output.setValue(row,col,z);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z == reclassData[1][i])) {                val=reclassData[0][i];                break;              }              if (val != noData) {                output.setValue(row,col,val);              } else {                output.setValue(row,col,z);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public UnsatisfiedLinkError(){  super();}  }
class C{  public Enumeration<String> packages(){  return m_Cache.keys();}  }
class C{  protected void performTest(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals((icopy.numAttributes()),result.numAttributes());  assertEquals(icopy.numInstances(),m_Instances.numInstances());}  }
class C{  public static int writeBox(byte[] b,int off,ESRIBoundingBox box){  int nBytes=writePoint(b,off,box.min);  nBytes+=writePoint(b,off + nBytes,box.max);  return nBytes;}  }
class C{  public DockNode(Node contents){  this(contents,null,null);}  }
class C{  public static URI toURI(String location) throws URISyntaxException {  return new URI(StringUtils.replace(location," ","%20"));}  }
class C{  private void validateSnapshotRestorable(SnapshotId snapshotId,Snapshot snapshot){  if (!snapshot.state().restorable()) {    throw new SnapshotRestoreException(snapshotId,"unsupported snapshot state [" + snapshot.state() + "]");  }  if (Version.CURRENT.before(snapshot.version())) {    throw new SnapshotRestoreException(snapshotId,"the snapshot was created with Elasticsearch version [" + snapshot.version() + "] which is higher than the version of this node ["+ Version.CURRENT+ "]");  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  static void buildTabPane(ItemPalette palette,Editor editor){  _tabPane=new JTabbedPane();  _tabIndex=new HashMap<String,ItemPanel>();  ItemPanel itemPanel=new TableItemPanel(palette,"Turnout",null,PickListModel.turnoutPickModelInstance(),editor);  itemPanel.init();  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameTurnout"));  _tabIndex.put("Turnout",itemPanel);  itemPanel=new TableItemPanel(palette,"Sensor",null,PickListModel.sensorPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameSensor"));  _tabIndex.put("Sensor",itemPanel);  itemPanel=new SignalHeadItemPanel(palette,"SignalHead",null,PickListModel.signalHeadPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameSignalHead"));  _tabIndex.put("SignalHead",itemPanel);  itemPanel=new SignalMastItemPanel(palette,"SignalMast",null,PickListModel.signalMastPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameSignalMast"));  _tabIndex.put("SignalMast",itemPanel);  itemPanel=new MemoryItemPanel(palette,"Memory",null,PickListModel.memoryPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameMemory"));  _tabIndex.put("Memory",itemPanel);  itemPanel=new ReporterItemPanel(palette,"Reporter",null,PickListModel.reporterPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameReporter"));  _tabIndex.put("Reporter",itemPanel);  itemPanel=new TableItemPanel(palette,"Light",null,PickListModel.lightPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNameLight"));  _tabIndex.put("Light",itemPanel);  itemPanel=new MultiSensorItemPanel(palette,"MultiSensor",null,PickListModel.multiSensorPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("MultiSensor"));  _tabIndex.put("MultiSensor",itemPanel);  ItemPanel iconPanel=new IconItemPanel(palette,"Icon",editor);  _tabPane.add(new JScrollPane(iconPanel),Bundle.getMessage("Icon"));  _tabIndex.put("Icon",iconPanel);  iconPanel=new BackgroundItemPanel(palette,"Background",editor);  _tabPane.add(new JScrollPane(iconPanel),Bundle.getMessage("Background"));  _tabIndex.put("Background",iconPanel);  iconPanel=new TextItemPanel(palette,"Text",editor);  _tabPane.add(new JScrollPane(iconPanel),Bundle.getMessage("Text"));  _tabIndex.put("Text",iconPanel);  iconPanel=new RPSItemPanel(palette,"RPSReporter",null,editor);  _tabPane.add(new JScrollPane(iconPanel),Bundle.getMessage("RPSReporter"));  _tabIndex.put("RPSReporter",iconPanel);  iconPanel=new ClockItemPanel(palette,"FastClock",editor);  _tabPane.add(new JScrollPane(iconPanel),Bundle.getMessage("FastClock"));  _tabIndex.put("FastClock",iconPanel);  itemPanel=new IndicatorItemPanel(palette,"IndicatorTrack",null,editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("IndicatorTrack"));  _tabIndex.put("IndicatorTrack",itemPanel);  itemPanel=new IndicatorTOItemPanel(palette,"IndicatorTO",null,PickListModel.turnoutPickModelInstance(),editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("IndicatorTO"));  _tabIndex.put("IndicatorTO",itemPanel);  itemPanel=new PortalItemPanel(palette,"Portal",null,editor);  _tabPane.add(new JScrollPane(itemPanel),Bundle.getMessage("BeanNamePortal"));  _tabIndex.put("Portal",itemPanel);  _tabPane.addChangeListener(palette);}  }
class C{  TextureTile(int row,int column){  this.row=row;  this.column=column;}  }
class C{  private boolean isFlags(int f){  return ((flags & f) == f);}  }
class C{  private static int submitWord(byte[][] keys,int[] values,int tableMask,byte[] word,int off,int len){  int hashCode=(int)XX_HASH.hashBytes(word,off,len);  int index=hashCode & tableMask;  while (true) {    byte[] key=keys[index];    if (key != null) {      if (equal(key,word,off,len)) {        values[index]++;        return 0;      }      index=(index + 1) & tableMask;    } else {      keys[index]=Arrays.copyOfRange(word,off,off + len);      values[index]=1;      return 1;    }  }}  }
class C{  @Override public boolean remove(Object o){  throw new UnsupportedOperationException("cannot remove from Empty Ranges");}  }
class C{  public static SVGGlyph loadGlyph(URL url) throws IOException {  String urlString=url.toString();  String filename=urlString.substring(urlString.lastIndexOf('/') + 1);  int startPos=0;  int endPos=0;  while (endPos < filename.length() && filename.charAt(endPos) != '-') {    endPos++;  }  int id=Integer.parseInt(filename.substring(startPos,endPos));  startPos=endPos + 1;  while (endPos < filename.length() && filename.charAt(endPos) != '.') {    endPos++;  }  String name=filename.substring(startPos,endPos);  return new SVGGlyph(id,name,extractSvgPath(getStringFromInputStream(url.openStream())),Color.BLACK);}  }
class C{  private void markReserved(int ropReg,int category){  reservedRopRegs.set(ropReg,ropReg + category,true);}  }
class C{  public static void writeHistogram(TDoubleDoubleHashMap map,String keyCol,String valCol,String file,boolean descending) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(file));  writer.write(keyCol);  writer.write(TAB);  writer.write(valCol);  writer.newLine();  double[] keys=map.keys();  Arrays.sort(keys);  if (descending)   ArrayUtils.reverse(keys);  for (  double key : keys) {    writer.write(String.valueOf(key));    writer.write(TAB);    writer.write(String.valueOf(map.get(key)));    writer.newLine();  }  writer.close();}  }
class C{  private void createNew(){  log.config("");  String value=valueField.getText();  if (value.length() == 0) {    valueField.setBackground(AdempierePLAF.getFieldBackground_Error());    return;  }  String name=nameField.getText();  if (name.length() == 0) {    nameField.setBackground(AdempierePLAF.getFieldBackground_Error());    return;  }  int C_ElementValue_ID=createElementValue(value,name,isExpense.isSelected());  if (C_ElementValue_ID == 0) {    ADialog.error(m_WindowNo,panel,"ChargeNotCreated",name);    return;  }  int C_Charge_ID=createCharge(name,C_ElementValue_ID);  if (C_Charge_ID == 0) {    ADialog.error(m_WindowNo,panel,"ChargeNotCreated",name);    return;  }  ADialog.info(m_WindowNo,panel,"ChargeCreated",name);}  }
class C{  private boolean filterByTaskSessionId(Event e,IgniteUuid taskSesId){  if (e.getClass().equals(TaskEvent.class)) {    TaskEvent te=(TaskEvent)e;    return te.taskSessionId().equals(taskSesId);  }  if (e.getClass().equals(JobEvent.class)) {    JobEvent je=(JobEvent)e;    return je.taskSessionId().equals(taskSesId);  }  return true;}  }
class C{  @Override protected void fromExperiment(){  LocalDatasetProvider provider;  Evaluator evaluator;  RepeatedRuns runs;  CrossValidation cv;  PercentageSplit split;  m_ModelClassifiers.removeAllElements();  for (  MultiLabelClassifier classifier : m_Experiment.getClassifiers())   m_ModelClassifiers.addElement(OptionUtils.toCommandLine(classifier));  provider=(LocalDatasetProvider)m_Experiment.getDatasetProvider();  m_ModelDatasets.removeAllElements();  for (  File dataset : provider.getDatasets())   m_ModelDatasets.addElement(dataset.getAbsolutePath());  evaluator=m_Experiment.getEvaluator();  if (evaluator instanceof RepeatedRuns) {    runs=(RepeatedRuns)evaluator;    m_SpinnerNumRuns.setValue(runs.getUpperRuns() - runs.getLowerRuns() + 1);    evaluator=((RepeatedRuns)evaluator).getEvaluator();  }  if (evaluator instanceof CrossValidation) {    cv=(CrossValidation)evaluator;    m_SpinnerNumFolds.setValue(cv.getNumFolds());    m_CheckBoxPreserveOrder.setSelected(cv.getPreserveOrder());  } else {    split=(PercentageSplit)evaluator;    m_TextPercentage.setText("" + split.getTrainPercentage());    m_CheckBoxPreserveOrder.setSelected(split.getPreserveOrder());  }  m_GOEStatisticsHandler.setValue(m_Experiment.getStatisticsHandler());  m_Notes=m_Experiment.getNotes();}  }
class C{  public PKCS5S2ParametersGenerator(){  this(new SHA1Digest());}  }
class C{  public T caseAnyType(AnyType object){  return null;}  }
class C{  public static BalanceMap createForCredit(RegistrarCredit registrarCredit){  Map<DateTime,Map<DateTime,Money>> map=new HashMap<>();  for (  RegistrarCreditBalance balance : ofy().load().type(RegistrarCreditBalance.class).ancestor(registrarCredit)) {    Map<DateTime,Money> submap=Optional.fromNullable(map.get(balance.effectiveTime)).or(new HashMap<DateTime,Money>());    submap.put(balance.writtenTime,balance.amount);    map.put(balance.effectiveTime,submap);  }  return new BalanceMap(map);}  }
class C{  @Override public void relocate(){  int w=575, h=330;  int x=(this.getWidth() - w) / 2;  int y=(this.getHeight() - h) / 2;  tabs.setLocation(x,y);  importButton.setLocation(x,y + 305);  verifyButton.setLocation(x + 195,y + 305);  exportButton.setLocation(x + 390,y + 305);}  }
class C{  protected void onEnd(Pcap pcap){  this.end=true;}  }
class C{  public static void optimizePreFetchDocs(ResponseBuilder rb,DocList docs,Query query,SolrQueryRequest req,SolrQueryResponse res) throws IOException {  SolrIndexSearcher searcher=req.getSearcher();  if (!searcher.enableLazyFieldLoading) {    return;  }  ReturnFields returnFields=res.getReturnFields();  if (returnFields.getLuceneFieldNames() != null) {    Set<String> fieldFilter=returnFields.getLuceneFieldNames();    if (rb.doHighlights) {      fieldFilter=new HashSet<>(fieldFilter);      SolrHighlighter highlighter=HighlightComponent.getHighlighter(req.getCore());      for (      String field : highlighter.getHighlightFields(query,req,null))       fieldFilter.add(field);      SchemaField keyField=searcher.getSchema().getUniqueKeyField();      if (null != keyField)       fieldFilter.add(keyField.getName());    }    DocIterator iter=docs.iterator();    for (int i=0; i < docs.size(); i++) {      searcher.doc(iter.nextDoc(),fieldFilter);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.138 -0500",hash_original_method="12B88D256BE6909244011FA728F05779",hash_generated_method="A76BC19837CC4CA07F375216D19D2DA4") public void flush() throws IOException {  flush(true);}  }
class C{  private void simpleCandidateSearch(IR ir){  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock cand=e.nextElement();    if (cand.isExceptionHandlerBasicBlock())     continue;    Instruction candTest=getCandidateTest(cand);    if (candTest == null)     continue;    BasicBlock coldPrev=findColdPrev(cand);    if (coldPrev == null)     continue;    if (tooBig(cand,ir.options.CONTROL_STATIC_SPLITTING_MAX_COST))     continue;    BasicBlock coldSucc=findColdSucc(candTest);    if (containsOSRPoint(coldSucc))     continue;    if (DEBUG) {      VM.sysWrite("Found candidate \n");      VM.sysWrite("\tTest is " + candTest + "\n");      VM.sysWrite("\tcoldPrev is " + coldPrev + "\n");      VM.sysWrite("\tcoldSucc is " + coldSucc + "\n");      cand.printExtended();    }    pushCandidate(cand,coldPrev,coldSucc,candTest);  }}  }
class C{  public static String commandToText(int cmd,int level){  String cmdText="";switch (cmd) {case CMD_ON:    cmdText="ON";  break;case CMD_OFF:cmdText="OFF";break;case CMD_DIM_R:cmdText="recvDIM";cmdText=cmdText + " ";break;case CMD_DIM_S:cmdText="sendDIM";int v2=(level * 100) / 16;cmdText=cmdText + " " + v2+ "%";break;default :cmdText="Unk Cmd: " + cmd;break;}return (cmdText);}  }
class C{  public IcsProgressBar(Context context){  this(context,null);}  }
class C{  public void scrollToVisible(int row,int col){  scrollToVisible(getJTable(),row,col);}  }
class C{  @Override protected void onPostExecute(Boolean result){  super.onPostExecute(result);  if (result)   displayContent(); else   handleError();}  }
class C{  public Boolean shouldAllowRequest(String url){  return null;}  }
class C{  public ConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  @Override public void checkPermission(Permission perm){}  }
class C{  public boolean isSetEchoRequest(){  return this.echoRequest != null;}  }
class C{  public void endUpdate() throws IOException {  ResponseWriter writer=getWrapped();  writer.endCDATA();  writer.endElement("update");  inUpdate=false;}  }
class C{  public static void toUrl(Context context,String url,String title,String type){  Intent intent=new Intent(context,EasyWebViewActivity.class);  intent.putExtra(EXTRA_URL,url);  intent.putExtra(EXTRA_TITLE,title);  intent.putExtra(EXTRA_GANK_TYPE,type);  context.startActivity(intent);}  }
class C{  public boolean begin(String sessionId){  UUID uuid;  try {    uuid=UuidProvider.fromString(sessionId);  } catch (  Exception e) {    log.warn("Invalid user session ID: " + e.toString());    return false;  }  UserSession session=loginService.getSession(uuid);  if (session == null) {    log.warn("User session " + uuid + " does not exist");    return false;  }  if (!session.isSpecificPermitted(PERMISSION_NAME)) {    log.warn(PERMISSION_NAME + " is not permitted for user " + session.getUser().getLogin());    return false;  }  AppContext.setSecurityContext(new SecurityContext(session));  return true;}  }
class C{  public synchronized Platform queryCapability(Capability capability) throws NoCapablePlatformException {  Platform platform=preferences.get(checkNotNull(capability));  if (platform != null) {    return platform;  } else {    throw new NoCapablePlatformException("No platform was found supporting " + capability.name());  }}  }
class C{  public Notifications title(String title){  this.title=title;  return this;}  }
class C{  @Override public final void incomingSeparator(TimeSeparator sep) throws AdeException {  super.incomingSeparator(sep);  if (m_flushMemoryOnGap) {    flushMemory();  }}  }
class C{  public ValueAnalysisValue(VAModel mo){  super();  this.mObj=mo;}  }
class C{  public static List<String> split(String str,String delim){  List<String> splitList=null;  StringTokenizer st=null;  if (str == null)   return splitList;  if (delim != null)   st=new StringTokenizer(str,delim); else   st=new StringTokenizer(str);  if (st != null && st.hasMoreTokens()) {    splitList=new LinkedList<String>();    while (st.hasMoreTokens())     splitList.add(st.nextToken());  }  return splitList;}  }
class C{  public boolean useRconColors(){  return config.getBoolean(Key.RCON_COLORS);}  }
class C{  public QuestNotActiveCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private DocLine[] loadLines(MRequisition req){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MRequisitionLine[] lines=req.getLines();  for (int i=0; i < lines.length; i++) {    MRequisitionLine line=lines[i];    DocLine docLine=new DocLine(line,this);    BigDecimal Qty=line.getQty();    docLine.setQty(Qty,false);    BigDecimal PriceActual=line.getPriceActual();    BigDecimal LineNetAmt=line.getLineNetAmt();    docLine.setAmount(LineNetAmt);    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public static String[] executorCommand(Config config,Config runtime,int containerIndex,List<Integer> freePorts){  if (freePorts.size() < PORTS_REQUIRED_FOR_EXECUTOR) {    throw new RuntimeException("Failed to find enough ports for executor");  }  for (  int port : freePorts) {    if (port == -1) {      throw new RuntimeException("Failed to find available ports for executor");    }  }  List<String> ports=new LinkedList<>();  for (  int port : freePorts) {    ports.add(Integer.toString(port));  }  return getExecutorCommand(config,runtime,containerIndex,ports);}  }
class C{  protected void fireConnectionOpened(){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).connectionOpened();    }  }}  }
class C{  public BarChartDemo1(String title){  super(title);  CategoryDataset dataset=createDataset();  JFreeChart chart=createChart(dataset);  ChartPanel chartPanel=new ChartPanel(chart,false);  chartPanel.setFillZoomRectangle(true);  chartPanel.setMouseWheelEnabled(true);  chartPanel.setPreferredSize(new Dimension(500,270));  setContentPane(chartPanel);}  }
class C{  public long toLong(){  return 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public HttpSessionsTableModel(HttpSessionsSite site){  super();  this.site=site;  sessions=new ArrayList<>(2);}  }
class C{  @Override public void init(NamedList args){}  }
class C{  public MekaTable(TableModel dm,TableColumnModel cm){  super(dm,cm);  initGUI();}  }
class C{  @Nullable public E addx(E e){  ConcurrentMap<E,Object> map0=map();  return (E)map0.putIfAbsent(e,e);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void dispose(){  super.dispose();  if (contentChangedListener != null) {    contentManager.removeContentSelectionChangedListener((XBLOMContentElement)e,contentChangedListener);  }}  }
class C{  public void release(Table metadata){}  }
class C{  boolean isVariablePrecision(){  return variablePrecision;}  }
class C{  private ScriptFactory(){}  }
class C{  @Override public XMLEventReader createFilteredReader(XMLEventReader reader,EventFilter filter) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported!");}  }
class C{  public FontKey(String family,int style,int size){  setValue(family,style,size);}  }
class C{  @Override public boolean equals(Object object){  return object == null || object instanceof Null;}  }
class C{  @Override protected void removeAt(int index){  _set[index]=(long)0;  super.removeAt(index);}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  public void fireTreeWillCollapse(TreePath path) throws ExpandVetoException {  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeWillExpandListener.class) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeWillExpandListener)listeners[i + 1]).treeWillCollapse(e);    }  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  private void rewire(EObject eObject,ReferencingElement_IM copyEObject){  final IdentifiableElement originalTarget=getOriginalTargetOfNodeToRewire(eObject);  final SymbolTableEntry rewiredTarget;  if (!originalTarget.eIsProxy()) {    rewiredTarget=getSymbolTableEntry(originalTarget,true);    copyEObject.setRewiredTarget(rewiredTarget);  } else {    if (eObject instanceof ParameterizedPropertyAccessExpression) {      final String propName=getPropertyAsString((ParameterizedPropertyAccessExpression)eObject);      ((ParameterizedPropertyAccessExpression_IM)copyEObject).setAnyPlusAccess(true);      ((ParameterizedPropertyAccessExpression_IM)copyEObject).setNameOfAnyPlusProperty(propName);    } else {      throw new IllegalStateException("Rewire() called for a proxified original target. IM-eobject = " + eObject + "   origTarget is "+ originalTarget);    }  }}  }
class C{  private boolean parseString(){  int begin=index;  int length=input.length();  while (index != length) {    if (specialCharacters.get(input.charAt(index))) {      break;    }    index++;  }  if (begin != index) {    appendText(input,begin,index);    return true;  } else {    return false;  }}  }
class C{  public void replace(final List<Edge> removeList,final Edge newEdge){  final Edge previous=previousEdges.get(removeList.get(0));  final Edge next=nextEdges.get(removeList.get(removeList.size() - 1));  edges.add(newEdge);  previousEdges.put(newEdge,previous);  nextEdges.put(previous,newEdge);  previousEdges.put(next,newEdge);  nextEdges.put(newEdge,next);  for (  final Edge edge : removeList) {    if (edge == oneEdge) {      oneEdge=newEdge;    }    edges.remove(edge);    previousEdges.remove(edge);    nextEdges.remove(edge);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) public AccessibilityNodeInfo findFocus(int focus){  enforceSealed();  if (!canPerformRequestOverConnection(mSourceNodeId)) {    return null;  }  AccessibilityNodeInfo node=new AccessibilityNodeInfo(DSOnlyType.DONTCARE);  node.addTaint(getTaint());  node.addTaint(focus);  return node;}  }
class C{  public DateConverter(final String defaultFormat,final String[] acceptableFormats,final TimeZone timeZone){  this(defaultFormat,acceptableFormats,timeZone,false);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  ITypeBinding resolveType(Type type){  return null;}  }
class C{  protected int[] colorSubSampleFromYuvImage(ImageProxy img,Rect crop,int subsample,boolean enableSquareInscribe){  crop=guaranteedSafeCrop(img,crop);  final List<ImageProxy.Plane> planeList=img.getPlanes();  if (planeList.size() != 3) {    throw new IllegalArgumentException("Incorrect number planes (" + planeList.size() + ") in YUV Image Object");  }  int inputWidth=crop.width();  int inputHeight=crop.height();  int outputWidth=inputWidth / subsample;  int outputHeight=inputHeight / subsample;  ByteBuffer bufY=planeList.get(0).getBuffer();  ByteBuffer bufU=planeList.get(1).getBuffer();  ByteBuffer bufV=planeList.get(2).getBuffer();  int yByteStride=planeList.get(0).getRowStride() * subsample;  int uByteStride=planeList.get(1).getRowStride() * subsample;  int vByteStride=planeList.get(2).getRowStride() * subsample;  int yPixelStride=planeList.get(0).getPixelStride() * subsample;  int uPixelStride=planeList.get(1).getPixelStride() * subsample;  int vPixelStride=planeList.get(2).getPixelStride() * subsample;  final int outputPixelStride;  final int len;  final int inscribedXMin;  final int inscribedXMax;  final int inscribedYMin;  final int inscribedYMax;  final int inputVerticalOffset=quantizeBy2(crop.top);  final int inputHorizontalOffset=quantizeBy2(crop.left);  if (enableSquareInscribe) {    int r=inscribedCircleRadius(outputWidth,outputHeight);    len=r * r * 4;    outputPixelStride=r * 2;    if (outputWidth > outputHeight) {      inscribedXMin=quantizeBy2(outputWidth / 2 - r);      inscribedXMax=quantizeBy2(outputWidth / 2 + r);      inscribedYMin=0;      inscribedYMax=outputHeight;    } else {      inscribedXMin=0;      inscribedXMax=outputWidth;      inscribedYMin=quantizeBy2(outputHeight / 2 - r);      inscribedYMax=quantizeBy2(outputHeight / 2 + r);    }  } else {    outputPixelStride=outputWidth;    len=outputWidth * outputHeight;    inscribedXMin=0;    inscribedXMax=quantizeBy2(outputWidth);    inscribedYMin=0;    inscribedYMax=quantizeBy2(outputHeight);  }  int[] colors=new int[len];  int alpha=255 << 24;  logWrapper("TIMER_BEGIN Starting Native Java YUV420-to-RGB Rectangular Conversion");  logWrapper("\t Y-Plane Size=" + outputWidth + "x"+ outputHeight);  logWrapper("\t U-Plane Size=" + planeList.get(1).getRowStride() + " Pixel Stride="+ planeList.get(1).getPixelStride());  logWrapper("\t V-Plane Size=" + planeList.get(2).getRowStride() + " Pixel Stride="+ planeList.get(2).getPixelStride());  for (int j=inscribedYMin; j < inscribedYMax; j+=2) {    int offsetColor=(j - inscribedYMin) * (outputPixelStride);    int offsetY=calculateMemoryOffsetFromPixelOffsets(inscribedXMin,j,subsample,1,yByteStride,yPixelStride,inputHorizontalOffset,inputVerticalOffset);    int offsetU=calculateMemoryOffsetFromPixelOffsets(inscribedXMin,j,subsample,2,uByteStride,uPixelStride,inputHorizontalOffset / 2,inputVerticalOffset / 2);    int offsetV=calculateMemoryOffsetFromPixelOffsets(inscribedXMin,j,subsample,2,vByteStride,vPixelStride,inputHorizontalOffset / 2,inputVerticalOffset / 2);    for (int i=inscribedXMin; i < inscribedXMax; i+=2, offsetY+=2 * yPixelStride, offsetColor+=2, offsetU+=uPixelStride, offsetV+=vPixelStride) {      int u=(int)(bufU.get(offsetU) & 255) - 128;      int v=(int)(bufV.get(offsetV) & 255) - 128;      int redDiff=(v * V_FACTOR_FOR_R) >> SHIFT_APPROXIMATION;      int greenDiff=((u * U_FACTOR_FOR_G + v * V_FACTOR_FOR_G) >> SHIFT_APPROXIMATION);      int blueDiff=(u * U_FACTOR_FOR_B) >> SHIFT_APPROXIMATION;      int alpha00=(255 << 24);      int y00=(int)(bufY.get(offsetY) & 255);      int green00=y00 + greenDiff;      int blue00=y00 + blueDiff;      int red00=y00 + redDiff;      if (green00 < 0) {        green00=0;      }      if (red00 < 0) {        red00=0;      }      if (blue00 < 0) {        blue00=0;      }      if (green00 > 255) {        green00=255;      }      if (red00 > 255) {        red00=255;      }      if (blue00 > 255) {        blue00=255;      }      colors[offsetColor]=(red00 & 255) << 16 | (green00 & 255) << 8 | (blue00 & 255) | alpha00;      int alpha01=(255 << 24);      int y01=(int)(bufY.get(offsetY + yPixelStride) & 255);      int green01=y01 + greenDiff;      int blue01=y01 + blueDiff;      int red01=y01 + redDiff;      if (green01 < 0) {        green01=0;      }      if (red01 < 0) {        red01=0;      }      if (blue01 < 0) {        blue01=0;      }      if (green01 > 255) {        green01=255;      }      if (red01 > 255) {        red01=255;      }      if (blue01 > 255) {        blue01=255;      }      colors[offsetColor + 1]=(red01 & 255) << 16 | (green01 & 255) << 8 | (blue01 & 255) | alpha01;      int alpha10=(255 << 24);      int y10=(int)(bufY.get(offsetY + yByteStride) & 255);      int green10=y10 + greenDiff;      int blue10=y10 + blueDiff;      int red10=y10 + redDiff;      if (green10 < 0) {        green10=0;      }      if (red10 < 0) {        red10=0;      }      if (blue10 < 0) {        blue10=0;      }      if (green10 > 255) {        green10=255;      }      if (red10 > 255) {        red10=255;      }      if (blue10 > 255) {        blue10=255;      }      colors[offsetColor + outputPixelStride]=(red10 & 255) << 16 | (green10 & 255) << 8 | (blue10 & 255) | alpha10;      int alpha11=(255 << 24);      int y11=(int)(bufY.get(offsetY + yByteStride + yPixelStride) & 255);      int green11=y11 + greenDiff;      int blue11=y11 + blueDiff;      int red11=y11 + redDiff;      if (green11 < 0) {        green11=0;      }      if (red11 < 0) {        red11=0;      }      if (blue11 < 0) {        blue11=0;      }      if (green11 > 255) {        green11=255;      }      if (red11 > 255) {        red11=255;      }      if (blue11 > 255) {        blue11=255;      }      colors[offsetColor + outputPixelStride + 1]=(red11 & 255) << 16 | (green11 & 255) << 8 | (blue11 & 255) | alpha11;    }  }  logWrapper("TIMER_END Starting Native Java YUV420-to-RGB Rectangular Conversion");  return colors;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.590 -0500",hash_original_method="87B618AF10705C22EFB36E4A71158D56",hash_generated_method="54A200294B7C93768F11F3C3B2B34FAD") @DSSafe(DSCat.SAFE_LIST) public void addFirst(HDR obj){  hlist.add(0,(HDR)obj);}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  public Interval dompStartScouting(){  return new Interval(0,250E-6);}  }
class C{  private String valueToString(Object value) throws ReplicatorException {  if (value instanceof String) {    return value.toString();  } else   if (value instanceof Integer) {    return value.toString();  } else   if (value instanceof SerialBlob) {    try {      SerialBlob blob=(SerialBlob)value;      return new String(blob.getBytes(1,(int)blob.length()));    } catch (    SerialException e) {      throw new ReplicatorException("Unable to convert SerialBlob to String: " + e,e);    }  } else {    return (String)value;  }}  }
class C{  public boolean isIsVolatile(){  return isVolatile;}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.REF_PARAM;}  }
class C{  private void update(){  updateInfoField();  m_executeButton.setEnabled(CExpressionTreeValidator.isValid(m_jtree));}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return result == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public int hashCode(){  return transition.hashCode() ^ offsetBefore.hashCode() ^ Integer.rotateLeft(offsetAfter.hashCode(),16);}  }
class C{  public static void checkExpectedSchemaField(Map<String,Object> expected) throws Exception {  String fieldName=(String)expected.get("name");  assertNotNull("expected contains no name: " + expected,fieldName);  FieldResponse rsp=new Field(fieldName).process(CLOUD_CLIENT);  assertNotNull("Field Null Response: " + fieldName,rsp);  assertEquals("Field Status: " + fieldName + " => "+ rsp.toString(),0,rsp.getStatus());  assertEquals("Field: " + fieldName,expected,rsp.getField());}  }
class C{  protected void doDone(IJobChangeEvent event){}  }
class C{  public List registerInterestOn(Connection conn,final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final byte regionDataPolicy){  return registerInterestOn(conn,key,interestType,policy,isDurable,false,regionDataPolicy);}  }
class C{  void addAndKeepDirtyStatus(Set<File> foldersToShare,Set<File> foldersToExclude){  for (  File folder : foldersToShare) {    directoryPanel.addRoot(folder);  }  directoryPanel.addFoldersToExclude(foldersToExclude);}  }
class C{  public SimpleSequence(int capacity,ObjectWrapper wrapper){  super(wrapper);  list=new ArrayList(capacity);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexgetlengthofemptylist.class,args);}  }
class C{  public Document read(Reader reader,String systemId) throws DocumentException {  InputSource source=new InputSource(reader);  source.setSystemId(systemId);  if (this.encoding != null) {    source.setEncoding(this.encoding);  }  return read(source);}  }
class C{  public boolean isBorder(){  return this.border;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String importCert(byte[] certBytes,String initialStatus,ClientId clientId) throws Exception {  LOG.trace("Importing cert from file with length of '{}' bytes",certBytes.length);  ImportCertResponse response=execute(new ImportCert(certBytes,initialStatus,clientId));  LOG.trace("Cert imported successfully, keyId received: {}",response.getKeyId());  return response.getKeyId();}  }
class C{  public boolean isSyncPossible(){  return networkConnected && isConfigured(appContext);}  }
class C{  public final double coverageOfTestCasesByPredictedRegions(){  if (!m_CoverageStatisticsAvailable) {    return Double.NaN;  }  return 100 * m_TotalCoverage / m_WithClass;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (name == null || name.equalsIgnoreCase("")) {    errors.add("Name",new ActionMessage("errors.required","Name"));  } else {    String nonUniversityLocationRegex=ApplicationProperty.NonUniversityLocationPattern.value();    String nonUniversityLocationInfo=ApplicationProperty.NonUniversityLocationPatternInfo.value();    if (nonUniversityLocationRegex != null && nonUniversityLocationRegex.trim().length() > 0) {      try {        Pattern pattern=Pattern.compile(nonUniversityLocationRegex);        Matcher matcher=pattern.matcher(name);        if (!matcher.find()) {          errors.add("nonUniversityLocation",new ActionMessage("errors.generic",nonUniversityLocationInfo));        }      } catch (      Exception e) {        errors.add("nonUniversityLocation",new ActionMessage("errors.generic","Non University Location cannot be matched to regular expression: " + nonUniversityLocationRegex + ". Reason: "+ e.getMessage()));      }    } else {      if (!WebTextValidation.isTextValid(name,true)) {        errors.add("nonUniversityLocation",new ActionMessage("errors.invalidCharacters","Name"));      }    }  }  if (capacity == null || capacity.equalsIgnoreCase("")) {    errors.add("Capacity",new ActionMessage("errors.required","Capacity"));  }  if (deptSize != 1) {    if (deptCode == null || deptCode.equalsIgnoreCase("")) {      errors.add("Department",new ActionMessage("errors.required","Department"));    }  }  return errors;}  }
class C{  public void value(long val){  this.val=val;}  }
class C{  public float[] toArray(float[] floats){  if (floats == null) {    floats=new float[2];  }  floats[0]=x;  floats[1]=y;  return floats;}  }
class C{  public boolean hasCreateDistributionPermission(){  return hasReadDistributionPermission() && permissionService.hasPermission(SpPermission.CREATE_REPOSITORY);}  }
class C{  public void addBin(SimpleHistogramBin bin){  Iterator iterator=this.bins.iterator();  while (iterator.hasNext()) {    SimpleHistogramBin existingBin=(SimpleHistogramBin)iterator.next();    if (bin.overlapsWith(existingBin)) {      throw new RuntimeException("Overlapping bin");    }  }  this.bins.add(bin);  Collections.sort(this.bins);}  }
class C{  public void testOutput() throws IOException {  String[] argv=new String[1];  argv[0]="src/test/resources/test.txt";  File actual=new File("target/output.actual");  actual.delete();  FileOutputStream fos=new FileOutputStream(OUTPUT_FILE,true);  System.setOut(new PrintStream(fos));  Yylex.main(argv);  fos.close();  File expected=new File("src/test/resources/output.good");  assertTrue(expected.isFile());  assertTrue(actual.isFile());  BufferedReader actualContent=new BufferedReader(new FileReader(actual));  BufferedReader expectedContent=new BufferedReader(new FileReader(expected));  for (int lineNumber=1; lineNumber != -1; lineNumber++) {    String expectedLine=expectedContent.readLine();    String actualLine=actualContent.readLine();    assertEquals("Line " + lineNumber,expectedLine,actualLine);    if (expectedLine == null)     lineNumber=-2;  }}  }
class C{  public static ColumnFamily removeDeleted(ColumnFamily cf,int gcBefore){  return removeDeleted(cf,gcBefore,SecondaryIndexManager.nullUpdater);}  }
class C{  public static void mkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      throw new IOException(MessageFormat.format(UNABLE_TO_MKDIR,directory));    }  } else {    if (!directory.mkdirs()) {      throw new IOException(MessageFormat.format(UNABLE_TO_MKDIR,directory));    }  }}  }
class C{  public void comment(XMLString text,Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.comment(text.ch,0,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.360 -0500",hash_original_method="935CF82B5FBC95B795356ABD430E53CE",hash_generated_method="CEFB23A880BD8E7601151C5A26A2B60A") public boolean hasTransparentBounds(){  return transparentBounds;}  }
class C{  public void nextPermutation(int[] num){  if (num == null || num.length < 2)   return;  for (int i=num.length - 2; i >= 0; i--) {    if (num[i] < num[i + 1]) {      int j=num.length - 1;      for (; j > i; j--)       if (num[j] > num[i])       break;      swap(num,i,j);      reverse(num,i + 1);      return;    }  }  reverse(num,0);  return;}  }
class C{  public boolean validateGraph(Object cell,Hashtable<Object,Object> context,HashMap<Object,String> totalWarnings){  mxIGraphModel model=graph.getModel();  mxGraphView view=graph.getView();  boolean isValid=true;  int childCount=model.getChildCount(cell);  for (int i=0; i < childCount; i++) {    Object tmp=model.getChildAt(cell,i);    Hashtable<Object,Object> ctx=context;    if (graph.isValidRoot(tmp)) {      ctx=new Hashtable<Object,Object>();    }    boolean isThisCellValid=validateGraph(tmp,ctx,totalWarnings);    isValid=isValid && isThisCellValid;    String warn=totalWarnings.get(tmp);    if (warn != null) {      String html=warn.replaceAll("\n","<br>");      int len=html.length();      graphComponent.setCellWarning(tmp,html.substring(0,Math.max(0,len - 4)));    } else {      graphComponent.setCellWarning(tmp,null);    }  }  String warningsForCell=totalWarnings.get(cell);  if (warningsForCell == null)   warningsForCell="";  if (graph.isCellCollapsed(cell) && !isValid)   warningsForCell+=mxResources.get("containsValidationErrors","Contains Validation Errors") + "\n";  String tmp=null;  if (model.isEdge(cell))   tmp=graph.getEdgeValidationError(cell,model.getTerminal(cell,true),model.getTerminal(cell,false)); else   tmp=graph.getCellValidationError(cell);  if (tmp != null)   warningsForCell+=tmp + "\n";  tmp=graph.validateCell(cell,context);  if (tmp != null)   warningsForCell+=tmp + "\n";  warningsForCell=StringUtils.cleanupSpaces(warningsForCell);  if (!StringUtils.isEmptyString(warningsForCell))   totalWarnings.put(cell,warningsForCell);  if (model.getParent(cell) == null)   view.validate();  return (warningsForCell.isEmpty() && isValid);}  }
class C{  private void restorePreferences(){  SharedPreferences prefs=getSharedPreferences(PREFS_NAME,MODE_PRIVATE);  GameActivity.setDifficultyIndex(prefs.getInt(DIFFICULTY_KEY,GameActivity.getDefaultDifficultyIndex()));  GameActivity.setNeverLoseBall(prefs.getBoolean(NEVER_LOSE_BALL_KEY,false));  GameActivity.setSoundEffectsEnabled(prefs.getBoolean(SOUND_EFFECTS_ENABLED_KEY,true));  mHighScore=prefs.getInt(HIGH_SCORE_KEY,0);}  }
class C{  static public Locator west(){  return west(false);}  }
class C{  public static void installResponseCache(String baseURL,File cacheDir,boolean checkForUpdates){  ResponseCache.setDefault(new LocalResponseCache(baseURL,cacheDir,checkForUpdates));}  }
class C{  public Stats(){}  }
class C{  public Iterator<ByteCodePatternMatch> byteCodePatternMatchIterator(){  return resultList.iterator();}  }
class C{  public void refresh(){  Collection<ResolvedMigration> availableMigrations=migrationResolver.resolveMigrations();  List<AppliedMigration> appliedMigrations=schemaVersionDAO.findAppliedMigrations();  migrationInfos=mergeAvailableAndAppliedMigrations(availableMigrations,appliedMigrations);  if (MigrationVersion.CURRENT == target) {    target=current().getVersion();  }}  }
class C{  protected void layoutLabel(int tabPlacement,FontMetrics metrics,int tabIndex,String title,Icon icon,Rectangle tabRect,Rectangle iconRect,Rectangle textRect,boolean isSelected){  boolean calculate=!(tabPlacement == TOP || tabPlacement == BOTTOM);  if (getTextViewForTab(tabIndex) != null)   calculate=false;  if (!calculate) {    super.layoutLabel(tabPlacement,metrics,tabIndex,title,icon,tabRect,iconRect,textRect,isSelected);    return;  }  textRect.x=textRect.y=iconRect.x=iconRect.y=0;  SwingUtilities.layoutCompoundLabel(tabPane,metrics,title,icon,SwingUtilities.TOP,SwingUtilities.LEFT,SwingUtilities.CENTER,SwingUtilities.TRAILING,tabRect,iconRect,textRect,textIconGap);  tabPane.putClientProperty("html",null);  int xNudge=getTabLabelShiftX(tabPlacement,tabIndex,isSelected);  int yNudge=getTabLabelShiftY(tabPlacement,tabIndex,isSelected);  Insets tabInsetsLocal=getTabInsets(tabPlacement,tabIndex);  xNudge+=tabInsetsLocal.left;  yNudge+=tabInsetsLocal.top + 1;  iconRect.x+=xNudge;  iconRect.y+=yNudge;  textRect.x+=xNudge;  textRect.y+=yNudge;}  }
class C{  public boolean isDeactivationLinkVisible(){  return isServiceActive() && isMarketplaceOwner();}  }
class C{  public boolean isOriginalTitle(){  return originalTitle;}  }
class C{  public static org.oscm.internal.vo.VORoleDefinition convertToUp(org.oscm.vo.VORoleDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VORoleDefinition newVO=new org.oscm.internal.vo.VORoleDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRoleId(oldVO.getRoleId());  newVO.setName(oldVO.getName());  newVO.setDescription(oldVO.getDescription());  return newVO;}  }
class C{  public synchronized int read() throws IOException {  if (in == null) {    throw new IOException("Stream Closed");  }  byte result;  if (slack != null && begin < slack.length) {    result=slack[begin];    if (++begin == slack.length) {      slack=null;    }  } else {    byte[] buf=new byte[1];    if (read(buf,0,1) <= 0) {      return -1;    } else {      result=buf[0];    }  }  return result & BYTE_MASK;}  }
class C{  private String testAdempiere(){  m_adempiereHome=new File(getAdempiereHome());  boolean pass=m_adempiereHome.exists();  String error="Not found: AdempiereHome = " + m_adempiereHome;  if (p_panel != null)   p_panel.signalOK(p_panel.okAdempiereHome,"ErrorAdempiereHome",pass,true,error);  if (!pass)   return error;  log.info("OK: AdempiereHome = " + m_adempiereHome);  p_properties.setProperty(ADEMPIERE_HOME,m_adempiereHome.getAbsolutePath());  System.setProperty(ADEMPIERE_HOME,m_adempiereHome.getAbsolutePath());  String fileName=KeyStoreMgt.getKeystoreFileName(m_adempiereHome.getAbsolutePath());  p_properties.setProperty(ADEMPIERE_KEYSTORE,fileName);  String pw=p_panel != null ? new String(p_panel.fKeyStore.getPassword()) : (String)p_properties.get(ADEMPIERE_KEYSTOREPASS);  pass=pw != null && pw.length() > 0;  error="Invalid Key Store Password = " + pw;  if (p_panel != null)   p_panel.signalOK(p_panel.okKeyStore,"KeyStorePassword",pass,true,error);  if (!pass)   return error;  p_properties.setProperty(ADEMPIERE_KEYSTOREPASS,pw);  KeyStoreMgt ks=p_panel != null ? new KeyStoreMgt(fileName,p_panel.fKeyStore.getPassword()) : new KeyStoreMgt(fileName,pw.toCharArray());  ks.setCommonName((String)p_properties.getProperty(ADEMPIERE_CERT_CN));  ks.setOrganization((String)p_properties.getProperty(ADEMPIERE_CERT_ORG));  ks.setOrganizationUnit((String)p_properties.getProperty(ADEMPIERE_CERT_ORG_UNIT));  ks.setLocation((String)p_properties.getProperty(ADEMPIERE_CERT_LOCATION));  ks.setState((String)p_properties.getProperty(ADEMPIERE_CERT_STATE));  ks.setCountry((String)p_properties.getProperty(ADEMPIERE_CERT_COUNTRY));  error=p_panel != null ? ks.verify((JFrame)SwingUtilities.getWindowAncestor(p_panel)) : ks.verify(null);  pass=error == null;  if (p_panel != null)   p_panel.signalOK(p_panel.okKeyStore,"KeyStorePassword",pass,true,error);  if (!pass)   return error;  log.info("OK: KeyStore = " + fileName);  return null;}  }
class C{  public boolean noError(){  return status != ConnectionStatus.ERROR;}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("StatusInfo ");  if (fSeverity == OK) {    buf.append("OK");  } else   if (fSeverity == ERROR) {    buf.append("ERROR");  } else   if (fSeverity == WARNING) {    buf.append("WARNING");  } else   if (fSeverity == INFO) {    buf.append("INFO");  } else {    buf.append("severity=");    buf.append(fSeverity);  }  buf.append(": ");  buf.append(fStatusMessage);  return buf.toString();}  }
class C{  public TermQuery(Term t){  term=Objects.requireNonNull(t);  perReaderTermState=null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public String globalInfo(){  return "Generates the output as plain text (for fixed width fonts).";}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.FILTER__NAME:    setName((String)newValue);  return;case EipPackage.FILTER__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.FILTER__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.FILTER__EXPRESSION:setExpression((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void test_parkUntil_2() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,true,1000);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,300,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(300);  waiterThread.join();  parkerThread.join();}  }
class C{  @Override protected void disconnect(){  getOwner().setEndConnector(null);}  }
class C{  public Component bugSummaryComponent(String str,BugInstance bug){  JLabel label=new JLabel();  label.setFont(label.getFont().deriveFont(Driver.getFontSize()));  label.setFont(label.getFont().deriveFont(Font.PLAIN));  label.setForeground(Color.BLACK);  label.setText(str);  SourceLineAnnotation link=bug.getPrimarySourceLineAnnotation();  if (link != null) {    label.addMouseListener(new BugSummaryMouseListener(bug,label,link));  }  return label;}  }
class C{  public static void promptEnterKey(){  promptEnterKey(true);}  }
class C{  public void addPlugInEventRepresentation(URI eventRepresentationRootURI,String eventRepresentationClassName,Serializable initializer){  ConfigurationPlugInEventRepresentation config=new ConfigurationPlugInEventRepresentation();  config.setEventRepresentationClassName(eventRepresentationClassName);  config.setInitializer(initializer);  this.plugInEventRepresentation.put(eventRepresentationRootURI,config);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.605 -0400",hash_original_method="8143C5E13483113836748794199B1228",hash_generated_method="6AAA4680CC97F82DBA859191A7830431") @Override public boolean accept(File file){  String name=file.getName();  for (  String name2 : this.names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean shouldRetryWithErrorAndTries(int tries,GitHubErrorResponse error,HttpResponse httpResponse){  return false;}  }
class C{  public T caseDefaultTrigger(DefaultTrigger object){  return null;}  }
class C{  public boolean remove(Object o){  boolean ret=super.remove(WeakElement.create(o));  processQueue();  return ret;}  }
class C{  public HttpException(final String message){  super(message);}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  boolean evaluate(){  return operator.evaluate(operands);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void removeTvShowSeason(TvShowSeason season){synchronized (root) {    TvShowSeasonTreeNode child=(TvShowSeasonTreeNode)nodeMap.get(season);    TvShowTreeNode parent=null;    if (child != null) {      parent=(TvShowTreeNode)child.getParent();    }    if (parent != null && child != null) {      int index=getIndexOfChild(parent,child);      parent.remove(child);      nodeMap.remove(season);      if (index > -1) {        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});        for (        TreeModelListener listener : listeners) {          try {            listener.treeNodesRemoved(event);          } catch (          NullPointerException|ArrayIndexOutOfBoundsException ignored) {          }        }      }    }  }}  }
class C{  public ConfigExceptionLocation(String filename,int line,String message){  super(filename + ":" + line+ ": "+ message+ sourceLines(filename,line));  _filename=filename;  _line=line;  _location=location(filename,line);}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  public AuthScope(final String host,final int port){  this(host,port,ANY_SCHEME);}  }
class C{  @PUT @Path("/{app_id}/policy") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createPolicy(@Context final HttpServletRequest httpServletRequest,@PathParam("app_id") String app_id,String jsonString){  logger.info("Received JSON String of policy content: " + jsonString);  Client client=RestUtil.getHTTPSRestClient();  String policyId;  String server_url;  String request_url;  Map<String,String> service_info;  try {    service_info=getserverinfo(app_id);    server_url=service_info.get("server_url");    policyId=service_info.get("policyId");  } catch (  CloudException e) {    return RestApiResponseHandler.getResponseCloudError(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  AppNotFoundException e) {    return RestApiResponseHandler.getResponseAppNotFound(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  ServiceNotFoundException e) {    return RestApiResponseHandler.getResponseServiceNotFound(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  InternalAuthenticationException e) {    return RestApiResponseHandler.getResponseInternalAuthenticationFail(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  Exception e) {    logger.info("error in getserverinfo: " + e.getMessage());    return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_retrieve_application_service_information_context,e),LocaleUtil.getLocale(httpServletRequest));  }  Map<String,String> orgSpace;  try {    orgSpace=CloudFoundryManager.getInstance().getOrgSpaceByAppId(app_id);  } catch (  CloudException e) {    return RestApiResponseHandler.getResponseCloudError(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  AppNotFoundException e) {    return RestApiResponseHandler.getResponseAppNotFound(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  AppInfoNotFoundException e) {    return RestApiResponseHandler.getResponseAppInfoNotFound(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  Exception e) {    logger.info("error in getOrgSpaceByAppId: " + e.getMessage());    return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_retrieve_org_sapce_information_context,e),LocaleUtil.getLocale(httpServletRequest));  }  Map<String,String> check_result;  try {    check_result=ValidateUtil.handleInput(DataType.CREATE_REQUEST,jsonString,service_info,httpServletRequest);    if (check_result.get("result") != "OK")     return RestApiResponseHandler.getResponseBadRequest("{\"error\":" + check_result.get("error_message") + "\"}");  } catch (  InputJSONParseErrorException e) {    return RestApiResponseHandler.getResponseInputJsonParseError(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  InputJSONFormatErrorException e) {    return RestApiResponseHandler.getResponseInputJsonFormatError(e,LocaleUtil.getLocale(httpServletRequest));  }catch (  Exception e) {    return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_parse_input_json_context,e),LocaleUtil.getLocale(httpServletRequest));  }  String new_json=check_result.get("json");  if ((policyId != null) && !(policyId.equals("null")) && (policyId.length() > 0)) {    logger.info("policyId: " + policyId + " already exist, now we update it");    try {      request_url=server_url + "/resources/policies/" + policyId;      WebResource webResource=client.resource(request_url);      String authorization=ConfigManager.getInternalAuthToken();      ClientResponse response=webResource.header("Authorization","Basic " + authorization).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,new_json);      if (response.getStatus() == HttpServletResponse.SC_OK) {        return RestApiResponseHandler.getResponseJsonOk("{\"policyId\":" + "\"" + policyId + "\"}");      } else {        String response_body=response.getEntity(String.class);        if (response.getStatus() == HttpServletResponse.SC_BAD_REQUEST) {          logger.info("Get back-end server bad request error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        } else {          logger.info("Get back-end server error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        }      }    } catch (    Exception e) {      logger.info("error in update policy : " + e.getMessage());      return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context,e),LocaleUtil.getLocale(httpServletRequest));    }  } else {    logger.info("Create new policy and attach it with application");    try {      request_url=server_url + "/resources/policies?org=" + orgSpace.get(CloudFoundryManager.ORG_GUID)+ "&space="+ orgSpace.get(CloudFoundryManager.SPACE_GUID);      WebResource webResource=client.resource(request_url);      String authorization=ConfigManager.getInternalAuthToken();      ClientResponse response=webResource.header("Authorization","Basic " + authorization).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,new_json);      String response_body=response.getEntity(String.class);      JsonNode body_map=objectMapper.readTree(response_body);      if (response.getStatus() == HttpServletResponse.SC_CREATED) {        policyId=body_map.get("policyId").asText();      } else {        response_body=response.getEntity(String.class);        if (response.getStatus() == HttpServletResponse.SC_BAD_REQUEST) {          logger.info("Get back-end server bad request error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        } else {          logger.info("Get back-end server error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        }      }      request_url=server_url + "/resources/apps/" + app_id;      webResource=client.resource(request_url);      String new_jsonstring="{\"policyId\":" + "\"" + policyId + "\","+ "\"state\":"+ "\""+ "enabled"+ "\"}";      response=webResource.header("Authorization","Basic " + authorization).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,new_jsonstring);      response_body=response.getEntity(String.class);      if (response.getStatus() == HttpServletResponse.SC_OK) {        return RestApiResponseHandler.getResponseCreatedOk("{\"policyId\":" + "\"" + policyId + "\"}");      } else {        response_body=response.getEntity(String.class);        if (response.getStatus() == HttpServletResponse.SC_BAD_REQUEST) {          logger.info("Get back-end server bad request error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        } else {          logger.info("Get back-end server error  : " + response.getStatus() + " with response body: "+ response_body);          return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context),LocaleUtil.getLocale(httpServletRequest));        }      }    } catch (    Exception e) {      logger.info("error in create policy and attach : " + e.getMessage());      return RestApiResponseHandler.getResponseInternalServerError(new InternalServerErrorException(MessageUtil.RestResponseErrorMsg_create_policy_in_Create_Policy_context,e),LocaleUtil.getLocale(httpServletRequest));    }  }}  }
class C{  public static Test suite(){  return (new TestSuite(ValueChangeListenerITCase.class));}  }
class C{  public boolean isVnicConfigSupported(){  return vnicConfigSupported;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  double noDataImage2=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  Object[] images;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  double image1TotalDeviation=0;  double image2TotalDeviation=0;  double totalProductDeviations=0;  double[][] correlationMatrix;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    correlationMatrix=new double[numImages][numImages];    for (a=0; a < numImages; a++) {      for (b=0; b < numImages; b++) {        correlationMatrix[a][b]=-99;      }    }    double[] data;    double[] data2;    updateProgress("Calculating image averages:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    updateProgress("Calculating the correlation matrix:",0);    i=0;    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      for (b=0; b <= i; b++) {        if (a == b) {          correlationMatrix[a][b]=1.0;        } else {          image1TotalDeviation=0;          image2TotalDeviation=0;          totalProductDeviations=0;          image2=new WhiteboxRaster(imageFiles[b],"r");          noDataImage2=image2.getNoDataValue();          for (row=0; row < rows; row++) {            data=image.getRowValues(row);            data2=image2.getRowValues(row);            for (col=0; col < cols; col++) {              if (data[col] != noData && data2[col] != noDataImage2) {                image1TotalDeviation+=(data[col] - imageAverages[a]) * (data[col] - imageAverages[a]);                image2TotalDeviation+=(data2[col] - imageAverages[b]) * (data2[col] - imageAverages[b]);                totalProductDeviations+=(data[col] - imageAverages[a]) * (data2[col] - imageAverages[b]);              }            }            if (cancelOp) {              cancelOperation();              return;            }          }          image2.close();          correlationMatrix[a][b]=totalProductDeviations / (Math.sqrt(image1TotalDeviation * image2TotalDeviation));        }      }      i++;      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating the correlation matrix:",(int)progress);    }    String retstr=null;    retstr="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numImages; a++) {      headers=headers + "Image" + (a + 1)+ "\t";    }    retstr+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\nImage" + (a + 1)+ "\t";      for (b=0; b < numImages; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            retstr=retstr + "  " + df.format(correlationMatrix[a][b])+ "\t";          } else {            retstr=retstr + df.format(correlationMatrix[a][b]) + "\t";          }        } else {          retstr=retstr + "\t";        }      }    }    retstr=retstr + "\n\n";    String shortFileName;    int j, k;    for (a=0; a < numImages; a++) {      j=imageFiles[a].toString().lastIndexOf(File.separator);      k=imageFiles[a].toString().lastIndexOf(".");      shortFileName=imageFiles[a].toString().substring(j + 1,k);      retstr=retstr + "Image" + (a + 1)+ " = "+ shortFileName+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.195 -0500",hash_original_method="172D4BA10AB000BE273AA7D695E5C087",hash_generated_method="675665531A005AF15842D70D6F7DDA9A") public static int parseInt(String string) throws NumberFormatException {  return string.getTaintInt();}  }
class C{  protected VPlexVirtualVolumeInfo findVirtualVolumeAndUpdateInfo(String virtualVolumeName){  return _virtualVolumeMgr.findVirtualVolumeAndUpdateInfo(virtualVolumeName,null);}  }
class C{  public int nextInt(int N,int s,int n){  return nextInt(N,s,n,this.randomGenerator);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/hello",produces="text/plain") public String hello(){  String where=producer.request(String.class);  return "Hello from Spring Boot and Camel. We are at: " + where;}  }
class C{  void displayStatusDialog(Window w,String status){  ToolDialog sd=new ToolDialog(PolicyTool.getMessage("Status"),tool,this,true);  Point location=((w == null) ? getLocationOnScreen() : w.getLocationOnScreen());  sd.setLayout(new GridBagLayout());  JLabel label=new JLabel(status);  addNewComponent(sd,label,0,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH);  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  ActionListener okListener=new StatusOKButtonListener(sd);  okButton.addActionListener(okListener);  addNewComponent(sd,okButton,1,0,1,1,1,0.0,0.0,GridBagConstraints.VERTICAL);  sd.getRootPane().setDefaultButton(okButton);  sd.getRootPane().registerKeyboardAction(okListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  sd.pack();  sd.setLocationRelativeTo(w);  sd.setVisible(true);}  }
class C{  private int doImportKeyStoreSingle(KeyStore srckeystore,String alias) throws Exception {  String newAlias=(dest == null) ? alias : dest;  if (keyStore.containsAlias(newAlias)) {    Object[] source={alias};    if (noprompt) {      System.err.println(new MessageFormat(rb.getString("Warning.Overwriting.existing.alias.alias.in.destination.keystore")).format(source));    } else {      String reply=getYesNoReply(new MessageFormat(rb.getString("Existing.entry.alias.alias.exists.overwrite.no.")).format(source));      if ("NO".equals(reply)) {        newAlias=inputStringFromStdin(rb.getString("Enter.new.alias.name.RETURN.to.cancel.import.for.this.entry."));        if ("".equals(newAlias)) {          System.err.println(new MessageFormat(rb.getString("Entry.for.alias.alias.not.imported.")).format(source));          return 0;        }      }    }  }  Pair<Entry,char[]> objs=recoverEntry(srckeystore,alias,srcstorePass,srckeyPass);  Entry entry=objs.fst;  PasswordProtection pp=null;  char[] newPass=null;  if (destKeyPass != null) {    newPass=destKeyPass;    pp=new PasswordProtection(destKeyPass);  } else   if (objs.snd != null) {    newPass=objs.snd;    pp=new PasswordProtection(objs.snd);  }  try {    keyStore.setEntry(newAlias,entry,pp);    if (P12KEYSTORE.equalsIgnoreCase(storetype)) {      if (newPass != null && !Arrays.equals(newPass,storePass)) {        throw new Exception(rb.getString("The.destination.pkcs12.keystore.has.different.storepass.and.keypass.Please.retry.with.destkeypass.specified."));      }    }    return 1;  } catch (  KeyStoreException kse) {    Object[] source2={alias,kse.toString()};    MessageFormat form=new MessageFormat(rb.getString("Problem.importing.entry.for.alias.alias.exception.Entry.for.alias.alias.not.imported."));    System.err.println(form.format(source2));    return 2;  }}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff){  long A=bytesToWord(in,inOff) + _S[0];  long B=bytesToWord(in,inOff + bytesPerWord) + _S[1];  for (int i=1; i <= _noRounds; i++) {    A=rotateLeft(A ^ B,B) + _S[2 * i];    B=rotateLeft(B ^ A,A) + _S[2 * i + 1];  }  wordToBytes(A,out,outOff);  wordToBytes(B,out,outOff + bytesPerWord);  return 2 * bytesPerWord;}  }
class C{  public void workflowtransition(final Challan challan,final Position position,final String actionName,final String remarks) throws ApplicationRuntimeException {  if (challan.getState() == null && CollectionConstants.WF_ACTION_NAME_NEW_CHALLAN.equals(actionName)) {    challan.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_CREATED));    challan.transition().start().withComments(CollectionConstants.CHALLAN_CREATION_REMARKS).withStateValue(CollectionConstants.WF_STATE_CREATE_CHALLAN).withOwner(position).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());  }  if (CollectionConstants.WF_ACTION_NAME_MODIFY_CHALLAN.equals(actionName)) {    challan.transition(true).withComments(CollectionConstants.CHALLAN_CREATION_REMARKS).withStateValue(CollectionConstants.WF_STATE_CREATE_CHALLAN).withOwner(position).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());    LOGGER.debug("Challan Workflow Started.");  }  if (CollectionConstants.WF_ACTION_NAME_APPROVE_CHALLAN.equals(actionName)) {    challan.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_APPROVED));    challan.transition(true).withComments(remarks).withStateValue(CollectionConstants.WF_STATE_APPROVE_CHALLAN).withOwner(position).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());  }  if (CollectionConstants.WF_ACTION_NAME_VALIDATE_CHALLAN.equals(actionName))   challan.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_VALIDATED));  if (CollectionConstants.WF_ACTION_NAME_REJECT_CHALLAN.equals(actionName)) {    challan.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_REJECTED));    challan.transition(true).withComments(remarks).withStateValue(CollectionConstants.WF_STATE_REJECTED_CHALLAN).withOwner(collectionsUtil.getPositionOfUser(challan.getCreatedBy())).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());  }  if (CollectionConstants.WF_ACTION_NAME_CANCEL_CHALLAN.equals(actionName)) {    challan.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_CHALLAN,CollectionConstants.CHALLAN_STATUS_CODE_CANCELLED));    challan.transition().end().withComments(remarks).withStateValue(CollectionConstants.WF_STATE_CANCEL_CHALLAN).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());  }  if (CollectionConstants.WF_ACTION_NAME_CANCEL_CHALLAN.equals(actionName) || (CollectionConstants.WF_ACTION_NAME_VALIDATE_CHALLAN.equals(actionName) && challan.getState() != null)) {    challan.transition().end().withComments("End of challan worklow").withStateValue(CollectionConstants.WF_STATE_END).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());    LOGGER.debug("End of Challan Workflow.");  }  if (challan.getState() == null && CollectionConstants.WF_ACTION_NAME_VALIDATE_CHALLAN.equals(actionName)) {    challan.transition().start().end().withComments("End of challan worklow").withStateValue(CollectionConstants.WF_STATE_END).withSenderName(challan.getCreatedBy().getUsername() + "::" + challan.getCreatedBy().getName()).withDateInfo(new Date());    LOGGER.debug("End of Challan Workflow.");  }  persist(challan);}  }
class C{  private HttpURLConnection requestReservation(){  try {    connection=HttpTransportManager.openConnection(url,basicAuthUsername,basicAuthPassword);    connection.setUseCaches(false);    connection.setConnectTimeout(httpTimeout);    connection.setReadTimeout(httpTimeout);    connection.setRequestMethod("HEAD");    analyzeResponseCode(connection.getResponseCode());  } catch (  IOException ex) {    throw new IoException(ex);  }  return connection;}  }
class C{  public void testContinuousMode() throws Exception {  processTest(DeploymentMode.CONTINUOUS);}  }
class C{  public void addReply(final String trigger,final String text,final ChatAction action){  add(ConversationStates.ATTENDING,trigger,null,ConversationStates.ATTENDING,text,action);}  }
class C{  public YIntervalSeriesImproved(Comparable<?> key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  public boolean markAsSpam(final SlingHttpServletRequest request,final String id){  boolean result=false;  try {    final ResourceResolver resolver=request.getResourceResolver();    final Session session=resolver.adaptTo(Session.class);    final Node node=session.getNodeByIdentifier(id);    if (node != null) {      final Resource resource=resolver.getResource(node.getPath());      result=akismetService.submitSpam(resource);    }  } catch (  RepositoryException e) {    LOGGER.error("Could not submit spam.",e);  }  return result;}  }
class C{  public String globalInfo(){  return "CfsSubsetEval :\n\nEvaluates the worth of a subset of attributes " + "by considering the individual predictive ability of each feature " + "along with the degree of redundancy between them.\n\n"+ "Subsets of features that are highly correlated with the class "+ "while having low intercorrelation are preferred.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void updateAdapter(){  if (mRxAdapter != null) {    mRxAdapter.updateDataSet(mDataSet);  } else   if (mRxAdapterForTypes != null) {    mRxAdapterForTypes.updateDataSet(mDataSet);  }}  }
class C{  protected NamedList<Object> encodeSnippets(String[] keys,String[] fieldNames,Map<String,String[]> snippets){  NamedList<Object> list=new SimpleOrderedMap<>();  for (int i=0; i < keys.length; i++) {    NamedList<Object> summary=new SimpleOrderedMap<>();    for (    String field : fieldNames) {      String snippet=snippets.get(field)[i];      if (snippet == null) {        summary.add(field,new String[0]);      } else {        summary.add(field,new String[]{snippet});      }    }    list.add(keys[i],summary);  }  return list;}  }
class C{  public NTSidGroupPrincipal(String name){  super(name);}  }
class C{  public static JAXBContext initJAXBContext(Class<?>... classesToBeBound){  try {    return JAXBContext.newInstance(classesToBeBound);  } catch (  JAXBException e) {    throw ErrorCodes.translateException(e);  }}  }
class C{  protected Anonymous_traceType_1_Impl(){  super();}  }
class C{  public static void hideProgress(View view){  pool.hideProgress(view);}  }
class C{  public List<Object> serialize(){  List<Object> serialized=new ArrayList<>();  serialized.add(actions);  serialized.add(timestamps);  List<Object> serializedFunnelSteps=new ArrayList<>();  for (  Set e : funnelSteps) {    serializedFunnelSteps.addAll(e);    serializedFunnelSteps.add(null);  }  serialized.add(serializedFunnelSteps);  return serialized;}  }
class C{  public void open() throws Exception {  rtpReceiver=new RtpPacketReceiver(localPort,rtcpSession,RTP_SOCKET_TIMEOUT);  rtpReceiver.start();  rtcpReceiver=new RtcpPacketReceiver(localPort + 1,rtcpSession);  rtcpReceiver.start();  rtcpTransmitter=new RtcpPacketTransmitter(remoteAddress,remotePort + 1,rtcpSession,rtcpReceiver.getConnection());  rtcpTransmitter.start();  isClosed=false;}  }
class C{  protected Pair<PropositionSymbol,Boolean> findUnitClause(Set<Clause> clauses,Model model){  Pair<PropositionSymbol,Boolean> result=null;  for (  Clause c : clauses) {    Literal unassigned=null;    if (c.isUnitClause()) {      unassigned=c.getLiterals().iterator().next();    } else {      for (      Literal l : c.getLiterals()) {        Boolean value=model.getValue(l.getAtomicSentence());        if (value == null) {          if (unassigned == null) {            unassigned=l;          } else {            unassigned=null;            break;          }        }      }    }    if (unassigned != null) {      result=new Pair<PropositionSymbol,Boolean>(unassigned.getAtomicSentence(),unassigned.isPositiveLiteral());      break;    }  }  return result;}  }
class C{  @Override public boolean needsMaterialization(){  return true;}  }
class C{  public void removeExtra(String name){  if (mExtras != null) {    mExtras.remove(name);    if (mExtras.size() == 0) {      mExtras=null;    }  }}  }
class C{  public FolderTokenRelFld findById(int fldId) throws Exception {  int i;  FolderTokenRelFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public void paintArrowButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public URL resolveRepoURL(URL url){  try {    if ("file".equalsIgnoreCase(url.getProtocol())) {      if (url.getHost() == null || "".equals(url.getHost())) {        Path path=PathUtils.get(repoFiles,url.toURI());        if (path == null) {          return null;        }        return path.toUri().toURL();      }      return null;    } else     if ("jar".equals(url.getProtocol())) {      String file=url.getFile();      int pos=file.indexOf("!/");      if (pos < 0) {        return null;      }      String jarTail=file.substring(pos);      String filePath=file.substring(0,pos);      URL internalUrl=new URL(filePath);      URL normalizedUrl=resolveRepoURL(internalUrl);      if (normalizedUrl == null) {        return null;      }      return new URL("jar","",normalizedUrl.toExternalForm() + jarTail);    } else {      return null;    }  } catch (  MalformedURLException ex) {    return null;  }catch (  URISyntaxException ex) {    return null;  }}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void displayToast(String text,String extraInfo,boolean showPrefix){  sToastHandler.post(new DisplayToast(text,extraInfo,sUiContext,showPrefix));}  }
class C{  private void handleTeleportMessage(String path){  if (path.equals("/cities")) {    syncCitiesToWear();  } else   if (path.startsWith("tickets")) {    syncTicketsToWear(path);  } else   if (path.startsWith("sentTicket")) {    sentTicket(path);  } else   if (path.startsWith("openTicket")) {    openTicketInPhone(path);  }}  }
class C{  protected final V wrapKey(Object o){  return (V)o;}  }
class C{  public static double distance(Point p1,Point p2){  int dx=p2.x - p1.x;  int dy=p2.y - p1.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  @Override public synchronized void addDataSourceListener(DataSourceListener dsl){  m_listeners.addElement(dsl);}  }
class C{  public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){  final BufferedImage image=AnnotationFactory.getIcon(form);  if (image != null) {    final GraphicsState gs=new GraphicsState();    final int iconHeight=image.getHeight();    final int iconWidth=image.getWidth();    final float[] rect=form.getFloatArray(PdfDictionary.Rect);    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {      rect[2]=rect[0] + iconWidth;      rect[1]=rect[3] - iconHeight;      form.setFloatArray(PdfDictionary.Rect,rect);    }switch (rotation % 360) {case 0:      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};    gs.x=rect[0];  gs.y=rect[3] - iconHeight;gs.CTM[2][0]=rect[0];gs.CTM[2][1]=rect[3] - iconHeight;break;case 90:gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};gs.x=rect[0] + iconHeight;gs.y=rect[3];gs.CTM[2][0]=rect[0] + iconHeight;gs.CTM[2][1]=rect[3];break;case 180:gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};gs.x=rect[0];gs.y=rect[3] + iconHeight;gs.CTM[2][0]=rect[0];gs.CTM[2][1]=rect[3] + iconHeight;break;case 270:gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};gs.x=rect[0] - iconHeight;gs.y=rect[3];gs.CTM[2][0]=rect[0] - iconHeight;gs.CTM[2][1]=rect[3];break;}if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);}current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);}}}  }
class C{  public String bPartnerBill(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer bill_BPartner_ID=(Integer)value;  if (bill_BPartner_ID == null || bill_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + "p.M_PriceList_ID,p.PaymentRule,p.POReference," + "p.SO_Description,p.IsDiscountPrinted,"+ "p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,"+ "p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ "c.AD_User_ID,"+ "p.PO_PriceList_ID, p.PaymentRulePO, p.PO_PaymentTerm_ID,"+ "lbill.C_BPartner_Location_ID AS Bill_Location_ID "+ "FROM C_BPartner p"+ " LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')"+ " LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) "+ "WHERE p.C_BPartner_ID=? AND p.IsActive='Y'";  boolean IsSOTrx="Y".equals(Env.getContext(ctx,WindowNo,"IsSOTrx"));  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,bill_BPartner_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      Integer ii=new Integer(rs.getInt(IsSOTrx ? "M_PriceList_ID" : "PO_PriceList_ID"));      if (!rs.wasNull())       mTab.setValue("M_PriceList_ID",ii); else {        int i=Env.getContextAsInt(ctx,"#M_PriceList_ID");        if (i != 0)         mTab.setValue("M_PriceList_ID",new Integer(i));      }      int bill_Location_ID=rs.getInt("Bill_Location_ID");      if (bill_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String loc=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID");        if (loc.length() > 0)         bill_Location_ID=Integer.parseInt(loc);      }      if (bill_Location_ID == 0)       mTab.setValue("Bill_Location_ID",null); else       mTab.setValue("Bill_Location_ID",new Integer(bill_Location_ID));      int contID=rs.getInt("AD_User_ID");      if (bill_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String cont=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"AD_User_ID");        if (cont.length() > 0)         contID=Integer.parseInt(cont);      }      if (contID == 0)       mTab.setValue("Bill_User_ID",null); else       mTab.setValue("Bill_User_ID",new Integer(contID));      if (IsSOTrx) {        double CreditLimit=rs.getDouble("SO_CreditLimit");        if (CreditLimit != 0) {          double CreditAvailable=rs.getDouble("CreditAvailable");          if (!rs.wasNull() && CreditAvailable < 0)           mTab.fireDataStatusEEvent("CreditLimitOver",DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),false);        }      }      String s=rs.getString("POReference");      if (s != null && s.length() != 0)       mTab.setValue("POReference",s); else       mTab.setValue("POReference",null);      s=rs.getString("SO_Description");      if (s != null && s.trim().length() != 0)       mTab.setValue("Description",s);      s=rs.getString("IsDiscountPrinted");      if (s != null && s.length() != 0)       mTab.setValue("IsDiscountPrinted",s); else       mTab.setValue("IsDiscountPrinted","N");      String OrderType=Env.getContext(ctx,WindowNo,"OrderType");      mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_AfterDelivery);      mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_OnCredit);      if (OrderType.equals(MOrder.DocSubTypeSO_Prepay))       mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_Immediate); else       if (OrderType.equals(MOrder.DocSubTypeSO_POS))       mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_Cash); else {        s=rs.getString(IsSOTrx ? "PaymentRule" : "PaymentRulePO");        if (s != null && s.length() != 0) {          if (s.equals("B"))           s="P";          if (IsSOTrx && (s.equals("S") || s.equals("U")))           s="P";          mTab.setValue("PaymentRule",s);        }        ii=new Integer(rs.getInt(IsSOTrx ? "C_PaymentTerm_ID" : "PO_PaymentTerm_ID"));        if (!rs.wasNull())         mTab.setValue("C_PaymentTerm_ID",ii);        s=rs.getString("InvoiceRule");        if (s != null && s.length() != 0)         mTab.setValue("InvoiceRule",s);      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"bPartnerBill",e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  public ShortConverter(){  super(false);}  }
class C{  public static String highlightStream(String name,InputStream input,String rendererName,String encoding) throws IOException {  Renderer jspRenderer=XhtmlRendererFactory.getRenderer(rendererName);  if (jspRenderer != null) {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    jspRenderer.highlight(name,input,bos,encoding,true);    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    Tokenizer tokenizer=new Tokenizer(new InputStreamReader(bis,encoding));    tokenizer.addSymbol(new TokenizerSymbol("EOL","\n",null,false,false,true,false));    tokenizer.addSymbol(new TokenizerSymbol("EOL","\r\n",null,false,false,true,false));    StringBuilder buffer=new StringBuilder();    long counter=0;    while (tokenizer.hasMore()) {      Token tk=tokenizer.nextToken();      if ("EOL".equals(tk.getName())) {        counter++;        buffer.append(tk.getText());      } else       if (counter > 0) {        buffer.append("<span class=\"codeline\">");        buffer.append("<span class=\"linenum\">");        buffer.append(leftPad(Long.toString(counter),6,"&nbsp;"));        buffer.append("</span>");        buffer.append(tk.getText());        buffer.append("</span>");      }    }    return buffer.toString();  }  return null;}  }
class C{  public boolean forceReparsing(Parser parser){  for (int i=0; i < getParserCount(); i++) {    if (getParser(i) == parser) {      forceReparsing(i);      return true;    }  }  return false;}  }
class C{  private void validateStoragePolicyFilter(StoragePolicyFilter storagePolicyFilter) throws IllegalArgumentException {  Assert.notNull(storagePolicyFilter,"A storage policy filter must be specified.");  if (storagePolicyFilter.getNamespace() != null) {    storagePolicyFilter.setNamespace(storagePolicyFilter.getNamespace().trim());  }  if (storagePolicyFilter.getBusinessObjectDefinitionName() != null) {    storagePolicyFilter.setBusinessObjectDefinitionName(storagePolicyFilter.getBusinessObjectDefinitionName().trim());  }  Assert.isTrue((StringUtils.isNotBlank(storagePolicyFilter.getNamespace()) && StringUtils.isNotBlank(storagePolicyFilter.getBusinessObjectDefinitionName())) || (StringUtils.isBlank(storagePolicyFilter.getNamespace()) && StringUtils.isBlank(storagePolicyFilter.getBusinessObjectDefinitionName())),"Business object definition name and namespace must be specified together.");  if (storagePolicyFilter.getBusinessObjectFormatUsage() != null) {    storagePolicyFilter.setBusinessObjectFormatUsage(storagePolicyFilter.getBusinessObjectFormatUsage().trim());  }  if (storagePolicyFilter.getBusinessObjectFormatFileType() != null) {    storagePolicyFilter.setBusinessObjectFormatFileType(storagePolicyFilter.getBusinessObjectFormatFileType().trim());  }  Assert.isTrue((StringUtils.isNotBlank(storagePolicyFilter.getBusinessObjectFormatUsage()) && StringUtils.isNotBlank(storagePolicyFilter.getBusinessObjectFormatFileType())) || (StringUtils.isBlank(storagePolicyFilter.getBusinessObjectFormatUsage()) && StringUtils.isBlank(storagePolicyFilter.getBusinessObjectFormatFileType())),"Business object format usage and file type must be specified together.");  Assert.hasText(storagePolicyFilter.getStorageName(),"A storage name must be specified.");  storagePolicyFilter.setStorageName(storagePolicyFilter.getStorageName().trim());}  }
class C{  public void testDisableEscape(){  Query expected=new TermQuery(new Term("field","foo\\bar"));  assertEquals(expected,parseKeyword("foo\\bar",~ESCAPE_OPERATOR));  assertEquals(expected,parseKeyword("(foo\\bar)",~ESCAPE_OPERATOR));  assertEquals(expected,parseKeyword("\"foo\\bar\"",~ESCAPE_OPERATOR));}  }
class C{  public void addFieldConfigListener(FieldConfigListener listener){  this.listeners.add(listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.051 -0500",hash_original_method="7169306CF31D42FCC72896372081E078",hash_generated_method="F5F77E79FD679044009DB5ACA7481F3F") private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(TimeUnit.NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  boolean isInPrivateMode(){  return inPrivateMode;}  }
class C{  public Vertex processSearch(String keywords,int cascade,boolean fork,String filter,Network network,Map<String,Vertex> processed){  log("Processing search",Level.INFO,keywords);  JSONObject json=null;  try {    json=(JSONObject)processQuery("https://www.googleapis.com/freebase/v1/search?query=" + URLEncoder.encode(keywords,"UTF-8"));  } catch (  IOException exception) {    log("https request failed",Level.WARNING,exception);    return null;  }  if (json.isNullObject()) {    return null;  }  JSONArray results=json.getJSONArray("result");  if (results.isEmpty()) {    return null;  }  JSONObject first=results.getJSONObject(0);  String id=first.getString("mid");  return processId(id,cascade,fork,filter,network,processed);}  }
class C{  public ChoiceBoxItem(String label,Property<T> value,ObservableList<T> alternatives,String tooltip){  this(label,value,alternatives,tooltip,NO_DECORATOR);}  }
class C{  public GmlUpperCorner(Point copyFrom){  super(Namespaces.GML_NAMESPACE,NAME,copyFrom);}  }
class C{  private static Object compressUuid(String uuid){  Matcher matcher=COMPRESSIBLE_UUID.matcher(uuid);  if (uuid.length() == 36 && matcher.matches()) {    return Integer.valueOf(matcher.group(1));  }  return uuid;}  }
class C{  public OnExtendedStateChanged(Object source,Object key,Object value){  super(source);  this.key=key;  this.value=value;}  }
class C{  public static String escapeNewlinesForXMLAttribute(final String text){  if (text == null) {    return null;  }  final StringBuffer sb=new StringBuffer();  final int length=text.length();  for (int i=0; i < length; i++) {    final char c=text.charAt(i);    if (c == '\r') {      sb.append("&#xD;");    } else     if (c == '\n') {      sb.append("&#xA;");    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public void updateConsistencyGroupReadOnly(String cgName,String clusterName,boolean isDistributed,boolean isReadOnly){  s_logger.info("Request to update consistency group read-only on VPlex at {}",_baseURI);  List<VPlexClusterInfo> clusterInfoList=_discoveryMgr.getClusterInfoLite();  Iterator<VPlexClusterInfo> clusterInfoIter=clusterInfoList.iterator();  if (!isDistributed) {    while (clusterInfoIter.hasNext()) {      VPlexClusterInfo clusterInfo=clusterInfoIter.next();      if (!clusterInfo.getName().equals(clusterName)) {        clusterInfoIter.remove();      }    }  }  _cgMgr.setConsistencyGroupReadOnly(cgName,clusterInfoList,isReadOnly);}  }
class C{  private AggregationExceptions(){}  }
class C{  public void pauseAutoScroll(){  mHandler.removeCallbacks(ScrollRunnable);}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_POINTS_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public Metadata extract(Metadata metadata){  if (_data == null)   return metadata;  JpegCommentDirectory directory=(JpegCommentDirectory)metadata.getDirectory(JpegCommentDirectory.class);  directory.setString(JpegCommentDirectory.TAG_JPEG_COMMENT,new String(_data));  return metadata;}  }
class C{  public java.lang.StringBuffer append(float f){  internal.append(f);  return this;}  }
class C{  public Quarter(int quarter,int year){  if ((quarter < FIRST_QUARTER) || (quarter > LAST_QUARTER)) {    throw new IllegalArgumentException("Quarter outside valid range.");  }  this.year=(short)year;  this.quarter=(byte)quarter;  peg(Calendar.getInstance());}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null || !(obj instanceof Address)) {    return false;  }  return Arrays.areEqual(bytes,((Address)obj).bytes) && type == ((Address)obj).type;}  }
class C{  @Override public Type MAP(){  return mapType;}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB;}  }
class C{  public void diagnostics(){  log.finest("Thread count = " + threadCounter);  if (threadCounter.get() > 0) {    log.finest("Thread names:");synchronized (threadNames) {      for (      String name : threadNames) {        log.finest("\t" + name);      }    }  }}  }
class C{  public byte[] toByteArray(final boolean ordered,final ArrayOfItemsSerDe<T> serDe){  final boolean empty=isEmpty();  int flags=(empty ? EMPTY_FLAG_MASK : 0) | (ordered ? ORDERED_FLAG_MASK : 0) | COMPACT_FLAG_MASK;  if (empty) {    byte[] outByteArr=new byte[Long.BYTES];    Memory memOut=new NativeMemory(outByteArr);    long cumOffset=memOut.getCumulativeOffset(0L);    int preLongs=1;    insertPre0(outByteArr,cumOffset,preLongs,flags,k_,serDe.getId());    return outByteArr;  }  T[] dataArr=combinedBufferToItemsArray(ordered);  int preLongs=2;  byte[] itemsByteArr=serDe.serializeToByteArray(dataArr);  int numOutBytes=(preLongs << 3) + itemsByteArr.length;  byte[] outByteArr=new byte[numOutBytes];  Memory memOut=new NativeMemory(outByteArr);  long cumOffset=memOut.getCumulativeOffset(0L);  insertPre0(outByteArr,cumOffset,preLongs,flags,k_,serDe.getId());  insertN(outByteArr,cumOffset,n_);  memOut.putByteArray(preLongs << 3,itemsByteArr,0,itemsByteArr.length);  return outByteArr;}  }
class C{  public Complex scale(double alpha){  return new Complex(alpha * re,alpha * im);}  }
class C{  public long convertGeodeticToUPS(double latitude,double longitude){  if ((latitude < -MAX_LAT) || (latitude > MAX_LAT)) {    return UPS_LAT_ERROR;  }  if ((latitude < 0) && (latitude > MIN_SOUTH_LAT))   return UPS_LAT_ERROR;  if ((latitude >= 0) && (latitude < MIN_NORTH_LAT))   return UPS_LAT_ERROR;  if ((longitude < -PI) || (longitude > (2 * PI))) {    return UPS_LON_ERROR;  }  if (latitude < 0) {    UPS_Origin_Latitude=-MAX_ORIGIN_LAT;    Hemisphere=AVKey.SOUTH;  } else {    UPS_Origin_Latitude=MAX_ORIGIN_LAT;    Hemisphere=AVKey.NORTH;  }  polarConverter.setPolarStereographicParameters(UPS_a,UPS_f,UPS_Origin_Latitude,UPS_Origin_Longitude,false_easting,false_northing);  polarConverter.convertGeodeticToPolarStereographic(latitude,longitude);  UPS_Easting=UPS_False_Easting + polarConverter.getEasting();  UPS_Northing=UPS_False_Northing + polarConverter.getNorthing();  if (AVKey.SOUTH.equals(Hemisphere))   UPS_Northing=UPS_False_Northing - polarConverter.getNorthing();  Easting=UPS_Easting;  Northing=UPS_Northing;  return UPS_NO_ERROR;}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  public int show(){  final GridLayout gd=new GridLayout(1,true);  gd.horizontalSpacing=0;  gd.verticalSpacing=0;  gd.marginHeight=gd.marginWidth=0;  this.shell.setLayout(gd);  this.messageArea.render();  this.footerArea.render();  if (this.title != null) {    this.shell.setText(this.title);  }  pack();  this.shell.open();  final Display display=this.shell.getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return this.footerArea.getSelectedButton();}  }
class C{  public DtoBrandServiceImpl(final GenericService<Brand> brandGenericService,final DtoFactory dtoFactory,final DtoAttributeService dtoAttributeService,final GenericDAO<AttrValueEntityBrand,Long> attrValueEntityBrandDao,final ImageService imageService,final AdaptersRepository adaptersRepository,final SystemService systemService){  super(dtoFactory,brandGenericService,adaptersRepository);  this.systemService=systemService;  this.attrValueAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(AttrValueBrandDTO.class),brandGenericService.getGenericDao().getEntityFactory().getImplClass(AttrValueBrand.class));  this.dtoAttributeService=dtoAttributeService;  this.attrValueEntityBrandDao=attrValueEntityBrandDao;  this.imageService=imageService;}  }
class C{  public static RxANRequest.PostRequestBuilder post(String url){  return new RxANRequest.PostRequestBuilder(url);}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("LoadBankStatement.doIt");  String message="@Error@";  m_controller=new MBankStatementLoader(m_ctx,m_C_BankStmtLoader_ID,fileName,get_TrxName());  log.info(m_controller.toString());  if (m_controller == null || m_controller.get_ID() == 0)   log.log(Level.SEVERE,"Invalid Loader"); else   if (!m_controller.loadLines())   log.log(Level.SEVERE,m_controller.getErrorMessage() + " - " + m_controller.getErrorDescription()); else {    log.info("Imported=" + m_controller.getLoadCount());    addLog(0,null,new BigDecimal(m_controller.getLoadCount()),"@Loaded@");    message="@OK@";  }  return message;}  }
class C{  private void emitField(DocComment comment){  xml.append("\n<field name='");  xml.append(comment.getName());  xml.append("' fullname='");  xml.append(comment.getFullname());  xml.append("' type='");  String type=comment.getVartype();  if (type != null)   xml.append(comment.getVartype());  xml.append("' isStatic='");  xml.append(comment.isStatic());  xml.append("' isConst='");  xml.append(comment.isConst());  xml.append("' ");  String defaultValue=comment.getDefaultValue();  if (defaultValue != null) {    xml.append("defaultValue='");    try {      Pattern pattern=Pattern.compile("\\p{Cntrl}");      Matcher matcher=pattern.matcher(defaultValue);      defaultValue=matcher.replaceAll("");    } catch (    Exception ex) {    }    xml.append(defaultValue);    xml.append("' ");  }  xml.append(">");  String desc=comment.getDescription();  if (desc != null)   appendTag("description",comment.getDescription());  emitTags(comment.getAllTags());  if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata());  xml.append("\n</field>");}  }
class C{  public <Builder extends LCSBuilder>Builder decodePath(Builder builder){  Decoder decoder=new Decoder(getXSize(),getYSize(),builder);  int index=myCornerIndex;  while (index != -1) {    int encodedStep=mySteps[index];    decoder.decode(encodedStep);    index=myPrevSteps[index];  }  decoder.beforeFinish();  return builder;}  }
class C{  @Deprecated protected void initialize(Variable variable){  variable.randomize();}  }
class C{  public UserResource user(){  return user;}  }
class C{  @Override public <U>TStream<U> aggregate(BiFunction<List<T>,K,U> processor){  processor=Functions.synchronizedBiFunction(processor);  Window<T,K,InsertionTimeList<T>> window=Windows.window(alwaysInsert(),scheduleEvictIfEmpty(time,unit),evictOlderWithProcess(time,unit),processOnInsert(),getKeyFunction(),insertionTimeList());  Aggregate<T,U,K> op=new Aggregate<T,U,K>(window,processor);  return feeder().pipe(op);}  }
class C{  @Override public String toString(){  return m_Content.toString();}  }
class C{  protected void Predicate() throws javax.xml.transform.TransformerException {  if (tokenIs('[')) {    nextToken();    PredicateExpr();    consumeExpected(']');  }}  }
class C{  public boolean isPainting(){  return painting;}  }
class C{  public void log(String message){  write(message,MSG_LOG);}  }
class C{  private void createOrUpdateSubpart(HttpServletRequest request,org.hibernate.Session hibSession,SimpleItypeConfig sic,InstrOfferingConfig ioc,SchedulingSubpart parent,RoomGroup rg,HashMap notDeletedSubparts) throws Exception {  String subpartId=request.getParameter("subpartId" + sic.getId());  String minLimitPerClass=request.getParameter("mnlpc" + sic.getId());  String maxLimitPerClass=request.getParameter("mxlpc" + sic.getId());  String minPerWk=request.getParameter("mpw" + sic.getId());  String numClasses=request.getParameter("nc" + sic.getId());  String numRooms=request.getParameter("nr" + sic.getId());  String roomRatio=request.getParameter("rr" + sic.getId());  String managingDept=request.getParameter("md" + sic.getId());  String disabled=request.getParameter("disabled" + sic.getId());  if (subpartId != null)   sic.setSubpartId(Long.parseLong(subpartId));  if (minLimitPerClass != null)   sic.setMinLimitPerClass(Constants.getPositiveInteger(minLimitPerClass,0));  if (maxLimitPerClass != null)   sic.setMaxLimitPerClass(Constants.getPositiveInteger(maxLimitPerClass,0));  if (minPerWk != null)   sic.setMinPerWeek(Integer.parseInt(minPerWk));  if (numClasses != null)   sic.setNumClasses(Integer.parseInt(numClasses));  if (numRooms != null)   sic.setNumRooms(Constants.getPositiveInteger(numRooms,0));  if (roomRatio != null)   sic.setRoomRatio(Constants.getPositiveFloat(roomRatio,0.0f));  if (managingDept != null)   sic.setManagingDeptId(Long.parseLong(managingDept));  if (disabled != null)   sic.setDisabled(new Boolean(request.getParameter("disabled" + sic.getId())).booleanValue());  long sid=sic.getSubpartId();  int mnlpc=sic.getMinLimitPerClass();  int mxlpc=sic.getMaxLimitPerClass();  int mpw=sic.getMinPerWeek();  int nr=sic.getNumRooms();  float rr=sic.getRoomRatio();  long md=sic.getManagingDeptId();  boolean db=sic.isDisabled();  if (ioc.isUnlimitedEnrollment().booleanValue()) {    mnlpc=0;    mxlpc=0;    nr=0;    rr=0;  }  if (request.getParameter("varLimits") == null) {    mnlpc=mxlpc;  }  SchedulingSubpart subpart=null;  if (sid < 0) {    Debug.debug("Subpart does not exist ... Creating subpart - " + sic.getItype().getDesc());    subpart=new SchedulingSubpart();    subpart.setInstrOfferingConfig(ioc);    subpart.setItype(sic.getItype());    subpart.setMinutesPerWk(new Integer(mpw));    subpart.setParentSubpart(parent);    subpart.setAutoSpreadInTime(ApplicationProperty.SchedulingSubpartAutoSpreadInTimeDefault.isTrue());    subpart.setStudentAllowOverlap(ApplicationProperty.SchedulingSubpartStudentOverlapsDefault.isTrue());    ioc.addToschedulingSubparts(subpart);    if (md < 0 && !ioc.isUnlimitedEnrollment().booleanValue() && rg != null) {      HashSet prefs=new HashSet();      RoomGroupPref rgp=new RoomGroupPref();      rgp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(PreferenceLevel.PREF_LEVEL_REQUIRED)));      rgp.setRoomGroup(rg);      rgp.setOwner(subpart);      prefs.add(rgp);      subpart.setPreferences(prefs);    }    hibSession.saveOrUpdate(subpart);    hibSession.flush();    hibSession.refresh(subpart);    sid=subpart.getUniqueId().longValue();    Debug.debug("New subpart uniqueid: " + sid);    sic.setSubpartId(sid);    notDeletedSubparts.put(new Long(sid),"");  } else {    Debug.debug("Subpart exists ... Updating");    notDeletedSubparts.put(new Long(sid),"");    Set s=ioc.getSchedulingSubparts();    for (Iterator i=s.iterator(); i.hasNext(); ) {      SchedulingSubpart tmpSubpart=(SchedulingSubpart)i.next();      if (tmpSubpart.getUniqueId().longValue() == sid) {        subpart=tmpSubpart;        break;      }    }    if (subpart == null)     throw new Exception("Scheduling Subpart " + sid + " was not found.");    Debug.debug("Creating / Updating subpart - " + subpart.getItypeDesc());    Set classes=subpart.getClasses();    if (!db) {      if (subpart.getMinutesPerWk().intValue() != mpw) {        Debug.debug("Minutes per week changed ... Deleting time prefs on subpart and classes");        subpart.setMinutesPerWk(new Integer(mpw));      }      boolean managerChanged=false;      long mdId=md;      if (md < 0) {        mdId=subpart.getInstrOfferingConfig().getControllingCourseOffering().getSubjectArea().getDepartment().getUniqueId().longValue();      }      if (subpart.getManagingDept().getUniqueId().longValue() != mdId) {        Debug.debug("Subpart Managing department changed ...");        managerChanged=true;        subpart.deleteAllDistributionPreferences(hibSession);        Set prefs=subpart.getPreferences();        for (Iterator prefI=prefs.iterator(); prefI.hasNext(); ) {          Object a=prefI.next();          if (a instanceof RoomPref || a instanceof BuildingPref || a instanceof RoomGroupPref|| a instanceof RoomFeaturePref) {            prefI.remove();          }          if (a instanceof TimePref) {            Department mgDept=new DepartmentDAO().get(new Long(mdId));            if (mgDept.isExternalManager().booleanValue()) {              if (subpart.getControllingDept().isAllowReqTime() == null || !subpart.getControllingDept().isAllowReqTime().booleanValue()) {                if (mgDept.isAllowReqTime() == null || !mgDept.isAllowReqTime().booleanValue()) {                  ((TimePref)a).weakenHardPreferences();                }              }            }          }        }        if (md < 0 && !ioc.isUnlimitedEnrollment().booleanValue() && rg != null) {          RoomGroupPref rgp=new RoomGroupPref();          rgp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(PreferenceLevel.PREF_LEVEL_REQUIRED)));          rgp.setRoomGroup(rg);          rgp.setOwner(subpart);          prefs.add(rgp);        }      }      for (Iterator i=classes.iterator(); i.hasNext(); ) {        Debug.debug("Updating expected capacity and room capacity on class ...");        Class_ c=(Class_)i.next();        c.setExpectedCapacity(new Integer(mnlpc));        c.setMaxExpectedCapacity(new Integer(mxlpc));        c.setRoomRatio(new Float(rr));        c.setNbrRooms(new Integer(nr));        if (c.getDisplayInstructor() == null) {          c.setDisplayInstructor(new Boolean(true));        }        if (c.getEnabledForStudentScheduling() == null) {          c.setEnabledForStudentScheduling(new Boolean(true));        }        if (managerChanged) {          if (c.getManagingDept().getUniqueId().longValue() != mdId) {            Debug.debug("Class Managing department changed ...");            c.setManagingDept(new DepartmentDAO().get(new Long(mdId)),sessionContext.getUser(),hibSession);            c.deleteAllDistributionPreferences(hibSession);            Set prefs=c.getPreferences();            for (Iterator prefI=prefs.iterator(); prefI.hasNext(); ) {              Object a=prefI.next();              if (a instanceof RoomPref || a instanceof BuildingPref || a instanceof RoomGroupPref|| a instanceof RoomFeaturePref) {                prefI.remove();              }              if (a instanceof TimePref) {                if (((TimePref)a).getTimePattern().getType().intValue() == TimePattern.sTypeExactTime) {                  prefI.remove();                } else {                  if (c.getManagingDept().isExternalManager().booleanValue()) {                    if (c.getControllingDept().isAllowReqTime() == null || !c.getControllingDept().isAllowReqTime().booleanValue()) {                      if (c.getManagingDept().isAllowReqTime() == null || !c.getManagingDept().isAllowReqTime().booleanValue()) {                        ((TimePref)a).weakenHardPreferences();                      }                    }                  }                }              }            }          } else {            Debug.debug("Class Managing department same as subpart ... ignoring");          }        }        hibSession.saveOrUpdate(c);      }    }    if ((parent != null && subpart.getParentSubpart() != null && !subpart.getParentSubpart().equals(parent)) || (parent == null && subpart.getParentSubpart() != null) || (parent != null && subpart.getParentSubpart() == null)) {      Debug.debug("Updating parent subparts and classes ...");      subpart.setParentSubpart(parent);      if (parent == null) {        Debug.debug("No parent subparts ... making top level class");        for (Iterator cci=subpart.getClasses().iterator(); cci.hasNext(); ) {          Class_ childClass=(Class_)cci.next();          childClass.setParentClass(null);          hibSession.saveOrUpdate(childClass);        }      } else {        Debug.debug("Parent subpart exists ... setting parent class");        ArrayList classesList=new ArrayList(classes);        Collections.sort(classesList,new ClassComparator(ClassComparator.COMPARE_BY_ID));        Set parentClasses=parent.getClasses();        int parentNumClasses=parentClasses.size();        if (parentNumClasses > 0) {          Iterator cci=classesList.iterator();          int classPerParent=classesList.size() / parentNumClasses;          int classPerParentRem=classesList.size() % parentNumClasses;          Debug.debug("Setting " + classPerParent + " class(es) per parent");          Debug.debug("Odd number of classes found - " + classPerParentRem + " classes ... ");          for (Iterator i=parentClasses.iterator(); (i.hasNext() && classPerParent != 0); ) {            Class_ parentClass=(Class_)i.next();            for (int j=0; j < classPerParent; j++) {              Class_ childClass=(Class_)cci.next();              Debug.debug("Setting class " + childClass.getClassLabel() + " to parent "+ parentClass.getClassLabel());              childClass.setParentClass(parentClass);              parentClass.addTochildClasses(childClass);              hibSession.saveOrUpdate(parentClass);              hibSession.saveOrUpdate(childClass);              if (classPerParentRem != 0) {                if (cci.hasNext()) {                  childClass=(Class_)cci.next();                  Debug.debug("Setting ODD class " + childClass.getClassLabel() + " to parent "+ parentClass.getClassLabel());                  childClass.setParentClass(parentClass);                  parentClass.addTochildClasses(childClass);                  hibSession.saveOrUpdate(parentClass);                  hibSession.saveOrUpdate(childClass);                }                --classPerParentRem;              }            }          }          if (classPerParentRem != 0) {            Iterator cci2=classesList.iterator();            for (Iterator i=parentClasses.iterator(); i.hasNext(); ) {              Class_ parentClass=(Class_)i.next();              if (cci2.hasNext()) {                Class_ childClass=(Class_)cci2.next();                Debug.debug("Setting ODD class " + childClass.getClassLabel() + " to parent "+ parentClass.getClassLabel());                childClass.setParentClass(parentClass);                parentClass.addTochildClasses(childClass);                hibSession.saveOrUpdate(parentClass);                hibSession.saveOrUpdate(childClass);              }              --classPerParentRem;              if (classPerParentRem == 0)               break;            }          }          hibSession.saveOrUpdate(parent);        }      }    }    hibSession.saveOrUpdate(subpart);    hibSession.flush();    hibSession.refresh(subpart);    if (parent != null)     hibSession.refresh(parent);  }  Vector v=sic.getSubparts();  for (int i=0; i < v.size(); i++) {    SimpleItypeConfig sic1=(SimpleItypeConfig)v.elementAt(i);    createOrUpdateSubpart(request,hibSession,sic1,ioc,subpart,rg,notDeletedSubparts);  }  hibSession.saveOrUpdate(ioc);  hibSession.flush();}  }
class C{  public void notifyTouchMode(){switch (mTouchMode) {case TOUCH_MODE_SCROLLING:    reportScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);  break;case TOUCH_MODE_FLINGING:reportScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);break;case TOUCH_MODE_IDLE:reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);break;}}  }
class C{  public boolean isAssignableFrom(JClass cl){  return getName().equals(cl.getName());}  }
class C{  public ParallaxPage recursive(boolean recursive){  this.parallaxRecursive=recursive;  return this;}  }
class C{  @Override public void nodeChanged(){  log.info("IpReconfig info/status changed. Waking up the ip reconfig procedure...");  wakeup();}  }
class C{  private void updateLocationPreferenceForXGeo(Preference preference){  ListPreference listPreference=(ListPreference)preference;  Resources res=getResources();  listPreference.setEntries(new String[]{res.getString(R.string.website_settings_permissions_allow_dse),res.getString(ContentSettingsResources.getSiteSummary(ContentSetting.BLOCK))});  listPreference.setEntryValues(new String[]{ContentSetting.DEFAULT.toString(),ContentSetting.BLOCK.toString()});  listPreference.setValueIndex(0);}  }
class C{  protected boolean shouldMove(final ILoadBalancerService loadBalancerService){  if (loadBalancerService == null)   throw new IllegalArgumentException();  final boolean highlyUtilizedService;  try {    final UUID serviceUUID=resourceManager.getDataServiceUUID();    highlyUtilizedService=loadBalancerService.isHighlyUtilizedDataService(serviceUUID);  } catch (  Exception ex) {    log.warn("Could not determine if this data service is highly utilized");    return false;  }  if (!highlyUtilizedService) {    if (log.isInfoEnabled())     log.info("Service is not highly utilized.");    return false;  }  final ResourceScores resourceScores=resourceManager.getResourceScores();  final boolean shouldMove=(resourceScores.percentCPUTime >= resourceManager.movePercentCpuTimeThreshold) || (resourceScores.majorPageFaultsPerSec > 20) || (resourceScores.dataDirBytesFree < Bytes.gigabyte * 5)|| (resourceScores.dataDirBytesFree < Bytes.gigabyte * .5);  return shouldMove;}  }
class C{  public void put(long hash,byte[] encoding,Object object){  if (last_cached == cache_size) {    last_cached=0;    cache_is_full=true;  }  int index=last_cached++;  hash|=getSuffHash(encoding);  if (cache_is_full) {    long idx_hash=(hashes[index] | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      System.out.println("WARNING! " + idx);      idx=-(idx + 1);    }    long new_hash_idx=(hash | (index + 1));    int new_idx=Arrays.binarySearch(hashes_idx,new_hash_idx);    if (new_idx >= 0) {      if (idx != new_idx) {        System.out.println("WARNING: ");        System.out.println(">> idx: " + idx + " new_idx: "+ new_idx);      }    } else {      new_idx=-(new_idx + 1);      if (new_idx > idx) {        System.arraycopy(hashes_idx,idx + 1,hashes_idx,idx,new_idx - idx - 1);        hashes_idx[new_idx - 1]=new_hash_idx;      } else       if (idx > new_idx) {        System.arraycopy(hashes_idx,new_idx,hashes_idx,new_idx + 1,idx - new_idx);        hashes_idx[new_idx]=new_hash_idx;      } else {        hashes_idx[new_idx]=new_hash_idx;      }    }  } else {    long idx_hash=(hash | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      idx=-(idx + 1);    }    idx=idx - 1;    if (idx != cache_size - index - 1) {      System.arraycopy(hashes_idx,cache_size - index,hashes_idx,cache_size - index - 1,idx - (cache_size - index) + 1);    }    hashes_idx[idx]=idx_hash;  }  hashes[index]=hash;  encodings[index]=encoding;  cache[index]=object;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.197 -0400",hash_original_method="3ED1D75FBD59CC60CED9135C2A5D60F7",hash_generated_method="C3688FB3AB846F41F6E5E74912162CD6") private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  void onEditorAction(int actionCode){  actionCode=actionCode & 0xf;  if (EditorInfo.IME_ACTION_NEXT == actionCode && mEditText != null && mEditText.mTextArea != null) {    Component next=mEditText.mTextArea.getNextFocusDown();    if (next == null) {      next=mEditText.mTextArea.getComponentForm().findNextFocusVertical(true);    }    if (next != null && next instanceof TextArea && ((TextArea)next).isEditable() && ((TextArea)next).isEnabled()) {      nextTextArea=(TextArea)next;    }  }  endEditing(REASON_IME_ACTION,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.294 -0500",hash_original_method="9E19C679A0152E7A481321FB9FD94041",hash_generated_method="E3EDDDAF09AFFD3D0D388E24CA868D38") @Override public URLConnection openConnection(URL url) throws IOException {  return openConnection(url,null);}  }
class C{  @Deprecated public String readUserKeyFromMail() throws MessagingException {  return readInformationFromMail(MAIL_SUBJECT_USER_ACCOUNT_CREATED_EN,MAIL_BODY_USERKEY_PATTERN_EN);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Context.INITIAL_CONTEXT_FACTORY);  buffer.append(" [");  buffer.append(initialContextFactory);  buffer.append("] ");  buffer.append(Context.PROVIDER_URL);  buffer.append(" [");  buffer.append(providerURL);  buffer.append("] ");  buffer.append(Context.URL_PKG_PREFIXES);  buffer.append(" [");  buffer.append(urlPkgPrefixes);  buffer.append("] SessionID [");  buffer.append(sessionID);  buffer.append("] Locale [");  buffer.append(locale);  buffer.append("]");  return buffer.toString();}  }
class C{  public Key(int type){  this();  this.type=type;}  }
class C{  public static BufferedImage renderToImage(String url,int width,int height,int bufferedImageType){  Graphics2DRenderer g2r=new Graphics2DRenderer();  g2r.setDocument(url);  Dimension dim=new Dimension(width,height);  BufferedImage buff=new BufferedImage((int)dim.getWidth(),(int)dim.getHeight(),bufferedImageType);  Graphics2D g=(Graphics2D)buff.getGraphics();  g2r.layout(g,dim);  g2r.render(g);  g.dispose();  return buff;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (resultCode == RESULT_OK) {    try {      adapter.loadServers();    } catch (    Exception e) {      e.printStackTrace();    }  }switch (requestCode) {case 1:    channel=data.getExtras().getString("channel");  Intent intent=new Intent(this,ConversationActivity.class);final Server server=adapter.getItem(positionBuffer);intent.putExtra("serverId",server.getId());intent.putExtra("NewRoom",1);intent.putExtra("channel",channel);startActivity(intent);finish();break;}}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node imported;  DocumentType docType;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();{    boolean success=false;    try {      imported=doc.importNode(docType,true);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  public PI addInstruction(String name,String value){  addAttribute(name,value);  return (this);}  }
class C{  @NonNull public IntroductionBuilder withForcedOrientation(@Orientation int orientation){  this.orientation=orientation;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Boolean isMultipleNetworkStackInstanceSupported(){  return multipleNetworkStackInstanceSupported;}  }
class C{  public static void sort(char[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  sort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LiveRef(int port){  this((new ObjID()),port);}  }
class C{  public static char[] readChars(Reader r) throws IOException {  return readFully(r).toCharArray();}  }
class C{  public boolean createHost(final String xivSystem,final String clusterName,final String hostName) throws Exception {  boolean isAvailable=findAvailability(MessageFormat.format(HOST_INSTANCE_URL,xivSystem,hostName));  if (isAvailable) {    _log.info("Host {} already exist on XIV {}. Skipping creation!",hostName,xivSystem);  } else {    String body=null;    if (null != clusterName) {      body=MessageFormat.format(HOST_CREATE_ON_CLUSTER_BODY,hostName,clusterName);    } else {      body=MessageFormat.format(HOST_CREATE_BODY,hostName);    }    ResponseValidator failureStatus=executePOSTRequest(xivSystem,MessageFormat.format(HOST_URL,xivSystem),body);    if (failureStatus.isFailed()) {      throw XIVRestException.exceptions.hostCreationFailure(xivSystem,hostName,failureStatus.toString());    }  }  return isAvailable;}  }
class C{  public StringBuilder toStringBuilder(){  return new StringBuilder(size).append(buffer,0,size);}  }
class C{  public static <T>Stream<T> empty(){  return of(Collections.<T>emptyList());}  }
class C{  public Object addToEnvironment(String key,Object value) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_ADDTOENVIRONMENTSTRING_KEY_OBJECT_VALUE_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  private void performHighlightDrag(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h != null && !h.equalTo(mLastHighlighted)) {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  public q addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected PredictiveInfoCalculatorViaMutualInfo(Class<MutualInfoCalculatorMultiVariate> miCalcClass) throws InstantiationException, IllegalAccessException {  MutualInfoCalculatorMultiVariate miCalc=miCalcClass.newInstance();  construct(miCalc);}  }
class C{  private Expression compileExtension(int opPos) throws TransformerException {  int endExtFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  java.lang.String ns=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  java.lang.String funcName=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  Function extension=new FuncExtFunction(ns,funcName,String.valueOf(getNextMethodId()));  try {    int i=0;    while (opPos < endExtFunc) {      int nextOpPos=getNextOpPos(opPos);      extension.setArg(this.compile(opPos),i);      opPos=nextOpPos;      i++;    }  } catch (  WrongNumberArgsException wnae) {    ;  }  return extension;}  }
class C{  public QueryResultParseException(String msg,long lineNo,long columnNo){  super(msg);  this.lineNo=lineNo;  this.columnNo=columnNo;}  }
class C{  public void onWakeUpFinished(){  if (DEBUG) {    Slog.d(TAG,"onWakeUpFinished");  }}  }
class C{  public static String buildRamlLocation(RamlResource resource,RamlAction action,String parameter){  String outLocation=resource.getUri();  if (action != null && action.getType() != null) {    outLocation=action.getType().name() + " " + outLocation;  }  if (StringUtils.hasText(parameter)) {    outLocation=parameter + " : " + outLocation;  }  return outLocation;}  }
class C{  public void addNode(ListItem item){  if (item != null) {    if (m_tree.isProduct()) {      MTree_NodePR node=new MTree_NodePR(m_tree,item.id);      node.saveEx();    } else     if (m_tree.isBPartner()) {      MTree_NodeBP node=new MTree_NodeBP(m_tree,item.id);      node.saveEx();    } else     if (m_tree.isMenu()) {      MTree_NodeMM node=new MTree_NodeMM(m_tree,item.id);      node.saveEx();    } else {      MTree_Node node=new MTree_Node(m_tree,item.id);      node.saveEx();    }  }}  }
class C{  public synchronized boolean hasCapabilities(List<String> capabilities){  String[] arr=new String[capabilities.size()];  capabilities.toArray(arr);  return hasCapabilities(arr);}  }
class C{  @After public void teardown(){  if (pipeline != null) {    logger.info("Shutting down pipeline...");    pipeline.shutdown(false);  }  if (runtime != null) {    logger.info("Releasing runtime...");    runtime.release();  }}  }
class C{  private PathDataEvaluator(){}  }
class C{  void updatePartitionCountMetric(){  try {    Map<SystemStream,SystemStreamMetadata> currentMetadata=getMetadata(streamsToMonitor,metadataCache);    for (    Map.Entry<SystemStream,SystemStreamMetadata> metadataEntry : initialMetadata.entrySet()) {      SystemStream systemStream=metadataEntry.getKey();      SystemStreamMetadata metadata=metadataEntry.getValue();      int currentPartitionCount=currentMetadata.get(systemStream).getSystemStreamPartitionMetadata().keySet().size();      int prevPartitionCount=metadata.getSystemStreamPartitionMetadata().keySet().size();      Gauge gauge=gauges.get(systemStream);      gauge.set(currentPartitionCount - prevPartitionCount);    }  } catch (  Exception e) {    log.error("Exception while updating partition count metric.",e);  }}  }
class C{  @BeforeClass public static void createEcomConnection(){  boolean wasException=false;  try {    _connection=new EcomConnection(createConnectionInfo(),createListener(),new CimFilterMap());  } catch (  Exception e) {    wasException=true;  }  Assert.assertFalse(wasException);}  }
class C{  public StringBuilder minify(InputStream inputStream) throws IOException {  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));  StringBuilder minified=new StringBuilder();  Boolean startOfLine=true;  while (true) {    int cInt=bufferedReader.read();    if (cInt == -1) {      break;    }    char c=(char)cInt;    if (c == '/') {      int c1=bufferedReader.read();      if (c1 == '/') {        skipUntilEndOfSingleLineComment(bufferedReader,minified);        startOfLine=true;      } else       if (c1 == '*') {        skipUntilEndOfMultiLineComment(bufferedReader,minified);      } else {        minified.append(c);        if (c1 != -1) {          minified.append((char)c1);        }      }      continue;    } else     if (c == '\'' || c == '"') {      minified.append(c);      includeUntilAfter(bufferedReader,minified,c);      startOfLine=false;      continue;    }    if (startOfLine && (c == ' ' || c == '\t')) {      continue;    }    startOfLine=(c == '\n');    minified.append(c);  }  bufferedReader.close();  return minified;}  }
class C{  private void configureReconciler(final DocumentHandle documentHandle){  final Reconciler reconciler=configuration.getReconciler();  if (reconciler != null) {    reconciler.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,reconciler);    reconciler.install(textEditor);  }}  }
class C{  @Override public Double put(Double key,Double value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  private boolean handleMessageIplResult(LocoNetMessage m){  if (LnIPLImplementation.isIplUr92IdentityReportMessage(m)) {    numUr92++;    thisone.firePropertyChange(DPLX_PC_STAT_LN_UPDATE,""," ");    waitingForIplReply=false;    return true;  } else {    return false;  }}  }
class C{  public boolean wasThemeInstalled(){  return wasThemeInstalled;}  }
class C{  public void moveItemUp(AutomationItem item){  int sequenceId=item.getSequenceId();  if (sequenceId - 1 <= 0) {    item.setSequenceId(getSize() + 1);    resequenceIds();  } else {    AutomationItem replaceSi=getItemBySequenceId(sequenceId - 1);    if (replaceSi != null) {      replaceSi.setSequenceId(sequenceId);      item.setSequenceId(sequenceId - 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,sequenceId);}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public boolean loopback(){  try {    return _myMulticastSocket.getLoopbackMode();  } catch (  SocketException se) {    Logger.printError("Multicast.loopback()","" + se);  }  return false;}  }
class C{  public static SimState readFromCheckpoint(File file){  try {    FileInputStream f=new FileInputStream(file);    SimState state=readFromCheckpoint(f);    f.close();    return state;  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private static void showUserLibrary(Service service) throws IOException, ServiceException {  VolumeFeed volumeFeed=service.getFeed(new URL(USER_LIBRARY_FEED),VolumeFeed.class);  printVolumeFeed(volumeFeed);}  }
class C{  @Override public synchronized void close() throws SQLException {  try {    debugCodeCall("close");    if (session == null) {      return;    }    CloseWatcher.unregister(watcher);    session.cancel();    if (executingStatement != null) {      try {        executingStatement.cancel();      } catch (      NullPointerException e) {      }    }synchronized (session) {      try {        if (!session.isClosed()) {          try {            if (session.hasPendingTransaction()) {              if (!session.isReconnectNeeded(true)) {                try {                  rollbackInternal();                } catch (                DbException e) {                  if (e.getErrorCode() != ErrorCode.CONNECTION_BROKEN_1) {                    throw e;                  }                }              }              session.afterWriting();            }            closePreparedCommands();          }  finally {            session.close();          }        }      }  finally {        session=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addError(String message,int sourceStart,int sourceEnd){  ast.addProblem(ast.new ParseProblem(false,message,sourceStart,sourceEnd));}  }
class C{  protected boolean appendFoundJars(Node container,Document factory,Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      try {        String keyStr=(String)key;        if (keyStr.startsWith(ERROR)) {          errors=true;        }        Element node=factory.createElement("foundJar");        node.setAttribute("name",keyStr.substring(0,keyStr.indexOf("-")));        node.setAttribute("desc",keyStr.substring(keyStr.indexOf("-") + 1));        node.appendChild(factory.createTextNode((String)subhash.get(keyStr)));        container.appendChild(node);      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("foundJar");        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        container.appendChild(node);      }    }  }  return errors;}  }
class C{  public static int bytes2Int(byte[] bytes,int start,int length){  int sum=0;  int end=start + length;  for (int i=start; i < end; i++) {    int n=bytes[i] & 0xff;    n<<=(--length) * 8;    sum+=n;  }  return sum;}  }
class C{  protected void addUrlIntoSitemap(String urlStr,SiteMap siteMap,String lastMod,String changeFreq,String priority,int urlIndex){  try {    URL url=new URL(urlStr);    boolean valid=urlIsValid(siteMap.getBaseUrl(),url.toString());    if (valid || !strict) {      SiteMapURL sUrl=new SiteMapURL(url.toString(),lastMod,changeFreq,priority,valid);      siteMap.addSiteMapUrl(sUrl);      LOG.debug("  {}. {}",urlIndex + 1,sUrl);    } else {      LOG.warn("URL: {} is excluded from the sitemap as it is not a valid url = not under the base url: {}",url.toExternalForm(),siteMap.getBaseUrl());    }  } catch (  MalformedURLException e) {    LOG.warn("Bad url: [{}]",urlStr);    LOG.trace("Can't create a sitemap entry with a bad URL",e);  }}  }
class C{  public static String timeUntil(final int seconds,final boolean forceSeconds){  final StringBuilder sbuf=new StringBuilder();  timeUntil(sbuf,seconds,forceSeconds);  return sbuf.toString();}  }
class C{  public static void main(String args[]){  log.info("==========================================================================================");  log.info("Identifying vehicle activity locations for vehicles travelling through: " + studyAreaName);  log.info("==========================================================================================");  long startTime=System.currentTimeMillis();  final File inFolder=new File(sourceFolderName);  final File vehicles[]=inFolder.listFiles();  int numberOfVehicles=0;  int totalVehicles=vehicles.length;  int numberOfMajorActivities=0;  int numberOfMinorActivities=0;  durationBuckets=new ArrayList<Integer>();  for (int a=1; a <= numBuckets; a++) {    durationBuckets.add(0);  }  MathTransform mt=getMathTransform();  log.info("Reading study area: " + studyAreaName);  MyShapefileReader msr=new MyShapefileReader(shapeFileSource);  studyArea=msr.readMultiPolygon();  studyArea.getCentroid();  log.info("Done rreading study area.");  log.info("Processing vehicle files in " + destinationFolderName + "...");  ProgressBar pb=new ProgressBar('*',totalVehicles);  pb.printProgressBar();  try {    File outFolder=new File(destinationFolderName);    outFolder.mkdirs();    File vehFolder=new File(vehicleFolderName);    boolean checkCreate=vehFolder.mkdirs();    if (!checkCreate) {      log.warn("Could not create " + vehicleFolderName + ", or it already exists!");    }    BufferedWriter vehicleStats=new BufferedWriter(new FileWriter(new File(destinationFolderName + studyAreaName + "VehicleStats.txt")));    writeVehicleStatsHeader(vehicleStats);    BufferedWriter majorLocations=new BufferedWriter(new FileWriter(new File(destinationFolderName + studyAreaName + "MajorLocations.txt")));    writeLocationHeader(majorLocations);    BufferedWriter minorLocations=new BufferedWriter(new FileWriter(new File(destinationFolderName + studyAreaName + "MinorLocations.txt")));    writeLocationHeader(minorLocations);    BufferedWriter durationOutput=new BufferedWriter(new FileWriter(new File(destinationFolderName + studyAreaName + "ActivityDurations.txt")));    durationOutput.write("Bin,Number_of_Activities");    durationOutput.newLine();    try {      for (int i=0; i < vehicles.length; i++) {        File thisFile=vehicles[i];        if (thisFile.isFile() && !(thisFile.getName().startsWith("."))) {          Vehicle thisVehicle=createNewVehicle(thisFile);          ArrayList<GPSPoint> log=readFileToArray(thisFile,mt);          processVehicleActivities(thisVehicle,thisFile,log);          if (thisVehicle.getChains().size() > 0) {            for (            Activity majorActivity : thisVehicle.getHomeLocation()) {              writeLocationLine(majorLocations,majorActivity);              numberOfMajorActivities++;            }            for (            Chain thisChain : thisVehicle.getChains()) {              for (int j=1; j < thisChain.getActivities().size() - 1; j++) {                writeLocationLine(minorLocations,thisChain.getActivities().get(j));                numberOfMinorActivities++;              }            }            writeVehicleStatsLine(vehicleStats,thisVehicle);            MyXmlConverter mxc=new MyXmlConverter();            String vehicleFilenameXml=vehicleFolderName + thisVehicle.getVehID() + ".xml";            mxc.writeObjectToFile(thisVehicle,vehicleFilenameXml);          }          numberOfVehicles++;          pb.updateProgress(numberOfVehicles);        }      }      for (int i=0; i < durationBuckets.size(); i++) {        durationOutput.write(String.valueOf((i + 1) * 10));        durationOutput.write(delimiter);        durationOutput.write(String.valueOf(durationBuckets.get(i)));        durationOutput.newLine();      }    }  finally {      vehicleStats.close();      majorLocations.close();      minorLocations.close();      durationOutput.close();    }  } catch (  IOException e) {    e.printStackTrace();  }  long endTime=System.currentTimeMillis();  log.info("--------------------------------------");  log.info("Summary for: " + studyAreaName);  log.info("--------------------------------------");  log.info("Number of vehicles processed: " + numberOfVehicles);  log.info("Total home locations: " + numberOfMajorActivities);  log.info("Total activity locations: " + numberOfMinorActivities);  log.info("Total time (sec): " + ((int)(((double)(endTime - startTime)) / 1000)));  log.info("Boink points: " + numberOfBoinkPoints);  log.info("--------------------------------------");}  }
class C{  public PolicyLimit(PrincipalUser creator,PrincipalUser user,PolicyCounter counter,double limit){  super(creator);  setUser(user);  setCounter(counter);  setLimit(limit);}  }
class C{  private JButton addButton(String text,Container container,float alignment){  JButton button=new JButton(text);  button.setAlignmentX(alignment);  container.add(button);  return button;}  }
class C{  public static void main(String[] argv){  runClassifier(new InputMappedClassifier(),argv);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Object clone(){  MessageFormat other=(MessageFormat)super.clone();  other.formats=formats.clone();  for (int i=0; i < formats.length; ++i) {    if (formats[i] != null)     other.formats[i]=(Format)formats[i].clone();  }  other.offsets=offsets.clone();  other.argumentNumbers=argumentNumbers.clone();  return other;}  }
class C{  @Uninterruptible public static void takeCBSCallSample(int whereFrom,Address yieldpointServiceMethodFP){  Address ypTakenInFP=Magic.getCallerFramePointer(yieldpointServiceMethodFP);  int ypTakenInCMID=Magic.getCompiledMethodID(ypTakenInFP);  Address ypTakenInCallerFP=Magic.getCallerFramePointer(ypTakenInFP);  int ypTakenInCallerCMID=Magic.getCompiledMethodID(ypTakenInCallerFP);  CompiledMethod ypTakenInCM=CompiledMethods.getCompiledMethod(ypTakenInCMID);  if (ypTakenInCallerCMID == StackFrameLayout.getInvisibleMethodID() || ypTakenInCM.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {  } else {    for (    ContextListener listener : cbsContextListeners) {      if (listener.isActive()) {        listener.update(ypTakenInFP,whereFrom);      }    }  }}  }
class C{  @Override public boolean test(A value){  if (isEmpty()) {    return false;  }  int vhc=value.hashCode();switch (Ordering.compare(vhc,hc)) {case LT:    return left.test(value);case GT:  return right.test(value);case EQ:return bucket.contains(value);default :throw new AssertionError();}}  }
class C{  public SchematicWriter(NBTOutputStream outputStream){  checkNotNull(outputStream);  this.outputStream=outputStream;}  }
class C{  public String toString(){  return "(" + x + ","+ y+ ")";}  }
class C{  public void test_bytesConsumed(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; l++) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect bytesConsumed",pos[n],res.bytesConsumed());        }      }    }  }}  }
class C{  public SpecialInterestArea(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  private ChannelBuffer createRequestBuffer(int id,RpcInvocation inv) throws RemotingException {  ChannelBuffer output=ChannelBuffers.dynamicBuffer(512);  TProtocol oprot=TBaseTools.newProtocol(null,output);  String methodName=inv.getMethodName();  String serviceName=inv.getAttachment(Constants.PATH_KEY);  Class<?>[] parameterTypes=inv.getParameterTypes();  Object[] arguments=inv.getArguments();  try {    oprot.writeMessageBegin(new TMessage(methodName,TMessageType.CALL,id));    String argsServiceName=TBaseTools.getArgsClassName(serviceName,methodName,"_args");    Class<?> clazz=TBaseTools.getTBaseClass(argsServiceName);    TBase<?,?> _args=TBaseTools.getTBaseObject(clazz,parameterTypes,arguments);    _args.write(oprot);  } catch (  Exception e) {    throw new RemotingException(channel,e);  }  return output;}  }
class C{  public WroRuntimeException logError(){  LOG.error(getMessage());  return this;}  }
class C{  IDebugCounter registerCounterLocal(IDebugCounterService countersService,String hierarchy,String stringId,String messageType){  String counterHierarchy=stringId + hierarchy + "/"+ messageType;  String counterDescription="Number of " + messageType + " messages in this connection";  return countersService.registerCounter(COUNTER_MODULE,counterHierarchy,counterDescription);}  }
class C{  public SimpleQueryStringBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  public static double NHWPrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  int confusionMatrix[]=getConfusionMatrixValues(useTrainingData,ind,chromosomeNum);  int truePositives=confusionMatrix[0];  int trueNegatives=confusionMatrix[3];  if (truePositives == 0 || trueNegatives == 0)   return 0.0;  return (truePositives + trueNegatives);}  }
class C{  @NotNull protected PyMemberInfo<PyElement> findMemberInfo(@NotNull final String clazzName,@NotNull final String memberName){  final PyClass clazz=findClass(clazzName);  return MembersManager.findMember(clazz,findMember(clazzName,memberName));}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  protected void removeAttributes(){  int[] indices;  Remove remove;  getOwner().addUndoPoint();  indices=m_PanelAttributes.getSelectedAttributes();  remove=new Remove();  remove.setAttributeIndicesArray(indices);  filterData(remove,null);}  }
class C{  public void createSubUsageScenario13() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO13_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO13_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(3);  BillingIntegrationTestBase.setDateFactoryInstance(usageModificationTime);  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModel(subDetails.getPriceModel(),PriceModelType.PER_UNIT,PricingPeriod.MONTH,"EUR",new BigDecimal("123.00"),new BigDecimal("778.00"),new BigDecimal("445.00"),0);  subscrSetup.savePriceModelForSubscription(basicSetup.getSupplierAdminKey(),subDetails,newSubPriceModel,basicSetup.getCustomer());  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VORoleDefinition changedRole=VOServiceFactory.getRole(serviceDetails,"USER");  subscrSetup.addUser(basicSetup.getCustomerUser1(),changedRole,subDetails.getSubscriptionId());  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(5.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO13_PERUNIT_MONTH",subDetails);}  }
class C{  private boolean isDependencyValidated(Class refType,Class clazz){  _log.debug("Validating reference {} for Class {}",refType,clazz);  if (DataObject.class.isAssignableFrom(clazz) && KeyspaceUtil.isGlobal(clazz)) {    if (GeoVisibleResource.class.isAssignableFrom(refType)) {      return true;    } else     if (DataObject.class.isAssignableFrom(refType) && KeyspaceUtil.isGlobal(refType)) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  private static String extractHtmlTitle(String html){  Matcher matcher=HTML_TITLE_TAG_PATTERN.matcher(html);  return (matcher.find() ? matcher.group(1) : null);}  }
class C{  public static String unquote(String name){  return isQuoted(name) ? name.substring(1,name.length() - 1) : name;}  }
class C{  public SabresQuery<T> whereContainedIn(String key,List<?> values){  List<String> stingValues=new ArrayList<>(values.size());  for (  Object o : values) {    stingValues.add(SabresValue.create(o).toSql());  }  addWhere(key,Where.in(key,stingValues));  return this;}  }
class C{  private static void vecswap(int[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public List<String> extraJvmArguments(){  return extraJvmArguments;}  }
class C{  public List<Class<?>> parameterList(){  return Collections.unmodifiableList(Arrays.asList(ptypes.clone()));}  }
class C{  public static SailRepository openRepository(final String file,final boolean create){  return new SailRepository(openSail(file,create));}  }
class C{  public void delete(String dn) throws NamingException {  DirContext ctx=new InitialDirContext(env);  ctx.destroySubcontext(dn);  ctx.close();}  }
class C{  public boolean hasExifTags(){  return hasExtension(ExifTags.class);}  }
class C{  public void replace(final Resource resource,final List<Resource> expandedResources){  LOG.debug("replacing resource {} with expanded resources: {}",resource,expandedResources);  notNull(resource);  notNull(expandedResources);synchronized (this) {    boolean found=false;    final Set<Resource> result=new LinkedHashSet<Resource>();    for (    final Resource resourceItem : resources) {      if (resourceItem.equals(resource)) {        found=true;        for (        final Resource expandedResource : expandedResources) {          expandedResource.setMinimize(resource.isMinimize());          result.add(expandedResource);        }      } else {        result.add(resourceItem);      }    }    if (!found) {      throw new IllegalArgumentException("Cannot replace resource: " + resource + " for group: "+ this+ " because the resource is not a part of this group.");    }    setResources(new ArrayList<Resource>(result));  }}  }
class C{  private static String encrypt(String algorithm,String password){  return encrypt(algorithm,"UTF-8",password);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/pause") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList pauseContinuousCopies(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  return performFileProtectionAction(param,id,ProtectionOp.PAUSE.getRestOp());}  }
class C{  public Node(final NodeIdentity identity,final NodeEndpoint endpoint){  this(identity,endpoint,null);}  }
class C{  public void unlock(){  if (DEBUG)   Log.d(TAG,"unlock()");  Message message=mHandler.obtainMessage(MSG_UNLOCK,UserHandle.getCallingUserId(),-1);  mHandler.sendMessage(message);}  }
class C{  public boolean isVPlexVolume(DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,getStorageController());  return DiscoveredDataObject.Type.vplex.name().equals(storage.getSystemType());}  }
class C{  public AllocationExplanation explanation(){  return explanation;}  }
class C{  public Map<String,RPConsistencyGroup> mapCGsForWWNs(FunctionalAPIImpl impl,CreateBookmarkRequestParams request,Set<String> unmappedWWNs) throws RecoverPointException {  try {    Set<String> wwnList=request.getVolumeWWNSet();    if (wwnList.isEmpty()) {      logger.error("Input WWN list size is 0");      return null;    }    Map<String,RPConsistencyGroup> returnMap=new HashMap<String,RPConsistencyGroup>();    Set<String> wwnListCopy=new HashSet<String>();    for (    String wwn : wwnList) {      wwnListCopy.add(wwn.toLowerCase(Locale.ENGLISH));      logger.info("Mapping source WWN " + wwn.toLowerCase(Locale.ENGLISH) + " to RecoverPoint CG");    }    List<ConsistencyGroupSettings> cgSettings=impl.getAllGroupsSettings();    RPConsistencyGroup rpCG=null;    for (    ConsistencyGroupSettings cgSetting : cgSettings) {      for (      ReplicationSetSettings rsSetting : cgSetting.getReplicationSetsSettings()) {        Set<UserVolumeSettings> uvSettings=new HashSet<UserVolumeSettings>();        uvSettings.addAll(rsSetting.getVolumes());        for (        UserVolumeSettings uvSetting : uvSettings) {          String volUID=RecoverPointUtils.getGuidBufferAsString(uvSetting.getVolumeInfo().getRawUids(),false);          if (wwnListCopy.contains(volUID.toLowerCase(Locale.ENGLISH))) {            wwnListCopy.remove(volUID.toLowerCase(Locale.ENGLISH));            ConsistencyGroupCopyUID productionCopyUID=cgSetting.getProductionCopiesUIDs().get(0);            String cgName=cgSetting.getName();            ConsistencyGroupUID cgUID=cgSetting.getGroupUID();            RPCopy rpCopy=new RPCopy();            rpCopy.setCGGroupCopyUID(uvSetting.getGroupCopyUID());            Set<RPCopy> copies=new HashSet<RPCopy>();            copies.add(rpCopy);            logger.info("Source WWN: " + volUID + " is on RecoverPoint CG "+ cgName+ " with RecoverPoint CGID "+ cgUID.getId());            rpCG=new RPConsistencyGroup();            rpCG.setName(cgName);            rpCG.setCGUID(cgUID);            rpCG.setClusterUID(productionCopyUID.getGlobalCopyUID().getClusterUID());            rpCG.setSiteToArrayIDsMap(mapCGToStorageArraysNoConnection(cgSetting));            rpCG.setCopies(copies);            returnMap.put(volUID,rpCG);            break;          }        }      }      if (wwnListCopy.isEmpty()) {        break;      }    }    for (    String wwnMissing : wwnListCopy) {      logger.error("Could not map WWN: " + wwnMissing);      unmappedWWNs.add(wwnMissing);    }    return returnMap;  } catch (  FunctionalAPIActionFailedException_Exception e) {    logger.error(e.getMessage());    return null;  }catch (  FunctionalAPIInternalError_Exception e) {    logger.error(e.getMessage());    return null;  }}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  mGraphics.drawString(iterator,x,y);}  }
class C{  void xrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nyx=(float)(yx * ct + zx * st);  float Nyy=(float)(yy * ct + zy * st);  float Nyz=(float)(yz * ct + zz * st);  float Nyo=(float)(yo * ct + zo * st);  float Nzx=(float)(zx * ct - yx * st);  float Nzy=(float)(zy * ct - yy * st);  float Nzz=(float)(zz * ct - yz * st);  float Nzo=(float)(zo * ct - yo * st);  yo=Nyo;  yx=Nyx;  yy=Nyy;  yz=Nyz;  zo=Nzo;  zx=Nzx;  zy=Nzy;  zz=Nzz;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if (!mEntries.isLoaded()) {    return;  }  if ((mEntries.getTotalSize() + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mEntries.getTotalSize();  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (!deleted) {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mEntries.getTotalSize() + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mEntries.getTotalSize() - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public Point2D pointAtLength(float length){  return pathLength.pointAtLength(length);}  }
class C{  public static boolean isPolygon(OMPoly omPoly){  double[] points=omPoly.getLatLonArray();  int i=points.length;  boolean isPolygon=false;  if (points != null && i > 5) {    isPolygon=points[0] == points[i - 2] && points[1] == points[i - 1];    isPolygon=isPolygon && omPoly.isPolygon();  }  return isPolygon;}  }
class C{  public NotificationChain basicSetExpr(Expression newExpr,NotificationChain msgs){  Expression oldExpr=expr;  expr=newExpr;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.STRING_EVALUATOR__EXPR,oldExpr,newExpr);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void saveMultipleRecords(Properties ctx,String tableName,String columnName,int recordId,Integer[] values,String trxName) throws Exception {  if (values == null) {    return;  }  int oldRow=m_mTab.getCurrentRow();  GridField lineField=m_mTab.getField("Line");  for (int i=0; i < values.length; i++) {    if (!m_mTab.dataNew(true)) {      throw new IllegalStateException("Could not clone tab");    }    m_mTab.setValue(columnName,values[i]);    if (lineField != null) {      m_mTab.setValue(lineField,0);    }    if (!m_mTab.dataSave(false)) {      throw new IllegalStateException("Could not update tab");    }    m_mTab.setCurrentRow(oldRow);  }}  }
class C{  public WebSessionAttributeProcessor(final Map<String,byte[]> updatesMap,final long accessTime,final int maxInactiveInterval,final boolean maxIntervalChanged){  this.updatesMap=updatesMap;  this.accessTime=accessTime;  this.maxInactiveInterval=maxInactiveInterval;  this.maxIntervalChanged=maxIntervalChanged;}  }
class C{  public static RangeSet<Integer> lineRangesToCharRanges(String input,RangeSet<Integer> lineRanges){  List<Integer> lines=new ArrayList<>();  Iterators.addAll(lines,Newlines.lineOffsetIterator(input));  lines.add(input.length() + 1);  final RangeSet<Integer> characterRanges=TreeRangeSet.create();  for (  Range<Integer> lineRange : lineRanges.subRangeSet(Range.closedOpen(0,lines.size() - 1)).asRanges()) {    int lineStart=lines.get(lineRange.lowerEndpoint());    int lineEnd=lines.get(lineRange.upperEndpoint()) - 1;    Range<Integer> range=Range.closedOpen(lineStart,lineEnd);    characterRanges.add(range);  }  return characterRanges;}  }
class C{  public void add(final String npcName,final ProducerBehaviour behaviour){  Pair<String,ProducerBehaviour> pair=new Pair<String,ProducerBehaviour>(npcName,behaviour);  producers.add(pair);}  }
class C{  @Override public boolean contains(Value subvalue){  return false;}  }
class C{  public static JToggleButton addToolTo(JToolBar tb,DrawingEditor editor,Tool tool,String labelKey,ResourceBundleUtil labels){  ButtonGroup group=(ButtonGroup)tb.getClientProperty("toolButtonGroup");  ToolListener toolHandler=(ToolListener)tb.getClientProperty("toolHandler");  JToggleButton t=new JToggleButton();  labels.configureToolBarButton(t,labelKey);  t.addItemListener(new ToolButtonListener(tool,editor));  t.setFocusable(false);  tool.addToolListener(toolHandler);  group.add(t);  tb.add(t);  return t;}  }
class C{  public void test_read_$CII_Exception() throws IOException {  pbr=new PushbackReader(new StringReader(pbString),10);  char[] nullCharArray=null;  char[] charArray=new char[10];  try {    pbr.read(nullCharArray,0,1);    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    pbr.read(charArray,0,-1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,-1,0);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,charArray.length + 1,0);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,charArray.length,1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,1,charArray.length);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    pbr.read(charArray,0,charArray.length + 1);    fail("should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  pbr.close();  try {    pbr.read(charArray,0,1);    fail("should throw IOException");  } catch (  IOException e) {  }}  }
class C{  static public void fail(String message){  if (message == null) {    throw new AssertionFailedError();  }  throw new AssertionFailedError(message);}  }
class C{  public LabelledList(String borderLabel){  this();  if (borderLabel != null)   setBorder(new javax.swing.border.TitledBorder(borderLabel));}  }
class C{  public void callWithSeed(final String methodName,final String randomSeed,final Object[] params){  callWithSeed(methodName,randomSeed,params,null);}  }
class C{  public String description(){  return description;}  }
class C{  @Override public boolean equals(final Object rhs){  if (!(rhs instanceof Address)) {    return false;  }  return m_value.equals(((Address)rhs).m_value);}  }
class C{  public CaffeineCacheConfig(final String cacheName,final String spec){  this.cacheName=cacheName;  this.spec=parse(spec);}  }
class C{  public void clearCoRoutine(boolean callDoTerminate){  if (null != m_incrementalSAXSource) {    if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);    m_incrementalSAXSource=null;  }}  }
class C{  protected void hearOn(){  LocoNetMessage l=new LocoNetMessage(2);  l.setOpCode(LnConstants.OPC_GPON);  controller.sendTestMessage(l);}  }
class C{  public static void assertVector3fEquals(Vector3f expected,Vector3f actual,float delta){  Assert.assertEquals(expected.x,actual.x,delta);  Assert.assertEquals(expected.y,actual.y,delta);  Assert.assertEquals(expected.z,actual.z,delta);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void displayMech(Entity en){  if (en == null) {    return;  }  DisplayMapSet ams=mech;  removeAll();  if (en instanceof QuadMech) {    ams=quad;    minLeftMargin=minMechLeftMargin;    minTopMargin=minMechTopMargin;    minBottomMargin=minMechBottomMargin;    minRightMargin=minMechRightMargin;  } else   if (en instanceof TripodMech) {    ams=tripod;    minLeftMargin=minMechLeftMargin;    minTopMargin=minMechTopMargin;    minBottomMargin=minMechBottomMargin;    minRightMargin=minMechRightMargin;  } else   if (en instanceof ArmlessMech) {    ams=armless;    minLeftMargin=minMechLeftMargin;    minTopMargin=minMechTopMargin;    minBottomMargin=minMechBottomMargin;    minRightMargin=minMechRightMargin;  } else   if (en instanceof Mech) {    ams=mech;    minLeftMargin=minMechLeftMargin;    minTopMargin=minMechTopMargin;    minBottomMargin=minMechBottomMargin;    minRightMargin=minMechRightMargin;  } else   if (en instanceof GunEmplacement) {    ams=gunEmplacement;    minLeftMargin=minTankLeftMargin;    minTopMargin=minTankTopMargin;    minBottomMargin=minTankTopMargin;    minRightMargin=minTankLeftMargin;  } else   if (en instanceof VTOL) {    ams=vtol;    minLeftMargin=minVTOLLeftMargin;    minTopMargin=minVTOLTopMargin;    minBottomMargin=minVTOLTopMargin;    minRightMargin=minVTOLLeftMargin;  } else   if (en instanceof LargeSupportTank) {    ams=largeSupportTank;    minLeftMargin=minTankLeftMargin;    minTopMargin=minTankTopMargin;    minBottomMargin=minTankTopMargin;    minRightMargin=minTankLeftMargin;  } else   if (en instanceof SuperHeavyTank) {    ams=superHeavyTank;    minLeftMargin=minTankLeftMargin;    minTopMargin=minTankTopMargin;    minBottomMargin=minTankTopMargin;    minRightMargin=minTankLeftMargin;  } else   if (en instanceof Tank) {    ams=tank;    minLeftMargin=minTankLeftMargin;    minTopMargin=minTankTopMargin;    minBottomMargin=minTankTopMargin;    minRightMargin=minTankLeftMargin;  } else   if (en instanceof BattleArmor) {    ams=battleArmor;    minLeftMargin=minInfLeftMargin;    minTopMargin=minInfTopMargin;    minBottomMargin=minInfTopMargin;    minRightMargin=minInfLeftMargin;  } else   if (en instanceof Infantry) {    ams=infantry;    minLeftMargin=minInfLeftMargin;    minTopMargin=minInfTopMargin;    minBottomMargin=minInfTopMargin;    minRightMargin=minInfLeftMargin;  } else   if (en instanceof Protomech) {    ams=proto;    minLeftMargin=minTankLeftMargin;    minTopMargin=minTankTopMargin;    minBottomMargin=minTankTopMargin;    minRightMargin=minTankLeftMargin;  } else   if (en instanceof Warship) {    ams=warship;    minLeftMargin=minAeroLeftMargin;    minTopMargin=minAeroTopMargin;    minBottomMargin=minAeroTopMargin;    minRightMargin=minAeroLeftMargin;  } else   if (en instanceof Jumpship) {    ams=jump;    minLeftMargin=minAeroLeftMargin;    minTopMargin=minAeroTopMargin;    minBottomMargin=minAeroTopMargin;    minRightMargin=minAeroLeftMargin;  } else   if (en instanceof FighterSquadron) {    ams=squad;    minLeftMargin=minAeroLeftMargin;    minTopMargin=minAeroTopMargin;    minBottomMargin=minAeroTopMargin;    minRightMargin=minAeroLeftMargin;  } else   if (en instanceof Aero) {    ams=aero;    if (en instanceof SmallCraft) {      SmallCraft sc=(SmallCraft)en;      if (sc.isSpheroid()) {        ams=sphere;      }    }    if (en.isCapitalFighter()) {      ams=capFighter;    }    minLeftMargin=minAeroLeftMargin;    minTopMargin=minAeroTopMargin;    minBottomMargin=minAeroTopMargin;    minRightMargin=minAeroLeftMargin;  }  if (ams == null) {    System.err.println("The armor panel is null.");    return;  }  ams.setEntity(en);  addElement(ams.getContentGroup());  Enumeration<BackGroundDrawer> iter=ams.getBackgroundDrawers().elements();  while (iter.hasMoreElements()) {    addBgDrawer(iter.nextElement());  }  onResize();  update();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notationList;  Node notation;  int notationType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notationList=docType.getNotations();  assertNotNull("notationsNotNull",notationList);  for (int indexN10049=0; indexN10049 < notationList.getLength(); indexN10049++) {    notation=(Node)notationList.item(indexN10049);    notationType=(int)notation.getNodeType();    assertEquals("documenttypeGetNotationsTypeAssert",12,notationType);  }}  }
class C{  public void addAngles(float x,float y,float z){  angleX+=x;  angleY+=y;  angleZ+=z;}  }
class C{  public void reset(){  for (int i=0; i < uu.length; i++) {    uu[i]=1.0f;    vv[i]=0.0f;  }}  }
class C{  synchronized V remove(Object key,int hash){  int index=hash & mask;  Entry<K,V> e=entries[index];  if (e == null) {    return null;  }  V old;  if (e.key.equals(key)) {    old=e.value;    entries[index]=e.mapNext;  } else {    Entry<K,V> last;    do {      last=e;      e=e.mapNext;      if (e == null) {        return null;      }    } while (!e.key.equals(key));    old=e.value;    last.mapNext=e.mapNext;  }  mapSize--;  usedMemory-=e.memory;  if (e.stackNext != null) {    removeFromStack(e);  }  if (e.isHot()) {    e=queue.queueNext;    if (e != queue) {      removeFromQueue(e);      if (e.stackNext == null) {        addToStackBottom(e);      }    }  } else {    removeFromQueue(e);  }  pruneStack();  return old;}  }
class C{  public RRDatabase(File file) throws IOException {  name=file.getName();  rrdFile=new RRDFile(file);  header=new Header(rrdFile);  nameindex=new HashMap<String,Integer>(header.dsCount);  dataSources=new ArrayList<DataSource>(header.dsCount);  for (int i=0; i < header.dsCount; i++) {    DataSource ds=new DataSource(rrdFile);    nameindex.put(ds.getName(),i);    dataSources.add(ds);  }  archives=new ArrayList<Archive>(header.rraCount);  for (int i=0; i < header.rraCount; i++) {    Archive archive=new Archive(this);    archives.add(archive);  }  long last_up=(long)rrdFile.readLong() * 1000;  if (header.getVersionAsInt() >= Constants.VERSION_WITH_LAST_UPDATE_SEC) {    long last_up_usec=rrdFile.readLong();    last_up+=last_up_usec / 1000;  }  lastUpdate=new Date(last_up);  for (int i=0; i < header.dsCount; i++) {    DataSource ds=dataSources.get(i);    ds.loadPDPStatusBlock(rrdFile);  }  for (int i=0; i < header.rraCount; i++) {    Archive archive=archives.get(i);    archive.loadCDPStatusBlocks(rrdFile,header.dsCount);  }  for (int i=0; i < header.rraCount; i++) {    Archive archive=archives.get(i);    archive.loadCurrentRow(rrdFile);  }  for (int i=0; i < header.rraCount; i++) {    Archive archive=archives.get(i);    archive.loadData(rrdFile,header.dsCount);  }}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public static void createActionableEvent(DbClient dbClient,EventUtils.EventCode eventCode,URI tenant,String name,String description,String warning,DataObject resource,List<URI> affectedResources,String approveMethod,Object[] approveParameters){  createActionableEvent(dbClient,eventCode,tenant,name,description,warning,resource,affectedResources,approveMethod,approveParameters,null,null);}  }
class C{  public void endDocument() throws SAXException {  flushStartDoc();  m_resultContentHandler.endDocument();}  }
class C{  public long length() throws IOException {  try {    return Libcore.os.fstat(fd).st_size;  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public GSSModel(ExampleSet exampleSet,Hypothesis hypothesis,double[] confidences){  super(exampleSet,null,null);  this.hypothesis=hypothesis.clone();  this.confidences=new double[2];  this.confidences[0]=confidences[0];  this.confidences[1]=confidences[1];}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.SYNCHRONIZATION;}  }
class C{  public ToStringBuilder append(String fieldName,byte[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public boolean adjustValue(float key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  private void applyOnAllInRange(ExampleSet exampleSet,Attribute[] allAttributes,int minNumberOfFeatures,int maxNumberOfFeatures) throws OperatorException {  for (int i=minNumberOfFeatures; i <= maxNumberOfFeatures; i++) {    applyOnAllWithExactNumber(exampleSet,allAttributes,i);  }}  }
class C{  public ConcurrentHashMapStringConverter(final int lengthLimit){  this(new ConcurrentHashMap<String,String>(),lengthLimit);}  }
class C{  public SnapshotsStatusRequestBuilder(ElasticsearchClient client,SnapshotsStatusAction action,String repository){  super(client,action,new SnapshotsStatusRequest(repository));}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ATR == false) {    return false;  }  ATR other=(ATR)obj;  return Arrays.equals(this.atr,other.atr);}  }
class C{  @Interruptible int scanByteArray(byte[] byteMap,int BBLastPtr,byte refType,int mapslot,boolean skipOneBit){  skipOneBit=false;  if (BBLastPtr == -1)   return -1;  if (mapslot == 0) {    mapslot=getNextMapElement();  }  int len=(BBLastPtr + 1);  int offset=0;  int word=mapslot;  while (len > 0) {    boolean doSkip=(offset == 0 && skipOneBit);    int bitsToDo=doSkip ? BITS_PER_MAP_ELEMENT - 1 : BITS_PER_MAP_ELEMENT;    if (len < bitsToDo) {      bitsToDo=len;    }    byte result=convertMapElement(byteMap,offset,bitsToDo,refType);    if (doSkip) {      result=(byte)((0x000000ff & result) >>> 1);    }    jsrInfo.unusualReferenceMaps[word]=result;    len-=bitsToDo;    offset+=bitsToDo;    word++;  }  return mapslot;}  }
class C{  public ModbusUDPMaster(String addr,int port){  this(addr,port,Modbus.DEFAULT_TIMEOUT);}  }
class C{  void cellToPoint(int cellX,int cellY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap);  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap);}  }
class C{  public void testIssue564() throws Exception {  JsonFactory factory=new SmileFactory();  ByteArrayOutputStream bos1=new ByteArrayOutputStream();  JsonGenerator generator=factory.createJsonGenerator(bos1);  generator.writeStartObject();  generator.writeFieldName("query");  generator.writeStartObject();  generator.writeFieldName("term");  generator.writeStartObject();  generator.writeStringField("doc.payload.test_record_main.string_not_analyzed__s","foo");  generator.writeEndObject();  generator.writeEndObject();  generator.writeEndObject();  generator.close();  JsonParser parser=factory.createJsonParser(bos1.toByteArray());  JsonToken token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("query",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("term",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("doc.payload.test_record_main.string_not_analyzed__s",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.VALUE_STRING,token);  assertEquals("foo",parser.getText());  parser.close();  ByteArrayOutputStream bos2=new ByteArrayOutputStream();  generator=factory.createJsonGenerator(bos2);  generator.writeStartObject();  generator.writeFieldName("query");  generator.writeStartObject();  generator.writeFieldName("term");  generator.writeStartObject();  generator.writeStringField("doc.payload.test_record_main.string_not_analyzed2__s","bar");  generator.writeEndObject();  generator.writeEndObject();  generator.writeEndObject();  generator.close();  parser=factory.createJsonParser(bos2.toByteArray());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("query",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("term",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("doc.payload.test_record_main.string_not_analyzed2__s",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.VALUE_STRING,token);  assertEquals("bar",parser.getText());  parser.close();}  }
class C{  public void updateCloneInfo(List<VolumeClone> clones){  for (  VolumeClone clone : clones) {    clone.setReplicationState(VolumeClone.ReplicationState.RESTORED);  }}  }
class C{  @Override protected List<Node> initCollection(){  List<Vector3f> keyList=createKeys();  ArrayList<Node> nodeList=new ArrayList<Node>(keyList.size());  int i=0;  for (  Vector3f v : keyList) {    Node n=new JmeVector3f(this,jmeMotionPath,v).setReadOnly(readOnly);    n.setDisplayName("Waypoint " + i);    nodeList.add(n);    i++;  }  return nodeList;}  }
class C{  public boolean move(RouteLocation rl){  if (rl == null) {    return false;  }  log.debug("Move train ({}) to location ({})",getName(),rl.getName());  if (getRoute() == null || getCurrentLocation() == null) {    return false;  }  boolean foundCurrent=false;  for (  RouteLocation xrl : getRoute().getLocationsBySequenceList()) {    if (getCurrentLocation() == xrl) {      foundCurrent=true;    }    if (xrl == rl) {      if (foundCurrent) {        return true;      } else {        break;      }    }    if (foundCurrent) {      move();    }  }  return false;}  }
class C{  @After public void tearDown(){  population=null;  sorting=null;}  }
class C{  public PerThreadIDAndVersionLookup(LeafReader reader) throws IOException {  TermsEnum termsEnum=null;  NumericDocValues versions=null;  boolean hasPayloads=false;  Fields fields=reader.fields();  if (fields != null) {    Terms terms=fields.terms(UidFieldMapper.NAME);    if (terms != null) {      hasPayloads=terms.hasPayloads();      termsEnum=terms.iterator();      assert termsEnum != null;      versions=reader.getNumericDocValues(VersionFieldMapper.NAME);    }  }  this.versions=versions;  this.termsEnum=termsEnum;  this.hasPayloads=hasPayloads;}  }
class C{  public Bytecode(ConstPool cp){  this(cp,0,0);}  }
class C{  public boolean isSquare(){  return rows == columns;}  }
class C{  protected int doDisplay(){  return this.getSceneController().repaint();}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public ASTree head(){  return left;}  }
class C{  public final Mono<T> defaultIfEmpty(T defaultV){  if (this instanceof Fuseable.ScalarCallable) {    T v=block();    if (v == null) {      return Mono.just(defaultV);    }    return this;  }  return onAssembly(new MonoDefaultIfEmpty<>(this,defaultV));}  }
class C{  public void testNextDoubleBadOriginBound(){  testDoubleBadOriginBound(null);}  }
class C{  public PutIndexedScriptRequest contentType(XContentType contentType){  this.contentType=contentType;  return this;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.saveBT=(Button)this.findViewById(R.id.save_bt);  this.saveIV=(ImageView)this.findViewById(R.id.save_iv);  this.dialog=new CustomProgressBarDialog(this);}  }
class C{  private void commitChanges(){  for (  TextNode node : selectionList) {    node.getTextObject().setFontName(textType);    node.getTextObject().setFontSize(textSize);    node.getTextObject().setItalic(italic);    node.getTextObject().setBold(bold);    node.update();  }}  }
class C{  public String replaceTokens(String template){  if (template == null) {    return null;  }  Resolved r=getResolved(template);  if (r.startIndexes != null) {    StringBuilder sb=new StringBuilder(template);    for (int i=r.startIndexes.size() - 1; i >= 0; i--) {      String replacement=resolve(r.variables.get(i)).toString();      sb.replace(r.startIndexes.get(i),r.endOffsets.get(i),replacement);    }    return sb.toString();  } else {    return template;  }}  }
class C{  public static void checkPackageAccess(String name){  SecurityManager s=System.getSecurityManager();  if (s != null) {    String cname=name.replace('/','.');    if (cname.startsWith("[")) {      int b=cname.lastIndexOf('[') + 2;      if (b > 1 && b < cname.length()) {        cname=cname.substring(b);      }    }    int i=cname.lastIndexOf('.');    if (i != -1) {      s.checkPackageAccess(cname.substring(0,i));    }  }}  }
class C{  public GuacamoleTunnel connect(ModeledAuthenticatedUser user,ModeledConnection connection,GuacamoleClientInformation info) throws GuacamoleException {  if (hasObjectPermission(user,connection.getIdentifier(),ObjectPermission.Type.READ))   return tunnelService.getGuacamoleTunnel(user,connection,info);  throw new GuacamoleSecurityException("Permission denied.");}  }
class C{  public ObjectMapper previousLevel(){  return levelStack.pop();}  }
class C{  public static boolean hasDatabasePrivilege(int id,String privilege){  return true;}  }
class C{  public static String formatDate(final Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  @Entrypoint public static int resolveMember(int memberId) throws NoClassDefFoundError {  MemberReference ref=MemberReference.getMemberRef(memberId);  return resolveMember(ref);}  }
class C{  private ByteString bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return ByteString.copyFrom(bytes);}  }
class C{  protected SQLException logAndConvert(Exception ex){  SQLException e=DbException.toSQLException(ex);  if (trace == null) {    DbException.traceThrowable(e);  } else {    int errorCode=e.getErrorCode();    if (errorCode >= 23000 && errorCode < 24000) {      trace.info(e,"exception");    } else {      trace.error(e,"exception");    }  }  return e;}  }
class C{  public Fragment(String type,String condition,SequenceDiagram diagram){  super(diagram);  if (type.equals("")) {    this.type=condition + "  ";    this.condition="";  } else {    this.type=type + "  ";    this.condition=condition.equals("") ? "" : "[" + condition + "]";  }  this.diagram=diagram;  includedElements=new HashSet<SequenceElement>();  typeTextPadding=diagram.getConfiguration().getFragmentTextPadding();  level=0;  separators=new LinkedList<Pair<Integer,String>>();}  }
class C{  private void backfillLoopingStates(){  short[] state;  short[] loopingState=null;  int loopingStateRowNum=0;  int fromState;  for (int i=0; i < tempStateTable.size(); i++) {    state=tempStateTable.elementAt(i);    fromState=state[numCategories] & ~ALL_FLAGS;    if (fromState > 0) {      if (fromState != loopingStateRowNum) {        loopingStateRowNum=fromState;        loopingState=tempStateTable.elementAt(loopingStateRowNum);      }      state[numCategories]&=ALL_FLAGS;      for (int j=0; j < state.length; j++) {        if (state[j] == 0) {          state[j]=loopingState[j];        } else         if (state[j] == DONT_LOOP_FLAG) {          state[j]=0;        }      }    }  }}  }
class C{  @SerializedName(ApiConstants.CLUSTER_ID) public String geClusterId(){  return clusterId;}  }
class C{  public Tasks<FileShareRestRep> failBackContinousCopies(URI id,FileReplicationParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failback",id);}  }
class C{  private void handleReorient(Comparable item){  current.color=RED;  current.left.color=BLACK;  current.right.color=BLACK;  if (parent.color == RED) {    grand.color=RED;    if ((compare(item,grand) < 0) != (compare(item,parent) < 0))     parent=rotate(item,grand);    current=rotate(item,great);    current.color=BLACK;  }  header.right.color=BLACK;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public void regenerate(){  m_content=m_updater.generateContent(this);  removeLabel(getLabel());  if (m_content.getLineCount() > 0) {    addLabel(new ZyEdgeLabel(m_content));  }  for (  final IZyEdgeRealizerListener<EdgeType> listener : m_listeners) {    try {      listener.regenerated(this);    } catch (    final Exception exception) {      exception.printStackTrace();    }  }  getLabel().repaint();  repaint();}  }
class C{  public KdNode(Coordinate p,Object data){  this.p=new Coordinate(p);  left=null;  right=null;  count=1;  this.data=data;}  }
class C{  public static void checkPermissions(IDiscordClient client,IGuild guild,List<IRole> roles,EnumSet<Permissions> required) throws MissingPermissionsException {  checkPermissions(client.getOurUser(),guild,roles,required);}  }
class C{  public boolean isUserRunning(UserHandle user){  try {    return ActivityManagerNative.getDefault().isUserRunning(user.getIdentifier(),false);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static ResultSet searchData(Connection conn,String text,int limit,int offset) throws SQLException {  try {    return search(conn,text,limit,offset,true);  } catch (  DbException e) {    throw DbException.toSQLException(e);  }}  }
class C{  public static PreviousExpression previousWindow(String property){  return new PreviousExpression(PreviousExpressionType.PREVWINDOW,property(property));}  }
class C{  void unregister(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> listenerMethodsForType=entry.getValue();    CopyOnWriteArraySet<Subscriber> currentSubscribers=subscribers.get(eventType);    if (currentSubscribers == null || !currentSubscribers.removeAll(listenerMethodsForType)) {      throw new IllegalArgumentException("missing event subscriber for an annotated method. Is " + listener + " registered?");    }  }}  }
class C{  @Override public void releasedBlocks(int numReleasedBlocks){  if (numReleasedBlocks == 0) {    return;  }  if (numReleasedBlocks < 0) {    throw new IllegalArgumentException("Num of released blocks should not be negative");  }  for (  Object num : freeBlockNumQueue) {    freeBlockNumQueue.add(Math.max((Integer)num - numReleasedBlocks,0));  }}  }
class C{  protected boolean contains(String fileName){  if (fileName == null || fileName.length() == 0) {    return false;  }  Iterator<Storage> it=getStorageList().iterator();  Storage storage=null;  boolean result=false;  while (it.hasNext()) {    storage=it.next();    if (storage.contains(fileName)) {      result=true;      break;    }  }  return result;}  }
class C{  public String toDisplay(){  return getSingleIndex();}  }
class C{  public void back(){  Display.impl.browserBack(internal);}  }
class C{  public TitlePaneMaximizeButtonWindowNotFocusedState(){  super("WindowNotFocused");}  }
class C{  private Token newSemicolonToken(ILeafNode leaf){  int tokenType=tokenTypeMapper.getInternalTokenType(semicolon);  return new CommonToken(tokenType,leaf.getText());}  }
class C{  private void removeEntries(){  table.clear();}  }
class C{  @Override public String addStepsForExpandFileSystems(Workflow workflow,String waitFor,List<FileDescriptor> fileDescriptors,String taskId) throws InternalException {  return null;}  }
class C{  public void add(Predicate p,StrokeAction f){  super.add(p,f);}  }
class C{  private Iterable<Key<CommitLogManifest>> loadDiffKeysFromBucket(@Nullable CommitLogCheckpoint lowerCheckpoint,CommitLogCheckpoint upperCheckpoint,int bucketNum){  DateTime lowerCheckpointBucketTime=lowerCheckpoint == null ? START_OF_TIME : lowerCheckpoint.getBucketTimestamps().get(bucketNum);  DateTime lowerBound=lowerCheckpointBucketTime.plusMillis(1);  DateTime upperBound=upperCheckpoint.getBucketTimestamps().get(bucketNum).plusMillis(1);  if (lowerBound.equals(upperBound)) {    return ImmutableSet.of();  }  Key<CommitLogBucket> bucketKey=getBucketKey(bucketNum);  return ofy().load().type(CommitLogManifest.class).ancestor(bucketKey).filterKey(">=",CommitLogManifest.createKey(bucketKey,lowerBound)).filterKey("<",CommitLogManifest.createKey(bucketKey,upperBound)).keys();}  }
class C{  public static boolean hasValidUserInContext(SecurityContext securityContext){  if ((securityContext != null) && (securityContext.getUserPrincipal() instanceof StorageOSUser)) {    return true;  } else {    return false;  }}  }
class C{  @Override public final void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);  initUi();  verifyGPSProvider();}  }
class C{  private void processPDU(PDUMessage pdu){  if (pdu instanceof PacketData || pdu instanceof PDUTypeUnknown) {    broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.DATA));  } else   if (pdu instanceof PDUConfirmedMessage) {    broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.DATA));    PDUConfirmedMessage pduc=(PDUConfirmedMessage)pdu;switch (pduc.getPDUType()) {case SNDCP_ACTIVATE_TDS_CONTEXT_ACCEPT:      SNDCPActivateTDSContextAccept satca=(SNDCPActivateTDSContextAccept)pduc;    broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).channel(mCurrentChannel).details("ACTIVATE SNDCP USE IP:" + satca.getIPAddress()).frequency(mCurrentChannelFrequency).to(satca.getLogicalLinkID()).build());  break;case SNDCP_ACTIVATE_TDS_CONTEXT_REJECT:SNDCPActivateTDSContextReject satcr=(SNDCPActivateTDSContextReject)pduc;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).channel(mCurrentChannel).details("REJECT: SNDCP CONTEXT ACTIVATION " + "REASON:" + satcr.getReason().getLabel()).frequency(mCurrentChannelFrequency).to(satcr.getLogicalLinkID()).build());break;case SNDCP_ACTIVATE_TDS_CONTEXT_REQUEST:SNDCPActivateTDSContextRequest satcreq=(SNDCPActivateTDSContextRequest)pduc;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).channel(mCurrentChannel).details("REQUEST SNDCP USE IP:" + satcreq.getIPAddress()).frequency(mCurrentChannelFrequency).from(satcreq.getLogicalLinkID()).build());break;case SNDCP_DEACTIVATE_TDS_CONTEXT_ACCEPT:SNDCPDeactivateTDSContext sdtca=(SNDCPDeactivateTDSContext)pduc;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).channel(mCurrentChannel).details("ACCEPT DEACTIVATE SNDCP CONTEXT").frequency(mCurrentChannelFrequency).from(sdtca.getLogicalLinkID()).build());break;case SNDCP_DEACTIVATE_TDS_CONTEXT_REQUEST:SNDCPDeactivateTDSContext sdtcreq=(SNDCPDeactivateTDSContext)pduc;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).channel(mCurrentChannel).details("REQUEST DEACTIVATE SNDCP CONTEXT").frequency(mCurrentChannelFrequency).from(sdtcreq.getLogicalLinkID()).build());break;case SNDCP_RF_CONFIRMED_DATA:SNDCPUserData sud=(SNDCPUserData)pduc;StringBuilder sbFrom=new StringBuilder();StringBuilder sbTo=new StringBuilder();sbFrom.append(sud.getSourceIPAddress());sbTo.append(sud.getDestinationIPAddress());if (sud.getIPProtocol() == IPProtocol.UDP) {sbFrom.append(":");sbFrom.append(sud.getUDPSourcePort());sbTo.append(":");sbTo.append(sud.getUDPDestinationPort());}broadcast(new DecoderStateEvent(this,Event.START,State.DATA));broadcast(new P25CallEvent.Builder(CallEventType.DATA_CALL).aliasList(getAliasList()).channel(mCurrentChannel).details("DATA: " + sud.getPayload() + " RADIO IP:"+ sbTo.toString()).frequency(mCurrentChannelFrequency).from(sbFrom.toString()).to(pduc.getLogicalLinkID()).build());break;case SNDCP_RF_UNCONFIRMED_DATA:break;default :break;}} else {broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CONTROL));switch (pdu.getOpcode()) {case GROUP_DATA_CHANNEL_GRANT:case GROUP_VOICE_CHANNEL_GRANT:case INDIVIDUAL_DATA_CHANNEL_GRANT:case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT:case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT:case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE:processPDUChannelGrant(pdu);break;case ADJACENT_STATUS_BROADCAST:if (pdu instanceof AdjacentStatusBroadcastExtended) {IAdjacentSite ias=(IAdjacentSite)pdu;mNeighborMap.put(ias.getUniqueID(),ias);updateSystem(ias.getSystemID());}break;case CALL_ALERT:if (pdu instanceof CallAlertExtended) {CallAlertExtended ca=(CallAlertExtended)pdu;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(ca.getWACN() + "-" + ca.getSystemID()+ "-"+ ca.getSourceID()).to(ca.getTargetAddress()).build());} else {logAlternateVendorMessage(pdu);}break;case GROUP_AFFILIATION_QUERY:if (pdu instanceof GroupAffiliationQueryExtended) {GroupAffiliationQueryExtended gaqe=(GroupAffiliationQueryExtended)pdu;if (mLastQueryEventID == null || !gaqe.getTargetAddress().contentEquals(mLastQueryEventID)) {broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("GROUP AFFILIATION").from(gaqe.getWACN() + "-" + gaqe.getSystemID()+ "-"+ gaqe.getSourceID()).to(gaqe.getTargetAddress()).build());mLastQueryEventID=gaqe.getToID();}}break;case GROUP_AFFILIATION_RESPONSE:if (pdu instanceof GroupAffiliationResponseExtended) {GroupAffiliationResponseExtended gar=(GroupAffiliationResponseExtended)pdu;if (mLastResponseEventID == null || !gar.getTargetAddress().contentEquals(mLastResponseEventID)) {broadcast(new P25CallEvent.Builder(CallEventType.RESPONSE).aliasList(getAliasList()).details("AFFILIATION:" + gar.getResponse().name() + " FOR GROUP:"+ gar.getGroupWACN()+ "-"+ gar.getGroupSystemID()+ "-"+ gar.getGroupID()+ " ANNOUNCEMENT GROUP:"+ gar.getAnnouncementGroupID()).from(gar.getSourceWACN() + "-" + gar.getSourceSystemID()+ "-"+ gar.getSourceID()).to(gar.getTargetAddress()).build());mLastResponseEventID=gar.getTargetAddress();}} else {logAlternateVendorMessage(pdu);}break;case MESSAGE_UPDATE:if (pdu instanceof MessageUpdateExtended) {MessageUpdateExtended mu=(MessageUpdateExtended)pdu;broadcast(new P25CallEvent.Builder(CallEventType.SDM).aliasList(getAliasList()).details("MESSAGE: " + mu.getMessage()).from(mu.getSourceWACN() + "-" + mu.getSourceSystemID()+ "-"+ mu.getSourceID()).to(mu.getTargetAddress()).build());} else {logAlternateVendorMessage(pdu);}break;case NETWORK_STATUS_BROADCAST:if (pdu instanceof NetworkStatusBroadcastExtended) {mNetworkStatusExtended=(NetworkStatusBroadcastExtended)pdu;} else {logAlternateVendorMessage(pdu);}break;case PROTECTION_PARAMETER_BROADCAST:if (pdu instanceof ProtectionParameterBroadcast) {mProtectionParameterBroadcast=(ProtectionParameterBroadcast)pdu;} else {logAlternateVendorMessage(pdu);}break;case RFSS_STATUS_BROADCAST:if (pdu instanceof RFSSStatusBroadcastExtended) {mRFSSStatusMessageExtended=(RFSSStatusBroadcastExtended)pdu;updateNAC(mRFSSStatusMessageExtended.getNAC());updateSystem(mRFSSStatusMessageExtended.getSystemID());updateSite(mRFSSStatusMessageExtended.getRFSubsystemID() + "-" + mRFSSStatusMessageExtended.getSiteID());} else {logAlternateVendorMessage(pdu);}break;case ROAMING_ADDRESS_UPDATE:if (pdu instanceof RoamingAddressUpdateExtended) {RoamingAddressUpdateExtended raue=(RoamingAddressUpdateExtended)pdu;StringBuilder sb=new StringBuilder();sb.append("ROAMING ADDRESS STACK A:");sb.append(raue.getWACNA() + "-" + raue.getSystemIDA());if (raue.isFormat2()) {sb.append(" B:");sb.append(raue.getWACNB() + "-" + raue.getSystemIDB());sb.append(" C:");sb.append(raue.getWACNC() + "-" + raue.getSystemIDC());sb.append(" D:");sb.append(raue.getWACND() + "-" + raue.getSystemIDD());}if (raue.isFormat3()) {sb.append(" E:");sb.append(raue.getWACNE() + "-" + raue.getSystemIDE());sb.append(" F:");sb.append(raue.getWACNF() + "-" + raue.getSystemIDF());sb.append(" G:");sb.append(raue.getWACNG() + "-" + raue.getSystemIDG());}broadcast(new P25CallEvent.Builder(CallEventType.RESPONSE).aliasList(getAliasList()).details(sb.toString()).from(raue.getSourceID()).to(raue.getTargetAddress()).build());} else {logAlternateVendorMessage(pdu);}break;case STATUS_QUERY:if (pdu instanceof StatusQueryExtended) {StatusQueryExtended sq=(StatusQueryExtended)pdu;if (mLastQueryEventID == null || !sq.getTargetAddress().contentEquals(mLastQueryEventID)) {broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("STATUS QUERY").from(sq.getSourceWACN() + "-" + sq.getSourceSystemID()+ "-"+ sq.getSourceID()).to(sq.getTargetAddress()).build());mLastQueryEventID=sq.getToID();}} else {logAlternateVendorMessage(pdu);}break;case STATUS_UPDATE:if (pdu instanceof StatusUpdateExtended) {StatusUpdateExtended su=(StatusUpdateExtended)pdu;if (mLastResponseEventID == null || !mLastResponseEventID.contentEquals(su.getTargetAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.RESPONSE).aliasList(getAliasList()).details("STATUS USER: " + su.getUserStatus() + " UNIT: "+ su.getUnitStatus()).from(su.getSourceWACN() + "-" + su.getSourceSystemID()+ "-"+ su.getSourceID()).to(su.getTargetAddress()).build());mLastResponseEventID=su.getTargetAddress();}} else {logAlternateVendorMessage(pdu);}break;case UNIT_REGISTRATION_RESPONSE:if (pdu instanceof UnitRegistrationResponseExtended) {UnitRegistrationResponseExtended urr=(UnitRegistrationResponseExtended)pdu;if (urr.getResponse() == Response.ACCEPT) {mRegistrations.put(urr.getAssignedSourceAddress(),System.currentTimeMillis());}if (mLastRegistrationEventID == null || !mLastRegistrationEventID.contentEquals(urr.getAssignedSourceAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.REGISTER).aliasList(getAliasList()).details("REGISTRATION:" + urr.getResponse().name() + " FOR EXTERNAL SYSTEM ADDRESS: "+ urr.getWACN()+ "-"+ urr.getSystemID()+ "-"+ urr.getSourceAddress()+ " SOURCE ID: "+ urr.getSourceID()).from(urr.getAssignedSourceAddress()).build());mLastRegistrationEventID=urr.getAssignedSourceAddress();}} else {logAlternateVendorMessage(pdu);}break;case UNIT_TO_UNIT_ANSWER_REQUEST:if (pdu instanceof UnitToUnitAnswerRequestExplicit) {UnitToUnitAnswerRequestExplicit utuare=(UnitToUnitAnswerRequestExplicit)pdu;if (mLastPageEventID == null || !mLastPageEventID.contentEquals(utuare.getTargetAddress())) {broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).details((utuare.isEmergency() ? "EMERGENCY" : "")).from(utuare.getWACN() + "-" + utuare.getSystemID()+ "-"+ utuare.getSourceID()).to(utuare.getTargetAddress()).build());mLastPageEventID=utuare.getTargetAddress();}} else {logAlternateVendorMessage(pdu);}break;default :break;}}}  }
class C{  private Hop simplifyReverseOperation(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof AggBinaryOp && hi.getInput().get(0) instanceof TernaryOp) {    TernaryOp top=(TernaryOp)hi.getInput().get(0);    if (top.getOp() == OpOp3.CTABLE && HopRewriteUtils.isBasic1NSequence(top.getInput().get(0)) && HopRewriteUtils.isBasicN1Sequence(top.getInput().get(1)) && top.getInput().get(0).getDim1() == top.getInput().get(1).getDim1()) {      ReorgOp rop=HopRewriteUtils.createReorg(hi.getInput().get(1),ReOrgOp.REV);      HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);      HopRewriteUtils.addChildReference(parent,rop,pos);      if (hi.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hi);      if (top.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(top);      hi=rop;      LOG.debug("Applied simplifyReverseOperation.");    }  }  return hi;}  }
class C{  public void read(ByteBuffer f) throws IOException {  psfOffset=f.position();  ident=readUWord(f);  if (ident != PSF_IDENT) {    System.out.println("Not a valid PSF file (ident=" + String.format("%08X",ident) + ")");    return;  }  version=readUWord(f);  keyTableOffset=readUWord(f);  valueTableOffset=readUWord(f);  indexEntryCount=readUWord(f);  for (int i=0; i < indexEntryCount; i++) {    PSFKeyValuePair pair=new PSFKeyValuePair();    pair.read(f);    pairList.add(pair);  }  for (  PSFKeyValuePair pair : pairList) {    f.position(psfOffset + keyTableOffset + pair.keyOffset);    pair.key=readStringZ(f);    f.position(psfOffset + valueTableOffset + pair.valueOffset);switch (pair.dataType) {case PSF_DATA_TYPE_BINARY:      byte[] data=new byte[pair.dataSize];    f.get(data);  pair.data=data;break;case PSF_DATA_TYPE_STRING:byte[] s=new byte[pair.dataSize];f.get(s);pair.data=new String(s,0,s[s.length - 1] == '\0' ? s.length - 1 : s.length,Constants.charset);break;case PSF_DATA_TYPE_INT32:pair.data=readUWord(f);break;default :System.out.println(String.format("offset=%08X key='%s' unhandled data type %d [len=%d]",keyTableOffset + pair.keyOffset,pair.key,pair.dataType,pair.dataSize));break;}}sizeDirty=true;tablesDirty=false;calculateSize();}  }
class C{  @Override public FSSliceReader createBlockReader(){  S3BlockReader reader=new S3BlockReader();  reader.setBucketName(S3BlockReader.extractBucket(getFiles()));  reader.setAccessKey(S3BlockReader.extractAccessKey(getFiles()));  reader.setSecretAccessKey(S3BlockReader.extractSecretAccessKey(getFiles()));  return reader;}  }
class C{  private final boolean checkShort(short in,Condition condition){  String value=condition.getValue();  short v;  try {    v=Short.parseShort(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  public boolean hasOverlayGraph(){  return overlayGraph.get() != null;}  }
class C{  @Override public boolean equals(Object o1){  return this == o1;}  }
class C{  protected void increaseJointOccurences(int msg1Id,int msg2Id,int count) throws AdeInternalException {  if (!mLegalMsgIds.contains(msg1Id) || !mLegalMsgIds.contains(msg2Id)) {    return;  }  m_msgId2msgIndicesMap.add(msg1Id);  m_msgId2msgIndicesMap.add(msg2Id);  final int globalMsgIndex1=m_msgId2msgIndicesMap.indexOf(msg1Id);  final int globalMsgIndex2=m_msgId2msgIndicesMap.indexOf(msg2Id);  mCoOccurrencesAndMiMatrix.set(globalMsgIndex1,globalMsgIndex2,mCoOccurrencesAndMiMatrix.get(globalMsgIndex1,globalMsgIndex2) + count);}  }
class C{  public GeneralException(List<String> messages,Throwable nested){  super(nested);  this.messages=messages;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static final void printThreadCpuTime(final Thread thread){  if (tbe.isThreadCpuTimeEnabled()) {    log.info("Thread performance: Thread=" + thread.getName() + "  cpu-time="+ getThreadCpuTime(thread)+ "sec");  }}  }
class C{  public boolean isMarkupLanguage(){  return false;}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  if (!namespace.equals("") || !localName.equals("type")) {    super.processAttribute(namespace,localName,value);  }}  }
class C{  public EditableLabeledOMPoly(){  createGraphic(null);}  }
class C{  public ImageOutputFormat(){  this("PNG","Portable Network Graphics (PNG)","png",BufferedImage.TYPE_INT_ARGB);}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.549 -0500",hash_original_method="B9132D3CC6E7407A65F178898D94F282",hash_generated_method="6D02779E22897C5CCC1B61B4DC8471C5") public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public boolean isInRange(){  FloatVectorSpecies _species=(FloatVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public PushCommand createPushCommand(){  PushCommand command=new PushCommand(repository,gitSshScriptProvider,credentialsLoader,gitAskPassScript);  command.setLineConsumerFactory(gitOutputPublisherFactory);  return command;}  }
class C{  public BinaryClassificationPerformance(int type,double[][] counter){  this.type=type;  this.counter[N][N]=counter[N][N];  this.counter[N][P]=counter[N][P];  this.counter[P][N]=counter[P][N];  this.counter[P][P]=counter[P][P];}  }
class C{  private void establecerElementosFormulario(HttpServletRequest request){  GestionFondosBI fondosService=getGestionFondosBI(request);  int[] estados={IElementoCuadroClasificacion.VIGENTE};  removeInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY);  setInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY,fondosService.getFondosXEstados(estados));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.596 -0500",hash_original_method="1AD631AC990AF6BF0D5460B8B5F54BE7",hash_generated_method="EDA28ADE4E57B024E9B8B348558ECB79") @Override public String toString(){  String dsc=null;switch (this.type) {case TYPE_UNDERFLOW:    dsc="UNDERFLOW error";  break;case TYPE_OVERFLOW:dsc="OVERFLOW error";break;case TYPE_UNMAPPABLE_CHAR:dsc="Unmappable-character error with erroneous input length " + this.length;break;case TYPE_MALFORMED_INPUT:dsc="Malformed-input error with erroneous input length " + this.length;break;default :dsc="";break;}dsc.addTaint(getTaint());return dsc;}  }
class C{  private Style parseStyleForASS(String[] line,String[] styleFormat,int index,boolean isASS,String warnings){  Style newStyle=new Style(Style.defaultID());  if (line.length != styleFormat.length) {    warnings+="incorrectly formated line at " + index + "\n\n";  } else {    for (int i=0; i < styleFormat.length; i++) {      if (styleFormat[i].trim().equalsIgnoreCase("Name")) {        newStyle.iD=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontname")) {        newStyle.font=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontsize")) {        newStyle.fontSize=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("PrimaryColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HBBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("BackColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HBBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("Bold")) {        newStyle.bold=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Italic")) {        newStyle.italic=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Underline")) {        newStyle.underline=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Alignment")) {        int placement=Integer.parseInt(line[i].trim());        if (isASS) {switch (placement) {case 1:            newStyle.textAlign="bottom-left";          break;case 2:        newStyle.textAlign="bottom-center";      break;case 3:    newStyle.textAlign="bottom-right";  break;case 4:newStyle.textAlign="mid-left";break;case 5:newStyle.textAlign="mid-center";break;case 6:newStyle.textAlign="mid-right";break;case 7:newStyle.textAlign="top-left";break;case 8:newStyle.textAlign="top-center";break;case 9:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}} else {switch (placement) {case 9:newStyle.textAlign="bottom-left";break;case 10:newStyle.textAlign="bottom-center";break;case 11:newStyle.textAlign="bottom-right";break;case 1:newStyle.textAlign="mid-left";break;case 2:newStyle.textAlign="mid-center";break;case 3:newStyle.textAlign="mid-right";break;case 5:newStyle.textAlign="top-left";break;case 6:newStyle.textAlign="top-center";break;case 7:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}}}}}return newStyle;}  }
class C{  public static Response createChannelBindErrorResponse(char errorCode,String reasonPhrase){  Response channelBindErrorResponse=new Response();  channelBindErrorResponse.setMessageType(Message.CHANNELBIND_ERROR_RESPONSE);  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  channelBindErrorResponse.putAttribute(errorCodeAttribute);  return channelBindErrorResponse;}  }
class C{  public static double[][] increment(int m,int n,double begin,double pitch){  double[][] array=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      array[i][j]=begin + i * pitch;    }  }  return array;}  }
class C{  private void addKeybindCategory(JPanel panel,String categoryName){  addKeybindCategoryLabel(panel,"<html><b>" + categoryName + "</b></html>");  addKeybindCategorySeparator(panel);  keybindButtonGridYCounter++;  keybindLabelGridYCounter++;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Nullable public N node(@Nullable Object key){  int hash=hash(key);  rw.readLock().lock();  try {    Map.Entry<Integer,SortedSet<N>> firstEntry=circle.firstEntry();    if (firstEntry == null)     return null;    Map.Entry<Integer,SortedSet<N>> tailEntry=circle.tailMap(hash,true).firstEntry();    return circle.get(tailEntry == null ? firstEntry.getKey() : tailEntry.getKey()).first();  }  finally {    rw.readLock().unlock();  }}  }
class C{  public Sprite createTextBox(final String text,final int width,final Color textColor,final Color fillColor,final boolean isTalking){  List<AttributedCharacterIterator> lines=createFormattedLines(text,textColor,width);  final int lineLengthPixels=getMaxPixelWidth(lines);  final int numLines=lines.size();  final GraphicsConfiguration gc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  final int imageWidth;  if (lineLengthPixels + BUBBLE_OFFSET < width) {    imageWidth=(lineLengthPixels + BUBBLE_OFFSET) + ARC_DIAMETER;  } else {    imageWidth=width + BUBBLE_OFFSET + ARC_DIAMETER;  }  final int imageHeight=LINE_HEIGHT * numLines + 2 * MARGIN_WIDTH;  final BufferedImage image=gc.createCompatibleImage(imageWidth,imageHeight,TransparencyMode.TRANSPARENCY);  final Graphics2D g2d=image.createGraphics();  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  if (fillColor != null) {    if (isTalking) {      drawBubble(g2d,fillColor,textColor,imageWidth - BUBBLE_OFFSET,imageHeight);    } else {      drawRectangle(g2d,fillColor,textColor,imageWidth - BUBBLE_OFFSET,imageHeight);    }  }  drawTextLines(g2d,lines,textColor,MARGIN_WIDTH + BUBBLE_OFFSET,MARGIN_WIDTH);  g2d.dispose();  return new ImageSprite(image);}  }
class C{  private void paintBit(Graphics graphics,int index,boolean value){  Graphics2D g2=(Graphics2D)graphics;  Path2D.Float polyline=new Path2D.Float(Path2D.Float.WIND_EVEN_ODD,mSamples.size());  float middleY=((float)getHeight() / 2.0f);  float indexWidth=(float)(getWidth()) / (float)mSampleCount;  float startX=(float)index * indexWidth;  float stopX=(float)(index + 1) * indexWidth;  float fivePercent=indexWidth * .05f;  float leftX=startX + fivePercent;  float rightX=stopX - fivePercent;  polyline.moveTo(startX,middleY);  polyline.lineTo(leftX,middleY);  float y=(value ? (middleY - (middleY * 0.5f)) : (middleY + (middleY * 0.5f)));  polyline.lineTo(leftX,y);  polyline.lineTo(rightX,y);  polyline.lineTo(rightX,middleY);  polyline.lineTo(stopX,middleY);  g2.draw(polyline);  String bit=value ? "1" : "0";  FontMetrics fontMetrics=graphics.getFontMetrics(this.getFont());  Rectangle2D label=fontMetrics.getStringBounds(bit,graphics);  float offsetX=(float)label.getWidth() / 2.0f;  float offsetY=(float)label.getWidth() / 2.0f;  float middleX=startX + (indexWidth / 2.0f);  graphics.drawString(bit,(int)(middleX - offsetX),(int)(middleY - offsetY));}  }
class C{  private void loadADSequences(){  if (!isObjectExists("AD_Sequence",m_tables))   return;  s_logger.log(Level.FINE,"loadADSequences",getDirection());  String sql=s_dbEngine.sqlAD_getSequences(getVendor(),getCatalog(),getSchema());  ResultSet rs=null;  Statement stmt=null;  m_sequenceSystem=new HashMap<String,Long>();  m_sequenceUser=new HashMap<String,Long>();  stmt=setStatement();  rs=executeQuery(stmt,sql);  while (getResultSetNext(rs)) {    String seqName=getResultSetString(rs,"SEQ_NAME");    if (seqName != null) {      seqName=seqName.toUpperCase();      long seqSystem=getResultSetLong(rs,"SEQ_SYS");      long seqUser=getResultSetLong(rs,"SEQ_USER");      m_sequenceSystem.put(seqName,seqSystem);      m_sequenceUser.put(seqName,seqUser);    }  }  releaseResultSet(rs);  releaseStatement(stmt);  s_logger.log(Level.FINE,"adSequencesLoaded",Integer.toString(m_sequenceSystem.size()));  s_logger.flush();  return;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public static Word max(){  return new Word(0xFFFFFFFF);}  }
class C{  private static Properties createProperties1(){  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  return props;}  }
class C{  private void processOutputColumnList(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  EventPublisher ep=new EventPublisher();  try {    ep.setSsAuthSubToken((String)request.getSession().getAttribute(SESSION_ATTR_SS_AUTH_TOKEN),false);    request.setAttribute("token",ep.getSsAuthSubToken());    request.setAttribute("columnList",ep.getColumnList((String)request.getParameter("cellFeed")));    request.getSession().setAttribute(SESSION_ATTR_SS_CELL_FEED,(String)request.getParameter("cellFeed"));  } catch (  EPAuthenticationException e) {    System.err.println("Authentication exception: " + e.getMessage());  }  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputColumnList.jsp");  dispatcher.forward(request,response);}  }
class C{  public JCExpression Create(Symbol ctor,List<JCExpression> args){  Type t=ctor.owner.erasure(types);  JCNewClass newclass=NewClass(null,null,Type(t),args,null);  newclass.constructor=ctor;  newclass.setType(t);  return newclass;}  }
class C{  public static int deleteInventoryMA(int M_Inventory_ID,String trxName){  String sql="DELETE FROM M_InventoryLineMA ma WHERE EXISTS " + "(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID" + " AND M_Inventory_ID=" + M_Inventory_ID + ")";  return DB.executeUpdate(sql,trxName);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public LazyPOrderedSetX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  protected List<Recommendation> buildCgRecommendations(VirtualPoolCapabilityValuesWrapper capabilities,VirtualPool vpool,List<VirtualArray> protectionVarrays,Volume vpoolChangeVolume){  BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());  _log.info(String.format("Attempting to align placement (protection system, storage pools, internal site names) with " + "existing volumes in RecoverPoint consistency group %s.",cg.getLabel()));  List<Recommendation> recommendations=new ArrayList<Recommendation>();  List<Volume> sourceVolumes=RPHelper.getCgSourceVolumes(capabilities.getBlockConsistencyGroup(),dbClient);  if (sourceVolumes.isEmpty()) {    _log.info(String.format("Unable to fully align placement with existing volumes in RecoverPoint consistency group %s.  " + "The consistency group currently contains no volumes.",cg.getLabel()));    return recommendations;  }  if (!verifyExistingSourceProtectionPools(sourceVolumes.get(0),vpool,cg.getLabel())) {    return recommendations;  }  Volume sourceVolume=null;  boolean createRecommendations=false;  for (  Volume currentSourceVolume : sourceVolumes) {    if (cgPoolsHaveAvailableCapacity(currentSourceVolume,capabilities,vpool,protectionVarrays)) {      createRecommendations=true;      sourceVolume=currentSourceVolume;      break;    }  }  if (!createRecommendations) {    return recommendations;  }  RPProtectionRecommendation recommendation=new RPProtectionRecommendation();  if (sourceVolume.getProtectionController() != null) {    ProtectionSystem ps=dbClient.queryObject(ProtectionSystem.class,sourceVolume.getProtectionController());    if (ps.getInactive()) {      throw APIException.badRequests.cgReferencesInvalidProtectionSystem(capabilities.getBlockConsistencyGroup(),sourceVolume.getProtectionController());    }  } else {    throw APIException.badRequests.cgReferencesInvalidProtectionSystem(capabilities.getBlockConsistencyGroup(),sourceVolume.getProtectionController());  }  recommendation.setProtectionDevice(sourceVolume.getProtectionController());  recommendation.setVpoolChangeVolume(vpoolChangeVolume != null ? vpoolChangeVolume.getId() : null);  recommendation.setVpoolChangeNewVpool(vpoolChangeVolume != null ? vpool.getId() : null);  recommendation.setVpoolChangeProtectionAlreadyExists(vpoolChangeVolume != null ? vpoolChangeVolume.checkForRp() : false);  recommendation.setResourceCount(capabilities.getResourceCount());  List<Volume> sourceJournals=RPHelper.findExistingJournalsForCopy(dbClient,sourceVolume.getConsistencyGroup(),sourceVolume.getRpCopyName());  Volume sourceJournal=sourceJournals.get(0);  if (sourceJournal == null) {    _log.error(String.format("No existing source journal found in CG [%s] for copy [%s], returning false",sourceVolume.getConsistencyGroup(),sourceVolume.getRpCopyName()));    throw APIException.badRequests.unableToFindSuitableJournalRecommendation();  }  VirtualPool sourceJournalVpool=NullColumnValueGetter.isNotNullValue(vpool.getJournalVpool()) ? dbClient.queryObject(VirtualPool.class,URI.create(vpool.getJournalVpool())) : vpool;  Long sourceJournalSize=getJournalCapabilities(vpool.getJournalSize(),capabilities,1).getSize();  RPRecommendation sourceJournalRecommendation=buildRpRecommendationFromExistingVolume(sourceJournal,sourceJournalVpool,capabilities,sourceJournalSize);  recommendation.setSourceJournalRecommendation(sourceJournalRecommendation);  String standbyCopyName=RPHelper.getStandbyProductionCopyName(dbClient,sourceVolume);  if (standbyCopyName != null) {    List<Volume> existingStandbyJournals=RPHelper.findExistingJournalsForCopy(dbClient,sourceVolume.getConsistencyGroup(),standbyCopyName);    Volume standbyJournal=existingStandbyJournals.get(0);    if (standbyJournal == null) {      _log.error(String.format("No existing standby journal found in CG [%s] for copy [%s], returning false",sourceVolume.getConsistencyGroup(),standbyCopyName));      throw APIException.badRequests.unableToFindSuitableJournalRecommendation();    }    VirtualPool haVpool=(null != VirtualPool.getHAVPool(vpool,dbClient)) ? VirtualPool.getHAVPool(vpool,dbClient) : vpool;    VirtualPool standbyJournalVpool=NullColumnValueGetter.isNotNullValue(vpool.getStandbyJournalVpool()) ? dbClient.queryObject(VirtualPool.class,URI.create(vpool.getStandbyJournalVpool())) : haVpool;    RPRecommendation standbyJournalRecommendation=buildRpRecommendationFromExistingVolume(standbyJournal,standbyJournalVpool,capabilities,sourceJournalSize);    recommendation.setStandbyJournalRecommendation(standbyJournalRecommendation);  }  RPRecommendation sourceRecommendation=buildRpRecommendationFromExistingVolume(sourceVolume,vpool,capabilities,null);  recommendation.getSourceRecommendations().add(sourceRecommendation);  Map<URI,VpoolProtectionVarraySettings> protectionSettings=VirtualPool.getProtectionSettings(vpool,dbClient);  for (  VirtualArray protectionVarray : protectionVarrays) {    Volume targetVolume=getTargetVolumeForProtectionVirtualArray(sourceVolume,protectionVarray);    VirtualPool targetVpool=vpool;    if (protectionSettings.get(protectionVarray.getId()) != null && protectionSettings.get(protectionVarray.getId()).getVirtualPool() != null) {      targetVpool=dbClient.queryObject(VirtualPool.class,protectionSettings.get(protectionVarray.getId()).getVirtualPool());    }    RPRecommendation targetRecommendation=buildRpRecommendationFromExistingVolume(targetVolume,targetVpool,capabilities,null);    if (sourceRecommendation.getTargetRecommendations() == null) {      sourceRecommendation.setTargetRecommendations(new ArrayList<RPRecommendation>());    }    sourceRecommendation.getTargetRecommendations().add(targetRecommendation);    List<Volume> targetJournals=RPHelper.findExistingJournalsForCopy(dbClient,targetVolume.getConsistencyGroup(),targetVolume.getRpCopyName());    Volume targetJournal=targetJournals.get(0);    if (targetJournal == null) {      _log.error(String.format("No existing target journal found in CG [%s] for copy [%s], returning false",targetVolume.getConsistencyGroup(),targetVolume.getRpCopyName()));      throw APIException.badRequests.unableToFindSuitableJournalRecommendation();    }    VirtualPool targetJournalVpool=protectionSettings.get(protectionVarray.getId()).getJournalVpool() != null ? dbClient.queryObject(VirtualPool.class,protectionSettings.get(protectionVarray.getId()).getJournalVpool()) : targetVpool;    Long targetJournalSize=getJournalCapabilities(protectionSettings.get(protectionVarray.getId()).getJournalSize(),capabilities,1).getSize();    RPRecommendation targetJournalRecommendation=buildRpRecommendationFromExistingVolume(targetJournal,targetJournalVpool,capabilities,targetJournalSize);    if (recommendation.getTargetJournalRecommendations() == null) {      recommendation.setTargetJournalRecommendations(new ArrayList<RPRecommendation>());    }    recommendation.getTargetJournalRecommendations().add(targetJournalRecommendation);  }  _log.info(String.format("Produced recommendations based on existing source volume [%s](%s) from " + "RecoverPoint consistency group %s: %n %s",sourceVolume.getLabel(),sourceVolume.getId(),cg.getLabel(),recommendation.toString(dbClient)));  recommendations.add(recommendation);  return recommendations;}  }
class C{  public void dfs(CLIQUEUnit<V> unit,ModifiableDBIDs cluster,CLIQUESubspace<V> model){  cluster.addDBIDs(unit.getIds());  unit.markAsAssigned();  model.addDenseUnit(unit);  final long[] dims=getDimensions();  for (int dim=BitsUtil.nextSetBit(dims,0); dim >= 0; dim=BitsUtil.nextSetBit(dims,dim + 1)) {    CLIQUEUnit<V> left=leftNeighbor(unit,dim);    if (left != null && !left.isAssigned()) {      dfs(left,cluster,model);    }    CLIQUEUnit<V> right=rightNeighbor(unit,dim);    if (right != null && !right.isAssigned()) {      dfs(right,cluster,model);    }  }}  }
class C{  public DTMException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  @Override public boolean canProduceRules(){  return true;}  }
class C{  public void configureManagers(){  log.debug("Called Configure Managers");  if (z21CommandStation == null) {    setRocoZ21CommandStation(new RocoZ21CommandStation());  }  z21CommandStation.setXPressNetMessagesFlag(true);  z21CommandStation.setXPressNetLocomotiveMessagesFlag(true);  _tc.sendz21Message(Z21Message.getLanSetBroadcastFlagsRequestMessage(z21CommandStation.getZ21BroadcastFlags()),null);  _xnettunnel=new Z21XPressNetTunnel(this);  if (_rm == null) {    setReporterManager(new Z21ReporterManager(this));    jmri.InstanceManager.store(getReporterManager(),jmri.ReporterManager.class);  }}  }
class C{  private boolean hasMinute(){  return getMinute() != null;}  }
class C{  public IGameMove decideMove(IGameState gameState){  if (gameState.isWin())   return null;  if (gameState.isDraw())   return null;  return algorithm.bestMove(gameState,this,opponent);}  }
class C{  public static Map<String,String> removeNonMatchingKeys(Map<String,String> m,List<String> ls){  Iterator<Map.Entry<String,String>> iter=m.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry<String,String> entry=iter.next();    if (!ls.contains(entry.getKey().toLowerCase())) {      iter.remove();    }  }  return m;}  }
class C{  public ServiceCall<TranslationModel> createModel(CreateModelOptions options){  Validator.notNull(options,"options cannot be null");  Validator.notEmpty(options.baseModelId(),"options.baseModelId cannot be null or empty");  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_MODELS);  requestBuilder.query(BASE_MODEL_ID,options.baseModelId());  if (options.name() != null) {    requestBuilder.query(NAME,options.name());  }  final MultipartBody.Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  if (options.forcedGlossary() != null) {    bodyBuilder.addFormDataPart(FORCED_GLOSSARY,options.forcedGlossary().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.forcedGlossary()));  }  if (options.monolingualCorpus() != null) {    bodyBuilder.addFormDataPart(MONOLINGUAL_CORPUS,options.monolingualCorpus().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.monolingualCorpus()));  }  if (options.parallelCorpus() != null) {    bodyBuilder.addFormDataPart(PARALLEL_CORPUS,options.parallelCorpus().getName(),RequestBody.create(HttpMediaType.BINARY_FILE,options.parallelCorpus()));  }  return createServiceCall(requestBuilder.body(bodyBuilder.build()).build(),ResponseConverterUtils.getObject(TranslationModel.class));}  }
class C{  @VisibleForTesting static String toJson(Counters counters) throws SerializationException {  ArrayNode countersJsonNode=JsonNodeFactory.instance.arrayNode();  ArrayNode groupsJsonNode=JsonNodeFactory.instance.arrayNode();  for (  Group group : counters) {    for (    Counters.Counter counter : group) {      ObjectNode counterJsonNode=JsonNodeFactory.instance.objectNode();      counterJsonNode.put("counterName",counter.getName()).put("value",counter.getValue());      countersJsonNode.add(counterJsonNode);    }    ObjectNode groupJsonNode=JsonNodeFactory.instance.objectNode();    groupJsonNode.put("groupName",group.getDisplayName()).put("counters",countersJsonNode);    groupsJsonNode.add(groupJsonNode);  }  ObjectMapper mapper=new ObjectMapper();  try {    return mapper.writeValueAsString(groupsJsonNode);  } catch (  JsonProcessingException e) {    throw new SerializationException(e);  }}  }
class C{  public synchronized void addAllSeries(List<XYSeries> series){  mSeries.addAll(series);}  }
class C{  public static void addStartupLogMessage(String message){  System.out.println(message);  if (startupLogMessages == null) {    startupLogMessages=new ArrayList<String>();  }  startupLogMessages.add(message);}  }
class C{  public void clearTestProviderStatus(String provider){  try {    mService.clearTestProviderStatus(provider);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  public static Element drawFilled(SVGPlot svgp,String cls,Projection2D proj,double[] min,double[] max){  Element group=svgp.svgElement(SVGConstants.SVG_G_TAG);  ArrayList<double[]> edges=getVisibleEdges(proj,min,max);  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawSides(svgp,group,cls,rv_min[0],rv_min[1],edges,0,BitsUtil.zero(edges.size()));  return group;}  }
class C{  protected static int makeMarkAndDotEqual(JTextArea textArea,boolean forward){  Caret c=textArea.getCaret();  int val=forward ? Math.min(c.getDot(),c.getMark()) : Math.max(c.getDot(),c.getMark());  c.setDot(val);  return val;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(LABEL);  builder.addAttribute(MAIL_CLASS);  builder.addAttribute(PRIMARY);  builder.addAttribute(REL);  builder.addAttribute(USAGE);  builder.addElement(Agent.KEY);  builder.addElement(City.KEY);  builder.addElement(Country.KEY);  builder.addElement(FormattedAddress.KEY);  builder.addElement(HouseName.KEY);  builder.addElement(Neighborhood.KEY);  builder.addElement(PoBox.KEY);  builder.addElement(PostCode.KEY);  builder.addElement(Region.KEY);  builder.addElement(Street.KEY);  builder.addElement(Subregion.KEY);}  }
class C{  public void removeJarPath(final String strJarPath){synchronized (m_jarVect) {    m_jarVect.removeElement(strJarPath);  }}  }
class C{  public boolean contains(int x,int z){  int index=getIndex(x,z);  XZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getZ() == z) {      return true;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  return false;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public int numVerticesSampledTotal(Set<? extends SampledVertex> vertices,int iteration){  return numVerticesSampledTotal(vertices)[iteration];}  }
class C{  public Request request(final DigestURL url,final boolean forText,final boolean global){  CrawlProfile profile=(forText) ? ((global) ? this.sb.crawler.defaultTextSnippetGlobalProfile : this.sb.crawler.defaultTextSnippetLocalProfile) : ((global) ? this.sb.crawler.defaultMediaSnippetGlobalProfile : this.sb.crawler.defaultMediaSnippetLocalProfile);  return new Request(ASCII.getBytes(this.sb.peers.mySeed().hash),url,null,"",new Date(),profile.handle(),0,profile.timezoneOffset());}  }
class C{  public Day(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  public static Object[] addObjectToArray(Object[] array,Object obj){  Class compType=Object.class;  if (array != null) {    compType=array.getClass().getComponentType();  } else   if (obj != null) {    compType=obj.getClass();  }  int newArrLength=(array != null ? array.length + 1 : 1);  Object[] newArr=(Object[])Array.newInstance(compType,newArrLength);  if (array != null) {    System.arraycopy(array,0,newArr,0,array.length);  }  newArr[newArr.length - 1]=obj;  return newArr;}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  public boolean isReboot(){  return reboot;}  }
class C{  @Override public Date computeFirstFireTime(org.quartz.Calendar calendar){  nextFireTime=getStartTime();  while (nextFireTime != null && calendar != null && !calendar.isTimeIncluded(nextFireTime.getTime())) {    nextFireTime=getFireTimeAfter(nextFireTime);    if (nextFireTime == null)     break;    java.util.Calendar c=java.util.Calendar.getInstance();    c.setTime(nextFireTime);    if (c.get(java.util.Calendar.YEAR) > YEAR_TO_GIVEUP_SCHEDULING_AT) {      return null;    }  }  return nextFireTime;}  }
class C{  @RequestMapping(value="/{id}/{k}/",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processId,@PathVariable("k") String key,Principal principal){  RestWrapper restWrapper=null;  try {    Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(processId,principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.PropertiesId propertiesId=new com.wipro.ats.bdre.md.dao.jpa.PropertiesId();    propertiesId.setProcessId(processId);    propertiesId.setPropKey(key);    propertiesDAO.delete(propertiesId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + ","+ key+ " deleted from Properties by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void addInnerBoundary(Iterable<? extends LatLon> corners){  if (corners == null) {    String message=Logging.getMessage("nullValue.LocationInListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.getBoundaries().add(this.fillBoundary(corners));  this.reset();}  }
class C{  private static Route findNearest(final Territory start,final Match<Territory> endCondition,final Match<Territory> routeCondition,final GameData data){  final Match<Territory> canGo=new CompositeMatchOr<>(endCondition,routeCondition);  final Map<Territory,Territory> visited=new HashMap<>();  final Queue<Territory> q=new LinkedList<>();  final List<Territory> route=new ArrayList<>();  q.addAll(data.getMap().getNeighbors(start,canGo));  Territory current=null;  visited.put(start,null);  for (  final Territory t : q) {    visited.put(t,start);  }  while (!q.isEmpty()) {    current=q.remove();    if (endCondition.match(current)) {      break;    } else {      for (      final Territory neighbor : data.getMap().getNeighbors(current,canGo)) {        if (!visited.containsKey(neighbor)) {          q.add(neighbor);          visited.put(neighbor,current);        }      }    }  }  if (current == null || !endCondition.match(current)) {    return null;  }  for (Territory t=current; t != null; t=visited.get(t)) {    route.add(t);  }  Collections.reverse(route);  return new Route(route);}  }
class C{  public static boolean isAvailable(Context ctx,Intent intent){  final PackageManager mgr=ctx.getPackageManager();  List<ResolveInfo> list=mgr.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  return list.size() > 0;}  }
class C{  public String zookeeperConnect(){  return effectiveConfig.getProperty("zookeeper.connect",DEFAULT_ZK_CONNECT);}  }
class C{  public static ValueTimestamp fromMillisNanos(long ms,int nanos){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long timeNanos=nanos + DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,timeNanos);}  }
class C{  public static Constraint validURL(String errorMessage){  return new RegexConstraint(validURLRegex,errorMessage);}  }
class C{  public static Sentence newConjunction(List<? extends Sentence> conjuncts){  if (conjuncts.size() == 0) {    return PropositionSymbol.TRUE;  } else   if (conjuncts.size() == 1) {    return conjuncts.get(0);  }  return new ComplexSentence(Util.first(conjuncts),Connective.AND,newConjunction(Util.rest(conjuncts)));}  }
class C{  public void reloadPlugins(){  registry.getNative().unloadAll();  NaviLogger.info("Loading built-in plugins...");  final Collection<IPlugin<IPluginInterface>> plugins=new PluginLoader().getPlugins();  for (  final IPlugin<IPluginInterface> plugin : plugins) {    registry.addPlugin(plugin);  }  CPluginLoader.loadPlugins(mainWindow.getFrame(),this,registry.getNative(),startPath,ConfigManager.instance());  for (  final IPluginInterfaceListener listener : listeners) {    try {      listener.loadedPlugins();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public boolean isAuthnProviderExisted(AuthnCreateParam authnCreateParam){  List<AuthnProviderRestRep> authnProviderRestReps=viPRCoreClient.authnProviders().getAll();  boolean bExisted=false;  AuthnProviderRestRep restRep=null;  for (  AuthnProviderRestRep authnProviderRestRep : authnProviderRestReps) {    Set<String> domains=authnProviderRestRep.getDomains();    for (    String existedDomain : domains) {      for (      String inputDomain : authnCreateParam.getDomains()) {        if (existedDomain.equalsIgnoreCase(inputDomain)) {          bExisted=true;          break;        }      }      if (bExisted) {        break;      }    }    if (bExisted) {      break;    }  }  return bExisted;}  }
class C{  public void test_getPreparedPropertiesCompatibility() throws Exception {  String namespace="newNamespace";  Properties properties=new Properties();  properties.put(RemoteRepository.OPTION_CREATE_KB_NAMESPACE,namespace);  final Properties p=m_mgr.getPreparedProperties(namespace,properties);  properties.put("com.bigdata.rdf.sail.truthMaintenance","true");  properties.put("com.bigdata.rdf.store.AbstractTripleStore.quads","true");  try {    m_mgr.getPreparedProperties(namespace,properties);    fail("Expecting: " + HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  } catch (  HttpException ex) {    assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.getStatusCode());  }}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int bitNum=getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String sName=prefix + typeLetter() + bitNum;  lgt=new XNetLight(tc,this,sName,userName);  return lgt;}  }
class C{  private void copyAction(File srcFile,File destFile) throws FileNotFoundException, IOException {  FileInputStream istream=new FileInputStream(srcFile);  FileOutputStream ostream=new FileOutputStream(destFile);  FileChannel input=istream.getChannel();  FileChannel output=ostream.getChannel();  try {    input.transferTo(0,input.size(),output);  }  finally {    istream.close();    ostream.close();    input.close();    output.close();  }}  }
class C{  private BigDecimalPolynomial multRecursive(BigDecimalPolynomial poly2){  BigDecimal[] a=coeffs;  BigDecimal[] b=poly2.coeffs;  int n=poly2.coeffs.length;  if (n <= 1) {    BigDecimal[] c=coeffs.clone();    for (int i=0; i < coeffs.length; i++) {      c[i]=c[i].multiply(poly2.coeffs[0]);    }    return new BigDecimalPolynomial(c);  } else {    int n1=n / 2;    BigDecimalPolynomial a1=new BigDecimalPolynomial(copyOf(a,n1));    BigDecimalPolynomial a2=new BigDecimalPolynomial(copyOfRange(a,n1,n));    BigDecimalPolynomial b1=new BigDecimalPolynomial(copyOf(b,n1));    BigDecimalPolynomial b2=new BigDecimalPolynomial(copyOfRange(b,n1,n));    BigDecimalPolynomial A=(BigDecimalPolynomial)a1.clone();    A.add(a2);    BigDecimalPolynomial B=(BigDecimalPolynomial)b1.clone();    B.add(b2);    BigDecimalPolynomial c1=a1.multRecursive(b1);    BigDecimalPolynomial c2=a2.multRecursive(b2);    BigDecimalPolynomial c3=A.multRecursive(B);    c3.sub(c1);    c3.sub(c2);    BigDecimalPolynomial c=new BigDecimalPolynomial(2 * n - 1);    for (int i=0; i < c1.coeffs.length; i++) {      c.coeffs[i]=c1.coeffs[i];    }    for (int i=0; i < c3.coeffs.length; i++) {      c.coeffs[n1 + i]=c.coeffs[n1 + i].add(c3.coeffs[i]);    }    for (int i=0; i < c2.coeffs.length; i++) {      c.coeffs[2 * n1 + i]=c.coeffs[2 * n1 + i].add(c2.coeffs[i]);    }    return c;  }}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  Instance transformedInstance=instance;  if (!m_checksTurnedOff) {    m_TransformFilter.input(transformedInstance);    m_TransformFilter.batchFinished();    transformedInstance=m_TransformFilter.output();    m_MissingFilter.input(transformedInstance);    m_MissingFilter.batchFinished();    transformedInstance=m_MissingFilter.output();  }  return regressionPrediction(transformedInstance,m_SelectedAttributes,m_Coefficients);}  }
class C{  public final void error(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,t);  }}  }
class C{  public boolean isQueryCriteria(){  Object oo=get_Value(COLUMNNAME_IsQueryCriteria);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double distanceTo(DrawContext dc,Vec4 point){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (point == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4[] corners=this.computeCornerPoints(dc.getGlobe(),dc.getVerticalExaggeration());  Vec4 centerPoint=this.computeCenterPoint(dc.getGlobe(),dc.getVerticalExaggeration());  double d1=point.distanceTo3(corners[0]);  double d2=point.distanceTo3(corners[1]);  double d3=point.distanceTo3(corners[2]);  double d4=point.distanceTo3(corners[3]);  double d5=point.distanceTo3(centerPoint);  double minDistance=d1;  if (minDistance > d2)   minDistance=d2;  if (minDistance > d3)   minDistance=d3;  if (minDistance > d4)   minDistance=d4;  if (minDistance > d5)   minDistance=d5;  return minDistance;}  }
class C{  public void characters(String s) throws org.xml.sax.SAXException {  if (m_inEntityRef && !m_expandDTDEntities)   return;  final int length=s.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  s.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  public static boolean canInteract(User issuer,Role target){  if (target.getGuild().getOwner() == issuer)   return true;  List<Role> issuerRoles=target.getGuild().getRolesForUser(issuer);  if (issuerRoles == null)   throw new IllegalArgumentException("Issuer User is not in the guild that the target Role is a part of!");  return !issuerRoles.isEmpty() && canInteract(issuerRoles.get(0),target);}  }
class C{  public static MMovementCartBean addToMovementCart(Properties ctx,StockMovementBean bean,MMovementCartBean cartBean,boolean isSales,boolean ifAdd) throws OperationException, ProductNotFoundException, ProductNotOnPriceListException {  ArrayList<ItemBean> oldItems;  if (cartBean == null) {    cartBean=new MMovementCartBean();    oldItems=new ArrayList<ItemBean>();  } else {    oldItems=cartBean.getItems();  }  ArrayList<ItemBean> oldItemsClone=(ArrayList)oldItems.clone();  ArrayList itemsToBeAdded=getMMovementItems(ctx,bean);  oldItems=addToMMovementList(ctx,oldItemsClone,itemsToBeAdded,ifAdd);  Integer priceListId=POSTerminalManager.getPriceListId(ctx,isSales);  oldItems=setMMovementItemCosts(ctx,priceListId,oldItems,isSales);  cartBean.setItems(oldItems);  cartBean.setPricelistId(priceListId);  return cartBean;}  }
class C{  public void performStartOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/start",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  public ExtendedGeneralPath(int rule,int initialCapacity){  path=new GeneralPath(rule,initialCapacity);}  }
class C{  public static CorsServiceBuilder forOrigin(final String origin){  requireNonNull(origin,"origin");  if ("*".equals(origin)) {    return new CorsServiceBuilder();  }  return new CorsServiceBuilder(origin);}  }
class C{  public void clear(){  for (int i=0; i < values.length; i++) {    keys[i]=DEAD_KEY;    flags[i]=0;    values[i]=null;  }  size=0;}  }
class C{  public boolean equals(GMatrix m1){  try {    int i, j;    if (nRow != m1.nRow || nCol != m1.nCol) {      return false;    }    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        if (values[i][j] != m1.values[i][j]) {          return false;        }      }    }    return true;  } catch (  NullPointerException e2) {    return false;  }}  }
class C{  public static String removePtsResult(String deviceSerial,TestIdentifier test){  return mMap.remove(generateTestKey(deviceSerial,test));}  }
class C{  public void force(final boolean metadata){  try {    getChannel().force(metadata);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  private static InputStream fullStream(String fname) throws IOException {  FileInputStream fis=new FileInputStream(fname);  DataInputStream dis=new DataInputStream(fis);  byte[] bytes=new byte[dis.available()];  dis.readFully(bytes);  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  return bais;}  }
class C{  protected void acc_assign(AccurateValue n2){  acc_normalize(n2.digits.length);  int idx=digits.length - 1;  for (int i=n2.digits.length - 1; i >= 0; i--) {    digits[idx--]=n2.digits[i];  }  while (idx >= 0) {    digits[idx--]=0;  }  sign=n2.sign;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  assertSize("documentGetElementsByTagNameLengthAssert",5,nameList);}  }
class C{  @Override public int hashCode(){  return Objects.hash(id,version,updateSite);}  }
class C{  private void handlePortStat(String metricKey,MetricHeaderInfo headerInfo,Map<URI,PortStat> portStatMap,Map<String,Double> maxValues,Map<String,String> lastSample){  StoragePort port=headerInfo.port;  PortStat stat=portStatMap.get(port.getId());  if (stat == null) {    stat=new PortStat(port,0,0,0);    portStatMap.put(port.getId(),stat);  }  if (metricKey.contains(FE_PORT_OPS)) {    stat.iops=maxValues.containsKey(metricKey) ? maxValues.get(metricKey).longValue() : Double.valueOf(lastSample.get(metricKey)).longValue();  } else   if (metricKey.contains(FE_PORT_READ)) {    stat.kbytes+=maxValues.containsKey(metricKey) ? maxValues.get(metricKey).longValue() : Double.valueOf(lastSample.get(metricKey)).longValue();  } else   if (metricKey.contains(FE_PORT_WRITE)) {    stat.kbytes+=maxValues.containsKey(metricKey) ? maxValues.get(metricKey).longValue() : Double.valueOf(lastSample.get(metricKey)).longValue();  }  if (stat.sampleTime == null || stat.sampleTime == 0) {    stat.sampleTime=Long.valueOf(lastSample.get(HEADER_KEY_TIME_UTC));  }}  }
class C{  public static boolean mkdirs(File dir){  String path=dir.getPath().replace('\\','/');  if (path.equals("~") || path.startsWith("~/") || path.contains("/~/")) {    return false;  }  return dir.mkdirs();}  }
class C{  @SuppressWarnings("unused") public void reload(){  serviceLoader.reload();  storageServiceProviders.clear();  load();}  }
class C{  private void onWaypointStart(Attributes attributes){  name=null;  description=null;  category=null;  photoUrl=null;  latitude=attributes.getValue(ATTRIBUTE_LAT);  longitude=attributes.getValue(ATTRIBUTE_LON);  altitude=null;  time=null;  waypointType=null;}  }
class C{  public boolean isMult(){  return m_isMult;}  }
class C{  protected void debugCode(String text){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + text);  }}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  public boolean isSentToMultiSig(){  if (chunks.size() < 4)   return false;  ScriptChunk chunk=chunks.get(chunks.size() - 1);  if (!chunk.isOpCode())   return false;  if (!(chunk.equalsOpCode(OP_CHECKMULTISIG) || chunk.equalsOpCode(OP_CHECKMULTISIGVERIFY)))   return false;  try {    ScriptChunk m=chunks.get(chunks.size() - 2);    if (!m.isOpCode())     return false;    int numKeys=decodeFromOpN(m.data[0]);    if (numKeys < 1 || chunks.size() != 3 + numKeys)     return false;    for (int i=1; i < chunks.size() - 2; i++) {      if (chunks.get(i).isOpCode())       return false;    }    if (decodeFromOpN(chunks.get(0).data[0]) < 1)     return false;  } catch (  IllegalStateException e) {    return false;  }  return true;}  }
class C{  public BaseSprite(Engine engine,int w,int h,int columns){  this.s_engine=engine;  this.s_width=w;  this.s_height=h;  this.s_columns=columns;  this.frameType=FrameType.FIXED;  init();}  }
class C{  @Inline @Override public final int intRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getIntAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  private void verifyVolumesInCG(List<Volume> volumes,List<Volume> cgVolumes){  if (volumes.size() < cgVolumes.size()) {    throw APIException.badRequests.cantChangeVarrayNotAllCGVolumes();  }  for (  Volume volume : volumes) {    boolean found=false;    for (    Volume cgVolume : cgVolumes) {      if (volume.getId().equals(cgVolume.getId())) {        found=true;        break;      }    }    if (!found) {      _log.error("Volume {}:{} not found in CG",volume.getId(),volume.getLabel());      throw APIException.badRequests.cantChangeVarrayVolumeIsNotInCG();    }  }}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public static void runWithOptimizationLevel(final ContextAction action,final int optimizationLevel){  runWithOptimizationLevel(new ContextFactory(),action,optimizationLevel);}  }
class C{  @Override public void createGroupSnapshots(StorageSystem storage,List<URI> snapshotList,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START createGroupSnapshots");  CIMObjectPath targetGroupPath=null;  List<String> targetDeviceIds=null;  String sourceGroupName=null;  try {    final BlockSnapshot first=_dbClient.queryObject(BlockSnapshot.class,snapshotList.get(0));    sourceGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(first,_dbClient);    Volume snapVolume=_dbClient.queryObject(Volume.class,first.getParent());    boolean thinProvisioning=snapVolume.getThinlyProvisioned() != null && snapVolume.getThinlyProvisioned();    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,snapVolume.getTenant().getURI());    String tenantName=tenant.getLabel();    final String snapLabelToUse=_nameGenerator.generate(tenantName,first.getLabel(),snapshotList.get(0).toString(),'-',storage.getUsingSmis80() ? SmisConstants.MAX_SMI80_SNAPSHOT_NAME_LENGTH : SmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    ReplicationUtils.checkReplicationGroupAccessibleOrFail(storage,first,_dbClient,_helper,_cimPath);    final Map<String,List<Volume>> volumesBySizeMap=new HashMap<String,List<Volume>>();    for (    URI uri : snapshotList) {      final BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,uri);      final Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      final String key=volume.getPool() + "-" + volume.getCapacity();      final List<Volume> currentVolumes=volumesBySizeMap.containsKey(key) ? volumesBySizeMap.get(key) : new ArrayList<Volume>();      currentVolumes.add(volume);      volumesBySizeMap.put(key,currentVolumes);    }    if (storage.checkIfVmax3() || !storage.getUsingSmis80()) {      targetDeviceIds=new ArrayList<String>();      for (      Entry<String,List<Volume>> entry : volumesBySizeMap.entrySet()) {        final List<Volume> volumes=entry.getValue();        final Volume volume=volumes.get(0);        final URI poolId=volume.getPool();        CIMObjectPath volumeGroupPath=_helper.getVolumeGroupPath(storage,storage,volume,null);        final List<String> newDeviceIds=kickOffTargetDevicesCreation(storage,volumeGroupPath,sourceGroupName,snapLabelToUse,createInactive,thinProvisioning,volumes.size(),poolId,volume.getCapacity(),taskCompleter);        targetDeviceIds.addAll(newDeviceIds);      }      targetGroupPath=ReplicationUtils.createTargetDeviceGroup(storage,sourceGroupName,targetDeviceIds,taskCompleter,_dbClient,_helper,_cimPath,SYNC_TYPE.SNAPSHOT);    }    CIMObjectPath job=VmaxGroupOperationsUtils.internalCreateGroupReplica(storage,sourceGroupName,snapLabelToUse,targetGroupPath,createInactive,thinProvisioning,taskCompleter,SYNC_TYPE.SNAPSHOT,_dbClient,_helper,_cimPath);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockCreateCGSnapshotJob(job,storage.getId(),!createInactive,sourceGroupName,taskCompleter)));    }  } catch (  Exception e) {    final String errMsg=format("An exception occurred when trying to create snapshots for consistency group {0} on storage system {1}",sourceGroupName,storage.getId());    _log.error(errMsg,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);    rollbackCreateSnapshot(storage,targetGroupPath,targetDeviceIds,taskCompleter);    throw new SmisException(errMsg,e);  }}  }
class C{  protected double calculateCoefficient(int position){  double coefficient;switch (blenderType) {case POSITION_LINEAR:    coefficient=1 - LINEAR_COEF * position;  break;case POSITION_RECIPROCAL:coefficient=1. / (position + 1);break;case POSITION_EXPONENTIAL_RECIPROCAL:coefficient=1. / Math.pow((position + 1.0),exponent);break;default :coefficient=1;}return coefficient;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF:    setIdentifierRef((IdentifierRef)null);  return;}super.eUnset(featureID);}  }
class C{  static boolean zoomToAddress(final ZyGraph graph,final IAddress address,final NaviNode node,final INaviFunctionNode functionNode){  if (functionNode.getFunction().getAddress().equals(address)) {    uncollapseParents(functionNode);    if (!node.isVisible()) {      graph.showNode(node,true);    }    ZoomFunctions.zoomToNode(graph,node);    return true;  }  return false;}  }
class C{  public static void main(String[] args){  Random r=new Random();  UnivariateKernelEstimator e=new UnivariateKernelEstimator();  System.out.println(e);  double sum=0;  for (int i=0; i < 1000; i++) {    sum+=Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));  }  System.out.println("Approximate integral: " + 10.0 * sum / 1000);  for (int i=0; i < 1000; i++) {    e.addValue(0.1 * r.nextGaussian() - 3,1);    e.addValue(r.nextGaussian() * 0.25,3);  }  sum=0;  int points=10000;  for (int i=0; i < points; i++) {    double value=r.nextDouble() * 10.0 - 5.0;    sum+=Math.exp(e.logDensity(value));  }  System.out.println("Approximate integral: " + 10.0 * sum / points);  double[][] Intervals=e.predictIntervals(0.9);  System.out.println("Printing kernel intervals ---------------------");  for (  double[] interval : Intervals) {    System.out.println("Left: " + interval[0] + "\t Right: "+ interval[1]);  }  System.out.println("Finished kernel printing intervals ---------------------");  double Covered=0;  for (int i=0; i < 1000; i++) {    double val=-1;    if (r.nextDouble() < 0.25) {      val=0.1 * r.nextGaussian() - 3.0;    } else {      val=r.nextGaussian() * 0.25;    }    for (    double[] interval : Intervals) {      if (val >= interval[0] && val <= interval[1]) {        Covered++;        break;      }    }  }  System.out.println("Coverage at 0.9 level for kernel intervals: " + Covered / 1000);  UnivariateKernelEstimator eKernel=new UnivariateKernelEstimator();  UnivariateNormalEstimator eNormal=new UnivariateNormalEstimator();  for (int j=1; j < 5; j++) {    double numTrain=Math.pow(10,j);    System.out.println("Number of training cases: " + numTrain);    for (int i=0; i < numTrain; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      eKernel.addValue(val,1);      eNormal.addValue(val,1);    }    sum=0;    points=10000;    for (int i=0; i < points; i++) {      double value=r.nextDouble() * 20.0 - 10.0;      sum+=Math.exp(eKernel.logDensity(value));    }    System.out.println("Approximate integral for kernel estimator: " + 20.0 * sum / points);    double loglikelihoodKernel=0, loglikelihoodNormal=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      loglikelihoodKernel+=eKernel.logDensity(val);      loglikelihoodNormal+=eNormal.logDensity(val);    }    System.out.println("Loglikelihood for kernel estimator: " + loglikelihoodKernel / 1000);    System.out.println("Loglikelihood for normal estimator: " + loglikelihoodNormal / 1000);    double[][] kernelIntervals=eKernel.predictIntervals(0.95);    double[][] normalIntervals=eNormal.predictIntervals(0.95);    System.out.println("Printing kernel intervals ---------------------");    for (    double[] kernelInterval : kernelIntervals) {      System.out.println("Left: " + kernelInterval[0] + "\t Right: "+ kernelInterval[1]);    }    System.out.println("Finished kernel printing intervals ---------------------");    System.out.println("Printing normal intervals ---------------------");    for (    double[] normalInterval : normalIntervals) {      System.out.println("Left: " + normalInterval[0] + "\t Right: "+ normalInterval[1]);    }    System.out.println("Finished normal printing intervals ---------------------");    double kernelCovered=0;    double normalCovered=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      for (      double[] kernelInterval : kernelIntervals) {        if (val >= kernelInterval[0] && val <= kernelInterval[1]) {          kernelCovered++;          break;        }      }      for (      double[] normalInterval : normalIntervals) {        if (val >= normalInterval[0] && val <= normalInterval[1]) {          normalCovered++;          break;        }      }    }    System.out.println("Coverage at 0.95 level for kernel intervals: " + kernelCovered / 1000);    System.out.println("Coverage at 0.95 level for normal intervals: " + normalCovered / 1000);    kernelIntervals=eKernel.predictIntervals(0.8);    normalIntervals=eNormal.predictIntervals(0.8);    kernelCovered=0;    normalCovered=0;    for (int i=0; i < 1000; i++) {      double val=r.nextGaussian() * 1.5 + 0.5;      for (      double[] kernelInterval : kernelIntervals) {        if (val >= kernelInterval[0] && val <= kernelInterval[1]) {          kernelCovered++;          break;        }      }      for (      double[] normalInterval : normalIntervals) {        if (val >= normalInterval[0] && val <= normalInterval[1]) {          normalCovered++;          break;        }      }    }    System.out.println("Coverage at 0.8 level for kernel intervals: " + kernelCovered / 1000);    System.out.println("Coverage at 0.8 level for normal intervals: " + normalCovered / 1000);  }}  }
class C{  public void buildTreeStructureToSave(FacesContext context,UIComponent component,TreeStructure treeStructure,Set componentIds){  if (null == componentIds) {    componentIds=new HashSet();  }  Iterator kids=component.getChildren().iterator();  String id;  while (kids.hasNext()) {    UIComponent kid=(UIComponent)kids.next();    id=kid.getClientId(context);    if (id != null && !componentIds.add(id)) {      throw new IllegalStateException(MessageUtils.getExceptionMessageString(MessageUtils.DUPLICATE_COMPONENT_ID_ERROR_ID,new Object[]{id}));    }    if (!kid.isTransient()) {      TreeStructure treeStructureChild=new TreeStructure(kid);      treeStructure.addChild(treeStructureChild);      buildTreeStructureToSave(context,kid,treeStructureChild,componentIds);    }  }  Iterator facets=component.getFacets().keySet().iterator();  while (facets.hasNext()) {    String facetName=(String)facets.next();    UIComponent facetComponent=(UIComponent)component.getFacets().get(facetName);    id=facetComponent.getClientId(context);    if (id != null && !componentIds.add(id)) {      throw new IllegalStateException(MessageUtils.getExceptionMessageString(MessageUtils.DUPLICATE_COMPONENT_ID_ERROR_ID,new Object[]{id}));    }    if (!(facetComponent.isTransient())) {      TreeStructure treeStructureFacet=new TreeStructure(facetComponent);      treeStructure.addFacet(facetName,treeStructureFacet);      buildTreeStructureToSave(context,facetComponent,treeStructureFacet,componentIds);    }  }}  }
class C{  public boolean preLaunchCheck(ILaunchConfiguration config,String mode,IProgressMonitor monitor) throws CoreException {  if (!config.exists()) {    return false;  }  final Model model=config.getAdapter(Model.class);synchronized (config) {    if (model.isLocked()) {      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"The running attribute for " + modelName + " has been set to true or that model is locked. "+ "Another TLC is possible running on the same model, has been terminated non-gracefully "+ "or you tried to run TLC on a locked model. Running TLC on a locked model is not possible."));    }  }  try {    monitor.beginTask("Reading model parameters",1);    specName=config.getAttribute(SPEC_NAME,EMPTY_STRING);    modelName=config.getAttribute(MODEL_NAME,EMPTY_STRING);    specRootFilename=ToolboxHandle.getRootModule(config.getFile().getProject()).getLocation().toOSString();  }  finally {    monitor.done();  }  return true;}  }
class C{  private static XeSource source(final Domain domain) throws IOException {  final String name=domain.name();  return new XeDirectives(new Directives().add("domain").add("name").set(name).up().append(new XeLink("delete",new Href("/delete").with("name",name)).toXembly()).up());}  }
class C{  public void testOldVersions() throws Exception {  Directory currentDir=newDirectory();  RandomIndexWriter riw=new RandomIndexWriter(random(),currentDir);  riw.addDocument(new Document());  riw.close();  DirectoryReader ir=DirectoryReader.open(currentDir);  SegmentReader air=(SegmentReader)ir.leaves().get(0).reader();  Version currentVersion=air.getSegmentInfo().info.getVersion();  assertNotNull(currentVersion);  ir.close();  currentDir.close();  for (  String name : oldNames) {    Directory dir=oldIndexDirs.get(name);    DirectoryReader r=DirectoryReader.open(dir);    for (    LeafReaderContext context : r.leaves()) {      air=(SegmentReader)context.reader();      Version oldVersion=air.getSegmentInfo().info.getVersion();      assertNotNull(oldVersion);      assertTrue("current Version.LATEST is <= an old index: did you forget to bump it?!",currentVersion.onOrAfter(oldVersion));    }    r.close();  }}  }
class C{  public static int serialize(byte[] data,int off,ClusterMetrics metrics){  ByteBuffer buf=ByteBuffer.wrap(data,off,METRICS_SIZE);  buf.putInt(metrics.getMaximumActiveJobs());  buf.putInt(metrics.getCurrentActiveJobs());  buf.putFloat(metrics.getAverageActiveJobs());  buf.putInt(metrics.getMaximumWaitingJobs());  buf.putInt(metrics.getCurrentWaitingJobs());  buf.putFloat(metrics.getAverageWaitingJobs());  buf.putInt(metrics.getMaximumRejectedJobs());  buf.putInt(metrics.getCurrentRejectedJobs());  buf.putFloat(metrics.getAverageRejectedJobs());  buf.putInt(metrics.getMaximumCancelledJobs());  buf.putInt(metrics.getCurrentCancelledJobs());  buf.putFloat(metrics.getAverageCancelledJobs());  buf.putInt(metrics.getTotalRejectedJobs());  buf.putInt(metrics.getTotalCancelledJobs());  buf.putInt(metrics.getTotalExecutedJobs());  buf.putLong(metrics.getMaximumJobWaitTime());  buf.putLong(metrics.getCurrentJobWaitTime());  buf.putDouble(metrics.getAverageJobWaitTime());  buf.putLong(metrics.getMaximumJobExecuteTime());  buf.putLong(metrics.getCurrentJobExecuteTime());  buf.putDouble(metrics.getAverageJobExecuteTime());  buf.putInt(metrics.getTotalExecutedTasks());  buf.putLong(metrics.getCurrentIdleTime());  buf.putLong(metrics.getTotalIdleTime());  buf.putInt(metrics.getTotalCpus());  buf.putDouble(metrics.getCurrentCpuLoad());  buf.putDouble(metrics.getAverageCpuLoad());  buf.putDouble(metrics.getCurrentGcCpuLoad());  buf.putLong(metrics.getHeapMemoryInitialized());  buf.putLong(metrics.getHeapMemoryUsed());  buf.putLong(metrics.getHeapMemoryCommitted());  buf.putLong(metrics.getHeapMemoryMaximum());  buf.putLong(metrics.getHeapMemoryTotal());  buf.putLong(metrics.getNonHeapMemoryInitialized());  buf.putLong(metrics.getNonHeapMemoryUsed());  buf.putLong(metrics.getNonHeapMemoryCommitted());  buf.putLong(metrics.getNonHeapMemoryMaximum());  buf.putLong(metrics.getNonHeapMemoryTotal());  buf.putLong(metrics.getStartTime());  buf.putLong(metrics.getNodeStartTime());  buf.putLong(metrics.getUpTime());  buf.putInt(metrics.getCurrentThreadCount());  buf.putInt(metrics.getMaximumThreadCount());  buf.putLong(metrics.getTotalStartedThreadCount());  buf.putInt(metrics.getCurrentDaemonThreadCount());  buf.putLong(metrics.getLastDataVersion());  buf.putInt(metrics.getSentMessagesCount());  buf.putLong(metrics.getSentBytesCount());  buf.putInt(metrics.getReceivedMessagesCount());  buf.putLong(metrics.getReceivedBytesCount());  buf.putInt(metrics.getOutboundMessagesQueueSize());  buf.putInt(metrics.getTotalNodes());  assert !buf.hasRemaining() : "Invalid metrics size [expected=" + METRICS_SIZE + ", actual="+ (buf.position() - off)+ ']';  return buf.position();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null) {    PseudoMenu currUI=uiMgr.getCurrUI();    return (currUI != null && currUI.hasPopup()) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 68:{        return JavaTokenType.LONG_KEYWORD;      }case 111:    break;case 99:{    return JavaTokenType.PRIVATE_KEYWORD;  }case 112:break;case 27:{return JavaTokenType.COMMA;}case 113:break;case 23:{return JavaTokenType.RBRACE;}case 114:break;case 22:{return JavaTokenType.LBRACE;}case 115:break;case 65:{return JavaTokenType.THIS_KEYWORD;}case 116:break;case 83:{return JavaTokenType.CLASS_KEYWORD;}case 117:break;case 14:{return JavaTokenType.PLUS;}case 118:break;case 54:{return JavaTokenType.XOREQ;}case 119:break;case 62:{return JavaTokenType.INT_KEYWORD;}case 120:break;case 80:{return JavaTokenType.SHORT_KEYWORD;}case 121:break;case 44:{return JavaTokenType.EQEQ;}case 122:break;case 67:{return myEnumKeyword ? JavaTokenType.ENUM_KEYWORD : JavaTokenType.IDENTIFIER;}case 123:break;case 101:{return JavaTokenType.ABSTRACT_KEYWORD;}case 124:break;case 69:{return JavaTokenType.NULL_KEYWORD;}case 125:break;case 95:{return JavaTokenType.EXTENDS_KEYWORD;}case 126:break;case 51:{return JavaTokenType.LTLT;}case 127:break;case 20:{return JavaTokenType.LPARENTH;}case 128:break;case 12:{return JavaTokenType.EXCL;}case 129:break;case 102:{return JavaTokenType.STRICTFP_KEYWORD;}case 130:break;case 34:{return JavaTokenType.DIVEQ;}case 131:break;case 89:{return JavaTokenType.STATIC_KEYWORD;}case 132:break;case 39:{return JavaTokenType.MINUSMINUS;}case 133:break;case 76:{return JavaTokenType.FALSE_KEYWORD;}case 134:break;case 1:{return JavaTokenType.BAD_CHARACTER;}case 135:break;case 90:{return JavaTokenType.SWITCH_KEYWORD;}case 136:break;case 26:{return JavaTokenType.SEMICOLON;}case 137:break;case 18:{return JavaTokenType.XOR;}case 138:break;case 38:{return JavaTokenType.DOUBLE_LITERAL;}case 139:break;case 46:{return JavaTokenType.OREQ;}case 140:break;case 11:{return JavaTokenType.EQ;}case 141:break;case 4:{return JavaTokenType.DIV;}case 142:break;case 66:{return JavaTokenType.ELSE_KEYWORD;}case 143:break;case 61:{return JavaTokenType.NEW_KEYWORD;}case 144:break;case 58:{return JavaTokenType.ELLIPSIS;}case 145:break;case 53:{return JavaTokenType.ANDAND;}case 146:break;case 81:{return JavaTokenType.BREAK_KEYWORD;}case 147:break;case 9:{return JavaTokenType.CHARACTER_LITERAL;}case 148:break;case 52:{return JavaTokenType.ANDEQ;}case 149:break;case 6:{return JavaTokenType.INTEGER_LITERAL;}case 150:break;case 77:{return JavaTokenType.FLOAT_KEYWORD;}case 151:break;case 10:{return JavaTokenType.STRING_LITERAL;}case 152:break;case 72:{return JavaTokenType.CHAR_KEYWORD;}case 153:break;case 91:{return JavaTokenType.NATIVE_KEYWORD;}case 154:break;case 43:{return JavaTokenType.DO_KEYWORD;}case 155:break;case 7:{return JavaTokenType.DOT;}case 156:break;case 28:{return JavaTokenType.TILDE;}case 157:break;case 110:{return JavaTokenType.SYNCHRONIZED_KEYWORD;}case 158:break;case 32:{return JavaTokenType.END_OF_LINE_COMMENT;}case 159:break;case 35:{return JavaTokenType.ASTERISKEQ;}case 160:break;case 79:{return JavaTokenType.SUPER_KEYWORD;}case 161:break;case 40:{return JavaTokenType.MINUSEQ;}case 162:break;case 63:{return JavaTokenType.LTLTEQ;}case 163:break;case 73:{return JavaTokenType.GOTO_KEYWORD;}case 164:break;case 25:{return JavaTokenType.RBRACKET;}case 165:break;case 33:{return JavaTokenType.C_STYLE_COMMENT;}case 166:break;case 15:{return JavaTokenType.LT;}case 167:break;case 42:{return JavaTokenType.IF_KEYWORD;}case 168:break;case 8:{return JavaTokenType.MINUS;}case 169:break;case 85:{return JavaTokenType.WHILE_KEYWORD;}case 170:break;case 70:{return JavaTokenType.BYTE_KEYWORD;}case 171:break;case 96:{return JavaTokenType.FINALLY_KEYWORD;}case 172:break;case 74:{return JavaTokenType.VOID_KEYWORD;}case 173:break;case 29:{return JavaTokenType.QUEST;}case 174:break;case 19:{return JavaTokenType.PERC;}case 175:break;case 109:{return JavaTokenType.IMPLEMENTS_KEYWORD;}case 176:break;case 86:{return JavaTokenType.THROWS_KEYWORD;}case 177:break;case 41:{return JavaTokenType.ARROW;}case 178:break;case 78:{return JavaTokenType.FINAL_KEYWORD;}case 179:break;case 93:{return JavaTokenType.DOUBLE_KEYWORD;}case 180:break;case 88:{return myAssertKeyword ? JavaTokenType.ASSERT_KEYWORD : JavaTokenType.IDENTIFIER;}case 181:break;case 107:{return JavaTokenType.PROTECTED_KEYWORD;}case 182:break;case 103:{return JavaTokenType.CONTINUE_KEYWORD;}case 183:break;case 100:{return JavaTokenType.PACKAGE_KEYWORD;}case 184:break;case 16:{return JavaTokenType.GT;}case 185:break;case 24:{return JavaTokenType.LBRACKET;}case 186:break;case 36:{return JavaTokenType.LONG_LITERAL;}case 187:break;case 60:{return JavaTokenType.FOR_KEYWORD;}case 188:break;case 98:{return JavaTokenType.DEFAULT_KEYWORD;}case 189:break;case 48:{return JavaTokenType.PLUSEQ;}case 190:break;case 87:{return JavaTokenType.RETURN_KEYWORD;}case 191:break;case 64:{return JavaTokenType.TRUE_KEYWORD;}case 192:break;case 49:{return JavaTokenType.PLUSPLUS;}case 193:break;case 47:{return JavaTokenType.OROR;}case 194:break;case 13:{return JavaTokenType.OR;}case 195:break;case 3:{return JavaTokenType.IDENTIFIER;}case 196:break;case 55:{return JavaTokenType.PERCEQ;}case 197:break;case 30:{return JavaTokenType.COLON;}case 198:break;case 104:{return JavaTokenType.VOLATILE_KEYWORD;}case 199:break;case 106:{return JavaTokenType.INTERFACE_KEYWORD;}case 200:break;case 108:{return JavaTokenType.INSTANCEOF_KEYWORD;}case 201:break;case 105:{return JavaTokenType.TRANSIENT_KEYWORD;}case 202:break;case 97:{return JavaTokenType.BOOLEAN_KEYWORD;}case 203:break;case 71:{return JavaTokenType.CASE_KEYWORD;}case 204:break;case 5:{return JavaTokenType.ASTERISK;}case 205:break;case 92:{return JavaTokenType.IMPORT_KEYWORD;}case 206:break;case 31:{return JavaTokenType.AT;}case 207:break;case 45:{return JavaTokenType.NE;}case 208:break;case 59:{return JavaTokenType.TRY_KEYWORD;}case 209:break;case 82:{return JavaTokenType.CATCH_KEYWORD;}case 210:break;case 37:{return JavaTokenType.FLOAT_LITERAL;}case 211:break;case 17:{return JavaTokenType.AND;}case 212:break;case 75:{return JavaTokenType.THROW_KEYWORD;}case 213:break;case 57:{return JavaDocElementType.DOC_COMMENT;}case 214:break;case 56:{return JavaTokenType.DOUBLE_COLON;}case 215:break;case 21:{return JavaTokenType.RPARENTH;}case 216:break;case 2:{return JavaTokenType.WHITE_SPACE;}case 217:break;case 94:{return JavaTokenType.PUBLIC_KEYWORD;}case 218:break;case 50:{return JavaTokenType.LE;}case 219:break;case 84:{return JavaTokenType.CONST_KEYWORD;}case 220:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public static void println(char x){  out.println(x);}  }
class C{  public static boolean needsPackageAccessCheck(ClassLoader from,ClassLoader to){  if (from == null || from == to)   return false;  if (to == null)   return true;  return !isAncestor(from,to);}  }
class C{  public static boolean isRegularFile(BasicFileAttributes attr){  return (attr.isRegularFile() || attr.isOther()) && !attr.isDirectory();}  }
class C{  public boolean isPreviousAvailable(){  return selectedPage > 1;}  }
class C{  public void addListener(final IZyGraphLayoutSettingsListener listener){  m_listeners.addListener(listener);}  }
class C{  public static void main(String[] args){}  }
class C{  private void copyAttribute(VOMarketplace voMarketPlace,MarketplaceConfiguration conf){  conf.setReviewEnabled(voMarketPlace.isReviewEnabled());  conf.setSocialBookmarkEnabled(voMarketPlace.isSocialBookmarkEnabled());  conf.setTaggingEnabled(voMarketPlace.isTaggingEnabled());  conf.setCategoriesEnabled(voMarketPlace.isCategoriesEnabled());  conf.setRestricted(voMarketPlace.isRestricted());  conf.setLandingPage(voMarketPlace.isHasPublicLandingPage());  conf.setTenantId(voMarketPlace.getTenantId());}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new ClassCastException("Attempt to insert element of type " + obj.getClass() + " into collection of type "+ type);  }  return obj;}  }
class C{  private synchronized void addToConsistList(DccLocoAddress LocoAddress,boolean directionNormal){  Boolean Direction=Boolean.valueOf(directionNormal);  if (!(ConsistList.contains(LocoAddress))) {    ConsistList.add(LocoAddress);  }  ConsistDir.put(LocoAddress,Direction);  if (ConsistType == CS_CONSIST && ConsistList.size() == 2) {    notifyConsistListeners(LocoAddress,ConsistListener.OPERATION_SUCCESS | ConsistListener.CONSIST_FULL);  } else {    notifyConsistListeners(LocoAddress,ConsistListener.OPERATION_SUCCESS);  }}  }
class C{  private int normalize(){  Name[] oldNames=null;  int maxOutArity=0;  int changesStart=0;  for (int i=0; i < names.length; i++) {    Name n=names[i];    if (!n.initIndex(i)) {      if (oldNames == null) {        oldNames=names.clone();        changesStart=i;      }      names[i]=n.cloneWithIndex(i);    }    if (n.arguments != null && maxOutArity < n.arguments.length)     maxOutArity=n.arguments.length;  }  if (oldNames != null) {    int startFixing=arity;    if (startFixing <= changesStart)     startFixing=changesStart + 1;    for (int i=startFixing; i < names.length; i++) {      Name fixed=names[i].replaceNames(oldNames,names,changesStart,i);      names[i]=fixed.newIndex(i);    }  }  assert (nameRefsAreLegal());  int maxInterned=Math.min(arity,INTERNED_ARGUMENT_LIMIT);  boolean needIntern=false;  for (int i=0; i < maxInterned; i++) {    Name n=names[i], n2=internArgument(n);    if (n != n2) {      names[i]=n2;      needIntern=true;    }  }  if (needIntern) {    for (int i=arity; i < names.length; i++) {      names[i].internArguments();    }  }  assert (nameRefsAreLegal());  return maxOutArity;}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  RenderableLayer layer=new RenderableLayer();  wwd.getLayers().addLayer(layer);  ShapeAttributes thickenLine=new ShapeAttributes();  thickenLine.setOutlineWidth(4f);  List<Position> positions=Arrays.asList(Position.fromDegrees(60.0,-100.0,1e5),Position.fromDegrees(30.0,-120.0,1e5),Position.fromDegrees(0.0,-100.0,1e5));  Path path=new Path(positions);  ShapeAttributes sa=new ShapeAttributes(thickenLine);  sa.setOutlineImageSource(ImageSource.fromLineStipple(2,(short)0xF0F0));  path.setAttributes(sa);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(60.0,-90.0,5e4),Position.fromDegrees(30.0,-110.0,5e4),Position.fromDegrees(0.0,-90.0,5e4));  path=new Path(positions);  sa=new ShapeAttributes(thickenLine);  sa.setOutlineImageSource(ImageSource.fromLineStipple(4,(short)0xF0F0));  path.setAttributes(sa);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(60.0,-80.0,0.0),Position.fromDegrees(30.0,-100.0,0.0),Position.fromDegrees(0.0,-80.0,0.0));  path=new Path(positions);  sa=new ShapeAttributes(thickenLine);  sa.setOutlineImageSource(ImageSource.fromLineStipple(8,(short)0xDFF6));  path.setAttributes(sa);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setFollowTerrain(true);  layer.addRenderable(path);  positions=Arrays.asList(Position.fromDegrees(50.0,-70.0,1e5),Position.fromDegrees(35.0,-85.0,1e5),Position.fromDegrees(35.0,-55.0,1e5));  Polygon polygon=new Polygon(positions);  sa=new ShapeAttributes(thickenLine);  sa.setInteriorImageSource(ImageSource.fromResource(R.drawable.pattern_sample_houndstooth));  sa.setInteriorColor(new gov.nasa.worldwind.render.Color(1f,1f,1f,1f));  polygon.setAttributes(sa);  layer.addRenderable(polygon);  positions=Arrays.asList(Position.fromDegrees(25.0,-85.0,0.0),Position.fromDegrees(10.0,-80.0,0.0),Position.fromDegrees(10.0,-60.0,0.0),Position.fromDegrees(25.0,-55.0,0.0));  polygon=new Polygon(positions);  sa=new ShapeAttributes(thickenLine);  sa.setInteriorImageSource(ImageSource.fromResource(R.drawable.pattern_sample_houndstooth));  sa.setOutlineImageSource(ImageSource.fromLineStipple(8,(short)0xDFF6));  polygon.setAttributes(sa);  polygon.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  polygon.setFollowTerrain(true);  layer.addRenderable(polygon);  return wwd;}  }
class C{  public void environmentStart(EnvironmentClassLoader loader){}  }
class C{  private void destroyListener(){  if (onProductUpdateListener == null) {    return;  }  DataChangeListener.removeOnProductUpdateListener(onProductUpdateListener);  onProductUpdateListener=null;}  }
class C{  public Anonymous_codeLangs_1_ createAnonymous_codeLangs_1_(){  Anonymous_codeLangs_1_Impl anonymous_codeLangs_1_=new Anonymous_codeLangs_1_Impl();  return anonymous_codeLangs_1_;}  }
class C{  public Candidate[] extend(){  return new Candidate[]{extendHypothesis(),extendPhrase()};}  }
class C{  private DatagramPacket makeResponsePacket(DatagramPacket reqPacket){  DatagramPacket respPacket=null;  SnmpMessage reqMsg=new SnmpMessage();  try {    reqMsg.decodeMessage(reqPacket.getData(),reqPacket.getLength());    reqMsg.address=reqPacket.getAddress();    reqMsg.port=reqPacket.getPort();  } catch (  SnmpStatusException x) {    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponsePacket","packet decoding failed",x);    }    reqMsg=null;    ((SnmpAdaptorServer)adaptorServer).incSnmpInASNParseErrs(1);  }  SnmpMessage respMsg=null;  if (reqMsg != null) {    respMsg=makeResponseMessage(reqMsg);  }  if (respMsg != null) {    try {      reqPacket.setLength(respMsg.encodeMessage(reqPacket.getData()));      respPacket=reqPacket;    } catch (    SnmpTooBigException x) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponsePacket","response message is too big");      }      try {        respMsg=newTooBigMessage(reqMsg);        reqPacket.setLength(respMsg.encodeMessage(reqPacket.getData()));        respPacket=reqPacket;      } catch (      SnmpTooBigException xx) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"makeResponsePacket","'too big' is 'too big' !!!");        }        adaptor.incSnmpSilentDrops(1);      }    }  }  return respPacket;}  }
class C{  public void removeCoupling(final Coupling<?> coupling){  WorkspaceComponent source=coupling.getProducer().getParentComponent();  WorkspaceComponent target=coupling.getConsumer().getParentComponent();  SourceTarget sourceTarget=new SourceTarget(source,target);  couplingList.remove(coupling);  removeCouplingFromList(sourceTargetCouplings.get(sourceTarget),coupling);  removeCouplingFromList(sourceComponentCouplings.get(source),coupling);  removeCouplingFromList(targetComponentCouplings.get(target),coupling);  source.couplingRemoved(coupling);  if (target != source) {    target.couplingRemoved(coupling);  }  fireCouplingRemoved(coupling);}  }
class C{  public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  chooseFirstProvider();  return spi.engineGenerateSecret(algorithm);}  }
class C{  public ConfigBuilder withRetryLogic(RetryLogic retryLogic){  this.retryLogic=retryLogic;  return this;}  }
class C{  private void startProcess(){  m_pi.setPrintPreview(true);  if (m_ASyncProcess != null) {    m_ASyncProcess.lockUI(m_pi);    Clients.showBusy(null,false);  }  showBusyDialog();  Clients.response(new AuEcho(this,"runProcess",null));}  }
class C{  public DefragSimpleSpillThreshold(){  super(Options.set,"Defrag Simple Spill Threshold","Blocks with this fraction spilled will be defrag sources",DEFAULT_SIMPLE_SPILL_THRESHOLD);}  }
class C{  public void write(byte b) throws IOException {  write(new byte[]{b});}  }
class C{  public org.jdom2.Element store(){  org.jdom2.Element e=new org.jdom2.Element(Xml.ENGINE);  super.store(e);  e.setAttribute(Xml.MODEL,getModel());  e.setAttribute(Xml.HP,getHp());  e.setAttribute(Xml.B_UNIT,(isBunit() ? Xml.TRUE : Xml.FALSE));  if (getConsist() != null) {    e.setAttribute(Xml.CONSIST,getConsistName());    if (getConsist().isLead(this)) {      e.setAttribute(Xml.LEAD_CONSIST,Xml.TRUE);      if (getConsist().getConsistNumber() > 0) {        e.setAttribute(Xml.CONSIST_NUM,Integer.toString(getConsist().getConsistNumber()));      }    }  }  return e;}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void saveGraph(String destination) throws WikiApiException {  try {    GraphSerialization.saveGraph(graph,destination);  } catch (  IOException e) {    throw new WikiApiException(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    setToEndpoint((Endpoint)null);  return;case EipPackage.CHANNEL__FROM_ENDPOINT:setFromEndpoint((Endpoint)null);return;case EipPackage.CHANNEL__NAME:setName(NAME_EDEFAULT);return;case EipPackage.CHANNEL__GUARANTEED:setGuaranteed(GUARANTEED_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void checkOperationSupportedOnIngestedVolume(Volume volume,ResourceOperationTypeEnum operation,DbClient dbClient){  if (volume.isIngestedVolumeWithoutBackend(dbClient)) {switch (operation) {case CREATE_VOLUME_FULL_COPY:case CREATE_VOLUME_SNAPSHOT:case EXPAND_BLOCK_VOLUME:case CREATE_VOLUME_MIRROR:case CHANGE_BLOCK_VOLUME_VARRAY:case UPDATE_CONSISTENCY_GROUP:case CREATE_SNAPSHOT_SESSION:      _logger.error("Operation {} is not permitted on ingested VPLEX volumes without backend volumes.",operation.getName());    throw APIException.badRequests.operationNotPermittedOnIngestedVolume(operation.getName(),volume.getLabel());default :  return;}}}  }
class C{  public static ClassLoader callerClassLoader(){  if (org.jikesrvm.VM.runningVM) {    ClassLoader ans=RVMClass.getClassLoaderFromStackFrame(2);    if (ans == BootstrapClassLoader.getBootstrapClassLoader()) {      return null;    } else {      return ans;    }  } else {    return null;  }}  }
class C{  private boolean initAndForwardToHandlingScreenIfNecessary(){  if (exitingFromApp) {    activity.finish();    if (activity.isTaskRoot()) {      if (exitingFromAppIntent != null)       activity.startActivity(exitingFromAppIntent);      exitingFromApp=false;      isBackAction=false;    }    return true;  }  GTG.initRwtm.registerWritingThread();  try {    int requirementsDiff=neededRequirements & (~GTG.fulfilledRequirements);    GTG.requireInitialSetup(activity,true);    if (Requirement.PREFS_LOADED.isOn(requirementsDiff))     GTG.requirePrefsLoaded(activity);    if (Requirement.NOT_IN_RESTORE.isOn(requirementsDiff)) {      if (!GTG.requireNotInRestore()) {        if (!isBackAction)         startInternalActivity(new Intent(activity,RestoreGpxBackup.class),false); else         activity.finish();        return true;      }    }    if (Requirement.NOT_TRIAL_WHEN_PREMIUM_IS_AVAILABLE.isOn(requirementsDiff)) {      Intent i=GTG.requireNotTrialWhenPremiumIsAvailable(activity);      if (i != null) {        exitFromApp(i);        return true;      }    }    if (Requirement.NOT_TRIAL_EXPIRED.isOn(requirementsDiff)) {      if (!GTG.requireNotTrialExpired()) {        if (!isBackAction)         startInternalActivity(new Intent(activity,TrialExpiredActivity.class),false); else         activity.finish();        return true;      }    }    if (Requirement.SDCARD_PRESENT.isOn(requirementsDiff)) {      if (!GTG.requireSdcardPresent(activity)) {        if (!isBackAction)         startInternalActivity(new Intent(activity,FatalErrorActivity.class).putExtra(FatalErrorActivity.MESSAGE_RESOURCE_ID,R.string.error_reviewer_sdcard_not_mounted),false); else         activity.finish();        return true;      }    }    if (Requirement.SYSTEM_INSTALLED.isOn(requirementsDiff)) {      if (!GTG.requireSystemInstalled(activity)) {        if (!isBackAction)         startInternalActivity(new Intent(activity,WelcomePage.class),false); else         activity.finish();        return true;      }    }    if (Requirement.DB_READY.isOn(requirementsDiff)) {      int status=GTG.requireDbReady();      if (status == GTG.REQUIRE_DB_READY_DB_DOESNT_EXIST) {        if (!isBackAction)         startInternalActivity(new Intent(activity,DbDoesntExistActivity.class),false); else         activity.finish();        return true;      }    }    if (Requirement.DECRYPT.isOn(requirementsDiff)) {      if (GTG.requireEncryptAndDecrypt(EnterNewPasswordPage.passwordInitializedWith) != GTG.REQUIRE_DECRYPT_OK) {        if (!isBackAction)         startInternalActivity(new Intent(activity,EnterPasswordActivity.class).putExtra(EnterPasswordActivity.EXTRA_DECRYPT_OR_VERIFY_PASSWORD_BOOL,true),false); else         activity.finish();        return true;      }    }    if (Requirement.ENCRYPT.isOn(requirementsDiff)) {      GTG.requireEncrypt();    }    if (Requirement.PASSWORD_ENTERED.isOn(requirementsDiff)) {      if (!GTG.requirePasswordEntered(EnterNewPasswordPage.passwordInitializedWith,GTG.lastGtgClosedMS)) {        if (!isBackAction)         startInternalActivity(new Intent(activity,EnterPasswordActivity.class).putExtra(EnterPasswordActivity.EXTRA_DECRYPT_OR_VERIFY_PASSWORD_BOOL,false),false); else         activity.finish();        return true;      }    }    if (Requirement.TIMMY_DB_READY.isOn(requirementsDiff)) {      int status=GTG.requireTimmyDbReady(false);      if (status == GTG.REQUIRE_TIMMY_DB_IS_CORRUPT) {        if (!isBackAction)         startInternalActivity(new Intent(activity,TimmyCorruptActivity.class),false); else         activity.finish();        return true;      }      if (status == GTG.REQUIRE_TIMMY_DB_NEEDS_UPGRADING) {        if (!isBackAction)         startInternalActivity(new Intent(activity,TimmyNeedsUpgradeActivity.class),false); else         activity.finish();        return true;      }      if (status == GTG.REQUIRE_TIMMY_DB_NEEDS_PROCESSING_TIME) {        if (!isBackAction)         startInternalActivity(new Intent(activity,TimmyNeedsProcessingActivity.class),false); else         activity.finish();        return true;      }    }    return false;  }  finally {    GTG.initRwtm.unregisterWritingThread();  }}  }
class C{  public static String bind(String message,Object... bindings){  return NLS.bind(message,bindings);}  }
class C{  public AffineTransformation(double[] matrix){  m00=matrix[0];  m01=matrix[1];  m02=matrix[2];  m10=matrix[3];  m11=matrix[4];  m12=matrix[5];}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  try {    TrustManagerFactory.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      TrustManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      TrustManagerFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        TrustManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i],mProv.getName());    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider().getName(),mProv.getName());    checkResult(tmf);  }}  }
class C{  @Override public AffineTransformation clone(){  return new AffineTransformation(this.dim,this.trans,this.inv);}  }
class C{  public void execNonQuery(String sql,String[] selectionArgs){  for (int i=0, count=selectionArgs.length; i < count; i++)   sql=sql.replaceFirst("[?]",selectionArgs[i]);  LogUtils.d(sql);  database.execSQL(sql);}  }
class C{  @Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);  if (mComposing.length() > 0 && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd)) {    mComposing.setLength(0);    updateCandidates();    InputConnection ic=getCurrentInputConnection();    if (ic != null) {      ic.finishComposingText();    }  }}  }
class C{  public void updateAverageRating(){  BigDecimal result=new BigDecimal(0);  for (  ProductReview review : getProductReviews()) {    result=result.add(new BigDecimal(review.getRating()));  }  if (getProductReviews().size() > 0) {    result=result.divide(new BigDecimal(getProductReviews().size()),2,BigDecimal.ROUND_HALF_UP);  }  setAverageRating(result);}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder description(String description){  this.description=description;  return this;}  }
class C{  public static MgmtSoftwareModule toResponse(final SoftwareModule baseSofwareModule){  if (baseSofwareModule == null) {    return null;  }  final MgmtSoftwareModule response=new MgmtSoftwareModule();  MgmtRestModelMapper.mapNamedToNamed(response,baseSofwareModule);  response.setModuleId(baseSofwareModule.getId());  response.setVersion(baseSofwareModule.getVersion());  response.setType(baseSofwareModule.getType().getKey());  response.setVendor(baseSofwareModule.getVendor());  response.add(linkTo(methodOn(MgmtSoftwareModuleRestApi.class).getArtifacts(response.getModuleId())).withRel(MgmtRestConstants.SOFTWAREMODULE_V1_ARTIFACT));  response.add(linkTo(methodOn(MgmtSoftwareModuleRestApi.class).getSoftwareModule(response.getModuleId())).withRel("self"));  response.add(linkTo(methodOn(MgmtSoftwareModuleTypeRestApi.class).getSoftwareModuleType(baseSofwareModule.getType().getId())).withRel(MgmtRestConstants.SOFTWAREMODULE_V1_TYPE));  response.add(linkTo(methodOn(MgmtSoftwareModuleResource.class).getMetadata(response.getModuleId(),Integer.parseInt(MgmtRestConstants.REQUEST_PARAMETER_PAGING_DEFAULT_OFFSET),Integer.parseInt(MgmtRestConstants.REQUEST_PARAMETER_PAGING_DEFAULT_LIMIT),null,null)).withRel("metadata"));  return response;}  }
class C{  public QLFFilesCollection(Class<F> featureClass,String pathRegexFind,String pathRegexRep){  this(featureClass);  this.pathRegexFind=pathRegexFind;  this.pathRegexRep=pathRegexRep;}  }
class C{  private static String encodeParameterValue(String value){  StringBuilder sb=null;  for (int i=0; i < value.length(); i++) {    char c=value.charAt(i);    if (c < validParameterValueCharacters.length && validParameterValueCharacters[c]) {      if (sb != null) {        sb.append(c);      }    } else {      if (sb == null) {        sb=new StringBuilder(value.length() * 2);        sb.append(value.substring(0,i));      }      String hex=Integer.toString(c,16);      sb.append('%').append(hex);    }  }  return (sb == null) ? value : sb.toString();}  }
class C{  public Y ne(String value){  if (value == null || value.trim().length() == 0) {    return super.ne((Long)null);  } else {    return super.ne(Long.parseLong(value.trim()));  }}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double height){  this(sides,radiusTop,radiusBase,0.0,height,true);}  }
class C{  public String toValueString(){switch (OptionNumberRegistry.getFormatByNr(number)) {case INTEGER:    if (number == OptionNumberRegistry.ACCEPT || number == OptionNumberRegistry.CONTENT_FORMAT)     return "\"" + MediaTypeRegistry.toString(getIntegerValue()) + "\""; else     if (number == OptionNumberRegistry.BLOCK1 || number == OptionNumberRegistry.BLOCK2)     return "\"" + new BlockOption(value) + "\""; else     return Integer.toString(getIntegerValue());case STRING:  return "\"" + this.getStringValue() + "\"";default :return toHexString(this.getValue());}}  }
class C{  public <T extends Event>void waitFor(Class<T> eventClass,long time,TimeUnit unit) throws InterruptedException {  waitFor(null,time,unit);}  }
class C{  public void shutdown(ShutdownModeAmp mode,ExitCode exitCode,String msg){  shutdown(mode,exitCode,msg,null);}  }
class C{  public void register(Location location){  Integer oldSize=Integer.valueOf(_locationHashTable.size());  _locationHashTable.put(location.getId(),location);  int id=Integer.parseInt(location.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  private List<URI> toURIs(List<NamedElement> namedElements){  List<URI> out=Lists.newArrayList();  if (namedElements != null) {    for (    NamedElement namedElement : namedElements) {      out.add(namedElement.getId());    }  }  return out;}  }
class C{  public void or(LongBitSet other){  assert other.numWords <= numWords : "numWords=" + numWords + ", other.numWords="+ other.numWords;  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    bits[pos]|=other.bits[pos];  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  departments=new ArrayList();  iShowUnusedDepts=false;  iOp=null;}  }
class C{  public static void recreate(Activity child){  Activity context=child;  while (context != null) {    context.recreate();    context=context.getParent();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasCommand(String notificationName){  return commandMap.containsKey(notificationName);}  }
class C{  private void updateLocalConfiguration(final JavaSparkContext sparkContext,final SparkConf sparkConfiguration){  final String[] validPropertyNames={"spark.job.description","spark.jobGroup.id","spark.job.interruptOnCancel","spark.scheduler.pool"};  for (  String propertyName : validPropertyNames) {    if (sparkConfiguration.contains(propertyName)) {      String propertyValue=sparkConfiguration.get(propertyName);      this.logger.info("Setting Thread Local SparkContext Property - " + propertyName + " : "+ propertyValue);      sparkContext.setLocalProperty(propertyName,sparkConfiguration.get(propertyName));    }  }}  }
class C{  public static Scenario loadScenarioFromPlansAndNetwork(String populationFile,String networkFile){  Config config=new Config();  config.addCoreModules();  config.plans().setInputFile(populationFile);  config.network().setInputFile(networkFile);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList deactivateSnapshotSession(@PathParam("id") URI id,@DefaultValue("FULL") @QueryParam("type") String type){  return getSnapshotSessionManager().deleteSnapshotSession(id,type);}  }
class C{  public OrganizationAuthorityException(String message){  super(message);}  }
class C{  public void annotation(String type,int numMemberValuePairs) throws IOException {  annotation(pool.addUtf8Info(type),numMemberValuePairs);}  }
class C{  public void testCertStore10() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams,dName);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  public long position(Clob searchstr,long start) throws SQLException {  throw new FBDriverNotCapableException("Method position(Clob, long) is not supported");}  }
class C{  private static String digits(long val,int digits){  long hi=1L << (digits * 4);  return Long.toHexString(hi | (val & (hi - 1))).substring(1);}  }
class C{  public Object parse(Reader reader){  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  Object content;  JsonParser parser=createParser();  content=parser.parse(reader);  return content;}  }
class C{  public int divide(int dividend,int divisor){  final int MIN=0x80000000;  if (divisor == 0)   throw new ArithmeticException("/ by zero");  if (divisor == -1 && dividend == MIN)   throw new ArithmeticException("overflow");  int sign=(dividend >= 0 && divisor > 0 || dividend <= 0 && divisor < 0) ? 1 : -1;  dividend=dividend > 0 ? -dividend : dividend;  divisor=divisor > 0 ? -divisor : divisor;  if (divisor == -1)   return sign == 1 ? -dividend : dividend;  int res=0;  while (dividend <= divisor) {    int divisorCurrent=divisor;    int resCurrent=1;    while (divisorCurrent > dividend >> 1) {      divisorCurrent=divisorCurrent << 1;      resCurrent=resCurrent << 1;    }    res+=resCurrent;    dividend-=divisorCurrent;  }  return sign == 1 ? res : -res;}  }
class C{  public HTMLStripCharFilter(Reader source){  super(source);  this.zzReader=source;}  }
class C{  public static TableLinkConnection open(HashMap<TableLinkConnection,TableLinkConnection> map,String driver,String url,String user,String password,boolean shareLinkedConnections){  TableLinkConnection t=new TableLinkConnection(map,driver,url,user,password);  if (!shareLinkedConnections) {    t.open();    return t;  }synchronized (map) {    TableLinkConnection result=map.get(t);    if (result == null) {      t.open();      map.put(t,t);      result=t;    }    result.useCounter++;    return result;  }}  }
class C{  public Client createClient(){  return createClient(clientReadTimeout,clientConnectTimeout);}  }
class C{  public SelectionDialog(String key,int mode,Object[] arguments,List<String> optionsToSelect,List<String> optionsToCheck){  this(key,mode,arguments);  this.optionsToSelect=optionsToSelect;  this.optionsToCheck=optionsToCheck;}  }
class C{  public int indexOfColumnName(String columnName){  return columnNameList.indexOf(columnName.toLowerCase());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.273 -0500",hash_original_method="B35DA3AB8471E98A0F9901B66FBBA5C9",hash_generated_method="7557328DF4D4A138F8EF4FFB2D8845C4") private static int compateOids(ObjectIdentifier oid1,ObjectIdentifier oid2){  if (oid1 == oid2) {    return 0;  }  int[] ioid1=oid1.getOid();  int[] ioid2=oid2.getOid();  int min=ioid1.length < ioid2.length ? ioid1.length : ioid2.length;  for (int i=0; i < min; ++i) {    if (ioid1[i] < ioid2[i]) {      return -1;    }    if (ioid1[i] > ioid2[i]) {      return 1;    }    if ((i + 1) == ioid1.length && (i + 1) < ioid2.length) {      return -1;    }    if ((i + 1) < ioid1.length && (i + 1) == ioid2.length) {      return 1;    }  }  return 0;}  }
class C{  void mergesort(Vector a,Vector b,int l,int r,XPathContext support) throws TransformerException {  if ((r - l) > 0) {    int m=(r + l) / 2;    mergesort(a,b,l,m,support);    mergesort(a,b,m + 1,r,support);    int i, j, k;    for (i=m; i >= l; i--) {      if (i >= b.size())       b.insertElementAt(a.elementAt(i),i); else       b.setElementAt(a.elementAt(i),i);    }    i=l;    for (j=(m + 1); j <= r; j++) {      if (r + m + 1 - j >= b.size())       b.insertElementAt(a.elementAt(j),r + m + 1 - j); else       b.setElementAt(a.elementAt(j),r + m + 1 - j);    }    j=r;    int compVal;    for (k=l; k <= r; k++) {      if (i == j)       compVal=-1; else       compVal=compare((NodeCompareElem)b.elementAt(i),(NodeCompareElem)b.elementAt(j),0,support);      if (compVal < 0) {        a.setElementAt(b.elementAt(i),k);        i++;      } else       if (compVal > 0) {        a.setElementAt(b.elementAt(j),k);        j--;      }    }  }}  }
class C{  public void createSecondaryVolumeForSnapshot(StorageSystem storageSystem,Volume sourceVolume,BlockSnapshot snapshotObj) throws Exception {  log.info("SecondaryVolume for snapshot creation operation started");  String taskId=UUID.randomUUID().toString();  TaskCompleter taskCompleter=new BlockSnapshotCreateCompleter(Arrays.asList(snapshotObj.getId()),taskId);  String asyncTaskMessageId=null;  HDSApiClient hdsApiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  String systemObjectID=HDSUtils.getSystemObjectID(storageSystem);  asyncTaskMessageId=hdsApiClient.createSnapshotVolume(systemObjectID,sourceVolume.getCapacity(),storageSystem.getModel());  if (asyncTaskMessageId != null) {    HDSJob createHDSJob=new HDSBlockCreateSnapshotJob(asyncTaskMessageId,snapshotObj.getStorageController(),taskCompleter);    hdsCommandHelper.waitForAsyncHDSJob(createHDSJob);  }  log.info("SecondaryVolume for snapshot creation operation completed successfully");}  }
class C{  public Pow10(){  super("pow10",1);}  }
class C{  public CollectionDescriptor buildDescriptor(String uriName) throws OracleException {  return buildDescriptor(uriName,null);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) final public IVariableOrConstant<IV> s(){  return (IVariableOrConstant<IV>)get(0);}  }
class C{  @Override public Collection<Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException {  if (coll == null) {    throw new CertStoreException("Collection is null");  }  for (int c=0; c < 10; c++) {    try {      HashSet<Certificate> result=new HashSet<>();      if (selector != null) {        for (        Object o : coll) {          if ((o instanceof Certificate) && selector.match((Certificate)o))           result.add((Certificate)o);        }      } else {        for (        Object o : coll) {          if (o instanceof Certificate)           result.add((Certificate)o);        }      }      return (result);    } catch (    ConcurrentModificationException e) {    }  }  throw new ConcurrentModificationException("Too many " + "ConcurrentModificationExceptions");}  }
class C{  public void mask(int alpha[]){  g.mask(alpha);}  }
class C{  public FloodlightModuleContext(){  this(null);}  }
class C{  public double calcScoreWithMissingParent(int nNode,int nCandidateParent){  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  if (!oParentSet.contains(nCandidateParent)) {    return -1e100;  }  int iParent=oParentSet.deleteParent(nCandidateParent,m_BayesNet.m_Instances);  double logScore=calcNodeScore(nNode);  oParentSet.addParent(nCandidateParent,iParent,m_BayesNet.m_Instances);  return logScore;}  }
class C{  private String prepareWhere(String where){  where=combineWhere(where,"LocalCopyType != 300");  if (mOfflineOnly)   where=combineWhere(where,"LocalCopyPath IS NOT NULL");  if (mRatedOnly)   where=combineWhere(where,"Rating > 0");  if (!TextUtils.isEmpty(mSearchKey)) {    String searchKey=DatabaseUtils.sqlEscapeString("%" + mSearchKey + "%");    String searchWhere=COLUMN_ALBUM + " LIKE " + searchKey;    searchWhere+=" OR " + COLUMN_TITLE + " LIKE "+ searchKey;    searchWhere+=" OR " + COLUMN_ALBUM_ARTIST + " LIKE "+ searchKey;    searchWhere+=" OR " + COLUMN_ARTIST + " LIKE "+ searchKey;    where=combineWhere(where,searchWhere);  }  return where;}  }
class C{  public void start(){  this.hasNext=true;}  }
class C{  public OriginalOwnerTracker(){}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  public static boolean isUSPhoneNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneNumber);}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2) @Override public Collection<Long> findPrimesWithoutSplitSize(Collection<Long> input){  return findPrimes0(input);}  }
class C{  @Override public void teardown(){}  }
class C{  public boolean makeVideoSharingCall(String remoteUri){  boolean ret;  super.mOutgoing=true;  ActionConfig config=new ActionConfig();  ret=mSession.callVideo(remoteUri,config);  config.delete();  return ret;}  }
class C{  public boolean isGradient(){  return TYPE_GRADIENT.equals(getType());}  }
class C{  public Exception(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public static <T>Collection<T> notEmpty(Collection<T> list,String name){  notNull(list,name);  if (list.isEmpty()) {    throw new IllegalArgumentException(String.format("Collection %s is empty",name));  }  return list;}  }
class C{  public void add(K obj){  buffer[getIndex(writePos)]=obj;  writePos++;  if (writePos - readPos >= buffer.length) {    @SuppressWarnings("unchecked") K[] b2=(K[])new Object[buffer.length * 2];    for (int i=readPos; i < writePos; i++) {      K x=buffer[getIndex(i)];      int i2=i & b2.length - 1;      b2[i2]=x;    }    buffer=b2;  }}  }
class C{  @Override public void aggregate(final BlobsWriteProc.Result result,final Split split){  stats.totalBucketSize.add(result.totalBucketSize);  while (true) {    final int tmp=stats.maxBucketSize.get();    if (tmp < result.maxBucketSize) {      if (!stats.maxBucketSize.compareAndSet(tmp,result.maxBucketSize)) {        continue;      }    }    break;  }  for (int i=split.fromIndex, j=0; i < split.toIndex; i++, j++) {    final int counter=result.counters[j];    if (counter == BlobsIndexHelper.NOT_FOUND) {      if (!readOnly)       throw new AssertionError();      stats.nunknown.incrementAndGet();    } else {      final BigdataValue value=a[i].obj;      final BlobIV<?> iv=new BlobIV(VTE.valueOf(value),value.hashCode(),(short)counter);      value.setIV(iv);      if (a[i] instanceof KVOList) {        final KVOList<BigdataValue> tmp=(KVOList<BigdataValue>)a[i];        if (!tmp.isDuplicateListEmpty()) {          tmp.map(new AssignTermId(iv));        }      }      if (log.isDebugEnabled())       log.debug("termId=" + iv + ", term="+ a[i].obj);    }  }}  }
class C{  public LocalDateTime withYearOfCentury(int yearOfCentury){  return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(),yearOfCentury));}  }
class C{  public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public String toString(){  CharArrayBuffer buffer=new CharArrayBuffer(16);  buffer.append(this.protocol);  buffer.append('/');  buffer.append(Integer.toString(this.major));  buffer.append('.');  buffer.append(Integer.toString(this.minor));  return buffer.toString();}  }
class C{  @Override public void hide(){}  }
class C{  @Override protected void emit_invoke_compiledmethod(CompiledMethod cm){  Offset methOffset=cm.getOsrJTOCoffset();  asm.emitLAddrToc(T0,methOffset);  asm.emitMTCTR(T0);  boolean takeThis=!cm.method.isStatic();  MethodReference ref=cm.method.getMemberRef().asMethodReference();  genMoveParametersToRegisters(takeThis,ref);  asm.emitBCCTRL();  genPopParametersAndPushReturnValue(takeThis,ref);}  }
class C{  public LogEntry(String timestamp,String contents,boolean suppressBlanks){  this.timestamp=timestamp;  this.contents=contents.trim();  this.suppressBlanks=suppressBlanks;}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  int numOfPixels=0;  BufferedImage image=null;  RandomLSBOutputStream lsbOS=null;  try {    if (cover == null) {      numOfPixels=(int)(LSBDataHeader.getMaxHeaderSize() * 8 / 3.0);      numOfPixels+=(int)(msg.length * 8 / (3.0 * ((LSBConfig)this.config).getMaxBitsUsedPerChannel()));      image=ImageUtil.generateRandomImage(numOfPixels);    } else {      image=ImageUtil.byteArrayToImage(cover,coverFileName);    }    lsbOS=new RandomLSBOutputStream(image,msg.length,msgFileName,this.config);    lsbOS.write(msg);    lsbOS.close();    return ImageUtil.imageToByteArray(lsbOS.getImage(),stegoFileName,this);  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public DocumentAnalysisRequest addDocument(SolrInputDocument doc){  documents.add(doc);  return this;}  }
class C{  protected static char[] encodeHex(final byte[] data){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS_LOWER[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS_LOWER[0x0F & data[i]];  }  return out;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private void checkCompatibleVersion(){  if (!_dbClient.checkGeoCompatible(EXPECTED_GEO_VERSION)) {    throw APIException.badRequests.incompatibleGeoVersions(EXPECTED_GEO_VERSION,FEATURE_NAME);  }}  }
class C{  PropertyDescriptor(Class<?> bean,String base,Method read,Method write) throws IntrospectionException {  if (bean == null) {    throw new IntrospectionException("Target Bean class is null");  }  setClass0(bean);  setName(Introspector.decapitalize(base));  setReadMethod(read);  setWriteMethod(write);  this.baseName=base;}  }
class C{  public void apply(){  if (mChart instanceof XYChart) {    if (((XYChart)mChart).getDataset() == null) {      return;    }    int scales=mRenderer.getScalesCount();    if (mRenderer.isInitialRangeSet()) {      for (int i=0; i < scales; i++) {        if (mRenderer.isInitialRangeSet(i)) {          mRenderer.setRange(mRenderer.getInitialRange(i),i);        }      }    } else {      XYSeries[] series=((XYChart)mChart).getDataset().getSeries();      double[] range=null;      int length=series.length;      if (length > 0) {        for (int i=0; i < scales; i++) {          range=new double[]{MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE,MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE};          for (int j=0; j < length; j++) {            if (i == series[j].getScaleNumber()) {              range[0]=Math.min(range[0],series[j].getMinX());              range[1]=Math.max(range[1],series[j].getMaxX());              range[2]=Math.min(range[2],series[j].getMinY());              range[3]=Math.max(range[3],series[j].getMaxY());            }          }          double marginX=Math.abs(range[1] - range[0]) / 40;          double marginY=Math.abs(range[3] - range[2]) / 40;          mRenderer.setRange(new double[]{range[0] - marginX,range[1] + marginX,range[2] - marginY,range[3] + marginY},i);        }      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    renderer.setScale(renderer.getOriginalScale());  }}  }
class C{  public NotificationChain basicSetBody(RegularExpressionBody newBody,NotificationChain msgs){  RegularExpressionBody oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean isHttpMessage(ClientMessage msg){  Boolean aBoolean=msg.getBooleanProperty(HttpMessageHelper.POSTED_AS_HTTP_MESSAGE);  return aBoolean != null && aBoolean.booleanValue() == true;}  }
class C{  public static RSSFeed loadSRURSS(final String rssSearchServiceURL,final String query,final int startRecord,final int maximumRecords,final CacheStrategy cacheStrategy,final boolean global,final ClientIdentification.Agent agent) throws IOException {  MultiProtocolURL uri=null;  try {    uri=new MultiProtocolURL(rssSearchServiceURL);  } catch (  final MalformedURLException e) {    throw new IOException("cora.Search failed asking peer '" + rssSearchServiceURL + "': bad url, "+ e.getMessage());  }  byte[] result=new byte[0];  try {    final LinkedHashMap<String,ContentBody> parts=new LinkedHashMap<String,ContentBody>();    parts.put("query",UTF8.StringBody(query));    parts.put("startRecord",UTF8.StringBody(Integer.toString(startRecord)));    parts.put("maximumRecords",UTF8.StringBody(Long.toString(maximumRecords)));    parts.put("verify",cacheStrategy == null ? UTF8.StringBody("false") : UTF8.StringBody(cacheStrategy.toName()));    parts.put("resource",UTF8.StringBody(global ? "global" : "local"));    parts.put("nav",UTF8.StringBody("none"));    final HTTPClient httpClient=new HTTPClient(agent);    result=httpClient.POSTbytes(new MultiProtocolURL(rssSearchServiceURL),uri.getHost(),parts,false,false);    final RSSReader reader=RSSReader.parse(RSSFeed.DEFAULT_MAXSIZE,result);    if (reader == null) {      throw new IOException("cora.Search failed asking peer '" + uri.getHost() + "': probably bad response from remote peer (1), reader == null");    }    final RSSFeed feed=reader.getFeed();    if (feed == null) {      throw new IOException("cora.Search failed asking peer '" + uri.getHost() + "': probably bad response from remote peer (2)");    }    return feed;  } catch (  final IOException e) {    throw new IOException("cora.Search error asking peer '" + uri.getHost() + "':"+ e.toString());  }}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  public void abort(){  abortFlag=true;}  }
class C{  public int size(){  return size;}  }
class C{  public int lastIndexOf(String str,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (str == null || startIndex < 0) {    return -1;  }  int strLen=str.length();  if (strLen > 0 && strLen <= size) {    if (strLen == 1) {      return lastIndexOf(str.charAt(0),startIndex);    }    outer:     for (int i=startIndex - strLen + 1; i >= 0; i--) {      for (int j=0; j < strLen; j++) {        if (str.charAt(j) != buffer[i + j]) {          continue outer;        }      }      return i;    }  } else   if (strLen == 0) {    return startIndex;  }  return -1;}  }
class C{  private void verifyRoleRequest(OFMessage m,int expectedXid,Role expectedRole){  assertEquals(OFType.VENDOR,m.getType());  OFVendor vendorMsg=(OFVendor)m;  assertEquals(expectedXid,vendorMsg.getXid());  assertEquals(OFNiciraVendorData.NX_VENDOR_ID,vendorMsg.getVendor());  assertTrue("Vendor data is not an instance of OFRoleRequestVendorData" + " its class is: " + vendorMsg.getVendorData().getClass().getName(),vendorMsg.getVendorData() instanceof OFRoleRequestVendorData);  OFRoleRequestVendorData requestData=(OFRoleRequestVendorData)vendorMsg.getVendorData();  assertEquals(expectedRole.toNxRole(),requestData.getRole());}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public String lowerBoundMinSupportTipText(){  return "Lower bound for minimum support as a fraction or number of instances.";}  }
class C{  public void assertSubtype(Type s,Type t,boolean expected){  if (types.isSubtype(s,t) != expected) {    String msg=expected ? " is not a subtype of " : " is a subtype of ";    error(s + msg + t);  }}  }
class C{  public void reset(){  m_run=true;}  }
class C{  public T caseDeferredTypeRef(DeferredTypeRef object){  return null;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static <F extends SimpleFragment>SimpleFragmentIntent<F> of(@NonNull Class<F> simpleFragmentClass){  return new SimpleFragmentIntent<>(simpleFragmentClass);}  }
class C{  public String serialize(Object obj) throws ApiException {  try {    if (obj != null)     return mapper.writeValueAsString(obj); else     return null;  } catch (  Exception e) {    throw new ApiException(400,e.getMessage());  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void notifyListListeners(){  if (!listListeners.isEmpty()) {    List temp=new ArrayList(sensorDataObjects.values());    temp.addAll(objectStorages.values());    for (    ListListener<?> listListener : listListeners) {      listListener.contentChanged(temp);    }  }}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  public void testCreateFromParcel_false(){  Parcel parcel=Parcel.obtain();  parcel.setDataPosition(0);  parcel.writeLong(4);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeString(null);  Account account=new Account(ACCOUNTNAME,ACCOUNTYPE);  parcel.writeParcelable(account,0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeByte((byte)0);  parcel.writeString(null);  parcel.setDataPosition(0);  sendRequest=SendRequest.CREATOR.createFromParcel(parcel);  assertEquals(4,sendRequest.getTrackId());  assertFalse(sendRequest.isSendDrive());  assertFalse(sendRequest.isSendMaps());  assertFalse(sendRequest.isSendFusionTables());  assertFalse(sendRequest.isSendSpreadsheets());  assertFalse(sendRequest.isDriveSync());  assertFalse(sendRequest.isDriveSharePublic());  assertNull(sendRequest.getDriveShareEmails());  assertEquals(account,sendRequest.getAccount());  assertFalse(sendRequest.isDriveSuccess());  assertFalse(sendRequest.isMapsSuccess());  assertFalse(sendRequest.isFusionTablesSuccess());  assertFalse(sendRequest.isSpreadsheetsSuccess());  assertNull(sendRequest.getShareUrl());}  }
class C{  public boolean liveNodesContain(String name){  return liveNodes.contains(name);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getAddressBookDao() : null;}  }
class C{  public Object clone(){  return super.clone();}  }
class C{  public InlineMenuButton removeButton(int index){  return buttons.remove(index);}  }
class C{  private synchronized void initResourceBundle(String resourceBundleName){  String current=this.resourceBundleName;  if (current != null) {    if (current.equals(resourceBundleName)) {      return;    } else {      throw new IllegalArgumentException("Resource bundle name '" + resourceBundleName + "' is inconsistent with the existing '"+ current+ "'");    }  }  if (resourceBundleName != null) {    this.resourceBundle=loadResourceBundle(resourceBundleName);    this.resourceBundleName=resourceBundleName;  }}  }
class C{  public void cancel(){  isCanceled=true;}  }
class C{  public CombinedActiveEntRateLocalResults computeLocal(int history,int base,int states[][],int col){  initialise(history,base);  addObservations(states,col);  return computeLocalFromPreviousObservations(states,col);}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(){  return new LinkedHashMap<K,V>();}  }
class C{  public static void startThreads(Iterable<? extends Thread> threads){  if (threads != null) {    for (    Thread thread : threads) {      if (thread != null)       thread.start();    }  }}  }
class C{  public RestoringInputStream(InputStream inStream){  this.inStream=inStream;}  }
class C{  @Override public ExampleSetBasedPopulation createInitialPopulation(ExampleSet es) throws UndefinedParameterError {  ExampleSetBasedPopulation population=super.createInitialPopulation(es);  ExampleSetBasedPopulation popRemovedDeselected=new ExampleSetBasedPopulation();  for (int i=0; i < population.getNumberOfIndividuals(); i++) {    popRemovedDeselected.add(new ExampleSetBasedIndividual(population.get(i).getExampleSet().createCleanClone()));  }  return popRemovedDeselected;}  }
class C{  public boolean isDomainController(){  return _isDomainController;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).isAdvancedDeinterlacingEnabled() ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public static Name fromAddress(String addr) throws UnknownHostException {  byte[] array=Address.toByteArray(addr,Address.IPv4);  if (array == null)   array=Address.toByteArray(addr,Address.IPv6);  if (array == null)   throw new UnknownHostException("Invalid IP address");  return fromAddress(array);}  }
class C{  private Document parse(final String data,DocumentBuilder docBuilder){  if (docBuilder == null || data == null) {    return null;  }  Document document=null;  try {    StringBuilder buf=new StringBuilder(1024);    if (!data.startsWith("<?xml")) {      buf.append(BEGIN_PART);    }    buf.append(data);    if (!data.endsWith(END_PART)) {      buf.append(END_PART);    }    InputSource inputSource=new InputSource(new StringReader(buf.toString()));    document=docBuilder.parse(inputSource);  } catch (  Exception e) {    LOGGER.warn("Problem with creating document: " + e.getMessage());  }  return document;}  }
class C{  public boolean hasTimeComponent(){  return hasHour() || hasMinute() || hasSecond();}  }
class C{  public static boolean isSolaris(){  return (OS_NAME.contains("sunos"));}  }
class C{  protected static double ludcmp(double[][] A,int[] index){  final double TINY=1.0e-20;  double[] vv=new double[4];  double d=1;  double temp, sum;  for (int i=0; i < 4; i+=1) {    double big=0;    for (int j=0; j < 4; j+=1) {      if ((temp=Math.abs(A[i][j])) > big) {        big=temp;      }    }    if (big == 0) {      return 0;    } else {      vv[i]=1 / big;    }  }  for (int j=0; j < 4; j+=1) {    for (int i=0; i < j; i+=1) {      sum=A[i][j];      for (int k=0; k < i; k+=1) {        sum-=A[i][k] * A[k][j];      }      A[i][j]=sum;    }    double big=0;    double dum;    int imax=-1;    for (int i=j; i < 4; i+=1) {      sum=A[i][j];      for (int k=0; k < j; k++) {        sum-=A[i][k] * A[k][j];      }      A[i][j]=sum;      if ((dum=vv[i] * Math.abs(sum)) >= big) {        big=dum;        imax=i;      }    }    if (j != imax) {      for (int k=0; k < 4; k+=1) {        dum=A[imax][k];        A[imax][k]=A[j][k];        A[j][k]=dum;      }      d=-d;      vv[imax]=vv[j];    }    index[j]=imax;    if (A[j][j] == 0.0)     A[j][j]=TINY;    if (j != 3) {      dum=1.0 / A[j][j];      for (int i=j + 1; i < 4; i+=1) {        A[i][j]*=dum;      }    }  }  return d;}  }
class C{  public void publishCommands(String jid) throws XMPPException {  DiscoverItems discoverItems=new DiscoverItems();  Collection<AdHocCommandInfo> xCommandsList=getRegisteredCommands();  for (  AdHocCommandInfo info : xCommandsList) {    DiscoverItems.Item item=new DiscoverItems.Item(info.getOwnerJID());    item.setName(info.getName());    item.setNode(info.getNode());    discoverItems.addItem(item);  }  serviceDiscoveryManager.publishItems(jid,discoNode,discoverItems);}  }
class C{  public PLSurfaceView(Context context,Renderer renderer){  super(context);  this.setRenderer(renderer);  this.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);}  }
class C{  protected static String printStackTrace(final Throwable t){  final StringWriter stackTraceWriter=new StringWriter();  t.printStackTrace(new PrintWriter(stackTraceWriter));  return stackTraceWriter.toString();}  }
class C{  @SuppressWarnings("deprecation") public ResponseFromManager sendTaskToExecutionManager(ParallelTask task){  ResponseFromManager commandResponseFromManager=null;  ActorRef executionManager=null;  try {    logger.info("!!STARTED sendAgentCommandToManager : " + task.getTaskId() + " at "+ PcDateUtils.getNowDateTimeStr());    executionManager=ActorConfig.createAndGetActorSystem().actorOf(Props.create(ExecutionManager.class,task),"ExecutionManager-" + task.getTaskId());    final FiniteDuration duration=Duration.create(task.getConfig().getTimeoutAskManagerSec(),TimeUnit.SECONDS);    Future<Object> future=Patterns.ask(executionManager,new InitialRequestToManager(task),new Timeout(duration));    task.executionManager=executionManager;    commandResponseFromManager=(ResponseFromManager)Await.result(future,duration);    logger.info("!!COMPLETED sendTaskToExecutionManager : " + task.getTaskId() + " at "+ PcDateUtils.getNowDateTimeStr()+ "  \t\t  GenericResponseMap in future size: "+ commandResponseFromManager.getResponseCount());  } catch (  Exception ex) {    logger.error("Exception in sendTaskToExecutionManager {} details {}: ",ex,ex);  } finally {    if (executionManager != null && !executionManager.isTerminated()) {      ActorConfig.createAndGetActorSystem().stop(executionManager);    }    if (task.getConfig().isAutoSaveLogToLocal()) {      task.saveLogToLocal();    }  }  return commandResponseFromManager;}  }
class C{  protected boolean shouldRemoveStopFilter(ExtendedDismaxConfiguration config,Query query){  return config.stopwords && isEmpty(query);}  }
class C{  @RpcMethod public void attachISOtoVM(String vmId,String isoPath,AsyncMethodCallback<Host.AsyncClient.attach_iso_call> handler) throws RpcException {  ensureClient();  AttachISORequest attachISORequest=new AttachISORequest(vmId,isoPath);  clientProxy.setTimeout(ATTACH_ISO_TIMEOUT_MS);  logger.info("attach_iso vm {}, isoPath {}, target {} request {}",vmId,isoPath,getHostIp(),attachISORequest);  try {    clientProxy.attach_iso(attachISORequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public static <IN>byte[] serialize(IN object,TypeSerializer<IN> serializer) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputViewStreamWrapper wrapper=new DataOutputViewStreamWrapper(new DataOutputStream(baos));  serializer.serialize(object,wrapper);  return baos.toByteArray();}  }
class C{  public WordIterator(Locale locale){  mIterator=BreakIterator.getWordInstance(locale);}  }
class C{  public long endTime(){  return getTimestamp() + calculateDuration();}  }
class C{  public void clear(){  layersList.clear();  refresh();}  }
class C{  public static OutputAnalyzer executeProcess(String... cmds) throws Throwable {  return executeProcess(new ProcessBuilder(cmds));}  }
class C{  protected void installListeners(){  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    splitPane.addPropertyChangeListener(propertyChangeListener);  }  if ((focusListener=createFocusListener()) != null) {    splitPane.addFocusListener(focusListener);  }}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  @SuppressWarnings("unused") public void paintBorder(SeaGlassContext context,Graphics g,int x,int y,int w,int h){  context.getPainter().paintArrowButtonBorder(context,g,x,y,w,h);}  }
class C{  public static String authenticate() throws DropboxIntegrationException {  DbxAppInfo appInfo=new DbxAppInfo(DropboxConstants.APP_KEY,DropboxConstants.APP_SECRET);  DbxRequestConfig dbxRConfig=new DbxRequestConfig("panbox.org",Settings.getInstance().getLocale().toString());  DbxWebAuthNoRedirect webAuth=new DbxWebAuthNoRedirect(dbxRConfig,appInfo);  String authorizeUrl=webAuth.start();  DbxAuthFinish authFinish=null;  try {    JOptionPane.showMessageDialog(null,bundle.getString("DropboxApiIntegration.copyAccessTokenMessage"),bundle.getString("DropboxAPIIntegration.allowAccess"),JOptionPane.INFORMATION_MESSAGE);    DesktopApi.browse(new URI(authorizeUrl));    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }    String code=JOptionPane.showInputDialog(null,bundle.getString("DropboxAPIIntegration.enterAccessToken")).trim();    authFinish=webAuth.finish(code);  } catch (  URISyntaxException|DbxException e) {    throw new DropboxIntegrationException(e);  }  if (instance != null) {    instance.client=new DbxClient(dbxRConfig,authFinish.accessToken);  }  logger.info("Received Dropbox authentication token " + authFinish.accessToken);  return authFinish.accessToken;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.217 -0500",hash_original_method="981D6EF1132B7EAC7AA89C92203BA1A2",hash_generated_method="F39ECEA021ACCE7E5DF0B3EDAD33CAD7") public RC2ParameterSpec(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;  iv=null;}  }
class C{  private int subspaceDimensionality(NumberVector v1,NumberVector v2,long[] pv1,long[] pv2,long[] commonPreferenceVector){  int subspaceDim=v1.getDimensionality() - BitsUtil.cardinality(commonPreferenceVector);  if (BitsUtil.equal(commonPreferenceVector,pv1) || BitsUtil.equal(commonPreferenceVector,pv2)) {    double d=weightedDistance(v1,v2,commonPreferenceVector);    if (d > 2 * epsilon) {      subspaceDim++;    }  }  return subspaceDim;}  }
class C{  public static boolean validateTypeName(final Component parent,final TypeManager typeManager,final JTextField name){  if (validateTypeName(typeManager,name)) {    return true;  } else {    CMessageBox.showWarning(parent,String.format("Unable to create empty or existing type."));    return false;  }}  }
class C{  public NotificationChain basicSetTitle(TagTitle newTitle,NotificationChain msgs){  TagTitle oldTitle=title;  title=newTitle;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DomPackage.TAG__TITLE,oldTitle,newTitle);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void loadDataIntoTable(String tableName,TextResource tableDataResource,String partitionInfo){  try {    File stagingFile=stagingLocation.newFile(tableName + ".dat");    String tableData=tableDataResource.resourceText();    PrintWriter writer=new PrintWriter(stagingFile.getAbsoluteFile());    writer.print(tableData);    writer.close();    hiveServer.getHiveContext().sql("LOAD DATA LOCAL INPATH '" + stagingFile.getAbsolutePath().replace("\\","/") + "' INTO TABLE "+ tableName+ " "+ partitionInfo);  } catch (  IOException e) {    throw new RuntimeException("Failure to load table data");  }}  }
class C{  public final void addToAll(int amount){  final Iterator<Entry<K,Integer>> it=mCount.entrySet().iterator();  while (it.hasNext()) {    mSum+=amount;    final Map.Entry<K,Integer> pairs=it.next();    pairs.setValue(pairs.getValue() + amount);  }}  }
class C{  public void close() throws IOException {  this.writer.close();}  }
class C{  public DTLZ3(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public Anonymous_beforeCode_1_ createAnonymous_beforeCode_1_(){  Anonymous_beforeCode_1_Impl anonymous_beforeCode_1_=new Anonymous_beforeCode_1_Impl();  return anonymous_beforeCode_1_;}  }
class C{  private CWindowClosingFunctions(){}  }
class C{  public PlayerChooser(final PlayerList players,final PlayerID defaultPlayer,final IUIContext uiContext,final boolean allowNeutral){  setMessageType(JOptionPane.PLAIN_MESSAGE);  setOptionType(JOptionPane.OK_CANCEL_OPTION);  setIcon(null);  m_players=players;  m_defaultPlayer=defaultPlayer;  m_uiContext=uiContext;  m_allowNeutral=allowNeutral;  createComponents();}  }
class C{  private static long copy(InputStream from,OutputStream to) throws IOException {  byte[] buf=new byte[Settings.BUFFER_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  private void readObject(){}  }
class C{  boolean hasExports(){  return !exportedNamespacesToSymbols.isEmpty();}  }
class C{  @Benchmark public void findStartWith(){  String className=getRandomClassName();  String wildCard=className.substring(0,RandomUtils.nextInt(className.length()));  if (CollectionUtils.isEmpty(indexer.findStartsWith(wildCard))) {    throw new RuntimeException("Performance test not valid, classes not found by wild card in indexer.");  }}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public Pool(Types types){  this(1,new Object[64],types);}  }
class C{  public GenericElementNS(String nsURI,String name,AbstractDocument owner){  super(nsURI,name,owner);  nodeName=name;}  }
class C{  public boolean bool(){  return str().length() > 0;}  }
class C{  public void seek(long pos) throws IOException {  if (fpDDF == null) {    reopen();  }  if (fpDDF != null) {    fpDDF.seek(pos);  } else {    throw new IOException("DDFModule doesn't have a pointer to a file");  }}  }
class C{  static boolean isHeading(String tagName){  if (tagName.length() != 2 || 'h' != tagName.charAt(0)) {    return false;  }  char ch1=tagName.charAt(1);  return ch1 >= '1' && ch1 <= '6';}  }
class C{  public ConfigUpdateRequest updateConfig(Map<String,String> requestProperties,ConfigUpdateRequest configUpdateRequest,String subject) throws IOException, RestClientException {  String path=subject != null ? String.format(CONFIG_PREFIX_FORMAT,subject) : CONFIG_ALL_PREFIX_FORMAT;  ConfigUpdateRequest response=httpRequest(path,"PUT",configUpdateRequest.toJson().getBytes(),requestProperties,UPDATE_CONFIG_RESPONSE_TYPE_REFERENCE);  return response;}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  @Override public String toString(){  return certToString() + throwableToString() + indexToString();}  }
class C{  public void testConstructorBytesPositive3(){  byte aBytes[]={127,56,100,-1};  byte rBytes[]={127,56,100,-1};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private void deserialize(){  try {    InputStream is=new ByteArrayInputStream(myData);    DataInputStream dis;    if (this.myDataVersion != null) {      dis=new VersionedDataInputStream(is,this.myDataVersion);    } else {      dis=new DataInputStream(is);    }    boolean hasCQs=dis.readBoolean();    if (hasCQs) {      int numEntries=InternalDataSerializer.readArrayLength(dis);      this.cqs=new HashMap(numEntries);      for (int i=0; i < numEntries; i++) {        Long key=InternalDataSerializer.readUnsignedVL(dis);        Integer value=Integer.valueOf((int)InternalDataSerializer.readUnsignedVL(dis));        this.cqs.put(key,value);      }    }    this.interestedClients=InternalDataSerializer.readSetOfLongs(dis);    this.interestedClientsInv=InternalDataSerializer.readSetOfLongs(dis);    this.myData=null;  } catch (  IOException e) {    throw new InternalGemFireError(e);  }}  }
class C{  public CBZip2InputStream(final InputStream in) throws IOException {  super();  this.mIn=in;  init();}  }
class C{  public void onAddOrEditRegion(){  if (!ensurePermission())   return;  stopScanning();  final BeaconScannerFragment fragment=mScannerFragment=new BeaconScannerFragment();  fragment.show(getChildFragmentManager(),SCANNER_FRAGMENT);  mServiceConnection.startRangingBeaconsInRegion(BEACON_COMPANY_ID,BeaconRegion.ANY_UUID,fragment);}  }
class C{  private void systemExit(int status){  try {    databaseCleaner.closeDatabaseCleaner();    LOGGER.debug("Ending");    Thread.sleep(500);  } catch (  Exception e) {    e.printStackTrace();  } finally {    cleanUpWorkingDirectory();    if (status != 0) {      System.err.println("InterProScan analysis failed. Exception thrown by StandaloneBlackBoxMaster. Check the log file for details");      System.exit(status);    }  }}  }
class C{  public void fireGenerateEvent(int eventType){}  }
class C{  public void close(){  if (in == null)   return;  try {    in.close();  } catch (  Exception e) {    System.err.println("Can't close '" + exampleFileName + "':");    e.printStackTrace();    System.exit(1);  }}  }
class C{  public DiscussionObject(int id){  this.id=id;}  }
class C{  public TournamentSelection(int size){  this(size,new ParetoDominanceComparator());}  }
class C{  @PostConstruct public void init(){  updateState();  if (log.isInfoEnabled()) {    log.info("|-Alerting scheduler initialized..");  }}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  protected CCTileMapAtlas(String tile,String map,int w,int h){  super(tile,w,h,0);  loadTGAfile(map);  calculateItemsToRender();  textureAtlas_.resizeCapacity(itemsToRender);  posToAtlasIndex=new HashMap<String,Integer>(itemsToRender);  updateAtlasValues();  setContentSize(CGSize.make(tgaInfo.width * itemWidth,tgaInfo.height * itemHeight));}  }
class C{  public WKSRecord(Name name,int dclass,long ttl,InetAddress address,int protocol,int[] services){  super(name,Type.WKS,dclass,ttl);  if (Address.familyOf(address) != Address.IPv4)   throw new IllegalArgumentException("invalid IPv4 address");  this.address=address.getAddress();  this.protocol=checkU8("protocol",protocol);  for (int i=0; i < services.length; i++) {    checkU16("service",services[i]);  }  this.services=new int[services.length];  System.arraycopy(services,0,this.services,0,services.length);  Arrays.sort(this.services);}  }
class C{  public void testInvalidRequestProto(){  rpcForwarder.registerService(new FakeServiceImpl(null));  assertBadRequestProtoFails();  rpcForwarder.registerBlockingService(new FakeServiceImpl(null).toBlockingService());  assertBadRequestProtoFails();}  }
class C{  public int count_pos_examples(){  int result=0;  for (int i=0; i < train_size; i++) {    if (ys[i] > 0) {      result++;    }  }  return result;}  }
class C{  public TabbedPaneTabCloseButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES);}  }
class C{  protected void closeDialogCancel(){  dispose();}  }
class C{  @Deprecated public final IOContainer run(final IOContainer input,final int logVerbosity,final boolean cleanUp) throws OperatorException {  return run(input,logVerbosity,null);}  }
class C{  public static boolean testPointAar(float pX,float pY,float minX,float minY,float maxX,float maxY){  return pX >= minX && pY >= minY && pX <= maxX && pY <= maxY;}  }
class C{  public void selfAdd(SquareMatrix s){  if ((rows != s.rows) || (columns != s.columns)) {    throw new IllegalArgumentException("cannot add a " + s.rows + 'x'+ s.columns+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int index=0; index < rows * columns; ++index) {    data[index]+=s.data[index];  }}  }
class C{  public BlockItemMetaBuilder start(){  return new BlockItemMetaBuilder();}  }
class C{  private void runSimplifiedMutationRangeTest(final PlanAlgorithm tripPlanMutateTimeAllocation,final int expectedMutationRange){  Network network=NetworkUtils.createNetwork();  network.setCapacityPeriod(Time.parseTime("01:00:00"));  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)200,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)300,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=NetworkUtils.createAndAddLink(network,Id.create("0",Link.class),fromNode,toNode,(double)100,(double)5,(double)100,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode1,toNode1,(double)100,(double)5,(double)100,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode2,toNode2,(double)100,(double)5,(double)100,(double)1);  Plan plan;  Activity act1, act2;  try {    Person person=PopulationUtils.getFactory().createPerson(Id.create("1",Person.class));    plan=PersonUtils.createAndAddPlan(person,true);    act1=PopulationUtils.createAndAddActivityFromLinkId(plan,"h",link1.getId());    act1.setEndTime(4 * 3600);    PopulationUtils.createAndAddLeg(plan,TransportMode.car);    act2=PopulationUtils.createAndAddActivityFromLinkId(plan,"w",link1.getId());    act2.setMaximumDuration(14 * 3600);    PopulationUtils.createAndAddLeg(plan,TransportMode.car);    PopulationUtils.createAndAddActivityFromLinkId(plan,"h",link1.getId());  } catch (  Exception e) {    throw new RuntimeException(e);  }  double act1End=act1.getEndTime();  double minDiff1=Double.POSITIVE_INFINITY;  double maxDiff1=Double.NEGATIVE_INFINITY;  double act2Dur=act2.getMaximumDuration();  double minDiff2=Double.POSITIVE_INFINITY;  double maxDiff2=Double.NEGATIVE_INFINITY;  for (int i=0; i < 150; i++) {    tripPlanMutateTimeAllocation.run(plan);    double diff=act1End - act1.getEndTime();    if (diff > maxDiff1)     maxDiff1=diff;    if (diff < minDiff1)     minDiff1=diff;    act1End=act1.getEndTime();    if (act1End != Time.UNDEFINED_TIME) {      assertTrue("activity end time cannot be smaller than 0, is " + act1End,act1End >= 0.0);    }    diff=act2Dur - act2.getMaximumDuration();    if (diff > maxDiff2)     maxDiff2=diff;    if (diff < minDiff2)     minDiff2=diff;    act2Dur=act2.getMaximumDuration();    if (act2Dur != Time.UNDEFINED_TIME) {      assertTrue("activity duration cannot be smaller than 0, is " + act2Dur,act2Dur >= 0.0);    }  }  assertTrue("mutation range differences wrong (act1).",minDiff1 <= maxDiff1);  assertTrue("mutation range differences wrong (act2).",minDiff2 <= maxDiff2);  assertValueInRange("mutation range out of range (maxDiff1).",maxDiff1,expectedMutationRange * 0.95,expectedMutationRange);  assertValueInRange("mutation range out of range (minDiff1).",minDiff1,-expectedMutationRange,-expectedMutationRange * 0.95);  assertValueInRange("mutation range out of range (maxDiff2).",maxDiff1,expectedMutationRange * 0.95,expectedMutationRange);  assertValueInRange("mutation range out of range (minDiff2).",minDiff2,-expectedMutationRange,-expectedMutationRange * 0.95);}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  @Override public void releaseToLoadmore(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.369 -0500",hash_original_method="7E78CD90ED1E9E863DE97D11ACED21F6",hash_generated_method="8C48F897F798B01DF3D2D717DB4F52C6") private static void dualPivotQuicksort(int[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  int ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    int t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    int t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    int t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    int t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    int t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  int pivot1=ae2;  a[e2]=a[left];  int pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void prepare(){  try {    Properties props=System.getProperties();    props.put("mail.transport.protocol",pProtocol);    props.put("mail.smtp.starttls.enable",pTls);    if (mailhost != null) {      props.put("mail.smtp.host",mailhost);    }    props.put("mail.smtp.auth",pAuth);    Authenticator auth=new SMTPAuthenticator();    session=Session.getInstance(props,auth);    if (log.isDebugEnabled()) {      session.setDebug(true);    }    msg=new MimeMessage(session);    msg.setFrom(new InternetAddress(from));    msg.setRecipients(Message.RecipientType.TO,InternetAddress.parse(to,false));    if (cc != null) {      msg.setRecipients(Message.RecipientType.CC,InternetAddress.parse(cc,false));    }    if (bcc != null) {      msg.setRecipients(Message.RecipientType.BCC,InternetAddress.parse(bcc,false));    }    msg.setSubject(subject);    mp=new MimeMultipart();  } catch (  MessagingException e) {    log.warn("Exception in prepare",e);  }}  }
class C{  public static void fill(char[] a,int fromIndex,int toIndex,char val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private void handleJsonShowEntryChildren(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  final String id=requestAndResponse.request.getParameter(DbLogic.Constants.id);  final String levels=requestAndResponse.getParameter("levels");  if (!dbLogic.getIdGenerator().isIdWellFormed(id)) {    returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());    return;  }  if (levels == null || levels.length() > 3 || (!Pattern.compile("^\\d+$").matcher(levels).find() && levels.equals("max"))) {    returnJson400(requestAndResponse,servletText.errorLevelsIsInvalid());    return;  }  int numLevels=Integer.MAX_VALUE;  if (!levels.equals("max")) {    numLevels=Integer.parseInt(levels);  }  try {    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    final Entry entry=dbLogic.getEntryById(id);    if (entry == null) {      returnJson400(requestAndResponse,servletText.errorEntryCouldNotBeFound());      return;    }    final StringBuilder result=new StringBuilder();    if (!dbLogic.canUserSeeEntry(user,entry,isUserAnAdmin(requestAndResponse))) {      if (user == null) {        returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      } else {        returnJson400(requestAndResponse,servletText.errorMayNotSeeEntry());      }    } else {      final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();      final StringBuilder innerResult=new StringBuilder();      addEntryHtmlToTree(entry,innerResult,entryInfoList,numLevels,true,null,false,!entry.isNotebook());      result.append("{ \"childrenHtml\": " + JsonBuilder.quote(innerResult.toString()) + "\n");      result.append(", \"id\": " + JsonBuilder.quote(entry.getId()) + "\n");      result.append(", \"entryInfoDict\": ");      addJsonForEntryInfos(result,entryInfoList,null);      result.append(" }");    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public static int[] cs_pinv(int[] p,int n){  int k, pinv[];  if (p == null)   return (null);  pinv=new int[n];  for (k=0; k < n; k++)   pinv[p[k]]=k;  return (pinv);}  }
class C{  @Override public PerformanceVector evaluateIndividual(double[] individual){  double fitness=optimizationFunction.getFitness(individual,ys,kernel)[0];  PerformanceVector result=new PerformanceVector();  result.addCriterion(new EstimatedPerformance("SVMOptValue",fitness,1,false));  return result;}  }
class C{  public static void deleteUnlistedFiles(File folder,Set<String> dependecyFiles){  if (!folder.exists() || (dependecyFiles == null)) {    return;  }  for (  File resource : folder.listFiles()) {    if (resource.isDirectory()) {      deleteUnlistedFiles(resource,dependecyFiles);    } else     if (!dependecyFiles.contains(resource.getName())) {      resource.delete();    }  }}  }
class C{  public static float ccpToAngle(final CGPoint v){  return (float)Math.atan2(v.y,v.x);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        v=OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=t & DIM;      int udim=u & DIM;      v=(udim != tdim ? Math.min(tdim,udim) : 0) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public static String quoteJavaIntArray(int[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new int[]{");  for (  int a : array) {    buff.appendExceptFirst(", ");    buff.append(a);  }  return buff.append('}').toString();}  }
class C{  private void ensureEntryArrayMutable(){  checkMutable();  if (entryList.isEmpty() && !(entryList instanceof ArrayList)) {    entryList=new ArrayList<Entry>(maxArraySize);  }}  }
class C{  public ToStringBuilder append(final boolean value){  style.append(buffer,null,value);  return this;}  }
class C{  public FileChannelOutputStream(FileChannel channel,boolean append) throws IOException {  this.channel=channel;  if (append) {    channel.position(channel.size());  } else {    channel.position(0);    channel.truncate(0);  }}  }
class C{  public Blade delete(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.DELETE);  return this;}  }
class C{  public boolean isInFilter(SettingsItem child,String filter){  if (!child.type.equals(Type.PARAMETER)) {    return true;  }  if (filter != null && !filter.trim().isEmpty()) {    String trimmedFilter=filter.trim();    String[] filterTokens=trimmedFilter.split(" ");    for (    String token : filterTokens) {      String unifiedToken=token.toLowerCase(Locale.ENGLISH);      if (!child.type.equals(Type.PARAMETER)) {        return true;      } else       if (child.getKey().toLowerCase(Locale.ENGLISH).contains(unifiedToken)) {        return true;      } else       if (child.getTitle() != null && child.getTitle().toLowerCase(Locale.ENGLISH).contains(unifiedToken)) {        return true;      } else       if (child.getDescription() != null && child.getDescription().toLowerCase(Locale.ENGLISH).contains(unifiedToken)) {        return true;      }    }    return false;  } else {    return true;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Expression toQualifier(final String name){  return ast.newQualifiedName((SimpleName)inner,ast.newSimpleName(name));}  }
class C{  public void testRPCFailed() throws RpcException {  rpcForwarder.registerService(new FakeServiceImpl(REQUEST).failsWithError("Error"));  SocketRpcProtos.Response rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertFalse(rpcResponse.getCallback());  assertEquals("Error",rpcResponse.getError());  assertEquals(ErrorReason.RPC_FAILED,rpcResponse.getErrorReason());  Callback<SocketRpcProtos.Response> rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertFalse(rpcCallback.isInvoked());  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).failsWithError("New Error").toBlockingService());  try {    rpcForwarder.doBlockingRpc(RPC_REQUEST);  } catch (  RpcException e) {    assertEquals(ErrorReason.RPC_FAILED,e.errorReason);    assertEquals("New Error",e.getMessage());  }  try {    rpcForwarder.doRpc(RPC_REQUEST,null);  } catch (  RpcException e) {    assertEquals(ErrorReason.RPC_FAILED,e.errorReason);    assertEquals("New Error",e.getMessage());  }}  }
class C{  @Override public synchronized void stateUpdate(){  if (leaderStateManager.amILeader() && processStateManager.getState().equals(CdcrParams.ProcessState.STARTED)) {    if (replicatorStates.size() > 0) {      this.bootstrapExecutor=ExecutorUtil.newMDCAwareFixedThreadPool(replicatorStates.size(),new SolrjNamedThreadFactory("cdcr-bootstrap-status"));    }    this.initLogReaders();    this.scheduler.start();    return;  }  this.scheduler.shutdown();  if (bootstrapExecutor != null) {    IOUtils.closeQuietly(bootstrapStatusRunnable);    ExecutorUtil.shutdownAndAwaitTermination(bootstrapExecutor);  }  this.closeLogReaders();}  }
class C{  public boolean isSetChallenge(){  return this.challenge != null;}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  public static ModifiableDBIDs randomSample(DBIDs source,int k,int seed){  return randomSample(source,k,new Random(seed));}  }
class C{  static int compareGroups(BugGroup m1,BugGroup m2){  int result=m1.compareTo(m2);  if (result == 0) {    return m1.getShortDescription().compareToIgnoreCase(m2.getShortDescription());  }  return result;}  }
class C{  public void assertion(boolean b,java.lang.String msg){  if (!b) {    java.lang.String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public void dispose(){  mGraphics.dispose();}  }
class C{  public boolean isOverLimit(int c){  return (c > maxCount);}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ size;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static boolean shouldStartDockApp(Context context,Intent intent){  ComponentName name=intent.resolveActivity(context.getPackageManager());  return name != null && !name.equals(SOMNAMBULATOR_COMPONENT);}  }
class C{  private JMenu createEditMenu(){  JMenu edit=new JMenu("Edit");  JMenuItem copy=new JMenuItem(new CopySubgraphAction(this));  JMenuItem paste=new JMenuItem(new PasteSubgraphAction(this));  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));  edit.add(copy);  edit.add(paste);  return edit;}  }
class C{  public T caseExecuteClause_(ExecuteClause_ object){  return null;}  }
class C{  public void checkSorting(MyIdxList list) throws Exception {  Iterator<ListNode> en=m_List.iterator();  ListNode first=null, second=null;  while (en.hasNext()) {    if (first == null) {      first=en.next();    } else {      second=en.next();      if (first.distance < second.distance) {        throw new Exception("List not sorted correctly." + " first.distance: " + first.distance + " second.distance: "+ second.distance+ " Please check code.");      }    }  }}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addSKI(X509Certificate x509certificate) throws XMLSecurityException {  this.add(new XMLX509SKI(this.doc,x509certificate));}  }
class C{  private static int applyPrecision(int decExp,char[] digits,int nDigits,int prec){  if (prec >= nDigits || prec < 0) {    return decExp;  }  if (prec == 0) {    if (digits[0] >= '5') {      digits[0]='1';      Arrays.fill(digits,1,nDigits,'0');      return decExp + 1;    } else {      Arrays.fill(digits,0,nDigits,'0');      return decExp;    }  }  int q=digits[prec];  if (q >= '5') {    int i=prec;    q=digits[--i];    if (q == '9') {      while (q == '9' && i > 0) {        q=digits[--i];      }      if (q == '9') {        digits[0]='1';        Arrays.fill(digits,1,nDigits,'0');        return decExp + 1;      }    }    digits[i]=(char)(q + 1);    Arrays.fill(digits,i + 1,nDigits,'0');  } else {    Arrays.fill(digits,prec,nDigits,'0');  }  return decExp;}  }
class C{  private static void format(StringBuffer target,int scale,long intP,long decP){  if (decP != 0L) {    decP+=5L;    decP/=10L;    if (decP >= tenPowDouble(scale)) {      intP++;      decP-=tenPow(scale);    }    if (decP != 0L) {      while (decP % 10L == 0L) {        decP=decP / 10L;        scale--;      }    }  }  target.append(intP);  if (decP != 0L) {    target.append('.');    while (scale > 0 && (scale > 18 ? decP < tenPowDouble(--scale) : decP < tenPow(--scale))) {      target.append('0');    }    target.append(decP);  }}  }
class C{  public boolean isOpen(){  return open.get();}  }
class C{  public AcquireTokenByUserPassRequestBuilder(String subject,String password,TokenSpec spec,boolean hokConfirmation,JAXBContext jaxbContext,int requestValidityInSeconds){  super(spec,hokConfirmation,jaxbContext,requestValidityInSeconds);  assert subject != null;  assert password != null;  this.subject=subject;  this.password=password;}  }
class C{  public static boolean processAuthHeader(OkAuthenticator authenticator,int responseCode,RawHeaders responseHeaders,RawHeaders successorRequestHeaders,Proxy proxy,URL url) throws IOException {  String responseField;  String requestField;  if (responseCode == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";    requestField="Authorization";  } else   if (responseCode == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";    requestField="Proxy-Authorization";  } else {    throw new IllegalArgumentException();  }  List<Challenge> challenges=parseChallenges(responseHeaders,responseField);  if (challenges.isEmpty()) {    return false;  }  Credential credential=responseHeaders.getResponseCode() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,url,challenges) : authenticator.authenticate(proxy,url,challenges);  if (credential == null) {    return false;  }  successorRequestHeaders.set(requestField,credential.getHeaderValue());  return true;}  }
class C{  private static boolean isPageNumberSequence(List<PageInfo> ascendingNumbers,PageNumbersState state){  if (ascendingNumbers.size() <= 1)   return false;  final PageInfo firstPage=ascendingNumbers.get(0);  if (firstPage.mPageNum != 1 && firstPage.mUrl.isEmpty())   return false;  boolean hasPlainNum=false;  for (  PageInfo page : ascendingNumbers) {    if (page.mUrl.isEmpty()) {      if (hasPlainNum)       return false;      hasPlainNum=true;    } else     if (hasPlainNum && state.mNextPagingUrl.isEmpty()) {      state.mNextPagingUrl=page.mUrl;    }  }  if (ascendingNumbers.size() == 2) {    return firstPage.mPageNum + 1 == ascendingNumbers.get(1).mPageNum;  }  for (int i=1; i < ascendingNumbers.size(); i++) {    final PageInfo currPage=ascendingNumbers.get(i);    final PageInfo prevPage=ascendingNumbers.get(i - 1);    if (currPage.mPageNum - prevPage.mPageNum != 1) {      if (i != 1 && i != ascendingNumbers.size() - 1)       return false;      if (currPage.mUrl.isEmpty() || prevPage.mUrl.isEmpty())       return false;    }  }  return true;}  }
class C{  public StrokeAction(String group){  super(group);}  }
class C{  public boolean isNegative(){  return signum() == -1;}  }
class C{  private void convertToArrayType(char[][] parameterTypes,int counter,int arrayDim){  int length=parameterTypes[counter].length;  char[] arrayType=new char[length + arrayDim * 2];  System.arraycopy(parameterTypes[counter],0,arrayType,0,length);  for (int i=0; i < arrayDim; i++) {    arrayType[length + (i * 2)]='[';    arrayType[length + (i * 2) + 1]=']';  }  parameterTypes[counter]=arrayType;}  }
class C{  public AggregateableEvaluation(Instances data) throws Exception {  super(data);}  }
class C{  public static String delete(String inString,String pattern){  return replace(inString,pattern,"");}  }
class C{  public static String wrap(final String str,final int wrapLength){  return wrap(str,wrapLength,null,false);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static int[] toIntArray(char[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public final void putStatement(RTLStatement stmt){  RTLStatement existing=statementMap.get(stmt.getLabel());  if (existing != null) {    if (existing.equals(stmt))     return;    logger.debug("Replacing statement at " + stmt.getLabel());  }  statementMap.put(stmt.getLabel(),stmt);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  WebDoc doc=null;  int AD_Menu_ID=WebUtil.getParameterAsInt(request,"AD_Menu_ID");  String fileName=WebUtil.getParameter(request,"File");  if (AD_Menu_ID > 0) {    doc=createParameterPage(wsc,AD_Menu_ID,0,0,0,0,null,null);  } else {    int AD_Process_ID=WebUtil.getParameterAsInt(request,"AD_Process_ID");    int AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");    int AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");    int AD_Record_ID=WebUtil.getParameterAsInt(request,"AD_Record_ID");    String columnName=WebUtil.getParameter(request,"columnName");    int AD_Tab_ID=WebUtil.getParameterAsInt(request,"AD_Tab_ID");    if (AD_Process_ID == 0) {      WebUtil.createErrorPage(request,response,this,"No Process");      return;    }    doc=createParameterPage(wsc,AD_Process_ID,AD_Window_ID,AD_Table_ID,AD_Record_ID,1,columnName,ws.curTab);  }  if (doc == null)   doc=WebDoc.createWindow("Process Not Found");  WebUtil.createResponse(request,response,this,null,doc,true);}  }
class C{  public TableLayout(Context context){  super(context);  initTableLayout();}  }
class C{  public void clear(){  this.parameters=null;}  }
class C{  public static MHRPayroll forValue(Properties ctx,String value){  if (Util.isEmpty(value,true)) {    return null;  }  int AD_Client_ID=Env.getAD_Client_ID(ctx);  final String key=AD_Client_ID + "#" + value;  MHRPayroll payroll=s_cacheValue.get(key);  if (payroll != null) {    return payroll;  }  final String whereClause=COLUMNNAME_Value + "=? AND AD_Client_ID IN (?,?)";  payroll=new Query(ctx,Table_Name,whereClause,null).setParameters(new Object[]{value,0,AD_Client_ID}).setOnlyActiveRecords(true).setOrderBy("AD_Client_ID DESC").first();  if (payroll != null) {    s_cacheValue.put(key,payroll);    s_cache.put(payroll.get_ID(),payroll);  }  return payroll;}  }
class C{  private static String detectKeyLoss(Object[] keys,int oldSize){  StringBuilder buf=new StringBuilder();  Set<Object> k=makeKeySet(keys);  if (k.size() != oldSize) {    buf.append("\nhashCode() and/or equals() have inconsistent implementation");    buf.append("\nKey set lost entries, now got ").append(k.size()).append(" instead of ").append(oldSize);    buf.append(". This can manifest itself as an apparent duplicate key.");  }  return buf.toString();}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String name=method.getName();  if (Object.class == method.getDeclaringClass()) {    if ("equals".equals(name)) {      Object obj=args[0];      return new Boolean(checkEquals(obj));    } else     if ("toString".equals(name))     return annotation.toString(); else     if ("hashCode".equals(name))     return new Integer(hashCode());  } else   if ("annotationType".equals(name) && method.getParameterTypes().length == 0)   return getAnnotationType();  MemberValue mv=annotation.getMemberValue(name);  if (mv == null)   return getDefault(name,method); else   return mv.getValue(classLoader,pool,method);}  }
class C{  public ManagementServiceImpl(final ManagerService managerService,final GenericDAO<ManagerRole,Long> managerRoleDao,final GenericDAO<Role,Long> roleDao,final GenericDAO<Shop,Long> shopDao,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  this.managerService=managerService;  this.managerRoleDao=managerRoleDao;  this.roleDao=roleDao;  this.shopDao=shopDao;  this.dtoFactory=dtoFactory;  this.adaptersRepository=adaptersRepository;  managerAssembler=DTOAssembler.newAssembler(ManagerDTOImpl.class,Manager.class);  roleAssembler=DTOAssembler.newAssembler(RoleDTOImpl.class,Role.class);  shopAssembler=DTOAssembler.newAssembler(ShopDTOImpl.class,Shop.class);}  }
class C{  @Override protected final boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion r,long startTime) throws EntryExistsException, ForceReattemptException, DataLocationException {  boolean sendReply=true;  InternalDistributedMember eventSender=getSender();  long lastModified=0L;  try {    result=doLocalPutAll(r,eventSender,lastModified);  } catch (  ForceReattemptException fre) {    sendReply(getSender(),getProcessorId(),dm,new ReplyException(fre),r,startTime);    return false;  }  if (sendReply) {    sendReply(getSender(),getProcessorId(),dm,null,r,startTime);  }  return false;}  }
class C{  public String addStepsForRemovingVolumesFromSRDFTargetCG(Workflow workflow,StorageSystem vplexSystem,List<URI> vplexVolumeURIs,String waitFor){  StringBuilder volumeList=new StringBuilder();  if (vplexVolumeURIs.isEmpty()) {    return waitFor;  }  for (  URI vplexVolumeURI : vplexVolumeURIs) {    Volume volume=dbClient.queryObject(Volume.class,vplexVolumeURI);    if (volumeList.length() != 0) {      volumeList.append(", ");    }    volumeList.append(volume.getLabel());  }  Workflow.Method executeMethod=removeVplexVolumesFromSRDFTargetCGMethod(vplexSystem.getId(),vplexVolumeURIs);  Workflow.Method rollbackMethod=removeVplexVolumesFromSRDFTargetCGMethod(vplexSystem.getId(),vplexVolumeURIs);  waitFor=workflow.createStep(null,"Remove VplexVolumes from Target CG: " + volumeList.toString(),waitFor,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),executeMethod,rollbackMethod,null);  return waitFor;}  }
class C{  public final void increaseWrittenMessages(long currentTime){  throughputCalculationLock.lock();  try {    writtenMessages++;    lastWriteTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.852 -0500",hash_original_method="30BB4C3892976F9E3644AD0D9DD12600",hash_generated_method="EB14FD867DDE50A2C3E7F0837BEBA57C") public LoggingSessionInputBuffer(final SessionInputBuffer in,final Wire wire){  super();  this.in=in;  this.wire=wire;}  }
class C{  public JunctionPseudoState(List<JunctionStateData<S,E>> junctions){  this.junctions=junctions;}  }
class C{  public synchronized PartitionerResponse partition(ReplDBMSHeader event,int taskId){  long minSize=Long.MAX_VALUE;  int partition=0;  for (  PartitionMetadata meta : partitionList) {    long size=meta.getCurrentSize();    if (size == 0) {      partition=meta.getPartitionNumber();      break;    } else     if (size < minSize) {      minSize=size;      partition=meta.getPartitionNumber();    }  }  return new PartitionerResponse(partition,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonetruecopytext.class,args);}  }
class C{  private void moveESPBefore(Instruction s,int desiredOffset){  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  Register ESP=phys.getESP();  int delta=desiredOffset - ESPOffset;  if (delta != 0) {    if (canModifyEFLAGS(s)) {      s.insertBefore(MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),VM.BuildFor32Addr ? IC(delta) : LC(delta)));    } else {      MemoryOperand M=MemoryOperand.BD(new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),Offset.fromIntSignExtend(delta),(byte)WORDSIZE,null,null);      s.insertBefore(MIR_Lea.create(IA32_LEA,new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),M));    }    ESPOffset=desiredOffset;  }}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(super.getMessage());  List<IParameter> list=iri.getParameters();  String id="Not Found!";  for (  IParameter p : list) {    if (p.getName().equals("openid.identity")) {      id=decode(p.getValue());      continue;    }    if (p.getName().equals("openid.return_to")) {      return_to=p.getValue();    }  }  return id;}  }
class C{  public static boolean matchesPattern(byte[] value,byte[] mask,byte[] pattern){  for (int i=0; i < value.length; i++) {    if (((value[i] ^ pattern[i]) & mask[i]) != 0) {      return false;    }  }  return true;}  }
class C{  public static String RTFEnc(String s){  int ln=s.length();  int firstEscIdx=-1;  int lastEscIdx=0;  int plusOutLn=0;  for (int i=0; i < ln; i++) {    char c=s.charAt(i);    if (c == '{' || c == '}' || c == '\\') {      if (firstEscIdx == -1) {        firstEscIdx=i;      }      lastEscIdx=i;      plusOutLn++;    }  }  if (firstEscIdx == -1) {    return s;  } else {    char[] esced=new char[ln + plusOutLn];    if (firstEscIdx != 0) {      s.getChars(0,firstEscIdx,esced,0);    }    int dst=firstEscIdx;    for (int i=firstEscIdx; i <= lastEscIdx; i++) {      char c=s.charAt(i);      if (c == '{' || c == '}' || c == '\\') {        esced[dst++]='\\';      }      esced[dst++]=c;    }    if (lastEscIdx != ln - 1) {      s.getChars(lastEscIdx + 1,ln,esced,dst);    }    return String.valueOf(esced);  }}  }
class C{  public static String primitiveTypeLabel(char typeChar){switch (typeChar) {case 'B':    return "byte";case 'C':  return "char";case 'D':return "double";case 'F':return "float";case 'I':return "int";case 'J':return "long";case 'S':return "short";case 'V':return "void";case 'Z':return "boolean";default :System.err.println("Unexpected class char " + typeChar);assert false;return "UNKNOWN";}}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof LongArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  LongArrayList other=(LongArrayList)otherObj;  if (size() != other.size())   return false;  long[] theElements=elements();  long[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  private int monthLength(int month,int year){  return isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];}  }
class C{  private String formatNode(BinaryNode<T> node){  BinaryNode<T> n;  StringBuilder response=new StringBuilder("(");  if ((n=node.getLeftSon()) != null) {    response.append(formatNode(n));  }  response.append(node.toString());  if ((n=node.getRightSon()) != null) {    response.append(formatNode(n));  }  response.append(")");  return response.toString();}  }
class C{  public EaseInOut(){}  }
class C{  public DoubleLinkedList<IPoint> compute(IPoint[] points){  int n=points.length;  DoubleLinkedList<IPoint> list=new DoubleLinkedList<IPoint>(IPoint.xy_sorter);  DoubleNode<IPoint> node=list.first();  for (  IPoint tdp : points) {    list.insert(tdp);  }  if (n < 3) {    DoubleLinkedList<IPoint> dl=new DoubleLinkedList<IPoint>(IPoint.xy_sorter);    for (    IPoint t : points) {      dl.insert(t);    }    return dl;  }  node=list.first();  PartialLinkedListHull upper=new PartialLinkedListHull(node.value(),node.next().value());  for (DoubleNode<IPoint> p=node.next().next(); p != null; p=p.next()) {    upper.add(p.value());    while (upper.hasThree() && upper.areLastThreeNonRight()) {      upper.removeMiddleOfLastThree();    }  }  DoubleNode<IPoint> last=list.last();  PartialLinkedListHull lower=new PartialLinkedListHull(last.value(),last.prev().value());  for (DoubleNode<IPoint> p=last.prev().prev(); p != null; p=p.prev()) {    lower.add(p.value());    while (lower.hasThree() && lower.areLastThreeNonRight()) {      lower.removeMiddleOfLastThree();    }  }  DoubleLinkedList<IPoint> upList=upper.points();  DoubleLinkedList<IPoint> downList=lower.points();  downList.removeFirst();  downList.removeLast();  DoubleNode<IPoint> lastOne=upList.last();  DoubleNode<IPoint> head=downList.first();  if (head != null) {    head.prev(last);    lastOne.next(head);  }  downList=null;  return upList;}  }
class C{  private void buildPutBusinessObjectDataStatusResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=new BusinessObjectDataStatusUpdateResponse();  response.setEntity(getHttpEntity(businessObjectDataStatusUpdateResponse));}  }
class C{  public synchronized int createRequest(String rawArgs,int action,CallbackContext callbackContext){  Request req=new Request(rawArgs,action,callbackContext);  requests.put(req.requestCode,req);  return req.requestCode;}  }
class C{  public static ChainingJsonParser<ChainingJsonParser<?>> parseJson(Reader reader){  return new ChainingJsonParser<ChainingJsonParser<?>>(reader);}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable decoded");  }}  }
class C{  protected void restoreNotationState(ExecutionContext context){  List<IHighlightingSupport.Action> actions=new ArrayList<IHighlightingSupport.Action>();  actions.add(new IHighlightingSupport.Highlight(context.getAllActiveStates(),HighlightingParameters.DEFAULT));  actions.add(new IHighlightingSupport.Flash(context.getExecutedElements(),HighlightingParameters.DEFAULT,FLASHTIME));  actions.add(new IHighlightingSupport.Highlight(context.getSuspendedElements(),SUSPENDED_PARAMS));  getHighlightingSupport().executeAsync(actions);}  }
class C{  public void saveCommitAuthor(String author){  myState.PREVIOUS_COMMIT_AUTHORS.remove(author);  while (myState.PREVIOUS_COMMIT_AUTHORS.size() >= PREVIOUS_COMMIT_AUTHORS_LIMIT) {    myState.PREVIOUS_COMMIT_AUTHORS.remove(myState.PREVIOUS_COMMIT_AUTHORS.size() - 1);  }  myState.PREVIOUS_COMMIT_AUTHORS.add(0,author);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void replaceHeaders(@NotNull List<String> lines){  for (int i=0; i < lines.size(); i++) {    String line=lines.get(i);    int ind=0;    while (ind < line.length() && line.charAt(ind) == '#') {      ind++;    }    if (ind < line.length() && line.charAt(ind) == ' ') {      if (0 < ind && ind <= 9) {        int endInd=line.length() - 1;        while (endInd >= 0 && line.charAt(endInd) == '#') {          endInd--;        }        line=line.substring(ind + 1,endInd + 1);        line="<h" + ind + ">"+ line+ "</h"+ ind+ ">";        lines.set(i,line);      }    }  }}  }
class C{  public PoolException(){  super();}  }
class C{  private void readData(ByteBuffer buf) throws IOException {  ISMatTag tag=new ISMatTag(buf);switch (tag.type) {case MatDataTypes.miCOMPRESSED:    readData(inflate(buf,tag.size));  break;case MatDataTypes.miMATRIX:int pos=buf.position();MLArray element=readMatrix(buf,true);if (element != null) {data.put(element.getName(),element);} else {int readedBytes=buf.position() - pos;int toread=tag.size - readedBytes;buf.position(buf.position() + toread);}int readedBytes=buf.position() - pos;int toread=tag.size - readedBytes;if (toread != 0) {throw new MatlabIOException("Matrix was not readed fully! " + toread + " remaining in the buffer.");}break;default :throw new MatlabIOException("Incorrect data tag: " + tag);}}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public static void mungeQuirks(String quirkId,String newId){  if (customQuirkMap == null) {    try {      QuirksHandler.initQuirksList();    } catch (    IOException e) {      System.out.println(e);    }  }  customQuirksDirty.set(true);  customQuirkMap.put(newId,canonQuirkMap.get(quirkId));}  }
class C{  public final void negate(){  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=-values[i][j];    }  }}  }
class C{  public static boolean createDirectory(String path){  log.info("Creating directory " + path);  try {    File f=new File(path);    if (!f.exists())     return f.mkdirs(); else     return true;  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public void stop(){  if (running) {    running=false;    thread.interrupt();    if (!server.isClosed()) {      server.close();    }  }}  }
class C{  public ImageDownloadService(String url,List targetList,int targetOffset,String targetKey){  this.targetList=targetList;  this.targetKey=targetKey;  this.targetOffset=targetOffset;  init(url);  setDuplicateSupported(true);}  }
class C{  private String generateAliasMap(Node.CustomTag n,String tagHandlerVar) throws JasperException {  TagVariableInfo[] tagVars=n.getTagVariableInfos();  String aliasMapVar=null;  boolean aliasSeen=false;  for (int i=0; i < tagVars.length; i++) {    String nameFrom=tagVars[i].getNameFromAttribute();    if (nameFrom != null) {      String aliasedName=n.getAttributeValue(nameFrom);      if (aliasedName == null)       continue;      if (!aliasSeen) {        out.printin("java.util.HashMap ");        aliasMapVar=tagHandlerVar + "_aliasMap";        out.print(aliasMapVar);        out.println(" = new java.util.HashMap();");        aliasSeen=true;      }      out.printin(aliasMapVar);      out.print(".put(");      out.print(quote(tagVars[i].getNameGiven()));      out.print(", ");      out.print(quote(aliasedName));      out.println(");");    }  }  return aliasMapVar;}  }
class C{  public static void jumpToCurrentSelection(Spec spec){  IResource moduleResource=ResourceHelper.getResourceByModuleName(spec.getModuleToShow());  if (moduleResource != null && moduleResource.exists()) {    IDocument document=null;    FileEditorInput fileEditorInput=new FileEditorInput((IFile)moduleResource);    FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();    try {      fileDocumentProvider.connect(fileEditorInput);      document=fileDocumentProvider.getDocument(fileEditorInput);      if (document != null) {        IMarker marker=spec.getMarkersToShow()[spec.getCurrentSelection()];        Position pos=EditorUtil.getMarkerPosition(marker);        int offset=pos.getOffset();        int length=pos.getLength();        IEditorPart editor=UIHelper.openEditor(OpenSpecHandler.TLA_EDITOR_CURRENT,new FileEditorInput((IFile)moduleResource));        if (editor != null) {          ITextEditor textEditor;          if (editor instanceof ITextEditor) {            textEditor=(ITextEditor)editor;          } else {            textEditor=(ITextEditor)editor.getAdapter(ITextEditor.class);          }          if (textEditor == null && editor instanceof MultiPageEditorPart) {            IEditorPart[] editors=((MultiPageEditorPart)editor).findEditors(editor.getEditorInput());            for (int i=0; i < editors.length; i++) {              if (editors[i] instanceof ITextEditor) {                textEditor=(ITextEditor)editors[i];              }            }          }          if (textEditor != null) {            if (editor instanceof MultiPageEditorPart) {              ((MultiPageEditorPart)editor).setActiveEditor(textEditor);            }            textEditor.selectAndReveal(offset,length);          }        }      }    } catch (    CoreException e1) {      Activator.getDefault().logDebug("Error going to a module location. This is a bug.");    } finally {      fileDocumentProvider.disconnect(fileEditorInput);    }  }}  }
class C{  public boolean createPDF(File file){  String fileName=null;  URI uri=null;  try {    if (file == null)     file=File.createTempFile("ReportEngine",".pdf");    fileName=file.getAbsolutePath();    uri=file.toURI();    if (file.exists())     file.delete();  } catch (  Exception e) {    log.log(Level.SEVERE,"file",e);    return false;  }  log.fine(uri.toString());  try {    if (m_layout == null)     layout();    ArchiveEngine.get().archive(m_layout,m_info);    Document.getPDFAsFile(fileName,m_layout.getPageable(false));  } catch (  Exception e) {    log.log(Level.SEVERE,"PDF",e);    return false;  }  File file2=new File(fileName);  log.info(file2.getAbsolutePath() + " - " + file2.length());  return file2.exists();}  }
class C{  synchronized void stop(){  if (DEBUG)   Log.v(TAG,"stop:mStatredCount=" + mStatredCount);  mStatredCount--;  if ((mEncoderCount > 0) && (mStatredCount <= 0)) {    mMediaMuxer.stop();    mMediaMuxer.release();    mIsStarted=false;    if (DEBUG)     Log.v(TAG,"MediaMuxer stopped:");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void atomicEv(final Packet p){  if (Cfg.DEBUG) {    Check.ensures(!evidences.containsKey(p.getId()),"evidence already mapped");  }  final byte[] additional=p.getAdditional();  final byte[] data=p.getData();  int len=p.getDataLength();  final Evidence evidence=new Evidence(p.getType());  evidence.createEvidence(additional);  evidence.writeEvidence(data,0,len);  evidence.close();}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public MatrixStack rotate(Vector3D rotateVector,double angle){  return rotate(new Rotation(rotateVector,angle));}  }
class C{  public static AxSf generateRegisterNumber(Session session,Integer bookID,AxSf axsfNew,ScrRegstate scrregstate,ScrOfic scrofic,String entidad) throws BookException, HibernateException, SQLException, Exception {  InvesicresConf invesicresConf=ConfiguratorInvesicres.getInstance(entidad).getInvesicresConf();  int numeration=getNumeration(session,scrregstate.getIdocarchhdr().getId(),scrofic,scrregstate);  if (numeration == ISicresKeys.SCR_NUMERATION_CENTRAL) {    createCentralNumeration(bookID,axsfNew,invesicresConf.getFormatType0(),entidad);  } else   if (numeration == ISicresKeys.SCR_NUMERATION_OFIC) {    createOficNumeration(bookID,scrofic,axsfNew,invesicresConf.getFormatType2(),entidad);  } else {    throw new BookException(BookException.ERROR_NUMERATION_NOT_SUPPORTED);  }  return axsfNew;}  }
class C{  @Override public boolean supportsAlterTableWithDropColumn(){  debugCodeCall("supportsAlterTableWithDropColumn");  return true;}  }
class C{  public String classifiersTipText(){  return "The classifiers to be chosen from.";}  }
class C{  public static ValueTime parse(String s){  try {    return fromNanos(DateTimeUtils.parseTimeNanos(s,0,s.length(),false));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIME",s);  }}  }
class C{  public Query reqB(Query q) throws Exception {  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.add(q,BooleanClause.Occur.MUST);  bq.add(new TermQuery(new Term(FIELD,"w1")),BooleanClause.Occur.SHOULD);  return bq.build();}  }
class C{  public static AggregateParams compileAggregateParams(List<String> outputTags,List<String> outputFields,List<String> groupbys,List<String> functions,List<String> sortFieldOrders) throws IllegalArgumentException, AggregateFunctionNotSupportedException {  AggregateParams aggParams=new AggregateParams();  for (  String groupby : groupbys) {    if (!outputTags.contains(groupby) && !outputFields.contains(groupby)) {      throw new IllegalArgumentException(groupby + ", All gb fields should appear in outputField list or outputTag list");    }  }  for (  String function : functions) {    AggregateFunctionTypeMatcher m=AggregateFunctionType.count.matcher(function);    if (m.find()) {      aggParams.setCounting(true);      continue;    }    m=AggregateFunctionType.sum.matcher(function);    if (m.find()) {      if (!outputFields.contains(m.field())) {        throw new IllegalArgumentException(m.field() + ", All summary function fields should appear in outputField list");      }      aggParams.getSumFunctionFields().add(m.field());      continue;    }    throw new AggregateFunctionNotSupportedException("function " + function + " is not supported, only count, sum aggregate functions are now supported");  }  List<String> groupbyFields=new ArrayList<String>();  groupbyFields.add(Aggregator.GROUPBY_ROOT_FIELD_NAME);  groupbyFields.addAll(groupbys);  aggParams.setGroupbyFields(groupbyFields);  boolean byKeySorting=false;  for (  String sortFieldOrder : sortFieldOrders) {    AggregateParams.SortFieldOrder sfo=SortFieldOrderType.matchAll(sortFieldOrder);    if (sfo == null) {      throw new IllegalArgumentException(sortFieldOrder + ", All sort field order should be <field>=(asc|desc)");    }    if (sfo.getField().equals(AggregateParams.SortFieldOrder.SORT_BY_AGGREGATE_KEY)) {      byKeySorting=true;    } else     if (!sfo.getField().equals(AggregateParams.SortFieldOrder.SORT_BY_COUNT)) {      if (!groupbys.contains(sfo.getField()) && !aggParams.getSumFunctionFields().contains(sfo.getField())) {        throw new IllegalArgumentException(sortFieldOrder + ", All sort field order should appear in gb or function fields");      }    }    aggParams.getSortFieldOrders().add(sfo);  }  if (!byKeySorting) {    aggParams.getSortFieldOrders().add(new AggregateParams.SortFieldOrder(AggregateParams.SortFieldOrder.SORT_BY_AGGREGATE_KEY,true));  }  return aggParams;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ImmutableMap<String,Object> createFormFieldError(String message,String formFieldName){  return ImmutableMap.<String,Object>of("status",Status.ERROR.toString(),"message",checkNotNull(message,"message"),"field",checkNotNull(formFieldName,"formFieldName"),"results",ImmutableList.of());}  }
class C{  public void JoinSavedBaggageIfPossible(JoinPoint.StaticPart jp){  if (baggage != null) {    XTraceReport.entering(jp);    Baggage.join(baggage);    XTraceReport.left(jp);    baggage=null;  }}  }
class C{  private void updateStoragePoolRequiredCapacityMap(Map<URI,Long> storagePoolRequiredCapacity,URI storagePoolUri,long requiredCapacity){  if (storagePoolRequiredCapacity.get(storagePoolUri) == null) {    storagePoolRequiredCapacity.put(storagePoolUri,requiredCapacity);  } else {    long updatedRequiredCapacity=storagePoolRequiredCapacity.get(storagePoolUri) + requiredCapacity;    storagePoolRequiredCapacity.put(storagePoolUri,updatedRequiredCapacity);  }}  }
class C{  protected void sendEntriesToSwitch(long switchId){  IOFSwitch sw=floodlightProvider.getSwitch(switchId);  if (sw == null)   return;  String stringId=sw.getStringId();  if ((entriesFromStorage != null) && (entriesFromStorage.containsKey(stringId))) {    Map<String,OFFlowMod> entries=entriesFromStorage.get(stringId);    List<String> sortedList=new ArrayList<String>(entries.keySet());    Collections.sort(sortedList,new FlowModSorter(stringId));    for (    String entryName : sortedList) {      OFFlowMod flowMod=entries.get(entryName);      if (flowMod != null) {        if (log.isDebugEnabled()) {          log.debug("Pushing static entry {} for {}",stringId,entryName);        }        writeFlowModToSwitch(sw,flowMod);      }    }  }}  }
class C{  protected void createSimulationPopulation(){  final IModel model=getModel();  SimulationPopulation pop=(SimulationPopulation)this.getMicroPopulation(model);  if (pop == null) {    pop=new SimulationPopulation(this,model);    setAttribute(model.getName(),pop);    pop.initializeFor(scope);  }}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat){  this(defaultFormat,displayFormat,null);}  }
class C{  @Override public void awake(){  this.userName=this.bot.memory().getProperty("Facebook.user");  if (this.userName == null) {    this.userName="";  }  this.token=this.bot.memory().getProperty("Facebook.token");  if (this.token == null) {    this.token="";  }  if (!this.token.isEmpty()) {    setIsEnabled(true);  }  this.appOauthKey=this.bot.memory().getProperty("Facebook.appOauthKey");  if (this.appOauthKey != null && !this.appOauthKey.isEmpty()) {    this.appOauthKey=Utils.decrypt(Utils.KEY,this.appOauthKey);  }  if (this.appOauthKey == null) {    this.appOauthKey="";  }  this.appOauthSecret=this.bot.memory().getProperty("Facebook.appOauthSecret");  if (this.appOauthSecret != null && !this.appOauthSecret.isEmpty()) {    this.appOauthSecret=Utils.decrypt(Utils.KEY,this.appOauthSecret);  }  if (this.appOauthSecret == null) {    this.appOauthSecret="";  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader",e);    }  }}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  public String toStringX(Properties ctx){  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Client_ID")).append("=").append(getClientName()).append(" - ").append(Msg.translate(ctx,"AD_Org_ID")).append("=").append(getOrgName());  return sb.toString();}  }
class C{  public T target(String value){  return attr("target",value);}  }
class C{  public static JdbcConnectionPool create(String url,String user,String password){  JdbcDataSource ds=new JdbcDataSource();  ds.setURL(url);  ds.setUser(user);  ds.setPassword(password);  return new JdbcConnectionPool(ds);}  }
class C{  public void turnLeft(){switch (direction) {case NORTH:    direction=Direction.WEST;  break;case SOUTH:direction=Direction.EAST;break;case EAST:direction=Direction.NORTH;break;case WEST:direction=Direction.SOUTH;break;default :throw new IllegalStateException();}remainingMoves--;}  }
class C{  public void disconnectPort(XNetInterface i){  if (destination != i) {    log.warn("disconnectPort: disconnect called from non-connected PortController");  }  destination=null;  connected=false;}  }
class C{  public void initialize(){  TextureState ts=new TextureState();  ts.setEnabled(false);  setRenderState(ts);  for (int i=0; i < toolList.size(); ++i) {    ToolState state=toolList.get(i);    addTool(state,false);  }  zBufferState=new ZBufferState();  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);  zBufferState.setEnabled(true);  setRenderState(zBufferState);}  }
class C{  public static boolean isEarthInstalled(Context context){  List<ResolveInfo> infos=context.getPackageManager().queryIntentActivities(new Intent().setType(SyncUtils.KMZ_MIME_TYPE),PackageManager.MATCH_DEFAULT_ONLY);  for (  ResolveInfo info : infos) {    if (info.activityInfo != null && info.activityInfo.packageName != null && info.activityInfo.packageName.equals(GOOGLE_EARTH_PACKAGE)) {      try {        PackageInfo packageInfo=context.getPackageManager().getPackageInfo(info.activityInfo.packageName,0);        return packageInfo.versionCode >= GOOGLE_EARTH_MIN_VERSION_CODE;      } catch (      NameNotFoundException e) {        Log.e(TAG,"Unable to get google earth package info",e);        return false;      }    }  }  return false;}  }
class C{  public void polynomialMutate(EvolutionState state,MersenneTwisterFast random,double eta_m,boolean alternativePolynomialVersion,boolean mutationIsBounded){  FloatVectorSpecies s=(FloatVectorSpecies)species;  double[] ind=genome;  double rnd, delta1, delta2, mut_pow, deltaq;  double y, yl, yu, val, xy;  double y1;  for (int j=0; j < ind.length; j++) {    if (random.nextBoolean(s.mutationProbability[j])) {      y1=y=ind[j];      yl=s.minGene(j);      yu=s.maxGene(j);      delta1=(y - yl) / (yu - yl);      delta2=(yu - y) / (yu - yl);      int totalTries=s.outOfBoundsRetries;      int tries=0;      for (tries=0; tries < totalTries || totalTries == 0; tries++) {        rnd=(random.nextDouble());        mut_pow=1.0 / (eta_m + 1.0);        if (rnd <= 0.5) {          xy=1.0 - delta1;          val=2.0 * rnd + (alternativePolynomialVersion ? (1.0 - 2.0 * rnd) * (Math.pow(xy,(eta_m + 1.0))) : 0.0);          deltaq=Math.pow(val,mut_pow) - 1.0;        } else {          xy=1.0 - delta2;          val=2.0 * (1.0 - rnd) + (alternativePolynomialVersion ? 2.0 * (rnd - 0.5) * (Math.pow(xy,(eta_m + 1.0))) : 0.0);          deltaq=1.0 - (Math.pow(val,mut_pow));        }        y1=y + deltaq * (yu - yl);        if (!mutationIsBounded || (y1 >= yl && y1 <= yu))         break;      }      if (totalTries != 0 && tries == totalTries) {        y1=(double)(s.minGene(j) + random.nextDouble(true,true) * (s.maxGene(j) - s.minGene(j)));        s.outOfRangeRetryLimitReached(state);      }      ind[j]=y1;    }  }}  }
class C{  public static CategoryFragment newInstance(long categoryId,String name,String type){  Bundle args=new Bundle();  args.putLong(CATEGORY_ID,categoryId);  args.putString(CATEGORY_NAME,name);  args.putString(TYPE,type);  args.putString(SEARCH_QUERY,null);  CategoryFragment fragment=new CategoryFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public RunOptionsBuilder withEnvironmentId(String environmentId){  this.environmentId=environmentId;  return this;}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public void enterNextPlugin(){  if (this.pluginIterator.hasNext()) {    this.plugin=pluginIterator.next().createPlugin();    this.plugin.init(this,sw,timer);    this.plugin.enterPlugin();  } else {    setState(new WaitInitialRoleState());  }}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  @Override protected void fireAgentRemoved(final IAgent agent){  super.fireAgentRemoved(agent);  runner.remove((SimulationAgent)agent);}  }
class C{  public int checksum_ts(){  return calculateChecksum(compile_checksum.toString() + compile_checksum_ts.toString());}  }
class C{  public void incResultsReceived(){  this._stats.incInt(_resultsReceived,1);  aggregateStats.incResultsReceived();}  }
class C{  public boolean isDropShip(){  Object oo=get_Value(COLUMNNAME_IsDropShip);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static final File urlToFile(File basePath,String url){  String subUrl;  if (url.startsWith("http") || url.startsWith("ftp")) {    int indexOf=url.indexOf("//");    if (indexOf == -1) {      subUrl=url;    } else {      subUrl=url.substring(indexOf + 2);    }  } else   if (url.startsWith("\\\\")) {    subUrl=url.substring(2);  } else   if (url.length() > 2 && url.charAt(1) == ':') {    subUrl=url.substring(2);  } else {    subUrl=url;  }  subUrl=subUrl.replaceAll("\\\\+","/").replaceAll(File.pathSeparator,"/");  subUrl=subUrl.replace("/",File.separator);  subUrl=StringUtils.strip(subUrl,File.separator);  if (basePath != null) {    return new File(basePath,subUrl);  } else {    return new File(subUrl);  }}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  if (mZoomIn != null) {    mZoomIn.removeZoomListener(listener);    mZoomOut.removeZoomListener(listener);  }  mTouchHandler.removeZoomListener(listener);}  }
class C{  @Override public Point computeSize(final int wHint,final int hHint,final boolean flag){  if (wHint == -1) {    final int[] currentIndicies=coolBar.getWrapIndices();    final int[] allIndicies=new int[coolBar.getItemCount()];    for (int i=0; i < allIndicies.length; i++) {      allIndicies[i]=i;    }    coolBar.setWrapIndices(allIndicies);    final Point p=super.computeSize(wHint,hHint,flag);    coolBar.setWrapIndices(currentIndicies);    return p;  } else {    return super.computeSize(wHint,hHint,flag);  }}  }
class C{  public long tryOptimisticRead(){  long s;  return (((s=state) & WBIT) == 0L) ? (s & SBITS) : 0L;}  }
class C{  public NullInfoRegistry add(NullInfoRegistry other){  if ((other.tagBits & NULL_FLAG_MASK) == 0) {    return this;  }  this.tagBits|=NULL_FLAG_MASK;  this.nullBit1|=other.nullBit1;  this.nullBit2|=other.nullBit2;  this.nullBit3|=other.nullBit3;  this.nullBit4|=other.nullBit4;  if (other.extra != null) {    if (this.extra == null) {      this.extra=new long[extraLength][];      for (int i=2, length=other.extra[2].length; i < extraLength; i++) {        System.arraycopy(other.extra[i],0,(this.extra[i]=new long[length]),0,length);      }    } else {      int length=this.extra[2].length, otherLength=other.extra[2].length;      if (otherLength > length) {        for (int i=2; i < extraLength; i++) {          System.arraycopy(this.extra[i],0,(this.extra[i]=new long[otherLength]),0,length);          System.arraycopy(other.extra[i],length,this.extra[i],length,otherLength - length);        }      } else       if (otherLength < length) {        length=otherLength;      }      for (int i=2; i < extraLength; i++) {        for (int j=0; j < length; j++) {          this.extra[i][j]|=other.extra[i][j];        }      }    }  }  return this;}  }
class C{  protected Object notifyInternal(final ProceedingJoinPoint pjp) throws Throwable {  final Object[] args=pjp.getArgs();  final Shop shop=(Shop)args[0];  final String email=(String)args[1];  final Map<String,Object> registrationData=(Map<String,Object>)args[2];  registrationData.put("email",email);  final RegistrationMessage registrationMessage=new RegistrationMessageImpl();  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  if (cart != null) {    registrationMessage.setLocale(cart.getCurrentLocale());  }  registrationMessage.setMailTemplatePathChain(themeService.getMailTemplateChainByShopId(shop.getShopId()));  registrationMessage.setTemplateName("adm-newsletter-request");  final String emailTo=determineFromEmail(shop);  registrationMessage.setEmail(emailTo);  registrationMessage.setShopMailFrom(emailTo);  registrationMessage.setShopId(shop.getShopId());  registrationMessage.setShopCode(shop.getCode());  registrationMessage.setShopName(shop.getName());  registrationMessage.setShopUrl(transformShopUrls(shop));  registrationMessage.setAdditionalData(registrationData);  sendNotification(registrationMessage);  ShopCodeContext.getLog(this).info("Newsletter message was send to queue {}",registrationMessage);  return pjp.proceed();}  }
class C{  public static void v(String tag,String s,Throwable e){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e);}  }
class C{  public void test_isolatedReset(){  Journal store=(Journal)getStore();  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final IAllocationContext isolated=bs.newAllocationContext(true);    final long addr=bs.write(randomData(78));    final long addr2=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    bs.delete(addr);    final long addr3=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr3));    bs.delete(addr2,isolated);    final long addr4=bs.write(randomData(78),isolated);    assertTrue(bs.inWriteCache(addr4));    bs.abort();    assertTrue(bs.inWriteCache(addr));    assertFalse(bs.inWriteCache(addr3));    assertTrue(bs.inWriteCache(addr4));    try {      bs.read(addr3);      fail("Exception expected");    } catch (    IllegalArgumentException e) {    }    bs.detachContext(isolated);    store.commit();    assertTrue(bs.isCommitted(addr));    assertTrue(bs.isCommitted(addr4));  }  finally {    store.destroy();  }}  }
class C{  public AppEngineFlexibleStage(@NotNull CloudSdkAppEngineHelper helper,@NotNull LoggingHandler loggingHandler,@NotNull Path deploymentArtifactPath,@NotNull AppEngineDeploymentConfiguration deploymentConfiguration){  this.helper=helper;  this.loggingHandler=loggingHandler;  this.deploymentArtifactPath=deploymentArtifactPath;  this.deploymentConfiguration=deploymentConfiguration;}  }
class C{  private static int computePointerSize(){  String bits=System.getProperty("sun.arch.data.model");  if (bits.equals("32")) {    return 4;  } else   if (bits.equals("64")) {    return 8;  } else {    System.err.println("Unknown value for sun.arch.data.model - assuming 32 bits");    return 4;  }}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public Aggregate(int type,Expression on,Select select,boolean distinct){  this.type=type;  this.on=on;  this.select=select;  this.distinct=distinct;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.241 -0400",hash_original_method="2107F052F31CECF3C9BB5E0EAD7C1BC1",hash_generated_method="2107F052F31CECF3C9BB5E0EAD7C1BC1") Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public int firstBadVersion(int n){  int l=1;  int r=n;  while (l < r) {    int m=l + (r - l) / 2;    if (!isBadVersion(m)) {      l=m + 1;    } else {      r=m;    }  }  return l;}  }
class C{  public BurlapServiceException(String message,String code,Object detail){  super(message);  this.code=code;  this.detail=detail;}  }
class C{  public GroovyFieldDoc[] fields(){  Collections.sort(fields);  return fields.toArray(new GroovyFieldDoc[fields.size()]);}  }
class C{  boolean match(String name){  return copyAll || names.contains(name);}  }
class C{  public static double pointSegDistance(Geo a,Geo b,Geo c){  Geo i=segIntersection(a,b,c);  return (i == null) ? -1 : c.distance(i);}  }
class C{  public InsertContact phoneType(int phoneType){  mIntent.putExtra(Insert.PHONE_TYPE,phoneType);  return this;}  }
class C{  public Instrumenter attachGenerationalDistanceCollector(){  includeGenerationalDistance=true;  return this;}  }
class C{  public void delete(){  m_Instances=new ArrayList<Instance>();}  }
class C{  public ServerSocketBar create(InetAddress host,int port) throws IOException, GeneralSecurityException {  SSLServerSocketFactory ssFactory=null;  if (_keyStore != null) {    SSLContext sslContext=SSLContext.getInstance(_sslContext);    KeyManagerFactory kmf=KeyManagerFactory.getInstance(keyManagerFactory());    kmf.init(_keyStore,keyStorePassword().toCharArray());    sslContext.init(kmf.getKeyManagers(),null,null);    SSLEngine engine=sslContext.createSSLEngine();    engine.setEnabledProtocols(enabledProtocols(engine.getSupportedProtocols()));    ssFactory=sslContext.getServerSocketFactory();  } else {    ssFactory=createAnonymousServerFactory(host,port);  }  ServerSocket serverSocket;  int listen=100;  if (host == null)   serverSocket=ssFactory.createServerSocket(port,listen); else   serverSocket=ssFactory.createServerSocket(port,listen,host);  SSLServerSocket sslServerSocket=(SSLServerSocket)serverSocket;  if (_cipherSuites != null) {    sslServerSocket.setEnabledCipherSuites(_cipherSuites);  }  if (_cipherSuitesForbidden != null) {    String[] cipherSuites=sslServerSocket.getEnabledCipherSuites();    if (cipherSuites == null)     cipherSuites=sslServerSocket.getSupportedCipherSuites();    ArrayList<String> cipherList=new ArrayList<String>();    for (    String cipher : cipherSuites) {      if (!isCipherForbidden(cipher,_cipherSuitesForbidden)) {        cipherList.add(cipher);      }    }    cipherSuites=new String[cipherList.size()];    cipherList.toArray(cipherSuites);    sslServerSocket.setEnabledCipherSuites(cipherSuites);  }  sslServerSocket.setEnabledProtocols(enabledProtocols(sslServerSocket.getSupportedProtocols()));  if ("required".equals(_verifyClient))   sslServerSocket.setNeedClientAuth(true); else   if ("optional".equals(_verifyClient))   sslServerSocket.setWantClientAuth(true);  return new ServerSocketWrapper(serverSocket);}  }
class C{  public void circulizeWay(int[] c,Way way){  if ((way.getNodes() == null) || (way.getNodes().size() < 3)) {    Log.d("StorageDelegator","circulize way " + way.getOsmId() + " has no nodes or less than 3!");    return;  }  dirty=true;  try {    HashSet<Node> nodes=new HashSet<Node>(way.getNodes());    Coordinates coords[]=nodeListToCooardinateArray(new ArrayList<Node>(nodes));    for (    Node nd : nodes) {      undo.save(nd);    }    int width=Application.mainActivity.getMap().getWidth();    int height=Application.mainActivity.getMap().getHeight();    BoundingBox box=Application.mainActivity.getMap().getViewBox();    Coordinates center=new Coordinates(GeoMath.lonE7ToX(width,box,c[1]),GeoMath.latE7ToY(height,width,box,c[0]));    double r=0.0f;    for (    Coordinates p : coords) {      Log.d("StorageDelegator","r=" + Math.sqrt((p.x - center.x) * (p.x - center.x) + (p.y - center.y) * (p.y - center.y)));      r=r + Math.sqrt((p.x - center.x) * (p.x - center.x) + (p.y - center.y) * (p.y - center.y));    }    r=r / coords.length;    for (    Coordinates p : coords) {      double ratio=r / Math.sqrt((p.x - center.x) * (p.x - center.x) + (p.y - center.y) * (p.y - center.y));      p.x=(float)((p.x - center.x) * ratio) + center.x;      p.y=(float)((p.y - center.y) * ratio) + center.y;    }    int i=0;    for (    Node nd : nodes) {      nd.setLon(GeoMath.xToLonE7(width,box,coords[i].x));      nd.setLat(GeoMath.yToLatE7(height,width,box,coords[i].y));      apiStorage.insertElementSafe(nd);      nd.updateState(OsmElement.STATE_MODIFIED);      i++;    }    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public void test_setLongLjava_lang_ObjectIJ(){  long[] x={0};  boolean thrown=false;  try {    Array.setLong(x,0,1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getLong(x,0));  try {    Array.setLong(new Object(),0,9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setLong(x,4,9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setLong(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  private DocLine[] loadLines(MBankStatement bs){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MBankStatementLine[] lines=bs.getLines(false);  for (int i=0; i < lines.length; i++) {    MBankStatementLine line=lines[i];    DocLine_Bank docLine=new DocLine_Bank(line,this);    if (i == 0)     setDateAcct(line.getDateAcct());    MPeriod period=MPeriod.get(getCtx(),line.getDateAcct(),line.getAD_Org_ID());    if (period != null && period.isOpen(DOCTYPE_BankStatement,line.getDateAcct()))     docLine.setC_Period_ID(period.getC_Period_ID());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public static boolean isNative(int flags){  return (flags & NATIVE) != 0;}  }
class C{  public DMLStatementNode flatten(DMLStatementNode stmt) throws StandardException {  ResultSetNode resultSet=stmt.getResultSetNode();  if (resultSet.getNodeType() == NodeTypes.SELECT_NODE) {    selectStack=new Stack<>();    currentSelectNode=null;    selectNode((SelectNode)resultSet,stmt);  }  return stmt;}  }
class C{  @Override public List<Proxy> select(URI uri){  ArrayList<Proxy> proxies=new ArrayList<Proxy>();  proxies.add(Proxy.NO_PROXY);  return proxies;}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR:  return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public void checkComputeSignificanceDoesntAlterAverage(int algNumber) throws Exception {  MutualInfoCalculatorMultiVariateKraskov miCalc=getNewCalc(algNumber);  String kraskov_K="4";  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);  super.testComputeSignificanceDoesntAlterAverage(miCalc,2,100);}  }
class C{  public static IndexType createNonUnique(boolean persistent,boolean hash,boolean spatial){  IndexType type=new IndexType();  type.persistent=persistent;  type.hash=hash;  type.spatial=spatial;  return type;}  }
class C{  protected void tagHandlerSuffix() throws Exception {  writer.fwrite("public String getDebugString() {\n");  writer.indent();  writer.fwrite("return \"id: \" + this.getId() + \" class: \" + this.getClass().getName();\n");  writer.outdent();  writer.fwrite("}\n\n");  writer.outdent();  writer.fwrite("}\n");}  }
class C{  public void log(){  log.info(toString());  MPInstanceLog[] pil=getLog();  for (int i=0; i < pil.length; i++)   log.info(i + "=" + pil[i]);}  }
class C{  public static void isNull(Object obj,String message,Object... params) throws AssertException {  if (obj != null) {    throw new AssertException(ErrorCodeDef.NOT_NULL_20005,message,params);  }}  }
class C{  public static GraphRequest newUploadStagingResourceWithImageRequest(AccessToken accessToken,Bitmap image,Callback callback){  Bundle parameters=new Bundle(1);  parameters.putParcelable(STAGING_PARAM,image);  return new GraphRequest(accessToken,MY_STAGING_RESOURCES,parameters,HttpMethod.POST,callback);}  }
class C{  public EsriLayer(){}  }
class C{  static void clearResourceSet(final ResourceSet resourceSet){  boolean wasDeliver=resourceSet.eDeliver();  try {    resourceSet.eSetDeliver(false);    for (final Iterator<Resource> itr=resourceSet.getResources().iterator(); itr.hasNext(); ) {      final Resource resource=itr.next();      final URI uri=resource.getURI();      if (!isN4Scheme(uri)) {        itr.remove();      } else {        LOGGER.info("Intentionally skipping the removal of N4 resource: " + uri);      }    }  }  finally {    resourceSet.eSetDeliver(wasDeliver);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.177 -0500",hash_original_method="D71FCA65B3027CF0021F4CC3EAA91DA7",hash_generated_method="50B6C7716102FD45B7927F775F089DAE") public String encodeBody(){  return entityTag;}  }
class C{  protected boolean matches(String phrase){  String canonical=phrase.toLowerCase(Locale.US);  for (int i=0; i < ban.size(); i++) {    String badWord=ban.get(i);    if (canonical.indexOf(badWord) != -1)     return true;  }  return false;}  }
class C{  public static int checkVersion(Context context){  SharedPreferences prefs=context.getSharedPreferences(PREFS_NAME,Context.MODE_PRIVATE);  int versionLastRun=prefs.getInt(SAVED_VERSION_CODE,-1);  int currentVersion=getVersionCode(context);  if (currentVersion != versionLastRun) {    SharedPreferences.Editor editor=prefs.edit();    editor.putInt(SAVED_VERSION_CODE,currentVersion).apply();  }  return versionLastRun;}  }
class C{  public Spider clearPipeline(){  pipelines=new ArrayList<Pipeline>();  return this;}  }
class C{  public static Document createColorOnlyDocument(Color color){  assert (color != null);  int imgWidth=64;  BufferedImage img=new BufferedImage(imgWidth,imgWidth,BufferedImage.TYPE_INT_RGB);  Graphics2D g=(Graphics2D)img.getGraphics();  g.setColor(color);  g.fillRect(0,0,imgWidth,imgWidth);  ColorLayout scd=new ColorLayout();  scd.extract(img);  String sc=scd.getStringRepresentation();  logger.fine("Extraction from image finished");  Document doc=new Document();  if (sc != null)   doc.add(new StringField(DocumentBuilder.FIELD_NAME_COLORLAYOUT,sc,Field.Store.YES));  return doc;}  }
class C{  public Html download(String url){  return download(url,null);}  }
class C{  public HeaderCard(String key,BigInteger value,String comment) throws HeaderCardException {  this(key,dblString(new BigDecimal(value),spaceAvailableForValue(key)),comment,false,false);}  }
class C{  public static String encodeURLString(String stringToEncode){  if (stringToEncode == null) {    return "";  }  try {    return java.net.URLEncoder.encode(stringToEncode,"UTF-8").replace("+",ENCODED_SPACE_CHARACTER);  } catch (  UnsupportedEncodingException e) {    throw new WalletSaveException("Could not encode string '" + stringToEncode + "'",e);  }}  }
class C{  public void eat(char c){  if (peek() != c)   throw new RuntimeException("Parser expected '" + c + "' but got '"+ peek()+ "'.");  seek();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.230 -0500",hash_original_method="5314B6B2031A7AB7127460792C15BEA8",hash_generated_method="2AA0E4E4C205535EE1A0DA0AD75AB630") public void onPageStarted(WebView view,String url,Bitmap favicon){}  }
class C{  public boolean evaluate(Node contextNode,Node xpathnode,String str,Node namespaceNode) throws TransformerException {  XObject object=eval(contextNode,xpathnode,str,namespaceNode);  return object.bool();}  }
class C{  public DigitsKeyListener(){  this(false,false);}  }
class C{  public MatchQueryBuilder fuzziness(Object fuzziness){  this.fuzziness=Fuzziness.build(fuzziness);  return this;}  }
class C{  protected void addItem(String action,String text,ImageIcon icon){  add(makeItem(action,text,icon));}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public Finished(HandshakeIODataStream in,int length) throws IOException {  if (length == 12 || length == 36) {    data=in.read(length);    this.length=data.length;  } else {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect Finished");  }}  }
class C{  static Object promoteToInteger(Object wrapper){  if (wrapper instanceof Character)   return new Integer(((Character)wrapper).charValue()); else   if ((wrapper instanceof Byte) || (wrapper instanceof Short))   return new Integer(((Number)wrapper).intValue());  return wrapper;}  }
class C{  protected void installKeyboardActions(JLabel l){  int dka=l.getDisplayedMnemonic();  if (dka != 0) {    Component lf=l.getLabelFor();    if (lf != null) {      ActionMap actionMap=l.getActionMap();      actionMap.put(PRESS,ACTION_PRESS);      InputMap inputMap=SwingUtilities.getUIInputMap(l,JComponent.WHEN_IN_FOCUSED_WINDOW);      if (inputMap == null) {        inputMap=new ComponentInputMapUIResource(l);        SwingUtilities.replaceUIInputMap(l,JComponent.WHEN_IN_FOCUSED_WINDOW,inputMap);      }      inputMap.clear();      inputMap.put(KeyStroke.getKeyStroke(dka,ActionEvent.SHIFT_MASK + ActionEvent.CTRL_MASK,false),PRESS);    }  }}  }
class C{  public static String encrypt(String text) throws GeneralSecurityException {  return new String(encrypt(text.getBytes()));}  }
class C{  public boolean isEnableBatchPicking(){  return this.enableBatchPicking;}  }
class C{  public String debugDump(){  stringRep="";  Object obj=this.first();  if (obj == null)   return "<null>";  sprint("listName:");  sprint(listName);  sprint("{");  while (obj != null) {    sprint("[");    sprint(((GenericObject)obj).debugDump(this.indentation));    obj=next();    sprint("]");  }  sprint("}");  return stringRep;}  }
class C{  public void scan(){  asyncPortTask=new AsyncPortTask(this,targetAddress,portList,processCallback);  asyncPortTask.execute();}  }
class C{  private synchronized void startLocationBasedDetector(CountryListener listener){  if (mLocationBasedCountryDetector != null) {    return;  }  if (DEBUG) {    Slog.d(TAG,"starts LocationBasedDetector to detect Country code via Location info " + "(e.g. GPS)");  }  mLocationBasedCountryDetector=createLocationBasedCountryDetector();  mLocationBasedCountryDetector.setCountryListener(listener);  mLocationBasedCountryDetector.detectCountry();}  }
class C{  public CSuspendThreadAction(final TargetProcessThread thread){  super("Suspend");  m_thread=thread;}  }
class C{  protected List<? extends Position> fillBoundary(Iterable<? extends Position> corners){  ArrayList<Position> list=new ArrayList<Position>();  for (  Position corner : corners) {    if (corner != null)     list.add(corner);  }  if (list.size() < 3) {    String message=Logging.getMessage("generic.InsufficientPositions");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (list.size() > 0 && !list.get(0).equals(list.get(list.size() - 1)))   list.add(list.get(0));  list.trimToSize();  return list;}  }
class C{  public String writeFormatted(Geometry geometry){  Writer sw=new StringWriter();  try {    writeFormatted(geometry,true,sw);  } catch (  IOException ex) {    Assert.shouldNeverReachHere();  }  return sw.toString();}  }
class C{  public Object visit(IncludeFilter filter,Object extraData){  filterBuilder=FilterBuilders.matchAllFilter();  return extraData;}  }
class C{  public ExecutionWindowRestRep create(ExecutionWindowCreateParam input){  ExecutionWindowRestRep executionWindow=client.post(ExecutionWindowRestRep.class,input,PathConstants.EXECUTION_WINDOWS2_URL);  return executionWindow;}  }
class C{  public PreDestroyViewMapEvent(FacesContext facesContext,UIViewRoot root){  super(facesContext,root);}  }
class C{  public static void createClientCacheForInvalidates(String host,Integer port1,Integer port2) throws Exception {  StatsBugDUnitTest test=new StatsBugDUnitTest();  cache=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  pool=(PoolImpl)ClientServerTestCase.configureConnectionPool(factory,host,new int[]{port1.intValue(),port2.intValue()},true,-1,3,null);  RegionAttributes attrs=factory.create();  Region region=cache.createRegion(REGION_NAME,attrs);  region.registerInterest("ALL_KEYS",false,false);  LogWriterUtils.getLogWriter().info("Client cache created");}  }
class C{  public final void entityReference(String name) throws org.xml.sax.SAXException {  try {    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  final void printMillis(long value){  Log.write(VM.statistics.nanosToMillis(value));}  }
class C{  static public List<Bounds> mergeBounds(List<Bounds> boundsList){  List<Bounds> newBoundsList=new LinkedList<>();  if (boundsList.isEmpty()) {    return newBoundsList;  }  Collections.sort(boundsList);  Bounds prevBounds=new Bounds(boundsList.get(0).start,boundsList.get(0).end);  for (int i=1; i < boundsList.size(); i++) {    Bounds currentBounds=boundsList.get(i);    if (currentBounds.start <= prevBounds.end) {      prevBounds.end=Math.max(currentBounds.end,prevBounds.end);    } else {      newBoundsList.add(prevBounds);      prevBounds=new Bounds(currentBounds.start,currentBounds.end);    }  }  newBoundsList.add(prevBounds);  return newBoundsList;}  }
class C{  public NotificationChain basicSetEffect(Step newEffect,NotificationChain msgs){  Step oldEffect=effect;  effect=newEffect;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.REACTION__EFFECT,oldEffect,newEffect);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected EClass eStaticClass(){  return InformationModelPackage.Literals.FUNCTIONBLOCK_PROPERTY;}  }
class C{  private boolean isBiometricUnlockSuppressed(){  KeyguardUpdateMonitor monitor=KeyguardUpdateMonitor.getInstance(mContext);  final boolean backupIsTimedOut=monitor.getFailedUnlockAttempts() >= LockPatternUtils.FAILED_ATTEMPTS_BEFORE_TIMEOUT;  return monitor.getMaxBiometricUnlockAttemptsReached() || backupIsTimedOut || !monitor.isAlternateUnlockEnabled()|| monitor.getPhoneState() != TelephonyManager.CALL_STATE_IDLE;}  }
class C{  public void onPushToBackStack(){}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength() + (4 - getDataLength() % 4) % 4];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  System.arraycopy(username,0,binValue,4,getDataLength());  return binValue;}  }
class C{  public static StorageImage create(String fileName,byte[] data,int width,int height,boolean keep){  if (Storage.getInstance().writeObject(fileName,data)) {    return new StorageImage(fileName,width,height,keep);  }  return null;}  }
class C{  protected void sendMomentaryFunctionGroup1(){  if (log.isDebugEnabled()) {    log.debug("Momentary function request not supported by Elite.");  }  return;}  }
class C{  public OutlierResult run(Database database,Relation<O> rel){  final DBIDs ids=rel.getDBIDs();  LOG.verbose("Running kNN preprocessor.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,rel,getDistanceFunction(),kmax + 1);  WritableDataStore<double[]> densities=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,double[].class);  estimateDensities(rel,knnq,ids,densities);  WritableDoubleDataStore kofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_DB);  DoubleMinMax minmax=new DoubleMinMax();  computeOutlierScores(knnq,ids,densities,kofs,minmax);  DoubleRelation scoreres=new MaterializedDoubleRelation("Kernel Density Estimation Outlier Scores","kdeos-outlier",kofs,ids);  OutlierScoreMeta meta=new ProbabilisticOutlierScore(minmax.getMin(),minmax.getMax());  return new OutlierResult(meta,scoreres);}  }
class C{  static boolean isPostgreSQL(){  if (s_type == null)   getServerType();  if (s_type != null)   return TYPE_POSTGRESQL.equals(s_type);  return false;}  }
class C{  private Opcodes(){}  }
class C{  public void removeListener(final L listener){  Validate.notNull(listener,"Listener object cannot be null.");  listeners.remove(listener);}  }
