class C{  public OsmRuntimeException(Throwable cause){  super(cause);}  }
class C{  public static long fib(long index){  count++;  if (index == 0)   return 0; else   if (index == 1)   return 1; else   return fib(index - 1) + fib(index - 2);}  }
class C{  @Override public void init(){  if (knownArchitectures == null || knownArchitectures.isEmpty()) {    throw new Error("No architectures known. Has the value for knownArchitectures " + "been set correctly? Current value for knownArchitectures was " + knownArchitectures);  }  if (targetArchitecture == null || targetArchitecture.trim().isEmpty()) {    throw new Error("No target archtiecture known. Has the value for " + "targetArchitecture been set correctly? Current value for " + "knownArchitectures was "+ targetArchitecture);  }  if (!knownArchitectures.contains(targetArchitecture)) {    throw new Error("Target architecture " + targetArchitecture + " not contained in list "+ "of known architectures "+ knownArchitectures+ "! Please check the architecture "+ "definition in the use of the checkstyle task");  }}  }
class C{  Map<Integer,Class<?>> abstractSerializers(){  return reader.getMap(ABSTRACT_SERIALIZERS,null,null);}  }
class C{  @Override protected ParseObject decodePointer(String className,String objectId){  if (fetchedObjects != null && fetchedObjects.containsKey(objectId)) {    return fetchedObjects.get(objectId);  }  return super.decodePointer(className,objectId);}  }
class C{  synchronized public void cache(long interval,final int maxValues,ServletContext servletContext,final String... attrNames){  if (attrNames.length == 0) {    return;  }  Timer timer=new Timer(true);  TimerTask task=createRefresher(maxValues,servletContext,attrNames);  task.run();  timer.schedule(task,interval,interval);  timers.add(timer);}  }
class C{  public void addHighlights(final int[][] highlights,final boolean areaSelect,final int page){  if (highlights != null) {    hasHighlightAreasUpdated=true;    for (int j=0; j != highlights.length; j++) {      int[][] values=getHighlightableInArea(highlights[j],areaSelect,page);      if (values != null) {        this.areas.put(page,values);      }    }  }}  }
class C{  private void initData(int type){  this.cache=httpCacheDao.getHttpResponsesByType(type);  if (cache == null) {    cache=new HashMap<String,HttpResponse>();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildPrisonArea(zone);}  }
class C{  public void removeItemBoundsListener(ItemBoundsListener ibl){  m_bounders.remove(ibl);}  }
class C{  public long durationInMillis(){  return this.end.getTime() - this.start.getTime();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tUse conjugate gradient descent rather than BFGS updates.","C",0,"-C"));  newVector.addElement(new Option("\tSet the ridge in the log-likelihood.","R",1,"-R <ridge>"));  newVector.addElement(new Option("\tSet the maximum number of iterations" + " (default -1, until convergence).","M",1,"-M <number>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static Date nextDate(final String immCode,final boolean mainCycle){  return nextDate(immCode,mainCycle,new Date());}  }
class C{  public void postrender(BasicCamera camera,Renderer renderer,boolean worldChanged){  if (light.getSceneHints().getCullHint() != CullHint.Always) {    light.updateOrb(camera);    light.drawOrb(renderer);  }}  }
class C{  public Tasks<VolumeRestRep> detachFullCopy(URI copyId){  return postTasks(getIdUrl() + "/detach",copyId);}  }
class C{  public Executor withProperties(Properties properties){  this.properties.clear();  this.properties.addAll(properties);  return this;}  }
class C{  public void addPayloadFilter(Map<String,String> payloadFilter){  getPayloadFilters().add(payloadFilter);}  }
class C{  @ApiMethod(name="sayHi") public MyBean sayHi(@Named("name") String name){  MyBean response=new MyBean();  response.setData("Hi, " + name);  return response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:58.261 -0400",hash_original_method="204BA9C6E53FA914ED5C736802A5AC49",hash_generated_method="EE04553184A22B85B15058D0DDC57EAF") public void finish() throws IOException {  checkClosed();  write();}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  public ActionListener(Context context,Action action,String clientHandle,String... additionalArgs){  this.context=context;  this.action=action;  this.clientHandle=clientHandle;  this.additionalArgs=additionalArgs;}  }
class C{  @Override public double computeScoreNormalization(double cooccurrence,int similarNodeDegree,int nodeDegree){  return 1.0;}  }
class C{  public static <K,V>SynchronizedSortedBagMultimap<K,V> of(MutableSortedBagMultimap<K,V> multimap){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSortedBagMultimap for null");  }  return new SynchronizedSortedBagMultimap<>(multimap);}  }
class C{  public void contributeToClasses(ChooseByNameContributor contributor){  myGotoClassContributors.add(contributor);}  }
class C{  private void writeResultsToMotionChartJson(JsonWriter jsonWriter,Iterable<Entity> results) throws IOException {  jsonWriter.name("data").beginObject();  jsonWriter.name("cols").beginArray();  for (int i=0; i < properties.length; i++) {    jsonWriter.beginObject().name("id").value(properties[i]).name("label").value(labels[i]).name("type").value(types[i]).endObject();  }  jsonWriter.endArray();  jsonWriter.name("rows").beginArray();  for (  Entity entity : results) {    jsonWriter.beginObject().name("c").beginArray();    for (int i=0; i < properties.length; i++) {      String value="";      if (entity.getProperty(properties[i]) != null) {        value=String.valueOf(entity.getProperty(properties[i]));      }      jsonWriter.beginObject().name("v").value(value).endObject();    }    jsonWriter.endArray().endObject();  }  jsonWriter.endArray();  jsonWriter.endObject();}  }
class C{  protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){  int text1_length=text1.length();  int text2_length=text2.length();  int max_d=(text1_length + text2_length + 1) / 2;  int v_offset=max_d;  int v_length=2 * max_d;  int[] v1=new int[v_length];  int[] v2=new int[v_length];  for (int x=0; x < v_length; x++) {    v1[x]=-1;    v2[x]=-1;  }  v1[v_offset + 1]=0;  v2[v_offset + 1]=0;  int delta=text1_length - text2_length;  boolean front=(delta % 2 != 0);  int k1start=0;  int k1end=0;  int k2start=0;  int k2end=0;  for (int d=0; d < max_d; d++) {    if (System.currentTimeMillis() > deadline) {      break;    }    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {      int k1_offset=v_offset + k1;      int x1;      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {        x1=v1[k1_offset + 1];      } else {        x1=v1[k1_offset - 1] + 1;      }      int y1=x1 - k1;      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {        x1++;        y1++;      }      v1[k1_offset]=x1;      if (x1 > text1_length) {        k1end+=2;      } else       if (y1 > text2_length) {        k1start+=2;      } else       if (front) {        int k2_offset=v_offset + delta - k1;        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {          int x2=text1_length - v2[k2_offset];          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {      int k2_offset=v_offset + k2;      int x2;      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {        x2=v2[k2_offset + 1];      } else {        x2=v2[k2_offset - 1] + 1;      }      int y2=x2 - k2;      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {        x2++;        y2++;      }      v2[k2_offset]=x2;      if (x2 > text1_length) {        k2end+=2;      } else       if (y2 > text2_length) {        k2start+=2;      } else       if (!front) {        int k1_offset=v_offset + delta - k2;        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {          int x1=v1[k1_offset];          int y1=v_offset + x1 - k1_offset;          x2=text1_length - x2;          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }  }  LinkedList<Diff> diffs=new LinkedList<Diff>();  diffs.add(new Diff(Operation.DELETE,text1));  diffs.add(new Diff(Operation.INSERT,text2));  return diffs;}  }
class C{  public boolean isAccepted(){  return accepted;}  }
class C{  private static void fillBasinReq(DTSweepContext tcx,AdvancingFrontNode node){  if (isShallow(tcx,node)) {    return;  }  fill(tcx,node);  if (node.prev == tcx.basin.leftNode && node.next == tcx.basin.rightNode) {    return;  } else   if (node.prev == tcx.basin.leftNode) {    Orientation o=orient2d(node.point,node.next.point,node.next.next.point);    if (o == Orientation.CW) {      return;    }    node=node.next;  } else   if (node.next == tcx.basin.rightNode) {    Orientation o=orient2d(node.point,node.prev.point,node.prev.prev.point);    if (o == Orientation.CCW) {      return;    }    node=node.prev;  } else {    if (node.prev.point.getY() < node.next.point.getY()) {      node=node.prev;    } else {      node=node.next;    }  }  fillBasinReq(tcx,node);}  }
class C{  public void writeToStream(OutputStreamWithBuffer os) throws IOException {  getWrappedPath().writeToStream(os);}  }
class C{  public Bound<T> withoutValidation(){  return new Bound<>(name,filenamePrefix,filenameSuffix,header,footer,coder,numShards,shardTemplate,false,writableByteChannelFactory);}  }
class C{  public static boolean isMethod(Declaration decl){  return JvmBackendUtil.isMethod(decl);}  }
class C{  public static <T>Iterator<T> unique(Iterator<T> self,Comparator<T> comparator){  return uniqueItems(new IteratorIterableAdapter<T>(self),comparator).listIterator();}  }
class C{  public void applyForce(Vector2 force,Vector2 point,boolean wrap){  tmp.set(force.x,force.y);  tmp2.set(point.x,point.y);  body.applyForce(tmp,tmp2);}  }
class C{  public FigureEvent(Figure source,Rectangle2D.Double invalidatedArea){  super(source);  this.invalidatedArea=invalidatedArea;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testNodeProcessing(){  AverageKeyVal<String> oper=new AverageKeyVal<String>();  CollectorTestSink averageSink=new CollectorTestSink();  oper.doubleAverage.setSink(averageSink);  oper.beginWindow(0);  oper.data.process(new KeyValPair("a",2.0));  oper.data.process(new KeyValPair("b",20.0));  oper.data.process(new KeyValPair("c",1000.0));  oper.data.process(new KeyValPair("a",1.0));  oper.data.process(new KeyValPair("a",10.0));  oper.data.process(new KeyValPair("b",5.0));  oper.data.process(new KeyValPair("d",55.0));  oper.data.process(new KeyValPair("b",12.0));  oper.data.process(new KeyValPair("d",22.0));  oper.data.process(new KeyValPair("d",14.2));  oper.data.process(new KeyValPair("d",46.0));  oper.data.process(new KeyValPair("e",2.0));  oper.data.process(new KeyValPair("a",23.0));  oper.data.process(new KeyValPair("d",4.0));  oper.endWindow();  Assert.assertEquals("number emitted tuples",5,averageSink.collectedTuples.size());  for (  Object o : averageSink.collectedTuples) {    KeyValPair<String,Double> e=(KeyValPair<String,Double>)o;    Double val=e.getValue();    if (e.getKey().equals("a")) {      Assert.assertEquals("emitted value for 'a' was ",new Double(36 / 4.0),val);    } else     if (e.getKey().equals("b")) {      Assert.assertEquals("emitted tuple for 'b' was ",new Double(37 / 3.0),val);    } else     if (e.getKey().equals("c")) {      Assert.assertEquals("emitted tuple for 'c' was ",new Double(1000 / 1.0),val);    } else     if (e.getKey().equals("d")) {      Assert.assertEquals("emitted tuple for 'd' was ",new Double(141.2 / 5),val);    } else     if (e.getKey().equals("e")) {      Assert.assertEquals("emitted tuple for 'e' was ",new Double(2 / 1.0),val);    }  }}  }
class C{  public RaidCreatureCorpse(final RPEntity victim,final String killerName){  super(victim,killerName);}  }
class C{  public EntryOrExitAction_ createEntryOrExitAction_(){  EntryOrExitAction_Impl entryOrExitAction_=new EntryOrExitAction_Impl();  return entryOrExitAction_;}  }
class C{  static String typeFunctionName(final Tree.StaticType type,final ClassOrInterface coi,final GenerateJsVisitor gen){  TypeDeclaration d=type.getTypeModel().getDeclaration();  final boolean removeAlias=d == null || !d.isClassOrInterfaceMember() || d instanceof Interface;  if ((removeAlias && d.isAlias()) || d instanceof Constructor) {    Type extendedType=d.getExtendedType();    d=extendedType == null ? null : extendedType.getDeclaration();  }  Declaration cont=ModelUtil.getContainingDeclaration(d);  final boolean inProto=gen.opts.isOptimize() && cont instanceof TypeDeclaration;  final boolean imported=gen.isImported(type.getUnit().getPackage(),d);  String dname=gen.getNames().name(d);  if (d.isAlias()) {    TypeDeclaration d2=d;    while (d2.isAlias()) {      d2=d2.getExtendedType().getDeclaration();    }    dname=gen.getNames().name(d2);  }  final String initName="$init$" + dname + "()";  if (!imported && !d.isClassOrInterfaceMember()) {    return initName;  }  if (inProto && coi.isMember() && !d.isAlias()&& (coi.getContainer() == cont || ModelUtil.contains(d,coi))) {    return initName;  }  String tfn;  if (coi != null && coi.isAnonymous() && cont instanceof Scope && ModelUtil.contains((Scope)cont,coi)) {    tfn=gen.qualifiedPath(type,cont,inProto);  } else   if (inProto && d.isClassOrInterfaceMember()) {    return pathToType(type,d,gen);  } else {    tfn=gen.qualifiedPath(type,d,inProto);  }  tfn=gen.memberAccessBase(type,d,false,tfn);  if (removeAlias && !imported) {    int idx=tfn.lastIndexOf('.');    if (idx > 0) {      tfn=tfn.substring(0,idx + 1) + initName;    } else {      tfn=initName;    }  }  return tfn;}  }
class C{  public void registerInfoType(ILogicInfo info){}  }
class C{  public int fieldIndex(String field){  return delegate.fieldIndex(field);}  }
class C{  public void postFile(File file,OutputStream output,String type){  InputStream is=null;  try {    URL url=solrUrl;    if (auto) {      if (type == null) {        type=guessType(file);      }      if (type != null) {        if (type.equals("text/xml") || type.equals("text/csv") || type.equals("application/json")) {        } else {          String urlStr=appendUrlPath(solrUrl,"/extract").toString();          if (urlStr.indexOf("resource.name") == -1)           urlStr=appendParam(urlStr,"resource.name=" + URLEncoder.encode(file.getAbsolutePath(),"UTF-8"));          if (urlStr.indexOf("literal.id") == -1)           urlStr=appendParam(urlStr,"literal.id=" + URLEncoder.encode(file.getAbsolutePath(),"UTF-8"));          url=new URL(urlStr);        }      } else {        warn("Skipping " + file.getName() + ". Unsupported file type for auto mode.");        return;      }    } else {      if (type == null)       type=DEFAULT_CONTENT_TYPE;    }    info("POSTing file " + file.getName() + (auto ? " (" + type + ")" : ""));    is=new FileInputStream(file);    postData(is,(int)file.length(),output,type,url);  } catch (  IOException e) {    e.printStackTrace();    warn("Can't open/read file: " + file);  } finally {    try {      if (is != null)       is.close();    } catch (    IOException e) {      fatal("IOException while closing file: " + e);    }  }}  }
class C{  public Pair(X a,Y b){  this.a=a;  this.b=b;}  }
class C{  public void writeTag(final int fieldNumber,final int wireType) throws IOException {  writeRawVarint32(WireFormat.makeTag(fieldNumber,wireType));}  }
class C{  public static Process createPostgres(String directoryPath,String databaseName) throws IOException, InterruptedException {  String extraPath="";  for (  String testPath : EXTRA_POSTGRES_LOCATIONS) {    if ((new File(testPath + "/" + INITDB)).canExecute()) {      extraPath=testPath + "/";      break;    }  }  Runtime runtime=Runtime.getRuntime();  String[] args={extraPath + INITDB,directoryPath};  Process initdb=runtime.exec(args);  byte[] output=new byte[4096];  int bytesRead=initdb.getErrorStream().read(output,0,output.length);  if (bytesRead < 0) {    throw new RuntimeException("Reading from error stream failed");  }  System.out.write(output,0,bytesRead);  int result=initdb.waitFor();  if (result != 0) {    throw new RuntimeException("initdb failed: " + result);  }  String[] args2={extraPath + "postgres","-D",directoryPath,"-p",Integer.toString(postgresPort),"-k","/tmp","-h","::1,127.0.0.1"};  Process postgres=runtime.exec(args2);  System.out.println(directoryPath);  Thread.sleep(1000);  String[] args3={extraPath + "createdb","--host=localhost","--port=" + postgresPort,databaseName};  Process createdb=runtime.exec(args3);  result=createdb.waitFor();  if (result != 0) {    throw new RuntimeException("createdb failed? " + result);  }  return postgres;}  }
class C{  public List classify(List data){  List list=new ArrayList();  for (int i=0; i < data.size(); i++) {    list.add(classify((String)data.get(i)));  }  return list;}  }
class C{  protected void refactoringPerformed(final Refactoring refactoring,final IProgressMonitor monitor){  Assert.isNotNull(refactoring);  Assert.isNotNull(monitor);}  }
class C{  public static Pair<Integer,Integer> max(int[] array){  int max=Integer.MIN_VALUE;  int argMin=-1;  int id=0;  for (  int d : array) {    if (d > max) {      max=d;      argMin=id;    }    id++;  }  return new Pair<>(argMin,max);}  }
class C{  public ClassContent_ createClassContent_(){  ClassContent_Impl classContent_=new ClassContent_Impl();  return classContent_;}  }
class C{  public static PlugInProjectionExpression plugInAggregation(String functionName,Expression... moreExpressions){  return new PlugInProjectionExpression(functionName,false,moreExpressions);}  }
class C{  public void prune(){  this.pruneCandidates.stream().filter(null).forEach(null);  this.pruneCandidates.clear();  for (  final NodeStatus status : PRUNE_NODE_STATUSES) {    this.pruneCandidates.addAll(this.statusNodesMap.get(status));  }}  }
class C{  public void processDispatch(UniformPair<EventBean[]> events){  if (!forClauseDelivery) {    dispatchInternal(events);    return;  }  if ((groupDeliveryExpressions == null) || (groupDeliveryExpressions.length == 0)) {    UniformPair<EventBean[]> todeliver=new UniformPair<EventBean[]>(null,null);    if (events != null) {      if (events.getFirst() != null) {        for (        EventBean theEvent : events.getFirst()) {          todeliver.setFirst(new EventBean[]{theEvent});          dispatchInternal(todeliver);        }        todeliver.setFirst(null);      }      if (events.getSecond() != null) {        for (        EventBean theEvent : events.getSecond()) {          todeliver.setSecond(new EventBean[]{theEvent});          dispatchInternal(todeliver);        }        todeliver.setSecond(null);      }    }    return;  }  Map<Object,UniformPair<EventBean[]>> groups;  try {    groups=getGroupedResults(events);  } catch (  RuntimeException ex) {    log.error("Unexpected exception evaluating grouped-delivery expressions: " + ex.getMessage() + ", delivering ungrouped",ex);    dispatchInternal(events);    return;  }  for (  Map.Entry<Object,UniformPair<EventBean[]>> group : groups.entrySet()) {    dispatchInternal(group.getValue());  }}  }
class C{  public static boolean destroyProcess(@NotNull final Process process){  return destroyProcess(process,false);}  }
class C{  public static _LabelResultStatus fromString(final String value) throws SOAPSerializationException {  return (_LabelResultStatus)Enumeration.fromString(value,_LabelResultStatus.VALUES_TO_INSTANCES);}  }
class C{  @Override protected void _setBounds(long nativeWindowPointer,int x,int y,boolean xSet,boolean ySet,int w,int h,int cw,int ch,float xGravity,float yGravity){  int width;  int height;  if (w > 0) {    width=w;  } else   if (cw > 0) {    width=cw;  } else {    width=getWidth();  }  if (h > 0) {    height=h;  } else   if (cw > 0) {    height=ch;  } else {    height=getHeight();  }  if (!xSet) {    x=getX();  }  if (!ySet) {    y=getY();  }  if (maxW >= 0) {    width=Math.min(width,maxW);  }  if (maxH >= 0) {    height=Math.min(height,maxH);  }  width=Math.max(width,minW);  height=Math.max(height,minH);  notifyResizeAndMove(x,y,width,height);}  }
class C{  public static boolean isWorkflowProcess(){  if (s_workflow == null) {    s_workflow=Boolean.FALSE;    int AD_Table_ID=645;    if (MRole.getDefault().isTableAccess(AD_Table_ID,true))     s_workflow=Boolean.TRUE; else {      AD_Table_ID=644;      if (MRole.getDefault().isTableAccess(AD_Table_ID,true))       s_workflow=Boolean.TRUE; else       log.config(s_workflow.toString());    }    if (s_workflow.booleanValue()) {      s_workflow_Window_ID=DB.getSQLValue(null,"SELECT AD_Window_ID FROM AD_Table WHERE AD_Table_ID=?",AD_Table_ID);      if (s_workflow_Window_ID == 0)       s_workflow_Window_ID=297;      log.config(s_workflow + ", Window=" + s_workflow_Window_ID);    }  }  return s_workflow.booleanValue();}  }
class C{  public byte[] encryptDataWithPrivateKey(byte[] buffer,int length){  try {    Cipher cipher=Cipher.getInstance(TTT_ENCRYPTION_ALGORITHM);    cipher.init(Cipher.ENCRYPT_MODE,privateKey);    byte[] cipherData=cipher.doFinal(buffer,0,length);    return cipherData;  } catch (  GeneralSecurityException e) {    throw new IllegalStateException(e);  }}  }
class C{  private void checkOutdatedTVShowDetails(Cursor cursor){  if (hasIssuedOutdatedRefresh)   return;  cursor.moveToFirst();  long lastUpdated=cursor.getLong(TVShowDetailsQuery.UPDATED);  if (System.currentTimeMillis() > lastUpdated + Settings.DB_UPDATE_INTERVAL) {    hasIssuedOutdatedRefresh=true;    startSync(true);  }}  }
class C{  public static double area2(Point2D a,Point2D b,Point2D c){  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);}  }
class C{  @Transactional public void addPointtransfer(final JSONObject requestJSONObject) throws ServiceException {  try {    pointtransferRepository.add(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds pointtransfer failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public static boolean isInClockwiseDomain(double startAngRad,final double angSpanRad,final double angRad){  if (Math.abs(angRad) < -TWO_MATH_PI_IN_MINUS_PI_PI) {    if (angSpanRad <= 2 * Math.PI) {      if (angSpanRad < 0.0) {        return false;      }      startAngRad=normalizeMinusPiPi(startAngRad);      final double endAngRad=normalizeMinusPiPi(startAngRad + angSpanRad);      if (startAngRad <= endAngRad) {        return angRad >= startAngRad && angRad <= endAngRad;      }      return angRad >= startAngRad || angRad <= endAngRad;    }    return angSpanRad == angSpanRad;  }  return normalizeZeroTwoPi(angRad - startAngRad) <= angSpanRad;}  }
class C{  private void prepareSql() throws ObjectNotFoundException {  StringBuffer sqlStmt=new StringBuffer();  sqlStmt.append(generateProjectionStmt());  sqlStmt.append(generateFromStmt());  whereClause=generateWhereClauseStmt();  sqlStmt.append(whereClause);  sqlStmt.append(generateSortOrderStmt());  sql=sqlStmt.toString();}  }
class C{  public void close() throws SQLException {  if (rs != null)   rs.close();  if (ps != null)   ps.close();  if (conn != null)   conn.close();}  }
class C{  public void prepareTestS3Files(String s3keyPrefix,Path localTempPath,List<String> localFilePaths) throws Exception {  prepareTestS3Files(s3keyPrefix,localTempPath,localFilePaths,new ArrayList<>());}  }
class C{  public void flushDiskCache(){synchronized (mDiskCacheLock) {    long now=System.currentTimeMillis();    if (now - 1000 < mLastFlushTime) {      return;    }    mLastFlushTime=now;    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (DEBUG) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  public In(String s){  try {    File file=new File(s);    if (file.exists()) {      scanner=new Scanner(file,CHARSET_NAME);      scanner.useLocale(LOCALE);      return;    }    URL url=getClass().getResource(s);    if (url == null) {      url=new URL(s);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + s);  }}  }
class C{  public _QueuedBuildUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  public int findSrcAvgPos(int tgtPos){  if (t2s == null) {    assert (tgtPos == 0);    return 0;  }  int srcAvgPos=-1;  int distance=0;  int[] alignments;  while (true) {    int rightPos=tgtPos + distance;    boolean isStop=true;    if (rightPos < t2s.length) {      alignments=(rightPos < t2s.length ? t2s[rightPos] : null);      if (alignments != null) {        srcAvgPos=(int)ArrayMath.mean(alignments);        break;      }      isStop=false;    }    int leftPos=tgtPos - distance;    if (leftPos >= 0 && leftPos != rightPos) {      alignments=(leftPos < t2s.length ? t2s[leftPos] : null);      if (alignments != null) {        srcAvgPos=(int)ArrayMath.mean(alignments);        break;      }      isStop=false;    }    distance++;    if (isStop)     break;  }  return srcAvgPos;}  }
class C{  @Override public void updateClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  public final static boolean is12Key(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#';}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void endVisit(ConditionalExpression node){}  }
class C{  private void dateLabelMousePressed(MouseEvent e){  JLabel label=(JLabel)e.getSource();  String labelText=label.getText();  if ("".equals(labelText)) {    return;  }  int dayOfMonth=Integer.parseInt(labelText);  LocalDate clickedDate=LocalDate.of(displayedYearMonth.getYear(),displayedYearMonth.getMonth(),dayOfMonth);  userSelectedADate(clickedDate);}  }
class C{  public SubMatrix(Matrix baseMatrix,int firstRow,int firstColumn,int toRow,int toCol){  this.baseMatrix=baseMatrix;  if (firstColumn < 0 || firstRow < 0 || toRow < 0 || toCol < 0)   throw new ArithmeticException("Can not give negative row or column counts"); else   if (toRow == 0 || toCol == 0)   throw new ArithmeticException("Must give a positive number of rows and columns"); else   if (toRow > baseMatrix.rows() || toCol > baseMatrix.cols())   throw new ArithmeticException("You can not specify a matrix that goes past the row / column boundry of the base matrix"); else   if (firstRow >= toRow || firstColumn >= toCol)   throw new ArithmeticException("Illogical bounds given");  this.firstRow=firstRow;  this.firstColumn=firstColumn;  this.toRow=toRow;  this.toCol=toCol;  if (baseMatrix instanceof SubMatrix) {    SubMatrix given=(SubMatrix)baseMatrix;    this.baseMatrix=given.baseMatrix;    this.firstRow+=given.firstRow;    this.firstColumn+=given.firstColumn;    this.toRow=given.toRow;    this.toCol=given.toCol;  }}  }
class C{  protected void addTransformerToManager(Instrumentation manager,ClassFileTransformer transformer,boolean canRetransform){  if (transformer != null) {    fTransformers.add(transformer);  }  manager.addTransformer(transformer,canRetransform);  verbosePrint("Added transformer " + transformer + " with canRetransform="+ canRetransform);}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  private boolean destInRange(final Player player,final Entity entity,final int x,final int y){  int centerX=(int)(x + (entity.getArea().getWidth() / 2));  int centerY=(int)(y + (entity.getArea().getHeight() / 2));  if (!(player.squaredDistance(centerX,centerY) < (EquipUtil.MAX_THROWING_DISTANCE * EquipUtil.MAX_THROWING_DISTANCE))) {    player.sendPrivateText("You cannot throw that far.");    return false;  } else {    return true;  }}  }
class C{  public void persist(){  getBuildContextHolder().persist();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isLegacy(){  return legacy;}  }
class C{  double heuristic(Node x,Node y){  return x.loc.distanceTo(y.loc);}  }
class C{  public void addObservations(int states[][],int sourceCol,int destCol,int[] othersAbsolute){  addObservations(states,sourceCol,destCol,othersAbsolute,false);}  }
class C{  public final double[] toArray3(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return toDoubleArray(array,offset,3);}  }
class C{  @Override protected void showAttempt(Attempt attempt){  Dataset dataset=attempt.getDataset();  if (dataset == null)   return;  List<String> options=dataset.getOptions();  if (options == null || options.isEmpty())   return;  choiceContainer.removeAllViews();  for (  String option : options) {    StepikOptionView optionViewItem;    if (dataset.is_multiple_choice()) {      optionViewItem=new StepikCheckBox(getActivity());    } else {      optionViewItem=new StepikRadioButton(getActivity());    }    buildChoiceItem(optionViewItem,option);  }}  }
class C{  public String foreignKey(String className,boolean underscore){  return underscore(demodulize(className) + (underscore ? "_id" : "id"));}  }
class C{  public EnclosingClosure popEnclosingClosure(){  return enclosingClosures.removeFirst();}  }
class C{  public void updateCursorCounter(){  ++field_146214_l;}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if (qName.equals(VALUE_TAG)) {    clearCurrentText();  } else {    throw new SAXException("Expecting <Value> but found " + qName);  }}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("deminimaltestdata.zip"),"deminimal.txt");}  }
class C{  public ConversionInstance(Context context,Value value,Class convert) throws Exception {  this.context=context;  this.convert=convert;  this.value=value;}  }
class C{  public GBC weightx(double weight){  weightx=weight;  return this;}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os) throws IOException {  throw new IOException("Cannot use unsafe with Reader");}  }
class C{  public final char readChar() throws java.io.IOException {  return (char)readShort();}  }
class C{  public void print(Object obj){  print(InvokerHelper.toString(obj));}  }
class C{  public void onAdded(final StendhalRPZone zone){  if (this.zone != null) {    logger.error("Entity added while in another " + zone + ": "+ this,new Throwable());  }  this.zone=zone;  this.lastZone=zone;}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    inf.end();    closed=true;    eof=true;    super.close();  }}  }
class C{  public synchronized boolean contains(File file){  return indexOf(file) >= 0;}  }
class C{  public static ReplaceStringTransformer clearUUIDs(){  return new ReplaceStringTransformer("[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}","00000000-0000-0000-0000-000000000000");}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  if (patch.nextPageLink == null) {    current.nextPageLink=null;  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public static void main(String[] args){  try {    httpTransport=GoogleNetHttpTransport.newTrustedTransport();    DATA_STORE_FACTORY=new FileDataStoreFactory(DATA_STORE_DIR);    AdSenseHost service=initializeAdsensehost();    AdClients adClients=GetAllAdClientsForHost.run(service,MAX_LIST_PAGE_SIZE);    if ((adClients.getItems() != null) && !adClients.getItems().isEmpty()) {      String exampleHostAdClientId=adClients.getItems().get(0).getId();      GetAllCustomChannelsForHost.run(service,exampleHostAdClientId,MAX_LIST_PAGE_SIZE);      CustomChannel customChannel=AddCustomChannelToHost.run(service,exampleHostAdClientId);      customChannel=UpdateCustomChannelOnHost.run(service,exampleHostAdClientId,customChannel.getId());      DeleteCustomChannelOnHost.run(service,exampleHostAdClientId,customChannel.getId());      GetAllUrlChannelsForHost.run(service,exampleHostAdClientId,MAX_LIST_PAGE_SIZE);      UrlChannel urlChannel=AddUrlChannelToHost.run(service,exampleHostAdClientId);      DeleteUrlChannelOnHost.run(service,exampleHostAdClientId,urlChannel.getId());      GenerateReportForHost.run(service,exampleHostAdClientId);    } else {      System.out.println("No host ad clients found, unable to run remaining host samples.");    }    if (!PUB_ACCOUNT_ID.equals("INSERT_CLIENT_PUB_ID_HERE")) {      AdClients pubAdClients=GetAllAdClientsForPublisher.run(service,PUB_ACCOUNT_ID,MAX_LIST_PAGE_SIZE);      if ((pubAdClients.getItems() != null) && !pubAdClients.getItems().isEmpty()) {        String examplePubAdClientId=pubAdClients.getItems().get(0).getId();        GetAllAdUnitsForPublisher.run(service,PUB_ACCOUNT_ID,examplePubAdClientId,MAX_LIST_PAGE_SIZE);        AdUnit adUnit=AddAdUnitToPublisher.run(service,PUB_ACCOUNT_ID,examplePubAdClientId);        UpdateAdUnitOnPublisher.run(service,PUB_ACCOUNT_ID,examplePubAdClientId,adUnit.getId());        DeleteAdUnitOnPublisher.run(service,PUB_ACCOUNT_ID,examplePubAdClientId,adUnit.getId());        GenerateReportForPublisher.run(service,PUB_ACCOUNT_ID,examplePubAdClientId);      } else {        System.out.println("No publisher ad clients found, unable to run remaining publisher samples.");      }    }  } catch (  IOException e) {    System.err.println(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public void onScrollDown(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.scrollBy(0,SCROLL_BY_PX));}  }
class C{  public void clearSpanningTree(){  m_spanning=null;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord)   insert_Tree(MTree_Base.TREETYPE_Activity);  if (!newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name")))   MAccount.updateValueDescription(getCtx(),"C_Activity_ID=" + getC_Activity_ID(),get_TrxName());  return true;}  }
class C{  public void addHelpMenu(String ref,boolean direct){  JMenuBar bar=getJMenuBar();  if (bar == null) {    bar=new JMenuBar();  }  bar.add(new WindowMenu(this));  jmri.util.HelpUtil.helpMenu(bar,ref,direct);  setJMenuBar(bar);}  }
class C{  public static boolean looksLikeBluetoothAddress(String s){  return Pattern.matches("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",s);}  }
class C{  public static void copyProperties(Object dest,Object src){  if (dest == null || src == null) {    return;  }  try {    PropertyUtils.copyProperties(dest,src);  } catch (  IllegalAccessException e) {    throw new IllegalStateException(e);  }catch (  InvocationTargetException e) {    throw new IllegalStateException(e);  }catch (  NoSuchMethodException e) {    throw new IllegalStateException(e);  }}  }
class C{  public boolean isEncrypted(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsEncrypted;}  }
class C{  public void testTooManySegments() throws Exception {  Directory dir=getAssertNoDeletesDirectory(new RAMDirectory());  IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random()));  IndexWriter w=new IndexWriter(dir,iwc);  for (int i=0; i < 500; i++) {    Document doc=new Document();    doc.add(newStringField("id","" + i,Field.Store.NO));    w.addDocument(doc);    IndexReader r=DirectoryReader.open(w);    assertTrue(r.leaves().size() < 100);    r.close();  }  w.close();  dir.close();}  }
class C{  public void testFlipBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void initData(){  this.totalDistance=(int)DisplayUtils.dpToPx(getActivity(),156);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(getActivity());}  }
class C{  public void includeSchema(String schemaLocation) throws SAXException {  NGCCRuntimeEx runtime=new NGCCRuntimeEx(parser,chameleonMode,this);  runtime.currentSchema=this.currentSchema;  runtime.blockDefault=this.blockDefault;  runtime.finalDefault=this.finalDefault;  if (schemaLocation == null) {    SAXParseException e=new SAXParseException(Messages.format(Messages.ERR_MISSING_SCHEMALOCATION),getLocator());    parser.errorHandler.fatalError(e);    throw e;  }  runtime.parseEntity(resolveRelativeURL(null,schemaLocation),true,currentSchema.getTargetNamespace(),getLocator());}  }
class C{  public MapViewFrame(String[] args){  this();  for (  String arg : args) {    try {      if (arg.startsWith("-screenwidth=")) {        view.setScreenWidthInCentimeter(Double.parseDouble(arg.substring(13)));        break;      } else       if (arg.startsWith("-screensize=")) {        view.setScreenSizeInInch(Double.parseDouble(arg.substring(12)));        break;      }    } catch (    NumberFormatException e) {    }  }}  }
class C{  public BowlerStudio3dEngine(){  setSubScene(new SubScene(getRoot(),1024,1024,true,null));  buildScene();  buildCamera();  buildAxes();  Stop[] stops=null;  getSubScene().setFill(new LinearGradient(125,0,225,0,false,CycleMethod.NO_CYCLE,stops));  Scene s=new Scene(new Group(getSubScene()));  handleMouse(getSubScene());  setScene(s);}  }
class C{  protected boolean hasBinary(){  Set<String> keys=mParamKeyValues.keySet();  for (  String key : keys) {    List<Object> values=mParamKeyValues.getValues(key);    for (    Object value : values) {      if (value instanceof Binary)       return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return MMC.getInstance().getCaptureDeviceNames();}  }
class C{  public synchronized void mark(final int limit){  try {    in.mark(limit);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.getMessage());  }}  }
class C{  public boolean showTipsOnStartup(){  return jcbShowTipsOnStartup.isSelected();}  }
class C{  public static HttpResponse doPut(String host,String path,String method,Map<String,String> headers,Map<String,String> querys,byte[] body) throws Exception {  HttpClient httpClient=wrapClient(host);  HttpPut request=new HttpPut(buildUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    request.addHeader(e.getKey(),e.getValue());  }  if (body != null) {    request.setEntity(new ByteArrayEntity(body));  }  return httpClient.execute(request);}  }
class C{  private String _serializeMap(String name,Map map,StringBuilder sb,Set<Object> done) throws ConverterException {  if (useShortcuts)   sb.append("{}"); else   sb.append("new Object();");  Iterator it=map.keySet().iterator();  while (it.hasNext()) {    Object key=it.next();    String skey=StringUtil.toLowerCase(StringUtil.escapeJS(key.toString(),'"'));    sb.append(name + "[" + skey+ "]=");    _serialize(name + "[" + skey+ "]",map.get(key),sb,done);  }  return sb.toString();}  }
class C{  public boolean isFijo(){  return fijo;}  }
class C{  public void complainOnDeferredNullChecks(BlockScope scope,FlowInfo callerFlowInfo){  for (int i=0; i < this.innerFlowContextsCount; i++) {    this.upstreamNullFlowInfo.addPotentialNullInfoFrom(this.innerFlowContexts[i].upstreamNullFlowInfo).addPotentialNullInfoFrom(this.innerFlowInfos[i]);  }  this.innerFlowContextsCount=0;  UnconditionalFlowInfo flowInfo=this.upstreamNullFlowInfo.addPotentialNullInfoFrom(callerFlowInfo.unconditionalInitsWithoutSideEffect());  if ((this.tagBits & FlowContext.DEFER_NULL_DIAGNOSTIC) != 0) {    for (int i=0; i < this.nullCount; i++) {      LocalVariableBinding local=this.nullLocals[i];      Expression expression=this.nullReferences[i];switch (this.nullCheckTypes[i]) {case CAN_ONLY_NON_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NON_NULL | IN_COMPARISON_NON_NULL:        if (flowInfo.isDefinitelyNonNull(local)) {          this.nullReferences[i]=null;          if (this.nullCheckTypes[i] == (CAN_ONLY_NON_NULL | IN_COMPARISON_NON_NULL)) {            if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {              scope.problemReporter().localVariableRedundantCheckOnNonNull(local,expression);            }          } else {            if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {              scope.problemReporter().localVariableNonNullComparedToNull(local,expression);            }          }          continue;        }      break;case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:    if (flowInfo.isDefinitelyNonNull(local)) {      this.nullReferences[i]=null;      if (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {        if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {          scope.problemReporter().localVariableRedundantCheckOnNonNull(local,expression);        }      } else {        if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {          scope.problemReporter().localVariableNonNullComparedToNull(local,expression);        }      }      continue;    }  if (flowInfo.isDefinitelyNull(local)) {    this.nullReferences[i]=null;    if (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {      if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {        scope.problemReporter().localVariableRedundantCheckOnNull(local,expression);      }    } else {      if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {        scope.problemReporter().localVariableNullComparedToNonNull(local,expression);      }    }    continue;  }break;case CAN_ONLY_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:case CAN_ONLY_NULL | IN_ASSIGNMENT:case CAN_ONLY_NULL | IN_INSTANCEOF:if (flowInfo.isDefinitelyNull(local)) {this.nullReferences[i]=null;switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:  if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {    scope.problemReporter().localVariableNullReference(local,expression);    continue;  }if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {  scope.problemReporter().localVariableRedundantCheckOnNull(local,expression);}continue;case FlowContext.IN_COMPARISON_NON_NULL:if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariableNullReference(local,expression);continue;}if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableNullComparedToNonNull(local,expression);}continue;case FlowContext.IN_ASSIGNMENT:scope.problemReporter().localVariableRedundantNullAssignment(local,expression);continue;case FlowContext.IN_INSTANCEOF:scope.problemReporter().localVariableNullInstanceof(local,expression);continue;}} else if (flowInfo.isPotentiallyNull(local)) {switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;case FlowContext.IN_COMPARISON_NON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;}}break;case MAY_NULL:if (flowInfo.isDefinitelyNull(local)) {this.nullReferences[i]=null;scope.problemReporter().localVariableNullReference(local,expression);continue;}break;default :}this.parent.recordUsingNullReference(scope,local,expression,this.nullCheckTypes[i],flowInfo);}} else {for (int i=0; i < this.nullCount; i++) {Expression expression=this.nullReferences[i];LocalVariableBinding local=this.nullLocals[i];switch (this.nullCheckTypes[i]) {case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:if (flowInfo.isDefinitelyNonNull(local)) {this.nullReferences[i]=null;if (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableRedundantCheckOnNonNull(local,expression);}} else {if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableNonNullComparedToNull(local,expression);}}continue;}case CAN_ONLY_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:case CAN_ONLY_NULL | IN_ASSIGNMENT:case CAN_ONLY_NULL | IN_INSTANCEOF:if (flowInfo.isDefinitelyNull(local)) {this.nullReferences[i]=null;switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariableNullReference(local,expression);continue;}if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableRedundantCheckOnNull(local,expression);}continue;case FlowContext.IN_COMPARISON_NON_NULL:if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariableNullReference(local,expression);continue;}if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {scope.problemReporter().localVariableNullComparedToNonNull(local,expression);}continue;case FlowContext.IN_ASSIGNMENT:scope.problemReporter().localVariableRedundantNullAssignment(local,expression);continue;case FlowContext.IN_INSTANCEOF:scope.problemReporter().localVariableNullInstanceof(local,expression);continue;}} else if (flowInfo.isPotentiallyNull(local)) {switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;case FlowContext.IN_COMPARISON_NON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;}}break;case MAY_NULL:if (flowInfo.isDefinitelyNull(local)) {this.nullReferences[i]=null;scope.problemReporter().localVariableNullReference(local,expression);continue;}if (flowInfo.isPotentiallyNull(local)) {this.nullReferences[i]=null;scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;default :}}}this.initsOnBreak.addPotentialNullInfoFrom(flowInfo);for (int i=0; i < this.breakTargetsCount; i++) {this.breakTargetContexts[i].initsOnBreak.addPotentialNullInfoFrom(flowInfo);}}  }
class C{  @Override public void onActivityDestroyed(Activity activity){synchronized (NfcActivityManager.this) {    NfcActivityState state=findActivityState(activity);    if (DBG)     Log.d(TAG,"onDestroy() for " + activity + " "+ state);    if (state != null) {      destroyActivityState(activity);    }  }}  }
class C{  @TargetApi(21) public static ArtistDetailsFragment newInstance(ArtistListFragment.ViewHolder vh){  ArtistDetailsFragment fragment=new ArtistDetailsFragment();  Bundle args=new Bundle();  args.putInt(ArtistOverviewFragment.BUNDLE_KEY_ARTISTID,vh.artistId);  args.putInt(AlbumListFragment.BUNDLE_KEY_ARTISTID,vh.artistId);  args.putString(ArtistOverviewFragment.BUNDLE_KEY_TITLE,vh.artistName);  args.putString(ArtistOverviewFragment.BUNDLE_KEY_FANART,vh.fanart);  args.putString(ArtistOverviewFragment.BUNDLE_KEY_DESCRIPTION,vh.description);  args.putString(ArtistOverviewFragment.BUNDLE_KEY_GENRE,vh.genres);  args.putString(ArtistOverviewFragment.BUNDLE_KEY_POSTER,vh.poster);  if (Utils.isLollipopOrLater()) {    args.putString(ArtistOverviewFragment.POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean canSet(Class type){  if (type == null)   return false;  if (m_columnType.isPrimitive()) {    return m_columnType.isAssignableFrom(type) || TypeLib.getWrapperType(m_columnType).isAssignableFrom(type) || String.class.isAssignableFrom(type);  } else {    return m_columnType.isAssignableFrom(type);  }}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public static boolean hasContent(Node node){  if (node.getNodeName().equals("#comment")) {    return false;  } else   if (node.getNodeName().equals("#text")) {    return !node.getNodeValue().trim().isEmpty();  }  return true;}  }
class C{  @Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){  CategoryItemRendererState state=super.initialise(g2,dataArea,plot,rendererIndex,info);  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);  CategoryDataset dataset=plot.getDataset(rendererIndex);  if (dataset != null) {    int columns=dataset.getColumnCount();    int rows=dataset.getRowCount();    double space=0.0;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    double categoryMargin=0.0;    double currentItemMargin=0.0;    if (columns > 1) {      categoryMargin=domainAxis.getCategoryMargin();    }    if (rows > 1) {      currentItemMargin=getItemMargin();    }    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);    if ((rows * columns) > 0) {      state.setBarWidth(Math.min(used / (dataset.getColumnCount() * dataset.getRowCount()),maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }  return state;}  }
class C{  IsilonSyncPolicy doEnableReplicationPolicy(IsilonApi isi,String policyName){  IsilonSyncPolicy modifiedPolicy=new IsilonSyncPolicy();  modifiedPolicy.setName(policyName);  modifiedPolicy.setEnabled(true);  isi.modifyReplicationPolicy(policyName,modifiedPolicy);  return isi.getReplicationPolicy(policyName);}  }
class C{  @Ignore("Not supported") public void testRmRootDirRecursiveIsForbidden() throws Throwable {  Path root=path(getBaseURI() + "/");  Path testFile=path(getBaseURI() + "/test");  createFile(testFile);  assertTrue("rm(/) returned false",sFileSystem.delete(root,true));  assertExists("Root dir is missing",root);  assertPathDoesNotExist("test file not deleted",testFile);}  }
class C{  public DoubleVector(double[] values){  this.values=values.clone();}  }
class C{  public final void testRSAOtherPrimeInfo01(){  Object o=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertTrue(o instanceof RSAOtherPrimeInfo);}  }
class C{  long toCompactValue(int sign){  if (intLen == 0 || sign == 0)   return 0L;  int[] mag=getMagnitudeArray();  int len=mag.length;  int d=mag[0];  if (len > 2 || (d < 0 && len == 2))   return INFLATED;  long v=(len == 2) ? ((mag[1] & LONG_MASK) | (d & LONG_MASK) << 32) : d & LONG_MASK;  return sign == -1 ? -v : v;}  }
class C{  private InetAddress resolveRestTcpHost(IgniteConfiguration cfg) throws IOException {  String host=cfg.getConnectorConfiguration().getHost();  if (host == null)   host=cfg.getLocalHost();  return U.resolveLocalHost(host);}  }
class C{  public static <T>T checkNotNull(T reference){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void deleteArtifact(Artifact artifact,Version version) throws IOException {  if (downloadProgress != null) {    Map<Artifact,Version> artifacts2Download=downloadProgress.getArtifacts2Download();    if (artifacts2Download.containsKey(artifact) && artifacts2Download.get(artifact).equals(version)) {      throw new IllegalStateException(format("Artifact '%s' version '%s' is being downloaded and cannot be deleted.",artifact.getName(),version.toString()));    }  }  Path pathToBinary=getPathToBinaries(artifact,version);  if (exists(pathToBinary)) {    deleteDirectory(pathToBinary.getParent().toFile());  }}  }
class C{  @Override public synchronized void updateDate(String columnName,java.sql.Date x) throws SQLException {  updateDate(findColumn(columnName),x);}  }
class C{  public void addAnnotation(double x,double y,String annotation,float angle){  m_xyAnnotation=new XYPointerAnnotation(annotation,x,y,-angle * Math.PI / 180);  m_xyAnnotation.setLabelOffset(m_xyAnnotation.getLabelOffset() * 2 + 10);  if (m_chart != null) {    XYPlot plot=m_chart.getXYPlot();    plot.addAnnotation(m_xyAnnotation);  }}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public static boolean isFromUserModule(SemanticNode node){  SyntaxTreeNode csNode=(SyntaxTreeNode)node.stn;  String name=ResourceHelper.getModuleFileName(csNode.getFilename());  return ToolboxHandle.isUserModule(name);}  }
class C{  @Override protected void initListeners(){}  }
class C{  private static List<DateValue> dateRange(DateValue start,DateValue end){  DTBuilder b=new DTBuilder(start);  List<DateValue> list=new ArrayList<DateValue>();  while (true) {    DateValue d=b.toDate();    if (d.compareTo(end) > 0) {      break;    }    list.add(d);    b.day+=1;  }  return list;}  }
class C{  public TimingHit userTimingTime(Integer value){  setInteger(USER_TIMING_TIME,value);  return this;}  }
class C{  public int readInteger(String key){  Integer value=(Integer)mCache.get(key);  if (value == null) {    value=Integer.parseInt(readParameter(key));    mCache.put(key,value);  }  return value;}  }
class C{  public static Inet4Address fromInteger(int address){  return getInet4Address(Ints.toByteArray(address));}  }
class C{  private static GoogleJsonErrorContainer errorWithReasonAndStatus(String reason,int status){  ErrorInfo info=new ErrorInfo();  info.setReason(reason);  info.setDomain("global");  GoogleJsonError error=new GoogleJsonError();  error.setErrors(ImmutableList.of(info));  error.setCode(status);  GoogleJsonErrorContainer container=new GoogleJsonErrorContainer();  container.setError(error);  return container;}  }
class C{  public String toString(){  return iBuffer.toString();}  }
class C{  public void onPackageDisappeared(String packageName,int reason){}  }
class C{  public Edge lookupEdgeById(int id){  Iterator<Edge> i=edgeIterator();  while (i.hasNext()) {    Edge edge=i.next();    if (edge.getId() == id) {      return edge;    }  }  return null;}  }
class C{  void sub(int b){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]-=b;  }}  }
class C{  public java.lang.StringBuffer insert(int offset,java.lang.Object obj){  internal.insert(offset,obj);  return this;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createFunction(CreateFunctionRequest request,@HeaderParam("amz-sdk-invocation-id") String awsSdkInvocationId){  log.info("creating function");  FunctionConfiguration fc=new FunctionConfiguration();  fc.setFunctionName(request.getFunctionName());  fc.setFunctionArn(ArnUtils.of(request.getFunctionName()));  fc.setRuntime(request.getRuntime());  fc.setHandler(request.getHandler());  if (request.getCode() != null) {    log.info("updating function code");    FunctionCode code=request.getCode();    UpdateFunctionCodeRequest updateFunctionCodeRequest=new UpdateFunctionCodeRequest();    updateFunctionCodeRequest.setFunctionName(fc.getFunctionName());    updateFunctionCodeRequest.setZipFile(code.getZipFile());    lambdaService.updateFunctionCode(updateFunctionCodeRequest);  }  CreateFunctionResult result=lambdaService.saveFunctionConfiguration(fc);  log.info(result.toString());  return Response.status(Response.Status.CREATED).header(X_AMZN_REQUEST_ID_HEADER,UUID.randomUUID().toString()).entity(result).build();}  }
class C{  public static Timestamp plus(Timestamp self,int days){  Calendar calendar=(Calendar)Calendar.getInstance().clone();  calendar.setTime(self);  calendar.add(Calendar.DAY_OF_YEAR,days);  Timestamp ts=new Timestamp(calendar.getTime().getTime());  ts.setNanos(self.getNanos());  return ts;}  }
class C{  public synchronized static String formatGMT(long gmtTime){  _gmtDate.setGMTTime(gmtTime);  return _gmtDate.printDate();}  }
class C{  public CompareToBuilder append(final char lhs,final char rhs){  if (comparison != 0) {    return this;  }  comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  return this;}  }
class C{  public static UnknownAttributesAttribute createUnknownAttributesAttribute(){  UnknownAttributesAttribute attribute=new UnknownAttributesAttribute();  return attribute;}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int color){  this(points,thickness,null);  setColor(color);}  }
class C{  public static void renderValue(StringWriter writer,Object parameterValue){  if (parameterValue instanceof EPStatementObjectModel) {    writer.write("(");    ((EPStatementObjectModel)parameterValue).toEPL(writer);    writer.write(")");  } else   if (parameterValue instanceof Expression) {    ((Expression)parameterValue).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  } else   if (parameterValue == null) {    writer.write("null");  } else   if (parameterValue instanceof String) {    writer.write("\"");    writer.write(parameterValue.toString());    writer.write("\"");  } else {    writer.write(parameterValue.toString());  }}  }
class C{  @Inline protected final void logMessage(int minVerbose,String message){  if (Options.verbose.getValue() >= minVerbose) {    Log.prependThreadId();    Log.write("    ");    Log.writeln(message);  }}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.654 -0500",hash_original_method="C36F2E0651BF3F93251D9AAA1075E241",hash_generated_method="691DCD4142B8BB56E48201EC4322E72A") public boolean add(E e){  return al.addIfAbsent(e);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private byte[] calculateHMAC(byte[] macKey,byte[] additionalAuthenticatedData,byte[] initializationVector,byte[] cipherText,byte[] al){  try {    byte[] hmacInput=encryptUtil.concatenateByteArrays(additionalAuthenticatedData,initializationVector,cipherText,al);    return encryptUtil.calculateHmac(macKey,hmacInput);  } catch (  EncryptDataException e) {    Log.i(TAG,"Error while encrypting fields" + e.getMessage());  }catch (  IOException e) {    Log.i(TAG,"Error while encrypting fields" + e.getMessage());  }  return null;}  }
class C{  void trackHorizontalMotionScroll(int deltaX){  if (getChildCount() == 0) {    return;  }  boolean toLeft=deltaX < 0;  int limitedDeltaX=getHorizontalLimitedMotionScrollAmount(toLeft,deltaX);  if (limitedDeltaX != deltaX) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenLeftAndRight(limitedDeltaX);  detachHorizontalOffScreenChildren(toLeft);  if (toLeft) {    fillToGalleryRight();  } else {    fillToGalleryLeft();  }  mRecycler.clear();  setHorizontalSelectionToCenterChild();  final View selChild=mSelectedChild;  if (selChild != null) {    final int childLeft=selChild.getLeft();    final int childCenter=selChild.getWidth() / 2;    final int galleryCenter=getWidth() / 2;    mSelectedCenterOffset=childLeft + childCenter - galleryCenter;  }  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  public Vector3 crs(Vector3 vector){  return this.set(y * vector.z - z * vector.y,z * vector.x - x * vector.z,x * vector.y - y * vector.x);}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return false;}  }
class C{  public VMRegionVersionVector(){  super();}  }
class C{  @Override public void handleFatalError(Runnable callingThread,String message,Throwable error){  if (callingThread instanceof Connector) {    Connector connector=(Connector)callingThread;    removeSocket(connector.getListenAddress(),connector.getRemoteAddress());    logger.log(Level.WARNING,"Removing connector:" + connector,error);  } else   if (callingThread instanceof MessageProcessor) {    MessageProcessor mp=(MessageProcessor)callingThread;    logger.log(Level.WARNING,"A message processor has unexpectedly " + "stopped. AP:" + mp,error);    mp.stop();    messageProcessors.remove(mp);    mp=new MessageProcessor(this);    mp.start();    logger.fine("A message processor has been relaunched because " + "of an error.");  }}  }
class C{  public SearchSourceBuilder aggregations(BytesReference aggregationsBinary){  this.aggregationsBinary=aggregationsBinary;  return this;}  }
class C{  public boolean isClosable(){  return closable;}  }
class C{  public static <T>Iterator<T> sort(Iterator<T> self,Comparator<T> comparator){  return sort((Iterable<T>)toList(self),true,comparator).listIterator();}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void insertUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    if ((e.getOffset() <= dot || e.getOffset() <= mark) && selectionTag != null) {      try {        component.getHighlighter().changeHighlight(selectionTag,Math.min(dot,mark),Math.max(dot,mark));      } catch (      BadLocationException e1) {        e1.printStackTrace();      }    }    return;  }  int offset=e.getOffset();  int length=e.getLength();  int newDot=dot;  short changed=0;  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(offset + length);    return;  }  if (newDot >= offset) {    newDot+=length;    changed|=1;  }  int newMark=mark;  if (newMark >= offset) {    newMark+=length;    changed|=2;  }  if (changed != 0) {    Position.Bias dotBias=DefaultCaret.this.dotBias;    if (dot == offset) {      Document doc=component.getDocument();      boolean isNewline;      try {        Segment s=new Segment();        doc.getText(newDot - 1,1,s);        isNewline=(s.count > 0 && s.array[s.offset] == '\n');      } catch (      BadLocationException ble) {        isNewline=false;      }      if (isNewline) {        dotBias=Position.Bias.Forward;      } else {        dotBias=Position.Bias.Backward;      }    }    if (newMark == newDot) {      setDot(newDot,dotBias);      ensureValidPosition();    } else {      setDot(newMark,markBias);      if (getDot() == newMark) {        moveDot(newDot,dotBias);      }      ensureValidPosition();    }  }}  }
class C{  public VNXeCommandResult createFileSystemSync(CreateFileSystemParam param) throws VNXeException {  _url=URL_CREATE;  return postRequestSync(param);}  }
class C{  public static Date max(Date d1,Date d2){  if (d1 == null && d2 == null)   return null;  if (d1 == null)   return d2;  if (d2 == null)   return d1;  return (d1.after(d2)) ? d1 : d2;}  }
class C{  private IJavaCompletionProposal[] codeComplete(String qualifiedTypeName,String snippet,CompletionProposalCollector requestor) throws JavaModelException {  IJavaCompletionProposal[] proposals=new IJavaCompletionProposal[0];  IType type=cu.getJavaProject().findType(qualifiedTypeName);  if (type != null) {    boolean isStatic=false;    type.codeComplete(snippet.toCharArray(),-1,snippet.length(),new char[0][0],new char[0][0],new int[0],isStatic,requestor);    proposals=requestor.getJavaCompletionProposals();  }  return proposals;}  }
class C{  public void clearAccessibleSelection(){  MenuElement old[]=MenuSelectionManager.defaultManager().getSelectedPath();  if (old != null) {    for (int j=0; j < old.length; j++) {      if (old[j] == JMenu.this) {        MenuElement me[]=new MenuElement[j + 1];        System.arraycopy(old,0,me,0,j);        me[j]=JMenu.this.getPopupMenu();        MenuSelectionManager.defaultManager().setSelectedPath(me);      }    }  }}  }
class C{  public void onTextTrackEnabledChanged(boolean isEnabled){  LOGD(TAG,"onTextTrackEnabledChanged() reached");  if (!isEnabled) {    setActiveTrackIds(new long[]{});  }  for (  VideoCastConsumer consumer : mVideoConsumers) {    consumer.onTextTrackEnabledChanged(isEnabled);  }}  }
class C{  protected static CharArraySet loadStopwordSet(Path stopwords) throws IOException {  Reader reader=null;  try {    reader=Files.newBufferedReader(stopwords,StandardCharsets.UTF_8);    return WordlistLoader.getWordSet(reader);  }  finally {    IOUtils.close(reader);  }}  }
class C{  private void readObjectContainer() throws Exception {  Element objectElement=getFirstElementByTagName(document,dsElement(Constants._TAG_OBJECT));  objectContainer=new ObjectContainer(objectElement,BASE_URI);}  }
class C{  @SuppressWarnings("resource") protected ByteBufferIndexInput newCloneInstance(String newResourceDescription,ByteBuffer[] newBuffers,int offset,long length){  if (newBuffers.length == 1) {    newBuffers[0].position(offset);    return new SingleBufferImpl(newResourceDescription,newBuffers[0].slice(),length,chunkSizePower,this.guard);  } else {    return new MultiBufferImpl(newResourceDescription,newBuffers,offset,length,chunkSizePower,guard);  }}  }
class C{  public final int length(){  return getView().length();}  }
class C{  public static void main(String[] args){  Jedis flush_jedis=new Jedis("localhost");  flush_jedis.select(1);  List<String> campaigns=new ArrayList<String>();  for (int i=0; i < 100; i++) {    campaigns.add(UUID.randomUUID().toString());  }  long campaignUpdates=0;  StandaloneThroughputLogger stl=new StandaloneThroughputLogger(150000);  while (true) {    for (    String campaign : campaigns) {      campaignUpdates++;      long now=System.currentTimeMillis();      stl.observe(now);      if (campaignUpdates % 50000 == 0) {        System.out.println("Updated " + campaignUpdates + " windows. Redis ops: "+ stl.getObservations());      }      String timestamp=Long.toString(now % 10000);      String windowUUID=flush_jedis.hmget(campaign,timestamp).get(0);      stl.observe(now);      if (windowUUID == null) {        windowUUID=UUID.randomUUID().toString();        flush_jedis.hset(campaign,timestamp,windowUUID);        stl.observe(now);        String windowListUUID=flush_jedis.hmget(campaign,"windows").get(0);        stl.observe(now);        if (windowListUUID == null) {          windowListUUID=UUID.randomUUID().toString();          flush_jedis.hset(campaign,"windows",windowListUUID);          stl.observe(now);        }        flush_jedis.lpush(windowListUUID,timestamp);        stl.observe(now);      }      flush_jedis.hincrBy(windowUUID,"seen_count",1);      stl.observe(now);      flush_jedis.hset(windowUUID,"time_updated",Long.toString(System.currentTimeMillis()));      stl.observe(now);      flush_jedis.lpush("time_updated",Long.toString(System.currentTimeMillis()));      stl.observe(now);    }  }}  }
class C{  public ActiveMQRAMessage(final Message message,final ActiveMQRASession session){  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }  this.message=message;  this.session=session;}  }
class C{  private byte readByte() throws IOException {  return in.readByte();}  }
class C{  public void printElement(Element element){  boolean hasChildren=element.hasChildNodes();  startTag(element,hasChildren);  if (hasChildren) {    boolean prevWasText=false;    NodeList children=element.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      Node node=children.item(i);      if (node instanceof Element) {        if (!prevWasText) {          println();        }        printElement((Element)children.item(i));        prevWasText=false;      } else       if (node instanceof Text) {        print(getEscaped(node.getNodeValue()));        prevWasText=true;      }    }    if (!prevWasText) {      println();    }    endTag(element);  }}  }
class C{  public KernelCount[][] computeMatchesForEachObservations(boolean giveListOfCorrelatedPoints) throws Exception {  KernelCount[][] counts=new KernelCount[totalObservations][4];  for (int b=0; b < totalObservations; b++) {    int[] intCounts=getCounts(destNextPastSourceVectors[b],b);    counts[b]=new KernelCount[4];    for (int i=0; i < 4; i++) {      int totalObsCount=0;      if (dynCorrExcl) {        int closeTimePointsToCompare=(b >= dynCorrExclTime) ? dynCorrExclTime - 1 : b;        closeTimePointsToCompare+=(totalObservations - b >= dynCorrExclTime) ? dynCorrExclTime - 1 : totalObservations - b - 1;        closeTimePointsToCompare++;        totalObsCount=totalObservations - closeTimePointsToCompare;      } else {        totalObsCount=totalObservations;      }      counts[b][i]=new KernelCount(intCounts[i],totalObsCount);    }  }  return counts;}  }
class C{  public String toString(){  return str;}  }
class C{  public List<byte[]> hvals(final byte[] key){  checkIsInMulti();  client.hvals(key);  final List<byte[]> lresult=client.getBinaryMultiBulkReply();  return lresult;}  }
class C{  public synchronized void onProcessingResource(final Resource resource){  totalResources++;  log.debug("processing resource: " + resource.getUri());  if (isLogRequired()) {    log.info("Processed until now: " + getTotalResources() + ". Last processed: "+ resource.getUri());    updateLastInvocation();  }}  }
class C{  public synchronized void log(Level msgLevel,String sourceClass,String sourceMethod,String msg,Throwable thrown){  LogRecord record=new LogRecord(msgLevel,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setThrown(thrown);  log(record);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnewchilddiffdocument.class,args);}  }
class C{  public DistributedLogClientBuilder serverSets(ServerSet local,ServerSet... remotes){  DistributedLogClientBuilder newBuilder=newBuilder(this);  RoutingService.Builder[] builders=new RoutingService.Builder[remotes.length + 1];  builders[0]=RoutingUtils.buildRoutingService(local);  for (int i=1; i < builders.length; i++) {    builders[i]=RoutingUtils.buildRoutingService(remotes[i - 1]);  }  newBuilder._routingServiceBuilder=RegionsRoutingService.newBuilder().resolver(_regionResolver).routingServiceBuilders(builders);  newBuilder._enableRegionStats=remotes.length > 0;  return newBuilder;}  }
class C{  public static void clearTabContext(Properties ctx,int WindowNo,int TabNo){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  Object[] keys=ctx.keySet().toArray();  for (int i=0; i < keys.length; i++) {    String tag=keys[i].toString();    if (tag.startsWith(WindowNo + "|" + TabNo+ "|") && !tag.startsWith(WindowNo + "|" + TabNo+ "|_TabInfo")) {      ctx.remove(keys[i]);    }  }}  }
class C{  public static StyledString styleDecoratedString(String decoratedString,StyledString.Styler decorationStyler,StyledString styledString){  String label=styledString.getString();  int originalStart=decoratedString.indexOf(label);  if (originalStart == -1) {    return new StyledString(decoratedString);  }  if (decoratedString.length() == label.length())   return styledString;  if (originalStart > 0) {    StyledString newString=new StyledString(decoratedString.substring(0,originalStart),decorationStyler);    newString.append(styledString);    styledString=newString;  }  if (decoratedString.length() > originalStart + label.length()) {    return styledString.append(decoratedString.substring(originalStart + label.length()),decorationStyler);  }  return styledString;}  }
class C{  protected List<Field> allFields(final Class<?> c){  List<Field> l=fieldsCache.get(c);  if (l == null) {    l=new LinkedList<Field>();    final Field[] fields=c.getDeclaredFields();    addAll(l,fields);    Class<?> sc=c;    while ((sc=sc.getSuperclass()) != Object.class && sc != null) {      addAll(l,sc.getDeclaredFields());    }    fieldsCache.putIfAbsent(c,l);  }  return l;}  }
class C{  public CertificateEncodingException(){  super();}  }
class C{  public void testGetWord(){  Word result=service.getWord(customizationId,"string").execute();  assertNotNull(result);}  }
class C{  protected SelectedSparseObjectMatrix2D(int rows,int columns,AbstractIntObjectMap elements,int rowZero,int columnZero,int rowStride,int columnStride,int[] rowOffsets,int[] columnOffsets,int offset){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  @Override public void doPreExplode(){  if (!this.worldObj.isRemote) {    this.worldObj.createExplosion(this.exploder,position.xPos,position.yPos,position.zPos,4F,true);    this.lightBeam=new EntityLightBeam(this.worldObj,position,20 * 20,this.red,this.green,this.blue);    this.worldObj.spawnEntityInWorld(this.lightBeam);    this.thread=new ThreadSky(worldObj,this.position,(int)this.getRadius(),50,this.exploder);    this.thread.start();  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public void bindAnswer(String answer){  mAnswerText.setText(answer);  if (mGivenAnswer != null && mGivenAnswer.equals(answer)) {    mAnswerText.setTextColor(colorRight);  }}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  protected void handleStartedStage(final State current){switch (current.taskInfo.subStage) {case RETRIEVE_HOST:    retrieveHost(current);  break;case COPY_IMAGE:copyImage(current);break;default :throw new IllegalStateException("Un-supported substage" + current.taskInfo.subStage.toString());}}  }
class C{  private AnnotatedTypeMirror fromExpression(ExpressionTree tree){  if (shouldCache && fromTreeCache.containsKey(tree)) {    return fromTreeCache.get(tree).deepCopy();  }  AnnotatedTypeMirror result=TypeFromTree.fromExpression(this,tree);  annotateInheritedFromClass(result);  if (shouldCache) {    fromTreeCache.put(tree,result.deepCopy());  }  return result;}  }
class C{  public void test(String expectedContextProto,String[] expectedDefaultProtos) throws NoSuchAlgorithmException {  SSLContext context=null;  try {    if (expectedContextProto != null) {      context=SSLContext.getInstance(expectedContextProto);      context.init(null,null,null);    } else {      context=SSLContext.getDefault();    }    printContextDetails(context);  } catch (  KeyManagementException ex) {    error(null,ex);  }  validateContext(expectedContextProto,expectedDefaultProtos,context);}  }
class C{  private Object buildObject(Row row,PersistenceSettings settings){  if (row == null)   return null;  PersistenceStrategy stg=settings.getStrategy();  Class clazz=settings.getJavaClass();  String col=settings.getColumn();  if (PersistenceStrategy.PRIMITIVE == stg)   return PropertyMappingHelper.getCassandraColumnValue(row,col,clazz,null);  if (PersistenceStrategy.BLOB == stg)   return settings.getSerializer().deserialize(row.getBytes(col));  List<PojoField> fields=settings.getFields();  Object obj;  try {    obj=clazz.newInstance();  } catch (  Throwable e) {    throw new IgniteException("Failed to instantiate object of type '" + clazz.getName() + "' using reflection",e);  }  for (  PojoField field : fields) {    if (!field.calculatedField())     field.setValueFromRow(row,obj,settings.getSerializer());  }  return obj;}  }
class C{  public byte[] unpad(byte[] padded,int ofs,int len) throws BadPaddingException {  return unpad(RSACore.convert(padded,ofs,len));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double hasLowerNeighbour=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          hasLowerNeighbour=1;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z && z2 != noData) {              hasLowerNeighbour=noData;            }          }          output.setValue(row,col,hasLowerNeighbour);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void layoutComponents(){  JPanel contentPane=(JPanel)getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.setBorder(new EmptyBorder(10,10,10,10));  contentPane.add("Center",createMainPanel());  contentPane.add("South",createButtonPanel());}  }
class C{  public ReferenceEntry(AbstractReferenceMap parent,HashEntry next,int hashCode,Object key,Object value){  super(next,hashCode,null,null);  this.parent=parent;  this.key=toReference(parent.keyType,key,hashCode);  this.value=toReference(parent.valueType,value,hashCode);}  }
class C{  public static String toString(double[][] matrix){  String retVal="";  int m=matrix.length;  int n=matrix[0].length;  for (int i=0; i < m; ++i) {    for (int j=0; j < n; ++j) {      retVal+=fillString(Double.toString(matrix[i][j]),24);    }    retVal+="\n";  }  return (retVal);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  int position=_position;  if (length < 0) {    throw new IllegalArgumentException();  }  if (_indexAddress < position + length) {    throw new IllegalArgumentException(L.l("Segment write overflow pos=0x{0} len=0x{1} entry-head=0x{2} seg-len=0x{3}. {4}",Long.toHexString(_position),Long.toHexString(length),Long.toHexString(_indexAddress),Long.toHexString(_segment.length()),_segment));  }  _sOut.write(_segment.getAddress() + position,buffer,offset,length);  _position=position + length;  _isDirty=true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean nextLine() throws IOException {  while (reader.readLine(buf.delete(0,buf.length()))) {    ++lineNumber;    if (lengthWithoutLinefeed(buf) > 0) {      return true;    }  }  return false;}  }
class C{  public void onDestroy(){  ServiceWatchDog.getInstance().notifyServiceDestroy();  if (errorHandler != null) {    try {      unregisterReceiver(errorHandler);    } catch (    Exception e) {    }  }  log.debug("MurmurService onDestroy");  mBackgroundExecution.cancel(true);  SharedPreferences pref=getSharedPreferences(MainActivity.PREF_FILE,Context.MODE_PRIVATE);  if (pref.contains(MainActivity.WIFI_NAME) && mWifiDirectSpeaker != null) {    log.debug("Restoring wifi name");    mWifiDirectSpeaker.setWifiDirectUserFriendlyName(pref.getString(MainActivity.WIFI_NAME,""));  }  mPeerManager.forgetAllPeers();  mWifiDirectSpeaker.dismissNoWifiNotification();  mBluetoothSpeaker.unregisterReceiver(this);  mBluetoothSpeaker.dismissNoBluetoothNotification();  mBluetoothSpeaker.destroyListeningSocket();  log.debug("MurmurService destroyed");}  }
class C{  public void splash(Object splash){  this.splash=Objects.requireNonNull(splash);}  }
class C{  public StringBuffer append(double d){  RealToString.getInstance().appendDouble(this,d);  return this;}  }
class C{  public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){  try {    PrincipalName princ=new PrincipalName(principal.getName());    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);    this.keyBytes=key.getBytes();    this.keyType=key.getEType();  } catch (  KrbException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MatrixNode)   matrix=(MatrixNode)child; else   super.addChild(child);}  }
class C{  protected SVGOMTRefElement(){}  }
class C{  private boolean canPaste(){  if (items == null || items.isEmpty()) {    return false;  }  Selection<?> selection=projectExplorer.getSelection();  if (selection == null || !selection.isSingleSelection()) {    return false;  }  Object headElement=selection.getHeadElement();  if (!(headElement instanceof HasStorablePath && headElement instanceof ResourceBasedNode<?> && !((ResourceBasedNode)headElement).isLeaf())) {    return false;  }  HasStorablePath selectedNode=(HasStorablePath)headElement;  if (selectedNode.getStorablePath().equals(checkedPath)) {    return checkResult;  }  checkedPath=selectedNode.getStorablePath();  for (  ResourceBasedNode<?> item : items) {    if (item.isLeaf()) {      if (((HasStorablePath)item).getStorablePath().equals(selectedNode.getStorablePath())) {        checkResult=false;        return false;      }      if (selectedNode.getStorablePath().startsWith(((HasStorablePath)item).getStorablePath())) {        checkResult=false;        return false;      }      if (moveItems) {        String folderDirectory=((HasStorablePath)item).getStorablePath().substring(0,((HasStorablePath)item).getStorablePath().lastIndexOf("/"));        if (!((ResourceBasedNode<?>)selectedNode).isLeaf()) {          if (selectedNode.getStorablePath().equals(folderDirectory)) {            checkResult=false;            return false;          }        } else {          String fileDirectory=selectedNode.getStorablePath().substring(0,selectedNode.getStorablePath().lastIndexOf("/"));          if (fileDirectory.equals(fileDirectory)) {            checkResult=false;            return false;          }        }      }    } else {      if (!((ResourceBasedNode<?>)selectedNode).isLeaf()) {        if (moveItems) {          String folderPath=selectedNode.getStorablePath();          String fileDirectory=((HasStorablePath)item).getStorablePath().substring(0,((HasStorablePath)item).getStorablePath().lastIndexOf("/"));          if (moveItems && folderPath.equals(fileDirectory)) {            checkResult=false;            return false;          }        }      } else {        if (moveItems) {          String selectedFileDirectory=selectedNode.getStorablePath().substring(0,selectedNode.getStorablePath().lastIndexOf("/"));          String fileDirectory=((HasStorablePath)item).getStorablePath().substring(0,((HasStorablePath)item).getStorablePath().lastIndexOf("/"));          if (selectedFileDirectory.equals(fileDirectory)) {            checkResult=false;            return false;          }        }      }    }  }  checkResult=true;  return true;}  }
class C{  public static BigInteger[] extgcd(BigInteger a,BigInteger b){  BigInteger u=ONE;  BigInteger v=ZERO;  BigInteger d=a;  if (b.signum() != 0) {    BigInteger v1=ZERO;    BigInteger v3=b;    while (v3.signum() != 0) {      BigInteger[] tmp=d.divideAndRemainder(v3);      BigInteger q=tmp[0];      BigInteger t3=tmp[1];      BigInteger t1=u.subtract(q.multiply(v1));      u=v1;      d=v3;      v1=t1;      v3=t3;    }    v=d.subtract(a.multiply(u)).divide(b);  }  return new BigInteger[]{d,u,v};}  }
class C{  protected MoreGuards_Impl(){  super();}  }
class C{  public static JournalStore createMmap(Path path) throws IOException {  return create(path,true);}  }
class C{  protected static double eq24(final double beta_i,final double gN,final double gP,final double U){  double vi=0;  if (beta_i == 0) {    if (gN >= 0)     vi=gN; else     if (gP <= 0)     vi=-gP;  } else {    if (beta_i < 0) {      if (beta_i > -U || (beta_i == -U && gN <= 0))       vi=Math.abs(gN);    } else {      if (beta_i < U || (beta_i == U && gP >= 0))       vi=Math.abs(gP);    }  }  return vi;}  }
class C{  @Override public void bezierDetail(int detail){}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  private static void genSVR4ParameterPassingCode(Assembler asm,TypeReference[] types,int nextVMArgReg,int nextVMArgFloatReg,int spillOffsetVM,int nextOSArgReg,int nextOSArgFloatReg,int spillOffsetOS){  if (VM.BuildForSVR4ABI) {    int numArguments=types.length;    Assembler[] asmForArgs=new Assembler[numArguments];    for (int arg=0; arg < numArguments; arg++) {      asmForArgs[arg]=new Assembler(0);      Assembler asmArg=asmForArgs[arg];      if (types[arg].isFloatType() || types[arg].isDoubleType()) {        boolean is32bits=types[arg].isFloatType();        FPR srcVMArg;        if (nextVMArgFloatReg <= LAST_VOLATILE_FPR.value()) {          srcVMArg=FPR.lookup(nextVMArgFloatReg);          nextVMArgFloatReg++;        } else {          srcVMArg=FIRST_SCRATCH_FPR;          if (is32bits) {            spillOffsetVM+=BYTES_IN_STACKSLOT;            asmArg.emitLFS(srcVMArg,spillOffsetVM - BYTES_IN_FLOAT,FP);          } else {            asmArg.emitLFD(srcVMArg,spillOffsetVM,FP);            spillOffsetVM+=BYTES_IN_DOUBLE;          }        }        if (nextOSArgFloatReg <= LAST_OS_PARAMETER_FPR.value()) {          nextOSArgFloatReg++;        } else {          if (VM.BuildForSVR4ABI) {            if (is32bits) {              asmArg.emitSTFS(srcVMArg,spillOffsetOS,FP);              spillOffsetOS+=BYTES_IN_ADDRESS;            } else {              spillOffsetOS=(spillOffsetOS + 7) & -8;              asmArg.emitSTFD(srcVMArg,spillOffsetOS,FP);              spillOffsetOS+=BYTES_IN_DOUBLE;            }          }        }      } else       if (types[arg].isLongType() && VM.BuildFor32Addr) {        boolean dstSpilling;        int regOrSpilling=-1;        if (nextOSArgReg > (LAST_OS_PARAMETER_GPR.value() - 1)) {          dstSpilling=true;          if (VM.BuildForSVR4ABI) {            nextOSArgReg=LAST_OS_PARAMETER_GPR.value() + 1;            spillOffsetOS=(spillOffsetOS + 7) & -8;            regOrSpilling=spillOffsetOS;            spillOffsetOS+=BYTES_IN_LONG;          }        } else {          dstSpilling=false;          if (VM.BuildForSVR4ABI) {            nextOSArgReg+=(nextOSArgReg + 1) & 0x01;            regOrSpilling=nextOSArgReg;            nextOSArgReg+=2;          }        }        if (nextVMArgReg < LAST_VOLATILE_GPR.value()) {          if (dstSpilling) {            asmArg.emitSTW(GPR.lookup(nextVMArgReg + 1),regOrSpilling + 4,FP);            if (VM.BuildForSVR4ABI) {              asmArg.emitSTW(GPR.lookup(nextVMArgReg),regOrSpilling,FP);            }          } else {            asmArg.emitMR(GPR.lookup(regOrSpilling + 1),GPR.lookup(nextVMArgReg + 1));            asmArg.emitMR(GPR.lookup(regOrSpilling),GPR.lookup(nextVMArgReg));          }          nextVMArgReg+=2;        } else         if (nextVMArgReg == LAST_VOLATILE_GPR.value()) {          if (dstSpilling) {            asmArg.emitLWZ(REGISTER_ZERO,spillOffsetVM,FP);            asmArg.emitSTW(REGISTER_ZERO,regOrSpilling + 4,FP);            asmArg.emitSTW(GPR.lookup(nextVMArgReg),regOrSpilling,FP);          } else {            asmArg.emitLWZ(GPR.lookup(regOrSpilling + 1),spillOffsetVM,FP);            asmArg.emitMR(GPR.lookup(regOrSpilling),GPR.lookup(nextVMArgReg));          }          nextVMArgReg++;          spillOffsetVM+=BYTES_IN_STACKSLOT;        } else         if (nextVMArgReg > LAST_VOLATILE_GPR.value()) {          if (dstSpilling) {            asmArg.emitLFD(FIRST_SCRATCH_FPR,spillOffsetVM,FP);            asmArg.emitSTFD(FIRST_SCRATCH_FPR,regOrSpilling,FP);          } else {            asmArg.emitLWZ(GPR.lookup(regOrSpilling + 1),spillOffsetVM + 4,FP);            asmArg.emitLWZ(GPR.lookup(regOrSpilling),spillOffsetVM,FP);          }          spillOffsetVM+=BYTES_IN_LONG;        }      } else       if (types[arg].isLongType() && VM.BuildFor64Addr) {        boolean dstSpilling;        int regOrSpilling=-1;        if (nextOSArgReg > LAST_OS_PARAMETER_GPR.value()) {          dstSpilling=true;          nextOSArgReg=LAST_OS_PARAMETER_GPR.value() + 1;          spillOffsetOS=(spillOffsetOS + 7) & -8;          regOrSpilling=spillOffsetOS;          spillOffsetOS+=BYTES_IN_LONG;        } else {          dstSpilling=false;          regOrSpilling=nextOSArgReg;          nextOSArgReg+=1;        }        if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          if (dstSpilling) {            asmArg.emitSTD(GPR.lookup(nextVMArgReg),regOrSpilling,FP);          } else {            asmArg.emitMR(GPR.lookup(regOrSpilling),GPR.lookup(nextVMArgReg));          }          nextVMArgReg+=1;        } else         if (nextVMArgReg > LAST_VOLATILE_GPR.value()) {          if (dstSpilling) {            asmArg.emitLFD(FIRST_SCRATCH_FPR,spillOffsetVM,FP);            asmArg.emitSTFD(FIRST_SCRATCH_FPR,regOrSpilling,FP);          } else {            asmArg.emitLD(GPR.lookup(regOrSpilling),spillOffsetVM,FP);          }          spillOffsetVM+=BYTES_IN_LONG;        }      } else       if (types[arg].isReferenceType()) {        GPR srcreg;        if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          srcreg=GPR.lookup(nextVMArgReg++);        } else {          srcreg=REGISTER_ZERO;          asmArg.emitLAddr(srcreg,spillOffsetVM,FP);          spillOffsetVM+=BYTES_IN_ADDRESS;        }        asmArg.emitCMPI(srcreg,0);        ForwardReference isNull=asmArg.emitForwardBC(EQ);        asmArg.emitSTAddrU(srcreg,BYTES_IN_ADDRESS,KLUDGE_TI_REG);        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          asmArg.emitSUBFC(GPR.lookup(nextOSArgReg),THREAD_REGISTER,KLUDGE_TI_REG);        } else {          asmArg.emitSUBFC(REGISTER_ZERO,THREAD_REGISTER,KLUDGE_TI_REG);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS,FP);        }        ForwardReference done=asmArg.emitForwardB();        isNull.resolve(asmArg);        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          asmArg.emitLVAL(GPR.lookup(nextOSArgReg),0);        } else {          asmArg.emitSTAddr(srcreg,spillOffsetOS,FP);        }        done.resolve(asmArg);        if (VM.BuildForSVR4ABI) {          if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {            nextOSArgReg++;          } else {            spillOffsetOS+=BYTES_IN_ADDRESS;          }        }      } else {        if (nextOSArgReg <= LAST_OS_PARAMETER_GPR.value()) {          if (VM.BuildForSVR4ABI) {            asmArg.emitMR(GPR.lookup(nextOSArgReg++),GPR.lookup(nextVMArgReg++));          } else {            asmArg.emitMR(GPR.lookup(nextOSArgReg),GPR.lookup(nextVMArgReg++));          }        } else         if (nextVMArgReg <= LAST_VOLATILE_GPR.value()) {          asmArg.emitSTAddr(GPR.lookup(nextVMArgReg++),spillOffsetOS,FP);          if (VM.BuildForSVR4ABI) {            spillOffsetOS+=BYTES_IN_ADDRESS;          }        } else {          spillOffsetVM+=BYTES_IN_STACKSLOT;          asmArg.emitLInt(REGISTER_ZERO,spillOffsetVM - BYTES_IN_INT,FP);          asmArg.emitSTAddr(REGISTER_ZERO,spillOffsetOS,FP);          if (VM.BuildForSVR4ABI) {            spillOffsetOS+=BYTES_IN_ADDRESS;          }        }      }    }    for (int arg=asmForArgs.length - 1; arg >= 0; arg--) {      asm.appendInstructions(asmForArgs[arg].getMachineCodes());    }  }}  }
class C{  public static long pow(long a,int e){  long result=1;  while (e > 0) {    if ((e & 1) == 1) {      result*=a;    }    a*=a;    e>>>=1;  }  return result;}  }
class C{  private static void increment(byte[] b){  int n=b.length - 1;  while ((n >= 0) && (++b[n] == 0)) {    n--;  }}  }
class C{  public SkipMeException(int code,Object... args){  this(Warning.parse(code,args));}  }
class C{  public static GraphModel buildFromEdges(Collection<GraphEdge> sourceEdges){  GraphModel result=new GraphModel();  for (  GraphEdge e : sourceEdges) {    GraphNode head=(GraphNode)result.mapNode(e.getHead());    GraphNode tail=(GraphNode)result.mapNode(e.getTail());    result.addEdge(e.getRelation(),head,tail);  }  return result;}  }
class C{  public FileResolver(){}  }
class C{  public static File configDir(){  lock.readLock().lock();  try {    return config_dir;  }  finally {    lock.readLock().unlock();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.972 -0500",hash_original_method="AFB6FAED7CE2C798D2C88DCB60C1E3BA",hash_generated_method="5052780A51C172A7104F8230B21D9B2E") public void processInput(){  mythread.start();}  }
class C{  private void enableActions(){  restoreAction.setEnabled(isParentMaximum() || isParentIcon());  maximizeAction.setEnabled((isParentMaximizable() && !isParentMaximum() && !isParentIcon()) || (isParentMaximizable() && isParentIcon()));  iconifyAction.setEnabled(isParentIconifiable() && !isParentIcon());  closeAction.setEnabled(isParentClosable());  sizeAction.setEnabled(false);  moveAction.setEnabled(false);}  }
class C{  public void triggerFinishCallback(int cbid,int listId,int listPc,int callbackNotifyArg1){  triggerAsyncCallback(cbid,listId,listPc,PSP_GE_SIGNAL_HANDLER_SUSPEND,callbackNotifyArg1,finishCallbacks);}  }
class C{  public T caseParameterizedAccess(ParameterizedAccess object){  return null;}  }
class C{  public SubscriptionMigrationException(String message,Reason reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addInvokestatic(String classname,String name,String desc){  addInvokestatic(constPool.addClassInfo(classname),name,desc);}  }
class C{  public void writeRawBytes(final byte[] value) throws IOException {  writeRawBytes(value,0,value.length);}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(StatusBarSettings.FIREWALL_DISPLAY_ENABLED.getValue());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static boolean isDocumentAnnotation(FeatureStructure aFS){  return (aFS instanceof AnnotationFS) && aFS.equals(((AnnotationFS)aFS).getView().getDocumentAnnotation());}  }
class C{  public WikipediaInfo(Iterable<Page> pPages) throws WikiApiException {  if (pPages == null) {    throw new WikiApiException("The page set has to be initialized.");  }  pages=pPages;  averageFanOut=-1.0;  degreeDistribution=new HashMap<Integer,Integer>();  categorizedArticleSet=new HashSet<Integer>();  numberOfPages=0;  while (pages.iterator().hasNext()) {    numberOfPages++;    pages.iterator().next();  }}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  public Object run(GroovyCodeSource source,List args) throws CompilationFailedException {  return run(source,((String[])args.toArray(new String[args.size()])));}  }
class C{  public Optional<T> ifPresent(Action1<? super T> action){  if (value != null)   action.call(value);  return this;}  }
class C{  private void convertInstance(Instance inst){  if (getInputFormat().classAttribute().isNominal()) {    convertInstanceNominal(inst);  } else {    convertInstanceNumeric(inst);  }}  }
class C{  public V put(long key,V value){  boolean wasFree=false;  V previous=null;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=unwrapNull(_values[index]);    isNewMapping=false;  } else {    wasFree=isFree(_values,index);  }  _set[index]=key;  _values[index]=wrapNull(value);  if (isNewMapping) {    postInsertHook(wasFree);  }  return previous;}  }
class C{  public static String createCounterName(String switchID,int portID,String counterName){  if (portID < 0) {    return switchID + TitleDelimitor + counterName;  } else {    return switchID + TitleDelimitor + portID+ TitleDelimitor+ counterName;  }}  }
class C{  protected void addNodesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionRegion_nodes_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionRegion_nodes_feature","_UI_ExecutionRegion_type"),SexecPackage.Literals.EXECUTION_REGION__NODES,true,false,true,null,null,null));}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (!processUpdates) {    deviceListeners.clearListeners();  }  VlanVid v;  IPv4Address i;  DatapathId d;  OFPort p;  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;  if (vlan == null) {    v=VlanVid.ofVlan(-1);  } else {    v=VlanVid.ofVlan(vlan);  }  if (ipv4Address == null) {    i=IPv4Address.NONE;  } else {    i=IPv4Address.of(ipv4Address);  }  if (switchDPID == null) {    d=DatapathId.of(0);  } else {    d=DatapathId.of(switchDPID.longValue());  }  if (switchPort == null) {    p=OFPort.ZERO;  } else {    p=OFPort.of(switchPort);  }  IDevice res=learnDeviceByEntity(new Entity(MacAddress.of(macAddress),v,i,d,p,new Date()));  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      deviceListeners.addListener("device",listener);    }  }  return res;}  }
class C{  public SystemPermissionModel(){}  }
class C{  @Override protected void mergeMeasures(DataMatrix merge,RawRow leftrow,RawRow rightrow,RawRow merged){  int pos=merge.getAxesSize();  int size=left != null ? left.getDataSize() : (right != null ? right.getDataSize() : 0);  for (int i=0; i < size; i++) {    Object leftValue=left != null && leftrow != null ? left.getDataValue(i,leftrow) : null;    Object rightValue=right != null && rightrow != null ? right.getDataValue(i,rightrow) : null;    merged.data[pos++]=leftValue;    merged.data[pos++]=rightValue;    if (computeGrowth) {      if (leftValue != null && rightValue != null) {        if (leftValue instanceof Number && rightValue instanceof Number) {          float leftf=((Number)leftValue).floatValue();          float rightf=((Number)rightValue).floatValue();          if (rightf != 0) {            float growth=(leftf - rightf) * 100 / rightf;            merged.data[pos]=growth;          }        }      }      pos++;    }  }}  }
class C{  public synchronized boolean hasAnyRelationshipToTargetOfType(Vertex classification){  Iterator<Relationship> relationships=allRelationships();  while (relationships.hasNext()) {    Relationship relationship=relationships.next();    if (!relationship.isInverse() && relationship.getTarget().hasRelationship(Primitive.INSTANTIATION,classification)) {      return true;    }  }  return false;}  }
class C{  public boolean isBurning(Coords coords){  return burning.get(coords);}  }
class C{  public static OutputLimitClause create(String frequencyVariable){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,frequencyVariable);}  }
class C{  @DSComment("Syncing file with storage") @DSSafe(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.711 -0500",hash_original_method="84EEC9A137856593BBF0A90E4A96E319",hash_generated_method="C8E75F8E8502693FBE5612B9F636D819") public void sync() throws SyncFailedException {  try {    Libcore.os.fsync(this);  } catch (  ErrnoException errnoException) {    SyncFailedException sfe=new SyncFailedException(errnoException.getMessage());    sfe.initCause(errnoException);    throw sfe;  }}  }
class C{  public ExportDisplayAction(Display display){  this.display=display;}  }
class C{  public void flushPendingWrites(){synchronized (mPendingWritesLock) {    if (mPendingWrites.isEmpty())     return;    new UpdateDbTask(getContext(),sOpenHelper,mPendingWrites,mLocale).execute();    mPendingWrites=new HashSet<Bigram>();  }}  }
class C{  public static BinaryVariable newBinary(int length){  return new BinaryVariable(length);}  }
class C{  @Override public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  int[] updateLayoutArray(int[] oldArray,int offset,int nInserted){  int n=getViewCount();  int[] newArray=new int[n];  System.arraycopy(oldArray,0,newArray,0,offset);  System.arraycopy(oldArray,offset,newArray,offset + nInserted,n - nInserted - offset);  return newArray;}  }
class C{  public LocationOperand(RVMField loc){  type=FIELD_ACCESS;  fieldRef=loc.getMemberRef().asFieldReference();}  }
class C{  public static List<String> partitionNameToValues(HiveMetastoreClient ms,String partitionName) throws HiveMetastoreException {  Map<String,String> kv=ms.partitionNameToMap(partitionName);  List<String> values=new ArrayList<>();  for (  String equalsExpression : partitionName.split("/")) {    String[] equalsExpressionSplit=equalsExpression.split("=");    String key=equalsExpressionSplit[0];    if (!kv.containsKey(key)) {      return null;    }    values.add(kv.get(key));  }  return values;}  }
class C{  protected void crop(){  if (children.length != childCount) {    children=(PShape[])PApplet.subset(children,0,childCount);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String generateCreateTableDdl(BusinessObjectFormatDdlRequest request,BusinessObjectFormatEntity businessObjectFormatEntity,CustomDdlEntity customDdlEntity){  Boolean isPartitioned=!businessObjectFormatEntity.getPartitionKey().equalsIgnoreCase(NO_PARTITIONING_PARTITION_KEY);  GenerateDdlRequest generateDdlRequest=new GenerateDdlRequest();  generateDdlRequest.businessObjectFormatEntity=businessObjectFormatEntity;  generateDdlRequest.customDdlEntity=customDdlEntity;  generateDdlRequest.isPartitioned=isPartitioned;  generateDdlRequest.tableName=request.getTableName();  generateDdlRequest.includeDropTableStatement=request.isIncludeDropTableStatement();  generateDdlRequest.includeIfNotExistsOption=request.isIncludeIfNotExistsOption();  return generateCreateTableDdlHelper(generateDdlRequest);}  }
class C{  private void addPropertyEditorIfNecessary(Class<?> targetClass){  if (!registerPropertyEditors) {    return;  }  PropertyEditor editor=PropertyEditorManager.findEditor(targetClass);  if (null != editor) {    return;  }  String className=targetClass.getName();  if (targetClass.isPrimitive()) {    return;  }  for (  String standardClass : STANDARD_BY_TYPE_CONVERTER_CLASSES) {    if (-1 != standardClass.indexOf(className)) {      return;    }  }  Class<?> editorClass=ConverterPropertyEditorFactory.getDefaultInstance().definePropertyEditorClassFor(targetClass);  if (editorClass != null) {    PropertyEditorManager.registerEditor(targetClass,editorClass);  } else {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.warning(MessageFormat.format("definePropertyEditorClassFor({0}) returned null.",targetClass.getName()));    }  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private FilePart rollOver() throws IOException {  if (currentLastBytePos > -1) {    throw new IllegalStateException("Current currentLastCharPos unexpectedly positive... " + "last readLine() should have returned something! currentLastCharPos=" + currentLastBytePos);  }  if (no > 1) {    return new FilePart(no - 1,blockSize,leftOver);  } else {    if (leftOver != null) {      throw new IllegalStateException("Unexpected leftover of the last block: leftOverOfThisFilePart=" + new String(leftOver,encoding));    }    return null;  }}  }
class C{  private void scrollDialogToValue(String value,AlertDialog dialog,int containerId){  Log.d(DEBUG_TAG,"scrollDialogToValue scrolling to " + value);  final View sv=(View)dialog.findViewById(R.id.myScrollView);  if (sv != null) {    ViewGroup container=(ViewGroup)dialog.findViewById(containerId);    if (container != null) {      for (int pos=0; pos < container.getChildCount(); pos++) {        View child=container.getChildAt(pos);        Object tag=child.getTag();        if (tag != null && tag instanceof StringWithDescription && ((StringWithDescription)tag).equals(value)) {          final View finalChild=child;          Util.scrollToRow(sv,finalChild,true,true);          return;        }      }    } else {      Log.d(DEBUG_TAG,"scrollDialogToValue container view null");    }  } else {    Log.d(DEBUG_TAG,"scrollDialogToValue scroll view null");  }}  }
class C{  public Relationship bestResponse(float percentage,Vertex input,Vertex sentence,Vertex question,Vertex previousResponse,Network network){  return bestResponse(percentage,input,sentence,question,previousResponse,true,true,null,null,null,network);}  }
class C{  private void openTestAction(String file,String name) throws ParserConfigurationException, SAXException, IOException {  this.currentFileName=name + ".xml";  int option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.test.open.warning.text"),MessageFormat.format(Messages.getString("dialog.test.open.warning.title"),name),JOptionPane.YES_NO_CANCEL_OPTION);  if (option == JOptionPane.YES_OPTION) {    String simName=Simulation.DEFAULT_SIMULATION_NAME;synchronized (Simulation.LOCK) {      this.simulation=XmlReader.fromXml(this.getClass().getResourceAsStream(file));      simName=this.simulation.getWorld().getUserData().toString();      this.pnlSimulation.setSimulation(this.simulation);      this.pnlContacts.setContactCounter(this.simulation.getContactCounter());    }    this.clearAllSnapshots();    this.setTitle(this.getWindowTitle() + " - " + simName);    this.setCompiledSimulation(false);  }}  }
class C{  private void processEmail(EmailData emailData){  if (logger.isTraceEnabled()) {    logger.trace("Entered MailManager:processEmail");  }  if (mailHost == null || mailHost.length() == 0 || emailData == null || mailToAddresses.length == 0) {    logger.error(LocalizedMessage.create(LocalizedStrings.MailManager_REQUIRED_MAILSERVER_CONFIGURATION_NOT_SPECIFIED));    if (logger.isDebugEnabled()) {      logger.debug("Exited MailManager:processEmail: Not sending email as conditions not met");    }    return;  }  Session session=Session.getDefaultInstance(getMailHostConfiguration());  MimeMessage mimeMessage=new MimeMessage(session);  String subject=emailData.subject;  String message=emailData.message;  String mailToList=getMailToAddressesAsString();  try {    for (int i=0; i < mailToAddresses.length; i++) {      mimeMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(mailToAddresses[i]));    }    if (subject == null) {      subject=LocalizedStrings.MailManager_ALERT_MAIL_SUBJECT.toLocalizedString();    }    mimeMessage.setSubject(subject);    if (message == null) {      message="";    }    mimeMessage.setText(message);    Transport.send(mimeMessage);    logger.info(LocalizedMessage.create(LocalizedStrings.MailManager_EMAIL_ALERT_HAS_BEEN_SENT_0_1_2,new Object[]{mailToList,subject,message}));  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable ex) {    SystemFailure.checkFailure();    StringBuilder buf=new StringBuilder();    buf.append(LocalizedStrings.MailManager_AN_EXCEPTION_OCCURRED_WHILE_SENDING_EMAIL.toLocalizedString());    buf.append(LocalizedStrings.MailManager_UNABLE_TO_SEND_EMAIL_PLEASE_CHECK_YOUR_EMAIL_SETTINGS_AND_LOG_FILE.toLocalizedString());    buf.append("\n\n").append(LocalizedStrings.MailManager_EXCEPTION_MESSAGE_0.toLocalizedString(ex.getMessage()));    buf.append("\n\n").append(LocalizedStrings.MailManager_FOLLOWING_EMAIL_WAS_NOT_DELIVERED.toLocalizedString());    buf.append("\n\t").append(LocalizedStrings.MailManager_MAIL_HOST_0.toLocalizedString(mailHost));    buf.append("\n\t").append(LocalizedStrings.MailManager_FROM_0.toLocalizedString(mailFrom));    buf.append("\n\t").append(LocalizedStrings.MailManager_TO_0.toLocalizedString(mailToList));    buf.append("\n\t").append(LocalizedStrings.MailManager_SUBJECT_0.toLocalizedString(subject));    buf.append("\n\t").append(LocalizedStrings.MailManager_CONTENT_0.toLocalizedString(message));    logger.error(buf.toString(),ex);  }  if (logger.isTraceEnabled()) {    logger.trace("Exited MailManager:processEmail");  }}  }
class C{  public ArraySet(int initialCapacity){  items=new ArrayList<E>(initialCapacity);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYItemKey)) {    return false;  }  XYItemKey that=(XYItemKey)obj;  if (!this.seriesKey.equals(that.seriesKey)) {    return false;  }  if (this.itemIndex != that.itemIndex) {    return false;  }  return true;}  }
class C{  public MultiImageSVGEditor(EditableResources res,String name){  initComponents();  this.res=res;  this.name=name;  imageName.setText(name);  zoom.setModel(new SpinnerNumberModel(1,0.5,20,0.5));  Vector users=new Vector();  ImageRGBEditor.findImageUse(name,users,res);  DefaultListModel d=new DefaultListModel();  for (  Object o : users) {    d.addElement(o);  }  componentList.setModel(d);}  }
class C{  @Override public boolean handleDeparture(double now,MobsimAgent agent,Id linkId){  if (this.modes.contains(agent.getMode())) {    handleAgentPTDeparture(agent,linkId);    return true;  }  return false;}  }
class C{  public final boolean isReservedApplicationCode(int colorIndex){  return colorIndex >= this.numOfLookupTableEntries;}  }
class C{  public XmlProperty(File file) throws IOException {  this.file=file;  if (!file.exists()) {    File tempFile;    tempFile=new File(file.getParentFile(),file.getName() + ".tmp");    if (tempFile.exists()) {      Log.error("WARNING: " + file.getName() + " was not found, but temp file from "+ "previous write operation was. Attempting automatic recovery."+ " Please check file for data consistency.");      tempFile.renameTo(file);    } else {      throw new FileNotFoundException("XML properties file does not exist: " + file.getName());    }  }  if (!file.canRead()) {    throw new IOException("XML properties file must be readable: " + file.getName());  }  if (!file.canWrite()) {    throw new IOException("XML properties file must be writable: " + file.getName());  }  FileReader reader=new FileReader(file);  lastModified=file.lastModified();  buildDoc(reader);}  }
class C{  private void updateInternal(boolean markDirty){  tableViewer.refresh();  updateCheckedItems();  updateButtonsState();  if (markDirty) {    markDirty();  }}  }
class C{  @SuppressWarnings({"unchecked","boxing"}) public void testSerializationCompatibility() throws Exception {  EnumMap enumColorMap=new EnumMap<Color,Double>(Color.class);  enumColorMap.put(Color.Red,1);  enumColorMap.put(Color.Blue,3);  SerializationTest.verifyGolden(this,enumColorMap);}  }
class C{  public static void recordBourneVolumeEvent(DbClient dbClient,URI id,String evtType,Operation.Status status,String desc) throws Exception {  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  Volume volumeObj=dbClient.queryObject(Volume.class,id);  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(volumeObj,evtType,desc,"",dbClient,ControllerUtils.BLOCK_EVENT_SERVICE,RecordType.Event.name(),ControllerUtils.BLOCK_EVENT_SOURCE);  try {    eventManager.recordEvents(event);    _logger.info("Bourne {} event recorded for Volume {}",evtType,id);  } catch (  Exception ex) {    _logger.error("Failed to record event. Event description: {}. Error: ",evtType,ex);  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private void initCommon(RSAKey rsaKey,SecureRandom random) throws InvalidKeyException {  resetDigest();  int keySize=RSACore.getByteLength(rsaKey);  try {    padding=RSAPadding.getInstance(RSAPadding.PAD_BLOCKTYPE_1,keySize,random);  } catch (  InvalidAlgorithmParameterException iape) {    throw new InvalidKeyException(iape.getMessage());  }  int maxDataSize=padding.getMaxDataSize();  if (encodedLength > maxDataSize) {    throw new InvalidKeyException("Key is too short for this signature algorithm");  }}  }
class C{  protected void release(BaseEvent event){  Info info=events.get(event);  if (info != null) {    if (info.refcount.decrementAndGet() == 0) {      events.remove(event);    }  } else {    log.warn("Release called on already released event.");  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public boolean onBackPressed(){  return getActiveLayout() != null && getActiveLayout().onBackPressed();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=getArg0AsString(xctxt);  return (XString)s1.fixWhiteSpace(true,true,false);}  }
class C{  public RequestCreator skipMemoryCache(){  skipMemoryCache=true;  return this;}  }
class C{  @LargeTest public void testErrorHttpDataError_invalidRedirect() throws Exception {  Uri uri=getServerUri(DEFAULT_FILENAME);  final MockResponse resp=buildResponse(HTTP_REDIRECT);  resp.setHeader("Location","://blah.blah.blah.com");  enqueueResponse(resp);  doErrorTest(uri,DownloadManager.ERROR_HTTP_DATA_ERROR);}  }
class C{  public void processItemBuffer(){  for (  String number : allItemMap.keySet()) {    IItem item=allItemMap.get(number);    if (getLog().isDebugEnabled()) {      getLog().debug("processing: " + item.getName());    }    StringTokenizer numberTokens=new StringTokenizer(number,".");    ((Item)getRoot()).processItem((Item)item,numberTokens);  }}  }
class C{  public void outputTypes(PrintWriter writer){  writer.println("==BEAST types==");  writer.println("");  writer.println("The following is a list of generic types that elements represent in a beast file.");  writer.println("");  for (  Class requiredType : requiredTypes) {    if (requiredType != Object.class) {      String name=ClassComparator.getName(requiredType);      System.out.println("  outputting Wiki for generic type " + name);      TreeSet<String> matchingParserNames=new TreeSet<String>();      Iterator i=parser.getParsers();      while (i.hasNext()) {        XMLObjectParser xmlParser=(XMLObjectParser)i.next();        Class returnType=xmlParser.getReturnType();        if (requiredType.isAssignableFrom(returnType)) {          matchingParserNames.add(xmlParser.getParserName());        }      }      if (!(matchingParserNames.size() == 1 && matchingParserNames.iterator().next().equals(name))) {        writer.println("===" + name + "===");        writer.println();        writer.println("Elements of this type include:");        writer.println();        i=matchingParserNames.iterator();        while (i.hasNext()) {          String parserName=(String)i.next();          writer.println(":*" + getWikiLink(parserName));        }        writer.println();      }    }  }}  }
class C{  public static void doubleBenchmarkPrimitiveOptimized(int runs,int rows,int columns,boolean print){  cern.colt.Timer timer1=new cern.colt.Timer();  cern.colt.Timer timer2=new cern.colt.Timer();  cern.colt.Timer timer3=new cern.colt.Timer();  cern.colt.Timer emptyLoop=new cern.colt.Timer();  cern.colt.Timer emptyLoop2=new cern.colt.Timer();  emptyLoop.start();  int dummy=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy++;      }    }  }  emptyLoop.stop();  System.out.println(dummy);  emptyLoop2.start();  dummy=3;  double dummy2=0;  for (int i=0; i < runs; i++) {    for (int column=0; column < columns; column++) {      for (int row=0; row < rows; row++) {        dummy2+=dummy;      }    }  }  emptyLoop2.stop();  System.out.println(dummy2);  long before=Runtime.getRuntime().freeMemory();  long size=(((long)rows) * columns) * runs;  double[][] matrix=new double[rows][columns];  System.out.println("\nNow filling...");  for (int i=0; i < runs; i++) {    timer1.start();    int value=0;    for (int row=0; row < rows; row++) {      double[] r=matrix[row];      for (int column=0; column < columns; column++) {        r[column]=value++;      }    }    timer1.stop();  }  timer1.display();  timer1.minus(emptyLoop).display();  System.out.println(size / timer1.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  long after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println("\nNow reading...");  timer2.start();  double element=0;  for (int i=0; i < runs; i++) {    for (int row=0; row < rows; row++) {      double[] r=matrix[row];      for (int column=0; column < columns; column++) {        element+=r[column];      }    }  }  timer2.stop().display();  timer2.minus(emptyLoop2).display();  System.out.println(size / timer2.minus(emptyLoop2).seconds() + " elements / sec");  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println(element);  System.out.println("\nNow removing...");  before=Runtime.getRuntime().freeMemory();  for (int i=0; i < runs; i++) {    timer3.start();    for (int row=0; row < rows; row++) {      double[] r=matrix[row];      for (int column=0; column < columns; column++) {        r[column]=0;      }    }    timer3.stop();  }  timer3.display();  timer3.minus(emptyLoop).display();  System.out.println(size / timer3.minus(emptyLoop).seconds() + " elements / sec");  Runtime.getRuntime().gc();  try {    Thread.currentThread().sleep(1000);  } catch (  InterruptedException exc) {  }  ;  after=Runtime.getRuntime().freeMemory();  System.out.println("KB needed=" + (before - after) / 1024);  System.out.println("KB free=" + (after / 1024));  if (print) {    DenseDoubleMatrix2D m=new DenseDoubleMatrix2D(rows,columns);    m.assign(matrix);    System.out.println(m);  }  System.out.println("bye bye.");}  }
class C{  static public boolean isTwoPartTLD(String domain){  return twoPartTLDs.contains(domain);}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void handleReplyMessage(Message msg){}  }
class C{  public int length(){  return text.length;}  }
class C{  protected void loadCubicPanoramaImage(PLCubicPanorama panorama,PLCubeFaceOrientation face,JSONObject images,String property,String urlBase,boolean hasPreviewImage,PLTextureColorFormat colorFormat) throws Exception {  if (images.has(property)) {    String url=this.buildURL(images.getString(property),urlBase);    if (this.isHTTPURL(url))     mView.getDownloadManager().add(new PLHTTPFileDownloader(url,new PLPanoramaImageFileDownloaderListener(panorama,colorFormat,face.ordinal()))); else     panorama.setImage(this.getLocalImageAsynchronously(url,colorFormat),face);  } else   if (!hasPreviewImage)   throw new RuntimeException(String.format("images.%s property not exists",property));}  }
class C{  public void compileSortCriteria(String sortCriterion){  CompiledValue obj=(CompiledValue)this.stack.pop();  boolean criterion=false;  if (sortCriterion.equals("desc"))   criterion=true;  CompiledSortCriterion csc=new CompiledSortCriterion(criterion,obj);  push(csc);}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  public static void initialize(Application application){  applicationContext=application;}  }
class C{  public void createPictScenario02() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-06-03 20:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict02Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict02SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict02Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC02Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC02CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceFreeTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02",TestService.EXAMPLE,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES_PARS,technicalService,supplMarketplace);  VOServiceDetails serviceFree=serviceSetup.savePriceModelForCustomer(serviceFreeTempl,TestPriceModel.FREE,customer);  serviceFree=serviceSetup.activateMarketableService(serviceFree);  VOServiceDetails serviceProRataTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02_Upgrade",TestService.EXAMPLE,TestPriceModel.FREE,technicalService,supplMarketplace);  VOServiceDetails serviceProRata=serviceSetup.savePriceModelForCustomer(serviceProRataTempl,TestPriceModel.EXAMPLE_PICT02_RATA_WEEK,customer);  serviceProRata=serviceSetup.activateMarketableService(serviceProRata);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceFreeTempl,serviceProRataTempl);  VOServiceDetails serviceProRataTempl2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_02_Upgrade2",TestService.EXAMPLE,TestPriceModel.FREE,technicalService,supplMarketplace);  VOServiceDetails serviceProRata2=serviceSetup.savePriceModelForCustomer(serviceProRataTempl2,TestPriceModel.EXAMPLE_PICT02_RATA_WEEK2,customer);  serviceProRata2=serviceSetup.activateMarketableService(serviceProRata2);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceProRataTempl,serviceProRataTempl2);  VORoleDefinition role=VOServiceFactory.getRole(serviceFree,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_02",serviceFree,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-06-18 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-06-19 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  long usageUpgradeTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceProRata);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-03 09:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceFree);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-03 14:00:00"));  upgradedSubDetails.setSubscriptionId("PICT_TEST_02" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-10 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  upgradedSubDetails=subscrSetup.addUser(customerAdmin,role,upgradedSubDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-07-15 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  upgradedSubDetails=subscrSetup.modifyUserRole(upgradedSubDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceProRata,"USER"),upgradedSubDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-07-15 00:00:00"),"MAX_FOLDER_NUMBER","5");  usageUpgradeTime=DateTimeHandling.calculateMillis("2013-07-22 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceProRata2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-22 13:10:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-22 13:20:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata2);  long suspResTime=DateTimeHandling.calculateMillis("2013-07-23 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(suspResTime);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  long reassignResTime=DateTimeHandling.calculateMillis("2013-07-24 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(reassignResTime);  paymentSetup.reassignCustomerPaymentTypes(customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-07-31 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_02",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_02",customer);}  }
class C{  public JMapper<D,S> destinationFactory(DestinationFactory<D> factory){  this.mapper.setDestinationFactory(factory);  return this;}  }
class C{  private void updateVirtualNetwork(CreateVirtualNetworkWorkflowDocument state,SubnetState subnetState){  VirtualNetworkService.State virtualNetworkPatchState=new VirtualNetworkService.State();  virtualNetworkPatchState.state=subnetState;  virtualNetworkPatchState.logicalSwitchId=state.taskServiceEntity.logicalSwitchId;  virtualNetworkPatchState.logicalRouterId=state.taskServiceEntity.logicalRouterId;  virtualNetworkPatchState.logicalSwitchUplinkPortId=state.taskServiceEntity.logicalSwitchUplinkPortId;  virtualNetworkPatchState.logicalRouterDownlinkPortId=state.taskServiceEntity.logicalRouterDownlinkPortId;  virtualNetworkPatchState.logicalRouterUplinkPortId=state.taskServiceEntity.logicalRouterUplinkPortId;  virtualNetworkPatchState.tier0RouterDownlinkPortId=state.taskServiceEntity.tier0RouterDownlinkPortId;  virtualNetworkPatchState.tier0RouterId=state.taskServiceEntity.tier0RouterId;  virtualNetworkPatchState.cidr=state.taskServiceEntity.cidr;  virtualNetworkPatchState.lowIpDynamic=state.taskServiceEntity.lowIpDynamic;  virtualNetworkPatchState.highIpDynamic=state.taskServiceEntity.highIpDynamic;  virtualNetworkPatchState.lowIpStatic=state.taskServiceEntity.lowIpStatic;  virtualNetworkPatchState.highIpStatic=state.taskServiceEntity.highIpStatic;  virtualNetworkPatchState.reservedIpList=state.taskServiceEntity.reservedIpList;  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(state.taskServiceEntity.documentSelfLink).setBody(virtualNetworkPatchState).setCompletion(null).sendWith(this);}  }
class C{  private double difference(int index,double val1,double val2){switch (m_trainInstances.attribute(index).type()) {case Attribute.NOMINAL:    if (Utils.isMissingValue(val1) || Utils.isMissingValue(val2)) {      return (1.0 - (1.0 / (m_trainInstances.attribute(index).numValues())));    } else     if ((int)val1 != (int)val2) {      return 1;    } else {      return 0;    }case Attribute.NUMERIC:  if (Utils.isMissingValue(val1) || Utils.isMissingValue(val2)) {    if (Utils.isMissingValue(val1) && Utils.isMissingValue(val2)) {      return 1;    } else {      double diff;      if (Utils.isMissingValue(val2)) {        diff=norm(val1,index);      } else {        diff=norm(val2,index);      }      if (diff < 0.5) {        diff=1.0 - diff;      }      return diff;    }  } else {    return Math.abs(norm(val1,index) - norm(val2,index));  }default :return 0;}}  }
class C{  public static void register(){  FilePath.register(INSTANCE);}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  return userRepository.findOneByLogin(SecurityUtils.getCurrentUser().getUsername()).map(null).orElseGet(null);}  }
class C{  public boolean handleTouch(MotionEvent event){  int action=event.getAction();  if (mRenderer != null && action == MotionEvent.ACTION_MOVE) {    if (oldX >= 0 || oldY >= 0) {      float newX=event.getX(0);      float newY=event.getY(0);      if (event.getPointerCount() > 1 && (oldX2 >= 0 || oldY2 >= 0) && mRenderer.isZoomEnabled()) {        float newX2=event.getX(1);        float newY2=event.getY(1);        float newDeltaX=Math.abs(newX - newX2);        float newDeltaY=Math.abs(newY - newY2);        float oldDeltaX=Math.abs(oldX - oldX2);        float oldDeltaY=Math.abs(oldY - oldY2);        float zoomRate=1;        float tan1=Math.abs(newY - oldY) / Math.abs(newX - oldX);        float tan2=Math.abs(newY2 - oldY2) / Math.abs(newX2 - oldX2);        if (tan1 <= 0.25 && tan2 <= 0.25) {          zoomRate=newDeltaX / oldDeltaX;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_X);        } else         if (tan1 >= 3.73 && tan2 >= 3.73) {          zoomRate=newDeltaY / oldDeltaY;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_Y);        } else {          if (Math.abs(newX - oldX) >= Math.abs(newY - oldY)) {            zoomRate=newDeltaX / oldDeltaX;          } else {            zoomRate=newDeltaY / oldDeltaY;          }          applyZoom(zoomRate,Zoom.ZOOM_AXIS_XY);        }        oldX2=newX2;        oldY2=newY2;      } else       if (mRenderer.isPanEnabled()) {        mPan.apply(oldX,oldY,newX,newY);        oldX2=0;        oldY2=0;      }      oldX=newX;      oldY=newY;      graphicalView.repaint();      return true;    }  } else   if (action == MotionEvent.ACTION_DOWN) {    oldX=event.getX(0);    oldY=event.getY(0);    if (mRenderer != null && mRenderer.isZoomEnabled() && zoomR.contains(oldX,oldY)) {      if (oldX < zoomR.left + zoomR.width() / 3) {        graphicalView.zoomIn();      } else       if (oldX < zoomR.left + zoomR.width() * 2 / 3) {        graphicalView.zoomOut();      } else {        graphicalView.zoomReset();      }      return true;    }  } else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {    oldX=0;    oldY=0;    oldX2=0;    oldY2=0;    if (action == MotionEvent.ACTION_POINTER_UP) {      oldX=-1;      oldY=-1;    }  }  return !mRenderer.isClickEnabled();}  }
class C{  public int match(final AuthScope that){  int factor=0;  if (LangUtils.equals(this.scheme,that.scheme)) {    factor+=1;  } else {    if (this.scheme != ANY_SCHEME && that.scheme != ANY_SCHEME) {      return -1;    }  }  if (LangUtils.equals(this.realm,that.realm)) {    factor+=2;  } else {    if (this.realm != ANY_REALM && that.realm != ANY_REALM) {      return -1;    }  }  if (this.port == that.port) {    factor+=4;  } else {    if (this.port != ANY_PORT && that.port != ANY_PORT) {      return -1;    }  }  if (LangUtils.equals(this.host,that.host)) {    factor+=8;  } else {    if (this.host != ANY_HOST && that.host != ANY_HOST) {      return -1;    }  }  return factor;}  }
class C{  void calculateAvg(){  long sum=0;  int count=1;synchronized (stats) {    boolean useMovingAvg=getMovingAvgFrame() > 0 && getMovingAvgFrame() < stats.size();    for (ListIterator<XYDataItem> it=stats.listIterator(); it.hasNext(); ) {      XYDataItem xy=it.next();      sum+=xy.getY().longValue();      if ((useMovingAvg && count % getMovingAvgFrame() == 0) || !it.hasNext()) {        double thisAvg=(double)sum / count;        if (thisAvg > avg) {          avg=thisAvg;        }        sum=0;        count=1;      } else {        count++;      }    }  }}  }
class C{  public double height(){  return ymax - ymin;}  }
class C{  public static void estimateAccessibilityCriteria(Scenario sc){  LOG.info("Estimating car ownership...");  int hasCarAccessAsPassenger=0;  int hasCarAccessAsDriver=0;  int isSchoolGoing=0;  Counter counter=new Counter("  persons # ");  for (  Id<Person> personId : sc.getPopulation().getPersons().keySet()) {    String householdId=sc.getPopulation().getPersonAttributes().getAttribute(personId.toString(),"householdId").toString();    Plan plan=sc.getPopulation().getPersons().get(personId).getSelectedPlan();    if (hasCarAccessAsPassenger(plan)) {      hasCarAccessAsPassenger++;      updateAttribute(sc,householdId,"membersWithPassengerAccess");    }    if (hasCarAccessAsDriver(plan)) {      hasCarAccessAsDriver++;      updateAttribute(sc,householdId,"membersWithCarAccess");    }    if (isSchoolGoing(plan)) {      isSchoolGoing++;      updateAttribute(sc,householdId,"membersThatAreSchoolGoing");    }    counter.incCounter();  }  counter.printCounter();  LOG.info("Done estimating car ownership.");  LOG.info("---------------------------------------------------------------------");  LOG.info("Some statistics:");  LOG.info("       Number of people having driver access to a car: " + hasCarAccessAsDriver);  LOG.info("    Number of people having passenger access to a car: " + hasCarAccessAsPassenger);  LOG.info("   Number of people going to primary/secondary school: " + isSchoolGoing);  LOG.info("---------------------------------------------------------------------");}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,boolean shouldAddAttrs) throws TransformerException {  ElemTemplateElement t=elem.getFirstChildElem();  if (null == t)   return;  if (elem.hasTextLitOnly() && m_optimizer) {    char[] chars=((ElemTextLiteral)t).getChars();    try {      this.pushElemTemplateElement(t);      m_serializationHandler.characters(chars,0,chars.length);    } catch (    SAXException se) {      throw new TransformerException(se);    } finally {      this.popElemTemplateElement();    }    return;  }  XPathContext xctxt=m_xcontext;  xctxt.pushSAXLocatorNull();  int currentTemplateElementsTop=m_currentTemplateElements.size();  m_currentTemplateElements.push(null);  try {    for (; t != null; t=t.getNextSiblingElem()) {      if (!shouldAddAttrs && t.getXSLToken() == Constants.ELEMNAME_ATTRIBUTE)       continue;      xctxt.setSAXLocator(t);      m_currentTemplateElements.setElementAt(t,currentTemplateElementsTop);      t.execute(this);    }  } catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(t);    throw te;  } finally {    m_currentTemplateElements.pop();    xctxt.popSAXLocator();  }}  }
class C{  protected GoldenComparator createGoldenComparator(){  return new RegexGoldenComparator(expectedProblemLines());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.439 -0500",hash_original_method="B37B8587D770D7826EF61767CDFB0D6A",hash_generated_method="DA2EEFE68EA779BBB3625E96F4F5DF0E") static Element createUser(RenderScript rs,DataType dt){  DataKind dk=DataKind.USER;  boolean norm=false;  int vecSize=1;  int id=rs.nElementCreate(dt.mID,dk.mID,norm,vecSize);  return new Element(id,rs,dt,dk,norm,vecSize);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SPFRecord(Name name,int dclass,long ttl,String string){  super(name,Type.SPF,dclass,ttl,string);}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  buildFromSorted(size,null,s,null);}  }
class C{  private BigDecimal notNull(Decimal value){  if (null == value) {    return (new BigDecimal(0.0D));  } else {    return (value.getBigDecimalValue());  }}  }
class C{  @Deprecated @Override public final void add(int index,E element){  throw new UnsupportedOperationException();}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public static long token(){  return Math.abs(random.nextLong());}  }
class C{  @Override protected void starting_bytecode(){  spTopOffset=startLocalOffset - BYTES_IN_STACKSLOT - (stackHeights[biStart] * BYTES_IN_STACKSLOT);}  }
class C{  private void performUpdate(final int i,final double D,final double U,final double Qh_ii){  final double G=y[i] * (w.dot(vecs[i]) + bias) - 1 + D * alpha[i];  final double PG;  if (alpha[i] == 0)   PG=Math.min(G,0); else   if (alpha[i] == U)   PG=Math.max(G,0); else   PG=G;  if (PG != 0) {    final double alphaOld=alpha[i];    alpha[i]=Math.min(Math.max(alpha[i] - G / Qh_ii,0),U);    final double scale=(alpha[i] - alphaOld) * y[i];    w.mutableAdd(scale,vecs[i]);    if (useBias)     bias+=scale;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.799 -0500",hash_original_method="F74FE94679D9CBC1A9D9F74AEF1CAA7D",hash_generated_method="484EE365C6556E904F590230622E9FF8") public static int secondaryOrder(int order){  return (order & SECONDARY_ORDER_MASK_) >> SECONDARY_ORDER_SHIFT_;}  }
class C{  public void configure(JobConf conf){  this.conf=conf;  this.inlinks=conf.getBoolean("inlinks",false);  this.outlinks=conf.getBoolean("outlinks",false);  this.scores=conf.getBoolean("scores",true);  this.topn=conf.getLong("topn",Long.MAX_VALUE);}  }
class C{  public void close() throws IOException {  if (channel != null) {    if (!readonly) {      channel.force(true);      channel.truncate(nextOverflowData);    }    channel.close();  }  if (file != null) {    file.close();  }}  }
class C{  public boolean isLocal(){  if (this.innerInfo == null)   return false;  if (this.innerInfo.getEnclosingTypeName() != null)   return false;  char[] innerSourceName=this.innerInfo.getSourceName();  return (innerSourceName != null && innerSourceName.length > 0);}  }
class C{  public MoreLikeThisQueryBuilder like(Item... likeItems){  this.likeItems=new ArrayList<>();  return addLikeItem(likeItems);}  }
class C{  public FastBuffer<E> append(E[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public void testFailoverConnectionSynchronization() throws Exception {  Set<String> downedHosts=new HashSet<String>();  downedHosts.add(HOST_1);  downedHosts.add(HOST_3);  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  props.setProperty("failOverReadOnly","false");  com.mysql.jdbc.Connection testConn=(com.mysql.jdbc.Connection)getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);  Statement testStmt=null;  int newTransactionIsolation=testConn.getTransactionIsolation();  String newCatalog="fotests";  createDatabase(newCatalog);  try {    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertTrue(testConn.getAutoCommit());    assertEquals(this.conn.getCatalog(),testConn.getCatalog());    assertEquals(newTransactionIsolation,testConn.getTransactionIsolation());    assertFalse(testConn.isReadOnly());    assertEquals(-1,testConn.getSessionMaxRows());    testConn.setAutoCommit(false);    testConn.setCatalog(newCatalog);    newTransactionIsolation=newTransactionIsolation * 2 == 16 ? 1 : newTransactionIsolation * 2;    testConn.setTransactionIsolation(newTransactionIsolation);    testConn.setReadOnly(true);    testConn.setSessionMaxRows(1);    assertFalse(testConn.getAutoCommit());    assertEquals(newCatalog,testConn.getCatalog());    assertEquals(newTransactionIsolation,testConn.getTransactionIsolation());    assertTrue(testConn.isReadOnly());    assertEquals(1,testConn.getSessionMaxRows());    testStmt=testConn.createStatement();    assertSingleValueQuery(testStmt,"SELECT 1",1L);    UnreliableSocketFactory.dontDownHost(HOST_1);    UnreliableSocketFactory.downHost(HOST_2);    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());    testStmt=testConn.createStatement();    assertSingleValueQuery(testStmt,"SELECT 1",1L);    assertFalse(testConn.getAutoCommit());    assertEquals(newCatalog,testConn.getCatalog());    assertEquals(newTransactionIsolation,testConn.getTransactionIsolation());    assertTrue(testConn.isReadOnly());    assertEquals(-1,testConn.getSessionMaxRows());    testConn.setAutoCommit(true);    newTransactionIsolation=newTransactionIsolation * 2 == 16 ? 1 : newTransactionIsolation * 2;    testConn.setTransactionIsolation(newTransactionIsolation);    testConn.setReadOnly(false);    testConn.setSessionMaxRows(2);    assertTrue(testConn.getAutoCommit());    assertEquals(newTransactionIsolation,testConn.getTransactionIsolation());    assertFalse(testConn.isReadOnly());    assertEquals(2,testConn.getSessionMaxRows());    UnreliableSocketFactory.downHost(HOST_1);    UnreliableSocketFactory.dontDownHost(HOST_3);    assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());    testStmt=testConn.createStatement();    assertSingleValueQuery(testStmt,"SELECT 1",1L);    assertTrue(testConn.getAutoCommit());    assertEquals(newCatalog,testConn.getCatalog());    assertEquals(newTransactionIsolation,testConn.getTransactionIsolation());    assertFalse(testConn.isReadOnly());    assertEquals(-1,testConn.getSessionMaxRows());    assertConnectionsHistory(HOST_1_FAIL,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK,HOST_2_FAIL,HOST_3_OK);  }  finally {    if (testStmt != null) {      testStmt.close();    }    if (testConn != null) {    }  }}  }
class C{  public void reduceN(){  int i, j, h;  i=blocks - 1;  while ((value[i] == 0) && (i > 0)) {    i--;  }  h=value[i];  j=0;  while (h != 0) {    h>>>=1;    j++;  }  len=(i << 5) + j;  blocks=i + 1;}  }
class C{  public static boolean isMonitorWait(Instruction ins,ConstantPoolGen cpg){  if (!(ins instanceof InvokeInstruction)) {    return false;  }  if (ins.getOpcode() == Constants.INVOKESTATIC) {    return false;  }  InvokeInstruction inv=(InvokeInstruction)ins;  String methodName=inv.getMethodName(cpg);  String methodSig=inv.getSignature(cpg);  return isMonitorWait(methodName,methodSig);}  }
class C{  public static Object runJs(Executor.Input... inputs){  return runJs(null,inputs);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void addMenuItems(){  JPopupMenu popup=new JPopupMenu();  JMenu advancedMenu=new JMenu("Advanced");  advancedMenu.setMnemonic(KeyEvent.VK_A);  advancedMenu.setIcon(iconCache.getIcon(IconCache.Icon.SETTINGS_ICON));  JMenuItem sitesItem=new JMenuItem("Site Manager...",iconCache.getIcon(IconCache.Icon.SAVED_ICON));  sitesItem.setMnemonic(KeyEvent.VK_M);  sitesItem.addActionListener(savedListener);  sitesDialog=new SiteManagerDialog(sitesItem,iconCache);  anonymousItem=new JCheckBoxMenuItem("Block Anonymous Requests");  anonymousItem.setToolTipText("Blocks all requests that do no contain a valid certificate/signature");  anonymousItem.setMnemonic(KeyEvent.VK_K);  anonymousItem.setState(Certificate.UNKNOWN.isBlocked());  anonymousItem.addActionListener(anonymousListener);  JMenuItem logItem=new JMenuItem("View Logs...",iconCache.getIcon(IconCache.Icon.LOG_ICON));  logItem.setMnemonic(KeyEvent.VK_L);  logItem.addActionListener(logListener);  logDialog=new LogDialog(logItem,iconCache);  JCheckBoxMenuItem notificationsItem=new JCheckBoxMenuItem("Show all notifications");  notificationsItem.setToolTipText("Shows all connect/disconnect messages, useful for debugging purposes");  notificationsItem.setMnemonic(KeyEvent.VK_S);  notificationsItem.setState(prefs.getBoolean(notificationsKey,false));  notificationsItem.addActionListener(notificationsListener);  JMenuItem openItem=new JMenuItem("Open file location",iconCache.getIcon(IconCache.Icon.FOLDER_ICON));  openItem.setMnemonic(KeyEvent.VK_O);  openItem.addActionListener(openListener);  JMenuItem desktopItem=new JMenuItem("Create Desktop shortcut",iconCache.getIcon(IconCache.Icon.DESKTOP_ICON));  desktopItem.setMnemonic(KeyEvent.VK_D);  desktopItem.addActionListener(desktopListener);  advancedMenu.add(sitesItem);  advancedMenu.add(anonymousItem);  advancedMenu.add(logItem);  advancedMenu.add(notificationsItem);  advancedMenu.add(new JSeparator());  advancedMenu.add(openItem);  advancedMenu.add(desktopItem);  JMenuItem reloadItem=new JMenuItem("Reload",iconCache.getIcon(IconCache.Icon.RELOAD_ICON));  reloadItem.setMnemonic(KeyEvent.VK_R);  reloadItem.addActionListener(reloadListener);  JMenuItem aboutItem=new JMenuItem("About...",iconCache.getIcon(IconCache.Icon.ABOUT_ICON));  aboutItem.setMnemonic(KeyEvent.VK_B);  aboutItem.addActionListener(aboutListener);  aboutDialog=new AboutDialog(aboutItem,iconCache,name);  aboutDialog.addPanelButton(sitesItem);  aboutDialog.addPanelButton(logItem);  aboutDialog.addPanelButton(openItem);  if (SystemUtilities.isMac()) {    MacUtilities.registerAboutDialog(aboutDialog);    MacUtilities.registerQuitHandler(this);  }  JSeparator separator=new JSeparator();  JCheckBoxMenuItem startupItem=new JCheckBoxMenuItem("Automatically start");  startupItem.setMnemonic(KeyEvent.VK_S);  startupItem.setState(shortcutCreator.hasStartupShortcut());  startupItem.addActionListener(startupListener);  JMenuItem exitItem=new JMenuItem("Exit",iconCache.getIcon(IconCache.Icon.EXIT_ICON));  exitItem.addActionListener(exitListener);  popup.add(advancedMenu);  popup.add(reloadItem);  popup.add(aboutItem);  popup.add(startupItem);  popup.add(separator);  popup.add(exitItem);  tray.setJPopupMenu(popup);}  }
class C{  public static OptionBuilder hasArg(boolean hasArg){  OptionBuilder.numberOfArgs=hasArg ? 1 : Option.UNINITIALIZED;  return instance;}  }
class C{  public boolean load(File fi) throws JmriConfigureXmlException {  return load(fi,false);}  }
class C{  public static int StringIsEmpty(String value){  int len=value.length();  if (len == 0) {    return BooleanHelper.K;  } else {    return -len;  }}  }
class C{  public static int[] copyOfRange(int[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      int[] copy=new int[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public void writeFile(String filePath,String content){  StringBuilder buf=new StringBuilder();  String newContent=stripOffCR(content);  String[] lines=newContent.split("\n");  String cmd=null;  for (  String line : lines) {    if (cmd == null) {      cmd=String.format(ImageServerDialogProperties.getString("cmd.writeFile"),line,filePath);    } else {      cmd=String.format(ImageServerDialogProperties.getString("cmd.writeFile.append"),line,filePath);    }    sendWaitFor(cmd,defaultTimeout,prompts,buf);  }}  }
class C{  final boolean isTransient(){  return Modifier.isTransient(getModifiers());}  }
class C{  public void addQuat(Quaternion input,Quaternion output){  output.setX(getX() + input.getX());  output.setY(getY() + input.getY());  output.setZ(getZ() + input.getZ());  output.setW(getW() + input.getW());}  }
class C{  public static boolean compatibleTypes(short t1,short pi1,short t2,short pi2){  return t1 == t2 && (t1 != SVGLength.SVG_LENGTHTYPE_PERCENTAGE || pi1 == pi2) || t1 == SVGLength.SVG_LENGTHTYPE_NUMBER && t2 == SVGLength.SVG_LENGTHTYPE_PX || t1 == SVGLength.SVG_LENGTHTYPE_PX && t2 == SVGLength.SVG_LENGTHTYPE_NUMBER;}  }
class C{  @Override public void receiveEvent(ClientStateInformation information){  if (information.getState() != currentState) {    logger.info("Received status update: " + information);    if (information.getState() == ClientState.SEARCH) {      searchStartTime=System.currentTimeMillis();      for (      SequenceOutputVariableFactory<?> factory : sequenceOutputVariableFactories.values()) {        factory.setStartTime(searchStartTime);      }    }    OutputVariable<Long> time=new OutputVariable<Long>("Time_" + currentState.getName(),System.currentTimeMillis() - currentStateStarted);    outputVariables.put(time.getName(),time);    currentState=information.getState();    currentStateStarted=System.currentTimeMillis();  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public Map<Integer,TestLogyyyymm> selectToMap(){  return selectByExampleToMap((Example)this.example);}  }
class C{  public Combinatorics(T[] values,int size){  this.values=values;  this.size=size;  this.result=new ArrayList<>();}  }
class C{  public void actionPerformed(ActionEvent evt){  panel.getSharedContext().setDebug_draw_line_boxes(!panel.getSharedContext().debugDrawLineBoxes());  panel.repaint();}  }
class C{  public JCExpression makeNullCheck(JCExpression arg){  Name name=TreeInfo.name(arg);  if (name == names._this || name == names._super)   return arg;  JCTree.Tag optag=NULLCHK;  JCUnary tree=make.at(arg.pos).Unary(optag,arg);  tree.operator=syms.nullcheck;  tree.type=arg.type;  return tree;}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.841 -0500",hash_original_method="CEA799A3A5D71AC4A4B6E1D8871A32D5",hash_generated_method="44B04DEDFA13B69A131EA52296DBC6D0") public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {  int size;  String line;  Vector list;  String[] result;  BufferedReader reader;  if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(),query.getDate(),query.getTime(),query.isGMT(),query.getDistributions())))   return null;  list=new Vector();  reader=new BufferedReader(new DotTerminatedMessageReader(_reader_));  while ((line=reader.readLine()) != null)   list.addElement(line);  size=list.size();  if (size < 1)   return new String[0];  result=new String[size];  list.copyInto(result);  return result;}  }
class C{  @Kroll.method public boolean hasPermission(@Kroll.argument() String requestedPermission){  Log.d(LCAT,"check for granted permission: " + requestedPermission);  if (Build.VERSION.SDK_INT < 23) {    return true;  }  Context ctx=TiApplication.getInstance().getApplicationContext();  if (ContextCompat.checkSelfPermission(ctx,requestedPermission) != PackageManager.PERMISSION_GRANTED) {    return false;  }  return true;}  }
class C{  public CopySourceEdit(int offset,int length){  super(offset,length);}  }
class C{  public StochasticOscillatorItem(RegularTimePeriod period,BigDecimal stochasticOscillator){  super(period,new StochasticOscillator(stochasticOscillator));}  }
class C{  public static short successor(final short n) throws NoSuccessorException {  if (Short.MAX_VALUE == n) {    throw new NoSuccessorException();  } else {    return (short)(n + 1);  }}  }
class C{  public double magnitude(){  return Math.sqrt(this.dot(this));}  }
class C{  @RequestProcessing(value="/member/{userName}/following/users",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingUsers(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/following-users.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomeFollowingUsersCnt");  final int windowSize=Symphonys.getInt("userHomeFollowingUsersWindowSize");  fillHomeUser(dataModel,user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  avatarQueryService.fillUserAvatarURL(user);  final JSONObject followingUsersResult=followQueryService.getFollowingUsers(followingId,pageNum,pageSize);  final List<JSONObject> followingUsers=(List<JSONObject>)followingUsersResult.opt(Keys.RESULTS);  dataModel.put(Common.USER_HOME_FOLLOWING_USERS,followingUsers);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);    for (    final JSONObject followingUser : followingUsers) {      final String homeUserFollowingUserId=followingUser.optString(Keys.OBJECT_ID);      followingUser.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingUserId));    }  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int followingUserCnt=followingUsersResult.optInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)followingUserCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  public void onInitMatResources(MatResources resources){}  }
class C{  public ExecutionScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String createDistributedUniqueID(){  String uuid=null;  try {    String pname=ManagementFactory.getRuntimeMXBean().getName();    String pid=pname.split("@")[0];    InetAddress addr=InetAddress.getLocalHost();    String host=addr.getHostAddress();    uuid=pid + "_" + host;  } catch (  Exception ex) {    uuid="0_0.0.0.0";  }  return uuid;}  }
class C{  protected void displayRunnerLog(){  List<UserRunnerStatus> matchingStatuses=getMultiRemoteCodenvy().findRunners(processID);  UserRunnerStatus foundStatus=checkOnlyOne(matchingStatuses,processID,"runner","runners");  if (foundStatus == null) {    return;  }  RunnerState state=foundStatus.getInnerStatus().status();  if (state == RunnerState.NEW) {    Ansi buffer=Ansi.ansi();    buffer.a("Logs are not yet available as the runner has not yet started");    buffer.reset();    System.out.println(buffer.toString());    return;  }  if (state != RunnerState.RUNNING && state != RunnerState.STOPPED) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("Logs are only available in RUNNING or STOPPED state. Current state is ").a(state);    buffer.reset();    System.out.println(buffer.toString());    return;  }  String log=foundStatus.getProject().getCodenvy().runner().logs(foundStatus.getProject().getInnerReference(),foundStatus.getInnerStatus().processId()).execute();  System.out.println(log);}  }
class C{  public void initialize() throws InterruptedException {  check(0,0,0);  for (  Thread t : threads) {    t.start();  }  ready.await();  check(numthreads,0,0);}  }
class C{  public static String mapChineseMarksToAnsi(String text){}  }
class C{  public static boolean isControl(long flags){  return ((flags & LOGRECORD_FLAGS_CONTROL_MESSAGE) != 0);}  }
class C{  public boolean addAll(int index,Collection c){  Object[] a=c.toArray();  int numNew=a.length;  if (numNew == 0)   return false;  modCount++;  Entry successor=(index == size ? header : entry(index));  Entry predecessor=successor.previous;  for (int i=0; i < numNew; i++) {    Entry e=new Entry(a[i],successor,predecessor);    predecessor.next=e;    predecessor=e;  }  successor.previous=predecessor;  size+=numNew;  return true;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  double t=this.insets.calculateTopInset(area.getHeight());  double b=this.insets.calculateBottomInset(area.getHeight());  double l=this.insets.calculateLeftInset(area.getWidth());  double r=this.insets.calculateRightInset(area.getWidth());  double x=area.getX();  double y=area.getY();  double w=area.getWidth();  double h=area.getHeight();  g2.setPaint(this.paint);  Rectangle2D rect=new Rectangle2D.Double();  if (t > 0.0) {    rect.setRect(x,y,w,t);    g2.fill(rect);  }  if (b > 0.0) {    rect.setRect(x,y + h - b,w,b);    g2.fill(rect);  }  if (l > 0.0) {    rect.setRect(x,y,l,h);    g2.fill(rect);  }  if (r > 0.0) {    rect.setRect(x + w - r,y,r,h);    g2.fill(rect);  }}  }
class C{  public JMenuItem createPopupMenuItem(JPopupMenu menu,String label,String mnemonic,String accessibleDescription,String laf){  JMenuItem mi=menu.add(new JMenuItem(getString(label)));  popupMenuGroup.add(mi);  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  return mi;}  }
class C{  private static final IProblem[] safeGetProblems(CompilationResult result){  if (!USE_INTROSPECTION_TO_INVOKE_GET_PROBLEM) {    try {      return result.getProblems();    } catch (    NoSuchMethodError re) {      USE_INTROSPECTION_TO_INVOKE_GET_PROBLEM=true;    }  }  try {    if (GET_PROBLEM_METH == null) {      GET_PROBLEM_METH=result.getClass().getDeclaredMethod("getProblems",new Class[]{});    }    return (IProblem[])GET_PROBLEM_METH.invoke(result,null);  } catch (  Throwable e) {    if (e instanceof RuntimeException) {      throw (RuntimeException)e;    } else {      throw new RuntimeException(e);    }  }}  }
class C{  public byte[] recordAPICall(final serverObjects post,final String servletName,final String type,final String comment){  String[] pks=post.remove(TABLE_API_COL_APICALL_PK);  byte[] pk=pks == null ? null : UTF8.getBytes(pks[0]);  final String apiurl="/" + servletName + "?"+ post.toString();  Row row=null;  try {    row=(pk == null) ? null : super.select(TABLE_API_NAME,pk);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);  }  try {    if (row == null) {      Data data=new Data();      data.put(TABLE_API_COL_TYPE,UTF8.getBytes(type));      data.put(TABLE_API_COL_COMMENT,UTF8.getBytes(comment));      byte[] date=UTF8.getBytes(GenericFormatter.SHORT_MILSEC_FORMATTER.format());      data.put(TABLE_API_COL_DATE_RECORDING,date);      data.put(TABLE_API_COL_DATE_LAST_EXEC,date);      data.put(TABLE_API_COL_URL,UTF8.getBytes(apiurl));      data.put(TABLE_API_COL_APICALL_COUNT,"1");      pk=super.insert(TABLE_API_NAME,data);    } else {      row.put(TABLE_API_COL_DATE_LAST_EXEC,UTF8.getBytes(GenericFormatter.SHORT_MILSEC_FORMATTER.format()));      if (!row.containsKey(TABLE_API_COL_DATE_RECORDING))       row.put(TABLE_API_COL_DATE_RECORDING,row.get(TABLE_API_COL_DATE));      row.remove(TABLE_API_COL_DATE);      row.put(TABLE_API_COL_APICALL_COUNT,row.get(TABLE_API_COL_APICALL_COUNT,1) + 1);      calculateAPIScheduler(row,false);      super.update(TABLE_API_NAME,row);      assert pk != null;    }  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);  }  ConcurrentLog.info("APICALL",apiurl);  return pk;}  }
class C{  public void start(){  if (!getLifecycle().toStarting()) {    startListeners();    return;  }  try {    make();  } catch (  Exception e) {    log().log(Level.WARNING,e.toString(),e);    e.printStackTrace();  }  startListeners();  getLifecycle().toActive();  if (isAdminEnable()) {    Thread thread=Thread.currentThread();    ClassLoader loader=thread.getContextClassLoader();    try {      thread.setContextClassLoader(this);    }  finally {      thread.setContextClassLoader(loader);    }  }}  }
class C{  public DInhibitAnyPolicy(JDialog parent){  super(parent);  setTitle(res.getString("DInhibitAnyPolicy.Title"));  initComponents();}  }
class C{  public String write(Double value){  return value.toString();}  }
class C{  public final boolean canGetDate(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetDate());}  }
class C{  public static UrlTemplate compile(String template){  String[] urlPieces=new String[5];  int[] identifiers=new int[4];  String[] identifierFormatTags=new String[4];  int identifierCount=parseTemplate(template,urlPieces,identifiers,identifierFormatTags);  return new UrlTemplate(urlPieces,identifiers,identifierFormatTags,identifierCount);}  }
class C{  public boolean hasVariableValue(String name){  return variables.containsKey(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:49.510 -0500",hash_original_method="571F1D61EE68738D4B1083BD48C02876",hash_generated_method="E5E6612EE5F6102975B877338E28BF26") public boolean isEmulated(){  return mIsEmulated;}  }
class C{  @Override public V put(Integer key,V value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @Override public CompletableFuture<Boolean> allMatch(final Predicate<? super T> predicate){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public boolean load(){  String adempiereHome=System.getProperty(ADEMPIERE_HOME);  if (adempiereHome == null || adempiereHome.length() == 0)   adempiereHome=System.getProperty("user.dir");  boolean envLoaded=false;  String fileName=adempiereHome + File.separator + ADEMPIERE_ENV_FILE;  File env=new File(fileName);  if (env.exists()) {    try {      FileInputStream fis=new FileInputStream(env);      p_properties.load(fis);      fis.close();    } catch (    Exception e) {      log.warning(e.toString());    }    log.info(env.toString());    if (p_properties.size() > 5)     envLoaded=true;    Properties loaded=new Properties();    loaded.putAll(p_properties);    int javaIndex=setJavaType((String)p_properties.get(JAVA_TYPE));    initJava(javaIndex);    if (loaded.containsKey(JAVA_HOME))     setJavaHome((String)loaded.get(JAVA_HOME));    setAdempiereHome((String)p_properties.get(ADEMPIERE_HOME));    String s=(String)p_properties.get(ADEMPIERE_KEYSTOREPASS);    if (s == null || s.length() == 0) {      s=KEYSTORE_PASSWORD;      p_properties.put(ADEMPIERE_KEYSTOREPASS,s);    }    setKeyStore(s);    int appServerIndex=setAppsServerType((String)p_properties.get(ADEMPIERE_APPS_TYPE));    initAppsServer(appServerIndex);    if (loaded.containsKey(ADEMPIERE_APPS_SERVER))     setAppsServer((String)loaded.get(ADEMPIERE_APPS_SERVER));    if (loaded.containsKey(ADEMPIERE_APPS_DEPLOY))     setAppsServerDeployDir((String)loaded.get(ADEMPIERE_APPS_DEPLOY));    if (loaded.containsKey(ADEMPIERE_JNP_PORT))     setAppsServerJNPPort((String)loaded.get(ADEMPIERE_JNP_PORT));    if (loaded.containsKey(ADEMPIERE_WEB_PORT))     setAppsServerWebPort((String)loaded.get(ADEMPIERE_WEB_PORT));    if (loaded.containsKey(ADEMPIERE_SSL_PORT))     setAppsServerSSLPort((String)loaded.get(ADEMPIERE_SSL_PORT));    int dbTypeIndex=setDatabaseType((String)p_properties.get(ADEMPIERE_DB_TYPE));    initDatabase((String)p_properties.get(ADEMPIERE_DB_NAME),dbTypeIndex);    if (loaded.containsKey(ADEMPIERE_DB_NAME))     setDatabaseDiscovered((String)loaded.get(ADEMPIERE_DB_NAME));    if (loaded.containsKey(ADEMPIERE_DB_SERVER))     setDatabaseServer((String)loaded.get(ADEMPIERE_DB_SERVER));    if (loaded.containsKey(ADEMPIERE_DB_PORT))     setDatabasePort((String)loaded.get(ADEMPIERE_DB_PORT));    if (loaded.containsKey(ADEMPIERE_DB_NAME))     setDatabaseName((String)loaded.get(ADEMPIERE_DB_NAME));    if (loaded.containsKey(ADEMPIERE_DB_USER))     setDatabaseUser((String)loaded.get(ADEMPIERE_DB_USER));    if (loaded.containsKey(ADEMPIERE_DB_PASSWORD))     setDatabasePassword((String)loaded.get(ADEMPIERE_DB_PASSWORD));    if (loaded.containsKey(ADEMPIERE_DB_SYSTEM))     setDatabaseSystemPassword((String)loaded.get(ADEMPIERE_DB_SYSTEM));    if (p_panel != null) {      p_panel.fMailServer.setText((String)p_properties.get(ADEMPIERE_MAIL_SERVER));      p_panel.fMailUser.setText((String)p_properties.get(ADEMPIERE_MAIL_USER));      p_panel.fMailPassword.setText((String)p_properties.get(ADEMPIERE_MAIL_PASSWORD));      p_panel.fAdminEMail.setText((String)p_properties.get(ADEMPIERE_ADMIN_EMAIL));    }  }  InetAddress localhost=null;  String hostName="unknown";  try {    localhost=InetAddress.getLocalHost();    hostName=localhost.getHostName();  } catch (  Exception e) {    log.severe("Cannot get local host name");  }  if (!envLoaded) {    log.info("Defaults");    initJava();    setAdempiereHome(adempiereHome);    setKeyStore(KEYSTORE_PASSWORD);    initAppsServer();    setAppsServer(hostName);    initDatabase("");    String connectionName=getDatabaseDiscovered();    if (connectionName != null) {      setDatabaseName(resolveDatabaseName(connectionName));    }    setDatabaseSystemPassword("");    setDatabaseServer(hostName);    setDatabaseUser("adempiere");    setDatabasePassword("adempiere");    if (p_panel != null) {      p_panel.fMailServer.setText(hostName);      p_panel.fMailUser.setText("info");      p_panel.fMailPassword.setText("");      p_panel.fAdminEMail.setText("info@" + hostName);    }  }  if (!p_properties.containsKey(ADEMPIERE_FTP_SERVER)) {    p_properties.setProperty(ADEMPIERE_FTP_SERVER,"localhost");    p_properties.setProperty(ADEMPIERE_FTP_USER,"anonymous");    p_properties.setProperty(ADEMPIERE_FTP_PASSWORD,"user@host.com");    p_properties.setProperty(ADEMPIERE_FTP_PREFIX,"my");  }  if (!p_properties.containsKey(ADEMPIERE_JAVA_OPTIONS))   p_properties.setProperty(ADEMPIERE_JAVA_OPTIONS,"-Xms64M -Xmx512M");  if (!p_properties.containsKey(ADEMPIERE_WEB_ALIAS) && localhost != null)   p_properties.setProperty(ADEMPIERE_WEB_ALIAS,localhost.getCanonicalHostName());  if (!p_properties.containsKey(ADEMPIERE_KEYSTORECODEALIAS))   p_properties.setProperty(ADEMPIERE_KEYSTORECODEALIAS,"adempiere");  if (!p_properties.containsKey(ADEMPIERE_KEYSTOREWEBALIAS))   p_properties.setProperty(ADEMPIERE_KEYSTOREWEBALIAS,"adempiere");  return true;}  }
class C{  protected Object convertValueType(final String searchField,final String searchValue){  return searchValue;}  }
class C{  @Override protected Optional<Exception> doTranslateException(Exception ex){  if (ex instanceof ConstraintViolationException) {    return Optional.of(ex);  }  if (ex instanceof ServiceLayerException) {    return Optional.of(ex);  }  return Optional.of(new ServiceLayerException(ex.getMessage()));}  }
class C{  public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {  if (iterator.hasNext()) {synchronized (iterator.next()) {      return syncRest(iterator,task);    }  } else {    return task.call();  }}  }
class C{  protected void markTabStateInitialized(){  mTabStateInitialized=true;  for (  TabModelSelectorObserver listener : mObservers)   listener.onTabStateInitialized();}  }
class C{  public void seen(Sha256Hash hash,PeerAddress byPeer){  lock.lock();  try {    cleanPool();    Entry entry=memoryPool.get(hash);    if (entry != null) {      if (entry.tx != null) {        checkState(entry.addresses == null);        Transaction tx=entry.tx.get();        if (tx != null) {          markBroadcast(byPeer,tx);          log.debug("{}: Peer announced transaction we have seen before [{}] {}",byPeer,tx.getConfidence().numBroadcastPeers(),tx.getHashAsString());        } else {        }      } else {        checkNotNull(entry.addresses);        entry.addresses.add(byPeer);        log.debug("{}: Peer announced transaction we have seen announced before [{}] {}",byPeer,entry.addresses.size(),hash);      }    } else {      entry=new Entry();      entry.addresses=new HashSet<PeerAddress>();      entry.addresses.add(byPeer);      memoryPool.put(hash,entry);      log.info("{}: Peer announced new transaction [1] {}",byPeer,hash);    }  }  finally {    lock.unlock();  }}  }
class C{  protected Value parseQNameOrBoolean() throws IOException, RDFParseException {  int c=readCodePoint();  if (c == -1) {    throwEOFException();  }  if (c != ':' && !TurtleUtil.isPrefixStartChar(c)) {    reportError("Expected a ':' or a letter, found '" + new String(Character.toChars(c)) + "'",BasicParserSettings.VERIFY_RELATIVE_URIS);  }  String namespace=null;  if (c == ':') {    namespace=getNamespace("");  } else {    StringBuilder prefix=new StringBuilder(8);    appendCodepoint(prefix,c);    int previousChar=c;    c=readCodePoint();    while (TurtleUtil.isPrefixChar(c)) {      appendCodepoint(prefix,c);      previousChar=c;      c=readCodePoint();    }    if (c != ':') {      String value=prefix.toString();      if (value.equals("true") || value.equals("false")) {        unread(c);        return createLiteral(value,null,XMLSchema.BOOLEAN,getLineNumber(),-1);      }    } else {      if (previousChar == '.') {        reportFatalError("prefix can not end with with '.'");      }    }    verifyCharacterOrFail(c,":");    namespace=getNamespace(prefix.toString());  }  StringBuilder localName=new StringBuilder(16);  c=readCodePoint();  if (TurtleUtil.isNameStartChar(c)) {    if (c == '\\') {      localName.append(readLocalEscapedChar());    } else {      appendCodepoint(localName,c);    }    int previousChar=c;    c=readCodePoint();    while (TurtleUtil.isNameChar(c)) {      if (c == '\\') {        localName.append(readLocalEscapedChar());      } else {        appendCodepoint(localName,c);      }      previousChar=c;      c=readCodePoint();    }    unread(c);    if (previousChar == '.') {      unread(previousChar);      localName.deleteCharAt(localName.length() - 1);    }  } else {    unread(c);  }  String localNameString=localName.toString();  for (int i=0; i < localNameString.length(); i++) {    if (localNameString.charAt(i) == '%') {      if (i > localNameString.length() - 3 || !ASCIIUtil.isHex(localNameString.charAt(i + 1)) || !ASCIIUtil.isHex(localNameString.charAt(i + 2))) {        reportFatalError("Found incomplete percent-encoded sequence: " + localNameString);      }    }  }  return createURI(namespace + localNameString);}  }
class C{  public void resetJavaName(){  javaNameProp.set(javaNamePrev);}  }
class C{  public void substring() throws IOException {  print("substring",null);}  }
class C{  public void addIncidenceLink(HGPersistentHandle targetHandle,HGPersistentHandle linkHandle){  impl.addIncidenceLink(targetHandle,linkHandle);}  }
class C{  public double distance(Vector2 point){  double dx=this.x - point.x;  double dy=this.y - point.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.776 -0500",hash_original_method="8C4C1B59B00A9C1FB0F98F7424B5199F",hash_generated_method="D96DD0F25F76242E105CF187E0E2089A") private static void preloadClasses(){  final VMRuntime runtime=VMRuntime.getRuntime();  InputStream is=ZygoteInit.class.getClassLoader().getResourceAsStream(PRELOADED_CLASSES);  if (is == null) {    Log.e(TAG,"Couldn't find " + PRELOADED_CLASSES + ".");  } else {    Log.i(TAG,"Preloading classes...");    long startTime=SystemClock.uptimeMillis();    setEffectiveGroup(UNPRIVILEGED_GID);    setEffectiveUser(UNPRIVILEGED_UID);    float defaultUtilization=runtime.getTargetHeapUtilization();    runtime.setTargetHeapUtilization(0.8f);    System.gc();    runtime.runFinalizationSync();    Debug.startAllocCounting();    try {      BufferedReader br=new BufferedReader(new InputStreamReader(is),256);      int count=0;      String line;      while ((line=br.readLine()) != null) {        line=line.trim();        if (line.startsWith("#") || line.equals("")) {          continue;        }        try {          if (false) {            Log.v(TAG,"Preloading " + line + "...");          }          Class.forName(line);          if (Debug.getGlobalAllocSize() > PRELOAD_GC_THRESHOLD) {            if (false) {              Log.v(TAG," GC at " + Debug.getGlobalAllocSize());            }            System.gc();            runtime.runFinalizationSync();            Debug.resetGlobalAllocSize();          }          count++;        } catch (        ClassNotFoundException e) {          Log.w(TAG,"Class not found for preloading: " + line);        }catch (        Throwable t) {          Log.e(TAG,"Error preloading " + line + ".",t);          if (t instanceof Error) {            throw (Error)t;          }          if (t instanceof RuntimeException) {            throw (RuntimeException)t;          }          throw new RuntimeException(t);        }      }      Log.i(TAG,"...preloaded " + count + " classes in "+ (SystemClock.uptimeMillis() - startTime)+ "ms.");    } catch (    IOException e) {      Log.e(TAG,"Error reading " + PRELOADED_CLASSES + ".",e);    } finally {      IoUtils.closeQuietly(is);      runtime.setTargetHeapUtilization(defaultUtilization);      Debug.stopAllocCounting();      setEffectiveUser(ROOT_UID);      setEffectiveGroup(ROOT_GID);    }  }}  }
class C{  protected void sequence_Exponentiation_Multiplication(ISerializationContext context,Expression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,Properties opConf){  dsf.saveToGeode(regionPath,func,dsf.defaultConnectionConf(),propertiesToScalaMap(opConf));}  }
class C{  public static SimpleScheduleBuilder repeatMinutelyForever(){  return simpleSchedule().withIntervalInMinutes(1).repeatForever();}  }
class C{  private void updateServiceEvents(VOPriceModel priceModel){  List<PricedEventRow> serviceEvents=new ArrayList<PricedEventRow>();  for (  VOPricedEvent pricedEvent : priceModel.getConsideredEvents()) {    PricedEventRow row;    if (pricedEvent.getSteppedPrices().isEmpty()) {      row=new PricedEventRow();      row.setPricedEvent(pricedEvent);      serviceEvents.add(row);    } else {      Collections.sort(pricedEvent.getSteppedPrices(),new SteppedPriceComparator());      for (      VOSteppedPrice sp : pricedEvent.getSteppedPrices()) {        row=new PricedEventRow();        row.setPricedEvent(pricedEvent);        row.setSteppedPrice(sp);        serviceEvents.add(row);      }    }  }  model.setServiceEvents(serviceEvents);}  }
class C{  private void readWayParams(){  for (  ConfigGroup e : config.getParameterSets(OsmConverterConfigGroup.OsmWayParams.SET_NAME)) {    OsmConverterConfigGroup.OsmWayParams w=(OsmConverterConfigGroup.OsmWayParams)e;    if (w.getOsmKey().equals(OsmTag.HIGHWAY)) {      highwayParams.put(w.getOsmValue(),w);    } else     if (w.getOsmKey().equals(OsmTag.RAILWAY)) {      railwayParams.put(w.getOsmValue(),w);    }  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static OrionEjbJarXml parseOracleEjbJarXml(InputStream input) throws IOException, JDOMException {  OrionEjbJarXmlIo xio=new OrionEjbJarXmlIo();  return (OrionEjbJarXml)xio.parseXml(input);}  }
class C{  LinkedEntry(){  super(null,null,0,null);  nxt=prv=this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.584 -0500",hash_original_method="D497FA9053D718AE60BC2EFC5B528C4E",hash_generated_method="D497FA9053D718AE60BC2EFC5B528C4E") String publicNameFromDiskName(String diskName){  if (!shouldDiskNameBeVisible(diskName)) {    throw new IllegalArgumentException("disk file should not be visible: " + diskName);  }  return diskName.substring(mFilePrefix.length(),diskName.length());}  }
class C{  public Exp(){  super(Number.class,Number.class);}  }
class C{  public void validationText(String valid,String invalid,String empty){  this.valid=valid;  this.invalid=invalid;  this.empty=empty;}  }
class C{  protected void addFlags(int flags){  this.status|=(flags & ~KIND_MASK);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1212) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static void resetFileStates(List<FileState> fileStates){  for (Iterator<FileState> iter=fileStates.iterator(); iter.hasNext(); ) {    FileState fileState=iter.next();    if (fileState.getModification() == deleted) {      iter.remove();    } else {      fileState.setModification(null);      fileState.setPreviousFileState(null);    }  }}  }
class C{  public AndSpecification(final Specification<T> spec1,final Specification<T> spec2){  this.spec1=spec1;  this.spec2=spec2;}  }
class C{  public static CCAnimate action(float duration,CCAnimation anim,boolean restore){  assert anim != null : "Animate: argument anim must be non-null";  return new CCAnimate(duration,anim,restore);}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  private Event gameStats(){  Event e=new Event(EType.GAMESTATS).setBoolean(isStarted);  if (isStarted) {    while (true) {      try {        waitingPlayers.await();        break;      } catch (      InterruptedException ie) {      }    }    int currentHuman=0;    ArrayList<String> runningStrings=new ArrayList<String>();    for (    String s : gamePlayers) {      if (s.equals(remotePlayerString)) {        RemotePlayer rp=remotePlayers.get(currentHuman++);        String name="Human player";        if (rp.getPlayerName() != "")         name+=": " + rp.getPlayerName();        if (rp.hasJoined())         runningStrings.add(name + " (playing)"); else         if (rp.getPort() > 0)         runningStrings.add(name + " (seat open)||" + rp.getPort()); else         runningStrings.add(name + " (not connected)");      } else       runningStrings.add(s);    }    e.setString(gameType).setObject(new EventObject(runningStrings.toArray(new String[0])));  } else   e.setInteger(numGameTypes).setObject(new EventObject(gameStrings));  return e;}  }
class C{  public static boolean isArrowpointAllowed(Object from,Object to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  @Override protected void updateCastlingRightsForNonEpNonCastlingMove(Move move){  FischerRandomUtils.updateCastlingRightsForNonEpNonCastlingMove(this,move,initialShortRookFile,initialLongRookFile);}  }
class C{  public void removeMessageEventRequestListener(MessageEventRequestListener messageEventRequestListener){synchronized (messageEventRequestListeners) {    messageEventRequestListeners.remove(messageEventRequestListener);  }}  }
class C{  public InferenceResult solveEqualities(Set<TypeVariable> targets,ConstraintMap constraintMap,AnnotatedTypeFactory typeFactory){  final InferenceResult solution=new InferenceResult();  do {    dirty=false;    for (    TypeVariable target : targets) {      if (solution.containsKey(target)) {        continue;      }      Equalities equalities=constraintMap.getConstraints(target).equalities;      InferredValue inferred=mergeConstraints(target,equalities,solution,constraintMap,typeFactory);      if (inferred != null) {        if (inferred instanceof InferredType) {          rewriteWithInferredType(target,((InferredType)inferred).type,constraintMap);        } else {          rewriteWithInferredTarget(target,((InferredTarget)inferred).target,constraintMap,typeFactory);        }        solution.put(target,inferred);      }    }  } while (dirty);  solution.resolveChainedTargets();  return solution;}  }
class C{  public FlatButton(final Composite parent,final int style){  super(parent,style);  this.listeners=new ArrayList<SelectionListener>();  buildAlignmentFromStyle(style);  addListeners();  initializeDefaultColors();}  }
class C{  private void startGame(){  Tile tile0=Tile.newRandomTile();  List<Location> randomLocs=new ArrayList<>(locations);  Collections.shuffle(randomLocs);  tile0.setLocation(randomLocs.get(0));  gameGrid.put(tile0.getLocation(),tile0);  if (new Random().nextFloat() <= 0.8) {    Tile tile1=Tile.newRandomTile();    if (tile1.getValue() == 4 && tile0.getValue() == 4) {      tile1=Tile.newTile(2);    }    tile1.setLocation(randomLocs.get(1));    gameGrid.put(tile1.getLocation(),tile1);  }  redrawTilesInGameGrid();  board.startGame();}  }
class C{  public void reset(){  classes.clear();}  }
class C{  public static X509Certificate verify(Signature signatureAlgorithm,X509TrustManager trustManager,List<String> certChainBase64,byte[] signatureBytes,byte[] contentBytes) throws InvalidKeyException, SignatureException {  CertificateFactory certificateFactory;  try {    certificateFactory=getX509CertificateFactory();  } catch (  CertificateException e) {    return null;  }  X509Certificate[] certificates=new X509Certificate[certChainBase64.size()];  int currentCert=0;  for (  String certBase64 : certChainBase64) {    byte[] certDer=Base64.decodeBase64(certBase64);    ByteArrayInputStream bis=new ByteArrayInputStream(certDer);    try {      Certificate cert=certificateFactory.generateCertificate(bis);      if (!(cert instanceof X509Certificate)) {        return null;      }      certificates[currentCert++]=(X509Certificate)cert;    } catch (    CertificateException e) {      return null;    }  }  try {    trustManager.checkServerTrusted(certificates,"RSA");  } catch (  CertificateException e) {    return null;  }  PublicKey pubKey=certificates[0].getPublicKey();  if (verify(signatureAlgorithm,pubKey,signatureBytes,contentBytes)) {    return certificates[0];  }  return null;}  }
class C{  public Builder category(Category category){  this.category=checkNotNull(category);  return this;}  }
class C{  public static OpenFlags validateFromOptions(Iterable<? extends OpenOption> options){  OpenFlags flags=fromOptions(options);  if (!flags.read && !flags.write) {    if (flags.append) {      flags.write=true;    } else {      flags.read=true;    }  }  if (flags.append && flags.read) {    throw new IllegalArgumentException("APPEND + READ not allowed");  }  if (flags.append && flags.truncateExisting) {    throw new IllegalArgumentException("APPEND + TRUNCATE_EXISTING not allowed");  }  return flags;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.010 -0500",hash_original_method="F1E314C8F9D29ADD33998DDD6715BE9D",hash_generated_method="A7B1F20FFC94114D5B1D891749AB46CF") protected TestResult createTestResult(){  return new TestResult();}  }
class C{  public static Iterable<String> toHexStrings(Iterable<ByteArray> arrays){  ArrayList<String> ret=new ArrayList<String>();  for (  ByteArray array : arrays)   ret.add(HexString.toHexString(array.get()));  return ret;}  }
class C{  public void processingInstruction(StylesheetHandler handler,String target,String data) throws org.xml.sax.SAXException {}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().getPluginProgress();}  }
class C{  public static void mixin(MetaClass self,Class categoryClass){  mixin(self,Collections.singletonList(categoryClass));}  }
class C{  void requestClose(String reason){  close(reason,true,true,false,false);}  }
class C{  public void testSimpleWatchGet() throws Exception {  WatchManager<String> em=new WatchManager<String>();  Watch<String> w=em.watch(new StringWatchPredicate("hello"),1);  em.process("hello!",0);  assertFalse("Not found yet",w.isDone());  em.process("hello",0);  assertTrue("Should be done",w.isDone());  assertFalse("Should not be cancelled",w.isCancelled());  assertEquals("Should have string event","hello",w.get());}  }
class C{  public Builder maxAge(Duration maxAge){  this.maxAge=maxAge;  return this;}  }
class C{  public int deserialize(final byte[] b,final int off){  if (b == null) {    return 0;  }  int parsedBytes=0;  try {    if (keyProviderIdLen_ < 0) {      parsedBytes+=parseKeyProviderIdLen(b,off + parsedBytes);    }    if (keyProviderId_ == null) {      parsedBytes+=parseKeyProviderId(b,off + parsedBytes);    }    if (keyProviderInfoLen_ < 0) {      parsedBytes+=parseKeyProviderInfoLen(b,off + parsedBytes);    }    if (keyProviderInfo_ == null) {      parsedBytes+=parseKeyProviderInfo(b,off + parsedBytes);    }    if (encryptedKeyLen_ < 0) {      parsedBytes+=parseKeyLen(b,off + parsedBytes);    }    if (encryptedKey_ == null) {      parsedBytes+=parseKey(b,off + parsedBytes);    }    isComplete_=true;  } catch (  ParseException e) {  }  return parsedBytes;}  }
class C{  public void clearParsers(){  if (parserManager != null) {    parserManager.clearParsers();  }}  }
class C{  public void handleExpansionRecursion(final HttpServerRequest request){  removeZipParameter(request);  handleExpansionRequest(request,RecursiveHandlerFactory.RecursiveHandlerTypes.EXPANSION);}  }
class C{  @Override public int hashCode(){  return x ^ y;}  }
class C{  public void createFailureNullCapacity2(){  new World(null,new AxisAlignedBounds(1,1));}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") protected final T_State enterShallowHistory(){  if (currentState != null) {    return currentState;  } else {    if (initialStateClass != null) {      return transitTo(initialStateClass);    } else {      return (T_State)this;    }  }}  }
class C{  public static long formatSecondsByPeriod(long seconds,Seconds period){  return seconds - (seconds % Int.int2long(period.getSeconds()));}  }
class C{  public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return;  }  try {    while (byteCount > 0) {      int bytesWritten=Libcore.os.write(fd,bytes,byteOffset,byteCount);      byteCount-=bytesWritten;      byteOffset+=bytesWritten;    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  private Locale(boolean unused,String lowerCaseLanguageCode,String upperCaseCountryCode){  this.languageCode=lowerCaseLanguageCode;  this.countryCode=upperCaseCountryCode;  this.variantCode="";}  }
class C{  public void testCase14(){  byte rBytes[]={1};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  return false;}  }
class C{  protected void notifySubscribers(Response data){  subject.onNext(data);}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  @VisibleForTesting void realloc(int newLength){  ensureValid();  if (newLength <= mBufRef.get().getSize()) {    return;  }  NativeMemoryChunk newbuf=mPool.get(newLength);  mBufRef.get().copy(0,newbuf,0,mCount);  mBufRef.close();  mBufRef=CloseableReference.of(newbuf,mPool);}  }
class C{  public PowerHostUtilizationHistory(int id,RamProvisioner ramProvisioner,BwProvisioner bwProvisioner,long storage,List<? extends Pe> peList,VmScheduler vmScheduler,PowerModel powerModel){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler,powerModel);}  }
class C{  public void crossFade(){  if (mCrossFadeSlidingPaneLayout.isOpen()) {    mCrossFadeSlidingPaneLayout.closePane();  } else {    mCrossFadeSlidingPaneLayout.openPane();  }}  }
class C{  public synchronized FontNameSetting createFontNameSetting(String key,String defaultValue){  FontNameSetting result=new FontNameSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  private static void locateFiles(String fileName,ArrayList<File> locatedFiles,File file,boolean isConfigFolder,boolean isDirectory){  fileName=fileName.trim();  if (file.exists()) {    if (file.isDirectory()) {      if (!isConfigFolder) {        isConfigFolder=file.getName().equalsIgnoreCase(Constants.CONFIG_ROOT);      }      File[] files=file.listFiles();      for (int i=0; i < files.length; i++) {        locateFiles(fileName,locatedFiles,files[i],isConfigFolder,isDirectory);      }    }    if (isConfigFolder && file.getName().equalsIgnoreCase(fileName)) {      if (isDirectory ^ file.isFile()) {        locatedFiles.add(file);      }    }  }}  }
class C{  public Boolean isSupports3D(){  return supports3D;}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("havnedistriktene"),false);  Analyzer a=new NorwegianAnalyzer(NorwegianAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"havnedistriktene","havnedistriktene");  checkOneTerm(a,"havnedistrikter","havnedistrikt");  a.close();}  }
class C{  public Coordinate findSplitPoint(Segment seg,Coordinate encroachPt){  Coordinate p0=seg.getStart();  Coordinate p1=seg.getEnd();  return new Coordinate((p0.x + p1.x) / 2,(p0.y + p1.y) / 2);}  }
class C{  private static int NewByteArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewByteArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    byte[] newArray=new byte[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static final List<Vec3D> splitIntoSegments(Vec3D a,Vec3D b,float stepLength,List<Vec3D> segments,boolean addFirst){  if (segments == null) {    segments=new ArrayList<Vec3D>();  }  if (addFirst) {    segments.add(a.copy());  }  float dist=a.distanceTo(b);  if (dist > stepLength) {    Vec3D pos=a.copy();    Vec3D step=b.sub(a).limit(stepLength);    while (dist > stepLength) {      pos.addSelf(step);      segments.add(pos.copy());      dist-=stepLength;    }  }  segments.add(b.copy());  return segments;}  }
class C{  public static void createDefaultGroups(@NonNull Realm realm){  if (!isEmpty(realm)) {    return;  }  realm.beginTransaction();  Group workGroup=realm.createObject(Group.class);  workGroup.setName(GroupHelper.WORK);  workGroup.setDescription("Great Projects");  workGroup.setCategoryName(GroupHelper.CATEGORY_POPULAR);  workGroup.setDefaultGroup(true);  Group travelGroup=realm.createObject(Group.class);  travelGroup.setName(GroupHelper.TRAVEL);  travelGroup.setDescription("Super Plans");  travelGroup.setCategoryName(GroupHelper.CATEGORY_POPULAR);  travelGroup.setDefaultGroup(true);  Group foodGroup=realm.createObject(Group.class);  foodGroup.setName(GroupHelper.FOOD);  foodGroup.setDescription("Need to buy");  foodGroup.setCategoryName(GroupHelper.CATEGORY_POPULAR);  foodGroup.setDefaultGroup(true);  Group privateGroup=realm.createObject(Group.class);  privateGroup.setName(GroupHelper.PRIVATE);  privateGroup.setDescription("Private tasks");  privateGroup.setCategoryName(GroupHelper.CATEGORY_POPULAR);  privateGroup.setDefaultGroup(true);  realm.commitTransaction();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Properties props=(java.util.Properties)stack.pop();  java.io.File dest=getFile(stack);  String src=getString(stack);  String serverName=getString(stack);  return new FileDownloader(null).downloadFile(serverName,src,dest,false,props);}  }
class C{  public void zoomInBoth(double x,double y){  Plot plot=this.chart.getPlot();  if (plot == null) {    return;  }  boolean savedNotify=plot.isNotify();  plot.setNotify(false);  zoomInDomain(x,y);  zoomInRange(x,y);  plot.setNotify(savedNotify);}  }
class C{  private boolean fireSelectionListeners(final SelectionEvent selectionEvent){  final Event event=new Event();  event.button=0;  event.display=this.getDisplay();  event.item=null;  event.widget=this;  event.data=null;  event.time=selectionEvent.time;  event.x=selectionEvent.x;  event.y=selectionEvent.y;  final SelectionEvent selEvent=new SelectionEvent(event);  for (  final SelectionListener listener : this.selectionListeners) {    listener.widgetSelected(selEvent);    if (!selEvent.doit) {      return false;    }  }  return true;}  }
class C{  public Boolean isAdminDisabled(){  return adminDisabled;}  }
class C{  public long next() throws IOException {  if (ord == valueCount) {    throw new EOFException();  }  if (off == blockSize) {    refill();  }  final long value=values[off++];  ++ord;  return value;}  }
class C{  public void insert(MyMap myMap){  myMaps.add(0,myMap);  notifyItemInserted(0);}  }
class C{  public static void main(String[] args){  TestInterface tester=new TestInterface();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void legacyProcess(Class clazz,Method m,MethodAppearanceDecision decision){  if (m.getDeclaringClass() != Object.class && m.getReturnType() != void.class && m.getParameterTypes().length == 0) {    String mName=m.getName();    if (!looksLikePropertyReadMethod(mName)) {      decision.setExposeMethodAs(null);      try {        decision.setExposeAsProperty(new PropertyDescriptor(mName,clazz,mName,null));      } catch (      IntrospectionException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  public void stdoutShouldNotMatch(String pattern){  Matcher matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stdout);  if (matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' found in stdout \n");  }}  }
class C{  public static double mean(double lambda){  return 1.0 / (lambda);}  }
class C{  public void assertSubsetOf(Query q1,Query q2) throws Exception {  assertSubsetOf(q1,q2,null);  int numFilters=TEST_NIGHTLY ? atLeast(10) : atLeast(3);  for (int i=0; i < numFilters; i++) {    Query filter=randomFilter();    assertSubsetOf(q1,q2,filter);    assertSubsetOf(filteredQuery(q1,filter),filteredQuery(q2,filter),null);  }}  }
class C{  public boolean createDb(){synchronized (this) {    aDbHasEverBeenCreatedInThisProcess=true;    db.createDb();    return true;  }}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  public static void writeToFile(final String path,final String content) throws IOException {  System.gc();  FileOutputStream fileOutputStream=null;  OutputStreamWriter outputStreamWriter=null;  BufferedWriter bw=null;  try {    File parentDir=new File(path).getParentFile();    if (!parentDir.exists()) {      parentDir.mkdirs();    }    fileOutputStream=new FileOutputStream(path);    outputStreamWriter=new OutputStreamWriter(fileOutputStream,"UTF8");    bw=new BufferedWriter(outputStreamWriter);    bw.write(content);  }  finally {    if (bw != null) {      try {        bw.close();      } catch (      Exception e) {        e.printStackTrace();      }    }    if (outputStreamWriter != null) {      try {        outputStreamWriter.close();      } catch (      Exception e) {        e.printStackTrace();      }    }    if (fileOutputStream != null) {      try {        fileOutputStream.close();      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public void onDraw(Paint paint){  paint.setColor(paintColor);}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  private void addBevelJoin(LineSegment offset0,LineSegment offset1){  segList.addPt(offset0.p1);  segList.addPt(offset1.p0);}  }
class C{  public JmsQueueScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public BackupCompletionNotification(URI uri){  super(uri);}  }
class C{  private boolean calculatePL_VB(){  if (m_M_Product_ID == 0)   return false;  if (m_M_PriceList_ID == 0) {    log.log(Level.SEVERE,"No PriceList");    Trace.printStack();    return false;  }  String sql="SELECT pp.PriceStd," + " pp.PriceList," + " pp.PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,pl.EnforcePriceLimit "+ "FROM M_Product p"+ " INNER JOIN M_ProductPriceVendorBreak pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist pl ON (pv.M_PriceList_ID=pl.M_PriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pv.M_PriceList_ID=?"+ " AND pp.C_BPartner_ID=?"+ " AND ?>=pp.BreakValue"+ " ORDER BY pv.ValidFrom DESC, BreakValue DESC";  m_calculated=false;  if (m_PriceDate == null)   m_PriceDate=new Timestamp(System.currentTimeMillis());  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_ID);    pstmt.setInt(3,m_C_BPartner_ID);    pstmt.setBigDecimal(4,m_Qty);    rs=pstmt.executeQuery();    while (!m_calculated && rs.next()) {      Timestamp plDate=rs.getTimestamp(5);      if (plDate == null || !m_PriceDate.before(plDate)) {        m_PriceStd=rs.getBigDecimal(1);        if (rs.wasNull())         m_PriceStd=Env.ZERO;        m_PriceList=rs.getBigDecimal(2);        if (rs.wasNull())         m_PriceList=Env.ZERO;        m_PriceLimit=rs.getBigDecimal(3);        if (rs.wasNull())         m_PriceLimit=Env.ZERO;        m_C_UOM_ID=rs.getInt(4);        m_C_Currency_ID=rs.getInt(6);        m_M_Product_Category_ID=rs.getInt(7);        m_enforcePriceLimit="Y".equals(rs.getString(8));        log.fine("M_PriceList_ID=" + m_M_PriceList_ID + "("+ plDate+ ")"+ " - "+ m_PriceStd);        m_calculated=true;        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!m_calculated)   log.finer("Not found (PL)");  return m_calculated;}  }
class C{  @Override public void exitQuery(CQNGrammarParser.QueryContext ctx){  numQueriesEncountered++;  validateAllQueriesParsed(numQueriesEncountered,numQueriesParsed);}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  boolean square=!(distance instanceof SquaredEuclideanDistanceFunction);  int ignorednoise=0;  List<? extends Cluster<?>> clusters=c.getAllClusters();  double ssq=0, sum=0;  for (  Cluster<?> cluster : clusters) {    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        ignorednoise+=cluster.size();      continue;case TREAT_NOISE_AS_SINGLETONS:    continue;case MERGE_NOISE:  break;}}NumberVector center=ModelUtil.getPrototypeOrCentroid(cluster.getModel(),rel,cluster.getIDs());for (DBIDIter it1=cluster.getIDs().iter(); it1.valid(); it1.advance()) {final double d=distance.distance(center,rel.get(it1));sum+=d;ssq+=square ? d * d : d;}}final int div=Math.max(1,rel.size() - ignorednoise);if (LOG.isStatistics()) {LOG.statistics(new DoubleStatistic(key + ".mean",sum / div));LOG.statistics(new DoubleStatistic(key + ".ssq",ssq));LOG.statistics(new DoubleStatistic(key + ".rmsd",Math.sqrt(ssq / div)));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("Mean distance",sum / div,0.,Double.POSITIVE_INFINITY,true);g.addMeasure("Sum of Squares",ssq,0.,Double.POSITIVE_INFINITY,true);g.addMeasure("RMSD",Math.sqrt(ssq / div),0.,Double.POSITIVE_INFINITY,true);db.getHierarchy().add(c,ev);return ssq;}  }
class C{  protected Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){  if (dataset == null) {    return null;  }  if (getDataBoundsIncludesVisibleSeriesOnly()) {    List visibleSeriesKeys=new ArrayList();    int seriesCount=dataset.getRowCount();    for (int s=0; s < seriesCount; s++) {      if (isSeriesVisible(s)) {        visibleSeriesKeys.add(dataset.getRowKey(s));      }    }    return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,includeInterval);  } else {    return DatasetUtilities.findRangeBounds(dataset,includeInterval);  }}  }
class C{  int instanceChildIndex(Instance inst){  return this.splitTest.branchForInstance(inst);}  }
class C{  public static synchronized void addParallelLine(final JFreeChartPlotEngine engine,Point latestPopupLocation){  if (dialog == null) {    dialog=new AddParallelLineDialog();  }  dialog.setMousePosition(latestPopupLocation);  dialog.setChartEngine(engine);  dialog.showDialog();}  }
class C{  public void enableAnimations(){  mShouldAnimate=true;}  }
class C{  protected void closeEventStream(){  try {    this.eventStream.close();    this.eventStream=null;  } catch (  IOException e) {    String message=Logging.getMessage("generic.ExceptionClosingXmlEventReader");    Logging.logger().warning(message);  }}  }
class C{  void sub(BigDecimalPolynomial b){  if (b.coeffs.length > coeffs.length) {    int N=coeffs.length;    coeffs=copyOf(coeffs,b.coeffs.length);    for (int i=N; i < coeffs.length; i++) {      coeffs[i]=ZERO;    }  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=coeffs[i].subtract(b.coeffs[i]);  }}  }
class C{  public Object removeMultiKey(Object key1,Object key2,Object key3,Object key4){  int hashCode=hash(key1,key2,key3,key4);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  AbstractHashedMap.HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4)) {      Object oldValue=entry.getValue();      map.removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public static String cut(final String version,final int parts){  int pos=0;  for (int i=0; i < parts; i++) {    final int temp=version.indexOf(".",pos + 1);    if (temp < 0) {      pos=version.length();      break;    }    pos=temp;  }  return version.substring(0,pos);}  }
class C{  protected TryStatementImpl(){  super();}  }
class C{  public boolean matchesNormalized(final Expression other){  if (other != null) {    if (other.matcher == null) {      if (getNormalized().equals(other.getNormalized())) {        return true;      }    } else {      if (matcher != null) {        if (!matcher.equals(other.matcher)) {          return false;        }      }      return other.matcher.match(this,other);    }  }  return false;}  }
class C{  @Override public Object clone(){  Trie result;  result=new Trie();  result.m_Root=(TrieNode)m_Root.clone();  return result;}  }
class C{  public static Map<String,String> createTimestampUserData(TModule module){  Resource resource=module.eResource();  long timestamp=0L;  if (resource instanceof N4JSResource) {    timestamp=((N4JSResource)resource).getModificationStamp();  } else {    timestamp=System.currentTimeMillis();  }  return Collections.singletonMap(USERDATA_KEY_TIMESTAMP,String.valueOf(timestamp));}  }
class C{  public Date when(){  return when;}  }
class C{  public static void initDefaultFlowMod(OFFlowMod.Builder fmb,String entryName){  fmb.setIdleTimeout(INFINITE_TIMEOUT).setHardTimeout(INFINITE_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setOutPort(OFPort.ANY).setCookie(computeEntryCookie(0,entryName)).setPriority(Integer.MAX_VALUE).setFlags(Collections.singleton(OFFlowModFlags.SEND_FLOW_REM));  return;}  }
class C{  public void writeRawLittleEndian32(final int value) throws IOException {  writeRawByte((value) & 0xFF);  writeRawByte((value >> 8) & 0xFF);  writeRawByte((value >> 16) & 0xFF);  writeRawByte((value >> 24) & 0xFF);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  private void new_estimators(){  for (int i=0; i < m_num_clusters; i++) {    for (int j=0; j < m_num_attribs; j++) {      if (m_theInstances.attribute(j).isNominal()) {        m_modelPrev[i][j]=m_model[i][j];        m_model[i][j]=new DiscreteEstimator(m_theInstances.attribute(j).numValues(),true);      } else {        m_modelNormalPrev[i][j][0]=m_modelNormal[i][j][0];        m_modelNormalPrev[i][j][1]=m_modelNormal[i][j][1];        m_modelNormalPrev[i][j][2]=m_modelNormal[i][j][2];        m_modelNormal[i][j][0]=m_modelNormal[i][j][1]=m_modelNormal[i][j][2]=0.0;      }    }  }}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public ByteBuffer duplicate(){  return copy(this,mark);}  }
class C{  public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public ExtentTest assignAuthor(String author){  Author a=new Author();  a.setName(author);  test.setAuthor(a);  extent.assignAuthor(test,a);  return this;}  }
class C{  protected static double regularizedIncBetaCF(double alpha,double beta,double x){  final double FPMIN=Double.MIN_VALUE / NUM_PRECISION;  double qab=alpha + beta;  double qap=alpha + 1.0;  double qam=alpha - 1.0;  double c=1.0;  double d=1.0 - qab * x / qap;  if (Math.abs(d) < FPMIN) {    d=FPMIN;  }  d=1.0 / d;  double h=d;  for (int m=1; m < 10000; m++) {    int m2=2 * m;    double aa=m * (beta - m) * x / ((qam + m2) * (alpha + m2));    d=1.0 + aa * d;    if (Math.abs(d) < FPMIN) {      d=FPMIN;    }    c=1.0 + aa / c;    if (Math.abs(c) < FPMIN) {      c=FPMIN;    }    d=1.0 / d;    h*=d * c;    aa=-(alpha + m) * (qab + m) * x / ((alpha + m2) * (qap + m2));    d=1.0 + aa * d;    if (Math.abs(d) < FPMIN) {      d=FPMIN;    }    c=1.0 + aa / c;    if (Math.abs(c) < FPMIN) {      c=FPMIN;    }    d=1.0 / d;    double del=d * c;    h*=del;    if (Math.abs(del - 1.0) <= NUM_PRECISION) {      break;    }  }  return h;}  }
class C{  private void createResponse(final HttpServerRequest request,final HttpClientResponse response){  request.response().setStatusCode(response.statusCode());  request.response().setStatusMessage(response.statusMessage());  request.response().setChunked(true);  request.response().headers().addAll(response.headers());  request.response().headers().remove("Content-Length");  response.handler(null);  response.endHandler(null);}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("RSI period must be  greater than zero.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    double diffCloseValue=0;    if (source.getItemCount() > 1) {      CandleItem prevCandleItem=(CandleItem)source.getDataItem(skip - 1);      diffCloseValue=candleItem.getClose() - prevCandleItem.getClose();      if (this.getRollingCandle()) {        diffCloseValue=source.getRollingCandle().getClose() - source.getPreviousRollingCandle().getClose();      }      if (newBar) {        if (diffCloseValue > 0) {          posSumCloseDiff=posSumCloseDiff + Math.abs(diffCloseValue);        } else {          negSumCloseDiff=negSumCloseDiff + Math.abs(diffCloseValue);        }        prevAvgLossRSI=avgLossRSI;        prevAvgGainRSI=avgGainRSI;        preDiffCloseValue=diffCloseValue;      } else {        if (diffCloseValue > 0 && preDiffCloseValue > 0) {          posSumCloseDiff=posSumCloseDiff + Math.abs(diffCloseValue) - Math.abs(preDiffCloseValue);        } else         if (diffCloseValue > 0 && preDiffCloseValue < 0) {          posSumCloseDiff=posSumCloseDiff + Math.abs(diffCloseValue);          negSumCloseDiff=negSumCloseDiff - Math.abs(preDiffCloseValue);        } else         if (diffCloseValue < 0 && preDiffCloseValue < 0) {          negSumCloseDiff=negSumCloseDiff + Math.abs(diffCloseValue) - Math.abs(preDiffCloseValue);        } else         if (diffCloseValue < 0 && preDiffCloseValue > 0) {          negSumCloseDiff=negSumCloseDiff + Math.abs(diffCloseValue);          posSumCloseDiff=posSumCloseDiff - Math.abs(preDiffCloseValue);        }      }    }    if (skip >= getLength()) {      if (currentRSI == Double.MAX_VALUE) {        avgGainRSI=posSumCloseDiff / getLength();        avgLossRSI=negSumCloseDiff / getLength();        currentRSI=100 - (100 / (1 + (avgGainRSI / (avgLossRSI == 0 ? 1 : avgLossRSI))));      } else {        if (preDiffCloseValue > 0) {          avgGainRSI=(((prevAvgGainRSI * (getLength() - 1)) + Math.abs(preDiffCloseValue))) / getLength();          avgLossRSI=(((prevAvgLossRSI * (getLength() - 1)) + 0)) / getLength();        } else {          avgGainRSI=(((prevAvgGainRSI * (getLength() - 1)) + 0)) / getLength();          avgLossRSI=(((prevAvgLossRSI * (getLength() - 1)) + Math.abs(preDiffCloseValue))) / getLength();        }        currentRSI=100 - (100 / (1 + (avgGainRSI / (avgLossRSI == 0 ? 1 : avgLossRSI))));      }      if (newBar) {        RelativeStrengthIndexItem dataItem=new RelativeStrengthIndexItem(candleItem.getPeriod(),new BigDecimal(currentRSI));        this.add(dataItem,false);      } else {        RelativeStrengthIndexItem dataItem=(RelativeStrengthIndexItem)this.getDataItem(this.getItemCount() - 1);        dataItem.setRelativeStrengthIndex(currentRSI);      }    }  }}  }
class C{  protected int nextOffset(){  int opcode=getCode()[_offset] & 0xff;  int length=OP_LEN[opcode];switch (opcode) {case GOTO:case GOTO_W:case RET:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:    return -1;case TABLESWITCH:{    int arg=_offset + 1;    arg+=(4 - arg % 4) % 4;    int low=getInt(arg + 4);    int high=getInt(arg + 8);    return arg + 12 + (high - low + 1) * 4;  }case LOOKUPSWITCH:{  return -1;}case WIDE:{int op2=getCode()[_offset + 1] & 0xff;if (op2 == IINC) length=5; else length=3;break;}}if (length < 0 || length > 0x10) throw new UnsupportedOperationException(L.l("{0}: can't handle opcode {1}","" + _offset,"" + getOpcode()));return _offset + length + 1;}  }
class C{  public Object invoke(Object o) throws IllegalAccessException, InvocationTargetException {  return method.invoke(o,args);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public static void flushExternalFileCache(){  existingExternalFiles=new HashSet<>();  existingExternalConfirmedFiles=new HashSet<>();}  }
class C{  @Override public float defineBoost(final Object value){  final Product product=(Product)value;  return 1f + featuredBoost(product) + categoryBoost(product);}  }
class C{  public void addEventTypeName(String eventTypeName){  variantTypeNames.add(eventTypeName);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static boolean intersectsOneOf(final Rectangle2D r,final Collection<? extends Shape> shapes){  if (shapes.isEmpty()) {    return false;  }  for (  final Shape item : shapes) {    if (item.intersects(r)) {      return true;    }  }  return false;}  }
class C{  protected void sendDiscoveryMessage(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (!isOutgoingDiscoveryAllowed(sw,port,isStandard,isReverse))   return;  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null)   return;  OFPortDesc ofpPort=iofSwitch.getPort(port);  OFPacketOut po=generateLLDPMessage(iofSwitch,port,isStandard,isReverse);  OFPacketOut.Builder pob=po.createBuilder();  List<OFAction> actions=getDiscoveryActions(iofSwitch,ofpPort.getPortNo());  pob.setActions(actions);  iofSwitch.write(pob.build());}  }
class C{  public String notesTipText(){  return "The (optional) notes for this experiment in Markdown.";}  }
class C{  public List<ExportGroupRestRep> exportBlockResources(List<URI> resourceIds,URI parentId){  List<ExportGroupRestRep> exports=Lists.newArrayList();  List<URI> newVolumes=new ArrayList<URI>();  Map<URI,Set<URI>> addVolumeExports=Maps.newHashMap();  Map<URI,URI> addComputeResourceToExports=Maps.newHashMap();  Integer currentHlu=hlu;  List<BlockObjectRestRep> blockResources=BlockStorageUtils.getBlockResources(resourceIds,parentId);  URI virtualArrayId=null;  for (  BlockObjectRestRep blockResource : blockResources) {    virtualArrayId=getVirtualArrayId(blockResource);    ExportGroupRestRep export=findExistingExportGroup(blockResource,virtualArrayId);    if (export == null) {      newVolumes.add(blockResource.getId());    } else {      if (BlockStorageUtils.isVolumeInExportGroup(export,blockResource.getId())) {        logInfo("export.block.volume.contains.volume",export.getId(),blockResource.getId());      } else {        updateExportVolumes(export,blockResource,addVolumeExports);      }      if (BlockStorageUtils.isEmptyExport(export)) {        URI computeResource=cluster != null ? cluster.getId() : host.getId();        addComputeResourceToExports.put(export.getId(),computeResource);      }      exports.add(export);    }  }  List<URI> volumeIds=Lists.newArrayList();  for (  Map.Entry<URI,Set<URI>> entry : addVolumeExports.entrySet()) {    volumeIds.addAll(entry.getValue());  }  Map<URI,Integer> volumeHlus=getVolumeHLUs(volumeIds);  for (  Map.Entry<URI,Set<URI>> entry : addVolumeExports.entrySet()) {    BlockStorageUtils.addVolumesToExport(entry.getValue(),currentHlu,entry.getKey(),volumeHlus,minPaths,maxPaths,pathsPerInitiator);    logInfo("export.block.volume.add.existing",entry.getValue(),entry.getKey());    if ((currentHlu != null) && (currentHlu > -1)) {      currentHlu+=entry.getValue().size();    }  }  for (  Map.Entry<URI,URI> entry : addComputeResourceToExports.entrySet()) {    if (cluster != null) {      BlockStorageUtils.addClusterToExport(entry.getKey(),cluster.getId(),minPaths,maxPaths,pathsPerInitiator);      logInfo("export.cluster.add.existing",entry.getValue(),entry.getKey());    } else {      BlockStorageUtils.addHostToExport(entry.getKey(),host.getId(),minPaths,maxPaths,pathsPerInitiator);      logInfo("export.host.add.existing",entry.getValue(),entry.getKey());    }  }  if (!newVolumes.isEmpty()) {    volumeHlus=getVolumeHLUs(newVolumes);    URI exportId=null;    if (cluster != null) {      exportId=BlockStorageUtils.createClusterExport(projectId,virtualArrayId,newVolumes,currentHlu,cluster,volumeHlus,minPaths,maxPaths,pathsPerInitiator);    } else {      exportId=BlockStorageUtils.createHostExport(projectId,virtualArrayId,newVolumes,currentHlu,host,volumeHlus,minPaths,maxPaths,pathsPerInitiator);    }    ExportGroupRestRep export=BlockStorageUtils.getExport(exportId);    exports.add(export);  }  if (host != null) {    ExecutionUtils.addAffectedResource(host.getId().toString());  } else   if (cluster != null) {    ExecutionUtils.addAffectedResource(cluster.getId().toString());  }  ExecutionUtils.clearRollback();  return exports;}  }
class C{  protected void writeHeader() throws IOException {  header=new byte[SHAPE_FILE_HEADER_LENGTH];  writeBEInt(header,0,SHAPE_FILE_CODE);  writeBEInt(header,24,50);  writeLEInt(header,28,SHAPE_FILE_VERSION);  writeLEInt(header,32,SHAPE_TYPE_NULL);  writeLEDouble(header,36,0.0);  writeLEDouble(header,44,0.0);  writeLEDouble(header,52,0.0);  writeLEDouble(header,60,0.0);  raf.seek(0);  raf.write(header,0,SHAPE_FILE_HEADER_LENGTH);}  }
class C{  public void testParseLargeFile() throws Exception {  MyReader reader=new MyReader();  String delimiter="\r?\n";  Scanner scanner=new Scanner(reader).useDelimiter(delimiter);  while (scanner.hasNext()) {    scanner.next();  }  scanner.close();  reader.close();}  }
class C{  public Template findTemplate(String name,String contextTypeId){  Assert.isNotNull(name);  for (Iterator it=fTemplates.iterator(); it.hasNext(); ) {    TemplatePersistenceData data=(TemplatePersistenceData)it.next();    Template template=data.getTemplate();    if (data.isEnabled() && !data.isDeleted() && (contextTypeId == null || contextTypeId.equals(template.getContextTypeId()))&& name.equals(template.getName()))     return template;  }  return null;}  }
class C{  public void testLimitAndMaxRows() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testMaxRowsAndLimit");    this.stmt.executeUpdate("CREATE TABLE testMaxRowsAndLimit(limitField INT)");    for (int i=0; i < 500; i++) {      this.stmt.executeUpdate("INSERT INTO testMaxRowsAndLimit VALUES (" + i + ")");    }    this.stmt.setMaxRows(250);    this.rs=this.stmt.executeQuery("SELECT limitField FROM testMaxRowsAndLimit");  }  finally {    this.stmt.setMaxRows(0);    this.stmt.executeUpdate("DROP TABLE IF EXISTS testMaxRowsAndLimit");  }}  }
class C{  public CoordinateSequence create(Coordinate[] coordinates){  return coordinates instanceof ExtendedCoordinate[] ? new ExtendedCoordinateSequence((ExtendedCoordinate[])coordinates) : new ExtendedCoordinateSequence(coordinates);}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableTransformListValue o=(AnimatableTransformListValue)other;  if (transforms.isEmpty() || o.transforms.isEmpty()) {    return 0f;  }  AbstractSVGTransform t1=(AbstractSVGTransform)transforms.lastElement();  AbstractSVGTransform t2=(AbstractSVGTransform)o.transforms.lastElement();  short type1=t1.getType();  if (type1 != t2.getType()) {    return 0f;  }  SVGMatrix m1=t1.getMatrix();  SVGMatrix m2=t2.getMatrix();switch (type1) {case SVGTransform.SVG_TRANSFORM_TRANSLATE:    return Math.abs(m1.getE() - m2.getE()) + Math.abs(m1.getF() - m2.getF());case SVGTransform.SVG_TRANSFORM_SCALE:  return Math.abs(m1.getA() - m2.getA()) + Math.abs(m1.getD() - m2.getD());case SVGTransform.SVG_TRANSFORM_ROTATE:case SVGTransform.SVG_TRANSFORM_SKEWX:case SVGTransform.SVG_TRANSFORM_SKEWY:return Math.abs(t1.getAngle() - t2.getAngle());}return 0f;}  }
class C{  @Override public void write(final String filename){  this.writeStartPlans(filename);  this.writePersons();  this.writeEndPlans();  counter.printCounter();  counter.reset();  log.info("Population written to: " + filename);}  }
class C{  @Override public int speed(){  if (this.count == 0)   return 0;  return (int)(this.count / Math.max(1L,runningTime()));}  }
class C{  public static Button button(ImageView icon,String tip,EventHandler<ActionEvent> onAct){  Button btn=new Button();  btn.setGraphic(icon);  btn.setOnAction(onAct);  tooltip(btn,tip);  return btn;}  }
class C{  public DLSequence(){}  }
class C{  public PostorderTraversal(T node){  super(node);}  }
class C{  @Nullable public static Object[] readArray(ObjectInput in) throws IOException, ClassNotFoundException {  int len=in.readInt();  Object[] arr=null;  if (len > 0) {    arr=new Object[len];    for (int i=0; i < len; i++)     arr[i]=in.readObject();  }  return arr;}  }
class C{  public boolean isFrozen(){  return frozen;}  }
class C{  public static QueryEntity readQueryEntity(BinaryRawReader in){  QueryEntity res=new QueryEntity();  res.setKeyType(in.readString());  res.setValueType(in.readString());  int cnt=in.readInt();  if (cnt > 0) {    LinkedHashMap<String,String> fields=new LinkedHashMap<>(cnt);    for (int i=0; i < cnt; i++)     fields.put(in.readString(),in.readString());    res.setFields(fields);  }  cnt=in.readInt();  if (cnt > 0) {    Map<String,String> aliases=new HashMap<>(cnt);    for (int i=0; i < cnt; i++)     aliases.put(in.readString(),in.readString());    res.setAliases(aliases);  }  cnt=in.readInt();  if (cnt > 0) {    Collection<QueryIndex> indexes=new ArrayList<>(cnt);    for (int i=0; i < cnt; i++)     indexes.add(readQueryIndex(in));    res.setIndexes(indexes);  }  return res;}  }
class C{  public boolean hasBeShownForThisVersion(int appVersionCode){  if (onAllAfter != null) {    if (appVersionCode > onAllAfter) {      return true;    }  }  if (onAllBefore != null) {    if (appVersionCode < onAllBefore) {      return true;    }  }  if (onSpecific != null) {    if (onSpecific.contains(appVersionCode)) {      return true;    }  }  return false;}  }
class C{  public boolean isValidRow(int row){  return (row >= m_firstid && row <= m_curid && (m_openrows == null || !m_openrows.containsKey(row)));}  }
class C{  public void testDisablePrecedence(){  Query expected=new TermQuery(new Term("field","(foo)"));  assertEquals(expected,parseKeyword("(foo)",~PRECEDENCE_OPERATORS));  expected=new TermQuery(new Term("field",")foo("));  assertEquals(expected,parseKeyword(")foo(",~PRECEDENCE_OPERATORS));}  }
class C{  public double areaUnderPRC(int classIndex){  return m_delegate.areaUnderPRC(classIndex);}  }
class C{  public static void main(String[] args) throws Exception {  CheckSource check;  StringBuffer text;  Enumeration<Option> enm;  check=new CheckSource();  if (Utils.getFlag('h',args)) {    text=new StringBuffer();    text.append("\nHelp requested:\n\n");    enm=check.listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      text.append(option.synopsis() + "\n");      text.append(option.description() + "\n");    }    System.out.println("\n" + text + "\n");  } else {    check.setOptions(args);    if (check.execute()) {      System.out.println("Tests OK!");    } else {      System.out.println("Tests failed!");    }  }}  }
class C{  public TransferEntropyCalculatorKernelPlainIterators(){  super();}  }
class C{  private boolean startSymbolicCarry(char[] ca,int cLast,int cFirst){  boolean carry=true;  for (int i=cLast; carry && i >= cFirst; i--) {    carry=false;switch (ca[i]) {case '0':      ca[i]='1';    break;case '1':  ca[i]='2';break;case '2':ca[i]='3';break;case '3':ca[i]='4';break;case '4':ca[i]='5';break;case '5':ca[i]='6';break;case '6':ca[i]='7';break;case '7':ca[i]='8';break;case '8':ca[i]='9';break;case '9':ca[i]='0';carry=true;break;}}return carry;}  }
class C{  public FragmentLoader(Map<String,AttributteFragmentProvider> attfragmentProviderMap){  this.attfragmentProviderMap=attfragmentProviderMap;  classCache=new HashMap<String,IGenerator>();}  }
class C{  public static void init(int numUser,Calendar cal,boolean traceFlag){  try {    initCommonVariable(cal,traceFlag,numUser);    cis=new CloudInformationService("CloudInformationService");    cisId=cis.getId();  } catch (  IllegalArgumentException s) {    Log.printLine("CloudSim.init(): The simulation has been terminated due to an unexpected error");    Log.printLine(s.getMessage());  }catch (  Exception e) {    Log.printLine("CloudSim.init(): The simulation has been terminated due to an unexpected error");    Log.printLine(e.getMessage());  }}  }
class C{  public List<Protos.Resource> consumePorts(Collection<Long> requestedValues){  return rangeValues.get(RESOURCE_PORTS).consumeResource(requestedValues);}  }
class C{  public void testEmptyHighlights() throws Exception {  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document doc=new Document();  Field body=new Field("body","test this is.  another sentence this test has.  far away is that planet.",fieldType);  doc.add(body);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);  Query query=new TermQuery(new Term("body","highlighting"));  int[] docIDs=new int[]{0};  String snippets[]=highlighter.highlightFields(new String[]{"body"},query,docIDs,new int[]{2}).get("body");  assertEquals(1,snippets.length);  assertEquals("test this is.  another sentence this test has.  ",snippets[0]);  ir.close();}  }
class C{  public static void writeExtensionMedia(OutputStream theOs,String theStr) throws IOException {  theOs.write(theStr.getBytes(StandardCharsets.UTF_8));  theOs.write((byte)0x00);}  }
class C{  public boolean hasAttributes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public Color readPixelColor(int x,int y,Color result){  if (result == null) {    result=new Color();  }  ByteBuffer pixelBuffer=(ByteBuffer)this.scratchBuffer(4).clear();  GLES20.glReadPixels(x,y,1,1,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuffer);  pixelBuffer.get(this.pixelArray,0,4);  result.red=(this.pixelArray[0] & 0xFF) / (float)0xFF;  result.green=(this.pixelArray[1] & 0xFF) / (float)0xFF;  result.blue=(this.pixelArray[2] & 0xFF) / (float)0xFF;  result.alpha=(this.pixelArray[3] & 0xFF) / (float)0xFF;  return result;}  }
class C{  @Override public void run(){  ImageToProcess img=mImage;  Rect safeCrop=guaranteedSafeCrop(img.proxy,img.crop);  final TaskImage inputImage=calculateInputImage(img,safeCrop);  final int subsample=calculateBestSubsampleFactor(new Size(safeCrop.width(),safeCrop.height()),mTargetSize);  final TaskImage resultImage=calculateResultImage(img,subsample);  final int[] convertedImage;  try {    onStart(mId,inputImage,resultImage,TaskInfo.Destination.FAST_THUMBNAIL);    logWrapper("TIMER_END Rendering preview YUV buffer available, w=" + img.proxy.getWidth() / subsample + " h=" + img.proxy.getHeight() / subsample + " of subsample " + subsample);    convertedImage=runSelectedConversion(img.proxy,safeCrop,subsample);  }  finally {    mImageTaskManager.releaseSemaphoreReference(img,mExecutor);  }  onPreviewDone(resultImage,inputImage,convertedImage,TaskInfo.Destination.FAST_THUMBNAIL);}  }
class C{  public int size(){  return effects.size();}  }
class C{  public static boolean targsUseSynapticInputs(Collection<Synapse> synapses){  if (synapses.isEmpty()) {    return true;  }  if (synapses.size() == 1) {    Iterator<Synapse> synIter=synapses.iterator();    if (synIter.next().getTarget() == null) {      return true;    }  }  for (  Synapse s : synapses) {    if (s.getTarget() != null) {      if (s.getTarget().getUpdateRule().getInputType() == InputType.SYNAPTIC) {        return true;      }    }  }  return false;}  }
class C{  private Set<SuperFamilyHmmer3RawMatch> parseLine(String line){  Set<SuperFamilyHmmer3RawMatch> rawMatches=new HashSet<SuperFamilyHmmer3RawMatch>();  if (line == null || line.equals("")) {    LOGGER.warn("Ignoring null or empty line!");    return rawMatches;  }  String token;  String sequenceId=null;  String modelId=null;  String matchRegions=null;  double evalue=0.0;  int modelMatchStartPos=0;  String aligmentToModel=null;  double familyEvalue=0.0;  int scopDomainId=0;  int scopFamilyId=0;  line=line.trim();  String[] values=line.split("\\s+");  if (values.length == 9) {    int i=0;    while (i < values.length) {      token=values[i];      if (i == 1 && token.equals("-")) {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("No SuperFamily matches found for sequence Id: " + sequenceId);        }        return rawMatches;      }      try {switch (i) {case 0:          sequenceId=token;        break;case 1:      modelId=token;    break;case 2:  matchRegions=token;break;case 3:evalue=Double.parseDouble(token);break;case 4:modelMatchStartPos=Integer.parseInt(token);break;case 5:aligmentToModel=token;break;case 6:familyEvalue=Double.parseDouble(token);break;case 7:scopDomainId=Integer.parseInt(token);break;case 8:scopFamilyId=Integer.parseInt(token);default :break;}} catch (NumberFormatException e) {LOGGER.error("Error parsing SuperFamily match output file line (ignoring): " + line + " - Exception "+ e.getMessage());return rawMatches;}i++;}} else {LOGGER.warn("Ignoring line with unexpected format: " + line);return rawMatches;}Matcher matchRegionMatcher=MATCH_REGIONS_PATTERN.matcher(matchRegions);if (matchRegionMatcher.find()) {final UUID splitGroup=UUID.randomUUID();String[] matchRegionArray=matchRegions.split(",");for (String aMatchRegionArray : matchRegionArray) {String[] matchStartStop=aMatchRegionArray.split("-");if (matchStartStop.length == 2) {int from;int to;try {from=Integer.parseInt(matchStartStop[0]);to=Integer.parseInt(matchStartStop[1]);} catch (NumberFormatException e) {LOGGER.warn("Ignoring line with unexpected format (of match region): " + line);continue;}SuperFamilyHmmer3RawMatch match=new SuperFamilyHmmer3RawMatch(sequenceId,modelId,"1.75",from,to,evalue,modelMatchStartPos,aligmentToModel,familyEvalue,scopDomainId,scopFamilyId,splitGroup);rawMatches.add(match);} else {LOGGER.warn("Ignoring line with unexpected format (of match region): " + line);}}} else {LOGGER.warn("Ignoring line with unexpected format (of match region): " + line);return rawMatches;}return rawMatches;}  }
class C{  @Override public ImmutableRangeSet<C> subRangeSet(Range<C> range){  if (!isEmpty()) {    Range<C> span=span();    if (range.encloses(span)) {      return this;    } else     if (range.isConnected(span)) {      return new ImmutableRangeSet<C>(intersectRanges(range));    }  }  return of();}  }
class C{  public void testUpdate1(){  String newValue="newValue";  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field1='"+ newValue+ "'";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field1 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      assertEquals("The field field1 was not updated",newValue,result.getString("field1"));    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public static byte[] toBytes(String s){  try {    return s.getBytes("UTF-8");  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  @Override public SoftwarePIDController withTolerance(double tolerance){  target=target.withTolerance(Math.abs(tolerance));  return this;}  }
class C{  public boolean isFloat(Class type) throws Exception {  return support.isFloat(type);}  }
class C{  public CpcLocalRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  private Integer translateDesiredAccuracy(Integer accuracy){  if (accuracy <= 0) {    accuracy=LocationRequest.PRIORITY_HIGH_ACCURACY;  } else   if (accuracy <= 100) {    accuracy=LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY;  } else   if (accuracy <= 1000) {    accuracy=LocationRequest.PRIORITY_LOW_POWER;  } else   if (accuracy <= 10000) {    accuracy=LocationRequest.PRIORITY_NO_POWER;  } else {    accuracy=LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY;  }  return accuracy;}  }
class C{  @Override public void stop(){  _state=_state.toStandby();  _firstSuccessTime=0;  _startSequenceId.incrementAndGet();  clearRecycle();}  }
class C{  @PreAuthorize("hasRole('ROLE_DOWNLOAD')") @Transactional(propagation=Propagation.REQUIRED) public void addProductToCart(Long u_id,Long p_id) throws UserNotExistingException, ProductNotExistingException {  Product product=productDao.read(p_id);  if (product == null) {    throw new ProductNotExistingException();  }  String key="{" + u_id.toString() + "-"+ p_id.toString()+ "}";synchronized (BlockingObject.getBlockingObject(key)) {    ProductCart cart=getCartOfUser(u_id);    if (cart == null)     cart=createCartOfUser(u_id);    if (cart.getProducts() == null) {      cart.setProducts(new HashSet<Product>());    }    cart.getProducts().add(product);    productCartDao.update(cart);  }}  }
class C{  public static boolean isContiguousStateCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  return ((ContiguousUSStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));}  }
class C{  private IllegalStateException createException(){  return new IllegalStateException("Hadoop module is not loaded (please ensure that ignite-hadoop.jar is " + "in libs and IgniteConfiguration.peerClassLoadingEnabled is set to false).");}  }
class C{  public void clear(){  m.clear();}  }
class C{  private void registerComponent(JComponent c){  for (  JComponent root : roots) {    for (Component p=c; p != null; p=p.getParent()) {      if (p == root) {        return;      }    }  }  for (int i=0; i < roots.size(); i++) {    JComponent root=roots.elementAt(i);    for (Component p=root.getParent(); p != null; p=p.getParent()) {      if (p == c) {        roots.removeElementAt(i--);        break;      }    }  }  roots.addElement(c);}  }
class C{  public synchronized void releaseAll(){  if (!done) {    if (this.writeConnection != null) {      writeConnection.releaseInternal();      writeConnection=null;    }    for (    LogConnection connection : readConnections) {      connection.releaseInternal();    }    readConnections=null;    done=true;  }}  }
class C{  private void addRow(Dimension dim,int rowWidth,int rowHeight){  dim.width=Math.max(dim.width,rowWidth);  if (dim.height > 0) {    dim.height+=getVgap();  }  dim.height+=rowHeight;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.519 -0500",hash_original_method="AC707126EF44BD77373D761D306CE415",hash_generated_method="D0E41D6528D270D96ED7F0179237EF44") private View fillFromSelection(int selectedTop,int childrenTop,int childrenBottom){  final int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  final int verticalSpacing=mVerticalSpacing;  int rowStart;  int rowEnd=-1;  if (!mStackFromBottom) {    rowStart=selectedPosition - (selectedPosition % numColumns);  } else {    int invertedSelection=mItemCount - 1 - selectedPosition;    rowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    rowStart=Math.max(0,rowEnd - numColumns + 1);  }  View sel;  View referenceView;  int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,rowStart);  int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,numColumns,rowStart);  sel=makeRow(mStackFromBottom ? rowEnd : rowStart,selectedTop,true);  mFirstPosition=rowStart;  referenceView=mReferenceView;  adjustForTopFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  adjustForBottomFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  if (!mStackFromBottom) {    fillUp(rowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    fillDown(rowStart + numColumns,referenceView.getBottom() + verticalSpacing);  } else {    fillDown(rowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    fillUp(rowStart - 1,referenceView.getTop() - verticalSpacing);  }  return sel;}  }
class C{  public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  public void addOfferListener(OfferListener offerListener){synchronized (offerListeners) {    if (!offerListeners.contains(offerListener)) {      offerListeners.add(offerListener);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecify list of string attributes to convert to words.\n" + "\t(default: select all relational attributes)","R",1,"-R <index1,index2-index4,...>"));  result.addElement(new Option("\tInverts the matching sense of the selection.","V",0,"-V"));  String desc="";  for (  Tag element : TAGS_SORTTYPE) {    SelectedTag tag=new SelectedTag(element.getID(),TAGS_SORTTYPE);    desc+="\t" + tag.getSelectedTag().getIDStr() + " = "+ tag.getSelectedTag().getReadable()+ "\n";  }  result.addElement(new Option("\tDetermines the type of sorting:\n" + desc + "\t(default: "+ new SelectedTag(SORT_CASESENSITIVE,TAGS_SORTTYPE)+ ")","S",1,"-S " + Tag.toOptionList(TAGS_SORTTYPE)));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static <T,U>SortedMap<T,U> nullToEmpty(@Nullable SortedMap<T,U> potentiallyNull){  return firstNonNull(potentiallyNull,ImmutableSortedMap.<T,U>of());}  }
class C{  public static <U>SimpleFastUserIndex<U> load(Stream<U> users){  SimpleFastUserIndex<U> userIndex=new SimpleFastUserIndex<>();  users.forEach(null);  return userIndex;}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.local_service_started);  Notification notification=new Notification(R.drawable.stat_sample,text,System.currentTimeMillis());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,LocalServiceActivities.Controller.class),0);  notification.setLatestEventInfo(this,getText(R.string.local_service_label),text,contentIntent);  mNM.notify(NOTIFICATION,notification);}  }
class C{  public void print(String value,boolean checkForEscape) throws IOException {  if (!checkForEscape) {    printSep();    out.write(value);    return;  }  if (buf.length < value.length()) {    buf=new char[value.length()];  }  value.getChars(0,value.length(),buf,0);  print(buf,0,value.length(),checkForEscape);}  }
class C{  public RDFProcessor(XMLReader reader,int subsetDenom,boolean includeAdult,int skew,Pattern topicPattern,boolean snippet) throws IOException {  this.reader=reader;  this.subsetDenom=subsetDenom;  this.includeAdult=includeAdult;  this.topicPattern=topicPattern;  this.snippet=snippet;  this.hashSkew=skew != 0 ? skew : new Random().nextInt();}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle){  this(peer,lcle,false,true);}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  BranchLabel endifLabel=new BranchLabel();  Constant cst;  boolean hasThenPart=!(((cst=this.condition.optimizedBooleanConstant()) != Constant.NotAConstant && cst.booleanValue() == false) || this.thenStatement == null || this.thenStatement.isEmptyBlock());  boolean hasElsePart=!((cst != Constant.NotAConstant && cst.booleanValue() == true) || this.elseStatement == null || this.elseStatement.isEmptyBlock());  if (hasThenPart) {    BranchLabel falseLabel=null;    if (cst != Constant.NotAConstant && cst.booleanValue() == true) {      this.condition.generateCode(currentScope,false);    } else {      this.condition.generateOptimizedBoolean(currentScope,null,hasElsePart ? (falseLabel=new BranchLabel()) : endifLabel,true);    }    this.thenStatement.generateCode(currentScope);    if (hasElsePart) {      if ((this.bits & ASTNode.ThenExit) == 0) {        this.thenStatement.branchChainTo(endifLabel);      }      this.elseStatement.generateCode(currentScope);    }  } else   if (hasElsePart) {    if (cst != Constant.NotAConstant && cst.booleanValue() == false) {      this.condition.generateCode(currentScope,false);    } else {      this.condition.generateOptimizedBoolean(currentScope,endifLabel,null,true);    }    this.elseStatement.generateCode(currentScope);  } else {    this.condition.generateCode(currentScope,false);  }}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public void testVideoSharingLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=VideoSharingLog.SHARING_ID.concat("=?");    String[] whereArgs=new String[]{"123456789"};    cursor=mProvider.query(VideoSharingLog.CONTENT_URI,VIDEO_SHARING_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("M_Product_Category_Acct");}  }
class C{  public void addInternalFrameListener(InternalFrameListener l){  listenerList.add(InternalFrameListener.class,l);  enableEvents(0);}  }
class C{  public static final HeaderElement[] parseElements(final String headerValue){  LOG.trace("enter HeaderElement.parseElements(String)");  if (headerValue == null) {    return new HeaderElement[]{};  }  return parseElements(headerValue.toCharArray());}  }
class C{  public void testNumericScalars() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping();  assertEquals("[123]",m.writeValueAsString(new Object[]{Integer.valueOf(123)}));  assertEquals("[[\"java.lang.Long\",37]]",m.writeValueAsString(new Object[]{Long.valueOf(37)}));  assertEquals("[0.25]",m.writeValueAsString(new Object[]{Double.valueOf(0.25)}));  assertEquals("[[\"java.lang.Float\",0.5]]",m.writeValueAsString(new Object[]{Float.valueOf(0.5f)}));}  }
class C{  public Tag use(String className,String tagBundleName,String tagBundleVersion,Identification id) throws PageException {  Queue<Tag> queue=getQueue(toId(className,tagBundleName,tagBundleVersion));  Tag tag=queue.poll();  if (tag != null)   return tag;  return loadTag(className,tagBundleName,tagBundleVersion,id);}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  return new ImmutableClassToInstanceMap<B>(mapBuilder.build());}  }
class C{  public FluentBiFunction<T1,T2,R> before(final BiConsumer<T1,T2> action){  return withFn(null);}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public static void saveTo(File file,Client client) throws IOException {  if (null == client.getGame()) {    return;  }  Writer output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));  output.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  output.write(CommonConstants.NL);  output.write(CommonConstants.NL);  output.write("<record version=\"" + MegaMek.VERSION + "\" >");  ArrayList<Entity> living=new ArrayList<Entity>();  ArrayList<Entity> allied=new ArrayList<Entity>();  ArrayList<Entity> salvage=new ArrayList<Entity>();  ArrayList<Entity> devastated=new ArrayList<Entity>();  Hashtable<String,String> kills=new Hashtable<String,String>();  Iterator<Entity> entities=client.getGame().getEntities();  while (entities.hasNext()) {    Entity entity=entities.next();    if (entity.getOwner().getId() == client.getLocalPlayer().getId()) {      living.add(entity);    } else     if (entity.getOwner().isEnemyOf(client.getLocalPlayer())) {      if (!entity.canEscape()) {        kills.put(entity.getDisplayName(),"None");      }      salvage.add(entity);    } else {      allied.add(entity);    }  }  for (Enumeration<Entity> iter=client.getGame().getRetreatedEntities(); iter.hasMoreElements(); ) {    Entity ent=iter.nextElement();    if (ent.getOwner().getId() == client.getLocalPlayer().getId()) {      living.add(ent);    } else     if (!ent.getOwner().isEnemyOf(client.getLocalPlayer())) {      allied.add(ent);    }  }  Enumeration<Entity> graveyard=client.getGame().getGraveyardEntities();  while (graveyard.hasMoreElements()) {    Entity entity=graveyard.nextElement();    if (entity.getOwner().isEnemyOf(client.getLocalPlayer())) {      Entity killer=client.getGame().getEntityFromAllSources(entity.getKillerId());      if (null != killer && !killer.getExternalIdAsString().equals("-1") && killer.getOwnerId() == client.getLocalPlayer().getId()) {        kills.put(entity.getDisplayName(),killer.getExternalIdAsString());      } else {        kills.put(entity.getDisplayName(),"None");      }    }    salvage.add(entity);  }  Enumeration<Entity> devastation=client.getGame().getDevastatedEntities();  while (devastation.hasMoreElements()) {    Entity entity=devastation.nextElement();    if (entity.getOwner().isEnemyOf(client.getLocalPlayer())) {      Entity killer=client.getGame().getEntityFromAllSources(entity.getKillerId());      if (null != killer && !killer.getExternalIdAsString().equals("-1") && killer.getOwnerId() == client.getLocalPlayer().getId()) {        kills.put(entity.getDisplayName(),killer.getExternalIdAsString());      } else {        kills.put(entity.getDisplayName(),"None");      }    }    devastated.add(entity);  }  if (!living.isEmpty()) {    output.write(CommonConstants.NL);    output.write(indentStr(1) + "<survivors>");    output.write(CommonConstants.NL);    output.write(CommonConstants.NL);    try {      writeEntityList(output,living);    } catch (    IOException exception) {      throw exception;    }    output.write(indentStr(1) + "</survivors>");    output.write(CommonConstants.NL);  }  if (!allied.isEmpty()) {    output.write(CommonConstants.NL);    output.write(indentStr(1) + "<allies>");    output.write(CommonConstants.NL);    output.write(CommonConstants.NL);    try {      writeEntityList(output,allied);    } catch (    IOException exception) {      throw exception;    }    output.write(indentStr(1) + "</allies>");    output.write(CommonConstants.NL);  }  if (!salvage.isEmpty()) {    output.write(CommonConstants.NL);    output.write(indentStr(1) + "<salvage>");    output.write(CommonConstants.NL);    output.write(CommonConstants.NL);    try {      writeEntityList(output,salvage);    } catch (    IOException exception) {      throw exception;    }    output.write(indentStr(1) + "</salvage>");    output.write(CommonConstants.NL);  }  if (!devastated.isEmpty()) {    output.write(CommonConstants.NL);    output.write(indentStr(1) + "<devastated>");    output.write(CommonConstants.NL);    output.write(CommonConstants.NL);    try {      writeEntityList(output,devastated);    } catch (    IOException exception) {      throw exception;    }    output.write(indentStr(1) + "</devastated>");    output.write(CommonConstants.NL);  }  if (!kills.isEmpty()) {    output.write(CommonConstants.NL);    output.write(indentStr(1) + "<kills>");    output.write(CommonConstants.NL);    output.write(CommonConstants.NL);    try {      writeKills(output,kills);    } catch (    IOException exception) {      throw exception;    }    output.write(indentStr(1) + "</kills>");    output.write(CommonConstants.NL);  }  output.write("</record>");  output.write(CommonConstants.NL);  output.flush();  output.close();}  }
class C{  protected void blockLocosTwoColumn(PrintWriter file,List<Engine> engineList,RouteLocation rl,boolean isManifest){  if (isThereWorkAtLocation(null,engineList,rl)) {    printEngineHeader(file,isManifest);  }  int lineLength=getLineLength(isManifest);  for (  Engine engine : engineList) {    if (engine.getRouteLocation() == rl && !engine.getTrackName().equals(Engine.NONE)) {      String s=padAndTruncateString(pickupEngine(engine).trim(),lineLength / 2,true);      s=padAndTruncateString(s + VERTICAL_LINE_CHAR,lineLength,true);      addLine(file,s);    }    if (engine.getRouteDestination() == rl) {      String s=padAndTruncateString(tabString("",lineLength / 2,true) + VERTICAL_LINE_CHAR + dropEngine(engine).trim(),lineLength,true);      addLine(file,s);    }  }}  }
class C{  @Override protected void checkForListType(OneRowChange orc) throws SQLException, ReplicatorException {  checkForListType(orc,"SET");}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  public boolean containsValue(V val){  V[] values=_values;  if (null == val) {    for (int i=values.length; i-- > 0; ) {      if (TObjectHash.NULL == values[i]) {        return true;      }    }  } else {    for (int i=values.length; i-- > 0; ) {      V value=unwrapNull(values[i]);      if (isFull(values,i) && (val == value || val.equals(value))) {        return true;      }    }  }  return false;}  }
class C{  @Override protected void onPause(){  super.onPause();  stopRecording();}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  createSchema(db);}  }
class C{  private long hash(final byte[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  private Map<String,Long> readLockColumns(boolean readDataColumns) throws Exception {  Map<String,Long> result=Maps.newLinkedHashMap();  ConsistencyLevel read_consistencyLevel=consistencyLevel;  if (consistencyLevel == ConsistencyLevel.CL_EACH_QUORUM) {    read_consistencyLevel=ConsistencyLevel.CL_LOCAL_QUORUM;  }  if (readDataColumns) {    columns=new OrderedColumnMap<String>();    ColumnList<String> lockResult=keyspace.prepareQuery(columnFamily).setConsistencyLevel(read_consistencyLevel).getKey(key).execute().getResult();    for (    Column<String> c : lockResult) {      if (c.getName().startsWith(prefix)) {        result.put(c.getName(),readTimeoutValue(c));      } else {        columns.add(c);      }    }  } else {    ColumnList<String> lockResult=keyspace.prepareQuery(columnFamily).setConsistencyLevel(read_consistencyLevel).getKey(key).withColumnRange(new RangeBuilder().setStart(prefix + "\u0000").setEnd(prefix + "\uFFFF").build()).execute().getResult();    for (    Column<String> c : lockResult) {      result.put(c.getName(),readTimeoutValue(c));    }  }  return result;}  }
class C{  public boolean deletePanel(){  if (!super.deletePanel()) {    return false;  }  turnoutList.clear();  trackList.clear();  pointList.clear();  xingList.clear();  slipList.clear();  turntableList.clear();  return true;}  }
class C{  public Vector2 tmp(){  return tmp.set(this);}  }
class C{  public void testTwoNodeSubmitCommand() throws Throwable {  testSubmitCommand(2);}  }
class C{  protected String cleanUp(String classname){  String result;  result=classname;  if (result.indexOf("/") > -1) {    result=result.replace("/",".");  }  if (result.indexOf("\\") > -1) {    result=result.replace("\\",".");  }  if (result.endsWith(".class")) {    result=result.substring(0,result.length() - 6);  }  return result;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public LanguageSetting(Option opt){  elem=null;  name=opt.getLanguage();  String[] suffixArray=opt.getSuffixes();  StringBuffer strbuf=new StringBuffer();  for (int i=0; i < suffixArray.length; i++) {    strbuf.append(suffixArray[i]);    if (i != suffixArray.length - 1)     strbuf.append(',');  }  this.suffixes=strbuf.toString();  minMatchLen=opt.getMinimumMatchLength();  clusterType=opt.getClustertype();  readSubdirs=opt.isReadSubdirs();  storeMatches=opt.getStoreMatches();}  }
class C{  public BulletParser parseText(final boolean parseText){  this.parseText=parseText;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.464 -0500",hash_original_method="A08FDF345D6DF4C8E7F68B5A61C56D39",hash_generated_method="FF43837979E318AAAF2EA6D300F148F5") private static boolean isSpecialDomain(final String domain){  final String ucDomain=domain.toUpperCase(Locale.ENGLISH);  return ucDomain.endsWith(".COM") || ucDomain.endsWith(".EDU") || ucDomain.endsWith(".NET")|| ucDomain.endsWith(".GOV")|| ucDomain.endsWith(".MIL")|| ucDomain.endsWith(".ORG")|| ucDomain.endsWith(".INT");}  }
class C{  private static void initBlocksInIfNodes(BlockNode block){  List<InsnNode> instructions=block.getInstructions();  if (instructions.size() == 1) {    InsnNode insn=instructions.get(0);    if (insn.getType() == InsnType.IF) {      ((IfNode)insn).initBlocks(block);    }  }}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  public void clear(){  fields.clear();}  }
class C{  private void createLoanProductEntity(){  System.out.println("---------------------------------CREATING LOAN PRODUCT------------------------------------------");  final String loanProductJSON=new LoanProductTestBuilder().withPrincipal(loanPrincipalAmount).withNumberOfRepayments(numberOfRepayments).withinterestRatePerPeriod(interestRatePerPeriod).withInterestRateFrequencyTypeAsYear().build(null);  this.loanProductId=this.loanTransactionHelper.getLoanProductId(loanProductJSON);  System.out.println("Successfully created loan product  (ID: " + this.loanProductId + ")");}  }
class C{  @UiThreadTest @SmallTest public void testEnd() throws Exception {  mRunning=true;  mAnimator.end();}  }
class C{  public boolean any(Func1<? super T,Boolean> predicate){  for (  T item : this) {    if (predicate.call(item))     return true;  }  return false;}  }
class C{  public CustomElementHandler(String tagName){  this.tagName=tagName;}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuffer();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuffer();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  public boolean isEnabled(){  checkWidget();  return this.enabled;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void closeSilently(InputStream in){  if (in != null) {    try {      trace("closeSilently",null,in);      in.close();    } catch (    Exception e) {    }  }}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StringLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_StringLiteral_value_feature","_UI_StringLiteral_type"),ExpressionsPackage.Literals.STRING_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.866 -0500",hash_original_method="C5038B1CABC8B8B00C688F0FD76B923F",hash_generated_method="EA410BB510FFBBB53A8F600AEE5AEF65") @Override public boolean hasFocus(){  return this.isEnabled();}  }
class C{  public String sql(){  return sql;}  }
class C{  public void animateY(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  boolean isRead(){  return pos >= len;}  }
class C{  public boolean equals(Object b){  if ((b == null) || !(b.getClass().equals(this.getClass()))) {    return false;  }  boolean ok=true;  boolean l;  if (b instanceof DecisionTableHashKey) {    DecisionTableHashKey n=(DecisionTableHashKey)b;    for (int i=0; i < attributes.length; i++) {      l=n.missing[i];      if (missing[i] || l) {        if ((missing[i] && !l) || (!missing[i] && l)) {          ok=false;          break;        }      } else {        if (attributes[i] != n.attributes[i]) {          ok=false;          break;        }      }    }  } else {    return false;  }  return ok;}  }
class C{  public VerletParticle3D unlock(){  clearVelocity();  isLocked=false;  return this;}  }
class C{  public RandomDestinationPortal(){  super(questslot);  initLocations();}  }
class C{  static short[] buildSuperclassIds(RVMType t){  int depth=t.getTypeDepth();  short[] tsi;  if (t.isJavaLangObjectType()) {    if (VM.VerifyAssertions)     VM._assert(depth == 0);    tsi=MemoryManager.newNonMovingShortArray(1);  } else {    int size=MIN_SUPERCLASS_IDS_SIZE <= depth ? depth + 1 : MIN_SUPERCLASS_IDS_SIZE;    tsi=MemoryManager.newNonMovingShortArray(size);    RVMType p;    if (t.isArrayType() || t.asClass().isInterface()) {      p=RVMType.JavaLangObjectType;    } else {      p=t.asClass().getSuperClass();    }    short[] psi=p.getSuperclassIds();    for (int i=0; i < depth; i++) {      tsi[i]=psi[i];    }  }  int id=t.getId();  if (VM.VerifyAssertions)   VM._assert(id <= 0xFFFF);  tsi[depth]=(short)id;  return tsi;}  }
class C{  public void test_CONTEXTS() throws Exception {  if (getTestMode() != TestMode.quads)   return;  doInsertbyURL("POST",packagePath + "test_estcard.trig");  final Collection<Resource> contexts=m_repo.getContexts();  assertEquals(3,contexts.size());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void closeListeners() throws GenericServiceException {  loadable=0;  for (  String serverKey : listeners.keySet()) {    closeListener(serverKey);  }}  }
class C{  private ObjectNode fetchAllQueriesFromFile(){  InputStream inputStream=null;  JsonNode queriesJSON=mapper.createObjectNode();  try {    inputStream=new FileInputStream(Repository.get().getPulseConfig().getQueryHistoryFileName());    String inputStreamString=new Scanner(inputStream,"UTF-8").useDelimiter("\\A").next();    queriesJSON=mapper.readTree(inputStreamString);  } catch (  FileNotFoundException e) {    if (LOGGER.fineEnabled()) {      LOGGER.fine(resourceBundle.getString("LOG_MSG_DATA_BROWSER_QUERY_HISTORY_FILE_NOT_FOUND") + " : " + e.getMessage());    }  }catch (  Exception e) {    if (LOGGER.infoEnabled()) {      LOGGER.info(e.getMessage());    }  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        if (LOGGER.infoEnabled()) {          LOGGER.info(e.getMessage());        }      }    }  }  return (ObjectNode)queriesJSON;}  }
class C{  public Dataset(GCTrace gcTrace,GCTraceCheckpoint checkpoint,int metric){  super(gcTrace.getGCActivityNamesArray());  this.gcTrace=gcTrace;  this.checkpoint=checkpoint;  this.metric=metric;}  }
class C{  public static void openURL(String url){  openURL(null,url);}  }
class C{  public TiledImageCompressionOperation(BinaryTable binaryTable){  super(TileCompressionOperation.class);  this.binaryTable=binaryTable;}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  LongBuffer(int size){  data=new long[size];  length=0;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemTemplateElement elem=handler.getElemTemplateElement();  if (elem instanceof ElemLiteralResult) {    if (((ElemLiteralResult)elem).getIsLiteralResultAsStylesheet()) {      handler.popStylesheet();    }  }  super.endElement(handler,uri,localName,rawName);}  }
class C{  public void lockUI(){  progressWindow=new BusyDialog();  progressWindow.setPage(this.getPage());  progressWindow.doHighlighted();}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public R proceed(){  return fn.get();}  }
class C{  public String useResamplingTipText(){  return "Whether resampling is used instead of reweighting.";}  }
class C{  public RemoveStatementsOperation(Resource subj,IRI pred,Value obj,Resource... contexts){  super(contexts);  setSubject(subj);  setPredicate(pred);  setObject(obj);}  }
class C{  private SlowCodecReaderWrapper(){}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("Counter.init");}  }
class C{  public int hashCode(){  int result=17;  if (null != this.getStart())   result=result + this.getStart().hashCode();  if (null != this.getEnd())   result=result + this.getEnd().hashCode();  return result;}  }
class C{  public int next(){  moveToNextIndex();  return _hash._set[_index];}  }
class C{  public Builder dlConf(DistributedLogConfiguration dlConf){  this._dlConf=dlConf;  return this;}  }
class C{  void removeProducer(final MessageProducer producer){  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("removeProducer(" + producer + ")");  }synchronized (producers) {    producers.remove(producer);  }}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public boolean isConnected(){  return !isDisconnected();}  }
class C{  public KeyRecordIterator select(String namespace,String set,Filter filter,Qualifier... qualifiers){  Statement stmt=new Statement();  stmt.setNamespace(namespace);  stmt.setSetName(set);  if (filter != null)   stmt.setFilters(filter);  return select(stmt,qualifiers);}  }
class C{  public SearchSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static void editGlobalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02485: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02486: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02487: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02488: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02489: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){  float scaleX=(float)((mViewPortHandler.contentWidth()) / deltaX);  float scaleY=(float)((mViewPortHandler.contentHeight()) / deltaY);  mMatrixValueToPx.reset();  mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);  mMatrixValueToPx.postScale(scaleX,-scaleY);}  }
class C{  public IllegalArgumentException(){  super();}  }
class C{  public void testBug32577() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testBug32577","(id INT, field_datetime DATETIME, field_timestamp TIMESTAMP)");  Properties props=new Properties();  props.setProperty("useLegacyDatetimeCode","false");  props.setProperty("sessionVariables","time_zone='+0:00'");  props.setProperty("serverTimezone","UTC");  Connection nonLegacyConn=getConnectionWithProps(props);  try {    long earlier=1194154200000L;    long later=1194157800000L;    this.pstmt=nonLegacyConn.prepareStatement("INSERT INTO testBug32577 VALUES (?,?,?)");    Timestamp ts=new Timestamp(earlier);    this.pstmt.setInt(1,1);    this.pstmt.setTimestamp(2,ts);    this.pstmt.setTimestamp(3,ts);    this.pstmt.executeUpdate();    ts=new Timestamp(later);    this.pstmt.setInt(1,2);    this.pstmt.setTimestamp(2,ts);    this.pstmt.setTimestamp(3,ts);    this.pstmt.executeUpdate();    this.rs=nonLegacyConn.createStatement().executeQuery("SELECT id, field_datetime, field_timestamp , UNIX_TIMESTAMP(field_datetime), UNIX_TIMESTAMP(field_timestamp) " + "FROM testBug32577 ORDER BY id ASC");    this.rs.next();    Timestamp ts1=this.rs.getTimestamp(3);    long datetimeSeconds1=this.rs.getLong(4) * 1000;    long timestampSeconds1=this.rs.getLong(5) * 1000;    this.rs.next();    Timestamp ts2=this.rs.getTimestamp(3);    long datetimeSeconds2=this.rs.getLong(4) * 1000;    long timestampSeconds2=this.rs.getLong(5) * 1000;    assertEquals(later,datetimeSeconds2);    assertEquals(later,timestampSeconds2);    assertEquals(earlier,datetimeSeconds1);    assertEquals(earlier,timestampSeconds1);    SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy HH:mm z");    sdf.setTimeZone(TimeZone.getTimeZone("America/New York"));    System.out.println(sdf.format(ts2));    System.out.println(sdf.format(ts1));  }  finally {    if (nonLegacyConn != null) {      nonLegacyConn.close();    }  }}  }
class C{  public static String classNamePath(String className){  String filename=className.replace(".",File.separator);  filename=filename.replaceFirst("[$][0-9]+","");  if (filename.indexOf("$") > 0) {    filename=filename.substring(0,filename.indexOf("$"));  }  return "src" + File.separator + filename+ ".java";}  }
class C{  public boolean isInvalidAfterConnect(){  return invalidAfterConnect;}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_debugListener);  synchronizeDebugger(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  @Override public boolean supportsAlterTableWithAddColumn(){  debugCodeCall("supportsAlterTableWithAddColumn");  return true;}  }
class C{  public Boolean isAutoOpen(){  return autoOpen;}  }
class C{  public void close(){  super.close();}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){  if (lc == OperatorCapability.NUMERICAL_ATTRIBUTES) {    return true;  }  if (lc == OperatorCapability.BINOMINAL_LABEL) {    return true;  }  if (lc == OperatorCapability.FORMULA_PROVIDER) {    return true;  }  return false;}  }
class C{  public QualityStats(double maxGoodPoints,long searchTime){  this.maxGoodPoints=maxGoodPoints;  this.searchTime=searchTime;  this.recallPoints=new ArrayList<>();  pAt=new double[MAX_POINTS + 1];}  }
class C{  public static String[] stringArrayFromString(String string){  return stringArrayFromString(string,',');}  }
class C{  @Override public float generatorSortValue(String url,WebPage row,float initSort) throws ScoringFilterException {  for (  ScoringFilter filter : filters) {    initSort=filter.generatorSortValue(url,row,initSort);  }  return initSort;}  }
class C{  public void init(ActionListener doneAction){  super.init(doneAction);}  }
class C{  public ExceptionWithContext(String message){  this(message,null);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public Crypto(final byte[] key,boolean encrypt) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {  this(key);  if (encrypt) {    cipherEnc=Cipher.getInstance(M.e("AES/CBC/NoPadding"));    cipherEnc.init(Cipher.ENCRYPT_MODE,skey_spec,ivSpec);  } else {    cipherDec=Cipher.getInstance(M.e("AES/CBC/NoPadding"));    cipherDec.init(Cipher.DECRYPT_MODE,skey_spec,ivSpec);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr streetAttr;  String value;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  assertNotNull("attributesNotNull",attributes);  removedNode=attributes.removeNamedItem("street");  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  value=streetAttr.getValue();  assertEquals("namednodemapRemoveNamedItemGetValueAssert","Yes",value);}  }
class C{  private int computeNumberOfObservations(boolean[] sourceValid,boolean[] destValid) throws Exception {  TransferEntropyCalculatorMultiVariateKraskov tecmvKras=new TransferEntropyCalculatorMultiVariateKraskov();  tecmvKras.initialise(k);  Vector<int[]> startAndEndTimePairs=tecmvKras.computeStartAndEndTimePairs(sourceValid,destValid);  int numObservations=0;  for (  int[] timePair : startAndEndTimePairs) {    int startTime=timePair[0];    int endTime=timePair[1];    numObservations+=endTime - startTime + 1 - k;  }  return numObservations;}  }
class C{  protected void cancelPressed(){  boolean close=rasterLayerPanel.cancelPressed() || vectorLayerPanel.cancelPressed();  if (close) {    mainFrame.dispose();    System.exit(0);  } else {    applyButton.setEnabled(true);  }}  }
class C{  @NonNull public Builder fromUri(@NonNull Uri uri){  return fromUri(uri,SystemClock.INSTANCE);}  }
class C{  public static void initialiseLinks(TraceCompletionInformation ci,long fragmentBaseTime,Node n,StringBuilder nodeId){  TraceCompletionInformation.Communication c=new TraceCompletionInformation.Communication();  c.getIds().add(nodeId.toString());  c.setMultipleConsumers(true);  c.setBaseDuration(n.getTimestamp() - fragmentBaseTime);  c.setExpire(System.currentTimeMillis() + TraceCompletionInformation.Communication.DEFAULT_EXPIRY_WINDOW_MILLIS);  if (log.isLoggable(Level.FINEST)) {    log.finest("Adding communication to completion information: ci=" + ci + " comms="+ c);  }  ci.getCommunications().add(c);  if (n.getClass() == Producer.class) {    List<CorrelationIdentifier> cids=n.findCorrelationIds(Scope.Interaction,Scope.ControlFlow);    if (!cids.isEmpty()) {      c=new TraceCompletionInformation.Communication();      for (int i=0; i < cids.size(); i++) {        c.getIds().add(cids.get(i).getValue());      }      c.setMultipleConsumers(((Producer)n).multipleConsumers());      c.setBaseDuration(n.getTimestamp() - fragmentBaseTime);      c.setExpire(System.currentTimeMillis() + TraceCompletionInformation.Communication.DEFAULT_EXPIRY_WINDOW_MILLIS);      if (log.isLoggable(Level.FINEST)) {        log.finest("Adding communication to completion information: ci=" + ci + " comms="+ c);      }      ci.getCommunications().add(c);    }  } else   if (n.containerNode()) {    ContainerNode cn=(ContainerNode)n;    for (int i=0; i < cn.getNodes().size(); i++) {      int len=nodeId.length();      nodeId.append(':');      nodeId.append(i);      initialiseLinks(ci,fragmentBaseTime,cn.getNodes().get(i),nodeId);      nodeId.delete(len,nodeId.length());    }  }}  }
class C{  public void reinitializeContacts(EvolutionState state){}  }
class C{  private boolean isMessageEligibleForMyVersion(UpdateMessage msg){  return msg.getVersion() == null || msg.getMessageType().equalsIgnoreCase("update") || !UpdateManager.isFrostWireOld(msg);}  }
class C{  public boolean isOpenNativeNavigationAppSupported(){  return true;}  }
class C{  @Override public void startCounting(ExampleSet exampleSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(exampleSet,useExampleWeights);  Iterator<Example> reader=exampleSet.iterator();  this.loss=0.0d;  this.counter=0.0d;  Attribute labelAttr=exampleSet.getAttributes().getLabel();  Attribute weightAttr=null;  if (useExampleWeights) {    weightAttr=exampleSet.getAttributes().getWeight();  }  while (reader.hasNext()) {    Example example=reader.next();    String trueLabel=example.getNominalValue(labelAttr);    double confidence=example.getConfidence(trueLabel);    double weight=1.0d;    if (weightAttr != null) {      weight=example.getValue(weightAttr);    }    double currentMargin=weight * Math.log(1.0d + Math.exp(-1 * confidence));    this.loss+=currentMargin;    this.counter+=weight;  }}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setErrorEnabled(false);  mPasswordView.setErrorEnabled(false);  String email=mEmailView.getEditText().getText().toString();  String password=mPasswordView.getEditText().getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public static boolean replace(RTextArea textArea,String toFind,String replaceWith,boolean forward,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  textArea.beginAtomicEdit();  try {    if (regex) {      return regexReplace(textArea,toFind,replaceWith,forward,matchCase,wholeWord);    }    makeMarkAndDotEqual(textArea,forward);    if (find(textArea,toFind,forward,matchCase,wholeWord,false)) {      textArea.replaceSelection(replaceWith);      return true;    }  }  finally {    textArea.endAtomicEdit();  }  return false;}  }
class C{  public boolean isOnMonday(){  Object oo=get_Value(COLUMNNAME_OnMonday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MekaTable(int numRows,int numColumns){  super(numRows,numColumns);  initGUI();}  }
class C{  private void drawTickLine(Graphics2D graphics,long frequency,boolean major){  graphics.setColor(mColorSpectrumLine);  double xAxis=getAxisFromFrequency(frequency);  double start=getSize().getHeight() - mSpectrumInset;  double end=start + (major ? 9.0d : 3.0d);  graphics.draw(new Line2D.Double(xAxis,start,xAxis,end));}  }
class C{  public synchronized void dispose(){  CloseableReference.closeSafely(mPreviewBitmap);  mPreviewBitmap=null;  CloseableReference.closeSafely(mDecodedFrames);  mDecodedFrames=null;}  }
class C{  public static int rulealt(int rule,int alt){  if (rule == -1)   return -1;  return rule << 16 | alt;}  }
class C{  public Jerry eq(int value){  List<Node> result=new NodeList(1);  int index=0;  int matchingIndex=value >= 0 ? value : nodes.length + value;  for (  Node node : nodes) {    if (index == matchingIndex) {      result.add(node);      break;    }    index++;  }  return new Jerry(this,result);}  }
class C{  @Override public boolean onUnbind(Intent intent){  mOperationsBinder.clearListeners();  return false;}  }
class C{  protected void addSuperScopePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_superScope_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_superScope_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUPER_SCOPE,true,false,true,null,null,null));}  }
class C{  public C method(){  return null;}  }
class C{  @Override public int length(){  return _head - _tail;}  }
class C{  public Object execute(Object o) throws IllegalAccessException, InvocationTargetException {  if (method == null)   return null;  return method.invoke(o,null);}  }
class C{  public GotoStmt newGotoStmt(Unit target){  return new JGotoStmt(target);}  }
class C{  public static boolean makeDirsIfNeeded(File dir){  return dir.exists() || dir.mkdirs();}  }
class C{  public <K,V>Cache<K,V> createCache(CacheType cacheType,String carbonStorePath){  if (!dictionaryCacheAlreadyExists(cacheType)) {synchronized (lock) {      if (!dictionaryCacheAlreadyExists(cacheType)) {        if (null == cacheTypeToLRUCacheMap.get(cacheType)) {          createLRULevelCacheInstance(cacheType);        }        createDictionaryCacheForGivenType(cacheType,carbonStorePath);      }    }  }  return cacheTypeToCacheMap.get(cacheType);}  }
class C{  public <T>T toNova(Object nativeObject){  Objects.requireNonNull(nativeObject);  NativeConverter converter=findConverter(nativeConverters,nativeObject);  if (converter == null) {    throw new NativeException("NativeManager.toNova: Converter for " + nativeObject + " with class "+ nativeObject.getClass()+ " does not exist!");  }  return (T)converter.toNova(nativeObject);}  }
class C{  private static boolean stubClassExists(Class<?> remoteClass){  if (!withoutStubs.containsKey(remoteClass)) {    try {      Class.forName(remoteClass.getName() + "_Stub",false,remoteClass.getClassLoader());      return true;    } catch (    ClassNotFoundException cnfe) {      withoutStubs.put(remoteClass,null);    }  }  return false;}  }
class C{  private static void findAll(File baseFile,String regex,List<File> found){  if (baseFile.getAbsolutePath().matches(regex)) {    found.add(baseFile);  }  if (baseFile.exists() && baseFile.isDirectory()) {    for (    File child : listFiles(baseFile)) {      findAll(child,regex,found);    }  }}  }
class C{  protected void notifyReconnectionFailed(Exception exception){  if (isReconnectionAllowed()) {    for (    ConnectionListener listener : connection.connectionListeners) {      listener.reconnectionFailed(exception);    }  }}  }
class C{  static int indexOf(char[] source,int sourceOffset,int sourceCount,char[] target,int targetOffset,int targetCount,int fromIndex){  if (fromIndex >= sourceCount) {    return (targetCount == 0 ? sourceCount : -1);  }  if (fromIndex < 0) {    fromIndex=0;  }  if (targetCount == 0) {    return fromIndex;  }  char first=target[targetOffset];  int max=sourceOffset + (sourceCount - targetCount);  for (int i=sourceOffset + fromIndex; i <= max; i++) {    if (source[i] != first) {      while (++i <= max && source[i] != first)       ;    }    if (i <= max) {      int j=i + 1;      int end=j + targetCount - 1;      for (int k=targetOffset + 1; j < end && source[j] == target[k]; j++, k++)       ;      if (j == end) {        return i - sourceOffset;      }    }  }  return -1;}  }
class C{  protected void log(String message){  benchmark.log(message);}  }
class C{  public List<UserMappingParam> prepareUserMappings(String openstackId){  AuthnProvider provider=getKeystoneProvider();  List<UserMappingParam> userMappings=new ArrayList<>();  List<String> values=new ArrayList<>();  values.add(openstackId);  List<UserMappingAttributeParam> attributes=new ArrayList<>();  attributes.add(new UserMappingAttributeParam(KeystoneUtils.OPENSTACK_TENANT_ID,values));  userMappings.add(new UserMappingParam(provider.getDomains().iterator().next(),attributes,new ArrayList<String>()));  return userMappings;}  }
class C{  @Override public int compare(PrintsRawMatch o1,PrintsRawMatch o2){  int comparison=o1.getSequenceIdentifier().compareTo(o2.getSequenceIdentifier());  if (comparison == 0) {    if (o1.getEvalue() < o2.getEvalue())     comparison=-1; else     if (o1.getEvalue() > o2.getEvalue())     comparison=1;  }  if (comparison == 0) {    comparison=o1.getModelId().compareTo(o2.getModelId());  }  if (comparison == 0) {    if (o1.getMotifNumber() < o2.getMotifNumber())     comparison=-1; else     if (o1.getMotifNumber() > o2.getMotifNumber())     comparison=1;  }  if (comparison == 0) {    if (o1.getLocationStart() < o2.getLocationStart())     comparison=-1; else     if (o1.getLocationStart() > o2.getLocationStart())     comparison=1;  }  if (comparison == 0) {    if (o1.getLocationEnd() < o2.getLocationEnd())     comparison=-1; else     if (o1.getLocationEnd() > o2.getLocationEnd())     comparison=1;  }  return comparison;}  }
class C{  public UncheckedExecutionException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  public SQLProcessor(Delegator delegator,GenericHelperInfo helperInfo,Connection connection){  this.delegator=delegator;  this.helperInfo=helperInfo;  this._connection=connection;  if (_connection != null) {    _manualTX=false;  }}  }
class C{  private static String printClusterStats(Clusterer clusterer,String fileName) throws Exception {  StringBuffer text=new StringBuffer();  int i=0;  int cnum;  double loglk=0.0;  int cc=clusterer.numberOfClusters();  double[] instanceStats=new double[cc];  int unclusteredInstances=0;  if (fileName.length() != 0) {    DataSource source=new DataSource(fileName);    Instances structure=source.getStructure();    Instance inst;    while (source.hasMoreElements(structure)) {      inst=source.nextElement(structure);      try {        cnum=clusterer.clusterInstance(inst);        if (clusterer instanceof DensityBasedClusterer) {          loglk+=((DensityBasedClusterer)clusterer).logDensityForInstance(inst);        }        instanceStats[cnum]++;      } catch (      Exception e) {        unclusteredInstances++;      }      i++;    }    int clustFieldWidth=(int)((Math.log(cc) / Math.log(10)) + 1);    int numInstFieldWidth=(int)((Math.log(i) / Math.log(10)) + 1);    double sum=Utils.sum(instanceStats);    loglk/=sum;    text.append("Clustered Instances\n");    for (i=0; i < cc; i++) {      if (instanceStats[i] > 0) {        text.append(Utils.doubleToString(i,clustFieldWidth,0) + "      " + Utils.doubleToString(instanceStats[i],numInstFieldWidth,0)+ " ("+ Utils.doubleToString((instanceStats[i] / sum * 100.0),3,0)+ "%)\n");      }    }    if (unclusteredInstances > 0) {      text.append("\nUnclustered Instances : " + unclusteredInstances);    }    if (clusterer instanceof DensityBasedClusterer) {      text.append("\n\nLog likelihood: " + Utils.doubleToString(loglk,1,5) + "\n");    }  }  return text.toString();}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public DropDownTriangle(UpDirection upState,boolean down,final Window parent){  this(upState,down,"","",parent);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("[");  sb.append(getAgentLocation());  sb.append(", ");  sb.append(getLocationState());  sb.append("]");  return sb.toString();}  }
class C{  default B addIcon(final MapIcon icon){  this.meta().addIcon(icon);  return this.getBuilder();}  }
class C{  private void updateCities(WheelView city,String cities[][],int index){  ArrayWheelAdapter<String> adapter=new ArrayWheelAdapter<String>(this,cities[index]);  adapter.setTextSize(18);  city.setViewAdapter(adapter);  city.setCurrentItem(cities[index].length / 2);}  }
class C{  public ActionEvent(Command source,Component sourceComponent,int x,int y){  this.source=source;  this.sourceComponent=sourceComponent;  this.keyEvent=x;  this.y=y;  this.trigger=Type.Command;}  }
class C{  public WordDataReader(){  isTrainReading=false;}  }
class C{  @Override public String toString(){  if (isLoaded()) {    return String.format("Database '%s' [%d projects, %d modules]",getDescription(),getProjects().size(),getModules().size());  } else {    return String.format("Database '%s' [Unloaded]",getDescription());  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  private void validatePartitionKey(final String partitionKey){  if (partitionKey == null) {    throw new IllegalArgumentException("Partition key cannot be null");  }  if (partitionKey.length() < PARTITION_KEY_MIN_LENGTH || partitionKey.length() > PARTITION_KEY_MAX_LENGTH) {    throw new IllegalArgumentException("Invalid parition key. Length must be at least " + PARTITION_KEY_MIN_LENGTH + " and at most "+ PARTITION_KEY_MAX_LENGTH+ ", got length of "+ partitionKey.length());  }  try {    partitionKey.getBytes(StandardCharsets.UTF_8);  } catch (  Exception e) {    throw new IllegalArgumentException("Partition key must be valid " + StandardCharsets.UTF_8.displayName());  }}  }
class C{  public String toValue(){  return value;}  }
class C{  public <T>void addEntry(Class<T> resource,RegistryEntry<? extends T> registryEntry){  resources.put(resource,registryEntry);  logger.debug("Added resource {} to ResourceRegistry",resource.getName());}  }
class C{  public void preSerialize(){  if (selectedMap == null || maps.get(selectedMap) == null) {    return;  }  for (  Route r : maps.get(selectedMap).getRoutes()) {    r.preSerialize();  }}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinition(){  String businessObjectDefinitionName="BusObjDefTest" + AbstractDaoTest.getRandomSuffix();  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=new BusinessObjectDefinitionEntity();  businessObjectDefinitionEntity.setNamespace(namespaceDaoTestHelper.createNamespaceEntity());  businessObjectDefinitionEntity.setDataProvider(dataProviderDaoTestHelper.createDataProviderEntity());  businessObjectDefinitionEntity.setName(businessObjectDefinitionName);  businessObjectDefinitionEntity.setDescription("test");  return businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public static <T>T withObjectStreams(Socket socket,@ClosureParams(value=SimpleType.class,options={"java.io.ObjectInputStream","java.io.ObjectOutputStream"}) Closure<T> closure) throws IOException {  InputStream input=socket.getInputStream();  OutputStream output=socket.getOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(output);  ObjectInputStream ois=new ObjectInputStream(input);  try {    T result=closure.call(new Object[]{ois,oos});    InputStream temp1=ois;    ois=null;    temp1.close();    temp1=input;    input=null;    temp1.close();    OutputStream temp2=oos;    oos=null;    temp2.close();    temp2=output;    output=null;    temp2.close();    return result;  }  finally {    closeWithWarning(ois);    closeWithWarning(input);    closeWithWarning(oos);    closeWithWarning(output);  }}  }
class C{  private Object[] createItem(RegularTimePeriod t,int dir,int force){  return new Object[]{new Long(t.getMiddleMillisecond()),new Integer(dir),new Integer(force)};}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.831 -0500",hash_original_method="3246A0B1468E43E22E475A6EAB25C98D",hash_generated_method="F89B5B48E6D65164DE427C517F844F7A") private boolean isClosed(){  return !mFD.valid();}  }
class C{  public static byte[] convertHexStringToBytes(String hexString){  return convertHexStringToBytes(hexString,0,hexString.length());}  }
class C{  public CipherParameters encrypt(byte[] out,int outOff,int keyLen) throws IllegalArgumentException {  if (key.isPrivate()) {    throw new IllegalArgumentException("Public key required for encryption");  }  BigInteger n=key.getModulus();  BigInteger e=key.getExponent();  BigInteger r=BigIntegers.createRandomInRange(ZERO,n.subtract(ONE),rnd);  BigInteger c=r.modPow(e,n);  byte[] C=BigIntegers.asUnsignedByteArray((n.bitLength() + 7) / 8,c);  System.arraycopy(C,0,out,outOff,C.length);  return generateKey(n,r,keyLen);}  }
class C{  public int isNullable(int column) throws SQLException {  if (!getField(column).isNotNull()) {    return java.sql.ResultSetMetaData.columnNullable;  }  return java.sql.ResultSetMetaData.columnNoNulls;}  }
class C{  public List<CompoundCurve3D> parseString(String pathString){  mPreviousPoint=new Vector3();  mStartPoint=new Vector3();  mPreviousControlPoint=new Vector3();  return pathStringToLine(pathString);}  }
class C{  private void createRefreshJob(){  this.refreshJob=doCreateRefreshJob();  this.refreshJob.setSystem(true);}  }
class C{  public static byte[] createAndWriteBeanClass(String fqcn,List<TupleSchemaRegistry.SQLFieldInfo> fieldList) throws IOException, JSONException {  return createAndWriteBeanClass(fqcn,fieldList,null);}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,long[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  public static int width(int typecode){switch (typecode) {case LONGcode:case DOUBLEcode:    return 2;case VOIDcode:  return 0;default :return 1;}}  }
class C{  protected String toString(TrieNode node){  StringBuffer result;  int i;  StringBuffer indentation;  result=new StringBuffer();  indentation=new StringBuffer();  for (i=0; i < node.getLevel(); i++) {    indentation.append(" | ");  }  result.append(indentation.toString());  if (node.getChar() == null) {    result.append("<root>");  } else   if (node.getChar() == TrieNode.STOP) {    result.append("STOP");  } else {    result.append("'" + node.getChar() + "'");  }  result.append("\n");  for (i=0; i < node.getChildCount(); i++) {    result.append(toString((TrieNode)node.getChildAt(i)));  }  return result.toString();}  }
class C{  public PcMax(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public static void main(String[] args) throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("PeriodicSource");  Random r=new Random();  TStream<Double> gaussian=t.poll(null,1,TimeUnit.SECONDS);  gaussian=gaussian.peek(null);  gaussian=gaussian.filter(null);  TStream<String> gs=gaussian.map(null);  gs.print();  tp.submit(t);}  }
class C{  private VisorIgfsSamplingStateJob(IgniteBiTuple<String,Boolean> arg,boolean debug){  super(arg,debug);}  }
class C{  boolean shouldUseOldSyntax(){  return isJsLibrary;}  }
class C{  public ViewPropertyAnimator translationYBy(float value){  animatePropertyBy(TRANSLATION_Y,value);  return this;}  }
class C{  @Override public List<GetLineageByInstanceExecInfo> execute(String[] params){  List<GetLineageByInstanceExecInfo> lineageByInstanceExecInfos;  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String eid=commandLine.getOptionValue("instance-exec-id");    LOGGER.debug("Instance exec id  is " + eid);    GetLineageByInstanceExecInfo getLineageByInstanceExecInfo=new GetLineageByInstanceExecInfo();    getLineageByInstanceExecInfo.setInstanceExecId(Long.parseLong(eid));    lineageByInstanceExecInfos=lineageByInstanceExecDAO.LineageByInstanceExec(getLineageByInstanceExecInfo);    LOGGER.debug("Details of batch is " + lineageByInstanceExecInfos);    return lineageByInstanceExecInfos;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  private boolean noTranspile(N4JSResource eResource){  ResourceType resourceType=ResourceType.getResourceType(eResource);  return resourceType.equals(ResourceType.JS);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node element;  Element ownerElement;  Element parentElement;  NodeList elementList;  String ownerElementName;  Attr attr;  Node removedChild;  NamedNodeMap nodeMap;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=elementList.item(1);  parentElement=(Element)element.getParentNode();  nodeMap=element.getAttributes();  removedChild=parentElement.removeChild(element);  attr=(Attr)nodeMap.getNamedItemNS(nullNS,"street");  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEquals("attrgetownerelement05","address",ownerElementName);}  }
class C{  public static String fromTag(LongTag tag){  return String.valueOf(tag.getValue()) + MojangsonToken.LONG_SUFFIX;}  }
class C{  protected void clearEvents(){  sCISafe.clearEvents();  sCIUser.clearEvents();}  }
class C{  protected void EMIT_Lea(Instruction s,RegisterOperand result,MemoryOperand mo){  if ((mo.index == null) && mo.disp.isZero()) {    if (VM.VerifyAssertions)     opt_assert(mo.scale == 0 && mo.base != null);    EMIT(MIR_Move.mutate(s,IA32_MOV,result,mo.base));  } else   if ((mo.index == null) && result.similar(mo.base)) {    if (VM.VerifyAssertions)     opt_assert(mo.scale == 0);    if (VM.VerifyAssertions)     opt_assert(fits(mo.disp,32));    EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,result,IC(mo.disp.toInt())));  } else {    EMIT(MIR_Lea.mutate(s,IA32_LEA,result,mo));  }}  }
class C{  public boolean isDeltaCRLIndicatorEnabled(){  return deltaCRLIndicator;}  }
class C{  public static byte[] calculateSignature(byte[] random,byte[] privateKey,byte[] message){  byte[] result=new byte[64];  if (curve_sigs.curve25519_sign(SHA512Provider,result,privateKey,message,message.length,random) != 0) {    throw new IllegalArgumentException("Message exceeds max length!");  }  return result;}  }
class C{  @Override public IBinder onBind(Intent intent){  return mOperationsBinder;}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public void notifyPickedUp(Id<Carrier> carrierId,Id<Person> driverId,CarrierShipment shipment,double time){  processEvent(new ShipmentPickedUpEvent(carrierId,driverId,shipment,time));}  }
class C{  public void putUTF8String(String s) throws IOException {  writeString(s,DerValue.tag_UTF8String,"UTF8");}  }
class C{  @Override public void write(byte[] b){  checkNotNull(b);}  }
class C{  public static String readUserIPAddress(final PwmRequest pwmRequest) throws PwmUnrecoverableException {  final Configuration config=pwmRequest.getConfig();  final boolean useXForwardedFor=config != null && config.readSettingAsBoolean(PwmSetting.USE_X_FORWARDED_FOR_HEADER);  String userIP="";  if (useXForwardedFor) {    try {      userIP=pwmRequest.readHeaderValueAsString(PwmConstants.HTTP_HEADER_X_FORWARDED_FOR);    } catch (    Exception e) {    }  }  if (userIP == null || userIP.length() < 1) {    userIP=pwmRequest.getHttpServletRequest().getRemoteAddr();  }  return userIP == null ? "" : userIP;}  }
class C{  public static void scroll(Coordinate[] coordinates,Coordinate firstCoordinate){  int i=indexOf(firstCoordinate,coordinates);  if (i < 0)   return;  Coordinate[] newCoordinates=new Coordinate[coordinates.length];  System.arraycopy(coordinates,i,newCoordinates,0,coordinates.length - i);  System.arraycopy(coordinates,0,newCoordinates,coordinates.length - i,i);  System.arraycopy(newCoordinates,0,coordinates,0,coordinates.length);}  }
class C{  @Override public StreamBuilderImpl<T,U> filter(PredicateAsync<? super T> test){  return new FilterAsync<T,U>(this,test);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static void generate(ClientCache cache,PrintWriter pw){  generate(cache,pw,true);}  }
class C{  public void testDrainTo(){  LinkedBlockingQueue q=populatedQueue(SIZE);  ArrayList l=new ArrayList();  q.drainTo(l);  assertEquals(q.size(),0);  assertEquals(l.size(),SIZE);  for (int i=0; i < SIZE; ++i)   assertEquals(l.get(i),new Integer(i));  q.add(zero);  q.add(one);  assertFalse(q.isEmpty());  assertTrue(q.contains(zero));  assertTrue(q.contains(one));  l.clear();  q.drainTo(l);  assertEquals(q.size(),0);  assertEquals(l.size(),2);  for (int i=0; i < 2; ++i)   assertEquals(l.get(i),new Integer(i));}  }
class C{  public static void fill(long[] a,long val){  fill(a,0,a.length,val);}  }
class C{  protected boolean beforeDelete(){  DB.executeUpdate("DELETE FROM AD_View_Column_Trl WHERE AD_View_Column_ID=? ",getAD_View_Column_ID(),get_TrxName());  return true;}  }
class C{  public boolean isStacked(){  return mStackSize > 1 ? true : false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.PRESENCE__MANDATORY:    return mandatory != MANDATORY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public final String toString(){  return image;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public static void upto(Calendar self,Calendar to,Closure closure){  if (self.compareTo(to) <= 0) {    for (Calendar i=(Calendar)self.clone(); i.compareTo(to) <= 0; i=next(i)) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be earlier than the value ("+ self+ ") it's called on.");}  }
class C{  public long[] sort(int n){  while (--n >= 0) {    long result=heap[1];    heap[1]=heap[size];    heap[size]=result;    size--;    downHeap();  }  return heap;}  }
class C{  public BlockContainer(Arrangement arrangement){  ParamChecks.nullNotPermitted(arrangement,"arrangement");  this.arrangement=arrangement;  this.blocks=new ArrayList();}  }
class C{  public boolean equalFilters(DBDDataFilter source){  if (anyConstraint != source.anyConstraint) {    return false;  }  if (constraints.size() != source.constraints.size()) {    return false;  }  for (int i=0; i < source.constraints.size(); i++) {    if (!constraints.get(i).equalFilters(source.constraints.get(i))) {      return false;    }  }  return CommonUtils.equalObjects(this.order,source.order) && CommonUtils.equalObjects(this.where,source.where);}  }
class C{  public final LC alignX(String align){  setAlignX(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  private void deleteChildren(Element container){  while (container.hasChildNodes()) {    container.removeChild(container.getLastChild());  }}  }
class C{  public static boolean isComponentDefault(Context context,String componentClassName){  PackageManager pm=context.getPackageManager();  ComponentName componentName=new ComponentName(context.getPackageName(),componentClassName);  return pm.getComponentEnabledSetting(componentName) == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT;}  }
class C{  public ConditionalTransferEntropyCalculatorKraskov(String calculatorName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(calculatorName);  if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV1)) {    kraskovAlgorithmNumber=1;  } else   if (calculatorName.equalsIgnoreCase(COND_MI_CALCULATOR_KRASKOV2)) {    kraskovAlgorithmNumber=2;  } else {    throw new ClassNotFoundException("Must be an underlying Kraskov-Grassberger conditional MI calculator");  }  props=new Hashtable<String,String>();}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  protected synchronized void requestResult(String url,String result,int responseCode,String stream){  StreamInfo streamInfo=getStreamInfo(stream);  if (result == null) {    LOGGER.warning("Error requesting stream data: " + result);    if (responseCode == 404) {      streamInfo.setExpiresAfter(UPDATE_STREAMINFO_DELAY_NOT_FOUND);      streamInfo.setNotFound();    }    streamInfo.setUpdateFailed();    return;  }  parseStream(streamInfo,result);}  }
class C{  public static void checkAndSetStringParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String s=params.getStringValue(paramKey);  if (s == null) {    s=getText(context,paramName,xpath);    if (s != null && s.length() > 0)     params.setValue(paramKey,s.trim());  }}  }
class C{  public static IntList catenate(IntList A,IntList B){  return null;}  }
class C{  public static void list(PrintStream out) throws IOException {  prp.list(out);}  }
class C{  public XBeeAddress64(String addressStr){  address=new int[8];  if (addressStr.contains(" ")) {    StringTokenizer st=new StringTokenizer(addressStr," ");    for (int i=0; i < address.length; i++) {      String byteStr=st.nextToken();      address[i]=Integer.parseInt(byteStr,16);    }  } else {    for (int i=0; i < address.length; i++) {      address[i]=Integer.parseInt(addressStr.substring(i * 2,i * 2 + 2),16);    }  }}  }
class C{  public void loadAllImages(Component comp,MediaTracker tracker){  for (Iterator<HexEntry> i=bases.iterator(); i.hasNext(); ) {    HexEntry entry=i.next();    if (entry.getImage() == null) {      entry.loadImage(comp);    }    tracker.addImage(entry.getImage(),1);  }  for (Iterator<HexEntry> i=supers.iterator(); i.hasNext(); ) {    HexEntry entry=i.next();    if (entry.getImage() == null) {      entry.loadImage(comp);    }    tracker.addImage(entry.getImage(),1);  }  for (Iterator<HexEntry> i=ortho.iterator(); i.hasNext(); ) {    HexEntry entry=i.next();    if (entry.getImage() == null) {      entry.loadImage(comp);    }    tracker.addImage(entry.getImage(),1);  }}  }
class C{  public static boolean copyFileSafe(final Path srcFile,final Path destFile,boolean overwrite) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.toAbsolutePath().toString().equals(destFile.toAbsolutePath().toString())) {    LOGGER.debug("try to copy file " + srcFile + " to "+ destFile);    if (!Files.exists(srcFile)) {      throw new FileNotFoundException("Source '" + srcFile + "' does not exist");    }    if (Files.isDirectory(srcFile)) {      throw new IOException("Source '" + srcFile + "' is a directory");    }    if (!overwrite) {      if (Files.exists(destFile) && !srcFile.equals(destFile)) {        throw new FileExistsException("Destination '" + destFile + "' already exists");      }    }    if (Files.isDirectory(destFile)) {      throw new IOException("Destination '" + destFile + "' is a directory");    }    boolean rename=false;    for (int i=0; i < 5; i++) {      try {        Files.copy(srcFile,destFile,StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);        rename=true;      } catch (      IOException e) {      }      if (rename) {        break;      }      try {        LOGGER.debug("rename did not work - sleep a while and try again...");        Thread.sleep(1000);      } catch (      InterruptedException e) {        LOGGER.warn("I'm so excited - could not sleep");      }    }    if (!rename) {      LOGGER.error("Failed to rename file '" + srcFile + " to "+ destFile);      MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,srcFile,"message.renamer.failedrename"));      return false;    } else {      LOGGER.info("Successfully moved file from " + srcFile + " to "+ destFile);      return true;    }  }  return true;}  }
class C{  public RibbonIterator(Geo v1,Geo v2,double radius,double rotationIntervalDist){  this.v1=v1;  this.v2=v2;  if (v1 == null || v2 == null || v1.equals(v2)) {    this.point=v2;  } else {    this.distance=v1.distance(v2);    this.radius=radius;    this.gc=v1.crossNormalize(v2);    this.rotator=new Rotation(gc,rotationIntervalDist);    this.point=v1;  }}  }
class C{  public Where(){  super(KEY);}  }
class C{  public RegisterOperand makeTempBoolean(){  return new RegisterOperand(getInteger(),TypeReference.Boolean);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj == null) {    return false;  }  if (!(getClass() == obj.getClass())) {    return false;  } else {    Block b=(Block)obj;    if (!b.getSystemName().equals(this.getSystemName())) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.088 -0500",hash_original_method="5C7CD09A9243ABC84BD76D8BB04AA3C5",hash_generated_method="B69FAA21AD101141AF546C1E595C2553") public static final CharSequence timeString(long millis){synchronized (sLock) {    initFormatStringsLocked();    return sStatusTimeFormat.format(millis);  }}  }
class C{  public static void main(String argv[]){  RingBuffer<String> ringBuffer=new RingBuffer<String>(6);  for (int i=0; i < 4; i++) {    String element=String.format("ELEMENT %d",i);    ringBuffer.add(element);  }  System.out.println("SHOULD SHOW ONLY 4 ELEMENTS");  System.out.println(ringBuffer);  ringBuffer=new RingBuffer<String>(1);  for (int i=0; i < 50; i++) {    String element=String.format("ELEMENT %d",i);    ringBuffer.add(element);  }  System.out.println("SHOULD SHOW ONLY 1 ELEMENT, NUMBERED 49");  System.out.println(ringBuffer);  ringBuffer=new RingBuffer<String>(10);  System.out.println("SHOULD NOT SHOW ANY ELEMENTS");  System.out.println(ringBuffer.toString());  for (int i=0; i < 20; i++) {    String element=String.format("ELEMENT %d",i);    ringBuffer.add(element);  }  System.out.println("SHOULD SHOW ONLY 10 ELEMENTS, HIGHEST IS 19");  System.out.println(ringBuffer);  System.out.println("SHOULD PRINT A WARNING AND RESET CAPACITY TO 20");  ringBuffer=new RingBuffer<String>(0);  ringBuffer.add("FOO");  ringBuffer.add("BAR");  System.out.println(ringBuffer);}  }
class C{  public DocumentHandler(String rootElementName,TagHandler root){  this.root=root;  this.rootElementName=rootElementName;}  }
class C{  public boolean isAbbrValid(String abbr){  if (abbr.length() > 3 || abbr.length() == 0) {    return false;  }  if (abbr.contains(",") || abbr.contains(">") || abbr.contains("%")|| abbr.contains("\\")|| abbr.contains(" ")) {    return false;  }  for (int i=0; i < teamList.size(); i++) {    if (teamList.get(i).abbr.equals(abbr) && !teamList.get(i).userControlled) {      return false;    }  }  return true;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace));}  }
class C{  public static List<SubstringLabelerMatchRule> matchRulesFromInternal(String matchDetails,Instances inputStructure,String statusMessagePrefix,Logger log,Environment env){  List<SubstringLabelerMatchRule> matchRules=new ArrayList<SubstringLabelerMatchRule>();  String[] matchParts=matchDetails.split(MATCH_RULE_SEPARATOR);  for (  String p : matchParts) {    SubstringLabelerMatchRule m=new SubstringLabelerMatchRule(p.trim());    m.m_statusMessagePrefix=statusMessagePrefix == null ? "" : statusMessagePrefix;    m.m_logger=log;    m.init(env,inputStructure);    matchRules.add(m);  }  return matchRules;}  }
class C{  @Override public int hashCode(){  int hashCode=(Double.valueOf(this.getMinimum()).hashCode() + Double.valueOf(this.getMaximum()).hashCode() + Boolean.valueOf(isMinimumSet()).hashCode()+ Boolean.valueOf(isMaximumSet()).hashCode());  return (hashCode);}  }
class C{  public void addPoly(double[] llpoints,int units,int lType,int nsegs,LinkProperties properties) throws IOException {  LinkPoly.write(llpoints,units,lType,nsegs,properties,link.dos);}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  protected void putMetricData(String namespace,String metricName,Double metricValue) throws AmazonClientException, AmazonServiceException {  PutMetricDataRequest putMetricDataRequest=new PutMetricDataRequest();  putMetricDataRequest.withNamespace(namespace).withMetricData(new MetricDatum().withMetricName(metricName).withValue(metricValue).withTimestamp(new Date()));  amazonCloudWatchClient.putMetricData(putMetricDataRequest);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.startBT=this.findView(R.id.start_bt);}  }
class C{  public void testNextIntBounded(){  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=ThreadLocalRandom.current().nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public DLSequence(ASN1Encodable obj){  super(obj);}  }
class C{  @VisibleForTesting void restoreState(){  boolean mustRewriteState=false;  SharedPreferences preferences=mApplicationContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  Map<String,?> items=preferences.getAll();  long currentTime=mBackoffScheduler.getCurrentTime();  mTimestampForNewRequest=getLongFromMap(items,PREF_TIMESTAMP_FOR_NEW_REQUEST,currentTime);  mTimestampForNextPostAttempt=getLongFromMap(items,PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT,currentTime);  long requestTimestamp=getLongFromMap(items,PREF_TIMESTAMP_OF_REQUEST,INVALID_TIMESTAMP);  mSendInstallEvent=getBooleanFromMap(items,PREF_SEND_INSTALL_EVENT,true);  String defaultInstallSource=determineInstallSource(mApplicationContext);  mInstallSource=getStringFromMap(items,PREF_INSTALL_SOURCE,defaultInstallSource);  String persistedRequestId=mSendInstallEvent ? getStringFromMap(items,PREF_PERSISTED_REQUEST_ID,INVALID_REQUEST_ID) : INVALID_REQUEST_ID;  mCurrentRequest=requestTimestamp == INVALID_TIMESTAMP ? null : createRequestData(requestTimestamp,persistedRequestId);  mLatestVersion=getStringFromMap(items,PREF_LATEST_VERSION,"");  mMarketURL=getStringFromMap(items,PREF_MARKET_URL,"");  mTimestampOfInstall=getLongFromMap(items,PREF_TIMESTAMP_OF_INSTALL,currentTime);  long delayToNewRequest=mTimestampForNewRequest - currentTime;  if (delayToNewRequest > MS_BETWEEN_REQUESTS) {    Log.w(TAG,"Delay to next request (" + delayToNewRequest + ") is longer than expected.  Resetting to now.");    mTimestampForNewRequest=currentTime;    mustRewriteState=true;  }  long delayToNextPost=mTimestampForNextPostAttempt - currentTime;  if (delayToNextPost > mBackoffScheduler.getGeneratedDelay()) {    Log.w(TAG,"Delay to next post attempt (" + delayToNextPost + ") is greater than expected ("+ mBackoffScheduler.getGeneratedDelay()+ ").  Resetting to now.");    mTimestampForNextPostAttempt=currentTime;    mustRewriteState=true;  }  if (mustRewriteState) {    saveState();  }  mStateHasBeenRestored=true;}  }
class C{  public Object execute(Object o,InternalContextAdapter context) throws MethodInvocationException {  VelMethod method=null;  Object[] params=new Object[paramCount];  try {    IntrospectionCacheData icd=context.icacheGet(this);    Class c=o.getClass();    if (icd != null && icd.contextData == c) {      for (int j=0; j < paramCount; j++)       params[j]=jjtGetChild(j + 1).value(context);      method=(VelMethod)icd.thingy;    } else {      for (int j=0; j < paramCount; j++)       params[j]=jjtGetChild(j + 1).value(context);      method=rsvc.getUberspect().getMethod(o,methodName,params,new Info("",1,1));      if (method != null) {        icd=new IntrospectionCacheData();        icd.contextData=c;        icd.thingy=method;        context.icachePut(this,icd);      }    }    if (method == null)     return null;  } catch (  MethodInvocationException mie) {    throw mie;  }catch (  Exception e) {    rsvc.error("ASTMethod.execute() : exception from introspection : " + e);    return null;  }  try {    Object obj=method.invoke(o,params);    if (obj == null) {      if (method.getReturnType() == Void.TYPE)       return new String("");    }    return obj;  } catch (  InvocationTargetException ite) {    EventCartridge ec=context.getEventCartridge();    if (ec != null && ite.getTargetException() instanceof java.lang.Exception) {      try {        return ec.methodException(o.getClass(),methodName,(Exception)ite.getTargetException());      } catch (      Exception e) {        throw new MethodInvocationException("Invocation of method '" + methodName + "' in  "+ o.getClass()+ " threw exception "+ e.getClass()+ " : "+ e.getMessage(),e,methodName);      }    } else {      throw new MethodInvocationException("Invocation of method '" + methodName + "' in  "+ o.getClass()+ " threw exception "+ ite.getTargetException().getClass()+ " : "+ ite.getTargetException().getMessage(),ite.getTargetException(),methodName);    }  }catch (  Exception e) {    rsvc.error("ASTMethod.execute() : exception invoking method '" + methodName + "' in "+ o.getClass()+ " : "+ e);    return null;  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public static LoggingException createLoggingException(final ErrorKeys errorId,final Exception e){  return new LoggingException(errorId.toString(),e);}  }
class C{  @SuppressWarnings("unchecked") public void writeSQLXML(SQLXML x) throws SQLException {  attribs.add(x);}  }
class C{  public void readValues(){  readValues(false);}  }
class C{  public boolean parse(final BashPsiBuilder builder){  log.assertTrue(builder.getTokenType() == EXPR_CONDITIONAL);  final PsiBuilder.Marker command=builder.mark();  boolean result=parseConditionalExpression(builder);  command.done(CONDITIONAL_COMMAND);  return result;}  }
class C{  public static StringBuilder readFile(String filePath){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String format(final Iterable<? extends NameValuePair> parameters,final Charset charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  @RequestMapping(value="/posts/{postId:\\d+}/replies",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<ReplyDTO> createReply(@Valid @RequestBody ReplyDTO replyDTO,@PathVariable Long postId) throws URISyntaxException {  log.debug("REST request to save Reply : {}",replyDTO);  if (replyDTO.getId() != null || replyDTO.getUserId() != null) {    return ResponseEntity.badRequest().header("Failure","A new reply cannot already have an ID or an userId").body(null);  }  Reply result=replyService.createReply(replyDTO,userService.getCurrentUser());  return ResponseEntity.created(new URI("/api/posts/" + postId + "/replies/"+ result.getId())).headers(HeaderUtil.addMessage("Add reply successfully",result.getId().toString())).body(new ReplyDTO(result));}  }
class C{  public Integer decode(ByteBuffer buffer){  byte b=buffer.get();  int result=b & 0x7F;  if ((b & 0x80) != 0) {    b=buffer.get();    result|=(b & 0x7F) << 7;    if ((b & 0x80) != 0) {      b=buffer.get();      result|=(b & 0x7F) << 14;      if ((b & 0x80) != 0) {        b=buffer.get();        result|=(b & 0x7F) << 21;        if ((b & 0x80) != 0) {          b=buffer.get();          result|=(b & 0x7F) << 28;        }      }    }  }  return Integer.valueOf(result);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void init(int WindowNo,FormFrame frame){  log.info("VCRP.init");  m_WindowNo=WindowNo;  m_frame=frame;  try {    fillPicks();    jbInit();    frame.getContentPane().add(northPanel,BorderLayout.NORTH);    frame.getContentPane().add(centerPanel,BorderLayout.CENTER);    frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);    frame.pack();  } catch (  Exception e) {    log.log(Level.SEVERE,"VCRP.init",e);  }}  }
class C{  public static AnnotationDesc walk(EsperEPL2GrammarParser.AnnotationEnumContext ctx,EngineImportService engineImportService) throws ASTWalkException {  String name=ASTUtil.unescapeClassIdent(ctx.classIdentifier());  List<Pair<String,Object>> values=new ArrayList<Pair<String,Object>>();  if (ctx.elementValueEnum() != null) {    Object value=walkValue(ctx.elementValueEnum(),engineImportService);    values.add(new Pair<String,Object>("value",value));  } else   if (ctx.elementValuePairsEnum() != null) {    walkValuePairs(ctx.elementValuePairsEnum(),values,engineImportService);  }  return new AnnotationDesc(name,values);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (dataProvider != null) {    String openUriDialogAsString=(Boolean.valueOf(dataProvider.isShowUriDialog())).toString();    controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_SHOW_DIALOG,openUriDialogAsString);  }  controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_USE_URI,"false");  showOpenUriDialog.setVisible(false);  controller.displayView(View.TRANSACTIONS_VIEW);}  }
class C{  public static void selectRevealInDefaultViews(Object element){  for (  String viewId : DEFAULT_VIEW_IDS) {    selectReveal(element,viewId);  }}  }
class C{  public final boolean isRegular(){  if (m_AttributeMetaInfo == null) {    return true;  }  return m_AttributeMetaInfo.m_IsRegular;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.002 -0500",hash_original_method="EE0D2036A98AFA5E0CE17A68BC067450",hash_generated_method="C37F99D5AD6A2CE17E7DCCD941CE8EA5") @DSSafe(DSCat.SAFE_OTHERS) public static String sha256Hex(String data){  return Hex.encodeHexString(sha256(data));}  }
class C{  public int hashCode(){  return object.hashCode();}  }
class C{  public void removeCache(String uri,int maxWidth,int maxHeight,ImageView.ScaleType scaleType){  mImageLoader.removeCache(uri,maxWidth,maxHeight,scaleType);}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  public static void eachByte(InputStream is,int bufferLen,@ClosureParams(value=FromString.class,options="byte[],Integer") Closure closure) throws IOException {  byte[] buffer=new byte[bufferLen];  int bytesRead;  try {    while ((bytesRead=is.read(buffer,0,bufferLen)) > 0) {      closure.call(buffer,bytesRead);    }    InputStream temp=is;    is=null;    temp.close();  }  finally {    closeWithWarning(is);  }}  }
class C{  final public SyntaxTreeNode Lambda() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Lambda");  t=jj_consume_token(LAMBDA);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier";  tn=Identifier();  addHeir(tn);  expecting="`,' or `:'";  label_48:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[126]=jj_gen;break label_48;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=Identifier();addHeir(tn);expecting="`,' or `:'";}t=jj_consume_token(COLON);addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Lambda,sn);}throw new Error("Missing return statement in function");}  }
class C{  public void addCustomFetchFilter(FetchFilter filter){  validateParameterNonNull(filter,"filter");  this.customFetchFilters.add(filter);}  }
class C{  public void putAny(byte[] s){  putAny(s,s.length);}  }
class C{  private DataSet simulateDataHelper(int sampleSize,boolean latentDataSaved){  int numMeasured=0;  int[] map=new int[nodes.length];  List<Node> variables=new LinkedList<>();  for (int j=0; j < nodes.length; j++) {    if (!latentDataSaved && nodes[j].getNodeType() != NodeType.MEASURED) {      continue;    }    int numCategories=bayesPm.getNumCategories(nodes[j]);    List<String> categories=new LinkedList<>();    for (int k=0; k < numCategories; k++) {      categories.add(bayesPm.getCategory(nodes[j],k));    }    DiscreteVariable var=new DiscreteVariable(nodes[j].getName(),categories);    variables.add(var);    int index=++numMeasured - 1;    map[index]=j;  }  DataSet dataSet=new ColtDataSet(sampleSize,variables);  constructSample(sampleSize,numMeasured,dataSet,map);  return dataSet;}  }
class C{  public long convertUTMToGeodetic(long Zone,String Hemisphere,double Easting,double Northing){  long Error_Code=UTM_NO_ERROR;  double Origin_Latitude=0;  double False_Easting=500000;  double False_Northing=0;  double Scale=0.9996;  if ((Zone < 1) || (Zone > 60))   Error_Code|=UTM_ZONE_ERROR;  if (!Hemisphere.equals(AVKey.SOUTH) && !Hemisphere.equals(AVKey.NORTH))   Error_Code|=UTM_HEMISPHERE_ERROR;  if ((Northing < MIN_NORTHING) || (Northing > MAX_NORTHING))   Error_Code|=UTM_NORTHING_ERROR;  if (Error_Code == UTM_NO_ERROR) {    if (Zone >= 31)     Central_Meridian=((6 * Zone - 183) * PI / 180.0); else     Central_Meridian=((6 * Zone + 177) * PI / 180.0);    if (Hemisphere.equals(AVKey.SOUTH))     False_Northing=10000000;    try {      TMCoord TM=TMCoord.fromTM(Easting,Northing,this.globe,Angle.fromRadians(Origin_Latitude),Angle.fromRadians(Central_Meridian),False_Easting,False_Northing,Scale);      Latitude=TM.getLatitude().radians;      Longitude=TM.getLongitude().radians;      if ((Latitude < MIN_LAT) || (Latitude > MAX_LAT)) {        Error_Code|=UTM_NORTHING_ERROR;      }    } catch (    Exception e) {      Error_Code=UTM_TM_ERROR;    }  }  return (Error_Code);}  }
class C{  public LogEntry(final String id,final String timestamp,final String itemid,final String source,final String event,final String param1,final String param2,final String param3,final String param4){  this.id=id;  this.timestamp=timestamp;  this.itemid=itemid;  this.source=source;  this.event=event;  this.param1=param1;  this.param2=param2;  this.param3=param3;  this.param4=param4;}  }
class C{  public boolean isOverflow(){  return overflow;}  }
class C{  public static InputStream openStream(String path) throws FileNotFoundException, IOException {  return openStream(new FileInputStream(path));}  }
class C{  public TextArea(String text,int rows,int columns){  this(text,defaultMaxSize,rows,columns,ANY);}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  @Override protected void configureCurrentHandlerHook(int dialogType){  super.configureCurrentHandlerHook(dialogType);  if (m_CurrentHandler != null) {    if (getSelectedFile() != null)     ((FileBasedEvaluationStatisticsExporter)m_CurrentHandler).setFile(getSelectedFile());  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static double normalize(double value){  return value / (1.0 + value);}  }
class C{  protected void processJoinFetch(String joinFetch,ForeignReferenceMapping mapping){  if (joinFetch == null) {    mapping.setJoinFetch(ForeignReferenceMapping.NONE);  } else   if (joinFetch.equals(JoinFetchType.INNER.name())) {    mapping.setJoinFetch(ForeignReferenceMapping.INNER_JOIN);  } else {    mapping.setJoinFetch(ForeignReferenceMapping.OUTER_JOIN);  }}  }
class C{  protected void addStateConfigurationIdxPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StateSwitch_stateConfigurationIdx_feature"),getString("_UI_PropertyDescriptor_description","_UI_StateSwitch_stateConfigurationIdx_feature","_UI_StateSwitch_type"),SexecPackage.Literals.STATE_SWITCH__STATE_CONFIGURATION_IDX,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public void prune() throws Exception {  if (!m_isLeaf) {    for (int i=0; i < m_sons.length; i++)     son(i).prune();    if (Utils.smOrEq(errorsForLeaf(),errorsForTree())) {      m_sons=null;      m_isLeaf=true;      m_localModel=new NoSplit(localModel().distribution());    }  }}  }
class C{  public static void isUpdate(Context context,UpdateListener listener){  init(context);  try {    if (aidlService != null) {      aidlService.updateApk();    } else {      cacheEventList.add(new AIDLCacheEvent(EventType.UPDATE_APK));    }  } catch (  RemoteException e) {    EventManager.onError(context,e.getMessage());    Ln.e("EventManager == ","isUpdate == ",e);  }}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  @Override public void onClose() throws IOException {  write(new byte[1024 + 512 - (int)(getBytesWritten() % 512L)]);}  }
class C{  protected void parseAdaptationSetChild(XmlPullParser xpp) throws XmlPullParserException, IOException {}  }
class C{  public String errorString(String err,Object arg1,Object arg2,Object arg3){  String key=null;  if (err.startsWith("warn."))   key="javac.err." + err.substring(5); else   key="javac.err." + err;  return Main.getText(key,arg1 != null ? arg1.toString() : null,arg2 != null ? arg2.toString() : null,arg3 != null ? arg3.toString() : null);}  }
class C{  public void header(String key,String... header){  headers.put(key,Arrays.asList(header));}  }
class C{  public int hashCode(){  return parent.hashEntry(getKey(),getValue());}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  sb.append(System.getProperty("line.separator"));  ident++;  for (  WbXmlAttribute pi : prePi) {    sb.append("PI: ");    sb.append(pi.toString(ident));    sb.append(System.getProperty("line.separator"));  }  sb.append(element.toString(ident));  for (  WbXmlAttribute pi : prePi) {    sb.append("PI: ");    sb.append(pi.toString(ident));    sb.append(System.getProperty("line.separator"));  }  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  String name=getString(stack);  PseudoMenu ui=(stack.getUIMgrSafe() == null) ? null : stack.getUIMgrSafe().getCurrUI();  if (ui != null)   ui.refreshByValue(name,val);  return null;}  }
class C{  @Override public void ack(Object msgId){  RunningJobMessageId messageId=(RunningJobMessageId)msgId;  JobConstants.ResourceType type=messageId.type;  LOG.info("Ack on messageId: " + messageId.toString());switch (type) {case JOB_CONFIGURATION:case JOB_COMPLETE_INFO:    try {      readWriteLock.readLock().lock();      zkStateManager.addProcessedJob(type,messageId.jobID);      crawler.removeFromProcessingList(type,new JobContext(messageId.jobID,null,null));    }  finally {      try {        readWriteLock.readLock().unlock();        LOG.info("Read lock released");      } catch (      Throwable t) {        LOG.error("Fail to release Read lock",t);      }    }  break;default :break;}}  }
class C{  private void dfs(int u,int[] parent,List<Integer> searchOrder,boolean[] isVisited){  searchOrder.add(u);  isVisited[u]=true;  for (  Edge e : neighbors.get(u)) {    if (!isVisited[e.v]) {      parent[e.v]=u;      dfs(e.v,parent,searchOrder,isVisited);    }  }}  }
class C{  public void addCapabilitiesListener(Set<ContactId> contacts,CapabilitiesListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  if (contacts == null || contacts.isEmpty()) {    throw new RcsIllegalArgumentException("contacts must not be null or empty!");  }  try {    ICapabilitiesListener rcsListener=new CapabilitiesListenerImpl(listener);    mCapabilitiesListeners.put(listener,new WeakReference<>(rcsListener));    for (    ContactId contact : contacts) {      mApi.addCapabilitiesListener2(contact,rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  void _m22(float m22){  this.m22=m22;}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public String alignmentString(){  if (f2eAlignment == null)   f2eAlignment=alignmentGrid().toString();  return f2eAlignment;}  }
class C{  public boolean openWr(){  read=false;  try {    out=new FileOutputStream(file);    buffOut=new BufferedOutputStream(out);    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public AllocatableValue spillSlot(){  return splitParent().spillSlot;}  }
class C{  public IOException(Throwable cause){  super(cause == null ? null : cause.toString(),cause);}  }
class C{  public static List<TriggerDto> transformToDto(List<Trigger> triggers){  List<TriggerDto> result=new ArrayList<TriggerDto>();  for (  Trigger trigger : triggers) {    result.add(transformToDto(trigger));  }  return result;}  }
class C{  public boolean isSelected(){  return false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (!(m_parentNode instanceof Stylesheet) && m_qname != null) {    m_index=cstate.addVariableName(m_qname) - cstate.getGlobalsSize();  } else   if (m_parentNode instanceof Stylesheet) {    cstate.resetStackFrameSize();  }  super.compose(sroot);}  }
class C{  private boolean installReply(String alias,InputStream in) throws Exception {  if (alias == null) {    alias=keyAlias;  }  Pair<Key,char[]> objs=recoverKey(alias,storePass,keyPass);  PrivateKey privKey=(PrivateKey)objs.fst;  if (keyPass == null) {    keyPass=objs.snd;  }  Certificate userCert=keyStore.getCertificate(alias);  if (userCert == null) {    MessageFormat form=new MessageFormat(rb.getString("alias.has.no.public.key.certificate."));    Object[] source={alias};    throw new Exception(form.format(source));  }  Collection<? extends Certificate> c=cf.generateCertificates(in);  if (c.isEmpty()) {    throw new Exception(rb.getString("Reply.has.no.certificates"));  }  Certificate[] replyCerts=c.toArray(new Certificate[c.size()]);  Certificate[] newChain;  if (replyCerts.length == 1) {    newChain=establishCertChain(userCert,replyCerts[0]);  } else {    newChain=validateReply(alias,userCert,replyCerts);  }  if (newChain != null) {    keyStore.setKeyEntry(alias,privKey,(keyPass != null) ? keyPass : storePass,newChain);    return true;  } else {    return false;  }}  }
class C{  public boolean isNewFlag(){  return newFlag;}  }
class C{  public static URI createUriFromServerSet(Set<InetSocketAddress> serverInetSet,String path) throws URISyntaxException {  return createUriFromServerSet(serverInetSet,path,"http");}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException();  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public boolean removePrefix(final String prefix){  boolean changed;  if (txt.startsWith(prefix)) {    txt=txt.substring(prefix.length());    changed=true;  } else {    changed=false;  }  return changed;}  }
class C{  public int add(long bucket,int k){  sizes=bigArrays.grow(sizes,bucket + 1);  assert k != 0;  for (int i=(k & mask); ; i=(i + 1) & mask) {    final int v=get(bucket,i);    if (v == 0) {      set(bucket,i,k);      return sizes.increment(bucket,1);    } else     if (v == k) {      return -1;    }  }}  }
class C{  public boolean add(final double[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  private void passingPlay(Team offense,Team defense){  int yardsGain=0;  boolean gotTD=false;  boolean gotFumble=false;  double WR1pref=Math.pow(offense.getWR(0).ratOvr,1) * Math.random();  double WR2pref=Math.pow(offense.getWR(1).ratOvr,1) * Math.random();  double WR3pref=Math.pow(offense.getWR(2).ratOvr,1) * Math.random();  PlayerWR selWR;  PlayerCB selCB;  int[] selWRStats;  if (WR1pref > WR2pref && WR1pref > WR3pref) {    selWR=offense.getWR(0);    selCB=defense.getCB(0);    if (gamePoss) {      selWRStats=HomeWR1Stats;    } else     selWRStats=AwayWR1Stats;  } else   if (WR2pref > WR1pref && WR2pref > WR3pref) {    selWR=offense.getWR(1);    selCB=defense.getCB(1);    if (gamePoss) {      selWRStats=HomeWR2Stats;    } else     selWRStats=AwayWR2Stats;  } else {    selWR=offense.getWR(2);    selCB=defense.getCB(2);    if (gamePoss) {      selWRStats=HomeWR3Stats;    } else     selWRStats=AwayWR3Stats;  }  int pressureOnQB=defense.getCompositeF7Pass() * 2 - offense.getCompositeOLPass() - getHFadv();  if (Math.random() * 100 < pressureOnQB / 8) {    qbSack(offense);    return;  }  double intChance=(pressureOnQB + defense.getS(0).ratOvr - (offense.getQB(0).ratPassAcc + offense.getQB(0).ratFootIQ + 100) / 3) / 18 + offense.teamStratOff.getPAB() + defense.teamStratDef.getPAB();  if (intChance < 0.015)   intChance=0.015;  if (100 * Math.random() < intChance) {    qbInterception(offense);    return;  }  double completion=(getHFadv() + normalize(offense.getQB(0).ratPassAcc) + normalize(selWR.ratRecCat) - normalize(selCB.ratCBCov)) / 2 + 18.25 - pressureOnQB / 16.8 - offense.teamStratOff.getPAB() - defense.teamStratDef.getPAB();  if (100 * Math.random() < completion) {    if (100 * Math.random() < (100 - selWR.ratRecCat) / 3) {      gameDown++;      selWRStats[4]++;      selWR.statsDrops++;      passAttempt(offense,selWR,selWRStats,yardsGain);      gameTime-=15 * Math.random();      return;    } else {      yardsGain=(int)((normalize(offense.getQB(0).ratPassPow) + normalize(selWR.ratRecSpd) - normalize(selCB.ratCBSpd)) * Math.random() / 3.7 + offense.teamStratOff.getPYB() / 2 - defense.teamStratDef.getPYB());      double escapeChance=(normalize(selWR.ratRecEva) * 3 - selCB.ratCBTkl - defense.getS(0).ratOvr) * Math.random() + offense.teamStratOff.getPYB() - defense.teamStratDef.getPAB();      if (escapeChance > 92 || Math.random() > 0.95) {        yardsGain+=3 + selWR.ratRecSpd * Math.random() / 3;      }      if (escapeChance > 75 && Math.random() < (0.1 + (offense.teamStratOff.getPAB() - defense.teamStratDef.getPAB()) / 200)) {        yardsGain+=100;      }      gameYardLine+=yardsGain;      if (gameYardLine >= 100) {        yardsGain-=gameYardLine - 100;        gameYardLine=100 - yardsGain;        addPointsQuarter(6);        passingTD(offense,selWR,selWRStats,yardsGain);        gotTD=true;      } else {        double fumChance=(defense.getS(0).ratSTkl + selCB.ratCBTkl) / 2;        if (100 * Math.random() < fumChance / 50) {          gotFumble=true;        }      }      if (!gotTD && !gotFumble) {        gameYardsNeed-=yardsGain;        if (gameYardsNeed <= 0) {          gameDown=1;          gameYardsNeed=10;        } else         gameDown++;      }      passCompletion(offense,defense,selWR,selWRStats,yardsGain);    }  } else {    passAttempt(offense,selWR,selWRStats,yardsGain);    gameDown++;    gameTime-=15 * Math.random();    return;  }  passAttempt(offense,selWR,selWRStats,yardsGain);  if (gotFumble) {    gameEventLog+=getEventPrefix() + "TURNOVER!\n" + offense.abbr+ " WR "+ selWR.name+ " fumbled the ball after a catch.";    selWRStats[5]++;    selWR.statsFumbles++;    if (gamePoss) {      homeTOs++;    } else {      awayTOs++;    }    if (!playingOT) {      gameDown=1;      gameYardsNeed=10;      gamePoss=!gamePoss;      gameYardLine=100 - gameYardLine;      gameTime-=15 * Math.random();      return;    } else {      resetForOT();      return;    }  }  if (gotTD) {    gameTime-=15 * Math.random();    kickXP(offense,defense);    if (!playingOT)     kickOff(offense); else     resetForOT();    return;  }  gameTime-=15 + 15 * Math.random();}  }
class C{  public static List<UsageLicense> createUsageLicenses(DataService mgr,List<PlatformUser> users,Subscription subscription) throws NonUniqueBusinessKeyException {  List<UsageLicense> licenses=new ArrayList<UsageLicense>();  for (  PlatformUser user : users) {    licenses.add(createUsageLicense(mgr,user,subscription));  }  return licenses;}  }
class C{  public void testCookiesAreNotLogged() throws IOException, URISyntaxException {  server.enqueue(new MockResponse().addHeader("Set-Cookie: password=secret; Domain=fake.domain"));  server.play();  ByteArrayOutputStream out=new ByteArrayOutputStream();  Logger logger=Logger.getLogger("org.apache.http");  StreamHandler handler=new StreamHandler(out,new SimpleFormatter());  logger.addHandler(handler);  try {    HttpClient client=new DefaultHttpClient();    client.execute(new HttpGet(server.getUrl("/").toURI()));    handler.close();    String log=out.toString("UTF-8");    assertTrue(log,log.contains("password"));    assertTrue(log,log.contains("fake.domain"));    assertFalse(log,log.contains("secret"));  }  finally {    logger.removeHandler(handler);  }}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  AuthenticationToken token=this.getAuthenticationToken(host,realm);  if (token != null) {    handler.proceed(token.getUserName(),token.getPassword());    return;  }  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(null,new CordovaHttpAuthHandler(handler),host,realm)) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedHttpAuthRequest(view,handler,host,realm);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.camera);  getIntentData();  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public JAXPDOMTestDocumentBuilderFactory(DocumentBuilderFactory baseFactory,DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  if (baseFactory == null) {    factory=DocumentBuilderFactory.newInstance();  } else {    factory=baseFactory;  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {      settings[i].applySetting(factory);    }  }  try {    this.builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public VisorIgfs(String name,IgfsMode mode,VisorIgfsMetrics metrics,boolean secondaryFsConfigured){  this.name=name;  this.mode=mode;  this.metrics=metrics;  this.secondaryFsConfigured=secondaryFsConfigured;}  }
class C{  protected void process(DBIDRef id,ArrayDBIDs ids,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  slinkstep3(id,it,n,pi,lambda,m);  slinkstep4(id,it,n,pi,lambda);}  }
class C{  public String invertSelectionTipText(){  return "Determines whether action is to select or delete." + " If set to true, only the specified attributes will be kept;" + " If set to false, specified attributes will be deleted.";}  }
class C{  protected String doIt() throws Exception {  int To_C_Order_ID=getRecord_ID();  log.info("From C_Order_ID=" + p_C_Order_ID + " to "+ To_C_Order_ID);  if (To_C_Order_ID == 0)   throw new IllegalArgumentException("Target C_Order_ID == 0");  if (p_C_Order_ID == 0)   throw new IllegalArgumentException("Source C_Order_ID == 0");  MOrder from=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());  MOrder to=new MOrder(getCtx(),To_C_Order_ID,get_TrxName());  int no=to.copyLinesFrom(from,false,false);  return "@Copied@=" + no;}  }
class C{  private void swapRowsAndColumns(double[][] A,int i,int j){  int n=A[0].length;  double[] tr;  double ts;  tr=A[i];  A[i]=A[j];  A[j]=tr;  for (int k=0; k < n; k++) {    ts=A[k][i];    A[k][i]=A[k][j];    A[k][j]=ts;  }}  }
class C{  public void testEnglishInput() throws Exception {  ArabicAnalyzer a=new ArabicAnalyzer();  assertAnalyzesTo(a,"English text.",new String[]{"english","text"});  a.close();}  }
class C{  public void update(){}  }
class C{  public void init(){  connection.addConnectionListener(this);  connection.addPacketListener(listener,filter);}  }
class C{  public void print(int i) throws IOException {  if (_startLine)   printIndent();  _os.print(i);  _lastCr=false;}  }
class C{  public boolean isVideoCallsEnabled(){  return videoCallsEnabled;}  }
class C{  public LinkedStructSet(StructTypeImpl structType){  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.structType=structType;}  }
class C{  public void testReplicatedOversize() throws Exception {  cacheMode=REPLICATED;  check();}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public String toString(){  String result;  boolean comma_flag;  result="{";  comma_flag=false;  for (int t=0; t < terminal.number(); t++) {    if (_elements.get(t)) {      if (comma_flag)       result+=", "; else       comma_flag=true;      result+=terminal.find(t).name();    }  }  result+="}";  return result;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return COUNT;default :return null;}}  }
class C{  public static boolean hasInfiniteProgressPanel(final Shell shell){  return getInfiniteProgressPanelFor(shell) != null;}  }
class C{  @Override @CanIgnoreReturnValue public int read() throws IOException {  int b=in.read();  if (b != -1) {    hasher.putByte((byte)b);  }  return b;}  }
class C{  public VirtualArrayRestRep create(VirtualArrayCreateParam input){  return client.post(VirtualArrayRestRep.class,input,baseUrl);}  }
class C{  public String toString(){  return group;}  }
class C{  public TerminalGUI(TerminalExample example){  super(example.getName() + " Output");  this.example=example;  layoutComponents();  setupActions();  setVisible(true);  runExample();}  }
class C{  public DefaultConfigurationFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public AugmentedWebFunctions augmented(){  return augmentedFunctions;}  }
class C{  protected void processConverts(List<ConvertMetadata> converts,DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){  if (converts != null) {    for (    ConvertMetadata convert : converts) {      convert.process(mapping,referenceClass,getClassAccessor(),isForMapKey);    }  }}  }
class C{  public ImException(String message){  super(message);}  }
class C{  public static boolean processDefinedGlobalArrayNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlVariablesStubIndex.KEY_ARRAY,project,processor);}  }
class C{  String popImportURL(){  return (String)m_importStack.pop();}  }
class C{  private double minIgnoreNaN(double a,double b){  if (Double.isNaN(a)) {    return b;  }  if (Double.isNaN(b)) {    return a;  }  return Math.min(a,b);}  }
class C{  @LargeTest public void testCameraPairwiseScenario09() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MIN,WhiteBalance.AUTO,SceneMode.NIGHT,PictureSize.LARGE,Geotagging.OFF);}  }
class C{  private String checkPage(String value,String defaultValue){  if (ADMStringUtils.isBlank(value)) {    value=defaultValue;  }  if (!value.startsWith("/") && !value.startsWith("\\")) {    value="/" + value;  }  return value;}  }
class C{  void performOperation(BayesNet bayesNet,Instances instances,Operation oOperation) throws Exception {switch (oOperation.m_nOperation) {case Operation.OPERATION_ADD:    applyArcAddition(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);  if (bayesNet.getDebug()) {    System.out.print("Add " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);  }break;case Operation.OPERATION_DEL:applyArcDeletion(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);if (bayesNet.getDebug()) {System.out.print("Del " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);}break;case Operation.OPERATION_REVERSE:applyArcDeletion(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);applyArcAddition(bayesNet,oOperation.m_nTail,oOperation.m_nHead,instances);if (bayesNet.getDebug()) {System.out.print("Rev " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);}break;}}  }
class C{  public void initCacheListeners(CacheListener<K,V>[] newListeners){synchronized (this.regionAttributes) {    if (newListeners == null || newListeners.length == 0) {      this.regionAttributes.cacheListeners=null;    } else {      List<CacheListener<K,V>> nl=Arrays.asList(newListeners);      if (nl.contains(null)) {        throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_INITCACHELISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());      }      this.regionAttributes.cacheListeners=new ArrayList<CacheListener<K,V>>(nl);    }  }  this.regionAttributes.setHasCacheListeners(true);}  }
class C{  protected void autoScrollUp(){  int index=list.getSelectedIndex();  if (index > 0) {    list.setSelectedIndex(index - 1);    list.ensureIndexIsVisible(index - 1);  }}  }
class C{  public boolean hasProject(){  return hasExtension(Project.class);}  }
class C{  double tableValue(int mw,int nw){  int internalVal=mw & 0xFF;  double stepwidth=(double)0xFF / (metaTblValues.length - 1);  int pos=(int)(internalVal / stepwidth);  int ofs=(int)(internalVal % stepwidth);  int valBefore=metaTblValues[pos];  int valAfter=pos < metaTblValues.length - 1 ? metaTblValues[pos + 1] : valBefore;  return ((valBefore + (valAfter - valBefore) * ofs / stepwidth) + offset - nw) * factor;}  }
class C{  public DrawerBuilder withDisplayBelowStatusBar(boolean displayBelowStatusBar){  this.mDisplayBelowStatusBar=displayBelowStatusBar;  return this;}  }
class C{  private static View addFakeStatusBarView(Activity activity,int statusBarColor,int statusBarHeight){  Window window=activity.getWindow();  ViewGroup mDecorView=(ViewGroup)window.getDecorView();  View mStatusBarView=new View(activity);  FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,statusBarHeight);  layoutParams.gravity=Gravity.TOP;  mStatusBarView.setLayoutParams(layoutParams);  mStatusBarView.setBackgroundColor(statusBarColor);  mStatusBarView.setTag(TAG_FAKE_STATUS_BAR_VIEW);  mDecorView.addView(mStatusBarView);  return mStatusBarView;}  }
class C{  public Select<Model> groupBy(String groupBy){  this.groupBy=groupBy;  return this;}  }
class C{  boolean isEmpty(){  return mDescription.isEmpty() && mTypes.isEmpty();}  }
class C{  public static float computeCompatibleScaling(DisplayMetrics dm,DisplayMetrics outDm){  final int width=dm.noncompatWidthPixels;  final int height=dm.noncompatHeightPixels;  int shortSize, longSize;  if (width < height) {    shortSize=width;    longSize=height;  } else {    shortSize=height;    longSize=width;  }  int newShortSize=(int)(DEFAULT_NORMAL_SHORT_DIMENSION * dm.density + 0.5f);  float aspect=((float)longSize) / shortSize;  if (aspect > MAXIMUM_ASPECT_RATIO) {    aspect=MAXIMUM_ASPECT_RATIO;  }  int newLongSize=(int)(newShortSize * aspect + 0.5f);  int newWidth, newHeight;  if (width < height) {    newWidth=newShortSize;    newHeight=newLongSize;  } else {    newWidth=newLongSize;    newHeight=newShortSize;  }  float sw=width / (float)newWidth;  float sh=height / (float)newHeight;  float scale=sw < sh ? sw : sh;  if (scale < 1) {    scale=1;  }  if (outDm != null) {    outDm.widthPixels=newWidth;    outDm.heightPixels=newHeight;  }  return scale;}  }
class C{  public double put(long key,double value){  double previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public XMLDecoder(InputStream inputStream,Object owner,ExceptionListener listener){  this(inputStream,owner,listener,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_ACTIVATION___TRACECASE_ACT_NAME_1:    return TRACECASE_ACT_NAME_1_EDEFAULT == null ? tracecase_act_name_1 != null : !TRACECASE_ACT_NAME_1_EDEFAULT.equals(tracecase_act_name_1);case UmplePackage.TRACE_CASE_ACTIVATION___ANONYMOUS_TRACE_CASE_ACTIVATION_11:  return anonymous_traceCaseActivation_1_1 != null && !anonymous_traceCaseActivation_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static LocationEntity build(Location l){  LocationEntity entity=new LocationEntity();  entity.location=l.location;  entity.realLocation=l.realLocation;  return entity;}  }
class C{  @VisibleForTesting boolean shouldRound(){  return mIsCircle || mRadiiNonZero || mBorderWidth > 0;}  }
class C{  public boolean isInverted(){  return mInverted;}  }
class C{  public String readSystemStat(){  RandomAccessFile reader=null;  String load=null;  try {    reader=new RandomAccessFile("/proc/stat","r");    load=reader.readLine();  } catch (  IOException ex) {    ex.printStackTrace();  } finally {  }  return load;}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public Minutes plus(int minutes){  if (minutes == 0) {    return this;  }  return Minutes.minutes(FieldUtils.safeAdd(getValue(),minutes));}  }
class C{  private void init(int userConnected,int parentId,boolean isLdap){  _id=Defs.NULL_ID;  _parentId=parentId;  _isLdap=isLdap;  _userConnected=userConnected;  _name="";  _tblPrefix="";  _remarks="";  _flags=ArchiveDefs.ARCH_FLAG_NONE;  _type=ArchiveDefs.ARCH_TYPE_STANDARD;  _accessType=ArchiveDefs.ACCESS_TYPE_PROTECTED;  _updaterId=DbDataType.NULL_LONG_INTEGER;  _creatorId=_userConnected;  _updateDate=DbDataType.NULL_DATE_TIME;  _acsId=Defs.NULL_ID;  _adminUserId=_userConnected;  _adminUsers=new BasicUsersImpl();  _flds=new ArchiveFldsImpl();  _idxs=new ArchiveIdxsImpl();  _misc=new ArchiveMiscImpl("",ArchiveVolListType.NONE,Defs.NULL_ID);}  }
class C{  public FlushConsolidationHandler(){  this(256);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int size(){  return m_heap[0].index;}  }
class C{  public Overlay disableClickThroughHole(boolean yesNo){  mDisableClickThroughHole=yesNo;  return this;}  }
class C{  private void decode(ShareCaptureActivity activity,byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(data,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    log.debug("Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),HandlerMsg.MSG_DECODE_SUCCEEDED,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),HandlerMsg.MSG_DECODE_FAILED);    message.sendToTarget();  }}  }
class C{  @Override public void run(){synchronized (this) {    pending=null;  }  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    CommitUpdateCommand command=new CommitUpdateCommand(req,false);    command.openSearcher=openSearcher;    command.waitSearcher=waitSearcher;    command.softCommit=softCommit;    autoCommitCount.incrementAndGet();    core.getUpdateHandler().commit(command);  } catch (  Exception e) {    SolrException.log(log,"auto commit error...",e);  } finally {    req.close();  }}  }
class C{  public String toString(){  return taskName + " " + rScript+ " "+ frequency+ " "+ time+ " "+ owner+ " "+ emailOnSuccess+ " "+ new Date(nextRunTime).toString();}  }
class C{  public static int signum(int i){  return (i == 0 ? 0 : (i < 0 ? -1 : 1));}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public Label(){}  }
class C{  public boolean hasEmbeddability(){  return hasExtension(Embeddability.class);}  }
class C{  EditorHistoryManager(final Project project,final UISettings uiSettings){  super(project);  uiSettings.addUISettingsListener(new MyUISettingsListener(),project);}  }
class C{  public static TransactionID createTransactionID(StunStack stunStack,byte[] transactionID){  StunClientTransaction cliTran=stunStack.getClientTransaction(transactionID);  if (cliTran != null)   return cliTran.getTransactionID();  StunServerTransaction serTran=stunStack.getServerTransaction(transactionID);  if (serTran != null)   return serTran.getTransactionID();  TransactionID tid=null;  tid=new TransactionID((transactionID.length == 16));  System.arraycopy(transactionID,0,tid.transactionID,0,tid.transactionID.length);  tid.hashCode=(tid.transactionID[3] << 24 & 0xFF000000) | (tid.transactionID[2] << 16 & 0x00FF0000) | (tid.transactionID[1] << 8 & 0x0000FF00)| (tid.transactionID[0] & 0x000000FF);  return tid;}  }
class C{  public void removeLocalAddress(String address){  this.localAddresses.remove(address);}  }
class C{  private DBObject saveWords(final Pattern pattern){  final BasicDBList list=new BasicDBList();  for (int i=0; i < pattern.getWords().size(); i++) {    final WordToken w=pattern.getWords(i);    final BasicDBObject o=new BasicDBObject().append("text",w.getCoveredText()).append("pos",w.getPartOfSpeech());    if (w.getLemmas() != null && w.getLemmas().size() >= 1) {      o.put("lemma",w.getLemmas(0).getLemmaForm());    }    list.add(o);  }  return list;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}/subPartition3Values/{subPartition3Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_PUT) public BusinessObjectDataAttribute updateBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName,@RequestBody BusinessObjectDataAttributeUpdateRequest request){  return businessObjectDataAttributeService.updateBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value),businessObjectDataVersion,businessObjectDataAttributeName),request);}  }
class C{  public SyncValueMessage(SyncValueMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }  this.responseTo=other.responseTo;}  }
class C{  public static void write(float latPoint,float lonPoint,int[] xypoints,int cMode,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeInt(xypoints.length);  for (int i=0; i < xypoints.length; i++) {    dos.writeInt(xypoints[i]);  }  dos.writeByte(cMode);  properties.write(dos);}  }
class C{  public String addAttribute(String typeUri,String value){  String alias=generateAlias();  _parameters.set(new Parameter("type." + alias,typeUri));  _parameters.set(new Parameter("value." + alias,value));  if (DEBUG)   _log.debug("Added new attribute to the AX payload; type: " + typeUri + " alias: "+ alias);  return alias;}  }
class C{  public SSX(double probability){  super();  this.probability=probability;}  }
class C{  @Override public DriverTask createVolumeMirror(List<VolumeMirror> list,StorageCapabilities storageCapabilities){  return mirrorHelper.createVolumeMirror(list);}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  CDATASection section=(CDATASection)m_currentNode.getLastChild();  section.appendData(s);}  }
class C{  public static Input.Tok endTok(Token token){  for (int i=token.getToksAfter().size() - 1; i >= 0; i--) {    Input.Tok tok=token.getToksAfter().get(i);    if (tok.getIndex() >= 0) {      return tok;    }  }  return token.getTok();}  }
class C{  public final void requestInteg(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   integState=value;}  }
class C{  protected static int rule(CSSValue v){  return (((CSSPrimitiveValue)v).getStringValue().charAt(0) == 'n') ? GeneralPath.WIND_NON_ZERO : GeneralPath.WIND_EVEN_ODD;}  }
class C{  static SchemaField create(String name,FieldType ft,int props,String defValue){  return new SchemaField(name,ft,props,defValue);}  }
class C{  public Authorization(@Nonnull ClientIdentity identity,JsonTray parent,@Nonnull UserRoles urs){  Log.getLog().debug("new authorization");  this.parent=parent;  this.accounting=null;  this.identity=identity;  this.userRoles=urs;  if (parent != null) {    if (parent.has(identity.toString())) {      json=parent.getJSONObject(identity.toString());    } else {      json=new JSONObject();      parent.put(identity.toString(),json,identity.isPersistent());    }  } else   json=new JSONObject();  if (json.has("userRole") && userRoles.has(json.getString("userRole"))) {    Log.getLog().debug("user role " + json.getString("userRole") + " valid");    userRole=userRoles.getUserRoleFromString(json.getString("userRole"));    Log.getLog().debug("user role: " + userRole.getName());  } else {    Log.getLog().debug("user role invalid");    userRole=userRoles.getDefaultUserRole(BaseUserRole.ANONYMOUS);    json.put("userRole",userRole.getName());    Log.getLog().debug("user role: " + userRole.getName());  }  if (!json.has("permissions"))   json.put("permissions",new JSONObject());  permissions=json.getJSONObject("permissions");}  }
class C{  public static void saveAsASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IOException("The output directory does not exist and could not be created.");  }  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  private void liveOutAtBlock(){  if (!visitedBlocks.get(blockN.getIndex())) {    visitedBlocks.set(blockN.getIndex());    blockN.addLiveOut(regV);    ArrayList<SsaInsn> insns;    insns=blockN.getInsns();    statementIndex=insns.size() - 1;    nextFunction=NextFunction.LIVE_OUT_AT_STATEMENT;  }}  }
class C{  public BlockData(int fullId){  this.type=Photon.getGameRegistry().getRegisteredBlock(fullId >> 4);  this.metadata=(byte)(fullId & 15);}  }
class C{  public void showPieceJail(){  for (  PieceJailChessSquare pieceJailSquare : pieceJailSquares) {    if (pieceJailSquare != null) {      pieceJailSquare.setVisible(true);    }  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case OrientedPackage.COMPONENT:    return createComponent();case OrientedPackage.PORT:  return createPort();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public NoninvertibleTransformException(String s){  super(s);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @PostConstruct public void init(){  super.init(dsTypeFilterHeader,dsTypeFilterButtons,dsTypeFilterButtonClick);  eventbus.subscribe(this);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 2 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public AuthResponse renewSelf() throws VaultException {  return renewSelf(-1);}  }
class C{  private void refitText(String text,int textWidth){  if (textWidth <= 0 || text == null || text.length() == 0)   return;  int targetWidth=(textWidth - this.getPaddingLeft() - this.getPaddingRight()) / 3;  this.setTextSize(TypedValue.COMPLEX_UNIT_PX,targetWidth);}  }
class C{  public void add(final ExchangeRate rate){  add(rate,Date.minDate(),Date.maxDate());}  }
class C{  @Override protected boolean onRequestFocusInDescendants(int direction,Rect previouslyFocusedRect){  int index;  int increment;  int end;  int count=getChildCount();  if ((direction & FOCUS_FORWARD) != 0) {    index=0;    increment=1;    end=count;  } else {    index=count - 1;    increment=-1;    end=-1;  }  for (int i=index; i != end; i+=increment) {    View child=getChildAt(i);    if (child.getVisibility() == VISIBLE) {      ItemInfo ii=infoForChild(child);      if (ii != null && ii.position == currentItem) {        if (child.requestFocus(direction,previouslyFocusedRect)) {          return true;        }      }    }  }  return false;}  }
class C{  public void scrollComponentToVisible(Component c){  initFocused();  Container parent=c.getParent();  while (parent != null) {    if (parent.isScrollable()) {      if (parent == this) {        if (getContentPane().isScrollable()) {          getContentPane().scrollComponentToVisible(c);        }      } else {        parent.scrollComponentToVisible(c);      }      return;    }    parent=parent.getParent();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.217 -0500",hash_original_method="66FF7F77E84125B131D0D04138A3FE42",hash_generated_method="CB4C0906D3BAE20BA6638CD5E104CC6B") public void stop(){synchronized (eventMutex) {    if (this.refCount > 0)     this.refCount--;    if (this.refCount == 0) {      isStopped=true;      eventMutex.notify();    }  }}  }
class C{  public void removeListener(mxIEventListener listener,String eventName){  eventSource.removeListener(listener,eventName);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean contains(final byte[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  public void addSeed(HttpMessage msg){  URI uri=msg.getRequestHeader().getURI();  addSeed(uri);}  }
class C{  public void clear(){  oredCriteria.clear();}  }
class C{  String internalsprintf(final Object s){  final String s2;  if (conversionCharacter == 's' || conversionCharacter == 'S') {    s2=printSFormat(s.toString());  } else {    throw new IllegalArgumentException("Cannot format a String with a format using" + " a " + conversionCharacter + " conversion character.");  }  return s2;}  }
class C{  @NotNull private RecipeWidget addRecipe(@NotNull RecipeDescriptor recipeDescriptor){  RecipeWidget recipe=new RecipeWidget(recipeDescriptor,resources);  recipe.setDelegate(this);  view.addRecipe(recipe);  recipesContainerPresenter.addRecipePanel(recipe);  recipes.put(recipe,recipeDescriptor);  return recipe;}  }
class C{  private boolean doesMatch(String pattern,int pp,String result,int rp){  for (; ; ) {    if (pp == pattern.length() && rp == result.length())     return true;    if (pp == pattern.length())     return false;    char pc=pattern.charAt(pp);    if (pc == '_') {      if (rp == result.length())       return false;      pp++;      rp++;    } else     if (pc == '%') {      if (pp == pattern.length() - 1) {        return true;      }      for (int sp=rp; sp < result.length(); sp++) {        if (doesMatch(pattern,pp + 1,result,sp)) {          return true;        }      }      return false;    } else {      if (rp == result.length())       return false;      if (pc != result.charAt(rp)) {        return false;      }      pp++;      rp++;    }  }}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.name+ "\n"+ this.n+ " // <- Total # rows\n";  for (int r=0; r < this.n; r++) {    for (int c=0; c < this.n; c++) {      s=s + this.getValue(r,c) + " ";    }    s=s + "\n";  }  return s;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  private void checkPlatformParameterConstraints(Subscription subscription,Product targetProduct,PlatformUser currentUser) throws SubscriptionMigrationException {  ParameterSet paramSet=targetProduct.getParameterSet();  if (paramSet == null || paramSet.getParameters() == null || paramSet.getParameters().isEmpty()) {    return;  }  for (  Parameter param : paramSet.getParameters()) {    ParameterDefinition def=param.getParameterDefinition();    if (def.getParameterType() == ParameterType.PLATFORM_PARAMETER && param.getValue() != null) {      String subscriptionId=subscription.getSubscriptionId();      if (PlatformParameterIdentifiers.NAMED_USER.equals(def.getParameterId())) {        int current=subscription.getUsageLicenses().size();        long max=param.getLongValue();        if (current > max) {          sessionCtx.setRollbackOnly();          SubscriptionMigrationException e=new SubscriptionMigrationException("Parameter check failed",Reason.PARAMETER_USERS,new Object[]{subscriptionId,String.valueOf(current),String.valueOf(max)});          LOG.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_MIGRATE_SUBSCRIPTION_AS_CHECK_PARAMETER,Long.toString(currentUser.getKey()),Long.toString(subscription.getKey()),Long.toString(subscription.getOrganizationKey()),def.getParameterId());          throw e;        }      } else       if (PlatformParameterIdentifiers.PERIOD.equals(def.getParameterId())) {        long usedTime=DateFactory.getInstance().getTransactionTime() - subscription.getActivationDate().longValue();        if (usedTime > param.getLongValue()) {          sessionCtx.setRollbackOnly();          SubscriptionMigrationException e=new SubscriptionMigrationException("Parameter check failed",Reason.PARAMETER_PERIOD,new Object[]{subscriptionId});          LOG.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_MIGRATE_SUBSCRIPTION_AS_CHECK_PARAMETER,Long.toString(currentUser.getKey()),Long.toString(subscription.getKey()),Long.toString(subscription.getOrganizationKey()),def.getParameterId());          throw e;        }      }    }  }}  }
class C{  public SummaryToolBar(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  initComponents();  GridBagLayout layout=new GridBagLayout();  setLayout(layout);  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.insets=new Insets(0,10,0,0);  gbc.weightx=1d;  gbc.fill=GridBagConstraints.HORIZONTAL;  layout.setConstraints(summaryField,gbc);}  }
class C{  public Builder(TweetUi tweetUi){  if (tweetUi == null) {    throw new IllegalArgumentException("TweetUi instance must not be null");  }  this.tweetUi=tweetUi;}  }
class C{  @Override public int proceduralInterval(){  return 1;}  }
class C{  public GammaFitnessFunction(int genomeLength,double alpha,double beta,int stateSize,boolean randomFittest){  GammaDistribution gamma=new GammaDistribution(beta,alpha);  fitness=new double[genomeLength][stateSize];  fittest=new byte[genomeLength];  int fitpos=0;  for (int i=0; i < genomeLength; i++) {    if (randomFittest) {      fitpos=MathUtils.nextInt(stateSize);    }    fitness[i][fitpos]=1.0;    fittest[i]=(byte)fitpos;    for (int j=0; j < stateSize; j++) {      if (j != fitpos) {        double prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;        while ((prob <= 0.0) || (prob >= 1.0)) {          prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;        }        fitness[i][j]=Math.max(0.0,1.0 - gamma.quantile(prob));      }    }  }}  }
class C{  public static int hash(boolean item){  return (item ? 1 : 0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ReflectiveOperationException(){}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  long time=System.currentTimeMillis();  request.getSession(true);  String url=getTargetURL(request);  if (!response.isCommitted())   response.sendRedirect(url);  response.flushBuffer();  log.fine("redirect - " + url);  saveClick(request,url);  log.fine(url + " - " + (System.currentTimeMillis() - time)+ "ms");}  }
class C{  public static void check(boolean cond,Object value){  if (!cond)   error(String.valueOf(value));}  }
class C{  private void showErrorMessage(String message){  Toast.makeText(getActivity().getApplicationContext(),message,Toast.LENGTH_LONG).show();  if (message.equals(getString(R.string.abelana_auth_error_message))) {    ((MainActivity)getActivity()).startGitkitActivity();  }}  }
class C{  static private HashSet<String> initThreePartTLDs(){  HashSet<String> set=new HashSet<String>();  for (  String multiPartTLD : multiPartTLDs) {    try {      if (multiPartTLD.matches("^" + tld3 + "$")) {        debugOut("adding \"" + multiPartTLD + "\"");        set.add(multiPartTLD);      }    } catch (    Exception ex) {      debugOut(ex);    }  }  debugOut("initThreePartTLDs size=" + set.size());  return set;}  }
class C{  public boolean isDefinitelyWritable(int column) throws SQLException {  return isWritable(column);}  }
class C{  public DeviceAutomator pressDPadRight(){  mDevice.pressDPadRight();  return this;}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public EventStoreBuilder failOnNoServerResponseEnabled(){  settingsBuilder.failOnNoServerResponse(true);  return this;}  }
class C{  public StatsCollectionEvent(String name,XYDataItem data){  this.name=name;  this.data=data;}  }
class C{  public static int compile(String[] args){  com.sun.tools.javac.main.Main compiler=new com.sun.tools.javac.main.Main("javac");  return compiler.compile(args).exitCode;}  }
class C{  public Polygon2D(float[] xpoints,float[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  System.arraycopy(xpoints,0,this.xpoints,0,npoints);  System.arraycopy(ypoints,0,this.ypoints,0,npoints);  calculatePath();}  }
class C{  @Override protected void onVisibilityChanged(View changedView,int visibility){  super.onVisibilityChanged(changedView,visibility);  if (visibility != View.VISIBLE)   return;  refresh();}  }
class C{  public static void storePreference(Context context,String value,String appKey,String prefName){  SharedPreferences prefs=context.getSharedPreferences(appKey,Context.MODE_PRIVATE);  String prefValues=prefs.getString(prefName,"[]");  JSONArray prefValuesArray;  try {    prefValuesArray=new JSONArray(prefValues);    LinkedList<String> prefValuesList=new LinkedList<String>();    for (int i=0; i < prefValuesArray.length(); i++) {      String prefValue=prefValuesArray.getString(i);      if (!prefValue.equals(value))       prefValuesList.addLast(prefValue);    }    prefValuesList.addFirst(value);    if (prefValuesList.size() > 20)     prefValuesList.removeLast();    prefValuesArray=new JSONArray();    for (    String s : prefValuesList) {      prefValuesArray.put(s);    }    prefValues=prefValuesArray.toString();    SharedPreferences.Editor ed=prefs.edit();    ed.putString(prefName,prefValues);    ed.commit();  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  private void teleportToAdminLocation(){  RPAction action=new RPAction();  action.put("type","teleportto");  action.put("target","Skye");  client.send(action);}  }
class C{  public void addSources(Set<Fact> predecessors){  for (  Fact predecessor : predecessors) {    addSource(predecessor);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.956 -0500",hash_original_method="8F401E92E0D1BB2B74D2C1DBF9D3F65E",hash_generated_method="20F53E70F695FB0DB8855F1E77E63F38") protected void _connectAction_() throws IOException {  for (int ii=0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++) {    _doResponse[ii]=0;    _willResponse[ii]=0;    _options[ii]=0;    if (optionHandlers[ii] != null) {      optionHandlers[ii].setDo(false);      optionHandlers[ii].setWill(false);    }  }  super._connectAction_();  _input_=new BufferedInputStream(_input_);  _output_=new BufferedOutputStream(_output_);  for (int ii=0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++) {    if (optionHandlers[ii] != null) {      if (optionHandlers[ii].getInitLocal()) {        try {          _requestWill(optionHandlers[ii].getOptionCode());        } catch (        IOException e) {          System.err.println("Exception while initializing option: " + e.getMessage());        }      }      if (optionHandlers[ii].getInitRemote()) {        try {          _requestDo(optionHandlers[ii].getOptionCode());        } catch (        IOException e) {          System.err.println("Exception while initializing option: " + e.getMessage());        }      }    }  }}  }
