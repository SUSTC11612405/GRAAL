class C{  @Override public boolean performAtomicTransaction() throws AdeException {  try {    if (mySQL)     this.execute("LOCK TABLES " + SOURCES_TABLE + " WRITE, "+ GROUPS_TABLE+ " WRITE, "+ RULES_TABLE+ " WRITE, "+ MANAGED_SYSTEMS_TABLE+ " WRITE, "+ ANALYSIS_GROUPS_TIME_TABLE+ " WRITE, "+ MODELS_TABLE+ " WRITE"); else     this.execute("LOCK TABLE " + SOURCES_TABLE + " IN EXCLUSIVE MODE");    List<Group> currentGroups=this.getGroupListAtomic();    List<Group> groupsToAdd=getGroupsToAdd(currentGroups);    List<Group> groupsToDelete=getGroupsToDelete(currentGroups);    List<Group> groupsToUpdate=getGroupsToUpdate(currentGroups,groupsToAdd);    List<String> batchList=new ArrayList<String>();    deleteGroups(batchList,groupsToDelete);    addGroups(batchList,groupsToAdd);    updateGroups(batchList,groupsToUpdate);    executeBatch(batchList);    batchList.clear();    currentGroups.clear();    currentGroups=this.getGroupListAtomic();    updateGroupSources(batchList,currentGroups);    updateTimestamp(batchList);    updateModelsTable(batchList,groupsToDelete);    executeBatch(batchList);    if (mySQL)     this.execute("UNLOCK TABLES");  } catch (  IllegalArgumentException ex) {    this.illegalArgEx=ex;    return false;  }catch (  SQLException e) {    logger.error("An error occurred while trying to update group table");    throw new AdeInternalException("An error occurred while " + "trying to update sources table",e);  }  return true;}  }
class C{  @Override protected void tearDown() throws Exception {  super.tearDown();  m_OptionTester=null;}  }
class C{  public static LayerDefinition decode(final InputStream in) throws IOException, ClassNotFoundException {  LayerDefinition layer=new LayerDefinition(0,0);  final InflaterInputStream szlib=new InflaterInputStream(in,new Inflater());  final InputSerializer ser=new InputSerializer(szlib);  layer=(LayerDefinition)ser.readObject(layer);  layer.build();  return layer;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,short[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  private static void checkAndSet(final Configuration conf,final String useIndexField,final boolean indexSupported){  requireNonNull(conf);  requireNonNull(useIndexField);  final Optional<String> useIndexStr=Optional.fromNullable(conf.get(useIndexField));  if (!useIndexStr.isPresent()) {    log.info("No Rya Client configuration was provided for the " + useIndexField + " index, so it is being defaulted to "+ indexSupported);    conf.setBoolean(useIndexField,indexSupported);    return;  }  final boolean useIndex=Boolean.parseBoolean(useIndexStr.get());  if (useIndex && !indexSupported) {    log.warn("The Rya Client indicates it wants to use a secondary index that the Rya Instance does not support. " + "This is not allowed, so the index will be turned off. Index Configuration Field: " + useIndexField);    conf.setBoolean(useIndexField,false);  }}  }
class C{  protected <M extends Member>M[][] array(M[][] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _index=0;    _resetIndex=false;  }  for (int i=0; i < arrayMember.length; i++) {    array(arrayMember[i]);  }  _resetIndex=resetIndexSaved;  return (M[][])arrayMember;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public SqlOperation match(String inputStatement){  String statement=prefixBuilder.build(inputStatement);  String prefix=statement.substring(0,Math.min(statement.length(),15)).toUpperCase();  Matcher m;  if (prefix.startsWith("INSERT")) {    m=insert.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.INSERT,m.group(1),m.group(2),false);    }  } else   if (prefix.startsWith("REPLACE")) {    m=replace.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.REPLACE,m.group(1),m.group(2),false);    }  } else   if (prefix.startsWith("UPDATE")) {    m=update.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.UPDATE,m.group(1),m.group(2),false);    }  } else   if (prefix.startsWith("DELETE")) {    m=delete.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.DELETE,m.group(1),m.group(2),false);    }  } else   if (prefix.startsWith("COMMIT")) {    m=commit.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TRANSACTION,SqlOperation.COMMIT,null,null);    }  } else   if (prefix.startsWith("ROLLBACK")) {    m=rollback.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TRANSACTION,SqlOperation.ROLLBACK,null,null);    }  } else   if (prefix.startsWith("BEGIN") || prefix.startsWith("START")) {    m=beginEnd.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.BLOCK,SqlOperation.BEGIN_END,null,null,false);    }    m=begin.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TRANSACTION,SqlOperation.BEGIN,null,null,false);    }  } else   if (prefix.startsWith("SELECT")) {    m=select.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.SELECT,null,null,false);    }  } else   if (prefix.startsWith("SET")) {    m=set.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.SESSION,SqlOperation.SET,null,null,false);    }  } else   if (prefix.startsWith("CREATE")) {    m=createDb.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.SCHEMA,SqlOperation.CREATE,m.group(1),null);    }    m=createTable.matcher(statement);    if (m.find()) {      if (m.group(1) == null) {        return new SqlOperation(SqlOperation.TABLE,SqlOperation.CREATE,m.group(2),m.group(3));      } else {        return new SqlOperation(SqlOperation.TABLE,SqlOperation.CREATE,m.group(2),m.group(3),false);      }    }    m=createIndex.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.INDEX,SqlOperation.CREATE,m.group(1),m.group(2));    }    m=createView.matcher(statement);    if (m.find()) {      SqlOperation createView=new SqlOperation(SqlOperation.VIEW,SqlOperation.CREATE,m.group(1),m.group(2));      return createView;    }    m=createProcedure.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.PROCEDURE,SqlOperation.CREATE,m.group(1),m.group(2));    }    m=createFunction.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.FUNCTION,SqlOperation.CREATE,m.group(1),m.group(2));    }  } else   if (prefix.startsWith("DROP")) {    m=dropDb.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.SCHEMA,SqlOperation.DROP,m.group(1),null);    }    m=dropTable.matcher(statement);    if (m.find()) {      String command=m.group(1);      if (logger.isDebugEnabled())       logger.debug("Command is " + command);      Matcher metadata=dropTableMdata.matcher(statement);      if (metadata.find()) {        if (logger.isDebugEnabled())         logger.debug("Found TUNGSTEN metadata");        statement=command + statement.substring(statement.indexOf(",",statement.indexOf("TUNGSTEN_INFO")) + 1);        if (logger.isDebugEnabled())         logger.debug("Analyzing statement :" + statement);        m.reset(statement);        m.find();      }      if (logger.isDebugEnabled()) {        logger.debug("Command " + command + " for table : "+ m.group(2)+ " "+ m.group(3));      }      if (m.group(2) == null)       return new SqlOperation(command,SqlOperation.TABLE,SqlOperation.DROP,m.group(3),m.group(4)); else       return new SqlOperation(command,SqlOperation.TABLE,SqlOperation.DROP,m.group(3),m.group(4),false);    }    m=dropView.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.VIEW,SqlOperation.DROP,m.group(1),m.group(2));    }    m=dropIndex.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.INDEX,SqlOperation.DROP,m.group(1),m.group(2));    }    m=dropProcedure.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.PROCEDURE,SqlOperation.DROP,m.group(1),m.group(2));    }    m=dropProcedure.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.PROCEDURE,SqlOperation.DROP,m.group(1),m.group(2));    }  } else   if (prefix.startsWith("TRUNCATE")) {    m=truncate.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.TRUNCATE,m.group(1),m.group(2));    }  } else   if (prefix.startsWith("LOAD")) {    m=loadData.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.LOAD_DATA,m.group(1),m.group(2),false);    }  } else   if (prefix.startsWith("ALTER")) {    m=alter.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.TABLE,SqlOperation.ALTER,m.group(1),m.group(2));    }  } else   if (prefix.startsWith("RENAME")) {    m=rename.matcher(statement);    if (m.find()) {      SqlOperation operation=new SqlOperation(SqlOperation.TABLE,SqlOperation.RENAME,m.group(1),m.group(2));      operation.addDatabaseObject(m.group(3),m.group(4));      if (m.group(5) != null) {        Matcher matcher=renameListPtrn.matcher(m.group(5));        while (matcher.matches()) {          operation.addDatabaseObject(matcher.group(1),matcher.group(2));          operation.addDatabaseObject(matcher.group(3),matcher.group(4));          if (matcher.group(5) != null)           matcher.reset(matcher.group(5)); else           break;        }      }      return operation;    }  } else   if (prefix.startsWith("FLUSH")) {    m=flushTables.matcher(statement);    if (m.find()) {      return new SqlOperation(SqlOperation.DBMS,SqlOperation.FLUSH_TABLES,null,null);    }  }  SqlOperation unrecognized=new SqlOperation(SqlOperation.UNRECOGNIZED,SqlOperation.UNRECOGNIZED,null,null,false);  unrecognized.setBidiUnsafe(true);  if (logger.isDebugEnabled()) {    logger.debug("Unrecognized SQL statement: " + inputStatement);  }  return unrecognized;}  }
class C{  private void zkInit() throws Exception {  centerPanel.appendChild(centerLayout);  bPrint.addActionListener(this);  bExport.addActionListener(this);  bCancel.addActionListener(this);  bProcess.setEnabled(false);  bProcess.addActionListener(this);  lPaySelect.setText(Msg.translate(Env.getCtx(),"HR_PaySelection_ID"));  fPaySelect.addActionListener(this);  lBank.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  lPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fPaymentRule.addActionListener(this);  lDocumentNo.setText(Msg.translate(Env.getCtx(),"DocumentNo"));  fDocumentNo.getComponent().setIntegral(true);  lNoPayments.setText(Msg.getMsg(Env.getCtx(),"NoOfPayments"));  fNoPayments.setText("0");  lBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  fBalance.setReadWrite(false);  fBalance.getComponent().setIntegral(false);  lCurrency.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  southPanel.addButton(bExport);  southPanel.addButton(bPrint);  southPanel.addButton(bProcess);  Rows rows=centerLayout.newRows();  Row row=rows.newRow();  row.appendChild(lPaySelect.rightAlign());  row.appendChild(fPaySelect);  row=rows.newRow();  row.appendChild(lBank.rightAlign());  row.appendChild(fBank);  row.appendChild(lBalance.rightAlign());  row.appendChild(fBalance.getComponent());  row=rows.newRow();  row.appendChild(lPaymentRule.rightAlign());  row.appendChild(fPaymentRule);  row.appendChild(lCurrency.rightAlign());  row.appendChild(fCurrency);  row=rows.newRow();  row.appendChild(lDocumentNo.rightAlign());  row.appendChild(fDocumentNo.getComponent());  row.appendChild(lNoPayments.rightAlign());  row.appendChild(fNoPayments);  southPanel.getButton(ConfirmPanel.A_OK).setVisible(false);}  }
class C{  public JCheckBoxMenuItem(Action a){  this();  setAction(a);}  }
class C{  protected VariableBindingImpl(){  super();}  }
class C{  public static GeneralPath cardinalSpline(GeneralPath p,float pts[],float slack,boolean closed,float tx,float ty){  int npoints=0;  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;  return cardinalSpline(p,pts,0,npoints / 2,slack,closed,tx,ty);}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  public NestableRuntimeException(){  super();}  }
class C{  public boolean isResolved(){  return (link != null) && (event != null);}  }
class C{  public static DecodeResult decode(byte[] data,PGPPrivateKey key) throws IOException, PGPException {  checkNotNull(data,"data");  Ghostryde ghost=new Ghostryde(1024 * 64);  ByteArrayInputStream dataStream=new ByteArrayInputStream(data);  ByteArrayOutputStream output=new ByteArrayOutputStream();  String name;  DateTime modified;  try (Decryptor decryptor=ghost.openDecryptor(dataStream,key);Decompressor decompressor=ghost.openDecompressor(decryptor);Input input=ghost.openInput(decompressor)){    name=input.getName();    modified=input.getModified();    ByteStreams.copy(input,output);  }   return new DecodeResult(output.toByteArray(),name,modified);}  }
class C{  public Object[] auditParameters(){  return new Object[]{getLabel(),getVcenter(),getTenant(),getId()};}  }
class C{  public void end(String namespace,String name){  UIComponent uic=(UIComponent)digester.peek();  if (uic instanceof UIForm) {    root=(UIComponent)digester.peek(digester.getCount() - 1);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weightsD;  double[] weightsI;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double sigmaI=0;  double recipRoot2PiTimesSigmaD;  double recipRoot2PiTimesSigmaI;  double twoSigmaSqrD;  double twoSigmaSqrI;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigmaI=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if (sigmaI < 0.001) {    sigmaI=0.001;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    recipRoot2PiTimesSigmaI=1 / (Math.sqrt(2 * Math.PI) * sigmaI);    twoSigmaSqrI=2 * sigmaI * sigmaI;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weightsD=new double[numPixelsInFilter];    weightsI=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weightsD[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              weight=recipRoot2PiTimesSigmaI * Math.exp(-1 * ((zN - z) * (zN - z)) / twoSigmaSqrI);              weight=weightsD[a] * weight;              weightsI[a]=weight;              sum+=weight;            }          }          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              zFinal+=weightsI[a] * zN / sum;            }          }          outputFile.setValue(row,col,zFinal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean assignToNearestCluster(Relation<DiscreteUncertainObject> relation,List<double[]> means,List<? extends ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] varsum){  assert (k == means.size());  boolean changed=false;  Arrays.fill(varsum,0.);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double mindist=Double.POSITIVE_INFINITY;    DiscreteUncertainObject fv=relation.get(iditer);    int minIndex=0;    for (int i=0; i < k; i++) {      double dist=getExpectedRepDistance(DoubleVector.wrap(means.get(i)),fv);      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    varsum[minIndex]+=mindist;    changed|=updateAssignment(iditer,clusters,assignment,minIndex);  }  return changed;}  }
class C{  public ArrayList<byte[]> encodeBlindedItems(){  ArrayList<byte[]> r=new ArrayList<byte[]>(blindedItems.size());  for (  BigInteger i : blindedItems) {    r.add(i.toByteArray());  }  return r;}  }
class C{  public void destroy(){  try {    raf.close();  } catch (  IOException e) {    log.error(e,e);  }  if (!file.delete())   log.warn("Could not delete file: " + file);}  }
class C{  public void applyRenderingHints(Graphics2D g2){  g2.setRenderingHints(getRenderingHints());}  }
class C{  private URI fixUri(URI r){  if (r.stringValue().contains("ontology-0.0.1")) {    r=new URIImpl(r.stringValue().replace("ontology-0.0.1","ontology"));  }  if (r.stringValue().contains("ontology-beta")) {    r=new URIImpl(r.stringValue().replace("ontology-beta","ontology"));  }  if (r.stringValue().startsWith(Ontology.OLD_NAMESPACE)) {    r=new URIImpl(r.stringValue().replace(Ontology.OLD_NAMESPACE,Ontology.NAMESPACE));  }  String fixed=StringUtils.replaceEach(r.stringValue(),new String[]{"\n","|","\\","{","}","`","^"},new String[]{"","%7C","%5C","%7B","%7D","%60","%5E"});  if (!fixed.equals(r.stringValue())) {    r=new URIImpl(fixed);  }  return r;}  }
class C{  public static void normalise(double[][] matrix){  double[] means=means(matrix);  double[] stds=stdDevs(matrix,means);  boolean[] nonZeroStds=new boolean[stds.length];  for (int c=0; c < matrix[0].length; c++) {    nonZeroStds[c]=!Double.isInfinite(1.0 / stds[c]);  }  for (int r=0; r < matrix.length; r++) {    for (int c=0; c < matrix[r].length; c++) {      matrix[r][c]=matrix[r][c] - means[c];      if (nonZeroStds[c]) {        matrix[r][c]/=stds[c];      }    }  }}  }
class C{  private static String toStringBits_0_32_bitPosAlreadyChecked(int bitSize,int bits,int firstBitPos,int lastBitPosExcl,boolean bigEndian,boolean padding){  if (ASSERTIONS)   assert ((bitSize >= 0) && (bitSize <= 32));  final int bitSizeM1=bitSize - 1;  final int lastBitPos=lastBitPosExcl - 1;  if (padding) {    final int nbrOfChars=bitSize;    final char[] chars=new char[nbrOfChars];    int bitIndex=bitSizeM1;    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      while (bitIndex > lastBitIndex) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitIndex) {        chars[bitSizeM1 - bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }    } else {      while (bitIndex > lastBitPos) {        chars[bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitPos) {        chars[bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitIndex]='_';        --bitIndex;      }    }    return new String(chars);  } else {    final int nbrOfChars=(lastBitPosExcl - firstBitPos);    final char[] chars=new char[nbrOfChars];    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      int bitIndex=lastBitIndex;      while (bitIndex >= firstBitIndex) {        chars[lastBitIndex - bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }    } else {      int bitIndex=lastBitPos;      while (bitIndex >= firstBitPos) {        chars[bitIndex - firstBitPos]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }    }    return new String(chars);  }}  }
class C{  public final void deleteWithMissing(int attIndex){  FastVector newInstances=new FastVector(numInstances());  for (int i=0; i < numInstances(); i++) {    if (!instance(i).isMissing(attIndex)) {      newInstances.addElement(instance(i));    }  }  m_Instances=newInstances;}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public SegmentEndpoint(final GeoPoint point){  this.point=point;  this.circlePlane=null;  this.cutoffPlanes=null;  this.notablePoints=null;}  }
class C{  public boolean valid(){  return localNodeId != null;}  }
class C{  public StringBuilder(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.258 -0500",hash_original_method="23EDAE0C7E13C4B3F88052C2DB8B64F6",hash_generated_method="42E7C75D85E2C3704A1ADD32430A0AF4") public boolean verify(PublicKey pubKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  Signature sig;  try {    if (provider == null) {      sig=Signature.getInstance(getSignatureName(sigAlgId));    } else {      sig=Signature.getInstance(getSignatureName(sigAlgId),provider);    }  } catch (  NoSuchAlgorithmException e) {    if (oids.get(sigAlgId.getObjectId()) != null) {      String signatureAlgorithm=(String)oids.get(sigAlgId.getObjectId());      if (provider == null) {        sig=Signature.getInstance(signatureAlgorithm);      } else {        sig=Signature.getInstance(signatureAlgorithm,provider);      }    } else {      throw e;    }  }  setSignatureParameters(sig,sigAlgId.getParameters());  sig.initVerify(pubKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encodable.DER));  } catch (  Exception e) {    throw new SignatureException("exception encoding TBS cert request - " + e);  }  return sig.verify(sigBits.getBytes());}  }
class C{  private JSONObject checkApi(JSONObject response) throws RetryableException {  Object error=response.get("error");  if (error != null) {    throw new RetryableException("Error result from Mediawiki:  " + error);  }  return response;}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  if (this.size() != that.size())   return false;  ListIterator myIterator=this.listIterator();  while (myIterator.hasNext()) {    Object myobj=myIterator.next();    ListIterator hisIterator=that.listIterator();    try {      while (true) {        Object hisobj=hisIterator.next();        if (myobj.equals(hisobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  ListIterator hisIterator=that.listIterator();  while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    myIterator=this.listIterator();    try {      while (true) {        Object myobj=myIterator.next();        if (hisobj.equals(myobj))         break;      }    } catch (    NoSuchElementException ex) {      return false;    }  }  return true;}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator c=this.c;  int minGallop=this.minGallop;{    outer:     while (true) {      int count1=0;      int count2=0;      do {        assert len1 > 1 && len2 > 0;        if (c.compare(a[cursor2],tmp[cursor1]) < 0) {          a[dest++]=a[cursor2++];          count2++;          count1=0;          if (--len2 == 0)           break outer;        } else {          a[dest++]=tmp[cursor1++];          count1++;          count2=0;          if (--len1 == 1)           break outer;        }      } while ((count1 | count2) < minGallop);      do {        assert len1 > 1 && len2 > 0;        count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);        if (count1 != 0) {          System.arraycopy(tmp,cursor1,a,dest,count1);          dest+=count1;          cursor1+=count1;          len1-=count1;          if (len1 <= 1)           break outer;        }        a[dest++]=a[cursor2++];        if (--len2 == 0)         break outer;        count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);        if (count2 != 0) {          System.arraycopy(a,cursor2,a,dest,count2);          dest+=count2;          cursor2+=count2;          len2-=count2;          if (len2 == 0)           break outer;        }        a[dest++]=tmp[cursor1++];        if (--len1 == 1)         break outer;        minGallop--;      } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);      if (minGallop < 0)       minGallop=0;      minGallop+=2;    }  }{    this.minGallop=minGallop < 1 ? 1 : minGallop;  }{    if (len1 == 1) {      assert len2 > 0;      System.arraycopy(a,cursor2,a,dest,len2);      a[dest + len2]=tmp[cursor1];    } else     if (len1 == 0) {    } else {      assert len2 == 0;      assert len1 > 1;      System.arraycopy(tmp,cursor1,a,dest,len1);    }  }}  }
class C{  public BasicHeaderElementIterator(final HeaderIterator headerIterator,final HeaderValueParser parser){  if (headerIterator == null) {    throw new IllegalArgumentException("Header iterator may not be null");  }  if (parser == null) {    throw new IllegalArgumentException("Parser may not be null");  }  this.headerIt=headerIterator;  this.parser=parser;}  }
class C{  public Long addRoomWithModerationExternalTypeAndTopBarOption(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,String externalRoomType,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean waitForRecording,Boolean allowRecording,Boolean hideTopBar){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.addExternalRoom(name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,null,externalRoomType,allowUserQuestions,isAudioOnly,false,"",waitForRecording,allowRecording,hideTopBar);    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  public void testConditionalAttributeRendering() throws Exception {  HtmlPage page=getPage("/faces/facelets/conditionalCCAttributeRendering.xhtml");  List<HtmlSpan> output=new ArrayList<HtmlSpan>(1);  getAllElementsOfGivenClass(page,output,HtmlSpan.class);  assertTrue(output.size() == 1);  HtmlSpan span=output.get(0);  assertTrue(span.getStyleAttribute().length() == 0);  HtmlSubmitInput add=(HtmlSubmitInput)getInputContainingGivenId(page,"form:add");  page=add.click();  output.clear();  getAllElementsOfGivenClass(page,output,HtmlSpan.class);  assertTrue(output.size() == 1);  span=output.get(0);  assertEquals("color:red",span.getStyleAttribute());  HtmlSubmitInput remove=(HtmlSubmitInput)getInputContainingGivenId(page,"form:remove");  page=remove.click();  output.clear();  getAllElementsOfGivenClass(page,output,HtmlSpan.class);  assertTrue(output.size() == 1);  span=output.get(0);  assertTrue(span.getStyleAttribute().length() == 0);}  }
class C{  public static String nl(){  return System.lineSeparator();}  }
class C{  public int g_korland(int a){switch (a) {case 1:    return 1;case 2:  return 2;}return -1;}  }
class C{  public SimpleQueries simpleQueries(){  return new SimpleQueries(m_connection);}  }
class C{  @Override public Page depage() throws Exception {  lock.writeLock().lock();  try {    if (!running) {      return null;    }    if (numberOfPages == 0) {      return null;    } else {      numberOfPages--;      final Page returnPage;      if (currentPageId == firstPageId) {        firstPageId=Integer.MAX_VALUE;        if (currentPage == null) {          throw new IllegalStateException("CurrentPage is null");        }        returnPage=currentPage;        returnPage.close(false);        currentPage=null;        if (returnPage.getNumberOfMessages() == 0) {          stopPaging();          returnPage.open();          returnPage.delete(null);          return null;        } else {          openNewPage();        }        return returnPage;      } else {        returnPage=createPage(firstPageId++);      }      return returnPage;    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static ContentValues[] values(long restaurantId,Place place){  List<OpeningHours> hours=place.getOpeningHours();  if (!hours.isEmpty()) {    int size=hours.size();    List<ContentValues> vals=new ArrayList<>(size * 2);    for (int i=0; i < size; i++) {      OpeningHours hour=hours.get(i);      DayOfWeek day=hour.getOpenDay();      int time=hour.getOpenTime();      if (day != null && time >= 0) {        vals.add(values(restaurantId,OPEN,day,time));      }      day=hour.getCloseDay();      time=hour.getCloseTime();      if (day != null && time >= 0) {        vals.add(values(restaurantId,CLOSE,day,time));      }    }    return vals.toArray(new ContentValues[vals.size()]);  }  return null;}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  @Deprecated public static <T>T executeWithBackOff(AbstractGoogleClientRequest<T> client,String error,Object... errorArgs) throws IOException, InterruptedException {  return executeWithBackOff(client,String.format(error,errorArgs));}  }
class C{  public void java_security_AccessController_getStackAccessControlContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastObject());}  }
class C{  public boolean isExpanded(TreePath path){  if (path != null) {    TreeStateNode lastNode=getNodeForPath(path,true,false);    return (lastNode != null && lastNode.isExpanded());  }  return false;}  }
class C{  static boolean filterPropertiesComment(StringBuffer stringBuffer){  if (stringBuffer.charAt(0) != '#') {    return false;  }  int commentLineIndex=stringBuffer.indexOf("\n");  if (commentLineIndex == -1) {    return false;  }  stringBuffer.delete(0,commentLineIndex + 1);  return true;}  }
class C{  public void refreshStorage(){  try {    HostStorageSystem storageSystem=getStorageSystem();    storageSystem.rescanAllHba();    storageSystem.rescanVmfs();  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public void reportAccumulatedBugs(){  for (  Map.Entry<BugInstance,Data> e : map.entrySet()) {    BugInstance bug=e.getKey();    Data d=e.getValue();    reportBug(bug,d);  }  clearBugs();}  }
class C{  private int decodeArg(String[] args,int i) throws ParseException {  String arg=args[i];  int argc=args.length;  if ("-help".equalsIgnoreCase(arg) || "-?".equals(arg)) {    helpFlag=true;    return 1;  } else   if ("-encoding".equals(arg) && (i < argc - 1)) {    if (encoding != null)     throw new ParseException(lookup("main.err.dupoption",arg));    encoding=args[++i];    return 2;  } else   if ("-debug".equals(arg)) {    debugFlag=true;    return 1;  } else   if ("-Xnosecurity".equals(arg)) {    System.err.println();    System.err.println(lookup("main.warn.nosecmgr"));    System.err.println();    noSecurityFlag=true;    return 1;  } else   if ("-XcmdLineTest".equals(arg)) {    cmdLineTestFlag=true;    return 1;  } else   if (arg.startsWith("-")) {    throw new ParseException(lookup("main.err.unsupportedopt",arg));  } else {    URL url=parseURL(arg);    if (url != null) {      urlList.addElement(url);      return 1;    }  }  return 0;}  }
class C{  public void addAll(final T[] values){  checkWidget();  if (values == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.elements == null) {    this.elements=new ArrayList<T>();  }  for (  final T value : values) {    this.elements.add(value);  }  refresh();}  }
class C{  public boolean equals(BST<E> tree){  if (tree.size != size)   return false;  return equals(root,tree.root);}  }
class C{  public void m(){}  }
class C{  private static boolean isTrackListEmpty(boolean isClick){  instrumentation.waitForIdleSync();  int trackNumber=SOLO.getCurrentViews(ListView.class).get(0).getCount();  if (trackNumber <= 0) {    return true;  }  View oneTrack=SOLO.getCurrentViews(ListView.class).get(0).getChildAt(0);  View aa=oneTrack.findViewById(R.id.list_item_name);  if (aa != null) {    trackName=(String)((TextView)oneTrack.findViewById(R.id.list_item_name)).getText();  }  if (isClick) {    SOLO.scrollUp();    SOLO.clickOnView(oneTrack);    SOLO.waitForText(trackListActivity.getString(R.string.track_detail_chart_tab));  }  return false;}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  private void assertRevenues(Node node,String expectedAmount,String expectedTotalAmount,String expectedMarketplaceRevenue) throws Exception {  assertNotNull(node);  assertAttribute(node,BillingShareResultXmlTags.ATTRIBUTE_NAME_AMOUNT,expectedAmount);  assertAttribute(node,BillingShareResultXmlTags.ATTRIBUTE_NAME_TOTAL_AMOUNT,expectedTotalAmount);  assertAttribute(node,BillingShareResultXmlTags.ATTRIBUTE_NAME_MARKETPLACE_REVENUE,expectedMarketplaceRevenue);}  }
class C{  public static boolean isDayLightSaving(long startTime,long endTime){  long offset=TimeZone.getDefault().getOffset(startTime) - TimeZone.getDefault().getOffset(endTime);  if (offset != 0) {    return true;  }  return false;}  }
class C{  protected void serializeEntityReference(EntityReference node,boolean bStart) throws SAXException {  if (bStart) {    EntityReference eref=node;    if ((fFeatures & ENTITIES) != 0) {      if ((fFeatures & WELLFORMED) != 0) {        isEntityReferneceWellFormed(node);      }      if ((fFeatures & NAMESPACES) != 0) {        checkUnboundPrefixInEntRef(node);      }    }    if (fLexicalHandler != null) {      fLexicalHandler.startEntity(eref.getNodeName());    }  } else {    EntityReference eref=node;    if (fLexicalHandler != null) {      fLexicalHandler.endEntity(eref.getNodeName());    }  }}  }
class C{  public void subirUDocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  List listaUDocs=getListaUDocs(request);  ActionErrors errors=comprobacionesBasicas(formulario,listaUDocs,SUBIR,request);  if (errors != null && !errors.isEmpty()) {    obtenerErrores(request,true).add(errors);    formulario.setUdocsSeleccionadas(null);  } else {    int[] posiciones=formulario.getNuevasPosUdocsSeleccionadas();    int posSelInicial=posiciones[0];    int posElementoAnterior=posSelInicial - 1;    int posSelFinal=posiciones[posiciones.length - 1];    UDocEnUiDepositoVO elementoAnterior=(UDocEnUiDepositoVO)listaUDocs.get(posElementoAnterior);    listaUDocs.remove(posElementoAnterior);    listaUDocs.add(posSelFinal,elementoAnterior);    for (int i=0; i < posiciones.length; i++) {      posiciones[i]--;    }    String[] udocsSeleccionadas=formulario.getUdocsSelect(formulario.getIdsUdocsSeleccionadas(),formulario.getPosUdocsSeleccionadas(),formulario.getSignaturasUdocSeleccionadas(),posiciones);    formulario.setUdocsSeleccionadas(udocsSeleccionadas);    setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.TRUE);  }  setReturnActionFordward(request,mappings.findForward("organizacion_udocs"));}  }
class C{  static public void assertGroupContains(ViewGroup parent,View child){  final int count=parent.getChildCount();  assertTrue("Child count should be >= 0",count >= 0);  boolean found=false;  for (int i=0; i < count; i++) {    if (parent.getChildAt(i) == child) {      if (!found) {        found=true;      } else {        assertTrue("child " + child + " is duplicated in parent",false);      }    }  }  assertTrue("group does not contain " + child,found);}  }
class C{  public static String[] addPrefix(String prefix,String[] array){  return addPrefixAndSuffix(prefix,"",array);}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points.get(i);      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value >= 0) {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) - renderer.getChartValuesSpacing(),paint,0);      } else {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      }    }  }}  }
class C{  public Boolean isLogonBannerCheckboxEnabled(){  return logonBannerCheckboxEnabled;}  }
class C{  public AsyncResult QueryNextAsync(RequestHeader RequestHeader,Boolean ReleaseContinuationPoint,byte[] ContinuationPoint){  QueryNextRequest req=new QueryNextRequest(RequestHeader,ReleaseContinuationPoint,ContinuationPoint);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean equals(UniqueString t){  return this.tok == t.tok;}  }
class C{  @Override public void updateDouble(int columnIndex,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + columnIndex + ", "+ x+ "d);");    }    update(columnIndex,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean contains(char c){  return this.nodes.containsKey(c);}  }
class C{  private static MediaCodecInfo selectCodec(String mimeType){  int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        return codecInfo;      }    }  }  return null;}  }
class C{  private static void mkdir(String outputDir){  if (new File(outputDir).mkdir()) {    log.info("Did not found outputRoot at " + outputDir + " Created it as a new directory.");  }}  }
class C{  public char next(){  if (getIndex() < end - 1) {    return aci.next();  } else {    return setIndex(end);  }}  }
class C{  public int read(byte bytes[],int offset,int length) throws IOException {  int r;  if ((r=in.read(bytes,offset,length)) == -1)   return r;  md5.Update(bytes,offset,r);  return r;}  }
class C{  public boolean mergeWithSlots(@Nonnull IInventory inv,@Nullable ItemStack stack){  if (stack == null)   return false;  boolean anythingMerged=false;  for (int i=0; i < inv.getSizeInventory(); ++i) {    if (stack.stackSize <= 0)     break;    anythingMerged|=mergeWithSlot(inv,stack,i);  }  return anythingMerged;}  }
class C{  public static SamReader makeSamReader(File file) throws IOException {  try {    return getSamReaderFactory().open(file);  } catch (  final RuntimeIOException e) {    throw (IOException)e.getCause();  }}  }
class C{  public PTProperty addProperty(final PTProperty property){  if (properties.contains(property)) {    throw new IllegalArgumentException("A property called '" + property.getName() + "' has already been declared.");  }  properties.add(property);  property.setParentTable(this);  return property;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double centreVal;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int k=0;  int kMinusOne=0;  int p=0;  double aLargeValue=Float.MAX_VALUE;  double currentNearestVal;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      k=Integer.parseInt(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (k < 3 || k > filterSizeX * filterSizeY) {    showFeedback("The k-value of the k-nearest mean filter is set inappropriately.");  }  kMinusOne--;  double[] nearestVals=new double[k];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    double[][] absDiffVals=new double[2][numPixelsInFilter];    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreVal=inputFile.getValue(row,col);        if (centreVal != noData) {          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              absDiffVals[0][a]=(z - centreVal) * (z - centreVal);              absDiffVals[1][a]=z;            } else {              absDiffVals[0][a]=noData;            }          }          n=0;          sum=0;          for (int m=0; m < k; m++) {            p=-1;            currentNearestVal=aLargeValue;            for (a=0; a < numPixelsInFilter; a++) {              if (absDiffVals[0][a] != noData && absDiffVals[0][a] < currentNearestVal) {                p=a;                currentNearestVal=absDiffVals[0][a];              }            }            if (p >= 0) {              n++;              sum+=absDiffVals[1][p];              absDiffVals[0][p]=noData;            }          }          if (n == k) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,centreVal);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void fireQueueSimulationBeforeCleanupEvent(){  MobsimBeforeCleanupEvent<Mobsim> event=new MobsimBeforeCleanupEvent<>(this.sim);  MobsimBeforeCleanupListener[] listener=this.listenerList.getListeners(MobsimBeforeCleanupListener.class);  for (  MobsimBeforeCleanupListener aListener : listener) {    aListener.notifyMobsimBeforeCleanup(event);  }}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  public static boolean isFinal(Element element){  return element.getModifiers().contains(Modifier.FINAL);}  }
class C{  public OutputLimitSpec(Double rate,String variableForRate,OutputLimitRateType rateType,OutputLimitLimitType displayLimit,ExprNode whenExpressionNode,List<OnTriggerSetAssignment> thenExpressions,List<ExprNode> crontabAtSchedule,ExprTimePeriod timePeriodExpr,ExprTimePeriod afterTimePeriodExpr,Integer afterNumberOfEvents,boolean andAfterTerminate,ExprNode andAfterTerminateExpr,List<OnTriggerSetAssignment> andAfterTerminateSetExpressions){  this.rate=rate;  this.displayLimit=displayLimit;  this.variableName=variableForRate;  this.rateType=rateType;  this.crontabAtSchedule=crontabAtSchedule;  this.whenExpressionNode=whenExpressionNode;  this.thenExpressions=thenExpressions;  this.timePeriodExpr=timePeriodExpr;  this.afterTimePeriodExpr=afterTimePeriodExpr;  this.afterNumberOfEvents=afterNumberOfEvents;  this.andAfterTerminate=andAfterTerminate;  this.andAfterTerminateExpr=andAfterTerminateExpr;  this.andAfterTerminateThenExpressions=andAfterTerminateSetExpressions;}  }
class C{  public void parse(Reader reader) throws IOException, SAXException {  try {    _xmlReader.setInput(reader);    parseAll();  } catch (  XMLStreamException e) {    if (e.getNestedException() instanceof IOException)     throw (IOException)e.getNestedException();    throw new SAXException(e.getMessage());  } finally {    _xmlReader.reset();  }}  }
class C{  public static String convertToPEM(final CertificateToken cert) throws DSSException {  final byte[] derCert=cert.getEncoded();  String pemCertPre=Base64.encodeBase64String(derCert);  final String pemCert=CERT_BEGIN + NEW_LINE + pemCertPre+ NEW_LINE+ CERT_END;  return pemCert;}  }
class C{  private void _serializeList(String name,List list,StringBuilder sb,Set<Object> done) throws ConverterException {  if (useShortcuts)   sb.append("[];"); else   sb.append("new Array();");  ListIterator it=list.listIterator();  int index=-1;  while (it.hasNext()) {    index=it.nextIndex();    sb.append(name + "[" + index+ "]=");    _serialize(name + "[" + index+ "]",it.next(),sb,done);  }}  }
class C{  Divider<T> nextHorizontal(){  return nextHorizontal;}  }
class C{  public void addToBeLoaded(final String url){  if (toBeLoaded == null) {    toBeLoaded=new ArrayList<String>();  }  if (StringUtils.isNotBlank(url)) {    toBeLoaded.add(url);  }}  }
class C{  protected void putUsageDetails(Long roleKey,UsageDetails details){  roleAssignmentDetails.put(roleKey,details);}  }
class C{  public StringRefAddr(String addrType,String addr){  super(addrType);  contents=addr;}  }
class C{  public static JsonObject parseHTTPResponse(CloseableHttpResponse response,String uri) throws IllegalStateException, IOException, HttpException {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode != 200 && statusCode != 201) {    logger.error(MessageFormat.format(Messages.getString("UtilityFunctions.HTTP_STATUS"),response.getStatusLine().getStatusCode(),uri));    throw new HttpException(MessageFormat.format(Messages.getString("UtilityFunctions.HTTP_STATUS"),response.getStatusLine().getStatusCode(),uri));  }  HttpEntity entity=response.getEntity();  String strResponse=EntityUtils.toString(entity);  JsonElement je=new JsonParser().parse(strResponse);  JsonObject jo=je.getAsJsonObject();  return jo;}  }
class C{  public AnnotationRenderer(){  setOpaque(true);  setBorder(noFocusBorder);}  }
class C{  public void line(double value,Paint color,BasicStroke stroke,boolean stack){  SourcedPlotElement parent=stack ? findParent() : null;  plotElements.add(new ConstantLine(value,color,stroke,parent));}  }
class C{  public static ResourceManager common(){  return all(ResourceManager.class);}  }
class C{  public double calculateCost(Session session){  double cost=1;  boolean invalidPlan=false;  int level=1;  for (  TableFilter tableFilter : allFilters) {    PlanItem item=tableFilter.getBestPlanItem(session,level++);    planItems.put(tableFilter,item);    cost+=cost * item.cost;    setEvaluatable(tableFilter,true);    Expression on=tableFilter.getJoinCondition();    if (on != null) {      if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        invalidPlan=true;        break;      }    }  }  if (invalidPlan) {    cost=Double.POSITIVE_INFINITY;  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }  return cost;}  }
class C{  public void add(K key,int numReferences){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,numReferences);    numValues+=numReferences;    return;  }  throw new IllegalArgumentException("Key '" + key + "' already in collection");}  }
class C{  public void finish() throws IOException {  writer.write("CREATE INDEX articleIdx ON revisions(ArticleID);\r\n");  writer.write("ALTER TABLE index_articleID_rc_ts ENABLE KEYS;\r\n");  writer.write("ALTER TABLE index_revisionID ENABLE KEYS;\r\n");  writer.write("ALTER TABLE index_chronological ENABLE KEYS;\r\n");  writer.flush();}  }
class C{  public Shape createArrowUp(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y + h);  path.lineTo(x + w / 2,y);  path.lineTo(x + w,y + h);  path.closePath();  return path;}  }
class C{  public void onClearScreenshot(View view){  ImageView snapshotHolder=(ImageView)findViewById(R.id.snapshot_holder);  snapshotHolder.setImageDrawable(null);}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public ExtensionDescription(){}  }
class C{  void test2PhaseCommit(boolean doCommit) throws Exception {  int connectionNumber=1;  Xid parentXid=newXid();  Connection[] connections=new Connection[connectionNumber];  XAConnection[] xaConnections=new XAConnection[connectionNumber];  XAResource[] xaResources=new XAResource[connectionNumber];  Xid[] xids=new Xid[connectionNumber];  try {    for (int i=0; i < connectionNumber; i++) {      xaConnections[i]=dataSource.getXAConnection();      connections[i]=xaConnections[i].getConnection();      xaResources[i]=xaConnections[i].getXAResource();      xids[i]=newXid(parentXid);    }    startAllResources(connectionNumber,xaResources,xids);    insertDatas(connectionNumber,connections);    endAllResources(connectionNumber,xaResources,xids);    prepareAllResources(connectionNumber,xaResources,xids);    for (int i=0; i < connectionNumber; i++) {      if (doCommit) {        xaResources[i].commit(xids[i],false);      } else {        xaResources[i].rollback(xids[i]);      }    }    ResultSet rs=sharedConnection.createStatement().executeQuery("SELECT * from xatable order by i");    if (doCommit) {      for (int i=0; i < connectionNumber; i++) {        rs.next();        assertEquals(rs.getInt(1),i);      }    } else {      assertFalse(rs.next());    }    rs.close();  }  finally {    for (int i=0; i < connectionNumber; i++) {      try {        if (xaConnections[i] != null) {          xaConnections[i].close();        }      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public boolean onEquipped(RPEntity equipper,String slot){  return false;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public void addModel(Model model){  models.add(model);}  }
class C{  public static void findDefaultMethodsInType(Set<Entry<JCClassDecl,JCMethodDecl>> defaultMethods,JSweetContext context,ClassSymbol classSymbol){  if (context.getDefaultMethods(classSymbol) != null) {    defaultMethods.addAll(context.getDefaultMethods(classSymbol));  }  for (  Type t : classSymbol.getInterfaces()) {    findDefaultMethodsInType(defaultMethods,context,(ClassSymbol)t.tsym);  }}  }
class C{  public double[] readDoubleArray(){  FileInputStream fis=null;  try {    fis=new FileInputStream(file);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedInputStream bis=new BufferedInputStream(fis);  BinaryInputStream bs=new BinaryInputStream(bis,bigEndian);  return bs.readDoubleArray();}  }
class C{  public CTSBlockCipher(BlockCipher cipher){  if (cipher instanceof StreamBlockCipher) {    throw new IllegalArgumentException("CTSBlockCipher can only accept ECB, or CBC ciphers");  }  this.cipher=cipher;  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  public PaletteSample(ColorPalette palette){  this.palette=palette;  this.preferredSize=new Dimension(80,18);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return MMC.getInstance().getConfiguredInputNames();}  }
class C{  public void reboot() throws LocalRepositoryException {  final String prefix="reboot(): ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REBOOT};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public static Object min(Comparable c1,Comparable c2){  return (compare(c1,c2,true) <= 0 ? c1 : c2);}  }
class C{  public static void matrixMult(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret,boolean examSparsity) throws DMLRuntimeException {  matrixMult(m1,m2,ret,0,m1.rlen,examSparsity);}  }
class C{  @Override public void close(){  super.close();}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.803 -0500",hash_original_method="DC9B71D58EF4666028CCB60CC7379DF5",hash_generated_method="E00F298668F65E9C2A06FCA512B9F74F") @Override public final String toString(){  if (stringRep == null) {    StringBuilder buffer=new StringBuilder();    buffer.append(this.name);    buffer.append(':');    buffer.append(Integer.toString(this.defaultPort));    stringRep=buffer.toString();  }  return stringRep;}  }
class C{  public String exponentTipText(){  return "Exponent for the polynomial kernel.";}  }
class C{  public void finalizeLater(Runnable finalizer){  assert currOp.get() != null : "must be called in begin-end block";  head.get().add(new Finalizer(finalizer));}  }
class C{  public JsonArray(JsonArray array){  this(array,false);}  }
class C{  public synchronized void close(){  super.close();  shutdownStream();}  }
class C{  public void notifyDataSetChanged(){  mDataSetObservable.notifyChanged();}  }
class C{  public static boolean isValidGDay(String value){  String regex="---\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  public BubbleChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  private double computeModifierBounded(final double x){  double result=computeModifierUnbounded(x);  if (result > 1.0) {    result=1.0;  } else   if (result < -1.0) {    result=-1.0;  }  return result;}  }
class C{  @Override public Classification<T,K> classify(Collection<T> features){  SortedSet<Classification<T,K>> probabilites=this.categoryProbabilities(features);  if (probabilites.size() > 0) {    return probabilites.last();  }  return null;}  }
class C{  private void addMarkersToList(String parameters,Collection<String> markers){  for (  String markerValue : parameters.split(";")) {    markers.add(markerValue.trim());  }}  }
class C{  public final long readLong() throws java.io.IOException {  readFully(scratch,0,8);  int h=((scratch[0] & 0xff) << 24) | ((scratch[1] & 0xff) << 16) | ((scratch[2] & 0xff) << 8)| ((scratch[3] & 0xff) << 0);  int l=((scratch[4] & 0xff) << 24) | ((scratch[5] & 0xff) << 16) | ((scratch[6] & 0xff) << 8)| ((scratch[7] & 0xff) << 0);  return (((long)h) << 32L) | ((long)l) & 0xffffffffL;}  }
class C{  public static Intent craftIntent(Context context,String playlistRef,Bitmap hero){  Intent intent=new Intent(context,PlaylistActivity.class);  intent.putExtra(PlaylistViewFragment.KEY_PLAYLIST,playlistRef);  Utils.queueBitmap(BITMAP_PLAYLIST_HERO,hero);  return intent;}  }
class C{  public Property basicGetProperty(){  return property;}  }
class C{  public double perpDot(Double2D other){  return (-this.y) * other.x + this.x * other.y;}  }
class C{  @Override public void extractTerms(Set<Term> terms){  bigWeight.extractTerms(terms);  littleWeight.extractTerms(terms);}  }
class C{  public String makeRequest(String url,HttpEntity entity,BasicNameValuePair... headers) throws RateLimitException, DiscordException {  try {    if (HttpEntityEnclosingRequestBase.class.isAssignableFrom(this.requestClass)) {      HttpEntityEnclosingRequestBase request=(HttpEntityEnclosingRequestBase)this.requestClass.getConstructor(String.class).newInstance(url);      for (      BasicNameValuePair header : headers) {        request.addHeader(header.getName(),header.getValue());      }      request.setEntity(entity);      return request(request);    } else {      LOGGER.error(LogMarkers.API,"Tried to attach HTTP entity to invalid type! ({})",this.requestClass.getSimpleName());    }  } catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException|InstantiationException e) {    Discord4J.LOGGER.error(LogMarkers.API,"Discord4J Internal Exception",e);  }  return null;}  }
class C{  public PathParser(){  pathHandler=DefaultPathHandler.INSTANCE;}  }
class C{  private void calculateDistances(){  for (int point=0; point < ntree.size(); point++) {    calculateDistances(point);  }}  }
class C{  public Instances resampleWithWeights(Random random,boolean[] sampled){  return resampleWithWeights(random,sampled,false);}  }
class C{  public static boolean filterField(FieldDeclaration declaration){  return filterField(declaration,true);}  }
class C{  public void destroy(){  try {    getTaskList().stream().forEach(null);    zooKeeperStateDriver.delete(getKey());    zooKeeperStateDriver.delete(frameworkState.getFrameworkID().getValue() + "/" + ESTaskStatus.STATE_KEY);    zooKeeperStateDriver.delete(frameworkState.getFrameworkID().getValue());  } catch (  IOException e) {    LOGGER.error("Unable to delete state from ZooKeeper",e);  }}  }
class C{  @RequestProcessing(value="/charge/point",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showChargePoint(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("charge-point.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  dataModel.put("chargePointContentLabel",Symphonys.get("chargePointContentLabel"));  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public void test_getByteLjava_lang_ObjectI(){  byte[] x={1};  byte ret=0;  boolean thrown=false;  try {    ret=Array.getByte(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getByte(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getByte(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getByte(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public Cursor convertSVGCursorElement(Element cursorElement){  String uriStr=XLinkSupport.getXLinkHref(cursorElement);  if (uriStr.length() == 0) {    throw new BridgeException(ctx,cursorElement,ERR_ATTRIBUTE_MISSING,new Object[]{"xlink:href"});  }  String baseURI=AbstractNode.getBaseURI(cursorElement);  ParsedURL purl;  if (baseURI == null) {    purl=new ParsedURL(uriStr);  } else {    purl=new ParsedURL(baseURI,uriStr);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,cursorElement);  String s=cursorElement.getAttributeNS(null,SVG_X_ATTRIBUTE);  float x=0;  if (s.length() != 0) {    x=UnitProcessor.svgHorizontalCoordinateToUserSpace(s,SVG_X_ATTRIBUTE,uctx);  }  s=cursorElement.getAttributeNS(null,SVG_Y_ATTRIBUTE);  float y=0;  if (s.length() != 0) {    y=UnitProcessor.svgVerticalCoordinateToUserSpace(s,SVG_Y_ATTRIBUTE,uctx);  }  CursorDescriptor desc=new CursorDescriptor(purl,x,y);  Cursor cachedCursor=cursorCache.getCursor(desc);  if (cachedCursor != null) {    return cachedCursor;  }  Point2D.Float hotSpot=new Point2D.Float(x,y);  Filter f=cursorHrefToFilter(cursorElement,purl,hotSpot);  if (f == null) {    cursorCache.clearCursor(desc);    return null;  }  Rectangle cursorSize=f.getBounds2D().getBounds();  RenderedImage ri=f.createScaledRendering(cursorSize.width,cursorSize.height,null);  Image img=null;  if (ri instanceof Image) {    img=(Image)ri;  } else {    img=renderedImageToImage(ri);  }  hotSpot.x=hotSpot.x < 0 ? 0 : hotSpot.x;  hotSpot.y=hotSpot.y < 0 ? 0 : hotSpot.y;  hotSpot.x=hotSpot.x > (cursorSize.width - 1) ? cursorSize.width - 1 : hotSpot.x;  hotSpot.y=hotSpot.y > (cursorSize.height - 1) ? cursorSize.height - 1 : hotSpot.y;  Cursor c=Toolkit.getDefaultToolkit().createCustomCursor(img,new Point(Math.round(hotSpot.x),Math.round(hotSpot.y)),purl.toString());  cursorCache.putCursor(desc,c);  return c;}  }
class C{  public static void clearTimeout(Context cx,Scriptable thisObj,Object[] args,Function funObj){  int len=args.length;  WindowWrapper ww=(WindowWrapper)thisObj;  Window window=ww.window;  if (len >= 1) {    window.clearTimeout(Context.jsToJava(args[0],Object.class));  }}  }
class C{  public static void reply(Connection connection,Message original,Message reply) throws XMPPException {  MultipleRecipientInfo info=getMultipleRecipientInfo(original);  if (info == null) {    throw new XMPPException("Original message does not contain multiple recipient info");  }  if (info.shouldNotReply()) {    throw new XMPPException("Original message should not be replied");  }  if (info.getReplyRoom() != null) {    throw new XMPPException("Reply should be sent through a room");  }  if (original.getThread() != null) {    reply.setThread(original.getThread());  }  MultipleAddresses.Address replyAddress=info.getReplyAddress();  if (replyAddress != null && replyAddress.getJid() != null) {    reply.setTo(replyAddress.getJid());    connection.sendPacket(reply);  } else {    List<String> to=new ArrayList<String>();    List<String> cc=new ArrayList<String>();    for (Iterator<MultipleAddresses.Address> it=info.getTOAddresses().iterator(); it.hasNext(); ) {      String jid=it.next().getJid();      to.add(jid);    }    for (Iterator<MultipleAddresses.Address> it=info.getCCAddresses().iterator(); it.hasNext(); ) {      String jid=it.next().getJid();      cc.add(jid);    }    if (!to.contains(original.getFrom()) && !cc.contains(original.getFrom())) {      to.add(original.getFrom());    }    String from=connection.getUser();    if (!to.remove(from) && !cc.remove(from)) {      String bareJID=StringUtils.parseBareAddress(from);      to.remove(bareJID);      cc.remove(bareJID);    }    String serviceAddress=getMultipleRecipienServiceAddress(connection);    if (serviceAddress != null) {      sendThroughService(connection,reply,to,cc,null,null,null,false,serviceAddress);    } else {      sendToIndividualRecipients(connection,reply,to,cc,null);    }  }}  }
class C{  public void unblock(Subnet subnet){  if (subnet == null) {    throw new IllegalArgumentException("Subnet can not be null");  }  blacklist.remove(subnet);}  }
class C{  public static Sampler WRAP_NEAREST(RenderScript rs){  if (rs.mSampler_WRAP_NEAREST == null) {    Builder b=new Builder(rs);    b.setMinification(Value.NEAREST);    b.setMagnification(Value.NEAREST);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_NEAREST=b.create();  }  return rs.mSampler_WRAP_NEAREST;}  }
class C{  protected void uninstallApplicationListeners(Application app){  app.removePropertyChangeListener(applicationListener);}  }
class C{  public boolean ifTaskCompletedSuccessOrFailureFromResponse(ResponseOnSingeRequest myResponse){  boolean isCompleted=false;  try {    if (myResponse == null || myResponse.isFailObtainResponse()) {      return isCompleted;    }    String responseBody=myResponse.getResponseBody();    if (responseBody.matches(successRegex) || responseBody.matches(failureRegex)) {      isCompleted=true;    }  } catch (  Exception t) {    logger.error("fail" + t);  }  return isCompleted;}  }
class C{  @Override public @Nonnull String toString(){  return localName;}  }
class C{  public final void testPhoneNumberWithContextAndResourceIdParameters(){  assertNotNull(Validators.phoneNumber(getContext(),android.R.string.cancel));}  }
class C{  public BatchClassifierEvent(Object source,Classifier scheme,DataSetEvent trsI,DataSetEvent tstI,int runNum,int maxRunNum,int setNum,int maxSetNum){  this(source,scheme,trsI,tstI,setNum,maxSetNum);  m_runNumber=runNum;  m_maxRunNumber=maxRunNum;}  }
class C{  public void registerClient(ClientProxyMembershipID proxyID){  boolean registerClient=false;synchronized (_clientHeartbeatsLock) {    Map oldClientHeartbeats=this._clientHeartbeats;    if (!oldClientHeartbeats.containsKey(proxyID)) {      Map newClientHeartbeats=new HashMap(oldClientHeartbeats);      newClientHeartbeats.put(proxyID,Long.valueOf(System.currentTimeMillis()));      this._clientHeartbeats=newClientHeartbeats;      registerClient=true;    }  }  if (registerClient) {    if (this.stats != null) {      this.stats.incClientRegisterRequests();    }    if (logger.isDebugEnabled()) {      logger.debug(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_REGISTERING_CLIENT_WITH_MEMBER_ID_0,new Object[]{proxyID}));    }  }}  }
class C{  static public XObject create(Object val){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Double) {    result=new XNumber(((Double)val));  } else {    result=new XObject(val);  }  return result;}  }
class C{  public static final double[][] dsigma(double A[][]){  double X[][]=new double[A.length][A[0].length];  for (int i=0; i < A.length; i++) {    for (int j=0; j < A[i].length; j++) {      X[i][j]=dsigma(A[i][j]);    }  }  return X;}  }
class C{  @Override public double binWidth(double value){  return borders.binWidth(value);}  }
class C{  private void checkEclipseMode(){  if (!LEnv.ECLIPSE_MODE)   return;  LEnv.LOGGER.debug("Eclipse mode: skipping update check.");  modules=JAXB.unmarshal(Paths.get("../release/deployment-dev/modules.xml").toFile(),ModulesBean.class);  modules.setOrigin(ModulesBeanOrigin.ECLIPSE_MODULES_XML);  launcher.setModules(modules);  publishModCounts();  throw new FinishException();}  }
class C{  public List<Model> queryAsList(Context context){  CPOrmCursor<Model> cursor=queryAsCursor(context);  if (cursor == null)   return new ArrayList<>();  try {    List<Model> resultList=new ArrayList<Model>(cursor.getCount());    while (cursor.moveToNext()) {      resultList.add(cursor.inflate());    }    return resultList;  }  finally {    cursor.close();  }}  }
class C{  public FakeLink(final Id<Link> id){  this(id,null,null);}  }
class C{  protected void writeHeader() throws ConfigurationException, IOException {  if (writer != null) {    writer.close();  }  this.fileCounter++;  String filePath=PATH_OUTPUT_DATA_FILES + this.outputName + "_"+ fileCounter+ ".csv";  this.dataFile=new File(filePath);  this.writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath),WIKIPEDIA_ENCODING));  this.writer.flush();}  }
class C{  @Override public synchronized boolean takePartition(String topic,int partition){  Set<Integer> partitionSet=m_myTopicPartitions.get(topic);  if (partitionSet == null)   return false;  String ownerPath=ownerPath(topic,partition);  try {    if (m_zk.exists(ownerPath)) {      return false;    }    if (m_zk.create(ownerPath,true)) {      m_zk.writeString(ownerPath,m_consumerId);      partitionSet.add(partition);      return true;    } else     return false;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    LOGGER.error("Fail to take partition " + ownerPath,e);    return false;  }}  }
class C{  private void createContents(){  display=getParent().getDisplay();  shell=new Shell(getParent(),getStyle());  shell.setSize(450,300);  shell.setText(getText());  shell.setImage(new Image(display,ClassLoader.getSystemResourceAsStream("icons/title.png")));  shell.setLayout(new GridLayout(1,false));}  }
class C{  @PostConstruct public void postConstruct(){  applyStyle();  displayTargetFilterMessage();  eventBus.subscribe(this);}  }
class C{  public static Timestamp changeTimezone(MySQLConnection conn,Calendar sessionCalendar,Calendar targetCalendar,Timestamp tstamp,TimeZone fromTz,TimeZone toTz,boolean rollForward){  if ((conn != null)) {    if (conn.getUseTimezone()) {      Calendar fromCal=Calendar.getInstance(fromTz);      fromCal.setTime(tstamp);      int fromOffset=fromCal.get(Calendar.ZONE_OFFSET) + fromCal.get(Calendar.DST_OFFSET);      Calendar toCal=Calendar.getInstance(toTz);      toCal.setTime(tstamp);      int toOffset=toCal.get(Calendar.ZONE_OFFSET) + toCal.get(Calendar.DST_OFFSET);      int offsetDiff=fromOffset - toOffset;      long toTime=toCal.getTime().getTime();      if (rollForward) {        toTime+=offsetDiff;      } else {        toTime-=offsetDiff;      }      Timestamp changedTimestamp=new Timestamp(toTime);      return changedTimestamp;    } else     if (conn.getUseJDBCCompliantTimezoneShift()) {      if (targetCalendar != null) {        Timestamp adjustedTimestamp=new Timestamp(jdbcCompliantZoneShift(sessionCalendar,targetCalendar,tstamp));        adjustedTimestamp.setNanos(tstamp.getNanos());        return adjustedTimestamp;      }    }  }  return tstamp;}  }
class C{  public static void main(String[] args){  TestSimpleTag tester=new TestSimpleTag();  run(tester,ARGS,TEST,NO_TEST);  tester.printSummary();}  }
class C{  public boolean isMessagePartOfTransaction(SIPMessage messageToTest){  ViaList viaHeaders;  Via topViaHeader;  String messageBranch;  boolean transactionMatches;  transactionMatches=false;  String method=messageToTest.getCSeq().getMethod();  if ((method.equals(Request.INVITE) || !isTerminated())) {    viaHeaders=messageToTest.getViaHeaders();    if (viaHeaders != null) {      topViaHeader=(Via)viaHeaders.getFirst();      messageBranch=topViaHeader.getBranch();      if (messageBranch != null) {        if (!messageBranch.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          messageBranch=null;        }      }      if (messageBranch != null && this.getBranch() != null) {        if (method.equals(Request.CANCEL)) {          transactionMatches=this.getMethod().equals(Request.CANCEL) && getBranch().equalsIgnoreCase(messageBranch) && topViaHeader.getSentBy().equals(((Via)getOriginalRequest().getViaHeaders().getFirst()).getSentBy());        } else {          transactionMatches=getBranch().equalsIgnoreCase(messageBranch) && topViaHeader.getSentBy().equals(((Via)getOriginalRequest().getViaHeaders().getFirst()).getSentBy());        }      } else {        String originalFromTag=super.fromTag;        String thisFromTag=messageToTest.getFrom().getTag();        boolean skipFrom=(originalFromTag == null || thisFromTag == null);        String originalToTag=super.toTag;        String thisToTag=messageToTest.getTo().getTag();        boolean skipTo=(originalToTag == null || thisToTag == null);        boolean isResponse=(messageToTest instanceof SIPResponse);        if (messageToTest.getCSeq().getMethod().equalsIgnoreCase(Request.CANCEL) && !getOriginalRequest().getCSeq().getMethod().equalsIgnoreCase(Request.CANCEL)) {          transactionMatches=false;        } else         if ((isResponse || getOriginalRequest().getRequestURI().equals(((SIPRequest)messageToTest).getRequestURI())) && (skipFrom || originalFromTag != null && originalFromTag.equalsIgnoreCase(thisFromTag)) && (skipTo || originalToTag != null && originalToTag.equalsIgnoreCase(thisToTag))&& getOriginalRequest().getCallId().getCallId().equalsIgnoreCase(messageToTest.getCallId().getCallId())&& getOriginalRequest().getCSeq().getSeqNumber() == messageToTest.getCSeq().getSeqNumber() && ((!messageToTest.getCSeq().getMethod().equals(Request.CANCEL)) || getOriginalRequest().getMethod().equals(messageToTest.getCSeq().getMethod())) && topViaHeader.equals(getOriginalRequest().getViaHeaders().getFirst())) {          transactionMatches=true;        }      }    }  }  return transactionMatches;}  }
class C{  protected void resetLocation(){  rec.offset=undoLocation;}  }
class C{  public static void requestExit(int port){  try {    RemoteExiter exiter=(RemoteExiter)Naming.lookup("rmi://localhost:" + port + "/RemoteExiter");    try {      exiter.exit();    } catch (    RemoteException re) {    }    exiter=null;  } catch (  java.net.MalformedURLException mfue) {  }catch (  NotBoundException nbe) {    TestLibrary.bomb("exiter not bound?",nbe);  }catch (  RemoteException re) {    TestLibrary.bomb("remote exception trying to exit",re);  }}  }
class C{  public void testCase1(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=1;  int bSign=1;  byte rBytes[]={9,18,27,36,45,54,63,9,18,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static void main(String[] options){  DatabaseLoader atf;  try {    atf=new DatabaseLoader();    atf.setOptions(options);    atf.setSource(atf.getUrl(),atf.getUser(),atf.getPassword());    if (!atf.m_inc) {      System.out.println(atf.getDataSet());    } else {      Instances structure=atf.getStructure();      System.out.println(structure);      Instance temp;      do {        temp=atf.getNextInstance(structure);        if (temp != null) {          System.out.println(temp);        }      } while (temp != null);    }  } catch (  Exception e) {    e.printStackTrace();    System.out.println("\n" + e.getMessage());  }}  }
class C{  public void testSetPhoneSensorValues_phoneLandscapeFacingEastOnEquatorAtMeridian(){  LatLong location=new LatLong(0,0);  Vector3 acceleration=new Vector3(10,0,0);  Vector3 magneticField=new Vector3(-10,1,0);  Vector3 expectedZenith=new Vector3(1,0,0);  Vector3 expectedNadir=new Vector3(-1,0,0);  Vector3 expectedNorth=new Vector3(0,0,1);  Vector3 expectedEast=new Vector3(0,1,0);  Vector3 expectedSouth=new Vector3(0,0,-1);  Vector3 expectedWest=new Vector3(0,-1,0);  Vector3 expectedPointing=expectedEast;  Vector3 expectedUpAlongPhone=expectedSouth;  checkModelOrientation(location,acceleration,magneticField,expectedZenith,expectedNadir,expectedNorth,expectedEast,expectedSouth,expectedWest,expectedPointing,expectedUpAlongPhone);}  }
class C{  public GlassFish3xRuntimeConfiguration(){  super();  this.setProperty(RemotePropertySet.USERNAME,"admin");  this.setProperty(RemotePropertySet.PASSWORD,"adminadmin");  this.setProperty(RemotePropertySet.TIMEOUT,"120000");  this.setProperty(GeneralPropertySet.HOSTNAME,"localhost");  this.setProperty(GlassFishPropertySet.ADMIN_PORT,"4848");}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,threadFactory,handler);  this.cronJobWatchDogs=new ArrayList<>();}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public static double sinAndCos(double angle,final DoubleWrapper cosine){  if (USE_JDK_MATH) {    cosine.value=Math.cos(angle);    return Math.sin(angle);  }  boolean negateResult=false;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  }  if (angle > SIN_COS_MAX_VALUE_FOR_INT_MODULO) {    final long remAndQuad=remainderPiO2(angle);    angle=decodeRemainder(remAndQuad);    final double sin;    final int q=decodeQuadrant(remAndQuad);    if (q == 0) {      sin=sin(angle);      cosine.value=cos(angle);    } else     if (q == 1) {      sin=cos(angle);      cosine.value=-sin(angle);    } else     if (q == 2) {      sin=-sin(angle);      cosine.value=-cos(angle);    } else {      sin=-cos(angle);      cosine.value=sin(angle);    }    return negateResult ? -sin : sin;  }  int index=(int)(angle * SIN_COS_INDEXER + 0.5);  final double delta=angle - index * SIN_COS_DELTA_HI - index * SIN_COS_DELTA_LO;  index&=SIN_COS_TABS_SIZE - 2;  final double indexSin=MyTSinCos.sinTab[index];  final double indexCos=MyTSinCos.cosTab[index];  cosine.value=indexCos + delta * (-indexSin + delta * (-indexCos * ONE_DIV_F2 + delta * (indexSin * ONE_DIV_F3 + delta * indexCos * ONE_DIV_F4)));  final double result=indexSin + delta * (indexCos + delta * (-indexSin * ONE_DIV_F2 + delta * (-indexCos * ONE_DIV_F3 + delta * indexSin * ONE_DIV_F4)));  return negateResult ? -result : result;}  }
class C{  public void testSingleMemberStart() throws Throwable {  CopycatServer server=createServers(1).get(0);  server.bootstrap().thenRun(null);  await(5000);  CopycatServer joiner1=createServer(nextMember(Member.Type.ACTIVE));  joiner1.join(server.cluster().member().address()).thenRun(null);  await(5000);  CopycatServer joiner2=createServer(nextMember(Member.Type.ACTIVE));  joiner2.join(server.cluster().member().address()).thenRun(null);  await(5000);}  }
class C{  public void testSetAttributeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrName;  String attrValue;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM","dom:elem");  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr","value");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens01_attrName","attr",attrName);  assertEquals("elementsetattributens01_attrValue","value",attrValue);}  }
class C{  public Status status(){  return status;}  }
class C{  public TemplateProposal(Template template,TemplateContext context,IRegion region,Image image){  Assert.isNotNull(template);  Assert.isNotNull(context);  Assert.isNotNull(region);  fTemplate=template;  fContext=context;  fImage=image;  fRegion=region;  fDisplayString=null;  fRelevance=computeRelevance();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.467 -0500",hash_original_method="48854BC79E0F6D799B73E2D315528F1E",hash_generated_method="9F05A7A5E55780B46804AA35B3B91120") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int vrfy(String user) throws IOException {  return sendCommand(SMTPCommand.VRFY,user);}  }
class C{  @NotNull public <T>Optional<T> findOptional(@NotNull Class<T> cl,@NotNull SqlQuery query){  return executeQuery(rowMapperForClass(cl).optional(),query);}  }
class C{  public WrappedByteBuffer compact(){  int remaining=remaining();  int capacity=capacity();  if (capacity == 0) {    return this;  }  if (remaining <= capacity >>> 2 && capacity > _minimumCapacity) {    int newCapacity=capacity;    int minCapacity=max(_minimumCapacity,remaining << 1);    for (; ; ) {      if (newCapacity >>> 1 < minCapacity) {        break;      }      newCapacity>>>=1;    }    newCapacity=max(minCapacity,newCapacity);    if (newCapacity == capacity) {      if (_buf.remaining() == 0) {        _buf.position(0);        _buf.limit(_buf.capacity());      } else {        java.nio.ByteBuffer dup=_buf.duplicate();        _buf.position(0);        _buf.limit(_buf.capacity());        _buf.put(dup);      }      return this;    }    ByteOrder bo=order();    if (remaining > newCapacity) {      throw new IllegalStateException("The amount of the remaining bytes is greater than " + "the new capacity.");    }    java.nio.ByteBuffer oldBuf=_buf;    java.nio.ByteBuffer newBuf=java.nio.ByteBuffer.allocate(newCapacity);    newBuf.put(oldBuf);    _buf=newBuf;    _buf.order(bo);  } else {    _buf.compact();  }  return this;}  }
class C{  private void updateState(X509Certificate currCert) throws CertPathValidatorException {  PublicKey cKey=currCert.getPublicKey();  if (debug != null) {    debug.println("BasicChecker.updateState issuer: " + currCert.getIssuerX500Principal().toString() + "; subject: "+ currCert.getSubjectX500Principal()+ "; serial#: "+ currCert.getSerialNumber().toString());  }  if (PKIX.isDSAPublicKeyWithoutParams(cKey)) {    cKey=makeInheritedParamsKey(cKey,prevPubKey);    if (debug != null)     debug.println("BasicChecker.updateState Made " + "key with inherited params");  }  prevPubKey=cKey;  prevSubject=currCert.getSubjectX500Principal();}  }
class C{  @Override public void onDestroy(){  LOG.d(TAG,"CordovaActivity.onDestroy()");  super.onDestroy();  if (this.appView != null) {    appView.handleDestroy();  }}  }
class C{  public TransactionOutPoint(NetworkParameters params,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);}  }
class C{  public static Object decodeToObject(String encodedObject){  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    e.printStackTrace();    obj=null;  }catch (  java.lang.ClassNotFoundException e) {    e.printStackTrace();    obj=null;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public static void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  protected void updateLinks(Node n){  XBLRecord rec=getRecord(n);  rec.previousSibling=null;  rec.nextSibling=null;  rec.linksValid=true;  Node p=getXblParentNode(n);  if (p != null) {    NodeList xcn=getXblChildNodes(p);    if (xcn instanceof XblChildNodes) {      ((XblChildNodes)xcn).update();    }  }}  }
class C{  public Range keyHashRange(String routeKey){  if (routeKey.indexOf(SEPARATOR) < 0) {    int hash=sliceHash(routeKey,null,null,null);    return new Range(hash,hash);  }  return new KeyParser(routeKey).getRange();}  }
class C{  @PUT @Path("/reset") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response updateUserPassword(PasswordResetParam passwordReset,@DefaultValue("true") @QueryParam("logout_user") boolean logout){  checkSecurityContext();  String principal=_sc.getUserPrincipal().getName();  String username=passwordReset.getUsername();  if (!_passwordHandler.checkUserExists(username)) {    throw APIException.badRequests.parameterIsNotValid("username");  }  _passwordHandler.getPasswordUtils().validatePasswordParameter(passwordReset);  _logger.info("reset password for user {}",username);  setUserPassword(username,passwordReset.getPassword(),passwordReset.getEncPassword(),true);  if (logout && !internalLogoutClient.logoutUser(!principal.equalsIgnoreCase(username) ? username : null,_req)) {    _logger.error("Password reset but unable to logout user active sessions.");  }  auditPassword(OperationTypeEnum.RESET_LOCAL_USER_PASSWORD,AuditLogManager.AUDITLOG_SUCCESS,null,principal,username);  return Response.ok("Password Reset posted by " + principal + " for "+ username+ "\n").build();}  }
class C{  protected BooleanOption(OptionSet set,String name,String desc,boolean defaultValue){  super(set,BOOLEAN_OPTION,name,desc);  this.value=this.defaultValue=defaultValue;}  }
class C{  public GaussianBlurFilter(int radius){  if (radius < 1) {    radius=1;  }  this.radius=radius;}  }
class C{  public ObjectAnalysis analyzeObject(Mat object) throws IllegalArgumentException {  Mat descriptors=new Mat();  MatOfKeyPoint keypoints=new MatOfKeyPoint();  Log.d("FTCVision","Analyzing object...");  if (object == null || object.empty()) {    throw new IllegalArgumentException("Object image cannot be empty!");  }  detector.detect(object,keypoints);  extractor.compute(object,keypoints,descriptors);  return new ObjectAnalysis(keypoints,descriptors,object);}  }
class C{  public static Hash128 hash128(byte[] key,int offset,int length,long seed,Hash128 hash){  long h1=seed;  long h2=seed;  if (length >= 16) {    final int len16=length & 0xFFFFFFF0;    final int end=offset + len16;    for (int i=offset; i < end; i+=16) {      long k1=ByteUtils.readLongLE(key,i);      long k2=ByteUtils.readLongLE(key,i + 8);      k1*=C1;      k1=Long.rotateLeft(k1,31);      k1*=C2;      h1^=k1;      h1=Long.rotateLeft(h1,27);      h1+=h2;      h1=h1 * 5 + 0x52dce729;      k2*=C2;      k2=Long.rotateLeft(k2,33);      k2*=C1;      h2^=k2;      h2=Long.rotateLeft(h2,31);      h2+=h1;      h2=h2 * 5 + 0x38495ab5;    }    offset=end;  }  long k1=0;  long k2=0;switch (length & 15) {case 15:    k2^=(key[offset + 14] & 0xFFL) << 48;case 14:  k2^=(key[offset + 13] & 0xFFL) << 40;case 13:k2^=(key[offset + 12] & 0xFFL) << 32;case 12:k2^=(key[offset + 11] & 0xFFL) << 24;case 11:k2^=(key[offset + 10] & 0xFFL) << 16;case 10:k2^=(key[offset + 9] & 0xFFL) << 8;case 9:k2^=(key[offset + 8] & 0xFFL) << 0;k2*=C2;k2=Long.rotateLeft(k2,33);k2*=C1;h2^=k2;case 8:k1^=(key[offset + 7] & 0xFFL) << 56;case 7:k1^=(key[offset + 6] & 0xFFL) << 48;case 6:k1^=(key[offset + 5] & 0xFFL) << 40;case 5:k1^=(key[offset + 4] & 0xFFL) << 32;case 4:k1^=(key[offset + 3] & 0xFFL) << 24;case 3:k1^=(key[offset + 2] & 0xFFL) << 16;case 2:k1^=(key[offset + 1] & 0xFFL) << 8;case 1:k1^=(key[offset] & 0xFFL);k1*=C1;k1=Long.rotateLeft(k1,31);k1*=C2;h1^=k1;}h1^=length;h2^=length;h1+=h2;h2+=h1;h1=fmix(h1);h2=fmix(h2);h1+=h2;h2+=h1;hash.h1=h1;hash.h2=h2;return hash;}  }
class C{  @OnMessage public void onMessage(String message,Session session){  callInternal("onMessage",session,message);}  }
class C{  public void addDominatedNetSize(long size){  dominatedNetSize+=size;}  }
class C{  public boolean remove(IN4JSProject marker){  return markers.remove(marker);}  }
class C{  public void invalidateCache(){  readUncached=true;}  }
class C{  public static void run(){  InformationFlowAnalysis.v=new InformationFlowAnalysis();}  }
class C{  protected void print(String mnemonic,String[] args){  printer.print(indent + "    ");  writePaddedString(mnemonic + " ",15);  if (args != null) {    for (int i=0; i < args.length; i++) {      if (i > 0) {        printer.print(", ");      }      printer.print(args[i]);    }  }  printer.println();}  }
class C{  private StreamItems(){}  }
class C{  private static int putIconsInfos(final serverObjects prop,final String[] wordArray,int c,final Collection<IconEntry> icons,boolean dark){  int i=0;  for (  final IconEntry entry : icons) {    final String name="";    final String rel=entry.relToString();    final String text="";    prop.put("viewMode_links_" + c + "_nr",c);    prop.put("viewMode_links_" + c + "_dark",((dark) ? 1 : 0));    prop.putHTML("viewMode_links_" + c + "_type","icon");    prop.put("viewMode_links_" + c + "_text",text);    prop.put("viewMode_links_" + c + "_link",markup(wordArray,entry.getUrl().toNormalform(true)));    prop.put("viewMode_links_" + c + "_url",entry.getUrl().toNormalform(true));    prop.put("viewMode_links_" + c + "_rel",rel);    prop.put("viewMode_links_" + c + "_name",name);    dark=!dark;    c++;    i++;  }  return i;}  }
class C{  protected ArrayList<String> splitUris(String uri){  ArrayList<String> uris=new ArrayList<String>();  int start=0;  while (true) {    if (uri.charAt(start) != '/') {      uris=null;      break;    }    final int secondSlash=uri.indexOf('/',start + 1);    if (secondSlash == -1) {      uris=null;      break;    }    boolean isDone=false;    int thirdSlash=uri.indexOf('/',secondSlash + 1);    if (thirdSlash == -1) {      thirdSlash=uri.length();      isDone=true;    }    uris.add(uri.substring(start,thirdSlash));    if (isDone) {      break;    }    start=thirdSlash;  }  return uris;}  }
class C{  private static Object unmaskNull(Object key){  return (key == NULL_KEY ? null : key);}  }
class C{  public RestrictedGuacamoleWebSocketCreator(TunnelRequestService tunnelRequestService){  this.tunnelRequestService=tunnelRequestService;}  }
class C{  public Iterator<FrequentBinaryItemSet> iterator(){  return m_sets.iterator();}  }
class C{  public void addMapping(int oldReg,int newReg,int category){  if (oldReg >= oldToNew.size()) {    for (int i=oldReg - oldToNew.size(); i >= 0; i--) {      oldToNew.add(-1);    }  }  oldToNew.set(oldReg,newReg);  if (runningCountNewRegisters < (newReg + category)) {    runningCountNewRegisters=newReg + category;  }}  }
class C{  public Alarm(String name,AlarmListener listener){  this(name,listener,Thread.currentThread().getContextClassLoader());}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void resetAll(Context context){  PrefsManager.resetAll(context);}  }
class C{  private void updatePaddingBounds(Rect viewBounds){  if (mIconPadding >= 0 && !(mIconPadding * 2 > viewBounds.width()) && !(mIconPadding * 2 > viewBounds.height())) {    mPaddingBounds.set(viewBounds.left + mIconPadding,viewBounds.top + mIconPadding,viewBounds.right - mIconPadding,viewBounds.bottom - mIconPadding);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:    return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private String readFile(String path,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(path));  return new String(encoded,encoding);}  }
class C{  @Override public void preProcess() throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  m_ResultProducer.setResultListener(this);  m_ResultProducer.preProcess();}  }
class C{  public boolean hasTTE(){  return tteCD != null || eval != null;}  }
class C{  @Override public void fromData(DataInput in) throws IOException, ClassNotFoundException {  _operation=EnumListenerEvent.getEnumListenerEvent(in.readByte());  int instantiatorCount=in.readInt();  this.serializedInstantiators=new byte[instantiatorCount][];  for (int i=0; i < instantiatorCount; i++) {    this.serializedInstantiators[i]=DataSerializer.readByteArray(in);  }  _membershipId=ClientProxyMembershipID.readCanonicalized(in);  _eventIdentifier=(EventID)DataSerializer.readObject(in);}  }
class C{  public ManualLagGraph(ManualLagGraphParams params){  addFactors("G",params.getVarsPerInd());  setMaxLagAllowable(params.getMlag());  for (Iterator it=getFactors().iterator(); it.hasNext(); ) {    String factor=(String)it.next();    LaggedFactor laggedFactor=new LaggedFactor(factor,1);    addEdge(factor,laggedFactor);  }}  }
class C{  public synchronized void renameDatabaseObject(Session session,DbObject obj,String newName){  checkWritingAllowed();  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  int id=obj.getId();  lockMeta(session);  removeMeta(session,id);  map.remove(obj.getName());  obj.rename(newName);  map.put(newName,obj);  updateMetaAndFirstLevelChildren(session,obj);}  }
class C{  public void clearAccessibleSelection(){  int i=getSelectionModel().getSelectedIndex();  if (i >= 0 && i < getMenuCount()) {    JMenu menu=getMenu(i);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }  getSelectionModel().setSelectedIndex(-1);}  }
class C{  public static double toDegrees(double radians){  return radians * (180.0 / PI);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public int left(){  return data.length() - pos;}  }
class C{  public static String replace(String s,String sub,String with){  int c=0;  int i=s.indexOf(sub,c);  if (i == -1) {    return s;  }  int length=s.length();  StringBuilder sb=new StringBuilder(length + with.length());  do {    sb.append(s.substring(c,i));    sb.append(with);    c=i + sub.length();  } while ((i=s.indexOf(sub,c)) != -1);  if (c < length) {    sb.append(s.substring(c,length));  }  return sb.toString();}  }
class C{  boolean containsTree(Node t1,Node t2){  if (t2 == null)   return true;  return subTree(t1,t2);}  }
class C{  private void removeTempInstance(){  FormController formController=Collect.getInstance().getFormController();  File temp=SaveToDiskTask.savepointFile(formController.getInstancePath());  if (temp.exists()) {    temp.delete();  }  String selection=InstanceColumns.INSTANCE_FILE_PATH + "=?";  String[] selectionArgs={formController.getInstancePath().getAbsolutePath()};  boolean erase=false;{    Cursor c=null;    try {      c=getContentResolver().query(InstanceColumns.CONTENT_URI,null,selection,selectionArgs,null);      erase=(c.getCount() < 1);    }  finally {      if (c != null) {        c.close();      }    }  }  if (erase) {    String instanceFolder=formController.getInstancePath().getParent();    Log.i(TAG,"attempting to delete: " + instanceFolder);    int images=MediaUtils.deleteImagesInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    int audio=MediaUtils.deleteAudioInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    int video=MediaUtils.deleteVideoInFolderFromMediaProvider(formController.getInstancePath().getParentFile());    Log.i(TAG,"removed from content providers: " + images + " image files, "+ audio+ " audio files,"+ " and "+ video+ " video files.");    File f=new File(instanceFolder);    if (f.exists() && f.isDirectory()) {      for (      File del : f.listFiles()) {        Log.i(TAG,"deleting file: " + del.getAbsolutePath());        del.delete();      }      f.delete();    }  }}  }
class C{  @Override public int delete(@NonNull Uri uri,String where,String[] whereArgs){  Helpers.validateSelection(where,APP_READABLE_COLUMNS_SET);  SQLiteDatabase db=openHelper.getWritableDatabase();  int count;  int match=URI_MATCHER.match(uri);switch (match) {case MY_DOWNLOADS:case MY_DOWNLOADS_ID:case ALL_DOWNLOADS:case ALL_DOWNLOADS_ID:    SqlSelection selection=getWhereClause(uri,where,whereArgs,match);  deleteRequestHeaders(db,selection.getSelection(),selection.getParameters());count=db.delete(DownloadContract.Downloads.DOWNLOADS_TABLE_NAME,selection.getSelection(),selection.getParameters());notifyDownloadStatusChanged();break;case BATCHES:case BATCHES_ID:SqlSelection batchSelection=getWhereClause(uri,where,whereArgs,match);count=db.delete(DownloadContract.Batches.BATCHES_TABLE_NAME,batchSelection.getSelection(),batchSelection.getParameters());notifyBatchesChanged();break;default :LLog.d("deleting unknown/invalid URI: " + uri);throw new UnsupportedOperationException("Cannot delete URI: " + uri);}notifyContentChanged(uri,match);return count;}  }
class C{  private void assimilateContext(NestingException nestingException){  Enumeration<ExceptionContext> enumExeptions=nestingException.getExceptionContexts();  if (enumExeptions.hasMoreElements()) {    while (enumExeptions.hasMoreElements()) {      addExceptionContext(enumExeptions.nextElement());    }    nestingException.clearContexts();  }}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,ForceMergeRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  public T orNull(){  return value;}  }
class C{  public XmlTextBuilder(){  m_textBuf=new StringBuffer(DEFAULT_CAPACITY);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public void loadBlock(Element element) throws jmri.configurexml.JmriConfigureXmlException {  if (element.getAttribute("systemName") == null) {    log.warn("unexpected null in systemName " + element + " "+ element.getAttributes());    return;  }  String sysName=getSystemName(element);  String userName=getUserName(element);  if (log.isDebugEnabled()) {    log.debug("defined Block: (" + sysName + ")("+ (userName == null ? "<null>" : userName)+ ")");  }  Block block=InstanceManager.getDefault(jmri.BlockManager.class).getBlock(sysName);  if (block == null) {    InstanceManager.getDefault(jmri.BlockManager.class).createNewBlock(sysName,userName);    block=InstanceManager.getDefault(jmri.BlockManager.class).getBlock(sysName);  }  if (block == null) {    log.error("Unable to load block with system name " + sysName + " and username of "+ (userName == null ? "<null>" : userName));    return;  }  if (userName != null) {    block.setUserName(userName);  }  if (element.getAttribute("length") != null) {    block.setLength(Float.valueOf(element.getAttribute("length").getValue()).floatValue());  }  if (element.getAttribute("curve") != null) {    block.setCurvature(Integer.parseInt((element.getAttribute("curve")).getValue()));  }  try {    block.setBlockSpeed("Global");    if (element.getChild("speed") != null) {      String speed=element.getChild("speed").getText();      if (speed != null && !speed.equals("") && !speed.contains("Global")) {        block.setBlockSpeed(speed);      }    }  } catch (  jmri.JmriException ex) {    log.error(ex.toString());  }  if (element.getChild("permissive") != null) {    boolean permissive=false;    if (element.getChild("permissive").getText().equals("yes")) {      permissive=true;    }    block.setPermissiveWorking(permissive);  }  Element deniedBlocks=element.getChild("deniedBlocks");  if (deniedBlocks != null) {    List<Element> denyBlock=deniedBlocks.getChildren("block");    for (    Element deny : denyBlock) {      block.addBlockDenyList(deny.getText());    }  }  loadCommon(block,element);  List<Element> sensors=element.getChildren("sensor");  if (sensors.size() > 1) {    log.error("More than one sensor present: " + sensors.size());  }  if (sensors.size() == 1) {    if (sensors.get(0).getAttribute("systemName") != null) {      String name=sensors.get(0).getAttribute("systemName").getValue();      if (!name.equals("")) {        block.setSensor(name);      }    }  }  if (element.getChild("occupancysensor") != null) {    String name=element.getChild("occupancysensor").getText();    if (!name.equals("")) {      block.setSensor(name);    }  }  List<Element> reporters=element.getChildren("reporter");  if (reporters.size() > 1) {    log.error("More than one reporter present: " + reporters.size());  }  if (reporters.size() == 1) {    String name=reporters.get(0).getAttribute("systemName").getValue();    try {      Reporter reporter=InstanceManager.getDefault(jmri.ReporterManager.class).provideReporter(name);      block.setReporter(reporter);      block.setReportingCurrent(reporters.get(0).getAttribute("useCurrent").getValue().equals("yes"));    } catch (    IllegalArgumentException ex) {      log.warn("failed to create Reporter \"{}\" during Block load",name);    }  }  List<Element> paths=element.getChildren("path");  int startSize=block.getPaths().size();  int loadCount=0;  for (int i=0; i < paths.size(); i++) {    Element path=paths.get(i);    if (loadPath(block,path))     loadCount++;  }  if (startSize > 0 && loadCount > 0) {    log.warn("Added " + loadCount++ + " paths to block "+ sysName+ " that already had "+ startSize+ " blocks.");  }  if (startSize + loadCount != block.getPaths().size()) {    log.error("Started with " + startSize + " paths in block "+ sysName+ ", added "+ loadCount+ " but final count is "+ block.getPaths().size()+ "; something not right.");  }}  }
class C{  public void onShowToast(String msg){  showToast(msg);}  }
class C{  @Override public void onBatchComplete(){  int batchId=mBatchId;  mBatchId++;  SystraceMessage.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,"onBatchCompleteUI").arg("BatchId",batchId).flush();  try {    mUIImplementation.dispatchViewUpdates(batchId);  }  finally {    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);  }}  }
class C{  static void createNetwork1(final MutableScenario scenario){  Network network=(Network)scenario.getNetwork();  network.setCapacityPeriod(Time.parseTime("01:00:00"));  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)100,(double)0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)200,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)300,(double)0));  Node node5=NetworkUtils.createAndAddNode(network,Id.create(5,Node.class),new Coord((double)400,(double)0));  Node node6=NetworkUtils.createAndAddNode(network,Id.create(6,Node.class),new Coord((double)500,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create(0,Link.class),fromNode,toNode,(double)100,(double)5,(double)100,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode1,toNode1,(double)100,(double)5,(double)100,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode2,toNode2,(double)100,(double)5,(double)100,(double)1);  final Node fromNode3=node4;  final Node toNode3=node5;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode3,toNode3,(double)100,(double)5,(double)100,(double)1);  final Node fromNode4=node5;  final Node toNode4=node6;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode4,toNode4,(double)100,(double)5,(double)100,(double)1);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 - z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 - constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 - z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String escapeQuotes(String text){  if (text == null) {    return "";  }  if (text.indexOf('"') == -1) {    return text;  }  text=text.replace("\"","&quot;");  return text;}  }
class C{  public SQLTransientException(Throwable cause){  super(cause);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public TFloatDoubleHashMap(){}  }
class C{  public static double iqr(final double[] data){  Arrays.sort(data);  int q1=(int)Math.round(0.25 * (data.length + 1)) - 1;  int q3=(int)Math.round(0.75 * (data.length + 1)) - 1;  return data[q3] - data[q1];}  }
class C{  protected FunctionalTemplate(String string){  string=string.trim();  String funcName=string.substring(0,string.indexOf('('));  function=Settings.getFunction(funcName);  StringBuilder curParam=new StringBuilder();  int openParams=0;  for (int i=funcName.length() + 1; i < string.length() - 1; i++) {    char c=string.charAt(i);    if (c == '(') {      openParams++;    } else     if (c == ')') {      openParams--;    } else     if (openParams == 0 && c == ',') {      Template param=Template.create(curParam.toString());      parameters.add(param);      slots.addAll(param.getSlots());      curParam=new StringBuilder();      continue;    }    curParam.append(c);  }  Template param=Template.create(curParam.toString());  parameters.add(param);  slots.addAll(param.getSlots());}  }
class C{  @Override public boolean domainMatch(final String host,final String domain){  final boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public void recordFileSystemOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){}  }
class C{  public static float convertPixelsToDp(float px){  DisplayMetrics metrics=mRes.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public static SelectResults cartesian(SelectResults[] results,RuntimeIterator[][] itrsForResultFields,List expansionList,List finalList,ExecutionContext context,CompiledValue operand) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  SelectResults returnSet=null;  if (finalList.size() == 1) {    ObjectType type=((RuntimeIterator)finalList.iterator().next()).getElementType();    if (type instanceof StructType) {      returnSet=QueryUtils.createStructCollection(context,(StructTypeImpl)type);    } else {      return QueryUtils.createResultCollection(context,type);    }  } else {    StructType structType=createStructTypeForRuntimeIterators(finalList);    returnSet=QueryUtils.createStructCollection(context,structType);  }  ListIterator expnItr=expansionList.listIterator();  doNestedIterations(0,returnSet,results,itrsForResultFields,finalList,expnItr,(results.length + expansionList.size()),context,operand);  return returnSet;}  }
class C{  protected static void registerHandler(FXGVersion version,FXGVersionHandler obj){  if (versionHandlers != null) {    FXGVersionHandler vHandler=versionHandlers.get(version);    FXGVersion fxgVersion=(vHandler != null) ? vHandler.getVersion() : version;    versionHandlers.put(fxgVersion,obj);  }}  }
class C{  private ByteBuffer copy(ByteBuffer original){  ByteBuffer cp=directBuf ? ByteBuffer.allocateDirect(original.remaining()) : ByteBuffer.allocate(original.remaining());  cp.order(order);  cp.put(original);  cp.flip();  return cp;}  }
class C{  protected void onFirstTimeLaunched(){}  }
class C{  void map(Rectangle bounds,Point textOrigin){  this.bounds=bounds;  this.textOrigin=textOrigin;}  }
class C{  public void destroy() throws CacheWriterException {  this.destroyInProgress=true;  Map tempDispatchedMessagesMap=dispatchedMessagesMap;  if (tempDispatchedMessagesMap != null) {    tempDispatchedMessagesMap.remove(this.regionName);  }  try {    try {      updateHAContainer();    } catch (    RegionDestroyedException e) {    }catch (    CancelException e) {      if (logger.isDebugEnabled()) {        logger.debug("HARegionQueue#destroy: ignored cancellation!!!!");      }    }    try {      this.region.destroyRegion();    } catch (    RegionDestroyedException e) {    }catch (    CancelException e) {    }    ((HAContainerWrapper)haContainer).removeProxy(regionName);  }  finally {    this.stats.close();  }}  }
class C{  @SuppressWarnings("unused") private void reloadAllWeapons(){  for (  Mounted weapon : getTotalWeaponList()) {    if ((((WeaponType)weapon.getType()).getAmmoType() != AmmoType.T_NA) && (null != weapon.getLinked()) && (weapon.getLinked().getType() instanceof AmmoType)) {      weapon.unlink();    }  }}  }
class C{  public TableResult(){  clear();}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static Ignite start(URL springCfgUrl) throws IgniteCheckedException {  return start(springCfgUrl,null,null,null);}  }
class C{  public Instant minusNanos(long nanosToSubtract){  if (nanosToSubtract == Long.MIN_VALUE) {    return plusNanos(Long.MAX_VALUE).plusNanos(1);  }  return plusNanos(-nanosToSubtract);}  }
class C{  public Cuboid(double minX,double minY,double minZ,double maxX,double maxY,double maxZ){  this(new Vector3D(minX,minY,minZ),new Vector3D(maxX,maxY,maxZ));}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public boolean saveAnswer(IAnswerData data) throws JavaRosaException {  try {    return mFormEntryController.saveAnswer(data);  } catch (  Exception e) {    throw new JavaRosaException(e);  }}  }
class C{  public void onSuccess(JSONArray response){}  }
class C{  public boolean validRule(Rule r){  if (r.lhs != null && r.lhs.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  public static ElevationModel makeElevationModel(String key,String defaultValue){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    throw new IllegalArgumentException(msg);  }  Object configSource=Configuration.getStringValue(key,defaultValue);  return (ElevationModel)BasicFactory.create(AVKey.ELEVATION_MODEL_FACTORY,configSource);}  }
class C{  public InlineQueryResultCachedPhoto build(){  return new InlineQueryResultCachedPhoto(id,photo_file_id,title,description,caption,reply_markup,input_message_content);}  }
class C{  public void success(String message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  @Override public UpdateResponse addBean(Object obj,int commitWithinMs) throws IOException, SolrServerException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.addBean(obj,commitWithinMs);  return ur;}  }
class C{  public final void testValidateFails(){  IRIValidator iriValidator=new IRIValidator("foo");  assertFalse(iriValidator.validate("http:/www.foo.com"));  assertFalse(iriValidator.validate("http//www.foo.com"));  assertFalse(iriValidator.validate("http://www..foo.com"));  assertFalse(iriValidator.validate("http:/www.foo.com."));  assertFalse(iriValidator.validate(".http:/www.foo.com"));  assertFalse(iriValidator.validate("http:/www foo.com"));}  }
class C{  @IsAllowed(Operation.READ) public static Result milestones(String userName,String projectName){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  MilestoneCondition mCondition=form(MilestoneCondition.class).bindFromRequest().get();  List<Milestone> milestones=Milestone.findMilestones(project.id,State.getValue(mCondition.state),mCondition.orderBy,Direction.getValue(mCondition.orderDir));  return ok(list.render("title.milestoneList",milestones,project,mCondition));}  }
class C{  public boolean isDefined(){  return isDefined;}  }
class C{  public SVGPath relativeSmoothCubicTo(double c2x,double c2y,double x,double y){  append(PATH_SMOOTH_CUBIC_TO_RELATIVE,c2x,c2y,x,y);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.700 -0500",hash_original_method="29F552B10A233C166AD77E1C4D545B27",hash_generated_method="A71C97BB0B42D1E0A22118CC9B92D3DA") public boolean isAcceptable(X509Certificate cert){  if (permitted_names == null) {    prepareNames();  }  byte[] bytes=getExtensionValue(cert,"2.5.29.17");  List<GeneralName> names;  try {    names=(bytes == null) ? new ArrayList<GeneralName>(1) : ((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if ((excluded_names[4] != null) || (permitted_names[4] != null)) {    try {      names.add(new GeneralName(4,cert.getSubjectX500Principal().getName()));    } catch (    IOException e) {    }  }  return isAcceptable(names);}  }
class C{  private void init(Object[] parameters){  this.bean=new ApplicationExceptionBean();  setId(Long.valueOf(System.currentTimeMillis() % Long.MAX_VALUE).toString());  String className=getClass().getName();  bean.setMessageKey(MESSAGE_PREFIX + className.substring(className.lastIndexOf(".") + 1));  bean.setMessageParams(toStringArray(parameters));}  }
class C{  public static void checkEqualsAndHashCodeMethods(String message,Object lhs,Object rhs,boolean expectedResult){  if ((lhs == null) && (rhs == null)) {    Assert.assertTrue("Your check is dubious...why would you expect null != null?",expectedResult);    return;  }  if ((lhs == null) || (rhs == null)) {    Assert.assertFalse("Your check is dubious...why would you expect an object " + "to be equal to null?",expectedResult);  }  if (lhs != null) {    Assert.assertEquals(message,expectedResult,lhs.equals(rhs));  }  if (rhs != null) {    Assert.assertEquals(message,expectedResult,rhs.equals(lhs));  }  if (expectedResult) {    String hashMessage="hashCode() values for equal objects should be the same";    if (message != null) {      hashMessage+=": " + message;    }    Assert.assertTrue(hashMessage,lhs.hashCode() == rhs.hashCode());  }}  }
class C{  public final DoubleGrid3D add(double withThisMuch){  if (withThisMuch == 0.0)   return this;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]+=withThisMuch;    }  }  return this;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public static void registerInfuseObject(ItemStack itemStack,InfuseObject infuseObject){  if (getObject(itemStack) != null) {    return;  }  infuseObjects.put(itemStack,infuseObject);}  }
class C{  @Override public boolean onRestart(Scheduler.RestartTopologyRequest request){  int containerId=request.getContainerIndex();  List<Process> processesToRestart=new LinkedList<>();  if (containerId == -1) {    LOG.info("Command to restart the entire topology: " + LocalContext.topologyName(config));    processesToRestart.addAll(processToContainer.keySet());  } else {    LOG.info("Command to restart a container of topology: " + LocalContext.topologyName(config));    LOG.info("Restart container requested: " + containerId);    for (    Process p : processToContainer.keySet()) {      if (containerId == processToContainer.get(p)) {        processesToRestart.add(p);      }    }  }  if (processesToRestart.isEmpty()) {    LOG.severe("Container not exist.");    return false;  }  for (  Process process : processesToRestart) {    process.destroy();  }  return true;}  }
class C{  SegmentCheckParameters expectedSegments(int expectedSegments){  this.expectedSegments=expectedSegments;  return this;}  }
class C{  public void push(StackablePath path){  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,path));}  }
class C{  @Override public long skip(final long n){  if (n < 0) {    throw new IllegalArgumentException("Number of characters to skip is less than zero: " + n);  }  if (idx >= charSequence.length()) {    return EOF;  }  final int dest=(int)Math.min(charSequence.length(),idx + n);  final int count=dest - idx;  idx=dest;  return count;}  }
class C{  public void onClientSentPartialBlockPacket(EntityPlayerMP player,int x,int y,int z,float value){  serverInstance=FMLCommonHandler.instance().getMinecraftServerInstance();  int dimension=player.dimension;  MultiMine.instance().debugPrint("multi mine client " + player + " sent progress packet: "+ value);  final BlockPos pos=new BlockPos(x,y,z);  final IBlockState iblockstate=player.worldObj.getBlockState(pos);  final Block block=iblockstate.getBlock();  if (isItemBanned(player.getCurrentEquippedItem()) || isBlockBanned(block,block.getMetaFromState(iblockstate))) {    return;  }  List<PartiallyMinedBlock> partiallyMinedBlocks=getPartiallyMinedBlocksForDimension(dimension);  if (partiallyMinedBlocks == null) {    partiallyMinedBlocks=Lists.<PartiallyMinedBlock>newArrayList();    partiallyMinedBlocksListByDimension.put(dimension,partiallyMinedBlocks);  }  final PartiallyMinedBlock newblock=new PartiallyMinedBlock(x,y,z,dimension,0f);  newblock.setLastTimeMined(System.currentTimeMillis() + MultiMine.instance().getInitialBlockRegenDelay());  for (  PartiallyMinedBlock iterBlock : partiallyMinedBlocks) {    if (iterBlock.equals(newblock)) {      iterBlock.setProgress(Math.max(iterBlock.getProgress(),value));      iterBlock.setLastTimeMined(System.currentTimeMillis() + MultiMine.instance().getInitialBlockRegenDelay());      MultiMine.instance().debugPrint("Server updating partial block at: [" + x + "|"+ y+ "|"+ z+ "], progress now: "+ iterBlock.getProgress());      sendPartiallyMinedBlockUpdateToAllPlayers(iterBlock);      if (iterBlock.isFinished() && !block.isAir(player.worldObj,pos)) {        MultiMine.instance().debugPrint("Server finishing partial block at: [" + x + "|"+ y+ "|"+ z+ "]");        player.worldObj.sendBlockBreakProgress(player.getEntityId(),pos,-1);        final int event=ForgeHooks.onBlockBreakEvent(player.worldObj,player.theItemInWorldManager.getGameType(),player,pos);        if (event != -1) {          TileEntity tileentity=player.worldObj.getTileEntity(pos);          ItemStack stack=player.getCurrentEquippedItem();          if (stack != null && stack.getItem().onBlockStartBreak(stack,pos,player))           return;          player.worldObj.playAuxSFXAtEntity(player,2001,pos,Block.getStateId(iblockstate));          ItemStack itemstack=player.getCurrentEquippedItem();          boolean canHarvest=iblockstate.getBlock().canHarvestBlock(player.worldObj,pos,player);          if (itemstack != null) {            itemstack.onBlockDestroyed(player.worldObj,iblockstate.getBlock(),pos,player);            if (itemstack.stackSize == 0) {              player.destroyCurrentEquippedItem();            }          }          iblockstate.getBlock().onBlockHarvested(player.worldObj,pos,iblockstate,player);          boolean removed=iblockstate.getBlock().removedByPlayer(player.worldObj,pos,player,canHarvest);          if (removed) {            iblockstate.getBlock().onBlockDestroyedByPlayer(player.worldObj,pos,iblockstate);          }          if (removed && canHarvest) {            iblockstate.getBlock().harvestBlock(player.worldObj,player,pos,iblockstate,tileentity);          }          if (removed && event > 0) {            iblockstate.getBlock().dropXpOnBlockBreak(player.worldObj,pos,event);          }          partiallyMinedBlocks.remove(iterBlock);          blockRegenQueue.remove(iterBlock);        }      } else {        blockRegenQueue.offer(iterBlock);      }      return;    }  }  if (partiallyMinedBlocks.size() > 29) {    PartiallyMinedBlock old=partiallyMinedBlocks.get(0);    sendPartiallyMinedBlockDeleteCommandToAllPlayers(old);    partiallyMinedBlocks.remove(old);    blockRegenQueue.remove(old);  }  partiallyMinedBlocks.add(newblock);  blockRegenQueue.offer(newblock);  sendPartiallyMinedBlockUpdateToAllPlayers(newblock);}  }
class C{  public String buildRegressionTreeTipText(){  return "Whether to generate a regression tree/rule instead of a model tree/rule.";}  }
class C{  public PreferenceDividerDecoration drawTop(boolean drawTop){  mDrawTop=drawTop;  return this;}  }
class C{  public Request applicationChecksFileIntegrity(){  noIntegrity=true;  return this;}  }
class C{  private void move(HttpServletRequest request,File dir,String name,List<String> elementList){  if (elementList == null) {    return;  }  if (name == null || name.length() == 0) {    addError(request,ERROR_TARGET_MISSING);    return;  }  File destDir=new File(dir,name);  if (!destDir.isDirectory()) {    addError(request,ERROR_TARGET);    return;  }  if (isAccessible(request,destDir)) {    for (Iterator<String> it=elementList.iterator(); it.hasNext(); ) {      String element=it.next();      if (element.length() > 0) {        File src=new File(dir,element);        File dest=new File(destDir,element);        src.renameTo(dest);      }    }  }}  }
class C{  public void normalize(){  this.matrix.normalizeColumns();}  }
class C{  private void handle4xx5xx6xxNoRetryAfterHeader(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("4xx5xx6xx response without retry after header received");  }  final SipResponse response=ctx.getSipResponse();  final RetryAfterHeader retryHeader=(RetryAfterHeader)response.getStackMessage().getHeader(RetryAfterHeader.NAME);  if (retryHeader != null) {    final long durationInMillis=retryHeader.getDuration() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    if (durationInMillis > 0) {      mNetworkInterface.setRetryAfterHeaderDuration(durationInMillis);      handleError(new ImsError(ImsError.REGISTRATION_FAILED,"retry after" + durationInMillis + " for 4xx/5xx/6xx"));    } else {      mNb4xx5xx6xxFailures++;      if (mNb4xx5xx6xxFailures >= MAX_REGISTRATION_FAILURES) {        handleError(new ImsError(ImsError.REGISTRATION_FAILED,"too many 4xx/5xx/6xx"));      }    }    return;  }  mNb4xx5xx6xxFailures++;  if (mNb4xx5xx6xxFailures >= MAX_REGISTRATION_FAILURES) {    handleError(new ImsError(ImsError.REGISTRATION_FAILED,"too many 4xx/5xx/6xx"));    return;  }  SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,ctx.getTransaction().getRequest().getExpires().getExpires() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE,mInstanceId,mRcsSettings.isSipKeepAliveEnabled());  sendRegister(register);}  }
class C{  void paint(JComponent paintingComponent,JComponent bufferComponent,Graphics g,int x,int y,int w,int h){  PaintManager paintManager=getPaintManager();  if (!isPaintingThread()) {    if (paintManager.getClass() != PaintManager.class) {      paintManager=new PaintManager();      paintManager.repaintManager=this;    }  }  if (!paintManager.paint(paintingComponent,bufferComponent,g,x,y,w,h)) {    g.setClip(x,y,w,h);    paintingComponent.paintToOffscreen(g,x,y,w,h,x + w,y + h);  }}  }
class C{  @Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {  final SlingHttpServletRequest slingRequest=(SlingHttpServletRequest)request;  final SlingHttpServletResponse slingResponse=(SlingHttpServletResponse)response;  final String path=slingRequest.getPathInfo().toLowerCase();  final String method=slingRequest.getMethod();  response.setCharacterEncoding(CharEncoding.UTF_8);  if ("POST".equals(method) && path.startsWith("/system")) {    if (userService != null) {      final boolean allow=userService.isAuthorable(slingRequest.getResourceResolver().adaptTo(Session.class));      if (allow) {        chain.doFilter(request,response);      } else {        slingResponse.sendError(SlingHttpServletResponse.SC_FORBIDDEN);      }    } else {      slingResponse.sendError(SlingHttpServletResponse.SC_FORBIDDEN);    }  } else {    chain.doFilter(request,response);  }}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setParameters(params);  doLog(lr,bundleName);}  }
class C{  @Override public int compareTo(final MutableShort other){  return NumberUtils.compare(this.value,other.value);}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances data){  double globalErrors=0;  double minResult;  NBTreeSplit[] currentModel;  NBTreeSplit bestModel=null;  NBTreeNoSplit noSplitModel=null;  int validModels=0;  Distribution checkDistribution;  Attribute attribute;  double sumOfWeights;  int i;  try {    noSplitModel=new NBTreeNoSplit();    noSplitModel.buildClassifier(data);    if (data.numInstances() < 5) {      return noSplitModel;    }    globalErrors=noSplitModel.getErrors();    if (globalErrors == 0) {      return noSplitModel;    }    checkDistribution=new Distribution(data);    if (Utils.sm(checkDistribution.total(),m_minNoObj) || Utils.eq(checkDistribution.total(),checkDistribution.perClass(checkDistribution.maxClass()))) {      return noSplitModel;    }    if (m_allData != null) {      Enumeration<Attribute> enu=data.enumerateAttributes();      while (enu.hasMoreElements()) {        attribute=enu.nextElement();        if ((attribute.isNumeric()) || (Utils.sm(attribute.numValues(),(0.3 * m_allData.numInstances())))) {          break;        }      }    }    currentModel=new NBTreeSplit[data.numAttributes()];    sumOfWeights=data.sumOfWeights();    for (i=0; i < data.numAttributes(); i++) {      if (i != (data).classIndex()) {        currentModel[i]=new NBTreeSplit(i,m_minNoObj,sumOfWeights);        currentModel[i].setGlobalModel(noSplitModel);        currentModel[i].buildClassifier(data);        if (currentModel[i].checkModel()) {          validModels++;        }      } else {        currentModel[i]=null;      }    }    if (validModels == 0) {      return noSplitModel;    }    minResult=globalErrors;    for (i=0; i < data.numAttributes(); i++) {      if ((i != (data).classIndex()) && (currentModel[i].checkModel())) {        if (currentModel[i].getErrors() < minResult) {          bestModel=currentModel[i];          minResult=currentModel[i].getErrors();        }      }    }    if (((globalErrors - minResult) / globalErrors) < 0.05) {      return noSplitModel;    }    return bestModel;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  protected void addRoleInfo(RoleInfo roleInfo) throws IllegalArgumentException, InvalidRelationTypeException {  if (roleInfo == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationTypeSupport.class.getName(),"addRoleInfo",roleInfo);  if (isInRelationService) {    String excMsg="Relation type cannot be updated as it is declared in the Relation Service.";    throw new RuntimeException(excMsg);  }  String roleName=roleInfo.getName();  if (roleName2InfoMap.containsKey(roleName)) {    StringBuilder excMsgStrB=new StringBuilder();    String excMsg="Two role infos provided for role ";    excMsgStrB.append(excMsg);    excMsgStrB.append(roleName);    throw new InvalidRelationTypeException(excMsgStrB.toString());  }  roleName2InfoMap.put(roleName,new RoleInfo(roleInfo));  RELATION_LOGGER.exiting(RelationTypeSupport.class.getName(),"addRoleInfo");  return;}  }
class C{  public void testGenerateMergedFileDestOnly() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(false);  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(false);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getFailedToMergeFiles()).isEmpty();  assertThat(merger.getMergedFiles()).isEmpty();}  }
class C{  public static String humanReadableByteCount(long bytes,boolean si){  int unit=si ? 1000 : 1024;  if (bytes < unit)   return bytes + "B";  int exp=(int)(Math.log(bytes) / Math.log(unit));  String pre=(si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");  return String.format("%d%sB",(int)(bytes / Math.pow(unit,exp)),pre);}  }
class C{  private short[] initSign(Layer[] layer,short[] msg){  short[] tmpVec=new short[msg.length];  tmpVec=cf.addVect(((RainbowPrivateKeyParameters)this.key).getB1(),msg);  short[] Y_=cf.multiplyMatrix(((RainbowPrivateKeyParameters)this.key).getInvA1(),tmpVec);  for (int i=0; i < layer[0].getVi(); i++) {    x[i]=(short)random.nextInt();    x[i]=(short)(x[i] & GF2Field.MASK);  }  return Y_;}  }
class C{  public static NetworkManagerWrapper wrapNetworkManager(Player player){  try {    PlayerConnection connection=((CraftPlayer)player).getHandle().playerConnection;    if (connection.networkManager instanceof NetworkManagerWrapper)     return (NetworkManagerWrapper)connection.networkManager;    Field field=PlayerConnection.class.getDeclaredField("networkManager");    Field modifiersField=Field.class.getDeclaredField("modifiers");    modifiersField.setAccessible(true);    modifiersField.setInt(field,field.getModifiers() & ~Modifier.FINAL);    NetworkManagerWrapper wrapper=NetworkManagerWrapper.wrap(connection.networkManager);    field.set(connection,wrapper);    return wrapper;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public SaveHistory createSaveHistory(){  SaveHistoryImpl saveHistory=new SaveHistoryImpl();  return saveHistory;}  }
class C{  public static double max(double[][] matrix,int column){  double max=matrix[0][column];  for (int i=1; i < matrix.length; i++) {    if (Double.isNaN(max) || (matrix[i][column] > max)) {      max=matrix[i][column];    }  }  return max;}  }
class C{  public Iterator iterator(){  return listenerList.iterator();}  }
class C{  @SuppressWarnings("unchecked") public <T>T readValue(JsonParser jp,TypeReference<?> valueTypeRef,DeserializationConfig cfg) throws IOException, JsonParseException, JsonMappingException {  return (T)_readValue(cfg,jp,_typeFactory.constructType(valueTypeRef));}  }
class C{  @Override public ObjectIterator iterator(){  return new StructIterator(fieldValuesIterator());}  }
class C{  public InfoObject(String i){  m_id=i;  m_color=null;  m_fontColor=null;  m_label=null;  m_shape=null;  m_style=null;  m_source=null;  m_target=null;  m_data=null;}  }
class C{  private static PipelineOp addDistinctProjectionOp(PipelineOp left,final AST2BOpContext ctx,final ASTBase node,final IVariable<?>[] projectionVars){  if (!ctx.nativeDistinctSolutions) {    final List<NV> anns=new LinkedList<NV>();    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.BOP_ID,ctx.nextId()));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.VARIABLES,projectionVars));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER));    anns.add(new NV(JVMDistinctBindingSetsOp.Annotations.SHARED_STATE,true));    left=new JVMDistinctBindingSetsOp(leftOrEmpty(left),anns.toArray(new NV[anns.size()]));  } else {    final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(ctx.queryId,"--distinct-" + ctx.nextId(),projectionVars);    final List<NV> anns=new LinkedList<NV>();    anns.add(new NV(HTreeDistinctBindingSetsOp.Annotations.BOP_ID,ctx.nextId()));    anns.add(new NV(HTreeDistinctBindingSetsOp.Annotations.VARIABLES,projectionVars));    anns.add(new NV(HTreeDistinctBindingSetsOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER));    anns.add(new NV(HTreeDistinctBindingSetsOp.Annotations.SHARED_STATE,true));    anns.add(new NV(PipelineOp.Annotations.MAX_PARALLEL,1));    anns.add(new NV(HTreeDistinctBindingSetsOp.Annotations.NAMED_SET_REF,namedSolutionSet));    anns.add(new NV(IPredicate.Annotations.RELATION_NAME,new String[]{ctx.getLexiconNamespace()}));    left=new HTreeDistinctBindingSetsOp(leftOrEmpty(left),anns.toArray(new NV[anns.size()]));  }  return left;}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  @Override public void createConnectionFactory(String name,boolean ha,boolean useDiscovery,int cfType,String connectors,String bindings) throws Exception {  createConnectionFactory(name,ha,useDiscovery,cfType,toArray(connectors),toArray(bindings));}  }
class C{  public JspWriter pop(){  if (current.before != null)   current=current.before;  return getWriter();}  }
class C{  public void clearImages(){  chunks.clear();  markers.clear();  redraw(true);  shift_x=0;  shift_y=0;  zoom_level_pos=7;  zoom_level=1;}  }
class C{  public void sendNextPlayer(){  connection.send(new Packet(Packet.COMMAND_FORWARD_INITIATIVE));}  }
class C{  protected Consist addConsist(DccLocoAddress address){  return null;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public final void popContextNodeList(){  if (m_contextNodeLists.isEmpty())   System.err.println("Warning: popContextNodeList when stack is empty!"); else   m_contextNodeLists.pop();}  }
class C{  public UF10(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  public WalletAppKit restoreWalletFromSeed(DeterministicSeed seed){  this.restoreFromSeed=seed;  return this;}  }
class C{  public boolean forEachEntry(TFloatFloatProcedure procedure){  byte[] states=_states;  float[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public static DomainObjectExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DomainObjectExceptionBean object=new DomainObjectExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"domainObjectExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DomainObjectExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","classEnum").equals(reader.getName())) {      object.setClassEnum(ClassEnum.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static void clearCurrentSource(){  currentSource=null;}  }
class C{  static ServiceAccountJwtAccessCredentials fromJson(Map<String,Object> json) throws IOException {  return fromJson(json,null);}  }
class C{  private void heapifyDown(int index){  int current=index;  int child1=current * 2;  while (child1 < nextIndex) {    int child2=current * 2 + 1;    int larger=(child2 < nextIndex && counts[child2] > counts[child1]) ? child2 : child1;    if (counts[current] >= counts[larger])     break;    swap(current,larger);    current=larger;    child1=current * 2;  }}  }
class C{  public void enqueue(Item item){  if (n == q.length)   resize(2 * q.length);  q[last++]=item;  if (last == q.length)   last=0;  n++;}  }
class C{  public static void computeApprox(TreeSet<TypeVariable> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariable var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  public static TradestrategyStatus newInstance(String value){  final TradestrategyStatus returnInstance=new TradestrategyStatus();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public NumberEditor(JSpinner spinner,String decimalFormatPattern){  this(spinner,new DecimalFormat(decimalFormatPattern));}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public SupportedProfile clone(){  SupportedProfile result=new SupportedProfile();  result.OrganizationUri=OrganizationUri;  result.ProfileId=ProfileId;  result.ComplianceTool=ComplianceTool;  result.ComplianceDate=ComplianceDate;  result.ComplianceLevel=ComplianceLevel;  result.UnsupportedUnitIds=UnsupportedUnitIds == null ? null : UnsupportedUnitIds.clone();  return result;}  }
class C{  public void subscribe(String clientHandle,String[] topic,int[] qos,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.subscribe(topic,qos,invocationContext,activityToken);}  }
class C{  public static void cosft2(double[] y,int isign){  com.nr.fft.FFT.cosft2(y,isign);}  }
class C{  public NumberValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  public static <I,A>Parser<I,Unit> skipMany(Parser<I,A> p){  return null;}  }
class C{  public static void cancelWaiters(InternalDistributedMember id){}  }
class C{  private void assertMultipleDirectedRelationFinderToStringIsCorrect(Relation relation,boolean forward,boolean backward,String expected){  MultipleDirectedRelationFinder original=new MultipleDirectedRelationFinder();  original.addRelation(relation,forward,backward);  assertEquals(expected,original.toString());}  }
class C{  private boolean compareAsSet(Certificate[] certs1,Certificate[] certs2){  if (certs1.length != certs1.length) {    return false;  }  if (certs1.length == 0) {    return true;  }  boolean[] hasEqual=new boolean[certs1.length];  for (int i=0; i < certs1.length; i++) {    boolean isMatch=false;    for (int j=0; j < certs2.length; j++) {      if (!hasEqual[j] && certs1[i].equals(certs2[j])) {        hasEqual[j]=isMatch=true;        break;      }    }    if (!isMatch) {      return false;    }  }  return true;}  }
class C{  public void appendSplitElement(Fragment aSplit){  splits.add(aSplit);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.408 -0500",hash_original_method="B0D51307A4FC266FC1D02389AEE54D05",hash_generated_method="FF2775FBBDA31ED87F85F48A8F4805AD") public void removeDialog(String dialogId){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logWarning("Silently removing dialog from table");  }  dialogTable.remove(dialogId);}  }
class C{  public ConfigurationChangedEvent(Object source){  super(source);}  }
class C{  public NumberFormatException(){}  }
class C{  public synchronized void clear(){  mCategories.clear();  mValues.clear();}  }
class C{  public static boolean isVplexVolume(Volume volume,DbClient dbClient){  URI storageURI=volume.getStorageController();  StorageSystem storage=dbClient.queryObject(StorageSystem.class,storageURI);  if (DiscoveredDataObject.Type.vplex.name().equals(storage.getSystemType())) {    return true;  } else {    return false;  }}  }
class C{  public long written(){  return written;}  }
class C{  @Override public String resourceMonitorBarBackground(){  return "#e0e0e0";}  }
class C{  public static FloatBuffer computeNormalsForIndexedTriangleStrip(IntBuffer indices,FloatBuffer vertices,FloatBuffer normals){  if (indices == null) {    String message=Logging.getMessage("nullValue.IndexBufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (vertices == null) {    String message=Logging.getMessage("nullValue.VertexBufferNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int numIndices=indices.remaining();  int numVertices=vertices.remaining() / 3;  if (normals == null)   normals=Buffers.newDirectFloatBuffer(3 * numVertices); else {    for (int i=0; i < numVertices; i++) {      normals.put(0);      normals.put(0);      normals.put(0);    }    normals.rewind();  }  int[] triangle=new int[3];  for (int i=2; i < numIndices; i++) {    indices.position(i - 2);    indices.get(triangle);    if ((i % 2) != 0) {      int tmp=triangle[0];      triangle[0]=triangle[1];      triangle[1]=tmp;    }    addTriangleNormal(3 * triangle[0],3 * triangle[1],3 * triangle[2],vertices,normals);  }  indices.rewind();  vertices.rewind();  normals.rewind();  for (int i=0; i < numVertices; i++) {    normalize3(normals);  }  normals.rewind();  return normals;}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message){  super(message);}  }
class C{  public static Intent goToGooglePlus(String id){  Intent intent=new Intent(android.content.Intent.ACTION_VIEW);  intent.setData(Uri.parse("https://plus.google.com/" + id));  return intent;}  }
class C{  public SRCPTurnout(int number,SRCPBusConnectionMemo memo){  super(memo.getSystemPrefix() + memo.getTurnoutManager().typeLetter() + number);  _number=number;  _bus=memo.getBus();  tc=memo.getTrafficController();  String text="INIT " + _bus + " GA "+ _number+ " N\n";  tc.sendSRCPMessage(new SRCPMessage(text),null);}  }
class C{  public static void i(String tag,String s,Object... args){  if (LDJSLOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));}  }
class C{  public final AssertSubscriber<T> assertFuseableSource(){  if (qs == null) {    throw new AssertionError("Upstream was not Fuseable");  }  return this;}  }
class C{  protected URI(){}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  public boolean requiresSatellite(){  return mProperties.mRequiresSatellite;}  }
class C{  @Override public void start(){  Assignment emptyAction=new Assignment(system.getSettings().systemOutput,ValueFactory.none());  if (system.isPaused()) {    system.getState().addToState(emptyAction);  } else {    system.addContent(emptyAction);  }  system.attachModule(RewardLearner.class);}  }
class C{  private boolean maybeSeekForCues(PositionHolder seekPosition,long currentPosition){  if (seekForCues) {    seekPositionAfterBuildingCues=currentPosition;    seekPosition.position=cuesContentPosition;    seekForCues=false;    return true;  }  if (sentSeekMap && seekPositionAfterBuildingCues != UNKNOWN) {    seekPosition.position=seekPositionAfterBuildingCues;    seekPositionAfterBuildingCues=UNKNOWN;    return true;  }  return false;}  }
class C{  @Override public boolean isCaseSensitive(int column) throws SQLException {  try {    debugCodeCall("isCaseSensitive",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void removeProjects(String path) throws ServerException {  List<RegisteredProject> removed=new ArrayList<>();  Optional.ofNullable(projects.remove(path)).ifPresent(null);  getProjects(path).forEach(null);  removed.forEach(null);}  }
class C{  public Command addCommandToSideMenu(String name,Image icon,final ActionListener ev){  Command cmd=Command.create(name,icon,ev);  addCommandToSideMenu(cmd);  return cmd;}  }
class C{  private Object readResolve(){  return this;}  }
class C{  @SlashedClassName @SuppressFBWarnings("TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK") public static String toSlashedClassName(@SlashedClassName(when=When.UNKNOWN) String className){  if (className.indexOf('.') >= 0) {    return DescriptorFactory.canonicalizeString(className.replace('.','/'));  }  return className;}  }
class C{  public Builder removeExtension(String urn){  this.extensions.remove(urn);  return this;}  }
class C{  private static String defaultPeerName(){  return ANON_PREFIX + OS.infoKey() + "-"+ (System.currentTimeMillis() % 77777777L)+ "-"+ Network.speedKey;}  }
class C{  public void createTableIfNeeded(final String childTableName) throws IOException {  try {    final Configuration childConfig=MergeToolMapper.getChildConfig(conf);    final AccumuloRdfConfiguration childAccumuloRdfConfiguration=new AccumuloRdfConfiguration(childConfig);    childAccumuloRdfConfiguration.setTablePrefix(childTablePrefix);    final Connector childConnector=AccumuloRyaUtils.setupConnector(childAccumuloRdfConfiguration);    if (!childConnector.tableOperations().exists(childTableName)) {      log.info("Creating table: " + childTableName);      childConnector.tableOperations().create(childTableName);      log.info("Created table: " + childTableName);      log.info("Granting authorizations to table: " + childTableName);      childConnector.securityOperations().grantTablePermission(childUserName,childTableName,TablePermission.WRITE);      log.info("Granted authorizations to table: " + childTableName);    }  } catch (  TableExistsException|AccumuloException|AccumuloSecurityException e) {    throw new IOException(e);  }}  }
class C{  public static OrganizationRemovedException convertToApi(org.oscm.internal.types.exception.OrganizationRemovedException oldEx){  return convertExceptionToApi(oldEx,OrganizationRemovedException.class);}  }
class C{  private void deleteDirectoryRecurse(Context context,File dir){  if (FileUtils.isDirectory(dir)) {    for (    File child : dir.listFiles()) {      deleteDirectoryRecurse(context,child);    }  }  if (dir.exists()) {    dir.delete();    FileUtils.updateMediaScanner(context,Uri.fromFile(dir));  }}  }
class C{  public void handleMouseReleased(MouseEvent e){  if (Debug.debugging("mousemode")) {    Debug.output(getID() + "|NavMouseMode2.mouseReleased()");  }  Object obj=e.getSource();  Point firstPoint=this.point1;  Point secondPoint=this.point2;  MapBean map=this.theMap;  if (!(map == obj) || !autoZoom || firstPoint == null || secondPoint == null) {    return;  }  Projection projection=map.getProjection();  Proj p=(Proj)projection;synchronized (this) {    point2=getRatioPoint(map,firstPoint,e.getPoint());    secondPoint=point2;    int dx=Math.abs(secondPoint.x - firstPoint.x);    int dy=Math.abs(secondPoint.y - firstPoint.y);    if ((dx < 5) || (dy < 5)) {      if ((dx < 5) && (dy < 5)) {        Point2D llp=map.getCoordinates(e);        boolean shift=e.isShiftDown();        boolean control=e.isControlDown();        if (control) {          if (shift) {            p.setScale(p.getScale() * 2.0f);          } else {            p.setScale(p.getScale() / 2.0f);          }        }        cleanUp();        p.setCenter(llp);        map.setProjection(p);      }      return;    }    dx=Math.abs(secondPoint.x - firstPoint.x);    dy=Math.abs(secondPoint.y - firstPoint.y);    Point cornerPoint1=new Point(secondPoint.x < firstPoint.x ? secondPoint.x : firstPoint.x,secondPoint.y < firstPoint.y ? secondPoint.y : firstPoint.y);    Point cornerPoint2=new Point(cornerPoint1.x + 2 * dx,cornerPoint1.y + 2 * dy);    float newScale=com.bbn.openmap.proj.ProjMath.getScale(cornerPoint1,cornerPoint2,projection);    Point2D center=map.inverse(firstPoint.x,firstPoint.y,null);    p.setScale(newScale);    p.setCenter(center);    cleanUp();    map.setProjection(p);  }}  }
class C{  public static String byteArrToHexBytes(byte[] arr,String comment){  Memory mem=new NativeMemory(arr);  return memToHexBytes(mem,comment);}  }
class C{  public static boolean isInsideEvenOdd(int cross){  return (cross & 1) != 0;}  }
class C{  public static String lookupColumnName(ResultSetMetaData resultSetMetaData,int columnIndex) throws SQLException {  String name=resultSetMetaData.getColumnLabel(columnIndex);  if (name == null || name.length() < 1) {    name=resultSetMetaData.getColumnName(columnIndex);  }  return name;}  }
class C{  public static Number div(Number left,Number right){  return NumberMath.divide(left,right);}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  public boolean subclassOf(CtClass superclass){  return false;}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  @Override protected boolean hasRequestContent(){  LOG.trace("enter PostMethod.hasRequestContent()");  if (!params.isEmpty()) {    return true;  } else {    return super.hasRequestContent();  }}  }
class C{  public RunProxy(SwingGui debugGui,int type){  this.debugGui=debugGui;  this.type=type;}  }
class C{  private Uri insertSession(final Uri baseUri,final ContentValues values){  final long rowId=mDbHelper.getWritableDatabase().insert(Schema.TBL_SESSIONS,null,values);  if (rowId > 0) {    final Uri sessionUri=ContentUris.withAppendedId(baseUri,rowId);    getContext().getContentResolver().notifyChange(ContentProvider.CONTENT_URI_SESSION,null);    return sessionUri;  }  return null;}  }
class C{  public boolean isInteractiveDocument(Document doc){  Element root=((SVGDocument)doc).getRootElement();  if (!SVGConstants.SVG_NAMESPACE_URI.equals(root.getNamespaceURI()))   return false;  return checkInteractiveElement(root);}  }
class C{  public void clearBillingResults(){  billingResultList.clear();}  }
class C{  public MovingButton(String label){  super(label);  setOpaque(false);  timer=new Timer(30,this);  addActionListener(this);}  }
class C{  public GammaTransfer(float amplitude,float exponent,float offset){  this.amplitude=amplitude;  this.exponent=exponent;  this.offset=offset;}  }
class C{  public int read() throws IOException {  int ch1=is.read();switch (ch1) {case 130:    return ',';case 131:  return 'f';case 132:return '"';case 133:return 8230;case 134:return '+';case 135:return '+';case 136:return '^';case 137:return 8240;case 138:return 'S';case 139:return '<';case 140:return 'O';case 145:case 146:return '\'';case 147:case 148:return '"';case 149:return '*';case 150:case 151:return '-';case 152:return '~';case 153:return 8482;case 154:return 's';case 155:return '>';case 156:return 'o';case 376:return 'Y';default :return ch1;}}  }
class C{  @Override public void close() throws IOException {  if (logger != null) {    logger.println("SSLSocket.close " + socket_was_closed);  }  if (!socket_was_closed) {    if (handshake_started) {      alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);      try {        output.write(alertProtocol.wrap());      } catch (      IOException ex) {      }      alertProtocol.setProcessed();    }    shutdown();    closeTransportLayer();    socket_was_closed=true;  }}  }
class C{  public boolean removeShutdownHook(Thread hook){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);  }  if (hook == null)   throw new NullPointerException("null is not allowed here");  if (VMState > 0) {    throw new IllegalStateException();  }synchronized (hooksList) {    return hooksList.remove(hook);  }}  }
class C{  public static Block fromBlobObject(final NemesisBlockInfo nemesisBlockInfo,final byte[] buffer,final DeserializationContext context){  final Deserializer deserializer=new BinaryDeserializer(buffer,context);  return deserialize(nemesisBlockInfo,deserializer);}  }
class C{  public Type1Font(String platname,Object nativeNames) throws FontFormatException {  this(platname,nativeNames,false);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof ExecPermission))   return false;  ExecPermission that=(ExecPermission)obj;  return fp.equals(that.fp);}  }
class C{  public static <T>LazyListX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public boolean isAnonymous(){  return id == null || id.equals(anonymous.id);}  }
class C{  private void deleteFileIfEmpty() throws IOException {  if (Files.size(preferencesFilePath) == 0) {    Files.delete(preferencesFilePath);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:21:59.557 -0400",hash_original_method="1E8C38EACEA1E94FE658824D01FD2A18",hash_generated_method="278A7E53643DE73F8A80E1A85A107DD5") public void release(){}  }
class C{  protected List createCustomViews(){  return new Vector();}  }
class C{  public void addNotificationIds(Notification notification){  this.getNotificationIds().add(notification.getId());}  }
class C{  protected void nodeAdded(Node node){  invalidateElementsByTagName(node);}  }
class C{  public S2LatLng toLatLng(){  return new S2LatLng(toPointRaw());}  }
class C{  public boolean hasAdditional(){  return (m_Additional != null);}  }
class C{  @DSComment("Sip Manager") @DSSpec(DSCat.ANDROID_MANAGER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.176 -0500",hash_original_method="66F422A1F07B1EF61355B4A646F6CF3A",hash_generated_method="652CF5553FF8C8C60050A97610D1CFC0") public static SipManager newInstance(Context context){  return (isApiSupported(context) ? new SipManager(context) : null);}  }
class C{  public static double[] sub(double[] x,double[] y){  double[] val=new double[x.length];  for (int i=0; i < x.length; i++)   val[i]=x[i] - y[i];  return val;}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.186 -0400",hash_original_method="06813B8E3577F0F1FADDCBFE8B11FDF8",hash_generated_method="0CD66FCBF23C63964CA58713D865628E") public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public static String parseHex2Byte2Json(String hex){  byte[] bytes=ByteHexConverter.hex2Byte(hex);  ByteReadFactory byteReadFactory=new ByteReadFactory(bytes);  String json=byteReadFactory.readString(byteReadFactory.readInt());  return json;}  }
class C{  public static <T>int size(final T[] array){  return array == null ? 0 : array.length;}  }
class C{  public static void fixTrayIcons(IconCache iconCache){  if (SystemUtilities.isUbuntu()) {    for (    IconCache.Icon i : IconCache.getTypes()) {      if (i.isTrayIcon()) {        iconCache.setBgColor(i,getTrayColor());      }    }  }}  }
class C{  @SuppressWarnings("ConstantConditions") public void testUpdate() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> props=properties("owner","group","0555");  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.update(FILE,props);  if (dual)   assertEquals(props,igfsSecondary.properties(FILE.toString()));  assertEquals(props,igfs.info(FILE).properties());}  }
class C{  public void cancel(){  streamAllocation.cancel();}  }
class C{  public Builder put(Properties properties){  for (  Map.Entry entry : properties.entrySet()) {    map.put((String)entry.getKey(),(String)entry.getValue());  }  return this;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public boolean isGLSharingSupported(){  return hasExtension("cl_khr_gl_sharing") || hasExtension("cl_APPLE_gl_sharing");}  }
class C{  private void addCurrentToHistory(){  String currentTitle=status.getText().trim();  String currentGame=game.getText();  if (main.getSaveStatusHistorySetting() || main.getStatusHistory().isFavorite(currentTitle,currentGame)) {    main.getStatusHistory().addUsed(currentTitle,currentGame);  }}  }
class C{  public static StringValueExp value(String val){  return new StringValueExp(val);}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public Model offsetMS(Vec3UV offset){  Vec3UV leftVec=this.fwdVec.cross(this.upVec);  for (  Box box : this.modelBoxes) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x+=this.upVec.x * offset.y + this.fwdVec.x * offset.z + leftVec.x * offset.x;        vec.y+=this.upVec.y * offset.y + this.fwdVec.y * offset.z + leftVec.y * offset.x;        vec.z+=this.upVec.z * offset.y + this.fwdVec.z * offset.z + leftVec.z * offset.x;      }    }  }  return this;}  }
class C{  protected final int F1(int D,int Kmi,int Kri){  int I=Kmi + D;  I=I << Kri | I >>> (32 - Kri);  return ((S1[(I >>> 24) & 0xff] ^ S2[(I >>> 16) & 0xff]) - S3[(I >>> 8) & 0xff]) + S4[I & 0xff];}  }
class C{  protected void merge(Entry<O> other){}  }
class C{  public static int intersectionSize(long[] x,long[] y){  final int lx=x.length, ly=y.length;  final int min=(lx < ly) ? lx : ly;  int res=0;  for (int i=0; i < min; i++) {    res+=Long.bitCount(x[i] & y[i]);  }  return res;}  }
class C{  public ComponentPrintService(Component c,PageFormat format){  setPageFormat(format);  setPrintable(this);  setComponent(c);  Rectangle componentBounds=c.getBounds(null);  setSize(componentBounds.width,componentBounds.height);  setScale(1,1);}  }
class C{  @Override public Long sadd(final String key,final String... members){  checkIsInMultiOrPipeline();  client.sadd(key,members);  return client.getIntegerReply();}  }
class C{  private void createShader(){  if (mWidth == 0)   return;  if (mBitmapCover == null) {    mBitmapCover=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);    mBitmapCover.eraseColor(mCoverColor);  }  mCoverScale=((float)mWidth) / (float)mBitmapCover.getWidth();  mBitmapCover=Bitmap.createScaledBitmap(mBitmapCover,(int)(mBitmapCover.getWidth() * mCoverScale),(int)(mBitmapCover.getHeight() * mCoverScale),true);  mShader=new BitmapShader(mBitmapCover,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  mPaintCover=new Paint();  mPaintCover.setAntiAlias(true);  mPaintCover.setShader(mShader);}  }
class C{  protected PostgreSQLProjectViewsLoader(){}  }
class C{  public JBBPOut Byte(final String str,final JBBPBitOrder bitOrder) throws IOException {  assertNotEnded();  assertStringNotNull(str);  if (this.processCommands) {    for (int i=0; i < str.length(); i++) {      byte value=(byte)str.charAt(i);      if (bitOrder == JBBPBitOrder.MSB0) {        value=JBBPUtils.reverseBitsInByte(value);      }      this.outStream.write(value);    }  }  return this;}  }
class C{  public void addPointToLastLink(Coord coord){  getLastLink().advance();  modified=true;}  }
class C{  private void initValues(GLSurfaceView mGlSurfaceView){  mWidth=mGlSurfaceView.getWidth();  mHeight=mGlSurfaceView.getHeight();  mRandom=new Random(new Date().getTime());}  }
class C{  public ShpOutputStream(OutputStream os){  BufferedOutputStream bos=new BufferedOutputStream(os);  _leos=new LittleEndianOutputStream(bos);}  }
class C{  @Override public void init(){  GwtTour.load();  GwtTour.removeAllCallOuts();  GwtTour.endTour(true);}  }
class C{  private static NamedArgument[] toNamedArguments(Argument[] args){  NamedArgument[] nargs=new NamedArgument[args.length];  for (int i=0; i < args.length; i++) {    nargs[i]=(NamedArgument)args[i];  }  return nargs;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Comment findComment(DbObject object){  if (object.getType() == DbObject.COMMENT) {    return null;  }  String key=Comment.getKey(object);  return comments.get(key);}  }
class C{  @Override public void execute(){  Map<URI,Set<URI>> volumeToMasks=createVolumeToMasksMap();  Set<URI> multiplyPlacedVolumes=new HashSet<>();  if (anyVolumesPlacedToMultipleMasks(multiplyPlacedVolumes,volumeToMasks)) {    for (    URI volumeURI : multiplyPlacedVolumes) {      Set<URI> placedMasks=volumeToMasks.get(volumeURI);      Map<URI,ExportMask> exportMaskMap=createExportMaskMap(placedMasks);      placeVolumeToMaskWithLeastNumberOfVolumes(volumeURI,exportMaskMap);    }  }  Map<URI,ExportMask> maskSetCopy=new HashMap<>(placementDescriptor.getMasks());  for (  Map.Entry<URI,ExportMask> entry : maskSetCopy.entrySet()) {    URI exportMaskURI=entry.getKey();    ExportMask exportMask=entry.getValue();    URI tenant=placementDescriptor.getTenant();    URI project=placementDescriptor.getProject();    StorageSystem vplex=placementDescriptor.getVplex();    StorageSystem array=placementDescriptor.getBackendArray();    URI virtualArray=placementDescriptor.getVirtualArray();    Collection<Initiator> initiators=placementDescriptor.getInitiators();    ExportGroup exportGroup=getVPlexExportGroup(dbClient,vplex,array,virtualArray,exportMask,initiators,tenant,project);    placementDescriptor.mapExportMaskToExportGroup(exportMaskURI,exportGroup);  }}  }
class C{  public String toString(int units,String unitsName){  if (unitsName == null) {    unitsName="";  }  float[] vals=getPrintableArea(units);  String str="(" + vals[0] + ","+ vals[1]+ ")->("+ vals[2]+ ","+ vals[3]+ ")";  return str + unitsName;}  }
class C{  public MqttConfig(){}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:58.234 -0500",hash_original_method="A279029257087CE11FC7A37CBDFB5215",hash_generated_method="BBF29FCAD5F9A043B65C4DCCD2050B9A") @Override public final void cancel(){  if (isValid) {    isValid=false;    ((AbstractSelector)selector()).cancel(this);  }}  }
class C{  public Node item(int index){  if (m_iter != null) {    int node;    int count=m_cachedNodes.size();    if (count > index) {      node=m_cachedNodes.elementAt(index);      return m_dtm.getNode(node);    } else     if (m_last == -1) {      while (((node=m_iter.next()) != DTMAxisIterator.END) && count <= index) {        m_cachedNodes.addElement(node);        count++;      }      if (node == DTMAxisIterator.END) {        m_last=count;      } else {        return m_dtm.getNode(node);      }    }  }  return null;}  }
class C{  public void close() throws IOException {  impl.close();}  }
class C{  @Override public <T>T[] toArray(T[] a){  int size=size();  if (a.length < size)   a=(T[])Array.newInstance(a.getClass().getComponentType(),size);  Object[] result=a;  Iterator it=iterator();  for (int i=0; i < size; i++) {    result[i]=it.next();  }  if (a.length > size) {    a[size]=null;  }  return a;}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  m_fdr.removeFieldValues(fldId);}  }
class C{  public Set<String> keySet(){  if (myNamesSet == null) {    myNamesSet=Collections.unmodifiableSet(nameToDescription.keySet());  }  return myNamesSet;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public Async(int corePoolSize,int maximumPoolSize,String name){  super(corePoolSize,maximumPoolSize,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),new Factory(name));}  }
class C{  private final static boolean isOwnerAppContextDisposed(SequencedEvent se){  if (se != null) {    Object target=se.nested.getSource();    if (target instanceof Component) {      return ((Component)target).appContext.isDisposed();    }  }  return false;}  }
class C{  public void java_lang_reflect_Array_newArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  private void optimizeJumps(MethodNode method){  for (ListIterator<?> lit=method.instructions.iterator(); lit.hasNext(); ) {    AbstractInsnNode insn=(AbstractInsnNode)lit.next();    if (insn.getType() == JUMP_INSN) {      JumpInsnNode jumpInsn=(JumpInsnNode)insn;      LabelNode label=jumpInsn.label;      AbstractInsnNode target;      while (true) {        target=label;        while (target != null && target.getOpcode() < 0) {          target=target.getNext();        }        if (target != null && target.getOpcode() == Opcodes.GOTO) {          label=((JumpInsnNode)target).label;        } else {          break;        }      }      jumpInsn.label=label;      boolean removeJump=false;      if (jumpInsn.getOpcode() == Opcodes.GOTO) {        AbstractInsnNode next=jumpInsn.getNext();        while (next != null) {          if (next == label) {            removeJump=true;            break;          } else           if (next.getOpcode() >= 0) {            break;          }          next=next.getNext();        }      }      if (removeJump) {        lit.remove();      } else {        if (jumpInsn.getOpcode() == Opcodes.GOTO && target != null) {switch (target.getOpcode()) {case Opcodes.IRETURN:case Opcodes.LRETURN:case Opcodes.FRETURN:case Opcodes.DRETURN:case Opcodes.ARETURN:case Opcodes.RETURN:case Opcodes.ATHROW:            method.instructions.set(insn,target.clone(null));        }      }    }  }}}  }
class C{  private void sendTimer(long timeInMSec){  CurrentTimeEvent theEvent=new CurrentTimeEvent(timeInMSec);  EPRuntime runtime=epService.getEPRuntime();  runtime.sendEvent(theEvent);}  }
class C{  public Service_Definition(String name){  super(name,null);}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public final static String formatElements(final HeaderElement[] elems,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatElements(null,elems,quote).toString();}  }
class C{  private void checkAbstract(@NotNull final String... methodNames){  final String[] modules={"Class","SuperClass"};  configureMultiFile(modules);  doPullUp("Child","Parent",true,methodNames);  checkMultiFile(modules);}  }
class C{  public void addStorableClass(String name,Class c){  nameToPrototypeMap.put(name,c);  classToNameMap.put(c,name);}  }
class C{  public ResultPanel(JFrame parent){  super();  m_Parent=parent;  m_QueryPanel=null;  m_NameCounter=0;  m_Listeners=new HashSet<ResultChangedListener>();  createPanel();}  }
class C{  public Builder sessionId(String sessionId){  this.sessionId=sessionId;  return this;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  @Override BufferedImage createImage(final int w,final int h,final byte[] rawData){  final BufferedImage image;  final byte[] rgb=new byte[w * h * 3];  final int bytesCount=rawData.length;  final int byteCount=rawData.length / componentCount;  final float[] values=new float[componentCount];  int j=0, j2=0;  for (int i=0; i < byteCount; i++) {    if (j >= bytesCount) {      break;    }    for (int comp=0; comp < componentCount; comp++) {      values[comp]=((rawData[j] & 255) / 255f);      j++;    }    setColor(values,componentCount);    final int foreground=altCS.currentColor.getRGB();    rgb[j2]=(byte)((foreground >> 16) & 0xFF);    rgb[j2 + 1]=(byte)((foreground >> 8) & 0xFF);    rgb[j2 + 2]=(byte)((foreground) & 0xFF);    j2+=3;  }  final int[] bands={0,1,2};  image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);  final DataBuffer dataBuf=new DataBufferByte(rgb,rgb.length);  final Raster raster=Raster.createInterleavedRaster(dataBuf,w,h,w * 3,3,bands,null);  image.setData(raster);  return image;}  }
class C{  private void schedule(){  if (!scheduler.isShutdown()) {    future=scheduler.schedule(this,sweepInterval,TimeUnit.MILLISECONDS);  }}  }
class C{  public static String colorAsKMLString(int aColor){  return String.format("%02X%02X%02X%02X",Color.alpha(aColor),Color.blue(aColor),Color.green(aColor),Color.red(aColor));}  }
class C{  @Override public final void onMessage(String frame){  try {    JSONObject object=((JSONObject)JSON_PARSER.parse(frame));    try {      String message=(String)object.get("message");      if (message.isEmpty()) {        Discord4J.logger.error("Received unknown error from Discord. Complain to the Discord devs, not me!");      } else       Discord4J.logger.debug("Received error from Discord: {}",message);    } catch (    Exception e) {    }    String s=(String)object.get("t");    JSONObject d=(JSONObject)object.get("d");switch (s) {case "READY":      DiscordClient.this.ourUser=DiscordClient.this.constructUserFromJSON((JSONObject)d.get("user"));    DiscordClient.this.heartbeat=(long)d.get("heartbeat_interval");  Discord4J.logger.debug("Received heartbeat interval of {}.",DiscordClient.this.heartbeat);JSONArray guilds=(JSONArray)d.get("guilds");for (Object o : guilds) {JSONObject guild=(JSONObject)o;JSONArray members=(JSONArray)guild.get("members");JSONArray channels=(JSONArray)guild.get("channels");JSONArray presences=(JSONArray)guild.get("presences");String name=(String)guild.get("name");String guildID=(String)guild.get("id");String icon=(String)guild.get("icon");String owner=(String)guild.get("owner_id");Guild g;guildList.add(g=new Guild(name,guildID,icon,owner));for (Object o1 : members) {  JSONObject member=(JSONObject)((JSONObject)o1).get("user");  g.addUser(new User((String)member.get("username"),(String)member.get("id"),(String)member.get("avatar")));}for (Object o1 : presences) {  JSONObject presence=(JSONObject)o1;  User user=g.getUserByID((String)((JSONObject)presence.get("user")).get("id"));  user.setPresence(Presences.valueOf(((String)presence.get("status")).toUpperCase()));  user.setGameID((Long)presence.get("game_id"));}for (Object o1 : channels) {  JSONObject channel=(JSONObject)o1;  String type=(String)channel.get("type");  if ("text".equalsIgnoreCase(type)) {    String channelID=(String)channel.get("id");    String chName=(String)channel.get("name");    Channel c;    g.addChannel(c=new Channel(chName,channelID,g));    try {      DiscordClient.this.getChannelMessages(c);    } catch (    HTTP403Exception e) {      Discord4J.logger.error("No permission for channel \"{}\" in guild \"{}\". Are you logged in properly?",chName,name);    }catch (    Exception e) {      Discord4J.logger.error("Unable to get messages for channel \"{}\" in guild \"{}\" (Cause: {}).",chName,name,e.getClass().getSimpleName());    }  }}}JSONArray privateChannelsArray=(JSONArray)d.get("private_channels");for (Object o : privateChannelsArray) {JSONObject privateChannel=(JSONObject)o;String id=(String)privateChannel.get("id");JSONObject user=(JSONObject)privateChannel.get("recipient");User recipient=new User((String)user.get("username"),(String)user.get("id"),(String)user.get("avatar"));PrivateChannel channel=new PrivateChannel(recipient,id);try {DiscordClient.this.getChannelMessages(channel);} catch (HTTP403Exception e) {Discord4J.logger.error("No permission for the private channel for \"{}\". Are you logged in properly?",channel.getRecipient().getName());}catch (Exception e) {Discord4J.logger.error("Unable to get messages for the private channel for \"{}\" (Cause: {}).",channel.getRecipient().getName(),e.getClass().getSimpleName());}privateChannels.add(channel);}Discord4J.logger.debug("Logged in as {} (ID {}).",DiscordClient.this.ourUser.getName(),DiscordClient.this.ourUser.getID());new Thread(null).start();DiscordClient.this.dispatcher.dispatch(new ReadyEvent());break;case "MESSAGE_CREATE":JSONObject author=(JSONObject)d.get("author");String username=(String)author.get("username");String id=(String)author.get("id");String channelID=(String)d.get("channel_id");String content=(String)d.get("content");String messageID=(String)d.get("id");JSONArray array=(JSONArray)d.get("mentions");String time=(String)d.get("timestamp");String[] mentionedIDs=new String[array.size()];boolean mentioned=false;for (int i=0; i < array.size(); i++) {JSONObject userInfo=(JSONObject)array.get(i);String userID=(String)userInfo.get("id");if (userID.equalsIgnoreCase(DiscordClient.get().getOurUser().getID())) {mentioned=true;}mentionedIDs[i]=userID;}Channel channel=DiscordClient.get().getChannelByID(channelID);if (null != channel) {Message message1=new Message(messageID,content,DiscordClient.get().getUserByID(id),channel,DiscordClient.get().convertFromTimestamp(time));if (!id.equalsIgnoreCase(DiscordClient.get().getOurUser().getID())) {channel.addMessage(message1);Discord4J.logger.debug("Message from: {} ({}) in channel ID {}: {}",username,id,channelID,content);if (content.contains("discord.gg/")) {String inviteCode=content.split("discord\\.gg/")[1].split(" ")[0];Discord4J.logger.debug("Received invite code \"{}\"",inviteCode);DiscordClient.get().dispatcher.dispatch(new InviteReceivedEvent(new Invite(inviteCode),message1));}if (mentioned) {DiscordClient.this.dispatcher.dispatch(new MentionEvent(message1));}DiscordClient.this.dispatcher.dispatch(new MessageReceivedEvent(message1));}}break;case "TYPING_START":id=(String)d.get("user_id");channelID=(String)d.get("channel_id");User user;channel=getChannelByID(channelID);if (channel.isPrivate()) {user=((PrivateChannel)channel).getRecipient();} else {user=channel.getParent().getUserByID(id);}if (null != channel && null != user) {dispatcher.dispatch(new TypingEvent(user,channel));}break;case "GUILD_CREATE":String name=(String)d.get("name");id=(String)d.get("id");JSONArray members=(JSONArray)d.get("members");JSONArray channels=(JSONArray)d.get("channels");String icon=(String)d.get("icon");String owner=(String)d.get("owner_id");Guild guild=new Guild(name,id,icon,owner);DiscordClient.this.guildList.add(guild);for (Object o : members) {JSONObject object1=(JSONObject)o;guild.addUser(new User((String)object1.get("username"),(String)object1.get("id"),(String)object1.get("avatar")));}for (Object o : channels) {JSONObject channelData=(JSONObject)o;if (((String)channelData.get("type")).equalsIgnoreCase("text")) {guild.addChannel(channel=new Channel((String)channelData.get("name"),(String)channelData.get("id"),guild));try {getChannelMessages(channel);} catch (Exception e) {e.printStackTrace();}}}DiscordClient.get().dispatcher.dispatch(new GuildCreateEvent(guild));Discord4J.logger.debug("New guild has been joined/created! \"{}\" with ID {}.",name,id);break;case "GUILD_MEMBER_ADD":user=constructUserFromJSON((JSONObject)d.get("user"));String guildID=(String)d.get("guild_id");guild=getGuildByID(guildID);if (null != guild) {guild.addUser(user);Discord4J.logger.debug("User \"{}\" joined guild \"{}\".",user.getName(),guild.getName());dispatcher.dispatch(new UserJoinEvent(guild,user,convertFromTimestamp((String)d.get("joined_at"))));}break;case "GUILD_MEMBER_REMOVE":user=constructUserFromJSON((JSONObject)d.get("user"));guildID=(String)d.get("guild_id");guild=getGuildByID(guildID);if (null != guild && guild.getUsers().contains(user)) {guild.getUsers().remove(user);Discord4J.logger.debug("User \"{}\" has been removed from or left guild \"{}\".",user.getName(),guild.getName());dispatcher.dispatch(new UserLeaveEvent(guild,user));}break;case "MESSAGE_UPDATE":id=(String)d.get("id");channelID=(String)d.get("channel_id");content=(String)d.get("content");channel=DiscordClient.this.getChannelByID(channelID);Message m=channel.getMessageByID(id);if (null != m && !m.getAuthor().getID().equals(getOurUser().getID()) && !m.getContent().equals(content)) {Message newMessage;int index=channel.getMessages().indexOf(m);channel.getMessages().remove(m);channel.getMessages().add(index,newMessage=new Message(id,content,m.getAuthor(),channel,m.getTimestamp()));dispatcher.dispatch(new MessageUpdateEvent(m,newMessage));}break;case "MESSAGE_DELETE":id=(String)d.get("id");channelID=(String)d.get("channel_id");channel=DiscordClient.this.getChannelByID(channelID);if (null != channel) {Message message=channel.getMessageByID(id);if (null != message && !message.getAuthor().getID().equalsIgnoreCase(DiscordClient.this.ourUser.getID())) {channel.getMessages().remove(message);DiscordClient.get().dispatcher.dispatch(new MessageDeleteEvent(message));}}break;case "PRESENCE_UPDATE":Presences presences=Presences.valueOf(((String)d.get("status")).toUpperCase());Long gameId=(Long)d.get("game_id");guild=getGuildByID((String)d.get("guild_id"));if (null != guild && null != presences) {user=guild.getUserByID((String)((JSONObject)d.get("user")).get("id"));if (null != user) {if (!user.getPresence().equals(presences)) {dispatcher.dispatch(new PresenceUpdateEvent(guild,user,user.getPresence(),presences));user.setPresence(presences);Discord4J.logger.debug("User \"{}\" changed presence to {}",user.getName(),user.getPresence());}if (!user.getGameID().equals(Optional.ofNullable(gameId))) {dispatcher.dispatch(new GameChangeEvent(guild,user,user.getGameID().isPresent() ? user.getGameID().get() : null,gameId));user.setGameID(gameId);Discord4J.logger.debug("User \"{}\" changed game to {}.",user.getName(),getGameByID(gameId).isPresent() ? getGameByID(gameId).get() : "null");}}}break;case "GUILD_DELETE":id=(String)d.get("id");guild=getGuildByID(id);getGuilds().remove(guild);Discord4J.logger.debug("You have been kicked from or left \"{}\"! :O",guild.getName());dispatcher.dispatch(new GuildLeaveEvent(guild));break;case "CHANNEL_CREATE":boolean isPrivate=(boolean)d.get("is_private");id=(String)d.get("id");if (isPrivate) {boolean b=false;for (PrivateChannel privateChannel : privateChannels) {if (privateChannel.getID().equalsIgnoreCase(id)) b=true;}if (b) break;user=constructUserFromJSON((JSONObject)d.get("recipient"));PrivateChannel privateChannel;privateChannels.add(privateChannel=new PrivateChannel(user,id));try {getChannelMessages(privateChannel);} catch (Exception e) {e.printStackTrace();}} else {String type=(String)d.get("type");if ("text".equalsIgnoreCase(type)) {name=(String)d.get("name");id=(String)d.get("id");guildID=(String)d.get("guild_id");guild=getGuildByID(guildID);if (null != guild) {channel=new Channel(name,id,guild);try {getChannelMessages(channel);} catch (Exception e) {e.printStackTrace();}dispatcher.dispatch(new ChannelCreateEvent(channel));}}}break;case "CHANNEL_DELETE":if ("text".equalsIgnoreCase((String)d.get("type"))) {channel=getChannelByID((String)d.get("id"));channel.getParent().getChannels().remove(channel);}break;default :Discord4J.logger.warn("Unknown message received: {} (ignoring): {}",s,frame);}} catch (ParseException e) {e.printStackTrace();}}  }
class C{  private static FDBigInteger big5powRec(int p){  if (p < MAX_FIVE_POW) {    return POW_5_CACHE[p];  }  int q, r;  q=p >> 1;  r=p - q;  FDBigInteger bigq=big5powRec(q);  if (r < SMALL_5_POW.length) {    return bigq.mult(SMALL_5_POW[r]);  } else {    return bigq.mult(big5powRec(r));  }}  }
class C{  public boolean adjustValue(double key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public static ScheduledThreadPoolExecutor newScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory){  return newScheduledThreadPoolExecutor(corePoolSize,threadFactory,defaultHandler);}  }
class C{  private SipAddress(){}  }
class C{  public synchronized Collection<LocalCandidate> harvest(Component component){  Collection<LocalCandidate> candidates=new HashSet<>();  int retries=0;  logger.fine("Begin UPnP harvesting");  try {    if (device == null) {      if (finishThreads == 0) {        try {          UPNPThread wanIPThread=new UPNPThread(stIP);          UPNPThread wanPPPThread=new UPNPThread(stPPP);          wanIPThread.start();          wanPPPThread.start();synchronized (rootSync) {            while (finishThreads != 2) {              rootSync.wait();            }          }          if (wanIPThread.getDevice() != null) {            device=wanIPThread.getDevice();          } else           if (wanPPPThread.getDevice() != null) {            device=wanPPPThread.getDevice();          }        } catch (        Throwable e) {          logger.info("UPnP discovery failed: " + e);        }      }      if (device == null)       return candidates;    }    InetAddress localAddress=device.getLocalAddress();    String externalIPAddress=device.getExternalIPAddress();    PortMappingEntry portMapping=new PortMappingEntry();    IceSocketWrapper socket=new IceUdpSocketWrapper(new MultiplexingDatagramSocket(0,localAddress));    int port=socket.getLocalPort();    int externalPort=socket.getLocalPort();    while (retries < MAX_RETRIES) {      if (!device.getSpecificPortMappingEntry(port,"UDP",portMapping)) {        if (device.addPortMapping(externalPort,port,localAddress.getHostAddress(),"UDP","ice4j.org: " + port)) {          List<LocalCandidate> cands=createUPNPCandidate(socket,externalIPAddress,externalPort,component,device);          logger.info("Add UPnP port mapping: " + externalIPAddress + " "+ externalPort);          for (          LocalCandidate cand : cands) {            if (component.addLocalCandidate(cand)) {              candidates.add(cand);            }          }          break;        } else {          port++;        }      } else {        port++;      }      retries++;    }  } catch (  Throwable e) {    logger.info("Exception while gathering UPnP candidates: " + e);  }  return candidates;}  }
class C{  public static double toDegrees(double radians){  return radians * (180.0 / PI);}  }
class C{  public static int binarySearch(float[] array,float value){  return binarySearch(array,0,array.length,value);}  }
class C{  public VersioningTestV2(VersioningTestV2 other){  __isset_bitfield=other.__isset_bitfield;  this.begin_in_both=other.begin_in_both;  this.newint=other.newint;  this.newbyte=other.newbyte;  this.newshort=other.newshort;  this.newlong=other.newlong;  this.newdouble=other.newdouble;  if (other.isSetNewstruct()) {    this.newstruct=new Bonk(other.newstruct);  }  if (other.isSetNewlist()) {    List<Integer> __this__newlist=new ArrayList<Integer>(other.newlist);    this.newlist=__this__newlist;  }  if (other.isSetNewset()) {    Set<Integer> __this__newset=new HashSet<Integer>(other.newset);    this.newset=__this__newset;  }  if (other.isSetNewmap()) {    Map<Integer,Integer> __this__newmap=new HashMap<Integer,Integer>(other.newmap);    this.newmap=__this__newmap;  }  if (other.isSetNewstring()) {    this.newstring=other.newstring;  }  this.end_in_both=other.end_in_both;}  }
class C{  public CoapClient(String uri){  this.uri=uri;}  }
class C{  private boolean verifyPermissions(@NonNull int[] grantResults){  if (grantResults.length < 1) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public TestFBEscapedFunctionHelper(String name){  super(name);}  }
class C{  private LogManager(){}  }
class C{  public boolean isNumeralPunctuation(char c){  return isDecimalPoint(c) || isThousandSeparator(c);}  }
class C{  public boolean isPrimary(){  return this.epType == (byte)2;}  }
class C{  @Override public void updateTalkCycle(Cycle cycle){  talkCycle=cycle;  talkCycleStream.onNext(talkCycle);}  }
class C{  public SimpleProcessImage(int unit){  unitID=unit;}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  private static String formatTimeRow(String name,long time,int width){  return name + StringUtils.padLeft(String.valueOf(time),Math.max(0,width - name.length()));}  }
class C{  public double calculateLikelihood(MutableTree tree,String[] attributes,Contrastable[] mles,double kappa){  ContrastedTraitNode contrastNode=new ContrastedTraitNode(tree,tree.getRoot(),attributes);  contrastNode.calculateContrasts(kappa);  for (int i=0; i < mles.length; i++) {    mles[i]=contrastNode.getTraitValue(i);  }  return calculateTraitsLikelihood(contrastNode);}  }
class C{  public boolean isInfoEnabled(){  return isLoggable(Log.INFO);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.825 -0500",hash_original_method="981EAB54F552460A30185E1B96B8DE52",hash_generated_method="7B3F6A231442AC50542E4942604901C3") public void pauseRequest(boolean pause){  if (mRequest != null) {    mRequest.setLoadingPaused(pause);  }}  }
class C{  public static DecomposableMatchBuilder1<Short,Short> caseShort(MatchesAny s){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Short.class));}  }
class C{  private boolean hasNextTlsMode(){  return nextTlsMode != TLS_MODE_NULL;}  }
class C{  @Override protected RelOptCluster createCluster(RelOptPlanner planner,RexBuilder rexBuilder){  return QuarkMaterializeCluster.create(this.holderPlanner,rexBuilder);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.854 -0500",hash_original_method="DD9AA0788424353442B0CFE218D97412",hash_generated_method="D16B9D80B8A3FF76F7E29D31CF350BD3") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  @RequestMapping(value={"/dashboard"},method=RequestMethod.GET) public String dashboard(ModelMap model,HttpServletRequest request){  return DASHBOARD_VIEW;}  }
class C{  public boolean isInSegment(double angle){  if (angle >= mStartAngle && angle <= mEndAngle) {    return true;  }  double cAngle=angle % 360;  double startAngle=mStartAngle;  double stopAngle=mEndAngle;  while (stopAngle > 360) {    startAngle-=360;    stopAngle-=360;  }  return cAngle >= startAngle && cAngle <= stopAngle;}  }
class C{  private void tred2(){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    V[i][i]=1.0;    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V[k][i + 1] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V[k][i + 1] * V[k][j];        }        for (int k=0; k <= i; k++) {          V[k][j]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V[k][i + 1]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}  }
class C{  public void addNetwork(BNetwork network){  for (  BNode node : new ArrayList<BNode>(network.getNodes())) {    if (hasNode(node.getId())) {      removeNode(node.getId());    }  }  for (  BNode node : network.getNodes()) {    addNode(node.copy());  }  for (  BNode oldNode : network.getNodes()) {    BNode newNode=getNode(oldNode.getId());    for (    String inputNodeId : oldNode.getInputNodeIds()) {      BNode newInputNode=getNode(inputNodeId);      newNode.addInputNode(newInputNode);    }  }}  }
class C{  boolean removeMapping(Object o){  if (!(o instanceof Map.Entry))   return false;  Entry<K,V>[] tab=getTable();  Map.Entry<?,?> entry=(Map.Entry<?,?>)o;  Object k=maskNull(entry.getKey());  int h=hash(k);  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return true;    }    prev=e;    e=next;  }  return false;}  }
class C{  public void toDensePolar(){switch (opMode) {case POLAR_DENSE:    return;case POLAR_SPARSE:  sparsePolarToDensePolar();return;case CARTESIAN:cartesianToDensePolar();return;case HERMITIAN:cartesianToDensePolar();return;}}  }
class C{  public void resumeThumbnailDownload(){  if (mGetThumbnailTask != null && mGetThumbnailTask.getStatus() == AsyncTask.Status.PENDING) {    mGetThumbnailTask.execute((Void)null);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY:    return getTypingStrategy();case TypeRefsPackage.STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:  setTypingStrategy((TypingStrategy)arguments.get(0));return null;case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return hasPostponedSubstitutionFor((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public static Map<String,Object> executeFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  EntityConditionList<EntityCondition> entityConditionList=UtilGenerics.cast(context.get("entityConditionList"));  List<String> orderByList=checkList(context.get("orderByList"),String.class);  boolean noConditionFind="Y".equals(context.get("noConditionFind"));  boolean distinct="Y".equals(context.get("distinct"));  List<String> fieldList=UtilGenerics.checkList(context.get("fieldList"));  Locale locale=(Locale)context.get("locale");  Set<String> fieldSet=null;  if (fieldList != null) {    fieldSet=UtilMisc.makeSetWritable(fieldList);  }  Integer maxRows=(Integer)context.get("maxRows");  maxRows=maxRows != null ? maxRows : -1;  Delegator delegator=dctx.getDelegator();  EntityListIterator listIt=null;  int listSize=0;  try {    if (noConditionFind || (entityConditionList != null && entityConditionList.getConditionListSize() > 0)) {      listIt=EntityQuery.use(delegator).select(fieldSet).from(entityName).where(entityConditionList).orderBy(orderByList).cursorScrollInsensitive().maxRows(maxRows).distinct(distinct).queryIterator();      listSize=listIt.getResultsSizeAfterPartialList();    }  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorRunning",UtilMisc.toMap("entityName",entityName,"errorString",e.getMessage()),locale));  }  Map<String,Object> results=ServiceUtil.returnSuccess();  results.put("listIt",listIt);  results.put("listSize",listSize);  return results;}  }
class C{  protected void invalidateTransformStack(){  transformStack.clear();  transformStackValid=false;}  }
class C{  private boolean subjectListImpliesPrincipalEntry(LinkedList<PrincipalEntry> subjectList,PrincipalEntry pppe){  ListIterator<PrincipalEntry> li=subjectList.listIterator(0);  while (li.hasNext()) {    PrincipalEntry listPppe=li.next();    if (pppe.getPrincipalClass().equals(PrincipalEntry.WILDCARD_CLASS) || pppe.getPrincipalClass().equals(listPppe.getPrincipalClass())) {      if (pppe.getPrincipalName().equals(PrincipalEntry.WILDCARD_NAME) || pppe.getPrincipalName().equals(listPppe.getPrincipalName()))       return true;    }  }  return false;}  }
class C{  public static long addAndGet(AtomicLong current,long toAdd){  long u, r;  do {    r=current.get();    if (r == Long.MAX_VALUE) {      return Long.MAX_VALUE;    }    u=addCap(r,toAdd);  } while (!current.compareAndSet(r,u));  return u;}  }
class C{  private int decodeGainControl(GainBlock block,int numBands){  int b;  for (b=0; b <= numBands; b++) {    block.gBlock[b].numPoints=br.read(3);    int[] level=block.gBlock[b].levCode;    int[] loc=block.gBlock[b].locCode;    for (int j=0; j < block.gBlock[b].numPoints; j++) {      level[j]=br.read(4);      loc[j]=br.read(5);      if (j > 0 && loc[j] <= loc[j - 1]) {        return AT3_ERROR;      }    }  }  for (; b < 4; b++) {    block.gBlock[b].numPoints=0;  }  return 0;}  }
class C{  public void removeStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.remove(listener);  }}  }
class C{  public ByteArrayResource(String mimetype,byte[] bytes){  super(mimetype);  this.bytes=bytes;}  }
class C{  public int hashCode(){  return 13 * suit + rank;}  }
class C{  public void disableImageAccessForCreateReplicaStep(URI protectionDevice,Class<? extends DataObject> clazz,List<URI> copyList,Set<String> volumeWWNs,String opId) throws ControllerException {  TaskCompleter completer=null;  try {    _log.info("Deactivating a bookmark on the RP CG(s)");    completer=new RPCGCopyVolumeCompleter(clazz,copyList,opId);    ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,protectionDevice);    if (system == null || system.getInactive()) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionActivateSnapshot(protectionDevice);    }    RecoverPointClient rp=RPHelper.getRecoverPointClient(system);    MultiCopyDisableImageRequestParams request=new MultiCopyDisableImageRequestParams();    request.setVolumeWWNSet(volumeWWNs);    MultiCopyDisableImageResponse response=rp.disableImageCopies(request);    if (response == null) {      throw DeviceControllerExceptions.recoverpoint.failedDisableAccessOnRP();    }    completer.ready(_dbClient);  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,e);    }  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.jobFailed(e));    }  }}  }
class C{  public static int size(TreeNode self){  return self.getChildCount();}  }
class C{  private boolean isWhitespaceText(String text){  if (text == null || text.length() == 0)   return false;  String[] delimiters=fDocument.getLegalLineDelimiters();  int index=TextUtilities.startsWith(delimiters,text);  if (index > -1) {    char c;    int length=text.length();    for (int i=delimiters[index].length(); i < length; i++) {      c=text.charAt(i);      if (c != ' ' && c != '\t')       return false;    }    return true;  }  return false;}  }
class C{  public int startCharInFile(){  return startCharInFile;}  }
class C{  public char[] genericSignature(){  StringBuffer sig=null;  if (this.typeVariables != Binding.NO_TYPE_VARIABLES) {    sig=new StringBuffer(10);    sig.append('<');    for (int i=0, length=this.typeVariables.length; i < length; i++)     sig.append(this.typeVariables[i].genericSignature());    sig.append('>');  } else {    noSignature:     if (this.superclass == null || !this.superclass.isParameterizedType()) {      for (int i=0, length=this.superInterfaces.length; i < length; i++)       if (this.superInterfaces[i].isParameterizedType())       break noSignature;      return null;    }    sig=new StringBuffer(10);  }  if (this.superclass != null)   sig.append(this.superclass.genericTypeSignature()); else   sig.append(this.scope.getJavaLangObject().genericTypeSignature());  for (int i=0, length=this.superInterfaces.length; i < length; i++)   sig.append(this.superInterfaces[i].genericTypeSignature());  return sig.toString().toCharArray();}  }
class C{  @Override protected void selectionChanged(String changedSelector){  SelectionState state=getSelection();  int scenarioIdx=state.getIndex(MapAgentFrame.SCENARIO_SEL);  RouteFindingAgentFrame.MapType mtype=(scenarioIdx < 3) ? MapType.ROMANIA : MapType.AUSTRALIA;  if (mtype != usedMap) {    usedMap=mtype;    String[] items=null;switch (mtype) {case ROMANIA:      items=ROMANIA_DESTS;    break;case AUSTRALIA:  items=AUSTRALIA_DESTS;break;}setSelectorItems(DESTINATION_SEL,items,0);}super.selectionChanged(changedSelector);}  }
class C{  public static boolean createInvoice(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int C_InvoiceLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,String Description,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND C_InvoiceLine_ID=" + C_InvoiceLine_ID + " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"C_InvoiceLine_ID=?",C_InvoiceLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setC_InvoiceLine_ID(C_InvoiceLine_ID);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  protected boolean validListContainsFoundation(String foundation){synchronized (validList) {    for (    CandidatePair pair : validList) {      if (pair.getFoundation().equals(foundation))       return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public RunIterator createRunIterator(int runNumber) throws Exception {  FileRunIterator<PostingInRun> fri=new FileRunIterator<PostingInRun>(files[runNumber][0],files[runNumber][1],runNumber,postingClass,super.numberOfFields);  ((TermPayloadPostingInRun<PAYLOAD>)fri.current()).setPayloadConfig(payloadConf);  return fri;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void parseExceptionTables(){  ExceptionHandlerMap eMap=gc.getMethod().getExceptionHandlerMap();  if (DBG_EX)   db("\texception handlers for " + gc.getMethod() + ": "+ eMap);  if (eMap == null)   return;  startPCs=eMap.getStartPC();  endPCs=eMap.getEndPC();  handlerPCs=eMap.getHandlerPC();  int numExceptionHandlers=startPCs.length;  exceptionTypes=new TypeOperand[numExceptionHandlers];  for (int i=0; i < numExceptionHandlers; i++) {    exceptionTypes[i]=new TypeOperand(eMap.getExceptionType(i));    if (DBG_EX)     db("\t\t[" + startPCs[i] + ","+ endPCs[i]+ "] "+ eMap.getExceptionType(i));  }}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  protected void paintImage(Graphics g,int x,int y){  if (bgImage != null) {    do {      int rc=bgImage.validate(null);      if (rc == VolatileImage.IMAGE_RESTORED) {        renderImage(bgImage.getWidth(),bgImage.getHeight(),getScalingHint());      }      g.drawImage(bgImage,x,y,null);    } while (bgImage.contentsLost());  }}  }
class C{  public boolean hasBatchInterrupted(){  return hasExtension(BatchInterrupted.class);}  }
class C{  public static <A>ListTValue<A> fromStream(final AnyMValue<? extends Stream<A>> monads){  return of(monads.map(null));}  }
class C{  public static <T>Supplier<T> memoizeSupplier(final Supplier<T> s,final Cacheable<T> cache){  return null;}  }
class C{  public final CC gapX(String before,String after){  if (before != null)   hor.setGapBefore(ConstraintParser.parseBoundSize(before,true,true));  if (after != null)   hor.setGapAfter(ConstraintParser.parseBoundSize(after,true,true));  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceItem_();}  }
class C{  public void reset() throws IOException {  m_structure=null;  m_JSON=null;  setRetrieval(NONE);  if (m_File != null) {    setFile(new File(m_File));  } else   if ((m_URL != null) && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
class C{  private void limitFrequency(){  mFrequencyControl.receive(mLoopFrequency);  if (mLoopFrequency > MAXIMUM_FREQUENCY) {    mLoopFrequency=MAXIMUM_FREQUENCY;  }  if (mLoopFrequency < -MAXIMUM_FREQUENCY) {    mLoopFrequency=-MAXIMUM_FREQUENCY;  }}  }
class C{  public int indexOf(float value){  return indexOf(0,value);}  }
class C{  private boolean isSet(int position){  return (position < bitString.length) && bitString[position];}  }
class C{  static WordCountsResponse aggregateResponses(List<WordCountsResponse> responses){  WordCountsResponse result=WordCountsResponse.fromWordCounts(new HashMap<>());  responses.forEach(null);  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE:    return value != null;}return super.eIsSet(featureID);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public <T>T read(T value,String source,boolean strict) throws Exception {  return read(value,new StringReader(source),strict);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public boolean remove() throws IOException {  return getBestPath().remove();}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public BufferedImage composeImageForSector(Sector sector,int canvasWidth,int canvasHeight,double aspectRatio,BufferedImage image){  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (!this.getRenderables().iterator().hasNext()) {    Logging.logger().severe(Logging.getMessage("generic.NoImagesAvailable"));    return null;  }  if (image == null)   image=new BufferedImage(canvasWidth,canvasHeight,BufferedImage.TYPE_INT_RGB);  for (  Renderable r : this.getRenderables()) {    SurfaceImage si=(SurfaceImage)r;    if (si.getImageSource() == null)     continue;    BufferedImage sourceImage=null;    try {      if (si.getImageSource() instanceof String)       sourceImage=ImageIO.read(new File((String)si.getImageSource())); else       sourceImage=(BufferedImage)si.getImageSource();    } catch (    IOException e) {      Logging.logger().severe(Logging.getMessage("generic.ExceptionAttemptingToReadImageFile",sourceImage));      return null;    }    ImageUtil.mergeImage(sector,si.getSector(),aspectRatio,sourceImage,image);  }  return image;}  }
class C{  public boolean removeGatewaySenderFromSystem(ObjectName objectName,GatewaySenderMXBean proxy,FederationComponent oldState){  if (mapOfGatewaySenders != null) {    mapOfGatewaySenders.remove(objectName);    gatewaySenderSetSize=mapOfGatewaySenders.values().size();    if (mapOfGatewaySenders.values().size() == 0) {      gatewaySenderSetSize=0;      return true;    }  }  updateGatewaySender(objectName,null,oldState);  return false;}  }
class C{  public CompositeContext createContext(ColorModel srcColorModel,ColorModel dstColorModel,RenderingHints hints){  return new SunCompositeContext(this,srcColorModel,dstColorModel);}  }
class C{  public boolean isBad(){  return (value & SEVERITY_MASK) == SEVERITY_BAD;}  }
class C{  public static List<JavaType> findSuperTypes(JavaType type,Class<?> endBefore){  return findSuperTypes(type,endBefore,new ArrayList<JavaType>());}  }
class C{  void clear(){  nextHorizontal=null;  prevHorizontal=null;  nextVertical=null;  prevVertical=null;}  }
class C{  public DellSCCloning(){  this.connectionManager=DellSCConnectionManager.getInstance();}  }
class C{  private String interpretReplaceEscapes(String replaceText,String foundText){  int length=replaceText.length();  boolean inEscape=false;  StringBuffer buf=new StringBuffer(length);  fRetainCaseMode=RC_MIXED;  for (int i=0; i < length; i++) {    final char ch=replaceText.charAt(i);    if (inEscape) {      i=interpretReplaceEscape(ch,i,buf,replaceText,foundText);      inEscape=false;    } else     if (ch == '\\') {      inEscape=true;    } else     if (ch == '$') {      buf.append(ch);      if (i + 2 < length) {        char ch1=replaceText.charAt(i + 1);        char ch2=replaceText.charAt(i + 2);        if (ch1 == '0' && '0' <= ch2 && ch2 <= '9') {          buf.append("0\\");          i++;        }      }    } else {      interpretRetainCase(buf,ch);    }  }  if (inEscape) {    buf.append('\\');  }  return buf.toString();}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  SessionEditorWorkbench graph=sessionEditor.getSessionWorkbench();  SessionWrapper sessionWrapper=graph.getSessionWrapper();  if (sessionWrapper.isSessionChanged()) {    String name=sessionWrapper.getName();    String msg="Do you want to save the changes you made to " + name + "?";    int response=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),msg,"Fair Warning",JOptionPane.YES_NO_CANCEL_OPTION);    if (response == JOptionPane.YES_OPTION) {      SaveSessionAction saveSessionAction=new SaveSessionAction();      saveSessionAction.actionPerformed(e);      this.saved=saveSessionAction.isSaved();    } else     if (response == JOptionPane.CANCEL_OPTION) {      return;    }  }  DesktopController.getInstance().closeFrontmostSession();}  }
class C{  public PropertiesImportException(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private LocoNetMessage createDuplexScanQueryPacket(int channelNum){  int i=0;  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_SCAN_QUERY_B2);  m.setElement(i++,LnConstants.RE_DPLX_SCAN_QUERY_B3);  m.setElement(i++,LnConstants.RE_DPLX_SCAN_QUERY_B4);  m.setElement(i++,channelNum);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  public static boolean isPrivate(int mod){  return Modifier.isPrivate(mod);}  }
class C{  private static int bufToHash(char[] buf,int len){  int hash=len;  hash<<=5;  hash+=buf[0] - 0x60;  int j=len;  for (int i=0; i < 4 && j > 0; i++) {    j--;    hash<<=5;    hash+=buf[j] - 0x60;  }  return hash;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void initialiseByteArrayValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  byteValues=new byte[size][];  columnByteValues=new byte[size][][];}  }
class C{  public void messageArrived(DMessage msg,DProtocol which){  preMessageArrived(msg,which);  msg.reset();  m_manager.messageArrived(msg,which);  msg.reset();  postMessageArrived(msg,which);}  }
class C{  final public int counter(){  return counter;}  }
class C{  public BgzfInputStream(File bamFile) throws FileNotFoundException {  this(new FileInputStream(bamFile));}  }
class C{  public long count(final QueryBuilder q,final String indexName){  SearchResponse response=elasticsearchClient.prepareSearch(indexName).setQuery(q).setSize(0).execute().actionGet();  return response.getHits().getTotalHits();}  }
class C{  public void testCustomFactoryNoProperties(){  PlatformJavaObjectFactoryProxy proxy=proxyForCustom(NO_DFLT_CTOR_FACTORY_CLS_NAME,Collections.<String,Object>emptyMap());  Object val=proxy.factory(ctx).create();  assertEquals(val,new TestJavaObject());}  }
class C{  public SelectionInputDialog(Window owner,String key,boolean editable,Collection<T> selectionValues,T initialSelectionValue,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,keyArguments);  comboBox.setEditable(editable);}  }
class C{  public void removeExtendedInfo(){  extendedInfo=null;  renewEntityCapsVersion();}  }
class C{  public boolean containsKey(Object key){  return false;}  }
class C{  protected void recordSelected(int key){  if (m_C_Invoice_ID != key) {    refresh();  }  p_centerSouth.setOpen(p_table.getSelectedCount() > 0);  return;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  @Override public final float decodeNormValue(long norm){  return Float.intBitsToFloat((int)norm);}  }
class C{  private void fastReloadComponents(){  onPauseWebRender(true);  onResumeWebRender();}  }
class C{  public BitcoinSerializer(NetworkParameters params){  this(params,false,false);}  }
class C{  public AttributeWeightedExampleSet(ExampleSet exampleSet,AttributeWeights weights,double defaultWeight){  this.parent=(ExampleSet)exampleSet.clone();  this.attributeWeights=weights;  if (weights == null) {    this.attributeWeights=new AttributeWeights();    for (    Attribute attribute : this.parent.getAttributes()) {      setWeight(attribute,defaultWeight);    }  }  AttributeTransformationWeighting transformation=new AttributeTransformationWeighting(this.attributeWeights);  for (  Attribute attribute : this.parent.getAttributes()) {    if (attribute.isNumerical()) {      attribute.addTransformation(transformation);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.671 -0500",hash_original_method="BC82DFD48282D1B48FE7389621C80801",hash_generated_method="6B0DE62B51607F4F37E369358662A8F2") public boolean isActive(View view){  checkFocus();synchronized (mH) {    return (mServedView == view || (mServedView != null && mServedView.checkInputConnectionProxy(view))) && mCurrentTextBoxAttribute != null;  }}  }
class C{  private boolean isIncludedOrParentIsIncluded(File dir){  while (dir != null) {    if (deselected.contains(dir)) {      return false;    }    dir=dir.getParentFile();  }  return true;}  }
class C{  public static void swapPivot(Matrix source,long diag,Matrix s,Matrix t){  long swapRow=diag;  long swapCol=diag;  double maxValue=Math.abs(source.getAsDouble(diag,diag));  long rows=source.getRowCount();  long cols=source.getColumnCount();  double abs=0;  for (long row=diag; row < rows; row++) {    for (long col=diag; col < cols; col++) {      abs=Math.abs(source.getAsDouble(row,col));      if (abs > maxValue) {        maxValue=abs;        swapRow=row;        swapCol=col;      }    }  }  if (swapRow != diag) {    swapRows(source,swapRow,diag);    swapRows(t,swapRow,diag);  }  if (swapCol != diag) {    swapCols(source,swapCol,diag);    swapCols(s,swapCol,diag);  }}  }
class C{  private static void queryPositionFeed(FinanceService service,String feedUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Feed at location " + feedUrl);  PositionFeed positionFeed=service.getFeed(new URL(feedUrl),PositionFeed.class);  System.out.println("\nPosition Feed\n=============");  printBasicFeedDetails(positionFeed);  for (int i=0; i < positionFeed.getEntries().size(); i++) {    PositionEntry positionEntry=positionFeed.getEntries().get(i);    printPositionEntry(positionEntry);  }}  }
class C{  static private void unescapeJava(final StringBuilder writer,final String str){  if (str == null) {    return;  }  final int sz=str.length();  boolean hadSlash=false;  boolean inUnicode=false;  StringBuilder unicode=null;  for (int i=0; i < sz; i++) {    final char ch=str.charAt(i);    if (inUnicode) {      if (unicode == null) {        unicode=new StringBuilder(4);      }      unicode.append(ch);      if (unicode.length() == 4) {        final int value=Integer.parseInt(unicode.toString(),16);        writer.append((char)value);        unicode.setLength(0);        inUnicode=false;        hadSlash=false;      }      continue;    }    if (hadSlash) {      hadSlash=false;switch (ch) {case '\\':        writer.append('\\');      break;case '\'':    writer.append('\'');  break;case '\"':writer.append('"');break;case 'r':writer.append('\r');break;case 'f':writer.append('\f');break;case 't':writer.append('\t');break;case 'n':writer.append('\n');break;case 'b':writer.append('\b');break;case 'u':{inUnicode=true;break;}default :writer.append(ch);break;}continue;} else if (ch == '\\') {hadSlash=true;continue;}writer.append(ch);}if (hadSlash) {writer.append('\\');}}  }
class C{  public CertificatePolicies(){}  }
class C{  public void dispatchSVGZoomEvent() throws InterruptedException {  scriptingEnvironment.dispatchSVGZoomEvent();}  }
class C{  public static void logDuration(boolean wereResultsSeen,boolean isChained,long durationMs){  if (wereResultsSeen) {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationSeen",durationMs,TimeUnit.MILLISECONDS);  } else   if (isChained) {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationUnseenChained",durationMs,TimeUnit.MILLISECONDS);  } else {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationUnseen",durationMs,TimeUnit.MILLISECONDS);  }}  }
class C{  public void dropEntity(IEntity entity,int amount,Point point){  final RPAction action=new RPAction();  RPObject item=entity.getRPObject();  if (item == null) {    return;  }  RPObject parent=item.getContainer();  action.put(EquipActionConsts.SOURCE_PATH,entity.getPath());  if (parent != null) {    action.put("type","drop");    action.put(EquipActionConsts.BASE_OBJECT,parent.getID().getObjectID());    action.put(EquipActionConsts.BASE_SLOT,item.getContainerSlot().getName());  } else {    action.put("type","displace");  }  action.put(EquipActionConsts.BASE_ITEM,item.getID().getObjectID());  if (amount >= 1) {    action.put("quantity",amount);  }  final Point2D location=screen.convertScreenViewToWorld(point);  action.put("x",(int)location.getX());  action.put("y",(int)location.getY());  action.put("zone",entity.getRPObject().getBaseContainer().get("zoneid"));  client.send(action);}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  public boolean isLocal(){  return this == LOCAL_INVALIDATE || this == LOCAL_DESTROY;}  }
class C{  public int readGolomb(int divisor){  int q=0;  while (readBit() == 1) {    q++;  }  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);  int r=0;  if (bit >= 0) {    int cutOff=(2 << bit) - divisor;    for (; bit > 0; bit--) {      r=(r << 1) + readBit();    }    if (r >= cutOff) {      r=(r << 1) + readBit() - cutOff;    }  }  return q * divisor + r;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.FORMAL_PARAMETER__NAME:setName((String)newValue);return;case N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;case N4JSPackage.FORMAL_PARAMETER__VARIADIC:setVariadic((Boolean)newValue);return;case N4JSPackage.FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT:setDefinedTypeElement((TFormalParameter)newValue);return;case N4JSPackage.FORMAL_PARAMETER__INITIALIZER:setInitializer((Expression)newValue);return;case N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:setBindingPattern((BindingPattern)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public AxisAngle4d rotate(double ang){  angle+=ang;  angle=(angle < 0.0 ? Math.PI + Math.PI + angle % (Math.PI + Math.PI) : angle) % (Math.PI + Math.PI);  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE:    setCatchVariable((CatchVariable)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void before(@SuppressWarnings("unused") ResolvedJavaMethod method){}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  StmtBody stmtBody=(StmtBody)b;  Chain<Unit> units=stmtBody.getUnits();  Iterator<Unit> stmtIt=units.snapshotIterator();  NormalUnitPrinter nup=new NormalUnitPrinter(b);  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (!stmt.containsInvokeExpr()) {      continue;    }    InvokeExpr expr=(InvokeExpr)stmt.getInvokeExpr();    AssignStmt assignStmt=null;    if (stmt instanceof AssignStmt) {      assignStmt=(AssignStmt)stmt;    } else {      continue;    }    inspectAndReplaceCalls(units,assignStmt,expr);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:26.071 -0500",hash_original_method="6CC88714FB6247DC4BDAFCE2B4177456",hash_generated_method="41FAEBAC9C7E267B54234DF09F294B37") private int find(String key,char delimiter){  int length=key.length();  for (int i=mLines.size() - 1; i >= 0; --i) {    String line=mLines.get(i);    if (line.startsWith(key) && (line.length() == length || line.charAt(length) == delimiter)) {      return i;    }  }  return -1;}  }
class C{  public synchronized boolean isIdle(){  return idleStartTimeNs != 0L;}  }
class C{  private boolean startScrollIfNeeded(final MotionEvent event){  final int xPos=(int)event.getX();  final int yPos=(int)event.getY();  if (xPos < mTouchStartX - TOUCH_SCROLL_THRESHOLD || xPos > mTouchStartX + TOUCH_SCROLL_THRESHOLD || yPos < mTouchStartY - TOUCH_SCROLL_THRESHOLD || yPos > mTouchStartY + TOUCH_SCROLL_THRESHOLD) {    removeCallbacks(mLongPressRunnable);    mTouchState=TOUCH_STATE_SCROLL;    return true;  }  return false;}  }
class C{  protected boolean intersectsFrustum(DrawContext dc){  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(this.pickBounds); else   return dc.getView().getViewport().intersects(this.frameBounds);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void processFields(final Object component,final Field[] fields,final Context context,final ContextDestroyer contextDestroyer){  for (  final Field field : fields) {    final com.badlogic.gdx.utils.reflect.Annotation[] annotations=getAnnotations(field);    if (annotations == null || annotations.length == 0) {      continue;    }    for (    final com.badlogic.gdx.utils.reflect.Annotation annotation : annotations) {      if (fieldProcessors.containsKey(annotation.getAnnotationType())) {        for (        final AnnotationProcessor processor : fieldProcessors.get(annotation.getAnnotationType())) {          processor.processField(field,annotation.getAnnotation(annotation.getAnnotationType()),component,context,this,contextDestroyer);        }      }    }  }}  }
class C{  public THashSet(Collection<? extends E> collection,TObjectHashingStrategy<E> strategy){  this(collection.size(),strategy);  addAll(collection);}  }
class C{  public static Iterable<String> toHexStrings(Iterable<ByteArray> arrays){  ArrayList<String> ret=new ArrayList<String>();  for (  ByteArray array : arrays)   ret.add(HexString.toHexString(array.get()));  return ret;}  }
class C{  public List<Object[]> fetchActualsForFY(final CFinancialYear fy,final List<String> mandatoryFields,final Budget topBudget,final Budget referingTopBudget,final Date date,final Integer dept,final Long fun){  if (LOGGER.isInfoEnabled())   LOGGER.info("Starting fetchActualsForFY" + fy.getStartingDate().getYear() + "-"+ fy.getEndingDate().getYear());  String dateCondition="";  if (date != null)   dateCondition=" AND vh.voucherdate <='" + Constants.DDMMYYYYFORMAT1.format(date) + "' ";  final List<AppConfigValues> list=appConfigValuesService.getConfigValuesByModuleAndKey(Constants.EGF,"exclude_status_forbudget_actual");  if (list.isEmpty())   throw new ValidationException("","exclude_status_forbudget_actual is not defined in AppConfig");  StringBuffer miscQuery=getMiscQuery(mandatoryFields,"vmis","gl","vh");  if (dept != null)   miscQuery.append(" and bd.executing_department=" + dept);  if (fun != null)   miscQuery=miscQuery.append(" AND bd.function=" + fun);  final StringBuffer referingUniqueNoQry=new StringBuffer(200);  referingUniqueNoQry.append(" ");  if (referingTopBudget != null)   referingUniqueNoQry.append(" and bd.uniqueno in (select uniqueno from egf_budgetdetail where MATERIALIZEDPATH like '" + referingTopBudget.getMaterializedPath() + "%'  )");  final StringBuffer budgetGroupQuery=new StringBuffer();  budgetGroupQuery.append(" (select bg1.id as id,bg1.accounttype as accounttype,case when c1.glcode =  NULL then -1 else to_number(c1.glcode,'999999999') end " + "as mincode,case when c2.glcode = null then  999999999 else c2.glcode end as maxcode,case when c3.glcode = null then -1 else to_number(c3.glcode,'999999999') end  as majorcode " + "from egf_budgetgroup bg1 left outer join chartofaccounts c1 on c1.id=bg1.mincode left outer join chartofaccounts c2 on "+ "c2.id=bg1.maxcode left outer join chartofaccounts c3 on c3.id=bg1.majorcode ) bg ");  final String voucherstatusExclude=list.get(0).getValue();  StringBuffer query=new StringBuffer();  query=query.append("  select bd.uniqueno,SUM(gl.debitAmount)-SUM(gl.creditAmount) from egf_budgetdetail bd," + "vouchermis vmis,egf_budgetgroup bg,egf_budget b,financialyear f,fiscalperiod p,voucherheader vh,generalledger gl " + "where bd.budget=b.id and p.financialyearid=f.id and f.id=" + fy.getId() + " and vh.fiscalperiodid=p.id "+ dateCondition+ " and "+ " b.financialyearid="+ topBudget.getFinancialYear().getId()+ " and b.MATERIALIZEDPATH like '"+ topBudget.getMaterializedPath()+ "%' "+ referingUniqueNoQry.toString()+ " and  vmis.VOUCHERHEADERID=vh.id and gl.VOUCHERHEADERID=vh.id "+ " and bd.budgetgroup=bg.id "+ " and vh.status not in ("+ voucherstatusExclude+ ")  "+ miscQuery+ " "+ " and gl.glcodeid=bg.mincode and gl.glcodeid=bg.maxcode and  bg.majorcode is null group by bd.uniqueno");  final List<Object[]> result=getSession().createSQLQuery(query.toString()).list();  if (LOGGER.isInfoEnabled())   LOGGER.info("Finished fetchActualsForFY " + result.size() + "      "+ query.toString());  if (LOGGER.isInfoEnabled())   LOGGER.info("==============================================================================================");  return result;}  }
class C{  protected static final boolean isSmeAck(byte registeredDeliery,byte smeOriginatedAckValue){  return (registeredDeliery & 0x0c) == smeOriginatedAckValue;}  }
class C{  @Override protected String testName(FrameworkMethod method){  return method.getName() + getName();}  }
class C{  public GraphQuery(Query q,String fromField,String toField,Query traversalFilter){  this.q=q;  this.fromField=fromField;  this.toField=toField;  this.traversalFilter=traversalFilter;}  }
class C{  public static void transform(Entity entity,List<SyncAttribute> syncAttributeList,String typeId,HUITypeFactory huiTypeFactory,ExportReferenceTypes exportReferenceTypes){  Map<String,PropertyList> properties=entity.getTypedPropertyLists();  for (  String propertyTypeId : properties.keySet()) {    PropertyType propertyType=huiTypeFactory.getPropertyType(typeId,propertyTypeId);    if (propertyType == null) {      LOG.warn("Property type not found in SNCA.xml: " + propertyTypeId + ", typeId: "+ typeId);    }    if (propertyType == null || propertyType.isReportable()) {      SyncAttribute syncAttribute=new SyncAttribute();      syncAttribute.setName(propertyTypeId);      if (isReference(propertyType)) {        PropertyList propertyList=entity.getProperties(propertyTypeId);        exportReferenceTypes.mapEntityDatabaseId2ExtId(syncAttribute,propertyList);      } else {        entity.exportProperties(propertyTypeId,syncAttribute.getValue());      }      if (!syncAttribute.getValue().isEmpty()) {        syncAttributeList.add(syncAttribute);      }    }  }}  }
class C{  private static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  @Specialization(guards="left.getClass() != right.getClass()") protected boolean equal(Object left,Object right){  assert !left.equals(right);  return false;}  }
class C{  public static void publishData(int numMessages,int delayInMillis) throws IOException {  List<PubsubMessage> pubsubMessages=new ArrayList<>();  for (int i=0; i < Math.max(1,numMessages); i++) {    Long currTime=System.currentTimeMillis();    String message=generateEvent(currTime,delayInMillis);    PubsubMessage pubsubMessage=new PubsubMessage().encodeData(message.getBytes("UTF-8"));    pubsubMessage.setAttributes(ImmutableMap.of(TIMESTAMP_ATTRIBUTE,Long.toString((currTime - delayInMillis) / 1000 * 1000)));    if (delayInMillis != 0) {      System.out.println(pubsubMessage.getAttributes());      System.out.println("late data for: " + message);    }    pubsubMessages.add(pubsubMessage);  }  PublishRequest publishRequest=new PublishRequest();  publishRequest.setMessages(pubsubMessages);  pubsub.projects().topics().publish(topic,publishRequest).execute();}  }
class C{  protected void addSuperScopePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_superScope_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_superScope_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUPER_SCOPE,true,false,true,null,null,null));}  }
class C{  public static Scenario loadScenarioFromNetwork(String networkFile){  Config config=new Config();  config.addCoreModules();  config.network().setInputFile(networkFile);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ResumeOneThreadTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  final Thread mainThread=Thread.currentThread();  Location loc1=findMethod(targetClass,"bkpt1","(Ljava/lang/String;)V").location();  request1=erm.createBreakpointRequest(loc1);  request1.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);  request1.enable();  Location loc2=findMethod(targetClass,"bkpt2","()V").location();  request2=erm.createBreakpointRequest(loc2);  request2.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);  request2.enable();  listenUntilVMDisconnect();  if (!testFailed) {    println("ResumeOneThreadTest: passed");  } else {    throw new Exception("ResumeOneThreadTest: failed");  }}  }
class C{  public AnimationBuilder alpha(float... alpha){  return property("alpha",alpha);}  }
class C{  @Override public boolean isObstacle(final Entity entity){  if (entity instanceof RPEntity) {    return true;  }  return super.isObstacle(entity);}  }
class C{  public static String stripQueryPath(final String path){  return path.replaceFirst(REGEX_QUERY_PATH,"");}  }
class C{  private void enableDisableSpacingFields(){  if (manuallySetNumColumns.isSelected()) {    tfNumColumns.setEnabled(true);  } else {    tfNumColumns.setEnabled(false);  }}  }
class C{  public static void addGuessSwfPath(HashMap swfs,String testSwf,String path){  try {    testSwf=new File(testSwf).getName();    if (new File(transform1(testSwf,path)).exists()) {      swfs.put(testSwf,transform1(testSwf,path));    }  } catch (  NullPointerException npe) {    System.out.println("genHash - putting a null on for " + testSwf);    swfs.put(testSwf,null);  }}  }
class C{  public boolean isGuaranteed(){  return guaranteed;}  }
class C{  public void sort(){  if (dirty) {    if (facetFieldSort.equals(FacetParams.FACET_SORT_COUNT)) {      Collections.sort(this.explicitValues,new PivotFacetCountComparator());    } else     if (facetFieldSort.equals(FacetParams.FACET_SORT_INDEX)) {      Collections.sort(this.explicitValues,new PivotFacetValueComparator());    }    dirty=false;  }  for (  PivotFacetValue value : this.explicitValues)   if (value.getChildPivot() != null) {    value.getChildPivot().sort();  }  if (missingValue != null && missingValue.getChildPivot() != null) {    missingValue.getChildPivot().sort();  }}  }
class C{  public static Object create(String className){  return create(className,(Object[])null,null,null);}  }
class C{  void detectNonRecursive(DynamicAABBTreeLeaf<E,T> node,DynamicAABBTreeNode root,BroadphaseFilter<E,T> filter,List<BroadphasePair<E,T>> pairs){  DynamicAABBTreeNode test=root;  while (test != null) {    if (test.aabb.overlaps(node.aabb)) {      if (test.left != null) {        test=test.left;        continue;      } else {        @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)test;        if (!leaf.tested && leaf.collidable != node.collidable) {          if (filter.isAllowed(node.collidable,node.fixture,leaf.collidable,leaf.fixture)) {            BroadphasePair<E,T> pair=new BroadphasePair<E,T>(node.collidable,node.fixture,leaf.collidable,leaf.fixture);            pairs.add(pair);          }        }      }    }    boolean nextNodeFound=false;    while (test.parent != null) {      if (test == test.parent.left) {        test=test.parent.right;        nextNodeFound=true;        break;      }      test=test.parent;    }    if (!nextNodeFound)     break;  }}  }
class C{  public static synchronized PlatformProcessor start(@Nullable String springCfgPath,@Nullable String gridName,int factoryId,long envPtr,long dataPtr){  if (envPtr <= 0)   throw new IgniteException("Environment pointer must be positive.");  ClassLoader oldClsLdr=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(PlatformProcessor.class.getClassLoader());  try {    PlatformBootstrap bootstrap=bootstrap(factoryId);    bootstrap.init();    IgniteBiTuple<IgniteConfiguration,GridSpringResourceContext> cfg=configuration(springCfgPath);    if (gridName != null)     cfg.get1().setGridName(gridName); else     gridName=cfg.get1().getGridName();    PlatformProcessor proc=bootstrap.start(cfg.get1(),cfg.get2(),envPtr,dataPtr);    PlatformProcessor old=instances.put(gridName,proc);    assert old == null;    return proc;  }  finally {    Thread.currentThread().setContextClassLoader(oldClsLdr);  }}  }
class C{  public static boolean parse(String[] options,String option,boolean defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return Boolean.parseBoolean(value);}  }
class C{  public boolean containsKey(String key){  return dict.containsKey(key);}  }
class C{  protected static boolean isValidChar(char toCheck,String whatToKeep){  if (null != whatToKeep) {    int whatToKeepLength=whatToKeep.length();    for (int i=0; i < whatToKeepLength; i++) {      if (whatToKeep.charAt(i) == toCheck) {        return true;      }    }  }  return false;}  }
class C{  public static int dpToPx(int dp,Context context){  float density=context.getResources().getDisplayMetrics().density;  int px=Math.round(dp * density);  return px;}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[hLen];  byte[] C=new byte[4];  int counter=0;  digest.reset();  while (counter < (length / hLen)) {    ItoOSP(counter,C);    digest.update(Z,zOff,zLen);    digest.update(C,0,C.length);    digest.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hLen,hLen);    counter++;  }  if ((counter * hLen) < length) {    ItoOSP(counter,C);    digest.update(Z,zOff,zLen);    digest.update(C,0,C.length);    digest.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hLen,mask.length - (counter * hLen));  }  return mask;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AxisAngle4f rotate(float ang){  angle+=ang;  angle=(float)((angle < 0.0 ? Math.PI + Math.PI + angle % (Math.PI + Math.PI) : angle) % (Math.PI + Math.PI));  return this;}  }
class C{  public final void removeAllHelperTexts(){  helperTexts.clear();}  }
class C{  public HeapConfig(final int sizeMb,final int newMb,final GC_TYPE gcType){  this.newMb=newMb;  this.sizeMb=sizeMb;  this.gcType=gcType;}  }
class C{  private static AbstractTripleStore createTempKb(String mode){  final TemporaryStore tempStore=new TemporaryStore();  Properties p=new Properties();  if (mode.equalsIgnoreCase("triples")) {    p.setProperty(AbstractTripleStore.Options.TRIPLES_MODE,"true");  } else   if (mode.equalsIgnoreCase("quads")) {    p.setProperty(Options.QUADS,"true");    p.setProperty(Options.AXIOMS_CLASS,"com.bigdata.rdf.axioms.NoAxioms");  } else   if (mode.equalsIgnoreCase("provenance")) {    p.setProperty(AbstractTripleStore.Options.TRIPLES_MODE_WITH_PROVENANCE,"true");  }  return new TempTripleStore(tempStore,p,null);}  }
class C{  public static Fragment newInstance(){  Fragment fragment=new PayFragment();  return fragment;}  }
class C{  public void validateBusinessObjectDataAvailability(BusinessObjectDataAvailabilityRequest request,List<BusinessObjectDataStatus> expectedAvailableStatuses,List<BusinessObjectDataStatus> expectedNotAvailableStatuses,BusinessObjectDataAvailability actualBusinessObjectDataAvailability){  assertNotNull(actualBusinessObjectDataAvailability);  assertEquals(request.getNamespace(),actualBusinessObjectDataAvailability.getNamespace());  assertEquals(request.getBusinessObjectDefinitionName(),actualBusinessObjectDataAvailability.getBusinessObjectDefinitionName());  assertEquals(request.getBusinessObjectFormatUsage(),actualBusinessObjectDataAvailability.getBusinessObjectFormatUsage());  assertEquals(request.getBusinessObjectFormatFileType(),actualBusinessObjectDataAvailability.getBusinessObjectFormatFileType());  assertEquals(request.getBusinessObjectFormatVersion(),actualBusinessObjectDataAvailability.getBusinessObjectFormatVersion());  assertEquals(request.getPartitionValueFilter(),actualBusinessObjectDataAvailability.getPartitionValueFilter());  assertEquals(request.getBusinessObjectDataVersion(),actualBusinessObjectDataAvailability.getBusinessObjectDataVersion());  assertEquals(request.getStorageName(),actualBusinessObjectDataAvailability.getStorageName());  assertEquals(expectedAvailableStatuses,actualBusinessObjectDataAvailability.getAvailableStatuses());  assertEquals(expectedNotAvailableStatuses,actualBusinessObjectDataAvailability.getNotAvailableStatuses());}  }
class C{  @Path("merge") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse merge(final MergeRequest request) throws ServerException, IOException {  request.withProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.merge(request);}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  private static Instruction convertToBranchingTypeCheck(Instruction s,IR ir,Operand RHSobj,TypeReference LHStype,Operand RHStib,RegisterOperand result){  BasicBlock myBlock=s.getBasicBlock();  BasicBlock contBlock=myBlock.splitNodeAt(s,ir);  int subBlockStart=s.getBytecodeIndex();  BasicBlock trueBlock=myBlock.createSubBlock(subBlockStart,ir);  BasicBlock falseBlock=myBlock.createSubBlock(subBlockStart,ir);  myBlock.insertOut(trueBlock);  myBlock.insertOut(falseBlock);  trueBlock.insertOut(contBlock);  falseBlock.insertOut(contBlock);  ir.cfg.linkInCodeOrder(myBlock,trueBlock);  ir.cfg.linkInCodeOrder(trueBlock,falseBlock);  ir.cfg.linkInCodeOrder(falseBlock,contBlock);  trueBlock.appendInstruction(Move.create(INT_MOVE,result,IC(1)));  trueBlock.appendInstruction(Goto.create(GOTO,contBlock.makeJumpTarget()));  falseBlock.appendInstruction(Move.create(INT_MOVE,result.copyD2D(),IC(0)));  return generateBranchingTypeCheck(s,ir,RHSobj,LHStype,RHStib,trueBlock,falseBlock,ir.regpool.makeTempValidation(),new BranchProfileOperand());}  }
class C{  private void eliminateSharedOperatorReferenceForPlan(ILogicalPlan plan) throws AsterixException {  for (  Mutable<ILogicalOperator> opRef : plan.getRoots()) {    Set<Mutable<ILogicalOperator>> opRefSet=new HashSet<>();    eliminateSharedOperatorReference(opRef,opRefSet);  }}  }
class C{  protected void resetFocusable(){  setFocusable(false);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  private void saveBatchTaskResults(AnalystClusterRequest clusterRequest,ResultEnvelope envelope){  String fileName=clusterRequest.id + ".json.gz";  PipedInputStream inPipe=new PipedInputStream();  Runnable resultSaverRunnable;  if (workOffline) {    resultSaverRunnable=null;  } else {    resultSaverRunnable=null;  }  ;  new Thread(resultSaverRunnable).start();  try {    PipedOutputStream outPipe=new PipedOutputStream(inPipe);    OutputStream gzipOutputStream=new GZIPOutputStream(outPipe);    JsonUtilities.objectMapper.writeValue(gzipOutputStream,envelope);    gzipOutputStream.close();    deleteRequest(clusterRequest);  } catch (  Exception e) {    LOG.error("Exception while saving routing result to S3: {}",e.getMessage());  }}  }
class C{  public void testCaseSensitive(){  m_Filter=getFilter(SortLabels.SORT_CASESENSITIVE,"first-last");  testBuffered();  Instances result=performTest();  String[] sorted=new String[]{"b","g","r"};  for (int i=0; i < sorted.length; i++)   assertEquals("Values differ for index #" + (i + 1),result.attribute(0).value(i),sorted[i]);}  }
class C{  public void write(char buf[],int off,int len){  if (text != null) {    text.append(new String(buf,off,len));    if ((col+=len) > wrap)     println();  } else   super.write(buf,off,len);}  }
class C{  private void calcAngles(){  mDrawAngles=new float[mData.getYValCount()];  mAbsoluteAngles=new float[mData.getYValCount()];  List<PieDataSet> dataSets=mData.getDataSets();  int cnt=0;  for (int i=0; i < mData.getDataSetCount(); i++) {    PieDataSet set=dataSets.get(i);    List<Entry> entries=set.getYVals();    for (int j=0; j < entries.size(); j++) {      mDrawAngles[cnt]=calcAngle(Math.abs(entries.get(j).getVal()));      if (cnt == 0) {        mAbsoluteAngles[cnt]=mDrawAngles[cnt];      } else {        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];      }      cnt++;    }  }}  }
class C{  public void sortInstances(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().sortInstances();}  }
class C{  public void testNextDoubleBounded2(){  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=ThreadLocalRandom.current().nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public void test_update$BII() throws Exception {  try {    MessageDigest.getInstance("SHA").update(new byte[]{},Integer.MAX_VALUE,Integer.MAX_VALUE);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public ItemStack toItemStack(){  return toItemStack(1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.597 -0500",hash_original_method="4B1A4D6D481D9FF5D2C57EDD95992F00",hash_generated_method="95095623A75345DB4F55E4CEEFBC0F93") public static void register(){  DdmServer.registerHandler(CHUNK_THEN,mInstance);  DdmServer.registerHandler(CHUNK_THST,mInstance);  DdmServer.registerHandler(CHUNK_STKL,mInstance);}  }
class C{  public double greatCircleDistance(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","greatCircleDistance","missingLocation"));  }  double lat1Radians=Math.toRadians(this.latitude);  double lon1Radians=Math.toRadians(this.longitude);  double lat2Radians=Math.toRadians(location.latitude);  double lon2Radians=Math.toRadians(location.longitude);  if (lat1Radians == lat2Radians && lon1Radians == lon2Radians) {    return 0;  }  double a=Math.sin((lat2Radians - lat1Radians) / 2.0);  double b=Math.sin((lon2Radians - lon1Radians) / 2.0);  double c=a * a + Math.cos(lat1Radians) * Math.cos(lat2Radians) * b* b;  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;}  }
class C{  void popSpaceHandling(){  m_spacePreserveStack.pop();}  }
class C{  public static String removeStart(String startMatch,String string){  if (string.startsWith(startMatch)) {    return string.substring(startMatch.length());  }  return string;}  }
class C{  private void highLightBorder(Graphics g){  g.setColor(style.getHighLightColor());  Border border=style.getBorder();  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    int width=border.getBorderInsets(this).left;    g.fillRect(0,0,width,getHeight());    g.fillRect(getWidth() - width,0,width,getHeight());  } else {    int height=border.getBorderInsets(this).top;    g.fillRect(0,0,getWidth(),height);    g.fillRect(0,getHeight() - height,getWidth(),height);  }}  }
class C{  @Override public void onPause(){  super.onPause();  savePinnedItems();  server.setIsForeground(false);  if (binder != null && binder.getService() != null) {    binder.getService().checkServiceStatus();  }  unbindService(this);  unregisterReceiver(channelReceiver);  unregisterReceiver(serverReceiver);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getSubScopes()).basicAdd(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:  if (superScope != null)   msgs=((InternalEObject)superScope).eInverseRemove(this,SexecPackage.EXECUTION_SCOPE__SUB_SCOPES,ExecutionScope.class,msgs);return basicSetSuperScope((ExecutionScope)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void createNatRule(String id,NatRuleCreateSpec spec,FutureCallback<NatRule> responseCallback) throws IOException {  postAsync(LOGICAL_ROUTERS_BASE_PATH + "/" + id+ "/nat/rules",serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<NatRule>(){  },responseCallback);}  }
class C{  private List<TypedRegion> computePartitioning(final int offset,final int length){  return partitioner.computePartitioning(offset,length);}  }
class C{  private boolean startsNewHunk(String string){  if (string.length() == 0)   return true;  return isLegalChar(string.charAt(0));}  }
class C{  public CloudListModel(String type,int visibilityScope,int sortProperty,boolean ascending){  this.type=type;  this.visibilityScope=visibilityScope;  this.sortProperty=sortProperty;  this.ascending=ascending;  init();}  }
class C{  public IntervalXYItemLabelGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  @CheckReturnValue public <T>Subject3<A,B,T> asWithPrecursor(BiFunction<A,B,T> mapping){  return this.asWithPrecursor(mapping,null);}  }
class C{  public void testConfigureSetsAJPPort() throws Exception {  configuration.setProperty(TomcatPropertySet.AJP_PORT,AJP_PORT);  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/conf/server.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(AJP_PORT,"//Connector[@className='org.apache.ajp.tomcat4.Ajp13Connector']/@port",config);}  }
class C{  public static <T>FutureW<T> schedule(final long delay,final ScheduledExecutorService ex,final Supplier<T> t){  final CompletableFuture<T> future=new CompletableFuture<>();  final FutureW<T> wrapped=FutureW.of(future);  ReactiveSeq.generate(null).limit(1).scheduleFixedDelay(delay,ex);  return wrapped;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildinvalidnodetype.class,args);}  }
class C{  public void insertContacts(){  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()].execute(mContacts.iterator());}  }
class C{  private void handleOperator(String tok) throws Exception {  boolean push=true;  char tokchar=tok.charAt(0);  if (tokchar == ')') {    String popop=" ";    do {      popop=(String)(m_operatorStack.pop());      if (popop.charAt(0) != '(') {        m_postFixExpVector.addElement(new Operator(popop.charAt(0)));      }    } while (popop.charAt(0) != '(');  } else {    int infixToc=infixPriority(tok.charAt(0));    while (!m_operatorStack.empty() && stackPriority(((String)(m_operatorStack.peek())).charAt(0)) >= infixToc) {      if (m_previousTok.length() == 1 && isOperator(m_previousTok.charAt(0)) && m_previousTok.charAt(0) != ')') {        if (tok.charAt(0) == '-') {          m_signMod=true;        } else {          m_signMod=false;        }        push=false;        break;      } else {        String popop=(String)(m_operatorStack.pop());        m_postFixExpVector.addElement(new Operator(popop.charAt(0)));      }    }    if (m_postFixExpVector.size() == 0) {      if (tok.charAt(0) == '-') {        m_signMod=true;        push=false;      }    }    if (push) {      m_operatorStack.push(tok);    }  }}  }
class C{  public static <T>T newProxyInstance(Class<T> interfaceClass,T mainDelegate,Iterable<? extends T> delegatesToCall){  return newProxyInstance(interfaceClass,mainDelegate,Suppliers.ofInstance(ImmutableList.copyOf(delegatesToCall)));}  }
class C{  public DestroyFailedException(String msg){  super(msg);}  }
class C{  public final boolean isAnonymous(){  return ((Variable)getTerm()).isAnonymous() || ((Variable)getTerm()).isShadow();}  }
class C{  public boolean isDSeparatedFrom(Node node1,Node node2,List z){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") public void activate() throws BasicException {  List a=m_sentcat.list();  a.add(0,null);  m_CategoryModel=new ComboBoxValModel(a);  m_jCategory.setModel(m_CategoryModel);}  }
class C{  public static void clearContext(Properties ctx){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  ctx.clear();}  }
class C{  public Birthday(Date date){  super(date);}  }
class C{  public WBMPImageReader(ImageReaderSpi originator){  super(originator);}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(){  String str=" Polynomial over " + field.toString() + ": \n";  for (int i=0; i < coefficients.length; i++) {    str=str + field.elementToStr(coefficients[i]) + "Y^"+ i+ "+";  }  str=str + ";";  return str;}  }
class C{  private void preloadEngine(ClassLoader classLoader) throws Exception {  Class engine=Class.forName("org.apache.catalina.Engine",true,classLoader);  Class container=Class.forName("org.apache.catalina.Container",true,classLoader);  engineSetName=engine.getMethod("setName",new Class[]{String.class});  engineAddChild=engine.getMethod("addChild",new Class[]{container});  engineSetDefaultHost=engine.getMethod("setDefaultHost",new Class[]{String.class});  engineSetParentClassLoader=engine.getMethod("setParentClassLoader",new Class[]{ClassLoader.class});  Class service=Class.forName("org.apache.catalina.Service",true,classLoader);  engineSetService=engine.getMethod("setService",new Class[]{service});  Class standardEngine=Class.forName("org.apache.catalina.core.StandardEngine",true,classLoader);  try {    standardEngineSetBaseDir=standardEngine.getMethod("setBaseDir",new Class[]{String.class});  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public int nSections(){  return sections.size();}  }
class C{  public static DownloadRequest createDownloadRequest(String url,RequestMethod requestMethod,String fileFolder,String filename,boolean isRange,boolean isDeleteOld){  return new DefaultDownloadRequest(url,requestMethod,fileFolder,filename,isRange,isDeleteOld);}  }
class C{  public final void testEqualsObject04(){  assertTrue(new ECFieldFp(BigInteger.valueOf(23L)).equals(new ECFieldFp(BigInteger.valueOf(23L))));}  }
class C{  public void removeListener(final IVisualCoverageListener listener){  listeners.remove(listener);}  }
class C{  public boolean isSetC(){  return EncodingUtils.testBit(__isset_bitfield,__C_ISSET_ID);}  }
class C{  public static double[] minus(double v,double[] v1){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v - v1[i];  return array;}  }
class C{  public Integer loadRepInfoValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadRepInfoValues");  _repInfo=FssMdoUtil.decodeRepInfo(statement.getLongText(index++));  _repType=_repInfo.m_type;  return new Integer(index);}  }
class C{  public static void main(String[] args){  mxmlc(args);  System.exit(ThreadLocalToolkit.errorCount());}  }
class C{  public BandPassBuilder passFrequencyEnd(int passFrequency){  mPassFrequencyEnd=passFrequency;  return this;}  }
class C{  private static boolean annotationArrayMemberEquals(final Annotation[] a1,final Annotation[] a2){  if (a1.length != a2.length) {    return false;  }  for (int i=0; i < a1.length; i++) {    if (!equals(a1[i],a2[i])) {      return false;    }  }  return true;}  }
class C{  private <K,V>V forceFind(NavigableMap<K,V> map,K key,V newObject){  V data=map.get(key);  if (data == null) {    data=newObject;    map.put(key,data);  }  return data;}  }
class C{  public int lastIndexOf(byte value){  return lastIndexOf(_pos,value);}  }
class C{  ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  private void maybeRemoveEditorBorder(JComponent editor){  if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {    if (editor instanceof JPanel && editor.getBorder() == null && editor.getComponentCount() > 0) {      editor=(JComponent)editor.getComponent(0);    }    if (editor != null && editor.getBorder() instanceof UIResource) {      editor.setBorder(null);    }  }}  }
class C{  private void paintOffLineIfNeeded(Graphics g){  if (offline) {    if (blinkOffline > 0) {      offlineIcon.draw(g,getWidth() - offlineIcon.getWidth() - OFFLINE_MARGIN,getHeight() - offlineIcon.getHeight() - OFFLINE_MARGIN);    }    if (blinkOffline < -10) {      blinkOffline=20;    } else {      blinkOffline--;    }  }}  }
class C{  public String[] toSRT(){  return new FormatSRT().toFile(this);}  }
class C{  public long longValue(){  return toNumber().longValue();}  }
class C{  public void logOut(){  if (token != null) {    token.cancelExpiration();  }  ParticleUser.removeSession();  ParticleAccessToken.removeSession();  token=null;  user=null;}  }
class C{  public void translate(ConditionOperand c){switch (c.value) {case ConditionOperand.EQUAL:    value=EQUAL;  break;case ConditionOperand.NOT_EQUAL:value=NOT_EQUAL;break;case ConditionOperand.LESS:value=LESS;break;case ConditionOperand.LESS_EQUAL:value=LESS_EQUAL;break;case ConditionOperand.GREATER:value=GREATER;break;case ConditionOperand.GREATER_EQUAL:value=GREATER_EQUAL;break;case ConditionOperand.HIGHER:value=HIGHER;break;case ConditionOperand.LOWER:value=LOWER;break;case ConditionOperand.HIGHER_EQUAL:value=HIGHER_EQUAL;break;case ConditionOperand.LOWER_EQUAL:value=LOWER_EQUAL;break;}}  }
class C{  public OutlineData(){  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    OutlineDataXML=factory.newDocumentBuilder().newDocument();  } catch (  final ParserConfigurationException e) {    System.err.println("Exception " + e + " generating XML document");  }}  }
class C{  @Override public void onSlotChangedAdded(final RPObject object,final String slotName,final RPObject sobject,final RPObject schanges){}  }
class C{  private void generateRemoteCommand() throws SAXException {  String remoteCommand=this.system.getRemoteCommand();  handler.startElement("",REMOTE_COMMAND,REMOTE_COMMAND,EMPTY);  handler.characters(remoteCommand.toCharArray(),0,remoteCommand.length());  handler.endElement("",REMOTE_COMMAND,REMOTE_COMMAND);}  }
class C{  private void prepareTest(final String localData,final List<String> endpointData) throws Exception {  if (localData != null) {    if (log.isInfoEnabled())     log.info("Loading: " + localData + " into local repository");    loadDataSet(m_repo,localData);  }  int i=1;  for (  String s : endpointData) {    final RemoteRepository repo=getRepository(i);    if (log.isInfoEnabled())     log.info("Loading: " + s + " into "+ getRepositoryUrl(i)+ " as "+ repo);    loadDataSet(repo,s);    i++;  }}  }
class C{  public static void organizeDistribution(final Object[] objs,final RandomChoiceChooserD chooser,final boolean allowAllZeros){  double sum=0.0;  if (objs.length == 0)   throw new ArithmeticException("Distribution has no elements");  for (int x=0; x < objs.length; x++) {    if (chooser.getProbability(objs[x]) < 0.0)     throw new ArithmeticException("Distribution has negative probabilities");    sum+=chooser.getProbability(objs[x]);  }  if (sum == 0.0)   if (!allowAllZeros)   throw new ArithmeticException("Distribution has all zero probabilities"); else {    for (int x=0; x < objs.length; x++)     chooser.setProbability(objs[x],1.0);    sum=objs.length;  }  for (int x=0; x < objs.length; x++)   chooser.setProbability(objs[x],(double)(chooser.getProbability(objs[x]) / sum));  sum=0.0;  for (int x=0; x < objs.length; x++) {    sum+=chooser.getProbability(objs[x]);    chooser.setProbability(objs[x],(double)sum);  }  int x;  for (x=objs.length - 1; x > 0; x--)   if (chooser.getProbability(objs[x]) == chooser.getProbability(objs[x - 1]))   chooser.setProbability(objs[x],1.0); else   break;  chooser.setProbability(objs[x],1.0);}  }
class C{  public WindowsBuilderFirst(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  contentPane.setLayout(new BorderLayout(0,0));  setContentPane(contentPane);}  }
class C{  public static boolean isCdma(){  return false;}  }
class C{  public void testSimpleBuilderNotRegistered() throws Exception {  checkSimpleBuilder(false);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double minStreamLength=0;  boolean blnRemoveStream=false;  int stopRow, stopCol;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      minStreamLength=Double.parseDouble(args[i]);    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streams.getMaximumValue();    minStreamLength=minStreamLength / ((gridResX + gridResY) / 2);    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        output.setValue(row,col,streams.getValue(row,col));      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    byte numNeighbouringStreamCells=0;    double linkLength=0;    int x2, y2;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            linkLength=0;            blnRemoveStream=false;            x=col;            y=row;            stopRow=-1;            stopCol=-1;            flag=true;            do {              numNeighbouringStreamCells=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[c]) {                  numNeighbouringStreamCells++;                }              }              if (numNeighbouringStreamCells > 1) {                if (linkLength < minStreamLength) {                  stopRow=y;                  stopCol=x;                  blnRemoveStream=true;                }                flag=false;                break;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                if (linkLength > minStreamLength) {                  flag=false;                } else {                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                }              } else {                flag=false;              }            } while (flag);            if (blnRemoveStream) {              x=col;              y=row;              flag=true;              do {                if (x == stopCol && y == stopRow) {                  flag=false;                  break;                }                output.setValue(y,x,noData);                flowDir=pntr.getValue(y,x);                if (flowDir > 0) {                  c=(int)(Math.log(flowDir) / LnOf2);                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                } else {                  flag=false;                }              } while (flag);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void e(String tag,String message){  if (DEBUG_ON) {    Log.e(tag,message);  }}  }
class C{  protected void sequence_ContinueStatement(ISerializationContext context,ContinueStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected void toggleSelectionList(Context ctx){  if (mDrawer != null) {    if (mDrawer.switchedDrawerContent()) {      resetDrawerContent(ctx);      mSelectionListShown=false;    } else {      buildDrawerSelectionList();      mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(ctx,MaterialDrawerFont.Icon.mdf_arrow_drop_up).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(ColorHolder.color(mTextColor,ctx,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text)));      mSelectionListShown=true;    }  }}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting())   return;}  }
class C{  public BundleException(String msg,Throwable cause){  this(msg,UNSPECIFIED,cause);}  }
class C{  public static <E,S extends Set<E>>UnmodifiableMutableSet<E> of(S set){  if (set == null) {    throw new IllegalArgumentException("cannot create an UnmodifiableMutableSet for null");  }  return new UnmodifiableMutableSet<>(SetAdapter.adapt(set));}  }
class C{  public static void main(String args[]){  try {    AgentServerImpl server=new AgentServerImpl();    Naming.rebind("/AgentServer",server);    System.out.println("Ready to receive agents.");    System.err.println("DTI_DoneInitializing");  } catch (  Exception e) {    System.err.println("DTI_Error");    System.err.println("Did not establish server");    e.printStackTrace();  }}  }
class C{  protected void deleteInstance(CIMObjectPath path){  try {    _connection.getCimClient().deleteInstance(path);    s_logger.info("Deleted: {}",path);  } catch (  WBEMException e) {    s_logger.error("Failed to delete {}",path,e);  }}  }
class C{  public static Image createImage(byte[] bytes,int offset,int len){  try {    Object o=Display.impl.createImage(bytes,offset,len);    if (o == null) {      throw new IllegalArgumentException("create image failed for the given image data of length: " + len);    }    return new Image(o);  } catch (  OutOfMemoryError err) {    System.gc();    System.gc();    return new Image(Display.impl.createImage(bytes,offset,len));  }}  }
class C{  private static Stream<String> path2Lines(Path path){  try {    return Files.lines(path);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public StorageException(String message){  super(message);}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return ((options.getOptLevel() >= 3) && (options.CONTROL_UNROLL_LOG >= 1) && (!options.SSA_LOOP_VERSIONING));}  }
class C{  public static Properties toProperties(JSONObject jo) throws JSONException {  Properties properties=new Properties();  if (jo != null) {    Iterator<String> keys=jo.keys();    while (keys.hasNext()) {      String name=keys.next();      properties.put(name,jo.getString(name));    }  }  return properties;}  }
class C{  @Override public boolean remove(Object o){  return nodes.remove(o) != null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodesempty.class,args);}  }
class C{  private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {  if (name == null) {    throw new IllegalArgumentException("Null name");  }  if (attrBinding == null) {    throw new IllegalArgumentException("Null binding");  }  if (attrLocation == null) {    throw new IllegalArgumentException("Null location");  }  Element endPt=doc.createElement(name);  endPt.setAttribute(SAMLNames.BINDING,attrBinding);  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);  if (attrResponseLocation != null) {    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);  }  return endPt;}  }
class C{  public Observable<Long> publish(final String topic,final ArrayNode arguments,final ObjectNode argumentsKw){  return publish(topic,null,arguments,argumentsKw);}  }
class C{  public static int bytesToInt(byte[] bytes,int offset){  int result=0x00000000;  int length;  if (bytes.length - offset < 4)   length=bytes.length - offset; else   length=4;  int end=offset + length;  for (int i=0; i < length; i++) {    result|=(bytes[end - i - 1] & 0xff) << (8 * i);  }  return result;}  }
class C{  private ClusterState updateState(ClusterState clusterState,final ZkNodeProps message){  final String collection=message.getStr(ZkStateReader.COLLECTION_PROP);  if (!checkCollectionKeyExistence(message))   return clusterState;  Integer numShards=message.getInt(ZkStateReader.NUM_SHARDS_PROP,null);  log.info("Update state numShards={} message={}",numShards,message);  List<String> shardNames=new ArrayList<>();  boolean collectionExists=clusterState.hasCollection(collection);  if (!collectionExists && numShards != null) {    getShardNames(numShards,shardNames);    clusterState=createCollection(clusterState,collection,shardNames,message);  }  String sliceName=message.getStr(ZkStateReader.SHARD_ID_PROP);  String coreNodeName=message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);  if (coreNodeName == null) {    coreNodeName=getAssignedCoreNodeName(clusterState,message);    if (coreNodeName != null) {      log.info("node=" + coreNodeName + " is already registered");    } else {      coreNodeName=Assign.assignNode(collection,clusterState);    }    message.getProperties().put(ZkStateReader.CORE_NODE_NAME_PROP,coreNodeName);  }  if (sliceName == null) {    sliceName=getAssignedId(clusterState,coreNodeName,message);    if (sliceName != null) {      log.info("shard=" + sliceName + " is already registered");    }  }  if (sliceName == null) {    if (collectionExists) {      numShards=clusterState.getCollection(collection).getSlices().size();      log.info("Collection already exists with " + ZkStateReader.NUM_SHARDS_PROP + "="+ numShards);    }    sliceName=Assign.assignShard(collection,clusterState,numShards);    log.info("Assigning new node to shard shard=" + sliceName);  }  Slice slice=clusterState.getSlice(collection,sliceName);  Map<String,Object> replicaProps=new LinkedHashMap<>();  replicaProps.putAll(message.getProperties());  if (slice != null) {    Replica oldReplica=slice.getReplicasMap().get(coreNodeName);    if (oldReplica != null && oldReplica.containsKey(ZkStateReader.LEADER_PROP)) {      replicaProps.put(ZkStateReader.LEADER_PROP,oldReplica.get(ZkStateReader.LEADER_PROP));    }  }  replicaProps.remove(ZkStateReader.NUM_SHARDS_PROP);  replicaProps.remove(ZkStateReader.CORE_NODE_NAME_PROP);  replicaProps.remove(ZkStateReader.SHARD_ID_PROP);  replicaProps.remove(ZkStateReader.COLLECTION_PROP);  replicaProps.remove(QUEUE_OPERATION);  Set<Entry<String,Object>> entrySet=replicaProps.entrySet();  List<String> removeKeys=new ArrayList<>();  for (  Entry<String,Object> entry : entrySet) {    if (entry.getValue() == null) {      removeKeys.add(entry.getKey());    }  }  for (  String removeKey : removeKeys) {    replicaProps.remove(removeKey);  }  replicaProps.remove(ZkStateReader.CORE_NODE_NAME_PROP);  String shardRange=(String)replicaProps.remove(ZkStateReader.SHARD_RANGE_PROP);  String shardState=(String)replicaProps.remove(ZkStateReader.SHARD_STATE_PROP);  String shardParent=(String)replicaProps.remove(ZkStateReader.SHARD_PARENT_PROP);  Replica replica=new Replica(coreNodeName,replicaProps);  Map<String,Object> sliceProps=null;  Map<String,Replica> replicas;  if (slice != null) {    clusterState=checkAndCompleteShardSplit(clusterState,collection,coreNodeName,sliceName,replicaProps);    slice=clusterState.getSlice(collection,sliceName);    sliceProps=slice.getProperties();    replicas=slice.getReplicasCopy();  } else {    replicas=new HashMap<>(1);    sliceProps=new HashMap<>();    sliceProps.put(Slice.RANGE,shardRange);    sliceProps.put(Slice.STATE,shardState);    sliceProps.put(Slice.PARENT,shardParent);  }  replicas.put(replica.getName(),replica);  slice=new Slice(sliceName,replicas,sliceProps);  ClusterState newClusterState=updateSlice(clusterState,collection,slice);  return newClusterState;}  }
class C{  public CSearchDialog(final Window parent){  super(parent,"Find",ModalityType.DOCUMENT_MODAL);  new CDialogEscaper(this);  setLayout(new BorderLayout());  add(createSearchPane(),BorderLayout.CENTER);  add(new CPanelTwoButtons(new InternalActionListener(),"OK","Cancel"),BorderLayout.SOUTH);  pack();  GuiHelper.centerChildToParent(parent,this,true);  setVisible(true);}  }
class C{  private void unbindAll(){  if (mPositioningBound) {    unbindService(mPositioningConnection);    mPositioningBound=false;  }  if (mWirelessBound) {    unbindService(mWirelessConnection);    mWirelessBound=false;  }  if (mGpxBound) {    unbindService(mGpxConnection);    mGpxBound=false;  }}  }
class C{  public String createCommandString(org.topbraid.spin.model.Command spinCommand){  String result=node2String.get(spinCommand.asNode());  if (result == null) {    String text=ARQ2SPIN.getTextOnly(spinCommand);    if (text != null) {      result=ARQFactory.get().createPrefixDeclarations(spinCommand.getModel()) + text;    } else {      StringPrintContext p=new StringPrintContext();      p.setUsePrefixes(false);      p.setPrintPrefixes(false);      spinCommand.print(p);      result=p.getString();    }    if (useCaches) {      node2String.put(spinCommand.asNode(),result);    }  }  return result;}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  bytes=new byte[length];  data.readBytes(bytes);}  }
class C{  @Override protected void process(DistributionManager dm){  setManager(dm);}  }
class C{  public DataSizeAction(String group,String field,int bins,int scale){  super(group,NO_SIZE);  m_dataField=field;  setScale(scale);  setBinCount(bins);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.929 -0500",hash_original_method="D24E238B6DD6917FF9CA66039892AD0D",hash_generated_method="92B3AD6278D2091B2F641D48A5D22E17") protected void onUpdateComplete(int token,Object cookie,int result){}  }
class C{  public void invalidateHeaders(){  mHeaderProvider.invalidate();}  }
class C{  public boolean checkSuffix(String streamUrl){  if (streamUrl.contains(SUFFIX_PLS) || streamUrl.contains(SUFFIX_RAM) || streamUrl.contains(SUFFIX_WAX))   return true; else   return false;}  }
class C{  @Override public void write(int code) throws IOException {  if ((code & 0xffffff80) == 0) {    _bytes[_index]=(byte)code;    if (++_index >= _bytes.length) {      flushBuffer();    }  } else {    write2(code);  }}  }
class C{  private boolean isMimeFormat(long format,String primaryType){  String nat=getNativeForFormat(format);  if (nat == null) {    return false;  }  try {    DataFlavor df=new DataFlavor(nat);    if (primaryType.equals(df.getPrimaryType())) {      return true;    }  } catch (  Exception e) {  }  return false;}  }
class C{  private synchronized void tag(final String[] tagTitles,final JSONObject article,final JSONObject author) throws RepositoryException {  String articleTags=article.optString(Article.ARTICLE_TAGS);  for (int i=0; i < tagTitles.length; i++) {    final String tagTitle=tagTitles[i].trim();    JSONObject tag=tagRepository.getByTitle(tagTitle);    String tagId;    int userTagType;    final int articleCmtCnt=article.optInt(Article.ARTICLE_COMMENT_CNT);    if (null == tag) {      LOGGER.log(Level.TRACE,"Found a new tag[title={0}] in article[title={1}]",new Object[]{tagTitle,article.optString(Article.ARTICLE_TITLE)});      tag=new JSONObject();      tag.put(Tag.TAG_TITLE,tagTitle);      tag.put(Tag.TAG_REFERENCE_CNT,1);      tag.put(Tag.TAG_COMMENT_CNT,articleCmtCnt);      tag.put(Tag.TAG_FOLLOWER_CNT,0);      tag.put(Tag.TAG_DESCRIPTION,"");      tag.put(Tag.TAG_ICON_PATH,"");      tag.put(Tag.TAG_STATUS,0);      tag.put(Tag.TAG_GOOD_CNT,0);      tag.put(Tag.TAG_BAD_CNT,0);      tagId=tagRepository.add(tag);      tag.put(Keys.OBJECT_ID,tagId);      userTagType=Tag.TAG_TYPE_C_CREATOR;      final JSONObject tagCntOption=optionRepository.get(Option.ID_C_STATISTIC_TAG_COUNT);      final int tagCnt=tagCntOption.optInt(Option.OPTION_VALUE);      tagCntOption.put(Option.OPTION_VALUE,tagCnt + 1);      optionRepository.update(Option.ID_C_STATISTIC_TAG_COUNT,tagCntOption);      author.put(UserExt.USER_TAG_COUNT,author.optInt(UserExt.USER_TAG_COUNT) + 1);    } else {      tagId=tag.optString(Keys.OBJECT_ID);      LOGGER.log(Level.TRACE,"Found a existing tag[title={0}, id={1}] in article[title={2}]",new Object[]{tag.optString(Tag.TAG_TITLE),tag.optString(Keys.OBJECT_ID),article.optString(Article.ARTICLE_TITLE)});      final JSONObject tagTmp=new JSONObject();      tagTmp.put(Keys.OBJECT_ID,tagId);      final String title=tag.optString(Tag.TAG_TITLE);      articleTags=articleTags.replaceAll("(?i)" + Pattern.quote(tagTitle),title);      tagTmp.put(Tag.TAG_TITLE,title);      tagTmp.put(Tag.TAG_COMMENT_CNT,tag.optInt(Tag.TAG_COMMENT_CNT) + articleCmtCnt);      tagTmp.put(Tag.TAG_STATUS,tag.optInt(Tag.TAG_STATUS));      tagTmp.put(Tag.TAG_REFERENCE_CNT,tag.optInt(Tag.TAG_REFERENCE_CNT) + 1);      tagTmp.put(Tag.TAG_FOLLOWER_CNT,tag.optInt(Tag.TAG_FOLLOWER_CNT));      tagTmp.put(Tag.TAG_DESCRIPTION,tag.optString(Tag.TAG_DESCRIPTION));      tagTmp.put(Tag.TAG_ICON_PATH,tag.optString(Tag.TAG_ICON_PATH));      tagTmp.put(Tag.TAG_GOOD_CNT,tag.optInt(Tag.TAG_GOOD_CNT));      tagTmp.put(Tag.TAG_BAD_CNT,tag.optInt(Tag.TAG_BAD_CNT));      tagRepository.update(tagId,tagTmp);      userTagType=Tag.TAG_TYPE_C_ARTICLE;    }    article.put(Article.ARTICLE_TAGS,articleTags);    final JSONObject tagArticleRelation=new JSONObject();    tagArticleRelation.put(Tag.TAG + "_" + Keys.OBJECT_ID,tagId);    tagArticleRelation.put(Article.ARTICLE + "_" + Keys.OBJECT_ID,article.optString(Keys.OBJECT_ID));    tagArticleRepository.add(tagArticleRelation);    final JSONObject userTagRelation=new JSONObject();    userTagRelation.put(Tag.TAG + '_' + Keys.OBJECT_ID,tagId);    userTagRelation.put(User.USER + '_' + Keys.OBJECT_ID,article.optString(Article.ARTICLE_AUTHOR_ID));    userTagRelation.put(Common.TYPE,userTagType);    userTagRepository.add(userTagRelation);  }}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(getType()).append(": ");  String m=getMsg();  if (null != m)   buf.append(m);  buf.append('\n');  CacheEntry[] ce=getCacheEntries();  for (int i=0; i < ce.length; i++) {    buf.append('\t').append(ce[i].toString()).append('\n');  }  return buf.toString();}  }
class C{  public synchronized OMGraphicList prepare(){  if (lst == null) {    try {      initLST();    } catch (    IllegalArgumentException iae) {      logger.warning("VPFLayer.prepare: Illegal Argument Exception.\n\nPerhaps a file not found.  Check to make sure that the paths to the VPF data directories are the parents of \"lat\" or \"lat.\" files. \n\n" + iae);      return null;    }    if (lst == null) {      if (logger.isLoggable(Level.FINE)) {        logger.fine("VPFLayer| " + getName() + " prepare(), Library Selection Table not set.");      }      return null;    }  }  if (warehouse == null) {    StringBuffer dpb=new StringBuffer();    if (dataPaths != null) {      for (int num=0; num < dataPaths.length; num++) {        if (num > 0) {          dpb.append(":");        }        dpb.append(dataPaths[num]);      }    }    logger.warning("VPFLayer.getRectangle:  Data path probably wasn't set correctly (" + dpb.toString() + ").  The warehouse not initialized.");    return null;  }  Projection p=getProjection();  if (p == null || !(p instanceof GeoProj)) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("VPFLayer.getRectangle() called with a projection (" + p + ") set in the layer, which isn't being handled.");    }    return new OMGraphicList();  }  LatLonPoint ll1=p.getUpperLeft();  LatLonPoint ll2=p.getLowerRight();  if (logger.isLoggable(Level.FINE)) {    logger.fine("calling draw with boundaries: " + ll1 + " "+ ll2);  }  long start=System.currentTimeMillis();  OMGraphicList omgList=new OMGraphicList();  try {    omgList=warehouse.getFeatures(lst,ll1,ll2,p,omgList);  } catch (  FormatException fe) {    logger.warning("Caught FormatException reading features: " + fe.getMessage());  }  long stop=System.currentTimeMillis();  if (logger.isLoggable(Level.FINE)) {    logger.fine("read time: " + ((stop - start) / 1000d) + " seconds");  }  return omgList;}  }
class C{  public double[][] computeLocalFromPreviousObservations(int states[][],int offsetOfDestFromSources[]){  return computeLocalFromPreviousObservations(states,offsetOfDestFromSources,false);}  }
class C{  public ReplyKeyboardMarkup build(){  return new ReplyKeyboardMarkup(this);}  }
class C{  @Nullable public static ECKey recoverFromSignature(int recId,ECDSASignature sig,Sha256Hash message,boolean compressed){  Preconditions.checkArgument(recId >= 0,"recId must be positive");  Preconditions.checkArgument(sig.r.signum() >= 0,"r must be positive");  Preconditions.checkArgument(sig.s.signum() >= 0,"s must be positive");  Preconditions.checkNotNull(message);  BigInteger n=CURVE.getN();  BigInteger i=BigInteger.valueOf((long)recId / 2);  BigInteger x=sig.r.add(i.multiply(n));  BigInteger prime=SecP256K1Curve.q;  if (x.compareTo(prime) >= 0) {    return null;  }  ECPoint R=decompressKey(x,(recId & 1) == 1);  if (!R.multiply(n).isInfinity())   return null;  BigInteger e=message.toBigInteger();  BigInteger eInv=BigInteger.ZERO.subtract(e).mod(n);  BigInteger rInv=sig.r.modInverse(n);  BigInteger srInv=rInv.multiply(sig.s).mod(n);  BigInteger eInvrInv=rInv.multiply(eInv).mod(n);  ECPoint q=ECAlgorithms.sumOfTwoMultiplies(CURVE.getG(),eInvrInv,R,srInv);  return ECKey.fromPublicOnly(q.getEncoded(compressed));}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  private static void createCombinedTrace(final TraceList newTrace,final List<TraceList> traces,final Set<BreakpointAddress> addresses){  final Set<BreakpointAddress> visitedAddresses=new LinkedHashSet<BreakpointAddress>();  for (  final TraceList trace : traces) {    for (    final ITraceEvent event : trace) {      final BreakpointAddress address=event.getOffset();      if (!addresses.contains(address)) {        continue;      }      if (visitedAddresses.contains(address)) {        continue;      }      visitedAddresses.add(address);      newTrace.addEvent(event);    }  }}  }
class C{  public static TestSuite suiteWhenStandalone(final Class<? extends TestCase> clazz,final String regex,final Set<BufferMode> bufferModes,final TestMode... testModes){  if (!proxyIndexManagerTestingHasStarted) {    final Pattern pat=Pattern.compile(regex);    proxyIndexManagerTestingHasStarted=true;    final TestSuite suite=new MultiModeTestSuite(clazz.getName(),bufferModes,testModes);    addMatchingTestsFromClass(suite,clazz,pat);    return suite;  } else {    return new TestSuite(clazz);  }}  }
class C{  public void appendSpacesTo(int count){  this.charCount=this.charCount % HeaderCard.FITS_HEADER_CARD_SIZE;  if (this.charCount != 0) {    int spaces=count - this.charCount;    if (spaces > 0) {      this.buffer.append(FitsLineAppender.FULL_CARD_AS_SPACES,0,spaces);      this.charCount+=spaces;    }  }}  }
class C{  public void configure(){  from("file:src/data?noop=true&recusive=true").choice().when(xpath("/person/city = 'London'")).to("log:uk?showall=true").to("file:target/messages/uk").otherwise().to("file:target/messages/others");}  }
class C{  public void createIndex(String inFile){  String ssxFile=null;  String shpFile=null;  if (inFile.endsWith(".shp")) {    shpFile=inFile;    ssxFile=ssx(shpFile);  } else   if (inFile.endsWith(".ssx")) {    ssxFile=inFile;    shpFile=ssxFile.substring(0,ssxFile.indexOf(".ssx")) + ".shp";  } else {    return;  }  byte fileHeader[]=new byte[SHAPE_FILE_HEADER_LENGTH];  FileInputStream shp=null;  FileOutputStream ssx=null;  int shapeType;  try {    shp=new FileInputStream(shpFile);    ssx=new FileOutputStream(ssxFile);    shp.read(fileHeader,0,SHAPE_FILE_HEADER_LENGTH);    ssx.write(fileHeader,0,SHAPE_FILE_HEADER_LENGTH);    shapeType=readLEInt(fileHeader,32);switch (shapeType) {case SHAPE_TYPE_NULL:      indexNulls(shp,SHAPE_FILE_HEADER_LENGTH,ssx);    break;case SHAPE_TYPE_POINT:case SHAPE_TYPE_POINTZ:case SHAPE_TYPE_POINTM:  indexPoints(shp,SHAPE_FILE_HEADER_LENGTH,ssx);break;case SHAPE_TYPE_MULTIPOINT:case SHAPE_TYPE_MULTIPOINTZ:case SHAPE_TYPE_MULTIPOINTM:case SHAPE_TYPE_POLYLINE:case SHAPE_TYPE_POLYLINEZ:case SHAPE_TYPE_POLYLINEM:case SHAPE_TYPE_POLYGON:case SHAPE_TYPE_POLYGONZ:case SHAPE_TYPE_POLYGONM:indexPolygons(shp,SHAPE_FILE_HEADER_LENGTH,ssx);break;default :logger.warning("Unknown shape type: " + shapeType);}} catch (java.io.IOException e) {e.printStackTrace();} finally {try {if (shp != null) shp.close();if (ssx != null) ssx.close();} catch (java.io.IOException e) {}}}  }
class C{  public boolean filter(CanMessage m){  log.debug("Filter on Message: " + m.toString());  if (!CbusMessage.isEvent(m)) {    return false;  }  if (_nnEnabled && (CbusMessage.getNodeNumber(m) != _nn)) {    return false;  }  if (_evEnabled && (CbusMessage.getEvent(m) != _ev)) {    return false;  }  if ((_type != CbusConstants.EVENT_EITHER) && (_type != CbusMessage.getEventType(m))) {    return false;  }  log.debug("Message matches filter");  return true;}  }
class C{  public void rebuildResourceHandlerEntities(){  resourceHandlerEntities=new HashMap<ResourceHandler,Collection<String>>();  Iterator<Map.Entry<String,ResourceHandler>> entityResourceIter=entityResourceHandlerMap.entrySet().iterator();  while (entityResourceIter.hasNext()) {    Map.Entry<String,ResourceHandler> entry=entityResourceIter.next();    Collection<String> resourceHandlerEntityNames=resourceHandlerEntities.get(entry.getValue());    if (resourceHandlerEntityNames == null) {      resourceHandlerEntityNames=new LinkedList<String>();      resourceHandlerEntities.put(entry.getValue(),resourceHandlerEntityNames);    }    resourceHandlerEntityNames.add(entry.getKey());  }}  }
class C{  public static ViewPropertyAnimator showViewByScaleY(View v,AnimatorListener animatorListener){  ViewPropertyAnimator propertyAnimator=v.animate().setStartDelay(SCALE_DELAY).scaleY(1);  propertyAnimator.setListener(animatorListener);  return propertyAnimator;}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String xoredFlags=environment.getNextVariableString();  final String combinedFlags=environment.getNextVariableString();  final String negatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,xoredFlags));  instructions.add(ReilHelpers.createOr(offset + 1,OperandSize.BYTE,xoredFlags,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,combinedFlags));  instructions.add(ReilHelpers.createBisz(offset + 2,OperandSize.BYTE,combinedFlags,OperandSize.BYTE,negatedResult));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedResult);}  }
class C{  public Object newTransport(HttpEngine httpEngine) throws IOException {  return (spdyConnection != null) ? new SpdyTransport(httpEngine,spdyConnection) : new HttpTransport(httpEngine,out,in);}  }
class C{  public static void main(final String[] args){  final FixedSizeQueue<Integer> buffer=new FixedSizeQueue<Integer>(5);  System.out.println("Filling...");  for (int i=0; i < 10; i++) {    buffer.put(i);    System.out.println("i=" + i + ", size="+ buffer.getSize()+ ", values="+ buffer.getValues());  }  System.out.println("Resize to 10...");  buffer.resizeTo(10);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());  buffer.put(10);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());  System.out.println("Resize to 3...");  buffer.resizeTo(3);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());  buffer.put(11);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());  System.out.println("Resize to 5...");  buffer.resizeTo(5);  buffer.put(12);  buffer.put(13);  buffer.put(14);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());  System.out.println("Resize to 3...");  buffer.resizeTo(3);  System.out.println("size=" + buffer.getSize() + ", values="+ buffer.getValues());}  }
class C{  public Main overrides(String overrides){  this.overrides=overrides;  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecifies list of columns to base outlier/extreme value detection\n" + "\ton. If an instance is considered in at least one of those\n" + "\tattributes an outlier/extreme value, it is tagged accordingly.\n"+ " 'first' and 'last' are valid indexes.\n"+ "\t(default none)","R",1,"-R <col1,col2-col4,...>"));  result.addElement(new Option("\tThe factor for outlier detection.\n" + "\t(default: 3)","O",1,"-O <num>"));  result.addElement(new Option("\tThe factor for extreme values detection.\n" + "\t(default: 2*Outlier Factor)","E",1,"-E <num>"));  result.addElement(new Option("\tTags extreme values also as outliers.\n" + "\t(default: off)","E-as-O",0,"-E-as-O"));  result.addElement(new Option("\tGenerates Outlier/ExtremeValue pair for each numeric attribute in\n" + "\tthe range, not just a single indicator pair for all the attributes.\n" + "\t(default: off)","P",0,"-P"));  result.addElement(new Option("\tGenerates an additional attribute 'Offset' per Outlier/ExtremeValue\n" + "\tpair that contains the multiplier that the value is off the median.\n" + "\t   value = median + 'multiplier' * IQR\n"+ "Note: implicitely sets '-P'."+ "\t(default: off)","M",0,"-M"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  static int lastIndexOf(final CharSequence cs,final CharSequence searchChar,final int start){  return cs.toString().lastIndexOf(searchChar.toString(),start);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENTITY_ATTRIBUTE_SOURCE__ATTRIBUTE:    return getAttribute();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TIntHash(){  super();  no_entry_value=Constants.DEFAULT_INT_NO_ENTRY_VALUE;  if (no_entry_value != (int)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  void applyVoteActions(String actions){  if (actions.isEmpty())   return;  byte[] decoded=BaseEncoding.base64().decode(actions);  checkArgument(decoded.length % 5 == 0,"Length of vote log must be a multiple of 5");  int actionCount=decoded.length / 5;  LittleEndianDataInputStream actionStream=new LittleEndianDataInputStream(new ByteArrayInputStream(decoded));  AtomicReference<Exception> errorRef=new AtomicReference<>();  Stopwatch watch=Stopwatch.createStarted();  withTransaction(database.value(),null);  logger.info("Applying vote actions took {}",watch);  Exception error=errorRef.get();  if (error != null) {    throw Throwables.propagate(error);  }}  }
class C{  public void searchDeclarationsOfSentMessages(IJavaElement enclosingElement,SearchRequestor requestor,IProgressMonitor monitor) throws JavaModelException {  if (VERBOSE) {    Util.verbose("BasicSearchEngine.searchDeclarationsOfSentMessages(IJavaElement, SearchRequestor, SearchPattern, IProgressMonitor)");  }switch (enclosingElement.getElementType()) {case IJavaElement.FIELD:case IJavaElement.METHOD:case IJavaElement.TYPE:case IJavaElement.COMPILATION_UNIT:    break;default :  throw new IllegalArgumentException();}SearchPattern pattern=new DeclarationOfReferencedMethodsPattern(enclosingElement);searchDeclarations(enclosingElement,requestor,pattern,monitor);}  }
class C{  public static double[] vectorBoxCorner(double[] center,double[] result,double distance,boolean upperRight){  if (result == null || result.length != center.length) {    result=new double[center.length];  }  if (upperRight == false) {    distance=-distance;  }  distance=SIN_PI_DIV_4 * distance;  for (int i=0; i < center.length; i++) {    result[i]=center[i] + distance;  }  return result;}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public NfcStatus enableExclusiveNfc(){  NfcAdapter adapter=NfcAdapter.getDefaultAdapter(activity);  if (adapter != null) {    if (!adapter.isEnabled()) {      if (handleUnavailableNfc) {        toastMessage("Please activate NFC and then press back");        activity.startActivity(new Intent(android.provider.Settings.ACTION_NFC_SETTINGS));      }      return NfcStatus.AVAILABLE_DISABLED;    }    if (!noReaderMode && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      enableReaderMode(adapter);    } else {      enableForegroundDispatch(adapter);    }    return NfcStatus.AVAILABLE_ENABLED;  }  if (handleUnavailableNfc)   toastMessage("NFC is not available on this device");  return NfcStatus.NOT_AVAILABLE;}  }
class C{  protected double decisionFunctionR(int v){  double sum=0;  for (int i=0; i < vecs.size(); i++)   if (alphas[i] != alpha_s[i])   sum+=(alphas[i] - alpha_s[i]) * kEval(v,i);  return sum;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void testSetF3Momentary(){  boolean f3Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF3Momentary(f3Momentary);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecify the number of instances to\n" + "\tsample when estimating attributes.\n" + "\tIf not specified, then all instances\n"+ "\twill be used.","M",1,"-M <num instances>"));  newVector.addElement(new Option("\tSeed for randomly sampling instances.\n" + "\t(Default = 1)","D",1,"-D <seed>"));  newVector.addElement(new Option("\tNumber of nearest neighbours (k) used\n" + "\tto estimate attribute relevances\n" + "\t(Default = 10).","K",1,"-K <number of neighbours>"));  newVector.addElement(new Option("\tWeight nearest neighbours by distance","W",0,"-W"));  newVector.addElement(new Option("\tSpecify sigma value (used in an exp\n" + "\tfunction to control how quickly\n" + "\tweights for more distant instances\n"+ "\tdecrease. Use in conjunction with -W.\n"+ "\tSensible value=1/5 to 1/10 of the\n"+ "\tnumber of nearest neighbours.\n"+ "\t(Default = 2)","A",1,"-A <num>"));  return newVector.elements();}  }
class C{  protected S buildPatch(TaskState.TaskStage stage,E taskStateSubStage,Throwable t) throws Throwable {  S patchState=(S)getStateType().newInstance();  T taskState=taskStateType.newInstance();  taskState.stage=stage;  if (taskStateSubStage != null) {    ServiceDocumentUtils.setTaskStateSubStage(taskState,taskStateSubStage);  }  if (t != null) {    taskState.failure=Utils.toServiceErrorResponse(t);  }  ServiceDocumentUtils.setTaskState(patchState,taskState);  return patchState;}  }
class C{  public boolean testConnection(){  String dbUrl=m_dbTarget.getConnectionURL(m_databaseHost,m_databasePort,m_databaseName,m_dbTarget.getSystemUser());  log.info(dbUrl + " - " + m_dbTarget.getSystemUser()+ "/"+ m_systemPassword);  try {    Connection conn=m_dbTarget.getDriverConnection(dbUrl,m_dbTarget.getSystemUser(),m_systemPassword);    JDBCInfo info=new JDBCInfo(conn);    if (CLogMgt.isLevelFinest()) {      info.listCatalogs();      info.listSchemas();    }  } catch (  Exception e) {    log.log(Level.SEVERE,"test",e);    return false;  }  return true;}  }
class C{  private MidiEvent createScheduledEvent(byte[] msg,int offset,int count,long timestamp){  MidiEvent event;  if (count > POOL_EVENT_SIZE) {    event=new MidiEvent(msg,offset,count,timestamp);  } else {    event=(MidiEvent)removeEventfromPool();    if (event == null) {      event=new MidiEvent(POOL_EVENT_SIZE);    }    System.arraycopy(msg,offset,event.data,0,count);    event.count=count;    event.setTimestamp(timestamp);  }  return event;}  }
class C{  public Map<Integer,PdxType> typeMap(){  return distributedTypeRegistry.types();}  }
class C{  public terminal_set lookahead(){  return _lookahead;}  }
class C{  public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){  ArrayList<Move> optimalMoves=new ArrayList<Move>();  ArrayList<Move> unknownMoves=new ArrayList<Move>();  final int MATE0=100000;  int bestScore=-1000000;  UndoInfo ui=new UndoInfo();  for (  Move m : moveList) {    pos.makeMove(m,ui);    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);    GtbProbeResult res=gtbProbe(pos);    pos.unMakeMove(m,ui);    if (res.result == GtbProbeResult.UNKNOWN) {      unknownMoves.add(m);    } else {      int wScore;      if (res.result == GtbProbeResult.WMATE) {        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate; else         wScore=1;      } else       if (res.result == GtbProbeResult.BMATE) {        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate); else         wScore=-1;      } else {        wScore=0;      }      int score=pos.whiteMove ? wScore : -wScore;      if (score > bestScore) {        optimalMoves.clear();        optimalMoves.add(m);        bestScore=score;      } else       if (score == bestScore) {        optimalMoves.add(m);      } else {      }    }  }  for (  Move m : unknownMoves)   optimalMoves.add(m);  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (proxies == null) {    proxies=new Hashtable();  }  if (!proxies.containsKey(ic)) {    ImageFilter imgf=filter.getFilterInstance(ic);    proxies.put(ic,imgf);    src.addConsumer(imgf);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int[] choosePorts(int count){  try {    ServerSocket[] sockets=new ServerSocket[count];    int[] ports=new int[count];    for (int i=0; i < count; i++) {      sockets[i]=new ServerSocket(0);      ports[i]=sockets[i].getLocalPort();    }    for (int i=0; i < count; i++)     sockets[i].close();    return ports;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public StringBuilder appendToBuffer(StringBuilder buf){  buf.append(getTask());  buf.append(": ");  buf.append(getProcessed());  return buf;}  }
class C{  public Zone(Geometry geometry){  this.geometry=geometry;}  }
class C{  private ResponseValidator executePOSTRequest(final String xivSystem,final String uri,final String jsonBody) throws Exception {  ResponseValidator failureStatus=new ResponseValidator();  ClientResponse response=null;  try {    response=post(_base.resolve(uri),jsonBody);    JSONObject arrayClusters=response.getEntity(JSONObject.class);    failureStatus.validate(arrayClusters);  } catch (  Exception e) {    throw XIVRestException.exceptions.xivRestRequestFailure(uri.toString(),e.getMessage());  }  return failureStatus;}  }
class C{  public static Size bounded(Size basis,Size lowerBound,Size upperBound){  return new BoundedSize(basis,lowerBound,upperBound);}  }
class C{  @SuppressWarnings("static-access") private void resetOptionDropSource(){  m_optionDropSource.setSelected(s_parameters.isDropSource());}  }
class C{  public StopWatch(){  this(false);}  }
class C{  public DrawerBuilder withHeaderDivider(boolean headerDivider){  this.mHeaderDivider=headerDivider;  return this;}  }
class C{  protected int lastIndexOfArray(int r[],int rpos,int rend,char d[],int dpos){  if (rend < rpos) {    throw new IllegalArgumentException("rend < rpos");  }  if (rend == rpos) {    return (d.length);  }  if ((rend - rpos) == 1) {    for (int x=d.length - 1; x > dpos; x--) {      if (r[rpos] == d[x]) {        return (x);      }    }  }  int l=d.length - (rend - rpos);  while (l >= dpos) {    int y=l;    for (int x=rpos; x <= rend; x++) {      if (x == rend) {        return (l);      }      if (r[x] != d[y++]) {        break;      }    }    l--;  }  return (-1);}  }
class C{  public static <K,V>SynchronizedBagMultimap<K,V> of(MutableBagMultimap<K,V> multimap,Object lock){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedBagMultimap for null");  }  return new SynchronizedBagMultimap<>(multimap,lock);}  }
class C{  public CtMethod(CtClass returnType,String mname,CtClass[] parameters,CtClass declaring){  this(null,declaring);  ConstPool cp=declaring.getClassFile2().getConstPool();  String desc=Descriptor.ofMethod(returnType,parameters);  methodInfo=new MethodInfo(cp,mname,desc);  setModifiers(Modifier.PUBLIC | Modifier.ABSTRACT);}  }
class C{  public int readUnsignedByte(){  return (data[position++] & 0xFF);}  }
class C{  public IllegalStateException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void appendCoordinate(CoordinateSequence seq,int i,Writer writer) throws IOException {  writer.write(writeNumber(seq.getX(i)) + " " + writeNumber(seq.getY(i)));  if (outputDimension >= 3 && seq.getDimension() >= 3) {    double z=seq.getOrdinate(i,3);    if (!Double.isNaN(z)) {      writer.write(" ");      writer.write(writeNumber(z));    }  }}  }
class C{  public static ThreadSafeSourceFile[] wrapArray(Object syncObj,SourceFile[] sourceFiles){  ThreadSafeSourceFile[] threadSafeSourceFiles=new ThreadSafeSourceFile[sourceFiles.length];  for (int i=0; i < sourceFiles.length; ++i) {    threadSafeSourceFiles[i]=wrap(syncObj,sourceFiles[i]);  }  return threadSafeSourceFiles;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  try {    int sourceNode=xctxt.getCurrentNode();    xctxt.pushCurrentNode(sourceNode);    DTM dtm=xctxt.getDTM(sourceNode);    short nodeType=dtm.getNodeType(sourceNode);    if ((DTM.DOCUMENT_NODE != nodeType) && (DTM.DOCUMENT_FRAGMENT_NODE != nodeType)) {      SerializationHandler rthandler=transformer.getSerializationHandler();      ClonerToResultTree.cloneToResultTree(sourceNode,nodeType,dtm,rthandler,false);      if (DTM.ELEMENT_NODE == nodeType) {        super.execute(transformer);        SerializerUtils.processNSDecls(rthandler,sourceNode,nodeType,dtm);        transformer.executeChildTemplates(this,true);        String ns=dtm.getNamespaceURI(sourceNode);        String localName=dtm.getLocalName(sourceNode);        transformer.getResultTreeHandler().endElement(ns,localName,dtm.getNodeName(sourceNode));      }    } else {      super.execute(transformer);      transformer.executeChildTemplates(this,true);    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    xctxt.popCurrentNode();  }}  }
class C{  public void addConstants(JavaClass javaClass){  javaClass.getConstantPool().addUTF8("SourceDebugExtension");}  }
class C{  public <T extends PageObject>void waitUntil(T entity,Predicate<T> waitUntil,String errorMessage){  Preconditions.checkNotNull(entity);  Preconditions.checkNotNull(waitUntil);  Preconditions.checkArgument(!Strings.isNullOrEmpty(errorMessage));  waitUntilAfter(entity,waitUntil,errorMessage,waitInSeconds);}  }
class C{  @VisibleForTesting private void handlePostRequestIntent(Intent intent){  if (!hasRequest()) {    return;  }  boolean force=intent.getBooleanExtra(EXTRA_FORCE_ACTION,false);  long currentTimestamp=mBackoffScheduler.getCurrentTime();  if (currentTimestamp >= mTimestampForNextPostAttempt || force) {    String sessionID=generateRandomUUID();    boolean sendingInstallRequest=mSendInstallEvent;    boolean succeeded=generateAndPostRequest(currentTimestamp,sessionID);    if (succeeded && sendingInstallRequest) {      mSendInstallEvent=false;      registerNewRequest(currentTimestamp);      succeeded=generateAndPostRequest(currentTimestamp,sessionID);    }    if (force) {      if (succeeded) {        Log.v(TAG,"Requests successfully sent to Omaha server.");      } else {        Log.e(TAG,"Requests failed to reach Omaha server.");      }    }  } else {    Intent postIntent=createPostRequestIntent(mApplicationContext,false);    mBackoffScheduler.createAlarm(postIntent,mTimestampForNextPostAttempt);  }  saveState();}  }
class C{  public boolean addMonitor(StatisticsMonitor monitor){synchronized (this) {    boolean added=false;    List<StatisticsMonitor> oldMonitors=this.monitors;    if (!oldMonitors.contains(monitor)) {      List<StatisticsMonitor> newMonitors=new ArrayList<StatisticsMonitor>(oldMonitors);      added=newMonitors.add(monitor);      this.monitors=Collections.unmodifiableList(newMonitors);    }    if (enableMonitorThread && !this.monitors.isEmpty() && this.notifier == null) {      this.notifier=new StatMonitorNotifier();      this.notifier.start();    }    return added;  }}  }
class C{  @Override public void openElement(String tagName){  Element newElement=document.createElement(tagName);  current.appendChild(newElement);  current=newElement;}  }
class C{  public void addEndpoints(List<String> endpoints,boolean isDiscovered){  HashMap<String,String> endpointMap=makeEndpointMap(EndpointUtility.changeCase(endpoints),isDiscovered);  addEndpoints(endpointMap);}  }
class C{  public DefaultNodeCoder(){}  }
class C{  public String format(String separator,String[] quotes){  return "";}  }
class C{  public String createSnapshotSchedule(String name,String path,String schedule,String pattern,Integer duration) throws IsilonException {  return createSnapshotSchedule(_baseUrl.resolve(URI_SNAPSHOT_SCHEDULES),"schedule",new IsilonSnapshotSchedule(name,path,schedule,pattern,duration));}  }
class C{  public static byte[] readGcsFile(GcsService gcsService,GcsFilename file) throws IOException {  try (InputStream input=Channels.newInputStream(gcsService.openReadChannel(file,0))){    return ByteStreams.toByteArray(input);  } }  }
class C{  public boolean isShowReturnLink(){  return showReturnLink;}  }
class C{  public void login(String username,String password) throws VMWareException {  if (service != null) {    logout();  }  try {    service=new ServiceInstance(url,username,password,true);    WSClient wsclient=service.getServerConnection().getVimService().getWsc();    wsclient.setConnectTimeout(CONNECTION_TIMEOUT);    wsclient.setReadTimeout(CONNECTION_TIMEOUT);  } catch (  RemoteException e) {    throw new VMWareException(e);  }catch (  MalformedURLException e) {    throw new VMWareException(e);  }catch (  RuntimeException e) {    throw new VMWareException(e);  }}  }
class C{  private static void checkReference(Address refaddr){  ObjectReference ref=refaddr.loadObjectReference();  if (!MemoryManager.validRef(ref)) {    Log.writeln();    Log.writeln("Invalid ref reported while scanning stack");    Log.write(refaddr);    Log.write(":");    Log.flush();    MemoryManager.dumpRef(ref);    Log.writeln();    Log.writeln("Dumping stack:");    RVMThread.dumpStack();    VM.sysFail("\n\nScanStack: Detected bad GC map; exiting RVM with fatal error");  }}  }
class C{  private boolean isNoTags(){  return noTags;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (isFirstAppLaunch()) {    setAppHasBeenLaunched();    startActivity(new Intent(this,OnboardingActivity.class));  } else {    startActivity(new Intent(this,MainActivity.class));  }  finish();}  }
class C{  private void Calculate3DPosition(CarouselItemImage child,int diameter,float angleOffset){  angleOffset=angleOffset * (float)(Math.PI / 180.0f);  float x=-(float)(diameter / 2 * android.util.FloatMath.sin(angleOffset)) + diameter / 2 - child.getWidth() / 2;  float z=diameter / 2 * (1.0f - (float)android.util.FloatMath.cos(angleOffset));  float y=-getHeight() / 2 + (float)(z * android.util.FloatMath.sin(mTheta));  child.setItemX(x);  child.setItemZ(z);  child.setItemY(y);}  }
class C{  public final boolean lowerNumericBoundIsOpen(){  if (m_AttributeMetaInfo == null) {    return true;  }  return m_AttributeMetaInfo.m_LowerBoundIsOpen;}  }
class C{  public MyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  boolean makeMove(IPlayer ip){  Player p=(Player)ip;  IGameMove m=p.decideMove(gameState);  if (m == null) {    return false;  }  if (!m.execute(gameState)) {    return false;  }  return true;}  }
class C{  public static void main(String[] args){  runFilter(new PartitionedMultiFilter(),args);}  }
class C{  public void testBug453360() throws Exception {  doTest("object","typeof new RegExp();");  doTest("object","typeof /foo/;");}  }
class C{  public UpdateDomainOfflineScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public void configure(JobConf conf){  this.conf=conf;}  }
class C{  public DataShapeAction(String group,String field){  super(group,NO_SHAPE);  m_dataField=field;}  }
class C{  public void printXMLDecl(char[] space1,char[] space2,char[] space3,char[] version,char versionDelim,char[] space4,char[] space5,char[] space6,char[] encoding,char encodingDelim,char[] space7,char[] space8,char[] space9,char[] standalone,char standaloneDelim,char[] space10) throws IOException {  printString("<?xml");  printSpaces(space1,false);  printString("version");  if (space2 != null) {    printSpaces(space2,true);  }  printCharacter('=');  if (space3 != null) {    printSpaces(space3,true);  }  printCharacter(versionDelim);  printCharacters(version);  printCharacter(versionDelim);  if (space4 != null) {    printSpaces(space4,false);    if (encoding != null) {      printString("encoding");      if (space5 != null) {        printSpaces(space5,true);      }      printCharacter('=');      if (space6 != null) {        printSpaces(space6,true);      }      printCharacter(encodingDelim);      printCharacters(encoding);      printCharacter(encodingDelim);      if (space7 != null) {        printSpaces(space7,standalone == null);      }    }    if (standalone != null) {      printString("standalone");      if (space8 != null) {        printSpaces(space8,true);      }      printCharacter('=');      if (space9 != null) {        printSpaces(space9,true);      }      printCharacter(standaloneDelim);      printCharacters(standalone);      printCharacter(standaloneDelim);      if (space10 != null) {        printSpaces(space10,true);      }    }  }  printString("?>");}  }
class C{  private void findContentChange(JavaElementInfo oldInfo,JavaElementInfo newInfo,IJavaElement newElement){  if (oldInfo instanceof MemberElementInfo && newInfo instanceof MemberElementInfo) {    if (((MemberElementInfo)oldInfo).getModifiers() != ((MemberElementInfo)newInfo).getModifiers()) {      this.delta.changed(newElement,IJavaElementDelta.F_MODIFIERS);    }    if (oldInfo instanceof AnnotatableInfo && newInfo instanceof AnnotatableInfo) {      findAnnotationChanges(((AnnotatableInfo)oldInfo).annotations,((AnnotatableInfo)newInfo).annotations,newElement);    }    if (oldInfo instanceof SourceMethodElementInfo && newInfo instanceof SourceMethodElementInfo) {      SourceMethodElementInfo oldSourceMethodInfo=(SourceMethodElementInfo)oldInfo;      SourceMethodElementInfo newSourceMethodInfo=(SourceMethodElementInfo)newInfo;      if (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(),newSourceMethodInfo.getReturnTypeName()) || !CharOperation.equals(oldSourceMethodInfo.getTypeParameterNames(),newSourceMethodInfo.getTypeParameterNames()) || !equals(oldSourceMethodInfo.getTypeParameterBounds(),newSourceMethodInfo.getTypeParameterBounds())) {        this.delta.changed(newElement,IJavaElementDelta.F_CONTENT);      }    } else     if (oldInfo instanceof SourceFieldElementInfo && newInfo instanceof SourceFieldElementInfo) {      if (!CharOperation.equals(((SourceFieldElementInfo)oldInfo).getTypeName(),((SourceFieldElementInfo)newInfo).getTypeName())) {        this.delta.changed(newElement,IJavaElementDelta.F_CONTENT);      }    } else     if (oldInfo instanceof SourceTypeElementInfo && newInfo instanceof SourceTypeElementInfo) {      SourceTypeElementInfo oldSourceTypeInfo=(SourceTypeElementInfo)oldInfo;      SourceTypeElementInfo newSourceTypeInfo=(SourceTypeElementInfo)newInfo;      if (!CharOperation.equals(oldSourceTypeInfo.getSuperclassName(),newSourceTypeInfo.getSuperclassName()) || !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(),newSourceTypeInfo.getInterfaceNames())) {        this.delta.changed(newElement,IJavaElementDelta.F_SUPER_TYPES);      }      if (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(),newSourceTypeInfo.getTypeParameterNames()) || !equals(oldSourceTypeInfo.getTypeParameterBounds(),newSourceTypeInfo.getTypeParameterBounds())) {        this.delta.changed(newElement,IJavaElementDelta.F_CONTENT);      }      HashMap oldTypeCategories=oldSourceTypeInfo.categories;      HashMap newTypeCategories=newSourceTypeInfo.categories;      if (oldTypeCategories != null) {        Set elements;        if (newTypeCategories != null) {          elements=new HashSet(oldTypeCategories.keySet());          elements.addAll(newTypeCategories.keySet());        } else         elements=oldTypeCategories.keySet();        Iterator iterator=elements.iterator();        while (iterator.hasNext()) {          IJavaElement element=(IJavaElement)iterator.next();          String[] oldCategories=(String[])oldTypeCategories.get(element);          String[] newCategories=newTypeCategories == null ? null : (String[])newTypeCategories.get(element);          if (!Util.equalArraysOrNull(oldCategories,newCategories)) {            this.delta.changed(element,IJavaElementDelta.F_CATEGORIES);          }        }      } else       if (newTypeCategories != null) {        Iterator elements=newTypeCategories.keySet().iterator();        while (elements.hasNext()) {          IJavaElement element=(IJavaElement)elements.next();          this.delta.changed(element,IJavaElementDelta.F_CATEGORIES);        }      }    }  }}  }
class C{  public static boolean save(Bitmap orgBitmap,String filePath) throws IOException {  long start=System.currentTimeMillis();  if (orgBitmap == null) {    return false;  }  if (filePath == null) {    return false;  }  boolean isSaveSuccess=true;  int width=orgBitmap.getWidth();  int height=orgBitmap.getHeight();  byte[] dummyBytesPerRow=null;  boolean hasDummy=false;  int rowWidthInBytes=BYTE_PER_PIXEL * width;  if (rowWidthInBytes % BMP_WIDTH_OF_TIMES > 0) {    hasDummy=true;    dummyBytesPerRow=new byte[(BMP_WIDTH_OF_TIMES - (rowWidthInBytes % BMP_WIDTH_OF_TIMES))];    for (int i=0; i < dummyBytesPerRow.length; i++) {      dummyBytesPerRow[i]=(byte)0xFF;    }  }  int[] pixels=new int[width * height];  int imageSize=(rowWidthInBytes + (hasDummy ? dummyBytesPerRow.length : 0)) * height;  int imageDataOffset=0x36;  int fileSize=imageSize + imageDataOffset;  orgBitmap.getPixels(pixels,0,width,0,0,width,height);  ByteBuffer buffer=ByteBuffer.allocate(fileSize);  buffer.put((byte)0x42);  buffer.put((byte)0x4D);  buffer.put(writeInt(fileSize));  buffer.put(writeShort((short)0));  buffer.put(writeShort((short)0));  buffer.put(writeInt(imageDataOffset));  buffer.put(writeInt(0x28));  buffer.put(writeInt(width + (hasDummy ? (dummyBytesPerRow.length == 3 ? 1 : 0) : 0)));  buffer.put(writeInt(height));  buffer.put(writeShort((short)1));  buffer.put(writeShort((short)24));  buffer.put(writeInt(0));  buffer.put(writeInt(imageSize));  buffer.put(writeInt(0));  buffer.put(writeInt(0));  buffer.put(writeInt(0));  buffer.put(writeInt(0));  int row=height;  int col=width;  int startPosition=(row - 1) * col;  int endPosition=row * col;  while (row > 0) {    for (int i=startPosition; i < endPosition; i++) {      buffer.put((byte)(pixels[i] & 0x000000FF));      buffer.put((byte)((pixels[i] & 0x0000FF00) >> 8));      buffer.put((byte)((pixels[i] & 0x00FF0000) >> 16));    }    if (hasDummy) {      buffer.put(dummyBytesPerRow);    }    row--;    endPosition=startPosition;    startPosition=startPosition - col;  }  FileOutputStream fos=new FileOutputStream(filePath);  fos.write(buffer.array());  fos.close();  Log.v("AndroidBmpUtil",System.currentTimeMillis() - start + " ms");  return isSaveSuccess;}  }
class C{  @Override public K remove(K key){  AugmentedNode<K> t=(AugmentedNode<K>)root();  if (t == null) {    return null;  }  while (t.value() == null) {    int cmp=compare(t.right().min,key);    if (cmp > 0) {      t=t.left();    } else {      t=t.right();    }  }  K val=t.value();  if (compare(t.key(),key) == 0) {    deleteEntry(t);    return val;  } else {    return null;  }}  }
class C{  public Matrix4f rotationZ(float ang){  float sin, cos;  sin=(float)Math.sin(ang);  cos=(float)Math.cos(ang);  MemUtil.INSTANCE.identity(this);  this._m00(cos);  this._m01(sin);  this._m10(-sin);  this._m11(cos);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public static void close(final URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public synchronized int init5Baud(int address){  int result=0;  setCurrAddress(address);  try {    setDeviceName(deviceName);    for (int i=0; i < baudRates.length; i++) {      log.info(String.format("Init Device:%s Address:%02x, Speed:%d",deviceName,address,baudRates[i]));      setCustomBaudRate(baudRates[i]);      setCurrBaudRate(baudRates[i]);      setProtStat(ProtStatus.CONNECTING);      send5Baud(address);      try {        Thread.sleep(500);      } catch (      InterruptedException e) {        log.error("Sleep",e);      }      if (getProtStat() != ProtStatus.CONNECTING) {        log.info(String.format("Init OK Device:%s Address:%02x, Speed:%d",deviceName,address,baudRates[i]));        result=getCurrBaudRate();        commTimer.restart();        break;      }    }    if (result == 0) {      log.warn(String.format("Init Timeout Device:%s Address:%02x",deviceName,address));      close();    }  } catch (  Exception ex) {    log.error(deviceName + ": " + ex.toString());    close();    setProtStat(ProtStatus.ERROR);    result=0;  }  setCurrBaudRate(result);  return (result);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] roles=getStringList(stack);  Show s=getShow(stack);  if (s == null)   return "";  java.util.ArrayList rv=new java.util.ArrayList();  for (int i=0; i < roles.length; i++) {    String[] str=s.getPeopleList(Show.getRoleForString(roles[i]));    for (int j=0; (str != null) && j < str.length; j++)     rv.add(str[j]);  }  return (String[])rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  public void increment(int i1,int i2){  increment(i1,i2,0);}  }
class C{  public static ValueNamePair retrieveWarning(){  ValueNamePair vp=(ValueNamePair)Env.getCtx().remove(LAST_WARNING);  return vp;}  }
class C{  private void checkAlterPartialConverters() throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new JodaTimePermission("ConverterManager.alterPartialConverters"));  }}  }
class C{  public HashAttributeSet(Attribute[] attributes){  this(attributes,Attribute.class);}  }
class C{  public Sorting(final Map<String,SortOrder> sortingRules){  if (sortingRules != null) {    sortRules.putAll(sortingRules);  }}  }
class C{  public static <B>ImmutableTypeToInstanceMap<B> of(){  return new ImmutableTypeToInstanceMap<B>(ImmutableMap.<TypeToken<? extends B>,B>of());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public T caseTField(TField object){  return null;}  }
class C{  public static void exercise3(){  Rectangle box1=new Rectangle(2,4,7,9);  Point p1=findCenter(box1);  printPoint(p1);  box1.grow(1,1);  Point p2=findCenter(box1);  printPoint(p2);}  }
class C{  @Override public void destroy(){  close();  URLConnection conn=_conn;  _conn=null;  if (conn instanceof HttpURLConnection)   ((HttpURLConnection)conn).disconnect();}  }
class C{  @Override public boolean parseAlignments(){  return true;}  }
class C{  public boolean prepareForNextPage(){  if (hasMore()) {    mLastStart=mStart;    mStart+=mNumPerPage;    return true;  }  return false;}  }
class C{  private int calculateNested(@NonNull String text){  int nested=0;  while (true) {    if ((nested + 1) * KEY_HEADER.length() > text.length()) {      break;    }    String sub=text.substring(nested * KEY_HEADER.length(),(nested + 1) * KEY_HEADER.length());    if (KEY_HEADER.equals(sub)) {      nested++;    } else     if (KEY_0_UNORDER_LIST_CHAR.equals(sub) || KEY_1_UNORDER_LIST_CHAR.equals(sub) || KEY_2_UNORDER_LIST_CHAR.equals(sub)) {      return nested;    } else {      return -1;    }  }  return nested;}  }
class C{  public static String cleanString(String toClean){  String tmp=INVALID_XML_CHARS.matcher(toClean).replaceAll("");  tmp=DISCOURAGED_XML_CHARS.matcher(tmp).replaceAll("");  return INVALID_CHARACTERS.matcher(tmp).replaceAll("");}  }
class C{  public static File createTempDir(File dir,boolean cleanup) throws IOException {  if (!dir.mkdirs() && !dir.exists()) {    throw new IOException(String.format("Failed to create directory structure '%s'",dir.toString()));  }  if (cleanup) {    addCleanupHook(dir.toPath());  }  return dir;}  }
class C{  public TaskErrorHandlingException(){  super();}  }
class C{  public boolean isSubscribed(){  return mSubscribed;}  }
class C{  protected void appendQuotedString(String str){  appendQuotedString(str.getBytes());}  }
class C{  public static List<String> findCommonPkgs(List<String> packages){  List<String[]> common=new Vector<String[]>();  for (  String pack : packages) {    String[] spl=pack.split("\\.");    boolean fnd=false;    for (int i=0; i < common.size(); i++) {      String[] com=common.get(i);      if (com[0].equals(spl[0])) {        common.set(i,Arrays.stream(spl).filter(null).toArray(null));        fnd=true;      }    }    if (!fnd)     common.add(spl);  }  return common.stream().map(null).collect(Collectors.toList());}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SWP");  translateAll(environment,instruction,"SWP",instructions);}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public SWFShape tagDefineShape3(int id,Rect outline) throws IOException {  if (tags != null) {    return tags.tagDefineShape3(id,outline);  }  return null;}  }
class C{  public PaymentInfoMagcardRefund(String sHolderName,String sCardNumber,String sExpirationDate,String sTransactionID,double dTotal){  super(sHolderName,sCardNumber,sExpirationDate,sTransactionID,dTotal);}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength() + (getDataLength() % 4)];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  System.arraycopy(nonce,0,binValue,4,(int)getDataLength());  return binValue;}  }
class C{  static @ForceInline void checkExactType(Object mhObj,Object expectedObj){  MethodHandle mh=(MethodHandle)mhObj;  MethodType expected=(MethodType)expectedObj;  MethodType actual=mh.type();  if (actual != expected)   throw newWrongMethodTypeException(expected,actual);}  }
class C{  private static boolean compareParam(String jdiffParam,Type reflectionParamType){  if (jdiffParam == null) {    return false;  }  String reflectionParam=typeToString(reflectionParamType);  if (jdiffParam.equals(reflectionParam)) {    return true;  }  int jdiffParamEndOffset=jdiffParam.indexOf("...");  int reflectionParamEndOffset=reflectionParam.indexOf("[]");  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);    return jdiffParam.equals(reflectionParam);  }  return false;}  }
class C{  public void removeCouplingListener(final CouplingListener listener){  couplingListeners.remove(listener);}  }
class C{  public static synchronized void register(PurchaseObserver observer){  sPurchaseObserver=observer;}  }
class C{  public void update(Value value){  if (size() == 0) {    add(value);  } else {    Key subKey=makeSubKey(value);    client.put(this.policy,subKey,new Bin(ListElementBinName,value));  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static String bitcoinValueToPlainString(BigInteger value){  if (value == null) {    throw new IllegalArgumentException("Value cannot be null");  }  BigDecimal valueInBTC=new BigDecimal(value).divide(new BigDecimal(Utils.COIN));  return valueInBTC.toPlainString();}  }
class C{  @Override public void abort(){  m_store.reset();}  }
class C{  public void searchFinish(){  super.searchFinish();  m_SumLeaves+=m_LeafCount;  m_SumSqLeaves+=m_LeafCount * m_LeafCount;  if (m_LeafCount < m_MinLeaves)   m_MinLeaves=m_LeafCount;  if (m_LeafCount > m_MaxLeaves)   m_MaxLeaves=m_LeafCount;  m_SumIntNodes+=m_IntNodeCount;  m_SumSqIntNodes+=m_IntNodeCount * m_IntNodeCount;  if (m_IntNodeCount < m_MinIntNodes)   m_MinIntNodes=m_IntNodeCount;  if (m_IntNodeCount > m_MaxIntNodes)   m_MaxIntNodes=m_IntNodeCount;}  }
class C{  public static void validateSOAPHeader(SOAPHeader soapHeader){  Set<QName> fields=new HashSet<>();  Iterator<?> it=soapHeader.getChildElements();  while (it.hasNext()) {    Object next=it.next();    if (next instanceof SOAPElement) {      SOAPElement soapElement=(SOAPElement)next;      if (!fields.add(soapElement.getElementQName())) {        throw new CodedException(X_DUPLICATE_HEADER_FIELD,"SOAP header contains duplicate field '%s'",soapElement.getElementQName());      }    }  }}  }
class C{  @Override public CarbonIterator<Result> executeQuery(List<BlockExecutionInfo> tableBlockExecutionInfosList,int[] sliceIndex) throws QueryExecutionException {  long startTime=System.currentTimeMillis();  BlockExecutionInfo latestInfo=tableBlockExecutionInfosList.get(tableBlockExecutionInfosList.size() - 1);  execService=Executors.newFixedThreadPool(numberOfCores);  QueryStatistic statistic=new QueryStatistic();  ScannedResultMerger scannedResultProcessor=null;  if (null != latestInfo.getSortInfo() && latestInfo.getSortInfo().getSortDimensionIndex().length > 0) {    scannedResultProcessor=new SortedScannedResultMerger(latestInfo,numberOfCores);  } else {    scannedResultProcessor=new UnSortedScannedResultMerger(latestInfo,numberOfCores);  }  try {    List<Future> listFutureObjects=new ArrayList<Future>();    for (    BlockExecutionInfo blockInfo : tableBlockExecutionInfosList) {      DataRefNodeFinder finder=new BTreeDataRefNodeFinder(blockInfo.getEachColumnValueSize());      DataRefNode startDataBlock=finder.findFirstDataBlock(blockInfo.getDataBlock().getDataRefNode(),blockInfo.getStartKey());      DataRefNode endDataBlock=finder.findLastDataBlock(blockInfo.getDataBlock().getDataRefNode(),blockInfo.getEndKey());      long numberOfBlockToScan=endDataBlock.nodeNumber() - startDataBlock.nodeNumber() + 1;      blockInfo.setFirstDataBlock(startDataBlock);      blockInfo.setNumberOfBlockToScan(numberOfBlockToScan);      blockInfo.setScannedResultProcessor(scannedResultProcessor);      listFutureObjects.add(execService.submit(new QueryRunner(blockInfo)));    }    execService.shutdown();    execService.awaitTermination(2,TimeUnit.DAYS);    for (    Future future : listFutureObjects) {      try {        future.get();      } catch (      ExecutionException e) {        throw new QueryExecutionException(e.getMessage());      }    }    CarbonIterator<Result> queryResultIterator=scannedResultProcessor.getQueryResultIterator();    statistic.addStatistics("Time taken to scan " + tableBlockExecutionInfosList.size() + " block(s) ",System.currentTimeMillis());    latestInfo.getStatisticsRecorder().recordStatistics(statistic);    return queryResultIterator;  } catch (  QueryExecutionException e) {    LOGGER.error(e,e.getMessage());    throw new QueryExecutionException(e);  }catch (  InterruptedException e) {    LOGGER.error(e,e.getMessage());    throw new QueryExecutionException(e);  } finally {    execService=null;    latestInfo=null;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:  return bogusTypeRef != null;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DEFINED_FIELD:return definedField != null;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  protected List<TypeNameWithArity> createTypeArityList(TypeName t,String extractVariableName,int maxArity){  TypeName u=match(t).when(typeOf(TypeVariableName.class)).get(null).orElse(null).getMatch();  List<TypeNameWithArity> typeArityList=new ArrayList<>();  typeArityList.add(TypeNameWithArity.of(ParameterizedTypeName.get(MATCH_EXACT,t),0));  typeArityList.add(TypeNameWithArity.of(ParameterizedTypeName.get(MATCH_ANY,t),1));  IntStream.rangeClosed(0,maxArity).forEach(null);  return typeArityList;}  }
class C{  public static Map<ContactId,ParticipantStatus> parseResourceList(String xml,ParticipantStatus status) throws PayloadException {  Map<ContactId,ParticipantStatus> participants=new HashMap<ContactId,ParticipantStatus>();  try {    InputSource pidfInput=new InputSource(new ByteArrayInputStream(xml.getBytes(UTF8)));    ResourceListParser listParser=new ResourceListParser(pidfInput).parse();    ResourceListDocument resList=listParser.getResourceList();    if (resList != null) {      for (      String entry : resList.getEntries()) {        PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(entry);        if (number == null) {          continue;        }        ContactId contact=ContactUtil.createContactIdFromValidatedData(number);        if (!contact.equals(ImsModule.getImsUserProfile().getUsername())) {          participants.put(contact,status);          if (sLogger.isActivated()) {            sLogger.debug("Add participant " + contact + " to the list");          }        }      }    }  } catch (  ParserConfigurationException e) {    throw new PayloadException("Can't parse resource-list document!",e);  }catch (  SAXException e) {    throw new PayloadException("Can't parse resource-list document!",e);  }catch (  ParseFailureException e) {    throw new PayloadException("Can't parse resource-list document!",e);  }  return participants;}  }
class C{  public static ExecResult javaExecWithoutGradle(Action<JavaExecSpec> spec) throws IOException {  Project project=ProjectBuilder.builder().build();  return javaExec(project,spec);}  }
class C{  public String globalInfo(){  return "Class for boosting a nominal class classifier using the Adaboost " + "M1 method. Only nominal class problems can be tackled. Often " + "dramatically improves performance, but sometimes overfits.\n\n"+ "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static byte[] decode(final byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  final java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  @Override public String toString(){  return "Addr " + Services.addressAsHexString(value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void createTable(String tableName,String tableColumns,String engine) throws SQLException {  if (testSingleHost) {    Statement stmt=sharedConnection.createStatement();    stmt.execute("drop table if exists " + tableName);    stmt.execute("create table " + tableName + " ("+ tableColumns+ ") "+ ((engine != null) ? engine : ""));    tempTableList.add(tableName);  }}  }
class C{  public synchronized void addListener(UpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  for (  UpdateListener existing : listeners) {    if (existing == listener) {      return;    }  }  listeners=(UpdateListener[])CollectionUtil.arrayExpandAddSingle(listeners,listener);}  }
class C{  public boolean write(Type type,Object value,NodeMap node){  Class actual=value.getClass();  Class expect=type.getType();  Class real=actual;  if (actual.isArray()) {    real=writeArray(actual,value,node);  }  if (actual != expect) {    node.put(label,real.getName());  }  return writeReference(value,node);}  }
class C{  void splitHistories(List<SubscriptionHistory> subscriptionHistories){  List<SubscriptionHistory> tempHistories=new ArrayList<SubscriptionHistory>();  Long deactivationTime=null;  for (  SubscriptionHistory subscriptionHistory : subscriptionHistories) {    SubscriptionStatus subscriptionStatus=subscriptionHistory.getStatus();    if (subscriptionStatus == SubscriptionStatus.SUSPENDED || subscriptionStatus == SubscriptionStatus.EXPIRED || subscriptionStatus == SubscriptionStatus.SUSPENDED_UPD) {      deactivationTime=Long.valueOf(subscriptionHistory.getModdate().getTime());      if (tempHistories.size() > 0) {        boolean subscriptionWasUpgraded=productHasChanged(tempHistories.get(tempHistories.size() - 1),subscriptionHistory);        addSubscription(tempHistories,deactivationTime,!subscriptionWasUpgraded,subscriptionWasUpgraded);        tempHistories.clear();      }    }    tempHistories.add(subscriptionHistory);  }  if (tempHistories.size() > 0 && (tempHistories.size() > 1 || tempHistories.get(0).getStatus().isActiveOrPendingUpd())) {    addSubscription(tempHistories,deactivationTime,false,false);  }}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("DynamicManagedBean[");  sb.append("name=");  sb.append(name);  sb.append(", className=");  sb.append(className);  sb.append(", description=");  sb.append(description);  if (group != null) {    sb.append(", group=");    sb.append(group);  }  sb.append(", type=");  sb.append(type);  sb.append(", attributes=");  sb.append(Arrays.asList(attributes));  sb.append("]");  return (sb.toString());}  }
class C{  public MovingAverageItem(RegularTimePeriod period,BigDecimal movingAverage){  super(period,new MovingAverage(movingAverage));}  }
class C{  public static StringBuffer parseName(byte[] header,int offset,int length){  StringBuffer result=new StringBuffer(length);  int end=offset + length;  for (int i=offset; i < end; ++i) {    if (header[i] == 0)     break;    result.append((char)header[i]);  }  return result;}  }
class C{  public static String validateCreditCardNumber(String creditCardNumber){  if (creditCardNumber == null || creditCardNumber.length() == 0)   return "CreditCardNumberError";  String ccNumber1=checkNumeric(creditCardNumber);  int ccLength=ccNumber1.length();  StringBuffer buf=new StringBuffer();  for (int i=ccLength; i != 0; i--)   buf.append(ccNumber1.charAt(i - 1));  String ccNumber=buf.toString();  int sum=0;  for (int i=0; i < ccLength; i++) {    int digit=Character.getNumericValue(ccNumber.charAt(i));    if (i % 2 == 1) {      digit*=2;      if (digit > 9)       digit-=9;    }    sum+=digit;  }  if (sum % 10 == 0)   return "";  s_log.fine("validateCreditCardNumber - " + creditCardNumber + " -> "+ ccNumber+ ", Luhn="+ sum);  return "CreditCardNumberError";}  }
class C{  int order(){  return 3;}  }
class C{  public void writeXml(ResultSet rs,java.io.OutputStream oStream) throws SQLException, IOException {  this.populate(rs);  curPosBfrWrite=this.getRow();  this.writeXml(oStream);}  }
class C{  public LangString replace(CharSequence target,CharSequence replacement){  return new LangString(toString().replace(target,replacement),getLang());}  }
class C{  public CNativeCallgraphsViewsModel(final INaviModule module){  Preconditions.checkNotNull(module,"IE02049: Module argument can't be null");  m_module=module;  module.addListener(m_moduleListener);  initListeners();}  }
class C{  public void testViewMetaData() throws SQLException {  try {    this.rs=this.conn.getMetaData().getTableTypes();    while (this.rs.next()) {      if ("VIEW".equalsIgnoreCase(this.rs.getString(1))) {        this.stmt.executeUpdate("DROP VIEW IF EXISTS vTestViewMetaData");        createTable("testViewMetaData","(field1 INT)");        this.stmt.executeUpdate("CREATE VIEW vTestViewMetaData AS SELECT field1 FROM testViewMetaData");        ResultSet tablesRs=null;        try {          tablesRs=this.conn.getMetaData().getTables(this.conn.getCatalog(),null,"%ViewMetaData",new String[]{"TABLE","VIEW"});          assertTrue(tablesRs.next());          assertTrue("testViewMetaData".equalsIgnoreCase(tablesRs.getString(3)));          assertTrue(tablesRs.next());          assertTrue("vTestViewMetaData".equalsIgnoreCase(tablesRs.getString(3)));        }  finally {          if (tablesRs != null) {            tablesRs.close();          }        }        try {          tablesRs=this.conn.getMetaData().getTables(this.conn.getCatalog(),null,"%ViewMetaData",new String[]{"TABLE"});          assertTrue(tablesRs.next());          assertTrue("testViewMetaData".equalsIgnoreCase(tablesRs.getString(3)));          assertTrue(!tablesRs.next());        }  finally {          if (tablesRs != null) {            tablesRs.close();          }        }        break;      }    }  }  finally {    if (this.rs != null) {      this.rs.close();    }    this.stmt.executeUpdate("DROP VIEW IF EXISTS vTestViewMetaData");  }}  }
class C{  public String generateExportChangePolicyAndLimits(Workflow workflow,String wfGroupId,String waitFor,URI storageURI,URI exportMaskURI,URI exportGroupURI,List<URI> volumeURIs,URI newVpoolURI,URI oldVpoolURI) throws ControllerException {  DiscoveredSystemObject storageSystem=getStorageSystem(_dbClient,storageURI);  Workflow.Method method=ExportWorkflowEntryPoints.exportChangePolicyAndLimitsMethod(storageURI,exportMaskURI,exportGroupURI,volumeURIs,newVpoolURI,false);  Workflow.Method rollback=ExportWorkflowEntryPoints.exportChangePolicyAndLimitsMethod(storageURI,exportMaskURI,exportGroupURI,volumeURIs,oldVpoolURI,true);  return newWorkflowStep(workflow,wfGroupId,String.format("Updating Auto-tiering Policy on storage array %s (%s, args) for volumes %s",storageSystem.getNativeGuid(),storageURI,Joiner.on("\t").join(volumeURIs)),storageSystem,method,rollback,waitFor);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  int size=s.readInt();  for (int i=0; i < size; i++) {    Object key=s.readObject();    Object value=s.readObject();    put(key,value);  }}  }
class C{  protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (processID == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No ID has been defined. It should be a runner or builder ID");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  if (processID.startsWith("r")) {    displayRunnerLog();  } else   if (processID.startsWith("b")) {    displayBuilderLog();  } else {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("Invalid identifier");    buffer.fg(Ansi.Color.DEFAULT);    System.out.println(buffer.toString());  }  return null;}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  private void verifyModifyExportRule(List<ExportRule> listExportRule) throws Exception {  if (listExportRule == null) {    return;  }  _log.info("{} Export Rule(s) Requested to Modify {} - Iterating ..",listExportRule.size());  for (  ExportRule exportRule : listExportRule) {    exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);    _log.info("Verifying Export Rule {}",exportRule.toString());    scanForDuplicateSecFlavor(exportRule);    if (!exportRule.isToProceed()) {      _log.info("Same Security Flavor found across the exports {}",exportRule.toString());      break;    }    FileExportRule rule=validateHosts(exportRule);    if (rule != null) {      verifyExportAnon(exportRule);    } else {      if (exportRule.isToProceed()) {        _log.info("Export not found to modify");        exportRule.setIsToProceed(false,ExportOperationErrorType.EXPORT_NOT_FOUND);      }    }  }}  }
class C{  private final int _shortUTF8Encode2(char[] str,int i,int end,int outputPtr){  final byte[] outBuf=_outputBuffer;  while (i < end) {    int c=str[i++];    if (c <= 0x7F) {      outBuf[outputPtr++]=(byte)c;      continue;    }    if (c < 0x800) {      outBuf[outputPtr++]=(byte)(0xc0 | (c >> 6));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c < SURR1_FIRST || c > SURR2_LAST) {      outBuf[outputPtr++]=(byte)(0xe0 | (c >> 12));      outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c > SURR1_LAST) {      _throwIllegalSurrogate(c);    }    if (i >= end) {      _throwIllegalSurrogate(c);    }    c=_convertSurrogate(c,str[i++]);    if (c > 0x10FFFF) {      _throwIllegalSurrogate(c);    }    outBuf[outputPtr++]=(byte)(0xf0 | (c >> 18));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 12) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));  }  int codedLen=outputPtr - _outputTail;  _outputTail=outputPtr;  return codedLen;}  }
class C{  public static BigInteger createRandomInRange(BigInteger min,BigInteger max,SecureRandom random){  int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0) {      throw new IllegalArgumentException("'min' may not be greater than 'max'");    }    return min;  }  if (min.bitLength() > max.bitLength() / 2) {    return createRandomInRange(ZERO,max.subtract(min),random).add(min);  }  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0) {      return x;    }  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  public boolean equals(ShapeGraphicAttribute rhs){  if (rhs == null) {    return false;  }  if (this == rhs) {    return true;  }  if (fStroke != rhs.fStroke) {    return false;  }  if (getAlignment() != rhs.getAlignment()) {    return false;  }  if (!fShape.equals(rhs.fShape)) {    return false;  }  return true;}  }
class C{  private List<Sensor> readSensors() throws Exception {  final List<Sensor> sensors=new ArrayList<>();synchronized (LOCK) {    final Map<String,String> previousMap=new HashMap<String,String>(SERIAL_NAME_MAP);    SERIAL_NAME_MAP.clear();    for (    final File file : new File(SENSORS_MASTER_DIRECTORY).listFiles()) {      if (!file.isDirectory()) {        continue;      }      final String filename=file.getName();      if ("subsystem".equals(filename)) {        continue;      }      if ("driver".equals(filename)) {        continue;      }      if ("power".equals(filename)) {        continue;      }      final String serialId=filename;      SERIAL_NAME_MAP.put(serialId,previousMap.containsKey(serialId) ? previousMap.get(serialId) : "");      final float tempC=readTempC(SENSORS_MASTER_DIRECTORY + serialId + File.separatorChar+ "w1_slave");      final float tempF=((tempC * (9 / 5.0f)) + 32);      final Sensor sensor=new Sensor();      sensor.setTempC(Float.valueOf(FORMAT.format(tempC)));      sensor.setTempF(Float.valueOf(FORMAT.format(tempF)));      sensor.setSerialId(serialId);      sensor.setName(SERIAL_NAME_MAP.get(serialId));      sensors.add(sensor);    }  }  return sensors;}  }
class C{  void locoSelected(String id){  if (id != null) {    log.debug("locoSelected ID " + id);    if (re != null) {      re.removePropertyChangeListener(rosterEntryUpdateListener);    }    re=Roster.getDefault().entryFromTitle(id);    re.addPropertyChangeListener(rosterEntryUpdateListener);  } else {    log.debug("Multiple selection");    re=null;  }  updateDetails();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void registerReceiver(){  IntentFilter intentFilter=new IntentFilter(UploadVideoService.ACTION_UPLOAD_SERVICE_RESPONSE);  intentFilter.addCategory(Intent.CATEGORY_DEFAULT);  LocalBroadcastManager.getInstance(this).registerReceiver(mUploadResultReceiver,intentFilter);}  }
class C{  @Override public void writeHeader() throws IOException {  os=new PDFWriter(new BufferedOutputStream(ros),PDF_VERSION);  delayImageQueue=new PDFImageDelayQueue(os);  delayPaintQueue=new PDFPaintDelayQueue(os,delayImageQueue);  fontTable=new PDFFontTable(os);  PDFDocInfo info=os.openDocInfo("DocInfo");  info.setTitle(getProperty(TITLE));  info.setAuthor(getProperty(AUTHOR));  info.setSubject(getProperty(SUBJECT));  info.setKeywords(getProperty(KEYWORDS));  info.setCreator(getCreator());  info.setProducer(producer == null ? "" : producer);  if (!isDeviceIndependent()) {    Calendar now=Calendar.getInstance();    info.setCreationDate(now);    info.setModificationDate(now);  }  info.setTrapped("False");  os.close(info);  PDFCatalog catalog=os.openCatalog("Catalog","RootPage");  catalog.setOutlines("Outlines");  catalog.setPageMode("UseOutlines");  catalog.setViewerPreferences("Preferences");  catalog.setOpenAction(new Object[]{os.ref("Page1"),os.name("Fit")});  os.close(catalog);  PDFViewerPreferences prefs=os.openViewerPreferences("Preferences");  prefs.setFitWindow(true);  prefs.setCenterWindow(false);  os.close(prefs);  alphaIndex=1;  extGStates=new HashMap<Float,String>();  if (!isMultiPage()) {    openPage(getSize(),null);  }}  }
class C{  public ArrayList(){  this(10);}  }
class C{  void loadDemo(String classname){  setStatus(getString("Status.loading") + getString(classname + ".name"));  DemoModule demo=null;  try {    Class demoClass=Class.forName(classname);    Constructor demoConstructor=demoClass.getConstructor(new Class[]{SwingSet2.class});    demo=(DemoModule)demoConstructor.newInstance(new Object[]{this});    addDemo(demo);  } catch (  Exception e) {    System.out.println("Error occurred loading demo: " + classname);  }}  }
class C{  @SuppressWarnings("unchecked") public static byte[] createAndWriteBeanClass(String fqcn,List<TupleSchemaRegistry.SQLFieldInfo> fieldList,FSDataOutputStream outputStream) throws JSONException, IOException {  ClassNode classNode=new ClassNode();  classNode.version=Opcodes.V1_7;  classNode.access=Opcodes.ACC_PUBLIC;  classNode.name=fqcn.replace('.','/');  classNode.superName="java/lang/Object";  addDefaultConstructor(classNode);  for (  TupleSchemaRegistry.SQLFieldInfo fieldInfo : fieldList) {    String fieldName=fieldInfo.getColumnName();    String fieldType=fieldInfo.getType().getJavaType().getName();    String fieldJavaType=getJavaType(fieldType);    addPrivateField(classNode,fieldName,fieldJavaType);    String fieldNameForMethods=Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);    if (fieldJavaType.equals(getJavaType("java.util.Date"))) {      addDateFields(classNode,fieldName,fieldNameForMethods,"java/util/Date");    } else {      addGetter(classNode,fieldName,fieldNameForMethods,fieldJavaType);      addSetter(classNode,fieldName,fieldNameForMethods,fieldJavaType);    }  }  addToStringMethod(classNode,fieldList);  addHashCodeMethod(classNode,fieldList);  addEqualsMethod(classNode,fieldList);  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);  classNode.accept(cw);  cw.visitEnd();  byte[] classBytes=cw.toByteArray();  if (outputStream != null) {    outputStream.write(classBytes);    outputStream.close();  }  return classBytes;}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e) || (!getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)))   return;  if (!scrollbar.isEnabled())   return;  if (!scrollbar.hasFocus() && scrollbar.isRequestFocusEnabled()) {    scrollbar.requestFocus();  }  useCachedValue=true;  scrollbar.setValueIsAdjusting(true);  currentMouseX=e.getX();  currentMouseY=e.getY();  if (getThumbBounds().contains(currentMouseX,currentMouseY)) {switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:      offset=currentMouseY - getThumbBounds().y;    break;case JScrollBar.HORIZONTAL:  offset=currentMouseX - getThumbBounds().x;break;}isDragging=true;return;} else if (getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)) {switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:offset=getThumbBounds().height / 2;break;case JScrollBar.HORIZONTAL:offset=getThumbBounds().width / 2;break;}isDragging=true;setValueFrom(e);return;}isDragging=false;Dimension sbSize=scrollbar.getSize();direction=+1;switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:if (getThumbBounds().isEmpty()) {int scrollbarCenter=sbSize.height / 2;direction=(currentMouseY < scrollbarCenter) ? -1 : +1;} else {int thumbY=getThumbBounds().y;direction=(currentMouseY < thumbY) ? -1 : +1;}break;case JScrollBar.HORIZONTAL:if (getThumbBounds().isEmpty()) {int scrollbarCenter=sbSize.width / 2;direction=(currentMouseX < scrollbarCenter) ? -1 : +1;} else {int thumbX=getThumbBounds().x;direction=(currentMouseX < thumbX) ? -1 : +1;}if (!scrollbar.getComponentOrientation().isLeftToRight()) {direction=-direction;}break;}scrollByBlock(direction);scrollTimer.stop();scrollListener.setDirection(direction);scrollListener.setScrollByBlock(true);startScrollTimerIfNecessary();}  }
class C{  public boolean isFatalEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  protected void deleteDirectory(File webAppFile){  if (webAppFile.isDirectory()) {    File[] children=webAppFile.listFiles();    for (    File element : children) {      deleteDirectory(element);    }    webAppFile.delete();  } else {    webAppFile.delete();  }}  }
class C{  public final ByteBuffer putInt(int baseOffset,int value){  if (order == ByteOrder.BIG_ENDIAN) {    for (int i=3; i >= 0; i--) {      byteArray.set(baseOffset + i,(byte)(value & 0xFF));      value=value >> 8;    }  } else {    for (int i=0; i <= 3; i++) {      byteArray.set(baseOffset + i,(byte)(value & 0xFF));      value=value >> 8;    }  }  return this;}  }
class C{  public static DAOGroup newInstance(String displayName){  final DAOGroup returnInstance=new DAOGroup();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public static String makeFilePath(String rootDirectory,ArrayList<String> subDirectories){  File file=new File(rootDirectory);  for (  String subDirectory : subDirectories) {    file=new File(file,subDirectory);  }  return file.toString();}  }
class C{  public InetNetwork(InetAddress inetAddress,int subnetBits){  _inetAddress=inetAddress;  _address=inetAddress.getAddress();  if (subnetBits < 0)   subnetBits=8 * _address.length;  _subnetBits=subnetBits;  _subnetByte=subnetBits / 8;  _subnetMask=~((1 << (8 - subnetBits % 8)) - 1) & 0xff;}  }
class C{  public static boolean isSalesRep(int AD_User_ID){  if (AD_User_ID == 0)   return false;  String sql="SELECT MAX(AD_User_ID) FROM AD_User u" + " INNER JOIN C_BPartner bp ON (u.C_BPartner_ID=bp.C_BPartner_ID) " + "WHERE bp.IsSalesRep='Y' AND AD_User_ID=?";  int no=DB.getSQLValue(null,sql,AD_User_ID);  return no == AD_User_ID;}  }
class C{  public static void fill(int[] matrix,int value,int offset,int length){  for (int r=offset; r < offset + length; r++) {    matrix[r]=value;  }}  }
class C{  private AccessGrant createAccessGrant(Map<String,String> params){  AccessGrant accessGrant=new AccessGrant();  if (params.get("access_token") != null) {    String accessToken=params.get("access_token");    Integer expires=null;    if (params.get("expires") != null) {      expires=Integer.valueOf(params.get("expires"));    }    accessGrant.setKey(accessToken);    accessGrant.setAttribute("expires",expires);  }  accessGrant.setProviderId(mProviderName.toString());  return accessGrant;}  }
class C{  private Set<String> findResourceNames(String path,String prefix,String suffix) throws IOException {  Set<String> resourceNames=findResourceNamesFromFileSystem(path,new File(path));  return filterResourceNames(resourceNames,prefix,suffix);}  }
class C{  protected void actualizarFechasExtremas(){  if (fechaInicial == null || fechaFinal == null) {    fechaInicial=getSerie().getFextremainicial();    fechaFinal=getSerie().getFextremafinal();  }  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  if (fechaInicial != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_INICIAL,1,fechaInicial,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_INICIAL);  if (fechaFinal != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_FINAL,1,fechaFinal,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_FINAL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.011 -0500",hash_original_method="948CDA9103045E9BE6D88842B3422809",hash_generated_method="459765111653B911E4242E3A8D73653D") public static void frustumM(float[] m,int offset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (top == bottom) {    throw new IllegalArgumentException("top == bottom");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  if (near <= 0.0f) {    throw new IllegalArgumentException("near <= 0.0f");  }  if (far <= 0.0f) {    throw new IllegalArgumentException("far <= 0.0f");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (near - far);  final float x=2.0f * (near * r_width);  final float y=2.0f * (near * r_height);  final float A=2.0f * ((right + left) * r_width);  final float B=(top + bottom) * r_height;  final float C=(far + near) * r_depth;  final float D=2.0f * (far * near * r_depth);  m[offset + 0]=x;  m[offset + 5]=y;  m[offset + 8]=A;  m[offset + 9]=B;  m[offset + 10]=C;  m[offset + 14]=D;  m[offset + 11]=-1.0f;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 15]=0.0f;}  }
class C{  public AbstractListAssert<?,? extends List<? extends T>,T> listOfValuesEmitted(){  isNotNull();  return assertThat(getBlockingObservableExecutor().getValuesEmitted());}  }
class C{  @Override public void clearSession(long id){  restoreAllSessionsIfNecessary();  if (activeSessionRef.get() != null && activeSessionRef.get().getId() == id) {synchronized (this) {      activeSessionRef.set(null);      activeSessionStorage.clear();    }  }  sessionMap.remove(id);  final PreferenceStoreStrategy<T> storage=storageMap.remove(id);  if (storage != null) {    storage.clear();  }}  }
class C{  public void moveTo(int i) throws BasicException {  saveData();  if (m_iIndex != i) {    baseMoveTo(i);  }}  }
class C{  public CNodeNode(final NaviNode node){  super(CNodesDisplayString.getDisplayString(node));  m_node=node;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  ClassDefinition def=null;  Expression alreadyChecked=null;  try {    if (outerArg != null) {      vset=outerArg.checkValue(env,ctx,vset,exp);      alreadyChecked=outerArg;      Identifier typeName=FieldExpression.toIdentifier(right);      if (typeName != null && typeName.isQualified()) {        env.error(where,"unqualified.name.required",typeName);      }      if (typeName == null || !outerArg.type.isType(TC_CLASS)) {        if (!outerArg.type.isType(TC_ERROR)) {          env.error(where,"invalid.field.reference",idNew,outerArg.type);        }        outerArg=null;      } else {        ClassDefinition oc=env.getClassDefinition(outerArg.type);        Identifier nm=oc.resolveInnerClass(env,typeName);        right=new TypeExpression(right.where,Type.tClass(nm));        env.resolve(right.where,ctx.field.getClassDefinition(),right.type);      }    }    if (!(right instanceof TypeExpression)) {      right=new TypeExpression(right.where,right.toType(env,ctx));    }    if (right.type.isType(TC_CLASS))     def=env.getClassDefinition(right.type);  } catch (  AmbiguousClass ee) {    env.error(where,"ambig.class",ee.name1,ee.name2);  }catch (  ClassNotFound ee) {    env.error(where,"class.not.found",ee.name,ctx.field);  }  Type t=right.type;  boolean hasErrors=t.isType(TC_ERROR);  if (!t.isType(TC_CLASS)) {    if (!hasErrors) {      env.error(where,"invalid.arg.type",t,opNames[op]);      hasErrors=true;    }  }  if (def == null) {    type=Type.tError;    return vset;  }  Expression args[]=this.args;  args=NewInstanceExpression.insertOuterLink(env,ctx,where,def,outerArg,args);  if (args.length > this.args.length)   outerArg=args[0]; else   if (outerArg != null)   outerArg=new CommaExpression(outerArg.where,outerArg,null);  Type argTypes[]=new Type[args.length];  for (int i=0; i < args.length; i++) {    if (args[i] != alreadyChecked) {      vset=args[i].checkValue(env,ctx,vset,exp);    }    argTypes[i]=args[i].type;    hasErrors=hasErrors || argTypes[i].isType(TC_ERROR);  }  try {    if (hasErrors) {      type=Type.tError;      return vset;    }    ClassDefinition sourceClass=ctx.field.getClassDefinition();    ClassDeclaration c=env.getClassDeclaration(t);    if (body != null) {      Identifier packageName=sourceClass.getName().getQualifier();      ClassDefinition superDef=null;      if (def.isInterface()) {        superDef=env.getClassDefinition(idJavaLangObject);      } else {        superDef=def;      }      MemberDefinition constructor=superDef.matchAnonConstructor(env,packageName,argTypes);      if (constructor != null) {        if (tracing)         env.dtEvent("NewInstanceExpression.checkValue: ANON CLASS " + body + " SUPER "+ def);        vset=body.checkLocalClass(env,ctx,vset,def,args,constructor.getType().getArgumentTypes());        t=body.getClassDeclaration().getType();        def=body;      }    } else {      if (def.isInterface()) {        env.error(where,"new.intf",c);        return vset;      }      if (def.mustBeAbstract(env)) {        env.error(where,"new.abstract",c);        return vset;      }    }    field=def.matchMethod(env,sourceClass,idInit,argTypes);    if (field == null) {      MemberDefinition anyInit=def.findAnyMethod(env,idInit);      if (anyInit != null && new MethodExpression(where,right,anyInit,args).diagnoseMismatch(env,args,argTypes))       return vset;      String sig=c.getName().getName().toString();      sig=Type.tMethod(Type.tError,argTypes).typeString(sig,false,false);      env.error(where,"unmatched.constr",sig,c);      return vset;    }    if (field.isPrivate()) {      ClassDefinition cdef=field.getClassDefinition();      if (cdef != sourceClass) {        implMethod=cdef.getAccessMember(env,ctx,field,false);      }    }    if (def.mustBeAbstract(env)) {      env.error(where,"new.abstract",c);      return vset;    }    if (field.reportDeprecated(env)) {      env.error(where,"warn.constr.is.deprecated",field,field.getClassDefinition());    }    if (field.isProtected() && !(sourceClass.getName().getQualifier().equals(field.getClassDeclaration().getName().getQualifier()))) {      env.error(where,"invalid.protected.constructor.use",sourceClass);    }  } catch (  ClassNotFound ee) {    env.error(where,"class.not.found",ee.name,opNames[op]);    return vset;  }catch (  AmbiguousMember ee) {    env.error(where,"ambig.constr",ee.field1,ee.field2);    return vset;  }  argTypes=field.getType().getArgumentTypes();  for (int i=0; i < args.length; i++) {    args[i]=convert(env,ctx,argTypes[i],args[i]);  }  if (args.length > this.args.length) {    outerArg=args[0];    for (int i=1; i < args.length; i++) {      this.args[i - 1]=args[i];    }  }  ClassDeclaration exceptions[]=field.getExceptions(env);  for (int i=0; i < exceptions.length; i++) {    if (exp.get(exceptions[i]) == null) {      exp.put(exceptions[i],this);    }  }  type=t;  return vset;}  }
class C{  public <T extends Node>T addLabeled(String text,T ctrl){  return addLabeled(text,ctrl,1);}  }
class C{  public T caseTraceDuring_(TraceDuring_ object){  return null;}  }
class C{  public void addPoint(PolygonPoint p){  p.setPrevious(_last);  p.setNext(_last.getNext());  _last.setNext(p);  _points.add(p);}  }
class C{  public static LexerFrame groovyScriptFactory(String scriptText){  return new LexerFrame(GroovyLexer.class,GroovyTokenTypes.class,new StringReader(scriptText));}  }
class C{  public static Intent createIntent(Context context,String apiKey,String[] scopes,String redirectUri){  Intent intent=new Intent(context,AuthorizeActivity.class);  Bundle extras=new Bundle();  extras.putString(AuthorizeActivity.EXTRA_API_KEY,apiKey);  extras.putStringArray(AuthorizeActivity.EXTRA_SCOPES,scopes);  extras.putString(AuthorizeActivity.EXTRA_REDIRECT_URI,redirectUri);  intent.putExtras(extras);  return intent;}  }
class C{  public double percentAttributesUsed(){  boolean[] attributes=new boolean[m_numericDataHeader.numAttributes()];  double[][] coefficients=getCoefficients();  for (int j=0; j < m_numClasses; j++) {    for (int i=1; i < m_numericDataHeader.numAttributes() + 1; i++) {      if (!Utils.eq(coefficients[j][i],0)) {        attributes[i - 1]=true;      }    }  }  double count=0;  for (  boolean attribute : attributes) {    if (attribute) {      count++;    }  }  return count / (m_numericDataHeader.numAttributes() - 1) * 100.0;}  }
class C{  public MCity(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public ImmutableMap<String,QueryParser> queryParsers(){  return queryParsers;}  }
class C{  @Override public final String sourceExpression(int index,Instances data){  StringBuffer expr=null;  if (index < 0) {    return "i[" + m_attIndex + "] == null";  }  if (data.attribute(m_attIndex).isNominal()) {    if (index == 0) {      expr=new StringBuffer("i[");    } else {      expr=new StringBuffer("!i[");    }    expr.append(m_attIndex).append("]");    expr.append(".equals(\"").append(data.attribute(m_attIndex).value((int)m_splitPoint)).append("\")");  } else {    expr=new StringBuffer("((Double) i[");    expr.append(m_attIndex).append("])");    if (index == 0) {      expr.append(".doubleValue() <= ").append(m_splitPoint);    } else {      expr.append(".doubleValue() > ").append(m_splitPoint);    }  }  return expr.toString();}  }
class C{  public void flush(){  lock.readLock().lock();  try {    map.clear();  }  finally {    lock.readLock().unlock();  }}  }
class C{  public XMLDecoder(){  super();  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setValidating(false);  try {    docBuilder=dbf.newDocumentBuilder();    docBuilder.setErrorHandler(new SAXErrorHandler());    docBuilder.setEntityResolver(new Log4jEntityResolver());  } catch (  ParserConfigurationException pce) {    System.err.println("Unable to get document builder");  }}  }
class C{  boolean isSerializable(){  for (  Type target : tree.targets) {    if (types.asSuper(target,syms.serializableType.tsym) != null) {      return true;    }  }  return false;}  }
class C{  public static BinaryWriteReplacer writeReplacer(Class cls){  return cls != null ? CLS_TO_WRITE_REPLACER.get(cls) : null;}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public static byte[] toUTF8(String s){  try {    return s.getBytes(ENCODING_UTF8);  } catch (  UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  public static <T>Source<T> interleave(Source<T> lhs,Source<T> rhs){  return choose(null,null,null,lhs,rhs);}  }
class C{  public void storeFile(RosterEntry re){  re.ensureFilenameExists();  re.writeFile(cvModel,iCvModel,variableModel);}  }
class C{  protected void showAboutPanel(){  try {    BufferedImage original=ImageIO.read(new File(GUIFrame.ICON_PATH));    JLabel label=new JLabel();    Font font=label.getFont();    StringBuffer style=new StringBuffer("font-family:" + font.getFamily() + ";");    style.append("font-weight:" + (font.isBold() ? "bold" : "normal") + ";");    style.append("font-size:" + font.getSize() + "pt;");    JEditorPane ep=new JEditorPane("text/html","<html><body style=\"" + style + "\"><b>OpenDial dialogue toolkit, version 1.4</b><br>"+ "Copyright (C) 2011-2015 by Pierre Lison<br>University of Oslo, Norway<br><br>"+ "OpenDial is distributed as free software under<br>"+ "the <a href=\"http://opensource.org/licenses/MIT\">MIT free software license</a>.<br><br>"+ "<i>Project website</i>: <a href=\"http://opendial-toolkit.net\">"+ "http://opendial-toolkit.net</a><br>"+ "<i>Contact</i>: Pierre Lison (email: <a href=\"mailto:plison@ifi.uio.no\">"+ "plison@ifi.uio.no</a>)<br><br>"+ "<b>Local address:</b>: <i>"+ frame.getSystem().getLocalAddress()+ "</i>"+ "</body></html>");    ep.addHyperlinkListener(null);    ep.setEditable(false);    ep.setBackground(label.getBackground());    JOptionPane.showMessageDialog(frame.getFrame(),ep,"About OpenDial",JOptionPane.INFORMATION_MESSAGE,new ImageIcon(original));  } catch (  Exception f) {    log.warning("could not show about box: " + f);  }}  }
class C{  public int numthreads(){  return numthreads;}  }
class C{  public String toString(){  return (next == null) ? "<" + tag.getElement().getName() + ">" : next + " <" + tag.getElement().getName()+ ">";}  }
class C{  public static int rollTwoDice(){  int dice1=rollDice();  int dice2=rollDice();  int sum=dice1 + dice2;  System.out.println("You rolled " + dice1 + " + "+ dice2+ " = "+ sum);  return sum;}  }
class C{  public void addPage(Integer pageNumber,PDFPage page){  addPageRecord(pageNumber,page,null);}  }
class C{  private static TimeSynchronizationSample createTimeSynchronizationSampleWithKeyPair(final KeyPair keyPair,final long timeOffset){  return new TimeSynchronizationSample(new Node(new NodeIdentity(keyPair,"node"),new NodeEndpoint("http","10.10.10.12",13),null),new CommunicationTimeStamps(new NetworkTimeStamp(0),new NetworkTimeStamp(10)),new CommunicationTimeStamps(new NetworkTimeStamp(5 + timeOffset),new NetworkTimeStamp(5 + timeOffset)));}  }
class C{  private static void SetIntArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetIntArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    int[] destinationArray=(int[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_INT),bufAddress,length << LOG_BYTES_IN_INT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static long max(long a,final long b,final long c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  protected static int readInt(final byte[] data,final int offset){  return (data[offset] & 0xff) | ((data[offset + 1] & 0xff) << 8) | ((data[offset + 2] & 0xff) << 16)| (data[offset + 3] << 24);}  }
class C{  public static SelectionJavaElementResolver from(ISelection selection){  Collection<?> adaptables=selection instanceof IStructuredSelection ? ((StructuredSelection)selection).toList() : Collections.emptyList();  return new SelectionJavaElementResolver(adaptables);}  }
class C{  public void addPoint(Vector3 point1,Vector3 point2){  mPoint1=point1;  mPoint2=point2;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EVENT_DEFINITION;}  }
class C{  public FastStringBuffer fsb(){  return ((FastStringBuffer)m_obj);}  }
class C{  public void removeFromErrorList(DownloadInfoRunnable downloadInfoRunnable){  mErrorList.remove(downloadInfoRunnable);}  }
class C{  private void defineXstreamMappingV2(PasswordConverter passwordConverter){  xstreamV2.omitField(Registration.class,"associatedOrganisations");  xstreamV2.alias("organisation",Organisation.class);  xstreamV2.alias("registry",Registration.class);  xstreamV2.registerConverter(passwordConverter);}  }
class C{  protected InterfaceBody_Impl(){  super();}  }
class C{  public void testHaveDrawOffer(){  Game game=new Game(null,new TimeControlData());  assertEquals(false,game.haveDrawOffer());  boolean res=game.processString("e4");  assertEquals(true,res);  assertEquals(false,game.haveDrawOffer());  res=game.processString("draw offer e5");  assertEquals(true,res);  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.BPAWN,game.currPos().getPiece(Position.getSquare(4,4)));  res=game.processString("draw offer Nf3");  assertEquals(true,res);  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.WKNIGHT,game.currPos().getPiece(Position.getSquare(5,2)));  res=game.processString("Nc6");  assertEquals(true,res);  assertEquals(false,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.BKNIGHT,game.currPos().getPiece(Position.getSquare(2,5)));  res=game.processString("draw offer Bb5");  assertEquals(true,res);  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.WBISHOP,game.currPos().getPiece(Position.getSquare(1,4)));  res=game.processString("draw accept");  assertEquals(true,res);  assertEquals(Game.GameState.DRAW_AGREE,game.getGameState());  game.undoMove();  assertEquals(Piece.WBISHOP,game.currPos().getPiece(TextIO.getSquare("b5")));  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.undoMove();  assertEquals(Piece.EMPTY,game.currPos().getPiece(Position.getSquare(1,4)));  assertEquals(false,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.undoMove();  assertEquals(Piece.EMPTY,game.currPos().getPiece(Position.getSquare(2,5)));  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.redoMove();  assertEquals(Piece.BKNIGHT,game.currPos().getPiece(Position.getSquare(2,5)));  assertEquals(false,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.redoMove();  assertEquals(Piece.WBISHOP,game.currPos().getPiece(Position.getSquare(1,4)));  assertEquals(true,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.redoMove();  assertEquals(Game.GameState.DRAW_AGREE,game.getGameState());  game.newGame();  assertEquals(false,game.haveDrawOffer());  assertEquals(Game.GameState.ALIVE,game.getGameState());  res=game.processString("draw offer e5");  assertEquals(true,res);  assertEquals(TextIO.startPosFEN,TextIO.toFEN(game.currPos()));  res=game.processString("e4");  assertEquals(true,res);  assertEquals(true,game.haveDrawOffer());  assertEquals(Piece.WPAWN,game.currPos().getPiece(Position.getSquare(4,3)));  game.newGame();  game.processString("e4");  game.processString("draw offer e4");  assertEquals(true,game.pendingDrawOffer);  game.undoMove();  game.redoMove();  game.processString("e5");  assertEquals(true,game.currPos().whiteMove);  assertEquals(false,game.haveDrawOffer());}  }
class C{  public int rangeBitwiseAnd(int m,int n){  if (m == 0)   return 0;  int moveFactor=1;  while (m != n) {    m>>=1;    n>>=1;    moveFactor<<=1;  }  return m * moveFactor;}  }
class C{  public void addTableDefinitions(Collection<TableDefinition> tableDefs){  this.tableDefinitions.addAll(tableDefs);}  }
class C{  public TFloatArrayList inverseGrep(TFloatProcedure condition){  TFloatArrayList list=new TFloatArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public static ChunkDecrypter create(){  return new ChunkDecrypter(new CFBBlockCipher(new AESEngine(),128),new SHA256Digest());}  }
class C{  void verify(){  byte[] d=digest.digest();  if (!MessageDigest.isEqual(d,Base64.decode(hash))) {    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);  }  verifiedEntries.put(name,certificates);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  protected void validarDescriptoresExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ListaDescriptoraForm frm=((ListaDescriptoraForm)form);  if (StringUtils.isNotEmpty(frm.getIds())) {    getGestionDescripcionBI(request).validarDescriptores(frm.getIds());  }  filtrarCodeLogic(mapping,form,request,response);}  }
class C{  public Tuple makeWith(Object... values){  return make(values);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:28.320 -0500",hash_original_method="9D6573E0227A73E2122897AF91440AD0",hash_generated_method="F511E4B7EE637E5BAD99C2CE0F97AB45") @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public GeneralPathTip(Path2D.Double path,double decorationRadius){  this(path,decorationRadius,false,true,false);}  }
class C{  public Collection<EventBean> snapshot(FilterSpecCompiled filter,Annotation[] annotations){  if (tailView.getRevisionProcessor() != null) {    return tailView.getRevisionProcessor().getSnapshot(agentInstanceContext.getEpStatementAgentInstanceHandle(),parent);  }  agentInstanceContext.getEpStatementAgentInstanceHandle().getStatementAgentInstanceLock().acquireReadLock();  try {    return snapshotNoLock(filter,annotations);  }  finally {    releaseTableLocks(agentInstanceContext);    agentInstanceContext.getEpStatementAgentInstanceHandle().getStatementAgentInstanceLock().releaseReadLock();  }}  }
class C{  @Override public void onResume(){  mWebView.onResume();  super.onResume();}  }
class C{  public void testExtractHeaderComponent() throws Exception {  String header="WWW-Authenticate: Digest realm=\"testrealm@host.com\",\n" + "                        qop=\"auth,auth-int\",\n" + "                        nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\",\n"+ "                        opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"";  assertEquals("testrealm@host.com",TomcatManager.extractHeaderComponent(header,"realm"));  assertEquals("auth,auth-int",TomcatManager.extractHeaderComponent(header,"qop"));  assertEquals("dcd98b7102dd2f0e8b11d0f600bfb0c093",TomcatManager.extractHeaderComponent(header,"nonce"));  assertEquals("5ccc069c403ebaf9f0171e9517f40e41",TomcatManager.extractHeaderComponent(header,"opaque"));  assertNull(TomcatManager.extractHeaderComponent(header,"nothing"));}  }
class C{  public void addDomain(String domain){  if (namelist.isEmpty()) {    namebuilder.addRDN(BCStyle.CN,domain);  }  namelist.add(domain);}  }
class C{  public void generate(PrintWriter out) throws IOException {  boolean first=true;  for (  final Pair<Generator,Integer> pair : myGenerators) {    if (first) {      if (hasLeadingNewline) {        crlf(out);      }      first=false;    } else {      crlf(out);    }    final int emptyLinesCount=pair.getSecond().intValue();    for (int idx=0; idx < emptyLinesCount; idx++) {      crlf(out);    }    pair.getFirst().generate(out);  }}  }
class C{  public static void fill(int[] a,int fromIndex,int toIndex,int val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ConnectionSpy(Connection realConnection,RdbmsSpecifics rdbmsSpecifics){  if (rdbmsSpecifics == null) {    rdbmsSpecifics=DriverSpy.defaultRdbmsSpecifics;  }  setRdbmsSpecifics(rdbmsSpecifics);  if (realConnection == null) {    throw new IllegalArgumentException("Must pass in a non null real Connection");  }  this.realConnection=realConnection;  log=SpyLogFactory.getSpyLogDelegator();synchronized (connectionTracker) {    connectionNumber=new Integer(++lastConnectionNumber);    connectionTracker.put(connectionNumber,this);  }  log.connectionOpened(this);  reportReturn("new Connection");}  }
class C{  V remove(Object key1,Object key2,Object key3,Object key4,int hash,Object value){  lock();  try {    int c=count - 1;    HashEntry[] tab=table;    int index=hash & (tab.length - 1);    HashEntry<K,V> first=(HashEntry<K,V>)tab[index];    HashEntry<K,V> e=first;    while (e != null && (e.hash != hash || key1 != null && !key1.equals(e.key1) || key2 != null && !key2.equals(e.key2) || key3 != null && !key3.equals(e.key3) || key4 != null && !key4.equals(e.key4))) {      e=e.next;    }    V oldValue=null;    if (e != null) {      V v=e.value;      if (value == null || value.equals(v)) {        oldValue=v;        ++modCount;        HashEntry<K,V> newFirst=e.next;        for (HashEntry<K,V> p=first; p != e; p=p.next) {          newFirst=new HashEntry<>(p.key1,p.key2,p.key3,p.key4,p.hash,newFirst,p.value);        }        tab[index]=newFirst;        count=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  private void dropTables(SQLiteDatabase paramSQLiteDatabase){  for (  String table : sTables) {    try {      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table);    } catch (    Exception localException) {      localException.printStackTrace();    }  }}  }
class C{  protected Date compute(double value,String localeString){  if (Double.isNaN(value) || localeString == null) {    return null;  }  Locale locale=new Locale(localeString);  long dateLong=(long)value;  Date date=new Date(dateLong);  Calendar cal=Calendar.getInstance(locale);  cal.setTime(date);  return cal.getTime();}  }
class C{  @SuppressWarnings("rawtypes") public synchronized List findByNativeQuery(String sql,Class type,int max){  try {    Query query=null;    if (type == null) {      query=this.entityManager.createNativeQuery(sql);    } else {      query=this.entityManager.createNativeQuery(sql,type);    }    setHints(query);    query.setMaxResults(max);    return query.getResultList();  } catch (  Exception badQuery) {    this.bot.log(this,badQuery);    return new ArrayList();  }}  }
class C{  public static void formatLine(String format,Object... args){  if (!isDisabled()) {    printLine(String.format(format,args));  }}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] vectorFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  ShapeType shapeType=ShapeType.POINT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    vectorFiles=inputFilesString.split(";");    int numVectorFiles=vectorFiles.length;    long numPointsInFile=0;    for (int j=0; j < numVectorFiles; j++) {      String fileName=vectorFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      long fileLength=file.length();      if (fileLength > Integer.MAX_VALUE) {        showFeedback("File is too large!");      }      buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      FileChannel inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      buf.order(ByteOrder.LITTLE_ENDIAN);      buf.rewind();      minValue=buf.getFloat(0);      maxValue=buf.getFloat(4);      north=Math.max(buf.getDouble(8),buf.getDouble(16));      south=Math.min(buf.getDouble(8),buf.getDouble(16));      east=Math.max(buf.getDouble(24),buf.getDouble(32));      west=Math.min(buf.getDouble(24),buf.getDouble(32));      loc=40;      do {        numVertices=buf.getInt(loc);        featureValue=buf.getFloat(loc + 4);        if (numVertices == 1) {          shapeType=ShapeType.POINT;        } else {          shapeType=ShapeType.POLYLINE;        }        break;      } while (loc < fileLength);      String outputFile=fileName.replace(".vtr",".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType);      DBFField fields[]=new DBFField[2];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("VALUE");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      String DBFName=output.getDatabaseFile();      DBFWriter writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      progress=(int)((j + 1) * 100d / numVectorFiles);      updateProgress("Loop " + (j + 1) + " of "+ numVectorFiles+ ":",progress);      buf.rewind();      loc=40;      if (shapeType == ShapeType.POINT) {        do {          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          x=buf.getFloat(loc + 8) + west;          y=buf.getFloat(loc + 12) + south;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      } else {        ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();        int[] parts={0};        do {          pnts.clear();          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          int startingByte=loc + 8;          for (a=0; a < numVertices; a++) {            x=buf.getFloat(startingByte + a * 8) + west;            y=buf.getFloat(startingByte + a * 8 + 4) + south;            pnts.add(new ShapefilePoint(x,y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      }      output.write();      writer.write();    }    returnData(vectorFiles[0].replace(".vtr",".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public NinePatchBorder(Insets insets,NinePatch np){  this.insets=insets;  this.np=np;}  }
class C{  public ClassDefFormat2(RandomAccessFile raf) throws IOException {  classRangeCount=raf.readUnsignedShort();  classRangeRecords=new RangeRecord[classRangeCount];  for (int i=0; i < classRangeCount; i++) {    classRangeRecords[i]=new RangeRecord(raf);  }}  }
class C{  protected void computeBounds(){  int x1=this.bounds.x;  int y1=this.bounds.y;  int x2=this.bounds.x + this.bounds.width;  int y2=this.bounds.y + this.bounds.height;  int scrollControlSize=this.getScrollArrowSize();  if (AVKey.VERTICAL.equals(this.getOrientation())) {    this.scrollDownControlBounds=new Rectangle(x1,y1,scrollControlSize,scrollControlSize);    this.scrollUpControlBounds=new Rectangle(x1,y2 - scrollControlSize,scrollControlSize,scrollControlSize);    int scrollAreaHeight=this.bounds.height - 2 * scrollControlSize;    int position=(int)(scrollAreaHeight * this.getValueAsPercentage());    int knobEnd=y2 - scrollControlSize - position- this.getKnobSize(scrollAreaHeight);    if (knobEnd < y1 + scrollControlSize)     knobEnd=y1 + scrollControlSize;    this.scrollKnobBounds=new Rectangle(x1,knobEnd - 1,scrollControlSize,this.getKnobSize(scrollAreaHeight) + 1);    this.scrollDownBarBounds=new Rectangle(x1,y1 + scrollControlSize,scrollControlSize,knobEnd - y1 - scrollControlSize);    int knobStart=(int)this.scrollKnobBounds.getMaxY();    this.scrollUpBarBounds=new Rectangle(x1,knobStart,scrollControlSize,this.scrollUpControlBounds.y - knobStart);  } else {    this.scrollUpControlBounds=new Rectangle(x1,y1,scrollControlSize,scrollControlSize);    this.scrollDownControlBounds=new Rectangle(x2 - scrollControlSize,y1,scrollControlSize,scrollControlSize);    int scrollAreaWidth=this.bounds.width - 2 * scrollControlSize;    int position=(int)(scrollAreaWidth * this.getValueAsPercentage());    int knobStart=x1 + scrollControlSize + position;    int knobSize=this.getKnobSize(scrollAreaWidth);    this.scrollKnobBounds=new Rectangle(knobStart,y1,knobSize + 1,scrollControlSize);    if (this.scrollKnobBounds.getMaxX() > x2 - scrollControlSize)     this.scrollKnobBounds.x=x2 - scrollControlSize - knobSize;    this.scrollUpBarBounds=new Rectangle(x1 + scrollControlSize,y1,this.scrollKnobBounds.x - scrollControlSize - x1,scrollControlSize);    int knobEnd=(int)this.scrollKnobBounds.getMaxX();    this.scrollDownBarBounds=new Rectangle(knobEnd,y1,this.scrollDownControlBounds.x - knobEnd,scrollControlSize);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENTITY_SOURCE__MODEL:    return model != null;}return super.eIsSet(featureID);}  }
class C{  XSelection(XAtom atom){  if (atom == null) {    throw new NullPointerException("Null atom");  }  selectionAtom=atom;  table.put(selectionAtom,this);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  @Override public boolean intersects(final Envelope other){  if (!super.intersects(other)) {    return false;  }  return !(getMinZOf(other) > maxz || getMaxZOf(other) < minz);}  }
class C{  public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){  if (removeIndex > 0 && oldSize > 0) {    System.arraycopy(src,0,dst,0,removeIndex);  }  if (removeIndex < oldSize) {    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);  }}  }
class C{  private void emitSerializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  String entryVar="entry" + depth;  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JsonArray ").append(outVar).append(" = new JsonArray();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (").append(childInTypeName).append(" ").append(childInVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(") {\n");  } else   if (isMap(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JsonObject ").append(outVar).append(" = new JsonObject();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (java.util.Map.Entry<String, ").append(childInTypeName).append("> ").append(entryVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(".entrySet()) {\n");    builder.append(i).append("  ").append(childInTypeName).append(" ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");  } else   if (rawClass.isEnum()) {    builder.append(i).append("JsonElement ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(".name());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : ((").append(getImplNameForDto((Class<?>)expandedTypes.get(depth))).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonElementInt(").append(COPY_JSONS_PARAM).append(");\n");  } else   if (rawClass.equals(String.class)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (rawClass == boolean.class || rawClass == int.class || rawClass == long.class || rawClass == double.class || rawClass == float.class || rawClass == short.class || rawClass == byte.class) {    builder.append(i).append("JsonPrimitive ").append(outVar).append(" = new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (rawClass == Boolean.class || rawClass == Integer.class || rawClass == Long.class || rawClass == Double.class || rawClass == Float.class || rawClass == Short.class || rawClass == Byte.class) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : new JsonPrimitive(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (isAny(rawClass)) {    builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null || !(").append(inVar).append(" instanceof JsonElement) ? JsonNull.INSTANCE : (");    appendCopyJsonExpression(inVar,builder).append(");\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      builder.append(i).append("JsonElement ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JsonNull.INSTANCE : ((").append(dtoImplementation.getCanonicalName()).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonElementInt(").append(COPY_JSONS_PARAM).append(");\n");    } else {      throw new IllegalArgumentException("Unable to generate server implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }  if (depth + 1 < expandedTypes.size()) {    emitSerializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "  ");  }  if (isList(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".add(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  }}  }
class C{  public SE8cSignalHead(int pNumber,String userName){  super("LH" + pNumber,userName);  this.lowTurnout=makeHandle(pNumber);  this.highTurnout=makeHandle(pNumber + 1);  systemName="LH" + pNumber;  init();}  }
class C{  @Interruptible public static String addressAsHexString(Address addr){  int len=2 + (BITS_IN_ADDRESS >> 2);  char[] buf=new char[len];  while (--len > 1) {    int digit=addr.toInt() & 0x0F;    buf[len]=digit <= 9 ? (char)('0' + digit) : (char)('a' + digit - 10);    addr=addr.toWord().rshl(4).toAddress();  }  buf[len--]='x';  buf[len]='0';  return new String(buf);}  }
class C{  public void sendHeartbeat() throws IOException {  if (buffering && buffer.size() > 0) {    writeMessage(new ProtocolMessage(buffer));    buffer.clear();  }  writeMessage(new ProtocolHeartbeat());}  }
class C{  public static String uuid(int len,int radix){  if (radix > CHARS.length) {    throw new IllegalArgumentException();  }  char[] uuid=new char[len];  for (int i=0; i < len; i++) {    uuid[i]=CHARS[(int)(Math.random() * radix)];  }  return new String(uuid);}  }
class C{  BayesNetRepresentation copy(){  BayesNetRepresentation b=new BayesNetRepresentation(m_nNodes);  b.m_bits=new boolean[m_bits.length];  for (int i=0; i < m_nNodes * m_nNodes; i++) {    b.m_bits[i]=m_bits[i];  }  b.m_fScore=m_fScore;  return b;}  }
class C{  public Node start(){  ESLogger logger=Loggers.getLogger(Node.class,settings.get("name"));  logger.info("starting ...");  for (  Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {    injector.getInstance(plugin).start();  }  injector.getInstance(SearchService.class).start();  injector.getInstance(MonitorService.class).start();  injector.getInstance(RestController.class).start();  if (settings.getAsBoolean("http.enabled",true)) {    injector.getInstance(HttpServer.class).start();  }  injector.getInstance(ResourceWatcherService.class).start();  injector.getInstance(TribeService.class).start();  logger.debug("Elasticsearch started state={}",clusterService.state().toString());  return this;}  }
class C{  public double convertToPanelY(double yval){  double temp=(yval - m_minY) / (m_maxY - m_minY);  double temp2=temp * (m_YaxisEnd - m_YaxisStart);  temp2=m_YaxisEnd - temp2;  return temp2;}  }
class C{  public EventClient(InetAddress hostAddress,int hostPort,String deviceName) throws IOException {  hasIcon=false;  byte iconType=Packet.ICON_NONE;  byte[] iconData=null;  startClient(hostAddress,hostPort,deviceName,iconType,iconData);}  }
class C{  @Override protected void initData(){}  }
class C{  private void writeMinorStatisticsString(BufferedWriter output,SAZone zone) throws IOException {  output.write(zone.getName());  output.write(delimiter);  output.write(String.valueOf(zone.getMinorActivityCount()));  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write(String.valueOf(zone.getMinorActivityCountDetail(i)));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write(String.valueOf(zone.getMinorActivityDurationDetail(i)));    output.write(delimiter);  }  output.write(String.valueOf(zone.getMinorActivityDurationDetail(23)));  output.newLine();}  }
class C{  private void processRoot(String treePath) throws IOException {  File treeFile=new File(treePath);  if (treeFile.isFile()) {    FileElement fileNode=visitFile(treeFile);    getBuilder().newNode(fileNode);    return;  }  if (treeFile.isDirectory()) {    DirectoryElement parentNode=visitDirectory(treeFile);    traverseTree(parentNode,treeFile);    return;  }  logger.info("Unable to load tree from " + treePath);}  }
class C{  public static QName simpleTypeToQName(short type){switch (type) {case XSSimpleType.PRIMITIVE_BOOLEAN:    return XPathConstants.BOOLEAN;case XSSimpleType.PRIMITIVE_DOUBLE:  return XPathConstants.NUMBER;case XSSimpleType.PRIMITIVE_STRING:return XPathConstants.STRING;case XSSimpleType.PRIMITIVE_DECIMAL:return XPathConstants.NUMBER;case XSSimpleType.PRIMITIVE_FLOAT:return XPathConstants.NUMBER;case XSSimpleType.PRIMITIVE_DATETIME:return XPathConstants.STRING;case XSSimpleType.PRIMITIVE_DATE:return XPathConstants.STRING;case XSSimpleType.PRIMITIVE_TIME:return XPathConstants.STRING;default :throw new EPException("Unexpected schema simple type encountered '" + type + "'");}}  }
class C{  public final int size(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isFirst() throws SQLException {  try {    debugCodeCall("isFirst");    checkClosed();    int row=result.getRowId();    return row == 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void refresh(){  for (  Refreshable refreshable : refreshables) {    refreshable.refresh();  }}  }
class C{  public static <E extends Comparable<E>>void segregateEvenOddNumbers(SingleLinkedList<E> list){  SingleLinkedNode<E> curr=list.head, prev=null, end=curr, separator;  while (end.next != null) {    end=end.next;  }  separator=end;  while (curr != separator) {    if (Integer.parseInt(curr.item.toString()) % 2 != 0) {      end.next=curr;      curr=curr.next;      end=end.next;      end.next=null;      if (curr == list.head) {        list.head=curr;      } else {        prev.next=curr;      }    } else {      prev=curr;      curr=curr.next;    }  }  if (Integer.parseInt(separator.item.toString()) % 2 != 0 && separator.next != null) {    prev.next=curr.next;    while (curr.next != null) {      curr=curr.next;    }    curr.next=separator;    separator.next=null;  }}  }
class C{  public static List<Intersection> intersectTriFan(final Line line,FloatBuffer vertices,IntBuffer indices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null || indices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  int k=indices.get();  float v0x=vertices.get(k * 3);  float v0y=vertices.get(k * 3 + 1);  float v0z=vertices.get(k * 3 + 2);  for (int n=indices.position(); n < indices.limit() - 1; n++) {    Intersection intersection;    int i=indices.get(n) * 3;    int j=indices.get(n + 1) * 3;    intersection=intersect(line,v0x,v0y,v0z,vertices.get(i),vertices.get(i + 1),vertices.get(i + 2),vertices.get(j),vertices.get(j + 1),vertices.get(j + 2));    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  protected void noRecordSelected(){  m_C_BPartner_ID=0;  p_detailTaskPane.setCollapsed(true);  return;}  }
class C{  public static double round(final double value,final int precision){  return new BigDecimal(value).setScale(precision,BigDecimal.ROUND_HALF_UP).doubleValue();}  }
class C{  public boolean isSSLMode(){  return useSsl;}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Entry.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addElement(GeoPt.KEY);  builder.addElement(Rating.KEY);  builder.addElement(When.KEY);  builder.addElement(Who.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  registry.adapt(Entry.KEY,KIND,KEY);}  }
class C{  public T casePropertySetterDeclaration(PropertySetterDeclaration object){  return null;}  }
class C{  public void reset(){  stopPlayback();  setVideoURI(null);}  }
class C{  private static Pointer computePointer(ShortBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.SHORT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    ShortBuffer t=ShortBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.SHORT);  }  return result;}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  public static long New(byte[] bytes){  return Extend(IrredPoly,bytes,0,bytes.length);}  }
class C{  private void handleRobotsTxt(RequestAndResponse requestAndResponse) throws IOException {  requestAndResponse.response.setContentType("text/plain;");  if (isOfficialSite) {    requestAndResponse.print("User-agent: *\nDisallow:\n");  } else {    requestAndResponse.print("User-agent: *\nDisallow: /\n");  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.CHOICE__KIND:    setKind((ChoiceKind)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Date(String date,String dateFormat){  if ((date == null) || (date.length() == 0)) {    return;  }  if (dateFormat == null) {    m_format=DATE_TIME_FORMAT;    if (date.length() == LEN_STRING_IN_DATE_FORMAT) {      m_format=DATE_FORMAT;    }  } else {    m_format=dateFormat;  }  if ((m_format.equals(DATE_TIME_FORMAT) && !rightLengthForDateTime(date)) || (m_format.equals(DATE_FORMAT) && (date.length() != LEN_STRING_IN_DATE_FORMAT))) {    m_invalidDate=date;  } else {    m_date=TradingCalendar.getZonedDateTimeFromDateTimeString(date.trim(),m_format);    m_invalidDate=null;  }}  }
class C{  public boolean contains(R1Interval y){  if (y.isEmpty()) {    return true;  }  return y.lo() >= lo() && y.hi() <= hi();}  }
class C{  boolean isSQLDateAndTimeTimeZoneSameAsNormal(){  if (cachedSQLDateAndTimeTimeZoneSameAsNormal == null) {    cachedSQLDateAndTimeTimeZoneSameAsNormal=Boolean.valueOf(getSQLDateAndTimeTimeZone() == null || getSQLDateAndTimeTimeZone().equals(getTimeZone()));  }  return cachedSQLDateAndTimeTimeZoneSameAsNormal.booleanValue();}  }
class C{  @Override public boolean load(final Player admin,final List<String> args){  final Class<?>[] signature=new Class<?>[]{Player.class,List.class,ScriptingSandbox.class};  final Object[] params=new Object[]{admin,args,this};  try {    newInstance();    final Method[] methods=Script.class.getMethods();    for (    final Method method : methods) {      logger.debug(method);    }    final Method theMethod=Script.class.getMethod("load",signature);    theMethod.invoke(script,params);  } catch (  final Exception e) {    logger.debug(e,e);    setMessage(e.toString());    return false;  }  return true;}  }
class C{  public PartitionSubstitutionModel parseMrBayesBlock(BeautiOptions options,List<CharSet> charSets) throws ImportException, IOException {  PartitionSubstitutionModel model=new PartitionSubstitutionModel(options,"nucs");  readTopLevelBlock(options,model,charSets);  return model;}  }
class C{  public void clearConditionFlag(int flag){  throw new RuntimeException("Unimplemented");}  }
class C{  public StandardFilesystemView(){  root=null;  sorter=VFSFactory.getInstance().getDefaultSorter();}  }
class C{  public static boolean hasExternalStorage(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public static void assertArrayEqual(int[] expected,int[] actual){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index]);  }}  }
class C{  @Override public String globalInfo(){  return "Applies the specified Weka filter to the statistics before passing them on to the base exporter.\n" + "This allows you to remove attributes, filter instances, etc.";}  }
class C{  public void lock(){  verifyState();  cacheLocked.set(true);}  }
class C{  protected void addVertex(Point mousePoint){}  }
class C{  public void attrib(Env<AttrContext> env){  if (env.tree.hasTag(TOPLEVEL))   attribTopLevel(env); else   attribClass(env.tree.pos(),env.enclClass.sym);}  }
class C{  public String decrypt(String cryptedText) throws Exception {  cipher.init(Cipher.DECRYPT_MODE,key,spec);  byte[] bytes=Base64.decode(cryptedText,Base64.DEFAULT);  byte[] decrypted=cipher.doFinal(bytes);  String decryptedText=new String(decrypted,"UTF-8");  return decryptedText;}  }
class C{  public RippleFilter(){  xAmplitude=5.0f;  yAmplitude=0.0f;  xWavelength=yWavelength=16.0f;}  }
class C{  public void on(){  this.on=true;}  }
class C{  protected void processKeyEvent(KeyEvent evt){  MenuSelectionManager.defaultManager().processKeyEvent(evt);  if (evt.isConsumed()) {    return;  }  super.processKeyEvent(evt);}  }
class C{  public void addDateChangeListener(DateChangeListener listener){  dateChangeListeners.add(listener);}  }
