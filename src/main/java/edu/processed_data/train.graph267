class C{  protected void flagToRemoveFromQuarantineQueue(NodePortTuple npt){  if (toRemoveFromQuarantineQueue.contains(npt) == false) {    toRemoveFromQuarantineQueue.add(npt);  }}  }
class C{  public void commentPrintSeparator(){  comment.append(COMMENTSEP + NEWLINE);}  }
class C{  public void addUser(User user){  users.add(user);}  }
class C{  private static String executeCommand(String[] command){  String s;  String output="";  try {    Process p=Runtime.getRuntime().exec(command);    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));    while ((s=stdInput.readLine()) != null) {      output+=s;    }  } catch (  IOException e) {    e.printStackTrace();  }  return output;}  }
class C{  public boolean isDragStarted(){  return dragStarted;}  }
class C{  private void refreshSourcePath(){  projectExplorer.reloadChildren(items.get(itemIndex).getParent());  refreshDestinationPath();}  }
class C{  private IOUtil(){}  }
class C{  public URLClassLoader(URL[] urls,ClassLoader parent){  this(urls,parent,null);}  }
class C{  void switchToApp(){  CharSequence from=getIntent().getCharSequenceExtra(IncomingMessageView.KEY_FROM);  CharSequence msg=getIntent().getCharSequenceExtra(IncomingMessageView.KEY_MESSAGE);  Intent[] stack=IncomingMessage.makeMessageIntentStack(this,from,msg);  startActivities(stack);  finish();}  }
class C{  public T search(T initialState,IStateManager<T> stateManager){  queue.clear();  queue.add(initialState);  T currentState;  while (true) {    if (queue.isEmpty()) {      currentState=null;      break;    }    currentState=queue.poll();    if (stateManager.goalTest(currentState))     break;    for (    T nextState : stateManager.nextStates(currentState)) {      if (!queue.contains(nextState)) {        queue.add(nextState);      }    }  }  return currentState;}  }
class C{  public void controllerUpdate(ControllerEvent evt){  if (evt instanceof ConfigureCompleteEvent || evt instanceof RealizeCompleteEvent || evt instanceof PrefetchCompleteEvent) {synchronized (waitSync) {      stateTransitionOK=true;      waitSync.notifyAll();    }  } else   if (evt instanceof ResourceUnavailableEvent) {synchronized (waitSync) {      stateTransitionOK=false;      waitSync.notifyAll();    }  } else   if (evt instanceof EndOfMediaEvent) {    evt.getSourceController().stop();    try {      evt.getSourceController().close();    } catch (    Exception e) {      System.err.println("WARNING: Spurious Sun JMF Error?\n\n");      e.printStackTrace();synchronized (waitSync) {        stateTransitionOK=false;        waitSync.notifyAll();      }synchronized (waitFileSync) {        fileSuccess=false;        fileDone=true;        waitFileSync.notifyAll();      }    }  }}  }
class C{  public void complete(List<JCCompilationUnit> trees,ClassSymbol c){  annotate.enterStart();  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();  try {    classEnter(trees,null);    if (memberEnter.completionEnabled) {      while (uncompleted.nonEmpty()) {        ClassSymbol clazz=uncompleted.next();        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete(); else         prevUncompleted.append(clazz);      }      for (      JCCompilationUnit tree : trees) {        if (tree.starImportScope.elems == null) {          JavaFileObject prev=log.useSource(tree.sourcefile);          Env<AttrContext> topEnv=topLevelEnv(tree);          memberEnter.memberEnter(tree,topEnv);          log.useSource(prev);        }      }    }  }  finally {    uncompleted=prevUncompleted;    annotate.enterDone();  }}  }
class C{  public static byte[] toByteArray(final BigInteger value,final int numBytes){  final byte[] outputBytes=new byte[numBytes];  final byte[] bigIntegerBytes=value.toByteArray();  int copyStartIndex=(0x00 == bigIntegerBytes[0]) ? 1 : 0;  int numBytesToCopy=bigIntegerBytes.length - copyStartIndex;  if (numBytesToCopy > numBytes) {    copyStartIndex+=numBytesToCopy - numBytes;    numBytesToCopy=numBytes;  }  for (int i=0; i < numBytesToCopy; ++i) {    outputBytes[i]=bigIntegerBytes[copyStartIndex + numBytesToCopy - i - 1];  }  return outputBytes;}  }
class C{  SuperMethodInvocation(AST ast){  super(ast);  if (ast.apiLevel >= AST.JLS3) {    this.typeArguments=new ASTNode.NodeList(TYPE_ARGUMENTS_PROPERTY);  }}  }
class C{  public static int hashCode(int pre,Paint p){  return 37 * pre + hashCodeForPaint(p);}  }
class C{  public void add(Predicate p,Font font){  super.add(p,font);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public void readGeneralizedTime() throws IOException {  if (tag == ASN1Constants.TAG_GENERALIZEDTIME) {    readContent();    if (buffer[offset - 1] != 'Z') {      throw new ASN1Exception("ASN.1 GeneralizedTime: encoded format is not implemented");    }    if (length != 15 && (length < 17 || length > 19)) {      throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");    }    if (length > 16) {      byte char14=buffer[contentOffset + 14];      if (char14 != '.' && char14 != ',') {        throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");      }    }    if (times == null) {      times=new int[7];    }    times[0]=strToInt(contentOffset,4);    times[1]=strToInt(contentOffset + 4,2);    times[2]=strToInt(contentOffset + 6,2);    times[3]=strToInt(contentOffset + 8,2);    times[4]=strToInt(contentOffset + 10,2);    times[5]=strToInt(contentOffset + 12,2);    if (length > 16) {      times[6]=strToInt(contentOffset + 15,length - 16);      if (length == 17) {        times[6]=times[6] * 100;      } else       if (length == 18) {        times[6]=times[6] * 10;      }    }  } else   if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {    throw new ASN1Exception("Decoding constructed ASN.1 GeneralizedTime type is not supported");  } else {    throw expected("GeneralizedTime");  }}  }
class C{  private Element createSingleLogOutForCastleAsSP(String binding) throws Exception {  String entityID=idmClient.getEntityID(tenantName);  String ssoLoc=convertToIPV6ShortForm(entityID);  if (ssoLoc == null) {    ssoLoc=tenantName;  }  String sloLoc=ssoLoc.replaceAll("SAML2/Metadata",SAMLNames.SP_SINGLELOGOUTSERVICE_PLACEHOLDER);  Element slosEle=createEndPoint(SAMLNames.SLOS,binding,sloLoc,null);  return slosEle;}  }
class C{  private void updateNAC(String nac){  if (mNAC == null || (nac != null && !mNAC.contentEquals(nac))) {    mNAC=nac;    broadcast(ChangedAttribute.NAC);  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean canBeResetWhenDone(){  TransitSection firstTS=mTransitSectionList.get(0);  int lastIndex=mTransitSectionList.size() - 1;  TransitSection lastTS=mTransitSectionList.get(lastIndex);  boolean OK=false;  while (!OK) {    if (firstTS.getSection() != lastTS.getSection()) {      if (lastTS.isAlternate() && (lastIndex > 1)) {        lastIndex--;        lastTS=mTransitSectionList.get(lastIndex);      } else {        log.warn("Section mismatch " + (firstTS.getSection()).getSystemName() + " "+ (lastTS.getSection()).getSystemName());        return false;      }    }    OK=true;  }  if (firstTS.getDirection() != lastTS.getDirection()) {    log.warn("Direction mismatch " + (firstTS.getSection()).getSystemName() + " "+ (lastTS.getSection()).getSystemName());    return false;  }  return true;}  }
class C{  public boolean isTileImagesLoaded(){  return tileManager.isLoaded();}  }
class C{  public DuplicateAdapterException(){  super("Billing adapter violates the unique ID constraint for the billing identifier.");}  }
class C{  public static <T>Specifications<T> combineWithAnd(final List<Specification<T>> specList){  if (specList.isEmpty()) {    return null;  }  Specifications<T> specs=Specifications.where(specList.get(0));  for (  final Specification<T> specification : specList.subList(1,specList.size())) {    specs=specs.and(specification);  }  return specs;}  }
class C{  public void testSpecExampleSkipping() throws Exception {  doTestSpec(false);}  }
class C{  public ScaleMultiImage(EditableResources.MultiImage m,int currentDpi){  initComponents();  int highestDPI=0;  int highestDPIOffset=0;  int scaleOffsetCounter=0;  for (int iter=0; iter < DPIS.length; iter++) {    if (currentDpi == DPIS[iter]) {      to.removeItemAt(iter);    } else {      actualDPIs[scaleOffsetCounter]=DPIS[iter];      scaleOffsetCounter++;    }  }  for (int iter=0; iter < m.getDpi().length; iter++) {    if (highestDPI < m.getDpi()[iter]) {      highestDPI=m.getDpi()[iter];      highestDPIOffset=iter;    }  }  int w=m.getInternalImages()[highestDPIOffset].getWidth();  int h=m.getInternalImages()[highestDPIOffset].getHeight();  aspectRatio=((float)w) / ((float)h);  width.setModel(new SpinnerNumberModel(w,1,5000,1));  height.setModel(new SpinnerNumberModel(h,1,5000,1));}  }
class C{  public static double lnGamma(double xx){  double x=xx;  double y=xx;  double tmp=x + 5.5;  tmp-=(x + 0.5) * log(tmp);  double ser=1.000000000190015;  for (  double aGammaCof : gammaCof) {    y++;    ser+=aGammaCof / y;  }  return -tmp + log(2.5066282746310005 * ser / x);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Metadata extract(){  return extract(new Metadata());}  }
class C{  public static File findUniqueFile(String fileName) throws ConfigurationException {  return findUniqueFile(fileName,null);}  }
class C{  @SuppressWarnings("deprecation") public static GridBinaryMarshaller marshaller(){  try {    BinaryContext ctx=new BinaryContext(BinaryNoopMetadataHandler.instance(),new IgniteConfiguration(),new NullLogger());    BinaryMarshaller marsh=new BinaryMarshaller();    marsh.setContext(new MarshallerContextImpl(null));    ctx.configure(marsh,new IgniteConfiguration());    return new GridBinaryMarshaller(ctx);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  public static CtMethod make(String src,CtClass declaring) throws CannotCompileException {  return CtNewMethod.make(src,declaring);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Integer_info cu=(CONSTANT_Integer_info)cp;  return ((int)bytes) - (int)cu.bytes;}  }
class C{  protected byte[] toBytes(Object obj) throws IgniteCheckedException {  return marsh.marshal(obj);}  }
class C{  public static String createSortUrl(final ITemplateContext context,final String fieldName){  final String prefix=getParamPrefix(context);  final Collection<String> excludedParams=Arrays.asList(new String[]{prefix.concat(SORT),prefix.concat(PAGE)});  final String baseUrl=buildBaseUrl(context,excludedParams);  final StringBuilder sortParam=new StringBuilder();  final Page<?> page=findPage(context);  final Sort sort=page.getSort();  final boolean hasPreviousOrder=sort != null && sort.getOrderFor(fieldName) != null;  if (hasPreviousOrder) {    Order previousOrder=sort.getOrderFor(fieldName);    Direction dir=previousOrder.isAscending() ? Direction.DESC : Direction.ASC;    sortParam.append(fieldName).append(COMMA).append(dir.toString().toLowerCase());  } else {    sortParam.append(fieldName);  }  return buildUrl(baseUrl,context).append(SORT).append(EQ).append(sortParam).toString();}  }
class C{  public CLIOutputResponse propset(final PropertySetRequest request) throws IOException, ServerException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  if (request.isForce()) {    uArgs.add("--force");  }  addDepth(uArgs,request.getDepth().getValue());  uArgs.add("propset");  uArgs.add(request.getName());  String value=request.getValue();  Path valueFile=null;  if (value.contains("\n")) {    try {      valueFile=java.nio.file.Files.createTempFile("svn-propset-value-",null);      java.nio.file.Files.write(valueFile,value.getBytes());      uArgs.add("-F");      uArgs.add(valueFile.toString());    } catch (    IOException e) {      uArgs.add(value);    }  } else {    uArgs.add(value);  }  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  @VisibleForTesting public void removeArchiveVersion(String shortname,BigDecimal version){  File dwcaFile=dataDir.resourceDwcaFile(shortname,version);  if (dwcaFile != null && dwcaFile.exists()) {    boolean deleted=FileUtils.deleteQuietly(dwcaFile);    if (deleted) {      log.debug(dwcaFile.getAbsolutePath() + " has been successfully deleted.");    }  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  LeastFrequentValue<String> oper=new LeastFrequentValue<String>();  CountAndLastTupleTestSink matchSink=new CountAndLastTupleTestSink();  CountAndLastTupleTestSink listSink=new CountAndLastTupleTestSink();  oper.least.setSink(matchSink);  oper.list.setSink(listSink);  oper.beginWindow(0);  int atot=5;  int btot=3;  int ctot=6;  for (int i=0; i < atot; i++) {    oper.data.process("a");  }  for (int i=0; i < btot; i++) {    oper.data.process("b");  }  for (int i=0; i < ctot; i++) {    oper.data.process("c");  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  HashMap<String,Integer> tuple=(HashMap<String,Integer>)matchSink.tuple;  Integer val=tuple.get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  Assert.assertEquals("number emitted tuples",1,listSink.count);  ArrayList<HashMap<String,Integer>> list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  val=list.get(0).get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  matchSink.clear();  listSink.clear();  oper.beginWindow(0);  atot=5;  btot=10;  ctot=5;  for (int i=0; i < atot; i++) {    oper.data.process("a");  }  for (int i=0; i < btot; i++) {    oper.data.process("b");  }  for (int i=0; i < ctot; i++) {    oper.data.process("c");  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  Assert.assertEquals("number emitted tuples",1,listSink.count);  list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  int acount=0;  int ccount=0;  for (  HashMap<String,Integer> h : list) {    val=h.get("a");    if (val == null) {      ccount=h.get("c");    } else {      acount=val;    }  }  Assert.assertEquals("Count of a was ",atot,acount);  Assert.assertEquals("Count of c was ",ctot,ccount);  HashMap<String,Integer> mtuple=(HashMap<String,Integer>)matchSink.tuple;  val=mtuple.get("a");  if (val == null) {    val=mtuple.get("c");  }  Assert.assertEquals("Count of least frequent key was ",ctot,val.intValue());}  }
class C{  public void testDoubleValueNegRounded1(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=-1;  double result=-1.54747264387948E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public void remove(Context context,String itemId){  if (itemId == null) {    return;  }  Observable.defer(null).map(null).map(null).subscribeOn(mIoScheduler).observeOn(AndroidSchedulers.mainThread()).subscribe(null);}  }
class C{  public DataSerializableImpl(Random random){  super(random);}  }
class C{  private void doPurge() throws PageException, SearchException {  required("index",action,"collection",collection);  collection.purge();}  }
class C{  public int findColumn(String columnName){  for (int i=0; i < getColumnCount(); i++) {    if (columnName.equals(getColumnName(i))) {      return i;    }  }  return -1;}  }
class C{  protected void decodeAttribute(mxCodec dec,Node attr,Object obj){  String name=attr.getNodeName();  if (!name.equalsIgnoreCase("as") && !name.equalsIgnoreCase("id")) {    Object value=attr.getNodeValue();    String fieldname=getFieldName(name);    if (isReference(obj,fieldname,value,false)) {      Object tmp=dec.getObject(String.valueOf(value));      if (tmp == null) {        System.err.println("mxObjectCodec.decode: No object for " + mxCodecRegistry.getName(obj) + "."+ fieldname+ "="+ value);        return;      }      value=tmp;    }    if (!isExcluded(obj,fieldname,value,false)) {      setFieldValue(obj,fieldname,value);    }  }}  }
class C{  private void initWidget(View view){  this.toolbar=(Toolbar)getActivity().findViewById(R.id.container_main_toolbar);  this.skyView=(SkyView)view.findViewById(R.id.fragment_weather_skyView);  this.initScrollViewPart(view);}  }
class C{  public void guardarUnidadDocumentalExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  UnidadDocumentalForm udocForm=(UnidadDocumentalForm)form;  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionPrevisionesBI previsionesBI=services.lookupGestionPrevisionesBI();  RelacionEntregaPO relacionEntrega=(RelacionEntregaPO)request.getSession().getAttribute(TransferenciasConstants.RELACION_KEY);  DetallePrevisionVO detallePrevision=null;  List rangos=null;  int subtipo=relacionEntrega.getNivelDocumental().getId() != null ? relacionEntrega.getNivelDocumental().getSubtipo() : ElementoCuadroClasificacion.SUBTIPO_UNIDAD_DOCUMENTAL_SIMPLE;  if (relacionEntrega != null && relacionEntrega.getIddetprevision() != null) {    detallePrevision=previsionesBI.getDetallePrevision(relacionEntrega.getIddetprevision());  }  UnidadDocumentalVO udoc=(UnidadDocumentalVO)getFromTemporalSession(request,TransferenciasConstants.UNIDAD_DOCUMENTAL);  if (relacionEntrega.getNivelDocumental() != null && subtipo == ElementoCuadroClasificacion.SUBTIPO_CAJA) {    rangos=obtenerRangos(request.getParameterValues("campo_201"),request.getParameterValues("campo_202"));    String numExpRangos=null;    if (rangos != null && rangos.size() > 0) {      udoc.resetRangos();      Iterator it=rangos.iterator();      while (it.hasNext()) {        RangoVO rango=(RangoVO)it.next();        numExpRangos=(numExpRangos == null ? "" : numExpRangos + Constants.DELIMITADOR_RANGOS) + rango.getDesde() + Constants.DELIMITADOR_RANGO_INICIAL_FINAL+ rango.getHasta();        udoc.addRango(rango);      }      udoc.setNumeroExpediente(numExpRangos);    } else {      udoc.resetRangos();      udoc.setNumeroExpediente(null);    }  } else   udoc.setNumeroExpediente(udocForm.getNumeroExpediente());  ActionErrors errores=validarUdocForm(udocForm,detallePrevision != null ? detallePrevision.getAnoIniUdoc() : null,detallePrevision != null ? detallePrevision.getAnoFinUdoc() : null,relacionEntrega,request);  if (errores.size() > 0) {    if (rangos != null && rangos.size() > 0)     setInTemporalSession(request,TransferenciasConstants.LISTA_RANGOS_UDOC,rangos);    ErrorsTag.saveErrors(request,errores);    nuevaUnidadDocumentalExecuteLogic(mappings,request,subtipo);    return;  }  GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();  udoc.setProductor(udocForm.getIdProductor(),udocForm.getNombreProductor(),null);  try {    udoc.setFechaInicio(udocForm.getFechaInicioAsDate());    udoc.setFechaFin(udocForm.getFechaFinAsDate());  } catch (  ParseException pe) {  }  udoc.setAsunto(udocForm.getAsunto());  try {    String signaturaUdoc=udocForm.getSignaturaUDoc() != null ? udocForm.getSignaturaUDoc() : null;    String signaturaUI=udocForm.getSignaturaUI() != null ? udocForm.getSignaturaUI() : signaturaUdoc;    relacionesBI.modificarUnidadDocumental(relacionEntrega,udoc,signaturaUI,signaturaUdoc);    popLastInvocation(request);    udoc=relacionesBI.getUnidadDocumental(udoc.getId());    udoc.setPermitidoRealizarCambios(true);    setInTemporalSession(request,TransferenciasConstants.UNIDAD_DOCUMENTAL,TransferenciasUnidadDocumentalToPO.getInstance(services).transform(udoc));    setReturnActionFordward(request,mappings.findForward("redirect_to_view_udoc"));  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);    setReturnActionFordward(request,mappings.findForward("edicion_udoc_relacion"));  }}  }
class C{  public GameEntity buildAndAttach(GameWorld world){  world.addEntity(entity);  return entity;}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  private void initializeAttributes(){  rasterPlotConsumerType=new AttributeType(this,"Series","setValue",double.class,true);  addConsumerType(rasterPlotConsumerType);}  }
class C{  public void add(Contract contract,Tradingday tradingday,RegularTimePeriod period,double open,double high,double low,double close,long volume,double vwap,int tradeCount,ZonedDateTime lastUpdateDate){  if (!this.isEmpty()) {    CandleItem item0=(CandleItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new CandleItem(contract,tradingday,period,open,high,low,close,volume,vwap,tradeCount,lastUpdateDate),true);}  }
class C{  @Override public boolean isDesignTime(){  return designTime;}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  public void move(java.awt.event.MouseEvent e){}  }
class C{  @Override public Void visitMemberSelect(MemberSelectTree node,Void p){  boolean isType=node.getExpression().getKind() == Kind.PARAMETERIZED_TYPE;  if (!TreeUtils.isSelfAccess(node) && !isType) {    checkForNullability(node.getExpression(),DEREFERENCE_OF_NULLABLE);  }  return super.visitMemberSelect(node,p);}  }
class C{  @Override public void willChange(){  if (changingDepth == 0) {    fireAreaInvalidated();    invalidate();  }  changingDepth++;}  }
class C{  public static boolean isSignedInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Integer.parseInt(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static Float toFloat(CharSequence self){  return Float.valueOf(self.toString().trim());}  }
class C{  public static Boolean isAdBlockerActivated(){  Boolean res=false;  if (UtilsLibrary.isAdBlockerActivated()) {    res=true;  }  return res;}  }
class C{  public void removeMenuKeyListener(MenuKeyListener l){  listenerList.remove(MenuKeyListener.class,l);}  }
class C{  public static boolean isJPrimitiveType(String variable_type){  for (  primitiveType typeIndex : primitiveType.values()) {    if (typeIndex.name().toLowerCase().equals(variable_type)) {      return true;    }  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.SIMPLE_PROJECT_DEPENDENCY;}  }
class C{  public String invertSelectionTipText(){  return "Sets copy selected vs unselected action." + " If set to false, only the specified attributes will be copied;" + " If set to true, non-specified attributes will be copied.";}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public static String joinHyphen(String line){  return line.replace(" - ","-");}  }
class C{  public List<HostStorageDomain> addISCSINamesToHostStorageDomain(String systemId,List<HostStorageDomain> hsdList,String model) throws Exception {  InputStream responseStream=null;  List<HostStorageDomain> hsdResponseList=null;  try {    String addISCSINamesToHSDsQuery=constructISCSINamesQuery(systemId,hsdList,model);    log.info("batch query to add ISCSI initiators to HostStorageDomains: {}",addISCSINamesToHSDsQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addISCSINamesToHSDsQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsdResponseList=(List<HostStorageDomain>)javaResult.getBean(HDSConstants.HSD_RESPONSE_BEAN_ID);      if (null == hsdResponseList || hsdResponseList.isEmpty()) {        throw HDSException.exceptions.notAbleToAddInitiatorsToHostStorageDomain(systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Batch query to add ISCSI initiators to HSDs failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return hsdResponseList;}  }
class C{  protected void resolveImagePoint(int x,int y,int[] newPixels,float[] azimuthVals,int range,float pix_arc_interval,boolean mark,int colorForMark){  int ox=LOScenterP.x - LOSedge / 2;  int oy=LOScenterP.y - LOSedge / 2;  int dist=TerrainLayer.numPixelsBetween(LOScenterP.x,LOScenterP.y,x,y);  if (dist > (LOSedge - 1) / 2) {    mark=true;    colorForMark=INVISIBLE;  }  if (dist == (LOSedge - 1) / 2) {    mark=true;    colorForMark=MAYBEVISIBLE;  }  LatLonPoint cord=proj.inverse(x,y,new LatLonPoint.Double());  x-=ox;  y-=oy;  if (Debug.debugging("losdetail")) {    Debug.output("resolveImagePoint x = " + x + ", y = "+ y);  }  if (mark == true) {    newPixels[x + y * LOSedge]=colorForMark;    mark=false;    return;  }  double arc_dist=LOScenterLLP.distance(cord);  double arc_angle=LOScenterLLP.azimuth(cord);  double slope=calculateLOSslope(cord,arc_dist);  int index=(int)Math.round(arc_angle / pix_arc_interval);  int maxIndex=(LOSedge * 4) - 4;  if (index < 0)   index+=maxIndex; else   if (index >= maxIndex)   index-=maxIndex;  if (Debug.debugging("losdetail")) {    Debug.output(" angle = " + arc_angle + ", index/maxIndex = "+ index+ "/"+ maxIndex+ ", slope = "+ slope+ " compared to slope[index]="+ azimuthVals[index]);  }  int color=colortable[INVISIBLE];  if (azimuthVals[index] < slope) {    for (int i=(index - range); i < index + range - 1; i++) {      if (i < 0)       azimuthVals[maxIndex + i]=(float)slope; else       if (i >= maxIndex)       azimuthVals[i - maxIndex]=(float)slope; else       azimuthVals[i]=(float)slope;    }    color=colortable[VISIBLE];  }  if (Debug.debugging("losdetail")) {    Debug.output(" color = " + color);  }  newPixels[x + y * LOSedge]=color;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException();}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public void faceNext(GuidedEntity entity){  if (path != null && nodeReached(entity)) {    Node next=nextNode();    if (next != null) {      entity.faceto(next.getX(),next.getY());    } else {      entity.stop();    }  }}  }
class C{  private DateEditor(JSpinner spinner,DateFormat format){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerDateModel)) {    throw new IllegalArgumentException("model not a SpinnerDateModel");  }  SpinnerDateModel model=(SpinnerDateModel)spinner.getModel();  DateFormatter formatter=new DateEditorFormatter(model,format);  DefaultFormatterFactory factory=new DefaultFormatterFactory(formatter);  JFormattedTextField ftf=getTextField();  ftf.setEditable(true);  ftf.setFormatterFactory(factory);  try {    String maxString=formatter.valueToString(model.getStart());    String minString=formatter.valueToString(model.getEnd());    ftf.setColumns(Math.max(maxString.length(),minString.length()));  } catch (  ParseException e) {  }}  }
class C{  private WindowUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  private void namespace(Annotation label){  if (label != null) {    namespace=(Namespace)label;  }}  }
class C{  private void determineGlobalExtremumType(){  final double f=function(alphaExtremum);  double[] alpha_1=new double[alphaExtremum.length];  double[] alpha_2=new double[alphaExtremum.length];  for (int i=0; i < alphaExtremum.length; i++) {    alpha_1[i]=Math.random() * Math.PI;    alpha_2[i]=Math.random() * Math.PI;  }  double f1=function(alpha_1);  double f2=function(alpha_2);  if (f1 < f && f2 < f) {    extremumType=ExtremumType.MAXIMUM;  } else   if (f1 > f && f2 > f) {    extremumType=ExtremumType.MINIMUM;  } else   if (Math.abs(f1 - f) < DELTA && Math.abs(f2 - f) < DELTA) {    extremumType=ExtremumType.CONSTANT;  } else {    throw new IllegalStateException("Houston, we have a problem:" + "\n" + this + "\nextremum at "+ FormatUtil.format(alphaExtremum)+ "\nf  "+ f+ "\nf1 "+ f1+ "\nf2 "+ f2);  }}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  UserDao.dropTable(db,ifExists);}  }
class C{  public FBXAException(String msg){  super(msg);}  }
class C{  public void validateBusinessObjectDataAttribute(Integer businessObjectDataAttributeId,String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,String expectedBusinessObjectDataAttributeName,String expectedBusinessObjectDataAttributeValue,BusinessObjectDataAttribute actualBusinessObjectDataAttribute){  assertNotNull(actualBusinessObjectDataAttribute);  if (businessObjectDataAttributeId != null) {    assertEquals(businessObjectDataAttributeId,Integer.valueOf(actualBusinessObjectDataAttribute.getId()));  }  validateBusinessObjectDataAttributeKey(expectedNamespace,expectedBusinessObjectDefinitionName,expectedBusinessObjectFormatUsage,expectedBusinessObjectFormatFileType,expectedBusinessObjectFormatVersion,expectedBusinessObjectDataPartitionValue,expectedBusinessObjectDataSubPartitionValues,expectedBusinessObjectDataVersion,expectedBusinessObjectDataAttributeName,actualBusinessObjectDataAttribute.getBusinessObjectDataAttributeKey());  assertEquals(expectedBusinessObjectDataAttributeValue,actualBusinessObjectDataAttribute.getBusinessObjectDataAttributeValue());}  }
class C{  public final double dot(GVector v){  if (length != v.length) {    throw new MatrixSizeException();  }  double result=0.0;  for (int i=0; i < length; i++) {    result+=values[i] * v.values[i];  }  return result;}  }
class C{  public void testFindResource() throws Exception {  JarArchive jar=new DefaultJarArchive(getResourcePath(PACKAGE_PATH + "test.jar"));  assertEquals("rootResource.txt",jar.findResource("rootResource.txt"));  assertEquals("folder1/resourceOne.txt",jar.findResource("resourceOne.txt"));  assertNull(jar.findResource("foo"));}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private void putDefault(UIDefaults table,String uiKey){  try {    String className="org.compiere.plaf.Compiere" + uiKey;    table.put(uiKey,className);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  void notifyAuthError(Response<?,ResponseBody> rawResponse){  for (int i=0, size=authErrorCallbacks.size(); i < size; i++) {    AuthErrorCallback callback=authErrorCallbacks.get(i);    if (callback != null)     callbackAdapter.adapt(callback).onAuthError(rawResponse);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void registerMethod(Method method){  Type genericType=method.getGenericParameterTypes()[0];  Class<?> argumentType=resolveArgument(genericType);  if (argumentType != null && Operation.class.isAssignableFrom(argumentType)) {    registerMethod(argumentType,method);  }}  }
class C{  public static void copy(Reader reader,boolean closeIn,Appendable out) throws IOException {  try {    CharBuffer buffer=CharBuffer.allocate(4096);    while (reader.read(buffer) > 0) {      buffer.flip();      buffer.rewind();      out.append(buffer);    }  }  finally {    if (closeIn)     IOUtils.closeQuietly(reader);  }}  }
class C{  private List<NondominatedPopulation> load(File file,Problem problem) throws IOException {  ResultFileReader reader=null;  try {    reader=new ResultFileReader(problem,file);    List<NondominatedPopulation> data=new ArrayList<NondominatedPopulation>();    while (reader.hasNext()) {      data.add(reader.next().getPopulation());    }    return data;  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  private static boolean cancelQueuedBuildByBranchName(final String branch){  Queue queue=getJenkinsInstance().getQueue();  for (  Queue.Item item : queue.getApproximateItemsQuickly()) {    Optional<Cause> cause=from(item.getAllActions()).filter(instanceOf(CauseAction.class)).transformAndConcat(new CausesFromAction()).filter(instanceOf(GitHubBranchCause.class)).firstMatch(new CauseHasBranch(branch));    if (cause.isPresent()) {      queue.cancel(item);      return true;    }  }  return false;}  }
class C{  public void load(Config config,String args[]) throws StartupException {  this.config=config;  Thread t=new Thread(this);  t.setName(this.toString());  t.setDaemon(false);  t.run();}  }
class C{  protected void allowQuit(boolean quitAllowed){  if (allowQuit != quitAllowed) {    newWindowAction=null;    allowQuit=quitAllowed;    groups.setNewWindowMenuAction(this.getNewWindowAction());  }  firePropertyChange("quit","setEnabled",allowQuit);  if (!allowQuit) {    firePropertyChange("closewindow","setEnabled",true);  }}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  return ofs;}  }
class C{  public TabbedPanel restoreOriginalParentTabbedPanel(){  return null;}  }
class C{  public JavaElementDeltaBuilder(IJavaElement javaElement){  this.javaElement=javaElement;  initialize();  recordElementInfo(javaElement,0);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == OPTIONS_MENU_DELETE) {    mContents.delete(getActivity());    mIsDeleting=true;    getActivity().onBackPressed();    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodevalue.class,args);}  }
class C{  public void init(boolean encrypting,byte[] key){  this.workingKey=generateWorkingKey(encrypting,key,0);}  }
class C{  public boolean isConstant(){  if (type.inMask(TM_REFERENCE) && !type.equals(Type.tString)) {    return false;  }  return right.isConstant();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void testDisjunctionSumVersusDisjunctionMax() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  BooleanQuery.Builder q1=new BooleanQuery.Builder();  q1.add(new TermQuery(t1),Occur.SHOULD);  q1.add(new TermQuery(t2),Occur.SHOULD);  DisjunctionMaxQuery q2=new DisjunctionMaxQuery(Arrays.asList(new TermQuery(t1),new TermQuery(t2)),0.5f);  assertSameSet(q1.build(),q2);}  }
class C{  public Execution createExecution(){  ExecutionImpl execution=new ExecutionImpl();  return execution;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPRequest that=(SIPRequest)other;  return requestLine.equals(that.requestLine) && super.equals(other);}  }
class C{  public void loadSettings(JFrame frame){  if ("mainWindow".equals(frame.getName())) {    if (getBoolean("mainWindowMaximized")) {      frame.setExtendedState(frame.getExtendedState() | JFrame.MAXIMIZED_BOTH);      frame.validate();    } else {      Rectangle rect=getWindowBounds("mainWindow");      if (rect.width > 0) {        frame.setBounds(rect);      } else {        frame.setLocationRelativeTo(null);      }    }    MainWindow mainWindow=(MainWindow)frame;    MoviePanel moviePanel=mainWindow.getMoviePanel();    if (getInteger("movieWindowSlider1") > 0) {      moviePanel.getSplitPaneVertical().setDividerLocation(getInteger("movieWindowSlider1"));    }    if (getInteger("movieWindowSlider2") > 0) {      moviePanel.getSplitPaneHorizontal().setDividerLocation(getInteger("movieWindowSlider2"));    }  }}  }
class C{  public static void centerInRaptorWindow(Dialog dialog){  Shell parent=Raptor.getInstance().getWindow().getShell();  Rectangle parentSize=parent.getBounds();  Point mySize=dialog.getShell().computeSize(0,0);  int locationX, locationY;  locationX=(parentSize.width - mySize.x) / 2 + mySize.x;  locationY=(parentSize.height - mySize.y) / 2 - mySize.y;  dialog.getShell().setLocation(new Point(locationX,locationY));}  }
class C{  @Override public void onStart(){  super.onStart();  LaunchApp();  finish(Activity.RESULT_OK,mResults);}  }
class C{  public static SecretsBundle generateForTest(){  try {    Signer signer=new Signer(Util.generateKeyczarReader(DefaultKeyType.HMAC_SHA1,KeyPurpose.SIGN_AND_VERIFY));    return new SecretsBundle(signer);  } catch (  KeyczarException e) {    throw new RuntimeException("Error generating signing key",e);  }}  }
class C{  public static boolean occlusionTest(IMultipart part,Predicate<IMultipart> ignored,IMultipartContainer container){  List<IMultipart> ignoredParts=new ArrayList<IMultipart>();  for (  IMultipart p : container.getParts())   if (ignored.apply(p))   ignoredParts.add(p);  return container.occlusionTest(part,ignoredParts.toArray(new IMultipart[ignoredParts.size()]));}  }
class C{  public ContactFormAspect(final TaskExecutor taskExecutor,final MailService mailService,final MailComposer mailComposer,final ThemeService themeService){  super(taskExecutor);  this.mailService=mailService;  this.mailComposer=mailComposer;  this.themeService=themeService;}  }
class C{  @Override public boolean validate(IoBuffer input){  byte[] pBuffer=new byte[input.remaining()];  input.get(pBuffer,0,input.remaining());  if (validateScheme(pBuffer,0)) {    validationScheme=0;    log.debug("Selected scheme: 0");    return true;  }  if (validateScheme(pBuffer,1)) {    validationScheme=1;    log.debug("Selected scheme: 1");    return true;  }  log.error("Unable to validate client");  return false;}  }
class C{  public final boolean isReadFinished(){  return dataSourceStream.isEndOfStream();}  }
class C{  @Override public Boolean visitDeclared(DeclaredType t,Void p){  return asElement(t).getQualifiedName().contentEquals(superclass.toString());}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.IMPORT__IMPORT_URI:    setImportURI((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public String explain(boolean multiline){  return explain(multiline,"",null);}  }
class C{  private int addChildTry(SearchRow row){  if (entryCount < 4) {    return -1;  }  int startData;  if (onlyPosition) {    startData=entryCount + 1 * MAX_KEY_LENGTH;  } else {    int rowLength=index.getRowSize(data,row,onlyPosition);    int pageSize=index.getPageStore().getPageSize();    int last=entryCount == 0 ? pageSize : offsets[entryCount - 1];    startData=last - rowLength;  }  if (startData < start + CHILD_OFFSET_PAIR_LENGTH) {    return entryCount / 2;  }  return -1;}  }
class C{  private InterProcessLock lockWorkflow(Workflow workflow) throws WorkflowException {  boolean acquired=false;  InterProcessLock lock=getWorkflowLock(workflow);  try {    acquired=lock.acquire(60,TimeUnit.MINUTES);  } catch (  Exception ex) {    _log.error("Exception locking workflow: " + workflow.getWorkflowURI().toString(),ex);    throw new WorkflowException("Exception locking workflow: " + workflow.getWorkflowURI().toString(),ex);  }  if (acquired == false) {    _log.error("Unable to acquire workflow lock: " + workflow.getWorkflowURI().toString());    throw new WorkflowException("Unable to acquire workflow lock: " + workflow.getWorkflowURI().toString());  }  return lock;}  }
class C{  protected SVGOMClipPathElement(){}  }
class C{  public String sendFeedback(String SID,String username,String message,String email){  return feedbackManagement.sendFeedback(username,email,message);}  }
class C{  public boolean hasParm(String pname){  return parameters.hasNameValue(pname);}  }
class C{  public int match_main(String text,String pattern,int loc){  if (text == null || pattern == null) {    throw new IllegalArgumentException("Null inputs. (match_main)");  }  loc=Math.max(0,Math.min(loc,text.length()));  if (text.equals(pattern)) {    return 0;  } else   if (text.length() == 0) {    return -1;  } else   if (loc + pattern.length() <= text.length() && text.substring(loc,loc + pattern.length()).equals(pattern)) {    return loc;  } else {    return match_bitap(text,pattern,loc);  }}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  int doReExecTest(String testPattern){  return doReExecTest(testPattern,testPattern);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep share(@PathParam("id") URI id,FileSystemShareParam param) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  ArgValidator.checkFieldNotNull(param.getShareName(),"name");  ArgValidator.checkFieldNotEmpty(param.getShareName(),"name");  Snapshot snap=queryResource(id);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  ArgValidator.checkEntity(snap,id,isIdEmbeddedInURL(id));  String shareName=param.getShareName();  if (CifsShareUtility.doesShareExist(snap,shareName)) {    _log.error("CIFS share: {}, already exists",shareName);    throw APIException.badRequests.duplicateEntityWithField("CIFS share","name");  }  if (param.getPermission() == null || param.getPermission().isEmpty()) {    param.setPermission(FileSMBShare.Permission.read.name());  }  if (!param.getPermission().equals(FileSMBShare.Permission.read.name())) {    throw APIException.badRequests.snapshotSMBSharePermissionReadOnly();  }  StoragePort sport=_fileScheduler.placeFileShareExport(fs,StorageProtocol.File.CIFS.name(),null);  if (param.getMaxUsers().equalsIgnoreCase(FileService.UNLIMITED_USERS)) {    param.setMaxUsers("-1");  }  String path=snap.getPath();  _log.info("Path {}",path);  _log.info("Param Share Name : {} SubDirectory : {}",param.getShareName(),param.getSubDirectory());  boolean isSubDirPath=false;  if (param.getSubDirectory() != null && param.getSubDirectory().length() > 0) {    path+="/" + param.getSubDirectory();    isSubDirPath=true;    _log.info("Sub-directory path {}",path);  }  FileSMBShare smbShare=new FileSMBShare(param.getShareName(),param.getDescription(),param.getPermissionType(),param.getPermission(),param.getMaxUsers(),null,path);  smbShare.setStoragePortName(sport.getPortName());  smbShare.setStoragePortNetworkId(sport.getPortNetworkId());  smbShare.setStoragePortGroup(sport.getPortGroup());  smbShare.setSubDirPath(isSubDirPath);  _log.info(String.format("Create snapshot share --- Snap id: %1$s, Share name: %2$s, StoragePort: %3$s, PermissionType: %4$s, " + "Permissions: %5$s, Description: %6$s, maxUsers: %7$s",id,smbShare.getName(),sport.getPortName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getDescription(),smbShare.getMaxUsers()));  _log.info("SMB share path: {}",smbShare.getPath());  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.CREATE_FILE_SNAPSHOT_SHARE);  FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.share(device.getId(),snap.getId(),smbShare,task);  auditOp(OperationTypeEnum.CREATE_FILE_SNAPSHOT_SHARE,true,AuditLogManager.AUDITOP_BEGIN,smbShare.getName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getMaxUsers(),smbShare.getDescription(),snap.getId().toString());  return toTask(snap,task,op);}  }
class C{  public OpType opType(){  return this.opType;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.619 -0500",hash_original_method="8BAC5D567D23AEF728D22298071CB50B",hash_generated_method="7CC254380C7C581B743D681C114E17D6") public final boolean isSubpixelText(){  return 1 == ((getFlags() & SUBPIXEL_TEXT_FLAG) + 0);}  }
class C{  public static int decodeInt(InputStream stream) throws IOException {  long r=decodeLong(stream);  if (r < 0 || r >= 1L << 32) {    throw new IOException("varint overflow " + r);  }  return (int)r;}  }
class C{  @SuppressWarnings({"StringEquality","UnusedCatchParameter"}) @Nullable public Class<?> deployedClass(String clsName,String... alias){  Class<?> cls=clss.get(clsName);  if (cls == null) {    try {      cls=Class.forName(clsName,true,clsLdr);      Class<?> cur=clss.putIfAbsent(clsName,cls);      if (cur == null) {        for (        String a : alias) {          clss.putIfAbsent(a,cls);        }        onDeployed(cls);      }    } catch (    ClassNotFoundException ignored) {      for (      String a : alias) {        cls=clss.get(a);        if (cls != null)         return cls; else         if (!a.equals(clsName)) {          try {            cls=Class.forName(a,true,clsLdr);          } catch (          ClassNotFoundException ignored0) {            continue;          }          Class<?> cur=clss.putIfAbsent(a,cls);          if (cur == null) {            for (            String a1 : alias) {              if (a1 != a)               clss.putIfAbsent(a1,cls);            }            onDeployed(cls);          }          return cls;        }      }    }  }  return cls;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  public static ComparisonResult compare(ComparisonParameters params){  DataSet dataSet=null;  Graph trueDag=null;  IndependenceTest test=null;  Score score=null;  ComparisonResult result=new ComparisonResult(params);  if (params.isDataFromFile()) {    String path="/Users/dmalinsky/Documents/research/data/danexamples";    File dir=new File(path);    File[] files=dir.listFiles();    if (files == null)     throw new NullPointerException("No files in " + path);    for (    File file : files) {      if (file.getName().startsWith("graph") && file.getName().contains(String.valueOf(params.getGraphNum())) && file.getName().endsWith(".g.txt")) {        params.setGraphFile(file.getName());        trueDag=GraphUtils.loadGraphTxt(file);        break;      }    }    String trialGraph=String.valueOf(params.getGraphNum()).concat("-").concat(String.valueOf(params.getTrial())).concat(".dat.txt");    for (    File file : files) {      if (file.getName().startsWith("graph") && file.getName().endsWith(trialGraph)) {        Path dataFile=Paths.get(path.concat("/").concat(file.getName()));        Character delimiter='\t';        if (params.getDataType() == ComparisonParameters.DataType.Continuous) {          try {            edu.cmu.tetrad.io.DataReader dataReader=new TabularContinuousDataReader(dataFile,delimiter);            dataSet=dataReader.readInData();          } catch (          IOException e) {            e.printStackTrace();          }          params.setDataFile(file.getName());          break;        } else {          try {            edu.cmu.tetrad.io.DataReader dataReader=new VerticalTabularDiscreteDataReader(dataFile,delimiter);            dataSet=dataReader.readInData();          } catch (          IOException e) {            e.printStackTrace();          }          params.setDataFile(file.getName());          break;        }      }    }    System.out.println("current graph file = " + params.getGraphFile());    System.out.println("current data set file = " + params.getDataFile());  }  if (params.isNoData()) {    List<Node> nodes=new ArrayList<>();    for (int i=0; i < params.getNumVars(); i++) {      nodes.add(new ContinuousVariable("X" + (i + 1)));    }    trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);    if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {      trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);      trueDag=TimeSeriesUtils.GraphToLagGraph(trueDag);      System.out.println("Creating Time Lag Graph : " + trueDag);    }    test=new IndTestDSep(trueDag);    score=new GraphScore(trueDag);    if (params.getAlgorithm() == null) {      throw new IllegalArgumentException("Algorithm not set.");    }    long time1=System.currentTimeMillis();    if (params.getAlgorithm() == ComparisonParameters.Algorithm.PC) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      Pc search=new Pc(test);      result.setResultGraph(search.search());      result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.CPC) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      Cpc search=new Cpc(test);      result.setResultGraph(search.search());      result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCLocal) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      PcLocal search=new PcLocal(test);      result.setResultGraph(search.search());      result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCMax) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      PcMax search=new PcMax(test);      result.setResultGraph(search.search());      result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.FGS) {      if (score == null)       throw new IllegalArgumentException("Score not set.");      Fgs search=new Fgs(score);      result.setResultGraph(search.search());      result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.FCI) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      Fci search=new Fci(test);      result.setResultGraph(search.search());      result.setCorrectResult(new DagToPag(trueDag).convert());    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.GFCI) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      GFci search=new GFci(test,score);      result.setResultGraph(search.search());      result.setCorrectResult(new DagToPag(trueDag).convert());    } else     if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {      if (test == null)       throw new IllegalArgumentException("Test not set.");      TsFci search=new TsFci(test);      IKnowledge knowledge=getKnowledge(trueDag);      search.setKnowledge(knowledge);      result.setResultGraph(search.search());      result.setCorrectResult(new TsDagToPag(trueDag).convert());      System.out.println("Correct result for trial = " + result.getCorrectResult());      System.out.println("Search result for trial = " + result.getResultGraph());    } else {      throw new IllegalArgumentException("Unrecognized algorithm.");    }    long time2=System.currentTimeMillis();    long elapsed=time2 - time1;    result.setElapsed(elapsed);    result.setTrueDag(trueDag);    return result;  } else   if (params.getDataFile() != null) {    System.out.println("Using data from file... ");    if (params.getGraphFile() == null) {      throw new IllegalArgumentException("True graph file not set.");    } else {      System.out.println("Using graph from file... ");    }  } else {    if (params.getNumVars() == -1) {      throw new IllegalArgumentException("Number of variables not set.");    }    if (params.getNumEdges() == -1) {      throw new IllegalArgumentException("Number of edges not set.");    }    if (params.getDataType() == ComparisonParameters.DataType.Continuous) {      List<Node> nodes=new ArrayList<>();      for (int i=0; i < params.getNumVars(); i++) {        nodes.add(new ContinuousVariable("X" + (i + 1)));      }      trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);      if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {        trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);        trueDag=TimeSeriesUtils.GraphToLagGraph(trueDag);        System.out.println("Creating Time Lag Graph : " + trueDag);      }      if (params.getDataType() == null) {        throw new IllegalArgumentException("Data type not set or inferred.");      }      if (params.getSampleSize() == -1) {        throw new IllegalArgumentException("Sample size not set.");      }      LargeScaleSimulation sim=new LargeScaleSimulation(trueDag);      if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {        sim.setCoefRange(0.20,0.50);      }      if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {        boolean isStableTetradMatrix;        int attempt=1;        int tierSize=params.getNumVars();        int[] sub=new int[tierSize];        int[] sub2=new int[tierSize];        for (int i=0; i < tierSize; i++) {          sub[i]=i;          sub2[i]=tierSize + i;        }        do {          dataSet=sim.simulateDataFisher(params.getSampleSize());          TetradMatrix coefMat=new TetradMatrix(sim.getCoefficientMatrix());          TetradMatrix B=coefMat.getSelection(sub,sub);          TetradMatrix Gamma1=coefMat.getSelection(sub2,sub);          TetradMatrix Gamma0=TetradMatrix.identity(tierSize).minus(B);          TetradMatrix A1=Gamma0.inverse().times(Gamma1);          isStableTetradMatrix=TimeSeriesUtils.allEigenvaluesAreSmallerThanOneInModulus(A1);          System.out.println("isStableTetradMatrix? : " + isStableTetradMatrix);          attempt++;        } while ((!isStableTetradMatrix) && attempt <= 5);        if (!isStableTetradMatrix) {          System.out.println("%%%%%%%%%% WARNING %%%%%%%% not a stable coefficient matrix, forcing coefs to [0.15,0.3]");          System.out.println("Made " + (attempt - 1) + " attempts to get stable matrix.");          sim.setCoefRange(0.15,0.3);          dataSet=sim.simulateDataFisher(params.getSampleSize());        } else         System.out.println("Coefficient matrix is stable.");      }    } else     if (params.getDataType() == ComparisonParameters.DataType.Discrete) {      List<Node> nodes=new ArrayList<>();      for (int i=0; i < params.getNumVars(); i++) {        nodes.add(new DiscreteVariable("X" + (i + 1),3));      }      trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);      if (params.getDataType() == null) {        throw new IllegalArgumentException("Data type not set or inferred.");      }      if (params.getSampleSize() == -1) {        throw new IllegalArgumentException("Sample size not set.");      }      int[] tiers=new int[nodes.size()];      for (int i=0; i < nodes.size(); i++) {        tiers[i]=i;      }      BayesPm pm=new BayesPm(trueDag,3,3);      MlBayesIm im=new MlBayesIm(pm,MlBayesIm.RANDOM);      dataSet=im.simulateData(params.getSampleSize(),false,tiers);    } else {      throw new IllegalArgumentException("Unrecognized data type.");    }    if (dataSet == null) {      throw new IllegalArgumentException("No data set.");    }  }  if (params.getIndependenceTest() == ComparisonParameters.IndependenceTestType.FisherZ) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Continuous) {      throw new IllegalArgumentException("Data type previously set to something other than continuous.");    }    if (Double.isNaN(params.getAlpha())) {      throw new IllegalArgumentException("Alpha not set.");    }    test=new IndTestFisherZ(dataSet,params.getAlpha());    params.setDataType(ComparisonParameters.DataType.Continuous);  } else   if (params.getIndependenceTest() == ComparisonParameters.IndependenceTestType.ChiSquare) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Discrete) {      throw new IllegalArgumentException("Data type previously set to something other than discrete.");    }    if (Double.isNaN(params.getAlpha())) {      throw new IllegalArgumentException("Alpha not set.");    }    test=new IndTestChiSquare(dataSet,params.getAlpha());    params.setDataType(ComparisonParameters.DataType.Discrete);  }  if (params.getScore() == ComparisonParameters.ScoreType.SemBic) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Continuous) {      throw new IllegalArgumentException("Data type previously set to something other than continuous.");    }    if (Double.isNaN(params.getPenaltyDiscount())) {      throw new IllegalArgumentException("Penalty discount not set.");    }    SemBicScore semBicScore=new SemBicScore(new CovarianceMatrixOnTheFly(dataSet));    semBicScore.setPenaltyDiscount(params.getPenaltyDiscount());    score=semBicScore;    params.setDataType(ComparisonParameters.DataType.Continuous);  } else   if (params.getScore() == ComparisonParameters.ScoreType.BDeu) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Discrete) {      throw new IllegalArgumentException("Data type previously set to something other than discrete.");    }    if (Double.isNaN(params.getSamplePrior())) {      throw new IllegalArgumentException("Sample prior not set.");    }    if (Double.isNaN(params.getStructurePrior())) {      throw new IllegalArgumentException("Structure prior not set.");    }    score=new BDeuScore(dataSet);    ((BDeuScore)score).setSamplePrior(params.getSamplePrior());    ((BDeuScore)score).setStructurePrior(params.getStructurePrior());    params.setDataType(ComparisonParameters.DataType.Discrete);    params.setDataType(ComparisonParameters.DataType.Discrete);  }  if (params.getAlgorithm() == null) {    throw new IllegalArgumentException("Algorithm not set.");  }  long time1=System.currentTimeMillis();  if (params.getAlgorithm() == ComparisonParameters.Algorithm.PC) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Pc search=new Pc(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.CPC) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Cpc search=new Cpc(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCLocal) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    PcLocal search=new PcLocal(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCMax) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    PcMax search=new PcMax(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.FGS) {    if (score == null)     throw new IllegalArgumentException("Score not set.");    Fgs search=new Fgs(score);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.FCI) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Fci search=new Fci(test);    result.setResultGraph(search.search());    result.setCorrectResult(new DagToPag(trueDag).convert());  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.GFCI) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    GFci search=new GFci(test,score);    result.setResultGraph(search.search());    result.setCorrectResult(new DagToPag(trueDag).convert());  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.TsFCI) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    TsFci search=new TsFci(test);    IKnowledge knowledge=getKnowledge(trueDag);    search.setKnowledge(knowledge);    result.setResultGraph(search.search());    result.setCorrectResult(new TsDagToPag(trueDag).convert());  } else {    throw new IllegalArgumentException("Unrecognized algorithm.");  }  long time2=System.currentTimeMillis();  long elapsed=time2 - time1;  result.setElapsed(elapsed);  result.setTrueDag(trueDag);  return result;}  }
class C{  public VwapItem(RegularTimePeriod period,BigDecimal vwapPrice){  super(period,new Vwap(vwapPrice));}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  private void updateSharedPreferencesEntry(int notificationId,boolean remove){  Set<String> notificationIds=new HashSet<String>(mSharedPreferences.getStringSet(MEDIA_NOTIFICATION_IDS,new HashSet<String>()));  if (remove && !notificationIds.isEmpty() && notificationIds.contains(String.valueOf(notificationId))) {    notificationIds.remove(String.valueOf(notificationId));  } else   if (!remove) {    notificationIds.add(String.valueOf(notificationId));  }  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();  sharedPreferenceEditor.putStringSet(MEDIA_NOTIFICATION_IDS,notificationIds);  sharedPreferenceEditor.apply();}  }
class C{  public static void picture(double x,double y,String s,double w,double h){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  if (w < 0)   throw new IllegalArgumentException("width is negative: " + w);  if (h < 0)   throw new IllegalArgumentException("height is negative: " + h);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtils.isEquals(actual,expected);}  }
class C{  @Override public int compareTo(Distributable other){  int compareResult=0;  double seg1=Double.parseDouble(segmentId);  double seg2=Double.parseDouble(((TableBlockInfo)other).segmentId);  if (seg1 - seg2 < 0) {    return -1;  }  if (seg1 - seg2 > 0) {    return 1;  }  if (CarbonTablePath.isCarbonDataFile(filePath)) {    int firstTaskId=Integer.parseInt(DataFileUtil.getTaskNo(filePath));    int otherTaskId=Integer.parseInt(DataFileUtil.getTaskNo(((TableBlockInfo)other).filePath));    if (firstTaskId != otherTaskId) {      return firstTaskId - otherTaskId;    }    int firstPartNo=Integer.parseInt(DataFileUtil.getPartNo(filePath));    int SecondPartNo=Integer.parseInt(DataFileUtil.getPartNo(((TableBlockInfo)other).filePath));    compareResult=firstPartNo - SecondPartNo;  } else {    compareResult=filePath.compareTo(((TableBlockInfo)other).getFilePath());  }  if (compareResult != 0) {    return compareResult;  }  if (blockOffset + blockLength < ((TableBlockInfo)other).blockOffset + ((TableBlockInfo)other).blockLength) {    return -1;  } else   if (blockOffset + blockLength > ((TableBlockInfo)other).blockOffset + ((TableBlockInfo)other).blockLength) {    return 1;  }  return 0;}  }
class C{  @AfterMethod(alwaysRun=true) public void doAfterMethod(ITestContext tc,ITestResult tr,Method m) throws Exception {  runningTick=0;  gondolaRc.stop();  if (tr.getStatus() != ITestResult.SUCCESS) {    Throwable t=tr.getThrowable();    if (t != null) {      logger.error("Test case failed.\n\n" + t.getMessage(),t);    }  }  if (exceptionInAnotherThread != null) {    logger.error("Test case failed.\n\n" + exceptionInAnotherThread.getMessage(),exceptionInAnotherThread);    tr.setStatus(ITestResult.FAILURE);  }}  }
class C{  private CnATreeElement loadElementWithChildren(CnATreeElement element) throws CommandException {  RetrieveInfo ri=new RetrieveInfo();  ri.setChildren(true).setChildrenProperties(true);  if (cache.getCachedObject(element) == null) {    ri.setProperties(true);    if (LOG.isDebugEnabled()) {      LOG.debug("Loading parent and children from database, parent uuid: " + element.getUuid());    }  } else   if (LOG.isDebugEnabled()) {    LOG.debug("Loading children from database, parent uuid: " + element.getUuid());  }  LoadTreeItem command=new LoadTreeItem(element.getUuid(),ri,ElementFilter.getConvertToMap(getParameterList()));  command=getCommandService().executeCommand(command);  CnATreeElement elementWithChildren=command.getElement();  CacheObject cacheObject=addChildrenToCache(elementWithChildren,command.getHasChildrenMap());  return cacheObject.getElement();}  }
class C{  public static String arrayAsString(IPrimitiveArray charArray,int offset,int count,int limit){  if (charArray.getType() != IObject.Type.CHAR)   return null;  int length=charArray.getLength();  int contentToRead=count <= limit ? count : limit;  if (contentToRead > length - offset)   contentToRead=length - offset;  char[] value;  if (offset == 0 && length == contentToRead) {    value=(char[])charArray.getValueArray();  } else {    value=(char[])charArray.getValueArray(offset,contentToRead);  }  if (value == null)   return null;  StringBuilder result=new StringBuilder(value.length);  for (int ii=0; ii < value.length; ii++) {    char val=value[ii];    if (val >= 32 && val < 127) {      result.append(val);    } else {      result.append("\\u").append(String.format("%04x",0xFFFF & val));    }  }  if (limit < count)   result.append("...");  return result.toString();}  }
class C{  protected void dropSequences(){  processSequenceDefinitions(false,false,false);}  }
class C{  public MutablePeriod(long startInstant,long endInstant,PeriodType type,Chronology chrono){  super(startInstant,endInstant,type,chrono);}  }
class C{  public static DeathmatchState createFromQuestString(final String questString){  final DeathmatchState deathmatchState=new DeathmatchState();  final String[] tokens=(questString + ";0;0;0").split(";");  deathmatchState.lifecycleState=DeathmatchLifecycle.getFromQuestStateString(tokens[0]);  deathmatchState.level=Integer.parseInt(tokens[1]);  deathmatchState.date=Long.parseLong(tokens[2]);  deathmatchState.points=Integer.parseInt(tokens[3]);  return deathmatchState;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  @Override public void process(Map<K,V> tuple){  if (doemit) {    allafter.emit(cloneTuple(tuple));    return;  }  V v=tuple.get(getKey());  if (v == null) {    return;  }  if (compareValue(v.doubleValue())) {    doemit=true;    allafter.emit(cloneTuple(tuple));  }}  }
class C{  @Override public boolean reset(){  return this.reset(true);}  }
class C{  AlertImpl(org.apache.geode.internal.admin.Alert alert){  this.alert=alert;  GemFireVM vm=alert.getGemFireVM();  this.systemMember=vm == null ? null : findSystemMember(vm,false);  if (this.systemMember == null) {    InternalDistributedMember sender=alert.getSender();    if (sender != null) {      try {        this.systemMember=AdminDistributedSystemImpl.this.createSystemMember(sender);      } catch (      AdminException e) {        this.systemMember=null;      }    }  }}  }
class C{  synchronized void cleanup(){  mLogRecVector.clear();}  }
class C{  public boolean isSymmetric(){  int nr=A.length, nc=A[0].length;  if (nr != nc) {    return false;  }  for (int i=0; i < nc; i++) {    for (int j=0; j < i; j++) {      if (A[i][j] != A[j][i]) {        return false;      }    }  }  return true;}  }
class C{  private KeyPair createKeyPair() throws NoSuchAlgorithmException {  final KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");  final SecureRandom random=SecureRandom.getInstance("SHA1PRNG");  random.setSeed(Long.toString(System.currentTimeMillis()).getBytes());  keyGen.initialize(2048,random);  final KeyPair keypair=keyGen.generateKeyPair();  return keypair;}  }
class C{  public synchronized void shutdown(boolean immediate){  try {    taskGroup.stop(immediate);  } catch (  InterruptedException e) {    logger.warn("Stage shutdown was interrupted");  }}  }
class C{  @Override public void focusLost(FocusEvent event){  if (event.getSource() == this.angleOffset) {    validateAngleOffset();  } else   if (event.getSource() == this.manualTickUnit) {    validateTickUnit();  }}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(short[] src,int srcIdx,short[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx >= (dstIdx + BYTES_IN_ADDRESS / BYTES_IN_SHORT)) && SHORT_BULK_COPY_SUPPORTED) {      if (NEEDS_SHORT_ASTORE_BARRIER || NEEDS_SHORT_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_SHORT);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_SHORT);        Barriers.shortBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_SHORT);      } else {        Memory.arraycopy16Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TimeLock'";  db.execSQL(sql);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ABSTRACT___ABSTRACT_1:    setAbstract_1((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void observeAutonomous(){  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramAutonomous();}  }
class C{  public static <T>T eachLine(InputStream stream,String charset,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(stream,charset,1,closure);}  }
class C{  public void addMillis(int millis){  super.addField(DurationFieldType.millis(),millis);}  }
class C{  protected void initIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("initIntensity(" + intensity + ")");  }}  }
class C{  public static void bincellOp(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret,BinaryOperator op) throws DMLRuntimeException {  if (op.sparseSafe || isSparseSafeDivide(op,m2))   safeBinary(m1,m2,ret,op); else   unsafeBinary(m1,m2,ret,op);  if (ret.isEmptyBlock(false))   ret.examSparsity();}  }
class C{  public SimpleSimulatedSensor(double initialValue,double deltaFactor,Range<Double> range){  if (range != null && !range.contains(initialValue))   throw new IllegalArgumentException("initialValue");  if (deltaFactor <= 0.0)   throw new IllegalArgumentException("deltaFactor");  this.currentValue=initialValue;  this.deltaFactor=deltaFactor;  this.range=range;  setNumberFractionalDigits(1);}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public boolean isSwitchHandshakeComplete(){  if (this.state.channelHandshakeComplete) {    return connection.getListener().isSwitchHandshakeComplete(connection);  } else {    return false;  }}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  public boolean isEnabled(){  return _state.get().isEnabled();}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  models.put("book",catalog.getBook(id));  return "book.xhtml";}  }
class C{  public PasswordFieldSmartTableCell(String text,int textPosition){  this.passwordField=new JPasswordField(text);  this.passwordField.addFocusListener(this.fl);  this.passwordField.setScrollOffset(2);  this.textJL=new JLabel(text);  this.panel=new JPanel(new FlowLayout(textPosition));  this.panel.add(this.textJL);}  }
class C{  @Override public void upgrade(Object protocol){  Objects.requireNonNull(protocol);  if (protocol instanceof ServiceWebSocket) {    ServiceWebSocket<?,?> webSocket=(ServiceWebSocket<?,?>)protocol;    upgradeWebSocket(webSocket);  } else {    throw new IllegalArgumentException(protocol.toString());  }}  }
class C{  private void dumpMessage(){  if (m_msg == null)   return;  try {    Enumeration<?> e=m_msg.getAllHeaderLines();    while (e.hasMoreElements())     log.fine("- " + e.nextElement());  } catch (  MessagingException ex) {    log.log(Level.WARNING,m_msg.toString(),ex);  }}  }
class C{  private void addSourceAnalysisWizards(IPageLayout layout){  for (  SourcePlugin sourcePlugin : SourcePluginRegistry.getInstances()) {    for (    String newAnalysisId : sourcePlugin.getNewAnalysisIds()) {      layout.addNewWizardShortcut(newAnalysisId);    }  }}  }
class C{  public DiskAccessException(String msg,Throwable cause,DiskStore ds){  super((ds != null ? "For DiskStore: " + ds.getName() + ": " : "") + msg,cause);}  }
class C{  public void showWithMargin(int margin){  LayoutParams params=getLayoutParams();switch (getGravity()) {case Gravity.BOTTOM:    params.bottomMargin=margin;  break;case Gravity.TOP:params.topMargin=margin;break;case Gravity.LEFT:params.leftMargin=margin;break;case Gravity.RIGHT:params.rightMargin=margin;break;}show();}  }
class C{  public void addPair(String var,double[] val){  map.put(var,ValueFactory.create(val));  cachedHash=0;}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) > 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  protected SVG12OMDocument(){}  }
class C{  public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  public int activeEchoBreakpointCount(){  return activeEchoBreakpoints.size();}  }
class C{  public static void test_diff_callStaticMethod(){  assertSame("frotz",Target2.frotz());}  }
class C{  private Structure(){}  }
class C{  public float dotProduct(DenseVector df){  float res=0.0f;  for (int i=0; i < Math.min(size,df.getLength()); i++) {    res+=u[i] * df.u[i];  }  return res;}  }
class C{  protected boolean isDefaultServerEnabled(final Cache cache){  return (cache.getCacheServers().isEmpty() && !isDisableDefaultServer());}  }
class C{  @Override public void updateShort(int columnIndex,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + columnIndex + ", (short) "+ x+ ");");    }    update(columnIndex,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int compareTo(final Justification o){  final int len=ivs.length > o.ivs.length ? ivs.length : o.ivs.length;  for (int i=0; i < len; i++) {    if (i >= ivs.length) {      return -1;    } else     if (i >= o.ivs.length) {      return 1;    }    int ret=IVUtility.compare(ivs[i],o.ivs[i]);    if (ret != 0)     return ret;  }  assert ivs.length == o.ivs.length;  return 0;}  }
class C{  public QueryTask waitForQuery(QueryTask query,Predicate<QueryTask> predicate,long waitIterationCount,long waitIterationSleep) throws Throwable {  return ServiceHostUtils.waitForQuery(this,REFERRER,query,predicate,waitIterationCount,waitIterationSleep);}  }
class C{  public String Frie_Value(String value){  if (value == null || value.length() == 0)   return "";  String retValue=value;  String SQL="SELECT FRIE_Value(FRIE_Name(?)) FROM DUAL";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setString(1,value);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     retValue=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }  return retValue;}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.893 -0500",hash_original_method="8D3B8F5535B73CDDF9BF8D27D7CC497B",hash_generated_method="8D3B8F5535B73CDDF9BF8D27D7CC497B") void _setWantWill(int option){  _options[option]|=_REQUESTED_WILL_MASK;}  }
class C{  public boolean matches(HttpServletRequest request){  Iterator itr=rules.iterator();  boolean matches=true;  while (itr.hasNext() && matches) {    Rule rule=(Rule)itr.next();    matches=rule.matches(request);  }  return matches;}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  ScriptEngine scriptEngine=getScriptEngine(context.getView());  Object responseObject;  try {    InputStream inputStream=context.getRequest().getServletContext().getResourceAsStream(resolveView(context));    InputStreamReader reader=new InputStreamReader(inputStream);    Bindings bindings=scriptEngine.createBindings();    bindings.put("models",context.getModels());    responseObject=scriptEngine.eval(reader,bindings);  } catch (  ScriptException exception) {    throw new ViewEngineException("Unable to execute script",exception);  }  try {    context.getResponse().getWriter().print(responseObject.toString());  } catch (  IOException exception) {    throw new ViewEngineException("Unable to write response",exception);  }}  }
class C{  private String parseColor(String color,TimedTextObject tto){  String value="";  String[] values;  if (color.startsWith("#")) {    if (color.length() == 7)     value=color.substring(1) + "ff"; else     if (color.length() == 9)     value=color.substring(1); else {      value="ffffffff";      tto.warnings+="Unrecoginzed format: " + color + "\n\n";    }  } else   if (color.startsWith("rgb")) {    boolean alpha=false;    if (color.startsWith("rgba"))     alpha=true;    try {      values=color.split("\\(")[1].split(",");      int r, g, b, a=255;      r=Integer.parseInt(values[0]);      g=Integer.parseInt(values[1]);      b=Integer.parseInt(values[2].substring(0,2));      if (alpha)       a=Integer.parseInt(values[3].substring(0,2));      values[0]=Integer.toHexString(r);      values[1]=Integer.toHexString(g);      values[2]=Integer.toHexString(b);      if (alpha)       values[2]=Integer.toHexString(a);      for (int i=0; i < values.length; i++) {        if (values[i].length() < 2)         values[i]="0" + values[i];        value+=values[i];      }      if (!alpha)       value+="ff";    } catch (    Exception e) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  } else {    value=Style.getRGBValue("name",color);    if (value == null || value.isEmpty()) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  }  return value;}  }
class C{  public void breakCodeOrder(BasicBlock bb1,BasicBlock bb2){  if (IR.SANITY_CHECK)   VM._assert(bb1.next == bb2);  if (IR.SANITY_CHECK)   VM._assert(bb2.prev == bb1);  bb1.next=null;  bb2.prev=null;}  }
class C{  public String toString(){  return "null";}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CODE;case 2:  return TYPE;case 3:return MSG;case 4:return CONFIG;case 5:return GUI;default :return null;}}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public synchronized Boolean matches(Vertex vertex,Map<Vertex,Vertex> variables){  if (this == vertex) {    return Boolean.TRUE;  }  if (hasData() && vertex.hasData() && (this.data instanceof String)&& (vertex.getData() instanceof String)) {    if (((String)this.data).equalsIgnoreCase((String)vertex.getData())) {      return Boolean.TRUE;    }  }  Vertex variable;  Vertex match;  if (isVariable() && vertex.isVariable()) {    return Boolean.FALSE;  }  if (instanceOf(Primitive.ARRAY) || vertex.instanceOf(Primitive.ARRAY)) {    Vertex list=this;    Vertex item=vertex;    if (vertex.instanceOf(Primitive.ARRAY)) {      list=vertex;      item=this;    }    Collection<Relationship> elements=list.orderedRelationships(Primitive.ELEMENT);    if (elements != null) {      for (      Relationship element : elements) {        if (element.getTarget().matches(item,variables) == Boolean.TRUE) {          return Boolean.TRUE;        }      }    }  }  if (instanceOf(Primitive.LIST) || vertex.instanceOf(Primitive.LIST)) {    Vertex list=this;    Vertex item=vertex;    if (vertex.instanceOf(Primitive.LIST)) {      list=vertex;      item=this;    }    Collection<Relationship> elements=list.orderedRelationships(Primitive.SEQUENCE);    if (elements != null) {      for (      Relationship element : elements) {        if (element.getTarget().matches(item,variables) == Boolean.TRUE) {          return Boolean.TRUE;        }      }    }  }  if (isVariable()) {    variable=(Vertex)(Object)this;    match=vertex;  } else   if (vertex.isVariable()) {    variable=vertex;    match=(Vertex)(Object)this;  } else {    if (instanceOf(Primitive.PATTERN)) {      return Language.evaluatePattern(this,vertex,Primitive.WILDCARD,new HashMap<Vertex,Vertex>(),this.network);    } else     if (vertex.instanceOf(Primitive.PATTERN)) {      return Language.evaluatePattern(vertex,this,Primitive.WILDCARD,new HashMap<Vertex,Vertex>(),this.network);    }    if (isPrimitive() && hasRelationship(Primitive.WORD,vertex)) {      return Boolean.TRUE;    }    return null;  }  if (variables.containsKey(variable)) {    if (variables.get(variable) == match) {      return Boolean.TRUE;    }  }  this.network.getBot().log(variable," checking match",Level.FINEST,match);  boolean wasInclude=false;  for (Iterator<Relationship> iterator=variable.allRelationships(); iterator.hasNext(); ) {    Relationship relationship=iterator.next();    boolean inverse=relationship.isInverse();    if (relationship.getTarget().is(Primitive.VARIABLE) || relationship.getType().is(Primitive.COMMENT)) {      continue;    }    if (relationship.getType().is(Primitive.EQUALS)) {      if (relationship.getTarget().equals(match)) {        if (inverse) {          return Boolean.FALSE;        }        variables.put(variable,match);        variables.put(match,variable);        return Boolean.TRUE;      }      if (!inverse) {        wasInclude=true;      }      continue;    }    Vertex target=relationship.getTarget();    Vertex type=relationship.getType();    if (!type.isVariable() && !target.isVariable()) {      if (match.hasRelationship(type,target)) {        if (inverse) {          return Boolean.FALSE;        } else {          continue;        }      }    } else     if (type.isVariable()) {      boolean found=false;      for (      Vertex typeMatch : match.getRelationships().keySet()) {        if (type.matches(typeMatch,variables) == Boolean.TRUE) {          if (target.isVariable()) {            found=matchesTarget(match,typeMatch,target,variables);            if (found) {              break;            }          } else {            if (match.hasRelationship(typeMatch,target)) {              found=true;              break;            }          }          break;        }      }      if (!inverse && found) {        continue;      } else       if (inverse && found) {        this.network.getBot().log(variable," does not match",Level.FINEST,match);        return Boolean.FALSE;      } else       if (inverse) {        this.network.getBot().log(variable," does not match",Level.FINEST,match);      }    } else     if (target.isVariable()) {      boolean found=matchesTarget(match,type,target,variables);      if (!inverse && found) {        continue;      } else       if (inverse && found) {        this.network.getBot().log(variable," does not match",Level.FINEST,match);        return Boolean.FALSE;      } else       if (inverse) {        this.network.getBot().log(variable," does not match",Level.FINEST,match);      }    }    if (!inverse) {      this.network.getBot().log(variable," does not match",Level.FINEST,match);      return null;    }  }  if (wasInclude) {    this.network.getBot().log(variable," does not match",Level.FINEST,match);    return Boolean.FALSE;  }  this.network.getBot().log(variable," matches",Level.FINER,match);  variables.put(variable,match);  if (variable.hasName()) {    ((Map)variables).put(variable.getName(),match);  }  variables.put(match,variable);  return Boolean.TRUE;}  }
class C{  public ModifiableHyperBoundingBox(double[] min,double[] max){  if (min.length != max.length) {    throw new IllegalArgumentException("min/max need same dimensionality");  }  this.min=min;  this.max=max;}  }
class C{  public final void testHashCode01(){  ECPoint f=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());  hc=ECPoint.POINT_INFINITY.hashCode();  assertTrue(hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode());}  }
class C{  public DeviceAutomator launchApp(String packageName,long timeout){  return launchApp(getContext().getPackageManager().getLaunchIntentForPackage(packageName),timeout);}  }
class C{  public double distance(final MutableDouble2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  Handler(SchemaReceiverImpl sr){  this.sr=sr;  this.eh=sr.getProperties().get(ValidateProperty.ERROR_HANDLER);  this.ceh=new CountingErrorHandler(this.eh);  this.resolver=ResolverFactory.createResolver(sr.getProperties());}  }
class C{  private void readReference(int AD_Reference_ID){  m_values=new HashMap<String,String>();  String SQL;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))   SQL="SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=?"; else   SQL="SELECT l.Value, t.Name FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID" + " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND l.AD_Reference_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setInt(1,AD_Reference_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      String name=rs.getString(2);      m_values.put(value,name);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    logger.log(Level.SEVERE,SQL,e);  }}  }
class C{  @Override public double inverseTransform(double value){  return Math.pow(10,value);}  }
class C{  @Override public boolean click(int x,int y){  return device.click(x,y);}  }
class C{  public ValidationDriver(PropertyMap schemaProperties,PropertyMap instanceProperties,SchemaReader schemaReader){  ErrorHandler seh=schemaProperties.get(ValidateProperty.ERROR_HANDLER);  PropertyMapBuilder builder;  if (seh == null) {    seh=new ErrorHandlerImpl();    builder=new PropertyMapBuilder(schemaProperties);    builder.put(ValidateProperty.ERROR_HANDLER,seh);    this.schemaProperties=builder.toPropertyMap();  } else   this.schemaProperties=schemaProperties;  builder=new PropertyMapBuilder(instanceProperties);  ErrorHandler ieh=instanceProperties.get(ValidateProperty.ERROR_HANDLER);  if (ieh == null)   ieh=seh;  eh=new CountingErrorHandler(ieh);  builder.put(ValidateProperty.ERROR_HANDLER,eh);  this.instanceProperties=builder.toPropertyMap();  this.sr=schemaReader == null ? new AutoSchemaReader() : schemaReader;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  private static INaviFunction prepareFunctionInlining(final JFrame parent,final INaviCodeNode node,final INaviInstruction instruction,final INaviFunction function,final IViewContainer viewContainer){  Preconditions.checkNotNull(parent,"IE00825: Parent argument can not be null");  Preconditions.checkNotNull(viewContainer,"IE00915: View container argument can not be null");  Preconditions.checkNotNull(node,"IE00916: Node argument can't be null");  Preconditions.checkNotNull(instruction,"IE01153: Instruction argument can't be null");  Preconditions.checkNotNull(function,"IE01173: Function argument can't be null");  final int forwarderModuleId=function.getForwardedFunctionModuleId();  final IAddress forwarderAddress=function.getForwardedFunctionAddress();  return getFunctionToInline(parent,viewContainer,function,forwarderModuleId,forwarderAddress);}  }
class C{  public SpeechToText(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public HyperBoundingBox determineAlphaMinMax(HyperBoundingBox interval){  final int dim=vec.getDimensionality();  if (interval.getDimensionality() != dim - 1) {    throw new IllegalArgumentException("Interval needs to have dimensionality d=" + (dim - 1) + ", read: "+ interval.getDimensionality());  }  if (extremumType.equals(ExtremumType.CONSTANT)) {    double[] centroid=SpatialUtil.centroid(interval);    return new HyperBoundingBox(centroid,centroid);  }  double[] alpha_min=new double[dim - 1];  double[] alpha_max=new double[dim - 1];  if (SpatialUtil.contains(interval,alphaExtremum)) {    if (extremumType.equals(ExtremumType.MINIMUM)) {      alpha_min=alphaExtremum;      for (int d=dim - 2; d >= 0; d--) {        alpha_max[d]=determineAlphaMax(d,alpha_max,interval);      }    } else {      alpha_max=alphaExtremum;      for (int d=dim - 2; d >= 0; d--) {        alpha_min[d]=determineAlphaMin(d,alpha_min,interval);      }    }  } else {    for (int d=dim - 2; d >= 0; d--) {      alpha_min[d]=determineAlphaMin(d,alpha_min,interval);      alpha_max[d]=determineAlphaMax(d,alpha_max,interval);    }  }  return new HyperBoundingBox(alpha_min,alpha_max);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Start:    return stateVector[0] == State.main_region_Start;case main_region_End:  return stateVector[0] == State.main_region_End;default :return false;}}  }
class C{  public TranscoderException(String s){  this(s,null);}  }
class C{  public void testDeleteParentRoot() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  igfs.delete(DIR,true);  checkNotExist(igfs,igfsSecondary,DIR,SUBDIR,SUBSUBDIR,FILE);}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  BufferedImage src=new BufferedImage(img.getWidth(null),img.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D g=src.createGraphics();  g.drawImage(img,0,0,null);  g.dispose();  src=src.getSubimage(sx1,sy1,sx2 - sx1,sy2 - sy1);  return drawImage(src,dx1,dy1,dx2 - dx1,dy2 - dy1,observer);}  }
class C{  public boolean unregisterRunnerServer(RunnerServerLocation location) throws RunnerException {  checkStarted();  final String url=location.getUrl();  if (url == null) {    return false;  }  final RemoteRunnerServer runnerService=runnerServers.remove(url);  return runnerService != null && doUnregisterRunners(url);}  }
class C{  public static double blackFormulaStdDevDerivative(@Real double strike,@Real double forward,@StdDev final double stddev,@DiscountFactor final double discount,@Real final double displacement){  QL.require(strike >= 0.0,"strike must be non-negative");  QL.require(forward > 0.0,"forward must be positive");  QL.require(stddev >= 0.0,"blackPrice must be non-negative");  QL.require(discount > 0.0,"discount must be positive");  QL.require(displacement >= 0.0,"displacement must be non-negative");  forward=forward + displacement;  strike=strike + displacement;  final double d1=Math.log(forward / strike) / stddev + .5 * stddev;  final CumulativeNormalDistribution cdf=new CumulativeNormalDistribution();  return discount * forward * cdf.derivative(d1);}  }
class C{  public void appendObject(ObjectContainer object) throws XMLSignatureException {  this.constructionElement.appendChild(object.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public static void print(String message){  if (Options.verbose)   out.print(message);}  }
class C{  public Object opt(int index){  return (index < 0 || index >= length()) ? null : this.myArrayList.get(index);}  }
class C{  @NotNull public TabBuilder selectHandler(@NotNull TabSelectHandler handler){  this.handler=handler;  return this;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MMemo[").append(get_ID()).append("]");  return sb.toString();}  }
class C{  protected void respond(HttpServletResponse resp,int statusCode){  resp.setStatus(statusCode);}  }
class C{  @SuppressWarnings("unused") public GeneratingClassLoader(ClassLoader parent){  super(parent);}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else   if (handlerStatusStack == null) {    isResume=false;    reset(in);    handlerStatusStack=new LinkedList();  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(status);  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(status);if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(status);if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(status);if (!contentHandler.startObjectEntry(key)) return;} else status=S_IN_ERROR;break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else status=S_IN_FINISHED_VALUE;if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(S_IN_PAIR_VALUE);status=S_IN_ARRAY;statusStack.addFirst(status);if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(S_IN_PAIR_VALUE);status=S_IN_OBJECT;statusStack.addFirst(status);if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else status=S_IN_FINISHED_VALUE;if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(status);if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(status);if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);} while (token.type != Yytoken.TYPE_EOF);} catch (IOException|ParseException|RuntimeException|Error ie) {status=S_IN_ERROR;throw ie;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  int findGroupPosition(long groupIdToMatch,int seedGroupPosition){  int count=mExpandableListAdapter.getGroupCount();  if (count == 0) {    return android.widget.AdapterView.INVALID_POSITION;  }  if (groupIdToMatch == android.widget.AdapterView.INVALID_ROW_ID) {    return android.widget.AdapterView.INVALID_POSITION;  }  seedGroupPosition=Math.max(0,seedGroupPosition);  seedGroupPosition=Math.min(count - 1,seedGroupPosition);  long endTime=SystemClock.uptimeMillis() + AdapterView.SYNC_MAX_DURATION_MILLIS;  long rowId;  int first=seedGroupPosition;  int last=seedGroupPosition;  boolean next=false;  boolean hitFirst;  boolean hitLast;  ExpandableListAdapter adapter=getAdapter();  if (adapter == null) {    return android.widget.AdapterView.INVALID_POSITION;  }  while (SystemClock.uptimeMillis() <= endTime) {    rowId=adapter.getGroupId(seedGroupPosition);    if (rowId == groupIdToMatch) {      return seedGroupPosition;    }    hitLast=last == count - 1;    hitFirst=first == 0;    if (hitLast && hitFirst) {      break;    }    if (hitFirst || (next && !hitLast)) {      last++;      seedGroupPosition=last;      next=false;    } else     if (hitLast || (!next && !hitFirst)) {      first--;      seedGroupPosition=first;      next=true;    }  }  return android.widget.AdapterView.INVALID_POSITION;}  }
class C{  @Override public void scrollToBottom(){  if (0 != mAdapter.getCount()) {    mMessageListView.setSelection(mAdapter.getCount() - 1);  }}  }
class C{  public boolean stop() throws Exception {  try {    if (_portPublic != null) {      _portPublic.close();    }  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }  try {    if (_portBartender != null) {      _portBartender.close();    }  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }  return true;}  }
class C{  public static boolean isAccountClass(GenericValue glAccount,String glAccountClassId) throws GenericEntityException {  if (glAccount == null) {    return false;  }  GenericValue glAccountClass=glAccount.getRelatedOne("GlAccountClass",true);  if (glAccountClass == null) {    throw new GenericEntityException("Cannot find GlAccountClass for glAccountId " + glAccount.getString("glAccountId"));  }  return isAccountClassClass(glAccountClass,glAccountClassId);}  }
class C{  public PackedLongIV(final long value){  super(DTE.Extension);  if (value < 0 || value > MAX_POS_LONG_WITH_LEADING_ZERO_BYTE) {    throw new IllegalArgumentException("long value out of range: " + value);  }  this.value=value;}  }
class C{  public BaseParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  private synchronized void encode(String id,Document doc) throws IOException {  assert id.equals(doc.get("docid")) : "id=" + id + " vs docid="+ doc.get("docid");  buffer.writeString(id);  writeNullableString(doc.get("title"));  writeNullableString(doc.get("body"));  writeNullableString(doc.get("marker"));}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static void drawToDot(final String dest,final AnnotatedTypeMirror type){  drawToDot(new File(dest),type);}  }
class C{  public void dispose(){  taggingPanel.getTree().dispose();  taggingPanel.getTree().setSelectionModel(new DefaultTreeSelectionModel());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.076 -0500",hash_original_method="7D5C37EF81BA8B102CA672C27E3E2647",hash_generated_method="D580D2B6997CA0AD3EA3DA28A6D39DD5") private String nextAT() throws IOException {  hasQE=false;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if (pos == chars.length) {    return null;  }  beg=pos;  pos++;  for (; pos < chars.length && chars[pos] != '=' && chars[pos] != ' '; pos++) {  }  if (pos >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  end=pos;  if (chars[pos] == ' ') {    for (; pos < chars.length && chars[pos] != '=' && chars[pos] == ' '; pos++) {    }    if (chars[pos] != '=' || pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }  }  pos++;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if ((end - beg > 4) && (chars[beg + 3] == '.') && (chars[beg] == 'O' || chars[beg] == 'o')&& (chars[beg + 1] == 'I' || chars[beg + 1] == 'i')&& (chars[beg + 2] == 'D' || chars[beg + 2] == 'd')) {    beg+=4;  }  return new String(chars,beg,end - beg);}  }
class C{  private void moveWithinMatchers(PathMatcherTerm matcher,int index){  removeFromMatchers(matcher);  pathMatchers.insert(matcher,index);  pathMatchers.getTable().setSelection(index);}  }
class C{  public void testLongsCompare(){  BytesRef left=new BytesRef(new byte[Long.BYTES]);  BytesRef right=new BytesRef(new byte[Long.BYTES]);  for (int i=0; i < 10000; i++) {    long leftValue=TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE);    NumericUtils.longToSortableBytes(leftValue,left.bytes,left.offset);    long rightValue=TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE);    NumericUtils.longToSortableBytes(rightValue,right.bytes,right.offset);    assertEquals(Integer.signum(Long.compare(leftValue,rightValue)),Integer.signum(left.compareTo(right)));  }}  }
class C{  public Geo3DPoint(String name,double latitude,double longitude){  super(name,TYPE);  GeoUtils.checkLatitude(latitude);  GeoUtils.checkLongitude(longitude);  final GeoPoint point=new GeoPoint(PlanetModel.WGS84,Geo3DUtil.fromDegrees(latitude),Geo3DUtil.fromDegrees(longitude));  fillFieldsData(point.x,point.y,point.z);}  }
class C{  public int namespaceIndex(String namespace,Vector extensions){  for (int i=0; i < extensions.size(); i++) {    if (((ExtensionNamespaceSupport)extensions.get(i)).getNamespace().equals(namespace))     return i;  }  return -1;}  }
class C{  @GwtIncompatible("Predicates.containsPattern") public void testContainsPattern_apply(){  Predicate<CharSequence> isFoobar=Predicates.containsPattern("^Fo.*o.*bar$");  assertTrue(isFoobar.test("Foxyzoabcbar"));  assertFalse(isFoobar.test("Foobarx"));}  }
class C{  public static double distance(double[] radianCoords){  if (radianCoords != null && radianCoords.length >= 4) {    double totalDist=0.0;    int len=radianCoords.length;    double y1=radianCoords[0];    double x1=radianCoords[1];    for (int i=2; i < len - 1; i+=2) {      double y2=radianCoords[i];      double x2=radianCoords[i + 1];      totalDist+=Geo.distance(y1,x1,y2,x2);      y1=y2;      x1=x2;    }    return totalDist;  }  return 0.0;}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  @Nullable private static String extractRoot(URL resourceURL,String resourcePath){  if (!(StringUtil.startsWithChar(resourcePath,'/') || StringUtil.startsWithChar(resourcePath,'\\'))) {    log("precondition failed: " + resourcePath);    return null;  }  String resultPath=null;  String protocol=resourceURL.getProtocol();  if (URLUtil.FILE_PROTOCOL.equals(protocol)) {    String path=resourceURL.getFile();    String testPath=path.replace('\\','/');    String testResourcePath=resourcePath.replace('\\','/');    if (StringUtil.endsWithIgnoreCase(testPath,testResourcePath)) {      resultPath=path.substring(0,path.length() - resourcePath.length());    }  } else   if (URLUtil.JAR_PROTOCOL.equals(protocol)) {    Pair<String,String> paths=URLUtil.splitJarUrl(resourceURL.getFile());    if (paths != null) {      resultPath=paths.first;    }  }  if (resultPath == null) {    log("cannot extract: " + resourcePath + " from "+ resourceURL);    return null;  }  resultPath=StringUtil.trimEnd(resultPath,File.separator);  resultPath=URLUtil.unescapePercentSequences(resultPath);  return resultPath;}  }
class C{  public TimeoutException(Throwable arg0){  super(arg0);}  }
class C{  private void createPlusButton(final int buttonStyle){  this.rightButton=new Button(this,buttonStyle | SWT.RIGHT);  this.rightButton.setFont(this.getFont());  this.rightButton.setBackground(this.getBackground());  this.rightButton.setCursor(this.getCursor());  this.rightButton.setEnabled(this.getEnabled());  this.rightButton.setFont(this.getFont());  this.rightButton.setForeground(this.getForeground());  this.rightButton.setLayoutData(new GridData(GridData.FILL,GridData.FILL,false,false));}  }
class C{  public RemoteDeploymentTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public void testQueueSessionCloseMarksMessageRedelivered() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue("queue-" + getName());  MessageProducer producer=createProducer(session,queue);  producer.send(createTextMessage(session));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  msg.acknowledge();  session.close();}  }
class C{  protected MultistepExprHolder createMultistepExprList(Vector paths){  MultistepExprHolder first=null;  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner eo=(ExpressionOwner)paths.elementAt(i);    if (null == eo)     continue;    LocPathIterator lpi=(LocPathIterator)eo.getExpression();    int numPaths=countSteps(lpi);    if (numPaths > 1) {      if (null == first)       first=new MultistepExprHolder(eo,numPaths,null); else       first=first.addInSortedOrder(eo,numPaths);    }  }  if ((null == first) || (first.getLength() <= 1))   return null; else   return first;}  }
class C{  public void afterLast() throws SQLException {  crsInternal.afterLast();}  }
class C{  public UrlBasedViewResolverRegistration viewClass(Class<?> viewClass){  this.viewResolver.setViewClass(viewClass);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForPeople(getRegex(stack),masky);  } else   return Wizard.getInstance().searchForPeople(getRegex(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.719 -0500",hash_original_method="2B7049D180B166140C32B8D54A96E238",hash_generated_method="E3B492E3EA37500381FA59083A1CD08A") public HDR remove(int index){  return this.hlist.remove(index);}  }
class C{  public DefaultHandler2(){}  }
class C{  public final void parseJc(final String jcShpFileName) throws IOException, RuntimeException {  log.info("creating data structure from Tele Atlas MultiNet junction shape file '" + jcShpFileName + "'...");  Map<Long,JcElement> map=this.data.junctionElements;  for (  SimpleFeature f : ShapeFileReader.getAllFeatures(jcShpFileName)) {    JcElement e=new JcElement();    e.c=new Coordinate((f.getBounds().getMinX() + f.getBounds().getMaxX()) / 2.0,(f.getBounds().getMinY() + f.getBounds().getMaxX()) / 2.0);    e.id=extractJcFeatureIdentification(f);    e.featType=extractJcFeatureType(f);    e.juntype=extractJcJunctionType(f);    if (map.containsKey(e.id)) {      throw new RuntimeException("id=" + e.id + " already exists.");    }    map.put(e.id,e);  }  log.info("=> " + map.size() + " elements parsed.");  log.info("done.");}  }
class C{  public void open(String fileName,boolean readOnly,char[] encryptionKey){  if (file != null) {    return;  }  if (fileName != null) {    FilePathCache.INSTANCE.getScheme();    FilePath p=FilePath.get(fileName);    if (p instanceof FilePathDisk && !fileName.startsWith(p.getScheme() + ":")) {      FilePathNio.class.getName();      fileName="nio:" + fileName;    }  }  this.fileName=fileName;  FilePath f=FilePath.get(fileName);  FilePath parent=f.getParent();  if (parent != null && !parent.exists()) {    throw DataUtils.newIllegalArgumentException("Directory does not exist: {0}",parent);  }  if (f.exists() && !f.canWrite()) {    readOnly=true;  }  this.readOnly=readOnly;  try {    file=f.open(readOnly ? "r" : "rw");    if (encryptionKey != null) {      byte[] key=FilePathEncrypt.getPasswordBytes(encryptionKey);      encryptedFile=file;      file=new FilePathEncrypt.FileEncrypt(fileName,key,file);    }    try {      if (readOnly) {        fileLock=file.tryLock(0,Long.MAX_VALUE,true);      } else {        fileLock=file.tryLock();      }    } catch (    OverlappingFileLockException e) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_LOCKED,"The file is locked: {0}",fileName,e);    }    if (fileLock == null) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_LOCKED,"The file is locked: {0}",fileName);    }    fileSize=file.size();  } catch (  IOException e) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_READING_FAILED,"Could not open file {0}",fileName,e);  }}  }
class C{  public String graph() throws Exception {  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graph(); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot be graphed");}  }
class C{  public void testCsiT(){  withTerminalSized(4,6).enterString("1\r\n2\r\n3\r\nhi\033[2Tyo\r\nA\r\nB").assertLinesAre("    ","    ","1   ","2 yo","A   ","Bi  ");  withTerminalSized(4,6).enterString("1\r\n2\r\n3\r\nhi\033[Tyo\r\nA\r\nB").assertLinesAre("    ","1   ","2   ","3 yo","Ai  ","B   ");}  }
class C{  private void removeListeners(){  final Iterator<CTag> it=m_node.getTagsIterator();  while (it.hasNext()) {    it.next().removeListener(m_listener);  }  m_node.removeListener(m_internalViewNodeListener);  m_node.removeGroupListener(m_internalGroupNodeListener);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (dataset instanceof IntervalCategoryDataset) {    IntervalCategoryDataset d=(IntervalCategoryDataset)dataset;    drawInterval(g2,state,dataArea,plot,domainAxis,rangeAxis,d,row,column);  } else {    super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,pass);  }}  }
class C{  public static Document parseDocument(InputStream documentXml) throws Exception {  return parseDocument(documentXml,true);}  }
class C{  void showAppNotification(){  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  CharSequence from="Joe";  CharSequence message;switch ((new Random().nextInt()) % 3) {case 0:    message="r u hungry?  i am starved";  break;case 1:message="im nearby u";break;default :message="kthx. meet u for dinner. cul8r";break;}PendingIntent contentIntent=PendingIntent.getActivities(this,0,makeMessageIntentStack(this,from,message),PendingIntent.FLAG_CANCEL_CURRENT);String tickerText=getString(R.string.imcoming_message_ticker_text,message);Notification.Builder notifBuilder=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(tickerText).setWhen(System.currentTimeMillis()).setContentTitle(from).setContentText(message).setContentIntent(contentIntent);notifBuilder.setDefaults(Notification.DEFAULT_ALL);nm.notify(R.string.imcoming_message_ticker_text,notifBuilder.build());}  }
class C{  private boolean delegateToSuper(String name){  return !isStrInList(name,exceptionList);}  }
class C{  public JSONContent(Reader content) throws IOException {  this(new JSONParser().parse(content));}  }
class C{  public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  public Hex(final Charset charset){  this.charset=charset;}  }
class C{  public final CC endGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  endGroupY(xy[1]);case 1:endGroupX(xy[0]);}return this;}  }
class C{  @Override public void free() throws SQLException {}  }
class C{  public DelegationHistory extractDelegationHistory(ServerValidatableSamlToken token,AssertionType assertion){  assert token != null : "DelegationParser.extractDelegationHistory() - token must not be null";  assert assertion != null : "DelegationParser.extractDelegationHistory() - assertion must not be null";  return new DelegationHistory(token.getSubject().subjectUpn(),getDelegateList(token.getDelegationChain()),parseCurrentDelegationCount(assertion),token.getExpirationTime());}  }
class C{  int medianInitTimeMicros(){  if (mit != -1) {    return mit;  }  return mit=calculateMedian(initializations);}  }
class C{  public static String bytesToHexString(final byte[] bytes,Character delimiter){  StringBuffer hex=new StringBuffer(bytes.length * (delimiter == null ? 2 : 3));  int nibble1, nibble2;  for (int i=0; i < bytes.length; i++) {    nibble1=(bytes[i] >>> 4) & 0xf;    nibble2=bytes[i] & 0xf;    if (i > 0 && delimiter != null)     hex.append(delimiter.charValue());    hex.append(hexChars[nibble1]);    hex.append(hexChars[nibble2]);  }  return hex.toString();}  }
class C{  protected Converter createConverter(FaceletContext ctx) throws FacesException, ELException, FaceletException {  return ctx.getFacesContext().getApplication().createConverter(DateTimeConverter.CONVERTER_ID);}  }
class C{  private static void buildNameLine(final INaviFunctionNode node,final ZyLabelContent content,final boolean showFunctionInformation){  final INaviFunction function=node.getFunction();  String informationString="";  if (function.getBasicBlockCount() > 0) {    final StringBuilder builder=new StringBuilder();    builder.append(" (");    builder.append(function.getBasicBlockCount());    builder.append(" basic block");    if (function.getBasicBlockCount() > 1) {      builder.append('s');    }    if (function.getEdgeCount() > 0) {      builder.append(", ");      builder.append(function.getEdgeCount());      builder.append(" edge");      if (function.getEdgeCount() > 1) {        builder.append('s');      }    }    builder.append(')');    informationString=builder.toString();  }  final ZyLineContent nameLine=new ZyLineContent(function.getName() + informationString,NORMAL_FONT,null);  content.addLineContent(nameLine);}  }
class C{  public static long roundUpLong(long x,long blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,exportersTipText(),"none","exporter");  return OptionUtils.toEnumeration(result);}  }
class C{  public static boolean isInitiatorInUse(URI initId,DbClient dbClient){  if (initId != null) {    List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"initiators",initId.toString()));    return (exportGroups != null && !exportGroups.isEmpty());  }  return false;}  }
class C{  public final void handleMessage(Json message){}  }
class C{  public ErrorResponseDeserializerUnion(final int status,final Object body,final DeserializationContext context){  this.status=status;  this.body=body;  this.context=context;}  }
class C{  public boolean hasReturnYTD(){  return getReturnYTD() != null;}  }
class C{  private static void handleException(final Window parent,final Exception exception){  final String innerMessage="E00041: " + "Could not install BinExport";  final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not install the BinExport because one of more files could not " + "be copied.",new String[]{"Insufficient rights to write to the IDA Pro directory","Some kind of IO problem occurred"},new String[]{"BinExport was not installed and can not be used to export IDB " + "files to the database. You can try to install BinExport manually by " + "copying the exporters/BinExport directory from your BinNavi installation "+ "to the IDA Pro directory."});  NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);}  }
class C{  public MimeTypeParseException(){  super();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsScrollBarUI();}  }
class C{  private void handleArgumentField(int begin,int end,int argIndex,FieldPosition position,List<FieldContainer> fields){  if (fields != null) {    fields.add(new FieldContainer(begin,end,Field.ARGUMENT,Integer.valueOf(argIndex)));  } else {    if (position != null && position.getFieldAttribute() == Field.ARGUMENT && position.getEndIndex() == 0) {      position.setBeginIndex(begin);      position.setEndIndex(end);    }  }}  }
class C{  public ExceptionHit exceptionDescription(String value){  setString(EXCEPTION_DESCRIPTION,value);  return this;}  }
class C{  private void addMarker(){  WaypointCreationRequest waypointCreationRequest=new WaypointCreationRequest(WaypointType.WAYPOINT,false,waypointName.getText().toString(),waypointMarkerType.getText().toString(),waypointDescription.getText().toString(),null,null);  TrackRecordingServiceConnectionUtils.addMarker(this,trackRecordingServiceConnection,waypointCreationRequest);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.501 -0500",hash_original_method="A1AEC8C81078600BF66207F442C7D632",hash_generated_method="7E0FF3D59263946E3DA08FAE6D77851D") private void handleIccFull(){  Intent intent=new Intent(Intents.SIM_FULL_ACTION);  mWakeLock.acquire(WAKE_LOCK_TIMEOUT);  mContext.sendBroadcast(intent,SMSDispatcher.RECEIVE_SMS_PERMISSION);}  }
class C{  public Vector3d mulProject(Matrix4dc mat){  return mulProject(mat,this);}  }
class C{  public ViewRootExtension(){}  }
class C{  private JNANatives(){}  }
class C{  public byte[] calculateChecksum(byte[] data,int size) throws KrbCryptoException {  MessageDigest md5;  byte[] result=null;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  Exception e) {    throw new KrbCryptoException("JCE provider may not be installed. " + e.getMessage());  }  try {    md5.update(data);    result=md5.digest();  } catch (  Exception e) {    throw new KrbCryptoException(e.getMessage());  }  return result;}  }
class C{  public final void testSetErrorWithCharSequenceParameter(){  CharSequence error="error";  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.setError(error);  assertEquals(error,abstractValidateableView.getError());  assertTrue(abstractValidateableView.isActivated());  assertTrue(abstractValidateableView.getView().isActivated());  abstractValidateableView.setError(null);  assertFalse(abstractValidateableView.isActivated());  assertFalse(abstractValidateableView.getView().isActivated());}  }
class C{  public Curve25519Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public void enableRealtimeStepsNotify(){  checkConnection();  final List<BLEAction> list=new ArrayList<>();  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.ENABLE_REALTIME_STEPS_NOTIFY));  final BLETask task=new BLETask(list);  queue(list);}  }
class C{  @Override public void initMutator(int id){  super.initMutator(id);  ss.rebind(SS.toSpace());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  Sampler<String> oper=new Sampler<String>();  CountTestSink sink=new CountTestSink<String>();  oper.sample.setSink(sink);  oper.setSamplingPercentage(.1);  String tuple="a";  int numTuples=10000;  oper.beginWindow(0);  for (int i=0; i < numTuples; i++) {    oper.data.process(tuple);  }  oper.endWindow();  int lowerlimit=5;  int upperlimit=15;  int actual=(100 * sink.count) / numTuples;  Assert.assertEquals("number emitted tuples",true,lowerlimit < actual);  Assert.assertEquals("number emitted tuples",true,upperlimit > actual);}  }
class C{  public dd(String value){  addElement(value);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public GeoConvexPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes,final BitSet internalEdgeFlags,final boolean returnEdgeInternal){  super(planetModel);  this.points=pointList;  this.holes=holes;  this.isInternalEdges=internalEdgeFlags;  done(returnEdgeInternal);}  }
class C{  public final void updateTrackPoint(Point p){  if (this.mode != HALF_ANCHORED) {    throw new IllegalStateException("Cannot call the updateTrackPoint " + "method when the edge is " + "not in HALF_ANCHORED mode.");  }  this.mouseTrackPoint=new Point(p);  resetBounds();  repaint();}  }
class C{  private boolean check(){  if (!isBST())   StdOut.println("Symmetric order not consistent");  if (!isAVL())   StdOut.println("AVL property not consistent");  if (!isSizeConsistent())   StdOut.println("Subtree counts not consistent");  if (!isRankConsistent())   StdOut.println("Ranks not consistent");  return isBST() && isAVL() && isSizeConsistent()&& isRankConsistent();}  }
class C{  private void cleaningText(){  int latinCount=0, nonLatinCount=0;  for (int i=0; i < text.length(); ++i) {    char c=text.charAt(i);    if (c <= 'z' && c >= 'A') {      ++latinCount;    } else     if (c >= '\u0300' && UnicodeBlock.of(c) != UnicodeBlock.LATIN_EXTENDED_ADDITIONAL) {      ++nonLatinCount;    }  }  if (latinCount * 2 < nonLatinCount) {    StringBuffer textWithoutLatin=new StringBuffer();    for (int i=0; i < text.length(); ++i) {      char c=text.charAt(i);      if (c > 'z' || c < 'A')       textWithoutLatin.append(c);    }    text=textWithoutLatin;  }}  }
class C{  private void listAvailableServices(BluetoothGatt bluetoothGatt){  Log.d(TAG,"Listing available services:");  for (  BluetoothGattService service : bluetoothGatt.getServices()) {    Log.d(TAG,"Service: " + service.getUuid().toString());    for (    BluetoothGattCharacteristic characteristic : service.getCharacteristics()) {      Log.d(TAG,"|-- Characteristic: " + characteristic.getUuid().toString());    }  }}  }
class C{  public PrivateParent returnTypeTest(){  return this;}  }
class C{  @Override public final void preTearDown() throws Exception {  vm0.invoke(null);  vm1.invoke(null);  closeCacheServer();}  }
class C{  public static void localizeParameterDef(DataService dm,long objKey) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.PARAMETER_DEF_DESC);}  }
class C{  @Override public void recalculateAttributeStatistics(Attribute attribute){  List<Attribute> allAttributes=new ArrayList<Attribute>();  allAttributes.add(attribute);  recalculateAttributeStatistics(allAttributes);}  }
class C{  public static ResultSet searchData(Connection conn,String text,int limit,int offset) throws SQLException {  return search(conn,text,limit,offset,true);}  }
class C{  public ParseException(String message,Object[] params,int line,int column){  super(message);  exception=null;  this.params=params;  lineNumber=line;  columnNumber=column;}  }
class C{  @Override protected void configure(HttpSecurity http) throws Exception {  login(http);  logout(http);  exceptionHandling(http);  rememberMe(http);  csrf(http);  switchUser(http);  authorizeRequests(http);  otherConfigurations(http);}  }
class C{  public void putAll(Map m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0) {    return;  }  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (Iterator i=m.entrySet().iterator(); i.hasNext(); ) {    Map.Entry e=(Map.Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  public static <T>Flux<T> generate(Consumer<SynchronousSink<T>> generator){  Objects.requireNonNull(generator,"generator");  return onAssembly(new FluxGenerate<>(generator));}  }
class C{  public void update(final Memory mem){  if (mem == null) {    return;  }  ReservoirLongsSketch rls=ReservoirLongsSketch.getInstance(mem);  final int maxK=ReservoirSize.decodeValue(encodedMaxK_);  rls=(rls.getK() <= maxK ? rls : rls.downsampledCopy(encodedMaxK_));  if (gadget_ == null) {    gadget_=rls;  } else {    twoWayMergeInternal(rls,true);  }}  }
class C{  private static void printPortfolioEntry(PortfolioEntry portfolioEntry){  System.out.println("\nPortfolio Entry\n---------------");  printBasicEntryDetails(portfolioEntry);  System.out.println("\tFeed Link: " + portfolioEntry.getFeedLink().getHref());  if (portfolioEntry.getFeedLink().getFeed() == null) {    System.out.println("\tNo inlined feed.");  } else {    System.out.println("********** Beginning of inline feed ***************");    printBasicFeedDetails(portfolioEntry.getFeedLink().getFeed());    PositionFeed inlinedFeed=portfolioEntry.getFeedLink().getFeed();    printBasicFeedDetails(inlinedFeed);    for (int i=0; i < inlinedFeed.getEntries().size(); i++) {      PositionEntry positionEntry=inlinedFeed.getEntries().get(i);      printPositionEntry(positionEntry);    }    System.out.println("************* End of inlined feed *****************");  }  PortfolioData portfolioData=portfolioEntry.getPortfolioData();  System.out.println("\tPortfolio Data:");  System.out.println("\t\tCurrency is " + portfolioData.getCurrencyCode());  System.out.printf("\t\tPercent Gain is %.2f%%\n",portfolioData.getGainPercentage() * 100.0);  System.out.println("\t\tReturns:");  System.out.printf("\t\t\tOne week: %.2f%%\n",portfolioData.getReturn1w() * 100.0);  System.out.printf("\t\t\tFour weeks: %.2f%%\n",portfolioData.getReturn4w() * 100.0);  System.out.printf("\t\t\tThree months: %.2f%%\n",portfolioData.getReturn3m() * 100.0);  System.out.printf("\t\t\tYear-to-date: %.2f%%\n",portfolioData.getReturnYTD() * 100.0);  System.out.printf("\t\t\tOne year: %.2f%%\n",portfolioData.getReturn1y() * 100.0);  System.out.printf("\t\t\tThree years: %.2f%%\n",portfolioData.getReturn3y() * 100.0);  System.out.printf("\t\t\tFive years: %.2f%%\n",portfolioData.getReturn5y() * 100.0);  System.out.printf("\t\t\tOverall: %.2f%%\n",portfolioData.getReturnOverall() * 100.0);  if (portfolioData.getCostBasis() == null) {    System.out.println("\t\tCost Basis not specified");  } else {    for (int i=0; i < portfolioData.getCostBasis().getMoney().size(); i++) {      Money m=portfolioData.getCostBasis().getMoney().get(i);      System.out.printf("\t\tThis portfolio cost %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (portfolioData.getDaysGain() == null) {    System.out.println("\t\tDay's Gain not specified");  } else {    for (int i=0; i < portfolioData.getDaysGain().getMoney().size(); i++) {      Money m=portfolioData.getDaysGain().getMoney().get(i);      System.out.printf("\t\tThis portfolio made %.2f %s today.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (portfolioData.getGain() == null) {    System.out.println("\t\tTotal Gain not specified");  } else {    for (int i=0; i < portfolioData.getGain().getMoney().size(); i++) {      Money m=portfolioData.getGain().getMoney().get(i);      System.out.printf("\t\tThis portfolio has a total gain of %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (portfolioData.getMarketValue() == null) {    System.out.println("\t\tMarket Value not specified");  } else {    for (int i=0; i < portfolioData.getMarketValue().getMoney().size(); i++) {      Money m=portfolioData.getMarketValue().getMoney().get(i);      System.out.printf("\t\tThis portfolio is worth %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GEN_EXPR___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:getAnonymous_genExpr_1_1().clear();return;case UmplePackage.GEN_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();return;case UmplePackage.GEN_EXPR___NAME_2:setName_2(NAME_2_EDEFAULT);return;case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:getAnonymous_genExpr_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  @DSComment("Binding data, need modeling to be safe") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.979 -0500",hash_original_method="E6733B2C388AB0385CFE6D2E53E92DC8",hash_generated_method="28E006E392B53873C75752A8259F600D") public void insert(T object,int index){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(index,object);    } else {      mObjects.add(index,object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public MersenneTwister64(int seed){  super(seed);}  }
class C{  public CircularRedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public StopFilterFactory(Map<String,String> args){  super(args);  stopWordFiles=get(args,"words");  format=get(args,"format",(null == stopWordFiles ? null : FORMAT_WORDSET));  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public JBBPOut Long(final long value) throws IOException {  assertNotEnded();  if (this.processCommands) {    _writeLong(value);  }  return this;}  }
class C{  public DateBuilder inTimeZone(TimeZone timezone){  this.tz=timezone;  return this;}  }
class C{  public static int popParameterIntFromBoolean(){  boolean i=parametersBoolean.pop();  if (i)   return K; else   return -K;}  }
class C{  public static void sendAcceptance(InternalDistributedMember recipient,int processorId,DM dm){  Assert.assertTrue(recipient != null,"ManageBucketReplyMessage NULL reply message");  ManageBucketReplyMessage m=new ManageBucketReplyMessage(processorId,true,false);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static int indexOfIgnoreCase(String str,String substring){  return indexOfIgnoreCase(str,substring,Locale.getDefault());}  }
class C{  public static CompletableFuture<ICluster> join(){  return join(ClusterConfig.defaultConfig());}  }
class C{  @Override public void run(){  amIActive=true;  String DEMHeader=null;  String watershedHeader=null;  String outputHeader=null;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      DEMHeader=args[i];    } else     if (i == 1) {      watershedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((DEMHeader == null) || (watershedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    double DEM_noData=DEM.getNoDataValue();    WhiteboxRaster watersheds=new WhiteboxRaster(watershedHeader,"r");    if (watersheds.getNumberRows() != rows || watersheds.getNumberColumns() != cols) {      showFeedback("The input images must be the same dimension, i.e. number of " + "rows and columns.");      return;    }    double watersheds_noData=watersheds.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",DEMHeader,WhiteboxRaster.DataType.FLOAT,DEM_noData,0);    output.setPreferredPalette("spectrum.pal");    int minWatershedVal=9999999;    int maxWatershedVal=-9999999;    double[] watershedData;    updateProgress("Loop 1 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          if (watershedData[col] < minWatershedVal) {            minWatershedVal=(int)watershedData[col];          }          if (watershedData[col] > maxWatershedVal) {            maxWatershedVal=(int)watershedData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3",progress);    }    int numWatersheds=maxWatershedVal - minWatershedVal + 1;    double[][] elevations=new double[3][numWatersheds];    for (i=0; i < numWatersheds; i++) {      elevations[0][i]=9999999;      elevations[1][i]=-9999999;    }    double[] data;    int watershedVal;    updateProgress("Loop 2 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            if (z < elevations[0][watershedVal - minWatershedVal]) {              elevations[0][watershedVal - minWatershedVal]=z;            }            if (z > elevations[1][watershedVal - minWatershedVal]) {              elevations[1][watershedVal - minWatershedVal]=z;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3",progress);    }    for (i=0; i < numWatersheds; i++) {      elevations[2][i]=elevations[1][i] - elevations[0][i];    }    updateProgress("Loop 3 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            i=watershedVal - minWatershedVal;            output.setValue(row,col,(z - elevations[0][i]) / elevations[2][i] * 100);          } else {            output.setValue(row,col,DEM_noData);          }        } else {          output.setValue(row,col,DEM_noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    watersheds.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public SeekableByteChannel newByteChannel(Path obj,Set<? extends OpenOption> options,FileAttribute<?>... attrs) throws IOException {  UnixPath file=getName(obj);  int mode=UnixFileModeAttribute.toUnixMode(UnixFileModeAttribute.ALL_READWRITE,attrs);  String pathToCheck=ds.directory().resolve(file).getPathForPermissionCheck();  ds.readLock().lock();  try {    if (!ds.isOpen())     throw new ClosedDirectoryStreamException();    try {      return UnixChannelFactory.newFileChannel(dfd,file,pathToCheck,options,mode);    } catch (    UnixException x) {      x.rethrowAsIOException(file);      return null;    }  }  finally {    ds.readLock().unlock();  }}  }
class C{  @Override public void removeLifecycleListener(LifecycleListener listener){  this.lifecycle.removeLifecycleListener(listener);}  }
class C{  public static Id parse(final String str){  final Id r=new Id();  r.fromString(str);  return r;}  }
class C{  private void handleExportToSVG(){  FileChooser chooser=new FileChooser();  chooser.setTitle("Export to SVG");  ExtensionFilter filter=new FileChooser.ExtensionFilter("Scalable Vector Graphics (SVG)","svg");  chooser.getExtensionFilters().add(filter);  File file=chooser.showSaveDialog(getScene().getWindow());  if (file != null) {    ExportUtils.writeAsSVG(this.chart,(int)getWidth(),(int)getHeight(),file);  }}  }
class C{  public static Test suite(){  return (new TestSuite(SelectOneValueExpressionHideNoSelectionITCase.class));}  }
class C{  public void addPrimaryKeyField(DatabaseField field,MappingAccessor accessor){  addPrimaryKeyField(field);  m_primaryKeyAccessors.put(field,accessor);}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  public static void execute(Connection con,ExecutablePool pool,String region,EventID eventId,Object callbackArg){  AbstractOp op=new DestroyRegionOpImpl(region,eventId,callbackArg);  pool.executeOn(con,op);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void disconnect(){}  }
class C{  public DirichletBayesImParamsEditor(){}  }
class C{  protected SAXBuilder createBuilder(){  final SAXBuilder builder=new SAXBuilder();  builder.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);  return builder;}  }
class C{  @Override protected void initListeners(){  this.saveBT.setOnClickListener(this);}  }
class C{  public Object read(InputNode node,Class type) throws Exception {  Composite factory=getComposite(type);  Object value=factory.read(node);  if (value != null) {    Class real=value.getClass();    return read(node,real,value);  }  return null;}  }
class C{  private boolean checkMatch(InventoryCrafting p_77573_1_,int p_77573_2_,int p_77573_3_,boolean p_77573_4_){  for (int k=0; k < 5; ++k) {    for (int l=0; l < 5; ++l) {      int i1=k - p_77573_2_;      int j1=l - p_77573_3_;      ItemStack itemstack=null;      if (i1 >= 0 && j1 >= 0 && i1 < this.recipeWidth && j1 < this.recipeHeight) {        if (p_77573_4_) {          itemstack=this.recipeItems[this.recipeWidth - i1 - 1 + j1 * this.recipeWidth];        } else {          itemstack=this.recipeItems[i1 + j1 * this.recipeWidth];        }      }      ItemStack itemstack1=p_77573_1_.getStackInRowAndColumn(k,l);      if (itemstack1 != null || itemstack != null) {        if (itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null) {          return false;        }        if (itemstack.getItem() != itemstack1.getItem()) {          return false;        }        if (itemstack.getItemDamage() != 32767 && itemstack.getItemDamage() != itemstack1.getItemDamage()) {          return false;        }      }    }  }  return true;}  }
class C{  public String render(final String queryId,final PcjMetadata metadata) throws Exception {  checkNotNull(metadata);  final String cardinality=NumberFormat.getInstance().format(metadata.getCardinality());  final SPARQLParser parser=new SPARQLParser();  final SPARQLQueryRenderer renderer=new SPARQLQueryRenderer();  final ParsedQuery pq=parser.parseQuery(metadata.getSparql(),null);  final String prettySparql=renderer.render(pq);  final String[] sparqlLines=StringUtils.split(prettySparql,'\n');  final String[] varOrderLines=new String[metadata.getVarOrders().size()];  int i=0;  for (  final VariableOrder varOrder : metadata.getVarOrders()) {    varOrderLines[i++]=varOrder.toString();  }  final Report.Builder builder=Report.builder();  builder.appendItem(new ReportItem("Query ID",queryId));  builder.appendItem(new ReportItem("Cardinality",cardinality));  builder.appendItem(new ReportItem("Export Variable Orders",varOrderLines));  builder.appendItem(new ReportItem("SPARQL",sparqlLines));  return builder.build().toString();}  }
class C{  protected void openFile(File f){  if (f == null) {    return;  }  if (!f.exists()) {    Debug.output("E00|" + getName() + ": missing file");    return;  }  E00File=f;  if (gui != null) {    label.setText(E00File.getName());  }}  }
class C{  public void minusEquals(double c){  plusEquals(-c);}  }
class C{  public T caseGenericDeclaration(GenericDeclaration object){  return null;}  }
class C{  protected void waitForDownloadOrTimeout(long id) throws TimeoutException, InterruptedException {  waitForDownloadOrTimeout(id,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isSelfIntersectingPoly(double[] polyPoints){  for (int i=0; i < polyPoints.length / 2 - 1; i++) {    for (int j=i + 1; j < polyPoints.length / 2 - 1; j++) {      double lat1=polyPoints[2 * i];      double lon1=polyPoints[2 * i + 1];      double lat2=polyPoints[2 * i + 2];      double lon2=polyPoints[2 * i + 3];      double lat3=polyPoints[2 * j];      double lon3=polyPoints[2 * j + 1];      double lat4=polyPoints[2 * j + 2];      double lon4=polyPoints[2 * j + 3];      if ((lat1 == lat4 && lon1 == lon4) || (lat2 == lat3 && lon2 == lon3))       continue;      if (intersects(lat1,lon1,lat2,lon2,lat3,lon3,lat4,lon4))       return true;    }  }  return false;}  }
class C{  public static NumericJavaFXBidirectionaBinder<Integer> bind(IntegerProperty property){  requireNonNull(property,"property");  return new IntegerJavaFXBidirectionalBinder(property);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.917 -0400",hash_original_method="1CF6DC5DA7BB65AAE6632CB394BB4ED7",hash_generated_method="AAB7FB16372FD91C75BD3F54F1BFA948") @Override public void flush() throws IOException {  if (writer != null) {    writer.flush();  }}  }
class C{  protected void sequence_S_DirectAssignment(ISerializationContext context,S_DirectAssignment semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public T backgroundColor(int color){  if (view != null) {    view.setBackgroundColor(color);  }  return self();}  }
class C{  public void addValue(double data,double given,double weight){  m_Estimators[(int)data].addValue(given,weight);  m_Weights.addValue((int)data,weight);}  }
class C{  @Override public String modelDescription(){  return modelDescription(null);}  }
class C{  public static boolean isContactPairEnabled(){  return contactPairEnabled;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.WINDOWS_OS ? ((SageTVInfraredReceive)stack.getUIMgrSafe().getRouter().getDefaultInputPlugin()).getIRReceivePort() : "";}  }
class C{  public void destruct(@Nullable String spaceName){  spaceName=maskNull(spaceName);  GridOffHeapPartitionedMap map=offheap.remove(spaceName);  if (map != null)   map.destruct();}  }
class C{  public int nextPartNumberMarker(){  return nextPartNumberMarker;}  }
class C{  public HeaderRowNotFoundException(){  super(HEADER_ROW_NOT_FOUND);}  }
class C{  public blink addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static boolean isReilRegister(final ReilOperand operand){  Preconditions.checkNotNull(operand,"Operand argument can not be null");  return com.google.security.zynamics.reil.ReilHelpers.isTemporaryRegister(operand.getNative());}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  protected void updateLayerPanes(LayerHandler layerHandler){  for (  LayerPane pane : getPanes()) {    pane.setLayerHandler(layerHandler);  }}  }
class C{  Method mergeWith(Method other){  if (!nameAndDescriptor().equals(other.nameAndDescriptor())) {    throw new AssertionError("attempt to merge method \"" + other.nameAndDescriptor() + "\" with \""+ nameAndDescriptor());  }  List<ClassDoc> legalExceptions=new ArrayList<ClassDoc>();  collectCompatibleExceptions(other.exceptionTypes,exceptionTypes,legalExceptions);  collectCompatibleExceptions(exceptionTypes,other.exceptionTypes,legalExceptions);  Method merged=clone();  merged.exceptionTypes=legalExceptions.toArray(new ClassDoc[legalExceptions.size()]);  return merged;}  }
class C{  public void connect(String userName,String password,String scn,boolean rowLevel,String seq) throws ExtractorException {  String spawnMessage="1";  String message;  String connectMessage="DEV10:TXID";  if (connected)   throw new OracleExtractException("Already connected");  if (logger.isInfoEnabled()) {    logger.info("Connecting to instance " + instanceName + " on host "+ hostName+ " (port="+ portNumber+ ")");  }  startListener();  try {    listenerSocket=SocketChannel.open(new InetSocketAddress(hostName,portNumber));  } catch (  UnknownHostException e) {    throw new OracleExtractException("IP address could not be determined (" + hostName + ":"+ portNumber+ ")",e);  }catch (  IOException e) {    throw new OracleExtractException("An I/O error occured when creating the socket (" + hostName + ":"+ portNumber+ ")",e);  }  try {    out=new PrintWriter(listenerSocket.socket().getOutputStream(),true);  } catch (  IOException e) {    throw new OracleExtractException("An I/O error occurs when creating the output stream",e);  }  try {    in=listenerSocket.socket().getInputStream();  } catch (  IOException e) {    throw new OracleExtractException("An I/O error occurs when creating the input stream",e);  }  if (logger.isInfoEnabled()) {    logger.info("Connected.");  }  connected=true;  try {    send(Const.MessageControl,spawnMessage);  } catch (  InterruptedException e) {    throw new ExtractorException(e);  }  sleep();  message=apiVersion;  try {    send(Const.MessageVersion,message);  } catch (  OracleExtractException e) {    throw new OracleExtractException("Incompatible C/Java API in Oracle extractor",e);  }catch (  InterruptedException e) {    throw new ExtractorException(e);  }  if (scn != null && scn.length() > 0) {    sleep();    message="scn:" + scn;    try {      send(Const.MessageSetParameter,message);    } catch (    InterruptedException e) {      throw new ExtractorException(e);    }  }  if (rowLevel) {    sleep();    message="row_level:1";    try {      send(Const.MessageSetParameter,message);    } catch (    InterruptedException e) {      throw new ExtractorException(e);    }  }  if (seq != null && seq.length() > 0) {    sleep();    message="seq:" + seq;    try {      send(Const.MessageSetParameter,message);    } catch (    InterruptedException e) {      throw new ExtractorException(e);    }  }  sleep();  connectMessage=instanceName + ":" + hostName+ ":"+ userName+ ":"+ password;  try {    send(Const.MessageConnect,connectMessage);  } catch (  InterruptedException e) {    throw new ExtractorException(e);  }}  }
class C{  public static String patternForStyle(String style,Locale locale){  DateTimeFormatter formatter=createFormatterForStyle(style);  if (locale == null) {    locale=Locale.getDefault();  }  return ((StyleFormatter)formatter.getPrinter()).getPattern(locale);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.153 -0500",hash_original_method="46C74393C5C072B65EB7EF3C911B0780",hash_generated_method="35EB6A5FDB629A957EC21221B837098B") public static Short valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseShort(string,radix));}  }
class C{  private void doFailTask(Class<? extends DataObject> clazz,List<URI> ids,String opId,ServiceCoded serviceCoded){  try {    for (    URI id : ids) {      _dbClient.error(clazz,id,opId,serviceCoded);    }  } catch (  DatabaseException ioe) {    _log.error(ioe.getMessage());  }}  }
class C{  public static void popContext(@Nullable BinaryContext oldCtx){  BINARY_CTX.set(oldCtx);}  }
class C{  public static boolean isPermissionGranted(@NonNull String permission){  return ContextCompat.checkSelfPermission(safeActivity(),permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public SimpleColorMap(){  setLevels(0,1,Color.black,Color.white);}  }
class C{  protected void fireValueChanged(int firstIndex,int lastIndex){  fireValueChanged(firstIndex,lastIndex,getValueIsAdjusting());}  }
class C{  public static short multElem(short x,short y){  if (x == 0 || y == 0) {    return 0;  } else {    return (exps[(logs[x] + logs[y]) % 255]);  }}  }
class C{  public void testLLForIB() throws IOException {  SimilarityBase sim=new IBSimilarity(new DistributionLL(),new LambdaDF(),new Normalization.NoNormalization());  correctnessTestCore(sim,4.178574562072754f);}  }
class C{  public boolean isUpdateRequired(){  return this.updateRequired;}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.util.Date moment){  return filterByDate(datedValues,new java.sql.Timestamp(moment.getTime()),null,null,true);}  }
class C{  @Override public void dispose(){  m_flowComponent.dispose();}  }
class C{  public void reflectiveScan(Object o){  if (o == null)   return;  if (o instanceof JCTree) {    JCTree tree=(JCTree)o;    expect.add(tree);    for (    Field f : getFields(tree)) {      if (TypeBoundKind.class.isAssignableFrom(f.getType())) {        continue;      }      if (JCTree.JCNewArray.class.isAssignableFrom(tree.getClass()) && (f.getName().equals("annotations") || f.getName().equals("dimAnnotations"))) {        continue;      }      try {        reflectiveScan(f.get(tree));      } catch (      IllegalAccessException e) {        error(e.toString());      }    }  } else   if (o instanceof List) {    List<?> list=(List<?>)o;    for (    Object item : list)     reflectiveScan(item);  } else   error("unexpected item: " + o);}  }
class C{  public void addAll(Iterable<? extends Number> values){  for (  Number value : values) {    add(value.doubleValue());  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.guideLinePaint=SerialUtilities.readPaint(stream);  this.guideLineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public void testStructureencryption() throws Exception {  System.out.println("Source: " + sourcedir);  System.out.println("Temp destination: " + testdir.getRoot().getAbsolutePath());  long time=System.currentTimeMillis();  visitAllDirsAndFiles(sourcedir);  System.out.println("Duration: " + (System.currentTimeMillis() - time) + " ms");}  }
class C{  private String generateModuleFactoryOverride(String elementVar){  StringBuilder buf=new StringBuilder(1024);  buf.append("\r\n    /**\r\n");  buf.append("     *  @private\r\n");  buf.append("     *  Create a module factory override so we do not try to use a RichText's\r\n");  buf.append("     *  styles until we have a module factory. The module factory will tell us\r\n");  buf.append("     *  which style manager to use.\r\n");  buf.append("     */\r\n");  buf.append("    override public function set moduleFactory(factory:IFlexModuleFactory):void\r\n");  buf.append("    {\r\n");  buf.append("        super.moduleFactory = factory;\r\n");  buf.append("        ").append(elementVar).append(".regenerateStyleCache(true);\r\n");  buf.append("        ").append(elementVar).append(".styleChanged(null);\r\n");  buf.append("        ").append(elementVar).append(".stylesInitialized();\r\n");  buf.append("        ").append(elementVar).append(".validateProperties();\r\n");  buf.append("        ").append(elementVar).append(".validateSize();\r\n");  buf.append("        ").append(elementVar).append(".setLayoutBoundsSize(NaN, NaN);\r\n");  buf.append("        ").append(elementVar).append(".validateDisplayList();\r\n");  buf.append("        invalidateSize();\r\n");  buf.append("    }\r\n");  return buf.toString();}  }
class C{  private void initComponents(){  lblBlank.setValue(" ");  lblValue=new Label();  lblValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),"Value")));  lblName=new Label();  lblName.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),"Name")));  lblUPC=new Label();  lblUPC.setValue(Msg.translate(Env.getCtx(),"UPC"));  lblSKU=new Label();  lblSKU.setValue(Msg.translate(Env.getCtx(),"SKU"));  lblPriceList=new Label();  lblPriceList.setValue(Msg.getMsg(Env.getCtx(),"PriceListVersion"));  lblProductCategory=new Label();  lblProductCategory.setValue(Msg.translate(Env.getCtx(),"M_Product_Category_ID"));  lblAS=new Label();  lblAS.setValue(Msg.translate(Env.getCtx(),"M_AttributeSet_ID"));  lblASI=new Label();  lblASI.setValue(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"));  lblWarehouse=new Label();  lblWarehouse.setValue(Util.cleanAmp(Msg.getMsg(Env.getCtx(),"Warehouse")));  lblVendor=new Label();  lblVendor.setValue(Msg.translate(Env.getCtx(),"Vendor"));  checkOnlyStock=new Checkbox();  checkOnlyStock.setAttribute("zk_component_ID","Lookup_Criteria_checkOnlyStock");  checkOnlyStock.setText(Msg.getMsg(Env.getCtx(),"OnlyStock"));  checkOnlyStock.setName("OnlyStock");  checkOnlyStock.setTooltiptext(Msg.getMsg(Env.getCtx(),"OnlyStockTip"));  checkOnlyStock.setSelected(false);  checkOnlyStock.addActionListener(this);  checkShowDetail=new Checkbox();  checkShowDetail.setAttribute("zk_component_ID","Lookup_Criteria_checkShowDetail");  checkShowDetail.setText(Msg.getMsg(Env.getCtx(),"ShowDetail"));  checkShowDetail.setName("ShowDetail");  checkShowDetail.setTooltiptext(Msg.getMsg(Env.getCtx(),"ShowAttributeDetails"));  checkShowDetail.setSelected(false);  checkShowDetail.setEnabled(false);  checkShowDetail.addActionListener(this);  checkAND=new Checkbox();  checkAND.setAttribute("zk_component_ID","Lookup_Criteria_checkAND");  checkAND.setText(Msg.getMsg(Env.getCtx(),"SearchAND"));  checkAND.setName("SearchAND");  checkAND.setTooltiptext(Msg.getMsg(Env.getCtx(),"SearchANDInfo"));  checkAND.setSelected(true);  checkAND.addActionListener(this);  m_InfoPAttributeButton.setImage("/images/PAttribute16.png");  m_InfoPAttributeButton.setTooltiptext(Msg.getMsg(Env.getCtx(),"PAttribute"));  m_InfoPAttributeButton.addEventListener(Events.ON_CLICK,this);  fieldValue=new Textbox();  fieldValue.setMaxlength(40);  fieldValue.setAttribute("zk_component_ID","Lookup_Criteria_fieldValue");  fieldValue.addEventListener(Events.ON_CHANGE,this);  fieldName=new Textbox();  fieldName.setMaxlength(40);  fieldName.setAttribute("zk_component_ID","Lookup_Criteria_fieldName");  fieldName.addEventListener(Events.ON_CHANGE,this);  fieldUPC=new Textbox();  fieldUPC.setMaxlength(40);  fieldUPC.setAttribute("zk_component_ID","Lookup_Criteria_fieldUPC");  fieldUPC.addEventListener(Events.ON_CHANGE,this);  fieldSKU=new Textbox();  fieldSKU.setMaxlength(40);  fieldSKU.setAttribute("zk_component_ID","Lookup_Criteria_fieldSKU");  fieldSKU.addEventListener(Events.ON_CHANGE,this);  fieldDescription.setMultiline(true);  fieldDescription.setReadonly(true);  fieldDescription.setAttribute("zk_component_ID","Lookup_Field_Description");  fPriceList_ID=new WTableDirEditor("M_PriceList_Version_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPriceListVersion.Table_Name,MPriceListVersion.COLUMNNAME_M_PriceList_Version_ID),DisplayType.TableDir));  fPriceList_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fPriceList_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_PriceList_Version_ID");  fPriceList_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fPriceList_ID.getComponent().setAttribute("IsDynamic","True");  fPriceList_ID.getComponent().setAttribute("fieldName","fPriceList_ID");  fProductCategory_ID=new WTableDirEditor("M_Product_Category_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MProductCategory.Table_Name,MProductCategory.COLUMNNAME_M_Product_Category_ID),DisplayType.TableDir));  fProductCategory_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fProductCategory_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_ProductCategory_ID");  fProductCategory_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fProductCategory_ID.getComponent().setAttribute("IsDynamic","True");  fProductCategory_ID.getComponent().setAttribute("fieldName","fProductCategory_ID");  fAS_ID=new WTableDirEditor("M_AttributeSet_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MAttributeSet.Table_Name,MAttributeSet.COLUMNNAME_M_AttributeSet_ID),DisplayType.TableDir));  fAS_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fAS_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_PAttributeSet_ID");  fAS_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fAS_ID.getComponent().setAttribute("IsDynamic","False");  fAS_ID.getComponent().setAttribute("fieldName","fAS_ID");  fAS_ID.getComponent().setWidth("200px");  MPAttributeLookup mpaLookup=new MPAttributeLookup(Env.getCtx(),p_WindowNo);  fASI_ID=new WPAttributeEditor(null,false,false,true,p_WindowNo,mpaLookup,true);  fASI_ID.addValueChangeListener(this);  fASI_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_PAttributeSetInstance_ID");  fASI_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fASI_ID.getComponent().setAttribute("IsDynamic","False");  fASI_ID.getComponent().setAttribute("fieldName","fASI_ID");  fASI_ID.getComponent().setWidth("200px");  fWarehouse_ID=new WTableDirEditor("M_Warehouse_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MWarehouse.Table_Name,MWarehouse.COLUMNNAME_M_Warehouse_ID),DisplayType.TableDir));  fWarehouse_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fWarehouse_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_M_Warehouse_ID");  fWarehouse_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fWarehouse_ID.getComponent().setAttribute("IsDynamic","True");  fWarehouse_ID.getComponent().setAttribute("fieldName","fWarehouse_ID");  fVendor_ID.getComponent().getTextbox().setMaxlength(30);  fVendor_ID.setIsSOTrx(true,false);  fVendor_ID.addValueChangeListener(this);  fVendor_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BPartner_ID");  fVendor_ID.getComponent().setAttribute("zk_component_prefix","Lookup_");  fVendor_ID.getComponent().setAttribute("IsDynamic","False");  fVendor_ID.getComponent().setAttribute("fieldName","fVendor_ID");  fVendor_ID.getComponent().setWidth("200px");  m_PAttributeButton=confirmPanel.createButton(ConfirmPanel.A_PATTRIBUTE);  confirmPanel.addComponentsLeft(m_PAttributeButton);  m_PAttributeButton.addActionListener(this);  m_PAttributeButton.setEnabled(false);  fieldPAttributes.setMultiline(true);  fieldPAttributes.setReadonly(true);  fieldPAttributes.setAttribute("zk_component_ID","Lookup_Field_PAAttributes");  initAtpTab();}  }
class C{  public void addAttribute(AttributeInfo info){  if (attribute == null)   attribute=new ArrayList();  AttributeInfo.remove(attribute,info.getName());  attribute.add(info);}  }
class C{  public MockThresholdListener(long threshold){  this.threshold=threshold;}  }
class C{  private Zoneset makeZoneset(CIMInstance zonesetInstance) throws WBEMException {  String name=cimStringProperty(zonesetInstance,"ElementName");  Zoneset zs=new Zoneset(name);  zs.setCimObjectPath(zonesetInstance.getObjectPath());  zs.setInstanceID(cimStringProperty(zonesetInstance,"InstanceID"));  zs.setDescription(cimStringProperty(zonesetInstance,"Description"));  zs.setActive(cimBooleanProperty(zonesetInstance,"Active"));  CloseableIterator<CIMInstance> zns=null;  try {    zns=_client.associatorInstances(((CIMObjectPath)zs.getCimObjectPath()),"CIM_MemberOfCollection","CISCO_Zone",null,null,false,null);    while (zns.hasNext()) {      CIMInstance zn=zns.next();      Zone zone=makeZone(zn);      zs.getZones().add(zone);    }  }  finally {    if (zns != null) {      zns.close();    }  }  return zs;}  }
class C{  private RedirectStream(InputStream inputStream){  this(inputStream,null);}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphDbOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the web graph database to use").create("webgraphdb");  options.addOption(helpOpts);  options.addOption(webGraphDbOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("LinkDumper",options);      return -1;    }    String webGraphDb=line.getOptionValue("webgraphdb");    dumpLinks(new Path(webGraphDb));    return 0;  } catch (  Exception e) {    LOG.error("LinkDumper: " + StringUtils.stringifyException(e));    return -2;  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRANSACTION_ID;default :  return null;}}  }
class C{  private boolean isError(Node that,Message message){  if (errMessage != null && message.getMessage().equals(errMessage)) {    return false;  } else {    return !(message instanceof UsageWarning);  }}  }
class C{  int positionInVariant(){  return mPositionInVariant;}  }
class C{  public T caseTraceCondition_(TraceCondition_ object){  return null;}  }
class C{  public static boolean hasNoWildcards(String pattern){  if (pattern == null)   return true;  for (int pos=0; pos < pattern.length(); pos++) {    char ch=pattern.charAt(pos);    if (ch == '_' || ch == '%') {      return false;    } else     if (ch == '\\' && pos < pattern.length() - 1) {      char nextCh=pattern.charAt(pos + 1);      if (nextCh == '\\' || nextCh == '%' || nextCh == '_') {        pos+=1;      }    }  }  return true;}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public PermImpl(){  _id=ISicresAdminDefsKeys.NULL_ID;  _dest=ISicresAdminDefsKeys.DESTINATION_USER;  _product=ISicresAdminUserDefsKeys.PRODUCT_IDOC;  _perm=ISicresAdminUserDefsKeys.PERMISSION_NONE;}  }
class C{  public static PrivKey loadFromKeyStore(URL keystoreUrl,String password) throws IOException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException, KeyStoreException {  RSAPrivateKey key=CertificateUtils.loadFromKeyStore(keystoreUrl,password);  return new PrivKey(key);}  }
class C{  private void lazyLoad(){  if (_major > 0)   return;  try {    if (_url == null)     throw new IllegalStateException();    try (InputStream is=_url.openStream()){      _major=1;      ByteCodeParser parser=new ByteCodeParser();      parser.setClassLoader(_loader);      parser.setJavaClass(this);      parser.parse(is);    }   } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void writeInt(int i) throws IOException {  out.write(i & 0xFF);  out.write((i >>> 8) & 0xFF);  out.write((i >>> 16) & 0xFF);  out.write((i >>> 24) & 0xFF);  written+=4;}  }
class C{  public RSSFeed(Set<MultiProtocolURL> links,String source){  this(Integer.MAX_VALUE);  String u;  RSSMessage message;  for (  MultiProtocolURL uri : links) {    u=uri.toNormalform(true);    message=new RSSMessage(u,"",u);    message.setAuthor(source);    this.addMessage(message);  }}  }
class C{  public InputStream openRawResource(int id) throws NotFoundException {  TypedValue value;synchronized (mAccessLock) {    value=mTmpValue;    if (value == null) {      value=new TypedValue();    } else {      mTmpValue=null;    }  }  InputStream res=openRawResource(id,value);synchronized (mAccessLock) {    if (mTmpValue == null) {      mTmpValue=value;    }  }  return res;}  }
class C{  public void testNoDataSourceXASupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{DatasourcePropertySet.DATASOURCE}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  configuration.getDataSources().add(ConfigurationFixtureFactory.createXADataSourceConfiguredDataSource().buildDataSource());  try {    configuration.collectUnsupportedDataSourcesAndThrowException();    fail("should have gotten an Exception");  } catch (  CargoException e) {    assertEquals("This configuration does not support XADataSource configured " + "DataSources! JndiName: jdbc/CargoDS",e.getMessage());  }}  }
class C{  public static void displayCopyright(){  System.out.println("Vietnamese Word Segmentation:");  System.out.println("\tusing Conditional Random Fields");  System.out.println("\ttesting our dataset of 8000 sentences with the highest F1-measure of 94%");  System.out.println("Copyright (C) by Cam-Tu Nguyen {1,2} and Xuan-Hieu Phan {2}");  System.out.println("{1}: College of Technology, Hanoi National University");  System.out.println("{2}: Graduate School of Information Sciences, Tohoku University");  System.out.println("Email: {ncamtu@gmail.com ; pxhieu@gmail.com}");  System.out.println();}  }
class C{  @Override public void stateChanged(ChangeEvent event){  lastValue=(Integer)getValue();}  }
class C{  public void proceed(){  submitAnswer();}  }
class C{  public TopologyProviderFactory(Properties props){  this.props=props;}  }
class C{  @NoInline private static void arraycopyPiecemeal(double[] src,int srcIdx,double[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  protected ColladaMeshShape(List<? extends ColladaAbstractGeometry> geometries){  if (WWUtil.isEmpty(geometries)) {    String message=Logging.getMessage("generic.ListIsEmpty");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  this.geometries=new ArrayList<Geometry>(geometries.size());  for (  ColladaAbstractGeometry geometry : geometries) {    this.geometries.add(new Geometry(geometry));    this.shapeCount+=geometry.getCount();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.049 -0500",hash_original_method="FBB1CB3954D34CB1AD109CEFAD7B1DDE",hash_generated_method="DABCB0F3CC1C040754C636AC3DDF91DE") public Builder(VmPolicy base){  mMask=base.mask;  mClassInstanceLimitNeedCow=true;  mClassInstanceLimit=base.classInstanceLimit;}  }
class C{  public double[] rowConfidence(int i){  return predictions.get(i);}  }
class C{  public static String cleanBeginWhitespace(String in){  int len=in.length();  int st=0;  int off=0;  char[] val=in.toCharArray();  while ((st < len) && (val[off + st] <= ' ')) {    st++;  }  return ((st > 0) || (len < in.length())) ? in.substring(st,len) : in;}  }
class C{  public static ImageRotationCalculator from(OrientationManager orientationManager,OneCameraCharacteristics characteristics){  int sensorOrientation=characteristics.getSensorOrientation();  OneCamera.Facing lensDirection=characteristics.getCameraDirection();  return new ImageRotationCalculatorImpl(orientationManager,sensorOrientation,lensDirection == OneCamera.Facing.FRONT);}  }
class C{  public Color complementary(){  Vector3D hsl=hsl();  double h=hsl.getY() + 180F;  return hsl(h,hsl.getY(),hsl.getZ()).alpha(alpha());}  }
class C{  public Vector4i sub(int x,int y,int z,int w){  this.x-=x;  this.y-=y;  this.z-=z;  this.w-=w;  return this;}  }
class C{  public void debug(BBC message,Object... args){  message.send(player,args);}  }
class C{  public int countTriples(int i){  int n=rows.get(i).size();  return (int)(n * (n - 1) / 2.0);}  }
class C{  public T caseInlineTag(InlineTag object){  return null;}  }
class C{  protected JavacTypes(Context context){  setContext(context);}  }
class C{  public static void updateParameterDefinition(ParameterDefinition param,TechnicalProduct techProd,String modificationType) throws UpdateConstraintException {  if (param == null || techProd == null || techProd.getProducts() == null) {    return;  }  for (  Product product : techProd.getProducts()) {    if (!product.isDeleted() && !param.getModificationType().name().equals(modificationType)) {      UpdateConstraintException uce=new UpdateConstraintException(ClassEnum.TECHNICAL_SERVICE,techProd.getTechnicalProductId());      logger.logWarn(Log4jLogger.SYSTEM_LOG,uce,LogMessageIdentifier.WARN_TECH_SERVICE_PARAMETER_DEFINITION_FAILED);      throw uce;    }  }}  }
class C{  private Session(){  this.isNew=false;  this.sessionId=null;  this.application=null;  this.attributes=new HashMap<String,Object>();  this.user=null;}  }
class C{  void writeRow(Data data,int offset,SearchRow row,boolean onlyPosition){  data.setPos(offset);  data.writeVarLong(row.getKey());  if (!onlyPosition) {    for (    Column col : columns) {      int idx=col.getColumnId();      data.writeValue(row.getValue(idx));    }  }}  }
class C{  private void configureTestProject(N4MFProjectInfo projectInfo){  modelFolderName=TEST_SRC_ROOT;  allFolders.add(TEST_SRC_ROOT);  if (!projectInfo.getAdditionalSourceFolder()) {    allFolders.remove(SRC_ROOT);  }}  }
class C{  public String string(){  return string;}  }
class C{  private Map<String,String> produceStream(String topic){  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);  Map<String,String> keyValMap=new HashMap<>();  for (int evt=0; evt < EVENT_CNT; evt++) {    long runtime=System.currentTimeMillis();    String key=topic + "_" + String.valueOf(evt);    String msg=runtime + String.valueOf(evt);    messages.add(new ProducerRecord<>(topic,key,msg));    keyValMap.put(key,msg);  }  kafkaBroker.sendMessages(messages);  return keyValMap;}  }
class C{  private void connect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.CONNECTED);  c.addAction("Client Connected");  Log.i(TAG,c.handle() + " connected.");  try {    ArrayList<Subscription> subscriptions=connection.getSubscriptions();    for (    Subscription sub : subscriptions) {      Log.i(TAG,"Auto-subscribing to: " + sub.getTopic() + "@ QoS: "+ sub.getQos());      connection.getClient().subscribe(sub.getTopic(),sub.getQos());    }  } catch (  MqttException ex) {    Log.e(TAG,"Failed to Auto-Subscribe: " + ex.getMessage());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.REF_PARAM__TYPE:    if (resolve)     return getType();  return basicGetType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isFlammable(){  return getMaterialValues().getFlameResistance() >= 0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Word not(){  return new Word(value.not());}  }
class C{  private void initDate(){  final float density=getResources().getDisplayMetrics().density;  final float minVel=MIN_FLING_VELOCITY * density;  mDragHelper=ViewDragHelper.create(this,mConfig.getSensitivity(),new ViewDragCallback());  mDragHelper.setMinVelocity(minVel);  ViewGroupCompat.setMotionEventSplittingEnabled(this,false);  setConfig(mConfig);}  }
class C{  private void moveCursorDown(int lines){}  }
class C{  public Boolean isSuccess(){  return success;}  }
class C{  public void removeLastCIDs(int regency){  Integer[] keys=new Integer[lastCIDs.keySet().size()];  lastCIDs.keySet().toArray(keys);  for (int i=0; i < keys.length; i++) {    if (keys[i] <= regency)     lastCIDs.remove(keys[i]);  }}  }
class C{  public StrBuilder appendFixedWidthPadRight(final Object obj,final int width,final char padChar){  if (width > 0) {    ensureCapacity(size + width);    String str=(obj == null ? getNullText() : obj.toString());    if (str == null) {      str="";    }    final int strLen=str.length();    if (strLen >= width) {      str.getChars(0,width,buffer,size);    } else {      final int padLen=width - strLen;      str.getChars(0,strLen,buffer,size);      for (int i=0; i < padLen; i++) {        buffer[size + strLen + i]=padChar;      }    }    size+=width;  }  return this;}  }
class C{  @Override public void connectFailed(URI uri,SocketAddress socketAddress,IOException ioException){}  }
class C{  @Override public void run(){  mListener.didEndDownload(mURL,mData,System.currentTimeMillis() - mStartTime);}  }
class C{  private static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public Flag registerOptional(final String name,final Class<?> type,final String usage,final String description){  return registerOptional(name,type,usage,description,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  private DefaultAsynchronousChannelProvider(){}  }
class C{  protected void saveSelectionDetail(){  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_Invoice_ID",ID == null ? "0" : ID.toString());  int C_InvoicePaySchedule_ID=scheduleTbl.getSelectedRowKey();  if (C_InvoicePaySchedule_ID <= 0)   Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID","0"); else   Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID",String.valueOf(C_InvoicePaySchedule_ID));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.365 -0500",hash_original_method="A2DEE293E79DD1E070648045D7A01545",hash_generated_method="2B2B696A74FFA6DDB0F0633FC45A2113") public int regionEnd(){  return regionEnd;}  }
class C{  public static int[] heapSort(int[] list){  return null;}  }
class C{  public static Integer findOffset(Map<String,String> operatorProperties) throws PlanGenException {  String offsetStr=getOptionalProperty(OFFSET,operatorProperties);  if (offsetStr == null) {    return null;  }  Integer offset=Integer.parseInt(offsetStr);  if (offset < 0) {    throw new PlanGenException("Offset must be equal to or greater than 0");  }  return offset;}  }
class C{  public DocumentAnalysisRequest(){  super(METHOD.POST,"/analysis/document");}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String flowAccumulationHeader=null;  String streamsHeader=null;  double mdInfPower=1;  String outputType=null;  String flowAccumTotalHeader=null;  String flowAccumRightHeader=null;  String flowAccumLeftHeader=null;  double initialValue;  double z;  int numRows;  int numCols;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      flowAccumulationHeader=args[i];    } else     if (i == 2) {      streamsHeader=args[i];    } else     if (i == 3) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 6) {      flowAccumTotalHeader=args[i];    } else     if (i == 7) {      flowAccumRightHeader=args[i];    } else     if (i == 8) {      flowAccumLeftHeader=args[i];    }  }  if ((demHeader == null) || (flowAccumulationHeader == null) || (streamsHeader == null)|| (flowAccumTotalHeader == null)|| (flowAccumRightHeader == null)|| (flowAccumLeftHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    flowAccumulation=new WhiteboxRaster(flowAccumulationHeader,"r");    streams=new WhiteboxRaster(streamsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    flowAccumTotal=new WhiteboxRaster(flowAccumTotalHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumTotal.setPreferredPalette("blueyellow.pal");    flowAccumTotal.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumTotal.setZUnits("dimensionless");    flowAccumRight=new WhiteboxRaster(flowAccumRightHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumRight.setPreferredPalette("blueyellow.pal");    flowAccumRight.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumRight.setZUnits("dimensionless");    flowAccumLeft=new WhiteboxRaster(flowAccumLeftHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumLeft.setPreferredPalette("blueyellow.pal");    flowAccumLeft.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumLeft.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          flowAccumTotal.setValue(row,col,0);          flowAccumRight.setValue(row,col,0);          flowAccumLeft.setValue(row,col,0);        } else {          flowAccumTotal.setValue(row,col,noData);          flowAccumRight.setValue(row,col,noData);          flowAccumLeft.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("",(int)progress);    }    updateProgress("Loop 2 of 2:",0);switch (outputType) {case "specific catchment area (sca)":      initialValue=gridRes;    caThreshold=caThreshold * gridRes;  break;case "total catchment area":initialValue=gridRes * gridRes;caThreshold=caThreshold * gridRes * gridRes;break;default :initialValue=1;break;}for (int row=0; row < numRows; row++) {for (int col=0; col < numCols; col++) {if (streams.getValue(row,col) > 0) {flowAccumTotal.setValue(row,col,initialValue - caThreshold);flowAccumRight.setValue(row,col,(initialValue - caThreshold) / 2);flowAccumLeft.setValue(row,col,(initialValue - caThreshold) / 2);for (int c=0; c < 8; c++) {MDInfAccum(row + yd[c],col + xd[c],row,col,(c + 4) % 8,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("",(int)progress);}flowAccumTotal.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumTotal.addMetadataEntry("Created on " + new Date());flowAccumRight.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumRight.addMetadataEntry("Created on " + new Date());flowAccumLeft.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumLeft.addMetadataEntry("Created on " + new Date());dem.close();flowAccumulation.close();streams.close();flowAccumTotal.close();flowAccumRight.close();flowAccumLeft.close();returnData(flowAccumTotalHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void resetGraphY2MaxValue(){  double dis=Tracking.getTracking().getDistanceKm();  if (dis > maxY2axis * 0.9) {    maxY2axis=getMaxValue(dis,maxY2axis);  }  graph.getSecondScale().setMaxY(maxY2axis);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public void onBeforeExit(){  dumpMyData();}  }
class C{  public void apply(PasswordSafeSettings settings){  settings.setProviderType(getProviderType());}  }
class C{  public void updateStateAfterAssignment(SamzaResourceRequest request,String assignedHost,SamzaResource samzaResource){synchronized (lock) {    requestsQueue.remove(request);    allocatedResources.get(assignedHost).remove(samzaResource);    if (hostAffinityEnabled) {      requestsToCountMap.get(request.getPreferredHost()).decrementAndGet();    }    manager.cancelResourceRequest(request);  }}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  protected void fireOptionSelected(JOptionPane pane,int option,@Nullable Object value,@Nullable Object inputValue){  SheetEvent sheetEvent=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SheetListener.class) {      if (sheetEvent == null) {        sheetEvent=new SheetEvent(this,pane,option,value,inputValue);      }      ((SheetListener)listeners[i + 1]).optionSelected(sheetEvent);    }  }}  }
class C{  private void processFactories(final RoundEnvironment env){  final List<? extends Element> factories=sortElements(env,factory.class);  for (  final Element e : factories) {    final factory factory=e.getAnnotation(factory.class);    final int[] hKinds=factory.handles();    final StringBuilder sb=new StringBuilder();    sb.append(FACTORY_PREFIX);    sb.append(rawNameOf(e)).append(SEP);    sb.append(String.valueOf(hKinds[0]));    for (int i=1; i < hKinds.length; i++) {      sb.append(',').append(String.valueOf(hKinds[i]));    }    gp.put(sb.toString(),"");  }}  }
class C{  boolean applyAnimationLocked(int transit,boolean isEntrance){  if (mLocalAnimating && mAnimationIsEntrance == isEntrance) {    return true;  }  if (mService.okToDisplay()) {    int anim=mPolicy.selectAnimationLw(mWin,transit);    int attr=-1;    Animation a=null;    if (anim != 0) {      a=anim != -1 ? AnimationUtils.loadAnimation(mContext,anim) : null;    } else {switch (transit) {case WindowManagerPolicy.TRANSIT_ENTER:        attr=com.android.internal.R.styleable.WindowAnimation_windowEnterAnimation;      break;case WindowManagerPolicy.TRANSIT_EXIT:    attr=com.android.internal.R.styleable.WindowAnimation_windowExitAnimation;  break;case WindowManagerPolicy.TRANSIT_SHOW:attr=com.android.internal.R.styleable.WindowAnimation_windowShowAnimation;break;case WindowManagerPolicy.TRANSIT_HIDE:attr=com.android.internal.R.styleable.WindowAnimation_windowHideAnimation;break;}if (attr >= 0) {a=mService.mAppTransition.loadAnimation(mWin.mAttrs,attr);}}if (WindowManagerService.DEBUG_ANIM) Slog.v(TAG,"applyAnimation: win=" + this + " anim="+ anim+ " attr=0x"+ Integer.toHexString(attr)+ " a="+ a+ " transit="+ transit+ " isEntrance="+ isEntrance+ " Callers "+ Debug.getCallers(3));if (a != null) {if (WindowManagerService.DEBUG_ANIM) {RuntimeException e=null;if (!WindowManagerService.HIDE_STACK_CRAWLS) {e=new RuntimeException();e.fillInStackTrace();}Slog.v(TAG,"Loaded animation " + a + " for "+ this,e);}setAnimation(a);mAnimationIsEntrance=isEntrance;}} else {clearAnimation();}return mAnimation != null;}  }
class C{  protected void checkSmallAssignment(Tree.Term term){  term=TreeUtil.unwrapExpressionUntilTerm(term);  if (Decl.isSmall(assigning) && term != null && !term.getSmall() && (term instanceof Tree.NaturalLiteral || (term instanceof Tree.NegativeOp && ((Tree.NegativeOp)term).getTerm() instanceof Tree.NaturalLiteral))) {    term.addUsageWarning(Warning.literalNotSmall,"literal value is not small but is assignable to small declaration '" + assigning.getName(term.getUnit()) + "'",Backend.Java);  }}  }
class C{  public void reset(){  checkSubject();  AttributeChangeNotification acn=new AttributeChangeNotification(this,0,0,"NbChanges reset","NbChanges","Integer",new Integer(nbChanges),new Integer(0));  state="initial state";  nbChanges=0;  nbResets++;  sendNotification(acn);}  }
class C{  public void addNameDeltaEventType(String nameDeltaEventType){  nameDeltaEventTypes.add(nameDeltaEventType);}  }
class C{  @OnClose public void onClose(Session session){  openSessions.remove(session.getId());  callInternal("onClose",session,null);}  }
class C{  public void testCreateParentRoot() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  createFile(igfs,file,true,chunk);  checkFile(igfs,igfsSecondary,file,chunk);}  }
class C{  private int createRevenueRecognition(int C_RevenueRecognition_ID,int C_InvoiceLine_ID,int AD_Client_ID,int AD_Org_ID,int AD_User_ID,int Account_ID,int C_SubAcct_ID,int M_Product_ID,int C_BPartner_ID,int AD_OrgTrx_ID,int C_LocFrom_ID,int C_LocTo_ID,int C_SRegion_ID,int C_Project_ID,int C_Campaign_ID,int C_Activity_ID,int User1_ID,int User2_ID,int UserElement1_ID,int UserElement2_ID){  log.fine("From Accout_ID=" + Account_ID);  MAccount revenue=MAccount.get(getCtx(),AD_Client_ID,AD_Org_ID,getC_AcctSchema_ID(),Account_ID,C_SubAcct_ID,M_Product_ID,C_BPartner_ID,AD_OrgTrx_ID,C_LocFrom_ID,C_LocTo_ID,C_SRegion_ID,C_Project_ID,C_Campaign_ID,C_Activity_ID,User1_ID,User2_ID,UserElement1_ID,UserElement2_ID,null);  if (revenue != null && revenue.get_ID() == 0)   revenue.saveEx();  if (revenue == null || revenue.get_ID() == 0) {    log.severe("Revenue_Acct not found");    return Account_ID;  }  int P_Revenue_Acct=revenue.get_ID();  int UnearnedRevenue_Acct=0;  int new_Account_ID=0;  String sql="SELECT ga.UnearnedRevenue_Acct, vc.Account_ID " + "FROM C_BP_Group_Acct ga, C_BPartner p, C_ValidCombination vc " + "WHERE ga.C_BP_Group_ID=p.C_BP_Group_ID"+ " AND ga.UnearnedRevenue_Acct=vc.C_ValidCombination_ID"+ " AND ga.C_AcctSchema_ID=? AND p.C_BPartner_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_AcctSchema_ID());    pstmt.setInt(2,C_BPartner_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      UnearnedRevenue_Acct=rs.getInt(1);      new_Account_ID=rs.getInt(2);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (new_Account_ID == 0) {    log.severe("UnearnedRevenue_Acct not found");    return Account_ID;  }  MRevenueRecognitionPlan plan=new MRevenueRecognitionPlan(getCtx(),0,null);  plan.setC_RevenueRecognition_ID(C_RevenueRecognition_ID);  plan.setC_AcctSchema_ID(getC_AcctSchema_ID());  plan.setC_InvoiceLine_ID(C_InvoiceLine_ID);  plan.setUnEarnedRevenue_Acct(UnearnedRevenue_Acct);  plan.setP_Revenue_Acct(P_Revenue_Acct);  plan.setC_Currency_ID(getC_Currency_ID());  plan.setTotalAmt(getAcctBalance());  if (!plan.save(get_TrxName())) {    log.severe("Plan NOT created");    return Account_ID;  }  log.fine("From Acctount_ID=" + Account_ID + " to "+ new_Account_ID+ " - Plan from UnearnedRevenue_Acct="+ UnearnedRevenue_Acct+ " to Revenue_Acct="+ P_Revenue_Acct);  return new_Account_ID;}  }
class C{  private void sendRegistrationToServer(String token){  Log.i(TAG,"GCM Registration Token: " + token);}  }
class C{  public synchronized boolean add(T element){  if (tail == head && count == bufferSize) {    buffer[tail]=element;    head=(head + 1) % bufferSize;    tail=(tail + 1) % bufferSize;    return true;  } else {    buffer[tail]=element;    tail=(tail + 1) % bufferSize;    count++;    return true;  }}  }
class C{  public MimeType(String rawdata) throws MimeTypeParseException {  parse(rawdata);}  }
class C{  public void testWithExceptions() throws Exception {  int numDocs=atLeast(10000);  int numBytesPerDim=TestUtil.nextInt(random(),2,30);  int numDims=TestUtil.nextInt(random(),1,5);  byte[][][] docValues=new byte[numDocs][][];  for (int docID=0; docID < numDocs; docID++) {    byte[][] values=new byte[numDims][];    for (int dim=0; dim < numDims; dim++) {      values[dim]=new byte[numBytesPerDim];      random().nextBytes(values[dim]);    }    docValues[docID]=values;  }  double maxMBHeap=0.05;  boolean done=false;  while (done == false) {    MockDirectoryWrapper dir=newMockFSDirectory(createTempDir());    try {      dir.setRandomIOExceptionRate(0.05);      dir.setRandomIOExceptionRateOnOpen(0.05);      verify(dir,docValues,null,numDims,numBytesPerDim,50,maxMBHeap);    } catch (    IllegalArgumentException iae) {      assertTrue(iae.getMessage().contains("either increase maxMBSortInHeap or decrease maxPointsInLeafNode"));      maxMBHeap*=1.25;    }catch (    IOException ioe) {      if (ioe.getMessage().contains("a random IOException")) {        done=true;      } else {        throw ioe;      }    }    String[] files=dir.listAll();    assertTrue("files=" + Arrays.toString(files),files.length == 0 || Arrays.equals(files,new String[]{"extra0"}));    dir.close();  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL from file:");    args[0]=sc.nextLine();    System.out.print("DOT to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  pw.println("graph {");  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    pw.println("n" + i + ";");  }  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    for (int j=0; j < exist.size(); j++) {      pw.println("n" + i + " -- n"+ j+ ";");    }  }  pw.println("}");  pw.flush();  pw.close();}  }
class C{  public <T>PushableStream<T> stream(){  final Queue<T> q=createQueue();  return new PushableStream<T>(q,q.stream());}  }
class C{  public void addValue(double data,double given,double weight){  data=round(data);  given=round(given);  int insertIndex=findNearestPair(given,data);  if ((m_NumValues <= insertIndex) || (m_CondValues[insertIndex] != given) || (m_Values[insertIndex] != data)) {    if (m_NumValues < m_Values.length) {      int left=m_NumValues - insertIndex;      System.arraycopy(m_Values,insertIndex,m_Values,insertIndex + 1,left);      System.arraycopy(m_CondValues,insertIndex,m_CondValues,insertIndex + 1,left);      System.arraycopy(m_Weights,insertIndex,m_Weights,insertIndex + 1,left);      m_Values[insertIndex]=data;      m_CondValues[insertIndex]=given;      m_Weights[insertIndex]=weight;      m_NumValues++;    } else {      double[] newValues=new double[m_Values.length * 2];      double[] newCondValues=new double[m_Values.length * 2];      double[] newWeights=new double[m_Values.length * 2];      int left=m_NumValues - insertIndex;      System.arraycopy(m_Values,0,newValues,0,insertIndex);      System.arraycopy(m_CondValues,0,newCondValues,0,insertIndex);      System.arraycopy(m_Weights,0,newWeights,0,insertIndex);      newValues[insertIndex]=data;      newCondValues[insertIndex]=given;      newWeights[insertIndex]=weight;      System.arraycopy(m_Values,insertIndex,newValues,insertIndex + 1,left);      System.arraycopy(m_CondValues,insertIndex,newCondValues,insertIndex + 1,left);      System.arraycopy(m_Weights,insertIndex,newWeights,insertIndex + 1,left);      m_NumValues++;      m_Values=newValues;      m_CondValues=newCondValues;      m_Weights=newWeights;    }    if (weight != 1) {      m_AllWeightsOne=false;    }  } else {    m_Weights[insertIndex]+=weight;    m_AllWeightsOne=false;  }  m_SumOfWeights+=weight;  double range=m_CondValues[m_NumValues - 1] - m_CondValues[0];  m_StandardDev=Math.max(range / Math.sqrt(m_SumOfWeights),m_Precision / (2 * 3));}  }
class C{  public static Object[] featureToArray(Feature f,Annotation a){  Object[] ret;  if (a.getFeatureValue(f) == null) {    ret=new Object[0];  } else {    ret=toArray(f,a);  }  return ret;}  }
class C{  public If createIf(){  IfImpl if_=new IfImpl();  return if_;}  }
class C{  public List<A> reverse(){  if (isEmpty() || tail.isEmpty())   return this;  List<A> rev=nil();  for (List<A> l=this; l.nonEmpty(); l=l.tail)   rev=new List<A>(l.head,rev);  return rev;}  }
class C{  public void storeEntity(LocalEntity entity){  this.entities.add(new CopiedEntity(entity));}  }
class C{  boolean cancel(int downloadId){synchronized (currentRequests) {    for (    DownloadRequest request : currentRequests) {      if (request.downloadId() == downloadId) {        request.cancel();        return true;      }    }  }  return false;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public void testAsciiBoard() throws ChessParseError {  Position pos=TextIO.readFEN("r4rk1/2pn3p/2q1q1n1/8/2q2p2/6R1/p4PPP/1R4K1 b - - 0 1");  String aBrd=TextIO.asciiBoard(pos);  assertEquals(12,aBrd.length() - aBrd.replaceAll("\\*","").length());  assertEquals(3,aBrd.length() - aBrd.replaceAll("\\*Q"," ").length());  assertEquals(3,aBrd.length() - aBrd.replaceAll(" P"," ").length());}  }
class C{  public static final WritableFontData createWritableFontData(ReadableFontData original){  ByteArray<?> ba=null;  if (original.array.growable()) {    ba=new GrowableMemoryByteArray();  } else {    ba=new MemoryByteArray(original.array.length());  }  original.array.copyTo(ba);  WritableFontData wfd=new WritableFontData(ba);  wfd.setCheckSumRanges(original.checkSumRange());  return wfd;}  }
class C{  public double dist(Vec x,List<Double> qi){  double k_xx=k.eval(0,0,Arrays.asList(x),qi);  return Math.sqrt(k_xx + getSqrdNorm() - 2 * dot(x,qi));}  }
class C{  public N4FieldDeclaration createN4FieldDeclaration(){  N4FieldDeclarationImpl n4FieldDeclaration=new N4FieldDeclarationImpl();  return n4FieldDeclaration;}  }
class C{  public Cell<C> result(Cell<C> s,CellWorldAction a){  Cell<C> sDelta=getCellAt(a.getXResult(s.getX()),a.getYResult(s.getY()));  if (null == sDelta) {    sDelta=s;  }  return sDelta;}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  for (int i=_serviceCloseList.size() - 1; i >= 0; i--) {    ServiceRefAmp service=_serviceCloseList.get(i);    service.shutdown(mode);  }  for (  GatewayResultStream result : _gatewayResultMap.values()) {    result.cancel();  }  _serviceRefOut.close(Result.ignore());}  }
class C{  public void banUsers(Collection<String> jids) throws XMPPException {  changeAffiliationByAdmin(jids,"outcast");}  }
class C{  void addCheckBox(String key,CheckBox cb,String value){  if (cb.isSelected()) {    defaultCheckedButtons.addElement(cb);  } else {    defaultUncheckedButtons.addElement(cb);  }  if (key == null) {    return;  }  Hashtable internal=(Hashtable)comps.get(key);  if (internal == null) {    internal=new Hashtable();    comps.put(key,internal);  }  internal.put(cb,value);}  }
class C{  public boolean isReference(){  return false;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="IMSE_DONT_CATCH_IMSE") public final boolean doLocalRemoveAll(PartitionedRegion r,InternalDistributedMember eventSender,boolean cacheWrite) throws EntryExistsException, ForceReattemptException, DataLocationException {  boolean didRemove=false;  long clientReadTimeOut=PoolFactory.DEFAULT_READ_TIMEOUT;  if (r.hasServerProxy()) {    clientReadTimeOut=r.getServerProxy().getPool().getReadTimeout();    if (logger.isDebugEnabled()) {      logger.debug("RemoveAllPRMessage: doLocalRemoveAll: clientReadTimeOut is {}",clientReadTimeOut);    }  }  DistributedRemoveAllOperation op=null;  @Released EntryEventImpl baseEvent=null;  BucketRegion bucketRegion=null;  PartitionedRegionDataStore ds=r.getDataStore();  InternalDistributedMember myId=r.getDistributionManager().getDistributionManagerId();  try {    if (!notificationOnly) {      bucketRegion=ds.getInitializedBucketForId(null,bucketId);      this.versions=new VersionedObjectList(this.removeAllPRDataSize,true,bucketRegion.getAttributes().getConcurrencyChecksEnabled());      baseEvent=EntryEventImpl.create(bucketRegion,Operation.REMOVEALL_DESTROY,null,null,this.callbackArg,true,eventSender,!skipCallbacks,true);      baseEvent.setEventId(removeAllPRData[0].getEventID());      if (this.bridgeContext != null) {        baseEvent.setContext(this.bridgeContext);      }      baseEvent.setPossibleDuplicate(this.posDup);      if (logger.isDebugEnabled()) {        logger.debug("RemoveAllPRMessage.doLocalRemoveAll: eventSender is {}, baseEvent is {}, msg is {}",eventSender,baseEvent,this);      }      op=new DistributedRemoveAllOperation(baseEvent,removeAllPRDataSize,false);    }    Object keys[]=new Object[removeAllPRDataSize];    for (int i=0; i < removeAllPRDataSize; ++i) {      keys[i]=removeAllPRData[i].getKey();    }    if (!notificationOnly) {      try {        if (removeAllPRData.length > 0) {          if (this.posDup && bucketRegion.getConcurrencyChecksEnabled()) {            if (logger.isDebugEnabled()) {              logger.debug("attempting to locate version tags for retried event");            }            for (int i=0; i < removeAllPRDataSize; i++) {              if (removeAllPRData[i].versionTag == null) {                removeAllPRData[i].versionTag=bucketRegion.findVersionTagForClientBulkOp(removeAllPRData[i].getEventID());                if (removeAllPRData[i].versionTag != null) {                  removeAllPRData[i].versionTag.replaceNullIDs(bucketRegion.getVersionMember());                }              }            }          }          EventID eventID=removeAllPRData[0].getEventID();          ThreadIdentifier membershipID=new ThreadIdentifier(eventID.getMembershipID(),eventID.getThreadID());          bucketRegion.recordBulkOpStart(membershipID);        }        bucketRegion.waitUntilLocked(keys);        boolean lockedForPrimary=false;        final ArrayList<Object> succeeded=new ArrayList<Object>();        PutAllPartialResult partialKeys=new PutAllPartialResult(removeAllPRDataSize);        Object key=keys[0];        try {          bucketRegion.doLockForPrimary(false);          lockedForPrimary=true;          for (int i=0; i < removeAllPRDataSize; i++) {            @Released EntryEventImpl ev=getEventFromEntry(r,myId,eventSender,i,removeAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);            try {              key=ev.getKey();              ev.setRemoveAllOperation(op);              try {                r.getDataView().destroyOnRemote(ev,cacheWrite,null);                didRemove=true;                if (logger.isDebugEnabled()) {                  logger.debug("RemoveAllPRMessage.doLocalRemoveAll:removeLocally success for " + ev);                }              } catch (              EntryNotFoundException ignore) {                didRemove=true;                if (ev.getVersionTag() == null) {                  if (logger.isDebugEnabled()) {                    logger.debug("doLocalRemoveAll:RemoveAll encoutered EntryNotFoundException: event={}",ev);                  }                }              }catch (              ConcurrentCacheModificationException e) {                didRemove=true;                if (logger.isDebugEnabled()) {                  logger.debug("RemoveAllPRMessage.doLocalRemoveAll:removeLocally encountered concurrent cache modification for " + ev);                }              }              removeAllPRData[i].setTailKey(ev.getTailKey());              if (!didRemove) {                r.checkReadiness();                ForceReattemptException fre=new ForceReattemptException("unable to perform remove in RemoveAllPR, but operation should not fail");                fre.setHash(ev.getKey().hashCode());                throw fre;              } else {                succeeded.add(removeAllPRData[i].getKey());                this.versions.addKeyAndVersion(removeAllPRData[i].getKey(),ev.getVersionTag());              }            }  finally {              ev.release();            }          }        } catch (        IllegalMonitorStateException ex) {          ForceReattemptException fre=new ForceReattemptException("unable to get lock for primary, retrying... ");          throw fre;        }catch (        CacheWriterException cwe) {          partialKeys.saveFailedKey(key,cwe);        } finally {          try {            op.setUseFakeEventId(true);            r.checkReadiness();            bucketRegion.getDataView().postRemoveAll(op,this.versions,bucketRegion);          }  finally {            if (lockedForPrimary) {              bucketRegion.doUnlockForPrimary();            }          }        }        if (partialKeys.hasFailure()) {          partialKeys.addKeysAndVersions(this.versions);          if (logger.isDebugEnabled()) {            logger.debug("RemoveAllPRMessage: partial keys applied, map to bucket {}'s keys:{}. Applied {}",bucketId,Arrays.toString(keys),succeeded);          }          throw new PutAllPartialResultException(partialKeys);        }      } catch (      RegionDestroyedException e) {        ds.checkRegionDestroyedOnBucket(bucketRegion,true,e);      } finally {        bucketRegion.removeAndNotifyKeys(keys);      }    } else {      for (int i=0; i < removeAllPRDataSize; i++) {        EntryEventImpl ev=getEventFromEntry(r,myId,eventSender,i,removeAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);        try {          ev.setOriginRemote(true);          if (this.callbackArg != null) {            ev.setCallbackArgument(this.callbackArg);          }          r.invokeDestroyCallbacks(EnumListenerEvent.AFTER_DESTROY,ev,r.isInitialized(),true);        }  finally {          ev.release();        }      }    }  }  finally {    if (baseEvent != null)     baseEvent.release();    if (op != null)     op.freeOffHeapResources();  }  return true;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  protected double[] probs(double[] Fs){  double maxF=-Double.MAX_VALUE;  for (  double element : Fs) {    if (element > maxF) {      maxF=element;    }  }  double sum=0;  double[] probs=new double[Fs.length];  for (int i=0; i < Fs.length; i++) {    probs[i]=Math.exp(Fs[i] - maxF);    sum+=probs[i];  }  Utils.normalize(probs,sum);  return probs;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deleteCG(RecoverPointVolumeProtectionInfo cgToDelete) throws RecoverPointException {  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(cgToDelete);  String cgName=null;  try {    cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());    ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(cgCopyUID.getGroupUID());    List<ConsistencyGroupCopyUID> productionCopiesUIDs=groupSettings.getProductionCopiesUIDs();    for (    ConsistencyGroupCopyUID productionCopyUID : productionCopiesUIDs) {      if (!cgToDelete.isMetroPoint() && !RecoverPointUtils.copiesEqual(productionCopyUID,cgCopyUID)) {        throw RecoverPointException.exceptions.cantCallDeleteCGUsingProductionCGCopy(cgName);      }    }    disableConsistencyGroup(cgCopyUID.getGroupUID());    functionalAPI.removeConsistencyGroup(cgCopyUID.getGroupUID());    validateCGRemoved(cgCopyUID.getGroupUID(),cgName);    logger.info("Deleted consistency group " + cgName);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteConsistencyGroup(cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteConsistencyGroup(cgName,e);  }catch (  Exception e) {    throw RecoverPointException.exceptions.failedToDeleteConsistencyGroup(cgName,e);  }}  }
class C{  private void stopBridgeServer(Cache cache){  CacheServer bridge=(CacheServer)cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  public static JsonObject httpPost(CloseableHttpClient httpClient,String url,List<NameValuePair> nvps) throws ConnectException, ClientProtocolException, IOException, IllegalStateException, HttpException {  HttpPost httpPost=new HttpPost(url);  if (nvps != null) {    httpPost.setEntity(new UrlEncodedFormEntity(nvps));  }  try (CloseableHttpResponse response=httpClient.execute(httpPost)){    return parseHTTPResponse(response,url);  } }  }
class C{  private static final byte[] intToByteArray(int value){  return new byte[]{(byte)(value >>> 24),(byte)(value >>> 16),(byte)(value >>> 8),(byte)value};}  }
class C{  public static void dumpHeader(ObjectReference ptr){  dumpHeader(ptr.toObject());}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public int numValues(){  return m_values.size();}  }
class C{  public ClientConnection nextValidConnection(){  return connections.next();}  }
class C{  void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  int start=getStartOffset();  int end=getEndOffset();  p0=Math.max(start,p0);  p1=Math.min(end,p1);  if (getColor() != null && (painter instanceof ChangeableColorHighlightPainter)) {    ((ChangeableColorHighlightPainter)painter).setColor(getColor());  }  union(((LayeredHighlighter.LayerPainter)painter).paintLayer(g,p0,p1,viewBounds,editor,view));}  }
class C{  public boolean isDefined(Object key){  AttributeSet[] as=getAttributes();  for (int i=0; i < as.length; i++) {    if (as[i].isDefined(key)) {      return true;    }  }  return false;}  }
class C{  public int status(){  if (_headers == null)   parseHead();  return _status;}  }
class C{  public static String readAsciiLine(final InputStream in) throws IOException {  final StringBuilder result=new StringBuilder(80);  while (true) {    final int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  final int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public void addPush(long k){  int ik=(int)k;  if (ik == k) {    addPush(ik);    add(ByteCode.I2L);  } else {    addLoadConstant(k);  }}  }
class C{  public String deleteImmediate(){  append("delete()");  List removes=new ArrayList();  int n=data.getRowCount();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    System.out.println("delete(accountId=" + accountId.getValue() + ",checked="+ checked.getSubmittedValue()+ ")");    if ("true".equals(checked.getSubmittedValue())) {      removes.add(data.getRowData());      checked.setSelected(false);      created.setSelected(false);    }  }  if (removes.size() > 0) {    List list=list();    Iterator remove=removes.iterator();    while (remove.hasNext()) {      list.remove(remove.next());    }  }  clear();  return (null);}  }
class C{  private static String format(int number,int format){  String retVal="" + number;  while (retVal.length() < format) {    retVal="0" + retVal;  }  return retVal;}  }
class C{  private void fillLocation(HashMap<String,Object> postcodeData,MCountry country){  if (fAddress1 != null || fAddress2 != null || fAddress3 != null || fAddress4 != null || fCity != null) {    String warningMsg="Existing address information will be overwritten. Proceed?";    String warningTitle="Warning";    int response=JOptionPane.showConfirmDialog(null,warningMsg,warningTitle,JOptionPane.YES_NO_OPTION);    if (response == JOptionPane.NO_OPTION)     return;  }  Set<String> pcodeKeys=postcodeData.keySet();  Iterator<String> iterator=pcodeKeys.iterator();  header=null;  header=new Object[pcodeKeys.size()];  String headerStr=null;  if (pcodeKeys.size() > 2) {    System.out.println("Too many postcodes returned from Postcode Lookup - need to Implement ResultData");  } else {    for (int i=0; (headerStr=(iterator.hasNext() ? iterator.next() : null)) != null || iterator.hasNext(); i++) {      header[i]=headerStr;      Postcode values=(Postcode)postcodeData.get(headerStr);      fAddress1.setText(values.getStreet1());      fAddress2.setText(values.getStreet2());      fAddress3.setText(values.getStreet3());      fAddress4.setText(values.getStreet4());      fCity.setText(values.getCity());      fPostal.setText(values.getPostcode());      if (country.isHasRegion()) {        MRegion[] regions=MRegion.getRegions(country.getCtx(),country.getC_Country_ID());        if (regions.length > 0) {          boolean found=false;          for (i=0; i < regions.length && !found; i++) {            if (regions[i].getName().equals(values.getRegion())) {              fRegion.setSelectedItem(regions[i]);              log.fine("Found region: " + regions[i].getName());              found=true;            }          }          if (!found) {            MRegion region=new MRegion(country,values.getRegion());            if (region.save()) {              log.fine("Added new region from web service: " + values.getRegion());              Env.reset(false);              fRegion=new CComboBox(MRegion.getRegions(Env.getCtx(),country.getC_Country_ID()));              fRegion.setSelectedItem(values);            } else             log.severe("Error saving new region: " + region.getName());          }        } else         log.severe("Region lookup failed for Country: " + country.getName());      }    }  }}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  StyledString createJavadocMethodProposalLabel(CompletionProposal methodProposal){  StyledString nameBuffer=new StyledString();  nameBuffer.append(methodProposal.getCompletion());  nameBuffer.append(QUALIFIER_SEPARATOR,StyledString.QUALIFIER_STYLER);  String declaringType=extractDeclaringTypeFQN(methodProposal);  declaringType=Signature.getSimpleName(declaringType);  nameBuffer.append(declaringType,StyledString.QUALIFIER_STYLER);  return nameBuffer;}  }
class C{  public CertificateVerify(SignatureAndHashAlgorithm signatureAndHashAlgorithm,PrivateKey clientPrivateKey,byte[] handshakeMessages,InetSocketAddress peerAddress){  this(signatureAndHashAlgorithm,peerAddress);  this.signatureBytes=setSignature(clientPrivateKey,handshakeMessages);}  }
class C{  private static boolean hasCommonClassLoader(Object obj,Iterable<?> c){  assert obj != null;  assert c != null;  ClassLoader ldr=obj instanceof GridPeerDeployAware ? ((GridPeerDeployAware)obj).classLoader() : detectClassLoader(obj.getClass());  boolean found=true;  for (  Object obj2 : c) {    if (obj2 == null || obj2 == obj)     continue;    String clsName=obj2 instanceof GridPeerDeployAware ? ((GridPeerDeployAware)obj2).deployClass().getName() : obj2.getClass().getName();    if (!isLoadableBy(clsName,ldr)) {      found=false;      break;    }  }  return found;}  }
class C{  public void parsePatternByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.CASE).getId());  dataStream.writeLong(network.createVertex(Primitive.PATTERN).getId());  Vertex pattern=null;  if (stream.peek() == '"') {    stream.skip();    pattern=network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);    dataStream.writeLong(pattern.getId());  } else {    parseElementByteCode(stream,dataStream,elements,debug,network);  }  String next=stream.nextWord().toLowerCase();  if (next.equals(TOPIC)) {    dataStream.writeLong(network.createVertex(Primitive.TOPIC).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord().toLowerCase();  }  if (next.equals(THAT)) {    dataStream.writeLong(network.createVertex(Primitive.THAT).getId());    Vertex that=null;    stream.skipWhitespace();    if (stream.peek() == '"') {      stream.skip();      that=network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);      dataStream.writeLong(that.getId());    } else {      parseElementByteCode(stream,dataStream,elements,debug,network);    }    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    dataStream.writeLong(0l);  } else   if (next.equals(RETURN)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());    dataStream.writeLong(0l);  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    dataStream.writeLong(network.createVertex(Primitive.TEMPLATE).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, RETURN, THAT, TOPIC, found: " + next,stream);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  private RawProtein<SmartRawMatch> filterByFamilyOverlap(RawProtein<SmartRawMatch> matchRawProtein){  final RawProtein<SmartRawMatch> filtered=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  final RawProtein<SmartRawMatch> considerOverlap=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    final SmartOverlappingFileParser.SmartOverlap overlap=smartOverlaps.getSmartOverlapByModelId(match.getModelId());    if (overlap == null) {      filtered.addMatch(match);    } else {      considerOverlap.addMatch(match);    }  }  final TreeSet<SmartRawMatch> orderedMatches=new TreeSet<SmartRawMatch>(considerOverlap.getMatches());  final HashSet<SmartRawMatch> rejectedMatches=new HashSet<SmartRawMatch>();  for (  SmartRawMatch outer : orderedMatches) {    for (    SmartRawMatch inner : orderedMatches.tailSet(outer,false)) {      if (rejectedMatches.contains(outer) || rejectedMatches.contains(inner)) {        continue;      }      final SmartOverlappingFileParser.SmartOverlap outerOverlap=smartOverlaps.getSmartOverlapByModelId(outer.getModelId());      final SmartOverlappingFileParser.SmartOverlap innerOverlap=smartOverlaps.getSmartOverlapByModelId(inner.getModelId());      if (!outerOverlap.getFamilyName().equals(innerOverlap.getFamilyName())) {        continue;      }      if (!matchesOverlap(outer,inner)) {        continue;      }      if (!outerOverlap.getResolutionType().equals(innerOverlap.getResolutionType())) {        throw new IllegalStateException("The SMART overlaps file contains two family members with different resolution types: Family: " + outerOverlap.getFamilyName() + ", domain "+ outerOverlap.getDomainName()+ " resolution: "+ outerOverlap.getResolutionType()+ ", domain "+ innerOverlap.getDomainName()+ " resolution: "+ innerOverlap.getResolutionType());      }      if (SMART_SPLIT_TAG.equals(outerOverlap.getResolutionType())) {        if (outerOverlap.getPriority() == innerOverlap.getPriority()) {          throw new IllegalStateException("The SMART overlaps file contains two family members with the same priority: Family: " + outerOverlap.getFamilyName() + ", domain "+ outerOverlap.getDomainName()+ " priority: "+ outerOverlap.getPriority()+ ", domain "+ innerOverlap.getDomainName()+ " priority: "+ innerOverlap.getPriority());        }        rejectedMatches.add((outerOverlap.getPriority() < innerOverlap.getPriority()) ? inner : outer);      } else {        rejectedMatches.add(inner);        final SmartThresholdFileParser.SmartThreshold threshold=smartThresholds.getThresholdByDomainName(outerOverlap.getFamilyName());        outer.setModelId(threshold.getModelId());      }    }  }  orderedMatches.removeAll(rejectedMatches);  filtered.addAllMatches(orderedMatches);  return filtered;}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> newAttributes,String uri,int offset){  int length=uri.length();  if (length < 2 + offset || uri.charAt(offset) != '/' || uri.charAt(1 + offset) != '/')   throw new RuntimeException("bad scheme");  CharBuffer buf=new CharBuffer();  int i=2 + offset;  int ch=0;  boolean isIpv6=false;  for (; (i < length && (ch=uri.charAt(i)) != '/' && ch != '?' && !(ch == ':' && !isIpv6)); i++) {    if (ch == '[')     isIpv6=true; else     if (ch == ']')     isIpv6=false;    buf.append((char)ch);  }  String host=buf.toString();  if (host.length() == 0)   throw new RuntimeException("bad host");  int port=0;  if (ch == ':') {    for (i++; i < length && (ch=uri.charAt(i)) >= '0' && ch <= '9'; i++) {      port=10 * port + uri.charAt(i) - '0';    }  }  return create(this,userPath,newAttributes,host,port);}  }
class C{  private String captureStackTrace(){  String stackTrace=null;  ByteArrayOutputStream out=new ByteArrayOutputStream();  PrintWriter writer=new PrintWriter(out);  super.printStackTrace(writer);  writer.flush();  stackTrace=out.toString();  return stackTrace;}  }
class C{  public void testGetF11(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF11();  assertEquals(expResult,result);}  }
class C{  public void add(String param){  fStrings.add(param);}  }
class C{  public ShortDataBox(int rows,int cols){  this.data=new short[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=-99;    }  }}  }
class C{  @Override public boolean use(Player player){  return false;}  }
class C{  @action(name="reject_proposal",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'reject_proposal' performative message.")) public Object primRejectProposal(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,REJECT_PROPOSAL,getContentArg(scope));}  }
class C{  public void testBasicWrite() throws Exception {  File f=initFile("testBasicWrite");  BufferedFileDataOutput bfdo=new BufferedFileDataOutput(f);  bfdo.writeInt(1);  assertEquals("Offset after 1 int",4,bfdo.getOffset());  bfdo.fsync();  assertEquals("File size matches offset after fsync",4,f.length());  bfdo.close();  BufferedFileDataOutput bfdo2=new BufferedFileDataOutput(f);  bfdo2.writeInt(2);  assertEquals("Offset after 2 ints",8,bfdo2.getOffset());  bfdo2.fsync();  assertEquals("File size matches offset after fsync",8,f.length());  bfdo2.close();  assertEquals("File length after writing",8,f.length());  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("int 1",1,bfdi.readInt());  assertEquals("int 2",2,bfdi.readInt());  bfdi.close();}  }
class C{  public ServerController(String basedir,String datadir){}  }
class C{  private static VOServiceDetails cleanupParameter(VOServiceDetails service){  if (service != null) {    for (Iterator<VOParameter> it=service.getParameters().iterator(); it.hasNext(); ) {      VOParameter param=it.next();      if (!param.isConfigurable() && isBlank(param.getValue())) {        it.remove();      }    }  }  return service;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static boolean isOpenShift(Client client){  URL masterUrl=client.getMasterUrl();  if (IS_OPENSHIFT.containsKey(masterUrl)) {    return IS_OPENSHIFT.get(masterUrl);  } else {    RootPaths rootPaths=client.rootPaths();    if (rootPaths != null) {      List<String> paths=rootPaths.getPaths();      if (paths != null) {        for (        String path : paths) {          if (java.util.Objects.equals("/oapi",path) || java.util.Objects.equals("oapi",path)) {            IS_OPENSHIFT.putIfAbsent(masterUrl,true);            return true;          }        }      }    }  }  IS_OPENSHIFT.putIfAbsent(masterUrl,false);  return false;}  }
class C{  public Builder(X509Certificate x509Certificate){  super(x509Certificate);  type=x509Certificate.type;}  }
class C{  public void refreshUpdateDividers() throws Exception {  m_dividers.refreshUpdateDividers();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static void restoreCheckPoint(AbstractFileOutputOperator checkPointWriter,AbstractFileOutputOperator writer){  writer.counts=checkPointWriter.counts;  writer.endOffsets=checkPointWriter.endOffsets;  writer.openPart=checkPointWriter.openPart;  writer.filePath=checkPointWriter.filePath;  writer.maxOpenFiles=checkPointWriter.maxOpenFiles;  writer.replication=checkPointWriter.replication;  writer.totalBytesWritten=checkPointWriter.totalBytesWritten;  writer.maxLength=checkPointWriter.maxLength;  writer.rollingFile=checkPointWriter.rollingFile;  writer.getFileNameToTmpName().putAll(checkPointWriter.getFileNameToTmpName());  writer.getFinalizedFiles().putAll(checkPointWriter.getFinalizedFiles());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType documentTypeNode;  int nodeType;  doc=(Document)load("staff",false);  documentTypeNode=doc.getDoctype();  assertNotNull("doctypeNotNull",documentTypeNode);  nodeType=(int)documentTypeNode.getNodeType();  assertEquals("nodeType",10,nodeType);}  }
class C{  public boolean isValidRegularExpression(final String expressionString){  Check.notNull(expressionString,"expressionString");  if (expressionString.length() == 0) {    return false;  }  try {    Pattern.compile(expressionString,compileFlags);    return true;  } catch (  final PatternSyntaxException e) {    return false;  }}  }
class C{  void invalidateGeneratedFiles(){  if (mFilename != null) {    new File(mFilename).delete();    mFilename=null;  }  if (mBitmapFileName != null) {    new File(mBitmapFileName).delete();    mBitmapFileName=null;  }}  }
class C{  protected static SegmentInfo newSegmentInfo(Directory dir,String name){  return new SegmentInfo(dir,Version.LATEST,name,10000,false,Codec.getDefault(),Collections.emptyMap(),StringHelper.randomId(),new HashMap<>(),null);}  }
class C{  public UniformDelayStrategy(final int delay){  this.delay=delay;}  }
class C{  public void tagRemoveObject2(int depth) throws IOException {  startTag(TAG_REMOVEOBJECT2,false);  out.writeUI16(depth);  completeTag();}  }
class C{  TaskFutureWrapper(IgniteInternalFuture<T> fut){  assert fut != null;  this.fut=fut;}  }
class C{  public boolean zonesetHasMore(WBEMClient client,CIMObjectPath zonesetPath,int removeCount) throws WBEMException {  CloseableIterator<CIMObjectPath> zoneItr=null;  int count=0;  try {    zoneItr=client.associatorNames(zonesetPath,_Brocade_ZoneInZoneSet,_Brocade_Zone,null,null);    while (zoneItr.hasNext()) {      if (zoneItr.next() != null) {        count++;      }      if (count > removeCount) {        return true;      }    }  }  finally {    if (zoneItr != null) {      zoneItr.close();    }  }  return false;}  }
class C{  private void initializeLocalAndTargetInfo() throws Exception {  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);  if (targetSiteInfo == null) {    targetSiteInfo=new SiteInfo();    try {      coordinator.setTargetInfo(targetSiteInfo,false);      log.info("Step1b: Target site info set to: {}",targetSiteInfo);    } catch (    CoordinatorClientException e) {      log.info("Step1b: Wait another control node to set target");      retrySleep();      throw e;    }  }  localVdcPropInfo=localRepository.getVdcPropertyInfo();  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));  targetVdcPropInfo=loadVdcConfig();  if (isGeoUpgradeFromPreYoda()) {    log.info("Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk");    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));    localRepository.setVdcPropertyInfo(localVdcPropInfo);  } else {    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));      localRepository.setVdcPropertyInfo(localVdcPropInfo);      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);      String[] vdcIds=vdc_ids.split(",");      if (vdcIds.length > 1) {        log.info("More than one Vdc, rebooting");        reboot();      }    }  }  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);  if (targetPowerOffState == null) {    try {      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);      log.info("Step1b: Target poweroff state set to: {}",PowerOffState.State.NONE);    } catch (    CoordinatorClientException e) {      log.info("Step1b: Wait another control node to set target");      retrySleep();      throw e;    }  }}  }
class C{  private HttpURLConnection makeConnection(URL url,byte[] postBody,long position,long length,boolean allowGzip,boolean followRedirects) throws IOException {  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setConnectTimeout(connectTimeoutMillis);  connection.setReadTimeout(readTimeoutMillis);synchronized (requestProperties) {    for (    Map.Entry<String,String> property : requestProperties.entrySet()) {      connection.setRequestProperty(property.getKey(),property.getValue());    }  }  if (!(position == 0 && length == C.LENGTH_UNBOUNDED)) {    String rangeRequest="bytes=" + position + "-";    if (length != C.LENGTH_UNBOUNDED) {      rangeRequest+=(position + length - 1);    }    connection.setRequestProperty("Range",rangeRequest);  }  connection.setRequestProperty("User-Agent",userAgent);  if (!allowGzip) {    connection.setRequestProperty("Accept-Encoding","identity");  }  connection.setInstanceFollowRedirects(followRedirects);  connection.setDoOutput(postBody != null);  if (postBody != null) {    connection.setFixedLengthStreamingMode(postBody.length);    connection.connect();    OutputStream os=connection.getOutputStream();    os.write(postBody);    os.close();  } else {    connection.connect();  }  return connection;}  }
class C{  public void attributeAsClassAt(int columnIndex){  Reorder reorder;  String order;  int i;  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    try {      order="";      for (i=1; i < m_Data.numAttributes() + 1; i++) {        if (i == columnIndex) {          continue;        }        if (!order.equals("")) {          order+=",";        }        order+=Integer.toString(i);      }      if (!order.equals("")) {        order+=",";      }      order+=Integer.toString(columnIndex);      reorder=new Reorder();      reorder.setAttributeIndices(order);      reorder.setInputFormat(m_Data);      m_Data=Filter.useFilter(m_Data,reorder);      m_Data.setClassIndex(m_Data.numAttributes() - 1);    } catch (    Exception e) {      e.printStackTrace();      undo();    }    notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));  }}  }
class C{  static public List<Vec> selectIntialPoints(DataSet d,int k,DistanceMetric dm,Random rand,SeedSelection selectionMethod,ExecutorService threadpool){  return selectIntialPoints(d,k,dm,null,rand,selectionMethod,threadpool);}  }
class C{  @Override public void saveValuesAndFlags(){  try {    if (StringUtils.isBlank(pcTextField.getText())) {      cpuStateValidityFlags.pc=0;    } else {      cpuState.pc=Format.parseIntHexField(pcTextField);      cpuStateValidityFlags.pc=1;    }    dumpFieldToRegister(hiTextField,TxCPUState.HI);    dumpFieldToRegister(loTextField,TxCPUState.LO);    dumpBinFieldToRegister(statusTextField,TxCPUState.Status);    dumpBinFieldToRegister(causeTextField,TxCPUState.Cause);    dumpFieldToRegister(epcTextField,TxCPUState.EPC);    dumpFieldToRegister(errorEpcTextField,TxCPUState.ErrorEPC);    for (int i=0; i < regTextFields.length; i++) {      dumpFieldToRegister(regTextFields[i],i);    }  } catch (  NumberFormatException e) {    System.err.println(e.getClass().getName() + " " + e.getMessage());  }}  }
class C{  public double distance(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public boolean moveToFirst(){  try {    return resultSet.first();  } catch (  SQLException e) {    logger.error(e.getMessage(),e);  }  return false;}  }
class C{  public static POOperationRecord toPOOperationRecord(OperationRecord operationRecord,LocalizerFacade facade){  POOperationRecord poOperationRecord=new POOperationRecord();  updatePresentationObject(poOperationRecord,operationRecord);  fillPOOperationRecord(poOperationRecord,operationRecord,facade);  return poOperationRecord;}  }
class C{  public void flush(MemChunkHolder<NonVolatileMemAllocator> mchunk){  m_nvmasvc.flush(m_nid,getChunkAddress(mchunk),0L,true);}  }
class C{  public void open(InputStream in) throws IOException {  table.open(in);}  }
class C{  public void range(IHypercube space,KDSearchResults results){  if (space.contains(region)) {    results.add(this);    return;  }  if (space.intersects(cached)) {    results.add(point);  }  if (space.getLeft(dimension) < coord) {    if (below != null) {      below.range(space,results);    }  }  if (coord < space.getRight(dimension)) {    if (above != null) {      above.range(space,results);    }  }}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public void login(String user,String pass) throws AuthenticationException, DocumentListException {  if (user == null || pass == null) {    throw new DocumentListException("null login credentials");  }  service.setUserCredentials(user,pass);  spreadsheetsService.setUserCredentials(user,pass);}  }
class C{  public static void checkFieldNotEmpty(final String value,final String fieldName){  checkField(StringUtils.isNotEmpty(value),fieldName);}  }
class C{  public static boolean isValidNoColonWWN(String wwn){  return wwn != null && wwn.matches(WWN_NO_COLON_PATTERN);}  }
class C{  public boolean reportInSpec(SootMethod method){  return isSensitiveAction(method) || hasSinkInfoKind(method) || hasSourceInfoKind(method);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void destruct(){  if (released.compareAndSet(false,true)) {    for (int i=0; i < cnt; i++)     lrus[i].destruct();  }}  }
class C{  public static String format(String s,String col){  String s1=(s + padd);  return s1.substring(0,Math.min(col.length(),s1.length()));}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=3;  if (right != null)   cost+=right.costInline(thresh,env,ctx);  for (int i=0; (i < args.length) && (cost < thresh); i++) {    if (args[i] != null) {      cost+=args[i].costInline(thresh,env,ctx);    }  }  return cost;}  }
class C{  private static void adjust(double[] array,int[] indices,int lower,int upper){  int j, k;  int temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (array[indices[k - 1]] < array[indices[k]])) {      k+=1;    }    if (array[indices[j - 1]] < array[indices[k - 1]]) {      temp=indices[j - 1];      indices[j - 1]=indices[k - 1];      indices[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  @org.junit.Test public void testResponseMatching2(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("the dog barks all night");  String response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("barks all night");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("barks all");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  bot.shutdown();}  }
class C{  public static void checkJarHell() throws Exception {  ClassLoader loader=JarHell.class.getClassLoader();  ESLogger logger=Loggers.getLogger(JarHell.class);  if (logger.isDebugEnabled()) {    logger.debug("java.class.path: {}",System.getProperty("java.class.path"));    logger.debug("sun.boot.class.path: {}",System.getProperty("sun.boot.class.path"));    if (loader instanceof URLClassLoader) {      logger.debug("classloader urls: {}",Arrays.toString(((URLClassLoader)loader).getURLs()));    }  }  checkJarHell(parseClassPath());}  }
class C{  public void removeListener(final IBreakpointManagerListener listener){  listeners.removeListener(listener);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){  final int[] awtPixels=new int[width * height];  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);  swtImageData.transparentPixel=TRANSPARENT_COLOR;  final int step=swtImageData.depth / 8;  final byte[] data=swtImageData.data;  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);  for (int i=0; i < height; i++) {    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;    for (int j=0; j < width; j++) {      final int rgb=awtPixels[j + i * width];      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {        data[idx++]=(byte)(rgb >> k & 0xFF);      }    }  }  return swtImageData;}  }
class C{  public GroupFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CHAT_ID,SELECTION_ALL_GROUP_FILETRANSFERS);  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  private void remapIndexes(int start){  remapIndexes(start,getRowCount());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertFalse("nodehasattributes01_1",hasAttributes);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertTrue("nodehasattributes01_2",hasAttributes);}  }
class C{  public boolean isVeryVerboseMode(){  return m_veryVerboseMode;}  }
class C{  public TestDirectory() throws IOException {  this(getTestName());}  }
class C{  public static float log(float fValue){  return (float)Math.log(fValue);}  }
class C{  @Override public void intWrite(ObjectReference src,Address slot,int value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.intWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  private void run3(){  log.info("Starting a run using a different network change events file in each iteration.");  File[] fileList=new File(networkChangeEventsFileDirectory).listFiles();  List<String> files=new ArrayList<>();  int dayCounter=0;  for (  File f : fileList) {    if (f.getName().endsWith(".xml.gz") && f.getName().startsWith("networkChangeEvents_")) {      String delimiter1="_";      String delimiter2=".";      String dateString=StringUtils.explode(StringUtils.explode(f.getName(),delimiter1.charAt(0))[1],delimiter2.charAt(0))[0];      log.info("Day: " + dateString + " --> Iteration #"+ dayCounter);      files.add(f.toString());      dayCounter++;    }  }  Config config=ConfigUtils.loadConfig(configFile);  config.controler().setOverwriteFileSetting(OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles);  config.controler().setOutputDirectory(outputDirectory);  config.network().setTimeVariantNetwork(true);  Controler controler=new Controler(config);  controler.addControlerListener(new IncidentControlerListener(controler,files));  controler.run();}  }
class C{  private void expandNodes(DeLiCluTree index,SpatialPrimitiveDistanceFunction<NV> distFunction,SpatialObjectPair nodePair,Relation<KNNList> knns){  DeLiCluNode node1=index.getNode(((SpatialDirectoryEntry)nodePair.entry1).getPageID());  DeLiCluNode node2=index.getNode(((SpatialDirectoryEntry)nodePair.entry2).getPageID());  if (node1.isLeaf()) {    expandLeafNodes(distFunction,node1,node2,knns);  } else {    expandDirNodes(distFunction,node1,node2);  }  index.setExpanded(nodePair.entry2,nodePair.entry1);}  }
class C{  public CTextField(){  super();  init();}  }
class C{  protected void onBeforeClusterItemRendered(ClusterStatus item,MarkerOptions markerOptions){}  }
class C{  public MassData clone(){  return new MassData(this);}  }
class C{  private void refreshFromServer(){  try {    ListQuery query=new ListQuery(listFeedUrl);    if (!fulltextField.getText().equals("")) {      query.setFullTextQuery(fulltextField.getText());    }    if (!spreadsheetQueryField.getText().equals("")) {      query.setSpreadsheetQuery(spreadsheetQueryField.getText());    }    if (!orderbyField.getText().equals("")) {      query.setOrderBy(orderbyField.getText());    }    ListFeed feed=service.query(query,ListFeed.class);    model.resetEntries(feed.getEntries());  } catch (  ServiceException e) {    SpreadsheetApiDemo.showErrorBox(e);  }catch (  IOException e) {    SpreadsheetApiDemo.showErrorBox(e);  }}  }
class C{  protected ParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,Set<Region> userRegions,int id,int nDispatcher){  super(LoggingThreadGroup.createThreadGroup("Event Processor for GatewaySender_" + sender.getId(),logger),"Event Processor for GatewaySender_" + sender.getId() + "_"+ id,sender);  this.index=id;  this.nDispatcher=nDispatcher;  initializeMessageQueue(sender.getId());  setDaemon(true);}  }
class C{  public String encodeBody(){  StringBuffer encoding=new StringBuffer(dispositionType);  if (!this.parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  public List<Peer> findPeersOfAtLeastVersion(long protocolVersion){  lock.lock();  try {    ArrayList<Peer> results=new ArrayList<Peer>(peers.size());    for (    Peer peer : peers)     if (peer.getPeerVersionMessage().clientVersion >= protocolVersion)     results.add(peer);    return results;  }  finally {    lock.unlock();  }}  }
class C{  void addMethod(MethodObj method){  ArrayList<MethodObj> list=methods.get(method.name);  if (list == null) {    list=new ArrayList<MethodObj>();    methods.put(method.name,list);  } else {  }  list.add(method);}  }
class C{  public void begin(){  Operation op=currOp.get();  if (op != null) {    op.reentries++;    return;  }  op=new Operation();  currOp.set(op);  for (; ; ) {    Operation prev=head.get();    op.previous(prev);    if (head.compareAndSet(prev,op)) {      prev.next(op);      break;    }  }}  }
class C{  static void printThrowable(Throwable theThro,boolean withStack){  try {    if (withStack) {      theThro.printStackTrace(System.out);    }    if (theThro instanceof Exception) {      Exception t=(Exception)theThro;      Method target=null;      String blank=" ";      try {        target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      System.out.println(blank + t.getClass() + "==>"+ t.getMessage());      while (target != null) {        try {          t=(Exception)target.invoke(t,(java.lang.Object[])null);        } catch (        Exception ee) {          t=null;        }        try {          if (t != null) {            blank=blank + "  ";            System.out.println(blank + t.getClass() + "==>"+ t.getMessage());            try {              target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }      try {        target=((Exception)theThro).getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      Throwable err=theThro;      while (target != null) {        try {          err=(Error)target.invoke(err,(java.lang.Object[])null);        } catch (        Exception ee) {          err=null;        }        try {          if (err != null) {            blank=blank + "  ";            System.out.println(blank + err.getClass() + "==>"+ err.getMessage());            if (withStack) {              err.printStackTrace(System.out);            }            try {              target=err.getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }    } else {      System.out.println("Throwable is : " + theThro);    }  } catch (  Throwable x) {    System.out.println("Exception : raised in printException : " + x);  }}  }
class C{  public void scrapeMetadata(){  try {    if (scraper.getMediaProvider() != null) {      MediaScrapeOptions options=new MediaScrapeOptions(MediaType.MOVIE_SET);      options.setTmdbId(Integer.parseInt(result.getId()));      options.setLanguage(LocaleUtils.toLocale(MovieModuleManager.MOVIE_SETTINGS.getScraperLanguage().name()));      options.setCountry(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry());      MediaMetadata info=((IMovieSetMetadataProvider)scraper.getMediaProvider()).getMetadata(options);      if (info != null) {        this.metadata=info;        if (!info.getMediaArt(MediaArtworkType.BACKGROUND).isEmpty()) {          setFanartUrl(info.getMediaArt(MediaArtworkType.BACKGROUND).get(0).getDefaultUrl());        }        for (        MediaMetadata item : info.getSubItems()) {          MovieInSet movie=new MovieInSet(item.getTitle());          try {            movie.setTmdbId(Integer.parseInt(item.getId(MediaMetadata.TMDB).toString()));          } catch (          NumberFormatException ignored) {          }          if (item.getReleaseDate() != null) {            movie.setReleaseDate(new SimpleDateFormat("yyyy-MM-dd").format(item.getReleaseDate()));          }          movies.add(movie);        }        Collections.sort(movies);        matchWithExistingMovies();        this.scraped=true;      }    }  } catch (  Exception e) {    LOGGER.warn("error while scraping metadata",e);  }}  }
class C{  protected final void expire(){  long currentTime=agentInstanceContext.getStatementContext().getSchedulingService().getTime();  long expireBeforeTimestamp=currentTime - timeDeltaComputation.deltaMillisecondsSubtract(currentTime) + 1;  isCallbackScheduled=false;  List<EventBean> releaseEvents=null;  Long oldestKey;  while (true) {    if (sortedEvents.isEmpty()) {      oldestKey=null;      break;    }    oldestKey=(Long)sortedEvents.firstKey();    if (oldestKey >= expireBeforeTimestamp) {      break;    }    Object released=sortedEvents.remove(oldestKey);    if (released != null) {      if (released instanceof List) {        List<EventBean> releasedEventList=(List<EventBean>)released;        if (releaseEvents == null) {          releaseEvents=releasedEventList;        } else {          releaseEvents.addAll(releasedEventList);        }        eventCount-=releasedEventList.size();        internalHandleExpired(oldestKey,releasedEventList);      } else {        EventBean releasedEvent=(EventBean)released;        if (releaseEvents == null) {          releaseEvents=new ArrayList<EventBean>(4);        }        releaseEvents.add(releasedEvent);        eventCount--;        internalHandleExpired(oldestKey,releasedEvent);      }    }  }  if (optionalSortedRandomAccess != null) {    optionalSortedRandomAccess.refresh(sortedEvents,eventCount,eventCount);  }  if (this.hasViews()) {    if ((releaseEvents != null) && (!releaseEvents.isEmpty())) {      EventBean[] oldEvents=releaseEvents.toArray(new EventBean[releaseEvents.size()]);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,timeOrderViewFactory.getViewName(),null,oldEvents);      }      updateChildren(null,oldEvents);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  if (oldestKey == null) {    return;  }  long callbackWait=oldestKey - expireBeforeTimestamp + 1;  agentInstanceContext.getStatementContext().getSchedulingService().add(callbackWait,handle,scheduleSlot);  isCallbackScheduled=true;}  }
class C{  public static boolean hasSignature(File jarFile,String signatureName) throws IOException {  JarFile jar=null;  try {    jar=new JarFile(jarFile);    for (Enumeration<?> jarEntries=jar.entries(); jarEntries.hasMoreElements(); ) {      JarEntry jarEntry=(JarEntry)jarEntries.nextElement();      if (!jarEntry.isDirectory()) {        if ((jarEntry.getName().equalsIgnoreCase(MessageFormat.format(METAINF_FILE_LOCATION,signatureName,DSA_SIG_BLOCK_EXT))) || (jarEntry.getName().equalsIgnoreCase(MessageFormat.format(METAINF_FILE_LOCATION,signatureName,RSA_SIG_BLOCK_EXT)))) {          return true;        }      }    }    return false;  }  finally {    IOUtils.closeQuietly(jar);  }}  }
class C{  public List<NamedRelatedResourceRep> listMatchingStoragePools(BlockVirtualPoolParam input){  StoragePoolList response=client.post(StoragePoolList.class,input,baseUrl + "/matching-pools");  return defaultList(response.getPools());}  }
class C{  public static IntrospectionCache forClass(Class<?> beanClass){  IntrospectionCache introspectionCache;  Object value=classCache.get(beanClass);  if (value instanceof Reference) {    @SuppressWarnings("rawtypes") Reference ref=(Reference)value;    introspectionCache=(IntrospectionCache)ref.get();  } else {    introspectionCache=(IntrospectionCache)value;  }  if (introspectionCache == null) {    introspectionCache=new IntrospectionCache(beanClass);    classCache.put(beanClass,introspectionCache);  }  return introspectionCache;}  }
class C{  public ScCopyMirrorMigrate createMirror(String ssn,String srcId,String dstId) throws StorageCenterAPIException {  Parameters params=new Parameters();  params.add("StorageCenter",ssn);  params.add("SourceVolume",srcId);  params.add("DestinationVolume",dstId);  params.add("CopyReplays",false);  RestResult rr=restClient.post("StorageCenter/ScCopyMirrorMigrate/Mirror",params.toJson());  if (!checkResults(rr)) {    String msg=String.format("Error creating mirror from %s to %s: %s",srcId,dstId,rr.getErrorMsg());    LOG.warn(msg);    throw new StorageCenterAPIException(msg);  }  return gson.fromJson(rr.getResult(),ScCopyMirrorMigrate.class);}  }
class C{  protected void onDisconnect(){  _registered=false;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.paint);  result=HashUtilities.hashCode(result,this.stroke);  return result;}  }
class C{  public CutAction(){  this(null);}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,Class<?> interfaceClass){  while (objectClass != null) {    Class<?>[] ifaces=objectClass.getInterfaces();    for (    Class<?> iface : ifaces) {      if (iface == interfaceClass)       return true;    }    objectClass=objectClass.getSuperclass();  }  return false;}  }
class C{  public ProjectImporter(final File rootFolder){  assertNotNull("Root folder cannot be null.",rootFolder);  assertTrue("Root folder does not exist: " + rootFolder,rootFolder.exists());  assertTrue("Root folder must be a folder. But was a file: " + rootFolder,rootFolder.isDirectory());  assertTrue("Root folder directory content cannot be read: " + rootFolder,rootFolder.canRead());  assertTrue("No files were found in the directory: " + rootFolder,null != rootFolder.listFiles());  this.rootFolder=rootFolder;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (eventName.compareTo("trainingSet") == 0 && (m_trainingProvider != null || m_dataProvider != null || m_instanceProvider != null)) {    return false;  }  if (eventName.compareTo("testSet") == 0 && m_testProvider != null) {    return false;  }  if (eventName.compareTo("instance") == 0 && m_instanceProvider != null || m_trainingProvider != null || m_dataProvider != null) {    return false;  }  return true;}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_BayesNet=bayesNet;  m_instances=instances;  boolean edges[][]=new boolean[maxn() + 1][];  boolean[][] arrows=new boolean[maxn() + 1][];  SeparationSet[][] sepsets=new SeparationSet[maxn() + 1][];  for (int iNode=0; iNode < maxn() + 1; iNode++) {    edges[iNode]=new boolean[maxn()];    arrows[iNode]=new boolean[maxn()];    sepsets[iNode]=new SeparationSet[maxn()];  }  calcDependencyGraph(edges,sepsets);  calcVeeNodes(edges,arrows,sepsets);  calcArcDirections(edges,arrows);  for (int iNode=0; iNode < maxn(); iNode++) {    ParentSet oParentSet=m_BayesNet.getParentSet(iNode);    while (oParentSet.getNrOfParents() > 0) {      oParentSet.deleteLastParent(m_instances);    }    for (int iParent=0; iParent < maxn(); iParent++) {      if (arrows[iParent][iNode]) {        oParentSet.addParent(iParent,m_instances);      }    }  }}  }
class C{  private IPiece createPieceOperator(Context ctx,Scope parent,Operator operator) throws SQLScopeException, ScopeException {  if (operator.getOperatorDefinition().getId() == IntrinsicOperators.EXISTS) {    return createExistsOperator(parent,operator);  } else {    IPiece[] pieces=new IPiece[operator.getArguments().size()];    ExtendedType[] types=new ExtendedType[operator.getArguments().size()];    int i=0;    for (Iterator<ExpressionAST> iter=operator.getArguments().iterator(); iter.hasNext(); i++) {      ExpressionAST argument=iter.next();      IPiece p=createPiece(ctx,parent,argument);      if (p instanceof ITypedPiece) {        types[i]=((ITypedPiece)p).getType();      } else {        types[i]=argument.computeType(this.getSkin());      }      if (operator.getOperatorDefinition().getPosition() != OperatorDefinition.PREFIX_POSITION) {        if (p instanceof OperatorPiece) {          OperatorPiece op=(OperatorPiece)p;          if (operator.getOperatorDefinition().getPrecedenceOrder() <= op.getOpDef().getPrecedenceOrder()) {            p=new OperatorPiece(Operators.IDENTITY,new IPiece[]{p},new ExtendedType[]{types[i]});          }        }      }      pieces[i]=p;    }    return new OperatorPiece(operator.getOperatorDefinition(),pieces,types);  }}  }
class C{  public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  public Value evaluate(Context cx,DefaultXMLNamespaceNode node){  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private PostgreSQLViewCreator(){}  }
class C{  public String saveFile(String handleId,String relativeDirectory,String relativeFile,InputStream inputStream){  String file=fileHandler.append(fileHandler.append(getWorkspaceDirectory(handleId),relativeDirectory),relativeFile);  fileHandler.copy(inputStream,fileHandler.getOutputStream(file));  return file;}  }
class C{  public static void main(String... args) throws IOException {  new Test().test();}  }
class C{  protected void fireProgressUpdate(int type,String task,int frameNumber,int totalFrames){  progressSupport.fireUpdate(type,task,totalFrames,frameNumber);}  }
class C{  public byte[] toSTL(){  return new FormatSTL().toFile(this);}  }
class C{  public int memberOf(){  return theType.memberOf();}  }
class C{  public void testCrucialEmptyPropertiesAreNull(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ConfigurationException e) {    assertFalse("Could not load authentication and securiy information",true);  }  assertNotNull(authInfo);  assertTrue(authInfo.getKeystoreLocation() == null);  assertTrue(authInfo.getTruststoreLocation() == null);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private final void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  void addValue(Class<?> componentType,Object value){  Preconditions.checkArgument(componentType == this.componentType);  values.add(value);}  }
class C{  @Override public boolean checkCondition(final T element){  for (  final IFilter<T> filter : m_filters) {    if (!filter.checkCondition(element)) {      return false;    }  }  return true;}  }
class C{  public final boolean isFillX(){  return fillX;}  }
class C{  public void query(S2Point center,List<S2Point> output){  output.clear();  List<S2CellId> neighbors=Lists.newArrayList();  S2CellId.fromPoint(center).getVertexNeighbors(level,neighbors);  for (  S2CellId id : neighbors) {    for (    MarkedS2Point mp : get(id)) {      if (mp.isMarked()) {        continue;      }      S2Point p=mp.getPoint();      if (center.angle(p) <= searchRadius) {        output.add(p);        mp.mark();      }    }  }}  }
class C{  private static void readDNA(String filename){  try {    LineNumberReader in=new LineNumberReader(new FileReader(filename));    processOneLine(in,"CompilationRates",compilationRates);    processOneLine(in,"SpeedupRates",speedupRates);  } catch (  Exception e) {    e.printStackTrace();    VM.sysFail("Failed to open controller DNA file");  }}  }
class C{  public Ping(){  this.hasNonce=false;}  }
class C{  protected final boolean separatorRequired(Long msgTime){  if (m_currentTimeFrameStartTime + m_framingFlow.getDuration() > msgTime) {    return false;  }  return true;}  }
class C{  @Override public void clear(){  _fields.clear();  if (_childDocuments != null) {    _childDocuments.clear();  }}  }
class C{  public boolean isGetter(){  return type == Token.GET;}  }
class C{  public static final String decode(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    final int off=8 * (i - 1);    long l=obfuscated[i] ^ key;    final int end=Math.min(encoded.length,off + 8);    for (int i2=off; i2 < end; i2++) {      encoded[i2]=(byte)l;      l>>=8;    }  }  final String decoded;  try {    decoded=new String(encoded,"UTF-8");  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  return i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  public PixelMatrixImageNodeTableEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public static void swapPivot(DenseDoubleMatrix2D source,long diag,DenseDoubleMatrix2D s,DenseDoubleMatrix2D t){  long swapRow=diag;  long swapCol=diag;  double maxValue=Math.abs(source.getDouble(diag,diag));  long rows=source.getRowCount();  long cols=source.getColumnCount();  double abs=0;  for (long row=diag; row < rows; row++) {    for (long col=diag; col < cols; col++) {      abs=Math.abs(source.getDouble(row,col));      if (abs > maxValue) {        maxValue=abs;        swapRow=row;        swapCol=col;      }    }  }  if (swapRow != diag) {    swapRows(source,swapRow,diag);    swapRows(t,swapRow,diag);  }  if (swapCol != diag) {    swapCols(source,swapCol,diag);    swapCols(s,swapCol,diag);  }}  }
class C{  protected void nextBlock(){  int y;  int kk;  for (kk=0; kk < N - M; kk++) {    y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);    mt[kk]=mt[kk + M] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);  }  for (; kk < N - 1; kk++) {    y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);    mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);  }  y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);  mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);  this.mti=0;}  }
class C{  public Builder addDefaultLocations(Collection<String> geohashes){  this.defaultLocations.addAll(geohashes);  return this;}  }
class C{  public ArrayList<WalletTableData> createActiveWalletData(final BitcoinController bitcoinController){  return createWalletTableData(bitcoinController,this.getActivePerWalletModelData());}  }
class C{  protected boolean reachedStoppingCriterion(WeightVector w,int epoch,SLParameters params){  if (epochUpdateCount == 0) {    log.info("No errors made. Stopping outer loop because learning is complete!");    return false;  }  return epoch < params.MAX_NUM_ITER;}  }
class C{  public void add(String fieldName,String value){  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");  if (value == null)   throw new IllegalArgumentException("value == null");  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);  }  addLenient(fieldName,value);}  }
class C{  public void message(CanMessage m){  log.debug("Received new message event: " + m);  _id[_rowCount]=CbusMessage.getId(m);  _node[_rowCount]=m.getElement(1) * 256 + m.getElement(2);  _event[_rowCount]=m.getElement(3) * 256 + m.getElement(4);  _type[_rowCount]=(m.getOpCode() & 1) == 0;  addEvent();}  }
class C{  public static boolean maybeEmtpy(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      return maybeEmtpy(r.r1) || maybeEmtpy(r.r2);    }case sym.CONCAT:{    r=(RegExp2)re;    return maybeEmtpy(r.r1) && maybeEmtpy(r.r2);  }case sym.STAR:case sym.QUESTION:return true;case sym.PLUS:{RegExp1 r1=(RegExp1)re;return maybeEmtpy((RegExp)r1.content);}case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return false;case sym.STRING:case sym.STRING_I:{String content=(String)((RegExp1)re).content;return content.length() == 0;}case sym.TILDE:return false;case sym.BANG:{RegExp1 r1=(RegExp1)re;return !maybeEmtpy((RegExp)r1.content);}case sym.MACROUSE:return maybeEmtpy(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unkown expression type " + re.type + " in "+ re);}  }
class C{  public boolean remove(Action a){  return m_actions.remove(a);}  }
class C{  public MD5OutputStream(OutputStream out){  super(out);  md5=new MD5();}  }
class C{  public static void addFooter(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,body body){  body.addElement(new hr());  body.addElement(new comment(" --- Footer Start --- "));  p footer=new p();  footer.addElement(org.compiere.Adempiere.DATE_VERSION + ": ");  footer.addElement(new a("javascript:diag_window();","Window Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:parent.resizeFrame('5,*');","Menu"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_navigator();","Browser Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_request();","Request Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_document();","Document Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_form();","Form Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:toggle('DEBUG');","Servlet Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_source();","Show Source"));  footer.addElement("\n");  body.addElement(footer);  body.addElement(new br());  body.addElement(getServletInfo(request,response,servlet));  body.addElement(new script("hide('DEBUG');"));  body.addElement(new comment(" --- Footer End --- "));}  }
class C{  public Boolean isDiskExtents(){  return diskExtents;}  }
class C{  public void markAsSpent(TransactionInput input){  checkState(availableForSpending);  availableForSpending=false;  spentBy=input;  if (parent != null)   if (log.isDebugEnabled())   log.debug("Marked {}:{} as spent by {}",getParentTransactionHash(),getIndex(),input); else   if (log.isDebugEnabled())   log.debug("Marked floating output as spent by {}",input);}  }
class C{  public void unlinkModel(){  int childCount=getChildCount();  for (int i=childCount - 1; i >= 0; --i) {    BlockView bv=(BlockView)getChildAt(i);    bv.unlinkModel();  }  removeAllViews();}  }
class C{  public void start() throws Exception {  if (dbsvc != null) {    return;  }  DataObjectScanner dataObjectScanner=new DataObjectScanner();  dataObjectScanner.setPackages(modelPackages.toArray(new String[0]));  dataObjectScanner.init();  ServiceImpl dummyDBService=new ServiceImpl();  dummyDBService.setName("dbsvc");  dummyDBService.setVersion("1");  dummyDBService.setEndpoint(URI.create("thrift://localhost:9170"));  dummyDBService.setId("foobar");  SchemaUtil schemaUtil=new SchemaUtil();  schemaUtil.setKeyspaceName("Testing");  schemaUtil.setService(dummyDBService);  schemaUtil.setCoordinator(coordinatorClient);  schemaUtil.setDataObjectScanner(dataObjectScanner);  String config=createConfig(dataDir.getAbsolutePath());  dbsvc=new DbServiceImpl();  dbsvc.setConfig(config);  dbsvc.setSchemaUtil(schemaUtil);  dbsvc.setCoordinator(coordinatorClient);  dbsvc.setService(dummyDBService);  dbsvc.start();}  }
class C{  @NotNull private Capture<String> configureViewToCaptureError(){  final Capture<String> errorMessageCapture=new Capture<String>();  myView.showError(EasyMock.capture(errorMessageCapture));  return errorMessageCapture;}  }
class C{  public CEditGroupCommentAction(final JFrame parent,final CGroupNode node){  super("Edit Group Comment");  Preconditions.checkNotNull(parent,"IE00939: Parent argument can't be null");  Preconditions.checkNotNull(node,"IE00940: Node argument can't be null");  m_parent=parent;  m_node=node;}  }
class C{  public void signal(String processInstanceId,String signalTaskId){  ExecutionQuery signalTaskQuery=runtimeService.createExecutionQuery().processInstanceId(processInstanceId).activityId(signalTaskId);  Execution execution=signalTaskQuery.singleResult();  runtimeService.signal(execution.getId());}  }
class C{  public static boolean amFetcher(){  return isFetcher(Thread.currentThread());}  }
class C{  public Years multipliedBy(int scalar){  return Years.years(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public static Bitmap extractMiniThumb(Bitmap source,int width,int height){  return extractMiniThumb(source,width,height,true);}  }
class C{  public ForeignKey(){  this(null);}  }
class C{  public static boolean sendPushMessage(String token,String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword,String bbUrl,String bbApp,String bbPass,String bbPort){  PushConnection cr=createPushMessage(token,body,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,bbUrl,bbApp,bbPass,bbPort,1,deviceKey);  NetworkManager.getInstance().addToQueueAndWait(cr);  return cr.successful;}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException("Warning: can't output text before document element!  Ignoring...");      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        throw new org.xml.sax.SAXException("Can't have more than one root on a DOM!");      }    }    if (ok)     m_doc.appendChild(newNode);  }}  }
class C{  @Override public void flush() throws IOException {  writeData(false);}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  public ExpressionsFactoryImpl(){  super();}  }
class C{  public static double phred(double error){  return -10 * Math.log10(error);}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _map.size()) {    throw new ConcurrentModificationException();  }  Object[] values=_map._values;  int i=_index;  while (i-- > 0 && !TFloatObjectHashMap.isFull(values,i))   ;  return i;}  }
class C{  @SuppressWarnings({"checkstyle:emptyblock","PMD.AvoidCatchingThrowable","PMD.EmptyCatchBlock"}) public final R retry(Function<T,R> function,T parameter,int timeout){  long start=System.currentTimeMillis();  while ((System.currentTimeMillis() - start) < timeout) {    try {      Thread.sleep(RETRY_TIMEOUT);      return function.apply(parameter);    } catch (    Throwable throwable) {    }  }  return null;}  }
class C{  public boolean open() throws SerialPortException {  if (isOpen()) {    log.warn("Serial port [{}] is already open",portName);    return false;  }  port=new SerialPort(portName);  port.openPort();  return port.isOpened();}  }
class C{  final public void enable_tracing(){}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getNumExpr_();}  }
class C{  private void executeList(String[] args) throws IOException, ServiceException, DocumentListException {  DocumentListFeed feed=null;  String msg="";switch (args.length) {case 1:    msg="List of docs: ";  feed=documentList.getDocsListFeed("all");break;case 2:msg="List of all " + args[1] + ": ";feed=documentList.getDocsListFeed(args[1]);break;case 3:if (args[1].equals("folder")) {msg="Contents of folder_id '" + args[2] + "': ";feed=documentList.getFolderDocsListFeed(args[2]);}break;}if (feed != null) {out.println(msg);for (DocumentListEntry entry : feed.getEntries()) {printDocumentEntry(entry);}} else {printMessage(COMMAND_HELP_LIST);}}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  private void openShell(){  this.shell.setDefaultButton(this.buttonOk);  this.shell.pack();  this.shell.open();  SWTGraphicUtil.centerShell(this.shell);  while (!this.shell.isDisposed()) {    if (!this.shell.getDisplay().readAndDispatch()) {      this.shell.getDisplay().sleep();    }  }}  }
class C{  public UnconfirmedTransactionMetaData(final Deserializer deserializer){  final byte[] rawHash=deserializer.readOptionalBytes("data");  this.innerTransactionHash=null == rawHash ? null : new Hash(rawHash);}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    m_extendedTypeID=0;    super.detach();  }}  }
class C{  public void deleteMetadataEntry(int i){  if (i < metadata.size()) {    metadata.remove(i);  }}  }
class C{  private void sendFileInfoInNewSession(String fileTransferId,String fileInfo,OneToOneFileTransferImpl oneToOneFileTransfer) throws PayloadException, NetworkException {  long timestamp=System.currentTimeMillis();  long timestampSent=timestamp;  mMessagingLog.setFileTransferTimestamps(fileTransferId,timestamp,timestampSent);  ChatMessage firstMsg=ChatUtils.createFileTransferMessage(getRemoteContact(),fileInfo,fileTransferId,timestamp,timestampSent);  OneToOneChatSession chatSession=mImService.createOneToOneChatSession(getRemoteContact(),firstMsg);  chatSession.startSession();  mImService.receiveOneOneChatSessionInitiation(chatSession);  oneToOneFileTransfer.onFileInfoDequeued(getRemoteContact());}  }
class C{  public void reverse(){  double[] objs=this.objs;  int numObjs=this.numObjs;  int l=numObjs / 2;  double obj;  for (int x=0; x < l; x++) {    obj=objs[x];    objs[x]=objs[numObjs - x - 1];    objs[numObjs - x - 1]=obj;  }}  }
class C{  public void firePropertyChange(PropertyChangeID id,Object oldProp,Object newProp){  String pcname=PCIDMap.get(id);  PropertyChangeEvent pce=new PropertyChangeEvent(this,pcname,oldProp,newProp);  log.debug("Firing property change: " + pcname);  firePropertyChange(pce);}  }
class C{  protected static void testNegAlphaInv(String args[]){}  }
class C{  public boolean hasCapacityFor(FluidStack stack){  if (hasContent()) {    if (!hasMatching(stack))     return false;  }  return getAvailableCapacity() >= stack.amount;}  }
class C{  public GeoDistanceBuilder field(String field){  this.field=field;  return this;}  }
class C{  public static int gluUnProject(double winX,double winY,double winZ,double[] model,int modelOffset,double[] project,int projectOffset,int[] view,int viewOffset,double[] obj,int objOffset){  double[] scratch=sScratch;synchronized (scratch) {    final int PM_OFFSET=0;    final int INVPM_OFFSET=16;    final int V_OFFSET=0;    Matrix.multiplyMM(scratch,PM_OFFSET,project,projectOffset,model,modelOffset);    if (!Matrix.invertM(scratch,INVPM_OFFSET,scratch,PM_OFFSET)) {      return GL10.GL_FALSE;    }    scratch[V_OFFSET + 0]=2.0 * (winX - view[viewOffset + 0]) / view[viewOffset + 2] - 1.0;    scratch[V_OFFSET + 1]=2.0 * (winY - view[viewOffset + 1]) / view[viewOffset + 3] - 1.0;    scratch[V_OFFSET + 2]=2.0 * winZ - 1.0;    scratch[V_OFFSET + 3]=1.0;    Matrix.multiplyMV(obj,objOffset,scratch,INVPM_OFFSET,scratch,V_OFFSET);  }  return GL10.GL_TRUE;}  }
class C{  public BruteForceRangeQuery(IMultiPoint[] points){  this.points=new ArrayList<double[]>();  for (int i=0; i < points.length; i++) {    this.points.add(points[i].raw());  }  this.results=points;}  }
class C{  public Long del(final String... keys){  checkIsInMulti();  client.del(keys);  return client.getIntegerReply();}  }
class C{  protected static int validateURI(String srvURI){  try {    URI vURI=new URI(srvURI);    if (vURI.getScheme().equals("ws")) {      return URI_TYPE_WS;    } else     if (vURI.getScheme().equals("wss")) {      return URI_TYPE_WSS;    }    if (!vURI.getPath().equals("")) {      throw new IllegalArgumentException(srvURI);    }    if (vURI.getScheme().equals("tcp")) {      return URI_TYPE_TCP;    } else     if (vURI.getScheme().equals("ssl")) {      return URI_TYPE_SSL;    } else     if (vURI.getScheme().equals("local")) {      return URI_TYPE_LOCAL;    } else {      throw new IllegalArgumentException(srvURI);    }  } catch (  URISyntaxException ex) {    throw new IllegalArgumentException(srvURI);  }}  }
class C{  public void push(JavaKind slotKind,ValueNode x){  assert verifyKind(slotKind,x);  xpush(x);  if (slotKind.needsTwoSlots()) {    xpush(TWO_SLOT_MARKER);  }}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static String stripDigits(final String text){  if (text == null) {    return null;  }  char[] inArray=text.toCharArray();  StringBuilder out=new StringBuilder(inArray.length);  for (int i=0; i < inArray.length; i++) {    char c=inArray[i];    if (Character.isLetter(c) || !Character.isDigit(c))     out.append(c);  }  return out.toString();}  }
class C{  protected Task<T> postTaskURI(Object request,URI uri){  TaskResourceRep task=client.postURI(TaskResourceRep.class,request,uri);  return new Task<T>(client,task,resourceClass);}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public TestHarness(NodeConfig config,CoresLocator coresLocator){  container=new CoreContainer(config,new Properties(),coresLocator);  container.load();  updater=new UpdateRequestHandler();  updater.init(null);}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.814 -0500",hash_original_method="AB0F908D6786932ABD8D14E657997D12",hash_generated_method="FC19AAF618DB17FDDA3CD8A5BD924F10") public WaitingThread nextThread(){  return this.waitingThreads.peek();}  }
class C{  public EmpiricalMeasurementDistribution computeSignificance(int[][] newOrderings) throws Exception {  int numPermutationsToCheck=newOrderings.length;  if (!miComputed) {    computeAverageLocalOfObservations();  }  double actualMI=mi;  EmpiricalMeasurementDistribution measDistribution=new EmpiricalMeasurementDistribution(numPermutationsToCheck);  int countWhereMiIsMoreSignificantThanOriginal=0;  for (int i=0; i < numPermutationsToCheck; i++) {    double newMI=computeAverageLocalOfObservations(newOrderings[i]);    measDistribution.distribution[i]=newMI;    if (debug) {      System.out.println("New MI was " + newMI);    }    if (newMI >= actualMI) {      countWhereMiIsMoreSignificantThanOriginal++;    }  }  mi=actualMI;  measDistribution.pValue=(double)countWhereMiIsMoreSignificantThanOriginal / (double)numPermutationsToCheck;  measDistribution.actualValue=mi;  return measDistribution;}  }
class C{  public short readI16() throws TException {  return (short)zigzagToInt(readVarint32());}  }
class C{  public void removeLogListener(LogListener l){  getLogListeners().remove(l);}  }
class C{  public GasStack draw(int amount,boolean doDraw){  if (stored == null || amount <= 0) {    return null;  }  GasStack ret=new GasStack(getGas().getGas(),Math.min(getStored(),amount));  if (ret.amount > 0) {    if (doDraw) {      stored.amount-=ret.amount;      if (stored.amount <= 0) {        stored=null;      }    }    return ret;  }  return null;}  }
class C{  @Override public MarkupDocument build(){  if (MapUtils.isNotEmpty(globalContext.getSwagger().getDefinitions())) {    applyDefinitionsDocumentExtension(new Context(Position.DOCUMENT_BEFORE,this.markupDocBuilder));    buildDefinitionsTitle(DEFINITIONS);    applyDefinitionsDocumentExtension(new Context(Position.DOCUMENT_BEGIN,this.markupDocBuilder));    buildDefinitionsSection();    applyDefinitionsDocumentExtension(new Context(Position.DOCUMENT_END,this.markupDocBuilder));    applyDefinitionsDocumentExtension(new Context(Position.DOCUMENT_AFTER,this.markupDocBuilder));  }  return new MarkupDocument(markupDocBuilder);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected void shiftYOriginBy(int offset){  yOrigin+=offset;}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public void testMyLinkstatsReaderConstructor(){  String f1=getPackageInputDirectory() + "/dummy.txt";  try {    MyLinkStatsReader mlsr1=new MyLinkStatsReader(f1);    fail("Uncaught exception: dummy file " + f1 + " does not exist.");  } catch (  Exception e) {    log.info("Caught expected exception.");  }  String f2=(new File(getInputDirectory())).getParent() + "/linkstats.txt";  try {    MyLinkStatsReader mlsr2=new MyLinkStatsReader(f2);  } catch (  Exception e) {    fail("Should not have thrown exception: " + f2 + " file exist.");  }}  }
class C{  public static double rRAEfitness(boolean useTrainingData,GEPIndividual ind){  double rRAE=rRAErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rRAE);}  }
class C{  public void test_ConstructorLAttributedCharacterIteratorII$Ljava_text_AttributedCharacterIterator$Attribute(){  try {    new AttributedString(new testAttributedCharacterIterator(),0,0,null);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new AttributedString(new testAttributedCharacterIterator(),-1,0,null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    new AttributedString(new testAttributedCharacterIterator(),0,-1,null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    AttributedCharacterIterator.Attribute[] attributes=new AttributedCharacterIterator.Attribute[1];    attributes[0]=new TestAttributedCharacterIteratorAttribute("test");    new AttributedString(new testAttributedCharacterIterator(),0,0,attributes);  } catch (  IllegalArgumentException e) {    fail("Unexpected expected " + e.toString());  }}  }
class C{  private boolean toRetransmitFinalResponse(int T2){  if (--retransmissionTicksLeft == 0) {    if (2 * prevRetransmissionTicks <= T2)     this.retransmissionTicksLeft=2 * prevRetransmissionTicks; else     this.retransmissionTicksLeft=prevRetransmissionTicks;    this.prevRetransmissionTicks=retransmissionTicksLeft;    return true;  } else   return false;}  }
class C{  public void endDocument() throws SAXException {  if (documentHandler != null)   documentHandler.endDocument();}  }
class C{  public final byte[] generateSignature() throws OpenStegoException {  return null;}  }
class C{  public void deleteWithMissing(int attIndex){  ArrayList<Instance> newInstances=new ArrayList<Instance>(numInstances());  for (int i=0; i < numInstances(); i++) {    if (!instance(i).isMissing(attIndex)) {      newInstances.add(instance(i));    }  }  m_Instances=newInstances;}  }
class C{  public ResultSet executeQuery(String query) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    return st.executeQuery(query);  }  throw new NoConnectionException();}  }
class C{  public static TetradMatrix serializableInstance(){  return new TetradMatrix(0,0);}  }
class C{  public Viennet3(){  super(2,3);}  }
class C{  protected String generateSectionLabel(PieDataset dataset,Comparable key){  String result=null;  if (dataset != null) {    Object[] items=createItemArray(dataset,key);    result=MessageFormat.format(this.labelFormat,items);  }  return result;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private final boolean checkQueuedThreadDependOnCurrentThread(){  for (  ProgressThread pg : queuedThreads) {    if (pg.getDependencies().contains(getID())) {      return true;    }  }  return false;}  }
class C{  @BeforeClass public static void beforeClass() throws SQLException, IOException {  initialUrl=System.getProperty("dbFailoverUrl");  initialGaleraUrl=System.getProperty("defaultGaleraUrl");  initialReplicationUrl=System.getProperty("defaultReplicationUrl");  initialLoadbalanceUrl=System.getProperty("defaultLoadbalanceUrl");  initialAuroraUrl=System.getProperty("defaultAuroraUrl");  jobId=System.getProperty("jobId","_0");  if (initialUrl != null) {    proxyUrl=createProxies(initialUrl,HaMode.NONE);  }  if (initialReplicationUrl != null) {    proxyReplicationUrl=createProxies(initialReplicationUrl,HaMode.REPLICATION);  }  if (initialLoadbalanceUrl != null) {    proxyLoadbalanceUrl=createProxies(initialLoadbalanceUrl,HaMode.LOADBALANCE);  }  if (initialGaleraUrl != null) {    proxyGaleraUrl=createProxies(initialGaleraUrl,HaMode.FAILOVER);  }  if (initialGaleraUrl != null) {    proxySequentialUrl=createProxies(initialGaleraUrl,HaMode.SEQUENTIAL);  }  if (initialAuroraUrl != null) {    proxyAuroraUrl=createProxies(initialAuroraUrl,HaMode.AURORA);    String auroraAccessKey=System.getProperty("AURORA_ACCESS_KEY");    String auroraSecretKey=System.getProperty("AURORA_SECRET_KEY");    auroraClusterIdentifier=System.getProperty("AURORA_CLUSTER_IDENTIFIER");    if (auroraAccessKey != null && auroraSecretKey != null && auroraClusterIdentifier != null) {      BasicAWSCredentials awsCreds=new BasicAWSCredentials(auroraAccessKey,auroraSecretKey);      amazonRDSClient=new AmazonRDSClient(awsCreds);    }  }}  }
class C{  @SuppressWarnings("deprecation") public void execute(ActionFileInto anAction,Mail aMail,final ActionContext context) throws MessagingException {  String destinationMailbox=anAction.getDestination();  MailAddress recipient;  boolean delivered=false;  try {    recipient=ActionUtils.getSoleRecipient(aMail);    MimeMessage localMessage=createMimeMessage(aMail,recipient);    if (!(destinationMailbox.length() > 0 && destinationMailbox.charAt(0) == HIERARCHY_DELIMITER)) {      destinationMailbox=HIERARCHY_DELIMITER + destinationMailbox;    }    final String mailbox=destinationMailbox.replace(HIERARCHY_DELIMITER,'/');    final String host;    if (mailbox.charAt(0) == '/') {      host="@localhost";    } else {      host="@localhost/";    }    final String url="mailbox://" + recipient.getUser() + host+ mailbox;    context.post(url,localMessage);    delivered=true;  } catch (  MessagingException ex) {    final Log log=context.getLog();    if (log.isDebugEnabled()) {      log.debug("Error while storing mail into. " + destinationMailbox,ex);    }    throw ex;  } finally {    aMail.setState(Mail.GHOST);  }  if (delivered) {    final Log log=context.getLog();    if (log.isDebugEnabled()) {      log.debug("Filed Message ID: " + aMail.getMessage().getMessageID() + " into destination: \""+ destinationMailbox+ "\"");    }  }}  }
class C{  public void resetTimeRunning(){  this.timeRunning=0;}  }
class C{  public TranslateRed(CachableRed cr,int xloc,int yloc){  super(cr,new Rectangle(xloc,yloc,cr.getWidth(),cr.getHeight()),cr.getColorModel(),cr.getSampleModel(),cr.getTileGridXOffset() + xloc - cr.getMinX(),cr.getTileGridYOffset() + yloc - cr.getMinY(),null);  deltaX=xloc - cr.getMinX();  deltaY=yloc - cr.getMinY();}  }
class C{  public void dock(DockPane dockPane,DockPos dockPos){  dockImpl(dockPane);  dockPane.dock(this,dockPos);}  }
class C{  public IntKeyMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=DEFAULT_INITIAL_CAPACITY;  table=new IntEntry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  public void startRule(){  if (selectorTokens.size() > 0) {    addSelector();  }  propertyName=null;}  }
class C{  public static boolean hasMirrors(Volume volume){  return volume.getMirrors() != null && !volume.getMirrors().isEmpty();}  }
class C{  public ToAttributedValueConverter(final Class<?> type,final Mapper mapper,final ReflectionProvider reflectionProvider,final ConverterLookup lookup,final String valueFieldName){  this(type,mapper,reflectionProvider,lookup,valueFieldName,null);}  }
class C{  @Override public void run(){  amIActive=true;  String DEMHeader=null;  String watershedHeader=null;  String outputHeader=null;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      DEMHeader=args[i];    } else     if (i == 1) {      watershedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((DEMHeader == null) || (watershedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    double DEM_noData=DEM.getNoDataValue();    WhiteboxRaster watersheds=new WhiteboxRaster(watershedHeader,"r");    if (watersheds.getNumberRows() != rows || watersheds.getNumberColumns() != cols) {      showFeedback("The input images must be the same dimension, i.e. number of " + "rows and columns.");      return;    }    double watersheds_noData=watersheds.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",DEMHeader,WhiteboxRaster.DataType.FLOAT,DEM_noData,0);    output.setPreferredPalette("spectrum.pal");    int minWatershedVal=9999999;    int maxWatershedVal=-9999999;    double[] watershedData;    updateProgress("Loop 1 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          if (watershedData[col] < minWatershedVal) {            minWatershedVal=(int)watershedData[col];          }          if (watershedData[col] > maxWatershedVal) {            maxWatershedVal=(int)watershedData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3",progress);    }    int numWatersheds=maxWatershedVal - minWatershedVal + 1;    double[][] elevations=new double[3][numWatersheds];    for (i=0; i < numWatersheds; i++) {      elevations[0][i]=9999999;      elevations[1][i]=-9999999;    }    double[] data;    int watershedVal;    updateProgress("Loop 2 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            if (z < elevations[0][watershedVal - minWatershedVal]) {              elevations[0][watershedVal - minWatershedVal]=z;            }            if (z > elevations[1][watershedVal - minWatershedVal]) {              elevations[1][watershedVal - minWatershedVal]=z;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3",progress);    }    for (i=0; i < numWatersheds; i++) {      elevations[2][i]=elevations[1][i] - elevations[0][i];    }    updateProgress("Loop 3 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            i=watershedVal - minWatershedVal;            output.setValue(row,col,(z - elevations[0][i]) / elevations[2][i] * 100);          } else {            output.setValue(row,col,DEM_noData);          }        } else {          output.setValue(row,col,DEM_noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    watersheds.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private Node propertyName(Node pn,String name,int memberTypeFlags) throws IOException, ParserException {  String namespace=null;  if (matchToken(Token.COLONCOLON)) {    decompiler.addToken(Token.COLONCOLON);    namespace=name;    int tt=nextToken();switch (tt) {case Token.NAME:      name=ts.getString();    decompiler.addName(name);  break;case Token.MUL:decompiler.addName("*");name="*";break;case Token.LB:decompiler.addToken(Token.LB);pn=nf.createElementGet(pn,namespace,expr(false),memberTypeFlags);mustMatchToken(Token.RB,"msg.no.bracket.index");decompiler.addToken(Token.RB);return pn;default :reportError("msg.no.name.after.coloncolon");name="?";}}pn=nf.createPropertyGet(pn,namespace,name,memberTypeFlags);return pn;}  }
class C{  public AvsSetAlertItem(String token,String type,String scheduledTime){  super(token);  this.type=type;  this.scheduledTime=scheduledTime;}  }
class C{  private void updateContactNotificationSummary(Uri uri){  final Cursor c=query(uri,null,null,null,null);  final String one="1";  if (c == null) {    return;  }  if (c.getCount() != 1) {    c.close();    return;  }  c.moveToFirst();  StringBuilder summary=new StringBuilder("Popup ");  if (one.equals(c.getString(c.getColumnIndexOrThrow(ContactNotifications.POPUP_ENABLED)))) {    summary.append("enabled");  } else {    summary.append("disabled");  }  summary.append(", Notifications ");  if (!one.equals(c.getString(c.getColumnIndexOrThrow(ContactNotifications.ENABLED)))) {    summary.append("disabled");  } else {    summary.append("enabled");    if (one.equals(c.getString(c.getColumnIndexOrThrow(ContactNotifications.VIBRATE_ENABLED)))) {      summary.append(", Vibrate on");    }    if (one.equals(c.getString(c.getColumnIndexOrThrow(ContactNotifications.LED_ENABLED)))) {      String ledColor=c.getString(c.getColumnIndexOrThrow(ContactNotifications.LED_COLOR));      if ("custom".equals(ledColor)) {        ledColor="Custom";      }      summary.append(", " + ledColor + " LED");    }  }  ContentValues vals=new ContentValues();  vals.put(ContactNotifications.SUMMARY,summary.toString());  update(uri,vals,null,null);  c.close();}  }
class C{  public boolean isDestroy(){  return this.opType == OP_TYPE_DESTROY && isEntry();}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 == p2) ? p1 : p2;}  }
class C{  public PaintContext createContext(ColorModel cm,Rectangle deviceBounds,Rectangle2D userBounds,AffineTransform transform,RenderingHints hints){  transform=new AffineTransform(transform);  transform.concatenate(gradientTransform);  try {    return new RadialGradientPaintContext(cm,deviceBounds,userBounds,transform,hints,(float)center.getX(),(float)center.getY(),radius,(float)focus.getX(),(float)focus.getY(),fractions,colors,cycleMethod,colorSpace);  } catch (  NoninvertibleTransformException e) {    throw new IllegalArgumentException("transform should be " + "invertible");  }}  }
class C{  @Override public int hashCode(){  return (this.keys != null ? this.keys.hashCode() : 0);}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      String s=decodeBase900toBase10(numericCodewords,count);      result.append(s);      count=0;    }  }  return codeIndex;}  }
class C{  public CharSeq forEachLine(BiConsumer<CharSeq,Integer> action){  Objects.requireNonNull(action);  Seq<CharSeq> lines=this.eachLine();  lines.forEach(action);  return this;}  }
class C{  public boolean isOverUnderPayment(){  Object oo=get_Value(COLUMNNAME_IsOverUnderPayment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void loadLibraryWithClassLoader(String libName,ClassLoader loader){  SecurityManager sc=System.getSecurityManager();  if (sc != null) {    sc.checkLink(libName);  }  if (loader != null) {    String fullLibName=loader.findLibrary(libName);    if (fullLibName != null) {      loadLibrary(fullLibName,loader,null);      return;    }  }  String path=System.getProperty("java.library.path","");  path+=System.getProperty("vm.boot.library.path","");  loadLibrary(libName,loader,path);}  }
class C{  public BaseDriveRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Drive.class);}  }
class C{  public RSSReader(){  setUIID("RSSReader");  setRenderer(new GenericListCellRenderer(createRendererContainer(),createRendererContainer()));  addActionListener(new EventHandler());}  }
class C{  public void commit() throws RepositoryException {  connection.commit();}  }
class C{  @Override public SysMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  protected static boolean booleanProperty(String name){  return booleanProperty(name,false);}  }
class C{  public static void copyWithGap(Object src,Object dst,int oldSize,int gapIndex){  if (gapIndex > 0) {    System.arraycopy(src,0,dst,0,gapIndex);  }  if (gapIndex < oldSize) {    System.arraycopy(src,gapIndex,dst,gapIndex + 1,oldSize - gapIndex);  }}  }
class C{  Symbol thisSym(DiagnosticPosition pos,Env<AttrContext> env){  return rs.resolveSelf(pos,env,env.enclClass.sym,names._this);}  }
class C{  public void dispose(){  m_tagTree.removeTreeSelectionListener(m_selectionListener);  m_anyTagBox.removeChangeListener(m_checkboxListener);  m_tagManager.removeListener(m_listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.124 -0500",hash_original_method="C580641A4A2388B58215BACCB42FFCE3",hash_generated_method="EFFB58FCEBC512A5D266AB90B7608F70") private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION:    return eBasicSetContainer(null,SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION,msgs);case SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION:  return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-05 00:22:07.163 -0400",hash_original_method="1F172CA874B907B93E2E0AF285D5B96B",hash_generated_method="BB1B8FA31CDDD250DF4D1FA38CFBDE2B") public static int fieldModifiers(){  return PUBLIC | PROTECTED | PRIVATE| STATIC| FINAL| TRANSIENT| VOLATILE;}  }
class C{  public static int median(ModifiableDoubleDBIDList data,int begin,int end){  final int length=end - begin;  assert (length > 0);  final int left=begin + ((length - 1) >> 1);  quickSelect(data,begin,end,left);  return left;}  }
class C{  public boolean contentEquals(CharSequence chars){  if (chars == null)   return false;  if (this._length != chars.length())   return false;  for (int i=_length, j=_offset + _length; --i >= 0; ) {    if (_array[--j] != chars.charAt(i))     return false;  }  return true;}  }
class C{  public static void deleteRecursive(@NonNull File fileOrDirectory,@NonNull List<String> exceptions){  if (exceptions.contains(fileOrDirectory.getName()))   return;  if (fileOrDirectory.isDirectory()) {    File[] filesList=fileOrDirectory.listFiles();    if (filesList != null) {      for (      File child : filesList) {        deleteRecursive(child,exceptions);      }    }  }  fileOrDirectory.delete();}  }
class C{  public void peek(byte[] buf,int off,int len) throws BufferUnderflowException {  if (buf == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > buf.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  } else   if (len > remaining())   throw new BufferUnderflowException();  if (readChunk != null) {    int n=Math.min(readChunk.remaining(),len);    readChunk.mark();    readChunk.get(buf,off,n);    readChunk.reset();    off+=n;    len-=n;    if (len == 0)     return;  }  if (!list.isEmpty()) {    Iterator<ByteBuffer> i=list.iterator();    while (len > 0 && i.hasNext()) {      ByteBuffer src=i.next();      int n=Math.min(src.remaining(),len);      src.mark();      src.get(buf,off,n);      src.reset();      off+=n;      len-=n;    }  }  if (writeChunk != null) {    ByteBuffer src=(ByteBuffer)writeChunk.duplicate().flip();    src.order(order);    int n=Math.min(src.remaining(),len);    src.get(buf,off,n);    off+=n;    len-=n;  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  @Override public String mapSafeAttribute(String elementName,String attributeName){  return attributeName.toLowerCase(Locale.ENGLISH);}  }
class C{  private void createContents(){  shell=new Shell(getParent(),getStyle());  shell.setSize(600,665);  shell.setText(getText());  shell.setLayout(new GridLayout(1,false));}  }
class C{  public static Mapping<LocalDateTime> datetime(Constraint... constraints){  return datetime("yyyy-MM-dd'T'HH:mm:ss.SSS",constraints);}  }
class C{  @SuppressWarnings("deprecation") public int fillXZ(final Vector origin,final BaseBlock block,final double radius,final int depth,final boolean recursive) throws MaxChangedBlocksException {  return this.fillXZ(origin,new SingleBlockPattern(block),radius,depth,recursive);}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public static <T extends Comparable<T>>int nullSafeComparator(T one,T two){  if (one == null ^ two == null) {    return (one == null) ? -1 : 1;  }  if (one == null && two == null) {    return 0;  }  return one.compareTo(two);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 184) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected void generateQuantileSeries(ResultKey key,YIntervalSeriesCollection dataset){  List<DataPoint> dataPoints=new ArrayList<DataPoint>();  for (  Accumulator accumulator : controller.get(key)) {    if (!accumulator.keySet().contains(metric)) {      continue;    }    for (int i=0; i < accumulator.size(metric); i++) {      dataPoints.add(new DataPoint((Integer)accumulator.get("NFE",i),((Number)accumulator.get(metric,i)).doubleValue()));    }  }  Collections.sort(dataPoints);  YIntervalSeries series=new YIntervalSeries(key);  DescriptiveStatistics statistics=new DescriptiveStatistics();  int index=0;  int currentNFE=RESOLUTION;  while (index < dataPoints.size()) {    DataPoint point=dataPoints.get(index);    if (point.getNFE() <= currentNFE) {      statistics.addValue(point.getValue());      index++;    } else {      if (statistics.getN() > 0) {        series.add(currentNFE,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));      }      statistics.clear();      currentNFE+=RESOLUTION;    }  }  if (statistics.getN() > 0) {    if (series.isEmpty()) {      series.add(currentNFE - RESOLUTION,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));    }    series.add(currentNFE,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));  }  dataset.addSeries(series);}  }
class C{  public static boolean isMobileNumber(String number){  String expr="^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$";  return number.matches(expr);}  }
class C{  public void throwing(String sourceClass,String sourceMethod,@GuardSatisfied Throwable thrown){  throw new RuntimeException();}  }
class C{  public static SampleVcpcRunner serializableInstance(){  return new SampleVcpcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  private void dynInit(){  addAttributes();  boolean isGuarantee=true;  boolean isSerial=true;  boolean isLot=true;  if (p_M_AttributeSet_ID > 0) {    MAttributeSet as=new MAttributeSet(Env.getCtx(),p_M_AttributeSet_ID,null);    isGuarantee=as.isGuaranteeDate();    isSerial=as.isSerNo();    isLot=as.isLot();  }  String s=Msg.translate(Env.getCtx(),"GuaranteeDate");  guaranteeDateSelection=new Listbox();  guaranteeDateSelection.setRows(0);  guaranteeDateSelection.setMultiple(false);  guaranteeDateSelection.setMold("select");  guaranteeDateSelection.setWidth("150px");  guaranteeDateSelection.appendItem(s + " <",s + " <");  guaranteeDateSelection.appendItem(s + " =",s + " =");  guaranteeDateSelection.appendItem(s + " >",s + " >");  guaranteeDateSelection.setAttribute("zk_component_ID","InfoPAttributePanel_guaranteeDateSelection");  initLotSelection();  Row row;  Div div;  if (isSerial) {    row=new Row();    rows.appendChild(row);    div=new Div();    div.setAlign("right");    div.appendChild(serNoLabel);    row.appendChild(div);    row.appendChild(serNoField.getComponent());    serNoField.getComponent().setWidth("150px");    serNoField.getComponent().setAttribute("zk_component_ID","InfoPAttributePanel_serNoField");  }  if (isLot) {    row=new Row();    rows.appendChild(row);    div=new Div();    div.setAlign("right");    div.appendChild(lotLabel);    row.appendChild(div);    row.appendChild(lotField.getComponent());    lotField.getComponent().setWidth("150px");    lotField.getComponent().setAttribute("zk_component_ID","InfoPAttributePanel_lotField");    row=new Row();    rows.appendChild(row);    div=new Div();    div.setAlign("right");    div.appendChild(lotLabel2);    row.appendChild(div);    row.appendChild(lotSelection);  }  if (isGuarantee) {    row=new Row();    rows.appendChild(row);    div=new Div();    div.setAlign("right");    div.appendChild(guaranteeDateSelection);    row.appendChild(div);    row.appendChild(guaranteeDateField);    guaranteeDateField.setAttribute("zk_component_ID","InfoPAttributePanel_guaranteeDateField");  }}  }
class C{  public int compareTo(OnePuzzle op){  return (s - op.s);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GL_MAP_RESOURCE_FLAGS_NONE";  }  String result="";  if ((n & CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY) != 0)   result+="CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY ";  if ((n & CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD ";  return result;}  }
class C{  public DefaultMutableTreeNode(Object userObject){  this(userObject,true);}  }
class C{  public ResultFileEvaluator(){  super();}  }
class C{  public Entry(float val,int xIndex,Object data){  this(val,xIndex);  this.mData=data;}  }
class C{  protected IntegerDBIDPair(int first,int second){  this.first=first;  this.second=second;}  }
class C{  public static int calculateSVGDocumentHeight(final SimpleProtein protein,final CondensedView condensedView,final int svgHeaderHeight,final int proteinInfoComponentHeight,final int entryInfoHeight,final int outerSpaceHeight,final int svgFooterHeight){  final int familyComponentHeight=protein.getFamilyComponentHeight(14,50);  final int summaryViewComponentHeight=condensedView.getCondensedViewComponentHeightForSVG(17,70);  final int proteinFeaturesComponentHeight=getProteinFeaturesComponentHeight(protein,30,entryInfoHeight,outerSpaceHeight);  final int proteinXrefComponentHeight=protein.getProteinXrefComponentHeightForSVG(20,70);  return svgHeaderHeight + proteinInfoComponentHeight + familyComponentHeight+ summaryViewComponentHeight+ proteinFeaturesComponentHeight+ proteinXrefComponentHeight+ svgFooterHeight;}  }
class C{  public static void deleteFilesIgnoringExceptions(Collection<? extends Path> files){  for (  Path name : files) {    if (name != null) {      try {        Files.delete(name);      } catch (      Throwable ignored) {      }    }  }}  }
class C{  public CodeSigner(CertPath signerCertPath,Timestamp timestamp){  if (signerCertPath == null) {    throw new NullPointerException();  }  this.signerCertPath=signerCertPath;  this.timestamp=timestamp;}  }
class C{  public static Object convertValueStringToAvroKeyType(Schema schema,String key,String value) throws ParseException {  Type type=null;  if (schema.getField(key) != null) {    type=schema.getField(key).schema().getType();  } else {    return value;  }  Object convertedValue=null;  if (type == Type.UNION) {    convertedValue=convertAndResolveUnionToPrimitive(schema,key,value);  } else {    convertedValue=convertValueToAvroPrimitive(type,key,value);  }  return convertedValue;}  }
class C{  public GenericFeed retrieveAllGroups() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(baseDomainUrl),GenericFeed.class);}  }
class C{  public void putOptions(List<AbstractOption> optionList){  log().info("Put: " + optionList.toString());  PluginOptionContainer container=getPlugin().getPluginOptions();  for (int i=optionList.size() - 1; i >= 0; --i) {    container.add(optionList.get(i));  }}  }
class C{  public void add(DalvInsn insn){  finisher.add(insn);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void start(){  try {    ServerSocket serverSocket=new ServerSocket(joshuaConfiguration.server_port);    LOG.info("** TCP Server running and listening on port {}.",port);    boolean listening=true;    while (listening)     new ServerThread(serverSocket.accept(),decoder,joshuaConfiguration).start();    serverSocket.close();  } catch (  IOException e) {    throw new RuntimeException(String.format("Could not listen on port: %d.",joshuaConfiguration.server_port));  }}  }
class C{  public void onEventMainThread(PrintMsgEvent event){  if (event.type == PrinterMsgType.MESSAGE_TOAST) {    showToast(event.msg);  }}  }
class C{  public boolean isSrcClass(SootClass clz){  return srcClasses.contains(clz.getName());}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  private void zeroPaddingNumber(int value,int minDigits,int maxDigits,StringBuffer buffer){  try {    if (zeroDigit == 0) {      zeroDigit=((DecimalFormat)numberFormat).getDecimalFormatSymbols().getZeroDigit();    }    if (value >= 0) {      if (value < 100 && minDigits >= 1 && minDigits <= 2) {        if (value < 10) {          if (minDigits == 2) {            buffer.append(zeroDigit);          }          buffer.append((char)(zeroDigit + value));        } else {          buffer.append((char)(zeroDigit + value / 10));          buffer.append((char)(zeroDigit + value % 10));        }        return;      } else       if (value >= 1000 && value < 10000) {        if (minDigits == 4) {          buffer.append((char)(zeroDigit + value / 1000));          value%=1000;          buffer.append((char)(zeroDigit + value / 100));          value%=100;          buffer.append((char)(zeroDigit + value / 10));          buffer.append((char)(zeroDigit + value % 10));          return;        }        if (minDigits == 2 && maxDigits == 2) {          zeroPaddingNumber(value % 100,2,2,buffer);          return;        }      }    }  } catch (  Exception e) {  }  numberFormat.setMinimumIntegerDigits(minDigits);  numberFormat.setMaximumIntegerDigits(maxDigits);  numberFormat.format((long)value,buffer,DontCareFieldPosition.INSTANCE);}  }
class C{  public static JsonElement fromUri(Uri uri){  return JSON_SCHEME.equals(uri.getScheme()) ? new JsonParser().parse(uri.getPath()) : null;}  }
class C{  @Override public final boolean put(final Entry row) throws SpaceExceededException {  final int i=indexFor(row);  assert i >= 0 : "i = " + i;  if (i < 0)   return true;  return accessArray(i).put(row);}  }
class C{  protected WebURL handleUrlBeforeProcess(WebURL curURL){  return curURL;}  }
class C{  public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update");  Statement st=null;  ResultSet rs=null;  Timestamp sts=new Timestamp(0);  Timestamp now=new Timestamp(System.currentTimeMillis());  ArrayList<Column> whereClause=new ArrayList<Column>();  ArrayList<Column> values=new ArrayList<Column>();  if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update: " + now);  try {    st=database.createStatement();    rs=st.executeQuery(sourceTsQuery);    if (rs.next())     sts=rs.getTimestamp(1);  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }  long lag_millis=now.getTime() - sts.getTime();  hbId.setValue(KEY);  whereClause.add(hbId);  hbSeqno.setValue(seqno);  hbEventId.setValue(eventId);  hbTargetTstamp.setValue(now);  hbLagMillis.setValue(lag_millis);  values.add(hbSeqno);  values.add(hbEventId);  values.add(hbTargetTstamp);  values.add(hbLagMillis);  database.update(hbTable,whereClause,values);}  }
class C{  private void calculateFieldBlr(final ByteArrayOutputStream bout,final FieldDescriptor field,final int len) throws SQLException {  final int fieldType=field.getType() & ~1;switch (fieldType) {case SQL_VARYING:    bout.write(blr_varying);  bout.write(len);bout.write(len >> 8);break;case SQL_TEXT:bout.write(blr_text);bout.write(len);bout.write(len >> 8);break;case SQL_NULL:bout.write(blr_text);bout.write(0);bout.write(0);break;case SQL_DOUBLE:bout.write(blr_double);break;case SQL_FLOAT:bout.write(blr_float);break;case SQL_D_FLOAT:bout.write(blr_d_float);break;case SQL_TYPE_DATE:bout.write(blr_sql_date);break;case SQL_TYPE_TIME:bout.write(blr_sql_time);break;case SQL_TIMESTAMP:bout.write(blr_timestamp);break;case SQL_BLOB:bout.write(blr_quad);bout.write(0);break;case SQL_ARRAY:bout.write(blr_quad);bout.write(0);break;case SQL_LONG:bout.write(blr_long);bout.write(field.getScale());break;case SQL_SHORT:bout.write(blr_short);bout.write(field.getScale());break;case SQL_INT64:bout.write(blr_int64);bout.write(field.getScale());break;case SQL_QUAD:bout.write(blr_quad);bout.write(field.getScale());break;case SQL_BOOLEAN:bout.write(blr_bool);break;default :throw new FbExceptionBuilder().exception(isc_dsql_sqlda_value_err).toSQLException();}bout.write(blr_short);bout.write(0);}  }
class C{  static boolean isRegistered(ObjectName objectName){  return mbeanServer != null && mbeanServer.isRegistered(objectName);}  }
class C{  public static byte[] generateSalt() throws GeneralSecurityException {  return randomBytes(PBE_SALT_LENGTH_BITS);}  }
class C{  public Object[] constructIndexRowFromEntry(Object... values){  return getIndexData().constructIndexRowFromEntry(values);}  }
class C{  public final int indexOf(int elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  private void dumpFilteredTransitSchedule(String filteredTransitScheduleDumpFile,List<FahrtEvent> fahrtEvents){  TransitSchedule filteredTransitSchedule=new TransitScheduleFactoryImpl().createTransitSchedule();  Set<Id<TransitLine>> lineIds=new TreeSet<>();  for (  FahrtEvent event : fahrtEvents) {    lineIds.add(event.getLineId());  }  log.info("Found " + lineIds.size() + " lines to filter");  for (  Entry<Id<TransitLine>,TransitLine> lineEntry : scenario.getTransitSchedule().getTransitLines().entrySet()) {    for (    Id<TransitLine> lineId : lineIds) {      if (lineEntry.getKey().toString().contains(lineId.toString())) {        filteredTransitSchedule.addTransitLine(lineEntry.getValue());      }    }  }  for (  TransitStopFacility stop : scenario.getTransitSchedule().getFacilities().values()) {    filteredTransitSchedule.addStopFacility(stop);  }  filteredTransitSchedule=TransitScheduleCleaner.removeStopsNotUsed(filteredTransitSchedule);  new TransitScheduleWriterV1(filteredTransitSchedule).write(filteredTransitScheduleDumpFile);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log.d(TAG,"onStartCommand()");  return super.onStartCommand(intent,flags,startId);}  }
class C{  @Override public void doRun(int run) throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  m_ResultProducer.setResultListener(this);  m_ResultProducer.setInstances(m_Instances);  m_ResultProducer.doRun(run);}  }
class C{  @Override protected boolean canTriggerWalking(){  return true;}  }
class C{  public StringContent(){  this(10);}  }
class C{  public StunClientTransaction(StunStack stackCallback,Request request,TransportAddress requestDestination,TransportAddress localAddress,ResponseCollector responseCollector,TransactionID transactionID){  this.stackCallback=stackCallback;  this.request=request;  this.localAddress=localAddress;  this.responseCollector=responseCollector;  this.requestDestination=requestDestination;  initTransactionConfiguration();  this.transactionID=transactionID;  try {    request.setTransactionID(transactionID.getBytes());  } catch (  StunException ex) {    throw new IllegalArgumentException("The TransactionID class generated an invalid transaction" + " ID");  }}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public static KeyMID fromOutboundMessage(Message message){  return new KeyMID(message.getMID(),message.getDestination().getAddress(),message.getDestinationPort());}  }
class C{  private void reset(){  _handler=null;  _depth=0;  _mapping.clear();  _stateInfos.clear();  _colorTypes.clear();  _statePainters.clear();  _stylePainters.clear();}  }
class C{  public String toString(){  String s="Socks5Message:" + "\n" + "VN   " + version + "\n"+ "CMD  "+ command+ "\n"+ "ATYP "+ addrType+ "\n"+ "ADDR "+ host+ "\n"+ "PORT "+ port+ "\n";  return s;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static void multRow(Matrix A,int i,Vec c){  if (A.cols() != c.length())   throw new ArithmeticException("Can not perform row update, length miss match " + A.cols() + " and "+ c.length());  multRow(A,i,0,c.length(),c);}  }
class C{  public static final void randomSeed(IntGrid2D d,HyperCycleParameters p){  final int maxN=p.states;  int x;  int y;  int w=d.getWidth();  int h=d.getHeight();  int cell=0;  for (y=0; y < h; y++) {    for (x=0; x < w; x++) {      cell=p.r.nextInt(maxN);      if (cell == 1) {        cell=p.r.nextInt(maxN);        if (cell == 1) {          cell=p.r.nextInt(maxN);        }      }      d.set(x,y,cell);    }  }}  }
class C{  public void testGetServletNamesForClassWithMultipleServlets() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s3</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletNames=WebXmlUtils.getServletNamesForClass(webXml,"sclass1");  assertEquals(2,servletNames.size());  assertEquals("s1",servletNames.get(0));  assertEquals("s3",servletNames.get(1));}  }
class C{  private static void ReleasePrimitiveArrayCritical(JNIEnvironment env,int arrayJREF,Address arrayCopyAddress,int mode){  if (traceJNI)   VM.sysWrite("JNI called: ReleasePrimitiveArrayCritical \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    VM.enableGC(true);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void persist(RepositoryProxyCache proxyCache){  persist(proxyCache,proxyCache.getFileName());}  }
class C{  public ShardRouting routingEntry(){  return this.shardRouting;}  }
class C{  public String toString(){  return "P(n) where P(n) is the sum of the Manhattan distances" + "\n" + "that each tile is from \"home.\"";}  }
class C{  public void testPartitionedMixed() throws Exception {  mode=PARTITIONED;  nearEnabled=false;  filter=new EvictionFilter();  Ignite g=startGrid();  IgniteCache<Object,Object> cache=g.cache(null);  try {    int id=1;    cache.put(id++,1);    cache.put(id++,2);    for (int i=id + 1; i < 10; i++) {      cache.put(id,id);      cache.put(i,String.valueOf(i));    }    info(">>>> " + cache.get(1));    info(">>>> " + cache.get(2));    info(">>>> " + cache.get(3));  }  finally {    stopGrid();  }}  }
class C{  public void testBug23281() throws Exception {  Properties props=new Driver().parseURL(BaseTestCase.dbUrl,null);  props.setProperty("autoReconnect","false");  props.setProperty("roundRobinLoadBalance","true");  props.setProperty("failoverReadOnly","false");  props.setProperty("connectTimeout","5000");  String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY);  if (!NonRegisteringDriver.isHostPropertiesList(host)) {    String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");    host=host + ":" + port;  }  props.remove("PORT");  props.remove("HOST");  StringBuilder newHostBuf=new StringBuilder();  newHostBuf.append(host);  newHostBuf.append(",");  newHostBuf.append("192.0.2.1");  newHostBuf.append(":65532");  props.remove("PORT");  props.remove("HOST");  Connection failoverConnection=null;  try {    failoverConnection=getConnectionWithProps("jdbc:mysql://" + newHostBuf.toString() + "/",props);    String originalConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    System.out.println(originalConnectionId);    Connection nextConnection=getConnectionWithProps("jdbc:mysql://" + newHostBuf.toString() + "/",props);    String nextId=getSingleIndexedValueWithQuery(nextConnection,1,"SELECT CONNECTION_ID()").toString();    System.out.println(nextId);  }  finally {    if (failoverConnection != null) {      failoverConnection.close();    }  }}  }
class C{  public static CallSite metafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,MethodType samMethodType,MethodHandle implMethod,MethodType instantiatedMethodType){  throw new UnsupportedOperationException();}  }
class C{  public static final int[] readThisIntArrayXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  int num;  try {    num=Integer.parseInt(parser.getAttributeValue(null,"num"));  } catch (  NullPointerException e) {    throw new XmlPullParserException("Need num attribute in byte-array");  }catch (  NumberFormatException e) {    throw new XmlPullParserException("Not a number in num attribute in byte-array");  }  int[] array=new int[num];  int i=0;  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      if (parser.getName().equals("item")) {        try {          array[i]=Integer.parseInt(parser.getAttributeValue(null,"value"));        } catch (        NullPointerException e) {          throw new XmlPullParserException("Need value attribute in item");        }catch (        NumberFormatException e) {          throw new XmlPullParserException("Not a number in value attribute in item");        }      } else {        throw new XmlPullParserException("Expected item tag at: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return array;      } else       if (parser.getName().equals("item")) {        i++;      } else {        throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());      }    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  @Override protected void doNewState(int oldState,int newState){  CanMessage m;  if (newState == ON) {    m=addrOn.makeMessage(tc.getCanid());    tc.sendCanMessage(m,this);  } else   if (newState == OFF) {    m=addrOff.makeMessage(tc.getCanid());    tc.sendCanMessage(m,this);  } else {    log.warn("illegal state requested for Light: " + getSystemName());  }}  }
class C{  public ExportWindow(){  super("Export...");  setBounds(100,100,500,475);  contentPane=new JPanel();  prefs=MainWindow.settings.getPreferences();  ToolTipManager.sharedInstance().setInitialDelay(0);  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.Y_AXIS));  holderTop=new JPanel();  contentPane.add(holderTop);  holderTop.setLayout(new BoxLayout(holderTop,BoxLayout.X_AXIS));  holderLeft=new JPanel();  holderTop.add(holderLeft);  holderLeft.setLayout(new BoxLayout(holderLeft,BoxLayout.Y_AXIS));  JPanel pMapExportOffset=new JPanel();  holderLeft.add(pMapExportOffset);  pMapExportOffset.setBorder(new TitledBorder(new BevelBorder(BevelBorder.LOWERED,null,null,null,null),Messages.getString("OBJExportOptions.OFFSET"),TitledBorder.CENTER,TitledBorder.TOP,null,new Color(0,0,0)));  ButtonGroup gOffset=new ButtonGroup();  pMapExportOffset.setLayout(new BoxLayout(pMapExportOffset,BoxLayout.Y_AXIS));  holderMapScale=new JPanel();  pMapExportOffset.add(holderMapScale);  holderMapScale.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));  JLabel lblMapScale=new JLabel(Messages.getString("OBJExportOptions.MAP_SCALE"));  holderMapScale.add(lblMapScale);  textFieldMapScale=new JTextField();  holderMapScale.add(textFieldMapScale);  textFieldMapScale.setColumns(10);  holderOffset=new JPanel();  pMapExportOffset.add(holderOffset);  JPanel holderOffsetBtns=new JPanel();  holderOffset.add(holderOffsetBtns);  rdbtnNone=new JRadioButton(Messages.getString("OBJExportOptions.NONE"));  rdbtnNone.setSelected(true);  gOffset.add(rdbtnNone);  rdbtnCenter=new JRadioButton(Messages.getString("OBJExportOptions.CENTER"));  gOffset.add(rdbtnCenter);  rdbtnCustom=new JRadioButton(Messages.getString("OBJExportOptions.CUSTOM"));  gOffset.add(rdbtnCustom);  holderOffsetBtns.setLayout(new BoxLayout(holderOffsetBtns,BoxLayout.Y_AXIS));  holderOffsetBtns.add(rdbtnNone);  holderOffsetBtns.add(rdbtnCenter);  holderOffsetBtns.add(rdbtnCustom);  holderOffsetFields=new JPanel();  holderOffset.add(holderOffsetFields);  holderOffsetFields.setLayout(new BoxLayout(holderOffsetFields,BoxLayout.Y_AXIS));  holderXOffset=new JPanel();  holderOffsetFields.add(holderXOffset);  holderXOffset.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));  JLabel lblX=new JLabel("X:");  holderXOffset.add(lblX);  txtX=new JTextField();  holderXOffset.add(txtX);  txtX.setText("0");  txtX.setColumns(10);  holderYOffset=new JPanel();  holderOffsetFields.add(holderYOffset);  JLabel lblY=new JLabel("Y:");  holderYOffset.add(lblY);  txtZ=new JTextField();  holderYOffset.add(txtZ);  txtZ.setText("0");  txtZ.setColumns(10);  if (!rdbtnCustom.isSelected()) {    txtX.setEnabled(false);    txtZ.setEnabled(false);  }  JPanel pTextureOptions=new JPanel();  holderLeft.add(pTextureOptions);  pTextureOptions.setBorder(new TitledBorder(new BevelBorder(BevelBorder.LOWERED,null,null,null,null),Messages.getString("TexsplitDialog.WIN_TITLE"),TitledBorder.CENTER,TitledBorder.TOP,null,null));  pTextureOptions.setLayout(new BoxLayout(pTextureOptions,BoxLayout.Y_AXIS));  holderPreScale=new JPanel();  holderPreScale.setBorder(new EmptyBorder(5,5,5,5));  pTextureOptions.add(holderPreScale);  holderPreScale.setLayout(new BoxLayout(holderPreScale,BoxLayout.X_AXIS));  JLabel lblPrescaleTextures=new JLabel(Messages.getString("TexsplitDialog.PRESCALE"));  holderPreScale.add(lblPrescaleTextures);  cboxTexScale=new JComboBox<String>();  holderPreScale.add(cboxTexScale);  cboxTexScale.setMaximumRowCount(16);  cboxTexScale.setModel(new DefaultComboBoxModel<String>(new String[]{"1x","2x","4x","8x","16x"}));  cboxTexScale.setMaximumSize(cboxTexScale.getPreferredSize());  holderTexExport=new JPanel();  holderTexExport.setBorder(new EmptyBorder(5,5,5,5));  pTextureOptions.add(holderTexExport);  holderTexExport.setLayout(new BoxLayout(holderTexExport,BoxLayout.Y_AXIS));  chckbxSeparateAlphaTexture=new JCheckBox(Messages.getString("TexsplitDialog.EXP_ALPHA"));  chckbxSeparateAlphaTexture.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(chckbxSeparateAlphaTexture);  chckbxCombineAllTextures=new JCheckBox(Messages.getString("TexsplitDialog.EXP_SINGLE"));  chckbxCombineAllTextures.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(chckbxCombineAllTextures);  chckbxExportSeparateLight=new JCheckBox(Messages.getString("ExportWindow.chckbxExportSeparateLight.text"));  chckbxExportSeparateLight.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(chckbxExportSeparateLight);  JLabel lblExportTexturesFrom=new JLabel(Messages.getString("TexsplitDialog.TEX_LOC"));  lblExportTexturesFrom.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(lblExportTexturesFrom);  btnMinecraftDefault=new JButton(Messages.getString("TexsplitDialog.MINECRAFT"));  btnMinecraftDefault.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(btnMinecraftDefault);  btnCustomResourcePack=new JButton(Messages.getString("TexsplitDialog.CUSTOM"));  btnCustomResourcePack.setAlignmentX(Component.CENTER_ALIGNMENT);  holderTexExport.add(btnCustomResourcePack);  JPanel pCloudExport=new JPanel();  pTextureOptions.add(pCloudExport);  pCloudExport.setBorder(new BevelBorder(BevelBorder.LOWERED,null,null,null,null));  pCloudExport.setLayout(new BoxLayout(pCloudExport,BoxLayout.X_AXIS));  holderCloudExports=new JPanel();  holderCloudExports.setBorder(new EmptyBorder(5,5,5,5));  pCloudExport.add(holderCloudExports);  holderCloudExports.setAlignmentX(Component.RIGHT_ALIGNMENT);  holderCloudExports.setLayout(new BoxLayout(holderCloudExports,BoxLayout.Y_AXIS));  JLabel lblExportCloudsObj=new JLabel(Messages.getString("TexsplitDialog.EXP_CLOUDS"));  lblExportCloudsObj.setAlignmentX(Component.CENTER_ALIGNMENT);  holderCloudExports.add(lblExportCloudsObj);  lblExportCloudsObj.setHorizontalAlignment(SwingConstants.CENTER);  btnMinecraftTextures=new JButton(Messages.getString("TexsplitDialog.MINECRAFT"));  btnMinecraftTextures.setAlignmentX(Component.CENTER_ALIGNMENT);  holderCloudExports.add(btnMinecraftTextures);  btnFromResourcePack=new JButton(Messages.getString("TexsplitDialog.CUSTOM"));  btnFromResourcePack.setAlignmentX(Component.CENTER_ALIGNMENT);  holderCloudExports.add(btnFromResourcePack);  JPanel pExportOptions=new JPanel();  holderTop.add(pExportOptions);  pExportOptions.setBorder(new TitledBorder(new BevelBorder(BevelBorder.LOWERED,null,null,null,null),Messages.getString("OBJExportPanel.WIN_TITLE"),TitledBorder.CENTER,TitledBorder.TOP,null,null));  pExportOptions.setLayout(new BoxLayout(pExportOptions,BoxLayout.Y_AXIS));  btnBlocksToExport=new JButton(Messages.getString("OBJExportOptions.BLOCKS"));  pExportOptions.add(btnBlocksToExport);  chckbxRenderUnknownBlocks=new JCheckBox(Messages.getString("OBJExportOptions.R_UNKNOWN"));  pExportOptions.add(chckbxRenderUnknownBlocks);  chckbxRenderWorldSides=new JCheckBox(Messages.getString("OBJExportOptions.R_SIDES"));  pExportOptions.add(chckbxRenderWorldSides);  chckbxRenderBiomes=new JCheckBox(Messages.getString("OBJExportOptions.R_BIOMES"));  pExportOptions.add(chckbxRenderBiomes);  chckbxRenderEntities=new JCheckBox(Messages.getString("OBJExportOptions.R_ENTITIES"));  pExportOptions.add(chckbxRenderEntities);  chckbxConvertOreTo=new JCheckBox(Messages.getString("OBJExportOptions.CONVERTORES"));  pExportOptions.add(chckbxConvertOreTo);  chckbxSeparateMat=new JCheckBox(Messages.getString("OBJExportOptions.SEP_OBJ_MTL"));  pExportOptions.add(chckbxSeparateMat);  chckbxSeparateMatOccl=new JCheckBox(Messages.getString("OBJExportOptions.SEP_OBJ_MTL_OCCL"));  pExportOptions.add(chckbxSeparateMatOccl);  chckbxSeparateChunk=new JCheckBox(Messages.getString("OBJExportOptions.SEP_OBJ_CHUNK"));  pExportOptions.add(chckbxSeparateChunk);  holderSepBlock=new JPanel();  holderSepBlock.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderSepBlock);  holderSepBlock.setLayout(new BoxLayout(holderSepBlock,BoxLayout.X_AXIS));  chckbxSeparateBlock=new JCheckBox(Messages.getString("OBJExportOptions.SEP_OBJ_BLOCK"));  holderSepBlock.add(chckbxSeparateBlock);  JLabel lblSepBlockWarn=new JLabel("!!!");  holderSepBlock.add(lblSepBlockWarn);  lblSepBlockWarn.setFont(new Font("Tahoma",Font.BOLD,11));  lblSepBlockWarn.setToolTipText(Messages.getString("OBJExportOptions.SEP_OBJ_BLOCK_WARNING"));  lblSepBlockWarn.setForeground(Color.RED);  chckbxGeoOpt=new JCheckBox(Messages.getString("OBJExportOptions.OPTIMIZE_MESH"));  pExportOptions.add(chckbxGeoOpt);  chckbxMergeVerticies=new JCheckBox(Messages.getString("OBJExportOptions.DUPL_VERT"));  pExportOptions.add(chckbxMergeVerticies);  holderOneMat=new JPanel();  holderOneMat.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderOneMat);  holderOneMat.setLayout(new BoxLayout(holderOneMat,BoxLayout.X_AXIS));  chckbxSingleMat=new JCheckBox(Messages.getString("OBJExportOptions.SINGLE_MTL"));  holderOneMat.add(chckbxSingleMat);  JLabel lblOneMatHelp=new JLabel("???");  holderOneMat.add(lblOneMatHelp);  lblOneMatHelp.setToolTipText(Messages.getString("OBJExportOptions.SINGLE_MTL_HELP"));  lblOneMatHelp.setForeground(Color.RED);  lblOneMatHelp.setFont(new Font("Tahoma",Font.BOLD,11));  holderSingleTex=new JPanel();  holderSingleTex.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderSingleTex);  holderSingleTex.setLayout(new BoxLayout(holderSingleTex,BoxLayout.X_AXIS));  chckbxSingleTexture=new JCheckBox(Messages.getString("OBJExportOptions.SINGLE_TEX"));  holderSingleTex.add(chckbxSingleTexture);  JLabel lblSingleTexHelp=new JLabel("???");  holderSingleTex.add(lblSingleTexHelp);  lblSingleTexHelp.setToolTipText(Messages.getString("OBJExportOptions.SINGLE_TEX_HELP"));  lblSingleTexHelp.setFont(new Font("Tahoma",Font.BOLD,11));  lblSingleTexHelp.setForeground(Color.RED);  holderUV=new JPanel();  holderUV.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderUV);  holderUV.setLayout(new BoxLayout(holderUV,BoxLayout.X_AXIS));  textFieldSingleTexUV=new JTextField();  textFieldSingleTexUV.setColumns(24);  textFieldSingleTexUV.setMaximumSize(new Dimension(Integer.MAX_VALUE,textFieldSingleTexUV.getPreferredSize().height));  holderUV.add(textFieldSingleTexUV);  btnBrowseUV=new JButton(Messages.getString("OBJExportPanel.BROWSE"));  holderUV.add(btnBrowseUV);  holderThreads=new JPanel();  holderThreads.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderThreads);  holderThreads.setLayout(new FlowLayout(FlowLayout.LEFT));  SpinnerNumberModel threadSpinnerModel=new SpinnerNumberModel(8,1,64,1);  spinnerThreads=new JSpinner(threadSpinnerModel);  holderThreads.add(spinnerThreads);  JLabel lblThreadsText=new JLabel(Messages.getString("OBJExportOptions.EXPORT_THREADS"));  holderThreads.add(lblThreadsText);  JLabel lblThreadsHelp=new JLabel("???");  holderThreads.add(lblThreadsHelp);  lblThreadsHelp.setToolTipText(Messages.getString("OBJExportOptions.EXPORT_THREADS_HELP"));  lblThreadsHelp.setFont(new Font("Tahoma",Font.BOLD,11));  lblThreadsHelp.setForeground(Color.RED);  JLabel lblThreadsWarn=new JLabel("!!!");  holderThreads.add(lblThreadsWarn);  lblThreadsWarn.setToolTipText(Messages.getString("OBJExportOptions.EXPORT_THREADS_WARN"));  lblThreadsWarn.setFont(new Font("Tahoma",Font.BOLD,11));  lblThreadsWarn.setForeground(Color.RED);  holderExportPanel=new JPanel();  holderExportPanel.setAlignmentX(Component.LEFT_ALIGNMENT);  pExportOptions.add(holderExportPanel);  holderExportPanel.setLayout(new BoxLayout(holderExportPanel,BoxLayout.Y_AXIS));  chckbxUseLastSaveLoc=new JCheckBox(Messages.getString("OBJExportOptions.USE_LAST_SAVE_LOC"));  chckbxUseLastSaveLoc.setAlignmentX(Component.CENTER_ALIGNMENT);  holderExportPanel.add(chckbxUseLastSaveLoc);  holderExportBtns=new JPanel();  holderExportPanel.add(holderExportBtns);  btnStartExport=new JButton(Messages.getString("OBJExportPanel.EXPORT_BTN"));  if (Options.worldDir == null) {    btnStartExport.setEnabled(false);  }  holderExportBtns.add(btnStartExport);  btnForceStop=new JButton(Messages.getString("OBJExportPanel.STOP_BTN"));  holderExportBtns.add(btnForceStop);  btnForceStop.setEnabled(false);  progressBar=new JProgressBar();  progressBar.setStringPainted(true);  contentPane.add(progressBar);  loadSettings();  addActionListenersToAll();  pack();}  }
class C{  @Override public void printStackTrace(final PrintStream out){synchronized (out) {    PrintWriter pw=new PrintWriter(out,false);    printStackTrace(pw);    pw.flush();  }}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public V put(K key,V value){  if (value == null) {    throw new NullPointerException();  }  int hash=hash(key,null,null,null);  return segmentFor(hash).put(key,null,null,null,hash,value,false);}  }
class C{  protected Log(){}  }
class C{  private void stopTempNodes(){  Collection<Ignite> toRmv=new ArrayList<>(alive.subList(0,TMP_NODES_CNT));  alive.removeAll(toRmv);  for (  Ignite g : toRmv)   g.events().stopLocalListen(lsnr,EventType.EVT_NODE_LEFT,EventType.EVT_NODE_FAILED);  for (Iterator<Ignite> itr=toRmv.iterator(); itr.hasNext(); ) {    Ignite g=itr.next();    if (g.cluster().localNode().isClient()) {      G.stop(g.name(),false);      itr.remove();    }  }  for (  Ignite g : toRmv) {    assert !g.cluster().localNode().isClient();    G.stop(g.name(),false);  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.665 -0500",hash_original_method="C92B83B60B03C2CCAA2954674526918C",hash_generated_method="C10A7094A82089B77B56F1557666283F") public Response createResponse(int statusCode,Request request) throws ParseException {  if (request == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.removeContent();  sipResponse.removeHeader(ContentTypeHeader.NAME);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public static List<String> extractOutcomeLabelsFromPredictions(File predictionsFile,BidiMap labelsToIntegersMapping) throws IOException {  List<String> result=new ArrayList<>();  for (  String line : FileUtils.readLines(predictionsFile)) {    Integer intLabel=Integer.valueOf(line);    String outcomeLabel=(String)labelsToIntegersMapping.getKey(intLabel);    result.add(outcomeLabel);  }  return result;}  }
class C{  public BurlapRemote(String type,String url){  this.type=type;  this.url=url;}  }
class C{  public String globalInfo(){  return "Matches substrings in String attributes using " + "either literal or regular expression matches. " + "The value of a new attribute is set to reflect"+ " the status of the match. The new attribute can "+ "be either binary (in which case values indicate "+ "match or no match) or multi-valued nominal, "+ "in which case a label must be associated with each "+ "distinct matching rule. In the case of labeled matches, "+ "the user can opt to have non matching instances output "+ "with missing value set for the new attribute or not"+ " output at all (i.e. consumed by the step).";}  }
class C{  protected void initProduceYeast(){  tempItemList.clear();  final BiomeGenBase biome=getCurrentBiome();  if (biome != null) {    final IYeastRegistry reg=CellarRegistry.instance().yeast();{      final Collection<WeightedItemStack> yl=reg.getYeastListForBiomeName(biome.biomeName);      if (yl != null) {        tempItemList.addAll(yl);      }    }    for (    Type t : BiomeDictionary.getTypesForBiome(biome)) {      final Collection<WeightedItemStack> yeastList=reg.getYeastListForBiomeType(t);      if (yeastList != null) {        tempItemList.addAll(yeastList);      }    }    if (tempItemList.size() > 0) {      final WeightedItemStack weightedItemStack=(WeightedItemStack)WeightedRandom.getRandomItem(getWorld().rand,tempItemList);      if (weightedItemStack != null && weightedItemStack.itemStack != null) {        final ItemStack result=weightedItemStack.itemStack.copy();        invSlot.set(result);        consumeFluid();      }    }  }}  }
class C{  public boolean isDurableSubscriber(){  return isTopic && durableName != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static public void assertTrue(String message,boolean condition){  if (!condition)   fail(message);}  }
class C{  public static int truncatedCompareTo(final Date date1,final Date date2,final int field){  final Date truncatedDate1=truncate(date1,field);  final Date truncatedDate2=truncate(date2,field);  return truncatedDate1.compareTo(truncatedDate2);}  }
class C{  public static String toMapString(Map arg){  return toMapString(arg,-1);}  }
class C{  private boolean trySetUserFieldPosition(int order){  if (order != BinarySchema.ORDER_NOT_FOUND) {    int offsetPos=footerStart + order * (fieldIdLen + fieldOffLen) + fieldIdLen;    int pos=start + BinaryUtils.fieldOffsetRelative(in,offsetPos,fieldOffLen);    streamPosition(pos);    return true;  } else   return false;}  }
class C{  public static void modifyFile(File file,Function<String,String> modifier) throws IOException {  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);  String result=modifier.apply(content);  Files.write(result.getBytes(StandardCharsets.UTF_8),file);}  }
class C{  public static BinaryMessage correctPDU3(BinaryMessage message){  return correctPDU(message,PDU3_CHECKSUMS,416);}  }
class C{  public void registerProvider(Class<?> dtoInterface,DtoProvider<?> provider){  dtoInterface2Providers.put(dtoInterface,provider);  dtoImpl2Providers.put(provider.getImplClass(),provider);}  }
class C{  final void retrieveRecommendations(){  new ListOfRecommendationsAsyncRetriever().execute(currentPlace);}  }
class C{  public JSONObject sendHarbormasterUri(String phid,String buildUri) throws ConduitAPIException, IOException {  return new HarbormasterClient(conduit).sendHarbormasterUri(phid,buildUri);}  }
class C{  public void test_getPeerHost() throws Exception {  SSLSession s=clientSession;  assertEquals(InetAddress.getLocalHost().getHostName(),s.getPeerHost());  assertEquals(serverSocket.getLocalPort(),s.getPeerPort());}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  return m_reader.read(cbuf,off,len);}  }
class C{  public boolean isEmpty(){  return range.isEmpty();}  }
class C{  public static void writeNbest(List<RichTranslation<IString,String>> translations,int sourceInputId,String outputType,Pattern featurePattern,PrintStream nbestListWriter){  Objects.requireNonNull(translations);  Objects.requireNonNull(outputType);  Objects.requireNonNull(nbestListWriter);  StringBuilder sb=new StringBuilder(translations.size() * 500);  String nl=System.getProperty("line.separator");  for (  RichTranslation<IString,String> translation : translations) {    if (outputType.equals("moses")) {      translation.nbestToMosesStringBuilder(sourceInputId,sb,featurePattern,false,false);    } else     if (outputType.equals("bolt")) {      translation.nbestToMosesStringBuilder(sourceInputId,sb,featurePattern,true,false);    } else     if (outputType.equals("nnlm")) {      translation.nbestToMosesStringBuilder(sourceInputId,sb,featurePattern,false,true);    } else     if (outputType.equals("nnlm-bolt")) {      translation.nbestToMosesStringBuilder(sourceInputId,sb,featurePattern,true,true);    } else {      sb.append(sourceInputId).append(" ").append(CompiledPhraseTable.FIELD_DELIM).append(" ").append(String.format("%.5f",translation.score)).append(" ").append(CompiledPhraseTable.FIELD_DELIM).append(" ").append(translation.translation.toString());    }    sb.append(nl);  }  nbestListWriter.append(sb.toString());}  }
class C{  private void overrideHardwareMenuButton(){  try {    final ViewConfiguration config=ViewConfiguration.get(this);    final Field menuKeyField=ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");    if (menuKeyField != null) {      menuKeyField.setAccessible(true);      menuKeyField.setBoolean(config,false);    }  } catch (  final Exception ex) {  }}  }
class C{  public URLEntry take(){  try {    return this.queue.take();  } catch (  final InterruptedException e) {    return POISON_URLEntry;  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getHomeTitleDBDao() : null;}  }
class C{  @Override protected Node createKeyInfoContent(SoapMessage message) throws ParserException {  String bstId=Util.randomNCNameUUID();  NodeList secNodeList=message.getMessage().getSOAPPart().getElementsByTagNameNS(Constants.WSSE_NAMESPACE,SECURITY_ELEMENT);  if (secNodeList.getLength() != 1) {    throw new ParserException("No/too many security elements found");  }  secNodeList.item(0).appendChild(message.getMessage().getSOAPPart().importNode(createBinarySecurityToken(bstId),true));  return createSecurityTokenReference(bstId);}  }
class C{  public TLongHash(TLongHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("doGet");  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  if (ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(wsc.ctx);  } else {    doc=CreateChatPage(ws,wsc,doc,0);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  private TagTypeEntity createTagTypeEntity(String tagTypeCode,String displayName,int tagTypeOrder){  TagTypeEntity tagTypeEntity=new TagTypeEntity();  tagTypeEntity.setCode(tagTypeCode);  tagTypeEntity.setDisplayName(displayName);  tagTypeEntity.setOrderNumber(tagTypeOrder);  return tagTypeDao.saveAndRefresh(tagTypeEntity);}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  public SootMethod(String name,List parameterTypes,Type returnType,int modifiers,List<SootClass> thrownExceptions){  this.name=name;  this.parameterTypes=new ArrayList();  this.parameterTypes.addAll(parameterTypes);  this.parameterTypes=Collections.unmodifiableList(this.parameterTypes);  this.returnType=returnType;  this.modifiers=modifiers;  if (exceptions == null && !thrownExceptions.isEmpty()) {    exceptions=new ArrayList<SootClass>();    this.exceptions.addAll(thrownExceptions);  }  Scene.v().getMethodNumberer().add(this);  subsignature=Scene.v().getSubSigNumberer().findOrAdd(getSubSignature());}  }
class C{  @Override public void draw(Graphics2D g){  drawPresentationFigure(g);  super.draw(g);}  }
class C{  public static void print(int year,ArrayList<String> b,ArrayList<String> g){  System.out.printf("%5d  ",year);  for (int i=0; i < 5; i++) {    System.out.print(g.get(i));    print(g.get(i));  }  for (int i=0; i < 5; i++) {    System.out.print(b.get(i) + "  ");    print(b.get(i));  }  System.out.println();}  }
class C{  @Inline public void addEvent(EventType et,int ival1,int ival2,double dval1){  if (!enabled)   return;  addEventInternal(et,ival1,ival2,dval1);}  }
class C{  public int threshold(){  return soot.PhaseOptions.getInt(options,"threshold");}  }
class C{  private SaveAction(){  super("Save");}  }
class C{  private void update(boolean forced){  long now=System.currentTimeMillis();  long diff=now - this.lastUpdateRt;  double dur=(now - startTime) / 1000.0;  if (forced || (diff > UI_UP_INTERVAL)) {    double ssps=((SimClock.getTime() - lastUpdate) * 1000) / diff;    print(String.format("%.1f %d: %.2f 1/s",dur,SimClock.getIntTime(),ssps));    this.lastUpdateRt=System.currentTimeMillis();    this.lastUpdate=SimClock.getTime();  }}  }
class C{  public String provideNetworkType(){  return "unknown";}  }
class C{  @Override public Table summary(){  Table table=Table.create("Column: " + name());  CategoryColumn measure=CategoryColumn.create("Measure");  CategoryColumn value=CategoryColumn.create("Value");  table.addColumn(measure);  table.addColumn(value);  measure.add("Count");  value.add(String.valueOf(size()));  measure.add("Missing");  value.add(String.valueOf(countMissing()));  measure.add("Earliest");  value.add(String.valueOf(min()));  measure.add("Latest");  value.add(String.valueOf(max()));  return table;}  }
class C{  @Override public void unbindRepository(){  this.isMaster=false;}  }
class C{  public void addElement(T data){  Node<T> newNode=new Node<T>(data);  if (isEmpty()) {    first=newNode;    size=1;  } else {    if (this.comparator.compare(newNode.data,first.data) > 0) {      Node<T> tmp=first;      first=newNode;      first.next=tmp;      tmp.prev=first;      size++;    } else {      Node<T> prev=first;      Node<T> current=first.next;      while (current != null) {        if (this.comparator.compare(newNode.data,current.data) > 0) {          prev.next=newNode;          newNode.prev=prev;          current.prev=newNode;          newNode.next=current;          size++;          break;        }        current=current.next;        prev=prev.next;      }      if (null == current) {        prev.next=newNode;        newNode.prev=prev;        size++;      }      if (size > this.maxSize) {        dropLastElement();      }    }  }}  }
class C{  public void addToHistory(JCas jCas,HistoryEvent event){  getDocumentHistory(jCas).add(event);}  }
class C{  public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){  QueuedCube key=new QueuedCube(x,y,z,world);  AsyncCubeIOProvider task=cubeTasks.get(key);  if (task == null) {    task=new AsyncCubeIOProvider(key,loader);    task.addCallback(runnable);    cubeTasks.put(key,task);    pool.execute(task);  } else {    task.addCallback(runnable);  }  Column loadedColumn;  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);  } else {    task.setColumn(loadedColumn);  }}  }
class C{  synchronized Value computeValue(Session session,Row row){  computeTableFilter.setSession(session);  computeTableFilter.set(row);  return defaultExpression.getValue(session);}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  public void rotateImage(RotateDegrees degrees){  Bitmap source=getBitmap();  if (source == null)   return;  int angle=degrees.getValue();  Matrix matrix=new Matrix();  matrix.postRotate(angle);  Bitmap rotated=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),matrix,true);  setImageBitmap(rotated);}  }
class C{  public static double angle(Complex c){  return Math.atan2(c.imag,c.real);}  }
class C{  protected int estimateHeaderElementLen(final HeaderElement elem){  if (elem == null)   return 0;  int result=elem.getName().length();  final String value=elem.getValue();  if (value != null) {    result+=3 + value.length();  }  final int parcnt=elem.getParameterCount();  if (parcnt > 0) {    for (int i=0; i < parcnt; i++) {      result+=2 + estimateNameValuePairLen(elem.getParameter(i));    }  }  return result;}  }
class C{  private NumberValuation(){  this(new HashMap<RTLVariable,NumberElement>(),new HashMap<RTLMemoryLocation,NumberElement>(),false);}  }
class C{  public char loadChar(){  return SimulatedMemory.getChar(this);}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  public static OptionHandler parse(String[] options,String option,OptionHandler defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return OptionUtils.fromCommandLine(OptionHandler.class,value);}  }
class C{  private final long log2phy(long logicalAddress){  return baseAddress + (logicalAddress << logAddressSize);}  }
class C{  protected String handleInteger(ResultSet rs,int columnIndex) throws SQLException {  int i=rs.getInt(columnIndex);  return rs.wasNull() ? "" : Integer.toString(i);}  }
class C{  public final MutableDouble2D subtract(MutableDouble2D other1,MutableDouble2D other2){  x=other1.x - other2.x;  y=other1.y - other2.y;  return this;}  }
class C{  public final void updateTrackPoint(Point p){  if (this.mode != HALF_ANCHORED) {    throw new IllegalStateException("Cannot call the updateTrackPoint " + "method when the edge is " + "not in HALF_ANCHORED mode.");  }  this.mouseTrackPoint=new Point(p);  resetBounds();  repaint();}  }
class C{  public void skipDownTo(int y){  loy=y;}  }
class C{  private void processAnsiCommand_T(){}  }
class C{  public static String toString(String s){  if (s == null) {    return "NULL";  } else {    return new StringBuilder(s.length() + 2).append("'").append(s).append("'").toString();  }}  }
class C{  public int primaryShardsActive(){  int counter=0;  for (  IndexShardRoutingTable shardRoutingTable : this) {    if (shardRoutingTable.primaryShard().active()) {      counter++;    }  }  return counter;}  }
class C{  public static void assertBounds(final long reqOff,final long reqLen,final long allocSize){  assert ((reqOff | reqLen | (reqOff + reqLen)| (allocSize - (reqOff + reqLen))) >= 0) : "offset: " + reqOff + ", reqLength: "+ reqLen+ ", size: "+ allocSize;}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  protected void generateQuantileSeries(ResultKey key,YIntervalSeriesCollection dataset){  List<DataPoint> dataPoints=new ArrayList<DataPoint>();  for (  Accumulator accumulator : controller.get(key)) {    if (!accumulator.keySet().contains(metric)) {      continue;    }    for (int i=0; i < accumulator.size(metric); i++) {      dataPoints.add(new DataPoint((Integer)accumulator.get("NFE",i),((Number)accumulator.get(metric,i)).doubleValue()));    }  }  Collections.sort(dataPoints);  YIntervalSeries series=new YIntervalSeries(key);  DescriptiveStatistics statistics=new DescriptiveStatistics();  int index=0;  int currentNFE=RESOLUTION;  while (index < dataPoints.size()) {    DataPoint point=dataPoints.get(index);    if (point.getNFE() <= currentNFE) {      statistics.addValue(point.getValue());      index++;    } else {      if (statistics.getN() > 0) {        series.add(currentNFE,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));      }      statistics.clear();      currentNFE+=RESOLUTION;    }  }  if (statistics.getN() > 0) {    if (series.isEmpty()) {      series.add(currentNFE - RESOLUTION,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));    }    series.add(currentNFE,statistics.getPercentile(50),statistics.getPercentile(25),statistics.getPercentile(75));  }  dataset.addSeries(series);}  }
class C{  private String rtrim(String s){  if (s == null) {    return null;  }  int len=s.length();  int index=len;  while (index > 0 && Character.isWhitespace(s.charAt(index - 1))) {    index--;  }  return (index <= 0) ? "" : s.substring(0,index);}  }
class C{  public void putServerInList(ServerInfo server){  if (server != null) {    if (mServerList == null) {      mServerList=new ArrayList<>();      mServerList.add(server);    } else {      boolean found=false;      int i=0;      for (      ServerInfo s : mServerList) {        if (s.getServerName().equals(server.getServerName())) {          found=true;          break;        }        i++;      }      if (found) {        mServerList.remove(i);      }      mServerList.add(server);    }  }}  }
class C{  @Override public void onQuickSearch(SearchCustomActionBar searchview,CharSequence constraint){}  }
class C{  public static void d(String message){  if (BuildConfig.DEBUG)   Log.d(TAG,buildLogMsg(message));}  }
class C{  private void refreshProductList(HttpServletRequest request,ArrayList<ProductBean> productList){  ArrayList<ProductBean> list=(ArrayList<ProductBean>)request.getSession().getAttribute(Constants.VIEW_POS_PRODUCTS);  if (list == null) {    return;  }  if (!list.isEmpty()) {    for (    ProductBean bean : productList) {      int index=list.indexOf(bean);      if (index != -1) {        list.set(index,bean);      }    }    request.getSession().setAttribute(Constants.VIEW_POS_PRODUCTS,list);  }}  }
class C{  private VdcNodeCheckResponse sendVdcNodeCheckRequest(Properties vdcProp,Collection<VirtualDataCenter> vdcsToCheck){  List<VdcConfig> virtualDataCenters=new ArrayList<VdcConfig>();  for (  VirtualDataCenter vdc : vdcsToCheck) {    VdcConfig vdcConfig=new VdcConfig();    Site activeSite=drUtil.getActiveSite(vdc.getShortId());    vdcConfig.setId(vdc.getId());    vdcConfig.setShortId(vdc.getShortId());    if (activeSite.getHostIPv4AddressMap() != null && !activeSite.getHostIPv4AddressMap().isEmpty() && activeSite.isUsingIpv4()) {      HashMap<String,String> ipv4AddrMap=new HashMap<String,String>(activeSite.getHostIPv4AddressMap());      vdcConfig.setHostIPv4AddressesMap(ipv4AddrMap);    } else     if (activeSite.getHostIPv6AddressMap() != null && !activeSite.getHostIPv6AddressMap().isEmpty()) {      HashMap<String,String> ipv6AddrMap=new HashMap<String,String>(activeSite.getHostIPv6AddressMap());      vdcConfig.setHostIPv6AddressesMap(ipv6AddrMap);    } else {      throw GeoException.fatals.cannotPerformOperation(vdc.getId().toString()," no nodes were found on VirtualDataCenter object");    }    virtualDataCenters.add(vdcConfig);  }  return sendVdcNodeCheckRequest(vdcProp,virtualDataCenters);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x2BCD50C0,version=271) public int sceUsbCamGetEvLevel(TPointer32 evLevelAddr){  evLevelAddr.setValue(evLevel);  return 0;}  }
class C{  public static List<String> quoteStrList(List<String> list){  List<String> tmpList=list;  list=new LinkedList<String>();  for (  String str : tmpList) {    str="'" + str + "'";    list.add(str);  }  return list;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public static WindowSize fullscreen(){  return new WindowSize();}  }
class C{  protected Ignite startGridWithIgfs(String gridName,String igfsName,IgfsMode mode,@Nullable IgfsSecondaryFileSystem secondaryFs,@Nullable IgfsIpcEndpointConfiguration restCfg) throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(igfsName);  igfsCfg.setBlockSize(IGFS_BLOCK_SIZE);  igfsCfg.setDefaultMode(mode);  igfsCfg.setIpcEndpointConfiguration(restCfg);  igfsCfg.setSecondaryFileSystem(secondaryFs);  igfsCfg.setPrefetchBlocks(PREFETCH_BLOCKS);  igfsCfg.setSequentialReadsBeforePrefetch(SEQ_READS_BEFORE_PREFETCH);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(2));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  dataCacheCfg.setOffHeapMaxMemory(0);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(gridName);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  return G.start(cfg);}  }
class C{  protected void compactify(){  if (m_Data != null) {    m_Data.compactify();  }}  }
class C{  protected Writer write(Writer writer,int indentFactor,int indent){  try {    boolean commanate=false;    final int length=this.size();    Iterator keys=this.keyIterator();    writer.write('{');    int actualFactor=(indentFactor == -1) ? 0 : indentFactor;    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (actualFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),actualFactor,indent);    } else     if (length != 0) {      final int newindent=indent + actualFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor != -1) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (actualFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),actualFactor,newindent);        commanate=true;      }      if (indentFactor != -1) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new RuntimeException(exception);  }}  }
class C{  @Override public void windowClosing(WindowEvent e){  int button;  while (getMainPanel().getTabbedPane().getTabCount() > 0) {    getMainPanel().closeFile(false);  }  if (getConfirmExit()) {    button=ComponentHelper.showMessageBox(this,"Quit - " + getTitle(),"Do you really want to quit?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);    if (button == JOptionPane.YES_OPTION) {      dispose();    }  } else {    dispose();  }  if (getExitOnClose()) {    System.exit(0);  }}  }
class C{  public static Control emptyGridCell(Composite parent){  return new Label(parent,SWT.NONE);}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public PipelineStateJson startPipeline(String pipelineName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling startPipeline");  }  String path="/v1/pipeline/{pipelineName}/start".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineStateJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  protected void deleteInstructor(HttpServletRequest request,ClassEditForm frm){  int deleteId=-1;  try {    deleteId=Integer.parseInt(request.getParameter("deleteId"));  } catch (  Exception e) {    deleteId=-1;  }  if (deleteId >= 0) {    frm.removeInstructor(deleteId);    request.setAttribute(HASH_ATTR,HASH_INSTR_PREF);  }}  }
class C{  static public void showVariationWarning(String str){  showWarning(str + " is not available with this renderer.");}  }
class C{  public Query maxId(final long maxId){  setMaxId(maxId);  return this;}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public String rate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return NO_ERROR;  BigDecimal rate1=(BigDecimal)value;  BigDecimal rate2=Env.ZERO;  BigDecimal one=new BigDecimal(1.0);  if (rate1.doubleValue() != 0.0)   rate2=one.divide(rate1,12,BigDecimal.ROUND_HALF_UP);  if (mField.getColumnName().equals("MultiplyRate"))   mTab.setValue("DivideRate",rate2); else   mTab.setValue("MultiplyRate",rate2);  log.info(mField.getColumnName() + "=" + rate1+ " => "+ rate2);  return NO_ERROR;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public String cacheKeyNameTipText(){  return "Set the name of the key field by which to cache.";}  }
class C{  public static int bytesToIntBigEndian(final byte[] vals,final int from){  return (vals[from] << 24) + ((vals[from + 1] & 0xFF) << 16) + ((vals[from + 2] & 0xFF) << 8)+ (vals[from + 3] & 0xFF);}  }
class C{  private void removePhantomStorageGroup(StorageSystem storage,WBEMClient client,URI exportMaskURI,String phantomSGName,CIMObjectPath phantomSGPath,List<URI> volumesToRemove,boolean forceFlag) throws Exception {  if (!volumesToRemove.isEmpty()) {    _log.info(String.format("Going to remove volumes %s from phantom storage group %s",Joiner.on("\t").join(volumesToRemove),phantomSGName));    if (isGivenVolumeListSameAsInStorageGroup(storage,phantomSGPath,volumesToRemove)) {      _log.info("Storage Group has no more than {} volumes",volumesToRemove.size());      _log.info("Storage Group {} will be disassociated from FAST because group can not be deleted if associated with FAST",phantomSGName);      _helper.removeVolumeGroupFromPolicyAndLimitsAssociation(client,storage,phantomSGPath);    }    String task=UUID.randomUUID().toString();    ExportMaskVolumeToStorageGroupCompleter completer=new ExportMaskVolumeToStorageGroupCompleter(null,exportMaskURI,task);    List<CIMObjectPath> volumePaths=new ArrayList<CIMObjectPath>();    CIMArgument[] inArgs=_helper.getRemoveVolumesFromMaskingGroupInputArguments(storage,phantomSGName,volumesToRemove,forceFlag);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,new SmisMaskingViewRemoveVolumeJob(null,storage.getId(),volumePaths,null,phantomSGName,_cimPath,completer));  }}  }
class C{  public static String backQuoteChars(String string){  int index;  StringBuffer newStringBuffer;  char charsFind[]={'\\','\'','\t','"','%'};  String charsReplace[]={"\\\\","\\'","\\t","\\\"","\\%"};  for (int i=0; i < charsFind.length; i++) {    if (string.indexOf(charsFind[i]) != -1) {      newStringBuffer=new StringBuffer();      while ((index=string.indexOf(charsFind[i])) != -1) {        if (index > 0) {          newStringBuffer.append(string.substring(0,index));        }        newStringBuffer.append(charsReplace[i]);        if ((index + 1) < string.length()) {          string=string.substring(index + 1);        } else {          string="";        }      }      newStringBuffer.append(string);      string=newStringBuffer.toString();    }  }  return Utils.convertNewLines(string);}  }
class C{  public static boolean testLineSegmentTriangle(Vector3fc p0,Vector3fc p1,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon){  return testLineSegmentTriangle(p0.x(),p0.y(),p0.z(),p1.x(),p1.y(),p1.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon);}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1),"A")) {    return "";  }  String altName="";  altName=systemName;  return altName;}  }
class C{  public ResourceCollection(final GameData data){  super(data);}  }
class C{  public ReasonFlags(boolean[] flags){  this.flags=flags;}  }
class C{  protected static BusinessDayConvention euriborConvention(final Period p){switch (p.units()) {case Days:case Weeks:    return BusinessDayConvention.Following;case Months:case Years:  return BusinessDayConvention.ModifiedFollowing;default :throw new LibraryException("invalid time units");}}  }
class C{  public int removeByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition condition) throws GenericEntityException {  if (modelEntity == null || condition == null) {    return 0;  }  return genericDAO.deleteByCondition(delegator,modelEntity,condition);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector av=new ASN1EncodableVector();  av.add(organization);  av.add(noticeNumbers);  return new DERSequence(av);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:31.604 -0500",hash_original_method="1338FD648DB3B2BAA5C0EC8F5443BAC7",hash_generated_method="8F49EA1283EBC0CE39F3CC5A101B9DB9") public static boolean isEtwsEmergencyUserAlert(int messageCode){  return (messageCode & MESSAGE_CODE_ETWS_EMERGENCY_USER_ALERT) != 0;}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  if (impl != null) {    checkOldImpl();    this.impl.setSocket(this);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.387 -0500",hash_original_method="DE98B1F2C9FD8DEEFDCE620E4EB90078",hash_generated_method="6D1117DFD61BC43538CCCF7511692C33") protected void shutdownOutput() throws IOException {  if (fd == null) {    throw new IOException("socket not created");  }  shutdown(fd,false);}  }
class C{  public static String byte2Hex(int value){  if (value > 255 || value < 0) {    throw new IllegalArgumentException("The int converting to hex should be in range 0~255");  }  return String.valueOf(FIRST_CHAR[value]) + String.valueOf(SECOND_CHAR[value]);}  }
class C{  public void open(){  if (sShell == null || sShell.isDisposed()) {    createSShell();  }  sShell.pack();  HexManager.reduceDistance(getParent(),sShell);  findGroup.refreshCombo();  long selectionLength=editControl.getSelection()[1] - editControl.getSelection()[0];  if (selectionLength > 0L && selectionLength <= BinaryTextFinder.MAX_SEQUENCE_SIZE) {    findGroup.refreshHexOrText(true);    checkBox.setEnabled(false);    StringBuilder selectedText=new StringBuilder();    byte[] selection=new byte[(int)selectionLength];    try {      editControl.getContent().get(ByteBuffer.wrap(selection),editControl.getSelection()[0]);    } catch (    IOException e) {      throw new RuntimeException(e);    }    for (int i=0; i < selectionLength; ++i) {      selectedText.append(GeneralUtils.byteToHex[selection[i] & 0x0ff]);    }    findGroup.textCombo.setText(selectedText.toString());    findGroup.selectText();  } else {    findGroup.refreshHexOrText(lastFindHexButtonSelected);    checkBox.setEnabled(!lastFindHexButtonSelected);  }  replaceGroup.refreshHexOrText(lastReplaceHexButtonSelected);  replaceGroup.refreshCombo();  checkBox.setSelection(lastIgnoreCase);  if (lastForward)   forwardRadioButton.setSelection(true); else   backwardRadioButton.setSelection(true);  feedbackLabel.setText(textNewFind);  lastFocused=findGroup;  lastFocused.textCombo.setFocus();  enableDisableControls();  sShell.open();}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  public void removeImport(String name){  imports.remove(name);}  }
class C{  public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  if (includeInterval && dataset instanceof IntervalXYDataset) {    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double xvalue=ixyd.getXValue(series,item);        double lvalue=ixyd.getStartXValue(series,item);        double uvalue=ixyd.getEndXValue(series,item);        if (!Double.isNaN(xvalue)) {          minimum=Math.min(minimum,xvalue);          maximum=Math.max(maximum,xvalue);        }        if (!Double.isNaN(lvalue)) {          minimum=Math.min(minimum,lvalue);        }        if (!Double.isNaN(uvalue)) {          maximum=Math.max(maximum,uvalue);        }      }    }  } else {    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double x=dataset.getXValue(series,item);        if (!Double.isNaN(x)) {          minimum=Math.min(minimum,x);          maximum=Math.max(maximum,x);        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  static boolean isVerbose(){  return JMXSupport.isMMTkVerbose();}  }
class C{  private static int naxisN(String key){  int startOfNumber=NAXIS.key().length();  if (key.length() > startOfNumber && key.startsWith(NAXIS.key()) && Character.isDigit(key.charAt(startOfNumber))) {    return Integer.parseInt(key.substring(startOfNumber));  }  return -1;}  }
class C{  public PurpleDragon(){  this(null);}  }
class C{  public void openSequence(){  stackBuf[stackTop++]=start;}  }
class C{  public void load() throws IOException {  fTemplates.clear();  loadContributedTemplates();  loadCustomTemplates();}  }
class C{  public static <T>T withObjectOutputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.ObjectOutputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectOutputStream(file),closure);}  }
class C{  @Override public void selectConfigurableTab(Co2Configurable configurable,boolean selectCo2Tab){  Component tabComponent=configurable.getTabComponent();  if (tabComponent != null) {    Container parent=tabComponent.getParent();    if (parent instanceof JTabbedPane) {      ((JTabbedPane)parent).setSelectedComponent(tabComponent);    }    if (selectCo2Tab) {      Component mainCo2Tab=configTab.getUiComponent();      if (mainCo2Tab != null) {        Container mainParent=mainCo2Tab.getParent();        if (mainParent instanceof JTabbedPane) {          ((JTabbedPane)mainParent).setSelectedComponent(mainCo2Tab);        }      }    }  }}  }
class C{  boolean isAlive(){  return alive;}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  protected boolean isPlayServicesInstalled(){  GoogleApiAvailability api=GoogleApiAvailability.getInstance();  int resultCode=api.isGooglePlayServicesAvailable(getContext());  if (resultCode != ConnectionResult.SUCCESS) {    Log.e(TAG,"GCM registration failed, Google play services not available.");    return false;  }  return true;}  }
class C{  @Override public ACTION makeDecision(STATE state){  metrics=new Metrics();  List<ACTION> results=null;  double resultValue=Double.NEGATIVE_INFINITY;  PLAYER player=game.getPlayer(state);  StringBuffer logText=null;  currDepthLimit=0;  long startTime=System.currentTimeMillis();  boolean exit=false;  do {    incrementDepthLimit();    maxDepthReached=false;    List<ACTION> newResults=new ArrayList<ACTION>();    double newResultValue=Double.NEGATIVE_INFINITY;    double secondBestValue=Double.NEGATIVE_INFINITY;    if (logEnabled)     logText=new StringBuffer("depth " + currDepthLimit + ": ");    for (    ACTION action : orderActions(state,game.getActions(state),player,0)) {      if (results != null && System.currentTimeMillis() > startTime + maxTime) {        exit=true;        break;      }      double value=minValue(game.getResult(state,action),player,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,1);      if (logEnabled)       logText.append(action + "->" + value+ " ");      if (value >= newResultValue) {        if (value > newResultValue) {          secondBestValue=newResultValue;          newResultValue=value;          newResults.clear();        }        newResults.add(action);      } else       if (value > secondBestValue) {        secondBestValue=value;      }    }    if (logEnabled)     System.out.println(logText);    if (!exit || isSignificantlyBetter(newResultValue,resultValue)) {      results=newResults;      resultValue=newResultValue;    }    if (!exit && results.size() == 1 && isSignificantlyBetter(resultValue,secondBestValue))     break;  } while (!exit && maxDepthReached && !hasSafeWinner(resultValue));  return results.get(0);}  }
class C{  private void viewErrors(){  createLogWindow("guiButtonViewErrors",m_errorLog,Color.RED);}  }
class C{  public byte nextValue(){  return (byte)mRand.nextInt(mRange);}  }
class C{  @Override public void run(){  if (Cfg.DEBUG) {    Check.log(TAG + " (run): callback called");  }  actualBrowsing();}  }
class C{  public boolean isConflicting(ISchedulingRule rule){  return rule instanceof ProverJobRule;}  }
class C{  protected String composeFillPath(SymbolCode code){  return this.composeFilenameTacticalGraphic(code,DIR_FILL_TACGRP);}  }
class C{  public double eval(double params[]){  return (Math.sinh(params[0]));}  }
class C{  public Mosaic(final MosaicId mosaicId,final Quantity quantity){  MustBe.notNull(mosaicId,"mosaicId");  MustBe.notNull(quantity,"quantity");  this.mosaicId=mosaicId;  this.quantity=quantity;}  }
class C{  public boolean isAwake(){  return body.isAwake();}  }
class C{  public UsbEndpoint(int address,int attributes,int maxPacketSize,int interval){  mAddress=address;  mAttributes=attributes;  mMaxPacketSize=maxPacketSize;  mInterval=interval;}  }
class C{  protected Component(int componentID,IceMediaStream mediaStream){  this.componentID=componentID;  this.parentStream=mediaStream;  logger=new Logger(classLogger,mediaStream.getParentAgent().getLogger());}  }
class C{  public boolean matches(final String clazz,final String subclazz){  if ((this.clazz != null) && !clazz.equals(this.clazz)) {    return false;  }  if ((this.subclazz != null) && !subclazz.equals(this.subclazz)) {    return false;  }  return true;}  }
class C{  public static Builder builder(Buffer buffer){  return new Builder(buffer);}  }
class C{  private static void readJson() throws IOException {  ObjectMapper mapper=new ObjectMapper();  JsonNode rootNode=mapper.readValue("{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}",JsonNode.class);  String message=rootNode.get("message").asText();  JsonNode childNode=rootNode.get("place");  String place=childNode.get("name").asText();  System.out.println(message + " " + place);}  }
class C{  public String toString(){  return this.m00 + ", " + this.m01+ ", "+ this.m02+ ", "+ this.m03+ "\n"+ this.m10+ ", "+ this.m11+ ", "+ this.m12+ ", "+ this.m13+ "\n"+ this.m20+ ", "+ this.m21+ ", "+ this.m22+ ", "+ this.m23+ "\n"+ this.m30+ ", "+ this.m31+ ", "+ this.m32+ ", "+ this.m33+ "\n";}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  private static void pixel(double x,double y){  offscreen.fillRect((int)Math.round(scaleX(x)),(int)Math.round(scaleY(y)),1,1);}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public void endPutAll(long start,int numInc){  if (CachePerfStats.enableClockStats) {    long delta=CachePerfStats.getStatTime() - start;    this.stats.incLong(fieldId_PUTALL_TIME,delta);  }  this.stats.incInt(fieldId_PUTALLS_COMPLETED,numInc);}  }
class C{  @Nullable private Cube postCubeLoadAttempt(int cubeX,int cubeY,int cubeZ,@Nullable Cube cube,@Nonnull Column column,@Nonnull Requirement req){  if (req == Requirement.LOAD)   return cube;  if (req == Requirement.GENERATE && cube != null)   return cube;  if (cube == null) {    cube=generateCube(cubeX,cubeY,cubeZ,column);    if (req == Requirement.GENERATE) {      return cube;    }  }  if (!cube.isFullyPopulated()) {    populateCube(cube);    if (req == Requirement.POPULATE) {      return cube;    }  }  if (!cube.isInitialLightingDone()) {    calculateDiffuseSkylight(cube);  }  return cube;}  }
class C{  public void initMetaData(FrameBlock meta){  if (meta == null || meta.getNumRows() <= 0)   return;  for (int j=0; j < _colList.length; j++) {    int colID=_colList[j];    _rcdMaps.put(colID,meta.getRecodeMap(colID - 1));  }}  }
class C{  public void testSimpleWarJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private Collection<IChangeRecord> resolve(final AbstractTripleStore db,final Collection<IChangeRecord> unresolved){  final Collection<IChangeRecord> resolved=new LinkedList<IChangeRecord>();  final ISPO[] spos=new ISPO[unresolved.size()];  int i=0;  for (  IChangeRecord rec : unresolved) {    spos[i++]=rec.getStatement();  }  final BigdataStatementIterator it=db.asStatementIterator(new ChunkedArrayIterator<ISPO>(i,spos,null));  for (  IChangeRecord rec : unresolved) {    final BigdataStatement stmt=it.next();    resolved.add(new ChangeRecord(stmt,rec.getChangeAction()));  }  return resolved;}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void testServer() throws Exception {  for (int client=0; client < 2; client++) {    InetAddress host=InetAddress.getByName("localhost");    logger.info("Connecting to server on port " + serverPort);    Socket socket=new Socket(host,serverPort);    logger.info("Connected to " + socket.getRemoteSocketAddress());    PrintWriter toServer=new PrintWriter(socket.getOutputStream(),true);    BufferedReader fromServer=new BufferedReader(new InputStreamReader(socket.getInputStream()));{      toServer.print(generator.prepare());      toServer.flush();      String header=fromServer.readLine();      logger.info("Received header: " + header);      JSONObject obj=(JSONObject)parser.parse(header);      long payloadLen=(Long)obj.get("payload");      logger.info("Payload length: " + payloadLen);      String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);      logger.info("Received payload: " + payload);      String type=(String)obj.get("type");      String service=(String)obj.get("service");      long returnCode=(Long)obj.get("return");      assertEquals("Server returned unexpected message type",NetworkClientFilter.Protocol.TYPE_ACKNOWLEDGED,type);      assertEquals("Server returned different service name",this.service,service);      assertEquals("Server returned an error code",0,returnCode);      assertEquals("Server returned unexpected payload",server.getServerName(),payload);    }{      String value="This message will be converted to hex representation!";      long seqno=getRandomPositiveInt();      long row=getRandomPositiveInt();      String schema="demo";      String table="testtable";      toServer.print(generator.filter("String_to_HEX_v1",seqno,row,schema,table,"bloby",value));      toServer.flush();      String header=fromServer.readLine();      logger.info("Received header: " + header);      JSONObject obj=(JSONObject)parser.parse(header);      long payloadLen=(Long)obj.get("payload");      logger.info("Payload length: " + payloadLen);      String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);      logger.info("Received payload: " + payload);      String type=(String)obj.get("type");      long newSeqno=(Long)obj.get("seqno");      long newRow=(Long)obj.get("row");      String newSchema=(String)obj.get("schema");      String newTable=(String)obj.get("table");      long returnCode=(Long)obj.get("return");      String expectedNewValue=NetworkFilterServer.toHex(value);      assertEquals("Server returned unexpected message type",NetworkClientFilter.Protocol.TYPE_FILTERED,type);      assertEquals("Server returned an error code",0,returnCode);      assertEquals("Server returned unexpected payload",expectedNewValue,payload);      assertEquals("Server changed seqno",seqno,newSeqno);      assertEquals("Server changed row number",row,newRow);      assertEquals("Server changed schema",schema,newSchema);      assertEquals("Server changed table",table,newTable);    }{      toServer.print(generator.release());      toServer.flush();      String header=fromServer.readLine();      logger.info("Received header: " + header);      JSONObject obj=(JSONObject)parser.parse(header);      long payloadLen=(Long)obj.get("payload");      logger.info("Payload length: " + payloadLen);      String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);      logger.info("Received payload: " + payload);      String type=(String)obj.get("type");      assertEquals("Server returned unexpected message type",NetworkClientFilter.Protocol.TYPE_ACKNOWLEDGED,type);    }    toServer.close();    fromServer.close();    socket.close();  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PeriodAction"))     p_PeriodAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_Period_ID=getRecord_ID();}  }
class C{  protected void drawSelfMessage(DrawHandler drawHandler,PointDouble send,PointDouble receive,RelationDrawer.ArrowEndType arrowEndType,boolean fillArrow,DrawingInfo hInfo){  double rightBorderX=Math.max(send.x,receive.x) + SELF_MESSAGE_LIFELINE_GAP;  PointDouble[] msgLine=new PointDouble[]{send,new PointDouble(rightBorderX,send.y),new PointDouble(rightBorderX,receive.y),receive};  drawHandler.drawLines(msgLine);  drawHandler.setLineType(LineType.SOLID);  RelationDrawer.drawArrowToLine(receive,drawHandler,new Line(msgLine[2],msgLine[3]),false,arrowEndType,fillArrow,false);  rightBorderX+=SELF_MESSAGE_TEXT_PADDING;  double lifelineXEnd=Math.min(hInfo.getHDrawingInfo(to).getSymmetricHorizontalEnd(sendTick),hInfo.getHDrawingInfo(to).getSymmetricHorizontalEnd(sendTick + duration));  TextSplitter.drawText(drawHandler,textLines,rightBorderX,send.y,lifelineXEnd - rightBorderX,receive.y - send.y,AlignHorizontal.LEFT,AlignVertical.CENTER);}  }
class C{  protected void sequence_ParameterList(ISerializationContext context,ExpressionList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public GdbInfoArgs infoArgs() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("info args");  return GdbInfoArgs.parse(gdbOutput);}  }
class C{  public static void shutDownDraweeControllerBuilderSupplier(){  mDraweeControllerBuilderSupplier=null;}  }
class C{  public void testSetF19(){  boolean f19=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF19(f19);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  private void deleteUnsortedLifecycleMethods(Collection<PsiMethod> methods){  for (  PsiMethod method : methods)   method.delete();}  }
class C{  private void load() throws IOException, RepositoryException {  try (InputStream rawIn=getInputStream()){    demoData=new LinkedList<>();    NonClosingZipInputStream zip=new NonClosingZipInputStream(rawIn);    try {      ZipEntry entry;      String localeFileName=getPropertyFileName();      Properties defaultProps=new Properties();      Properties localProps=new Properties();      while ((entry=zip.getNextEntry()) != null) {        if (entry.isDirectory() || !entry.getName().startsWith(folder) || entry.getName().replaceFirst("/","").contains("/")) {          continue;        }        String entryName=entry.getName();        if (DEFAULT_PROPERTY_FILE.equals(entryName.replaceFirst(folder,""))) {          defaultProps.load(zip);        } else         if (localeFileName.equals(entryName.replaceFirst(folder,""))) {          localProps.load(zip);        } else         if (entryName.endsWith(".rmp")) {          processName=Paths.get(entryName).getFileName().toString().split("\\.")[0];        } else         if (entryName.endsWith(".ioo")) {          demoData.add(Paths.get(entryName).getFileName().toString().split("\\.")[0]);        }      }      title=defaultProps.getProperty(KEY_TUTORIAL_NAME,NO_TITLE);      description=defaultProps.getProperty(KEY_TUTORIAL_DESCRIPTION,NO_DESCRIPTION);      if (!localProps.isEmpty()) {        title=localProps.getProperty(KEY_TUTORIAL_NAME,title);        description=localProps.getProperty(KEY_TUTORIAL_DESCRIPTION,description);      }      if (title.isEmpty()) {        title=NO_TITLE;      }      if (description.isEmpty()) {        description=NO_DESCRIPTION;      }    }  finally {      zip.close();      zip.close2();    }  } }  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public void addSelectionListener(SelectionListener listener){  checkWidget();  if (listener == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  TypedListener typedListener=new TypedListener(listener);  addListener(SWT.Selection,typedListener);  addListener(SWT.DefaultSelection,typedListener);}  }
class C{  protected boolean isFieldSeparatorAtEnd(){  return fieldSeparatorAtEnd;}  }
class C{  public static boolean equals(byte[] left,int offsetLeft,byte[] right,int offsetRight,int length){  if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {    for (int i=0; i < length; i++) {      if (left[offsetLeft + i] != right[offsetRight + i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  @Override protected void extendElement(Element e){  XBeeConnectionMemo xcm;  XBeeTrafficController xtc;  try {    xcm=(XBeeConnectionMemo)adapter.getSystemConnectionMemo();    xtc=(XBeeTrafficController)xcm.getTrafficController();  } catch (  NullPointerException npe) {    if (log.isDebugEnabled()) {      log.debug("No memo defined; no nodes to save.");    }    return;  }  try {    XBeeNode node=(XBeeNode)xtc.getNode(0);    int index=1;    while (node != null) {      Element n=new Element("node");      n.setAttribute("name","" + node.getNodeAddress());      e.addContent(n);      n.addContent(makeParameter("address","" + jmri.util.StringUtil.hexStringFromBytes(node.getUserAddress())));      n.addContent(makeParameter("PAN","" + jmri.util.StringUtil.hexStringFromBytes(node.getPANAddress())));      n.addContent(makeParameter("GUID","" + jmri.util.StringUtil.hexStringFromBytes(node.getGlobalAddress())));      n.addContent(makeParameter("name",node.getIdentifier()));      n.addContent(makeParameter("polled",node.getPoll() ? "yes" : "no"));      jmri.jmrix.AbstractStreamPortController pc=null;      if ((pc=node.getPortController()) != null) {        n.addContent(makeParameter("StreamController",pc.getClass().getName()));      }      node=(XBeeNode)xtc.getNode(index);      index++;    }  } catch (  java.lang.NullPointerException npe2) {    return;  }}  }
class C{  public static <C extends Comparable<?>>Builder<C> builder(){  return new Builder<C>();}  }
class C{  private void swap(int a,int b){  Object aObject=currentActionListModel.getElementAt(a);  Object bObject=currentActionListModel.getElementAt(b);  currentActionListModel.set(a,bObject);  currentActionListModel.set(b,aObject);  network.getUpdateManager().swapElements(a,b);}  }
class C{  @Field(18) public __VARIANT_NAME_3_union pllVal(Pointer<Long> pllVal){  this.io.setPointerField(this,18,pllVal);  return this;}  }
class C{  public Color[] parseColorLookUpTable(BinaryFile binFile,RpfFileSections.RpfLocationRecord[] loc){  if (Debug.debugging("rpfcolortable")) {    Debug.output("RpfColortable:  creating new colors for colortable.");  }  Color[] rgb=new Color[CADRG_COLORS];  int i, j;  long ncr;  int red, green, blue, alpha;  int numColorOffsetRecs;  int numColorConvOffsetRecs;  int offsetRecordLength=17;  ColorOffset[] colorOffset;  long colormapOffsetTableOffset;  long colorConvOffsetTableOffset;  int colorConvOffsetRecl;  int colorConvRecl;  boolean foundLUT;  if (Debug.debugging("rpfdetail")) {    Debug.output("ENTER PARSE Colortable");  }  try {    if (Debug.debugging("rpfdetail")) {      Debug.output("RpfColortable: Color/gray section subheader (ID=134) location: " + loc[0].componentLocation);    }    binFile.seek(loc[0].componentLocation);    numColorOffsetRecs=binFile.read();    numColorConvOffsetRecs=binFile.read();    if (Debug.debugging("rpfdetail")) {      Debug.output("RpfColortable: numColorOffsetRecs(3): " + numColorOffsetRecs);      Debug.output("RpfColortable: numColorConvOffsetRecs(2): " + numColorConvOffsetRecs);    }    colorOffset=new ColorOffset[numColorOffsetRecs];    if (Debug.debugging("rpfdetail")) {      Debug.output("RpfColortable: Colormap subsection loc[1]: " + loc[1].componentLocation);    }    binFile.seek(loc[1].componentLocation);    colormapOffsetTableOffset=(long)binFile.readInteger();    offsetRecordLength=(int)binFile.readShort();    if (Debug.debugging("rpfdetail")) {      Debug.output("RpfColortable: colormapOffsetTableOffset: " + colormapOffsetTableOffset);      Debug.output("RpfColortable: offsetRecordLength:" + offsetRecordLength);    }    if (reducedColorTable == COLORS_216 || Cib) {      for (i=0; i < numColorOffsetRecs; i++) {        colorOffset[i]=new ColorOffset();        colorOffset[i].tableId=(int)binFile.readShort();        colorOffset[i].numColorRecords=(long)(binFile.readInteger() & 0xFFFFFFFFL);        colorOffset[i].colorElementLength=binFile.read();        colorOffset[i].histogramRecordLength=(int)binFile.readShort();        colorOffset[i].colorTableOffset=(long)binFile.readInteger() & 0xFFFFFFFFL;        colorOffset[i].histogramTableOffset=(long)binFile.readInteger() & 0xFFFFFFFFL;        if (Debug.debugging("rpfdetail")) {          Debug.output("RpfColortable: Parse_clut: " + i);          Debug.output(colorOffset[i].toString());        }        if (colorOffset[i].tableId == CIB_SPEC_CODE_ID) {          Cib=true;        } else {          Cib=false;        }        ncr=colorOffset[i].numColorRecords;        if ((ncr == 216) || (ncr == 217))         foundLUT=true; else         foundLUT=false;        if (Debug.debugging("rpfdetail")) {          Debug.output("RpfColortable: foundLUT of desired 216?: " + foundLUT);        }        if (foundLUT) {          binFile.seek(loc[1].componentLocation + colorOffset[i].colorTableOffset);          if (ncr >= CADRG_COLORS) {            if (Debug.debugging("rpf")) {              Debug.error("RpfColortable: ncr is not correct, wingin' it (" + ncr + ")");            }            ncr=CADRG_COLORS;          }          for (j=0; j < ncr; j++) {            colorConvTable[j]=j;            if (Cib) {              red=binFile.read() & 0x00ff;              alpha=opaqueness;              green=red;              blue=red;            } else {              red=binFile.read() & 0x00ff;              green=binFile.read() & 0x00ff;              blue=binFile.read() & 0x00ff;              alpha=binFile.read();              alpha=opaqueness;              if (ncr == 217 && rgb[(int)(ncr - 1)] == null) {                alpha=255;                red=255;                green=255;                blue=255;                rgb[(int)(ncr - 1)]=new Color(red,green,blue,alpha);              }            }            rgb[j]=new Color(red,green,blue,alpha);            if (Debug.debugging("rpfcolortable")) {              if (j == 0)               Debug.output("RpfColortable:\n\n---Full color table---\n");              Debug.output("RpfColortable:red: " + red + ", green: "+ green+ ", blue: "+ blue+ ", alpha: "+ alpha);            }          }          break;        }      }    } else {      if (Debug.debugging("rpfdetail")) {        Debug.output("RpfColortable: color converter subsection loc[2]:" + loc[2].componentLocation);      }      binFile.seek(loc[2].componentLocation);      colorConvOffsetTableOffset=(long)binFile.readInteger();      colorConvOffsetRecl=(int)binFile.readShort();      colorConvRecl=(int)binFile.readShort();      if (Debug.debugging("rpfdetail")) {        Debug.output("RpfColortable: colorConvOffsetTableOffset:" + colorConvOffsetTableOffset);        Debug.output("RpfColortable: colorConvOffsetRecl:" + colorConvOffsetRecl);        Debug.output("RpfColortable: colorConvRecl:" + colorConvRecl);      }      ColorConversionTable[] cct=new ColorConversionTable[numColorConvOffsetRecs];      for (i=0; i < numColorConvOffsetRecs; i++) {        cct[i]=new ColorConversionTable();        cct[i].colorConvTableId=(int)binFile.readShort();        cct[i].colorConvNumRecs=(long)binFile.readInteger();        cct[i].colorConvTableOffset=(long)binFile.readInteger();        cct[i].colorConvSourceTableOffset=(long)binFile.readInteger();        cct[i].colorConvTargetTableOffset=(long)binFile.readInteger();        if (Debug.debugging("rpfdetail")) {          Debug.output("RpfColortable: color conversion table - " + i);          Debug.output(cct[i].toString());        }      }      colorOffset=new ColorOffset[numColorConvOffsetRecs];      for (i=0; i < numColorConvOffsetRecs; i++) {        binFile.seek(loc[1].componentLocation + cct[i].colorConvTargetTableOffset);        colorOffset[i]=new ColorOffset();        colorOffset[i].tableId=(int)binFile.readShort();        colorOffset[i].numColorRecords=(long)binFile.readInteger();        ncr=colorOffset[i].numColorRecords;        if ((((ncr == 32) || (ncr == 33)) && (reducedColorTable == COLORS_32)) || (((ncr == 16) || (ncr == 17)) && (reducedColorTable == COLORS_16))) {          foundLUT=true;        } else {          foundLUT=false;        }        if (Debug.debugging("rpfdetail")) {          Debug.output("RpfColortable: foundLUT?:" + foundLUT);        }        if (foundLUT) {          colorOffset[i].colorElementLength=binFile.read();          colorOffset[i].histogramRecordLength=(int)binFile.readShort();          colorOffset[i].colorTableOffset=(long)binFile.readInteger();          colorOffset[i].histogramTableOffset=(long)binFile.readInteger();          if (Debug.debugging("rpfdetail")) {            Debug.output("RpfColortable: Parse_clut: " + i);            Debug.output(colorOffset[i].toString());          }          binFile.seek(loc[1].componentLocation + colorOffset[i].colorTableOffset);          for (j=0; j < ncr; j++) {            red=binFile.read() & 0x00ff;            green=binFile.read() & 0x00ff;            blue=binFile.read() & 0x00ff;            alpha=binFile.read();            alpha=opaqueness;            if (ncr == 217 && rgb[(int)(ncr - 1)] == null) {              alpha=opaqueness;              red=255;              green=255;              blue=255;              rgb[(int)(ncr - 1)]=new Color(red,green,blue,alpha);            }            rgb[j]=new Color(red,green,blue,alpha);            if (Debug.debugging("rpfcolortable")) {              if (j == 0)               Debug.output("RpfColortable:\n\n---CCT color table---\n");              Debug.output("RpfColortable: red:" + red + ", green:"+ green+ ", blue:"+ blue+ ", alpha: "+ alpha);            }          }          binFile.seek(loc[2].componentLocation + cct[i].colorConvTableOffset);          if (Debug.debugging("rpfdetail")) {            Debug.output("RpfColortable: i:" + i + ", colorConvTableOffset[i]:"+ cct[i].colorConvTableOffset);            Debug.output("RpfColortable: Read cct values at file location:" + binFile.getFilePointer());          }          for (j=0; j < cct[i].colorConvNumRecs; j++) {            colorConvTable[j]=binFile.readInteger();            if (Debug.debugging("rpfcolortable"))             Debug.output("RpfColortable: j:" + j + ", colorConvTable[j]:"+ colorConvTable[j]);          }          break;        }      }    }    if (reducedColorTable == COLORS_216) {      if (Debug.debugging("rpfdetail"))       Debug.output("RpfColortable: WARNING - Full 216 colors being used\n");      for (j=0; j < CADRG_COLORS; j++) {        colorConvTable[j]=j;      }    }    if (Cib && reducedColorTable != COLORS_216) {      int divisor, midoffset;      if (reducedColorTable == COLORS_32) {        divisor=8;        midoffset=4;      } else {        divisor=16;        midoffset=8;      }      for (j=0; j < CADRG_COLORS; j++) {        red=(int)(rgb[j].getRed() / divisor) * divisor + midoffset;        green=(int)(rgb[j].getGreen() / divisor) * divisor + midoffset;        blue=(int)(rgb[j].getBlue() / divisor) * divisor + midoffset;        alpha=rgb[j].getAlpha();        rgb[j]=new Color(red,green,blue,alpha);        if (Debug.debugging("rpfcolortable")) {          if (j == 0)           Debug.output("RpfColortable:\n\n---Final color table CIB---\n");          Debug.output("RpfColortable: Color " + j + " red: "+ rgb[j].getRed()+ ", green: "+ rgb[j].getGreen()+ ", blue: "+ rgb[j].getBlue());        }      }    } else     if (reducedColorTable != COLORS_216) {      for (j=0; j < CADRG_COLORS; j++) {        red=rgb[colorConvTable[j]].getRed();        green=rgb[colorConvTable[j]].getGreen();        blue=rgb[colorConvTable[j]].getBlue();        alpha=rgb[colorConvTable[j]].getAlpha();        rgb[j]=new Color(red,green,blue,alpha);        if (Debug.debugging("rpfcolortable")) {          if (j == 0)           Debug.output("RpfColortable:\n\n---Final color table---\n");          Debug.output("RpfColortable: Color " + j + " red: "+ rgb[j].getRed()+ ", green: "+ rgb[j].getGreen()+ ", blue: "+ rgb[j].getBlue());        }      }    }    if (Debug.debugging("rpfdetail")) {      Debug.output("RpfColortable: LEAVE PARSE Colortable");    }  } catch (  IOException ioe) {    Debug.error("RpfTocHandler: IO ERROR parsing file!\n" + ioe);    return null;  }catch (  FormatException fe) {    Debug.error("RpfTocHandler: Format ERROR parsing file!\n" + fe);    return null;  }  colors=rgb;  return rgb;}  }
class C{  public DropDownListView(Context context,boolean hijackFocus){  super(context,null,R.attr.dropDownListViewStyle);  mHijackFocus=hijackFocus;  setCacheColorHint(0);}  }
class C{  public static short[][] convertArray(byte[][] in){  short[][] out=new short[in.length][in[0].length];  for (int i=0; i < in.length; i++) {    for (int j=0; j < in[0].length; j++) {      out[i][j]=(short)(in[i][j] & GF2Field.MASK);    }  }  return out;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.670 -0500",hash_original_method="9C47CBAA33D56EB05E095A69AEB3F55A",hash_generated_method="3F2D341E8B187C6DA677EC304D5C7996") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void close() throws IOException {synchronized (lock) {    if (internalReader == null) {      return;    }    if (!eof) {      while (read() != -1) {        ;      }    }    eof=true;    atBeginning=false;    pos=internalBuffer.length;    internalReader=null;  }}  }
class C{  public void testDivideRoundHalfEvenNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case COUNT:  return isSetCount();}throw new IllegalStateException();}  }
class C{  public static void writeBodyMap(ActiveMQBuffer message,TypedProperties properties){  message.resetWriterIndex();  properties.encode(message);}  }
class C{  protected boolean processIncludes(T value,boolean include){  if (includesCount > 0) {    if (!include) {      for (      Rule<R> rule : rules) {        if (!rule.include) {          continue;        }        if (inExRuleMatcher.accept(value,rule.value,true)) {          include=true;          break;        }      }    }  }  return include;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.878 -0500",hash_original_method="D9F80F56BE7AEC83902DD1E82500AB90",hash_generated_method="D00C2CF8DC2D9DAFE18E478CD85DD206") public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  public int previous(){  if (currentIndex > 0) {    return replaceable.charAt(--currentIndex);  }  return DONE;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public List parameters(){  return this.parameters;}  }
class C{  public FciCcdSearchEditor(FciRunner runner){  super(runner,"Result allow_latent_common_causes");}  }
class C{  private void executeTasksSimultaneouslyWithBarrier(Runnable... tasks) throws InterruptedException {  CountDownLatch latch=new CountDownLatch(tasks.length);  for (  Runnable task : tasks) {    executor.execute(null);  }  latch.await();}  }
class C{  public Enumeration<String> attributeNames(){  return getTable().keys();}  }
class C{  public final Rectangle2D range(double width,double height){  double minX=getPositionX() - width;  double minY=getPositionY() - height;  double maxX=getMaxXWorld() + width;  double maxY=getMaxYWorld() + height;  return new Rectangle2D(minX,minY,maxX - minX,maxY - minY);}  }
class C{  public ZyGraphSearchSettings(final ZyGraphSearchSettings settings){  m_type=null;  m_searchCaseSensitive=settings.getSearchCaseSensitive();  m_searchRegEx=settings.getSearchRegEx();  m_searchSelectedNodesOnly=settings.getSearchSelectedNodesOnly();  m_searchVisibleNodesOnly=settings.getSearchVisibleNodesOnly();}  }
class C{  public void processValueChange(ValueChangeEvent event){  setAllServicesSelected(false);  model.setSelectedGroup((String)event.getNewValue());  showOperationData();}  }
class C{  public void clear() throws IOException {  if (writer != null) {    throw new IOException();  } else {    nextChar=0;  }}  }
class C{  public UnsupportedAttributeTypeException(String message){  super(message);}  }
class C{  public Float read(String value){  return Float.valueOf(value);}  }
class C{  private void doBasicLogin(BasicAuthInfo authInfo){  logger.info("BASIC authentication for: " + authInfo.getLoginTarget());  HttpHost targetHost=new HttpHost(authInfo.getHost(),authInfo.getPort(),authInfo.getProtocol());  CredentialsProvider credsProvider=new BasicCredentialsProvider();  credsProvider.setCredentials(new AuthScope(targetHost.getHostName(),targetHost.getPort()),new UsernamePasswordCredentials(authInfo.getUsername(),authInfo.getPassword()));  httpClient=HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();}  }
class C{  @Override public void close() throws IOException {  boolean success=false;  try {    if (cache.isOpen) {      for (      String fileName : cache.listAll()) {        unCache(fileName);      }    }    success=true;  }  finally {    if (success) {      IOUtils.close(cache,in);    } else {      IOUtils.closeWhileHandlingException(cache,in);    }  }}  }
class C{  private static boolean isController(ResourceMethod method){  return method.getInvocable().getDefinitionMethod().isAnnotationPresent(Controller.class);}  }
class C{  public void refreshSeekTo(int position){  handler.sendMessage(handler.obtainMessage(HANDLER_MESSAGE_REFRESH_LIST));  android.os.Message msg=handler.obtainMessage(HANDLER_MESSAGE_SEEK_TO);  msg.arg1=position;  handler.sendMessage(msg);}  }
class C{  public TitlePage(@DrawableRes int drawableResId,String title){  this.drawableResId=drawableResId;  this.title=title;}  }
class C{  @Override public String toString(){  return Integer.toString(value);}  }
class C{  private void fireDataChangeSync(DataChangedListener[] array,int type,int index){  int alen=array.length;  for (int iter=0; iter < alen; iter++) {    array[iter].dataChanged(type,index);  }}  }
class C{  public void read(InputStream in) throws IOException {  IXMLParser parser;  try {    parser=XMLParserFactory.createDefaultXMLParser();  } catch (  Exception ex) {    InternalError e=new InternalError("Unable to instantiate NanoXML Parser");    e.initCause(ex);    throw e;  }  IXMLReader reader=new StdXMLReader(in);  parser.setReader(reader);  IXMLElement document;  try {    document=(IXMLElement)parser.parse();  } catch (  XMLException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  }  read(document);}  }
class C{  private static byte[] generateBinaries(PseudoBytecode bhead,int bsize){  byte[] codes=new byte[bsize];  PseudoBytecode bcode=bhead.next;  int pos=0;  while (bcode != null) {    int size=bcode.getSize();    if (bcode instanceof LoadRetAddrConst) {      LoadRetAddrConst laddr=(LoadRetAddrConst)bcode;      laddr.patch(laddr.getOffset() + bsize);    }    if (VM.TraceOnStackReplacement)     VM.sysWriteln(pos + " : " + bcode.toString());    System.arraycopy(bcode.getBytes(),0,codes,pos,size);    pos+=size;    bcode=bcode.next;  }  return codes;}  }
class C{  protected void restartServer(CloudJettyRunner server) throws Exception {  System.setProperty("collection",server.collection);  JettySolrRunner jetty=server.jetty;  ChaosMonkey.stop(jetty);  ChaosMonkey.start(jetty);  System.clearProperty("collection");  waitForRecoveriesToFinish(server.collection,true);  updateMappingsFromZk(server.collection);}  }
class C{  public void addError(@Nonnull ErrorObject errorObject){  this.errorObjects.add(errorObject);}  }
class C{  public Stick(Model model,String name,Vector3 location,Vector3 rotation,Vector3 scale,btCollisionShape shape,float mass,short belongsToFlag,short collidesWithFlag,boolean callback,boolean noDeactivate){  super(model,name,location,rotation,scale,shape,mass,belongsToFlag,collidesWithFlag,callback,noDeactivate);}  }
class C{  public int port(Properties props){  return Integer.parseInt(props.getProperty(PORT_PROPERTY_KEY,"3306"));}  }
class C{  public void init(Vertx vertx,ServicePublisher publisher,JsonObject configuration,Future<Void> future){  delegate.init((io.vertx.core.Vertx)vertx.getDelegate(),(io.vertx.servicediscovery.spi.ServicePublisher)publisher.getDelegate(),configuration,(io.vertx.core.Future<java.lang.Void>)future.getDelegate());}  }
class C{  final Object peek(){  int size=stack.size();  return size == 0 ? null : stack.get(size - 1);}  }
class C{  public void doUnregister(RegisterMeta meta){  registryService.registerMetaSet().remove(meta);  Message msg=new Message();  msg.sign(PUBLISH_CANCEL_SERVICE);  msg.data(meta);  channel.writeAndFlush(msg).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);  MessageNonAck msgNonAck=new MessageNonAck(msg,channel);  messagesNonAck.put(msgNonAck.id,msgNonAck);}  }
class C{  public void end() throws IOException {  print("end",null);  printer.println();}  }
