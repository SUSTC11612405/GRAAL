class C{  protected void tableLoad(IMiniTable table){  String sql=MRole.getDefault().addAccessSQL(m_sql.toString(),"hdr",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO) + m_groupBy;  log.finest(sql);  try {    Statement stmt=DB.createStatement();    ResultSet rs=stmt.executeQuery(sql);    table.loadTable(rs);    stmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr replacedAttr;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("class");  replacedAttr=testEmployee.setAttributeNode(streetAttr);  assertSame("replacedAttr",streetAttr,replacedAttr);}  }
class C{  private void count(AggregateAPIEntity targetObj) throws Exception {  targetObj.setNumTotalDescendants(targetObj.getNumTotalDescendants() + 1);}  }
class C{  public static Triple<IDebugger,BookmarkManager,Integer> findBookmark(final BackEndDebuggerProvider debuggerProvider,final int row){  Preconditions.checkNotNull(debuggerProvider,"IE01322: Debugger provider argument can't be null");  Preconditions.checkArgument(row >= 0,"IE01323: Row arguments can not be negative");  int bookmarks=0;  for (  final IDebugger debugger : debuggerProvider.getDebuggers()) {    if ((row >= bookmarks) && (row < bookmarks + debugger.getBookmarkManager().getNumberOfBookmarks())) {      return Triple.make(debugger,debugger.getBookmarkManager(),row - bookmarks);    } else {      bookmarks+=debugger.getBookmarkManager().getNumberOfBookmarks();    }  }  throw new IllegalArgumentException("IE01324: Invalid row number");}  }
class C{  public static double clamp(double value,double low,double high){  return Math.min(Math.max(value,low),high);}  }
class C{  private boolean checkIfContextSupportsExtension(GL10 gl,String extension){  String extensions=" " + gl.glGetString(GL10.GL_EXTENSIONS) + " ";  return extensions.indexOf(" " + extension + " ") >= 0;}  }
class C{  public int startPc(int i){  return ByteArray.readU16bit(info,i * 4 + 2);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.808 -0500",hash_original_method="5E373C5564B1740CC801138FBC6EE83B",hash_generated_method="5E373C5564B1740CC801138FBC6EE83B") boolean expandGroup(int groupPos){  PositionMetadata pm=getFlattenedPos(ExpandableListPosition.obtain(ExpandableListPosition.GROUP,groupPos,-1,-1));  boolean retValue=expandGroup(pm);  pm.recycle();  return retValue;}  }
class C{  public FileHandler(int expiresSeconds){  this.expiresSeconds=expiresSeconds;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    if (zzMarkedPosL > zzStartRead) {switch (zzBufferL[zzMarkedPosL - 1]) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        zzAtBOL=true;      break;case '\r':    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=zzBufferL[zzMarkedPosL] != '\n'; else     if (zzAtEOF)     zzAtBOL=false; else {      boolean eof=zzRefill();      zzMarkedPosL=zzMarkedPos;      zzEndReadL=zzEndRead;      zzBufferL=zzBuffer;      if (eof)       zzAtBOL=false; else       zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';    }  break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {  zzInput=YYEOF;  break zzForAction;} else {  zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 21:break;case 2:{addNullToken();return firstToken;}case 22:break;case 18:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 23:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 24:break;case 3:{addToken(Token.WHITESPACE);}case 25:break;case 8:{start=zzMarkedPos - 1;yybegin(CHAR);}case 26:break;case 5:{addToken(Token.RESERVED_WORD);}case 27:break;case 6:{addToken(Token.SEPARATOR);}case 28:break;case 16:{addToken(Token.VARIABLE);}case 29:break;case 14:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 30:break;case 1:{addToken(Token.IDENTIFIER);}case 31:break;case 20:{addToken(Token.FUNCTION);}case 32:break;case 19:{addToken(Token.DATA_TYPE);}case 33:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 34:break;case 9:{start=zzStartRead;if (yylength() > 1) {addToken(zzStartRead,zzMarkedPos - 2,Token.WHITESPACE);zzStartRead=zzMarkedPos - 1;}if (start == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;} else {addToken(zzStartRead,zzStartRead,Token.OPERATOR);}}case 35:break;case 7:{start=zzMarkedPos - 1;yybegin(STRING);}case 36:break;case 4:{addToken(Token.OPERATOR);}case 37:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 38:break;case 10:{}case 39:break;case 15:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 40:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 640:break;case YYINITIAL:{addNullToken();return firstToken;}case 641:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 642:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 643:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static Document createDOM(String strXML) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setValidating(false);  dbf.setIgnoringComments(false);  dbf.setIgnoringElementContentWhitespace(true);  dbf.setNamespaceAware(true);  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);  dbf.setFeature(LOAD_EXTERNAL_DTD,false);  DocumentBuilder db=null;  db=dbf.newDocumentBuilder();  db.setEntityResolver(new NullResolver());  db.setErrorHandler(new SamlParserErrorHandler());  InputSource sourceXML=new InputSource(new StringReader(strXML));  Document xmlDoc=db.parse(sourceXML);  return xmlDoc;}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public void disconnect(){  if (conn != null) {    try {      conn.close();    } catch (    SQLException e) {      logger.warn("Unable to close connection",e);    }  }  try {    closeBinlog();  } catch (  IOException e) {    logger.warn("Unable to close binlog",e);  }}  }
class C{  private RawProtein<SmartRawMatch> processProteinLicensed(RawProtein<SmartRawMatch> smartRawMatchRawProtein) throws IOException {  if (smartThresholds == null || smartOverlaps == null) {    smartThresholds=thresholdFileParser.parse(smartResourceManager.getThresholdFileResource());    smartOverlaps=overlappingFileParser.parse(smartResourceManager.getOverlappingFileResource(),smartThresholds);  }  smartRawMatchRawProtein=filterByDerivedSequenceEvalue(smartRawMatchRawProtein);  smartRawMatchRawProtein=filterByDerivedDomainEvalue(smartRawMatchRawProtein);  smartRawMatchRawProtein=filterByRepeatCount(smartRawMatchRawProtein);  smartRawMatchRawProtein=filterByFamilyOverlap(smartRawMatchRawProtein);  smartRawMatchRawProtein=filterKinaseHack(smartRawMatchRawProtein);  return smartRawMatchRawProtein;}  }
class C{  @Override public void show(){  if (localLOGV)   Log.v(TAG,"SHOW: " + this);  mHandler.post(mShow);}  }
class C{  private static Attribute attribute(TagData data,TagLibTag tag,ArrayList<String> args,RefBoolean allowDefaultValue) throws TemplateException {  Expression value=null;  StringBuffer sbType=new StringBuffer();  RefBoolean dynamic=new RefBooleanImpl(false);  boolean isDefaultValue=false;  boolean[] parseExpression=new boolean[2];  parseExpression[0]=true;  parseExpression[1]=false;  String name=attributeName(data.srcCode,dynamic,args,tag,sbType,parseExpression,allowDefaultValue.toBooleanValue());  if (StringUtil.isEmpty(name)) {    allowDefaultValue.setValue(false);    TagLibTagAttr attr=tag.getDefaultAttribute();    if (attr == null)     throw new TemplateException(data.srcCode,"Invalid Identifier.");    name=attr.getName();    sbType.append(attr.getType());    isDefaultValue=true;  }  comment(data.srcCode,true);  if (isDefaultValue || data.srcCode.forwardIfCurrent('=')) {    comment(data.srcCode,true);    value=attributeValue(data,tag,sbType.toString(),parseExpression[0],false,data.factory.createLitString(""));  } else {    TagLibTagAttr attr=tag.getAttribute(name);    if (attr != null)     value=attr.getUndefinedValue(data.factory); else     value=tag.getAttributeUndefinedValue(data.factory);    if (sbType.toString().length() > 0) {      value=CastOther.toExpression(value,sbType.toString());    }  }  comment(data.srcCode,true);  return new Attribute(dynamic.toBooleanValue(),name,value,sbType.toString());}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrrMc.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mc";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static <S extends HasCellContextClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellContextClickEvent event=new CellContextClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override public boolean removeMib(SnmpMibAgent mib,String contextName){  return removeMib(mib);}  }
class C{  public boolean hasShares(){  return getShares() != null;}  }
class C{  public void testFlipBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,13,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean redo(){  return model.redo();}  }
class C{  public void attach(FieldPortrayal2D portrayal,String name,Rectangle2D.Double bounds,boolean visible){  FieldPortrayal2DHolder p=new FieldPortrayal2DHolder(portrayal,name,bounds,visible);  portrayals.add(p);  popup.add(p.menuItem);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public CNavigationPanel(final JHexView hexView){  super(new BorderLayout());  add(new CGotoPanel(hexView),BorderLayout.NORTH);  add(new CSearchPanel(hexView));}  }
class C{  public static <RET,EXC extends Exception>RET callUnderLock(ReentrantLock lock,CallableX<RET,EXC> callable) throws EXC {  lock.lock();  try {    return callable.call();  }  finally {    lock.unlock();  }}  }
class C{  public void removeTargetsFromStorageView(String viewName,List<PortInfo> targetPortInfo) throws VPlexApiException {  s_logger.info("Request to remove targets to storage view on VPlex at {}",_baseURI);  _exportMgr.removeTargetsFromStorageView(viewName,targetPortInfo);}  }
class C{  private void appendToStart(Map<String,PsiMethod> sortedMethods){  PsiElement anchorToAddBefore=mPsiClass.getMethods()[0];  for (  PsiMethod method : sortedMethods.values()) {    mPsiClass.addBefore(method,anchorToAddBefore);  }}  }
class C{  private void sendStageProgressPatch(TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  public TriggerStatus selectTriggerStatus(Connection conn,TriggerKey triggerKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    TriggerStatus status=null;    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_STATUS));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      String state=rs.getString(COL_TRIGGER_STATE);      long nextFireTime=rs.getLong(COL_NEXT_FIRE_TIME);      String jobName=rs.getString(COL_JOB_NAME);      String jobGroup=rs.getString(COL_JOB_GROUP);      Date nft=null;      if (nextFireTime > 0) {        nft=new Date(nextFireTime);      }      status=new TriggerStatus(state,nft);      status.setKey(triggerKey);      status.setJobKey(jobKey(jobName,jobGroup));    }    return status;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @Override public void read(InputStream in,Drawing drawing,boolean replace) throws IOException {  long start;  if (DEBUG) {    start=System.currentTimeMillis();  }  this.figures=new LinkedList<Figure>();  IXMLParser parser;  try {    parser=XMLParserFactory.createDefaultXMLParser();  } catch (  Exception ex) {    InternalError e=new InternalError("Unable to instantiate NanoXML Parser");    e.initCause(ex);    throw e;  }  if (DEBUG) {    System.out.println("SVGInputFormat parser created " + (System.currentTimeMillis() - start));  }  IXMLReader reader=new StdXMLReader(in);  parser.setReader(reader);  if (DEBUG) {    System.out.println("SVGInputFormat reader created " + (System.currentTimeMillis() - start));  }  try {    document=(IXMLElement)parser.parse();  } catch (  XMLException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  }  if (DEBUG) {    System.out.println("SVGInputFormat document created " + (System.currentTimeMillis() - start));  }  IXMLElement svg=document;  Stack<Iterator<IXMLElement>> stack=new Stack<Iterator<IXMLElement>>();  LinkedList<IXMLElement> ll=new LinkedList<IXMLElement>();  ll.add(document);  stack.push(ll.iterator());  while (!stack.empty() && stack.peek().hasNext()) {    Iterator<IXMLElement> iter=stack.peek();    IXMLElement node=iter.next();    Iterator<IXMLElement> children=(node.getChildren() == null) ? null : node.getChildren().iterator();    if (!iter.hasNext()) {      stack.pop();    }    if (children != null && children.hasNext()) {      stack.push(children);    }    if (node.getName() != null && node.getName().equals("svg") && (node.getNamespace() == null || node.getNamespace().equals(SVG_NAMESPACE))) {      svg=node;      break;    }  }  if (svg.getName() == null || !svg.getName().equals("svg") || (svg.getNamespace() != null && !svg.getNamespace().equals(SVG_NAMESPACE))) {    throw new IOException("'svg' element expected: " + svg.getName());  }  initStorageContext(document);  flattenStyles(svg);  readElement(svg);  if (DEBUG) {    long end=System.currentTimeMillis();    System.out.println("SVGInputFormat elapsed:" + (end - start));  }  if (replace) {    drawing.removeAllChildren();  }  drawing.addAll(figures);  if (replace) {    Viewport viewport=viewportStack.firstElement();    drawing.set(VIEWPORT_FILL,VIEWPORT_FILL.get(viewport.attributes));    drawing.set(VIEWPORT_FILL_OPACITY,VIEWPORT_FILL_OPACITY.get(viewport.attributes));    drawing.set(VIEWPORT_HEIGHT,VIEWPORT_HEIGHT.get(viewport.attributes));    drawing.set(VIEWPORT_WIDTH,VIEWPORT_WIDTH.get(viewport.attributes));  }  document.dispose();  identifiedElements.clear();  elementObjects.clear();  viewportStack.clear();  styleManager.clear();  document=null;  identifiedElements=null;  elementObjects=null;  viewportStack=null;  styleManager=null;}  }
class C{  @Override protected void doRender(KMLTraversalContext tc,DrawContext dc){  this.beginRendering(tc,dc);  try {    this.renderBalloon(tc,dc);    this.renderFeatures(tc,dc);  }  finally {    this.endRendering(tc,dc);  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public ResultEntry(NondominatedPopulation population,Properties properties){  super();  this.population=population;  this.properties=properties;}  }
class C{  public static void readFully(FileChannel channel,ByteBuffer dst) throws IOException {  do {    int r=channel.read(dst);    if (r < 0) {      throw new EOFException();    }  } while (dst.remaining() > 0);}  }
class C{  public void paint(Graphics g){  if (m_from == null || m_to == null)   return;  Polygon arrow=new Polygon();  Point from=null;  Point to=null;  if (isRightTop()) {    from=addPoint(arrow,m_from,SwingConstants.RIGHT,true);    to=addPoint(arrow,m_to,SwingConstants.TOP,false);  } else   if (isBottomTop()) {    from=addPoint(arrow,m_from,SwingConstants.BOTTOM,true);    to=addPoint(arrow,m_to,SwingConstants.TOP,false);  } else   if (isTopBottom()) {    from=addPoint(arrow,m_from,SwingConstants.TOP,true);    to=addPoint(arrow,m_to,SwingConstants.BOTTOM,false);  } else   if (isLeftRight()) {    from=addPoint(arrow,m_from,SwingConstants.LEFT,true);    to=addPoint(arrow,m_to,SwingConstants.RIGHT,false);  } else {    from=addPoint(arrow,m_from,SwingConstants.RIGHT,true);    to=addPoint(arrow,m_to,SwingConstants.LEFT,false);  }  if (!m_next.isUnconditional()) {    g.setColor(Color.red);    g.fillPolygon(arrow);  }  if (m_visited)   g.setColor(Color.green); else   g.setColor(Color.black);  g.drawPolygon(arrow);  if (m_next.isFromSplitAnd()) {    g.setColor(Color.magenta);    g.fillOval(from.x - 3,from.y - 3,6,6);  }  if (m_next.isToJoinAnd()) {    g.setColor(Color.magenta);    g.fillOval(to.x - 3,to.y - 3,6,6);  }  if (m_description != null) {    Graphics2D g2D=(Graphics2D)g;    Font font=new Font("Dialog",Font.PLAIN,9);    if (m_next.isUnconditional())     g2D.setColor(Color.black); else     g2D.setColor(Color.red);    TextLayout layout=new TextLayout(m_description,font,g2D.getFontRenderContext());    int x=0;    if (from.x < to.x)     x=from.x + ((to.x - from.x) / 2); else     x=to.x + ((from.x - to.x) / 2);    int y=0;    if (from.y < to.y)     y=from.y + ((to.y - from.y) / 2); else     y=to.y + ((from.y - to.y) / 2);    y-=(layout.getAscent() - 3);    x-=(layout.getAdvance() / 2);    if (x < 2)     x=2;    layout.draw(g2D,x,y);  }}  }
class C{  public void parseArgumentByteCode(Object[] result,DataInputStream dataStream,Vertex pop,Network network) throws IOException {  Vertex last=null;  Vertex next=(Vertex)result[1];  Long id=(Long)result[0];  if (id == 0l) {    result[0]=id;    result[1]=null;    result[2]=null;    return;  }  Vertex element=next;  if (element == null) {    element=network.findById(id);  }  if (element == null) {    result[0]=dataStream.readLong();    result[1]=null;    result[2]=null;    return;  }  if (element.is(Primitive.EXPRESSION)) {    element=parseOperatorByteCode(dataStream,network);  }  if (element.is(Primitive.POP)) {    element=pop;  }  id=dataStream.readLong();  if (id == 0l) {    result[0]=id;    result[1]=null;    result[2]=element;    return;  }  last=element;  next=network.findById(id);  while ((next != null) && (next.is(Primitive.PUSH))) {    element=parseOperatorByteCode(dataStream,last,network);    id=dataStream.readLong();    if (id == 0l) {      next=null;      break;    }    last=element;    next=network.findById(id);  }  result[0]=id;  result[1]=next;  result[2]=element;}  }
class C{  @Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public Iterable<String> clientListing(@Auth AutomationClient automationClient){  return clientDAO.getClients().stream().map(null).collect(toSet());}  }
class C{  private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {  if (aMethodsToCall.isEmpty()) {    testScenario(aConfiguration,anExpectingAnException,(Method)null);  } else {    for (    Method myMethod : aMethodsToCall) {      testScenario(aConfiguration,anExpectingAnException,myMethod);    }  }}  }
class C{  public JIntegerField(Composite parent,int style,int value,boolean allowNegative){  super(parent,style);  addModifyListener(this);  this.allowNegative=allowNegative;  setValue(value);}  }
class C{  public double measureTreeSize(){  return m_TreeConstructor.getNumNodes();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean checkIfRegistryRunning(int port,int msTimeout){  long stopTime=System.currentTimeMillis() + msTimeout;  do {    try {      Registry r=LocateRegistry.getRegistry(port);      String[] s=r.list();      return true;    } catch (    RemoteException e) {      try {        Thread.sleep(500);      } catch (      InterruptedException ie) {      }    }  } while (stopTime > System.currentTimeMillis());  return false;}  }
class C{  protected void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  BssClient.processHTTPRequest(request,response,getServletContext());}  }
class C{  protected ModuleNamespaceVirtualTypeImpl(){  super();}  }
class C{  public static void parallelSort(char[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJChar.Sorter(null,a,new char[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public String validateConfiguredParameters(SubscriptionWizardConversationModel model){  JsonObject jsonObject=getJsonResponse(model);  if (!hasValidationError(jsonObject,model)) {    model.setConfigurationChanged(isConfigurationChanged(model,jsonObject));    model.setParameterValidationResult(new ParameterValidationResult(false,null));    return null;  } else {    return validateParametersError(model,jsonObject);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void zonesetNameVsan(String zonesetName,Integer vsanId,boolean no) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  String noString=no ? MDSDialogProperties.getString("MDSDialog.zonesetNameVsan.no.cmd") : "";  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_ZONESET,SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zonesetNameVsan.cmd"),zonesetName,vsanId.toString(),noString);    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }  if (no == false && lastPrompt != SSHPrompt.MDS_CONFIG_ZONESET) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_ZONESET.toString());  }}  }
class C{  public static void trackEventInBackground(String name,SaveCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(trackEventInBackground(name),callback);}  }
class C{  public void write(final int c) throws IOException {  if (m_writer != null)   m_writer.write(c);  if (count >= buf_length)   flushBuffer();  if (c < 0x80) {    buf[count++]=(byte)(c);  } else   if (c < 0x800) {    buf[count++]=(byte)(0xc0 + (c >> 6));    buf[count++]=(byte)(0x80 + (c & 0x3f));  } else {    buf[count++]=(byte)(0xe0 + (c >> 12));    buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    buf[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  public SFS(int minFeatures,int maxFeatures,ClassificationDataSet dataSet,Classifier evaluater,int folds,double maxIncrease){  this(minFeatures,maxFeatures,evaluater.clone(),folds,maxIncrease);  search(minFeatures,maxFeatures,dataSet,folds);}  }
class C{  public void reverseAllEntries() throws IOException, ServiceException {  RecordQuery query=new RecordQuery(recordsFeedUrl);  query.setReverse(true);  RecordFeed feed=service.query(query,RecordFeed.class);  for (  RecordEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  private void startCameraSource() throws SecurityException {  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  void doExport(final JobStatusListener statusListener,final String csvExportDescriptorName,final CsvExportDescriptor csvExportDescriptor,final String fileToExport) throws Exception {  final String msgInfoImp=MessageFormat.format("export file : {0}",fileToExport);  statusListener.notifyMessage(msgInfoImp);  CsvFileWriter csvFileWriter=new CsvFileWriterImpl();  try {    final String filename=fileToExport;    final List<String> headers=new ArrayList<String>(csvExportDescriptor.getColumns().size());    for (    final ExportColumn column : csvExportDescriptor.getColumns()) {      headers.add(column.getColumnHeader());    }    csvFileWriter.open(filename,headers.toArray(new String[headers.size()]),csvExportDescriptor.getExportFileDescriptor().getColumnDelimiter(),csvExportDescriptor.getExportFileDescriptor().getTextQualifier(),csvExportDescriptor.getExportFileDescriptor().getFileEncoding(),csvExportDescriptor.getExportFileDescriptor().isPrintHeader());    final ResultsIterator<Object> results=getExistingEntities(csvExportDescriptor,csvExportDescriptor.getSelectSql(),null,null);    while (results.hasNext()) {      final CsvExportTuple tuple=new CsvExportTupleImpl(results.next());      csvFileWriter.writeLine(doExportTuple(statusListener,tuple,csvExportDescriptorName,csvExportDescriptor,null));    }    final String msgInfoLines=MessageFormat.format("total data lines : {0}",(csvExportDescriptor.getExportFileDescriptor().isPrintHeader() ? csvFileWriter.getRowsWritten() - 1 : csvFileWriter.getRowsWritten()));    statusListener.notifyMessage(msgInfoLines);  } catch (  UnsupportedEncodingException e) {    final String msgErr=MessageFormat.format("wrong file encoding in xml descriptor : {0} {1}",csvExportDescriptor.getExportFileDescriptor().getFileEncoding(),e.getMessage());    statusListener.notifyError(msgErr,e);  }catch (  IOException e) {    final String msgErr=MessageFormat.format("cannot write the csv file : {0} {1}",fileToExport,e.getMessage());    statusListener.notifyError(msgErr,e);  } finally {    try {      csvFileWriter.close();    } catch (    IOException ioe) {      final String msgErr=MessageFormat.format("cannot close the csv file : {0} {1}",fileToExport,ioe.getMessage());      statusListener.notifyError(msgErr,ioe);    }  }}  }
class C{  protected static void remoteCreateService(String name){  DistributedLockService newService=DistributedLockService.create(name,dlstSystem);  logInfo("Created " + newService);}  }
class C{  public String lpop(final String key){  checkIsInMulti();  client.lpop(key);  return client.getBulkReply();}  }
class C{  public Collection<String> listAttributeNames(){  List<String> list=new ArrayList<String>();  try {    MBeanAttributeInfo[] attrs=beanInfo.getAttributes();    for (    MBeanAttributeInfo attr : attrs) {      list.add(attr.getName());    }  } catch (  Exception e) {    throwException("Could not list attribute names. Reason: ",e);  }  return list;}  }
class C{  public static boolean equals(double[] va,double[] vb){  return Arrays.equals(va,vb);}  }
class C{  public JFXToolbar(){  initialize();  this.setLeft(leftBox);  leftBox.getStyleClass().add("tool-bar-left-box");  leftBox.setPickOnBounds(false);  this.setRight(rightBox);  rightBox.getStyleClass().add("tool-bar-right-box");  rightBox.setPickOnBounds(false);  JFXDepthManager.setDepth(this,1);}  }
class C{  public GlobeAnnotationBalloon(String text,Position position){  super(text);  if (position == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.position=position;  this.annotation=this.createAnnotation();}  }
class C{  public DeflaterOutputStream(OutputStream out,Deflater def,boolean syncFlush){  this(out,def,512,syncFlush);}  }
class C{  protected void warnMaterialData(Class<?> clazz,MaterialData data){  GlowServer.logger.warning("Wrong MaterialData for " + getMaterial() + " ("+ getClass().getSimpleName()+ "): expected "+ clazz.getSimpleName()+ ", got "+ data);}  }
class C{  static GramBooleanQuery computeDisjunction(GramBooleanQuery left,GramBooleanQuery right){  if (right.operator == QueryOp.ANY) {    return deepCopy(right);  }  if (right.operator == QueryOp.NONE) {    return deepCopy(left);  }  if (left.operator == QueryOp.ANY) {    return deepCopy(left);  }  if (left.operator == QueryOp.NONE) {    return deepCopy(right);  }  if ((left.operator == QueryOp.OR && right.operator == QueryOp.OR) || (left.operator == QueryOp.OR && right.operator == QueryOp.LEAF) || (left.operator == QueryOp.LEAF && right.operator == QueryOp.OR)) {    GramBooleanQuery toReturn=new GramBooleanQuery(QueryOp.OR);    mergeIntoSubquery(toReturn,deepCopy(left));    mergeIntoSubquery(toReturn,deepCopy(right));    return toReturn;  } else {    GramBooleanQuery toReturn=new GramBooleanQuery(QueryOp.OR);    toReturn.subQuerySet.add(deepCopy(left));    toReturn.subQuerySet.add(deepCopy(right));    return toReturn;  }}  }
class C{  public void testZeroFrequencySuggestionsNegative(){  assertFalse(sh.isASuggestion("yike","yikes"));  assertFalse(sh.isASuggestion("what","whatcha"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public void flush() throws TTransportException {  if (outputStream_ == null) {    throw new TTransportException(TTransportException.NOT_OPEN,"Cannot flush null outputStream");  }  try {    outputStream_.flush();  } catch (  IOException iox) {    throw new TTransportException(TTransportException.UNKNOWN,iox);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.845 -0500",hash_original_method="645397050BFF5ABB72125064EE5637C4",hash_generated_method="662E9C42E1E46F49F7BC446F9F5F8C89") public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_HPIF) {    return handleHPIF(request);  } else   if (type == CHUNK_HPSG) {    return handleHPSGNHSG(request,false);  } else   if (type == CHUNK_HPDU) {    return handleHPDU(request);  } else   if (type == CHUNK_HPDS) {    return handleHPDS(request);  } else   if (type == CHUNK_NHSG) {    return handleHPSGNHSG(request,true);  } else   if (type == CHUNK_HPGC) {    return handleHPGC(request);  } else   if (type == CHUNK_REAE) {    return handleREAE(request);  } else   if (type == CHUNK_REAQ) {    return handleREAQ(request);  } else   if (type == CHUNK_REAL) {    return handleREAL(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  public static int countDots(final String s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '.') {      count++;    }  }  return count;}  }
class C{  public void startInstallerIntent(Uri fileUri){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setDataAndType(fileUri,resources.getString(R.string.application_mgr_mime));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public Period addAssign(final Period another){  if (this.length() == 0) {    this.length=another.length();    this.units=another.units();  } else   if (this.units == another.units())   this.length+=another.length(); else switch (this.units) {case Years:switch (another.units()) {case Months:      this.units=another.units();    this.length=this.length * 12 + another.length();  break;case Weeks:case Days:throw new IllegalArgumentException(INCOMPATIBLE_TIME_UNIT);default :throw new LibraryException(UNKNOWN_TIME_UNIT);}break;case Months:switch (another.units()) {case Years:this.length+=another.length() * 12;break;case Weeks:case Days:throw new IllegalArgumentException(INCOMPATIBLE_TIME_UNIT);default :throw new LibraryException(UNKNOWN_TIME_UNIT);}break;case Weeks:switch (another.units()) {case Days:this.units=another.units();this.length=this.length * 7 + another.length();break;case Years:case Months:throw new IllegalArgumentException(INCOMPATIBLE_TIME_UNIT);default :throw new LibraryException(UNKNOWN_TIME_UNIT);}break;case Days:switch (another.units()) {case Weeks:this.length+=another.length() * 7;break;case Years:case Months:throw new IllegalArgumentException(INCOMPATIBLE_TIME_UNIT);default :throw new LibraryException(UNKNOWN_TIME_UNIT);}break;default :throw new LibraryException(UNKNOWN_TIME_UNIT);}return this;}  }
class C{  public static boolean isInvisibleQualified(AnnotationMirror anno){  return ((TypeElement)anno.getAnnotationType().asElement()).getAnnotation(InvisibleQualifier.class) != null;}  }
class C{  public void sendTo(EntityPlayer player){  if (isUpdating) {    return;  }  if (world == null && player != null) {    world=player.worldObj;  }  NotifyImplementation.instance.doSend(player,where,world,style,item,message,messageParameters);  changed=false;  changedItem=false;  if (updater != null && !addedToRecurList) {    NotifyImplementation.instance.addRecuringNotification(this);    targetPlayer=player;    addedToRecurList=true;  }}  }
class C{  public static String adjustArgList(String args,String mxml,String dir,String prefix){  String className=getSwfClassName(mxml);  args+=" -source-path=" + dir;  args+=" -includes=" + prefix + className;  return args;}  }
class C{  public boolean isDrawSliceTextEnabled(){  return mDrawXLabels;}  }
class C{  public void put(String key,long value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  public AnimatableTransformListValue(AnimationTarget target,List transforms){  super(target);  this.transforms=new Vector(transforms);}  }
class C{  public boolean isEmpty(){  return (curves.size() == 0);}  }
class C{  private boolean validate(String overlayConfig){  String error=null;  if (overlayConfig.trim().length() == 0) {    error=mActivity.getString(R.string.validation_config_empty);    InvalidOverlayDialogFragment dialogFragment=InvalidOverlayDialogFragment.newInstance(error);    dialogFragment.show(mActivity.getSupportFragmentManager(),InvalidOverlayDialogFragment.TAG);    return false;  }  try {    mOverlayInflater.inflateOverlay(overlayConfig);  } catch (  Exception e) {    error=e.getMessage();  }  if (error == null) {    return true;  } else {    InvalidOverlayDialogFragment dialogFragment=InvalidOverlayDialogFragment.newInstance(error);    dialogFragment.show(mActivity.getSupportFragmentManager(),InvalidOverlayDialogFragment.TAG);    return false;  }}  }
class C{  public static Properties load(File file) throws FileNotFoundException, IOException {  Properties props=new Properties();  props.load(new FileReader(file));  return props;}  }
class C{  boolean thresholdExceeded(final Set<IBindingSet> distinctProjectionBuffer,final int distinctProjectionBufferThreshold,final List<IBindingSet> incomingBindingsBuffer,final int incomingBindingsBufferThreshold){  return distinctProjectionBuffer.size() >= distinctProjectionBufferThreshold || incomingBindingsBuffer.size() >= incomingBindingsBufferThreshold;}  }
class C{  public code removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.REACTION__TRIGGER:    return basicSetTrigger(null,msgs);case SGraphPackage.REACTION__EFFECT:  return basicSetEffect(null,msgs);case SGraphPackage.REACTION__PROPERTIES:return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public MLet(URL[] urls,boolean delegateToCLR){  super(urls);  init(delegateToCLR);}  }
class C{  protected void onReleaseResources(T apps){}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>Collection<T> plus(Collection<T> left,Iterable<T> right){  return plus(left,asCollection(right));}  }
class C{  public void paintFormattedTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  public static String string(int alg){  return algs.getText(alg);}  }
class C{  public void addTextListener(final TextListener listener){  textListeners.add(listener);}  }
class C{  static void appendToPointerHierarchy(final BaseType type,final BaseType pointer){  Preconditions.checkNotNull(type,"Error: type argument can not be null.");  Preconditions.checkNotNull(pointer,"Error: pointer argument can not be null.");  Preconditions.checkArgument(type != pointer,"Error: Can not establish pointer relation between identical types.");  Preconditions.checkArgument(pointer.pointedToBy != type,"Error: Can not establish circular pointer relation.");  Preconditions.checkArgument(type.pointsTo != pointer,"Error: Can not establish circular pointer relation.");  pointer.pointsTo=type;  type.pointedToBy=pointer;}  }
class C{  public void insert(int index,Node root){  insert(roots,index,root);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.check();  int size=in.readInt();  for (int i=0; i < size; i++) {    try {      E item=itemTypeClass.newInstance();      item.readFields(in);      this.add(item);    } catch (    InstantiationException e) {      throw new IOException("Got exception to create instance for class: " + itemTypeClass + ": "+ e.getMessage(),e);    }catch (    IllegalAccessException e) {      throw new IOException("Got exception to create instance for class: " + itemTypeClass + ": "+ e.getMessage(),e);    }  }}  }
class C{  public void writeOperationsCarFile(){  makeBackupFile(defaultOperationsFilename());  try {    if (!checkFile(defaultOperationsFilename())) {      java.io.File file=new java.io.File(defaultOperationsFilename());      java.io.File parentDir=file.getParentFile();      if (!parentDir.exists()) {        if (!parentDir.mkdir()) {          log.error("Directory wasn't created");        }      }      if (file.createNewFile()) {        log.debug("File created");      }    }    writeFile(defaultOperationsFilename());  } catch (  Exception e) {    log.error("Exception while writing the new CSV operations file, may not be complete: " + e);  }}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2,LinkedList<Diff> diffs){  return patch_make(text1,diffs);}  }
class C{  public JavaObject(long classID,long offset){  super(offset);  this.clazz=makeId(classID);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static boolean isCoin(ItemStack item){  for (  ItemStack coin : EngraverRecipes.instance().getCoinList())   if (coin.getItem() == item.getItem() && (coin.getItemDamage() == OreDictionary.WILDCARD_VALUE || coin.getItemDamage() == item.getItemDamage()))   return true;  return false;}  }
class C{  public NTriplesParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  public void doCloseAll(final Tradestrategy tradestrategy){  try {    if (null == tradestrategy.getIdTradeStrategy()) {      return;    }    TradestrategyOrders positionOrders=m_tradePersistentModel.findPositionOrdersByTradestrategyId(tradestrategy.getIdTradeStrategy());    Tradestrategy instance=m_tradePersistentModel.findTradestrategyById(tradestrategy.getIdTradeStrategy());    for (    TradeOrder order : positionOrders.getTradeOrders()) {      if (order.isActive()) {        m_brokerModel.onCancelOrder(order);      }    }    if (positionOrders.hasOpenTradePosition()) {      int result=JOptionPane.showConfirmDialog(this.getFrame(),"Are you sure you want to close " + tradestrategy.getContract().getSymbol() + " open position with a market order?","Information",JOptionPane.YES_NO_OPTION);      if (result == JOptionPane.YES_OPTION) {        TradeOrder openTradeOrder=null;        for (        TradeOrder tradeOrder : positionOrders.getTradeOrders()) {          if (tradeOrder.getIsOpenPosition()) {            openTradeOrder=tradeOrder;          }        }        int openQuantity=Math.abs(positionOrders.getOpenTradePosition().getOpenQuantity());        if (openQuantity > 0) {          String action=Action.BUY;          if (Side.BOT.equals(positionOrders.getOpenTradePosition().getSide())) {            action=Action.SELL;          }          TradeOrder tradeOrder=new TradeOrder(instance,action,TradingCalendar.getDateTimeNowMarketTimeZone(),OrderType.MKT,openQuantity,null,null,OverrideConstraints.YES,TimeInForce.DAY,TriggerMethod.DEFAULT);          tradeOrder.setTransmit(true);          if (null != openTradeOrder.getFAProfile()) {            tradeOrder.setFAProfile(openTradeOrder.getFAProfile());          } else {            if (openTradeOrder.getFAGroup() != null) {              tradeOrder.setFAGroup(openTradeOrder.getFAGroup());              tradeOrder.setFAMethod(openTradeOrder.getFAMethod());              tradeOrder.setFAPercent(openTradeOrder.getFAPercent());            } else {              if (null != instance.getPortfolio().getIndividualAccount()) {                tradeOrder.setAccountNumber(instance.getPortfolio().getIndividualAccount().getAccountNumber());              }            }          }          tradeOrder=m_brokerModel.onPlaceOrder(instance.getContract(),tradeOrder);        }      }    }  } catch (  Exception ex) {    this.setErrorMessage("Could not close position.",ex.getMessage(),ex);  }}  }
class C{  public void textElement(String elName,String text) throws IOException {  _writeIndent();  _write("<" + elName);  _writeAtts();  _write(">");  text(text);  _writeLn("</" + elName + ">");}  }
class C{  private void paintBackground(SynthContext ctx,Graphics g,int x,int y,int w,int h,int orientation){  Component c=ctx.getComponent();  boolean ltr=c.getComponentOrientation().isLeftToRight();  if (ctx.getComponent() instanceof JSlider)   ltr=true;  if (orientation == SwingConstants.VERTICAL && ltr) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(ctx,g,y,x,h,w,transform);  } else   if (orientation == SwingConstants.VERTICAL) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(ctx,g,y,x,h,w,transform);  } else   if (orientation == SwingConstants.HORIZONTAL && ltr) {    paintBackground(ctx,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(ctx,g,0,0,w,h,transform);  }}  }
class C{  public static boolean compareHash(Sha256Hash hash1,Sha256Hash hash2){  return hash1.toString().equals(hash2.toString());}  }
class C{  public int nextInt(){  int c=0;  double u, f;  u=this.randomGenerator.nextDouble();  u*=this.K;  c=(int)u;  u-=c;  f=this.F[c];  if (f == 1.0)   return c;  if (u < f) {    return c;  } else {    return this.A[c];  }}  }
class C{  public long unblockRequestOnShard(String shardId){  CountDownLatch lock=shardLocks.remove(shardId);  if (lock != null) {    long count=lock.getCount();    lock.countDown();    trace("[{}] Request unblocked on shardId={}",gondola.getHostId(),shardId);    return count;  }  return 0;}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  public SharpRidge(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported10.class,args);}  }
class C{  @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception {  resources.resourceId("apis");}  }
class C{  public void execute() throws BuildException {  if (!(this.inputFile == null && this.outputFile == null)) {    Key key=this.readKey();    this.logInfo("key read " + (key != null));    Cipher cipher=this.initialiseCipher(key);    this.crypt(cipher);  }}  }
class C{  public void removeListener(final IFunctionListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static GVTFontFamily resolve(UnresolvedFontFamily fontFamily){  return resolve(fontFamily.getFamilyName());}  }
class C{  @Override public boolean done(){  if (stoppingIncrements && incrementsLeft == 0)   return true; else   return false;}  }
class C{  public boolean isAllItems(){  return allItems;}  }
class C{  public int sensorAddr(){  int sw1=getElement(1);  int sw2=getElement(2);  int as=sw2 & 0x20;  int high=sw2 & 0x0F;  int low=sw1 & 0x7F;  return high * 256 + low * 2 + (as != 0 ? 1 : 0);}  }
class C{  public static void ensureFromTo(final int arrayLength,final int from,final int to){  if (from < 0)   throw new ArrayIndexOutOfBoundsException("Start index (" + from + ") is negative");  if (from > to)   throw new IllegalArgumentException("Start index (" + from + ") is greater than end index ("+ to+ ")");  if (to > arrayLength)   throw new ArrayIndexOutOfBoundsException("End index (" + to + ") is greater than array length ("+ arrayLength+ ")");}  }
class C{  public void add(IntArray array){  if (_data.length <= array._size)   expand(_size + array._size);  for (int i=0; i < array._size; i++)   _data[_size++]=array._data[i];}  }
class C{  static boolean compareNotNull(Database database,Value l,Value r,int compareType){  boolean result;switch (compareType) {case EQUAL:case EQUAL_NULL_SAFE:    result=database.areEqual(l,r);  break;case NOT_EQUAL:case NOT_EQUAL_NULL_SAFE:result=!database.areEqual(l,r);break;case BIGGER_EQUAL:result=database.compare(l,r) >= 0;break;case BIGGER:result=database.compare(l,r) > 0;break;case SMALLER_EQUAL:result=database.compare(l,r) <= 0;break;case SMALLER:result=database.compare(l,r) < 0;break;case SPATIAL_INTERSECTS:{ValueGeometry lg=(ValueGeometry)l.convertTo(Value.GEOMETRY);ValueGeometry rg=(ValueGeometry)r.convertTo(Value.GEOMETRY);result=lg.intersectsBoundingBox(rg);break;}default :throw DbException.throwInternalError("type=" + compareType);}return result;}  }
class C{  public void onRetry(R result,Throwable failure){}  }
class C{  public AbstractMRMessage createOutPacket(){  int nOutBytes=numOutputCards() * (bitsPerCard / 8);  int nDLE=0;  for (int i=0; i < nOutBytes; i++) {    if ((outputArray[i] == 2) || (outputArray[i] == 3) || (outputArray[i] == 16)) {      nDLE++;    }  }  SerialMessage m=new SerialMessage(nOutBytes + nDLE + 2);  m.setElement(0,getNodeAddress() + 65);  m.setElement(1,84);  int k=2;  for (int i=0; i < nOutBytes; i++) {    if ((outputArray[i] == 2) || (outputArray[i] == 3) || (outputArray[i] == 16)) {      m.setElement(k,16);      k++;    }    m.setElement(k,outputArray[i]);    k++;  }  return m;}  }
class C{  public void dispose(){  m_text=null;  m_button=null;  m_mField=null;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public CoapClient useLateNegotiation(){  this.blockwise=0;  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenDept[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  private void fillResourceType(){  int S_ResourceType_ID=0;  if (m_mAssignment.getS_Resource_ID() != 0) {    String sql="SELECT S_ResourceType_ID FROM S_Resource WHERE S_Resource_ID=?";    try {      PreparedStatement pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_mAssignment.getS_Resource_ID());      ResultSet rs=pstmt.executeQuery();      if (rs.next())       S_ResourceType_ID=rs.getInt(1);      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    }  }  String sql=MRole.getDefault().addAccessSQL("SELECT S_ResourceType_ID, Name FROM S_ResourceType WHERE IsActive='Y' ORDER BY 2","S_ResourceType",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  KeyNamePair defaultValue=null;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      if (S_ResourceType_ID == pp.getKey())       defaultValue=pp;      fieldResourceType.appendItem(pp.getName(),pp.getKey());    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (defaultValue != null) {    int cnt=fieldResourceType.getItemCount();    for (int i=0; i < cnt; i++) {      ListItem li=fieldResourceType.getItemAtIndex(i);      Integer key=(Integer)li.getValue();      if (key.intValue() == defaultValue.getKey()) {        fieldResourceType.setSelectedItem(li);        break;      }    }  } else   if (fieldResourceType.getItemCount() > 0) {    fieldResourceType.setSelectedIndex(0);  }}  }
class C{  private boolean isRequired(UIComponent uiComponent){  Object object=uiComponent.getAttributes().get(REQUIRED);  if (object == null) {    return false;  } else {    return ((Boolean)object).booleanValue();  }}  }
class C{  public BoundSet(InferenceContext ic,RuleEnvironment G,N4JSTypeSystem ts){  this.ic=ic;  this.G=G;  this.ts=ts;}  }
class C{  public LZ3(){  super(30,2,21,23,1);}  }
class C{  public static double twoPow(int power){  if (power >= 0) {    if (power <= MAX_DOUBLE_EXPONENT) {      return twoPowTab[power - MIN_DOUBLE_EXPONENT];    } else {      return Double.POSITIVE_INFINITY;    }  } else {    if (power >= MIN_DOUBLE_EXPONENT) {      return twoPowTab[power - MIN_DOUBLE_EXPONENT];    } else {      return 0.0;    }  }}  }
class C{  public static void haltThread(Thread t){  if (t instanceof HaltingThread)   ((HaltingThread)t).halt();}  }
class C{  public static Hours hours(int hours){switch (hours) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case 4:return FOUR;case 5:return FIVE;case 6:return SIX;case 7:return SEVEN;case 8:return EIGHT;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Hours(hours);}}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void paintLine(Point2D pt1,Point2D pt2){  if (pt1 != null && pt2 != null) {    OMLine cLine=new OMLine(pt1.getY(),pt1.getX(),pt2.getY(),pt2.getX(),OMGraphic.LINETYPE_GREATCIRCLE);    Projection proj=theMap.getProjection();    cLine.generate(proj);    distanceList.add(cLine);  }}  }
class C{  @Override public Float put(Float key,Float value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public static <A>FutureWTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public static List<ShapeRecord> rectangle(double startX,double startY,double width,double height){  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  shapeRecords.add(move(startX,startY));  shapeRecords.addAll(straightEdge(startX,startY,width,startY));  shapeRecords.addAll(straightEdge(width,startY,width,height));  shapeRecords.addAll(straightEdge(width,height,startX,height));  shapeRecords.addAll(straightEdge(startX,height,startX,startY));  return shapeRecords;}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  protected ThisTypeRefImpl(){  super();}  }
class C{  public boolean isValueBeingSet(){  return m_settingValue;}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case CREATED:      break;case STARTED:    processIpLeaseDocuments(current);  break;case FAILED:case FINISHED:case CANCELLED:break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public ForwardPlanner(DialogueSystem system){  this.system=system;}  }
class C{  final public int readLength4() throws IOException {  int len=read(4);  if (len < 0) {    throw new IOException("Invalid encoding");  }  return len;}  }
class C{  public static boolean isDeadFluid(World world,int x,int y,int z){  Block block=world.getBlock(x,y,z);  int meta=world.getBlockMetadata(x,y,z);  if (block == null || meta == 0) {    return false;  }  if ((block == Blocks.water || block == Blocks.flowing_water)) {    return true;  } else   if ((block == Blocks.lava || block == Blocks.flowing_lava)) {    return true;  } else   if (block instanceof IFluidBlock) {    return true;  }  return false;}  }
class C{  @SuppressWarnings("try") private void resolveDataFlow(Trace currentTrace,AbstractBlockBase<?>[] blocks){  if (blocks.length < 2) {    return;  }  try (Indent indent=Debug.logAndIndent("resolve data flow")){    TraceLocalMoveResolver moveResolver=allocator.createMoveResolver();    AbstractBlockBase<?> toBlock=null;    for (int i=0; i < blocks.length - 1; i++) {      AbstractBlockBase<?> fromBlock=blocks[i];      toBlock=blocks[i + 1];      assert containedInTrace(currentTrace,fromBlock) : "Not in Trace: " + fromBlock;      assert containedInTrace(currentTrace,toBlock) : "Not in Trace: " + toBlock;      resolveCollectMappings(fromBlock,toBlock,moveResolver);    }    assert blocks[blocks.length - 1].equals(toBlock);    if (toBlock.isLoopEnd()) {      assert toBlock.getSuccessorCount() == 1;      AbstractBlockBase<?> loopHeader=toBlock.getSuccessors()[0];      if (containedInTrace(currentTrace,loopHeader)) {        resolveCollectMappings(toBlock,loopHeader,moveResolver);      }    }  } }  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  @Setup public void init(){  final String array[]=new String[300];  for (int i=0; i < 100; ) {    array[i]=String.valueOf(++i);  }  for (int i=100; i < 200; ) {    array[i]="Binary value " + i + ": "+ Integer.toString(++i,2);  }  for (int i=200; i < 300; ) {    array[i++]=UUID.randomUUID().toString().replace('-',':');  }  final StringWriter stringWriter=new StringWriter();  final PrettyPrintWriter writer=new CompactWriter(stringWriter);  writer.startNode("string-array");  for (int i=0; i < 10000; ++i) {    writer.startNode("string");    final String s;    if ((i & 1) == 1) {      s=array[(i >> 1) % 100];    } else     if ((i & 2) == 2) {      s=array[100 + (i >> 2) % 100];    } else     if ((i & 4) == 4) {      s=array[200 + (i >> 3) % 100];    } else {      s="Random UUID: " + UUID.randomUUID().toString();    }    writer.setValue(s);    writer.endNode();  }  writer.endNode();  writer.close();  xml=stringWriter.toString();}  }
class C{  public static byte initializeEntityActivationType(Entity entity){  Chunk chunk=null;  if (entity instanceof EntityMob || entity instanceof EntitySlime || entity.isCreatureType(EnumCreatureType.monster,false)) {    return 1;  } else   if (entity instanceof EntityCreature || entity instanceof EntityAmbientCreature || entity.isCreatureType(EnumCreatureType.creature,false)|| entity.isCreatureType(EnumCreatureType.waterCreature,false)|| entity.isCreatureType(EnumCreatureType.ambient,false)) {    return 2;  } else {    return 3;  }}  }
class C{  void recordAccess(ObjectIntHashMap m){}  }
class C{  public ConnectionRequest(String url){  this();  setUrl(url);}  }
class C{  public boolean forwardIfCurrent(String first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  public static void text(double x,double y,String s,double degrees){  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,s);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  public void close(){  mMultimediaMessagingCache.clear();  if (sLogger.isActivated()) {    sLogger.info("Multimedia session service API is closed");  }}  }
class C{  public SignatureBaseString(HttpRequest request,HttpParameters requestParameters){  this.request=request;  this.requestParameters=requestParameters;}  }
class C{  public void flag500Error(){  if (!_statsOn) {    return;  }  _500ErrorsLstHr.incrementAndGet();}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  private void handleDeleteExamples(ExampleTaskServiceState task){  if (task.exampleQueryTask.results == null) {    sendSelfFailurePatch(task,"Query task service returned null results");    return;  }  if (task.exampleQueryTask.results.documentLinks == null) {    sendSelfFailurePatch(task,"Query task service returned null documentLinks");    return;  }  if (task.exampleQueryTask.results.documentLinks.size() == 0) {    logFine("No example service documents found, nothing to do");    sendSelfPatch(task,TaskStage.FINISHED,null);    return;  }  List<Operation> deleteOperations=new ArrayList<>();  for (  String exampleService : task.exampleQueryTask.results.documentLinks) {    URI exampleServiceUri=UriUtils.buildUri(this.getHost(),exampleService);    Operation deleteOp=Operation.createDelete(exampleServiceUri);    deleteOperations.add(deleteOp);  }  OperationJoin operationJoin=OperationJoin.create();  operationJoin.setOperations(deleteOperations).setCompletion(null).sendWith(this);}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public boolean hasNewHeader(int position){  if (indexOutOfBounds(position)) {    return false;  }  long headerId=mAdapter.getHeaderId(position);  if (headerId < 0) {    return false;  }  return position == 0 || headerId != mAdapter.getHeaderId(position - 1);}  }
class C{  public void onStart(OneSheeldDevice device){}  }
class C{  public void enforceAMF3(){  amf3_mode++;}  }
class C{  public static Map toMap(Object o) throws PageException {  return toMap(o,false);}  }
class C{  @Override public void init(AbstractAddressbookManager aBooMgr){  setAddressBookManager(aBooMgr);  reloadSettings();  try {    connection=DriverManager.getConnection(IDENTITYDB_CONNECT_STRING);  } catch (  SQLException e) {    logger.error("IdentityManager: Failure to connect to db: " + IDENTITYDB_CONNECT_STRING,e);  }  Statement statement;  try {    statement=connection.createStatement();    statement.setQueryTimeout(30);    statement.executeUpdate("create table if not exists " + TABLE_IDENTITY + " (id INTEGER PRIMARY KEY AUTOINCREMENT, name string, firstname string, email string, keystorePath string)");    statement.executeUpdate("create table if not exists " + TABLE_CLOUDPROVIDER + " (id INTEGER PRIMARY KEY AUTOINCREMENT, name string, username string, password string)");    statement.executeUpdate("create table if not exists " + TABLE_CLOUDPROVIDER_MAP + " (identityID integer, cloudProviderID integer)");    aBooMgr.init();  } catch (  SQLException e) {    logger.error("IdentityManager: Failure on creating tables",e);  } finally {    if (connection != null) {      try {        connection.close();      } catch (      SQLException e) {        logger.error("IdentityManager: Failure to close db connection while creating tables",e);      }    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public StripedCompositeReadWriteLock(int concurrencyLvl){  locks=new ReadLock[concurrencyLvl];  for (int i=0; i < concurrencyLvl; i++)   locks[i]=new ReadLock();  writeLock=new WriteLock();}  }
class C{  public static void copy(String in,Writer out) throws IOException {  Assert.notNull(in,"No input String specified");  Assert.notNull(out,"No Writer specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  protected void readBitmap(){  currentFrame.ix=readShort();  currentFrame.iy=readShort();  currentFrame.iw=readShort();  currentFrame.ih=readShort();  final int packed=read();  lctFlag=(packed & 0x80) != 0;  lctSize=(int)Math.pow(2,(packed & 0x07) + 1);  currentFrame.interlace=(packed & 0x40) != 0;  if (lctFlag) {    currentFrame.lct=readColorTable(lctSize);  } else {    currentFrame.lct=null;  }  currentFrame.bufferFrameStart=rawData.position();  skipBitmapData();  if (err()) {    return;  }  frameCount++;  frames.add(currentFrame);}  }
class C{  public static final long bitscanClear(long bitboard){  return bitboard & bitboard - 1;}  }
class C{  private void checkforRowSetInterface() throws SQLException {  if ((this instanceof javax.sql.RowSet) == false) {    throw new SQLException("The class extending abstract class BaseRowSet " + "must implement javax.sql.RowSet or one of it's sub-interfaces.");  }}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public void clear(){  observers.clear();}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return false;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  repaint();}  }
class C{  public void service(Mail mail) throws MessagingException {  Collection<MailAddress> recipients=mail.getRecipients();  Collection<MailAddress> recipientsToRemove=null;  MailetContext mailetContext=getMailetContext();  boolean postmasterAddressed=false;  for (  MailAddress addr : recipients) {    if (addr.getLocalPart().equalsIgnoreCase("postmaster") && mailetContext.isLocalServer(addr.getDomain()) && !mailetContext.isLocalEmail(addr)) {      if (recipientsToRemove == null) {        recipientsToRemove=new Vector<MailAddress>();      }      recipientsToRemove.add(addr);      postmasterAddressed=true;    }  }  if (postmasterAddressed) {    recipients.removeAll(recipientsToRemove);    recipients.add(getMailetContext().getPostmaster());  }}  }
class C{  private TextAnchor textAlignPtForLabelAnchorH(RectangleAnchor anchor){  TextAnchor result=TextAnchor.CENTER;  if (anchor.equals(RectangleAnchor.TOP_LEFT)) {    result=TextAnchor.BOTTOM_LEFT;  } else   if (anchor.equals(RectangleAnchor.TOP)) {    result=TextAnchor.BOTTOM_CENTER;  } else   if (anchor.equals(RectangleAnchor.TOP_RIGHT)) {    result=TextAnchor.BOTTOM_RIGHT;  } else   if (anchor.equals(RectangleAnchor.LEFT)) {    result=TextAnchor.HALF_ASCENT_LEFT;  } else   if (anchor.equals(RectangleAnchor.RIGHT)) {    result=TextAnchor.HALF_ASCENT_RIGHT;  } else   if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) {    result=TextAnchor.TOP_LEFT;  } else   if (anchor.equals(RectangleAnchor.BOTTOM)) {    result=TextAnchor.TOP_CENTER;  } else   if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) {    result=TextAnchor.TOP_RIGHT;  }  return result;}  }
class C{  boolean isNotTabu(Operation oOperation){  return true;}  }
class C{  private void noteExpiredLease(){  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[noteExpiredLease] {}",this.thread);  }  if (this.expiredLeases == null) {    this.expiredLeases=new WeakHashMap();  }  this.expiredLeases.put(this.thread,null);}  }
class C{  public static boolean withinClassOrInterface(Tree.Declaration decl){  return withinClassOrInterface(decl.getDeclarationModel());}  }
class C{  protected boolean considerEdit(TextEdit edit){  return true;}  }
class C{  public boolean moveLayer(Layer layer,int toPosition){  boolean found=getLayerList().contains(layer);  addLayer(layer,toPosition);  return found;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.IMPORT_DECLARATION__IMPORT_SPECIFIERS:    return getImportSpecifiers();case N4JSPackage.IMPORT_DECLARATION__IMPORT_FROM:  return isImportFrom();case N4JSPackage.IMPORT_DECLARATION__MODULE:if (resolve) return getModule();return basicGetModule();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MiniSolrCloudCluster(int numServers,Path baseDir,String solrXml,JettyConfig jettyConfig) throws Exception {  this(numServers,baseDir,solrXml,jettyConfig,null);}  }
class C{  public InBandBytestreamSession establishSession(String targetJID,String sessionID) throws XMPPException {  Open byteStreamRequest=new Open(sessionID,this.defaultBlockSize,this.stanza);  byteStreamRequest.setTo(targetJID);  SyncPacketSend.getReply(this.connection,byteStreamRequest);  InBandBytestreamSession inBandBytestreamSession=new InBandBytestreamSession(this.connection,byteStreamRequest,targetJID);  this.sessions.put(sessionID,inBandBytestreamSession);  return inBandBytestreamSession;}  }
class C{  public static TypeVar unique(String prefix){  return new TypeVar(prefix + "___" + Integer.toHexString(tvOffset++),true);}  }
class C{  public void casToTcfWriter(JCas aJCas,OutputStream aOs) throws WLFormatException {  TextCorpusStored textCorpus=new TextCorpusStored(aJCas.getDocumentLanguage());  textCorpus.createTextLayer().addText(aJCas.getDocumentText());  write(aJCas,textCorpus);  WLData wldata=new WLData(textCorpus);  WLDObjector.write(wldata,aOs);}  }
class C{  public Engine(final SpeakerNPC speakerNPC){  if (speakerNPC == null) {    throw new IllegalArgumentException("speakerNPC must not be null");  }  this.speakerNPC=speakerNPC;}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_Activity);  return success;}  }
class C{  public void identity(){  transformMatrix.idt();  matrixDirty=true;}  }
class C{  public static GridJavaProcess exec(String clsName,String params,@Nullable IgniteLogger log,@Nullable IgniteInClosure<String> printC,@Nullable GridAbsClosure procKilledC,@Nullable String javaHome,@Nullable Collection<String> jvmArgs,@Nullable String cp) throws Exception {  GridJavaProcess gjProc=new GridJavaProcess();  gjProc.log=log;  gjProc.procKilledC=procKilledC;  List<String> procParams=params == null || params.isEmpty() ? Collections.<String>emptyList() : Arrays.asList(params.split(" "));  List<String> procCommands=new ArrayList<>();  String javaBin=(javaHome == null ? System.getProperty("java.home") : javaHome) + File.separator + "bin"+ File.separator+ "java";  procCommands.add(javaBin);  procCommands.addAll(jvmArgs == null ? U.jvmArgs() : jvmArgs);  if (jvmArgs == null || (!jvmArgs.contains("-cp") && !jvmArgs.contains("-classpath"))) {    String classpath=System.getProperty("java.class.path");    String sfcp=System.getProperty("surefire.test.class.path");    if (sfcp != null)     classpath+=System.getProperty("path.separator") + sfcp;    if (cp != null)     classpath+=System.getProperty("path.separator") + cp;    procCommands.add("-cp");    procCommands.add(classpath);  }  procCommands.add(clsName);  procCommands.addAll(procParams);  ProcessBuilder builder=new ProcessBuilder(procCommands);  builder.redirectErrorStream(true);  Process proc=builder.start();  gjProc.osGrabber=gjProc.new ProcessStreamGrabber(proc.getInputStream(),printC);  gjProc.esGrabber=gjProc.new ProcessStreamGrabber(proc.getErrorStream(),printC);  gjProc.osGrabber.start();  gjProc.esGrabber.start();  gjProc.proc=proc;  return gjProc;}  }
class C{  public void dispose(){  ParseResultBroadcaster.getParseResultBroadcaster().removeParseResultListener(this);}  }
class C{  @Override public void writeToNBT(NBTTagCompound par1NBTTagCompound){  super.writeToNBT(par1NBTTagCompound);  par1NBTTagCompound.setInteger("tier",this.tier);}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.218 -0500",hash_original_method="A8D2AD12ACC5E410C736D30130C20B13",hash_generated_method="0923654BB8AF65F9484CAA5A96D66B6A") public boolean quickReject(float left,float top,float right,float bottom,EdgeType type){  return native_quickReject(mNativeCanvas,left,top,right,bottom,type.nativeInt);}  }
class C{  public OldDoFn<InputT,OutputT>.ProcessContext processContext(){  return new NoOpDoFnProcessContext();}  }
class C{  public final static EarlyTerminatingCollector wrapCountBasedEarlyTerminatingCollector(final Collector delegate,int maxCountHits){  return new EarlyTerminatingCollector(delegate,maxCountHits);}  }
class C{  public static StatusBarNotificationEvo from(final StatusBarNotification sbn,final NotificationHolder.OnDemandSuppliers suppliers){  if (sbn instanceof StatusBarNotificationEvo) {    final StatusBarNotificationEvo sbne=(StatusBarNotificationEvo)sbn;    final StatusBarNotificationEvo clone=new StatusBarNotificationEvo(sbn.getPackageName(),null,sbne.getOriginalId(),sbne.getOriginalTag(),SbnCompat.getUid(sbn),0,0,sbn.getNotification(),SbnCompat.userOf(sbn),sbn.getPostTime(),suppliers);    clone.tag=sbne.tag;    clone.id=sbne.id;    clone.tag_decorated=sbne.tag_decorated;    clone.updateKey();    return clone;  }  return new StatusBarNotificationEvo(sbn.getPackageName(),null,sbn.getId(),sbn.getTag(),SbnCompat.getUid(sbn),0,0,sbn.getNotification(),SbnCompat.userOf(sbn),sbn.getPostTime(),suppliers);}  }
class C{  public LocationConfiguration askForSettingsApi(boolean askForSettingsApi){  this.askForSettingsApi=askForSettingsApi;  return this;}  }
class C{  public void edit(Instanceof i) throws CannotCompileException {}  }
class C{  public boolean hasAccessControlList(String aclId){  return acls.containsKey(aclId);}  }
class C{  public void flip(int i){  bits[i >> 5]^=1 << (i & 0x1F);}  }
class C{  private void loginImpl() throws LoginException {  if (subject == null) {    subject=new Subject();  }  if (sharedState == null) {    sharedState=new HashMap<String,Object>();  }  Throwable firstProblem=null;  int[] logged=new int[4];  int[] total=new int[4];  for (  Module module : modules) {    try {      module.create(subject,callbackHandler,sharedState);      if (module.module.login()) {        ++total[module.getFlag()];        ++logged[module.getFlag()];        if (module.getFlag() == SUFFICIENT) {          break;        }      }    } catch (    Throwable ex) {      if (firstProblem == null) {        firstProblem=ex;      }      if (module.klass == null) {        ++total[REQUIRED];        break;      }      ++total[module.getFlag()];      if (module.getFlag() == REQUISITE) {        break;      }    }  }  boolean fail=true;  if (logged[REQUIRED] != total[REQUIRED] || logged[REQUISITE] != total[REQUISITE]) {  } else {    if (total[REQUIRED] == 0 && total[REQUISITE] == 0) {      if (logged[OPTIONAL] != 0 || logged[SUFFICIENT] != 0) {        fail=false;      }    } else {      fail=false;    }  }  int commited[]=new int[4];  total[0]=total[1]=total[2]=total[3]=0;  if (!fail) {    for (    Module module : modules) {      if (module.klass != null) {        ++total[module.getFlag()];        try {          module.module.commit();          ++commited[module.getFlag()];        } catch (        Throwable ex) {          if (firstProblem == null) {            firstProblem=ex;          }        }      }    }  }  fail=true;  if (commited[REQUIRED] != total[REQUIRED] || commited[REQUISITE] != total[REQUISITE]) {  } else {    if (total[REQUIRED] == 0 && total[REQUISITE] == 0) {      if (commited[OPTIONAL] != 0 || commited[SUFFICIENT] != 0) {        fail=false;      } else {      }    } else {      fail=false;    }  }  if (fail) {    for (    Module module : modules) {      try {        module.module.abort();      } catch (      Throwable ex) {        if (firstProblem == null) {          firstProblem=ex;        }      }    }    if (firstProblem instanceof PrivilegedActionException && firstProblem.getCause() != null) {      firstProblem=firstProblem.getCause();    }    if (firstProblem instanceof LoginException) {      throw (LoginException)firstProblem;    }    throw (LoginException)new LoginException("auth.37").initCause(firstProblem);  }  loggedIn=true;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public String action(){  return action;}  }
class C{  private boolean projectIssueHasExpense(int S_TimeExpenseLine_ID){  if (m_projectIssues == null)   m_projectIssues=m_project.getIssues();  for (int i=0; i < m_projectIssues.length; i++) {    if (m_projectIssues[i].getS_TimeExpenseLine_ID() == S_TimeExpenseLine_ID)     return true;  }  return false;}  }
class C{  protected void removeAllHighlights(boolean isForcing){  if (decorators == null) {    return;  }  for (  HighlightDecorator decorator : decorators) {    decorator.clear(true);    decorator.square.setDirty(true);  }  for (  HighlightDecorator decorator : dropSquareDecorators) {    if (decorator != null) {      decorator.clear(true);    }  }}  }
class C{  public TinyPuzzle(){  s=new int[2];}  }
class C{  private void installIndex(ResourceSet resourceSet,Optional<URI> manifestUri){  ResourceDescriptionsData index=new OrderedResourceDescriptionsData(Collections.<IResourceDescription>emptyList());  List<Resource> resources=Lists.newArrayList(resourceSet.getResources());  for (  Resource resource : resources) {    index(resource,index);  }  if (manifestUri.isPresent()) {    final Resource manifestResource=resourceSet.getResource(manifestUri.get(),true);    if (null != manifestResource) {      index(manifestResource,index);    }  }  Adapter existing=EcoreUtil.getAdapter(resourceSet.eAdapters(),ResourceDescriptionsData.class);  if (existing != null) {    resourceSet.eAdapters().remove(existing);  }  ResourceDescriptionsData.ResourceSetAdapter.installResourceDescriptionsData(resourceSet,index);}  }
class C{  public MemberList<TMember> inheritedMembers(TClass clazz){  TClassifier superType=explicitOrImplicitSuperType(clazz);  if (superType != null) {    return members(superType,null);  }  return MemberList.emptyList();}  }
class C{  public void addTypeDefinition(TypeDefinition typeDefinition){  typeDefinitions.add(typeDefinition);}  }
class C{  public static int computeBubbleLimit(Node from,Node to){  ArrayList fromList=new ArrayList(10);  ArrayList toList=new ArrayList(10);  while (from != null) {    fromList.add(from);    from=((NodeXBL)from).getXblParentNode();  }  while (to != null) {    toList.add(to);    to=((NodeXBL)to).getXblParentNode();  }  int fromSize=fromList.size();  int toSize=toList.size();  for (int i=0; i < fromSize && i < toSize; i++) {    Node n1=(Node)fromList.get(fromSize - i - 1);    Node n2=(Node)toList.get(toSize - i - 1);    if (n1 != n2) {      Node prevBoundElement=((NodeXBL)n1).getXblBoundElement();      while (i > 0 && prevBoundElement != fromList.get(fromSize - i - 1)) {        i--;      }      return fromSize - i - 1;    }  }  return 1;}  }
class C{  private void validateBusinessObjectDefinitionDescriptiveInformationUpdateRequest(BusinessObjectDefinitionDescriptiveInformationUpdateRequest request){  if (request.getDisplayName() != null) {    request.setDisplayName(request.getDisplayName().trim());  }}  }
class C{  public Geo(Geo geo){  this(geo.x,geo.y,geo.z);}  }
class C{  private void updateSsEventEditUrl(URL ssEditUrl,String calEditUrl,String baseEditUrl) throws EPAuthenticationException, IOException, ServiceException {  SpreadsheetService ssService=getSsService();  ListEntry ssEntry=ssService.getEntry(ssEditUrl,ListEntry.class);  String calUrlFieldName=fieldMap.getCalendarUrlColumn();  if (calEditUrl == null && (ssEntry.getCustomElements().getValue(calUrlFieldName) == null || "".equals(ssEntry.getCustomElements().getValue(calUrlFieldName)))) {    calEditUrl=" ";  }  if (calEditUrl != null) {    ssEntry.getCustomElements().setValueLocal(calUrlFieldName,calEditUrl);  }  String baseUrlFieldName=fieldMap.getBaseUrlColumn();  if (baseEditUrl == null && (ssEntry.getCustomElements().getValue(baseUrlFieldName) == null || "".equals(ssEntry.getCustomElements().getValue(baseUrlFieldName)))) {    baseEditUrl=" ";  }  if (baseEditUrl != null) {    ssEntry.getCustomElements().setValueLocal(baseUrlFieldName,baseEditUrl);  }  ssEntry.update();}  }
class C{  public synchronized void ping() throws IOException {  if (tm == null)   throw new IllegalStateException("You need to establish a connection first.");  if (!authenticated)   throw new IllegalStateException("The connection is not authenticated.");  cm.requestGlobalTrileadPing();}  }
class C{  public int length(){  return n;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public boolean isPrototypeMode(){  return protoTypeMode;}  }
class C{  public boolean isRunnerExist(@NotNull Long runnerId){  return runnersId.contains(runnerId);}  }
class C{  public MetadataFactory(){}  }
class C{  private void givenTwoResaleOrganizationsWithCorruptData() throws Exception {  createSupplierProductAndSubscriptions(true);  createBrokerProductAndSubscriptions(true);  createBrokerProductCorruptedData(true);  createResellerProductAndSubscriptions(true);  createResellerProductCorruptedData(true);}  }
class C{  public void removeTransactions(Set<TXId> txIds,boolean distribute){  if (logger.isDebugEnabled()) {    logger.debug("expiring the following transactions: {}",txIds);  }synchronized (this.hostedTXStates) {    Iterator<Map.Entry<TXId,TXStateProxy>> iterator=this.hostedTXStates.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<TXId,TXStateProxy> entry=iterator.next();      if (txIds.contains(entry.getKey())) {        entry.getValue().close();        iterator.remove();      }    }  }  if (distribute) {    TXRemovalMessage.send(this.dm,this.dm.getOtherDistributionManagerIds(),txIds);  }}  }
class C{  public static float lonE7ToX(final int screenWidth,final BoundingBox viewBox,final int lonE7){  return (float)((double)(lonE7 - viewBox.getLeft()) / (double)viewBox.getWidth()) * screenWidth;}  }
class C{  public static void runPythonScript(final String script,final List<Pair<String,Object>> bindings) throws ScriptException {  final ScriptEngine engine=manager.getEngineByName("python");  runScript(engine,script,bindings);}  }
class C{  protected void checkClosed(){  if (session == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (session.isClosed()) {    throw DbException.get(ErrorCode.DATABASE_CALLED_AT_SHUTDOWN);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.380 -0500",hash_original_method="8B20078D970D567CC41CA64CA9C8F771",hash_generated_method="CE4455212C3B8EAB38281BA81F86F88E") public static byte[] convertToPem(Object... objects) throws IOException {  ByteArrayOutputStream bao=new ByteArrayOutputStream();  Writer writer=new OutputStreamWriter(bao,Charsets.US_ASCII);  PEMWriter pw=new PEMWriter(writer);  for (  Object o : objects) {    pw.writeObject(o);  }  pw.close();  return bao.toByteArray();}  }
class C{  public ContextFreeGrammar(){  super();  rules=new ArrayList<Rule>();  wrapLimit=10;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public DecompoundedWord highestRank(ValueNode<DecompoundedWord> aParent,List<DecompoundedWord> aPath){  if (aPath != null) {    aPath.add(aParent.getValue());  }  List<DecompoundedWord> children=aParent.getChildrenValues();  if (children.size() == 0) {    return aParent.getValue();  }  children.add(aParent.getValue());  List<DecompoundedWord> result=rank(children);  DecompoundedWord best=result.get(0);  if (best.equals(aParent.getValue())) {    return aParent.getValue();  } else {    for (    ValueNode<DecompoundedWord> split : aParent.getChildren()) {      if (best.equals(split.getValue())) {        return highestRank(split,aPath);      }    }  }  return null;}  }
class C{  public JobKOctetsProcessed(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public MutableTupleQueryResult(Collection<String> bindingNames,Collection<? extends BindingSet> bindingSets){  this.bindingNames.addAll(bindingNames);  this.bindingSets.addAll(bindingSets);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public boolean hasDocumentation(MuninPlugin plugin){  if (plugin == null)   return false;  String pluginName=plugin.getName();  try {    JSONArray index=this.getIndex().getJSONArray("index");    for (int i=0; i < index.length(); i++) {      if (((JSONObject)index.get(i)).getString("name").equals(pluginName))       return true;    }  } catch (  JSONException ex) {    ex.printStackTrace();    return false;  }  return false;}  }
class C{  public boolean readDescriptor(BleDescriptorCallback bleCallback){  return readDescriptor(getDescriptor(),bleCallback);}  }
class C{  public PopupLoader show(Phase phase){  return show(phase,null);}  }
class C{  public static void applyToOrSetInvisible(ImageHolder imageHolder,ImageView imageView,String tag){  boolean imageSet=applyTo(imageHolder,imageView,tag);  if (imageView != null) {    if (imageSet) {      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.INVISIBLE);    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return ERROR;case 3:return TYPE;default :return null;}}  }
class C{  @Override public UUID createEntryNode(UUID parentNode){  UUID uuid=UUID.randomUUID();  graphServer.addVertex(uuid);  graphServer.addEdge(uuid,parentNode);  return uuid;}  }
class C{  public boolean isRestoreToggleStates(){  return restoreToggleStates;}  }
class C{  private void resetAllStates(){  resetSelectionStates();  mWasLastTapValid=false;}  }
class C{  public KMLStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public void destroy(){  servletEndpointContext=null;  JPLAG_CENTRAL.stopCentral();  JPLAG_CENTRAL=null;}  }
class C{  public boolean hasColors(){  if (getPlayerCount() == 0) {    return false;  }  for (  Player player : players) {    if (!TextUtils.isEmpty(player.color)) {      return true;    }  }  return false;}  }
class C{  public static void printInstructions(IR ir,String message){  header(message,ir.method);  ir.printInstructions();  bottom(message,ir.method);}  }
class C{  @SuppressWarnings("unchecked") public static <T>UnaryOperator<T> identity(){  return (UnaryOperator<T>)IDENTITY;}  }
class C{  public LMT(){  m_fastRegression=true;  m_numBoostingIterations=-1;  m_minNumInstances=15;  m_weightTrimBeta=0;  m_useAIC=false;}  }
class C{  public boolean isInline(){  return inline;}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar,String lineEnd){  this.writer=writer;  this.separator=separator;  this.quotechar=quotechar;  this.escapechar=escapechar;  this.lineEnd=lineEnd;}  }
class C{  public boolean visitMatchPattern(ExpressionOwner owner,StepPattern pattern){  return true;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  if (StringUtils.isEmpty(source)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(source);    return parseKeyAndValueToMap(jsonObject);  } catch (  JSONException e) {    if (isPrintException) {      e.printStackTrace();    }    return null;  }}  }
class C{  public PasteAction(){  this(null);}  }
class C{  @Override public void valueChanged(final ListSelectionEvent e){  form.setSelection(comp.getSelectedValues(),comp.getSelectedValue(),comp.getSelectedIndices(),comp.getSelectedIndex());}  }
class C{  @Override public void delete(){  super.delete();  boolean isSafelyDeleted;  if (!exists(this.hash)) {    try {      isSafelyDeleted=Files.deleteIfExists(getFile().toPath());      if (!isSafelyDeleted) {        play.Logger.error("tried to delete already deleted: " + this);      }    } catch (    Exception e) {      play.Logger.error("Failed to delete: " + this,e);    }  }  AttachmentCache.remove(this);}  }
class C{  private void checkServerEncoding() throws SQLException {  if (getUseUnicode() && (getEncoding() != null)) {    return;  }  String serverCharset=this.serverVariables.get("character_set");  if (serverCharset == null) {    serverCharset=this.serverVariables.get("character_set_server");  }  String mappedServerEncoding=null;  if (serverCharset != null) {    try {      mappedServerEncoding=CharsetMapping.getJavaEncodingForMysqlCharset(serverCharset);    } catch (    RuntimeException ex) {      SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);      sqlEx.initCause(ex);      throw sqlEx;    }  }  if (!getUseUnicode() && (mappedServerEncoding != null)) {    SingleByteCharsetConverter converter=getCharsetConverter(mappedServerEncoding);    if (converter != null) {      setUseUnicode(true);      setEncoding(mappedServerEncoding);      return;    }  }  if (serverCharset != null) {    if (mappedServerEncoding == null) {      if (Character.isLowerCase(serverCharset.charAt(0))) {        char[] ach=serverCharset.toCharArray();        ach[0]=Character.toUpperCase(serverCharset.charAt(0));        setEncoding(new String(ach));      }    }    if (mappedServerEncoding == null) {      throw SQLError.createSQLException("Unknown character encoding on server '" + serverCharset + "', use 'characterEncoding=' property "+ " to provide correct mapping",SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,getExceptionInterceptor());    }    try {      StringUtils.getBytes("abc",mappedServerEncoding);      setEncoding(mappedServerEncoding);      setUseUnicode(true);    } catch (    UnsupportedEncodingException UE) {      throw SQLError.createSQLException("The driver can not map the character encoding '" + getEncoding() + "' that your server is using "+ "to a character encoding your JVM understands. You can specify this mapping manually by adding \"useUnicode=true\" "+ "as well as \"characterEncoding=[an_encoding_your_jvm_understands]\" to your JDBC URL.","0S100",getExceptionInterceptor());    }  }}  }
class C{  protected PermsImpl(){  list=new ArrayList();}  }
class C{  public void close(){  StreamSource ss=_indirectSource;  _indirectSource=null;  if (ss != null) {    ss.freeUseCount();  } else {    freeUseCount();  }}  }
class C{  private Document merge(Document left,Document right){  List<Content> children=new ArrayList<Content>();  children.addAll(right.getRootElement().getContent());  Document tempLeft=(Document)left.clone();  for (  Content node : children) {    if (node instanceof Element) {      Content clone=((Element)node).detach();      tempLeft.getRootElement().addContent(clone);    }  }  return tempLeft;}  }
class C{  public void removeProgressListener(ProgressListener list){  progressSupport.remove(list);}  }
class C{  @Override public Point2D.Double viewToDrawing(Point p){  return new Point2D.Double((p.x + translation.x) / scaleFactor,(p.y + translation.y) / scaleFactor);}  }
class C{  protected void test(String problemName){  Problem problem=ProblemFactory.getInstance().getProblem(problemName);  NondominatedPopulation referenceSet=ProblemFactory.getInstance().getReferenceSet(problemName);  NondominatedPopulation approximationSet=new NondominatedPopulation();  for (int i=0; i < 25; i++) {    approximationSet.add(referenceSet.get(PRNG.nextInt(referenceSet.size())));  }  Hypervolume myHypervolume=new Hypervolume(problem,referenceSet);  jmetal.qualityIndicator.Hypervolume theirHypervolume=new jmetal.qualityIndicator.Hypervolume();  double actual=myHypervolume.evaluate(approximationSet);  double expected=theirHypervolume.hypervolume(toArray(approximationSet),toArray(referenceSet),problem.getNumberOfObjectives());  Assert.assertEquals(expected,actual,0.0001);}  }
class C{  public WattsStrogatzConfig(int numberOfNodes,int meanDegree,double beta){  super(numberOfNodes);  this.meanDegree=meanDegree;  this.beta=beta;}  }
class C{  private static CharProducer guessCharProducer(CharProducer cp,String content,Map<InputSource,CharSequence> sourceMap,PluginMeta meta,InputSource is,InputStream stream,Charset charset) throws IOException {  if (null != cp) {    return cp;  }  if (null != content) {    return CharProducer.Factory.fromString(content,is);  }  if (null != sourceMap && sourceMap.containsKey(is)) {    return CharProducer.Factory.fromString(sourceMap.get(is),is);  }  if (null == stream && null != is) {    CharProducer candidate=guessCharProducer(is,meta);    if (null != candidate) {      return candidate;    }  }  if (null != stream) {    Reader reader;    if (null != charset) {      reader=new InputStreamReader(stream,charset);    } else {      Pair<Reader,String> guess=Chardet.guessCharset(stream);      reader=guess.a;    }    return CharProducer.Factory.create(reader,is);  }  throw new IllegalStateException("Not enough arguments to create a CharProducer");}  }
class C{  public PowerVmAllocationPolicySimple(List<? extends Host> list){  super(list);}  }
class C{  public void testTLSVersion() throws Exception {  final String[] testDbUrls;  Properties props=new Properties();  props.setProperty("allowPublicKeyRetrieval","true");  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("trustCertificateKeyStoreUrl","file:src/testsuite/ssl-test-certs/test-cert-store");  props.setProperty("trustCertificateKeyStoreType","JKS");  props.setProperty("trustCertificateKeyStorePassword","password");  if (this.sha256Conn != null && ((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,5,7)) {    testDbUrls=new String[]{BaseTestCase.dbUrl,sha256Url};  } else {    testDbUrls=new String[]{BaseTestCase.dbUrl};  }  for (  String testDbUrl : testDbUrls) {    System.out.println(testDbUrl);    System.out.println(System.getProperty("java.version"));    Connection sslConn=getConnectionWithProps(testDbUrl,props);    assertTrue(((MySQLConnection)sslConn).getIO().isSSLEstablished());    ResultSet rset=sslConn.createStatement().executeQuery("SHOW STATUS LIKE 'ssl_version'");    assertTrue(rset.next());    String tlsVersion=rset.getString(2);    System.out.println(tlsVersion);    System.out.println();    if (((MySQLConnection)sslConn).versionMeetsMinimum(5,7,10) && Util.getJVMVersion() > 6) {      if (Util.isEnterpriseEdition(((MySQLConnection)sslConn).getServerVersion())) {        assertEquals("TLSv1.2",tlsVersion);      } else {        assertEquals("TLSv1.1",tlsVersion);      }    } else {      assertEquals("TLSv1",tlsVersion);    }    sslConn.close();  }}  }
class C{  public static <T,BT extends ObjectIntProcedure<? super T>>void forEachWithIndex(Iterable<T> iterable,BT procedure,int minForkSize,int taskCount){  ParallelIterate.forEachWithIndex(iterable,new PassThruObjectIntProcedureFactory<>(procedure),new PassThruCombiner<>(),minForkSize,taskCount);}  }
class C{  public static UnsignedShort parseUnsignedShort(String s) throws NumberFormatException, IllegalArgumentException {  return valueOf(Integer.parseInt(s));}  }
class C{  public boolean canAbortFor(Object result,Throwable failure){  for (  BiPredicate<Object,Throwable> predicate : abortConditions) {    if (predicate.test(result,failure))     return true;  }  return false;}  }
class C{  public Ruleset(){}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public static boolean isAutoAdjustDialogSize(){  return autoAdjustDialogSize;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public LocalArgumentsVariable createLocalArgumentsVariable(){  LocalArgumentsVariableImpl localArgumentsVariable=new LocalArgumentsVariableImpl();  return localArgumentsVariable;}  }
class C{  final ElemContext push(){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_startTagOpen=true;  return frame;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmp");  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a cmp instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(firstResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(secondResult.getInstructions());  offset=baseOffset + instructions.size();  final String firstRegister=firstResult.getRegister();  final String secondRegister=secondResult.getRegister();  final OperandSize size=firstResult.getSize();  Helpers.generateSub(environment,offset,size,firstRegister,secondRegister,instructions);}  }
class C{  public void testGetFamily() throws Exception {  byte expectedReturn=1;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  byte actualReturn=addressAttribute.getFamily();  assertEquals("Address family was not 1 for an IPv4",expectedReturn,actualReturn);  expectedReturn=2;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  actualReturn=addressAttribute.getFamily();  assertEquals("Address family was not 2 for an IPv6 address",expectedReturn,actualReturn);}  }
class C{  static void errorUnexpectedPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_PCDATA,systemID,lineNr,null,null,null,"Unexpected #PCDATA in element " + parentElementName);}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency,Bundle parameters){  if (purchaseAmount == null) {    notifyDeveloperError("purchaseAmount cannot be null");    return;  } else   if (currency == null) {    notifyDeveloperError("currency cannot be null");    return;  }  if (parameters == null) {    parameters=new Bundle();  }  parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,currency.getCurrencyCode());  logEvent(AppEventsConstants.EVENT_NAME_PURCHASED,purchaseAmount.doubleValue(),parameters);  eagerFlush();}  }
class C{  public boolean isWebStoreSession(){  return m_webStoreSession;}  }
class C{  private void validateTotalStorageFilesSize(String storageName,BusinessObjectDataKey businessObjectDataKey,long storageFilesSizeBytes){  Integer storageFilesSizeThresholdGb=configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_SIZE_THRESHOLD_GB,Integer.class);  if (storageFilesSizeThresholdGb != null) {    long storageFilesSizeThresholdBytes=HerdFileUtils.BYTES_PER_GB * storageFilesSizeThresholdGb;    Assert.isTrue(storageFilesSizeBytes <= storageFilesSizeThresholdBytes,String.format("Total size of storage files (%d bytes) for business object data in \"%s\" storage is greater " + "than the configured threshold of %d GB (%d bytes) as per \"%s\" configuration entry. Business object data: {%s}",storageFilesSizeBytes,storageName,storageFilesSizeThresholdGb,storageFilesSizeThresholdBytes,ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_SIZE_THRESHOLD_GB.getKey(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  }}  }
class C{  public boolean isOptional(){  return optional;}  }
class C{  public _BuildServiceHostUpdate(final _BuildServiceHostUpdate_Flag[] flags){  super(flags);}  }
class C{  public Clustering<Model> run(Database database,Relation<V> relation){  int dim_c=RelationUtil.dimensionality(relation);  if (dim_c < l) {    throw new IllegalStateException("Dimensionality of data < parameter l! " + "(" + dim_c + " < "+ l+ ")");  }  int k_c=Math.min(relation.size(),k_i * k);  List<ORCLUSCluster> clusters=initialSeeds(relation,k_c);  double beta=Math.exp(-Math.log(dim_c / (double)l) * Math.log(1 / alpha) / Math.log(k_c / (double)k));  IndefiniteProgress cprogress=LOG.isVerbose() ? new IndefiniteProgress("Current number of clusters:",LOG) : null;  while (k_c > k) {    assign(relation,clusters);    for (    ORCLUSCluster cluster : clusters) {      if (cluster.objectIDs.size() > 0) {        cluster.basis=findBasis(relation,cluster,dim_c);      }    }    k_c=(int)Math.max(k,k_c * alpha);    dim_c=(int)Math.max(l,dim_c * beta);    merge(relation,clusters,k_c,dim_c,cprogress);    if (cprogress != null) {      cprogress.setProcessed(clusters.size(),LOG);    }  }  assign(relation,clusters);  LOG.setCompleted(cprogress);  Clustering<Model> r=new Clustering<>("ORCLUS clustering","orclus-clustering");  for (  ORCLUSCluster c : clusters) {    r.addToplevelCluster(new Cluster<Model>(c.objectIDs,ClusterModel.CLUSTER));  }  return r;}  }
class C{  protected void cargarDatosUsuarioSeleccionado(HttpServletRequest request,ConsultaForm consultaForm){  String idUsrSolicitante=consultaForm.getIdusrsolicitante();  UsuarioVO usuarioVO=null;  String nombreSolicitante=null;  String nombreOrgano=null;  consultaForm.resetDatosSolicitante();  if (StringUtils.isNotEmpty(idUsrSolicitante)) {    if (consultaForm.isCheckedConsultaEnSala()) {      UsuarioSalasConsultaVO usuarioSalasConsultaVO=getGestionSalasBI(request).getUsuarioSalaById(idUsrSolicitante);      if (usuarioSalasConsultaVO != null) {        nombreSolicitante=usuarioSalasConsultaVO.getNombreCompleto();      }    } else {      usuarioVO=getGestionControlUsuarios(request).getUsuario(idUsrSolicitante);      if (usuarioVO != null) {        CAOrganoVO organoVO=getGestionControlUsuarios(request).getOrganoUsuarioEnArchivo(idUsrSolicitante);        nombreSolicitante=usuarioVO.getNombreCompleto();        if (organoVO != null) {          nombreOrgano=organoVO.getNombre();        }      }    }    consultaForm.setNorgconsultor(nombreOrgano);    consultaForm.setNusrconsultor(nombreSolicitante);    cargarListaMotivos(request,consultaForm);    cargarListaTemas(request,consultaForm);  } else {    eliminarListaMotivos(request);    eliminarListaTemas(request);  }}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp){  int x1=0;  int x2=a.length;  int i=x2 / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void restartTrack(Track track){  Log.d(TAG,"Restarting track: " + track.getId());  TripStatistics tripStatistics=track.getTripStatistics();  trackTripStatisticsUpdater=new TripStatisticsUpdater(tripStatistics.getStartTime());  long markerStartTime;  Waypoint waypoint=myTracksProviderUtils.getLastWaypoint(recordingTrackId,WaypointType.STATISTICS);  if (waypoint != null && waypoint.getTripStatistics() != null) {    markerStartTime=waypoint.getTripStatistics().getStopTime();  } else {    markerStartTime=tripStatistics.getStartTime();  }  markerTripStatisticsUpdater=new TripStatisticsUpdater(markerStartTime);  ActivityType activityType=CalorieUtils.getActivityType(context,track.getCategory());  LocationIterator locationIterator=null;  try {    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(track.getId(),-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    while (locationIterator.hasNext()) {      Location location=locationIterator.next();      trackTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);      if (location.getTime() > markerStartTime) {        markerTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);      }    }  } catch (  RuntimeException e) {    Log.e(TAG,"RuntimeException",e);  } finally {    if (locationIterator != null) {      locationIterator.close();    }  }  startRecording(true);}  }
class C{  public boolean isAckSent(long cseqNo){  if (this.getLastTransaction() == null)   return true;  if (this.getLastTransaction() instanceof ClientTransaction) {    if (this.getLastAckSent() == null) {      return false;    } else {      return cseqNo <= ((SIPRequest)this.getLastAckSent()).getCSeq().getSeqNumber();    }  } else {    return true;  }}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public boolean isPanEnabled(){  return isPanXEnabled() || isPanYEnabled();}  }
class C{  public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName,final String partitionId,final String startingOffset,boolean offsetInclusive) throws ServiceBusException {  return PartitionReceiver.create(this.underlyingFactory,this.eventHubName,consumerGroupName,partitionId,startingOffset,offsetInclusive,null,PartitionReceiver.NULL_EPOCH,false);}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  super.finalize();}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  private void saveChanges(MimeMessage message) throws MessagingException {  String messageId=message.getMessageID();  message.saveChanges();  if (messageId != null) {    message.setHeader(RFC2822Headers.MESSAGE_ID,messageId);  }}  }
class C{  public void pageLoadingStarted(){  mLoadTracker.pageLoadingStarted();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void dropIndex(final String name){  throw new UnsupportedOperationException();}  }
class C{  public void add(int index,Object o){  if (!(o instanceof GraphicsNode)) {    throw new IllegalArgumentException(o + " is not a GraphicsNode");  }  if (index > count || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ count);  }  GraphicsNode node=(GraphicsNode)o;{    fireGraphicsNodeChangeStarted(node);  }  if (node.getParent() != null) {    node.getParent().getChildren().remove(node);  }  ensureCapacity(count + 1);  System.arraycopy(children,index,children,index + 1,count - index);  children[index]=node;  count++;  ((AbstractGraphicsNode)node).setParent(this);  ((AbstractGraphicsNode)node).setRoot(this.getRoot());  invalidateGeometryCache();  fireGraphicsNodeChangeCompleted();}  }
class C{  public TechnicalServiceMultiSubscriptions(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  @Override @Inline public final void processNode(ObjectReference object){  values.push(object);}  }
class C{  public WrongParameterValueException(String message){  super(message);}  }
class C{  public void addSeparator(){  if (log.isLoggable(PlatformLogger.Level.FINER)) {    log.finer("addSeparator is not implemented");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public void addSequence(final double[] datum,final double[] weights){  QL.require(datum.length == weights.length,INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.length; i++) {    add(datum[i],weights[i]);  }}  }
class C{  public static void runOnUiThreadDelay(Runnable runnable,long delayMillis){  HANDLER.postDelayed(runnable,delayMillis);}  }
class C{  public boolean showNoticeInServerWindow(){  return preferences.getBoolean(resources.getString(R.string.key_notice_server_window),Boolean.parseBoolean(resources.getString(R.string.default_notice_server_window)));}  }
class C{  String substring(int start,int end){  return inputSequence.subSequence(start,end).toString();}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  int status=SlingHttpServletResponse.SC_FORBIDDEN;  String header="ERROR";  String message="Current user not authorized.";  if (allowWrite) {    final String action=request.getParameter(ACTION_PARAMETER);    final String commentId=request.getParameter(COMMENT_ID_PARAMETER);    if (ACTION_DELETE_COMMENT.equals(action)) {      final boolean result=commentService.deleteComment(request,commentId);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Comment successfully deleted.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Comment could not be deleted.";      }    } else     if (ACTION_EDIT_COMMENT.equals(action)) {      final String updatedComment=request.getParameter(COMMENT_TEXT_PARAMETER);      final boolean result=commentService.editComment(request,commentId,updatedComment);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Comment successfully edited.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Comment could not be edited.";      }    } else     if (ACTION_MARK_SPAM.equals(action)) {      final boolean result=commentService.markAsSpam(request,commentId);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Comment successfully submitted as spam.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Comment could not be submitted as spam.";      }    } else     if (ACTION_MARK_HAM.equals(action)) {      final boolean result=commentService.markAsHam(request,commentId);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Comment successfully submitted as ham.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Comment could not be submitted as ham.";      }    } else {      status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;      header="Error";      message="Action could not be performed.";    }  }  response.setStatus(status);  sendResponse(writer,header,message);}  }
class C{  public void insert(int index,int v){  _insert(index,numberNode(v));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 107:{        return DTokenTypes.KW_ELSE;      }case 193:    break;case 67:{    nestedCommentDepth-=1;    if (nestedCommentDepth == 0) {      yybegin(YYINITIAL);    }    return DTokenTypes.NESTING_BLOCK_COMMENT;  }case 194:break;case 64:{return DTokenTypes.OP_NOT_GR;}case 195:break;case 31:{return DTokenTypes.NESTING_BLOCK_COMMENT;}case 196:break;case 4:{return DTokenTypes.INTEGER_LITERAL;}case 197:break;case 43:{return DTokenTypes.KW_DO;}case 198:break;case 161:{return DTokenTypes.KW_FINALLY;}case 199:break;case 173:{return DTokenTypes.KW_DELEGATE;}case 200:break;case 99:{return DTokenTypes.KW_VOID;}case 201:break;case 46:{return DTokenTypes.OP_LESS_EQ;}case 202:break;case 76:{return DTokenTypes.OP_SH_LEFT_EQ;}case 203:break;case 118:{return DTokenTypes.KW_DCHAR;}case 204:break;case 54:{return DTokenTypes.OP_MINUS_EQ;}case 205:break;case 166:{return DTokenTypes.KW_IDOUBLE;}case 206:break;case 97:{return DTokenTypes.KW_TRUE;}case 207:break;case 25:{return DTokenTypes.OP_MOD;}case 208:break;case 110:{return DTokenTypes.KW_LONG;}case 209:break;case 104:{return DTokenTypes.KEYWORD;}case 210:break;case 190:{return DTokenTypes.KW_SYNCHRONIZED;}case 211:break;case 62:{return DTokenTypes.OP_TILDA_EQ;}case 212:break;case 146:{return DTokenTypes.KW_DOUBLE;}case 213:break;case 170:{return DTokenTypes.KW___TRAITS;}case 214:break;case 16:{return DTokenTypes.OP_GT;}case 215:break;case 187:{return DTokenTypes.KW_DEPRECATED;}case 216:break;case 65:{return DTokenTypes.OP_NOT_EQ;}case 217:break;case 159:{return DTokenTypes.KW_DISABLE;}case 218:break;case 147:{return DTokenTypes.KW_ASSERT;}case 219:break;case 174:{return DTokenTypes.KW_ABSTRACT;}case 220:break;case 157:{return DTokenTypes.KW_PRAGMA;}case 221:break;case 191:{return DTokenTypes.KW_FOREACH_REVERSE;}case 222:break;case 79:{return DTokenTypes.OP_SH_RIGHT_EQ;}case 223:break;case 9:{return DTokenTypes.OP_PLUS;}case 224:break;case 1:{return TokenType.BAD_CHARACTER;}case 225:break;case 24:{return DTokenTypes.OP_AT;}case 226:break;case 49:{return DTokenTypes.KW_IS;}case 227:break;case 94:{return DTokenTypes.KW_BYTE;}case 228:break;case 101:{return DTokenTypes.OP_USH_RIGHT_EQ;}case 229:break;case 100:{return DTokenTypes.KW_UINT;}case 230:break;case 61:{return DTokenTypes.OP_POW;}case 231:break;case 103:{return DTokenTypes.KW_CASE;}case 232:break;case 26:{return DTokenTypes.OP_OR;}case 233:break;case 75:{return DTokenTypes.KW_TRY;}case 234:break;case 83:{return DTokenTypes.OP_POW_EQ;}case 235:break;case 50:{return DTokenTypes.KW_IF;}case 236:break;case 37:{return DTokenTypes.OP_DIV_EQ;}case 237:break;case 115:{return DTokenTypes.KW_SHORT;}case 238:break;case 122:{return DTokenTypes.KW_BREAK;}case 239:break;case 117:{return DTokenTypes.KW_WHILE;}case 240:break;case 121:{return DTokenTypes.KW_ALIGN;}case 241:break;case 180:{return DTokenTypes.KW_PROPERTY;}case 242:break;case 48:{return DTokenTypes.OP_GT_EQ;}case 243:break;case 80:{return DTokenTypes.KW_INT;}case 244:break;case 73:{return DTokenTypes.KW_FOR;}case 245:break;case 167:{return DTokenTypes.KW_CDOUBLE;}case 246:break;case 178:{return DTokenTypes.KW_CONTINUE;}case 247:break;case 78:{return DTokenTypes.OP_USH_RIGHT;}case 248:break;case 142:{return DTokenTypes.KW_STATIC;}case 249:break;case 89:{return DTokenTypes.KW_SAFE;}case 250:break;case 155:{return DTokenTypes.KW_EXPORT;}case 251:break;case 87:{return DTokenTypes.BLOCK_COMMENT;}case 252:break;case 184:{return DTokenTypes.KW_IMMUTABLE;}case 253:break;case 169:{return DTokenTypes.KW_PACKAGE;}case 254:break;case 27:{return DTokenTypes.OP_XOR;}case 255:break;case 162:{return DTokenTypes.KW_FOREACH;}case 256:break;case 12:{return DTokenTypes.OP_BRACKET_RIGHT;}case 257:break;case 6:{return DTokenTypes.OP_SCOLON;}case 258:break;case 22:{return DTokenTypes.OP_EQ;}case 259:break;case 108:{return DTokenTypes.KW_PURE;}case 260:break;case 136:{return DTokenTypes.KW_CONST;}case 261:break;case 125:{return DTokenTypes.KW_FLOAT;}case 262:break;case 36:{yybegin(NESTING_COMMENT_CONTENT);nestedCommentDepth=1;return DTokenTypes.NESTING_BLOCK_COMMENT;}case 263:break;case 185:{return DTokenTypes.KW_PROTECTED;}case 264:break;case 96:{return DTokenTypes.KW_NOGC;}case 265:break;case 141:{return DTokenTypes.KW_STRUCT;}case 266:break;case 134:{return DTokenTypes.KW_CREAL;}case 267:break;case 151:{return DTokenTypes.KW_IFLOAT;}case 268:break;case 28:{return DTokenTypes.OP_TILDA;}case 269:break;case 130:{return DTokenTypes.DELIMITED_STRING;}case 270:break;case 138:{return DTokenTypes.KW_MIXIN;}case 271:break;case 126:{return DTokenTypes.KW_THROW;}case 272:break;case 133:{return DTokenTypes.KW_INOUT;}case 273:break;case 47:{return DTokenTypes.OP_SH_RIGHT;}case 274:break;case 30:{return DTokenTypes.OP_DOLLAR;}case 275:break;case 95:{return DTokenTypes.KW_NULL;}case 276:break;case 152:{return DTokenTypes.KW_IMPORT;}case 277:break;case 88:{return DTokenTypes.KW_REAL;}case 278:break;case 140:{return DTokenTypes.KW_SWITCH;}case 279:break;case 60:{return DTokenTypes.OP_XOR_EQ;}case 280:break;case 189:{return DTokenTypes.KW___PARAMETERS;}case 281:break;case 109:{return DTokenTypes.KW_LAZY;}case 282:break;case 86:{return DTokenTypes.OP_NOT_GR_EQ;}case 283:break;case 33:{return DTokenTypes.OP_BOOL_AND;}case 284:break;case 137:{return DTokenTypes.KW_CLASS;}case 285:break;case 154:{return DTokenTypes.KW_EXTERN;}case 286:break;case 153:{return DTokenTypes.KW_CFLOAT;}case 287:break;case 2:{return TokenType.WHITE_SPACE;}case 288:break;case 68:{return DTokenTypes.WYSIWYG_STRING;}case 289:break;case 71:{return DTokenTypes.CHARACTER_LITERAL;}case 290:break;case 70:{return DTokenTypes.HEX_STRING;}case 291:break;case 92:{return DTokenTypes.KW_BODY;}case 292:break;case 112:{return DTokenTypes.OP_UNORD;}case 293:break;case 90:{return DTokenTypes.KW_WITH;}case 294:break;case 165:{return DTokenTypes.KW_VERSION;}case 295:break;case 72:{return DTokenTypes.KW_ASM;}case 296:break;case 35:{return DTokenTypes.LINE_COMMENT;}case 297:break;case 113:{return DTokenTypes.KW_SUPER;}case 298:break;case 10:{return DTokenTypes.OP_QUEST;}case 299:break;case 182:{return DTokenTypes.KW_INTERFACE;}case 300:break;case 51:{return DTokenTypes.KW_IN;}case 301:break;case 172:{return DTokenTypes.KW___FILE__;}case 302:break;case 176:{return DTokenTypes.KW_TEMPLATE;}case 303:break;case 66:{nestedCommentDepth+=1;return DTokenTypes.NESTING_BLOCK_COMMENT;}case 304:break;case 84:{return DTokenTypes.OP_UNORD_EQ;}case 305:break;case 192:{return DTokenTypes.KW___PRETTY_FUNCTION__;}case 306:break;case 59:{return DTokenTypes.OP_BOOL_OR;}case 307:break;case 158:{return DTokenTypes.KW_PUBLIC;}case 308:break;case 56:{return DTokenTypes.OP_EQ_EQ;}case 309:break;case 183:{return DTokenTypes.KW_INVARIANT;}case 310:break;case 77:{return DTokenTypes.OP_LESS_GR_EQ;}case 311:break;case 181:{return DTokenTypes.KW___GSHARED;}case 312:break;case 18:{return DTokenTypes.OP_BRACES_RIGHT;}case 313:break;case 40:{return DTokenTypes.OP_PLUS_EQ;}case 314:break;case 17:{return DTokenTypes.OP_BRACES_LEFT;}case 315:break;case 145:{return DTokenTypes.KW_DELETE;}case 316:break;case 39:{return DTokenTypes.OP_PLUS_PLUS;}case 317:break;case 11:{return DTokenTypes.OP_BRACKET_LEFT;}case 318:break;case 55:{return DTokenTypes.OP_LAMBDA_ARROW;}case 319:break;case 63:{return DTokenTypes.OP_NOT_LESS;}case 320:break;case 143:{return DTokenTypes.KW_SYSTEM;}case 321:break;case 188:{return DTokenTypes.KW___FUNCTION__;}case 322:break;case 124:{return DTokenTypes.KW_FINAL;}case 323:break;case 21:{return DTokenTypes.OP_COLON;}case 324:break;case 132:{return DTokenTypes.TRAITS_KEYWORD;}case 325:break;case 13:{return DTokenTypes.OP_PAR_LEFT;}case 326:break;case 74:{return DTokenTypes.KW_NEW;}case 327:break;case 164:{return DTokenTypes.KW_TRUSTED;}case 328:break;case 129:{return DTokenTypes.KW_ULONG;}case 329:break;case 57:{return DTokenTypes.OP_MOD_EQ;}case 330:break;case 177:{return DTokenTypes.KW_UNITTEST;}case 331:break;case 42:{return DTokenTypes.ALTERNATE_WYSIWYG_STRING;}case 332:break;case 144:{return DTokenTypes.KW_SHARED;}case 333:break;case 34:{return DTokenTypes.OP_AND_EQ;}case 334:break;case 7:{return DTokenTypes.OP_DIV;}case 335:break;case 163:{return DTokenTypes.KW_NOTHROW;}case 336:break;case 8:{return DTokenTypes.OP_ASTERISK;}case 337:break;case 32:{return DTokenTypes.FLOAT_LITERAL;}case 338:break;case 149:{return DTokenTypes.KW_TYPEOF;}case 339:break;case 175:{return DTokenTypes.KW_FUNCTION;}case 340:break;case 135:{return DTokenTypes.KW_CATCH;}case 341:break;case 128:{return DTokenTypes.KW_UNION;}case 342:break;case 44:{return DTokenTypes.OP_SH_LEFT;}case 343:break;case 168:{return DTokenTypes.KW_PRIVATE;}case 344:break;case 186:{return DTokenTypes.KW___MODULE__;}case 345:break;case 91:{return DTokenTypes.KW_AUTO;}case 346:break;case 52:{return DTokenTypes.OP_DDOT;}case 347:break;case 156:{return DTokenTypes.KW_MODULE;}case 348:break;case 111:{return DTokenTypes.KW_GOTO;}case 349:break;case 106:{return DTokenTypes.KW_ENUM;}case 350:break;case 15:{return DTokenTypes.OP_LESS;}case 351:break;case 160:{return DTokenTypes.KW_DEFAULT;}case 352:break;case 127:{return DTokenTypes.KW_UBYTE;}case 353:break;case 139:{return DTokenTypes.KW_RETURN;}case 354:break;case 171:{return DTokenTypes.KW___LINE__;}case 355:break;case 105:{return DTokenTypes.KW_CHAR;}case 356:break;case 19:{return DTokenTypes.OP_DOT;}case 357:break;case 81:{return DTokenTypes.OP_TRIPLEDOT;}case 358:break;case 114:{return DTokenTypes.KW_SCOPE;}case 359:break;case 98:{return DTokenTypes.KW_THIS;}case 360:break;case 120:{return DTokenTypes.KW_ALIAS;}case 361:break;case 85:{return DTokenTypes.OP_NOT_LESS_EQ;}case 362:break;case 3:{return DTokenTypes.ID;}case 363:break;case 123:{return DTokenTypes.KW_FALSE;}case 364:break;case 58:{return DTokenTypes.OP_OR_EQ;}case 365:break;case 119:{return DTokenTypes.KW_DEBUG;}case 366:break;case 14:{return DTokenTypes.OP_PAR_RIGHT;}case 367:break;case 20:{return DTokenTypes.OP_MINUS;}case 368:break;case 69:{return DTokenTypes.KW_REF;}case 369:break;case 45:{return DTokenTypes.OP_LESS_GR;}case 370:break;case 131:{return DTokenTypes.KW_IREAL;}case 371:break;case 148:{return DTokenTypes.KW_TYPEID;}case 372:break;case 23:{return DTokenTypes.OP_COMMA;}case 373:break;case 41:{return DTokenTypes.DOUBLE_QUOTED_STRING;}case 374:break;case 150:{return DTokenTypes.KW_USHORT;}case 375:break;case 116:{return DTokenTypes.KW_WCHAR;}case 376:break;case 102:{return DTokenTypes.KW_CAST;}case 377:break;case 93:{return DTokenTypes.KW_BOOL;}case 378:break;case 5:{return DTokenTypes.OP_AND;}case 379:break;case 53:{return DTokenTypes.OP_MINUS_MINUS;}case 380:break;case 29:{return DTokenTypes.OP_NOT;}case 381:break;case 38:{return DTokenTypes.OP_MUL_EQ;}case 382:break;case 82:{return DTokenTypes.KW_OUT;}case 383:break;case 179:{return DTokenTypes.KW_OVERRIDE;}case 384:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public CompletableFuture<Void> open(){  CompletableFuture<Void> future=new CompletableFuture<>();  context.executor().execute(null);  return future;}  }
class C{  public OWLCompiler(ClassLoader cl) throws ObjectStoreConfigException {  assert cl != null;  this.cl=cl;  this.mapper=new RoleMapper();  new RoleClassLoader(mapper).loadRoles(cl);  this.literals=new LiteralManager(cl);}  }
class C{  public static <T>T splitEachLine(File self,String regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),regex,closure);}  }
class C{  public static IOException create(Throwable cause){  if (cause instanceof IOException) {    return (IOException)cause;  }  String message=cause.getMessage();  if (message == null || message.length() == 0) {    message=cause.toString();  }  return new IOException(message,cause);}  }
class C{  public static void hide(final Runnable run){  try {    hideDepth++;    run.run();  }  finally {    hideDepth--;  }}  }
class C{  public static <T1,T2>Map<T2,T1> transformAndMap(Collection<T1> from,Transformer<T1,T2> transformer){  Map<T2,T1> map=new HashMap<T2,T1>();  for (  T1 instance : from) {    map.put(transformer.transform(instance),instance);  }  return map;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultClusterer.gif",BeanVisual.ICON_PATH + "DefaultClusterer_animated.gif");}  }
class C{  public static void serializeTableReply(List<OFTableStatsReply> tableReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFTableStatsReply tableReply=tableReplies.get(0);  jGen.writeStringField("version",tableReply.getVersion().toString());  jGen.writeFieldName("table");  jGen.writeStartArray();  for (  OFTableStatsEntry entry : tableReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("tableId",entry.getTableId().toString());    jGen.writeNumberField("activeCount",entry.getActiveCount());    jGen.writeNumberField("lookUpCount",entry.getLookupCount().getValue());    jGen.writeNumberField("matchCount",entry.getMatchedCount().getValue());switch (entry.getVersion()) {case OF_12:      jGen.writeNumberField("writeSetFields",entry.getWriteSetfields().getValue());    jGen.writeNumberField("applySetFields",entry.getApplySetfields().getValue());  jGen.writeNumberField("metaDataMatch",entry.getMetadataMatch().getValue());jGen.writeNumberField("metaDataWrite",entry.getMetadataWrite().getValue());case OF_11:jGen.writeStringField("match",entry.getMatch().toString());jGen.writeNumberField("instructions",entry.getInstructions());jGen.writeNumberField("writeActions",entry.getWriteActions());jGen.writeNumberField("applyActions",entry.getApplyActions());jGen.writeNumberField("config",entry.getConfig());case OF_10:jGen.writeStringField("name",entry.getName());jGen.writeNumberField("wildcards",entry.getWildcards());jGen.writeNumberField("maxEntries",entry.getMaxEntries());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  private SpanIntersection(){}  }
class C{  @Override public final ImmutableList<E> asList(){  return this;}  }
class C{  protected void drawTask(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,GanttCategoryDataset dataset,int row,int column){  PlotOrientation orientation=plot.getOrientation();  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();  Number value0=dataset.getEndValue(row,column);  if (value0 == null) {    return;  }  double java2dValue0=rangeAxis.valueToJava2D(value0.doubleValue(),dataArea,rangeAxisLocation);  Number value1=dataset.getStartValue(row,column);  if (value1 == null) {    return;  }  double java2dValue1=rangeAxis.valueToJava2D(value1.doubleValue(),dataArea,rangeAxisLocation);  if (java2dValue1 < java2dValue0) {    double temp=java2dValue1;    java2dValue1=java2dValue0;    java2dValue0=temp;    value1=value0;  }  double rectStart=calculateBarW0(plot,orientation,dataArea,domainAxis,state,row,column);  double rectBreadth=state.getBarWidth();  double rectLength=Math.abs(java2dValue1 - java2dValue0);  Rectangle2D bar=null;  RectangleEdge barBase=null;  if (orientation == PlotOrientation.HORIZONTAL) {    bar=new Rectangle2D.Double(java2dValue0,rectStart,rectLength,rectBreadth);    barBase=RectangleEdge.LEFT;  } else   if (orientation == PlotOrientation.VERTICAL) {    bar=new Rectangle2D.Double(rectStart,java2dValue1,rectBreadth,rectLength);    barBase=RectangleEdge.BOTTOM;  }  Rectangle2D completeBar=null;  Rectangle2D incompleteBar=null;  Number percent=dataset.getPercentComplete(row,column);  double start=getStartPercent();  double end=getEndPercent();  if (percent != null) {    double p=percent.doubleValue();    if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {      completeBar=new Rectangle2D.Double(java2dValue0,rectStart + start * rectBreadth,rectLength * p,rectBreadth * (end - start));      incompleteBar=new Rectangle2D.Double(java2dValue0 + rectLength * p,rectStart + start * rectBreadth,rectLength * (1 - p),rectBreadth * (end - start));    } else     if (plot.getOrientation() == PlotOrientation.VERTICAL) {      completeBar=new Rectangle2D.Double(rectStart + start * rectBreadth,java2dValue1 + rectLength * (1 - p),rectBreadth * (end - start),rectLength * p);      incompleteBar=new Rectangle2D.Double(rectStart + start * rectBreadth,java2dValue1,rectBreadth * (end - start),rectLength * (1 - p));    }  }  if (getShadowsVisible()) {    getBarPainter().paintBarShadow(g2,this,row,column,bar,barBase,true);  }  getBarPainter().paintBar(g2,this,row,column,bar,barBase);  if (completeBar != null) {    g2.setPaint(getCompletePaint());    g2.fill(completeBar);  }  if (incompleteBar != null) {    g2.setPaint(getIncompletePaint());    g2.fill(incompleteBar);  }  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    Stroke stroke=getItemOutlineStroke(row,column);    Paint paint=getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,false);  }  int datasetIndex=plot.indexOf(dataset);  Comparable columnKey=dataset.getColumnKey(column);  Comparable rowKey=dataset.getRowKey(row);  double xx=domainAxis.getCategorySeriesMiddle(columnKey,rowKey,dataset,getItemMargin(),dataArea,plot.getDomainAxisEdge());  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value1.doubleValue(),datasetIndex,xx,java2dValue1,orientation);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener listener){  sharedPreferences.unregisterOnSharedPreferenceChangeListener(listener);}  }
class C{  public static final void drawPulleyJoint(GL2 gl,PulleyJoint joint){  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  Vector2 p1=joint.getAnchor1();  Vector2 p2=joint.getPulleyAnchor1();  Vector2 p3=joint.getPulleyAnchor2();  Vector2 p4=joint.getAnchor2();  gl.glBegin(GL.GL_LINE_STRIP);  gl.glVertex2d(p1.x,p1.y);  gl.glVertex2d(p2.x,p2.y);  gl.glVertex2d(p3.x,p3.y);  gl.glVertex2d(p4.x,p4.y);  gl.glEnd();}  }
class C{  @Override public void clusterChanged(ClusterChangedEvent event){  try {    RepositoriesMetaData oldMetaData=event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE);    RepositoriesMetaData newMetaData=event.state().getMetaData().custom(RepositoriesMetaData.TYPE);    if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {      return;    }    logger.trace("processing new index repositories for state version [{}]",event.state().version());    Map<String,RepositoryHolder> survivors=newHashMap();    for (    Map.Entry<String,RepositoryHolder> entry : repositories.entrySet()) {      if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {        logger.debug("unregistering repository [{}]",entry.getKey());        closeRepository(entry.getKey(),entry.getValue());      } else {        survivors.put(entry.getKey(),entry.getValue());      }    }    ImmutableMap.Builder<String,RepositoryHolder> builder=ImmutableMap.builder();    if (newMetaData != null) {      for (      RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {        RepositoryHolder holder=survivors.get(repositoryMetaData.name());        if (holder != null) {          if (!holder.type.equals(repositoryMetaData.type()) || !holder.settings.equals(repositoryMetaData.settings())) {            logger.debug("updating repository [{}]",repositoryMetaData.name());            closeRepository(repositoryMetaData.name(),holder);            holder=null;            try {              holder=createRepositoryHolder(repositoryMetaData);            } catch (            RepositoryException ex) {              logger.warn("failed to change repository [{}]",ex,repositoryMetaData.name());            }          }        } else {          try {            holder=createRepositoryHolder(repositoryMetaData);          } catch (          RepositoryException ex) {            logger.warn("failed to create repository [{}]",ex,repositoryMetaData.name());          }        }        if (holder != null) {          logger.debug("registering repository [{}]",repositoryMetaData.name());          builder.put(repositoryMetaData.name(),holder);        }      }    }    repositories=builder.build();  } catch (  Throwable ex) {    logger.warn("failure updating cluster state ",ex);  }}  }
class C{  public BurlapRuntimeException(Throwable rootCause){  super(String.valueOf(rootCause));  this.rootCause=rootCause;}  }
class C{  public TSPInstance(File file) throws IOException {  this();  load(file);}  }
class C{  public DefaultIntervalXYDataset createSampleDataset1(){  DefaultIntervalXYDataset d=new DefaultIntervalXYDataset();  double[] x1=new double[]{1.0,2.0,3.0};  double[] x1Start=new double[]{0.9,1.9,2.9};  double[] x1End=new double[]{1.1,2.1,3.1};  double[] y1=new double[]{4.0,5.0,6.0};  double[] y1Start=new double[]{1.09,2.09,3.09};  double[] y1End=new double[]{1.11,2.11,3.11};  double[][] data1=new double[][]{x1,x1Start,x1End,y1,y1Start,y1End};  d.addSeries("S1",data1);  double[] x2=new double[]{11.0,12.0,13.0};  double[] x2Start=new double[]{10.9,11.9,12.9};  double[] x2End=new double[]{11.1,12.1,13.1};  double[] y2=new double[]{14.0,15.0,16.0};  double[] y2Start=new double[]{11.09,12.09,13.09};  double[] y2End=new double[]{11.11,12.11,13.11};  double[][] data2=new double[][]{x2,x2Start,x2End,y2,y2Start,y2End};  d.addSeries("S2",data2);  return d;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.SettingsAdmin);  SettingsForm settingsForm=(SettingsForm)form;  String op=settingsForm.getOp();  if (op == null) {    op=request.getParameter("op");    if (op == null)     op=settingsForm.getOp();  }  if (op.equals("Back")) {    settingsForm.reset(mapping,request);  }  if (op.equals("Add Setting")) {    settingsForm.reset(mapping,request);    settingsForm.setOp("Save");  }  if (op.equals("Save") || op.equals("Update")) {    ActionMessages errors=settingsForm.validate(mapping,request);    if (errors.size() > 0) {      saveErrors(request,errors);    } else {      SettingsDAO sdao=new SettingsDAO();      Settings s=null;      if (op.equals("Save"))       s=new Settings(); else       s=sdao.get(settingsForm.getUniqueId());      s.setKey(settingsForm.getKey());      s.setDefaultValue(settingsForm.getDefaultValue());      s.setAllowedValues(settingsForm.getAllowedValues());      s.setDescription(settingsForm.getDescription());      sdao.saveOrUpdate(s);      settingsForm.reset(mapping,request);    }  }  if (op.equals("Edit")) {    String id=request.getParameter("id");    ActionMessages errors=new ActionMessages();    if (id == null || id.trim().length() == 0) {      errors.add("key",new ActionMessage("errors.invalid","Unique Id : " + id));      saveErrors(request,errors);    } else {      SettingsDAO sdao=new SettingsDAO();      Settings s=sdao.get(new Long(id));      if (s == null) {        errors.add("key",new ActionMessage("errors.invalid","Unique Id : " + id));        saveErrors(request,errors);      } else {        settingsForm.setUniqueId(s.getUniqueId());        settingsForm.setKey(s.getKey());        settingsForm.setDefaultValue(s.getDefaultValue());        settingsForm.setAllowedValues(s.getAllowedValues());        settingsForm.setDescription(s.getDescription());        settingsForm.setOp("Update");      }    }  }  if (op.equals("Delete")) {    SettingsDAO sdao=new SettingsDAO();    sdao.delete(settingsForm.getUniqueId());    settingsForm.reset(mapping,request);  }  if ("List".equals(settingsForm.getOp())) {    getSettingsList(request);    return mapping.findForward("list");  }  return mapping.findForward("Save".equals(settingsForm.getOp()) ? "add" : "edit");}  }
class C{  public void close(){  if (fileOutput != null) {    try {      dataOutput.close();    } catch (    IOException e) {      logger.warn("Unable to close log file writer: file=" + file.getName() + " exception="+ e.getMessage());    }    fileOutput=null;    bufferedOutput=null;    dataOutput=null;  }}  }
class C{  protected void drawHorizontalCrosshair(Graphics2D g2,Rectangle2D dataArea,double y,Crosshair crosshair){  if (y >= dataArea.getMinY() && y <= dataArea.getMaxY()) {    Line2D line=new Line2D.Double(dataArea.getMinX(),y,dataArea.getMaxX(),y);    Paint savedPaint=g2.getPaint();    Stroke savedStroke=g2.getStroke();    g2.setPaint(crosshair.getPaint());    g2.setStroke(crosshair.getStroke());    g2.draw(line);    if (crosshair.isLabelVisible()) {      String label=crosshair.getLabelGenerator().generateLabel(crosshair);      RectangleAnchor anchor=crosshair.getLabelAnchor();      Point2D pt=calculateLabelPoint(line,anchor,5,5);      float xx=(float)pt.getX();      float yy=(float)pt.getY();      TextAnchor alignPt=textAlignPtForLabelAnchorH(anchor);      Shape hotspot=TextUtilities.calculateRotatedStringBounds(label,g2,xx,yy,alignPt,0.0,TextAnchor.CENTER);      if (!dataArea.contains(hotspot.getBounds2D())) {        anchor=flipAnchorV(anchor);        pt=calculateLabelPoint(line,anchor,5,5);        xx=(float)pt.getX();        yy=(float)pt.getY();        alignPt=textAlignPtForLabelAnchorH(anchor);        hotspot=TextUtilities.calculateRotatedStringBounds(label,g2,xx,yy,alignPt,0.0,TextAnchor.CENTER);      }      g2.setPaint(crosshair.getLabelBackgroundPaint());      g2.fill(hotspot);      g2.setPaint(crosshair.getLabelOutlinePaint());      g2.setStroke(crosshair.getLabelOutlineStroke());      g2.draw(hotspot);      TextUtilities.drawAlignedString(label,g2,xx,yy,alignPt);    }    g2.setPaint(savedPaint);    g2.setStroke(savedStroke);  }}  }
class C{  public void printMatrixVariable(LocalVariableMap variables,String varname) throws DMLRuntimeException {  if (varname == null) {    System.err.println("No matrix variable name entered.");    return;  }  if (variables != null && !variables.keySet().isEmpty()) {    if (variables.get(varname) != null) {      if (variables.get(varname).getDataType() == DataType.MATRIX) {        try {          MatrixObject mo=(MatrixObject)variables.get(varname);          if (mo.getStatusAsString().equals("EMPTY") && (OptimizerUtils.estimateSizeExactSparsity(mo.getNumRows(),mo.getNumColumns(),mo.getSparsity()) > OptimizerUtils.getLocalMemBudget())) {            System.err.println("ERROR: DML matrix/vector dimensions are too large to fit in main memory.");            return;          }          MatrixBlock mb=mo.acquireRead();          prettyPrintMatrixBlock(mb,-1,-1);          mo.release();          if (mb.getNumRows() > DISPLAY_MAX_ROWS || mb.getNumColumns() > DISPLAY_MAX_COLUMNS) {            System.out.format("WARNING: DML matrix/vector is too large to display on the screen." + "\nOnly a snapshot of %d row(s) and %d column(s) is being displayed.\n",min(mb.getNumRows(),DISPLAY_MAX_ROWS),min(mb.getNumColumns(),DISPLAY_MAX_COLUMNS));          }          System.out.println("Metadata: " + variables.get(varname).getMetaData().toString());        } catch (        Exception e) {          System.err.println("Error processing display DML matrix command for variable " + varname + ".");          return;        }      } else       System.out.println("Variable \"" + varname + "\" is not a matrix or vector variable.");    } else     System.out.println("DML matrix variable \"" + varname + "\" is not in the current frame scope. Try \"a\" to list all variables within current frame scope.");  } else   System.out.println("Symbol table for current frame is empty");}  }
class C{  @Override protected boolean prepareForWriting(){  return false;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.valueTv=(TextView)this.findViewById(R.id.animator_value_tv);  this.alphaTv=(TextView)this.findViewById(R.id.animator_alpha_tv);  this.rotationTv=(TextView)this.findViewById(R.id.animator_rotation_tv);  this.translationTv=(TextView)this.findViewById(R.id.animator_translation_tv);  this.scaleTv=(TextView)this.findViewById(R.id.animator_scale_tv);  this.setTv=(TextView)this.findViewById(R.id.animator_set_tv);  this.valueSv=(SurfaceView)this.findViewById(R.id.animator_sv);  this.evaluatorIv=(AnimatorShaderRoundImageView)this.findViewById(R.id.animator_evaluator_iv);  this.evaluatorTv=(TextView)this.findViewById(R.id.animator_evaluator_tv);  this.propertyTv=(TextView)this.findViewById(R.id.animator_property_tv);  this.holder=this.valueSv.getHolder();}  }
class C{  private double[][] load(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    List<double[]> data=new ArrayList<double[]>();    while (reader.hasNext()) {      data.add(reader.next());    }    return data.toArray(new double[0][]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  private void initDaemon(Context base){  if (!isDaemonPermitting(base) || mConfigurations == null) {    return;  }  String processName=getProcessName();  String packageName=base.getPackageName();  if (processName.startsWith(mConfigurations.PERSISTENT_CONFIG.PROCESS_NAME)) {    IDaemonStrategy.Fetcher.fetchStrategy().onPersistentCreate(base,mConfigurations);  } else   if (processName.startsWith(mConfigurations.DAEMON_ASSISTANT_CONFIG.PROCESS_NAME)) {    IDaemonStrategy.Fetcher.fetchStrategy().onDaemonAssistantCreate(base,mConfigurations);  } else   if (processName.startsWith(packageName)) {    IDaemonStrategy.Fetcher.fetchStrategy().onInitialization(base);  }  releaseIO();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addSprite(float x,float y,float z,int w,int h,int d,float pixelScale,boolean rotX,boolean rotY,boolean rotZ,boolean mirrorX,boolean mirrorY,float expansion){  String[] mask=new String[h];  char[] str=new char[w];  Arrays.fill(str,'1');  Arrays.fill(mask,new String(str));  addSprite(x,y,z,mask,d,pixelScale,rotX,rotY,rotZ,mirrorX,mirrorY,expansion);}  }
class C{  @RequestMapping(value="/{id}") public ModelAndView protein(@PathVariable String id){  return new ModelAndView("protein",buildModelMap(retrieve(id),true));}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public boolean isBelow(Vector2 p,Vector2 q){  double diff=p.y - q.y;  if (diff == 0.0) {    if (p.x > q.x) {      return true;    } else {      return false;    }  } else {    if (diff < 0.0) {      return true;    } else {      return false;    }  }}  }
class C{  public NamedCollectionConverter(final Mapper mapper,final String itemName,final Class<?> itemType){  this(null,mapper,itemName,itemType);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void refreshModules(){  if (this.moduleCache == null)   this.moduleCache=new TreeMap<String,Module>();  boolean loadedModules=false;  Node[] nodes=client.getNodes();  for (  Node node : nodes) {    try {      String packagesString=Info.request(infoPolicy,node,"udf-list");      if (!packagesString.isEmpty()) {        String[] packagesList=packagesString.split(";");        for (        String pkgString : packagesList) {          Module module=new Module(pkgString);          String udfString=Info.request(infoPolicy,node,"udf-get:filename=" + module.getName());          module.setDetailInfo(udfString);          this.moduleCache.put(module.getName(),module);        }      }      loadedModules=true;      break;    } catch (    AerospikeException e) {    }  }  if (!loadedModules) {    throw new ClusterRefreshError("Cannot find UDF modules");  }}  }
class C{  public AbstractShortList elements(short[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public static void fill(char[] a,char val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public void testUnpackNoValuesMulti() throws InvalidAdviceException {  String bag="e";  Object[][] packedTuple={{},{},{},{}};  BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe().unpack(bag).emit("test1").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise();  results.expectTuple();  results.expectTuple();  results.expectTuple();  results.expectTuple();  results.check();  assertTrue("Expect 4 output tuples emitted",results.emitted.size() == 4);}  }
class C{  public void projectionChanged(ProjectionEvent e){  Projection newProj=e.getProjection();  if (!projection.equals(newProj)) {    setProjection(newProj);  }}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  public SgmExcepcion(String message){  this(message,null);}  }
class C{  public boolean hasChildNodes(){  return numChildren > 0;}  }
class C{  public OfflinePointWriter(Directory tempDir,String tempFileNamePrefix,int packedBytesLength,boolean longOrds,String desc,long expectedCount,boolean singleValuePerDoc) throws IOException {  this.out=tempDir.createTempOutput(tempFileNamePrefix,"bkd_" + desc,IOContext.DEFAULT);  this.name=out.getName();  this.tempDir=tempDir;  this.packedBytesLength=packedBytesLength;  this.longOrds=longOrds;  this.singleValuePerDoc=singleValuePerDoc;  this.expectedCount=expectedCount;}  }
class C{  public NamespaceSpecification(String ns,String wildcard){  this.ns=ns;  this.wildcard=wildcard;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (publicKey != null && XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    String name=element.getFirstChild().getNodeValue();    if (keyName.equals(name)) {      return publicKey;    }  }  log.log(java.util.logging.Level.FINE,"I can't");  return null;}  }
class C{  boolean isConnected(){  return !(channel instanceof SocketChannel) || ((SocketChannel)channel).isConnected();}  }
class C{  public DrawerBuilder withFireOnInitialOnClick(boolean fireOnInitialOnClick){  this.mFireInitialOnClick=fireOnInitialOnClick;  return this;}  }
class C{  public void putParentRelative(int i,boolean b){  if (b)   masks[i]|=PARENT_RELATIVE_MASK; else   masks[i]&=~PARENT_RELATIVE_MASK;}  }
class C{  private boolean mapPatternElemPos(int nesting,boolean isStart,boolean isAttrName){  if (0 == nesting) {    if (m_patternMapSize >= m_patternMap.length) {      int patternMap[]=m_patternMap;      int len=m_patternMap.length;      m_patternMap=new int[m_patternMapSize + 100];      System.arraycopy(patternMap,0,m_patternMap,0,len);    }    if (!isStart) {      m_patternMap[m_patternMapSize - 1]-=TARGETEXTRA;    }    m_patternMap[m_patternMapSize]=(m_compiler.getTokenQueueSize() - (isAttrName ? 1 : 0)) + TARGETEXTRA;    m_patternMapSize++;    isStart=false;  }  return isStart;}  }
class C{  protected void buildDrawerSelectionList(){  int selectedPosition=-1;  int position=0;  ArrayList<IDrawerItem> profileDrawerItems=new ArrayList<>();  if (mProfiles != null) {    for (    IProfile profile : mProfiles) {      if (profile == mCurrentProfile) {        if (mCurrentHiddenInList) {          continue;        } else {          selectedPosition=position + mDrawer.getAdapter().getHeaderOffset();        }      }      if (profile instanceof IDrawerItem) {        ((IDrawerItem)profile).withSetSelected(false);        profileDrawerItems.add((IDrawerItem)profile);      }      position=position + 1;    }  }  mDrawer.switchDrawerContent(onDrawerItemClickListener,onDrawerItemLongClickListener,profileDrawerItems,selectedPosition);}  }
class C{  public static String generatePlaceholder(int columnNum){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < columnNum; i++) {    sb.append("?,");  }  return "(" + sb.substring(0,sb.length() - 1) + ")";}  }
class C{  public LZ5(){  super(30,2,21,26,1);}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new MalformedJsonException(message + " at line " + getLineNumber()+ " column "+ getColumnNumber());}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,v + x)))     longAccumulate(x,null,uncontended);  }}  }
class C{  public static void deleteFilesIgnoringExceptions(Directory dir,Collection<String> files){  for (  String name : files) {    try {      dir.deleteFile(name);    } catch (    Throwable ignored) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String internal;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root",nullNS,nullNS);  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  public boolean isValidIndex(){  return pos < text.length;}  }
class C{  public AbstractExternalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,target,actions,event,TransitionKind.EXTERNAL,guard,trigger);}  }
class C{  protected void rejectRemoteRecipient(MailAddress recipient) throws MessagingException {  if (!isLeaveRemoteRecipient())   setMessageDeleted();  if (isMarkRemoteRecipientSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail intended for remote recipient: ");  messageBuffer.append(recipient);  messageBuffer.append('.');  logStatusInfo(messageBuffer.toString());}  }
class C{  @Override public boolean isPropertySupported(String prop){  return DEFINITION_PROPERTY.equals(prop) || SKIP_SPACES_PROPERTY.equals(prop) || ENCODING_TYPE_PROPERTY.equals(prop);}  }
class C{  public void restartNeo4j() throws IOException {  restartNeo4j(Neo4jSettings.TEST_SETTINGS);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  private void addGlobalHotkey(Hotkey hotkey){  if (globalHotkeys != null) {    globalHotkeys.registerHotkey(hotkey,hotkey.keyStroke.getModifiers(),hotkey.keyStroke.getKeyCode());  }}  }
class C{  public long longAt(int index){  lb.position(index);  return lb.get();}  }
class C{  public ExtendedResolver(Resolver[] res) throws UnknownHostException {  init();  for (int i=0; i < res.length; i++)   resolvers.add(res[i]);}  }
class C{  @Override public boolean matches(InventoryCrafting inv,World world){  for (int x=0; x <= MAX_CRAFT_GRID_WIDTH - width; x++) {    for (int y=0; y <= MAX_CRAFT_GRID_HEIGHT - height; ++y) {      if (checkMatch(inv,x,y,false)) {        return true;      }      if (mirrored && checkMatch(inv,x,y,true)) {        return true;      }    }  }  return false;}  }
class C{  public TIntDoubleHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static void removeAllUsers(){  Preferences prefs=getPrefs();  prefs.remove(USERS);  prefs.remove(ACTIVE_USER);  flushPrefs(prefs);}  }
class C{  @Override public void run(){  amIActive=true;  try {    Long startTime=System.currentTimeMillis();    int progress, oldProgress, col, row, colN, rowN, r, c;    int numSolvedCells=0;    int dir, numCellsInPath, i, n;    boolean needsFilling=false;    double z, zN, zTest, zN2, lowestNeighbour, breachDepth, maxPathBreachDepth;    boolean isPit, isEdgeCell, flag, isPeak;    double pathTerminalHeight;    double outletHeight;    int outletRow, outletCol, outletDist;    GridCell gc;    int[] dX={1,1,1,0,-1,-1,-1,0};    int[] dY={-1,0,1,1,1,0,-1,-1};    int[] backLink={5,6,7,8,1,2,3,4};    double[] outPointer={0,1,2,4,8,16,32,64,128};    if (args.length < 2) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String demFile=args[0];    String outputFile=args[1];    boolean maxLengthOrDepthUsed=false;    double maxDepth=Double.POSITIVE_INFINITY;    if (args.length >= 3 && !(args[2].trim()).isEmpty() && !(args[2].toLowerCase().equals("not specified"))) {      maxDepth=Double.parseDouble(args[2]);      maxLengthOrDepthUsed=true;    }    int maxLength=Integer.MAX_VALUE;    if (args.length >= 4 && !(args[3].trim()).isEmpty() && !(args[3].toLowerCase().equals("not specified"))) {      maxLength=Integer.parseInt(args[3]);      maxLengthOrDepthUsed=true;    }    boolean performConstrainedBreach=false;    if (args.length >= 5 && !(args[4].trim()).isEmpty() && !(args[4].toLowerCase().equals("not specified"))) {      performConstrainedBreach=Boolean.parseBoolean(args[4]);    }    if (maxDepth == Double.POSITIVE_INFINITY && maxLength == Integer.MAX_VALUE && performConstrainedBreach) {      performConstrainedBreach=false;    }    String pointerFile="";    String flowAccumFile="";    boolean outputPointer=false;    if (args.length >= 6 && !(args[5].trim()).isEmpty()) {      outputPointer=Boolean.parseBoolean(args[5]);      pointerFile=outputFile.replace(".dep","_flow_pntr.dep");    }    boolean performFlowAccumulation=false;    if (args.length >= 7 && !(args[6].trim()).isEmpty() && outputPointer) {      performFlowAccumulation=Boolean.parseBoolean(args[6]);      flowAccumFile=outputFile.replace(".dep","_flow_accum.dep");    }    WhiteboxRaster dem=new WhiteboxRaster(demFile,"r");    double nodata=dem.getNoDataValue();    int rows=dem.getNumberRows();    int cols=dem.getNumberColumns();    int rowsLessOne=rows - 1;    int numCellsTotal=rows * cols;    minVal=dem.getMinimumValue();    elevDigits=String.valueOf((int)(dem.getMaximumValue() - minVal)).length();    elevMultiplier=Math.pow(10,8 - elevDigits);    double SMALL_NUM=1 / elevMultiplier;    double[][] output=new double[rows + 2][cols + 2];    BooleanBitArray2D pits=new BooleanBitArray2D(rows + 2,cols + 2);    BooleanBitArray2D inQueue=new BooleanBitArray2D(rows + 2,cols + 2);    NibbleArray2D flowdir=new NibbleArray2D(rows + 2,cols + 2);    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=dem.getValue(row,col);        output[row + 1][col + 1]=z;        flowdir.setValue(row + 1,col + 1,0);        if (z != nodata) {          isPit=true;          isPeak=true;          isEdgeCell=false;          lowestNeighbour=Double.POSITIVE_INFINITY;          for (n=0; n < 8; n++) {            zN=dem.getValue(row + dY[n],col + dX[n]);            if (zN != nodata) {              if (zN < z) {                isPit=false;                break;              } else {                if (zN < lowestNeighbour) {                  lowestNeighbour=zN;                }              }            } else {              isEdgeCell=true;            }          }          if (isPit) {            if (isEdgeCell) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              flowdir.setValue(row + 1,col + 1,0);            } else {              pits.setValue(row + 1,col + 1,true);              output[row + 1][col + 1]=lowestNeighbour - SMALL_NUM;            }          }        } else {          numSolvedCells++;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress != oldProgress) {        updateProgress("Breaching DEM (1 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    String paletteName=dem.getPreferredPalette();    dem.close();    for (row=0; row < rows + 2; row++) {      output[row][0]=nodata;      output[row][cols + 1]=nodata;      flowdir.setValue(row,0,0);      flowdir.setValue(row,cols + 1,0);    }    for (col=0; col < cols + 2; col++) {      output[0][col]=nodata;      output[rows + 1][col]=nodata;      flowdir.setValue(0,col,0);      flowdir.setValue(rows + 1,col,0);    }    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    updateProgress("Breaching DEM (2 of 2):",oldProgress);    if (!maxLengthOrDepthUsed) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    output[r][c]=zTest;                  }                } else {                  flag=false;                }              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    } else     if (!performConstrainedBreach) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              numCellsInPath=0;              maxPathBreachDepth=0;              breachDepth=0;              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    breachDepth=zN2 - zTest;                    if (breachDepth > maxPathBreachDepth) {                      maxPathBreachDepth=breachDepth;                    }                  }                } else {                  flag=false;                }                numCellsInPath++;                if (numCellsInPath > maxLength) {                  flag=false;                }                if (maxPathBreachDepth > maxDepth) {                  flag=false;                }              }              if (numCellsInPath <= maxLength && maxPathBreachDepth <= maxDepth) {                zTest=zN;                r=rowN;                c=colN;                flag=true;                while (flag) {                  zTest-=SMALL_NUM;                  dir=flowdir.getValue(r,c);                  if (dir > 0) {                    r+=dY[dir - 1];                    c+=dX[dir - 1];                    zN2=output[r][c];                    if (zN2 <= zTest || zN2 == nodata) {                      flag=false;                    } else {                      output[r][c]=zTest;                    }                  } else {                    flag=false;                  }                }              } else {                needsFilling=true;              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    if (needsFilling) {      numSolvedCells=0;      queue.clear();      inQueue=new BooleanBitArray2D(rows + 2,cols + 2);      flowdir=new NibbleArray2D(rows + 2,cols + 2);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          flowdir.setValue(row + 1,col + 1,0);          if (z != nodata) {            isPit=true;            isEdgeCell=false;            for (n=0; n < 8; n++) {              zN=output[row + dY[n] + 1][col + dX[n] + 1];              if (zN == nodata) {                isEdgeCell=true;              } else               if (zN < z) {                isPit=false;              }            }            if (isEdgeCell && isPit) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              numSolvedCells++;            }          } else {            numSolvedCells++;          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress != oldProgress) {          updateProgress("Filling DEM (1 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        z=output[row][col];        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (zN <= z) {              zN=z + SMALL_NUM;            }            numSolvedCells++;            output[rowN][colN]=zN;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Filling DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    WhiteboxRaster outputRaster=new WhiteboxRaster(outputFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);    outputRaster.setPreferredPalette(paletteName);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output[row + 1][col + 1];        outputRaster.setValue(row,col,z);      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress("Saving Data:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    outputRaster.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");    outputRaster.addMetadataEntry("Created on " + new Date());    Long endTime=System.currentTimeMillis();    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    outputRaster.addMetadataEntry("Elapsed time: " + duration);    outputRaster.addMetadataEntry("Max breach depth: " + maxDepth);    outputRaster.addMetadataEntry("Max length depth: " + maxLength);    outputRaster.close();    if (outputPointer) {      WhiteboxRaster pointer=new WhiteboxRaster(pointerFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);      pointer.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);      pointer.setPreferredPalette("qual.pal");      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          if (z != nodata) {            pointer.setValue(row,col,outPointer[flowdir.getValue(row + 1,col + 1)]);          } else {            pointer.setValue(row,col,nodata);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress("Saving Pointer:",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      pointer.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");      pointer.addMetadataEntry("Created on " + new Date());      pointer.close();      returnData(pointerFile);    }    returnData(outputFile);    if (performFlowAccumulation) {      String[] args2={pointerFile,flowAccumFile,"number of upslope grid cells","false"};      myHost.runPlugin("FlowAccumD8",args2,false);    }    if (!outputPointer && !performFlowAccumulation) {      showFeedback("Elapsed time: " + duration);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;  }}  }
class C{  private void checkResolutionLevelIsSufficientForProviderUse(int allowedResolutionLevel,String providerName){  int requiredResolutionLevel=getMinimumResolutionLevelForProviderUse(providerName);  if (allowedResolutionLevel < requiredResolutionLevel) {switch (requiredResolutionLevel) {case RESOLUTION_LEVEL_FINE:      throw new SecurityException("\"" + providerName + "\" location provider "+ "requires ACCESS_FINE_LOCATION permission.");case RESOLUTION_LEVEL_COARSE:    throw new SecurityException("\"" + providerName + "\" location provider "+ "requires ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission.");default :  throw new SecurityException("Insufficient permission for \"" + providerName + "\" location provider.");}}}  }
class C{  @Reference(authors="G. Marsaglia",title="Evaluating the Normal Distribution",booktitle="Journal of Statistical Software 11(4)",url="https://www.jstatsoft.org/article/view/v011i04/v11i04.pdf") public static double cdf(double x,double mu,double sigma){  x=(x - mu) / sigma;  if (x >= 8.22) {    return 1.;  }  if (x <= -8.22) {    return 0.;  }  double s=x, t=0, b=x, q=x * x, i=1;  while (s != t) {    s=(t=s) + (b*=q / (i+=2));  }  return .5 + s * Math.exp(-.5 * q - .91893853320467274178);}  }
class C{  public static InputStream stringToStream(String s){  return new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onPhotosFoundEvent(PhotosFoundEvent photosFoundEvent){  List<List<Size>> photos=photosFoundEvent.getPhotos();  if (photos != null && !photos.isEmpty()) {    noPhotos.setVisibility(View.INVISIBLE);    for (    List<Size> size : photos) {      imageAdapter.addPhoto(size.get(Size.SQUARE).getSource(),poiId,Size.SQUARE);      imageAdapter.addPhoto(size.get(Size.ORIGINAL).getSource(),poiId,Size.ORIGINAL);    }  } else {    noPhotos.setVisibility(View.VISIBLE);  }  loadingImage.setVisibility(View.INVISIBLE);  gridPhotos.setVisibility(View.VISIBLE);}  }
class C{  public static boolean isInitializerName(final String name){  return INITIALIZER_NAME.equals(name);}  }
class C{  public static Sequence appendTransaction(Sequence sequence1,Transaction lastTransaction){  Sequence result=new Sequence(sequence1);  result.add(lastTransaction);  return result;}  }
class C{  private static void quickSortReverse(double[] keys,int[] vals,final int start,final int end){  final int len=end - start;  if (len < INSERTION_THRESHOLD) {    insertionSortReverse(keys,vals,start,end);    return;  }  final int last=end - 1;  final int seventh=(len >> 3) + (len >> 6) + 1;  final int m3=(start + end) >> 1;  final int m2=m3 - seventh;  final int m1=m2 - seventh;  final int m4=m3 + seventh;  final int m5=m4 + seventh;  sortReverse5(keys,vals,m1,m2,m3,m4,m5);  double pivotkey=keys[m3];  int pivotval=vals[m3];  keys[m3]=keys[start];  vals[m3]=vals[start];  int left=start + 1;  int right=last;  while (true) {    while (left <= right && keys[left] > pivotkey) {      left++;    }    while (left <= right && pivotkey >= keys[right]) {      right--;    }    if (right <= left) {      break;    }    swap(keys,vals,left,right);    left++;    right--;  }  keys[start]=keys[right];  vals[start]=vals[right];  keys[right]=pivotkey;  vals[right]=pivotval;  if (start + 1 < right) {    quickSortReverse(keys,vals,start,right);  }  int rstart=right + 1;  while (rstart < last && keys[rstart] >= keys[right]) {    rstart++;  }  if (rstart < last) {    quickSortReverse(keys,vals,rstart,end);  }}  }
class C{  protected boolean isJdk14Available(){  return isLogLibraryAvailable("Jdk14","org.apache.commons.logging.impl.Jdk14Logger");}  }
class C{  public void opc_invokevirtual(short methodIndex,int numArgs,int numReturnValues){  emitByte(opc_invokevirtual);  emitShort(methodIndex);  setStack(getStack() - numArgs - 1 + numReturnValues);}  }
class C{  @Override public void updateFloat(String columnLabel,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + quote(columnLabel) + ", "+ x+ "f);");    }    update(columnLabel,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Ignore("Bug47553") @Test public void testParallelPropagationSenderStartAfterStop_Scenario2() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  vm2.invoke(null);  vm3.invoke(null);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("All the senders are now started");  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Done few puts");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("All the senders are stopped");  Wait.pause(2000);  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Done some more puts in second run");  vm2.invoke(null);  AsyncInvocation async=vm4.invokeAsync(null);  LogWriterUtils.getLogWriter().info("Started high number of puts by async thread");  LogWriterUtils.getLogWriter().info("Starting the senders at the same time");  startSenderInVMsAsync("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("All the senders are started");  async.join();  Wait.pause(2000);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageHeaders=null;  String outputHeader=null;  String outputSuffix=null;  int row, col;  double z;  double noData;  int progress;  int i, bin;  int numImages=0;  double minVal, maxVal;  int numBins=1024;  double clipPercentage=1.0;  String whichTailsToClip="both";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputSuffix=" " + args[1].trim().replace(".dep","") + ".dep";  clipPercentage=Double.parseDouble(args[2]);  whichTailsToClip=args[3].toLowerCase();  numBins=Integer.parseInt(args[4]);  if ((inputFilesString == null) || (outputSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageHeaders=inputFilesString.split(";");    numImages=imageHeaders.length;    for (i=0; i < numImages; i++) {      WhiteboxRaster image=new WhiteboxRaster(imageHeaders[i],"r");      int nRows=image.getNumberRows();      int nCols=image.getNumberColumns();      noData=image.getNoDataValue();      double[] data=null;      double inputImageMin=image.getMinimumValue();      double inputImageMax=image.getMaximumValue();      int inputImageBins=(int)(inputImageMax - inputImageMin + 1);      double inputImageRange=inputImageMax - inputImageMin;      double[] histo=new double[inputImageBins];      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            bin=(int)(data[col] - inputImageMin);            if (bin < 0) {              bin=0;            }            if (bin > (inputImageBins - 1)) {              bin=(inputImageBins - 1);            }            histo[bin]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Calculating clip values:",progress);      }      for (int a=1; a < inputImageBins; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (int a=0; a < inputImageBins; a++) {        histo[a]=histo[a] / histo[inputImageBins - 1] * 100;      }      boolean lowerTailFound=false;      boolean upperTailFound=false;      minVal=-1;      maxVal=-1;      if (whichTailsToClip.contains("both")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;          }          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }      } else       if (whichTailsToClip.contains("lower")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;            break;          }        }        maxVal=inputImageMax;      } else {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }        minVal=inputImageMin;      }      double scaleFactor=numBins / (maxVal - minVal);      outputHeader=imageHeaders[i].replace(".dep",outputSuffix);      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageHeaders[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=(int)(data[col] - minVal) * scaleFactor;            if (z < 0) {              z=0;            }            if (z > (numBins - 1)) {              z=(numBins - 1);            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      image.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void modify(Object element,String property,Object value){  if (element == null) {    return;  }  Object item=((TableItem)element).getData();  if (item instanceof GefaehrdungsUmsetzung) {    GefaehrdungsUmsetzung gefaehrdung=(GefaehrdungsUmsetzung)item;    if (RiskHandlingPage.CHOICE_COLUMN_ID.equals(property)) {      int index=(Integer)value;      String alternative=null;switch (index) {case 0:        alternative=GefaehrdungsUmsetzung.GEFAEHRDUNG_ALTERNATIVE_A;      break;case 1:    alternative=GefaehrdungsUmsetzung.GEFAEHRDUNG_ALTERNATIVE_B;  break;case 2:alternative=GefaehrdungsUmsetzung.GEFAEHRDUNG_ALTERNATIVE_C;break;case 3:alternative=GefaehrdungsUmsetzung.GEFAEHRDUNG_ALTERNATIVE_D;break;default :break;}if (alternative == null) {return;}try {SelectRiskTreatment command=new SelectRiskTreatment(wizard.getFinishedRiskAnalysisLists().getDbId(),wizard.getFinishedRiskAnalysis(),gefaehrdung,alternative);command=ServiceFactory.lookupCommandService().executeCommand(command);wizard.setFinishedRiskLists(command.getFinishedRiskLists());gefaehrdung.setAlternative(alternative);} catch (CommandException e) {ExceptionUtil.log(e,Messages.PropertiesComboBoxCellModifier_0);}viewer.refresh();if (wizard.getNotOKGefaehrdungsUmsetzungen().isEmpty()) {page.setPageComplete(false);} else {page.setPageComplete(true);}}}}  }
class C{  @Deprecated public static int parseLevel(String s){  if ((s == null) || (s.length() < 1))   return -1;  try {    return Integer.parseInt(s);  } catch (  NumberFormatException e) {  }  if (s.length() < 1)   return -1;  if ("SILENT".startsWith(s.toUpperCase()))   return SILENT; else   if ("BRIEF".startsWith(s.toUpperCase()))   return BRIEF; else   if ("VERBOSE".startsWith(s.toUpperCase()))   return VERBOSE;  return -1;}  }
class C{  public TestStackExResponse TestStackEx(RequestHeader RequestHeader,UnsignedInteger TestId,Integer Iteration,CompositeTestType Input) throws ServiceFaultException, ServiceResultException {  TestStackExRequest req=new TestStackExRequest(RequestHeader,TestId,Iteration,Input);  return (TestStackExResponse)channel.serviceRequest(req);}  }
class C{  public LocaleUtil(){}  }
class C{  protected static void eitherSparseMatmult(MatrixObject output,MatrixObject left,MatrixObject right,boolean isLeftTransposed,boolean isRightTransposed) throws DMLRuntimeException {  int transA=isLeftTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;  int transB=isRightTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;  int m=(int)(isLeftTransposed ? left.getNumColumns() : left.getNumRows());  int n=(int)(isRightTransposed ? right.getNumRows() : right.getNumColumns());  int k=(int)(isLeftTransposed ? left.getNumRows() : left.getNumColumns());  int k1=(int)(isRightTransposed ? right.getNumColumns() : right.getNumRows());  if (k != k1)   throw new DMLRuntimeException("Dimension mismatch: " + k + " != "+ k1);  if (m == -1 || n == -1 || k == -1)   throw new DMLRuntimeException("Incorrect dimensions");  if (left.getGPUObject().isInSparseFormat()) {    sparseDenseMatmult(output,left,right,isLeftTransposed,isRightTransposed,transA,transB,m,n,k);  } else {    denseSparseMatmult(output,right,left,isLeftTransposed,isRightTransposed,transA,transB,m,n,k);  }}  }
class C{  @Override protected void beforeExecute(Thread t,Runnable r){  if (isAppendTaskName()) {    NamedThreadPoolHelper.changeNameBeforeExecute(t,r);  }  super.beforeExecute(t,r);}  }
class C{  public DiskDirectoryStats(StatisticsFactory f,String name){  this.stats=f.createStatistics(type,name);}  }
class C{  public TableBuilderKelp columnDouble(String name){  _rowBuilder.doubleCol(name);  return this;}  }
class C{  public boolean isUseAnisotropy(){  return this.useAnisotropy;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__DEPRECATED:    setDeprecated(DEPRECATED_EDEFAULT);  return;case SGenPackage.FEATURE_PARAMETER__COMMENT:setComment(COMMENT_EDEFAULT);return;case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:setFeatureType((FeatureType)null);return;case SGenPackage.FEATURE_PARAMETER__OPTIONAL:setOptional(OPTIONAL_EDEFAULT);return;case SGenPackage.FEATURE_PARAMETER__PARAMETER_TYPE:setParameterType(PARAMETER_TYPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  public XhtmlFrameSetDocument appendTitle(String value){  title.addElement(value);  return (this);}  }
class C{  public boolean contains(int x,int y){  return false;}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public DrawerBuilder withInnerShadow(boolean innerShadow){  this.mInnerShadow=innerShadow;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testHllOptionsErrors() throws Exception {  String[] baseParams=new String[]{"q","*:*","stats","true","indent","true","rows","0"};  SolrCore core=h.getCore();  SchemaField foo_s=core.getLatestSchema().getField("foo_s");  SchemaField foo_i=core.getLatestSchema().getField("foo_i");  ignoreException("hllPreHashed");  for (  SchemaField field : new SchemaField[]{foo_s,foo_i}) {    try {      HllOptions.parseHllOptions(params("cardinality","true","hllPreHashed","true"),field);      fail("hllPreHashed should have failed for " + field.getName());    } catch (    SolrException e) {      assertTrue("MSG: " + e.getMessage(),e.getMessage().contains("hllPreHashed is only supported with Long"));    }    assertQEx("hllPreHashed " + field.getName(),"hllPreHashed is only supported with Long",req(params("stats.field","{!cardinality=true hllPreHashed=true}" + field.getName()),baseParams),ErrorCode.BAD_REQUEST);  }  try {    HllOptions.parseHllOptions(params("cardinality","true","hllPreHashed","true"),null);    fail("hllPreHashed should have failed for function");  } catch (  SolrException e) {    assertTrue("MSG: " + e.getMessage(),e.getMessage().contains("hllPreHashed is only supported with Long"));  }  assertQEx("hllPreHashed function","hllPreHashed is only supported with Long",req(params("stats.field","{!func cardinality=true hllPreHashed=true}sum(foo_i,foo_l)"),baseParams),ErrorCode.BAD_REQUEST);  ignoreException("accuracy");  for (  String invalid : new String[]{"-1","1.1","100"}) {    try {      Object trash=HllOptions.parseHllOptions(params("cardinality",invalid),foo_s);      fail("Should have failed: " + invalid);    } catch (    SolrException e) {      assertTrue("MSG: " + e.getMessage(),e.getMessage().contains("number between 0 and 1"));    }    assertQEx("cardinality=" + invalid,"number between 0 and 1",req(params("stats.field","{!cardinality=" + invalid + "}foo_s"),baseParams),ErrorCode.BAD_REQUEST);  }  ignoreException("hllLog2m must be");  for (  int invalid : new int[]{HLL.MINIMUM_LOG2M_PARAM - 1,HLL.MAXIMUM_LOG2M_PARAM + 11}) {    try {      Object trash=HllOptions.parseHllOptions(params("cardinality","true","hllLog2m","" + invalid),foo_s);      fail("Should have failed: " + invalid);    } catch (    SolrException e) {      assertTrue("MSG: " + e.getMessage(),e.getMessage().contains("hllLog2m must be"));    }    assertQEx("hllLog2m=" + invalid,"hllLog2m must be",req(params("stats.field","{!cardinality=true hllLog2m=" + invalid + "}foo_s"),baseParams),ErrorCode.BAD_REQUEST);  }  ignoreException("hllRegwidth must be");  for (  int invalid : new int[]{HLL.MINIMUM_REGWIDTH_PARAM - 1,HLL.MAXIMUM_REGWIDTH_PARAM + 1}) {    try {      Object trash=HllOptions.parseHllOptions(params("cardinality","true","hllRegwidth","" + invalid),foo_s);      fail("Should have failed: " + invalid);    } catch (    SolrException e) {      assertTrue("MSG: " + e.getMessage(),e.getMessage().contains("hllRegwidth must be"));    }    assertQEx("hllRegwidth=" + invalid,"hllRegwidth must be",req(params("stats.field","{!cardinality=true hllRegwidth=" + invalid + "}foo_s"),baseParams),ErrorCode.BAD_REQUEST);  }}  }
class C{  public boolean createShortcut(String target){  return ShellUtilities.execute(new String[]{"cp",getAppPath(),target});}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.267 -0400",hash_original_method="F5DCF3E68EF346372384DED9B98D68C9",hash_generated_method="BA31934C4B705BA970E96C59FEA290E8") Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  public EaseIn(){}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NULL_LITERAL;}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public Property year(){  return new Property(this,YEAR);}  }
class C{  public boolean handleAuthResp(byte[] authResp){  if (mAuthenticator == null) {    return false;  }  byte[] correctPassword=mAuthenticator.onAuthenticationResponse(ObexHelper.getTagValue((byte)0x01,authResp));  if (correctPassword == null) {    return false;  }  byte[] temp=new byte[correctPassword.length + 16];  System.arraycopy(mChallengeDigest,0,temp,0,16);  System.arraycopy(correctPassword,0,temp,16,correctPassword.length);  byte[] correctResponse=ObexHelper.computeMd5Hash(temp);  byte[] actualResponse=ObexHelper.getTagValue((byte)0x00,authResp);  for (int i=0; i < 16; i++) {    if (correctResponse[i] != actualResponse[i]) {      return false;    }  }  return true;}  }
class C{  public static void injectDebugLogger(final Consumer<String> logger){  LogProvider.debugLogger=logger;}  }
class C{  public BitArray(int length) throws IllegalArgumentException {  if (length < 0) {    throw new IllegalArgumentException("Negative length for BitArray");  }  this.length=length;  repn=new byte[(length + BITS_PER_UNIT - 1) / BITS_PER_UNIT];}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){}  }
class C{  private static void addLabelTextAndHint(Element labelNode,Element node){  String fixedAttributeValue=node.getAttributeValue(null,ATTRIBUTE_FIXED);  labelNode.addChild(Element.TEXT,getConceptName(fixedAttributeValue));  Element parentNode=(Element)labelNode.getParent();  if (parentNode.getName().contains(XformBuilder.CONTROL_SELECT))   parentNode.setAttribute(null,XformBuilder.ATTRIBUTE_CONCEPT_ID,getConceptId(fixedAttributeValue).toString());  String hint=getConceptDescription(node);  if (hint != null && hint.length() > 0) {    Element hintNode=labelNode.createElement(NAMESPACE_XFORMS,null);    hintNode.setName(NODE_HINT);    hintNode.addChild(Element.TEXT,getConceptDescription(node));    labelNode.getParent().addChild(1,Element.ELEMENT,hintNode);  }}  }
class C{  protected void cacheLocators(final byte[] fromKey,final byte[] toKey){  long n=0;  mdi.rangeIterator(fromKey,toKey,0,IRangeQuery.REMOVEALL,null);  final ITupleIterator<?> itr=new RawDataServiceTupleIterator(fed.getMetadataService(),MetadataService.getMetadataIndexName(name),timestamp,true,fromKey,toKey,0,IRangeQuery.KEYS | IRangeQuery.VALS | IRangeQuery.READONLY,null);  while (itr.hasNext()) {    final ITuple<?> tuple=itr.next();    final byte[] key=tuple.getKey();    final byte[] val=tuple.getValue();    mdi.insert(key,val);    n++;  }  if (log.isInfoEnabled()) {    log.info("Copied " + n + " locator records: name="+ name);  }}  }
class C{  public static List<Class<?>> findSuperTypes(Class<?> cls,Class<?> endBefore){  return findSuperTypes(cls,endBefore,new ArrayList<Class<?>>());}  }
class C{  protected void addEntity(EntityCollection entities,Shape area,XYDataset dataset,int series,int item,double entityX,double entityY){  if (!getItemCreateEntity(series,item)) {    return;  }  Shape hotspot=area;  if (hotspot == null) {    double r=getDefaultEntityRadius();    double w=r * 2;    if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {      hotspot=new Ellipse2D.Double(entityX - r,entityY - r,w,w);    } else {      hotspot=new Ellipse2D.Double(entityY - r,entityX - r,w,w);    }  }  String tip=null;  XYToolTipGenerator generator=getToolTipGenerator(series,item);  if (generator != null) {    tip=generator.generateToolTip(dataset,series,item);  }  String url=null;  if (getURLGenerator() != null) {    url=getURLGenerator().generateURL(dataset,series,item);  }  XYItemEntity entity=new XYItemEntity(hotspot,dataset,series,item,tip,url);  entities.add(entity);}  }
class C{  @Override protected void deleteBehind(final int n,final Iterator<byte[]> keys){  final Lock lock=writeLock();  lock.lock();  try {    super.deleteBehind(n,keys);  }  finally {    unlock(lock);  }}  }
class C{  private Map<String,String> _getKeyPropertyList(){synchronized (this) {    if (_propertyList == null) {      _propertyList=new HashMap<String,String>();      int len=_ca_array.length;      Property prop;      for (int i=len - 1; i >= 0; i--) {        prop=_ca_array[i];        _propertyList.put(prop.getKeyString(_canonicalName),prop.getValueString(_canonicalName));      }    }  }  return _propertyList;}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public void bind(int index,double value){  mPreparedStatement.bindDouble(index,value);}  }
class C{  public void resetExplicitPassword(){  this.explicitPassword=null;}  }
class C{  protected Component createComponent(Component owner){  if (GraphicsEnvironment.isHeadless()) {    return null;  }  return new HeavyWeightWindow(getParentWindow(owner));}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public AdaptiveTimeContinuation(EvolutionaryAlgorithm algorithm,int windowSize,int maxWindowSize,double populationRatio,int minimumPopulationSize,int maximumPopulationSize,Selection selection,Variation variation){  super(algorithm,windowSize,FrequencyType.STEPS);  this.maxWindowSize=maxWindowSize;  this.populationRatio=populationRatio;  this.minimumPopulationSize=minimumPopulationSize;  this.maximumPopulationSize=maximumPopulationSize;  this.selection=selection;  this.variation=variation;  listeners=EventListenerSupport.create(RestartListener.class);}  }
class C{  public CombineAction(DrawingEditor editor){  this(editor,new SVGPathFigure(true),true);}  }
class C{  public static Map<String,Object> prodFindProduct(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  if (UtilValidate.isEmpty(productId)) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.invalid_productId_passed",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  try {    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();    GenericValue mainProduct=product;    if (product.get("isVariant") != null && product.getString("isVariant").equalsIgnoreCase("Y")) {      List<GenericValue> c=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId","PRODUCT_VARIANT"),null,true);      c=EntityUtil.filterByDate(c);      if (c.size() > 0) {        GenericValue asV=c.iterator().next();        mainProduct=asV.getRelatedOne("MainProduct",true);      }    }    result.put("product",mainProduct);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    e.printStackTrace();    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_reading_product_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  public Block(final Account harvester,final Block prevBlock,final TimeInstant timeStamp){  this(harvester,Hash.ZERO,Hash.ZERO,timeStamp,prevBlock.getHeight().next());  this.setPrevious(prevBlock);}  }
class C{  @SuppressWarnings("unchecked") Entry<K,V>[] newElementArray(int s){  return new Entry[s];}  }
class C{  public Optional<Property> findCustomProperty(String name){  return customProperties.stream().filter(null).findFirst();}  }
class C{  public void unregisterFabricNode(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(FABRIC_NODES_BASE_PATH + "/" + id+ "?unprepare_host=true",HttpStatus.SC_OK,responseCallback);}  }
class C{  public final Handler newHandler(){  return newHandler(DEFAULT_TAG);}  }
class C{  public boolean validate(Class type,InputStream source) throws Exception {  return validate(type,source,true);}  }
class C{  @Ignore public static ByteArray instance(byte[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  private static double[] normalParams(DataSet dataSet,Variable variable){  int columnIndex=dataSet.getColumn(variable);  double mean=0.0;  double sd=0.0;  for (int i=0; i < dataSet.getNumRows(); i++) {    mean+=dataSet.getDouble(i,columnIndex);  }  mean/=dataSet.getNumRows();  for (int i=0; i < dataSet.getNumRows(); i++) {    sd+=(dataSet.getDouble(i,columnIndex) - mean) * (dataSet.getDouble(i,columnIndex) - mean);  }  sd/=dataSet.getNumRows() - 1.0;  sd=Math.sqrt(sd);  double result[]=new double[2];  result[0]=mean;  result[1]=sd;  return result;}  }
class C{  public WrapLayout(int align){  super(align);}  }
class C{  public void dispose(){  for (  final IDebugger debugger : m_debuggerProvider.getDebuggers()) {    removeDebuggerListeners(debugger);  }  m_debuggerProvider.removeListener(m_debuggerListener);}  }
class C{  public NotificationChain basicSetDeclaredThisType(TypeRef newDeclaredThisType,NotificationChain msgs){  TypeRef oldDeclaredThisType=declaredThisType;  declaredThisType=newDeclaredThisType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TFUNCTION__DECLARED_THIS_TYPE,oldDeclaredThisType,newDeclaredThisType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void unlock(){  LOCK.unlock();}  }
class C{  public RelationalLocator(Instances data,int[] indices){  super(data,Attribute.RELATIONAL,indices);}  }
class C{  public static JFreeChart createWaferMapChart(String title,WaferMapDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){  ParamChecks.nullNotPermitted(orientation,"orientation");  WaferMapPlot plot=new WaferMapPlot(dataset);  WaferMapRenderer renderer=new WaferMapRenderer();  plot.setRenderer(renderer);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  public StandardFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Bindings add(String property,JToggleButton c,boolean defaultValue){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,defaultValue));}  }
class C{  public EnumMappingRule createEnumMappingRule(){  EnumMappingRuleImpl enumMappingRule=new EnumMappingRuleImpl();  return enumMappingRule;}  }
class C{  public EditableOMGraphicList(OMGraphicList oml){  setGraphic(oml);}  }
class C{  public static Builder from(Reader swaggerReader){  Validate.notNull(swaggerReader,"swaggerReader must not be null");  Swagger swagger;  try {    swagger=new SwaggerParser().parse(IOUtils.toString(swaggerReader));  } catch (  IOException e) {    throw new RuntimeException("Swagger source can not be parsed",e);  }  if (swagger == null)   throw new IllegalArgumentException("Swagger source is in a wrong format");  return new Builder(swagger);}  }
class C{  public void saveSettingsToDB(String songId){  if (mApp.getDBAccessHelper().hasEqualizerSettings(songId) == false) {    mApp.getDBAccessHelper().addSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  } else {    mApp.getDBAccessHelper().updateSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  }}  }
class C{  public static Intent resultIntent(BarcodeResult rawResult,String barcodeImagePath){  Intent intent=new Intent(Intents.Scan.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Scan.RESULT,rawResult.toString());  intent.putExtra(Intents.Scan.RESULT_FORMAT,rawResult.getBarcodeFormat().toString());  Log.e("zhongquan","rawResult = " + rawResult);  byte[] rawBytes=rawResult.getRawBytes();  if (rawBytes != null && rawBytes.length > 0) {    intent.putExtra(Intents.Scan.RESULT_BYTES,rawBytes);  }  Map<ResultMetadataType,?> metadata=rawResult.getResultMetadata();  if (metadata != null) {    if (metadata.containsKey(ResultMetadataType.UPC_EAN_EXTENSION)) {      intent.putExtra(Intents.Scan.RESULT_UPC_EAN_EXTENSION,metadata.get(ResultMetadataType.UPC_EAN_EXTENSION).toString());    }    Number orientation=(Number)metadata.get(ResultMetadataType.ORIENTATION);    if (orientation != null) {      intent.putExtra(Intents.Scan.RESULT_ORIENTATION,orientation.intValue());    }    String ecLevel=(String)metadata.get(ResultMetadataType.ERROR_CORRECTION_LEVEL);    if (ecLevel != null) {      intent.putExtra(Intents.Scan.RESULT_ERROR_CORRECTION_LEVEL,ecLevel);    }    @SuppressWarnings("unchecked") Iterable<byte[]> byteSegments=(Iterable<byte[]>)metadata.get(ResultMetadataType.BYTE_SEGMENTS);    if (byteSegments != null) {      int i=0;      for (      byte[] byteSegment : byteSegments) {        intent.putExtra(Intents.Scan.RESULT_BYTE_SEGMENTS_PREFIX + i,byteSegment);        i++;      }    }  }  if (barcodeImagePath != null) {    intent.putExtra(Intents.Scan.RESULT_BARCODE_IMAGE_PATH,barcodeImagePath);  }  return intent;}  }
class C{  protected static Tree<Pair<String,Integer>> makeDependencyTree(TextAnnotation ta,edu.illinois.cs.cogcomp.thrift.base.Tree tree){  Map<Node,Tree<Pair<String,Integer>>> nodeToTreeMap=new HashMap<>();  Queue<Node> nodeQueue=new LinkedList<>();  int topId=tree.getTop();  List<Node> nodes=tree.getNodes();  Node topNode=nodes.get(topId);  int topTokenId=ta.getTokenIdFromCharacterOffset(topNode.getSpan().getStart());  int sentenceStart=ta.getSentence(ta.getSentenceId(topTokenId)).getStartSpan();  Tree<Pair<String,Integer>> topTree=new Tree<>(new Pair<>(ta.getToken(topTokenId),topTokenId - sentenceStart));  nodeToTreeMap.put(topNode,topTree);  nodeQueue.add(topNode);  while (!nodeQueue.isEmpty()) {    Node node=nodeQueue.poll();    if (node == null)     break;    if (!node.isSetChildren())     continue;    if (node.getChildren().size() == 0)     continue;    Tree<Pair<String,Integer>> treeNode=nodeToTreeMap.get(node);    for (    int childId : node.getChildren().keySet()) {      String edgeLabel=node.getChildren().get(childId);      Node childNode=nodes.get(childId);      int childTokenId=ta.getTokenIdFromCharacterOffset(childNode.getSpan().getStart());      String childToken=ta.getToken(childTokenId);      Tree<Pair<String,Integer>> childTree=new Tree<>(new Pair<>(childToken,childTokenId - sentenceStart));      treeNode.addSubtree(childTree,new Pair<>(edgeLabel,1));      nodeToTreeMap.put(childNode,childTree);      nodeQueue.add(childNode);    }  }  return nodeToTreeMap.get(topNode);}  }
class C{  public Tree<String> extractBestMaxRuleParse2(int start,int end,int state,int substate,List<String> sentence){  List<Tree<String>> children=new ArrayList<Tree<String>>();  String stateStr=(String)tagNumberer.object(state);  if (stateStr.endsWith("^g"))   stateStr=stateStr.substring(0,stateStr.length() - 2);  boolean posLevel=(end - start == 1);  if (posLevel) {    if (grammar.isGrammarTag(state)) {      List<Tree<String>> childs=new ArrayList<Tree<String>>();      childs.add(new Tree<String>(sentence.get(start)));      String stateStr2=(String)tagNumberer.object(maxcChild[start][end][state][substate]);      children.add(new Tree<String>(stateStr2,childs));    } else     children.add(new Tree<String>(sentence.get(start)));  } else {    int split=maxcSplit[start][end][state][substate];    if (split == -1) {      System.err.println("Warning: no symbol can generate the span from " + start + " to "+ end+ ".");      System.err.println("The score is " + maxcScore[start][end][state] + " and the state is supposed to be "+ stateStr);      System.err.println("The insideScores are " + Arrays.toString(iScore[start][end][state]) + " and the outsideScores are "+ Arrays.toString(oScore[start][end][state]));      System.err.println("The maxcScore is " + maxcScore[start][end][state]);      return new Tree<String>("ROOT");    }    int lState=maxcLeftChild[start][end][state][substate];    int lSubState=maxcLeftChildSub[start][end][state][substate];    int rState=maxcRightChild[start][end][state][substate];    int rSubState=maxcRightChildSub[start][end][state][substate];    Tree<String> leftChildTree=extractBestMaxRuleParse1(start,split,lState,lSubState,sentence);    Tree<String> rightChildTree=extractBestMaxRuleParse1(split,end,rState,rSubState,sentence);    children.add(leftChildTree);    children.add(rightChildTree);  }  return new Tree<String>(stateStr,children);}  }
class C{  public void left(){  movePuck(puck.x + XOFFSET - 1);}  }
class C{  public static boolean addNode(Properties ctx,String treeType,int Record_ID,String trxName){  int AD_Tree_ID=0;  MClient client=MClient.get(ctx);  MClientInfo ci=client.getInfo();  if (TREETYPE_Activity.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Activity_ID(); else   if (TREETYPE_BoM.equals(treeType))   throw new IllegalArgumentException("BoM Trees not supported"); else   if (TREETYPE_BPartner.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_BPartner_ID(); else   if (TREETYPE_Campaign.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Campaign_ID(); else   if (TREETYPE_ElementValue.equals(treeType))   throw new IllegalArgumentException("ElementValue cannot use this API"); else   if (TREETYPE_Menu.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Menu_ID(); else   if (TREETYPE_Organization.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Org_ID(); else   if (TREETYPE_Product.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Product_ID(); else   if (TREETYPE_ProductCategory.equals(treeType))   throw new IllegalArgumentException("Product Category Trees not supported"); else   if (TREETYPE_Project.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_Project_ID(); else   if (TREETYPE_SalesRegion.equals(treeType))   AD_Tree_ID=ci.getAD_Tree_SalesRegion_ID();  if (AD_Tree_ID == 0)   throw new IllegalArgumentException("No Tree found");  MTree_Base tree=MTree_Base.get(ctx,AD_Tree_ID,trxName);  if (tree.get_ID() != AD_Tree_ID)   throw new IllegalArgumentException("Tree found AD_Tree_ID=" + AD_Tree_ID);  boolean saved=false;  if (TREETYPE_Menu.equals(treeType)) {    MTree_NodeMM node=new MTree_NodeMM(tree,Record_ID);    saved=node.save();  } else   if (TREETYPE_BPartner.equals(treeType)) {    MTree_NodeBP node=new MTree_NodeBP(tree,Record_ID);    saved=node.save();  } else   if (TREETYPE_Product.equals(treeType)) {    MTree_NodePR node=new MTree_NodePR(tree,Record_ID);    saved=node.save();  } else {    MTree_Node node=new MTree_Node(tree,Record_ID);    saved=node.save();  }  return saved;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private static Map<String,SessionNodeConfig> buildConfiguration(Element root){  Elements elements=root.getChildElements();  ClassLoader loader=getClassLoader();  Map<String,SessionNodeConfig> configs=new HashMap<>();  for (int i=0; i < elements.size(); i++) {    Element node=elements.get(i);    String id=node.getAttributeValue("id");    DefaultNodeConfig nodeConfig=new DefaultNodeConfig(id);    Elements nodeElements=node.getChildElements();    for (int k=0; k < nodeElements.size(); k++) {      Element child=nodeElements.get(k);      if ("models".equals(child.getQualifiedName())) {        nodeConfig.setSessionNodeModelConfig(buildModelConfigs(child));      } else       if ("display-component".equals(child.getQualifiedName())) {        String image=child.getAttributeValue("image");        String value=getValue(child);        Class compClass=value == null ? null : loadClass(loader,value);        nodeConfig.setDisplayComp(image,compClass);      } else       if ("model-chooser".equals(child.getQualifiedName())) {        String title=child.getAttributeValue("title");        String value=getValue(child);        Class chooserClass=value == null ? null : loadClass(loader,value);        nodeConfig.setChooser(title,chooserClass);      } else       if ("node-specific-message".equals(child.getQualifiedName())) {        nodeConfig.setNodeSpecificMessage(child.getValue());      } else {        throw new IllegalStateException("Unknown element " + child.getQualifiedName());      }      configs.put(id,nodeConfig);    }  }  return configs;}  }
class C{  public static WorkspaceComponent open(final Class<?> fileClass,final File file){  String extension=file.getName().substring(file.getName().indexOf("."));  try {    Method method=fileClass.getMethod("open",InputStream.class,String.class,String.class);    WorkspaceComponent wc=(WorkspaceComponent)method.invoke(null,new FileInputStream(file),file.getName(),extension);    wc.setCurrentFile(file);    wc.setChangedSinceLastSave(false);    return wc;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isDetectedBy(Assertion assertion){  assert (assertion.isValid());  for (  Integer statement : trace.keySet()) {    for (    Integer var : trace.get(statement).keySet()) {      if (trace.get(statement).get(var).isDetectedBy(assertion))       return true;    }  }  return false;}  }
class C{  private void unmap() throws RuntimeException {  try {    Method method=FileChannelImpl.class.getDeclaredMethod("unmap0",long.class,long.class);    method.setAccessible(true);    method.invoke(fileChannel_,nativeRawStartAddress_,capacityBytes_);    randomAccessFile_.close();  } catch (  Exception e) {    throw new RuntimeException(String.format("Encountered %s exception while freeing memory",e.getClass()));  }}  }
class C{  private String generateKey() throws Exception {  KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");  keyGenerator.init(128);  SecretKey secretKey=keyGenerator.generateKey();  byte[] keyInBytes=secretKey.getEncoded();  String key=Base64.encode(keyInBytes);  return key;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void test_20() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,false);  insertSparql(cxn);  BigdataValueFactory vf=cxn.getValueFactory();  BigdataValue[] values=new BigdataValue[]{vf.createURI("http://s"),vf.createLiteral("1",XMLSchema.INTEGER),vf.createLiteral(2),vf.createLiteral("3.0",XMLSchema.DECIMAL),vf.createLiteral(4.0),vf.createLiteral(true),vf.createLiteral(false),vf.createLiteral("plain string"),vf.createLiteral("datatyped string",XMLSchema.STRING),vf.createLiteral("english string","en"),vf.createBNode("_:s1"),vf.createBNode("_:s2")};  cxn.getTripleStore().getLexiconRelation().addTerms(values,values.length,true);  assertFalse(values[0].getIV().isInline());  assertFalse(values[1].getIV().isInline());  assertFalse(values[2].getIV().isInline());  assertFalse(values[3].getIV().isInline());  assertFalse(values[4].getIV().isInline());  assertFalse(values[5].getIV().isInline());  assertFalse(values[6].getIV().isInline());  assertFalse(values[7].getIV().isInline());  assertFalse(values[8].getIV().isInline());  assertFalse(values[9].getIV().isInline());  endTest(cxn);}  }
class C{  public byte[] encode(){  char type=getAttributeType();  if (!isTypeValid(type))   throw new IllegalStateException(((int)type) + "is not a valid address attribute!");  byte binValue[]=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=0x00;  binValue[5]=getFamily();  binValue[6]=(byte)(getPort() >> 8);  binValue[7]=(byte)(getPort() & 0x00FF);  if (getFamily() == ADDRESS_FAMILY_IPV6) {    System.arraycopy(getAddressBytes(),0,binValue,8,16);  } else {    System.arraycopy(getAddressBytes(),0,binValue,8,4);  }  return binValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.437 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public static boolean matchesHttpHeader(final String matchHeader,final String toMatch){  final String[] matchValues=matchHeader.split("\\s*,\\s*");  Arrays.sort(matchValues);  return Arrays.binarySearch(matchValues,toMatch) > -1 || Arrays.binarySearch(matchValues,"*") > -1;}  }
class C{  private boolean headerContainsAcceptEncodingGzip(final HttpServletRequest request){  final Enumeration accepted=request.getHeaders("Accept-Encoding");  while (accepted.hasMoreElements()) {    final String headerValue=(String)accepted.nextElement();    if (headerValue.indexOf("gzip") != -1) {      return true;    }  }  return false;}  }
class C{  public void dispose(){  if (minuteChangeListener != null) {    internalClock.removeMinuteChangeListener(minuteChangeListener);    minuteChangeListener=null;  }}  }
class C{  @Override public void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (findFile(name) == null) {    log.debug("{} file could not be found",name);    return;  }  Element root=rootFromName(name);  if (root == null) {    log.debug("{} file could not be read",name);    return;  }  RouteManager.instance().load(root);  setDirty(false);}  }
class C{  private void pushFrame(StackFrame frame){  frameStack.push(frame);}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  private static Map<Byte,LongList> pickTopSocialProofs(SmallArrayBasedLongToDoubleMap[] socialProofs,byte[] validSocialProofs,int maxSocialProofSize){  Map<Byte,LongList> results=new HashMap<Byte,LongList>();  int length=validSocialProofs.length;  for (int i=0; i < length; i++) {    SmallArrayBasedLongToDoubleMap socialProof=socialProofs[validSocialProofs[i]];    if (socialProof != null) {      if (socialProof.size() > 1) {        socialProof.sort();      }      socialProof.trim(maxSocialProofSize);      results.put(validSocialProofs[i],new LongArrayList(socialProof.keys()));    }  }  return results;}  }
class C{  int size(){  return specs.size();}  }
class C{  protected void addNativeDataBinding(String elementId,String dataBinding,String attributeName){  nativeBindings.add(new NativeDataBinding(elementId,dataBinding,attributeName));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public void add(EditableOMGraphic editable){  if (editable == null) {    if (Debug.debugging("eomg")) {      Debug.output("EditableOMGraphicList adding null EditableOMGraphic");    }    return;  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMGraphicList adding " + editable.getClass().getName() + " "+ editable);  }  OMGraphic graphic=editable.getGraphic();  if (!list.contains(graphic)) {    getEditables().add(editable);    editable.setProjection(getProjection());    list.add(graphic);    editable.attachToMovingGrabPoint(gpm);  } else {    if (Debug.debugging("eomg")) {      Debug.output("EditableOMGraphicList.add(" + editable.getClass().getName() + ") not added, duplicate");    }  }}  }
class C{  @Override protected void onPause(){  super.onPause();}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  public Item(CharSequence text,String htmlText,Intent intent,Uri uri){  if (htmlText != null && text == null) {    throw new IllegalArgumentException("Plain text must be supplied if HTML text is supplied");  }  mText=text;  mHtmlText=htmlText;  mIntent=intent;  mUri=uri;}  }
class C{  public WFG8(int k,int l,int M){  super(k,l,M);}  }
class C{  public static void write(Map<String,Stat> mlsd,OutputStream os) throws IOException {  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));  for (  Map.Entry<String,Stat> entry : mlsd.entrySet()) {    writer.write(entry.getValue().toString() + " " + entry.getKey()+ "\r\n");  }  writer.close();}  }
class C{  public synchronized boolean isScanError(){  return isError;}  }
class C{  public void assertAllQueries(MemoryIndex memory,Directory ramdir,Analyzer analyzer) throws Exception {  IndexReader reader=DirectoryReader.open(ramdir);  IndexSearcher ram=newSearcher(reader);  IndexSearcher mem=memory.createSearcher();  QueryParser qp=new QueryParser("foo",analyzer);  for (  String query : queries) {    TopDocs ramDocs=ram.search(qp.parse(query),1);    TopDocs memDocs=mem.search(qp.parse(query),1);    assertEquals(query,ramDocs.totalHits,memDocs.totalHits);  }  reader.close();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return new Long(tun.getRemoteInfo(remoteName).carrier_freq); else   return new Long(0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.957 -0500",hash_original_method="580748AA620617AA151344F4D11AC7C2",hash_generated_method="150253DAD26A10AB954083587CB2FFDD") public SoftReference(T r){  super(r,null);}  }
class C{  public AngelFontVisualPanel2(){  initComponents();  jComboBox1.removeAllItems();  jComboBox1.addItem("PLAIN");  jComboBox1.addItem("ITALIC");  jComboBox1.addItem("BOLD");}  }
class C{  public String findExtension(String mimeType){  Object value=mimeMappings.get(mimeType);  if (value instanceof String[]) {    return ((String[])value)[0];  } else   if (value instanceof String) {    return (String)value;  } else {    return null;  }}  }
class C{  private StringUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.969 -0500",hash_original_method="1E8BCB605E875657A6EC0245732A9544",hash_generated_method="67071B1E12E0471CDF55C3CC23CCA8B9") public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  public static char[] toChars(int codePoint){  if (!isValidCodePoint(codePoint)) {    throw new IllegalArgumentException();  }  if (isSupplementaryCodePoint(codePoint)) {    int cpPrime=codePoint - 0x10000;    int high=0xD800 | ((cpPrime >> 10) & 0x3FF);    int low=0xDC00 | (cpPrime & 0x3FF);    return new char[]{(char)high,(char)low};  }  return new char[]{(char)codePoint};}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  public void readLine(final String line){  if (line != null) {    String[] tabs=line.split(",");    if (tabs[4].equals("L")) {      tabs[4]="H";    }    if (tabs[7].equals("L")) {      tabs[7]="H";    }    String tripId=tabs[0] + "-" + tabs[1]+ "-"+ tabs[2];    String mode=tabs[16];    if (!this.tmpTripId.equals(tripId) && mode.equals("0")) {      String personId=tabs[0] + "-" + tabs[1];      String hhldId=tabs[0];      double endTime;      try {        if (this.tmpPersonId.equals(personId)) {          Plan pl=this.pop.getPersons().get(Id.create(personId,Person.class)).getSelectedPlan();          endTime=convertTime(tabs[3]);          double dur=endTime - this.tmpEndTime;          Leg leg=PopulationUtils.createAndAddLeg(((Plan)pl),(String)TransportMode.car);          leg.setDepartureTime(convertTime(this.tmpTabs[3]));          Coord tmpCoord;          if ((tabs[4].equals("H")) && this.tmpGotH) {            tmpCoord=this.tmpHome;          } else           if ((tabs[4].equals("H")) && !this.tmpGotH) {            tmpCoord=getRandomCoordInZone(tabs[6]);            this.tmpHome=tmpCoord;            this.tmpGotH=true;          } else {            tmpCoord=getRandomCoordInZone(tabs[6]);          }          this.tmpType=tabs[7];          final Coord coord=tmpCoord;          Activity act=PopulationUtils.createAndAddActivityFromCoord(((Plan)pl),(String)tabs[4],coord);          act.setEndTime(convertTime(tabs[3]));          act.setMaximumDuration(dur);        } else {          if (!this.pop.getPersons().isEmpty()) {            Person p=this.pop.getPersons().get(Id.create(this.tmpPersonId,Person.class));            Plan tmpPl=p.getSelectedPlan();            Leg leg=PopulationUtils.createAndAddLeg(((Plan)tmpPl),(String)TransportMode.car);            leg.setDepartureTime(convertTime(this.tmpTabs[3]));            Coord tmpCoord2;            if ((this.tmpTabs[7].equals("H")) && this.tmpGotH) {              tmpCoord2=this.tmpHome;            } else             if ((this.tmpTabs[7].equals("H")) && !this.tmpGotH) {              tmpCoord2=getRandomCoordInZone(this.tmpTabs[9]);              this.tmpHome=tmpCoord2;              this.tmpGotH=true;            } else {              tmpCoord2=getRandomCoordInZone(this.tmpTabs[9]);              this.count2+=1;              System.out.println(personId);            }            final Coord coord=tmpCoord2;            Activity lastAct=PopulationUtils.createAndAddActivityFromCoord(((Plan)tmpPl),(String)this.tmpTabs[7],coord);          }          Person p=PopulationUtils.getFactory().createPerson(Id.create(personId,Person.class));          Plan pl=PopulationUtils.createPlan(p);          endTime=convertTime(tabs[3]);          this.tmpType=tabs[4];          Coord tmpCoord3;          if (!this.tmpHhldId.equals(hhldId) && this.tmpType.equals("H")) {            this.tmpHome=getRandomCoordInZone(tabs[6]);            tmpCoord3=this.tmpHome;            this.tmpGotH=true;          } else           if (this.tmpHhldId.equals(hhldId) && this.tmpType.equals("H")) {            tmpCoord3=this.tmpHome;            this.tmpGotH=true;          } else           if (this.tmpHhldId.equals(hhldId) && !this.tmpType.equals("H")) {            tmpCoord3=getRandomCoordInZone(tabs[6]);            this.tmpGotH=true;            this.count1+=1;            System.out.println(personId);          } else {            tmpCoord3=getRandomCoordInZone(tabs[6]);            this.tmpGotH=false;            this.count1+=1;            System.out.println(personId);          }          final Coord coord=tmpCoord3;          Activity homeAct=PopulationUtils.createAndAddActivityFromCoord(pl,(String)tabs[4],coord);          homeAct.setEndTime(convertTime(tabs[3]));          p.addPlan(pl);          this.pop.addPerson(p);        }        this.tmpPersonId=personId;        this.tmpHhldId=hhldId;        this.tmpEndTime=endTime;        this.tmpTabs=tabs;        this.tmpTripId=tripId;        if (this.tmpTabs[4].equals("L")) {          this.tmpTabs[4]="H";        }        if (this.tmpTabs[7].equals("L")) {          this.tmpTabs[7]="H";        }      } catch (      Exception e) {        e.printStackTrace();      }    }  } else {    Person p=this.pop.getPersons().get(Id.create(this.tmpPersonId,Person.class));    Plan tmpPl=(Plan)p.getSelectedPlan();    Leg leg=PopulationUtils.createAndAddLeg(tmpPl,(String)TransportMode.car);    leg.setDepartureTime(convertTime(this.tmpTabs[3]));    Coord tmpCoord2;    if ((this.tmpTabs[7].equals("H")) && this.tmpGotH) {      tmpCoord2=this.tmpHome;    } else     if ((this.tmpTabs[7].equals("H")) && !this.tmpGotH) {      tmpCoord2=getRandomCoordInZone(this.tmpTabs[9]);      this.tmpHome=tmpCoord2;      this.tmpGotH=true;    } else {      tmpCoord2=getRandomCoordInZone(this.tmpTabs[9]);      this.count2+=1;      System.out.println(this.tmpPersonId);    }    final Coord coord=tmpCoord2;    Activity lastAct=PopulationUtils.createAndAddActivityFromCoord(tmpPl,(String)this.tmpTabs[7],coord);    System.out.println("# of chains that do not start at home: " + this.count1);    System.out.println("# of chains that do not end at home: " + this.count2);  }}  }
class C{  AnimatedSprite(final Sprite[] frames,final int delay){  this(frames,delay,true);}  }
class C{  private void preProcessTweet(Tweet tweet){  String rawTweet=tweet.getRawTweetString();  rawTweet=rawTweet.toLowerCase();  rawTweet=rawTweet.replaceAll("@[^\\s]+","");  rawTweet=rawTweet.replaceAll("((www\\.[^\\s]+)|(https?://[^\\s]+))","");  tweet.setTweetString(rawTweet.trim());}  }
class C{  @Override protected void processState(LIRInstruction op,LIRFrameState info,RegStackValueSet values){  if (!info.hasDebugInfo()) {    info.initDebugInfo(frameMap,!op.destroysCallerSavedRegisters() || !frameMap.getRegisterConfig().areAllAllocatableRegistersCallerSaved());  }  ReferenceMapBuilder refMap=frameMap.newReferenceMapBuilder();  frameMap.addLiveValues(refMap);  values.addLiveValues(refMap);  info.debugInfo().setReferenceMap(refMap.finish(info));}  }
class C{  private List<QoSRule> createQoSRules(JsonObject qosSettings){  List<QoSRule> rules=new ArrayList<>();  if (qosSettings.containsKey(JSON_FIELD_RULES)) {    JsonObject jsonRules=qosSettings.getJsonObject(JSON_FIELD_RULES);    for (    String urlPatternRegExp : jsonRules.fieldNames()) {      log.debug("Creating a new QoS rule object for URL pattern: " + urlPatternRegExp);      JsonObject jsonRule=jsonRules.getJsonObject(urlPatternRegExp);      Pattern urlPattern=Pattern.compile(urlPatternRegExp);      QoSRule rule=new QoSRule(urlPattern);      boolean addRule=false;      if (jsonRule.containsKey("reject")) {        addRule=true;        rule.setReject(jsonRule.getDouble("reject"));      }      if (jsonRule.containsKey("warn")) {        addRule=true;        rule.setWarn(jsonRule.getDouble("warn"));      }      if (addRule) {        rules.add(rule);      } else {        log.warn("No or unknown QoS action defined for rule {}. This rule will not be loaded!",urlPatternRegExp);      }    }  }  return rules;}  }
class C{  public void resetData(List<String> names,List<double[]> data,int bins){  if (names.size() != data.size()) {    throw new IllegalStateException("Number of names for series does not" + "equal the number of data series.");  }  Iterator<double[]> dataIterator=data.iterator();  for (  String str : names) {    addSeries(str,dataIterator.next(),bins);  }  dataMap.keySet().retainAll(names);}  }
class C{  public static void registerDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener){  getFileDownloadManager().registerDownloadStatusListener(onFileDownloadStatusListener);}  }
class C{  private byte[] preparePacket(Contact c){  final UserInfo user=c.getUserInfo();  final List<PhoneInfo> phoneInfo=c.getPhoneInfo();  final long uid=user.getUserId();  final String name=user.getCompleteName();  final String message=c.getInfo();  String number="";  if (phoneInfo.size() > 0) {    number=phoneInfo.get(0).getPhoneNumber();  }  return preparePacket(PHONE,uid,number,name,message);}  }
class C{  public SolrQuery addOrUpdateSort(SortClause sortClause){  if (sortClauses != null) {    for (int index=0; index < sortClauses.size(); index++) {      SortClause existing=sortClauses.get(index);      if (existing.getItem().equals(sortClause.getItem())) {        sortClauses.set(index,sortClause);        serializeSorts();        return this;      }    }  }  return addSort(sortClause);}  }
class C{  public Package(ClassPath sourcePath,ClassPath binaryPath,Identifier pkg) throws IOException {  if (pkg.isInner())   pkg=Identifier.lookup(pkg.getQualifier(),pkg.getFlatName());  this.sourcePath=sourcePath;  this.binaryPath=binaryPath;  this.pkg=pkg.toString().replace('.',File.separatorChar);}  }
class C{  public static double mean(double[] x){  double m=0;  int count=x.length;  for (  double aX : x) {    if (Double.isNaN(aX)) {      count--;    } else {      m+=aX;    }  }  return m / (double)count;}  }
class C{  public String exportXml() throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  exportXml(outputStream);  return outputStream.toString();}  }
class C{  @Override public IBinder onBind(Intent intent){  return mMessenger.getBinder();}  }
class C{  public boolean canDrop(){  return !system;}  }
class C{  protected void blockCarsByTrackTwoColumn(PrintWriter file,Train train,List<Car> carList,List<RouteLocation> routeList,RouteLocation rl,boolean printHeader,boolean isManifest){  index=0;  int lineLength=getLineLength(isManifest);  List<Track> tracks=rl.getLocation().getTrackByNameList(null);  List<String> trackNames=new ArrayList<String>();  clearUtilityCarTypes();  if (printHeader) {    printCarHeader(file,isManifest,!IS_TWO_COLUMN_TRACK);  }  for (  Track track : tracks) {    if (trackNames.contains(splitString(track.getName()))) {      continue;    }    trackNames.add(splitString(track.getName()));    boolean found=false;    for (    RouteLocation rld : routeList) {      if (rld != rl && !found) {        continue;      }      found=true;      for (int k=0; k < carList.size(); k++) {        Car car=carList.get(k);        if (car.getTrack() != null && car.getRouteLocation() == rl && ((car.getRouteDestination() == rld && !car.isCaboose() && !car.hasFred()) || (rld == routeList.get(routeList.size() - 1) && (car.isCaboose() || car.hasFred())))) {          if (Setup.isSortByTrackEnabled() && !splitString(track.getName()).equals(splitString(car.getTrackName()))) {            continue;          }          pickupCars=true;          cars++;          if (car.getLoadType().equals(CarLoad.LOAD_TYPE_EMPTY)) {            emptyCars++;          }          String s;          if (car.isUtility()) {            s=pickupUtilityCars(carList,car,isManifest,!IS_TWO_COLUMN_TRACK);            if (s == null) {              continue;            }            s=s.trim();          } else {            s=pickupCar(car,isManifest,!IS_TWO_COLUMN_TRACK).trim();          }          s=padAndTruncateString(s,lineLength / 2,true);          if (isLocalMove(car)) {            String sl=appendSetoutString(s,carList,car.getRouteDestination(),car,isManifest,!IS_TWO_COLUMN_TRACK);            if (!sl.equals(s)) {              s=sl;              carList.remove(car);              k--;            } else {              s=padAndTruncateString(s + VERTICAL_LINE_CHAR,getLineLength(isManifest),true);            }          } else {            s=appendSetoutString(s,carList,rl,true,isManifest,!IS_TWO_COLUMN_TRACK);          }          addLine(file,s);        }      }    }    if (!Setup.isSortByTrackEnabled()) {      break;    }  }  while (index < carList.size()) {    String s=padString("",lineLength / 2);    s=appendSetoutString(s,carList,rl,false,isManifest,!IS_TWO_COLUMN_TRACK);    String test=s.trim();    if (test.length() > 1) {      addLine(file,s);    }  }}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.673 -0500",hash_original_method="BAF04F24660E6C5095996548EBED85A1",hash_generated_method="2776557779CA2C278A208A7575A76BF4") public ServerKeyExchange(BigInteger par1,BigInteger par2,BigInteger par3,byte[] hash){  this.par1=par1;  this.par2=par2;  this.par3=par3;  this.hash=hash;  bytes1=toUnsignedByteArray(this.par1);  bytes2=toUnsignedByteArray(this.par2);  length=4 + bytes1.length + bytes2.length;  if (hash != null) {    length+=2 + hash.length;  }  if (par3 == null) {    bytes3=null;    return;  }  bytes3=toUnsignedByteArray(this.par3);  length+=2 + bytes3.length;}  }
class C{  public GoogleRelayedCandidateDelegate(GoogleTurnCandidateHarvest turnCandidateHarvest,String username) throws SocketException {  this.turnCandidateHarvest=turnCandidateHarvest;  this.username=username;  this.turnCandidateHarvest.harvester.getStunStack().addOldIndicationListener(this.turnCandidateHarvest.hostCandidate.getTransportAddress(),this);}  }
class C{  private static INaviModule findModule(final List<INaviModule> list,final int moduleId) throws MaybeNullException {  for (  final INaviModule module : list) {    if (module.getConfiguration().getId() == moduleId) {      return module;    }  }  throw new MaybeNullException();}  }
class C{  public void render(Graphics2D g,Shape shape,boolean replaceColorWithGradient){  if (matted) {    if (stroke instanceof BasicStroke) {      g.setStroke(new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f));      g.setPaint(mattingPaint);      g.draw(shape);    }  }  if (!isClear(fillPaint)) {    g.setStroke(OMGraphicConstants.BASIC_STROKE);    if (replaceColorWithGradient) {      g.setPaint(getGradientPaintForShape(shape,fillPaint));    } else {      g.setPaint(fillPaint);    }    g.fill(shape);    g.draw(shape);    if (fillPattern != null && fillPattern != fillPaint) {      g.setPaint(fillPattern);      g.fill(shape);    }  }  if (linePaint != fillPaint) {    g.setStroke(getStroke());    if (replaceColorWithGradient) {      g.setPaint(getGradientPaintForShape(shape,linePaint));    } else {      g.setPaint(linePaint);    }    g.draw(shape);  }}  }
class C{  public static void fail(String errorMessage){  if (verbose) {    log("fail(" + errorMessage + ")");  }  assertBool(false,errorMessage);}  }
class C{  public boolean isIgnorableWhitespace(Text node){  boolean isIgnorable=false;  return isIgnorable;}  }
class C{  @Override protected void finalize(){  try {    if (mWindow != null) {      if (mStackTrace != null) {        String sql=mQuery.getSql();        int len=sql.length();        Logger.e(TAG,"Finalizing a Cursor that has not been deactivated or closed. " + "database = " + mQuery.getDatabase().getLabel() + ", table = "+ mEditTable+ ", query = "+ sql.substring(0,(len > 1000) ? 1000 : len),mStackTrace);      }      close();    }  }  finally {    super.finalize();  }}  }
class C{  public boolean equals(Coordinate p0,Coordinate p1){  return orig.equals2D(p0) && sym.orig.equals(p1);}  }
class C{  protected static List<String> detectClassPathResourcesToStage(ClassLoader classLoader){  if (!(classLoader instanceof URLClassLoader)) {    String message=String.format("Unable to use ClassLoader to detect classpath elements. " + "Current ClassLoader is %s, only URLClassLoaders are supported.",classLoader);    LOG.error(message);    throw new IllegalArgumentException(message);  }  List<String> files=new ArrayList<>();  for (  URL url : ((URLClassLoader)classLoader).getURLs()) {    try {      files.add(new File(url.toURI()).getAbsolutePath());    } catch (    IllegalArgumentException|URISyntaxException e) {      String message=String.format("Unable to convert url (%s) to file.",url);      LOG.error(message);      throw new IllegalArgumentException(message,e);    }  }  return files;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isExactMatch(){  return exactMatch;}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,String value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newStringResource(resourceId,value));}  }
class C{  public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){  if (objs == null || objs.isEmpty())   return "";  final Iterator<T> iter=objs.iterator();  final StringBuilder buffer=new StringBuilder();  while (iter.hasNext()) {    final T obj=iter.next();    if (notEmpty(obj)) {      if (buffer.length() != 0) {        buffer.append(iter.hasNext() ? delimiter : lastDelimiter);      }      buffer.append(Strings.toString(obj));    }  }  return buffer.toString();}  }
class C{  public static void readLines(String resourcePath,ClassLoader classLoader,Class<?> clazz,Consumer<String> lineProcessor) throws IOException {  try (InputStream stream=IoUtil.getResourceAsStream(resourcePath,classLoader,clazz,null,null)){    IoUtil.readLines(stream,lineProcessor);  } }  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE:setStructuralType((TStructuralType)null);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF:setActualThisTypeRef((ParameterizedTypeRef)null);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy(DEFINED_TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public char nextKeyTyped(){synchronized (keyLock) {    return keysTyped.removeLast();  }}  }
class C{  public void updateBigDecimal(String columnName,BigDecimal x) throws SQLException {  checkUpdatable();  getField(columnName).setBigDecimal(x);}  }
class C{  public void recover(){  final IFile resource=getFile();  if (resource.exists()) {    try {      IMarker[] foundMarkers=resource.findMarkers(TLC_CRASHED_MARKER,false,IResource.DEPTH_ZERO);      if (foundMarkers.length == 0) {        return;      }      for (int i=0; i < foundMarkers.length; i++) {        foundMarkers[i].delete();      }      foundMarkers=resource.findMarkers(TLC_MODEL_IN_USE_MARKER,false,IResource.DEPTH_ZERO);      for (int i=0; i < foundMarkers.length; i++) {        foundMarkers[i].delete();      }    } catch (    CoreException shouldNotHappen) {      TLCActivator.logError(shouldNotHappen.getMessage(),shouldNotHappen);    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean signCheck(String publicKey,BaseParam params) throws UnsupportedEncodingException, CommonsException {  if (StringUtils.isEmpty(params.getSign())) {    throw new CommonsException(ErrorType.SYS0002);  }  params.setSign(URLDecoder.decode(new String(Base64.decodeBase64(params.getSign())),SignatureConstant.CHARSET_UTF8));  return params.isSignValid(publicKey);}  }
class C{  public static void saveBmp(Bitmap src,String fileName) throws ImageSaveException {  try {    BitmapUtil.save(src,fileName);  } catch (  IOException e) {    throw new ImageSaveException(e);  }}  }
class C{  public Graphics create(){  return new SVGGraphics2D(this);}  }
class C{  public String dump(Object data){  List<Object> list=new ArrayList<Object>(1);  list.add(data);  return dumpAll(list.iterator());}  }
class C{  @GET @Produces(MediaType.TEXT_PLAIN) @Description("Terminates a user session.") @Path("/logout") public String logout(@Context HttpServletRequest req){  HttpSession session=req.getSession(true);  session.removeAttribute(AuthFilter.USER_ATTRIBUTE_NAME);  session.invalidate();  return "You have logged out.";}  }
class C{  private void stateNoData(){  Log.d(TAG,"Santa is offline.");  updateNavigation();  scheduleUIUpdate();  if (mHaveGooglePlayServices && mCastManager != null && !mCastManager.isConnected()) {    setCastDisabled(true);  }  final long time=SantaPreferences.getCurrentTime();  AbstractLaunch launchSanta=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (time < OFFLINE_SANTA_DEPARTURE) {    launchSanta.setState(AbstractLaunch.STATE_LOCKED);    startCountdown(OFFLINE_SANTA_DEPARTURE);    final long notificationTime=SantaPreferences.getAdjustedTime(OFFLINE_SANTA_DEPARTURE);    SantaNotificationBuilder.ScheduleSantaNotification(getApplicationContext(),notificationTime,NotificationConstants.NOTIFICATION_TAKEOFF);  } else   if (time >= OFFLINE_SANTA_DEPARTURE && time < OFFLINE_SANTA_FINALARRIVAL) {    stopCountdown();    enableTrackerMode(false);    launchSanta.setState(AbstractLaunch.STATE_DISABLED);    showStatus(R.string.contacting_santa);  } else {    stopCountdown();    enableTrackerMode(false);    launchSanta.setState(AbstractLaunch.STATE_FINISHED);  }}  }
class C{  public final Boolean isRuntimeModelDataStoreAtSource(){  return m_isRuntimeModelDataStoreAtSource;}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public void validate(Password password){  if (changedNumber == 0) {    return;  }  String oldPassword=password.getOldPassword();  String newPassword=password.getPassword();  if (oldPassword == null) {    throw BadRequestException.badRequests.passwordInvalidOldPassword();  }  int gap=StringUtils.getLevenshteinDistance(oldPassword,newPassword);  _log.info(MessageFormat.format("expect >= {0}",changedNumber));  if (gap >= changedNumber) {    _log.info(MessageFormat.format("pass: real diff = {0}",gap));    return;  } else {    _log.info(MessageFormat.format("fail: real diff = {0}",gap));    throw BadRequestException.badRequests.passwordInvalidChangeNumber(changedNumber);  }}  }
class C{  private boolean applyNoSchedule(MInvoice invoice){  deleteInvoicePaySchedule(invoice.getC_Invoice_ID(),invoice.get_TrxName());  if (invoice.getC_PaymentTerm_ID() != getC_PaymentTerm_ID())   invoice.setC_PaymentTerm_ID(getC_PaymentTerm_ID());  if (invoice.isPayScheduleValid())   invoice.setIsPayScheduleValid(false);  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.714 -0500",hash_original_method="82D8655C49413B091F33E67A02E6B20F",hash_generated_method="F42AA45B9945F1794A34A616DE3A9D73") public static String stripAnchor(String url){  int anchorIndex=url.indexOf('#');  if (anchorIndex != -1) {    return url.substring(0,anchorIndex);  }  return url;}  }
class C{  public StatusDetail withoutDetail(final String key){  final LinkedHashMap<String,String> newDetails=new LinkedHashMap<>(details);  newDetails.remove(key);  return statusDetail(name,status,message,newDetails);}  }
class C{  private void testGetBusinessObjectDataVersions(List<String> subPartitionValues,Integer businessObjectFormatVersion,Integer businessObjectDataVersion,boolean useSsl) throws IOException, JAXBException, URISyntaxException {  uploaderWebClient.getRegServerAccessParamsDto().setUseSsl(useSsl);  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey();  businessObjectDataKey.setBusinessObjectFormatVersion(businessObjectFormatVersion);  businessObjectDataKey.setSubPartitionValues(subPartitionValues);  businessObjectDataKey.setBusinessObjectDataVersion(businessObjectDataVersion);  BusinessObjectDataVersions businessObjectDataVersions=uploaderWebClient.getBusinessObjectDataVersions(businessObjectDataKey);  assertNotNull("businessObjectDataVersions",businessObjectDataVersions);}  }
class C{  public void testPosNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={-1,1,-126,59,103,-2,-11,-7,-3,-33,-57,-3,-5,-5,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private TagLibFactory(String saxParser,TagLib lib,Resource res,Identification id) throws TagLibException {  this.id=id;  this.lib=lib == null ? new TagLib() : lib;  Reader r=null;  try {    InputSource is=new InputSource(r=IOUtil.getReader(res.getInputStream(),(Charset)null));    is.setSystemId(res.getPath());    init(saxParser,is);  } catch (  IOException e) {    throw new TagLibException(e);  } finally {    IOUtil.closeEL(r);  }}  }
class C{  public void printRuleSetForHumans(final EvolutionState state,final int log){  printRuleSetForHumans(state,log,Output.V_VERBOSE);}  }
class C{  public static void testSetCommands(Map<Integer,Command> testCommands){  ALL_COMMANDS.put(Version.TEST_VERSION,testCommands);}  }
class C{  public long restartTime(long now){  if (mNumFailed == 0) {    return now;  }  if (mRetryAfter > 0) {    return mLastMod + mRetryAfter;  }  return mLastMod + Constants.RETRY_FIRST_DELAY * (1000 + mFuzz) * (1 << (mNumFailed - 1));}  }
class C{  private void translateLayer(MapLayer layer){  if (!(layer instanceof TileLayer)) {    return;  }  TileLayer tileLayer=(TileLayer)layer;  for (int y=0; y < tileLayer.getHeight(); y++) {    for (int x=0; x < tileLayer.getWidth(); x++) {      Tile tile=tileLayer.getTileAt(x,y);      if (tile != null) {        tile=translateTile(tile);        tileLayer.setTileAt(x,y,tile);      }    }  }}  }
class C{  public double v2(){  return v2;}  }
class C{  public static boolean is_system(SootMethod m){  Project p=Project.v();  SootClass c=m.getDeclaringClass();  return !p.isSrcClass(c) && !p.isLibClass(c);}  }
class C{  public void cancelAll(){  services.cancelAll();}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void run1(){  log.info("Starting a run using the same network change events file for all iterations.");  Config config=ConfigUtils.loadConfig(configFile);  config.controler().setOverwriteFileSetting(OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles);  config.controler().setOutputDirectory(outputDirectory);  config.network().setTimeVariantNetwork(true);  config.network().setChangeEventsInputFile(networkChangeEventsFile);  Controler controler=new Controler(config);  controler.run();}  }
class C{  @Override public final void perform(IR ir){  ir.desiredSSAOptions=new SSAOptions();  ir.desiredSSAOptions.setScalarsOnly(true);  ir.desiredSSAOptions.setBackwards(false);  ir.desiredSSAOptions.setInsertUsePhis(false);  if (!ir.HIRInfo.dominatorsAreComputed) {    dominators.perform(ir);    frontier.perform(ir);  }}  }
class C{  public void verifyCountsAndClear(int expectedRegistrations,int expectedUnregistrations){  assertEquals(expectedRegistrations,registrationCount);  assertEquals(expectedUnregistrations,unregistrationCount);  registrationCount=0;  unregistrationCount=0;}  }
class C{  @Override public void update(ILaunchConfigurationWorkingCopy launchConfig,IJavaProject javaProject,List<String> programArgs,List<String> vmArgs) throws CoreException {  if (!GWTNature.isGWTProject(javaProject.getProject())) {    return;  }  if (!GwtLaunchConfigurationProcessorUtilities.isSuperDevModeCodeServer(launchConfig)) {    return;  }  int srcArgIndex=getArgIndex(programArgs);  String srcDirs=null;  if (srcArgIndex >= 0) {    srcDirs=LaunchConfigurationProcessorUtilities.getArgValue(programArgs,srcArgIndex + 1);  }  if (StringUtilities.isEmpty(srcDirs)) {    srcDirs=getSrcDirectories(javaProject);  }  int insertionIndex=LaunchConfigurationProcessorUtilities.removeArgsAndReturnInsertionIndex(programArgs,srcArgIndex,true);  programArgs.add(insertionIndex,SRC_ARG);  programArgs.add(insertionIndex + 1,srcDirs);}  }
class C{  protected AbstractDescriptionWithError(IEObjectDescription delegate){  this.delegate=delegate;}  }
class C{  private int readObjectDataValues(final PdfObject pdfObject,int i,final byte[] raw,final int length){  int level=0;  if (isInlineImage) {    level=1;  }  while (true) {    if (i < length && raw[i] == 37) {      i=stripComment(length,i,raw);    }    if ((i >= length || (endPt != -1 && i >= endPt)) || (raw[i] == 101 && raw[i + 1] == 110 && raw[i + 2] == 100 && raw[i + 3] == 111) || (raw[i] == 's' && raw[i + 1] == 't' && raw[i + 2] == 'r' && raw[i + 3] == 'e' && raw[i + 4] == 'a' && raw[i + 5] == 'm')) {      break;    }    if (raw[i] == 60 && raw[i + 1] == 60) {      i++;      level++;    } else     if (raw[i] == 62 && i + 1 != length && raw[i + 1] == 62) {      i++;      level--;      if (level == 0) {        break;      }    } else     if (raw[i] == 47 && (raw[i + 1] == 47 || raw[i + 1] == 32)) {      i++;    } else     if (raw[i] == 47) {      i++;      final int keyStart=i;      final int keyLength=StreamReaderUtils.findDictionaryEnd(i,raw,length);      i+=keyLength;      if (i == length) {        break;      }      boolean isStringPair=false;      if (pdfObject.getID() == PdfDictionary.BDC) {        isStringPair=isStringPair(i,raw,isStringPair);      }      final int type=pdfObject.getObjectType();      if (debugFastCode) {        System.out.println("type=" + type + ' '+ ' '+ pdfObject.getID()+ " chars="+ (char)raw[i - 1]+ (char)raw[i]+ (char)raw[i + 1]+ ' '+ pdfObject+ " i="+ i+ ' '+ isStringPair);      }      final boolean isMap=isMapObject(pdfObject,i,raw,length,keyStart,keyLength,isStringPair,type);      if (raw[i] == 47 || raw[i] == 40 || (raw[i] == 91 && raw[i + 1] != ']')) {        i--;      }      if (pdfKeyType == -1) {        i=ObjectUtils.handleUnknownType(i,raw,length);      }      if (PDFkeyInt == -1 || pdfKeyType == -1) {        if (debugFastCode) {          System.out.println(padding + pdfObject.getObjectRefAsString() + " =================Not implemented="+ PDFkey+ " pdfKeyType="+ pdfKeyType);        }      } else {        i=setValue(pdfObject,i,raw,length,isMap);      }    }    i++;  }  return i;}  }
class C{  public static LikeExpression notLike(Expression left,Expression right){  return new LikeExpression(left,right,true);}  }
class C{  @SkipValidation @Actions({@Action(value="/searchNotices-showNotice"),@Action(value="/public/searchNotices-showNotice")}) public String showNotice() throws IOException {  final PtNotice ptNotice=(PtNotice)getPersistenceService().find("from PtNotice notice where noticeNo=?",noticeNumber);  if (ptNotice == null) {    addActionError(getText("DocMngr.file.unavailable"));    return INDEX;  }  if (ptNotice != null && ptNotice.getFileStore() != null) {    final FileStoreMapper fsm=ptNotice.getFileStore();    final File file=fileStoreService.fetch(fsm,FILESTORE_MODULE_NAME);    final byte[] bFile=FileUtils.readFileToByteArray(file);    final InputStream myInputStream=new ByteArrayInputStream(bFile);    fileStream=myInputStream;    fileName=new StringBuffer(ptNotice.getBasicProperty().getUpicNo()).append("-").append(ptNotice.getNoticeType()).toString();    contentType="application/pdf";    contentLength=Long.valueOf(file.length());  }  return SUCCESS;}  }
class C{  public static SelectClause create(StreamSelector streamSelector,String... propertyNames){  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();  for (  String name : propertyNames) {    selectList.add(new SelectClauseExpression(new PropertyValueExpression(name)));  }  return new SelectClause(streamSelector,selectList);}  }
class C{  public void generateOptimizedGreaterThanOrEqual(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  int promotedTypeID=(this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;  if (promotedTypeID == TypeIds.T_int) {    if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {      this.right.generateCode(currentScope,valueRequired);      return;    }    if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public void addServer(Server theServer){  if (theServer == null) {    throw new IllegalArgumentException("The rule cannot be null.");  } else {    getServers().add(theServer);  }}  }
class C{  private CSVWriter(char separator,char quotechar){  this(separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public JaclInterpreterFactory(){}  }
class C{  private void _protectFromEviction(){  DirectoryPage dp=this;  while (dp != null) {    dp.referenceCount++;    dp=dp.getParentDirectory();  }}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y){  canvas.drawCircle(x,y,size,paint);}  }
class C{  public void propertyRemoved(String name) throws DOMException {  ((SVGOMDocument)ownerDocument).overrideStylePropertyRemoved(SVGStylableElement.this,name);}  }
class C{  public static CommonTermsQueryBuilder commonTermsQuery(String name,Object text){  return new CommonTermsQueryBuilder(name,text);}  }
class C{  protected String e(String s) throws Exception {  return fmt.format(parser.parse(s,null));}  }
class C{  public static int[][] createSparseMatrixWithPivotColumn(CellLayout iconLayout,int pivotX,int pivotY){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  int[][] matrix=createFullMatrix(iconLayout.getCountX() + 1,iconLayout.getCountY());  for (int i=0; i < iconParent.getChildCount(); i++) {    View cell=iconParent.getChildAt(i);    if (!cell.isFocusable()) {      continue;    }    int cx=((CellLayout.LayoutParams)cell.getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)cell.getLayoutParams()).cellY;    if (pivotX < 0) {      matrix[cx - pivotX][cy]=i;    } else {      matrix[cx][cy]=i;    }  }  if (pivotX < 0) {    matrix[0][pivotY]=PIVOT;  } else {    matrix[pivotX][pivotY]=PIVOT;  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  private OrderedCollection<PortChangeEvent> handlePortStatusDelete(OFPortDesc delPort){  OrderedCollection<PortChangeEvent> events=new LinkedHashSetWrapper<PortChangeEvent>();  lock.writeLock().lock();  try {    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OFPortDesc prevPort=portsByNumber.get(delPort.getPortNo());    if (prevPort == null) {      prevPort=portsByName.get(delPort.getName());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    } else     if (prevPort.getName().equals(delPort.getName())) {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(delPort,PortChangeType.DELETE));    } else {      newPortByNumber.remove(delPort.getPortNo());      events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      prevPort=portsByName.get(delPort.getName().toLowerCase());      if (prevPort != null) {        newPortByNumber.remove(prevPort.getPortNo());        events.add(new PortChangeEvent(prevPort,PortChangeType.DELETE));      }    }    updatePortsWithNewPortsByNumber(newPortByNumber);    return events;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void deviceAliasRename(String currentAlias,String newAlias) throws NetworkDeviceControllerException {  if (lastPrompt != SSHPrompt.MDS_CONFIG_DEVICE_ALIAS) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_DEVICE_ALIAS.toString());  }  String invalidCommand=MDSDialogProperties.getString("MDSDialog.invalidCommand");  String illegalName=MDSDialogProperties.getString("MDSDialog.deviceAlias.illegal.name");  String notPresent=MDSDialogProperties.getString("MDSDialog.not.present");  String alreadyPresent=MDSDialogProperties.getString("MDSDialog.already.present");  String alreadyInUse=MDSDialogProperties.getString("MDSDialog.already.in.use");  String notExists=MDSDialogProperties.getString("MDSDialog.not.existing");  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_DEVICE_ALIAS};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.config.deviceAliasRename.cmd"),currentAlias,newAlias);  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.indexOf(invalidCommand) >= 0 || line.indexOf(illegalName) >= 0 || line.indexOf(notPresent) >= 0 || line.indexOf(alreadyInUse) >= 0 || line.indexOf(notExists) >= 0 || line.indexOf(alreadyPresent) >= 0) {      throw new NetworkDeviceControllerException(line + " - " + "Failed to rename alias: "+ currentAlias+ " / "+ newAlias);    }  }}  }
class C{  private CMessageBox(){}  }
class C{  private void reportStatement(Resource subject,IRI predicate,Value object) throws RDFParseException, RDFHandlerException {  Statement st=createStatement(subject,predicate,object);  if (rdfHandler != null) {    rdfHandler.handleStatement(st);  }}  }
class C{  public void itemStateChanged(ItemEvent evt){  fireEditingStopped();}  }
class C{  public MethodDescriptor toMethodDescriptor(){  return DescriptorFactory.instance().getMethodDescriptor(getSlashedClassName(),method.getName(),method.getSignature(),method.isStatic());}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public void removeHeaderView(View v){  AdapterWithHeader adapter=(AdapterWithHeader)super.getAdapter();  if (null != adapter) {    adapter.removeHeaderView(v);  }}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.ContentMaturityRatingType buildContentMaturityRatingType(String agency,String rating,org.smpte_ra.schemas.st2067_2_2016.ContentMaturityRatingType.Audience audience) throws URISyntaxException {  org.smpte_ra.schemas.st2067_2_2016.ContentMaturityRatingType contentMaturityRatingType=new org.smpte_ra.schemas.st2067_2_2016.ContentMaturityRatingType();  if (!agency.matches("^[a-zA-Z0-9._-]+") == true) {    throw new URISyntaxException("Invalid URI","The ContentMaturityRating agency %s does not follow the syntax of a valid URI (a-z, A-Z, 0-9, ., _, -)");  }  contentMaturityRatingType.setAgency(agency);  contentMaturityRatingType.setRating(rating);  contentMaturityRatingType.setAudience(audience);  return contentMaturityRatingType;}  }
class C{  public RadialGradientPaint(float cx,float cy,float radius,float fx,float fy,float[] fractions,Color[] colors){  this(new Point2D.Float(cx,cy),radius,new Point2D.Float(fx,fy),fractions,colors,NO_CYCLE,SRGB);}  }
class C{  public UtilizationModelStochastic(){  setHistory(new HashMap<Double,Double>());  setRandomGenerator(new Random());}  }
class C{  public synchronized void reloadFile(){  try {    System.err.println("Reload " + filename);    reader.close();    File file=new File(filename);    FileInputStream in=new FileInputStream(file);    reader=new BufferedReader(new InputStreamReader(in));  } catch (  IOException e) {    System.err.println("Exception: " + e);  }}  }
class C{  public RichText withLink(String link){  this.link=link;  return this;}  }
class C{  public static PrivateKey createNew(boolean compressed){  ECKeyPairGenerator generator=new ECKeyPairGenerator();  ECKeyGenerationParameters keygenParams=new ECKeyGenerationParameters(domain,secureRandom);  generator.init(keygenParams);  AsymmetricCipherKeyPair keypair=generator.generateKeyPair();  ECPrivateKeyParameters privParams=(ECPrivateKeyParameters)keypair.getPrivate();  ECPublicKeyParameters pubParams=(ECPublicKeyParameters)keypair.getPublic();  return new PrivateKey(privParams.getD(),compressed,pubParams.getQ().getEncoded(compressed));}  }
class C{  public Script createScript(){  ScriptImpl script=new ScriptImpl();  return script;}  }
class C{  public static void addKey(Object key,Document doc){  if (key instanceof String) {    doc.add(new StringField(KEY_FIELD,(String)key,Store.YES));  } else {    doc.add(new StringField(KEY_FIELD,keyToBytes(key),Store.YES));  }}  }
class C{  public boolean isCompressionSupported(){  return compressionSupported;}  }
class C{  public static URI id(RelatedResourceRep ref){  return ref != null ? ref.getId() : null;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public int editCommits(int handlerNo,String path){  GitRebaseEditorHandler editor=getHandler(handlerNo);  GitHandler handler=editor.getHandler();  handler.suspendWriteLock();  try {    return editor.editCommits(path);  }  finally {    handler.resumeWriteLock();  }}  }
class C{  @Override public void process(K tuple){  processTuple(tuple);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mHandler=new Handler();  setContentView(R.layout.voice_recognition);  Button speakButton=(Button)findViewById(R.id.btn_speak);  mList=(ListView)findViewById(R.id.list);  mSupportedLanguageView=(Spinner)findViewById(R.id.supported_languages);  PackageManager pm=getPackageManager();  List<ResolveInfo> activities=pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH),0);  if (activities.size() != 0) {    speakButton.setOnClickListener(this);  } else {    speakButton.setEnabled(false);    speakButton.setText("Recognizer not present");  }  refreshVoiceSettings();}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint contentConstraint=toContentConstraint(constraint);  LengthConstraintType w=contentConstraint.getWidthConstraintType();  LengthConstraintType h=contentConstraint.getHeightConstraintType();  Size2D contentSize=null;  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeNN(g2);    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      contentSize=new Size2D(contentConstraint.getWidth(),contentConstraint.getHeight());    }  }  assert contentSize != null;  return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));}  }
class C{  public void testSetProperty(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  instance.setProperty(STRING_PROPERTY,NEW_VALUE);  instance.setProperty(MAPPED_STRING,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getProperty(STRING_PROPERTY));  assertEquals(NEW_VALUE,instance.getProperty(MAPPED_STRING));  assertNull(instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,OLD_VALUE);  assertEquals(OLD_VALUE,instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getProperty(NEW_PROPERTY));}  }
class C{  private List<RecipeImpl> loadRecipes(String recipesPath) throws ServerException {  try (InputStream is=getResource(recipesPath)){    return firstNonNull(GSON.fromJson(new InputStreamReader(is),new TypeToken<List<RecipeImpl>>(){    }.getType()),emptyList());  } catch (  IOException|JsonIOException|JsonSyntaxException e) {    throw new ServerException("Failed to get recipes from specified path " + recipesPath,e);  }}  }
class C{  private boolean invokerInHeavyWeightPopup(Component i){  if (i != null) {    Container parent;    for (parent=i.getParent(); parent != null; parent=parent.getParent()) {      if (parent instanceof Popup.HeavyWeightWindow) {        return true;      }    }  }  return false;}  }
class C{  protected void cleanSnapshots() throws InterruptedException {  HashSet<MemValue> processedSubjects=new HashSet<MemValue>();  HashSet<MemValue> processedPredicates=new HashSet<MemValue>();  HashSet<MemValue> processedObjects=new HashSet<MemValue>();  HashSet<MemValue> processedContexts=new HashSet<MemValue>();  int lastStmtPos;  Lock stReadLock=statementListLockManager.getReadLock();  try {    lastStmtPos=statements.size() - 1;  }  finally {    stReadLock.release();  }  int nextSnapshot=currentSnapshot;  for (int i=lastStmtPos; i >= 0; i--) {    Lock stWriteLock=statementListLockManager.getWriteLock();    try {      lastStmtPos=statements.size() - 1;      i=Math.min(i,lastStmtPos);      if (i >= 0) {        MemStatement st=statements.get(i);        if (st.getTillSnapshot() <= nextSnapshot) {          MemResource subj=st.getSubject();          if (processedSubjects.add(subj)) {            subj.cleanSnapshotsFromSubjectStatements(nextSnapshot);          }          MemIRI pred=st.getPredicate();          if (processedPredicates.add(pred)) {            pred.cleanSnapshotsFromPredicateStatements(nextSnapshot);          }          MemValue obj=st.getObject();          if (processedObjects.add(obj)) {            obj.cleanSnapshotsFromObjectStatements(nextSnapshot);          }          MemResource context=st.getContext();          if (context != null && processedContexts.add(context)) {            context.cleanSnapshotsFromContextStatements(nextSnapshot);          }          statements.remove(i);        }      }    }  finally {      stWriteLock.release();    }  }}  }
class C{  @Override protected void doAction(){  File exportFile=null;  try {    DExportCertificates dExportCertificates=null;    X509Certificate cert=null;    if (certFromConstructor == null) {      String alias=kseFrame.getSelectedEntryAlias();      dExportCertificates=new DExportCertificates(frame,alias,false);      cert=getCertificate(alias);    } else {      cert=certFromConstructor;      dExportCertificates=new DExportCertificates(frame,X509CertUtil.getCertificateAlias(cert),false);    }    dExportCertificates.setLocationRelativeTo(frame);    dExportCertificates.setVisible(true);    if (!dExportCertificates.exportSelected()) {      return;    }    exportFile=dExportCertificates.getExportFile();    boolean pemEncode=dExportCertificates.pemEncode();    byte[] encoded=null;    if (dExportCertificates.exportFormatX509()) {      if (pemEncode) {        encoded=X509CertUtil.getCertEncodedX509Pem(cert).getBytes();      } else {        encoded=X509CertUtil.getCertEncodedX509(cert);      }    } else     if (dExportCertificates.exportFormatPkcs7()) {      if (pemEncode) {        encoded=X509CertUtil.getCertEncodedPkcs7Pem(cert).getBytes();      } else {        encoded=X509CertUtil.getCertEncodedPkcs7(cert);      }    } else     if (dExportCertificates.exportFormatPkiPath()) {      encoded=X509CertUtil.getCertEncodedPkiPath(cert);    } else     if (dExportCertificates.exportFormatSpc()) {      encoded=X509CertUtil.getCertEncodedPkcs7(cert);    }    exportEncodedCertificate(encoded,exportFile);    JOptionPane.showMessageDialog(frame,res.getString("ExportTrustedCertificateAction.ExportCertificateSuccessful.message"),res.getString("ExportTrustedCertificateAction.ExportCertificate.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  FileNotFoundException ex) {    String message=MessageFormat.format(res.getString("ExportTrustedCertificateAction.NoWriteFile.message"),exportFile);    JOptionPane.showMessageDialog(frame,message,res.getString("ExportTrustedCertificateAction.ExportCertificate.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean hasPostParagraphToday(final String userId){  final long now=System.currentTimeMillis();  try {    final Query query=new Query().addSort(Keys.OBJECT_ID,SortDirection.DESCENDING).setCurrentPageNum(1).setPageSize(2).setFilter(CompositeFilterOperator.and(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.EQUAL,Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH),new PropertyFilter(Article.ARTICLE_AUTHOR_ID,FilterOperator.EQUAL,userId),new PropertyFilter(Article.ARTICLE_CREATE_TIME,FilterOperator.GREATER_THAN_OR_EQUAL,Times.getDayStartTime(now)),new PropertyFilter(Article.ARTICLE_CREATE_TIME,FilterOperator.LESS_THAN_OR_EQUAL,Times.getDayEndTime(now))));    final JSONObject result=articleRepository.get(query);    final List<JSONObject> journals=CollectionUtils.<JSONObject>jsonArrayToList(result.optJSONArray(Keys.RESULTS));    return journals.size() > 1;  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Check today paragraph post failed",e);    return true;  }}  }
class C{  public static final void writeLittleEndian(int value,byte[] array){  writeLittleEndian(value,array,0);}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeShort(value);}  }
class C{  public blink addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static Sector calcBoundingSector(SpatialReference srs,java.awt.geom.Point2D[] corners) throws IllegalArgumentException, WWRuntimeException {  if (null == srs) {    String message=Logging.getMessage("nullValue.SpatialReferenceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (null == corners) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Sector bbox=null;  try {    double minx=Double.MAX_VALUE, maxx=-Double.MAX_VALUE;    double miny=Double.MAX_VALUE, maxy=-Double.MAX_VALUE;    CoordinateTransformation ct=new CoordinateTransformation(srs,GDALUtils.createGeographicSRS());    for (    java.awt.geom.Point2D corner : corners) {      double[] point=ct.TransformPoint(corner.getX(),corner.getY());      if (null != point) {        minx=(point[0] < minx) ? point[0] : minx;        maxx=(point[0] > maxx) ? point[0] : maxx;        miny=(point[1] < miny) ? point[1] : miny;        maxy=(point[1] > maxy) ? point[1] : maxy;      }    }    bbox=Sector.fromDegrees(miny,maxy,minx,maxx);  } catch (  Throwable t) {    String error=GDALUtils.getErrorMessage();    String reason=(null != error && error.length() > 0) ? error : t.getMessage();    String message=Logging.getMessage("generic.ExceptionWhileTransformation",reason);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  return bbox;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  private static void writeJson() throws IOException {  OutputStream outputStream=new ByteArrayOutputStream();  ObjectMapper mapper=new ObjectMapper();  ObjectNode rootNode=mapper.createObjectNode();  rootNode.put("message","Hi");  ObjectNode childNode=rootNode.putObject("place");  childNode.put("name","World!");  mapper.writeValue(outputStream,childNode);  System.out.println(outputStream.toString());}  }
class C{  public GridVizPlotter(PlotterConfigurationModel settings){  super(settings);}  }
class C{  public void prepare(){  storageIndexingTreeReference=new AtomicReference<>(getNewStorageIndexingTree());  indexingTreeSavingFuture=executorService.scheduleWithFixedDelay(new IndexingTreeSavingTask(),TREE_CHECK_DELAY,TREE_CHECK_DELAY,TREE_CHECK_DELAY_TIME_UNIT);}  }
class C{  public static boolean isEmptyMessage(final int code){  return code == EMPTY_CODE;}  }
class C{  public boolean isFull(){  return getSlot(CONTENT_SLOT).isFull();}  }
class C{  public MultiCopyRestoreImageResponse restoreImageCopies(MultiCopyRestoreImageRequestParams request) throws RecoverPointException {  MultiCopyRestoreImageResponse response=new MultiCopyRestoreImageResponse();  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  RecoverPointBookmarkManagementUtils bookmarkManager=new RecoverPointBookmarkManagementUtils();  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  Set<String> wwnSet=request.getVolumeWWNSet();  if (wwnSet == null) {    throw RecoverPointException.exceptions.noWWNsFoundInRequest();  }  Set<String> unmappedWWNs=new HashSet<String>();  CreateBookmarkRequestParams mapRequest=new CreateBookmarkRequestParams();  mapRequest.setBookmark(request.getBookmark());  mapRequest.setVolumeWWNSet(wwnSet);  Map<String,RPConsistencyGroup> rpCGMap=bookmarkManager.mapCGsForWWNs(functionalAPI,mapRequest,unmappedWWNs);  if (!unmappedWWNs.isEmpty()) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(unmappedWWNs);  }  if (rpCGMap == null) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(wwnSet);  }  Set<RPConsistencyGroup> cgSetToEnable=new HashSet<RPConsistencyGroup>();  for (  String volume : rpCGMap.keySet()) {    cgSetToEnable.add(rpCGMap.get(volume));  }  ClusterUID siteToRestore=null;  for (  RPConsistencyGroup rpcg : cgSetToEnable) {    Set<RPCopy> copies=rpcg.getCopies();    for (    RPCopy copy : copies) {      if (siteToRestore == null) {        siteToRestore=copy.getCGGroupCopyUID().getGlobalCopyUID().getClusterUID();      } else       if (siteToRestore.getId() != copy.getCGGroupCopyUID().getGlobalCopyUID().getClusterUID().getId()) {        throw RecoverPointException.exceptions.cannotRestoreVolumesFromDifferentSites(wwnSet);      }      try {        List<ConsistencyGroupCopyUID> productionCopiesUIDs=functionalAPI.getGroupSettings(copy.getCGGroupCopyUID().getGroupUID()).getProductionCopiesUIDs();        for (        ConsistencyGroupCopyUID productionCopyUID : productionCopiesUIDs) {          if (RecoverPointUtils.copiesEqual(productionCopyUID,copy.getCGGroupCopyUID())) {            throw RecoverPointException.exceptions.cannotRestoreVolumesInConsistencyGroup(wwnSet);          }        }      } catch (      FunctionalAPIActionFailedException_Exception e) {        logger.error(e.getMessage());        logger.error("Received FunctionalAPIActionFailedException_Exception. Get production copy");        throw RecoverPointException.exceptions.failureRestoringVolumes();      }catch (      FunctionalAPIInternalError_Exception e) {        logger.error(e.getMessage());        logger.error("Received FunctionalAPIActionFailedException_Exception. Get production copy");        throw RecoverPointException.exceptions.failureRestoringVolumes();      }    }  }  try {    for (    RPConsistencyGroup rpcg : cgSetToEnable) {      Set<RPCopy> copies=rpcg.getCopies();      for (      RPCopy copy : copies) {        boolean waitForLinkState=false;        imageManager.enableCGCopy(functionalAPI,copy.getCGGroupCopyUID(),waitForLinkState,ImageAccessMode.LOGGED_ACCESS,request.getBookmark(),request.getAPITTime());      }    }  } catch (  RecoverPointException e) {    logger.error("Caught exception while enabling CG copies for restore.  Return copies to previous state");    for (    RPConsistencyGroup rpcg : cgSetToEnable) {      Set<RPCopy> copies=rpcg.getCopies();      for (      RPCopy copy : copies) {        imageManager.disableCGCopy(functionalAPI,copy.getCGGroupCopyUID());      }    }    throw e;  }  for (  RPConsistencyGroup rpcg : cgSetToEnable) {    Set<RPCopy> copies=rpcg.getCopies();    for (    RPCopy copy : copies) {      imageManager.restoreEnabledCGCopy(functionalAPI,copy.getCGGroupCopyUID());    }  }  response.setReturnCode(RecoverPointReturnCode.SUCCESS);  return response;}  }
class C{  private static void checkSharedVocabularyChecksumsForPackedGrammars(final List<PackedGrammar> packed_grammars){  String previous_checksum="";  for (  PackedGrammar grammar : packed_grammars) {    final String checksum=grammar.computeVocabularyChecksum();    if (previous_checksum.isEmpty()) {      previous_checksum=checksum;    } else {      if (!checksum.equals(previous_checksum)) {        throw new RuntimeException("Trying to load multiple packed grammars with different vocabularies!" + "Have you packed them jointly?");      }      previous_checksum=checksum;    }  }}  }
class C{  public static long nextLong(){  return random.nextLong();}  }
class C{  public static void save(KeyStore keyStore,File keyStoreFile,Password password) throws CryptoException, IOException {  KeyStoreType keyStoreType=KeyStoreType.resolveJce(keyStore.getType());  if (!keyStoreType.isFileBased()) {    throw new CryptoException(MessageFormat.format(res.getString("NoSaveKeyStoreNotFile.exception.message"),keyStoreType.jce()));  }  FileOutputStream fos=null;  fos=new FileOutputStream(keyStoreFile);  try {    keyStore.store(fos,password.toCharArray());  } catch (  IOException ex) {    throw new CryptoException(res.getString("NoSaveKeyStore.exception.message"),ex);  }catch (  KeyStoreException ex) {    throw new CryptoException(res.getString("NoSaveKeyStore.exception.message"),ex);  }catch (  CertificateException ex) {    throw new CryptoException(res.getString("NoSaveKeyStore.exception.message"),ex);  }catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(res.getString("NoSaveKeyStore.exception.message"),ex);  } finally {    IOUtils.closeQuietly(fos);  }}  }
class C{  @Override public ImmutableRangeSet<C> subRangeSet(Range<C> range){  if (!isEmpty()) {    Range<C> span=span();    if (range.encloses(span)) {      return this;    } else     if (range.isConnected(span)) {      return new ImmutableRangeSet<C>(intersectRanges(range));    }  }  return of();}  }
class C{  public static UCrop of(@NonNull Uri source,@NonNull Uri destination){  return new UCrop(source,destination);}  }
class C{  public void makeCirdnaPlasmidFigure(String name_cirdna_out){  String cmd="perl " + _home + "/resources/scripts/make_cirdna_plasmid.pl "+ _output_directory+ " "+ _dateID+ " "+ name_cirdna_out;  String command_result=Util.executeCommand(cmd);}  }
class C{  public static java.lang.String valueOf(double d){  return null;}  }
class C{  static boolean isLocationDisabledForUrl(Uri uri){  GeolocationInfo locationSettings=new GeolocationInfo(uri.toString(),null,false);  ContentSetting locationPermission=locationSettings.getContentSetting();  if (locationPermission == null || locationPermission == ContentSetting.ASK) {    String scheme=uri.getScheme();    if (scheme != null && scheme.toLowerCase(Locale.US).equals("https") && uri.getAuthority() != null && uri.getUserInfo() == null) {      String urlWithHttp="http://" + uri.getHost();      locationSettings=new GeolocationInfo(urlWithHttp,null,false);      locationPermission=locationSettings.getContentSetting();    }  }  return locationPermission == ContentSetting.BLOCK;}  }
class C{  public int computeArea(int A,int B,int C,int D,int E,int F,int G,int H){  int areaA=(C - A) * (D - B);  int areaB=(G - E) * (H - F);  int left=Math.max(A,E);  int right=Math.min(C,G);  int bottom=Math.max(B,F);  int top=Math.min(D,H);  int overlap=0;  if (right > left && top > bottom) {    overlap=(right - left) * (top - bottom);  }  return areaA + areaB - overlap;}  }
class C{  private String toString(final int size){  if (size < 1024) {    return String.format("%d bytes",size);  } else   if (size < 1024 * 1024) {    return String.format(Locale.ENGLISH,"%.02f KB",1.0 * size / 1024);  } else {    return String.format(Locale.ENGLISH,"%.02f MB",1.0 * size / 1024 / 1024);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isResolving(final ConflictDescription description){synchronized (runningResolutionList) {    for (final Iterator<ConflictResolution> i=runningResolutionList.iterator(); i.hasNext(); ) {      final ConflictResolution resolution=i.next();      if (resolution.getConflictDescription().equals(description)) {        return true;      }    }  }  return false;}  }
class C{  @Override public final String toString(){  if (isLeaf) {    return "LeafNode " + getPageID();  } else {    return "DirNode " + getPageID();  }}  }
class C{  public static final boolean test(){  org.apache.log4j.MDC.put(MDC_KEY,"");  try {    return org.slf4j.MDC.get(MDC_KEY) != null;  }  finally {    org.apache.log4j.MDC.remove(MDC_KEY);  }}  }
class C{  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPublicKeySpec) {      return new DSAPublicKeyImpl((DSAPublicKeySpec)keySpec);    }    if (keySpec instanceof X509EncodedKeySpec) {      return new DSAPublicKeyImpl((X509EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");}  }
class C{  public synchronized void provideRefundSignature(byte[] theirSignature,@Nullable KeyParameter userKey) throws VerificationException {  checkNotNull(theirSignature);  stateMachine.checkState(State.WAITING_FOR_SIGNED_REFUND);  TransactionSignature theirSig=TransactionSignature.decodeFromBitcoin(theirSignature,true);  if (theirSig.sigHashMode() != Transaction.SigHash.NONE || !theirSig.anyoneCanPay())   throw new VerificationException("Refund signature was not SIGHASH_NONE|SIGHASH_ANYONECANPAY");  final TransactionOutput multisigContractOutput=multisigContract.getOutput(0);  try {    multisigScript=multisigContractOutput.getScriptPubKey();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }  TransactionSignature ourSignature=refundTx.calculateSignature(0,myKey.maybeDecrypt(userKey),multisigScript,Transaction.SigHash.ALL,false);  Script scriptSig=ScriptBuilder.createMultiSigInputScript(ourSignature,theirSig);  log.info("Refund scriptSig: {}",scriptSig);  log.info("Multi-sig contract scriptPubKey: {}",multisigScript);  TransactionInput refundInput=refundTx.getInput(0);  refundInput.setScriptSig(scriptSig);  refundInput.verify(multisigContractOutput);  stateMachine.transition(State.SAVE_STATE_IN_WALLET);}  }
class C{  public static final Parameter base(){  return new Parameter(P_PUSH);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized String findValue(String k){  if (k == null) {    for (int i=nkeys; --i >= 0; )     if (keys[i] == null)     return values[i];  } else   for (int i=nkeys; --i >= 0; ) {    if (k.equalsIgnoreCase(keys[i]))     return values[i];  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.368 -0500",hash_original_method="0309B89A8A5C20FB439CB65AA9DE3FAA",hash_generated_method="C604CEA8A3BAA88EE6676A4CDACE3183") @DSSafe(DSCat.SAFE_OTHERS) protected void enforceSealed(){  if (!isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a not sealed instance.");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode13.class,args);}  }
class C{  public void appendLine(final Line line){  if (this.lineTail == null) {    this.lines=this.lineTail=line;  } else {    this.lineTail.nextEmpty=line.isEmpty;    line.prevEmpty=this.lineTail.isEmpty;    line.previous=this.lineTail;    this.lineTail.next=line;    this.lineTail=line;  }}  }
class C{  public static InterfaceAuthSwitchSendResponsePacket processAuthPlugin(ReadPacketFetcher packetFetcher,String plugin,String password,byte[] authData,int seqNo) throws QueryException {switch (plugin) {case MYSQL_NATIVE_PASSWORD:    return new SendNativePasswordAuthPacket(password,authData,seqNo);case MYSQL_OLD_PASSWORD:  return new SendOldPasswordAuthPacket(password,Utils.copyWithLength(authData,8),seqNo);case MYSQL_CLEAR_PASSWORD:return new SendClearPasswordAuthPacket(password,authData,seqNo);case DIALOG:return new SendPamAuthPacket(packetFetcher,password,authData,seqNo);case GSSAPI_CLIENT:return new SendGssApiAuthPacket(packetFetcher,password,authData,seqNo);default :throw new QueryException("Client does not support authentication protocol requested by server. " + "Consider upgrading MariaDB client. plugin was = " + plugin,1251,"08004");}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:35.532 -0500",hash_original_method="80E9D70CB6ACD6183E07186EDB4A95C5",hash_generated_method="DB1C701A897DDE4A240532A306C76034") public float eyesDistance(){  return mEyesDist;}  }
class C{  private static void tsvDump(PrintWriter pw,GTSDecoderIterator iter,long now,long timespan,boolean raw,boolean dedup,boolean signed,AtomicReference<Metadata> lastMeta,AtomicLong lastCount) throws IOException {  String name=null;  Map<String,String> labels=null;  StringBuilder classSB=new StringBuilder();  StringBuilder labelsSB=new StringBuilder();  StringBuilder attributesSB=new StringBuilder();  StringBuilder valueSB=new StringBuilder();  Metadata lastMetadata=lastMeta.get();  long currentCount=lastCount.get();  while (iter.hasNext()) {    GTSDecoder decoder=iter.next();    if (!decoder.next()) {      continue;    }    long toDecodeCount=Long.MAX_VALUE;    if (timespan < 0) {      Metadata meta=decoder.getMetadata();      if (!meta.equals(lastMetadata)) {        lastMetadata=meta;        currentCount=0;      }      toDecodeCount=Math.max(0,-timespan - currentCount);    }    Map<String,String> lbls=decoder.getLabels();    boolean displayName=false;    if (null == name || (!name.equals(decoder.getName()) || !labels.equals(lbls))) {      displayName=true;      name=decoder.getName();      labels=lbls;      classSB.setLength(0);      GTSHelper.encodeName(classSB,name);      labelsSB.setLength(0);      attributesSB.setLength(0);      boolean first=true;      for (      Entry<String,String> entry : lbls.entrySet()) {        if (!signed) {          if (Constants.PRODUCER_LABEL.equals(entry.getKey())) {            continue;          }          if (Constants.OWNER_LABEL.equals(entry.getKey())) {            continue;          }        }        if (!first) {          labelsSB.append(",");        }        GTSHelper.encodeName(labelsSB,entry.getKey());        labelsSB.append("=");        GTSHelper.encodeName(labelsSB,entry.getValue());        first=false;      }      first=true;      if (decoder.getMetadata().getAttributesSize() > 0) {        for (        Entry<String,String> entry : decoder.getMetadata().getAttributes().entrySet()) {          if (!first) {            attributesSB.append(",");          }          GTSHelper.encodeName(attributesSB,entry.getKey());          attributesSB.append("=");          GTSHelper.encodeName(attributesSB,entry.getValue());          first=false;        }      }    }    long timestamp=0L;    long location=GeoTimeSerie.NO_LOCATION;    long elevation=GeoTimeSerie.NO_ELEVATION;    Object value=null;    boolean dup=true;    long decoded=0;    do {      if (toDecodeCount == decoded) {        break;      }      long newTimestamp=decoder.getTimestamp();      if (newTimestamp > now || (timespan >= 0 && newTimestamp <= (now - timespan))) {        continue;      }      long newLocation=decoder.getLocation();      long newElevation=decoder.getElevation();      Object newValue=decoder.getValue();      dup=true;      if (dedup) {        if (location != newLocation || elevation != newElevation) {          dup=false;        } else {          if (null == newValue) {            dup=false;          } else           if (newValue instanceof Number) {            if (!((Number)newValue).equals(value)) {              dup=false;            }          } else           if (newValue instanceof String) {            if (!((String)newValue).equals(value)) {              dup=false;            }          } else           if (newValue instanceof Boolean) {            if (!((Boolean)newValue).equals(value)) {              dup=false;            }          }        }      }      decoded++;      location=newLocation;      elevation=newElevation;      timestamp=newTimestamp;      value=newValue;      if (raw) {        if (!dedup || !dup) {          pw.print(classSB);          pw.print('\t');          pw.print(labelsSB);          pw.print('\t');          pw.print(attributesSB);          pw.print('\t');          pw.print(timestamp);          pw.print('\t');          if (GeoTimeSerie.NO_LOCATION != location) {            double[] latlon=GeoXPLib.fromGeoXPPoint(location);            pw.print(latlon[0]);            pw.print('\t');            pw.print(latlon[1]);          } else {            pw.print('\t');          }          pw.print('\t');          if (GeoTimeSerie.NO_ELEVATION != elevation) {            pw.print(elevation);          }          pw.print('\t');          valueSB.setLength(0);          GTSHelper.encodeValue(valueSB,value);          pw.println(valueSB);        }      } else {        if (displayName) {          pw.print("# ");          pw.print(classSB);          pw.print("{");          pw.print(labelsSB);          pw.print("}");          pw.print("{");          pw.print(attributesSB);          pw.println("}");          displayName=false;          dup=false;        }        if (!dedup || !dup) {          pw.print(timestamp);          pw.print('\t');          if (GeoTimeSerie.NO_LOCATION != location) {            double[] latlon=GeoXPLib.fromGeoXPPoint(location);            pw.print(latlon[0]);            pw.print('\t');            pw.print(latlon[1]);          } else {            pw.print('\t');          }          pw.print('\t');          if (GeoTimeSerie.NO_ELEVATION != elevation) {            pw.print(elevation);          }          pw.print('\t');          valueSB.setLength(0);          GTSHelper.encodeValue(valueSB,value);          pw.println(valueSB);        }      }    } while (decoder.next());    if (timespan < 0) {      currentCount+=decoded;    }    if (dedup && dup) {      if (raw) {        pw.print(classSB);        pw.print('\t');        pw.print(labelsSB);        pw.print('\t');        pw.print(attributesSB);        pw.print('\t');        pw.print(timestamp);        pw.print('\t');        if (GeoTimeSerie.NO_LOCATION != location) {          double[] latlon=GeoXPLib.fromGeoXPPoint(location);          pw.print(latlon[0]);          pw.print('\t');          pw.print(latlon[1]);        } else {          pw.print('\t');        }        pw.print('\t');        if (GeoTimeSerie.NO_ELEVATION != elevation) {          pw.print(elevation);        }        pw.print('\t');        valueSB.setLength(0);        GTSHelper.encodeValue(valueSB,value);        pw.println(valueSB);      } else {        pw.print(timestamp);        pw.print('\t');        if (GeoTimeSerie.NO_LOCATION != location) {          double[] latlon=GeoXPLib.fromGeoXPPoint(location);          pw.print(latlon[0]);          pw.print('\t');          pw.print(latlon[1]);        } else {          pw.print('\t');        }        pw.print('\t');        if (GeoTimeSerie.NO_ELEVATION != elevation) {          pw.print(elevation);        }        pw.print('\t');        valueSB.setLength(0);        GTSHelper.encodeValue(valueSB,value);        pw.println(valueSB);      }    }    if (displayName) {      name=null;    }  }  lastMeta.set(lastMetadata);  lastCount.set(currentCount);}  }
class C{  @Inline @Override public final void charWrite(ObjectReference objref,char value,Word offset,Word location,int mode){  Magic.setCharAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public static synchronized void reentrantOuterLock(){  lock.lock();  try {    reentrantInnerLock();  }  finally {    lock.unlock();  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public int size(){  return segments.size();}  }
class C{  void initFirstBlock(int maxStack,int maxLocals,String className,String methodDesc,boolean isStatic,boolean isConstructor) throws BadBytecode {  if (methodDesc.charAt(0) != '(')   throw new BadBytecode("no method descriptor: " + methodDesc);  stackTop=0;  stackTypes=TypeData.make(maxStack);  TypeData[] locals=TypeData.make(maxLocals);  if (isConstructor)   locals[0]=new TypeData.UninitThis(className); else   if (!isStatic)   locals[0]=new TypeData.ClassName(className);  int n=isStatic ? -1 : 0;  int i=1;  try {    while ((i=descToTag(methodDesc,i,++n,locals)) > 0)     if (locals[n].is2WordType())     locals[++n]=TypeTag.TOP;  } catch (  StringIndexOutOfBoundsException e) {    throw new BadBytecode("bad method descriptor: " + methodDesc);  }  numLocals=n;  localsTypes=locals;}  }
class C{  public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  pcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public void testDeployWar(){  this.fileHandler.createFile("ram:///test.war");  WAR war=(WAR)factory.createDeployable("jonas5x","ram:///test.war",DeployableType.WAR);  deployer.deploy(war);  assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/test.war"));}  }
class C{  public void write(Writer out) throws IOException {  Document doc=getDocument();  try {    getUI().getEditorKit(this).write(out,doc,0,doc.getLength());  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  private void handlePendingTriggers() throws Exception {  for (  TriggerType type : TriggerType.values()) {    PreparedStatement pstmt=conn.prepareStatement(QUERY_PENDING_TRIGGER_FOR_TYPE);    pstmt.setString(1,type.name());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      long orgKey=rs.getLong("organization_tkey");      long triggerDefinitionKey=rs.getLong("tkey");switch (type) {case ACTIVATE_SERVICE:case DEACTIVATE_SERVICE:        handleServiceActivation(orgKey,triggerDefinitionKey);      break;case SUBSCRIBE_TO_SERVICE:case UNSUBSCRIBE_FROM_SERVICE:    handleSubscribingProcess(orgKey,triggerDefinitionKey);  break;case MODIFY_SUBSCRIPTION:case UPGRADE_SUBSCRIPTION:handleSubscriptionChange(orgKey,triggerDefinitionKey);break;case SAVE_PAYMENT_CONFIGURATION:handleSavePayment(orgKey,triggerDefinitionKey);break;case REGISTER_CUSTOMER_FOR_SUPPLIER:handleCustomerRegistration(orgKey,triggerDefinitionKey);break;case ADD_REVOKE_USER:handleUserAssignment(orgKey,triggerDefinitionKey);break;default :;}}}}  }
class C{  public ProtocolException(String message){  super(message);}  }
class C{  protected synchronized void waitingTask(int expNum){  m_subExpQueue.push(new Integer(expNum));}  }
class C{  @Override protected void onCreate(final Bundle savedInstanceState){  final Window window=getWindow();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);  }  super.onCreate(savedInstanceState);  if (!isDatabaseReady(this)) {    Toast.makeText(this,R.string.preparing_database_toast,Toast.LENGTH_SHORT).show();    finish();    return;  }  ha=this;  mPreferences=getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);  mTwitterWrapper=getTwitterWrapper();  mReadStateManager=FiretweetApplication.getInstance(this).getReadStateManager();  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  mMultiSelectHandler=new MultiSelectEventHandler(this);  mHotKeyHandler=new HotKeyHandler(this);  mMultiSelectHandler.dispatchOnCreate();  final long[] accountIds=getAccountIds(this);  if (accountIds.length == 0) {    final Intent signInIntent=new Intent(INTENT_ACTION_TWITTER_LOGIN);    signInIntent.setClass(this,SignInActivity.class);    startActivity(signInIntent);    finish();    return;  } else {    notifyAccountsChanged();  }  final Intent intent=getIntent();  if (openSettingsWizard()) {    finish();    return;  }  setContentView(R.layout.activity_home);  setSupportActionBar(mActionBar);  sendBroadcast(new Intent(BROADCAST_HOME_ACTIVITY_ONCREATE));  final boolean refreshOnStart=mPreferences.getBoolean(KEY_REFRESH_ON_START,false);  mTabDisplayOption=getTabDisplayOptionInt(this);  mColorStatusFrameLayout.setOnFitSystemWindowsListener(this);  ThemeUtils.applyBackground(mTabIndicator);  mPagerAdapter=new SupportTabsAdapter(this,getSupportFragmentManager(),mTabIndicator,1);  mViewPager.setAdapter(mPagerAdapter);  mViewPager.setOffscreenPageLimit(3);  mTabIndicator.setViewPager(mViewPager);  mTabIndicator.setOnPageChangeListener(this);  if (mTabDisplayOption != 0) {    mTabIndicator.setTabDisplayOption(mTabDisplayOption);  } else {    mTabIndicator.setTabDisplayOption(TabPagerIndicator.ICON);  }  mTabIndicator.setDisplayBadge(mPreferences.getBoolean(KEY_UNREAD_COUNT,true));  mActionsButton.setOnClickListener(this);  mActionsButton.setOnLongClickListener(this);  mEmptyTabHint.setOnClickListener(this);  setupSlidingMenu();  setupBars();  initUnreadCount();  updateActionsButton();  updateSmartBar();  updateSlidingMenuTouchMode();  if (savedInstanceState == null) {    mTwitterWrapper.refreshAll();    if (intent.getBooleanExtra(EXTRA_OPEN_ACCOUNTS_DRAWER,false)) {      openAccountsDrawer();    }  }  mPagerPosition=Float.NaN;  setupHomeTabs();  final int initialTabPosition=handleIntent(intent,savedInstanceState == null);  setTabPosition(initialTabPosition);}  }
class C{  public void deleteAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/delete-avatar",config.toXML());}  }
class C{  @Override public Thread scheduleCollectorContext(CollectorContext method){  RawThread c=new CollectorThread(this,method);  collectors.add(c);  method.initCollector(collectors.size());  Trace.trace(Item.SCHEDULER,"%d: creating new collector, id=%d",Thread.currentThread().getId(),c.getId());  c.start();  return c;}  }
class C{  private void computeCriterionResult(CriterionStatistics crs){  if (crs.getNbOfFailed() > 0) {    crs.setCriterionResult(TestSolution.FAILED);  } else   if (crs.getNbOfNmi() > 0) {    crs.setCriterionResult(TestSolution.NEED_MORE_INFO);  } else   if (crs.getNbOfNotTested() > 0) {    crs.setCriterionResult(TestSolution.NOT_TESTED);  } else   if (crs.getNbOfPassed() > 0) {    crs.setCriterionResult(TestSolution.PASSED);  } else   if (crs.getNbOfNa() > 0) {    crs.setCriterionResult(TestSolution.NOT_APPLICABLE);  } else {    crs.setCriterionResult(TestSolution.NEED_MORE_INFO);  }}  }
class C{  public void start() throws IllegalStateException {  Log.d(TAG,"start");  if (mediaPlayer != null) {    currentState=State.STARTED;    mediaPlayer.setOnCompletionListener(this);    mediaPlayer.start();  } else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public static int discrete(int[] frequencies){  if (frequencies == null)   throw new NullPointerException("argument array is null");  long sum=0;  for (int i=0; i < frequencies.length; i++) {    if (frequencies[i] < 0)     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ frequencies[i]);    sum+=frequencies[i];  }  if (sum == 0)   throw new IllegalArgumentException("at least one array entry must be positive");  if (sum >= Integer.MAX_VALUE)   throw new IllegalArgumentException("sum of frequencies overflows an int");  double r=uniform((int)sum);  sum=0;  for (int i=0; i < frequencies.length; i++) {    sum+=frequencies[i];    if (sum > r)     return i;  }  assert false;  return -1;}  }
class C{  void bind(int position){  if (mViews.get(position) != null) {    mViews.get(position).setCalendar(mMonths.get(position));  }  bindCursor(position);  bindSelectedDay(position);}  }
class C{  public static Set<Use> retrieveRegisteredUses(){  Set<Use> r=new HashSet<Use>();  for (  Integer useId : registeredUses.values()) {    r.add(getUseByUseId(useId));  }  return r;}  }
class C{  public static int binarySearch(int[] array,int startIndex,int endIndex,int value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  boolean isSignedJar(){  return certificates.size() > 0;}  }
class C{  protected final void forceClose(){  try {    try {      if (this.mysqlInput != null) {        this.mysqlInput.close();      }    }  finally {      if (this.mysqlConnection != null && !this.mysqlConnection.isClosed() && !this.mysqlConnection.isInputShutdown()) {        try {          this.mysqlConnection.shutdownInput();        } catch (        UnsupportedOperationException ex) {        }      }    }  } catch (  IOException ioEx) {  }  try {    try {      if (this.mysqlOutput != null) {        this.mysqlOutput.close();      }    }  finally {      if (this.mysqlConnection != null && !this.mysqlConnection.isClosed() && !this.mysqlConnection.isOutputShutdown()) {        try {          this.mysqlConnection.shutdownOutput();        } catch (        UnsupportedOperationException ex) {        }      }    }  } catch (  IOException ioEx) {  }  try {    if (this.mysqlConnection != null) {      this.mysqlConnection.close();    }  } catch (  IOException ioEx) {  }}  }
class C{  public boolean removeStackChangedListener(StackChangedListener listener){  return listeners.remove(listener);}  }
class C{  @Override public OutlierResult run(Database db,Relation<V> relation){  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  DBIDArrayIter pB=ids.iter(), pC=ids.iter();  SimilarityQuery<V> sq=db.getSimilarityQuery(relation,kernelFunction);  KernelMatrix kernelMatrix=new KernelMatrix(sq,relation,ids);  WritableDoubleDataStore abodvalues=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax minmaxabod=new DoubleMinMax();  double max=0.;  WritableDoubleDataStore sqDists=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  KNNHeap nn=DBIDUtil.newHeap(k);  ModifiableDoubleDBIDList candidates=DBIDUtil.newDistanceDBIDList(relation.size());  for (DBIDIter pA=relation.iterDBIDs(); pA.valid(); pA.advance()) {    nn.clear();    double simAA=kernelMatrix.getSimilarity(pA,pA);    double sumid=0., sumisqd=0.;    for (pB.seek(0); pB.valid(); pB.advance()) {      if (DBIDUtil.equal(pB,pA)) {        continue;      }      double simBB=kernelMatrix.getSimilarity(pB,pB);      double simAB=kernelMatrix.getSimilarity(pA,pB);      double sqdAB=simAA + simBB - simAB - simAB;      sqDists.putDouble(pB,sqdAB);      final double isqdAB=1. / sqdAB;      sumid+=Math.sqrt(isqdAB);      sumisqd+=isqdAB;      nn.insert(sqdAB,pB);    }    double nnsum=0., nnsumsq=0., nnsumisqd=0.;    KNNList nl=nn.toKNNList();    DoubleDBIDListIter iB=nl.iter(), iC=nl.iter();    for (; iB.valid(); iB.advance()) {      double sqdAB=iB.doubleValue();      double simAB=kernelMatrix.getSimilarity(pA,iB);      if (!(sqdAB > 0.)) {        continue;      }      for (iC.seek(iB.getOffset() + 1); iC.valid(); iC.advance()) {        double sqdAC=iC.doubleValue();        double simAC=kernelMatrix.getSimilarity(pA,iC);        if (!(sqdAC > 0.)) {          continue;        }        double simBC=kernelMatrix.getSimilarity(iB,iC);        double numerator=simBC - simAB - simAC + simAA;        double sqweight=1. / (sqdAB * sqdAC);        double weight=Math.sqrt(sqweight);        double val=numerator * sqweight;        nnsum+=val * weight;        nnsumsq+=val * val * weight;        nnsumisqd+=sqweight;      }    }    double r2=sumisqd * sumisqd - 2. * nnsumisqd;    double tmp=(2. * nnsum + r2) / (sumid * sumid);    double lbabof=2. * nnsumsq / (sumid * sumid) - tmp * tmp;    if (lbabof > max) {      max=lbabof;    }    abodvalues.putDouble(pA,lbabof);    candidates.add(lbabof,pA);  }  minmaxabod.put(max);  candidates.sort();  int refinements=0;  DoubleMinHeap topscores=new DoubleMinHeap(l);  MeanVariance s=new MeanVariance();  for (DoubleDBIDListIter pA=candidates.iter(); pA.valid(); pA.advance()) {    if (topscores.size() >= k && pA.doubleValue() > topscores.peek()) {      break;    }    final double abof=computeABOF(kernelMatrix,pA,pB,pC,s);    abodvalues.putDouble(pA,abof);    minmaxabod.put(abof);    if (topscores.size() < k) {      topscores.add(abof);    } else {      if (topscores.peek() > abof) {        topscores.replaceTopElement(abof);      }    }    refinements+=1;  }  if (LOG.isStatistics()) {    LoggingConfiguration.setVerbose(Level.VERYVERBOSE);    LOG.statistics(new LongStatistic("lb-abod.refinements",refinements));  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Angle-based Outlier Detection","abod-outlier",abodvalues,ids);  OutlierScoreMeta scoreMeta=new InvertedOutlierScoreMeta(minmaxabod.getMin(),minmaxabod.getMax(),0.0,Double.POSITIVE_INFINITY);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  private boolean isSignedIn(){  mDevice.wait(Until.hasObject(By.clazz(CLASS_BUTTON).enabled(true)),UI_TIMEOUT);  String signedInText=mContext.getString(R.string.signed_in_fmt,"");  BySelector signedInTextSelector=By.textContains(signedInText);  return mDevice.wait(Until.hasObject(signedInTextSelector),UI_TIMEOUT);}  }
class C{  public Session(PrincipalId principalId,Date expireDate,AuthnMethod authnMethod) throws NoSuchAlgorithmException {  Validate.notNull(principalId);  Validate.notNull(expireDate);  SecureRandomIdentifierGenerator generator=new SecureRandomIdentifierGenerator();  this.id=generator.generateIdentifier();  this.principalId=principalId;  this.expireDate=expireDate;  this.authnMethod=authnMethod;  this.participants=new HashMap<String,SessionParticipant>();  this.participantsByUrl=new HashMap<String,SessionParticipant>();  this.lock=new ReentrantLock();  this.usingExtIDP=false;  this.extIDPUsed=null;  this.extIDPSessionID=null;}  }
class C{  public TextComponent(BaseComponent... extras){  this.text="";  this.setExtra(Arrays.asList(extras));}  }
class C{  private List<RunningQuery> deserialize(String str){  final StringBufferInputStream reader=new StringBufferInputStream(str);  try {    return JsonHelper.readRunningQueryList(reader);  } catch (  JsonProcessingException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public final void onBeforeStart(){  if (!startedFlag.compareAndSet(false,true))   throw new IllegalStateException("SPI has already been started " + "(always create new configuration instance for each starting Ignite instances) " + "[spi=" + this + ']');}  }
class C{  private void addInterface(ClassType type,Set<AbstractInterfaceType> interfaces,Events events){  for (  AbstractInterfaceType i : interfaces) {    AbstractInterfaceType lookupUp=getOrAddReferredType(i,events,AbstractInterfaceType.class);    fireAndSave(new ReferenceEvent(type,lookupUp,ReferenceType.REALIZE_INTERFACE),events);    type.addInterface(lookupUp);  }}  }
class C{  @Override public boolean cancel(){  cancelled=true;  return super.cancel();}  }
class C{  private void doEncodeDecodeTest(final TermIdEncoder encoder,final int pid,final int ctr){  final long v0=TermIdEncoder.combine(pid,ctr);  assertEquals("pid",pid,TermIdEncoder.getPartitionId(v0));  assertEquals("ctr",ctr,TermIdEncoder.getLocalCounter(v0));  final long u=encoder.encode(v0);  final long u1=encoder.encode2(v0);  assertTrue(u == u1);  final long v1=encoder.decode(u);  final long v2=encoder.decode2(u);  assertTrue(v1 == v2);  if (v0 != v1)   fail(encoder,v0,v1);}  }
class C{  public boolean isAntialiasing(){  return mAntialiasing;}  }
class C{  public itemCommonBinder(View itemView,boolean isItem){  super(itemView);  if (isItem) {    textViewSample=(TextView)itemView.findViewById(R.id.str_textview_holder);    imageViewSample=(ImageView)itemView.findViewById(R.id.str_image_holder);    progressBarSample=(ProgressBar)itemView.findViewById(R.id.str_progress_holder);    item_view=(RelativeLayout)itemView.findViewById(R.id.str_item_view);  }}  }
class C{  @Override public boolean isDefaultEvent(){  return defaultEvent;}  }
class C{  public boolean hasBeenCalled(String resourceName){  return uris.contains(resourceName);}  }
class C{  protected static void bothSparseMatmult(MatrixObject output,MatrixObject left,MatrixObject right,boolean isLeftTransposed,boolean isRightTransposed) throws DMLRuntimeException {  int transA=isLeftTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;  int transB=isRightTransposed ? CUSPARSE_OPERATION_TRANSPOSE : CUSPARSE_OPERATION_NON_TRANSPOSE;  int m=(int)(isLeftTransposed ? left.getNumColumns() : left.getNumRows());  int n=(int)(isRightTransposed ? right.getNumRows() : right.getNumColumns());  int k=(int)(isLeftTransposed ? left.getNumRows() : left.getNumColumns());  int k1=(int)(isRightTransposed ? right.getNumColumns() : right.getNumRows());  if (k != k1)   throw new DMLRuntimeException("Dimension mismatch: " + k + " != "+ k1);  if (m == -1 || n == -1 || k == -1)   throw new DMLRuntimeException("Incorrect dimensions");  CSRPointer A=((JCudaObject)left.getGPUObject()).jcudaSparseMatrixPtr;  CSRPointer B=((JCudaObject)right.getGPUObject()).jcudaSparseMatrixPtr;  if (!isRightTransposed && right.getNumColumns() == 1) {    sparseMatrixVectorMult(output,transA,(int)left.getNumRows(),(int)left.getNumColumns(),(int)right.getNumRows(),A,B);  } else {    sparseSparseMatmult(output,transA,transB,m,n,k,A,B);  }}  }
class C{  public static byte toByteValue(Object o) throws PageException {  if (o instanceof Byte)   return ((Byte)o).byteValue();  if (o instanceof Character)   return (byte)(((Character)o).charValue()); else   if (o instanceof Boolean)   return (byte)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Number)   return (((Number)o).byteValue()); else   if (o instanceof String)   return (byte)toDoubleValue(o.toString()); else   if (o instanceof ObjectWrap) {    return toByteValue(((ObjectWrap)o).getEmbededObject());  }  throw new CasterException(o,"byte");}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public boolean isContext(){  return false;}  }
class C{  public DrawerBuilder withHeaderClickable(boolean headerClickable){  this.mHeaderClickable=headerClickable;  return this;}  }
class C{  public ProblemException(Problem problem,Throwable cause){  super(cause);  this.problem=problem;}  }
class C{  public SQLTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  protected DatabaseConnection newDatabaseConnection() throws Exception {  DatabaseConnection result;  checkEnv();  if (m_CustomPropsFile != null) {    File pFile=new File(m_CustomPropsFile.getPath());    String pPath=m_CustomPropsFile.getPath();    try {      pPath=m_env.substitute(pPath);      pFile=new File(pPath);    } catch (    Exception ex) {    }    result=new DatabaseConnection(pFile);  } else {    result=new DatabaseConnection();  }  m_createText=result.getProperties().getProperty("CREATE_STRING");  m_createDouble=result.getProperties().getProperty("CREATE_DOUBLE");  m_createInt=result.getProperties().getProperty("CREATE_INT");  m_createDate=result.getProperties().getProperty("CREATE_DATE","DATETIME");  m_DateFormat=new SimpleDateFormat(result.getProperties().getProperty("DateFormat","yyyy-MM-dd HH:mm:ss"));  m_idColumn=result.getProperties().getProperty("idColumn");  return result;}  }
class C{  public static DataDisplayTable listCharsNeededToCoverScript(Font font){  String[] header={"Script","Code Point","Name"};  Align[] displayAlignment={Align.Left,Align.Right,Align.Left};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  HashMap<Integer,UnicodeSet> coveredScripts=new HashMap<Integer,UnicodeSet>();  CMap cmap=FontUtils.getUCSCMap(font);  for (  int charId : cmap) {    if (cmap.glyphId(charId) != CMapTable.NOTDEF) {      int scriptCode=UScript.getScript(charId);      if (scriptCode == UScript.UNKNOWN) {        continue;      }      UnicodeSet scriptSet=null;      if (!coveredScripts.containsKey(scriptCode)) {        try {          scriptSet=new UnicodeSet("[[:" + UScript.getName(scriptCode) + ":]-[:gc=Unassigned:]-[:gc=Control:]]");        } catch (        IllegalIcuArgumentException e) {          continue;        }        coveredScripts.put(scriptCode,scriptSet);      } else {        scriptSet=coveredScripts.get(scriptCode);      }      scriptSet.remove(UCharacter.toString(charId));    }  }  Set<Integer> sortedScripts=new TreeSet<Integer>(coveredScripts.keySet());  for (  Integer scriptCode : sortedScripts) {    UnicodeSet uSet=coveredScripts.get(scriptCode);    for (    String charStr : uSet) {      int codePoint=UCharacter.codePointAt(charStr,0);      table.add(Arrays.asList(new String[]{String.format("%s",UScript.getName(scriptCode)),FontUtils.getFormattedCodePointString(codePoint),UCharacter.getExtendedName(codePoint)}));    }  }  return table;}  }
class C{  public File openDirectory(String folderName) throws IOException {  File file=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + folderName);  if (!file.exists()) {    file.mkdirs();  }  MediaScannerConnection.scanFile(mContext,new String[]{file.getAbsolutePath()},null,null);  return file;}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory,IoEventQueueHandler eventQueueHandler){  super(DEFAULT_INITIAL_THREAD_POOL_SIZE,1,keepAliveTime,unit,new SynchronousQueue<Runnable>(),threadFactory,new AbortPolicy());  if (corePoolSize < DEFAULT_INITIAL_THREAD_POOL_SIZE) {    throw new IllegalArgumentException("corePoolSize: " + corePoolSize);  }  if ((maximumPoolSize == 0) || (maximumPoolSize < corePoolSize)) {    throw new IllegalArgumentException("maximumPoolSize: " + maximumPoolSize);  }  super.setCorePoolSize(corePoolSize);  super.setMaximumPoolSize(maximumPoolSize);  if (eventQueueHandler == null) {    this.eventQueueHandler=IoEventQueueHandler.NOOP;  } else {    this.eventQueueHandler=eventQueueHandler;  }}  }
class C{  public Heap(E[] objects,Comparator<? super E> comparator){  this.comparator=comparator;  for (int i=0; i < objects.length; i++) {    add(objects[i]);  }}  }
class C{  public JSONArray add(JSONValue value){  if (value == null) {    throw new NullPointerException("value is null");  }  values.add(value);  return this;}  }
class C{  public static void displayWarnings(List units){  for (int i=0, size=units == null ? 0 : units.size(); i < size; i++) {    CompilationUnit u=(CompilationUnit)units.get(i);    Source s=(u != null) ? u.getSource() : null;    if (s != null && s.getLogger() != null && s.getLogger().warningCount() > 0 && !s.getLogger().isConnected()) {      s.getLogger().displayWarnings(ThreadLocalToolkit.getLogger());    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public GetChannels(int channelgroupid,String... properties){  super();  addParameterToRequest("channelgroupid",channelgroupid);  addParameterToRequest("properties",properties);}  }
class C{  public static List<byte[]> splitAndPad(byte[] byteArray,int blocksize){  List<byte[]> blocks=new ArrayList<byte[]>();  int numBlocks=(int)Math.ceil(byteArray.length / (double)blocksize);  for (int i=0; i < numBlocks; i++) {    byte[] block=new byte[blocksize];    Arrays.fill(block,(byte)0x00);    if (i + 1 == numBlocks) {      int remainingBytes=byteArray.length - (i * blocksize);      System.arraycopy(byteArray,i * blocksize,block,0,remainingBytes);    } else {      System.arraycopy(byteArray,i * blocksize,block,0,blocksize);    }    blocks.add(block);  }  return blocks;}  }
class C{  public void updateCouplings(){  workspace.getCouplingManager().updateAllCouplings();  LOGGER.trace("couplings updated");  workspace.getUpdater().notifyCouplingsUpdated();}  }
class C{  public Builder customizationId(String customizationId){  this.customizationId=customizationId;  return this;}  }
class C{  public static void skip(DataInput in) throws IOException {  Text.skip(in);  Text.skip(in);}  }
class C{  private void checkShutdown(){synchronized (mux) {    if (isBeingShutdown)     throw new RejectedExecutionException("Failed to execute command during executor shutdown.");  }}  }
class C{  public static void main(String[] args){  runFilter(new SubsetByExpression(),args);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getPlaylistIndex());}  }
class C{  private void tryDelete(Node x,Node y,Set<Node> subset,Graph graph,boolean log){  graph.removeEdge(x,y);  for (  Node h : subset) {    if (Edges.isUndirectedEdge(graph.getEdge(x,h))) {      graph.removeEdge(x,h);      graph.addDirectedEdge(x,h);      if (log) {        Edge oldEdge=graph.getEdge(x,h);        TetradLogger.getInstance().log("directedEdges","--- Directing " + oldEdge + " to "+ graph.getEdge(x,h));      }    }    if (Edges.isUndirectedEdge(graph.getEdge(y,h))) {      graph.removeEdge(y,h);      graph.addDirectedEdge(y,h);      if (log) {        Edge oldEdge=graph.getEdge(y,h);        TetradLogger.getInstance().log("directedEdges","--- Directing " + oldEdge + " to "+ graph.getEdge(y,h));      }    }  }}  }
class C{  public void testAddAll3(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE - 1; ++i)     ints[i]=new Integer(i);    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  @LargeTest public void testThumbnailListH264WVGAWithStartEqualEnd() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int tnCount=1;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  final long thumbNailStartTime=mediaVideoItem.getDuration() / 2;  final long thumbNailEndTime=thumbNailStartTime;  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  public void loadImages(Context context){  Resources res=context.getResources();  int n=mImages.size();  for (int i=0; i < n; i++)   mImages.get(i).load(res);}  }
class C{  static void runTest() throws Exception {  Thread[] threadList=new Thread[NUM_OF_THREADS];  s_conn=new Connection[NUM_OF_THREADS];  if (s_cType == C_SHARED)   s_sconn=DriverManager.getConnection(CONNECTION,UID,PWD);  for (int i=0; i < NUM_OF_THREADS; i++) {    if (s_cType == C_PRECREATED)     s_conn[i]=DriverManager.getConnection(CONNECTION,UID,PWD);    threadList[i]=new JdbcTest(i);    threadList[i].start();  }  long start=System.currentTimeMillis();  setGreenLight();  for (int i=0; i < NUM_OF_THREADS; i++)   threadList[i].join();  if (s_sconn != null)   s_sconn.close();  s_sconn=null;  for (int i=0; i < NUM_OF_THREADS; i++) {    if (s_conn[i] != null)     s_conn[i].close();    s_conn[i]=null;  }  long result=System.currentTimeMillis() - start;  System.out.print(C_INFO[s_cType] + "Threads=" + NUM_OF_THREADS+ " \tYield="+ s_do_yield+ " \tms= "+ result+ " \teach= "+ (result / NUM_OF_THREADS));  System.out.println();}  }
class C{  private static JList<String> createFileList(List<String> fileNames){  JList<String> fileList=new JList<String>(fileNames.toArray(new String[0]));  fileList.setVisibleRowCount(5);  fileList.setCellRenderer(new FileNameListCellRenderer());  fileList.setFocusable(false);  return fileList;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void signalErrorToEnumerationAdapter(Throwable t){  this.aws.error=t;  this.aws.stage=AWSEnumerationCreationStages.ERROR;  this.service.handleEnumerationRequest(this.aws);}  }
class C{  void drawBorders(){  mBackground.draw();  for (int i=0; i < mBorders.length; i++) {    mBorders[i].draw();  }}  }
class C{  private void loadChattingWithUser(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  public static void onlyNumericalAttributes(Attributes attributes,String task) throws OperatorException {  for (  Attribute attribute : attributes) {    if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(attribute.getValueType(),Ontology.NUMERICAL)) {      throw new UserError(null,104,task,attribute.getName());    }  }}  }
class C{  private TaskList stopMirrors(URI id,URI copyID){  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume sourceVolume=queryVolumeResource(id);  ArgValidator.checkEntity(sourceVolume,id,true);  StringSet mirrors=sourceVolume.getMirrors();  if (mirrors == null || mirrors.isEmpty()) {    throw APIException.badRequests.invalidParameterVolumeHasNoContinuousCopies(sourceVolume.getId());  }  ArrayList<URI> mirrorList=null;  if (copyID != null) {    ArgValidator.checkFieldUriType(copyID,BlockMirror.class,"copyID");    BlockMirror mirror=queryMirror(copyID);    ArgValidator.checkEntity(mirror,copyID,true);    if (!mirror.getSource().getURI().equals(id)) {      throw APIException.badRequests.invalidParameterBlockCopyDoesNotBelongToVolume(copyID,id);    } else {      mirrorList=new ArrayList();      mirrorList.add(mirror.getId());    }  }  String task=UUID.randomUUID().toString();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  BlockServiceApi blockServiceApi=getBlockServiceImpl("mirror");  return blockServiceApi.stopNativeContinuousCopies(storageSystem,sourceVolume,mirrorList,task);}  }
class C{  public java.lang.StringBuffer insert(int offset,char c){  return null;}  }
class C{  public boolean isAutoPeriodControl(){  Object oo=get_Value(COLUMNNAME_AutoPeriodControl);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void drawOutline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  float x0=(float)dataArea.getX();  float x1=x0 + (float)Math.abs(this.xOffset);  float x3=(float)dataArea.getMaxX();  float x2=x3 - (float)Math.abs(this.xOffset);  float y0=(float)dataArea.getMaxY();  float y1=y0 - (float)Math.abs(this.yOffset);  float y3=(float)dataArea.getMinY();  float y2=y3 + (float)Math.abs(this.yOffset);  GeneralPath clip=new GeneralPath();  clip.moveTo(x0,y0);  clip.lineTo(x0,y2);  clip.lineTo(x1,y3);  clip.lineTo(x3,y3);  clip.lineTo(x3,y1);  clip.lineTo(x2,y0);  clip.closePath();  Stroke outlineStroke=plot.getOutlineStroke();  Paint outlinePaint=plot.getOutlinePaint();  if ((outlineStroke != null) && (outlinePaint != null)) {    g2.setStroke(outlineStroke);    g2.setPaint(outlinePaint);    g2.draw(clip);  }}  }
class C{  public static int byteLengthUnicode(final String s){  return Bytes.SIZEOF_INT + s.length();}  }
class C{  public static <T>Iterable<T> synchronizedCreateIterable(Collection<T> collection){  Iterable<T> iterable;synchronized (collection) {    iterable=new ArrayList<T>(collection);  }  return iterable;}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");synchronized (session) {      closeOldResultSet();      if (conn != null) {        conn=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected boolean isOpen(){  return open;}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public static void deactivate(){  checkTransformerState();  MockFramework.disable();  transformer.deactivate();  LoopCounter.getInstance().setActive(false);}  }
class C{  public static void test(int size,RandomEngine randomEngine){  RandomEngine random;  System.out.println("\n\nint():");  random=(RandomEngine)randomEngine.clone();  for (int j=0, i=size; --i >= 0; j++) {    System.out.print(" " + random.nextInt());    if (j % 8 == 7)     System.out.println();  }  System.out.println("\n\nGood bye.\n");}  }
class C{  void writeExceptions(Environment env,DataOutputStream out,ConstantPool tab,Instruction first,Instruction last) throws IOException {  for (Instruction inst=first; inst != last.next; inst=inst.next) {    if (inst.opc == opc_try) {      TryData td=(TryData)inst.value;      writeExceptions(env,out,tab,inst.next,td.getEndLabel());      for (Enumeration<CatchData> e=td.catches.elements(); e.hasMoreElements(); ) {        CatchData cd=e.nextElement();        out.writeShort(inst.pc);        out.writeShort(td.getEndLabel().pc);        out.writeShort(cd.getLabel().pc);        if (cd.getType() != null) {          out.writeShort(tab.index(cd.getType()));        } else {          out.writeShort(0);        }      }      inst=td.getEndLabel();    }  }}  }
class C{  private void deleteItems(long[] checkedItemIds,ActionMode mode){  ArrayList<File> itemsToRemove=new ArrayList<>();  for (  long id : checkedItemIds) {    itemsToRemove.add(mChooserAdapter.getItem((int)id));  }  AndroidUtils.FileDeleteTask deleteTask=new AndroidUtils.FileDeleteTask(this,itemsToRemove);  deleteTask.execute();}  }
class C{  public void test_metric_cpu_num_uint16(){  final IGangliaMetadataMessage decl=new GangliaMetadataMessage("bigdata10","cpu_num",false,GangliaMessageTypeEnum.UINT16,"cpu_num","CPUs",GangliaSlopeEnum.zero,1200,0,AbstractMetrics.getMap(IGangliaAttributes.GROUP_CPU,"CPU Count","Total number of CPUs"));  assertEncodeDecode(null,decl);  final IGangliaMetricMessage expected=new GangliaMetricMessage(GangliaMessageTypeEnum.UINT16,"bigdata10","cpu_num",false,"%hu",Integer.valueOf(4));  final byte[] actualData=assertEncodeDecode(decl,expected);  final byte[] expectedData=new byte[]{0,0,0,-127,0,0,0,9,98,105,103,100,97,116,97,49,48,0,0,0,0,0,0,7,99,112,117,95,110,117,109,0,0,0,0,0,0,0,0,3,37,104,117,0,0,0,0,4};  if (!Arrays.equals(expectedData,actualData)) {    fail("expect: " + Arrays.toString(expectedData) + ", actual="+ Arrays.toString(actualData));  }}  }
class C{  private void removeDataListeners(){  ObdProt.PidPvs.removePvChangeListener(this);  ObdProt.VidPvs.removePvChangeListener(this);  ObdProt.tCodes.removePvChangeListener(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.236 -0500",hash_original_method="B5801BDD799BA7062410BD396AAB4B71",hash_generated_method="EEA7EB5F4B366192F4A7B398038D92DF") public WebResourceResponse shouldInterceptRequest(WebView view,String url){  return null;}  }
class C{  public void reply(Object message){  if (context.sender() != null) {    context.sender().send(message,self());  }}  }
class C{  @SuppressWarnings("fallthrough") private String nextLiteral(boolean assignOffsetsOnly) throws IOException {  StringBuilder builder=null;  valuePos=-1;  valueLength=0;  int i=0;  findNonLiteralCharacter:   while (true) {    for (; pos + i < limit; i++) {switch (buffer[pos + i]) {case '/':case '\\':case ';':case '#':case '=':        checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':      break findNonLiteralCharacter;  }}if (i < buffer.length) {  if (fillBuffer(i + 1)) {    continue;  } else {    buffer[limit]='\0';    break;  }}if (builder == null) {  builder=new StringBuilder();}builder.append(buffer,pos,i);valueLength+=i;pos+=i;i=0;if (!fillBuffer(1)) {  break;}}String result;if (assignOffsetsOnly && builder == null) {valuePos=pos;result=null;} else if (skipping) {result="skipped!";} else if (builder == null) {result=stringPool.get(buffer,pos,i);} else {builder.append(buffer,pos,i);result=builder.toString();}valueLength+=i;pos+=i;return result;}  }
class C{  private ImmutableStack(T head,ImmutableStack<T> tail){  this.head=head;  this.tail=tail;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final double[][] transpose(final double[][] m1){  final int columndimension=getColumnDimensionality(m1);  final double[][] re=new double[columndimension][m1.length];  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      re[j][i]=m1[i][j];    }  }  return re;}  }
class C{  private boolean actionIsAccepted(final UserActionAttachment uaa){  for (  final PlayerID player : uaa.getActionAccept()) {    if (!(getRemotePlayer(player)).acceptAction(m_player,UserActionText.getInstance().getAcceptanceQuestion(uaa.getText()),false)) {      return false;    }  }  return true;}  }
class C{  public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null && !mMenu.getNonActionItems().isEmpty()) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  private OutfitStore(final SpriteStore store){  this.store=store;  bodies=outfits + "/body";  heads=outfits + "/head";}  }
class C{  public final double distanceTo(Vec4 p){  return p.distanceTo3(this.nearestPointTo(p));}  }
class C{  public AbIocEventListener noSelect(String method){  this.nothingSelectedMethod=method;  return this;}  }
class C{  public void decreaseKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (greater(key,nodes[i].key))   throw new IllegalArgumentException("Calling with this argument would not decrease the key");  Node<Key> x=nodes[i];  x.key=key;  swim(i);}  }
class C{  private void testAdjustIntegerValue(Integer testValue,Integer expectedValue){  DataBridgeController dataBridgeController=new BasicDataBridgeController();  assertEquals(expectedValue,dataBridgeController.adjustIntegerValue(testValue,DataBridgeController.MIN_THREADS,DataBridgeController.MAX_THREADS));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public double pdf(double x){  if (x <= min || x >= max)   return 0.0;  return 1.0 / (max - min);}  }
class C{  @Override public void run(){  tracker.persist(false);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANNOTABLE_ELEMENT;}  }
class C{  public synchronized void removeConnectionManager(final HttpConnectionManager connectionManager){  if (shutdown) {    throw new IllegalStateException("IdleConnectionTimeoutThread has been shutdown");  }  connectionManagers.remove(connectionManager);}  }
class C{  public void send(String name,String value,long timestamp) throws IOException {  metrics.add(new MetricTuple(sanitize(name),timestamp,sanitize(value)));  if (metrics.size() >= batchSize) {    writeMetrics();  }}  }
class C{  Operation findBestArcToReverse(BayesNet bayesNet,Instances instances,Operation oBestOperation){  int nNrOfAtts=instances.numAttributes();  for (int iNode=0; iNode < nNrOfAtts; iNode++) {    ParentSet parentSet=bayesNet.getParentSet(iNode);    for (int iParent=0; iParent < parentSet.getNrOfParents(); iParent++) {      int iTail=parentSet.getParent(iParent);      if (reverseArcMakesSense(bayesNet,instances,iNode,iTail) && bayesNet.getParentSet(iTail).getNrOfParents() < m_nMaxNrOfParents) {        Operation oOperation=new Operation(parentSet.getParent(iParent),iNode,Operation.OPERATION_REVERSE);        if (m_Cache.get(oOperation) > oBestOperation.m_fDeltaScore) {          if (isNotTabu(oOperation)) {            oBestOperation=oOperation;            oBestOperation.m_fDeltaScore=m_Cache.get(oOperation);          }        }      }    }  }  return oBestOperation;}  }
class C{  public RoundBorder uiid(boolean uiid){  this.uiid=uiid;  return this;}  }
class C{  public static int[] clone(int[] array){  if (array == null) {    return null;  }  return (int[])array.clone();}  }
class C{  public CharMemberValue(char c,ConstPool cp){  super('C',cp);  setValue(c);}  }
class C{  public void testCase4(){  byte aBytes[]={3,4,5,6,7,8,9};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={-3,-3,-3,-3,-3,-3,-2};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Iterator<DetectorFactory> factoryIterator(){  return factoryList.iterator();}  }
class C{  private static Integer forPrimary(Ignite g,int prev){  for (int i=prev + 1; i < 10000; i++) {    if (g.affinity(null).mapKeyToNode(i).id().equals(g.cluster().localNode().id()))     return i;  }  throw new IllegalArgumentException("Can not find key being primary for node: " + g.cluster().localNode().id());}  }
class C{  public static TextEdit format2(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  return format2(kind,source,0,source.length(),indentationLevel,lineSeparator,options);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Product fromJson(String json){  Gson gson=BuyClientUtils.createDefaultGson(Product.class);  Product product=gson.fromJson(json,Product.class);  List<ProductVariant> variants=product.getVariants();  if (variants != null) {    for (    ProductVariant variant : variants) {      variant.productId=product.productId;      variant.productTitle=product.getTitle();      Image image=product.getImage(variant);      if (image != null) {        variant.imageUrl=image.getSrc();      }    }  }  product.tagSet=new HashSet<>();  if (!TextUtils.isEmpty(product.tags)) {    for (    String tag : product.tags.split(",")) {      String myTag=tag.trim();      product.tagSet.add(myTag);    }  }  return product;}  }
class C{  public static boolean renameFile(File from,File to){  if (!from.exists()) {    return false;  }  long length=from.length();  try {    if (to.exists()) {      if (!to.delete()) {        File old=new File(to.getAbsolutePath() + ".old");        if (old.exists()) {          old.delete();        }        if (to.renameTo(old) && !old.delete()) {        }      }    }  } catch (  Exception e) {  }  try {    if (from.renameTo(to)) {      return true;    }    BufferedInputStream in=new BufferedInputStream(new FileInputStream(from));    BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(to));    byte[] buf=new byte[8 * 1024];    long remain=from.length();    try {      while (remain > 0) {        int r=in.read(buf);        if (r < 0) {          return false;        }        remain-=r;        out.write(buf,0,r);        out.flush();      }    }  finally {      in.close();      out.close();    }    long tolength=to.length();    if (tolength == length) {      from.delete();      return true;    } else {      return false;    }  } catch (  Exception e) {    return false;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.288 -0500",hash_original_method="5D984FCFBC4DFCA56D23D59535D24C8C",hash_generated_method="E2FA9012281FF4E6A4AF0779576B517D") public PortUnreachableException(String detailMessage){  super(detailMessage);}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public Edge(DirectedEdge de0,DirectedEdge de1){  setDirectedEdges(de0,de1);}  }
class C{  public void initOptions(){  String[] bannedWords=FilterSettings.BANNED_WORDS.getValue();  RESULTS_LIST.setModel(new Vector<String>(Arrays.asList(bannedWords)));  IGNORE_ADULT_CHECK_BOX.setSelected(FilterSettings.FILTER_ADULT.getValue());}  }
class C{  public EntityReference createEntityReference(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  protected boolean checkConsistency(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textindexsizeerroffsetoutofbounds.class,args);}  }
class C{  @Deprecated public static final HeaderElement[] parse(final String headerValue) throws HttpException {  LOG.trace("enter HeaderElement.parse(String)");  if (headerValue == null) {    return new HeaderElement[]{};  }  return parseElements(headerValue.toCharArray());}  }
class C{  public static String formatTimeWithMillis(Date date){synchronized (dateMillisFormat) {    return dateMillisFormat.format(date);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_DEACTIVATION___TRACECASE_DEACT_NAME_1:    setTracecase_deact_name_1(TRACECASE_DEACT_NAME_1_EDEFAULT);  return;case UmplePackage.TRACE_CASE_DEACTIVATION___DE_ACTIVATE_FOR_1:getDeActivateFor_1().clear();return;}super.eUnset(featureID);}  }
class C{  private static boolean checkAuth(final HttpRequest httpRequest){  if (httpRequest.getUri().startsWith("/root/hello")) {    final String x_security_token=httpRequest.headers().getFirst("X-SECURITY-TOKEN");    if ("shibboleth".equals(x_security_token)) {      return true;    } else {      httpRequest.getReceiver().response(401,"application/json","\"shove off\"");      return false;    }  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EXECUTE_CLAUSE___TRACE_EXECUTE_1:    return TRACE_EXECUTE_1_EDEFAULT == null ? trace_execute_1 != null : !TRACE_EXECUTE_1_EDEFAULT.equals(trace_execute_1);}return super.eIsSet(featureID);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.GATEWAY__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.GATEWAY__TO_CHANNELS:getToChannels().clear();return;case EipPackage.GATEWAY__FROM_CHANNELS:getFromChannels().clear();return;}super.eUnset(featureID);}  }
class C{  public void executeTrial(){  currentState.reset();  for (  Agent a : agents) {    a.setAlive(true);    currentState.setAgentLocation(a,startingCell);  }  stepUntilDone();}  }
class C{  private String initUsingCorbanameUrl(ORB orb,String url,Hashtable<?,?> env) throws NamingException {  if (orb == null)   orb=getDefaultOrb();  try {    CorbanameUrl parsedUrl=new CorbanameUrl(url);    String corbaloc=parsedUrl.getLocation();    String cosName=parsedUrl.getStringName();    setOrbAndRootContext(orb,corbaloc);    return parsedUrl.getStringName();  } catch (  MalformedURLException e) {    throw new ConfigurationException(e.getMessage());  }}  }
class C{  public TIntHash(TIntHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public WbXmlDefinition locateLinkedDefinitionForTag(String name){  for (  WbXmlDefinition def : linkedDefinitions.values()) {    if (def.locateTag(name) != null) {      return def;    }  }  return null;}  }
class C{  public static void warn(String message){  show(message,MessageType.WARNING);}  }
class C{  public static VMInfo createDeadVM(int vmid,LocalVirtualMachine localVm){  return createDeadVM(vmid,localVm,VMInfoState.ERROR_DURING_ATTACH);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  protected void fireOptionSelected(URIChooser pane,int option){  SheetEvent sheetEvent=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SheetListener.class) {      if (sheetEvent == null) {        sheetEvent=new SheetEvent(this,pane,option,null);      }      ((SheetListener)listeners[i + 1]).optionSelected(sheetEvent);    }  }}  }
class C{  private void storeErrorAndDeltas(Neuron neuron,double error){  double errorSignal=0;  if (neuron.getUpdateRule() instanceof DifferentiableUpdateRule) {    double derivative=((DifferentiableUpdateRule)neuron.getUpdateRule()).getDerivative(neuron.getWeightedInputs());    errorSignal=error * derivative;    errorMap.put(neuron,errorSignal);  }  for (  Synapse synapse : neuron.getFanIn()) {    double lastWeightDelta=0;    if (weightDeltaMap.get(synapse) != null) {      lastWeightDelta=weightDeltaMap.get(synapse);    }    double weightDelta=learningRate * errorSignal * synapse.getSource().getActivation() + momentum * lastWeightDelta;    if (weightDeltaMap.get(synapse) == null) {      weightDeltaMap.put(synapse,weightDelta);    } else {      weightDeltaMap.put(synapse,weightDeltaMap.get(synapse) + weightDelta);    }  }  if (neuron.getUpdateRule() instanceof BiasedUpdateRule) {    double biasUpdate=learningRate * errorSignal;    if (biasDeltaMap.get(neuron) == null) {      biasDeltaMap.put(neuron,biasUpdate);    } else {      biasDeltaMap.put(neuron,biasDeltaMap.get(neuron) + biasUpdate);    }  }}  }
class C{  public T caseEnumMappingRule(EnumMappingRule object){  return null;}  }
class C{  public ExternalCommand(String... command){  mCommand=command;}  }
class C{  @Override public synchronized void write(byte[] b,int off,int len) throws IOException {  if ((off | len | (b.length - (len + off))| (off + len)) < 0) {    throw new IndexOutOfBoundsException();  }  int bytesWritten=0;  while (bytesWritten < len) {    throwOnFlusherError();    flushBufferIfSizeLimitReached();    int bytesToWrite=Math.min(len - bytesWritten,buf.length - count);    System.arraycopy(b,off + bytesWritten,buf,count,bytesToWrite);    count+=bytesToWrite;    bytesWritten+=bytesToWrite;  }}  }
class C{  public ZDT1(){  this(30);}  }
class C{  private static boolean withinOne(INode n,INode goal){  DoubleLinkedList<IMove> moves=n.validMoves();  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {    IMove move=it.next();    INode successor=n.copy();    move.execute(successor);    if (ge.eval(successor) < bestProbe) {      bestProbe=ge.eval(successor);      if (bestProbe == 17) {        System.out.println("search tree closed:" + (closed.size() + " open:" + open.size()));      }      System.out.println("close (" + bestProbe + "):\n"+ successor);      return true;    }  }  return false;}  }
class C{  private void requestInputMethod(Dialog dialog){  Window window=dialog.getWindow();  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}  }
class C{  public void notifyChanged(){synchronized (mObservers) {    for (    DataSetObserverExtended observer : mObservers) {      observer.onChanged();    }  }}  }
class C{  @Override public void writeToText(TextWriterStream out,String label){  if (label != null) {    out.commentPrintLn(label);  }  out.commentPrintLn("Model class: " + this.getClass().getName());  try {    if (getNormalizedLinearEquationSystem(null) != null) {      LinearEquationSystem lq=getNormalizedLinearEquationSystem(null);      out.commentPrint("Linear Equation System: ");      out.commentPrintLn(lq.equationsToString(nf));    }  } catch (  NonNumericFeaturesException e) {    LoggingUtil.exception(e);  }}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);}  }
class C{  @Override public void runSyncIgnore(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {  runSync(localName,modelService,context);}  }
class C{  @LoadBalanced @Bean RestTemplate restTemplate(){  return new RestTemplate();}  }
class C{  public boolean hasClassIndex(){  return (classIndex >= 0);}  }
class C{  public static List<History> findHistoryByJobAndStatus(EntityManager em,JPAEntity job,BigInteger limit,JobStatus jobStatus){  requireArgument(em != null,"Entity manager cannot be null.");  requireArgument(job != null,"The job cannot be null.");  TypedQuery<History> query=em.createNamedQuery("History.findByJobAndStatus",History.class);  if (limit != null) {    query.setMaxResults(limit.intValue());  }  try {    query.setParameter("entity",job);    query.setParameter("jobStatus",jobStatus);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<History>(0);  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public Double(double x,double y,double w,double h){  setFrame(x,y,w,h);}  }
class C{  private void init(){  updatePosition();  this.addChild(circle);  this.addChild(line);  line.setStrokePaint(Color.BLACK);  line.lowerToBottom();  updateColor();  updateDiameter();  setPickable(true);  circle.setPickable(true);  line.setPickable(false);}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int width=display.getWidth();  int height=display.getHeight();  screenResolution=new Point(width,height);  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  private void changeShip(ObservableValue<? extends ShipWrapper> observable,ShipWrapper oldValue,ShipWrapper value){  if (value != null) {    Ship ship=value.getShip();    this.changeShip(ship);    for (    ShortageShipItem ss : this.item.filtered(null)) {      ShortageShipItem selected=shortageShip.getSelectionModel().getSelectedItem();      if (selected != null && selected.equals(ss))       continue;      this.shortageShip.getSelectionModel().select(ss);      this.shortageShip.scrollTo(ss);    }  }}  }
class C{  public void show(){  addToWindow(mIconView);  updateSize();  if (mInitialX != -1 || mInitialY != -1) {    setPosition(mInitialX,mInitialY,true);  } else {    goToWall();  }}  }
class C{  public static boolean mkdirs(File file){  final File parentFile=file.getAbsoluteFile().getParentFile();  if (!parentFile.exists()) {    mkdirs(parentFile);  }  if (parentFile.exists()) {    return file.mkdir();  } else {    return false;  }}  }
class C{  protected void onContentFetchError(WebURL webUrl){  logger.warn("Can't fetch content of: {}",webUrl.getURL());}  }
class C{  private static long writeFile(String path,byte[] data){  FileOutputStream out=null;  try {    out=new FileOutputStream(path);    out.write(data);    return data.length;  } catch (  Exception e) {    Log.e(TAG,"Failed to write data",e);  } finally {    try {      out.close();    } catch (    Exception e) {      Log.e(TAG,"Failed to close file after write",e);    }  }  return -1;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  @Override public boolean isLocationProhibited(Coords c,int currElevation){  IHex hex=game.getBoard().getHex(c);  if (isHidden()) {    if (hex.containsTerrain(Terrains.PAVEMENT) || hex.containsTerrain(Terrains.ROAD)) {      return true;    }    if ((hex.terrainLevel(Terrains.BRIDGE_ELEV) == currElevation) && hex.containsTerrain(Terrains.BRIDGE)) {      return true;    }    if (hex.containsTerrain(Terrains.WATER) && (currElevation == 0)) {      return true;    }    if (hex.isClearHex()) {      return true;    }  }  return super.isLocationProhibited(c,currElevation);}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    checkClosed();    if (command.isQuery()) {      super.executeQuery();      return 0;    }    return super.executeUpdate();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return true;}  }
class C{  public void writeRawBytes(final ByteString value) throws IOException {  writeRawBytes(value,0,value.size());}  }
class C{  public String sprintf(){  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%");  }  return sb.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.FEATURE_CONFIGURATION;}  }
class C{  public Style(Style style){  this(style.getFgColor(),style.getBgColor(),style.getFont(),style.getBgTransparency(),style.getBgImage());  setPadding(style.padding[Component.TOP],style.padding[Component.BOTTOM],style.padding[Component.LEFT],style.padding[Component.RIGHT]);  setMargin(style.margin[Component.TOP],style.margin[Component.BOTTOM],style.margin[Component.LEFT],style.margin[Component.RIGHT]);  setPaddingUnit(style.paddingUnit);  setMarginUnit(style.marginUnit);  setBorder(style.getBorder());  opacity=style.opacity;  modifiedFlag=0;  align=style.align;  backgroundType=style.backgroundType;  backgroundAlignment=style.backgroundAlignment;  textDecoration=style.textDecoration;  if (style.backgroundGradient != null) {    backgroundGradient=new Object[style.backgroundGradient.length];    System.arraycopy(style.backgroundGradient,0,backgroundGradient,0,backgroundGradient.length);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.602 -0500",hash_original_method="BB6E18DBBED43A4BEB60B225A721A13E",hash_generated_method="7103C6B66DFFFE020479B9B82737731A") private boolean toRetransmitFinalResponse(int T2){  if (--retransmissionTicksLeft == 0) {    if (2 * prevRetransmissionTicks <= T2)     this.retransmissionTicksLeft=2 * prevRetransmissionTicks; else     this.retransmissionTicksLeft=prevRetransmissionTicks;    this.prevRetransmissionTicks=retransmissionTicksLeft;    return true;  } else   return false;}  }
class C{  @Override public void caretUpdate(CaretEvent event){  setButtons();}  }
class C{  private String convertOffsetToHumanReadableFormat(int columnOffset,int confRowOffset,int columnLast,int rowLast){  StringBuilder rangeBuilder=new StringBuilder();  if (columnOffset >= 0) {    rangeBuilder.append(XlsxUtilities.convertToColumnName(columnOffset));  }  if (confRowOffset >= 0) {    rangeBuilder.append(confRowOffset + 1);  }  boolean colonAdded=false;  if (rowLast == -1 || columnLast == -1) {    rangeBuilder.append(":");    colonAdded=true;  }  if (columnLast != Integer.MAX_VALUE && columnLast != -1) {    if (!colonAdded) {      rangeBuilder.append(":");      colonAdded=true;    }    rangeBuilder.append(XlsxUtilities.convertToColumnName(columnLast));  }  if (rowLast != Integer.MAX_VALUE && rowLast != -1) {    if (!colonAdded) {      rangeBuilder.append(":");      colonAdded=true;    }    rangeBuilder.append(rowLast + 1);  }  return rangeBuilder.toString();}  }
class C{  public String toString(){  return "WWindowStatus[" + mWindow + " - "+ curTab+ "]";}  }
class C{  private void addProbabilityRule(AnchoredRule arule){  String ruleId=arule.getVariable();  if (hasChanceNode(ruleId)) {    removeNode(ruleId);  }  ChanceNode ruleNode=new ChanceNode(ruleId,arule);  ruleNode.getValues();  Stream.concat(arule.getInputVariables().stream(),arule.getParameters().stream()).distinct().forEach(null);  addNode(ruleNode);  for (  String updatedVar : arule.getOutputs()) {    ChanceNode outputNode;    OutputDistribution outputDistrib;    if (!hasNode(updatedVar)) {      outputDistrib=new OutputDistribution(updatedVar);      outputNode=new ChanceNode(updatedVar,outputDistrib);      addNode(outputNode);      connectToPredictions(outputNode);    } else {      outputNode=getChanceNode(updatedVar);      outputDistrib=(OutputDistribution)outputNode.getDistrib();    }    outputNode.addInputNode(ruleNode);    outputDistrib.addAnchoredRule(arule);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (derivedFeatureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:      return N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private ResultList retrieveMetricsWithKey(String[] metrics,String metricgroup,String subGroup,DBInstanceInfo dbinfo,String startDate,String endDate,boolean agg){  ResultList rList=null;  try {    String tblName=subGroup;    if (tblName == null || tblName.isEmpty() || tblName.equals("_"))     tblName=metricgroup;    if (metricgroup.startsWith("UDM_"))     tblName=metricgroup; else     tblName="MYSQL_" + tblName;    List<Metric> mtrs=this.frameworkContext.getMetricsDef().getMetrics(metricgroup,subGroup,metrics);    long sqlStartTime=System.currentTimeMillis();    rList=this.frameworkContext.getMetricDb().retrieveMetrics(tblName.toUpperCase(),mtrs.toArray(new Metric[0]),true,dbinfo.getDbid(),Long.parseLong(startDate),Long.parseLong(endDate),agg);    logger.info("Time used to retrieve metrics from MYSQL_" + tblName + ": "+ (System.currentTimeMillis() - sqlStartTime)+ "ms");    MetricsResultObject mrs=new MetricsResultObject();    String prefix=metricgroup + ".";    if (metricgroup.startsWith("UDM_"))     prefix="UDM." + subGroup + "."; else     if (subGroup == null || subGroup.isEmpty())     prefix+="_."; else     prefix+=subGroup + ".";    for (    Metric m : mtrs)     m.setName(prefix + m.getName());    mrs.setMetrics(mtrs);    rList.addCustomeObject(mrs);  } catch (  Throwable th) {    logger.log(Level.WARNING,"Failed to retrieve metrics",th);  }  return rList;}  }
class C{  public synchronized void close() throws IOException {  if (log == null)   return;  try {    log.close();  }  finally {    log=null;  }}  }
class C{  static boolean equals(Object o1,Object o2){  return o1 == o2 || (o1 != null && o2 != null && o1.equals(o2));}  }
class C{  public static String join(Collection<?> strings,String delimiter){  if (strings.size() == 0) {    return "";  }  StringBuilder builder=new StringBuilder(30 * strings.size());  for (  Object string : strings) {    builder.append(string).append(delimiter);  }  builder.setLength(builder.length() - delimiter.length());  return builder.toString();}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public boolean with_classfield(){  return soot.PhaseOptions.getBoolean(options,"with-classfield");}  }
class C{  public static IProgressListener secure(IProgressListener pl){  return (pl == null) ? DPH : pl;}  }
class C{  public final DD divide(DD y){  double hc, tc, hy, ty, C, c, U, u;  C=hi / y.hi;  c=SPLIT * C;  hc=c - C;  u=SPLIT * y.hi;  hc=c - hc;  tc=C - hc;  hy=u - y.hi;  U=C * y.hi;  hy=u - hy;  ty=y.hi - hy;  u=(((hc * hy - U) + hc * ty) + tc * hy) + tc * ty;  c=((((hi - U) - u) + lo) - C * y.lo) / y.hi;  u=C + c;  double zhi=u;  double zlo=(C - u) + c;  return new DD(zhi,zlo);}  }
class C{  private Eap(){}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();switch (resType) {case CUresourcetype.CU_RESOURCE_TYPE_ARRAY:    sb.append("hArray=" + array_hArray + f);  break;case CUresourcetype.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:sb.append("hMipmappedArray=" + mipmap_hMipmappedArray + f);break;case CUresourcetype.CU_RESOURCE_TYPE_LINEAR:sb.append("devPtr=" + linear_devPtr + f);sb.append("format=" + CUarray_format.stringFor(linear_format) + f);sb.append("numChannels=" + linear_numChannels + f);sb.append("sizeInBytes=" + linear_sizeInBytes + f);break;case CUresourcetype.CU_RESOURCE_TYPE_PITCH2D:sb.append("devPtr=" + pitch2D_devPtr + f);sb.append("format=" + CUarray_format.stringFor(pitch2D_format) + f);sb.append("numChannels=" + pitch2D_numChannels + f);sb.append("width=" + pitch2D_width + f);sb.append("height=" + pitch2D_height + f);sb.append("pitchInBytes=" + pitch2D_pitchInBytes + f);break;default :sb.append("INVALID");}return sb.toString();}  }
class C{  protected MultiPhraseQuery.Builder newMultiPhraseQueryBuilder(){  return new MultiPhraseQuery.Builder();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.468 -0500",hash_original_method="0E39EDEFDBAD265D57AEBE040714053D",hash_generated_method="28389AACF03C7529BD68E2054F6204CB") public void removeParameter(String parameterName){  if (!(address instanceof SipUri))   throw new RuntimeException("address is not a SipUri");  SipUri uri=(SipUri)address;  uri.removeParameter(parameterName);}  }
class C{  public XmlTextParser(){  m_text=null;  m_pos=-1;}  }
class C{  @LargeTest public void testThumbnailForInvalidFilePath() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "/sdcard/abc.jpg";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaImageItem mii=new MediaImageItem(mVideoEditor,"m1",imageItemFileName,3000,renderingMode);  } catch (  IllegalArgumentException e) {    flagForException=true;  }catch (  IOException e) {    flagForException=true;  }  assertTrue(" Invalid File Path",flagForException);}  }
class C{  public boolean forEachDescending(TIntProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public void isColoredBackground(boolean coloredBackground){  this.coloredBackground=coloredBackground;}  }
class C{  public ShortTermPlasticityRulePanel(){  this.addItem("Plasticity type",cbPlasticityType);  this.addItem("Base-line-strength",tfBaseLineStrength);  this.addItem("Firing threshold",tfFiringThreshold);  this.addItem("Growth-rate",tfBumpRate);  this.addItem("Decay-rate",tfDecayRate);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConstraintBody_();}  }
class C{  public HindiNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static String unEnclose(String s){  if (s.startsWith("(") && s.endsWith(")")) {    return s.substring(1,s.length() - 1);  }  return s;}  }
class C{  public static void main(String[] args){  TestHtmlTag tester=new TestHtmlTag();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  run(tester,ARGS3,TEST3,NEGATED_TEST3);  tester.printSummary();}  }
class C{  @Override public Map<byte[],byte[]> hgetAll(final byte[] key){  checkIsInMultiOrPipeline();  client.hgetAll(key);  final List<byte[]> flatHash=client.getBinaryMultiBulkReply();  final Map<byte[],byte[]> hash=new JedisByteHashMap();  final Iterator<byte[]> iterator=flatHash.iterator();  while (iterator.hasNext()) {    hash.put(iterator.next(),iterator.next());  }  return hash;}  }
class C{  public GenericPropertiesCreator() throws Exception {  super(MEKA_CREATOR_FILE);  m_ExplicitPropsFile=false;  if (DEBUG)   System.out.println("start<GenericPropertiesCreator/find: " + MEKA_CREATOR_FILE + ">\n"+ Utils.arrayToString(PropsUtils.find(MEKA_CREATOR_FILE))+ "\nend<GenericPropertiesCreator/find: + "+ MEKA_CREATOR_FILE+ ">\n");}  }
class C{  public MaterializeBuilder withStatusBarColor(@ColorInt int statusBarColor){  this.mStatusBarColor=statusBarColor;  return this;}  }
class C{  public static boolean isValidExpression(final String cronExpression){  try {    new CronExpression(cronExpression);  } catch (  final ParseException pe) {    return false;  }  return true;}  }
class C{  public static boolean assertFalse(final String msg,final boolean check){  if (check) {    throw new ExamException(msg);  }  return true;}  }
class C{  private static void sendLogLegacy(){  try {    if (!Display.isInitialized()) {      return;    }    if (!instance.logDirty) {      return;    }    instance.logDirty=false;    long devId=getUniqueDeviceId();    if (devId < 0) {      Dialog.show("Send Log Error","Device Not Registered: Sending a log from an unregistered device is impossible","OK",null);      return;    }    ConnectionRequest r=new ConnectionRequest();    r.setPost(false);    r.setUrl(Display.getInstance().getProperty("cloudServerURL","https://codename-one.appspot.com/") + "uploadLogRequest");    r.setFailSilently(true);    NetworkManager.getInstance().addToQueueAndWait(r);    String url=new String(r.getResponseData());    MultipartRequest m=new MultipartRequest();    m.setUrl(url);    byte[] read=Util.readInputStream(Storage.getInstance().createInputStream("CN1Log__$"));    m.addArgument("i","" + devId);    m.addArgument("by",Display.getInstance().getProperty("built_by_user",""));    m.addArgument("p",Display.getInstance().getProperty("package_name",""));    m.addArgument("v",Display.getInstance().getProperty("AppVersion","0.1"));    m.addData("log",read,"text/plain");    m.setFailSilently(true);    NetworkManager.getInstance().addToQueueAndWait(m);  } catch (  Throwable ex) {    ex.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.198 -0500",hash_original_method="28C7C5FF233FA752A95A4980EB733491",hash_generated_method="2F846477F27E4E0526BED076D2581381") public boolean clipRegion(Region region,Region.Op op){  addTaint(region.getTaintInt() + op.nativeInt);  return getTaintBoolean();}  }
class C{  private void addReadPermissions(Set<ObjectPermission> permissions,Collection<String> identifiers){  for (  String identifier : identifiers) {    permissions.add(new ObjectPermission(ObjectPermission.Type.READ,identifier));  }}  }
class C{  public TPrimitiveHash(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public Direction calculateDirectionFromEntity(Entity entity){  if (provider instanceof Block) {    Vector3D position=entity.position();    if (FastMath.abs(position.getX() - ((Block)provider).x()) < 2.0F && FastMath.abs(position.getZ() - ((Block)provider).z()) < 2.0F) {      double height=position.add(entity.components.get(Living.class).faceDisplacement.get()).getY();      if (height - ((Block)provider).y() > 2.0D) {        return Direction.fromOrdinal(1);      }      if (((Block)provider).y() - height > 0.0D) {        return Direction.fromOrdinal(0);      }    }    int l=(int)FastMath.floor((entity.rotation().getAngles(RotationUtil.DEFAULT_ORDER)[0] * 4 / (2 * Math.PI)) + 0.5D) & 3;    int dir=l == 0 ? 3 : (l == 1 ? 5 : (l == 2 ? 2 : (l == 3 ? 4 : 0)));    return (isFlip) ? Direction.fromOrdinal(dir).opposite() : Direction.fromOrdinal(dir);  }  return Direction.UNKNOWN;}  }
class C{  public Object extractJavaFieldValue(Object object) throws SQLException {  Object val=extractRawJavaFieldValue(object);  if (foreignIdField != null && val != null) {    val=foreignIdField.extractRawJavaFieldValue(val);  }  return val;}  }
class C{  public void testAttachFragmentUi_showsSpinnerDuringSyncWhenLocationsNotPresent(){  mFakeSyncManager.setSyncing(true);  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  verify(mMockFragmentUi).setBusyLoading(true);}  }
class C{  boolean unlockItemOfferInternally(String partnerName){  if ((this.partnerName == null) || this.partnerName.equals(partnerName)) {    if (LOCKED_STATES.contains(tradeState)) {      tradeState=TradeState.OFFERING_TRADE;      return true;    }  }  return false;}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  boolean shouldAddAttrs;  try {    SerializationHandler rhandler=transformer.getResultTreeHandler();    if (null == nodeName) {      shouldAddAttrs=false;    } else {      if (null != prefix) {        rhandler.startPrefixMapping(prefix,nodeNamespace,true);      }      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      super.execute(transformer);      shouldAddAttrs=true;    }    transformer.executeChildTemplates(this,shouldAddAttrs);    if (null != nodeName) {      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      if (null != prefix) {        rhandler.endPrefixMapping(prefix);      }    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public SText(short x1,short y1,String data,java.awt.Font font,short justify){  super(GraphicType.GT_Text,RenderType.RT_XY,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=new LLPoint(0f,0f);  p1_=new XYPoint(x1,y1);  data_=data;  realFont_=font;  justify_=justify;}  }
class C{  private void rebuildTableData(){  final TrackerEvents trackerEvents=repProc.replay.trackerEvents;  final BalanceData balanceData=repProc.replay.getBalanceData();  final boolean archon=repProc.isArchon();  final Vector<Object> columns=new Vector<>();  columns.add("Time");  if (archon) {    for (int team=0; team < 2; team++) {      StringBuilder sb=null;      User leader=null;      for (      final User u : repProc.playerUsers) {        if (u.slot.teamId != team)         continue;        if (sb == null) {          sb=new StringBuilder("TEAM ").append(team + 1).append(" &lt;");          leader=u.slot.getTandemLeaderUserId() == null ? u : repProc.usersByUserId[u.slot.getTandemLeaderUserId()];        } else         sb.append(", ");        sb.append(u.fullName);      }      sb.append("&gt;");      columns.add("<html><div style='" + leader.player.race.ricon.getCSS() + "'/>"+ sb.toString()+ "&nbsp;<tt style='background:"+ leader.getPlayerColor().cssColor+ "'>&nbsp;&nbsp;</tt></html");    }  } else {    for (    final User u : repProc.playerUsers) {      columns.add("<html><div style='" + u.player.race.ricon.getCSS() + "'/>"+ u.fullName+ "&nbsp;<tt style='background:"+ u.getPlayerColor().cssColor+ "'>&nbsp;&nbsp;</tt></html");    }  }  final int rowHeight=Env.APP_SETTINGS.get(Settings.BUILD_ORDERS_ROW_HEIGHT);  final List<BoElement> boelList=new ArrayList<>();  for (  final Event e : trackerEvents.events) {    if (e.loop == 0)     continue;    final Integer playerId;    final Entity entity;    int loop=0;switch (e.id) {case ITrackerEvents.ID_UNIT_INIT:{        loop=e.loop;        final UnitInitEvent uie=(UnitInitEvent)e;        playerId=uie.getControlPlayerId();        entity=balanceData.getUnit(uie.getUnitTypeName().toString());        break;      }case ITrackerEvents.ID_UPGRADE:{      playerId=e.getPlayerId();      entity=balanceData.getUpgradeCmd(((UpgradeEvent)e).getUpgradeTypeName().toString());      if (entity != null)       loop=e.loop - (int)(entity.costTime * 16);      break;    }case ITrackerEvents.ID_UNIT_BORN:{    final UnitBornEvent ube=(UnitBornEvent)e;    playerId=ube.getControlPlayerId();    if (playerId == 0)     continue;    if (EXCLUDE_UNIT_SET.contains(ube.getUnitTypeName().toString()))     continue;    entity=balanceData.getUnit(ube.getUnitTypeName().toString());    if (entity != null)     loop=e.loop - (int)(entity.costTime * 16);    break;  }default :continue;}if (playerId == null || entity == null) continue;final BoElement boel=new BoElement();boel.loop=loop;boel.playerId=playerId;boel.entity=entity;boelList.add(boel);}Collections.sort(boelList);final Vector<Vector<Object>> data=new Vector<>(boelList.size());for (final BoElement boel : boelList) {final User user=repProc.usersByPlayerId[boel.playerId];if (user == null) continue;final Vector<Object> row=new Vector<>(columns.size());row.add(repProc.formatLoopTime(boel.loop));if (archon) {if (boel.playerId > 1) row.add(null);} else {for (int i=user.playerUserIdx; i > 0; i--) row.add(null);}row.add(new RenderablePair<>(boel.entity.getRicon().size(rowHeight),boel.entity.text));data.add(row);}table.getXTableModel().setDataVector(data,columns);table.setRowHeight(rowHeight);table.packColumns(0);table.setSortable(false);}  }
class C{  public String regexNormalize(String urlString,String scope){  HashMap<String,List<Rule>> scopedRules=getScopedRules();  List<Rule> curRules=scopedRules.get(scope);  if (curRules == null) {    String configFile=getConf().get("urlnormalizer.regex.file." + scope);    if (configFile != null) {      LOG.debug("resource for scope '" + scope + "': "+ configFile);      try {        Reader reader=getConf().getConfResourceAsReader(configFile);        curRules=readConfiguration(reader);        scopedRules.put(scope,curRules);      } catch (      Exception e) {        LOG.warn("Couldn't load resource '" + configFile + "': "+ e);      }    }    if (curRules == EMPTY_RULES || curRules == null) {      LOG.info("can't find rules for scope '" + scope + "', using default");      scopedRules.put(scope,EMPTY_RULES);    }  }  if (curRules == EMPTY_RULES || curRules == null) {    curRules=defaultRules;  }  Iterator<Rule> i=curRules.iterator();  while (i.hasNext()) {    Rule r=(Rule)i.next();    Matcher matcher=r.pattern.matcher(urlString);    urlString=matcher.replaceAll(r.substitution);  }  return urlString;}  }
class C{  public Recipe(String id,String title,String url,String description,Set<String> mainIngredient,Set<String> cuisine,NumberUnit<Integer> cookingTime){  if (mainIngredient == null) {    mainIngredient=new HashSet<String>();  }  if (cuisine == null) {    cuisine=new HashSet<String>();  }  this.id=id;  this.title=title;  this.url=url;  this.description=description;  this.mainIngredient=mainIngredient;  this.cuisine=cuisine;  this.cookingTime=cookingTime;  this.postedOn=null;  this.postedBy=null;}  }
class C{  private AsientoRegistralFormDTO createAsientoRegistralFormDTONumeroRegistroCaracteresEspeciales(String numeroRegistro,String codEntidadRegistralOrigen,String descEntidadRegistralOrigen,String codUnidadTramitacionOrigen,String descUnidadTramitacionOrigen,String codEntidadRegistralDestino,String descEntidadRegistralDestino,String codUnidadTramitacionDestino,String descUnidadTramitacionDestino,String codEntidadRegistralInicial,String descEntidadRegistralInicial){  AsientoRegistralFormDTO asientoForm=new AsientoRegistralFormDTO();  asientoForm.setCodigoEntidadRegistral("O00002062");  asientoForm.setCodigoEntidadRegistralOrigen(codEntidadRegistralOrigen);  asientoForm.setDescripcionEntidadRegistralOrigen(codEntidadRegistralOrigen);  asientoForm.setNumeroRegistro(numeroRegistro);  asientoForm.setFechaRegistro(DateUtils.toXMLGregorianCalendar(new Date()));  asientoForm.setTimestampRegistro(TestUtils.getTimestamp());  asientoForm.setCodigoUnidadTramitacionOrigen(codUnidadTramitacionOrigen);  asientoForm.setDescripcionUnidadTramitacionOrigen(descUnidadTramitacionOrigen);  asientoForm.setCodigoEntidadRegistralDestino(codEntidadRegistralDestino);  asientoForm.setDescripcionEntidadRegistralDestino(descEntidadRegistralDestino);  asientoForm.setCodigoUnidadTramitacionDestino(codUnidadTramitacionDestino);  asientoForm.setDescripcionEntidadRegistralDestino(descUnidadTramitacionDestino);  setInteresadoFisicoConRepresentanteFisicoCaracteresEspeciales(asientoForm);  asientoForm.setResumen(TestUtils.generaCadena("Resumen de 240 chars",240));  asientoForm.setCodigoAsunto(TestUtils.generaCadena("",16));  asientoForm.setReferenciaExterna(TestUtils.generaCadena("ReferenciaExterna",16));  asientoForm.setNumeroExpediente(TestUtils.generaCadena("",80));  setDefaultAnexoCaracteresEspeciales(asientoForm);  asientoForm.setTipoTransporte(TestUtils.generaCadena("02",2));  asientoForm.setNumeroTransporte(TestUtils.generaCadena("1",20));  asientoForm.setNombreUsuario(TestUtils.generaCadena("Usuario ",80));  asientoForm.setContactoUsuario(TestUtils.generaCadena("Contacto ",160));  asientoForm.setTipoRegistro(TipoRegistroEnum.ENTRADA.getValue());  asientoForm.setDocumentacionFisica(DocumentacionFisicaEnum.SIN_DOCUMENTACION_FISICA.getValue());  asientoForm.setObservacionesApunte(TestUtils.generaCadena("Observaciones apunte",50));  asientoForm.setIndicadorPrueba("1");  asientoForm.setCodigoEntidadRegistralInicio(codEntidadRegistralInicial);  asientoForm.setDescripcionEntidadRegistralInicio(descEntidadRegistralInicial);  asientoForm.setExpone(TestUtils.generaCadena("Expone ",4000));  asientoForm.setSolicita(TestUtils.generaCadena("Solicita ",4000));  return asientoForm;}  }
class C{  @RequestMapping(value="/table/favourite",method=RequestMethod.POST) public String addOrRemoveFavourite(HttpServletRequest request,String fqdn){  tableEntityService.addOrRemoveFavourite(fqdn);  return "redirect:" + request.getHeader("Referer");}  }
class C{  public void alignItemsInRows(int rows[]){  ArrayList<Integer> columns=new ArrayList<Integer>();  for (int i=0; i < rows.length; i++) {    columns.add(rows[i]);  }  ArrayList<Integer> columnWidths=new ArrayList<Integer>();  ArrayList<Integer> columnHeights=new ArrayList<Integer>();  int width=-10, columnHeight=-5;  int column=0, columnWidth=0, rowsOccupied=0, columnRows;  for (int i=0; i < children_.size(); i++) {    CCMenuItem item=(CCMenuItem)children_.get(i);    assert column < columns.size() : "Too many menu items for the amount of rows/columns.";    columnRows=columns.get(column);    assert columnRows != 0 : "Can't have zero rows on a column";    columnWidth=(int)Math.max(columnWidth,item.getContentSize().width);    columnHeight+=item.getContentSize().height + 5;    ++rowsOccupied;    if (rowsOccupied >= columnRows) {      columnWidths.add(columnWidth);      columnHeights.add(columnHeight);      width+=columnWidth + 10;      rowsOccupied=0;      columnWidth=0;      columnHeight=-5;      ++column;    }  }  assert rowsOccupied != 0 : "Too many rows/columns for available menu items.";  CGSize winSize=CCDirector.sharedDirector().winSize();  column=0;  columnWidth=0;  columnRows=0;  float x=-width / 2, y=0;  for (int i=0; i < children_.size(); i++) {    CCMenuItem item=(CCMenuItem)children_.get(i);    if (columnRows == 0) {      columnRows=columns.get(column);      y=columnHeights.get(column) + winSize.height / 2;    }    columnWidth=(int)Math.max(columnWidth,item.getContentSize().width);    item.setPosition(CGPoint.make(x + columnWidths.get(column) / 2,y - winSize.height / 2));    y-=item.getContentSize().height + 10;    ++rowsOccupied;    if (rowsOccupied >= columnRows) {      x+=columnWidth + 5;      rowsOccupied=0;      columnRows=0;      columnWidth=0;      ++column;    }  }}  }
class C{  public String generateDatasourceDocumentation() throws Exception {  StringBuilder output=new StringBuilder();  output.append("{note}This page / section has been automatically generated by Cargo's " + "build. Do not edit it directly as it'll be overwritten next time it's generated " + "again.{note}");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("|| Container || Configuration || Resource || DataSource || " + "Transactional DataSource || XA DataSource ||");  output.append(LINE_SEPARATOR);  Map<String,Set<ContainerType>> containerIds=containerFactory.getContainerIds();  SortedMap<String,String> sortedContainerIds=new TreeMap<String,String>();  for (  String containerId : containerIds.keySet()) {    String sortedContainerId=containerId.replace("10","9y").replace("12","9z").replace("x","0x").replace("liberty","websphere_liberty");    sortedContainerIds.put(sortedContainerId,containerId);  }  for (  String containerId : sortedContainerIds.values()) {    Map<String,Boolean> properties;    try {      properties=this.configurationCapabilityFactory.createConfigurationCapability(containerId,ContainerType.INSTALLED,ConfigurationType.STANDALONE).getProperties();    } catch (    ContainerException e) {      continue;    }    for (    String property : properties.keySet()) {      if (property.startsWith(DATASOURCE_PREFIX) || ResourcePropertySet.RESOURCE.equals(property)) {        Configuration configuration=this.configurationFactory.createConfiguration(containerId,ContainerType.INSTALLED,ConfigurationType.STANDALONE);        Container container=this.containerFactory.createContainer(containerId,ContainerType.INSTALLED,configuration);        Class configurationClass=configuration.getClass();        output.append("| [");        output.append(container.getName());        int bracket=container.getName().indexOf('(');        if (bracket != -1) {          output.append('|');          output.append(container.getName().substring(0,bracket).trim());        }        output.append("] | {{");        output.append(computedFQCN(configurationClass.getName()));        output.append("}} | (");        if (properties.keySet().contains(ResourcePropertySet.RESOURCE)) {          output.append('/');        } else {          output.append('x');        }        output.append(") | (");        if (properties.keySet().contains(DatasourcePropertySet.DATASOURCE)) {          output.append('/');        } else {          output.append('x');        }        output.append(") | (");        if (properties.keySet().contains(DatasourcePropertySet.TRANSACTION_SUPPORT)) {          output.append('/');        } else {          output.append('x');        }        output.append(") | (");        if (properties.keySet().contains(DatasourcePropertySet.CONNECTION_TYPE)) {          output.append('/');        } else {          output.append('x');        }        output.append(") |");        output.append(LINE_SEPARATOR);        break;      }    }  }  return output.toString();}  }
class C{  private List<? extends Element> sortElements(final RoundEnvironment env,final Class<? extends Annotation> annotationClass){  final Set<? extends Element> elements=env.getElementsAnnotatedWith(annotationClass);  final List<? extends Element> result=new ArrayList(elements);  Collections.sort(result,null);  return result;}  }
class C{  public SequentialSearchST(){}  }
class C{  public void testDirect() throws Exception {  assertNotNull(getSimilarity("sim1text",SweetSpotSimilarity.class));}  }
class C{  public OutputFormat(String indent,boolean newlines,String encoding){  this.indent=indent;  this.newlines=newlines;  this.encoding=encoding;}  }
class C{  public void clearValues(){  mDataSets.clear();  notifyDataChanged();}  }
class C{  public void error(Throwable t,String s){  if (isEnabled(TraceSystem.ERROR)) {    traceWriter.write(TraceSystem.ERROR,module,s,t);  }}  }
class C{  public ListIterator<HDR> listIterator(){  return hlist.listIterator(0);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return view.modelToView(pos,a,b);}  }
class C{  public boolean containsKey(K key){  key=sanitizeKey(key);  return map.containsKey(key);}  }
class C{  public static double[][] add(double[][] mat1,double[][] mat2){  int m=mat1.length;  int n=mat1[0].length;  double[][] matres=new double[m][];  for (int i=0; i < m; ++i) {    matres[i]=new double[n];    for (int j=0; j < n; ++j) {      matres[i][j]=mat1[i][j] + mat2[i][j];    }  }  return (matres);}  }
class C{  private String createStartChoiceMomentXml(String momentId,double timeoutLengthMinutes,String choiceDescription,String defaultChoiceId){  String xml="";  xml+=createStartMomentXml("choice",momentId);  xml+="<timeout_length_minutes>" + Double.toString(timeoutLengthMinutes) + "</timeout_length_minutes>";  xml+="<description>" + choiceDescription + "</description>";  xml+="<default_choice id='" + defaultChoiceId + "'/>";  return xml;}  }
class C{  public void evaluate(List<AggregationIndividual> population,ExampleSet originalExampleSet) throws OperatorException {  Iterator<AggregationIndividual> i=population.iterator();  while (i.hasNext()) {    AggregationIndividual individual=i.next();    if (individual.getPerformance() == null) {      ExampleSet exampleSet=individual.createExampleSet(originalExampleSet,allAttributes,generator);      if (exampleSet.getAttributes().size() == 0) {        i.remove();      } else {        innerExampleSetSource.deliver(exampleSet);        getSubprocess(0).execute();        PerformanceVector performanceVector=innerPerformanceSink.getData(PerformanceVector.class);        individual.setPerformance(performanceVector);      }    }  }}  }
class C{  public int replicaSetCount(){  return replicaSetsByName.size() + nonReplicaSets.size();}  }
class C{  public boolean canSetBoolean(){  return canSet(boolean.class);}  }
class C{  public static void refreshSpecializedMethods(RVMType type){  for (int i=0; i < numSpecializedMethods; i++) {    if (VM.VerifyAssertions)     VM._assert(methods[i] != null,"Specialized method missing!");    type.setSpecializedMethod(i,methods[i].specializeMethod(type));  }}  }
class C{  public NavigationMoveListener(InteractivePanel panel){  this.panel=panel;}  }
class C{  protected void processDataDelete(SimEvent ev,boolean ack){  if (ev == null) {    return;  }  Object[] data=(Object[])ev.getData();  if (data == null) {    return;  }  String filename=(String)data[0];  int req_source=((Integer)data[1]).intValue();  int tag=-1;  int msg=deleteFileFromStorage(filename);  if (msg == DataCloudTags.FILE_DELETE_SUCCESSFUL) {    tag=DataCloudTags.CTLG_DELETE_MASTER;  } else {    tag=DataCloudTags.FILE_DELETE_MASTER_RESULT;  }  if (ack) {    Object pack[]=new Object[2];    pack[0]=filename;    pack[1]=Integer.valueOf(msg);    sendNow(req_source,tag,pack);  }}  }
class C{  private int[] modDiv(int[] a,int[] b,int[] g){  int[] r0=normalForm(g);  int[] r1=mod(b,g);  int[] s0={0};  int[] s1=mod(a,g);  int[] s2;  int[][] q;  while (computeDegree(r1) != -1) {    q=div(r0,r1);    r0=normalForm(r1);    r1=normalForm(q[1]);    s2=add(s0,modMultiply(q[0],s1,g));    s0=normalForm(s1);    s1=normalForm(s2);  }  int hc=headCoefficient(r0);  s0=multWithElement(s0,field.inverse(hc));  return s0;}  }
class C{  private static boolean bit_test(int x,int y){  return (x & (1 << y)) != 0;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentDispositionParser.parse");  try {    headerName(TokenTypes.CONTENT_DISPOSITION);    ContentDisposition cd=new ContentDisposition();    cd.setHeaderName(SIPHeaderNames.CONTENT_DISPOSITION);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    cd.setDispositionType(token.getTokenValue());    this.lexer.SPorHT();    super.parse(cd);    this.lexer.SPorHT();    this.lexer.match('\n');    return cd;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentDispositionParser.parse");  }}  }
class C{  public static boolean substringContainsNte(String source,int start,int end){  end=(end > source.length()) ? source.length() : end;  while (start < end) {    char c=source.charAt(start++);    if (c == '\u24EA') {      return true;    }    if (c >= '\u2460' && c <= '\u2468') {      return true;    }  }  return false;}  }
class C{  protected void compareDatasets(Instances data1,Instances data2) throws Exception {  if (data1.numAttributes() != data2.numAttributes())   throw new Exception("number of attributes has changed");  if (!(data2.numInstances() == data1.numInstances()))   throw new Exception("number of instances has changed");  for (int i=0; i < data2.numInstances(); i++) {    Instance orig=data1.instance(i);    Instance copy=data2.instance(i);    for (int j=0; j < orig.numAttributes(); j++) {      if (orig.isMissing(j)) {        if (!copy.isMissing(j))         throw new Exception("instances have changed");      } else       if (!orig.toString(j).equals(copy.toString(j))) {        throw new Exception("instances have changed");      }      if (orig.weight() != copy.weight())       throw new Exception("instance weights have changed");    }  }}  }
class C{  public static int floor(double num){  int floor=(int)num;  return (floor == num) ? floor : ((num > 0) ? floor : (floor - 1));}  }
class C{  public LocalTime(int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  this(hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstanceUTC());}  }
class C{  private ServerTarget findTargetServer(String address,int port){  for (  ServerTarget target : _targets) {    ServerBartender server=target.getServer();    if (address.equals(server.getAddress()) && port == server.port()) {      return target;    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.266 -0400",hash_original_method="B47D74753BC2900138E758F55799A6CE",hash_generated_method="6AFB3137308F7AC6F6478F4022BD5090") @Override public boolean add(E o){  return offer(o);}  }
class C{  public static byte[] secureRandomBytes(int len){  if (len <= 0) {    len=1;  }  byte[] buff=new byte[len];  SecureRandom sr=getSecureRandom();synchronized (sr) {    sr.nextBytes(buff);  }  return buff;}  }
class C{  public static RegexBlock parseBlock(CharSequence buffer,int startOffset,int bufferEnd,char openingChar,boolean isSecondBlock){  char closingChar=getQuoteCloseChar(openingChar);  boolean isEscaped=false;  boolean isCharGroup=false;  boolean isQuotesDiffers=closingChar != openingChar;  int braceLevel=0;  int parenLevel=0;  int delimiterLevel=0;  RegexBlock newBlock=null;  int currentOffset=startOffset;  while (true) {    if (currentOffset >= bufferEnd) {      break;    }    char currentChar=buffer.charAt(currentOffset);    if (delimiterLevel == 0 && braceLevel == 0 && !isCharGroup && !isEscaped && parenLevel == 0 && closingChar == currentChar) {      newBlock=new RegexBlock(buffer,startOffset,currentOffset + 1,openingChar,closingChar);      break;    }    if (!isSecondBlock) {      if (!isEscaped && !isCharGroup && currentChar == '[') {        Matcher m=POSIX_CHAR_CLASS_PATTERN.matcher(buffer.subSequence(currentOffset,bufferEnd));        if (m.lookingAt()) {          currentOffset+=m.toMatchResult().group(0).length();          continue;        } else {          isCharGroup=true;        }      } else       if (!isEscaped && isCharGroup && currentChar == ']') {        isCharGroup=false;      }    }    if (!isEscaped && isQuotesDiffers && !isCharGroup) {      if (currentChar == openingChar) {        delimiterLevel++;      } else       if (currentChar == closingChar && delimiterLevel > 0) {        delimiterLevel--;      }    }    isEscaped=!isEscaped && closingChar != '\\' && currentChar == '\\';    currentOffset++;  }  return newBlock;}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  public int length(){  return this.data.length * 64;}  }
class C{  public TypeIdItem(CstType type){  super(type);}  }
class C{  public void updateStoreVersion(){  storeVersion=UUID.randomUUID().toString();}  }
class C{  public String KNNTipText(){  return "How many neighbours are used to determine the width of the " + "weighting function (<= 0 means all neighbours).";}  }
class C{  static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){  int i;  boolean allZero=true;  for (i=0; i < intCount; i++)   allZero&=source[i] == 0;  if (count == 0) {    System.arraycopy(source,intCount,result,0,resultLen);    i=resultLen;  } else {    int leftShiftCount=32 - count;    allZero&=(source[i] << leftShiftCount) == 0;    for (i=0; i < resultLen - 1; i++) {      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);    }    result[i]=(source[i + intCount] >>> count);    i++;  }  return allZero;}  }
class C{  private void recalculateStartPositions(){  int currentStartIndex=0;  for (  ListPiece listPiece : listPieces) {    listPiece.setStartPosition(currentStartIndex);    currentStartIndex+=listPiece.getCount();  }}  }
class C{  protected String createProcessTree(int indent,String selfPrefix,String childPrefix,Operator markOperator,String mark){  return createProcessTreeEntry(indent,selfPrefix,childPrefix,markOperator,mark);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.032 -0500",hash_original_method="4C1A041805DDE756B7430BBCF7A4A54D",hash_generated_method="74918D1B46A8DB58C5C08D6C7BD61FFF") public PointerCoords(PointerCoords other){  copyFrom(other);}  }
class C{  public void runAsync(final Runnable backgroundTask,final Runnable postExecuteTask,final int dialogStringId){  new ModalDialogAsyncTask(dialogStringId,postExecuteTask).execute(new Runnable[]{backgroundTask});}  }
class C{  public Serializable parseStringValue(int type,String value) throws Exception {switch (type) {case java.sql.Types.BIT:case java.sql.Types.BOOLEAN:{      return new Boolean(value);    }case java.sql.Types.CHAR:case java.sql.Types.VARCHAR:case java.sql.Types.LONGVARCHAR:case java.sql.Types.NCHAR:case java.sql.Types.NVARCHAR:case java.sql.Types.LONGNVARCHAR:case java.sql.Types.NCLOB:case java.sql.Types.CLOB:{    return value;  }case java.sql.Types.TINYINT:case java.sql.Types.SMALLINT:case java.sql.Types.INTEGER:{  return new Integer(value);}case java.sql.Types.BIGINT:{return new Long(value);}case java.sql.Types.FLOAT:case java.sql.Types.DOUBLE:{return new Double(value);}case java.sql.Types.REAL:{return new Float(value);}case java.sql.Types.DECIMAL:case java.sql.Types.NUMERIC:{return new java.math.BigDecimal(value);}case java.sql.Types.TIMESTAMP:{return java.sql.Timestamp.valueOf(value);}case java.sql.Types.DATE:{return java.sql.Date.valueOf(value);}case java.sql.Types.TIME:{return java.sql.Time.valueOf(value);}case java.sql.Types.BINARY:case java.sql.Types.VARBINARY:case java.sql.Types.LONGVARBINARY:case java.sql.Types.BLOB:{throw new Exception("THL loader does not yet support binary data");}case java.sql.Types.NULL:case java.sql.Types.OTHER:case java.sql.Types.JAVA_OBJECT:case java.sql.Types.DISTINCT:case java.sql.Types.STRUCT:case java.sql.Types.ARRAY:case java.sql.Types.REF:case java.sql.Types.DATALINK:case java.sql.Types.ROWID:case java.sql.Types.SQLXML:{throw new Exception("unsupported data type " + type);}default :{throw new Exception("unknown data type " + type);}}}  }
class C{  public static float[] newScaledBounds(float scale,float x,float y,float z,float x2,float y2,float z2){  final float[] result=newBoundsArray();  return scaleBounds(result,scale,x,y,z,x2,y2,z2);}  }
class C{  public boolean isLocked(){  return !queue.isEmpty();}  }
class C{  public BlockBorder(){  this(Color.black);}  }
class C{  public void replaceStatement(int index,Statement passedStmt){  this._statements.set(index,passedStmt);  if (index == 0) {    this._beginLine=passedStmt.getBeginLine();    this._beginColumn=passedStmt.getBeginColumn();  } else   if (index == this._statements.size() - 1) {    this._endLine=passedStmt.getEndLine();    this._endColumn=passedStmt.getEndColumn();  }}  }
class C{  public ins addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void calculateContrast(Relation<? extends NumberVector> relation,HiCSSubspace subspace,ArrayList<ArrayDBIDs> subspaceIndex,Random random){  final int card=subspace.cardinality();  final double alpha1=Math.pow(alpha,(1.0 / card));  final int windowsize=(int)(relation.size() * alpha1);  final FiniteProgress prog=LOG.isDebugging() ? new FiniteProgress("Monte-Carlo iterations",m,LOG) : null;  int retries=0;  double deviationSum=0.0;  for (int i=0; i < m; i++) {    int chosen=-1;    for (int tmp=random.nextInt(card); tmp >= 0; tmp--) {      chosen=subspace.nextSetBit(chosen + 1);    }    DBIDs conditionalSample=relation.getDBIDs();    for (int j=subspace.nextSetBit(0); j >= 0; j=subspace.nextSetBit(j + 1)) {      if (j == chosen) {        continue;      }      ArrayDBIDs sortedIndices=subspaceIndex.get(j);      ArrayModifiableDBIDs indexBlock=DBIDUtil.newArray(windowsize);      DBIDArrayIter iter=sortedIndices.iter();      iter.seek(random.nextInt(relation.size() - windowsize));      for (int k=0; k < windowsize; k++, iter.advance()) {        indexBlock.add(iter);      }      conditionalSample=DBIDUtil.intersection(conditionalSample,indexBlock);    }    if (conditionalSample.size() < 10) {      retries++;      if (LOG.isDebugging()) {        LOG.debug("Sample size very small. Retry no. " + retries);      }      if (retries >= MAX_RETRIES) {        LOG.warning("Too many retries, for small samples: " + retries);      } else {        i--;        continue;      }    }    double[] sampleValues=new double[conditionalSample.size()];{      int l=0;      for (DBIDIter iter=conditionalSample.iter(); iter.valid(); iter.advance()) {        sampleValues[l]=relation.get(iter).doubleValue(chosen);        l++;      }    }    double[] fullValues=new double[relation.size()];{      int l=0;      for (DBIDIter iter=subspaceIndex.get(chosen).iter(); iter.valid(); iter.advance()) {        fullValues[l]=relation.get(iter).doubleValue(chosen);        l++;      }    }    double contrast=statTest.deviation(fullValues,sampleValues);    if (Double.isNaN(contrast)) {      i--;      LOG.warning("Contrast was NaN");      continue;    }    deviationSum+=contrast;    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  subspace.contrast=deviationSum / m;}  }
class C{  private RefererLookup lookupReferer(String refererHost,String refererPath,Boolean includePath){  RefererLookup referer=(includePath) ? referers.get(refererHost + refererPath) : referers.get(refererHost);  if (includePath && referer == null) {    final String[] pathElements=refererPath.split("/");    if (pathElements.length > 1) {      referer=referers.get(refererHost + "/" + pathElements[1]);    }  }  if (referer == null) {    final int idx=refererHost.indexOf('.');    if (idx == -1) {      return null;    } else {      return lookupReferer(refererHost.substring(idx + 1),refererPath,includePath);    }  } else {    return referer;  }}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  public Matrix3f m20(float m20){  this.m20=m20;  return this;}  }
class C{  public boolean isGPSEnabled(Context mContext){  LocationManager locationManager=(LocationManager)mContext.getSystemService(Context.LOCATION_SERVICE);  return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  private void addAboutItem(JComponent c,String name,Object val,Border border){  String v=val != null ? val.toString() : "n/a";  String tip=String.format("<html><b>%s</b> &#10159; %s</html>",name,val);  JLabel lb=new JLabel(name);  lb.setToolTipText(tip);  JLabel field=new JLabel(v);  field.setOpaque(true);  field.setBackground(Color.WHITE);  field.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(VALUE_BORDER_COLOR,1),BorderFactory.createEmptyBorder(0,3,0,3)));  field.setToolTipText(tip);  if (border != null)   field.setBorder(border);  c.add(lb,gbcLicenseLabel());  c.add(field,gbcLicenseField());}  }
class C{  @Override public int compareTo(FbSingleTestResult o){  return new Long(timeTaken).compareTo(new Long(o.getTimeTaken()));}  }
class C{  public void disconnect(){  if (mBluetoothAdapter == null || mBluetoothGatt == null) {    Log.e(TAG,"BluetoothAdapter not initialized.");    return;  }  mBluetoothGatt.disconnect();}  }
class C{  public void compile(String fileName,LineMap lineMap,boolean ifModified) throws IOException, ClassNotFoundException {  if (_compileParent) {    try {      if (_loader instanceof Make) {        ((Make)_loader).make();      }    } catch (    RuntimeException e) {      throw e;    }catch (    ClassNotFoundException e) {      throw e;    }catch (    IOException e) {      throw e;    }catch (    Exception e) {      throw ConfigException.wrap(e);    }  }  int p=fileName.lastIndexOf('.');  String path=fileName.substring(0,p);  String javaName=path + _sourceExt;  PathImpl javaPath=getSourceDir().lookup(javaName);  String className=path + ".class";  PathImpl classPath=getClassDir().lookup(className);synchronized (LOCK) {    if (ifModified && javaPath.getLastModified() <= classPath.getLastModified())     return;    if (javaPath.canRead() && classPath.exists())     classPath.remove();  }  _compilerService.compile(this,new String[]{fileName},lineMap);}  }
class C{  @Override public void execute(@NotNull String tabIdentifier){  int firstDot=tabIdentifier.indexOf('.');  if (firstDot < 0) {    log.info("Invalid tab identifier {0}",tabIdentifier);    return;  }  String partStackTypeString=tabIdentifier.substring(0,firstDot);  String title=tabIdentifier.substring(firstDot + 1);  PartStack partStack=workspaceAgent.getPartStack(PartStackType.valueOf(partStackTypeString));  if (partStack == null) {    log.info("Invalid tab identifier " + tabIdentifier);    return;  }  List<PartPresenter> presenters=partStack.getPartPresenters();  if (presenters != null) {    for (    PartPresenter partPresenter : presenters) {      if (title.equals(partPresenter.getTitle())) {        workspaceAgent.setActivePart(partPresenter);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public ODGPropertiesPanel(){  initComponents();  opacitySlider=new JAttributeSlider(JSlider.VERTICAL,0,100,100);  opacityPopupButton.add(opacitySlider);  opacityPopupButton.putClientProperty("JButton.buttonType","toolbar");  add(opacityPopupButton);  opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0d,1d,100d));  opacityFieldHandler=new FigureAttributeEditorHandler<Double>(OPACITY,opacityField,editor);  opacitySliderHandler=new FigureAttributeEditorHandler<Double>(OPACITY,opacitySlider,editor);  linkFieldHandler=new FigureAttributeEditorHandler<String>(LINK,linkField,editor);  Font font=getFont().deriveFont(11f);  for (  Component c : getComponents()) {    c.setFont(font);  }  opacitySlider.setFont(font);}  }
class C{  public State complete(){  if (this.stateRegistry == null)   throw new IllegalStateException();  if (root.hasChildren())   replaceOrRegister(root);  stateRegistry=null;  return root;}  }
class C{  void declarePrefix(String prefix,String uri){  if (!declsOK) {    throw new IllegalStateException("can't declare any more prefixes in this context");  }  if (!declSeen) {    copyTables();  }  if (declarations == null) {    declarations=new ArrayList<String>();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.add(prefix);}  }
class C{  protected void writeNullReferenceRow(AbstractRecord record){  List<DatabaseField> fields=getReferenceFields();  int size=fields.size();  boolean nullInserted=false;  for (int index=0; index < size; index++) {    DatabaseField field=fields.get(index);    if (!field.isReadOnly() && (field.isUpdatable() || field.isInsertable())) {      record.put(field,null);      nullInserted=true;    }  }  if (size > 0 && nullInserted) {    record.setNullValueInFields(true);  }}  }
class C{  public long order(){  return order;}  }
class C{  public String findInLine(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  clearCaches();  int endPosition=0;  saveState();  while (true) {    String token=findPatternInBuffer(separatorPattern(),0);    if (token != null) {      endPosition=matcher.start();      break;    }    if (needInput) {      readInput();    } else {      endPosition=buf.limit();      break;    }  }  revertState();  int horizonForLine=endPosition - position;  if (horizonForLine == 0)   return null;  return findWithinHorizon(pattern,horizonForLine);}  }
class C{  @Override protected void free(NativeMemoryChunk value){  Preconditions.checkNotNull(value);  value.close();}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))).setPackage("com.android.vending"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      SecurityException e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }catch (      Base64DecoderException e) {        e.printStackTrace();      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  public Compiler createParser() throws JasperException {  jspCompiler=new Compiler(this,jsw);  return jspCompiler;}  }
class C{  public Attachment(String formatType,String uri){  super(uri);  setFormatType(formatType);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void put(int msgLevel,StringId msgId,Object[] params,Throwable exception){  String msg=new StringBuilder(this.prefix).append(" level ").append(levelToString(msgLevel)).append(" ").append(msgId.toLocalizedString(params)).toString();  this.realLogWriter.put(WARNING_LEVEL,msg,exception);}  }
class C{  public void recoverVdcConfigFromRecoverFile(String recoverFileName){  List<VdcConfig> newVdcConfigList=loadRecoverFileToRecoverInfo(recoverFileName);  InternalDbClient geoDbClient=(InternalDbClient)ctx.getBean("geodbclient");  geoDbClient.stopClusterGossiping();  vdcConfHelper.syncVdcConfig(newVdcConfigList,null,true,DrUtil.newVdcConfigVersion(),"");  try {    Thread.sleep(30000);  } catch (  InterruptedException e) {    log.error("Error in recover Vdc Config, e=" + e);  }  System.out.println("Recover successfully, please wait for the whole vdc reboot.");}  }
class C{  public static Matcher<Object> withItemContent(String expectedText){  checkNotNull(expectedText);  return withItemContent(equalTo(expectedText));}  }
class C{  public static <T>T eachLine(File self,String charset,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(newReader(self,charset),firstLine,closure);}  }
class C{  private boolean methodExists(Object object,String methodName){  boolean exists=false;  try {    Method method=object.getClass().getMethod(methodName);    if (method != null) {      exists=true;    }  } catch (  Exception e) {    e.printStackTrace();  }  return exists;}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg,boolean underline,boolean setFG){  if (text != null) {    int fontIndex=f == null ? 0 : (getFontIndex(fontList,f) + 1);    if (fontIndex != lastFontIndex) {      document.append("\\f").append(fontIndex);      lastFontIndex=fontIndex;      lastWasControlWord=true;    }    if (f != null) {      int fontSize=fixFontSize(f.getSize2D());      if (fontSize != lastFontSize) {        document.append("\\fs").append(fontSize);        lastFontSize=fontSize;        lastWasControlWord=true;      }      if (f.isBold() != lastBold) {        document.append(lastBold ? "\\b0" : "\\b");        lastBold=!lastBold;        lastWasControlWord=true;      }      if (f.isItalic() != lastItalic) {        document.append(lastItalic ? "\\i0" : "\\i");        lastItalic=!lastItalic;        lastWasControlWord=true;      }    } else {      if (lastFontSize != DEFAULT_FONT_SIZE) {        document.append("\\fs").append(DEFAULT_FONT_SIZE);        lastFontSize=DEFAULT_FONT_SIZE;        lastWasControlWord=true;      }      if (lastBold) {        document.append("\\b0");        lastBold=false;        lastWasControlWord=true;      }      if (lastItalic) {        document.append("\\i0");        lastItalic=false;        lastWasControlWord=true;      }    }    if (underline) {      document.append("\\ul");      lastWasControlWord=true;    }    if (setFG) {      int fgIndex=0;      if (fg != null) {        fgIndex=getIndex(colorList,fg) + 1;      }      if (fgIndex != lastFGIndex) {        document.append("\\cf").append(fgIndex);        lastFGIndex=fgIndex;        lastWasControlWord=true;      }    }    if (bg != null) {      int pos=getIndex(colorList,bg);      document.append("\\highlight").append(pos + 1);      lastWasControlWord=true;    }    if (lastWasControlWord) {      document.append(' ');      lastWasControlWord=false;    }    escapeAndAdd(document,text);    if (bg != null) {      document.append("\\highlight0");      lastWasControlWord=true;    }    if (underline) {      document.append("\\ul0");      lastWasControlWord=true;    }  }}  }
class C{  public Task<FileShareRestRep> changeFileVirtualPool(URI id,FileSystemVirtualPoolChangeParam input){  return putTask(input,getIdUrl() + "/vpool-change",id);}  }
class C{  public ResourceException(Throwable cause){  super(cause);}  }
class C{  private BlockConsistencyGroup createBlockConsistencyGroup(String name,URI storageSystem,String type,boolean setType){  BlockConsistencyGroup cg=new BlockConsistencyGroup();  URI cgURI=URIUtil.createId(BlockConsistencyGroup.class);  cg.setId(cgURI);  cg.setLabel(name);  cg.setStorageController(storageSystem);  if (type.equals(Types.LOCAL.name())) {    cg.setDeviceName("localArrayDeviceName");  } else   if (type.equals(Types.VPLEX.name())) {    cg.setDeviceName("vplexDeviceName");  } else   if (type.equals(Types.RP.name())) {    cg.setDeviceName("rpDeviceName");  } else   if (type.equals(Types.SRDF.name())) {    cg.setDeviceName("srdfDeviceName");  }  if (setType) {    cg.setType(type);  }  _dbClient.createObject(cg);  return cg;}  }
class C{  public void sync(){  if (getPipelinedResponseLength() > 0) {    List<Object> unformatted=client.getMany(getPipelinedResponseLength());    for (    Object o : unformatted) {      generateResponse(o);    }  }}  }
class C{  static public void resetLocationStatus(Context c){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(c);  SharedPreferences.Editor spe=sp.edit();  spe.putInt(c.getString(R.string.pref_location_status_key),SunshineSyncAdapter.LOCATION_STATUS_UNKNOWN);  spe.apply();}  }
class C{  public Rational(int numerator,int denominator){  this.numerator=numerator;  this.denominator=denominator;}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final char[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  @Deprecated public static Instance copy(Instance source){  return AppBeans.get(MetadataTools.NAME,MetadataTools.class).copy(source);}  }
class C{  @Override public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {  try {    if (result instanceof StreamResult) {      return new WbXmlEventWriter(new FileOutputStream(result.getSystemId()),(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY));    } else {      throw new XMLStreamException("WBXML only support StreamResult!");    }  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public HashedMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static byte reverseBitsInByte(final byte value){  final int v=value & 0xFF;  return (byte)(((v * 0x0802 & 0x22110) | (v * 0x8020 & 0x88440)) * 0x10101 >> 16);}  }
class C{  public boolean hasWarning(){  return fSeverity == FATAL || fSeverity == ERROR || fSeverity == WARNING;}  }
class C{  public Location(){}  }
class C{  public User(String id,String name,String email){  this.id=id;  this.email=email;  this.name=name;}  }
class C{  public static CreateStatement produce(CharSequence table){  return produce(table,null);}  }
class C{  private static boolean isAbsolutePath(String path){  return ABSOLUTE_PATH_PATTERN.matcher(path).matches();}  }
class C{  public Document build() throws ParserConfigurationException {  if (files.size() == 0)   throw new IllegalStateException("MetalinkBuilder has no file.");  for (  MetalinkFileBuilder fb : files)   if (fb.url.size() == 0)   throw new IllegalStateException("MetalinkFileBuilder has no url.");  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();  Document doc=docBuilder.newDocument();  Element rootElement=doc.createElement("metalink");  rootElement.setAttribute("xmlns","urn:ietf:params:xml:ns:metalink");  doc.appendChild(rootElement);  if (generator != null && !generator.isEmpty())   appendTextElement(doc,rootElement,"generator",generator);  if (origin != null)   origin.build(doc,rootElement);  if (published != null)   appendTextElement(doc,rootElement,"published",published);  if (updated != null)   appendTextElement(doc,rootElement,"updated",updated);  for (  MetalinkFileBuilder fb : files)   fb.build(doc,rootElement);  return doc;}  }
class C{  protected DenseObjectMatrix2D(int rows,int columns,Object[] elements,int rowZero,int columnZero,int rowStride,int columnStride){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  private HashSet<String> substitute(String expression,boolean reportUndefinedVariables,boolean resolveVariables,IStringVariableManager manager) throws CoreException {  fResult=new StringBuffer(expression.length());  fStack=new Stack<VariableReference>();  fSubs=false;  HashSet<String> resolvedVariables=new HashSet<String>();  int pos=0;  int state=SCAN_FOR_START;  while (pos < expression.length()) {switch (state) {case SCAN_FOR_START:      int start=expression.indexOf(VARIABLE_START,pos);    if (start >= 0) {      int length=start - pos;      if (length > 0) {        fResult.append(expression.substring(pos,start));      }      pos=start + 2;      state=SCAN_FOR_END;      fStack.push(new VariableReference());    } else {      fResult.append(expression.substring(pos));      pos=expression.length();    }  break;case SCAN_FOR_END:start=expression.indexOf(VARIABLE_START,pos);int end=expression.indexOf(VARIABLE_END,pos);if (end < 0) {VariableReference tos=fStack.peek();tos.append(expression.substring(pos));pos=expression.length();} else {if (start >= 0 && start < end) {int length=start - pos;if (length > 0) {  VariableReference tos=fStack.peek();  tos.append(expression.substring(pos,start));}pos=start + 2;fStack.push(new VariableReference());} else {VariableReference tos=fStack.pop();String substring=expression.substring(pos,end);tos.append(substring);resolvedVariables.add(substring);pos=end + 1;String value=resolve(tos,reportUndefinedVariables,resolveVariables,manager);if (value == null) {  value="";}if (fStack.isEmpty()) {  fResult.append(value);  state=SCAN_FOR_START;} else {  tos=fStack.peek();  tos.append(value);}}}break;default :break;}}while (!fStack.isEmpty()) {VariableReference tos=fStack.pop();if (fStack.isEmpty()) {fResult.append(VARIABLE_START);fResult.append(tos.getText());} else {VariableReference var=fStack.peek();var.append(VARIABLE_START);var.append(tos.getText());}}return resolvedVariables;}  }
class C{  public Collection<Pair<RegionRestriction,RegionRestriction>> duplicates(){  return mDuplicates;}  }
class C{  public final byte readByte() throws java.io.IOException {  int temp=in.read();  if (temp < 0) {    throw new EOFException();  }  return (byte)temp;}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public ReferenceSlotImpl(){  super();}  }
class C{  public final void reset(){  exponentialBackOff.reset();}  }
class C{  public static String stripIllegalCharacters(final String S){  final StringBuilder newString=new StringBuilder();  for (int i=0; i < S.length(); i++) {    final char ch=S.charAt(i);    if ((ch < 32 && ch >= 0) || (ch > 126 && ch < 160)) {      continue;    }    newString.append(ch);  }  return newString.toString();}  }
class C{  public Builder startFromCurrent(){  return startFrom(StreamPosition.END);}  }
class C{  public void actionPerformed(ActionEvent e){  log.info("Cmd=" + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  validate();}  }
class C{  public SolrConfig(SolrResourceLoader loader,String name,InputSource is) throws ParserConfigurationException, IOException, SAXException {  super(loader,name,is,"/config/");  initLibs();  luceneMatchVersion=getLuceneVersion("luceneMatchVersion");  String indexConfigPrefix;  boolean hasDeprecatedIndexConfig=(getNode("indexDefaults",false) != null) || (getNode("mainIndex",false) != null);  boolean hasNewIndexConfig=getNode("indexConfig",false) != null;  if (hasDeprecatedIndexConfig) {    if (luceneMatchVersion.onOrAfter(Version.LUCENE_4_0_0_ALPHA)) {      throw new SolrException(ErrorCode.FORBIDDEN,"<indexDefaults> and <mainIndex> configuration sections are discontinued. Use <indexConfig> instead.");    } else {      if (hasNewIndexConfig) {        throw new SolrException(ErrorCode.FORBIDDEN,"Cannot specify both <indexDefaults>, <mainIndex> and <indexConfig> at the same time. Please use <indexConfig> only.");      }      log.warn("<indexDefaults> and <mainIndex> configuration sections are deprecated and will fail for luceneMatchVersion=LUCENE_4_0_0 and later. Please use <indexConfig> instead.");      defaultIndexConfig=new SolrIndexConfig(this,"indexDefaults",null);      mainIndexConfig=new SolrIndexConfig(this,"mainIndex",defaultIndexConfig);      indexConfigPrefix="mainIndex";    }  } else {    defaultIndexConfig=mainIndexConfig=null;    indexConfigPrefix="indexConfig";  }  nrtMode=getBool(indexConfigPrefix + "/nrtMode",true);  indexConfig=new SolrIndexConfig(this,"indexConfig",mainIndexConfig);  booleanQueryMaxClauseCount=getInt("query/maxBooleanClauses",BooleanQuery.getMaxClauseCount());  log.info("Using Lucene MatchVersion: " + luceneMatchVersion);  if (get("query/boolTofilterOptimizer",null) != null)   log.warn("solrconfig.xml: <boolTofilterOptimizer> is currently not implemented and has no effect.");  if (get("query/HashDocSet",null) != null)   log.warn("solrconfig.xml: <HashDocSet> is deprecated and no longer recommended used.");  useFilterForSortedQuery=getBool("query/useFilterForSortedQuery",false);  queryResultWindowSize=Math.max(1,getInt("query/queryResultWindowSize",1));  queryResultMaxDocsCached=getInt("query/queryResultMaxDocsCached",Integer.MAX_VALUE);  enableLazyFieldLoading=getBool("query/enableLazyFieldLoading",false);  filterCacheConfig=CacheConfig.getConfig(this,"query/filterCache");  queryResultCacheConfig=CacheConfig.getConfig(this,"query/queryResultCache");  documentCacheConfig=CacheConfig.getConfig(this,"query/documentCache");  CacheConfig conf=CacheConfig.getConfig(this,"query/fieldValueCache");  if (conf == null) {    Map<String,String> args=new HashMap<>();    args.put("name","fieldValueCache");    args.put("size","10000");    args.put("initialSize","10");    args.put("showItems","-1");    conf=new CacheConfig(FastLRUCache.class,args,null);  }  fieldValueCacheConfig=conf;  unlockOnStartup=getBool(indexConfigPrefix + "/unlockOnStartup",false);  useColdSearcher=getBool("query/useColdSearcher",false);  dataDir=get("dataDir",null);  if (dataDir != null && dataDir.length() == 0)   dataDir=null;  userCacheConfigs=CacheConfig.getMultipleConfigs(this,"query/cache");  org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);  hashSetInverseLoadFactor=1.0f / getFloat("//HashDocSet/@loadFactor",0.75f);  hashDocSetMaxSize=getInt("//HashDocSet/@maxSize",3000);  httpCachingConfig=new HttpCachingConfig(this);  Node jmx=getNode("jmx",false);  if (jmx != null) {    jmxConfig=new JmxConfiguration(true,get("jmx/@agentId",null),get("jmx/@serviceUrl",null),get("jmx/@rootName",null));  } else {    jmxConfig=new JmxConfiguration(false,null,null,null);  }  maxWarmingSearchers=getInt("query/maxWarmingSearchers",Integer.MAX_VALUE);  loadPluginInfo(SolrRequestHandler.class,"requestHandler",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(QParserPlugin.class,"queryParser",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(QueryResponseWriter.class,"queryResponseWriter",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(ValueSourceParser.class,"valueSourceParser",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(TransformerFactory.class,"transformer",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(SearchComponent.class,"searchComponent",REQUIRE_NAME,REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(QueryConverter.class,"queryConverter",REQUIRE_NAME,REQUIRE_CLASS);  loadPluginInfo(SolrEventListener.class,"//listener",REQUIRE_CLASS,MULTI_OK);  loadPluginInfo(DirectoryFactory.class,"directoryFactory",REQUIRE_CLASS);  loadPluginInfo(IndexDeletionPolicy.class,indexConfigPrefix + "/deletionPolicy",REQUIRE_CLASS);  loadPluginInfo(CodecFactory.class,"codecFactory",REQUIRE_CLASS);  loadPluginInfo(IndexReaderFactory.class,"indexReaderFactory",REQUIRE_CLASS);  loadPluginInfo(UpdateRequestProcessorChain.class,"updateRequestProcessorChain",MULTI_OK);  loadPluginInfo(UpdateLog.class,"updateHandler/updateLog");  loadPluginInfo(IndexSchemaFactory.class,"schemaFactory",REQUIRE_CLASS);  loadPluginInfo(RestManager.class,"restManager");  updateHandlerInfo=loadUpdatehandlerInfo();  multipartUploadLimitKB=getInt("requestDispatcher/requestParsers/@multipartUploadLimitInKB",2048);  formUploadLimitKB=getInt("requestDispatcher/requestParsers/@formdataUploadLimitInKB",2048);  enableRemoteStreams=getBool("requestDispatcher/requestParsers/@enableRemoteStreaming",false);  handleSelect=getBool("requestDispatcher/@handleSelect",true);  addHttpRequestToContext=getBool("requestDispatcher/requestParsers/@addHttpRequestToContext",false);  solrRequestParsers=new SolrRequestParsers(this);  Config.log.info("Loaded SolrConfig: " + name);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public double readDouble() throws SQLException {  Double attrib=(Double)getNextAttribute();  return (attrib == null) ? 0 : attrib.doubleValue();}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  clear();}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedClientCertRequest(app,request)) {      return true;    }  }  return false;}  }
class C{  public void move(float deltaX){  swipeListView.onMove(downPosition,deltaX);  float posX=ViewCompat.getX(frontView);  if (opened.get(downPosition)) {    posX+=openedRight.get(downPosition) ? -viewWidth + rightOffset : viewWidth - leftOffset;  }  if (posX > 0 && !swipingRight) {    if (SwipeListView.DEBUG) {      Log.d(SwipeListView.TAG,"change to right");    }    swipingRight=!swipingRight;    swipeCurrentAction=swipeActionRight;    if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {      backView.setVisibility(View.GONE);    } else {      backView.setVisibility(View.VISIBLE);    }  }  if (posX < 0 && swipingRight) {    if (SwipeListView.DEBUG) {      Log.d(SwipeListView.TAG,"change to left");    }    swipingRight=!swipingRight;    swipeCurrentAction=swipeActionLeft;    if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {      backView.setVisibility(View.GONE);    } else {      backView.setVisibility(View.VISIBLE);    }  }  if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_DISMISS) {    ViewCompat.setTranslationX(parentView,deltaX);    ViewCompat.setAlpha(parentView,Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / viewWidth)));  } else   if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {    if ((swipingRight && deltaX > 0 && posX < DISPLACE_CHOICE) || (!swipingRight && deltaX < 0 && posX > -DISPLACE_CHOICE) || (swipingRight && deltaX < DISPLACE_CHOICE)|| (!swipingRight && deltaX > -DISPLACE_CHOICE)) {      ViewCompat.setTranslationX(frontView,deltaX);    }  } else {    ViewCompat.setTranslationX(frontView,deltaX);  }}  }
class C{  public void configureCommandStation(){}  }
class C{  public static void removeNetworkLinkAndDocument(StatelessService service,ComputeState computeState,String networkLink,List<Operation> enumerationOperations){  Map<String,Collection<Object>> collectionsMap=new HashMap<>();  Collection<Object> networkLinksToBeRemoved=new ArrayList<>(Arrays.asList(networkLink));  collectionsMap.put(ComputeState.FIELD_NAME_NETWORK_LINKS,networkLinksToBeRemoved);  ServiceStateCollectionUpdateRequest collectionRemovalBody=ServiceStateCollectionUpdateRequest.create(null,collectionsMap);  Operation removeNetworkLinkOperation=Operation.createPatch(UriUtils.buildUri(service.getHost(),computeState.documentSelfLink)).setBody(collectionRemovalBody).setReferer(service.getUri());  enumerationOperations.add(removeNetworkLinkOperation);  Operation removeNetworkLinkDocumentOperation=Operation.createDelete(UriUtils.buildUri(service.getHost(),networkLink)).setReferer(service.getUri());  enumerationOperations.add(removeNetworkLinkDocumentOperation);}  }
class C{  @GET @Path("/{id}/subtenants") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public TenantOrgList listSubTenants(@PathParam("id") URI id){  StorageOSUser user=getUserFromContext();  TenantOrg tenant=getTenantById(id,false);  TenantOrgList list=new TenantOrgList();  if (!TenantOrg.isRootTenant(tenant)) {    throw APIException.methodNotAllowed.notSupportedForSubtenants();  }  NamedElementQueryResultList subtenants=new NamedElementQueryResultList();  if (_permissionsHelper.userHasGivenRole(user,tenant.getId(),Role.SYSTEM_MONITOR,Role.TENANT_ADMIN,Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN)) {    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getTenantOrgSubTenantConstraint(tenant.getId()),subtenants);  } else {    Set<String> roles=new HashSet<String>();    roles.add(Role.TENANT_ADMIN.toString());    Map<URI,Set<String>> allTenantPermissions=_permissionsHelper.getAllPermissionsForUser(user,tenant.getId(),roles,true);    if (!allTenantPermissions.keySet().isEmpty()) {      List<TenantOrg> tenants=_dbClient.queryObjectField(TenantOrg.class,"label",new ArrayList<URI>(allTenantPermissions.keySet()));      List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(tenants.size());      for (      TenantOrg t : tenants) {        elements.add(NamedElementQueryResultList.NamedElement.createElement(t.getId(),t.getLabel()));      }      subtenants.setResult(elements.iterator());    } else {      throw APIException.forbidden.insufficientPermissionsForUser(user.getName());    }  }  for (  NamedElementQueryResultList.NamedElement el : subtenants) {    list.getSubtenants().add(toNamedRelatedResource(ResourceTypeEnum.TENANT,el.getId(),el.getName()));  }  return list;}  }
class C{  public int[] ints(){  return ref.ints;}  }
class C{  public void println(char x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  public boolean isAuthnRequestsSigned(){  return authnRequestsSigned;}  }
class C{  public boolean isOmitSourceMapUrl(){  return omitSourceMapUrl;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:    return ((InternalEList<?>)getRequiredRuntimeLibraries()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void validateTenant(VcenterDataCenterUpdate updateParam,VcenterDataCenter dataCenter){  Vcenter vcenter=_dbClient.queryObject(Vcenter.class,dataCenter.getVcenter());  ArgValidator.checkEntity(vcenter,dataCenter.getVcenter(),isIdEmbeddedInURL(dataCenter.getVcenter()));  if (updateParam.getTenant() == null) {    updateParam.setTenant(dataCenter.getTenant());  }  if (NullColumnValueGetter.isNullURI(updateParam.getTenant()) && vcenter.getCascadeTenancy()) {    throw APIException.badRequests.cannotRemoveDatacenterTenant(dataCenter.getLabel(),vcenter.getLabel());  }  Set<URI> vcenterTenants=_permissionsHelper.getUsageURIsFromAcls(vcenter.getAcls());  if (!NullColumnValueGetter.isNullURI(updateParam.getTenant()) && (CollectionUtils.isEmpty(vcenterTenants) || !vcenterTenants.contains(updateParam.getTenant()))) {    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,updateParam.getTenant());    throw APIException.badRequests.tenantDoesNotShareTheVcenter(tenant.getLabel(),vcenter.getLabel());  }}  }
class C{  @Interruptible private static void printTotalXml(Counter c,Phase phase){  openStatXml(c.getName());  Xml.attribute("suffix",c.getColumnSuffix());  Xml.openAttribute("value");  if (phase == Phase.COMBINED) {    c.printTotal();  } else {    c.printTotal(phase == Phase.MUTATOR);    Xml.closeAttribute();    Xml.openAttribute("phase");    Log.write(phase.toString());  }  Xml.closeAttribute();  closeStatXml();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T caseExportDeclaration(ExportDeclaration object){  return null;}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public static void main(String[] args){  doLoop(PolySchelling.class,args);  System.exit(0);}  }
class C{  public int onSameSide(Vec3 pointA,Vec3 pointB){  if (pointA == null || pointB == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","onSameSide","missingPoint"));  }  double da=this.distanceToPoint(pointA);  double db=this.distanceToPoint(pointB);  if (da < 0 && db < 0)   return -1;  if (da > 0 && db > 0)   return 1;  return 0;}  }
class C{  public HashCodeBuilder append(final int[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final int element : array) {      append(element);    }  }  return this;}  }
class C{  public byte[] decryptData(final byte[] cyphered,final int plainlen,final int offset) throws CryptoException {  final int enclen=cyphered.length - offset;  if (Cfg.DEBUG) {    Check.requires(enclen % 16 == 0,"Wrong padding");  }  if (Cfg.DEBUG) {    Check.requires(enclen >= plainlen,"Wrong plainlen");  }  if (Cfg.DEBUG) {    Check.requires(crypto != null,"null encryption");  }  byte[] plain=null;  try {    plain=crypto.decrypt(cyphered,plainlen,offset);  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (decryptData) Error: " + e);    }  }  return plain;}  }
class C{  private XYPlot initializeUpperPlot(){  cpuUsage=new YIntervalSeriesImproved("cpu usage");  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();  yintervalseriescollection.addSeries(cpuUsage);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  renderer.setSeriesFillPaint(0,new Color(255,200,200));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("CPU usage of the VM");  rangeAxis.setRange(new Range(0,100),true,false);  rangeAxis.setAutoRangeMinimumSize(100.0d,false);  rangeAxis.setTickUnit(new NumberTickUnit(10.0d,new DecimalFormat("0")));  rangeAxis.setRangeType(RangeType.POSITIVE);  final XYPlot subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  protected void addWay(DefaultMapWay way){  ways.put(way.getId(),way);}  }
class C{  private void installUpdate(CallbackContext jsCallback){  if (!isPluginReadyForWork) {    return;  }  ChcpError error=UpdatesInstaller.install(cordova.getActivity(),pluginInternalPrefs.getReadyForInstallationReleaseVersionName(),pluginInternalPrefs.getCurrentReleaseVersionName());  if (error != ChcpError.NONE) {    if (jsCallback != null) {      PluginResult errorResult=PluginResultHelper.createPluginResult(UpdateInstallationErrorEvent.EVENT_NAME,null,error);      jsCallback.sendPluginResult(errorResult);    }    return;  }  if (jsCallback != null) {    installJsCallback=jsCallback;  }}  }
class C{  private int groupIndex(String groupName){  int idx=parentPattern.indexOf(groupName);  return idx > -1 ? idx + 1 : -1;}  }
class C{  public static boolean isReservedStreamName(String name){  return name.startsWith(".");}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private void expandAll(JTree catTree,TreePath parent,boolean expand){  TreeNode node=(TreeNode)parent.getLastPathComponent();  if (node.getChildCount() >= 0) {    for (Enumeration e=node.children(); e.hasMoreElements(); ) {      TreeNode n=(TreeNode)e.nextElement();      TreePath path=parent.pathByAddingChild(n);      expandAll(catTree,path,expand);    }  }  if (parent.getPathCount() > 1) {    if (expand) {      catTree.expandPath(parent);    } else {      catTree.collapsePath(parent);    }  }}  }
class C{  public final void store8(int addr,int value){  writableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)]=(byte)value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.883 -0500",hash_original_method="0D657EDEC08CB18117CF62EC578D6020",hash_generated_method="94D5650B1B5A26667C8140497A0F1482") public ObjectStreamField(String name,Class<?> cl){  if (name == null || cl == null) {    throw new NullPointerException();  }  this.name=name;  this.type=new WeakReference<Class<?>>(cl);}  }
class C{  @Override public boolean add(E o){  return map.put(o,DUMMY_VALUE) == null;}  }
class C{  public static ReilInstruction createSub(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_SUB,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
