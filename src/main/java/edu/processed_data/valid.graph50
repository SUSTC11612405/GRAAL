class C{  private void adjustFocus(boolean inWindow){  if ((component != null) && component.isEnabled() && component.isRequestFocusEnabled()) {    if (inWindow) {      component.requestFocusInWindow();    } else {      component.requestFocus();    }  }}  }
class C{  public boolean isRealmAdmin(){  SSOToken token=getUserSSOToken();  try {    Set actionNames=new HashSet();    actionNames.add("MODIFY");    DelegationEvaluator de=new DelegationEvaluatorImpl();    DelegationPermission permission=new DelegationPermission(token.getProperty(Constants.ORGANIZATION),"sunAMRealmService","1.0","organization","default",actionNames,null);    return de.isAllowed(token,permission,null);  } catch (  SSOException e) {    debug.warning("UserPasswordResetOptionsModelImpl.isRealmAdmin",e);  }catch (  DelegationException e) {    debug.warning("UserPasswordResetOptionsModelImpl.isRealmAdmin",e);  }  return false;}  }
class C{  public void deleteRule(long ruleID){  if (isClosed) {    throw new IllegalStateException(TAG + " is closed.");  }  ruleDbAdapter.delete(ruleID);  Cursor cursorRuleAction=ruleActionDbAdapter.fetchAll(ruleID,null);  while (cursorRuleAction.moveToNext()) {    long ruleActionID=getLongFromCursor(cursorRuleAction,RuleActionDbAdapter.KEY_RULEACTIONID);    ruleActionDbAdapter.delete(ruleActionID);    Cursor cursorRuleActionParameter=ruleActionParameterDbAdapter.fetchAll(ruleActionID,null,null);    while (cursorRuleActionParameter.moveToNext()) {      long ruleActionParameterID=getLongFromCursor(cursorRuleActionParameter,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERID);      ruleActionParameterDbAdapter.delete(ruleActionParameterID);    }    cursorRuleActionParameter.close();  }  cursorRuleAction.close();  Cursor cursorFilter=ruleFilterDbAdapter.fetchAll(ruleID,null,null,null,null,null);  while (cursorFilter.moveToNext()) {    long ruleFilterID=getLongFromCursor(cursorFilter,RuleFilterDbAdapter.KEY_RULEFILTERID);    ruleFilterDbAdapter.delete(ruleFilterID);  }  cursorFilter.close();}  }
class C{  @Override protected void onReceiveResult(int resultCode,Bundle resultData){  addressOutput=resultData.getString(Constants.RESULT_DATA_KEY);  displayAddressOutput();  if (resultCode == Constants.SUCCESS_RESULT) {    showToast(getString(R.string.address_found));  }  addressRequested=false;  updateUiWidgets();}  }
class C{  private int handleReturnFromRedirect(final int state,final HttpServletRequest request,final String spName,final HttpServletResponse response) throws AuthLoginException {  removeCookiesForRedirects(request,response);  if (Boolean.parseBoolean(request.getParameter(SAML2Proxy.ERROR_PARAM_KEY))) {    return handleRedirectError(request);  }  final String key;  if (request.getParameter("jsonContent") != null) {    key=JsonValueBuilder.toJsonValue(request.getParameter("jsonContent")).get("responsekey").asString();  } else {    key=request.getParameter(SAML2Proxy.RESPONSE_KEY);  }  final String username;  SAML2ResponseData data=null;  if (!StringUtils.isBlank(key)) {    data=(SAML2ResponseData)SAML2Store.getTokenFromStore(key);    if (data == null) {      if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {        try {          data=(SAML2ResponseData)SAML2FailoverUtils.retrieveSAML2Token(key);        } catch (        SAML2TokenRepositoryException e) {          return processError(bundle.getString("samlFailoverError"),"SAML2.handleReturnFromRedirect : Error reading from failover map.",e);        }      }    }  }  if (data == null) {    return processError(bundle.getString("localLinkError"),"SAML2 :: handleReturnFromRedirect() : " + "Unable to perform local linking - response data not found");  }  storageKey=key;  assertionSubject=data.getSubject();  authnAssertion=data.getAssertion();  sessionIndex=data.getSessionIndex();  respInfo=data.getResponseInfo();  try {    username=SPACSUtils.getPrincipalWithoutLogin(assertionSubject,authnAssertion,realm,spName,metaManager,entityName,storageKey);    if (SAML2PluginsUtils.isDynamicProfile(realm)) {      String spEntityId=SPSSOFederate.getSPEntityId(metaAlias);      if (shouldPersistNameID(spEntityId)) {        NameIDInfo info=new NameIDInfo(spEntityId,entityName,getNameId(),SAML2Constants.SP_ROLE,false);        setUserAttributes(AccountUtils.convertToAttributes(info,null));      }    }    if (username != null) {      principal=new SAML2Principal(username);      return success(authnAssertion,getNameId(),username);    }  } catch (  SAML2Exception e) {    return processError(e,null,"SAML2.handleReturnFromRedirect : Unable to perform user lookup.");  }  if (StringUtils.isBlank(localChain)) {    return processError(bundle.getString("localLinkError"),"SAML2 :: handleReturnFromRedirect() : " + "Unable to perform local linking - local auth chain not found.");  }  authenticationContext=new AuthContext(realm);  authenticationContext.login(AuthContext.IndexType.SERVICE,localChain,null,null,null,null);  return injectCallbacks(null,state);}  }
class C{  private void createFoldersData(final Element rootElement){  Element element=creator.getDocument().createElement("Folders");  for (  String dirPath : directories) {    File dir=new File(this.configuration.getTypes().get(this.type).getPath() + this.currentFolder + dirPath);    if (dir.exists()) {      XmlElementData xmlElementData=new XmlElementData("Folder");      xmlElementData.getAttributes().add(new XmlAttribute("name",dirPath));      xmlElementData.getAttributes().add(new XmlAttribute("hasChildren",FileUtils.hasChildren(this.currentFolder + dirPath + "/",dir,configuration,this.type,this.userRole).toString()));      xmlElementData.getAttributes().add(new XmlAttribute("acl",String.valueOf(AccessControlUtil.getInstance(configuration).checkACLForRole(this.type,this.currentFolder + dirPath,this.userRole))));      xmlElementData.addToDocument(creator.getDocument(),element);    }  }  rootElement.appendChild(element);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked){  return encodeBase64(binaryData,isChunked,false);}  }
class C{  @DataProvider(name="stringValues") public Object[][] createStringValues(){  return new Object[][]{{"\"\"",true},{"\"escaped\"\"dquotes\"",true},{"\"valid Unicode \u00D6\u00C4\"",true},{"\"only one \" \"",false},{"invalid without dquotes",false},{"\"missing end",false},{"\"valid string\" with extra trailing characters",false}};}  }
class C{  public void test_parseObjectLjava_lang_StringLjava_text_ParsePosition(){  DateFormat df=DateFormat.getInstance();  try {    Date current=new Date();    ParsePosition pp=new ParsePosition(0);    int parseIndex=pp.getIndex();    Date result=(Date)df.parseObject(df.format(current),pp);    assertEquals("Dates are different.",current.getDate(),result.getDate());    assertEquals("Days are different.",current.getDay(),result.getDay());    assertEquals("Months are different.",current.getMonth(),result.getMonth());    assertEquals("Years are different.",current.getYear(),result.getYear());    assertEquals("Hours are different",current.getHours(),result.getHours());    assertEquals("Minutes are diffetrent,",current.getMinutes(),result.getMinutes());    assertTrue("Parse operation return null",result != null);    assertTrue("ParseIndex is incorrect",pp.getIndex() != parseIndex);    pp.setIndex(0);    char[] cur=df.format(current).toCharArray();    cur[cur.length / 2]='Z';    String partialCorrect=new String(cur);    result=(Date)df.parseObject(partialCorrect,pp);    assertTrue("Parse operation return not-null",result == null);    assertTrue("ParseIndex is incorrect",pp.getIndex() == 0);    assertTrue("ParseErrorIndex is incorrect",pp.getErrorIndex() == cur.length / 2);    pp.setIndex(2);    char[] curDate=df.format(current).toCharArray();    char[] newArray=new char[curDate.length + pp.getIndex()];    for (int i=0; i < curDate.length; i++) {      newArray[i + pp.getIndex()]=curDate[i];    }    result=(Date)df.parseObject(new String(newArray),pp);    assertEquals("Dates are different.",current.getDate(),result.getDate());    assertEquals("Days are different.",current.getDay(),result.getDay());    assertEquals("Months are different.",current.getMonth(),result.getMonth());    assertEquals("Years are different.",current.getYear(),result.getYear());    assertEquals("Hours are different",current.getHours(),result.getHours());    assertEquals("Minutes are diffetrent,",current.getMinutes(),result.getMinutes());    try {      df.parseObject(df.format(current),null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    assertNull(df.parseObject("test",pp));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void windowGainedFocus(WindowEvent e){}  }
class C{  EmulatedFieldsForLoading(ObjectStreamClass streamClass){  this.streamClass=streamClass;  emulatedFields=new EmulatedFields(streamClass.getLoadFields(),streamClass.fields());}  }
class C{  static int[] convertMidTerms(int[] k){  int[] res=new int[3];  if (k.length == 1) {    res[0]=k[0];  } else {    if (k.length != 3) {      throw new IllegalArgumentException("Only Trinomials and pentanomials supported");    }    if (k[0] < k[1] && k[0] < k[2]) {      res[0]=k[0];      if (k[1] < k[2]) {        res[1]=k[1];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[1];      }    } else     if (k[1] < k[2]) {      res[0]=k[1];      if (k[0] < k[2]) {        res[1]=k[0];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[0];      }    } else {      res[0]=k[2];      if (k[0] < k[1]) {        res[1]=k[0];        res[2]=k[1];      } else {        res[1]=k[1];        res[2]=k[0];      }    }  }  return res;}  }
class C{  public boolean canStripWhiteSpace(){  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.canStripWhiteSpace() : false;}  }
class C{  private static LibPadstack change_padstack_layers(LibPadstack p_old_padstack,int p_new_layer,RoutingBoard p_board,Map<LibPadstack,LibPadstack> p_padstack_pairs){  LibPadstack new_padstack;  int old_layer=p_old_padstack.from_layer();  if (old_layer == p_new_layer) {    new_padstack=p_old_padstack;  } else   if (p_padstack_pairs.containsKey(p_old_padstack)) {    new_padstack=p_padstack_pairs.get(p_old_padstack);  } else {    ShapeConvex[] new_shapes=new ShapeConvex[p_board.get_layer_count()];    int layer_diff=old_layer - p_new_layer;    for (int i=0; i < new_shapes.length; ++i) {      int new_layer_no=i + layer_diff;      if (new_layer_no >= 0 && new_layer_no < new_shapes.length) {        new_shapes[i]=p_old_padstack.get_shape(i + layer_diff);      }    }    new_padstack=p_board.brd_library.padstacks.add(new_shapes);    p_padstack_pairs.put(p_old_padstack,new_padstack);  }  return new_padstack;}  }
class C{  public void beginMonitoringOf(final InetSocketAddress socketAddress){  candidateSockets.beginMonitoringSocketIdentifier(socketAddress,SocketIdentifier.fromInet4SocketAddress(socketAddress));}  }
class C{  @Override public Foo[] findByUuid_PrevAndNext(long fooId,String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public Vector(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void add(Permission permission){  perms.put(permission,permission);}  }
class C{  public void initialize(boolean initDb){  CassandraConfigWithGenericSessionAccess dbConfig=new CassandraConfigWithGenericSessionAccess(properties);  if (initDb) {    Utils.initDatabase(false,replicationFactorString,dbConfig.getGenericSession());  }  DatabaseRepository databaseRepository=new DatabaseRepositoryImpl(dbConfig.getSession());  TableRepository tableRepository=new TableRepositoryImpl(dbConfig.getSession());  DocumentRepository documentRepository=new DocumentRepositoryImpl(dbConfig.getSession());  IndexRepository indexRepository=new IndexRepositoryImpl(dbConfig.getSession());  QueryRepository queryRepository=new QueryRepositoryImpl(dbConfig.getSession());  IndexStatusRepository indexStatusRepository=new IndexStatusRepositoryImpl(dbConfig.getSession());  DatabaseService databaseService=new DatabaseService(databaseRepository);  TableService tableService=new TableService(databaseRepository,tableRepository);  documentService=new DocumentService(tableRepository,documentRepository,PluginHolder.getInstance().getNotifierPlugins());  IndexService indexService=new IndexService(tableRepository,indexRepository,indexStatusRepository);  queryService=new QueryService(databaseRepository,tableRepository,queryRepository);  databaseController=new DatabaseController(databaseService);  tableController=new TableController(tableService);  documentController=new DocumentController(getDocumentService());  indexController=new IndexController(indexService);  indexStatusController=new IndexStatusController(indexService);  queryController=new QueryController(getQueryService());  healthController=new HealthCheckController();  buildInfoController=new BuildInfoController();  EventBus bus=new LocalEventBusBuilder().subscribe(new IndexCreatedHandler(indexRepository,indexStatusRepository,documentRepository)).build();  DomainEvents.addBus("local",bus);}  }
class C{  ByteString entryToDatabase(Entry entry,DataConfig dataConfig) throws DirectoryException {  EntryCodec codec=acquireEntryCodec();  try {    return codec.encode(entry,dataConfig);  }  finally {    codec.release();  }}  }
class C{  public ClientHandler(final Handler delegate){  this.delegate=delegate;}  }
class C{  private static ConnectionFactory newConnectionFactory(LDAPURL ldapurl,String username,char[] password,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){  Boolean ssl=ldapurl.isSSL();  int heartBeatTimeout=SystemPropertiesManager.getAsInt(Constants.LDAP_HEARTBEAT_TIMEOUT,DEFAULT_HEARTBEAT_TIMEOUT);  if (ssl != null && ssl.booleanValue()) {    String defaultProtocolVersion=SystemPropertiesManager.get(Constants.LDAP_SERVER_TLS_VERSION,"TLSv1");    try {      ldapOptions=Options.copyOf(ldapOptions).set(LDAPConnectionFactory.SSL_CONTEXT,new SSLContextBuilder().setProtocol(defaultProtocolVersion).getSSLContext());    } catch (    GeneralSecurityException gse) {      DEBUG.error("An error occurred while creating SSLContext",gse);    }  }  if (heartBeatInterval > 0 && heartBeatTimeUnit != null) {    TimeUnit unit=TimeUnit.valueOf(heartBeatTimeUnit.toUpperCase());    ldapOptions=ldapOptions.set(HEARTBEAT_ENABLED,true).set(HEARTBEAT_INTERVAL,new Duration(unit.toSeconds(heartBeatInterval),TimeUnit.SECONDS)).set(HEARTBEAT_TIMEOUT,new Duration(unit.toSeconds(heartBeatTimeout),TimeUnit.SECONDS));  }  if (username != null) {    ldapOptions=ldapOptions.set(AUTHN_BIND_REQUEST,LDAPRequests.newSimpleBindRequest(username,password));  }  return new LDAPConnectionFactory(ldapurl.getHost(),ldapurl.getPort(),ldapOptions);}  }
class C{  public void displayMessageAndUsageReference(final PrintStream printStream,final LocalizableMessage message){  printWrappedText(printStream,message);  printStream.println();  printWrappedText(printStream,getHelpUsageReference());}  }
class C{  private NSObject parseObject(int obj) throws PropertyListFormatException, UnsupportedEncodingException {  int offset=offsetTable[obj];  byte type=bytes[offset];  int objType=(type & 0xF0) >> 4;  int objInfo=(type & 0x0F);switch (objType) {case 0x0:{switch (objInfo) {case 0x0:{          return null;        }case 0x8:{        return new NSNumber(false);      }case 0x9:{      return new NSNumber(true);    }case 0xC:{    throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");  }case 0xD:{  throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");}case 0xE:{throw new UnsupportedOperationException("The given binary property list contains a UUID object. Parsing of this object type is not yet implemented.");}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}case 0x1:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.INTEGER);}case 0x2:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.REAL);}case 0x3:{if (objInfo != 0x3) {throw new PropertyListFormatException("The given binary property list contains a date object of an unknown type (" + objInfo + ")");}return new NSDate(bytes,offset + 1,offset + 9);}case 0x4:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int dataOffset=lengthAndOffset[1];return new NSData(copyOfRange(bytes,offset + dataOffset,offset + dataOffset + length));}case 0x5:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int strOffset=lengthAndOffset[1];return new NSString(bytes,offset + strOffset,offset + strOffset + length,"ASCII");}case 0x6:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int characters=lengthAndOffset[0];int strOffset=lengthAndOffset[1];int length=characters * 2;return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-16BE");}case 0x7:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int strOffset=lengthAndOffset[1];int characters=lengthAndOffset[0];int length=calculateUtf8StringLength(bytes,offset + strOffset,characters);return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-8");}case 0x8:{int length=objInfo + 1;return new UID(String.valueOf(obj),copyOfRange(bytes,offset + 1,offset + 1 + length));}case 0xA:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int arrayOffset=lengthAndOffset[1];NSArray array=new NSArray(length);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + arrayOffset + i * objectRefSize,offset + arrayOffset + (i + 1) * objectRefSize);array.setValue(i,parseObject(objRef));}return array;}case 0xB:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet(true);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xC:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet();for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xD:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSDictionary dict=new NSDictionary();for (int i=0; i < length; i++) {int keyRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);int valRef=(int)parseUnsignedInt(bytes,offset + contentOffset + (length * objectRefSize)+ i * objectRefSize,offset + contentOffset + (length * objectRefSize)+ (i + 1) * objectRefSize);NSObject key=parseObject(keyRef);NSObject val=parseObject(valRef);assert key != null;dict.put(key.toString(),val);}return dict;}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}  }
class C{  void incrementIndexedSearchCount(){  if (filterUseEnabled) {    indexedSearchCount.getAndIncrement();  }}  }
class C{  private void rehash(){  int oldCapacity=m_capacity;  HashEntry[] oldTable=m_table;  int newCapacity=2 * oldCapacity + 1;  m_capacity=newCapacity;  m_threshold=(int)(newCapacity * m_loadFactor);  m_table=new HashEntry[newCapacity];  for (int i=oldCapacity - 1; i >= 0; i--) {    for (HashEntry old=oldTable[i]; old != null; ) {      HashEntry e=old;      old=old.next;      int newIndex=e.hash % newCapacity;      if (newIndex < 0)       newIndex=-newIndex;      e.next=m_table[newIndex];      m_table[newIndex]=e;    }  }}  }
class C{  public static String marshal(Object context) throws Exception {  if (context instanceof SSOToken) {    return TOKEN_PREFIX + ((SSOToken)context).getTokenID().toString();  } else {    ByteArrayOutputStream bs=new ByteArrayOutputStream();    ObjectOutputStream os=new ObjectOutputStream(bs);    os.writeObject(context);    os.flush();    os.close();    return OBJECT_PREFIX + Base64.encode(bs.toByteArray());  }}  }
class C{  private void authzIDCheck(final AuthorizeCallback callback){  final String authzid=callback.getAuthorizationID();  final String lowerAuthzID=toLowerCase(authzid);  String idStr;  callback.setAuthorized(true);  if (lowerAuthzID.startsWith("u:")) {    idStr=authzid.substring(2);  } else {    idStr=authzid;  }  if (idStr.length() == 0) {    authzEntry=null;  } else {    try {      authzEntry=identityMapper.getEntryForID(idStr);      if (authzEntry == null) {        setCallbackMsg(ERR_SASL_AUTHZID_NO_MAPPED_ENTRY.get(authzid));        callback.setAuthorized(false);        return;      }    } catch (    final DirectoryException e) {      logger.traceException(e);      setCallbackMsg(ERR_SASL_AUTHZID_NO_MAPPED_ENTRY.get(authzid));      callback.setAuthorized(false);      return;    }  }  if (authzEntry == null || !authzEntry.getName().equals(authEntry.getName())) {    final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,DirectoryServer.isRootDN(authEntry.getName()));    if (!hasPrivilege(authInfo)) {      callback.setAuthorized(false);    } else {      callback.setAuthorized(hasPermission(authInfo));    }  }}  }
class C{  public SchemaException(){  super();}  }
class C{  public V put(K key,V value){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry<K,V> e=tab[i]; e != null; e=e.next) {    if (h == e.hash && eq(k,e.get())) {      V oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  Entry<K,V> e=tab[i];  tab[i]=new Entry<>(k,value,queue,h,e);  if (++size >= threshold)   resize(tab.length * 2);  return null;}  }
class C{  public final void rotate_deg(int p_angle_degree,PlaPointInt p_pole,boolean p_flip_style_rotate_first){  if (p_angle_degree == 0)   return;  if (p_flip_style_rotate_first && !is_on_front()) {    p_angle_degree=360 - p_angle_degree;  }  rotation_in_degree=normalize_rotation(rotation_in_degree + p_angle_degree);  if (location != null) {    location=location.to_float().rotate_deg(p_angle_degree,p_pole.to_float()).round();  }}  }
class C{  @Override public Map<String,Map<String,Set<String>>> search(String userIDAttributeName,int limit,QueryFilter<JsonPointer> queryFilter,Set<String> attributesToFetch,String filterOperand,Map<String,Set<String>> avPairs) throws IdRepoUnsupportedOpException {  throw new IdRepoUnsupportedOpException("query filter search is not supported as yet");}  }
class C{  public UserSubject(String user,String pSubjectName){  super(user,pSubjectName);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  @SuppressLint("InlinedApi") @SuppressWarnings("deprecation") private static String createSalt(Context context){  String abiString;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    abiString=Build.SUPPORTED_ABIS[0];  } else {    abiString=Build.CPU_ABI;  }  String fingerprint="HA" + (Build.BOARD.length() % 10) + (Build.BRAND.length() % 10)+ (abiString.length() % 10)+ (Build.PRODUCT.length() % 10);  String serial="";  try {    serial=android.os.Build.class.getField("SERIAL").get(null).toString();  } catch (  Throwable t) {  }  return fingerprint + ":" + serial;}  }
class C{  public void upgradeBundle(Path newBundle,String symbolicName) throws UpdateException {  List<Bundle> installedBundles=getBundles(symbolicName);  if (!installedBundles.isEmpty()) {    replaceBundle(installedBundles,newBundle);  } else {    installBundle(newBundle);  }}  }
class C{  private void init(String host,int mask){  if ((mask & ALL) != mask)   throw new IllegalArgumentException("invalid actions mask");  this.mask=mask | RESOLVE;  int rb=0;  int start=0, end=0;  int sep=-1;  String hostport=host;  if (host.charAt(0) == '[') {    start=1;    rb=host.indexOf(']');    if (rb != -1) {      host=host.substring(start,rb);    } else {      throw new IllegalArgumentException("invalid host/port: " + host);    }    sep=hostport.indexOf(':',rb + 1);  } else {    start=0;    sep=host.indexOf(':',rb);    end=sep;    if (sep != -1) {      host=host.substring(start,end);    }  }  if (sep != -1) {    String port=hostport.substring(sep + 1);    try {      portrange=parsePort(port);    } catch (    Exception e) {      throw new IllegalArgumentException("invalid port range: " + port);    }  } else {    portrange=new int[]{PORT_MIN,PORT_MAX};  }  hostname=host;  if (host.lastIndexOf('*') > 0) {    throw new IllegalArgumentException("invalid host wildcard specification");  } else   if (host.startsWith("*")) {    wildcard=true;    if (host.equals("*")) {      cname="";    } else     if (host.startsWith("*.")) {      cname=host.substring(1).toLowerCase();    } else {      throw new IllegalArgumentException("invalid host wildcard specification");    }    return;  } else {    if (host.length() > 0) {      char ch=host.charAt(0);      if (ch == ':' || Character.digit(ch,16) != -1) {        byte ip[]=IPAddressUtil.textToNumericFormatV4(host);        if (ip == null) {          ip=IPAddressUtil.textToNumericFormatV6(host);        }        if (ip != null) {          try {            addresses=new InetAddress[]{InetAddress.getByAddress(ip)};            init_with_ip=true;          } catch (          UnknownHostException uhe) {            invalid=true;          }        }      }    }  }}  }
class C{  public LinkedListNode addFirst(LinkedListNode node){  node.next=head.next;  node.previous=head;  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  int end=m_length + m_start;  char[] buf=new char[m_length];  FastStringBuffer fsb=fsb();  boolean edit=false;  int d=0;  boolean pres=false;  for (int s=m_start; s < end; s++) {    char c=fsb.charAt(s);    if (isSpace(c)) {      if (!pres) {        if (' ' != c) {          edit=true;        }        buf[d++]=' ';        if (doublePunctuationSpaces && (d != 0)) {          char prevChar=buf[d - 1];          if (!((prevChar == '.') || (prevChar == '!') || (prevChar == '?'))) {            pres=true;          }        } else {          pres=true;        }      } else {        edit=true;        pres=true;      }    } else {      buf[d++]=c;      pres=false;    }  }  if (trimTail && 1 <= d && ' ' == buf[d - 1]) {    edit=true;    d--;  }  int start=0;  if (trimHead && 0 < d && ' ' == buf[0]) {    edit=true;    start++;  }  XMLStringFactory xsf=XMLStringFactoryImpl.getFactory();  return edit ? xsf.newstr(buf,start,d - start) : this;}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (null != m_excludeResultPrefixes) {    return containsExcludeResultPrefix(prefix,uri);  }  return false;}  }
class C{  public void insert_obstacle(PlaArea p_area,int p_layer,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,int p_clearance_class,int p_component_no,String p_name,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_obstacle: p_area is null");    return;  }  BrdArea obs=new BrdArea(p_area,p_layer,p_translation,p_rotation_in_degree,p_side_changed,p_clearance_class,0,p_component_no,p_name,p_fixed_state,this);  insert_item(obs);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, TransformerException {  try {    stream.defaultReadObject();  } catch (  ClassNotFoundException cnfe) {    throw new TransformerException(cnfe);  }}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.PDPConfigElement createPDPConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.PDPConfigElementImpl();}  }
class C{  public Object createToken(String name,String Password){  return (SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public void testUtf8StringsWithEscaping() throws Exception {  List<byte[]> strings=generateStrings(new Random(28),720000,true);  ByteArrayOutputStream out=new ByteArrayOutputStream(16000);  SmileFactory jf=new SmileFactory();  JsonGenerator jgen=jf.createGenerator(out,JsonEncoding.UTF8);  jgen.writeStartArray();  for (  byte[] str : strings) {    jgen.writeUTF8String(str,0,str.length);  }  jgen.writeEndArray();  jgen.close();  byte[] json=out.toByteArray();  JsonParser jp=jf.createParser(json);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  for (  byte[] inputBytes : strings) {    assertToken(JsonToken.VALUE_STRING,jp.nextToken());    String string=jp.getText();    byte[] outputBytes=string.getBytes("UTF-8");    assertEquals(inputBytes.length,outputBytes.length);    assertArrayEquals(inputBytes,outputBytes);  }  assertToken(JsonToken.END_ARRAY,jp.nextToken());  jp.close();}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private Context buildContextStructure(final Realm realm){  return ClientContext.newInternalClientContext(new RealmContext(subjectContext,realm));}  }
class C{  public void changeHighlight(Object tag,int p0,int p1) throws BadLocationException {  if (p0 < 0) {    throw new BadLocationException("Invalid beginning of the range",p0);  }  if (p1 < p0) {    throw new BadLocationException("Invalid end of the range",p1);  }  Document doc=component.getDocument();  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }    lhi.width=lhi.height=0;    lhi.p0=doc.createPosition(p0);    lhi.p1=doc.createPosition(p1);    safeDamageRange(Math.min(p0,p1),Math.max(p0,p1));  } else {    HighlightInfo info=(HighlightInfo)tag;    int oldP0=info.p0.getOffset();    int oldP1=info.p1.getOffset();    if (p0 == oldP0) {      safeDamageRange(Math.min(oldP1,p1),Math.max(oldP1,p1));    } else     if (p1 == oldP1) {      safeDamageRange(Math.min(p0,oldP0),Math.max(p0,oldP0));    } else {      safeDamageRange(oldP0,oldP1);      safeDamageRange(p0,p1);    }    info.p0=doc.createPosition(p0);    info.p1=doc.createPosition(p1);  }}  }
class C{  public WorkQueue initializeWorkQueue() throws ConfigException, InitializationException {  WorkQueueCfg workQueueConfig=serverContext.getRootConfig().getWorkQueue();  workQueueConfig.addChangeListener(this);  WorkQueueCfgDefn definition=WorkQueueCfgDefn.getInstance();  ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();  Class<? extends WorkQueue> workQueueClass=propertyDefinition.loadClass(workQueueConfig.getJavaClass(),WorkQueue.class);  try {    WorkQueue workQueue=workQueueClass.newInstance();    workQueue.initializeWorkQueue(workQueueConfig);    return workQueue;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_WORK_QUEUE_INITIALIZATION_FAILED.get(workQueueConfig.getJavaClass(),workQueueConfig.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  @Override public void initialize(){  super.initialize();  DefaultLookup.setDefaultLookup(new SynthDefaultLookup());  setStyleFactory(factory);  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(_handler);}  }
class C{  public static boolean doVerifierAction(String logName,boolean result){  return vout.doVerifierAction(logName,result);}  }
class C{  public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public OAuth2ScopeCondition(){  debug=PrivilegeManager.debug;}  }
class C{  @Override public ConnectionChangeRecordWriter writeComment(final CharSequence comment){  Reject.ifNull(comment);  return this;}  }
class C{  @Override public void write(int c) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(c);  } else {    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();    cb[nextChar++]=(char)c;  }}  }
class C{  public void preSingleSignOnProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile) throws SAML2Exception {  return;}  }
class C{  protected void resetDeltaRequest(Session session){  if (log.isDebugEnabled()) {    log.debug(sm.getString("ReplicationValve.resetDeltaRequest",session.getManager().getContext().getName()));  }  ((DeltaSession)session).resetDeltaRequest();}  }
class C{  private static Response verifyResponse(String realm,String pepEntityID,Response samlResponse) throws SAML2Exception {  Response response=samlResponse;  String classMethod="QueryClient:verifyResponse";  if (samlResponse != null) {    Issuer issuer=samlResponse.getIssuer();    String issuerID=null;    if (issuer != null) {      issuerID=issuer.getValue().trim();    }    String pdpEntityID=issuerID;    boolean isTrusted=verifyResponseIssuer(realm,pepEntityID,issuerID);    if (!isTrusted) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Issuer in Response is not valid.");      }      String[] args={realm,pepEntityID,issuerID};      LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_RESPONSE,args);      throw new SAML2Exception(SAML2SDKUtils.BUNDLE_NAME,"invalidIssuerInResponse",args);    }    verifySignedResponse(pepEntityID,pdpEntityID,samlResponse);    try {      XACMLAuthzDecisionQueryConfigElement pepConfig=saml2MetaManager.getPolicyEnforcementPointConfig(realm,pepEntityID);      String assertionEncrypted=getAttributeValueFromPEPConfig(pepConfig,SAML2Constants.WANT_ASSERTION_ENCRYPTED);      boolean wantAssertionEncrypted=(assertionEncrypted != null && assertionEncrypted.equalsIgnoreCase("true")) ? true : false;      boolean wantAssertionSigned=wantAssertionSigned(realm,pepEntityID);      String respID=samlResponse.getID();      List assertions=samlResponse.getAssertion();      if (wantAssertionEncrypted && (assertions != null && (assertions.size() != 0))) {        String[] data={issuerID,respID};        LogUtil.error(Level.INFO,LogUtil.ASSERTION_FROM_PDP_NOT_ENCRYPTED,data);        throw new SAML2Exception(SAML2SDKUtils.bundle.getString("assertionNotEncrypted"));      }      Set<PrivateKey> decryptionKeys;      List<EncryptedAssertion> encAssertions=samlResponse.getEncryptedAssertion();      if (encAssertions != null) {        decryptionKeys=KeyUtil.getDecryptionKeys(pepConfig);        for (        EncryptedAssertion encAssertion : encAssertions) {          Assertion assertion=encAssertion.decrypt(decryptionKeys);          if (assertions == null) {            assertions=new ArrayList<>();          }          assertions.add(assertion);        }      }      if (assertions == null || assertions.size() == 0) {        if (debug.messageEnabled()) {          debug.message(classMethod + "no assertion in the Response.");        }        String[] data={issuerID,respID};        LogUtil.error(Level.INFO,LogUtil.MISSING_ASSERTION_IN_PDP_RESPONSE,data);        throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missingAssertion"));      }      Iterator assertionIter=assertions.iterator();      Set<X509Certificate> verificationCerts=null;      XACMLPDPDescriptorElement pdpDesc=null;      if (wantAssertionSigned) {        pdpDesc=saml2MetaManager.getPolicyDecisionPointDescriptor(realm,pdpEntityID);        verificationCerts=KeyUtil.getPDPVerificationCerts(pdpDesc,pdpEntityID);      }      while (assertionIter.hasNext()) {        Assertion assertion=(Assertion)assertionIter.next();        String assertionID=assertion.getID();        String assertionIssuer=assertion.getIssuer().getValue().trim();        isTrusted=verifyResponseIssuer(realm,pepEntityID,assertionIssuer);        if (!isTrusted) {          debug.error(classMethod + "Assertion's source site is not valid.");          String[] data={assertionIssuer,assertionID};          LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_IN_ASSERTION_FROM_PDP,data);          throw new SAML2Exception(SAML2SDKUtils.bundle.getString("invalidIssuerInAssertion"));        }        String respIssuer=samlResponse.getIssuer().getValue().trim();        if (!respIssuer.equals(assertionIssuer)) {          if (debug.messageEnabled()) {            debug.message(classMethod + "Issuer in Assertion " + assertionIssuer+ "doesn't match the Issuer in Response."+ respIssuer);          }          String[] data={pdpEntityID,assertionIssuer};          LogUtil.error(Level.INFO,LogUtil.MISMATCH_ISSUER_IN_ASSERTION_FROM_PDP,data);          throw new SAML2Exception(SAML2SDKUtils.bundle.getString("mismatchIssuer"));        }        if (wantAssertionSigned) {          if (debug.messageEnabled()) {            debug.message(classMethod + "wantAssertionSigned " + wantAssertionSigned);          }          if (!assertion.isSigned() || !assertion.isSignatureValid(verificationCerts)) {            debug.error(classMethod + "Assertion is not signed or signature " + "is not valid.");            String[] data={assertionIssuer,assertionID};            LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE_ASSERTION_FROM_PDP,data);            throw new SAML2Exception(SAML2SDKUtils.bundle.getString("invalidSignatureOnAssertion"));          }        }      }      if (wantAssertionEncrypted) {        response=createResponse(samlResponse,assertions);      }      if (debug.messageEnabled()) {        debug.message(classMethod + " Response : " + response.toXMLString(true,true));      }    } catch (    SAML2MetaException sme) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Error retreiving meta",sme);      }      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("metaDataError"));    }  }  return response;}  }
class C{  private void iterateDN2ID(ReadableTransaction txn) throws StorageRuntimeException {  final Deque<ChildrenCount> childrenCounters=new LinkedList<>();  ChildrenCount currentNode=null;  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(dn2id.getName())){    while (cursor.next()) {      keyCount++;      final ByteString key=cursor.getKey();      final EntryID entryID;      try {        entryID=new EntryID(cursor.getValue());      } catch (      Exception e) {        errorCount++;        logger.trace("File dn2id has malformed ID for DN <%s>",key,e);        continue;      }      currentNode=verifyID2ChildrenCount(txn,childrenCounters,key,entryID);      final Entry entry;      try {        entry=id2entry.get(txn,entryID);      } catch (      Exception e) {        errorCount++;        logger.traceException(e);        continue;      }      if (entry == null) {        errorCount++;        logger.error(ERR_VERIFY_DN2ID_UNKNOWN_ID,key,entryID.longValue());      } else       if (!key.equals(dnToDNKey(entry.getName(),verifyConfig.getBaseDN().size()))) {        errorCount++;        logger.error(ERR_VERIFY_DN2ID_WRONG_ENTRY,key,entry.getName());      }    }    while ((currentNode=childrenCounters.pollLast()) != null) {      verifyID2ChildrenCount(txn,currentNode);    }  } }  }
class C{  public static <R,A,B,C>Future<R> chain(A input,Function<A,Future<B>> operation1,Function<B,Future<C>> operation2,Function<C,Future<R>> operation3){  Future<R> future=Future.future();  operation1.apply(input).setHandler(null);  return future;}  }
class C{  private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (returnText && text != null) {    result=new StringBuilder();    result.append(text);  }  search:   while (true) {    if (position + delimiter.length > limit) {      if (start < position && returnText) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(delimiter.length)) {        checkRelaxed(UNEXPECTED_EOF);        type=COMMENT;        return null;      }      start=position;    }    for (int i=0; i < delimiter.length; i++) {      if (buffer[position + i] != delimiter[i]) {        position++;        continue search;      }    }    break;  }  int end=position;  position+=delimiter.length;  if (!returnText) {    return null;  } else   if (result == null) {    return stringPool.get(buffer,start,end - start);  } else {    result.append(buffer,start,end - start);    return result.toString();  }}  }
class C{  void recomposeVariables(ElemVariable elemVar){  if (getVariableOrParamComposed(elemVar.getName()) == null) {    elemVar.setIsTopLevel(true);    elemVar.setIndex(m_variables.size());    m_variables.addElement(elemVar);  }}  }
class C{  final Node<K,V> findFirst(){  for (Node<K,V> b, n; ; ) {    if ((n=(b=head.node).next) == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public void handleTblDataSiteActionHrefRequest(RequestInvocationEvent event) throws ModelControlException {  String siteName=hexToString((String)getDisplayFieldValue(TBL_DATA_SITE_ACTION_HREF));  setPageSessionAttribute(SiteEditViewBean.PG_ATTR_SITE_NAME,siteName);  SiteEditViewBean vb=(SiteEditViewBean)getViewBean(SiteEditViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodetype.class,args);}  }
class C{  private void createLayout(GuiApplication app){  Set<? extends WizardStep> steps=app.getWizardSteps();  if (steps != null) {    for (    WizardStep step : steps) {      QuickSetupStepPanel panel=app.createWizardStepPanel(step);      if (panel != null) {        panel.setQuickSetup(getQuickSetup());        panel.initialize();        hmPanels.put(step,panel);      }    }  }  int minWidth=0;  int minHeight=0;  setLayout(new CardLayout());  for (  WizardStep s : hmPanels.keySet()) {    minWidth=Math.max(minWidth,getPanel(s).getMinimumWidth());    minHeight=Math.max(minHeight,getPanel(s).getMinimumHeight());    add(getPanel(s),s.toString());  }  JPanel loadingPanel=UIFactory.makeJPanel();  loadingPanel.setLayout(new GridBagLayout());  loadingPanel.add(UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_GENERAL_LOADING.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID),new GridBagConstraints());  add(loadingPanel,LOADING_PANEL);  minHeight+=getApplication().getExtraDialogHeight();  setPreferredSize(new Dimension(minWidth,minHeight));  setMinimumSize(new Dimension(minWidth,minHeight));}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthToolBarUI();}  }
class C{  public boolean hasSubOrdinates(){  return hasSubOrdinates;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public NumberFormatter(){  this(NumberFormat.getNumberInstance());}  }
class C{  public SaltedSHA256PasswordStorageSchemeTestCase(){  super("cn=Salted SHA-256,cn=Password Storage Schemes,cn=config");}  }
class C{  public void assertion(boolean b,java.lang.String msg){  if (!b) {    java.lang.String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public CompareOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,DN entryDN,AttributeDescription attributeDescription,ByteString assertionValue){  super(clientConnection,operationID,messageID,requestControls);  this.entryDN=entryDN;  this.attributeDescription=attributeDescription;  this.assertionValue=assertionValue;  responseControls=new ArrayList<>();  rawEntryDN=ByteString.valueOfUtf8(entryDN.toString());  rawAttributeType=attributeDescription.toString();  cancelRequest=null;  proxiedAuthorizationDN=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrsetvaluenomodificationallowederrEE.class,args);}  }
class C{  private TextHitInfo caretToHit(int caret){  if (caret == 0 || caret == characterCount) {    if ((caret == characterCount) == textLine.isDirectionLTR()) {      return TextHitInfo.leading(characterCount);    } else {      return TextHitInfo.trailing(-1);    }  } else {    int charIndex=textLine.visualToLogical(caret);    boolean leading=textLine.isCharLTR(charIndex);    return leading ? TextHitInfo.leading(charIndex) : TextHitInfo.trailing(charIndex);  }}  }
class C{  public static AnonymousSASLBindRequest unmodifiableAnonymousSASLBindRequest(final AnonymousSASLBindRequest request){  if (request instanceof UnmodifiableAnonymousSASLBindRequestImpl) {    return request;  }  return new UnmodifiableAnonymousSASLBindRequestImpl(request);}  }
class C{  public Mp4TagTextField(String id,String content){  super(id);  this.content=content;}  }
class C{  public ZoneRulesException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException ignored) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  Bundle bundle=new Bundle();  if (name != null && !name.isEmpty()) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        int phoneTypeColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && !number.isEmpty()) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          int type=phonesCursor.getInt(phoneTypeColumn);          bundle.putInt(Contents.PHONE_TYPE_KEYS[foundPhone],type);          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && !data.isEmpty()) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && !email.isEmpty()) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  public long readCompactUnsignedLong(){  try {    return PackedLong.readCompactUnsignedLong(asInputStream());  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public WindowEvent(Window source,int id,int oldState,int newState){  this(source,id,null,oldState,newState);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS02.class,args);}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  in[inOff]=(byte)0x80;  inOff++;  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public XUnresolvedVariable(ElemVariable obj,int sourceNode,TransformerImpl transformer,int varStackPos,int varStackContext,boolean isGlobal){  super(obj);  m_context=sourceNode;  m_transformer=transformer;  m_varStackPos=varStackPos;  m_varStackContext=varStackContext;  m_isGlobal=isGlobal;}  }
class C{  public JsonValue createRegistration(String accessToken,String deploymentUrl,OAuth2Request request) throws InvalidRedirectUri, InvalidClientMetadata, ServerException, UnsupportedResponseTypeException, AccessDeniedException, NotFoundException, InvalidPostLogoutRedirectUri {  final OAuth2ProviderSettings providerSettings=providerSettingsFactory.get(request);  if (!providerSettings.isOpenDynamicClientRegistrationAllowed()) {    if (!tokenVerifier.verify(request).isValid()) {      throw new AccessDeniedException("Access Token not valid");    }  }  final JsonValue input=request.getBody();  Set<String> inputKeys=input.keys();  for (  String key : inputKeys) {    OAuth2Constants.ShortClientAttributeNames keyName=fromString(key);    if (keyName == null) {      logger.warn("Unknown input given. Key: " + key);    }  }  ClientBuilder clientBuilder=new ClientBuilder();  try {    boolean jwks=false;    if (input.get(JWKS.getType()).asString() != null) {      jwks=true;      try {        JsonValueBuilder.toJsonValue(input.get(JWKS.getType()).asString());      } catch (      JsonException e) {        throw new InvalidClientMetadata("jwks must be valid JSON.");      }      clientBuilder.setJwks(input.get(JWKS.getType()).asString());      clientBuilder.setPublicKeySelector(Client.PublicKeySelector.JWKS.getType());    }    if (input.get(JWKS_URI.getType()).asString() != null) {      if (jwks) {        throw new InvalidClientMetadata("Must define either jwks or jwks_uri, not both.");      }      jwks=true;      try {        new URL(input.get(JWKS_URI.getType()).asString());      } catch (      MalformedURLException e) {        throw new InvalidClientMetadata("jwks_uri must be a valid URL.");      }      clientBuilder.setJwksUri(input.get(JWKS_URI.getType()).asString());      clientBuilder.setPublicKeySelector(Client.PublicKeySelector.JWKS_URI.getType());    }    if (input.get(X509.getType()).asString() != null) {      clientBuilder.setX509(input.get(X509.getType()).asString());    }    if (!jwks) {      clientBuilder.setPublicKeySelector(Client.PublicKeySelector.X509.getType());    }    if (input.get(TOKEN_ENDPOINT_AUTH_METHOD.getType()).asString() != null) {      if (Client.TokenEndpointAuthMethod.fromString(input.get(TOKEN_ENDPOINT_AUTH_METHOD.getType()).asString()) == null) {        logger.error("Invalid token_endpoint_auth_method requested.");        throw new InvalidClientMetadata("Invalid token_endpoint_auth_method requested.");      }      clientBuilder.setTokenEndpointAuthMethod(input.get(TOKEN_ENDPOINT_AUTH_METHOD.getType()).asString());    } else {      clientBuilder.setTokenEndpointAuthMethod(Client.TokenEndpointAuthMethod.CLIENT_SECRET_BASIC.getType());    }    if (input.get(CLIENT_ID.getType()).asString() != null) {      clientBuilder.setClientID(input.get(CLIENT_ID.getType()).asString());    } else {      clientBuilder.setClientID(UUID.randomUUID().toString());    }    if (input.get(CLIENT_SECRET.getType()).asString() != null) {      clientBuilder.setClientSecret(input.get(CLIENT_SECRET.getType()).asString());    } else {      clientBuilder.setClientSecret(UUID.randomUUID().toString());    }    if (input.get(CLIENT_TYPE.getType()).asString() != null) {      if (Client.ClientType.fromString(input.get(CLIENT_TYPE.getType()).asString()) != null) {        clientBuilder.setClientType(input.get(CLIENT_TYPE.getType()).asString());      } else {        logger.error("Invalid client_type requested.");        throw new InvalidClientMetadata("Invalid client_type requested");      }    } else {      clientBuilder.setClientType(Client.ClientType.CONFIDENTIAL.getType());    }    if (input.get(DEFAULT_MAX_AGE.getType()).asLong() != null) {      clientBuilder.setDefaultMaxAge(input.get(DEFAULT_MAX_AGE.getType()).asLong());      clientBuilder.setDefaultMaxAgeEnabled(true);    } else {      clientBuilder.setDefaultMaxAge(Client.MIN_DEFAULT_MAX_AGE);      clientBuilder.setDefaultMaxAgeEnabled(false);    }    List<String> redirectUris=new ArrayList<String>();    if (input.get(REDIRECT_URIS.getType()).asList() != null) {      redirectUris=input.get(REDIRECT_URIS.getType()).asList(String.class);      boolean isValidUris=true;      for (      String redirectUri : redirectUris) {        try {          urlValidator.validate(redirectUri);        } catch (        ValidationException e) {          isValidUris=false;          logger.error("The redirectUri: " + redirectUri + " is invalid.");        }      }      if (!isValidUris) {        throw new InvalidRedirectUri();      }      clientBuilder.setRedirectionURIs(redirectUris);    }    if (input.get(SECTOR_IDENTIFIER_URI.getType()).asString() != null) {      try {        URL sectorIdentifier=new URL(input.get(SECTOR_IDENTIFIER_URI.getType()).asString());        List<String> response=mapper.readValue(sectorIdentifier,List.class);        if (!response.containsAll(redirectUris)) {          logger.error("Request_uris not included in sector_identifier_uri.");          throw new InvalidClientMetadata();        }      } catch (      Exception e) {        logger.error("Invalid sector_identifier_uri requested.");        throw new InvalidClientMetadata("Invalid sector_identifier_uri requested.");      }      clientBuilder.setSectorIdentifierUri(input.get(SECTOR_IDENTIFIER_URI.getType()).asString());    }    List<String> scopes=input.get(SCOPES.getType()).asList(String.class);    if (scopes != null && !scopes.isEmpty()) {      if (!containsAllCaseInsensitive(providerSettings.getSupportedScopes(),scopes)) {        logger.error("Invalid scopes requested.");        throw new InvalidClientMetadata("Invalid scopes requested");      }    } else {      scopes=new ArrayList<String>();      scopes.addAll(providerSettings.getDefaultScopes());    }    if (!scopes.contains(OPENID)) {      scopes=new ArrayList<String>(scopes);      scopes.add(OPENID);    }    clientBuilder.setAllowedGrantScopes(scopes);    List<String> defaultScopes=input.get(DEFAULT_SCOPES.getType()).asList(String.class);    if (defaultScopes != null) {      if (containsAllCaseInsensitive(providerSettings.getSupportedScopes(),defaultScopes)) {        clientBuilder.setDefaultGrantScopes(defaultScopes);      } else {        throw new InvalidClientMetadata("Invalid default scopes requested.");      }    }    List<String> clientNames=new ArrayList<String>();    Set<String> keys=input.keys();    for (    String key : keys) {      if (key.equals(CLIENT_NAME.getType())) {        clientNames.add(input.get(key).asString());      } else       if (key.startsWith(CLIENT_NAME.getType())) {        try {          Locale locale=new Locale(key.substring(CLIENT_NAME.getType().length() + 1));          clientNames.add(locale.toString() + "|" + input.get(key).asString());        } catch (        Exception e) {          logger.error("Invalid locale for client_name.");          throw new InvalidClientMetadata("Invalid locale for client_name.");        }      }    }    if (clientNames != null) {      clientBuilder.setClientName(clientNames);    }    if (input.get(CLIENT_DESCRIPTION.getType()).asList() != null) {      clientBuilder.setDisplayDescription(input.get(CLIENT_DESCRIPTION.getType()).asList(String.class));    }    if (input.get(SUBJECT_TYPE.getType()).asString() != null) {      if (providerSettings.getSupportedSubjectTypes().contains(input.get(SUBJECT_TYPE.getType()).asString())) {        clientBuilder.setSubjectType(input.get(SUBJECT_TYPE.getType()).asString());      } else {        logger.error("Invalid subject_type requested.");        throw new InvalidClientMetadata("Invalid subject_type requested");      }    } else {      clientBuilder.setSubjectType(Client.SubjectType.PUBLIC.getType());    }    if (input.get(ID_TOKEN_SIGNED_RESPONSE_ALG.getType()).asString() != null) {      if (containsCaseInsensitive(providerSettings.getSupportedIDTokenSigningAlgorithms(),input.get(ID_TOKEN_SIGNED_RESPONSE_ALG.getType()).asString())) {        clientBuilder.setIdTokenSignedResponseAlgorithm(input.get(ID_TOKEN_SIGNED_RESPONSE_ALG.getType()).asString());      } else {        logger.error("Unsupported id_token_response_signed_alg requested.");        throw new InvalidClientMetadata("Unsupported id_token_response_signed_alg requested.");      }    } else {      clientBuilder.setIdTokenSignedResponseAlgorithm(ID_TOKEN_SIGNED_RESPONSE_ALG_DEFAULT);    }    if (input.get(POST_LOGOUT_REDIRECT_URIS.getType()).asList() != null) {      List<String> logoutRedirectUris=input.get(POST_LOGOUT_REDIRECT_URIS.getType()).asList(String.class);      boolean isValidUris=true;      for (      String logoutRedirectUri : logoutRedirectUris) {        try {          urlValidator.validate(logoutRedirectUri);        } catch (        ValidationException e) {          isValidUris=false;          logger.error("The post_logout_redirect_uris: {} is invalid.",logoutRedirectUri);        }      }      if (!isValidUris) {        throw new InvalidPostLogoutRedirectUri();      }      clientBuilder.setPostLogoutRedirectionURIs(logoutRedirectUris);    }    if (input.get(REGISTRATION_ACCESS_TOKEN.getType()).asString() != null) {      clientBuilder.setAccessToken(input.get(REGISTRATION_ACCESS_TOKEN.getType()).asString());    } else {      clientBuilder.setAccessToken(accessToken);    }    if (input.get(CLIENT_SESSION_URI.getType()).asString() != null) {      clientBuilder.setClientSessionURI(input.get(CLIENT_SESSION_URI.getType()).asString());    }    if (input.get(APPLICATION_TYPE.getType()).asString() != null) {      if (Client.ApplicationType.fromString(input.get(APPLICATION_TYPE.getType()).asString()) != null) {        clientBuilder.setApplicationType(Client.ApplicationType.WEB.getType());      } else {        logger.error("Invalid application_type requested.");        throw new InvalidClientMetadata("Invalid application_type requested.");      }    } else {      clientBuilder.setApplicationType(DEFAULT_APPLICATION_TYPE);    }    if (input.get(DISPLAY_NAME.getType()).asList() != null) {      clientBuilder.setDisplayName(input.get(DISPLAY_NAME.getType()).asList(String.class));    }    if (input.get(RESPONSE_TYPES.getType()).asList() != null) {      final List<String> clientResponseTypeList=input.get(RESPONSE_TYPES.getType()).asList(String.class);      final List<String> typeList=new ArrayList<String>();      for (      String responseType : clientResponseTypeList) {        typeList.addAll(Arrays.asList(responseType.split(" ")));      }      if (containsAllCaseInsensitive(providerSettings.getAllowedResponseTypes().keySet(),typeList)) {        clientBuilder.setResponseTypes(clientResponseTypeList);      } else {        logger.error("Invalid response_types requested.");        throw new InvalidClientMetadata("Invalid response_types requested.");      }    } else {      List<String> defaultResponseTypes=new ArrayList<String>();      defaultResponseTypes.add("code");      clientBuilder.setResponseTypes(defaultResponseTypes);    }    if (input.get(AUTHORIZATION_CODE_LIFE_TIME.getType()).asLong() != null) {      clientBuilder.setAuthorizationCodeLifeTime(input.get(AUTHORIZATION_CODE_LIFE_TIME.getType()).asLong());    } else {      clientBuilder.setAuthorizationCodeLifeTime(0L);    }    if (input.get(ACCESS_TOKEN_LIFE_TIME.getType()).asLong() != null) {      clientBuilder.setAccessTokenLifeTime(input.get(ACCESS_TOKEN_LIFE_TIME.getType()).asLong());    } else {      clientBuilder.setAccessTokenLifeTime(0L);    }    if (input.get(REFRESH_TOKEN_LIFE_TIME.getType()).asLong() != null) {      clientBuilder.setRefreshTokenLifeTime(input.get(REFRESH_TOKEN_LIFE_TIME.getType()).asLong());    } else {      clientBuilder.setRefreshTokenLifeTime(0L);    }    if (input.get(JWT_TOKEN_LIFE_TIME.getType()).asLong() != null) {      clientBuilder.setJwtTokenLifeTime(input.get(JWT_TOKEN_LIFE_TIME.getType()).asLong());    } else {      clientBuilder.setJwtTokenLifeTime(0L);    }    if (input.get(CONTACTS.getType()).asList() != null) {      clientBuilder.setContacts(input.get(CONTACTS.getType()).asList(String.class));    }  } catch (  JsonValueException e) {    logger.error("Unable to build client.",e);    throw new InvalidClientMetadata();  }  Client client=clientBuilder.createClient();  if (providerSettings.isRegistrationAccessTokenGenerationEnabled() && !client.hasAccessToken()) {    client.setAccessToken(createRegistrationAccessToken(client,request));  }  clientDAO.create(client,request);  if (logger.isInfoEnabled()) {    logger.info("Registered OpenID Connect client: " + client.getClientID() + ", name="+ client.getClientName()+ ", type="+ client.getClientType());  }  Map<String,Object> response=client.asMap();  response=convertClientReadResponseFormat(response);  response.put(REGISTRATION_CLIENT_URI,deploymentUrl + "/oauth2/connect/register?client_id=" + client.getClientID());  response.put(EXPIRES_AT,0);  return new JsonValue(response);}  }
class C{  public boolean isSipURI(){  return true;}  }
class C{  boolean isEmpty(){  return size == 0;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionElement createAudienceRestrictionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionElementImpl();}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  @Override public boolean execute(CommandSender sender,String commandLabel,String[] args){  boolean success=false;  if (!owningPlugin.isEnabled()) {    return false;  }  if (!testPermission(sender)) {    return true;  }  try {    success=executor.onCommand(sender,this,commandLabel,args);  } catch (  Throwable ex) {    throw new CommandException("Unhandled exception executing command '" + commandLabel + "' in plugin "+ owningPlugin.getDescription().getFullName(),ex);  }  if (!success && usageMessage.length() > 0) {    for (    String line : usageMessage.replace("<command>",commandLabel).split("\n")) {      sender.sendMessage(line);    }  }  return success;}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  private ArrayIterable(final M[] a){  this.a=a;}  }
class C{  public Future<Long> inactiveCount(String type){  Future<Long> future=Future.future();  jobService.inactiveCount(type,future.completer());  return future;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AffineTransform)) {    return false;  }  AffineTransform a=(AffineTransform)obj;  return ((m00 == a.m00) && (m01 == a.m01) && (m02 == a.m02)&& (m10 == a.m10)&& (m11 == a.m11)&& (m12 == a.m12));}  }
class C{  public static DocumentBuilderProvider documentBuilderProvider(int maxSize){  return new PerThreadDocumentBuilderProvider(new SafeDocumentBuilderProvider(),maxSize);}  }
class C{  public void endDocument() throws SAXException {  super.endDocument();  m_exptype.addElement(NULL);  m_parent.addElement(NULL);  m_nextsib.addElement(NULL);  m_firstch.addElement(NULL);  m_extendedTypes=m_expandedNameTable.getExtendedTypes();  m_exptype_map=m_exptype.getMap();  m_nextsib_map=m_nextsib.getMap();  m_firstch_map=m_firstch.getMap();  m_parent_map=m_parent.getMap();}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  int scope;  String base;  String gfilter;  if (profileType == DYNAMIC_GROUP || profileType == ASSIGNABLE_DYNAMIC_GROUP) {    String[] array=dsServices.getGroupFilterAndScope(token,entryDN,profileType);    scope=Integer.parseInt(array[0]);    base=array[1];    gfilter=array[2];  } else {    scope=AMConstants.SCOPE_SUB;    base=getOrganizationDN();    gfilter="(iplanet-am-static-group-dn=" + entryDN + ")";  }  String filter="(&" + gfilter + getSearchFilter(AMObject.USER)+ avfilter+ ")";  if (debug.messageEnabled()) {    debug.message("AMGroupImpl.searchUsers: " + filter);  }  searchControl.setSearchScope(scope);  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,base,filter,sc,returnAttrs);}  }
class C{  public GetTimeLeftActionHandler(SessionResourceUtil sessionResourceUtil){  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode21.class,args);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public void removeSelectionPath(TreePath path){  if (path != null) {    TreePath[] rPath=new TreePath[1];    rPath[0]=path;    removeSelectionPaths(rPath);  }}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testIncludeNightlyProvider") private Object[][] testIncludeNightlyProvider(){  return new Object[][]{{1,new String[]{"INETORGPERSON","DISPLAYNAME"}},{2,new String[]{"inetOrgPerson","2.16.840.1.113730.3.1.241"}},{3,new String[]{"2.16.840.1.113730.3.2.2","displayName"}},{4,new String[]{"2.16.840.1.113730.3.2.2","2.16.840.1.113730.3.1.241"}},{5,new String[]{"inetOrgPerson","displayName","carLicense"}},{6,new String[]{"organizationalPerson","title","postalCode"}},{7,new String[]{"2.5.6.7","title","postalCode"}},{8,new String[]{"2.5.6.7","TITLE","2.5.4.17"}},{9,new String[]{"2.5.6.7","2.5.4.12","2.5.4.17"}},{10,new String[]{"*","roomNumber"}},{11,new String[]{"*","0.9.2342.19200300.100.1.6"}},{12,new String[]{"*","postOfficeBox","0.9.2342.19200300.100.1.6"}},{13,new String[]{"*","2.5.4.18","0.9.2342.19200300.100.1.6"}}};}  }
class C{  static public boolean isNaturalDocOrder(int analysis){  if (canCrissCross(analysis) || isSet(analysis,BIT_NAMESPACE) || walksFilteredList(analysis))   return false;  if (walksInDocOrder(analysis))   return true;  return false;}  }
class C{  public RefreshFailedException(){  super();}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XString(str().toUpperCase(locale));}  }
class C{  private void createKey(){  try {    KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");    keyStore.load(null);    KeyGenerator keyGenerator=KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,"AndroidKeyStore");    keyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setUserAuthenticationValidityDurationSeconds(AUTHENTICATION_DURATION_SECONDS).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    keyGenerator.generateKey();  } catch (  NoSuchAlgorithmException|NoSuchProviderException|InvalidAlgorithmParameterException|KeyStoreException|CertificateException|IOException e) {    throw new RuntimeException("Failed to create a symmetric key",e);  }}  }
class C{  TemplateEntry(final Template template,final DN parentDN){  this.template=template;  this.parentDN=parentDN;}  }
class C{  public String toString(){  return "Keymap[" + nm + "]"+ bindings;}  }
class C{  public OverlappingFileLockException(){}  }
class C{  public Value generateStringConcat(String str,SemanticScope scope,LineCol lineCol) throws SyntaxException {  char[] chars=str.toCharArray();  SClassDef STRING=(SClassDef)getTypeWithName("java.lang.String",lineCol);  List<Value> elemsToConcat=new ArrayList<>();  StringBuilder sb=new StringBuilder();  StringBuilder evalStr=new StringBuilder();  Stack<Object> evaluatingStack=new Stack<>();  boolean isEvaluating=false;  Object flag=new Object();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '$' && i < chars.length - 1 && chars[i + 1] == '{') {      evaluatingStack.push(flag);      ++i;    } else     if (c == '}') {      if (!evaluatingStack.isEmpty())       evaluatingStack.pop();    }    if (evaluatingStack.isEmpty()) {      if (isEvaluating) {        String expStr=evalStr.toString();        evalStr.delete(0,evalStr.length());        List<Statement> statements;        try {          ErrorManager subErr=new ErrorManager(true);          Scanner scanner=new ScannerSwitcher("eval",new StringReader(expStr),new Properties(),subErr);          Parser parser=new Parser(scanner.scan(),subErr);          statements=parser.parse();        } catch (        IOException e) {          throw new LtBug(e);        }        if (statements.size() != 1 || !(statements.get(0) instanceof Expression)) {          err.SyntaxException("the string can only concat an expression, but got " + statements,lineCol);          throw new LtBug("code won't reach here");        }        Expression exp=(Expression)statements.get(0);        elemsToConcat.add(parseValueFromExpression(exp,null,scope));      } else {        sb.append(c);      }      isEvaluating=false;    } else {      if (isEvaluating) {        if (c == '\n' || c == '\t' || c == '\r' || c == '\"' || c == '\'' || c == '\\') {          err.SyntaxException("invalid char " + c + " for expression in string "+ str,lineCol);          throw new LtBug("code won't reach here");        }        evalStr.append(c);      } else {        StringConstantValue s=new StringConstantValue(sb.toString());        s.setType(STRING);        elemsToConcat.add(s);        sb.delete(0,sb.length());      }      isEvaluating=true;    }  }  if (sb.length() != 0 || elemsToConcat.isEmpty()) {    StringConstantValue s=new StringConstantValue(sb.toString());    s.setType(STRING);    elemsToConcat.add(s);  }  return concatValuesToString(elemsToConcat,scope,lineCol);}  }
class C{  public StringSQLRenderer append(String s){  sb.append(s);  return this;}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  logger.finest("Reading from array from offset:" + offset);  String charSetName=getTextEncodingCharSet();  CharsetDecoder decoder=Charset.forName(charSetName).newDecoder();  decoder.reset();  ByteBuffer inBuffer;  byte[] truncArr=new byte[arr.length - offset];  System.arraycopy(arr,offset,truncArr,0,truncArr.length);  inBuffer=ByteBuffer.wrap(truncArr);  CharBuffer outBuffer=CharBuffer.allocate(arr.length - offset);  CoderResult coderResult=decoder.decode(inBuffer,outBuffer,true);  if (coderResult.isError()) {    logger.warning("Decoding error:" + coderResult.toString());  }  decoder.flush(outBuffer);  outBuffer.flip();  if (charSetName.equals(TextEncoding.CHARSET_UTF_16)) {    value=outBuffer.toString().replace("\ufeff","").replace("\ufffe","");  } else {    value=outBuffer.toString();  }  setSize(arr.length - offset);  logger.config("Read SizeTerminatedString:" + value + " size:"+ size);}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  private void upgradePrivileges(PrivilegeManager pm,String appName,String resourceTypeUUID) throws UpgradeException {  final SearchFilter searchFilter=new SearchFilter(Privilege.APPLICATION_SEARCH_ATTRIBUTE,appName);  try {    final List<Privilege> privileges=pm.search(Collections.singleton(searchFilter));    for (    Privilege privilege : privileges) {      if (StringUtils.isEmpty(privilege.getResourceTypeUuid())) {        upgradePrivilege(pm,privilege,resourceTypeUUID);      }    }  } catch (  EntitlementException ee) {    throw new UpgradeException("Failed to gather policies for application " + appName,ee);  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  private static Document loadPrefsDoc(InputStream in) throws SAXException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setIgnoringElementContentWhitespace(true);  dbf.setValidating(true);  dbf.setCoalescing(true);  dbf.setIgnoringComments(true);  try {    DocumentBuilder db=dbf.newDocumentBuilder();    db.setEntityResolver(new Resolver());    db.setErrorHandler(new EH());    return db.parse(new InputSource(in));  } catch (  ParserConfigurationException e) {    throw new AssertionError(e);  }}  }
class C{  public Mp4TrackField(int trackNo,int total){  super(Mp4FieldKey.TRACK.getFieldName(),String.valueOf(trackNo));  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  numbers.add((short)trackNo);  numbers.add((short)total);  numbers.add(new Short("0"));}  }
class C{  public void removeNodeFromParent(MutableTreeNode node){  MutableTreeNode parent=(MutableTreeNode)node.getParent();  if (parent == null)   throw new IllegalArgumentException("node does not have a parent.");  int[] childIndex=new int[1];  Object[] removedArray=new Object[1];  childIndex[0]=parent.getIndex(node);  parent.remove(childIndex[0]);  removedArray[0]=node;  nodesWereRemoved(parent,childIndex,removedArray);}  }
class C{  public boolean isLeftToRight(){  return bidiBase.isLeftToRight();}  }
class C{  private void adoptAndCheck(Node node) throws Exception {  String original=domToString(document);  Document newDocument=builder.newDocument();  boolean isAttribute=node.getNodeType() == Node.ATTRIBUTE_NODE;  Node parent=isAttribute ? ((Attr)node).getOwnerElement() : node.getParentNode();  Node nextSibling=node.getNextSibling();  assertSame(node,newDocument.adoptNode(node));  assertDetached(parent,node);  assertSame(menu,newDocument.adoptNode(menu));  newDocument.appendChild(menu);  if (isAttribute) {    ((Element)parent).setAttributeNodeNS((Attr)node);  } else   if (nextSibling != null) {    parent.insertBefore(node,nextSibling);  } else   if (parent != document) {    parent.appendChild(node);  }  assertEquals(original,domToString(newDocument));  document=newDocument;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  MAPClientManagerViewBean vb=(MAPClientManagerViewBean)getViewBean(MAPClientManagerViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeProfileElement createAttributeProfileElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeProfileElementImpl(value);}  }
class C{  public final void createView(WXVContainer parent,int index){  if (!isLazy()) {    createViewImpl(parent,index);  }}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget,OutputProperties format) throws TransformerException {  SerializationHandler xoh;  org.w3c.dom.Node outputNode=null;  if (outputTarget instanceof DOMResult) {    outputNode=((DOMResult)outputTarget).getNode();    org.w3c.dom.Node nextSibling=((DOMResult)outputTarget).getNextSibling();    org.w3c.dom.Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(org.w3c.dom.Node.DOCUMENT_NODE == type) ? (org.w3c.dom.Document)outputNode : outputNode.getOwnerDocument();    } else {      boolean isSecureProcessing=m_stylesheetRoot.isSecureProcessing();      doc=org.apache.xml.utils.DOMHelper.createDocument(isSecureProcessing);      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder handler=(org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(org.w3c.dom.DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     handler.setNextSibling(nextSibling);    String encoding=format.getProperty(OutputKeys.ENCODING);    xoh=new ToXMLSAXHandler(handler,(LexicalHandler)handler,encoding);  } else   if (outputTarget instanceof SAXResult) {    ContentHandler handler=((SAXResult)outputTarget).getHandler();    if (null == handler)     throw new IllegalArgumentException("handler can not be null for a SAXResult");    LexicalHandler lexHandler;    if (handler instanceof LexicalHandler)     lexHandler=(LexicalHandler)handler; else     lexHandler=null;    String encoding=format.getProperty(OutputKeys.ENCODING);    String method=format.getProperty(OutputKeys.METHOD);    ToXMLSAXHandler toXMLSAXHandler=new ToXMLSAXHandler(handler,lexHandler,encoding);    toXMLSAXHandler.setShouldOutputNSAttr(false);    xoh=toXMLSAXHandler;    String publicID=format.getProperty(OutputKeys.DOCTYPE_PUBLIC);    String systemID=format.getProperty(OutputKeys.DOCTYPE_SYSTEM);    if (systemID != null)     xoh.setDoctypeSystem(systemID);    if (publicID != null)     xoh.setDoctypePublic(publicID);    if (handler instanceof TransformerClient) {      XalanTransformState state=new XalanTransformState();      ((TransformerClient)handler).setTransformState(state);      ((ToSAXHandler)xoh).setTransformState(state);    }  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      SerializationHandler serializer=(SerializationHandler)SerializerFactory.getSerializer(format.getProperties());      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0)           fileURL=fileURL.substring(8); else           fileURL=fileURL.substring(7);        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0)           fileURL=fileURL.substring(6); else           fileURL=fileURL.substring(5);        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);        xoh=serializer;      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      xoh=serializer;    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  xoh.setTransformer(this);  SourceLocator srcLocator=getStylesheet();  xoh.setSourceLocator(srcLocator);  return xoh;}  }
class C{  public DeflaterInputStream(InputStream in){  this(in,new Deflater());  usesDefaultDeflater=true;}  }
class C{  public static String generateSourceID(String entityID){  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  Exception e) {    FSUtils.debug.error("FSUtils.generateSourceID: Exception:",e);    return null;  }  char chars[]=entityID.toCharArray();  byte bytes[]=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    bytes[i]=(byte)chars[i];  }  md.update(bytes);  return SAMLUtils.byteArrayToString(md.digest());}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addDITContentRule(new DITContentRule(this),true);}  }
class C{  @Override protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {  ClassLoader latestLoader;  if (classLoaders != null && classLoaders.length > 0) {    latestLoader=classLoaders[0];  } else {    latestLoader=null;  }  ClassLoader nonPublicLoader=null;  boolean hasNonPublicInterface=false;  Class<?>[] classObjs=new Class[interfaces.length];  for (int i=0; i < interfaces.length; i++) {    Class<?> cl=this.resolveClass(interfaces[i]);    if (latestLoader == null)     latestLoader=cl.getClassLoader();    if ((cl.getModifiers() & Modifier.PUBLIC) == 0) {      if (hasNonPublicInterface) {        if (nonPublicLoader != cl.getClassLoader()) {          throw new IllegalAccessError(sm.getString("replicationStream.conflict"));        }      } else {        nonPublicLoader=cl.getClassLoader();        hasNonPublicInterface=true;      }    }    classObjs[i]=cl;  }  try {    return Proxy.getProxyClass(hasNonPublicInterface ? nonPublicLoader : latestLoader,classObjs);  } catch (  IllegalArgumentException e) {    throw new ClassNotFoundException(null,e);  }}  }
class C{  public RequestedAuthnContext createRequestedAuthnContext() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTED_AUTHN_CONTEXT);  if (obj == null) {    return new RequestedAuthnContextImpl();  } else {    return (RequestedAuthnContext)obj;  }}  }
class C{  public static GenericBindRequest newGenericBindRequest(final String name,final byte authenticationType,final byte[] authenticationValue){  Reject.ifNull(name,authenticationValue);  return new GenericBindRequestImpl(name,authenticationType,authenticationValue);}  }
class C{  public WebappServiceLoader(Context context){  this.context=context;  this.servletContext=context.getServletContext();  String containerSciFilter=context.getContainerSciFilter();  if (containerSciFilter != null && containerSciFilter.length() > 0) {    containerSciFilterPattern=Pattern.compile(containerSciFilter);  } else {    containerSciFilterPattern=null;  }}  }
class C{  public boolean name_is_equal(String p_name){  if (p_name == null)   return false;  return p_name.equalsIgnoreCase(pkg_name);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionElement createActivationLimitSessionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionElementImpl();}  }
class C{  public boolean isUserExists(String userID) throws DataStoreProviderException {  if (userID == null) {    throw new DataStoreProviderException(bundle.getString("nullUserId"));  }  try {    SSOToken adminToken=AccessController.doPrivileged(AdminTokenAction.getInstance());    AMIdentity amId=IdUtils.getIdentity(adminToken,userID);    return amId.isActive();  } catch (  IdRepoException ide) {    debug.message("IdRepoDataStoreProvider.isUserExists()",ide);    return false;  }catch (  SSOException ssoe) {    debug.error("IdRepoDataStoreProvider.isUserExists() : SSOException",ssoe);    throw new DataStoreProviderException(ssoe);  }}  }
class C{  public void cloneServer(String origServer,String cloneServer) throws AMConsoleException {  String[] param={origServer,cloneServer};  logEvent("ATTEMPT_CLONE_SERVER",param);  try {    ServerConfiguration.cloneServerInstance(getUserSSOToken(),origServer,cloneServer);    logEvent("SUCCEED_CLONE_SERVER",param);  } catch (  ConfigurationException e) {    String[] params={origServer,cloneServer,e.getMessage()};    logEvent("CONFIGURATION_EXCEPTION_CLONE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={origServer,cloneServer,e.getMessage()};    logEvent("SMS_EXCEPTION_CLONE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={origServer,cloneServer,e.getMessage()};    logEvent("SSO_EXCEPTION_CLONE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public DefaultClientConnectionOperator(SchemeRegistry schemes){  if (schemes == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  schemeRegistry=schemes;}  }
class C{  public boolean passed(){  return !failed() && !skipped();}  }
class C{  public FacebookOperationCanceledException(String message){  super(message);}  }
class C{  public static String mangleNativeMethod(String owner,String name){  return mangleNativeMethod(owner,name,null);}  }
class C{  public void checkOverride(STypeDef sTypeDef) throws SyntaxException {  if (sTypeDef instanceof SClassDef) {    for (    SMethodDef m : ((SClassDef)sTypeDef).methods()) {      checkOverride_class(m,((SClassDef)sTypeDef).parent(),new HashSet<>());      for (      SInterfaceDef i : ((SClassDef)sTypeDef).superInterfaces()) {        checkOverride_interface(m,i,new HashSet<>());      }    }  } else   if (sTypeDef instanceof SInterfaceDef) {    for (    SMethodDef m : ((SInterfaceDef)sTypeDef).methods()) {      for (      SInterfaceDef i : ((SInterfaceDef)sTypeDef).superInterfaces()) {        checkOverride_interface(m,i,new HashSet<>());      }    }  } else {    throw new LtBug("wrong STypeDefType " + sTypeDef.getClass());  }}  }
class C{  public Base64PasswordStorageSchemeTestCase(){  super("cn=Base64,cn=Password Storage Schemes,cn=config");}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.EmptyTypeImpl();}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public Object clone(){  AuthenticatedSharedAgentsCondition theClone=null;  try {    theClone=(AuthenticatedSharedAgentsCondition)super.clone();    theClone.properties=Collections.unmodifiableMap(com.sun.identity.sm.SMSUtils.copyAttributes(properties));  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return theClone;}  }
class C{  public AgentDumpViewBean(){  super("AgentDump");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  @Override public void entryReadError(EntryReadErrorEvent ev){  searchResult=null;  errorSearchingPanel.setError(ev.getDN(),ev.getError());  delete.setVisible(false);  saveChanges.setVisible(false);  cardLayout.show(mainPanel,ERROR_SEARCHING);  displayedEntryPanel=null;}  }
class C{  private boolean isAcceptLicense(){  return acceptLicense.isPresent();}  }
class C{  public boolean currentTemplateRuleIsNull(){  return ((!m_currentTemplateRuleIsNull.isEmpty()) && (m_currentTemplateRuleIsNull.peek() == true));}  }
class C{  private void checkPermittedIP(Set permitted,byte[] ip) throws PKIXNameConstraintValidatorException {  if (permitted == null) {    return;  }  Iterator it=permitted.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      return;    }  }  if (ip.length == 0 && permitted.size() == 0) {    return;  }  throw new PKIXNameConstraintValidatorException("IP is not from a permitted subtree.");}  }
class C{  public static boolean isObject(String desc){  return desc.endsWith(";");}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  private void createOutputDirectory() throws MojoExecutionException {  String projectBuildDir=project.getBuild().getDirectory();  if (!outputDirectory.contains(projectBuildDir)) {    String errorMsg=String.format("The outputDirectory (%s) must be under the ${project.build.directory} (%s).",outputDirectory,projectBuildDir);    getLog().error(errorMsg);    throw new MojoExecutionException(errorMsg);  }  try {    createDirectory(outputDirectory);  } catch (  IOException e) {    getLog().error(e.getMessage());    throw new MojoExecutionException(e.getMessage(),e);  }}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public void mergeObjects(GenericObjectList mergeList){  if (mergeList == null)   return;  Iterator it1=this.listIterator();  Iterator it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  protected File executePartialPut(HttpServletRequest req,Range range,String path) throws IOException {  File tempDir=(File)getServletContext().getAttribute(ServletContext.TEMPDIR);  String convertedResourcePath=path.replace('/','.');  File contentFile=new File(tempDir,convertedResourcePath);  if (contentFile.createNewFile()) {    contentFile.deleteOnExit();  }  try (RandomAccessFile randAccessContentFile=new RandomAccessFile(contentFile,"rw")){    WebResource oldResource=resources.getResource(path);    if (oldResource.isFile()) {      try (BufferedInputStream bufOldRevStream=new BufferedInputStream(oldResource.getInputStream(),BUFFER_SIZE)){        int numBytesRead;        byte[] copyBuffer=new byte[BUFFER_SIZE];        while ((numBytesRead=bufOldRevStream.read(copyBuffer)) != -1) {          randAccessContentFile.write(copyBuffer,0,numBytesRead);        }      }     }    randAccessContentFile.setLength(range.length);    randAccessContentFile.seek(range.start);    int numBytesRead;    byte[] transferBuffer=new byte[BUFFER_SIZE];    try (BufferedInputStream requestBufInStream=new BufferedInputStream(req.getInputStream(),BUFFER_SIZE)){      while ((numBytesRead=requestBufInStream.read(transferBuffer)) != -1) {        randAccessContentFile.write(transferBuffer,0,numBytesRead);      }    }   }   return contentFile;}  }
class C{  void postCheck() throws JasperException {  for (  Entry<String,NameEntry> entry : nameFromTable.entrySet()) {    String key=entry.getKey();    NameEntry nameEntry=nameTable.get(key);    NameEntry nameFromEntry=entry.getValue();    Node nameFromNode=nameFromEntry.getNode();    if (nameEntry == null) {      err.jspError(nameFromNode,"jsp.error.tagfile.nameFrom.noAttribute",key);    } else {      Node node=nameEntry.getNode();      TagAttributeInfo tagAttr=nameEntry.getTagAttributeInfo();      if (!"java.lang.String".equals(tagAttr.getTypeName()) || !tagAttr.isRequired() || tagAttr.canBeRequestTime()) {        err.jspError(nameFromNode,"jsp.error.tagfile.nameFrom.badAttribute",key,Integer.toString(node.getStart().getLineNumber()));      }    }  }}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  private static void extractRectItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"Rect found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float x=0;    float y=0;    float width=Float.NaN;    float height=Float.NaN;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("x")) {        x=Float.parseFloat(value);      } else       if (name.equals("y")) {        y=Float.parseFloat(value);      } else       if (name.equals("width")) {        width=Float.parseFloat(value);      } else       if (name.equals("height")) {        height=Float.parseFloat(value);      } else       if (name.equals("style")) {      }    }    if (!pureTransparent && avg != null && !Float.isNaN(x) && !Float.isNaN(y) && !Float.isNaN(width) && !Float.isNaN(height)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(x,y);      builder.relativeHorizontalTo(width);      builder.relativeVerticalTo(height);      builder.relativeHorizontalTo(-width);      builder.relativeClose();      child.setPathData(builder.toString());    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusTypeImpl();}  }
class C{  public double distance_weighted(PlaPointFloat p_other,double p_horizontal_weight,double p_vertical_weight){  double delta_x=v_x - p_other.v_x;  double delta_y=v_y - p_other.v_y;  delta_x*=p_horizontal_weight;  delta_y*=p_vertical_weight;  double result=Math.sqrt(delta_x * delta_x + delta_y * delta_y);  return result;}  }
class C{  public static BooleanArgument noPropertiesFileArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildArgument();}  }
class C{  public void deleteField(String id){  super.doDeleteTagField(new FrameAndSubId(id,null));}  }
class C{  protected View createChild(String name){  View child=null;  if (name.equals(BUTTON_OK)) {    child=new Button(this,BUTTON_OK,"");  } else   if (name.equals(BUTTON_PREVIOUS)) {    child=new Button(this,BUTTON_PREVIOUS,"");  } else   if (name.equals(PW_QUESTION_TITLE)) {    child=new StaticTextField(this,PW_QUESTION_TITLE,"");  } else   if (name.equals(PASSWORD_RESET_TILEDVIEW)) {    child=new PWResetQuestionTiledView(this,PASSWORD_RESET_TILEDVIEW);  } else {    child=super.createChild(name);  }  return child;}  }
class C{  public void _servant_postinvoke(ServantObject servant){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public boolean isMultiSelectionEnabled(){  return multiSelectionEnabled;}  }
class C{  public void notifyPassword(AMIdentity user,String password,Locale locale) throws PWResetException {  ResourceBundle rb=null;  try {    Set<String> set=user.getAttribute(model.getMailAttribute(user.getRealm()));    Set<String> localeSet=user.getAttribute(Constants.USER_LOCALE_ATTR);    if (localeSet == null || localeSet.isEmpty()) {      userLocale=locale;    } else {      String localeStr=localeSet.iterator().next();      userLocale=com.sun.identity.shared.locale.Locale.getLocale(localeStr);    }    rb=PWResetResBundleCacher.getBundle(bundleName,userLocale);    if (set == null || set.isEmpty()) {      model.debugWarning("There is no email address for this user.");      throw new PWResetException(rb.getString("noEmail.message"));    } else {      String emailAddress=set.iterator().next();      sendEmailToUser(emailAddress,password);    }  } catch (  SSOException e) {    model.debugWarning("EmailPassword.notifyPassword",e);    throw new PWResetException(e);  }catch (  IdRepoException e) {    model.debugWarning("EmailPassword.notifyPassword",e);    throw new PWResetException(e);  }catch (  SendFailedException e) {    model.debugWarning("EmailPassword.notifyPassword",e);    throw new PWResetException(rb.getString("sendEmailFailed.message"));  }catch (  MessagingException e) {    model.debugWarning("EmailPassword.notifyPassword",e);    throw new PWResetException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodetype.class,args);}  }
class C{  public Builder removeOptionalAttribute(String attributeNameOrOID){  this.optionalAttributes.remove(attributeNameOrOID);  return this;}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=(InputStream)new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  public <T extends Named>List<T> order(List<T> namedList,String type){  if (includes == null) {    return namedList;  }  List<T> ret=new ArrayList<>();  Map<String,T> lookup=new HashMap<>();  for (  T named : namedList) {    lookup.put(named.getName(),named);  }  for (  String inc : includes) {    T named=lookup.get(inc);    if (named == null) {      throw new IllegalArgumentException("No " + type + " with name '"+ inc+ "' found to include. "+ "Please check spelling and your project dependencies");    }    ret.add(named);  }  return ret;}  }
class C{  public Class<?>[] parameterArray(){  return ptypes.clone();}  }
class C{  public boolean isCsrfAttack(OAuth2Request request){  SSOToken ssoToken=resourceOwnerSessionValidator.getResourceOwnerSession(request);  String ssoTokenId=ssoToken.getTokenID().toString();  String csrfValue=request.getParameter("csrf");  return csrfValue == null || !MessageDigest.isEqual(ssoTokenId.getBytes(UTF_8_CHARSET),csrfValue.getBytes(UTF_8_CHARSET));}  }
class C{  public void initManager(){synchronized (userAgentMap) {    if (!isInitialized) {      isInitialized=true;      long st=currentTimeMillis();      if (intCapInstance != null) {        initMinimalInternalClientTypesData();      }      if (extCapInstance != null) {        initMinimalExternalClientTypesData();      }      mergeInternalWithExternal();      loadMaps();      long end=currentTimeMillis();      if (debug.messageEnabled()) {        debug.message(CLASS + "Load AllClients Time (ms) = " + (end - st));      }      if (intCapInstance != null) {        intCapInstance.addListener(this);      }      if (extCapInstance != null) {        extCapInstance.addListener(this);      }    }  }}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static SMSFlatFileTreeNode createTree(String xml,Debug debug) throws Exception {  SMSFlatFileTreeNode root=null;  Document doc=XMLUtils.toDOMDocument(xml,debug);  Node rootNode=XMLUtils.getRootNode(doc,XML_ROOT_ELEMENT);  if (rootNode != null) {    root=createNode(XMLUtils.getChildNode(rootNode,XML_NODE_ELEMENT));  }  return root;}  }
class C{  private boolean isConfigBackend(String id){  return "tasks".equalsIgnoreCase(id) || "schema".equalsIgnoreCase(id) || "config".equalsIgnoreCase(id)|| "monitor".equalsIgnoreCase(id)|| "backup".equalsIgnoreCase(id)|| ADSContext.getDefaultBackendName().equalsIgnoreCase(id)|| "ads-truststore".equalsIgnoreCase(id);}  }
class C{  public boolean _is_a(String repository_id){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public boolean isCompressed(){  return isCompressed;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @DataProvider(name="writeModifyDNDataProvider") public Object[][] createTestWriteModifyDNData() throws Exception {  return MODIFY_DN_ENTRY_DATA_LDIF;}  }
class C{  public void imageComplete(int status){  consumer.imageComplete(status);}  }
class C{  private void parseResourceOffering(ResourceOffering offering) throws DSTException {  encryptedResourceID=offering.getEncryptedResourceID();  if (encryptedResourceID != null) {    isEncryptedResourceID=true;  } else {    ResourceID resID=offering.getResourceID();    if (resID == null) {      DSTUtils.debug.error("DSTClient:parseResourceOffering: " + "No ResourceID");      throw new DSTException(DSTUtils.bundle.getString("noResourceID"));    }    resourceID=resID.getResourceID();  }  ServiceInstance serviceInstance=offering.getServiceInstance();  if (serviceInstance == null) {    DSTUtils.debug.error("DSTClient:parseResourceOffering: " + "No service instance.");    throw new DSTException(DSTUtils.bundle.getString("noServiceInstance"));  }  serviceType=serviceInstance.getServiceType();  if (serviceType == null) {    DSTUtils.debug.error("DSTClient:parseResourceOffering: " + "service type is null.");    throw new DSTException(DSTUtils.bundle.getString("noServiceType"));  }  List descriptions=serviceInstance.getDescription();  if (descriptions == null || descriptions.isEmpty()) {    DSTUtils.debug.error("DSTClient:parseResourceOffering: " + "descriptions are null.");    throw new DSTException(DSTUtils.bundle.getString("noDescriptions"));  }  Iterator iter=descriptions.iterator();  while (iter.hasNext()) {    Description description=(Description)iter.next();    soapAction=description.getSoapAction();    soapURI=description.getEndpoint();    if (soapURI == null || soapURI.length() == 0) {      continue;    }    List secMechIDs=description.getSecurityMechID();    if (secMechIDs == null || secMechIDs.isEmpty()) {      continue;    }    boolean foundProfile=false;    int size=secMechIDs.size();    for (int i=0; i < size; i++) {      String secProfile=(String)secMechIDs.get(i);      secProfile=secProfile.trim();      if (secProfile.equals(Message.NULL_NULL) || secProfile.equals(Message.TLS_NULL) || secProfile.equals(Message.CLIENT_TLS_NULL)) {        securityProfile=Message.ANONYMOUS;        if (secProfile.equals(Message.CLIENT_TLS_NULL)) {          clientAuthEnabled=true;        }        foundProfile=true;        break;      } else       if (secProfile.equals(Message.NULL_X509) || secProfile.equals(Message.TLS_X509) || secProfile.equals(Message.CLIENT_TLS_X509)|| secProfile.equals(Message.NULL_X509_WSF11)|| secProfile.equals(Message.TLS_X509_WSF11)|| secProfile.equals(Message.CLIENT_TLS_X509_WSF11)) {        securityProfile=Message.X509_TOKEN;        if (secProfile.equals(Message.NULL_X509) || secProfile.equals(Message.TLS_X509) || secProfile.equals(Message.CLIENT_TLS_X509)) {          wsfVersion=SOAPBindingConstants.WSF_10_VERSION;        } else {          wsfVersion=SOAPBindingConstants.WSF_11_VERSION;        }        securityProfile=Message.X509_TOKEN;        if (secProfile.equals(Message.CLIENT_TLS_X509) || secProfile.equals(Message.CLIENT_TLS_X509_WSF11)) {          clientAuthEnabled=true;        }        foundProfile=true;        break;      } else       if (secProfile.equals(Message.NULL_SAML) || secProfile.equals(Message.TLS_SAML) || secProfile.equals(Message.CLIENT_TLS_SAML)|| secProfile.equals(Message.NULL_SAML_WSF11)|| secProfile.equals(Message.TLS_SAML_WSF11)|| secProfile.equals(Message.CLIENT_TLS_SAML_WSF11)) {        securityProfile=Message.SAML_TOKEN;        if (secProfile.equals(Message.NULL_SAML) || secProfile.equals(Message.TLS_SAML) || secProfile.equals(Message.CLIENT_TLS_SAML)) {          wsfVersion=SOAPBindingConstants.WSF_10_VERSION;        } else {          wsfVersion=SOAPBindingConstants.WSF_11_VERSION;        }        if (secProfile.equals(Message.CLIENT_TLS_SAML) || secProfile.equals(Message.CLIENT_TLS_SAML_WSF11)) {          clientAuthEnabled=true;        }        foundProfile=true;        break;      } else       if (secProfile.equals(Message.NULL_BEARER) || secProfile.equals(Message.TLS_BEARER) || secProfile.equals(Message.CLIENT_TLS_BEARER)|| secProfile.equals(Message.NULL_BEARER_WSF11)|| secProfile.equals(Message.TLS_BEARER_WSF11)|| secProfile.equals(Message.CLIENT_TLS_BEARER_WSF11)) {        securityProfile=Message.BEARER_TOKEN;        if (secProfile.equals(Message.NULL_BEARER) || secProfile.equals(Message.TLS_BEARER) || secProfile.equals(Message.CLIENT_TLS_BEARER)) {          wsfVersion=SOAPBindingConstants.WSF_10_VERSION;        } else {          wsfVersion=SOAPBindingConstants.WSF_11_VERSION;        }        if (secProfile.equals(Message.CLIENT_TLS_BEARER) || secProfile.equals(Message.CLIENT_TLS_BEARER_WSF11)) {          clientAuthEnabled=true;        }        foundProfile=true;        break;      }    }    if (foundProfile) {      break;    }  }  if (soapURI == null) {    DSTUtils.debug.error("DSTClient:parseResourceOffering: " + "SOAP Endpoint or security profile is null");    throw new DSTException(DSTUtils.bundle.getString("invalidResourceOffering"));  }  if (DSTUtils.debug.messageEnabled()) {    DSTUtils.debug.message("DSTClient.parseResourceOffering:" + "soapURI = " + soapURI + "soapAction = "+ soapAction+ "securityProfile = "+ securityProfile);  }}  }
class C{  public AudioFormat(float sampleRate,int sampleSizeInBits,int channels,boolean signed,boolean bigEndian){  this((signed == true ? Encoding.PCM_SIGNED : Encoding.PCM_UNSIGNED),sampleRate,sampleSizeInBits,channels,(channels == AudioSystem.NOT_SPECIFIED || sampleSizeInBits == AudioSystem.NOT_SPECIFIED) ? AudioSystem.NOT_SPECIFIED : ((sampleSizeInBits + 7) / 8) * channels,sampleRate,bigEndian);}  }
class C{  public boolean useStartTLS(){  return startTLS;}  }
class C{  public PopupMenuEvent(Object source){  super(source);}  }
class C{  protected void startExpandHeightAnimation(ArrayList<Integer> viewHeights,int partAnimationDuration){  if (viewHeights == null || viewHeights.isEmpty())   throw new IllegalArgumentException("ViewHeights array must have at least 2 elements");  ArrayList<Animation> heightAnimations=new ArrayList<>();  int fromHeight=viewHeights.get(0);  for (int i=1; i < viewHeights.size(); i++) {    int toHeight=fromHeight + viewHeights.get(i);    heightAnimations.add(new HeightAnimation(this,fromHeight,toHeight,partAnimationDuration).withInterpolator(new DecelerateInterpolator()));    fromHeight=toHeight;  }  createAnimationChain(heightAnimations,this);  this.startAnimation(heightAnimations.get(0));}  }
class C{  OathDeviceSettings createDeviceProfile(int minSharedSecretLength){  Reject.ifFalse(minSharedSecretLength >= 0,"minSharedSecretLength must not be negative");  int sharedSecretByteLength=Math.max(MIN_SHARED_SECRET_BYTE_LENGTH,(int)Math.ceil(minSharedSecretLength / 2d));  byte[] secretBytes=new byte[sharedSecretByteLength];  secureRandom.nextBytes(secretBytes);  String sharedSecret=DatatypeConverter.printHexBinary(secretBytes);  return new OathDeviceSettings(sharedSecret,DEVICE_NAME,INITIAL_LAST_LOGIN_TIME,INITIAL_COUNTER_VALUE);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void add(E e){  throw new UnsupportedOperationException();}  }
class C{  public PatternTemplate(final String value){  this.value=value;}  }
class C{  public static boolean isValidMaskPattern(int maskPattern){  return maskPattern >= 0 && maskPattern < NUM_MASK_PATTERNS;}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedParentNode;    changedIndexs=e.getChildIndices();    changedParentNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedParentNode != null && changedIndexs != null && changedIndexs.length > 0) {      if (changedParentNode.hasBeenExpanded()) {        boolean makeVisible;        int counter;        Object changedParent;        TreeStateNode newNode;        int oldChildCount=changedParentNode.getChildCount();        changedParent=changedParentNode.getValue();        makeVisible=((changedParentNode == root && !rootVisible) || (changedParentNode.getRow() != -1 && changedParentNode.isExpanded()));        for (counter=0; counter < changedIndexs.length; counter++) {          newNode=this.createNodeAt(changedParentNode,changedIndexs[counter]);        }        if (oldChildCount == 0) {          changedParentNode.updatePreferredSize();        }        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (!isFixedRowHeight() && (makeVisible || (oldChildCount == 0 && changedParentNode.isVisible()))) {          if (changedParentNode == root)           this.updateYLocationsFrom(0); else           this.updateYLocationsFrom(changedParentNode.getRow());          this.visibleNodesChanged();        } else         if (makeVisible)         this.visibleNodesChanged();      } else       if (treeModel.getChildCount(changedParentNode.getValue()) - changedIndexs.length == 0) {        changedParentNode.updatePreferredSize();        if (!isFixedRowHeight() && changedParentNode.isVisible())         updateYLocationsFrom(changedParentNode.getRow());      }    }  }}  }
class C{  public void test_setCertificateEntryLjava_lang_StringLjava_security_cert_Certificate() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert=(X509Certificate)cf.generateCertificate(certArray);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.setCertificateEntry("alias",cert);    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,null);  PublicKey pub=cert.getPublicKey();  keyTest.setCertificateEntry("alias1",cert);  assertTrue("the entry specified by the alias alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  Certificate resultCert=keyTest.getCertificate("alias1");  assertEquals("the public key of the certificate from getCertificate() " + "did not equal the original certificate",pub,resultCert.getPublicKey());}  }
class C{  public static WindowStateListener remove(WindowStateListener l,WindowStateListener oldl){  return (WindowStateListener)removeInternal(l,oldl);}  }
class C{  public boolean beginStaticTextResultDisplay(ChildDisplayEvent event){  return true;}  }
class C{  public static List<SearchResultEntry> findChildren(ClassNode node){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  MappedClass parent=fromNode(node);  for (  MappedClass mc : VisualizerWindow.instance.getMappings().values()) {    if (mc.equals(parent)) {      continue;    }    if (ParentUtils.isChild(parent,mc)) {      results.add(new SearchResultEntry(mc.getNode()));    }  }  return results;}  }
class C{  public synchronized void sendReset(){  if (state == State.IDLE) {    throw new IllegalStateException(sm.getString("streamStateMachine.debug.change",stream.getConnectionId(),stream.getIdentifier(),state));  }  if (state.canReset()) {    stateChange(state,State.CLOSED_RST_TX);  }}  }
class C{  public String marshal(String s){  return s;}  }
class C{  private String[] tokenizeCacheKey(String cacheKey){  String[] tokens=new String[6];  StringTokenizer st=new StringTokenizer(cacheKey,CACHE_KEY_DELIMITER);  tokens[0]=st.nextToken();  tokens[1]=st.nextToken();  tokens[2]=st.nextToken();  tokens[3]=st.nextToken();  tokens[4]=st.nextToken();  tokens[5]=st.nextToken();  return tokens;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.LogoutRequestElement createLogoutRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.LogoutRequestElementImpl();}  }
class C{  public Clob readClob() throws SQLException {  return (Clob)getNextAttribute();}  }
class C{  private boolean validateEndIp(Set ipSet) throws PolicyException {  if (ipSet.size() != 1) {    String args[]={END_IP};    throw new PolicyException(ResBundleUtils.rbName,"multiple_values_not_allowed_for",args,null);  }  Iterator endIpIter=ipSet.iterator();  String endIpString=null;  try {    endIpString=(String)endIpIter.next();    endIP=IPv6Address.fromString(endIpString);  } catch (  ClassCastException ce) {    String args[]={END_IP};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,ce);  }catch (  IllegalArgumentException iae) {    String args[]={"ip",endIpString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  if (startIP.compareTo(endIP) > 0) {    throw new PolicyException(ResBundleUtils.rbName,"start_ip_can_not_be_greater_than_end_ip",null,null);  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationElement createIdentificationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationElementImpl();}  }
class C{  public static int countByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().countByUUID_G(uuid,groupId);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedChild=genderNode.appendChild(entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).deleteData(1,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static boolean isConfigured(ServletContext servletctx){  return isConfiguredFlag;}  }
class C{  public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls,Calendar calendar){  if (SignUtils.hasUnsupportedCriticalExtension(cert))   return "Has unsupported critical extension";  try {    cert.checkValidity(calendar.getTime());  } catch (  Exception e) {    return e.getMessage();  }  if (crls != null) {    for (    CRL crl : crls) {      if (crl.isRevoked(cert))       return "Certificate revoked";    }  }  return null;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  private RealConnection findHealthyConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled,boolean doExtensiveHealthChecks) throws IOException, RouteException {  while (true) {    RealConnection candidate=findConnection(connectTimeout,readTimeout,writeTimeout,connectionRetryEnabled);    if (connection.isHealthy(doExtensiveHealthChecks)) {      return candidate;    }    connectionFailed();  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  List propertyNames=rc.getOption(IArgument.PROPERTY_NAMES);  try {    String[] params={serverName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_SERVER_CONFIG",params);    if (serverName.equals(DEFAULT_SVR_CONFIG)) {      ServerConfiguration.removeServerConfiguration(adminSSOToken,ServerConfiguration.DEFAULT_SERVER_CONFIG,propertyNames);    } else {      if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {        ServerConfiguration.removeServerConfiguration(adminSSOToken,serverName,propertyNames);        outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-server-config-succeeded"),(Object[])params));      } else {        outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-server-config-does-not-exists"),(Object[])params));      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_SERVER_CONFIG",params);  } catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("RemoveServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("RemoveServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("RemoveServerConfig.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SERVER_CONFIG",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      ASN1ObjectIdentifier oOid=(ASN1ObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public static MemoryMappedFile mmapRO(String path) throws ErrnoException {  FileDescriptor fd=Libcore.os.open(path,O_RDONLY,0);  long size=Libcore.os.fstat(fd).st_size;  long address=Libcore.os.mmap(0L,size,PROT_READ,MAP_SHARED,fd,0);  Libcore.os.close(fd);  return new MemoryMappedFile(address,size);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (  Map.Entry<String,ArrayList<String>> e : paramHashValues.entrySet()) {    sb.append(e.getKey()).append('=');    ArrayList<String> values=e.getValue();    for (    String value : values) {      sb.append(value).append(',');    }    sb.append('\n');  }  return sb.toString();}  }
class C{  public FrameBodyTOLY(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public boolean isEqual(AttributeSet attr){  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  public SkipPageException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  private PolicyEvaluator(String serviceName,AppSSOTokenProvider appSSOTokenProvider) throws PolicyException, SSOException {  if (debug.messageEnabled()) {    debug.message("PolicyEvaluator():Creating PolicyEvaluator:" + "serviceName=" + serviceName + ":appSSOTokenProvider="+ appSSOTokenProvider);  }  if (serviceName == null) {    if (debug.warningEnabled()) {      debug.warning("PolicyEvaluator():" + "serviceName is null");    }    return;  }  init(serviceName,appSSOTokenProvider);}  }
class C{  @Override public boolean logout() throws LoginException {  subject.getPrincipals().remove(principal);  committed=false;  principal=null;  return true;}  }
class C{  public NSData(File file) throws IOException {  bytes=new byte[(int)file.length()];  RandomAccessFile raf=new RandomAccessFile(file,"r");  raf.read(bytes);  raf.close();}  }
class C{  private static long calcSliceFence(long skip,long limit){  long sliceFence=limit >= 0 ? skip + limit : Long.MAX_VALUE;  return (sliceFence >= 0) ? sliceFence : Long.MAX_VALUE;}  }
class C{  public BasicManagedEntity(HttpEntity entity,ManagedClientConnection conn,boolean reuse){  super(entity);  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  this.managedConn=conn;  this.attemptReuse=reuse;}  }
class C{  private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public final void append(char value){  char[] chunk;  if (m_firstFree < m_chunkSize)   chunk=m_array[m_lastChunk]; else {    int i=m_array.length;    if (m_lastChunk + 1 == i) {      char[][] newarray=new char[i + 16][];      System.arraycopy(m_array,0,newarray,0,i);      m_array=newarray;    }    chunk=m_array[++m_lastChunk];    if (chunk == null) {      if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {        m_innerFSB=new FastStringBuffer(this);      }      chunk=m_array[m_lastChunk]=new char[m_chunkSize];    }    m_firstFree=0;  }  chunk[m_firstFree++]=value;}  }
class C{  protected ImageView createImageViewFromBitmap(Bitmap bitmap){  ImageView imageView=new ImageView(getContext());  imageView.setImageBitmap(bitmap);  imageView.setLayoutParams(new LayoutParams(bitmap.getWidth(),bitmap.getHeight()));  return imageView;}  }
class C{  OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  if (result.proxySelector == null) {    result.proxySelector=ProxySelector.getDefault();  }  if (result.cookieHandler == null) {    result.cookieHandler=CookieHandler.getDefault();  }  if (result.socketFactory == null) {    result.socketFactory=SocketFactory.getDefault();  }  if (result.sslSocketFactory == null) {    result.sslSocketFactory=getDefaultSSLSocketFactory();  }  if (result.hostnameVerifier == null) {    result.hostnameVerifier=OkHostnameVerifier.INSTANCE;  }  if (result.certificatePinner == null) {    result.certificatePinner=CertificatePinner.DEFAULT;  }  if (result.authenticator == null) {    result.authenticator=AuthenticatorAdapter.INSTANCE;  }  if (result.connectionPool == null) {    result.connectionPool=ConnectionPool.getDefault();  }  if (result.protocols == null) {    result.protocols=DEFAULT_PROTOCOLS;  }  if (result.connectionSpecs == null) {    result.connectionSpecs=DEFAULT_CONNECTION_SPECS;  }  if (result.dns == null) {    result.dns=Dns.SYSTEM;  }  return result;}  }
class C{  private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  private void writeLogRef(final File file,final String template,final Map<String,Object> map) throws IOException, TemplateException {  configuration=getConfiguration();  try (Writer writer=new PrintWriter(file)){    configuration.getTemplate(template).process(map,writer);  } }  }
class C{  public static byte[] hexStringToByteArray(String hexString){  int read=hexString.length();  byte[] byteArray=new byte[read / 2];  for (int i=0, j=0; i < read; i++, j++) {    String part=hexString.substring(i,i + 2);    byteArray[j]=new Short(Integer.toString(Integer.parseInt(part,16))).byteValue();    i++;  }  return byteArray;}  }
class C{  public boolean isAutoIncrement(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].autoIncrement;}  }
class C{  public static void clear(){  stack.get().clear();}  }
class C{  public static boolean isLECPProfile(HttpServletRequest request){  java.util.Enumeration headerNames=request.getHeaderNames();  while (headerNames.hasMoreElements()) {    String hn=headerNames.nextElement().toString();    String hv=request.getHeader(hn);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("header " + hn + " val "+ hv);    }  }  String lecpHeaderValue=(String)request.getHeader(IFSConstants.LECP_HEADER_NAME);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message(" value of lecp in header " + lecpHeaderValue);  }  if (lecpHeaderValue == null) {    lecpHeaderValue=(String)request.getHeader((IFSConstants.LECP_HEADER_NAME).toLowerCase());  }  if (lecpHeaderValue != null) {    return true;  } else {    return false;  }}  }
class C{  @Inject public UmaPendingRequestTokenDataStore(JavaBeanAdapterFactory adapterFactory,TaskExecutor taskExecutor,TaskFactory taskFactory){  super((JavaBeanAdapter<UmaPendingRequest>)adapterFactory.create(UmaPendingRequest.class),taskExecutor,taskFactory);}  }
class C{  public static String decodePassword(String password){  String decodePwdSpi=SystemConfigurationUtil.getProperty(PASSWORD_DECODER,FM_PASSWORD_DECODER);  String decoPasswd;  try {    PasswordDecoder pwdDecoder=(PasswordDecoder)Class.forName(decodePwdSpi).newInstance();    decoPasswd=pwdDecoder.getDecodedPassword(password);  } catch (  Throwable t) {    decoPasswd=password;  }  return decoPasswd;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.GetCompleteElement createGetCompleteElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.GetCompleteElementImpl(value);}  }
class C{  public static FSAuthnResponse parseBASE64EncodedString(String encodedRes) throws FSMsgException, SAMLException {  FSUtils.debug.message("FSAuthnResponse.parseBASE64EncodedString: Called new");  if (encodedRes != null) {    String decodedAuthnRes=new String(Base64.decode(encodedRes));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.parseBASE64EncodedString: " + "Decoded AuthnResponse message: \n" + decodedAuthnRes);    }    return parseAuthnResponseXML(decodedAuthnRes);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.parseBASE64EncodedString: " + "null String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  ShortMessage msg=new ShortMessage(newData);  return msg;}  }
class C{  public void testNegNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-57,-101,-5,-5,-18,-38,-17,-2,-65,-2,-11,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public static void assertArrayName(String arrayName) throws XMPException {  if (arrayName == null || arrayName.length() == 0) {    throw new XMPException("Empty array name",XMPError.BADPARAM);  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  public boolean isResizable(){  return isMaximum ? false : resizable;}  }
class C{  public static int parseBoolArray(boolean[] dest,int value){  int checkedCount=0;  for (int i=0; i < dest.length; i++) {    int isChecked=(value >> i) & 1;    checkedCount+=isChecked;    dest[i]=isChecked == 1;  }  return checkedCount;}  }
class C{  public static SubentriesRequestControl newControl(final boolean isCritical,final boolean visibility){  if (isCritical) {    return visibility ? CRITICAL_VISIBLE_INSTANCE : CRITICAL_INVISIBLE_INSTANCE;  } else {    return visibility ? NONCRITICAL_VISIBLE_INSTANCE : NONCRITICAL_INVISIBLE_INSTANCE;  }}  }
class C{  public ConnectionWithControls findConnectionForDisplayedEntry(BasicNode node) throws LdapException {  return findConnectionForDisplayedEntry(node,isConfigurationNode(node));}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public OIDCIdTokenConfigBuilder customAuthenticationContextMapperClass(String customAuthenticationContextMapperClass){  this.customAuthenticationContextMapper=customAuthenticationContextMapperClass;  return this;}  }
class C{  public final boolean isProxy(){  return flags[PROXY_TICKET_FLAG];}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  private static synchronized void createReplayThreads(){  replayThreads.clear();  ReentrantLock switchQueueLock=new ReentrantLock();  for (int i=0; i < replayThreadNumber; i++) {    ReplayThread replayThread=new ReplayThread(updateToReplayQueue,switchQueueLock);    replayThread.start();    replayThreads.add(replayThread);  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public Set searchPeopleContainers(String wildcard,int level) throws AMException, SSOException {  return searchPeopleContainers(wildcard,null,level);}  }
class C{  public AuthnQuery createAuthnQuery() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_QUERY);  if (obj == null) {    return new AuthnQueryImpl();  } else {    return (AuthnQuery)obj;  }}  }
class C{  private String proxyToString(Object proxy){  Class<?>[] interfaces=proxy.getClass().getInterfaces();  if (interfaces.length == 0) {    return "Proxy[" + this + "]";  }  String iface=interfaces[0].getName();  if (iface.equals("java.rmi.Remote") && interfaces.length > 1) {    iface=interfaces[1].getName();  }  int dot=iface.lastIndexOf('.');  if (dot >= 0) {    iface=iface.substring(dot + 1);  }  return "Proxy[" + iface + ","+ this+ "]";}  }
class C{  private static QueryRequest makeSortedQueryRequest(String... keys){  QueryRequest request=makeEmptyQueryRequest();  List<SortKey> sortKeys=new ArrayList<>();  for (  String key : keys) {    if (key.startsWith("^")) {      sortKeys.add(SortKey.ascendingOrder(key.substring(1)));    } else {      sortKeys.add(SortKey.descendingOrder(key));    }  }  given(request.getSortKeys()).willReturn(sortKeys);  return request;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  private void processIPv4Subnet(final String subnet){  final String[] s=subnet.split("\\.",-1);  try {    if (s.length != IN4ADDRSZ) {      throw genericDecodeError();    }    for (int i=0; i < IN4ADDRSZ; i++) {      final String quad=s[i].trim();      if ("*".equals(quad)) {        wildCard.set(i);      } else {        final long val=Integer.parseInt(quad);        if (val < 0 || val > 0xff) {          throw genericDecodeError();        }        ruleMask[i]=(byte)(val & 0xff);      }    }  } catch (  final NumberFormatException nfex) {    throw genericDecodeError();  }}  }
class C{  private static void updateStrings(MethodNode mn,Map<String,MappedClass> mappings){}  }
class C{  public synchronized static void updateDbCredentials(String dbURL,String oldUser,String oldPassword,String newUser,String newPassword){  ODatabaseDocumentTx db=null;  try {    db=new ODatabaseDocumentTx(dbURL);    db.open(oldUser,oldPassword);    OSecurity security=db.getMetadata().getSecurity();    security.dropUser(oldUser);    security.createUser(newUser,newPassword,security.getRole(ORole.ADMIN));  } catch (  Exception e) {    logger.error("Error updating DB credentials",e);  } finally {    if (db != null) {      db.close();    }  }}  }
class C{  public PdfOutputIntent(String outputConditionIdentifier,String outputCondition,String registryName,String info,InputStream iccStream){  super(new PdfDictionary());  setOutputIntentSubtype(PdfName.GTS_PDFA1);  getPdfObject().put(PdfName.Type,PdfName.OutputIntent);  if (outputCondition != null)   setOutputCondition(outputCondition);  if (outputConditionIdentifier != null)   setOutputConditionIdentifier(outputConditionIdentifier);  if (registryName != null)   setRegistryName(registryName);  if (info != null)   setInfo(info);  if (iccStream != null) {    setDestOutputProfile(iccStream);  }}  }
class C{  private long stringToIp(String ip) throws PolicyException {  StringTokenizer st=new StringTokenizer(ip,".");  int tokenCount=st.countTokens();  if (tokenCount != 4) {    String args[]={"ip",ip};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  long ipValue=0L;  while (st.hasMoreElements()) {    String s=st.nextToken();    short ipElement=0;    try {      ipElement=Short.parseShort(s);    } catch (    Exception e) {      String args[]={"ip",ip};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    if (ipElement < 0 || ipElement > 255) {      String args[]={"ipElement",s};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    ipValue=ipValue * 256L + ipElement;  }  return ipValue;}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.ExtensionElementImpl();}  }
class C{  public boolean equals(Object o){  Iterator iter=null;  if (o instanceof Referrals) {    Referrals s=(Referrals)o;    iter=referrals.entrySet().iterator();    while (iter.hasNext()) {      Object ss=((Map.Entry)iter.next()).getValue();      if (!s.referrals.containsValue(ss)) {        return (false);      }    }    return (true);  }  return (false);}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){}  }
class C{  public void paintDesktopPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static SecurityOptions createPKCS11CertificateOptions(String keystorePwd,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  return createOptionsForCertificatType(CertificateType.PKCS11,null,keystorePwd,enableSSL,enableStartTLS,sslPort,aliasesToUse);}  }
class C{  private boolean userExists(String userID) throws IdRepoException, SSOException {  AMIdentityRepository amIdRepo=getAMIdentityRepository(getRequestOrg());  IdSearchControl idsc=new IdSearchControl();  idsc.setRecursive(true);  idsc.setTimeOut(0);  idsc.setAllReturnAttributes(true);  Set results=Collections.EMPTY_SET;  try {    idsc.setMaxResults(0);    IdSearchResults searchResults=amIdRepo.searchIdentities(IdType.USER,userID,idsc);    if (searchResults != null) {      results=searchResults.getSearchResults();    }  } catch (  IdRepoException e) {    if (debug.messageEnabled()) {      debug.message("IdRepoException : Error searching " + " Identities with username : " + e.getMessage());    }  }  return !results.isEmpty();}  }
class C{  DN findBaseDNForChildEntries(BasicNode node){  if (isFollowReferrals() && node.getRemoteUrl() != null) {    return DN.valueOf(node.getRemoteUrl().getRawBaseDN());  }  return node.getDN();}  }
class C{  public void cut(){  if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {    UIManager.getLookAndFeel().provideErrorFeedback(this);  } else {    super.cut();  }}  }
class C{  public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attrName,Set defaultValues) throws UpgradeException {  removeAttributeDefaultValues(serviceName,schemaType,attrName,defaultValues,false);}  }
class C{  private void initConnection() throws CoreTokenException {  if (connection == null || !factory.isValid(connection)) {    try {      connection=factory.create();      query.setConnection(connection);    } catch (    DataLayerException e) {      throw new CoreTokenException("Failed to init connection to data layer",e);    }  }}  }
class C{  public int corner_count(){  return plaline_len() - 1;}  }
class C{  public Reflector(int port,InetAddress address){  try {    packet=new DatagramPacket(buffer,buffer.length);    socket=new DatagramSocket(port,address);  } catch (  IOException ex) {    throw new RuntimeException("Creating datagram reflector failed",ex);  }}  }
class C{  public void focusGained(FocusEvent e){  comboBox.repaint();}  }
class C{  public boolean hasQValue(){  return super.hasParameter(ParameterNames.Q);}  }
class C{  protected void cdata(char ch[],int start,final int length) throws org.xml.sax.SAXException {  try {    final int old_start=start;    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    if (shouldIndent())     indent();    boolean writeCDataBrackets=(((length >= 1) && escapingNotNeeded(ch[start])));    if (writeCDataBrackets && !m_cdataTagOpen) {      m_writer.write(CDATA_DELIMITER_OPEN);      m_cdataTagOpen=true;    }    if (isEscapingDisabled()) {      charactersRaw(ch,start,length);    } else     writeNormalizedChars(ch,start,length,true,m_lineSepUse);    if (writeCDataBrackets) {      if (ch[start + length - 1] == ']')       closeCDATA();    }    if (m_tracer != null)     super.fireCDATAEvent(ch,old_start,length);  } catch (  IOException ioe) {    throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);  }}  }
class C{  public synchronized void enableAllObjectNames(){  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"enableAllObjectNames");  selectedNames=null;  deselectedNames=new Vector<ObjectName>();  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"enableAllObjectNames");  return;}  }
class C{  @Override public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  ByteBuffer outputBuf=ByteBuffer.wrap(output,outputOffset,output.length - outputOffset);  ByteBuffer inputBuf=ByteBuffer.wrap(input,inputOffset,inputLen);  return update(inputBuf,outputBuf);}  }
class C{  public void start() throws IOException {  thread.start();}  }
class C{  public Instant plusNanos(long nanosToAdd){  return plus(0,nanosToAdd);}  }
class C{  protected final boolean isBlocking(){  return response.getWriteListener() == null;}  }
class C{  protected ObjectStreamException(String classname){  super(classname);}  }
class C{  public SecurityCollection(){  this(null,null);}  }
class C{  void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine,boolean addOuterWhitespace) throws Exception {  ArrayList rawTokens=getRawTokens();  String outerIndentString="";  String indentIncrementString="";  if (addAfterNewLine) {    outerIndentString=getIndentStringForIndentLevel(getIndentLevel(lastTokenIndex));    indentIncrementString=getIndentIncrementString();  }  boolean outerIndent=true;  if (!addOuterWhitespace) {    outerIndent=false;  }  ArrayList newTokens=element.getCollapsedTokens(outerIndentString,indentIncrementString,indentValueToken(),outerIndent);  boolean added=false;  for (int i=0; i < rawTokens.size(); i++) {    Token nextToken=(Token)rawTokens.get(i);    if (nextToken.getTokenIndex() == lastTokenIndex) {      int lastIndexPosition=i;      while (nextToken instanceof WhiteSpaceToken) {        lastIndexPosition++;        nextToken=(Token)rawTokens.get(i);      }      int insertIndex=lastIndexPosition + 1;      if (addAfterNewLine) {        WhiteSpaceToken wstoken=new WhiteSpaceToken(NEW_LINE);        wstoken.setTokenIndex(getParser().getNextTokenIndex());        rawTokens.add(insertIndex++,wstoken);      }      for (int j=0; j < newTokens.size(); j++) {        Token newToken=(Token)newTokens.get(j);        rawTokens.add(insertIndex + j,newToken);      }      added=true;      break;    }  }  if (!added) {    throw new Exception("Parent element not found: index " + lastTokenIndex);  }  setRawTokens(rawTokens);}  }
class C{  private synchronized void write(String msg){  try {    if (statsFile == null) {      FileOutputStream fos=new FileOutputStream(outputDirectory + File.separator + statsName,true);      statsFile=new PrintWriter(new BufferedWriter(new OutputStreamWriter(fos,"UTF-8")),true);      statsFile.println("*********************************" + "*********************");    }    statsFile.println(msg);  } catch (  IOException e) {    System.err.println(msg);    statsState=Stats.OFF;  }}  }
class C{  public void unconfigureArrowButton(){  if (arrowButton != null) {    arrowButton.removeMouseListener(popup.getMouseListener());    arrowButton.removeMouseMotionListener(popup.getMouseMotionListener());  }}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  public void comment(String comment) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementName != null) {    emitFirstTag();  } else   if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_handler.comment(comment);}  }
class C{  public CannotReadVideoException(String message){  super(message);}  }
class C{  protected boolean booleanParameter(HttpServletRequest request,String parameter,boolean theDefault,boolean htmlMode){  String value=request.getParameter(parameter);  boolean booleanValue=theDefault;  if (value != null) {    if (htmlMode) {      if (value.equals("on")) {        booleanValue=true;      }    } else     if (theDefault) {      if (value.equals("false")) {        booleanValue=false;      }    } else     if (value.equals("true")) {      booleanValue=true;    }  } else   if (htmlMode)   booleanValue=false;  return booleanValue;}  }
class C{  private FieldPosition[] expandAffix(String pattern){  ArrayList<FieldPosition> positions=null;  int stringIndex=0;  for (int i=0; i < pattern.length(); ) {    char c=pattern.charAt(i++);    if (c == QUOTE) {      int field=-1;      Format.Field fieldID=null;      c=pattern.charAt(i++);switch (c) {case CURRENCY_SIGN:        String string;      if (i < pattern.length() && pattern.charAt(i) == CURRENCY_SIGN) {        ++i;        string=symbols.getInternationalCurrencySymbol();      } else {        string=symbols.getCurrencySymbol();      }    if (string.length() > 0) {      if (positions == null) {        positions=new ArrayList<>(2);      }      FieldPosition fp=new FieldPosition(Field.CURRENCY);      fp.setBeginIndex(stringIndex);      fp.setEndIndex(stringIndex + string.length());      positions.add(fp);      stringIndex+=string.length();    }  continue;case PATTERN_PERCENT:c=symbols.getPercent();field=-1;fieldID=Field.PERCENT;break;case PATTERN_PER_MILLE:c=symbols.getPerMill();field=-1;fieldID=Field.PERMILLE;break;case PATTERN_MINUS:c=symbols.getMinusSign();field=-1;fieldID=Field.SIGN;break;}if (fieldID != null) {if (positions == null) {positions=new ArrayList<>(2);}FieldPosition fp=new FieldPosition(fieldID,field);fp.setBeginIndex(stringIndex);fp.setEndIndex(stringIndex + 1);positions.add(fp);}}stringIndex++;}if (positions != null) {return positions.toArray(EmptyFieldPositionArray);}return EmptyFieldPositionArray;}  }
class C{  public boolean isEmpty(){  return components.isEmpty();}  }
class C{  public static <T>Set<T> unmodifiableSet(Set<? extends T> s){  return new UnmodifiableSet<>(s);}  }
class C{  @Override public void update(){  if (isDeathSeqRunning)   return; else   if (midStateChange) {    switchStates();    return;  }  if (!isIdle) {    isRightCollided=sideCollide(1);    isLeftCollided=sideCollide(3);    if (sMario.isSprinting()) {      maxVel=sprintVel;      maxFrame=3;    } else {      maxVel=runVel;      maxFrame=5;    }  }  if (sMario.isRight() && !isRightCollided) {    if (endSeqFinish && this.isInsideCastle()) {      spriteFrame.setImage(null);      spriteFrame=null;      aura.getSpriteFrame().setImage(null);      aura=null;      if (main.Main.auraLoop.isPlaying())       main.Main.auraLoop.stop();      sMario.getGameLoop().stop(false);      return;    }    isIdle=false;    if (xVel > frictionThreshold && super.getSpriteFrame().getScaleX() == -1) {      frictionApp=true;      super.getSpriteFrame().setImage(super.getPlayerStates().get(5));      frameLimiter=-6;    } else     frictionApp=false;    if (super.getSpriteFrame().getScaleX() != 1)     super.getSpriteFrame().setScaleX(1);    if (xPos < stageMoveTh || stageCoordinate <= -STAGEWIDTH) {      xPos+=xVel;    } else     if (stageCoordinate > -STAGEWIDTH) {      stageCoordinate-=xVel;      sMario.getStageContainer().setTranslateX(stageCoordinate);      if (sMario.getJumpTrail().getOpacity() > 0) {        sMario.getJumpEffect().setTranslateX(sMario.getJumpEffect().getTranslateX() - xVel);        sMario.getJumpTrail().setTranslateX(sMario.getJumpTrail().getTranslateX() - xVel);        for (int i=0; i < SpriteHandler.getPlayerPowerList().size(); i++) {          PlayerPower p=SpriteHandler.getPlayerPowerList().get(i);          if (p.getSpriteFrame() != null)           p.getSpriteFrame().setTranslateX(p.getSpriteFrame().getTranslateX() - xVel);        }      }    }    applyFriction();  } else   if (sMario.isLeft() && !isLeftCollided && xPos > 0) {    isIdle=false;    if (xVel > frictionThreshold && super.getSpriteFrame().getScaleX() == 1) {      frictionApp=true;      super.getSpriteFrame().setImage(super.getPlayerStates().get(5));      frameLimiter=-6;    } else     frictionApp=false;    if (super.getSpriteFrame().getScaleX() != -1)     super.getSpriteFrame().setScaleX(-1);    xPos-=xVel;    applyFriction();  } else   if (xPos < 0)   xPos+=outBoundThrowback; else   if (!isIdle && !isJumpCycleRunning)   if (isRightCollided)   xPos-=sideCollidePush; else   if (isLeftCollided)   xPos+=sideCollidePush;  if (sMario.isShootingFireball() && SpriteHandler.getPlayerPowerList().size() < 2 && MARIO_STATE > 1) {    main.Main.fireballRelease.play(0.4);    SpriteHandler.getPlayerPowerList().add(sMario.genFireball(xPos,yPos,(int)spriteFrame.getScaleX()));    isFireballShot=true;    isIdle=false;  } else   isFireballShot=false;  if (!isIdle || sMario.isJumping()) {    if ((sMario.isLeft() && sMario.isRight()))     xVel=0; else     if ((!sMario.isLeft() && !sMario.isRight() && !sMario.isUp()&& !sMario.isDown())) {      if (isFireballShot) {        super.getSpriteFrame().setImage(super.getPlayerStates().get(3));        frameLimiter=-12;      } else       if (!isJumpCycleRunning && frameLimiter > -1)       super.getSpriteFrame().setImage(super.getPlayerStates().get(0));      if (xVel > yDec) {        if (xVel > frictionThreshold)         super.getSpriteFrame().setImage(super.getPlayerStates().get(5));        xVel-=playerStopDecel;        if (super.getSpriteFrame().getScaleX() == 1 && !isRightCollided)         xPos+=xVel; else         if (!isLeftCollided)         xPos-=xVel;        isIdle=false;      } else       if (yVel == jumpVel)       isIdle=true;      if (frameLimiter < 0) {        isIdle=false;        frameLimiter++;      }    } else     if (frameLimiter++ == maxFrame && !frictionApp && !sMario.isUp() && !sMario.isDown()) {      if (isJumpCycleRunning)       super.getSpriteFrame().setImage(super.getPlayerStates().get(4)); else       if (switchFoot == 0) {        super.getSpriteFrame().setImage(super.getPlayerStates().get(3));        switchFoot++;      } else       if (switchFoot == 1) {        super.getSpriteFrame().setImage(super.getPlayerStates().get(2));        switchFoot++;      } else       if (switchFoot == 2) {        super.getSpriteFrame().setImage(super.getPlayerStates().get(1));        switchFoot=0;      }      frameLimiter=0;    }    if (frameLimiter > maxFrame)     frameLimiter=0;    if (!bottomCollide(isJumpCycleRunning,false)) {      yPos+=gravity;      isIdle=false;      if (!endSeqFinish && (playFlagPoleSeq || (collidingZone == 3 && flagPoleHit()))) {        if (!playFlagPoleSeq) {          SpriteHandler.getAllEnemyCast().clear();          SpriteHandler.getEnemyCast().clear();          SpriteHandler.getAllStageElements().clear();          SpriteHandler.getStageElements().clear();          playFlagPoleSeq=true;        }        playFlagPoleSeq();        return;      }    } else     if (sMario.isJumping()) {      super.getSpriteFrame().setImage(super.getPlayerStates().get(4));      isJumpCycleRunning=true;      isIdle=false;      opacity=1;      Main.pJump.play();      sMario.getJumpEffect().setTranslateX(xPos - jumpEffectXTH);      sMario.getJumpEffect().setTranslateY(yPos + jumpEffectYTH);      sMario.getJumpTrail().setTranslateX(xPos - jumpEffectXTH);      sMario.getJumpTrail().setTranslateY(yPos + jumpTrailYTH);      sMario.getJumpTrail().setFitHeight(jumpTrailDefHeight);    } else     while (bottomCollide(false,true)) {      yPos-=groundCollVel;      if (xVel != friction)       xVel=friction;      for (int i=0; i < spriteBoundsArray.length; i++)       spriteBoundsArray[i].setTranslateY(yPos);      spriteFrame.setTranslateY(yPos);      if (isIdle)       isIdle=false;    }    if (isJumpCycleRunning && !breakJump) {      yVel-=yDec;      yPos-=(yVel + gravity);    }    playJumpTrailEffect();  }  if (sMario.isUp()) {    yPos-=8.9f * REL_HEIGHT;    isIdle=false;  } else   if (sMario.isDown()) {    yPos+=REL_HEIGHT;    isIdle=false;  }  if (enableAura)   aura.update(xPos,yPos);  if (isIdle) {    playJumpTrailEffect();    return;  }  if (yPos > HEIGHT) {    playPitFallSeq();    return;  }  if (isJumpCycleRunning)   topCollide();  updatePosition();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(IFSConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=IFSConstants.LIB_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("IDPEntries").append(uri).append(">\n");  if ((idpEntryList != null) && (idpEntryList != Collections.EMPTY_LIST)) {    Iterator i=idpEntryList.iterator();    while (i.hasNext()) {      IDPEntry entry=(IDPEntry)i.next();      xml.append(entry.toXMLString(true,false));    }  }  xml.append("</").append(prefix).append("IDPEntries>\n");  return xml.toString();}  }
class C{  private boolean isBleEnabled(){  final BluetoothManager bm=(BluetoothManager)getActivity().getSystemService(Context.BLUETOOTH_SERVICE);  final BluetoothAdapter ba=bm.getAdapter();  return ba != null && ba.isEnabled();}  }
class C{  public Modification(ModificationType modificationType,Attribute attribute){  this(modificationType,attribute,false);}  }
class C{  public KeySelectorException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  protected void tearDown(){}  }
class C{  private void uninstallNotificationHandler(DN configEntryDN){  AccountStatusNotificationHandler<?> handler=notificationHandlers.remove(configEntryDN);  if (handler != null) {    DirectoryServer.deregisterAccountStatusNotificationHandler(configEntryDN);    handler.finalizeStatusNotificationHandler();  }}  }
class C{  public static String normalize(String path,boolean replaceBackSlash){  if (path == null) {    return null;  }  String normalized=path;  if (replaceBackSlash && normalized.indexOf('\\') >= 0)   normalized=normalized.replace('\\','/');  if (!normalized.startsWith("/"))   normalized="/" + normalized;  boolean addedTrailingSlash=false;  if (normalized.endsWith("/.") || normalized.endsWith("/..")) {    normalized=normalized + "/";    addedTrailingSlash=true;  }  while (true) {    int index=normalized.indexOf("//");    if (index < 0) {      break;    }    normalized=normalized.substring(0,index) + normalized.substring(index + 1);  }  while (true) {    int index=normalized.indexOf("/./");    if (index < 0) {      break;    }    normalized=normalized.substring(0,index) + normalized.substring(index + 2);  }  while (true) {    int index=normalized.indexOf("/../");    if (index < 0) {      break;    }    if (index == 0) {      return null;    }    int index2=normalized.lastIndexOf('/',index - 1);    normalized=normalized.substring(0,index2) + normalized.substring(index + 3);  }  if (normalized.length() > 1 && addedTrailingSlash) {    normalized=normalized.substring(0,normalized.length() - 1);  }  return normalized;}  }
class C{  public FrameBodyTOAL(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  protected String paramString(){  String wrapString=(wrap ? "true" : "false");  String wordString=(word ? "true" : "false");  return super.paramString() + ",colums=" + columns+ ",columWidth="+ columnWidth+ ",rows="+ rows+ ",rowHeight="+ rowHeight+ ",word="+ wordString+ ",wrap="+ wrapString;}  }
class C{  private void checkNotParsing(String type,String name) throws SAXNotSupportedException {  if (parsing) {    throw new SAXNotSupportedException("Cannot change " + type + ' '+ name+ " while parsing");  }}  }
class C{  public static boolean isNodeTheSame(Node node1,Node node2){  if (node1 instanceof DTMNodeProxy && node2 instanceof DTMNodeProxy)   return ((DTMNodeProxy)node1).equals((DTMNodeProxy)node2); else   return (node1 == node2);}  }
class C{  private Scanner(Readable source,Pattern pattern){  assert source != null : "source should not be null";  assert pattern != null : "pattern should not be null";  this.source=source;  delimPattern=pattern;  buf=CharBuffer.allocate(BUFFER_SIZE);  buf.limit(0);  matcher=delimPattern.matcher(buf);  matcher.useTransparentBounds(true);  matcher.useAnchoringBounds(false);  useLocale(Locale.getDefault(Locale.Category.FORMAT));}  }
class C{  public final void testHashCode02(){  assertTrue(new ECFieldFp(BigInteger.valueOf(23L)).hashCode() == new ECFieldFp(BigInteger.valueOf(23L)).hashCode());}  }
class C{  public RestletServiceServlet(final HttpServlet servlet,Class<? extends ServiceEndpointApplication> application,String name){  this.servlet=servlet;  this.application=application;  this.name=name;}  }
class C{  private void startAnimation(){  mAnimImage.setAnimation(mAnimation);  mAnimImage.setVisibility(View.VISIBLE);  Log.d(TAG,"FmRadioActivity.startAnimation end");}  }
class C{  MethodHandle linkMethodHandleConstant(byte refKind,Class<?> defc,String name,Object type) throws ReflectiveOperationException {  if (!(type instanceof Class || type instanceof MethodType))   throw new InternalError("unresolved MemberName");  MemberName member=new MemberName(refKind,defc,name,type);  MethodHandle mh=LOOKASIDE_TABLE.get(member);  if (mh != null) {    checkSymbolicClass(defc);    return mh;  }  if (defc == MethodHandle.class && refKind == REF_invokeVirtual) {    mh=findVirtualForMH(member.getName(),member.getMethodType());    if (mh != null) {      return mh;    }  }  MemberName resolved=resolveOrFail(refKind,member);  mh=getDirectMethodForConstant(refKind,defc,resolved);  if (mh instanceof DirectMethodHandle && canBeCached(refKind,defc,resolved)) {    MemberName key=mh.internalMemberName();    if (key != null) {      key=key.asNormalOriginal();    }    if (member.equals(key)) {      LOOKASIDE_TABLE.put(key,(DirectMethodHandle)mh);    }  }  return mh;}  }
class C{  @Override public String toString(){  return new StringBuilder().append(this.getClass().getName()).append("(compositeType=").append(compositeType.toString()).append(",contents=").append(contentString()).append(")").toString();}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " destination: "+ new Rectangle(dx1,dy1,dx2,dy2)+ " source: "+ new Rectangle(sx1,sy1,sx2,sy2));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  public SwitchPoint(){  this.mcs=new MutableCallSite(K_true);  this.mcsInvoker=mcs.dynamicInvoker();}  }
class C{  private static void putDecodedValue(Map<String,String> data,String name,String value,String encoding){  if (value == null || value.isEmpty()) {    if (utilDebug.messageEnabled()) {      utilDebug.message("AuthUtils::putDecodedValue the '" + name + "' value is null or empty'");    }    return;  }  String decodedValue=getCharDecodedField(value,encoding);  if (decodedValue.isEmpty()) {    if (utilDebug.messageEnabled()) {      utilDebug.message("AuthUtils::putDecodedValue decoding with encoding '" + encoding + "' is empty");    }    return;  }  data.put(name,decodedValue);}  }
class C{  public boolean isStyled(){  return this.isStyle;}  }
class C{  static String toUnsignedString0(long val,int shift){  int mag=Long.SIZE - Long.numberOfLeadingZeros(val);  int chars=Math.max(((mag + (shift - 1)) / shift),1);  char[] buf=new char[chars];  formatUnsignedLong(val,shift,buf,0,chars);  return new String(buf,true);}  }
class C{  public DriverPropertyInfo(String name,String value){  this.name=name;  this.value=value;}  }
class C{  public void addReferral(String name,Referral referral) throws NameAlreadyExistsException, InvalidNameException {  referrals.addReferral(name,referral);}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,File file,String title,String mimeType){  return createFile(folder,Uri.fromFile(file),title,mimeType);}  }
class C{  public AndFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  @Override public void recycle(){  remaining=0;  pos=0;  lastValid=0;  endChunk=false;  needCRLFParse=false;  trailingHeaders.recycle();  trailingHeaders.setLimit(maxTrailerSize);  extensionSize=0;  error=false;}  }
class C{  public R visitAttributeType(AttributeTypePropertyDefinition pd,AttributeType v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public static void parallelSort(long[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJLong.Sorter(null,a,new long[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public void test_encodeLjava_lang_StringLjava_lang_String() throws Exception {  try {    URLEncoder.encode("str","unknown_enc");    fail("Assert 0: Should throw UEE for invalid encoding");  } catch (  UnsupportedEncodingException e) {  }catch (  UnsupportedCharsetException e) {  }  try {    URLEncoder.encode(null,"harmony");    fail("NullPointerException expected");  } catch (  NullPointerException expected) {  }catch (  UnsupportedCharsetException expected) {  }}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof MBeanPermission))   return false;  MBeanPermission that=(MBeanPermission)obj;  return (this.mask == that.mask) && (this.getName().equals(that.getName()));}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  public static String generateSourceID(String siteURL){  if ((siteURL == null) || (siteURL.length() == 0)) {    SAMLUtils.debug.error("SAMLUtils.genrateSourceID: empty siteURL.");    return null;  }  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLUtils.generateSourceID: Exception when" + " generating digest:",e);    return null;  }  md.update(SAMLUtils.stringToByteArray(siteURL));  byte byteResult[]=md.digest();  String result=null;  try {    result=Base64.encode(byteResult).trim();  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLUtils.generateSourceID: Exception:",e);  }  return result;}  }
class C{  public Builder removeAllProhibitedAttributes(){  this.prohibitedAttributeOIDs.clear();  return this;}  }
class C{  public SocketHandler() throws IOException {  sealed=false;  configure();  try {    connect();  } catch (  IOException ix) {    System.err.println("SocketHandler: connect failed to " + host + ":"+ port);    throw ix;  }  sealed=true;}  }
class C{  private void parseActions(){  int mask;  if (actions == null)   throw new IllegalArgumentException("MBeanPermission: " + "actions can't be null");  if (actions.equals(""))   throw new IllegalArgumentException("MBeanPermission: " + "actions can't be empty");  mask=getMask(actions);  if ((mask & ALL) != mask)   throw new IllegalArgumentException("Invalid actions mask");  if (mask == NONE)   throw new IllegalArgumentException("Invalid actions mask");  this.mask=mask;}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);}  }
class C{  public long length(){  try {    checkClosed();    return raf.length();  } catch (  IOException e) {    return -1L;  }}  }
class C{  protected ContainerListener createContainerListener(){  return null;}  }
class C{  @Override public void onIconSelect(int iconID){  NotifyStatus.setIconId(iconID,getActivity());  refreshNotification();  mNotifyIconButton.setCompoundDrawablesWithIntrinsicBounds(mIconPopup.getDrawable(NotifyStatus.getIconId(getActivity())),null,getResources().getDrawable(R.drawable.icon_expand),null);}  }
class C{  public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {  CRL crl;  List crls=new ArrayList();  while ((crl=engineGenerateCRL(inStream)) != null) {    crls.add(crl);  }  return crls;}  }
class C{  public JRadioButtonMenuItem(Icon icon){  this(null,icon,false);}  }
class C{  public static void validateRecipient(SPSSODescriptorElement spDesc,String assertionID,SubjectConfirmationData subjectConfData) throws SAML2Exception {  String recipient=subjectConfData.getRecipient();  if (StringUtils.isEmpty(recipient)) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils.validateRecipient(): missing Recipient in Assertion.");    }    String[] data={assertionID};    LogUtil.error(Level.INFO,LogUtil.MISSING_RECIPIENT,data,null);    throw new SAML2Exception(bundle.getString("missingRecipient"));  }  boolean foundMatch=false;  for (  Object o : spDesc.getAssertionConsumerService()) {    AssertionConsumerServiceElement acs=(AssertionConsumerServiceElement)o;    if (recipient.equals(acs.getLocation())) {      foundMatch=true;      break;    }  }  if (!foundMatch) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils.validateRecipient(): this sp is not the intended recipient.");    }    String[] data={assertionID,recipient};    LogUtil.error(Level.INFO,LogUtil.WRONG_RECIPIENT,data,null);    throw new SAML2Exception(bundle.getString("wrongRecipient"));  }}  }
class C{  @Override public int countByUuid_C(String uuid,long companyId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;  Object[] finderArgs=new Object[]{uuid,companyId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_C_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_C_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_C_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(companyId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public static Foo fetchByPrimaryKey(long fooId){  return getPersistence().fetchByPrimaryKey(fooId);}  }
class C{  public Dimension toViewCoordinates(Dimension size){  return new Dimension(size);}  }
class C{  public boolean isReverseRelationship(){  return isReverseRelationship;}  }
class C{  public ValidationEventLocatorImpl(SAXParseException e){  if (e == null) {    throw new IllegalArgumentException(Messages.format(Messages.MUST_NOT_BE_NULL,"e"));  }  this.url=toURL(e.getSystemId());  this.columnNumber=e.getColumnNumber();  this.lineNumber=e.getLineNumber();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element elementNS;  Attr attr;  Attr attrNS;  String elemNSURI;  String elemNSURINull;  String attrNSURI;  String attrNSURINull;  String nullNS=null;  doc=(Document)load("staff",false);  element=doc.createElementNS(nullNS,"elem");  elementNS=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS(nullNS,"attr");  attrNS=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNSURI=elementNS.getNamespaceURI();  elemNSURINull=element.getNamespaceURI();  attrNSURI=attrNS.getNamespaceURI();  attrNSURINull=attr.getNamespaceURI();  assertEquals("nodegetnamespaceuri03_elemNSURI","http://www.w3.org/DOM/Test/elem",elemNSURI);  assertNull("nodegetnamespaceuri03_1",elemNSURINull);  assertEquals("nodegetnamespaceuri03_attrNSURI","http://www.w3.org/DOM/Test/attr",attrNSURI);  assertNull("nodegetnamespaceuri03_2",attrNSURINull);}  }
class C{  public R visitBoolean(BooleanPropertyDefinition pd,Boolean v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public final void testCertPath(){  try {    CertPath cp1=new MyCertPath(testEncoding);    assertEquals("MyEncoding",cp1.getType());    assertTrue(Arrays.equals(testEncoding,cp1.getEncoded()));  } catch (  CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException " + e.getMessage());  }  try {    CertPath cp1=new MyCertPath(null);  } catch (  Exception e) {    fail("Unexpected exception " + e.getMessage());  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EntityDescriptorType createEntityDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EntityDescriptorTypeImpl();}  }
class C{  @Override public String toString(){  String s=null;  try {    s=toJSONObject().toString(2);  } catch (  JSONException e) {    PolicyConstants.DEBUG.error("StaticAttributes.toString",e);  }  return s;}  }
class C{  @Override public List<Foo> findByField2(boolean field2){  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public NameFileFilter(String name){  this(name,null);}  }
class C{  void resize(int newCapacity){  Entry<K,V>[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry<K,V>[] newTable=newTable(newCapacity);  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public MinecraftFont(){  this(true);}  }
class C{  public KeyManagerProviderConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  providers=new ConcurrentHashMap<>();}  }
class C{  CTHeartbeatPublisherThread(String threadName,Session session,long heartbeatInterval,int serverId){  super(threadName);  this.session=session;  this.heartbeatInterval=heartbeatInterval;  this.serverId=serverId;}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){}  }
class C{  public static void processImage(GifImageData image,int lastFrameNumber){  GifParameters gif=new GifParameters(image);  InputStream gifStream;  try {    if (image.getData() == null) {      image.loadData();    }    gifStream=new ByteArrayInputStream(image.getData());    process(gifStream,gif,lastFrameNumber);  } catch (  java.io.IOException e) {    throw new IOException(IOException.GifImageException,e);  }}  }
class C{  public boolean removeAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  @Override protected AvroParser _createParser(InputStream in,IOContext ctxt) throws IOException {  return new AvroParserImpl(ctxt,_parserFeatures,_avroParserFeatures,_objectCodec,in);}  }
class C{  public Mushroom(Material shroom){  super(shroom);  Validate.isTrue(shroom == Material.HUGE_MUSHROOM_1 || shroom == Material.HUGE_MUSHROOM_2,"Not a mushroom!");}  }
class C{  public static AddRequest newAddRequest(final String name){  final Entry entry=new LinkedHashMapEntry().setName(name);  return new AddRequestImpl(entry);}  }
class C{  public void dumpEntries(Writer writer) throws IOException {  dumpEntries(writer,blamer.getResourceEntries());}  }
class C{  public ConnectionParameters bindDn(String dn){  bindDn=dn;  return this;}  }
class C{  public BAD_OPERATION(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static JCheckBox createCheckBox(LocalizableMessage text){  JCheckBox cb=new JCheckBox(text.toString());  cb.setOpaque(false);  cb.setForeground(ColorAndFontConstants.buttonForeground);  cb.getAccessibleContext().setAccessibleName(text.toString());  return cb;}  }
class C{  protected int estimateHeaderElementLen(final HeaderElement elem){  if (elem == null)   return 0;  int result=elem.getName().length();  final String value=elem.getValue();  if (value != null) {    result+=3 + value.length();  }  final int parcnt=elem.getParameterCount();  if (parcnt > 0) {    for (int i=0; i < parcnt; i++) {      result+=2 + estimateNameValuePairLen(elem.getParameter(i));    }  }  return result;}  }
class C{  public StateInteractive key_typed(char p_key_char){  StateInteractive result=this;  Point2D screen_mouse_pos=i_brd.gdi_context.coordinate_transform.board_to_screen(i_brd.get_current_mouse_position());  if (p_key_char == 'a') {    i_brd.get_panel().zoom_all();  } else   if (p_key_char == 'c') {    i_brd.get_panel().center_display(screen_mouse_pos);  } else   if (p_key_char == 'f') {    result=new StateSelectRegionZoom(this,i_brd,actlog,i_brd.get_current_mouse_position());  } else   if (p_key_char == 'Z') {    i_brd.get_panel().zoom_out(screen_mouse_pos);  } else   if (p_key_char == 'z') {    i_brd.get_panel().zoom_in(screen_mouse_pos);  } else   if (p_key_char == ',') {    i_brd.get_panel().set_crosshair_cursor(!i_brd.get_panel().is_cross_hair_cursor());  } else   if (p_key_char == '\n' || p_key_char == ' ') {    result=complete();  } else   if (p_key_char == java.awt.event.KeyEvent.VK_ESCAPE) {    result=cancel();  } else   if (Character.isDigit(p_key_char)) {    board.BrdLayerStructure layer_structure=i_brd.get_routing_board().layer_structure;    int want=Character.digit(p_key_char,10);    want=Math.min(want,layer_structure.signal_layer_count());    want=Math.max(want - 1,0);    want=layer_structure.get_no(layer_structure.get_signal_layer(want));    i_brd.set_current_layer(want);  }  return result;}  }
class C{  private void writeLDIFLines(Map<AttributeType,List<Attribute>> attributes,final boolean typesOnly,String attributeType,LDIFExportConfig exportConfig,BufferedWriter writer,int wrapColumn,boolean wrapLines) throws IOException {  for (  AttributeType attrType : attributes.keySet()) {    if (exportConfig.includeAttribute(attrType)) {      List<Attribute> attrList=attributes.get(attrType);      for (      Attribute a : attrList) {        if (a.isVirtual() && !exportConfig.includeVirtualAttributes()) {          continue;        }        writeLDIFLine(a,typesOnly,writer,wrapLines,wrapColumn);      }    } else {      if (logger.isTraceEnabled()) {        logger.trace("Skipping %s attribute %s for entry %s " + "because of the export configuration.",attributeType,attrType.getNameOrOID(),dn);      }    }  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MinExpiresParser.parse");  MinExpires minExpires=new MinExpires();  try {    headerName(TokenTypes.MIN_EXPIRES);    minExpires.setHeaderName(SIPHeaderNames.MIN_EXPIRES);    String number=this.lexer.number();    try {      minExpires.setExpires(Integer.parseInt(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return minExpires;  }  finally {    if (debug)     dbg_leave("MinExpiresParser.parse");  }}  }
class C{  public boolean isEmpty(){  return attrMap.isEmpty();}  }
class C{  private void addComposedChars() throws ParseException {  ComposedCharIter iter=new ComposedCharIter();  int c;  while ((c=iter.next()) != ComposedCharIter.DONE) {    if (getCharOrder(c) == RBCollationTables.UNMAPPED) {      String s=iter.decomposition();      if (s.length() == 1) {        int order=getCharOrder(s.charAt(0));        if (order != RBCollationTables.UNMAPPED) {          addOrder(c,order);        }        continue;      } else       if (s.length() == 2) {        char ch0=s.charAt(0);        if (Character.isHighSurrogate(ch0)) {          int order=getCharOrder(s.codePointAt(0));          if (order != RBCollationTables.UNMAPPED) {            addOrder(c,order);          }          continue;        }      }      int contractOrder=getContractOrder(s);      if (contractOrder != RBCollationTables.UNMAPPED) {        addOrder(c,contractOrder);      } else {        boolean allThere=true;        for (int i=0; i < s.length(); i++) {          if (getCharOrder(s.charAt(i)) == RBCollationTables.UNMAPPED) {            allThere=false;            break;          }        }        if (allThere) {          addExpandOrder(c,s,RBCollationTables.UNMAPPED);        }      }    }  }}  }
class C{  Reaper(){  super("File Reaper");  setPriority(Thread.MAX_PRIORITY);  setDaemon(true);}  }
class C{  public Set keySet(){  return map.keySet();}  }
class C{  public String clientAddress(){  return clientAddress;}  }
class C{  @Override public void flush(){  if (this.os != null) {    try {      if (this.writer != null) {        this.writer.flush();      } else {        this.os.flush();      }    } catch (    Exception e) {      getErrorManager().error("Exception occurred when flushing the output stream",e,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  public boolean ckeckDoubleFileExtensions(){  return this.doubleExtensions;}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle){  this(peer,lcle,false,true);}  }
class C{  public boolean check_trace(Polyline p_polyline,int p_layer,int p_pen_half_width,NetNosList p_net_no_arr,int p_clearance_class){  BrdTracep tmp_trace=new BrdTracep(p_polyline,p_layer,p_pen_half_width,p_net_no_arr,p_clearance_class,0,ItemFixState.UNFIXED,this);  Set<BrdAbitPin> contact_pins=tmp_trace.touching_pins_at_end_corners();  for (int index=0; index < tmp_trace.tile_shape_count(); ++index) {    if (!check_trace(tmp_trace.tile_shape_get(index),p_layer,p_net_no_arr,p_clearance_class,contact_pins)) {      return false;    }  }  return true;}  }
class C{  public boolean mustChangePassword(){  if (mustChangePassword != ConditionResult.UNDEFINED) {    if (logger.isTraceEnabled()) {      logger.trace("Returning stored result of %b for user %s.",mustChangePassword == ConditionResult.TRUE,userDNString);    }    return mustChangePassword == ConditionResult.TRUE;  }  if (!passwordPolicy.isAllowUserPasswordChanges() || (!passwordPolicy.isForceChangeOnAdd() && !passwordPolicy.isForceChangeOnReset())) {    mustChangePassword=ConditionResult.FALSE;    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because neither force change on add nor force change on reset" + " is enabled, or users are not allowed to self-modify passwords.",userDNString);    }    return false;  }  AttributeType type=DirectoryServer.getSchema().getAttributeType(OP_ATTR_PWPOLICY_RESET_REQUIRED);  try {    mustChangePassword=getBoolean(userEntry,type);  } catch (  Exception e) {    logger.traceException(e,"Returning true for user %s because an error occurred",userDNString);    mustChangePassword=ConditionResult.TRUE;    return true;  }  if (mustChangePassword == ConditionResult.UNDEFINED) {    mustChangePassword=ConditionResult.FALSE;    logger.trace("Returning %b for user since the attribute \"%s\" is not present in the entry.",false,userDNString,OP_ATTR_PWPOLICY_RESET_REQUIRED);    return false;  }  final boolean result=mustChangePassword == ConditionResult.TRUE;  logger.trace("Returning %b for user %s.",result,userDNString);  return result;}  }
class C{  public boolean isTrueVolatile(){  return false;}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    OpenType<Object> xopenType=cast(openType);    Set<Object> xlegalValues=cast(legalValues);    Comparable<Object> xminValue=cast(minValue);    Comparable<Object> xmaxValue=cast(maxValue);    return new OpenMBeanAttributeInfoSupport(name,description,openType,isReadable(),isWritable(),isIs(),makeDescriptor(xopenType,defaultValue,xlegalValues,xminValue,xmaxValue));  } else   return this;}  }
class C{  public void readOctetString() throws IOException {  if (tag == ASN1Constants.TAG_OCTETSTRING) {    readContent();  } else   if (tag == ASN1Constants.TAG_C_OCTETSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 octet string type is not supported");  } else {    throw expected("octetstring");  }}  }
class C{  void Reconstruct(int Font){  OffsetItem[] fdPrivate=new DictOffsetItem[fonts[Font].FDArrayOffsets.length - 1];  IndexBaseItem[] fdPrivateBase=new IndexBaseItem[fonts[Font].fdprivateOffsets.length];  OffsetItem[] fdSubrs=new DictOffsetItem[fonts[Font].fdprivateOffsets.length];  ReconstructFDArray(Font,fdPrivate);  ReconstructPrivateDict(Font,fdPrivate,fdPrivateBase,fdSubrs);  ReconstructPrivateSubrs(Font,fdPrivateBase,fdSubrs);}  }
class C{  @Override public boolean markSupported(){  return markSupported;}  }
class C{  public NumberUp(int value){  super(value,1,Integer.MAX_VALUE);}  }
class C{  public String convertValueToText(Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){  if (value != null) {    String sValue=value.toString();    if (sValue != null) {      return sValue;    }  }  return "";}  }
class C{  public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  this.store=store == null ? new CookieStoreImpl() : store;  policy=cookiePolicy == null ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;}  }
class C{  private AuthMethod(EnumAuthMethod method,String saslMech,EnumBindRuleType type){  this.authMethod=method;  this.saslMech=saslMech;  this.type=type;}  }
class C{  @Override protected int intersectsValidDropTarget(int id){  int mCountX=mView.getCountX();  int mCountY=mView.getCountY();  int x=id % mCountX;  int y=id / mCountX;  LauncherAccessibilityDelegate.DragInfo dragInfo=mDelegate.getDragInfo();  if (dragInfo.dragType == DragType.WIDGET && mView.isHotseat()) {    return INVALID_POSITION;  }  if (dragInfo.dragType == DragType.WIDGET) {    boolean fits=false;    int spanX=dragInfo.info.spanX;    int spanY=dragInfo.info.spanY;    for (int m=0; m < spanX; m++) {      for (int n=0; n < spanY; n++) {        fits=true;        int x0=x - m;        int y0=y - n;        if (x0 < 0 || y0 < 0)         continue;        for (int i=x0; i < x0 + spanX; i++) {          if (!fits)           break;          for (int j=y0; j < y0 + spanY; j++) {            if (i >= mCountX || j >= mCountY || mView.isOccupied(i,j)) {              fits=false;              break;            }          }        }        if (fits) {          return x0 + mCountX * y0;        }      }    }    return INVALID_POSITION;  } else {    View child=mView.getChildAt(x,y);    if (child == null || child == dragInfo.item) {      return id;    } else     if (dragInfo.dragType != DragType.FOLDER) {      ItemInfo info=(ItemInfo)child.getTag();      if (info instanceof AppInfo || info instanceof FolderInfo || info instanceof ShortcutInfo) {        return id;      }    }    return INVALID_POSITION;  }}  }
class C{  public void next(){  index++;}  }
class C{  public boolean isServiceVisible(String serviceName){  return !CollectionUtils.isEmpty(hiddenServices) && !hiddenServices.contains(serviceName);}  }
class C{  public static void access(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.access(level,msgid,data,session);    } catch (    LogException le) {      FSUtils.debug.error("LogUtil.access: Couldn't write log:",le);    }  }}  }
class C{  public boolean equals(Object x){  if (x == this)   return true;  if (!(x instanceof BigInteger))   return false;  BigInteger xInt=(BigInteger)x;  if (xInt.signum != signum)   return false;  int[] m=mag;  int len=m.length;  int[] xm=xInt.mag;  if (len != xm.length)   return false;  for (int i=0; i < len; i++)   if (xm[i] != m[i])   return false;  return true;}  }
class C{  public AccountService updateAccount(Account account,Handler<AsyncResult<Account>> resultHandler){  delegate.updateAccount(account,resultHandler);  return this;}  }
class C{  public javax.sip.header.Header createHeader(String headerText) throws ParseException {  StringMsgParser smp=new StringMsgParser();  SIPHeader sipHeader=smp.parseSIPHeader(headerText.trim());  if (sipHeader instanceof SIPHeaderList) {    if (((SIPHeaderList)sipHeader).size() > 1) {      throw new ParseException("Only singleton allowed " + headerText,0);    } else     if (((SIPHeaderList)sipHeader).size() == 0) {      try {        return (Header)((SIPHeaderList)sipHeader).getMyClass().newInstance();      } catch (      InstantiationException ex) {        ex.printStackTrace();        return null;      }catch (      IllegalAccessException ex) {        ex.printStackTrace();        return null;      }    } else {      return (Header)((SIPHeaderList)sipHeader).getFirst();    }  } else {    return (Header)sipHeader;  }}  }
class C{  public boolean verifyXMLSignature(java.lang.String XML) throws XMLSignatureException {  return sp.verifyXMLSignature(XML);}  }
class C{  public JCheckBoxMenuItem(String text,Icon icon,boolean b){  super(text,icon);  setModel(new JToggleButton.ToggleButtonModel());  setSelected(b);  setFocusable(false);}  }
class C{  public void testCertStore07() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  for (int i=0; i < dValid.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertStore.getInstance(dValid[i],dParams,invalidValues[j]);        fail("NoSuchProviderException must be thrown");      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  protected void parseParameter(AuthenticationHeader header) throws ParseException {  if (debug)   dbg_enter("parseParameter");  try {    NameValue nv=this.nameValue('=');    header.setParameter(nv);  }  finally {    if (debug)     dbg_leave("parseParameter");  }}  }
class C{  public static int countAll(){  return getPersistence().countAll();}  }
class C{  public ConsonantVowelNameGenerator build() throws IllegalStateException {  checkState();  return new ConsonantVowelNameGenerator(this);}  }
class C{  public void synchronizeWithModel(){  removeChildren();  for (  Explanation explanation : block.getEvents()) {    EventView child=explanation instanceof ExplanationBlock ? visualization.getViewOfBlock((ExplanationBlock)explanation) : visualization.getViewOfExplanation(explanation);    if (child == null)     child=visualization.createViewFor(explanation);    addChild(child);  }  numberOfVisibleBlockChildren=0;  for (  View view : getChildren()) {    ((EventView)view).markAncestorIsCollapsed(isCollapsed || ancestorIsCollapsed);    if (view instanceof EventBlockView && !((EventBlockView<?>)view).isHidden())     numberOfVisibleBlockChildren++;  }}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public boolean hasInstancesChanged(long token){  return token != this.refreshToken;}  }
class C{  public SizeRequirements(){  minimum=0;  preferred=0;  maximum=0;  alignment=0.5f;}  }
class C{  public GregorianCalendar(Locale aLocale){  this(TimeZone.getDefaultRef(),aLocale);  setZoneShared(true);}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.removeUpdate(e,a,f);  }}  }
class C{  public final void testEqualsObject07(){  assertFalse(new ECFieldF2m(2000).equals(new Object()));}  }
class C{  public AccountService retrieveAllAccounts(Handler<AsyncResult<List<Account>>> resultHandler){  delegate.retrieveAllAccounts(resultHandler);  return this;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.NestedPolicyType createNestedPolicyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.NestedPolicyTypeImpl();}  }
class C{  public Observable<List<Account>> retrieveAllAccountsObservable(){  io.vertx.rx.java.ObservableFuture<List<Account>> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveAllAccounts(resultHandler.toHandler());  return resultHandler;}  }
class C{  public void addApplicationSSOTokenDestroyer(ShutdownListener listener){  appSSOTokenDestroyer=listener;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  hgap=f.get("hgap",0);  vgap=f.get("vgap",0);  if (f.defaulted("vector")) {    Hashtable<String,Component> tab=(Hashtable)f.get("tab",null);    vector=new Vector<>();    if (tab != null && !tab.isEmpty()) {      for (Enumeration<String> e=tab.keys(); e.hasMoreElements(); ) {        String key=(String)e.nextElement();        Component comp=(Component)tab.get(key);        vector.add(new Card(key,comp));        if (comp.isVisible()) {          currentCard=vector.size() - 1;        }      }    }  } else {    vector=(Vector)f.get("vector",null);    currentCard=f.get("currentCard",0);  }}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void sort(long[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  if (token == null) {    return false;  }  String tokenID=token.getTokenID().toString();  String userLocalDN=token.getPrincipal().getName();  DN userDN=null;  if (debug.messageEnabled()) {    debug.message("LDAPGroups.isMember(): user local DN is " + userLocalDN);  }  if (selectedRFCGroupDNs.size() > 0) {    Iterator<String> groupsIter=selectedRFCGroupDNs.iterator();    String userRDN=null;    while (groupsIter.hasNext()) {      Boolean matchFound;      String groupDN=groupsIter.next();      if ((matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,groupDN)) != null) {        debug.message("LDAPGroups.isMember():Got membership from cache of {} in group {} :{}",userLocalDN,groupDN,matchFound);        boolean result=matchFound;        if (result) {          return true;        } else {          continue;        }      }      if (debug.messageEnabled()) {        debug.message("LDAPGroups:isMember():entry for {} not in subject evaluation cache,fetching from " + "directory server.",groupDN);      }      if (userDN == null) {        int beginIndex=userLocalDN.indexOf("=");        int endIndex=userLocalDN.indexOf(",");        if (beginIndex <= 0 || endIndex <= 0 || beginIndex >= endIndex) {          throw new PolicyException(ResBundleUtils.rbName,"ldapgroups_subject_invalid_local_user_dn",null,null);        }        String userName=userLocalDN.substring(beginIndex + 1,endIndex);        userRDN=PolicyUtils.constructUserFilter(token,userRDNAttrName,userName,aliasEnabled);        if (localDS && !PolicyUtils.principalNameEqualsUuid(token)) {          userDN=DN.valueOf(userLocalDN);        } else {          userDN=getUserDN(userRDN);        }        if (userDN == null) {          debug.message("LDAPGroups.isMember(): User {} is not found in the directory",userLocalDN);          return false;        }      }      if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {        try {          token.addSSOTokenListener(PolicyEvaluator.ssoListener);          PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);          debug.message("LDAPGroups.isMember(): sso listener added .\n");        } catch (        SSOTokenListenersUnsupportedException ex) {          debug.message("LDAPGroups.isMember(): could not add sso listener: {}",ex.getMessage());        }      }      if (isMemberOfGroup(groupDN,userDN,userRDN,token)) {        debug.message("LDAPGroups.isMember(): User {} is a member of this LDAPGroups.",userDN.toString());        return true;      }    }  }  debug.message("LDAPGroups.isMember(): User {} is not a member of this LDAPGroups.",userLocalDN);  return false;}  }
class C{  public static JButton createButton(LocalizableMessage text){  JButton button=new JButton(text.toString());  button.setOpaque(false);  button.setForeground(ColorAndFontConstants.buttonForeground);  button.getAccessibleContext().setAccessibleName(text.toString());  return button;}  }
class C{  @Override public boolean sendSearchReference(SearchOperation searchOperation,SearchResultReference searchReference) throws DirectoryException {  ((InternalSearchOperation)searchOperation).addSearchReference(searchReference);  return true;}  }
class C{  public boolean verifyOnly(){  return verifyOnly;}  }
class C{  protected void paint(SynthContext context,Graphics g){  AbstractButton b=(AbstractButton)context.getComponent();  g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));  g.setFont(style.getFont(context));  context.getStyle().getGraphicsUtils(context).paintText(context,g,b.getText(),getIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex(),getTextShiftOffset(context));}  }
class C{  public void test_Of_EEEEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c,EnumWithInnerClass.d,EnumWithInnerClass.e);  assertEquals("Size of enumSet should be 5:",5,enumSet.size());  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.e));  try {    EnumSet.of((EnumWithInnerClass)null,null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d,HugeEnumWithInnerClass.e);  assertEquals(5,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.e));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  public static void printErrorMessage(PrintStream err,LocalizableMessage explanation,int resultCode,LocalizableMessage errorMessage,DN matchedDN){  if (explanation != null && explanation.length() > 0) {    err.println(explanation);  }  if (resultCode >= 0) {    err.println(ERR_TOOL_RESULT_CODE.get(resultCode,LDAPResultCode.toString(resultCode)));  }  if (errorMessage != null && errorMessage.length() > 0) {    err.println(ERR_TOOL_ERROR_MESSAGE.get(errorMessage));  }  if (matchedDN != null) {    err.println(ERR_TOOL_MATCHED_DN.get(matchedDN));  }}  }
class C{  public void removeServiceConfig(String serviceName) throws SMSException {  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,token);    scm.deleteOrganizationConfig(orgName);  } catch (  SSOException ssoe) {    SMSEntry.debug.error("OrganizationConfigManager: Unable to " + "delete Service Config",ssoe);    throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS03.class,args);}  }
class C{  public static boolean checkIfFileIsHtmlFile(final String file,final IConfiguration configuration){  return configuration.getHTMLExtensions().contains(getFileExtension(file).toLowerCase());}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public byte[] perform(byte[] blob) throws TokenStrategyFailedException {  Reject.ifTrue(blob == null);  if (!isTokenValidForCompression(blob)) {    return blob;  }  return performUpdate(blob,replacement);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String name;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("position");  testEmployee=elementList.item(1);  name=testEmployee.getNodeName();  assertEquals("nodename","position",name);  name=((Element)testEmployee).getTagName();  assertEquals("tagname","position",name);}  }
class C{  public void delete(boolean recursive) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(token);  if (AMCompliance.isComplianceUserDeletionEnabled()) {switch (profileType) {case ORGANIZATION:case ORGANIZATIONAL_UNIT:case USER:case ASSIGNABLE_DYNAMIC_GROUP:case DYNAMIC_GROUP:case STATIC_GROUP:case GROUP:case RESOURCE:      AMCompliance.verifyAndDeleteObject(token,rfcDN);    return;case ROLE:case FILTERED_ROLE:  purge(recursive,-1);return;case PEOPLE_CONTAINER:String pcFilter=getSearchFilter(AMObject.PEOPLE_CONTAINER);String userFilter=getSearchFilter(AMObject.USER);StringBuilder sb=new StringBuilder();sb.append("(|").append(pcFilter).append(userFilter);sb.append(")");String filter=sb.toString();Set pcEntries=new HashSet();try {pcEntries=search(AMConstants.SCOPE_ONE,filter);} catch (AMException ame) {String ldapErr=ame.getLDAPErrorCode();int ldapError=Integer.parseInt(ldapErr);if (ldapErr != null && (ldapError == 4 || ldapError == 11)) {String locale=AMCommonUtils.getUserLocale(token);throw new AMException(AMSDKBundle.getString("977",locale),"977");} else {if (debug.messageEnabled()) {debug.message("AMObjectImpl.delete people " + "container " + ame);}throw ame;}}if (pcEntries != null && !pcEntries.isEmpty()) {throw new AMException(AMSDKBundle.getString("977",locale),"977");} else {purge(recursive,-1);return;}case GROUP_CONTAINER:String gcFilter=getSearchFilter(AMObject.GROUP_CONTAINER);String groupFilter=getSearchFilter(AMObject.GROUP);StringBuilder sbf=new StringBuilder();sbf.append("(|").append(gcFilter).append(groupFilter);sbf.append(")");String flt=sbf.toString();Set gcEntries=new HashSet();try {gcEntries=search(AMConstants.SCOPE_ONE,flt);} catch (AMException ame) {String ldapErr=ame.getLDAPErrorCode();int ldapError=Integer.parseInt(ldapErr);if (ldapErr != null && (ldapError == 4 || ldapError == 11)) {throw new AMException(AMSDKBundle.getString("977",locale),"977");} else {if (debug.messageEnabled()) {debug.message("AMObjectImpl.delete group container " + ame);}throw ame;}}if (gcEntries != null && !gcEntries.isEmpty()) {throw new AMException(AMSDKBundle.getString("977",locale),"977");} else {purge(recursive,-1);return;}default :purge(recursive,-1);return;}} else {purge(recursive,-1);}}  }
class C{  private MSVValidator(DefaultJAXBContextImpl _jaxbCtx,ValidationContext _ctxt,ValidatableObject vo){  jaxbContext=_jaxbCtx;  acceptor=vo.createRawValidator().createAcceptor();  context=_ctxt;  target=vo;}  }
class C{  private void appendAttributes(StringBuilder buffer,Collection<List<Attribute>> attributesLists){  boolean firstAttr=true;  for (  List<Attribute> attributes : attributesLists) {    for (    Attribute a : attributes) {      if (firstAttr) {        firstAttr=false;      } else {        buffer.append(",");      }      buffer.append(a.getAttributeDescription());      buffer.append("={");      Utils.joinAsString(buffer,",",a);      buffer.append("}");    }  }}  }
class C{  private JapaneseDate withYear(JapaneseEra era,int yearOfEra){  int year=JapaneseChronology.INSTANCE.prolepticYear(era,yearOfEra);  return with(isoDate.withYear(year));}  }
class C{  public void list(PrintStream out){  out.println("-- listing properties --");  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) {    String key=e.nextElement();    String val=(String)h.get(key);    if (val.length() > 40) {      val=val.substring(0,37) + "...";    }    out.println(key + "=" + val);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument05.class,args);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMakeAndModel);}  }
class C{  public void deActivateFedStatus(){  this.isActive=false;}  }
class C{  public static BigInteger probablePrime(int bitLength,Random rnd){  if (bitLength < 2)   throw new ArithmeticException("bitLength < 2");  return (bitLength < SMALL_PRIME_THRESHOLD ? smallPrime(bitLength,DEFAULT_PRIME_CERTAINTY,rnd) : largePrime(bitLength,DEFAULT_PRIME_CERTAINTY,rnd));}  }
class C{  public void delete(InternalSession session) throws CoreTokenException {  String tokenId=tokenIdFactory.toSessionTokenId(session.getID());  coreTokenService.delete(tokenId);}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  private void _processMouseDragged(MouseEvent e){  JComponent component=(JComponent)e.getComponent();  boolean stop=true;  if (component.isShowing()) {    Rectangle visibleRect=component.getVisibleRect();    stop=visibleRect.contains(e.getX(),e.getY());  }  if (stop) {    _stop(component);  } else {    start(component,e);  }}  }
class C{  public static boolean isValidInet4Address(String inet4Address){  String[] groups=match(inet4Address);  if (groups == null) {    return false;  }  for (  String ipSegment : groups) {    if (ipSegment == null || ipSegment.length() == 0) {      return false;    }    int iIpSegment;    try {      iIpSegment=Integer.parseInt(ipSegment);    } catch (    NumberFormatException e) {      return false;    }    if (iIpSegment > IPV4_MAX_OCTET_VALUE) {      return false;    }    if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {      return false;    }  }  return true;}  }
class C{  public void verifyAuthId(String realmDN,String authId) throws RestAuthException {  SecretKey key=getSigningKey(realmDN);  try {    final SigningHandler signingHandler=signingManager.newHmacSigningHandler(key.getEncoded());    boolean verified=jwtBuilderFactory.reconstruct(authId,SignedJwt.class).verify(signingHandler);    if (!verified) {      throw new RestAuthException(ResourceException.BAD_REQUEST,"AuthId JWT Signature not valid");    }  } catch (  JwtRuntimeException e) {    throw new RestAuthException(ResourceException.BAD_REQUEST,"Failed to parse JWT, " + e.getLocalizedMessage(),e);  }}  }
class C{  @Override protected void handleIOException(IOException e) throws IOException {  throw new TaggedIOException(e,tag);}  }
class C{  public MimeHeaders(){  headers=new Vector();}  }
class C{  public static PdfAction createURI(String uri,boolean isMap){  return new PdfAction().put(PdfName.S,PdfName.URI).put(PdfName.URI,new PdfString(uri)).put(PdfName.IsMap,new PdfBoolean(isMap));}  }
class C{  public void addOverride(MappedMember override){  overrides.add(override);}  }
class C{  public void test_read$BII() throws IOException {  DigestInputStream dis=new DigestInputStream(inStream,digest);  int bytesToRead=inStream.available();  byte buf1[]=new byte[bytesToRead + 5];  byte buf2[]=new byte[bytesToRead + 5];  assertTrue("No data to read for this test",bytesToRead > 0);  int bytesRead1=dis.read(buf1,5,bytesToRead);  int bytesRead2=inStream1.read(buf2,5,bytesToRead);  assertEquals("Didn't read the same from each stream",bytesRead1,bytesRead2);  assertEquals("Didn't read the entire",bytesRead1,bytesToRead);  boolean same=true;  for (int i=0; i < bytesToRead + 5; i++) {    if (buf1[i] != buf2[i]) {      same=false;    }  }  assertTrue("Didn't get the same data",same);}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  if (getEnabled() && request.getContext() != null && request.getContext().getDistributable() && !request.isAsyncDispatching()) {    Manager manager=request.getContext().getManager();    if (manager != null && ((manager instanceof ClusterManager && getCluster() != null && getCluster().getManager(((ClusterManager)manager).getName()) != null) || (manager instanceof PersistentManager))) {      handlePossibleTurnover(request);    }  }  getNext().invoke(request,response);}  }
class C{  public boolean isExtended(){  return extended;}  }
class C{  private boolean isInstalled(){  return installStatus.isInstalled();}  }
class C{  public boolean isActive(String value,String activeValue){  return value == null || value.equalsIgnoreCase(activeValue);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  ProcessingInstruction piNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  piNode=(ProcessingInstruction)entRef.getLastChild();  assertNotNull("piNodeNotNull",piNode);{    boolean success=false;    try {      piNode.setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public RequesterID createRequesterID(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTERID,value);  if (obj == null) {    return new RequesterIDImpl(value);  } else {    return (RequesterID)obj;  }}  }
class C{  private void createSourceFiles(File parent,String childContent) throws IOException {  if (!parent.exists()) {    parent.mkdir();  }  File d1=new File(parent,"d1");  File f1a=new File(d1,"f1a");  File f1b=new File(d1,"f1b");  File d2=new File(parent,"d2");  File f2a=new File(d2,"f2a");  File d2b=new File(d2,"d2b");  File f2b1=new File(d2b,"f2b1");  d1.mkdir();  d2.mkdir();  d2b.mkdir();  writeContents(f1a,childContent);  writeContents(f1b,childContent);  writeContents(f2a,childContent);  writeContents(f2b1,childContent);}  }
class C{  protected static boolean destroyPrincipalSession(String userID,String metaAlias,String sessionIndex,HttpServletRequest request,HttpServletResponse response){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered destroyPrincipalSession" + " for user : " + userID + " SessionIndex = "+ sessionIndex);  }  Vector sessionObjList=getSessionObjectList(userID,metaAlias,sessionIndex);  if (sessionObjList == null) {    return false;  }  invalidateActiveSessionIds(sessionObjList,request,response);  FSSession session=null;  if (sessionIndex != null && (sessionObjList != null && sessionObjList.size() == 1)) {    session=(FSSession)sessionObjList.elementAt(0);  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("To call cleanSessionMap for user : " + userID);  }  cleanSessionMap(userID,metaAlias,session);  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedType createEncryptedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedTypeImpl();}  }
class C{  public static boolean addListProperty(String fileName,String property,String value){  boolean status=false;  try {    if (((fileName != null) && (fileName.trim().length() > 0)) && ((property != null) && (property.trim().length() > 0)) && ((value != null) && (value.trim().length() > 0))) {      int locationToAdd=findPropertyIndex(fileName,property);      if (locationToAdd <= 0) {        locationToAdd=getTotalLineNums(fileName);      }      ArrayList list=createListValue(fileName,property,value);      if ((list != null) && (!list.isEmpty())) {        Iterator iter=list.iterator();        int index=0;        while (iter.hasNext()) {          StringBuffer strBuf=new StringBuffer();          strBuf.append(property).append(SQRBRACKET_OPEN).append(index).append(SQRBRACKET_CLOSE).append(SPACE).append(EQUAL_TO).append((String)iter.next());          index++;          if (strBuf != null) {            status=FileUtils.insertLineByNumber(fileName,locationToAdd + 1,strBuf.toString());            locationToAdd++;          }        }      }    }  } catch (  Exception ex) {    Debug.log("FileUtils.addListProperty() threw exception :",ex);  }  return status;}  }
class C{  public MP3Player(final String filename) throws FileNotFoundException {  this(JKIOUtil.getInputStream(filename));  this.filename=filename;}  }
class C{  @Override public boolean writeEntry(TemplateEntry entry) throws IOException, MakeLDIFException {  try {    if (entry.getDN() != null) {      ldifWriter.writeTemplateEntry(entry);      if ((++entriesWritten % 1000) == 0) {        printWrappedText(out,INFO_MAKELDIF_PROCESSED_N_ENTRIES.get(entriesWritten));      }    } else {      AttributeType[] rdnAttrs=entry.getTemplate().getRDNAttributes();      String nullRdn="";      for (      AttributeType att : rdnAttrs) {        if (entry.getValue(att) == null) {          nullRdn=att.getNameOrOID();          break;        }      }      printWrappedText(err,ERR_MAKELDIF_CANNOT_WRITE_ENTRY_WITHOUT_DN.get(nullRdn));      return true;    }    return true;  } catch (  IOException ioe) {    throw ioe;  }catch (  Exception e) {    LocalizableMessage message=ERR_MAKELDIF_CANNOT_WRITE_ENTRY.get(entry.getDN(),stackTraceToSingleLineString(e));    throw new MakeLDIFException(message,e);  }}  }
class C{  public static String toHex(int n){  if (n < 0x10000)   return "<" + toHex4(n) + ">";  n-=0x10000;  int high=n / 0x400 + 0xd800;  int low=n % 0x400 + 0xdc00;  return "[<" + toHex4(high) + toHex4(low)+ ">]";}  }
class C{  public void updatePDPDescriptor(String realm,String entityName,Map attrValues) throws AMConsoleException {  String[] params={realm,entityName,"SAMLv2","XACML PDP"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    SAML2MetaManager saml2Manager=getSAML2MetaManager();    EntityDescriptorElement entityDescriptor=saml2Manager.getEntityDescriptor(realm,entityName);    XACMLPDPDescriptorElement pdpDescriptor=saml2Manager.getPolicyDecisionPointDescriptor(realm,entityName);    if (pdpDescriptor != null) {      List authzServiceList=pdpDescriptor.getXACMLAuthzService();      if (authzServiceList.size() != 0) {        XACMLAuthzServiceElement authzService=(XACMLAuthzServiceElement)authzServiceList.get(0);        authzService.setLocation((String)AMAdminUtils.getValue((Set)attrValues.get(ATTR_XACML_AUTHZ_SERVICE_LOCATION)));      }    }    saml2Manager.setEntityDescriptor(realm,entityDescriptor);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  SAML2MetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","XACML PDP",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public BeanContextServicesSupport(){  this(null,null,false,true);}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public void unfix_selected_items(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  ((StateSelectedItem)interactive_state).unfix_items();}  }
class C{  public void removeRealm(String name) throws Exception {  ObjectName oname=new ObjectName(name);  Container container=getParentContainerFromChild(oname);  container.setRealm(null);}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  public void activateFedStatus(){  this.isActive=true;}  }
class C{  public void testFloatValuePosRounded2(){  byte[] a={-128,1,2,-128,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5474728E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditType createSwitchAuditType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditTypeImpl();}  }
class C{  public Set searchOrganizations(String wildcard,int level) throws AMException, SSOException {  return searchOrganizations(wildcard,null,level);}  }
class C{  Object cloneTimerNotification(){  TimerNotification clone=new TimerNotification(this.getType(),this.getSource(),this.getSequenceNumber(),this.getTimeStamp(),this.getMessage(),notificationID);  clone.setUserData(this.getUserData());  return clone;}  }
class C{  private void updateRecordingState(int recorderState){  mRecordState=recorderState;  refreshRecordingStatus(recorderState);switch (recorderState) {case FmRecorder.STATE_RECORDING:    showToast(getString(R.string.toast_start_recording));  Log.d(TAG,"updateRecordingState:startRecording");mHandler.sendEmptyMessage(FmRadioListener.MSGID_REFRESH);break;case FmRecorder.STATE_PLAYBACK:mHandler.sendEmptyMessage(FmRadioListener.MSGID_REFRESH);break;case FmRecorder.STATE_IDLE:Log.d(TAG,"updateRecordingState:remove message");mHandler.removeMessages(FmRadioListener.MSGID_REFRESH);break;default :mHandler.removeMessages(FmRadioListener.MSGID_REFRESH);break;}}  }
class C{  public void testSet_result_zeroblob() throws Exception, UnsupportedEncodingException {  Stmt st=null;  TestFCZeroBlob testZeroBlobFnc=new TestFCZeroBlob();  byte[] byteVal={(byte)1,(byte)2,(byte)3};  db.exec("create table testBinaryData (binVal BINARY) ;",null);  try {    st=db.prepare("insert into testBinaryData values (?)");    st.bind(1,byteVal);    st.step();    db.create_function("testZeroBlob",0,testZeroBlobFnc);    TableResult res=db.get_table("select testZeroBlob() from testBinaryData");    TableResult res2=db.get_table("select zeroblob(" + testZeroBlobFnc.numBytes + ") from testBinaryData");    String row[]=(String[])res.rows.elementAt(0);    String val=row[0];    assertNotNull(val);    assertEquals(((String[])res2.rows.elementAt(0))[0],val);    assertTrue(testZeroBlobFnc.functionCalled);  }  finally {    db.exec("drop table if exists testBinaryData;",null);  }}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public Vector cross(Vector with){  float x=vals[I2] * with.vals[I3] - vals[I3] * with.vals[I2];  float y=vals[I3] * with.vals[I1] - vals[I1] * with.vals[I3];  float z=vals[I1] * with.vals[I2] - vals[I2] * with.vals[I1];  return new Vector(x,y,z);}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public boolean breaksFlow(){  return breakTag;}  }
class C{  public void addMemberThatOverridesMe(MappedMember overrider){  overridesMe.add(overrider);}  }
class C{  private static void writeLine(Writer writer,String line){  if ((writer != null) && (line != null)) {    try {      writer.write(line);      writer.write(LINE_SEP);    } catch (    Exception ex) {      Debug.log("FileUtils.writeLine() threw exception : ",ex);    }  }}  }
class C{  public void testFloatValuePositive2(){  String a="27467238945723645782";  float result=2.7467239E19f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  private BackupProtos.Widget packWidget(int dpi,ComponentName provider,UserHandleCompat user){  final LauncherAppWidgetProviderInfo info=LauncherModel.getProviderInfo(mContext,provider,user);  BackupProtos.Widget widget=new BackupProtos.Widget();  widget.provider=provider.flattenToShortString();  widget.label=info.label;  widget.configure=info.configure != null;  if (info.icon != 0) {    widget.icon=new BackupProtos.Resource();    Drawable fullResIcon=mIconCache.getFullResIcon(provider.getPackageName(),info.icon);    Bitmap icon=Utilities.createIconBitmap(fullResIcon,mContext);    widget.icon.data=Utilities.flattenBitmap(icon);    widget.icon.dpi=dpi;  }  Point spans=info.getMinSpans(mIdp,mContext);  widget.minSpanX=spans.x;  widget.minSpanY=spans.y;  return widget;}  }
class C{  public LookupOp(LookupTable lookup,RenderingHints hints){  this.ltable=lookup;  this.hints=hints;  numComponents=ltable.getNumComponents();}  }
class C{  public ECPRelayState createECPRelayState(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RELAY_STATE,value);  if (obj == null) {    return new ECPRelayStateImpl(value);  } else {    return (ECPRelayState)obj;  }}  }
class C{  public LeastRecentlyUsed(int maxSize){  super(maxSize * 4 / 3,0.75f,true);  this.maxSize=maxSize;}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public PushbackReader(Reader in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("size <= 0");  }  this.buf=new char[size];  this.pos=size;}  }
class C{  public void testGetSubjectDN(){  if (this.cert == null) {    return;  }  assertEquals("The subject DN is not correct.",tbt_cert.getSubjectDN(),cert.getSubjectDN());}  }
class C{  private boolean inNestedFrameSet(){  FrameSetView parent=(FrameSetView)getParent();  return (parent.getParent() instanceof FrameSetView);}  }
class C{  public static int v(String tag,String msg){  return isPrint && msg != null ? android.util.Log.v(tag,msg) : -1;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  process(request.getRemoteHost(),request,response,chain);}  }
class C{  public SizeFileFilter(long size,boolean acceptLarger){  if (size < 0) {    throw new IllegalArgumentException("The size must be non-negative");  }  this.size=size;  this.acceptLarger=acceptLarger;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);}  }
class C{  public boolean isElementContentWhitespace(){  return false;}  }
class C{  public static String guessDisplayLocaleFromSession(Session in_session){  return localeToString(SessionUtils.guessLocaleFromSession(in_session));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute04.class,args);}  }
class C{  protected FontRenderContext(){  aaHintValue=VALUE_TEXT_ANTIALIAS_DEFAULT;  fmHintValue=VALUE_FRACTIONALMETRICS_DEFAULT;  defaulting=true;}  }
class C{  public Severity severity(){  return this.severity;}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  int len=endIndex - beginIndex;  if (len > m_length)   len=m_length;  if (len <= 0)   return XString.EMPTYSTRING; else {    int start=m_start + beginIndex;    return new XStringForFSB(fsb(),start,len);  }}  }
class C{  public static List<GapicProvider<? extends Object>> defaultCreate(Model model,ApiConfig apiConfig,GapicGeneratorConfig generatorConfig){  ArrayList<GapicProvider<? extends Object>> providers=new ArrayList<>();  String id=generatorConfig.id();  if (id.equals(CLIENT_CONFIG)) {    GapicProvider<? extends Object> provider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new ClientConfigGapicContext(model,apiConfig)).setSnippetSetRunner(new ClientConfigSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("clientconfig/json.snip")).setCodePathMapper(CommonGapicCodePathMapper.defaultInstance()).build();    providers.add(provider);  } else   if (id.equals(CSHARP)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicCodePathMapper pathMapper=CommonGapicCodePathMapper.newBuilder().setPrefix("").setShouldAppendPackage(true).setPackageFilePathNameFormatter(new CSharpNameFormatter()).build();      GapicProvider<? extends Object> mainProvider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new CSharpRenderingUtil())).setModelToViewTransformer(new CSharpGapicClientTransformer(pathMapper)).build();      providers.add(mainProvider);      GapicProvider<? extends Object> snippetProvider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new CSharpRenderingUtil())).setModelToViewTransformer(new CSharpGapicSnippetsTransformer(pathMapper)).build();      providers.add(snippetProvider);    }  } else   if (id.equals(GO)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicProvider<? extends Object> provider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new CommonRenderingUtil())).setModelToViewTransformer(new GoGapicSurfaceTransformer(new PackageNameCodePathMapper())).build();      providers.add(provider);    }  } else   if (id.equals(JAVA)) {    GapicCodePathMapper javaPathMapper=CommonGapicCodePathMapper.newBuilder().setPrefix("src/main/java").setShouldAppendPackage(true).build();    if (generatorConfig.enableSurfaceGenerator()) {      GapicProvider<? extends Object> mainProvider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new JavaRenderingUtil())).setModelToViewTransformer(new JavaGapicSurfaceTransformer(javaPathMapper)).build();      providers.add(mainProvider);    }    if (generatorConfig.enableTestGenerator()) {      GapicCodePathMapper javaTestPathMapper=CommonGapicCodePathMapper.newBuilder().setPrefix("src/test/java").setShouldAppendPackage(true).build();      GapicProvider<? extends Object> testProvider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new CommonRenderingUtil())).setModelToViewTransformer(new JavaGapicSurfaceTestTransformer(javaTestPathMapper)).build();      providers.add(testProvider);    }    return providers;  } else   if (id.equals(NODEJS) || id.equals(NODEJS_DOC)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicCodePathMapper nodeJSPathMapper=new NodeJSCodePathMapper();      GapicProvider<? extends Object> mainProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new NodeJSGapicContext(model,apiConfig)).setSnippetSetRunner(new NodeJSSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("nodejs/main.snip")).setCodePathMapper(nodeJSPathMapper).build();      GapicProvider<? extends Object> clientConfigProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new ClientConfigGapicContext(model,apiConfig)).setSnippetSetRunner(new ClientConfigSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("clientconfig/json.snip")).setCodePathMapper(nodeJSPathMapper).build();      providers.add(mainProvider);      providers.add(clientConfigProvider);      if (id.equals(NODEJS_DOC)) {        GapicProvider<? extends Object> messageProvider=CommonGapicProvider.<ProtoFile>newBuilder().setModel(model).setView(new ProtoFileView()).setContext(new NodeJSGapicContext(model,apiConfig)).setSnippetSetRunner(new NodeJSSnippetSetRunner<ProtoFile>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("nodejs/message.snip")).setCodePathMapper(nodeJSPathMapper).build();        providers.add(messageProvider);      }    }  } else   if (id.equals(PHP)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicCodePathMapper phpPathMapper=PhpGapicCodePathMapper.newBuilder().setPrefix("src").build();      GapicProvider<? extends Object> provider=ViewModelGapicProvider.newBuilder().setModel(model).setApiConfig(apiConfig).setSnippetSetRunner(new CommonSnippetSetRunner(new CommonRenderingUtil())).setModelToViewTransformer(new PhpGapicSurfaceTransformer(apiConfig,phpPathMapper)).build();      GapicCodePathMapper phpClientConfigPathMapper=PhpGapicCodePathMapper.newBuilder().setPrefix("src").setSuffix("resources").build();      GapicProvider<? extends Object> clientConfigProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new ClientConfigGapicContext(model,apiConfig)).setSnippetSetRunner(new ClientConfigSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("clientconfig/json.snip")).setCodePathMapper(phpClientConfigPathMapper).build();      providers.add(provider);      providers.add(clientConfigProvider);    }  } else   if (id.equals(PYTHON) || id.equals(PYTHON_DOC)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicCodePathMapper pythonPathMapper=CommonGapicCodePathMapper.newBuilder().setShouldAppendPackage(true).build();      GapicProvider<? extends Object> mainProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new PythonGapicContext(model,apiConfig)).setSnippetSetRunner(new PythonSnippetSetRunner<>(new PythonInterfaceInitializer(apiConfig),SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("py/main.snip")).setCodePathMapper(pythonPathMapper).build();      GapicProvider<? extends Object> enumProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new PythonGapicContext(model,apiConfig)).setSnippetSetRunner(new PythonSnippetSetRunner<Interface>(new PythonInterfaceInitializer(apiConfig),SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("py/enum.snip")).setCodePathMapper(pythonPathMapper).build();      GapicProvider<? extends Object> clientConfigProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new ClientConfigGapicContext(model,apiConfig)).setSnippetSetRunner(new ClientConfigSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("clientconfig/json.snip")).setCodePathMapper(pythonPathMapper).build();      providers.add(mainProvider);      providers.add(clientConfigProvider);      providers.add(enumProvider);      if (id.equals(PYTHON_DOC)) {        GapicProvider<? extends Object> messageProvider=CommonGapicProvider.<ProtoFile>newBuilder().setModel(model).setView(new ProtoFileView()).setContext(new PythonGapicContext(model,apiConfig)).setSnippetSetRunner(new PythonSnippetSetRunner<>(new PythonProtoFileInitializer(),SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("py/message.snip")).setCodePathMapper(CommonGapicCodePathMapper.defaultInstance()).build();        providers.add(messageProvider);      }    }  } else   if (id.equals(RUBY) || id.equals(RUBY_DOC)) {    if (generatorConfig.enableSurfaceGenerator()) {      GapicCodePathMapper rubyPathMapper=CommonGapicCodePathMapper.newBuilder().setPrefix("lib").setShouldAppendPackage(true).setPackageFilePathNameFormatter(new RubyNameFormatter()).build();      GapicProvider<? extends Object> mainProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new RubyGapicContext(model,apiConfig)).setSnippetSetRunner(new RubySnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("ruby/main.snip")).setCodePathMapper(rubyPathMapper).build();      GapicProvider<? extends Object> clientConfigProvider=CommonGapicProvider.<Interface>newBuilder().setModel(model).setView(new InterfaceView()).setContext(new ClientConfigGapicContext(model,apiConfig)).setSnippetSetRunner(new ClientConfigSnippetSetRunner<Interface>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("clientconfig/json.snip")).setCodePathMapper(rubyPathMapper).build();      providers.add(mainProvider);      providers.add(clientConfigProvider);      if (id.equals(RUBY_DOC)) {        GapicProvider<? extends Object> messageProvider=CommonGapicProvider.<ProtoFile>newBuilder().setModel(model).setView(new ProtoFileView()).setContext(new RubyGapicContext(model,apiConfig)).setSnippetSetRunner(new RubySnippetSetRunner<ProtoFile>(SnippetSetRunner.SNIPPET_RESOURCE_ROOT)).setSnippetFileNames(Arrays.asList("ruby/message.snip")).setCodePathMapper(rubyPathMapper).build();        providers.add(messageProvider);      }    }  } else {    throw new NotImplementedException("GapicProviderFactory: invalid id \"" + id + "\"");  }  if (providers.isEmpty()) {    throw new IllegalArgumentException("No artifacts are enabled.");  }  return providers;}  }
class C{  public com.sun.identity.saml2.jaxb.metadataidpdiscovery.DiscoveryResponseElement createDiscoveryResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataidpdiscovery.impl.DiscoveryResponseElementImpl();}  }
class C{  public int findColumn(String columnName){  for (int i=0; i < getColumnCount(); i++) {    if (columnName.equals(getColumnName(i))) {      return i;    }  }  return -1;}  }
class C{  public int rtf(XPathContext support){  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    result=frag.getDocument();  }  return result;}  }
class C{  public void remove(int childIndex){  TreeStateNode node=(TreeStateNode)getChildAt(childIndex);  node.removeFromMapping();  super.remove(childIndex);}  }
class C{  boolean entryExists(DN dn) throws LdapException {  try {    connection.readEntry(dn,"1.1");    return true;  } catch (  EntryNotFoundException e) {    return false;  }}  }
class C{  public final void testReadbyteArrayintint01() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      assertTrue("retval",dis.read(bArray,0,bArray.length) == MY_MESSAGE_LEN);      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isRestricted() throws SessionException {  return restriction != null;}  }
class C{  public static void main(String[] args){  try {    new MergeProperties(args[0],args[1],args[2]);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean contains(int x,int y){  return contains((double)x,(double)y);}  }
class C{  public boolean isFiltered(String requestUrl,boolean thirdParty){  return isFiltered(requestUrl,thirdParty,EnumSet.of(ContentType.detectContentType(requestUrl)));}  }
class C{  private void displayError(LocalizableMessage msg,LocalizableMessage title){  Utilities.displayError(parent,msg,title);  toFront();}  }
class C{  public float convertToGb(long valInBytes){  return (float)valInBytes / (BYTEFACTOR * BYTEFACTOR * BYTEFACTOR);}  }
class C{  public final void trace(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,null);  }}  }
class C{  public void testGetScope() throws Exception {  Identity i=new IdentityStub("testGetScope");  assertNull(i.getScope());  IdentityScope s=IdentityScope.getSystemScope();  Identity i2=new IdentityStub("testGetScope2",s);  assertSame(s,i2.getScope());}  }
class C{  @Override public void close() throws IOException {  Throwable thrown=null;  try {    flush();  } catch (  Throwable e) {    thrown=e;  }  try {    out.close();  } catch (  Throwable e) {    if (thrown == null) {      thrown=e;    }  }  if (thrown != null) {    SneakyThrow.sneakyThrow(thrown);  }}  }
class C{  public synchronized BukkitTask runTaskAsynchronously(Plugin plugin) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTaskAsynchronously(plugin,(Runnable)this));}  }
class C{  public Enumeration breadthFirstEnumeration(){  return new BreadthFirstEnumeration(this);}  }
class C{  public boolean hasAttribute(String name){  return DTM.NULL != dtm.getAttributeNode(node,null,name);}  }
class C{  public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  public static String formatDateTime(Date date){  return mSimpleDateTimeFormat.format(date);}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public InputMethodHighlight(boolean selected,int state){  this(selected,state,0,null);}  }
class C{  protected void initProperties(Properties properties){  for (Enumeration keys=properties.keys(); keys.hasMoreElements(); ) {    final String key=(String)keys.nextElement();    final Object iobj=s_propKeys.get(key);    if (iobj != null) {      if (iobj instanceof Integer) {        final int BITFLAG=((Integer)iobj).intValue();        if ((properties.getProperty(key).endsWith("yes"))) {          fFeatures=fFeatures | BITFLAG;        } else {          fFeatures=fFeatures & ~BITFLAG;        }      } else {        if ((DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_FORMAT_PRETTY_PRINT).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setIndent(true);            fSerializer.setIndentAmount(3);          } else {            fSerializer.setIndent(false);          }        } else         if ((DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setOmitXMLDeclaration(true);          } else {            fSerializer.setOmitXMLDeclaration(false);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION).equals(key)) {          String version=properties.getProperty(key);          if ("1.1".equals(version)) {            fIsXMLVersion11=true;            fSerializer.setVersion(version);          } else {            fSerializer.setVersion("1.0");          }        } else         if ((DOMConstants.S_XSL_OUTPUT_ENCODING).equals(key)) {          String encoding=properties.getProperty(key);          if (encoding != null) {            fSerializer.setEncoding(encoding);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setDTDEntityExpansion(false);          } else {            fSerializer.setDTDEntityExpansion(true);          }        } else {        }      }    }  }  if (fNewLine != null) {    fSerializer.setOutputProperty(OutputPropertiesFactory.S_KEY_LINE_SEPARATOR,fNewLine);  }}  }
class C{  public static boolean isStaticAttribute(String attributeName){  return attributeName != null && attributeName.startsWith(STATIC_QUOTE) && attributeName.endsWith(STATIC_QUOTE);}  }
class C{  public ManageNameIDResponse createManageNameIDResponse(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_RESPONSE,value);  if (obj == null) {    return new ManageNameIDResponseImpl(value);  } else {    return (ManageNameIDResponse)obj;  }}  }
class C{  public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().removeByUUID_G(uuid,groupId);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public String toString(){  StringBuffer answer=new StringBuffer(attrID + ": ");  if (values.size() == 0) {    answer.append("No values");  } else {    boolean start=true;    for (Enumeration<Object> e=values.elements(); e.hasMoreElements(); ) {      if (!start)       answer.append(", ");      answer.append(e.nextElement());      start=false;    }  }  return answer.toString();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.RequestedAttributeType createRequestedAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.RequestedAttributeTypeImpl();}  }
class C{  public Builder removeName(final String name){  names.remove(name);  return this;}  }
class C{  public static String shortNumber(int number){  if (number >= 1000) {    int hundred=number % 1000 / 100;    if (hundred != 0)     return String.format("%.1f",number / 1000) + "k"; else     return (number / 1000) + "k";  } else   return number + "";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens04.class,args);}  }
class C{  @AfterClass public void cleanUp() throws Exception {  TaskUtils.enableBackend(beID);  TestCaseUtils.deleteDirectory(tempDir);}  }
class C{  public void testClientDialogStates(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    TooManyListenersException e) {      throw new TckInternalError("Failed to register a listener with the RI",e);    }catch (    SipException e) {      throw new TiUnexpectedError("Failed to send initial invite request",e);    }    waitForMessage();    RequestEvent inviteReqEvt=eventCollector.extractCollectedRequestEvent();    if (inviteReqEvt == null || inviteReqEvt.getRequest() == null)     throw new TiUnexpectedError("The TI did not send the initial invite request");    Dialog dialog=tran.getDialog();    assertNull("A dialog passed into the " + dialog.getState() + " state before receiving any response!",dialog.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException e) {      throw new TiUnexpectedError("Failed to register a SipListener with the TI.",e);    }    Response ringing=null;    try {      ringing=riMessageFactory.createResponse(Response.RINGING,inviteReqEvt.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      ringing.setHeader(createRiContact());      riSipProvider.sendResponse(ringing);    } catch (    Exception e) {      throw new TckInternalError("Failed to create and send a RINGING response",e);    }    waitForMessage();    ResponseEvent ringingRespEvt=eventCollector.extractCollectedResponseEvent();    if (ringingRespEvt == null || ringingRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not pass RINGING response to the TU.");    assertEquals("The Dialog did not pass into the early state upon reception of a RINGING response",DialogState.EARLY,dialog.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException e) {      throw new TiUnexpectedError("Failed to register a SipListener with the TI.",e);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,inviteReqEvt.getRequest());      ((ToHeader)ok.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      ok.setHeader(createRiContact());      riSipProvider.sendResponse(ok);    } catch (    Exception e) {      throw new TckInternalError("Failed to create and send a OK response",e);    }    waitForMessage();    ResponseEvent okRespEvt=eventCollector.extractCollectedResponseEvent();    if (okRespEvt == null || okRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not pass OK response to the TU.");    assertEquals("The Dialog did not pass into the CONFIRMED state upon reception of an OK response",DialogState.CONFIRMED,dialog.getState());    Request bye=null;    try {      bye=dialog.createRequest(Request.BYE);      ClientTransaction byeTran=tiSipProvider.getNewClientTransaction(bye);      dialog.sendRequest(byeTran);    } catch (    SipException e) {      throw new TiUnexpectedError("Failed to create and send a BYE request using a dialog.",e);    }    waitForMessage();    tiSipProvider.sendResponse(tiMessageFactory.createResponse(200,bye));    waitForMessage();    assertTrue("The dialog did not pass into a final ( TERMINATED) state after getting OK for a BYE.",DialogState.TERMINATED.equals(dialog.getState()));  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public boolean removeAll(Attribute attribute){  boolean wasModified=false;  for (  ByteString v : attribute) {    wasModified|=remove(v);  }  return wasModified;}  }
class C{  ZoneOffsetTransition(LocalDateTime transition,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.transition=transition;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public static Intent buildBackgroundShortcutIntent(File script,Parcelable iconResource){  Intent intent=new Intent();  intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,buildStartInBackgroundIntent(script));  intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,script.getName());  intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,iconResource);  return intent;}  }
class C{  public SchemaFilesWriter(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  private boolean isIPv6Address(String uriHeader){  String hostName=uriHeader;  int indexOfComma=uriHeader.indexOf(",");  if (indexOfComma != -1) {    hostName=uriHeader.substring(0,indexOfComma);  }  int hostEnd=hostName.indexOf(Lexer.QUESTION);  int semiColonIndex=hostName.indexOf(Lexer.SEMICOLON);  if (hostEnd == -1 || (semiColonIndex != -1 && hostEnd > semiColonIndex))   hostEnd=semiColonIndex;  if (hostEnd == -1)   hostEnd=hostName.length();  String host=hostName.substring(0,hostEnd);  int firstColonIndex=host.indexOf(Lexer.COLON);  if (firstColonIndex == -1)   return false;  int secondColonIndex=host.indexOf(Lexer.COLON,firstColonIndex + 1);  if (secondColonIndex == -1)   return false;  return true;}  }
class C{  public int lineno(){  return LINENO;}  }
class C{  private void writeRecordsToReachFileSize(int blockSize,long sizeInBytes) throws Exception {  final int numberOfValues=(int)sizeInBytes / INT_RECORD_SIZE;  final int[] values=new int[numberOfValues];  for (int i=0; i < numberOfValues; i++) {    values[i]=i + 1;  }  writeRecords(blockSize,records(values));}  }
class C{  public boolean isEnabled(){  return logStatus;}  }
class C{  public void handleTblDataActionGroupHrefRequest(RequestInvocationEvent event){  AgentsModel model=(AgentsModel)getModel();  String idType=getDisplayIDType();  String universalId=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF_GROUP));  setPageSessionAttribute(AgentProfileViewBean.UNIVERSAL_ID,universalId);  SSOToken ssoToken=model.getUserSSOToken();  String realm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  StringTokenizer st=new StringTokenizer(universalId,"=,");  st.nextToken();  String agentGrpName=st.nextToken();  try {    AMIdentity amid=new AMIdentity(ssoToken,agentGrpName,IdType.AGENTGROUP,realm,null);    String vbName=(String)agentViewBeans.get(idType);    if (vbName == null) {      vbName=GENERIC_VIEW_BEAN;    }    Class clazz=Thread.currentThread().getContextClassLoader().loadClass(vbName);    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(clazz);    removePageSessionAttribute(GenericAgentProfileViewBean.PS_TABNAME);    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,model.getAgentType(amid));    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }catch (  ClassNotFoundException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getErrorString(e));    forwardTo();  }}  }
class C{  public ModifyOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,DN entryDN,List<Modification> modifications){  super(clientConnection,operationID,messageID,requestControls);  this.entryDN=entryDN;  this.modifications=modifications;  rawEntryDN=ByteString.valueOfUtf8(entryDN.toString());  rawModifications=new ArrayList<>(modifications.size());  for (  Modification m : modifications) {    rawModifications.add(new LDAPModification(m.getModificationType(),new LDAPAttribute(m.getAttribute())));  }  responseControls=new ArrayList<>();  cancelRequest=null;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement createAssertionIDRefElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionIDRefElementImpl(value);}  }
class C{  public void test_isLenient(){  DateFormat df=DateFormat.getInstance();  Calendar c=df.getCalendar();  if (df.isLenient()) {    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(false);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  } else {    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(true);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  }}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){  foo.setNew(true);  return fooPersistence.update(foo);}  }
class C{  public Task removePendingTask(String taskID) throws DirectoryException {  schedulerLock.lock();  try {    Task t=tasks.get(taskID);    if (t == null) {      LocalizableMessage message=ERR_TASKSCHED_REMOVE_PENDING_NO_SUCH_TASK.get(taskID);      throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,message);    }    if (TaskState.isPending(t.getTaskState())) {      tasks.remove(taskID);      pendingTasks.remove(t);      writeState();      return t;    } else {      LocalizableMessage message=ERR_TASKSCHED_REMOVE_PENDING_NOT_PENDING.get(taskID);      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);    }  }  finally {    schedulerLock.unlock();  }}  }
class C{  void backupEnd(){}  }
class C{  public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  final long now(){  return System.nanoTime();}  }
class C{  public Mp4TagTextNumberField(String id,String numberArray){  super(id,numberArray);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.HelpType createHelpType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.HelpTypeImpl();}  }
class C{  public AMSearchResults searchStaticGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchStaticGroups(wildcard,null,searchControl);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() + right.num());}  }
class C{  private boolean has_colinear(PlaPointInt a_point){  int count=point_alist.size();  if (count < 2)   return false;  for (int index=0; index < count - 1; index++) {    PlaPointInt start=point_alist.get(index);    PlaPointInt end=point_alist.get(index + 1);    if (a_point.side_of(start,end) != PlaSide.COLLINEAR)     continue;    double d_start_p=start.distance_square(a_point);    double d_p_end=a_point.distance_square(end);    double d_start_end=start.distance_square(end);    if (d_start_end >= d_start_p) {      if (d_start_end >= d_p_end) {        return true;      } else {        point_alist.set(index,a_point);        return true;      }    } else {      if (d_start_end >= d_p_end) {        point_alist.set(index + 1,a_point);        return true;      } else {        point_alist.set(index,a_point);        return true;      }    }  }  return false;}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ELEMENT ");    writer.write(name);    writer.write(' ');    writer.write(model);    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  public void testCreateElementNS1() throws Throwable {  Document doc;  Element element;  String namespaceURI="http://www.w3.org/DOM/Test/level2";  String qualifiedName="XML:XML";  String nodeName;  String nsURI;  String localName;  String prefix;  String tagName;  doc=(Document)load("staffNS",builder);  element=doc.createElementNS(namespaceURI,qualifiedName);  nodeName=element.getNodeName();  nsURI=element.getNamespaceURI();  localName=element.getLocalName();  prefix=element.getPrefix();  tagName=element.getTagName();  assertEquals("documentcreateelementNS01_nodeName","XML:XML",nodeName);  assertEquals("documentcreateelementNS01_namespaceURI","http://www.w3.org/DOM/Test/level2",nsURI);  assertEquals("documentcreateelementNS01_localName","XML",localName);  assertEquals("documentcreateelementNS01_prefix","XML",prefix);  assertEquals("documentcreateelementNS01_tagName","XML:XML",tagName);}  }
class C{  @Override protected void toASCII(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCII(ascii,level + 1);    } else {      if (i != 0)       ascii.append(" ");      array[i].toASCII(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  public void invalidateSession(Object session,HttpServletRequest request,HttpServletResponse response) throws SessionException {  debug.message("FedletSessionProvider.invalidateSession called");}  }
class C{  private void removeInvalidServices(Map<ServiceKey,Service> map){  for (Iterator<Map.Entry<ServiceKey,Service>> t=map.entrySet().iterator(); t.hasNext(); ) {    Service s=t.next().getValue();    if (s.isValid() == false) {      t.remove();    }  }}  }
class C{  public UnmodifiableClassException(){  super();}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < (in.length - 1)) {    in[inOff]=(byte)random.nextInt();    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  public static String exportServerInstance(SSOToken ssoToken,String serverName) throws SMSException, SSOException {  String xml=null;  ServiceConfig cfg=getServerConfig(ssoToken,serverName);  if (cfg != null) {    Map map=cfg.getAttributes();    StringBuilder buff=new StringBuilder();    buff.append("<ServerConfiguration>\n");    for (Iterator i=map.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      buff.append("<AttributeValuePair>\n");      buff.append("<Attribute name=\"").append((String)entry.getKey()).append("\" />");      for (Iterator it=((Set)entry.getValue()).iterator(); it.hasNext(); ) {        buff.append("<Value>").append(XMLUtils.escapeSpecialCharacters((String)it.next())).append("</Value>\n");      }      buff.append("</AttributeValuePair>\n");    }    buff.append("</ServerConfiguration>\n");    xml=buff.toString();  }  return xml;}  }
class C{  public UnsupportedParser(String unsupported){  super(unsupported);}  }
class C{  private static void expand(InputStream input,File file) throws IOException {  try (BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(file))){    byte buffer[]=new byte[2048];    while (true) {      int n=input.read(buffer);      if (n <= 0)       break;      output.write(buffer,0,n);    }  } }  }
class C{  public void maybePerformFinishedAnimation(){  if (mAnimationProgress > ANIMATION_PROGRESS_STOPPED) {    return;  }  if (mAnimator != null) {    mAnimator.cancel();  }  setAnimationProgress(ANIMATION_PROGRESS_STARTED);  mAnimator=ObjectAnimator.ofFloat(this,"animationProgress",ANIMATION_PROGRESS_STARTED,ANIMATION_PROGRESS_COMPLETED);  mAnimator.start();}  }
class C{  @Override public void start(){  super.start();  JsonArray quotes=config().getJsonArray("companies");  for (  Object q : quotes) {    JsonObject company=(JsonObject)q;    vertx.deployVerticle(MarketDataVerticle.class.getName(),new DeploymentOptions().setConfig(company));  }  vertx.deployVerticle(RestQuoteAPIVerticle.class.getName(),new DeploymentOptions().setConfig(config()));  publishMessageSource("market-data",ADDRESS,null);  publishHttpEndpoint("quotes","localhost",config().getInteger("http.port",8080),null);}  }
class C{  private int calculatePosition(int spot,int width){  if (spot < BORDER_DRAG_THICKNESS) {    return 0;  }  if (spot < CORNER_DRAG_WIDTH) {    return 1;  }  if (spot >= (width - BORDER_DRAG_THICKNESS)) {    return 4;  }  if (spot >= (width - CORNER_DRAG_WIDTH)) {    return 3;  }  return 2;}  }
class C{  private PersistentObject createObject(AttrSet attrSet,Guid parentGuid,Guid searchGuid) throws UMSException {  String[] attrValues;  DataLayer dataLayer=DataLayer.getInstance();  Attr tempAttr=attrSet.getAttribute(ENTITY_TEMPLATE);  Attr attrAttr=attrSet.getAttribute(ENTITY_NAME);  if (attrAttr == null) {    String msg=i18n.getString(IUMSConstants.BAD_NAMING_ATTR);    throw new UMSException(msg);  }  attrValues=attrAttr.getStringValues();  attrSet=new AttrSet();  for (int k=0; k < attrValues.length; k++) {    String attrName=null;    String attrValue=null;    int index=attrValues[k].indexOf(NAME_TOKEN_DELIM);    if (index < 0) {      String msg=i18n.getString(IUMSConstants.BAD_NAMING_ATTR);      throw new UMSException(msg);    }    attrName=attrValues[k].substring(0,index);    attrValue=attrValues[k].substring(index + 1,attrValues[k].length());    attrSet.add(new Attr(attrName,attrValue));  }  String templateName=tempAttr.getValue();  CreationTemplate ct=_templateMgr.getCreationTemplate(templateName,searchGuid);  PersistentObject pObj=new PersistentObject(ct,attrSet);  String idAttr=pObj.getNamingAttribute();  String idValue=pObj.getAttribute(idAttr).getValue();  Guid childGuid=new Guid(idAttr + "=" + idValue+ ","+ parentGuid.getDn());  String[] attrNames=pObj.getAttributeNames();  AttrSet atts=pObj.getAttributes(attrNames);  try {    dataLayer.addEntry(_principal,childGuid,atts);  } catch (  UMSException umse) {    throw new UMSException(umse.getMessage());  }  UMSObject.getObject(_principal,childGuid);  return pObj;}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequestPseudonymType createRequestPseudonymType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequestPseudonymTypeImpl();}  }
class C{  BufferedReader newReader(File file) throws FileNotFoundException {  return new BufferedReader(new InputStreamReader(new FileInputStream(file),Charset.forName("UTF-8")));}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_extns=this.getNamespace();  m_decl=getElemExtensionDecl(sroot,m_extns);  if (m_decl == null)   sroot.getExtensionNamespacesManager().registerExtension(m_extns);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Thread.sleep(100);      this.sendReInvite(sipProvider);    }    ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public boolean isSource(){  return isSource;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null)     return;    Dialog dialog=serverTransaction.getDialog();    dialog=serverTransaction.getDialog();    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);    dialog.sendRequest(tr);  } catch (  Exception ex) {    ex.printStackTrace();    fail("unexpected exception");  }}  }
class C{  public static boolean processAuthHeader(OkAuthenticator authenticator,int responseCode,RawHeaders responseHeaders,RawHeaders successorRequestHeaders,Proxy proxy,URL url) throws IOException {  String responseField;  String requestField;  if (responseCode == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";    requestField="Authorization";  } else   if (responseCode == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";    requestField="Proxy-Authorization";  } else {    throw new IllegalArgumentException();  }  List<Challenge> challenges=parseChallenges(responseHeaders,responseField);  if (challenges.isEmpty()) {    return false;  }  Credential credential=responseHeaders.getResponseCode() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,url,challenges) : authenticator.authenticate(proxy,url,challenges);  if (credential == null) {    return false;  }  successorRequestHeaders.set(requestField,credential.getHeaderValue());  return true;}  }
class C{  public SipException(String message){  super(message);}  }
class C{  public LoginConfiguration httpRequest(HttpServletRequest httpRequest){  this.httpRequest=httpRequest;  return this;}  }
class C{  public boolean isAbsolute(){  return scheme != null;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subConfigName=getStringOptionValue(IArgument.SUB_CONFIGURATION_NAME);  String realmName=getStringOptionValue(IArgument.REALM_NAME);  String operation=getStringOptionValue(ARGUMENT_OPERATION);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  if ((realmName == null) || (realmName.length() == 0)) {    modifySubConfigRoot(serviceName,subConfigName,attributeValues,operation);  } else {    modifySubConfigToRealm(realmName,serviceName,subConfigName,attributeValues,operation);  }}  }
class C{  protected void removeChildAtModelIndex(int modelIndex,boolean isChildVisible){  FHTreeStateNode childNode=getChildAtModelIndex(modelIndex);  if (childNode != null) {    int row=childNode.getRow();    int index=getIndex(childNode);    childNode.collapse(false);    remove(index);    adjustChildIndexs(index,-1);    childCount--;    if (isChildVisible) {      resetChildrenRowsFrom(row,index,modelIndex);    }  } else {    int maxCounter=getChildCount();    FHTreeStateNode aChild;    for (int counter=0; counter < maxCounter; counter++) {      aChild=(FHTreeStateNode)getChildAt(counter);      if (aChild.childIndex >= modelIndex) {        if (isChildVisible) {          adjustRowBy(-1,counter);          adjustRowCountBy(-1);        }        for (; counter < maxCounter; counter++)         ((FHTreeStateNode)getChildAt(counter)).childIndex--;        childCount--;        return;      }    }    if (isChildVisible) {      adjustRowBy(-1,maxCounter);      adjustRowCountBy(-1);    }    childCount--;  }}  }
class C{  public ShapeTileOctagon(int p_lx,int p_ly,int p_rx,int p_uy,int p_ulx,int p_lrx,int p_llx,int p_urx){  oct_lx=p_lx;  oct_ly=p_ly;  oct_rx=p_rx;  oct_uy=p_uy;  oct_ulx=p_ulx;  oct_lrx=p_lrx;  oct_llx=p_llx;  oct_urx=p_urx;}  }
class C{  private void upgradeApplication(EntitlementConfiguration ec,String appName,String resourceTypeUUID) throws UpgradeException {  try {    UpgradeProgress.reportStart(AUDIT_MODIFIED_APP_UUID_START,appName);    final Application application=ec.getApplication(appName);    application.addAllResourceTypeUuids(Collections.singleton(resourceTypeUUID));    ec.storeApplication(application);    UpgradeProgress.reportEnd(AUDIT_UPGRADE_SUCCESS);  } catch (  EntitlementException ee) {    UpgradeProgress.reportEnd(AUDIT_UPGRADE_FAIL);    throw new UpgradeException("Failed to add resource type uuid to application " + appName,ee);  }}  }
class C{  public synchronized void mouseRelease(int buttons){  checkButtonsArgument(buttons);  peer.mouseRelease(buttons);  afterEvent();}  }
class C{  public ConnectionException(String msg){  super(msg);}  }
class C{  protected final void fireServiceRevoked(BeanContextServiceRevokedEvent bcsre){  Object[] copy;synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServiceRevokedListener)copy[i]).serviceRevoked(bcsre);  }}  }
class C{  public void deleteRules(List<? extends Rule> rules){  for (  Rule rule : rules) {    deleteRule(rule.getDatabaseId());  }}  }
class C{  private void scrollBy(int dist){  if (directionVertical()) {    mRecyclerView.scrollBy(0,dist);  } else {    mRecyclerView.scrollBy(dist,0);  }}  }
class C{  @Override public void close() throws NamingException {}  }
class C{  public JKInvalidUserException(Throwable cause){  super(cause);}  }
class C{  public void afterPropertiesSet(){}  }
class C{  public Object remove(Object key){  checkKey(key);  return map.remove(key);}  }
class C{  public void testCase22(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={1,30,40,56,-1,45};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.mod(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public boolean update(Long eventID,String eventName,Long appID){  if (eventID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (eventName != null) {    args.put(KEY_EVENTNAME,eventName);  }  if (appID != null) {    args.put(KEY_APPID,appID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_EVENTID + "=" + eventID,null) > 0;  }  return false;}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  public static byte[] decodeFromFile(String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    System.err.println("Error decoding from file " + filename);  } finally {    if (null != bis) {      try {        bis.close();      } catch (      Exception e) {      }    }  }  return decodedData;}  }
class C{  public static SQLiteConnectionPool open(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }  SQLiteConnectionPool pool=new SQLiteConnectionPool(configuration);  pool.open();  return pool;}  }
class C{  @Override public StateInteractive complete(){  if (item_to_modify == null) {    return return_state;  }  add_corner_for_snap_angle();  int corner_count=corner_list.size();  boolean construction_succeeded=(corner_count > 2);  ShapeSegments[] new_holes=null;  ShapeSegments new_border=null;  if (construction_succeeded) {    PlaArea obs_area=item_to_modify.get_area();    PlaShape[] old_holes=obs_area.get_holes();    new_border=(ShapeSegments)obs_area.get_border();    if (new_border == null) {      construction_succeeded=false;    } else {      new_holes=new ShapeSegments[old_holes.length + 1];      for (int i=0; i < old_holes.length; ++i) {        new_holes[i]=(ShapeSegments)old_holes[i];        if (new_holes[i] == null) {          construction_succeeded=false;          break;        }      }    }  }  if (construction_succeeded) {    PlaPointIntAlist new_hole_corners=new PlaPointIntAlist(corner_count);    for (    PlaPointInt a_point : corner_list)     new_hole_corners.add(a_point);    new_holes[new_holes.length - 1]=new ShapePolygon(new_hole_corners);    PlaAreaLinear new_obs_area=new PlaAreaLinear(new_border,new_holes);    if (new_obs_area.split_to_convex() == null) {      construction_succeeded=false;    } else {      r_brd.start_notify_observers();      r_brd.generate_snapshot();      r_brd.remove_item(item_to_modify);      r_brd.insert_obstacle(new_obs_area,item_to_modify.get_layer(),item_to_modify.clearance_idx(),board.varie.ItemFixState.UNFIXED);      r_brd.end_notify_observers();    }  }  if (construction_succeeded) {    i_brd.screen_messages.set_status_message(resources.getString("adding_hole_completed"));  } else {    i_brd.screen_messages.set_status_message(resources.getString("adding_hole_failed"));  }  actlog_start_scope(LogfileScope.COMPLETE_SCOPE);  return return_state;}  }
class C{  @Override public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return cipher.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  private void makeBrokerPublishEntries(ReplicationBroker broker,int senderID,int destinationServerID,int requestorID){  RoutableMsg initTargetMessage=new InitializeTargetMsg(baseDN,server2ID,destinationServerID,requestorID,updatedEntries.length,initWindow);  broker.publish(initTargetMessage);  int cnt=0;  for (  String entry : updatedEntries) {    log("Broker will publish 1 entry: bytes:" + entry.length());    EntryMsg entryMsg=new EntryMsg(senderID,destinationServerID,entry.getBytes(),++cnt);    broker.publish(entryMsg);  }  DoneMsg doneMsg=new DoneMsg(senderID,destinationServerID);  broker.publish(doneMsg);  log("Broker " + senderID + " published entries");}  }
class C{  protected void paintVerticalPartOfLeg(Graphics g,Rectangle clipBounds,Insets insets,TreePath path){  if (!paintLines) {    return;  }  int depth=path.getPathCount() - 1;  if (depth == 0 && !getShowsRootHandles() && !isRootVisible()) {    return;  }  int lineX=getRowX(-1,depth + 1);  if (leftToRight) {    lineX=lineX - getRightChildIndent() + insets.left;  } else {    lineX=tree.getWidth() - lineX - insets.right + getRightChildIndent() - 1;  }  int clipLeft=clipBounds.x;  int clipRight=clipBounds.x + (clipBounds.width - 1);  if (lineX >= clipLeft && lineX <= clipRight) {    int clipTop=clipBounds.y;    int clipBottom=clipBounds.y + clipBounds.height;    Rectangle parentBounds=getPathBounds(tree,path);    Rectangle lastChildBounds=getPathBounds(tree,getLastChildPath(path));    if (lastChildBounds == null)     return;    int top;    if (parentBounds == null) {      top=Math.max(insets.top + getVerticalLegBuffer(),clipTop);    } else     top=Math.max(parentBounds.y + parentBounds.height + getVerticalLegBuffer(),clipTop);    if (depth == 0 && !isRootVisible()) {      TreeModel model=getModel();      if (model != null) {        Object root=model.getRoot();        if (model.getChildCount(root) > 0) {          parentBounds=getPathBounds(tree,path.pathByAddingChild(model.getChild(root,0)));          if (parentBounds != null)           top=Math.max(insets.top + getVerticalLegBuffer(),parentBounds.y + parentBounds.height / 2);        }      }    }    int bottom=Math.min(lastChildBounds.y + (lastChildBounds.height / 2),clipBottom);    if (top <= bottom) {      g.setColor(getHashColor());      paintVerticalLine(g,tree,lineX,top,bottom);    }  }}  }
class C{  private void testEntriesInDb() throws Exception {  log("TestEntriesInDb");  short found=0;  for (  String entry : updatedEntries) {    int dns=entry.indexOf("dn: ");    int dne=entry.indexOf(EXAMPLE_DN);    String dn=entry.substring(dns + 4,dne + EXAMPLE_DN.length());    log("Search Entry: " + dn);    DN entryDN=DN.valueOf(dn);    Entry resultEntry=getEntry(entryDN,1000,true);    if (resultEntry == null) {      log("Entry not found <" + dn + ">");    } else {      log("Entry found <" + dn + ">");      found++;    }  }  assertEquals(found,updatedEntries.length," Entries present in DB :" + found + " Expected entries :"+ updatedEntries.length);}  }
class C{  private boolean processOneRequest(Socket socket,InputStream in,OutputStream out) throws IOException, InterruptedException {  RecordedRequest request=readRequest(socket,in,sequenceNumber);  if (request == null) {    return false;  }  requestCount.incrementAndGet();  requestQueue.add(request);  MockResponse response=dispatcher.dispatch(request);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_READING_REQUEST) {    logger.info("Received request: " + request + " and disconnected without responding");    return false;  }  writeResponse(out,response);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {    in.close();    out.close();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {    socket.shutdownInput();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {    socket.shutdownOutput();  }  logger.info("Received request: " + request + " and responded: "+ response);  sequenceNumber++;  return true;}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(elementData,size);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new PropertyPermissionCollection();}  }
class C{  public void startListening(){  logger.message("Entering ConfigChangeListener.startListening()");  this.svcConfigMgr.addListener(this);  logger.message("Exiting ConfigChangeListener.startListening");}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public SocketTimeoutException(String msg){  super(msg);}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  Set<EntitlementSubject> eSubjects=getESubjects();  if ((eSubjects != null) && !eSubjects.isEmpty()) {    for (    EntitlementSubject e : eSubjects) {      SubjectDecision decision=e.evaluate(realm,mgr,subject,resourceName,environment);      if (!decision.isSatisfied()) {        return decision;      }    }  }  return new SubjectDecision(true,Collections.EMPTY_MAP);}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  GraphicsEnvironment.checkHeadless();  s.defaultReadObject();  this.text=(text != null) ? text : "";  select(selectionStart,selectionEnd);  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (textListenerK == key) {      addTextListener((TextListener)(s.readObject()));    } else {      s.readObject();    }  }  enableInputMethodsIfNecessary();}  }
class C{  public ByteStringBuilder(){  this(32);}  }
class C{  public Observable<Void> addProductObservable(Product product){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  addProduct(product,resultHandler.toHandler());  return resultHandler;}  }
class C{  public final StringBuffer format(Object[] arguments,StringBuffer result,FieldPosition pos){  return subformat(arguments,result,pos,null);}  }
class C{  public XACMLAuthzDecisionQuery createXACMLAuthzDecisionQuery(Element elem) throws XACMLException, SAML2Exception {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_QUERY,elem);  if (obj == null) {    return new XACMLAuthzDecisionQueryImpl(elem);  } else {    return (XACMLAuthzDecisionQuery)obj;  }}  }
class C{  @DataProvider(name="escapeSequenceFilters") public Object[][] escapeSequenceFilters(){  final char[] CHAR_NIBBLES={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','A','B','C','D','E','F'};  final byte[] BYTE_NIBBLES={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F};  List<String[]> allParameters=new ArrayList<>();  for (int i=0; i < CHAR_NIBBLES.length; i++) {    char highNibble=CHAR_NIBBLES[i];    byte highByteNibble=BYTE_NIBBLES[i];    for (int j=0; j < CHAR_NIBBLES.length; j++) {      char lowNibble=CHAR_NIBBLES[j];      byte lowByteNibble=BYTE_NIBBLES[j];      String inputChar="\\" + highNibble + lowNibble;      byte byteValue=(byte)((highByteNibble << 4) | lowByteNibble);      String outputChar=getFilterValueForChar(byteValue);      String inputFilter="(sn=" + inputChar + ")";      String outputFilter="(sn=" + outputChar + ")";      allParameters.add(new String[]{inputFilter,outputFilter});      inputFilter="(sn=" + inputChar + "*"+ inputChar+ "*"+ inputChar+ ")";      outputFilter="(sn=" + outputChar + "*"+ outputChar+ "*"+ outputChar+ ")";      allParameters.add(new String[]{inputFilter,outputFilter});      inputFilter="(sn<=" + inputChar + ")";      outputFilter="(sn<=" + outputChar + ")";      allParameters.add(new String[]{inputFilter,outputFilter});      inputFilter="(sn>=" + inputChar + ")";      outputFilter="(sn>=" + outputChar + ")";      allParameters.add(new String[]{inputFilter,outputFilter});      inputFilter="(sn>=" + inputChar + ")";      outputFilter="(sn>=" + outputChar + ")";      allParameters.add(new String[]{inputFilter,outputFilter});      inputFilter="(sn:caseExactMatch:=" + inputChar + ")";      outputFilter="(sn:caseExactMatch:=" + outputChar + ")";      allParameters.add(new String[]{inputFilter,outputFilter});    }  }  return allParameters.toArray(new String[][]{});}  }
class C{  public boolean isEmpty(){  return subpaths.size() == 0;}  }
class C{  public void drawChars(char data[],int offset,int length,int x,int y){  DebugGraphicsInfo info=info();  Font font=graphics.getFont();  if (debugLog()) {    info().log(toShortString() + " Drawing chars at " + new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawChars(data,offset,length,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawChars(data,offset,length,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawChars(data,offset,length,x,y);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  aaccfJohnsonDN=DN.valueOf("uid=aaccf.johnson,dc=example,dc=com");  aaronZimmermanDN=DN.valueOf("uid=aaron.zimmerman,dc=example,dc=com");  albertSmithDN=DN.valueOf("uid=albert.smith,dc=example,dc=com");  albertZimmermanDN=DN.valueOf("uid=albert.zimmerman,dc=example,dc=com");  lowercaseMcGeeDN=DN.valueOf("uid=lowercase.mcgee,dc=example,dc=com");  margaretJonesDN=DN.valueOf("uid=margaret.jones,dc=example,dc=com");  maryJonesDN=DN.valueOf("uid=mary.jones,dc=example,dc=com");  samZweckDN=DN.valueOf("uid=sam.zweck,dc=example,dc=com");  zorroDN=DN.valueOf("uid=zorro,dc=example,dc=com");}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEndElem(name);}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  public StringBuffer(){  super(16);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTableUI();}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  public JToggleButton(String text,Icon icon,boolean selected){  setModel(new ToggleButtonModel());  model.setSelected(selected);  init(text,icon);}  }
class C{  private void generateSerializationFriendlyMethods(){  TypeConvertingMethodAdapter mv=new TypeConvertingMethodAdapter(cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_WRITE_REPLACE,DESCR_METHOD_WRITE_REPLACE,null,null));  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_SERIALIZED_LAMBDA);  mv.visitInsn(DUP);  mv.visitLdcInsn(Type.getType(targetClass));  mv.visitLdcInsn(invokedType.returnType().getName().replace('.','/'));  mv.visitLdcInsn(samMethodName);  mv.visitLdcInsn(samMethodType.toMethodDescriptorString());  mv.visitLdcInsn(implInfo.getReferenceKind());  mv.visitLdcInsn(implInfo.getDeclaringClass().getName().replace('.','/'));  mv.visitLdcInsn(implInfo.getName());  mv.visitLdcInsn(implInfo.getMethodType().toMethodDescriptorString());  mv.visitLdcInsn(instantiatedMethodType.toMethodDescriptorString());  mv.iconst(argDescs.length);  mv.visitTypeInsn(ANEWARRAY,JAVA_LANG_OBJECT);  for (int i=0; i < argDescs.length; i++) {    mv.visitInsn(DUP);    mv.iconst(i);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,lambdaClassName,argNames[i],argDescs[i]);    mv.boxIfTypePrimitive(Type.getType(argDescs[i]));    mv.visitInsn(AASTORE);  }  mv.visitMethodInsn(INVOKESPECIAL,NAME_SERIALIZED_LAMBDA,NAME_CTOR,DESCR_CTOR_SERIALIZED_LAMBDA,false);  mv.visitInsn(ARETURN);  mv.visitMaxs(-1,-1);  mv.visitEnd();}  }
class C{  public void testToString(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  String res=ksPKE.toString();  assertNotNull("toString() returns null",res);}  }
class C{  public void comment(String data) throws SAXException {  m_docIsEmpty=false;  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep,boolean joinNonWordChars,boolean eatWhitespace){  return findWordEnd(line,pos,noWordSep,joinNonWordChars,false,eatWhitespace);}  }
class C{  public static Map<String,Object> params(String key1,Object value1){  return map(key1,value1);}  }
class C{  public FrameBodyWOAF(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public PriorityHeader createPriorityHeader(String priority) throws ParseException {  if (priority == null)   throw new NullPointerException("bad priority arg");  Priority p=new Priority();  p.setPriority(priority);  return p;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens02.class,args);}  }
class C{  public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_First(field2,orderByComparator);}  }
class C{  public JKValidationException(String message){  super(message);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public static boolean hasVaryAll(Response response){  return hasVaryAll(response.headers());}  }
class C{  public void removeResourceLink(String resourceLinkName){  resourceLinkName=ObjectName.unquote(resourceLinkName);  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return;  }  ContextResourceLink resourceLink=nresources.findResourceLink(resourceLinkName);  if (resourceLink == null) {    throw new IllegalArgumentException("Invalid resource Link name '" + resourceLinkName + "'");  }  nresources.removeResourceLink(resourceLinkName);}  }
class C{  public void testCertStore06() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {  if (!initParams()) {    return;  }  String provider=null;  for (int i=0; i < dValid.length; i++) {    try {      CertStore.getInstance(dValid[i],dParams,provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertStore.getInstance(dValid[i],dParams,"");      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public LoggingSessionOutputBuffer(final SessionOutputBuffer out,final Wire wire){  super();  this.out=out;  this.wire=wire;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public Builder superiorObjectClasses(final Collection<String> objectClassNamesOrOIDs){  this.superiorClasses.addAll(objectClassNamesOrOIDs);  return this;}  }
class C{  @Override public ErrorPage findErrorPage(int errorCode){  return statusPages.get(Integer.valueOf(errorCode));}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec02(){  try {    new RSAMultiPrimePrivateCrtKeySpec(null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public void start(){  if (session == null) {    status=NEED_UNWRAP;    return;  }  if (clientHello != null && this.status != FINISHED) {    return;  }  sendHelloRequest();  status=NEED_UNWRAP;}  }
class C{  public static void mergeSimpleFields(Object targetValues,Object defaultValues){  Class<?> tc=targetValues.getClass();  Class<?> sc=defaultValues.getClass();  for (  Method targetGetMethod : tc.getMethods()) {    if (!targetGetMethod.getName().startsWith("get"))     continue;    Class<?> fieldType=targetGetMethod.getReturnType();    if (!SIMPLE_FIELD_TYPES.contains(fieldType))     continue;    String fieldName=targetGetMethod.getName().substring(3);    Method withMethod=null;    try {      withMethod=tc.getMethod("with" + fieldName,fieldType);    } catch (    NoSuchMethodException e) {      try {        withMethod=tc.getMethod("set" + fieldName,fieldType);      } catch (      NoSuchMethodException e2) {        continue;      }    }    Method sourceGetMethod=null;    try {      sourceGetMethod=sc.getMethod("get" + fieldName);    } catch (    NoSuchMethodException e) {      continue;    }    try {      if (targetGetMethod.invoke(targetValues) == null) {        withMethod.invoke(targetValues,sourceGetMethod.invoke(defaultValues));      }    } catch (    IllegalAccessException e) {      throw new RuntimeException(e);    }catch (    InvocationTargetException e) {      throw new RuntimeException(e.getCause());    }  }}  }
class C{  public static ResourceException adapt(Exception ex){  Reject.ifNull(ex);  short resourceResultCode;  try {    throw ex;  } catch (  ResourceException e) {    return e;  }catch (  JsonValueException e) {    resourceResultCode=400;  }catch (  ScriptThrownException e) {    return e.toResourceException(500,e.getMessage());  }catch (  Exception e) {    resourceResultCode=500;  }  return newResourceException(resourceResultCode,ex.getMessage(),ex);}  }
class C{  public boolean accept(String fileName,String firstLine){  return accept(null,fileName,firstLine);}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return ics.contains(ic);}  }
class C{  public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().removeByUUID_G(uuid,groupId);}  }
class C{  public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_Last(field2,orderByComparator);}  }
class C{  @Override public boolean accept(File dir,String name){  if (new File(dir,name).isDirectory()) {    return false;  }  String initialFileName=file.getName();  if (name.length() != initialFileName.length() + 16) {    return false;  }  int pos;  for (pos=0; pos < initialFileName.length(); pos++) {    if (name.charAt(pos) != initialFileName.charAt(pos)) {      return false;    }  }  if (name.charAt(pos) != '.') {    return false;  }  char c;  for (pos++; pos < name.length() - 1; pos++) {    c=name.charAt(pos);    if (c < 48 || c > 57) {      return false;    }  }  return name.charAt(pos) == 'Z';}  }
class C{  @Override public boolean accept(ClusterMessage msg){  return (msg instanceof FileMessage) || (msg instanceof UndeployMessage);}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  private void nextClicked(){  final WizardStep cStep=getCurrentStep();  application.nextClicked(cStep,this);  BackgroundTask<?> worker=new NextClickedBackgroundTask(cStep);  getDialog().workerStarted();  worker.startBackgroundTask();}  }
class C{  @Override public List<Foo> findByUuid(String uuid){  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public void showActivity(Context context,String type){  String activityName=mTypeActivityNameMap.get(type);  if (activityName != null) {    Intent intent=new Intent();    intent.setClassName(context,activityName);    if (!(context instanceof Activity)) {      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    }    context.startActivity(intent);  }}  }
class C{  public void handleDeleteError(RetentionPolicy retentionPolicy,Throwable ex){  LocalizableMessage msg=ERR_LOGGER_ERROR_ENFORCING_RETENTION_POLICY.get(retentionPolicy,publisherConfigDN,stackTraceToSingleLineString(ex));  System.err.println(msg);}  }
class C{  public SAAJResult(SOAPElement rootNode){  super(rootNode);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("class");  streetAttr=testEmployee.setAttributeNode(newAttribute);  assertNotNull("previousAttrNotNull",streetAttr);  value=streetAttr.getValue();  assertEquals("previousAttrValue","No",value);}  }
class C{  static void validate(ActionSchema as,Set values) throws InvalidNameException {  if (!validateType(as,values) || !validateSyntax(as,values)) {    PolicyManager.debug.error("In validate action name: invalid values");    throw (new InvalidNameException(ResBundleUtils.rbName,"invalid_action_value",null,as.getName(),PolicyException.POLICY));  }}  }
class C{  public JobWrapper(Map<String,Object> map){  serialized=(String)map.get("serialized");  key=(String)map.get("key");  paused=(Boolean)map.get("paused");  revision=(String)map.get("_rev");}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength(java.math.BigInteger value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl(value);}  }
class C{  public void test_setByteLjava_lang_ObjectIB(){  byte[] x={0};  boolean thrown=false;  try {    Array.setByte(x,0,(byte)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getByte(x,0));  try {    Array.setByte(new Object(),0,(byte)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setByte(x,4,(byte)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setByte(null,0,(byte)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementempty.class,args);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssRelV20Token11Element createWssRelV20Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssRelV20Token11ElementImpl();}  }
class C{  private JobService removeBadJob(long id,String jobType,Handler<AsyncResult<Void>> handler){  String zid=RedisHelper.createFIFO(id);  client.transaction().multi(null).del(RedisHelper.getKey("job:" + id + ":log"),null).del(RedisHelper.getKey("job:" + id),null).zrem(RedisHelper.getKey("jobs:INACTIVE"),zid,null).zrem(RedisHelper.getKey("jobs:ACTIVE"),zid,null).zrem(RedisHelper.getKey("jobs:COMPLETE"),zid,null).zrem(RedisHelper.getKey("jobs:FAILED"),zid,null).zrem(RedisHelper.getKey("jobs:DELAYED"),zid,null).zrem(RedisHelper.getKey("jobs"),zid,null).zrem(RedisHelper.getKey("jobs:" + jobType + ":INACTIVE"),zid,null).zrem(RedisHelper.getKey("jobs:" + jobType + ":ACTIVE"),zid,null).zrem(RedisHelper.getKey("jobs:" + jobType + ":COMPLETE"),zid,null).zrem(RedisHelper.getKey("jobs:" + jobType + ":FAILED"),zid,null).zrem(RedisHelper.getKey("jobs:" + jobType + ":DELAYED"),zid,null).exec(null);  return this;}  }
class C{  private float drawRun(Canvas c,int start,int limit,boolean runIsRtl,float x,int top,int y,int bottom,boolean needWidth){  if ((mDir == Layout.DIR_LEFT_TO_RIGHT) == runIsRtl) {    float w=-measureRun(start,limit,limit,runIsRtl,null);    handleRun(start,limit,limit,runIsRtl,c,x + w,top,y,bottom,null,false);    return w;  }  return handleRun(start,limit,limit,runIsRtl,c,x,top,y,bottom,null,needWidth);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element1;  Element element2;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staffNS",true);  element1=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  element2=doc.createElementNS("http://www.w3.org/DOM/Test","elem2");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr");  newAttribute=element1.setAttributeNodeNS(attribute);{    boolean success=false;    try {      newAttribute=element2.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("elementsetattributenodens04",success);  }}  }
class C{  public ReversedLinesFileReader(final File file) throws IOException {  this(file,4096,Charset.defaultCharset().toString());}  }
class C{  public JobAttributes(JobAttributes obj){  set(obj);}  }
class C{  @Override public String encodeURL(String url){  return this._getHttpServletResponse().encodeURL(url);}  }
class C{  public OctetStreamData(InputStream octetStream,String uri,String mimeType){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;  this.uri=uri;  this.mimeType=mimeType;}  }
class C{  public AnyHolder(){}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static Map<String,Object> javaScriptObjectToMap(NativeObject nativeObj){  if (nativeObj == null) {    return null;  }  final Map<String,Object> toReturn=new HashMap<String,Object>(nativeObj.getIds().length);  for (  Object key : nativeObj.getIds()) {    final Object value;    if (key instanceof String) {      value=nativeObj.get((String)key,nativeObj);    } else     if (key instanceof Integer) {      value=nativeObj.get(((Integer)key).intValue(),nativeObj);    } else {      throw new IllegalArgumentException("Invalid JavaScript object representation.");    }    if (value != null) {      toReturn.put(key.toString(),value);    }  }  return toReturn;}  }
class C{  public Observable<Response<T,String>> usingGallery(){  return applicationComponent.gallery().pickImage();}  }
class C{  public TransactionDoesNotExistException(String message){  super(message);}  }
class C{  public void componentHidden(ComponentEvent e){}  }
class C{  public static Map reverseStringMap(Map map){  Map mapReverse=Collections.EMPTY_MAP;  if ((map != null) && !map.isEmpty()) {    mapReverse=new HashMap(map.size() * 2);    for (Iterator iter=map.keySet().iterator(); iter.hasNext(); ) {      String key=(String)iter.next();      mapReverse.put(map.get(key),key);    }  }  return mapReverse;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.UserInteractionHeaderType createUserInteractionHeaderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.UserInteractionHeaderTypeImpl();}  }
class C{  private static Throwable extractException(Exception ex){  if (ex instanceof UnableToTakeScreenshotException) {    return ex.getCause();  }  return ex;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public BadBinaryOpValueExpException(ValueExp exp){  this.exp=exp;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void stop(){  if (stopHelper()) {    Thread.currentThread().stop();  }}  }
class C{  public static IOFileFilter prefixFileFilter(String prefix,IOCase caseSensitivity){  return new PrefixFileFilter(prefix,caseSensitivity);}  }
class C{  public static void addSystemResource(File jarFile) throws IOException {  try (InputStream is=new FileInputStream(jarFile)){    Manifest manifest=getManifest(is);    if (manifest != null) {      ManifestResource mre=new ManifestResource(jarFile.getAbsolutePath(),manifest,ManifestResource.SYSTEM);      containerManifestResources.add(mre);    }  } }  }
class C{  public void join(PlaPointFloat p_point,int p_layer){  if (p_layer < 0 || p_layer >= octa_arr.length)   return;  OctagonMutable curr=octa_arr[p_layer];  curr.join(p_point);  area_cleared=false;}  }
class C{  ResponseProviders(){}  }
class C{  private String parseQuotedToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  boolean quoted=false;  boolean charEscaped=false;  while (hasChar()) {    ch=chars[pos];    if (!quoted && isOneOf(ch,terminators)) {      break;    }    if (!charEscaped && ch == '"') {      quoted=!quoted;    }    charEscaped=(!charEscaped && ch == '\\');    i2++;    pos++;  }  return getToken(true);}  }
class C{  public static ArgumentException unableToReadBindPasswordInteractively(){  LocalizableMessage message=ERR_DSCFG_ERROR_BIND_PASSWORD_NONINTERACTIVE.get();  return new ArgumentException(message);}  }
class C{  public void deleteAssignableDynamicGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMAssignableDynamicGroup group=new AMAssignableDynamicGroupImpl(token,groupDN);    group.delete();  }}  }
class C{  public static String applyWarningBackgroundToHtml(String html){  return DIV_OPEN_WARNING_BACKGROUND + html + DIV_CLOSE;}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public RespectBindingFeature(boolean enabled){  this.enabled=enabled;}  }
class C{  public void replaceCreationTemplate(CreationTemplate template,Guid orgGuid) throws UMSException {  if (template == null) {    return;  }  String templateName=template.getName();  if (templateName == null) {    String msg=i18n.getString(IUMSConstants.MISSING_TEMPL_NAME);    throw new IllegalArgumentException(msg);  }  AttrSet attrSet=toAttrSet(template);  try {    m_configManager.replaceCreationTemplate(orgGuid,templateName,attrSet);  } catch (  ConfigManagerException e) {    throw new UMSException(e.getMessage());  }}  }
class C{  public void test_setIntLjava_lang_ObjectI() throws Exception {  TestField x=new TestField();  Field f=null;  int val=0;  try {    f=x.getClass().getDeclaredField("intField");    f.setInt(x,Integer.MIN_VALUE);    val=f.getInt(x);  } catch (  Exception e) {    fail("Exception during setInteger test: " + e.toString());  }  assertEquals("Returned incorrect int field value",Integer.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setInt(x,Integer.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("intPFField");    assertFalse(f.isAccessible());    f.setInt(x,Integer.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("intField");    f.setInt(null,Integer.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("intSField");  f.setInt(null,Integer.MIN_VALUE);  val=f.getInt(x);  assertEquals("Returned incorrect int field value",Integer.MIN_VALUE,val);}  }
class C{  private void newClientWithFirstChanges() throws Exception {  debugInfo("Starting newClientWithFirstChanges");  ServerState state=newServerState(firstCSNServer1,firstCSNServer2);  newClientWithChanges(state,secondCSNServer1);  debugInfo("Ending newClientWithFirstChanges");}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  private static void logEncodingMessageError(String messageType,DN entryDN,Exception exception){  logger.traceException(exception);  logger.error(LocalizableMessage.raw("An exception was encountered while trying to encode a replication " + messageType + " message for entry \""+ entryDN+ "\" into an External Change Log entry: "+ exception.getMessage()));}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s12_linear_with_RC_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementType createAuthenticationContextStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementTypeImpl();}  }
class C{  @Override public int process(Callback[] callbacks,int state) throws LoginException {  return authLoginModule.process(callbacks,state);}  }
class C{  private Object doCall(Invoker invoker,Object receiver,String method,Object... args) throws Throwable {  return filterReturnValue(invoker.call(receiver,method,filterArgs(args)));}  }
class C{  private boolean skipAccessCheck(Entry e){  return ClientConnection.hasPrivilege(e,Privilege.BYPASS_ACL);}  }
class C{  private static String bytesToHex(byte[] bytes){  final char[] HEX_ARRAY="0123456789ABCDEF".toCharArray();  char[] hex=new char[bytes.length * 2];  for (int index=0; index < bytes.length; index++) {    int value=bytes[index] & 0xFF;    hex[index * 2]=HEX_ARRAY[value >>> 4];    hex[index * 2 + 1]=HEX_ARRAY[value & 0x0F];  }  String result=new String(hex);  return result.replaceAll("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})","$1-$2-$3-$4-$5");}  }
class C{  public final boolean hasChildren(){  return !children.isEmpty();}  }
class C{  private void uninstallPasswordStorageScheme(DN configEntryDN){  PasswordStorageScheme scheme=storageSchemes.remove(configEntryDN);  if (scheme != null) {    DirectoryServer.deregisterPasswordStorageScheme(configEntryDN);    scheme.finalizePasswordStorageScheme();  }}  }
class C{  public void addFirst(E e){  linkFirst(e);}  }
class C{  private void updateResourceTypesPaths(final HttpServletRequest request,final IConfiguration conf) throws Exception {  String baseFolder=getBaseFolder(conf,request);  baseFolder=conf.getThumbsDir().replace(Constants.BASE_DIR_PLACEHOLDER,baseFolder);  baseFolder=PathUtils.escape(baseFolder);  baseFolder=PathUtils.removeSlashFromEnd(baseFolder);  File file=new File(FileUtils.getFullPath(baseFolder));  if (!file.exists() && !request.getParameter("command").equals("Init")) {    FileUtils.mkdir(file,conf);  }  conf.setThumbsPath(file.getAbsolutePath());  String thumbUrl=conf.getThumbsURL();  thumbUrl=thumbUrl.replaceAll(Constants.BASE_URL_PLACEHOLDER,conf.getBasePathBuilder().getBaseUrl(request));  conf.setThumbsURL(PathUtils.escape(thumbUrl));  for (  ResourceType item : conf.getTypes().values()) {    baseFolder=getBaseFolder(conf,request);    baseFolder=item.getPath().replace(Constants.BASE_DIR_PLACEHOLDER,baseFolder);    baseFolder=PathUtils.escape(baseFolder);    baseFolder=PathUtils.removeSlashFromEnd(baseFolder);    file=new File(FileUtils.getFullPath(baseFolder));    if (!file.exists() && !request.getParameter("command").equals("Init")) {      FileUtils.mkdir(file,conf);    }    item.setPath(file.getAbsolutePath());    String url=item.getUrl();    url=url.replaceAll(Constants.BASE_URL_PLACEHOLDER,conf.getBasePathBuilder().getBaseUrl(request));    url=PathUtils.escape(url);    url=PathUtils.removeSlashFromEnd(url);    item.setUrl(url);  }}  }
class C{  protected String[] scanFiles(String... patterns){  String buildOutputDir=project.getBuild().getOutputDirectory();  if (buildOutputDir != null && new File(buildOutputDir).exists()) {    DirectoryScanner directoryScanner=new DirectoryScanner();    directoryScanner.setBasedir(buildOutputDir);    directoryScanner.setIncludes(patterns);    directoryScanner.scan();    return directoryScanner.getIncludedFiles();  } else {    return new String[0];  }}  }
class C{  private void reStart(Session failingSession,boolean infiniteTry){  if (failingSession != null) {    failingSession.close();    numLostConnections++;  }  ConnectedRS rs=connectedRS.get();  if (failingSession == rs.session && !rs.equals(ConnectedRS.noConnectedRS())) {    rs=setConnectedRS(ConnectedRS.noConnectedRS());  }  while (true) {synchronized (startStopLock) {      if (rs.isConnected() || shutdown) {        break;      }      try {        connectAsDataServer();        rs=connectedRS.get();      } catch (      Exception e) {        logger.error(NOTE_EXCEPTION_RESTARTING_SESSION,getBaseDN(),e.getLocalizedMessage() + " " + stackTraceToSingleLineString(e));      }      if (rs.isConnected() || !infiniteTry) {        break;      }    }    try {      Thread.sleep(500);    } catch (    InterruptedException ignored) {    }  }  if (logger.isTraceEnabled()) {    debugInfo("end restart : connected=" + rs.isConnected() + " with RS("+ rs.getServerId()+ ") genId="+ getGenerationID());  }}  }
class C{  @Override public void removeExecutor(Executor ex){synchronized (executors) {    if (executors.remove(ex) && getState().isAvailable()) {      try {        ex.stop();      } catch (      LifecycleException e) {        log.error("Executor.stop",e);      }    }  }}  }
class C{  private void processAddModification(Attribute attr) throws DirectoryException {  AttributeDescription attrDesc=attr.getAttributeDescription();  if (attr.isEmpty()) {    throw newDirectoryException(currentEntry,ResultCode.PROTOCOL_ERROR,ERR_MODIFY_ADD_NO_VALUES.get(entryDN,attrDesc));  }  if (mustCheckSchema()) {    checkSchema(attr,ERR_MODIFY_ADD_INVALID_SYNTAX,ERR_MODIFY_ADD_INVALID_SYNTAX_NO_VALUE);  }  if (attrDesc.getAttributeType().isObjectClass()) {    validateObjectClasses(attr);  }  List<ByteString> duplicateValues=new LinkedList<>();  modifiedEntry.addAttribute(attr,duplicateValues);  if (!duplicateValues.isEmpty() && !permissiveModify) {    String duplicateValuesStr=Utils.joinAsString(", ",duplicateValues);    throw newDirectoryException(currentEntry,ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,ERR_MODIFY_ADD_DUPLICATE_VALUE.get(entryDN,attrDesc,duplicateValuesStr));  }}  }
class C{  public boolean doStatistics(){  return doProcessingStats;}  }
class C{  public boolean isDisallowUnsafeCharacters(){  return this.disallowUnsafeCharacters;}  }
class C{  public FrameBodyTCMP(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public double signed_distance(PlaPointFloat p_point){  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  double det=dy * (p_point.v_x - point_a.v_x) - dx * (p_point.v_y - point_a.v_y);  double length=Math.sqrt(dx * dx + dy * dy);  return det / length;}  }
class C{  public void testMD5(){  Digest oldDigest=new MD5Digest();  Digest newDigest=new OpenSSLDigest.MD5();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws PAOSException {  validateData();  StringBuffer xml=new StringBuffer(300);  xml.append("<");  if (includeNSPrefix) {    xml.append(PAOSConstants.PAOS_PREFIX).append(":");  }  xml.append(PAOSConstants.REQUEST);  if (declareNS) {    xml.append(" xmlns:").append(PAOSConstants.PAOS_PREFIX).append("=\"").append(PAOSConstants.PAOS_NAMESPACE).append("\" xmlns:").append(PAOSConstants.SOAP_ENV_PREFIX).append("=\"").append(PAOSConstants.SOAP_ENV_NAMESPACE).append("\"");  }  xml.append(" ").append(PAOSConstants.RESPONSE_CONSUMER_URL).append("=\"").append(responseConsumerURL).append("\"").append(" ").append(PAOSConstants.SERVICE).append("=\"").append(service).append("\"");  if (messageID != null) {    xml.append(" ").append(PAOSConstants.MESSAGE_ID).append("=\"").append(messageID).append("\"");  }  xml.append(" ").append(PAOSConstants.SOAP_ENV_PREFIX).append(":").append(PAOSConstants.MUST_UNDERSTAND).append("=\"").append(mustUnderstand.toString()).append("\"").append(" ").append(PAOSConstants.SOAP_ENV_PREFIX).append(":").append(PAOSConstants.ACTOR).append("=\"").append(actor).append("\"></");  if (includeNSPrefix) {    xml.append(PAOSConstants.PAOS_PREFIX).append(":");  }  xml.append(PAOSConstants.REQUEST).append(">");  return xml.toString();}  }
class C{  public static void createServerInstance(SSOToken ssoToken,String instanceName,Set values,String serverConfigXML) throws SMSException, SSOException, ConfigurationException, UnknownPropertyNameException {  ServiceConfig sc=getRootServerConfigWithRetry(ssoToken);  if (sc != null) {    String serverId=getNextId(ssoToken);    createServerInstance(ssoToken,instanceName,serverId,values,serverConfigXML);  }}  }
class C{  public void clear(){  Node<K,V>[] tab;  modCount++;  if ((tab=table) != null && size > 0) {    size=0;    for (int i=0; i < tab.length; ++i)     tab[i]=null;  }}  }
class C{  private static String makeGroupLdif(String dn,String... members){  StringBuilder ldif=new StringBuilder();  ldif.append("dn: " + dn).append(EOL);  ldif.append("objectclass: groupOfNames").append(EOL);  ldif.append("objectclass: top").append(EOL);  for (  String member : members) {    ldif.append("member: " + member).append(EOL);  }  ldif.append(EOL);  return ldif.toString();}  }
class C{  public void performPostDelete(ServerManagedObject<?> managedObject) throws ConfigException {}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.elementDecl(name,model);}  }
class C{  public static int main(String[] args,OutputStream outStream,OutputStream errStream){  disableLogging();  final DSConfig app=new DSConfig(outStream,errStream);  app.sessionStartTime=System.currentTimeMillis();  if (!ConfigurationFramework.getInstance().isInitialized()) {    try {      ConfigurationFramework.getInstance().initialize();    } catch (    ConfigException e) {      app.errPrintln(e.getMessageObject());      return ReturnCode.ERROR_INITIALIZING_SERVER.get();    }  }  return app.run(args);}  }
class C{  public PdfCanvas(PdfStream contentStream,PdfResources resources,PdfDocument document){  this.contentStream=contentStream;  this.resources=resources;  this.document=document;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType createEncryptionMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl();}  }
class C{  public ProxySubject(NameIdentifier nameIdentifier) throws SAMLException {  super(nameIdentifier);}  }
class C{  private void updateCache(SSOToken token,String dn,Map stringAttributes,Map byteAttributes) throws SSOException {  String key=LDAPUtils.formatToRFC(dn);  CacheBlock cb=(CacheBlock)sdkCache.get(key);  if (cb != null && !cb.hasExpiredAndUpdated() && cb.isExists()) {    String pDN=MiscUtils.getPrincipalDN(token);    cb.replaceAttributes(pDN,stringAttributes,byteAttributes);  }}  }
class C{  public boolean isFailure(final int exitValue){  if (this.exitValues == null) {    return false;  } else   if (this.exitValues.length == 0) {    return this.launcher.isFailure(exitValue);  } else {    for (int i=0; i < this.exitValues.length; i++) {      if (this.exitValues[i] == exitValue) {        return false;      }    }  }  return true;}  }
class C{  public PdfNull(){  super();}  }
class C{  public void load(URL url) throws IOException, ClassNotFoundException {  addURL(url);}  }
class C{  public PolicyReferralAddViewBean(){  super("PolicyReferralAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  return view.modelToView(p0,b0,p1,b1,a);}  }
class C{  public String next(Pattern pattern){  checkOpen();  checkNotNull(pattern);  matchSuccessful=false;  saveCurrentStatus();  if (!setTokenRegion()) {    recoverPreviousStatus();    throw new NoSuchElementException();  }  matcher.usePattern(pattern);  if (!matcher.matches()) {    recoverPreviousStatus();    throw new InputMismatchException();  }  matchSuccessful=true;  return matcher.group();}  }
class C{  public void testConstrStringWithExponentWithoutPoint5(){  String a="238768787678287E214";  int aScale=-214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNumber makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfNumber)super.makeIndirect(document,reference);}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  Set propertyNames=(Set)getPageSessionAttribute(PG_ATTR_PROPERTY_NAMES);  populatePropertyNameTableModel(propertyNames);}  }
class C{  protected void paintThumb(SynthContext context,Graphics g,Rectangle thumbBounds){  int orientation=slider.getOrientation();  SynthLookAndFeel.updateSubregion(context,g,thumbBounds);  context.getPainter().paintSliderThumbBackground(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);  context.getPainter().paintSliderThumbBorder(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public final Node peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public Object[] calculateIndex(CompositeData value){  checkValueType(value);  return internalCalculateIndex(value).toArray();}  }
class C{  public static TemplateFactory newInstance(Context context){  return new TemplateFactory(context);}  }
class C{  @SuppressWarnings("unused") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i],defaultProviderName);    assertNotNull("Not SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());    assertEquals("Invalid provider",defaultProvider,sslContext.getProvider());  }}  }
class C{  public boolean isBuffered(){  return buffered;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  titleAttr.setValue("Tomorrow");  firstChild.setNodeValue("impl reused node");  value=titleAttr.getValue();  assertEquals("attrValue","Tomorrow",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Tomorrow",value);  firstChild=titleAttr.getLastChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Tomorrow",value);  otherChild=firstChild.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);}  }
class C{  public void createBackend(ConnectionWrapper conn,String backendName,Set<DN> baseDNs,ManagedObjectDefinition<? extends BackendCfgClient,? extends BackendCfg> backendType) throws ApplicationException {  try {    RootCfgClient root=conn.getRootConfiguration();    BackendCfgClient backend=root.createBackend(backendType,backendName,null);    backend.setEnabled(true);    backend.setBaseDN(baseDNs);    backend.setBackendId(backendName);    backend.setWritabilityMode(BackendCfgDefn.WritabilityMode.ENABLED);    backend.commit();  } catch (  Throwable t) {    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,INFO_ERROR_CONFIGURING_REMOTE_GENERIC.get(conn.getHostPort(),t),t);  }}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=getInsets();  if (contentPane != null) {    rd=contentPane.getPreferredSize();  } else {    rd=parent.getSize();  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getPreferredSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public LDIFChangeRecordReader(final String... ldifLines){  super(Arrays.asList(ldifLines));}  }
class C{  public static Pose toOpenGLPose(TangoPoseData tangoPose){  Matrix4 startServiceTDevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglWorldTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTDevice);  return matrixToPose(openglWorldTDevice);}  }
class C{  private static void initializeJSSE() throws Exception {  Provider provider=Security.getProvider("SunJSSE");  if (provider != null) {    Security.removeProvider("SunJSSE");    Security.insertProviderAt(provider,1);  }  String algorithm=SystemPropertiesManager.get(SOAP_TRUST_SECMNGR_ALGO_PROP);  if (algorithm == null || algorithm.length() <= 0) {    algorithm="SunX509";  }  JKSKeyProvider jkskp=createKeyProvider();  KeyStore trustStore=jkskp.getKeyStore();  KeyManagerFactory kf=KeyManagerFactory.getInstance(algorithm);  kf.init(trustStore,jkskp.getPrivateKeyPass().toCharArray());  kms=kf.getKeyManagers();  defaultX509km=(X509KeyManager)kms[0];  defineTrustManager(trustStore,algorithm);}  }
class C{  Promise<URI,DiscoveryException> performOpenIdIssuerDiscovery(final Context context,final AccountIdentifier account){  return discoveryHandler.handle(context,buildWebFingerRequest(account)).then(extractWellKnownUri(),Responses.<URI,DiscoveryException>noopExceptionFunction());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) Dictionary mapToDict(Map properties) throws IOException {  if (properties instanceof Dictionary) {    return (Dictionary)properties;  } else {    Hashtable converted=new Hashtable();    for (    Object entry : properties.keySet()) {      Object key=entry;      Object value=properties.get(entry);      if (entry instanceof String) {        key=fromEscapedKey((String)entry);      }      if (value instanceof List) {        List listToInspect=(List)value;        if (listToInspect.contains(OPENIDM_ORIG_ARRAY)) {          listToInspect.remove(OPENIDM_ORIG_ARRAY);          String typeListItem=null;          for (          Object listItem : listToInspect) {            if (listItem instanceof String && ((String)listItem).startsWith(OPENIDM_ORIG_ARRAY_TYPE)) {              typeListItem=(String)listItem;            }          }          if (typeListItem == null) {            throw new IOException("Found list containing " + OPENIDM_ORIG_ARRAY + ", but no element starting with "+ OPENIDM_ORIG_ARRAY_TYPE);          }          String origType=typeListItem.substring(OPENIDM_ORIG_ARRAY_TYPE.length());          listToInspect.remove(typeListItem);          try {            Class origArrayClazz=null;            origArrayClazz=ctx.getBundle().loadClass(origType);            value=listToInspect.toArray((Object[])Array.newInstance(origArrayClazz,0));          } catch (          Exception ex) {            logger.warn("Failed to convert back to original array type " + origType + " "+ ex.getMessage(),ex);            throw new IOException("Failed to convert back to original array type " + origType + " "+ ex.getMessage(),ex);          }        } else {          value=new java.util.Vector((List)value);        }      }      converted.put(key,value);    }    return converted;  }}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  private boolean isOutputDirAvailable(){  return outputDir != null && (outputDir.exists() && outputDir.isDirectory() || outputDir.mkdirs());}  }
class C{  public ImmutableList<MessageType> filterDocumentingMessages(ProtoContainerElement element){  ImmutableList.Builder<MessageType> builder=ImmutableList.builder();  for (  MessageType msg : element.getMessages()) {    if (!msg.isMapEntry()) {      builder.add(msg);    }  }  return builder.build();}  }
class C{  protected void report(final Runnable reportAction){  int numQueuedEvents=executor.getQueue().size();  if (!queueOverflow) {    executor.submit(reportAction);    if (numQueuedEvents > configuration.queuedEventsOverflowThreshold) {      queueOverflow=true;      logger.warn("Event queue overflown. Until relaxed, further events will be dropped.");    }  } else {    if (numQueuedEvents <= configuration.queuedEventsRelaxThrashold) {      queueOverflow=false;      logger.info("Event queue relaxed. Further events will be accepted and processed.");    } else {      logger.trace("Event queue overflown. Event is dropped.");    }  }}  }
class C{  public SecurityException(Throwable cause){  super(cause);}  }
class C{  private void writeSetOpenDSJavaHome(String installPath,Map<String,JavaArguments> arguments,Map<String,String> otherProperties) throws IOException {  String propertiesFile=getPropertiesFileName(installPath);  List<String> commentLines=getJavaPropertiesFileComments(propertiesFile);  try (BufferedWriter writer=new BufferedWriter(new FileWriter(propertiesFile,false))){    for (    String line : commentLines) {      writer.write(line);      writer.newLine();    }    for (    String key : otherProperties.keySet()) {      writer.write(key + "=" + otherProperties.get(key));      writer.newLine();    }    for (    String scriptName : arguments.keySet()) {      String argument=arguments.get(scriptName).getStringArguments();      writer.newLine();      writer.write(getJavaArgPropertyForScript(scriptName) + "=" + argument);    }  }   String libDir=Utils.getPath(Utils.getInstancePathFromInstallPath(installPath),LIBRARIES_PATH_RELATIVE);  File fLib=new File(libDir);  if (!fLib.exists()) {    fLib.mkdir();  }  final String destinationFile=Utils.getPath(libDir,isWindows() ? SET_JAVA_PROPERTIES_FILE_WINDOWS : SET_JAVA_PROPERTIES_FILE_UNIX);  int returnValue=JavaPropertiesTool.mainCLI("--propertiesFile",propertiesFile,"--destinationFile",destinationFile,"--quiet");  if (JavaPropertiesTool.ErrorReturnCode.SUCCESSFUL.getReturnCode() != returnValue && JavaPropertiesTool.ErrorReturnCode.SUCCESSFUL_NOP.getReturnCode() != returnValue) {    logger.warn(LocalizableMessage.raw("Error creating java home scripts, error code: " + returnValue));    throw new IOException(ERR_ERROR_CREATING_JAVA_HOME_SCRIPTS.get(returnValue).toString());  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionTypeImpl();}  }
class C{  public static void addAttributeToSubSchema(String serviceName,String parentSchemaName,String subSchemaName,String schemaType,String attributeSchemaFile) throws UpgradeException {  String classMethod="UpgradeUtils:addAttributeToSubSchema : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Adding attribute schema : " + attributeSchemaFile);    debug.message(" to subSchema " + subSchemaName + " to service "+ serviceName);  }  FileInputStream fis=null;  ServiceSchema ss=getServiceSchema(serviceName,parentSchemaName,schemaType);  try {    ServiceSchema subSchema=ss.getSubSchema(subSchemaName);    fis=new FileInputStream(attributeSchemaFile);    subSchema.addAttributeSchema(fis);  } catch (  IOException ioe) {    debug.error(classMethod + "File not found " + attributeSchemaFile);    throw new UpgradeException(ioe.getMessage());  }catch (  SMSException sme) {    debug.error(classMethod + "Cannot add attribute schema to : " + serviceName,sme);    throw new UpgradeException(sme.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken : ",ssoe);    throw new UpgradeException(ssoe.getMessage());  }catch (  Exception e) {    debug.error(classMethod + "Error setting attribute schema : ",e);    throw new UpgradeException(e.getMessage());  }}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  public String nextNamedValueIdentifier() throws DecodeException {  if (!hasNext(GSER_IDENTIFIER)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_IDENTIFIER.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  String identifier=next(GSER_IDENTIFIER);  if (!hasNext(GSER_MSP)) {    final LocalizableMessage msg=WARN_GSER_SPACE_CHAR_EXPECTED.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  skipMSP();  return identifier;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509V1Token11Element createWssX509V1Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509V1Token11ElementImpl();}  }
class C{  public static Protocol detect(InputStream inputStream) throws IOException {  if (!inputStream.markSupported()) {    throw new IllegalArgumentException("Stream must support mark for protocol detection!");  }  byte[] packet=new byte[32];  inputStream.mark(packet.length);  int read=inputStream.read(packet);  inputStream.reset();  if (read < packet.length) {    return Protocol.TOO_SMALL;  } else   if (ProtocolDetector.isHttpProtocol(packet)) {    return Protocol.HTTP;  } else   if (ProtocolDetector.isTlsProtocol(packet)) {    return Protocol.TLS;  } else {    return Protocol.OTHER;  }}  }
class C{  public void startDocument() throws SAXException {  if (documentHandler != null)   documentHandler.startDocument();}  }
class C{  public static String filter(Object obj){  if (obj == null)   return ("?");  String message=obj.toString();  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return (result.toString());}  }
class C{  public boolean isVisible(){  return this.visible;}  }
class C{  public static void checkJavaVersion() throws IncompatibleVersionException {  try {    com.forgerock.opendj.cli.Utils.checkJavaVersion();  } catch (  ClientException e) {    throw new IncompatibleVersionException(e.getMessageObject(),e);  }}  }
class C{  public boolean hasAttribute(AttributeDescription attributeDescription){  return hasAttribute(attributeDescription,true);}  }
class C{  protected void layout(){  SynthContext context=getContext(slider);  SynthGraphicsUtils synthGraphics=style.getGraphicsUtils(context);  Insets trackInsets=new Insets(0,0,0,0);  SynthContext trackContext=getContext(slider,Region.SLIDER_TRACK);  style.getInsets(trackContext,trackInsets);  trackContext.dispose();  if (slider.getOrientation() == JSlider.HORIZONTAL) {    valueRect.height=0;    if (paintValue) {      valueRect.height=synthGraphics.getMaximumCharHeight(context);    }    trackRect.height=trackHeight;    tickRect.height=0;    if (slider.getPaintTicks()) {      tickRect.height=getTickLength();    }    labelRect.height=0;    if (slider.getPaintLabels()) {      labelRect.height=getHeightOfTallestLabel();    }    contentRect.height=valueRect.height + trackRect.height + trackInsets.top+ trackInsets.bottom+ tickRect.height+ labelRect.height+ 4;    contentRect.width=slider.getWidth() - insetCache.left - insetCache.right;    int pad=0;    if (slider.getPaintLabels()) {      trackRect.x=insetCache.left;      trackRect.width=contentRect.width;      Dictionary dictionary=slider.getLabelTable();      if (dictionary != null) {        int minValue=slider.getMinimum();        int maxValue=slider.getMaximum();        int firstLblIdx=Integer.MAX_VALUE;        int lastLblIdx=Integer.MIN_VALUE;        for (Enumeration keys=dictionary.keys(); keys.hasMoreElements(); ) {          int keyInt=((Integer)keys.nextElement()).intValue();          if (keyInt >= minValue && keyInt < firstLblIdx) {            firstLblIdx=keyInt;          }          if (keyInt <= maxValue && keyInt > lastLblIdx) {            lastLblIdx=keyInt;          }        }        pad=getPadForLabel(firstLblIdx);        pad=Math.max(pad,getPadForLabel(lastLblIdx));      }    }    valueRect.x=trackRect.x=tickRect.x=labelRect.x=(insetCache.left + pad);    valueRect.width=trackRect.width=tickRect.width=labelRect.width=(contentRect.width - (pad * 2));    int centerY=slider.getHeight() / 2 - contentRect.height / 2;    valueRect.y=centerY;    centerY+=valueRect.height + 2;    trackRect.y=centerY + trackInsets.top;    centerY+=trackRect.height + trackInsets.top + trackInsets.bottom;    tickRect.y=centerY;    centerY+=tickRect.height + 2;    labelRect.y=centerY;    centerY+=labelRect.height;  } else {    trackRect.width=trackHeight;    tickRect.width=0;    if (slider.getPaintTicks()) {      tickRect.width=getTickLength();    }    labelRect.width=0;    if (slider.getPaintLabels()) {      labelRect.width=getWidthOfWidestLabel();    }    valueRect.y=insetCache.top;    valueRect.height=0;    if (paintValue) {      valueRect.height=synthGraphics.getMaximumCharHeight(context);    }    FontMetrics fm=slider.getFontMetrics(slider.getFont());    valueRect.width=Math.max(synthGraphics.computeStringWidth(context,slider.getFont(),fm,"" + slider.getMaximum()),synthGraphics.computeStringWidth(context,slider.getFont(),fm,"" + slider.getMinimum()));    int l=valueRect.width / 2;    int w1=trackInsets.left + trackRect.width / 2;    int w2=trackRect.width / 2 + trackInsets.right + tickRect.width + labelRect.width;    contentRect.width=Math.max(w1,l) + Math.max(w2,l) + 2+ insetCache.left+ insetCache.right;    contentRect.height=slider.getHeight() - insetCache.top - insetCache.bottom;    trackRect.y=tickRect.y=labelRect.y=valueRect.y + valueRect.height;    trackRect.height=tickRect.height=labelRect.height=contentRect.height - valueRect.height;    int startX=slider.getWidth() / 2 - contentRect.width / 2;    if (SynthLookAndFeel.isLeftToRight(slider)) {      if (l > w1) {        startX+=(l - w1);      }      trackRect.x=startX + trackInsets.left;      startX+=trackInsets.left + trackRect.width + trackInsets.right;      tickRect.x=startX;      labelRect.x=startX + tickRect.width + 2;    } else {      if (l > w2) {        startX+=(l - w2);      }      labelRect.x=startX;      startX+=labelRect.width + 2;      tickRect.x=startX;      trackRect.x=startX + tickRect.width + trackInsets.left;    }  }  context.dispose();  lastSize=slider.getSize();}  }
class C{  public SubentryPasswordPolicy(SubEntry subentry) throws DirectoryException {  ObjectClass pwdPolicyOC=DirectoryServer.getSchema().getObjectClass(PWD_OC_POLICY);  Entry entry=subentry.getEntry();  Map<ObjectClass,String> objectClasses=entry.getObjectClasses();  if (pwdPolicyOC.isPlaceHolder()) {    if (logger.isTraceEnabled()) {      logger.trace("No %s objectclass is defined in the server schema.",PWD_OC_POLICY);    }    for (    String ocName : objectClasses.values()) {      if (PWD_OC_POLICY.equalsIgnoreCase(ocName)) {        break;      }    }    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_PWPOLICY_NO_PWDPOLICY_OC.get(subentry.getDN()));  } else   if (!objectClasses.containsKey(pwdPolicyOC)) {    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_PWPOLICY_NO_PWDPOLICY_OC.get(subentry.getDN()));  }  this.passwordPolicySubentryDN=subentry.getDN();  String value=getAttrValue(entry,PWD_ATTR_ATTRIBUTE);  if (value != null && value.length() > 0) {    this.pPasswordAttribute=DirectoryServer.getSchema().getAttributeType(value);    if (this.pPasswordAttribute.isPlaceHolder()) {      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_PWPOLICY_UNDEFINED_PASSWORD_ATTRIBUTE.get(this.passwordPolicySubentryDN,value));    }    final PasswordType passwordType=SchemaUtils.checkPasswordType(pPasswordAttribute);    if (passwordType.equals(PasswordType.AUTH_PASSWORD)) {      pAuthPasswordSyntax=true;    } else     if (passwordType.equals(PasswordType.USER_PASSWORD)) {      pAuthPasswordSyntax=false;    } else {      String syntax=pPasswordAttribute.getSyntax().getName();      if (syntax == null || syntax.length() == 0) {        syntax=pPasswordAttribute.getSyntax().getOID();      }      LocalizableMessage message=ERR_PWPOLICY_INVALID_PASSWORD_ATTRIBUTE_SYNTAX.get(passwordPolicySubentryDN,pPasswordAttribute.getNameOrOID(),syntax);      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);    }  } else {    this.pPasswordAttribute=null;    this.pAuthPasswordSyntax=null;  }  this.pMinPasswordAge=asLong(entry,PWD_ATTR_MINAGE);  this.pMaxPasswordAge=asLong(entry,PWD_ATTR_MAXAGE);  this.pPasswordHistoryCount=asInteger(entry,PWD_ATTR_INHISTORY,Integer.MAX_VALUE);  asInteger(entry,PWD_ATTR_CHECKQUALITY,2);  asInteger(entry,PWD_ATTR_MINLENGTH,Integer.MAX_VALUE);  asBoolean(entry,PWD_ATTR_LOCKOUT);  this.pPasswordExpirationWarningInterval=asLong(entry,PWD_ATTR_EXPIREWARNING);  this.pGraceLoginCount=asInteger(entry,PWD_ATTR_GRACEAUTHNLIMIT,Integer.MAX_VALUE);  this.pLockoutDuration=asLong(entry,PWD_ATTR_LOCKOUTDURATION);  this.pLockoutFailureCount=asInteger(entry,PWD_ATTR_MAXFAILURE,Integer.MAX_VALUE);  this.pForceChangeOnReset=asBoolean(entry,PWD_ATTR_MUSTCHANGE);  this.pAllowUserPasswordChanges=asBoolean(entry,PWD_ATTR_ALLOWUSERCHANGE);  this.pPasswordChangeRequiresCurrentPassword=asBoolean(entry,PWD_ATTR_SAFEMODIFY);  this.pLockoutFailureExpirationInterval=asLong(entry,PWD_ATTR_FAILURECOUNTINTERVAL);  ObjectClass pwdValidatorPolicyOC=DirectoryServer.getSchema().getObjectClass(PWD_OC_VALIDATORPOLICY);  if (!pwdValidatorPolicyOC.isPlaceHolder() && objectClasses.containsKey(pwdValidatorPolicyOC)) {    AttributeType pwdAttrType=DirectoryServer.getSchema().getAttributeType(PWD_ATTR_VALIDATOR);    for (    Attribute attr : entry.getAllAttributes(pwdAttrType)) {      for (      ByteString val : attr) {        DN validatorDN=DN.valueOf(val);        if (DirectoryServer.getPasswordValidator(validatorDN) == null) {          throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_PWPOLICY_UNKNOWN_VALIDATOR.get(this.passwordPolicySubentryDN,validatorDN,PWD_ATTR_VALIDATOR));        }        pValidatorNames.add(validatorDN);      }    }  }}  }
class C{  public void beginMonitoringOf(final InetAddress inetAddress){  final long socketIdentifier=SocketIdentifier.fromInet4Address(inetAddress);  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);}  }
class C{  public static boolean messageEnabled(){  return debugInst.messageEnabled();}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public byte[] unwrap(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (forWrapping) {    throw new IllegalStateException("Not set for unwrapping");  }  if (in == null) {    throw new InvalidCipherTextException("Null pointer as ciphertext");  }  final int blockSize=engine.getBlockSize();  if (inLen % blockSize != 0) {    throw new InvalidCipherTextException("Ciphertext not multiple of " + blockSize);  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(false,param2);  byte TEMP3[]=new byte[inLen];  for (int currentBytePos=0; currentBytePos != inLen; currentBytePos+=blockSize) {    engine.processBlock(in,inOff + currentBytePos,TEMP3,currentBytePos);  }  byte[] TEMP2=reverse(TEMP3);  this.iv=new byte[8];  byte[] TEMP1=new byte[TEMP2.length - 8];  System.arraycopy(TEMP2,0,this.iv,0,8);  System.arraycopy(TEMP2,8,TEMP1,0,TEMP2.length - 8);  this.paramPlusIV=new ParametersWithIV(this.param,this.iv);  this.engine.init(false,this.paramPlusIV);  byte[] WKCKS=new byte[TEMP1.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP1,currentBytePos,WKCKS,currentBytePos);  }  byte[] result=new byte[WKCKS.length - 8];  byte[] CKStoBeVerified=new byte[8];  System.arraycopy(WKCKS,0,result,0,WKCKS.length - 8);  System.arraycopy(WKCKS,WKCKS.length - 8,CKStoBeVerified,0,8);  if (!checkCMSKeyChecksum(result,CKStoBeVerified)) {    throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted");  }  return result;}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setParameters(params);  doLog(lr);}  }
class C{  public void testAbsMathContextNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int precision=15;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String result="1.23809648392385E+53";  int resScale=-39;  BigDecimal res=aNumber.abs(mc);  assertEquals("incorrect value",result,res.toString());  assertEquals("incorrect scale",resScale,res.scale());}  }
class C{  public static SIPHeader parseSIPHeader(String header) throws ParseException {  int start=0;  int end=header.length() - 1;  try {    while (header.charAt(start) <= 0x20)     start++;    while (header.charAt(end) <= 0x20)     end--;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new ParseException("Empty header.",0);  }  StringBuilder buffer=new StringBuilder(end + 1);  int i=start;  int lineStart=start;  boolean endOfLine=false;  while (i <= end) {    char c=header.charAt(i);    if (c == '\r' || c == '\n') {      if (!endOfLine) {        buffer.append(header.substring(lineStart,i));        endOfLine=true;      }    } else {      if (endOfLine) {        endOfLine=false;        if (c == ' ' || c == '\t') {          buffer.append(' ');          lineStart=i + 1;        } else {          lineStart=i;        }      }    }    i++;  }  buffer.append(header.substring(lineStart,i));  buffer.append('\n');  HeaderParser hp=ParserFactory.createParser(buffer.toString());  if (hp == null)   throw new ParseException("could not create parser",0);  return hp.parse();}  }
class C{  protected Set<Argument> createGlobalArguments(OutputStream outStream,boolean alwaysSSL) throws ArgumentException {  secureArgsList=new SecureConnectionCliArgs(alwaysSSL);  Set<Argument> set=secureArgsList.createGlobalArguments();  final BooleanArgument showUsageArg=showUsageArgument();  setUsageArgument(showUsageArg,outStream);  set.add(showUsageArg);  verboseArg=verboseArgument();  set.add(verboseArg);  propertiesFileArg=propertiesFileArgument();  setFilePropertiesArgument(propertiesFileArg);  set.add(propertiesFileArg);  noPropertiesFileArg=noPropertiesFileArgument();  setNoPropertiesFileArgument(noPropertiesFileArg);  set.add(noPropertiesFileArg);  return set;}  }
class C{  private void appendAffix(StringBuffer buffer,String affixPattern,String expAffix,boolean localized){  if (affixPattern == null) {    appendAffix(buffer,expAffix,localized);  } else {    int i;    for (int pos=0; pos < affixPattern.length(); pos=i) {      i=affixPattern.indexOf(QUOTE,pos);      if (i < 0) {        appendAffix(buffer,affixPattern.substring(pos),localized);        break;      }      if (i > pos) {        appendAffix(buffer,affixPattern.substring(pos,i),localized);      }      char c=affixPattern.charAt(++i);      ++i;      if (c == QUOTE) {        buffer.append(c);      } else       if (c == CURRENCY_SIGN && i < affixPattern.length() && affixPattern.charAt(i) == CURRENCY_SIGN) {        ++i;        buffer.append(c);      } else       if (localized) {switch (c) {case PATTERN_PERCENT:          c=symbols.getPercent();        break;case PATTERN_PER_MILLE:      c=symbols.getPerMill();    break;case PATTERN_MINUS:  c=symbols.getMinusSign();break;}}buffer.append(c);}}}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  long maxRead=max >= 0 ? Math.min(len,max - pos) : len;  int bytesRead=in.read(b,off,(int)maxRead);  if (bytesRead == -1) {    return -1;  }  pos+=bytesRead;  return bytesRead;}  }
class C{  private void createTunnel(int readTimeout,int writeTimeout) throws IOException {  Request tunnelRequest=createTunnelRequest();  HttpUrl url=tunnelRequest.url();  String requestLine="CONNECT " + url.host() + ":"+ url.port()+ " HTTP/1.1";  while (true) {    Http1xStream tunnelConnection=new Http1xStream(null,source,sink);    source.timeout().timeout(readTimeout,MILLISECONDS);    sink.timeout().timeout(writeTimeout,MILLISECONDS);    tunnelConnection.writeRequest(tunnelRequest.headers(),requestLine);    tunnelConnection.finishRequest();    Response response=tunnelConnection.readResponse().request(tunnelRequest).build();    long contentLength=OkHeaders.contentLength(response);    if (contentLength == -1L) {      contentLength=0L;    }    Source body=tunnelConnection.newFixedLengthSource(contentLength);    Util.skipAll(body,Integer.MAX_VALUE,TimeUnit.MILLISECONDS);    body.close();switch (response.code()) {case HTTP_OK:      if (!source.buffer().exhausted() || !sink.buffer().exhausted()) {        throw new IOException("TLS tunnel buffered too many bytes!");      }    return;case HTTP_PROXY_AUTH:  tunnelRequest=OkHeaders.processAuthHeader(route.address().authenticator(),response,route.proxy());if (tunnelRequest != null) continue;throw new IOException("Failed to authenticate with proxy");default :throw new IOException("Unexpected response code for CONNECT: " + response.code());}}}  }
class C{  private void signCertificateChain(){  List<Certificate> cc=new ArrayList<>();  cc.add(signCert);  List<Certificate> oc=new ArrayList<>(certs);  for (int k=0; k < oc.size(); ++k) {    if (signCert.equals(oc.get(k))) {      oc.remove(k);      --k;    }  }  boolean found=true;  while (found) {    X509Certificate v=(X509Certificate)cc.get(cc.size() - 1);    found=false;    for (int k=0; k < oc.size(); ++k) {      X509Certificate issuer=(X509Certificate)oc.get(k);      try {        v.verify(issuer.getPublicKey(),provider);        found=true;        cc.add(oc.get(k));        oc.remove(k);        break;      } catch (      Exception ignored) {      }    }  }  signCerts=cc;}  }
class C{  public ECPublicKeySpec(ECPoint w,ECParameterSpec params){  if (w == null) {    throw new NullPointerException("w is null");  }  if (params == null) {    throw new NullPointerException("params is null");  }  if (w == ECPoint.POINT_INFINITY) {    throw new IllegalArgumentException("w is ECPoint.POINT_INFINITY");  }  this.w=w;  this.params=params;}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public ItemSelectionFilter(ItemSelectionChoice p_item_type){  java.util.Arrays.fill(sel_array,false);  sel_array[p_item_type.ordinal()]=true;  sel_array[ItemSelectionChoice.FIXED.ordinal()]=true;  sel_array[ItemSelectionChoice.UNFIXED.ordinal()]=true;}  }
class C{  public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static long parseUnsignedInt(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  l&=0xFFFFFFFFL;  return l;}  }
class C{  public void testProxyConnection_Not_Found_Response() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  try {    doInteraction(connection,ss,NOT_FOUND_CODE);    fail("Expected exception was not thrown.");  } catch (  FileNotFoundException e) {    if (DO_LOG) {      System.out.println("Expected exception was thrown: " + e.getMessage());    }  }}  }
class C{  public PdfAction(){  this(new PdfDictionary());  put(PdfName.Type,PdfName.Action);}  }
class C{  public void testUpdate6(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2='1'";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  static final int nextSecondarySeed(){  int r;  Thread t=Thread.currentThread();  if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else {    localInit();    if ((r=(int)UNSAFE.getLong(t,SEED)) == 0)     r=1;  }  UNSAFE.putInt(t,SECONDARY,r);  return r;}  }
class C{  protected final JsonToken _finishToken() throws IOException {  if (_inputPtr >= _inputEnd) {    return JsonToken.NOT_AVAILABLE;  }  byte b=_inputBuffer[_inputPtr++];  if (_state == STATE_INITIAL) {    if (b == SmileConstants.HEADER_BYTE_1) {      if (!_handleHeader(0)) {        return JsonToken.NOT_AVAILABLE;      }      if (_inputPtr >= _inputEnd) {        return JsonToken.NOT_AVAILABLE;      }      b=_inputBuffer[_inputPtr++];    } else {      if (_cfgRequireHeader) {        String msg;        if (b == '{' || b == '[') {          msg="Input does not start with Smile format header (first byte = 0x" + Integer.toHexString(b & 0xFF) + ") -- rather, it starts with '"+ ((char)b)+ "' (plain JSON input?) -- can not parse";        } else {          msg="Input does not start with Smile format header (first byte = 0x" + Integer.toHexString(b & 0xFF) + ") and parser has REQUIRE_HEADER enabled: can not parse";        }        throw new JsonParseException(this,msg);      }    }  } else   if (_state == STATE_HEADER) {    if (!_handleHeader(_substate)) {      return JsonToken.NOT_AVAILABLE;    }    if (_inputPtr >= _inputEnd) {      return JsonToken.NOT_AVAILABLE;    }    b=_inputBuffer[_inputPtr++];  }switch (_state) {case STATE_NUMBER_INT:    return _nextInt(_substate,_pendingInt);case STATE_NUMBER_LONG:  return _nextLong(_substate,_pendingLong);case STATE_NUMBER_BIGINT:return _nextBigInt(_substate);case STATE_NUMBER_FLOAT:return _nextFloat(_substate,_pendingInt);case STATE_NUMBER_DOUBLE:return _nextDouble(_substate,_pendingLong);case STATE_NUMBER_BIGDEC:return _nextBigDecimal(_substate);}_throwInvalidState("Illegal state when trying to complete token: ");return null;}  }
class C{  public int calculatePaddingLength(int dataLength){  return encryptCipher.getBlockSize() - (dataLength % encryptCipher.getBlockSize());}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message) throws HeadlessException {  return showConfirmDialog(parentComponent,message,UIManager.getString("OptionPane.titleText"),YES_NO_CANCEL_OPTION);}  }
class C{  public RowSetWarning(String reason){  super(reason);}  }
class C{  public static FilePermission decodeUNIXMode(String modeString) throws DirectoryException {  if (modeString == null || modeString.length() != 3) {    LocalizableMessage message=ERR_FILEPERM_INVALID_UNIX_MODE_STRING.get(modeString);    throw new DirectoryException(ResultCode.OTHER,message);  }  int encodedPermission=0x0000;switch (modeString.charAt(0)) {case '0':    break;case '1':  encodedPermission|=OWNER_EXECUTABLE;break;case '2':encodedPermission|=OWNER_WRITABLE;break;case '3':encodedPermission|=OWNER_WRITABLE | OWNER_EXECUTABLE;break;case '4':encodedPermission|=OWNER_READABLE;break;case '5':encodedPermission|=OWNER_READABLE | OWNER_EXECUTABLE;break;case '6':encodedPermission|=OWNER_READABLE | OWNER_WRITABLE;break;case '7':encodedPermission|=OWNER_READABLE | OWNER_WRITABLE | OWNER_EXECUTABLE;break;default :LocalizableMessage message=ERR_FILEPERM_INVALID_UNIX_MODE_STRING.get(modeString);throw new DirectoryException(ResultCode.OTHER,message);}switch (modeString.charAt(1)) {case '0':break;case '1':encodedPermission|=GROUP_EXECUTABLE;break;case '2':encodedPermission|=GROUP_WRITABLE;break;case '3':encodedPermission|=GROUP_WRITABLE | GROUP_EXECUTABLE;break;case '4':encodedPermission|=GROUP_READABLE;break;case '5':encodedPermission|=GROUP_READABLE | GROUP_EXECUTABLE;break;case '6':encodedPermission|=GROUP_READABLE | GROUP_WRITABLE;break;case '7':encodedPermission|=GROUP_READABLE | GROUP_WRITABLE | GROUP_EXECUTABLE;break;default :LocalizableMessage message=ERR_FILEPERM_INVALID_UNIX_MODE_STRING.get(modeString);throw new DirectoryException(ResultCode.OTHER,message);}switch (modeString.charAt(2)) {case '0':break;case '1':encodedPermission|=OTHER_EXECUTABLE;break;case '2':encodedPermission|=OTHER_WRITABLE;break;case '3':encodedPermission|=OTHER_WRITABLE | OTHER_EXECUTABLE;break;case '4':encodedPermission|=OTHER_READABLE;break;case '5':encodedPermission|=OTHER_READABLE | OTHER_EXECUTABLE;break;case '6':encodedPermission|=OTHER_READABLE | OTHER_WRITABLE;break;case '7':encodedPermission|=OTHER_READABLE | OTHER_WRITABLE | OTHER_EXECUTABLE;break;default :LocalizableMessage message=ERR_FILEPERM_INVALID_UNIX_MODE_STRING.get(modeString);throw new DirectoryException(ResultCode.OTHER,message);}return new FilePermission(encodedPermission);}  }
class C{  public NotSerializableException(){  super();}  }
class C{  public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {  if ((groupName == null) || groupName.length() == 0) {    groupName=SMSUtils.DEFAULT;  }  String orgdn=DNMapper.orgNameToDN(orgName);  validateSCM();  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);  if (cEntry.isNewEntry()) {    return;  }  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);    amsdk.unassignService(serviceName);  }  if (!cEntry.isNewEntry()) {    SMSEntry entry=cEntry.getClonedSMSEntry();    entry.delete(token);    cEntry.refresh(entry);  }}  }
class C{  public void init() throws LifecycleException {  getServer();  getConnector();  server.init();}  }
class C{  @DataProvider(name="mixedMatches") public Object[][] mixedData(){  return new Object[][]{{"12AB:0000:0000:CD30:0000:0000:0000:0000"},{"12ab:0:0:cd3f:0000:0000:23DC:DC30"},{"45.56.33.9"},{"72.56.78.9"},{"56.56.78.9"}};}  }
class C{  public void resetToPreferredSizes(){  doReset=true;}  }
class C{  private void updateEnabledState(Container c,boolean enabled){  for (int counter=c.getComponentCount() - 1; counter >= 0; counter--) {    Component child=c.getComponent(counter);    if (DefaultLookup.getBoolean(spinner,this,"Spinner.disableOnBoundaryValues",false)) {      SpinnerModel model=spinner.getModel();      if (child.getName() == "Spinner.nextButton" && model.getNextValue() == null) {        child.setEnabled(false);      } else       if (child.getName() == "Spinner.previousButton" && model.getPreviousValue() == null) {        child.setEnabled(false);      } else {        child.setEnabled(enabled);      }    } else {      child.setEnabled(enabled);    }    if (child instanceof Container) {      updateEnabledState((Container)child,enabled);    }  }}  }
class C{  private ClusterMonitor resolveClusterMonitor() throws Exception {  if (isPartOfCluster()) {    return new MultiServerClusterMonitor(InjectorHolder.getInstance(ForeignSessionHandler.class),sessionDebug,serviceConfig,serverConfig);  } else {    return new SingleServerClusterMonitor();  }}  }
class C{  void push(int from){  int len=sortedArray.length;  --len;  if (len == 0) {    return;  }  while (from < len) {    sortedArray[len]=sortedArray[len - 1];    --len;  }}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest(Element): invalid " + "MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMinorVersion:" + " Minor Version of the AuthnRequest is too high.");    }    throw new FSMsgException("requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMinorVersion:" + " Minor Version of the AuthnRequest is too low.");    }    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  public boolean isClosable(){  return closable;}  }
class C{  public boolean removeConfigChangeListener(ConfigChangeListener listener){  return configListeners.remove(listener);}  }
class C{  public MarshalException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public ChangelogException(Throwable cause){  super(cause);}  }
class C{  public static ComponentUI createUI(JComponent list){  return new SynthListUI();}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aElement,StoreDescription elementDesc) throws Exception {  if (aElement instanceof NamingResourcesImpl) {    NamingResourcesImpl resources=(NamingResourcesImpl)aElement;    ContextEjb[] ejbs=resources.findEjbs();    storeElementArray(aWriter,indent,ejbs);    ContextEnvironment[] envs=resources.findEnvironments();    storeElementArray(aWriter,indent,envs);    ContextLocalEjb[] lejbs=resources.findLocalEjbs();    storeElementArray(aWriter,indent,lejbs);    ContextResource[] dresources=resources.findResources();    storeElementArray(aWriter,indent,dresources);    ContextResourceEnvRef[] resEnv=resources.findResourceEnvRefs();    storeElementArray(aWriter,indent,resEnv);    ContextResourceLink[] resourceLinks=resources.findResourceLinks();    storeElementArray(aWriter,indent,resourceLinks);  }}  }
class C{  @Override protected void onRestoreInstanceState(Parcelable state){  Bundle savedState=(Bundle)state;  Parcelable superState=savedState.getParcelable("PARENT");  super.onRestoreInstanceState(superState);  this.mBounds.left=savedState.getFloat("mBoundsLeft");  this.mBounds.top=savedState.getFloat("mBoundsTop");  this.mBounds.right=savedState.getFloat("mBoundsRight");  this.mBounds.bottom=savedState.getFloat("mBoundsBottom");}  }
class C{  public DataBufferInt(int size){  super(STABLE,TYPE_INT,size);  data=new int[size];  bankdata=new int[1][];  bankdata[0]=data;}  }
class C{  public BufferedOutputStream(OutputStream out){  this(out,8192);}  }
class C{  public void releaseConnection(Connection ldapConnection){  ldapConnection.close();}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  private static int unsignedBytesToInt(byte b0,byte b1){  return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8));}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ServiceInstanceType createServiceInstanceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ServiceInstanceTypeImpl();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  public NodeList convertToNodeset(){  if (m_obj instanceof NodeList)   return (NodeList)m_obj; else   return new org.apache.xml.dtm.ref.DTMNodeList(asNodeIterator());}  }
class C{  public Subject removeSubject(String subjectName){  return users.removeSubject(subjectName);}  }
class C{  private void parseLockNullProperties(HttpServletRequest req,XMLWriter generatedXML,String path,int type,Vector<String> propertiesVector){  if (isSpecialPath(path))   return;  LockInfo lock=resourceLocks.get(path);  if (lock == null)   return;  String absoluteUri=req.getRequestURI();  String relativePath=getRelativePath(req);  String toAppend=path.substring(relativePath.length());  if (!toAppend.startsWith("/"))   toAppend="/" + toAppend;  String rewrittenUrl=rewriteUrl(RequestUtil.normalize(absoluteUri + toAppend));  generatePropFindResponse(generatedXML,rewrittenUrl,path,type,propertiesVector,true,true,lock.creationDate.getTime(),lock.creationDate.getTime(),0,"","");}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int changeType){  Map orgAttrMap;  try {    orgAttrMap=loadPolicyConfig(orgName);  } catch (  SMSException se) {    PolicyManager.debug.error("orgConfigChanged: Unable to get org config: " + orgName,se);    return;  }catch (  SSOException se) {    PolicyManager.debug.error("orgConfigChanged: Unable to get org config: " + orgName,se);    return;  }  attrMap.put(orgName,orgAttrMap);  if (policyCache != null) {    policyCache.policyConfigChanged(orgName);  }}  }
class C{  public CardLayout(int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,ASN1Encodable value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  private void readContentSpec() throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == '(') {    int depth=0;    do {      if (c == '(') {        depth++;      } else       if (c == ')') {        depth--;      } else       if (c == -1) {        throw new XmlPullParserException("Unterminated element content spec",this,null);      }      position++;      c=peekCharacter();    } while (depth > 0);    if (c == '*' || c == '?' || c == '+') {      position++;    }  } else   if (c == EMPTY[0]) {    read(EMPTY);  } else   if (c == ANY[0]) {    read(ANY);  } else {    throw new XmlPullParserException("Expected element content spec",this,null);  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  sb.append("<").append(nsPrefix).append(XACMLConstants.RESPONSE).append(nsDeclaration).append(">\n");  int length=0;  if (results != null) {    length=results.size();    for (int i=0; i < length; i++) {      Result result=(Result)results.get(i);      sb.append(result.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(nsPrefix).append(XACMLConstants.RESPONSE).append(">\n");  return sb.toString();}  }
class C{  public void postMail(String recipients[],String subject,String message,String from) throws MessagingException {  postMail(recipients,subject,message,from,"text/plain","UTF-8");}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public ReplSessionSecurity(final SortedSet<String> sslCertNicknames,final SortedSet<String> sslProtocols,final SortedSet<String> sslCipherSuites,final boolean sslEncryption) throws ConfigException {  if (sslProtocols == null || sslProtocols.isEmpty()) {    this.sslProtocols=null;  } else {    this.sslProtocols=new String[sslProtocols.size()];    sslProtocols.toArray(this.sslProtocols);  }  if (sslCipherSuites == null || sslCipherSuites.isEmpty()) {    this.sslCipherSuites=null;  } else {    this.sslCipherSuites=new String[sslCipherSuites.size()];    sslCipherSuites.toArray(this.sslCipherSuites);  }  this.sslEncryption=sslEncryption;  this.sslCertNicknames=sslCertNicknames;}  }
class C{  @Deprecated public boolean isSharped(byte id){  if (id == getId(false)) {    return false;  } else   if (id == getId(true)) {    return true;  } else {    throw new IllegalArgumentException("The id isn't matching to the tone.");  }}  }
class C{  public DeviceGray(){  this(0f);}  }
class C{  protected DatagramSocket(DatagramSocketImpl impl){  if (impl == null)   throw new NullPointerException();  this.impl=impl;  checkOldImpl();}  }
class C{  public void read_logfile(InputStream p_input_stream){  if (board_is_read_only)   return;  if (!(interactive_state instanceof StateMenu))   return;  interactive_action_thread=new ReadActlogThread(this,p_input_stream);  interactive_action_thread.start();}  }
class C{  public Compiler shiftRight(File file){  if (!file.isDirectory())   throw new IllegalArgumentException(file + " is not a directory");  config.result.outputDir=file;  return this;}  }
class C{  public BackupDirectory(String path,DN configEntryDN){  this(path,configEntryDN,null);}  }
class C{  public ByteArrayPool(int arraySize,int maxPoolSize){  this.arraySize=arraySize;  this.maxAvailableArraysCount=maxPoolSize / arraySize;}  }
class C{  protected boolean findNextValidParent(){  if (parent == root) {    parent=null;    return false;  }  while (parent != null) {    TreeStateNode newParent=(TreeStateNode)parent.getParent();    if (newParent != null) {      nextIndex=newParent.getIndex(parent);      parent=newParent;      childCount=parent.getChildCount();      if (updateNextIndex())       return true;    } else     parent=null;  }  return false;}  }
class C{  public void testRadix16Pos(){  String value="287628a883451b800865c67e8d7ff20";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public ArrayStack(){  super();}  }
class C{  boolean popNamespace(String prefix){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=getPrefixStack(prefix)) != null) {    stack.pop();    return true;  }  return false;}  }
class C{  public AuditRequestContext(TransactionId transactionId){  this(transactionId,null);}  }
class C{  public boolean isComponentPartOfCurrentMenu(Component c){  if (selection.size() > 0) {    MenuElement me=selection.elementAt(0);    return isComponentPartOfCurrentMenu(me,c);  } else   return false;}  }
class C{  public Builder addPart(Headers headers,RequestBody body){  return addPart(Part.create(headers,body));}  }
class C{  public OpendsJmxPrincipal(String authID){  this.authID=authID;}  }
class C{  private void writeInstallPathContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_INSTALLATION_PATH_LABEL.get(),desc.getInstallPath(),maxLabelWidth);}  }
class C{  public boolean isRolloverBorders(){  return rolloverBorders;}  }
class C{  protected void storeLinkAnnotation(PdfPage page,PdfLinkAnnotation annotation){  List<PdfLinkAnnotation> pageAnnotations=linkAnnotations.get(page);  if (pageAnnotations == null) {    pageAnnotations=new ArrayList<>();    linkAnnotations.put(page,pageAnnotations);  }  pageAnnotations.add(annotation);}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    int a=this.a;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        a=Integer.parseInt(s,10);      } catch (      NumberFormatException nfe) {      }    }    MutableAttributeSet attr=new SimpleAttributeSet();    StyleConstants.setAlignment(attr,a);    setParagraphAttributes(editor,attr,false);  }}  }
class C{  public int compareToIgnoreCase(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=Character.toLowerCase(fsb.charAt(i));    char c2=Character.toLowerCase(xstr.charAt(j));    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public static LdapException newLdapException(ResultCode resultCode,CharSequence diagnosticMessage){  return newLdapException(resultCode,diagnosticMessage,null);}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  final Dialog dialog=requestEvent.getDialog();  final RequestExt request=(RequestExt)requestEvent.getRequest();  if (((SipURI)request.getFromHeader().getAddress().getURI()).getUser().equalsIgnoreCase(TIMER_USER)) {    timer.schedule(new ByeTask(dialog),BYE_DELAY);  }}  }
class C{  @Bean public JwtAccessTokenConverter jwtAccessTokenConverter(){  JwtAccessTokenConverter converter=new JwtAccessTokenConverter();  KeyPair keyPair=new KeyStoreKeyFactory(new ClassPathResource("keystore.jks"),"password".toCharArray()).getKeyPair("selfsigned");  converter.setKeyPair(keyPair);  return converter;}  }
class C{  public PAOSException(Throwable t){  super(t);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  public EGLSurface createWindowSurface(Object surface){  if (!(surface instanceof Surface) && !(surface instanceof SurfaceTexture)) {    throw new RuntimeException("invalid surface: " + surface);  }  int[] surfaceAttribs={EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreateWindowSurface(mEGLDisplay,mEGLConfig,surface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  @Override final protected int next(int numBits){  Utils.checkArgument(numBits >= 0 && numBits <= 32);  int numBytes=(numBits + 7) / 8;  byte b[]=new byte[numBytes];  int next=0;  nextBytes(b);  for (int i=0; i < numBytes; i++) {    next=(next << 8) + (b[i] & 0xFF);  }  return next >>> (numBytes * 8 - numBits);}  }
class C{  public AndroidGeocoder(Context context){  this.context=context;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String valProperties=(String)getDisplayFieldValue(PROPERTIES);  properties=new HashSet();  Map map=new HashMap();  StringTokenizer st=new StringTokenizer(valProperties,"\n");  while (st.hasMoreElements()) {    String t=st.nextToken();    t=t.replaceAll("\r","");    int idx=t.indexOf('=');    String name=t.substring(0,idx).trim();    String value=t.substring(idx + 1).trim();    properties.add(t);    map.put(name,value);  }  ServerSiteModel model=(ServerSiteModel)getModel();  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  if (serverName.equals(ServerConfiguration.DEFAULT_SERVER_CONFIG)) {    for (Iterator i=hiddenProperties.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      map.put(entry.getKey(),entry.getValue());    }  }  try {    Map origValues=model.getServerConfiguration(serverName);    discardDealtWithProperties(origValues);    String unkownPropertyMessage=null;    try {      model.modifyServer(serverName,null,map);    } catch (    UnknownPropertyNameException ex) {      unkownPropertyMessage=ex.getL10NMessage(model.getUserLocale());    }    for (Iterator i=origValues.keySet().iterator(); i.hasNext(); ) {      String key=(String)i.next();      if (map.containsKey(key)) {        i.remove();      }    }    if (!origValues.isEmpty()) {      model.updateServerConfigInheritance(serverName,origValues.keySet(),null);    }    if (unkownPropertyMessage != null) {      Object[] args={unkownPropertyMessage};      setInlineAlertMessage(CCAlert.TYPE_WARNING,"message.warning",MessageFormat.format(model.getLocalizedString("serverconfig.updated.with.invalid.properties"),args));    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.updated");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  protected int checkIPRange(){  int retVal=0;  String ipVersion;  String ipType;  Map<String,String> holdDetails;  for (  String nextIP : IPRangeRange) {    try {      holdDetails=checkIPVersion(nextIP);    } catch (    IllegalArgumentException e) {      if (debug.warningEnabled()) {        debug.warning("{}.checkIPRange: IP type could not be validated. IP={}",ADAPTIVE,nextIP,e);      }      continue;    }    ipVersion=holdDetails.get(IP_Version);    ipType=holdDetails.get(IP_TYPE);    if (ipVersion.equalsIgnoreCase(IP_V6) && ValidateIPaddress.isIPv6(clientIP)) {      if (debug.messageEnabled()) {        debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP);        debug.message("IP version is: {}",IP_V6);        debug.message("Client IP is: {}",IPv6Address.fromString(clientIP));      }      if (ipType.equalsIgnoreCase("Range")) {        String first=holdDetails.get(IP_START);        String last=holdDetails.get(IP_END);        IPv6AddressRange iPv6AddressRange=IPv6AddressRange.fromFirstAndLast(IPv6Address.fromString(first),IPv6Address.fromString(last));        if (iPv6AddressRange.contains(IPv6Address.fromString(clientIP))) {          retVal=IPRangeScore;          break;        }      } else       if (ipType.equalsIgnoreCase("CIDR")) {        IPv6Network iPv6Network=IPv6Network.fromString(nextIP);        if (iPv6Network.contains(IPv6Address.fromString(clientIP))) {          retVal=IPRangeScore;          break;        }      } else {        IPv6Address iPv6AddressNextIP=IPv6Address.fromString(nextIP);        if (iPv6AddressNextIP.compareTo(IPv6Address.fromString(clientIP)) == 0) {          retVal=IPRangeScore;          break;        }      }    } else     if (ipVersion.equalsIgnoreCase(IP_V4) && ValidateIPaddress.isIPv4(clientIP)) {      if (debug.messageEnabled()) {        debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP);        debug.message("IP version is: {}",IP_V4);        debug.message("Client IP is: {}",clientIP);      }      IPRange theRange=new IPRange(nextIP);      if (theRange.inRange(clientIP)) {        retVal=IPRangeScore;        break;      }    }  }  if (!IPRangeInvert) {    retVal=IPRangeScore - retVal;  }  return retVal;}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public PlaDelTriTriangle[] split_at_border_point(PlaDelTriCorner p_corner,PlaDelTriTriangle p_neighbour_to_split){  PlaDelTriTriangle[] new_triangles=new PlaDelTriTriangle[4];  int this_touching_edge_no=-1;  int neigbbour_touching_edge_no=-1;  PlaDelTriEdge touching_edge=null;  PlaDelTriEdge other_touching_edge=null;  for (int index=0; index < 3; ++index) {    PlaDelTriEdge curr_edge=edge_lines[index];    if (p_corner.side_of(curr_edge.start_corner,curr_edge.end_corner) == PlaSide.COLLINEAR) {      this_touching_edge_no=index;      touching_edge=curr_edge;    }    curr_edge=p_neighbour_to_split.edge_lines[index];    if (p_corner.side_of(curr_edge.start_corner,curr_edge.end_corner) == PlaSide.COLLINEAR) {      neigbbour_touching_edge_no=index;      other_touching_edge=curr_edge;    }  }  if (this_touching_edge_no < 0 || neigbbour_touching_edge_no < 0) {    System.out.println("Triangle.split_at_border_point: touching edge not found");    return null;  }  if (touching_edge != other_touching_edge) {    System.out.println("Triangle.split_at_border_point: edges inconsistent");    return null;  }  PlaDelTriEdge first_common_new_edge;  PlaDelTriEdge second_common_new_edge;  if (this == touching_edge.left_triangle) {    first_common_new_edge=new PlaDelTriEdge(id_generator,touching_edge.start_corner,p_corner);    second_common_new_edge=new PlaDelTriEdge(id_generator,p_corner,touching_edge.end_corner);  } else {    first_common_new_edge=new PlaDelTriEdge(id_generator,touching_edge.end_corner,p_corner);    second_common_new_edge=new PlaDelTriEdge(id_generator,p_corner,touching_edge.start_corner);  }  PlaDelTriEdge prev_edge=edge_lines[(this_touching_edge_no + 2) % 3];  PlaDelTriEdge this_splitting_edge;  if (this == prev_edge.left_triangle) {    this_splitting_edge=new PlaDelTriEdge(id_generator,p_corner,prev_edge.start_corner);  } else {    this_splitting_edge=new PlaDelTriEdge(id_generator,p_corner,prev_edge.end_corner);  }  PlaDelTriEdge[] curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=prev_edge;  curr_edge_lines[1]=first_common_new_edge;  curr_edge_lines[2]=this_splitting_edge;  new_triangles[0]=new PlaDelTriTriangle(id_generator,curr_edge_lines,this);  if (this == prev_edge.left_triangle) {    prev_edge.set_left_triangle(new_triangles[0]);  } else {    prev_edge.set_right_triangle(new_triangles[0]);  }  first_common_new_edge.set_left_triangle(new_triangles[0]);  this_splitting_edge.set_left_triangle(new_triangles[0]);  PlaDelTriEdge next_edge=edge_lines[(this_touching_edge_no + 1) % 3];  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=this_splitting_edge;  curr_edge_lines[1]=second_common_new_edge;  curr_edge_lines[2]=next_edge;  new_triangles[1]=new PlaDelTriTriangle(id_generator,curr_edge_lines,this);  this_splitting_edge.set_right_triangle(new_triangles[1]);  second_common_new_edge.set_left_triangle(new_triangles[1]);  if (this == next_edge.left_triangle) {    next_edge.set_left_triangle(new_triangles[1]);  } else {    next_edge.set_right_triangle(new_triangles[1]);  }  next_edge=p_neighbour_to_split.edge_lines[(neigbbour_touching_edge_no + 1) % 3];  PlaDelTriEdge neighbour_splitting_edge;  if (p_neighbour_to_split == next_edge.left_triangle) {    neighbour_splitting_edge=new PlaDelTriEdge(id_generator,next_edge.end_corner,p_corner);  } else {    neighbour_splitting_edge=new PlaDelTriEdge(id_generator,next_edge.start_corner,p_corner);  }  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=neighbour_splitting_edge;  curr_edge_lines[1]=first_common_new_edge;  curr_edge_lines[2]=next_edge;  new_triangles[2]=new PlaDelTriTriangle(id_generator,curr_edge_lines,p_neighbour_to_split);  neighbour_splitting_edge.set_left_triangle(new_triangles[2]);  first_common_new_edge.set_right_triangle(new_triangles[2]);  if (p_neighbour_to_split == next_edge.left_triangle) {    next_edge.set_left_triangle(new_triangles[2]);  } else {    next_edge.set_right_triangle(new_triangles[2]);  }  prev_edge=p_neighbour_to_split.edge_lines[(neigbbour_touching_edge_no + 2) % 3];  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=prev_edge;  curr_edge_lines[1]=second_common_new_edge;  curr_edge_lines[2]=neighbour_splitting_edge;  new_triangles[3]=new PlaDelTriTriangle(id_generator,curr_edge_lines,p_neighbour_to_split);  if (p_neighbour_to_split == prev_edge.left_triangle) {    prev_edge.set_left_triangle(new_triangles[3]);  } else {    prev_edge.set_right_triangle(new_triangles[3]);  }  second_common_new_edge.set_right_triangle(new_triangles[3]);  neighbour_splitting_edge.set_right_triangle(new_triangles[3]);  return new_triangles;}  }
class C{  public final Attribute decodeAttribute(final ByteSequenceReader reader) throws DirectoryException {  final int adId=decodeId(reader);  final Mappings mappings=reloadMappingsIfSchemaChanged();  final AttributeDescription ad=mappings.adDecodeMap.get(adId);  if (ad == null) {    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),ERR_COMPRESSEDSCHEMA_UNRECOGNIZED_AD_TOKEN.get(adId));  }  AttributeType attrType=ad.getAttributeType();  final int numValues=reader.readBERLength();  if (numValues == 1 && !ad.hasOptions()) {    return Attributes.create(attrType,readValue(reader));  } else {    final AttributeBuilder builder=new AttributeBuilder(attrType);    builder.setOptions(ad.getOptions());    for (int i=0; i < numValues; i++) {      builder.add(readValue(reader));    }    return builder.toAttribute();  }}  }
class C{  public PAOSResponse(String xmlString) throws PAOSException {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,PAOSUtils.debug);  if (xmlDocument == null) {    throw new PAOSException(PAOSUtils.bundle.getString("errorPAOSResponseElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  private ResourceException configureErrorMessage(final SMSException exception){switch (exception.getErrorCode()) {case "sms-REALM_NAME_NOT_FOUND":    return new NotFoundException(exception.getMessage(),exception);case "sms-INVALID_SSO_TOKEN":  return new PermanentException(401,"Unauthorized-Invalid SSO Token",exception);case "sms-organization_already_exists1":return new ConflictException(exception.getMessage(),exception);case "sms-invalid-org-name":return new BadRequestException(exception.getMessage(),exception);case "sms-cannot_delete_rootsuffix":return new PermanentException(401,"Unauthorized-Cannot delete root suffix",exception);case "sms-entries-exists":return new ConflictException(exception.getMessage(),exception);case "sms-SMSSchema_service_notfound":return new NotFoundException(exception.getMessage(),exception);case "sms-no-organization-schema":return new NotFoundException(exception.getMessage(),exception);case "sms-attribute-values-does-not-match-schema":return new BadRequestException(exception.getMessage(),exception);default :return new BadRequestException(exception.getMessage(),exception);}}  }
class C{  public boolean isGroupReadable(){  return is(encodedPermission,GROUP_READABLE);}  }
class C{  public AuthenticationInfoHeader createAuthenticationInfoHeader(String response) throws ParseException {  if (response == null)   throw new NullPointerException("null arg response");  AuthenticationInfo auth=new AuthenticationInfo();  auth.setResponse(response);  return auth;}  }
class C{  public JsonObject addLast(Object value){  add(value);  return build();}  }
class C{  synchronized void updateAuthConfigGlobals(ServiceSchemaManager scm) throws SMSException {  ServiceSchema schema=scm.getOrganizationSchema();  schema=schema.getSubSchema("Configurations");  schema=schema.getSubSchema("NamedConfiguration");  Map attrs=schema.getAttributeDefaults();  if (attrs != null) {    defaultServiceSuccessURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_SUCCESS_URL);    defaultServiceFailureURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_FAILURE_URL);  }  if (debug.messageEnabled()) {    debug.message("Default Service Success URL Set = " + defaultServiceSuccessURLSet);    debug.message("Default Service Failure URL Set = " + defaultServiceFailureURLSet);  }}  }
class C{  public static ConnectionFactory newShardedRequestLoadBalancer(final Collection<? extends ConnectionFactory> factories,final Options options){  return new RequestLoadBalancer("ShardedRequestLoadBalancer",factories,options,newShardedRequestLoadBalancerNextFunction(factories),NOOP_END_OF_REQUEST_FUNCTION);}  }
class C{  public PdfArray(Rectangle rectangle){  list=new ArrayList<>(4);  add(new PdfNumber(rectangle.getLeft()));  add(new PdfNumber(rectangle.getBottom()));  add(new PdfNumber(rectangle.getRight()));  add(new PdfNumber(rectangle.getTop()));}  }
class C{  protected void addDefaultArgument(final Argument argument) throws ArgumentException {  addArgument(argument,defaultArgGroup);}  }
class C{  private int doRecvAndUnwrap() throws IOException {  while (true) {    if (recvWrappedLength < 0) {      while (recvWrappedLengthBuffer.hasRemaining()) {        final int read=channel.read(recvWrappedLengthBuffer);        if (read <= 0) {          return read;        }      }      recvWrappedLengthBuffer.flip();      recvWrappedLength=recvWrappedLengthBuffer.getInt();      recvWrappedLengthBuffer.clear();      if (recvWrappedLength > recvWrappedBufferMaximumSize) {        throw new IOException("Client sent a SASL packet specifying a length " + recvWrappedLength + " which exceeds the negotiated limit of "+ recvWrappedBufferMaximumSize);      }      if (recvWrappedLength < 0) {        throw new IOException("Client sent a SASL packet specifying a negative length " + recvWrappedLength);      }      recvWrappedBuffer.clear();      recvWrappedBuffer.limit(recvWrappedLength);    }    while (recvWrappedBuffer.hasRemaining()) {      final int read=channel.read(recvWrappedBuffer);      if (read <= 0) {        return read;      }    }    recvWrappedBuffer.flip();    final byte[] unwrappedDataBytes=saslContext.unwrap(recvWrappedBuffer.array(),0,recvWrappedLength);    recvWrappedLength=-1;    if (unwrappedDataBytes.length > 0) {      recvUnwrappedBuffer=ByteBuffer.wrap(unwrappedDataBytes);      return recvUnwrappedBuffer.remaining();    }  }}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException("collection == null");  }  return new SynchronizedCollection<T>(collection);}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {  if (chain == null || chain.length == 0) {    System.out.println(WARN_PROMPTTM_NO_SERVER_CERT_CHAIN.get());  } else {    Date currentDate=new Date();    Date notAfterDate=chain[0].getNotAfter();    Date notBeforeDate=chain[0].getNotBefore();    if (currentDate.after(notAfterDate)) {      System.err.println(WARN_PROMPTTM_CERT_EXPIRED.get(notAfterDate));    } else     if (currentDate.before(notBeforeDate)) {      System.err.println(WARN_PROMPTTM_CERT_NOT_YET_VALID.get(notBeforeDate));    }    System.out.println(INFO_PROMPTTM_SERVER_CERT.get(chain[0].getSubjectDN().getName(),chain[0].getIssuerDN().getName(),notBeforeDate,notAfterDate));  }  LocalizableMessage prompt=INFO_PROMPTTM_YESNO_PROMPT.get();  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  while (true) {    try {      System.out.print(prompt);      String line=reader.readLine().toLowerCase();      if (line.equalsIgnoreCase(INFO_PROMPT_YES_COMPLETE_ANSWER.get().toString()) || line.equalsIgnoreCase(INFO_PROMPT_YES_FIRST_LETTER_ANSWER.get().toString())) {        return;      }      if (line.equalsIgnoreCase(INFO_PROMPT_NO_COMPLETE_ANSWER.get().toString()) || line.equalsIgnoreCase(INFO_PROMPT_NO_FIRST_LETTER_ANSWER.get().toString())) {        LocalizableMessage message=ERR_PROMPTTM_USER_REJECTED.get();        throw new CertificateException(message.toString());      }    } catch (    IOException ioe) {    }    System.out.println();  }}  }
class C{  void createSubOrganization(String subOrgName) throws SMSException {  if (!getSubOrganizationNames(subOrgName,false).isEmpty() || subOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_NAME)) {    return;  }  try {    if (ServiceManager.isConfigMigratedTo70()) {      Map attrs=new HashMap();      Set attrValues=new HashSet();      attrValues.add(SMSEntry.OC_REALM_SERVICE);      attrs.put(SMSEntry.ATTR_OBJECTCLASS,attrValues);      Map subOrgs=new HashMap();      subOrgs.put(subOrgName,attrs);      parentOrg.createSubOrganizations(subOrgs);    } else {      Set subOrgs=new HashSet();      subOrgs.add(subOrgName);      parentOrg.createSubOrganizations(subOrgs);    }  } catch (  AMException ame) {    if (!ame.getErrorCode().equals("474")) {      if (debug.messageEnabled()) {        debug.message("OrgConfigViaAMSDK::createSubOrganization" + ": failed with AMException",ame);      }      throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));    }  }catch (  SSOException ssoe) {    throw (new SMSException(bundle.getString("sms-INVALID_SSO_TOKEN"),ssoe,"sms-INVALID_SSO_TOKEN"));  }}  }
class C{  @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  private boolean readEqualsSign(){  skipWhitespace();  if (pos < input.length() && input.charAt(pos) == '=') {    pos++;    return true;  }  return false;}  }
class C{  public StoreFactoryRule(String storeFactoryClass,String attributeName,String storeAppenderClass,String appenderAttributeName){  this.storeFactoryClass=storeFactoryClass;  this.attributeName=attributeName;  this.appenderAttributeName=appenderAttributeName;  this.storeAppenderClass=storeAppenderClass;}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  void nextRequest(){  request.recycle();  if (lastValid - pos > 0 && pos > 0) {    System.arraycopy(buf,pos,buf,0,lastValid - pos);  }  lastValid=lastValid - pos;  pos=0;  for (int i=0; i <= lastActiveFilter; i++) {    activeFilters[i].recycle();  }  lastActiveFilter=-1;  parsingHeader=true;  swallowInput=true;  headerParsePos=HeaderParsePosition.HEADER_START;  parsingRequestLine=true;  parsingRequestLinePhase=0;  parsingRequestLineEol=false;  parsingRequestLineStart=0;  parsingRequestLineQPos=-1;  headerData.recycle();}  }
class C{  public void addAttribute(String name,String value) throws DecodeException {  ByteStringBuilder byteBuilder=new ByteStringBuilder();  byteBuilder.appendBytes(encodedAttributes);  ASN1Writer writer=ASN1.getWriter(byteBuilder);  try {    new LDAPAttribute(name,value).write(writer);    encodedAttributes=byteBuilder.toByteArray();  } catch (  Exception e) {  }}  }
class C{  private void promptIfRequiredForPortData(UserData uData){  uData.setHostName(promptForHostNameIfRequired());  final List<Integer> usedPorts=new LinkedList<>();  final int ldapPort=promptIfRequiredForPortData(argParser.ldapPortArg,lastResetLdapPort,INFO_INSTALLDS_PROMPT_LDAPPORT.get(),usedPorts,true);  uData.setServerPort(ldapPort);  usedPorts.add(ldapPort);  final int adminConnectorPort=promptIfRequiredForPortData(argParser.adminConnectorPortArg,lastResetAdminConnectorPort,INFO_INSTALLDS_PROMPT_ADMINCONNECTORPORT.get(),usedPorts,true);  uData.setAdminConnectorPort(adminConnectorPort);  usedPorts.add(adminConnectorPort);  if (argParser.jmxPortArg.isPresent()) {    final int jmxPort=promptIfRequiredForPortData(argParser.jmxPortArg,lastResetJmxPort,INFO_INSTALLDS_PROMPT_JMXPORT.get(),usedPorts,true);    uData.setServerJMXPort(jmxPort);  } else {    uData.setServerJMXPort(-1);  }}  }
class C{  public PdfCanvas curveFromTo(double x1,double y1,double x3,double y3){  contentStream.getOutputStream().writeDouble(x1).writeSpace().writeDouble(y1).writeSpace().writeDouble(x3).writeSpace().writeDouble(y3).writeSpace().writeBytes(y);  return this;}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  public void addMenuListener(MenuListener l){  listenerList.add(MenuListener.class,l);}  }
class C{  @Inject public AuthenticationServiceV2(RestAuthenticationHandler restAuthenticationHandler){  super(restAuthenticationHandler);}  }
class C{  public Leaves(TreeSpecies species,boolean isDecayable){  this(DEFAULT_TYPE,species,isDecayable);}  }
class C{  public AbstractMethodError(){  super();}  }
class C{  public void addZoneAdjustment(ZoneAdjustment za){  zoneAdjustments.add(za);}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public static boolean isByte(String desc){  return desc.endsWith("B");}  }
class C{  public void removeLayoutComponent(Component c){}  }
class C{  public String jsTypeName(TypeRef typeRef){switch (typeRef.getKind()) {case TYPE_MESSAGE:    return "Object";case TYPE_ENUM:  return "number";default :{  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());  if (!Strings.isNullOrEmpty(name)) {    return name;  }  throw new IllegalArgumentException("unknown type kind: " + typeRef.getKind());}}}  }
class C{  @SuppressWarnings("deprecation") private void initCropFrameStyle(@NonNull TypedArray a){  int cropFrameStrokeSize=a.getDimensionPixelSize(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_frame_stroke_size,getResources().getDimensionPixelSize(R.dimen.gallery_ucrop_default_crop_frame_stroke_width));  int cropFrameColor=a.getColor(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_frame_color,getResources().getColor(R.color.gallery_default_ucrop_color_default_crop_frame));  mCropFramePaint.setStrokeWidth(cropFrameStrokeSize);  mCropFramePaint.setColor(cropFrameColor);  mCropFramePaint.setStyle(Paint.Style.STROKE);  mCropFrameCornersPaint.setStrokeWidth(cropFrameStrokeSize * 3);  mCropFrameCornersPaint.setColor(cropFrameColor);  mCropFrameCornersPaint.setStyle(Paint.Style.STROKE);}  }
class C{  public MapperListener(Service service){  this.service=service;  this.mapper=service.getMapper();}  }
class C{  public VerificationOK(X509Certificate certificate,Class<? extends CertificateVerifier> verifierClass,String message){  this.certificate=certificate;  this.verifierClass=verifierClass;  this.message=message;}  }
class C{  protected boolean pageUp(TextView widget,Spannable buffer){  return false;}  }
class C{  public static void saveAsBinary(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  BinaryPropertyListWriter.write(out,root);}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  String name=evt.getPropertyName();  if ("editorKit".equals(name)) {    ActionMap map=SwingUtilities.getUIActionMap(getComponent());    if (map != null) {      Object oldValue=evt.getOldValue();      if (oldValue instanceof EditorKit) {        Action[] actions=((EditorKit)oldValue).getActions();        if (actions != null) {          removeActions(map,actions);        }      }      Object newValue=evt.getNewValue();      if (newValue instanceof EditorKit) {        Action[] actions=((EditorKit)newValue).getActions();        if (actions != null) {          addActions(map,actions);        }      }    }    updateFocusTraversalKeys();  } else   if ("editable".equals(name)) {    updateFocusTraversalKeys();  } else   if ("foreground".equals(name) || "font".equals(name) || "document".equals(name)|| JEditorPane.W3C_LENGTH_UNITS.equals(name)|| JEditorPane.HONOR_DISPLAY_PROPERTIES.equals(name)) {    JComponent c=getComponent();    updateDisplayProperties(c.getFont(),c.getForeground());    if (JEditorPane.W3C_LENGTH_UNITS.equals(name) || JEditorPane.HONOR_DISPLAY_PROPERTIES.equals(name)) {      modelChanged();    }    if ("foreground".equals(name)) {      Object honorDisplayPropertiesObject=c.getClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES);      boolean honorDisplayProperties=false;      if (honorDisplayPropertiesObject instanceof Boolean) {        honorDisplayProperties=((Boolean)honorDisplayPropertiesObject).booleanValue();      }      if (honorDisplayProperties) {        modelChanged();      }    }  }}  }
class C{  private void initName(String className,String member,ObjectName objectName){  setClassName(className);  setMember(member);  this.objectName=objectName;}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public Future<Job> log(String msg){  Future<Job> future=Future.future();  client.rpush(RedisHelper.getKey("job:" + this.id + ":log"),msg,_completer(future,this));  return future.compose(null);}  }
class C{  public void remove(int i){  if ((i >= array.length) || (i < 0))   throw new ArrayIndexOutOfBoundsException("invalid index:" + i + ";the array length is "+ array.length);  NSObject[] newArray=new NSObject[array.length - 1];  System.arraycopy(array,0,newArray,0,i);  System.arraycopy(array,i + 1,newArray,i,array.length - i - 1);  array=newArray;}  }
class C{  private boolean updateNodeRendering(BasicNode node,SearchResultEntry entry){  if (entry != null) {    node.setNumSubOrdinates(getNumSubOrdinates(entry));    node.setHasSubOrdinates(node.getNumSubOrdinates() > 0 || getHasSubOrdinates(entry));    node.setReferral(getReferral(entry));    Set<String> ocValues=asSetOfString(entry,OBJECTCLASS_ATTRIBUTE_TYPE_NAME);    node.setObjectClassValues(ocValues.toArray(new String[0]));  }  int aciCount=getAciCount(entry);  Icon newIcon=getNewIcon(node,entry);  String newDisplayName=newDisplayName(node,entry,aciCount);  int newStyle=0;  if (isDisplayedEntryRemote(node)) {    newStyle|=Font.ITALIC;  }  boolean changed=node.getIcon() != newIcon || !node.getDisplayName().equals(newDisplayName) || node.getFontStyle() != newStyle;  if (changed) {    node.setIcon(newIcon);    node.setDisplayName(newDisplayName);    node.setFontStyle(newStyle);    return true;  }  return false;}  }
class C{  public static String encrypt(String password){  return (Crypt.encode(password));}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_SETTINGS_ID:    startActivity(new Intent(this,ActivitySettings.class));  return true;case MENU_ABOUT_ID:showAbout();return true;}return super.onOptionsItemSelected(item);}  }
class C{  private void repaintTab(int index){  if (!isRunsDirty && index >= 0 && index < tabPane.getTabCount()) {    tabPane.repaint(getTabBounds(tabPane,index));  }}  }
class C{  public X509CRLHolder(CertificateList x509CRL){  this.x509CRL=x509CRL;  this.extensions=x509CRL.getTBSCertList().getExtensions();  this.isIndirect=isIndirectCRL(extensions);  this.issuerName=new GeneralNames(new GeneralName(x509CRL.getIssuer()));}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  @Override public void send(ClusterMessage msg,Member dest){  try {    msg.setAddress(getLocalMember());    int sendOptions=channelSendOptions;    if (msg instanceof SessionMessage && ((SessionMessage)msg).getEventType() == SessionMessage.EVT_ALL_SESSION_DATA) {      sendOptions=Channel.SEND_OPTIONS_SYNCHRONIZED_ACK | Channel.SEND_OPTIONS_USE_ACK;    }    if (dest != null) {      if (!getLocalMember().equals(dest)) {        channel.send(new Member[]{dest},msg,sendOptions);      } else       log.error(sm.getString("simpleTcpCluster.unableSend.localMember",msg));    } else {      Member[] destmembers=channel.getMembers();      if (destmembers.length > 0)       channel.send(destmembers,msg,sendOptions); else       if (log.isDebugEnabled())       log.debug("No members in cluster, ignoring message:" + msg);    }  } catch (  Exception x) {    log.error(sm.getString("simpleTcpCluster.sendFailed"),x);  }}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_caseorder_avt)   m_caseorder_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_dataType_avt)   m_dataType_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_order_avt)   m_order_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_selectExpression)   m_selectExpression.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  protected HeaderParser(String header){  this.lexer=new Lexer("command_keywordLexer",header);}  }
class C{  private static DsnPinInfo read_pin_info(JflexScanner p_scanner){  try {    p_scanner.yybegin(DsnFileScanner.NAME);    String padstack_name=null;    Object next_token=p_scanner.next_token();    if (next_token instanceof String) {      padstack_name=(String)next_token;    } else     if (next_token instanceof Integer) {      padstack_name=((Integer)next_token).toString();    } else {      System.out.println("Package.read_pin_info: String or Integer expected");      return null;    }    int rotation=0;    p_scanner.yybegin(DsnFileScanner.NAME);    next_token=p_scanner.next_token();    if (next_token == DsnKeyword.OPEN_BRACKET) {      next_token=p_scanner.next_token();      if (next_token == DsnKeyword.ROTATE) {        rotation=read_rotation(p_scanner);      } else {        DsnKeywordScope.skip_scope(p_scanner);      }      p_scanner.yybegin(DsnFileScanner.NAME);      next_token=p_scanner.next_token();    }    String pin_name=null;    if (next_token instanceof String) {      pin_name=(String)next_token;    } else     if (next_token instanceof Integer) {      pin_name=((Integer)next_token).toString();    } else {      System.out.println("Package.read_pin_info: String or Integer expected");      return null;    }    double[] pin_coor=new double[2];    for (int i=0; i < 2; ++i) {      next_token=p_scanner.next_token();      if (next_token instanceof Double) {        pin_coor[i]=((Double)next_token).doubleValue();      } else       if (next_token instanceof Integer) {        pin_coor[i]=((Integer)next_token).intValue();      } else {        System.out.println("Package.read_pin_info: number expected");        return null;      }    }    for (; ; ) {      Object prev_token=next_token;      next_token=p_scanner.next_token();      if (next_token == null) {        System.out.println("Package.read_pin_info: unexpected end of file");        return null;      }      if (next_token == DsnKeyword.CLOSED_BRACKET) {        break;      }      if (prev_token == DsnKeyword.OPEN_BRACKET) {        if (next_token == DsnKeyword.ROTATE) {          rotation=read_rotation(p_scanner);        } else {          DsnKeywordScope.skip_scope(p_scanner);        }      }    }    return new DsnPinInfo(padstack_name,pin_name,pin_coor,rotation);  } catch (  java.io.IOException e) {    System.out.println("Package.read_pin_info: IO error while scanning file");    return null;  }}  }
class C{  public InvalidKeyException(String msg){  super(msg);}  }
class C{  public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  Set configuredHTTPHeaders=(Set)request.getAttribute("SM-HTTPHeaders");  if (configuredHTTPHeaders == null || configuredHTTPHeaders.isEmpty()) {    System.out.println("HTTP headers in auth module are not configured");    return;  }  for (Iterator iter=configuredHTTPHeaders.iterator(); iter.hasNext(); ) {    String configHeader=(String)iter.next();    String headerValue=request.getHeader(configHeader);    if (headerValue == null) {      System.out.println("Config Header " + configHeader + " is not present");      continue;    }    try {      ssoToken.setProperty(configHeader,headerValue);    } catch (    SSOException se) {      throw new AuthenticationException(se.getMessage());    }  }}  }
class C{  public void testBitCountNeg(){  BigInteger aNumber=new BigInteger("-12378634756382937873487638746283767238657872368748726875");  assertEquals(87,aNumber.bitCount());}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  public boolean isUserInRole(String role){  return this._getHttpServletRequest() != null && this._getHttpServletRequest().isUserInRole(role);}  }
class C{  public static HierarchyListener add(HierarchyListener a,HierarchyListener b){  return (HierarchyListener)addInternal(a,b);}  }
class C{  public BAD_CONTEXT(){  this("");}  }
class C{  PendingChange(CSN csn,PluginOperation op,UpdateMsg msg){  this.csn=csn;  this.committed=false;  this.op=op;  this.msg=msg;}  }
class C{  public static FSLogoutResponse parseXML(String xml) throws FSMsgException {  FSLogoutResponse logoutResponse=null;  try {    Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);    Element root=doc.getDocumentElement();    logoutResponse=new FSLogoutResponse(root);  } catch (  SAMLException ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutResponse.parseXML: " + "Error while parsing input xml string");    }    throw new FSMsgException("parseError",null,ex);  }  return logoutResponse;}  }
class C{  public NoSuchObjectException(String s){  super(s);}  }
class C{  public static MatchedValuesFilter decode(ASN1Reader reader) throws LDAPException {  byte type;  try {    type=reader.peekType();  } catch (  Exception e) {    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,ERR_MVFILTER_INVALID_ELEMENT_TYPE.get(e));  }switch (type) {case EQUALITY_MATCH_TYPE:case GREATER_OR_EQUAL_TYPE:case LESS_OR_EQUAL_TYPE:case APPROXIMATE_MATCH_TYPE:    try {      reader.readStartSequence();      String rawAttributeType=reader.readOctetStringAsString();      ByteString rawAssertionValue=reader.readOctetString();      reader.readEndSequence();      return new MatchedValuesFilter(type,rawAttributeType,rawAssertionValue,null,null,null,null);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_MVFILTER_CANNOT_DECODE_AVA.get(getExceptionMessage(e));      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message,e);    }case SUBSTRINGS_TYPE:  try {    reader.readStartSequence();    String rawAttributeType=reader.readOctetStringAsString();    reader.readStartSequence();    if (!reader.hasNextElement()) {      LocalizableMessage message=ERR_MVFILTER_NO_SUBSTRING_ELEMENTS.get();      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    }    ByteString subInitial=null;    ArrayList<ByteString> subAny=null;    ByteString subFinal=null;    if (reader.hasNextElement() && reader.peekType() == TYPE_SUBINITIAL) {      subInitial=reader.readOctetString();    }    while (reader.hasNextElement() && reader.peekType() == TYPE_SUBANY) {      if (subAny == null) {        subAny=new ArrayList<>();      }      subAny.add(reader.readOctetString());    }    if (reader.hasNextElement() && reader.peekType() == TYPE_SUBFINAL) {      subFinal=reader.readOctetString();    }    reader.readEndSequence();    reader.readEndSequence();    return new MatchedValuesFilter(type,rawAttributeType,null,subInitial,subAny,subFinal,null);  } catch (  LDAPException le) {    throw le;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_MVFILTER_CANNOT_DECODE_SUBSTRINGS.get(getExceptionMessage(e));    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message,e);  }case PRESENT_TYPE:try {  String rawAttributeType=reader.readOctetStringAsString();  return new MatchedValuesFilter(type,rawAttributeType,null,null,null,null,null);} catch (Exception e) {  logger.traceException(e);  LocalizableMessage message=ERR_MVFILTER_CANNOT_DECODE_PRESENT_TYPE.get(getExceptionMessage(e));  throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message,e);}case EXTENSIBLE_MATCH_TYPE:try {reader.readStartSequence();String rawAttributeType=null;String matchingRuleID=null;if (reader.peekType() == TYPE_MATCHING_RULE_ID) {  matchingRuleID=reader.readOctetStringAsString();}if (matchingRuleID == null || reader.peekType() == TYPE_MATCHING_RULE_TYPE) {  rawAttributeType=reader.readOctetStringAsString();}ByteString rawAssertionValue=reader.readOctetString();reader.readEndSequence();return new MatchedValuesFilter(type,rawAttributeType,rawAssertionValue,null,null,null,matchingRuleID);} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_MVFILTER_CANNOT_DECODE_EXTENSIBLE_MATCH.get(getExceptionMessage(e));throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message,e);}default :LocalizableMessage message=ERR_MVFILTER_INVALID_ELEMENT_TYPE.get(byteToHex(type));throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}}  }
class C{  public boolean asksAllowsChildren(){  return asksAllowsChildren;}  }
class C{  public void addInitParameter(String name,String value){  if (parameters.containsKey(name)) {    return;  }  parameters.put(name,value);}  }
class C{  @Override public void closeJDBCConn(){  if (conn != null) {    try {      System.out.println("StreamingQuoteDAOModeQuote.closeJDBCConn(): Closing JDBC connection for Streaming Quote...");      conn.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeQuote.closeJDBCConn(): SQLException on conn close");      e.printStackTrace();    }  } else {    System.out.println("StreamingQuoteDAOModeQuote.closeJDBCConn(): WARNING: DB connection already null");  }}  }
class C{  public static boolean isEnum(int mod){  return (mod & ACC_ENUM) != 0;}  }
class C{  public PlaPointInt center_get(){  return abit_center;}  }
class C{  public void policyChanged(PolicyEvent policyEvent){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: delegation policy changed.");  }  cleanupCache();}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@Valid @RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin()).map(null).orElseGet(null);}  }
class C{  public boolean isWindowsServiceEnabled(){  return isWindowsServiceEnabled;}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher){  this(cipher,new PKCS7Padding());}  }
class C{  public SearchResults(int count,Set<T> results,int errorCode){  this.count=count;  searchResults=results;  this.errorCode=errorCode;}  }
class C{  private void updateSchemaFile(String schemaFile,List<SchemaElement> schemaElements) throws OpenDsException {  try (final LDIFExportConfig exportConfig=new LDIFExportConfig(schemaFile,ExistingFileBehavior.OVERWRITE)){    try (final LDIFReader reader=new LDIFReader(new LDIFImportConfig(schemaFile))){      final Entry schemaEntry=reader.readEntry();      addElementsToEntry(schemaElements,schemaEntry);      try (final LDIFWriter writer=new LDIFWriter(exportConfig)){        writer.writeEntry(schemaEntry);        exportConfig.getWriter().newLine();      }     } catch (    Throwable t) {      throw new OfflineUpdateException(ERR_CTRL_PANEL_ERROR_UPDATING_SCHEMA.get(t),t);    }  } }  }
class C{  public AccessRequest(){  super(PacketType.ACCESS_REQUEST);}  }
class C{  private static String unquote(String value){  int valueLength=value.length();  StringBuilder buffer=new StringBuilder(valueLength);  boolean escaped=false;  for (int i=0; i < valueLength; ++i) {    char currentChar=value.charAt(i);    if (!escaped && (currentChar != '\\')) {      buffer.append(currentChar);    } else     if (escaped) {      buffer.append(currentChar);      escaped=false;    } else {      escaped=true;    }  }  return buffer.toString();}  }
class C{  private String configureLoginConfFile(GSSAPISASLMechanismHandlerCfg configuration) throws IOException, InitializationException {  File tempFile=File.createTempFile("login",".conf",getFileForPath(CONFIG_DIR_NAME));  String configFileName=tempFile.getAbsolutePath();  tempFile.deleteOnExit();  BufferedWriter w=new BufferedWriter(new FileWriter(tempFile,false));  w.write(getClass().getName() + " {");  w.newLine();  w.write("  com.sun.security.auth.module.Krb5LoginModule required " + "storeKey=true useKeyTab=true doNotPrompt=true ");  String keyTabFilePath=configuration.getKeytab();  if (keyTabFilePath == null) {    String home=System.getProperty("user.home");    String sep=System.getProperty("file.separator");    keyTabFilePath=home + sep + "krb5.keytab";  }  File keyTabFile=new File(keyTabFilePath);  if (!keyTabFile.exists()) {    LocalizableMessage msg=ERR_SASL_GSSAPI_KEYTAB_INVALID.get(keyTabFilePath);    throw new InitializationException(msg);  }  w.write("keyTab=\"" + keyTabFile + "\" ");  StringBuilder principal=new StringBuilder();  String principalName=configuration.getPrincipalName();  String realm=configuration.getRealm();  if (principalName != null) {    principal.append("principal=\"").append(principalName);  } else {    principal.append("principal=\"ldap/").append(serverFQDN);  }  if (realm != null) {    principal.append("@").append(realm);  }  w.write(principal.toString());  logger.error(INFO_GSSAPI_PRINCIPAL_NAME,principal);  w.write("\" isInitiator=false;");  w.newLine();  w.write("};");  w.newLine();  w.flush();  w.close();  return configFileName;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  private String separeMetaTagsContent(String content){  String result=Utils.pregMatch(content,Constants.METATAG_CONTENT_PATTERN,1);  return htmlDecode(result);}  }
class C{  public static void addPropertyDefinition(PropertyDefinition<?> pd){  TestChildCfgDefn.getInstance().registerPropertyDefinition(pd);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.KeyInfoConfirmationDataType createKeyInfoConfirmationDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.KeyInfoConfirmationDataTypeImpl();}  }
class C{  public static Foo fetchByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_First(uuid,orderByComparator);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public void ssoTokenChanged(SSOTokenEvent stEvent){  boolean isValid;  SSOToken ssoToken=stEvent.getToken();  try {    isValid=SSOTokenManager.getInstance().isValidToken(ssoToken);  } catch (  SSOException se) {    isValid=false;  }  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("In AMSSOTokenListener." + "ssoTokenChanged(): Principal: " + principalName + " ssoToken: "+ isValid);  }  if (!isValid) {    Set dnSet=AMObjectImpl.removeFromProfileNameTable(ssoToken);    if (dnSet != null) {      if (AMCommonUtils.debug.messageEnabled()) {        AMCommonUtils.debug.message("In AMSSOTokenListener." + "ssoTokenChanged(): dnSet NOT null!");      }      AMObjectImpl.removeObjImplListeners(dnSet,ssoToken.getTokenID());    }  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    this.ackReceived=true;    System.out.println("Got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    Request messageRequest=dialog.createRequest(Request.MESSAGE);    CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);    ClientTransaction ct=provider.getNewClientTransaction(messageRequest);    cseq.setSeqNumber(1);    ct.sendRequest();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private List<String> wrapLine(String line,int length){  if (line.length() <= length) {    return Collections.<String>singletonList(line);  }  List<String> result=new ArrayList<>(line.length() / length + 1);  StringBuilder current=new StringBuilder();  for (  String word : Splitter.onPattern("\\s").omitEmptyStrings().split(line)) {    current.append(" ");    current.append(word);    if (current.length() >= length) {      result.add(current.substring(1));      current.setLength(0);    }  }  if (current.length() > 0) {    result.add(current.substring(1));  }  return result;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  removePageSessionAttribute(PROPERTY_ATTRIBUTE);  populateValues=true;  forwardTo();}  }
class C{  public int indexOf(String attrName){  attrName=attrName.toLowerCase();  int index=-1;  int size=_attrs.size();  for (int i=0; i < size; i++) {    if (attrName.equals(((Attr)_attrs.get(i)).getName())) {      index=i;      break;    }  }  return index;}  }
class C{  public void testSubtractMathContextEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.23121247898749E+41";  int cScale=-27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(15,RoundingMode.CEILING);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType createX509DataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl();}  }
class C{  public boolean supportsPreStripping(){  return false;}  }
class C{  public void testConstructorSignBytesPositive7(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=1;  byte rBytes[]={0,-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private HashMap<AccountStatusNotificationType,String> parseSubjects(SMTPAccountStatusNotificationHandlerCfg configuration) throws ConfigException {  HashMap<AccountStatusNotificationType,String> map=new HashMap<>();  for (  String s : configuration.getMessageSubject()) {    int colonPos=s.indexOf(':');    if (colonPos < 0) {      throw new ConfigException(ERR_SMTP_ASNH_SUBJECT_NO_COLON.get(s,configuration.dn()));    }    String notificationTypeName=s.substring(0,colonPos).trim();    AccountStatusNotificationType t=AccountStatusNotificationType.typeForName(notificationTypeName);    if (t == null) {      throw new ConfigException(ERR_SMTP_ASNH_SUBJECT_INVALID_NOTIFICATION_TYPE.get(s,configuration.dn(),notificationTypeName));    } else     if (map.containsKey(t)) {      throw new ConfigException(ERR_SMTP_ASNH_SUBJECT_DUPLICATE_TYPE.get(configuration.dn(),notificationTypeName));    }    map.put(t,s.substring(colonPos + 1).trim());    if (logger.isTraceEnabled()) {      logger.trace("Subject for notification type " + t.getName() + ":  "+ map.get(t));    }  }  return map;}  }
class C{  public BasicAttributes(String attrID,Object val){  this();  this.put(new BasicAttribute(attrID,val));}  }
class C{  public boolean validate(Set<String> values){  if (values.isEmpty()) {    return true;  }  Set<String> idSet=new HashSet<>();  Set<String> urlSet=new HashSet<>();  boolean siteLookup;  siteLookup=getSiteDetails();  for (  String value : values) {    StringTokenizer tok=new StringTokenizer(value,"|");    String url=tok.nextToken();    StringBuilder buff=new StringBuilder();    int count=0;    while (tok.hasMoreTokens()) {      String lbid=tok.nextToken();      if (lbid.getBytes().length != 2) {        return false;      }switch (count) {case 0:        if (siteLookup) {          if (siteIdSet.contains(lbid)) {            return false;          }        }      break;default :    if (count > 0) {      int idx=(buff.toString()).indexOf(lbid);      if (idx > -1) {        return false;      }      if (siteLookup) {        if (!validateID(lbid)) {          return false;        }      } else {        if (debug.messageEnabled()) {          debug.message("Unable to get site list " + "information. Site validation cannot " + "be performed");        }      }    } else {      return false;    }  break;}buff.append(lbid);if (tok.hasMoreTokens()) {buff.append("|");count++;}if (idSet.contains(lbid) && count < 1) {return false;} else {idSet.add(lbid);}}if (urlSet.contains(url)) {return false;} else {urlSet.add(url);}if (siteAddrSet.contains(url)) {return false;}}return true;}  }
class C{  public void close() throws IOException {}  }
class C{  public boolean findMethod(String method){  if (methods.length == 0 && omittedMethods.length == 0)   return true;  if (methods.length > 0) {    for (int i=0; i < methods.length; i++) {      if (methods[i].equals(method))       return true;    }    return false;  }  if (omittedMethods.length > 0) {    for (int i=0; i < omittedMethods.length; i++) {      if (omittedMethods[i].equals(method))       return false;    }  }  return true;}  }
class C{  public boolean is_inside(PlaPointInt begin,PlaPointInt end,double margin){  if (is_nan || begin.is_nan || end.is_nan)   return false;  double d_begin_this=begin.distance_square(this);  double d_end_this=end.distance_square(this);  double d_begin_end=begin.distance_square(end);  if (d_begin_end >= d_begin_this + margin) {    if (d_begin_end >= d_end_this + margin) {      return true;    } else {      return false;    }  } else {    if (d_begin_end >= d_end_this + margin) {      return false;    } else {      return false;    }  }}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public PropertyEditorSupport(){  setSource(this);}  }
class C{  public void addEventHandler(final EventTypes event,final Class<? extends IEventHandler> eventHandler){  EventCommandData eventCommandData=new EventCommandData(eventHandler);  eventHandlers.get(event).add(eventCommandData);}  }
class C{  public int hashCode(){  int hash=mask;  if (rangeSet != null) {    hash&=CONTEXTUAL_MASK;    hash^=rangeSet.hashCode();  }  return hash;}  }
class C{  public SQLTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void deleteOrganizations(Set organizationDNs) throws AMException, SSOException {  Iterator iter=organizationDNs.iterator();  while (iter.hasNext()) {    String organizationDN=(String)iter.next();    AMOrganization org=new AMOrganizationImpl(super.token,organizationDN);    org.delete();  }}  }
class C{  private void determineColumnWidths(){  int minWidth=indentWidth;  int expandableColumnSize=0;  for (int i=0; i < totalColumns; i++) {    int actualSize=columnWidths.get(i);    if (fixedColumns.containsKey(i)) {      int requestedSize=fixedColumns.get(i);      if (requestedSize == 0) {        expandableColumnSize+=actualSize;      } else {        columnWidths.set(i,requestedSize);        minWidth+=requestedSize;      }    } else {      minWidth+=actualSize;    }    if (i > 0) {      minWidth+=padding * 2 + columnSeparator.length();    }  }  if (minWidth > totalWidth) {  } else {    int available=totalWidth - minWidth;    if (expandableColumnSize > available) {      for (int i=0; i < totalColumns; i++) {        int actualSize=columnWidths.get(i);        if (fixedColumns.containsKey(i)) {          int requestedSize=fixedColumns.get(i);          if (requestedSize == 0) {            requestedSize=(actualSize * available) / expandableColumnSize;            columnWidths.set(i,requestedSize);          }        }      }    }  }}  }
class C{  public void die(){  alive=false;}  }
class C{  public void testGetInternalSubset() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String internal;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root",nullNS,nullNS);  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  static Method findMethod(Class<?> cls,String methodName,int argCount,Class args[]){  if (methodName == null) {    return null;  }  return internalFindMethod(cls,methodName,argCount,args);}  }
class C{  public ClientHello(HandshakeIODataStream in) throws IOException {  if (in.readUint8() != 1) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello");  }  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  int cipher_spec_length=in.readUint16();  if (in.readUint16() != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");  }  int challenge_length=in.readUint16();  if (challenge_length < 16) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, short challenge data");  }  session_id=EmptyArray.BYTE;  cipher_suites=new CipherSuite[cipher_spec_length / 3];  for (int i=0; i < cipher_suites.length; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    byte b2=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1,b2);  }  compression_methods=new byte[]{0};  if (challenge_length < 32) {    Arrays.fill(random,0,32 - challenge_length,(byte)0);    System.arraycopy(in.read(challenge_length),0,random,32 - challenge_length,challenge_length);  } else   if (challenge_length == 32) {    System.arraycopy(in.read(32),0,random,0,32);  } else {    System.arraycopy(in.read(challenge_length),challenge_length - 32,random,0,32);  }  if (in.available() > 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, extra data");  }  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;}  }
