class C{  private void assignPorts(Map<Initiator,List<StoragePort>> assignments,URI netURI,Initiator initiator,List<StoragePort> assignedPorts,Map<StoragePort,Integer> portUseCounts){  for (  StoragePort port : assignedPorts) {    _log.info(String.format("Port %s (%s) network %s assigned to initiator %s (%s)\n",port.getPortName(),port.getPortNetworkId(),netURI,initiator.getInitiatorPort(),initiator.getHostName()));    addPortUse(portUseCounts,port);  }  if (assignments.get(initiator) != null) {    assignments.get(initiator).addAll(assignedPorts);  } else {    assignments.put(initiator,assignedPorts);  }}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  public void mouseDragged(MouseEvent event){}  }
class C{  public static void limpar(Label... no){  for (  Label campo : no) {    campo.setText("");  }}  }
class C{  public void addEndBumper(){  numEndBumpers++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="EB" + numEndBumpers;    if (finder.findPositionablePointByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numEndBumpers++;    }  }  PositionablePoint o=new PositionablePoint(name,PositionablePoint.END_BUMPER,currentPoint,this);  pointList.add(o);  setDirty(true);}  }
class C{  public TExportableElement basicGetImportedElement(){  return importedElement;}  }
class C{  public void logNumberOfWalletBusyListeners(){  log.debug("There are " + walletBusyListeners.size() + " walletBusyListeners.");}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null,null);}  }
class C{  public static File zip(File dir,String dest){  File zippedFile=new File(dest + "/" + dir.getName()+ ".zip");  zipTo(dir,zippedFile);  return zippedFile;}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public boolean visitingMethod(){  return visitingMethod;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private int collectCoalInfo(Tree tree,NodeRef node,int loc,CoalInfo[] info){  info[loc]=new CoalInfo(tree.getNodeHeight(node),tree.getChildCount(node));  int newLoc=loc - 1;  for (int i=0; i < 2; i++) {    NodeRef child=tree.getChild(node,i);    info[loc].sinfo[i]=new FixedBitSet(nSpecies());    if (tree.isExternal(child)) {      info[loc].sinfo[i].set(taxon2Species.get(tree.getNodeTaxon(child)));      assert tree.getNodeHeight(child) == 0;    } else {      final int used=collectCoalInfo(tree,child,newLoc,info);      for (int j=0; j < info[newLoc].sinfo.length; ++j) {        info[loc].sinfo[i].union(info[newLoc].sinfo[j]);      }      newLoc=used;    }  }  return newLoc;}  }
class C{  public long update(final RemoveOp remove,final AddOp add) throws Exception {  return update(remove,add,UUID.randomUUID());}  }
class C{  private void endRecording(boolean trackStopped,long trackId){  voiceExecutor.shutdown();  splitExecutor.shutdown();  if (sensorManager != null) {    SensorManagerFactory.releaseSystemSensorManager();    sensorManager=null;  }  lastLocation=null;  sendTrackBroadcast(trackStopped ? R.string.track_stopped_broadcast_action : R.string.track_paused_broadcast_action,trackId);  stopGps(trackStopped);}  }
class C{  public Enumeration<Register> enumerateNonvolatileConditionRegisters(){  return new PhysicalRegisterEnumeration(0,-1);}  }
class C{  protected List<Centroid> computeCentroids(int dim,List<V> vectorcolumn,List<ClassLabel> keys,Map<ClassLabel,TIntList> classes){  final int numc=keys.size();  List<Centroid> centroids=new ArrayList<>(numc);  for (int i=0; i < numc; i++) {    Centroid c=new Centroid(dim);    for (TIntIterator it=classes.get(keys.get(i)).iterator(); it.hasNext(); ) {      c.put(vectorcolumn.get(it.next()));    }    centroids.add(c);  }  return centroids;}  }
class C{  protected boolean basicWait(long msecs,StoppableCountDownLatch latch) throws InterruptedException, ReplyException {  if (Thread.interrupted()) {    throw new InterruptedException();  }  if (stillWaiting()) {    long timeout=getAckWaitThreshold() * 1000L;    long timeSoFar=System.currentTimeMillis() - this.initTime;    long severeAlertTimeout=getAckSevereAlertThresholdMS();    if (timeout <= 0) {      timeout=Long.MAX_VALUE;    }    if (msecs == 0) {      boolean timedOut=false;      if (timeout <= timeSoFar + 1) {        timedOut=!latch.await(10);      }      if (timedOut || !latch.await(timeout - timeSoFar - 1)) {        this.dmgr.getCancelCriterion().checkCancelInProgress(null);        timeout(isSevereAlertProcessingEnabled() && (severeAlertTimeout > 0),false);        if (isSevereAlertProcessingEnabled() && severeAlertTimeout > 0) {          boolean timedout;          do {            this.severeAlertTimerReset=false;            timedout=!latch.await(severeAlertTimeout);          } while (timedout && this.severeAlertTimerReset);          if (timedout) {            this.dmgr.getCancelCriterion().checkCancelInProgress(null);            timeout(false,true);            latch.await();          }        } else {          latch.await();        }        logger.info(LocalizedMessage.create(LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_COMPLETED_1,shortName()));      }    } else {      if (msecs > timeout) {        if (!latch.await(timeout)) {          timeout(isSevereAlertProcessingEnabled() && (severeAlertTimeout > 0),false);          if (!latch.await(msecs - timeout)) {            logger.info(LocalizedMessage.create(LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_TIMING_OUT_AFTER_0_SEC,Long.valueOf(msecs / 1000)));            return false;          }          logger.info(LocalizedMessage.create(LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_COMPLETED_1,shortName()));        }      } else {        if (!latch.await(msecs)) {          return false;        }      }    }  }  Assert.assertTrue(latch != this.latch || !stillWaiting(),this);  if (stopBecauseOfExceptions()) {    throw this.exception;  }  return true;}  }
class C{  public void readData(DataInput din) throws IOException {  reference=din.readUnsignedShort();}  }
class C{  private void fillByTarget(RPAction action){  if (action.has(EquipActionConsts.TARGET_OBJECT) && action.has(EquipActionConsts.TARGET_SLOT)) {    fillBySlotTarget(action);  } else   if (action.has(EquipActionConsts.GROUND_X) && action.has(EquipActionConsts.GROUND_Y)) {    fillByGroundTarget(action);  } else {    logger.warn("Target identification missing in " + action);  }}  }
class C{  private GLBubble[] generateBubbles(float[] color,int count){  GLBubble[] bubbles=new GLBubble[count];  for (int i=0; i < count; i++) {    float size=configuration.bubbleSize;    if (configuration.randomizeBubbleSize) {      size*=0.5f + random.nextFloat() * 0.8f;    }    float shift=random.nextFloat() * 0.1f * (random.nextBoolean() ? 1 : -1);    float[] col=new float[color.length];    System.arraycopy(color,0,col,0,col.length);    bubbles[i]=new GLBubble(col,-1 + random.nextFloat() * 2,bubbleFromY + shift,bubbleToY,size,random);  }  return bubbles;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public MemStatement(MemResource subject,MemIRI predicate,MemValue object,MemResource context,int sinceSnapshot){  this(subject,predicate,object,context,true,sinceSnapshot);}  }
class C{  public VelocityLoader(String path){  try {    Velocity.init(path + "WEB-INF/velocity.properties");  } catch (  Exception e) {    log.error("Problem initializing Velocity : " + e);    System.out.println("Problem initializing Velocity : " + e);  }}  }
class C{  @Nullable public Collection<TcpDiscoveryNode> topology(){  return top;}  }
class C{  private void createField(ResultSet rs){  GridFieldVO voF=GridFieldVO.createParameter(Env.getCtx(),m_WindowNo,rs);  GridField mField=new GridField(voF);  m_mFields.add(mField);  gbc.gridy=m_line++;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridx=0;  gbc.weightx=0;  JLabel label=VEditorFactory.getLabel(mField);  if (label == null) {    gbc.insets=nullInset;    centerPanel.add(Box.createHorizontalStrut(12),gbc);  } else {    gbc.insets=labelInset;    centerPanel.add(label,gbc);  }  gbc.insets=fieldInset;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridwidth=1;  gbc.gridx=1;  gbc.weightx=1;  VEditor vEditor=VEditorFactory.getEditor(mField,false);  vEditor.addVetoableChangeListener(this);  mField.addPropertyChangeListener(vEditor);  Object defaultObject=mField.getDefault();  mField.setValue(defaultObject,true);  centerPanel.add((Component)vEditor,gbc);  m_vEditors.add(vEditor);  if (voF.isRange) {    gbc.gridx=2;    gbc.weightx=0;    gbc.fill=GridBagConstraints.NONE;    centerPanel.add(new JLabel(" - "),gbc);    gbc.gridx=3;    gbc.insets=fieldInsetRight;    gbc.weightx=1;    gbc.fill=GridBagConstraints.HORIZONTAL;    gbc.anchor=GridBagConstraints.WEST;    GridFieldVO voF2=GridFieldVO.createParameter(voF);    GridField mField2=new GridField(voF2);    m_mFields2.add(mField2);    VEditor vEditor2=VEditorFactory.getEditor(mField2,false);    mField2.addPropertyChangeListener(vEditor2);    Object defaultObject2=mField2.getDefault();    mField2.setValue(defaultObject2,true);    centerPanel.add((Component)vEditor2,gbc);    m_vEditors2.add(vEditor2);  } else {    m_mFields2.add(null);    m_vEditors2.add(null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.187 -0400",hash_original_method="20D468A8CD1631775F8912B53FDABFD1",hash_generated_method="63C151FB98BC18B038898CFC51FF24BF") public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  if (cursor != null) {    final int totalCount=cursor.getCount();    if (totalCount > 0) {      cursor.moveToFirst();      String name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));      mMessageText.setText(getResources().getString(R.string.contacts_string,totalCount,name));      Log.d(TAG,"First contact loaded: " + name);      Log.d(TAG,"Total number of contacts: " + totalCount);      Log.d(TAG,"Total number of contacts: " + totalCount);    } else {      Log.d(TAG,"List of contacts is empty.");      mMessageText.setText(R.string.contacts_empty);    }  }}  }
class C{  public void registerFocusHotkey(final JComponent rootComponent,final KeyStroke keyStroke){  textField.registerFocusHotkey(rootComponent,keyStroke);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENUM_PROPERTY_SOURCE;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() * right.num());}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public Edge addChildEdge(Node parent,Node child){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public Messages(Class<?> clazz,String name){  this((Messages)null,clazz,name);}  }
class C{  public static void runConcurrently(final Callable<Void> task) throws Exception {  runConcurrently(task,50);}  }
class C{  private static void checkAndApplyNexus5FrameRateWorkaround(RequestBuilder request){  if (ApiHelper.IS_NEXUS_5) {    Range<Integer> frameRateBackOff=new Range<>(7,24);    request.setParam(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,frameRateBackOff);  }}  }
class C{  public RelatedTo addRelatedTo(String uid){  RelatedTo prop=new RelatedTo(uid);  addRelatedTo(prop);  return prop;}  }
class C{  @Override public Phase advancePhase(Phase phase){  if (phase == left) {    return right;  }  if (phase == right) {    return self;  }  return done;}  }
class C{  public void paintDesktopIconBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private final boolean readAndCopy(InputStream is,int n,OutputStream os) throws IOException {  int timeoutCounter=0;  while (n > 0) {    try {      final int nr=is.read(bReadBuf,0,Math.min(bReadBuf.length,n));      if (nr > 0) {        n-=nr;        if (os != null)         os.write(bReadBuf,0,nr);        timeoutCounter=0;      } else       if (nr < 0)       return false;    } catch (    SocketTimeoutException e) {      if (timeoutCounter >= TCPIPProviderBase.timeoutNumIntervals) {        Log.logger.log(Level.INFO,"TIMEOUT");        return false;      } else       if (shutdown)       return false; else       timeoutCounter++;    }  }  return (n <= 0);}  }
class C{  public void initialise(int base,double epsilons[]){  this.epsilons=epsilons;  usingSingleKernelWidthValue=false;  mvke.initialise(epsilons);  initialiseCommon(base);}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    label.setText("" + SmellSensor.DEFAULT_LABEL);    theta.setText("" + SmellSensor.DEFAULT_THETA);    radius.setText("" + SmellSensor.DEFAULT_RADIUS);  } else {    label.setText("" + smellSensor.getLabel());    theta.setText("" + smellSensor.getTheta());    radius.setText("" + smellSensor.getRadius());  }}  }
class C{  private static int doHeadRequest(final CloseableHttpClient client,final String url) throws Exception {  return client.execute(new HttpHead(url)).getStatusLine().getStatusCode();}  }
class C{  public boolean end(int addr,int line){  if (!isEnd) {    this.isEnd=true;    this.endAddr=addr;    return true;  }  return false;}  }
class C{  private void applyDecorationOnStyle(Style style,int decoration){  int curDecoration=style.getTextDecoration();  if ((curDecoration & decoration) == 0) {    style.setTextDecoration(curDecoration | decoration);  }}  }
class C{  private double allowableError(int rank){  int size=samples.size();  final double error=calculateError(rank,size);  final double minError=size + 1;  if (error < minError) {    return error;  }  return minError;}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  boolean DS(Object name1,Object name2){  ValueGraphVertex v1=valueGraph.getVertex(name1);  ValueGraphVertex v2=valueGraph.getVertex(name2);  return v1.getValueNumber() == v2.getValueNumber();}  }
class C{  public void bindString(int index,String value){}  }
class C{  public int tether(String iface){  try {    return mService.tether(iface);  } catch (  RemoteException e) {    return TETHER_ERROR_SERVICE_UNAVAIL;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.992 -0500",hash_original_method="3AF6887A924E6E03501A94FECACFA30D",hash_generated_method="5705C3169A8CBCB52CD642431AD8E122") public PhoneNumber number(){  return number;}  }
class C{  public static CounterSetFormat forMIMEType(final String mimeType){  return forMIMEType(mimeType,null);}  }
class C{  public Boolean isLoaded(){  return handle != null ? true : false;}  }
class C{  public StateObject addStateObject(StateObject context,String name){  if (context != null && !containsElement(context.elem)) {    String message=Logging.getMessage("RestorableSupport.InvalidStateObject");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (name == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return createStateObject(context != null ? context.elem : null,name,null);}  }
class C{  public void updateProcessIndex(){  rawProcessIndex=(rawProcessIndex + 1) & (buffSizeMinusOne);}  }
class C{  private static void handlePossibleRecursiveShutdown(){  handlePossibleRecursiveExit("shutdown",++inShutdown);}  }
class C{  protected void linearScanBatchKNN(List<O> objs,List<KNNHeap> heaps){  final int size=objs.size();  for (DBIDIter iter=relation.getDBIDs().iter(); iter.valid(); iter.advance()) {    O candidate=relation.get(iter);    for (int index=0; index < size; index++) {      final KNNHeap heap=heaps.get(index);      final double dist=rawdist.distance(objs.get(index),candidate);      if (dist <= heap.getKNNDistance()) {        heap.insert(dist,iter);      }    }  }}  }
class C{  public static <T>T withWriter(OutputStream stream,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriter(new OutputStreamWriter(stream),closure);}  }
class C{  public static void main(String args[]) throws Exception {  int res=ToolRunner.run(NutchConfiguration.create(),new Generator(),args);  System.exit(res);}  }
class C{  public ManagementPermission(String name){  super(name);  if (!name.equals("control") && !name.equals("monitor")) {    throw new IllegalArgumentException("name: " + name);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double gridRes;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  outputType=args[2].toLowerCase();  logTransform=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 2 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 3 of 3:",0);    oldProgress=-1;    if (outputType.contains("specific") || outputType.contains("sca")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (outputType.contains("total")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    if (logTransform) {      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static RulesContext create(List<? extends BaseRule> rules,Properties properties){  RulesContext context=new RulesContext();  context.initProperties(properties);  context.initRules(rules);  context.initDone();  return context;}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileSeedMerger().start(args);}  }
class C{  private boolean needToCopyBgColorImage(Image img){  boolean needToCopy;  AffineTransform transform=getTransform();  return (transform.getType() & (AffineTransform.TYPE_GENERAL_ROTATION | AffineTransform.TYPE_GENERAL_TRANSFORM)) != 0;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public boolean drawTextFeatures(){  return drawTextFeatures;}  }
class C{  @Override public final int sum(){  return mSum;}  }
class C{  public RangeQueryBuilder to(float to){  this.to=to;  return this;}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3});}  }
class C{  public SplittableRandom(){  long s=defaultGen.getAndAdd(2 * GOLDEN_GAMMA);  this.seed=mix64(s);  this.gamma=mixGamma(s + GOLDEN_GAMMA);}  }
class C{  protected void fireCharEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CHARACTERS,chars,start,length);  }}  }
class C{  public String flatten(String model,String models){  return getFlattened(deserialize(model),deserialize(models));}  }
class C{  public NotificationChain basicSetFpar(FormalParameter newFpar,NotificationChain msgs){  FormalParameter oldFpar=fpar;  fpar=newFpar;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.SETTER_DECLARATION__FPAR,oldFpar,newFpar);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void readFully(byte b[]) throws IOException {  readFully(b,0,b.length);}  }
class C{  public void bloquearNumeroSec(final String idArchivo){  StringBuffer sql=new StringBuffer("").append("UPDATE " + TABLE_NAME + " SET "+ SIG_NUM_HUECO+ "="+ SIG_NUM_HUECO+ " WHERE "+ ID_ARCHIVO+ "='"+ idArchivo+ "'");  try {    DbUpdateFns.update(getConnection(),sql.toString());  } catch (  Exception e) {    sql=new StringBuffer("");  }}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getScanResult() == null) {    return this.getScanResult() == null;  }  return ((PeerNetwork)other).getScanResult().equals(this.getScanResult());}  }
class C{  public T2<A,PriorityQueue<A>> pop(){  return T2.of(peek(),drop());}  }
class C{  private void isiDeleteExports(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  FSExportMap exportMap=null;  if (args.getFileOperation()) {    FileShare fileObj=args.getFs();    if (fileObj != null) {      exportMap=fileObj.getFsExports();    }  } else {    Snapshot snap=args.getFileSnapshot();    if (snap != null) {      exportMap=snap.getFsExports();    }  }  if (exportMap == null || exportMap.isEmpty()) {    return;  }  String zoneName=getZoneName(args.getvNAS());  Set<String> deletedExports=new HashSet<String>();  Iterator<Map.Entry<String,FileExport>> it=exportMap.entrySet().iterator();  try {    while (it.hasNext()) {      Map.Entry<String,FileExport> entry=it.next();      String key=entry.getKey();      FileExport fsExport=entry.getValue();      if (zoneName != null) {        isi.deleteExport(fsExport.getIsilonId(),zoneName);      } else {        isi.deleteExport(fsExport.getIsilonId());      }      deletedExports.add(key);    }  }  finally {    for (    String key : deletedExports) {      exportMap.remove(key);    }  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws SAXException {  ElemTemplateElement function=handler.getElemTemplateElement();  validate(function,handler);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static Iterable<MatchResult> findMatches(Pattern pattern,CharSequence s){  List<MatchResult> results=new ArrayList<MatchResult>();  for (Matcher m=pattern.matcher(s); m.find(); )   results.add(m.toMatchResult());  return results;}  }
class C{  public GridListSet<V> copy(){  return new GridListSet<>(this);}  }
class C{  private void filterResources(LocalContainer container) throws IOException {  FilterChain chain=new JRun4xFilterChain(container);  String to=getHome();  String libDir=getFileHandler().createDirectory(to,"lib");  String resourcePath=RESOURCE_PATH + container.getId();  getResourceUtils().copyResource(resourcePath + "/servers.xml",new File(libDir,"/servers.xml"),chain,"UTF-8");  getFileHandler().createDirectory(to,"bin");  getResourceUtils().copyResource(resourcePath + "/jvm.config",new File(to + "/bin/jvm.config"),chain,"UTF-8");  String serverInf="servers/" + getServerName() + "/SERVER-INF";  String serverInfDir=getFileHandler().createDirectory(getHome(),serverInf);  getResourceUtils().copyResource(resourcePath + "/jrun.xml",new File(serverInfDir,"/jrun.xml"),chain,"UTF-8");  getResourceUtils().copyResource(resourcePath + "/jrun-users.xml",new File(serverInfDir,"/jrun-users.xml"),chain,"UTF-8");  getResourceUtils().copyResource(resourcePath + "/jndi.properties",new File(serverInfDir,"/jndi.properties"),chain,"ISO-8859-1");}  }
class C{  protected Token createInternalUseOnlyToken(){  return new VisibleWhitespaceToken();}  }
class C{  @Override public void undoableEditHappened(UndoableEditEvent e){  undo.addEdit(e.getEdit());}  }
class C{  private File sortCoreDataFile(ArchiveFile file,int column) throws IOException {  File unsorted=file.getLocationFile();  File sorted=new File(unsorted.getParentFile(),SORTED_FILE_PREFIX + unsorted.getName());  int headerLines=file.getIgnoreHeaderLines();  String columnDelimiter=file.getFieldsTerminatedBy();  Character enclosedBy=file.getFieldsEnclosedBy();  String newlineDelimiter=file.getLinesTerminatedBy();  long time=System.currentTimeMillis();  LineComparator lineComparator=new LineComparator(column,columnDelimiter,enclosedBy,IGNORE_CASE_COMPARATOR);  GBIF_FILE_UTILS.sort(unsorted,sorted,CHARACTER_ENCODING,column,columnDelimiter,enclosedBy,newlineDelimiter,headerLines,lineComparator,true);  log.debug("Finished sorting file " + unsorted.getAbsolutePath() + " in "+ String.valueOf((System.currentTimeMillis() - time) / 1000)+ " secs, check: "+ sorted.getAbsoluteFile().toString());  return sorted;}  }
class C{  public void close(){  try {    channel.close();  } catch (  final IOException e) {    throw new RuntimeException("Exception closing the channel.",e);  }}  }
class C{  public static void deleteFileIgnoreException(File file){  try {    FileUtils.forceDelete(file);  } catch (  Exception e) {    LOGGER.warn(String.format("Failed to delete \"%s\" file.",file),e);  }}  }
class C{  protected void addResource(List defaults,String bundleName){  ResourceBundle bundle=ResourceBundle.getBundle(bundleName);  for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {    String key=(String)keys.nextElement();    defaults.add(key);    defaults.add(bundle.getObject(key));  }}  }
class C{  public NoTalkbackSlimException(Throwable t,String message){  this(t,ErrorType.INFO_ERROR,message);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=in.readFields();  String language=(String)fields.get("language","");  String script=(String)fields.get("script","");  String country=(String)fields.get("country","");  String variant=(String)fields.get("variant","");  String extStr=(String)fields.get("extensions","");  baseLocale=BaseLocale.getInstance(convertOldISOCodes(language),script,country,variant);  if (extStr.length() > 0) {    try {      InternalLocaleBuilder bldr=new InternalLocaleBuilder();      bldr.setExtensions(extStr);      localeExtensions=bldr.getLocaleExtensions();    } catch (    LocaleSyntaxException e) {      throw new IllformedLocaleException(e.getMessage());    }  } else {    localeExtensions=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.236 -0500",hash_original_method="BAF7872943A1F8791CEEBC9105F880C8",hash_generated_method="42D520F55A1621DC903635DDE7B5BD96") public int newnews(String newsgroups,String date,String time,boolean GMT,String distributions) throws IOException {  StringBuffer buffer=new StringBuffer();  buffer.append(newsgroups);  buffer.append(' ');  buffer.append(date);  buffer.append(' ');  buffer.append(time);  if (GMT) {    buffer.append(' ');    buffer.append("GMT");  }  if (distributions != null) {    buffer.append(" <");    buffer.append(distributions);    buffer.append('>');  }  return sendCommand(NNTPCommand.NEWNEWS,buffer.toString());}  }
class C{  private void updateCheck(){  try {    String uuid=getInstallUuid();    if (uuid == null) {      return;    }    long lastCheckTime=getLastUpdateCheckTime();    if (System.currentTimeMillis() - lastCheckTime < 6 * 60 * 60* 1000) {      return;    }    updateLastUpdateCheckTime();    String osName=System.getProperty("os.name","Unknown");    String osArch=System.getProperty("os.arch","Unknown");    String osVersion=System.getProperty("os.version","Unknown");    UpdateChecker t=new UpdateChecker("https://download.bugvm.com/version?" + "uuid=" + URLEncoder.encode(uuid,"UTF-8") + "&"+ "version="+ URLEncoder.encode(Version.getVersion(),"UTF-8")+ "&"+ "osName="+ URLEncoder.encode(osName,"UTF-8")+ "&"+ "osArch="+ URLEncoder.encode(osArch,"UTF-8")+ "&"+ "osVersion="+ URLEncoder.encode(osVersion,"UTF-8"));    t.start();    t.join(5 * 1000);    JSONObject result=t.result;    if (result != null) {      String version=(String)result.get("version");      if (version != null && Version.isOlderThan(version)) {        config.getLogger().info("A new version of BugVM is available. " + "Current version: %s. New version: %s.",Version.getVersion(),version);      }    }  } catch (  Throwable t) {    if (config.getHome().isDev()) {      t.printStackTrace();    }  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("processtype") @Valid WorkflowType workflowType,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.WorkflowType jpaWorkflowType=new com.wipro.ats.bdre.md.dao.jpa.WorkflowType();    jpaWorkflowType.setWorkflowId(workflowType.getWorkflowId());    jpaWorkflowType.setWorkflowTypeName(workflowType.getWorkflowTypeName());    workflowTypeDAO.update(jpaWorkflowType);    restWrapper=new RestWrapper(workflowType,RestWrapper.OK);    LOGGER.info("Record with ID:" + workflowType.getWorkflowId() + " updated in BatchStatus by User:"+ principal.getName()+ workflowType);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void executeSynchronously(Runnable r){  executeSynchronously(null);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public void learn(Object example){  String form=extractor.discreteValue(example);  TreeMap<String,Integer> counts=table.get(form);  if (counts == null) {    counts=new TreeMap<>();    table.put(form,counts);  }  String l=labeler.discreteValue(example);  Integer count=counts.get(l);  if (count == null)   count=0;  counts.put(l,count + 1);}  }
class C{  public boolean relocateFutureLegRoute(Leg leg,Id<Link> fromLinkId,Id<Link> toLinkId,Person person){  Link fromLink=network.getLinks().get(fromLinkId);  Link toLink=network.getLinks().get(toLinkId);  Vehicle vehicle=null;  Node startNode=fromLink.getToNode();  Node endNode=toLink.getFromNode();  double starttime=leg.getDepartureTime();  Path path=pathCalculator.calcLeastCostPath(startNode,endNode,starttime,person,vehicle);  if (path == null)   throw new RuntimeException("No route found from node " + startNode.getId() + " to node "+ endNode.getId()+ ".");  NetworkRoute route=this.routeFactories.createRoute(NetworkRoute.class,fromLink.getId(),toLink.getId());  route.setLinkIds(fromLink.getId(),NetworkUtils.getLinkIds(path.links),toLink.getId());  route.setTravelTime((int)path.travelTime);  route.setTravelCost(path.travelCost);  route.setDistance(RouteUtils.calcDistance(route,1.,1.,this.network));  leg.setRoute(route);  return true;}  }
class C{  public TestTree collectAllTestsFromWorkspace(){  return collectTests(from(n4jsCore.findAllProjects()).filter(null).transform(null).filter(null).toArray(URI.class));}  }
class C{  public void shutdown(){  logger.info("Shutting down consumer executor.");  executor.shutdown();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final double[] weights(Instance instance){  return null;}  }
class C{  public void reverseBranch(int which,CodeAddress newTarget){  int size=insns.size();  int index=size - which - 1;  TargetInsn targetInsn;  try {    targetInsn=(TargetInsn)insns.get(index);  } catch (  IndexOutOfBoundsException ex) {    throw new IllegalArgumentException("too few instructions");  }catch (  ClassCastException ex) {    throw new IllegalArgumentException("non-reversible instruction");  }  insns.set(index,targetInsn.withNewTargetAndReversed(newTarget));}  }
class C{  public OutputStreamWriter(OutputStream out){  super(out);  try {    se=StreamEncoder.forOutputStreamWriter(out,this,(String)null);  } catch (  UnsupportedEncodingException e) {    throw new Error(e);  }}  }
class C{  public T caseBeforeCode_(BeforeCode_ object){  return null;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldKeys=_set;  float[] oldVals=_values;  byte[] oldStates=_states;  _set=new int[newCapacity];  _values=new float[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void interpolate(double alpha){  mCurrentState.position=mCurrentState.position * alpha + mPreviousState.position * (1 - alpha);  mCurrentState.velocity=mCurrentState.velocity * alpha + mPreviousState.velocity * (1 - alpha);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static void verifySparkVersionSupported(SparkContext sc){  if (!MLContextUtil.isSparkVersionSupported(sc.version())) {    throw new MLContextException("SystemML requires Spark " + MLContext.SYSTEMML_MINIMUM_SPARK_VERSION + " or greater");  }}  }
class C{  public static void trainModel(File modelFile) throws UIMAException, IOException {  CollectionReaderDescription reader=createReaderDescription(TextReader.class,TextReader.PARAM_SOURCE_LOCATION,CAS_DIR,TextReader.PARAM_PATTERNS,CAS_FILE_PATTERN,TextReader.PARAM_LANGUAGE,LANGUAGE);  AnalysisEngineDescription segmenter=createEngineDescription(BreakIteratorSegmenter.class);  AnalysisEngineDescription estimator=createEngineDescription(MalletLdaTopicModelTrainer.class,MalletLdaTopicModelTrainer.PARAM_TARGET_LOCATION,modelFile,MalletLdaTopicModelTrainer.PARAM_N_ITERATIONS,N_ITERATIONS,MalletLdaTopicModelTrainer.PARAM_N_TOPICS,N_TOPICS);  SimplePipeline.runPipeline(reader,segmenter,estimator);}  }
class C{  protected Node bulkConstruct(DBIDRef cur,int maxScale,ModifiableDoubleDBIDList elems){  assert (!elems.contains(cur));  final double max=maxDistance(elems);  final int scale=Math.min(distToScale(max) - 1,maxScale);  final int nextScale=scale - 1;  if (max <= 0 || scale <= scaleBottom || elems.size() < truncate) {    return new Node(cur,max,elems);  }  ModifiableDoubleDBIDList candidates=DBIDUtil.newDistanceDBIDList();  excludeNotCovered(elems,scaleToDist(scale),candidates);  if (candidates.size() == 0) {    LOG.warning("Scale not chosen appropriately? " + max + " "+ scaleToDist(scale));    return bulkConstruct(cur,nextScale,elems);  }  Node node=new Node(cur,max);  final boolean curSingleton=elems.size() == 0;  if (!curSingleton) {    node.children.add(bulkConstruct(cur,nextScale,elems));  }  final double fmax=scaleToDist(nextScale);  for (DoubleDBIDListIter it=candidates.iter(); it.valid(); ) {    assert (it.getOffset() == 0);    DBID t=DBIDUtil.deref(it);    elems.clear();    collectByCover(it,candidates,fmax,elems);    assert (DBIDUtil.equal(t,it)) : "First element in candidates must not change!";    if (elems.size() == 0) {      node.singletons.add(it);    } else {      node.children.add(bulkConstruct(it,nextScale,elems));    }    candidates.removeSwap(0);  }  assert (candidates.size() == 0);  if (curSingleton) {    if (node.isLeaf()) {      node.children=null;    } else {      node.singletons.add(cur);    }  }  return node;}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:17.928 -0500",hash_original_method="E357703A48348C8EEE9667190E563C6C",hash_generated_method="E35E785C1CA6F25DCC940C5A7D20BFFD") public CopyOnWriteArrayList(){  elements=EmptyArray.OBJECT;}  }
class C{  @Override public ProcessorResult handleWrite(Object entity) throws ODataException {  if (ODataUriUtil.isRefPathUri(getoDataUri())) {    return processLink((ODataLink)entity);  } else {    if (entity != null) {      throw new ODataBadRequestException("The body of a DELETE request must be empty.");    }    return processEntity();  }}  }
class C{  @Provides @Config("dnsUpdateHost") public static String provideDnsUpdateHost(){  return "localhost";}  }
class C{  public boolean isVideoSharingSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_VIDEO_SHARING);}  }
class C{  public boolean allowsAllContentSubTypes(){  if (mediaRange == null) {    return false;  } else   return mediaRange.getSubtype().compareTo(STAR) == 0;}  }
class C{  public static void assertInstanceOf(String objectName,Class<?> expectedClassType,Object actualObject){  try {    if (!expectedClassType.isInstance(actualObject)) {      Assert.fail(objectName + " is not an instance of " + expectedClassType.getName());    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public void dispose(){  m_graph.getSettings().getProximitySettings().removeListener(m_proximityListener);}  }
class C{  CompletableFuture<Void> configure(Member.Type type){  CompletableFuture<Void> future=new CompletableFuture<>();  cluster.getContext().getThreadContext().executor().execute(null);  return future;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  protected boolean activateGyroscope(){  return (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE),(int)(PLConstants.kDefaultGyroscopeInterval * 1000.0f)));}  }
class C{  private float convertRGBToGrayscale(final int rgbColor){  int red=(rgbColor >> 16) & 0xFF;  int green=(rgbColor >> 8) & 0xFF;  int blue=rgbColor & 0xFF;  return 0.3f * red + 0.59f * green + 0.11f * blue;}  }
class C{  public static String randomFixedByteLengthUnicodeString(Random r,int length){  final char[] buffer=new char[length * 3];  int bytes=length;  int i=0;  for (; i < buffer.length && bytes != 0; i++) {    int t;    if (bytes >= 4) {      t=r.nextInt(5);    } else     if (bytes >= 3) {      t=r.nextInt(4);    } else     if (bytes >= 2) {      t=r.nextInt(2);    } else {      t=0;    }    if (t == 0) {      buffer[i]=(char)r.nextInt(0x80);      bytes--;    } else     if (1 == t) {      buffer[i]=(char)nextInt(r,0x80,0x7ff);      bytes-=2;    } else     if (2 == t) {      buffer[i]=(char)nextInt(r,0x800,0xd7ff);      bytes-=3;    } else     if (3 == t) {      buffer[i]=(char)nextInt(r,0xe000,0xffff);      bytes-=3;    } else     if (4 == t) {      buffer[i++]=(char)nextInt(r,0xd800,0xdbff);      buffer[i]=(char)nextInt(r,0xdc00,0xdfff);      bytes-=4;    }  }  return new String(buffer,0,i);}  }
class C{  protected void checkArguments(List<? extends AnnotatedTypeMirror> requiredArgs,List<? extends ExpressionTree> passedArgs){  assert requiredArgs.size() == passedArgs.size() : "mismatch between required args (" + requiredArgs + ") and passed args ("+ passedArgs+ ")";  Pair<Tree,AnnotatedTypeMirror> preAssCtxt=visitorState.getAssignmentContext();  try {    for (int i=0; i < requiredArgs.size(); ++i) {      visitorState.setAssignmentContext(Pair.<Tree,AnnotatedTypeMirror>of((Tree)null,(AnnotatedTypeMirror)requiredArgs.get(i)));      commonAssignmentCheck(requiredArgs.get(i),passedArgs.get(i),"argument.type.incompatible");      scan(passedArgs.get(i),null);    }  }  finally {    visitorState.setAssignmentContext(preAssCtxt);  }}  }
class C{  public X931SecureRandom build(BlockCipher engine,KeyParameter key,boolean predictionResistant){  this.engine=engine;  if (dateTimeVector == null) {    if (engine.getBlockSize() == 8) {      dateTimeVector=Pack.longToBigEndian(System.currentTimeMillis());    } else {      dateTimeVector=new byte[engine.getBlockSize()];      byte[] date=Pack.longToBigEndian(System.currentTimeMillis());      System.arraycopy(date,0,dateTimeVector,0,date.length);    }  }  engine.init(true,key);  return new X931SecureRandom(random,new X931RNG(engine,dateTimeVector,entropySourceProvider.get(engine.getBlockSize() * 8)),predictionResistant);}  }
class C{  public void reconnect() throws QueryException {  SearchFilter filter;  boolean inTransaction=false;  if (currentReadOnlyAsked) {    filter=new SearchFilter(true,true);  } else {    inTransaction=masterProtocol != null && masterProtocol.inTransaction();    filter=new SearchFilter(true,urlParser.getOptions().failOnReadOnly);  }  reconnectFailedConnection(filter);  handleFailLoop();  if (inTransaction) {    throw new ReconnectDuringTransactionException("Connection reconnect automatically during an active transaction",1401,"25S03");  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.navigationView=this.findView(R.id.navigation);  this.drawerLayout=this.findView(R.id.drawerLayout);  this.settingNavigationView();}  }
class C{  public void removeResultChangedListener(ResultChangedListener l){  m_Listeners.remove(l);}  }
class C{  private LevelInequalityRule(){  super();}  }
class C{  public IsilonList<IsilonSnapshot> listSnapshots(String resumeToken) throws IsilonException {  return list(_baseUrl.resolve(URI_SNAPSHOTS),"snapshots",IsilonSnapshot.class,resumeToken);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrreplacechild2.class,args);}  }
class C{  public Builder addLoadingListItem(boolean addLoadingListItem){  this.addLoadingListItem=addLoadingListItem;  return this;}  }
class C{  protected void shutdown(){  UserChannelDaoSnapshot daoSnapshot;synchronized (stateLock) {    log.debug("---PircBotX shutdown started---");    if (state == State.DISCONNECTED)     throw new RuntimeException("Cannot call shutdown twice");    state=State.DISCONNECTED;    if (configuration.isIdentServerEnabled())     IdentServer.getServer().removeIdentEntry(socket.getInetAddress(),socket.getPort(),socket.getLocalPort(),configuration.getLogin());    if (socket != null && !socket.isClosed())     try {      socket.close();    } catch (    Exception e) {      log.error("Cannot close socket",e);    }    ImmutableMap.Builder<String,String> reconnectChannelsBuilder=ImmutableMap.builder();    for (    Channel curChannel : userChannelDao.getAllChannels()) {      String key=(curChannel.getChannelKey() == null) ? "" : curChannel.getChannelKey();      reconnectChannelsBuilder.put(curChannel.getName(),key);    }    reconnectChannels=reconnectChannelsBuilder.build();    loggedIn=false;    daoSnapshot=(configuration.isSnapshotsEnabled()) ? userChannelDao.createSnapshot() : null;    userChannelDao.close();    inputParser.close();    dccHandler.close();  }  configuration.getListenerManager().onEvent(new DisconnectEvent(this,daoSnapshot,disconnectException));  disconnectException=null;  log.debug("Disconnected.");  configuration.getListenerManager().shutdown(this);}  }
class C{  public Comp(){  super("comp",1);}  }
class C{  public void error(String msg){  innerLog(Level.ERROR,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  private void intersectEmail(String email1,String email2,Set intersect){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        intersect.add(email1);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      } else       if (withinDomain(email2,email1)) {        intersect.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        intersect.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email2.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        intersect.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        intersect.add(email1);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        intersect.add(email1);      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.BOOL_LITERAL__VALUE:    return isValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean remove(Unit item){  Chain<Unit> methodBody=mBody.getUnits();  if (item == mHead)   mHead=methodBody.getSuccOf(item); else   if (item == mTail)   mTail=methodBody.getPredOf(item);  return methodBody.remove(item);}  }
class C{  public int instancesOfOperation(String operationName){  return stepInstances.getOrDefault(operationName,0);}  }
class C{  public static boolean equalsStackTraceElements(ErStackTraceElement erStackTraceElement,StackTraceElement stackTraceElement){  return erStackTraceElement.getDeclaringClass().equals(stackTraceElement.getClassName()) && erStackTraceElement.getFileName().equals(stackTraceElement.getFileName()) && erStackTraceElement.getMethodName().equals(stackTraceElement.getMethodName())&& erStackTraceElement.getLineNumber() == stackTraceElement.getLineNumber();}  }
class C{  public boolean isOrientationAligned(){  if (deviceOrientation == Configuration.ORIENTATION_LANDSCAPE) {    return isLandscape();  } else   if (deviceOrientation == Configuration.ORIENTATION_PORTRAIT) {    return isPortrait();  }  return true;}  }
class C{  public MemberAccessModifier createMemberAccessModifierFromString(EDataType eDataType,String initialValue){  MemberAccessModifier result=MemberAccessModifier.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public LdapProperties(Properties properties){  if (properties != null) {    for (    Map.Entry<Object,Object> propertiesEntry : properties.entrySet()) {      settings.add(new Setting((String)propertiesEntry.getKey(),(String)propertiesEntry.getValue()));    }  }}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public void print(List<? extends DocTree> list) throws IOException {  for (  DocTree t : list) {    print(t);  }}  }
class C{  public static void dragViewToTop(InstrumentationTestCase test,View v,int stepCount){  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float fromY=xy[1] + (viewHeight / 2.0f);  float toY=0;  drag(test,x,x,fromY,toY,stepCount);}  }
class C{  public LoginException(String message){  super(message);}  }
class C{  @Deprecated public static void throwClassNotFoundException(ClassDescriptor classDescriptor) throws ClassNotFoundException {  ClassDescriptor.throwClassNotFoundException(classDescriptor);}  }
class C{  public SemIm(SemPm semPm,Parameters params){  this(semPm,null,params);}  }
class C{  public static RxANRequest.HeadRequestBuilder head(String url){  return new RxANRequest.HeadRequestBuilder(url);}  }
class C{  public JobDefinition createJobDefinitionForActivitiXml(String activitiXml) throws Exception {  namespaceDaoTestHelper.createNamespaceEntity(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD);  JobDefinitionCreateRequest jobDefinitionCreateRequest=createJobDefinitionCreateRequestFromActivitiXml(activitiXml);  JobDefinition jobDefinition=jobDefinitionService.createJobDefinition(jobDefinitionCreateRequest,false);  assertNotNull(jobDefinition);  assertTrue(jobDefinition.getNamespace().equals(jobDefinitionCreateRequest.getNamespace()));  assertTrue(jobDefinition.getJobName().equals(jobDefinitionCreateRequest.getJobName()));  assertTrue(jobDefinition.getDescription().equals(jobDefinitionCreateRequest.getDescription()));  return jobDefinition;}  }
class C{  protected Messages(){}  }
class C{  public static ItemStack readSlot(ByteBuf buf){  return readSlot(buf,false);}  }
class C{  SHA2(String name,int digestLength,int[] initialHashes){  super(name,digestLength,64);  this.initialHashes=initialHashes;  state=new int[8];  W=new int[64];  implReset();}  }
class C{  @Override public boolean load(Element sharedRoutes,Element perNodeRoutes){  replaceRouteManager();  loadRoutes(sharedRoutes);  return true;}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  public cudaExtent(){}  }
class C{  public boolean isChunked(){  return (buffer == null) && wrappedEntity.isChunked();}  }
class C{  public void keyReleased(KeyEvent e){  log.finest("Key=" + e.getKeyCode() + " - "+ e.getKeyChar()+ " -> "+ m_text.getText());  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   m_text.setText(m_initialText);}  }
class C{  private byte[] ldapGet(final String urlString){  final Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  env.put(Context.PROVIDER_URL,urlString);  try {    String ldapParams=StringUtils.substringAfter(urlString,"?");    StringTokenizer tokenizer=new StringTokenizer(ldapParams,"?");    String attributeName=(tokenizer.hasMoreTokens()) ? tokenizer.nextToken() : null;    if (StringUtils.isEmpty(attributeName)) {      attributeName="certificateRevocationList;binary";    }    final DirContext ctx=new InitialDirContext(env);    final Attributes attributes=ctx.getAttributes(StringUtils.EMPTY,new String[]{attributeName});    if (attributes == null || attributes.size() < 1) {      LOG.warn("Cannot download CRL from: " + urlString + ", no attributes with name: "+ attributeName+ " returned");    } else {      final Attribute attribute=attributes.getAll().next();      final byte[] ldapBytes=(byte[])attribute.get();      if (ArrayUtils.isNotEmpty(ldapBytes)) {        return ldapBytes;      }    }  } catch (  Exception e) {    LOG.warn(e.getMessage(),e);  }  return null;}  }
class C{  public AccessPointParserHelper(InputStream in) throws Exception {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser saxParser=factory.newSAXParser();  saxParser.parse(in,mHandler);}  }
class C{  public byte[] serialize() throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputStream oos=new DataOutputStream(baos);  oos.writeBoolean(sorted);  oos.writeInt(indices.length);  for (int i=0; i < indices.length; i++) {    oos.writeInt(indices[i]);    oos.writeFloat(values[i]);  }  oos.flush();  return baos.toByteArray();}  }
class C{  public static void main(String[] args){  try {    httpTransport=GoogleNetHttpTransport.newTrustedTransport();    dataStoreFactory=new FileDataStoreFactory(DATA_STORE_DIR);    AdSense adsense=initializeAdsense();    Accounts accounts=GetAllAccounts.run(adsense,MAX_LIST_PAGE_SIZE);    if ((accounts.getItems() != null) && !accounts.getItems().isEmpty()) {      String exampleAccountId=accounts.getItems().get(0).getId();      GetAccountTree.run(adsense,exampleAccountId);      GetAllAdClientsForAccount.run(adsense,exampleAccountId,MAX_LIST_PAGE_SIZE);    }    AdClients adClients=GetAllAdClients.run(adsense,MAX_LIST_PAGE_SIZE);    if ((adClients.getItems() != null) && !adClients.getItems().isEmpty()) {      String exampleAdClientId=adClients.getItems().get(0).getId();      AdUnits units=GetAllAdUnits.run(adsense,exampleAdClientId,MAX_LIST_PAGE_SIZE);      if ((units.getItems() != null) && !units.getItems().isEmpty()) {        String exampleAdUnitId=units.getItems().get(0).getId();        GetAllCustomChannelsForAdUnit.run(adsense,exampleAdClientId,exampleAdUnitId,MAX_LIST_PAGE_SIZE);      }      CustomChannels channels=GetAllCustomChannels.run(adsense,exampleAdClientId,MAX_LIST_PAGE_SIZE);      if ((channels.getItems() != null) && !channels.getItems().isEmpty()) {        String exampleCustomChannelId=channels.getItems().get(0).getId();        GetAllAdUnitsForCustomChannel.run(adsense,exampleAdClientId,exampleCustomChannelId,MAX_LIST_PAGE_SIZE);      }      GetAllUrlChannels.run(adsense,exampleAdClientId,MAX_LIST_PAGE_SIZE);      GenerateReport.run(adsense,exampleAdClientId);      GenerateReportWithPaging.run(adsense,exampleAdClientId,MAX_REPORT_PAGE_SIZE);    } else {      System.out.println("No ad clients found, unable to run remaining methods.");    }    SavedReports savedReports=GetAllSavedReports.run(adsense,MAX_REPORT_PAGE_SIZE);    if ((savedReports.getItems() != null) && !savedReports.getItems().isEmpty()) {      String exampleSavedReportId=savedReports.getItems().get(0).getId();      GenerateSavedReport.run(adsense,exampleSavedReportId);    } else {      System.out.println("No saved report found.");    }    GetAllSavedAdStyles.run(adsense,MAX_LIST_PAGE_SIZE);    GetAllDimensions.run(adsense);    GetAllMetrics.run(adsense);    GetAllAlerts.run(adsense);  } catch (  IOException e) {    System.err.println(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public Style(){  setPadding(3,3,3,3);  setMargin(2,2,2,2);  modifiedFlag=0;}  }
class C{  public void startShakeDetection(int threshold,ShakeListener shakeListener){  startLibrarySensorDetection(new ShakeDetector(threshold,shakeListener),shakeListener);}  }
class C{  public void print_array(int[][] array){  print("array: size=" + array.length + " by "+ array[0].length);  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      ps(array[i][j] + " ",false);    }    print("");  }}  }
class C{  public void select(OMGraphicList omgl){  super.select(omgl);  if (omgl != null && !omgl.isEmpty()) {    if (omgl.size() == 1) {      edit(omgl.getOMGraphicAt(0));    } else {      edit(omgl);    }  }}  }
class C{  public static byte[] acquire(Jedis j,byte[] lockKey){  long start=System.currentTimeMillis();  byte[] randomLockValue=new byte[10];  RND.nextBytes(randomLockValue);  while (!"OK".equals(j.set(lockKey,randomLockValue,NX_OPTION,PX_OPTION,500))) {    if (System.currentTimeMillis() - start > 5_000L)     throw new IllegalStateException("Could not acquire a lock from redis");    try {      Thread.sleep(10);    } catch (    InterruptedException e) {    }  }  return randomLockValue;}  }
class C{  int localRecv(byte[] buffer,int len) throws IOException {  return localTcp.recv(buffer,len);}  }
class C{  private Log4JAppenderAccessor wrapAppender(Object appender){  try {    if (appender == null) {      throw new IllegalArgumentException("appender is null");    }    Log4JAppenderAccessor appenderAccessor=new Log4JAppenderAccessor();    appenderAccessor.setTarget(appender);    appenderAccessor.setLoggerAccessor(this);    appenderAccessor.setApplication(getApplication());    return appenderAccessor;  } catch (  Exception e) {    logger.error("Could not wrap appender: {}",appender,e);  }  return null;}  }
class C{  public final void clearKey(){  key=null;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public static <T>T removeElement(final int index,final Collection<T> coll){  return getElement(true,index,coll);}  }
class C{  @Override public void exceptionCaught(final ChannelHandlerContext ctx,final Throwable cause) throws Exception {  if (!Server.this.isRunning()) {    if (log.isLoggable(Level.FINEST)) {      log.finest("Got exception while server is not running: " + cause.getMessage());    }    ctx.close();  } else {    super.exceptionCaught(ctx,cause);  }}  }
class C{  public static boolean isAssigned(VirtualArrayResourceRestRep resource,String virtualArrayId){  return (resource.getAssignedVirtualArrays() != null) && resource.getAssignedVirtualArrays().contains(virtualArrayId);}  }
class C{  protected void validateStartState(S state) throws Throwable {  validateState(state);  T taskState=ServiceDocumentUtils.getTaskState(state);  checkState(taskState.stage == TaskState.TaskStage.CREATED,"Expected state is CREATED. Cannot proceed in " + taskState.stage + " state. ");}  }
class C{  @Override public void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){  float verticalOffset;  float nextBottomY;  float dist;  int bottomSetIndex;  int topSetIndex;  float cornersFix;  float x;  float y;  BarSet barSet;  Bar bar;  int dataSize=data.size();  int setSize=data.get(0).size();  float innerChartBottom=this.getInnerChartBottom();  for (int i=0; i < setSize; i++) {    if (style.hasBarBackground) {      drawBarBackground(canvas,(int)(data.get(0).getEntry(i).getX() - barWidth / 2),(int)this.getInnerChartTop(),(int)(data.get(0).getEntry(i).getX() - barWidth / 2 + barWidth),(int)this.getInnerChartBottom());    }    verticalOffset=0;    nextBottomY=innerChartBottom;    bottomSetIndex=discoverBottomSet(i,data);    topSetIndex=discoverTopSet(i,data);    for (int j=0; j < dataSize; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (!barSet.isVisible() || bar.getValue() <= 0)       continue;      x=bar.getX();      y=bar.getY();      style.barPaint.setColor(bar.getColor());      style.applyAlpha(style.barPaint,barSet.getAlpha());      dist=innerChartBottom - y;      if (j == bottomSetIndex) {        drawBar(canvas,(int)(x - barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset)),(int)(x + barWidth / 2),(int)nextBottomY);        if (bottomSetIndex != topSetIndex && style.cornerRadius != 0) {          cornersFix=(nextBottomY - (innerChartBottom - (dist + verticalOffset))) / 2;          canvas.drawRect(new Rect((int)(x - barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset)),(int)(x + barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset) + cornersFix)),style.barPaint);        }      } else       if (j == topSetIndex) {        drawBar(canvas,(int)(x - barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset)),(int)(x + barWidth / 2),(int)(nextBottomY));        cornersFix=(nextBottomY - (innerChartBottom - (dist + verticalOffset))) / 2;        canvas.drawRect(new Rect((int)(x - barWidth / 2),(int)(nextBottomY - cornersFix),(int)(x + barWidth / 2),(int)(nextBottomY)),style.barPaint);      } else {        canvas.drawRect(new Rect((int)(x - barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset)),(int)(x + barWidth / 2),(int)(nextBottomY)),style.barPaint);      }      nextBottomY=innerChartBottom - (dist + verticalOffset);      if (dist != 0)       verticalOffset+=dist + 2;    }  }}  }
class C{  public void check(final int api){}  }
class C{  protected boolean isClassIndex(int columnIndex){  boolean result;  int index;  index=m_Data.classIndex();  result=((index == -1) && (m_Data.numAttributes() == columnIndex)) || (index == columnIndex - 1);  return result;}  }
class C{  public static CCRotateBy action(float t,float a){  return new CCRotateBy(t,a);}  }
class C{  protected void drawImageBGR(byte[] bgrData,float destX,float destY,float destWidth,float destHeight,float srcX,float srcY,float srcWidth,float srcHeight,int srcBitMapWidth,int srcBitMapHeight){  setTransform(new AffineTransform());  prepDrawing();  int intSrcWidth=(int)srcWidth;  int intSrcHeight=(int)srcHeight;  mPSStream.println(IMAGE_SAVE);  int psBytesPerRow=3 * (int)intSrcWidth;  while (psBytesPerRow > MAX_PSSTR) {    psBytesPerRow/=2;  }  mPSStream.println(psBytesPerRow + IMAGE_STR);  mPSStream.println("[" + destWidth + " 0 "+ "0 "+ destHeight+ " "+ destX+ " "+ destY+ "]concat");  mPSStream.println(intSrcWidth + " " + intSrcHeight+ " "+ 8+ "["+ intSrcWidth+ " 0 "+ "0 "+ intSrcHeight+ " 0 "+ 0+ "]"+ "/imageSrc load false 3 colorimage");  int index=0;  byte[] rgbData=new byte[intSrcWidth * 3];  try {    index=(int)srcY * srcBitMapWidth;    for (int i=0; i < intSrcHeight; i++) {      index+=(int)srcX;      index=swapBGRtoRGB(bgrData,index,rgbData);      byte[] encodedData=rlEncode(rgbData);      byte[] asciiData=ascii85Encode(encodedData);      mPSStream.write(asciiData);      mPSStream.println("");    }  } catch (  IOException e) {  }  mPSStream.println(IMAGE_RESTORE);}  }
class C{  public static void runTrialNormal(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  algs.model.array.QuickSort<Integer> qs=new algs.model.array.QuickSort<Integer>(ar);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public final void readFully(byte b[]) throws IOException {  readFully(b,0,b.length);}  }
class C{  public void managerStopped(UpdateManagerEvent e){}  }
class C{  public int invScaledCeil(float length){  return MathUtil.iceil(invScaled(length));}  }
class C{  public void add(Node parent,List<Node> children){  NodeDescriptor nodeDescriptor=getWrapper(parent);  insert(nodeDescriptor,nodeDescriptor.getChildren().size(),children);}  }
class C{  public DataShapeAction(String group,String field,int[] palette){  super(group,NO_SHAPE);  m_dataField=field;  m_palette=palette;}  }
class C{  public void bind(final Socket socket,final HttpParams params) throws IOException {  if (socket == null) {    throw new IllegalArgumentException("Socket may not be null");  }  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  assertNotOpen();  socket.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  socket.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    socket.setSoLinger(linger > 0,linger);  }  this.socket=socket;  int buffersize=HttpConnectionParams.getSocketBufferSize(params);  this.inbuffer=new SocketInputBuffer(socket,buffersize,params);  this.outbuffer=new SocketOutputBuffer(socket,buffersize,params);  maxHeaderCount=params.getIntParameter(CoreConnectionPNames.MAX_HEADER_COUNT,-1);  maxLineLength=params.getIntParameter(CoreConnectionPNames.MAX_LINE_LENGTH,-1);  this.requestWriter=new HttpRequestWriter(outbuffer,null,params);  this.metrics=new HttpConnectionMetricsImpl(inbuffer.getMetrics(),outbuffer.getMetrics());  this.open=true;}  }
class C{  public void testMac05() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",mac.getProvider().getName(),defaultProviderName);  }}  }
class C{  public void list(PrintWriter p){  list(p,false);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  private boolean testForFrostWire(String arg){  try {    String urlParameter=null;    if (arg != null && (arg.startsWith("http://") || arg.startsWith("https://") || arg.startsWith("magnet:?")|| arg.endsWith(".torrent"))) {      urlParameter="/download?url=" + UrlUtils.encode(arg);    } else {      urlParameter="/show";    }    final String response=HttpClientFactory.getInstance(HttpClientFactory.HttpContext.MISC).get("http://" + LOCALHOST_IP + ":"+ SERVER_PORT+ urlParameter,1000);    if (response != null) {      return true;    }  } catch (  Exception e) {  }  return false;}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public ZkClusterData fetchNodeToCoreMapping(){  Map<String,List<String>> nodeToCoreMap=new HashMap<String,List<String>>();  LinkedHashMap<String,ZkCollectionState> zkState=getZkClusterData().getClusterState();  for (  String collection : zkState.keySet()) {    ZkCollectionState collectionMetadata=zkState.get(collection);    for (    String shard : collectionMetadata.getShards().keySet()) {      ZkShardInfo shardInfo=collectionMetadata.getShards().get(shard);      for (      String replica : shardInfo.getReplicas().keySet()) {        String nodeNameFull=shardInfo.getReplicas().get(replica).getNodeName();        String nodeName=fetchNodeName(nodeNameFull);        String core=shardInfo.getReplicas().get(replica).getCore();        if (nodeToCoreMap.get(nodeName) != null) {          List<String> cores=nodeToCoreMap.get(nodeName);          cores.add(core);          nodeToCoreMap.put(nodeName,cores);        } else {          List<String> newCores=new ArrayList<String>();          newCores.add(core);          nodeToCoreMap.put(nodeName,newCores);        }      }    }  }  getZkClusterData().setNodeToCoreMapping(nodeToCoreMap);  return getZkClusterData();}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.DICTIONARY_PROPERTY_TYPE;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public Sensor createNewSensor(String systemName,String userName){  Sensor s;  String sName=AcelaAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid Acela Sensor system name: " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists: " + systemName);    return null;  }  String altName=AcelaAddress.convertSystemNameToAlternate(sName);  s=getBySystemName(altName);  if (s != null) {    log.error("Sensor with name: '" + systemName + "' already exists as: '"+ altName+ "'");    return null;  }  int bit=AcelaAddress.getBitFromSystemName(sName);  if ((bit < 0) || (bit >= 1023)) {    log.error("Sensor bit number: " + Integer.toString(bit) + ", is outside the supported range, 1-1024");    return null;  }  if (userName == null) {    s=new AcelaSensor(sName);  } else {    s=new AcelaSensor(sName,userName);  }  AcelaNode node=AcelaAddress.getNodeFromSystemName(sName,_memo);  if (node == null) {    log.warn("Sensor: " + sName + ", refers to an undefined Acela Node.");    return s;  }  if (!node.hasActiveSensors) {    int newnodeaddress;    newnodeaddress=node.getNodeAddress();    log.warn("We got the wrong node: " + newnodeaddress);    return s;  }  node.registerSensor(s,bit);  return s;}  }
class C{  @Override public String toString(){  return "CUtexref[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  @Provides @Singleton UserDataSource provideUserDataSource(DaoSession session,SettingsDataSource settingsDataSource){  return new UserDataSource(session,settingsDataSource);}  }
class C{  public Status(String code){  this.code=code;  this.level=STATUS;}  }
class C{  boolean queryOverwriteFile(IFile targetFile,int policy){  if (policy != POLICY_FORCE_OVERWRITE) {    if (this.overwriteState == OVERWRITE_NOT_SET && !queryOverwrite(targetFile.getFullPath())) {      return false;    }    if (this.overwriteState == OVERWRITE_NONE) {      return false;    }  }  return true;}  }
class C{  private static int searchSomeElementsInBFList(List<BloomFilter<Integer>> bfList,int startRange,int endRange,int nbSearchesToDo){  int minSearchSteps=10000000;  int maxSearchSteps=0;  int sumSearchSteps=0;  int minSearchStepsToFirst=10000000;  int maxSearchStepsToFirst=0;  int sumSearchStepsToFirst=0;  int nbSearches=0;  int nbFound=0;  int elem;  SearchStatistics stat=new SearchStatistics();  long sumSearchTime=0;  long sumSearchTimeToFirst=0;  for (int i=0; i < nbSearchesToDo; i++) {    elem=(int)(Math.floor(Math.random() * (endRange - startRange) + startRange));    stat.clear();    long startTime=System.currentTimeMillis();    ArrayList<BloomFilter<Integer>> results=searchAllInBFList(bfList,elem,stat);    long endTime=System.currentTimeMillis();    long diffTime=endTime - startTime;    sumSearchTime+=diffTime;    if (results.size() > 0) {      nbFound++;    }    nbSearches++;    if (stat.nbBFChecks < minSearchSteps) {      minSearchSteps=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchSteps) {      maxSearchSteps=stat.nbBFChecks;    }    sumSearchSteps+=stat.nbBFChecks;    stat.clear();    startTime=System.currentTimeMillis();    results=searchFirstInBFList(bfList,elem,stat);    endTime=System.currentTimeMillis();    diffTime=endTime - startTime;    sumSearchTimeToFirst+=diffTime;    if (stat.nbBFChecks < minSearchStepsToFirst) {      minSearchStepsToFirst=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchStepsToFirst) {      maxSearchStepsToFirst=stat.nbBFChecks;    }    sumSearchStepsToFirst+=stat.nbBFChecks;  }  System.out.print(" |Min steps| " + minSearchSteps + "| Max steps | "+ maxSearchSteps+ "| Avg steps | "+ (double)sumSearchSteps / nbSearches + "| Avg time millis | " + (double)sumSearchTime / nbSearches + "| Total time millis | " + sumSearchTime + "| Nb searches | " + nbSearches + " |Min steps to first| " + minSearchStepsToFirst + "| Max steps to first| " + maxSearchStepsToFirst + "| Avg steps to first| " + (double)sumSearchStepsToFirst / nbSearches + "| Avg time millis to first| " + (double)sumSearchTimeToFirst / nbSearches + "| Total time millis to first| " + sumSearchTimeToFirst);  return nbFound;}  }
class C{  public BarabasiAlbertGenerator(Supplier<Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,int init_vertices,int numEdgesToAttach,int seed,Set<V> seedVertices){  Preconditions.checkArgument(init_vertices > 0,"Number of initial unconnected 'seed' vertices must be positive");  Preconditions.checkArgument(numEdgesToAttach > 0,"Number of edges to attach at each time step must be positive");  Preconditions.checkArgument(numEdgesToAttach <= init_vertices,"Number of edges to attach at each time step must less than or equal to the number of initial vertices");  mNumEdgesToAttachPerStep=numEdgesToAttach;  mRandom=new Random(seed);  this.graphFactory=graphFactory;  this.vertexFactory=vertexFactory;  this.edgeFactory=edgeFactory;  this.init_vertices=init_vertices;  initialize(seedVertices);}  }
class C{  DocumentInfo(String url,String params,boolean postRequest){  this.params=params;  this.postRequest=postRequest;  setUrl(url);}  }
class C{  public final int readUByte(){  int ch=read() & 0xFF;  return ch;}  }
class C{  @Override public ArrayList<StaticCluster> clusterer(MapView mapView){  Rect mScreenRect=mapView.getIntrinsicScreenRect(null);  BoundingBox bb=mapView.getBoundingBox();  double latSpan=bb.getLatitudeSpan();  double lonSpan=bb.getLongitudeSpan();  double gridSizeX, gridSizeY;  gridSizeX=lonSpan * (double)mGridSize / (double)(mScreenRect.right - mScreenRect.left);  gridSizeY=latSpan * (double)mGridSize / (double)(mScreenRect.bottom - mScreenRect.top);  int numCellsW=(int)(360.0f / gridSizeX);  ArrayList<StaticCluster> clusters=new ArrayList<StaticCluster>();  LongSparseArray<StaticCluster> sparseArray=new LongSparseArray<StaticCluster>();  for (  Marker item : mItems) {    long gridX=(long)(item.getPosition().getLongitude() / gridSizeX);    long gridY=(long)(item.getPosition().getLatitude() / gridSizeY);    long coord=numCellsW * gridX + gridY;    StaticCluster cluster=sparseArray.get(coord);    if (cluster == null) {      cluster=new StaticCluster(item.getPosition());      sparseArray.put(coord,cluster);      clusters.add(cluster);    }    cluster.add(item);  }  return clusters;}  }
class C{  void foo(){}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  private boolean canAddVelocimacro(String name,String sourceTemplate){  if (getAutoload()) {    for (int i=0; i < macroLibVec.size(); i++) {      String lib=(String)macroLibVec.elementAt(i);      if (lib.equals(sourceTemplate)) {        return true;      }    }  }  if (!addNewAllowed) {    logVMMessageWarn("Velocimacro : VM addition rejected : " + name + " : inline VMs not allowed.");    return false;  }  if (!templateLocal) {    if (isVelocimacro(name,sourceTemplate) && !replaceAllowed) {      logVMMessageWarn("Velocimacro : VM addition rejected : " + name + " : inline not allowed to replace existing VM");      return false;    }  }  return true;}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){}  }
class C{  @Override public void trace(String msg,Throwable t){  if (logger.isLoggable(Level.FINEST)) {    log(SELF,Level.FINEST,msg,t);  }}  }
class C{  public static int dayOfWeek(long day){  long[] remainder=new long[1];  floorDivide(day + Calendar.THURSDAY,7,remainder);  int dayOfWeek=(int)remainder[0];  dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;  return dayOfWeek;}  }
class C{  public void addDataSetColors(ArrayList<Integer> colors){  mDataSetColors.add(colors);  mColorCount+=colors.size();}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  } else   if (destFile == null) {    throw new NullPointerException("Destination must not be null");  } else   if (!srcFile.exists()) {    throw new FileNotFoundException("Source \'" + srcFile + "\' does not exist");  } else   if (srcFile.isDirectory()) {    throw new IOException("Source \'" + srcFile + "\' is a directory");  } else   if (destFile.exists()) {    throw new IOException("Destination \'" + destFile + "\' already exists");  } else   if (destFile.isDirectory()) {    throw new IOException("Destination \'" + destFile + "\' is a directory");  } else {    boolean rename=srcFile.renameTo(destFile);    if (!rename) {      copyFile(srcFile,destFile,true);      if (!srcFile.delete()) {        forceDelete(destFile);        throw new IOException("Failed to delete original file \'" + srcFile + "\' after copy to \'"+ destFile+ "\'");      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void unzip(File zipIn,File outDir) throws IOException {  ZipFile zfile=new ZipFile(zipIn);  Enumeration<? extends ZipEntry> entries=zfile.entries();  byte[] buffer=new byte[1024];  int readCount;  while (entries.hasMoreElements()) {    ZipEntry entry=entries.nextElement();    File file=new File(outDir,entry.getName());    if (entry.isDirectory()) {      file.mkdirs();    } else {      file.getParentFile().mkdirs();      InputStream in=zfile.getInputStream(entry);      try {        OutputStream out=new FileOutputStream(file);        try {          while ((readCount=in.read(buffer)) > 0)           out.write(buffer,0,readCount);        }  finally {          out.close();        }      }  finally {        in.close();      }    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  static public String numberToString(Number n) throws JSONException {  if (n == null) {    throw new JSONException("Null pointer");  }  testValidity(n);  String s=n.toString();  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public static void add(int tabId,AsyncTabCreationParams params){  ensureInitialized();  sAsyncTabCreationParams.put(tabId,params);}  }
class C{  private String generateScreenOnOrOffUtternace(int feedbackIndex){  int resourceId=(feedbackIndex == INDEX_SCREEN_ON) ? R.string.template_screen_on : R.string.template_screen_off;  String template=mContext.getString(resourceId);  int currentRingerVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_RING);  int maxRingerVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);  int volumePercent=(100 / maxRingerVolume) * currentRingerVolume;  int adjustment=volumePercent % 10;  if (adjustment < 5) {    volumePercent-=adjustment;  } else   if (adjustment > 5) {    volumePercent+=(10 - adjustment);  }  return String.format(template,volumePercent);}  }
class C{  private static Address GetCharArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetCharArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    char[] sourceArray=(char[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size * BYTES_IN_CHAR);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size * BYTES_IN_CHAR);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public void testDirectFactoryDynamic() throws Exception {  MockConfigurableSimilarity sim=getSimilarity("text_sim2",MockConfigurableSimilarity.class);  assertEquals("is there an echo?",sim.getPassthrough());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private void checkPageComplete(){  if (getRiskAnalysisWizard().getAssociatedGefaehrdungen().isEmpty()) {    setPageComplete(false);  } else {    setPageComplete(true);  }}  }
class C{  public boolean toggleHold(){  m_isHoldOn=!m_isHoldOn;  return m_isHoldOn;}  }
class C{  private void skip() throws Exception {  if (data.length > 1) {    if (data[off + 1] != '/') {      throw new PathException("Path '%s' in %s has an illegal syntax",path,type);    }    off++;  }  start=++off;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void submit(O tuple){  getDestination().accept(tuple);}  }
class C{  protected MetricQuery(){  super();}  }
class C{  public void testCompositeLink(){  LOGGER.debug("buildTextFromElement of Composite link");  Document document=Jsoup.parse("<a href=\"\">Text1<img alt=\"Image Alt \" src=\"\"/> Text3</a>");  Element el=document.select("a").first();  LinkTextElementBuilder instance=new LinkTextElementBuilder();  String expResult="Text1 Image Alt Text3";  String result=instance.buildTextFromElement(el);  assertEquals(expResult,result);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.306 -0500",hash_original_method="45427D901AB4A7DC08467113333FDBE7",hash_generated_method="FDBE76F2D72D0EEE427967DB714D990D") @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public boolean hasThread(Thread thread){synchronized (this) {    return this.participatingThreads.contains(thread);  }}  }
class C{  public JavaScriptBuiltinElement(String builtinName){  this.builtinName=builtinName;}  }
class C{  protected void put(String key,String value){  SortedSet<String> temp;  if (this.baseParameters.containsKey(key)) {    temp=new TreeSet<String>(this.baseParameters.get(key));    temp.add(value);    this.baseParameters.put(key,temp);  } else {    temp=new TreeSet<String>();    temp.add(value);    this.baseParameters.put(key,temp);  }}  }
class C{  public void writeDTD(String dtd) throws XMLStreamException {  if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) {    closeStartTag();  }  _writer.write(dtd);  writeLineSeparator();}  }
class C{  protected Task<T> postTask(Object request,String path,Object... args){  TaskResourceRep task=client.post(TaskResourceRep.class,request,path,args);  return new Task<T>(client,task,resourceClass);}  }
class C{  private void createNewFormat(int AD_Table_ID){  MPrintFormat pf=MPrintFormat.createFromTable(Env.getCtx(),AD_Table_ID);  launchReport(pf);}  }
class C{  public synchronized void fixupApiStorage(){  try {    long minNodeId=0;    long minWayId=0;    long minRelationId=0;    List<Node> nl=new ArrayList<Node>(currentStorage.getNodes());    for (    Node n : nl) {      if (n.getState() != OsmElement.STATE_UNCHANGED) {        apiStorage.insertElementUnsafe(n);        if (n.getOsmId() < minNodeId) {          minNodeId=n.getOsmId();        }      }      if (n.getState() == OsmElement.STATE_DELETED) {        currentStorage.removeElement(n);      }    }    List<Way> wl=new ArrayList<Way>(currentStorage.getWays());    for (    Way w : wl) {      if (w.getState() != OsmElement.STATE_UNCHANGED) {        apiStorage.insertElementUnsafe(w);        if (w.getOsmId() < minWayId) {          minWayId=w.getOsmId();        }      }      if (w.getState() == OsmElement.STATE_DELETED) {        currentStorage.removeElement(w);      }    }    List<Relation> rl=new ArrayList<Relation>(currentStorage.getRelations());    for (    Relation r : rl) {      if (r.getState() != OsmElement.STATE_UNCHANGED) {        apiStorage.insertElementUnsafe(r);        if (r.getOsmId() < minRelationId) {          minRelationId=r.getOsmId();        }      }      if (r.getState() == OsmElement.STATE_DELETED) {        currentStorage.removeElement(r);      }    }    getFactory().setIdSequences(minNodeId,minWayId,minRelationId);  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public void add(ContingencyTable eval){  for (int i=0; i < 2; i++) {    for (int j=0; j < 2; j++) {      add(i,j,eval.mContingencyTable[i][j]);    }  }}  }
class C{  public void error(int message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  private IgfsLogger(){}  }
class C{  public Savable loadAsset(){  return file.loadAsset();}  }
class C{  public static void reset(){  instance=new ResourcesSoot();}  }
class C{  public void shuffle(){  Random r=new Random();  int num=count;  while (num > 1) {    int value=r.nextInt(num);    num--;    int temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  public static Stamp forNodeIntrinsic(){  return NodeIntrinsicStamp.SINGLETON;}  }
class C{  void sign(byte[] data,int offset,int length,ServerMessageBlock request,ServerMessageBlock response){  request.signSeq=signSequence;  if (response != null) {    response.signSeq=signSequence + 1;    response.verifyFailed=false;  }  try {    update(macSigningKey,0,macSigningKey.length);    int index=offset + ServerMessageBlock.SIGNATURE_OFFSET;    for (int i=0; i < 8; i++)     data[index + i]=0;    ServerMessageBlock.writeInt4(signSequence,data,index);    update(data,offset,length);    System.arraycopy(digest(),0,data,index,8);    if (bypass) {      bypass=false;      System.arraycopy("BSRSPYL ".getBytes(),0,data,index,8);    }  } catch (  Exception ex) {    if (log.level > 0)     ex.printStackTrace(log);  } finally {    signSequence+=2;  }}  }
class C{  public CompositeReactPackage(ReactPackage arg1,ReactPackage arg2,ReactPackage... args){  mChildReactPackages.add(arg1);  mChildReactPackages.add(arg2);  for (  ReactPackage reactPackage : args) {    mChildReactPackages.add(reactPackage);  }}  }
class C{  private boolean isClear(){  if (displayed.isEmpty() && queue.isEmpty()) {    return true;  }  return false;}  }
class C{  protected boolean isFromClient(DatagramPacket packet){  if (packet.getPort() == clientPort && clientAddress.equals(packet.getAddress())) {    return true;  } else   if (packet.getPort() == clientPort && clientAddress.getHostAddress().startsWith("127.")) {    return true;  }  return false;}  }
class C{  @Override public void acceptClassifier(final BatchClassifierEvent ce){  if (ce.getTrainSet() == null || ce.getTrainSet().isStructureOnly()) {    return;  }  Instances trainHeader=ce.getTrainSet().getDataSet().stringFreeStructure();  if (ce.getClassifier() instanceof weka.classifiers.misc.InputMappedClassifier) {    try {      trainHeader=((weka.classifiers.misc.InputMappedClassifier)ce.getClassifier()).getModelHeader(trainHeader);    } catch (    Exception e) {      e.printStackTrace();    }  }  String titleString=ce.getClassifier().getClass().getName();  titleString=titleString.substring(titleString.lastIndexOf('.') + 1,titleString.length());  String prefix="";  String relationName=(m_includeRelationName) ? trainHeader.relationName() : "";  try {    prefix=m_env.substitute(m_filenamePrefix);  } catch (  Exception ex) {    String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();    if (m_logger != null) {      m_logger.logMessage(message);      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");    } else {      System.err.println(message);    }    return;  }  String fileName="" + prefix + relationName+ titleString+ "_"+ ce.getSetNumber()+ "_"+ ce.getMaxSetNumber();  fileName=sanitizeFilename(fileName);  String dirName=m_directory.getPath();  try {    dirName=m_env.substitute(dirName);  } catch (  Exception ex) {    String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();    if (m_logger != null) {      m_logger.logMessage(message);      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");    } else {      System.err.println(message);    }    return;  }  File tempFile=new File(dirName);  fileName=tempFile.getAbsolutePath() + File.separator + fileName;  saveModel(fileName,trainHeader,ce.getClassifier());}  }
class C{  public void moveItemDown(ScheduleItem si){  int sequenceId=si.getSequenceId();  if (sequenceId + 1 > _sequenceNum) {    si.setSequenceId(0);    resequenceIds();  } else {    ScheduleItem replaceSi=getItemBySequenceId(sequenceId + 1);    if (replaceSi != null) {      replaceSi.setSequenceId(sequenceId);      si.setSequenceId(sequenceId + 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VinciLog.d("%s",e.toString());    return false;  }}  }
class C{  public DocumentStoredFieldVisitor(Set<String> fieldsToAdd){  this.fieldsToAdd=fieldsToAdd;}  }
class C{  private void validateData(){  boolean isValid=(m_queryTextField != null && getQueryText() != null && getQueryText().trim().length() > 0);  if (isValid)   setMessage(DEFAULT_MESSAGE); else   setMessage("Requires input value.",ERROR);  setPageComplete(isValid);}  }
class C{  public X509Certificate generateSelfSignedCertificate(KeyPair keyPair,CertificateData certificateData){  try {    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());    setDateParamaters();    X500NameBuilder builder=new X500NameBuilder(BCStyle.INSTANCE);    builder.addRDN(BCStyle.CN,certificateData.getCommonName());    builder.addRDN(BCStyle.OU,certificateData.getOrganizationUnit());    builder.addRDN(BCStyle.O,certificateData.getOrganizationName());    builder.addRDN(BCStyle.C,certificateData.getCountry());    builder.addRDN(BCStyle.L,certificateData.getLocalityName());    builder.addRDN(BCStyle.ST,certificateData.getState());    builder.addRDN(BCStyle.EmailAddress,certificateData.getEmail());    BigInteger serial=BigInteger.valueOf(System.currentTimeMillis());    X509v3CertificateBuilder certGen=new JcaX509v3CertificateBuilder(builder.build(),serial,notBefore,notAfter,builder.build(),keyPair.getPublic());    ContentSigner sigGen=new JcaContentSignerBuilder("SHA256WithRSAEncryption").build(keyPair.getPrivate());    X509Certificate x509cert=new JcaX509CertificateConverter().getCertificate(certGen.build(sigGen));    x509cert.checkValidity(new Date());    x509cert.verify(x509cert.getPublicKey());    return x509cert;  } catch (  Exception t) {    throw new RuntimeException("Failed to generate self-signed certificate!",t);  }}  }
class C{  public String retrieveLogin(){  return sharedPreferences.getString(application.getString(R.string.shared_prefs_login),"");}  }
class C{  protected void computeFields(){  int mask=0;  if (isPartiallyNormalized()) {    mask=getSetStateFields();    int fieldMask=~mask & ALL_FIELDS;    if (fieldMask != 0 || cachedFixedDate == Long.MIN_VALUE) {      mask|=computeFields(fieldMask,mask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK));      assert mask == ALL_FIELDS;    }  } else {    mask=ALL_FIELDS;    computeFields(mask,0);  }  setFieldsComputed(mask);}  }
class C{  @Override public void bindView(ViewHolder holder,List payloads){  holder.itemView.setSelected(isSelected());  holder.itemView.setTag(this);  holder.name.setText(name);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void reset(Collection<T> collection){  super.clear();  super.addAll(collection);  if (mListeners != null) {    mListeners.notifyChanged(this);  }}  }
class C{  private static synchronized void initLogDirLocation(){  if (null == logDirLocation) {    File agentJar=SpringAgent.getInspectitJarFile();    logDirLocation=agentJar.getParent() + File.separator + "logs"+ File.separator+ "startup";  }}  }
class C{  public void showColorizeNodesDialog(){  final Color col=CColorChooser.showDialog(m_model.getParent(),"Color Nodes",Color.WHITE,CNodeColorCollector.getNodeColors(m_model.getGraph()).toArray(new Color[0]));  if (col != null) {    CNodeColorizer.colorizeSelectedNodes(m_model.getGraph(),col);  }}  }
class C{  static MediaType createApplicationType(String subtype){  return create(APPLICATION_TYPE,subtype);}  }
class C{  private static boolean isAssignable(final Type type,final Type toType,final Map<TypeVariable<?>,Type> typeVarAssigns){  if (toType == null || toType instanceof Class<?>) {    return isAssignable(type,(Class<?>)toType);  }  if (toType instanceof ParameterizedType) {    return isAssignable(type,(ParameterizedType)toType,typeVarAssigns);  }  if (toType instanceof GenericArrayType) {    return isAssignable(type,(GenericArrayType)toType,typeVarAssigns);  }  if (toType instanceof WildcardType) {    return isAssignable(type,(WildcardType)toType,typeVarAssigns);  }  if (toType instanceof TypeVariable<?>) {    return isAssignable(type,(TypeVariable<?>)toType,typeVarAssigns);  }  throw new IllegalStateException("found an unhandled type: " + toType);}  }
class C{  private void init(){  if (neuron.getUpdateRule() instanceof ActivityGenerator) {    mainShape=square;  } else {    mainShape=circle;  }  addChild(mainShape);  priorityText.setFont(PRIORITY_FONT);  labelBackground.setPaint(this.getNetworkPanel().getBackground());  labelBackground.setBounds(labelText.getBounds());  labelBackground.addChild(labelText);  addChild(labelBackground);  updateTextVisibility();  resetColors();  update();  setPickable(true);  addPropertyChangeListener(PROPERTY_FULL_BOUNDS,this);  PBounds bounds=mainShape.getBounds();  setBounds(bounds);}  }
class C{  private void initializeMethodCoverageCount(Map<TestCase,Set<TestFitnessFunction>> testToGoals){  for (  Set<TestFitnessFunction> goals : testToGoals.values()) {    for (    TestFitnessFunction goal : goals) {      String methodName=getMethodNameWithoutDescriptor(goal.getTargetMethod());      if (!methodCount.containsKey(methodName)) {        methodCount.put(methodName,new LinkedHashSet<>());      }      methodCount.get(methodName).add(goal.getTargetMethod());    }  }}  }
class C{  protected int calculateNewCapacity(int proposedCapacity){  int newCapacity=1;  if (proposedCapacity > MAXIMUM_CAPACITY) {    newCapacity=MAXIMUM_CAPACITY;  } else {    while (newCapacity < proposedCapacity) {      newCapacity<<=1;    }    if (newCapacity > MAXIMUM_CAPACITY) {      newCapacity=MAXIMUM_CAPACITY;    }  }  return newCapacity;}  }
class C{  public static ParamsMap of(){  return new ParamsMap();}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append("attributes " + attributesToString() + "\n");  text.append("number of instances " + getInstNums());  return text.toString();}  }
class C{  public ByteArrayDataSource(InputStream is,String type){  try {    ByteArrayOutputStream os=new ByteArrayOutputStream();    int ch;    while ((ch=is.read()) != -1) {      os.write(ch);    }    m_data=os.toByteArray();  } catch (  IOException ioex) {    log.log(Level.WARNING,"",ioex);  }  if (type != null && type.length() > 0)   m_type=type;}  }
class C{  public Object readRemote() throws IOException {  String type=readType();  String url=readString();  return resolveRemote(type,url);}  }
class C{  public static final CButton createDeleteButton(String text){  AppsAction aa=new AppsAction(A_DELETE,KeyStroke.getKeyStroke(KeyEvent.VK_F3,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  private boolean puedeSerEditada(PrevisionVO prevision){  boolean puedeSerModificada=false;  if (prevision.getEstado() == EstadoPrevision.ABIERTA.getIdentificador() || prevision.getEstado() == EstadoPrevision.RECHAZADA.getIdentificador())   if (prevision.getIdusrgestor().equals(getServiceClient().getId()))   puedeSerModificada=true;  return puedeSerModificada;}  }
class C{  private void initKeyManager(KeyStore keystore,String ksPasswd) throws GeneralSecurityException, IOException {  KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  kmf.init(keystore,ksPasswd.toCharArray());  KeyManager[] kms=kmf.getKeyManagers();  for (  final KeyManager km : kms) {    if (km instanceof X509KeyManager) {      keyManager=(X509KeyManager)km;      return;    }  }  throw new NoSuchAlgorithmException("No X509KeyManager in KeyManagerFactory");}  }
class C{  @Override public void updateMovedFile(PsiFile file) throws IncorrectOperationException {  try {    Map<PsiReference,PsiFileSystemItem> psiReferences=REPLACEMENT_MAP.get(file);    if (psiReferences != null) {      for (      Map.Entry<PsiReference,PsiFileSystemItem> entry : psiReferences.entrySet()) {        PsiReference key=entry.getKey();        if (key instanceof BindablePsiReference) {          key.bindToElement(entry.getValue());        }      }      psiReferences.clear();    }  }  finally {    REPLACEMENT_MAP.set(file,null);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.978 -0500",hash_original_method="7CF9A5A04E9D7FD8D1056DC0F832B9EF",hash_generated_method="31FD44C4E00A41800110B338F11EDAE7") protected boolean scrollTop(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  if (getTopLine(widget) >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(0));    return true;  }  return false;}  }
class C{  public synchronized void close(){  if (closed)   return;  closed=true;  try {    indexFile.close();  } catch (  final IOException ie) {  }  try {    dataFile.close();  } catch (  final IOException ie) {  }}  }
class C{  public static int stringToTag(String tag){  char[] c=tag.toCharArray();  if (c.length != 4) {    throw new IllegalArgumentException("Bad tag length: " + tag);  }  return c[0] << 24 | c[1] << 16 | c[2] << 8 | c[3];}  }
class C{  @DSComment("No op default handler") @DSSafe(DSCat.XML) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.144 -0500",hash_original_method="08AD4CBC251CA96B103DE58FB6AA2921",hash_generated_method="2E393C8D7D82B97D34D7D61966B266D5") public void endDocument() throws SAXException {}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static int StringEqualsIgnoreCase(String first,String second){  if (first == null) {    throw new NullPointerException("StringEquals is not supposed to work on a null caller");  }  if (second == null) {    return -BooleanHelper.K;  }  if (first.equalsIgnoreCase(second)) {    return BooleanHelper.K;  }  return StringEquals(first.toLowerCase(),second.toLowerCase());}  }
class C{  private void resetIdleTime(){  long now=System.currentTimeMillis();synchronized (this) {    lastMessageSent=now;  }}  }
class C{  public synchronized Future<ReplDBMSHeader> watchForProcessedSequenceNumber(long seqno,boolean cancel) throws InterruptedException {  SeqnoWatchPredicate seqnoPredicate=new SeqnoWatchPredicate(seqno);  return waitForProcessedEvent(seqnoPredicate,cancel);}  }
class C{  public DailyTimeIntervalTriggerImpl(String name,TimeOfDay startTimeOfDay,TimeOfDay endTimeOfDay,IntervalUnit intervalUnit,int repeatInterval){  this(name,null,startTimeOfDay,endTimeOfDay,intervalUnit,repeatInterval);}  }
class C{  public void printExpr(JCTree tree) throws IOException {  printExpr(tree,TreeInfo.noPrec);}  }
class C{  private static void waitForSelectionNotify(WindowPropertyGetter dataGetter) throws InterruptedException {  long startTime=System.currentTimeMillis();  XToolkit.awtLock();  try {    do {      DataTransferer.getInstance().processDataConversionRequests();      XToolkit.awtLockWait(250);    } while (propertyGetter == dataGetter && System.currentTimeMillis() < startTime + UNIXToolkit.getDatatransferTimeout());  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public boolean isSyncIQEnabled(String firmwareVersion) throws IsilonException {  ClientResponse resp=null;  boolean isSyncIqEnabled=false;  try {    resp=_client.get(_baseUrl.resolve(URI_SYNCIQ_SERVICE_STATUS));    JSONObject jsonResp=resp.getEntity(JSONObject.class);    if (jsonResp.has("settings") && jsonResp.getJSONObject("settings") != null) {      if (jsonResp.getJSONObject("settings").has("service")) {        String syncService=jsonResp.getJSONObject("settings").getString("service");        if (syncService != null && !syncService.isEmpty()) {          sLogger.info("IsilonApi - SyncIQ service status {} ",syncService);          if ("on".equalsIgnoreCase(syncService)) {            isSyncIqEnabled=true;          }        }      }    }  } catch (  Exception e) {    throw IsilonException.exceptions.unableToConnect(_baseUrl,e);  } finally {    if (resp != null) {      resp.close();    }  }  return isSyncIqEnabled;}  }
class C{  public ComputedCSSPaintValue(int idx){  super(null);  valueProvider=this;  index=idx;}  }
class C{  public Intent build(Context context){  Intent res=new Intent(context,ColorPickActivity.class);  res.putExtra(EXTRA_OLD_COLOR,mOldColor);  return res;}  }
class C{  public boolean isValorCierto(){  return valorCierto;}  }
class C{  public FreeBusyUrl(String uri){  super(uri);}  }
class C{  public void info(Object message,Throwable t){}  }
class C{  public void show(){  show(false,null);}  }
class C{  private boolean spnl(){  match(SPNL);  return true;}  }
class C{  public int Compare(final String str){  return ObjectName.compareTo(str);}  }
class C{  void adjustOrPutValue(final T key,final long adjustAmount){  final int arrayMask=keys.length - 1;  int probe=(int)hash(key.hashCode()) & arrayMask;  int drift=1;  while (states[probe] != 0 && !keys[probe].equals(key)) {    probe=(probe + 1) & arrayMask;    drift++;    assert (drift < DRIFT_LIMIT) : "drift: " + drift + " >= DRIFT_LIMIT";  }  if (states[probe] == 0) {    assert (numActive <= loadThreshold) : "numActive: " + numActive + " > loadThreshold: "+ loadThreshold;    keys[probe]=key;    values[probe]=adjustAmount;    states[probe]=(short)drift;    numActive++;  } else {    assert (keys[probe].equals(key));    values[probe]+=adjustAmount;  }}  }
class C{  private Math(){}  }
class C{  public boolean createModel(boolean simulation) throws Exception {  if (getSessionNode().getModel() != null) {    return true;  }  SessionNode sessionNode=getSessionNode();  Class modelClass=determineTheModelClass(sessionNode);  if (modelClass == null && !simulation) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),config.getNodeSpecificMessage());    return false;  }  if (sessionNode.existsParameterizedConstructor(modelClass)) {    Parameters params=sessionNode.getParam(modelClass);    Object[] arguments=sessionNode.getModelConstructorArguments(modelClass);    if (params != null) {      boolean edited=editParameters(modelClass,params,arguments);      if (!edited) {        return false;      }    }  }  sessionNode.createModel(modelClass,simulation);  return true;}  }
class C{  private void postProcessEdgeAddition(EdgeChange edgeChange){  Set<Diff> requiredIncomingTransitionAdditions=new HashSet<Diff>();  for (  Diff requireds : edgeChange.getRequires()) {    if (requireds instanceof ReferenceChange) {      ReferenceChange requiredRefChange=(ReferenceChange)requireds;      if (requiredRefChange.getReference() == SGraphPackage.Literals.VERTEX__OUTGOING_TRANSITIONS && requiredRefChange.getKind() == DifferenceKind.ADD) {        requiredIncomingTransitionAdditions.addAll(findRequiredIncomingTransitionRefChange(requiredRefChange,DifferenceKind.ADD));      }    }  }  edgeChange.getRequires().addAll(requiredIncomingTransitionAdditions);}  }
class C{  public Object parseText(String text){  if (text == null || "".equals(text)) {    throw new IllegalArgumentException("Text must not be null or empty");  }  return createParser().parse(text);}  }
class C{  @VisibleForTesting void clearOperations(){  operationsMapManager.clear();}  }
class C{  public CacheControl(){  privateFlag=false;  noCache=false;  noStore=false;  noTransform=true;  mustRevalidate=false;  proxyRevalidate=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.244 -0400",hash_original_method="AE9D1970F62CF6B7B0F35C4F3A804205",hash_generated_method="AE9D1970F62CF6B7B0F35C4F3A804205") AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  public EnuFrame(){  x=0.0f;  y=0.0f;  z=0.0f;}  }
class C{  public static float spline(float x,int numKnots,float[] knots){  int span;  int numSpans=numKnots - 3;  float k0, k1, k2, k3;  float c0, c1, c2, c3;  if (numSpans < 1)   throw new IllegalArgumentException("Too few knots in spline");  x=clamp(x,0,1) * numSpans;  span=(int)x;  if (span > numKnots - 4)   span=numKnots - 4;  x-=span;  k0=knots[span];  k1=knots[span + 1];  k2=knots[span + 2];  k3=knots[span + 3];  c3=m00 * k0 + m01 * k1 + m02 * k2 + m03 * k3;  c2=m10 * k0 + m11 * k1 + m12 * k2 + m13 * k3;  c1=m20 * k0 + m21 * k1 + m22 * k2 + m23 * k3;  c0=m30 * k0 + m31 * k1 + m32 * k2 + m33 * k3;  return ((c3 * x + c2) * x + c1) * x + c0;}  }
class C{  public void testCompareGreaterScale2(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=48;  String b="4573563567890295784902768787678287";  int bScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public void run(){  try {    boolean running=true;    while (running) {      Thread.sleep(_bot.getMessageDelay());      String line=(String)_outQueue.next();      if (line != null) {        _bot.sendRawLine(line);      } else {        running=false;      }    }  } catch (  InterruptedException e) {  }}  }
class C{  private static Number createNumberFromStringValue(String value) throws NumberFormatException {  final String suffix=value.substring(value.length() - 1);  if ("L".equalsIgnoreCase(suffix)) {    return Long.valueOf(value.substring(0,value.length() - 1));  }  if ("F".equalsIgnoreCase(suffix)) {    return Float.valueOf(value.substring(0,value.length() - 1));  }  if ("D".equalsIgnoreCase(suffix)) {    return Double.valueOf(value.substring(0,value.length() - 1));  }  try {    return Integer.valueOf(value);  } catch (  NumberFormatException e) {  }  try {    return Long.valueOf(value);  } catch (  NumberFormatException e1) {  }  try {    return Double.valueOf(value);  } catch (  NumberFormatException e2) {  }  throw new NumberFormatException("Cannot convert string value '" + value + "' into a numerical value");}  }
class C{  @Override public String serialize(){  return null;}  }
class C{  boolean hasStackTrace(){  return mStackTrace != null;}  }
class C{  public static void ipReconfig(final ClusterIpInfoForm ipReconfigForm){  ipReconfigForm.validate();  if (Validation.hasErrors()) {    params.flash();    Validation.keep();    clusterIpInfo(ipReconfigForm);  }  final ViPRSystemClient client=BourneUtil.getSysClient();  final ClusterIpInfo clusterIpInfo=ipReconfigForm.getClusterIpInfo();  try {    boolean isAccepted=client.control().reconfigClusterIps(clusterIpInfo,ipReconfigForm.powerOff);    if (isAccepted) {      flash.put("info",MessagesUtils.get(SUCCESS_KEY));    } else {      flash.error(MessagesUtils.get(ERROR_KEY));    }  } catch (  Exception e) {    flash.error(MessagesUtils.get(EXCEPTION_KEY,e.getMessage()));    Logger.error(e,e.getMessage());  }  clusterIpInfo(ipReconfigForm);}  }
class C{  public void testExamples() throws IOException {  checkOneTerm(a,"bukukah","buku");  checkOneTerm(a,"adalah","ada");  checkOneTerm(a,"bukupun","buku");  checkOneTerm(a,"bukuku","buku");  checkOneTerm(a,"bukumu","buku");  checkOneTerm(a,"bukunya","buku");  checkOneTerm(a,"mengukur","ukur");  checkOneTerm(a,"menyapu","sapu");  checkOneTerm(a,"menduga","duga");  checkOneTerm(a,"menuduh","uduh");  checkOneTerm(a,"membaca","baca");  checkOneTerm(a,"merusak","rusak");  checkOneTerm(a,"pengukur","ukur");  checkOneTerm(a,"penyapu","sapu");  checkOneTerm(a,"penduga","duga");  checkOneTerm(a,"pembaca","baca");  checkOneTerm(a,"diukur","ukur");  checkOneTerm(a,"tersapu","sapu");  checkOneTerm(a,"kekasih","kasih");  checkOneTerm(a,"berlari","lari");  checkOneTerm(a,"belajar","ajar");  checkOneTerm(a,"bekerja","kerja");  checkOneTerm(a,"perjelas","jelas");  checkOneTerm(a,"pelajar","ajar");  checkOneTerm(a,"pekerja","kerja");  checkOneTerm(a,"tarikkan","tarik");  checkOneTerm(a,"ambilkan","ambil");  checkOneTerm(a,"mengambilkan","ambil");  checkOneTerm(a,"makanan","makan");  checkOneTerm(a,"janjian","janji");  checkOneTerm(a,"perjanjian","janji");  checkOneTerm(a,"tandai","tanda");  checkOneTerm(a,"dapati","dapat");  checkOneTerm(a,"mendapati","dapat");  checkOneTerm(a,"pantai","panta");}  }
class C{  public static List transpose(List lists){  List result=new ArrayList();  if (lists.isEmpty())   return result;  int minSize=Integer.MAX_VALUE;  for (  Object listLike : lists) {    List list=(List)DefaultTypeTransformation.castToType(listLike,List.class);    if (list.size() < minSize)     minSize=list.size();  }  if (minSize == 0)   return result;  for (int i=0; i < minSize; i++) {    result.add(new ArrayList());  }  for (  Object listLike : lists) {    List list=(List)DefaultTypeTransformation.castToType(listLike,List.class);    for (int i=0; i < minSize; i++) {      List resultList=(List)result.get(i);      resultList.add(list.get(i));    }  }  return result;}  }
class C{  public boolean[][] convertToBoolean(Cell[][] cells){  boolean[][] toReturn=new boolean[_size][_size];  for (int j=0; j < _size; j++) {    for (int k=0; k < _size; k++) {      if (cells[j][k].getAlive()) {        toReturn[j][k]=true;      } else {      }    }  }  return toReturn;}  }
class C{  public Boolean isCreateSupported(){  return createSupported;}  }
class C{  @SuppressWarnings("unused") protected void storeUserData(@NonNull Account account,@NonNull String key,@NonNull String value){  accountManager.setUserData(account,key,value);}  }
class C{  public String toString(){  return String.format("schema for %s",type);}  }
class C{  public boolean verify(X509Certificate cert,Provider sigProvider) throws NoSuchAlgorithmException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  Time signingTime=getSigningTime();  if (signingTime != null) {    cert.checkValidity(signingTime.getDate());  }  return doVerify(cert.getPublicKey(),sigProvider);}  }
class C{  public SwitchPortTuple(SwitchPortTuple other){  __isset_bitfield=other.__isset_bitfield;  this.dpid=other.dpid;  this.port=other.port;}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Schema schema){  return addTable(group,table,null,schema);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns11.class,args);}  }
class C{  public synchronized int read() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  readSide=Thread.currentThread();  int trials=2;  while (in < 0) {    if (closedByWriter) {      return -1;    }    if ((writeSide != null) && (!writeSide.isAlive()) && (--trials < 0)) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  int ret=buffer[out++];  if (out >= buffer.length) {    out=0;  }  if (in == out) {    in=-1;  }  return ret;}  }
class C{  public boolean equals(Object t1){  try {    Matrix4f m2=(Matrix4f)t1;    return (this.m00 == m2.m00 && this.m01 == m2.m01 && this.m02 == m2.m02 && this.m03 == m2.m03 && this.m10 == m2.m10 && this.m11 == m2.m11 && this.m12 == m2.m12 && this.m13 == m2.m13 && this.m20 == m2.m20 && this.m21 == m2.m21 && this.m22 == m2.m22 && this.m23 == m2.m23 && this.m30 == m2.m30 && this.m31 == m2.m31 && this.m32 == m2.m32 && this.m33 == m2.m33);  } catch (  ClassCastException e1) {    return false;  }catch (  NullPointerException e2) {    return false;  }}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public Object touchEL(int row){  return touch(row);}  }
class C{  public PreferencesCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,Context.MODE_PRIVATE);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  void scrapActiveViews(){  final View[] activeViews=mActiveViews;  final boolean multipleScraps=mViewTypeCount > 1;  ArrayList<View> scrapViews=mCurrentScrap;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      final LayoutParams lp=(LayoutParams)victim.getLayoutParams();      activeViews[i]=null;      final boolean scrapHasTransientState=ViewCompat.hasTransientState(victim);      int viewType=lp.viewType;      if (!shouldRecycleViewType(viewType) || scrapHasTransientState) {        if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) {          removeDetachedView(victim,false);        }        if (scrapHasTransientState) {          if (mTransientStateViews == null) {            mTransientStateViews=new SparseArrayCompat<View>();          }          mTransientStateViews.put(mFirstActivePosition + i,victim);        }        continue;      }      if (multipleScraps) {        scrapViews=mScrapViews[viewType];      }      lp.position=mFirstActivePosition + i;      scrapViews.add(victim);    }  }  pruneScrapViews();}  }
class C{  protected void progress(S state,E nextSubStage){  ServiceUtils.logInfo(this,"Progressing task service for workflow %s",state.documentSelfLink);  try {    TaskServiceUtils.progress(this,ServiceDocumentUtils.getTaskServiceState(state),nextSubStage.ordinal(),null);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  public String toString(){  return "NULL";}  }
class C{  @Override public boolean isPostOperation(){  return this.postOperation;}  }
class C{  public ByteLazyValue(Collection<? super ByteLazyValue> collection,ByteSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public void initialize(){  if (!this.seedInitialized) {    System.err.println("Seed " + this.maxHeight + " not initialized");    return;  }  this.heightOfNodes=new Vector();  this.tailLength=0;  this.firstNode=null;  this.firstNodeHeight=-1;  this.isInitialized=true;  System.arraycopy(this.seedNext,0,this.seedActive,0,messDigestTree.getDigestSize());}  }
class C{  public void test_getBooleanLjava_lang_ObjectI(){  boolean[] x={true};  boolean ret=false;  boolean thrown=false;  try {    ret=Array.getBoolean(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertTrue("Get returned incorrect value",ret);  try {    ret=Array.getBoolean(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getBoolean(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getBoolean(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  private boolean initialize(){  if (implClassDef.isInterface()) {    env.error(0,"rmic.cant.make.stubs.for.interface",implClassDef.getName());    return false;  }  try {    defRemote=env.getClassDeclaration(idRemote).getClassDefinition(env);    defException=env.getClassDeclaration(idJavaLangException).getClassDefinition(env);    defRemoteException=env.getClassDeclaration(idRemoteException).getClassDefinition(env);  } catch (  ClassNotFound e) {    env.error(0,"rmic.class.not.found",e.name);    return false;  }  Vector<ClassDefinition> remotesImplemented=new Vector<ClassDefinition>();  for (ClassDefinition classDef=implClassDef; classDef != null; ) {    try {      ClassDeclaration[] interfaces=classDef.getInterfaces();      for (int i=0; i < interfaces.length; i++) {        ClassDefinition interfaceDef=interfaces[i].getClassDefinition(env);        if (!remotesImplemented.contains(interfaceDef) && defRemote.implementedBy(env,interfaces[i])) {          remotesImplemented.addElement(interfaceDef);          if (env.verbose()) {            System.out.println("[found remote interface: " + interfaceDef.getName() + "]");          }        }      }      if (classDef == implClassDef && remotesImplemented.isEmpty()) {        if (defRemote.implementedBy(env,implClassDef.getClassDeclaration())) {          env.error(0,"rmic.must.implement.remote.directly",implClassDef.getName());        } else {          env.error(0,"rmic.must.implement.remote",implClassDef.getName());        }        return false;      }      classDef=(classDef.getSuperClass() != null ? classDef.getSuperClass().getClassDefinition(env) : null);    } catch (    ClassNotFound e) {      env.error(0,"class.not.found",e.name,classDef.getName());      return false;    }  }  Hashtable<String,Method> methods=new Hashtable<String,Method>();  boolean errors=false;  for (Enumeration<ClassDefinition> enumeration=remotesImplemented.elements(); enumeration.hasMoreElements(); ) {    ClassDefinition interfaceDef=enumeration.nextElement();    if (!collectRemoteMethods(interfaceDef,methods))     errors=true;  }  if (errors)   return false;  remoteInterfaces=new ClassDefinition[remotesImplemented.size()];  remotesImplemented.copyInto(remoteInterfaces);  String[] orderedKeys=new String[methods.size()];  int count=0;  for (Enumeration<Method> enumeration=methods.elements(); enumeration.hasMoreElements(); ) {    Method m=enumeration.nextElement();    String key=m.getNameAndDescriptor();    int i;    for (i=count; i > 0; --i) {      if (key.compareTo(orderedKeys[i - 1]) >= 0) {        break;      }      orderedKeys[i]=orderedKeys[i - 1];    }    orderedKeys[i]=key;    ++count;  }  remoteMethods=new Method[methods.size()];  for (int i=0; i < remoteMethods.length; i++) {    remoteMethods[i]=methods.get(orderedKeys[i]);    if (env.verbose()) {      System.out.print("[found remote method <" + i + ">: "+ remoteMethods[i].getOperationString());      ClassDeclaration[] exceptions=remoteMethods[i].getExceptions();      if (exceptions.length > 0)       System.out.print(" throws ");      for (int j=0; j < exceptions.length; j++) {        if (j > 0)         System.out.print(", ");        System.out.print(exceptions[j].getName());      }      System.out.println("]");    }  }  interfaceHash=computeInterfaceHash();  return true;}  }
class C{  public static void outputResultTreeFragment(SerializationHandler handler,XObject obj,XPathContext support) throws org.xml.sax.SAXException {  int doc=obj.rtf();  DTM dtm=support.getDTM(doc);  if (null != dtm) {    for (int n=dtm.getFirstChild(doc); DTM.NULL != n; n=dtm.getNextSibling(n)) {      handler.flushPending();      if (dtm.getNodeType(n) == DTM.ELEMENT_NODE && dtm.getNamespaceURI(n) == null)       handler.startPrefixMapping("","");      dtm.dispatchToEvents(n,handler);    }  }}  }
class C{  public File file(){  return file;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected V create(K key){  return null;}  }
class C{  private boolean equal(File[] array1,File[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    boolean found=false;    for (int j=0; j < array2.length; j++) {      if (equal(array1[i].getAbsoluteFile(),array2[j].getAbsoluteFile())) {        found=true;        break;      }    }    if (!found) {      StringBuffer sb=new StringBuffer();      sb.append("Didn't find ");      sb.append(array1[i]);      sb.append(" in ");      for (int k=0; k < array2.length; k++) {        sb.append(array2[k]);        sb.append(" ");      }      System.out.println(sb);      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public void testFollowerUpdatesLeaderAndTermOnAppend() throws Throwable {  runOnServer(null);}  }
class C{  private final String extractPath(String file){  int lastSepPos=file.lastIndexOf(File.separator);  return (lastSepPos == -1 ? "" : File.separator + file.substring(0,lastSepPos));}  }
class C{  public void types(String types[]){  this.types=types;}  }
class C{  @Override public int hashCode(){  return JsonNull.class.hashCode();}  }
class C{  private void handleMarkerEvent(String eventName,Marker marker){  WritableMap event=Arguments.createMap();  WritableMap data=Arguments.createMap();  data.putDouble("latitude",marker.getPosition().latitude);  data.putDouble("longitude",marker.getPosition().longitude);  data.putString("publicId",publicMarkerIds.get(marker.getId()));  event.putString("event","didTapMarker");  event.putMap("data",data);  reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(mapView.getId(),"topChange",event);}  }
class C{  public PolicyConstraintsExtension(int require,int inhibit) throws IOException {  this(Boolean.FALSE,require,inhibit);}  }
class C{  @Override protected ArrayList<String> genAttachFiles() throws Exception {  _log.info("Start SendAlertEvent::genAttachFiles");  ArrayList<String> fileList=new ArrayList<String>();  ZipOutputStream outputStream=null;  try {    fileList.add(generateConfigFile());    fileList.add(generateSystemEventFile());    String fileName=SYSTEM_LOGS_FILE_NAME + getFileExtension();    _log.debug("Logs zip entry name {}",fileName);    LogRequest logReqInfo=new LogRequest.Builder().nodeIds(_nodeIds).baseNames(_logNames).logLevel(_severity).startTime(_start).endTime(_end).regex(_msgRegex).maxCont(maxCount).build();    generateLogFile(logReqInfo,mediaType,SYSTEM_LOGS_FILE_PATH,fileName);    fileList.add(SYSTEM_LOGS_FILE_PATH);  }  finally {    if (outputStream != null) {      outputStream.close();    }  }  _log.info("Finish SendAlertEvent::genAttachFiles");  return fileList;}  }
class C{  public static String OSX_DOCK_ICON(MinecraftDirectory minecraftDir,Version version) throws IOException {  Set<Asset> assetIndex=Versions.resolveAssets(minecraftDir,version);  if (assetIndex == null)   return null;  return OSX_DOCK_ICON(minecraftDir,assetIndex);}  }
class C{  public WritableRaster createCompatibleWritableRaster(){  return createCompatibleWritableRaster(width,height);}  }
class C{  public boolean hasMoreAeroElements(){  return this.getTurnAeroEnum().hasMoreElements();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.AGGREGATOR__NAME:    setName((String)newValue);  return;case EipPackage.AGGREGATOR__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.AGGREGATOR__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.AGGREGATOR__PART:setPart((MessagePart)newValue);return;case EipPackage.AGGREGATOR__STRATEGY:setStrategy((String)newValue);return;case EipPackage.AGGREGATOR__EXPRESSION:setExpression((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  private static void quickSort(int[] data,final int start,final int end,Comparator<? super DBIDRef> comp,IntegerDBIDVar vl,IntegerDBIDVar vk,IntegerDBIDVar vr){  final int len=end - start;  if (len < INSERTION_THRESHOLD) {    for (int i=start + 1; i <= end; i++) {      for (int j=i; j > start; j--) {        vl.internalSetIndex(data[j]);        vr.internalSetIndex(data[j - 1]);        if (comp.compare(vl,vr) < 0) {          int tmp=data[j - 1];          data[j - 1]=data[j];          data[j]=tmp;        } else {          break;        }      }    }    return;  }  final int seventh=(len >> 3) + (len >> 6) + 1;  final int m3=(start + end) >> 1;  final int m2=m3 - seventh;  final int m1=m2 - seventh;  final int m4=m3 + seventh;  final int m5=m4 + seventh;  if (compare(vl,data[m1],vk,data[m2],comp) > 0) {    int tmp=data[m2];    data[m2]=data[m1];    data[m1]=tmp;  }  if (compare(vl,data[m1],vk,data[m3],comp) > 0) {    int tmp=data[m3];    data[m3]=data[m1];    data[m1]=tmp;  }  if (compare(vl,data[m2],vk,data[m3],comp) > 0) {    int tmp=data[m3];    data[m3]=data[m2];    data[m2]=tmp;  }  if (compare(vl,data[m4],vk,data[m5],comp) > 0) {    int tmp=data[m5];    data[m5]=data[m4];    data[m4]=tmp;  }  if (compare(vl,data[m1],vk,data[m4],comp) > 0) {    int tmp=data[m4];    data[m4]=data[m1];    data[m1]=tmp;  }  if (compare(vl,data[m3],vk,data[m4],comp) > 0) {    int tmp=data[m4];    data[m4]=data[m3];    data[m3]=tmp;  }  if (compare(vl,data[m2],vk,data[m5],comp) > 0) {    int tmp=data[m5];    data[m5]=data[m2];    data[m2]=tmp;  }  if (compare(vl,data[m2],vk,data[m3],comp) > 0) {    int tmp=data[m3];    data[m3]=data[m2];    data[m2]=tmp;  }  if (compare(vl,data[m4],vk,data[m5],comp) > 0) {    int tmp=data[m5];    data[m5]=data[m4];    data[m4]=tmp;  }  vl.internalSetIndex(data[m2]);  vr.internalSetIndex(data[m4]);  data[m2]=data[start];  data[m4]=data[end];  final boolean tied=comp.compare(vl,vr) == 0;  int left=start + 1;  int right=end - 1;  for (int k=left; k <= right; k++) {    int tmp=data[k];    vk.internalSetIndex(tmp);    final int c=comp.compare(vk,vl);    if (c == 0) {      continue;    } else     if (c < 0) {      data[k]=data[left];      data[left]=tmp;      left++;    } else     if (tied || comp.compare(vk,vr) > 0) {      while (true) {        vk.internalSetIndex(data[right]);        if (comp.compare(vk,vr) > 0 && k < right) {          right--;        } else {          break;        }      }      data[k]=data[right];      data[right]=tmp;      right--;      vk.internalSetIndex(data[k]);      if (comp.compare(vk,vl) < 0) {        tmp=data[k];        data[k]=data[left];        data[left]=tmp;        left++;      }    }  }  data[start]=data[left - 1];  data[left - 1]=vl.internalGetIndex();  data[end]=data[right + 1];  data[right + 1]=vr.internalGetIndex();  quickSort(data,start,left - 2,comp,vl,vk,vr);  if (!tied) {    quickSort(data,left,right,comp,vl,vk,vr);  }  quickSort(data,right + 2,end,comp,vl,vk,vr);}  }
class C{  boolean hasNativeMethods(ClassReader cr){  ClassHasNativeVisitor cv=new ClassHasNativeVisitor();  cr.accept(cv,0);  return cv.hasNativeMethods();}  }
class C{  public boolean isEdgeIgnored(Object edge){  mxIGraphModel model=graph.getModel();  return !model.isEdge(edge) || !graph.isCellVisible(edge) || model.getTerminal(edge,true) == null || model.getTerminal(edge,false) == null;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  protected void showClass(String className){  PrintWriter pw=log.getWriter(WriterKind.NOTICE);  pw.println("javac: show class: " + className);  URL url=getClass().getResource('/' + className.replace('.','/') + ".class");  if (url == null)   pw.println("  class not found"); else {    pw.println("  " + url);    try {      final String algorithm="MD5";      byte[] digest;      MessageDigest md=MessageDigest.getInstance(algorithm);      DigestInputStream in=new DigestInputStream(url.openStream(),md);      try {        byte[] buf=new byte[8192];        int n;        do {          n=in.read(buf);        } while (n > 0);        digest=md.digest();      }  finally {        in.close();      }      StringBuilder sb=new StringBuilder();      for (      byte b : digest)       sb.append(String.format("%02x",b));      pw.println("  " + algorithm + " checksum: "+ sb);    } catch (    Exception e) {      pw.println("  cannot compute digest: " + e);    }  }}  }
class C{  public static LogicalVariable addWrapperFunction(ARecordType requiredRecordType,LogicalVariable recordVar,ILogicalOperator parent,IOptimizationContext context,FunctionIdentifier fd) throws AlgebricksException {  List<Mutable<ILogicalOperator>> opRefs=parent.getInputs();  for (int index=0; index < opRefs.size(); index++) {    Mutable<ILogicalOperator> opRef=opRefs.get(index);    ILogicalOperator op=opRef.getValue();    List<LogicalVariable> producedVars=new ArrayList<LogicalVariable>();    VariableUtilities.getProducedVariables(op,producedVars);    IVariableTypeEnvironment env=op.computeOutputTypeEnvironment(context);    for (int i=0; i < producedVars.size(); i++) {      LogicalVariable var=producedVars.get(i);      if (var.equals(recordVar)) {        IAType actualType=(IAType)env.getVarType(var);        AbstractFunctionCallExpression cast=new ScalarFunctionCallExpression(FunctionUtil.getFunctionInfo(fd));        cast.getArguments().add(new MutableObject<ILogicalExpression>(new VariableReferenceExpression(var)));        TypeCastUtils.setRequiredAndInputTypes(cast,requiredRecordType,actualType);        LogicalVariable newAssignVar=context.newVar();        AssignOperator newAssignOperator=new AssignOperator(newAssignVar,new MutableObject<ILogicalExpression>(cast));        newAssignOperator.getInputs().add(new MutableObject<ILogicalOperator>(op));        opRef.setValue(newAssignOperator);        context.computeAndSetTypeEnvironmentForOperator(newAssignOperator);        newAssignOperator.computeOutputTypeEnvironment(context);        VariableUtilities.substituteVariables(parent,recordVar,newAssignVar,context);        return newAssignVar;      }    }    LogicalVariable replacedVar=addWrapperFunction(requiredRecordType,recordVar,op,context,fd);    if (replacedVar != null) {      VariableUtilities.substituteVariables(parent,recordVar,replacedVar,context);      return replacedVar;    }  }  return null;}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,Element e,AnnotationMirror a){  printMessage(kind,msg,e,a,null);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  protected void show(Activity activity,String helpContext,@Nonnull FeedbackCollector collector){  launchFallbackSupportUri(activity);}  }
class C{  public void allowMultiple(){  this.allowMultiple=true;}  }
class C{  public CHDMinimalPerfectHashFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new CHDMinimalPerfectHashFunction<T>(keys,transform,lambda,loadFactor,signatureWidth,tempDir,chunkedHashStore);}  }
class C{  @SuppressWarnings("unused") @Test public void testParentEntryExclusionForSiblingTransitions(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createEntryAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createEntryAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createEntryAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s5"),findState(sc,"s4"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getEntryAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNotNull(_s3.getEntryAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getEntryAction());  ExecutionState _s5=flow.getStates().get(3);  assertEquals("sc.r.s1.r.s3.r.s5",_s5.getName());  assertNull(_s5.getEntryAction());  Reaction _t=_s5.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(2,_effect.getSteps().size());  assertCall(_effect,1,_s4.getEnterSequences().get(0));}  }
class C{  public java.lang.StringBuffer insert(int offset,int i){  return null;}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public Expression createExpression(){  ExpressionImpl expression=new ExpressionImpl();  return expression;}  }
class C{  private void update(){  updateWithoutTimer(true);  nextTimer();}  }
class C{  public boolean restoreVolume(URI protectionDevice,URI storageDevice,URI snapshotID,BlockSnapshotRestoreCompleter completer,String stepId) throws InternalException {  try {    _log.info("Restoring bookmark on the RP CG");    WorkflowStepCompleter.stepExecuting(stepId);    ProtectionSystem system=null;    system=_dbClient.queryObject(ProtectionSystem.class,protectionDevice);    if (system == null) {      throw DeviceControllerExceptions.recoverpoint.failedConnectingForMonitoring(protectionDevice);    }    Set<String> volumeWWNs=new HashSet<String>();    String emName=null;    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);    if (snapshot.getEmName() != null) {      emName=snapshot.getEmName();    }    Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());    _workflowService.getWorkflowFromStepId(stepId);    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,volume.getConsistencyGroup(),system.getId()));    boolean lockAcquired=_workflowService.acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("failed to get lock while restoring volumes in RP consistency group: %s",volume.getConsistencyGroup().toString()));    }    ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());    Volume targetVolume=ProtectionSet.getTargetVolumeFromSourceAndInternalSiteName(_dbClient,protectionSet,volume,snapshot.getEmInternalSiteName());    volumeWWNs.add(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));    RecoverPointClient rp=RPHelper.getRecoverPointClient(system);    MultiCopyRestoreImageRequestParams request=new MultiCopyRestoreImageRequestParams();    request.setBookmark(emName);    request.setVolumeWWNSet(volumeWWNs);    MultiCopyRestoreImageResponse response=rp.restoreImageCopies(request);    if (response == null) {      throw DeviceControllerExceptions.recoverpoint.failedToImageAccessBookmark();    }    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("restoreVolume step is complete");  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,(ServiceCoded)e,"restoreVolumeStep");  }catch (  URISyntaxException e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,e,"restoreVolumeStep");  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,e,"restoreVolumeStep");  }  return true;}  }
class C{  public Matrix3f m12(float m12){  this.m12=m12;  return this;}  }
class C{  public static SendRequest childPaysForParent(Wallet wallet,Transaction parentTransaction,Coin feeRaise){  TransactionOutput outputToSpend=null;  for (  final TransactionOutput output : parentTransaction.getOutputs()) {    if (output.isMine(wallet) && output.isAvailableForSpending() && output.getValue().isGreaterThan(feeRaise)) {      outputToSpend=output;      break;    }  }  checkNotNull(outputToSpend,"Can't find adequately sized output that spends to us");  final Transaction tx=new Transaction(parentTransaction.getParams());  tx.addInput(outputToSpend);  tx.addOutput(outputToSpend.getValue().subtract(feeRaise),wallet.freshAddress(KeyPurpose.CHANGE));  tx.setPurpose(Transaction.Purpose.RAISE_FEE);  final SendRequest req=forTx(tx);  req.completed=true;  return req;}  }
class C{  public synchronized Collection<Progress> removeCompleted(){  List<Progress> list=new ArrayList<>(progresses.size());  Iterator<WeakReference<Progress>> iter=progresses.iterator();  while (iter.hasNext()) {    WeakReference<Progress> ref=iter.next();    if (ref.get() == null) {      iter.remove();    } else {      if (ref.get().isComplete()) {        list.add(ref.get());        iter.remove();      }    }  }  return list;}  }
class C{  public static MavenInfo create(IPath artifactPath,String groupId){  if (artifactPath == null || artifactPath.isEmpty() || groupId == null || StringUtilities.isEmpty(groupId)) {    return null;  }  IPath groupPath=Path.fromPortableString(groupId.replace('.','/'));  final int numTrailingSegmentsAfterRepositoryBase=NUM_TRAILING_SEGMENTS_AFTER_GROUP_ID + groupPath.segmentCount();  if (artifactPath.segmentCount() <= numTrailingSegmentsAfterRepositoryBase) {    return null;  }  String artifactName=artifactPath.lastSegment();  String version=artifactPath.segment(artifactPath.segmentCount() - VERSION_INDEX_FROM_END_OF_MAVEN_PATH - 1);  String artifactId=artifactPath.segment(artifactPath.segmentCount() - ARTIFACTID_INDEX_FROM_END_OF_MAVEN_PATH - 1);  if (!artifactPath.removeLastSegments(NUM_TRAILING_SEGMENTS_AFTER_GROUP_ID).removeTrailingSeparator().toPortableString().endsWith(groupPath.toPortableString())) {    return null;  }  IPath repositoryPath=artifactPath.removeLastSegments(numTrailingSegmentsAfterRepositoryBase);  return new MavenInfo(repositoryPath,groupId,artifactId,artifactName,version);}  }
class C{  public void scrollBehindTo(View content,int x,int y){  int vis=View.VISIBLE;  if (mMode == SlidingMenu.LEFT) {    if (x >= content.getLeft())     vis=View.INVISIBLE;    scrollTo((int)((x + getBehindWidth()) * mScrollScale),y);  } else   if (mMode == SlidingMenu.RIGHT) {    if (x <= content.getLeft())     vis=View.INVISIBLE;    scrollTo((int)(getBehindWidth() - getWidth() + (x - getBehindWidth()) * mScrollScale),y);  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    mContent.setVisibility(x >= content.getLeft() ? View.INVISIBLE : View.VISIBLE);    mSecondaryContent.setVisibility(x <= content.getLeft() ? View.INVISIBLE : View.VISIBLE);    vis=x == 0 ? View.INVISIBLE : View.VISIBLE;    if (x <= content.getLeft()) {      scrollTo((int)((x + getBehindWidth()) * mScrollScale),y);    } else {      scrollTo((int)(getBehindWidth() - getWidth() + (x - getBehindWidth()) * mScrollScale),y);    }  }  if (vis == View.INVISIBLE)   Log.v(TAG,"behind INVISIBLE");  setVisibility(vis);}  }
class C{  private static void splitRecursively(double[][] data,int begin,int end,int initdim,int dims,double[] minmax,ArrayList<double[]> singletons,ArrayList<QuadTree> children){  final int len=end - begin;  if (len <= 1) {    if (len == 1) {      singletons.add(data[begin]);    }    return;  }  double mid=Double.NaN;  int cur=initdim;  while (true) {    int dim2=cur << 1;    double min=minmax[dim2], max=minmax[dim2 + 1];    mid=.5 * (min + max);    if (min < mid) {      break;    }    ++cur;    if (cur == dims) {      LOG.warning("Should not be reached",new Throwable());      assert (initdim != 0) : "All dimensions constant?";      LOG.warning("Unexpected all-constant split.");      double[] center=computeCenterofMass(dims,data,begin,end);      data=Arrays.copyOfRange(data,begin,end);      children.add(new QuadTree(data,null,center,len,0.));      return;    }  }  int l=begin, r=end - 1;  while (l <= r) {    while (l <= r && data[l][cur] <= mid) {      ++l;    }    while (l <= r && data[r][cur] >= mid) {      --r;    }    if (l < r) {      assert (data[l][cur] > mid);      assert (data[r][cur] < mid);      double[] tmp=data[r];      data[r]=data[l];      data[l]=tmp;      ++l;      --r;    }  }  assert (l == end || data[l][cur] >= mid);  assert (l == begin || data[l - 1][cur] <= mid);  ++cur;  if (cur < dims) {    if (begin < l) {      splitRecursively(data,begin,l,cur,dims,minmax,singletons,children);    }    if (l < end) {      splitRecursively(data,l,end,cur,dims,minmax,singletons,children);    }    return;  }  if (begin < l) {    children.add(build(dims,data,begin,l));  }  if (l < end) {    children.add(build(dims,data,l,end));  }}  }
class C{  public String deleteDeferred(){  append("delete()");  List removes=new ArrayList();  int n=data.getRowCount();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    System.out.println("delete(accountId=" + accountId.getValue() + ",checked="+ checked.isSelected()+ ")");    if (checked.isSelected()) {      removes.add(data.getRowData());      checked.setSelected(false);      created.setSelected(false);    }  }  if (removes.size() > 0) {    List list=list();    Iterator remove=removes.iterator();    while (remove.hasNext()) {      list.remove(remove.next());    }  }  clear();  return (null);}  }
class C{  public static void main(String args[]){  int j;  MersenneTwister r;  r=new MersenneTwister(new int[]{0x123,0x234,0x345,0x456});  System.out.println("Output of MersenneTwister with new (2002/1/26) seeding mechanism");  for (j=0; j < 1000; j++) {    long l=(long)r.nextInt();    if (l < 0)     l+=4294967296L;    String s=String.valueOf(l);    while (s.length() < 10)     s=" " + s;    System.out.print(s + " ");    if (j % 5 == 4)     System.out.println();  }  final long SEED=4357L;  int xx;  long ms;  System.out.println("\nTime to test grabbing 100000000 ints");  r=new MersenneTwister(SEED);  ms=System.currentTimeMillis();  xx=0;  for (j=0; j < 100000000; j++)   xx+=r.nextInt();  System.out.println("Mersenne Twister: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  System.out.println("To compare this with java.util.Random, run this same test on MersenneTwisterFast.");  System.out.println("The comparison with Random is removed from MersenneTwister because it is a proper");  System.out.println("subclass of Random and this unfairly makes some of Random's methods un-inlinable,");  System.out.println("so it would make Random look worse than it is.");  System.out.println("\nGrab the first 1000 booleans");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(double)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((double)(j / 999.0)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(float)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((float)(j / 999.0f)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  byte[] bytes=new byte[1000];  System.out.println("\nGrab the first 1000 bytes using nextBytes");  r=new MersenneTwister(SEED);  r.nextBytes(bytes);  for (j=0; j < 1000; j++) {    System.out.print(bytes[j] + " ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  byte b;  System.out.println("\nGrab the first 1000 bytes -- must be same as nextBytes");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print((b=r.nextByte()) + " ");    if (b != bytes[j])     System.out.print("BAD ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  System.out.println("\nGrab the first 1000 shorts");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextShort() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab the first 1000 ints");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 ints of different sizes");  r=new MersenneTwister(SEED);  int max=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt(max) + " ");    max*=2;    if (max <= 0)     max=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 longs");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 longs of different sizes");  r=new MersenneTwister(SEED);  long max2=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong(max2) + " ");    max2*=2;    if (max2 <= 0)     max2=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 floats");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextFloat() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextDouble() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 gaussian doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextGaussian() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();}  }
class C{  @Override public void addEquipment(Mounted mounted,int loc,boolean rearMounted) throws LocationFullException {  super.addEquipment(mounted,loc,rearMounted);  addCritical(loc,new CriticalSlot(mounted));}  }
class C{  @Override protected Object doHandle(EnvironmentPeerDto peerDto) throws Exception {  logStart();  EnvironmentDto envDto=ctx.restClient.getStrict(path("/rest/v1/environments/%s",peerDto),EnvironmentDto.class);  EnvironmentInfoDto env=peerDto.getEnvironmentInfo();  if (StringUtils.isNotEmpty(env.getDomainName())) {    ProxyLoadBalanceStrategy balanceStrategy=ProxyLoadBalanceStrategy.LOAD_BALANCE;    ctx.localPeer.setVniDomain(env.getVni(),env.getDomainName(),balanceStrategy,env.getSslCertPath());    for (    EnvironmentNodesDto nodesDto : envDto.getNodes()) {      if (nodesDto.getPeerId().equals(ctx.localPeer.getId())) {        for (        EnvironmentNodeDto nodeDto : nodesDto.getNodes()) {          try {            ctx.localPeer.addIpToVniDomain(nodeDto.getIp().replace("/24",""),env.getVni());          } catch (          Exception e) {            log.error("Could not add container IP to domain: " + nodeDto.getContainerName());          }        }      }    }  } else {    ctx.localPeer.removeVniDomain(env.getVni());  }  logEnd();  return peerDto;}  }
class C{  protected void insert(Object x){synchronized (lastMonitor_) {    LinkedNode p=new LinkedNode(x);    last_.next=p;    last_=p;    count_++;    if (count_ > 1000 && (count_ % 1000 == 0))     System.out.println("In Queue : " + count_);    if (waitingForTake_ > 0)     lastMonitor_.notify();  }}  }
class C{  public UserCredentials(CredentialsInfo info,Map<String,String> values){  this(info.getFields(),values);}  }
class C{  private boolean addWarnSign(TimerData data,Column column){switch (column) {case EXCLUSIVEAVERAGE:case EXCLUSIVEMAX:case EXCLUSIVEMIN:case EXCLUSIVESUM:    int affPercentage=(int)(data.getInvocationAffiliationPercentage() * 100);  return data.isExclusiveTimeDataAvailable() && (affPercentage < 100);default :return false;}}  }
class C{  @LargeTest public void testPropertiesMPEG2File() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG2_640x480_30fps_192kbps_1_5.mp4";  boolean flagForException=false;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  try {    new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Properties for a MPEG2 File --Unsupported file type",flagForException);}  }
class C{  public void computePackageFragmentRoots(IClasspathEntry resolvedEntry,ObjectVector accumulatedRoots,HashSet rootIDs,IClasspathEntry referringEntry,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  String rootID=((ClasspathEntry)resolvedEntry).rootID();  if (rootIDs.contains(rootID))   return;  IPath projectPath=this.getFullPath();  IPath entryPath=resolvedEntry.getPath();  IPackageFragmentRoot root=null;switch (resolvedEntry.getEntryKind()) {case IClasspathEntry.CPE_SOURCE:    Object target1=JavaModelManager.getTarget(entryPath,true);  if (target1 == null)   return;if (target1 instanceof File && ((File)target1).isDirectory()) {  root=getPackageFragmentRoot((File)target1);}break;case IClasspathEntry.CPE_LIBRARY:if (referringEntry != null && !resolvedEntry.isExported()) return;Object target=JavaModelManager.getTarget(entryPath,true);if (target == null) return;if (target instanceof File) {if (JavaModelManager.isFile(target)) {root=new JarPackageFragmentRoot((File)target,this,manager);} else if (((File)target).isDirectory()) {root=getPackageFragmentRoot((File)target,entryPath);}}break;case IClasspathEntry.CPE_PROJECT:if (!retrieveExportedRoots) return;if (referringEntry != null && !resolvedEntry.isExported()) return;}if (root != null) {accumulatedRoots.add(root);rootIDs.add(rootID);if (rootToResolvedEntries != null) rootToResolvedEntries.put(root,((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry)referringEntry));}}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }      if (k == 0) {        g1=factory.buildGeometry(inputGeometryList);        inputGeometryList.clear();      } else {        g2=factory.buildGeometry(inputGeometryList);        updateProgress("Performing operation (progress will not be updated):",-1);        try {          outputGeometry=g1.intersection(g2);        } catch (        Exception ex) {          outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);        }        g1=(com.vividsolutions.jts.geom.Geometry)outputGeometry.clone();        inputGeometryList.clear();      }    }    ShapeFile output=null;    DBFWriter writer=null;    if (outputGeometry instanceof GeometryCollection) {      com.vividsolutions.jts.geom.Geometry gN0=outputGeometry.getGeometryN(0);      if (gN0 instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POLYLINE) {        outputShapeType=ShapeType.POINT;      }      output=new ShapeFile(outputFile,outputShapeType);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      String DBFName=output.getDatabaseFile();      writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          com.vividsolutions.jts.geom.Point p=(com.vividsolutions.jts.geom.Point)gN;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.getX(),p.getY());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <T>AddQuery<T> start(T query,long correlationId,String type){  return start(query,correlationId,type,null);}  }
class C{  @Override public void run(){  long count=0;  while (doWork) {    try {      if (count % 1000 == 0 && count > 0) {        Logger.println("(ServerCommunicationSystem.run) After " + count + " messages, inQueue size="+ inQueue.size());      }      SystemMessage sm=inQueue.poll(MESSAGE_WAIT_TIME,TimeUnit.MILLISECONDS);      if (sm != null) {        Logger.println("<-------receiving---------- " + sm);        messageHandler.processData(sm);        count++;      } else {        messageHandler.verifyPending();      }    } catch (    InterruptedException e) {      e.printStackTrace(System.err);    }  }  java.util.logging.Logger.getLogger(ServerCommunicationSystem.class.getName()).log(Level.INFO,"ServerCommunicationSystem stopped.");}  }
class C{  public boolean betterThan(Fitness _fitness){  NSGA2MultiObjectiveFitness other=(NSGA2MultiObjectiveFitness)_fitness;  if (rank < ((NSGA2MultiObjectiveFitness)_fitness).rank)   return true; else   if (rank > ((NSGA2MultiObjectiveFitness)_fitness).rank)   return false;  return (sparsity > other.sparsity);}  }
class C{  final void paintInternal(Graphics g){  paintInternal(g,true);}  }
class C{  public boolean emitToClassfile(){  return !type.isLocal() || isValidOffset;}  }
class C{  private String convertToString(Object comboBoxElement){  if (comboBoxElement == NOT_FOUND)   return "NOT_FOUND";  if (format != null)   return format.format(comboBoxElement);  return comboBoxElement == null ? "" : comboBoxElement.toString();}  }
class C{  public int numTargetPositions(){  return numTargetPos;}  }
class C{  public void warning(CharSequence message,Throwable e){  log(Level.WARNING,message,e);}  }
class C{  void validatePartitionAttrsFromPRConfig(PartitionRegionConfig prconf){  final PartitionAttributes prconfPA=prconf.getPartitionAttrs();  final PartitionAttributes userPA=pr.getAttributes().getPartitionAttributes();  if (userPA.getTotalSize() != prconfPA.getTotalSize()) {    throw new IllegalStateException(LocalizedStrings.PartitionedRegion_TOTAL_SIZE_IN_PARTITIONATTRIBUTES_IS_INCOMPATIBLE_WITH_GLOBALLY_SET_TOTAL_SIZE_SET_THE_TOTAL_SIZE_TO_0MB.toLocalizedString(Long.valueOf(prconfPA.getTotalSize())));  }  if (userPA.getRedundantCopies() != prconfPA.getRedundantCopies()) {    throw new IllegalStateException(LocalizedStrings.PartitionedRegion_REQUESTED_REDUNDANCY_0_IS_INCOMPATIBLE_WITH_EXISTING_REDUNDANCY_1.toLocalizedString(new Object[]{Integer.valueOf(userPA.getRedundantCopies()),Integer.valueOf(prconfPA.getRedundantCopies())}));  }  if (prconf.isFirstDataStoreCreated() && pr.isDataStore()) {    validateDistributedEvictionAttributes(prconf.getEvictionAttributes());  }  Scope prconfScope=prconf.getScope();  Scope myScope=pr.getScope();  if (!myScope.equals(prconfScope)) {    throw new IllegalStateException(LocalizedStrings.PartitionedRegion_SCOPE_IN_PARTITIONATTRIBUTES_IS_INCOMPATIBLE_WITH_ALREADY_SET_SCOPESET_THE_SCOPE_TO_0.toLocalizedString(prconfScope));  }  final int prconfTotalNumBuckets=prconfPA.getTotalNumBuckets();  if (userPA.getTotalNumBuckets() != prconfTotalNumBuckets) {    throw new IllegalStateException(LocalizedStrings.PartitionedRegion_THE_TOTAL_NUMBER_OF_BUCKETS_FOUND_IN_PARTITIONATTRIBUTES_0_IS_INCOMPATIBLE_WITH_THE_TOTAL_NUMBER_OF_BUCKETS_USED_BY_OTHER_DISTRIBUTED_MEMBERS_SET_THE_NUMBER_OF_BUCKETS_TO_1.toLocalizedString(new Object[]{Integer.valueOf(userPA.getTotalNumBuckets()),Integer.valueOf(prconfTotalNumBuckets)}));  }  validatePartitionListeners(prconf,userPA);  validatePartitionResolver(prconf,userPA);  validateColocatedWith(prconf,userPA);  validateExpirationAttributes(pr.getAttributes(),prconf);}  }
class C{  public Builder user(String user){  this.innerUser=user;  return this;}  }
class C{  public void testGetNamespaceURI2() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testAddr);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  public Graphics create(){  return new ProxyGraphics(g.create());}  }
class C{  public static String createRegionName(String regionName){  String result=regionName.replace('/','#');  return result;}  }
class C{  @OnClick(R.id.info_icon_button) public void onInfoClick(View view){  Offer selectedOffer;  if (dataRecyclerAdapter != null) {    selectedOffer=offers.get(getCardPosition(getAdapterPosition()));  } else {    selectedOffer=offers.get(getAdapterPosition() - BINDER_OFFSET);  }  goToInfo(selectedOffer,view.getContext());}  }
class C{  public static void createLockFile(FileSystem fs,Path lockFile,boolean accept) throws IOException {  if (fs.exists(lockFile)) {    if (!accept)     throw new IOException("lock file " + lockFile + " already exists.");    if (fs.getFileStatus(lockFile).isDir())     throw new IOException("lock file " + lockFile + " already exists and is a directory.");  } else {    fs.mkdirs(lockFile.getParent());    fs.createNewFile(lockFile);  }}  }
class C{  private List<Expression> parseExpressionList() throws ParseException {  List<Expression> expressions=new LinkedList<>();  expressions.add(parseExpression());  while (token == Token.COMMA) {    nextToken();    expressions.add(parseExpression());  }  return expressions;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.727 -0400",hash_original_method="DB01DDECD36D428EBB5A472FDA637AEC",hash_generated_method="6454E4B6084231370733C23A10E39444") public FileWriterWithEncoding(File file,CharsetEncoder encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  public void add(IStatus status){  Assert.isLegal(status != null);  IStatus[] result=new IStatus[children.length + 1];  System.arraycopy(children,0,result,0,children.length);  result[result.length - 1]=status;  children=result;  int newSev=status.getSeverity();  if (newSev > getSeverity()) {    setSeverity(newSev);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INLINE_STATE_MACHINE___QUEUED_1:    setQueued_1(QUEUED_1_EDEFAULT);  return;case UmplePackage.INLINE_STATE_MACHINE___NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.INLINE_STATE_MACHINE___ANONYMOUS_INLINE_STATE_MACHINE_11:getAnonymous_inlineStateMachine_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final AbstractNode<?> that=(AbstractNode<?>)o;  return isLeaf == that.isLeaf && numEntries == that.numEntries && Arrays.equals(entries,that.entries);}  }
class C{  public static Second parseSecond(String s){  Second result=null;  s=s.trim();  String daystr=s.substring(0,Math.min(10,s.length()));  Day day=Day.parseDay(daystr);  if (day != null) {    String hmsstr=s.substring(Math.min(daystr.length() + 1,s.length()),s.length());    hmsstr=hmsstr.trim();    int l=hmsstr.length();    String hourstr=hmsstr.substring(0,Math.min(2,l));    String minstr=hmsstr.substring(Math.min(3,l),Math.min(5,l));    String secstr=hmsstr.substring(Math.min(6,l),Math.min(8,l));    int hour=Integer.parseInt(hourstr);    if ((hour >= 0) && (hour <= 23)) {      int minute=Integer.parseInt(minstr);      if ((minute >= 0) && (minute <= 59)) {        Minute m=new Minute(minute,new Hour(hour,day));        int second=Integer.parseInt(secstr);        if ((second >= 0) && (second <= 59)) {          result=new Second(second,m);        }      }    }  }  return result;}  }
class C{  public boolean isSse42(){  return sse42;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isOutputFormatDefined()) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public void configureCommandStation(LnCommandStationType type,boolean mTurnoutNoRetry,boolean mTurnoutExtraSpace){  this.mTurnoutNoRetry=mTurnoutNoRetry;  this.mTurnoutExtraSpace=mTurnoutExtraSpace;  if (sm != null) {    log.error("Installing SlotManager twice",new Exception("TraceBack"));  }  sm=type.getSlotManager(lt);  if (sm != null) {    sm.setThrottledTransmitter(tm,mTurnoutNoRetry);  }  sm.setCommandStationType(type);  sm.setSystemConnectionMemo(this);  jmri.InstanceManager.setCommandStation(sm);}  }
class C{  public UserSession createSession(UUID sessionId,User user,Locale locale,boolean system){  List<Role> roles=new ArrayList<>();  for (  UserRole userRole : user.getUserRoles()) {    if (userRole.getRole() != null) {      roles.add(userRole.getRole());    }  }  UserSession session=new UserSession(sessionId,user,roles,locale,system);  compilePermissions(session,roles);  if (user.getGroup() == null)   throw new IllegalStateException("User is not in a Group");  compileConstraints(session,user.getGroup());  compileSessionAttributes(session,user.getGroup());  return session;}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public Matrix3f(float m00,float m01,float m02,float m10,float m11,float m12,float m20,float m21,float m22){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public boolean checkCanonicalUserOptions(){  boolean result;  OptionHandler handler;  String[] userOptions;  String[] userOptionsCheck;  print("Canonical user options...");  try {    handler=getDefaultHandler();    handler.setOptions(getUserOptions());    if (getDebug()) {      print("\n  Getting canonical user options: ");    }    userOptions=handler.getOptions();    if (getDebug()) {      println(printOptions(userOptions));    }    if (getDebug()) {      println("  Setting canonical user options");    }    handler.setOptions(userOptions.clone());    if (getDebug()) {      println("  Checking canonical user options");    }    userOptionsCheck=handler.getOptions();    compareOptions(userOptions,userOptionsCheck);    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public static ASTNode perform(ASTNode root,ISourceRange range){  return perform(root,range.getOffset(),range.getLength());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.981 -0500",hash_original_method="FCBCF26A13DC616293A73F9223FE45DF",hash_generated_method="B090F47999C9CA9426C27A20092B34E2") protected boolean scrollBottom(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int lineCount=layout.getLineCount();  if (getBottomLine(widget) <= lineCount - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(lineCount) - getInnerHeight(widget));    return true;  }  return false;}  }
class C{  public void startLifeCycle(Extension ext) throws DatabaseException, DatabaseUnsupportedException {  ext.init();  ext.databaseOpen(model.getDb());  ext.initModel(model);  ext.initXML(model.getSession(),model.getOptionsParam());  ext.initView(view);  ExtensionHook extHook=new ExtensionHook(model,view);  try {    ext.hook(extHook);    extensionHooks.put(ext,extHook);    hookContextDataFactories(ext,extHook);    hookApiImplementors(ext,extHook);    if (view != null) {      hookView(ext,view,extHook);      hookMenu(view,extHook);    }    hookOptions(extHook);    ext.optionsLoaded();  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }  ext.start();  Proxy proxy=Control.getSingleton().getProxy();  hookProxyListeners(proxy,extHook.getProxyListenerList());  hookPersistentConnectionListeners(proxy,extHook.getPersistentConnectionListener());  hookConnectRequestProxyListeners(proxy,extHook.getConnectRequestProxyListeners());  if (view != null) {    hookSiteMapListeners(view.getSiteTreePanel(),extHook.getSiteMapListenerList());  }}  }
class C{  public void stop() throws IgniteException {  if (camelCtx.getStatus() == ServiceStatus.Stopped || camelCtx.getStatus() == ServiceStatus.Stopping)   throw new IgniteException("Failed to stop Camel streamer (CamelContext already stopped or stopping).");  try {    ServiceHelper.stopAndShutdownServices(camelCtx,endpoint,consumer);  } catch (  Exception e) {    throw new IgniteException("Failed to stop Camel streamer [errMsg=" + e.getMessage() + ']');  }  U.log(log,"Stopped Camel streamer, formerly consuming from endpoint URI: " + endpointUri);}  }
class C{  protected static InternetAddress[] add(InternetAddress[] oldArr,InternetAddress newValue){  if (oldArr == null)   return new InternetAddress[]{newValue};  InternetAddress[] tmp=new InternetAddress[oldArr.length + 1];  for (int i=0; i < oldArr.length; i++) {    tmp[i]=oldArr[i];  }  tmp[oldArr.length]=newValue;  return tmp;}  }
class C{  public Vector3 sub(float x,float y,float z){  return this.set(this.x - x,this.y - y,this.z - z);}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  void test(File file){  if (excludeFiles.contains(file)) {    if (!quiet)     error("File " + file + " excluded");    return;  }  if (file.isDirectory()) {    for (    File f : file.listFiles()) {      test(f);    }    return;  }  if (file.isFile() && file.getName().endsWith(".java")) {    try {      if (verbose)       System.err.println(file);      fileCount++;      NPETester p=new NPETester();      p.test(read(file));    } catch (    AttributionException e) {      if (!quiet) {        error("Error attributing " + file + "\n"+ e.getMessage());      }    }catch (    IOException e) {      error("Error reading " + file + ": "+ e);    }    return;  }  if (!quiet)   error("File " + file + " ignored");}  }
class C{  public MetacatException(int status){  this(Response.status(status).type(MediaType.APPLICATION_JSON_TYPE).entity(EMPTY_ERROR).build(),null);}  }
class C{  private synchronized boolean releaseCamera(Camera camera){  if (camera != null) {    camera.stopPreview();    camera.release();  }  if (Cfg.DEBUG) {    Check.log(TAG + " (releaseCamera), released");  }  return true;}  }
class C{  public CylinderPortrayal3D(double scale){  this(Color.white,scale);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public SerializedObject(Object toStore) throws Exception {  this(toStore,false);}  }
class C{  public boolean equals(String s){  if (s == null) {    return false;  }  if (length != s.length()) {    return false;  }  for (int i=0; i < length; i++) {    if (ch[offset + i] != s.charAt(i)) {      return false;    }  }  return true;}  }
class C{  private boolean isAllowedToDequeueFileTransfer(){  if (mImService.isMaxConcurrentOutgoingFileTransfersReached()) {    if (mLogger.isActivated()) {      mLogger.debug("Cannot dequeue file transfer as the limit of allowed concurrent outgoing file transfers is reached.");    }    return false;  }  if (!mImService.isFileTransferSessionAvailable()) {    if (mLogger.isActivated()) {      mLogger.debug("Cannot dequeue file transfer as there are no available file transfer sessions.");    }    return false;  }  return true;}  }
class C{  private ApplicationAddVolumeList addVolumesToApplication(VolumeGroupVolumeList volumeList,VolumeGroup application,String taskId){  ApplicationAddVolumeList addVolumeList=new ApplicationAddVolumeList();  Map<URI,List<URI>> addCGVolsMap=new HashMap<URI,List<URI>>();  String newRGName=volumeList.getReplicationGroupName();  for (  URI voluri : volumeList.getVolumes()) {    Volume volume=_dbClient.queryObject(Volume.class,voluri);    if (volume == null || volume.getInactive()) {      _log.info(String.format("The volume %s does not exist or has been deleted",voluri));      continue;    }    URI cgUri=volume.getConsistencyGroup();    if (!NullColumnValueGetter.isNullURI(cgUri)) {      List<URI> vols=addCGVolsMap.get(cgUri);      if (vols == null) {        vols=new ArrayList<URI>();      }      vols.add(voluri);      addCGVolsMap.put(cgUri,vols);    } else {      throw APIException.badRequests.volumeGroupCantBeUpdated(application.getLabel(),String.format("The volume %s is not in a consistency group",volume.getLabel()));    }    String rgName=volume.getReplicationGroupInstance();    if (NullColumnValueGetter.isNotNullValue(rgName) && !rgName.equals(newRGName)) {      throw APIException.badRequests.volumeGroupCantBeUpdated(application.getLabel(),String.format("The volume %s is already in an array replication group, only the existing group name is allowed.",volume.getLabel()));    }  }  Set<URI> appReadyCGUris=new HashSet<URI>();  Set<Volume> appReadyCGVols=new HashSet<Volume>();  Set<URI> nonAppReadyCGVolUris=new HashSet<URI>();  for (  Map.Entry<URI,List<URI>> entry : addCGVolsMap.entrySet()) {    URI cgUri=entry.getKey();    List<URI> cgVolsToAdd=entry.getValue();    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    List<Volume> cgVolumes=getActiveCGVolumes(cg);    Set<URI> cgVolumeURIs=new HashSet<URI>();    for (    Volume cgVol : cgVolumes) {      cgVolumeURIs.add(cgVol.getId());    }    Volume firstVolume=_dbClient.queryObject(Volume.class,cgVolsToAdd.get(0));    if (!cgVolumeURIs.containsAll(cgVolsToAdd) || cgVolsToAdd.size() != cgVolumeURIs.size()) {      throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(firstVolume.getLabel(),"not all volumes in consistency group are in the add volume list");    }    if (ControllerUtils.isVnxVolume(firstVolume,_dbClient) && !ControllerUtils.isNotInRealVNXRG(firstVolume,_dbClient)) {      URIQueryResultList cgSnapshotsResults=new URIQueryResultList();      _dbClient.queryByConstraint(getBlockSnapshotByConsistencyGroup(cgUri),cgSnapshotsResults);      Iterator<URI> cgSnapshotsIter=cgSnapshotsResults.iterator();      while (cgSnapshotsIter.hasNext()) {        BlockSnapshot cgSnapshot=_dbClient.queryObject(BlockSnapshot.class,cgSnapshotsIter.next());        if ((cgSnapshot != null) && (!cgSnapshot.getInactive())) {          throw APIException.badRequests.notAllowedWhenVNXCGHasSnapshot();        }      }      nonAppReadyCGVolUris.addAll(cgVolumeURIs);    } else {      appReadyCGUris.add(cgUri);      appReadyCGVols.addAll(cgVolumes);    }  }  if (!appReadyCGVols.isEmpty()) {    for (    Volume cgVol : appReadyCGVols) {      StringSet applications=cgVol.getVolumeGroupIds();      applications.add(application.getId().toString());      cgVol.setVolumeGroupIds(applications);      StringSet fullCopies=cgVol.getFullCopies();      List<Volume> fullCopiesToUpdate=new ArrayList<Volume>();      if (fullCopies != null && !fullCopies.isEmpty()) {        for (        String fullCopyId : fullCopies) {          Volume fullCopy=_dbClient.queryObject(Volume.class,URI.create(fullCopyId));          if (fullCopy != null && !fullCopy.getInactive()) {            fullCopy.setFullCopySetName(fullCopy.getReplicationGroupInstance());            fullCopiesToUpdate.add(fullCopy);          }        }      }      if (!fullCopiesToUpdate.isEmpty()) {        _dbClient.updateObject(fullCopiesToUpdate);      }      Operation op=cgVol.getOpStatus().get(taskId);      op.ready();      cgVol.getOpStatus().updateTaskStatus(taskId,op);    }    _dbClient.updateObject(appReadyCGVols);  }  if (!appReadyCGUris.isEmpty()) {    for (    URI cgUri : appReadyCGUris) {      BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);      if (cg != null && !cg.getInactive()) {        cg.setArrayConsistency(false);        Operation op=cg.getOpStatus().get(taskId);        op.ready();        cg.getOpStatus().updateTaskStatus(taskId,op);        _dbClient.updateObject(cg);      }    }  }  addVolumeList.getVolumes().addAll(nonAppReadyCGVolUris);  _log.info("Added volumes in CG to the application");  return addVolumeList;}  }
class C{  @POST @Path("move/create") @Consumes("application/json") @Produces("text/plain") public String createMoveRefactoring(CreateMoveRefactoring cmr) throws JavaModelException, RefactoringException {  IJavaProject javaProject=model.getJavaProject(cmr.getProjectPath());  IJavaElement[] javaElements;  try {    Function<ElementToMove,IJavaElement> map=null;    javaElements=cmr.getElements().stream().map(map).toArray(null);  } catch (  IllegalArgumentException e) {    if (e.getCause() instanceof JavaModelException) {      throw (JavaModelException)e.getCause();    } else {      throw e;    }  }  if (RefactoringAvailabilityTester.isMoveAvailable(new IResource[0],javaElements)) {    return manager.createMoveRefactoringSession(javaElements);  }  throw new RefactoringException("Can't create move refactoring.");}  }
class C{  public boolean hasRating(){  return hasExtension(Rating.class);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  double noData;  int progress;  int i;  double minVal, maxVal;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  minVal=Double.parseDouble(args[2]);  maxVal=Double.parseDouble(args[3]);  numBins=Integer.parseInt(args[4]);  int numBinsLessOne=numBins - 1;  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    noData=image.getNoDataValue();    double scaleFactor=numBins / (maxVal - minVal);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setPreferredPalette(image.getPreferredPalette());    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] != noData) {          z=(int)(data[col] - minVal) * scaleFactor;          if (z < 0) {            z=0;          }          if (z > numBinsLessOne) {            z=numBinsLessOne;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void printJavaTypeToObject(String value,JClass javaType) throws IOException {  if (javaType.getName().equals("boolean"))   print("new Boolean(" + value + ")"); else   if (javaType.getName().equals("byte"))   print("new Byte(" + value + ")"); else   if (javaType.getName().equals("short"))   print("new Short(" + value + ")"); else   if (javaType.getName().equals("int"))   print("new Integer(" + value + ")"); else   if (javaType.getName().equals("long"))   print("new Long(" + value + ")"); else   if (javaType.getName().equals("char"))   print("String.valueOf(" + value + ")"); else   if (javaType.getName().equals("float"))   print("new Float(" + value + ")"); else   if (javaType.getName().equals("double"))   print("new Double(" + value + ")"); else   print(value);}  }
class C{  private void ensureLockHeld(){  if (!testLockIsHeld) {    return;  }  if (readWriteLockMissing()) {    return;  }  if (!lockUtil.isLockHeld(readWriteLock.readLock()) && !lockUtil.isLockHeld(readWriteLock.writeLock())) {    new Exception("Lock not held").printStackTrace(System.out);  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public GVTTreeWalker(GraphicsNode treeRoot){  this.gvtRoot=treeRoot.getRoot();  this.treeRoot=treeRoot;  this.currentNode=treeRoot;}  }
class C{  public boolean reload(){  return loadFile(dir);}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients,boolean outputStatics){  return toString(object,style,outputTransients,outputStatics,null);}  }
class C{  public SWFWriter(int width,int height,int version){  this.width=width;  this.height=height;  this.version=version;}  }
class C{  public static int indexOfIgnoreCase(int startingPosition,String searchIn,String searchFor){  if ((searchIn == null) || (searchFor == null)) {    return -1;  }  int searchInLength=searchIn.length();  int searchForLength=searchFor.length();  int stopSearchingAt=searchInLength - searchForLength;  if (startingPosition > stopSearchingAt || searchForLength == 0) {    return -1;  }  char firstCharOfSearchForUc=Character.toUpperCase(searchFor.charAt(0));  char firstCharOfSearchForLc=Character.toLowerCase(searchFor.charAt(0));  for (int i=startingPosition; i <= stopSearchingAt; i++) {    if (isCharAtPosNotEqualIgnoreCase(searchIn,i,firstCharOfSearchForUc,firstCharOfSearchForLc)) {      while (++i <= stopSearchingAt && (isCharAtPosNotEqualIgnoreCase(searchIn,i,firstCharOfSearchForUc,firstCharOfSearchForLc))) {      }    }    if (i <= stopSearchingAt && startsWithIgnoreCase(searchIn,i,searchFor)) {      return i;    }  }  return -1;}  }
class C{  public static int createDescriptor(Address start,Address end){  boolean top=end.EQ(VMLayoutConstants.HEAP_END);  if (VM.HEAP_LAYOUT_64BIT) {    return Map64.spaceIndex(start) << INDEX_SHIFT | ((top) ? TYPE_CONTIGUOUS_HI : TYPE_CONTIGUOUS);  }  int chunks=end.diff(start).toWord().rshl(LOG_BYTES_IN_CHUNK).toInt();  if (VM.VERIFY_ASSERTIONS) {    if (!start.isZero() && (chunks <= 0 || chunks >= (1 << SIZE_BITS))) {      Log.write("SpaceDescriptor.createDescriptor(");      Log.write(start);      Log.write(",");      Log.write(end);      Log.writeln(")");      Log.write("chunks = ");      Log.writeln(chunks);    }    VM.assertions._assert(!start.isZero() && chunks > 0 && chunks < (1 << SIZE_BITS));  }  Word tmp=start.toWord();  tmp=tmp.rshl(BASE_EXPONENT);  int exponent=0;  while (!tmp.isZero() && tmp.and(Word.one()).isZero()) {    tmp=tmp.rshl(1);    exponent++;  }  int mantissa=tmp.toInt();  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(tmp.lsh(BASE_EXPONENT + exponent).EQ(start.toWord()));  return (mantissa << MANTISSA_SHIFT) | (exponent << EXPONENT_SHIFT) | (chunks << SIZE_SHIFT)| ((top) ? TYPE_CONTIGUOUS_HI : TYPE_CONTIGUOUS);}  }
class C{  public Map<String,String> pathMap(){  return _pathMap;}  }
class C{  private static void installJavaFacet(IFacetedProject facetedProject,IProgressMonitor monitor) throws CoreException {  if (facetedProject.hasProjectFacet(JavaFacet.VERSION_1_7)) {    return;  }  JavaFacetInstallConfig javaConfig=new JavaFacetInstallConfig();  List<IPath> sourcePaths=new ArrayList<>();  sourcePaths.add(new Path("src/main/java"));  sourcePaths.add(new Path("src/test/java"));  javaConfig.setSourceFolders(sourcePaths);  facetedProject.installProjectFacet(JavaFacet.VERSION_1_7,javaConfig,monitor);}  }
class C{  public GetSnapshotsRequest(String repository,String[] snapshots){  this.repository=repository;  this.snapshots=snapshots;}  }
class C{  public static byte[] unpackGTSId(BigInteger bi){  byte[] bytes=bi.toByteArray();  if (bytes.length < 16) {    byte[] tmp=new byte[16];    if (bi.signum() < 0) {      Arrays.fill(tmp,(byte)0xff);    }    System.arraycopy(bytes,0,tmp,tmp.length - bytes.length,bytes.length);    return tmp;  } else {    return bytes;  }}  }
class C{  protected void buildPseudoMonitors(Map<String,Monitor> map){  Monitor monitor=null;  String name=null;  IntBuffer ib=null;  name=PerfDataBufferPrologue.PERFDATA_MAJOR_NAME;  ib=prologue.majorVersionBuffer();  monitor=new PerfIntegerMonitor(name,Units.NONE,Variability.CONSTANT,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_MINOR_NAME;  ib=prologue.minorVersionBuffer();  monitor=new PerfIntegerMonitor(name,Units.NONE,Variability.CONSTANT,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_BUFFER_SIZE_NAME;  ib=prologue.sizeBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_BUFFER_USED_NAME;  ib=prologue.usedBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_OVERFLOW_NAME;  ib=prologue.overflowBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  this.overflow=(IntegerMonitor)monitor;  name=PerfDataBufferPrologue.PERFDATA_MODTIMESTAMP_NAME;  LongBuffer lb=prologue.modificationTimeStampBuffer();  monitor=new PerfLongMonitor(name,Units.TICKS,Variability.MONOTONIC,false,lb);  map.put(name,monitor);}  }
class C{  public static List<Object> validateAndEvaluate(String viewName,StatementContext statementContext,List<ExprNode> expressions) throws ViewParameterException {  List<Object> results=new ArrayList<Object>();  int expressionNumber=0;  StreamTypeService streamTypeService=new StreamTypeServiceImpl(statementContext.getEngineURI(),false);  for (  ExprNode expr : expressions) {    Object result=validateAndEvaluateExpr(viewName,statementContext,expr,streamTypeService,expressionNumber);    results.add(result);    expressionNumber++;  }  return results;}  }
class C{  private RopMethod convert(){  if (DEBUG) {    interference.dumpToStdout();  }  RegisterAllocator allocator=new FirstFitLocalCombiningAllocator(ssaMeth,interference,minimizeRegisters);  RegisterMapper mapper=allocator.allocateRegisters();  if (DEBUG) {    System.out.println("Printing reg map");    System.out.println(((BasicRegisterMapper)mapper).toHuman());  }  ssaMeth.setBackMode();  ssaMeth.mapRegisters(mapper);  removePhiFunctions();  if (allocator.wantsParamsMovedHigh()) {    moveParametersToHighRegisters();  }  removeEmptyGotos();  RopMethod ropMethod=new RopMethod(convertBasicBlocks(),ssaMeth.blockIndexToRopLabel(ssaMeth.getEntryBlockIndex()));  ropMethod=new IdenticalBlockCombiner(ropMethod).process();  return ropMethod;}  }
class C{  public void close() throws IOException {  this.flush();  this.out.close();  this.out=null;}  }
class C{  private void handleInvalidate(Message m){  String regionName=null;  Object key=null;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    this.isOpCompleted=false;    if (isDebugEnabled) {      logger.debug("Received invalidate message of length ({} bytes)",m.getPayloadLength());    }    Part regionNamePart=m.getPart(partCnt++);    Part keyPart=m.getPart(partCnt++);    Part callbackArgumentPart=m.getPart(partCnt++);    VersionTag versionTag=(VersionTag)m.getPart(partCnt++).getObject();    if (versionTag != null) {      versionTag.replaceNullIDs((InternalDistributedMember)this.endpoint.getMemberId());    }    Part isInterestListPassedPart=m.getPart(partCnt++);    Part hasCqsPart=m.getPart(partCnt++);    regionName=regionNamePart.getString();    key=keyPart.getStringOrObject();    Object callbackArgument=callbackArgumentPart.getObject();    boolean withInterest=((Boolean)isInterestListPassedPart.getObject()).booleanValue();    boolean withCQs=((Boolean)hasCqsPart.getObject()).booleanValue();    if (isDebugEnabled) {      logger.debug("Invalidating entry for region: {} key: {} callbackArgument: {} withInterest={} withCQs={} version={}",regionName,key,callbackArgument,withInterest,withCQs,versionTag);    }    LocalRegion region=(LocalRegion)cacheHelper.getRegion(regionName);    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("Region named {} does not exist",regionName);      }    } else {      if (region.hasServerProxy() && (withInterest || !withCQs)) {        try {          Part eid=m.getPart(m.getNumberOfParts() - 1);          EventID eventId=(EventID)eid.getObject();          try {            region.basicBridgeClientInvalidate(eventId.getDistributedMember(),key,callbackArgument,qManager.getState().getProcessedMarker() || !this.isDurableClient,eventId,versionTag);          } catch (          ConcurrentCacheModificationException e) {          }          this.isOpCompleted=true;          qManager.getState().incrementInvalidatedStats();          if (isDebugEnabled) {            logger.debug("Invalidated entry for region: {} key: {} callbackArgument: {}",regionName,key,callbackArgument);          }        } catch (        EntryNotFoundException e) {          if (isDebugEnabled && !quitting()) {            logger.debug("Already invalidated entry for region: {} key: {} callbackArgument: {}",regionName,key,callbackArgument);          }          this.isOpCompleted=true;        }      }    }    if (withCQs) {      Part regionOpType=m.getPart(partCnt++);      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),regionOpType.getInt(),key,null);      this.isOpCompleted=true;    }  } catch (  Exception e) {    final String message=LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_INVALIDATE_ENTRY_REGION_0_KEY_1.toLocalizedString(new Object[]{regionName,key});    handleException(message,e);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VALUE:    return isSetValue();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  public boolean hasPendingData(){  return isInitialized() && (bytesToFrames(submittedBytes) > audioTrackUtil.getPlaybackHeadPosition() || audioTrackUtil.overrideHasPendingData());}  }
class C{  public int writeTelegram(char[] buffer,int type,Object id){  int result=0;  try {    String msg=new String(buffer);    msg+="\n";    wrtr.write(msg.getBytes());    result=buffer.length;  } catch (  IOException ex) {    ex.printStackTrace();  }  return (result);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((ASN1Encodable)obj).toASN1Primitive())));  } catch (  Exception e) {    return false;  }}  }
class C{  public static double normAngle(double x){  x%=TWOPI;  return (x > 0) ? x : x + TWOPI;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DetectorResult detect() throws NotFoundException {  return detect(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.137 -0500",hash_original_method="445BCC4CA8B8EE2EB716CA993346CBBC",hash_generated_method="B1A69609949F40DA5D31BAEB8E74092E") private void parseUserData(PduParser p,boolean hasUserDataHeader){  boolean hasMessageClass=false;  boolean userDataCompressed=false;  int encodingType=ENCODING_UNKNOWN;  if ((dataCodingScheme & 0x80) == 0) {    automaticDeletion=(0 != (dataCodingScheme & 0x40));    userDataCompressed=(0 != (dataCodingScheme & 0x20));    hasMessageClass=(0 != (dataCodingScheme & 0x10));    if (userDataCompressed) {      Log.w(LOG_TAG,"4 - Unsupported SMS data coding scheme " + "(compression) " + (dataCodingScheme & 0xff));    } else {switch ((dataCodingScheme >> 2) & 0x3) {case 0:        encodingType=ENCODING_7BIT;      break;case 2:    encodingType=ENCODING_16BIT;  break;case 1:case 3:Log.w(LOG_TAG,"1 - Unsupported SMS data coding scheme " + (dataCodingScheme & 0xff));encodingType=ENCODING_8BIT;break;}}} else if ((dataCodingScheme & 0xf0) == 0xf0) {automaticDeletion=false;hasMessageClass=true;userDataCompressed=false;if (0 == (dataCodingScheme & 0x04)) {encodingType=ENCODING_7BIT;} else {encodingType=ENCODING_8BIT;}} else if ((dataCodingScheme & 0xF0) == 0xC0 || (dataCodingScheme & 0xF0) == 0xD0 || (dataCodingScheme & 0xF0) == 0xE0) {if ((dataCodingScheme & 0xF0) == 0xE0) {encodingType=ENCODING_16BIT;} else {encodingType=ENCODING_7BIT;}userDataCompressed=false;boolean active=((dataCodingScheme & 0x08) == 0x08);if ((dataCodingScheme & 0x03) == 0x00) {isMwi=true;mwiSense=active;mwiDontStore=((dataCodingScheme & 0xF0) == 0xC0);} else {isMwi=false;Log.w(LOG_TAG,"MWI for fax, email, or other " + (dataCodingScheme & 0xff));}} else if ((dataCodingScheme & 0xC0) == 0x80) {if (dataCodingScheme == 0x84) {encodingType=ENCODING_KSC5601;} else {Log.w(LOG_TAG,"5 - Unsupported SMS data coding scheme " + (dataCodingScheme & 0xff));}} else {Log.w(LOG_TAG,"3 - Unsupported SMS data coding scheme " + (dataCodingScheme & 0xff));}int count=p.constructUserData(hasUserDataHeader,encodingType == ENCODING_7BIT);this.userData=p.getUserData();this.userDataHeader=p.getUserDataHeader();switch (encodingType) {case ENCODING_UNKNOWN:case ENCODING_8BIT:messageBody=null;break;case ENCODING_7BIT:messageBody=p.getUserDataGSM7Bit(count,hasUserDataHeader ? userDataHeader.languageTable : 0,hasUserDataHeader ? userDataHeader.languageShiftTable : 0);break;case ENCODING_16BIT:messageBody=p.getUserDataUCS2(count);break;case ENCODING_KSC5601:messageBody=p.getUserDataKSC5601(count);break;}if (false) Log.v(LOG_TAG,"SMS message body (raw): '" + messageBody + "'");if (messageBody != null) {parseMessageBody();}if (!hasMessageClass) {messageClass=MessageClass.UNKNOWN;} else {switch (dataCodingScheme & 0x3) {case 0:messageClass=MessageClass.CLASS_0;break;case 1:messageClass=MessageClass.CLASS_1;break;case 2:messageClass=MessageClass.CLASS_2;break;case 3:messageClass=MessageClass.CLASS_3;break;}}}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","fspt");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public MemChunkHolder<A> createChunk(long size){  return createChunk(size,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Object duplicate(Object object,boolean deepCopy){  if (object == null)   return null;  if (object instanceof Number)   return object;  if (object instanceof String)   return object;  if (object instanceof Date)   return ((Date)object).clone();  if (object instanceof Boolean)   return object;  RefBoolean before=new RefBooleanImpl();  try {    Object copy=ThreadLocalDuplication.get(object,before);    if (copy != null) {      return copy;    }    if (object instanceof Collection)     return ((Collection)object).duplicate(deepCopy);    if (object instanceof Duplicable)     return ((Duplicable)object).duplicate(deepCopy);    if (object instanceof UDF)     return ((UDF)object).duplicate();    if (object instanceof List)     return duplicateList((List)object,deepCopy);    if (object instanceof Map)     return duplicateMap((Map)object,deepCopy);    if (object instanceof Serializable) {      try {        String ser=JavaConverter.serialize((Serializable)object);        return JavaConverter.deserialize(ser);      } catch (      Throwable t) {      }    }  }  finally {    if (!before.toBooleanValue())     ThreadLocalDuplication.reset();  }  return object;}  }
class C{  private void startImageHostToHostCopyService(final ImageHostToHostCopyService.State startState,final Operation.CompletionHandler handler){  Operation copyOperation=Operation.createPost(UriUtils.buildUri(getHost(),ImageHostToHostCopyServiceFactory.SELF_LINK)).setBody(startState).setCompletion(handler);  this.sendRequest(copyOperation);}  }
class C{  public static String detectCharset(byte bytes[]){  UniversalDetector detector=new UniversalDetector(null);  int offset=0;  do {    int blockSize=Math.min(4096,bytes.length - offset);    detector.handleData(bytes,offset,blockSize);    offset+=blockSize;  } while (offset < bytes.length);  detector.dataEnd();  return or(detector.getDetectedCharset(),"UTF-8");}  }
class C{  public void importIDB(final String idbfile) throws ImportFailedException {  try {    new CBinExportImporter().importIdbFile(ConfigManager.instance().getGeneralSettings().getIdaDirectory(),idbfile,m_database);  } catch (  final com.google.security.zynamics.binnavi.Importers.ImportFailedException e) {    throw new ImportFailedException(e);  }}  }
class C{  public String toString(){  final String TAB=" ";  return "MailboxExpression [ " + "base = " + this.base + TAB+ "expression = "+ this.expression+ TAB+ "freeWildcard = "+ this.getFreeWildcard()+ TAB+ "localWildcard = "+ this.getLocalWildcard()+ TAB+ " ]";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.056 -0500",hash_original_method="8FCC3F0E0A5D8FFFF2EC5D3079BCE516",hash_generated_method="89D82F7C27D9F3D996D8459B5098596C") @DSSafe(DSCat.SAFE_OTHERS) public static byte[] sha512(byte[] data){  return getSha512Digest().digest(data);}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  byte[] encoded=key.getEncoded();  if (!AESCrypt.isKeySizeValid(encoded.length)) {    throw new InvalidKeyException("Invalid AES key length: " + encoded.length + " bytes");  }  return encoded.length * 8;}  }
class C{  public static void writeGraph(GraphQueryResult gqr,RDFFormat format,OutputStream out) throws IOException, RDFHandlerException, UnsupportedRDFormatException, QueryEvaluationException {  RDFWriter writer=Rio.createWriter(format,out);  try {    QueryResults.report(gqr,writer);  } catch (  RDFHandlerException e) {    if (e.getCause() instanceof IOException) {      throw (IOException)e.getCause();    } else {      throw e;    }  }}  }
class C{  public boolean hit(Rectangle rect,Shape s,boolean onStroke){  return mGraphics.hit(rect,s,onStroke);}  }
class C{  public Thread startThread(Runnable r,String name){  return new CodenameOneThread(r,name);}  }
class C{  public void calcAutoScale(){  double maxNoOfMajorTicks=10;  double maxNoOfMinorTicks=10;  double niceRange=(Helper.calcNiceNumber(getRange(),false));  setMajorTickSpace(Helper.calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1),true));  double niceMinValue=(Math.floor(getMinValue() / getMajorTickSpace()) * getMajorTickSpace());  double niceMaxValue=(Math.ceil(getMaxValue() / getMajorTickSpace()) * getMajorTickSpace());  setMinorTickSpace(Helper.calcNiceNumber(getMajorTickSpace() / (maxNoOfMinorTicks - 1),true));  setMinValue(niceMinValue);  setMaxValue(niceMaxValue);}  }
class C{  public void uploadActionInitiated(String title,String description){  this.title=title;  this.description=description;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {      requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},4);    } else {      uploadBegins();    }  } else {    uploadBegins();  }}  }
class C{  public ArithmaticExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  private void attemptModifyBackgroundPaint(){  Color c;  c=JColorChooser.showDialog(this,localizationResources.getString("Background_Color"),Color.blue);  if (c != null) {    this.background.setPaint(c);  }}  }
class C{  public ChangeableHighlightPainter(Paint paint){  this(paint,false);}  }
class C{  protected boolean beforeSave(boolean newRecord){  log.fine("");  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"M_InOutLine"));    return false;  }  if (getProduct() != null && MProduct.PRODUCTTYPE_Item.equals(getProduct().getProductType())) {    if (getM_Locator_ID() <= 0 && getC_Charge_ID() <= 0) {      throw new FillMandatoryException(COLUMNNAME_M_Locator_ID);    }  }  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM M_InOutLine WHERE M_InOut_ID=?";    int ii=DB.getSQLValueEx(get_TrxName(),sql,getM_InOut_ID());    setLine(ii);  }  if (getC_UOM_ID() == 0)   setC_UOM_ID(Env.getContextAsInt(getCtx(),"#C_UOM_ID"));  if (getC_UOM_ID() == 0) {    int C_UOM_ID=MUOM.getDefault_UOM_ID(getCtx());    if (C_UOM_ID > 0)     setC_UOM_ID(C_UOM_ID);  }  if (newRecord || is_ValueChanged("QtyEntered"))   setQtyEntered(getQtyEntered());  if (newRecord || is_ValueChanged("MovementQty"))   setMovementQty(getMovementQty());  if (getC_OrderLine_ID() == 0 && getM_RMALine_ID() == 0) {    if (getParent().isSOTrx()) {      log.saveError("FillMandatory",Msg.translate(getCtx(),"C_Order_ID"));      return false;    }  }  if (getM_RMALine_ID() > 0) {    setC_OrderLine_ID(getM_RMALine().getM_InOutLine().getC_OrderLine_ID());  }  if (getM_Locator_ID() > 0) {    MLocator locator=MLocator.get(getCtx(),getM_Locator_ID());    if (getM_Warehouse_ID() != locator.getM_Warehouse_ID()) {      throw new WarehouseLocatorConflictException(MWarehouse.get(getCtx(),getM_Warehouse_ID()),locator,getLine());    }  }  return true;}  }
class C{  @Override public void closeProgram(){  ConfigHandler.saveConfig(CurrentGui.getInstance().getGui());}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public static BigIntEuclidean calculate(BigInteger a,BigInteger b){  BigInteger x=BigInteger.ZERO;  BigInteger lastx=BigInteger.ONE;  BigInteger y=BigInteger.ONE;  BigInteger lasty=BigInteger.ZERO;  while (!b.equals(BigInteger.ZERO)) {    BigInteger[] quotientAndRemainder=a.divideAndRemainder(b);    BigInteger quotient=quotientAndRemainder[0];    BigInteger temp=a;    a=b;    b=quotientAndRemainder[1];    temp=x;    x=lastx.subtract(quotient.multiply(x));    lastx=temp;    temp=y;    y=lasty.subtract(quotient.multiply(y));    lasty=temp;  }  BigIntEuclidean result=new BigIntEuclidean();  result.x=lastx;  result.y=lasty;  result.gcd=a;  return result;}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    uriString=uriString.substring(7);  }  return uriString;}  }
class C{  void checkState() throws JMSException {  if (ActiveMQRAMessageConsumer.trace) {    ActiveMQRALogger.LOGGER.trace("checkState()");  }  session.checkState();}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  public static IJavaElement create(File resource,IJavaProject project){  if (resource == null) {    return null;  }  if (resource.isFile()) {    return createFromFile(resource,project);  } else {    return createFromDirectory(resource,project);  }}  }
class C{  public static long toLongFromNibbles(byte[] nibbles,int start){  return toLong(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3],nibbles[start + 4],nibbles[start + 5],nibbles[start + 6],nibbles[start + 7],nibbles[start + 8],nibbles[start + 9],nibbles[start + 10],nibbles[start + 11],nibbles[start + 12],nibbles[start + 13],nibbles[start + 14],nibbles[start + 15]);}  }
class C{  public ProducerBehaviour(final String questSlot,final String productionActivity,final String productName,final Map<String,Integer> requiredResourcesPerItem,final int productionTimePerItem,final boolean productBound){  super(productName);  this.questSlot=questSlot;  this.productionActivity=productionActivity;  this.productName=productName;  this.requiredResourcesPerItem=requiredResourcesPerItem;  this.productionTimePerItem=productionTimePerItem;  this.productBound=productBound;  WordList.getInstance().registerVerb(productionActivity);  for (  final String itemName : requiredResourcesPerItem.keySet()) {    WordList.getInstance().registerName(itemName,ExpressionType.OBJECT);  }}  }
class C{  public RecordableHistoryEvent(String eventType,long timestamp,Recordable recordable,String referrer,String action,Map<String,String> parameters){  this.eventType=eventType;  this.timestamp=timestamp;  this.recordable=recordable;  this.referrer=referrer;  this.action=action;  this.parameters=parameters;}  }
class C{  public static Util newGCspyUtil(){  return factory.newGCspyUtil();}  }
class C{  private Object generateValue(MethodSymbol meth,Attribute attr){  ValueVisitor vv=new ValueVisitor(meth);  return vv.getValue(attr);}  }
class C{  public Surface end(){  batch.end();  return this;}  }
class C{  private boolean isBlankOrNull(String value){  return ((value == null) || (value.trim().length() == 0));}  }
class C{  public void repaint(ConsoleRenderer renderer){  List<Player> close=Bukkit.getOnlinePlayers().stream().filter(null).collect(Collectors.toList());synchronized (LOCK) {    stack.add(new StackEntry(renderer));    ClientConnection[] arr=new ClientConnection[close.size()];    String[] names=new String[close.size()];    for (int t=0; t < arr.length; t++) {      arr[t]=ConsolesNMS.packetInternals.getConnection(close.get(t));      names[t]=close.get(t).getName();    }    stack.add(new StackEntry(renderer,arr,names,true,false,false));    LOCK.notify();  }}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) public AWTTerminalFrame(TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this("AwtTerminalFrame",autoCloseTriggers);}  }
class C{  public GroupbyValue(int initialCapacity){  this.initialCapacity=initialCapacity;  this.value=new WritableList<DoubleWritable>(DoubleWritable.class,this.initialCapacity);  this.meta=new WritableList<BytesWritable>(BytesWritable.class,this.initialCapacity);}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public static <L,M,R>ImmutableTriple<L,M,R> of(final L left,final M middle,final R right){  return new ImmutableTriple<L,M,R>(left,middle,right);}  }
class C{  private static FlinkKafkaConsumer082<String> kafkaSource(BenchmarkConfig config){  return new FlinkKafkaConsumer082<>(config.kafkaTopic,new SimpleStringSchema(),config.getParameters().getProperties());}  }
class C{  public static short nextShort(){synchronized (random) {    return random.nextShort();  }}  }
class C{  public void showDarwin(View v){  if (mMap == null) {    return;  }  mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(DARWIN,10f));}  }
class C{  public Enumeration all(){  return _all.elements();}  }
class C{  public static void centerEdgeLabel(final ZyGraph graph,final NaviEdge edge,final boolean zoom){  Preconditions.checkNotNull(graph,"IE02101: Graph argument can not be null");  Preconditions.checkNotNull(edge,"IE02102: Edge argument can not be null");  final double oldZoom=graph.getView().getZoom();  if (!edge.isVisible()) {    final NaviNode sourceNode=edge.getSource();    final NaviNode targetNode=edge.getTarget();    final boolean autoLayout=graph.getSettings().getLayoutSettings().getAutomaticLayouting();    graph.getSettings().getLayoutSettings().setAutomaticLayouting(false);    graph.showNode(sourceNode,true);    graph.showNode(targetNode,true);    graph.getSettings().getLayoutSettings().setAutomaticLayouting(autoLayout);  }  if (zoom) {    ZoomFunctions.zoomToEdgeLabel(graph,edge);  } else {    MoveFunctions.centerEdgeLable(graph,edge);    focusView(graph,oldZoom,graph.getView().getCenter());  }}  }
class C{  public static ValueLobDb createTempClob(Reader in,long length){  BufferedReader reader;  if (in instanceof BufferedReader) {    reader=(BufferedReader)in;  } else {    reader=new BufferedReader(in,Constants.IO_BUFFER_SIZE);  }  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(reader,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      reader.mark(len);      len=IOUtils.readFully(reader,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLobDb.createSmallLob(Value.CLOB,small,len);    }    reader.reset();    ValueLobDb lob=new ValueLobDb(reader,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  protected Caret createCaret(){  Caret caret=new ConfigurableCaret();  caret.setBlinkRate(500);  return caret;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected BigDecimal convertVersion(Resource resource){  if (resource.getEmlVersion() != null) {    BigDecimal version=resource.getEmlVersion();    if (version.equals(BigDecimal.ZERO)) {      return Constants.INITIAL_RESOURCE_VERSION;    } else     if (version.scale() == 0) {      BigDecimal majorMinorVersion=version.setScale(1,RoundingMode.CEILING);      log.debug("Converted version [" + version.toPlainString() + "] to ["+ majorMinorVersion.toPlainString()+ "]");      return majorMinorVersion;    }  }  return null;}  }
class C{  public LinearGrowth(Type units){  super(units);}  }
class C{  protected static boolean createDirectory(final String path){  File dir=new File(path);  try {    boolean dirCreated=dir.mkdirs();    return dirCreated;  } catch (  SecurityException e) {    LOGGER.error("Directory creation . Cannot create the specified directory !\n" + "Specified directory path (absolute): " + dir.getAbsolutePath(),e);    throw new IllegalStateException("The directory (-" + path + ")  you specified cannot be written to:",e);  }}  }
class C{  public NullPointerException(@Nullable String s){  super(s);}  }
class C{  public GF2Matrix extendRightCompactForm(){  GF2Matrix result=new GF2Matrix(numRows,numRows + numColumns);  int q=numRows >> 5;  int r=numRows & 0x1f;  for (int i=numRows - 1; i >= 0; i--) {    result.matrix[i][i >> 5]|=1 << (i & 0x1f);    if (r != 0) {      int ind=q;      for (int j=0; j < length - 1; j++) {        int mw=matrix[i][j];        result.matrix[i][ind++]|=mw << r;        result.matrix[i][ind]|=mw >>> (32 - r);      }      int mw=matrix[i][length - 1];      result.matrix[i][ind++]|=mw << r;      if (ind < result.length) {        result.matrix[i][ind]|=mw >>> (32 - r);      }    } else {      System.arraycopy(matrix[i],0,result.matrix[i],q,length);    }  }  return result;}  }
class C{  public ConversationDataOptions build(){  Validator.notNull(dialogId,"dialogId cannot be null");  return new ConversationDataOptions(this);}  }
class C{  public DoubleVector map(String className,String method){  try {    Class<?> c=Class.forName(className);    Class<?>[] cs=new Class[1];    cs[0]=Double.TYPE;    Method m=c.getMethod(method,cs);    DoubleVector w=new DoubleVector(size());    Object[] obj=new Object[1];    for (int i=0; i < size(); i++) {      obj[0]=new Double(V[i]);      w.set(i,Double.parseDouble(m.invoke(null,obj).toString()));    }    return w;  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }  return null;}  }
class C{  public void sendResponse(Response response,TransportAddress sendThrough,TransportAddress sendTo) throws StunException, IOException, IllegalArgumentException {  if (!isRetransmitting) {    this.response=response;    response.setTransactionID(this.transactionID.getBytes());    this.localSendingAddress=sendThrough;    this.responseDestination=sendTo;  }  isRetransmitting=true;  retransmitResponse();}  }
class C{  public Object eval(File file) throws ScriptException, FileNotFoundException, IOException {  ScriptEngine engine=this.getEngineByExtension(FilenameUtils.getExtension(file.getName()));  if (PYTHON.equals(engine.getFactory().getEngineName()) && this.jython != null) {    try (FileInputStream fi=new FileInputStream(file)){      this.jython.execfile(fi);    }     return null;  }  try (FileReader fr=new FileReader(file)){    return engine.eval(fr);  } }  }
class C{  public ConsolePrintStream(java.io.OutputStream out){  super(out,true);}  }
class C{  public void init(){  this.mappings.put("c",makeList("text/x-csrc"));  this.mappings.put("C",makeList("text/x-c++src"));  this.mappings.put("cc",makeList("text/x-c++src"));  this.mappings.put("cpp",makeList("text/x-c++src"));  this.mappings.put("ino",makeList("text/x-c++src"));  this.mappings.put("h",makeList("text/x-chdr"));  this.mappings.put("hh",makeList("text/x-c++hdr"));  this.mappings.put("c++",Collections.singletonList("text/x-c++src"));  this.mappings.put("cs",Collections.singletonList("text/x-csharp"));  this.mappings.put("m",Collections.singletonList("text/x-objective-c"));  this.mappings.put("java",Collections.singletonList("text/x-java"));  this.mappings.put("class",Collections.singletonList("text/x-java"));  this.mappings.put("scala",Collections.singletonList("text/x-scala"));  this.mappings.put("sbt",Collections.singletonList("text/x-scala"));  this.mappings.put("clj",Collections.singletonList("text/x-clojure"));  this.mappings.put("groovy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gvy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gradle",Collections.singletonList("text/x-groovy"));  this.mappings.put("kt",Collections.singletonList("text/x-kotlin"));  this.mappings.put("js",makeList("application/javascript","text/javascript"));  this.mappings.put("coffee",makeList("text/x-coffeescript"));  this.mappings.put("json",makeList("application/json"));  this.mappings.put("ts",makeList("application/javascript","application/typescript"));  this.mappings.put("es6",makeList("application/javascript","text/javascript"));  this.mappings.put("jsx",makeList("application/javascript","text/javascript"));  this.mappings.put("css",makeList("text/css"));  this.mappings.put("scss",makeList("text/x-scss"));  this.mappings.put("less",makeList("text/x-less"));  this.mappings.put("sass",makeList("text/x-sass"));  this.mappings.put("xml",makeList("application/xml"));  this.mappings.put("xml",makeList("application/xml"));  this.mappings.put("html",makeList("text/html"));  this.mappings.put("xhtml",makeList("application/xml+xhtml","text/html"));  this.mappings.put("htm",makeList("text/html"));  this.mappings.put("dtd",makeList("application/xml-dtd"));  this.mappings.put("yaml",makeList("text/x-yaml"));  this.mappings.put("yml",makeList("text/x-yaml"));  this.mappings.put("markdown",makeList("text/x-markdown"));  this.mappings.put("mdown",makeList("text/x-markdown"));  this.mappings.put("mkdn",makeList("text/x-markdown"));  this.mappings.put("mkd",makeList("text/x-markdown"));  this.mappings.put("md",makeList("text/x-markdown"));  this.mappings.put("mdwn",makeList("text/x-markdown"));  this.mappings.put("rest",makeList("text/x-rst"));  this.mappings.put("rst",makeList("text/x-rst"));  this.mappings.put("tex",makeList("text/x-latex"));  this.mappings.put("cls",makeList("text/x-latex"));  this.mappings.put("sty",makeList("text/x-latex"));  this.mappings.put("py",makeList("text/x-python"));  this.mappings.put("pyx",makeList("text/x-cython"));  this.mappings.put("rb",makeList("text/x-ruby"));  this.mappings.put("gemspec",makeList("text/x-ruby"));  this.mappings.put("go",makeList("text/x-go"));  this.mappings.put("rs",makeList("text/x-rustsrc"));  this.mappings.put("erl",makeList("text/x-erlang"));  this.mappings.put("lua",makeList("text/x-lua"));  this.mappings.put("tcl",makeList("text/x-tcl"));  this.mappings.put("pl",makeList("text/x-perl"));  this.mappings.put("pm",makeList("text/x-perl"));  this.mappings.put("php",makeList("text/x-php"));  this.mappings.put("phtml",makeList("text/x-php"));  this.mappings.put("ejs",makeList("application/x-ejs"));  this.mappings.put("jsp",makeList("application/x-jsp"));  this.mappings.put("asp",makeList("application/x-aspx"));  this.mappings.put("aspx",makeList("application/x-aspx"));  this.mappings.put("slim",makeList("text/x-slim"));  this.mappings.put("ml",makeList("text/x-ocaml"));  this.mappings.put("fs",makeList("text/x-fsharp"));  this.mappings.put("lisp",makeList("text/x-commonlisp"));  this.mappings.put("cl",makeList("text/x-commonlisp"));  this.mappings.put("hs",makeList("text/x-haskell"));  this.mappings.put("scm",makeList("text/x-scheme"));  this.mappings.put("sql",makeList("text/x-sql"));  this.mappings.put("properties",makeList("text/x-properties"));  this.mappings.put("diff",makeList("text/x-diff"));  this.mappings.put("r",makeList("text/x-rsrc"));  this.mappings.put("R",makeList("text/x-rsrc"));  this.mappings.put("csv",makeList("text/csv"));  this.mappings.put("sh",makeList("text/x-sh"));  this.mappings.put("pas",makeList("text/x-pascal"));  this.mappings.put("p",makeList("text/x-pascal"));  this.mappings.put("fpm",makeList("text/x-pascal"));  this.mappings.put("st",makeList("text/x-stsrc"));  this.mappings.put("cob",makeList("text/x-cobol"));  this.mappings.put("cbl",makeList("text/x-cobol"));  this.mappings.put("cpy",makeList("text/x-cobol"));  this.mappings.put("f",makeList("text/x-fortran"));  this.mappings.put("for",makeList("text/x-fortran"));  this.mappings.put("f90",makeList("text/x-fortran"));  this.mappings.put("f95",makeList("text/x-fortran"));  this.mappings.put("f03",makeList("text/x-fortran"));  this.mappings.put("vb",makeList("text/x-vb"));  this.mappings.put("vbs",makeList("text/vbscript"));  this.mappings.put("pp",makeList("text/x-puppet"));  this.mappings.put("docker",makeList("text/x-dockerfile"));  this.mappings.put("jag",makeList("text/jaggery"));}  }
class C{  public int format(int val,byte[] array){  return format(val,array,0,array.length);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  protected void isAttributeWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Attr",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  String value=node.getNodeValue();  if (value.indexOf('<') >= 0) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_LT_IN_ATTVAL,new Object[]{((Attr)node).getOwnerElement().getNodeName(),node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_LT_IN_ATTVAL,null,null,null));    }  }  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if (child == null) {      continue;    }switch (child.getNodeType()) {case Node.TEXT_NODE:      isTextWellFormed((Text)child);    break;case Node.ENTITY_REFERENCE_NODE:  isEntityReferneceWellFormed((EntityReference)child);break;default :}}}  }
class C{  static RouteBuilder post(String path){  return builder().post(path);}  }
class C{  public List<Object> decodeBuffer(ProtocolState state,IoBuffer buffer){  final List<Object> result=new LinkedList<Object>();  try {    while (true) {      final int remaining=buffer.remaining();      if (state.canStartDecoding(remaining)) {        state.startDecoding();      } else {        break;      }      final Object decodedObject=decode(state,buffer);      if (state.hasDecodedObject()) {        if (decodedObject != null) {          result.add(decodedObject);        }      } else       if (state.canContinueDecoding()) {        continue;      } else {        break;      }      if (!buffer.hasRemaining()) {        break;      }    }  } catch (  HandshakeFailedException hfe) {    buffer.clear();    IConnection conn=Red5.getConnectionLocal();    if (conn != null) {      conn.close();    } else {      log.error("Handshake validation failed but no current connection!?");    }    return null;  }catch (  Exception ex) {    log.error("Error decoding buffer",ex);    buffer.clear();    IConnection conn=Red5.getConnectionLocal();    if (conn != null) {      log.warn("Closing connection because decoding failed: {}",conn);      conn.close();    } else {      log.error("Decoding buffer failed but no current connection!?");    }    return null;  } finally {    buffer.compact();  }  return result;}  }
class C{  private static String createIdFromJndiLocationIfNotNull(String jndiLocation){  String id=null;  if (jndiLocation != null) {    id=createIdFromJndiLocation(jndiLocation);  }  return id;}  }
class C{  public boolean isWrappedAdapterAlive(){  return mWrappedAdapter != null;}  }
class C{  public void uninstallUI(JComponent c){}  }
class C{  public void shutdown() throws RepositoryException {  this.anno4j.getObjectRepository().getConnection().close();  this.anno4j.getRepository().getConnection().close();}  }
class C{  public void test_deadlock_001(){  final int CAPACITY=5;  final TxDag dag=new TxDag(CAPACITY);  final String tx0="tx0";  final String tx1="tx1";  dag.addEdge(tx0,tx1);  try {    dag.addEdge(tx1,tx0);    fail("Expecting exception: " + DeadlockException.class);  } catch (  DeadlockException ex) {    log.info("Expected exception: " + ex);  }}  }
class C{  public NecronomiconCreationRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,ItemStack item,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,offerings);  this.item=item;  if (item.stackSize > 1)   item.stackSize=1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.267 -0500",hash_original_method="74AC0793AA670585A51BA4B2FC045561",hash_generated_method="7B430B8E4D15CE48346DD2C7229FF5A3") public void nativeDestroyFrame(){}  }
class C{  @RequestMapping(value="/bloodPressures",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<BloodPressure> create(@Valid @RequestBody BloodPressure bloodPressure) throws URISyntaxException {  log.debug("REST request to save BloodPressure : {}",bloodPressure);  if (bloodPressure.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new bloodPressure cannot already have an ID").body(null);  }  if (!SecurityUtils.isUserInRole(AuthoritiesConstants.ADMIN)) {    log.debug("No user passed in, using current user: {}",SecurityUtils.getCurrentLogin());    bloodPressure.setUser(userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).get());  }  BloodPressure result=bloodPressureRepository.save(bloodPressure);  bloodPressureSearchRepository.save(result);  return ResponseEntity.created(new URI("/api/bloodPressures/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("bloodPressure",result.getId().toString())).body(result);}  }
class C{  public boolean isWrapperFor(final Class<?> iface) throws SQLException {  return false;}  }
class C{  protected void initCapabilities(){  String classname;  Class<?> cls;  Object obj;  if (m_Capabilities != null) {    return;  }  if (!isLeaf()) {    return;  }  classname=getClassnameFromPath(new TreePath(getPath()));  try {    cls=Class.forName(classname);    if (!ClassDiscovery.hasInterface(CapabilitiesHandler.class,cls)) {      return;    }    obj=cls.newInstance();    m_Capabilities=((CapabilitiesHandler)obj).getCapabilities();  } catch (  Exception e) {  }}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  @Override public E remove(Object key){  if (key instanceof Integer) {    return remove((int)key);  }  return null;}  }
class C{  public PriorityQueue<E> asPriorityQueue(){  PriorityQueue<E> pq=new PriorityQueue<E>(entries.size());  for (  E key : entries.keySet()) {    pq.add(key,entries.getSure(key));  }  return pq;}  }
class C{  public ParsableByteArray(){}  }
class C{  protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  return new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler);}  }
class C{  private void processResourceLibraryContracts(NodeList resourceLibraryContracts,HashMap<String,List<String>> map){  XPath xpath=XPathFactory.newInstance().newXPath();  xpath.setNamespaceContext(new FacesConfigNamespaceContext());  for (int c=0; c < resourceLibraryContracts.getLength(); c++) {    Node node=resourceLibraryContracts.item(c);    try {      NodeList mappings=(NodeList)xpath.evaluate(".//ns1:contract-mapping",node,XPathConstants.NODESET);      if (mappings != null) {        for (int m=0; m < mappings.getLength(); m++) {          Node contractMapping=mappings.item(m);          NodeList urlPatterns=(NodeList)xpath.evaluate(".//ns1:url-pattern/text()",contractMapping,XPathConstants.NODESET);          if (urlPatterns != null) {            for (int p=0; p < urlPatterns.getLength(); p++) {              String urlPattern=urlPatterns.item(p).getNodeValue().trim();              if (LOGGER.isLoggable(Level.INFO)) {                LOGGER.log(Level.INFO,"Processing resource library contract mapping for url-pattern: {0}",urlPattern);              }              if (!map.containsKey(urlPattern)) {                ArrayList<String> list=new ArrayList<>();                NodeList contracts=(NodeList)xpath.evaluate(".//ns1:contracts/text()",contractMapping,XPathConstants.NODESET);                if (contracts != null && contracts.getLength() > 0) {                  for (int j=0; j < contracts.getLength(); j++) {                    String[] contractStrings=contracts.item(j).getNodeValue().trim().split(",");                    for (int k=0; k < contractStrings.length; k++) {                      if (!list.contains(contractStrings[k])) {                        if (LOGGER.isLoggable(Level.INFO)) {                          LOGGER.log(Level.INFO,"Added contract: {0} for url-pattern: {1}",new Object[]{contractStrings[k],urlPattern});                        }                        list.add(contractStrings[k]);                      } else {                        if (LOGGER.isLoggable(Level.INFO)) {                          LOGGER.log(Level.INFO,"Duplicate contract: {0} found for url-pattern: {1}",new Object[]{contractStrings[k],urlPattern});                        }                      }                    }                  }                }                if (!list.isEmpty()) {                  map.put(urlPattern,list);                } else {                  if (LOGGER.isLoggable(Level.INFO)) {                    LOGGER.log(Level.INFO,"No contracts found for url-pattern: {0}",urlPattern);                  }                }              } else {                if (LOGGER.isLoggable(Level.INFO)) {                  LOGGER.log(Level.INFO,"Duplicate url-patern found: {0}, ignoring it",urlPattern);                }              }            }          }        }      }    } catch (    XPathExpressionException exception) {      if (LOGGER.isLoggable(Level.FINEST)) {        LOGGER.log(Level.FINEST,"Unable to parse XPath expression",exception);      }    }  }}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public synchronized void releaseXMLReader(XMLReader reader){  if (m_readers.get() == reader && reader != null) {    m_inUse.remove(reader);  }}  }
class C{  public void warn(String msg,Object[] argArray){  innerLog(Level.WARNING,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  @Override public boolean isNullable(){  return false;}  }
class C{  private int initCoord(final int coord,final int max){  int x;  if (coord < 0) {    x=Rand.rand(max);  } else {    x=coord;  }  return x;}  }
class C{  public boolean isValor(){  return valor;}  }
class C{  private void testOrientationChange(CourseUnitVideoFragment fragment,int orientation){  Resources resources=fragment.getResources();  Configuration config=resources.getConfiguration();  assertNotEquals(orientation,config.orientation);  config.orientation=orientation;  fragment.onConfigurationChanged(config);  boolean isLandscape=config.orientation == Configuration.ORIENTATION_LANDSCAPE;  View view=fragment.getView();  assertNotNull(view);  Window window=fragment.getActivity().getWindow();  View playerContainer=view.findViewById(R.id.player_container);  if (playerContainer != null) {    assertThat(playerContainer).isInstanceOf(ViewGroup.class);    ViewGroup.LayoutParams layoutParams=playerContainer.getLayoutParams();    assertNotNull(layoutParams);    assertThat(layoutParams).hasWidth(ViewGroup.LayoutParams.MATCH_PARENT);    DisplayMetrics displayMetrics=resources.getDisplayMetrics();    int height=isLandscape ? displayMetrics.heightPixels : (displayMetrics.widthPixels * 9 / 16);    assertThat(layoutParams).hasHeight(height);  }}  }
class C{  public static <T>T doInTransaction(TransactionCallback<T> callback) throws Exception {  return CTX.doInTransaction(callback);}  }
class C{  public static double[] copyOf(double[] original,int newLength){  double[] copy=new double[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  int parseIntOption(String key,String value) throws URISyntaxException {  try {    return Integer.parseInt(value);  } catch (  NumberFormatException nfe) {    throw new URISyntaxException(value,"Invalid " + key + " value: "+ value);  }}  }
class C{  private static Throwable executeReflectionCodeUnThreaded(ReflectionCode code,PrintStream out){  try {    code.runReflectionCode();    return null;  } catch (  ThreadDeath e) {    throw e;  }catch (  ReflectionCode.NotCaughtIllegalStateException e) {    throw e;  }catch (  Throwable e) {    Throwable orig_e=null;    if (e instanceof java.lang.reflect.InvocationTargetException) {      orig_e=e;      e=e.getCause();    }    if (out != null) {      printExceptionDetails(e,out);      if (orig_e != null) {        out.println("Original exception: " + orig_e);      }    }    return e;  }}  }
class C{  public final CC gapY(String before,String after){  if (before != null)   ver.setGapBefore(ConstraintParser.parseBoundSize(before,true,false));  if (after != null)   ver.setGapAfter(ConstraintParser.parseBoundSize(after,true,false));  return this;}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  public IcsProgressBar(Context context){  this(context,null);}  }
class C{  public void shutdown(){  shutdownServerThread();  shutdownSessions();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == N4ClassifierDefinition.class) {switch (baseOperationID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_SUPER_CLASSIFIER_REFS:      return N4JSPackage.N4_CLASS_DEFINITION___GET_SUPER_CLASSIFIER_REFS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:    return N4JSPackage.N4_CLASS_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ThisTarget.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void backupFavorites(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.FAVORITE,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime || restoredBackupVersion < 4) {        writeRowToBackup(key,packFavorite(cursor),data);      } else {        if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public T caseThisLiteral(ThisLiteral object){  return null;}  }
class C{  protected LongStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void sendMessage(String[] recipients,String subject,Message msg){  Display.getInstance().sendMessage(recipients,subject,msg);}  }
class C{  public Object value(int integer){  return this.list[integer];}  }
class C{  protected boolean accept2(File f){  return false;}  }
class C{  public static boolean isAppVisible(){  return getAppFrame().isShowing();}  }
class C{  public static void print(){  System.out.println("--------------------------------------------------------" + "-------------------------------------------------------------\n" + " Year  Rank 1    Rank 2    Rank 3    Rank 4    Rank 5    "+ "Rank 1      Rank 2      Rank 3      Rank 4      Rank 5\n"+ "--------------------------------------------------------"+ "-------------------------------------------------------------");}  }
class C{  @SuppressWarnings("unused") @android.webkit.JavascriptInterface public void visitRendered(String visitIdentifier){  TurbolinksLog.d("visitRendered called, hiding progress view for identifier: " + visitIdentifier);  hideProgressView(visitIdentifier);}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public static String currentDate(){  DateFormat DATE_FORMAT=new SimpleDateFormat("dd/MM/yyyy");  Calendar cal=Calendar.getInstance();  return DATE_FORMAT.format(cal.getTime());}  }
class C{  public boolean addAll(Iterable<? extends Solution> iterable){  boolean changed=false;  for (  Solution solution : iterable) {    changed|=add(solution);  }  return changed;}  }
class C{  public static boolean isPacketLoggerEnabled(){  return packetLogger != null && packetLogger.isEnabled();}  }
class C{  public List<Map<Id,Link>> run(final Set<String> modes){  final Map<Id,Link> visitedLinks=new HashMap<Id,Link>((int)(this.network.getLinks().size() * 1.5));  final List<Map<Id,Link>> clusters=new ArrayList<Map<Id,Link>>();  log.info("running " + this.getClass().getName() + " algorithm for modes "+ Arrays.toString(modes.toArray())+ "...");  log.info("  checking " + this.network.getNodes().size() + " nodes and "+ this.network.getLinks().size()+ " links for dead-ends...");  Iterator<? extends Link> iter=this.network.getLinks().values().iterator();  while (iter.hasNext()) {    Link startLink=iter.next();    if ((!visitedLinks.containsKey(startLink.getId())) && (intersectingSets(modes,startLink.getAllowedModes()))) {      Map<Id,Link> cluster=this.findCluster(startLink,modes);      if (cluster.size() > 0) {        visitedLinks.putAll(cluster);        clusters.add(cluster);        log.info("Found cluster with " + cluster.size() + " links. Totally covered links: "+ visitedLinks.size());      }    }  }  return clusters;}  }
class C{  public RosterEntryComboBox(Roster roster,String rosterGroup){  this(roster,rosterGroup,null,null,null,null,null,null,null);}  }
class C{  public Builder delta(int val){  if (val == 0) {    throw new IllegalArgumentException("0 is not a valid delta");  }  this.delta=val;  return this;}  }
class C{  public boolean isClassUnsolicited(){  return isClassUnsolicited(mCode);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HideAudioDao.dropTable(db,ifExists);}  }
class C{  private boolean isScrollingHorizontal(float x1,float y1,float x2,float y2){  float deltaX=x2 - x1;  float deltaY=y2 - y1;  if (Math.abs(deltaX) > mTouchSlop && Math.abs(deltaX) > Math.abs(deltaY)) {    return true;  }  return false;}  }
class C{  protected void updateEntry(HashEntry<K,V> entry,V newValue){  entry.setValue(newValue);}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public void putOid(long[] s){  putOid(s,OidTag);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/requestDetails.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamAttachment(request,response);    if (msg == null || msg.length() == 0)     return;    if (info != null)     info.setMessage(msg);  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public UDAnimatorSet pause(){  final AnimatorSet animatorSet=getAnimatorSet();  if (animatorSet != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      if (!animatorSet.isPaused()) {        animatorSet.pause();      }    }  }  if (mTarget != null) {    mTarget.pauseAnimation();  }  return this;}  }
class C{  protected synchronized void clearRemainingActions(){  for (int i=_activeActionList.size() - 1; i >= 0; i--) {    TransitSectionAction tsa=_activeActionList.get(i);    Thread t=tsa.getWaitingThread();    if (t != null) {      t.interrupt();    }    if (tsa.getWaitingForSensor()) {      tsa.disposeSensorListener();    }    tsa.initialize();    _activeActionList.remove(i);  }}  }
class C{  private Method retrieveMethod(HttpMethods httpMethod,Class<?> clazzUsedToLookup){  String cacheLookupName=getCacheLookupName(httpMethod,clazzUsedToLookup);  Method m=methodCache.get(cacheLookupName);  if (null == m) {    try {      m=clazzUsedToLookup.getMethod(httpMethod.methodName,httpMethod.parameters);      m.setAccessible(true);      Method existing=methodCache.putIfAbsent(cacheLookupName,m);      if (null != existing) {        m=existing;      }    } catch (    Exception e) {      LOG.error("The provided class " + clazzUsedToLookup.getCanonicalName() + " did not provide the desired method.",e);      methodCache.putIfAbsent(cacheLookupName,markerMethod);    }  } else   if (markerMethod.equals(m)) {    return null;  }  return m;}  }
class C{  public void bind(Node node,GraphicsNode gn){  if (elementNodeMap == null) {    elementNodeMap=new WeakHashMap();    nodeElementMap=new WeakHashMap();  }  elementNodeMap.put(node,new SoftReference(gn));  nodeElementMap.put(gn,new SoftReference(node));}  }
class C{  static boolean isValidDefaultValue(Class<?> modelClass,String defaultValue){  if (defaultValue == null) {    return true;  }  if (defaultValue.trim().length() == 0) {    return true;  }  Pattern functionDefault=Pattern.compile("[^'].*[^']");  if (functionDefault.matcher(defaultValue).matches()) {    return true;  }  if (modelClass == String.class) {    Pattern stringDefault=Pattern.compile("'(.|\\n)*'");    return stringDefault.matcher(defaultValue).matches();  }  String dateRegex="[0-9]{1,4}[-/\\.][0-9]{1,2}[-/\\.][0-9]{1,2}";  String timeRegex="[0-2]{1}[0-9]{1}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}";  if (modelClass == java.util.Date.class || modelClass == java.sql.Timestamp.class) {    Pattern pattern=Pattern.compile("'" + dateRegex + "."+ timeRegex+ "'");    return pattern.matcher(defaultValue).matches();  }  if (modelClass == java.sql.Date.class) {    Pattern pattern=Pattern.compile("'" + dateRegex + "'");    return pattern.matcher(defaultValue).matches();  }  if (modelClass == java.sql.Time.class) {    Pattern pattern=Pattern.compile("'" + timeRegex + "'");    return pattern.matcher(defaultValue).matches();  }  if (Number.class.isAssignableFrom(modelClass)) {    String unquoted=defaultValue;    if (unquoted.charAt(0) == '\'') {      unquoted=unquoted.substring(1);    }    if (unquoted.charAt(unquoted.length() - 1) == '\'') {      unquoted=unquoted.substring(0,unquoted.length() - 1);    }    try {      Method m=modelClass.getMethod("valueOf",String.class);      m.invoke(null,unquoted);    } catch (    NumberFormatException ex) {      return false;    }catch (    Throwable t) {    }  }  return true;}  }
class C{  public static void main(String[] args){  int[][] array={{4,2},{1,7},{4,5},{1,2},{1,1},{4,1}};  sort(array);  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      System.out.print(array[i][j] + " ");    }  }}  }
class C{  public Value convert(Value v){  try {    return v.convertTo(type);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {      String target=(table == null ? "" : table.getName() + ": ") + getCreateSQL();      throw DbException.get(ErrorCode.DATA_CONVERSION_ERROR_1,v.getSQL() + " (" + target+ ")");    }    throw e;  }}  }
class C{  private void updateDialog(final File directory){  final InstallationState cppState=CBinExportInstallationChecker.getState(directory);  m_cppStateLabel.setText(getText(cppState));  m_cppButton.setEnabled(cppState == InstallationState.NotInstalled);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public Revision next() throws Exception {  Revision revision;  if (chronoStorage.isTop(revisionIndex)) {    return chronoStorage.remove();  }  int revCount=revisionIndex;  if (mappingStorage.containsKey(revisionIndex)) {    revCount=mappingStorage.get(revisionIndex);  }  ChronoFullRevision cfr=fullRevStorage.get(revCount);  int queryPK, limit, previousRevisionCounter;  String previousRevision;  revision=cfr.getNearest(revCount);  if (revision == null) {    queryPK=articlePK + cfr.getStartRC() - 1;    limit=revCount - cfr.getStartRC() + 1;    previousRevision=null;    previousRevisionCounter=-1;  } else {    queryPK=revision.getPrimaryKey() + 1;    limit=revCount - revision.getRevisionCounter();    previousRevision=revision.getRevisionText();    previousRevisionCounter=revision.getRevisionCounter();  }  Statement statement=null;  ResultSet result=null;  revision=null;  try {    statement=this.connection.createStatement();    result=statement.executeQuery("SELECT Revision, PrimaryKey, RevisionCounter, RevisionID, ArticleID, Timestamp " + "FROM revisions " + "WHERE PrimaryKey >= " + queryPK + " LIMIT "+ limit);    String currentRevision=null;    Diff diff;    RevisionDecoder decoder;    boolean binaryData=result.getMetaData().getColumnType(1) == Types.LONGVARBINARY;    while (result.next()) {      decoder=new RevisionDecoder(config.getCharacterSet());      if (binaryData) {        decoder.setInput(result.getBinaryStream(1),true);      } else {        decoder.setInput(result.getString(1));      }      diff=decoder.decode();      if (previousRevisionCounter != -1) {        if (previousRevisionCounter + 1 != result.getInt(3)) {          System.err.println("Reconstruction data invalid - " + "\r\n\t" + "Expected " + (previousRevisionCounter + 1) + " instead of "+ result.getInt(3));          return null;        }      } else {        if (cfr.getStartRC() != result.getInt(3)) {          System.err.println("Reconstruction data invalid - " + "\r\n\t" + "Expected " + (cfr.getStartRC()) + " instead of "+ result.getInt(3));          return null;        }      }      try {        currentRevision=diff.buildRevision(previousRevision);        revision=new Revision(result.getInt(3));        revision.setRevisionText(currentRevision);        revision.setPrimaryKey(result.getInt(2));        revision.setRevisionID(result.getInt(4));        revision.setArticleID(result.getInt(5));        revision.setTimeStamp(new Timestamp(result.getLong(6)));        previousRevision=currentRevision;        previousRevisionCounter=revision.getRevisionCounter();      } catch (      Exception e) {        System.err.println("Reconstruction failed while retrieving" + " data to reconstruct <" + revisionIndex + ">"+ "\r\n\t"+ "[ArticleId "+ result.getInt(5)+ ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "]");        previousRevision=null;        revision=null;        return null;      }      if (revision != null) {        chronoStorage.add(revision);      }    }    if (chronoStorage.isTop(revisionIndex)) {      chronoStorage.remove();      return revision;    } else {      return null;    }  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.739 -0500",hash_original_method="B601E34EA293BA88B55F6A64935FC5DC",hash_generated_method="1D0981A94C4AD37C0BFF170C7DBC532D") public static byte[] decodeHex(char[] data) throws DecoderException {  int len=data.length;  if ((len & 0x01) != 0) {    throw new DecoderException("Odd number of characters.");  }  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public void printDataTransferCompleted(PrintJobEvent pje){}  }
class C{  public boolean stopCellEditing(){  if (realEditor.stopCellEditing()) {    cleanupAfterEditing();    return true;  }  return false;}  }
class C{  private static String[] nameParameters(Type[] types){  String[] names=new String[types.length];  for (int i=0; i < names.length; i++) {    names[i]="$param_" + generateNameFromType(types[i]) + "_"+ (i + 1);  }  return names;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  java.io.ObjectInputStream.GetField fields=s.readFields();  value=(char[])fields.get("value",null);  count=fields.get("count",0);}  }
class C{  public boolean isThriftCompatible(){  if (isSuper())   return true;  for (  ColumnDefinition def : allColumns()) {    if (def.kind == ColumnDefinition.Kind.REGULAR && !def.isThriftCompatible())     return false;  }  if (isCQL3OnlyPKComparator(comparator.asAbstractType()) && !isDense)   return false;  return true;}  }
class C{  private int y(int y){  return y - getParent().getAbsoluteY();}  }
class C{  public BlockDXT1Compressor(){  this.minColor=new Color32();  this.maxColor=new Color32();  this.palette=new Color32[4];  for (int i=0; i < 4; i++) {    this.palette[i]=new Color32();  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,Map<String,String> namedArgs,String configFilePath) throws IOException, DMLException, ParseException {  String[] args=new String[namedArgs.size()];  int i=0;  for (  Entry<String,String> entry : namedArgs.entrySet()) {    if (entry.getValue().trim().isEmpty())     args[i]=entry.getKey() + "=\"" + entry.getValue()+ "\""; else     args[i]=entry.getKey() + "=" + entry.getValue();    i++;  }  return compileAndExecuteScript(dmlScriptFilePath,args,true,false,configFilePath);}  }
class C{  public void saveForumBotMode(BotModeConfig config){  config.addCredentials(this);  POST(this.url + "/save-forum-bot-mode",config.toXML());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.823 -0500",hash_original_method="971FA82A9D84F9459C5196533729906E",hash_generated_method="1D9B0C01B4EE18D26A2FED93B269F69A") public void cancel(){  if (mRequest != null) {    mRequest.cancel();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SelectionGenerator(int a){  if ((a < 0)) {    throw new IllegalArgumentException("a must be non-zero");  }  this.a=a;  selectionLocal=new int[a];  selectionReturned=new int[a];  for (int i=1; i < a; i++) {    selectionLocal[i]=0;  }  if (a > 0) {    selectionLocal[a - 1]=-1;  }  begun=false;}  }
class C{  public boolean isManyToMany(){  return false;}  }
class C{  public UriProperty(String uri){  super(uri);}  }
class C{  public MisclassificationsEditor(Misclassifications comparison){  this.comparison=comparison;  setup();}  }
class C{  public void checkConnection(){  List<Fragment> fragments=getFragmentManager().getFragments();  onAttachFragment(fragments.get(0) != null ? fragments.get(0) : fragments.get(1));  mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    addDebugText("Connection OK");    listener.onConnectionOk();  } else {    listener.onConnectionFailed();    setErrorMessage(getString(R.string.error_notConnected));  }  ;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public MonthDateFormat(TimeZone zone,Locale locale,int chars,boolean[] showYear,DateFormat yearFormatter){  ParamChecks.nullNotPermitted(locale,"locale");  DateFormatSymbols dfs=new DateFormatSymbols(locale);  String[] monthsFromLocale=dfs.getMonths();  this.months=new String[12];  for (int i=0; i < 12; i++) {    if (chars > 0) {      this.months[i]=monthsFromLocale[i].substring(0,Math.min(chars,monthsFromLocale[i].length()));    } else {      this.months[i]=monthsFromLocale[i];    }  }  this.calendar=new GregorianCalendar(zone);  this.showYear=showYear;  this.yearFormatter=yearFormatter;  this.numberFormat=NumberFormat.getNumberInstance();}  }
class C{  public Map<Integer,TestTable2> selectToMap(){  List<TestTable2> list=SELECT().selectByExample(this);  Map<Integer,TestTable2> m=new LinkedHashMap<Integer,TestTable2>();  for (  TestTable2 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  public static byte[] generatePublicID(AsymmetricCipherKeyPair id){  return encodeDHPublicKey((DHPublicKeyParameters)id.getPublic());}  }
class C{  @Override public int hashCode(){  return 3 * state.hashCode() + 13 * agentLocations.hashCode();}  }
class C{  public boolean isArray(int key){  return get(key) instanceof Json.Array;}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    finish();    inf.end();    out.close();    closed=true;  }}  }
class C{  public static File[] writeAll(J2eeDescriptor descriptor,String dir) throws IOException {  List<File> files=new ArrayList<File>();  File webXmlFile=new File(dir,"web.xml");  writeDescriptor(descriptor,webXmlFile,"UTF-8",true);  files.add(webXmlFile);  for (  Descriptor descr : descriptor.getVendorDescriptors()) {    File file=new File(dir,descr.getFileName());    AbstractDescriptorIo.writeDescriptor(descr,file,"UTF-8",true);    files.add(file);  }  return files.toArray(new File[files.size()]);}  }
class C{  public ExceptionResourceBundle(InputStream resourceStream) throws IOException {  super(resourceStream);}  }
class C{  public static boolean isSameDiagonal(char[] board){  for (int i=0; i < board.length; i++) {    if (isOccupied(board[i])) {      for (int j=0; j < board.length; j++) {        if (isOccupied(board[j]) && Math.abs(getColumn(j) - getColumn(i)) == Math.abs(getRow(j) - getRow(i)) && j != i) {          return true;        }      }    }  }  return false;}  }
class C{  public void compact(WbXmlEncoder encoder,WbXmlAttributeDef def){  if (def == null || encoder.getDefinition().locateAttrPlugin(def.getNameWithPrefix()) == null) {    int start=0;    if (def != null && def.getValue() != null) {      start=def.getValue().length() - 1;    }    boolean first=true;    List<String> newValues=new ArrayList<String>();    for (    String v : values) {      if (first) {        newValues.addAll(encoder.getDefinition().compactAttributeValue(v,start));        first=false;      } else {        newValues.addAll(encoder.getDefinition().compactAttributeValue(v));      }    }    values.clear();    first=true;    for (    String v : newValues) {      if (first) {        values.addAll(encoder.getDefinition().compactExtension(v,start));        first=false;      } else {        values.addAll(encoder.getDefinition().compactExtension(v));      }    }  }  compacted=true;}  }
class C{  public Model addModule(String newModule){  requireNonNull(newModule,"Required not null module");  modules().add(newModule);  if (root.hasSingleChild("modules")) {    root.getSingleChild("modules").appendChild(createElement("module",newModule));  } else {    root.insertChild(createElement("modules",createElement("module",newModule)),beforeAnyOf("dependencyManagement","dependencies","build").or(inTheEnd()));  }  return this;}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  public static void runWithAllOptimizationLevels(final ContextFactory contextFactory,final ContextAction action){  runWithOptimizationLevel(contextFactory,action,-1);  runWithOptimizationLevel(contextFactory,action,0);  runWithOptimizationLevel(contextFactory,action,1);}  }
class C{  public static void mergeNetworks(Network baseNetwork,Collection<Network> networks){  log.info("Merging networks...");  int numberOfLinksBefore=baseNetwork.getLinks().size();  int numberOfNodesBefore=baseNetwork.getNodes().size();  for (  Network currentNetwork : networks) {    integrateNetwork(baseNetwork,currentNetwork);  }  log.info("... Total number of links added to network: " + (baseNetwork.getLinks().size() - numberOfLinksBefore));  log.info("... Total number of nodes added to network: " + (baseNetwork.getNodes().size() - numberOfNodesBefore));  log.info("Merging networks... done.");}  }
class C{  private String createSelectSql(){  if (m_fields.size() == 0 || m_tableName == null || m_tableName.equals(""))   return "";  StringBuffer select=new StringBuffer("SELECT ");  for (int i=0; i < m_fields.size(); i++) {    if (i > 0)     select.append(",");    GridField field=(GridField)m_fields.get(i);    select.append(field.getColumnSQL(true));  }  select.append(" FROM ").append(m_tableName);  m_SQL_Select=select.toString();  m_SQL_Count="SELECT COUNT(*) FROM " + m_tableName;  int parentTabNo=getParentTabNo();  String parentKey=Env.getContext(m_ctx,m_WindowNo,parentTabNo,GridTab.CTX_KeyColumnName,true);  String valueKey=null;  String currKey=null;  if (parentKey != null && parentKey.length() > 0) {    valueKey=Env.getContext(m_ctx,m_WindowNo,parentTabNo,parentKey,true);    currKey=Env.getContext(m_ctx,m_WindowNo,parentKey);    if (currKey == null)     currKey=new String("");    if (valueKey != null && valueKey.length() > 0 && parentKey != null && parentKey.length() > 0 && !currKey.equals(valueKey)) {      Env.setContext(m_ctx,m_WindowNo,parentKey,valueKey);    }  }  StringBuffer where=new StringBuffer("");  if (m_whereClause.length() > 0) {    where.append(" WHERE ");    if (m_whereClause.indexOf('@') == -1)     where.append(m_whereClause); else {      String context=Env.parseContext(m_ctx,m_WindowNo,m_whereClause,false);      if (context != null && context.trim().length() > 0) {        where.append(context);      } else {        log.log(Level.WARNING,"Failed to parse where clause. whereClause=" + m_whereClause);        where.append(" 1 = 2 ");      }    }  }  if (m_onlyCurrentRows && m_TabNo == 0) {    if (where.toString().indexOf(" WHERE ") == -1)     where.append(" WHERE "); else     where.append(" AND ");    where.append("(Processed='N' OR Updated>");    where.append("SysDate-1");    where.append(")");  }  m_SQL=m_SQL_Select + where.toString();  m_SQL_Count+=where.toString();  if (m_withAccessControl) {    boolean ro=MRole.SQL_RO;    m_SQL=MRole.getDefault(m_ctx,false).addAccessSQL(m_SQL,m_tableName,MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);    m_SQL_Count=MRole.getDefault(m_ctx,false).addAccessSQL(m_SQL_Count,m_tableName,MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  }  if (!m_orderClause.equals("")) {    m_SQL+=" ORDER BY " + m_orderClause;  }  log.fine(m_SQL_Count);  Env.setContext(m_ctx,m_WindowNo,m_TabNo,GridTab.CTX_SQL,m_SQL);  return m_SQL;}  }
class C{  public TheoryBuilder2(final Supplier<Strategy> state,final Source<A> as,Source<B> bs,BiPredicate<A,B> assumptions){  this.state=state;  this.as=as;  this.bs=bs;  this.assumptions=assumptions;}  }
class C{  public int removeElement(int[] A,int elem){  if (A == null || A.length == 0)   return 0;  int i=0;  int j=A.length;  while (i < j) {    if (A[i] == elem) {      A[i]=A[j - 1];      j--;    } else     i++;  }  return j;}  }
class C{  public ParsedDescribeQuery(String sourceString,TupleExpr tupleExpr,Map<String,String> namespaces){  super(sourceString,tupleExpr,namespaces);}  }
class C{  public void orderStatus(int orderId,String status,int filled,int remaining,double avgFillPrice,int permId,int parentId,double lastFillPrice,int clientId,String whyHeld){  try {    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(new Integer(orderId));    if (null == transientInstance) {      error(orderId,3170,"Warning Order not found for Order Key: " + orderId + " make sure Client ID: "+ 0+ " is not the master in TWS. On orderStatus update.");      return;    }    boolean changed=false;    if (CoreUtils.nullSafeComparator(transientInstance.getStatus(),status.toUpperCase()) != 0) {      transientInstance.setStatus(status.toUpperCase());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientInstance.getWhyHeld(),whyHeld) != 0) {      transientInstance.setWhyHeld(whyHeld);      changed=true;    }    if (CoreUtils.nullSafeComparator(new Integer(filled),transientInstance.getFilledQuantity()) == 1) {      if (filled > 0) {        transientInstance.setAverageFilledPrice(new BigDecimal(avgFillPrice));        transientInstance.setFilledQuantity(filled);        changed=true;      }    }    if (changed) {      transientInstance.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      transientInstance.setStatus(status.toUpperCase());      transientInstance.setWhyHeld(whyHeld);      _log.debug("Order Status changed. Status: " + status);      TWSBrokerModel.logOrderStatus(orderId,status,filled,remaining,avgFillPrice,permId,parentId,lastFillPrice,clientId,whyHeld);      boolean isFilled=transientInstance.getIsFilled();      TradeOrder updatedOrder=m_tradePersistentModel.persistTradeOrder(transientInstance);      if (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {        this.fireTradeOrderCancelled(updatedOrder);      } else {        this.fireTradeOrderStatusChanged(updatedOrder);        if (updatedOrder.getIsFilled() && !isFilled)         this.fireTradeOrderFilled(updatedOrder);      }    }  } catch (  Exception ex) {    error(orderId,3100,"Errors updating open order status: " + ex.getMessage());  }}  }
class C{  public void entering(String sourceClass,String sourceMethod,Object param1){  logp(Level.FINER,sourceClass,sourceMethod,"ENTRY {0}",param1);}  }
class C{  private String prepareWriteStatement(){  Collection<String> cols=persistenceSettings.getTableColumns();  StringBuilder colsList=new StringBuilder();  StringBuilder questionsList=new StringBuilder();  for (  String column : cols) {    if (colsList.length() != 0) {      colsList.append(", ");      questionsList.append(",");    }    colsList.append("\"").append(column).append("\"");    questionsList.append("?");  }  String statement="insert into \"" + persistenceSettings.getKeyspace() + "\".\"%1$s"+ "\" ("+ colsList+ ") values ("+ questionsList+ ")";  if (persistenceSettings.getTTL() != null)   statement+=" using ttl " + persistenceSettings.getTTL();  return statement + ";";}  }
class C{  @Override public void reload(){  try {    loadConfig();    opsList.load();    whitelist.load();    nameBans.load();    ipBans.load();    craftingManager.resetRecipes();    loadPlugins();    enablePlugins(PluginLoadOrder.STARTUP);    enablePlugins(PluginLoadOrder.POSTWORLD);  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Uncaught error while reloading",ex);  }}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2,byte[] data){  this(cla,ins,p1,p2,data,0,arrayLength(data),0);}  }
class C{  public static boolean isRejecting(String string){  return match(string,new String[]{"off","false","no","deny","negative","disable","disabled","reject","rejected"});}  }
class C{  public static int nextPrime(int desiredCapacity){  int i=Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  public FastStringBuffer(int initChunkBits,int maxChunkBits,int rebundleBits){  if (DEBUG_FORCE_INIT_BITS != 0)   initChunkBits=DEBUG_FORCE_INIT_BITS;  if (DEBUG_FORCE_FIXED_CHUNKSIZE)   maxChunkBits=initChunkBits;  m_array=new char[16][];  if (initChunkBits > maxChunkBits)   initChunkBits=maxChunkBits;  m_chunkBits=initChunkBits;  m_maxChunkBits=maxChunkBits;  m_rebundleBits=rebundleBits;  m_chunkSize=1 << (initChunkBits);  m_chunkMask=m_chunkSize - 1;  m_array[0]=new char[m_chunkSize];}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public static File createTempDir(){  return createTempDir(new File(System.getProperty("java.io.tmpdir")));}  }
class C{  public Vertex parseFormula(Vertex formula,TextStream stream,boolean debug,Network network){  Map<String,Map<String,Vertex>> elements=buildElementsMap(network);  return parseFormula(formula,stream,elements,debug,network);}  }
class C{  private void startupSocket(InetAddress dstAddress,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  if (localPort < 0 || localPort > 65535) {    throw new IllegalArgumentException("Local port out of range: " + localPort);  }  InetAddress addr=localAddress == null ? Inet4Address.ANY : localAddress;synchronized (this) {    impl.create(streaming);    isCreated=true;    try {      if (!streaming || !usingSocks()) {        impl.bind(addr,localPort);      }      isBound=true;      impl.connect(dstAddress,dstPort);      isConnected=true;      cacheLocalAddress();    } catch (    IOException e) {      impl.close();      throw e;    }  }}  }
class C{  @NotNull public static List<SQFString> findAllStrings(@NotNull Project project,@NotNull Module module,@NotNull String quoteText){  List<SQFString> result=new ArrayList<>();  Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,SQFFileType.INSTANCE,module.getModuleContentScope());  for (  VirtualFile virtualFile : files) {    PsiFile file=PsiManager.getInstance(project).findFile(virtualFile);    if (!(file instanceof SQFFile)) {      continue;    }    SQFFile sqfFile=(SQFFile)file;    ArrayList<SQFString> strings=PsiUtil.findDescendantElementsOfInstance(sqfFile,SQFString.class,null);    if (strings == null) {      continue;    }    for (    SQFString string : strings) {      if (string.getText().equals(quoteText)) {        result.add(string);      }    }  }  return result;}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (U.compareAndSwapLong(this,STATE,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          U.compareAndSwapLong(this,STATE,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          U.compareAndSwapLong(this,STATE,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  protected synchronized void notifyListenersFoundURI(String uri,String method,FetchStatus status){  for (  SpiderListener l : listeners) {    l.foundURI(uri,method,status);  }}  }
class C{  public void removeAttribute(String name){  int i=names.indexOf(name);  if (i != -1) {    names.remove(i);    types.remove(i);    values.remove(i);  }}  }
class C{  @Override public final boolean delete(DBIDRef id){  O obj=relation.get(id);  IndexTreePath<DeLiCluEntry> deletionPath=findPathToObject(getRootPath(),obj,id);  if (deletionPath == null) {    return false;  }  deletePath(deletionPath);  return true;}  }
class C{  public static AdvancedInvite createInvite(Channel chan,InviteDuration duration,int maxUses,boolean temporary){  JDA jda=chan.getJDA();  if (!chan.checkPermission(jda.getSelfInfo(),Permission.CREATE_INSTANT_INVITE))   throw new PermissionException(Permission.CREATE_INSTANT_INVITE);  maxUses=Math.max(0,maxUses);  JSONObject object=((JDAImpl)jda).getRequester().post(Requester.DISCORD_API_PREFIX + "channels/" + chan.getId()+ "/invites",new JSONObject().put("max_age",duration.getDuration()).put("temporary",temporary).put("max_uses",maxUses)).getObject();  if (object != null && object.has("code")) {    return AdvancedInvite.fromJson(object,jda);  }  return null;}  }
class C{  public boolean hasMatching(FluidStack stack){  final FluidStack s=get();  if (stack == null) {    return s == null;  } else {    if (s != null)     return stack.isFluidEqual(s);  }  return true;}  }
class C{  @Override public int incrementSecondValue(int key,int delta){  return readerAccessibleInfo.array.incrementEntry(getKeyPosition(key,readerAccessibleInfo) + 2,delta);}  }
class C{  public int size(){  return entrySet().size();}  }
class C{  public SentenceUpdateResultSet(int iUpdateCount){  m_iUpdateCount=iUpdateCount;}  }
class C{  public void clearPath(){  if (mCachedPath != null)   mCachedPath.rewind();}  }
class C{  public final void push(final Object value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public static double pnorm(double x){  return Statistics.normalProbability(x);}  }
class C{  private int releaseResourcesForHost(String host){  int numReleasedResources=0;  List<SamzaResource> samzaResources=allocatedResources.get(host);  if (samzaResources != null) {    for (    SamzaResource resource : samzaResources) {      log.info("Releasing extra resource {} allocated on {}",resource.getResourceID(),host);      manager.releaseResources(resource);      numReleasedResources++;    }  }  return numReleasedResources;}  }
class C{  public Joiner createReverse() throws IOException {  return create(getToTable(),getFromTable());}  }
class C{  public SieveRepositoryException(Throwable cause){  super(cause);}  }
class C{  protected void sequence_TypeVariable(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private byte[] generateDerivedKey(){  byte[] digestBytes=new byte[digest.getDigestSize()];  digest.update(password,0,password.length);  digest.update(salt,0,salt.length);  digest.doFinal(digestBytes,0);  for (int i=1; i < iterationCount; i++) {    digest.update(digestBytes,0,digestBytes.length);    digest.doFinal(digestBytes,0);  }  return digestBytes;}  }
class C{  public void shuffle(java.util.Random random){  int[] objs=this.objs;  int numObjs=this.numObjs;  int obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  private void updateBillingResult(String tkey,String billingResultXml) throws Exception {  if (updateBillingResultByTkey(TABLE_BILLINGRESULT,tkey,"resultxml",billingResultXml) < 1) {    String message="The update billingresult with tkey '%s' failed.";    throw new Exception(String.format(message,tkey));  }}  }
class C{  @Override protected boolean shouldCloseConnection(final HttpConnection conn){  if (getStatusCode() == HttpStatus.SC_OK) {    Header connectionHeader=null;    if (!conn.isTransparent()) {      connectionHeader=getResponseHeader("proxy-connection");    }    if (connectionHeader == null) {      connectionHeader=getResponseHeader("connection");    }    if (connectionHeader != null) {      if (connectionHeader.getValue().equalsIgnoreCase("close")) {        if (LOG.isWarnEnabled()) {          LOG.warn("Invalid header encountered '" + connectionHeader.toExternalForm() + "' in response "+ getStatusLine().toString());        }      }    }    return false;  } else {    return super.shouldCloseConnection(conn);  }}  }
class C{  public boolean isBatch(){  return m_batch;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void updateAsciiStream(String columnLabel,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  protected PagesOption(OptionSet set,String name,String desc,int defaultPages){  super(set,PAGES_OPTION,name,desc);  this.value=this.defaultValue=defaultPages;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("DeleteAllBkptsTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  Method method=findMethod(targetClass,"gus","()V");  if (method == null) {    throw new IllegalArgumentException("Bad method name/signature");  }  BreakpointRequest request=erm.createBreakpointRequest(method.location());  try {    erm.deleteAllBreakpoints();  } catch (  InternalException ee) {    failure("FAIL: Unexpected Exception encountered: " + ee);  }  listenUntilVMDisconnect();  if (!testFailed) {    println("DeleteAllBkptsTest: passed");  } else {    throw new Exception("DeleteAllBkptsTest: failed");  }}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public LTMatrixF(String mname,int nrows){  super(mname,nrows);}  }
class C{  public static int[] readInts(){  return new In().readAllInts();}  }
class C{  public String readString(Encoding encoding) throws IOException {  byte[] buffer=readBuffer();  return encoding.decodeFromCharset(buffer);}  }
class C{  private void initialize(String schema){  channelTable=new Table(schema,TABLE_NAME);  shardId=new Column(SHARD_ID_COL,Types.VARCHAR,128,true);  channel=new Column(CHANNEL_COL,Types.INTEGER);  Key shardKey=new Key(Key.Primary);  shardKey.AddColumn(shardId);  channelTable.AddColumn(shardId);  channelTable.AddColumn(channel);  channelTable.AddKey(shardKey);  select="SELECT " + SHARD_ID_COL + ", "+ CHANNEL_COL+ " FROM "+ schema+ "."+ TABLE_NAME+ " ORDER BY "+ SHARD_ID_COL;  selectMax="SELECT MAX(" + CHANNEL_COL + ") FROM "+ schema+ "."+ TABLE_NAME;}  }
class C{  MessageOutputStream(int size,DNSOutgoing out){  this(size,out,0);}  }
class C{  protected ReadArgumentNode(){  index=0;}  }
class C{  public final void addExceptions(Collection<? extends Throwable> ex){  getExceptions().addAll(ex);}  }
class C{  public BlockletBTreeLeafNode(BTreeBuilderInfo builderInfos,int leafIndex,long nodeNumber){  BlockletMinMaxIndex minMaxIndex=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getBlockletIndex().getMinMaxIndex();  maxKeyOfColumns=minMaxIndex.getMaxValues();  minKeyOfColumns=minMaxIndex.getMinValues();  numberOfKeys=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getNumberOfRows();  dimensionChunksReader=new CompressedDimensionChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getDimensionColumnChunk(),builderInfos.getDimensionColumnValueSize(),builderInfos.getFooterList().get(0).getTableBlockInfo().getFilePath());  ValueCompressionModel valueCompressionModel=CarbonUtil.getValueCompressionModel(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk());  measureColumnChunkReader=new CompressedMeasureChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk(),valueCompressionModel,builderInfos.getFooterList().get(0).getTableBlockInfo().getFilePath());  this.nodeNumber=nodeNumber;}  }
class C{  public void handleManagerCreation() throws ManagementException {  if (!isServiceInitialised("handleManagerCreation")) {    return;  }  ObjectName managerMBeanName=MBeanJMXAdapter.getManagerName();  ManagerMBeanBridge bridge=new ManagerMBeanBridge(service);  ManagerMXBean bean=new ManagerMBean(bridge);  service.registerInternalMBean(bean,managerMBeanName);}  }
class C{  public Response onCommand(SMTPSession session,Request request){  return NOT_SUPPORTED;}  }
class C{  public Object storedData(){  return stored;}  }
class C{  public String createDefaultDescription(final List<GitCommit> commits){  if (commits == null || commits.isEmpty()) {    return StringUtils.EMPTY;  }  if (commits.size() == 1) {    final GitCommit commit=commits.get(0);    if (commit.getFullMessage().length() > CreatePullRequestModel.MAX_SIZE_DESCRIPTION) {      return commit.getFullMessage().substring(0,CreatePullRequestModel.MAX_SIZE_DESCRIPTION - 5) + "...";    }    return commit.getFullMessage();  }  final StringBuilder descBuilder=new StringBuilder();  final String lineSeparator=System.getProperty("line.separator");  final int descCommitsLimit=10;  for (int i=0; i < descCommitsLimit && i < commits.size(); ++i) {    final GitCommit commit=commits.get(i);    descBuilder.append("-").append(commit.getSubject()).append(lineSeparator);  }  if (commits.size() > descCommitsLimit) {    descBuilder.append("...");  }  return descBuilder.length() < CreatePullRequestModel.MAX_SIZE_DESCRIPTION ? descBuilder.toString() : descBuilder.substring(0,CreatePullRequestModel.MAX_SIZE_DESCRIPTION - 10);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.270 -0500",hash_original_method="F7B19A9596841ACD8A98EA48656877B1",hash_generated_method="79A6092D9718A068C6448484EC593839") public boolean op(int left,int top,int right,int bottom,Op op){  addTaintLocal(left + right + top+ bottom+ op.nativeInt);  return getTaintBoolean();}  }
class C{  public static int floatSubG(float f1,float f2){  if (f1 == f2) {    ConstantPoolManager.getInstance().addDynamicConstant(f1);    return 0;  } else {    if (Float.isNaN(f1) || Float.isNaN(f2)) {      return 1;    }    return floatSubHelper(f1,f2);  }}  }
class C{  public HttpURL(final String user,final String password,final String host,final int port,final String path) throws URIException {  this(user,password,host,port,path,null,null);}  }
class C{  synchronized void initmessage(XNetReply l){  int oldState=internalState;  message(l);  internalState=oldState;}  }
class C{  private boolean isUserAnAdmin(RequestAndResponse requestAndResponse){  if (loopbackIsAdmin) {    if (isUserALocalAdmin(requestAndResponse)) {      return true;    }  }  stashRequestUser(requestAndResponse);  return requestAndResponse.userIsAdmin && !requestAndResponse.userIsAccountClosed;}  }
class C{  public static void main(String[] args){  System.setProperty("spring.config.name","accounts-server");  SpringApplication.run(AccountsServer.class,args);}  }
class C{  public static void forceGC(){  WeakReference<Object> dumbReference=new WeakReference<>(new Object());  while (dumbReference.get() != null) {    System.gc();    try {      Thread.sleep(500);    } catch (    InterruptedException e) {    }  }}  }
class C{  public WmsGetMapUrlFactory(WmsLayerConfig config){  if (config == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingConfig"));  }  if (config.serviceAddress == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingServiceAddress"));  }  if (config.wmsVersion == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingVersion"));  }  if (config.layerNames == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingLayerNames"));  }  if (config.coordinateSystem == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingCoordinateSystem"));  }  this.serviceAddress=config.serviceAddress;  this.wmsVersion=config.wmsVersion;  this.layerNames=config.layerNames;  this.styleNames=config.styleNames;  this.coordinateSystem=config.coordinateSystem;  this.transparent=config.transparent;  this.timeString=config.timeString;}  }
class C{  private static boolean isTainted(Object o){  try {    checkTypeSafe(o);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  private void verifyBlockSnapshotResults() throws Exception {  log.info("Verifying updated BlockSnapshot results for RecoverPointConsistencyGroupMigration.");  for (  URI blockSnapshotURI : rpTestBlockSnapshotURIs) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockSnapshotURI);    Volume parentVolume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());    URI rpCgUri=parentVolume.fetchConsistencyGroupUriByType(_dbClient,Types.RP);    Assert.assertTrue("The block snapshot consistency group MUST match the parent volume's consistency group.",snapshot.fetchConsistencyGroup().equals(rpCgUri));  }}  }
class C{  static void verifyDeterministic(ProtoCoder<?> coder) throws NonDeterministicException {  Class<? extends Message> message=coder.getMessageType();  ExtensionRegistry registry=coder.getExtensionRegistry();  Set<Descriptor> descriptors=getRecursiveDescriptorsForClass(message,registry);  for (  Descriptor d : descriptors) {    for (    FieldDescriptor fd : d.getFields()) {      if (fd.isMapField()) {        String reason=String.format("Protocol Buffers message %s transitively includes Map field %s (from file %s)." + " Maps cannot be deterministically encoded.",message.getName(),fd.getFullName(),fd.getFile().getFullName());        throw new NonDeterministicException(coder,reason);      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof RequestedTransportAttribute))   return false;  if (obj == this)   return true;  RequestedTransportAttribute att=(RequestedTransportAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.transportProtocol != transportProtocol)   return false;  return true;}  }
class C{  public boolean isScanning(){  return isScanning;}  }
class C{  private static void d_uarsqkp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  for (int i=rl, aix=rl * n, cix=rl * 2; i < ru; i++, aix+=n, cix+=2) {    kbuff.set(0,0);    sumSq(a,aix,n,kbuff,kplusSq);    c[cix + 0]=kbuff._sum;    c[cix + 1]=kbuff._correction;  }}  }
class C{  public static void main(String[] args){  String[][] board=getBoard();  String[] tokens={" X "," O "};  int result;  do {    print(board);    int[] cell=getCell(board,tokens[0]);    placeToken(board,cell,tokens[0]);    result=gameStatus(board,tokens[0]);    if (result == 2) {      swap(tokens);    }  } while (result == 2);  print(board);  if (result == 0)   System.out.println(tokens[0] + "player won"); else   System.out.println("Players draw");}  }
class C{  public double cdf(int k){  if (k < 0)   return 0.0;  if (k >= cdf.length - 1)   return 1.0;  return cdf[k];}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty("sun.security.krb5.msinterop.des.s2kcharset","utf-8");  test();}  }
class C{  public String formatParams(Map<String,DynamicMBeanParam> params,boolean includeDescription){  return formatParams(params,includeDescription,false,null);}  }
class C{  public static List<ECMInfo> computeAllEntitiesECMInfo(List<Entity> entities){  Comparator<ECMInfo> ecmComparator;  ecmComparator=new ECMInfo.ECCMComparator();  ArrayList<ECMInfo> allEcmInfo=new ArrayList<ECMInfo>(entities.size());  ArrayList<ECMInfo> allEccmInfo=new ArrayList<ECMInfo>(entities.size());  LinkedList<ECMInfo> eccmToRemove=new LinkedList<ECMInfo>();  IGame game=null;  for (  Entity e : entities) {    ECMInfo ecmInfo=e.getECMInfo();    if (ecmInfo != null) {      allEcmInfo.add(ecmInfo);    }    ECMInfo eccmInfo=e.getECCMInfo();    if (eccmInfo != null) {      allEcmInfo.add(eccmInfo);      allEccmInfo.add(eccmInfo);    }    if (game == null) {      game=e.getGame();    }  }  if ((entities.size() < 1) || (game == null)) {    return allEcmInfo;  }  for (  SmokeCloud cloud : game.getSmokeCloudList()) {    if (cloud.getSmokeLevel() == SmokeCloud.SMOKE_CHAFF_LIGHT) {      for (      Coords c : cloud.getCoordsList()) {        ECMInfo ecmInfo=new ECMInfo(1,c,null,1,0);        allEcmInfo.add(ecmInfo);      }    }  }  Collections.sort(allEcmInfo,ecmComparator);  Collections.reverse(allEcmInfo);  if (game.getOptions().booleanOption("tacops_eccm") && allEccmInfo.size() > 0) {    Iterator<ECMInfo> ecmIterator=allEcmInfo.iterator();    Iterator<ECMInfo> eccmIterator;    while (ecmIterator.hasNext()) {      ECMInfo ecmInfo=ecmIterator.next();      if (ecmInfo.isECCM()) {        continue;      }      eccmIterator=allEccmInfo.iterator();      boolean ecmNegated=false;      while (eccmIterator.hasNext() && !ecmNegated) {        ECMInfo eccmInfo=eccmIterator.next();        if (!eccmInfo.isOpposed(ecmInfo)) {          continue;        }        int dist=eccmInfo.getPos().distance(ecmInfo.getPos());        if (dist <= eccmInfo.getRange()) {          if (!ecmInfo.isAngelECM() && eccmInfo.isAngelECCM()) {            ecmIterator.remove();            ecmNegated=true;          } else           if (eccmInfo.getAngelECCMStrength() >= ecmInfo.getAngelECMStrength()) {            ecmIterator.remove();            eccmIterator.remove();            ecmNegated=true;            eccmToRemove.add(eccmInfo);          } else           if (!ecmInfo.isAngelECM() && (eccmInfo.getECCMStrength() >= ecmInfo.getECMStrength())) {            ecmIterator.remove();            eccmIterator.remove();            ecmNegated=true;            eccmToRemove.add(eccmInfo);          }        }      }    }    allEcmInfo.removeAll(eccmToRemove);  }  return allEcmInfo;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.101 -0400",hash_original_method="0B5E89E9EEAC4DA5231277484777323A",hash_generated_method="9C7032DBDD4887024700982A31926829") synchronized void cleanNativeAfterShutoffBluetooth(){  mAdapterProperties.clear();  disableNative();}  }
class C{  @Override public boolean writeSorted(){  return false;}  }
class C{  public void applyForce(Point2D force,Point2D point){  applyBodyForce(physicsWorld.toVector(force),physicsWorld.toPoint(point));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (hasNoBody: ");  result.append(hasNoBody);  result.append(", declaredMemberAccessModifier: ");  result.append(declaredMemberAccessModifier);  result.append(')');  return result.toString();}  }
class C{  public Object nextObject(Random rnd,boolean allowNull){  int[] types=randomType;  int range=types.length;  if (!allowNull)   range--;  int type=types[rnd.nextInt(range)];  return nextObject(rnd,type,allowNull);}  }
class C{  public static byte lowByte(int wd){  return Integer.valueOf(0xff & wd).byteValue();}  }
class C{  public KernelPCA(KernelTrick k,DataSet ds,int dimensions,int basisSize,Nystrom.SamplingMethod samplingMethod){  this(k,dimensions,basisSize,samplingMethod);  fit(ds);}  }
class C{  protected void sequence_Pragma(ISerializationContext context,Pragma semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.PRAGMA__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.PRAGMA__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getPragmaAccess().getNameIDTerminalRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public long elapsedTime(){  return endTime() - startTime();}  }
class C{  public MyStringBuilder2 toUpperCase(){  String newStr="";  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')     newStr+=(char)(s.charAt(i) - 32) + ""; else     newStr+=s.charAt(i) + "";  }  return new MyStringBuilder2(newStr);}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  private static void parseInstruction(final Matcher matcher,final MachineState state,final int lineNumber,final List<Validator> validators) throws ParseException {  final String name=matcher.group("name");  if (name == null) {    return;  }  final Instruction instruction=EMITTER_MAP.getOrDefault(name,EMITTER_MISSING).compile(matcher,lineNumber,validators);  state.lineNumbers.put(state.instructions.size(),lineNumber);  state.instructions.add(instruction);}  }
class C{  @Override public long crawl() throws Exception {  LOG.info("queue size is " + processQueue.size());  while (processQueue.isEmpty()) {    if (flag == INITIALIZED) {      readAndCacheLastProcessedDate();    }    if (flag == BEFORETODAY) {      updateProcessDate();      clearProcessedJobFileNames();    }    if (flag != TODAY) {      advanceOneDay();    }    if (isToday()) {      flag=TODAY;    } else {      flag=BEFORETODAY;    }    List<String> serialNumbers=jhfLCM.readSerialNumbers(this.processDate.year,getActualMonth(processDate.month),this.processDate.day);    List<Pair<Long,String>> allJobHistoryFiles=new LinkedList<>();    for (    String serialNumber : serialNumbers) {      List<Pair<Long,String>> jobHistoryFiles=jhfLCM.readFileNames(this.processDate.year,getActualMonth(processDate.month),this.processDate.day,Integer.parseInt(serialNumber));      LOG.info("total number of job history files " + jobHistoryFiles.size());      for (      Pair<Long,String> jobHistoryFile : jobHistoryFiles) {        if (jobFilter.accept(jobHistoryFile.getRight()) && !fileProcessed(jobHistoryFile.getRight())) {          allJobHistoryFiles.add(jobHistoryFile);        }      }      jobHistoryFiles.clear();      LOG.info("after filtering, number of job history files " + processQueue.size());    }    Collections.sort(allJobHistoryFiles,null);    for (    Pair<Long,String> jobHistoryFile : allJobHistoryFiles) {      processQueue.add(jobHistoryFile);    }    allJobHistoryFiles.clear();    if (processQueue.isEmpty()) {      Thread.sleep(SLEEP_SECONDS_WHILE_QUEUE_IS_EMPTY * 1000);    } else {      LOG.info("queue size after populating is now : " + processQueue.size());    }  }  Pair<Long,String> item=processQueue.pollFirst();  String jobHistoryFile=item.getRight();  if (jobHistoryFile == null) {    LOG.info("process queue is empty, ignore this round");    return -1;  }  Pattern p=Pattern.compile("^job_[0-9]+_([0-9]+)[0-9]{3}[_-]{1}");  Matcher m=p.matcher(jobHistoryFile);  String serialNumber;  if (m.find()) {    serialNumber=m.group(1);  } else {    LOG.warn("illegal job history file name : " + jobHistoryFile);    return -1;  }  jhfLCM.readFileContent(processDate.year,getActualMonth(processDate.month),processDate.day,Integer.valueOf(serialNumber),jobHistoryFile,reader);  JobHistoryZKStateManager.instance().addProcessedJob(String.format(FORMAT_JOB_PROCESS_DATE,this.processDate.year,this.processDate.month + 1,this.processDate.day),jobHistoryFile);  processedJobFileNames.add(jobHistoryFile);  jobCountMetricsGenerator.flush(String.format(FORMAT_JOB_PROCESS_DATE,this.processDate.year,this.processDate.month + 1,this.processDate.day),this.processDate.year,this.processDate.month,this.processDate.day);  Long modifiedTime=item.getLeft();  return modifiedTime;}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  public Element store(Object o){  MatrixSignalMast p=(MatrixSignalMast)o;  Element e=new Element("signalmast");  e.setAttribute("class",this.getClass().getName());  e.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,e);  Element unlit=new Element("unlit");  if (p.allowUnLit()) {    unlit.setAttribute("allowed","yes");    unlit.addContent(new Element("bitString").addContent(p.getUnLitChars()));  } else {    unlit.setAttribute("allowed","no");  }  e.addContent(unlit);  List<String> outputs=p.getOutputs();  Element outps=new Element("outputs");  int i=1;  for (  String _output : outputs) {    String key=("output" + i);    Element outp=new Element("output");    outp.setAttribute("matrixCol",key);    outp.addContent(p.getOutputName(i));    outps.addContent(outp);    i++;  }  if (outputs.size() != 0) {    e.addContent(outps);  }  SignalAppearanceMap appMap=p.getAppearanceMap();  if (appMap != null) {    Element bss=new Element("bitStrings");    java.util.Enumeration<String> aspects=appMap.getAspects();    while (aspects.hasMoreElements()) {      String key=aspects.nextElement();      Element bs=new Element("bitString");      bs.setAttribute("aspect",key);      bs.addContent(p.getBitstring(key));      bss.addContent(bs);    }    e.addContent(bss);  }  List<String> disabledAspects=p.getDisabledAspects();  if (disabledAspects != null) {    Element el=new Element("disabledAspects");    for (    String aspect : disabledAspects) {      Element ele=new Element("disabledAspect");      ele.addContent(aspect);      el.addContent(ele);    }    if (disabledAspects.size() != 0) {      e.addContent(el);    }  }  return e;}  }
class C{  public WrapToken_v2(Krb5Context context,InputStream is,MessageProp prop) throws GSSException {  super(Krb5Token.WRAP_ID_v2,context,is,prop);  this.privacy=prop.getPrivacy();}  }
class C{  private static double newtonRaphsonRootFind(Point2D.Double[] Q,Point2D.Double P,double u){  double numerator, denominator;  Point2D.Double[] Q1=new Point2D.Double[3], Q2=new Point2D.Double[2];  Point2D.Double Q_u, Q1_u, Q2_u;  double uPrime;  int i;  Q_u=bezierII(3,Q,u);  for (i=0; i <= 2; i++) {    Q1[i]=new Point2D.Double((Q[i + 1].x - Q[i].x) * 3.0,(Q[i + 1].y - Q[i].y) * 3.0);  }  for (i=0; i <= 1; i++) {    Q2[i]=new Point2D.Double((Q1[i + 1].x - Q1[i].x) * 2.0,(Q1[i + 1].y - Q1[i].y) * 2.0);  }  Q1_u=bezierII(2,Q1,u);  Q2_u=bezierII(1,Q2,u);  numerator=(Q_u.x - P.x) * (Q1_u.x) + (Q_u.y - P.y) * (Q1_u.y);  denominator=(Q1_u.x) * (Q1_u.x) + (Q1_u.y) * (Q1_u.y) + (Q_u.x - P.x) * (Q2_u.x) + (Q_u.y - P.y) * (Q2_u.y);  uPrime=u - (numerator / denominator);  return (uPrime);}  }
class C{  public final LC insetsAll(String allSides){  UnitValue insH=ConstraintParser.parseUnitValue(allSides,true);  UnitValue insV=ConstraintParser.parseUnitValue(allSides,false);  insets=new UnitValue[]{insV,insH,insV,insH};  return this;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static boolean isPropertyVisibleToRead(JClassType voClass,JField field,boolean allowProtected){  if (field.isPublic() || (allowProtected && field.isProtected())) {    return true;  } else {    return hasGetMethod(field,voClass);  }}  }
class C{  public void stop(boolean forcedDisconnect,boolean stopForReconnect,boolean waitForDisconnect){  final boolean isDebugEnabled=logger.isDebugEnabled();  this.stoppedForReconnect=stopForReconnect;  this.forcedDisconnect=forcedDisconnect;  if (this.server.isShuttingDown()) {    if (!stopForReconnect && waitForDisconnect) {      long endOfWait=System.currentTimeMillis() + 60000;      if (isDebugEnabled && this.server.isAlive()) {        logger.debug("sleeping to wait for the locator server to shut down...");      }      while (this.server.isAlive() && System.currentTimeMillis() < endOfWait) {        try {          Thread.sleep(500);        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();          return;        }      }      if (isDebugEnabled) {        if (this.server.isAlive()) {          logger.debug("60 seconds have elapsed waiting for the locator server to shut down - terminating wait and returning");        } else {          logger.debug("the locator server has shut down");        }      }    }    return;  }  if (this.locatorDiscoverer != null) {    this.locatorDiscoverer.stop();    this.locatorDiscoverer=null;  }  if (this.server.isAlive()) {    logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_STOPPING__0,this));    try {      new TcpClient().stop(this.bindAddress,getPort());    } catch (    ConnectException ignore) {    }    boolean interrupted=Thread.interrupted();    try {      this.server.join(TcpServer.SHUTDOWN_WAIT_TIME * 1000 + 10000);    } catch (    InterruptedException ex) {      interrupted=true;      logger.warn(LocalizedMessage.create(LocalizedStrings.InternalLocator_INTERRUPTED_WHILE_STOPPING__0,this),ex);    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }    if (this.server.isAlive()) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.InternalLocator_COULD_NOT_STOP__0__IN_60_SECONDS,this));    }  }  removeLocator(this);  handleShutdown();  logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_0__IS_STOPPED,this));  if (stoppedForReconnect) {    if (this.myDs != null) {      launchRestartThread();    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int size(){  return QUEUE.get().size();}  }
class C{  private void isiDeleteSnapshotSchedules(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  StringSet policies=args.getFs().getFilePolicies();  for (  String policy : policies) {    SchedulePolicy fp=_dbClient.queryObject(SchedulePolicy.class,URI.create(policy));    String snapshotScheduleName=fp.getPolicyName() + "_" + args.getFsName();    isi.deleteSnapshotSchedule(snapshotScheduleName);  }}  }
class C{  private void handleCacheDistributionAdvisee(CacheDistributionAdvisee cda,String adviseePath,boolean removeProfile,boolean exchangeProfiles,boolean isRealRegion,final List<Profile> replyProfiles){  if (cda != null) {    handleDistributionAdvisee(cda,removeProfile,isRealRegion && exchangeProfiles,replyProfiles);    if (logger.isDebugEnabled()) {      logger.debug("While processing UpdateAttributes message, handled advisee: {}",cda);    }  } else {    if (logger.isDebugEnabled()) {      logger.debug("While processing UpdateAttributes message, region not found: {}",adviseePath);    }  }}  }
class C{  private void namespace(OutputNode node){  if (primary != null) {    String reference=primary.reference();    node.setReference(reference);  }}  }
class C{  public FeatureSet(Map<String,List<Feature>> featureSet){  super(featureSet);  POSPrefixes=this.keySet().toArray(new String[0]);  Arrays.sort(POSPrefixes);}  }
class C{  @SuppressWarnings("deprecation") private void initPlaybackControls(){  mPageContainer=(FrameLayout)findViewById(R.id.audio_player_pager_container);  mPageContainer.setBackgroundDrawable(mResources.getDrawable("audio_player_pager_container"));  mAudioPlayerHeader=(LinearLayout)findViewById(R.id.audio_player_header);  mAudioPlayerHeader.setOnClickListener(mOpenAlbumProfile);  final FrameLayout mSwitch=(FrameLayout)findViewById(R.id.audio_player_switch);  mSwitch.setOnClickListener(mToggleHiddenPanel);  mPagerAdapter=new PagerAdapter(this);  mPagerAdapter.add(QueueFragment.class,null);  ViewPager mViewPager=(ViewPager)findViewById(R.id.audio_player_pager);  mViewPager.setAdapter(mPagerAdapter);  mViewPager.setOffscreenPageLimit(mPagerAdapter.getCount() - 1);  mPlayPauseButton=(PlayPauseButton)findViewById(R.id.action_button_play);  mShuffleButton=(ShuffleButton)findViewById(R.id.action_button_shuffle);  mRepeatButton=(RepeatButton)findViewById(R.id.action_button_repeat);  RepeatingImageButton mPreviousButton=(RepeatingImageButton)findViewById(R.id.action_button_previous);  RepeatingImageButton mNextButton=(RepeatingImageButton)findViewById(R.id.action_button_next);  mTrackName=(TextView)findViewById(R.id.audio_player_track_name);  mArtistName=(TextView)findViewById(R.id.audio_player_artist_name);  mAlbumArt=(ImageView)findViewById(R.id.audio_player_album_art);  mAlbumArtSmall=(ImageView)findViewById(R.id.audio_player_switch_album_art);  mCurrentTime=(TextView)findViewById(R.id.audio_player_current_time);  mTotalTime=(TextView)findViewById(R.id.audio_player_total_time);  mQueueSwitch=(ImageView)findViewById(R.id.audio_player_switch_queue);  mQueueSwitch.setImageDrawable(mResources.getDrawable("btn_switch_queue"));  mProgress=(SeekBar)findViewById(android.R.id.progress);  mPreviousButton.setRepeatListener(mRewindListener);  mNextButton.setRepeatListener(mFastForwardListener);  mProgress.setOnSeekBarChangeListener(this);}  }
class C{  void visitAndBreakModifiers(ModifiersTree modifiers,Direction annotationDirection,Optional<BreakTag> declarationAnnotationBreak){  builder.addAll(visitModifiers(modifiers,annotationDirection,declarationAnnotationBreak));}  }
class C{  @Override public void removeCancellableChangedListener(final CommandCancellableListener listener){  cancellableChangedListeners.removeListener(listener);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @RequestMapping(value="/announce/{entity}/{cacheKey}/{event}",method={RequestMethod.PUT}) @ResponseBody public void announceWipeCache(@PathVariable String entity,@PathVariable String event,@PathVariable String cacheKey) throws IOException {  cacheService.annouceWipeCache(entity,event,cacheKey);}  }
class C{  public SyncValueMessage(SyncValueMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }  this.responseTo=other.responseTo;}  }
class C{  public static boolean isEmpty(CharSequence cs){  return cs == null || cs.length() == 0;}  }
class C{  public void begin(String header,int bias){  begin();  m_out.print(header);  m_bias=bias;}  }
class C{  private void closeConnectionQuietly(){  if (connection != null) {    try {      connection.disconnect();    } catch (    Exception e) {      Log.e(TAG,"Unexpected error while disconnecting",e);    }    connection=null;  }}  }
class C{  @Override public void onUpdate(ItemStack itemStack,World world,Entity par3Entity,int par4,boolean par5){  super.onUpdate(itemStack,world,par3Entity,par4,par5);  if (!world.isRemote) {    List<TileLauncherPrefab> connectedLaunchers=new ArrayList<TileLauncherPrefab>();    if (this.getLauncherCountDown(itemStack) > 0 || this.getLauncherCount(itemStack) > 0) {      Pos3D position=new Pos3D(par3Entity.posX,par3Entity.posY,par3Entity.posZ);      for (      IBlockFrequency blockFrequency : FrequencyGrid.instance().get(world,position,Settings.MAX_MISSILE_DISTANCE,this.getFrequency(itemStack))) {        if (blockFrequency instanceof TileLauncherPrefab) {          TileLauncherPrefab missileLauncher=(TileLauncherPrefab)blockFrequency;          if (missileLauncher.canLaunch()) {            connectedLaunchers.add(missileLauncher);          }        }      }    }    if (this.getLauncherCountDown(itemStack) > 0 && connectedLaunchers.size() > 0) {      if (this.getLauncherCountDown(itemStack) % 20 == 0) {        ((EntityPlayer)par3Entity).addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.designator.callTime")+ " "+ (int)Math.floor(this.getLauncherCountDown(itemStack) / 20)));      }      if (this.getLauncherCountDown(itemStack) == 1) {        this.setLauncherCount(itemStack,connectedLaunchers.size());        this.setLauncherDelay(itemStack,0);        ((EntityPlayer)par3Entity).addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.designator.blast")));      }      this.setLauncherCountDown(itemStack,this.getLauncherCountDown(itemStack) - 1);    }    if (this.getLauncherCount(itemStack) > 0 && this.getLauncherCount(itemStack) <= connectedLaunchers.size() && connectedLaunchers.size() > 0) {      if (this.getLauncherDelay(itemStack) % 40 == 0) {        System.out.println(connectedLaunchers.get(this.getLauncherCount(itemStack) - 1).getTarget());        connectedLaunchers.get(this.getLauncherCount(itemStack) - 1).launch();        this.setLauncherCount(itemStack,this.getLauncherCount(itemStack) - 1);      }      if (this.getLauncherCount(itemStack) == 0) {        this.setLauncherDelay(itemStack,0);        connectedLaunchers.clear();      }      this.setLauncherDelay(itemStack,this.getLauncherDelay(itemStack) + 1);    }  }}  }
class C{  public IndicesOptions indicesOptions(){  return indicesOptions;}  }
class C{  @Override protected void process(DistributionManager dm){  if (this.interfaces == null || this.interfaces.size() == 0) {  } else {    dm.setEquivalentHosts(this.interfaces);  }  dm.setDistributedSystemId(this.distributedSystemId);  dm.setRedundancyZone(getSender(),this.redundancyZone);  if (this.fromDataProblems != null) {    if (logger.isDebugEnabled()) {      logger.debug(this.fromDataProblems);    }  }  if (this.serializerIds != null) {    for (int i=0; i < serializerIds.length; i++) {      String cName=this.serializerClasseNames[i];      if (cName != null) {        InternalDataSerializer.register(cName,false,null,null,serializerIds[i]);      }    }  }  if (this.instantiatorIds != null) {    for (int i=0; i < instantiatorIds.length; i++) {      String instantiatorClassName=instantiatorClasseNames[i];      String instantiatedClassName=instantiatedClasseNames[i];      int id=instantiatorIds[i];      if ((instantiatorClassName != null) && (instantiatedClassName != null)) {        InternalInstantiator.register(instantiatorClassName,instantiatedClassName,id,false);      }    }  }  dm.processStartupResponse(this.sender,this.rejectionMessage);  StartupMessageReplyProcessor proc=(StartupMessageReplyProcessor)ReplyProcessor21.getProcessor(processorId);  if (proc != null) {    if (this.rejectionMessage != null) {      proc.setReceivedRejectionMessage(true);    } else {      if (!this.responderIsAdmin) {        proc.setReceivedAcceptance(true);      }      proc.process(this);      if (logger.isTraceEnabled(LogMarker.DM)) {        logger.trace(LogMarker.DM,"{} Processed {}",proc,this);      }    }  }}  }
class C{  protected static boolean isConnectedMobile(){  NetworkInfo info=getNetworkInfo();  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  private void drawBtn(Graphics g){  int[] xPoints=new int[3];  int[] yPoints=new int[3];  Color oldColor=g.getColor();  if (minimized) {    xPoints[0]=Math.round((getSize().width - 11) / 2);    yPoints[0]=getSize().height - 10;    xPoints[1]=xPoints[0] + 11;    yPoints[1]=yPoints[0];    xPoints[2]=xPoints[0] + 6;    yPoints[2]=yPoints[0] + 5;  } else {    xPoints[0]=Math.round((getSize().width - 11) / 2);    yPoints[0]=getSize().height - 4;    xPoints[1]=xPoints[0] + 11;    yPoints[1]=yPoints[0];    xPoints[2]=xPoints[0] + 5;    yPoints[2]=yPoints[0] - 5;  }  g.setColor(Color.green.darker().darker());  g.fillRect(0,getSize().height - 14,getSize().width,14);  g.setColor(Color.green.darker());  g.drawLine(0,getSize().height - 14,getSize().width,getSize().height - 14);  g.drawLine(0,getSize().height - 14,0,getSize().height);  g.setColor(Color.black);  g.drawLine(0,getSize().height - 1,getSize().width,getSize().height - 1);  g.drawLine(getSize().width - 1,getSize().height - 14,getSize().width - 1,getSize().height);  g.setColor(Color.yellow);  g.fillPolygon(xPoints,yPoints,3);  if (!minimized) {    g.setColor(Color.black);    g.drawLine(14 - 1,getSize().height - 14,14 - 1,getSize().height);    g.drawLine(getSize().width - 14 - 1,getSize().height - 14,getSize().width - 14 - 1,getSize().height);    g.setColor(Color.green.darker());    g.drawLine(14,getSize().height - 14,14,getSize().height);    g.drawLine(getSize().width - 14,getSize().height - 14,getSize().width - 14,getSize().height);    if (zoom == 0) {      g.setColor(Color.gray.brighter());    } else {      g.setColor(Color.yellow);    }    g.fillRect(3,(getSize().height - 14) + 6,8,2);    if (zoom == (hexSide.length - 1)) {      g.setColor(Color.gray.brighter());    } else {      g.setColor(Color.yellow);    }    g.fillRect((getSize().width - 14) + 3,(getSize().height - 14) + 6,8,2);    g.fillRect((getSize().width - 14) + 6,(getSize().height - 14) + 3,2,8);    if (zoom > 2) {      g.setColor(Color.black);      g.drawLine(28 - 1,getSize().height - 14,28 - 1,getSize().height);      g.setColor(Color.green.darker());      g.drawLine(28,getSize().height - 14,28,getSize().height);      g.setColor(Color.yellow);      String label;switch (heightDisplayMode) {case SHOW_NO_HEIGHT:        label=Messages.getString("MiniMap.NoHeightLabel");      break;case SHOW_GROUND_HEIGHT:    label=Messages.getString("MiniMap.GroundHeightLabel");  break;case SHOW_BUILDING_HEIGHT:label=Messages.getString("MiniMap.BuildingHeightLabel");break;case SHOW_TOTAL_HEIGHT:label=Messages.getString("MiniMap.TotalHeightLabel");break;default :label="";}g.drawString(label,17,(getSize().height - 14) + 12);}}g.setColor(oldColor);}  }
class C{  public NotificationChain basicSetTypeSpecifier(TypeSpecifier newTypeSpecifier,NotificationChain msgs){  TypeSpecifier oldTypeSpecifier=typeSpecifier;  typeSpecifier=newTypeSpecifier;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.DECLARATION__TYPE_SPECIFIER,oldTypeSpecifier,newTypeSpecifier);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static double[] cumProduct(double[] v){  int m=v.length;  double[] X=new double[m];  double s=1;  for (int i=0; i < m; i++) {    s*=v[i];    X[i]=s;  }  return X;}  }
class C{  private void attemptClaimDrag(boolean active){  final ViewParent parent=getParent();  if (parent != null) {    parent.requestDisallowInterceptTouchEvent(active);  }}  }
class C{  public static ModelPrinter selectAvailablePrinter(int type,String typeName){  for (  ModelPrinter p : DevicesListController.getList()) {    if (type < 3) {      if (p.getType() == type)       if (p.getStatus() == StateUtils.STATE_OPERATIONAL)       return p;    } else {      if (p.getProfile().equals(typeName))       if (p.getStatus() == StateUtils.STATE_OPERATIONAL)       return p;    }  }  return null;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  return new File(value.toString());}  }
class C{  public void dump(TvShow tvshow){  try {    JSONObject show=new JSONObject(tvShowObjectWriter.writeValueAsString(tvshow));    JSONArray episodes=new JSONArray();    for (    TvShowEpisode ep : tvshow.getEpisodes()) {      JSONObject epJson=new JSONObject(episodeObjectWriter.writeValueAsString(ep));      episodes.put(epJson);    }    show.put("episodes",episodes);    LOGGER.info("Dumping TvShow:\n" + show.toString(4));  } catch (  JsonProcessingException e) {    LOGGER.error("Cannot parse JSON!",e);  }}  }
class C{  public RedundentExprEliminator(){  m_isSameContext=true;  m_absPaths=new Vector();  m_paths=null;}  }
class C{  public final void error(final String message,final Throwable throwable){  if (isErrorEnabled()) {    output(Priority.ERROR,message,throwable);  }}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public boolean sort(Comparable<E>[] ar,int left,int right){  if (right <= left) {    return false;  }  BinaryHeap<E> heap=new BinaryHeap<E>(right - left + 1);  int i=left;  while (i <= right) {    heap.insert(i,ar[i]);    i++;  }  i=left;  while (!heap.isEmpty()) {    ar[i++]=heap.smallest();  }  return true;}  }
class C{  public static <T>LazyPBagX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public boolean contains(Node s){  runTo(-1);  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s))     return true;  }  return false;}  }
class C{  public Long deleteRoom(String SID,long rooms_id){  return conferenceService.deleteRoom(SID,rooms_id);}  }
class C{  public void upgradeFirmware(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  JSONObject result=new JSONObject();  Preference.putString(context,resources.getString(R.string.pref_key_schedule),operation.getPayLoad().toString());  try {    String status=resources.getString(R.string.shared_pref_default_status);    result.put(resources.getString(R.string.operation_status),status);    operation.setPayLoad(result.toString());    if (status.equals(resources.getString(R.string.shared_pref_default_status))) {      operation.setStatus(resources.getString(R.string.operation_value_progress));      resultBuilder.build(operation);      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(TAG,"Firmware upgrade started.");      }    } else {      operation.setStatus(resources.getString(R.string.operation_value_error));      operation.setOperationResponse("Firmware upgrade failed due to download failure.");      resultBuilder.build(operation);    }  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in processing result payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public void testInvalidDoubleMap() throws Exception {  String testFile="a => b => c";  Analyzer analyzer=new MockAnalyzer(random());  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  expectThrows(ParseException.class,null);  analyzer.close();}  }
class C{  public void test_setBooleanLjava_lang_ObjectZ() throws Exception {  TestField x=new TestField();  Field f=null;  boolean val=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setBoolean(x,false);    val=f.getBoolean(x);  } catch (  Exception e) {    fail("Exception during setboolean test: " + e.toString());  }  assertTrue("Returned incorrect float field value",!val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setBoolean(x,false);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanPFField");    assertFalse(f.isAccessible());    f.setBoolean(x,true);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setBoolean(null,true);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("booleanSField");  f.setBoolean(null,false);  val=f.getBoolean(x);  assertFalse("Returned incorrect boolean field value",val);}  }
class C{  private boolean isFastMobileNetwork(){  TelephonyManager phone=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);  if (phone == null) {    return false;  }switch (phone.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case 14:return true;case 12:return true;case 15:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case 13:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;}return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.013 -0500",hash_original_method="FA814969259FF99D2E9F464DE776F517",hash_generated_method="FD504285D7DB41C0F76B38BF01BE8A13") private InetAddress socksGetServerAddress() throws UnknownHostException {  String proxyName;  InetSocketAddress addr=(InetSocketAddress)proxy.address();  proxyName=addr.getHostName();  if (proxyName == null) {    proxyName=addr.getAddress().getHostAddress();  }  return InetAddress.getByName(proxyName);}  }
class C{  public double potentialUpside(final double centile){  QL.require(centile >= 0.9 && centile < 1.0,"percentile out of range [0.9, 1.0)");  return Math.max(percentile(centile),0.0);}  }
class C{  public CModulesToAddressSpaceHandler(final JFrame parent){  super(CModuleTransferable.MODULE_FLAVOR);  Preconditions.checkNotNull(parent,"IE01928: Parent argument can not be null");  m_parent=parent;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.759 -0500",hash_original_method="27FBCCF1D4D5EC0F51777630C21B1B2E",hash_generated_method="D472E85837C5D4BE96BA90F2DAE0F3A5") public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  @Override public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static byte whichSide(LatLong A,LatLong B,LatLong pt){  double Dx=(A.lng - B.lng);  double Dy=(A.lat - B.lat);  double Ax=(A.lng - pt.lng);  double Ay=(A.lat - pt.lat);  double c=(Dx * Ay - Ax * Dy);  if (c == 0)   return 0; else   if (c < 0)   return 1; else   return -1;}  }
class C{  private TestEnvironment(DeployerContext deployerContext,ContainersConfig containersConfig,AgentControlClientFactory agentControlClientFactory,HostClientFactory hostClientFactory,HttpFileServiceClientFactory httpFileServiceClientFactory,ListeningExecutorService listeningExecutorService,ApiClientFactory apiClientFactory,DockerProvisionerFactory dockerProvisionerFactory,AuthHelperFactory authHelperFactory,HealthCheckHelperFactory healthCheckHelperFactory,ServiceConfiguratorFactory serviceConfiguratorFactory,ZookeeperClientFactory zookeeperClientFactory,HostManagementVmAddressValidatorFactory hostManagementVmAddressValidatorFactory,NsxClientFactory nsxClientFactory,ClusterManagerFactory clusterManagerFactory,int hostCount,Long operationTimeoutMicros,int hostNumber,ServerSet cloudServerSet,Integer port) throws Throwable {  assertTrue(hostCount > 0);  hosts=new PhotonControllerXenonHost[hostCount];  for (int i=0; i < hosts.length; i++) {    String sandbox=Files.createTempDirectory(STORAGE_PATH_PREFIX).toAbsolutePath().toString();    XenonConfig xenonConfig=new XenonConfig();    xenonConfig.setBindAddress(BIND_ADDRESS);    if (port == null) {      xenonConfig.setPort(0);    } else {      xenonConfig.setPort(port + i);    }    xenonConfig.setStoragePath(sandbox);    CloudStoreHelper cloudStoreHelper=new CloudStoreHelper(cloudServerSet);    hosts[i]=new PhotonControllerXenonHost(xenonConfig,hostClientFactory,agentControlClientFactory,nsxClientFactory,cloudStoreHelper);    DeployerServiceGroup deployerServiceGroup=new DeployerServiceGroup(deployerContext,dockerProvisionerFactory,apiClientFactory,containersConfig,listeningExecutorService,httpFileServiceClientFactory,authHelperFactory,healthCheckHelperFactory,serviceConfiguratorFactory,zookeeperClientFactory,hostManagementVmAddressValidatorFactory,clusterManagerFactory);    CloudStoreServiceGroup cloudStoreServiceGroup=new CloudStoreServiceGroup();    hosts[i].registerDeployer(deployerServiceGroup);    hosts[i].registerCloudStore(cloudStoreServiceGroup);    TaskSchedulerServiceStateBuilder.triggerInterval=TimeUnit.MILLISECONDS.toMicros(500);    logger.debug(String.format("sandbox for %s: %s",hosts[i].getId(),sandbox));    if (null != operationTimeoutMicros) {      hosts[i].setOperationTimeOutMicros(operationTimeoutMicros);    }  }}  }
class C{  public void testStringReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public void addValue(int count,String stringRepresentation){  values.add(new UniqueValue(count,stringRepresentation));}  }
class C{  private void logUnmappedError(String misrouteInfo){}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException {  DataInput dataInput=new LittleEndianDataInputStream(inputStream);  checkSignature(dataInput);  deserializeHeader(kdbHeader,dataInput);  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream);  MessageDigest digest=Encryption.getMessageDigestInstance();  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);  dataInput=new LittleEndianDataInputStream(digestInputStream);  KdbDatabase kdbDatabase=new KdbDatabase();  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();  for (long group=0; group < kdbHeader.getGroupCount(); group++) {    lastGroup=deserializeGroup(lastGroup,dataInput);  }  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {    deserializeEntry(kdbDatabase,dataInput);  }  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {    throw new IllegalStateException("Hash values did not match");  }  digestInputStream.close();  return kdbDatabase;}  }
class C{  public String modelChange(PO po,int type) throws Exception {  log.info("po.get_TableName() = " + po.get_TableName());  if (expHelper != null) {    if (type == TYPE_AFTER_CHANGE || type == TYPE_AFTER_NEW || type == TYPE_BEFORE_DELETE) {      X_AD_ReplicationTable replicationTable=MReplicationStrategy.getReplicationTable(po.getCtx(),m_AD_ReplicationStrategy_ID,po.get_Table_ID());      if (replicationTable != null) {        expHelper.exportRecord(po,MReplicationStrategy.REPLICATION_TABLE,replicationTable.getReplicationType(),type);      }    }  }  return null;}  }
class C{  public static void assertPropertyCount(int expected,VCard vcard){  int actual=vcard.getProperties().size();  assertEquals(expected,actual);}  }
class C{  public static boolean contains(Enumeration enumeration,Object element){  if (enumeration != null) {    while (enumeration.hasMoreElements()) {      Object candidate=enumeration.nextElement();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  public short cpi(){  if (cpIdx == 0) {    throw new RuntimeException("Illegal use of ClassFileAssembler");  }  return cpIdx;}  }
class C{  public List<String> buildJavaFiles(File dir) throws ObjectStoreConfigException, IOException {  if (resolver == null) {    resolver=buildJavaNameResolver(pkgPrefix,memPrefix,ns,model,normalizer,cl);  }  if (baseClasses.length > 0) {    Set<Resource> classes=model.filter(null,RDF.TYPE,OWL.CLASS).subjects();    for (    Resource o : new ArrayList<Resource>(classes)) {      RDFClass bean=new RDFClass(model,o);      if (bean.getURI() == null)       continue;      if (bean.isDatatype())       continue;      if (mapper.isRecordedConcept(bean.getURI(),cl))       continue;      addBaseClass(bean);    }  }  List<Thread> threads=new ArrayList<Thread>();  for (int i=0; i < 3; i++) {    threads.add(new Thread(helper));  }  for (  Thread thread : threads) {    thread.start();  }  Set<String> usedNamespaces=new HashSet<String>();  List<String> content=new ArrayList<String>();  for (  Resource o : model.filter(null,RDF.TYPE,RDFS.DATATYPE).subjects()) {    RDFClass bean=new RDFClass(model,o);    if (bean.getURI() == null)     continue;    if (literals.isRecordedeType(bean.getURI()))     continue;    String namespace=bean.getURI().getNamespace();    usedNamespaces.add(namespace);    new DatatypeBuilder(content,bean,dir).run();  }  for (  Resource o : model.filter(null,RDF.TYPE,OWL.ANNOTATIONPROPERTY).subjects()) {    RDFProperty bean=new RDFProperty(model,o);    if (bean.getURI() == null)     continue;    if (mapper.isRecordedAnnotation(bean.getURI()))     continue;    String namespace=bean.getURI().getNamespace();    usedNamespaces.add(namespace);    queue.add(new AnnotationBuilder(dir,content,bean));  }  for (  Resource o : model.filter(null,RDF.TYPE,OWL.CLASS).subjects()) {    if (model.contains(o,RDFS.SUBCLASSOF,MSG.MESSAGE))     continue;    RDFClass bean=new RDFClass(model,o);    if (bean.getURI() == null)     continue;    if (bean.isDatatype())     continue;    if (mapper.isRecordedConcept(bean.getURI(),cl)) {      if ("java:".equals(bean.getURI().getNamespace()))       continue;      if (isComplete(bean,mapper.findRoles(bean.getURI()),resolver))       continue;    }    String namespace=bean.getURI().getNamespace();    usedNamespaces.add(namespace);    queue.add(new ConceptBuilder(dir,content,bean));  }  Set<String> methods=new HashSet<String>();  for (int i=0, n=threads.size(); i < n; i++) {    queue.add(helper);  }  for (  String namespace : usedNamespaces) {    if (JAVA_NS.equals(namespace))     continue;    RDFOntology ont=findOntology(namespace);    ont.generatePackageInfo(dir,namespace,resolver);    String pkg=resolver.getBoundPackageName(namespace);    if (pkg != null) {      String className=pkg + ".package-info";synchronized (content) {        logger.debug("Saving {}",className);        content.add(className);      }    }  }  for (  Thread thread1 : threads) {    try {      thread1.join();    } catch (    InterruptedException cause) {      InterruptedIOException e=new InterruptedIOException(cause.getMessage());      e.initCause(cause);      throw e;    }  }  if (exception != null)   try {    throw exception;  } catch (  ObjectStoreConfigException e) {    throw new ObjectStoreConfigException(e.getMessage(),e);  }catch (  IOException e) {    throw new IOException(e.getMessage(),e);  }catch (  Exception e) {    throw new UndeclaredThrowableException(e);  }  if (!methods.isEmpty()) {    printClasses(methods,dir,META_INF_BEHAVIOURS);    content.addAll(methods);  }  return content;}  }
class C{  private CModuleFunctions(){}  }
class C{  public QueryResultParseException(String msg,Throwable t){  super(msg,t);}  }
class C{  public void write(byte[] vector){  check(vector.length);  System.arraycopy(vector,0,buffer,write_pos,vector.length);  write_pos+=vector.length;}  }
class C{  public synchronized void reset(){  roundCount=0;  entities.clear();  entityIds.clear();  entityPosLookup.clear();  vOutOfGame.removeAllElements();  turnVector.clear();  turnIndex=0;  resetActions();  resetCharges();  resetRams();  resetPSRs();  resetArtilleryAttacks();  resetAttacks();  clearMinefields();  removeArtyAutoHitHexes();  flares.removeAllElements();  illuminatedPositions.clear();  clearAllReports();  smokeCloudList.clear();  forceVictory=false;  victoryPlayerId=Player.PLAYER_NONE;  victoryTeam=Player.TEAM_NONE;  lastEntityId=0;  planetaryConditions=new PlanetaryConditions();}  }
class C{  private static void evaluateExpr(Method m,Expr e,Map<Expr,Object> values,Map<Expr,Typeref> types,Set<Edge> flowWork,Set<Expr> ssaWork,EdgeMap<Expr> uses){  Object v=null;  Typeref tref=null;  if (e.op == OP_phi) {    for (    Expr a : e.args) {      Object av=values.get(a);      if (av == null)       continue;      if (v == null)       v=av; else       if (!av.equals(v))       v=BOTTOM;      Typeref aref=types.get(a);      if (tref == null)       tref=aref; else       if (!tref.equals(aref))       tref=mdb(tref,aref);    }  } else {    for (    Expr a : e.args)     if (!values.containsKey(a))     return;    for (    Expr a : e.scopes)     if (!values.containsKey(a))     return;    for (    Expr a : e.locals)     if (!values.containsKey(a))     return;    v=BOTTOM;    tref=TypeCache.instance().ANY.ref;switch (e.op) {default :      System.err.println("unhandled op:" + e.op + ":"+ opNames[e.op]);    assert (false);case OP_hasnext2_o:case OP_nextname:case OP_nextvalue:case OP_call:case OP_callsuper:case OP_getsuper:case OP_getdescendants:  break;case OP_convert_o:{  tref=types.get(e.args[0]).nonnull();  v=values.get(e.args[0]);  break;}case OP_esc_xattr:case OP_esc_xelem:tref=TypeCache.instance().STRING.ref.nonnull();break;case OP_newcatch:tref=m.handlers[e.imm[0]].activation;break;case OP_newobject:tref=TypeCache.instance().OBJECT.ref.nonnull();break;case OP_newarray:tref=TypeCache.instance().ARRAY.ref.nonnull();break;case OP_newactivation:tref=m.activation;break;case OP_getglobalscope:if (m.cx.scopes.length > 0) {tref=m.cx.scopes[0];} else {v=values.get(e.scopes[0].args[0]);tref=types.get(e.scopes[0].args[0]);}break;case OP_getscopeobject:v=values.get(e.scopes[0].args[0]);tref=types.get(e.scopes[0].args[0]);if (tref == null) {tref=TypeCache.instance().ANY.ref;}break;case OP_newclass:tref=e.c.ref.nonnull();break;case OP_newfunction:tref=TypeCache.instance().FUNCTION.ref.nonnull();break;case OP_finddef:if (TypeCache.instance().globals.contains(e.ref)) tref=TypeCache.instance().globals.get(e.ref);break;case OP_findpropstrict:case OP_findproperty:{int i=findInner(e.ref,e.scopes,types);if (i >= 0) {v=values.get(e.scopes[i]);tref=types.get(e.scopes[i]);} else if ((i=findOuter(e.ref,m.cx.scopes)) >= 0) {tref=m.cx.scopes[i];} else if (TypeCache.instance().globals.contains(e.ref)) {tref=TypeCache.instance().globals.get(e.ref);} else {if (m.cx.scopes.length > 0) {tref=m.cx.scopes[0];} else {v=values.get(e.scopes[0]);tref=types.get(e.scopes[0]);}}break;}case OP_getlex:{int i=findInner(e.ref,e.scopes,types);Typeref stref=i >= 0 ? types.get(e.scopes[i]) : (i=findOuter(e.ref,m.cx.scopes)) >= 0 ? m.cx.scopes[i] : TypeCache.instance().globals.contains(e.ref) ? TypeCache.instance().globals.get(e.ref) : m.cx.scopes.length > 0 ? m.cx.scopes[0] : types.get(e.scopes[0]);Binding b=stref.t.findGet(e.ref);if (b != null) {if (b.isSlot()) {tref=b.type;if (b.isConst() && b.defaultValueChanged()) v=b.value;} else if (b.isMethod()) {tref=TypeCache.instance().FUNCTION.ref.nonnull();} else if (b.isGetter()) {tref=b.method.returns;}}break;}case OP_construct:{tref=TypeCache.instance().OBJECT.ref.nonnull();break;}case OP_constructprop:{Type ot=type(types,e.args[0]);Binding b=ot.findGet(e.ref);if (b != null && b.type != null && b.type.t.itype != null) {tref=b.type.t.itype.ref.nonnull();break;}break;}case OP_callproperty:case OP_callproplex:{Type ot=type(types,e.args[0]);Binding b=ot.findGet(e.ref);if (b != null) {if (b.isMethod()) {tref=b.method.returns;} else if (b.isSlot() && b.type != null) {if (b.type.t.itype == TypeCache.instance().INT) {tref=TypeCache.instance().INT.ref;if (e.args.length > 1) v=eval_convert_i(values.get(e.args[1]));} else if (b.type.t.itype == TypeCache.instance().UINT) {tref=TypeCache.instance().UINT.ref;if (e.args.length > 1) v=eval_convert_u(values.get(e.args[1]));} else if (b.type.t.itype == TypeCache.instance().STRING) {tref=TypeCache.instance().STRING.ref.nonnull();if (e.args.length > 1) v=eval_convert_s(values.get(e.args[1]));} else if (b.type.t.itype == TypeCache.instance().BOOLEAN) {tref=TypeCache.instance().BOOLEAN.ref;if (e.args.length > 1) v=eval_convert_b(values.get(e.args[1]));} else if (b.type.t.itype == TypeCache.instance().NUMBER) {tref=TypeCache.instance().NUMBER.ref;if (e.args.length > 1) v=eval_convert_d(values.get(e.args[1]));}}}break;}case OP_applytype:tref=types.get(e.args[0]).nonnull();break;case OP_callstatic:tref=e.m.returns;break;case OP_arg:if (e.imm[0] < m.getParams().length) tref=m.getParams()[e.imm[0]]; else if (m.needsArguments() || m.needsRest() && e.imm[0] == m.getParams().length) tref=TypeCache.instance().ARRAY.ref.nonnull(); else tref=TypeCache.instance().VOID.ref;break;case OP_xarg:tref=m.handlers[e.imm[0]].type;break;case OP_getslot:{Type t0=type(types,e.args[0]);Binding b=t0.findSlot(e.imm[0]);if (b != null) tref=b.type;break;}case OP_getproperty:{Type t0=type(types,e.args[0]);Binding b=t0.findGet(e.ref);if (b != null) {if (b.isSlot()) {tref=b.type;if (b.isConst() && b.defaultValueChanged()) v=b.value;} else if (b.isMethod()) {tref=TypeCache.instance().FUNCTION.ref.nonnull();} else if (b.isGetter()) {tref=b.method.returns;}}break;}case OP_pushundefined:v=e.value;tref=TypeCache.instance().VOID.ref;break;case OP_pushnull:v=e.value;tref=TypeCache.instance().NULL.ref;break;case OP_pushtrue:case OP_pushfalse:v=e.value;tref=TypeCache.instance().BOOLEAN.ref;break;case OP_pushbyte:case OP_pushshort:case OP_pushint:v=e.value;tref=TypeCache.instance().INT.ref;break;case OP_pushuint:v=e.value;tref=TypeCache.instance().UINT.ref;break;case OP_pushstring:v=e.value;tref=TypeCache.instance().STRING.ref.nonnull();break;case OP_pushnan:case OP_pushdouble:v=e.value;tref=TypeCache.instance().NUMBER.ref;break;case OP_pushnamespace:v=e.value;tref=TypeCache.instance().NAMESPACE.ref.nonnull();break;case OP_jump:flowWork.add(e.succ[0]);return;case OP_lookupswitch:{Object v1=values.get(e.args[0]);if (v1 == BOTTOM) for (Edge s : e.succ) flowWork.add(s); else {int i=intValue(v1);if (i < 0 || i >= e.succ.length - 1) i=e.succ.length - 1;flowWork.add(e.succ[i]);}return;}case OP_iffalse:case OP_iftrue:{Object v1=values.get(e.args[0]);if (v1 == BOTTOM) {flowWork.add(e.succ[0]);flowWork.add(e.succ[1]);} else if (e.op == OP_iffalse) flowWork.add(e.succ[booleanValue(v1) ? 0 : 1]); else if (e.op == OP_iftrue) flowWork.add(e.succ[booleanValue(v1) ? 1 : 0]);return;}case OP_pushscope:case OP_pushwith:v=values.get(e.args[0]);tref=types.get(e.args[0]).nonnull();break;case OP_convert_b:tref=TypeCache.instance().BOOLEAN.ref;v=eval_convert_b(values.get(e.args[0]));break;case OP_not:{tref=TypeCache.instance().BOOLEAN.ref;Object v0=values.get(e.args[0]);if (v0 != BOTTOM) v=booleanValue(v0) ? FALSE : TRUE;break;}case OP_deleteproperty:case OP_deldescendants:case OP_hasnext:case OP_hasnext2:case OP_equals:case OP_strictequals:case OP_in:case OP_istype:case OP_istypelate:case OP_instanceof:tref=TypeCache.instance().BOOLEAN.ref;break;case OP_lessthan:case OP_lessequals:case OP_greaterthan:case OP_greaterequals:{tref=TypeCache.instance().BOOLEAN.ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0.equals(NAN) || v0 == UNDEFINED || v1.equals(NAN) || v1 == UNDEFINED) v=FALSE; else if (v0 != BOTTOM && v1 != BOTTOM) v=e.op == OP_lessthan ? lessthan(v0,v1) : e.op == OP_lessequals ? !lessthan(v1,v0) : e.op == OP_greaterthan ? lessthan(v1,v0) : !lessthan(v0,v1);break;}case OP_convert_s:tref=TypeCache.instance().STRING.ref.nonnull();v=eval_convert_s(values.get(e.args[0]));break;case OP_coerce_s:{tref=eval_coerce_s(types.get(e.args[0]));v=eval_coerce_s(values.get(e.args[0]));break;}case OP_coerce_o:{Typeref t0=types.get(e.args[0]);tref=eval_coerce_o(t0);v=eval_coerce_o(values.get(e.args[0]),t0.t);break;}case OP_coerce_a:{if (!(types.get(e.args[0]).equals(TypeCache.instance().VOID.ref))) {v=values.get(e.args[0]);tref=types.get(e.args[0]);} else {tref=TypeCache.instance().ANY.ref;}break;}case OP_coerce:{Typeref t0=types.get(e.args[0]);Object v0=values.get(e.args[0]);Type t=TypeCache.instance().namedTypes.get(e.ref);assert (t != null);if (t == TypeCache.instance().STRING) {tref=eval_coerce_s(t0);v=eval_coerce_s(v0);} else if (t == TypeCache.instance().OBJECT) {tref=eval_coerce_o(t0);v=eval_coerce_o(v0,t0.t);} else if (t == TypeCache.instance().INT) {tref=t.ref;v=eval_convert_i(v0);} else if (t == TypeCache.instance().UINT) {tref=t.ref;v=eval_convert_u(v0);} else if (t == TypeCache.instance().NUMBER) {tref=t.ref;v=eval_convert_d(v0);} else if (t == TypeCache.instance().BOOLEAN) {tref=t.ref;v=eval_convert_b(v0);} else {if (t0.t.extendsOrIsBase(t)) {tref=t0;v=v0;} else if (t0.t == TypeCache.instance().NULL || t0.t == TypeCache.instance().VOID) {tref=TypeCache.instance().NULL.ref;} else {tref=t.ref;}}break;}case OP_astype:tref=TypeCache.instance().namedTypes.get(e.ref).ref;break;case OP_astypelate:{Typeref t1=types.get(e.args[1]);if (t1.t.itype != null) {if (t1.t.itype.atom || t1.t.itype.numeric) tref=TypeCache.instance().OBJECT.ref; else tref=t1.t.itype.ref;} else {tref=TypeCache.instance().ANY.ref;}break;}case OP_typeof:{Type t0=type(types,e.args[0]);if (t0 == TypeCache.instance().INT || t0 == TypeCache.instance().UINT || t0 == TypeCache.instance().NUMBER) v="number"; else if (t0 == TypeCache.instance().STRING) v="string"; else if (t0.extendsOrIsBase(TypeCache.instance().XML) || t0.extendsOrIsBase(TypeCache.instance().XMLLIST)) v="xml"; else if (t0 == TypeCache.instance().VOID) v="undefined"; else if (t0 == TypeCache.instance().BOOLEAN) v="boolean"; else if (t0.extendsOrIsBase(TypeCache.instance().FUNCTION)) v="function"; else if (t0 != TypeCache.instance().OBJECT && t0.extendsOrIsBase(TypeCache.instance().OBJECT)) v="object";tref=TypeCache.instance().STRING.ref.nonnull();break;}case OP_add:{Expr a0=e.args[0];Expr a1=e.args[1];Typeref t0=types.get(a0);Typeref t1=types.get(a1);Object v0=values.get(a0);Object v1=values.get(a1);if (t0.t == TypeCache.instance().STRING && !t0.nullable || t1.t == TypeCache.instance().STRING && !t1.nullable) {tref=TypeCache.instance().STRING.ref.nonnull();if (v0 != BOTTOM && v1 != BOTTOM) v=stringValue(v0) + stringValue(v1);} else if (t0.t.numeric && t1.t.numeric) {tref=TypeCache.instance().NUMBER.ref;if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) + doubleValue(v1);} else {tref=TypeCache.instance().OBJECT.ref.nonnull();}break;}case OP_divide:{tref=TypeCache.instance().NUMBER.ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) / doubleValue(v1);break;}case OP_subtract:case OP_multiply:case OP_modulo:case OP_negate:case OP_increment:case OP_decrement:tref=TypeCache.instance().NUMBER.ref;break;case OP_convert_d:tref=TypeCache.instance().NUMBER.ref;v=eval_convert_d(values.get(e.args[0]));break;case OP_convert_i:tref=TypeCache.instance().INT.ref;v=eval_convert_i(values.get(e.args[0]));break;case OP_convert_u:tref=TypeCache.instance().UINT.ref;v=eval_convert_u(values.get(e.args[0]));break;case OP_bitor:{tref=TypeCache.instance().INT.ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) v=intValue(v0) | intValue(v1);break;}case OP_bitand:{tref=TypeCache.instance().INT.ref;Object v0=values.get(e.args[0]);Object v1=values.get(e.args[1]);if (v0 instanceof Number && v1 instanceof Number) {v=intValue(v0) & intValue(v1);}break;}case OP_bitnot:case OP_add_i:case OP_subtract_i:case OP_multiply_i:case OP_negate_i:case OP_bitxor:case OP_lshift:case OP_rshift:case OP_hasnext2_i:case OP_increment_i:case OP_decrement_i:tref=TypeCache.instance().INT.ref;break;case OP_urshift:tref=TypeCache.instance().UINT.ref;break;case OP_setslot:case OP_setproperty:case OP_setsuper:case OP_initproperty:case OP_callpropvoid:case OP_constructsuper:case OP_callsupervoid:case OP_returnvoid:case OP_returnvalue:case OP_throw:case OP_popscope:case OP_debug:case OP_debugline:case OP_debugfile:case OP_bkpt:case OP_bkptline:case OP_checkfilter:return;}}assert (tref != null && tref.t != null);if (tref.t == TypeCache.instance().VOID) v=UNDEFINED; else if (tref.t == TypeCache.instance().NULL) v=TypeCache.instance().NULL;if (v != null && !v.equals(values.get(e))) {values.put(e,v);ssaWork.addAll(uses.get(e));}if (!tref.equals(types.get(e))) {types.put(e,tref);ssaWork.addAll(uses.get(e));}}  }
class C{  protected void refreshNavigator(final WorkingSetManager manager){  manager.getWorkingSetManagerBroker().refreshNavigator();}  }
class C{  public void registerAction(String id,String label,Action action){  HotkeyAction hotkeyAction=new HotkeyAction(id,label,action);  actions.put(id,hotkeyAction);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MOV");  translateAll(environment,instruction,"MOV",instructions);}  }
class C{  public static InputProperties fromString(String propsString){  InputProperties inputProperties=new InputProperties();  if (propsString != null && propsString.trim().length() > 0) {    for (    String keyValue : propsString.split(PAIR_DELIMITER)) {      String[] fields=keyValue.trim().split(KEY_VALUE_DELIMITER);      if (fields.length != 2) {        throw new RuntimeException("File format error: " + keyValue + " "+ String.valueOf(fields.length));      }      InputProperty inputProperty=InputProperty.valueOf(fields[0]);      String value=fields[1];      if (inputProperty == InputProperty.Domain) {        inputProperties.put(inputProperty,value.split(LIST_DELIMITER));      } else       if (inputProperty == InputProperty.PrefixLengths) {        String[] strings=value.split(LIST_DELIMITER);        int[] values=new int[strings.length];        for (int i=0; i < values.length; ++i)         values[i]=Integer.valueOf(strings[i]);        inputProperties.put(inputProperty,values);      } else       if (inputProperty == InputProperty.TargetPrefix) {        inputProperties.put(inputProperty,Boolean.valueOf(value));      } else       if (inputProperty == InputProperty.DistortionLimit) {        inputProperties.put(inputProperty,Integer.valueOf(value));      } else       if (inputProperty == InputProperty.IsValid) {        inputProperties.put(inputProperty,Boolean.valueOf(value));      } else       if (inputProperty == InputProperty.RuleFeatureIndex) {        inputProperties.put(inputProperty,Integer.valueOf(value));      } else       if (inputProperty == InputProperty.AllowIncompletePrefix) {        inputProperties.put(inputProperty,Boolean.valueOf(value));      } else {        inputProperties.put(inputProperty,value);      }    }  }  return inputProperties;}  }
class C{  @Override public void addPages(){  super.addPages();  page=new FiltersWizardPage(view.getFilters(),view.getFilterFields());  addPage(page);}  }
class C{  private static byte[] min(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) < (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  private static boolean isSkipClass(final String className){  for (  final String staticInitClass : SKIPCLASSES) {    if (className.contains(staticInitClass)) {      return true;    }  }  return false;}  }
class C{  @Override public void draw(GL2 gl){  gl.glPushMatrix();  float[] translate=GLScene.P(translateX,translateY);  gl.glTranslatef(translate[0],translate[1],translate[2]);  gl.glScalef(scaleX,scaleY,scaleZ);  gl.glRotated(rotation * 180 / Math.PI,0,0,1);  gl.glBegin(GL2.GL_LINE_STRIP);  GLPanel.V(gl,controlPoints[1].x,controlPoints[1].y);  GLPanel.V(gl,controlPoints[0].x,controlPoints[0].y);  GLPanel.V(gl,controlPoints[2].x,controlPoints[2].y);  gl.glEnd();  gl.glPopMatrix();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.579 -0500",hash_original_method="B65038280E8BB44BE238AA107D896C14",hash_generated_method="2042234321E502ABF3FAEB2D5827D8D3") public static final ArrayList readThisListXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  ArrayList list=new ArrayList();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      list.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return list;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  public void alignBottom(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignBottomAction(nodes));  }  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,nMaxY);  }}  }
class C{  public void onRenderingStopped(MapPaneEvent ev){}  }
class C{  public static void dropAll(Connection conn) throws SQLException {  init(conn);  Statement stat=conn.createStatement();  stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA);  removeAllTriggers(conn,TRIGGER_PREFIX);  FullTextSettings setting=FullTextSettings.getInstance(conn);  setting.removeAllIndexes();  setting.getIgnoreList().clear();  setting.getWordList().clear();}  }
class C{  public static int rgb(int r,int g,int b){  return rgba(r,g,b,255);}  }
class C{  public UnsupportedTemporalTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected OFControllerRole extractNiciraRoleReply(OFMessage vendorMessage){  if (!(vendorMessage instanceof OFNiciraControllerRoleReply))   return null;  OFNiciraControllerRoleReply roleReply=(OFNiciraControllerRoleReply)vendorMessage;  return NiciraRoleUtils.niciraToOFRole(roleReply);}  }
class C{  public void testFailoverConnection() throws Exception {  if (!isServerRunningOnWindows()) {    Properties props=new Properties();    props.setProperty("autoReconnect","true");    props.setProperty("failOverReadOnly","false");    Properties urlProps=new NonRegisteringDriver().parseURL(dbUrl,null);    String host=urlProps.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY);    String port=urlProps.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY);    props.setProperty(NonRegisteringDriver.HOST_PROPERTY_KEY + ".1",host);    props.setProperty(NonRegisteringDriver.PORT_PROPERTY_KEY + ".1",port);    props.setProperty(NonRegisteringDriver.HOST_PROPERTY_KEY + ".2",host);    props.setProperty(NonRegisteringDriver.PORT_PROPERTY_KEY + ".2",port);    props.setProperty(NonRegisteringDriver.NUM_HOSTS_PROPERTY_KEY,"2");    Connection failoverConnection=null;    try {      failoverConnection=getConnectionWithProps(props);      String originalConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT connection_id()").toString();      System.out.println("Original Connection Id = " + originalConnectionId);      assertTrue("Connection should not be in READ_ONLY state",!failoverConnection.isReadOnly());      this.stmt.executeUpdate("KILL " + originalConnectionId);      Thread.sleep(3000);      try {        failoverConnection.createStatement().execute("SELECT 1");        fail("We expect an exception here, because the connection should be gone until the reconnect code picks it up again");      } catch (      SQLException sqlEx) {      }      failoverConnection.setAutoCommit(true);      String newConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT connection_id()").toString();      System.out.println("new Connection Id = " + newConnectionId);      assertTrue("We should have a new connection to the server in this case",!newConnectionId.equals(originalConnectionId));      assertTrue("Connection should not be read-only",!failoverConnection.isReadOnly());    }  finally {      if (failoverConnection != null) {        failoverConnection.close();      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    boolean sixpack=((count % 6) == 0);    if (sixpack) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public static void run(AdSenseHost service,String accountId,String adClientId,String adUnitId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Deleting ad unit %s\n",adUnitId);  System.out.println("=================================================================");  AdUnit adUnit=service.accounts().adunits().delete(accountId,adClientId,adUnitId).execute();  System.out.printf("Ad unit with id \"%s\" was deleted.\n",adUnit.getId());  System.out.println();}  }
class C{  public void removeKeyBinding(String keyBinding){  throw new InternalError("Not yet implemented");}  }
class C{  public static synchronized void log(String message){  if (message != null) {    if (message.startsWith("ERROR:")) {      LogFactory.getLog(ToolBox.getCaller()).error(message.substring("ERROR:".length()).trim());      return;    } else     if (message.startsWith("WARNING:")) {      LogFactory.getLog(ToolBox.getCaller()).warn(message.substring("WARNING:".length()).trim());      return;    } else     if (message.startsWith("INFO:")) {      LogFactory.getLog(ToolBox.getCaller()).info(message.substring("INFO:".length()).trim());      return;    }  }  LogFactory.getLog(ToolBox.getCaller()).debug(message);}  }
class C{  public void closeArtifactDetails(){  removeAllComponents();  setVisible(false);}  }
class C{  public BundleException(String msg){  this(msg,UNSPECIFIED);}  }
class C{  public boolean updateGoals(){  String mt=getMeasureType();  try {    if (MEASURETYPE_Manual.equals(mt))     return updateManualGoals(); else     if (MEASURETYPE_Achievements.equals(mt))     return updateAchievementGoals(); else     if (MEASURETYPE_Calculated.equals(mt))     return updateCalculatedGoals(); else     if (MEASURETYPE_Ratio.equals(mt))     return updateRatios(); else     if (MEASURETYPE_Request.equals(mt))     return updateRequests(); else     if (MEASURETYPE_Project.equals(mt))     return updateProjects(); else     if (MEASURETYPE_UserDefined.equals(mt))     return updateUserDefined();  } catch (  Exception e) {    log.log(Level.SEVERE,"MeasureType=" + mt,e);  }  return false;}  }
class C{  private static void putAdministrative17UnderVfsListener(Set<NestedCopyInfo> pointInfos){  if (!SvnVcs.ourListenToWcDb)   return;  final LocalFileSystem lfs=LocalFileSystem.getInstance();  for (  NestedCopyInfo info : pointInfos) {    if (WorkingCopyFormat.ONE_DOT_SEVEN.equals(info.getFormat()) && !NestedCopyType.switched.equals(info.getType())) {      final VirtualFile root=info.getFile();      lfs.refreshIoFiles(Collections.singletonList(SvnUtil.getWcDb(new File(root.getPath()))),true,false,null);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:00.014 -0500",hash_original_method="5CA5554CE8FD4158388C6D1687495E52",hash_generated_method="2DE5180C67E6F93D5B4723B0787F66FA") public static byte[] toBigEndianUtf16Bytes(char[] chars,int offset,int length){  byte[] result=new byte[length * 2];  int end=offset + length;  int resultIndex=0;  for (int i=offset; i < end; ++i) {    char ch=chars[i];    result[resultIndex++]=(byte)(ch >> 8);    result[resultIndex++]=(byte)ch;  }  return result;}  }
class C{  public WebLogic9x10x103x12xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.CONFIGURATION_VERSION,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.DOMAIN_VERSION,Boolean.TRUE);}  }
class C{  @PutMapping @ResponseBody @ResponseStatus(HttpStatus.OK) public RoleVO save(@RequestBody @Valid RoleVO role){  if (role.getId() == null) {    String msg=translate(ExceptionCodes.ROLE_IS_TRANSIENT,role.getName());    throw new HttpBusinessException(msg,HttpStatus.NOT_ACCEPTABLE);  }  Role toSave=m.map(role,Role.class);  return m.map(service.save(toSave),RoleVO.class);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Matrix4f(Quaternion q1,Vec3D t1,float s){  m00=(float)(s * (1.0 - 2.0 * q1.y * q1.y - 2.0 * q1.z * q1.z));  m10=(float)(s * (2.0 * (q1.x * q1.y + q1.w * q1.z)));  m20=(float)(s * (2.0 * (q1.x * q1.z - q1.w * q1.y)));  m01=(float)(s * (2.0 * (q1.x * q1.y - q1.w * q1.z)));  m11=(float)(s * (1.0 - 2.0 * q1.x * q1.x - 2.0 * q1.z * q1.z));  m21=(float)(s * (2.0 * (q1.y * q1.z + q1.w * q1.x)));  m02=(float)(s * (2.0 * (q1.x * q1.z + q1.w * q1.y)));  m12=(float)(s * (2.0 * (q1.y * q1.z - q1.w * q1.x)));  m22=(float)(s * (1.0 - 2.0 * q1.x * q1.x - 2.0 * q1.y * q1.y));  m03=t1.x;  m13=t1.y;  m23=t1.z;  m30=0.0f;  m31=0.0f;  m32=0.0f;  m33=1.0f;}  }
class C{  public IntervalXYToolTipGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  protected void addCharacter(Character character){  characters.add(character);  width+=character.getxAdvance() * fontSize;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public ConsoleLog(Level level){  this.level=level;}  }
class C{  protected void clear(){  m_ModelClassifiers.removeAllElements();  m_ModelDatasets.removeAllElements();  m_SpinnerNumRuns.setValue(10);  m_ComboBoxEvaluation.setSelectedIndex(0);  m_CheckBoxPreserveOrder.setSelected(false);  m_TextPercentage.setText("66.6");  m_GOEStatisticsHandler.setValue(new KeyValuePairs());  m_Notes="";}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setEditable(true);  }}  }
class C{  public InsertTabAction(){  super(insertTabAction);}  }
class C{  public List<GroupLocalDeviceDB> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  protected SourceRefElement(JavaElement parent,JavaModelManager manager){  super(parent,manager);}  }
class C{  public static Topic createTopic(final String name){  return ActiveMQDestination.createTopic(name);}  }
class C{  public void init(KeyGenerationParameters param){  super.init(param);  if (strength == 0 || strength == (56 / 8)) {    strength=DESParameters.DES_KEY_LENGTH;  } else   if (strength != DESParameters.DES_KEY_LENGTH) {    throw new IllegalArgumentException("DES key must be " + (DESParameters.DES_KEY_LENGTH * 8) + " bits long.");  }}  }
class C{  URL createResumableUpdateSession(URL editMediaUrl,IEntry entry,MediaFileSource file,boolean isMediaOnly) throws IOException, ServiceException {  GDataRequest request;  if (isMediaOnly) {    request=createRequest(GDataRequest.RequestType.UPDATE,editMediaUrl,new ContentType(file.getContentType()));  } else {    request=createUpdateRequest(editMediaUrl);  }  initResumableMediaRequest(request,file,null);  if (entry.getEtag() != null) {    request.setEtag(entry.getEtag());  }  try {    startVersionScope();    if (!isMediaOnly) {      writeRequestData(request,entry);    }    request.execute();    return new URL(request.getResponseHeader("Location"));  }  finally {    endVersionScope();    request.end();  }}  }
class C{  private void addLeaf(Segment10 segment,int pid,int nextPid,int address,int length){  Page10 page=_pageMap.get(pid);  if (page != null && page.sequence() < segment.sequence()) {    return;  }  page=new Page10(PageType10.LEAF,segment,pid,nextPid,address,length);  _pageMap.put(pid,page);}  }
class C{  public void testValidationCreate() throws Exception {  try {    creator.create(ImmutableMap.<String,String>of());    fail("Method does not check for required options.");  } catch (  CodebaseCreationError expected) {  }  try {    creator.create(ImmutableMap.<String,String>of("path","FooBar","unknown","123"));    fail("Method does not check for unsupported options.");  } catch (  MoeProblem expected) {  }}  }
class C{  public static IJavaProject createProject(String projectName,IClasspathEntry[] rawClasspaths) throws CoreException {  IProject project=createSimpleProject(projectName,JAVA_NATURE);  IJavaProject javaProject=JavaCore.create(project);  javaProject.setRawClasspath(rawClasspaths,npm());  return javaProject;}  }
class C{  @Override public void cancel(){  if (getWriteMode() == CANCEL) {    try {      m_DataBaseConnection.update("DROP TABLE " + m_resolvedTableName);      if (m_DataBaseConnection.tableExists(m_resolvedTableName)) {        System.err.println("Table cannot be dropped.");      }    } catch (    Exception ex) {      printException(ex);    }    resetOptions();  }}  }
class C{  public void deleteAll(){  if (mDecoEventManager != null) {    mDecoEventManager.resetEvents();  }  mChartSeries=null;}  }
class C{  public void addForeignKeys(Collection<ForeignKey> foreignKeys){  for (Iterator<ForeignKey> it=foreignKeys.iterator(); it.hasNext(); ) {    addForeignKey((ForeignKey)it.next());  }}  }
class C{  private void negativeTest(final String query){  try {    parseOperation(query);    fail("Negative test - should fail");  } catch (  MalformedQueryException ex) {  }}  }
class C{  void checkInstallMMAC(int policyRes,int apkRes,String expectedSeinfo,boolean expectedPassed){  Uri policyURI=getResourceURI(policyRes,MAC_INSTALL_TMP);  assertNotNull(policyURI);  boolean ret=SELinuxMMAC.readInstallPolicy(new File(policyURI.getPath()));  assertTrue(ret);  Uri apkURI=getResourceURI(apkRes,APK_INSTALL_TMP);  assertNotNull(apkURI);  PackageParser.Package pkg=parsePackage(apkURI);  assertNotNull(pkg);  assertNotNull(pkg.packageName);  boolean passed=SELinuxMMAC.passInstallPolicyChecks(pkg);  assertEquals(expectedPassed,passed);  String seinfo=pkg.applicationInfo.seinfo;  if (seinfo == null)   seinfo="null";  assertEquals(expectedSeinfo,seinfo);  MAC_INSTALL_TMP.delete();  APK_INSTALL_TMP.delete();}  }
class C{  public BitSet findOuterMostDecisionStates(){  BitSet track=new BitSet(atn.states.size());  int numberOfDecisions=atn.getNumberOfDecisions();  for (int i=0; i < numberOfDecisions; i++) {    DecisionState decisionState=atn.getDecisionState(i);    RuleStartState startState=atn.ruleToStartState[decisionState.ruleIndex];    if (decisionState instanceof StarLoopEntryState) {      StarLoopEntryState loopEntry=(StarLoopEntryState)decisionState;      if (loopEntry.isPrecedenceDecision) {        ATNState blockStart=loopEntry.transition(0).target;        track.set(blockStart.stateNumber);      }    } else     if (startState.transition(0).target == decisionState) {      track.set(decisionState.stateNumber);    }  }  return track;}  }
class C{  public int compareTo(final Percent other){  return CoreUtils.nullSafeComparator(this.getBigDecimalValue(),other.getBigDecimalValue());}  }
class C{  public static String classNamesToString(Collection<Class> classes){  if (CollectionUtils.isEmpty(classes)) {    return "[]";  }  StringBuilder sb=new StringBuilder("[");  for (Iterator<Class> it=classes.iterator(); it.hasNext(); ) {    Class clazz=it.next();    sb.append(clazz.getName());    if (it.hasNext()) {      sb.append(", ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  public boolean isEligibleForBackup(){  if (nodeCount == 1) {    return true;  }  String result=readZkInfo("stat","Mode");  if (result == null || !result.contains(": ")) {    throw BackupException.fatals.failedToParseLeaderStatus(result);  }  String mode=(result.split(": "))[1];  if (mode.equals("leader") || mode.equals("standalone") || mode.equals("observer")) {    return true;  } else {    log.info("Status mode is: {}",mode);    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(UnicodeSet uset){  set=uset;  reset();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String[] createOptions(){  String[] options=new String[m_ClassifierOptions.length + 2 * m_CVParams.size()];  int start=0, end=options.length;  for (int i=0; i < m_CVParams.size(); i++) {    CVParameter cvParam=(CVParameter)m_CVParams.elementAt(i);    double paramValue=cvParam.m_ParamValue;    if (cvParam.m_RoundParam) {      paramValue=Math.rint(paramValue);    }    boolean isInt=((paramValue - (int)paramValue) == 0);    if (cvParam.m_AddAtEnd) {      options[--end]="" + ((cvParam.m_RoundParam || isInt) ? Utils.doubleToString(paramValue,4) : cvParam.m_ParamValue);      options[--end]="-" + cvParam.m_ParamChar;    } else {      options[start++]="-" + cvParam.m_ParamChar;      options[start++]="" + ((cvParam.m_RoundParam || isInt) ? Utils.doubleToString(paramValue,4) : cvParam.m_ParamValue);    }  }  System.arraycopy(m_ClassifierOptions,0,options,start,m_ClassifierOptions.length);  return options;}  }
class C{  @Deprecated public boolean attachInWindow(View window){  return attachInView(window);}  }
class C{  void stopForegroundCompat(int id){  if (mStopForeground != null) {    mStopForegroundArgs[0]=Boolean.TRUE;    invokeMethod(mStopForeground,mStopForegroundArgs);    return;  }  mNM.cancel(id);  mSetForegroundArgs[0]=Boolean.FALSE;  invokeMethod(mSetForeground,mSetForegroundArgs);}  }
class C{  public void deleteQueue(String name) throws Exception {  if (usingJNDI) {    System.setProperty("MQJMS_PURGE_ON_DELETE","yes");    unbind(name);  } else {    PCFMessageAgent agent=new PCFMessageAgent(Config.parms.getString("jh"),Config.parms.getInt("jp"),"CLIENT");    PCFMessage message=new PCFMessage(CMQCFC.MQCMD_DELETE_Q);    message.addParameter(CMQC.MQCA_Q_NAME,name);    message.addParameter(CMQCFC.MQIACF_PURGE,CMQCFC.MQPO_YES);    agent.send(message);  }}  }
class C{  private static void FatalError(JNIEnvironment env,Address messageAddress){  if (traceJNI)   VM.sysWrite("JNI called: FatalError  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    VM.sysWrite(JNIGenericHelpers.createStringFromC(messageAddress));    System.exit(EXIT_STATUS_JNI_TROUBLE);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    System.exit(EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN);  }}  }
class C{  public void visited(IAutomatonVisitor visitor){  visitor.visit(this);}  }
class C{  @CliAvailabilityIndicator({GET_INSTANCE_DETAILS_CMD,UNINSTALL_CMD}) public boolean areInstanceCommandsAvailable(){switch (state.getShellState().getConnectionState()) {case CONNECTED_TO_INSTANCE:    return true;default :  return false;}}  }
class C{  public void dropTable(String name) throws SQLException {  Statement stmt=conn.createStatement();  stmt.execute("DROP TABLE \"" + name + "\"");}  }
class C{  public void testHotDeployWar(){  this.fileHandler.createFile("ram:///test.war");  WAR war=(WAR)factory.createDeployable("jonas4x","ram:///test.war",DeployableType.WAR);  war.setContext("testContext");  setupAdminHotDeployment();  deployer.deploy(war);  assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/test.war"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/testContext.war"));}  }
class C{  protected static Pair<String,String> lslImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  long baseOffset=offset;  if (immediateNodeValue.equals("0")) {    return new Pair<String,String>(registerNodeValue,"C");  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,immediateNodeValue,qWordSize,tmpVar1));    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar1,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf(-(32 - Integer.decode(immediateNodeValue))),dWordSize,tmpVar2));    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar2,byteSize,oneSet,byteSize,shifterCarryOut));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  }}  }
class C{  public static DoubleMatrix1D pow(DoubleMatrix1D A,double s){  return A.assign(F.pow(s));}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  super.onListItemClick(listView,view,position,id);  if (!contextualActionBarActive) {    Connection c=arrayAdapter.getItem(position);    Intent intent=new Intent();    intent.setClassName(getApplicationContext().getPackageName(),"org.eclipse.paho.android.service.sample.ConnectionDetails");    intent.putExtra("handle",c.handle());    startActivity(intent);  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  return g.drawImage(img,x,y,width,height,observer);}  }
class C{  protected boolean fieldNameComparator(String fieldNameToCheck){  boolean rv=fieldName == null || fieldName.equals(fieldNameToCheck) || (defaultField != null && defaultField.equals(fieldNameToCheck));  return rv;}  }
class C{  public void valueChange(ValueChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    int C_BPartner_ID=((Integer)e.getNewValue()).intValue();    initBPOrderDetails(C_BPartner_ID,true);  }  window.tableChanged(null);}  }
class C{  public List<Image> orthoFor(IHex hex){  return hexTileset.getOrtho(hex,boardview);}  }
class C{  public static Object deSerialize(String xmlString) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] deSerializeArgsClasses=new Class[1];  Object[] deSerializeArgs=new Object[1];  java.lang.reflect.Method methodDeSerialize;  Object result;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  deSerializeArgsClasses[0]=String.class;  deSerializeArgs[0]=xmlString;  methodDeSerialize=xstreamClass.getMethod("fromXML",deSerializeArgsClasses);  try {    result=methodDeSerialize.invoke(xstream,deSerializeArgs);  } catch (  Exception ex) {    ex.printStackTrace();    result=null;  }  return result;}  }
class C{  public static void copyFolderContentsFromCoreTestsResource(String resourcePath,File destFolder) throws CoreException {  String pluginId=LangCorePlugin.TESTS_PLUGIN_ID;  String bundleResourcePath=new Path(TESTDATA_BUNDLE_PATH).append(resourcePath).toString();  try {    BundleResourcesUtil.copyDirContents(pluginId,bundleResourcePath,destFolder);  } catch (  IOException e) {    throw EclipseCore.createCoreException("Error copying resource contents",e);  }}  }
class C{  protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){  JavaElementDelta childDelta=delta;  ArrayList ancestors=getAncestors(element);  if (ancestors == null) {    if (equalsAndSameParent(delta.getElement(),getElement())) {      this.kind=delta.kind;      this.changeFlags=delta.changeFlags;      this.movedToHandle=delta.movedToHandle;      this.movedFromHandle=delta.movedFromHandle;    }  } else {    for (int i=0, size=ancestors.size(); i < size; i++) {      IJavaElement ancestor=(IJavaElement)ancestors.get(i);      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);      ancestorDelta.addAffectedChild(childDelta);      childDelta=ancestorDelta;    }  }  return childDelta;}  }
class C{  public DelphiNode(Token payload){  super(payload);}  }
class C{  public final synchronized void disconnect(){  this.quitServer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.950 -0500",hash_original_method="4E1ECDF73B11EBBAA54149A8F56B9D61",hash_generated_method="C99EE7D454A05C28B25257694EA3AB00") public BaseProgramBuilder addConstant(Type t) throws IllegalStateException {  if (mConstantCount >= MAX_CONSTANT) {    throw new RSIllegalArgumentException("Max input count exceeded.");  }  if (t.getElement().isComplex()) {    throw new RSIllegalArgumentException("Complex elements not allowed.");  }  mConstants[mConstantCount]=t;  mConstantCount++;  return this;}  }
class C{  private void startDownloadImageActivity(Uri url){  if (url != null) {    if (mProcessButtonClick.getBoolean("buttonClicked",false)) {      UiUtils.showToast(this,"Already downloading image " + url);    } else     if (!URLUtil.isValidUrl(url.toString())) {      UiUtils.showToast(this,"Invalid URL " + url.toString());    } else {      final Intent intent=DownloadImageActivity.makeIntent(url);      startActivity(intent);      SharedPreferences.Editor editor=mProcessButtonClick.edit();      editor.putBoolean("buttonClicked",true);      editor.commit();    }  }}  }
class C{  public boolean isBooleanOrNumeric(){  return isBooleanValue(value) || NumberUtils.isNumber(value);}  }
class C{  public void testClearBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected ScriptImpl(){  super();}  }
class C{  public boolean removeX500Principal(X500Principal x500Principal){  boolean removed=false;  if (certificateTokens != null) {    List<CertificateToken> listToRemove=get(x500Principal);    for (    CertificateToken certificateToken : listToRemove) {      removed|=removeCertificate(certificateToken);    }  }  return removed;}  }
class C{  public boolean exists(){  String s=getPath();  if (s == null) {    return false;  } else {    File f=new File(s);    return f.exists();  }}  }
class C{  protected void processConditionalSection(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != 'I') {    XMLUtil.skipTag(reader);    return;  }  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);switch (ch) {case 'G':    this.processIgnoreSection(reader,entityResolver);  return;case 'N':break;default :XMLUtil.skipTag(reader);return;}if (!XMLUtil.checkLiteral(reader,"CLUDE")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader,null);str=XMLUtil.read(reader,'%');ch=str.charAt(0);if (ch != '[') {XMLUtil.skipTag(reader);return;}Reader subreader=new CDATAReader(reader);StringBuffer buf=new StringBuffer(1024);for (; ; ) {int ch2=subreader.read();if (ch2 < 0) {break;}buf.append((char)ch2);}subreader.close();reader.startNewStream(new StringReader(buf.toString()));}  }
class C{  protected void addVariablesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Scope_variables_feature"),getString("_UI_PropertyDescriptor_description","_UI_Scope_variables_feature","_UI_Scope_type"),SGraphPackage.Literals.SCOPE__VARIABLES,false,false,false,null,null,null));}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    throw new InternalError("Clone error");  }}  }
class C{  private boolean isModifiedImpl(){  return FileDocumentManager.getInstance().isFileModified(myFile);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  Channel channel=(Channel)conversation;  if (params.length == 1) {    service.getConnection(server.getId()).onTopic(channel.getName(),channel.getTopic(),"",0,false);  } else   if (params.length > 1) {    service.getConnection(server.getId()).setTopic(channel.getName(),BaseHandler.mergeParams(params));  }}  }
class C{  public boolean hasBody(){  return !(this.body instanceof String) || !((String)this.body).isEmpty();}  }
class C{  private void adjustForHSB(boolean wantsHSB,Rectangle available,Rectangle hsbR,Insets vpbInsets){  int oldHeight=hsbR.height;  if (wantsHSB) {    int hsbHeight=Math.max(0,Math.min(available.height,hsb.getPreferredSize().height));    available.height-=hsbHeight;    hsbR.y=available.y + available.height + vpbInsets.bottom;    hsbR.height=hsbHeight;  } else {    available.height+=oldHeight;  }}  }
class C{  public static void reset(){  System.out.println("Resetting dummy service.");  started.clear();  exeLatches.clear();  cancelled.clear();}  }
class C{  public void decrement(){  if (enabled) {    --count;  }}  }
class C{  public boolean equals(LiveExprNode exp){  if (exp instanceof LNNeg) {    return getBody().equals(((LNNeg)exp).getBody());  }  return false;}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (attributes.isEmpty()) {    return;  }  w.startElement(GoogleBaseNamespaces.GM,"attributes",null,null);  w.startRepeatingElement();  for (  GmAttribute attribute : attributes) {    List<XmlWriter.Attribute> attributes=new ArrayList<XmlWriter.Attribute>();    GoogleBaseAttributeId id=attribute.getAttributeId();    attributes.add(new XmlWriter.Attribute("name",id.getName()));    if (id.getType() != null) {      attributes.add(new XmlWriter.Attribute("type",id.getType().getName()));    }    if (attribute.getImportance() != null) {      attributes.add(new XmlWriter.Attribute("importance",attribute.getImportance().getXmlValue()));    }    w.simpleElement(GoogleBaseNamespaces.GM,"attribute",attributes,null);  }  w.endRepeatingElement();  w.endElement();}  }
class C{  public TypingStrategyFilter(TypingStrategy typingStrategy){  this.typingStrategy=typingStrategy;}  }
class C{  private static double remainderTwoPiFast(double angle){  if (USE_JDK_MATH) {    return remainderTwoPi(angle);  }  boolean negateResult;  if (angle < 0.0) {    negateResult=true;    angle=-angle;  } else {    negateResult=false;  }  if (angle <= TWO_POW_26 * (2 * Math.PI)) {    double fn=(double)(int)(angle * INVTWOPI + 0.5);    double result=(angle - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle <= TWO_POW_52 * (2 * Math.PI)) {    double fn=(double)(int)(angle * (INVTWOPI / TWO_POW_26) + 0.5);    double result=(angle - fn * (TWOPI_HI * TWO_POW_26)) - fn * (TWOPI_LO * TWO_POW_26);    if (result < 0.0) {      result=-result;      negateResult=!negateResult;    }    fn=(double)(int)(result * INVTWOPI + 0.5);    result=(result - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle < Double.POSITIVE_INFINITY) {    return 0.0;  } else {    return Double.NaN;  }}  }
class C{  public SelectItemGroup(String label){  super("",label);}  }
class C{  protected void initBeanWrapper(BeanWrapper bw){}  }
class C{  private Relation<ParameterizationFunction> preprocess(Database db,Relation<V> vrel){  DBIDs ids=vrel.getDBIDs();  SimpleTypeInformation<ParameterizationFunction> type=new SimpleTypeInformation<>(ParameterizationFunction.class);  WritableDataStore<ParameterizationFunction> prep=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT,ParameterizationFunction.class);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    prep.put(iter,new ParameterizationFunction(vrel.get(iter)));  }  MaterializedRelation<ParameterizationFunction> prel=new MaterializedRelation<>(type,ids,null,prep);  return prel;}  }
class C{  public String toString(){  return "indefinite";}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  public void modifySnapshot(String id,IsilonSnapshot s) throws IsilonException {  modify(_baseUrl.resolve(URI_SNAPSHOTS),id,"snapshot",s);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static UnicodeScript of(int codePoint){  if (!isValidCodePoint(codePoint))   throw new IllegalArgumentException();  int type=getType(codePoint);  if (type == UNASSIGNED)   return UNKNOWN;  int index=Arrays.binarySearch(scriptStarts,codePoint);  if (index < 0)   index=-index - 2;  return scripts[index];}  }
class C{  private void loadChat(){  String text=m_chat.getHistory(MChat.CONFIDENTIALTYPE_Internal).toString();  historyText.setText(text);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  private void saveTestResult(boolean success){  String resolution=mWidth + "x" + mHeight+ "-";  Editor editor=mPreferences.edit();  editor.putBoolean(PREF_PREFIX + resolution + "success",success);  if (success) {    editor.putInt(PREF_PREFIX + resolution + "lastSdk",Build.VERSION.SDK_INT);    editor.putInt(PREF_PREFIX + resolution + "lastVersion",VERSION);    editor.putInt(PREF_PREFIX + resolution + "sliceHeight",mNV21.getSliceHeigth());    editor.putInt(PREF_PREFIX + resolution + "stride",mNV21.getStride());    editor.putInt(PREF_PREFIX + resolution + "padding",mNV21.getYPadding());    editor.putBoolean(PREF_PREFIX + resolution + "planar",mNV21.getPlanar());    editor.putBoolean(PREF_PREFIX + resolution + "reversed",mNV21.getUVPanesReversed());    editor.putString(PREF_PREFIX + resolution + "encoderName",mEncoderName);    editor.putInt(PREF_PREFIX + resolution + "colorFormat",mEncoderColorFormat);    editor.putString(PREF_PREFIX + resolution + "encoderName",mEncoderName);    editor.putString(PREF_PREFIX + resolution + "pps",mB64PPS);    editor.putString(PREF_PREFIX + resolution + "sps",mB64SPS);  }  editor.commit();}  }
class C{  public static void addDatasources(String sourcePath,String destPath,Iterable<DsDef> newDatasources) throws IOException {  if (Util.sameFilePath(sourcePath,destPath)) {    throw new IllegalArgumentException(SOURCE_AND_DESTINATION_PATHS_ARE_THE_SAME);  }  RrdDb rrdSource=new RrdDb(sourcePath);  try {    RrdDef rrdDef=rrdSource.getRrdDef();    rrdDef.setPath(destPath);    for (    DsDef newDatasource : newDatasources) {      rrdDef.addDatasource(newDatasource);    }    RrdDb rrdDest=new RrdDb(rrdDef);    try {      rrdSource.copyStateTo(rrdDest);    }  finally {      rrdDest.close();    }  }  finally {    rrdSource.close();  }}  }
class C{  public void start(int id) throws IllegalStateException, IOException {synchronized (sLock) {    Stream stream=id == 0 ? mAudioStream : mVideoStream;    if (stream != null && !stream.isStreaming()) {      stream.start();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.126 -0500",hash_original_method="980F1FA54E922541E9F37CE45E714F3E",hash_generated_method="FCDDB2333CBDCEDA0B80DCA021DCFF52") @Deprecated public synchronized void removePlugin(Plugin plugin){  int location=mPlugins.indexOf(plugin);  if (location != -1) {    mPlugins.remove(location);  }}  }
class C{  private boolean cmdRequiresStream(String cmd){  for (  String prefix : streamCmdsPrefix) {    if (cmd.startsWith(prefix)) {      return true;    }  }  return streamCmds.contains(cmd);}  }
class C{  public boolean isDisplayChartValues(){  return mDisplayChartValues;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) @Path("/pause") public Response pause(SiteIdListParam idList){  List<String> siteIdList=idList.getIds();  String siteIdStr=StringUtils.join(siteIdList,",");  log.info("Begin to pause standby site from local vdc by uuid: {}",siteIdStr);  List<Site> toBePausedSites=new ArrayList<>();  List<String> siteNameList=new ArrayList<>();  for (  String siteId : siteIdList) {    Site site;    try {      site=drUtil.getSiteFromLocalVdc(siteId);    } catch (    Exception ex) {      log.error("Can't load site {} from ZK",siteId);      throw APIException.badRequests.siteIdNotFound();    }    SiteState state=site.getState();    if (state.equals(SiteState.ACTIVE)) {      log.error("Unable to pause this site {}. It is active",siteId);      throw APIException.badRequests.operationNotAllowedOnActiveSite();    }    if (!state.equals(SiteState.STANDBY_SYNCED)) {      log.error("Unable to pause this site {}. It is in state {}",siteId,state);      throw APIException.badRequests.operationOnlyAllowedOnSyncedSite(site.getName(),state.toString());    }    toBePausedSites.add(site);    siteNameList.add(site.getName());  }  String siteNameStr=StringUtils.join(siteNameList,',');  precheckForPause(siteNameStr);  try {    commonPrecheck();  } catch (  APIException e) {    throw e;  }catch (  Exception e) {    throw APIException.internalServerErrors.pauseStandbyPrecheckFailed(siteNameStr,e.getMessage());  }  InterProcessLock lock=drUtil.getDROperationLock();  List<String> sitesString=new ArrayList<>();  try {    log.info("Pausing sites");    long vdcTargetVersion=DrUtil.newVdcConfigVersion();    coordinator.startTransaction();    for (    Site site : toBePausedSites) {      site.setState(SiteState.STANDBY_PAUSING);      site.setLastStateUpdateTime(System.currentTimeMillis());      coordinator.persistServiceConfiguration(site.toConfiguration());      drUtil.recordDrOperationStatus(site.getUuid(),InterState.PAUSING_STANDBY);      sitesString.add(site.toBriefString());      drUtil.updateVdcTargetVersion(site.getUuid(),SiteInfo.DR_OP_PAUSE_STANDBY,vdcTargetVersion);    }    log.info("Notify all sites for reconfig");    for (    Site site : drUtil.listSites()) {      if (toBePausedSites.contains(site)) {        continue;      }      drUtil.updateVdcTargetVersion(site.getUuid(),SiteInfo.DR_OP_PAUSE_STANDBY,vdcTargetVersion);    }    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.PAUSE_STANDBY,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,StringUtils.join(sitesString,','));    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Failed to pause site {}",siteIdStr,e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.PAUSE_STANDBY,AuditLogManager.AUDITLOG_FAILURE,null,StringUtils.join(sitesString,','));    throw APIException.internalServerErrors.pauseStandbyFailed(siteNameStr,e.getMessage());  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when pausing standby site: %s",siteIdStr));    }  }}  }
class C{  private void addToUses(SsaInsn insn){  RegisterSpecList rl=insn.getSources();  int sz=rl.size();  for (int i=0; i < sz; i++) {    useList[rl.get(i).getReg()].add(insn);  }}  }
class C{  @Override public boolean needsAnotherIteration() throws AdeException {  return !m_trained;}  }
class C{  public Marker createMarker(LatLong p,int resource){  Drawable drawable=activity.getResources().getDrawable(resource);  Bitmap bitmap=AndroidGraphicFactory.convertToBitmap(drawable);  return new Marker(p,bitmap,0,-bitmap.getHeight() / 2);}  }
class C{  @Override public String toString(){  return getClass().getName() + "[attribute=" + myAttribute+ ", field="+ myField+ ", beginIndex="+ beginIndex+ ", endIndex="+ endIndex+ "]";}  }
class C{  protected int bytesPerLine(){  return (72);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    iterator.visit(v);    iteratedObject.visit(v);    body.visit(v);  }}  }
class C{  public UnsignedShort inc(){  return valueOf(getValue() + 1);}  }
class C{  public void initWeibo(String weiboAppId){  mWeiboAppId=weiboAppId;}  }
class C{  public void updateNString(String columnName,String nString) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  protected BaseInterval(ReadableInstant start,ReadablePeriod period){  super();  Chronology chrono=DateTimeUtils.getInstantChronology(start);  iChronology=chrono;  iStartMillis=DateTimeUtils.getInstantMillis(start);  if (period == null) {    iEndMillis=iStartMillis;  } else {    iEndMillis=chrono.add(period,iStartMillis,1);  }  checkInterval(iStartMillis,iEndMillis);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.395 -0400",hash_original_method="8431E20C339A956F4F5D9ADA2478B6A9",hash_generated_method="9FB1861F6C63FC6D75F882C431F43A91") protected void logDiagnostic(String msg){  if (isDiagnosticsEnabled()) {    logRawDiagnostic(diagnosticPrefix + msg);  }}  }
class C{  public TableViewerBuilder input(Object input){  viewer.setInput(input);  return this;}  }
class C{  @AndroidOnly("Uses specific class: " + "org.apache.harmony.security.asn1.ASN1OctetString.") public void testSetMaxCRLNumberLjava_math_BigInteger(){  X509CRLSelector selector=new X509CRLSelector();  BigInteger maxCRL=new BigInteger("10000");  TestCRL crl=new TestCRL(maxCRL);  selector.setMaxCRLNumber(null);  assertTrue("Any CRL should match in the case of null minCRLNumber.",selector.match(crl));  selector.setMaxCRLNumber(maxCRL);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setMaxCRLNumber(new BigInteger("9999"));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=stream.readFields();  this.symbols=(DecimalFormatSymbols)fields.get("symbols",null);  initNative("");  ndf.setPositivePrefix((String)fields.get("positivePrefix",""));  ndf.setPositiveSuffix((String)fields.get("positiveSuffix",""));  ndf.setNegativePrefix((String)fields.get("negativePrefix","-"));  ndf.setNegativeSuffix((String)fields.get("negativeSuffix",""));  ndf.setMultiplier(fields.get("multiplier",1));  ndf.setGroupingSize(fields.get("groupingSize",(byte)3));  ndf.setGroupingUsed(fields.get("groupingUsed",true));  ndf.setDecimalSeparatorAlwaysShown(fields.get("decimalSeparatorAlwaysShown",false));  setRoundingMode((RoundingMode)fields.get("roundingMode",RoundingMode.HALF_EVEN));  final int maximumIntegerDigits=fields.get("maximumIntegerDigits",309);  final int minimumIntegerDigits=fields.get("minimumIntegerDigits",309);  final int maximumFractionDigits=fields.get("maximumFractionDigits",340);  final int minimumFractionDigits=fields.get("minimumFractionDigits",340);  ndf.setMaximumIntegerDigits(maximumIntegerDigits);  super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());  setMinimumIntegerDigits(minimumIntegerDigits);  setMinimumFractionDigits(minimumFractionDigits);  setMaximumFractionDigits(maximumFractionDigits);  setParseBigDecimal(fields.get("parseBigDecimal",false));  if (fields.get("serialVersionOnStream",0) < 3) {    setMaximumIntegerDigits(super.getMaximumIntegerDigits());    setMinimumIntegerDigits(super.getMinimumIntegerDigits());    setMaximumFractionDigits(super.getMaximumFractionDigits());    setMinimumFractionDigits(super.getMinimumFractionDigits());  }}  }
class C{  public boolean hasPublishPermissions(){  AccessToken fbToken=AccessToken.getCurrentAccessToken();  if (fbToken != null && !fbToken.isExpired()) {    return fbToken.getPermissions().contains(PUBLISH_PERMISSIONS.get(0));  }  return false;}  }
class C{  private static TraceList createTrace(final AbstractSQLProvider provider,final String tracesTable,final String tracesColumn,final String containerTable,final int containerId,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00568: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00569: Description argument can not be null");  final CConnection connection=provider.getConnection();  final String query="INSERT INTO " + CTableNames.TRACES_TABLE + "(view_id, name, description) VALUES(?, ?, ?) RETURNING id";  try {    final PreparedStatement statement=connection.getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);    Integer listId=null;    try {      statement.setInt(1,0);      statement.setString(2,name);      statement.setString(3,description);      final ResultSet resultSet=statement.executeQuery();      try {        while (resultSet.next()) {          if (resultSet.isFirst()) {            listId=resultSet.getInt(1);          }        }      }  finally {        resultSet.close();      }    }  finally {      statement.close();    }    connection.executeUpdate("INSERT INTO " + tracesTable + "("+ tracesColumn+ ", trace_id) "+ " VALUES("+ containerId+ ", "+ listId+ ")",true);    PostgreSQLHelpers.updateModificationDate(connection,containerTable,containerId);    return new TraceList(listId,name,description,provider);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public Iterator items(String group,Predicate filter){  if (ALL_ITEMS.equals(group)) {    return items(filter);  }  TupleSet t=getGroup(group);  return (t == null ? Collections.EMPTY_LIST.iterator() : t.tuples(filter));}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public static boolean testPointCircle(double pX,double pY,double centerX,double centerY,double radiusSquared){  double dx=pX - centerX;  double dy=pY - centerY;  double dx2=dx * dx;  double dy2=dy * dy;  return dx2 + dy2 <= radiusSquared;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  DebugCounterResource other=(DebugCounterResource)obj;  if (counterDesc == null) {    if (other.counterDesc != null)     return false;  } else   if (!counterDesc.equals(other.counterDesc))   return false;  if (counterHierarchy == null) {    if (other.counterHierarchy != null)     return false;  } else   if (!counterHierarchy.equals(other.counterHierarchy))   return false;  if (counterValue == null) {    if (other.counterValue != null)     return false;  } else   if (!counterValue.equals(other.counterValue))   return false;  if (metadata == null) {    if (other.metadata != null)     return false;  } else   if (!metadata.equals(other.metadata))   return false;  if (metadataString == null) {    if (other.metadataString != null)     return false;  } else   if (!metadataString.equals(other.metadataString))   return false;  if (moduleName == null) {    if (other.moduleName != null)     return false;  } else   if (!moduleName.equals(other.moduleName))   return false;  return true;}  }
class C{  public Entry<V> next(){  if (!hasNext)   throw new NoSuchElementException();  long[] keyTable=map.keyTable;  if (nextIndex == INDEX_ZERO) {    entry.key=0;    entry.value=map.zeroValue;  } else {    entry.key=keyTable[nextIndex];    entry.value=map.valueTable[nextIndex];  }  currentIndex=nextIndex;  findNextIndex();  return entry;}  }
class C{  private void _serializeList(List list,StringBuilder sb,Set<Object> done) throws ConverterException {  sb.append(goIn());  sb.append("[");  boolean doIt=false;  ListIterator it=list.listIterator();  while (it.hasNext()) {    if (doIt)     sb.append(',');    doIt=true;    _serialize(it.next(),sb,done);  }  sb.append(']');}  }
class C{  public boolean isUseSessionId(){  return sessionIdPattern != null;}  }
class C{  public XMLString trim(){  return fixWhiteSpace(true,true,false);}  }
class C{  @Override public Handle wildcard(GrammarAST node){  ATNState left=newState(node);  ATNState right=newState(node);  left.addTransition(new WildcardTransition(right));  node.atnState=left;  return new Handle(left,right);}  }
class C{  public static String encodeToString(final byte[] bytes){  final int length=bytes.length;  final StringBuilder buffer=new StringBuilder(length * 3);  for (int i=0; i < length; i+=3) {    int p0=bytes[i] & 0xFC;    p0>>=2;    int p1=bytes[i] & 0x03;    p1<<=4;    int p2;    int p3;    if (i + 1 < length) {      p2=bytes[i + 1] & 0xF0;      p2>>=4;      p3=bytes[i + 1] & 0x0F;      p3<<=2;    } else {      p2=0;      p3=0;    }    int p4;    int p5;    if (i + 2 < length) {      p4=bytes[i + 2] & 0xC0;      p4>>=6;      p5=bytes[i + 2] & 0x3F;    } else {      p4=0;      p5=0;    }    if (i + 2 < length) {      buffer.append(ENCODE[p0]);      buffer.append(ENCODE[p1 | p2]);      buffer.append(ENCODE[p3 | p4]);      buffer.append(ENCODE[p5]);    } else     if (i + 1 < length) {      buffer.append(ENCODE[p0]);      buffer.append(ENCODE[p1 | p2]);      buffer.append(ENCODE[p3]);      buffer.append(PAD_CHAR);    } else {      buffer.append(ENCODE[p0]);      buffer.append(ENCODE[p1 | p2]);      buffer.append(PAD_CHAR);      buffer.append(PAD_CHAR);    }  }  return buffer.toString();}  }
class C{  @Override public GTSDecoder dedup() throws IOException {  throw new RuntimeException("Not Implemented");}  }
class C{  public void pOlnI(String s) throws IOException {  pO(s);  pln();  pI();}  }
class C{  private void checkShareTOBlock(){  _shareTOBlock.removePropertyChangeListener(this);  if (log.isDebugEnabled())   log.debug("_shareTOBlock= " + _shareTOBlock.getDisplayName() + " Cleared.");  _shareTOBlock=null;  String msg=_orders.get(_idxCurrentOrder + 1).setPath(this);  if (msg == null) {    restart();    moveIntoNextBlock(END);  } else {    log.info("Warrant \"" + getDisplayName() + "\" shares a turnout. "+ msg);  }}  }
class C{  public ObjectIntHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,null);}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver){  this(qname,namespaceContext,resolver,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.454 -0500",hash_original_method="CC7D93FCE240EB61BF168844CD074EBF",hash_generated_method="E2D2D813F37FE42C06629C9257DB741D") public BoringLayout replaceOrMake(CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,BoringLayout.Metrics metrics,boolean includepad){  replaceWith(source,paint,outerwidth,align,spacingmult,spacingadd);  mEllipsizedWidth=outerwidth;  mEllipsizedStart=0;  mEllipsizedCount=0;  init(source,paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,true);  return this;}  }
class C{  public void meetInheritableFlags(RegisterOperand other){  flags&=other.flags;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int numCheckpoints(){  return checkpoints.size();}  }
class C{  public PaymentDataException(String message){  super(message);}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series){  ParamChecks.nullNotPermitted(dataset,"dataset");  String label=MessageFormat.format(this.formatPattern,createItemArray(dataset,series));  return label;}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public Vector3D normalize(){  double im=1.0 / this.modulus();  this.x*=im;  this.y*=im;  this.z*=im;  return (this);}  }
class C{  public boolean addNotificationEmailAddress(String email){  if (email == null) {    throw new IllegalArgumentException("Adding email adress 'null'.");  } else   if (email.isEmpty()) {    throw new IllegalArgumentException("Adding empty email address.");  } else   if (!EMailUtils.isValidEmailAddress(email)) {    throw new IllegalArgumentException("Adding invalid email address '" + email + "'.");  } else   if (notificationEmailAddresses.contains(email)) {    throw new IllegalArgumentException("Adding email address '" + email + "'.");  } else {    return notificationEmailAddresses.add(email);  }}  }
class C{  synchronized void refresh(){  if (reinitOnRefresh) {    LOG.debug("Reinitialize in thread " + Thread.currentThread().getName());    reinitialize();    reinitOnRefresh=false;    return;  }synchronized (plot) {    boolean refreshcss=false;    if (plotmap == null) {      LOG.warning("Plotmap is null",new Throwable());    }    final int thumbsize=(int)Math.max(screenwidth / plotmap.getWidth(),screenheight / plotmap.getHeight());    for (    PlotItem pi : plotmap.keySet()) {      for (Iterator<PlotItem> iter=pi.itemIterator(); iter.hasNext(); ) {        PlotItem it=iter.next();        for (Iterator<VisualizationTask> tit=it.tasks.iterator(); tit.hasNext(); ) {          VisualizationTask task=tit.next();          Pair<Element,Visualization> pair=vistoelem.get(it,task);          if (pair == null) {            if (visibleInOverview(task)) {              pair=new Pair<>(null,null);              pair.first=plot.svgElement(SVGConstants.SVG_G_TAG);              pair.second=embedOrThumbnail(thumbsize,it,task,pair.first);              vistoelem.get(it,null).first.appendChild(pair.first);              vistoelem.put(it,task,pair);              refreshcss=true;            }          } else {            if (visibleInOverview(task)) {              if (pair.first.hasAttribute(SVGConstants.CSS_VISIBILITY_PROPERTY)) {                pair.first.removeAttribute(SVGConstants.CSS_VISIBILITY_PROPERTY);              }            } else {              if (pair.first != null && pair.first.hasChildNodes()) {                pair.first.setAttribute(SVGConstants.CSS_VISIBILITY_PROPERTY,SVGConstants.CSS_HIDDEN_VALUE);              }            }          }        }      }    }    if (refreshcss) {      plot.updateStyleElement();    }  }}  }
class C{  public Complex conjugate(){  return new Complex(re,-im);}  }
class C{  public boolean isTimeout(){  return timeout;}  }
class C{  @AroundInvoke public Object intercept(InvocationContext ctx) throws Exception {  Monitor mon=null;  MonKeyImp key=null;  String label=null;  if (!isMonitored(ctx)) {    return ctx.proceed();  }  try {    label=getJamonLabel(ctx);    key=new MonKeyImp(label,"ms.");    mon=MonitorFactory.start(key);    return ctx.proceed();  } catch (  Exception e) {    if (key != null) {      key.setDetails(onException(ctx,label,e));    }    throw e;  } finally {    if (mon != null) {      mon.stop();    }  }}  }
class C{  public static RegExpExpression notRegexp(String property,String regExExpression,String escape){  return new RegExpExpression(getPropExpr(property),new ConstantExpression(regExExpression),new ConstantExpression(escape),true);}  }
class C{  public static boolean hasText(String str){  return hasText((CharSequence)str);}  }
class C{  public DImportKeyPairPkcs12(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public static void fill(Object[] a,Object val){  fill(a,0,a.length,val);}  }
class C{  @Override public String flushAll(){  checkIsInMultiOrPipeline();  client.flushAll();  return client.getStatusCodeReply();}  }
class C{  public void initialize(){  final DBTransaction transaction=TransactionPool.get().beginWork();  try {    createTablesUnlessTheyAlreadyExist(transaction);    updateExistingTables(transaction);    TransactionPool.get().commit(transaction);  } catch (  SQLException e) {    logger.error(e,e);    TransactionPool.get().rollback(transaction);  }  registerStendhalDAOs();}  }
class C{  public void prepare(){  flush();}  }
class C{  public int indexOf(java.lang.String str,int fromIndex){  return 0;}  }
class C{  public SimpleOperatorChain(OperatorDescription description){  this(description,"Nested Process");}  }
class C{  public void trapFieldWrite(String name,Object value){  Class jc=getClassMetaobject().getJavaClass();  try {    jc.getField(name).set(getObject(),value);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void clearParentScope(){  this.parentScope=null;}  }
class C{  void onItemClick(MenuItem menuItem){  if (menuItem.isEnabled()) {    dismiss();    mHandler.onOptionsItemSelected(menuItem);  }}  }
class C{  private static void echo(String msg){  assert msg != null;  System.out.println(msg);}  }
class C{  protected int bytesPerLine(){  return (57);}  }
class C{  public TOMMessage[] checkProposedValue(byte[] proposedValue,boolean addToClientManager){  Logger.println("(TOMLayer.isProposedValueValid) starting");  BatchReader batchReader=new BatchReader(proposedValue,this.controller.getStaticConf().getUseSignatures() == 1);  TOMMessage[] requests=null;  try {    requests=batchReader.deserialiseRequests(this.controller);    for (    TOMMessage r : requests) {      if (controller.getStaticConf().isBFT() && !verifier.isValidRequest(r.getContent()))       return null;    }    if (addToClientManager) {      for (int i=0; i < requests.length; i++) {        if (!clientsManager.requestReceived(requests[i],false)) {          clientsManager.getClientsLock().unlock();          Logger.println("(TOMLayer.isProposedValueValid) finished, return=false");          System.out.println("failure in deserialize batch");          return null;        }      }    }  } catch (  Exception e) {    e.printStackTrace();    clientsManager.getClientsLock().unlock();    Logger.println("(TOMLayer.isProposedValueValid) finished, return=false");    return null;  }  Logger.println("(TOMLayer.isProposedValueValid) finished, return=true");  return requests;}  }
class C{  public BeautyEyeLookAndFeelWin(){  super();  BeautyEyeLNFHelper.implLNF();  org.jb2011.lnf.beautyeye.ch20_filechooser.__UI__.uiImpl_win();  initForVista();}  }
class C{  public void mouseClicked(MouseEvent e){  if (isInResizeRegion(e)) {    if (e.getClickCount() == 2)     packColumn(cachedResizingColumn);    uncacheResizingColumn();  } else {    int vc=getColumnModel().getColumnIndexAtX(e.getX());    int mc=convertColumnIndexToModel(vc);    TableColumn column=getTableHeader().getResizingColumn();    if (column != null)     return;    Object renderer=getColumnModel().getColumn(mc).getCellRenderer();    boolean sort=true;    if (renderer instanceof DefaultTableCellRenderer) {      Object cProperty=((DefaultTableCellRenderer)renderer).getClientProperty("SortColumn");      if (cProperty != null)       sort=(Boolean)cProperty;    }    if (sort)     sort(mc);  }}  }
class C{  private void handleAck(GuacamoleInstruction instruction){  List<String> args=instruction.getArgs();  if (args.size() < 3)   return;  String index=args.get(0);  InterceptedStream<InputStream> stream=getInterceptedStream(index);  if (stream == null)   return;  String status=args.get(2);  if (!status.equals("0")) {    int code;    try {      code=Integer.parseInt(status);    } catch (    NumberFormatException e) {      logger.debug("Translating invalid status code \"{}\" to SERVER_ERROR.",status);      code=GuacamoleStatus.SERVER_ERROR.getGuacamoleStatusCode();    }    stream.setStreamError(code,args.get(1));    closeInterceptedStream(stream);    return;  }  readNextBlob(stream);}  }
class C{  private void transformGroupByIfPossible(ExecutionContext context) throws AmbiguousNameException, TypeMismatchException, NameResolutionException {  if (this.groupBy != null) {    List projAttribs=this.projAttrs;    if (projAttribs == null) {      projAttribs=new ArrayList();      List currentIters=context.getCurrentIterators();      for (      Object o : currentIters) {        RuntimeIterator rIter=(RuntimeIterator)o;        String name=rIter.getName();        projAttribs.add(new Object[]{name,rIter});      }    }    if (projAttribs != null && projAttribs.size() != this.groupBy.size()) {      throw new QueryInvalidException(LocalizedStrings.DefaultQuery_PROJ_COL_ABSENT_IN_GROUP_BY.toLocalizedString() + " or " + LocalizedStrings.DefaultQuery_GROUP_BY_COL_ABSENT_IN_PROJ.toLocalizedString());    }    boolean shouldTransform=true;    StringBuffer lhsBuffer=new StringBuffer();    StringBuffer rhsBuffer=new StringBuffer();    outer:     for (int i=0; i < projAttribs.size(); ++i) {      Object[] prj=(Object[])TypeUtils.checkCast(projAttribs.get(i),Object[].class);      CompiledValue groupByAttr=this.groupBy.get(i);      if (prj[0] != null) {        if (groupByAttr instanceof CompiledID) {          if (prj[0].equals(((CompiledID)groupByAttr).getId())) {            lhsBuffer.delete(0,lhsBuffer.length());            rhsBuffer.delete(0,rhsBuffer.length());            continue;          }        }      }      CompiledValue cvProj=(CompiledValue)TypeUtils.checkCast(prj[1],CompiledValue.class);      cvProj.generateCanonicalizedExpression(lhsBuffer,context);      groupByAttr.generateCanonicalizedExpression(rhsBuffer,context);      if (lhsBuffer.length() == rhsBuffer.length()) {        for (int indx=0; indx < lhsBuffer.length(); ++indx) {          if (lhsBuffer.charAt(indx) != rhsBuffer.charAt(indx)) {            shouldTransform=false;            break outer;          }        }      } else {        shouldTransform=false;        break;      }      lhsBuffer.delete(0,lhsBuffer.length());      rhsBuffer.delete(0,rhsBuffer.length());    }    if (shouldTransform && this.orderByAttrs == null) {      this.modifyGroupByToOrderBy(true,context);    } else {      throw new QueryInvalidException(LocalizedStrings.DefaultQuery_PROJ_COL_ABSENT_IN_GROUP_BY.toLocalizedString() + " or " + LocalizedStrings.DefaultQuery_GROUP_BY_COL_ABSENT_IN_PROJ.toLocalizedString());    }  }}  }
class C{  public boolean locked(){  return locked;}  }
class C{  public SecurityException(){  super();}  }
class C{  protected void adjustTextAreaColumnWidth(JScrollPane scrollPane,JTextArea textArea){  ((OperationsPanel)this.getContentPane()).adjustTextAreaColumnWidth(scrollPane,textArea,this.getPreferredSize());}  }
class C{  private VPlexVirtualVolumeInfo createSimpleVirtualVolume() throws VPlexApiException {  String volumeInfo=_properties.getProperty(SIMPLE_VV_INFO_PROP_KEY);  StringTokenizer tokenizer=new StringTokenizer(volumeInfo,",");  String storageSystemGuid=tokenizer.nextToken();  String volumeId=tokenizer.nextToken();  String volumeNativeId=tokenizer.nextToken();  List<VolumeInfo> nativeVolumeInfoList=new ArrayList<VolumeInfo>();  VolumeInfo nativeVolumeInfo=new VolumeInfo(storageSystemGuid,"vmax",volumeId,volumeNativeId,false,Collections.<String>emptyList());  nativeVolumeInfoList.add(nativeVolumeInfo);  List<VPlexClusterInfo> clusterInfoList=_client.getClusterInfoDetails();  VPlexVirtualVolumeInfo vvInfo=_client.createVirtualVolume(nativeVolumeInfoList,false,false,false,null,clusterInfoList,true,false);  return vvInfo;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:53.358 -0500",hash_original_method="DA0D07749F50BCDD6CD0799E453E7E9C",hash_generated_method="CC98DAAB6ACCCA23ED21B8685D8B698C") private String idAsIPAddress(){  return ui(buf[REFERENCE_ID_INDEX]) + "." + ui(buf[REFERENCE_ID_INDEX + 1])+ "."+ ui(buf[REFERENCE_ID_INDEX + 2])+ "."+ ui(buf[REFERENCE_ID_INDEX + 3]);}  }
class C{  private TestInputPanel(NetworkPanel networkPanel,List<Neuron> inputNeurons,NumericMatrix dataHolder){  super(inputNeurons,dataHolder,5,"Test Inputs");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.dataHolder=dataHolder;  this.networkPanel=networkPanel;  initTestInputPanel();}  }
class C{  @Category(FlakyTest.class) @Test public void testStartTwoLocators() throws Exception {  disconnectAllFromDS();  Host host=Host.getHost(0);  VM loc1=host.getVM(1);  VM loc2=host.getVM(2);  int ports[]=AvailablePortHelper.getRandomAvailableTCPPorts(2);  final int port1=ports[0];  this.port1=port1;  final int port2=ports[1];  this.port2=port2;  DistributedTestUtils.deleteLocatorStateFile(port1);  DistributedTestUtils.deleteLocatorStateFile(port2);  final String host0=NetworkUtils.getServerHostName(host);  final String locators=host0 + "[" + port1+ "],"+ host0+ "["+ port2+ "]";  final Properties properties=new Properties();  properties.put(MCAST_PORT,"0");  properties.put(LOCATORS,locators);  properties.put(ENABLE_NETWORK_PARTITION_DETECTION,"false");  properties.put(DISABLE_AUTO_RECONNECT,"true");  properties.put(MEMBER_TIMEOUT,"2000");  properties.put(LOG_LEVEL,LogWriterUtils.getDUnitLogLevel());  properties.put(ENABLE_CLUSTER_CONFIGURATION,"false");  addDSProps(properties);  try {    loc2.invoke("startLocator2",null);    loc1.invoke("startLocator1",null);  }  finally {    try {      loc2.invoke("verifyLocatorNotInSplitBrain",null);      loc1.invoke("verifyLocatorNotInSplitBrain",null);    }  finally {      loc2.invoke("stop locator",null);      loc1.invoke("stop locator",null);    }  }}  }
class C{  public boolean isOnPieChart(Point screenPoint){  double sqValue=(Math.pow(mCenterX - screenPoint.getX(),2) + Math.pow(mCenterY - screenPoint.getY(),2));  double radiusSquared=mPieChartRadius * mPieChartRadius;  boolean isOnPieChart=sqValue <= radiusSquared;  return isOnPieChart;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.378 -0500",hash_original_method="73F3340DC9AFFDCAEE47EFC3606433FD",hash_generated_method="EE604B285EECDD6018DC5ABFCB02AF33") public void rlogin(String localUsername,String remoteUsername,String terminalType) throws IOException {  rexec(localUsername,remoteUsername,terminalType,false);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  Context(){  copyTables();}  }
class C{  @Override public BusinessObjectDefinition updateBusinessObjectDefinitionDescriptiveInformation(BusinessObjectDefinitionKey businessObjectDefinitionKey,BusinessObjectDefinitionDescriptiveInformationUpdateRequest request){  businessObjectDefinitionHelper.validateBusinessObjectDefinitionKey(businessObjectDefinitionKey);  validateBusinessObjectDefinitionDescriptiveInformationUpdateRequest(request);  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDaoHelper.getBusinessObjectDefinitionEntity(businessObjectDefinitionKey);  updateBusinessObjectDefinitionEntityDescriptiveInformation(businessObjectDefinitionEntity,request);  return createBusinessObjectDefinitionFromEntity(businessObjectDefinitionEntity);}  }
class C{  public boolean isSecurityEnabled(){  return securityEnabled;}  }
class C{  public void toggleDock(){  if (dockVisible) {    dockVisible=false;    horizontalSplitter.getBottomComponent().setVisible(false);  } else {    dockVisible=true;    horizontalSplitter.getBottomComponent().setVisible(true);    horizontalSplitter.setDividerLocation(getDividerLocation());  }}  }
class C{  protected void initCheckList(){synchronized (checkList) {    checkList.clear();    createCheckList(checkList);    orderCheckList();    pruneCheckList(checkList);    logger.finest("Checklist initialized.");  }}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  public FactoryDto build(InputStream json) throws IOException, ConflictException {  FactoryDto factory=DtoFactory.getInstance().createDtoFromJson(json,FactoryDto.class);  checkValid(factory);  return factory;}  }
class C{  private void loadHomeScreen(){  Intent i=new Intent();  i.setAction(Intent.ACTION_MAIN);  i.addCategory(Intent.CATEGORY_HOME);  this.startActivity(i);  super.onBackPressed();}  }
class C{  public C instantiateClass(Parameterization config){  if (getValue() == null) {    config.reportError(new UnusedParameterException("Value of parameter " + getName() + " has not been specified."));    return null;  }  try {    config=config.descend(this);    return ClassGenericsUtil.tryInstantiate(restrictionClass,getValue(),config);  } catch (  ClassInstantiationException e) {    config.reportError(new WrongParameterValueException(this,getValue().getCanonicalName(),"Error instantiating class.",e));    return null;  }}  }
class C{  public void testAttRegexp(){  m_Filter=getFilter("ATT1 regexp '(r|g)'");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(15,result.numInstances());}  }
class C{  public synchronized T take(Object key){  return remove(key);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.barcode_capture);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay<BarcodeGraphic>)findViewById(R.id.graphicOverlay);  boolean autoFocus=getIntent().getBooleanExtra(AutoFocus,false);  boolean useFlash=getIntent().getBooleanExtra(UseFlash,false);  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource(autoFocus,useFlash);  } else {    requestCameraPermission();  }  gestureDetector=new GestureDetector(this,new CaptureGestureListener());  scaleGestureDetector=new ScaleGestureDetector(this,new ScaleListener());  Snackbar.make(mGraphicOverlay,"Tap to capture. Pinch/Stretch to zoom",Snackbar.LENGTH_LONG).show();}  }
class C{  protected void fireActionPerformed(String command){  Object[] listeners=listenerList.getListenerList();  long mostRecentEventTime=EventQueue.getMostRecentEventTime();  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      if (e == null) {        e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command,mostRecentEventTime,modifiers);      }      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  @Deprecated public AttributeValueExp(){}  }
class C{  public void println() throws IOException {  out.write(lineSep);}  }
class C{  @Override public void tokenize(String s){  m_N=m_NMax;  m_SplitString=s.split("[" + getDelimiters() + "]");  filterOutEmptyStrings();  m_CurrentPosition=0;  m_MaxPosition=m_SplitString.length;  if (m_SplitString.length < m_NMax) {    m_N=m_SplitString.length;  }}  }
class C{  public void add(final GeneratedMessage.GeneratedExtension<?,?> extension){  if (extension.getDescriptor().getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    if (extension.getMessageDefaultInstance() == null) {      throw new IllegalStateException("Registered message-type extension had null default instance: " + extension.getDescriptor().getFullName());    }    add(new ExtensionInfo(extension.getDescriptor(),extension.getMessageDefaultInstance()));  } else {    add(new ExtensionInfo(extension.getDescriptor(),null));  }}  }
class C{  private void adjustChildrenToGroupChange(){  int index=0;  DecimalRectangle tempBounds;  for (  MathObject mathObj : getObjects()) {    tempBounds=objectBounds.get(index);    mathObj.setxPos(getxPos() + (int)Math.round(tempBounds.getX() * getWidth()));    mathObj.setyPos(getyPos() + (int)Math.round(tempBounds.getY() * getHeight()));    mathObj.setWidth((int)Math.round(tempBounds.getWidth() * getWidth()));    mathObj.setHeight((int)Math.round(tempBounds.getHeight() * getHeight()));    if (mathObj.getWidth() == 0) {      mathObj.setWidth(1);    }    if (mathObj.getHeight() == 0) {      mathObj.setHeight(1);    }    index++;  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  types=null;}  }
