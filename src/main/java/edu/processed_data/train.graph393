class C{  public void verify(String where,boolean checkCFG){  verifyBBConstruction(where);  if (checkCFG) {    verifyCFG(where);  }  if (IRStage < MIR) {    if (VM.BuildForPowerPC) {      verifyRegisterDefs(where);    }    verifyRegisterTypes(where);  }  if (PARANOID) {    verifyUseFollowsDef(where);    verifyInstructions(where);  }}  }
class C{  public static void main(final String[] args){  final MetadataGeneratorTool tool=new MetadataGeneratorTool();  final JCommander jc=new JCommander(tool.args,args);  if (tool.args.help) {    jc.setProgramName("MetadataGeneratorCommandLine");    jc.usage();    return;  }  tool.generate();}  }
class C{  public IdKeyServiceLocator(){  serviceRegistry=ServiceRegistry.getInstance();  methodResolver=new SimpleMethodResolver();}  }
class C{  void limitRowAccess() throws Exception {  System.out.println("Secure Systems Inc. - limit row access");  stat.execute("DROP TABLE IF EXISTS SESSION_USER");  stat.execute("CREATE TABLE SESSION_USER(ID INT, USER INT)");  stat.execute("DROP VIEW IF EXISTS MY_USER");  stat.execute("CREATE VIEW MY_USER AS " + "SELECT U.* FROM SESSION_USER S, USERS U " + "WHERE S.ID=SESSION_ID() AND S.USER=U.ID");  stat.execute("INSERT INTO SESSION_USER VALUES(SESSION_ID(), 1)");  ResultSet rs=stat.executeQuery("SELECT ID, NAME FROM MY_USER");  while (rs.next()) {    System.out.println(rs.getString(1) + ": " + rs.getString(2));  }}  }
class C{  public boolean isPostBudget(){  Object oo=get_Value(COLUMNNAME_PostBudget);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void callOnClose(){  if (!canNavigateAway()) {    return;  }  if (projectChanged && !SystemProperties.getBoolean("findbugs.skipSaveChangesWarning")) {    Object[] options={L10N.getLocalString("dlg.save_btn","Save"),L10N.getLocalString("dlg.dontsave_btn","Don't Save"),L10N.getLocalString("dlg.cancel_btn","Cancel")};    int value=JOptionPane.showOptionDialog(this,getActionWithoutSavingMsg("closing"),edu.umd.cs.findbugs.L10N.getLocalString("msg.confirm_save_txt","Do you want to save?"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);    if (value == 2 || value == JOptionPane.CLOSED_OPTION) {      return;    } else     if (value == 0) {      if (saveFile == null) {        if (!mainFrameLoadSaveHelper.saveAs()) {          return;        }      } else {        mainFrameLoadSaveHelper.save();      }    }  }  GUISaveState guiSaveState=GUISaveState.getInstance();  guiLayout.saveState();  guiSaveState.setFrameBounds(getBounds());  guiSaveState.setExtendedWindowState(getExtendedState());  guiSaveState.save();  if (this.bugCollection != null) {    Cloud cloud=this.bugCollection.getCloud();    cloud.shutdown();  }  System.exit(0);}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent,List<Integer> skipIds){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,skipIds);}  }
class C{  public void onPostProcessRequest(AsyncHttpRequest request){}  }
class C{  @Override public boolean isMmapEnabled(){  return getDelegate().isMmapEnabled();}  }
class C{  public String go(){  return buildPage().write();}  }
class C{  public static PolicyMappings add(PolicyMapping policyMapping,PolicyMappings policyMappings){  List<PolicyMapping> policyMappingsList=PolicyMappingsUtil.getListOfPolicyMappings(policyMappings);  policyMappingsList.add(policyMapping);  policyMappings=PolicyMappingsUtil.createFromList(policyMappingsList);  return policyMappings;}  }
class C{  void multiply(Unsigned16 b){  long[] left=new long[4];  left[0]=lo8 & 0xffffffffl;  left[1]=lo8 >>> 32;  left[2]=hi8 & 0xffffffffl;  left[3]=hi8 >>> 32;  long[] right=new long[5];  right[0]=b.lo8 & 0x7fffffffl;  right[1]=(b.lo8 >>> 31) & 0x7fffffffl;  right[2]=(b.lo8 >>> 62) + ((b.hi8 & 0x1fffffffl) << 2);  right[3]=(b.hi8 >>> 29) & 0x7fffffffl;  right[4]=(b.hi8 >>> 60);  set(0);  Unsigned16 tmp=new Unsigned16();  for (int l=0; l < 4; ++l) {    for (int r=0; r < 5; ++r) {      long prod=left[l] * right[r];      if (prod != 0) {        int off=l * 32 + r * 31;        tmp.set(prod);        tmp.shiftLeft(off);        add(tmp);      }    }  }}  }
class C{  private <T>boolean addToListInternal(Collection<T> list,T value){  if (!list.contains(value)) {    list.add(value);    isModified=true;    return true;  } else {    return false;  }}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[133];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 175; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }        if ((jj_la1_4[i] & (1 << j)) != 0) {          la1tokens[128 + j]=true;        }      }    }  }  for (int i=0; i < 133; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public final void writeChildren(ObjectOutputStream oos) throws IOException {  if (serializable <= 0)   return;  boolean prev=serializing;  serializing=true;  int count=0;synchronized (children) {    Iterator i=children.entrySet().iterator();    while (i.hasNext() && count < serializable) {      Map.Entry entry=(Map.Entry)i.next();      if (entry.getKey() instanceof Serializable) {        try {          oos.writeObject(entry.getKey());          oos.writeObject(entry.getValue());        } catch (        IOException ioe) {          serializing=prev;          throw ioe;        }        count++;      }    }  }  serializing=prev;  if (count != serializable) {    throw new IOException("wrote different number of children than expected");  }}  }
class C{  public TokenImpl(Object data){  fType=T_OTHER;  fData=data;}  }
class C{  @SuppressWarnings("unchecked") @Override protected Object populate(Object obj) throws Exception {  Map map=PropertiesHelper.convertBundleToMap(rb);  BeanUtils.copyProperties(obj,map);  return obj;}  }
class C{  public void clearSessionCache(){  ofy().clear();}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  private static List<Territory> stripLandLockedTerr(final GameData data,final List<Territory> allTerr){  final List<Territory> waterTerrs=new ArrayList<>(allTerr);  final Iterator<Territory> wFIter=waterTerrs.iterator();  while (wFIter.hasNext()) {    final Territory waterFact=wFIter.next();    if (Matches.territoryHasWaterNeighbor(data).invert().match(waterFact)) {      wFIter.remove();    }  }  return waterTerrs;}  }
class C{  public String globalInfo(){  return "Replaces all missing values for nominal, string, numeric and date " + "attributes in the dataset with user-supplied constant values.";}  }
class C{  private SynapsePolarityAndRandomizerPanel(final Window parent,final SynapseGroup synGrp,final RandBehavior randState){  this.parent=parent;  this.synapseGroup=synGrp;  this.randomizerState=randState;}  }
class C{  public void read(InputStream is) throws IOException {  BufferedReader br=new BufferedReader(new InputStreamReader(is,"UTF8"));  String line=null;  String currentJar=null;  Vector<String> jars=new Vector<>();  while ((line=br.readLine()) != null && !line.endsWith(".jar"))   ;  for (; line != null; line=br.readLine()) {    if (line.length() == 0)     continue;    if (line.endsWith(".jar")) {      currentJar=line;      jars.add(currentJar);    } else {      String name=line;      addMapping(name,currentJar);    }  }  jarFiles=jars.toArray(new String[jars.size()]);}  }
class C{  protected boolean beforeDelete(){  for (  MMigrationStep step : getSteps(false)) {    step.deleteEx(true);  }  return true;}  }
class C{  public int createState(){  growStates();  int state=nextState / 2;  states[nextState]=-1;  nextState+=2;  return state;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void writeAppData(byte[] data,int offset,int len) throws IOException {  if (!handshake_started) {    startHandshake();  }  if (logger != null) {    logger.println("SSLSocket.writeAppData: " + len + " "+ SSLRecordProtocol.MAX_DATA_LENGTH);  }  try {    if (len < SSLRecordProtocol.MAX_DATA_LENGTH) {      output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));    } else {      while (len >= SSLRecordProtocol.MAX_DATA_LENGTH) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,SSLRecordProtocol.MAX_DATA_LENGTH));        offset+=SSLRecordProtocol.MAX_DATA_LENGTH;        len-=SSLRecordProtocol.MAX_DATA_LENGTH;      }      if (len > 0) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));      }    }  } catch (  AlertException e) {    reportFatalAlert(e.getDescriptionCode(),e.getReason());  }}  }
class C{  public MessageBuilder withChannel(IChannel channel){  this.channel=channel;  return this;}  }
class C{  public static ExceptionlessInputStream openCompressedStream(String filename){  ExceptionlessInputStream eis=null;  try {    ZipFile zip=new ZipFile(filename);    eis=new ExceptionlessInputStream(new BufferedInputStream(zip.getInputStream(zip.getEntry(zipEntryName))));  } catch (  Exception e) {    System.err.println("Can't open '" + filename + "' for input:");    e.printStackTrace();    System.exit(1);  }  return eis;}  }
class C{  @Override protected void destroy(){  super.destroy();  clearJars();}  }
class C{  public byte[] retrieveFolderDocumentFile(AcsAccessObject acs,ArchiveObject arch,FolderObject fdr,int docId,String entidad) throws Exception {  byte[] fileData=null;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (acs == null)     fileData=FolderMdoFdr.retrieveFolderDocumentFile(dbConn,null,arch.getArchiveToken(),fdr.getFolderToken(),docId,entidad); else     fileData=FolderMdoFdr.retrieveFolderDocumentFile(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdr.getFolderToken(),docId,entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return fileData;}  }
class C{  static public Database createDatabase(String url,String user,String password,boolean privileged,String vendor) throws SQLException {  Database database;  if (url.startsWith("jdbc:drizzle"))   database=new DrizzleDatabase(); else   if (url.startsWith("jdbc:mysql:thin"))   database=new MySQLDrizzleDatabase(); else   if (url.startsWith("jdbc:mysql"))   database=new MySQLDatabase(); else   if (url.startsWith("jdbc:oracle"))   database=new OracleDatabase(); else   if (url.startsWith("jdbc:derby"))   database=new DerbyDatabase(); else   if (url.startsWith("jdbc:postgresql") && (vendor == null || vendor.equals("postgresql")))   database=new PostgreSQLDatabase(); else   if (url.startsWith("jdbc:postgresql") && (vendor != null && vendor.equals("greenplum")))   database=new GreenplumDatabase(); else   if (url.startsWith("jdbc:postgresql") && (vendor != null && vendor.equals("redshift")))   database=new RedshiftDatabase(); else   if (url.startsWith("jdbc:vertica"))   database=new VerticaDatabase(); else   throw new RuntimeException("Unsupported URL type: " + url);  database.setUrl(url);  database.setUser(user);  database.setPassword(password);  database.setPrivileged(privileged);  return database;}  }
class C{  static public void writeText(Writer out,boolean escapeUnicode,boolean escapeIsocode,char[] buff,String text,char[] textBuff) throws IOException {  int length=text.length();  if (length >= 16) {    text.getChars(0,length,textBuff,0);    writeText(out,escapeUnicode,escapeIsocode,buff,textBuff,0,length);  } else {    int buffLength=buff.length;    int buffIndex=0;    for (int i=0; i < length; i++) {      char ch=text.charAt(i);      buffIndex=writeTextChar(out,escapeUnicode,escapeIsocode,ch,buffIndex,buff,buffLength);    }    flushBuffer(out,buff,buffIndex);  }}  }
class C{  private void updateNotification(){  if (mNotificationHelper == null) {    return;  }  if (!mAnyActivityInForeground && isPlaying()) {    mNotificationHelper.buildNotification(getAlbumName(),getArtistName(),getTrackName(),getAlbumId(),getAlbumArt(),isPlaying());  } else   if (mAnyActivityInForeground) {    mNotificationHelper.killNotification();    if (!isPlaying()) {      updateRemoteControlClient(PLAYSTATE_STOPPED);    }  }}  }
class C{  public int size(){  return tupleTags.size();}  }
class C{  public void endResizingFrame(JComponent f){  Rectangle r=ghostPanel.getBounds();  f.setVisible(true);  f.setBounds(r);  ghostPanel.setCursor(oldCursor);  targetPane.remove(ghostPanel);  f.validate();}  }
class C{  public boolean isForwardSlide(){  return forward;}  }
class C{  public void reset(){  sumXX=0.;  sumXY=0.;  sumYY=0.;  meanX=0.;  meanY=0.;  sumWe=0.;}  }
class C{  @Deprecated public void enableExceptionDetail(boolean enable){}  }
class C{  public boolean readBool() throws TException {  if (boolValue_ != null) {    boolean result=boolValue_.booleanValue();    boolValue_=null;    return result;  }  return readByte() == Types.BOOLEAN_TRUE;}  }
class C{  public ConstructTemplateAction(String templateName){  super(templateName);  if (templateName == null) {    throw new NullPointerException("Template filename must not be " + "null.");  }  this.templateName=templateName;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (!uri.equals(currentSection.ns) || trigger(uri,localName,(String)elementsLocalNameStack.peek()))   startSection(uri);  elementsLocalNameStack.push(localName);  currentSection.depth++;  if (currentSection.contextDependent)   currentSection.context.push(localName);  boolean transformAttributes=processAttributes(attributes);  for (int i=0, len=currentSection.activeHandlers.size(); i < len; i++) {    ContentHandler handler=(ContentHandler)(currentSection.activeHandlers.elementAt(i));    handler.startElement(uri,localName,qName,transformAttributes ? filterAttributes((IntSet)activeHandlersAttributeIndexSets.elementAt(i),attributes) : attributes);  }  if (currentSection.depth == 1 && currentSection.placeholderHandlers.size() > 0) {    AttributesImpl atts=new AttributesImpl();    atts.addAttribute("","ns","ns","",uri);    atts.addAttribute("","localName","localName","",localName);    for (int i=0, len=currentSection.placeholderHandlers.size(); i < len; i++) {      ContentHandler handler=(ContentHandler)(currentSection.placeholderHandlers.elementAt(i));      handler.startPrefixMapping("","http://purl.oclc.org/dsdl/nvdl/ns/instance/1.0");      handler.startElement("http://purl.oclc.org/dsdl/nvdl/ns/instance/1.0","placeholder","placeholder",atts);    }  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  private List<Annotation> createZipkinAnnotations(org.apache.htrace.core.Span hTraceSpan,Endpoint ep){  List<Annotation> annotationList=new ArrayList<Annotation>();  annotationList.add(createZipkinAnnotation(zipkinCoreConstants.CLIENT_SEND,hTraceSpan.getStartTimeMillis(),ep,true));  annotationList.add(createZipkinAnnotation(zipkinCoreConstants.SERVER_RECV,hTraceSpan.getStartTimeMillis(),ep,true));  for (  TimelineAnnotation ta : hTraceSpan.getTimelineAnnotations()) {    annotationList.add(createZipkinAnnotation(ta.getMessage(),ta.getTime(),ep,true));  }  annotationList.add(createZipkinAnnotation(zipkinCoreConstants.SERVER_SEND,hTraceSpan.getStopTimeMillis(),ep,false));  annotationList.add(createZipkinAnnotation(zipkinCoreConstants.CLIENT_RECV,hTraceSpan.getStopTimeMillis(),ep,false));  return annotationList;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mNum=getArguments() != null ? getArguments().getInt("num") : 1;}  }
class C{  public static Option createFlag(String name,String description){  return new Option(Type.FLAG,name,0,description);}  }
class C{  public SearchQuerySQL(final String searchQuery,final String countQuery,final List<Object> params){  this.searchQuery=searchQuery;  this.countQuery=countQuery;  if (params != null) {    this.params=params.toArray();  }}  }
class C{  private ValueWrapper(Object value){  this.value=value instanceof Serializable ? (Serializable)value : null;  this.type=value != null ? value.getClass() : null;  this.stringRepresentation=String.valueOf(value);  this.identityHashCode=System.identityHashCode(value);}  }
class C{  @Override public void exceptionCaught(IoSession session,Throwable cause) throws Exception {  cause.printStackTrace();}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  @Override public int hashCode(){  int hash=LangUtils.HASH_SEED;  hash=LangUtils.hashCode(hash,username);  hash=LangUtils.hashCode(hash,password);  return hash;}  }
class C{  @Override public void pluginInitialize(){  this.initTelephonyReceiver();}  }
class C{  private static final boolean isHeaderEnd(StringBuilder sb){  int len=sb.length();  if (len > 2) {    if (LF2.equals(sb.substring(len - 2))) {      return true;    }  }  if (len > 4) {    if (CRLF2.equals(sb.substring(len - 4))) {      return true;    }  }  return false;}  }
class C{  public static CCShuffleTiles action(int s,ccGridSize gridSize,float d){  return new CCShuffleTiles(s,gridSize,d);}  }
class C{  public boolean sendDTMF(int digit){  return mSession.sendDTMF(digit);}  }
class C{  public K peekFirst(){  return buffer[getIndex(readPos)];}  }
class C{  public final String toString(){  return TextIO.asciiBoard(this);}  }
class C{  protected void initializeController(){  if (controller != null) {    return;  }  controller=CoreController.getInstance();}  }
class C{  public int count(){  return count;}  }
class C{  public void update(Graphics g,JComponent c){  SeaGlassContext context=getContext(c);  SeaGlassLookAndFeel.update(context,g);  context.getPainter().paintLabelBackground(context,g,0,0,c.getWidth(),c.getHeight());  paint(context,g);  context.dispose();}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public final void testGetCrtCoefficient(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L));  assertTrue(BigInteger.valueOf(5L).equals(ks.getCrtCoefficient()));}  }
class C{  public void addFragment(FeedbackFragment fragment){  mFragments.add(fragment);}  }
class C{  public Builder(@NonNull final Context context){  this(context,-1);}  }
class C{  public void assembleSatellite(){  int powerStorage=0, powerGeneration=0, maxData=0;  SatelliteProperties properties;  String satType=SatelliteRegistry.getSatelliteProperty(inventory[0]).getSatelliteType();  SatelliteBase sat=SatelliteRegistry.getSatallite(satType);  for (int i=0; i < 7; i++) {    ItemStack stack=getStackInSlot(i);    if (stack != null) {      properties=SatelliteRegistry.getSatelliteProperty(stack);      if (!sat.acceptsItemInConstruction(stack))       continue;      powerStorage+=properties.getPowerStorage();      powerGeneration+=properties.getPowerGeneration();      maxData+=properties.getMaxDataStorage();      decrStackSize(i,1);    }  }  if (!worldObj.isRemote) {    properties=new SatelliteProperties(powerGeneration,powerStorage,satType,maxData);    properties.setId(DimensionManager.getInstance().getNextSatelliteId());    ItemSatellite satItem=(ItemSatellite)AdvancedRocketryItems.itemSatellite;    ItemStack output=new ItemStack(satItem);    satItem.setSatellite(output,properties);    inventory[chipSlot]=sat.getContollerItemStack(inventory[chipSlot],properties);    inventory[holdingSlot]=output;  }  completionTime=100;}  }
class C{  public IndTestTrekSep(ICovarianceMatrix covMatrix,double alpha,List<List<Node>> clustering,List<Node> latents){  this.clustering=clustering;  this.covMatrix=covMatrix;  this.variables=Collections.unmodifiableList(covMatrix.getVariables());  this.indexMap=indexMap(variables,latents);  this.nameMap=nameMap(variables);  this.latents=latents;  setAlpha(alpha);}  }
class C{  public boolean isZoomXEnabled(){  return mZoomXEnabled;}  }
class C{  public MandatoryUdaMissingException(){  super();}  }
class C{  public void preEvaluationStatistics(final EvolutionState state){  for (int subpopulation=0; subpopulation < state.population.subpops.length; subpopulation++) {    double averageSize=0;    for (int i=0; i < state.population.subpops[subpopulation].individuals.length; i++)     averageSize+=state.population.subpops[subpopulation].individuals[i].size();    averageSize/=state.population.subpops[subpopulation].individuals.length;    for (int i=0; i < state.population.subpops[subpopulation].individuals.length; i++) {      if ((state.population.subpops[subpopulation].individuals[i].size() > averageSize) && (state.random[0].nextDouble() < killProportion)) {        Individual ind=state.population.subpops[subpopulation].individuals[i];        setMinimumFitness(state,subpopulation,ind);        ind.evaluated=true;      }    }  }}  }
class C{  void init(boolean decrypting,String algorithm,byte[] keyValue,byte[] ivValue,int tagLenBytes) throws InvalidKeyException {  if (keyValue == null || ivValue == null) {    throw new InvalidKeyException("Internal error");  }  this.embeddedCipher.init(false,algorithm,keyValue);  this.subkeyH=new byte[AES_BLOCK_SIZE];  this.embeddedCipher.encryptBlock(new byte[AES_BLOCK_SIZE],0,this.subkeyH,0);  this.iv=ivValue.clone();  preCounterBlock=getJ0(iv,subkeyH);  byte[] j0Plus1=preCounterBlock.clone();  increment32(j0Plus1);  gctrPAndC=new GCTR(embeddedCipher,j0Plus1);  ghashAllToS=new GHASH(subkeyH);  this.tagLenBytes=tagLenBytes;  if (aadBuffer == null) {    aadBuffer=new ByteArrayOutputStream();  } else {    aadBuffer.reset();  }  processed=0;  sizeOfAAD=0;  if (decrypting) {    ibuffer=new ByteArrayOutputStream();  }}  }
class C{  public Initializer(ClassLoader classLoader){  this.classLoader=classLoader;}  }
class C{  public GlobalStopAction(Workspace workspace){  super("Global stop",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Stop.png"));  putValue(SHORT_DESCRIPTION,"Global iterate network update algorithm");}  }
class C{  public void releaseWriteLock(){}  }
class C{  public void removeListener(final IAddressSpaceContentListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static Quaternion createFromMatrix(Matrix4x4 m){  double s=0.0f;  double[] q=new double[4];  double trace=m.matrix[0][0] + m.matrix[1][1] + m.matrix[2][2];  if (trace > 0.0f) {    s=0.5 / Math.sqrt(trace + 1.0);    q[0]=(m.matrix[2][1] - m.matrix[1][2]) * s;    q[1]=(m.matrix[0][2] - m.matrix[2][0]) * s;    q[2]=(m.matrix[1][0] - m.matrix[0][1]) * s;    q[3]=0.25 / s;  } else {    int[] nxt=new int[]{1,2,0};    int i=0, j=0, k=0;    if (m.matrix[1][1] > m.matrix[0][0]) {      i=1;    }    if (m.matrix[2][2] > m.matrix[i][i]) {      i=2;    }    j=nxt[i];    k=nxt[j];    s=2.0f * Math.sqrt((m.matrix[i][i] - m.matrix[j][j] - m.matrix[k][k]) + 1.0f);    double ss=1.0 / s;    q[i]=s * 0.25f;    q[j]=(m.matrix[j][i] + m.matrix[i][j]) * ss;    q[k]=(m.matrix[k][i] + m.matrix[i][k]) * ss;    q[3]=(m.matrix[k][j] - m.matrix[j][k]) * ss;  }  return new Quaternion((float)q[3],(float)q[0],(float)q[1],(float)q[2]);}  }
class C{  public String toString(){  return "AcctSchemaElement[" + get_ID() + "-"+ getName()+ "("+ getElementType()+ ")="+ getDefaultValue()+ ",Pos="+ getSeqNo()+ "]";}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    boolean sixpack=((count % 6) == 0);    if (sixpack) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context){  this(severity,msg,context,null,NO_CODE,null);}  }
class C{  public boolean hasKilledShared(final String name){  final String count=player.getKeyedSlot(KILL_SLOT_NAME,PREFIX_SHARED + name);  return MathHelper.parseIntDefault(count,0) > 0;}  }
class C{  public String showServiceListSearch(){  String phrase=getServicePagingBean().getSearchPhrase();  String tmp=TrimConverter.stripToNull(phrase);  if (tmp == null) {    return showServiceList();  }  getRequest().setAttribute(Constants.REQ_ATTR_SEARCH_REQUEST,phrase);  getServicePagingBean().setFilterTag(null);  return OUTCOME_SHOW_SERVICE_LIST;}  }
class C{  public void loadServers(Context context){  if (!serversLoaded) {    Database db=new Database(context);    servers=db.getServers();    db.close();    serversLoaded=true;  }}  }
class C{  public T caseConditionRHS_(ConditionRHS_ object){  return null;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RegionResponse.create(dm,this.getSender(),this);}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  public static XMLReader createXMLReader(boolean validating) throws SAXException {  XMLReader reader=null;  if (reader == null) {    reader=createXMLReaderViaJAXP(validating,true);  }  if (reader == null) {    try {      reader=XMLReaderFactory.createXMLReader();    } catch (    Exception e) {      if (isVerboseErrorReporting()) {        System.out.println("Warning: Caught exception attempting " + "to use SAX to load a SAX XMLReader ");        System.out.println("Warning: Exception was: " + e);        System.out.println("Warning: I will print the stack trace " + "then carry on using the default " + "SAX parser");        e.printStackTrace();      }      throw new SAXException(e);    }  }  if (reader == null) {    throw new SAXException("Couldn't create SAX reader");  }  return reader;}  }
class C{  public boolean maxValue(long val,long maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  public static DataSet continuousSerializableInstance(){  List<Node> variables=new LinkedList<>();  variables.add(new ContinuousVariable("X"));  DataSet dataSet=new ColtDataSet(10,variables);  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      dataSet.setDouble(i,j,RandomUtil.getInstance().nextDouble());    }  }  return dataSet;}  }
class C{  public static void main(String... args){  String testSrc=System.getProperty("test.src");  File baseDir=(testSrc == null) ? null : new File(testSrc);  boolean ok=new SourceTreeScannerTest().run(baseDir,args);  if (!ok) {    if (testSrc != null)     throw new Error("failed"); else     System.exit(1);  }}  }
class C{  public static void print(final PrintStream out,final String name,final Percentile p){  if (p.isReady()) {    try {      final StringBuilder sb=new StringBuilder(512);      final float[] q=p.getQuantiles();      final float[] e=p.getEstimates();      final int SCREENWIDTH=80;      sb.append(name);      sb.append(", min(");      sb.append(p.getMin());      sb.append("), max(");      sb.append(p.getMax());      sb.append(')');      sb.append("\n");      final float max=e[e.length - 1];      for (int i=0; i < q.length; i++) {        sb.append(String.format("%4.3f",q[i]));        sb.append(": ");        final int len=(int)(e[i] / max * SCREENWIDTH);        for (int j=0; j < len; j++) {          sb.append('#');        }        sb.append(" ");        sb.append(String.format("%4.3f\n",e[i]));      }      out.println(sb.toString());    } catch (    InsufficientSamplesException e) {    }  }}  }
class C{  public ExpressionsItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  protected CSSSelectorFactory(){}  }
class C{  @Override public String fromNodeString(){  return getTypeString() + " " + _fromNode;}  }
class C{  public static int hash(Object o){  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void remove(Component component){  if (component == leftComponent) {    leftComponent=null;  } else   if (component == rightComponent) {    rightComponent=null;  }  super.remove(component);  revalidate();  repaint();}  }
class C{  public IotpConnector(Properties options){  this.options=options;}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public synchronized void waitSeqnoGreaterEqual(long waitSeqno) throws InterruptedException {  if (logger.isDebugEnabled())   logger.debug("Waiting for sequence number: " + waitSeqno);  while (waitSeqno > seqno)   this.wait();}  }
class C{  public List<List<Coord>> readLines(File file) throws IOException {  List<List<Coord>> lines=new ArrayList<List<Coord>>();  String type;  init(new FileReader(file));  while ((type=nextType()) != null) {    if (type.equals(LINESTRING)) {      lines.add(parseLineString(readNestedContents()));    } else {      readNestedContents();    }  }  return lines;}  }
class C{  public void cmd_text(){  if (m_cmdTextRunning)   return;  m_cmdTextRunning=true;  String text=m_text.getText();  log.info("Text=" + text);  if (text == null || text.length() == 0 || text.equals("%")) {    cmd_button();    m_cmdTextRunning=false;    return;  }  if (!text.endsWith("%"))   text+="%";  String sql="SELECT C_ValidCombination_ID FROM C_ValidCombination " + "WHERE C_AcctSchema_ID=?" + " AND (UPPER(Alias) LIKE ? OR UPPER(Combination) LIKE ?)";  sql=MRole.getDefault().addAccessSQL(sql,"C_ValidCombination",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_AcctSchema_ID");  int C_ValidCombination_ID=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_AcctSchema_ID);    pstmt.setString(2,text.toUpperCase());    pstmt.setString(3,text.toUpperCase());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      C_ValidCombination_ID=rs.getInt(1);      if (rs.next())       C_ValidCombination_ID=0;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  if (C_ValidCombination_ID > 0) {    Integer newValue=new Integer(C_ValidCombination_ID);    setValue(newValue);    try {      fireVetoableChange(m_columnName,null,newValue);    } catch (    PropertyVetoException pve) {    }  } else   cmd_button();  m_cmdTextRunning=false;}  }
class C{  public Boolean isTruncated(){  return truncated;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case DPID:    return isSetDpid();case PORT:  return isSetPort();}throw new IllegalStateException();}  }
class C{  public DialChart(CategorySeries dataset,DialRenderer renderer){  super(dataset,renderer);  mRenderer=renderer;}  }
class C{  public void saveCommandHistoryList(ArrayList<String> commandHistory){  StringBuilder sb=new StringBuilder();  for (  String s : commandHistory) {    if (sb.length() > 0) {      sb.append(';');    }    sb.append(s.replace("\\","\\\\").replace(";","\\;"));  }  commandHistoryString=sb.toString();  saveProperties(null);}  }
class C{  @Override public final EppOutput run() throws EppException {  try {    return runWithoutLogging();  } catch (  EppException e) {    logger.warning("Login failed: " + e.getMessage());    throw e;  }}  }
class C{  private double binomialCoefficientLn(final int n,final int k){  QL.require(n >= 0,"n < 0 not allowed");  QL.require(k >= 0,"k < 0 not allowed");  QL.require(n >= k,"n < k not allowed");  return factorial.ln(n) - factorial.ln(k) - factorial.ln(n - k);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.EXISTENTIAL_TYPE_REF__WILDCARD:    if (resolve)     return getWildcard();  return basicGetWildcard();case TypeRefsPackage.EXISTENTIAL_TYPE_REF__BOUND_TYPE_VARIABLE:if (resolve) return getBoundTypeVariable();return basicGetBoundTypeVariable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private synchronized void mergeBitSet(){  if (this.bitSet != null && this.bitSetVersion < this.version) {    addBitSetExceptions((int)(this.version - this.bitSetVersion),this.version);  }}  }
class C{  public CUCorrectionProposal(String name,TextChange change,int relevance,Document document,Images image){  super(name,change,relevance,image);  this.document=document;}  }
class C{  public void removeCFX(String name) throws ExpressionException, SecurityException {  checkWriteAccess();  if (name == null || name.length() == 0)   throw new ExpressionException("name for CFX Tag can be a empty value");  renameOldstyleCFX();  Element mappings=_getRootElement("ext-tags");  Element[] children=XMLConfigWebFactory.getChildren(mappings,"ext-tag");  for (int i=0; i < children.length; i++) {    String n=children[i].getAttribute("name");    if (n != null && n.equalsIgnoreCase(name)) {      mappings.removeChild(children[i]);    }  }}  }
class C{  public static void enableSleepMode(){  lock.reenableKeyguard();}  }
class C{  private void appendMultiLineStringTaggedText(MultiLineString multiLineString,int level,Writer writer) throws IOException {  appendMultiLineStringText(multiLineString,level,false,writer);}  }
class C{  public void testIterator() throws InterruptedException {  LinkedBlockingQueue q=populatedQueue(SIZE);  Iterator it=q.iterator();  while (it.hasNext()) {    assertEquals(it.next(),q.take());  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCTURAL_TYPE___IS_FINAL:    return isFinal();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void handleStart(Operation startOperation){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=startOperation.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (startState.taskState.stage == TaskState.TaskStage.CREATED) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  startOperation.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public String taskName(){  return taskName;}  }
class C{  private static Bundle _loadBundle(BundleContext context,String path,InputStream is,boolean closeStream) throws BundleException {  log(Log.LEVEL_INFO,"add bundle:" + path);  try {    return context.installBundle(path,is);  }  finally {    if (closeStream && is != null) {      try {        is.close();      } catch (      Throwable t) {      }    }  }}  }
class C{  private String scanTagDirectivePrefix(Mark startMark){  String value=scanTagUri("directive",startMark);  if (Constant.NULL_BL_LINEBR.hasNo(reader.peek())) {    throw new ScannerException("while scanning a directive",startMark,"expected ' ', but found " + reader.peek() + "("+ ((int)reader.peek())+ ")",reader.getMark());  }  return value;}  }
class C{  private static boolean isSource(Vertex<LongWritable,MapWritable,FloatWritable> vertex){  return vertex.getValue().get(IS_SOURCE_KEY) != null;}  }
class C{  public DoubleTag(double value){  super(TagType.DOUBLE);  this.value=value;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  String elementValue=null;  if ("".equals(uri))   elementValue=qName; else   elementValue=uri + localName;  if (elementValue.equals("adempiereAD")) {    processDeferElements();    processMenuElements();    if (!PK_Status.equals("Completed with errors"))     PK_Status="Completed successfully";    StringBuffer sqlB=new StringBuffer("UPDATE AD_Package_Imp " + "SET PK_Status = '" + PK_Status + "' WHERE AD_Package_Imp_ID = "+ AD_Package_Imp_ID);    int no=DB.executeUpdate(sqlB.toString(),m_trxName);    if (no == -1)     log.info("Update to package summary failed");    sqlB=new StringBuffer("UPDATE AD_Package_Imp_Inst " + "SET PK_Status = '" + PK_Status + "' WHERE AD_Package_Imp_Inst_ID = "+ AD_Package_Imp_Inst_ID);    no=DB.executeUpdate(sqlB.toString(),m_trxName);    if (no == -1)     log.info("Update to package list failed");    if (workflow.size() > 0) {      for (      Element e : workflow) {        Attributes atts=e.attributes;        String workflowName=atts.getValue("Name");        MWorkflow wf=null;        int workflow_id=IDFinder.get_IDWithColumn("AD_Workflow","Name",workflowName,m_AD_Client_ID,m_trxName);        if (workflow_id > 0) {          wf=new MWorkflow(m_ctx,workflow_id,m_trxName);          int node_id=0;          String name=atts.getValue("ADWorkflowNodeNameID");          if (name != null && name.trim().length() > 0) {            MWFNode[] nodes=wf.getNodes(false,m_AD_Client_ID);            for (            MWFNode node : nodes) {              if (node.getName().trim().equals(name.trim())) {                node_id=node.getAD_WF_Node_ID();                wf.setAD_WF_Node_ID(node_id);                if (!wf.save())                 System.out.println("Can not save Start Node " + name + "to Workflow "+ workflowName+ " do not exist ");                break;              }            }            if (node_id == 0)             System.out.println("Unresolved: Start Node to Workflow " + workflowName + " do not exist "); else             break;          }        }      }    }    if (nodes.size() > 0) {      for (      Element e : nodes) {        Attributes atts=e.attributes;        String nodeName=atts.getValue("Name");        MWFNode node=null;        int id=IDFinder.get_IDWithColumn("AD_WF_Node","Name",nodeName,m_AD_Client_ID,false,m_trxName);        if (id > 0) {          node=new MWFNode(m_ctx,id,m_trxName);          String workflowNodeName=atts.getValue("WorkflowNameID").trim();          if (workflowNodeName != null && workflowNodeName.trim().length() > 0) {            int workflow_id=IDFinder.get_IDWithColumn("AD_Workflow","Name",workflowNodeName,m_AD_Client_ID,m_trxName);            if (workflow_id > 0) {              node.setWorkflow_ID(workflow_id);              if (!node.save()) {                System.out.println("can not save Workflow " + workflowNodeName);              }            } else             System.out.println("Unresolved: Workflow " + workflowNodeName + " do not exist ");          }        }      }    }    logDocument.endElement("","","adempiereDocument");    logDocument.endDocument();    try {      fw_document.close();    } catch (    Exception e) {    }    setupHandlers();  } else {    Element e=stack.pop();    if (e.defer) {      defer.add(new DeferEntry(e,false));    } else {      ElementHandler handler=handlers.get(elementValue);      if (handler != null)       handler.endElement(m_ctx,e);      if (e.defer || e.deferEnd)       defer.add(new DeferEntry(e,false)); else       if (!e.skip) {        if (log.isLoggable(Level.INFO))         log.info("Processed: " + e.getElementValue() + " - "+ e.attributes.getValue(0));      }    }  }}  }
class C{  public Boolean isSortFoldersFirst(){  return sortFoldersFirst;}  }
class C{  public TypeDeclarationStatement newTypeDeclarationStatement(AbstractTypeDeclaration decl){  TypeDeclarationStatement result=new TypeDeclarationStatement(this);  if (this.apiLevel == AST.JLS2) {    result.internalSetTypeDeclaration((TypeDeclaration)decl);  }  if (this.apiLevel >= AST.JLS3) {    result.setDeclaration(decl);  }  return result;}  }
class C{  public void signInOctetStream(OutputStream os) throws CanonicalizationException, InvalidCanonicalizerException, XMLSecurityException {  if (this.c14nizedBytes == null) {    Canonicalizer c14nizer=Canonicalizer.getInstance(this.getCanonicalizationMethodURI());    c14nizer.setWriter(os);    String inclusiveNamespaces=this.getInclusiveNamespaces();    if (inclusiveNamespaces == null) {      c14nizer.canonicalizeSubtree(this.constructionElement);    } else {      c14nizer.canonicalizeSubtree(this.constructionElement,inclusiveNamespaces);    }  } else {    try {      os.write(this.c14nizedBytes);    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public static void filterJavaFiles(ArrayList<File> list){  for (int i=0; i < list.size(); i++) {    String str=list.get(i).getName();    boolean isjavaCode=str.substring(str.lastIndexOf('.')).equals(".java");    if (!isjavaCode)     list.remove(i);  }}  }
class C{  public void removeAllPlots(){  m_plot.removeAllPlots();}  }
class C{  private void createSinglePropertyContents(SingleProperty<?> property,Composite parent){  AbstractPropertyControl<?,?> propertyControl=AbstractPropertyControl.createFor(property,this);  propertyControl.create(parent);  propertyControls.add(propertyControl);}  }
class C{  @Override public void remove(){}  }
class C{  private void updateBoundsForAddedItem(TimeSeriesDataItem item){  Number yN=item.getValue();  if (item.getValue() != null) {    double y=yN.doubleValue();    this.minY=minIgnoreNaN(this.minY,y);    this.maxY=maxIgnoreNaN(this.maxY,y);  }}  }
class C{  private boolean checkUpdateRemoteStateIfActive(int streamType){synchronized (mRCStack) {    try {      for (int index=mRCStack.size() - 1; index >= 0; index--) {        final RemoteControlStackEntry rcse=mRCStack.elementAt(index);        if ((rcse.mPlaybackType == RemoteControlClient.PLAYBACK_TYPE_REMOTE) && isPlaystateActive(rcse.mPlaybackState.mState) && (rcse.mPlaybackStream == streamType)) {          if (DEBUG_RC)           Log.d(TAG,"remote playback active on stream " + streamType + ", vol ="+ rcse.mPlaybackVolume);synchronized (mMainRemote) {            mMainRemote.mRccId=rcse.mRccId;            mMainRemote.mVolume=rcse.mPlaybackVolume;            mMainRemote.mVolumeMax=rcse.mPlaybackVolumeMax;            mMainRemote.mVolumeHandling=rcse.mPlaybackVolumeHandling;            mMainRemoteIsActive=true;          }          return true;        }      }    } catch (    ArrayIndexOutOfBoundsException e) {      Log.e(TAG,"Wrong index accessing RC stack, lock error? ",e);    }  }synchronized (mMainRemote) {    mMainRemoteIsActive=false;  }  return false;}  }
class C{  public boolean canTraverseOutsideSubtree(){  return (null == m_arg0) ? false : super.canTraverseOutsideSubtree();}  }
class C{  public static boolean containsBodySchema(Map<String,RamlMimeType> body,RamlRoot document,boolean checkForValidSchema){  if (CollectionUtils.isEmpty(body)) {    return false;  }  for (  Entry<String,RamlMimeType> bodyMime : body.entrySet()) {    RamlMimeType mime=bodyMime.getValue();    if (mime != null && StringUtils.hasText(mime.getSchema())) {      if (checkForValidSchema) {        try {          ApiBodyMetadata pojo=SchemaHelper.mapSchemaToPojo(document,mime.getSchema(),"com.phoenixnap.oss.stylecheck","ClazzUnderCheck",null);          if (pojo == null) {            return false;          } else {            return true;          }        } catch (        Exception ex) {          logger.warn("Possible Schema excheption",ex);          return false;        }      }      return true;    }  }  return false;}  }
class C{  public Task<VcenterDataCenterRestRep> createVcenterCluster(URI dataCenterId,VcenterClusterParam clusterParam){  TaskResourceRep response=client.post(TaskResourceRep.class,clusterParam,PathConstants.DATACENTER_CREATE_CLUSTER_URL,dataCenterId);  return new Task<VcenterDataCenterRestRep>(client,response,resourceClass);}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final Option.Type optionType,@Real double strike,@Real double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double displacement){  QL.require(strike >= 0.0,"strike must be non-negative");  QL.require(forward > 0.0,"forward must be positive");  QL.require(displacement >= 0.0,"displacement must be non-negative");  QL.require(blackPrice >= 0.0,"blackPrice must be non-negative");  QL.require(discount > 0.0,"discount must be positive");  double stddev;  forward=forward + displacement;  strike=strike + displacement;  if (Closeness.isClose(strike,forward))   stddev=blackPrice / discount * Math.sqrt(2.0 * Math.PI) / forward; else {    final double moneynessDelta=optionType.toInteger() * (forward - strike);    final double moneynessDelta_2=moneynessDelta / 2.0;    double temp=blackPrice / discount - moneynessDelta_2;    final double moneynessDelta_PI=moneynessDelta * moneynessDelta / Math.PI;    double temp2=temp * temp - moneynessDelta_PI;    if (temp2 < 0.0)     temp2=0.0;    temp2=Math.sqrt(temp2);    temp+=temp2;    temp*=Math.sqrt(2.0 * Math.PI);    stddev=temp / (forward + strike);  }  if (stddev >= 0.0)   return stddev;  throw new ArithmeticException("a negative value was calculated");}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    int length=Array.getLength(aObject);    for (int idx=0; idx < length; ++idx) {      Object item=Array.get(aObject,idx);      result=hash(result,item);    }  }  return result;}  }
class C{  protected void preCheck(String[] args) throws Exception {  super.preCheck(args);  if (!Groovy.isPresent())   throw new Exception("Groovy classes are not present in CLASSPATH!");}  }
class C{  public void paintSeparatorForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public void writeTo(OutputStream os) throws IOException {  DataOutputStream dos=new DataOutputStream(os);  dos.writeInt(N);  dos.writeInt(q);  dos.writeInt(df);  dos.writeInt(df1);  dos.writeInt(df2);  dos.writeInt(df3);  dos.writeInt(db);  dos.writeInt(dm0);  dos.writeInt(c);  dos.writeInt(minCallsR);  dos.writeInt(minCallsMask);  dos.writeBoolean(hashSeed);  dos.write(oid);  dos.writeBoolean(sparse);  dos.writeBoolean(fastFp);  dos.write(polyType);  dos.writeUTF(hashAlg.getAlgorithmName());}  }
class C{  @Override public void keyTyped(KeyEvent e){}  }
class C{  public static <T extends CharSequence>T checkNotEmpty(final T reference){  if (TextUtils.isEmpty(reference)) {    throw new IllegalArgumentException();  }  return reference;}  }
class C{  public static _AgentStatus fromString(final String value) throws SOAPSerializationException {  return (_AgentStatus)Enumeration.fromString(value,_AgentStatus.VALUES_TO_INSTANCES);}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  @Override public int compareTo(Yield y){  return this.first().getMySentence().wordComparator.compare(this.first(),y.first());}  }
class C{  public Shape cross(float x,float y,float height){  float h14=3 * height / 8, h34=5 * height / 8;  m_path.reset();  m_path.moveTo(x + h14,y);  m_path.lineTo(x + h34,y);  m_path.lineTo(x + h34,y + h14);  m_path.lineTo(x + height,y + h14);  m_path.lineTo(x + height,y + h34);  m_path.lineTo(x + h34,y + h34);  m_path.lineTo(x + h34,y + height);  m_path.lineTo(x + h14,y + height);  m_path.lineTo(x + h14,y + h34);  m_path.lineTo(x,y + h34);  m_path.lineTo(x,y + h14);  m_path.lineTo(x + h14,y + h14);  m_path.closePath();  return m_path;}  }
class C{  protected void render(GL2 gl){  gl.glScaled(SCALE,SCALE,SCALE);  gl.glTranslated(0.0,-1.0,0.0);  for (int i=0; i < this.world.getBodyCount(); i++) {    GameObject go=(GameObject)this.world.getBody(i);    go.render(gl);  }}  }
class C{  public Tasks<UnManagedVolumeRestRep> ingestExported(VolumeExportIngestParam input){  TaskList tasks=client.post(TaskList.class,input,"/vdc/unmanaged/volumes/ingest-exported");  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public static Intent makeIntent(Uri url){  return new Intent(ACTION_DOWNLOAD_IMAGE,url);}  }
class C{  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {  if (nameValueBlock.size() % 2 != 0) {    throw new IllegalArgumentException("Unexpected name value block: " + nameValueBlock);  }  String status=null;  String version=null;  RawHeaders result=new RawHeaders();  for (int i=0; i < nameValueBlock.size(); i+=2) {    String name=nameValueBlock.get(i);    String values=nameValueBlock.get(i + 1);    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (":status".equals(name)) {        status=value;      } else       if (":version".equals(name)) {        version=value;      } else {        result.namesAndValues.add(name);        result.namesAndValues.add(value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  if (version == null)   throw new ProtocolException("Expected ':version' header not present");  result.setStatusLine(version + " " + status);  return result;}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public static void main(String... args){  final Map<String,String> props=Environment.getEnvironmentMap();  for (  Map.Entry<String,String> entry : props.entrySet()) {    System.out.println(entry.getKey() + "=" + entry.getValue());  }}  }
class C{  private boolean isSpecial(char ch){switch (ch) {case '!':case '%':case '&':case '*':case '?':case '+':case '-':case ':':case '<':case '=':case '>':case '^':case '|':case '~':case '@':    return true;default :  return false;}}  }
class C{  public static void checkAttributes(String typeOfTag,Node n,ValidAttribute[] validAttributes,ErrorDispatcher err) throws JasperException {  Attributes attrs=n.getAttributes();  Mark start=n.getStart();  boolean valid=true;  int tempLength=(attrs == null) ? 0 : attrs.getLength();  ArrayList<String> temp=new ArrayList<String>(tempLength);  for (int i=0; i < tempLength; i++) {    String qName=attrs.getQName(i);    if ((!qName.equals("xmlns")) && (!qName.startsWith("xmlns:")))     temp.add(qName);  }  Node.Nodes tagBody=n.getBody();  if (tagBody != null) {    int numSubElements=tagBody.size();    for (int i=0; i < numSubElements; i++) {      Node node=tagBody.getNode(i);      if (node instanceof Node.NamedAttribute) {        String attrName=node.getAttributeValue("name");        temp.add(attrName);        if (n.getAttributeValue(attrName) != null) {          err.jspError(n,"jsp.error.duplicate.name.jspattribute",attrName);        }      } else {        break;      }    }  }  String missingAttribute=null;  for (int i=0; i < validAttributes.length; i++) {    int attrPos;    if (validAttributes[i].mandatory) {      attrPos=temp.indexOf(validAttributes[i].name);      if (attrPos != -1) {        temp.remove(attrPos);        valid=true;      } else {        valid=false;        missingAttribute=validAttributes[i].name;        break;      }    }  }  if (!valid)   err.jspError(start,"jsp.error.mandatory.attribute",typeOfTag,missingAttribute);  int attrLeftLength=temp.size();  if (attrLeftLength == 0)   return;  String attribute=null;  for (int j=0; j < attrLeftLength; j++) {    valid=false;    attribute=temp.get(j);    for (int i=0; i < validAttributes.length; i++) {      if (attribute.equals(validAttributes[i].name)) {        valid=true;        break;      }    }    if (!valid)     err.jspError(start,"jsp.error.invalid.attribute",typeOfTag,attribute);  }}  }
class C{  private final boolean checkByte(byte in,Condition condition){  String value=condition.getValue();  byte v;  try {    v=Byte.parseByte(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  protected GrassMarlin(){  System.out.println("Grassmarlin 3.0.1-r2402f");  core=new Core();  GrassMarlin.trySetLook();  this.pipeline=new Pipeline();  this.filterList=new ViewFilterList(pipeline).add(new FingerprintViewFilter()).add(new CategoryViewFilter()).add(new CountryViewFilter());  this.preferences=new Preferences();  loadMiscSettings();  validatePcap();  this.manager=new FManager();  if (this.preferences.pcapAvailable) {    this.subMenu=new SubMenu().useList(new DeviceList().populate());  } else {    this.subMenu=new SubMenu();    this.subMenu.enabled(false);  }  this.importer=new Importer(this.pipeline.taskDispatcher(),this.pipeline,this.preferences);  initializeKnowledgeBase();  initializeByteFunctions();  this.log=new UILog();  this.menu=new MenuBar();  this.tree=new TreeView(this.filterList);  this.graph=new GraphView().setCloudCollapseLimit(this.preferences.cloudCollapse).setNetworkCollapseLimit(this.preferences.networkCollapse);  this.footer=new Footer();  initializeProgressBars();  initializeMenu();  initializeUiBuilder();  attachCallbacks();  open();  this.appWorker=new Timer(preferences.viewUpdateDelay,null);  this.appWorker.start();}  }
class C{  public void elementEnded(String name,String systemId,int lineNr){}  }
class C{  public String printStack(){  StringBuilder result=new StringBuilder();  result.append("[");  LirsEntry e=stackTop();  if (e != null) {    result.append(e);    for (e=e.nextInStack; e != header; e=e.nextInStack) {      result.append(", " + e);    }  }  result.append("]");  return result.toString();}  }
class C{  public void testSplitAndJoinSemicolonNestedInPipeProperties(){  Properties outer=PropertyUtils.splitPropertiesOnPipe(ONE_THEN_TWO_OUTER_A);  assertEquals(ONE_SEMI_TWO,outer.getProperty("outer-b"));  assertEquals(2,outer.size());  try {    assertEquals(ONE_THEN_TWO_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));    return;  } catch (  ComparisonFailure deviation1) {  }  try {    assertEquals(TWO_THEN_ONE_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));    return;  } catch (  ComparisonFailure deviation2) {  }  try {    assertEquals(ONE_THEN_TWO_OUTER_B,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));    return;  } catch (  ComparisonFailure deviation3) {  }  try {    assertEquals(TWO_THEN_ONE_OUTER_B,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));    return;  } catch (  ComparisonFailure deviation4) {  }  assertEquals(TWO_THEN_ONE_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));}  }
class C{  @Override public boolean hasRuleForSpan(int startIndex,int endIndex,int pathLength){  return baseGrammar.hasRuleForSpan(startIndex,endIndex,pathLength);}  }
class C{  public static void assertNotEmpty(Iterable<?> iterable){  assertNotEmpty(null,iterable);}  }
class C{  public GuacamoleConnectionClosedException(Throwable cause){  super(cause);}  }
class C{  private void performInitialHandshake() throws IOException {synchronized (handshakeLock) {    if (getConnectionState() == cs_HANDSHAKE) {      kickstartHandshake();      if (inrec == null) {        inrec=new InputRecord();        inrec.setHandshakeHash(input.r.getHandshakeHash());        inrec.setHelloVersion(input.r.getHelloVersion());        inrec.enableFormatChecks();      }      readRecord(inrec,false);      inrec=null;    }  }}  }
class C{  public synchronized void addFlavorListener(FlavorListener listener){  if (listener == null) {    return;  }  if (flavorListeners == null) {    currentDataFlavors=getAvailableDataFlavorSet();    flavorListeners=new EventListenerAggregate(FlavorListener.class);  }  flavorListeners.add(listener);}  }
class C{  public boolean isUnidirectional(){  return isUnidirectional;}  }
class C{  private XmlModelFactory(final Set<String> processedImports){  notNull(processedImports);  this.processedImports.addAll(processedImports);}  }
class C{  public FindServersOnNetworkResponse clone(){  FindServersOnNetworkResponse result=new FindServersOnNetworkResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.LastCounterResetTime=LastCounterResetTime;  if (Servers != null) {    result.Servers=new ServerOnNetwork[Servers.length];    for (int i=0; i < Servers.length; i++)     result.Servers[i]=Servers[i].clone();  }  return result;}  }
class C{  @Override public void consumeIndication(Object indicationData){  if (indicationData == null) {    _logger.error("CIMIndication consumer received null data.");    return;  }  if (!(indicationData instanceof Hashtable<?,?>)) {    _logger.error("CIMIndication consumer expects a hashtable of name/value pairs.");    return;  }  try {    @SuppressWarnings("unchecked") Hashtable<String,String> indicationsTable=(Hashtable<String,String>)indicationData;    if (_monitoringPropertiesLoader.isToLogIndications()) {      _logger.debug("Indication received to CassandraCimIndicationConsumer to process, with size of key value pairs : {}",indicationsTable.size());    }    ArrivedIndication indication=new ArrivedIndication(indicationsTable,Calendar.getInstance().getTimeInMillis());    if (list.size() < _indicationBufferLimit) {      list.add(indication);      _logger.debug("Indication Queued at {}",list.size());    } else {      _logger.warn("Indication dropped. Indication buffer reached  max. capacity. Buffer size: {}",list.size());      _logger.info("Indication with key : value pairs dropped --> \n" + CIMIndicationProcessor.getIndicationData(indication.getIndication()));    }  } catch (  Exception e) {    _logger.error("Exception while processing the indication",e);  }}  }
class C{  protected String copyEntryToTempDir(ZipEntry entry) throws IOException {  if (entry.isDirectory())   return null;  if (this.tempDir == null)   this.tempDir=WWIO.makeTempDir();  if (this.tempDir == null) {    String message=Logging.getMessage("generic.UnableToCreateTempDir",this.tempDir);    Logging.logger().warning(message);    return null;  }  String tempFileName=this.tempDir + File.separator + entry.getName();  WWIO.makeParentDirs(tempFileName);  File outFile=new File(tempFileName);  outFile.deleteOnExit();  WWIO.saveBuffer(WWIO.readStreamToBuffer(this.zipFile.getInputStream(entry),true),outFile);  this.files.put(entry.getName(),outFile);  return outFile.getPath();}  }
class C{  public UUID taskSubjectId(){  return taskSubjId;}  }
class C{  public boolean isRawClass(){  return type instanceof Class<?>;}  }
class C{  public static boolean deleteOldDownloads(final File filesPath,final int deleteAfterDays){  yacyVersion release;  final String[] downloaded=filesPath.list();  boolean deletedSomeFiles=false;  final SortedSet<yacyVersion> downloadedreleases=new TreeSet<yacyVersion>();  for (  final String element : downloaded) {    try {      release=new yacyVersion(element,null);      downloadedreleases.add(release);    } catch (    final RuntimeException e) {    }  }  if (!downloadedreleases.isEmpty()) {    ConcurrentLog.fine("STARTUP","deleting downloaded releases older than " + deleteAfterDays + " days");    final yacyVersion latest=downloadedreleases.last();    downloadedreleases.remove(latest);    final boolean keepMain=!latest.isMainRelease();    final long now=System.currentTimeMillis();    final long deleteAfterMillis=deleteAfterDays * 24L * 60* 60000;    String lastMain=null;    String filename;    for (    final yacyVersion aVersion : downloadedreleases) {      filename=aVersion.getName();      if (keepMain && aVersion.isMainRelease()) {        if (lastMain != null) {          filename=lastMain;        }        lastMain=aVersion.getName();      }      final File downloadedFile=new File(filesPath + File.separator + filename);      if (now - downloadedFile.lastModified() > deleteAfterMillis) {        FileUtils.deletedelete(downloadedFile);        FileUtils.deletedelete(new File(downloadedFile.getAbsolutePath() + ".sig"));        if (downloadedFile.exists()) {          ConcurrentLog.warn("STARTUP","cannot delete old release " + downloadedFile.getAbsolutePath());        } else {          deletedSomeFiles=true;        }      }    }  }  return deletedSomeFiles;}  }
class C{  public XMLDocument(double version){  this(version,true);}  }
class C{  public static String ltrim(String str,String defaultValue){  if (str == null)   return defaultValue;  int len=str.length();  int st=0;  while ((st < len) && (str.charAt(st) <= ' ')) {    st++;  }  return ((st > 0)) ? str.substring(st) : str;}  }
class C{  @Override protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders){  templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class,""));  logger.info("ClassTemplateLoader for Spring macros added to FreeMarker configuration");}  }
class C{  public static File convertURIToFile(URI uri){  if (uri == null) {    String message=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    return new File(uri);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public void tag(String tag,ArrayList names,ArrayList values,int nattr){  tag(tag,names,values,nattr,true);}  }
class C{  public static <T>boolean containsIdentical(Collection<T> c,Object o){  for (  T t : c) {    if (t == o)     return true;  }  return false;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,float[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  private void checkService(String prop,String update){  Class<?> cls;  try {    cls=Class.forName(prop);  } catch (  ClassNotFoundException e) {    LOG.warning("Service file name is not a class name: " + prop);    return;  }  List<Class<?>> impls=ELKIServiceRegistry.findAllImplementations(cls,false,false);  HashSet<String> names=new HashSet<>();  for (  Class<?> c2 : impls) {    names.add(c2.getName());  }  Matcher m=strip.matcher("");  try {    Enumeration<URL> us=getClass().getClassLoader().getResources(ELKIServiceLoader.RESOURCE_PREFIX + cls.getName());    while (us.hasMoreElements()) {      URL u=us.nextElement();      boolean injar="jar".equals(u.getProtocol());      BufferedReader r=new BufferedReader(new InputStreamReader(u.openStream(),"utf-8"));      for (String line; ; ) {        line=r.readLine();        if (line == null) {          break;        }        m.reset(line);        if (!m.matches()) {          LOG.warning("Line: " + line + " didn't match regexp.");          continue;        }        String stripped=m.group(1);        if (stripped.length() > 0) {          String[] parts=stripped.split(" ");          if (!names.remove(parts[0]) && !injar) {            LOG.warning("Name " + parts[0] + " found for property "+ prop+ " but no class discovered (or listed twice).");          }          checkAliases(cls,parts[0],parts);        }      }    }  } catch (  IOException e) {    LOG.exception(e);  }  if (!names.isEmpty()) {    ArrayList<String> sorted=new ArrayList<>(names);    Collections.sort(sorted);    if (update == null) {      StringBuilder message=new StringBuilder();      message.append("Class ").append(prop).append(" lacks suggestions:").append(FormatUtil.NEWLINE);      for (      String remaining : sorted) {        message.append("# ").append(remaining).append(FormatUtil.NEWLINE);      }      LOG.warning(message.toString());      return;    }    try {      Files.createDirectories(Paths.get(update + File.separator + ELKIServiceLoader.FILENAME_PREFIX));      String fname=update + File.separator + ELKIServiceLoader.FILENAME_PREFIX+ prop;      PrintStream pr=new PrintStream(new FileOutputStream(fname,true));      pr.println();      pr.println("### Automatically appended entries:");      for (      String remaining : sorted) {        pr.println(remaining);      }      pr.close();      LOG.warning("Updated service file: " + fname);    } catch (    IOException e) {      LOG.exception(e);    }  }}  }
class C{  protected Node newNode(){  return new SVGOMLinearGradientElement();}  }
class C{  public RestClient(String target,String username,String password){  this(target,username,password,null);}  }
class C{  public static void unescapeJava(Writer out,String str) throws IOException {  if (out == null) {    throw new IllegalArgumentException("The Writer must not be null");  }  if (str == null) {    return;  }  int sz=str.length();  StringBuilder unicode=new StringBuilder(4);  boolean hadSlash=false;  boolean inUnicode=false;  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (inUnicode) {      unicode.append(ch);      if (unicode.length() == 4) {        try {          int value=Integer.parseInt(unicode.toString(),16);          out.write((char)value);          unicode.setLength(0);          inUnicode=false;          hadSlash=false;        } catch (        NumberFormatException nfe) {          throw new RuntimeException("Unable to parse unicode value: " + unicode,nfe);        }      }      continue;    }    if (hadSlash) {      hadSlash=false;switch (ch) {case '\\':        out.write('\\');      break;case '\'':    out.write('\'');  break;case '\"':out.write('"');break;case 'r':out.write('\r');break;case 'f':out.write('\f');break;case 't':out.write('\t');break;case 'n':out.write('\n');break;case 'b':out.write('\b');break;case 'u':{inUnicode=true;break;}default :out.write(ch);break;}continue;} else if (ch == '\\') {hadSlash=true;continue;}out.write(ch);}if (hadSlash) {out.write('\\');}}  }
class C{  public void trainModels(){  System.out.println("Using default training data: " + rm.getString("trainingData"));  trainModels(rm.getString("trainingData"));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public VerticalLayout(int vgap,int alignment,int anchor){  this.vgap=vgap;  this.alignment=alignment;  this.anchor=anchor;}  }
class C{  public static Authorizations addUserAuths(final String user,final SecurityOperations secOps,final Authorizations auths) throws AccumuloException, AccumuloSecurityException {  final List<String> authList=new ArrayList<>();  for (  final byte[] authBytes : auths.getAuthorizations()) {    final String auth=new String(authBytes);    authList.add(auth);  }  return addUserAuths(user,secOps,authList.toArray(new String[0]));}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static synchronized void performUpdates(){  gson=null;}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static double gain(ImpurityScore wholeData,ImpurityScore... splits){  return gain(wholeData,1.0,splits);}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> mergeTwoLinkedListAlternatively(SingleLinkedNode<E> node1,SingleLinkedNode<E> node2){  SingleLinkedNode<E> curr1=node1, curr2=node2, temp1, temp2;  while (curr1 != null && curr2 != null) {    temp1=curr1.next;    temp2=curr2.next;    curr1.next=curr2;    curr2.next=temp1;    curr1=temp1;    curr2=temp2;  }  return curr2;}  }
class C{  private HashMap<String,List<StoragePort>> discoverIscsiPorts(StorageSystem system,VNXeApiClient client,Map<String,URI> spIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start iSCSI storage port discovery for storage system {}",system.getId());  List<VNXeIscsiNode> ports=client.getAllIscsiPorts();  if (ports == null || ports.isEmpty()) {    _logger.info("No iSCSI ports found for the system: {} ",system.getId());    return storagePorts;  }  _logger.info("Number iSCSI ports found: {}",ports.size());  for (  VNXeIscsiNode node : ports) {    StoragePort port=null;    VNXeEthernetPort eport=node.getEthernetPort();    if (eport == null) {      _logger.info("No ethernet port found for the iscsi node: {}",node.getId());      continue;    }    VNXeBase spId=eport.getStorageProcessorId();    if (spId == null) {      _logger.info("No storage processor info for the iscsi node: {}",node.getId());      continue;    }    String spIdStr=spId.getId();    URI haDomainUri=spIdMap.get(spIdStr);    if (haDomainUri == null) {      _logger.info("The sp {} has not been discovered.",spIdStr);      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,node.getName(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    if (results.iterator().hasNext()) {      _logger.info("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,results.iterator().next());      _logger.info(String.format("Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",system.getId(),tmpPort.getPortNetworkId(),tmpPort.getPortGroup()));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(spIdStr)) {        port=tmpPort;        _logger.info("found duplicate iscsi port {}",node.getName());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("IP");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(eport.getId());      port.setPortNetworkId(node.getName());      port.setPortGroup(spIdStr);      port.setStorageHADomain(haDomainUri);      List<Integer> opstatus=eport.getOperationalStatus();      Integer ok=2;      if (opstatus.contains(ok)) {        port.setOperationalStatus(StoragePort.OperationalStatus.OK.name());      } else {        port.setOperationalStatus(StoragePort.OperationalStatus.NOT_OK.name());      }      VNXeIscsiPortal portal=node.getIscsiPortal();      if (portal != null) {        port.setIpAddress(portal.getIpAddress());      } else {        port.setOperationalStatus(StoragePort.OperationalStatus.NOT_OK.name());      }      _logger.info("Creating new storage port using NativeGuid : {}, IQN:",portNativeGuid,node.getName());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  }  _logger.info("iSCSI port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {  ResponseWriter writer=context.getResponseWriter();  String userHandler=getNonEmptyUserHandler(handlerValue);  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {    behaviors=null;  }  if (params == null) {    params=Collections.emptyList();  }  String handler=null;switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {case USER_HANDLER_ONLY:    handler=userHandler;  break;case SINGLE_BEHAVIOR_ONLY:handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);break;case SUBMIT_ONLY:handler=getSubmitHandler(context,component,params,submitTarget,true);break;case CHAIN:handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);break;default :assert (false);}writer.writeAttribute(handlerName,handler,null);}  }
class C{  private double[] ones(int n){  double[] ones=new double[n];  for (int i=0; i < n; i++) {    ones[i]=1;  }  return ones;}  }
class C{  public static boolean containsWhitespace(String str){  return containsWhitespace((CharSequence)str);}  }
class C{  public MatrixStackd pushMatrix(){  if (curr == mats.length) {    throw new IllegalStateException("max stack size of " + (curr + 1) + " reached");  }  mats[curr++].set(this);  return this;}  }
class C{  public SynchronizerStatus(Status status,Date since,String message){  this.message=message;  this.since=since;  this.status=status;}  }
class C{  @Override public ChromeTab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent){  return createNewTab(loadUrlParams,type,parent,null);}  }
class C{  public ImplChannel(JSONObject data,ImplServer server,ImplDiscordAPI api){  this.api=api;  this.server=server;  id=data.getString("id");  name=data.getString("name");  try {    topic=data.getString("topic");  } catch (  JSONException ignored) {  }  position=data.getInt("position");  JSONArray permissionOverwrites=data.getJSONArray("permission_overwrites");  for (int i=0; i < permissionOverwrites.length(); i++) {    JSONObject permissionOverwrite=permissionOverwrites.getJSONObject(i);    String id=permissionOverwrite.getString("id");    int allow=permissionOverwrite.getInt("allow");    int deny=permissionOverwrite.getInt("deny");    String type=permissionOverwrite.getString("type");    if (type.equals("role")) {      Role role=server.getRoleById(id);      if (role != null) {        ((ImplRole)role).setOverwrittenPermissions(this,new ImplPermissions(allow,deny));      }    }    if (type.equals("member")) {      overwrittenPermissions.put(id,new ImplPermissions(allow,deny));    }  }  server.addChannel(this);}  }
class C{  public void deleteRequest(ScriptStep step){  doDelete(step);  messages.info("Script Step " + step.getLabel() + " has been deleted.");}  }
class C{  public MWHCFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new MWHCFunction<T>(keys,transform,signatureWidth,values,outputWidth,tempDir,chunkedHashStore,indirect);}  }
class C{  public static <T1,T2,T3,T4,R>Function4<T1,T2,T3,T4,R> memoizeQuadFunction(Function4<T1,T2,T3,T4,R> fn,Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  public void rejoinGroupChatAsPartOfSendOperation(String chatId) throws PayloadException, NetworkException {  GroupChatImpl groupChat=getOrCreateGroupChat(chatId);  groupChat.setRejoinedAsPartOfSendOperation(true);  groupChat.rejoinGroupChat();}  }
class C{  @Deprecated public String sign(byte[] buf,SecretKey key,String algorithm){  return sign2(buf,key,algorithm);}  }
class C{  public void assertException(RuntimeException exception,Runnable expression){  TestUtils.assertException(exception,expression);}  }
class C{  public void applyOverrideLanguage(){  if (SettingValues.overrideLanguage) {    Locale locale=new Locale("en","US");    Locale.setDefault(locale);    Configuration config=new Configuration();    config.locale=locale;    getBaseContext().getResources().updateConfiguration(config,getBaseContext().getResources().getDisplayMetrics());  }}  }
class C{  public Builder port(int port){  this.innerPort=port;  return this;}  }
class C{  static public void addMoveHandles(Figure f,Collection<Handle> handles){  handles.add(southEast(f));  handles.add(southWest(f));  handles.add(northEast(f));  handles.add(northWest(f));}  }
class C{  public DrawingPageable(Drawing drawing){  this.drawing=drawing;  Paper paper=new Paper();  pageFormat=new PageFormat();  pageFormat.setPaper(paper);}  }
class C{  private List<String> simpleNames(Deque<ExpressionTree> stack){  ImmutableList.Builder<String> simpleNames=ImmutableList.builder();  OUTER:   for (  ExpressionTree expression : stack) {    boolean isArray=expression.getKind() == ARRAY_ACCESS;    expression=getArrayBase(expression);switch (expression.getKind()) {case MEMBER_SELECT:      simpleNames.add(((MemberSelectTree)expression).getIdentifier().toString());    break;case IDENTIFIER:  simpleNames.add(((IdentifierTree)expression).getName().toString());break;case METHOD_INVOCATION:simpleNames.add(getMethodName((MethodInvocationTree)expression).toString());break OUTER;default :break OUTER;}if (isArray) {break OUTER;}}return simpleNames.build();}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static List<Document> generateStudentFeedbackDocs(List<String> studentFeedbackDocNames,List<List<MathObject>> allStudentWorkAndFeedback){  int studentIndex;  List<Document> studentDocs=new ArrayList<>();  for (  String s : studentFeedbackDocNames) {    studentDocs.add(new Document(s));  }  for (  List<MathObject> allWorkOnOneProblem : allStudentWorkAndFeedback) {    studentIndex=0;    for (    MathObject mObj : allWorkOnOneProblem) {      if (!(mObj instanceof Grouping))       continue;      studentDocs.get(studentIndex).addBlankPage();      studentDocs.get(studentIndex).getLastPage().addObject(mObj);      studentIndex++;    }  }  return studentDocs;}  }
class C{  private Object readInstance(InputNode node,Object source,Label label) throws Exception {  Object object=readVariable(node,source,label);  if (object == null) {    Position line=node.getPosition();    Class expect=context.getType(type,source);    if (label.isRequired() && revision.isEqual()) {      throw new ValueRequiredException("Empty value for %s in %s at %s",label,expect,line);    }  } else {    if (object != label.getEmpty(context)) {      criteria.set(label,object);    }  }  return object;}  }
class C{  public Fragment createFragment(int index){  return pages.get(index).createFragment();}  }
class C{  public TStructMember basicGetDefinedMember(){  return definedMember;}  }
class C{  public void internalFrameOpened(InternalFrameEvent e){}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static Arguments parseArgs(final String args){  Map<String,String> parsed=new HashMap<>();  for (  String argPair : args.split(",")) {    String[] tokens=argPair.split("=");    if (tokens.length != 2) {      throw new IllegalArgumentException("statsd-jvm-profiler takes a comma-delimited list of arguments in k=v form");    }    parsed.put(tokens[0],tokens[1]);  }  for (  String requiredArg : REQUIRED) {    if (!parsed.containsKey(requiredArg)) {      throw new IllegalArgumentException(String.format("%s argument was not supplied",requiredArg));    }  }  return new Arguments(parsed);}  }
class C{  public static List<File> readVehicleFiles(String vehicleFolder,String validationSize){  int numberOfFiles=new File(vehicleFolder).list().length;  double doubleValidationSize=Double.parseDouble(validationSize);  int sizeValidationSample=(int)(doubleValidationSize * numberOfFiles);  File folder=new File(vehicleFolder);  List<File> vehicleFiles=FileUtils.sampleFiles(folder,sizeValidationSample,FileUtils.getFileFilter(".xml.gz"));  return vehicleFiles;}  }
class C{  @Nullable public GridCacheMvccCandidate localCandidate(UUID nodeId,long threadId){  if (locs != null)   for (  GridCacheMvccCandidate c : locs)   if (c.nodeId().equals(nodeId) && c.threadId() == threadId)   return c;  return null;}  }
class C{  private String convert() throws IOException {  int i=r.read();  if (i != '{') {    throw new IOException("Invalid RTF file");  }  while ((i=r.read()) != -1) {    char ch=(char)i;switch (ch) {case '{':      if (inControlWord && controlWord.length() == 0) {        sb.append('{');        controlWord.setLength(0);        inControlWord=false;      } else {        blockCount++;      }    break;case '}':  if (inControlWord && controlWord.length() == 0) {    sb.append('}');    controlWord.setLength(0);    inControlWord=false;  } else {    blockCount--;  }break;case '\\':if (blockCount == 0) {if (inControlWord) {  if (controlWord.length() == 0) {    sb.append('\\');    controlWord.setLength(0);    inControlWord=false;  } else {    endControlWord();  }}inControlWord=true;}break;case ' ':if (blockCount == 0) {if (inControlWord) {endControlWord();} else {sb.append(' ');}}break;case '\r':case '\n':if (blockCount == 0) {if (inControlWord) {endControlWord();}}break;default :if (blockCount == 0) {if (inControlWord) {controlWord.append(ch);} else {sb.append(ch);}}break;}}return sb.toString();}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  @Field(21) public Pointer<Integer> pboolVal(){  return this.io.getPointerField(this,21);}  }
class C{  private void createAppTeCalculators(){  ateCalcs=new TransferEntropyCalculatorDiscrete[numSources];  for (int i=0; i < numSources; i++) {    ateCalcs[i]=TransferEntropyCalculatorDiscrete.newInstance(base,k);    ateCalcs[i].setPeriodicBoundaryConditions(periodicBoundaryConditions);  }}  }
class C{  public boolean isInvitedVendorsOnly(){  Object oo=get_Value(COLUMNNAME_IsInvitedVendorsOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected static void startDb(String currentVersion,String targetVersion,String extraModelsPkg) throws IOException {  startDb(currentVersion,targetVersion,extraModelsPkg,null,false);}  }
class C{  protected void loadTableOIS(Vector<?> data){  window.getWListbox().clear();  window.getWListbox().getModel().removeTableModelListener(window);  ListModelTable model=new ListModelTable(data);  model.addTableModelListener(window);  window.getWListbox().setData(model,getOISColumnNames());  configureMiniTable(window.getWListbox());}  }
class C{  public static void closeStreams(Closeable... streams){  if (null != streams) {    for (    Closeable stream : streams) {      if (null != stream) {        try {          stream.close();        } catch (        IOException e) {          LOGGER.error("Error while closing stream" + stream);        }      }    }  }}  }
class C{  public static void assertSupportedProtocols(Set<String> expected,String[] protocols){  Set<String> remainingProtocols=assertValidProtocols(expected,protocols);  assertEquals("Missing protocols",Collections.EMPTY_SET,remainingProtocols);  assertEquals(expected.size(),protocols.length);}  }
class C{  public boolean validate(){  for (int i=0; i < m_count; ++i) {    int i1=i;    int i2=i < m_count - 1 ? i1 + 1 : 0;    Vec2 p=m_vertices[i1];    Vec2 e=pool1.set(m_vertices[i2]).subLocal(p);    for (int j=0; j < m_count; ++j) {      if (j == i1 || j == i2) {        continue;      }      Vec2 v=pool2.set(m_vertices[j]).subLocal(p);      float c=Vec2.cross(e,v);      if (c < 0.0f) {        return false;      }    }  }  return true;}  }
class C{  @Override public boolean canOpenWarmOrRecycle(){  long now=CurrentTime.currentTime();  if (isFailed(now)) {    return false;  }  return getIdleCount() > 0 || canOpenWarm();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.CAST;}  }
class C{  private CDialogEditVariable(final Window parent,final String title,final String variable){  super(parent,title,ModalityType.APPLICATION_MODAL);  setLayout(new BorderLayout());  new CDialogEscaper(this);  m_nameField.setText(variable);  m_nameField.setSelectionStart(0);  m_nameField.setSelectionEnd(Integer.MAX_VALUE);  final JPanel upperPanel=new JPanel(new BorderLayout());  upperPanel.add(m_nameField,BorderLayout.NORTH);  upperPanel.setBorder(new TitledBorder(""));  final CPanelTwoButtons panel=new CPanelTwoButtons(new InternalActionListener(),"OK","Cancel");  add(upperPanel,BorderLayout.NORTH);  add(panel,BorderLayout.SOUTH);  setSize(300,100);  setResizable(false);  final InputMap windowImap=getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(HotKeys.APPLY_HK.getKeyStroke(),"APPLY");  getRootPane().getActionMap().put("APPLY",CActionProxy.proxy(new ApplyAction()));}  }
class C{  public LoadNeuronScriptAction(final Neuron neuron){  super("Load...");  theNeuron=neuron;}  }
class C{  public void onPopAway(){}  }
class C{  public boolean hasLargestChangestamp(){  return hasExtension(LargestChangestamp.class);}  }
class C{  public boolean isSameLine(){  Object oo=get_Value(COLUMNNAME_IsSameLine);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static public void lowerBound(double arg,double min,String argName){  if (!Comparisons.gteq(arg,min)) {    throw new IllegalArgumentException(String.format("%s (%1.4f) smaller than the lower bound",argName,arg));  }}  }
class C{  protected void encodeSuperEnd(final FacesContext context,final UIComponent component) throws IOException {  super.encodeEnd(context,component);}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  @CheckReturnValue public <T>Subject1<T> as(BiFunction<A,B,T> mapping){  return new MappingTheoryBuilder<>(this.state,combine(),null,null,null);}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public static void main(String[] argv){  runFilter(new Discretize(),argv);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getGraph() == null) {    throw new NullPointerException();  }}  }
class C{  @Override public void afterPassivation(ServiceReference<ServiceType> passivated) throws Exception {}  }
class C{  public static void upgradeMultiDataPath(NodeEnvironment nodeEnv,ESLogger logger) throws IOException {  if (nodeEnv.nodeDataPaths().length > 1) {    final MultiDataPathUpgrader upgrader=new MultiDataPathUpgrader(nodeEnv);    final Set<String> allIndices=nodeEnv.findAllIndices();    for (    String index : allIndices) {      for (      ShardId shardId : findAllShardIds(nodeEnv.indexPaths(new Index(index)))) {        try (ShardLock lock=nodeEnv.shardLock(shardId,0)){          if (upgrader.needsUpgrading(shardId)) {            final ShardPath shardPath=upgrader.pickShardPath(shardId);            upgrader.upgrade(shardId,shardPath);            if (Files.exists(shardPath.resolveIndex())) {              upgrader.checkIndex(shardPath);            }          } else {            logger.debug("{} no upgrade needed - already upgraded");          }        }       }    }  }}  }
class C{  public synchronized void updateObject(String columnLabel,Object x,SQLType targetSqlType) throws SQLException {  super.updateObjectInternal(findColumn(columnLabel),JDBC42Helper.convertJavaTimeToJavaSql(x),translateAndCheckSqlType(targetSqlType),0);}  }
class C{  private boolean updateSupplicantServiceRequest(){  clearSupplicantServiceRequest();  StringBuffer sb=new StringBuffer();  for (  ClientInfo c : mClientInfoList.values()) {    int key;    WifiP2pServiceRequest req;    for (int i=0; i < c.mReqList.size(); i++) {      req=c.mReqList.valueAt(i);      if (req != null) {        sb.append(req.getSupplicantQuery());      }    }  }  if (sb.length() == 0) {    return false;  }  mServiceDiscReqId=mWifiNative.p2pServDiscReq("00:00:00:00:00:00",sb.toString());  if (mServiceDiscReqId == null) {    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute01.class,args);}  }
class C{  public static QNameInfo fromManyAssociation(QualifiedName qName,String tableName,AssociationDescriptor manyAssoDescriptor){  return new QNameInfo(qName,QNameType.MANY_ASSOCIATION,null,tableName,manyAssoDescriptor.type(),null,null,manyAssoDescriptor);}  }
class C{  @Override public String globalInfo(){  return "This filter is used for renaming attribute names.\n" + "Regular expressions can be used in the matching and replacing.\n" + "See Javadoc of java.util.regex.Pattern class for more information:\n"+ "http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html";}  }
class C{  public void canonicalizeForViewpointAdaptation(ExpressionTree invocation,AnnotatedTypeMirror type){  final TreePath path=getPath(invocation);  TreePath enclosingMethodPath=TreeUtils.pathTillOfKind(path,Kind.METHOD);  if (path == null || enclosingMethodPath == null) {    return;  }  Node node=getNodeForTree(path.getLeaf());  if (node == null || node instanceof FunctionalInterfaceNode) {    return;  }  if (invocation.getKind() != Kind.METHOD_INVOCATION && invocation.getKind() != Kind.NEW_CLASS) {    ErrorReporter.errorAbort("canonicalizeForViewpointAdaptation can only be called on method invocations" + "and constructor calls.\n" + "tree=" + invocation + "\n"+ "type="+ type+ "\n"+ "node="+ node+ "\n");  }  FlowExpressionContext flowExpressionContext=buildFlowExprContextForViewpointUse(node,enclosingMethodPath,getContext());  keyForCanonicalizer.canonicalize(type,flowExpressionContext,path,true);}  }
class C{  public static BigDecimal noOp(BigDecimal dec){  return dec;}  }
class C{  private Command showPackedImpl(String position,boolean modal,boolean stretch){  if (getTitle() == null) {    setTitle("");  }  this.position=position;  int height=Display.getInstance().getDisplayHeight();  int width=Display.getInstance().getDisplayWidth();  if (top > -1) {    refreshTheme();  }  Component contentPane=super.getContentPane();  Component title=super.getTitleComponent();  if (dialogTitle != null && getUIManager().isThemeConstant("hideEmptyTitleBool",false)) {    boolean b=getTitle().length() > 0;    getTitleArea().setVisible(b);    getTitleComponent().setVisible(b);  }  Style contentPaneStyle=getDialogStyle();  int menuHeight=calcMenuHeight();  revalidate();  int prefHeight=contentPane.getPreferredH();  int prefWidth=contentPane.getPreferredW();  prefWidth=Math.min(prefWidth,width);  if (contentPaneStyle.getBorder() != null) {    prefWidth=Math.max(contentPaneStyle.getBorder().getMinimumWidth(),prefWidth);    prefHeight=Math.max(contentPaneStyle.getBorder().getMinimumHeight(),prefHeight);  }  height=height - menuHeight - title.getPreferredH();  int topBottom=Math.max(0,(height - prefHeight) / 2);  int leftRight=Math.max(0,(width - prefWidth) / 2);  if (position.equals(BorderLayout.CENTER)) {    show(topBottom,topBottom,leftRight,leftRight,true,modal);    return lastCommandPressed;  }  if (position.equals(BorderLayout.EAST)) {    if (stretch) {      show(0,0,Math.max(0,width - prefWidth),0,true,modal);    } else {      show(topBottom,topBottom,Math.max(0,width - prefWidth),0,true,modal);    }    return lastCommandPressed;  }  if (position.equals(BorderLayout.WEST)) {    if (stretch) {      show(0,0,0,Math.max(0,width - prefWidth),true,modal);    } else {      show(topBottom,topBottom,0,Math.max(0,width - prefWidth),true,modal);    }    return lastCommandPressed;  }  if (position.equals(BorderLayout.NORTH)) {    if (stretch) {      show(0,Math.max(0,height - prefHeight),0,0,true,modal);    } else {      show(0,Math.max(0,height - prefHeight),leftRight,leftRight,true,modal);    }    return lastCommandPressed;  }  if (position.equals(BorderLayout.SOUTH)) {    if (stretch) {      show(Math.max(0,height - prefHeight),0,0,0,true,modal);    } else {      show(Math.max(0,height - prefHeight),0,leftRight,leftRight,true,modal);    }    return lastCommandPressed;  }  throw new IllegalArgumentException("Unknown position: " + position);}  }
class C{  public void replace(ClassNode type,int n){  remove(n);  push(type);}  }
class C{  private void send(String cmd){  try {    String[] args=new String[2];    args[0]=cmd;    args[1]=message;    Process p=Runtime.getRuntime().exec(args);    p.getErrorStream().close();    p.getOutputStream().close();    p.getInputStream().close();  } catch (  IOException e) {    logger.error(e,e);  }}  }
class C{  public UmmalquraCalendar(){  this(TimeZone.getDefault(),Locale.getDefault());}  }
class C{  void clear(){  total=0;  countBySource=null;}  }
class C{  int divideOneWord(int divisor,MutableBigInteger quotient){  long divisorLong=divisor & LONG_MASK;  if (intLen == 1) {    long dividendValue=value[offset] & LONG_MASK;    int q=(int)(dividendValue / divisorLong);    int r=(int)(dividendValue - q * divisorLong);    quotient.value[0]=q;    quotient.intLen=(q == 0) ? 0 : 1;    quotient.offset=0;    return r;  }  if (quotient.value.length < intLen)   quotient.value=new int[intLen];  quotient.offset=0;  quotient.intLen=intLen;  int shift=Integer.numberOfLeadingZeros(divisor);  int rem=value[offset];  long remLong=rem & LONG_MASK;  if (remLong < divisorLong) {    quotient.value[0]=0;  } else {    quotient.value[0]=(int)(remLong / divisorLong);    rem=(int)(remLong - (quotient.value[0] * divisorLong));    remLong=rem & LONG_MASK;  }  int xlen=intLen;  while (--xlen > 0) {    long dividendEstimate=(remLong << 32) | (value[offset + intLen - xlen] & LONG_MASK);    int q;    if (dividendEstimate >= 0) {      q=(int)(dividendEstimate / divisorLong);      rem=(int)(dividendEstimate - q * divisorLong);    } else {      long tmp=divWord(dividendEstimate,divisor);      q=(int)(tmp & LONG_MASK);      rem=(int)(tmp >>> 32);    }    quotient.value[intLen - xlen]=q;    remLong=rem & LONG_MASK;  }  quotient.normalize();  if (shift > 0)   return rem % divisor; else   return rem;}  }
class C{  @Override public boolean isClosed(){  return _s == null;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NEW_TARGET;}  }
class C{  public static String decodeEmail(String userEmail){  return userEmail.replace(",",".");}  }
class C{  public static String formatDecimal(double number,int digits){  StringBuffer a=new StringBuffer();  for (int i=0; i < digits; i++) {    if (i == 0)     a.append(".");    a.append("0");  }  DecimalFormat nf=new DecimalFormat("###,###,###,##0" + a.toString());  String formatted=nf.format(number);  return formatted;}  }
class C{  public CStoreAction(final INaviModule module){  super("Store");  m_module=module;  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/save_to_database.png")));}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSolidColorElement(prefix,(AbstractDocument)doc);}  }
class C{  protected boolean remLink(String field,int len,int n,int e){  int[] array=(int[])m_links.get(n,field);  for (int i=0; i < len; ++i) {    if (array[i] == e) {      System.arraycopy(array,i + 1,array,i,len - i - 1);      return true;    }  }  return false;}  }
class C{  public RestoreSnapshotRequest source(String source){  if (hasLength(source)) {    try (XContentParser parser=XContentFactory.xContent(source).createParser(source)){      return source(parser.mapOrdered());    } catch (    Exception e) {      throw new IllegalArgumentException("failed to parse repository source [" + source + "]",e);    }  }  return this;}  }
class C{  private Hop pushdownSumOnAdditiveBinary(Hop parent,Hop hi,int pos){  if (hi instanceof AggUnaryOp && ((AggUnaryOp)hi).getDirection() == Direction.RowCol && ((AggUnaryOp)hi).getOp() == AggOp.SUM && hi.getInput().get(0) instanceof BinaryOp && hi.getInput().get(0).getParent().size() == 1) {    BinaryOp bop=(BinaryOp)hi.getInput().get(0);    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    if (HopRewriteUtils.isEqualSize(left,right) && left.getDataType() == DataType.MATRIX && right.getDataType() == DataType.MATRIX) {      OpOp2 applyOp=(bop.getOp() == OpOp2.PLUS || bop.getOp() == OpOp2.MINUS) ? bop.getOp() : null;      if (applyOp != null) {        AggUnaryOp sum1=HopRewriteUtils.createSum(left);        AggUnaryOp sum2=HopRewriteUtils.createSum(right);        BinaryOp newBin=HopRewriteUtils.createBinary(sum1,sum2,applyOp);        HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);        HopRewriteUtils.addChildReference(parent,newBin,pos);        if (hi.getParent().isEmpty())         HopRewriteUtils.removeAllChildReferences(hi);        if (bop.getParent().isEmpty())         HopRewriteUtils.removeAllChildReferences(bop);        hi=newBin;        LOG.debug("Applied pushdownSumOnAdditiveBinary.");      }    }  }  return hi;}  }
class C{  public boolean abort() throws LoginException {  if (debug) {    System.out.println("\t\t[NTLoginModule]: " + "aborted authentication attempt");  }  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    ntSystem=null;    userPrincipal=null;    userSID=null;    userDomain=null;    domainSID=null;    primaryGroup=null;    groups=null;    iToken=null;    succeeded=false;  } else {    logout();  }  return succeeded;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.661 -0500",hash_original_method="6FB194DE255E537B19EA8E2695800E2E",hash_generated_method="FF0594EF58A5BB44303EA7FC093E4589") public javax.sip.address.URI createURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null arg");  try {    URLParser urlParser=new URLParser(uri);    String scheme=urlParser.peekScheme();    if (scheme == null)     throw new ParseException("bad scheme",0);    if (scheme.equalsIgnoreCase("sip")) {      return (javax.sip.address.URI)urlParser.sipURL(true);    } else     if (scheme.equalsIgnoreCase("sips")) {      return (javax.sip.address.URI)urlParser.sipURL(true);    } else     if (scheme.equalsIgnoreCase("tel")) {      return (javax.sip.address.URI)urlParser.telURL(true);    }  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }  return new gov.nist.javax.sip.address.GenericURI(uri);}  }
class C{  protected void addHeaders(HttpURLConnection connection,String tenantId){  if (tenantId == null) {    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);  }  if (tenantId != null) {    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);  }  if (authorization == null && username != null) {    String authString=username + ":" + password;    String encoded=encoder.encodeToString(authString.getBytes());    authorization="Basic " + encoded;  }  if (authorization != null) {    connection.setRequestProperty("Authorization",authorization);  }}  }
class C{  public void unskipRefCountTracking(){  setReferenceCountOwner(null);}  }
class C{  public static void copy(Struct source,Struct target,boolean overwrite){  Iterator<Entry<Key,Object>> it=source.entryIterator();  Entry<Key,Object> e;  while (it.hasNext()) {    e=it.next();    if (overwrite || !target.containsKey(e.getKey()))     target.setEL(e.getKey(),e.getValue());  }}  }
class C{  public static final String stringEncodeFromMortonLong(final long hashedVal) throws Exception {  return stringEncode(hashedVal,PRECISION);}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  Log.d(TAG,"query,current thread:" + Thread.currentThread().getName());  String table=getTableName(uri);  if (table == null)   throw new IllegalArgumentException("Unsupported URI:" + uri);  return mSQLiteDatabase.query(table,projection,selection,selectionArgs,null,null,sortOrder,null);}  }
class C{  public static void main(String[] args) throws Exception {  CheckSource check;  StringBuffer text;  Enumeration<Option> enm;  check=new CheckSource();  if (Utils.getFlag('h',args)) {    text=new StringBuffer();    text.append("\nHelp requested:\n\n");    enm=check.listOptions();    while (enm.hasMoreElements()) {      Option option=(Option)enm.nextElement();      text.append(option.synopsis() + "\n");      text.append(option.description() + "\n");    }    System.out.println("\n" + text + "\n");  } else {    check.setOptions(args);    if (check.execute())     System.out.println("Tests OK!"); else     System.out.println("Tests failed!");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int q=getInt(stack);  q=Math.min(Math.max(0,q),63);  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Carny.getInstance().setAgentFlags(a,Agent.KEEP_AT_MOST_MASK,q);    Carny.getInstance().kick();  }  return null;}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public static Selection createFromStartEnd(int s,int e){  Assert.isTrue(s >= 0 && e >= s);  Selection result=new Selection();  result.fStart=s;  result.fLength=e - s + 1;  result.fExclusiveEnd=result.fStart + result.fLength;  return result;}  }
class C{  public char num2char(int idx){  return ALPHABET[idx];}  }
class C{  protected boolean contains(File file){  if (file == null) {    return false;  }  return contains(file.getName());}  }
class C{  public long skip(long n) throws IOException {  byte[] buf=new byte[512];  long total=0;  while (total < n) {    long len=n - total;    len=read(buf,0,len < buf.length ? (int)len : buf.length);    if (len == -1) {      return total;    }    total+=len;  }  return total;}  }
class C{  public static <T>SyncSupplier<T> from(Collection<T> collection){  return from(collection,false);}  }
class C{  protected void reportAllReturns(String methodCall,String msg){  log.methodReturned(this,methodCall,msg);}  }
class C{  private void reportAbuse(final String selectedWallId){  ReportAbuseRequestModel reportAbuseRequestModel=new ReportAbuseRequestModel();  reportAbuseRequestModel.setType(AppConstants.TYPE);  reportAbuseRequestModel.setId(selectedWallId);  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.REPORT_ABUSE);  retroCallbackList.add(retroCallback);  mYeloApi.reportAbuse(reportAbuseRequestModel,retroCallback);}  }
class C{  protected OMGraphic createPoint(MysqlPoint myPoint){  ImageIcon actualPointSymbol=new ImageIcon(pointSymbol);  OMRaster ompoint=new OMRaster((float)myPoint.getNorthings(),(float)myPoint.getEastings(),actualPointSymbol);  drawingAttributes.setTo(ompoint);  return ompoint;}  }
class C{  public Scanner reset(){  delimiter=DEFAULT_DELIMITER;  setLocale(Locale.getDefault());  currentRadix=DEFAULT_RADIX;  return this;}  }
class C{  @Override public void addDataSourceListener(DataSourceListener dsl){  m_dataListeners.add(dsl);}  }
class C{  public static boolean hasServlet(WebXml webXml,String servletName){  return webXml.getTagByIdentifier(WebXmlType.SERVLET,servletName) != null;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.161 -0500",hash_original_method="4F3979691C622EA5D57CC5639ACF4BFA",hash_generated_method="8010346A9A49BD37949A5284CA6889FD") public SparseIntArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new int[initialCapacity];  mSize=0;}  }
class C{  protected boolean isDefaultFullDetail(){  return defaultFullDetail;}  }
class C{  public StringBuilder impl(){  assert impl != null;  return impl;}  }
class C{  public double functionValue(){  return this.functionValue_;}  }
class C{  public boolean hasInconsistencies(){  return !inconsistencies.isEmpty();}  }
class C{  public ValueChangedEvent(Control source,T newValue){  this.newValue=newValue;  this.source=source;}  }
class C{  public void clear(){  this.turnsLeftToBurn=0;  this.turnsIVLeftToBurn=0;}  }
class C{  public void update(){  double[] last=historyArray[historyArray.length - 1];  for (int i=historyArray.length - 1; i > 0; i--) {    historyArray[i]=historyArray[i - 1];  }  historyArray[0]=last;  ++this.step;  for (int i=0; i < updateFunction.getNumFactors(); i++) {    if (this.step % updatePeriods[i] == 0) {      historyArray[0][i]=this.updateFunction.getValue(i,historyArray);    }  }}  }
class C{  private synchronized void sendNotificationsIfSwitchDiffers(IOFSwitch oldSw,IOFSwitch newSw){}  }
class C{  public static String generateSeparateAttributesClass(final Class<?> targetClass,String packageOfAttributesClass){  return generateAttributesForClass(targetClass,true,packageOfAttributesClass);}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  protected void calcModulus(){  if (mXAxis == null || !mXAxis.isEnabled())   return;  if (!mXAxis.isAxisModulusCustom()) {    float[] values=new float[9];    mViewPortHandler.getMatrixTouch().getValues(values);    mXAxis.mAxisLabelModulus=(int)Math.ceil((mData.getXValCount() * mXAxis.mLabelWidth) / (mViewPortHandler.contentWidth() * values[Matrix.MSCALE_X]));  }  if (mLogEnabled)   Log.i(LOG_TAG,"X-Axis modulus: " + mXAxis.mAxisLabelModulus + ", x-axis label width: "+ mXAxis.mLabelWidth+ ", content width: "+ mViewPortHandler.contentWidth());  if (mXAxis.mAxisLabelModulus < 1)   mXAxis.mAxisLabelModulus=1;}  }
class C{  public <Request extends TransportRequest>void registerRequestHandler(String action,Class<Request> request,String executor,boolean forceExecution,TransportRequestHandler<Request> handler){  RequestHandlerRegistry<Request> reg=new RequestHandlerRegistry<>(action,request,handler,executor,forceExecution);  registerRequestHandler(reg);}  }
class C{  @SuppressWarnings("rawtypes") public static IV decode(final String val,final String type){  final DTE dte=Enum.valueOf(DTE.class,type);switch (dte) {case XSDBoolean:{      return XSDBooleanIV.valueOf((Boolean.valueOf(val)));    }case XSDByte:{    final byte x=Byte.valueOf(val);    return new XSDNumericIV<BigdataLiteral>(x);  }case XSDShort:{  final short x=Short.valueOf(val);  return new XSDNumericIV<BigdataLiteral>(x);}case XSDInt:{final int x=Integer.valueOf(val);return new XSDNumericIV<BigdataLiteral>(x);}case XSDLong:{final long x=Long.valueOf(val);return new XSDNumericIV<BigdataLiteral>(x);}case XSDFloat:{final float x=Float.valueOf(val);return new XSDNumericIV<BigdataLiteral>(x);}case XSDDouble:{final double x=Double.valueOf(val);return new XSDNumericIV<BigdataLiteral>(x);}case UUID:{final UUID x=UUID.fromString(val);return new UUIDLiteralIV<BigdataLiteral>(x);}case XSDInteger:{final BigInteger x=new BigInteger(val);return new XSDIntegerIV<BigdataLiteral>(x);}case XSDDecimal:{final BigDecimal x=new BigDecimal(val);return new XSDDecimalIV<BigdataLiteral>(x);}case XSDString:{return new FullyInlineTypedLiteralIV(val,null,XMLSchema.STRING,true);}case XSDUnsignedByte:{return new XSDUnsignedByteIV<>((byte)(Byte.valueOf(val) + Byte.MIN_VALUE));}case XSDUnsignedShort:{return new XSDUnsignedShortIV<>((short)(Short.valueOf(val) + Short.MIN_VALUE));}case XSDUnsignedInt:{return new XSDUnsignedIntIV((int)(Integer.valueOf(val) + Integer.MIN_VALUE));}case XSDUnsignedLong:{return new XSDUnsignedLongIV<>(Long.valueOf(val) + Long.MIN_VALUE);}default :throw new UnsupportedOperationException("dte=" + dte);}}  }
class C{  @Override public io.github.laucherish.purezhihud.utils.logger.Settings init(String tag){  if (tag == null) {    throw new IllegalStateException("tag may not be null");  }  LoggerPrinter.TAG=tag;  return settings;}  }
class C{  protected static boolean isTokenCharacter(int ch){  if ((ch < 33) || (ch > 126)) {    return false;  }switch (ch) {case '"':case '(':case ')':case ',':case '/':case ':':case ';':case '<':case '=':case '>':case '?':case '@':case '[':case '\\':case ']':case '{':case '}':    return false;}return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.138 -0500",hash_original_method="6E0664B211A1B13A2C33147AD11424D2",hash_generated_method="D454C1E640BB99B0BB734BA6E84010B4") public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public PatternReference(String id,Word... tokens){  this.id=id;  this.tokens=Arrays.asList(tokens);}  }
class C{  private static SecretKey generateNewKey(String algo) throws NoSuchAlgorithmException {  String encodedKey=_signatureHelper.generateKey(algo);  return _signatureHelper.createKey(encodedKey,algo);}  }
class C{  public void select(MonotoneChain mc,int startIndex){  mc.getLineSegment(startIndex,selectedSegment);  select(selectedSegment);}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  public Task<FileSnapshotRestRep> restore(URI id){  return postTask(getIdUrl() + "/restore",id);}  }
class C{  protected List<String> tokenize(final char[] srcChars,final int offset,final int count){  if (srcChars == null || count == 0) {    return Collections.emptyList();  }  final StrBuilder buf=new StrBuilder();  final List<String> tokenList=new ArrayList<String>();  int pos=offset;  while (pos >= 0 && pos < count) {    pos=readNextToken(srcChars,pos,count,buf,tokenList);    if (pos >= count) {      addToken(tokenList,"");    }  }  return tokenList;}  }
class C{  public static void output(char[][] img){  for (int i=0; i < img.length; i++) {    for (int j=0; j < img[0].length; j++) {      System.out.print(img[i][j]);    }    System.out.println();  }  System.out.println();}  }
class C{  @Override protected void initGUI(){  super.initGUI();  m_SortNewTableModel=initialSortNewTableModel();  m_Model.addMouseListenerToHeader(this);  if (getSortNewTableModel())   sort(0);  m_UseOptimalColumnWidths=initialUseOptimalColumnWidths();  if (getUseOptimalColumnWidths()) {    setAutoResizeMode(AUTO_RESIZE_OFF);    setOptimalColumnWidth();  }}  }
class C{  public void startInternalActivity(Intent intent){  helper.startInternalActivity(intent);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (x_1: ");  result.append(x_1);  result.append(", y_1: ");  result.append(y_1);  result.append(", width_1: ");  result.append(width_1);  result.append(", height_1: ");  result.append(height_1);  result.append(')');  return result.toString();}  }
class C{  public void testAttributeWithMissing(){  ((MergeNominalValues)m_Filter).setAttributeIndices("5");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  for (int i=0; i < result.numInstances(); i++) {    if (m_Instances.instance(i).isMissing(4)) {      assertTrue("Missing in input should give missing in result",result.instance(i).isMissing(4));    }  }}  }
class C{  void freeSoftReferences(){  try {    eatMemory(1);  } catch (  OutOfMemoryError e) {  }  System.gc();  System.gc();  freeMemory();}  }
class C{  protected Node newNode(){  return new SVGOMTRefElement();}  }
class C{  public void test_formatLjava_util_Date(){  try {    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.US);    Date current=new Date();    String dtf=format.format(current);    SimpleDateFormat sdf=new SimpleDateFormat("M/d/yy h:mm a",Locale.US);    assertTrue("Incorrect date format",sdf.format(current).equals(dtf));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public Notification delete(){  getSysNotificationManager().cancel(id);  if (attributes.delayed || attributes.scheduled) {    cancelAlarm();  }  deleteFromPreferences();  Log.i("ReactSystemNotification","Notification Deleted: " + id);  return this;}  }
class C{  static void errorInvalidEntity(String systemID,int lineNr,String entity) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Invalid entity: `&" + entity + ";'");}  }
class C{  public static double dnormLog(double x){  return logPSI - x * x / 2.;}  }
class C{  public void mouseExited(MouseEvent event){}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  public CommentedLineReader(Reader in,int sz){  super(in,sz);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String loadDeferPatterns(String dirName,String fileName,ConfigData configData){  String filePath=dirName + fileName;  _deferFileName=fileName;  _deferFilePath=filePath;  _deferLastModified=0;  _deferPatterns=DEFAULT_DEFER_PATTERNS;  PatternsInfo patternsInfo=loadPatterns(filePath,"defer");  if (patternsInfo.patterns != null) {    _deferPatterns=patternsInfo.patterns;    _deferVersion=patternsInfo.version;    _deferLastModified=new File(filePath).lastModified();  }  configData.setDeferPatterns(_deferPatterns);  return patternsInfo.html.toString();}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  if ((m_classAttribute == null)) {    return "SMO: No model built yet.";  }  try {    text.append("SMO\n\n");    text.append("Kernel used:\n  " + m_kernel.toString() + "\n\n");    for (int i=0; i < m_classAttribute.numValues(); i++) {      for (int j=i + 1; j < m_classAttribute.numValues(); j++) {        text.append("Classifier for classes: " + m_classAttribute.value(i) + ", "+ m_classAttribute.value(j)+ "\n\n");        text.append(m_classifiers[i][j]);        if (m_fitLogisticModels) {          text.append("\n\n");          if (m_classifiers[i][j].m_logistic == null) {            text.append("No logistic model has been fit.\n");          } else {            text.append(m_classifiers[i][j].m_logistic);          }        }        text.append("\n\n");      }    }  } catch (  Exception e) {    return "Can't print SMO classifier.";  }  return text.toString();}  }
class C{  @Override public final String toString(){  StringBuilder sb=new StringBuilder(64);  appendDesc(sb);  return sb.toString();}  }
class C{  public List<InetAddress> discoverHosts(int udpPort,int timeoutMillis){  List<InetAddress> hosts=new ArrayList<InetAddress>();  DatagramSocket socket=null;  try {    socket=new DatagramSocket();    broadcast(udpPort,socket);    socket.setSoTimeout(timeoutMillis);    while (true) {      DatagramPacket packet=new DatagramPacket(new byte[0],0);      try {        socket.receive(packet);      } catch (      SocketTimeoutException ex) {        if (INFO)         info("kryonet","Host discovery timed out.");        return hosts;      }      if (INFO)       info("kryonet","Discovered server: " + packet.getAddress());      hosts.add(packet.getAddress());    }  } catch (  IOException ex) {    if (ERROR)     error("kryonet","Host discovery failed.",ex);    return hosts;  } finally {    if (socket != null)     socket.close();  }}  }
class C{  public PBEWithMD5AndTripleDESCipher() throws NoSuchAlgorithmException, NoSuchPaddingException {  core=new PBES1Core("DESede");}  }
class C{  public final ByteArrayBuilder append(StringBuilder stringBuilder,Charset charset) throws UnsupportedEncodingException {  return append(stringBuilder.toString(),charset);}  }
class C{  public final void add(Generator generator){  add(generator,0);}  }
class C{  public void constValueIndex(short value) throws IOException {  constValueIndex('S',pool.addIntegerInfo(value));}  }
class C{  public void enable(){  setEnabled(true);}  }
class C{  public boolean deleteAttachmentPoint(long sw,short port){  AttachmentPoint ap=new AttachmentPoint(sw,port,0);  if (this.oldAPs != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.oldAPs);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.oldAPs=apList;    }  }  if (this.attachmentPoints != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.attachmentPoints);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.attachmentPoints=apList;      return true;    }  }  return false;}  }
class C{  public ViewExpiredException(String message,Throwable cause,String viewId){  super(message,cause);  this.viewId=viewId;}  }
class C{  public String stripID(){  if (this.isEmpty || this.value.charAt(this.value.length() - this.trailing - 1) != '}') {    return null;  }  int p=this.leading;  boolean found=false;  while (p < this.value.length() && !found) {switch (this.value.charAt(p)) {case '\\':      if (p + 1 < this.value.length()) {switch (this.value.charAt(p + 1)) {case '{':          p++;        break;    }  }p++;break;case '{':found=true;break;default :p++;break;}}if (found) {if (p + 1 < this.value.length() && this.value.charAt(p + 1) == '#') {final int start=p + 2;p=start;found=false;while (p < this.value.length() && !found) {switch (this.value.charAt(p)) {case '\\':if (p + 1 < this.value.length()) {switch (this.value.charAt(p + 1)) {case '}':p++;break;}}p++;break;case '}':found=true;break;default :p++;break;}}if (found) {final String id=this.value.substring(start,p).trim();if (this.leading != 0) {this.value=this.value.substring(0,this.leading) + this.value.substring(this.leading,start - 2).trim();} else {this.value=this.value.substring(this.leading,start - 2).trim();}this.trailing=0;return id.length() > 0 ? id : null;}}}return null;}  }
class C{  public DataSource(Map<String,String> dsProperties){  set(dsProperties);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public BlockOption(BlockOption origin){  if (origin == null)   throw new NullPointerException();  this.setSzx(origin.getSzx());  this.setM(origin.isM());  this.setNum(origin.getNum());}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(getClass().getSimpleName());  Map<String,Object> properties=getDebugProperties();  boolean hasProperties=false;  for (  Map.Entry<String,Object> entry : properties.entrySet()) {    sb.append(hasProperties ? "," : "<");    hasProperties=true;    sb.append(entry.getKey()).append("=").append(entry.getValue());  }  if (hasProperties) {    sb.append(">");  }  sb.append("@").append(Integer.toHexString(hashCode()));  return sb.toString();}  }
class C{  @Override public String encode(String pString){  return soundex(pString);}  }
class C{  public void onObbStateChange(String path,int state){}  }
class C{  public void test_CreateDestroy_ticket_948_01() throws Exception {  if (!BigdataStatics.runKnownBadTests) {    return;  }  final String namespace=getName();  final Properties properties1=new Properties(getProperties());  properties1.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,BSBMVocabulary.class.getName());  final Properties properties2=new Properties(getProperties());  properties2.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,RDFSVocabulary.class.getName());  Journal jnl=null;  try {    jnl=new Journal(getProperties());    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties1)).get();    assertKBExists(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new DestroyKBTask(namespace)).get();    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties2)).get();    assertKBExists(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  protected LogicalRelationExpressionImpl(){  super();}  }
class C{  public void addDataSourceCount(int dataSourceCountDelta){  setDataSourceCount(getDataSourceCount() + dataSourceCountDelta);}  }
class C{  public static void write(double[] llPoints,int units,int lType,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkPoly.write(llPoints,units,lType,-1,properties,dos);}  }
class C{  public void addParameterValues(org.oscm.xsd.ServiceParameter param){  if (localParameterValues == null) {    localParameterValues=new org.oscm.xsd.ServiceParameter[]{};  }  localParameterValuesTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterValues);  list.add(param);  this.localParameterValues=(org.oscm.xsd.ServiceParameter[])list.toArray(new org.oscm.xsd.ServiceParameter[list.size()]);}  }
class C{  public TcpHarvester(int port,boolean ssltcp) throws IOException {  super(port,Collections.list(NetworkInterface.getNetworkInterfaces()));  this.ssltcp=ssltcp;}  }
class C{  public static boolean isMethodInvocation(Tree tree,ExecutableElement method,ProcessingEnvironment env){  if (!(tree instanceof MethodInvocationTree)) {    return false;  }  MethodInvocationTree methInvok=(MethodInvocationTree)tree;  ExecutableElement invoked=TreeUtils.elementFromUse(methInvok);  return isMethod(invoked,method,env);}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static int parse(String[] options,char option,int defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.CLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getReader(),null,Long.MAX_VALUE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final double angle(){  return Math.atan2(y,x);}  }
class C{  public OneVSOne(Classifier baseClassifier){  this(baseClassifier,false);}  }
class C{  public static VictorSP victorSP(int pwmPort){  return pwmRegistrar.fetch(pwmPort,VictorSP.class,null);}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public void paintTreeBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void sendSpokeHeartbeats(){  for (  ServerTarget target : _targets) {    ServerHeartbeat server=target.getServer();    if (server.getRack() != _rack) {      continue;    }    if (isHub(server)) {      target.sendServerHeartbeat(getServerSelf().getUpdate());    }  }}  }
class C{  public Element insertAfter(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  final Node nextNode=nextElementNode(delegate);  if (nextNode != null) {    delegate.getParentNode().insertBefore(newNode,nextNode);  } else {    delegate.getParentNode().appendChild(newNode);  }  xmlTree.insertAfter(newElement,element,this);  return this;}  }
class C{  void throttleOutbound(LocoNetMessage m) throws DelayException {  protectedWait(50);  for (int i=1; i < 100; i++) {    if (!controller.isXmtBusy()) {      return;    }    protectedWait(10);  }  throw new DelayException("Ran out of time after sending " + m.toString());}  }
class C{  public void close() throws IOException {  jarFile.close();  super.close();}  }
class C{  private boolean checkOSVersion(ComputeImage os){  return "esxi".equals(os.getOsName()) && os.getOsVersion() != null && (os.getOsVersion().startsWith("5.") || os.getOsVersion().startsWith("6."));}  }
class C{  @Override public String checkRecordIdInLog(final String recordId,final int userId,final Connection connection) throws Exception {  String cgn=null;  try {    final String query="SELECT VOUCHERNUMBER FROM integrationlog WHERE RECORDID= ? and USERID= ? order by id desc";    if (LOGGER.isInfoEnabled())     LOGGER.info("  query   " + query);    pst=persistenceService.getSession().createSQLQuery(query);    pst.setString(0,recordId);    pst.setInteger(1,userId);    rset=pst.list();    for (    final Object[] element : rset) {      cgn=element[0].toString();      if (LOGGER.isInfoEnabled())       LOGGER.info("  cgn in log  " + cgn);    }  } catch (  final Exception e) {    LOGGER.error("Exp=" + e.getMessage(),e);    throw new Exception(e.toString());  }  return cgn;}  }
class C{  public void start(){  if (!assembled) {    throw new IllegalStateException("You MUST call assemble before calling start.");  }  if (startAttempted) {    logger.d("You have already attempted to start this BugShaker instance. Calling start " + "again is a no-op.");    return;  }  if (emailCapabilitiesProvider.canSendEmails()) {    application.registerActivityLifecycleCallbacks(simpleActivityLifecycleCallback);    final SensorManager sensorManager=(SensorManager)application.getSystemService(SENSOR_SERVICE);    final ShakeDetector shakeDetector=new ShakeDetector(this);    final boolean didStart=shakeDetector.start(sensorManager);    if (didStart) {      logger.d("Shake detection successfully started!");    } else {      logger.e("Error starting shake detection: hardware does not support detection.");    }  } else {    logger.e("Error starting shake detection: device cannot send emails.");  }  startAttempted=true;}  }
class C{  private boolean isGroupCopyImageEnabledForAPIT(FunctionalAPIImpl port,ConsistencyGroupCopyUID groupCopy,boolean expectLoggedAccess,RecoverPointTimeStamp apitTime) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, RecoverPointException {  ConsistencyGroupUID groupUID=groupCopy.getGroupUID();  ConsistencyGroupState groupState;  List<ConsistencyGroupCopyState> groupCopyStateList;  groupState=port.getGroupState(groupUID);  groupCopyStateList=groupState.getGroupCopiesStates();  String cgName=port.getGroupName(groupCopy.getGroupUID());  String cgCopyName=port.getGroupCopyName(groupCopy);  Timestamp enabledApitTime=null;  for (  ConsistencyGroupCopyState groupCopyState : groupCopyStateList) {    if (RecoverPointUtils.copiesEqual(groupCopyState.getCopyUID(),groupCopy)) {      StorageAccessState accessState=groupCopyState.getStorageAccessState();      if (accessState == StorageAccessState.DIRECT_ACCESS) {        logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " is in direct access mode.");        return false;      }      if (accessState == StorageAccessState.NO_ACCESS) {        logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " is in NO access mode.");        return false;      }      logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ "  IS enabled. State is: "+ accessState.toString());      if (groupCopyState.getAccessedImage().getDescription().isEmpty()) {        RecoverPointTimeStamp enabledTimeDisplay=groupCopyState.getAccessedImage().getClosingTimeStamp();        enabledApitTime=new Timestamp(enabledTimeDisplay.getTimeInMicroSeconds() / numMicroSecondsInMilli);        logger.debug("No name. Mounted snapshot timestamp: " + enabledApitTime.toString());      } else {        throw RecoverPointException.exceptions.expectingAPITMountFoundBookmark(groupCopyState.getAccessedImage().getDescription());      }      if (apitTime != null) {        RecoverPointTimeStamp enabledTime=groupCopyState.getAccessedImage().getClosingTimeStamp();        if (Math.abs(enabledTime.getTimeInMicroSeconds() - apitTime.getTimeInMicroSeconds()) < (numMicroSecondsInSecond * 60)) {          if (expectLoggedAccess) {            logger.debug("Seeing if copy is enabled for LOGGED_ACCESS");            if (accessState == StorageAccessState.LOGGED_ACCESS) {              logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ "  IS enabled in LOGGED_ACCESS");              return true;            }            logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ "  is NOT enabled in LOGGED_ACCESS. Image state is: "+ accessState.toString());            return false;          } else {            logger.debug("APIT enabled for same time requested");            return true;          }        }        final Long timeDeviationInMicroSeconds=Long.valueOf(5 * 60 * numMicroSecondsInMilli* numMillisInSecond);        TimeFrame window=new TimeFrame();        RecoverPointTimeStamp endTime=new RecoverPointTimeStamp();        RecoverPointTimeStamp startTime=new RecoverPointTimeStamp();        RecoverPointTimeStamp prevSnapTime=null;        endTime.setTimeInMicroSeconds(apitTime.getTimeInMicroSeconds() + timeDeviationInMicroSeconds);        startTime.setTimeInMicroSeconds(apitTime.getTimeInMicroSeconds() - timeDeviationInMicroSeconds);        window.setStartTime(startTime);        window.setEndTime(endTime);        for (        Snapshot snapItem : port.getGroupCopySnapshotsForTimeFrameAndName(groupCopy,window,null).getSnapshots()) {          if (prevSnapTime == null) {            prevSnapTime=snapItem.getClosingTimeStamp();          } else {            if (prevSnapTime.getTimeInMicroSeconds() < snapItem.getClosingTimeStamp().getTimeInMicroSeconds()) {              prevSnapTime=snapItem.getClosingTimeStamp();            }          }        }        if (prevSnapTime != null) {          RecoverPointTimeStamp enabledTimeDisplay=groupCopyState.getAccessedImage().getClosingTimeStamp();          enabledApitTime=new Timestamp(enabledTimeDisplay.getTimeInMicroSeconds() / numMicroSecondsInMilli);          logger.debug("Previous snap time is : " + enabledApitTime.toString());          if (Math.abs(enabledTime.getTimeInMicroSeconds() - prevSnapTime.getTimeInMicroSeconds()) < numMicroSecondsInSecond) {            logger.debug("Currently enabled image is requested snap!");            if (expectLoggedAccess) {              logger.debug("Seeing if copy is enabled for LOGGED_ACCESS");              if (accessState == StorageAccessState.LOGGED_ACCESS) {                logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ "  IS enabled in LOGGED_ACCESS");                return true;              }              logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ "  is NOT enabled in LOGGED_ACCESS. Image state is: "+ accessState.toString());              return false;            } else {              return true;            }          } else {            throw RecoverPointException.exceptions.wrongTimestampEnabled(enabledApitTime);          }        }      } else {        return false;      }    }  }  logger.error("Could not locate CG copy state");  return false;}  }
class C{  public void attribTopLevel(Env<AttrContext> env){  JCCompilationUnit toplevel=env.toplevel;  try {    annotate.flush();  } catch (  CompletionFailure ex) {    chk.completionError(toplevel.pos(),ex);  }}  }
class C{  public static int size(Object[] array){  return array == null ? 0 : array.length;}  }
class C{  public void destroyNotIn(PathContext path,PathContextFactory factory){  Iterator<Path> aElements=this.path.elements().iterator();  Iterator<Path> bElements=path.path.elements().iterator();  while (aElements.hasNext() && bElements.hasNext()) {    Path aElement=aElements.next();    Path bElement=bElements.next();    if (!aElement.equals(bElement)) {      BasePath aBasePath=(BasePath)aElement;      BasePath bBasePath=(BasePath)bElement;      Timber.d("Destroying [" + aBasePath.getScopeName() + "] on matching with ["+ bBasePath.getScopeName()+ "]");      factory.tearDownContext(contexts.get(aElement));      break;    }  }  while (aElements.hasNext()) {    Path aElement=aElements.next();    BasePath aBasePath=(BasePath)aElement;    Timber.d("Destroying [" + aBasePath.getScopeName() + "] as it is not found in ["+ path+ "]");    factory.tearDownContext(contexts.get(aElement));  }}  }
class C{  public void clearAddressOutOfRange(){  addressOutOfRange=false;}  }
class C{  public void dragStart(DragSourceEvent event){  if (LOG.isDebugEnabled()) {    LOG.debug("dragStart...");  }  try {    IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());    risikoMassnahmenUmsetzungen=new ArrayList<RisikoMassnahmenUmsetzung>();    if (selection.size() < 1) {      event.doit=false;      return;    }    for (Iterator iter=selection.iterator(); iter.hasNext(); ) {      Object object=iter.next();      if (!(object instanceof RisikoMassnahmenUmsetzung || object instanceof MassnahmenUmsetzung)) {        if (LOG.isDebugEnabled()) {          LOG.debug("dragStart, wrong object");        }        event.doit=false;        return;      } else       if (object instanceof RisikoMassnahmenUmsetzung) {        if (LOG.isDebugEnabled()) {          LOG.debug("dragStart, RisikoMassnahmenUmsetzung");        }        RisikoMassnahmenUmsetzung umsetzung=RisikoMassnahmenUmsetzungFactory.buildFromRisikomassnahmenUmsetzung((RisikoMassnahmenUmsetzung)object,cnaElement,null);        risikoMassnahmenUmsetzungen.add(umsetzung);      } else {        if (LOG.isDebugEnabled()) {          LOG.debug("dragStart, MassnahmenUmsetzung");        }        RisikoMassnahmenUmsetzung umsetzung=RisikoMassnahmenUmsetzungFactory.buildFromMassnahmenUmsetzung((MassnahmenUmsetzung)object,cnaElement,null);        risikoMassnahmenUmsetzungen.add(umsetzung);      }    }    event.doit=true;    event.data=risikoMassnahmenUmsetzungen.toArray(new RisikoMassnahmenUmsetzung[risikoMassnahmenUmsetzungen.size()]);    if (LOG.isDebugEnabled()) {      LOG.debug("dragStart finished");    }  } catch (  Exception t) {    LOG.error("Error in dragStart",t);  }}  }
class C{  public void save(HttpServletResponse response){  String[][] nameValues={{IS_QUICK_SALES,isQuickSales + ""},{IS_CUSTOMER_COMPULSORY,isCustomerCompulsory + ""},{ALLOW_CREDIT_SALES,allowCreditSales + ""},{ALLOW_CUSTOMER_RETURN_ORDER,allowCustomerReturnOrder + ""},{ALLOW_INVOKE_CUSTOMER_RETURN_ORDER,allowInvokeCustomerReturnOrder + ""},{PAYMENT_RULE,paymentRule},{SEARCH_PRODUCT_BY,searchProductBy}};  for (int i=0; i < nameValues.length; i++) {    String[] namevalue=nameValues[i];    String name=namevalue[0];    String value=namevalue[1];    Cookie cookie=new Cookie(name,value);    cookie.setMaxAge(60 * 60 * 24* 365);    response.addCookie(cookie);  }}  }
class C{  public synchronized void resizeMatrix(int newsize) throws IOException {  if (newsize >= 0xFFFF) {    throw new RuntimeException("Matrix size is too big and will overflow the integer datatype.");  }  if (!array.isWritable()) {    throw new IOException("Can't resize a read-only array.");  }  array.resizeFile(arraysize(newsize));  this.matrixsize=newsize;  ByteBuffer header=array.getExtraHeader();  header.putInt(this.matrixsize);}  }
class C{  private static Tuple<List<List<Unit>>,List<Unit>> categorizeLowLuckAirUnits(final Collection<Unit> units,final int groupSize){  final Collection<UnitCategory> categorizedAir=UnitSeperator.categorize(units,null,false,true);  final List<List<Unit>> groupsOfSize=new ArrayList<>();  final List<Unit> toRoll=new ArrayList<>();  for (  final UnitCategory uc : categorizedAir) {    final int remainder=uc.getUnits().size() % groupSize;    final int splitPosition=uc.getUnits().size() - remainder;    final List<Unit> group=new ArrayList<>(uc.getUnits().subList(0,splitPosition));    if (!group.isEmpty()) {      for (int i=0; i < splitPosition; i+=groupSize) {        final List<Unit> miniGroup=new ArrayList<>(uc.getUnits().subList(i,i + groupSize));        if (!miniGroup.isEmpty()) {          groupsOfSize.add(miniGroup);        }      }    }    toRoll.addAll(uc.getUnits().subList(splitPosition,uc.getUnits().size()));  }  return Tuple.of(groupsOfSize,toRoll);}  }
class C{  public MaildirFolder(String absPath,MailboxPath path,MailboxPathLocker locker){  this.rootFolder=new File(absPath);  this.curFolder=new File(rootFolder,CUR);  this.newFolder=new File(rootFolder,NEW);  this.tmpFolder=new File(rootFolder,TMP);  this.uidFile=new File(rootFolder,UIDLIST_FILE);  this.aclFile=new File(rootFolder,ACL_FILE);  this.locker=locker;  this.path=path;  this.lastUid=Optional.absent();}  }
class C{  public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  public IRIValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  public static BigDecimal intPower(BigDecimal x,long exponent,int scale){  if (exponent < 0) {    return BigDecimal.valueOf(1).divide(intPower(x,-exponent,scale),scale,BigDecimal.ROUND_HALF_EVEN);  }  BigDecimal power=BigDecimal.valueOf(1);  while (exponent > 0) {    if ((exponent & 1) == 1) {      power=power.multiply(x).setScale(scale,BigDecimal.ROUND_HALF_EVEN);    }    x=x.multiply(x).setScale(scale,BigDecimal.ROUND_HALF_EVEN);    exponent>>=1;    Thread.yield();  }  return power;}  }
class C{  @SuppressLint("InlinedApi") public static Bitmap blur(Context context,Bitmap sentBitmap,int radius){  if (radius < 0) {    radius=0;    if (DEBUG) {    }  } else   if (radius > 25) {    radius=25;    if (DEBUG) {    }  }  if (Build.VERSION.SDK_INT > 16) {    Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);    final RenderScript rs=RenderScript.create(context);    final Allocation input=Allocation.createFromBitmap(rs,sentBitmap,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);    final Allocation output=Allocation.createTyped(rs,input.getType());    final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    script.setRadius(radius);    script.setInput(input);    script.forEach(output);    output.copyTo(bitmap);    return bitmap;  }  Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public InputDecoder(final Reader source){  this.source=new BufferedReader(source);  this.bytePatterns=new ArrayList<CharacterPattern>();  this.currentMatching=new ArrayList<Character>();  this.seenEOF=false;  this.timeoutUnits=0;}  }
class C{  public CommonTermsQueryBuilder(String name,Object text){  if (name == null) {    throw new IllegalArgumentException("Field name must not be null");  }  if (text == null) {    throw new IllegalArgumentException("Query must not be null");  }  this.text=text;  this.name=name;}  }
class C{  public Set<String> addUserInput(SpeechData inputSpeech){  Assignment a=new Assignment(settings.userSpeech,inputSpeech);  a.addPair(settings.floor,"user");  return addContent(a);}  }
class C{  private static float saturate(float f){  return Math.max(0,Math.min(1,f));}  }
class C{  public DOMAccessException(Exception e){  this(e,null);}  }
class C{  private void createDbTable(SQLiteDatabase db,String tableName){  if (LOCAL_LOGV)   Log.d(TAG,"Creating table and index for: " + tableName);  String createTableSql=String.format(CREATE_TABLE_SQL_FORMAT,tableName);  db.execSQL(createTableSql);  String createIndexSql=String.format(CREATE_INDEX_SQL_FORMAT,tableName,1,tableName);  db.execSQL(createIndexSql);}  }
class C{  public static boolean isStructuralMetadata(byte[] key){  if (isPHDRMetadataTrackSubDescriptor(key)) {    return true;  }  for (int i=0; i < KLVPacket.KEY_FIELD_SIZE; i++) {    if ((StructuralMetadata.KEY_MASK[i] != 0) && (StructuralMetadata.KEY_BASE[i] != key[i])) {      return false;    }  }  return ((key[5] == 0x53) || (key[5] == 0x13));}  }
class C{  public ShardProgress clone(){  ShardProgress clone=new ShardProgress(shardId,stageName);  clone.setLastSeqno(lastSeqno);  clone.setLastEventId(lastEventId);  clone.setApplyLatencyMillis(applyLatencyMillis);  clone.setEventCount(eventCount);  return clone;}  }
class C{  public static long readStateFromFile(File file,double[] lnL){  long state=-1;  try {    FileReader fileIn=new FileReader(file);    BufferedReader in=new BufferedReader(fileIn);    int[] rngState=null;    String line=in.readLine();    String[] fields=line.split("\t");    if (fields[0].equals("rng")) {      try {        rngState=new int[fields.length - 1];        for (int i=0; i < rngState.length; i++) {          rngState[i]=Integer.parseInt(fields[i + 1]);        }      } catch (      NumberFormatException nfe) {        throw new RuntimeException("Unable to read state number from state file");      }      line=in.readLine();      fields=line.split("\t");    }    try {      if (!fields[0].equals("state")) {        throw new RuntimeException("Unable to read state number from state file");      }      state=Long.parseLong(fields[1]);    } catch (    NumberFormatException nfe) {      throw new RuntimeException("Unable to read state number from state file");    }    line=in.readLine();    fields=line.split("\t");    try {      if (!fields[0].equals("lnL")) {        throw new RuntimeException("Unable to read lnL from state file");      }      if (lnL != null) {        lnL[0]=Double.parseDouble(fields[1]);      }    } catch (    NumberFormatException nfe) {      throw new RuntimeException("Unable to read lnL from state file");    }    for (    Parameter parameter : Parameter.CONNECTED_PARAMETER_SET) {      line=in.readLine();      fields=line.split("\t");      int dimension=Integer.parseInt(fields[1]);      if (dimension != parameter.getDimension()) {        System.err.println("Unable to match state parameter dimension: " + dimension + ", expecting "+ parameter.getDimension());      }      if (fields[0].equals("branchRates.categories.rootNodeNumber")) {        System.out.println("eek");        double value=Double.parseDouble(fields[2]);        parameter.setParameterValue(0,160.0);      } else {        for (int dim=0; dim < parameter.getDimension(); dim++) {          parameter.setParameterValue(dim,Double.parseDouble(fields[dim + 2]));        }      }    }    Set<String> expectedTreeModelNames=new HashSet<String>();    for (    Model model : Model.CONNECTED_MODEL_SET) {      if (model instanceof TreeModel) {        expectedTreeModelNames.add(model.getModelName());      }    }    while ((line=in.readLine()) != null) {      fields=line.split("\t");      boolean treeFound=false;      for (      Model model : Model.CONNECTED_MODEL_SET) {        if (model instanceof TreeModel && fields[0].equals(model.getModelName())) {          treeFound=true;          NewickImporter importer=new NewickImporter(fields[1]);          Tree tree=importer.importNextTree();          ((TreeModel)model).beginTreeEdit();          ((TreeModel)model).adoptTreeStructure(tree);          ((TreeModel)model).endTreeEdit();          expectedTreeModelNames.remove(model.getModelName());        }      }      if (!treeFound) {        throw new RuntimeException("Unable to match state parameter: " + fields[0]);      }    }    if (expectedTreeModelNames.size() > 0) {      StringBuilder sb=new StringBuilder();      for (      String notFoundName : expectedTreeModelNames) {        sb.append("Expecting, but unable to match state parameter:" + notFoundName + "\n");      }      throw new RuntimeException(sb.toString());    }    if (rngState != null) {      MathUtils.setRandomState(rngState);    }    in.close();    fileIn.close();    for (    Likelihood likelihood : Likelihood.CONNECTED_LIKELIHOOD_SET) {      likelihood.makeDirty();    }  } catch (  IOException ioe) {    throw new RuntimeException("Unable to read file: " + ioe.getMessage());  }catch (  Importer.ImportException ie) {    throw new RuntimeException("Unable to import tree: " + ie.getMessage());  }  return state;}  }
class C{  @Override public void close() throws IOException {  if (logger != null) {    logger.println("SSLSocket.close " + socket_was_closed);  }  if (!socket_was_closed) {    if (handshake_started) {      alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);      try {        output.write(alertProtocol.wrap());      } catch (      IOException ex) {      }      alertProtocol.setProcessed();    }    shutdown();    closeTransportLayer();    socket_was_closed=true;  }}  }
class C{  @Override public boolean isItemValidForSlot(int aIndex,ItemStack aStack){  return canAccessData() && mMetaTileEntity.isItemValidForSlot(aIndex,aStack);}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public CongestionControlLayer(NetworkConfig config){  super(config);  this.config=config;  this.remoteEndpointmanager=new RemoteEndpointManager(config);  setDithering(false);}  }
class C{  public float key(){  return _map._set[_index];}  }
class C{  public Object asType(Class clazz){  if (clazz.equals(java.util.ArrayList.class)) {    ArrayList rval=new ArrayList();    for (int i=0; i < data.size(); i++) {      rval.add(data.get(i));    }    return (rval);  } else   if ((clazz.equals(java.util.Set.class) || clazz.equals(java.util.HashSet.class))) {    HashSet rval=new HashSet();    for (int i=0; i < data.size(); i++) {      rval.add(data.get(i));    }    return (rval);  } else {    String msg="Can't cast TableMatrix1D to " + clazz;    throw new ClassCastException(msg);  }}  }
class C{  private void sendStageProgressPatch(State state){  if (state.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    return;  }  State patchState=new State();  if (state.nextPageLink != null) {    patchState.nextPageLink=state.nextPageLink;  }  if (state.taskState == null) {    patchState.taskState.stage=TaskState.TaskStage.STARTED;  } else {    patchState.taskState=state.taskState;  }  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(patchState);  this.sendRequest(patch);}  }
class C{  @Override public void start(BundleContext context) throws Exception {  plugin=this;  locateRuntimeDir();  initLogger();  logListener=new LogListener();  Platform.addLogListener(logListener);  super.start(context);}  }
class C{  public void discoverSentence(Vertex sentence,Network network,Vertex currentTime){}  }
class C{  public boolean mouseClicked(MouseEvent e){  if (selectedGraphic != null && !show_plot_) {switch (e.getClickCount()) {case 1:      addSelectionToPlotList();    generatePlot();  repaint();break;case 2:repaint();break;default :break;}return true;} else {return false;}}  }
class C{  public static void commitAndClose(Connection conn) throws SQLException {  if (conn != null) {    try {      conn.commit();    }  finally {      conn.close();    }  }}  }
class C{  public boolean isContextInsensitive(){  return null != m_simpleString;}  }
class C{  public TextCreationTool(TextHolderFigure prototype,Map<AttributeKey,Object> attributes){  super(prototype,attributes);}  }
class C{  public final float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){  return JsonEncoding.UTF8;}  }
class C{  public JToolTip(){  setOpaque(true);  updateUI();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.835 -0500",hash_original_method="195483BC208A3A4410E3220FCA03E982",hash_generated_method="7FF36BEFF752FC78BA0E798F3C85A766") @Override public ActionMode startActionModeForChild(View child,ActionMode.Callback callback){  if (callback != null) {    MenuBuilder builder=new MenuBuilder(mSearchDialog.mActivityContext);    Menu menu=builder.addSubMenu(DSUtils.FAKE_INT);    MenuItem menuItem=menu.add(DSUtils.FAKE_INT);    ActionMode mode=new ActionMode.SimpleActionMode();    callback.onCreateActionMode(mode,menu);    callback.onPrepareActionMode(mode,menu);    callback.onActionItemClicked(mode,menuItem);    callback.onDestroyActionMode(mode);  }  return null;}  }
class C{  private Peer randomWifiP2pPeer(){  WifiP2pDevice d=new WifiP2pDevice();  d.deviceAddress=distinctMACAddress();  return new Peer(new WifiDirectPeerNetwork(d));}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public static void shuffle(int[][] m){  int[] temp=new int[2];  for (int i=0; i < m.length; i++) {    int i1=(int)(Math.random() * m.length);    temp[0]=m[i][0];    temp[1]=m[i][1];    m[i][0]=m[i1][0];    m[i][1]=m[i1][1];    m[i1][0]=temp[0];    m[i1][1]=temp[1];  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.443 -0400",hash_original_method="3031FE249F5CE3F2014E77A11C9675EE",hash_generated_method="71C0F62D990BB42862F6F81DE318B32D") public String encode(String value){  return doubleMetaphone(value);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  nextToken=tokenizer.nextToken();  title=nextToken.substring(1,nextToken.length() - 1);  l=Integer.parseInt(tokenizer.nextToken());  t=Integer.parseInt(tokenizer.nextToken());  r=Integer.parseInt(tokenizer.nextToken());  b=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  fontName=nextToken.substring(1,nextToken.length() - 1);  fontSize=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  numCtrls=Integer.parseInt(nextToken.substring(0,nextToken.lastIndexOf("|")));  String end=sourceData.substring(sourceData.indexOf("|") + 1,sourceData.length());  StringTokenizer tokenizer2=new StringTokenizer(end,"|");  int i=0;  while (tokenizer2.hasMoreTokens()) {    ctrldefs.put(new Integer(i++),new QCtrlDef(tokenizer2.nextToken()));  }}  }
class C{  public void checkForValue(final LocalTime VALUE){  boolean wasInSection=contains(checkedValue);  boolean isInSection=contains(VALUE);  if (!wasInSection && isInSection) {    fireTimeSectionEvent(ENTERED_EVENT);  } else   if (wasInSection && !isInSection) {    fireTimeSectionEvent(LEFT_EVENT);  }  checkedValue=VALUE;}  }
class C{  public int removeAllUrlReferences(final byte[] urlhash,final LoaderDispatcher loader,final ClientIdentification.Agent agent,final CacheStrategy cacheStrategy){  if (urlhash == null)   return 0;  try {    final DigestURL url=fulltext().getURL(ASCII.String(urlhash));    if (url == null)     return 0;    final Document document=Document.mergeDocuments(url,null,loader.loadDocuments(loader.request(url,true,false),cacheStrategy,Integer.MAX_VALUE,null,agent));    if (document == null) {      fulltext().remove(urlhash);      return 0;    }    Set<String> words=null;    words=new Condenser(document,null,true,true,null,false,false,0).words().keySet();    int count=0;    if (words != null && termIndex() != null)     count=termIndex().remove(Word.words2hashesHandles(words),urlhash);    fulltext().remove(urlhash);    return count;  } catch (  final Parser.Failure e) {    return 0;  }catch (  final IOException e) {    ConcurrentLog.logException(e);    return 0;  }}  }
class C{  public ErrorConsole(){  super("TripleA Console");}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  private long wrap(final long tmp){  if (tmp >= MAX_LOCAL_COUNTER) {    throw new RuntimeException("Counter overflow: counter=" + tmp + ", pid="+ getPartitionId(tmp)+ ", ctr="+ getLocalCounter(tmp));  }  return combine(partitionId,(int)tmp);}  }
class C{  public void dumpCallGraph(String fileStr){  FileWriter fw;  try {    fw=new FileWriter(fileStr);    fw.write("digraph CallGraph {\n");    Set<Edge> edges=getAllCallGraphEdges();    Map<SootMethod,Set<SootMethod>> visitedEdges=new HashMap<SootMethod,Set<SootMethod>>();    Map<String,Set<SootMethod>> packageSubgraphs=new HashMap<String,Set<SootMethod>>();    for (    Edge edge : edges) {      if (!visitedEdges.containsKey(edge.src()))       visitedEdges.put(edge.src(),new HashSet<SootMethod>());      if (!visitedEdges.get(edge.src()).contains(edge.tgt())) {        fw.write(edge.src().hashCode() + "->" + edge.tgt().hashCode()+ ";\n");        visitedEdges.get(edge.src()).add(edge.tgt());      }      String srcPackage=edge.src().getDeclaringClass().getJavaPackageName();      if (srcPackage == null || srcPackage.equals(""))       srcPackage="No.Package";      if (!packageSubgraphs.containsKey(srcPackage)) {        packageSubgraphs.put(srcPackage,new HashSet<SootMethod>());      }      packageSubgraphs.get(srcPackage).add(edge.src());      String tgtPackage=edge.tgt().getDeclaringClass().getJavaPackageName();      if (tgtPackage == null || tgtPackage.equals(""))       tgtPackage="No.Package";      if (!packageSubgraphs.containsKey(tgtPackage)) {        packageSubgraphs.put(tgtPackage,new HashSet<SootMethod>());      }      packageSubgraphs.get(tgtPackage).add(edge.tgt());    }    for (    String pack : packageSubgraphs.keySet()) {      fw.write("subgraph " + pack.replace('.','_') + "{\n");      fw.write("label = \"" + pack + "\";\n");      fw.write("color=blue;\n");      for (      SootMethod m : packageSubgraphs.get(pack)) {        fw.write(getMethodDotLabel(m));      }      fw.write("}\n");    }    fw.write("}");    fw.close();  } catch (  IOException e) {    logger.error("Error writing call graph dot file");    droidsafe.main.Main.exit(1);  }}  }
class C{  @Override protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception {  List<String> newSteps=new ArrayList<>();  if (!initiatorURIs.isEmpty()) {    Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);    for (    Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {      String computeKey=resourceEntry.getKey();      List<URI> computeInitiatorURIs=resourceEntry.getValue();      _log.info(String.format("New export masks for %s",computeKey));      GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);      previousStep=result.getStepId();    }  }  newSteps.add(previousStep);  return newSteps;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void sendMessage(String message){  if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {    Toast.makeText(context,R.string.not_connected,Toast.LENGTH_SHORT).show();    return;  }  if (message.length() > 0) {    byte[] send=message.getBytes();    mChatService.write(send);  }}  }
class C{  @SuppressWarnings("NullableProblems") private void startUp() throws Exception {  startUpSecondary();  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs");  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setInitializeDefaultPathModes(true);  if (setNullMode)   igfsCfg.setDefaultMode(null); else   if (mode != null)   igfsCfg.setDefaultMode(mode);  igfsCfg.setPathModes(pathModes);  if (setSecondaryFs)   igfsCfg.setSecondaryFileSystem(igfsSecondary.asSecondary());  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("igfs-grid");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  grid=(IgniteEx)G.start(cfg);  igfs=(IgfsImpl)grid.fileSystem("igfs");}  }
class C{  private void doForward(){  if (getBinding().web.canGoForward()) {    getBinding().web.goForward();  }}  }
class C{  public static float calculateTextHeight(float textSizePx){  Paint p=new Paint();  p.setTextSize(textSizePx);  Paint.FontMetrics fm=p.getFontMetrics();  return -fm.top + fm.bottom;}  }
class C{  public T action(String value){  return attr("action",value);}  }
class C{  public static boolean clearFormat(long[][] buffer){  int rows=buffer.length;  boolean isDirty=false;  for (int y=0; y < rows; y++) {    int cols=buffer[y].length;    for (int x=0; x < cols; x++) {      isDirty=isDirty || buffer[y][x] != defaultEmpty708Format;      buffer[y][x]=defaultEmpty708Format;    }  }  return isDirty;}  }
class C{  protected NumericLiteral(int number){  this(number,XMLSchema.INT);}  }
class C{  public Boolean isPanTiltPositionSupported(){  return panTiltPositionSupported;}  }
class C{  public synchronized void enqueue(T obj){  QueueElement<T> newElt=new QueueElement<>(obj);  if (head == null) {    head=newElt;    tail=newElt;    length=1;  } else {    newElt.next=head;    head.prev=newElt;    head=newElt;    length++;  }  notify();}  }
class C{  private static String convertLong(AbstractStringBuilder sb,long n){  int i=(int)n;  if (i == n) {    return convertInt(sb,i);  }  boolean negative=(n < 0);  if (negative) {    n=-n;    if (n < 0) {      String quickResult="-9223372036854775808";      if (sb != null) {        sb.append0(quickResult);        return null;      }      return quickResult;    }  }  int bufLen=20;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int low=(int)(n % 1000000000);  int cursor=intIntoCharArray(buf,bufLen,low);  while (cursor != (bufLen - 9)) {    buf[--cursor]='0';  }  n=((n - low) >>> 9) * 0x8E47CE423A2E9C6DL;  if ((n & (-1L << 32)) == 0) {    cursor=intIntoCharArray(buf,cursor,(int)n);  } else {    int lo32=(int)n;    int hi32=(int)(n >>> 32);    int midDigit=MOD_10_TABLE[(0x19999999 * lo32 + (lo32 >>> 1) + (lo32 >>> 3)) >>> 28];    midDigit-=hi32 << 2;    if (midDigit < 0) {      midDigit+=10;    }    buf[--cursor]=DIGITS[midDigit];    int rest=((int)((n - midDigit) >>> 1)) * 0xCCCCCCCD;    cursor=intIntoCharArray(buf,cursor,rest);  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  public static CreateWalletResponse create(String password,String apiCode) throws IOException, APIException {  return create(password,apiCode,null,null,null);}  }
class C{  public SSATuneUp(){  super("SSA Tune Up",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new TuneUpPreparation()),new OptimizationPlanAtomicElement(new EnterSSA()),new OptimizationPlanAtomicElement(new Simple(1,true,true,false,false)),new OptimizationPlanAtomicElement(new FoldingDriver())});}  }
class C{  public static <T>void shuffle(T[] array){  shuffle(array,new Random());}  }
class C{  public void propertyChange(PropertyChangeEvent e){  JSpinner spinner=getSpinner();  if (spinner == null) {    return;  }  Object source=e.getSource();  String name=e.getPropertyName();  if ((source instanceof JFormattedTextField) && "value".equals(name)) {    Object lastValue=spinner.getValue();    try {      spinner.setValue(getTextField().getValue());    } catch (    IllegalArgumentException iae) {      try {        ((JFormattedTextField)source).setValue(lastValue);      } catch (      IllegalArgumentException iae2) {      }    }  }}  }
class C{  public synchronized void clear(){  clearAnnotations();  clearSeriesValues();}  }
class C{  public ObjectFactory(){}  }
class C{  public void saveConfiguration(){  if (this.createConfigurationXML()) {    XMLFileChooser fc=new XMLFileChooser();    if (fc.showSaveDialog(new JPanel()) == XMLFileChooser.APPROVE_OPTION) {      String path=fc.getSelectedFile().getPath();      if (path.indexOf('.') == -1) {        path+=".xml";      }      if (this.saveConfiguration(path)) {        System.out.println("SAVE CONFIG SUCCESSFULL");      } else {        System.out.println("SAVE CONFIG FAILED");      }    }  }}  }
class C{  public FisheyeDistortion(){  this(4);}  }
class C{  public static String toString(Query query,IndexSchema schema){  try {    StringBuilder sb=new StringBuilder();    toString(query,schema,sb,0);    return sb.toString();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:05.507 -0500",hash_original_method="8A45855DAEA6DBD5399558BF539AE2C5",hash_generated_method="B33F295FC71427932B72309EBDA781D2") private Configuration(Parcel source){  readFromParcel(source);}  }
class C{  public final boolean canSetDouble(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetDouble());}  }
class C{  public synchronized void reply(SerialReply r){  processForPollReq(r);}  }
class C{  @Override public void onSaveInstanceState(@NonNull Bundle savedInstanceState){  savedInstanceState.putParcelable(LOCATION_KEY,currentLocation);  if (lastLocationUpdateTime != null) {    savedInstanceState.putLong(LAST_LOCATION_UPDATE_TIME_STRING_KEY,lastLocationUpdateTime.getTime());  }  if (lastWifiScanTime != null) {    savedInstanceState.putLong(LAST_WIFI_SCAN_TIME_STRING_KEY,lastWifiScanTime.getTime());  }  savedInstanceState.putBoolean(LOGGING_ENABLED_KEY,loggingEnabled);  super.onSaveInstanceState(savedInstanceState);}  }
class C{  public void testAsterisk() throws IOException {  Directory indexStore=getIndexStore("body",new String[]{"metal","metals"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  Query query1=new TermQuery(new Term("body","metal"));  Query query2=new WildcardQuery(new Term("body","metal*"));  Query query3=new WildcardQuery(new Term("body","m*tal"));  Query query4=new WildcardQuery(new Term("body","m*tal*"));  Query query5=new WildcardQuery(new Term("body","m*tals"));  BooleanQuery.Builder query6=new BooleanQuery.Builder();  query6.add(query5,BooleanClause.Occur.SHOULD);  BooleanQuery.Builder query7=new BooleanQuery.Builder();  query7.add(query3,BooleanClause.Occur.SHOULD);  query7.add(query5,BooleanClause.Occur.SHOULD);  Query query8=new WildcardQuery(new Term("body","M*tal*"));  assertMatches(searcher,query1,1);  assertMatches(searcher,query2,2);  assertMatches(searcher,query3,1);  assertMatches(searcher,query4,2);  assertMatches(searcher,query5,1);  assertMatches(searcher,query6.build(),1);  assertMatches(searcher,query7.build(),2);  assertMatches(searcher,query8,0);  assertMatches(searcher,new WildcardQuery(new Term("body","*tall")),0);  assertMatches(searcher,new WildcardQuery(new Term("body","*tal")),1);  assertMatches(searcher,new WildcardQuery(new Term("body","*tal*")),2);  reader.close();  indexStore.close();}  }
class C{  public static void mergeActions(RamlAction existingAction,RamlAction newAction){  RamlResponse existingSuccessfulResponse=getSuccessfulResponse(existingAction);  RamlResponse successfulResponse=getSuccessfulResponse(newAction);  if (existingSuccessfulResponse != null && existingSuccessfulResponse.hasBody() && successfulResponse != null && successfulResponse.hasBody()) {    for (    Entry<String,RamlMimeType> body : successfulResponse.getBody().entrySet()) {      existingSuccessfulResponse.addToBody(body.getKey(),body.getValue());    }  }}  }
class C{  private Query<I> childQuery(){  @SuppressWarnings("unchecked") Query<I> query=(Query<I>)ofy().load().type(childResourceClasses.get(childResourceClassIndex)).ancestor(currentEppResource);  return query;}  }
class C{  public static String bar(String s){  return s + "\u0305";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.594 -0500",hash_original_method="2208496A4921623C92FF093043E5D238",hash_generated_method="6C971D18B78C1160D112611D2C69AEEE") private void parseVia(Via v) throws ParseException {  lexer.match(TokenTypes.ID);  Token protocolName=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token protocolVersion=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token transport=lexer.getNextToken();  this.lexer.SPorHT();  Protocol protocol=new Protocol();  protocol.setProtocolName(protocolName.getTokenValue());  protocol.setProtocolVersion(protocolVersion.getTokenValue());  protocol.setTransport(transport.getTokenValue());  v.setSentProtocol(protocol);  HostNameParser hnp=new HostNameParser(this.getLexer());  HostPort hostPort=hnp.hostPort(true);  v.setSentBy(hostPort);  this.lexer.SPorHT();  while (lexer.lookAhead(0) == ';') {    this.lexer.consume(1);    this.lexer.SPorHT();    NameValue nameValue=this.nameValue();    String name=nameValue.getName();    if (name.equals(Via.BRANCH)) {      String branchId=(String)nameValue.getValueAsObject();      if (branchId == null)       throw new ParseException("null branch Id",lexer.getPtr());    }    v.setParameter(nameValue);    this.lexer.SPorHT();  }  if (lexer.lookAhead(0) == '(') {    this.lexer.selectLexer("charLexer");    lexer.consume(1);    StringBuffer comment=new StringBuffer();    while (true) {      char ch=lexer.lookAhead(0);      if (ch == ')') {        lexer.consume(1);        break;      } else       if (ch == '\\') {        Token tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);        tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);      } else       if (ch == '\n') {        break;      } else {        comment.append(ch);        lexer.consume(1);      }    }    v.setComment(comment.toString());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.715 -0500",hash_original_method="66C826C8182942443823887EE81BC356",hash_generated_method="351CEC1938395954E97E0058ADAC50B4") private static int tryGetTrunkPrefixOmittedIndex(String str,int currentIndex){  int length=str.length();  for (int i=currentIndex; i < length; i++) {    final char ch=str.charAt(i);    if (tryGetISODigit(ch) >= 0) {      return i + 1;    } else     if (isDialable(ch)) {      return -1;    }  }  return -1;}  }
class C{  public void clear(int bitIndex){  int longIndex=bitIndex >> 6;  if (longIndex >= bits.length)   return;  bits[longIndex]&=~(1L << bitIndex);}  }
class C{  public boolean importData(JComponent c,Transferable t,DropInfo ddi){  return false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tThe percentage of instances to use for training.\n" + "\t(default 66)","P",1,"-P <percent>"));  newVector.addElement(new Option("Save raw split evaluator output.","D",0,"-D"));  newVector.addElement(new Option("\tThe filename where raw output will be stored.\n" + "\tIf a directory name is specified then then individual\n" + "\toutputs will be gzipped, otherwise all output will be\n"+ "\tzipped to the named file. Use in conjuction with -D."+ "\t(default splitEvalutorOut.zip)","O",1,"-O <file/directory name/path>"));  newVector.addElement(new Option("\tThe full class name of a SplitEvaluator.\n" + "\teg: weka.experiment.ClassifierSplitEvaluator","W",1,"-W <class name>"));  newVector.addElement(new Option("\tSet when data is not to be randomized and the data sets' size.\n" + "\tIs not to be determined via probabilistic rounding.","R",0,"-R"));  if ((m_SplitEvaluator != null) && (m_SplitEvaluator instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to split evaluator " + m_SplitEvaluator.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_SplitEvaluator).listOptions()));  }  return newVector.elements();}  }
class C{  @Override public Vector<SnmpInformRequest> snmpInformRequest(SnmpInformHandler cb,SnmpOid trapOid,SnmpVarBindList varBindList) throws IllegalStateException, IOException, SnmpStatusException {  if (!isActive()) {    throw new IllegalStateException("Start SNMP adaptor server before carrying out this operation");  }  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"snmpInformRequest","trapOid=" + trapOid);  }  SnmpVarBindList fullVbl;  if (varBindList != null)   fullVbl=varBindList.clone(); else   fullVbl=new SnmpVarBindList(2);  SnmpTimeticks sysUpTimeValue=new SnmpTimeticks(getSysUpTime());  fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid,trapOid),0);  fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid,sysUpTimeValue),0);  openInformSocketIfNeeded();  Vector<SnmpInformRequest> informReqList=new Vector<>();  InetAddress addr;  String cs;  if (ipacl != null) {    Enumeration<InetAddress> ed=ipacl.getInformDestinations();    while (ed.hasMoreElements()) {      addr=ed.nextElement();      Enumeration<String> ec=ipacl.getInformCommunities(addr);      while (ec.hasMoreElements()) {        cs=ec.nextElement();        informReqList.addElement(informSession.makeAsyncRequest(addr,cs,cb,fullVbl,getInformPort()));      }    }  }  return informReqList;}  }
class C{  void removeRipple(Ripple ripple){  final Ripple[] ripples=mExitingRipples;  final int count=mExitingRipplesCount;  final int index=getRippleIndex(ripple);  if (index >= 0) {    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));    ripples[count - 1]=null;    mExitingRipplesCount--;    invalidateSelf();  }}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double eccentricity,double height,boolean createVBOs){  if (sides < 3)   throw new IllegalArgumentException("Prisms must have at least 3 sides!");  if ((eccentricity < 0) || (eccentricity >= 1))   throw new IllegalArgumentException("Eccentricity must be in the range [0,1)");  mSideCount=sides;  mEccentricity=eccentricity;  mRadiusTop=radiusTop;  mMinorTop=calculateMinorAxis(mRadiusTop);  mRadiusBase=radiusBase;  mMinorBase=calculateMinorAxis(mRadiusBase);  mHeight=height;  init(createVBOs);}  }
class C{  private CTagManager loadViewTagManager(){  try {    return provider.loadTagManager(TagType.VIEW_TAG);  } catch (  final CouldntLoadDataException e) {    CUtilityFunctions.logException(e);    final CTag root=new CTag(0,"Root View Tag","",TagType.VIEW_TAG,provider);    final Tree<CTag> tree=new Tree<CTag>(new TreeNode<CTag>(root));    return new CTagManager(tree,TagType.VIEW_TAG,provider);  }}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] cert,String authType) throws CertificateException {}  }
class C{  public OutOfOffHeapMemoryException(){}  }
class C{  public final void testHashCodeEqualsObject(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  assertTrue((cp1.hashCode() == cp2.hashCode()) && cp1.equals(cp2));}  }
class C{  public BusinessObjectDefinitionCreateRequest createBusinessObjectDefinitionCreateRequest(String namespaceCode,String businessObjectDefinitionName,String dataProviderName,String businessObjectDefinitionDescription,String displayName,List<Attribute> attributes){  BusinessObjectDefinitionCreateRequest request=new BusinessObjectDefinitionCreateRequest();  request.setNamespace(namespaceCode);  request.setBusinessObjectDefinitionName(businessObjectDefinitionName);  request.setDataProviderName(dataProviderName);  request.setDescription(businessObjectDefinitionDescription);  request.setDisplayName(displayName);  request.setAttributes(attributes);  return request;}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y;  float progress=0;  double z;  int i, b, c, ICLCA;  boolean flag=false;  double flowDir=0;  double outletID=0;  double SCAValue;  double maxSCA, d1, d2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pointerHeader=args[0];  String caHeader=args[1];  String outputHeader=args[2];  double SCAThreshold=Double.parseDouble(args[3]);  if (pointerHeader.isEmpty() || caHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    String tempFile=caHeader.replace(".dep","_temp.dep");    FileUtilities.copyFile(new File(caHeader),new File(tempFile));    FileUtilities.copyFile(new File(caHeader.replace(".dep",".tas")),new File(tempFile.replace(".dep",".tas")));    contArea=new WhiteboxRaster(tempFile,"rw");    contArea.isTemporaryFile=true;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",caHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);    output.setPreferredPalette("categorical1.pal");    outletID=1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pointer.getValue(row,col) != noData) {          flag=false;          for (i=0; i < 8; i++) {            if (pointer.getValue(col + dX[i],row + dY[i]) == inflowingVals[i]) {              flag=true;            }          }          if (!flag) {            flag=false;            x=col;            y=row;            do {              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                i=(int)(Math.log(flowDir) / LnOf2);                x+=dX[i];                y+=dY[i];              } else {                flag=true;              }              SCAValue=contArea.getValue(y,x);              if (SCAValue >= SCAThreshold) {                maxSCA=-99999;                ICLCA=8;                for (i=0; i < 8; i++) {                  b=x + dX[i];                  c=y + dY[i];                  if (pointer.getValue(c,b) == inflowingVals[i]) {                    z=contArea.getValue(c,b);                    if (z > maxSCA) {                      maxSCA=z;                      ICLCA=i;                    }                  }                }                b=x + dX[ICLCA];                c=y + dY[ICLCA];                if (contArea.getValue(c,b) > SCAThreshold) {                  flag=true;                } else {                  d1=Math.abs(contArea.getValue(c,b) - SCAThreshold);                  d2=Math.abs(contArea.getValue(y,x) - SCAThreshold);                  if (d1 < d2) {                    output.setValue(c,b,outletID);                    decrementFlowpath(c,b,contArea.getValue(c,b));                  } else {                    output.setValue(y,x,outletID);                    decrementFlowpath(y,x,contArea.getValue(y,x));                  }                  outletID++;                }              }            } while (!flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == -999 && pointer.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                outletID=z;                flag=true;              }            } else {              outletID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,outletID);          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,outletID);          } while (!flag);        } else         if (pointer.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    contArea.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void linkStatements(){  for (  RuleHead r : ruleMap.values()) {    r.getRule().setLinks(ruleMap);  }}  }
class C{  public boolean isSealed(URL url){  return sealBase != null && sealBase.sameFile(url);}  }
class C{  private void updateMeta(BundleMeta meta){  final int cols=meta.size();  densecols=new NumberVector.Factory<?>[cols];  for (int i=0; i < cols; i++) {    if (TypeUtil.SPARSE_VECTOR_VARIABLE_LENGTH.isAssignableFromType(meta.get(i))) {      throw new AbortException("Filtering sparse vectors is not yet supported by this filter. Please contribute.");    }    if (TypeUtil.FLOAT_VECTOR_FIELD.isAssignableFromType(meta.get(i))) {      VectorFieldTypeInformation<?> vmeta=(VectorFieldTypeInformation<?>)meta.get(i);      densecols[i]=(NumberVector.Factory<?>)vmeta.getFactory();      continue;    }    if (TypeUtil.DOUBLE_VECTOR_FIELD.isAssignableFromType(meta.get(i))) {      VectorFieldTypeInformation<?> vmeta=(VectorFieldTypeInformation<?>)meta.get(i);      densecols[i]=(NumberVector.Factory<?>)vmeta.getFactory();      continue;    }  }}  }
class C{  public <C extends Collection<? super E>>C addTo(C collection) throws QueryEvaluationException {  try {    E next;    while ((next=next()) != null) {      collection.add(next);    }    return collection;  }  finally {    close();  }}  }
class C{  public int hashCode(){  if (Thread.interrupted())   throw new RuntimeException();  int acc=0;  int c=0;  c=op.ordinal();  acc=acc * 37 + c;  c=low;  acc=acc * 37 + c;  c=high;  acc=acc * 37 + c;  if (lit == null) {    acc*=37;  } else {    acc=acc * 37 + lit.hashCode();  }  if (unaryArg == null) {    acc*=37;  } else {    acc=acc * 37 + unaryArg.hashCode();  }  if (cats == null) {    acc*=37;  } else {    acc=acc * 37 + cats.hashCode();  }  if (alts == null) {    acc*=37;  } else {    acc=acc * 37 + alts.hashCode();  }  if (strOp == null) {    acc*=37;  } else {    acc=acc * 37 + strOp.hashCode();  }  return acc;}  }
class C{  public Vec3 negate(){  this.x=-this.x;  this.y=-this.y;  this.z=-this.z;  return this;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static boolean isCertainlyReturnStatement(GrStatement st){  final PsiElement parent=st.getParent();  if (parent instanceof GrOpenBlock) {    if (st != ArrayUtil.getLastElement(((GrOpenBlock)parent).getStatements()))     return false;    PsiElement pparent=parent.getParent();    if (pparent instanceof GrMethod) {      return true;    }    if (pparent instanceof GrBlockStatement || pparent instanceof GrCatchClause || pparent instanceof GrLabeledStatement) {      pparent=pparent.getParent();    }    if (pparent instanceof GrIfStatement || pparent instanceof GrControlStatement || pparent instanceof GrTryCatchStatement) {      return isCertainlyReturnStatement((GrStatement)pparent);    }  } else   if (parent instanceof GrClosableBlock) {    return st == ArrayUtil.getLastElement(((GrClosableBlock)parent).getStatements());  } else   if (parent instanceof GroovyFileBase) {    return st == ArrayUtil.getLastElement(((GroovyFileBase)parent).getStatements());  } else   if (parent instanceof GrForStatement || parent instanceof GrIfStatement && st != ((GrIfStatement)parent).getCondition() || parent instanceof GrSynchronizedStatement && st != ((GrSynchronizedStatement)parent).getMonitor() || parent instanceof GrWhileStatement && st != ((GrWhileStatement)parent).getCondition() || parent instanceof GrConditionalExpression && st != ((GrConditionalExpression)parent).getCondition() || parent instanceof GrElvisExpression) {    return isCertainlyReturnStatement((GrStatement)parent);  } else   if (parent instanceof GrCaseSection) {    final GrStatement[] statements=((GrCaseSection)parent).getStatements();    final GrStatement last=ArrayUtil.getLastElement(statements);    final GrSwitchStatement switchStatement=(GrSwitchStatement)parent.getParent();    if (last instanceof GrBreakStatement && statements.length > 1 && statements[statements.length - 2] == st) {      return isCertainlyReturnStatement(switchStatement);    } else     if (st == last) {      if (st instanceof GrBreakStatement || isLastStatementInCaseSection((GrCaseSection)parent,switchStatement)) {        return isCertainlyReturnStatement(switchStatement);      }    }  }  return false;}  }
class C{  public boolean equals(Object o){  return this == o;}  }
class C{  public static double ceil(double value){  if (USE_JDK_MATH) {    return Math.ceil(value);  }  return -FastMath.floor(-value);}  }
class C{  public static <E>Iterator<E> toIterator(Enumeration<E> enumeration){  return new EnumerationIterator<E>(enumeration);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  protected Query newPrefixQuery(String text){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    final String fieldName=entry.getKey();    final BytesRef term=getAnalyzer().normalize(fieldName,text);    Query q=new PrefixQuery(new Term(fieldName,term));    float boost=entry.getValue();    if (boost != 1f) {      q=new BoostQuery(q,boost);    }    bq.add(q,BooleanClause.Occur.SHOULD);  }  return simplify(bq.build());}  }
class C{  public TextBuilder(String str){  this();  append(str);}  }
class C{  public BreakpointHitSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  private void checkBridgeNotStarted(){  if (started) {    throw new IllegalStateException("Cannot set bridge attributes while it is started");  }}  }
class C{  public void writeUint24(long n){  check(3);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public SourcePackageBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourcePackage.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.package_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourcePackage.ERROR_DESCRIPTION_PREFIX + "package_uid is null");  }  if (this.tracks == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SourcePackage.ERROR_DESCRIPTION_PREFIX + "tracks is null");  } else {    for (    StrongRef strongRef : this.tracks.getEntries()) {      this.genericTrackInstanceUIDs.add(strongRef.getInstanceUID());    }  }}  }
class C{  public LocalTime withMillisOfSecond(int millis){  return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(),millis));}  }
class C{  public Writer buildUniqueConstraintCreationWriter(AbstractSession session,UniqueKeyConstraint uniqueKey,Writer writer) throws ValidationException {  try {    writer.write("ALTER TABLE " + getFullName());    writer.write(" ADD CONSTRAINT ");    if (!session.getPlatform().shouldPrintConstraintNameAfter()) {      writer.write(uniqueKey.getName() + " ");    }    uniqueKey.appendDBString(writer,session);    if (session.getPlatform().shouldPrintConstraintNameAfter()) {      writer.write(" CONSTRAINT " + uniqueKey.getName());    }  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  private void validateExpression(Label label) throws Exception {  Expression location=label.getExpression();  if (expression != null) {    String path=expression.getPath();    String expect=location.getPath();    if (!path.equals(expect)) {      throw new PathException("Path '%s' does not match '%s' in %s",path,expect,detail);    }  } else {    expression=location;  }}  }
class C{  public boolean hasMeteredHint(){  return vendorInfo != null && vendorInfo.contains("ANDROID_METERED");}  }
class C{  protected TrueTypeTable(int tag){  this.tag=tag;}  }
class C{  private IntIntPair nonZeroPivotSearch(int k){  int i, j;  double absValue;  for (i=k; i < coeff.length; i++) {    for (j=k; j < coeff[0].length; j++) {      absValue=Math.abs(coeff[row[i]][col[j]]);      if (absValue > 0) {        return new IntIntPair(i,j);      }    }  }  return new IntIntPair(k,k);}  }
class C{  public DynamicPercept(Object key1,Object value1,Object key2,Object value2){  setAttribute(key1,value1);  setAttribute(key2,value2);}  }
class C{  protected Writer buildDatabaseSchemaDeletionWriter(AbstractSession session,Writer writer){  try {    writer.write(session.getPlatform().getDropDatabaseSchemaString(getDatabaseSchema()));  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  private static void checkCalcDistance(){  System.out.println("Checking calcDistance...");  Planet p1=new Planet(1.0,1.0,3.0,4.0,5.0,"jupiter.gif");  Planet p2=new Planet(2.0,1.0,3.0,4.0,5.0,"jupiter.gif");  Planet p3=new Planet(4.0,5.0,3.0,4.0,5.0,"jupiter.gif");  checkEquals(p1.calcDistance(p2),1.0,"calcDistance()",0.01);  checkEquals(p1.calcDistance(p3),5.0,"calcDistance()",0.01);}  }
class C{  public static boolean isNestedMapping(String regex){  return regex.startsWith(NESTED_MAPPING_STARTS_SYMBOL) && regex.endsWith(NESTED_MAPPING_ENDS_SYMBOL);}  }
class C{  public int length(){  return m_List.size();}  }
class C{  public void pageLoadSuccess(String url,String title){  frame.setTitle(title + (title.length() > 0 ? " - " : "") + "Flying Saucer");}  }
class C{  public Builder withClient(UUID client){  request.client=Assert.notNull(client,"client");  return this;}  }
class C{  protected static DataRaster composeImageDataRaster(Dataset ds,AVList params) throws IllegalArgumentException, SecurityException, WWRuntimeException {  if (!gdalIsAvailable.get()) {    String message=Logging.getMessage("gdal.GDALNotAvailable");    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  if (null == ds) {    String message=Logging.getMessage("nullValue.DataSetIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  BufferedImage img=null;  int width=ds.getRasterXSize();  int height=ds.getRasterYSize();  int bandCount=ds.getRasterCount();  if (bandCount < 1) {    String message=Logging.getMessage("generic.UnexpectedBandCount",bandCount);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Double[] dbls=new Double[16];  ByteBuffer[] bands=new ByteBuffer[bandCount];  int[] bandsOrder=new int[bandCount];  int[] offsets=new int[bandCount];  int imgSize=width * height;  int bandDataType=0, buf_size=0;  double maxValue=-Double.MAX_VALUE;  for (int bandIdx=0; bandIdx < bandCount; bandIdx++) {    Band imageBand=ds.GetRasterBand(bandIdx + 1);    if (null == imageBand) {      String message=Logging.getMessage("nullValue.RasterBandIsNull`");      Logging.logger().severe(message);      throw new WWRuntimeException(message);    }    bandDataType=imageBand.getDataType();    buf_size=imgSize * (gdal.GetDataTypeSize(bandDataType) / 8);    ByteBuffer data=ByteBuffer.allocateDirect(buf_size);    data.order(ByteOrder.nativeOrder());    int colorInt=imageBand.GetRasterColorInterpretation();    if (params.hasKey(AVKey.RASTER_BAND_MAX_PIXEL_VALUE)) {      maxValue=(Double)params.getValue(AVKey.RASTER_BAND_MAX_PIXEL_VALUE);    } else     if ((bandDataType == gdalconstConstants.GDT_UInt16 || bandDataType == gdalconstConstants.GDT_UInt32) && colorInt != gdalconst.GCI_AlphaBand && colorInt != gdalconst.GCI_Undefined) {      imageBand.GetMaximum(dbls);      if (dbls[0] == null) {        double[] minmax=new double[2];        imageBand.ComputeRasterMinMax(minmax);        maxValue=(minmax[1] > maxValue) ? minmax[1] : maxValue;      } else {        maxValue=(dbls[0] > maxValue) ? dbls[0] : maxValue;      }    }    int returnVal=imageBand.ReadRaster_Direct(0,0,imageBand.getXSize(),imageBand.getYSize(),width,height,bandDataType,data);    if (returnVal != gdalconstConstants.CE_None) {      throw new WWRuntimeException(GDALUtils.getErrorMessage());    }    int destBandIdx=bandIdx;    if (colorInt == gdalconst.GCI_RedBand) {      destBandIdx=0;    } else     if (colorInt == gdalconst.GCI_GreenBand) {      destBandIdx=1;    } else     if (colorInt == gdalconst.GCI_BlueBand) {      destBandIdx=2;    }    bands[destBandIdx]=data;    bandsOrder[destBandIdx]=destBandIdx;    offsets[destBandIdx]=0;  }  int bitsPerColor=gdal.GetDataTypeSize(bandDataType);  int actualBitsPerColor=bitsPerColor;  if (params.hasKey(AVKey.RASTER_BAND_ACTUAL_BITS_PER_PIXEL)) {    actualBitsPerColor=(Integer)params.getValue(AVKey.RASTER_BAND_ACTUAL_BITS_PER_PIXEL);  } else   if (maxValue > 0d) {    actualBitsPerColor=(int)Math.ceil(Math.log(maxValue) / Math.log(2d));  } else {    actualBitsPerColor=bitsPerColor;  }  int[] reqBandOrder=bandsOrder;  try {    reqBandOrder=extractBandOrder(ds,params);    if (null == reqBandOrder || 0 == reqBandOrder.length) {      reqBandOrder=bandsOrder;    } else {      offsets=new int[reqBandOrder.length];      bandsOrder=new int[reqBandOrder.length];      for (int i=0; i < reqBandOrder.length; i++) {        bandsOrder[i]=i;        offsets[i]=0;      }    }  } catch (  Exception e) {    reqBandOrder=bandsOrder;    Logging.logger().severe(e.getMessage());  }  DataBuffer imgBuffer=null;  int bufferType=0;  int reqBandCount=reqBandOrder.length;  boolean hasAlpha=(reqBandCount == 2) || (reqBandCount == 4);  IntBuffer imageMask=null;  if (hasAlpha && params.hasKey(AVKey.GDAL_MASK_DATASET)) {    imageMask=extractImageMask(params);  }  if (bandDataType == gdalconstConstants.GDT_Byte) {    byte[][] int8=new byte[reqBandCount][];    for (int i=0; i < reqBandCount; i++) {      int srcBandIndex=reqBandOrder[i];      int8[i]=new byte[imgSize];      bands[srcBandIndex].get(int8[i]);    }    if (hasAlpha && null != imageMask) {      applyImageMask(int8[reqBandCount - 1],imageMask);    }    imgBuffer=new DataBufferByte(int8,imgSize);    bufferType=DataBuffer.TYPE_BYTE;  } else   if (bandDataType == gdalconstConstants.GDT_Int16) {    short[][] int16=new short[reqBandCount][];    for (int i=0; i < reqBandCount; i++) {      int srcBandIndex=reqBandOrder[i];      int16[i]=new short[imgSize];      bands[srcBandIndex].asShortBuffer().get(int16[i]);    }    if (hasAlpha && null != imageMask) {      applyImageMask(int16[reqBandCount - 1],imageMask);    }    imgBuffer=new DataBufferShort(int16,imgSize);    bufferType=DataBuffer.TYPE_SHORT;  } else   if (bandDataType == gdalconstConstants.GDT_Int32 || bandDataType == gdalconstConstants.GDT_UInt32) {    int[][] uint32=new int[reqBandCount][];    for (int i=0; i < reqBandCount; i++) {      int srcBandIndex=reqBandOrder[i];      uint32[i]=new int[imgSize];      bands[srcBandIndex].asIntBuffer().get(uint32[i]);    }    if (hasAlpha && null != imageMask) {      applyImageMask(uint32[reqBandCount - 1],imageMask);    }    imgBuffer=new DataBufferInt(uint32,imgSize);    bufferType=DataBuffer.TYPE_INT;  } else   if (bandDataType == gdalconstConstants.GDT_UInt16) {    short[][] uint16=new short[reqBandCount][];    for (int i=0; i < reqBandCount; i++) {      int srcBandIndex=reqBandOrder[i];      uint16[i]=new short[imgSize];      bands[srcBandIndex].asShortBuffer().get(uint16[i]);    }    if (hasAlpha && null != imageMask) {      applyImageMask(uint16[reqBandCount - 1],imageMask);    }    imgBuffer=new DataBufferUShort(uint16,imgSize);    bufferType=DataBuffer.TYPE_USHORT;  } else {    String message=Logging.getMessage("generic.UnrecognizedDataType",bandDataType);    Logging.logger().severe(message);  }  SampleModel sm=new BandedSampleModel(bufferType,width,height,width,bandsOrder,offsets);  WritableRaster raster=Raster.createWritableRaster(sm,imgBuffer,null);  ColorModel cm;  Band band1=ds.GetRasterBand(1);  if (band1.GetRasterColorInterpretation() == gdalconstConstants.GCI_PaletteIndex) {    cm=band1.GetRasterColorTable().getIndexColorModel(gdal.GetDataTypeSize(bandDataType));    img=new BufferedImage(cm,raster,false,null);  } else   if (band1.GetRasterColorInterpretation() == gdalconstConstants.GCI_GrayIndex && reqBandCount == 2) {    int transparency=Transparency.BITMASK;    int baseColorSpace=ColorSpace.CS_GRAY;    ColorSpace cs=ColorSpace.getInstance(baseColorSpace);    int[] nBits=new int[reqBandCount];    for (int i=0; i < reqBandCount; i++) {      nBits[i]=actualBitsPerColor;    }    cm=new ComponentColorModel(cs,nBits,hasAlpha,false,transparency,bufferType);    BufferedImage tmpImg=new BufferedImage(cm,raster,false,null);    img=new BufferedImage(tmpImg.getWidth(),tmpImg.getHeight(),BufferedImage.TYPE_4BYTE_ABGR);    Raster srcRaster=tmpImg.getRaster();    WritableRaster dstRaster=img.getRaster();    int[] gray=null, alpha=null;    int w=srcRaster.getWidth();    for (int y=0; y < tmpImg.getHeight(); y++) {      gray=srcRaster.getSamples(0,y,w,1,0,gray);      alpha=srcRaster.getSamples(0,y,w,1,1,alpha);      dstRaster.setSamples(0,y,w,1,0,gray);      dstRaster.setSamples(0,y,w,1,1,gray);      dstRaster.setSamples(0,y,w,1,2,gray);      dstRaster.setSamples(0,y,w,1,3,alpha);    }  } else {    int transparency=hasAlpha ? Transparency.TRANSLUCENT : Transparency.OPAQUE;    int baseColorSpace=(reqBandCount > 2) ? ColorSpace.CS_sRGB : ColorSpace.CS_GRAY;    ColorSpace cs=ColorSpace.getInstance(baseColorSpace);    int[] nBits=new int[reqBandCount];    for (int i=0; i < reqBandCount; i++) {      nBits[i]=actualBitsPerColor;    }    cm=new ComponentColorModel(cs,nBits,hasAlpha,false,transparency,bufferType);    img=new BufferedImage(cm,raster,false,null);  }  if (null != img) {    if (AVListImpl.getBooleanValue(params,AVKey.BLACK_GAPS_DETECTION,false)) {      img=detectVoidsAndMakeThemTransparent(img);    }  }  return BufferedImageRaster.wrap(img,params);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  protected static GeoPoint reverseModify(final Vector point,final double transX,final double transY,final double transZ,final double sinRA,final double cosRA,final double sinHA,final double cosHA){  final Vector result=point.rotateXZ(-sinHA,cosHA).rotateXY(-sinRA,cosRA).translate(-transX,-transY,-transZ);  return new GeoPoint(result.x,result.y,result.z);}  }
class C{  void processArgs(String[] args){  boolean argAlreadyAppeared=false;  for (int i=0; i < args.length; i++) {    if (args[i].startsWith("-")) {switch (args[i].toLowerCase(Locale.US)) {case "-l":        action='l';      break;case "-a":    action='a';  if (++i >= args.length || args[i].startsWith("-")) {    error("A principal name must be specified after -a");  }principal=args[i];break;case "-d":action='d';if (++i >= args.length || args[i].startsWith("-")) {error("A principal name must be specified after -d");}principal=args[i];break;case "-e":if (action == 'l') {showEType=true;} else if (action == 'd') {if (++i >= args.length || args[i].startsWith("-")) {error("An etype must be specified after -e");}try {etype=Integer.parseInt(args[i]);if (etype <= 0) {throw new NumberFormatException();}} catch (NumberFormatException nfe) {error(args[i] + " is not a valid etype");}} else {error(args[i] + " is not valid after -" + action);}break;case "-n":if (++i >= args.length || args[i].startsWith("-")) {error("A KVNO must be specified after -n");}try {vAdd=Integer.parseInt(args[i]);if (vAdd < 0) {throw new NumberFormatException();}} catch (NumberFormatException nfe) {error(args[i] + " is not a valid KVNO");}break;case "-k":if (++i >= args.length || args[i].startsWith("-")) {error("A keytab name must be specified after -k");}if (args[i].length() >= 5 && args[i].substring(0,5).equalsIgnoreCase("FILE:")) {name=args[i].substring(5);} else {name=args[i];}break;case "-t":showTime=true;break;case "-f":forced=true;break;case "-append":append=true;break;default :error("Unknown command: " + args[i]);break;}} else {if (argAlreadyAppeared) {error("Useless extra argument " + args[i]);}if (action == 'a') {password=args[i].toCharArray();} else if (action == 'd') {switch (args[i]) {case "all":vDel=-1;break;case "old":vDel=-2;break;default :{try {vDel=Integer.parseInt(args[i]);if (vDel < 0) {throw new NumberFormatException();}} catch (NumberFormatException nfe) {error(args[i] + " is not a valid KVNO");}}}} else {error("Useless extra argument " + args[i]);}argAlreadyAppeared=true;}}}  }
class C{  public static void transferPEToNearbyPlayers(World world,BlockPos pos,IEnergyManipulator manipulator,int range){  int xp=pos.getX();  int yp=pos.getY();  int zp=pos.getZ();  List<EntityPlayer> players=world.getEntitiesWithinAABB(EntityPlayer.class,new AxisAlignedBB(pos).expand(range,range,range));  for (  EntityPlayer player : players)   if (EntityUtil.hasNecronomicon(player)) {    ItemStack item=player.getHeldItem(EnumHand.MAIN_HAND);    ItemStack item1=player.getHeldItem(EnumHand.OFF_HAND);    if (item != null && item.getItem() instanceof IEnergyTransporterItem || item1 != null && item1.getItem() instanceof IEnergyTransporterItem) {      if (!world.isRemote) {        transferPEToStack(item,manipulator);        transferPEToStack(item1,manipulator);      }      for (double i=0; i <= 0.7; i+=0.03) {        int xPos=xp < (int)player.posX ? 1 : xp > (int)player.posX ? -1 : 0;        int yPos=yp < (int)player.posY ? 1 : yp > (int)player.posY ? -1 : 0;        int zPos=zp < (int)player.posZ ? 1 : zp > (int)player.posZ ? -1 : 0;        double x=i * Math.cos(i) / 2 * xPos;        double y=i * Math.sin(i) / 2 * yPos;        double z=i * Math.sin(i) / 2 * zPos;        world.spawnParticle(EnumParticleTypes.SMOKE_LARGE,xp + 0.5,yp + 0.5,zp + 0.5,x,y,z);      }    }  }}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public static void trimLines(final Document doc,final int lineCount){  if (doc.getLength() < lineCount) {    return;  }  try {    final String text=doc.getText(0,doc.getLength());    int returnsFound=0;    for (int i=text.length() - 1; i >= 0; i--) {      if (text.charAt(i) == '\n') {        returnsFound++;      }      if (returnsFound == lineCount) {        doc.remove(0,i);        return;      }    }  } catch (  final BadLocationException e) {    ClientLogger.logError("There was an Error whilst trying trimming Chat",e);  }}  }
class C{  private synchronized void addTaskToQueue(Task t,String taskId){  TaskStatusInfo newTask=t.getTaskStatus();  if (newTask == null) {    newTask=new TaskStatusInfo();  }  m_TaskQueue.push(t);  m_TaskIdQueue.push(taskId);  newTask.setStatusMessage("RemoteEngine (" + m_HostName + ") : task "+ taskId+ " queued at postion: "+ m_TaskQueue.size());  m_TaskStatus.put(taskId,newTask);  System.err.println("Task id : " + taskId + " Queued.");  if (m_TaskRunning == false) {    startTask();  }}  }
class C{  public void testNextFloat(){  float f=ThreadLocalRandom.current().nextFloat();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextFloat() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static WProcessCtl process(Object parent,int WindowNo,ProcessInfo pi,Trx trx,HttpServletRequest request){  log.fine("WindowNo=" + WindowNo + " - "+ pi);  WebSessionCtx wsc=WebSessionCtx.get(request);  MPInstance instance=new MPInstance(wsc.ctx,pi.getAD_Process_ID(),pi.getRecord_ID());  if (!instance.save()) {    pi.setSummary(Msg.getMsg(wsc.ctx,"ProcessNoInstance"));    pi.setError(true);    return null;  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  WProcessCtl worker=new WProcessCtl(parent,pi,trx,wsc.ctx);  worker.start();  return worker;}  }
class C{  public void removeOldestThan(long timestamp){  int spot=numberOfAssemblers - 1;  for (int i=0; i < numberOfAssemblers; i++) {    if (timestamp <= assemblers[i].getTimestamp()) {      spot=i;    }  }  for (int i=numberOfAssemblers - 1; i > spot; i--) {    assemblers[i - 1]=assemblers[i];  }  numberOfAssemblers-=spot + 1;}  }
class C{  public GitlabSSHKey createDeployKey(Integer targetProjectId,String title,String key) throws IOException {  Query query=new Query().append("title",title).append("key",key);  String tailUrl=GitlabProject.URL + "/" + targetProjectId+ GitlabSSHKey.KEYS_URL+ query.toString();  return dispatch().to(tailUrl,GitlabSSHKey.class);}  }
class C{  @HLEFunction(nid=0x20B317A0,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlAddHandler(TPointer adhocctlHandlerAddr,int adhocctlHandlerArg){  checkInitialized();  AdhocctlHandler adhocctlHandler=new AdhocctlHandler(adhocctlHandlerAddr.getAddress(),adhocctlHandlerArg);  int id=adhocctlHandler.getId();  if (id == SceUidManager.INVALID_ID) {    return SceKernelErrors.ERROR_NET_ADHOCCTL_TOO_MANY_HANDLERS;  }  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlAddHandler returning id=0x%X",id));  }  adhocctlIdMap.put(id,adhocctlHandler);  return id;}  }
class C{  protected static AsymmetricCipherKeyPair generateDHKeyPair(){  try {    KeyGenerationParameters kgp=new DHKeyGenerationParameters(random,DH_GROUP_PARAMETERS);    DHKeyPairGenerator gen=new DHKeyPairGenerator();    gen.init(kgp);    return gen.generateKeyPair();  } catch (  InvalidParameterException e) {    Log.e(TAG,"InvalidParameterException while generating a Diffie-Hellman keypair " + e);  }  return null;}  }
class C{  protected boolean dying(){  return die(GET,NA);}  }
class C{  private void initializeDefaultSpi(IgniteConfiguration cfg){  if (cfg.getDiscoverySpi() == null)   cfg.setDiscoverySpi(new TcpDiscoverySpi());  if (cfg.getDiscoverySpi() instanceof TcpDiscoverySpi) {    TcpDiscoverySpi tcpDisco=(TcpDiscoverySpi)cfg.getDiscoverySpi();    if (tcpDisco.getIpFinder() == null)     tcpDisco.setIpFinder(new TcpDiscoveryMulticastIpFinder());  }  if (cfg.getCommunicationSpi() == null)   cfg.setCommunicationSpi(new TcpCommunicationSpi());  if (cfg.getDeploymentSpi() == null)   cfg.setDeploymentSpi(new LocalDeploymentSpi());  if (cfg.getEventStorageSpi() == null)   cfg.setEventStorageSpi(new MemoryEventStorageSpi());  if (cfg.getCheckpointSpi() == null)   cfg.setCheckpointSpi(new NoopCheckpointSpi());  if (cfg.getCollisionSpi() == null)   cfg.setCollisionSpi(new NoopCollisionSpi());  if (cfg.getFailoverSpi() == null)   cfg.setFailoverSpi(new AlwaysFailoverSpi());  if (cfg.getLoadBalancingSpi() == null)   cfg.setLoadBalancingSpi(new RoundRobinLoadBalancingSpi()); else {    Collection<LoadBalancingSpi> spis=new ArrayList<>();    boolean dfltLoadBalancingSpi=false;    for (    LoadBalancingSpi spi : cfg.getLoadBalancingSpi()) {      spis.add(spi);      if (!dfltLoadBalancingSpi && spi instanceof RoundRobinLoadBalancingSpi)       dfltLoadBalancingSpi=true;    }    if (!dfltLoadBalancingSpi)     spis.add(new RoundRobinLoadBalancingSpi());    cfg.setLoadBalancingSpi(spis.toArray(new LoadBalancingSpi[spis.size()]));  }  if (cfg.getIndexingSpi() == null)   cfg.setIndexingSpi(new NoopIndexingSpi());  if (cfg.getSwapSpaceSpi() == null) {    boolean needSwap=false;    if (cfg.getCacheConfiguration() != null && !Boolean.TRUE.equals(cfg.isClientMode())) {      for (      CacheConfiguration c : cfg.getCacheConfiguration()) {        if (c.isSwapEnabled()) {          needSwap=true;          break;        }      }    }    cfg.setSwapSpaceSpi(needSwap ? new FileSwapSpaceSpi() : new NoopSwapSpaceSpi());  }}  }
class C{  public void readFromObject(Object data){  try {    getTable().cancelEditing();    setBeanInfo(Introspector.getBeanInfo(data.getClass()));    Property[] properties=model.getProperties();    for (int i=0, c=properties.length; i < c; i++) {      properties[i].readFromObject(data);    }    repaint();  } catch (  IntrospectionException ex) {    ex.printStackTrace();  }}  }
class C{  public Claimer(final ASTNode n){  ast=n == null ? null : n.getAST();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.281 -0500",hash_original_method="3E117BB34A8C7FFA67D17AB4CC250832",hash_generated_method="DAA7599D89038CFF9301BC5C895B0144") Cursor runQuery(ContentResolver resolver,String[] projection,Uri baseUri){  Uri uri=baseUri;  List<String> selectionParts=new ArrayList<String>();  String[] selectionArgs=null;  if (mIds != null) {    selectionParts.add(getWhereClauseForIds(mIds));    selectionArgs=getWhereArgsForIds(mIds);  }  if (mStatusFlags != null) {    List<String> parts=new ArrayList<String>();    if ((mStatusFlags & STATUS_PENDING) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_PENDING));    }    if ((mStatusFlags & STATUS_RUNNING) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_RUNNING));    }    if ((mStatusFlags & STATUS_PAUSED) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_PAUSED_BY_APP));      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_TO_RETRY));      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_FOR_NETWORK));      parts.add(statusClause("=",Downloads.Impl.STATUS_QUEUED_FOR_WIFI));    }    if ((mStatusFlags & STATUS_SUCCESSFUL) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_SUCCESS));    }    if ((mStatusFlags & STATUS_FAILED) != 0) {      parts.add("(" + statusClause(">=",400) + " AND "+ statusClause("<",600)+ ")");    }    selectionParts.add(joinStrings(" OR ",parts));  }  if (mOnlyIncludeVisibleInDownloadsUi) {    selectionParts.add(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI + " != '0'");  }  selectionParts.add(Downloads.Impl.COLUMN_DELETED + " != '1'");  String selection=joinStrings(" AND ",selectionParts);  String orderDirection=(mOrderDirection == ORDER_ASCENDING ? "ASC" : "DESC");  String orderBy=mOrderByColumn + " " + orderDirection;  return resolver.query(uri,projection,selection,selectionArgs,orderBy);}  }
class C{  public void deletePerspective(final Perspective p){  if (!p.isUserDefined()) {    return;  }  perspectives.remove(p.getName());  p.delete();  fireUpdate(new ArrayList<>(perspectives.values()));}  }
class C{  public long count(final Resource s,final URI p,final Value o,final Resource... c) throws RepositoryException {  try {    final RemoteRepository remote=getRepositoryForConnection();    return remote.rangeCount(s,p,o,c);  } catch (  Exception ex) {    throw new RepositoryException(ex);  }}  }
class C{  protected boolean isObjectType(byte type){  return type == T_OBJECT || type == T_EXCEPTION;}  }
class C{  protected void clearOutEvents(){  sCInterface.clearOutEvents();}  }
class C{  private static int ordinal(int eraValue){  return eraValue + ERA_OFFSET - 1;}  }
class C{  private void forceCustomerId(String customerId,Relation relation){  DomainPK leftId=relation.getLeftId();  if (leftId != null) {    leftId.setCustomerId(customerId);  }  DomainPK rightId=relation.getRightId();  if (rightId != null) {    rightId.setCustomerId(customerId);  }}  }
class C{  public MailContent row(String firstCell,String secondCell,String thirdCell,String fourthCell){  return tag("tr").cell(firstCell).cell(secondCell).cell(thirdCell).cell(fourthCell).end();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      power=Double.parseDouble(args[i]);      if (power > 10) {        power=10;      }    } else     if (i == 3) {      outputType=args[i].toLowerCase();    } else     if (i == 4) {      logTransform=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      if (!args[i].toLowerCase().contains("not specified")) {        threshold=Double.parseDouble(args[i]);      } else {        threshold=-9999;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numInNeighbours=0;          for (i=0; i < 8; i++) {            if (DEM.getValue(row + dY[i],col + dX[i]) > z) {              numInNeighbours++;            }          }          tmpGrid.setValue(row,col,numInNeighbours);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            FD8Accum(row,col);            somethingDone=true;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=DEM.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String xmlNode(String name,String attributes,String content){  return xmlNode(name,attributes,content,true);}  }
class C{  @SuppressWarnings("unchecked") public void writeTime(java.sql.Time x) throws SQLException {  attribs.add(x);}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public int hashCode(){  int result=0;  int increment=Math.min(3,values.length / 16);  for (int i=0; i < values.length; i+=increment) {    result=result * 37 + values[i];  }  return result;}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public static void divCol(Matrix A,int j,double c){  divCol(A,j,0,A.rows(),c);}  }
class C{  private void genEvents(THLParallelReadQueue prq,int count,int ctrlOffset,int ctrlRepeat) throws InterruptedException {  for (int i=0; i < count; i++) {    ReplDBMSEvent rde=helper.createEvent(i,"db" + (i % 3));    THLEvent thlEvent=new THLEvent(rde.getSourceId(),rde);    prq.post(thlEvent);    if (ctrlOffset > -1 && ((i - ctrlOffset) % ctrlRepeat) == 0) {      ReplControlEvent ce=new ReplControlEvent(ReplControlEvent.SYNC,i,rde);      prq.postOutOfBand(ce);    }  }  Assert.assertEquals(count,prq.getAcceptCount());  Assert.assertEquals(0,prq.getDiscardCount());}  }
class C{  private void initAll(AttributedCharacterIterator text){  fStart=text.getBeginIndex();  fChars=new char[text.getEndIndex() - fStart];  int n=0;  for (char c=text.first(); c != CharacterIterator.DONE; c=text.next()) {    fChars[n++]=c;  }  text.first();  fBidi=new Bidi(text);  if (fBidi.isLeftToRight()) {    fBidi=null;  }  text.first();  Map<? extends Attribute,?> paragraphAttrs=text.getAttributes();  NumericShaper shaper=AttributeValues.getNumericShaping(paragraphAttrs);  if (shaper != null) {    shaper.shape(fChars,0,fChars.length);  }  fParagraph=new StyledParagraph(text,fChars);{    fJustifyRatio=AttributeValues.getJustification(paragraphAttrs);    boolean haveFont=TextLine.advanceToFirstFont(text);    if (haveFont) {      Font defaultFont=TextLine.getFontAtCurrentPos(text);      int charsStart=text.getIndex() - text.getBeginIndex();      LineMetrics lm=defaultFont.getLineMetrics(fChars,charsStart,charsStart + 1,fFrc);      fBaseline=(byte)lm.getBaselineIndex();      fBaselineOffsets=lm.getBaselineOffsets();    } else {      GraphicAttribute graphic=(GraphicAttribute)paragraphAttrs.get(TextAttribute.CHAR_REPLACEMENT);      fBaseline=TextLayout.getBaselineFromGraphic(graphic);      Hashtable<Attribute,?> fmap=new Hashtable<>(5,(float)0.9);      Font dummyFont=new Font(fmap);      LineMetrics lm=dummyFont.getLineMetrics(" ",0,1,fFrc);      fBaselineOffsets=lm.getBaselineOffsets();    }    fBaselineOffsets=TextLine.getNormalizedOffsets(fBaselineOffsets,fBaseline);  }  invalidateComponents();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.508 -0400",hash_original_method="CF116B3452EC0275566D37ECB3727B4E",hash_generated_method="62F3A28D407886841033EDFC8C5FE565") public void put(long hash,byte[] encoding,Object object){  if (last_cached == cache_size) {    last_cached=0;    cache_is_full=true;  }  int index=last_cached++;  hash|=getSuffHash(encoding);  if (cache_is_full) {    long idx_hash=(hashes[index] | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      System.out.println("WARNING! " + idx);      idx=-(idx + 1);    }    long new_hash_idx=(hash | (index + 1));    int new_idx=Arrays.binarySearch(hashes_idx,new_hash_idx);    if (new_idx >= 0) {      if (idx != new_idx) {        System.out.println("WARNING: ");        System.out.println(">> idx: " + idx + " new_idx: "+ new_idx);      }    } else {      new_idx=-(new_idx + 1);      if (new_idx > idx) {        System.arraycopy(hashes_idx,idx + 1,hashes_idx,idx,new_idx - idx - 1);        hashes_idx[new_idx - 1]=new_hash_idx;      } else       if (idx > new_idx) {        System.arraycopy(hashes_idx,new_idx,hashes_idx,new_idx + 1,idx - new_idx);        hashes_idx[new_idx]=new_hash_idx;      } else {        hashes_idx[new_idx]=new_hash_idx;      }    }  } else {    long idx_hash=(hash | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      idx=-(idx + 1);    }    idx=idx - 1;    if (idx != cache_size - index - 1) {      System.arraycopy(hashes_idx,cache_size - index,hashes_idx,cache_size - index - 1,idx - (cache_size - index) + 1);    }    hashes_idx[idx]=idx_hash;  }  hashes[index]=hash;  encodings[index]=encoding;  cache[index]=object;}  }
class C{  public void test_concurrentClients() throws InterruptedException {  final Properties properties=getProperties();  final Journal journal=new Journal(properties);  try {    doConcurrentClientTest(journal,30,20,1,3,100,3,1000,0.02d);  }  finally {    journal.destroy();  }}  }
class C{  public static void runUpdatePortAssociationsProcessForVArrayChange(StoragePort port,DbClient dbClient,CoordinatorClient coordinator,List<StoragePool> pools,VirtualArrayAssignmentChanges varrayAssignmentChanges){  try {    URI storageSystemURI=port.getStorageDevice();    Set<String> varraysToAddIds=new HashSet<>();    Set<String> varraysToRemoveIds=new HashSet<>();    VirtualArrayAssignments varraysToAdd=varrayAssignmentChanges.getAdd();    if (varraysToAdd != null) {      varraysToAddIds=varraysToAdd.getVarrays();    }    VirtualArrayAssignments varraysToRemove=varrayAssignmentChanges.getRemove();    if (varraysToRemove != null) {      varraysToRemoveIds=varraysToRemove.getVarrays();    }    Set<String> varraysWithOutChangedConnectivity=new HashSet<>(varraysToAddIds);    varraysWithOutChangedConnectivity.addAll(varraysToRemoveIds);    Set<String> varraysWithChangedConnectivity=StoragePortAssociationHelper.getVArraysWithChangedConnectivityToStorageSystem(port,varraysToAddIds,varraysToRemoveIds,dbClient);    varraysWithOutChangedConnectivity.removeAll(varraysWithChangedConnectivity);    Collection<StoragePort> ports=Collections.singleton(port);    if (null == pools) {      pools=new ArrayList<StoragePool>();    }    Map<NetworkLite,List<StoragePort>> portsByNetwork=groupPortsByNetwork(ports,dbClient);    if (!portsByNetwork.isEmpty()) {      updatePortAssociations(ports,portsByNetwork,dbClient);      Set<URI> poolUris=getStoragePoolIds(pools);      List<StoragePool> modifiedPools=StoragePoolAssociationHelper.getStoragePoolsFromPorts(dbClient,ports,null);      for (      StoragePool pool : modifiedPools) {        if (!poolUris.contains(pool.getId())) {          pools.add(pool);        }      }    }    if (!varraysWithChangedConnectivity.isEmpty()) {      _log.info("Varrays which changed connectivity to storage system {} are {}",storageSystemURI,varraysWithChangedConnectivity);      List<URI> vpoolURIs=getVpoolsForVarrays(varraysWithChangedConnectivity,dbClient);      _log.info("There are {} vpools for varrays. Execute all vpool matchers for vpools {}",vpoolURIs.size(),vpoolURIs);      StringBuffer errorMessage=new StringBuffer();      ImplicitPoolMatcher.matchModifiedStoragePoolsWithVirtualPools(pools,vpoolURIs,dbClient,coordinator,AttributeMatcher.VPOOL_MATCHERS,errorMessage);    }    if (!varraysWithOutChangedConnectivity.isEmpty()) {      _log.info("Varrays which did not change connection to storage system {} are {}",storageSystemURI,varraysWithOutChangedConnectivity);      List<URI> vpoolURIs=getVpoolsForVarrays(varraysWithOutChangedConnectivity,dbClient);      _log.info("There are {} vpools for varrays. Execute num paths matcher for vpools {}",vpoolURIs.size(),vpoolURIs);      StringBuffer errorMessage=new StringBuffer();      ImplicitPoolMatcher.matchModifiedStoragePoolsWithVirtualPools(pools,vpoolURIs,dbClient,coordinator,AttributeMatcher.CONNECTIVITY_PLACEMENT_MATCHERS,errorMessage);    }    HashSet<URI> systemsToProcess=StoragePoolAssociationHelper.getStorageSytemsFromPorts(ports,null);    ConnectivityUtil.updateRpSystemsConnectivity(systemsToProcess,dbClient);  } catch (  Exception e) {    _log.error("Update Port Association process failed",e);  }}  }
class C{  public static byte[] str2bin(final String values){  return str2bin(values,JBBPBitOrder.LSB0);}  }
class C{  public void addComponentToSideMenu(Component cmp,Command cmd){  checkIfInitialized();  if (permanentSideMenu) {    constructPermanentSideMenu();    Container cnt=new Container(new BorderLayout());    cnt.addComponent(BorderLayout.CENTER,cmp);    Button btn=new Button(cmd);    btn.setParent(cnt);    cnt.setLeadComponent(btn);    addComponentToSideMenu(permanentSideMenuContainer,cnt);  } else {    cmd.putClientProperty(SideMenuBar.COMMAND_SIDE_COMPONENT,cmp);    cmd.putClientProperty(SideMenuBar.COMMAND_ACTIONABLE,Boolean.TRUE);    sideMenu.addCommand(cmd);    sideMenu.installMenuBar();  }}  }
class C{  private RSAAMResult afterProcessRSAStatus(int status,String cachedSessionId,String userName,PrincipalId pId) throws IDMLoginException, IDMSecureIDNewPinException {  Validate.notEmpty(userName,"Empty userName");  RSAAMResult result;switch (status) {case AuthenticationResult.ACCESS_OK:    logger.info(String.format("Successfully authenticating principal [%s] by passcode.",userName));  result=new RSAAMResult(pId);break;case AuthenticationResult.ACCESS_DENIED:logger.error(String.format("Failed authenticating principal [%s] by passcode.",userName));throw new IDMLoginException(String.format("RSA status: ACCESS_DENIED."));case AuthenticationResult.NEXT_CODE_BAD:logger.error(String.format("Failed authenticating principal [%s] by passcode.",userName));throw new IDMLoginException(String.format("RSA status: NEXT_CODE_BAD."));case AuthenticationResult.NEXT_CODE_REQUIRED:logger.info(String.format("Next code required authenticating principal [%s] by passcode.RSA SessionID [%s]",userName,cachedSessionId));result=new RSAAMResult(cachedSessionId);break;case AuthenticationResult.NEW_PIN_REQUIRED:logger.info(String.format("New pin required authenticate principal [%s] by passcode.",userName));throw new IDMSecureIDNewPinException(String.format("RSA status: PIN_REJECTED."));default :throw new IDMLoginException(String.format("Unexpected RSA AM status:  %d",status));}return result;}  }
class C{  public int documentoCount(){  return documentos.size();}  }
class C{  protected void registerDraggableAttributes(){  addAttributeProcessor(new BlockInputLmlAttribute(),"blockInput");  addAttributeProcessor(new DeadzoneRadiusLmlAttribute(),"deadzone","deadzoneRadius");  addAttributeProcessor(new DraggedAlphaLmlAttribute(),"alpha");  addAttributeProcessor(new DraggedFadingInterpolationLmlAttribute(),"fadingInterpolation");  addAttributeProcessor(new DraggedFadingTimeLmlAttribute(),"fadingTime");  addAttributeProcessor(new DraggedMovingInterpolationLmlAttribute(),"movingInterpolation");  addAttributeProcessor(new DraggedMovingTimeLmlAttribute(),"movingTime");  addAttributeProcessor(new DragListenerLmlAttribute(),"listener");  addAttributeProcessor(new InvisibleWhenDraggedLmlAttribute(),"invisible","invisibleWhenDragged");  addAttributeProcessor(new KeepDraggedWithinParentLmlAttribute(),"keepWithinParent");}  }
class C{  @Override public void doLayout(){  super.doLayout();  Dimension size=getSize();  coordinateSystem=new CoordinateSystem(0,size.getWidth(),0,size.getHeight());  shouldDraw=true;  recalculateDisplayList();}  }
class C{  public HttpCookie(String name,String value){  String ntrim=name.trim();  if (!isValidName(ntrim)) {    throw new IllegalArgumentException("Invalid name: " + name);  }  this.name=ntrim;  this.value=value;}  }
class C{  public H2FullPrunedBlockStore(NetworkParameters params,String dbName,int fullStoreDepth) throws BlockStoreException {  this.params=params;  this.fullStoreDepth=fullStoreDepth;  connectionURL="jdbc:h2:" + dbName + ";create=true;LOCK_TIMEOUT=60000";  conn=new ThreadLocal<Connection>();  allConnections=new LinkedList<Connection>();  try {    Class.forName(driver);    log.info(driver + " loaded. ");  } catch (  java.lang.ClassNotFoundException e) {    log.error("check CLASSPATH for H2 jar ",e);  }  maybeConnect();  try {    if (!tableExists("settings"))     createTables();    initFromDatabase();  } catch (  SQLException e) {    throw new BlockStoreException(e);  }}  }
class C{  public TermsBuilder exclude(long[] terms){  if (excludePattern != null) {    throw new IllegalArgumentException("exclude clause must be an array of exact values or a regex, not both");  }  this.excludeTerms=longsArrToStringArr(terms);  return this;}  }
class C{  public List<Image> listImages() throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("GET").path(apiVersionPathPrefix + "/images/json")){    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),new TypeToken<List<Image>>(){    });  } }  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] sourceValid,boolean[] destValid){  int startTime=0;  int endTime=0;  boolean lookingForStart=true;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  for (int t=0; t < destValid.length; t++) {    if (lookingForStart) {      if (destValid[t]) {        if (t - startTime < k) {          continue;        } else {          if (sourceValid[t - 1]) {            endTime=t;            lookingForStart=false;            if (t == destValid.length - 1) {              int[] timePair=new int[2];              timePair[0]=startTime;              timePair[1]=endTime;              startAndEndTimePairs.add(timePair);            }          } else {            startTime++;          }        }      } else {        startTime=t + 1;      }    } else {      boolean terminateSequence=false;      if (destValid[t] && sourceValid[t - 1]) {        endTime=t;      } else {        terminateSequence=true;      }      if (t == destValid.length - 1) {        terminateSequence=true;      }      if (terminateSequence) {        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=endTime;        startAndEndTimePairs.add(timePair);        lookingForStart=true;        if (!destValid[t]) {          startTime=t + 1;        } else {          startTime=t - k + 1;        }      }    }  }  return startAndEndTimePairs;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void writeNumber(Class<?> numberClass,Number value,CharBuf buffer){  if (numberClass == Integer.class) {    buffer.addInt((Integer)value);  } else   if (numberClass == Long.class) {    buffer.addLong((Long)value);  } else   if (numberClass == BigInteger.class) {    buffer.addBigInteger((BigInteger)value);  } else   if (numberClass == BigDecimal.class) {    buffer.addBigDecimal((BigDecimal)value);  } else   if (numberClass == Double.class) {    Double doubleValue=(Double)value;    if (doubleValue.isInfinite()) {      throw new JsonException("Number " + value + " can't be serialized as JSON: infinite are not allowed in JSON.");    }    if (doubleValue.isNaN()) {      throw new JsonException("Number " + value + " can't be serialized as JSON: NaN are not allowed in JSON.");    }    buffer.addDouble(doubleValue);  } else   if (numberClass == Float.class) {    Float floatValue=(Float)value;    if (floatValue.isInfinite()) {      throw new JsonException("Number " + value + " can't be serialized as JSON: infinite are not allowed in JSON.");    }    if (floatValue.isNaN()) {      throw new JsonException("Number " + value + " can't be serialized as JSON: NaN are not allowed in JSON.");    }    buffer.addFloat(floatValue);  } else   if (numberClass == Byte.class) {    buffer.addByte((Byte)value);  } else   if (numberClass == Short.class) {    buffer.addShort((Short)value);  } else {    buffer.addString(value.toString());  }}  }
class C{  public static Wildcards of(Wildcards.Flag... setFlags){  int flags=0;  for (  Wildcards.Flag flag : setFlags)   flags=flag.wildcard(0);  return Wildcards.of(flags);}  }
class C{  @Override protected void generateAndDisplayReport(String name,String content){  XpectBugReportUtil.displayGeneratedJiraBugConsole(name,content);}  }
class C{  public JSONObject put(String key,Map<?,?> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  private MultiSplitLayout(final Node model){  this.model=model;  dividerSize=UIManager.getInt("SplitPane.dividerSize");  if (dividerSize == 0) {    dividerSize=7;  }}  }
class C{  public static String makeSystemName(String type,int nAddress,int bitNum,AcelaSystemConnectionMemo memo){  String nName="";  if (!type.equalsIgnoreCase("S") && !type.equalsIgnoreCase("L") && !type.equalsIgnoreCase("T")) {    log.error("illegal type character proposed for system name");    return (nName);  }  if ((nAddress < memo.getTrafficController().getMinimumNodeAddress()) || (nAddress > memo.getTrafficController().getMaximumNumberOfNodes())) {    log.error("illegal node adddress proposed for system name");    return (nName);  }  if (type.equalsIgnoreCase("S") && ((bitNum < 0) || (bitNum > MAXSENSORADDRESS))) {    log.error("illegal bit number proposed for Acela Sensor");    return (nName);  }  if ((type.equalsIgnoreCase("L") || type.equalsIgnoreCase("T")) && ((bitNum < 0) || (bitNum > MAXOUTPUTADDRESS))) {    log.error("illegal bit number proposed for Acela Turnout or Light");    return (nName);  }  nName="A" + type + Integer.toString(bitNum);  return (nName);}  }
class C{  public static RefactoringDescriptorProxy[] readRefactoringDescriptorProxies(final InputStream stream,final String project,final long start,final long end) throws IOException {  final List list=new ArrayList();  final BufferedReader reader=new BufferedReader(new InputStreamReader(stream,IRefactoringSerializationConstants.OUTPUT_ENCODING));  while (reader.ready()) {    final String line=reader.readLine();    if (line != null) {      final int index=line.indexOf(DELIMITER_COMPONENT);      if (index > 0) {        try {          final long stamp=new Long(line.substring(0,index)).longValue();          if (stamp >= start && stamp <= end)           list.add(new DefaultRefactoringDescriptorProxy(unescapeString(line.substring(index + 1)),project,stamp));        } catch (        NumberFormatException exception) {        }      }    }  }  return (RefactoringDescriptorProxy[])list.toArray(new RefactoringDescriptorProxy[list.size()]);}  }
class C{  private void stopAdvertising(){  Log.d(TAG,"Service: Stopping Advertising");  if (mBluetoothLeAdvertiser != null) {    mBluetoothLeAdvertiser.stopAdvertising(mAdvertiseCallback);    mAdvertiseCallback=null;  }}  }
class C{  protected TypeVariableMappingImpl(){  super();}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  public Strategy findByName(String name){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Strategy> query=builder.createQuery(Strategy.class);    Root<Strategy> from=query.from(Strategy.class);    query.select(from);    query.where(builder.equal(from.get("name"),name));    List<Strategy> items=entityManager.createQuery(query).getResultList();    for (    Strategy strategy : items) {      strategy.getIndicatorSeries().size();      strategy.getRules().size();    }    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void add(Basis b){  bases.add(b);}  }
class C{  public void logOut(){  AccessToken.setCurrentAccessToken(null);  Profile.setCurrentProfile(null);}  }
class C{  private void initUIPart(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    findPreference(getString(R.string.key_navigationBar_color)).setEnabled(false);  } else {    findPreference(getString(R.string.key_navigationBar_color)).setEnabled(true);  }}  }
class C{  public ThreadMonitor(long interval){  super("ThreadMonitor");  if (interval < 1000) {    throw new IllegalArgumentException("Interval must be > 1000");  }  this.recalcInterval=interval;  this.threadBean=java.lang.management.ManagementFactory.getThreadMXBean();  setDaemon(true);  start();}  }
class C{  public boolean isIncludeViewParams(){  return (Boolean)getStateHelper().eval(PropertyKeys.includeViewParams,false);}  }
class C{  public void testConstructor2(){  Executor e=Executors.newFixedThreadPool(1);  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(e,8);  checkInitialState(p);  assertSame(p.getExecutor(),e);  assertEquals(8,p.getMaxBufferCapacity());}  }
class C{  private static boolean hasFunctionCallReference(final OperandExpression expression,final Function function){  final List<Reference> references=expression.getReferences();  for (  final Reference reference : references) {    if ((reference != null) && ReferenceType.isCodeReference(reference.getType())) {      if (function.getAddress().equals(reference.getTarget())) {        return true;      }    }  }  for (  final OperandExpression node : expression.getChildren()) {    if (hasFunctionCallReference(node,function)) {      return true;    }  }  return false;}  }
class C{  boolean svfSubClass(OwlClass other){  for (  OwlClass svfClass : this.svfClasses) {    Set<Resource> intersection=svfClass.getSuperClasses();    intersection.retainAll(other.someValuesFrom());    if (!intersection.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public Artifact load(File path) throws IOException {  return load(new ArtifactName(path.getName()),path);}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.lockGrantorMember == null ? 0 : this.lockGrantorMember.hashCode());  result=mult * result + (int)(this.lockGrantorVersion ^ (this.lockGrantorVersion >>> 32));  result=mult * result + this.lockGrantorSerialNumber;  return result;}  }
class C{  public static boolean showInputMsg(final Object... messages){  Sound.beepOnInput();  return JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(Env.CURRENT_GUI_FRAME.get(),messages,"Input",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler) {    ((org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler)m_contentHandler).characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  private void ensureAccessibilityEnabled(Context context,boolean enabled) throws Exception {  boolean isEnabled=(Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.ACCESSIBILITY_ENABLED,0) == 1 ? true : false);  if (isEnabled == enabled) {    return;  }  Settings.Secure.putInt(context.getContentResolver(),Settings.Secure.ACCESSIBILITY_ENABLED,enabled ? 1 : 0);  Thread.sleep(TIMEOUT_BINDER_CALL);}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  @Nullable public static SQFParamsStatement parse(SQFCommandExpression expression){  PsiElement postfix=expression.getPostfixArgument();  PsiElement prefix=expression.getPrefixArgument();  String commandName=expression.getCommandName();  SQFParamsStatement paramsStatement=null;  if (commandName.equals("params")) {    if (postfix instanceof SQFLiteralExpression) {      SQFLiteralExpression literal=(SQFLiteralExpression)postfix;      if (literal.getArrayVal() == null) {        return null;      }      SQFArrayVal array=literal.getArrayVal();      List<SQFLiteralExpression> arrayLiterals=SQFPsiUtil.getExpressionsOfType(array,SQFLiteralExpression.class);      paramsStatement=new SQFParamsStatement(expression,array);      for (      SQFLiteralExpression literalExpression : arrayLiterals) {        if (literalExpression.getString() != null) {          paramsStatement.privateDeclVars.add(new SQFPrivateDeclVar(literalExpression.getString(),paramsStatement));        } else         if (literalExpression.getArrayVal() != null) {          SQFArrayVal innerArray=literalExpression.getArrayVal();          List<SQFArrayEntry> innerArrayEntries=innerArray.getArrayEntryList();          if (innerArrayEntries.size() >= 1) {            SQFExpression firstExpression=innerArrayEntries.get(0).getExpression();            if (firstExpression instanceof SQFLiteralExpression) {              SQFLiteralExpression possibleString=(SQFLiteralExpression)firstExpression;              if (possibleString.getString() != null) {                paramsStatement.privateDeclVars.add(new SQFPrivateDeclVar(possibleString.getString(),paramsStatement));                if (innerArrayEntries.size() > 1 || prefix != null) {                  if (innerArrayEntries.get(1).getText().equals("nil") && prefix == null) {                    continue;                  }                  paramsStatement.varsDefined.add(possibleString.getString().getNonQuoteText());                }              }            }          }        }      }    }  }  return paramsStatement;}  }
class C{  public static void deleteCommander(Context context,int position,String commandType){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  editor.remove(KEY_COMMANDER + commandType + String.format("%02d",position));  editor.commit();}  }
class C{  public void recreate(int S_Resource_ID,Date date){  hourBand.setDate(date);  dayBand.setDate(date);  mthBand.setDate(date);  String feedUrl="timeline?S_Resource_ID=" + S_Resource_ID + "&date="+ DateFormat.getInstance().format(date)+ "&uuid="+ button.getUuid()+ "&tlid="+ timeLine.getUuid();  hourBand.setEventSourceUrl(feedUrl);  dayBand.setEventSourceUrl(feedUrl);}  }
class C{  public boolean isTaskFailed(){  return isTaskFailed;}  }
class C{  public AttributeBuilder allowAttributes(String... attributeNames){  ImmutableList.Builder<String> b=ImmutableList.builder();  for (  String attributeName : attributeNames) {    b.add(HtmlLexer.canonicalName(attributeName));  }  return new AttributeBuilder(b.build());}  }
class C{  public Builder withCommand(Command command){  request.command=Assert.notNull(command,"command");  return this;}  }
class C{  public void notifyObservers(Object arg){  for (  Observer observer : observers) {    observer.update(this,arg);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinuseattributeerr.class,args);}  }
class C{  public int minfrequency(){  return minfrequency;}  }
class C{  void clearAllLinks(){  storageSourceService.deleteRowsAsync(LINK_TABLE_NAME,null);}  }
class C{  public String cause(){  return cause;}  }
class C{  public FloatLazyValue(Collection<? super FloatLazyValue> collection,FloatSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public CompareToBuilder append(final long lhs,final long rhs){  if (comparison != 0) {    return this;  }  comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  return this;}  }
class C{  protected void prepareChain(int L){  int chain[]=retrieveChain();  if (chain == null) {    chain=A.make_sequence(L);    if (m_S != 0) {      m_R=new Random(m_S);      A.shuffle(chain,m_R);    }  }  prepareChain(chain);}  }
class C{  public Client(String version,String hostname,String username,String domain,char[] password) throws NTLMException {  super(version);  if ((username == null || password == null)) {    throw new NTLMException(NTLMException.PROTOCOL,"username/password cannot be null");  }  this.hostname=hostname;  this.username=username;  this.domain=domain == null ? "" : domain;  this.pw1=getP1(password);  this.pw2=getP2(password);  debug("NTLM Client: (h,u,t,version(v)) = (%s,%s,%s,%s(%s))\n",hostname,username,domain,version,v.toString());}  }
class C{  @Mod.EventHandler public void postInit(FMLPostInitializationEvent e){  proxy.postInit(e);}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  private void addProduct(CPanel element,MProduct product){  Insets ii=new Insets(2,4,2,4);  int M_Product_ID=product.getM_Product_ID();  CPanel pe=new CPanel();  pe.setBorder(BorderFactory.createLineBorder(Color.BLUE,1));  pe.setLayout(new GridBagLayout());  pe.add(new JLabel(product.getValue()),new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,ii,0,0));  String formatted="";  if (m_M_PriceList_Version_ID != 0) {    MProductPrice pp=MProductPrice.get(Env.getCtx(),m_M_PriceList_Version_ID,M_Product_ID,null);    if (pp != null) {      BigDecimal price=pp.getPriceStd();      formatted=m_price.format(price);    } else     formatted="-";  }  pe.add(new JLabel(formatted,JLabel.RIGHT),new GridBagConstraints(1,0,1,1,.5,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,ii,0,0));  pe.add(new JLabel(product.getName()),new GridBagConstraints(0,1,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,ii,0,0));  formatted="";  if (m_M_Warehouse_ID != 0) {    BigDecimal qty=MStorage.getQtyAvailable(m_M_Warehouse_ID,M_Product_ID,0,null);    if (qty == null)     formatted="-"; else     formatted=m_qty.format(qty);  }  pe.add(new JLabel(formatted,JLabel.RIGHT),new GridBagConstraints(1,1,1,1,.5,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,ii,0,0));  element.add(pe);}  }
class C{  public CPartialLoadException(final String message,final INaviModule module){  super(message);  m_module=module;}  }
class C{  public void received(final long offset,final long size){  final Pair<CAddress,Long> pair=Pair.make(new CAddress(offset),size);  if (lastMemoryRequest.contains(pair)) {    lastMemoryRequest.remove(pair);  }}  }
class C{  public void testTxPartitionedOptimisticReadCommitted() throws Exception {  checkTx(PARTITIONED,OPTIMISTIC,READ_COMMITTED);}  }
class C{  public void process(Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches,Map<Long,Integer> proteinLengthsMap,final String filteredMatchesFilePath,final String blastMatchesFilePath,final String subFamiliesFilePath,final double signatureLibraryReleaseValue) throws IOException {  final Map<String,PirsfDatRecord> pirsfDatRecordMap=pirsfDatFileInfoHolder.getData();  Map<String,PIRSFHmmer2RawMatch> proteinIdBestMatchMap=new HashMap<String,PIRSFHmmer2RawMatch>();  Map<String,PIRSFHmmer2RawMatch> proteinIdBestMatchToBeBlastedMap=new HashMap<String,PIRSFHmmer2RawMatch>();  final Map<String,String> subFamToSuperFamMap=new HashMap<String,String>();  for (  RawProtein<PIRSFHmmer2RawMatch> protein : rawMatches) {    String proteinId=protein.getProteinIdentifier();    int proteinLength=proteinLengthsMap.get(Long.parseLong(proteinId));    PIRSFHmmer2RawMatch bestMatch=doOverlapFiltering(protein,pirsfDatRecordMap,proteinLength,subFamToSuperFamMap);    if (bestMatch != null) {      if (doBlastCheck(proteinId,bestMatch,pirsfDatRecordMap)) {        proteinIdBestMatchToBeBlastedMap.put(proteinId,bestMatch);      } else {        proteinIdBestMatchMap.put(proteinId,bestMatch);      }    }  }  PirsfFileUtil.writeProteinBestMatchesToFile(filteredMatchesFilePath,proteinIdBestMatchMap);  PirsfFileUtil.writeProteinBestMatchesToFile(blastMatchesFilePath,proteinIdBestMatchToBeBlastedMap);  if (signatureLibraryReleaseValue >= 2.75d && subFamiliesFilePath != null) {    PirsfFileUtil.writeSubFamiliesToFile(subFamiliesFilePath,subFamToSuperFamMap);  }}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height >> 1;  int halfWidth=width >> 1;  int deltaY=Math.max(1,height / (MAX_MODULES << 3));  int deltaX=Math.max(1,width / (MAX_MODULES << 3));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 1);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight >> 1);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth >> 1);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth >> 2);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  private static void printPaginationInfo(McfData mcfData){  System.out.println("Pagination Info:");  System.out.println("Previous Link: " + mcfData.getPreviousLink());  System.out.println("Next Link: " + mcfData.getNextLink());  System.out.println("Items Per Page: " + mcfData.getItemsPerPage());  System.out.println("Total Results: " + mcfData.getTotalResults());  System.out.println();}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public GroupVM(@NotNull Group rawObj){  super(rawObj);  this.groupId=rawObj.getGroupId();  this.groupType=rawObj.getGroupType();  this.name=new StringValueModel("group." + groupId + ".title",rawObj.getTitle());  this.avatar=new AvatarValueModel("group." + groupId + ".avatar",rawObj.getAvatar());  this.isMember=new BooleanValueModel("group." + groupId + ".isMember",rawObj.isMember());  this.membersCount=new IntValueModel("group." + groupId + ".membersCount",rawObj.getMembersCount());  this.isCanWriteMessage=new BooleanValueModel("group." + groupId + ".can_write",rawObj.isCanSendMessage());  this.isCanCall=new BooleanValueModel("group." + groupId + ".can_call",rawObj.isCanCall());  this.isCanViewMembers=new BooleanValueModel("group." + groupId + ".can_view_members",rawObj.isCanViewMembers());  this.isCanInviteMembers=new BooleanValueModel("group." + groupId + ".can_invite_members",rawObj.isCanInviteMembers());  this.isCanEditInfo=new BooleanValueModel("group." + groupId + ".can_edit_info",rawObj.isCanEditInfo());  this.isAsyncMembers=new BooleanValueModel("group." + groupId + ".isAsyncMembers",rawObj.isAsyncMembers());  this.isCanEditAdministration=new BooleanValueModel("group." + groupId + ".isCanEditAdministration",rawObj.isCanEditAdministration());  this.isHistoryShared=new BooleanValueModel("group." + groupId + ".isHistoryShared",rawObj.isSharedHistory());  this.isCanEditAdmins=new BooleanValueModel("group." + groupId + ".isCanEditAdmins",rawObj.isCanEditAdmins());  this.isCanViewAdmins=new BooleanValueModel("group." + groupId + ".isCanViewAdmins",rawObj.isCanViewAdmins());  this.isCanLeave=new BooleanValueModel("group." + groupId + ".isCanLeave",rawObj.isCanLeave());  this.isCanDelete=new BooleanValueModel("group." + groupId + ".isCanDelete",rawObj.isCanDelete());  this.isCanInviteViaLink=new BooleanValueModel("group." + groupId + ".isCanInviteViaLink",rawObj.isCanInviteViaLink());  this.isCanKickInvited=new BooleanValueModel("group." + groupId + ".isCanKickInvited",rawObj.isCanKickInvited());  this.isCanKickAnyone=new BooleanValueModel("group." + groupId + ".isCanKickAnyone",rawObj.isCanKickAnyone());  this.isCanEditForeign=new BooleanValueModel("group." + groupId + ".isCanEditForeign",rawObj.isCanEditForeign());  this.isCanDeleteForeign=new BooleanValueModel("group." + groupId + ".isCanDeleteForeign",rawObj.isCanDeleteForeign());  this.isDeleted=new BooleanValueModel("group." + groupId + ".isDeleted",rawObj.isDeleted());  this.isCanClear=new BooleanValueModel("group." + groupId + ".isCanClear",rawObj.isCanClear());  this.isCanJoin=new BooleanValueModel("group." + groupId + ".isCanJoin",rawObj.isCanJoin());  this.isCanViewInfo=new BooleanValueModel("group." + groupId + ".isCanViewInfo",rawObj.isCanViewInfo());  this.ownerId=new IntValueModel("group." + groupId + ".membersCount",rawObj.getOwnerId());  this.members=new ValueModel<>("group." + groupId + ".members",new HashSet<>(rawObj.getMembers()));  this.presence=new ValueModel<>("group." + groupId + ".presence",0);  this.theme=new StringValueModel("group." + groupId + ".theme",rawObj.getTopic());  this.about=new StringValueModel("group." + groupId + ".about",rawObj.getAbout());  this.shortName=new StringValueModel("group." + groupId + ".shortname",rawObj.getShortName());  this.ext=new ValueModel<>("group." + groupId + ".ext",rawObj.getExt());}  }
class C{  public int offset(){  return bb.capacity() - space;}  }
class C{  public void valid(Date now) throws CertificateNotYetValidException, CertificateExpiredException {  if (notBefore.after(now)) {    throw new CertificateNotYetValidException("NotBefore: " + notBefore.toString());  }  if (notAfter.before(now)) {    throw new CertificateExpiredException("NotAfter: " + notAfter.toString());  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public Builder convertDocumentConfig(JsonObject convertDocumentConfig){  conversionConfiguration=convertDocumentConfig;  return this;}  }
class C{  public boolean isSetNewNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NEWNODEID_ISSET_ID);}  }
class C{  public jMatrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  public void close(){  try {    mContext.unregisterReceiver(mBluetoothStateBroadcastReceiver);    mContext.unregisterReceiver(mBondingBroadcastReceiver);  } catch (  Exception e) {  }synchronized (mLock) {    if (mBluetoothGatt != null) {      mBluetoothGatt.close();      mBluetoothGatt=null;    }    mConnected=false;    mConnectionState=BluetoothGatt.STATE_DISCONNECTED;    mGattCallback=null;    mBluetoothDevice=null;  }}  }
class C{  public static _ParameterTypeEnum fromString(final String value) throws SOAPSerializationException {  return (_ParameterTypeEnum)Enumeration.fromString(value,_ParameterTypeEnum.VALUES_TO_INSTANCES);}  }
class C{  public String readLine() throws IOException {  this.lineBuffer.delete(0,this.lineBuffer.length());  boolean cr_just_received=false;  while (true) {    int inChar=this.read();    if (!cr_just_received) {switch (inChar) {case CR:        cr_just_received=true;      break;case EOF:    return null;case LF:  if (this.tainted == -1)   this.tainted=this.lineBuffer.length();default :this.lineBuffer.append((char)inChar);}} else {switch (inChar) {case LF:if (this.tainted != -1) {int pos=this.tainted;this.tainted=-1;throw new TerminationException("\"bare\" CR or LF in data stream",pos);}return this.lineBuffer.toString();case EOF:return null;case CR:if (this.tainted == -1) this.tainted=this.lineBuffer.length();this.lineBuffer.append((char)this.CR);break;default :if (this.tainted == -1) this.tainted=this.lineBuffer.length();this.lineBuffer.append((char)this.CR);this.lineBuffer.append((char)inChar);cr_just_received=false;}}if (this.lineBuffer.length() >= MAX_LINE_LENGTH) {throw new MaxLineLengthException("Input line length is too long!");}}}  }
class C{  public ColorRange(ColorList list){  this(list.get(0));  hueConstraint.clear();  for (  TColor c : list) {    add(c);  }}  }
class C{  public boolean isSelectedByDefault(){  Object oo=get_Value(COLUMNNAME_IsSelectedByDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  CNCtx(ORB orb,OrbReuseTracker tracker,NamingContext nctx,Hashtable<String,java.lang.Object> env,NameComponent[] name) throws NamingException {  if (orb == null || nctx == null)   throw new ConfigurationException("Must supply ORB or NamingContext");  if (orb != null) {    _orb=orb;  } else {    _orb=getDefaultOrb();  }  _nc=nctx;  _env=env;  _name=name;  federation="true".equals(env != null ? env.get(FED_PROP) : null);}  }
class C{  private void loadNextActivity(){  if (Constants.OWNERSHIP_BYOD.equalsIgnoreCase(deviceType)) {    loadPinCodeActivity();  } else {    loadRegistrationActivity();  }}  }
class C{  public void addNewDuration(long duration){  callsNumber.incrementAndGet();  total.addAndGet(duration);synchronized (lock) {    if (duration < minimum.longValue()) {      minimum.set(duration);    }    if (duration > maximum.longValue()) {      maximum.set(duration);    }  }}  }
class C{  private void putToQueue(ExternalEvent ee){  double eeTime=ee.getTime();  for (int i=0, n=this.updates.size(); i < n; i++) {    double time=updates.get(i).getTime();    if (time == eeTime) {      return;    } else     if (eeTime < time) {      this.updates.add(i,ee);      return;    }  }  this.updates.add(ee);}  }
class C{  public static void reverse(List list){  int size=list.size();  if (size < REVERSE_THRESHOLD || list instanceof RandomAccess) {    for (int i=0, mid=size >> 1, j=size - 1; i < mid; i++, j--)     swap(list,i,j);  } else {    ListIterator fwd=list.listIterator();    ListIterator rev=list.listIterator(size);    for (int i=0, mid=list.size() >> 1; i < mid; i++) {      Object tmp=fwd.next();      fwd.set(rev.previous());      rev.set(tmp);    }  }}  }
class C{  private void permissionSpecificHandling(Permission permission){  IReportPermissionHandler handler=permissionManager.getHandlerForPermission(permission);  handler.handlePermission(permission);}  }
class C{  public synchronized boolean isRegExpSearch(){  return m_Model.isRegExpSearch();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  type=null;  types=null;}  }
class C{  public void closePanel(){  dragHelper.smoothSlideViewTo(toolbar,0,0);  invalidate();}  }
class C{  @Override public String toString(){  return "QueryCanonicalCharacterNamesCommand [player=" + player + ", who="+ namesToCheck+ ", validNames="+ validNames+ "]";}  }
class C{  public JsonArrayRequest(int method,String url,String requestBody,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public DeclaredTypeWithAccessModifier createDeclaredTypeWithAccessModifier(){  DeclaredTypeWithAccessModifierImpl declaredTypeWithAccessModifier=new DeclaredTypeWithAccessModifierImpl();  return declaredTypeWithAccessModifier;}  }
class C{  public synchronized static boolean isMac(){  if (m_IsMac == null)   m_IsMac=System.getProperty("os.name").toLowerCase().startsWith("mac os");  return m_IsMac;}  }
class C{  public Movie(String id,String name,String description){  this.id=id;  this.name=name;  this.description=description;}  }
class C{  private boolean collectConflicts(IvyNodeElement root,IvyNodeElement parent,String moduleName){  boolean conflicts=false;  for (  IvyNodeElement child : parent.getDependencies()) {    String coordinate="/" + child.getOrganization() + "/"+ child.getName();    Dependency dependency=directDependencies.get(coordinate);    if (null != dependency) {      String indirectVersion=child.getRevision();      if (isConflict(coordinate,dependency.directVersion,indirectVersion)) {        conflicts=true;        Set<String> moduleNames=dependency.conflictLocations.get(root);        if (null == moduleNames) {          moduleNames=new HashSet<>();          dependency.conflictLocations.put(root,moduleNames);        }        moduleNames.add(moduleName);      }      conflicts|=collectConflicts(root,child,moduleName);    }  }  return conflicts;}  }
class C{  private static Network createNetwork(Scenario scenario){  NetworkFactory nf=(NetworkFactory)scenario.getNetwork().getFactory();  nf.setLinkFactory(new VariableIntervalTimeVariantLinkFactory());  final Network network=(Network)scenario.getNetwork();  network.setCapacityPeriod(3600.0);  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)200,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)300,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode1,toNode1,(double)100,(double)10,(double)3600,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  NetworkUtils.createAndAddLink(network,Id.create("3",Link.class),fromNode2,toNode2,(double)100,(double)10,(double)3600,(double)1);  return network;}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  put(key,file,contentType,null);}  }
class C{  public void paint(Graphics g){  Color bgColor=(splitPane.hasFocus()) ? UIManager.getColor("SplitPane.shadow") : getBackground();  Dimension size=getSize();  if (bgColor != null) {    g.setColor(bgColor);    g.fillRect(0,0,size.width,size.height);  }  super.paint(g);}  }
class C{  public void finishAnimation(){  if (mContentAnimations == null)   return;  mContentAnimations.updateAndFinish();  mContentAnimations=null;}  }
class C{  public static Years yearsIn(ReadableInterval interval){  if (interval == null) {    return Years.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.years());  return Years.years(amount);}  }
class C{  @Override public void onConnected(Bundle connectionHint){  mLocationRequest=LocationRequest.create();  mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);  mLocationRequest.setInterval(1000);  LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient,mLocationRequest,this);}  }
class C{  public boolean sendCommand(final Command command){  if (ActiveMQServerLogger.LOGGER.isTraceEnabled()) {    ActiveMQServerLogger.LOGGER.trace("sending " + command);  }  if (isDestroyed()) {    return false;  }  try {    physicalSend(command);  } catch (  Exception e) {    return false;  }catch (  Throwable t) {    return false;  }  return true;}  }
class C{  public static LatLon intersectionWithMeridian(LatLon p1,LatLon p2,Angle meridian){  if (p1 == null || p2 == null) {    String msg=Logging.getMessage("nullValue.LocationIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (meridian == null) {    String msg=Logging.getMessage("nullValue.MeridianIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double lon1=p1.getLongitude().degrees < 0 ? p1.getLongitude().degrees + 360 : p1.getLongitude().degrees;  double lon2=p2.getLongitude().degrees < 0 ? p2.getLongitude().degrees + 360 : p2.getLongitude().degrees;  if (lon1 == lon2)   return null;  double med=meridian.degrees < 0 ? meridian.degrees + 360 : meridian.degrees;  double slope=(p2.latitude.degrees - p1.latitude.degrees) / (lon2 - lon1);  double lat=p1.latitude.degrees + slope * (med - lon1);  return LatLon.fromDegrees(lat,meridian.degrees);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns06",success);  }}  }
class C{  public Long deleteAppointment(String SID,Long appointmentId,Long language_id) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return appointmentLogic.deleteAppointment(appointmentId,users_id,language_id);    } else     if (authLevelManagement.checkUserLevel(user_level)) {      Appointment appointment=appointmentLogic.getAppointMentById(appointmentId);      if (!appointment.getUserId().getUser_id().equals(users_id)) {        throw new AxisFault("The Appointment cannot be deleted by the given user");      }      return appointmentLogic.deleteAppointment(appointmentId,users_id,language_id);    }  } catch (  Exception err) {    log.error("[deleteAppointment]",err);    throw new AxisFault(err.getMessage());  }  return null;}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  meta=(MDKeyGenStepMeta)smi;  data=(MDKeyGenStepData)sdi;  return super.init(smi,sdi);}  }
class C{  private AbstractTask<?> chooseAfterActionTask(){  final ViewMetadata vmd=new ViewMetadata(resourceManager,resourceManager.getLiveJournal().getLastCommitTime(),this.vmd.name,resourceManager.getIndexCounters(this.vmd.name));{    final ScatterSplitConfiguration ssc=vmd.indexMetadata.getScatterSplitConfiguration();    if ((vmd.getIndexPartitionCount() == 1L) && resourceManager.scatterSplitEnabled && ssc.isEnabled()&& vmd.compactView&& vmd.getPercentOfSplit() >= ssc.getPercentOfSplitThreshold()) {      final UUID[] moveTargets=getScatterSplitTargets(ssc);      if (moveTargets != null) {        final int nsplits=ssc.getIndexPartitionCount() == 0 ? (2 * moveTargets.length) : ssc.getIndexPartitionCount();        if (log.isInfoEnabled())         log.info("will scatter: " + vmd);        return new ScatterSplitTask(vmd,nsplits,moveTargets);      }    }  }  if (vmd.isTailSplit() && false) {    if (log.isInfoEnabled())     log.info("Will tailSpl" + vmd.name);    return new SplitTailTask(vmd,null);  }  if (vmd.getPercentOfSplit() > 1.0) {    if (log.isInfoEnabled())     log.info("will split  : " + vmd);    return new SplitIndexPartitionTask(vmd,(UUID)null);  }  if (resourceManager.joinsEnabled && vmd.pmd.getRightSeparatorKey() != null && vmd.getPercentOfSplit() < resourceManager.percentOfJoinThreshold) {    final String scaleOutIndexName=vmd.indexMetadata.getName();    final PartitionLocator rightSiblingLocator=getRightSiblingLocator(scaleOutIndexName,vmd.commitTime);    if (rightSiblingLocator != null) {      final UUID targetDataServiceUUID=rightSiblingLocator.getDataServiceUUID();      final String[] resources=new String[2];      resources[0]=DataService.getIndexPartitionName(scaleOutIndexName,vmd.pmd.getPartitionId());      resources[1]=DataService.getIndexPartitionName(scaleOutIndexName,rightSiblingLocator.getPartitionId());      if (resourceManager.getDataServiceUUID().equals(targetDataServiceUUID)) {        if (log.isInfoEnabled())         log.info("Will JOIN: " + Arrays.toString(resources));        final String rightSiblingName=DataService.getIndexPartitionName(scaleOutIndexName,rightSiblingLocator.getPartitionId());        final ViewMetadata vmd2=new ViewMetadata(resourceManager,vmd.commitTime,rightSiblingName,resourceManager.getIndexCounters(rightSiblingName));        return new JoinIndexPartitionTask(resourceManager,vmd.commitTime,resources,new ViewMetadata[]{vmd,vmd2});      } else {        if (log.isInfoEnabled()) {          String targetDataServiceName;          try {            targetDataServiceName=resourceManager.getFederation().getDataService(targetDataServiceUUID).getServiceName();          } catch (          Throwable t) {            targetDataServiceName=targetDataServiceUUID.toString();          }          log.info("willMoveToJoinWithRightSibling" + "( " + vmd.name + " -> "+ targetDataServiceName+ ", leftSibling="+ resources[0]+ ", rightSibling="+ resources[1]+ ")");        }        return new MoveTask(vmd,targetDataServiceUUID);      }    }  }  ILoadBalancerService loadBalancerService=null;  if (vmd.getPercentOfSplit() < resourceManager.maximumMovePercentOfSplit && resourceManager.maximumMovesPerTarget != 0 && resourceManager.getLiveJournal().getName2Addr().rangeCount() > resourceManager.minimumActiveIndexPartitions && (loadBalancerService=getLoadBalancerService()) != null && shouldMove(loadBalancerService)) {    final UUID sourceServiceUUID=resourceManager.getDataServiceUUID();    final UUID targetDataServiceUUID=getMoveTarget(sourceServiceUUID,loadBalancerService);    if (targetDataServiceUUID != null) {      if (log.isInfoEnabled()) {        String targetDataServiceName;        try {          targetDataServiceName=resourceManager.getFederation().getDataService(targetDataServiceUUID).getServiceName();        } catch (        Throwable t) {          targetDataServiceName=targetDataServiceUUID.toString();        }        log.info("willMove" + "( " + vmd.name + " -> "+ targetDataServiceName+ ")");      }      return new MoveTask(vmd,targetDataServiceUUID);    }  }  return null;}  }
class C{  @DSComment("General android operation, no security concern") @DSSafe(DSCat.OS_GENERAL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.678 -0500",hash_original_method="1D27A71B873F6C05FF2DA5D8C133ED30",hash_generated_method="A72CCF4B5AF9FDD5731F350455BAC101") @Deprecated public void addPreferencesFromResource(int preferencesResId){  requirePreferenceManager();  setPreferenceScreen(mPreferenceManager.inflateFromResource(this,preferencesResId,getPreferenceScreen()));}  }
class C{  public static void compress(byte[] bytes,int off,int len,DataOutput out,HashTable ht) throws IOException {  final int base=off;  final int end=off + len;  int anchor=off++;  if (len > LAST_LITERALS + MIN_MATCH) {    final int limit=end - LAST_LITERALS;    final int matchLimit=limit - MIN_MATCH;    ht.reset(len);    final int hashLog=ht.hashLog;    final PackedInts.Mutable hashTable=ht.hashTable;    main:     while (off <= limit) {      int ref;      while (true) {        if (off >= matchLimit) {          break main;        }        final int v=readInt(bytes,off);        final int h=hash(v,hashLog);        ref=base + (int)hashTable.get(h);        assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();        hashTable.set(h,off - base);        if (off - ref < MAX_DISTANCE && readInt(bytes,ref) == v) {          break;        }        ++off;      }      final int matchLen=MIN_MATCH + commonBytes(bytes,ref + MIN_MATCH,off + MIN_MATCH,limit);      encodeSequence(bytes,anchor,ref,off,matchLen,out);      off+=matchLen;      anchor=off;    }  }  final int literalLen=end - anchor;  assert literalLen >= LAST_LITERALS || literalLen == len;  encodeLastLiterals(bytes,anchor,end - anchor,out);}  }
class C{  @Override default FutureOperations<T> futureOperations(final Executor exec){  return reactiveSeq().futureOperations(exec);}  }
class C{  public Group emptyClone(){  try {    Subpopulation p=(Subpopulation)clone();    p.species=species;    p.individuals=new Individual[individuals.length];    return p;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static Tuple median(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMedianRow());  } else {    return median(tuples.tuples(),field,cmp);  }}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  public void testBug13601() throws Exception {  if (versionMeetsMinimum(5,0)) {    createTable("testBug13601","(field1 BIGINT NOT NULL, field2 BIT default 0 NOT NULL) ENGINE=MyISAM");    this.rs=this.stmt.executeQuery("SELECT field1, field2 FROM testBug13601 WHERE 1=-1");    ResultSetMetaData rsmd=this.rs.getMetaData();    assertEquals(Types.BIT,rsmd.getColumnType(2));    assertEquals(Boolean.class.getName(),rsmd.getColumnClassName(2));    this.rs=this.conn.prepareStatement("SELECT field1, field2 FROM testBug13601 WHERE 1=-1").executeQuery();    rsmd=this.rs.getMetaData();    assertEquals(Types.BIT,rsmd.getColumnType(2));    assertEquals(Boolean.class.getName(),rsmd.getColumnClassName(2));  }}  }
class C{  void memberEnter(List<? extends JCTree> trees,Env<AttrContext> env){  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   memberEnter(l.head,env);}  }
class C{  protected void configurePipeline(){  if (fCurrentDVFactory != fDatatypeValidatorFactory) {    fCurrentDVFactory=fDatatypeValidatorFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fDTDScanner) {    fCurrentDTDScanner=fDTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fDTDProcessor);  }  fDTDScanner.setDTDHandler(fDTDProcessor);  fDTDProcessor.setDTDSource(fDTDScanner);  fDTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fDTDProcessor);  }  fDTDScanner.setDTDContentModelHandler(fDTDProcessor);  fDTDProcessor.setDTDContentModelSource(fDTDScanner);  fDTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fDTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fNamespaceScanner) {      fCurrentScanner=fNamespaceScanner;      setProperty(DOCUMENT_SCANNER,fNamespaceScanner);      setProperty(DTD_VALIDATOR,fDTDValidator);    }    fNamespaceScanner.setDTDValidator(fDTDValidator);    fNamespaceScanner.setDocumentHandler(fDTDValidator);    fDTDValidator.setDocumentSource(fNamespaceScanner);    fDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fDTDValidator);    }    fLastComponent=fDTDValidator;  } else {    if (fNonNSScanner == null) {      fNonNSScanner=new XMLDocumentScannerMMImpl();      fNonNSDTDValidator=new XMLDTDValidator();      addComponent((XMLComponent)fNonNSScanner);      addComponent((XMLComponent)fNonNSDTDValidator);    }    if (fCurrentScanner != fNonNSScanner) {      fCurrentScanner=fNonNSScanner;      setProperty(DOCUMENT_SCANNER,fNonNSScanner);      setProperty(DTD_VALIDATOR,fNonNSDTDValidator);    }    fNonNSScanner.setDocumentHandler(fNonNSDTDValidator);    fNonNSDTDValidator.setDocumentSource(fNonNSScanner);    fNonNSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fNonNSDTDValidator);    }    fLastComponent=fNonNSDTDValidator;  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      setProperty(SCHEMA_VALIDATOR,fSchemaValidator);      addCommonComponent(fSchemaValidator);      fSchemaValidator.reset(this);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  public void addView(String viewString,String attributeName){  if (!(viewString.trim().length() == 0)) {    cfgBuffer.append(COMMENT).append("VIEW definition").append(CR);    String id=ModelWriter.getValidIdentifier(VIEW_SCHEME);    cfgBuffer.append("VIEW").append(CR).append(id).append(CR);    tlaBuffer.append(COMMENT).append("VIEW definition ").append(ATTRIBUTE).append(attributeName).append(CR);    tlaBuffer.append(id).append(DEFINES).append(CR).append(viewString).append(CR);    tlaBuffer.append(SEP).append(CR).append(CR);  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    VostroSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public static String explode(Collection<String> collection,String delimiter){  StringBuilder sb=new StringBuilder();  if (!collection.isEmpty()) {    Iterator<String> i=collection.iterator();    sb.append(i.next());    while (i.hasNext()) {      sb.append(delimiter);      sb.append(i.next());    }  }  return sb.toString();}  }
class C{  private static Boolean isValidIPV6(final String ipAddress){  boolean status=false;  if (StringUtils.isNotEmpty(ipAddress)) {    status=InetAddressUtils.isIPv6Address(ipAddress);  }  return status;}  }
class C{  private void unregister(){  GridDhtLocalPartition[] arr=parts.get();  if (!F.isEmpty(arr) && parts.compareAndSet(arr,EMPTY)) {    for (int i=arr.length - 1; i >= 0; i--) {      GridDhtLocalPartition part=arr[i];      part.removeReservation(this);      tryEvict(part);    }  }  CI1<GridDhtPartitionsReservation> u=unpublish.get();  if (u != null && u != NO_OP && unpublish.compareAndSet(u,NO_OP))   u.apply(this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  NodeList addressList;  NodeList addressChildList;  Element element;  EntityReference entRef2;  EntityReference entRefImp2;  EntityReference entRef3;  EntityReference entRefImp3;  String nodeName2;  String nodeName3;  String nodeNameImp2;  String nodeNameImp3;  NodeList nodes;  Node nodeImp3;  Node nodeImp2;  String nodeValueImp2;  String nodeValueImp3;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  addressList=doc.getElementsByTagName("address");  element=(Element)addressList.item(1);  addressChildList=element.getChildNodes();  entRef2=(EntityReference)addressChildList.item(0);  entRef3=(EntityReference)addressChildList.item(2);  entRefImp2=(EntityReference)docImp.importNode(entRef2,true);  entRefImp3=(EntityReference)docImp.importNode(entRef3,false);  nodeName2=entRef2.getNodeName();  nodeName3=entRef3.getNodeName();  nodeNameImp2=entRefImp2.getNodeName();  nodeNameImp3=entRefImp3.getNodeName();  assertEquals("documentimportnode21_Ent2NodeName",nodeName2,nodeNameImp2);  assertEquals("documentimportnode21_Ent3NodeName",nodeName3,nodeNameImp3);  entRefImp2=(EntityReference)doc.importNode(entRef2,true);  entRefImp3=(EntityReference)doc.importNode(entRef3,false);  nodes=entRefImp2.getChildNodes();  nodeImp2=nodes.item(0);  nodeValueImp2=nodeImp2.getNodeValue();  nodes=entRefImp3.getChildNodes();  nodeImp3=nodes.item(0);  nodeValueImp3=nodeImp3.getNodeValue();  assertEquals("documentimportnode21_Ent2NodeValue","1900 Dallas Road",nodeValueImp2);  assertEquals("documentimportnode21_Ent3Nodevalue","Texas",nodeValueImp3);}  }
class C{  public int compare(Object obj1,Object obj2){  if (!(obj1 instanceof SelectResults) || !(obj2 instanceof SelectResults)) {    Support.assertionFailed("The objects need to be of type SelectResults");  }  int answer=-1;  SelectResults sr1=(SelectResults)obj1;  SelectResults sr2=(SelectResults)obj2;  int sizeDifference=sr1.size() - sr2.size();  if (obj1 == obj2) {    answer=0;  } else   if (sizeDifference > 0) {    answer=1;  }  return answer;}  }
class C{  private static boolean decodeIpv4Suffix(String input,int pos,int limit,byte[] address,int addressOffset){  int b=addressOffset;  for (int i=pos; i < limit; ) {    if (b == address.length)     return false;    if (b != addressOffset) {      if (input.charAt(i) != '.')       return false;      i++;    }    int value=0;    int groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      if (c < '0' || c > '9')       break;      if (value == 0 && groupOffset != i)       return false;      value=(value * 10) + c - '0';      if (value > 255)       return false;    }    int groupLength=i - groupOffset;    if (groupLength == 0)     return false;    address[b++]=(byte)value;  }  if (b != addressOffset + 4)   return false;  return true;}  }
class C{  public void forgetVolumes(List<VolumeInfo> nativeVolumeInfoList){  s_logger.info("Request to forget volumes on VPlex at {}",_baseURI);  _discoveryMgr.forgetVolumes(nativeVolumeInfoList);}  }
class C{  public static PatternGuardExpr timerWithinMax(double seconds,int max,PatternExpr guarded){  return new PatternGuardExpr("timer","withinmax",new Expression[]{Expressions.constant(seconds),Expressions.constant(max)},guarded);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.670 -0500",hash_original_method="36F66EFD343D5849BA1CADCA9AD61546",hash_generated_method="00B5D6CFCA14C26B8E390C5A28B6B3D7") private static boolean matchIntlPrefix(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;break;}}return state == 1 || state == 3 || state == 5;}  }
class C{  public static void cursorLongToContentValues(Cursor cursor,String field,ContentValues values){  cursorLongToContentValues(cursor,field,values,field);}  }
class C{  public void testBlockingStub() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  BlockingRpcChannel mockChannel=control.createMock(BlockingRpcChannel.class);  TestService.BlockingInterface stub=TestService.newBlockingStub(mockChannel);  FooResponse fooResponse=FooResponse.newBuilder().build();  BarResponse barResponse=BarResponse.newBuilder().build();  EasyMock.expect(mockChannel.callBlockingMethod(EasyMock.same(fooDescriptor),EasyMock.same(mockController),EasyMock.same(fooRequest),EasyMock.same(FooResponse.getDefaultInstance()))).andReturn(fooResponse);  EasyMock.expect(mockChannel.callBlockingMethod(EasyMock.same(barDescriptor),EasyMock.same(mockController),EasyMock.same(barRequest),EasyMock.same(BarResponse.getDefaultInstance()))).andReturn(barResponse);  control.replay();  assertSame(fooResponse,stub.foo(mockController,fooRequest));  assertSame(barResponse,stub.bar(mockController,barRequest));  control.verify();}  }
class C{  public TranslationMemoryQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.854 -0500",hash_original_method="B2ABBABB9AAC473F130021E0A6601574",hash_generated_method="8A1EC8716B33AA9A4D523DA9D47834CF") public static void stopAllocCounting(){  VMDebug.stopAllocCounting();}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize){  this(corePoolSize,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  public static PatternEveryExpr everyFilter(Filter filter){  PatternExpr inner=new PatternFilterExpr(filter);  return new PatternEveryExpr(inner);}  }
class C{  @SuppressWarnings("unchecked") public static Counter<String> readWeights(String filename,Index<String> featureIndex){  Counter<String> wts=(Counter<String>)deserialize(filename,ClassicCounter.class,SerializationMode.BIN_GZ);  if (wts == null)   wts=new ClassicCounter<>();  if (featureIndex != null) {    for (    String key : wts.keySet()) {      featureIndex.addToIndex(key);    }  }  return wts;}  }
class C{  public void clearStack(){  mPopInProgress=true;  setAnimationEnabled(false);  FragmentManager fragmentManager=getFragmentManager();  int entryCount=fragmentManager.getBackStackEntryCount();  Log.v(TAG,String.format("clearStack()... entries [%d]",entryCount));  for (int i=0; i < entryCount; ++i) {    try {      fragmentManager.popBackStackImmediate();    } catch (    Exception exc) {      Log.e(TAG,"clearStack()",exc);    }  }  findCurrentFragment();  Log.v(TAG,"clearStack()... DONE");  setAnimationEnabled(true);  mPopInProgress=false;}  }
class C{  public void registerOptional0(String name,InvocationPlugin plugin){  plugins.register(plugin,true,allowOverwrite,declaringType,name);}  }
class C{  public boolean containsStringConstant(String value){  int index=findUtf8(value);  if (index == NOT_FOUND)   return false;  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == STRING && readValue(offsets[i]) == index)     return true;  }  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PAREN_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  protected void processPacket(Packet packet){  if (packet == null) {    return;  }  if (packetFilter == null || packetFilter.accept(packet)) {    while (!resultQueue.offer(packet)) {      resultQueue.poll();    }  }}  }
class C{  @Override public boolean onFailedToRecycleView(RecyclerView.ViewHolder holder){  return mFastAdapter.onFailedToRecycleView(holder);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void responseReceived(ContactId contact){synchronized (sInstance) {    mMsisdn=contact;    super.notify();  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);  SerialUtilities.writePaint(this.backgroundPaint,stream);}  }
class C{  public void addInvokespecial(boolean isInterface,int clazz,String name,String desc){  add(INVOKESPECIAL);  int index;  if (isInterface)   index=constPool.addInterfaceMethodrefInfo(clazz,name,desc); else   index=constPool.addMethodrefInfo(clazz,name,desc);  addIndex(index);  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  private void assertEquals(byte[] expected,byte[] actual){  assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; ++i) {    assertEquals(expected[i],actual[i]);  }}  }
class C{  private void recordUndeployed(@Nullable UUID nodeId,Collection<SharedDeployment> undeployed){  if (!F.isEmpty(undeployed))   for (  SharedDeployment d : undeployed)   d.recordUndeployed(nodeId);}  }
class C{  public Transform match(Class type) throws Exception {  Transform transform=transforms.fetch(type);  if (transform == null) {    return create(type);  }  return transform;}  }
class C{  @Override public String generateStart(){  return "";}  }
class C{  private int count(boolean[] arraySetted,byte[][] array,byte[] value){  if (value != null) {    int counter=0;    for (int i=0; i < array.length; i++) {      if (arraySetted != null && arraySetted[i] && Arrays.equals(value,array[i])) {        counter++;      }    }    return counter;  }  return 0;}  }
class C{  public ConnectionHttp(ProtocolHttp protocol,ConnectionTcp conn,long sequence){  Objects.requireNonNull(protocol);  Objects.requireNonNull(conn);  _protocol=protocol;  _conn=conn;  _sequence=sequence;  ServicesAmp ampManager=conn.port().services();  _outProxy=ampManager.newService(new OutHttpProxyImpl(this)).name(conn.toString()).as(OutHttpProxy.class);}  }
class C{  public double impliedVolatility(final double price,final GeneralizedBlackScholesProcess process){  return impliedVolatility(price,process,1.0e-4,100,1.0e-7,4.0);}  }
class C{  public Thread(final TargetProcessThread thread){  Preconditions.checkNotNull(thread,"Error: Thread argument can not be null");  m_thread=thread;  m_thread.addListener(m_listener);}  }
class C{  public void replaceSelection(String content){  Document doc=getDocument();  if (doc != null) {    try {      boolean composedTextSaved=saveComposedText(caret.getDot());      int p0=Math.min(caret.getDot(),caret.getMark());      int p1=Math.max(caret.getDot(),caret.getMark());      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(p0,p1 - p0,content,null);      } else {        if (p0 != p1) {          doc.remove(p0,p1 - p0);        }        if (content != null && content.length() > 0) {          doc.insertString(p0,content,null);        }      }      if (composedTextSaved) {        restoreComposedText();      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);    }  }}  }
class C{  public PostProcessor(Rectangle viewport,boolean useDepth,boolean useAlphaChannel,boolean use32Bits){  this((int)viewport.width,(int)viewport.height,useDepth,useAlphaChannel,use32Bits,TextureWrap.ClampToEdge,TextureWrap.ClampToEdge);  setViewport(viewport);}  }
class C{  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req){  SolrParams solrParams=req.getParams();  FieldAnalysisRequest analysisRequest=new FieldAnalysisRequest();  boolean useDefaultSearchField=true;  if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {    analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(",")));    useDefaultSearchField=false;  }  if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {    analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(",")));    useDefaultSearchField=false;  }  if (useDefaultSearchField) {    analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());  }  analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY,solrParams.get(CommonParams.Q)));  String value=solrParams.get(AnalysisParams.FIELD_VALUE);  if (analysisRequest.getQuery() == null && value == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"One of analysis.fieldvalue, q, or analysis.query parameters must be specified");  }  Iterable<ContentStream> streams=req.getContentStreams();  if (streams != null) {    for (    ContentStream stream : streams) {      Reader reader=null;      try {        reader=stream.getReader();        value=IOUtils.toString(reader);      } catch (      IOException e) {      } finally {        IOUtils.closeQuietly(reader);      }      break;    }  }  analysisRequest.setFieldValue(value);  analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH,false));  return analysisRequest;}  }
class C{  public static void writeSpatialGridTable(SpatialGrid grid,String fileName){  log.info("Writing spatial grid table " + fileName + " ...");  SpatialGridTableWriter sgTableWriter=new SpatialGridTableWriter();  try {    sgTableWriter.write(grid,fileName);    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected BasicBeanDescription _findCachedDesc(JavaType type){  Class<?> cls=type.getRawClass();  if (cls == String.class) {    return STRING_DESC;  }  if (cls == Boolean.TYPE) {    return BOOLEAN_DESC;  }  if (cls == Integer.TYPE) {    return INT_DESC;  }  if (cls == Long.TYPE) {    return LONG_DESC;  }  return null;}  }
class C{  public boolean hasPrivateKey(){  return null != this.keyPair && this.keyPair.hasPrivateKey();}  }
class C{  public Sampletable2Example(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.035 -0500",hash_original_method="C43D87ABB966C2154325453E86772F9C",hash_generated_method="92BB0A2A02A372271A864A9F99200768") private void handleArgumentField(int begin,int end,int argIndex,FieldPosition position,List<FieldContainer> fields){  if (fields != null) {    fields.add(new FieldContainer(begin,end,Field.ARGUMENT,Integer.valueOf(argIndex)));  } else {    if (position != null && position.getFieldAttribute() == Field.ARGUMENT && position.getEndIndex() == 0) {      position.setBeginIndex(begin);      position.setEndIndex(end);    }  }}  }
class C{  @Override public Intent createBookmarkCurrentPageIntent(boolean editExisting){  WebView w=getCurrentTopWebView();  if (w == null) {    return null;  }  Intent i=new Intent(mActivity,AddBookmarkPage.class);  i.putExtra(BrowserContract.Bookmarks.URL,w.getUrl());  i.putExtra(BrowserContract.Bookmarks.TITLE,w.getTitle());  String touchIconUrl=getCurrentTab().getTouchIconUrl();  if (touchIconUrl != null) {    i.putExtra(AddBookmarkPage.TOUCH_ICON_URL,touchIconUrl);    WebSettings settings=w.getSettings();    if (settings != null) {      i.putExtra(AddBookmarkPage.USER_AGENT,settings.getUserAgentString());    }  }  i.putExtra(BrowserContract.Bookmarks.FAVICON,w.getFavicon());  if (editExisting) {    i.putExtra(AddBookmarkPage.CHECK_FOR_DUPE,true);  }  i.putExtra("gravity",Gravity.RIGHT | Gravity.TOP);  return i;}  }
class C{  public double[] greatCircleLineDoubles(){  return toDoubles(greatCircleLineShape()).get(0);}  }
class C{  public void init(int width,int height){  Parameters params;  if (0 < glName) {    params=getParameters();  } else {    params=new Parameters();  }  init(width,height,params);}  }
class C{  public static void unescapeCsv(Writer out,String str) throws IOException {  if (str == null) {    return;  }  if (str.length() < 2) {    out.write(str);    return;  }  if (str.charAt(0) != CSV_QUOTE || str.charAt(str.length() - 1) != CSV_QUOTE) {    out.write(str);    return;  }  String quoteless=str.substring(1,str.length() - 1);  if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {    str=StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR);  }  out.write(str);}  }
class C{  private static void copySecurityAttributes(WindowsPath source,WindowsPath target,boolean followLinks) throws IOException {  String path=WindowsLinkSupport.getFinalPath(source,followLinks);  WindowsSecurity.Privilege priv=WindowsSecurity.enablePrivilege("SeRestorePrivilege");  try {    int request=(DACL_SECURITY_INFORMATION | OWNER_SECURITY_INFORMATION | GROUP_SECURITY_INFORMATION);    NativeBuffer buffer=WindowsAclFileAttributeView.getFileSecurity(path,request);    try {      try {        SetFileSecurity(target.getPathForWin32Calls(),request,buffer.address());      } catch (      WindowsException x) {        x.rethrowAsIOException(target);      }    }  finally {      buffer.release();    }  }  finally {    priv.drop();  }}  }
class C{  public void testParseAndSerialize() throws InvalidProtocolBufferException {  UnittestProto.TestAllTypes tV2=UnittestProto.TestAllTypes.parseFrom(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8);  ByteString bytes=tV2.toByteString();  assertEquals(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8,bytes);  tV2.getOptionalString();  bytes=tV2.toByteString();  assertEquals(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8,bytes);}  }
class C{  @Deprecated public final CC growY(Float w){  ver.setGrow(w);  return this;}  }
class C{  public boolean project(double x,double y,double z,Viewport viewport,Vec3 result){  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","project","missingViewport"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","project","missingResult"));  }  double[] m=this.m;  double sx=m[0] * x + m[1] * y + m[2] * z + m[3];  double sy=m[4] * x + m[5] * y + m[6] * z + m[7];  double sz=m[8] * x + m[9] * y + m[10] * z + m[11];  double sw=m[12] * x + m[13] * y + m[14] * z + m[15];  if (sw == 0) {    return false;  }  sx/=sw;  sy/=sw;  sz/=sw;  if (sz < -1 || sz > 1) {    return false;  }  sx=sx * 0.5 + 0.5;  sy=sy * 0.5 + 0.5;  sz=sz * 0.5 + 0.5;  sx=sx * viewport.width + viewport.x;  sy=sy * viewport.height + viewport.y;  result.x=sx;  result.y=sy;  result.z=sz;  return true;}  }
class C{  public void testSymmetricOperations(){  final int NTRIALS=30;  final int CAPACITY=20;  Random r=new Random();  for (int i=0; i < NTRIALS; i++) {    doSymmetricOperationsTest(r,new TxDag(CAPACITY));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.861 -0500",hash_original_method="98853BED73C436EB42A5D4B84EE5AAA8",hash_generated_method="59D06008122C7C6A54BC83DA16FFA3E1") private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  public QueueClient(Vertx vertx,MonitoringHandler monitoringHandler){  this.vertx=vertx;  this.monitoringHandler=monitoringHandler;}  }
class C{  private void _testSingleQuotesEnabled(boolean useStream) throws Exception {  JsonFactory f=new JsonFactory();  f.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES,true);  String JSON="{ 'a' : 1, \"foobar\": 'b', '_abcde1234':'d', '\"' : '\"\"', '':'' }";  JsonParser jp=useStream ? createParserUsingStream(f,JSON,"UTF-8") : createParserUsingReader(f,JSON);  assertToken(JsonToken.START_OBJECT,jp.nextToken());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("a",jp.getText());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals("1",jp.getText());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("foobar",jp.getText());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("b",jp.getText());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("_abcde1234",jp.getText());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("d",jp.getText());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("\"",jp.getText());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertToken(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("",jp.getText());  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("",jp.getText());  assertToken(JsonToken.END_OBJECT,jp.nextToken());}  }
class C{  public ButtonClickerObserver(final ButtonClickerActivity buttonClickerActivity){  super(buttonClickerActivity);  this.baseActivity=buttonClickerActivity;}  }
class C{  final int findSortIndex(MarkData o){  int lower=0;  int upper=marks.size() - 1;  int mid=0;  if (upper == -1) {    return 0;  }  int cmp;  MarkData last=marks.elementAt(upper);  cmp=compare(o,last);  if (cmp > 0)   return upper + 1;  while (lower <= upper) {    mid=lower + ((upper - lower) / 2);    MarkData entry=marks.elementAt(mid);    cmp=compare(o,entry);    if (cmp == 0) {      return mid;    } else     if (cmp < 0) {      upper=mid - 1;    } else {      lower=mid + 1;    }  }  return (cmp < 0) ? mid : mid + 1;}  }
class C{  private void displayMessage(final BaseMqttMessage message){  displayMessage(new SimpleMqttMessage(message.getPayload(),message.getTopic(),message.getQoS(),message.isRetained()));}  }
class C{  @NamespacePermission(fields="#request.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectDefinition createBusinessObjectDefinition(BusinessObjectDefinitionCreateRequest request){  validateBusinessObjectDefinitionCreateRequest(request);  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(request.getNamespace());  DataProviderEntity dataProviderEntity=dataProviderDaoHelper.getDataProviderEntity(request.getDataProviderName());  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(request.getNamespace(),request.getBusinessObjectDefinitionName());  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(businessObjectDefinitionKey);  if (businessObjectDefinitionEntity != null) {    throw new AlreadyExistsException(String.format("Unable to create business object definition with name \"%s\" because it already exists for namespace \"%s\".",businessObjectDefinitionKey.getBusinessObjectDefinitionName(),businessObjectDefinitionKey.getNamespace()));  }  businessObjectDefinitionEntity=createBusinessObjectDefinitionEntity(request,namespaceEntity,dataProviderEntity);  return createBusinessObjectDefinitionFromEntity(businessObjectDefinitionEntity);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__LIST_1:    setList_1((Boolean)newValue);  return;case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__NAME_1:setName_1((String)newValue);return;case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__TYPE_1:setType_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ContainerNode addNewReturnGroup(String labelText,String identifier,FpPanel targetPanel,boolean moveable){  setNotSaved();  int x=getNextXCoord(targetPanel.getNodes(),identifier);  SimpleTextNode text=new SimpleTextNode(125,25,new Point(0,0),labelText);  text.setFontColor(Controller.GROUP_FONT_COLOR);  Collection<DefaultNode> subNodes=new ArrayList<>();  subNodes.add(text);  ContainerNode containerNode=new ContainerNode(subNodes,new Point(x,5));  containerNode.setName(identifier);  containerNode.setBorder(4);  containerNode.setGradColors(Controller.GROUP_LIGHT_COLOR,Controller.GROUP_DARK_COLOR);  containerNode.setMovable(moveable);  containerNode.setIsCloseable(true);  containerNode.addDefaultNodeFilter(null);  targetPanel.addNode(containerNode);  targetPanel.resize();  return containerNode;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  public ZoneAttributes(StendhalRPZone zone){  attr.setID(RPObject.INVALID_ID);  setBaseName(zone.getName());  content.cacheable=false;  this.zone=zone;}  }
class C{  public boolean canFlush(){  return canFlushWriter;}  }
class C{  public static void hideViewIfVisible(View view){  if (view != null) {    if (view.getVisibility() == View.VISIBLE) {      hideView(view);    }  }}  }
class C{  private boolean evalDP(final double x,final double y,final ISample dp1,final ISample dp2){  if (!xAxis.getRange().inRange(x) || !yAxis.getRange().inRange(y))   return false;  if (!new Range(dp1.getXValue(),dp2.getXValue()).inRange(x) || !new Range(dp1.getYValue(),dp2.getYValue()).inRange(y))   return false;  final ISample dp=new Sample(x,y);  if (dp.equals(dp1) || dp.equals(dp2))   return false;  return true;}  }
class C{  public RequestLine parseRequestLine(final CharArrayBuffer buffer,final ParserCursor cursor) throws ParseException {  Log.d(tag,"airplay in MyLineParse, parseRequestLine(x,x) buffer=" + buffer.toString());  if (buffer.toString().startsWith("HTTP/1.1 200 OK")) {    return super.createRequestLine("200","200",createProtocolVersion(1,0));  } else {    return super.parseRequestLine(buffer,cursor);  }}  }
class C{  public void afterProcessMessage(DistributionManager dm,DistributionMessage message){}  }
class C{  public void plusEquals(Complex c){  real+=c.real;  imag+=c.imag;}  }
class C{  public SimpleUser(String username){  setIdentifier(username);}  }
class C{  public T[] toArray(T[] type){  System.getProperties();  if (type.length > maxSize) {    throw new IllegalArgumentException("Size of array passed in cannot be greater than " + maxSize);  }  int curIndex=getCurrentIndex();  for (int k=0; k < type.length; k++) {    int index=getIndex(curIndex - k);    type[k]=circularArray[index].get();  }  return type;}  }
class C{  protected static void cleanup(){  listener=null;  loader=null;  writer=null;}  }
class C{  public static void assertTrue(boolean expression,String message){  if (!expression) {    throw new IllegalArgumentException("assertion failed: " + message);  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(CONFIGURATION.getColorModel())) {    return image;  }  BufferedImage compatibleImage=CONFIGURATION.createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public OrderCustomerList(DataLogicCustomers dlCustomers,AppView app,TicketsEditor panelticket){  this.application=app;  this.panelticket=panelticket;  this.dataLogicCustomers=dlCustomers;  this.dataLogicReceipts=(DataLogicReceipts)application.getBean("uk.chromis.pos.sales.DataLogicReceipts");  tnbbutton=new ThumbNailBuilder(90,98);  initComponents();}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  public boolean hasComponent(int blockId){  for (int i=0; i < length; i++) {    if (blockIdList[i] == blockId) {      return true;    }  }  return false;}  }
class C{  private void sendMessageWithoutPayload(BeanMessageID type){  sendMessage(type,(Buffer)null);}  }
class C{  public MqttScriptIO more(){  return scriptIO;}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForCssUrlTag instance=new ForCssUrlTag();  String value="\\';";  String expected="\\5c\\27;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  private boolean isCollectionsPageEmpty(Eml eml){  for (  String preservationMethod : eml.getSpecimenPreservationMethods()) {    if (!Strings.isNullOrEmpty(preservationMethod)) {      return false;    }  }  for (  Collection collection : eml.getCollections()) {    boolean isCollectionEmpty=isCollectionEmpty(collection);    if (!isCollectionEmpty) {      return false;    }  }  for (  JGTICuratorialUnit unit : eml.getJgtiCuratorialUnits()) {    boolean isUnitEmpty=isJGTICuratorialUnitEmpty(unit);    if (!isUnitEmpty) {      return false;    }  }  return true;}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  private void pullUpActivationObjectVariables(int depth,int isolateId) throws NotSuspendedException, NoResponseException, NotConnectedException {  DValue frame=m_manager.getValue(Value.BASE_ID - depth,isolateId);  if (frame == null)   return;  DStackContext context=m_manager.getFrame(depth,isolateId);  DVariable[] frameVars=(DVariable[])frame.getMembers(this);  Map<String,DVariable> varmap=new LinkedHashMap<String,DVariable>(frameVars.length);  List<DVariable> activationObjects=new ArrayList<DVariable>();  Pattern activationObjectNamePattern=Pattern.compile("^.*\\$\\d+$");  for (int i=0; i < frameVars.length; ++i) {    DVariable member=frameVars[i];    Matcher matcher=activationObjectNamePattern.matcher(member.getName());    if (matcher.matches())     activationObjects.add(member); else     varmap.put(member.getName(),member);  }  if (activationObjects.size() == 0)   return;  for (int i=0; i < activationObjects.size(); ++i) {    DVariable activationObject=activationObjects.get(i);    DVariable[] activationMembers=(DVariable[])activationObject.getValue().getMembers(this);    for (int j=0; j < activationMembers.length; ++j) {      DVariable member=activationMembers[j];      int attributes=member.getAttributes();      if ((attributes & VariableAttribute.IS_STATIC) != 0)       continue;      attributes&=~(VariableAttribute.PRIVATE_SCOPE | VariableAttribute.PROTECTED_SCOPE | VariableAttribute.NAMESPACE_SCOPE);      attributes|=VariableAttribute.PUBLIC_SCOPE;      member.setAttributes(attributes);      String name=member.getName();      DVariable oldvar=varmap.get(name);      int vartype;      if (oldvar != null)       vartype=oldvar.getAttributes() & (VariableAttribute.IS_ARGUMENT | VariableAttribute.IS_LOCAL); else       vartype=VariableAttribute.IS_LOCAL;      member.setAttributes(member.getAttributes() | vartype);      varmap.put(name,member);    }    context.convertLocalToActivationObject(activationObject);  }  for (  DVariable var : varmap.values()) {    frame.addMember(var);    if (var.isAttributeSet(VariableAttribute.IS_LOCAL)) {      context.addLocal(var);    } else     if (var.isAttributeSet(VariableAttribute.IS_ARGUMENT)) {      if (var.getName().equals("this"))       context.setThis(var); else       context.addArgument(var);    }  }}  }
class C{  void registerMediaComponent(Component mediaCmp){  if (mediaComponents == null) {    mediaComponents=new ArrayList<Component>();  }  if (!mediaComponents.contains(mediaCmp)) {    mediaComponents.add(mediaCmp);  }}  }
class C{  public String createWorkFlowforobjects(){  LOGGER.info("createWorkFlowforobjects Method is called");  final List<WorkFlowMatrixDetails> matrixList=getWorkFlowMatrixDetails();  Collections.sort(matrixList);  prepareWorkFlowMatrixDetails(matrixList);  setDepartmentSelected(getDepartment());  setAdditionalRuleSelected(getAdditionalRule());  setMode(VIEW);  LOGGER.info("createWorkFlowforobjects Method is ended");  return NEW;}  }
class C{  public ServerBuilder defaultMaxRequestLength(long defaultMaxRequestLength){  validateDefaultMaxRequestLength(defaultMaxRequestLength);  this.defaultMaxRequestLength=defaultMaxRequestLength;  return this;}  }
class C{  public void removeHandler(Object handler) throws Exception {  if (handler == null) {    return;  }  if (removeHandlerMethod == null) {    throw new ContainerException("No Jetty instance to deploy to");  }  removeHandlerMethod.invoke(contextHandlers,new Object[]{handler});}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public SingleConnectionTransactionManager(@NotNull Connection connection,boolean insideForeignTransaction){  this.connection=requireNonNull(connection);  currentTransaction=insideForeignTransaction ? Optional.of(new DefaultTransaction(connection)) : Optional.empty();}  }
class C{  public static void saveStringToPreference(Context context,String key,String value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (null == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putString(key,value).apply();  }}  }
class C{  public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  void removeAt(final int removeIndex){  final Object[] items=this.items;  if (removeIndex == takeIndex) {    items[takeIndex]=null;    takeIndex=inc(takeIndex);    count--;    if (itrs != null)     itrs.elementDequeued();  } else {    final int putIndex=this.putIndex;    for (int i=removeIndex; ; ) {      int next=inc(i);      if (next != putIndex) {        items[i]=items[next];        i=next;      } else {        items[i]=null;        this.putIndex=i;        break;      }    }    count--;    if (itrs != null)     itrs.removedAt(removeIndex);  }  notFull.signal();}  }
class C{  private static boolean hitTest(float x,float y,View view){  int location[]=new int[2];  view.getLocationOnScreen(location);  int viewX=location[0];  int viewY=location[1];  return (x > viewX && x < (viewX + view.getWidth())) && (y > viewY && y < (viewY + view.getHeight()));}  }
class C{  public Boolean isSmcPresent(){  return smcPresent;}  }
class C{  @Override public void scrollToRow(@NotNull RowPosition position){  ResultSetRow currentRow=controller.getCurrentRow();  ResultSetModel model=controller.getModel();switch (position) {case FIRST:    if (model.getRowCount() > 0) {      controller.setCurrentRow(model.getRow(0));    }  break;case PREVIOUS:if (currentRow != null && currentRow.getVisualNumber() > 0) {  controller.setCurrentRow(model.getRow(currentRow.getVisualNumber() - 1));}break;case NEXT:if (currentRow != null && currentRow.getVisualNumber() < model.getRowCount() - 1) {controller.setCurrentRow(model.getRow(currentRow.getVisualNumber() + 1));}break;case LAST:if (currentRow != null) {controller.setCurrentRow(model.getRow(model.getRowCount() - 1));}break;case CURRENT:break;}if (controller.isRecordMode()) {refreshData(true,false,false);} else {getControl().redraw();}controller.updateStatusMessage();controller.updateEditControls();}  }
class C{  public static void removeNetworkInformationFromPlans(Population population){  for (  Person person : population.getPersons().values()) {    for (    Plan plan : person.getPlans()) {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Activity) {          Activity activity=(Activity)pe;          activity.setLinkId(null);        }        if (pe instanceof Leg) {          Leg leg=(Leg)pe;          leg.setRoute(null);        }      }    }  }}  }
class C{  public SolrCore create(CoreDescriptor cd){  return create(cd,true);}  }
class C{  public boolean isPreformattedTag(String qualifiedName){  return (preformattedTags != null) && (preformattedTags.contains(qualifiedName.toUpperCase()));}  }
class C{  public ResponseFromManager generateUpdateExecuteTask(ParallelTask task){  ParallelTaskManager.getInstance().addTaskToInProgressMap(task.getTaskId(),task);  logger.info("Added task {} to the running inprogress map...",task.getTaskId());  boolean useReplacementVarMap=false;  boolean useReplacementVarMapNodeSpecific=false;  Map<String,StrStrMap> replacementVarMapNodeSpecific=null;  Map<String,String> replacementVarMap=null;  ResponseFromManager batchResponseFromManager=null;switch (task.getRequestReplacementType()) {case UNIFORM_VAR_REPLACEMENT:    useReplacementVarMap=true;  useReplacementVarMapNodeSpecific=false;replacementVarMap=task.getReplacementVarMap();break;case TARGET_HOST_SPECIFIC_VAR_REPLACEMENT:useReplacementVarMap=false;useReplacementVarMapNodeSpecific=true;replacementVarMapNodeSpecific=task.getReplacementVarMapNodeSpecific();break;case NO_REPLACEMENT:useReplacementVarMap=false;useReplacementVarMapNodeSpecific=false;break;default :logger.error("error request replacement type. default as no replacement");}InternalDataProvider dp=InternalDataProvider.getInstance();dp.genNodeDataMap(task);VarReplacementProvider.getInstance().updateRequestWithReplacement(task,useReplacementVarMap,replacementVarMap,useReplacementVarMapNodeSpecific,replacementVarMapNodeSpecific);batchResponseFromManager=sendTaskToExecutionManager(task);removeTaskFromInProgressMap(task.getTaskId());logger.info("Removed task {} from the running inprogress map... " + ". This task should be garbage collected if there are no other pointers.",task.getTaskId());return batchResponseFromManager;}  }
class C{  @PostConstruct protected void init(){  serializationManager=serializationManagerProvider.createSerializer();}  }
class C{  private void dumpCommand(String[] cmdBuffer){  if (cmdBuffer != null) {    StringBuffer sb=new StringBuffer("Operating system command array: \n");    for (    String value : cmdBuffer) {      sb.append("\"").append(value).append("\" ");    }    logger.info(sb);  }}  }
class C{  public Observable<Nothing> vote(FeedItem item,Vote vote){  logger.info("Voting feed item {} {}",item.id(),vote);  Track.votePost(vote);  AsyncTask.execute(null);  return api.vote(null,item.id(),vote.getVoteValue());}  }
class C{  public static double skew(double moment3,double standardDeviation){  return moment3 / (standardDeviation * standardDeviation * standardDeviation);}  }
class C{  public PcLocalRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.180 -0400",hash_original_method="FBBC561E9493F2B7846AFE590CD5B4BF",hash_generated_method="CE282376FB6D4EC406D4F6371AB255F4") public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public void update(){  TreeViewer viewer=getTreeViewer();  if (viewer != null) {    Control control=viewer.getControl();    if (control != null && !control.isDisposed()) {      viewer.removeSelectionChangedListener(this);      control.setRedraw(false);      viewer.setInput(fInput);      control.setRedraw(true);      selectNode(fEditor.getCursorLine(),true);      viewer.addSelectionChangedListener(this);    }  }}  }
class C{  public String toString(){  return "ConverterManager[" + iInstantConverters.size() + " instant,"+ iPartialConverters.size()+ " partial,"+ iDurationConverters.size()+ " duration,"+ iPeriodConverters.size()+ " period,"+ iIntervalConverters.size()+ " interval]";}  }
class C{  public void push(boolean value) throws IOException {  print("push",new String[]{value ? "true" : "false"});}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public static void w(String msg){  log(LEVEL.WARN,null,msg,null);}  }
class C{  protected final Response processOperation(int operation) throws SQLException, IOException {  final XdrInputStream xdrIn=getXdrIn();switch (operation) {case op_response:    return new GenericResponse(xdrIn.readInt(),xdrIn.readLong(),xdrIn.readBuffer(),readStatusVector());case op_fetch_response:  return new FetchResponse(xdrIn.readInt(),xdrIn.readInt());case op_sql_response:return new SqlResponse(xdrIn.readInt());default :throw new FbExceptionBuilder().nonTransientException(JaybirdErrorCodes.jb_unexpectedOperationCode).messageParameter(operation).messageParameter("processOperation").toFlatSQLException();}}  }
class C{  private Ref decsionOp() throws PageException {  Ref ref=concatOp();  boolean hasChanged=false;  if (cfml.isValidIndex()) {    do {      hasChanged=false;      if (cfml.isCurrent('c')) {        if (cfml.forwardIfCurrent("ct")) {          cfml.removeSpace();          ref=new CT(ref,concatOp());          hasChanged=true;        } else         if (cfml.forwardIfCurrent("contains")) {          cfml.removeSpace();          ref=new CT(ref,concatOp());          hasChanged=true;        }      } else       if (cfml.forwardIfCurrent("does","not","contain")) {        cfml.removeSpace();        ref=new NCT(ref,concatOp());        hasChanged=true;      } else       if (cfml.isCurrent("eq") && !cfml.isCurrent("eqv")) {        cfml.setPos(cfml.getPos() + 2);        cfml.forwardIfCurrent("ual");        cfml.removeSpace();        ref=new EQ(ref,concatOp());        hasChanged=true;      } else       if (cfml.forwardIfCurrent("==")) {        if (cfml.forwardIfCurrent('=')) {          cfml.removeSpace();          ref=new EEQ(ref,concatOp());        } else {          cfml.removeSpace();          ref=new EQ(ref,concatOp());        }        hasChanged=true;      } else       if (cfml.forwardIfCurrent("!=")) {        if (cfml.forwardIfCurrent('=')) {          cfml.removeSpace();          ref=new NEEQ(ref,concatOp());        } else {          cfml.removeSpace();          ref=new NEQ(ref,concatOp());        }        hasChanged=true;      } else       if (cfml.forwardIfCurrent('<')) {        if (cfml.forwardIfCurrent('=')) {          cfml.removeSpace();          ref=new LTE(ref,concatOp());        } else         if (cfml.forwardIfCurrent('>')) {          cfml.removeSpace();          ref=new NEQ(ref,concatOp());        } else {          cfml.removeSpace();          ref=new LT(ref,concatOp());        }        hasChanged=true;      } else       if (cfml.forwardIfCurrent('>')) {        if (cfml.forwardIfCurrent('=')) {          cfml.removeSpace();          ref=new GTE(ref,concatOp());        } else {          cfml.removeSpace();          ref=new GT(ref,concatOp());        }        hasChanged=true;      } else       if (cfml.isCurrent('g')) {        if (cfml.forwardIfCurrent("gt")) {          if (cfml.forwardIfCurrent('e')) {            cfml.removeSpace();            ref=new GTE(ref,concatOp());          } else {            cfml.removeSpace();            ref=new GT(ref,concatOp());          }          hasChanged=true;        } else         if (cfml.forwardIfCurrent("greater","than")) {          if (cfml.forwardIfCurrent("or","equal","to",true)) {            cfml.removeSpace();            ref=new GTE(ref,concatOp());          } else {            cfml.removeSpace();            ref=new GT(ref,concatOp());          }          hasChanged=true;        } else         if (cfml.forwardIfCurrent("ge")) {          cfml.removeSpace();          ref=new GTE(ref,concatOp());          hasChanged=true;        }      } else       if (cfml.forwardIfCurrent("is")) {        if (cfml.forwardIfCurrent("not",true)) {          cfml.removeSpace();          ref=new NEQ(ref,concatOp());        } else {          cfml.removeSpace();          ref=new EQ(ref,concatOp());        }        hasChanged=true;      } else       if (cfml.isCurrent('l')) {        if (cfml.forwardIfCurrent("lt")) {          if (cfml.forwardIfCurrent('e')) {            cfml.removeSpace();            ref=new LTE(ref,concatOp());          } else {            cfml.removeSpace();            ref=new LT(ref,concatOp());          }          hasChanged=true;        } else         if (cfml.forwardIfCurrent("less","than")) {          if (cfml.forwardIfCurrent("or","equal","to",true)) {            cfml.removeSpace();            ref=new LTE(ref,concatOp());          } else {            cfml.removeSpace();            ref=new LT(ref,concatOp());          }          hasChanged=true;        } else         if (cfml.forwardIfCurrent("le")) {          cfml.removeSpace();          ref=new LTE(ref,concatOp());          hasChanged=true;        }      } else       if (cfml.isCurrent('n')) {        if (cfml.forwardIfCurrent("neq")) {          cfml.removeSpace();          ref=new NEQ(ref,concatOp());          hasChanged=true;        } else         if (cfml.forwardIfCurrent("not","equal")) {          cfml.removeSpace();          ref=new NEQ(ref,concatOp());          hasChanged=true;        } else         if (cfml.forwardIfCurrent("nct")) {          cfml.removeSpace();          ref=new NCT(ref,concatOp());          hasChanged=true;        }      }    } while (hasChanged);  }  return ref;}  }
class C{  private SpeechletResponse handleSupportedCitiesRequest(final Intent intent,final Session session){  String repromptText="Which city would you like tide information for?";  String speechOutput="Currently, I know tide information for these coastal cities: " + getAllStationsText() + repromptText;  return newAskResponse(speechOutput,repromptText);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void insert(int offset,byte[] values){  insert(offset,values,0,values.length);}  }
class C{  private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  public Sort rewrite(IndexSearcher searcher) throws IOException {  boolean changed=false;  SortField[] rewrittenSortFields=new SortField[fields.length];  for (int i=0; i < fields.length; i++) {    rewrittenSortFields[i]=fields[i].rewrite(searcher);    if (fields[i] != rewrittenSortFields[i]) {      changed=true;    }  }  return (changed) ? new Sort(rewrittenSortFields) : this;}  }
class C{  public void progressStart(ProgressEvent evt){  System.out.println("start: received progressevent " + evt);  if (flag.nextSetBit(0) == -1)   flag.set(0);}  }
class C{  private void nukeSymbols(){  _count=0;  _longestCollisionList=0;  Arrays.fill(_mainHash,0);  Arrays.fill(_mainNames,null);  Arrays.fill(_collList,null);  _collCount=0;  _collEnd=0;}  }
class C{  public TableBuilderKelp columnTimestamp(String name){  _rowBuilder.timestampCol(name);  return this;}  }
class C{  Item newUTF8(final String value){  key.set(UTF8,value,null,null);  Item result=get(key);  if (result == null) {    pool.put1(UTF8).putUTF(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public static AnalysisReport v(){  if (v == null) {    v=new AnalysisReport();  }  return v;}  }
class C{  public static Key<?> of(Parameter parameter){  return new Key(parameter.getParameterizedType(),qualifiers(parameter.getAnnotations(),parameter.getDeclaringExecutable().getAnnotations()));}  }
class C{  public OverpassFilterQuery tagRegex(String name,String value){  builder.regexMatches(name,value);  return this;}  }
class C{  @Override public boolean contains(Object obj){  if (!(obj instanceof Struct)) {    return false;  }  Struct s=(Struct)obj;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return containsFieldValues(s.getFieldValues());}  }
class C{  public SaslClient createSaslClient(String[] mechs,String authorizationId,String protocol,String serverName,Map<String,?> props,CallbackHandler cbh) throws SaslException {  for (int i=0; i < mechs.length; i++) {    if (mechs[i].equals(myMechs[DIGEST_MD5]) && PolicyUtils.checkPolicy(mechPolicies[DIGEST_MD5],props)) {      if (cbh == null) {        throw new SaslException("Callback handler with support for RealmChoiceCallback, " + "RealmCallback, NameCallback, and PasswordCallback " + "required");      }      return new DigestMD5Client(authorizationId,protocol,serverName,props,cbh);    }  }  return null;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  DomainEmitter emitContact(String contactType,@Nullable Key<ContactResource> contact,boolean preferUnicode){  if (contact == null) {    return this;  }  ContactResource contactResource=ofy().load().key(contact).now();  if (contactResource == null) {    logger.severefmt("(BUG) Broken reference found from domain %s to contact %s",domain.getFullyQualifiedDomainName(),contact);    return this;  }  emitField(contactType,"ID",contactResource.getContactId());  PostalInfo postalInfo=chooseByUnicodePreference(preferUnicode,contactResource.getLocalizedPostalInfo(),contactResource.getInternationalizedPostalInfo());  if (postalInfo != null) {    emitField(contactType,"Name",postalInfo.getName());    emitField(contactType,"Organization",postalInfo.getOrg());    emitAddress(contactType,postalInfo.getAddress());  }  return emitPhone(contactType,"Phone",contactResource.getVoiceNumber()).emitPhone(contactType,"Fax",contactResource.getFaxNumber()).emitField(contactType,"Email",contactResource.getEmailAddress());}  }
class C{  public XmlSerializer newSerializer() throws XmlPullParserException {  if (serializerClasses == null) {    throw new XmlPullParserException("Factory initialization incomplete - has not tried " + classNamesLocation);  }  if (serializerClasses.size() == 0) {    throw new XmlPullParserException("No valid serializer classes found in " + classNamesLocation);  }  final StringBuffer issues=new StringBuffer();  for (int i=0; i < serializerClasses.size(); i++) {    final Class ppClass=(Class)serializerClasses.elementAt(i);    try {      final XmlSerializer ser=(XmlSerializer)ppClass.newInstance();      return ser;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create serializer: " + issues);}  }
class C{  public void testIsNamespaceAware(){  try {    spf.setNamespaceAware(true);    assertTrue(spf.newSAXParser().isNamespaceAware());    spf.setNamespaceAware(false);    assertFalse(spf.newSAXParser().isNamespaceAware());  } catch (  Exception e) {    throw new RuntimeException("Unexpected exception",e);  }}  }
class C{  public void testEmptyIndex() throws Exception {  IndexSearcher empty=newSearcher(new MultiReader());  Query query=new TermQuery(new Term("contents","foo"));  Sort sort=new Sort();  TopDocs td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);  sort.setSort(SortField.FIELD_DOC);  td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);  sort.setSort(new SortField("int",SortField.Type.INT),SortField.FIELD_DOC);  td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);  sort.setSort(new SortField("string",SortField.Type.STRING,true),SortField.FIELD_DOC);  td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);  sort.setSort(new SortField("string_val",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);  td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);  sort.setSort(new SortField("float",SortField.Type.FLOAT),new SortField("string",SortField.Type.STRING));  td=empty.search(query,10,sort,true,true);  assertEquals(0,td.totalHits);}  }
class C{  public void init(KeyGenerationParameters param){  super.init(param);  if (strength == 0 || strength == (56 / 8)) {    strength=DESParameters.DES_KEY_LENGTH;  } else   if (strength != DESParameters.DES_KEY_LENGTH) {    throw new IllegalArgumentException("DES key must be " + (DESParameters.DES_KEY_LENGTH * 8) + " bits long.");  }}  }
class C{  private int createProgram(String vertexSource,String fragmentSource){  mVShaderHandle=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);  if (mVShaderHandle == 0) {    return 0;  }  mFShaderHandle=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);  if (mFShaderHandle == 0) {    return 0;  }  int program=GLES20.glCreateProgram();  if (program != 0) {    GLES20.glAttachShader(program,mVShaderHandle);    GLES20.glAttachShader(program,mFShaderHandle);    GLES20.glLinkProgram(program);    int[] linkStatus=new int[1];    GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] != GLES20.GL_TRUE) {      RajLog.e("Could not link program in " + getClass().getCanonicalName() + ": ");      RajLog.e(GLES20.glGetProgramInfoLog(program));      GLES20.glDeleteProgram(program);      program=0;    }  }  return program;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void sendKeys(String keysSequence){  final String[] keys=keysSequence.split(" ");  final int count=keys.length;  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i++) {    String key=keys[i];    int repeater=key.indexOf('*');    int keyCount;    try {      keyCount=repeater == -1 ? 1 : Integer.parseInt(key.substring(0,repeater));    } catch (    NumberFormatException e) {      Log.w("ActivityTestCase","Invalid repeat count: " + key);      continue;    }    if (repeater != -1) {      key=key.substring(repeater + 1);    }    for (int j=0; j < keyCount; j++) {      try {        final Field keyCodeField=KeyEvent.class.getField("KEYCODE_" + key);        final int keyCode=keyCodeField.getInt(null);        try {          instrumentation.sendKeyDownUpSync(keyCode);        } catch (        SecurityException e) {        }      } catch (      NoSuchFieldException e) {        Log.w("ActivityTestCase","Unknown keycode: KEYCODE_" + key);        break;      }catch (      IllegalAccessException e) {        Log.w("ActivityTestCase","Unknown keycode: KEYCODE_" + key);        break;      }    }  }  instrumentation.waitForIdleSync();}  }
class C{  public static Object extractInnerConnectionFromPooledConnection(Object pooledConnection,String memberVariableName) throws IOException {  if (logger.isTraceEnabled())   logger.trace("Getting pooled connection inner connection");  try {    Field connectionField=pooledConnection.getClass().getDeclaredField(memberVariableName);    connectionField.setAccessible(true);    pooledConnection=(Connection)connectionField.get(pooledConnection);  } catch (  Exception e) {    throw new IOException(e.getLocalizedMessage());  }  return pooledConnection;}  }
class C{  public CoapClient(String scheme,String host,int port,String... path){  StringBuilder builder=new StringBuilder().append(scheme).append("://").append(host).append(":").append(port);  for (  String element : path)   builder.append("/").append(element);  this.uri=builder.toString();}  }
class C{  public EsriGraphicList(int initialCapacity,int capacityIncrement){  super(initialCapacity);}  }
class C{  GridUriDeploymentUriParser(String input){  assert input != null;  this.input=input;  encoded=input;}  }
class C{  private int parseCurrentNumber(ByteBuf buffer){  int number=0;  int readerIndex=buffer.readerIndex();  byte b=0;  while (true) {    if (!buffer.isReadable())     return Integer.MIN_VALUE;    b=buffer.readByte();    if (Character.isDigit(b)) {      number=number * 10 + (int)(b - '0');      readerIndex++;    } else {      buffer.readerIndex(readerIndex);      break;    }  }  return number;}  }
class C{  public RemoteSageFile(String hostname,String name,int uploadId) throws IOException {  this.hostname=hostname;  remoteFilename=name;  this.transcodeMode=null;  this.readonly=false;  this.forceActive=false;  this.uploadId=uploadId;  connect();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  String userId=getUserId(request);  DatastoreUtils datastoreUtils=new DatastoreUtils(userId);  runQuery(request,response,userId,datastoreUtils);}  }
class C{  public static void notNull(Object... arguments){  for (int i=0; i < arguments.length; ) {    notNull((String)arguments[i++],arguments[i++]);  }}  }
class C{  public void schedule(TimerTask task,Date firstTime,long period){  TimerTaskWrapper taskWrapper=new TimerTaskWrapper(task);  wrappedTasks.put(task,taskWrapper);  timer.schedule(taskWrapper,firstTime,period);}  }
class C{  public Object exec(List arguments){  StringBuilder aResults=new StringBuilder("Arguments are:<br />");  Iterator iList=arguments.iterator();  while (iList.hasNext()) {    aResults.append((String)iList.next());    aResults.append("<br />");  }  return new SimpleScalar(aResults.toString());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.addOption(result,notesTipText(),"","notes");  OptionUtils.addOption(result,classifiersTipText(),"none",'C');  OptionUtils.addOption(result,datasetProviderTipText(),getDefaultDatasetProvider().getClass().getName(),'D');  OptionUtils.addOption(result,evaluatorTipText(),getDefaultEvaluator().getClass().getName(),'E');  OptionUtils.addOption(result,statisticsHandlerTipText(),getDefaultStatisticsHandler().getClass().getName(),'S');  return OptionUtils.toEnumeration(result);}  }
class C{  public MethodInfo findMethod(MethodInfo mproto){  return (isMissing ? null : getDetails().findMethod(mproto));}  }
class C{  public SkypeBuilder(String username){  this.username=username;  this.password=null;}  }
class C{  public abbr addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void view(){  int height=256;  int width=256;  BufferedImage bigImage=new BufferedImage(width * 6,height * 6,BufferedImage.TYPE_INT_RGB);  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  Graphics g=ge.createGraphics(bigImage);  Toolkit tk=Toolkit.getDefaultToolkit();  for (int x=0; x < 6; x++) {    for (int y=0; y < 6; y++) {      int[] pixels=decompressSubframe(x,y,colortable);      java.awt.Image bitmap=tk.createImage(new MemoryImageSource(width,height,pixels,0,width));      g.drawImage(bitmap,x * 256,y * 256,null);    }  }  JLabel picture=new JLabel(new ImageIcon(bigImage));  JFrame frame=com.bbn.openmap.util.PaletteHelper.getPaletteWindow(picture,"RPF Frame",null);  frame.setSize(new Dimension(500,500));  frame.setVisible(true);}  }
class C{  @Override public final void sample(){  long count=_count.get();  long lastCount=_lastCount.getAndSet(count);  _value=count - lastCount;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GUARD___ANONYMOUS_GUARD_11:    return getAnonymous_guard_1_1();case UmplePackage.GUARD___CODE_1:  return getCode_1();case UmplePackage.GUARD___ANONYMOUS_GUARD_21:return getAnonymous_guard_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Retained public static EntryEventImpl createEntryEvent(PutAllEntryData entry,InternalDistributedMember sender,ClientProxyMembershipID context,DistributedRegion rgn,boolean possibleDuplicate,boolean needsRouting,Object callbackArg,boolean originRemote,boolean skipCallbacks){  final Object key=entry.getKey();  EventID evId=entry.getEventID();  @Retained EntryEventImpl ev=EntryEventImpl.create(rgn,entry.getOp(),key,null,callbackArg,originRemote,sender,!skipCallbacks,evId);  boolean returnedEv=false;  try {    if (context != null) {      ev.context=context;    }    if (entry.getValue() == null && rgn.getDataPolicy() == DataPolicy.NORMAL) {      ev.setLocalInvalid(true);    }    ev.setNewValue(entry.getValue());    ev.setPossibleDuplicate(possibleDuplicate);    ev.setVersionTag(entry.versionTag);    if (entry.filterRouting != null) {      InternalDistributedMember id=rgn.getMyId();      ev.setLocalFilterInfo(entry.filterRouting.getFilterInfo(id));    }    ev.setTailKey(entry.getTailKey());    returnedEv=true;    return ev;  }  finally {    if (!returnedEv) {      ev.release();    }  }}  }
class C{  @Deprecated public static String makeWhereStringFromFields(List<ModelField> modelFields,Map<String,Object> fields,String operator){  return makeWhereStringFromFields(new StringBuilder(),modelFields,fields,operator,null).toString();}  }
class C{  protected final void implAccept(Socket s) throws IOException {  SocketImpl si=null;  try {    if (s.impl == null)     s.setImpl(); else {      s.impl.reset();    }    si=s.impl;    s.impl=null;    si.address=new InetAddress();    si.fd=new FileDescriptor();    getImpl().accept(si);    SecurityManager security=System.getSecurityManager();    if (security != null) {      security.checkAccept(si.getInetAddress().getHostAddress(),si.getPort());    }  } catch (  IOException e) {    if (si != null)     si.reset();    s.impl=si;    throw e;  }catch (  SecurityException e) {    if (si != null)     si.reset();    s.impl=si;    throw e;  }  s.impl=si;  s.postAccept();}  }
class C{  private RawProtein<SmartRawMatch> processProteinUnlicensed(RawProtein<SmartRawMatch> matchRawProtein){  LOGGER.info("Smart licensed file resources are not available or readable - Smart post processing in unlicensed mode.");  return filterKinaseHack(matchRawProtein);}  }
class C{  ProjectHostingService createProjectHostingService(OAuthHmacSha1Signer oauthSigner,GoogleOAuthParameters oauthParameters) throws OAuthException {  ProjectHostingService projectHostingService=new ProjectHostingService("findbugs-cloud-client");  projectHostingService.setOAuthCredentials(oauthParameters,oauthSigner);  return projectHostingService;}  }
class C{  public final int[] toArray(){  int[][] field=this.field;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  int[] vals=new int[width * height];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      vals[i++]=fieldx[y];    }  }  return vals;}  }
class C{  boolean inVerticalScrollbar(int x,int y){  int w=width - SCROLLBAR_WIDTH;  int h=hsbVis ? height - SCROLLBAR_AREA : height;  return (vsbVis && (x > w) && (y >= 0)&& (y <= h));}  }
class C{  public static boolean sendError(final ServletResponse resp,final int statusCode,final String message) throws IOException {  boolean retVal=false;  if (resp instanceof HttpServletResponse) {    retVal=sendError((HttpServletResponse)resp,statusCode,message);  }  return retVal;}  }
class C{  private int transformToRTF(ElemTemplateElement templateParent,DTM dtmFrag) throws TransformerException {  XPathContext xctxt=m_xcontext;  ContentHandler rtfHandler=dtmFrag.getContentHandler();  int resultFragment;  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  ToSAXHandler h=new ToXMLSAXHandler();  h.setContentHandler(rtfHandler);  h.setTransformer(this);  m_serializationHandler=h;  SerializationHandler rth=m_serializationHandler;  try {    rth.startDocument();    rth.flushPending();    try {      executeChildTemplates(templateParent,true);      rth.flushPending();      resultFragment=dtmFrag.getDocument();    }  finally {      rth.endDocument();    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    this.m_serializationHandler=savedRTreeHandler;  }  return resultFragment;}  }
class C{  private static String[] toStringArray(Object[] params){  List<String> result=new ArrayList<String>();  if (params != null) {    for (    Object p : params) {      String entry=(p == null) ? null : String.valueOf(p);      if (p instanceof Enum<?>) {        entry=ENUM_PREFIX + p.getClass().getSimpleName() + "."+ p;      }      result.add(entry);    }  }  return result.toArray(new String[result.size()]);}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  protected void validateParameterList(NameValuePair[] param){}  }
class C{  public void close(){}  }
class C{  protected void sequence_Addition_Exponentiation_Multiplication(ISerializationContext context,Expression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean validateSDF(CFlags flags,String flagName){  return validateSDF((File)flags.getFlag(flagName).getValue());}  }
class C{  public NemAnnounceResult(final ValidationResult result,final Hash transactionHash,final Hash innerTransactionHash){  super(result);  this.transactionHash=transactionHash;  this.innerTransactionHash=innerTransactionHash;}  }
class C{  public static Map<String,Object> releaseOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String orderId="";  GenericValue paymentPref=null;  try {    if (orderPaymentPreferenceId != null) {      paymentPref=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();      orderId=paymentPref.getString("orderId");    } else {      orderId=(String)context.get("orderId");    }  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  List<GenericValue> paymentPrefs=null;  try {    List<EntityExpr> othExpr=UtilMisc.toList(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"EFT_ACCOUNT"));    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"GIFT_CARD"));    othExpr.add(EntityCondition.makeCondition("paymentMethodTypeId",EntityOperator.EQUALS,"FIN_ACCOUNT"));    EntityCondition con1=EntityCondition.makeCondition(othExpr,EntityJoinOperator.OR);    EntityCondition statExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_SETTLED");    EntityCondition con2=EntityCondition.makeCondition(UtilMisc.toList(con1,statExpr),EntityOperator.AND);    EntityCondition authExpr=EntityCondition.makeCondition("statusId",EntityOperator.EQUALS,"PAYMENT_AUTHORIZED");    EntityCondition con3=EntityCondition.makeCondition(UtilMisc.toList(con2,authExpr),EntityOperator.OR);    EntityExpr orderExpr=EntityCondition.makeCondition("orderId",EntityOperator.EQUALS,orderId);    EntityCondition con4=EntityCondition.makeCondition(UtilMisc.toList(con3,orderExpr),EntityOperator.AND);    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where(con4).queryList();  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not get order information (" + gee.toString() + ").");    return result;  }  if (paymentPrefs.size() == 0) {    Debug.logWarning("No OrderPaymentPreference records available for release",module);    result.put("processResult","COMPLETE");    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  List<GenericValue> finished=FastList.newInstance();  for (  GenericValue pPref : paymentPrefs) {    Map<String,Object> releaseContext=UtilMisc.toMap("userLogin",userLogin,"orderPaymentPreferenceId",pPref.getString("orderPaymentPreferenceId"));    Map<String,Object> releaseResult=null;    try {      releaseResult=dispatcher.runSync("releaseOrderPaymentPreference",releaseContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem calling releaseOrderPaymentPreference service for orderPaymentPreferenceId" + paymentPref.getString("orderPaymentPreferenceId"),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingTroubleCallingReleaseOrderPaymentPreferenceService",locale) + " " + paymentPref.getString("orderPaymentPreferenceId"));    }    if (ServiceUtil.isError(releaseResult)) {      Debug.logError(ServiceUtil.getErrorMessage(releaseResult),module);      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(releaseResult));    } else     if (!ServiceUtil.isFailure(releaseResult)) {      finished.add(paymentPref);    }  }  result=ServiceUtil.returnSuccess();  if (finished.size() == paymentPrefs.size()) {    result.put("processResult","COMPLETE");  } else {    result.put("processResult","FAILED");  }  return result;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  @Override public boolean LT(ArchitecturalWord word){  return (value ^ SIGN_BIT) < (word.toInt() ^ SIGN_BIT);}  }
class C{  public Ping decodePing(IoBuffer in){  final Ping ping=new Ping();  ping.setDebug(in.getHexDump());  ping.setEventType(in.getShort());  ping.setValue2(in.getInt());  if (in.hasRemaining()) {    ping.setValue3(in.getInt());  }  if (in.hasRemaining()) {    ping.setValue4(in.getInt());  }  return ping;}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") public static OpinionFragment newInstance(Product product,Opine parentOpinion){  OpinionFragment opinionFragment=new OpinionFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_PRODUCT,product);  args.putSerializable(KEY_PARENT_OPINION,parentOpinion);  opinionFragment.setArguments(args);  return opinionFragment;}  }
class C{  protected void pageEntered(){  if (LOG.isDebugEnabled()) {    LOG.debug("Page entered...");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isVertical(){  return vertical;}  }
class C{  public static boolean isEmpty(char[] array){  return array == null || array.length == 0;}  }
class C{  public boolean onScrollChanged(int x,int y){  long eventTime=SystemClock.uptimeMillis();  boolean shouldDispatch=eventTime - mLastScrollEventTimeMs > MIN_EVENT_SEPARATION_MS || mPrevX != x || mPrevY != y;  mLastScrollEventTimeMs=eventTime;  mPrevX=x;  mPrevY=y;  return shouldDispatch;}  }
class C{  public String refreshSaveSuccessMessage(){  JSFUtils.addMessage(null,FacesMessage.SEVERITY_INFO,BaseBean.INFO_BILLING_CONTACT_SAVED,null);  return BaseBean.OUTCOME_SUCCESS;}  }
class C{  public void onServiceStarted(){  final Intent service=new Intent(getActivity(),UARTService.class);  getActivity().bindService(service,mServiceConnection,0);}  }
class C{  private static boolean checkParameter(String args[]){  for (int i=0; i < args.length; i++) {    log.info("Parameter: " + i + " = "+ args[i]);    String[] parts=args[i].split("=");    if (parts[0].equals("--destination")) {      outputDirectory=parts[1];    } else     if (parts[0].equals("--xsd")) {      xsdLocation=parts[1];    } else     if (parts[0].equals("--package")) {      targetPackage=parts[1];    } else     if (parts[0].equals("--help"))     log.info(helpMessage);  }  TempDirectoryUtil tempDirectoryUtil=new TempDirectoryUtil();  if (xsdLocation == null) {    log.warn("XSD location not given (optional)...");    String tmpDir=tempDirectoryUtil.createCustomTempDirectory("xsd");    LoadFile loadFile=new LoadFile(InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_MATSIMORG,tmpDir,InternalConstants.CURRENT_XSD_FILE_NAME);    xsdLocation=loadFile.loadMATSim4UrbanSimXSDString();    log.warn("Set xsd default location to: " + xsdLocation);  }  if (outputDirectory == null) {    log.warn("Destination not given (optional)...");    outputDirectory=InternalConstants.MATSIM_WORKING_DIRECTORY + "/src/main/java/";    TempDirectoryUtil.createDirectory(outputDirectory);    log.warn("Set default destination to: " + outputDirectory);  }  if (targetPackage == null) {    log.warn("Package name not given (optional)...");    targetPackage=getTargetPackage(new UpdateXMLBindingClasses().getClass());    log.warn("Set default package name to: " + targetPackage);  }  if (!(outputDirectory != null && targetPackage != null && isValidLocataion(xsdLocation))) {    log.warn(helpMessage);    return false;  }  return true;}  }
class C{  public void writeStylesheet(String url) throws IOException {  _write("<?xml-stylesheet type='text/xsl' href='");  text(url);  _writeLn("'?>");}  }
class C{  private long toleranceShiftPeriod(final long diff,final long cadence){  if (cadence <= 0L) {    return diff;  }  return ((diff + cadence - 1) / cadence) * cadence;}  }
class C{  public static boolean checkFile(final File f){  return f.exists() && f.isFile() && f.canRead();}  }
class C{  boolean check(boolean conditional,@Nullable Object source,@Nullable Object target,@Nullable String message){  return checkOneToMany(conditional,source,ImmutableList.of((target == null) ? NULL_STRING : target),message);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 1) {    System.out.println("Usage: java Exercise_12_27 *");    System.exit(1);  }  ArrayList<File> list=new ArrayList<>();  addFiles(list,args);  replaceWords(list);}  }
class C{  public String[] jplot(double x[],String lineSpec,String legend,Object... args){  int sigLen=x.length;  double[] taxis=new double[sigLen];  for (int k=0; k < sigLen; k++)   taxis[k]=k;  return jplot(taxis,x,lineSpec,legend,args);}  }
class C{  public void addTextMsg(String added){  String oldTextMsg=getTextMsg();  if (oldTextMsg == null)   setTextMsg(added); else   if (added != null)   setTextMsg(oldTextMsg + added);}  }
class C{  public static String createReceivedMessageLog(final FormattedMqttMessage message,final MessageLog messageLogOptions){  final StringBuffer logMessage=new StringBuffer();  logMessage.append("<MqttMessage");  appendAttribute(logMessage,"id",String.valueOf(message.getId()));  appendAttribute(logMessage,"timestamp",String.valueOf(message.getDate().getTime()));  appendAttribute(logMessage,"topic",message.getTopic());  if (messageLogOptions.isLogQos()) {    appendAttribute(logMessage,"qos",String.valueOf(message.getQoS()));  }  if (messageLogOptions.isLogRetained()) {    appendAttribute(logMessage,"retained",String.valueOf(message.isRetained()));  }  if (messageLogOptions.isLogConnection()) {    appendAttribute(logMessage,"connection",message.getConnection().getMqttConnectionDetails().getName());  }  if (messageLogOptions.isLogSubscription() && message.getMatchingSubscriptionTopics() != null && message.getMatchingSubscriptionTopics().size() > 0) {    appendAttribute(logMessage,"subscription",message.getMatchingSubscriptionTopics().get(0));  }  populatePayload(logMessage,message,messageLogOptions);  logMessage.append("</MqttMessage>");  return logMessage.toString();}  }
class C{  public static void compressFile(Path fileToPack,Path packageFile) throws IOException {  pack(fileToPack,packageFile,true);}  }
class C{  public synchronized CommProtocolFactory createCommProtocolFactory(String name,CommCore commCore) throws IOException {  CommProtocolFactory factory=null;  String className=protocolExtensionClassNames.get(name);  if (className != null) {    try {      Class<?> c=loadExtensionClass(className);      if (CommProtocolFactory.class.isAssignableFrom(c)) {        Class<? extends CommProtocolFactory> fClass=(Class<? extends CommProtocolFactory>)c;        factory=fClass.getConstructor(CommCore.class).newInstance(commCore);      }    } catch (    ClassNotFoundException e) {      throw new IOException(e);    }catch (    InstantiationException e) {      throw new IOException(e);    }catch (    IllegalAccessException e) {      throw new IOException(e);    }catch (    NoSuchMethodException e) {      throw new IOException(e);    }catch (    InvocationTargetException e) {      throw new IOException(e);    }  }  return factory;}  }
class C{  public void containerVmDestroy(ContainerVm containerVm){  if (containerVm != null) {    containerVmDeallocate(containerVm);    getVmList().remove(containerVm);    containerVm.setHost(null);  }}  }
class C{  @Override public void onCanceled(List<AppEntry> apps){  super.onCanceled(apps);  onReleaseResources(apps);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public PrivateKey generatePrivateKeyPair(KeyPair keyPair){  try {    privateKey=keyPair.getPrivate();  } catch (  Exception e) {    LOG.error("Error generating Private Key",e);  }  return privateKey;}  }
class C{  private Map<String,List<String>> freshMap() throws IOException {  final String body=new RqPrint(this.req).printBody();  final Map<String,List<String>> map=new HashMap<>(1);  for (  final String pair : body.split("&")) {    if (pair.isEmpty()) {      continue;    }    final String[] parts=pair.split("=",2);    if (parts.length < 2) {      throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("invalid form body pair: %s",pair));    }    final String key=decode(new EnglishLowerCase(parts[0].trim()).string());    if (!map.containsKey(key)) {      map.put(key,new LinkedList<String>());    }    map.get(key).add(decode(parts[1].trim()));  }  return map;}  }
class C{  public static VOPricedEvent toVOPricedEvent(PricedEvent currentEvent,LocalizerFacade facade){  VOEventDefinition evtDef=toVOEventDefinition(currentEvent.getEvent(),facade);  VOPricedEvent result=new VOPricedEvent(evtDef);  result.setEventPrice(currentEvent.getEventPrice());  result.setSteppedPrices(SteppedPriceAssembler.toVOSteppedPrices(currentEvent.getSteppedPrices()));  updateValueObject(result,currentEvent);  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.728 -0500",hash_original_method="B90CA3721E1A91D945B72975FC03EB82",hash_generated_method="EEC5104156EC8B701A154FD6A59FFE1B") private void handleStopMessage(){  if (!checkOpenConnection()) {    return;  }  try {    mService.stopListening(mListener);    if (DBG)     Log.d(TAG,"service stop listening command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"stopListening() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  public int size(){  return 9;}  }
class C{  public void copyInstantiationData(TypeValue uninstantiated_type){  this.builder.is_final=uninstantiated_type.builder.is_final;}  }
class C{  private String printXFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0) {    sx="";  }  if (precisionSet) {    nLeadingZeros=precision - sx.length();  }  if (nLeadingZeros < 0) {    nLeadingZeros=0;  }  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (alternateForm) {      nBlanks-=2;    }  }  if (nBlanks < 0) {    nBlanks=0;  }  int n=0;  if (alternateForm) {    n+=2;  }  n+=nLeadingZeros;  n+=sx.length();  n+=nBlanks;  final char[] ca=new char[n];  int i=0;  if (leftJustify) {    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    for (int j=0; j < nLeadingZeros; j++, i++) {      ca[i]='0';    }    final char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++) {      ca[i]=csx[j];    }    for (int j=0; j < nBlanks; j++, i++) {      ca[i]=' ';    }  } else {    if (!leadingZeros) {      for (int j=0; j < nBlanks; j++, i++) {        ca[i]=' ';      }    }    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    if (leadingZeros) {      for (int j=0; j < nBlanks; j++, i++) {        ca[i]='0';      }    }    for (int j=0; j < nLeadingZeros; j++, i++) {      ca[i]='0';    }    final char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++) {      ca[i]=csx[j];    }  }  String caReturn=new String(ca);  if (conversionCharacter == 'X') {    caReturn=caReturn.toUpperCase();  }  return caReturn;}  }
class C{  @Override @Transactional public Collection<Protein> insert(Collection<Protein> newInstances){  final PersistedProteins persistedProteins=insertNewProteins(newInstances);  final Collection<Protein> allProteins=new ArrayList<Protein>(persistedProteins.getNewProteins());  allProteins.addAll(persistedProteins.getPreExistingProteins());  entityManager.flush();  return allProteins;}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(@NonNull ActionBarDrawerToggle actionBarDrawerToggle){  this.mActionBarDrawerToggleEnabled=true;  this.mActionBarDrawerToggle=actionBarDrawerToggle;  return this;}  }
class C{  protected void layout(NodeItem n,double r,double theta1,double theta2){  double dtheta=(theta2 - theta1);  double dtheta2=dtheta / 2.0;  double width=((Params)n.get(PARAMS)).width;  double cfrac, nfrac=0.0;  Iterator childIter=sortedChildren(n);  while (childIter != null && childIter.hasNext()) {    NodeItem c=(NodeItem)childIter.next();    Params cp=(Params)c.get(PARAMS);    cfrac=cp.width / width;    if (c.isExpanded() && c.getChildCount() > 0) {      layout(c,r + m_radiusInc,theta1 + nfrac * dtheta,theta1 + (nfrac + cfrac) * dtheta);    }    setPolarLocation(c,n,r,theta1 + nfrac * dtheta + cfrac * dtheta2);    cp.angle=cfrac * dtheta;    nfrac+=cfrac;  }}  }
class C{  private void generateCacheServers() throws SAXException, AdminException {  CacheServer[] servers=this.system.getCacheServers();  for (int i=0; i < servers.length; i++) {    generateCacheServer(servers[i].getConfig());  }}  }
class C{  public boolean isHandshakeComplete(){  return this.state.isHandshakeComplete();}  }
class C{  public UCrop withAspectRatio(float x,float y){  mCropOptionsBundle.putBoolean(EXTRA_ASPECT_RATIO_SET,true);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_X,x);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_Y,y);  return this;}  }
class C{  private void addApiKeyToRequest(okhttp3.Request.Builder builder,String apiKey){  final HttpUrl url=HttpUrl.parse(builder.build().url().toString());  if ((url.query() == null) || url.query().isEmpty()) {    builder.url(builder.build().url() + "?" + apiKey);  } else {    builder.url(builder.build().url() + "&" + apiKey);  }}  }
class C{  private TimeShiftLifecycleBean(int delta){  this.delta=delta;}  }
class C{  protected Vec4 geodeticToCartesian(Angle latitude,Angle longitude,double metersElevation){  return this.geodeticToEllipsoidal(latitude,longitude,metersElevation);}  }
class C{  private void buildInterceptor(String... interceptorPackages){  Set<ClassInfo> classes=null;  for (int i=0, len=interceptorPackages.length; i < len; i++) {    classes=classReader.getClass(interceptorPackages[i],Interceptor.class,false);    if (CollectionKit.isNotEmpty(classes)) {      for (      ClassInfo classInfo : classes) {        Class<?> interceptorClazz=classInfo.getClazz();        addInterceptor(interceptorClazz);      }    }  }}  }
class C{  public EventBean preprocess(EventBean theEvent,ExprEvaluatorContext exprEvaluatorContext){  return getPreprocessedEvent(theEvent,exprEvaluatorContext);}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.endPrefixMapping(decl.getPrefix());        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static void loadImageIntoImageview(HostManager hostManager,String imageUrl,ImageView imageView,int imageWidth,int imageHeight){  if ((imageWidth) > 0 && (imageHeight > 0)) {    hostManager.getPicasso().load(hostManager.getHostInfo().getImageUrl(imageUrl)).resize(imageWidth,imageHeight).centerCrop().into(imageView);  } else {    hostManager.getPicasso().load(hostManager.getHostInfo().getImageUrl(imageUrl)).fit().centerCrop().into(imageView);  }}  }
class C{  public StandardPCPolicy(){}  }
class C{  public boolean verifySignature(byte[] signature){  byte[] m2Hash=new byte[hLen];  digest.doFinal(m2Hash,0);  byte[] block;  int tLength;  int mStart=0;  if (preSig == null) {    try {      updateWithRecoveredMessage(signature);    } catch (    Exception e) {      return false;    }  } else {    if (!Arrays.areEqual(preSig,signature)) {      throw new IllegalStateException("updateWithRecoveredMessage called on different signature");    }  }  block=preBlock;  mStart=preMStart;  tLength=preTLength;  preSig=null;  preBlock=null;  byte[] C=new byte[8];  LtoOSP(recoveredMessage.length * 8,C);  digest.update(C,0,C.length);  if (recoveredMessage.length != 0) {    digest.update(recoveredMessage,0,recoveredMessage.length);  }  digest.update(m2Hash,0,m2Hash.length);  digest.update(block,mStart + recoveredMessage.length,saltLength);  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  int off=block.length - tLength - hash.length;  boolean isOkay=true;  for (int i=0; i != hash.length; i++) {    if (hash[i] != block[off + i]) {      isOkay=false;    }  }  clearBlock(block);  clearBlock(hash);  if (!isOkay) {    fullMessage=false;    clearBlock(recoveredMessage);    return false;  }  if (messageLength != 0) {    if (!isSameAs(mBuf,recoveredMessage)) {      clearBlock(mBuf);      return false;    }    messageLength=0;  }  clearBlock(mBuf);  return true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("CM_WebProject_ID"))     p_CM_WebProject_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private WindowUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean sync(final OutputStream stream){  if (stream == null) {    Log.e(FileUtils.class,"sync(): Null parameter given");    return false;  }  if (!(stream instanceof FileOutputStream))   return false; else   return sync((FileOutputStream)stream);}  }
class C{  public final String toString(){  StringBuilder buf=new StringBuilder();  Endpoint endptTypeA=getEndpoint1();  Endpoint endptTypeB=getEndpoint2();  buf.append(getNode1());  buf.append(" ");  if (endptTypeA == Endpoint.TAIL) {    buf.append("-");  } else   if (endptTypeA == Endpoint.ARROW) {    buf.append("<");  } else   if (endptTypeA == Endpoint.CIRCLE) {    buf.append("o");  }  buf.append("-");  if (endptTypeB == Endpoint.TAIL) {    buf.append("-");  } else   if (endptTypeB == Endpoint.ARROW) {    buf.append(">");  } else   if (endptTypeB == Endpoint.CIRCLE) {    buf.append("o");  }  buf.append(" ");  buf.append(getNode2());  return buf.toString();}  }
class C{  public HexLine(Coords c,int dir,Princess owner){  @SuppressWarnings("unused") final String METHOD_NAME="HexLine(Coords, int)";  this.owner=owner;  setDirection(dir);  if ((getDirection() == 0) || (getDirection() == 3)) {    setIntercept(c.getX());  } else   if ((getDirection() == 1) || (getDirection() == 4)) {    setIntercept(c.getY() + ((c.getX() + 1) / 2));  } else {    setIntercept(c.getY() - ((c.getX()) / 2));  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  public LocalRasterServerElevationModel(AVList params){  super(params);  this.createRasterServer(params);}  }
class C{  public static <T extends Storable>T unserialize(Class<T> clazz,Data data){  try {    T storableObj=clazz.newInstance();    storableObj.load(data);    return storableObj;  } catch (  Exception e) {    throw new DataException(e);  }}  }
class C{  public void java_lang_SecurityManager_getClassContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  private void createLink(final Network network,final OsmParser.OsmWay way,final OsmParser.OsmNode fromNode,final OsmParser.OsmNode toNode,final double length){  double nofLanes;  double laneCapacity;  double freespeed;  double freespeedFactor;  boolean oneway;  boolean onewayReverse=false;  boolean busOnlyLink=false;  String highway=way.tags.get(OsmTag.HIGHWAY);  String railway=way.tags.get(OsmTag.RAILWAY);  OsmConverterConfigGroup.OsmWayParams wayValues;  if (highway != null) {    wayValues=this.highwayParams.get(highway);    if (wayValues == null) {      if (way.tags.containsKey(OsmTag.PSV)) {        busOnlyLink=true;        wayValues=highwayParams.get(OsmValue.UNCLASSIFIED);      } else {        this.unknownHighways.add(highway);        return;      }    }  } else   if (railway != null) {    wayValues=this.railwayParams.get(railway);    if (wayValues == null) {      this.unknownRailways.add(railway);      return;    }  } else {    this.unknownWays.add(way.tags.values().toString());    return;  }  nofLanes=wayValues.getLanes();  laneCapacity=wayValues.getLaneCapacity();  freespeed=wayValues.getFreespeed();  freespeedFactor=wayValues.getFreespeedFactor();  oneway=wayValues.getOneway();  if ("roundabout".equals(way.tags.get(OsmTag.JUNCTION))) {    oneway=true;  }  String onewayTag=way.tags.get(OsmTag.ONEWAY);  if (onewayTag != null) {    if ("yes".equals(onewayTag)) {      oneway=true;    } else     if ("true".equals(onewayTag)) {      oneway=true;    } else     if ("1".equals(onewayTag)) {      oneway=true;    } else     if ("-1".equals(onewayTag)) {      onewayReverse=true;      oneway=false;    } else     if ("no".equals(onewayTag)) {      oneway=false;    }  }  if (highway != null) {    if (highway.equalsIgnoreCase("trunk") || highway.equalsIgnoreCase("primary") || highway.equalsIgnoreCase("secondary")) {      if (oneway && nofLanes == 1.0) {        nofLanes=2.0;      }    }  }  String maxspeedTag=way.tags.get(OsmTag.MAXSPEED);  if (maxspeedTag != null) {    try {      freespeed=Double.parseDouble(maxspeedTag) / 3.6;    } catch (    NumberFormatException e) {      boolean message=true;      if (config.getGuessFreeSpeed()) {        try {          message=false;          freespeed=Double.parseDouble(maxspeedTag.substring(0,2)) / 3.6;        } catch (        NumberFormatException e1) {          message=true;        }      }      if (!this.unknownMaxspeedTags.contains(maxspeedTag) && message) {        this.unknownMaxspeedTags.add(maxspeedTag);        log.warn("Could not parse maxspeed tag: " + e.getMessage() + " (way "+ way.id+ ") Ignoring it.");      }    }  }  String lanesTag=way.tags.get(OsmTag.LANES);  if (lanesTag != null) {    try {      double tmp=Double.parseDouble(lanesTag);      if (tmp > 0) {        nofLanes=tmp;      }    } catch (    Exception e) {      if (!this.unknownLanesTags.contains(lanesTag)) {        this.unknownLanesTags.add(lanesTag);        log.warn("Could not parse lanes tag: " + e.getMessage() + ". Ignoring it.");      }    }  }  double capacity=nofLanes * laneCapacity;  if (config.getScaleMaxSpeed()) {    freespeed=freespeed * freespeedFactor;  }  Set<String> modes=new HashSet<>();  if (!busOnlyLink && highway != null) {    modes.add(TransportMode.car);  }  if (busOnlyLink) {    modes.add("bus");    modes.add(TransportMode.pt);  }  if (railway != null && railwayParams.containsKey(railway)) {    modes.add(railway);  }  if (modes.isEmpty()) {    modes.add("unknownStreetType");  }  Set<Long> containingRelations=relationMembers.get(way.id);  if (containingRelations != null) {    for (    Long containingRelationId : containingRelations) {      OsmParser.OsmRelation rel=relations.get(containingRelationId);      String mode=rel.tags.get(OsmTag.ROUTE);      if (mode != null) {        if (mode.equals(OsmValue.TROLLEYBUS)) {          mode=OsmValue.BUS;        }        modes.add(mode);      }    }  }  Id<Node> fromId=Id.create(fromNode.id,Node.class);  Id<Node> toId=Id.create(toNode.id,Node.class);  if (network.getNodes().get(fromId) != null && network.getNodes().get(toId) != null) {    String origId=Long.toString(way.id);    if (!onewayReverse) {      Link l=network.getFactory().createLink(Id.create(this.id,Link.class),network.getNodes().get(fromId),network.getNodes().get(toId));      l.setLength(length);      l.setFreespeed(freespeed);      l.setCapacity(capacity);      l.setNumberOfLanes(nofLanes);      l.setAllowedModes(modes);      if (l instanceof Link) {        final String id1=origId;        NetworkUtils.setOrigId(((Link)l),id1);      }      network.addLink(l);      this.id++;    }    if (!oneway) {      Link l=network.getFactory().createLink(Id.create(this.id,Link.class),network.getNodes().get(toId),network.getNodes().get(fromId));      l.setLength(length);      l.setFreespeed(freespeed);      l.setCapacity(capacity);      l.setNumberOfLanes(nofLanes);      l.setAllowedModes(modes);      if (l instanceof Link) {        final String id1=origId;        NetworkUtils.setOrigId(((Link)l),id1);      }      network.addLink(l);      this.id++;    }  }}  }
class C{  public WebLogic8xConfigurationChecker(String serverName){  this.serverName=serverName;}  }
class C{  private void clearParameters(){  Object nullObject=null;  fAmtFrom.setValue(nullObject);  fAmtTo.setValue(nullObject);  fBankAccount_ID.setValue(null);  fCash_ID.setValue(null);  fCashBook_ID.setValue(null);  fCharge_ID.setValue(null);  fDateFrom.setValue(null);  fDateTo.setValue(null);  fInvoice_ID.setValue(null);  fPayment_ID.setValue(null);  cbAbsolute.setChecked(false);}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("annotationsSplit",0);  optionArgDefs.put("sourceTokens",1);  optionArgDefs.put("targetTokens",1);  optionArgDefs.put("alignment",1);  optionArgDefs.put("annotations",1);  optionArgDefs.put("transitive",0);  optionArgDefs.put("maxFragments",1);  optionArgDefs.put("posTagged",0);  return optionArgDefs;}  }
class C{  public int[] rowPrediction(int i,double t){  return A.toIntArray(rowConfidence(i),t);}  }
class C{  private void updateIPEndPointDetails(StoragePort port,CIMInstance ipPointInstance) throws IOException {  if (null != port) {    updateIPAddress(getCIMPropertyValue(ipPointInstance,IPv4Address),port);    _dbClient.persistObject(port);  }}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.POST) public ResultVO update(@CurrentUser User currentUser,@PathVariable String id,@Valid ClientParam param,BindingResult result){  try {    param.setId(StringUtils.isBlank(id) ? null : Long.valueOf(id));    ResultVO resultVO=validateHelper.validate(param,result,currentUser,logger,OperationType.UPDATE);    if (resultVO != null) {      return resultVO;    }    return resultHelper.successResp(clientDomain.update(ClientVO.class,param,currentUser));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MODULE_CODE:    return isSetModuleCode();case CONFIG_ITEM_CODE:  return isSetConfigItemCode();case PARAM_CODE:return isSetParamCode();case PARAM_VALUE:return isSetParamValue();default :;}throw new IllegalStateException();}  }
class C{  public void addInnerBoundary(Iterable<? extends Position> corners){  if (corners == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.boundaries.add(this.fillBoundary(corners));  if (this.surfaceShape != null)   this.setSurfacePolygonBoundaries(this.surfaceShape);  this.reset();}  }
class C{  public boolean isLevelEnabled(Level level){  return log.isLevelEnabled(level);}  }
class C{  public static <S extends HasDragRepositionStartHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragRepositionStartEvent event=new DragRepositionStartEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public OrganizationRemovedException(){}  }
class C{  public String faultDescription(Object fault){  FaultDescriptor fd=getFaultDescriptor(fault);  if (fd != null) {    return fd.getDescription(fault);  }  return fault.toString();}  }
class C{  public final void rotX(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=1.0;  this.m01=0.0;  this.m02=0.0;  this.m10=0.0;  this.m11=cosAngle;  this.m12=-sinAngle;  this.m20=0.0;  this.m21=sinAngle;  this.m22=cosAngle;}  }
class C{  public static ValueAnalysis v(){  if (am == null)   am=new ValueAnalysis();  return am;}  }
class C{  public boolean matches(String filename){  return filename.toLowerCase().endsWith(filenameSuffix.toLowerCase());}  }
class C{  @Override public void clearInitiative(boolean bUseInitComp){  getInitiative().clear();}  }
class C{  public void updateZoningMap(ExportMask mask,URI varray,URI exportGroupURI){  List<URI> volumeURIs=ExportMaskUtils.getVolumeURIs(mask);  ExportPathParams pathParams=calculateExportPathParamForVolumes(volumeURIs,0,mask.getStorageDevice(),exportGroupURI);  _log.info(String.format("Updating zoning map for ExportMask %s (%s) pathParams %s",mask.getMaskName(),mask.getId(),pathParams.toString()));  Map<URI,Set<Initiator>> network2InitiatorsMap=new HashMap<URI,Set<Initiator>>();  Map<URI,Set<StoragePort>> network2PortsMap=new HashMap<URI,Set<StoragePort>>();  _log.debug("Export Mask before zoning map update -" + mask.toString());  for (  String initiatorURIStr : mask.getZoningMap().keySet()) {    mask.removeZoningMapEntry(initiatorURIStr);  }  mask.setZoningMap(null);  for (  String initiatorURIStr : mask.getInitiators()) {    Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorURIStr));    if (initiator == null || initiator.getInactive()) {      continue;    }    NetworkLite initiatorNetwork=getInitiatorNetwork(initiator,_dbClient);    if (!network2InitiatorsMap.containsKey(initiatorNetwork.getId())) {      network2InitiatorsMap.put(initiatorNetwork.getId(),new HashSet<Initiator>());    }    network2InitiatorsMap.get(initiatorNetwork.getId()).add(initiator);    List<URI> storagePortList=ExportUtils.getPortsInInitiatorNetwork(mask,initiator,_dbClient);    if (storagePortList.isEmpty()) {      continue;    }    StringSet storagePorts=new StringSet();    for (    URI portURI : storagePortList) {      StoragePort port=_dbClient.queryObject(StoragePort.class,portURI);      URI portNetworkId=port.getNetwork();      if (!DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(port.getCompatibilityStatus()) || !DiscoveryStatus.VISIBLE.name().equals(port.getDiscoveryStatus()) || NullColumnValueGetter.isNullURI(portNetworkId)|| !port.getRegistrationStatus().equals(StoragePort.RegistrationStatus.REGISTERED.name())|| StoragePort.OperationalStatus.NOT_OK.equals(StoragePort.OperationalStatus.valueOf(port.getOperationalStatus()))|| StoragePort.PortType.valueOf(port.getPortType()) != StoragePort.PortType.frontend) {        _log.debug("Storage port {} is not selected because it is inactive, is not compatible, is not visible, not on a network, " + "is not registered, has a status other than OK, or is not a frontend port",port.getLabel());        continue;      }      if (port.getTaggedVirtualArrays().contains(varray.toString())) {        storagePorts.add(portURI.toString());        if (!network2PortsMap.containsKey(portNetworkId)) {          network2PortsMap.put(portNetworkId,new HashSet<StoragePort>());        }        network2PortsMap.get(portNetworkId).add(port);      } else {        _log.debug("Storage port {} is not selected because it is not in the specified varray {}",port.getLabel(),varray.toString());      }    }    mask.addZoningMapEntry(initiatorURIStr,storagePorts);  }  _log.debug("Export Mask after zoning map update -" + mask.toString());  Set<String> removedPorts=new HashSet<String>();  for (  URI networkURI : network2InitiatorsMap.keySet()) {    for (    Initiator initiator : network2InitiatorsMap.get(networkURI)) {      StringSet ports=mask.getZoningMap().get(initiator.getId().toString());      if ((null == ports) || (ports.size() <= pathParams.getPathsPerInitiator())) {        continue;      }      _log.info(String.format("Limiting paths for initiator %s to %s; initial ports %s",initiator.getInitiatorPort(),pathParams.getPathsPerInitiator().toString(),ports));      boolean removedPort=true;      outer:       while (removedPort && ports.size() > pathParams.getPathsPerInitiator()) {        removedPort=false;        for (        String port : ports) {          if (!removedPorts.contains(port)) {            removedPorts.add(port);            ports.remove(port);            removedPort=true;            continue outer;          }        }        for (        String port : ports) {          removedPorts.add(port);          ports.remove(port);          removedPort=true;          continue outer;        }      }      _log.info(String.format("Limited ports for initiator %s to %s",initiator.getInitiatorPort(),ports));    }  }  ExportPathParams currentPathParams=calculateExportPathParamForExportMask(_dbClient,mask);  Integer overMaxPaths=currentPathParams.getMaxPaths() - pathParams.getMaxPaths();  SortedMap<Integer,Set<URI>> initiatorCountToNetwork=new TreeMap<Integer,Set<URI>>();  for (  URI networkURI : network2InitiatorsMap.keySet()) {    Integer count=network2InitiatorsMap.get(networkURI).size();    if (!initiatorCountToNetwork.containsKey(count)) {      initiatorCountToNetwork.put(count,new HashSet<URI>());    }    initiatorCountToNetwork.get(count).add(networkURI);  }  while (overMaxPaths > 0) {    Integer lastKey=initiatorCountToNetwork.lastKey();    Integer firstKey=initiatorCountToNetwork.firstKey();    for (Integer count=lastKey; overMaxPaths > 0 && count >= firstKey; count--) {      Set<URI> networks=initiatorCountToNetwork.get(count);      if (networks == null) {        continue;      }      for (      URI networkURI : networks) {        Iterator<Initiator> iter=network2InitiatorsMap.get(networkURI).iterator();        if (iter.hasNext()) {          Initiator initiator=iter.next();          StringSet ports=mask.getZoningMap().get(initiator.getId().toString());          overMaxPaths-=ports.size();          _log.info(String.format("Removing initiator %s to comply with maxPaths",initiator.getInitiatorPort()));          mask.removeZoningMapEntry(initiator.getId().toString());          network2InitiatorsMap.get(networkURI).remove(initiator);        }        if (overMaxPaths <= 0) {          break;        }      }    }  }  Integer pathCount=0;  Integer initiatorCount=0;  for (  String initiatorId : mask.getZoningMap().keySet()) {    initiatorCount++;    StringSet ports=mask.getZoningMap().get(initiatorId);    pathCount+=ports.size();  }  _log.info(String.format("ExportMask %s (%s) pathCount %s",mask.getMaskName(),mask.getId(),pathCount.toString()));  if (pathCount < pathParams.getMinPaths()) {    throw PlacementException.exceptions.cannotAllocateMinPaths(pathParams.getMinPaths(),initiatorCount,pathParams.getPathsPerInitiator(),pathParams.getMinPaths(),pathParams.getMaxPaths());  }  _dbClient.updateObject(mask);}  }
class C{  @Override public void write(byte[] b,int off,int len) throws IOException {  if (currentEntry != null && !currentEntry.isDirectory()) {    if (currentEntry.getSize() < currentFileSize + len) {      throw new IOException("The current entry[" + currentEntry.getName() + "] size["+ currentEntry.getSize()+ "] is smaller than the bytes["+ (currentFileSize + len)+ "] being written.");    } else {      currentFileSize+=len;    }  }  bytesWritten+=len;  super.write(b,off,len);}  }
class C{  public static void warnDeprecation(String depreacted,String replacement){  Log.w(LOG_TAG,"You're using the deprecated " + depreacted + " attr, please switch over to "+ replacement);}  }
class C{  static public void loadAndStoreAllInDirectory(TestSuite suite,String name){  java.io.File dir=new java.io.File(name + "/load/");  java.io.File[] files=dir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    if (files[i].getName().endsWith(".xml")) {      suite.addTest(new CheckOneFilePasses(files[i]));    }  }}  }
class C{  private void actorStream(List<Movie> movies){  Stream<List<Actor>> actorStream=movies.stream().map(null);  actorStream.forEach(null);}  }
class C{  public void process(Bitmap bitmap){}  }
class C{  protected boolean testServerPort(int port){  System.out.println("testServerPort: " + port);  try {    ServerSocket ss=new ServerSocket(port);    log.fine(ss.getInetAddress() + ":" + ss.getLocalPort()+ " - created");    ss.close();  } catch (  Exception ex) {    log.warning("Port " + port + ": "+ ex.getMessage());    return false;  }  return true;}  }
class C{  private void compressSlots(){  Iterator<ItemPanel> emptyIt=panels.iterator();  Iterator<ItemPanel> fullIt=panels.iterator();  while (fullIt.hasNext()) {    ItemPanel full=fullIt.next();    ItemPanel empty=emptyIt.next();    if (empty.getEntity() == null) {      while (full.getEntity() == null) {        if (fullIt.hasNext()) {          full=fullIt.next();        } else {          return;        }      }      full.moveViewTo(empty);    }  }}  }
class C{  private void loadPage(String page){  try {    textPane.setPage(getClass().getResource(page));    currentPage=page;  } catch (  IOException ex) {    LOGGER.warning("Invalid page: " + page + " ("+ ex.getLocalizedMessage()+ ")");  }}  }
class C{  public static boolean regressEvalLinear(Regressor instance,ExecutorService ex){  return regressEvalLinear(instance,ex,500,100);}  }
class C{  public Card draw(){  if (drawPile.empty()) {    reshuffle();  }  return drawPile.popCard();}  }
class C{  public synchronized void addEvent(){  if (_rowCount < CbusConstants.MAX_TABLE_EVENTS) {    Runnable r=new Notify(_rowCount,this);    javax.swing.SwingUtilities.invokeLater(r);    _rowCount++;  }}  }
class C{  private void addAttributeLine(MAttribute attribute,boolean product,boolean readOnly){  log.fine(attribute + ", Product=" + product+ ", R/O="+ readOnly);  CLabel label=new CLabel(attribute.getName());  if (product)   label.setFont(new Font(label.getFont().getFontName(),Font.BOLD,label.getFont().getSize()));  if (attribute.getDescription() != null)   label.setToolTipText(attribute.getDescription());  centerPanel.add(label,new ALayoutConstraint(m_row++,0));  MAttributeInstance instance=attribute.getMAttributeInstance(m_M_AttributeSetInstance_ID);  if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attribute.getAttributeValueType())) {    MAttributeValue[] values=attribute.getMAttributeValues();    CComboBox editor=new CComboBox(values);    boolean found=false;    if (instance != null) {      for (int i=0; i < values.length; i++) {        if (values[i] != null && values[i].getM_AttributeValue_ID() == instance.getM_AttributeValue_ID()) {          editor.setSelectedIndex(i);          found=true;          break;        }      }      if (found)       log.fine("Attribute=" + attribute.getName() + " #"+ values.length+ " - found: "+ instance); else       log.warning("Attribute=" + attribute.getName() + " #"+ values.length+ " - NOT found: "+ instance);    } else     log.fine("Attribute=" + attribute.getName() + " #"+ values.length+ " no instance");    label.setLabelFor(editor);    centerPanel.add(editor,null);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  } else   if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attribute.getAttributeValueType())) {    VNumber editor=new VNumber(attribute.getName(),attribute.isMandatory(),readOnly,!readOnly,DisplayType.Number,attribute.getName());    if (instance != null)     editor.setValue(instance.getValueNumber()); else     editor.setValue(Env.ZERO);    label.setLabelFor(editor);    centerPanel.add(editor,null);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  } else {    VString editor=new VString(attribute.getName(),attribute.isMandatory(),false,true,20,INSTANCE_VALUE_LENGTH,null,null);    if (instance != null)     editor.setText(instance.getValue());    label.setLabelFor(editor);    centerPanel.add(editor,null);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRESH_NEWS_CACHE'";  db.execSQL(sql);}  }
class C{  private void evictAll(){  if (index == null) {    allocateIndex();  }  final int n=lru.size();  final byte[][] a=new byte[n][];{    final Iterator<Map.Entry<ISPO,byte[]>> itr=lru.entrySet().iterator();    int i=0;    while (itr.hasNext()) {      a[i++]=itr.next().getValue();      itr.remove();    }  }  Arrays.sort(a,0,a.length,UnsignedByteArrayComparator.INSTANCE);  if (index instanceof BTree) {    for (int i=0; i < a.length; i++) {      add((BTree)index,a[i]);    }  } else   if (index instanceof HTree) {    for (int i=0; i < a.length; i++) {      add((HTree)index,a[i]);    }  } else   throw new AssertionError();}  }
class C{  public void add(DataSource source,boolean visible){  add(data.size(),source,visible);}  }
class C{  final public static ArrayList<PointMatch> flip(Collection<PointMatch> matches){  ArrayList<PointMatch> list=new ArrayList<PointMatch>();  for (  PointMatch match : matches) {    list.add(new PointMatch(match.p2,match.p1,match.weight));  }  return list;}  }
class C{  public SampleVcpcRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGenericDataDirectoryDBDao() : null;}  }
class C{  private static String buildCookieHeader(List<String> cookies){  if (cookies.size() == 1)   return cookies.get(0);  StringBuilder sb=new StringBuilder();  for (int i=0, size=cookies.size(); i < size; i++) {    if (i > 0)     sb.append("; ");    sb.append(cookies.get(i));  }  return sb.toString();}  }
class C{  public final boolean valuable(int currGen){  if (generation != currGen)   return false;  return (type == T_EXACT) || (getDepth() > 3 * Search.plyScale);}  }
class C{  private FactoryDto createFactoryForWorkItem(final FactoryDto parentFactory,final FactoryType factoryType,final String workItemId) throws ServerException {  final FactoryDto newFactory=DtoFactory.cloneDto(parentFactory);  final String createPolicy=((DEVELOP == factoryType) ? "perUser" : "perClick");  PoliciesDto policies;  if (parentFactory.getPolicies() == null) {    policies=DtoFactory.newDto(PoliciesDto.class).withCreate(createPolicy);  } else {    policies=parentFactory.getPolicies().withCreate(createPolicy);  }  newFactory.setPolicies(policies);  final String projectName=parentFactory.getName();  newFactory.setName(projectName + "-" + workItemId+ "-"+ factoryType.toString()+ "-factory");  newFactory.setCreator(null);  newFactory.setId(null);  Map<String,String> projectSourceParameters=newFactory.getWorkspace().getProjects().get(0).getSource().getParameters();  projectSourceParameters.put("branch",projectName + "-" + workItemId);  return newFactory;}  }
class C{  public void test_startWriteStop2() throws InterruptedException, ExecutionException, TimeoutException {  doStartWriteStop2Test();}  }
class C{  private static String[][] createFilterGroups(String filterText){  if (filterText == null)   return null;  filterText=filterText.trim();  if (filterText.isEmpty())   return null;  final List<List<String>> filterGroupList=new ArrayList<>();  filterText=filterText.toLowerCase().replace('\t',' ');  final List<String> tokenList=new ArrayList<>();  char ch=0;  for (int i=0, j; i < filterText.length(); i++) {    while (i < filterText.length() && (ch=filterText.charAt(i)) == ' ')     i++;    if (i >= filterText.length())     break;    if (ch == '"') {      int finishIdx=filterText.indexOf('"',i + 1);      if (finishIdx < 0)       finishIdx=filterText.length();      tokenList.add(filterText.substring(i + 1,finishIdx));      i=finishIdx;    } else {      for (j=i + 1; j < filterText.length(); j++) {        ch=filterText.charAt(j);        if (ch == '"' || ch == ' ')         break;      }      String s=filterText.substring(i,j);      if ("or".equals(s))       s="OR"; else       if ("and".equals(s))       s="AND";      tokenList.add(s);      i=j;    }  }  List<String> filterGroup=null;  for (  final String filterToken : tokenList) {    if (filterToken.equals("OR")) {      filterGroup=null;    } else     if (filterToken.equals("AND")) {    } else {      if (filterGroup == null) {        filterGroup=new ArrayList<>(2);        filterGroupList.add(filterGroup);      }      filterGroup.add(filterToken);    }  }  final String[][] filterGroups=new String[filterGroupList.size()][];  for (int i=0; i < filterGroups.length; i++)   filterGroups[i]=filterGroupList.get(i).toArray(new String[filterGroupList.get(i).size()]);  return filterGroups;}  }
class C{  public static <H extends ServiceHost & XenonHostInfoProvider>void dumpHost(H host,String referrer) throws Throwable {  logger.info(String.format("host: %s - %s",host.getId(),host.getPort()));  for (  Class factory : host.getFactoryServices()) {    try {      Operation op=Operation.createGet(UriUtils.buildExpandLinksQueryUri(UriUtils.buildUri(host,factory)));      Operation result=sendRequestAndWait(host,op,referrer);      logger.info(String.format("%s: %s: %s",host.getPort(),factory.getSimpleName(),Utils.toJson(false,false,result.getBodyRaw())));    } catch (    Throwable ex) {      logger.info(String.format("Could not get service: %s",factory.getCanonicalName()));    }  }}  }
class C{  private boolean needsPassthroughWorkarounds(){  return Util.SDK_INT < 23 && (targetEncoding == C.ENCODING_AC3 || targetEncoding == C.ENCODING_E_AC3);}  }
class C{  private void copySourceInformationFrom(Bee src){  copySourceInformation(this,src);}  }
class C{  private float initTimeTextBaselineAndTimeBgTopPadding(int viewHeight,int viewPaddingTop,int viewPaddingBottom,int contentAllHeight){  float topPaddingSize;  if (viewPaddingTop == viewPaddingBottom) {    topPaddingSize=(viewHeight - contentAllHeight) / 2;  } else {    topPaddingSize=viewPaddingTop;  }  if (isShowDay && mSuffixDayTextWidth > 0) {    mSuffixDayTextBaseline=getSuffixTextBaseLine(mSuffixDay,topPaddingSize);  }  if (isShowHour && mSuffixHourTextWidth > 0) {    mSuffixHourTextBaseline=getSuffixTextBaseLine(mSuffixHour,topPaddingSize);  }  if (isShowMinute && mSuffixMinuteTextWidth > 0) {    mSuffixMinuteTextBaseline=getSuffixTextBaseLine(mSuffixMinute,topPaddingSize);  }  if (mSuffixSecondTextWidth > 0) {    mSuffixSecondTextBaseline=getSuffixTextBaseLine(mSuffixSecond,topPaddingSize);  }  if (isShowMillisecond && mSuffixMillisecondTextWidth > 0) {    mSuffixMillisecondTextBaseline=getSuffixTextBaseLine(mSuffixMillisecond,topPaddingSize);  }  return topPaddingSize;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.102 -0500",hash_original_method="3B16B20932FC06A1773A3617B4E26D41",hash_generated_method="D5B0FFEC51ADE550873498514BC5E299") @DSSink(DSSinkKind.USB) public int bulkTransfer(UsbEndpoint endpoint,byte[] buffer,int length,int timeout){  return native_bulk_request(endpoint.getAddress(),buffer,length,timeout);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.909 -0500",hash_original_method="ECAE8AA4EBDE1134552CC635B1F3D0F6",hash_generated_method="E0291B4EB05BB6C8E09669CB5621340B") private CharSequence makeCFQueryResultMessage(CallForwardInfo info,int serviceClassMask){  CharSequence template;  String sources[]={"{0}","{1}","{2}"};  CharSequence destinations[]=new CharSequence[3];  boolean needTimeTemplate;  needTimeTemplate=(info.reason == CommandsInterface.CF_REASON_NO_REPLY);  if (info.status == 1) {    if (needTimeTemplate) {      template=context.getText(com.android.internal.R.string.cfTemplateForwardedTime);    } else {      template=context.getText(com.android.internal.R.string.cfTemplateForwarded);    }  } else   if (info.status == 0 && isEmptyOrNull(info.number)) {    template=context.getText(com.android.internal.R.string.cfTemplateNotForwarded);  } else {    if (needTimeTemplate) {      template=context.getText(com.android.internal.R.string.cfTemplateRegisteredTime);    } else {      template=context.getText(com.android.internal.R.string.cfTemplateRegistered);    }  }  destinations[0]=serviceClassToCFString(info.serviceClass & serviceClassMask);  destinations[1]=PhoneNumberUtils.stringFromStringAndTOA(info.number,info.toa);  destinations[2]=Integer.toString(info.timeSeconds);  if (info.reason == CommandsInterface.CF_REASON_UNCONDITIONAL && (info.serviceClass & serviceClassMask) == CommandsInterface.SERVICE_CLASS_VOICE) {    boolean cffEnabled=(info.status == 1);    phone.mIccRecords.setVoiceCallForwardingFlag(1,cffEnabled);  }  return TextUtils.replace(template,sources,destinations);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public void putGenericFontFamily(String familyName,Font font){  genericFontFamilies.put(familyName.toLowerCase(),font);}  }
class C{  public static Object invokeDeclared(Object obj,String method,Class[] paramClasses,Object[] params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Method m=obj.getClass().getDeclaredMethod(method,paramClasses);  m.setAccessible(true);  return m.invoke(obj,params);}  }
class C{  public boolean contains(String key){  Assert.isTrue(allowedKeys.contains(key.toLowerCase()));  return hashtable.containsKey(key.toLowerCase());}  }
class C{  public CCopyStackValueAction(final String value){  super(String.format("Copy '%s' to clipboard",value));  m_value=value;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VERSIONS:    return isSetVersions();case TIMESTAMP:  return isSetTimestamp();}throw new IllegalStateException();}  }
class C{  public Shapefile(URL url){  baseURL=url;  myInputStream=null;  try {    URLConnection uc=baseURL.openConnection();    myInputStream=new BufferedInputStream(uc.getInputStream());  } catch (  Exception e) {  }}  }
class C{  public void undo(){  readConfiguration();}  }
class C{  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {  return peek(block ? Long.MAX_VALUE : 0);}  }
class C{  public void displayGroupUpdated(int arg0,String arg1){  _log.debug("displayGroupUpdated: " + arg0 + " "+ arg1);}  }
class C{  @Override public void fillDomainGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){  double x1=axis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());  double x2=axis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());  Rectangle2D band;  if (plot.getOrientation() == PlotOrientation.VERTICAL) {    band=new Rectangle2D.Double(Math.min(x1,x2),dataArea.getMinY(),Math.abs(x2 - x1),dataArea.getHeight());  } else {    band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(x1,x2),dataArea.getWidth(),Math.abs(x2 - x1));  }  Paint paint=plot.getDomainTickBandPaint();  if (paint != null) {    g2.setPaint(paint);    g2.fill(band);  }}  }
class C{  public void deleteValue(String idDescr,String idCampo,String orden){  try {    DbConnection conn=getConnection();    final StringBuffer qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_DESCR,idDescr)).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_CAMPO,idCampo));    if (StringUtils.isNotBlank(orden))     qual.append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ORDEN,orden));    DbDeleteFns.delete(conn,TABLE_NAME,qual.toString());  } catch (  Exception e) {    logger.error("Error eliminando campo de tipo fecha para el descriptor " + idDescr,e);    throw new DBException("eliminando campo de tipo fecha",e);  }}  }
class C{  public String formatImageFilePath(String rootDir,int uvx,int uvy){  return rootDir + "/" + getZoomLevel()+ "/"+ uvx+ "/"+ uvy;}  }
class C{  public EntityQuery where(EntityCondition entityCondition){  this.whereEntityCondition=entityCondition;  return this;}  }
class C{  static Collection<PyElement> moveAssignmentsImpl(@NotNull final PyClass from,@NotNull final Collection<PyAssignmentStatement> statements,@NotNull final PyClass... to){  final Collection<PyElement> result=new ArrayList<PyElement>();  for (  final PyClass destClass : to) {    result.addAll(PyClassRefactoringUtil.copyFieldDeclarationToStatement(statements,destClass.getStatementList(),destClass));  }  deleteElements(statements);  return result;}  }
class C{  @Override public void start(Map<String,String> props){synchronized (lock) {    if (!stopped)     return;    cacheName=props.get(IgniteSourceConstants.CACHE_NAME);    igniteCfgFile=props.get(IgniteSourceConstants.CACHE_CFG_PATH);    topics=props.get(IgniteSourceConstants.TOPIC_NAMES).split("\\s*,\\s*");    if (props.containsKey(IgniteSourceConstants.INTL_BUF_SIZE))     evtBufSize=Integer.parseInt(props.get(IgniteSourceConstants.INTL_BUF_SIZE));    if (props.containsKey(IgniteSourceConstants.INTL_BATCH_SIZE))     evtBatchSize=Integer.parseInt(props.get(IgniteSourceConstants.INTL_BATCH_SIZE));    if (props.containsKey(IgniteSourceConstants.CACHE_FILTER_CLASS)) {      String filterCls=props.get(IgniteSourceConstants.CACHE_FILTER_CLASS);      if (filterCls != null && !filterCls.isEmpty()) {        try {          Class<? extends IgnitePredicate<CacheEvent>> clazz=(Class<? extends IgnitePredicate<CacheEvent>>)Class.forName(filterCls);          filter=clazz.newInstance();        } catch (        Exception e) {          log.error("Failed to instantiate the provided filter! " + "User-enabled filtering is ignored!",e);        }      }    }    TaskRemoteFilter rmtLsnr=new TaskRemoteFilter(cacheName);    try {      int[] evts=cacheEvents(props.get(IgniteSourceConstants.CACHE_EVENTS));      rmtLsnrId=IgniteGrid.getIgnite().events(IgniteGrid.getIgnite().cluster().forCacheNodes(cacheName)).remoteListen(locLsnr,rmtLsnr,evts);    } catch (    Exception e) {      log.error("Failed to register event listener!",e);      throw new ConnectException(e);    } finally {      stopped=false;    }  }}  }
class C{  public CheckBoxListItem(Object o,boolean checked){  m_Checked=checked;  m_Content=o;}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(ClassContext classContext,Method method,int pc){  return fromVisitedInstruction(classContext.getJavaClass(),method,pc);}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return new Builder<K,V>(Ordering.natural()).put(k1,v1).put(k2,v2).build();}  }
class C{  public static Function<String> jsonGroupArray(Field<?> arg){  return new JSONArgumentFunction<>(JSON1_GROUP_FUNCTIONS_VERSION,"json_group_array",arg);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.REGULAR_EVENT_SPEC__EVENT:    setEvent((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public RegisterNodesRequest clone(){  RegisterNodesRequest result=new RegisterNodesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.NodesToRegister=NodesToRegister == null ? null : NodesToRegister.clone();  return result;}  }
class C{  public int findRowByAddress(String address,boolean isReceiving){  if (address == null) {    return -1;  }  WalletInfoData walletInfo=this.bitcoinController.getModel().getActiveWalletWalletInfo();  if (walletInfo == null) {    return -1;  }  ArrayList<WalletAddressBookData> addresses;  if (isReceiving) {    addresses=walletInfo.getReceivingAddresses();  } else {    addresses=walletInfo.getSendingAddresses();  }  int row=0;  if (addresses != null) {    for (    WalletAddressBookData loopAddress : addresses) {      if (loopAddress != null) {        if (address.equals(loopAddress.getAddress())) {          return row;        }      }      row++;    }  }  return -1;}  }
class C{  public Attribute value(String targetAttribute){  xmlAttribute.value=new TargetAttribute(targetAttribute).toXStream();  return this;}  }
class C{  public static char base(final byte[] a,final int p){  return p >= 0 && p < a.length ? getBase(a[p]) : getBase(UNKNOWN_RESIDUE);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; bucketId=").append(this.bucketId);  buff.append("; isRebalance=").append(this.isRebalance);  buff.append("; replaceOfflineData=").append(this.replaceOfflineData);  buff.append("; moveSource=").append(this.moveSource);  buff.append("; forceCreation=").append(this.forceCreation);}  }
class C{  private void readElementDeclaration() throws IOException, XmlPullParserException {  read(START_ELEMENT);  skip();  readName();  readContentSpec();  skip();  read('>');}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  this.segmentShift=32 - sshift;  this.segmentMask=ssize - 1;  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=MIN_SEGMENT_TABLE_CAPACITY;  while (cap < c)   cap<<=1;  Segment<K,V> s0=new Segment<K,V>(loadFactor,(int)(cap * loadFactor),(HashEntry<K,V>[])new HashEntry<?,?>[cap]);  Segment<K,V>[] ss=(Segment<K,V>[])new Segment<?,?>[ssize];  UNSAFE.putOrderedObject(ss,SBASE,s0);  this.segments=ss;}  }
class C{  static Tree<String> headBinarizeTree(Tree<String> tree){  return headParentBinarizeTree(Binarization.HEAD,tree);}  }
class C{  private String makeNextLink(int skip) throws ODataException {  URI selfLnk=getServiceRoot();  URIBuilder ub=new URIBuilder(selfLnk);  ub.setParameter("$skip",String.valueOf(skip));  return ub.toString();}  }
class C{  protected static LuaValue[] newupe(){  return new LuaValue[1];}  }
class C{  public TFloatFloatIterator(TFloatFloatHashMap map){  super(map);  _map=map;}  }
class C{  public boolean disconnectAudio(){  if (mService != null && isEnabled()) {    try {      return mService.disconnectAudio();    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public static void throwError(String msg){  throw new IllegalArgumentException(msg);}  }
class C{  public Shape apply(E e){  Shape edgeShape=getLoopOrNull(e);  if (edgeShape != null) {    return edgeShape;  }  int index=getIndex(e,edgeIndexFunction);  float controlY=control_offset_increment + control_offset_increment * index;  CUBIC_CURVE.setCurve(0.0f,0.0f,0.33f,2 * controlY,.66f,-controlY,1.0f,0.0f);  return CUBIC_CURVE;}  }
class C{  public void testCapitalization11() throws Exception {  Reader reader=new StringReader("McKinley");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","keep","and the it BIG","onlyFirstWord","false","minWordLength","3","okPrefix","McK","forceFirstLetter","true").create(stream);  assertTokenStreamContents(stream,new String[]{"McKinley"});}  }
class C{  public short shortValue(){  return 0;}  }
class C{  public int max(){  int result=Integer.MIN_VALUE;  for (int i=0; i < size; ++i)   if (vector[i] > result)   result=vector[i];  return result;}  }
class C{  public static void writeSortedFirstDim(float[][] matrix,String fn) throws IOException {  BufferedWriter outBuf=new BufferedWriter(new FileWriter(fn));  ArrayList<Float> firsts=new ArrayList<>();  for (int row=0; row < matrix.length; ++row) {    firsts.add(matrix[row][0]);  }  Collections.sort(firsts);  for (  Float num : firsts) {    outBuf.write(String.format("%f\n",num));  }  outBuf.close();}  }
class C{  public static String join(Object[] array,String token){  String result="";  if ((array != null) && (array.length > 0)) {    int length=array.length;    if (length == 1 && array[0] != null)     result=array[0].toString(); else {      StringBuffer buffer=new StringBuffer();      buffer.append(array[0]);      for (int i=1; i < length; i++)       buffer.append(token).append(array[i]);      result=buffer.toString();    }  }  return result;}  }
class C{  MemberState startInstall(){  installing=true;  return this;}  }
class C{  @Override public int compareTo(DynamicField other){  return other.wildcard.length() - wildcard.length();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void changeSpillDefinitionPos(LIRInstruction op,AllocatableValue operand,TraceInterval interval,int defPos){  assert interval.isSplitParent() : "can only be called for split parents";switch (interval.spillState()) {case NoDefinitionFound:    interval.setSpillDefinitionPos(defPos);  if (!(op instanceof LabelOp)) {    interval.setSpillState(SpillState.NoSpillStore);  }break;case NoSpillStore:assert defPos <= interval.spillDefinitionPos() : "positions are processed in reverse order when intervals are created";if (defPos < interval.spillDefinitionPos() - 2) {interval.setSpillState(SpillState.NoOptimization);} else {assert allocator.blockForId(defPos) == allocator.blockForId(interval.spillDefinitionPos()) : "block must be equal";}break;case NoOptimization:break;default :throw new BailoutException("other states not allowed at this time");}}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.VERTEX;}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void extractVariableValues(Set<String> excludedVariables,DiscreteVariableAnalysis variableAnalysis) throws IOException {  DiscreteVarInfo[] discreteVarInfos=variableAnalysis.getDiscreteVarInfos();  int numOfCols=variableAnalysis.numOfCols;  int maxNumOfVariables=discreteVarInfos.length;  try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    skipToNextLine(buffer);    int columnIndex=0;    int rowCount=2;    byte currentChar=-1;    byte prevChar=NEW_LINE;    StringBuilder dataBuilder=new StringBuilder();    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delimiter || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString().trim();        dataBuilder.delete(0,dataBuilder.length());        if (columnIndex < maxNumOfVariables) {          DiscreteVarInfo variable=discreteVarInfos[columnIndex];          if (variable != null) {            if (value.length() > 0) {              variable.setValue(value);            } else {              String errMsg=String.format("Missing data at line %d column %d.",rowCount,columnIndex + 1);              LOGGER.error(errMsg);              throw new IOException(errMsg);            }          }        } else {          String errMsg=String.format("Number of columns exceeded at line %d.  Expect %d column(s) but found %d.",rowCount,maxNumOfVariables,columnIndex + 1);          LOGGER.error(errMsg);          throw new IOException(errMsg);        }        columnIndex++;        if (currentChar == NEW_LINE) {          if (columnIndex < numOfCols) {            String errMsg=String.format("Insufficient number of columns at line %d.  Expect %d column(s) but found %d.",rowCount,numOfCols,columnIndex);            LOGGER.error(errMsg);            throw new IOException(errMsg);          }          columnIndex=0;          rowCount++;        }      } else       if (currentChar != SINGLE_QUOTE && currentChar != DOUBLE_QUOTE) {        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (currentChar > -1 && currentChar != NEW_LINE) {      if (columnIndex < maxNumOfVariables) {        DiscreteVarInfo variable=discreteVarInfos[columnIndex];        if (variable != null) {          if (currentChar == delimiter) {            String errMsg=String.format("Missing data at line %d column %d.",rowCount,columnIndex + 1);            LOGGER.error(errMsg);            throw new IOException(errMsg);          } else {            String value=dataBuilder.toString().trim();            dataBuilder.delete(0,dataBuilder.length());            if (value.length() > 0) {              variable.setValue(value);            } else {              String errMsg=String.format("Missing data at line %d column %d.",rowCount,columnIndex + 1);              LOGGER.error(errMsg);              throw new IOException(errMsg);            }          }        }      } else {        String errMsg=String.format("Number of columns exceeded at line %d.  Expect %d column(s) but found %d.",rowCount,numOfCols,columnIndex + 1);        LOGGER.error(errMsg);        throw new IOException(errMsg);      }    }  } }  }
class C{  private void next(){  while (it.valid()) {    Object o=it.get();    it.advance();    if (filter.isInstance(o)) {      current=filter.cast(o);      return;    }  }  current=null;}  }
class C{  public LogisticGrowthN0(Type units){  super(units);}  }
class C{  public DocumentStoredFieldVisitor(String... fields){  fieldsToAdd=new HashSet<>(fields.length);  for (  String field : fields) {    fieldsToAdd.add(field);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.063 -0500",hash_original_method="7820A4FDEE02D17FDE49851C9121389B",hash_generated_method="7AC79524ED0EBA889F1E1AF706679515") public String localName(){  return theLocalName;}  }
class C{  public long keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public void killLocal(Local l){  int base=types.size() * locals.indexOf(l);  for (int i=0; i < types.size(); i++) {    clear(i + base);  }}  }
class C{  public T caseParameterizedTypeRef_IM(ParameterizedTypeRef_IM object){  return null;}  }
class C{  private CActionHotKey(final String action){  super(action);  m_action=action;}  }
class C{  private static byte[] computeCbcMac(byte[] nonce,byte[] m,byte[] a,Cipher cipher,int authenticationBytes) throws GeneralSecurityException {  long lengthM=m.length;  long lengthA=a.length;  int L=15 - nonce.length;  byte[] b0=new byte[BLOCK_SIZE];  int adata=0;  if (lengthA > 0) {    adata=1;  }  int mPrime=(authenticationBytes - 2) / 2;  int lPrime=L - 1;  b0[0]=(byte)(64 * adata + 8 * mPrime + lPrime);  System.arraycopy(nonce,0,b0,1,nonce.length);  b0[14]=(byte)(lengthM >> 8);  b0[15]=(byte)(lengthM);  List<byte[]> blocks=new ArrayList<byte[]>();  if (lengthA > 0) {    final int first=65280;    final long second=4294967296L;    DatagramWriter writer=new DatagramWriter();    if (lengthA > 0 && lengthA < first) {      writer.writeLong(lengthA,16);    } else     if (lengthA >= first && lengthA < second) {      int field=0xFFFE;      writer.write(field,16);      writer.writeLong(lengthA,32);    } else {      int field=0xFFFF;      writer.write(field,16);      writer.writeLong(lengthA,64);    }    writer.writeBytes(a);    byte[] aEncoded=writer.toByteArray();    blocks.addAll(ByteArrayUtils.splitAndPad(aEncoded,BLOCK_SIZE));  }  blocks.addAll(ByteArrayUtils.splitAndPad(m,BLOCK_SIZE));  byte[] X_i;  X_i=ByteArrayUtils.truncate(cipher.doFinal(b0),BLOCK_SIZE);  for (  byte[] block : blocks) {    byte[] xor=ByteArrayUtils.xorArrays(block,X_i);    X_i=ByteArrayUtils.truncate(cipher.doFinal(xor),BLOCK_SIZE);  }  byte[] T=ByteArrayUtils.truncate(X_i,authenticationBytes);  return T;}  }
class C{  public static byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  byte[] decoded=Base64.decodeBase64(encrypted);  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.DECRYPT_MODE,skeySpec);  return cipher.doFinal(decoded);}  }
class C{  public CharSequence loadDescription(PackageManager pm) throws NotFoundException {  if (mReceiver.activityInfo.descriptionRes != 0) {    String packageName=mReceiver.resolvePackageName;    ApplicationInfo applicationInfo=null;    if (packageName == null) {      packageName=mReceiver.activityInfo.packageName;      applicationInfo=mReceiver.activityInfo.applicationInfo;    }    return pm.getText(packageName,mReceiver.activityInfo.descriptionRes,applicationInfo);  }  throw new NotFoundException();}  }
class C{  protected IContentProposal[] contentProposalsFrom(List<IEditProposal> editProposals){  IContentProposal[] contentProposals=new IContentProposal[editProposals.size()];  for (int i=0; i < editProposals.size(); i++) {    contentProposals[i]=new EditProposalWrapper(editProposals.get(i));  }  return contentProposals;}  }
class C{  protected int _columnOffset(int absRank){  return absRank;}  }
class C{  public static String sprintf(Locale l,String format,Object... args){  String fmt=format.replaceAll("([^%]|^)%([^a-zA-Z%]*)l(f|g|e)","$1%$2$3");  return String.format(l,fmt,args);}  }
class C{  public WPayPrint(){  try {    dynInit();    zkInit();    Borderlayout contentLayout=new Borderlayout();    contentLayout.setWidth("100%");    contentLayout.setHeight("100%");    form.appendChild(contentLayout);    Center center=new Center();    contentLayout.appendChild(center);    center.appendChild(centerPanel);    South south=new South();    south.setStyle("border: none");    contentLayout.appendChild(south);    south.appendChild(southPanel);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }}  }
class C{  protected InferredType mergeLubAnnosWithEqualities(final TypeVariable target,final Map<AnnotationMirror,AnnotationMirror> lubAnnos,final ConstraintMap constraintMap,final AnnotatedTypeFactory typeFactory){  final Equalities equalities=constraintMap.getConstraints(target).equalities;  final Set<? extends AnnotationMirror> tops=typeFactory.getQualifierHierarchy().getTopAnnotations();  if (!equalities.types.isEmpty()) {    final Entry<AnnotatedTypeMirror,Set<AnnotationMirror>> eqEntry=equalities.types.entrySet().iterator().next();    final AnnotatedTypeMirror equalityType=eqEntry.getKey();    final Set<AnnotationMirror> equalityAnnos=eqEntry.getValue();    boolean failed=false;    for (    final AnnotationMirror top : tops) {      if (!equalityAnnos.contains(top)) {        final AnnotationMirror lubAnno=lubAnnos.get(top);        if (lubAnno == null) {          failed=true;        } else {          equalityType.replaceAnnotation(lubAnno);          equalityAnnos.add(top);        }      }    }    if (!failed) {      return new InferredType(equalityType);    }  }  return null;}  }
class C{  public boolean realtime(){  return this.realtime == null ? true : this.realtime;}  }
class C{  public MultiResourceLoader(ResourceLoader[] loaders){  for (int i=0; i < loaders.length; i++) {    this.loaders.add(loaders[i]);  }}  }
class C{  private void updateLogView(){  this.removeAll();  for (int i=0; i < this.eventPanes.size(); i++) {    this.add(eventPanes.get(i));  }  revalidate();}  }
class C{  private GenericTag decodeJPEGTables(int length) throws IOException {  GenericTag t;  t=new GenericTag(stagJPEGTables);  t.data=new byte[length];  r.readFully(t.data);  return t;}  }
class C{  private synchronized void choosePreferred(){  for (  Capability capability : Capability.values()) {    Platform preferred=findMostPreferred(capability);    if (preferred != null) {      preferences.put(capability,preferred);      try {        Method methodInitialize=Capability.class.getDeclaredMethod("initialize",PlatformManager.class,Platform.class);        methodInitialize.setAccessible(true);        methodInitialize.invoke(capability,this,preferred);      } catch (      Throwable e) {        throw new RuntimeException(e);      }    }  }  if (preferences.containsKey(Capability.CONFIGURATION) && configured.compareAndSet(false,true)) {    worldEdit.getEventBus().post(new ConfigurationLoadEvent(queryCapability(Capability.CONFIGURATION).getConfiguration()));  }}  }
class C{  AttributeSet convertAttributeSet(AttributeSet a){  if ((a instanceof LargeConversionSet) || (a instanceof SmallConversionSet)) {    return a;  }  Enumeration names=a.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof StyleConstants) {      MutableAttributeSet converted=new LargeConversionSet();      Enumeration keys=a.getAttributeNames();      while (keys.hasMoreElements()) {        Object key=keys.nextElement();        Object cssValue=null;        if (key instanceof StyleConstants) {          Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);          if (cssKey != null) {            Object value=a.getAttribute(key);            cssValue=css.styleConstantsValueToCSSValue((StyleConstants)key,value);            if (cssValue != null) {              converted.addAttribute(cssKey,cssValue);            }          }        }        if (cssValue == null) {          converted.addAttribute(key,a.getAttribute(key));        }      }      return converted;    }  }  return a;}  }
class C{  public int readInt() throws IOException {  return ((_is.read() << 24) | (_is.read() << 16) | (_is.read() << 8)| (_is.read()));}  }
class C{  public Command checkoutCommand() throws InterruptedException {  Command command=pool.poll();  if (command == null) {    command=new Command(gondola,this,cmember);  }  return command;}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  public boolean isReadWrite(){  return m_readWrite;}  }
class C{  public static float cuCreal(cuComplex x){  return x.x;}  }
class C{  private void sendRemainingParts(Client client,String[] strings){  for (int i=1; i < strings.length; ++i) {    client.appendMessage(strings[i]);  }}  }
class C{  public File createJarFromDirectory(String directory,File outputJar) throws IOException {  JarOutputStream jarStream=null;  try {    if (!outputJar.getParentFile().exists()) {      outputJar.getParentFile().mkdirs();    }    jarStream=new JarOutputStream(new FileOutputStream(outputJar));    File dir=new File(directory);    createJarFromDirectory(dir,dir,jarStream);  }  finally {    if (jarStream != null) {      jarStream.close();    }  }  return outputJar;}  }
