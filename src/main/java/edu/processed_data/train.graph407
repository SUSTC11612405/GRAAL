class C{  public boolean isLast(){  return pos == text.length - 1;}  }
class C{  public ProxyFactory<I> timeoutMillis(long timeoutMillis){  this.timeoutMillis=timeoutMillis;  return this;}  }
class C{  protected void selectRenderables(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Sector vs=dc.getVisibleSector();  OrbitView view=(OrbitView)dc.getView();  Position centerPos=view.getCenterPosition();  Double pixelSizeDegrees=Angle.fromRadians(view.computePixelSizeAtDistance(view.getZoom()) / dc.getGlobe().getEquatorialRadius()).degrees;  Double labelOffsetDegrees=pixelSizeDegrees * view.getViewport().getWidth() / 4;  Position labelPos=Position.fromDegrees(centerPos.getLatitude().degrees - labelOffsetDegrees,centerPos.getLongitude().degrees - labelOffsetDegrees,0);  Double labelLatDegrees=labelPos.getLatitude().normalizedLatitude().degrees;  labelLatDegrees=Math.min(Math.max(labelLatDegrees,-76),78);  labelPos=new Position(Angle.fromDegrees(labelLatDegrees),labelPos.getLongitude().normalizedLongitude(),0);  if (vs != null) {    for (    GridElement ge : this.gridElements) {      if (ge.isInView(dc)) {        if (ge.renderable instanceof GeographicText) {          GeographicText gt=(GeographicText)ge.renderable;          if (labelPos.getLatitude().degrees < 72 || "*32*34*36*".indexOf("*" + gt.getText() + "*") == -1) {            Position pos=gt.getPosition();            if (ge.type.equals(GridElement.TYPE_LATITUDE_LABEL))             pos=Position.fromDegrees(pos.getLatitude().degrees,labelPos.getLongitude().degrees,pos.getElevation()); else             if (ge.type.equals(GridElement.TYPE_LONGITUDE_LABEL))             pos=Position.fromDegrees(labelPos.getLatitude().degrees,pos.getLongitude().degrees,pos.getElevation());            gt.setPosition(pos);          }        }        this.graticuleSupport.addRenderable(ge.renderable,GRATICULE_UTM);      }    }  }}  }
class C{  public void finish() throws Exception {}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isAutoFinalize(){  return autoFinalize.getSelection();}  }
class C{  public void await(){  try {    sync.acquireSharedInterruptibly(0);  } catch (  InterruptedException ignore) {  }}  }
class C{  public static Bitmap createRoundBitmap(Bitmap bitmap){  int width=bitmap.getWidth();  int height=bitmap.getHeight();  float roundPx;  float left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;  if (width <= height) {    roundPx=width / 2;    top=0;    bottom=width;    left=0;    right=width;    height=width;    dst_left=0;    dst_top=0;    dst_right=width;    dst_bottom=width;  } else {    roundPx=height / 2;    float clip=(width - height) / 2;    left=clip;    right=width - clip;    top=0;    bottom=height;    width=height;    dst_left=0;    dst_top=0;    dst_right=height;    dst_bottom=height;  }  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final int color=0xff424242;  final Paint paint=new Paint();  final Rect src=new Rect((int)left,(int)top,(int)right,(int)bottom);  final Rect dst=new Rect((int)dst_left,(int)dst_top,(int)dst_right,(int)dst_bottom);  final RectF rectF=new RectF(dst);  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(color);  canvas.drawRoundRect(rectF,roundPx,roundPx,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,src,dst,paint);  return output;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:07.495 -0500",hash_original_method="2735A1029D285B5D3DE10DB0E230E666",hash_generated_method="14AD51EE24F52D76DEA85DCFD1BF0956") public FileChannelImpl(Object stream,FileDescriptor fd,int mode){  this.fd=fd;  this.stream=stream;  this.mode=mode;}  }
class C{  private boolean hasChar(){  return this.pos < this.len;}  }
class C{  public int[] executeBatch() throws SQLException {  checkClose();  if (batchQueries == null || batchQueries.size() == 0) {    return new int[0];  }  MultiFixedIntExecutionResult internalExecutionResult=new MultiFixedIntExecutionResult(this,batchQueries.size(),0,false);  boolean multipleExecution=false;  lock.lock();  try {    QueryException exception=null;    executing=true;    executeQueryProlog();    try {      if (this.options.rewriteBatchedStatements) {        boolean batchQueryMultiRewritable=true;        for (        String query : batchQueries) {          if (!ClientPrepareResult.isRewritableBatch(query,connection.noBackslashEscapes)) {            batchQueryMultiRewritable=false;            break;          }        }        if (batchQueryMultiRewritable) {          multipleExecution=true;          protocol.executeBatchMultiple(protocol.isMasterConnection(),internalExecutionResult,batchQueries,resultSetScrollType);          internalExecutionResult.updateResultsMultiple(batchQueries.size(),false);        } else {          protocol.executeBatch(protocol.isMasterConnection(),internalExecutionResult,batchQueries,resultSetScrollType);        }      } else {        protocol.executeBatch(protocol.isMasterConnection(),internalExecutionResult,batchQueries,resultSetScrollType);      }    } catch (    QueryException e) {      exception=e;    } finally {      internalExecutionResult.fixStatsError(batchQueries.size());      if (exception != null && multipleExecution) {        internalExecutionResult.updateResultsMultiple(batchQueries.size(),true);      }      executionResult=internalExecutionResult;      executing=false;      executeQueryEpilog(exception);    }    return internalExecutionResult.getAffectedRows();  } catch (  SQLException sqle) {    throw new BatchUpdateException(sqle.getMessage(),sqle.getSQLState(),sqle.getErrorCode(),internalExecutionResult.getAffectedRows(),sqle);  } finally {    lock.unlock();    clearBatch();  }}  }
class C{  public <T>ObjectArray<T> resize(ObjectArray<T> array,long size){  if (array instanceof BigObjectArray) {    return resizeInPlace((BigObjectArray<T>)array,size);  } else {    final ObjectArray<T> newArray=newObjectArray(size);    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {      newArray.set(i,array.get(i));    }    array.close();    return newArray;  }}  }
class C{  protected AlertProtocol(){}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  private static String jsonValue(boolean value){  return String.valueOf(value);}  }
class C{  public void debugPrint(PrintWriter out,String prefix,boolean verbose){  out.println(ref.toHuman() + ":");  DalvInsnList insns=code.getInsns();  out.println("regs: " + Hex.u2(getRegistersSize()) + "; ins: "+ Hex.u2(getInsSize())+ "; outs: "+ Hex.u2(getOutsSize()));  insns.debugPrint(out,prefix,verbose);  String prefix2=prefix + "  ";  if (catches != null) {    out.print(prefix);    out.println("catches");    catches.debugPrint(out,prefix2);  }  if (debugInfo != null) {    out.print(prefix);    out.println("debug info");    debugInfo.debugPrint(out,prefix2);  }}  }
class C{  private void deleteCostDetail(String trxName) throws SQLException {  StringBuffer sqlDelete;  int record=0;  sqlDelete=new StringBuffer("DELETE M_CostDetail WHERE ");  sqlDelete.append(deleteCostDetailWhereClause);  record=DB.executeUpdateEx(sqlDelete.toString(),deleteParameters.toArray(),trxName);}  }
class C{  public StylesheetHandler(TransformerFactoryImpl processor) throws TransformerConfigurationException {  Class func=org.apache.xalan.templates.FuncDocument.class;  m_funcTable.installFunction("document",func);  func=org.apache.xalan.templates.FuncFormatNumb.class;  m_funcTable.installFunction("format-number",func);  m_optimize=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_OPTIMIZE)).booleanValue();  m_incremental=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_INCREMENTAL)).booleanValue();  m_source_location=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_SOURCE_LOCATION)).booleanValue();  init(processor);}  }
class C{  public DAddExtensionType(JDialog parent,X509Extension extensions){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DAddExtensionType.Title"));  this.extensions=extensions;  initComponents();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  void resetFromValue(InternationalFormatter formatter){  offset=0;  try {    text=formatter.valueToString(value);  } catch (  ParseException pe) {    text="";  }  length=fb.getDocument().getLength();}  }
class C{  protected boolean bottom(TextView widget,Spannable buffer){  return false;}  }
class C{  protected void configDialogPropertyChange(PropertyChangeEvent event){  log.debug("internal config dialog handler");  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue());}  }
class C{  void generateTree(int nNodes){  boolean[] bConnected=new boolean[nNodes];  int nNode1=random.nextInt(nNodes);  int nNode2=random.nextInt(nNodes);  if (nNode1 == nNode2) {    nNode2=(nNode1 + 1) % nNodes;  }  if (nNode2 < nNode1) {    int h=nNode1;    nNode1=nNode2;    nNode2=h;  }  m_ParentSets[nNode2].addParent(nNode1,m_Instances);  bConnected[nNode1]=true;  bConnected[nNode2]=true;  for (int iArc=2; iArc < nNodes; iArc++) {    int nNode=random.nextInt(nNodes);    nNode1=0;    while (nNode >= 0) {      nNode1=(nNode1 + 1) % nNodes;      while (!bConnected[nNode1]) {        nNode1=(nNode1 + 1) % nNodes;      }      nNode--;    }    nNode=random.nextInt(nNodes);    nNode2=0;    while (nNode >= 0) {      nNode2=(nNode2 + 1) % nNodes;      while (bConnected[nNode2]) {        nNode2=(nNode2 + 1) % nNodes;      }      nNode--;    }    if (nNode2 < nNode1) {      int h=nNode1;      nNode1=nNode2;      nNode2=h;    }    m_ParentSets[nNode2].addParent(nNode1,m_Instances);    bConnected[nNode1]=true;    bConnected[nNode2]=true;  }}  }
class C{  public boolean isDirty(){synchronized (this.tradingdays) {    for (    Tradingday tradingday : this.tradingdays) {      if (tradingday.isDirty())       return true;    }  }  return false;}  }
class C{  public MekaFrame(String title,GraphicsConfiguration gc){  super(title,gc);  performInitialization();}  }
class C{  public void startDb(){  Map<String,String> databaseOptions=new HashMap<>();  databaseOptions.put(MysqldResourceI.PORT,Integer.toString(port));  mysqldResource=new MysqldResource(new File(databaseDir,databaseName));  mysqldResource.start("embedded-mysqld-db-thread-" + System.currentTimeMillis(),databaseOptions);  if (!mysqldResource.isRunning()) {    throw new RuntimeException("Failed to start embedded MySQL DB!");  }  LOG.debug("MySQL started successfully");}  }
class C{  public void testGetString(){  byte[] bytes1={3,0,0,1,'a','b','c'};  byte[] bytes2={4,0,0,1,'a','b','c',0};  MySQLPacket array1=new MySQLPacket(bytes1.length - MySQLPacket.HEADER_LENGTH,bytes1,(byte)1);  MySQLPacket array2=new MySQLPacket(bytes2.length - MySQLPacket.HEADER_LENGTH,bytes2,(byte)1);  assertEquals("abc",array1.getString());  assertEquals("abc",array2.getString());}  }
class C{  public static Container encloseRightMiddle(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.RIGHT,Component.CENTER),cmps);}  }
class C{  public void markRecoveryAsDone(long id){  RecoveryStatus removed=onGoingRecoveries.remove(id);  if (removed != null) {    logger.trace("{} marking recovery from {} as done, id [{}]",removed.shardId(),removed.sourceNode(),removed.recoveryId());    removed.markAsDone();  }}  }
class C{  public int currentTexture(int textureUnit){  int textureUnitIndex=textureUnit - GLES20.GL_TEXTURE0;  return this.textureId[textureUnitIndex];}  }
class C{  public void testPingPongShortSegmentsWithAckDelayOff(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setBytesPerSend(50);  test.setOptAckDelay(0);  test.doTestPingPong(100,5);}  }
class C{  public void readTags() throws IOException {  while (readOneTag() != SWFConstants.TAG_END) {    ;  }}  }
class C{  public NExtremeArrayBufferHolder(boolean naturalOrder,int colToCompare){  super(new JAMonArrayComparator(colToCompare,naturalOrder));}  }
class C{  public boolean addEdge(DigraphNode node){  if (outNodes.contains(node)) {    return false;  }  outNodes.add(node);  node.inNodes.add(this);  node.incrementInDegree();  return true;}  }
class C{  public void sendSipResponse(SipResponse response) throws NetworkException {  mSipInterface.sendSipResponse(response);}  }
class C{  public String toString(){  return fileName != null ? fileName : template;}  }
class C{  public static double logOfBase(double number,int base){  return Math.log(number) / Math.log(base);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void broadcast(ChangedAttribute attribute){  if (mChangedAttributeListener != null) {    mChangedAttributeListener.receive(attribute);  }}  }
class C{  private void ok(){  Filter filter=null;  SensorMatrix sensorMatrix=null;  try {    filter=filterEditor.createFilter();  } catch (  FilterEditorException e) {    JOptionPane.showInternalMessageDialog(this,"Cannot create filter",e.getMessage(),JOptionPane.ERROR_MESSAGE);    filters.requestFocus();  }  try {    sensorMatrix=sensorMatrixEditor.createSensorMatrix(filter);  } catch (  SensorMatrixEditorException e) {    JOptionPane.showInternalMessageDialog(this,"Cannot create sensor matrix",e.getMessage(),JOptionPane.ERROR_MESSAGE);    sensorMatrices.requestFocus();  }  visionWorld.getModel().setSensorMatrix(sensorMatrix);  setVisible(false);}  }
class C{  public static String formatElapsedTime(long elapsedSeconds){  return formatElapsedTime(null,elapsedSeconds);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  TestCSVParser(Reader in){  super(in);}  }
class C{  public Matrix(double[][] values){  this.values=values;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof GraphicContentNode) {    if (children == null)     children=new ArrayList<GraphicContentNode>();    GraphicContentNode graphicContent=(GraphicContentNode)child;    graphicContent.setParentGraphicContext(createGraphicContext());    if (child instanceof GroupNode) {      if (isInsideScaleGrid()) {        throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidScaleGridGroupChild");      }    }    children.add(graphicContent);  } else {    super.addChild(child);  }}  }
class C{  public static void exceptionThrown(Object exception,String className,String methodName){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  tracer.trace.setExplicitException((Throwable)exception);}  }
class C{  public void dispose(){  form.dispose();  recordCountdownJob.cancel();}  }
class C{  private UUID[] primaryIdsForKeys(int... keys){  return idsForKeys(true,keys);}  }
class C{  public void run(){  ResultSet rs=null;  Statement stmt=null;  try {    while (!getGreenLight())     yield();    if (WITH_OUTPUT)     System.out.println("Thread " + m_myId + " started");    if (s_cType == C_SHARED)     stmt=s_sconn.createStatement(); else     if (s_cType == C_MULTIPLE) {      s_conn[m_myId]=DriverManager.getConnection(CONNECTION,UID,PWD);      stmt=s_conn[m_myId].createStatement();    } else     if (s_cType == C_PRECREATED) {      stmt=s_conn[m_myId].createStatement();    } else     if (s_cType == C_DATASOURCE) {      s_conn[m_myId]=s_ds.getConnection();      stmt=s_conn[m_myId].createStatement();    }    stmt.setFetchSize(s_fetchSize);    rs=stmt.executeQuery(STATEMENT);    while (rs.next()) {      if (s_do_yield)       yield();    }    rs.close();    rs=null;    stmt.close();    stmt=null;    if (s_cType == C_SHARED || s_cType == C_PRECREATED)     ; else {      s_conn[m_myId].close();      s_conn[m_myId]=null;    }  } catch (  Exception e) {    System.out.println("Thread " + m_myId + " got Exception: "+ e);    e.printStackTrace();    return;  }  if (WITH_OUTPUT)   System.out.println("Thread " + m_myId + " finished");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testCreateConsistencyMultithreaded() throws Exception {}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm repeatedly uses hill climbing starting " + "with a randomly generated network structure and return the best structure of the " + "various runs.";}  }
class C{  private void scheduleUpdate(){  mHandler.removeCallbacks(mCreateTinyPlanetRunnable);  mHandler.postDelayed(mCreateTinyPlanetRunnable,RENDER_DELAY_MILLIS);}  }
class C{  public static void ConvertFacilityCoordinates(String[] args){  LOG.info("Converting facility coordinates to EPSG:3857");  String input="/Volumes/Nifty/workspace/coct-data/matsim/20150930/output/ITERS/it.0/0.plans.xml.gz";  String inputCRS="WGS84_SA_Albers";  String output="/Volumes/Nifty/workspace/coct-data/matsim/businessCases/facilityMove/facilities.csv";  String outputCRS="EPSG:3857";  Map<Id<ActivityFacility>,Coord> map=new TreeMap<Id<ActivityFacility>,Coord>();  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation(inputCRS,outputCRS);  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile(input);  for (  Id<Person> pId : sc.getPopulation().getPersons().keySet()) {    Plan plan=sc.getPopulation().getPersons().get(pId).getSelectedPlan();    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        Activity act=(Activity)pe;        Id<ActivityFacility> fId=act.getFacilityId();        if (fId != null && !map.containsKey(fId)) {          map.put(fId,act.getCoord());        }      }    }  }  LOG.info("Found a total of " + map.size() + " unique facility IDs.");  BufferedWriter bw=IOUtils.getBufferedWriter(output);  try {    bw.write("facilityId,lon,lat");    bw.newLine();    for (    Id<ActivityFacility> fId : map.keySet()) {      Coord c=map.get(fId);      Coord cc=ct.transform(c);      bw.write(String.format("%s,%.2f,%.2f\n",fId.toString(),cc.getX(),cc.getY()));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + output);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + output);    }  }  LOG.info("Done converting facility coordinates.");}  }
class C{  public ShlExpr newShlExpr(Value op1,Value op2){  return new JShlExpr(op1,op2);}  }
class C{  public Builder requestTimeout(final int requestTimeout){  clientConfig.setRequestTimeout(requestTimeout);  return this;}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  public void viewTarget(String name) throws ParseException {}  }
class C{  public static boolean checkValueIsTypeNotString(Object value,Object name,Class type){  if (value != null) {    if (type.isAssignableFrom(value.getClass())) {      return true;    } else     if (value instanceof String) {      return false;    } else {      throw new RuntimeException("The value argument of '" + name + "' must be of type "+ type.getName()+ " or a String. Found: "+ value.getClass());    }  } else {    return false;  }}  }
class C{  public void resizeAndRepaint(){  revalidate();  repaint();}  }
class C{  public static SignalStrength makeSignalStrengthFromRilParcel(Parcel in){  if (DBG)   log("Size of signalstrength parcel:" + in.dataSize());  SignalStrength ss=new SignalStrength();  ss.mGsmSignalStrength=in.readInt();  ss.mGsmBitErrorRate=in.readInt();  ss.mCdmaDbm=in.readInt();  ss.mCdmaEcio=in.readInt();  ss.mEvdoDbm=in.readInt();  ss.mEvdoEcio=in.readInt();  ss.mEvdoSnr=in.readInt();  ss.mLteSignalStrength=in.readInt();  ss.mLteRsrp=in.readInt();  ss.mLteRsrq=in.readInt();  ss.mLteRssnr=in.readInt();  ss.mLteCqi=in.readInt();  ss.mTdScdmaRscp=in.readInt();  return ss;}  }
class C{  @Override public String toString(){  final StringBuffer sb=new StringBuffer();  sb.append("InterestPolicy=");  sb.append(this.interestPolicy.toString());  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toXML(Set<String> printedNodeNames){  StringBuilder stringBuilder=new StringBuilder();  if (forkNode != null && !printedNodeNames.contains(forkNode.getName())) {    stringBuilder.append(forkNode);    printedNodeNames.add(forkNode.getName());  }  if (initStepNode != null && !printedNodeNames.contains(initStepNode.getName())) {    stringBuilder.append(initStepNode);    printedNodeNames.add(initStepNode.getName());  }  if (actionNode != null) {    for (    OozieNode containingNode : actionNode.getContainingNodes()) {      if (!printedNodeNames.contains(containingNode.getName())) {        stringBuilder.append(containingNode);        printedNodeNames.add(containingNode.getName());      }    }  }  if (joinNode != null && !printedNodeNames.contains(joinNode.getName())) {    stringBuilder.append(joinNode);    printedNodeNames.add(joinNode.getName());  }  if (haltStepNode != null && !printedNodeNames.contains(haltStepNode.getName())) {    stringBuilder.append(haltStepNode);    printedNodeNames.add(haltStepNode.getName());  }  if (termStepNode != null && !printedNodeNames.contains(termStepNode.getName())) {    stringBuilder.append(termStepNode);    printedNodeNames.add(termStepNode.getName());  }  return stringBuilder.toString();}  }
class C{  public SuffixArraySample sampleTarget(final int[] targetQuery,int maxSamples){  if (targetQuery.length == 0)   return new SuffixArraySample(Collections.emptyList(),-1,-1);  int lb=findBound(targetQuery,false,true,0);  if (lb < 0)   return new SuffixArraySample(Collections.emptyList(),-1,-1);  int ub=findBound(targetQuery,false,false,lb);  assert ub >= 0;  int numHits=ub - lb + 1;  int stepSize=(numHits < maxSamples) ? 1 : numHits / maxSamples;  assert stepSize > 0;  List<SentencePair> samples=new ArrayList<>(maxSamples);  for (int i=lb; i <= ub && samples.size() < maxSamples; i+=stepSize) {    samples.add(new SentencePair(srcSuffixArray[i]));  }  return new SuffixArraySample(samples,lb,ub);}  }
class C{  public static InputStream scaleImage(String imageUrl,int width) throws IOException, InterruptedException {  Url url=new Url(imageUrl);  BufferedImage originalImage=null;  try {    originalImage=createImage(url.getBytes());  } catch (  Exception e) {    throw new IOException(e.getMessage());  }  Point size=new Point();  size.x=width;  size.y=size.x * originalImage.getHeight() / originalImage.getWidth();  BufferedImage scaledImage=Scalr.resize(originalImage,Scalr.Method.QUALITY,Scalr.Mode.AUTOMATIC,size.x,size.y,Scalr.OP_ANTIALIAS);  originalImage=null;  ImageWriter imgWrtr=null;  ImageWriteParam imgWrtrPrm=null;  if (hasTransparentPixels(scaledImage)) {    imgWrtr=ImageIO.getImageWritersByFormatName("png").next();    imgWrtrPrm=imgWrtr.getDefaultWriteParam();  } else {    BufferedImage rgb=new BufferedImage(scaledImage.getWidth(),scaledImage.getHeight(),BufferedImage.TYPE_INT_RGB);    ColorConvertOp xformOp=new ColorConvertOp(null);    xformOp.filter(scaledImage,rgb);    imgWrtr=ImageIO.getImageWritersByFormatName("jpg").next();    imgWrtrPrm=imgWrtr.getDefaultWriteParam();    imgWrtrPrm.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT);    imgWrtrPrm.setCompressionQuality(0.80f);    scaledImage=rgb;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ImageOutputStream output=ImageIO.createImageOutputStream(baos);  imgWrtr.setOutput(output);  IIOImage outputImage=new IIOImage(scaledImage,null,null);  imgWrtr.write(null,outputImage,imgWrtrPrm);  imgWrtr.dispose();  scaledImage=null;  byte[] bytes=baos.toByteArray();  output.flush();  output.close();  baos.close();  return new ByteArrayInputStream(bytes);}  }
class C{  public static void close(){  out.close();}  }
class C{  private void refill() throws IOException {  offset+=usableLength;  int leftover=length - usableLength;  System.arraycopy(buffer,usableLength,buffer,0,leftover);  int requested=buffer.length - leftover;  int returned=read(input,buffer,leftover,requested);  length=returned + leftover;  if (returned < requested)   usableLength=length; else {    usableLength=findSafeEnd();    if (usableLength < 0)     usableLength=length;  }  breaker.setText(buffer,0,Math.max(0,usableLength));}  }
class C{  static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  @Deprecated public static <N>ImmutableGraph<N> copyOf(ImmutableGraph<N> graph){  return checkNotNull(graph);}  }
class C{  public boolean canReceiveType(Gas gas){  if (stored != null && (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  private List<Header> defaultHeaders(){  DateFormat dateFormat=new SimpleDateFormat("EEE, dd mmm yyyy HH:mm:ss zzz");  List<Header> headers=new ArrayList<>();  headers.add(new BasicHeader("Date",dateFormat.format(new Date())));  return headers;}  }
class C{  public BreakpointHitParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BP_HIT);}  }
class C{  public void lookupWords(){  System.out.println("Entering word lookup mode.");  System.out.println("To index a directory, add an input path argument when you run this command.");  System.out.println();  Console console=System.console();  if (console == null) {    System.err.println("No console.");    System.exit(1);  }  while (true) {    String words=console.readLine("Enter word(s) (comma-separated, leave blank to exit): ").trim();    if (words.equals("")) {      break;    }    index.printLookup(Splitter.on(',').split(words));  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WStart.init");}  }
class C{  boolean isDrawingInProgress(){  return currentRadius > 0 && !isDrawingFinished();}  }
class C{  public boolean transport(){  return this.transport;}  }
class C{  protected void init(final int access,final String name,final String desc,final String[] exceptions){  this.access=access;  this.name=cw.newUTF8(name);  this.desc=cw.newUTF8(desc);  if (exceptions != null && exceptions.length > 0) {    exceptionCount=exceptions.length;    this.exceptions=new int[exceptionCount];    for (int i=0; i < exceptionCount; ++i) {      this.exceptions[i]=cw.newClass(exceptions[i]).index;    }  }  if (computeMaxs) {    int size=getArgumentsAndReturnSizes(desc) >> 2;    if ((access & Constants.ACC_STATIC) != 0) {      --size;    }    if (size > maxLocals) {      maxLocals=size;    }  }}  }
class C{  public TypeVariableBV typeVariable(TypeNode typeNode){  TypeVariableBV result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariableBV(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  public boolean isAutomaticConnectingRetriesForClassicConnectionsEnabled(){  return isAutomaticConnectingRetriesEnabled;}  }
class C{  public void addPutfield(String classname,String name,String desc){  addPutfield0(null,classname,name,desc);}  }
class C{  public Deleter deleteWithoutBackup(){  return ofy().delete();}  }
class C{  public final void init(Key key,AlgorithmParameters params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException {  done=false;  initialized=false;  keyStored=key;  exmechSpi.engineInit(key,params);  initialized=true;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public void mapOptions(CeylonConfig config){  setRun(DefaultToolOptions.getRunToolRun(config,Backend.Java));}  }
class C{  public synchronized void removeItem(int i){  model.remove(i);  realModel.remove(i);  editor.setText("");  ListDataEvent event=new ListDataEvent(model,ListDataEvent.INTERVAL_REMOVED,i,i);  for (int j=0; j < listeners.size(); j++) {    ListDataListener listener=listeners.get(j);    listener.intervalRemoved(event);  }}  }
class C{  private void exileInfrequentBlocks(IR ir){  int numBlocks=0;  boolean foundSome=false;  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    numBlocks++;    foundSome|=bb.getInfrequent();  }  if (!foundSome)   return;  BasicBlock[] newOrdering=new BasicBlock[numBlocks];  int idx=0;  for (BasicBlock bb=ir.cfg.firstInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (!bb.getInfrequent()) {      newOrdering[idx++]=bb;    }  }  for (BasicBlock bb=ir.cfg.firstInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (bb.getInfrequent()) {      newOrdering[idx++]=bb;    }  }  if (VM.VerifyAssertions)   VM._assert(idx == numBlocks);  if (VM.VerifyAssertions)   VM._assert(ir.cfg.entry() == newOrdering[0]);  for (int i=0; i < newOrdering.length; i++) {    Instruction lastInstr=newOrdering[i].lastRealInstruction();    BasicBlock fallthroughBlock=newOrdering[i].getFallThroughBlock();    if (fallthroughBlock != null) {      if (i == newOrdering.length - 1 || fallthroughBlock != newOrdering[i + 1]) {        newOrdering[i].appendInstruction(fallthroughBlock.makeGOTO());      }    }    if (i < newOrdering.length - 1 && lastInstr != null && lastInstr.operator() == GOTO) {      BranchOperand op=Goto.getTarget(lastInstr);      if (op.target.getBasicBlock() == newOrdering[i + 1]) {        lastInstr.remove();      }    }  }  ir.cfg.clearCodeOrder();  for (  BasicBlock bb : newOrdering) {    ir.cfg.addLastInCodeOrder(bb);  }}  }
class C{  DHPrivateKey(byte[] encodedKey) throws InvalidKeyException {  InputStream inStream=new ByteArrayInputStream(encodedKey);  try {    DerValue val=new DerValue(inStream);    if (val.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("Key not a SEQUENCE");    }    BigInteger parsedVersion=val.data.getBigInteger();    if (!parsedVersion.equals(PKCS8_VERSION)) {      throw new IOException("version mismatch: (supported: " + PKCS8_VERSION + ", parsed: "+ parsedVersion);    }    DerValue algid=val.data.getDerValue();    if (algid.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("AlgId is not a SEQUENCE");    }    DerInputStream derInStream=algid.toDerInputStream();    ObjectIdentifier oid=derInStream.getOID();    if (oid == null) {      throw new InvalidKeyException("Null OID");    }    if (derInStream.available() == 0) {      throw new InvalidKeyException("Parameters missing");    }    DerValue params=derInStream.getDerValue();    if (params.tag == DerValue.tag_Null) {      throw new InvalidKeyException("Null parameters");    }    if (params.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("Parameters not a SEQUENCE");    }    params.data.reset();    this.p=params.data.getBigInteger();    this.g=params.data.getBigInteger();    if (params.data.available() != 0) {      this.l=params.data.getInteger();    }    if (params.data.available() != 0) {      throw new InvalidKeyException("Extra parameter data");    }    this.key=val.data.getOctetString();    parseKeyBits();    this.encodedKey=encodedKey.clone();  } catch (  IOException|NumberFormatException e) {    throw new InvalidKeyException("Error parsing key encoding",e);  }}  }
class C{  public CreateBookmarkResponse createBookmarks(CreateBookmarkRequestParams request) throws RecoverPointException {  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  Set<String> wwnSet=request.getVolumeWWNSet();  if (wwnSet == null) {    throw RecoverPointException.exceptions.noWWNsFoundInRequest();  }  Set<String> unmappedWWNs=new HashSet<String>();  RecoverPointBookmarkManagementUtils bookmarkManager=new RecoverPointBookmarkManagementUtils();  Map<String,RPConsistencyGroup> rpCGMap=bookmarkManager.mapCGsForWWNs(functionalAPI,request,unmappedWWNs);  if (!unmappedWWNs.isEmpty()) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(unmappedWWNs);  }  if (rpCGMap == null) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(wwnSet);  }  return bookmarkManager.createCGBookmarks(functionalAPI,rpCGMap,request);}  }
class C{  private static void output(int[] n){  for (  int i : n) {    System.out.print(i);  }  System.out.println();}  }
class C{  public void onMove(Interaction iact){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean is64BitJVM(){  if (!IS_64_BITNESS_KNOWN) {    String arch=System.getProperty("os.arch");    String sunModel=System.getProperty("sun.arch.data.model");    IS_64_BIT_JVM="amd64".equals(arch) || "x86_64".equals(arch) || "ppc64".equals(arch)|| "64".equals(sunModel);    IS_64_BITNESS_KNOWN=true;  }  return IS_64_BIT_JVM;}  }
class C{  private void sendGlucMessageToUI(float valuetosend,boolean calibration,boolean isCalFactorFromPump){  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_GLUCMEASURE_DETECTED);        Bundle b=new Bundle();        b.putFloat("data",valuetosend);        b.putBoolean("calibrating",calibration);        b.putBoolean("isCalFactorFromPump",isCalFactorFromPump);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  private void zAdjustTableRowHeightIfNeeded(JTable table){  if (!autoAdjustMinimumTableRowHeight) {    return;  }  if ((table.getRowHeight() < minimumRowHeightInPixels)) {    table.setRowHeight(minimumRowHeightInPixels);  }}  }
class C{  public FloatPanel(){  initComponents();  jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f),null,null,Float.valueOf(0.1f)));}  }
class C{  public static BoundingBox create(Vector coords){  int length=coords.size();  if (length <= 0) {    throw new RuntimeException("There must be at least 1 coordinate.");  }  Coord[] coordsArray=new Coord[length];  coords.copyInto(coordsArray);  return create(coordsArray);}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  return of(Ordering.natural(),k1,v1);}  }
class C{  @Override public Class<? extends IContainer<?,?>> toClass(){  return type.toClass();}  }
class C{  public boolean contains(final short[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  private void applyAmbientState(){  if ((int)mCircleDiameter <= 0) {    return;  }  if (mBackgroundBitmapDark == null || mBackgroundBitmapDark.getWidth() != (int)mCircleDiameter) {    mBackgroundBitmapDark=BitmapFactory.decodeResource(getResources(),R.drawable.sample_bg_dark);    mBackgroundBitmapDark=Bitmap.createScaledBitmap(mBackgroundBitmapDark,(int)mCircleDiameter,(int)mCircleDiameter,true);  }  mCurrentBackgroundColor=Spec.SPEC_COLOR_DARK_BACKGROUND;  mCurrentBackgroundBitmap=mBackgroundBitmapDark;  mTimeTextPaint.setColor(Spec.SPEC_COLOR_DARK_TIME_TEXT);  mDateTextPaint.setColor(Spec.SPEC_COLOR_DARK_DATE_TEXT);  mMinuteHandDotPaint.setColor(Spec.SPEC_COLOR_DARK_MINUTES);  mHourHandDotPaint.setColor(Spec.SPEC_COLOR_DARK_HOURS);}  }
class C{  public Packet(int command){  this(command,null);}  }
class C{  private TCacheEntryEventCollection<K,V> createSingleEvent(TCacheEntryEvent<K,V> event){  List<CacheEntryEvent<? extends K,? extends V>> events=new ArrayList<>();  events.add(event);  TCacheEntryEventCollection<K,V> coll=new TCacheEntryEventCollection<K,V>(events,event.getEventType());  return coll;}  }
class C{  private static List<Rule> buildBaseRuleList(Map<String,String> properties){  List<Rule> ruleList=new ArrayList<Rule>();  ruleList.add(new LengthRule(NumberUtils.toInt(properties.get(PASSWORD_MIN_LENGTH),8)));  ruleList.add(CharacterRuleFactory.getCharacterRule(CharacterRuleFactory.CharacterRuleType.LOWERCASE,NumberUtils.toInt(properties.get(PASSWORD_LOWERCASE_NUMBER),1)));  ruleList.add(CharacterRuleFactory.getCharacterRule(CharacterRuleFactory.CharacterRuleType.UPPERCASE,NumberUtils.toInt(properties.get(PASSWORD_UPPERCASE_NUMBER),1)));  ruleList.add(CharacterRuleFactory.getCharacterRule(CharacterRuleFactory.CharacterRuleType.NUMERIC,NumberUtils.toInt(properties.get(PASSWORD_NUMERIC_NUMBER),1)));  ruleList.add(CharacterRuleFactory.getCharacterRule(CharacterRuleFactory.CharacterRuleType.SPECIAL,NumberUtils.toInt(properties.get(PASSWORD_SPECIAL_NUMBER),1)));  ruleList.add(new RepeatingCharacterRule(NumberUtils.toInt(properties.get(PASSWORD_REPEATING_NUMBER),3)));  if (StringUtils.equalsIgnoreCase(properties.get(PASSWORD_PREVENT_DICTIONARY),"yes")) {    ruleList.add(new DictionaryRule(new ListDictionary()));  }  return ruleList;}  }
class C{  public CharSeq forEachByte(Consumer<Byte> action){  Objects.requireNonNull(action);  eachByte().forEach(action);  return this;}  }
class C{  public long duration(){  return end - start;}  }
class C{  protected EnchantmentStorageMetaBuilder(final EnchantmentStorageMeta meta){  this.meta=meta.clone();}  }
class C{  public NotificationChain basicSetModel(Program_ newModel,NotificationChain msgs){  Program_ oldModel=model;  model=newModel;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,UmplePackage.MODEL__MODEL,oldModel,newModel);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public int size(){  return mValues.size();}  }
class C{  public static BigInteger randomExponent(){  SecureRandom sr=new SecureRandom();  byte[] sb=new byte[MOD_LEN_BYTES];  sr.nextBytes(sb);  return new BigInteger(1,sb);}  }
class C{  public static void addSuperclasses(@NotNull final Project project,@NotNull final PyClass clazz,@NotNull final PyClass... superClasses){  final Collection<String> superClassNames=new ArrayList<String>();  for (  final PyClass superClass : Collections2.filter(Arrays.asList(superClasses),NotNullPredicate.INSTANCE)) {    if (superClass.getName() != null) {      superClassNames.add(superClass.getName());      insertImport(clazz,superClass);    }  }  addSuperClassExpressions(project,clazz,superClassNames,null);}  }
class C{  public void saveBootProp() throws IOException {  if (!bootProp.equals(bootPropOrg)) {    final String propFile=jarFolder + "jar.properties";    final OutputStream os=new FileOutputStream(propFile);    try {      bootProp.store(os,"Stendhal Boot Configuration");    }  finally {      os.close();    }  }}  }
class C{  public JBBPOut Short(final short[] value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final short v : value) {      this._writeShort(v);    }  }  return this;}  }
class C{  public final String toString(int depth){  if (depth <= 0)   return "";  String ret="\n*SubstInNode: " + super.toString(depth) + "\n  instantiating module: "+ instantiatingModule.getName()+ ", instantiated module: "+ instantiatedModule.getName()+ Strings.indent(2,"\nSubstitutions:");  if (this.substs != null) {    for (int i=0; i < this.substs.length; i++) {      ret+=Strings.indent(2,Strings.indent(2,"\nSubst:" + (this.substs[i] != null ? Strings.indent(2,this.substs[i].toString(depth - 1)) : "<null>")));    }  } else {    ret+=Strings.indent(2,"<null>");  }  ret+=Strings.indent(2,"\nBody:" + Strings.indent(2,(body == null ? "<null>" : body.toString(depth - 1))));  return ret;}  }
class C{  public <U extends T,A,B>OngoingMatchingC2<T,U,A,B> when(DecomposableMatchBuilder2<U,A,B> decomposableMatchBuilder){  return new OngoingMatchingC2<>(this,decomposableMatchBuilder.build());}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public boolean hasEnoughSpace(int length){  return size + length < capacity;}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PlayerPositionEntry(Player player,KeepFreeArea keepFreeArea){  super();  this.playerName=player.getName();  this.zoneName=player.getZone().getName();  this.x=player.getX();  this.y=player.getY();  this.turn=SingletonRepository.getRuleProcessor().getTurn();  this.keepFreeArea=keepFreeArea;}  }
class C{  public AnnotatableElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public DrawerBuilder withSliderBackgroundDrawableRes(@DrawableRes int sliderBackgroundDrawableRes){  this.mSliderBackgroundDrawableRes=sliderBackgroundDrawableRes;  return this;}  }
class C{  public void addCylinder(float x,float y,float z,float radius,float length,int segments,float baseScale,float topScale){  addCylinder(x,y,z,radius,length,segments,baseScale,topScale,MR_TOP);}  }
class C{  void merge(Field other){  unused|=other.unused;  values.addAll(other.values);  if (values.contains("null") && values.size() > 1) {    values.remove("null");  }  if (values.contains("string") && values.size() > 1) {    values.remove("string");  }  if (values.contains("list")) {    for (    String s : values) {      if (s.startsWith("list of ")) {        values.remove("list");        break;      }    }  }  if (values.contains("set")) {    for (    String s : values) {      if (s.startsWith("set of ")) {        values.remove("set");        break;      }    }  }  if (other.values.contains("unused")) {    values.clear();    values.add("unused");  }}  }
class C{  public static boolean initSkinXMLHandler(){  String skinFilePath=GUIPreferences.getInstance().getSkinFile();  return initSkinXMLHandler(skinFilePath);}  }
class C{  public FolderTokenFdrLink findById(int id) throws Exception {  int idx;  FolderTokenFdrLink link=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  link=get(idx);  return link;}  }
class C{  public static double[][] copy(double[][] M){  double[][] array=new double[M.length][M[0].length];  for (int i=0; i < array.length; i++)   System.arraycopy(M[i],0,array[i],0,M[i].length);  return array;}  }
class C{  final public boolean isIsolatable(){  return isolatable;}  }
class C{  public void testRenameIndex() throws Exception {  if (!versionMeetsMinimum(5,7,1)) {    return;  }  createTable("testRenameIndex","(col1 INT, col2 INT, INDEX (col1)) ENGINE=InnoDB");  this.stmt.execute("CREATE INDEX testIdx ON testRenameIndex (col2)");  DatabaseMetaData dbmd=this.conn.getMetaData();  this.rs=dbmd.getIndexInfo(null,null,"testRenameIndex",false,true);  assertTrue("Expected 1 (of 2) indexes.",this.rs.next());  assertEquals("Wrong index name for table 'testRenameIndex'.","col1",this.rs.getString(6));  assertTrue("Expected 2 (of 2) indexes.",this.rs.next());  assertEquals("Wrong index name for table 'testRenameIndex'.","testIdx",this.rs.getString(6));  assertFalse("No more indexes expected for table 'testRenameIndex'.",this.rs.next());  this.stmt.execute("ALTER TABLE testRenameIndex RENAME INDEX col1 TO col1Index");  this.stmt.execute("ALTER TABLE testRenameIndex RENAME INDEX testIdx TO testIndex");  this.rs=dbmd.getIndexInfo(null,null,"testRenameIndex",false,true);  assertTrue("Expected 1 (of 2) indexes.",this.rs.next());  assertEquals("Wrong index name for table 'testRenameIndex'.","col1Index",this.rs.getString(6));  assertTrue("Expected 2 (of 2) indexes.",this.rs.next());  assertEquals("Wrong index name for table 'testRenameIndex'.","testIndex",this.rs.getString(6));  assertFalse("No more indexes expected for table 'testRenameIndex'.",this.rs.next());}  }
class C{  public StatementSpy(ConnectionSpy connectionSpy,Statement realStatement){  if (realStatement == null) {    throw new IllegalArgumentException("Must pass in a non null real Statement");  }  if (connectionSpy == null) {    throw new IllegalArgumentException("Must pass in a non null ConnectionSpy");  }  this.realStatement=realStatement;  this.connectionSpy=connectionSpy;  log=SpyLogFactory.getSpyLogDelegator();  if (realStatement instanceof CallableStatement) {    reportReturn("new CallableStatement");  } else   if (realStatement instanceof PreparedStatement) {    reportReturn("new PreparedStatement");  } else {    reportReturn("new Statement");  }}  }
class C{  public RegisterServer2Response clone(){  RegisterServer2Response result=new RegisterServer2Response();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  public void enableUpdate(){  enabled=true;}  }
class C{  public DefaultImportCustomizerProvider(final Set<String> extraImports,final Set<String> extraStaticImports){  this.extraStaticImports.addAll(extraStaticImports);  this.extraImports.addAll(extraImports);}  }
class C{  public void addHeader(String name,String value){  header.put(name,value);}  }
class C{  public FileReader(FileDescriptor fd){  super(new FileInputStream(fd));}  }
class C{  public void removeBookmark(final CBookmark bookmark){  Preconditions.checkNotNull(bookmark,"IE00385: Bookmark can not be null");  Preconditions.checkArgument(m_bookmarks.remove(bookmark),"IE00386: Bookmark is not managed by this manager");  for (  final IBookmarkManagerListener listener : m_listeners) {    try {      listener.removedBookmark(this,bookmark);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  @Deprecated public AccountHeaderBuilder withSelectionFistLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  public int countAll(){  return findAll().size();}  }
class C{  public Project(){  enabledPlugins=new HashMap<String,Boolean>();  configuration=UserPreferences.createDefaultUserPreferences();  analysisTargets=new LinkedList<String>();  srcDirList=new LinkedList<String>();  auxClasspathEntryList=new LinkedList<String>();  isModified=false;  currentWorkingDirectoryList=new ArrayList<File>();}  }
class C{  @SuppressWarnings("unchecked") public void writeRef(Ref x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialRef(x));  }}  }
class C{  private String[] parseLine(String nextLine,boolean multi) throws IOException {  if (!multi && pending != null) {    pending=null;  }  if (nextLine == null) {    if (pending != null) {      String s=pending;      pending=null;      return new String[]{s};    } else {      return null;    }  }  List<String> tokensOnThisLine=new ArrayList<>();  StringBuilder sb=new StringBuilder(INITIAL_READ_SIZE);  boolean inQuotes=false;  boolean fromQuotedField=false;  if (pending != null) {    sb.append(pending);    pending=null;    inQuotes=!this.ignoreQuotations;  }  for (int i=0; i < nextLine.length(); i++) {    char c=nextLine.charAt(i);    if (c == this.escape) {      if (isNextCharacterEscapable(nextLine,inQuotes(inQuotes),i)) {        i=appendNextCharacterAndAdvanceLoop(nextLine,sb,i);      }    } else     if (c == quotechar) {      if (isNextCharacterEscapedQuote(nextLine,inQuotes(inQuotes),i)) {        i=appendNextCharacterAndAdvanceLoop(nextLine,sb,i);      } else {        inQuotes=!inQuotes;        if (atStartOfField(sb)) {          fromQuotedField=true;        }        if (!strictQuotes) {          if (i > 2 && nextLine.charAt(i - 1) != this.separator && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) != this.separator) {            if (ignoreLeadingWhiteSpace && sb.length() > 0 && isAllWhiteSpace(sb)) {              sb.setLength(0);            } else {              sb.append(c);            }          }        }      }      inField=!inField;    } else     if (c == separator && !(inQuotes && !ignoreQuotations)) {      tokensOnThisLine.add(convertEmptyToNullIfNeeded(sb.toString(),fromQuotedField));      fromQuotedField=false;      sb.setLength(0);      inField=false;    } else {      if (!strictQuotes || (inQuotes && !ignoreQuotations)) {        sb.append(c);        inField=true;        fromQuotedField=true;      }    }  }  if ((inQuotes && !ignoreQuotations)) {    if (multi) {      sb.append('\n');      pending=sb.toString();      sb=null;    } else {      throw new IOException("Un-terminated quoted field at end of CSV line");    }    if (inField) {      fromQuotedField=true;    }  } else {    inField=false;  }  if (sb != null) {    tokensOnThisLine.add(convertEmptyToNullIfNeeded(sb.toString(),fromQuotedField));    fromQuotedField=false;  }  return tokensOnThisLine.toArray(new String[tokensOnThisLine.size()]);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public static void evaluateCircuitToxicity(LogicCircuit lc,GateLibrary gate_library){  ArrayList<Double> circuit_toxicity=new ArrayList<Double>();  for (int i=0; i < lc.get_output_gates().get(0).get_logics().size(); ++i) {    double row_toxicity=1.0;    for (    Gate g : lc.get_logic_gates()) {      g.set_toxtable(gate_library.get_GATES_BY_NAME().get(g.Name).get_toxtable());      evaluateGateToxicity(g);      row_toxicity=row_toxicity * g.get_toxicity().get(i);      if (row_toxicity < 0.01) {        row_toxicity=0.01;      }    }    circuit_toxicity.add(row_toxicity);  }  for (  Gate g : lc.get_output_gates()) {    g.set_toxicity(circuit_toxicity);  }}  }
class C{  public void removeComponentResources(){  FacesContext context=FacesContext.getCurrentInstance();  UIViewRoot viewRoot=context.getViewRoot();  for (  UIComponent componentResource : viewRoot.getComponentResources(context,"head")) {    viewRoot.removeComponentResource(context,componentResource,"head");  }}  }
class C{  private void kludgeMantis(Map<String,Monitor> map,StringMonitor args){  String cname="hotspot.gc.collector.0.name";  StringMonitor collector=(StringMonitor)map.get(cname);  if (collector.stringValue().compareTo("PSScavenge") == 0) {    boolean adaptiveSizePolicy=true;    cname="hotspot.vm.flags";    StringMonitor flags=(StringMonitor)map.get(cname);    String allArgs=flags.stringValue() + " " + args.stringValue();    int ahi=allArgs.lastIndexOf("+AggressiveHeap");    int aspi=allArgs.lastIndexOf("-UseAdaptiveSizePolicy");    if (ahi != -1) {      if ((aspi != -1) && (aspi > ahi)) {        adaptiveSizePolicy=false;      }    } else {      if (aspi != -1) {        adaptiveSizePolicy=false;      }    }    if (adaptiveSizePolicy) {      String eden_size="hotspot.gc.generation.0.space.0.size";      String s0_size="hotspot.gc.generation.0.space.1.size";      String s1_size="hotspot.gc.generation.0.space.2.size";      map.remove(eden_size);      map.remove(s0_size);      map.remove(s1_size);      String new_max_name="hotspot.gc.generation.0.capacity.max";      LongMonitor new_max=(LongMonitor)map.get(new_max_name);      Monitor monitor=null;      LongBuffer lb=LongBuffer.allocate(1);      lb.put(new_max.longValue());      monitor=new PerfLongMonitor(eden_size,Units.BYTES,Variability.CONSTANT,false,lb);      map.put(eden_size,monitor);      monitor=new PerfLongMonitor(s0_size,Units.BYTES,Variability.CONSTANT,false,lb);      map.put(s0_size,monitor);      monitor=new PerfLongMonitor(s1_size,Units.BYTES,Variability.CONSTANT,false,lb);      map.put(s1_size,monitor);    }  }}  }
class C{  public TreeNode buildTree(int[] inorder,int[] postorder){  if (inorder == null || postorder == null)   return null;  return buildTree(inorder,postorder,0,inorder.length - 1,0,postorder.length - 1);}  }
class C{  @Override public void removeEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  @Override public void run(){  try {    _launcher.onChildIdleBegin();    _launcher.onChildThreadLaunchBegin();    _pool.addThread(this);    runTasks();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  } finally {    _pool.removeThread(this);    _launcher.onChildIdleEnd();    _launcher.onChildThreadLaunchEnd();  }}  }
class C{  public static boolean init(final Object initableObj){  if (initableObj instanceof Initable) {    ((Initable)initableObj).init();    return true;  }  return false;}  }
class C{  private void tryAllAddresses(String dstName,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  InetAddress[] dstAddresses=InetAddress.getAllByName(dstName);  InetAddress dstAddress;  for (int i=0; i < dstAddresses.length - 1; i++) {    dstAddress=dstAddresses[i];    try {      checkDestination(dstAddress,dstPort);      startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);      return;    } catch (    IOException ex) {    }  }  dstAddress=dstAddresses[dstAddresses.length - 1];  checkDestination(dstAddress,dstPort);  startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,boolean averaging){  this(graph,new UnweightedShortestPath<V,E>(graph),averaging,true,true);}  }
class C{  private static int doRegexSearch(final Object element,final String lineText,final int lineCounter,final String localSearchString,final int startPosition,final boolean caseSensitive,final List<SearchResult> results){  final Pattern pattern=caseSensitive ? Pattern.compile(localSearchString) : Pattern.compile(localSearchString,Pattern.CASE_INSENSITIVE);  final Matcher matcher=pattern.matcher(lineText);  final boolean found=matcher.find(startPosition);  if (found) {    final int start=matcher.start();    final int end=matcher.end();    if (start != end) {      results.add(new SearchResult(element,lineCounter,start,end - start));    }    if (matcher.end() == lineText.length()) {      return -1;    }    if (start == end) {      return end + 1;    }    return end;  } else {    return -1;  }}  }
class C{  public void insertNode(int n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  protected Map<String,String> parseUri(final String uri){  final List<String> args=Arrays.asList(uri.split("&"));  Map<String,String> attributes=new HashMap<String,String>();  for (  String arg : args) {    final int index=arg.indexOf('=');    if (index != -1) {      final String key=arg.substring(0,index);      final String value=arg.length() > index + 1 ? arg.substring(index + 1) : StringUtils.EMPTY;      attributes.put(key,value);    }  }  attributes.remove(IDE_TYPE_ATTRIBUTE);  attributes.remove(IDE_EXE_ATTRIBUTE);  logger.debug("The URI attributes found are: " + attributes.entrySet().toString());  return attributes;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean[] toPrimitive(final Boolean[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BOOLEAN_ARRAY;  }  final boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].booleanValue();  }  return result;}  }
class C{  public static String lonToFileString(float lon){  String result, direction;  if (lon >= 0) {    direction="e";    lon=(float)Math.floor(lon);  } else {    direction="w";    lon=(float)Math.ceil(lon * -1);  }  java.text.DecimalFormat fd=new java.text.DecimalFormat("000");  result=direction + fd.format(lon);  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void removeProgressListener(ProgressListener listener){  listeners.removeListener(listener);}  }
class C{  public static IKnowledge serializableInstance(){  return new Knowledge2();}  }
class C{  private void handleSimpleResource(final String targetUri,final Handler<ResourceNode> handler,final Buffer data,final String eTag){  String resourceName=ExpansionDeltaUtil.extractCollectionFromPath(targetUri);  if (log.isTraceEnabled()) {    log.trace("Simple resource: " + resourceName);  }  handler.handle(new ResourceNode(resourceName,data,eTag,targetUri));}  }
class C{  private void recomputeValueToTheRoot(BFINode<E> current,InsDelUpdateStatistics stat){  assert current != null;  current.recomputeValue(stat);  if (current.parent != null) {    recomputeValueToTheRoot(current.parent,stat);  }}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,Executor executor){  this(processorType,executor,DEFAULT_SIZE,null);}  }
class C{  private JokeImgEntityForUI generateJokeIMGUI(JokeImgEntity.ResultBean.DataBean dataBean){  JokeImgEntityForUI jokeImgEntityForUI=new JokeImgEntityForUI();  jokeImgEntityForUI.setUpdatetime(dataBean.getUpdatetime());  jokeImgEntityForUI.setUnixtime(dataBean.getUnixtime());  jokeImgEntityForUI.setHashId(dataBean.getHashId());  jokeImgEntityForUI.setContent(dataBean.getContent());  jokeImgEntityForUI.setUrl(dataBean.getUrl());  return jokeImgEntityForUI;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.247 -0500",hash_original_method="D4FB68F07E4D4A1CE75ADE48CA6C5624",hash_generated_method="9A273D6D003A30C8B244DF86CFA794BD") public int quit() throws IOException {  return sendCommand(NNTPCommand.QUIT);}  }
class C{  public void characters(char[] ch,int start,int length){  String data=new String(ch,start,length);  if (data.trim().length() == 0)   return;  buff.append(data);}  }
class C{  public void testGetSet(){  final byte[] data={1,3,5,7,9,11,13,15,17,19,21,20,18,16,14,12,10,8,6,4,2,0};  for (int size=1; size < data.length; size++) {    final CompressedByteArray array=new CompressedByteArray(100,22,2,9,false);    long offset=1L;    while (offset < array.length()) {      final int safeWrite=Math.min(size,(int)(array.length() - offset));      array.set(offset,data,safeWrite);      final byte[] tmp=new byte[safeWrite + 1];      array.get(tmp,offset - 1,safeWrite + 1);      assertEquals("tmp[0]",offset == 1L ? (byte)0 : data[size - 1],tmp[0]);      for (int i=1; i <= safeWrite; i++) {        assertEquals("tmp[" + i + "]",data[i - 1],tmp[i]);      }      offset+=size;    }  }}  }
class C{  public ColladaUnsupported(String namespaceURI){  super(namespaceURI);}  }
class C{  public JobDefinitionCreateRequest createJobDefinitionCreateRequest(String namespaceCd,String jobName,String jobDescription,String activitiXml,List<Parameter> parameters){  JobDefinitionCreateRequest request=new JobDefinitionCreateRequest();  request.setNamespace(namespaceCd);  request.setJobName(jobName);  request.setDescription(jobDescription);  request.setActivitiJobXml(activitiXml);  request.setParameters(parameters);  return request;}  }
class C{  static void warning(String msg){  printMessage("warning",msg);}  }
class C{  private static String toString(byte[] ranges,int dimension){  return "[" + Float.toString(decodeMin(ranges,dimension)) + " : "+ Float.toString(decodeMax(ranges,dimension))+ "]";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF:    return identifierRef != null;}return super.eIsSet(featureID);}  }
class C{  void readTX7() throws IOException {  Debug.message("e00","E00: read TX7");  tx7=new OMGraphicList();  int[] header=new int[8];  double[] coords=new double[2];  isr.readLine();  while (true) {    String S=isr.readLine();    if (S == null)     break;    parseString(S,header,10);    if (header[0] == -1)     break;    int n=header[2];    for (int i=0; i < 8; i++)     isr.readLine();    double[] llpoints=new double[2 * n];    int k=0;    for (int j=0; j < n; j++) {      S=isr.readLine();      if (S == null)       return;      parseString(S,coords);      llpoints[k++]=coords[1];      llpoints[k++]=coords[0];    }    S=isr.readLine();    TX7 t=new TX7(llpoints,S,false,tx7Font);    if (tx7Color != null)     t.setLinePaint(tx7Color);    if (SelectTX7Color != null)     t.setSelectPaint(SelectTX7Color);    tx7.add(t);  }}  }
class C{  protected void beforeWritePersonHook(Person person){}  }
class C{  public SystemMessage(int sender){  this.sender=sender;}  }
class C{  public int evaluate(double v1,double v2){switch (value) {case CMPL_EQUAL:    return (v1 == v2) ? TRUE : FALSE;case CMPL_GREATER:  return (v1 > v2) ? TRUE : FALSE;case CMPG_LESS:return (v1 < v2) ? TRUE : FALSE;case CMPL_GREATER_EQUAL:return (v1 >= v2) ? TRUE : FALSE;case CMPG_LESS_EQUAL:return (v1 <= v2) ? TRUE : FALSE;case CMPL_NOT_EQUAL:return (v1 == v2) ? FALSE : TRUE;case CMPL_LESS:return (v1 >= v2) ? FALSE : TRUE;case CMPG_GREATER_EQUAL:return (v1 < v2) ? FALSE : TRUE;case CMPG_GREATER:return (v1 <= v2) ? FALSE : TRUE;case CMPL_LESS_EQUAL:return (v1 > v2) ? FALSE : TRUE;}throw new OptimizingCompilerException("invalid condition " + this);}  }
class C{  protected MutableAttributeSet createLargeAttributeSet(AttributeSet a){  return new SimpleAttributeSet(a);}  }
class C{  static ObjectName createMBean(ManagedResource resource,ManagedBean managed){  try {    DynamicManagedBean mb=new DynamicManagedBean(managed);    resource.setModelMBean(mb.createMBean(resource));    final ObjectName objName;    try {      objName=ObjectName.getInstance(resource.getMBeanName());    } catch (    MalformedObjectNameException e) {      throw new MalformedObjectNameException(LocalizedStrings.MBeanUtil_0_IN_1.toLocalizedString(new Object[]{e.getMessage(),resource.getMBeanName()}));    }synchronized (MBeanUtil.class) {      if (mbeanServer != null && !mbeanServer.isRegistered(objName)) {        mbeanServer.registerMBean(resource.getModelMBean(),objName);synchronized (managedResources) {          managedResources.put(objName,resource);        }      }    }    return objName;  } catch (  java.lang.Exception e) {    throw new RuntimeAdminException(LocalizedStrings.MBeanUtil_FAILED_TO_CREATE_MBEAN_FOR_0.toLocalizedString(new Object[]{resource.getMBeanName()}),e);  }}  }
class C{  public Interval dompForagingAgain(){  return new Interval(0,500E-6);}  }
class C{  public String globalInfo(){  return "Removes attributes of a given type.";}  }
class C{  public TaskResourceRep createFileSystem(FileSystemParam fileSystemParam,String token){  WebResource rRoot=createRequest(INTERNAL_FILE_CREATE);  WebResource.Builder requestBuilder=addSignature(rRoot);  TaskResourceRep resp=addToken(requestBuilder,token).post(TaskResourceRep.class,fileSystemParam);  return resp;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public void onReset(){  closeDialog();}  }
class C{  public synchronized void interruptibleWaitForFlag() throws InterruptedException {  while (!isSet) {    wait();  }}  }
class C{  public static Reference createReference(Serializable object) throws NamingException {  return createReference(object,SerializableObjectFactory.class.getName());}  }
class C{  private static String modify(final String str,final String[] set,final boolean expect){  final CharSet chars=CharSet.getInstance(set);  final StringBuilder buffer=new StringBuilder(str.length());  final char[] chrs=str.toCharArray();  final int sz=chrs.length;  for (int i=0; i < sz; i++) {    if (chars.contains(chrs[i]) == expect) {      buffer.append(chrs[i]);    }  }  return buffer.toString();}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  public final Flux<T> onErrorResumeWith(Predicate<? super Throwable> predicate,Function<? super Throwable,? extends Publisher<? extends T>> fallback){  Objects.requireNonNull(predicate,"predicate");  return onErrorResumeWith(null);}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  double te=0.0;  if (debug) {    MatrixUtils.printMatrix(System.out,destNextPastSourceVectors);  }  for (int b=0; b < totalObservations; b++) {    int[] counts=getCounts(destNextPastSourceVectors[b],b);    double logTerm=0.0;    double cont=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      logTerm=((double)counts[NEXT_PAST_SOURCE] / (double)counts[PAST_SOURCE]) / ((double)counts[NEXT_PAST] / (double)counts[PAST]);      cont=Math.log(logTerm);    }    te+=cont;    if (debug) {      System.out.println(b + ": " + destNextPastSourceVectors[b][0]+ " ("+ counts[NEXT_PAST_SOURCE]+ " / "+ counts[PAST_SOURCE]+ ") / ("+ counts[NEXT_PAST]+ " / "+ counts[PAST]+ ") = "+ logTerm+ " -> "+ (cont / Math.log(2.0))+ " -> sum: "+ (te / Math.log(2.0)));    }  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  public void test_replaceAllLjava_util_ListLjava_lang_ObjectLjava_lang_Object(){  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z";  char[] chars=string1.toCharArray();  List list=new ArrayList();  for (int i=0; i < chars.length; i++) {    list.add(new Character(chars[i]));  }  try {    Collections.replaceAll(null,new Object(),new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  boolean result=Collections.replaceAll(list,new Character('1'),new Character('Z'));  assertFalse("Test1: Collections.replaceAll() returned wrong result",result);  assertEquals("Test2 : ReplaceAll modified the list incorrectly",string1,getString(list));  result=Collections.replaceAll(list,new Character('S'),new Character('K'));  assertTrue("Test3: Collections.replaceAll() returned wrong result",result);  assertEquals("Test4: ReplaceAll modified the list incorrectly",(string1=string1.replace('S','K')),getString(list));  result=Collections.replaceAll(list,new Character('Z'),new Character('N'));  assertTrue("Test5: Collections.replaceAll() returned wrong result",result);  assertEquals("Test6: ReplaceAll modified the list incorrectly",(string1=string1.replace('Z','N')),getString(list));  result=Collections.replaceAll(list,new Character('A'),new Character('B'));  assertTrue("Test7: Collections.replaceAll() returned wrong result",result);  assertEquals("Test8: ReplaceAll modified the list incorrectly",(string1=string1.replace('A','B')),getString(list));  LinkedList smallList=new LinkedList();  for (int i=0; i < 10; i++) {    smallList.add(objArray[i]);  }  smallList.set(4,new Integer(5));  result=Collections.replaceAll(smallList,new Integer(5),null);  assertTrue("Test9: Collections.replaceAll() returned wrong result",result);  for (int i=0; i < smallList.size(); i++) {    if (i == 4 || i == 5)     assertSame("Test9: ReplaceAll didn't replace element at " + i,null,smallList.get(i)); else     assertEquals("Test9: ReplaceAll shouldn't have replaced element at " + i,new Integer(i),smallList.get(i));  }  result=Collections.replaceAll(smallList,null,new Integer(99));  assertTrue("Test10: Collections.replaceAll() returned wrong result",result);  for (int i=0; i < smallList.size(); i++) {    if (i == 4 || i == 5)     assertEquals("Test10: ReplaceAll didn't replace element at " + i,new Integer(99),smallList.get(i)); else     assertEquals("Test10: ReplaceAll shouldn't have replaced element at " + i,new Integer(i),smallList.get(i));  }  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("First");  mal.add("Second");  try {    Collections.replaceAll(mal,"Second",null);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.SOUND);  rpclass.add(DefinitionClass.ATTRIBUTE,"sound",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"radius",Type.INT);  rpclass.add(DefinitionClass.ATTRIBUTE,"volume",Type.INT);  rpclass.add(DefinitionClass.ATTRIBUTE,"layer",Type.BYTE);}  }
class C{  @Override public void onInitSearchText(String text){  mInput.setText(text);  ViewUtil.setEditTextSelectionToEnd(mInput);  mTvClear.setVisibility(View.VISIBLE);}  }
class C{  public static double toRadians(double x){  if (Double.isInfinite(x) || x == 0.0) {    return x;  }  final double facta=0.01745329052209854;  final double factb=1.997844754509471E-9;  double xa=doubleHighPart(x);  double xb=x - xa;  double result=xb * factb + xb * facta + xa * factb + xa * facta;  if (result == 0) {    result*=x;  }  return result;}  }
class C{  static void createFileFromResource(String resource,Resource file) throws IOException {  createFileFromResource(resource,file,null);}  }
class C{  private void returnLocation(){  Intent i=new Intent();  if (setClear || (read_only && mLatLng == null)) {    i.putExtra(FormEntryActivity.LOCATION_RESULT,"");    setResult(RESULT_OK,i);  } else   if (mIsDragged || read_only || location_from_intent) {    i.putExtra(FormEntryActivity.LOCATION_RESULT,mLatLng.getLatitude() + " " + mLatLng.getLongitude()+ " "+ 0+ " "+ 0);    setResult(RESULT_OK,i);  } else   if (mLocation != null) {    i.putExtra(FormEntryActivity.LOCATION_RESULT,mLocation.getLatitude() + " " + mLocation.getLongitude()+ " "+ mLocation.getAltitude()+ " "+ mLocation.getAccuracy());    setResult(RESULT_OK,i);  } else {    i.putExtra(FormEntryActivity.LOCATION_RESULT,"");    setResult(RESULT_OK,i);  }  finish();}  }
class C{  public DefaultUserProjectReference(Codenvy codenvy,ProjectReference project,UserWorkspace workspace){  this.codenvy=codenvy;  this.project=project;  this.workspace=workspace;  String fullID=workspace.id() + project.name();  this.sha1Id=sha1("p",fullID);}  }
class C{  public void processResponse(StunResponseEvent response){  socketDelegate.processResponse(response);}  }
class C{  public void add(Chip chip){  mAdapter.add(chip);}  }
class C{  public boolean isMessageIdRequired(){  return false;}  }
class C{  private Polygon buildDummyPolygon(){  GeometryFactory gf=new GeometryFactory();  Coordinate c1=new Coordinate(0.0,0.0);  Coordinate c2=new Coordinate(0.0,100);  Coordinate c3=new Coordinate(100,100);  Coordinate c4=new Coordinate(100,0.0);  Coordinate[] ca={c1,c2,c3,c4,c1};  return gf.createPolygon(ca);}  }
class C{  public void reposition(Point2D point){  double w=bbox.getWidth();  double h=bbox.getHeight();  body.setTransform(new Vec2(toMeters(point.getX() + w / 2),toMeters(appHeight - (point.getY() + h / 2))),body.getAngle());}  }
class C{  public static GraphRequest newUploadPhotoRequest(AccessToken accessToken,Bitmap image,Callback callback){  Bundle parameters=new Bundle(1);  parameters.putParcelable(PICTURE_PARAM,image);  return new GraphRequest(accessToken,MY_PHOTOS,parameters,HttpMethod.POST,callback);}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public DefaultLabelLayouts(){  this.populateMap();}  }
class C{  private MethodFinder(String name,Class<?>[] args){  super(args);  this.name=name;}  }
class C{  public Parameter(String[] s) throws ec.util.BadParameterException {  if (s.length == 0)   throw new BadParameterException("Parameter created with length 0");  for (int x=0; x < s.length; x++) {    if (s[x] == null)     throw new BadParameterException("Parameter created with null string");    if (x == 0)     param=s[x]; else     param+=(delimiter + s[x]);  }}  }
class C{  public void onExitButton(@SuppressWarnings("UnusedParameters") View aView){  finish();}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(flags);}  }
class C{  public void addOpcode(int code){  add(code);  growStack(STACK_GROW[code]);}  }
class C{  public Loader error(int drawable){  displayDefualtDawable.set(drawable);  ;  return this;}  }
class C{  public boolean isVoidReturn(){  return returnsVoid;}  }
class C{  @Override public boolean isEncrypted(){  return priv == null && (super.isEncrypted() || (parent != null && parent.isEncrypted()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean hasDeleteDistributionPermission(){  return hasReadDistributionPermission() && permissionService.hasPermission(SpPermission.DELETE_REPOSITORY);}  }
class C{  private void subclassLogWrapper(String logString){  try {    log(logString);  } catch (  Throwable t) {  }}  }
class C{  public void addAll(int... values){  for (  int value : values) {    add(value);  }}  }
class C{  public URLLabel(final String url,final Icon icon){  this.url=url;  setText(null);  setIcon(icon);  setToolTipText(url);  installListener(GUIUtils.getURLInputListener(url));}  }
class C{  public DateConverter(final String defaultFormat,final String[] acceptableFormats,final boolean lenient){  this(defaultFormat,acceptableFormats,UTC,lenient);}  }
class C{  public void pop() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: pop from empty virtual stack");  vstack.pop();  if (vstack.empty())   get_from_real();}  }
class C{  private boolean eitherLinkIsShorterThanThreshold(Link linkA,Link linkB,double thresholdLength){  boolean hasShortLink=false;  if (linkA.getLength() < thresholdLength || linkB.getLength() < thresholdLength) {    hasShortLink=true;  }  return hasShortLink;}  }
class C{  public static String translateMessage(String code) throws MessageTranslatorException {  return translateMessage(code,null);}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  @Override public void handleStart(Operation start){  TransactionServiceState s=start.getBody(TransactionServiceState.class);  s.taskSubStage=s.taskSubStage == null ? SubStage.COLLECTING : s.taskSubStage;  s.options=s.options == null ? new Options() : s.options;  s.servicesToCoordinators=s.servicesToCoordinators == null ? new LinkedHashMap<>() : s.servicesToCoordinators;  s.readLinks=s.readLinks == null ? new HashSet<>() : s.readLinks;  s.modifiedLinks=s.modifiedLinks == null ? new HashSet<>() : s.modifiedLinks;  s.createdLinks=s.createdLinks == null ? new HashSet<>() : s.createdLinks;  s.deletedLinks=s.deletedLinks == null ? new HashSet<>() : s.deletedLinks;  s.failedLinks=new HashSet<>();  setState(start,s);  allocateResolutionService(start);}  }
class C{  private double callTestFitnessFunctionForTrace(ExecutionTrace targetTrace,TestFitnessFunction targetFitness){  ExecutionTrace originalTrace=result.getTrace();  result.setTrace(targetTrace);  double fitness=targetFitness.getFitness(individual,result);  result.setTrace(originalTrace);  return fitness;}  }
class C{  public void add(double value){  if (value < lower || Double.isNaN(lower)) {    lower=value;  }  if (value > upper || Double.isNaN(upper)) {    upper=value;  }}  }
class C{  private void persistBatch(){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("NucleotideSequenceLoader.persistBatch() method has been called.");  }  if (sequencesAwaitingInsertion.size() > 0) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Persisting " + sequencesAwaitingInsertion.size() + " nucleotide sequences");    }    nucleotideSequenceDAO.insertNewNucleotideSequences(sequencesAwaitingInsertion);    sequencesAwaitingInsertion.clear();  }}  }
class C{  public int position(){  return buff.position();}  }
class C{  public void reset(){  n=0;  m=0.0;  s=0.0;  max=Double.NEGATIVE_INFINITY;  min=Double.POSITIVE_INFINITY;}  }
class C{  public static int unsignedShortToIntLittleEndian(byte[] buffer,int index){  int r=buffer[index] & 0xFF;  r|=(buffer[index + 1] & 0xFF) << 8;  return r;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.852 -0500",hash_original_method="E96E49B49C2326325B1DB743C3D726B3",hash_generated_method="2242ED01989DEB572508493F2D887498") public HostPort hostPort(boolean allowWS) throws ParseException {  if (debug)   dbg_enter("hostPort");  try {    Host host=this.host();    HostPort hp=new HostPort();    hp.setHost(host);    if (allowWS)     lexer.SPorHT();    if (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);switch (la) {case ':':        lexer.consume(1);      if (allowWS)       lexer.SPorHT();    try {      String port=lexer.number();      hp.setPort(Integer.parseInt(port));    } catch (    NumberFormatException nfe) {      throw new ParseException(lexer.getBuffer() + " :Error parsing port ",lexer.getPtr());    }  break;case ',':case ';':case '?':case '>':case ' ':case '\t':case '\r':case '\n':case '/':break;case '%':if (stripAddressScopeZones) {break;}default :if (!allowWS) {throw new ParseException(lexer.getBuffer() + " Illegal character in hostname:" + lexer.lookAhead(0),lexer.getPtr());}}}return hp;}  finally {if (debug) dbg_leave("hostPort");}}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  private static void checkTypeSafe(Object o){  try {    o=(RoleUnresolved)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  protected Object engineGetParameter(String param) throws InvalidParameterException {  if (param == null) {    throw new NullPointerException("param == null");  }  return null;}  }
class C{  public boolean isCrosses(int dimensionOfGeometryA,int dimensionOfGeometryB){  if ((dimensionOfGeometryA == Dimension.P && dimensionOfGeometryB == Dimension.L) || (dimensionOfGeometryA == Dimension.P && dimensionOfGeometryB == Dimension.A) || (dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.A)) {    return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && isTrue(matrix[Location.INTERIOR][Location.EXTERIOR]);  }  if ((dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.P) || (dimensionOfGeometryA == Dimension.A && dimensionOfGeometryB == Dimension.P) || (dimensionOfGeometryA == Dimension.A && dimensionOfGeometryB == Dimension.L)) {    return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && isTrue(matrix[Location.EXTERIOR][Location.INTERIOR]);  }  if (dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.L) {    return matrix[Location.INTERIOR][Location.INTERIOR] == 0;  }  return false;}  }
class C{  private void addCSSClasses(SVGPlot svgp,int clusterID,double opac){  final StyleLibrary style=context.getStyleLibrary();  ColorLibrary colors=style.getColorSet(StyleLibrary.PLOT);  CSSClass cls=new CSSClass(this,CLUSTERAREA + clusterID);  final String color=colors.getColor(clusterID);  cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,color);  cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,opac);  svgp.addCSSClassOrLogError(cls);}  }
class C{  public static String createSubstituteString(AttributedCharacterIterator aci){  int start=aci.getBeginIndex();  int end=aci.getEndIndex();  int numChar=end - start;  StringBuffer substString=new StringBuffer(numChar);  for (int i=start; i < end; i++) {    char c=aci.setIndex(i);    if (!arabicChar(c)) {      substString.append(c);      continue;    }    Integer form=(Integer)aci.getAttribute(ARABIC_FORM);    if (charStartsLigature(c) && (i + 1 < end)) {      char nextChar=aci.setIndex(i + 1);      Integer nextForm=(Integer)aci.getAttribute(ARABIC_FORM);      if (form != null && nextForm != null) {        if (form.equals(ARABIC_TERMINAL) && nextForm.equals(ARABIC_INITIAL)) {          int substChar=ArabicTextHandler.getSubstituteChar(c,nextChar,ARABIC_ISOLATED.intValue());          if (substChar > -1) {            substString.append((char)substChar);            i++;            continue;          }        } else         if (form.equals(ARABIC_TERMINAL)) {          int substChar=ArabicTextHandler.getSubstituteChar(c,nextChar,ARABIC_TERMINAL.intValue());          if (substChar > -1) {            substString.append((char)substChar);            i++;            continue;          }        } else         if (form.equals(ARABIC_MEDIAL) && nextForm.equals(ARABIC_MEDIAL)) {          int substChar=ArabicTextHandler.getSubstituteChar(c,nextChar,ARABIC_MEDIAL.intValue());          if (substChar > -1) {            substString.append((char)substChar);            i++;            continue;          }        }      }    }    if (form != null && form.intValue() > 0) {      int substChar=getSubstituteChar(c,form.intValue());      if (substChar > -1) {        c=(char)substChar;      }    }    substString.append(c);  }  return substString.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.479 -0500",hash_original_method="995C0E9A95F93D2E12F98717831D2FCB",hash_generated_method="AB05D3ED66A072D29C95A7328E33FA85") private RotateDrawable(RotateState rotateState,Resources res){  mState=new RotateState(rotateState,this,res);}  }
class C{  public boolean isCanApproveOwnDoc(){  Object oo=get_Value(COLUMNNAME_IsCanApproveOwnDoc);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Image loadPreviewImage(Entity entity,Image camo,int tint,Component bp){  Image base=mechTileset.imageFor(entity,boardview,-1);  EntityImage entityImage=new EntityImage(base,tint,camo,bp);  entityImage.loadFacings();  Image preview=entityImage.getFacing(entity.getFacing());  MediaTracker loadTracker=new MediaTracker(boardview);  loadTracker.addImage(preview,0);  try {    loadTracker.waitForID(0);  } catch (  InterruptedException e) {  }  return preview;}  }
class C{  private List<BucketRecommendation> selectMatchingStoragePool(VirtualPool vpool,List<Recommendation> poolRecommends){  List<BucketRecommendation> baseResult=new ArrayList<BucketRecommendation>();  for (  Recommendation recommendation : poolRecommends) {    BucketRecommendation rec=new BucketRecommendation(recommendation);    URI storageUri=recommendation.getSourceStorageSystem();    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageUri);    if (!Type.isObjectStorageSystem(StorageSystem.Type.valueOf(storage.getSystemType()))) {      continue;    }    baseResult.add(rec);  }  List<BucketRecommendation> finalResult=null;  if (!baseResult.isEmpty()) {    finalResult=new ArrayList<BucketRecommendation>();    storagePoolSort(baseResult);    StoragePool pool=_dbClient.queryObject(StoragePool.class,baseResult.get(0).getSourceStoragePool());    Integer baseDC=pool.getDataCenters();    for (    BucketRecommendation bkRec : baseResult) {      URI storagePoolUri=bkRec.getSourceStoragePool();      pool=_dbClient.queryObject(StoragePool.class,storagePoolUri);      if (pool.getDataCenters() == baseDC) {        finalResult.add(bkRec);      } else {        break;      }    }  } else {    finalResult=baseResult;  }  return finalResult;}  }
class C{  public void triangulate(PointSet ps){  _triangulations.clear();  _triangulations.add(ps);  start();}  }
class C{  @Deprecated public static MaxCore forFolder(String folderName){  return storedLocally(new File(folderName));}  }
class C{  public void removeAnnotation(int index){  mAnnotations.remove(index);  mStringXY.removeByIndex(index);}  }
class C{  public VersionedMessage(MessageVersion version,T message){  this.version=version;  this.message=message;}  }
class C{  public static boolean isDefaultSmsApp(Context context){  return !hasKitKat() || context.getPackageName().equals(Telephony.Sms.getDefaultSmsPackage(context));}  }
class C{  IntTree<V> changeKeysBelow(final long key,final int delta){  if (size == 0 || delta == 0)   return this;  if (this.key < key)   return new IntTree<V>(this.key + delta,value,left,right.changeKeysAbove(key - this.key,-delta));  IntTree<V> newLeft=left.changeKeysBelow(key - this.key,delta);  if (newLeft == left)   return this;  return new IntTree<V>(this.key,value,newLeft,right);}  }
class C{  public FilterEditorsComboBoxModel(){  super();  selection=FilterEditors.VALUES.get(0);}  }
class C{  public XNetReply(String message){  super();  setBinary(true);  byte b[]=jmri.util.StringUtil.bytesFromHexString(message);  if (b.length == 0) {    _nDataChars=0;    _dataChars=null;    return;  }  _nDataChars=b.length;  _dataChars=new int[_nDataChars];  for (int i=0; i < b.length; i++) {    setElement(i,(b[i] & 0xff));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns09.class,args);}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  public void pushFinally(){  push(FINALLY);}  }
class C{  public IllinoisLemmatizer(){  this(true);}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  String parameter=event.getParameter(PARAM_SPEC_NAME);  Spec spec=null;  if (parameter != null) {    spec=ToolboxHandle.getSpecByName(parameter);  } else {    spec=ToolboxHandle.getCurrentSpec();  }  if (spec == null) {    TLCUIActivator.getDefault().logWarning("BUG: no spec");    return null;  }  IProject specProject=spec.getProject();  SpecObj specObject=spec.getRootModule();  if (specObject == null) {    TLCUIActivator.getDefault().logWarning("BUG: no specObject");    return null;  }  ILaunchManager launchManager=DebugPlugin.getDefault().getLaunchManager();  ILaunchConfigurationType launchConfigurationType=launchManager.getLaunchConfigurationType(TLCModelLaunchDelegate.LAUNCH_CONFIGURATION_TYPE);  final InputDialog dialog=new InputDialog(UIHelper.getShellProvider().getShell(),"New model...","Please input the name of the model to create",spec.getAdapter(TLCSpec.class).getModelNameSuggestion(),new ModelNameValidator(spec));  dialog.setBlockOnOpen(true);  if (dialog.open() != Window.OK) {    return null;  }  final String modelName=dialog.getValue();  ModuleNode moduleNode=specObject.getExternalModuleTable().getRootModule();  List constants=ModelHelper.createConstantsList(moduleNode);  Iterator iter=constants.iterator();  boolean done=false;  while ((!done) && iter.hasNext()) {    Assignment assign=(Assignment)iter.next();    if (assign.getLabel().equals("defaultInitValue") && (assign.getParams().length == 0)) {      assign.setRight("defaultInitValue");      done=true;    }  }  try {    ILaunchConfigurationWorkingCopy launchCopy=launchConfigurationType.newInstance(specProject,specProject.getName() + Model.SPEC_MODEL_DELIM + modelName);    launchCopy.setAttribute(SPEC_NAME,spec.getName());    launchCopy.setAttribute(MODEL_NAME,modelName);    if (constants.size() == 0) {      launchCopy.setAttribute(MODEL_PARAMETER_CONSTANTS,(List)null);    } else {      launchCopy.setAttribute(MODEL_PARAMETER_CONSTANTS,ModelHelper.serializeAssignmentList(constants));    }    OpDefNode[] defs=moduleNode.getOpDefs();    boolean foundSpec=false;    boolean foundInit=false;    boolean foundNext=false;    boolean foundTermination=false;    boolean checkTermination=false;    for (int i=0; i < defs.length; i++) {      if (defs[i].getNumberOfArgs() == 0) {        if (defs[i].getName().toString().equals("Spec") && (defs[i].getLevel() == LevelNode.TemporalLevel)) {          foundSpec=true;        } else         if (defs[i].getName().toString().equals("Init") && (defs[i].getLevel() == LevelNode.VariableLevel)) {          foundInit=true;        } else         if (defs[i].getName().toString().equals("Next") && (defs[i].getLevel() == LevelNode.ActionLevel)) {          foundNext=true;        } else         if (defs[i].getName().toString().equals("Termination") && (defs[i].getLevel() == LevelNode.TemporalLevel)) {          foundTermination=true;          IFile ifile=spec.getRootFile();          FileEditorInput fileEditorInput=new FileEditorInput(ifile);          FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();          try {            fileDocumentProvider.connect(fileEditorInput);            IDocument document=fileDocumentProvider.getDocument(fileEditorInput);            FindReplaceDocumentAdapter searchAdapter=new FindReplaceDocumentAdapter(document);            IRegion matchRegionx=searchAdapter.find(0,"PlusCal[\\s]*options[\\s]*\\([^\\)]*termination",true,true,false,true);            if (matchRegionx != null) {              checkTermination=true;              Activator.getDefault().logDebug("Set checkTermination true for " + ifile.getName());            } else {              IPreferenceStore projectPreferenceStore=PreferenceStoreHelper.getProjectPreferenceStore(ifile.getProject());              String paramString=projectPreferenceStore.getString(IPreferenceConstants.PCAL_CAL_PARAMS);              checkTermination=(paramString.indexOf("-termination") != -1);              TLCUIActivator.getDefault().logDebug("checkTermination = " + checkTermination);            }          } catch (          CoreException e) {          }catch (          BadLocationException e) {          } finally {            fileDocumentProvider.disconnect(fileEditorInput);          }        }      }    }    if (foundSpec) {      launchCopy.setAttribute(IModelConfigurationConstants.MODEL_BEHAVIOR_CLOSED_SPECIFICATION,"Spec");      launchCopy.setAttribute(IModelConfigurationConstants.MODEL_BEHAVIOR_SPEC_TYPE,IModelConfigurationDefaults.MODEL_BEHAVIOR_TYPE_SPEC_CLOSED);      if (foundTermination) {        Vector vec=new Vector();        launchCopy.setAttribute(MODEL_PROPERTIES_EXPAND,"set");        vec.add((checkTermination ? "1" : "0") + "Termination");        launchCopy.setAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_PROPERTIES,vec);      }    } else     if (foundInit || foundNext) {      launchCopy.setAttribute(IModelConfigurationConstants.MODEL_BEHAVIOR_SPEC_TYPE,IModelConfigurationDefaults.MODEL_BEHAVIOR_TYPE_SPEC_INIT_NEXT);      if (foundInit) {        launchCopy.setAttribute(IModelConfigurationConstants.MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT,"Init");      }      if (foundNext) {        launchCopy.setAttribute(IModelConfigurationConstants.MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT,"Next");      }    }    Vector overrides=new Vector();    for (int i=0; i < defs.length; i++) {      OpDefNode node=defs[i];      ExprNode nodeBody=node.getBody();      while (nodeBody instanceof SubstInNode) {        nodeBody=((SubstInNode)nodeBody).getBody();      }      if (nodeBody instanceof OpApplNode) {        OpApplNode nodeBodyA=(OpApplNode)nodeBody;        if (nodeBodyA.getOperator().getName().toString().equals("$UnboundedChoose")) {          FormalParamNode chooseParam=nodeBodyA.getUnbdedQuantSymbols()[0];          ExprOrOpArgNode chooseBody=nodeBodyA.getArgs()[0];          if (chooseBody instanceof OpApplNode) {            OpApplNode chooseBodyA=(OpApplNode)chooseBody;            boolean toOverride=false;            String topOpName=chooseBodyA.getOperator().getName().toString();            if (topOpName.equals("\\notin")) {              ExprOrOpArgNode leftArg=chooseBodyA.getArgs()[0];              if (leftArg instanceof OpApplNode) {                OpApplNode leftArgA=(OpApplNode)leftArg;                if (leftArgA.getOperator() == chooseParam) {                  toOverride=true;                }              }            } else             if (topOpName.equals("\\lnot")) {              ExprOrOpArgNode notArg=chooseBodyA.getArgs()[0];              if (notArg instanceof OpApplNode) {                OpApplNode notArgA=(OpApplNode)notArg;                if (notArgA.getOperator().getName().equals("\\in")) {                  ExprOrOpArgNode leftArg=notArgA.getArgs()[0];                  if (leftArg instanceof OpApplNode) {                    OpApplNode leftArgA=(OpApplNode)leftArg;                    if (leftArgA.getOperator() == chooseParam) {                      toOverride=true;                    }                  }                }              }            }            if (toOverride) {              String defName=node.getName().toString();              overrides.addElement(defName + ";;" + defName+ ";1;0");            }          }        }      }    }    if (overrides.size() != 0) {      launchCopy.setAttribute(MODEL_PARAMETER_DEFINITIONS,overrides);    }    ILaunchConfiguration launchSaved=launchCopy.doSave();    HashMap parameters=new HashMap();    parameters.put(OpenModelHandler.PARAM_MODEL_NAME,modelName);    UIHelper.runCommand(OpenModelHandler.COMMAND_ID,parameters);    return launchSaved;  } catch (  CoreException e) {    TLCUIActivator.getDefault().logError("Error creating a model",e);  }  return null;}  }
class C{  public void updateArticle(final String articleId,final JSONObject article) throws ServiceException {  final Transaction transaction=articleRepository.beginTransaction();  try {    final String authorId=article.optString(Article.ARTICLE_AUTHOR_ID);    final JSONObject author=userRepository.get(authorId);    article.put(Article.ARTICLE_COMMENTABLE,Boolean.valueOf(article.optBoolean(Article.ARTICLE_COMMENTABLE)));    final JSONObject oldArticle=articleRepository.get(articleId);    processTagsForArticleUpdate(oldArticle,article,author);    String articleTitle=article.optString(Article.ARTICLE_TITLE);    articleTitle=Emotions.toAliases(articleTitle);    article.put(Article.ARTICLE_TITLE,articleTitle);    String articleContent=article.optString(Article.ARTICLE_CONTENT);    articleContent=Emotions.toAliases(articleContent);    article.put(Article.ARTICLE_CONTENT,articleContent);    userRepository.update(author.optString(Keys.OBJECT_ID),author);    articleRepository.update(articleId,article);    transaction.commit();  } catch (  final Exception e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates an article[id=" + articleId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.732 -0500",hash_original_method="08D03C59DE669D3068C0B765E743FE8E",hash_generated_method="508A411C3534EE152489F1C3E4C79E3A") public boolean show(String initialQuery,boolean selectInitialQuery,ComponentName componentName,Bundle appSearchData){  boolean success=doShow(initialQuery,selectInitialQuery,componentName,appSearchData);  if (success) {    mSearchAutoComplete.showDropDownAfterLayout();  }  return success;}  }
class C{  public static void addInsets(@NotNull JComponent component,int top,int left,int bottom,int right){  addBorder(component,BorderFactory.createEmptyBorder(top,left,bottom,right));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.768 -0500",hash_original_method="A48399D0F4A852A63A3C3FE959923362",hash_generated_method="2A1EC91856AB3B43A7F7823037671A1C") public static Bitmap decodeStream(InputStream is,Rect outPadding,Options opts){  if (is == null) {    return null;  }  if (!is.markSupported()) {    is=new BufferedInputStream(is,16 * 1024);  }  is.mark(1024);  Bitmap bm;  if (is instanceof AssetManager.AssetInputStream) {    bm=nativeDecodeAsset(((AssetManager.AssetInputStream)is).getAssetInt(),outPadding,opts);  } else {    byte[] tempStorage=null;    if (opts != null)     tempStorage=opts.inTempStorage;    if (tempStorage == null)     tempStorage=new byte[16 * 1024];    bm=nativeDecodeStream(is,tempStorage,outPadding,opts);  }  if (bm == null && opts != null && opts.inBitmap != null) {    throw new IllegalArgumentException("Problem decoding into existing bitmap");  }  return finishDecode(bm,outPadding,opts);}  }
class C{  public boolean isValid(){  if (!_parameters.hasParameter("mode") || !"store_request".equals(_parameters.getParameterValue("mode"))) {    _log.warn("Invalid mode value in store_request: " + _parameters.getParameterValue("mode"));    return false;  }  return super.isValid();}  }
class C{  public ByteBaseCompression(int range){  assert range <= 256 && range > 0;  final int minBits=CompressedByteArray.minBits(range);  if (minBits == 8) {    mByteChunks=new ByteChunks(0);    mBytes=null;  } else {    mBytes=new CompressedByteArray(0,range,true);    mByteChunks=null;  }  mPointers=new LongChunks(1);  mPointers.set(0,0);  mFrozen=false;}  }
class C{  public DataSource<CloseableReference<PooledByteBuffer>> fetchEncodedImage(ImageRequest imageRequest,Object callerContext){  Preconditions.checkNotNull(imageRequest.getSourceUri());  try {    Producer<CloseableReference<PooledByteBuffer>> producerSequence=mProducerSequenceFactory.getEncodedImageProducerSequence(imageRequest);    if (imageRequest.getResizeOptions() != null) {      imageRequest=ImageRequestBuilder.fromRequest(imageRequest).setResizeOptions(null).build();    }    return submitFetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  protected long parseDate(Calendar calendar) throws IOException {  int ch=skipWhitespace();  int year=0;  for (int i=0; i < 4; i++) {    if (ch >= '0' && ch <= '9')     year=10 * year + ch - '0'; else     throw expectedChar("year",ch);    ch=read();  }  int month=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     month=10 * month + ch - '0'; else     throw expectedChar("month",ch);    ch=read();  }  int day=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     day=10 * day + ch - '0'; else     throw expectedChar("day",ch);    ch=read();  }  if (ch != 'T')   throw expectedChar("`T'",ch);  ch=read();  int hour=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     hour=10 * hour + ch - '0'; else     throw expectedChar("hour",ch);    ch=read();  }  int minute=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     minute=10 * minute + ch - '0'; else     throw expectedChar("minute",ch);    ch=read();  }  int second=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     second=10 * second + ch - '0'; else     throw expectedChar("second",ch);    ch=read();  }  int ms=0;  if (ch == '.') {    ch=read();    while (ch >= '0' && ch <= '9') {      ms=10 * ms + ch - '0';      ch=read();    }  }  for (; ch > 0 && ch != '<'; ch=read()) {  }  _peek=ch;  calendar.set(Calendar.YEAR,year);  calendar.set(Calendar.MONTH,month - 1);  calendar.set(Calendar.DAY_OF_MONTH,day);  calendar.set(Calendar.HOUR_OF_DAY,hour);  calendar.set(Calendar.MINUTE,minute);  calendar.set(Calendar.SECOND,second);  calendar.set(Calendar.MILLISECOND,ms);  return calendar.getTime().getTime();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION__STATEMENT:    setStatement((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void handleCSSEngineEvent(CSSEngineEvent evt){  hasNewACI=false;  int[] properties=evt.getProperties();  for (int i=0; i < properties.length; ++i) {switch (properties[i]) {case SVGCSSEngine.BASELINE_SHIFT_INDEX:case SVGCSSEngine.DIRECTION_INDEX:case SVGCSSEngine.DISPLAY_INDEX:case SVGCSSEngine.FONT_FAMILY_INDEX:case SVGCSSEngine.FONT_SIZE_INDEX:case SVGCSSEngine.FONT_STRETCH_INDEX:case SVGCSSEngine.FONT_STYLE_INDEX:case SVGCSSEngine.FONT_WEIGHT_INDEX:case SVGCSSEngine.GLYPH_ORIENTATION_HORIZONTAL_INDEX:case SVGCSSEngine.GLYPH_ORIENTATION_VERTICAL_INDEX:case SVGCSSEngine.KERNING_INDEX:case SVGCSSEngine.LETTER_SPACING_INDEX:case SVGCSSEngine.TEXT_ANCHOR_INDEX:case SVGCSSEngine.UNICODE_BIDI_INDEX:case SVGCSSEngine.WORD_SPACING_INDEX:case SVGCSSEngine.WRITING_MODE_INDEX:{        if (!hasNewACI) {          hasNewACI=true;          computeLaidoutText(ctx,e,getTextNode());        }        break;      }  }}cssProceedElement=evt.getElement();super.handleCSSEngineEvent(evt);cssProceedElement=null;}  }
class C{  public ModbusIOException(){}  }
class C{  static VMThrowable fillInStackTrace(Throwable parent){  if (!VM.fullyBooted) {    return null;  } else   if (RVMThread.getCurrentThread().isCollectorThread()) {    VM.sysWriteln("Exception in GC thread");    RVMThread.dumpVirtualMachine();    return null;  }  try {    StackTrace stackTrace=new StackTrace();    return new VMThrowable(stackTrace);  } catch (  OutOfMemoryError oome) {    return null;  }catch (  Throwable t) {    VM.sysFail("VMThrowable.fillInStackTrace(): Cannot fill in a stack trace; got a weird Throwable when I tried to");    return null;  }}  }
class C{  public void appendXML(Element toElement,boolean hideDefault,Document doc){  for (  String key : keyToTypeMap.keySet()) {    String value=keyToValueMap.get(key);    ParameterType type=keyToTypeMap.get(key);    Element paramElement;    if (type != null) {      paramElement=type.getXML(key,value,hideDefault,doc);    } else {      paramElement=doc.createElement("parameter");      paramElement.setAttribute("key",key);      paramElement.setAttribute("value",value.toString());    }    if (paramElement != null) {      toElement.appendChild(paramElement);    }  }}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  return intersects(cell.getRectBound());}  }
class C{  public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,handler);}  }
class C{  public void testEnumerateAll() throws Exception {  int numTerms=0;  int numWords=0;  int lastWordId=-1;  int lastSourceId=-1;  TokenInfoDictionary tid=TokenInfoDictionary.getInstance();  ConnectionCosts matrix=ConnectionCosts.getInstance();  FST<Long> fst=tid.getFST().getInternalFST();  IntsRefFSTEnum<Long> fstEnum=new IntsRefFSTEnum<>(fst);  InputOutput<Long> mapping;  IntsRef scratch=new IntsRef();  while ((mapping=fstEnum.next()) != null) {    numTerms++;    IntsRef input=mapping.input;    char chars[]=new char[input.length];    for (int i=0; i < chars.length; i++) {      chars[i]=(char)input.ints[input.offset + i];    }    assertTrue(UnicodeUtil.validUTF16String(new String(chars)));    Long output=mapping.output;    int sourceId=output.intValue();    assertTrue(sourceId > lastSourceId);    lastSourceId=sourceId;    tid.lookupWordIds(sourceId,scratch);    for (int i=0; i < scratch.length; i++) {      numWords++;      int wordId=scratch.ints[scratch.offset + i];      assertTrue(wordId > lastWordId);      lastWordId=wordId;      String baseForm=tid.getBaseForm(wordId,chars,0,chars.length);      assertTrue(baseForm == null || UnicodeUtil.validUTF16String(baseForm));      String inflectionForm=tid.getInflectionForm(wordId);      assertTrue(inflectionForm == null || UnicodeUtil.validUTF16String(inflectionForm));      if (inflectionForm != null) {        assertNotNull(ToStringUtil.getInflectedFormTranslation(inflectionForm));      }      String inflectionType=tid.getInflectionType(wordId);      assertTrue(inflectionType == null || UnicodeUtil.validUTF16String(inflectionType));      if (inflectionType != null) {        assertNotNull(ToStringUtil.getInflectionTypeTranslation(inflectionType));      }      int leftId=tid.getLeftId(wordId);      int rightId=tid.getRightId(wordId);      matrix.get(rightId,leftId);      tid.getWordCost(wordId);      String pos=tid.getPartOfSpeech(wordId);      assertNotNull(pos);      assertTrue(UnicodeUtil.validUTF16String(pos));      assertNotNull(ToStringUtil.getPOSTranslation(pos));      String pronunciation=tid.getPronunciation(wordId,chars,0,chars.length);      assertNotNull(pronunciation);      assertTrue(UnicodeUtil.validUTF16String(pronunciation));      String reading=tid.getReading(wordId,chars,0,chars.length);      assertNotNull(reading);      assertTrue(UnicodeUtil.validUTF16String(reading));    }  }  if (VERBOSE) {    System.out.println("checked " + numTerms + " terms, "+ numWords+ " words.");  }}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  public static boolean isQueueFlusherThread(){  return OGLRenderQueue.isQueueFlusherThread();}  }
class C{  public boolean isUseDeltasEnabled(){  return useDeltas;}  }
class C{  @Override public boolean discardArrived(String clientHandle,String id){  db=mqttDb.getWritableDatabase();  traceHandler.traceDebug(TAG,"discardArrived{" + clientHandle + "}, {"+ id+ "}");  int rows;  String[] selectionArgs=new String[2];  selectionArgs[0]=id;  selectionArgs[1]=clientHandle;  try {    rows=db.delete(ARRIVED_MESSAGE_TABLE_NAME,MqttServiceConstants.MESSAGE_ID + "=? AND " + MqttServiceConstants.CLIENT_HANDLE+ "=?",selectionArgs);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"discardArrived",e);    throw e;  }  if (rows != 1) {    traceHandler.traceError(TAG,"discardArrived - Error deleting message {" + id + "} from database: Rows affected = "+ rows);    return false;  }  int count=getArrivedRowCount(clientHandle);  traceHandler.traceDebug(TAG,"discardArrived - Message deleted successfully. - messages in db for this clientHandle " + count);  return true;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  private static void displayDomainJoinStatusData() throws Exception {  try {    CasIdmClient idmClient=new CasIdmClient(HOSTNAME);    ActiveDirectoryJoinInfo joinInfo=idmClient.getActiveDirectoryJoinStatus();    System.out.println("********** DOMAIN JOIN INFORMATION **********\n");    displayParamNameAndValue("Domain Join Status",joinInfo.getJoinStatus().toString());    if (joinInfo.getName() != null)     displayParamNameAndValue("Domain Name",joinInfo.getName());    if (joinInfo.getAlias() != null)     displayParamNameAndValue("Domain Alias",joinInfo.getAlias());    if (joinInfo.getDn() != null)     displayParamNameAndValue("DN",joinInfo.getDn());    Collection<DomainTrustsInfo> trustsInfo=idmClient.getDomainTrustInfo();    if (trustsInfo != null) {      Iterator<DomainTrustsInfo> it=trustsInfo.iterator();      System.out.println("\n********** TRUSTED DOMAINS INFORMATION**********\n");      System.out.println("\nNO OF TRUSTED DOMAINS : " + trustsInfo.size());      while (it.hasNext()) {        DomainTrustsInfo e=it.next();        if (e != null && e.dcInfo != null) {          displayParamNameAndValue("\nDOMAIN NAME",e.dcInfo.domainName);          displayParamNameAndValue("    Domain NetBiosName",e.dcInfo.domainNetBiosName);          displayParamNameAndValue("    Domain IPAddress",e.dcInfo.domainIpAddress);          displayParamNameAndValue("    Domain FQDN",e.dcInfo.domainFQDN);          displayParamNameAndValue("    Domain DnsForestName",e.dcInfo.domainDnsForestName);          displayParamNameAndValue("    Domain isInBound",e.IsInBound ? "True" : "False");          displayParamNameAndValue("    Domain IsOutBound",e.IsOutBound ? "True" : "False");          displayParamNameAndValue("    Domain IsInforest",e.IsInforest ? "True" : "False");          displayParamNameAndValue("    Domain IsPrimary",e.IsPrimary ? "True" : "False");          displayParamNameAndValue("    Domain IsNativeMode",e.IsNativeMode ? "True" : "False");          displayParamNameAndValue("    Domain isExternal",e.isExternal ? "True" : "False");        }      }    } else {      System.out.println("\n**********NO TRUSTED DOMAINS INFORMATION**********");    }  } catch (  Exception ex) {    System.out.println("Display domain JoinStatus and TrustInfo failed : " + ex.getMessage());    ex.printStackTrace();  }}  }
class C{  public static void printRootCauseStackTrace(Throwable throwable,PrintStream stream){  if (throwable == null) {    return;  }  if (stream == null) {    throw new IllegalArgumentException("The PrintStream must not be null");  }  String trace[]=getRootCauseStackTrace(throwable);  for (int i=0; i < trace.length; i++) {    stream.println(trace[i]);  }  stream.flush();}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  try {    int resultLen=0;    if (outOff + bufOff > out.length) {      throw new OutputLengthException("output buffer too short for doFinal()");    }    if (bufOff != 0) {      if (!partialBlockOkay) {        throw new DataLengthException("data not block size aligned");      }      cipher.processBlock(buf,0,buf,0);      resultLen=bufOff;      bufOff=0;      System.arraycopy(buf,0,out,outOff,resultLen);    }    return resultLen;  }  finally {    reset();  }}  }
class C{  public PropertyListFormatException(String message){  super(message);}  }
class C{  private PaletteEntry createConnectionEntry(String itemName,Class<?> clazz,String icon){  ImageDescriptor image=null;  if (icon != null) {    image=DBPlugin.getImageDescriptor(icon);  }  ConnectionCreationToolEntry entry=new ConnectionCreationToolEntry(itemName,itemName,new SimpleFactory(clazz),image,image);  return entry;}  }
class C{  public Endpoint basicGetFromEndpoint(){  return fromEndpoint;}  }
class C{  public int encodeTilePixels(int[] pixels,Rectangle newRect,byte[] bpixels){  return 0;}  }
class C{  protected void engineReset(){  messageLength=0;  buffer[BYTES_OFFSET]=0;  buffer[HASH_OFFSET]=H0;  buffer[HASH_OFFSET + 1]=H1;  buffer[HASH_OFFSET + 2]=H2;  buffer[HASH_OFFSET + 3]=H3;  buffer[HASH_OFFSET + 4]=H4;}  }
class C{  public double theta(final double spot,final double maturity){  QL.require(maturity > 0.0,"non negative maturity required");  if (maturity == 0.0)   return 0.0;  return -(Math.log(discount) * value() + Math.log(forward / spot) * spot * delta(spot) + 0.5 * variance * spot* spot* gamma(spot)) / maturity;}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  private static void initializeDefaults(IPreferenceStore store,Command cmd){  store.setDefault(PreferenceEntry.preferenceTargetOpen.getString(),cmd.getOpenCmd());  store.setDefault(PreferenceEntry.preferenceTargetRun.getString(),cmd.getRunCmd());  store.setDefault(PreferenceEntry.preferenceTargetExplore.getString(),cmd.getExploreCmd());  store.setDefault(PreferenceEntry.preferenceTargetCopyPath.getString(),cmd.getCopyPathCmd());  store.setDefault(PreferenceEntry.preferenceListId.getString(),cmd.getId() - 1);  store.setDefault(PreferenceEntry.preferenceListString.getString(),cmd.name());  store.setDefault(PreferenceEntry.preferenceQuotes.getString(),Quotes.quotesNo.name());  store.setDefault(PreferenceEntry.preferenceDebug.getString(),Debug.debugNo.name());  store.setDefault(PreferenceEntry.preferenceTokenizer.getString(),Tokenizer.EasyShellTokenizerYes.name());}  }
class C{  private void storeFileHashCache(Properties props){  File cacheFile=new File(this.targetDirectory,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new BufferedOutputStream(new FileOutputStream(cacheFile))){    props.store(out,null);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }}  }
class C{  public Configuration(){  initComponents();}  }
class C{  public synchronized CompletableFuture<Void> kill(){  if (state == State.CLOSED)   return CompletableFuture.completedFuture(null);  if (closeFuture == null) {    closeFuture=session.kill().whenComplete(null);  }  return closeFuture;}  }
class C{  private TBSCertList(int version,AlgorithmIdentifier signature,Name issuer,Date thisUpdate,Date nextUpdate,List<RevokedCertificate> revokedCertificates,Extensions crlExtensions,byte[] encoding){  this.version=version;  this.signature=signature;  this.issuer=issuer;  this.thisUpdate=thisUpdate;  this.nextUpdate=nextUpdate;  this.revokedCertificates=revokedCertificates;  this.crlExtensions=crlExtensions;  this.encoding=encoding;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(", definitionName_1: ");  result.append(definitionName_1);  result.append(')');  return result.toString();}  }
class C{  public void writeToFile(String filename){  GridUtils.writeSpatialGridTable(this,filename);}  }
class C{  protected void checkArgs(final BOp[] args){}  }
class C{  @Override public int compareTo(ProjectedEnergy o){  return Double.compare(projectedEnergy,o.projectedEnergy);}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String meterToString(OFInstructionMeter inst,Logger log){  return STR_SUB_GOTO_METER_METER_ID + "=" + Long.toString(inst.getMeterId());}  }
class C{  private T cacheMiss(final NT nt){  T resource=null;  final AtomicReference<IIndexManager> foundOn=new AtomicReference<IIndexManager>();  final Properties properties=locateResource(nt.getName(),nt.getTimestamp(),foundOn);  if (properties == null) {    if (delegate != null) {      if (INFO) {        log.info("Not found - passing to delegate: " + nt);      }      resource=delegate.locate(nt.getName(),nt.getTimestamp());      if (resource != null) {        if (INFO) {          log.info("delegate answered: " + resource);        }        return resource;      }    }    return null;  }  if (log.isDebugEnabled()) {    log.debug(properties.toString());  }  final String className=properties.getProperty(RelationSchema.CLASS);  if (className == null) {    return null;  }  final Class<? extends T> cls;  try {    cls=(Class<? extends T>)Class.forName(className);  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }  if (log.isDebugEnabled()) {    log.debug("Implementation class=" + cls.getName());  }  resource=newInstance(cls,foundOn.get(),nt,properties);  return resource;}  }
class C{  protected Node newNode(){  return new SVGOMDocument();}  }
class C{  public static String makeResourcePath(String bucket,String key){  if (bucket != null) {    return bucket + "/" + (key != null ? OSSUtils.urlEncodeKey(key) : "");  } else {    return null;  }}  }
class C{  public static Map<String,Object> createPartyContactMechPurpose(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  String errMsg=null;  Locale locale=(Locale)context.get("locale");  if (result.size() > 0) {    return result;  }  String contactMechId=(String)context.get("contactMechId");  String contactMechPurposeTypeId=(String)context.get("contactMechPurposeTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue tempVal=null;  try {    tempVal=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).filterByDate("contactFromDate","contactThruDate","purposeFromDate","purposeThruDate").queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    tempVal=null;  }  if (UtilValidate.isEmpty(fromDate)) {    fromDate=UtilDateTime.nowTimestamp();  }  if (tempVal != null) {    errMsg=UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_new_purpose_already_exists",locale);    errMsg+=": " + tempVal.getPrimaryKey().toString();    return ServiceUtil.returnError(errMsg);  } else {    GenericValue newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",fromDate));    try {      delegator.create(newPartyContactMechPurpose);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_add_purpose_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  }  result.put("fromDate",fromDate);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static FloatArray2D convolveSeparable(FloatArray2D input,float[] h,float[] v){  FloatArray2D output=new FloatArray2D(input.width,input.height);  FloatArray2D temp=new FloatArray2D(input.width,input.height);  int hl=h.length / 2;  int vl=v.length / 2;  int xl=input.width - h.length + 1;  int yl=input.height - v.length + 1;  int[] xb=new int[h.length + hl - 1];  int[] xa=new int[h.length + hl - 1];  for (int i=0; i < xb.length; ++i) {    xb[i]=flipInRange(i - hl,input.width);    xa[i]=flipInRange(i + xl,input.width);  }  int[] yb=new int[v.length + vl - 1];  int[] ya=new int[v.length + vl - 1];  for (int i=0; i < yb.length; ++i) {    yb[i]=input.width * flipInRange(i - vl,input.height);    ya[i]=input.width * flipInRange(i + yl,input.height);  }  xl+=hl;  yl+=vl;  int rl=input.height * input.width;  for (int r=0; r < rl; r+=input.width) {    for (int x=hl; x < xl; ++x) {      int c=x - hl;      float val=0;      for (int xk=0; xk < h.length; ++xk) {        val+=h[xk] * input.data[r + c + xk];      }      temp.data[r + x]=val;    }    for (int x=0; x < hl; ++x) {      float valb=0;      float vala=0;      for (int xk=0; xk < h.length; ++xk) {        valb+=h[xk] * input.data[r + xb[x + xk]];        vala+=h[xk] * input.data[r + xa[x + xk]];      }      temp.data[r + x]=valb;      temp.data[r + x + xl]=vala;    }  }  rl=yl * temp.width;  int vlc=vl * temp.width;  for (int x=0; x < temp.width; ++x) {    for (int r=vlc; r < rl; r+=temp.width) {      float val=0;      int c=r - vlc;      int rk=0;      for (int yk=0; yk < v.length; ++yk) {        val+=v[yk] * temp.data[c + rk + x];        rk+=temp.width;      }      output.data[r + x]=val;    }    for (int y=0; y < vl; ++y) {      int r=y * temp.width;      float valb=0;      float vala=0;      for (int yk=0; yk < v.length; ++yk) {        valb+=h[yk] * temp.data[yb[y + yk] + x];        vala+=h[yk] * temp.data[ya[y + yk] + x];      }      output.data[r + x]=valb;      output.data[r + rl + x]=vala;    }  }  return output;}  }
class C{  public T addHighlightedField(String name,int fragmentSize,int numberOfFragments){  highlightBuilder().field(name,fragmentSize,numberOfFragments);  return (T)this;}  }
class C{  public static String[] decode(final String[] encodedValues){  return decode(encodedValues,DEFAULT_ENCODING);}  }
class C{  public void addPriorityHandler(WarningHandler handler){  _priorityHandlers.add(handler);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.830 -0400",hash_original_method="187DE99AA0E1DE90079EFA680A537E40",hash_generated_method="1C74B89D172F15018116D3ADD78FF4C3") public static void appendWithCrlf(StringBuilder str1,String str2){  if (str1.length() > 0 && str2.length() > 0) {    str1.append("\r\n\r\n");  }  str1.append(str2);}  }
class C{  public void init(FileInputStream is){  _is=is;}  }
class C{  private void createAdvanceBillDetails(List<EgBillDetails> billDetails,BigDecimal currentInstallmentDemand,HashMap<String,Integer> orderMap,Ptdemand ptDemand,PropertyTaxBillable billable,List<Installment> advanceInstallments,Installment dmdDetInstallment){  BillDetailBean billDetailBean=null;  BigDecimal advanceCollection=demandGenericDAO.getBalanceByDmdMasterCodeInst(ptDemand,DEMANDRSN_CODE_ADVANCE,getModule(),dmdDetInstallment);  if (advanceCollection.compareTo(BigDecimal.ZERO) < 0) {    advanceCollection=advanceCollection.abs();  }  BigDecimal partiallyCollectedAmount=advanceCollection.remainder(currentInstallmentDemand);  Integer noOfAdvancesPaid=(advanceCollection.subtract(partiallyCollectedAmount).divide(currentInstallmentDemand)).intValue();  LOGGER.debug("getBilldetails - advanceCollection = " + advanceCollection + ", noOfAdvancesPaid="+ noOfAdvancesPaid);  String key=null;  DateTime installmentDate=null;  Installment installment=null;  if (noOfAdvancesPaid < MAX_ADVANCES_ALLOWED) {    for (int i=noOfAdvancesPaid; i < advanceInstallments.size(); i++) {      installment=advanceInstallments.get(i);      installmentDate=new DateTime(installment.getInstallmentYear().getTime());      key=installmentDate.getMonthOfYear() + "/" + installmentDate.getYear()+ "-"+ DEMANDRSN_CODE_ADVANCE;      billDetailBean=new BillDetailBean(installment,orderMap.get(key),key,i == noOfAdvancesPaid ? currentInstallmentDemand.subtract(partiallyCollectedAmount) : currentInstallmentDemand,GLCODE_FOR_ADVANCE,DEMANDRSN_STR_ADVANCE,Integer.valueOf(0),PURPOSE.ADVANCE_AMOUNT.toString());      billDetails.add(createBillDet(billDetailBean));    }  } else {    LOGGER.debug("getBillDetails - All advances are paid...");  }}  }
class C{  public static void checkInputValueTypes(Map<String,Object> inputs){  for (  Entry<String,Object> entry : inputs.entrySet()) {    checkInputValueType(entry.getKey(),entry.getValue());  }}  }
class C{  public void addAll(Iterable<? extends Number> values){  for (  Number value : values) {    add(value.doubleValue());  }}  }
class C{  public ExitEvent createExitEvent(){  ExitEventImpl exitEvent=new ExitEventImpl();  return exitEvent;}  }
class C{  public Object visit(ASTVarNode node,Object data){  if (symTab == null) {    String message="Could not evaluate " + node.getName() + ": ";    message+="the symbol table is null";    addToErrorList(message);    return data;  }  stack.push(symTab.get(node.getName()));  return data;}  }
class C{  public static void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  protected String dumpRemainingTokenQueue(){  int q=m_queueMark;  String returnMsg;  if (q < m_ops.getTokenQueueSize()) {    String msg="\n Remaining tokens: (";    while (q < m_ops.getTokenQueueSize()) {      String t=(String)m_ops.m_tokenQueue.elementAt(q++);      msg+=(" '" + t + "'");    }    returnMsg=msg + ")";  } else {    returnMsg="";  }  return returnMsg;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    Color fg=this.fg;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        fg=Color.decode(s);      } catch (      NumberFormatException nfe) {      }    }    if (fg != null) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setForeground(attr,fg);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  this.buildReport(organizationId,result,false);}  }
class C{  public void add(VCardProperty property,List<Warning> warnings){  this.warnings.putAll(property,warnings);}  }
class C{  private void defineLists(UIDefaults d){  String p="List";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".background",d.get("seaGlassLightBackground"));  d.put(p + ".dropLineColor",d.get("seaGlassFocus"));  d.put(p + ".rendererUseListColors",Boolean.TRUE);  d.put(p + ".rendererUseUIBorder",Boolean.TRUE);  d.put(p + ".cellNoFocusBorder",new BorderUIResource(BorderFactory.createEmptyBorder(2,5,2,5)));  d.put(p + ".focusCellHighlightBorder",new BorderUIResource(new PainterBorder("Tree:TreeCell[Enabled+Focused].backgroundPainter",new Insets(2,5,2,5))));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled+Selected].textBackground",Color.WHITE);  d.put(p + "[Disabled].textForeground",d.get("seaGlassDisabledText"));  p="List:\"List.cellRenderer\"";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + "[Disabled].textForeground",d.get("seaGlassDisabledText"));  d.put(p + "[Disabled].background",d.get("seaGlassSelectionBackground"));}  }
class C{  static CopyState readCopyState(DataInput in) throws IOException {  byte[] infosBytes=new byte[in.readVInt()];  in.readBytes(infosBytes,0,infosBytes.length);  long gen=in.readVLong();  long version=in.readVLong();  Map<String,FileMetaData> files=readFilesMetaData(in);  int count=in.readVInt();  Set<String> completedMergeFiles=new HashSet<>();  for (int i=0; i < count; i++) {    completedMergeFiles.add(in.readString());  }  long primaryGen=in.readVLong();  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);}  }
class C{  @Field(0) public int image_channel_order(){  return this.io.getIntField(this,0);}  }
class C{  public OkHttpDownloader(final File cacheDir,final long maxSize){  this(new OkHttpClient());  try {    urlFactory.client().setCache(new com.squareup.okhttp.Cache(cacheDir,maxSize));  } catch (  IOException ignored) {  }}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  str=str.append("  c" + (int)m_ClassValue + " := ");  Enumeration<Test> e=new WekaEnumeration<Test>(m_RuleList);  if (e.hasMoreElements()) {    Test test=e.nextElement();    str=str.append(test.toPrologString());  }  while (e.hasMoreElements()) {    Test test=e.nextElement();    str=str.append(", " + test.toPrologString());  }  return str.toString();}  }
class C{  public void startServerLocation(InternalDistributedSystem distributedSystem) throws IOException {  if (isServerLocator()) {    throw new IllegalStateException(LocalizedStrings.InternalLocator_SERVER_LOCATION_IS_ALREADY_RUNNING_FOR_0.toLocalizedString(this));  }  logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_STARTING_SERVER_LOCATION_FOR_0,this));  if (distributedSystem == null) {    distributedSystem=InternalDistributedSystem.getConnectedInstance();    if (distributedSystem == null) {      throw new IllegalStateException(LocalizedStrings.InternalLocator_SINCE_SERVER_LOCATION_IS_ENABLED_THE_DISTRIBUTED_SYSTEM_MUST_BE_CONNECTED.toLocalizedString());    }  }  this.productUseLog.monitorUse(distributedSystem);  ServerLocator sl=new ServerLocator(getPort(),this.bindAddress,this.hostnameForClients,this.logFile,this.productUseLog,getConfig().getName(),distributedSystem,stats);  this.handler.addHandler(LocatorListRequest.class,sl);  this.handler.addHandler(ClientConnectionRequest.class,sl);  this.handler.addHandler(QueueConnectionRequest.class,sl);  this.handler.addHandler(ClientReplacementRequest.class,sl);  this.handler.addHandler(GetAllServersRequest.class,sl);  this.handler.addHandler(LocatorStatusRequest.class,sl);  this.serverLocator=sl;  if (!server.isAlive()) {    startTcpServer();  }}  }
class C{  public boolean isResponseAvailable(int timeout) throws IOException {  LOG.trace("enter HttpConnection.isResponseAvailable(int)");  if (!this.isOpen) {    return false;  }  boolean result=false;  if (this.inputStream.available() > 0) {    result=true;  } else {    try {      this.socket.setSoTimeout(timeout);      inputStream.mark(1);      int byteRead=inputStream.read();      if (byteRead != -1) {        inputStream.reset();        LOG.debug("Input data available");        result=true;      } else {        LOG.debug("Input data not available");      }    } catch (    InterruptedIOException e) {      if (!ExceptionUtil.isSocketTimeoutException(e)) {        throw e;      }      if (LOG.isDebugEnabled()) {        LOG.debug("Input data not available after " + timeout + " ms");      }    } finally {      try {        socket.setSoTimeout(this.params.getSoTimeout());      } catch (      IOException ioe) {        LOG.debug("An error ocurred while resetting soTimeout, we will assume that" + " no response is available.",ioe);        result=false;      }    }  }  return result;}  }
class C{  private void KeyAddition(long[] rk){  A0^=rk[0];  A1^=rk[1];  A2^=rk[2];  A3^=rk[3];}  }
class C{  public static String[] splitLongString(String longString,int chunksize){  longString=longString.substring(1,longString.length() - 1);  int chunks=(longString.length() / chunksize) + (longString.length() % chunksize == 0 ? 0 : 1);  String[] result=new String[chunks];  int index=0;  while (longString.length() > chunksize) {    result[index]="'" + longString.substring(0,chunksize) + "'";    longString=longString.substring(chunksize);    index++;  }  result[index]="'" + longString + "'";  return result;}  }
class C{  public static double mean2(Connection conn,double... values){  conn.getClass();  double sum=0;  for (  double x : values) {    sum+=x;  }  return sum / values.length;}  }
class C{  public CircularRedirectException(final String message){  super(message);}  }
class C{  private boolean checkTrainCanDrop(Car car,Track track){  if (track.getTrackType().equals(Track.INTERCHANGE) || track.getTrackType().equals(Track.SPUR)) {    if (track.getDropOption().equals(Track.TRAINS) || track.getDropOption().equals(Track.EXCLUDE_TRAINS)) {      if (track.acceptsDropTrain(_train)) {        log.debug("Car ({}) can be droped by train to track ({})",car.toString(),track.getName());      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarTrain"),new Object[]{car.toString(),_train.getName(),track.getTrackTypeName(),track.getName()}));        return false;      }    }    if (track.getDropOption().equals(Track.ROUTES) || track.getDropOption().equals(Track.EXCLUDE_ROUTES)) {      if (track.acceptsDropRoute(_train.getRoute())) {        log.debug("Car ({}) can be droped by route to track ({})",car.toString(),track.getName());      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarRoute"),new Object[]{car.toString(),_train.getRoute().getName(),track.getTrackTypeName(),track.getName()}));        return false;      }    }  }  return true;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","luibe");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void commit(Detail detail){  Namespace namespace=detail.getNamespace();  if (namespace != null) {    decorator.set(namespace);  }}  }
class C{  public Coin(Outpoint outpoint,TransactionOutput output){  this.outpoint=outpoint;  this.output=output;}  }
class C{  public TransitionData(S source,S target,E event){  this(source,target,null,event,null,null,null,null,TransitionKind.EXTERNAL,null);}  }
class C{  protected ExpressionParsingException(ParserRuleContext ctx,String i18n,Object... arguments){  super(I18N.getErrorMessage(i18n,arguments));  this.ctx=ctx;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenGroups[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [group").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ").append(m_al);  }  buffer.append("]");  return buffer.toString();}  }
class C{  public XYBoxAnnotation(double x0,double y0,double x1,double y1){  this(x0,y0,x1,y1,new BasicStroke(1.0f),Color.black);}  }
class C{  protected void addBasicDefaults(LookAndFeelAddons addon,List defaults){}  }
class C{  synchronized boolean isPageAvailable(final int rawPage){  return fileAcces.linearParser.isPageAvailable(rawPage,getIO());}  }
class C{  public void closeContacts(EvolutionState state,int result){}  }
class C{  public void paint(Graphics g){  g.drawRect(0,0,getSize().width - 1,getSize().height - 1);  g.drawString(this.buffer.toString(),5,15);}  }
class C{  public File templateFile(){  return mTemplateFile;}  }
class C{  public TokenCredential(SamlToken token){  this(token,false);}  }
class C{  @Deprecated public synchronized void removePlugin(Plugin plugin){  int location=mPlugins.indexOf(plugin);  if (location != -1) {    mPlugins.remove(location);  }}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);}  }
class C{  public boolean validate(String gstoolType,String gstoolSubtype){  try {    GstoolTypeMapper.getVeriniceType(gstoolType,gstoolSubtype);  } catch (  GstoolTypeNotFoundException e) {    addToUnknownTypes(gstoolType,gstoolSubtype);    return false;  }  return true;}  }
class C{  protected Resource testApplication(){  Properties properties=new Properties();  try {    properties.load(new ClassPathResource("integration-test-app.properties").getInputStream());  } catch (  IOException e) {    throw new RuntimeException("Failed to determine which version of spring-cloud-deployer-spi-test-app to use",e);  }  return new MavenResource.Builder(mavenProperties).groupId("org.springframework.cloud").artifactId("spring-cloud-deployer-spi-test-app").classifier("exec").version(properties.getProperty("version")).extension("jar").build();}  }
class C{  public static void main(String[] args){  Environment t=new Environment();  if (args.length == 0) {    System.err.println("Usage: java weka.core.Environment <string> <string> ...");  } else {    try {      for (      String arg : args) {        String newS=t.substitute(arg);        System.out.println("Original string:\n" + arg + "\n\nNew string:\n"+ newS);      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  @Override public boolean isScraped(){  if (!scraped) {    if (!plot.isEmpty() && !(year.isEmpty() || year.equals("0")) && !(genres == null || genres.size() == 0)&& !(actors == null || actors.size() == 0)) {      return true;    }  }  return scraped;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public static RRSIGRecord sign(RRset rrset,DNSKEYRecord key,PrivateKey privkey,Date inception,Date expiration) throws DNSSECException {  return sign(rrset,key,privkey,inception,expiration,null);}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private void positionLeftRight(Component c,int targetWidth,int bottom,int top){  int y=top + c.getStyle().getMargin(false,Component.TOP);  int h=bottom - top - c.getStyle().getMargin(false,Component.TOP)- c.getStyle().getMargin(false,Component.BOTTOM);  if (scaleEdges) {    c.setY(y);    c.setHeight(h);  } else {    int ph=c.getPreferredH();    if (ph < h) {      c.setHeight(ph);      c.setY(y + (h - ph) / 2);    } else {      c.setY(y);      c.setHeight(h);    }  }  c.setWidth(Math.min(targetWidth,c.getPreferredW()));}  }
class C{  public static void checkForLibraryVersion(Class modelClass,int modelVersion){  if (modelVersion > VersionID) {    System.out.println("MCA WARNING: " + modelClass.getName() + " needs a newer version of the library ("+ modelVersion+ "). Things could go wrong!");  }}  }
class C{  private static boolean isEmpty(String field){  if (field == null || field.isEmpty()) {    return true;  }  return false;}  }
class C{  public void showError(){  graphic(new ImageView(Notifications.class.getResource("/org/controlsfx/dialog/dialog-error.png").toExternalForm()));  show();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.DOUBLE_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public Intent replaceExtras(Bundle extras){  mExtras=extras != null ? new Bundle(extras) : null;  return this;}  }
class C{  public static ActivityFacilities readFacilities(String path2Facilities){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  FacilitiesReaderMatsimV1 reader=new FacilitiesReaderMatsimV1(scenario);  reader.readFile(path2Facilities);  return scenario.getActivityFacilities();}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  this.lastEvent=event;}  }
class C{  private PreparedStatement prepareStatement(AbstractGeneratedKeysQuery query) throws SQLException {  if (query.generatesKeys()) {    return prepareStatement(query.getQueryString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,ResultSet.CLOSE_CURSORS_AT_COMMIT,false,true);  } else {    return prepareStatement(query.getQueryString());  }}  }
class C{  public void updateRowId(int columnIndex,RowId x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public String convertRoutingTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public StrBuilder delete(int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  int len=endIndex - startIndex;  if (len > 0) {    deleteImpl(startIndex,endIndex,len);  }  return this;}  }
class C{  Set<String> processNames(){  Set<String> names=new HashSet<String>();  addProcessNames(loads,names);  addProcessNames(initializations,names);  return names;}  }
class C{  protected void addBox(ChunkProcessor obj,float xs,float ys,float zs,float xe,float ye,float ze,Transform trans,String[] mtlSides,UV[][] uvSides){  Vertex[] vertices=new Vertex[4];{    vertices[0]=new Vertex(xs,ye,ze);    vertices[1]=new Vertex(xe,ye,ze);    vertices[2]=new Vertex(xe,ye,zs);    vertices[3]=new Vertex(xs,ye,zs);    obj.addFace(vertices,uvSides == null ? null : uvSides[0],trans,mtlSides[0]);  }{    vertices[0]=new Vertex(xe,ys,zs);    vertices[1]=new Vertex(xs,ys,zs);    vertices[2]=new Vertex(xs,ye,zs);    vertices[3]=new Vertex(xe,ye,zs);    obj.addFace(vertices,uvSides == null ? null : uvSides[1],trans,mtlSides[1]);  }{    vertices[0]=new Vertex(xs,ys,ze);    vertices[1]=new Vertex(xe,ys,ze);    vertices[2]=new Vertex(xe,ye,ze);    vertices[3]=new Vertex(xs,ye,ze);    obj.addFace(vertices,uvSides == null ? null : uvSides[2],trans,mtlSides[2]);  }{    vertices[0]=new Vertex(xs,ys,zs);    vertices[1]=new Vertex(xs,ys,ze);    vertices[2]=new Vertex(xs,ye,ze);    vertices[3]=new Vertex(xs,ye,zs);    obj.addFace(vertices,uvSides == null ? null : uvSides[3],trans,mtlSides[3]);  }{    vertices[0]=new Vertex(xe,ys,ze);    vertices[1]=new Vertex(xe,ys,zs);    vertices[2]=new Vertex(xe,ye,zs);    vertices[3]=new Vertex(xe,ye,ze);    obj.addFace(vertices,uvSides == null ? null : uvSides[4],trans,mtlSides[4]);  }{    vertices[0]=new Vertex(xe,ys,ze);    vertices[1]=new Vertex(xs,ys,ze);    vertices[2]=new Vertex(xs,ys,zs);    vertices[3]=new Vertex(xe,ys,zs);    obj.addFace(vertices,uvSides == null ? null : uvSides[5],trans,mtlSides[5]);  }}  }
class C{  public CronThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,handler);  this.cronJobWatchDogs=new ArrayList<>();  this.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);}  }
class C{  public static double cdf(double val,double dof){  double v=val * val * .5;  return val < 0. ? 0. : v < Double.POSITIVE_INFINITY ? GammaDistribution.regularizedGammaP(dof * .5,v) : 1.;}  }
class C{  public Vector3d add(Vector3dc v){  x+=v.x();  y+=v.y();  z+=v.z();  return this;}  }
class C{  @Override public void keyPressed(KeyEvent e){}  }
class C{  @After public void tearDown(){  archive=null;}  }
class C{  public void testNonBlockingStop_LastLink() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  Fixture f=new Fixture(3,false,0,false);  f.simEngine.doSimStep(100);  assertEquals(0,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(101);  f.simEngine.doSimStep(101);  assertEquals(1,f.qlink2.getAllVehicles().size());  MobsimVehicle[] vehicles=f.qlink2.getAllVehicles().toArray(new MobsimVehicle[2]);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(102);  f.simEngine.doSimStep(102);  assertEquals(2,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(201);  f.simEngine.doSimStep(201);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(202);  f.simEngine.doSimStep(202);  assertEquals(1,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(1,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.normalVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(203);  f.simEngine.doSimStep(203);  assertEquals(2,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(302);  f.simEngine.doSimStep(302);  assertEquals(2,f.qlink3.getAllVehicles().size());  f.qsim.getSimTimer().setTime(303);  f.simEngine.doSimStep(303);  assertEquals(2,f.qlink3.getAllVehicles().size());  assertEquals(1,f.qlink3.getAllNonParkedVehicles().size());  vehicles=f.qlink3.getAllNonParkedVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(320);  f.simEngine.doSimStep(320);  assertEquals(2,f.qlink3.getAllVehicles().size());  assertEquals(1,f.qlink3.getAllNonParkedVehicles().size());  vehicles=f.qlink3.getAllNonParkedVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(321);  f.simEngine.doSimStep(321);  assertEquals(2,f.qlink3.getAllVehicles().size());  assertEquals(0,f.qlink3.getAllNonParkedVehicles().size());}  }
class C{  public EcuDataItem(int newPid,int offset,int numBytes,int bitOfs,int numberOfBits,long maskingBits,Conversion[] conversions,String format,Number minValue,Number maxValue,String labelText){  pid=newPid;  ofs=offset;  bytes=numBytes;  bitOffset=bitOfs;  numBits=numberOfBits;  bitMask=maskingBits;  cnv=conversions;  fmt=format;  label=labelText;  pv=new EcuDataPv();  Number minVal=minValue;  Number maxVal=maxValue;  pv.put(EcuDataPv.FID_PID,Integer.valueOf(pid));  pv.put(EcuDataPv.FID_OFS,Integer.valueOf(ofs));  pv.put(EcuDataPv.FID_BIT_OFS,Integer.valueOf(bitOffset));  pv.put(EcuDataPv.FID_DESCRIPT,label);  pv.put(EcuDataPv.FID_UNITS,(cnv != null && cnv[cnvSystem] != null) ? cnv[cnvSystem].getUnits() : "");  pv.put(EcuDataPv.FID_VALUE,Float.valueOf(0));  pv.put(EcuDataPv.FID_FORMAT,fmt);  pv.put(EcuDataPv.FID_CNVID,cnv);  if (cnv != null && cnv[cnvSystem] != null) {    if (minVal == null)     minVal=cnv[cnvSystem].memToPhys(0);    if (maxVal == null)     maxVal=cnv[cnvSystem].memToPhys((1L << numBits) - 1);  }  pv.put(EcuDataPv.FID_MIN,minVal);  pv.put(EcuDataPv.FID_MAX,maxVal);}  }
class C{  public MLdapUser authenticate(MLdapUser ldapUser,String usr,String o,String ou){  if (ldapUser == null)   ldapUser=new MLdapUser();  String error=null;  String info=null;  if (usr == null || usr.trim().length() == 0) {    error="@NotFound@ User";    ldapUser.setErrorString(error);    m_error++;    log.warning(error);    return ldapUser;  }  usr=usr.trim();  if (o == null || o.length() == 0) {    error="@NotFound@ O";    ldapUser.setErrorString(error);    m_error++;    log.warning(error);    return ldapUser;  }  int AD_Client_ID=findClient(o);  if (AD_Client_ID == 0) {    error="@NotFound@ O=" + o;    ldapUser.setErrorString(error);    m_error++;    log.config(error);    return ldapUser;  }  int R_InterestArea_ID=0;  if (ou != null && ou.length() > 0) {    R_InterestArea_ID=findInterestArea(AD_Client_ID,ou);    if (R_InterestArea_ID == 0) {      error="@NotFound@ OU=" + ou;      ldapUser.setErrorString(error);      m_error++;      log.config(error);      return ldapUser;    }  }  m_auth++;  int AD_User_ID=0;  String Value=null;  String LdapUser=null;  String EMail=null;  String Name=null;  String Password=null;  boolean IsActive=false;  String EMailVerify=null;  boolean isUnique=false;  String sql="SELECT AD_User_ID, Value, LdapUser, EMail," + " Name, Password, IsActive, EMailVerify " + "FROM AD_User "+ "WHERE AD_Client_ID=? AND (EMail=? OR Value=? OR LdapUser=?)";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Client_ID);    pstmt.setString(2,usr);    pstmt.setString(3,usr);    pstmt.setString(4,usr);    rs=pstmt.executeQuery();    if (rs.next()) {      AD_User_ID=rs.getInt(1);      Value=rs.getString(2);      LdapUser=rs.getString(3);      EMail=rs.getString(4);      Name=rs.getString(5);      Password=rs.getString(6);      IsActive="Y".equals(rs.getString(7));      EMailVerify=rs.getString(8);      isUnique=rs.next();    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    error="System Error";  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (error != null) {    m_error++;    ldapUser.setErrorString(error);    return ldapUser;  }  if (AD_User_ID == 0) {    error="@NotFound@ User=" + usr;    info="User not found - " + usr;  } else   if (!IsActive) {    error="@NotFound@ User=" + usr;    info="User not active - " + usr;  } else   if (EMailVerify == null) {    error="@UserNotVerified@ User=" + usr;    info="User EMail not verified - " + usr;  } else   if (usr.equalsIgnoreCase(LdapUser))   info="User verified - Ldap=" + usr + (isUnique ? "" : " - Not Unique"); else   if (usr.equalsIgnoreCase(Value))   info="User verified - Value=" + usr + (isUnique ? "" : " - Not Unique"); else   if (usr.equalsIgnoreCase(EMail))   info="User verified - EMail=" + usr + (isUnique ? "" : " - Not Unique"); else   info="User verified ?? " + usr + " - Name="+ Name+ ", Ldap="+ LdapUser+ ", Value="+ Value+ (isUnique ? "" : " - Not Unique");  if (error != null) {    logAccess(AD_Client_ID,AD_User_ID,R_InterestArea_ID,info,error);    ldapUser.setErrorString(Msg.translate(getCtx(),error));    return ldapUser;  }  if (R_InterestArea_ID == 0) {    logAccess(AD_Client_ID,AD_User_ID,R_InterestArea_ID,info,null);    ldapUser.setOrg(o);    ldapUser.setOrgUnit(ou);    ldapUser.setUserId(usr);    ldapUser.setPassword(Password);    return ldapUser;  }  String OptOutDate=null;  boolean found=false;  sql="SELECT IsActive, OptOutDate " + "FROM R_ContactInterest " + "WHERE R_InterestArea_ID=? AND AD_User_ID=?";  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,R_InterestArea_ID);    pstmt.setInt(2,AD_User_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      found=true;      IsActive="Y".equals(rs.getString(1));      OptOutDate=rs.getString(2);      isUnique=rs.next();    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    error="System Error (2)";  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (error != null) {    m_error++;    ldapUser.setErrorString(error);    return ldapUser;  }  if (!found) {    error="@UserNotSubscribed@ User=" + usr;    info="No User Interest - " + usr + " - R_InterestArea_ID="+ R_InterestArea_ID;  } else   if (OptOutDate != null) {    error="@UserNotSubscribed@ User=" + usr + " @OptOutDate@="+ OptOutDate;    info="Opted out - " + usr + " - OptOutDate="+ OptOutDate;  } else   if (!IsActive) {    error="@UserNotSubscribed@ User=" + usr;    info="User Interest Not Active - " + usr;  } else   info="User subscribed - " + usr;  if (error != null) {    logAccess(AD_Client_ID,AD_User_ID,R_InterestArea_ID,info,error);    ldapUser.setErrorString(Msg.translate(getCtx(),error));    return ldapUser;  }  logAccess(AD_Client_ID,AD_User_ID,R_InterestArea_ID,info,null);  ldapUser.setOrg(o);  ldapUser.setOrgUnit(ou);  ldapUser.setUserId(usr);  ldapUser.setPassword(Password);  return ldapUser;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public EditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle){  super(context,attributeSet,defaultStyle);  initialize(attributeSet);}  }
class C{  public void primitivePaint(Graphics2D g2d){  if (backgroundPaint != null) {    g2d.setPaint(backgroundPaint);    g2d.fill(g2d.getClip());  }  super.primitivePaint(g2d);}  }
class C{  static boolean eq(Object x,Object y){  return x == y;}  }
class C{  private boolean isComplete(){  return m_isComplete2;}  }
class C{  private static String make(final CharSequence name,final CharSequence value,final CharSequence... attrs){  final StringBuilder text=new StringBuilder(String.format("%s=%s;",name,value));  for (  final CharSequence attr : attrs) {    text.append(attr).append(';');  }  return text.toString();}  }
class C{  public void writeTo(OutputStream os) throws IOException {  tree.writeTo(os);}  }
class C{  @Override public Request<RunnerStatus> status(ProjectReference projectReference,long processId){  List<DummyRunnerStatus> statuses=availableRunnerStatuses.get(projectReference.name());  if (statuses != null && !statuses.isEmpty()) {    for (    RunnerStatus runnerStatus : statuses) {      if (processId == runnerStatus.processId()) {        return new DummyRequest<>(runnerStatus);      }    }  }  return new DummyRequest<>(null);}  }
class C{  public Field(String name,byte[] value,IndexableFieldType type){  this(name,value,0,value.length,type);}  }
class C{  public void cont(){synchronized (timerThread) {synchronized (this) {      if (stopped) {        sleepUntil=Math.max(sleepUntil + 1,System.currentTimeMillis() + remainingTime);        TimerThread.enqueue(this);        stopped=false;      }    }  }}  }
class C{  public void formTags(TagInfo tagInfo){  tagInfo=new TagInfo("meter",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  tagInfo.defineCloseBeforeTags("meter");  this.put("meter",tagInfo);  tagInfo=new TagInfo("form",ContentType.all,BelongsTo.BODY,false,false,true,CloseTag.required,Display.block);  tagInfo.defineForbiddenTags("form");  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("option,optgroup,textarea,select,fieldset,p,address,label,abbr,acronym,dfn,kbd,samp,var,cite,code,param,xml");  this.put("form",tagInfo);  tagInfo=new TagInfo("input",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.inline);  tagInfo.defineCloseBeforeTags("select,optgroup,option");  this.put("input",tagInfo);  tagInfo=new TagInfo("textarea",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineCloseBeforeTags("select,optgroup,option");  this.put("textarea",tagInfo);  tagInfo=new TagInfo("select",ContentType.all,BelongsTo.BODY,false,false,true,CloseTag.required,Display.inline);  tagInfo.defineAllowedChildrenTags("option,optgroup");  tagInfo.defineCloseBeforeTags("option,optgroup,select");  this.put("select",tagInfo);  tagInfo=new TagInfo("option",ContentType.text,BelongsTo.BODY,false,false,true,CloseTag.optional,Display.inline);  tagInfo.defineFatalTags("select,datalist");  tagInfo.defineCloseBeforeTags("option");  this.put("option",tagInfo);  tagInfo=new TagInfo("optgroup",ContentType.all,BelongsTo.BODY,false,false,true,CloseTag.required,Display.inline);  tagInfo.defineFatalTags("select");  tagInfo.defineAllowedChildrenTags("option");  tagInfo.defineCloseBeforeTags("optgroup");  this.put("optgroup",tagInfo);  tagInfo=new TagInfo("button",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseBeforeTags("select,optgroup,option");  this.put("button",tagInfo);  tagInfo=new TagInfo("label",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  this.put("label",tagInfo);  tagInfo=new TagInfo("legend",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineRequiredEnclosingTags("fieldset");  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  this.put("legend",tagInfo);  tagInfo=new TagInfo("fieldset",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("p,address,label,abbr,acronym,dfn,kbd,samp,var,cite,code,param,xml");  this.put("fieldset",tagInfo);  tagInfo=new TagInfo("progress",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineAllowedChildrenTags(PHRASING_TAGS);  tagInfo.defineCloseBeforeTags("progress");  this.put("progress",tagInfo);  tagInfo=new TagInfo("datalist",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineAllowedChildrenTags("option");  tagInfo.defineCloseBeforeTags("datalist");  this.put("datalist",tagInfo);  tagInfo=new TagInfo("keygen",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.any);  this.put("keygen",tagInfo);  tagInfo=new TagInfo("output",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseBeforeTags("output," + CLOSE_BEFORE_TAGS);  this.put("output",tagInfo);}  }
class C{  void addToCurrentSize(long size,boolean areObjects){  currentSize.addAndGet(size);  notifyEvictionIfNeeded();  if (areObjects) {    dataAddedInBytes.addAndGet(size);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Matrix4x3f translationRotateScaleMul(float tx,float ty,float tz,float qx,float qy,float qz,float qw,float sx,float sy,float sz,Matrix4x3f m){  float dqx=qx + qx;  float dqy=qy + qy;  float dqz=qz + qz;  float q00=dqx * qx;  float q11=dqy * qy;  float q22=dqz * qz;  float q01=dqx * qy;  float q02=dqx * qz;  float q03=dqx * qw;  float q12=dqy * qz;  float q13=dqy * qw;  float q23=dqz * qw;  float nm00=sx - (q11 + q22) * sx;  float nm01=(q01 + q23) * sx;  float nm02=(q02 - q13) * sx;  float nm10=(q01 - q23) * sy;  float nm11=sy - (q22 + q00) * sy;  float nm12=(q12 + q03) * sy;  float nm20=(q02 + q13) * sz;  float nm21=(q12 - q03) * sz;  float nm22=sz - (q11 + q00) * sz;  float m00=nm00 * m.m00 + nm10 * m.m01 + nm20 * m.m02;  float m01=nm01 * m.m00 + nm11 * m.m01 + nm21 * m.m02;  m02=nm02 * m.m00 + nm12 * m.m01 + nm22 * m.m02;  this.m00=m00;  this.m01=m01;  float m10=nm00 * m.m10 + nm10 * m.m11 + nm20 * m.m12;  float m11=nm01 * m.m10 + nm11 * m.m11 + nm21 * m.m12;  m12=nm02 * m.m10 + nm12 * m.m11 + nm22 * m.m12;  this.m10=m10;  this.m11=m11;  float m20=nm00 * m.m20 + nm10 * m.m21 + nm20 * m.m22;  float m21=nm01 * m.m20 + nm11 * m.m21 + nm21 * m.m22;  m22=nm02 * m.m20 + nm12 * m.m21 + nm22 * m.m22;  this.m20=m20;  this.m21=m21;  float m30=nm00 * m.m30 + nm10 * m.m31 + nm20 * m.m32 + tx;  float m31=nm01 * m.m30 + nm11 * m.m31 + nm21 * m.m32 + ty;  m32=nm02 * m.m30 + nm12 * m.m31 + nm22 * m.m32 + tz;  this.m30=m30;  this.m31=m31;  properties=0;  return this;}  }
class C{  public XMLString newstr(String string){  return new XString(string);}  }
class C{  private void hideHud(){  if (isHudVisible()) {    getSupportActionBar().hide();    mediaController.hide();    videoDescriptionDrawer.setVisibility(View.VISIBLE);    commentsDrawer.setVisibility(View.VISIBLE);    if (timerHandler != null) {      timerHandler.removeCallbacksAndMessages(null);      timerHandler=null;    }  }}  }
class C{  public LiveIntervalElement(Register reg,Instruction begin,Instruction end){  register=reg;  this.begin=begin;  this.end=end;}  }
class C{  public int size(){  return count;}  }
class C{  public void toLatLon(double v0,double h0){  final double GX=0.216507961908834992;  final double GY=-0.134633014879368199;  final double A=0.151646645621077297;  final double Q=-0.294355056616412800;  final double Q2=0.0866448993556515751;  final double EPSILON=.0000001;  double v=(double)v0;  double h=(double)h0;  double t1=(v - TRANSV) / RADIUS;  double t2=(h - TRANSH) / RADIUS;  double vhat=ROTC * t2 - ROTS * t1;  double hhat=ROTS * t2 + ROTC * t1;  double e=Math.cos(Math.sqrt(vhat * vhat + hhat * hhat));  double w=Math.cos(Math.sqrt(vhat * vhat + (hhat - 0.4) * (hhat - 0.4)));  double fx=EY * w - WY * e;  double fy=EX * w - WX * e;  double b=fx * GX + fy * GY;  double c=fx * fx + fy * fy - Q2;  double disc=b * b - A * c;  double x, y, z, delta;  if (Math.abs(disc) < EPSILON) {    z=b / A;    x=(GX * z - fx) / Q;    y=(fy - GY * z) / Q;  } else {    delta=Math.sqrt(disc);    z=(b + delta) / A;    x=(GX * z - fx) / Q;    y=(fy - GY * z) / Q;    if (vhat * (PX * x + PY * y + PZ * z) < 0) {      z=(b - delta) / A;      x=(GX * z - fx) / Q;      y=(fy - GY * z) / Q;    }  }  double lat=Math.asin(z);  final double[] bi={1.00567724920722457,-0.00344230425560210245,0.000713971534527667990,-0.0000777240053499279217,0.00000673180367053244284,-0.000000742595338885741395,0.0000000905058919926194134};  double lat2=lat * lat;  double earthlat=lat * (bi[0] + lat2 * (bi[1] + lat2 * (bi[2] + lat2 * (bi[3] + lat2 * (bi[4] + lat2 * (bi[5] + lat2 * (bi[6])))))));  earthlat=Math.toDegrees(earthlat);  double lon=Math.toDegrees(Math.atan2(x,y));  double earthlon=lon + 52.0;  this.resultLat=earthlat;  this.resultLon=-earthlon;}  }
class C{  private void handleSubscribingProcess(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    long triggerProcessKey=writeOrgKeyIdentifierForProcess(orgKey,processes);    writeSubscriptionIdentifier(triggerProcessKey);  }  holder.close();}  }
class C{  public void addRow(){  m_data.rows.add(new ArrayList<Object>());  m_data.rowsMeta.add(null);}  }
class C{  public static int readMediumInt(IoBuffer in){  return ((in.get() & 0x000000ff) << 16) + ((in.get() & 0x000000ff) << 8) + ((in.get() & 0x000000ff));}  }
class C{  public static String toString(byte[] b){  ByteArrayOutputStream os=new ByteArrayOutputStream();  for (int i=0; i < (b.length + 2) / 3; i++) {    short[] s=new short[3];    short[] t=new short[4];    for (int j=0; j < 3; j++) {      if ((i * 3 + j) < b.length)       s[j]=(short)(b[i * 3 + j] & 0xFF); else       s[j]=-1;    }    t[0]=(short)(s[0] >> 2);    if (s[1] == -1)     t[1]=(short)(((s[0] & 0x3) << 4)); else     t[1]=(short)(((s[0] & 0x3) << 4) + (s[1] >> 4));    if (s[1] == -1)     t[2]=t[3]=64; else     if (s[2] == -1) {      t[2]=(short)(((s[1] & 0xF) << 2));      t[3]=64;    } else {      t[2]=(short)(((s[1] & 0xF) << 2) + (s[2] >> 6));      t[3]=(short)(s[2] & 0x3F);    }    for (int j=0; j < 4; j++)     os.write(Base64.charAt(t[j]));  }  return new String(os.toByteArray());}  }
class C{  private void readData(long absolutePosition,byte[] target,int length){  int bytesRead=0;  while (bytesRead < length) {    dropDownstreamTo(absolutePosition);    int positionInAllocation=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(length - bytesRead,allocationLength - positionInAllocation);    Allocation allocation=dataQueue.peek();    System.arraycopy(allocation.data,allocation.translateOffset(positionInAllocation),target,bytesRead,toCopy);    absolutePosition+=toCopy;    bytesRead+=toCopy;  }}  }
class C{  private void updateDirectoryMappings(Project project,VirtualFile mapRoot){  if (project == null || project.isDefault()) {    return;  }  final VirtualFile projectBaseDir=project.getBaseDir();  if (projectBaseDir == null || !VfsUtil.isAncestor(projectBaseDir,mapRoot,false)) {    return;  }  mapRoot.refresh(false,false);  final String path=mapRoot.equals(projectBaseDir) ? "" : mapRoot.getPath();  ProjectLevelVcsManager manager=ProjectLevelVcsManager.getInstance(project);  manager.setDirectoryMappings(VcsUtil.addMapping(manager.getDirectoryMappings(),path,CvsVcs2.getInstance(project).getName()));  manager.updateActiveVcss();}  }
class C{  private String readHeader(RoutingContext ctx){  String tok=ctx.request().getHeader(XOkapiHeaders.TOKEN);  if (tok != null && !tok.isEmpty()) {    return tok;  }  return null;}  }
class C{  public static void isValidInetAddress(String IP) throws IllegalArgumentException {  if (IP == null || IP.isEmpty()) {    throw new IllegalArgumentException("IP is missing or empty");  }  if (IP.contains(":")) {  } else {    String[] segments=IP.split("\\.");    if (segments.length != 4) {      throw new IllegalArgumentException("IP does not appear valid:" + IP);    }    try {      InetAddress.getByName(IP);    } catch (    UnknownHostException e) {      throw new IllegalArgumentException(e);    }  }}  }
class C{  public int calculateSampleSize(int width,int height,int targetWidth,int targetHeight){  float bitmapWidth=width;  float bitmapHeight=height;  int bitmapResolution=(int)(bitmapWidth * bitmapHeight);  int targetResolution=targetWidth * targetHeight;  int sampleSize=1;  if (targetResolution == 0) {    return sampleSize;  }  for (int i=1; (bitmapResolution / i) > targetResolution; i*=2) {    sampleSize=i;  }  return sampleSize;}  }
class C{  public static String expandUuid(Object id){  String str="" + id;  if (str.matches("^[0-9]+$")) {    return (str + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").substring(0,36);  }  return (String)id;}  }
class C{  public static String urlEncode(String value,String encoding){  if (value == null) {    return "";  }  try {    String encoded=URLEncoder.encode(value,encoding);    return encoded.replace("+","%20").replace("*","%2A").replace("%7E","~").replace("%2F","/");  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException("failed to encode url!",e);  }}  }
class C{  private void measureContentView(View child,int parentWidthMeasureSpec,int parentHeightMeasureSpec){  final MarginLayoutParams lp=(MarginLayoutParams)child.getLayoutParams();  final int childWidthMeasureSpec=getChildMeasureSpec(parentWidthMeasureSpec,getPaddingLeft() + getPaddingRight() + lp.leftMargin+ lp.rightMargin,lp.width);  final int childHeightMeasureSpec=getChildMeasureSpec(parentHeightMeasureSpec,getPaddingTop() + getPaddingBottom() + lp.topMargin,lp.height);  child.measure(childWidthMeasureSpec,childHeightMeasureSpec);}  }
class C{  public void testBitLengthPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(108,aNumber.bitLength());}  }
class C{  public ConfigurationInfo(String argnames[]){  this.argcount=argnames.length;  this.argnames=argnames;}  }
class C{  public java.io.InputStream readBinaryStream() throws SQLException {  return (java.io.InputStream)getNextAttribute();}  }
class C{  public Element createElementNS(AbstractDocument document,String namespaceURI,String qualifiedName){  if (SVGConstants.SVG_NAMESPACE_URI.equals(namespaceURI)) {    String name=DOMUtilities.getLocalName(qualifiedName);    ElementFactory ef=(ElementFactory)factories.get(name);    if (ef != null)     return ef.create(DOMUtilities.getPrefix(qualifiedName),document);    throw document.createDOMException(DOMException.NOT_FOUND_ERR,"invalid.element",new Object[]{namespaceURI,qualifiedName});  }  return super.createElementNS(document,namespaceURI,qualifiedName);}  }
class C{  public void testCase7(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public MemIRI(Object creator,String namespace,String localName){  this.creator=creator;  this.namespace=namespace;  this.localName=localName;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public final boolean isNative(){  return Modifier.isNative(getModifiers());}  }
class C{  public JRadioButton(String text,Icon icon,boolean selected){  super(text,icon,selected);  setBorderPainted(false);  setHorizontalAlignment(LEADING);}  }
class C{  @Override public LocalResult executeQuery(int maxRows,ResultTarget target){  throw DbException.get(ErrorCode.METHOD_ONLY_ALLOWED_FOR_QUERY);}  }
class C{  public static final double[][] diagonal(final double[] v1){  final double[][] result=new double[v1.length][v1.length];  for (int i=0; i < v1.length; i++) {    result[i][i]=v1[i];  }  return result;}  }
class C{  public boolean checkForJar(){  try {    checkForClass("com.flurry.android.FlurryAgent");    return true;  } catch (  ClassNotFoundException ex) {    utils.logIssue("\n\n\nFoam: You must add the FlurryAnalytics-x.x.x.jar file " + "to your application to enable flurry analytics.  This can be found at " + "https://dev.flurry.com under Applications Tab -> Select your application "+ "-> Manage -> 'Download SDK'.\n\n\n",ex);    return false;  }}  }
class C{  public void doRandomSortsOnLargeIndex() throws Exception {  final Collection<String> allFieldNames=getAllSortFieldNames();  final int numInitialDocs=TestUtil.nextInt(random(),100,200);  final int totalDocs=atLeast(500);  List<SolrInputDocument> initialDocs=new ArrayList<>();  for (int i=1; i <= numInitialDocs; i++) {    SolrInputDocument doc=CursorPagingTest.buildRandomDocument(i);    initialDocs.add(doc);    indexDoc(doc);  }  commit();  for (  String f : allFieldNames) {    for (    String order : new String[]{" asc"," desc"}) {      String sort=f + order + ("id".equals(f) ? "" : ", id" + order);      String rows="" + TestUtil.nextInt(random(),13,50);      SentinelIntSet ids=assertFullWalkNoDups(numInitialDocs,params("q","*:*","fl","id," + f,"rows",rows,"sort",sort));      if (numInitialDocs != ids.size()) {        StringBuilder message=new StringBuilder("Expected " + numInitialDocs + " docs but got "+ ids.size()+ ". ");        message.append("sort=");        message.append(sort);        message.append(". ");        if (ids.size() < numInitialDocs) {          message.append("Missing doc(s): ");          for (          SolrInputDocument doc : initialDocs) {            int id=((Integer)doc.get("id").getValue()).intValue();            if (!ids.exists(id)) {              QueryResponse rsp=cloudClient.query(params("q","id:" + id,"rows","1"));              if (0 == rsp.getResults().size()) {                message.append("<NOT RETRIEVABLE>:");                message.append(doc.values());              } else {                message.append(rsp.getResults().get(0).getFieldValueMap().toString());              }              message.append("; ");            }          }        }        fail(message.toString());      }    }  }  for (int i=numInitialDocs + 1; i <= totalDocs; i++) {    SolrInputDocument doc=CursorPagingTest.buildRandomDocument(i);    indexDoc(doc);  }  commit();  final int numRandomSorts=atLeast(3);  for (int i=0; i < numRandomSorts; i++) {    final String sort=CursorPagingTest.buildRandomSort(allFieldNames);    final String rows="" + TestUtil.nextInt(random(),63,113);    final String fl=random().nextBoolean() ? "id" : "id,score";    final boolean matchAll=random().nextBoolean();    final String q=matchAll ? "*:*" : CursorPagingTest.buildRandomQuery();    SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q",q,"fl",fl,"rows",rows,"sort",sort));    if (matchAll) {      assertEquals(totalDocs,ids.size());    }  }}  }
class C{  @Override public void mouseReleased(MouseEvent e){}  }
class C{  protected void updateBuildStatus(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,final BuildFinishedCallback buildFinishedCallback){  BuildStatus status=descriptor.getStatus();  if (status == BuildStatus.IN_PROGRESS || status == BuildStatus.IN_QUEUE) {    return;  }  if (status == BuildStatus.CANCELLED || status == BuildStatus.FAILED || status == BuildStatus.SUCCESSFUL) {    afterBuildFinished(notification,descriptor,buildStatusHandler,buildOutputHandler,successMessage,errorMessage,prefixConsole,buildFinishedCallback);  }}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  private CGraphSaver(){}  }
class C{  public SayTextAction(String text){  this.text=checkNotNull(text);}  }
class C{  public static void addPrivateDataProvider(String elementName,String namespace,PrivateDataProvider provider){  String key=getProviderKey(elementName,namespace);  privateDataProviders.put(key,provider);}  }
class C{  private void initializeInput(Composite parent,FormToolkit toolkit){  int labelStyle=SWT.LEFT;  int minTitleColumnWidth=170;  int minInformationColumnWidth=230;  addSection(parent,toolkit,SECTION_VM);  addSection(parent,toolkit,SECTION_OS);  addSection(parent,toolkit,SECTION_MEMORY);  addSection(parent,toolkit,SECTION_CLASSES);  addSection(parent,toolkit,SECTION_THREADS);  addStaticInformations(parent,toolkit);  if (sections.containsKey(SECTION_CLASSES)) {    addItemToSection(toolkit,SECTION_CLASSES,"Current loaded classes: ",minTitleColumnWidth);    loadedClassCount=toolkit.createLabel(sections.get(SECTION_CLASSES),NOT_AVAILABLE,labelStyle);    loadedClassCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_CLASSES,"Total loaded classes: ",minTitleColumnWidth);    totalLoadedClassCount=toolkit.createLabel(sections.get(SECTION_CLASSES),NOT_AVAILABLE,labelStyle);    totalLoadedClassCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_CLASSES,"Total unloaded classes: ",minTitleColumnWidth);    unloadedClassCount=toolkit.createLabel(sections.get(SECTION_CLASSES),NOT_AVAILABLE,labelStyle);    unloadedClassCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));  }  if (sections.containsKey(SECTION_VM)) {    addItemToSection(toolkit,SECTION_VM,"Total compile time: ",minTitleColumnWidth);    totalCompilationTime=toolkit.createLabel(sections.get(SECTION_VM),NOT_AVAILABLE,labelStyle);    totalCompilationTime.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_VM,"Uptime: ",minTitleColumnWidth);    uptime=toolkit.createLabel(sections.get(SECTION_VM),NOT_AVAILABLE,labelStyle);    uptime.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_VM,"Process Cpu Time: ",minTitleColumnWidth);    processCpuTime=toolkit.createLabel(sections.get(SECTION_VM),NOT_AVAILABLE,labelStyle);    processCpuTime.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));  }  if (sections.containsKey(SECTION_MEMORY)) {    addItemToSection(toolkit,SECTION_MEMORY,"Free physical memory: ",minTitleColumnWidth);    freePhysMemory=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    freePhysMemory.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_MEMORY,"Free swap space: ",minTitleColumnWidth);    freeSwapSpace=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    freeSwapSpace.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_MEMORY,"Committed heap size: ",minTitleColumnWidth);    committedHeapMemorySize=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    committedHeapMemorySize.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_MEMORY,"Committed non-heap size: ",minTitleColumnWidth);    committedNonHeapMemorySize=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    committedNonHeapMemorySize.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_MEMORY,"Used heap size: ",minTitleColumnWidth);    usedHeapMemorySize=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    usedHeapMemorySize.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_MEMORY,"Used non-heap size: ",minTitleColumnWidth);    usedNonHeapMemorySize=toolkit.createLabel(sections.get(SECTION_MEMORY),NOT_AVAILABLE,labelStyle);    usedNonHeapMemorySize.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));  }  if (sections.containsKey(SECTION_THREADS)) {    addItemToSection(toolkit,SECTION_THREADS,"Live threads: ",minTitleColumnWidth);    liveThreadCount=toolkit.createLabel(sections.get(SECTION_THREADS),NOT_AVAILABLE,labelStyle);    liveThreadCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_THREADS,"Daemon threads: ",minTitleColumnWidth);    daemonThreadCount=toolkit.createLabel(sections.get(SECTION_THREADS),NOT_AVAILABLE,labelStyle);    daemonThreadCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_THREADS,"Peak: ",minTitleColumnWidth);    peakThreadCount=toolkit.createLabel(sections.get(SECTION_THREADS),NOT_AVAILABLE,labelStyle);    peakThreadCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));    addItemToSection(toolkit,SECTION_THREADS,"Total threads started: ",minTitleColumnWidth);    totalStartedThreadCount=toolkit.createLabel(sections.get(SECTION_THREADS),NOT_AVAILABLE,labelStyle);    totalStartedThreadCount.setLayoutData(new GridData(minInformationColumnWidth,SWT.DEFAULT));  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean objOnMatrix(int objXIndex,int objYIndex,int objIndexLength,int objIndexHeight){  if (objXIndex + objIndexLength < 0 || objYIndex + objIndexHeight < 0 || objXIndex > maxx || objYIndex > maxy) {    return false;  }  return true;}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public static boolean isForBackend(Tree.Declaration decl,Backend backend){  return isForBackend(decl.getDeclarationModel(),backend);}  }
class C{  private BTreeNode findFirstLeafNode(IndexKey key,BTreeNode node){  int childNodeIndex;  int low=0;  int high=node.nodeSize() - 1;  int mid=0;  int compareRes=-1;  IndexKey[] nodeKeys=node.getNodeKeys();  while (low <= high) {    mid=(low + high) >>> 1;    compareRes=compareIndexes(key,nodeKeys[mid]);    if (compareRes < 0) {      high=mid - 1;    } else     if (compareRes > 0) {      low=mid + 1;    } else {      int currentPos=mid;      while (currentPos - 1 >= 0 && compareIndexes(key,nodeKeys[currentPos - 1]) == 0) {        currentPos--;      }      mid=currentPos;      break;    }  }  if (compareRes < 0) {    if (mid > 0) {      mid--;    }    childNodeIndex=mid;  } else {    childNodeIndex=mid;  }  node=node.getChild(childNodeIndex);  return node;}  }
class C{  public static boolean areColinear(Vec4 a,Vec4 b,Vec4 c){  if (a == null || b == null || c == null) {    throw new IllegalArgumentException("Vec4 Is Null");  }  Vec4 ab=b.subtract3(a).normalize3();  Vec4 bc=c.subtract3(b).normalize3();  return Math.abs(ab.dot3(bc)) > 0.999;}  }
class C{  public OrdsBlockTreeTermsWriter(SegmentWriteState state,PostingsWriterBase postingsWriter,int minItemsInBlock,int maxItemsInBlock) throws IOException {  BlockTreeTermsWriter.validateSettings(minItemsInBlock,maxItemsInBlock);  maxDoc=state.segmentInfo.maxDoc();  final String termsFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_EXTENSION);  out=state.directory.createOutput(termsFileName,state.context);  boolean success=false;  IndexOutput indexOut=null;  try {    fieldInfos=state.fieldInfos;    this.minItemsInBlock=minItemsInBlock;    this.maxItemsInBlock=maxItemsInBlock;    CodecUtil.writeIndexHeader(out,TERMS_CODEC_NAME,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    final String termsIndexFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_INDEX_EXTENSION);    indexOut=state.directory.createOutput(termsIndexFileName,state.context);    CodecUtil.writeIndexHeader(indexOut,TERMS_INDEX_CODEC_NAME,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    this.postingsWriter=postingsWriter;    postingsWriter.init(out,state);    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(out,indexOut);    }  }  this.indexOut=indexOut;}  }
class C{  private void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MPayment p=new MPayment(Env.getCtx(),record_id,trxName);    fCheckReceipt.setSelected(p.isReceipt());    fCheckPayment.setSelected(!p.isReceipt());    p=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Payment_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MPayment p=new MPayment(Env.getCtx(),record_id,trxName);        fCheckReceipt.setSelected(p.isReceipt());        fCheckPayment.setSelected(!p.isReceipt());        p=null;        Trx.get(trxName,false).close();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BankAccount_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))       fBankAccount_ID.setValue(new Integer(id));    }  }}  }
class C{  public boolean isVersioned(){  return !version.isEmpty();}  }
class C{  private static void putNew(Map<Element,AnnotatedTypeMirror> m,Element key,AnnotatedTypeMirror value){  if (key == null) {    ErrorReporter.errorAbort("StubParser: key is null!");    return;  }  if (m.containsKey(key)) {    AnnotatedTypeMirror value2=m.get(key);    AnnotatedTypeMerger.merge(value,value2);    m.put(key,value2);  } else {    m.put(key,value);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowMediaPlayer.setAudioRenderFilter(getString(stack));  return null;}  }
class C{  public void rejectedExecution(Runnable r,java.util.concurrent.ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  public boolean isShowRegularAttributes(){  return showRegularAttributes;}  }
class C{  public void syncConfig(){  log.info("Start sync config for removing vdc {}",operatedVdc.getShortId());  removeVdcFromStrategyOption(false);  updateConfigForRemovedVdc(isOperatedVdcDisconnected);  try {    updateConfigForConnectedVdc();  } catch (  GeoException ex) {    throw ex;  }catch (  Exception e) {    log.error("Failed to sync vdc config to all sites e=",e);    throw GeoException.fatals.removeVdcSyncConfigFail(e);  }  updateOpStatus(ConnectionStatus.REMOVE_SYNCED);}  }
class C{  public void remove(double x,String seriesName){  remove(new Double(x),seriesName,true);}  }
class C{  public static S2LatLngRect full(){  return new S2LatLngRect(fullLat(),fullLng());}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public VOParameterDefinition(ParameterType parameterType,String parameterId,String description,ParameterValueType valueType,String defaultValue,Long minValue,Long maxValue,boolean mandatory,boolean configurable,List<VOParameterOption> parameterOptions){  super();  this.parameterType=parameterType;  this.parameterId=parameterId;  this.description=description;  this.valueType=valueType;  this.defaultValue=defaultValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.configurable=configurable;  this.mandatory=mandatory;  this.parameterOptions=parameterOptions;  this.modificationType=ParameterModificationType.STANDARD;}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.744 -0500",hash_original_method="74F524BD848D4FFA3F86046FEE25CAD1",hash_generated_method="E0306EC52B4E6528DBB4B1225DA1C5E3") public boolean isPersistent(){  return (null != cookieExpiryDate);}  }
class C{  public static int indexOfIgnoreParentheses(char c,String s,int start){  int level=0;  for (int i=start; i < s.length(); i++) {    char other=s.charAt(i);    if (other == '(') {      level++;    } else     if (other == ')') {      level--;    } else     if (other == c && level == 0) {      return i;    }  }  return -1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(Locale locale){  String returnString;  log.debug("interpreting an SV2 message - cmd is " + sv_cmd);switch (sv_cmd) {case (SV_CMD_WRITE_ONE):    returnString=Bundle.getMessage(locale,"SV2_WRITE_ONE_INTERPRETED",src,dst,sv_adr,d1);  break;case (SV_CMD_WRITE_ONE_REPLY):returnString=Bundle.getMessage(locale,"SV2_WRITE_ONE_REPLY_INTERPRETED",src,dst,sv_adr,d1);break;case (SV_CMD_QUERY_ONE):returnString=Bundle.getMessage(locale,"SV2_READ_ONE_REQUEST_INTERPRETED",src,dst,sv_adr);break;case (SV_CMD_REPORT_ONE):returnString=Bundle.getMessage(locale,"SV2_READ_ONE_REPORT_INTERPRETED",src,dst,sv_adr,d1);break;case (SV_CMD_WRITE_ONE_MASKED):returnString=Bundle.getMessage(locale,"SV2_WRITE_ONE_MASKED_INTERPRETED",src,dst,sv_adr,d1,d2);break;case (SV_CMD_WRITE_ONE_MASKED_REPLY):returnString=Bundle.getMessage(locale,"SV2_WRITE_ONE_MASKED_REPLY_INTERPRETED",src,dst,sv_adr,d1,d2);break;case (SV_CMD_WRITE_FOUR):returnString=Bundle.getMessage(locale,"SV2_WRITE_FOUR_INTERPRETED",src,dst,sv_adr,sv_adr + 3,d1,d2,d3,d4);break;case (SV_CMD_WRITE_FOUR_REPLY):returnString=Bundle.getMessage(locale,"SV2_WRITE_FOUR_REPLY_INTERPRETED",src,dst,sv_adr,sv_adr + 3,d1,d2,d3,d4);break;case (SV_CMD_QUERY_FOUR):returnString=Bundle.getMessage(locale,"SV2_READ_FOUR_REQUEST_INTERPRETED",src,dst,sv_adr,sv_adr + 3);break;case (SV_CMD_REPORT_FOUR):returnString=Bundle.getMessage(locale,"SV2_READ_FOUR_REPORT_INTERPRETED",src,dst,sv_adr,sv_adr + 3,d1,d2,d3,d4);break;case (SV_CMD_DISCOVER_DEVICES_QUERY):returnString=Bundle.getMessage(locale,"SV2_DISCOVER_DEVICES_INTERPRETED",src);break;case (SV_CMD_DISCOVER_DEVICE_REPORT):returnString=Bundle.getMessage(locale,"SV2_DEVICE_TYPE_REPORT_INTEPRETED",src,dst,sv_adrl,sv_adrh,d1 + (256 * d2),d3 + (256 * d4));break;case (SV_CMD_IDENTIFY_DEVICE_BY_DEVICE_ADDRESS):returnString=Bundle.getMessage(locale,"SV2_IDENTIFY_DEVICE_REQUEST_INTEPRETED",src,dst);break;case (SV_CMD_IDENTIFY_DEVICE_BY_DEVICE_ADDRESS_REPLY):returnString=Bundle.getMessage(locale,"SV2_DEVICE_IDENTITY_REPORT_INTEPRETED",src,dst,sv_adrl,sv_adrh,d1 + (256 * d2),d3 + (256 * d4));break;case (SV_CMD_CHANGE_ADDRESS_REQUEST):returnString=Bundle.getMessage(locale,"SV2_CHANGE_ADDRESS_REQUEST_INTEPRETED",src,dst,sv_adrl,sv_adrh,d1 + (256 * d2),d3 + (256 * d4));break;case (SV_CMD_CHANGE_ADDRESS_REPLY):if ((sv_adrl == 0) && (sv_adrh == 0) && (d1 == 0)&& (d2 == 0)&& (d3 == 0)&& (d4 == 0)) {returnString=Bundle.getMessage(locale,"SV2_CHANGE_ADDRESS_REPLY_NEEDS_RECONFIGURE_INTEPRETED",src,dst);break;} else returnString=Bundle.getMessage(locale,"SV2_CHANGE_ADDRESS_REPLY_INTEPRETED",src,dst,sv_adrl,sv_adrh,d1 + (256 * d2),d3 + (256 * d4));break;case (SV_CMD_RECONFIGURE_REQUEST):returnString=Bundle.getMessage(locale,"SV2_RECONFIGURE_REQUEST_INTEPRETED",src,dst);break;case (SV_CMD_RECONFIGURE_REPLY):returnString=Bundle.getMessage(locale,"SV2_DEVICE_RECONFIGURE_REPLY_INTEPRETED",src,dst,sv_adrl,sv_adrh,d1 + (256 * d2),d3 + (256 * d4));break;default :return Bundle.getMessage(locale,"SV2_UNDEFINED_MESSAGE");}log.debug("interpreted: " + returnString);return returnString + "\n";}  }
class C{  public Executor addEnv(String name,String value){  this.env.put(name,value);  return this;}  }
class C{  public TabularDataSupport(TabularType tabularType,int initialCapacity,float loadFactor){  if (tabularType == null) {    throw new IllegalArgumentException("Argument tabularType cannot be null.");  }  this.tabularType=tabularType;  List<String> tmpNames=tabularType.getIndexNames();  this.indexNamesArray=tmpNames.toArray(new String[tmpNames.size()]);  String useHashMapProp=AccessController.doPrivileged(new GetPropertyAction("jmx.tabular.data.hash.map"));  boolean useHashMap="true".equalsIgnoreCase(useHashMapProp);  this.dataMap=useHashMap ? new HashMap<Object,CompositeData>(initialCapacity,loadFactor) : new LinkedHashMap<Object,CompositeData>(initialCapacity,loadFactor);}  }
class C{  public boolean equalsTopo(LineSegment other){  return p0.equals(other.p0) && p1.equals(other.p1) || p0.equals(other.p1) && p1.equals(other.p0);}  }
class C{  public KeyedObject(Comparable key,Object object){  this.key=key;  this.object=object;}  }
class C{  private void restoreDatabase(){  SharedPreferences prefs=getPreferences(MODE_PRIVATE);  boolean initialized=prefs.getBoolean(DB_INITIALIZED,false);  if (!initialized) {    mBillingService.restoreTransactions();    Toast.makeText(this,R.string.restoring_transactions,Toast.LENGTH_LONG).show();  }}  }
class C{  public float calculateAmplitude(float[] in){  float amp=0;  for (int i=0; i < in.length; i++) {    final float yn=a0 * (b0 * in[i] + b1 * in1 + b2 * in2 - a1 * out1 - a2 * out2);    in2=in1;    in1=in[i];    out2=out1;    out1=yn;    if (amp < MathUtils.abs(yn)) {      amp=yn;    } else {      amp*=decay;    }  }  return amp;}  }
class C{  public boolean isClassLoader(int objectId){  return loaderLabels.containsKey(objectId);}  }
class C{  public void addPolygonRecord1(EsriLayer layer){  OMGraphicList shapeData=new EsriPolygonList();  double[] part0=new double[]{45.0f,-70.0f,30.0f,-30.0f,10.0f,-80.0f,30.0f,-120.0f,45.0f,-70.0f};  EsriPolygon poly0=new EsriPolygon(part0,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_STRAIGHT);  shapeData.add(poly0);  ArrayList tabularData=new ArrayList();  tabularData.add(0,"first value");  tabularData.add(1,new Double(12.54));  layer.addRecord(shapeData,tabularData);}  }
class C{  @SmallTest public void testGetSteps(){  int raw=200;  int zero=50;  SensorStepServiceImpl sensorStepService=new SensorStepServiceImpl(solo.getCurrentActivity());  sensorStepService.storeRawSteps(zero);  solo.sleep(1000);  sensorStepService.storeZeroSteps();  solo.sleep(1000);  assertEquals(0,sensorStepService.getSteps());  sensorStepService.storeRawSteps(raw);  solo.sleep(1000);  assertEquals(raw - zero,sensorStepService.getSteps());}  }
class C{  private void displayConnectionError(){  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),registrationFailedOKBtnClickListerner);  alertDialog.show();}  }
class C{  @SuppressWarnings("unchecked") void add(int pos,SnmpOid oid,Vector<SnmpVarBind> v,boolean isnew,SnmpVarBind statusvb){  if (entryoids == null) {    entryoids=new SnmpOid[Delta];    entrylists=(Vector<SnmpVarBind>[])new Vector<?>[Delta];    isentrynew=new boolean[Delta];    rowstatus=new SnmpVarBind[Delta];    entrysize=Delta;    pos=0;  } else   if (pos >= entrysize || entrycount == entrysize) {    SnmpOid[] olde=entryoids;    Vector[] oldl=entrylists;    boolean[] oldn=isentrynew;    SnmpVarBind[] oldr=rowstatus;    entrysize+=Delta;    entryoids=new SnmpOid[entrysize];    entrylists=(Vector<SnmpVarBind>[])new Vector<?>[entrysize];    isentrynew=new boolean[entrysize];    rowstatus=new SnmpVarBind[entrysize];    if (pos > entrycount)     pos=entrycount;    if (pos < 0)     pos=0;    final int l1=pos;    final int l2=entrycount - pos;    if (l1 > 0) {      java.lang.System.arraycopy(olde,0,entryoids,0,l1);      java.lang.System.arraycopy(oldl,0,entrylists,0,l1);      java.lang.System.arraycopy(oldn,0,isentrynew,0,l1);      java.lang.System.arraycopy(oldr,0,rowstatus,0,l1);    }    if (l2 > 0) {      final int l3=l1 + 1;      java.lang.System.arraycopy(olde,l1,entryoids,l3,l2);      java.lang.System.arraycopy(oldl,l1,entrylists,l3,l2);      java.lang.System.arraycopy(oldn,l1,isentrynew,l3,l2);      java.lang.System.arraycopy(oldr,l1,rowstatus,l3,l2);    }  } else   if (pos < entrycount) {    final int l1=pos + 1;    final int l2=entrycount - pos;    java.lang.System.arraycopy(entryoids,pos,entryoids,l1,l2);    java.lang.System.arraycopy(entrylists,pos,entrylists,l1,l2);    java.lang.System.arraycopy(isentrynew,pos,isentrynew,l1,l2);    java.lang.System.arraycopy(rowstatus,pos,rowstatus,l1,l2);  }  entryoids[pos]=oid;  entrylists[pos]=v;  isentrynew[pos]=isnew;  rowstatus[pos]=statusvb;  entrycount++;}  }
class C{  @Override public void processTuple(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    MutableInt count=keycount.get(e.getKey());    if (count == null) {      count=new MutableInt(0);      keycount.put(e.getKey(),count);    }    count.increment();    if (count.intValue() <= getN()) {      first.emit(cloneTuple(e.getKey(),e.getValue()));    }  }}  }
class C{  private boolean isUndoAvailable(){  return getUndoManager() != null && getUndoManager().canUndoOrRedo();}  }
class C{  public void copyInternalVersion(Domain copy){  this.internalVersion=copy.internalVersion;}  }
class C{  @EventHandler(ignoreCancelled=true) public void onInventoryClick(InventoryClickEvent event){  for (  Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {    Player player=event.getActor();    ItemStack item=event.getCurrentItem();    Team team=wool.getTeam();    Match match=Cardinal.getMatch(player);    PlayingPlayerContainer container=match.getPlayingContainer(player);    if (!wool.isComplete() && item.getType().equals(Material.WOOL) && item.getData().getData() == wool.getColor().getData() && team.equals(container)) {      wool.setTouched(true);      boolean showMessage=false;      if (wool.isShow() && !wool.hasPlayerTouched(player)) {        wool.addPlayerTouched(player);        showMessage=true;        Channels.getTeamChannel(match,team).sendPrefixedMessage(new LocalizedComponentBuilder(ChatConstant.getConstant("objective.wool.touched"),Components.getName(player).build(),wool.getComponent(),new TeamComponent(wool.getTeam())).build());      }    }  }}  }
class C{  public Encryptor(AuthenticationInfo authenticationInfo) throws ServerRuntimeException, ConfigurationException {  this.authenticationInfo=authenticationInfo;  this.authenticationInfo.checkAndCleanAuthenticationInfo();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ENTRY_OR_EXIT_ACTION___TYPE_1:    setType_1((String)newValue);  return;case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_11:getAnonymous_entryOrExitAction_1_1().clear();getAnonymous_entryOrExitAction_1_1().addAll((Collection<? extends Anonymous_entryOrExitAction_1_>)newValue);return;case UmplePackage.ENTRY_OR_EXIT_ACTION___CODE_1:setCode_1((String)newValue);return;case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_21:getAnonymous_entryOrExitAction_2_1().clear();getAnonymous_entryOrExitAction_2_1().addAll((Collection<? extends Anonymous_entryOrExitAction_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testConstructorSetsPropertyDefaults() throws Exception {  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_USER),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_PWD),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"server");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"10.3.0.0");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"10.3.0.0");}  }
class C{  public boolean isRemote(){  return !this.dm.getId().equals(this.lockGrantorMember);}  }
class C{  public String foldsTipText(){  return "The number of train and test splits to produce";}  }
class C{  private void processPatch(final State current){  try {    Type stateType=Class.forName(current.triggerStateClassName);    ServiceDocument postState=Utils.fromJson(current.serializedTriggerState,stateType);    postState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(current.taskExpirationAgeMillis);    Operation post=Operation.createPost(UriUtils.buildUri(getHost(),current.factoryServiceLink)).setBody(postState);    this.sendRequest(post);  } catch (  ClassNotFoundException ex) {    logFailure(ex);  }}  }
class C{  public boolean isRequestAndRespondToGroupDisplayReportsEnabled(){  return readBoolean(RcsSettingsData.REQUEST_AND_RESPOND_TO_GROUP_DISPLAY_REPORTS);}  }
class C{  public static boolean mustBeInRegister(Register r,Instruction s){switch (s.getOpcode()) {case IA32_PREFETCHNTA_opcode:{      RegisterOperand op=MIR_CacheOp.getAddress(s).asRegister();      if (op.getRegister() == r)       return true;    }  break;case IA32_SQRTSS_opcode:case IA32_SQRTSD_opcode:case IA32_CVTSD2SI_opcode:case IA32_CVTSD2SS_opcode:case IA32_CVTSI2SD_opcode:case IA32_CVTSS2SD_opcode:case IA32_CVTSS2SI_opcode:case IA32_CVTTSD2SI_opcode:case IA32_CVTTSS2SI_opcode:case IA32_CVTSI2SS_opcode:{  RegisterOperand op=MIR_Unary.getResult(s).asRegister();  if (op.getRegister() == r)   return true;}break;case IA32_ANDPS_opcode:case IA32_ANDNPS_opcode:case IA32_ORPS_opcode:case IA32_XORPS_opcode:case IA32_ANDPD_opcode:case IA32_ANDNPD_opcode:case IA32_ORPD_opcode:case IA32_XORPD_opcode:case IMMQ_MOV_opcode:return true;case IA32_ADDSS_opcode:case IA32_CMPEQSS_opcode:case IA32_CMPLTSS_opcode:case IA32_CMPLESS_opcode:case IA32_CMPUNORDSS_opcode:case IA32_CMPNESS_opcode:case IA32_CMPNLTSS_opcode:case IA32_CMPNLESS_opcode:case IA32_CMPORDSS_opcode:case IA32_DIVSS_opcode:case IA32_MULSS_opcode:case IA32_SUBSS_opcode:case IA32_ADDSD_opcode:case IA32_CMPEQSD_opcode:case IA32_CMPLTSD_opcode:case IA32_CMPLESD_opcode:case IA32_CMPUNORDSD_opcode:case IA32_CMPNESD_opcode:case IA32_CMPNLTSD_opcode:case IA32_CMPNLESD_opcode:case IA32_CMPORDSD_opcode:case IA32_DIVSD_opcode:case IA32_MULSD_opcode:case IA32_SUBSD_opcode:{RegisterOperand op=MIR_BinaryAcc.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_UCOMISD_opcode:case IA32_UCOMISS_opcode:{RegisterOperand op=MIR_Compare.getVal1(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_SHRD_opcode:case IA32_SHLD_opcode:{RegisterOperand op=MIR_DoubleShift.getSource(s);if (op.getRegister() == r) return true;}break;case IA32_FCOMI_opcode:case IA32_FCOMIP_opcode:{Operand op=MIR_Compare.getVal2(s);if (!(op instanceof BURSManagedFPROperand)) {if (op.asRegister().getRegister() == r) return true;}}break;case IA32_IMUL2_opcode:{RegisterOperand op=MIR_BinaryAcc.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case MIR_LOWTABLESWITCH_opcode:{RegisterOperand op=MIR_LowTableSwitch.getIndex(s);if (op.getRegister() == r) return true;}break;case IA32_CMOV_opcode:case IA32_FCMOV_opcode:{RegisterOperand op=MIR_CondMove.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_MOVD_opcode:{RegisterOperand res=MIR_Move.getResult(s).asRegister();if (!res.isFloat() && !res.isDouble()) {if (VM.VerifyAssertions) {Operand val=MIR_Move.getValue(s);VM._assert(val.isRegister() && (val.isFloat() || val.isDouble()));}return true;}Operand val=MIR_Move.getValue(s);if (!val.isFloat() && !val.isDouble()) {if (VM.VerifyAssertions) {VM._assert(res.isRegister() && (res.isFloat() || res.isDouble()));}return true;}}break;case IA32_MOVZX__B_opcode:case IA32_MOVSX__B_opcode:case IA32_MOVZXQ__B_opcode:case IA32_MOVSXQ__B_opcode:{RegisterOperand op=MIR_Unary.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_MOVZX__W_opcode:case IA32_MOVSX__W_opcode:case IA32_MOVZXQ__W_opcode:case IA32_MOVSXQ__W_opcode:{RegisterOperand op=MIR_Unary.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_MOVSXDQ_opcode:{RegisterOperand op=MIR_Unary.getResult(s).asRegister();if (op.getRegister() == r) return true;}break;case IA32_SET__B_opcode:{if (MIR_Set.getResult(s).isRegister()) {RegisterOperand op=MIR_Set.getResult(s).asRegister();if (op.asRegister().getRegister() == r) return true;}}break;case IA32_TEST_opcode:{if (!MIR_Test.getVal2(s).isConstant()) {if (MIR_Test.getVal1(s).isRegister()) {if (MIR_Test.getVal1(s).asRegister().getRegister() == r) return true;} else if (MIR_Test.getVal2(s).isRegister()) {if (MIR_Test.getVal2(s).asRegister().getRegister() == r) return true;}}}break;case IA32_BT_opcode:{if (!MIR_Test.getVal2(s).isConstant()) {if (MIR_Test.getVal2(s).isRegister()) {if (MIR_Test.getVal2(s).asRegister().getRegister() == r) return true;}}}break;default :break;}return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:44.746 -0500",hash_original_method="FE787FFB2514635467B163AE42817C6A",hash_generated_method="D3CEB0C7341C4FBC5FE1D26C18B92729") public void hide(){  if (localLOGV)   Log.v(TAG,"HIDE: " + this);  mHandler.post(mHide);}  }
class C{  protected final void endOfInput() throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(false);}  }
class C{  private boolean map_calls(ClassGen cg,String fullClassName,ClassLoader loader){  boolean transformed=false;  try {    pgen=cg.getConstantPool();    Method[] methods=cg.getMethods();    for (int i=0; i < methods.length; i++) {      MethodGen mg=new MethodGen(methods[i],cg.getClassName(),pgen);      InstructionList il=mg.getInstructionList();      if (il == null)       continue;      if (debug)       out.format("Original code: %s%n",mg.getMethod().getCode());      instrument_method(methods[i],mg);      for (      Attribute a : mg.getCodeAttributes()) {        if (is_local_variable_type_table(a)) {          mg.removeCodeAttribute(a);        }      }      mg.setInstructionList(il);      mg.update();      mg.setMaxLocals();      mg.setMaxStack();      mg.update();      cg.replaceMethod(methods[i],mg.getMethod());      if (debug)       out.format("Modified code: %s%n",mg.getMethod().getCode());    }    cg.update();  } catch (  Exception e) {    out.format("Unexpected exception encountered: " + e);    e.printStackTrace();  }  return transformed;}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  public void readSwitchPageAttribute() throws IOException {  if (WbXmlLiterals.SWTICH_PAGE == currentByte) {    read();    this.pageAttrState=currentByte;    read();  }}  }
class C{  @Deprecated public EditSession(final LocalWorld world,final int maxBlocks,@Nullable final BlockBag blockBag){  this(WorldEdit.getInstance().getEventBus(),world,maxBlocks,blockBag,new EditSessionEvent(world,null,maxBlocks,null));}  }
class C{  public MultiKeyConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_SEGMENTS);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getUIClassID().equals(uiClassID)) {    updateUI();  }}  }
class C{  public void reset(){  _xml.reset();  _reader=null;  _inputStream=null;}  }
class C{  public FireSupportLine(String sidc){  super(sidc);  this.path=this.createPath();}  }
class C{  public void hide(){  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  MenuElement[] selection=manager.getSelectedPath();  for (int i=0; i < selection.length; i++) {    if (selection[i] == this) {      manager.clearSelectedPath();      break;    }  }  if (selection.length > 0) {    comboBox.repaint();  }}  }
class C{  public XMLDocument toXML(Object o) throws Exception {  clear();  invokeWriteToXML(null,writePreProcess(o),VAL_ROOT);  writePostProcess(o);  return m_Document;}  }
class C{  public EntityAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_name=jcas.getRequiredFeatureDE(casType,"name","uima.cas.String",featOkTst);  casFeatCode_name=(null == casFeat_name) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_name).getCode();  casFeat_entity=jcas.getRequiredFeatureDE(casType,"entity","uima.cas.String",featOkTst);  casFeatCode_entity=(null == casFeat_entity) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_entity).getCode();}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    m_saxHandler.startPrefixMapping(prefix,uri);    if (getShouldOutputNSAttr()) {      String name;      if (EMPTYSTRING.equals(prefix)) {        name="xmlns";        addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);      } else {        if (!EMPTYSTRING.equals(uri)) {          name="xmlns:" + prefix;          addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);        }      }    }  }  return pushed;}  }
class C{  public void mAssignmentCallback(MResourceAssignment assignment){  m_mAssignment=assignment;  if (m_createNew)   dispose(); else   displayCalendar();}  }
class C{  public boolean isNumericAt(int columnIndex){  boolean result;  result=false;  if ((columnIndex >= 0) && (columnIndex < getColumnCount())) {    if (columnIndex == 0) {      result=true;    } else {      if (m_Helper.getNumericColumns() == null) {        result=false;      } else {        result=m_Helper.getNumericColumns()[columnIndex - 1];      }    }  }  return result;}  }
class C{  protected MyJSONObject encodeInstance(final Entity entity,final Set<Entity> visited,MetaClass metaClass,View view) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {  if (visited == null) {    throw new IllegalArgumentException("null closure for encoder");  }  if (entity == null) {    return null;  }  boolean ref=!visited.add(entity);  MyJSONObject root=new MyJSONObject(idof(entity),false);  if (ref) {    return root;  }  if (entity instanceof BaseGenericIdEntity) {    byte[] securityToken=BaseEntityInternalAccess.getSecurityToken((BaseGenericIdEntity)entity);    if (securityToken != null) {      BaseGenericIdEntity baseGenericIdEntity=(BaseGenericIdEntity)entity;      root.set("__securityToken",Base64.getEncoder().encodeToString(securityToken));      String[] filteredAttributes=BaseEntityInternalAccess.getFilteredAttributes(baseGenericIdEntity);      if (filteredAttributes != null) {        MyJSONObject.Array array=new MyJSONObject.Array();        Arrays.stream(filteredAttributes).forEach(null);        root.set("__filteredAttributes",array);      }    }  }  MetadataTools metadataTools=AppBeans.get(MetadataTools.NAME);  List<MetaProperty> properties=ConverterHelper.getActualMetaProperties(metaClass,entity);  for (  MetaProperty property : properties) {    if (metadataTools.isPersistent(property) && !PersistenceHelper.isLoaded(entity,property.getName())) {      continue;    }    if (!attrViewPermitted(metaClass,property.getName()))     continue;    if (property.equals(metadataTools.getPrimaryKeyProperty(metaClass)) && !property.getJavaType().equals(String.class)) {      continue;    }    if (!isPropertyIncluded(view,property,metadataTools) && !DynamicAttributesUtils.isDynamicAttribute(property.getName())) {      continue;    }    Object value=entity.getValue(property.getName());switch (property.getType()) {case DATATYPE:      if (value != null) {        root.set(property.getName(),property.getRange().asDatatype().format(value));      } else       if (!DynamicAttributesUtils.isDynamicAttribute(property.getName())) {        root.set(property.getName(),null);      }    break;case ENUM:  if (value != null) {    root.set(property.getName(),property.getRange().asEnumeration().format(value));  } else {    root.set(property.getName(),null);  }break;case COMPOSITION:case ASSOCIATION:{MetaClass meta=propertyMetaClass(property);if (!readPermitted(meta)) break;View propertyView=(view == null || view.getProperty(property.getName()) == null ? null : view.getProperty(property.getName()).getView());if (!property.getRange().getCardinality().isMany()) {  if (value == null) {    root.set(property.getName(),null);  } else {    root.set(property.getName(),encodeInstance((Entity)value,visited,property.getRange().asClass(),propertyView));  }} else {  if (value == null) {    root.set(property.getName(),null);    break;  }  MyJSONObject.Array array=new MyJSONObject.Array();  root.set(property.getName(),array);  Collection<?> members=(Collection<?>)value;  for (  Object o : members) {    if (o == null) {      array.add(null);    } else {      array.add(encodeInstance((Entity)o,visited,property.getRange().asClass(),propertyView));    }  }}break;}default :throw new IllegalStateException("Unknown property type");}}return root;}  }
class C{  protected ResequencerImpl(){  super();}  }
class C{  public <FV>FV extractRawJavaFieldValue(Object object) throws SQLException {  Object val;  if (fieldGetMethod == null) {    try {      val=field.get(object);    } catch (    Exception e) {      throw SqlExceptionUtil.create("Could not get field value for " + this,e);    }  } else {    try {      val=fieldGetMethod.invoke(object);    } catch (    Exception e) {      throw SqlExceptionUtil.create("Could not call " + fieldGetMethod + " for "+ this,e);    }  }  @SuppressWarnings("unchecked") FV converted=(FV)val;  return converted;}  }
class C{  public InitializationDelegate(){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public ShortArrayDataRow(short[] data){  this.data=data;}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public static long convertStringToTimeMillis(String time){  long result=0;  if (time.endsWith("H")) {    long hoursToAdd=Integer.valueOf(StringUtils.remove(time,'H'));    result=((1000 * 60) * 60) * hoursToAdd;  } else   if (time.endsWith("M")) {    long minsToAdd=Integer.valueOf(StringUtils.remove(time,'M'));    result=(1000 * 60) * minsToAdd;  } else   if (time.endsWith("S")) {    long secsToAdd=Integer.valueOf(StringUtils.remove(time,'S'));    result=1000 * secsToAdd;  }  return result;}  }
class C{  public void validateServer() throws ServerValidationException {  try {    String versionString=adminManager.getServerVersion();    String alteredString=versionString.replaceAll("[^\\d]+","");    if (alteredString.length() < 3) {      alteredString+="0";    }    int major=Integer.parseInt(alteredString.substring(0,1));    int ver=Integer.parseInt(alteredString.substring(0,3));    boolean isNightly=versionString.matches("[^-]+-\\d{8}");    if (major < 8 || (!isNightly && ver < 804)) {      throw new ServerValidationException("Invalid MarkLogic Server Version: " + versionString);    }  } catch (  ResourceAccessException e) {    throw new ServerValidationException(e.toString());  }}  }
class C{  private void convertComplexOptionalGroups(final AST2BOpContext context,final StaticAnalysis sa,final QueryBase query,final GraphPatternGroup<IGroupMemberNode> group,final Set<IVariable<?>> exogenousVars){  final int arity=group.arity();  int complexOptionalGroupCount=0;  for (int i=0; i < arity; i++) {    final BOp child=(BOp)group.get(i);    if (child instanceof GraphPatternGroup<?>) {      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> childGroup=(GraphPatternGroup<IGroupMemberNode>)child;      if (recurse) {        convertComplexOptionalGroups(context,sa,query,childGroup,exogenousVars);      }      if (childGroup.isOptional() && (!(childGroup.arity() == 1 && childGroup.get(0) instanceof NamedSubqueryInclude))) {        complexOptionalGroupCount++;      }    } else     if (child instanceof SubqueryRoot) {      final SubqueryRoot subqueryRoot=(SubqueryRoot)child;      if (recurse) {        convertComplexOptionalGroups(context,sa,query,subqueryRoot.getWhereClause(),exogenousVars);      }    }  }  if (complexOptionalGroupCount >= 2 && (group instanceof JoinGroupNode)) {    convertJoinGroup(context,sa,query,(JoinGroupNode)group,exogenousVars);  }}  }
class C{  public JmsMessage remove(){  return QUEUE.get().remove();}  }
class C{  public FileExport(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void readObject(){}  }
class C{  protected void clickOnView(int id){  solo.sleep(300);  solo.clickOnView(getView(id));}  }
class C{  public String pickImage(){  String path=null;  try {    path=pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }  return path;}  }
class C{  public void updateFromDhcpRequest(DhcpResults orig){  if (orig == null || orig.linkProperties == null)   return;  if (linkProperties.getRoutes().size() == 0) {    for (    RouteInfo r : orig.linkProperties.getRoutes())     linkProperties.addRoute(r);  }  if (linkProperties.getDnses().size() == 0) {    for (    InetAddress d : orig.linkProperties.getDnses())     linkProperties.addDns(d);  }}  }
class C{  public cudaEvent_t(){}  }
class C{  public static float logAdd(float lx,float ly){  float max, negDiff;  if (lx > ly) {    max=lx;    negDiff=ly - lx;  } else {    max=ly;    negDiff=lx - ly;  }  if (max == Double.NEGATIVE_INFINITY) {    return max;  } else   if (negDiff < -LOGTOLERANCE_F) {    return max;  } else {    return max + (float)Math.log(1.0f + Math.exp(negDiff));  }}  }
class C{  public static SpannableString typeface(CharSequence sequence,TypefaceCollection typefaceCollection,int style){  checkTypefaceStyleThrowing(style);  SpannableString s=new SpannableString(sequence);  s.setSpan(new TypefaceSpan(typefaceCollection.getTypeface(style)),0,s.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  return s;}  }
class C{  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {  final Outputs<Object> outputs=NoOutputs.getSingleton();  final Object empty=outputs.getNoOutput();  final Builder<Object> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,0,0,true,true,shareMaxTailLength,outputs,false,PackedInts.DEFAULT,true,15);  BytesRefBuilder scratch=new BytesRefBuilder();  BytesRef entry;  final IntsRefBuilder scratchIntsRef=new IntsRefBuilder();  int count=0;  BytesRefIterator iter=sorter.iterator();  while ((entry=iter.next()) != null) {    count++;    if (scratch.get().compareTo(entry) != 0) {      builder.add(Util.toIntsRef(entry,scratchIntsRef),empty);      scratch.copyBytes(entry);    }  }  return count == 0 ? null : builder.finish();}  }
class C{  public static IndexType createNonUnique(boolean hash,boolean spatial){  IndexType type=new IndexType();  type.hash=hash;  type.spatial=spatial;  return type;}  }
class C{  public static void addTypeMapper(Class<?> clz,Class<?> mapper){synchronized (classMapper) {    LinkedHashSet<Class<?>> h=classMapper.get(clz);    if (h == null) {      h=new LinkedHashSet<Class<?>>();      classMapper.put(clz,h);    }    h.add(mapper);  }}  }
class C{  public void updateStrategies(int iteration){  for (int i=0; i < this.disableInIteration.size(); i++) {    if (this.disableInIteration.get(i) == iteration) {      double weight=this.weights.get(i);      this.weights.set(i,0.0);      this.strategies.set(i,null);      this.totalWeights-=weight;    }  }}  }
class C{  public ServiceNotPublishedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public ZapToggleButton(String text,Icon icon,boolean selected){  super(text,icon,selected);}  }
class C{  public UndefinedType createUndefinedType(){  UndefinedTypeImpl undefinedType=new UndefinedTypeImpl();  return undefinedType;}  }
class C{  public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {  if (buffer.remaining() >= length) {    buffer.put(value,offset,length);  } else {    throw new OutOfSpaceException(buffer.position(),buffer.limit());  }}  }
class C{  static void test5(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuffer sb=new StringBuffer(s);    int length=sb.length();    for (int j=0; j <= length; j++) {      int result=sb.codePointCount(j,length);      int expected=Character.codePointCount(sb,j,length);      check(result != expected,"codePointCount(input[" + i + "], "+ j+ ", "+ length+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int result=sb.codePointCount(0,j);      int expected=Character.codePointCount(sb,0,j);      check(result != expected,"codePointCount(input[" + i + "], 0, "+ j+ ")",result,expected);    }    testCodePointCount(null,0,0,NullPointerException.class);    testCodePointCount(sb,-1,length,IndexOutOfBoundsException.class);    testCodePointCount(sb,0,length + 1,IndexOutOfBoundsException.class);    testCodePointCount(sb,length,length - 1,IndexOutOfBoundsException.class);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=createCaller().init();  test.config.traceTest=true;  test.config.memory=true;  test.config.networked=true;  test.config.beforeTest();  test.test();  test.config.afterTest();}  }
class C{  private void addToBar(MTreeNode nd,JToolBar currentToolBar,boolean isLabel){  String label=nd.toString().trim();  if (!isLabel) {    CButton button=new CButton(label);    button.setOpaque(false);    button.setHorizontalAlignment(JButton.LEFT);    button.setMargin(new Insets(0,0,0,0));    button.setIcon(nd.getIcon());    button.setRequestFocusEnabled(false);    button.setToolTipText(nd.getDescription());    button.setActionCommand(String.valueOf(nd.getNode_ID()));    button.addActionListener(this);    button.addMouseListener(mouseListener);    currentToolBar.add(button);  } else {    currentToolBar.add(new JLabel("<html><u><b>" + label + "</b></u></html>"));  }  bar.validate();  bar.repaint();}  }
class C{  public boolean isUpdatingAllInspectors(){  return updatingAllInspectors;}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((short[])(pieces[x])).length;  int runningsum=0;  short[] newgenome=new short[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((short[])(pieces[x])).length);    runningsum+=((short[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public Surface drawLine(float x0,float y0,float x1,float y1,float width){  if (x1 < x0) {    float temp=x0;    x0=x1;    x1=temp;    temp=y0;    y0=y1;    y1=temp;  }  float dx=x1 - x0, dy=y1 - y0;  float length=FloatMath.sqrt(dx * dx + dy * dy);  float wx=dx * (width / 2) / length;  float wy=dy * (width / 2) / length;  AffineTransform xf=new AffineTransform();  xf.setRotation(FloatMath.atan2(dy,dx));  xf.setTranslation(x0 + wy,y0 - wx);  Transforms.multiply(tx(),xf,xf);  if (patternTex != null) {    batch.addQuad(patternTex,tint,xf,0,0,length,width);  } else {    batch.addQuad(colorTex,Tint.combine(fillColor,tint),xf,0,0,length,width);  }  return this;}  }
class C{  char[] DigestCalcResponse(char[] HA1,String serverNonce,String nonceCount,String clientNonce,String qop,String method,String digestUri,boolean clientResponseFlag) throws SaslException {  byte[] HA2;  byte[] respHash;  char[] HA2Hex;  try {    MessageDigest md=MessageDigest.getInstance("MD5");    if (clientResponseFlag)     md.update(method.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(digestUri.getBytes("UTF-8"));    if ("auth-int".equals(qop)) {      md.update(":".getBytes("UTF-8"));      md.update("00000000000000000000000000000000".getBytes("UTF-8"));    }    HA2=md.digest();    HA2Hex=convertToHex(HA2);    md.update(new String(HA1).getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(serverNonce.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    if (qop.length() > 0) {      md.update(nonceCount.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(clientNonce.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(qop.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));    }    md.update(new String(HA2Hex).getBytes("UTF-8"));    respHash=md.digest();  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("No provider found for MD5 hash",e);  }catch (  UnsupportedEncodingException e) {    throw new SaslException("UTF-8 encoding not supported by platform.",e);  }  return convertToHex(respHash);}  }
class C{  public meta addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  final public void computeTimeLimit(SearchParams sPar){  minTimeLimit=-1;  maxTimeLimit=-1;  maxDepth=-1;  maxNodes=-1;  if (sPar.infinite) {    minTimeLimit=-1;    maxTimeLimit=-1;    maxDepth=-1;  } else   if (sPar.depth > 0) {    maxDepth=sPar.depth;  } else   if (sPar.mate > 0) {    maxDepth=sPar.mate * 2 - 1;  } else   if (sPar.moveTime > 0) {    minTimeLimit=maxTimeLimit=sPar.moveTime;  } else   if (sPar.nodes > 0) {    maxNodes=sPar.nodes;  } else {    int moves=sPar.movesToGo;    if (moves == 0) {      moves=999;    }    moves=Math.min(moves,45);    if (ponderMode) {      final double ponderHitRate=0.35;      moves=(int)Math.ceil(moves * (1 - ponderHitRate));    }    boolean white=pos.whiteMove;    int time=white ? sPar.wTime : sPar.bTime;    int inc=white ? sPar.wInc : sPar.bInc;    final int margin=Math.min(1000,time * 9 / 10);    int timeLimit=(time + inc * (moves - 1) - margin) / moves;    minTimeLimit=(int)(timeLimit * 0.85);    maxTimeLimit=(int)(minTimeLimit * (Math.max(2.5,Math.min(4.0,moves / 2.0))));    minTimeLimit=clamp(minTimeLimit,1,time - margin);    maxTimeLimit=clamp(maxTimeLimit,1,time - margin);  }}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  @SuppressWarnings("unchecked") public static Set<Integer> toSet(int[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  super.connectionNotification(eventName,source);  if (connectionAllowed(eventName)) {    if (eventName.equals("dataSet")) {      m_dataProvider=true;      m_trainingProvider=false;      m_testProvider=false;    } else     if (eventName.equals("trainingSet")) {      m_dataProvider=false;      m_trainingProvider=true;      m_testProvider=false;    } else     if (eventName.equals("testSet")) {      m_dataProvider=false;      m_trainingProvider=false;      m_testProvider=true;    }  }}  }
class C{  protected boolean checkColumnNames(ResultSet rs,String[] names) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  if (rsmd.getColumnCount() < names.length) {    System.out.println("Cols=" + rsmd.getColumnCount());    return false;  }  for (int i=1; i <= names.length; i++) {    if (names[i - 1].length() > 0 && !rsmd.getColumnLabel(i).equals(names[i - 1])) {      System.out.println(names[i - 1] + " = " + rsmd.getColumnLabel(i));      return false;    }  }  return true;}  }
class C{  public TagParams withForce(boolean force){  this.force=force;  return this;}  }
class C{  public void enableSpeech(boolean toEnable){  if (inputContainer.getComponentCount() == 3 && toEnable && system.getModule(AudioModule.class) != null) {    SpeechInputPanel panel=new SpeechInputPanel(system.getModule(AudioModule.class));    inputContainer.add(panel,BorderLayout.SOUTH);    repaint();  } else   if (inputContainer.getComponentCount() == 4 && !toEnable) {    inputContainer.remove(3);    repaint();  }}  }
class C{  public boolean containsBeforeProof(int offset,IDocument document) throws BadLocationException {  int startLine=document.getLineOfOffset(positionOfStatement.getOffset());  int endLine=document.getLineOfOffset(positionOfProof.getOffset());  int lineOfOffset=document.getLineOfOffset(offset);  return lineOfOffset >= startLine && lineOfOffset < endLine;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public UnsupportedOperationException(String message){  super(message);}  }
class C{  @SafeVarargs public static <T>Substitution<T> forArgs(List<TypeVariable> parameters,T... arguments){  if (parameters.size() != arguments.length) {    throw new IllegalArgumentException("number of parameters and arguments must agree, have: " + parameters.size() + ", "+ arguments.length);  }  Substitution<T> s=new Substitution<>();  for (int i=0; i < parameters.size(); i++) {    s.put(parameters.get(i),arguments[i]);  }  return s;}  }
class C{  public ValueExpression resolveVariable(String variable){  return map.get(variable);}  }
class C{  public void writeTo(final OutputStream outputStream) throws IOException {  if (this.httpResponse != null && this.currentRequest != null) {    final HttpEntity httpEntity=this.httpResponse.getEntity();    if (httpEntity != null)     try {      httpEntity.writeTo(outputStream);      outputStream.flush();      EntityUtils.consume(httpEntity);      ConnectionInfo.removeConnection(this.currentRequest.hashCode());      this.currentRequest=null;    } catch (    final IOException e) {      ConnectionInfo.removeConnection(this.currentRequest.hashCode());      this.currentRequest.abort();      this.currentRequest=null;      this.httpResponse.close();      throw e;    }  }}  }
class C{  protected AlertException(byte description,SSLException reason){  super(reason);  this.reason=reason;  this.description=description;}  }
class C{  public synchronized boolean contains(byte[] object){  for (int i=0; i < hashFuncs; i++) {    if (!Utils.checkBitLE(data,murmurHash3(data,nTweak,i,object)))     return false;  }  return true;}  }
class C{  public void output(PrintWriter out){  html.output(out);}  }
class C{  public void checkLastTagWas(final int value) throws InvalidProtocolBufferNanoException {  if (lastTag != value) {    throw InvalidProtocolBufferNanoException.invalidEndTag();  }}  }
class C{  public void start(long startMs,float initialRadius,float targetRadius){  if (mFocusState != FocusState.STATE_INACTIVE) {    Log.w(TAG,"start() called while the ring was still focusing!");  }  mRingRadius.stop();  mRingRadius.setValue(initialRadius);  mRingRadius.setTarget(targetRadius);  mEnterStartMillis=startMs;  mFocusState=FocusState.STATE_ENTER;  mInvalidator.invalidate();}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.menu,menu);  if (BuildConfig.DEBUG) {    MenuItem item=menu.add("Import BPC");    item.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);  }  return super.onCreateOptionsMenu(menu);}  }
class C{  public static MatrixBlock convertToMatrixBlock(CTableMap map,int rlen,int clen){  return map.toMatrixBlock(rlen,clen);}  }
class C{  public static EvaluationResult findOrCreate(ResultHierarchy hierarchy,Result parent,String name,String shortname){  ArrayList<EvaluationResult> ers=ResultUtil.filterResults(hierarchy,parent,EvaluationResult.class);  EvaluationResult ev=null;  for (  EvaluationResult e : ers) {    if (shortname.equals(e.getShortName())) {      ev=e;      break;    }  }  if (ev == null) {    ev=new EvaluationResult(name,shortname);    hierarchy.add(parent,ev);  }  return ev;}  }
class C{  private Stack<CompositeTransaction> removeThreadMappings(Thread thread){  Stack<CompositeTransaction> ret=null;synchronized (threadtotxmap_) {    ret=threadtotxmap_.remove(thread);    CompositeTransaction tx=ret.peek();    txtothreadmap_.remove(tx);  }  return ret;}  }
class C{  public double eval(double params[]){  return (Math.exp(-Math.pow(params[0] + params[1] + params[2]+ params[3],2.0)));}  }
class C{  public LanguageTranslator(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  @Override public String toString(){  if (value > 0xffff || value < -0xffff) {    return "0x" + Integer.toHexString(value);  } else {    return Integer.toString(value);  }}  }
class C{  public AffineTransform(AffineTransform Tx){  this.m00=Tx.m00;  this.m10=Tx.m10;  this.m01=Tx.m01;  this.m11=Tx.m11;  this.m02=Tx.m02;  this.m12=Tx.m12;  this.state=Tx.state;  this.type=Tx.type;}  }
class C{  public ComplementRegionParser(@NonNull Match match,Element element) throws RegionException {  RegionModule module=Cardinal.getModule(RegionModule.class);  if (element.getAttribute("region") != null) {    region=module.getRegionById(match,element.getAttributeValue("region"));  }  for (  Element subRegionElement : element.getChildren()) {    Region region=module.getRegion(match,subRegionElement);    if (region != null) {      if (this.region == null) {        this.region=region;      } else {        complements.add(region);      }    }  }  if (region == null) {    throw new MissingRegionPropertyException("No sub-regions specified for complement region",element);  }  if (complements.isEmpty()) {    throw new MissingRegionPropertyException("No complements specified for complement region",element);  }}  }
class C{  static void compileArrayStoreBarrierByte(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.byteArrayWriteBarrierMethod);}  }
class C{  public MetaPopulationModel(String name,ArrayList<DemographicModel> demographicModelList,Parameter populationProportions){  super(name);  this.populationProportions=populationProportions;  if (populationProportions != null) {    addVariable(populationProportions);    populationProportions.addBounds(new Parameter.DefaultBounds(1.0,0.0,populationProportions.getDimension()));    populationCount=populationProportions.getDimension() + 1;    for (int i=1; i < populationCount; i++) {      demographicModelList.add(demographicModelList.get(0));    }    demographicModels=demographicModelList.toArray(new DemographicModel[0]);    addModel(demographicModels[0]);  } else {    populationCount=demographicModelList.size();    demographicModels=demographicModelList.toArray(new DemographicModel[0]);    for (int i=0; i < populationCount; i++) {      addModel(demographicModels[i]);    }  }  addStatistic(populationSizesStatistic);}  }
class C{  public boolean isFailover(){  return mNetworkInfo.isFailover();}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().openStream();  }}  }
class C{  void populateEquilibriumColourArray(ColourChangeMatrix colourChangeMatrix){  for (int clr=0; clr < colourCount; clr++) {    equilibriumColours[clr]=colourChangeMatrix.getEquilibrium(clr);  }}  }
class C{  public ColladaVertices(String ns){  super(ns);}  }
class C{  public void testGenerateRandomString(){  assertEquals(7,Utils.generateRandomString(7).length());}  }
class C{  @Deprecated public boolean isStaleCheckingEnabled(){  return params.isStaleCheckingEnabled();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testPlusMathContextNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=49;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="-9294878209448847823.121247898748298842980877981";  int cScale=27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.plus(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  public ListenableFuture<String> pullRaw(final String expr){  SettableFuture<String> result=SettableFuture.create();  AbstractMap.SimpleEntry<String,SettableFuture<String>> entry=new AbstractMap.SimpleEntry<>(expr,result);  try {    queue.put(entry);  } catch (  InterruptedException e) {    result.setException(e);  }  return result;}  }
class C{  public AbstractHttpClient createHTTPClient() throws AuthenticationException, GeneralSecurityException, RuntimeException {  return createHTTPClient(connectionTimeout,connectionReadTimeout);}  }
class C{  public void slerp(Quaternion input,Quaternion output,float t){  Quaternion bufferQuat=null;  float cosHalftheta=this.dotProduct(input);  if (cosHalftheta < 0) {    bufferQuat=new Quaternion();    cosHalftheta=-cosHalftheta;    bufferQuat.points[0]=(-input.points[0]);    bufferQuat.points[1]=(-input.points[1]);    bufferQuat.points[2]=(-input.points[2]);    bufferQuat.points[3]=(-input.points[3]);  } else {    bufferQuat=input;  }  if (Math.abs(cosHalftheta) >= 1.0) {    output.points[0]=(this.points[0]);    output.points[1]=(this.points[1]);    output.points[2]=(this.points[2]);    output.points[3]=(this.points[3]);  } else {    double sinHalfTheta=Math.sqrt(1.0 - cosHalftheta * cosHalftheta);    double halfTheta=Math.acos(cosHalftheta);    double ratioA=Math.sin((1 - t) * halfTheta) / sinHalfTheta;    double ratioB=Math.sin(t * halfTheta) / sinHalfTheta;    output.points[3]=((float)(points[3] * ratioA + bufferQuat.points[3] * ratioB));    output.points[0]=((float)(this.points[0] * ratioA + bufferQuat.points[0] * ratioB));    output.points[1]=((float)(this.points[1] * ratioA + bufferQuat.points[1] * ratioB));    output.points[2]=((float)(this.points[2] * ratioA + bufferQuat.points[2] * ratioB));  }}  }
class C{  public Vector3m toVector3m(float y){  return Vector2.toVector3m(this,y);}  }
class C{  public boolean isCachedMemory(){  return true;}  }
class C{  public Vector(){  this(10);}  }
class C{  public void testSetF2Momentary(){  boolean f2Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF2Momentary(f2Momentary);}  }
class C{  public Map<StoragePort,Long> computeStoragePortUsage(List<StoragePort> candidatePorts,StorageSystem system,boolean updatePortUsages){  Map<StoragePort,Long> usages=new HashMap<StoragePort,Long>();  boolean metricsValid=metricsValid(candidatePorts);  List<StoragePort> portsUnderCeiling=eliminatePortsOverCeiling(candidatePorts,system,true);  for (  StoragePort sp : portsUnderCeiling) {    if (sp.getPortType().equals(StoragePort.PortType.frontend.name())) {      Long usage=0L;      if (metricsValid) {        Double metric=MetricsKeys.getDouble(MetricsKeys.portMetric,sp.getMetrics());        usage=new Double(metric * 10.0).longValue();      } else {        usage=MetricsKeys.getLong(MetricsKeys.volumeCount,sp.getMetrics());      }      usages.put(sp,usage);      _log.info(String.format("Port usage: port %s metric %d %s",portName(sp),usage,metricsValid ? "portMetric" : "volumeCount"));    }  }  return usages;}  }
class C{  public static Border createRoundBorder(int arcWidth,int arcHeight,boolean outline){  Border b=createRoundBorder(arcWidth,arcHeight);  b.outline=outline;  return b;}  }
class C{  public static ObjectInputStream newObjectInputStream(File file,final ClassLoader classLoader) throws IOException {  return IOGroovyMethods.newObjectInputStream(new FileInputStream(file),classLoader);}  }
class C{  public StatementEvent(PooledConnection con,PreparedStatement statement,SQLException exception){  super(con);  this.statement=statement;  this.exception=exception;}  }
class C{  public static NinePatch createNinePatch(URL fileUrl,boolean convert){  try {    return NinePatch.load(fileUrl,convert);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private void toggleMicMute(){  AudioManager audioManager=(AudioManager)VectorCallViewActivity.this.getSystemService(Context.AUDIO_SERVICE);  if (null != audioManager) {    boolean isMuted=audioManager.isMicrophoneMute();    Log.d(LOG_TAG,"## toggleMicMute(): current mute val=" + isMuted + " new mute val="+ !isMuted);    audioManager.setMicrophoneMute(!isMuted);  } else {    Log.w(LOG_TAG,"## toggleMicMute(): Failed due to invalid AudioManager");  }}  }
class C{  @Override public int hashCode(){  int hash=model.hashCode() * 19;  T value=get();  if (value != null) {    hash+=value.hashCode() * 13;  }  return hash;}  }
class C{  public ConnectionPoolTimeoutException(){  super();}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlPlacemark kmlPlacemark,KmlDocument kmlDocument){  Polygon polygonOverlay=new Polygon();  polygonOverlay.setPoints(mCoordinates);  if (mHoles != null)   polygonOverlay.setHoles(mHoles);  polygonOverlay.setTitle(kmlPlacemark.mName);  polygonOverlay.setSnippet(kmlPlacemark.mDescription);  polygonOverlay.setSubDescription(kmlPlacemark.getExtendedDataAsText());  if (styler == null)   applyDefaultStyling(polygonOverlay,defaultStyle,kmlPlacemark,kmlDocument,map); else   styler.onPolygon(polygonOverlay,kmlPlacemark,this);  return polygonOverlay;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.UNKNOWN_TYPE_REF___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public static float lerp(float v0,float v1,float t){  return v0 + t * (v1 - v0);}  }
class C{  private void checkStreamability() throws SQLException {  if (this.hasOutputParams && createStreamingResultSet()) {    throw SQLError.createSQLException(Messages.getString("CallableStatement.14"),SQLError.SQL_STATE_DRIVER_NOT_CAPABLE,getExceptionInterceptor());  }}  }
class C{  public boolean equals(Object o){  if ((o == null) || !(o.getClass().equals(this.getClass()))) {    return false;  }  SelectedTag s=(SelectedTag)o;  if ((s.getTags() == m_Tags) && (s.getSelectedTag() == m_Tags[m_Selected])) {    return true;  } else {    return false;  }}  }
class C{  @SuppressWarnings({"unchecked"}) protected final <T extends Map<E,Object>>T map(){  return (T)map;}  }
class C{  public WalkingIteratorSorted(PrefixResolver nscontext){  super(nscontext);}  }
class C{  public double normWithAbort(double[] x1,double[] x2,double limit){switch (normToUse) {case NORM_EUCLIDEAN_NORMALISED:    return euclideanNormWithAbort(x1,x2,limit) / Math.sqrt(x1.length);case NORM_MAX_NORM:  return maxNormWithAbort(x1,x2,limit);case NORM_EUCLIDEAN_SQUARED:return euclideanNormSquaredWithAbort(x1,x2,limit);case NORM_EUCLIDEAN:default :return euclideanNormWithAbort(x1,x2,limit);}}  }
class C{  public static boolean equals(int[] a,int[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  protected DLockService(String serviceName,DistributedSystem ds,boolean isDistributed,boolean destroyOnDisconnect,boolean automateFreeResources){  super();  this.dlockStats=getOrCreateStats(ds);  this.serialNumber=createSerialNumber();  this.serviceName=serviceName;  this.ds=(InternalDistributedSystem)ds;  this.dm=this.ds.getDistributionManager();  this.stopper=new DLockStopper(this.dm,this);  this.isDistributed=isDistributed;  this.destroyOnDisconnect=destroyOnDisconnect;  this.automateFreeResources=automateFreeResources || AUTOMATE_FREE_RESOURCES;}  }
class C{  private void copyPropertiesToSave(FileExportRule orig,ExportRule dest,FileShare fs){  dest.setFsID(fs.getId());  dest.setExportPath(orig.getExportPath());  dest.setSecFlavor(orig.getSecFlavor());  dest.setAnon(orig.getAnon());  dest.setReadOnlyHosts(orig.getReadOnlyHosts());  dest.setReadWriteHosts(orig.getReadWriteHosts());  dest.setRootHosts(orig.getRootHosts());  dest.setMountPoint(orig.getMountPoint());  _log.info("Expor Rule : {} - {}",orig,dest);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  static User findByProfile(org.spongepowered.api.profile.GameProfile profile){  UUID uniqueId=profile.getUniqueId();  User user=userCache.getIfPresent(uniqueId);  if (user != null) {    if (user.getName() == null && profile.getName().isPresent()) {      user=getFromStoredData(profile);    }    return user;  }  user=getOnlinePlayer(uniqueId);  if (user != null) {    return user;  }  user=getFromStoredData(profile);  if (user != null) {    return user;  }  user=getFromWhitelist(uniqueId);  if (user != null) {    return user;  }  user=getFromBanlist(uniqueId);  return user;}  }
class C{  @Override public ScanResult beforeScanCheck(Attribute attribute) throws UserError {  return ScanResult.UNCHECKED;}  }
class C{  protected UnknownTypeRefImpl(){  super();}  }
class C{  protected boolean parsePriorityInternal() throws CSSException, IOException {  nextIgnoreSpaces();  scanner=null;switch (current) {case LexicalUnits.EOF:    return false;case LexicalUnits.IMPORT_SYMBOL:  return true;default :reportError("token",new Object[]{new Integer(current)});return false;}}  }
class C{  public void doPost(String requestUrl,JSONObject postJsonData,OnDaVinciRequestListener requestListener){  doRequest(Request.Method.POST,requestUrl,null,postJsonData,requestListener);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GREATER_OP___GREATER_OP_1:    setGreaterOp_1(GREATER_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  public mxPartitionLayout(mxGraph graph){  this(graph,true);}  }
class C{  private void sendSubscribe(SipRequest subscribe) throws PayloadException, NetworkException, ContactManagerException {  try {    if (sLogger.isActivated()) {      sLogger.info(new StringBuilder("Send SUBSCRIBE, expire=").append(subscribe.getExpires()).append("ms").toString());    }    SipTransactionContext ctx=mImsModule.getSipManager().sendSipMessageAndWait(subscribe);    if (ctx.isSipResponse()) {      if ((ctx.getStatusCode() >= Response.OK) && (ctx.getStatusCode() < Response.MULTIPLE_CHOICES)) {        handle200OK(ctx);      } else       if (Response.PROXY_AUTHENTICATION_REQUIRED == ctx.getStatusCode()) {        handle407Authentication(ctx);      } else       if (Response.NOT_FOUND == ctx.getStatusCode()) {        handleUserNotFound(ctx);      } else {        handleError(new PresenceError(PresenceError.SUBSCRIBE_FAILED,ctx.getStatusCode() + " " + ctx.getReasonPhrase()));      }    } else {      if (sLogger.isActivated()) {        sLogger.debug("No response received for SUBSCRIBE");      }      handleError(new PresenceError(PresenceError.SUBSCRIBE_FAILED));    }  } catch (  FileAccessException e) {    throw new PayloadException("Failed to send SUBSCRIBE!",e);  }}  }
class C{  public static String generateFilename(String topologyName,String role){  return generateFilename(topologyName,role,"tag",0,DEFAULT_FILENAME_EXTENSION);}  }
class C{  public CCodeNodeMenu(final CGraphModel model,final NaviNode node,final Object clickedObject,final double y,final List<ICodeNodeExtension> extensions){  Preconditions.checkNotNull(model,"IE02368: model arguement can not be null");  Preconditions.checkNotNull(extensions,"IE02369: extensions argument can not be null");  Preconditions.checkNotNull(node,"IE00967: Node argument can't be null");  final int line=node.positionToRow(y);  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();  final INaviInstruction instruction=(line != -1) ? CCodeNodeHelpers.lineToInstruction(codeNode,line) : null;  CFollowInDumpMenu.addFollowInDumpMenu(this,model,node,clickedObject,y);  if (line == 0) {    addRenameFunctionMenu(codeNode,model);  }  if (clickedObject instanceof COperandTreeNode) {    addOperandTreeNodeMenu(model,(COperandTreeNode)clickedObject,node,instruction,extensions);  }  CMenuBuilder.addCommentMenu(this,model,node.getRawNode());  CMenuBuilder.addSelectionMenus(this,model.getGraph(),node);  if (node.getRawNode().getParentGroup() != null) {    add(new CRemoveFromGroupAction(node));    addSeparator();  }  addOpenOriginalFunctionMenu(model,node);  final boolean allowUninlining=canUninline((INaviCodeNode)node.getRawNode());  final List<Pair<INaviInstruction,INaviFunction>> functions=CReferenceFinder.getCodeReferenceList((INaviCodeNode)node.getRawNode());  add(new CSubFunctionMenu(model,functions,allowUninlining));  add(new CInliningMenu(model,node,functions,allowUninlining));  addSeparator();  CMenuBuilder.addTaggingMenu(this,model,node);  add(new CClipboardMenu(node,line));  addSeparator();  add(CActionProxy.proxy(new CActionShowReilCodeNode(model.getParent(),(INaviCodeNode)node.getRawNode())));  if (instruction != null) {    addSeparator();    add(new CInstructionMenu(model,node,instruction,extensions));  }}  }
class C{  public static void shareEpisode(Context context,Episode episode,Uri bitmapUri){  String channelTitle=episode.getChannelTitle();  String shareUrl=episode.getUrl() != null ? episode.getUrl() : episode.getRemoteMediaUrl();  int messageResId=episode.getEpisodeStatus() == EpisodeStatus.IN_PROGRESS ? R.string.share_listening_episode_text : R.string.share_episode_text;  String shareText=String.format(context.getString(messageResId),episode.getTitle(),channelTitle,shareUrl);  Intent intent=new Intent(Intent.ACTION_SEND);  intent.setType("text/plain");  intent.putExtra(Intent.EXTRA_TEXT,shareText);  if (bitmapUri != null) {    intent.putExtra(Intent.EXTRA_STREAM,bitmapUri);  }  Intent chooser=Intent.createChooser(intent,context.getString(R.string.share_with));  if (intent.resolveActivity(context.getPackageManager()) != null) {    context.startActivity(chooser);  }}  }
class C{  public void animateVisibility(boolean visible){  if (this.visible != visible) {    this.visible=visible;    if (alphaAnimator != null) {      alphaAnimator.cancel();    }    alphaAnimator=ObjectAnimator.ofFloat(this,"alpha",visible ? 1f : 0f);    alphaAnimator.setDuration(visible ? 200 : 150);    alphaAnimator.start();  }}  }
class C{  public static boolean unexportObject(Remote obj,boolean force) throws java.rmi.NoSuchObjectException {synchronized (tableLock) {    Target target=getTarget(obj);    if (target == null) {      throw new NoSuchObjectException("object not exported");    } else {      if (target.unexport(force)) {        removeTarget(target);        return true;      } else {        return false;      }    }  }}  }
class C{  public static InputMethodListener remove(InputMethodListener l,InputMethodListener oldl){  return (InputMethodListener)removeInternal(l,oldl);}  }
class C{  public Item dequeue(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  Item item=first.item;  first=first.next;  n--;  if (isEmpty())   last=null;  return item;}  }
class C{  public static int partial_token_sort_ratio(String s1,String s2,Boolean force_ascii){  if (force_ascii == null) {    force_ascii=true;  }  return _token_sort(s1,s2,true,force_ascii);}  }
class C{  protected void writeQualifiedName(String nsAlias,String name) throws IOException {  if (nsAlias != null && nsAlias.length() > 0) {    writer.write(nsAlias);    writer.write(':');  }  writer.write(name);}  }
class C{  public static void emergencyClose(){  ConnectionTable ct=(ConnectionTable)lastInstance.get();  if (ct == null) {    return;  }  lastInstance.set(null);}  }
class C{  final ResultSetInternalMethods sqlQueryDirect(StatementImpl callingStatement,String query,String characterEncoding,Buffer queryPacket,int maxRows,int resultSetType,int resultSetConcurrency,boolean streamResults,String catalog,Field[] cachedMetadata) throws Exception {  this.statementExecutionDepth++;  try {    if (this.statementInterceptors != null) {      ResultSetInternalMethods interceptedResults=invokeStatementInterceptorsPre(query,callingStatement,false);      if (interceptedResults != null) {        return interceptedResults;      }    }    long queryStartTime=0;    long queryEndTime=0;    String statementComment=this.connection.getStatementComment();    if (this.connection.getIncludeThreadNamesAsStatementComment()) {      statementComment=(statementComment != null ? statementComment + ", " : "") + "java thread: " + Thread.currentThread().getName();    }    if (query != null) {      int packLength=HEADER_LENGTH + 1 + (query.length() * 3)+ 2;      byte[] commentAsBytes=null;      if (statementComment != null) {        commentAsBytes=StringUtils.getBytes(statementComment,null,characterEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),getExceptionInterceptor());        packLength+=commentAsBytes.length;        packLength+=6;      }      if (this.sendPacket == null) {        this.sendPacket=new Buffer(packLength);      } else {        this.sendPacket.clear();      }      this.sendPacket.writeByte((byte)MysqlDefs.QUERY);      if (commentAsBytes != null) {        this.sendPacket.writeBytesNoNull(Constants.SLASH_STAR_SPACE_AS_BYTES);        this.sendPacket.writeBytesNoNull(commentAsBytes);        this.sendPacket.writeBytesNoNull(Constants.SPACE_STAR_SLASH_SPACE_AS_BYTES);      }      if (characterEncoding != null) {        if (this.platformDbCharsetMatches) {          this.sendPacket.writeStringNoNull(query,characterEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),this.connection);        } else {          if (StringUtils.startsWithIgnoreCaseAndWs(query,"LOAD DATA")) {            this.sendPacket.writeBytesNoNull(StringUtils.getBytes(query));          } else {            this.sendPacket.writeStringNoNull(query,characterEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),this.connection);          }        }      } else {        this.sendPacket.writeStringNoNull(query);      }      queryPacket=this.sendPacket;    }    byte[] queryBuf=null;    int oldPacketPosition=0;    if (this.needToGrabQueryFromPacket) {      queryBuf=queryPacket.getByteBuffer();      oldPacketPosition=queryPacket.getPosition();      queryStartTime=getCurrentTimeNanosOrMillis();    }    if (this.autoGenerateTestcaseScript) {      String testcaseQuery=null;      if (query != null) {        if (statementComment != null) {          testcaseQuery="/* " + statementComment + " */ "+ query;        } else {          testcaseQuery=query;        }      } else {        testcaseQuery=StringUtils.toString(queryBuf,5,(oldPacketPosition - 5));      }      StringBuilder debugBuf=new StringBuilder(testcaseQuery.length() + 32);      this.connection.generateConnectionCommentBlock(debugBuf);      debugBuf.append(testcaseQuery);      debugBuf.append(';');      this.connection.dumpTestcaseQuery(debugBuf.toString());    }    Buffer resultPacket=sendCommand(MysqlDefs.QUERY,null,queryPacket,false,null,0);    long fetchBeginTime=0;    long fetchEndTime=0;    String profileQueryToLog=null;    boolean queryWasSlow=false;    if (this.profileSql || this.logSlowQueries) {      queryEndTime=getCurrentTimeNanosOrMillis();      boolean shouldExtractQuery=false;      if (this.profileSql) {        shouldExtractQuery=true;      } else       if (this.logSlowQueries) {        long queryTime=queryEndTime - queryStartTime;        boolean logSlow=false;        if (!this.useAutoSlowLog) {          logSlow=queryTime > this.connection.getSlowQueryThresholdMillis();        } else {          logSlow=this.connection.isAbonormallyLongQuery(queryTime);          this.connection.reportQueryTime(queryTime);        }        if (logSlow) {          shouldExtractQuery=true;          queryWasSlow=true;        }      }      if (shouldExtractQuery) {        boolean truncated=false;        int extractPosition=oldPacketPosition;        if (oldPacketPosition > this.connection.getMaxQuerySizeToLog()) {          extractPosition=this.connection.getMaxQuerySizeToLog() + 5;          truncated=true;        }        profileQueryToLog=StringUtils.toString(queryBuf,5,(extractPosition - 5));        if (truncated) {          profileQueryToLog+=Messages.getString("MysqlIO.25");        }      }      fetchBeginTime=queryEndTime;    }    ResultSetInternalMethods rs=readAllResults(callingStatement,maxRows,resultSetType,resultSetConcurrency,streamResults,catalog,resultPacket,false,-1L,cachedMetadata);    if (queryWasSlow && !this.serverQueryWasSlow) {      StringBuilder mesgBuf=new StringBuilder(48 + profileQueryToLog.length());      mesgBuf.append(Messages.getString("MysqlIO.SlowQuery",new Object[]{String.valueOf(this.useAutoSlowLog ? " 95% of all queries " : this.slowQueryThreshold),this.queryTimingUnits,Long.valueOf(queryEndTime - queryStartTime)}));      mesgBuf.append(profileQueryToLog);      ProfilerEventHandler eventSink=ProfilerEventHandlerFactory.getInstance(this.connection);      eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_SLOW_QUERY,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(int)(queryEndTime - queryStartTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),mesgBuf.toString()));      if (this.connection.getExplainSlowQueries()) {        if (oldPacketPosition < MAX_QUERY_SIZE_TO_EXPLAIN) {          explainSlowQuery(queryPacket.getBytes(5,(oldPacketPosition - 5)),profileQueryToLog);        } else {          this.connection.getLog().logWarn(Messages.getString("MysqlIO.28") + MAX_QUERY_SIZE_TO_EXPLAIN + Messages.getString("MysqlIO.29"));        }      }    }    if (this.logSlowQueries) {      ProfilerEventHandler eventSink=ProfilerEventHandlerFactory.getInstance(this.connection);      if (this.queryBadIndexUsed && this.profileSql) {        eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_SLOW_QUERY,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(queryEndTime - queryStartTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),Messages.getString("MysqlIO.33") + profileQueryToLog));      }      if (this.queryNoIndexUsed && this.profileSql) {        eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_SLOW_QUERY,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(queryEndTime - queryStartTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),Messages.getString("MysqlIO.35") + profileQueryToLog));      }      if (this.serverQueryWasSlow && this.profileSql) {        eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_SLOW_QUERY,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(queryEndTime - queryStartTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),Messages.getString("MysqlIO.ServerSlowQuery") + profileQueryToLog));      }    }    if (this.profileSql) {      fetchEndTime=getCurrentTimeNanosOrMillis();      ProfilerEventHandler eventSink=ProfilerEventHandlerFactory.getInstance(this.connection);      eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_QUERY,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(queryEndTime - queryStartTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),profileQueryToLog));      eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_FETCH,"",catalog,this.connection.getId(),(callingStatement != null) ? callingStatement.getId() : 999,((ResultSetImpl)rs).resultId,System.currentTimeMillis(),(fetchEndTime - fetchBeginTime),this.queryTimingUnits,null,LogUtils.findCallingClassAndMethod(new Throwable()),null));    }    if (this.hadWarnings) {      scanForAndThrowDataTruncation();    }    if (this.statementInterceptors != null) {      ResultSetInternalMethods interceptedResults=invokeStatementInterceptorsPost(query,callingStatement,rs,false,null);      if (interceptedResults != null) {        rs=interceptedResults;      }    }    return rs;  } catch (  SQLException sqlEx) {    if (this.statementInterceptors != null) {      invokeStatementInterceptorsPost(query,callingStatement,null,false,sqlEx);    }    if (callingStatement != null) {synchronized (callingStatement.cancelTimeoutMutex) {        if (callingStatement.wasCancelled) {          SQLException cause=null;          if (callingStatement.wasCancelledByTimeout) {            cause=new MySQLTimeoutException();          } else {            cause=new MySQLStatementCancelledException();          }          callingStatement.resetCancelledState();          throw cause;        }      }    }    throw sqlEx;  } finally {    this.statementExecutionDepth--;  }}  }
class C{  public ConcurrentReaderHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private int findLower(T x,int from,int to){  int len=to - from + 1, half;  while (len > 0) {    half=len / 2;    int m=from + half;    if (comp.compare(data[m],x) < 0) {      from=m + 1;      len=len - half - 1;    } else {      len=half;    }  }  return from;}  }
class C{  public void writeText(String text) throws Exception {  writeText(text,Mode.ESCAPE);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Deprecated public static void multiply(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {  try {    multiply(name,BigDecimal.valueOf(amount));  } catch (  ArithmeticException e) {    logger.log(Level.WARNING,"Failed to multiply balance of " + name + " by "+ amount+ ": "+ e.getMessage(),e);  }}  }
class C{  public static JsonElement parse(JsonReader reader) throws JsonParseException {  boolean isEmpty=true;  try {    reader.peek();    isEmpty=false;    return TypeAdapters.JSON_ELEMENT.read(reader);  } catch (  EOFException e) {    if (isEmpty) {      return JsonNull.INSTANCE;    }    throw new JsonIOException(e);  }catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  public boolean isUrlWhiteListed(String uri){  if (whiteList == null)   return true;  Uri parsedUri=Uri.parse(uri);  Iterator<URLPattern> pit=whiteList.iterator();  while (pit.hasNext()) {    URLPattern p=pit.next();    if (p.matches(parsedUri)) {      return true;    }  }  return false;}  }
class C{  public void zoomIn(int x,int y){  double rangeX=Math.abs(pageBox.getMaxX() - pageBox.getMinX());  double rangeY=Math.abs(pageBox.getMaxY() - pageBox.getMinY());  pageBox.setMinX(x - (rangeX * 0.85) / 2.0);  pageBox.setMinY(y - (rangeY * 0.85) / 2.0);  pageBox.setMaxX(x + (rangeX * 0.85) / 2.0);  pageBox.setMaxY(y + (rangeY * 0.85) / 2.0);}  }
class C{  public IntArrayList top(int n){  IntArrayList top=new IntArrayList();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  private void regionOffset2size(Granule g){  g.regionSize[2]=576 / 2;  for (int i=0, j=0; i < 3; i++) {    int k=Math.min(g.regionSize[i],g.bigValues);    g.regionSize[i]=k - j;    j=k;  }}  }
class C{  public void aggregateExpression(AbstractScannedResult scannedResult,MeasureAggregator[] measureAggregator){  RowImpl rowImpl=null;  for (int i=0; i < this.blockExecutionInfo.getCustomAggregateExpressions().size(); i++) {    List<CarbonColumn> referredColumns=this.blockExecutionInfo.getCustomAggregateExpressions().get(i).getReferredColumns();    Object[] row=new Object[referredColumns.size()];    for (int j=0; j < referredColumns.size(); j++) {      CarbonColumn carbonColumn=referredColumns.get(j);      if (!carbonColumn.isDimesion()) {        if (!scannedResult.isNullMeasureValue(carbonColumn.getOrdinal())) {switch (carbonColumn.getDataType()) {case INT:case LONG:            row[j]=scannedResult.getLongMeasureValue(carbonColumn.getOrdinal());          break;case DECIMAL:        row[j]=scannedResult.getBigDecimalMeasureValue(carbonColumn.getOrdinal());      break;default :    row[j]=scannedResult.getDoubleMeasureValue(carbonColumn.getOrdinal());}}} else if (!CarbonUtil.hasEncoding(carbonColumn.getEncoder(),Encoding.DICTIONARY)) {String noDictionaryColumnData=new String(scannedResult.getDimensionKey(carbonColumn.getOrdinal()),Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));if (!CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(noDictionaryColumnData)) {row[j]=DataTypeUtil.getDataBasedOnDataType(noDictionaryColumnData,carbonColumn.getDataType());}} else {int surrogateKey=CarbonUtil.getSurrogateKey(scannedResult.getDimensionKey(carbonColumn.getOrdinal()),buffer);if (surrogateKey != 1) {row[j]=DataTypeUtil.getDataBasedOnDataType(blockExecutionInfo.getColumnIdToDcitionaryMapping().get(carbonColumn.getColumnId()).getDictionaryValueForKey(surrogateKey),carbonColumn.getDataType());}}CustomMeasureAggregator agg=(CustomMeasureAggregator)measureAggregator[expressionStartIndex + i];rowImpl=new RowImpl();rowImpl.setValues(row);agg.agg(rowImpl);}}}  }
class C{  private void loadEml(Resource resource){  File emlFile=dataDir.resourceEmlFile(resource.getShortname());  Eml eml=EmlUtils.loadWithLocale(emlFile,Locale.US);  resource.setEml(eml);}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  private boolean isValidEndpoint(String endpoint){  if (InetAddressValidator.getInstance().isValid(endpoint)) {    return true;  }  if (endpoint.length() < 1 || endpoint.length() > 253) {    return false;  }  for (  String label : endpoint.split("\\.")) {    if (label.length() < 1 || label.length() > 63) {      return false;    }    if (!(label.matches("^[a-zA-Z0-9][a-zA-Z0-9-]*") && endpoint.matches(".*[a-zA-Z0-9]$"))) {      return false;    }  }  return true;}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (stream != null) {    stream.mark(readAheadLimit);  } else {    reader.mark(readAheadLimit);  }}  }
class C{  public static void cleanDir(File dirToRemove) throws IOException {  if (dirToRemove.isFile()) {    FileMisc.forceDelete(dirToRemove);  } else   if (dirToRemove.isDirectory()) {    try {      FileUtils.deleteDirectory(dirToRemove);    } catch (    IOException e) {      for (      File file : FileMisc.list(dirToRemove)) {        FileMisc.forceDelete(file);      }    }  }  mkdirs(dirToRemove);}  }
class C{  private void addToCache(T element){  offsets.add(byteCache.size(key));  try {    ByteArrayOutputStream byteOutput=new ByteArrayOutputStream();    ObjectOutputStream objectOutput=new ObjectOutputStream(byteOutput);    objectOutput.writeObject(element);    objectOutput.flush();    this.byteCache.append(key,byteOutput.toByteArray());  } catch (  IOException e) {    throw new RuntimeException("Unable to write object",e);  }}  }
class C{  public boolean inSameHierarchy(SimpleSuperMatch superMatch){  Boolean inSameHierarchy=null;  for (  final SimpleEntry thisEntry : entries) {    for (    final SimpleEntry thatEntry : superMatch.entries) {      if (thisEntry != null && thatEntry != null) {        if (SimpleEntry.getEntryHierarchy() == null) {          throw new IllegalStateException("The static reference to the EntryHierarchy is null.");        }        inSameHierarchy=SimpleEntry.getEntryHierarchy().areInSameHierarchy(thisEntry,thatEntry);        if (!inSameHierarchy)         return false;      }    }  }  return (inSameHierarchy == null) ? false : inSameHierarchy;}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {  ServerSocket socket=null;  if (SysProperties.ENABLE_ANONYMOUS_TLS) {    removeAnonFromLegacyAlgorithms();  }  setKeystore();  ServerSocketFactory f=SSLServerSocketFactory.getDefault();  SSLServerSocket secureSocket;  if (bindAddress == null) {    secureSocket=(SSLServerSocket)f.createServerSocket(port);  } else {    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);  }  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));  if (SysProperties.ENABLE_ANONYMOUS_TLS) {    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());    secureSocket.setEnabledCipherSuites(list);  }  socket=secureSocket;  return socket;}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  @Benchmark public long test7_UsingJava8StreamApi() throws IOException {  final long[] i={0};  map.entrySet().stream().forEach(null);  return i[0];}  }
class C{  public final void sub(GMatrix m1){  int i, j;  if (nRow != m1.nRow) {    throw new MatrixSizeException();  }  if (nCol != m1.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=values[i][j] - m1.values[i][j];    }  }}  }
class C{  public void reset(){}  }
class C{  public static String commandToString(int command){  return commandStrings[command];}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public void testStopwordsParsing() throws Exception {  assertStopQueryEquals("one","b:one t:one");  assertStopQueryEquals("one stop","b:one t:one");  assertStopQueryEquals("one (stop)","b:one t:one");  assertStopQueryEquals("one ((stop))","b:one t:one");  assertStopQueryEquals("stop","");  assertStopQueryEquals("(stop)","");  assertStopQueryEquals("((stop))","");}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public RelatedTo(String uid){  super(uid);}  }
class C{  public void put(String key,Byte value){  mValues.put(key,value);}  }
class C{  public void testSetBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean isNetworkSwitch(){  return networkSwitch;}  }
class C{  public Long deleteUserById(String SID,Long userId) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkAdminLevel(user_level)) {      usersDao.deleteUserID(userId);      return userId;    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("deleteUserById",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public Source<Integer> all(){  return between(Integer.MIN_VALUE,Integer.MAX_VALUE);}  }
class C{  public void reset(){  count=0;}  }
class C{  public static final LocoNetMessage createSetUr92GroupPasswordPacket(String sGroupPassword) throws jmri.jmrix.loconet.LocoNetException {  int gr_p1=sGroupPassword.charAt(0);  int gr_p2=sGroupPassword.charAt(1);  int gr_p3=sGroupPassword.charAt(2);  int gr_p4=sGroupPassword.charAt(3);  int i;  if (validateGroupPassword(sGroupPassword) == false) {    if (getLimitPasswordToNumericOnly() == true) {      throw new jmri.jmrix.loconet.LocoNetException("Invalid Duplex Group Password - must be a 4 digit number between 0000 and 9999, inclusive");    } else {      throw new jmri.jmrix.loconet.LocoNetException("Invalid Duplex Group Password - must be a 4 character value using only digits, 'A', 'B', and/or 'C'");    }  }  gr_p1-=(gr_p1 > '9') ? ('A' - '9' - 1) : 0;  gr_p2-=(gr_p2 > '9') ? ('A' - '9' - 1) : 0;  gr_p3-=(gr_p3 > '9') ? ('A' - '9' - 1) : 0;  gr_p4-=(gr_p4 > '9') ? ('A' - '9' - 1) : 0;  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  i=0;  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_GP_PW_TYPE);  m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_WRITE);  m.setElement(i++,0);  m.setElement(i++,gr_p1);  m.setElement(i++,gr_p2);  m.setElement(i++,gr_p3);  m.setElement(i++,gr_p4);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.194 -0400",hash_original_method="A017FE2B347BB8E3F328A9771EBB4299",hash_generated_method="BA18849D8B581A05A92174E06829E60B") static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public void invalid(String chars){  for (int i=0, n=chars.length(); i < n; ++i) {    char ch=chars.charAt(i);    _invalid.set(ch);    _valid.clear(ch);    _encoded.clear(ch);  }}  }
class C{  public void addTransactionConfidenceEventListener(TransactionConfidenceEventListener listener){  addTransactionConfidenceEventListener(Threading.USER_THREAD,listener);}  }
class C{  private boolean isFiltered(TreeElement<JsonElement,?> element,Filter filter){  JsonElement jsonElt=element.getData();  FilterPred pred=filter.pred;switch (filter.type) {case EXCLUDE:    return pred.apply(jsonElt);case INCLUDE:  return !pred.apply(jsonElt);default :return !satisfiedInTree(element,pred);}}  }
class C{  Support_TestWebData(int length,int lastModified,String name,String type,boolean isDir,long expDate){  testLength=length;  testLastModified=lastModified;  testName=name;  testType=type;  testDir=isDir;  testExp=expDate;}  }
class C{  public static PluginsCollectionConfig fromValues(List<PluginConfig> pluginConfigs){  return new PluginsCollectionConfig(pluginConfigs);}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  private void keepOpen(){  final TurnNotifier turnNotifier=SingletonRepository.getTurnNotifier();  if (isOpen()) {    turnNotifier.dontNotify(this);  } else {    open();  }  turnNotifier.notifyInSeconds(SECONDS_TO_STAY_OPEN,this);}  }
class C{  public void testSpanNearScorerExplain() throws Exception {  SpanNearQuery q=makeQuery();  Explanation e=searcher.explain(q,1);  assertTrue("Scorer explanation value for doc#1 isn't positive: " + e.toString(),0.0f <= e.getValue());}  }
class C{  private boolean deoDexBootFile(File file){  String absoluteName=file.getName().substring(0,file.getName().lastIndexOf("."));  File tmpFolder=new File(this.tmpFolder.getAbsolutePath() + File.separator + absoluteName);  File tmpClasses=new File(tmpFolder.getAbsolutePath() + File.separator + S.CLASSES);  File tmpClasses2=new File(tmpFolder.getAbsolutePath() + File.separator + S.CLASSES_2);  File tmpClasses3=new File(tmpFolder.getAbsolutePath() + File.separator + S.CLASSES_3);  File tmpJar=new File(tmpFolder.getAbsolutePath() + File.separator + absoluteName+ ".jar");  File origJar=new File(SessionCfg.getSystemFolder().getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK+ File.separator+ absoluteName+ ".jar");  if (!origJar.exists()) {    Logger.appendLog("[BootWorker][W] matching jar for " + file.getName() + " creating dummy ...");    FilesUtils.copyFile(S.DUMMY_JAR,origJar);  }  boolean copyStatus=false;  copyStatus=FilesUtils.copyFile(origJar,tmpJar);  if (!copyStatus) {    this.log.addLog(R.getString(S.LOG_WARNING) + "[" + absoluteName+ ".jar]"+ R.getString("log.copy.to.tmp.failed"));    return false;  }  copyStatus=FilesUtils.copyFile(file,tmpClasses);  if (new File(file.getParentFile().getAbsolutePath() + File.separator + absoluteName+ S.DEX2_EXT).exists()) {    copyStatus=FilesUtils.copyFile(new File(file.getParentFile().getAbsolutePath() + File.separator + absoluteName+ S.DEX2_EXT),tmpClasses2);  }  if (new File(file.getParentFile().getAbsolutePath() + File.separator + absoluteName+ S.DEX3_EXT).exists()) {    copyStatus=copyStatus && FilesUtils.copyFile(new File(file.getParentFile().getAbsolutePath() + File.separator + absoluteName+ S.DEX3_EXT),tmpClasses3);  }  if (!copyStatus) {    this.log.addLog(R.getString(S.LOG_WARNING) + "[" + absoluteName+ ".jar]"+ R.getString("log.classes.failed"));    return false;  }  boolean addStatus=false;  ArrayList<File> list=new ArrayList<File>();  list.add(tmpClasses);  if (tmpClasses2.exists()) {    list.add(tmpClasses2);  }  if (tmpClasses3.exists()) {    list.add(tmpClasses3);  }  addStatus=Zip.addFilesToExistingZip(tmpJar,list);  if (!addStatus) {    this.log.addLog(R.getString(S.LOG_WARNING) + "[" + absoluteName+ ".jar]"+ R.getString("log.add.classes.failed"));    return false;  }  copyStatus=FilesUtils.copyFile(tmpJar,origJar);  if (!copyStatus) {    this.log.addLog(R.getString(S.LOG_WARNING) + "[" + absoluteName+ ".jar]"+ R.getString("log.putback.apk.failed"));    return false;  }  FilesUtils.deleteRecursively(tmpFolder);  return copyStatus;}  }
class C{  public static void dropTables(HiveMetastoreClient ms,String dbName) throws HiveMetastoreException {  for (  String tableName : ms.getTables(dbName,"*")) {    ms.dropTable(dbName,tableName,true);  }}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public DateRange rounded(long interval){  if (interval <= 0) {    return this;  }  return new DateRange(start - start % interval,end - (end % interval));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.104 -0400",hash_original_method="DBE76AEE6D27754CBCA47C1DCF78FE89",hash_generated_method="D9830D20A928D29CB3CC7A695D5CCCC2") public X509CRLImpl(InputStream in) throws CRLException {  try {    this.crl=(CertificateList)CertificateList.ASN1.decode(in);    this.tbsCertList=crl.getTbsCertList();    this.extensions=tbsCertList.getCrlExtensions();  } catch (  IOException e) {    throw new CRLException(e);  }}  }
class C{  public BasicBlock pull() throws NoSuchElementException {  if (q.size() == 0)   throw new NoSuchElementException("Pull from empty BBQ");  BasicBlock b=(q.get(0));  q.remove(0);  b.inq=false;  return b;}  }
class C{  @Override public void process(DistributionManager dm){  PartitionedRegion.validatePRID(getSender(),this.regionId,this.regionName);}  }
class C{  public boolean isSystemMethod(SootMethod m){  return all_sys_methods.contains(m);}  }
class C{  public static String toString(short[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public boolean isMsn(){  return isProtocol(MSN);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.823 -0400",hash_original_method="13EB4F7103C9E58EC2AD605053CF5788",hash_generated_method="04EAA1D3BAE93CD85D2EFFC337CD1254") @Override public boolean accept(File file){  boolean smaller=file.length() < size;  return acceptLarger ? !smaller : smaller;}  }
class C{  public Effect basicGetEffect(){  return effect;}  }
class C{  @Deprecated public FailOnTimeout(Statement statement,long timeoutMillis){  this(builder().withTimeout(timeoutMillis,TimeUnit.MILLISECONDS),statement);}  }
class C{  public boolean add_tags(){  return soot.PhaseOptions.getBoolean(options,"add-tags");}  }
class C{  private static String quoteAndWrap(String testCase){  StringBuilder testBlock=new StringBuilder("      \"\"\n");  for (int start=0; start < testCase.length(); start+=60) {    int end=(start + 60 > testCase.length()) ? testCase.length() : start + 60;    String piece=testCase.substring(start,end);    testBlock.append("     + ");    testBlock.append("\"" + piece + "\"\n");  }  return testBlock.toString();}  }
class C{  public static BufferedWriter newWriter(File file) throws IOException {  return new BufferedWriter(new FileWriter(file));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private synchronized void putMapEntry(String localId,MapEntry entry){  if (!isLocalId(localId)) {    throw new IllegalStateException("Tried to get invalid local id: \"" + localId + "\".");  }  JSONObject json=new JSONObject();  try {    json.put("retainCount",entry.retainCount);    if (entry.objectId != null) {      json.put("objectId",entry.objectId);    }  } catch (  JSONException je) {    throw new IllegalStateException("Error creating local id map entry.",je);  }  File file=new File(diskPath,localId);  if (!diskPath.exists()) {    diskPath.mkdirs();  }  try {    ParseFileUtils.writeJSONObjectToFile(file,json);  } catch (  IOException e) {  }}  }
class C{  public static BrowserDescriptor customTab(@NonNull String version){  return new BrowserDescriptor(PACKAGE_NAME,SIGNATURE_SET,version,true);}  }
class C{  @Override public void createSnapshot(Volume reqVolume,List<URI> snapshotURIs,String snapshotType,Boolean createInactive,Boolean readOnly,String taskId){  Volume snapshotSourceVolume=getVPLEXSnapshotSourceVolume(reqVolume);  super.createSnapshot(snapshotSourceVolume,snapshotURIs,snapshotType,createInactive,readOnly,taskId);}  }
class C{  public DtoCustomerServiceImpl(final DtoFactory dtoFactory,final GenericService<Customer> customerGenericService,final AdaptersRepository adaptersRepository,final DtoAttributeService dtoAttributeService,final GenericDAO<AttrValueEntityCustomer,Long> attrValueEntityCustomerDao,final GenericDAO<Shop,Long> shopDao,final GenericDAO<Address,Long> addressDao){  super(dtoFactory,customerGenericService,adaptersRepository);  this.dtoAttributeService=dtoAttributeService;  this.attrValueEntityCustomerDao=attrValueEntityCustomerDao;  this.shopDao=shopDao;  this.addressDao=addressDao;  this.attrValueAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(AttrValueCustomerDTO.class),service.getGenericDao().getEntityFactory().getImplClass(AttrValueCustomer.class));  shopAssembler=DTOAssembler.newAssembler(ShopDTOImpl.class,Shop.class);}  }
class C{  public ClientPropertiesBuilder withServiceUri(String serviceUri){  properties.setProperty(CLIENT_SERVICE_URI,serviceUri);  return this;}  }
class C{  public static boolean deleteDirectoryAndContents(File rootDirectory){  if ((rootDirectory == null) || !rootDirectory.isDirectory()) {    return false;  }  try {    String[] directoryContents=rootDirectory.list();    for (int i=0; i < directoryContents.length; i++) {      boolean success=deleteDirectoryAndContents(new File(rootDirectory,directoryContents[i]));      if (!success) {        return false;      }    }    return rootDirectory.delete();  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return false;  }}  }
class C{  private static final String toXml(int categories){  StringBuilder sb=new StringBuilder();  if ((categories & Integer.MAX_VALUE) == Integer.MAX_VALUE) {    sb.append("<All" + " Value=\"" + Integer.MAX_VALUE + "\" />");  } else {    int mask=1;    for (int i=1; i < 32; i++) {      if ((categories & mask) == mask) {        sb.append("<Group" + i + " Value=\""+ mask+ "\" />");      }      mask*=2;    }  }  return sb.toString();}  }
class C{  public void reset(){  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug(".reset");    }    source.reset();    atEOF=false;    if (isUsingTitleRow) {      getNextRecord();    }    isReset=true;  } catch (  IOException e) {    throw new EPException(e);  }}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  protected String convertKey(final String key){  return key.toLowerCase(this.locale);}  }
class C{  protected void preRender(){  mGeometry.validateBuffers();}  }
class C{  public static long sizeOf(int[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Integer.BYTES * arr.length);}  }
class C{  public void put(String keyName,Class<?> arrayComponentType,Object value){  ArrayValueMap.ArrayValue arrayValue=keyMap.get(keyName);  if (arrayValue == null) {    arrayValue=new ArrayValue(arrayComponentType);    keyMap.put(keyName,arrayValue);  }  arrayValue.addValue(arrayComponentType,value);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public static MCashLine createBankTransferCashEntry(Properties ctx,MCash cashJournal,BigDecimal amount,int bankAccountId,String description,String trxName) throws OperationException {  MBankAccount bankAccount=new MBankAccount(ctx,bankAccountId,trxName);  StringBuffer descr=new StringBuffer();  if (amount.signum() >= 0) {    descr.append(" -> ");  } else {    descr.append(" <- ");  }  descr.append(bankAccount.getAccountNo()).append(" (BA)");  if (description != null && description.trim().length() > 0) {    descr.append("  ").append(description);  }  MCashLine cashLine=new MCashLine(ctx,0,trxName);  cashLine.setC_Cash_ID(cashJournal.get_ID());  cashLine.setDescription(descr.toString());  cashLine.setAmount(amount.negate());  cashLine.setCashType(MCashLine.CASHTYPE_BankAccountTransfer);  cashLine.setC_BankAccount_ID(bankAccountId);  PoManager.save(cashLine);  return cashLine;}  }
class C{  public DistributionStats(StatisticsFactory f,long statId){  this.stats=f.createAtomicStatistics(type,"distributionStats",statId);  Buffers.initBufferStats(this);}  }
class C{  public static void checkArgument(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override public void runCycle(){synchronized (statemachine) {    statemachine.runCycle();  }}  }
class C{  public synchronized void addAllSeries(List<XYSeries> series){  mSeries.addAll(series);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.180 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean absValuesOnly=false;  boolean reflectAtBorders=true;  String direction="vertical";  double centreValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      String str=args[i].toLowerCase();      if (str.contains("v")) {        direction="vertical";      } else       if (str.contains("h")) {        direction="horizontal";      } else       if (str.contains("45")) {        direction="45";      } else       if (str.contains("135")) {        direction="135";      } else {        direction="vertical";      }    } else     if (i == 3) {      absValuesOnly=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("vertical")) {      weights=new double[]{-1,2,-1,-1,2,-1,-1,2,-1};    } else     if (direction.equals("horizontal")) {      weights=new double[]{-1,-1,-1,2,2,2,-1,-1,-1};    } else     if (direction.equals("135")) {      weights=new double[]{2,-1,-1,-1,2,-1,-1,-1,2};    } else {      weights=new double[]{-1,-1,2,-1,2,-1,2,-1,-1};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    if (absValuesOnly) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            if (sum < 0) {              sum=-sum;            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RoutingExplanations explanations(){  return explanations;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.169 -0400",hash_original_method="095C28C2641D09706C8F3E3F55199644",hash_generated_method="0FA57FCE419C0BC454B10D298F0D72F1") public ECPoint(BigInteger affineX,BigInteger affineY){  this.affineX=affineX;  if (this.affineX == null) {    throw new NullPointerException("affineX == null");  }  this.affineY=affineY;  if (this.affineY == null) {    throw new NullPointerException("affineY == null");  }}  }
class C{  public int grow(World world,BlockPos pos,C crop,int stage){  if (stage < crop.getStages()) {    stage++;  }  return stage;}  }
class C{  public MetricSchemaRecord(String namespace,String scope,String metric,String tagKey,String tagValue){  setNamespace(namespace);  setScope(scope);  setMetric(metric);  setTagKey(tagKey);  setTagValue(tagValue);}  }
class C{  protected boolean findNextValidParent(){  if (parent == root) {    parent=null;    return false;  }  while (parent != null) {    FHTreeStateNode newParent=(FHTreeStateNode)parent.getParent();    if (newParent != null) {      nextIndex=parent.childIndex;      parent=newParent;      childCount=treeModel.getChildCount(parent.getUserObject());      if (updateNextIndex())       return true;    } else     parent=null;  }  return false;}  }
class C{  void decode(byte[] data,int width,int height){  Size size=scanManager.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=scanManager.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public static boolean isValidEmail(String emailAddress){  if (TextUtils.isEmpty(emailAddress)) {    return false;  } else {    return Patterns.EMAIL_ADDRESS.matcher(emailAddress).matches();  }}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  setIntent(intent);}  }
class C{  public final ArrayList<CellRecord> loadCellsBySession(final long session,final String sort){  final ArrayList<CellRecord> cells=new ArrayList<>();  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_CELL,ContentProvider.CONTENT_URI_SESSION_SUFFIX),session),null,null,null,sort);  while (cursor.moveToNext()) {    cells.add(cursorToCell(cursor));  }  cursor.close();  return cells;}  }
class C{  public PieChart(CategorySeries dataset,DefaultRenderer renderer){  super(dataset,renderer);  mPieMapper=new PieMapper();}  }
class C{  public void sendNotification(String notificationName){  facade.sendNotification(notificationName);}  }
class C{  public void dismissComplete(){  if (isShowing()) {    mShowing=false;    try {      mWindowManager.removeViewImmediate(mPopupView);    }  finally {    }  }}  }
class C{  public void applyPattern(String pattern){  ndf.applyPattern(pattern);}  }
class C{  @Override public int spillSlotSize(ValueKind<?> kind){  return kind.getPlatformKind().getSizeInBytes();}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mStep--;  canvas.drawCircle(x + SHAPE_WIDTH - mStep,y,mStep,paint);}  }
class C{  static URL fixPureQueryTargets(URL base,String target) throws MalformedURLException {  if (!target.startsWith("?"))   return new URL(base,target);  String basePath=base.getPath();  String baseRightMost="";  int baseRightMostIdx=basePath.lastIndexOf("/");  if (baseRightMostIdx != -1) {    baseRightMost=basePath.substring(baseRightMostIdx + 1);  }  if (target.startsWith("?"))   target=baseRightMost + target;  return new URL(base,target);}  }
class C{  private boolean checkNameFromNode(DefaultMutableTreeNode node,String startsWith){  return (checkNameFromNode(node,0,startsWith));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public synchronized boolean retainAll(Collection<?> c){  return super.retainAll(c);}  }
class C{  private int findClosestIndex(ArrayList<BFINode<EL>> nodeList,InsDelUpdateStatistics stat){  assert nodeList != null : "Empty list in BFINode findCLosest";  if (nodeList.isEmpty())   return -1;  BFINode<EL> currentNode;  currentNode=nodeList.get(0);  double minDistance=this.value.computeDistance(currentNode.value);  stat.nbBFAccessed+=2;  int minIndex=0;  double currentDistance;  for (int i=1; i < nodeList.size(); i++) {    currentNode=nodeList.get(i);    currentDistance=this.value.computeDistance(currentNode.value);    stat.nbBFAccessed+=2;    if (currentDistance < minDistance || (minDistance - currentDistance < 0.00001 && Math.random() < 1.0 / nodeList.size())) {      minDistance=currentDistance;      minIndex=i;    }  }  return minIndex;}  }
class C{  public PredictiveInformationCalculatorDiscrete(int numDiscreteValues,int blockLength){  super();  this.numDiscreteValues=numDiscreteValues;  k=blockLength;  base_power_k=MathsUtils.power(numDiscreteValues,k);  log_base=Math.log(numDiscreteValues);  if (blockLength < 1) {    throw new RuntimeException("History k " + blockLength + " is not >= 1 for Predictive information calculator");  }  if (k > Math.log(Integer.MAX_VALUE) / log_base) {    throw new RuntimeException("Base and history combination too large");  }  jointCount=new int[base_power_k][base_power_k];  prevCount=new int[base_power_k];  nextCount=new int[base_power_k];  maxShiftedValue=new int[numDiscreteValues];  for (int v=0; v < numDiscreteValues; v++) {    maxShiftedValue[v]=v * MathsUtils.power(numDiscreteValues,k - 1);  }}  }
class C{  protected int calcAttackValue(){  int av=0;  if (!ae.isAirborne() || game.getOptions().booleanOption("uac_tworolls")) {    if (usesClusterTable()) {      av=wtype.getRoundShortAV();    } else {      av=wtype.getDamage(nRange);    }  } else {    int range=RangeType.rangeBracket(nRange,wtype.getATRanges(),true,false);    if (range == WeaponType.RANGE_SHORT) {      av=wtype.getRoundShortAV();    } else     if (range == WeaponType.RANGE_MED) {      av=wtype.getRoundMedAV();    } else     if (range == WeaponType.RANGE_LONG) {      av=wtype.getRoundLongAV();    } else     if (range == WeaponType.RANGE_EXT) {      av=wtype.getRoundExtAV();    }  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return av;}  }
class C{  public boolean hasConnectionParam(){  return this.hasConnectionParam;}  }
class C{  public static Proj createOMProjection(Properties props,Projection defaultProj){  float scale=PropUtils.floatFromProperties(props,SCALE,defaultProj.getScale());  int height=PropUtils.intFromProperties(props,HEIGHT,defaultProj.getHeight());  int width=PropUtils.intFromProperties(props,WIDTH,defaultProj.getWidth());  Point2D llp=defaultProj.getCenter();  float longitude=PropUtils.floatFromProperties(props,LON,(float)llp.getX());  float latitude=PropUtils.floatFromProperties(props,LAT,(float)llp.getY());  Class<? extends Projection> projClass=null;  String projType=props.getProperty(PROJTYPE);  ProjectionFactory projFactory=ProjectionFactory.loadDefaultProjections();  if (projType != null) {    projClass=projFactory.getProjClassForName(projType);  }  if (projClass == null) {    projClass=defaultProj.getClass();  }  if (Debug.debugging("imageserver")) {    Debug.output("ImageServerUtils.createOMProjection: projection " + projClass.getName() + ", with HEIGHT = "+ height+ ", WIDTH = "+ width+ ", lat = "+ latitude+ ", lon = "+ longitude+ ", scale = "+ scale);  }  Proj proj=(Proj)projFactory.makeProjection(projClass,new Point2D.Float(longitude,latitude),scale,width,height);  return (Proj)proj;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void saveProperties(boolean tryUserHome){  if (Ini.isClient() && DB.isConnected()) {    ModelValidationEngine.get().beforeSaveProperties();  }  if (isWebStartClient()) {    saveWebStartProperties();  } else {    String fileName=getFileName(tryUserHome);    FileOutputStream fos=null;    try {      File f=new File(fileName);      f.getAbsoluteFile().getParentFile().mkdirs();      fos=new FileOutputStream(f);      s_prop.store(fos,"Adempiere");      fos.flush();      fos.close();    } catch (    Exception e) {      log.log(Level.SEVERE,"Cannot save Properties to " + fileName + " - "+ e.toString());      return;    }catch (    Throwable t) {      log.log(Level.SEVERE,"Cannot save Properties to " + fileName + " - "+ t.toString());      return;    }    log.finer(fileName);  }}  }
class C{  public static void removeServerConnection(final ConnectionInfo conInfo){  getServerConnections().remove(conInfo);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.159 -0500",hash_original_method="2ABBA9721E6AA886F8B6CBB3EA3C6907",hash_generated_method="DA076D4E62F231F8C5B69BFC1874CA6D") public static void sort(short[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Nonnull public BugInstance describe(String description){  annotationList.get(annotationList.size() - 1).setDescription(description);  return this;}  }
class C{  public static String humanReadableByteCount(final long bytes,final boolean si){  final int unit=si ? 1000 : 1024;  if (bytes < unit)   return bytes + " B";  double result=bytes;  final String unitsToUse=(si ? "k" : "K") + "MGTPE";  int i=0;  final int unitsCount=unitsToUse.length();  while (true) {    result/=unit;    if (result < unit)     break;    if (i == unitsCount - 1)     break;    ++i;  }  final StringBuilder sb=new StringBuilder(9);  sb.append(String.format("%.1f ",result));  sb.append(unitsToUse.charAt(i));  if (si)   sb.append('B'); else   sb.append('i').append('B');  final String resultStr=sb.toString();  return resultStr;}  }
class C{  public void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  public boolean hasFocus(){  return hasFocus;}  }
class C{  public Column(ColumnType type){  this.type=type;}  }
class C{  public CCqTest(String name){  super(name);}  }
class C{  public ModuleNode(UniqueString us,Context ct,TreeNode stn){  super(ModuleKind,stn,us);  this.ctxt=ct;}  }
class C{  public SVGOMFEMorphologyElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public String uniqueIdentifier(){  return this.header.getArticleId() + "-" + this.partCounter;}  }
class C{  public static ArrayList<ProductStatusBean> searchProducts(Properties ctx,int adOrgId,String nameSearch,String descSearch,int priceListId,int warehouseId,String trxName) throws OperationException {  if (adOrgId <= 0) {    throw new IllegalArgumentException("Organisation mandatory");  }  if (warehouseId <= 0) {    throw new IllegalArgumentException("Warehouse mandatory");  }  if (priceListId <= 0) {    throw new IllegalArgumentException("Price List mandatory");  }  nameSearch=(nameSearch == null) ? "" : nameSearch;  descSearch=(descSearch == null) ? "" : descSearch;  int priceListVersionId=PriceListManager.getPriceListVersionID(ctx,priceListId,null,null);  StringTokenizer stName=new StringTokenizer(nameSearch,"+");  StringTokenizer stDesc=new StringTokenizer(descSearch,"+");  StringBuffer sqlStmt=new StringBuffer();  sqlStmt.append("SELECT p.Name, ");  sqlStmt.append("p.M_Product_ID, p.UPC, p.Description, ");  sqlStmt.append("SUM(s.QtyOnHand), pp.PriceList ");  sqlStmt.append("FROM M_Product p INNER JOIN (M_Storage s INNER JOIN M_ProductPrice pp ON ");  sqlStmt.append("s.M_Product_ID=pp.M_Product_ID) ON p.M_Product_ID=s.M_Product_ID ");  sqlStmt.append("WHERE p.AD_Client_ID=? ");  sqlStmt.append("AND pp.M_PriceList_Version_ID=? ");  sqlStmt.append("AND s.AD_Org_ID=? ");  sqlStmt.append("AND s.M_Locator_ID IN (SELECT M_Locator_ID FROM M_Locator WHERE M_Warehouse_ID=?) ");  sqlStmt.append("AND p.AD_Org_ID IN (").append(Env.getContext(ctx,UdiConstants.ROLE_EDITABLE_ORGS_CTX_PARAM)).append(") ");  ArrayList<String> params=new ArrayList<String>();  String token=null;  while (stName.hasMoreTokens()) {    token=stName.nextToken().trim();    token="%" + token + "%";    params.add(token);    sqlStmt.append("AND UPPER(p.Name) LIKE UPPER(?)");  }  while (stDesc.hasMoreTokens()) {    token=stDesc.nextToken().trim();    token="%" + token + "%";    params.add(token);    sqlStmt.append("AND UPPER(p.Description) LIKE UPPER(?)");  }  sqlStmt.append("AND p.IsActive='Y' AND s.IsActive= 'Y' AND pp.IsActive='Y' ");  sqlStmt.append("GROUP BY p.Name, p.M_Product_ID, p.UPC, p.Description, pp.PriceList ");  sqlStmt.append("ORDER BY p.name");  MPriceList spriceList=new MPriceList(ctx,priceListId,null);  PreparedStatement pstmt=null;  ResultSet rs=null;  ProductStatusBean bean;  ArrayList<ProductStatusBean> productStatusList=new ArrayList<ProductStatusBean>();  try {    pstmt=DB.prepareStatement(sqlStmt.toString(),trxName);    pstmt.setInt(1,Env.getAD_Client_ID(ctx));    pstmt.setInt(2,priceListVersionId);    pstmt.setInt(3,adOrgId);    pstmt.setInt(4,warehouseId);    int index=5;    for (    String s : params) {      pstmt.setString(index,s);      index++;    }    rs=pstmt.executeQuery();    while (rs.next()) {      String productName=rs.getString(1);      Integer productId=Integer.valueOf(rs.getInt(2));      MProduct product=MProduct.get(ctx,productId);      int taxCategoryId=product.getC_TaxCategory_ID();      MTax tax=TaxManager.getTaxFromCategory(ctx,taxCategoryId,null);      String barcode=rs.getString(3);      String description=rs.getString(4);      BigDecimal qtyOnHand=rs.getBigDecimal(5);      BigDecimal priceList=Env.ZERO;      if (spriceList.isTaxIncluded()) {        priceList=rs.getBigDecimal(6);      } else {        priceList=rs.getBigDecimal(6).multiply((tax.getRate().divide(Env.ONEHUNDRED)).add(Env.ONE));      }      priceList=priceList.setScale(2,RoundingMode.HALF_DOWN);      bean=new ProductStatusBean();      bean.setProductName(productName=productName == null ? "" : productName);      bean.setProductId(productId);      bean.setBarCode(barcode=barcode == null ? "" : barcode);      bean.setDescription(description=description == null ? "" : description);      bean.setQtyOnHand(qtyOnHand=qtyOnHand == null ? Env.ZERO : qtyOnHand);      bean.setPriceStandard(priceList=priceList == null ? Env.ZERO : priceList);      productStatusList.add(bean);    }  } catch (  SQLException e) {    throw new OperationException(e);  } finally {    DB.close(rs,pstmt);  }  return productStatusList;}  }
class C{  public AccountHeaderBuilder withSelectionSecondLine(String selectionSecondLine){  this.mSelectionSecondLine=selectionSecondLine;  return this;}  }
class C{  public void remove(int start,int len){  final int end=start + len;  if (end > size) {    throw new ArrayIndexOutOfBoundsException(size);  }  System.arraycopy(data,end,data,start,size - end);  size-=len;}  }
class C{  public void remove(){  iterator.remove();}  }
class C{  static HijrahDate ofEpochDay(HijrahChronology chrono,long epochDay){  return new HijrahDate(chrono,epochDay);}  }
class C{  @Override @SuppressWarnings("unchecked") public void keyTyped(KeyEvent evt){  int modifiers=evt.getModifiers();  char c=evt.getKeyChar();  if (c != KeyEvent.CHAR_UNDEFINED && (modifiers & InputEvent.ALT_MASK) == 0) {    if (c >= 0x20 && c != 0x7f) {      KeyStroke keyStroke=KeyStroke.getKeyStroke(Character.toUpperCase(c));      Object o=currentBindings.get(keyStroke);      if (o instanceof Hashtable) {        currentBindings=(Hashtable)o;        return;      } else       if (o instanceof ActionListener) {        currentBindings=bindings;        executeAction((ActionListener)o,evt.getSource(),String.valueOf(c));        return;      }      currentBindings=bindings;      if (grabAction != null) {        handleGrabAction(evt);        return;      }      if (repeat && Character.isDigit(c)) {        repeatCount*=10;        repeatCount+=(c - '0');        return;      }      executeAction(INSERT_CHAR,evt.getSource(),String.valueOf(evt.getKeyChar()));      repeatCount=0;      repeat=false;    }  }}  }
class C{  public static boolean deleteRecursive(File fileOrDirectory,boolean followLinks){  if (fileOrDirectory.isDirectory()) {    if (!followLinks && java.nio.file.Files.isSymbolicLink(fileOrDirectory.toPath())) {      return !fileOrDirectory.exists() || fileOrDirectory.delete();    }    File[] list=fileOrDirectory.listFiles();    if (list == null) {      return false;    }    for (    File f : list) {      if (!deleteRecursive(f,followLinks)) {        return false;      }    }  }  if (!fileOrDirectory.delete()) {    if (fileOrDirectory.exists()) {      return false;    }  }  return true;}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  public HttpsURL(final String original) throws URIException {  parseUriReference(original,false);  checkValid();}  }
class C{  public void testTrackPointsTableUpdate_reRegisterAfterTrackChange(){  Capture<ContentObserver> observerCapture=new Capture<ContentObserver>();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(observerCapture));  FixedSizeLocationIterator locationIterator=new FixedSizeLocationIterator(1,10,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(10L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();  ContentObserver observer=observerCapture.getValue();  dataSource.unregisterContentObserver(observer);  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener1);  verifyAndReset();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(observerCapture));  locationIterator=new FixedSizeLocationIterator(1,10);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID + 1),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID + 1)).andReturn(10L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.loadTrack(TRACK_ID + 1);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();}  }
class C{  private boolean checkConvergence(Collection<Individuum> pop){  if (pop.isEmpty()) {    return true;  }  int[][] occur=new int[dim][phi + 1];  for (  Individuum ind : pop) {    short[] gene=ind.getGene();    for (int d=0; d < dim; d++) {      if (gene[d] == DONT_CARE) {        occur[d][0]+=1;        continue;      }      int val=gene[d] - GENE_OFFSET;      if (val < 0 || val >= phi) {        LOG.warning("Invalid gene value encountered: " + val + " in "+ ind.toString());        continue;      }      occur[d][val + 1]+=1;    }  }  int conv=(int)Math.floor(pop.size() * CONVERGENCE);  if (LOG.isDebuggingFine()) {    LOG.debugFine("Convergence at " + conv + " of "+ pop.size()+ " individuums.");  }  for (int d=0; d < dim; d++) {    boolean converged=false;    for (int val=0; val <= phi; val++) {      if (occur[d][val] >= conv) {        converged=true;        break;      }    }    if (!converged) {      return false;    }  }  return true;}  }
class C{  public void reset(){  iExternalUid=null;  super.reset();}  }
class C{  private boolean updateTrack(final long trackId,File driveFile) throws IOException {  Track track=null;  boolean success=false;  try {    track=importDriveFile(trackId,driveFile);    if (track == null) {      return false;    }    File updatedDriveFile;    String trackName=FileUtils.getName(driveFile.getTitle());    if (SyncUtils.isInMyTracks(driveFile,folderId) && !track.getName().equals(trackName)) {      track.setName(trackName);      java.io.File file=null;      try {        file=SyncUtils.getTempFile(context,myTracksProviderUtils,track,true);        updatedDriveFile=SyncUtils.updateDriveFile(drive,driveFile,trackName + "." + KmzTrackExporter.KMZ_EXTENSION,file,true);        if (updatedDriveFile == null) {          Log.e(TAG,"Unable to update drive file");          return false;        }      }  finally {        if (file != null) {          file.delete();        }      }    } else {      updatedDriveFile=driveFile;    }    SyncUtils.updateTrack(myTracksProviderUtils,track,updatedDriveFile);    success=true;    return true;  }  finally {    if (!success) {      if (trackId == -1L && track != null) {        myTracksProviderUtils.deleteTrack(context,track.getId());      }    }  }}  }
class C{  @Ignore @Test public void test_AllLocatorsInDSShouldHaveDistributedSystemId() throws Exception {  try {    Integer lnLocPort1=(Integer)vm0.invoke(null);    Integer lnLocPort2=(Integer)vm1.invoke(null);    fail("Expected IncompatibleSystemException but not thrown");  } catch (  Exception e) {    if (!(e.getCause() instanceof IncompatibleSystemException)) {      Assert.fail("Expected IncompatibleSystemException but received :",e);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  final ITupleIterator lookupAll(final byte[] key){  return new BuddyBucketTupleIterator(key,this);}  }
class C{  public File newFile(String fileName) throws IOException {  File file=new File(getRoot(),fileName);  if (!file.createNewFile()) {    throw new IOException("a file with the name \'" + fileName + "\' already exists in the test folder");  }  return file;}  }
class C{  public KeyStoreException(String msg){  super(msg);}  }
class C{  public static final boolean isSmscDelReceiptFailureRequested(byte registeredDelivery){  return isSmscDeliveryReceipt(registeredDelivery,SMPPConstant.REGDEL_SMSC_FAILURE_REQUESTED);}  }
class C{  @Override public Trie optimize(Trie orig){  List<CharSequence> cmds=orig.cmds;  List<Row> rows=new ArrayList<>();  List<Row> orows=orig.rows;  int remap[]=new int[orows.size()];  for (int j=orows.size() - 1; j >= 0; j--) {    liftUp(orows.get(j),orows);  }  Arrays.fill(remap,-1);  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);  return new Trie(orig.forward,remap[orig.root],cmds,rows);}  }
class C{  @Override public DoubleDBIDList reverseKNNQuery(DBIDRef id,int k){  ModifiableDoubleDBIDList result=DBIDUtil.newDistanceDBIDList();  final Heap<GenericMTreeDistanceSearchCandidate> pq=new UpdatableHeap<>();  pq.add(new GenericMTreeDistanceSearchCandidate(0.,getRootID(),null));  while (!pq.isEmpty()) {    GenericMTreeDistanceSearchCandidate pqNode=pq.poll();    MkAppTreeNode<O> node=getNode(pqNode.nodeID);    if (!node.isLeaf()) {      for (int i=0; i < node.getNumEntries(); i++) {        MkAppEntry entry=node.getEntry(i);        double distance=distance(entry.getRoutingObjectID(),id);        double minDist=(entry.getCoveringRadius() > distance) ? 0. : distance - entry.getCoveringRadius();        double approxValue=settings.log ? Math.exp(entry.approximatedValueAt(k)) : entry.approximatedValueAt(k);        if (approxValue < 0) {          approxValue=0;        }        if (minDist <= approxValue) {          pq.add(new GenericMTreeDistanceSearchCandidate(minDist,getPageID(entry),entry.getRoutingObjectID()));        }      }    } else {      for (int i=0; i < node.getNumEntries(); i++) {        MkAppLeafEntry entry=(MkAppLeafEntry)node.getEntry(i);        double distance=distance(entry.getRoutingObjectID(),id);        double approxValue=settings.log ? StrictMath.exp(entry.approximatedValueAt(k)) : entry.approximatedValueAt(k);        if (approxValue < 0) {          approxValue=0;        }        if (distance <= approxValue) {          result.add(distance,entry.getRoutingObjectID());        }      }    }  }  return result;}  }
class C{  public Point toPoint(int x,int y){  assert x >= 0 && y >= 0 && x < getGridWidth() && y < getGridHeight() : "x: " + x + "y: "+ y;  if (!isInGrid(x,y)) {    throw new IndexOutOfBoundsException();  }  int inverted_y=getGridHeight() - y - 1;  Coordinate coordinate=new Coordinate();  double x_orig=getMBR().getMinX();  double y_orig=getMBR().getMinY();  coordinate.x=x_orig + (x * getPixelWidth() + 0.5 * getPixelWidth());  coordinate.y=y_orig + (inverted_y * getPixelHeight() + 0.5 * getPixelHeight());  coordinate.z=0.0;  Point point=geometryFactory.createPoint(coordinate);  return point;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (is_ValueChanged(COLUMNNAME_IsKey)) {  }  return true;}  }
class C{  private final double preDistanceMBR(SpatialComparable mbr1,SpatialComparable mbr2,final int start,final int end){  double agg=0.;  for (int d=start; d < end; d++) {    double delta=mbr2.getMin(d) - mbr1.getMax(d);    if (delta < 0.) {      delta=mbr1.getMin(d) - mbr2.getMax(d);    }    if (delta > 0.) {      agg+=Math.pow(delta,p);    }  }  return agg;}  }
class C{  public void addExternalForce(Double2D force,int index){  Double2D existingForce=getExternalForce(index);  Double2D newForce=existingForce.add(force);  int forceIndex=index * 3;  externalForcesVector.vals[forceIndex]=newForce.x;  externalForcesVector.vals[forceIndex + 1]=newForce.y;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.446 -0500",hash_original_method="717A16AB4D98DDB60DEBCEA5CDF9B0B2",hash_generated_method="AD0429969CFF11E49824D5999E82F350") public void remove(String key){  unparcel();  mMap.remove(key);}  }
class C{  @Override public int[] withBatch(Closure closure) throws SQLException {  return withBatch(0,closure);}  }
class C{  public void dispose(){  for (  final IGraphPanelExtension extension : m_extensions) {    extension.dispose();  }  m_perspectiveModel.removeListener(m_listener);  m_standardBottomPanel.dispose();  m_debugBottomPanel.dispose();}  }
class C{  public XStringForFSB(FastStringBuffer val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  public synchronized Relationship addWeakRelationship(Primitive type,Primitive target,float correctnessMultiplier){  return addWeakRelationship(this.network.createVertex(type),this.network.createVertex(target),correctnessMultiplier);}  }
class C{  public NumberFormatException(java.lang.String s){}  }
class C{  public Object invoke(){  try {    return Reflection.invokeMethod(method,methodOwner,parameters);  } catch (  final Exception exception) {    throw new GdxRuntimeException("Unable to invoke method: " + method.getName() + " of type: "+ methodOwner+ " with parameters: "+ GdxArrays.newArray(parameters),exception);  }}  }
class C{  public int hashCode(){  return media.hashCode();}  }
class C{  @SuppressWarnings("ConstantConditions") public static NetworkManagerWrapper wrap(NetworkManager manager){  Object protocol=getProtocol(manager);  if (protocol != EnumProtocol.PLAY) {    throw new RuntimeException("Wrong protocol: " + protocol);  }  NetworkManagerWrapper wrapper;  try {    wrapper=(NetworkManagerWrapper)getUnsafe().allocateInstance(NetworkManagerWrapper.class);  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }  wrapper.init(manager);  return wrapper;}  }
class C{  public static int surroundPixels(double stdDev,RenderingHints hints){  boolean highQuality=((hints != null) && RenderingHints.VALUE_RENDER_QUALITY.equals(hints.get(RenderingHints.KEY_RENDERING)));  if ((stdDev < 2) || highQuality) {    float areaSum=(float)(0.5 / (stdDev * SQRT2PI));    int i=0;    while (areaSum < precision) {      areaSum+=(float)(Math.pow(Math.E,-i * i / (2 * stdDev * stdDev)) / (stdDev * SQRT2PI));      i++;    }    return i;  }  int diam=(int)Math.floor(DSQRT2PI * stdDev + 0.5f);  if (diam % 2 == 0)   return diam - 1 + diam / 2; else   return diam - 2 + diam / 2;}  }
class C{  public static void collectDeviceInfo(ITestDevice device,File testApkDir,ITestInvocationListener listener) throws DeviceNotAvailableException {  File apkFile=new File(testApkDir,String.format("%s.apk",APK_NAME));  if (!apkFile.exists()) {    Log.e(LOG_TAG,String.format("Could not find %s",apkFile.getAbsolutePath()));  }  InstrumentationTest instrTest=new InstrumentationTest();  instrTest.setDevice(device);  instrTest.setInstallFile(apkFile);  instrTest.setRerunMode(false);  instrTest.setPackageName(APP_PACKAGE_NAME);  instrTest.setRunnerName(INSTRUMENTATION_NAME);  instrTest.run(listener);}  }
class C{  public static void v(String tag,String s,Throwable e){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e);}  }
class C{  public OHLCSeries(Comparable key){  super(key,true,false);}  }
class C{  public void intersectRange(ValueRange otherRange){  for (  String id : otherRange.getVariables()) {    if (range.containsKey(id)) {      range.get(id).retainAll(otherRange.getValues(id));    } else {      addValues(id,otherRange.getValues(id));    }  }}  }
class C{  public RTree(int minChildren,int maxChildren){  if (minChildren < 2 || minChildren > maxChildren / 2)   throw new IllegalArgumentException("2 <= minChildren <= maxChildren/2");  splitter=new QuadraticNodeSplitter();  this.minSize=minChildren;  this.maxSize=maxChildren;  root=null;}  }
class C{  public PatternExtract(final Entity from,final Entity to,final int start,final int end){  this.from=from;  this.to=to;  this.start=start;  this.end=end;}  }
class C{  public void registerDecorators(){  view.addEventDecorator(processAnnotationEvents,RenderPhase.ANNOTATIONS);  view.addEventDecorator(operatorAnnotationEvents,RenderPhase.OPERATOR_ANNOTATIONS);  view.addEventDecorator(workflowAnnotationSelectedEvents,RenderPhase.OVERLAY);  rendererModel.registerEventListener(modelListener);}  }
class C{  @Override protected boolean allocatePesForVm(String vmUid,List<Double> mipsShareRequested){  double totalRequestedMips=0;  List<Double> mipsShareRequestedCapped=new ArrayList<Double>();  double peMips=getPeCapacity();  for (  Double mips : mipsShareRequested) {    if (mips > peMips) {      mipsShareRequestedCapped.add(peMips);      totalRequestedMips+=peMips;    } else {      mipsShareRequestedCapped.add(mips);      totalRequestedMips+=mips;    }  }  getMipsMapRequested().put(vmUid,mipsShareRequested);  setPesInUse(getPesInUse() + mipsShareRequested.size());  if (getVmsMigratingIn().contains(vmUid)) {    totalRequestedMips*=0.1;  }  if (getAvailableMips() >= totalRequestedMips) {    List<Double> mipsShareAllocated=new ArrayList<Double>();    for (    Double mipsRequested : mipsShareRequestedCapped) {      if (getVmsMigratingOut().contains(vmUid)) {        mipsRequested*=0.9;      } else       if (getVmsMigratingIn().contains(vmUid)) {        mipsRequested*=0.1;      }      mipsShareAllocated.add(mipsRequested);    }    getMipsMap().put(vmUid,mipsShareAllocated);    setAvailableMips(getAvailableMips() - totalRequestedMips);  } else {    redistributeMipsDueToOverSubscription();  }  return true;}  }
class C{  public void onModuleUnpack(IStorageChunk chunk){  World worldObj=DimensionManager.getWorld(Configuration.spaceDimId);  chunk.pasteInWorld(worldObj,spawnLocation.x - chunk.getSizeX() / 2,spawnLocation.y - chunk.getSizeY() / 2,spawnLocation.z - chunk.getSizeZ() / 2);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  return view.viewToModel(x,y,a,bias);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  void internalSetOutputStream(OutputStream newOs){  this.os=newOs;}  }
class C{  public static int[] sort(int[][] m){  int[] list=matrixToArray(m);  for (int i=0; i < 3; i++) {    int min=list[i];    int minIndex=i;    for (int j=i + 1; j < 3; j++) {      if (min > list[j]) {        min=list[j];        minIndex=j;      }    }    if (minIndex != i) {      list[minIndex]=list[i];      list[i]=min;    }  }  return list;}  }
class C{  public static VOPricedParameter findPricedParameter(List<VOPricedParameter> list,VOParameter parameter){  if (list == null || parameter == null) {    return null;  }  for (  VOPricedParameter pricedParameter : list) {    if (pricedParameter.getParameterKey() == parameter.getKey()) {      return pricedParameter;    }  }  return null;}  }
class C{  public Server(String apiUrl,String name){  this.apiUrl=apiUrl;  this.name=name;}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Fact[");  sb.append(m_doc.toString());  sb.append(",").append(m_acctSchema.toString());  sb.append(",PostType=").append(m_postingType);  sb.append("]");  return sb.toString();}  }
class C{  public boolean absolute(int row) throws SQLException {  checkState();  boolean b=rs.absolute(row);  notifyCursorMoved();  return b;}  }
class C{  public static String toJSON(Object obj) throws AndroidAgentException {  try {    ObjectMapper mapper=new ObjectMapper();    return mapper.writeValueAsString(obj);  } catch (  JsonMappingException e) {    throw new AndroidAgentException("Error occurred while mapping class to json",e);  }catch (  JsonGenerationException e) {    throw new AndroidAgentException("Error occurred while generating json",e);  }catch (  IOException e) {    throw new AndroidAgentException("Error occurred while reading the stream",e);  }}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (ClustererPerformanceEvaluator)");  }}  }
class C{  public String deviceCodeFromSystemName(String systemName){  String dCode="";  if ((!aCodes.reset(systemName).matches()) || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {  } else {    if (hCodes.reset(systemName).matches()) {      if (hCodes.groupCount() == 2) {        try {          dCode=hCodes.group(2);        } catch (        Exception e) {          log.error("illegal character in number field system name: " + systemName);          return "";        }      }    } else {      if (iCodes.reset(systemName).matches()) {        dCode=iCodes.group(3) + iCodes.group(4) + iCodes.group(5);      } else {        log.error("illegal insteon address: " + systemName);        return "";      }    }  }  return dCode;}  }
class C{  public void flush(){  try {    _out.flush();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  <T extends JCTree>List<Type> classEnter(List<T> trees,Env<AttrContext> env){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<T> l=trees; l.nonEmpty(); l=l.tail) {    Type t=classEnter(l.head,env);    if (t != null)     ts.append(t);  }  return ts.toList();}  }
class C{  @Override public IBinder onBind(@NonNull Intent intent){  throw new UnsupportedOperationException("Cannot bind to Download Manager Service");}  }
class C{  public ExamineChatAction(final String image,final String title,final String caption){  this.image=checkNotNull(image);  if (!image.startsWith("http://") && !image.startsWith("https://")) {    this.image="examine/" + image;  }  this.title=checkNotNull(title);  this.caption=checkNotNull(caption);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  public static void writeTemplateMappingFile(File baseDir,SdfId[] templateIds) throws IOException {  if (templateIds != null) {    writeMappingFile(new File(baseDir,TEMPLATE_MAP_FILE),templateIds);  }}  }
class C{  public DataBufferShort(int size,int numBanks){  super(STABLE,TYPE_SHORT,size,numBanks);  bankdata=new short[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new short[size];  }  data=bankdata[0];}  }
class C{  public static int computeBlockSize(long len,long blockIndex,long blockSize){  long remain=len - (blockIndex - 1) * blockSize;  return (int)Math.min(blockSize,remain);}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  public void addConfigurationParameterListener(ConfigurationParameterListener listener){  if (!this.listeners.contains(listener)) {    this.listeners.add(listener);  }}  }
class C{  public void testGetDriverPropertiesAsString(){  String propertyString="user=APP;CreateDatabase=create";  String driverPropertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + propertyString;  DataSource ds=dataSourceConverter.fromPropertyString(driverPropertyString);  try {    assertEquals(propertyString,dataSourceConverter.getConnectionPropertiesAsASemicolonDelimitedString(ds));  } catch (  ComparisonFailure e) {    assertEquals("CreateDatabase=create;user=APP",dataSourceConverter.getConnectionPropertiesAsASemicolonDelimitedString(ds));  }}  }
class C{  public static MPOSTerminal loadTerminal(Properties ctx) throws TerminalNotFoundException {  return loadTerminal(ctx,getTerminalId(ctx),null);}  }
class C{  public Boolean hasPermission(String permission){  return ContextCompat.checkSelfPermission(activity,permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public static void mkdirs(File directory) throws CreateDirectoryException {  if (directory.exists()) {    if (directory.isDirectory()) {      return;    }    if (!directory.delete()) {      throw new CreateDirectoryException(directory.getAbsolutePath(),new FileDeleteException(directory.getAbsolutePath()));    }  }  if (!directory.mkdirs() && !directory.isDirectory()) {    throw new CreateDirectoryException(directory.getAbsolutePath());  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassRootPaneUI();}  }
class C{  public void unregister() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Unregister from IMS");  }  mRegistration.deRegister();  mSip.closeStack();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (withArgs: ");  result.append(withArgs);  result.append(')');  return result.toString();}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public static boolean includeModel(int flags){  return (flags & MODEL) != 0;}  }
class C{  public void checkShowHideStatus(){  ImageTile[] sTiles=getSelectedTiles();  boolean anyTilesVisible=(sTiles == null || sTiles.length == 0);  if (sTiles != null) {    for (int i=0; i < sTiles.length; i++) {      anyTilesVisible=sTiles[i].isVisible() || anyTilesVisible;    }  }  showHideButton.setText(anyTilesVisible ? HIDE_TILES_TITLE : SHOW_TILES_TITLE);}  }
class C{  public static double[] trimToCapacity(double[] array,int maxCapacity){  if (array.length > maxCapacity) {    double oldArray[]=array;    array=new double[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  private void readObject(){}  }
class C{  public void testDoubleValuePlusZero(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  long zero=0;  double result=aNumber.doubleValue();  assertTrue("incorrect value",Double.doubleToLongBits(result) == zero);}  }
class C{  public boolean isNormalTrafficAllowed(){  return normalTrafficAllowed;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override protected void onPause(){  super.onPause();  mResumed=false;  if (mHandler.hasMessages(MSG_RESUME_PENDING)) {    mHandler.removeMessages(MSG_RESUME_PENDING);    onResumeFragments();  }  mFragments.dispatchPause();}  }
class C{  public int examples(){  return this.examples;}  }
class C{  protected int hashIndex(int hashCode,int dataSize){  return hashCode & (dataSize - 1);}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  private void parseHeader(){  headerScratchBits.setPosition(0);  sampleSize=Ac3Util.parseFrameSize(headerScratchBits);  if (mediaFormat == null) {    headerScratchBits.setPosition(0);    mediaFormat=Ac3Util.parseFrameAc3Format(headerScratchBits);    output.format(mediaFormat);    bitrate=Ac3Util.getBitrate(sampleSize,mediaFormat.sampleRate);  }  frameDurationUs=(int)(1000L * 8 * sampleSize / bitrate);}  }
class C{  private void initializeLiveAttributes(){  numOctaves=createLiveAnimatedInteger(null,SVG_NUM_OCTAVES_ATTRIBUTE,1);  seed=createLiveAnimatedNumber(null,SVG_SEED_ATTRIBUTE,0f);  stitchTiles=createLiveAnimatedEnumeration(null,SVG_STITCH_TILES_ATTRIBUTE,STITCH_TILES_VALUES,(short)2);  type=createLiveAnimatedEnumeration(null,SVG_TYPE_ATTRIBUTE,TYPE_VALUES,(short)2);}  }
class C{  public void paintCheckBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void handleStaticSiteRequest(StaticSiteRequest.PointRequest request,TransportNetwork transportNetwork,TaskStatistics ts){  StaticComputer computer=new StaticComputer(request,transportNetwork,ts);  if (request.request.bucket != null)   computer.run(); else {    try {      PipedInputStream pis=new PipedInputStream();      PipedOutputStream pos=new PipedOutputStream(pis);      finishPriorityTask(request,pis);      computer.write(pos);      pos.close();    } catch (    IOException e) {      LOG.error("Could not write static output to broker",e);    }  }  deleteRequest(request);}  }
class C{  public static void clearStackTraces(Throwable t){  StackTraceElement[] empty=new StackTraceElement[0];  while (t != null) {    t.setStackTrace(empty);    t=t.getCause();  }}  }
class C{  private ServiceRequestBuffer createRepairSRB(FbService service,int options){  return createRequestBuffer(service,isc_action_svc_repair,options);}  }
class C{  public String invertSelectionTipText(){  return "Invert matching sense.";}  }
class C{  public static String doIgnore(Throwable t,String m){  if (ignorePatterns == null || m == null)   return null;  if (t != null && t instanceof AssertionError)   return null;  for (  String regex : ignorePatterns) {    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(m);    if (matcher.find())     return "Ignoring exception matching " + regex;  }  return null;}  }
class C{  public void testBug11259() throws Exception {  Connection dsConn=null;  try {    Properties props=new Properties();    props.setProperty("autoReconnect","true");    dsConn=getConnectionWithProps(props);  }  finally {    if (dsConn != null) {      dsConn.close();    }  }}  }
class C{  @Transactional public void update() throws SQLException, TaskFailedException {  try {    final SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");    final SimpleDateFormat formatter=new SimpleDateFormat("dd-MMM-yyyy");    created=formatter.format(sdf.parse(created));    newUpdate();  } catch (  final Exception e) {    LOGGER.error(e.getMessage(),e);    throw taskExc;  }}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.064 -0500",hash_original_method="BEA181157FE20523F8DAE95D96DA45D4",hash_generated_method="7D280E4AD18897171EECE2E55A094B2E") public StringBuffer append(int i){  addTaint(i);  return this;}  }
class C{  private void updateFlagsTextField(){  flagsTextField.setText(Arrays.toString(flagsList_.getSelectedValues()));}  }
class C{  @Override public Statement apply(Statement statement,Description description){  return new RunTearDownHqlStatement(statement,testingHiveServer,tearDownHql);}  }
class C{  public void debugPrint(PrintStream out,String prefix){  int sz=size();  for (int i=0; i < sz; i++) {    out.print(prefix);    out.println(get(i));  }}  }
class C{  public boolean isKeepAspectRatio(){  return keepAspectRatio;}  }
class C{  public void addAll(IStatus status){  Assert.isLegal(status != null);  IStatus[] statuses=status.getChildren();  for (int i=0; i < statuses.length; i++) {    add(statuses[i]);  }}  }
class C{  public void insertNode(int index,Object key,Page childPage){  Object[] newKeys=new Object[keys.length + 1];  DataUtils.copyWithGap(keys,newKeys,keys.length,index);  newKeys[index]=key;  keys=newKeys;  int childCount=children.length;  PageReference[] newChildren=new PageReference[childCount + 1];  DataUtils.copyWithGap(children,newChildren,childCount,index);  newChildren[index]=new PageReference(childPage,childPage.getPos(),childPage.totalCount);  children=newChildren;  totalCount+=childPage.totalCount;  addMemory(map.getKeyType().getMemory(key) + DataUtils.PAGE_MEMORY_CHILD);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("State [");  sb.append("\n  issuerDN of last cert: ").append(issuerDN);  sb.append("\n  traversedCACerts: ").append(traversedCACerts);  sb.append("\n  init: ").append(String.valueOf(init));  sb.append("\n  keyParamsNeeded: ").append(String.valueOf(keyParamsNeededFlag));  sb.append("\n  subjectNamesTraversed: \n").append(subjectNamesTraversed);  sb.append("]\n");  return sb.toString();}  }
class C{  public boolean isProductLicensed(LicenseType licenseType){  return _coordinator.isStorageProductLicensed(licenseType);}  }
class C{  protected long parseLong() throws IOException {  long sign=1;  long value=0;  int ch=skipWhitespace();  if (ch == '+')   ch=read(); else   if (ch == '-') {    sign=-1;    ch=read();  }  for (; ch >= '0' && ch <= '9'; ch=read()) {    value=10 * value + ch - '0';  }  peek=ch;  return sign * value;}  }
class C{  public Object readObject() throws IOException {  _is.startPacket();  Object obj=_in.readStreamingObject();  _is.endPacket();  return obj;}  }
class C{  @Override public boolean addAllSorted(Collection<? extends E> that,Comparator<? super E> cmp){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  private GenericObjectPool<T> createObjectPool(final ObjectFactory<T> objectFactory){  final GenericObjectPool<T> pool=newObjectPool(objectFactory);  notNull(pool);  return pool;}  }
class C{  public void testWhitespace() throws Exception {  Analyzer a=new MockAnalyzer(random());  assertAnalyzesTo(a,"A bc defg hiJklmn opqrstuv wxy z ",new String[]{"a","bc","defg","hijklmn","opqrstuv","wxy","z"});  assertAnalyzesTo(a,"aba cadaba shazam",new String[]{"aba","cadaba","shazam"});  assertAnalyzesTo(a,"break on whitespace",new String[]{"break","on","whitespace"});}  }
class C{  @Override public void updateObject(String columnLabel,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x, "+ scale+ ");");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYBarRenderer result=(XYBarRenderer)super.clone();  if (this.gradientPaintTransformer != null) {    result.gradientPaintTransformer=(GradientPaintTransformer)ObjectUtilities.clone(this.gradientPaintTransformer);  }  result.legendBar=ShapeUtilities.clone(this.legendBar);  return result;}  }
class C{  protected void logMessage(String message){  m_Log.logMessage(message);}  }
class C{  public static int IOR(int a,int b){  int ret=0;  if (a > 0 || b > 0) {    ret=a;    if (b > 0 && b < a)     ret=b;  } else {    ret=a;    if (b > a)     ret=b;  }  return ret;}  }
class C{  private void restoreSpecialRoles(List<AttributeMetaData> specialAttributes,ExampleSetMetaData exampleSet){  for (  AttributeMetaData specialAttribute : specialAttributes) {    AttributeMetaData attributeToChange=exampleSet.getAttributeByName(specialAttribute.getName());    if (attributeToChange != null) {      attributeToChange.setRole(specialAttribute.getRole());    }  }}  }
class C{  public OMGraphic generate(OMGrid grid,Projection proj){  if (raster != null && proj instanceof EqualArc && proj.getScale() == generatedScale && !isIncompleteImage()) {    raster.generate(proj);    return raster;  } else {    generatedScale=proj.getScale();    return super.generate(grid,proj);  }}  }
class C{  public PatternEveryDistinctExpr(){}  }
class C{  public Butterworth(int order,PassbandType type,double f1,double f2,double delta){  super(new AnalogButterworth(order),type,f1,f2,delta);}  }
class C{  public void fireSensorAdded(final Sensor sensor){  for (  WorldListener listener : listenerList) {    listener.sensorAdded(sensor);  }}  }
class C{  public boolean openAnalysis(File f,SaveType saveType){  if (!f.exists() || !f.canRead()) {    throw new IllegalArgumentException("Can't read " + f.getPath());  }  mainFrameLoadSaveHelper.prepareForFileLoad(f,saveType);  mainFrameLoadSaveHelper.loadAnalysis(f);  return true;}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  protected ToolMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(ToolMeta.class);}  }
class C{  public void start(){  mDuration=mAnimation.getDuration();  mMaxDelay=Long.MIN_VALUE;  mAnimation.setStartTime(-1);}  }
class C{  public synchronized boolean doAction(OMGraphic graphic,OMAction action){  boolean ret=super.doAction(graphic,action);  doPrepare();  return ret;}  }
class C{  public World(Vec2 gravity){  this(gravity,new DefaultWorldPool(WORLD_POOL_SIZE,WORLD_POOL_CONTAINER_SIZE));}  }
class C{  private void removeNature(){  NatureWorker worker=new NatureWorker(false);  worker.scheduleInteractive();}  }
class C{  boolean isScrollingFast(){  return isScrollingFast;}  }
class C{  @Override public void put(String name,Object value){  emulatedFields.put(name,value);}  }
class C{  public static boolean isValidDisambigFileStrict(String san){  if (san.length() == 4) {    return PIECES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && FILES.indexOf(san.charAt(2)) != -1 && RANKS.indexOf(san.charAt(3)) != -1;  } else {    return false;  }}  }
class C{  public void testGetName(){  String expectedReturn="CHANGE-REQUEST";  String actualReturn=changeRequestAttribute.getName();  assertEquals("Invalid name",expectedReturn,actualReturn);}  }
class C{  public TranslatableComponent(TranslatableComponent original){  super(original);  setTranslate(original.getTranslate());  if (original.getWith() != null) {    List<BaseComponent> temp=new ArrayList<BaseComponent>();    for (    BaseComponent baseComponent : original.getWith()) {      temp.add(baseComponent.duplicate());    }    setWith(temp);  }}  }
class C{  @Deprecated public void expungeInactiveNotes(OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeInactiveNotes",mAuthenticationToken);}  }
class C{  public double error(){  if ((m_Actual == MISSING_VALUE) || (m_Predicted == MISSING_VALUE)) {    return MISSING_VALUE;  }  return m_Predicted - m_Actual;}  }
class C{  public jMatrix minusEquals(jMatrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  public static int missilesHit(int missiles,int nMod,boolean hotloaded,boolean streak,boolean advancedAMS){  int nRoll=Compute.d6(2);  if (hotloaded) {    int roll1=Compute.d6();    int roll2=Compute.d6();    int roll3=Compute.d6();    int lowRoll1=0;    int lowRoll2=0;    if ((roll1 <= roll2) && (roll1 <= roll3)) {      lowRoll1=roll1;      lowRoll2=Math.min(roll2,roll3);    } else     if ((roll2 <= roll1) && (roll2 <= roll3)) {      lowRoll1=roll2;      lowRoll2=Math.min(roll1,roll3);    } else     if ((roll3 <= roll1) && (roll3 <= roll2)) {      lowRoll1=roll3;      lowRoll2=Math.min(roll2,roll1);    }    nRoll=lowRoll1 + lowRoll2;  }  if (streak) {    nRoll=11;  }  nRoll+=nMod;  if (!advancedAMS) {    nRoll=Math.min(Math.max(nRoll,2),12);  } else {    nRoll=Math.min(nRoll,12);  }  if (nRoll < 2) {    return 0;  }  for (  int[] element : clusterHitsTable) {    if (element[0] == missiles) {      return element[nRoll - 1];    }  }  for (int i=clusterHitsTable.length - 1; i >= 0; i--) {    if (missiles > clusterHitsTable[i][0]) {      return clusterHitsTable[i][nRoll - 1] + Compute.missilesHit(missiles - clusterHitsTable[i][0],nMod,hotloaded,streak,advancedAMS);    }  }  throw new RuntimeException("Could not find number of missiles in hit table");}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(getIdentifier());  viewHolder.itemView.setSelected(isSelected());  viewHolder.itemView.setTag(this);  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,DrawerUIUtils.getSelectableBackground(ctx,selectedColor));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(color,selectedTextColor));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  Drawable icon=ImageHolder.decideIcon(getIcon(),ctx,iconColor,isIconTinted(),1);  Drawable selectedIcon=ImageHolder.decideIcon(getSelectedIcon(),ctx,selectedIconColor,isIconTinted(),1);  ImageHolder.applyMultiIconTo(icon,iconColor,selectedIcon,selectedIconColor,isIconTinted(),viewHolder.icon);  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view,level);}  }
class C{  private void checkLatestBusinessObjectDataVersion(UploaderInputManifestDto manifest,Boolean force) throws JAXBException, IOException, URISyntaxException {  BusinessObjectDataVersions businessObjectDataVersions=uploaderWebClient.getBusinessObjectDataVersions(new BusinessObjectDataKey(manifest.getNamespace(),manifest.getBusinessObjectDefinitionName(),manifest.getBusinessObjectFormatUsage(),manifest.getBusinessObjectFormatFileType(),Integer.valueOf(manifest.getBusinessObjectFormatVersion()),manifest.getPartitionValue(),manifest.getSubPartitionValues(),null));  if (CollectionUtils.isNotEmpty(businessObjectDataVersions.getBusinessObjectDataVersions())) {    BusinessObjectDataVersion latestBusinessObjectDataVersion=businessObjectDataVersions.getBusinessObjectDataVersions().get(businessObjectDataVersions.getBusinessObjectDataVersions().size() - 1);    if (BusinessObjectDataStatusEntity.UPLOADING.equals(latestBusinessObjectDataVersion.getStatus())) {      LOGGER.info(String.format("Found the latest version of the business object data in UPLOADING state. businessObjectDataKey=%s",jsonHelper.objectToJson(latestBusinessObjectDataVersion.getBusinessObjectDataKey())));      if (force) {        uploaderWebClient.updateBusinessObjectDataStatus(latestBusinessObjectDataVersion.getBusinessObjectDataKey(),BusinessObjectDataStatusEntity.INVALID);      } else {        throw new IllegalArgumentException(String.format("Unable to register business object data because the latest business object data version is detected in UPLOADING state. " + "Please use -force option to invalidate the latest business object version and allow upload to proceed. " + "Business object data {%s}",businessObjectDataHelper.businessObjectDataKeyToString(latestBusinessObjectDataVersion.getBusinessObjectDataKey())));      }    }  }}  }
class C{  public Formatter(){  this(LEFT);}  }
class C{  public boolean isPruneElements(){  return pruneElements;}  }
class C{  public void error(String message){  log(message,ERROR);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)null);  return;case N4JSPackage.N4_CLASS_EXPRESSION__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @NonNull private static Config createSampleConfig(){  List<Rule> rules=new ArrayList<>();  Value value1=new Value(14,23,null,null,null,null,null,null);  Value value2=new Value(null,null,null,null,1453196880000L,null,null,null);  String metadata="sample ruleMetadata";  rules.add(new Rule(Toggle.DISABLED,metadata,value1));  rules.add(new Rule(Toggle.DISABLED,metadata,value2));  Feature featureVideo=new Feature("video",null,Toggle.ENABLED,null,rules);  Feature featureAudio=new Feature("mixpanel",null,Toggle.ENABLED,null,rules);  Feature featureSpeech=new Feature("speech",null,Toggle.DISABLED,null,rules);  List<Feature> features=new ArrayList<>();  features.add(featureVideo);  features.add(featureAudio);  features.add(featureSpeech);  return new Config("myapp",features);}  }
class C{  public BetterWeakReference(T r){  super(r);}  }
class C{  public void testZeroPosIncrSloppyParsedAnd() throws IOException {  MultiPhraseQuery.Builder qb=new MultiPhraseQuery.Builder();  qb.add(new Term[]{new Term("field","a"),new Term("field","1")},-1);  qb.add(new Term[]{new Term("field","b"),new Term("field","1")},0);  qb.add(new Term[]{new Term("field","c")},1);  doTestZeroPosIncrSloppy(qb.build(),0);  qb.setSlop(1);  doTestZeroPosIncrSloppy(qb.build(),0);  qb.setSlop(2);  doTestZeroPosIncrSloppy(qb.build(),1);}  }
class C{  int compare(E k1,E k2) throws ClassCastException {  Comparator<? super E> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super E>)k1).compareTo(k2);}  }
class C{  public double loadDouble(){  return SimulatedMemory.getDouble(this);}  }
class C{  public static void applyImageResource(Element elem,ImageResource image,String hPos,String vPos){  CSSStyleDeclaration style=elem.getStyle();  style.setBackgroundImage("url(" + image.getSafeUri().asString() + ")");  style.setProperty("background-repeat","no-repeat");  style.setProperty("background-position",hPos + " " + vPos);  style.setOverflow("hidden");}  }
class C{  public static JBBPOut BeginBin(final JBBPByteOrder byteOrder,final JBBPBitOrder bitOrder){  return new JBBPOut(new ByteArrayOutputStream(),byteOrder,bitOrder);}  }
class C{  @PUT @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public InitiatorRestRep updateInitiator(@PathParam("id") URI id,InitiatorUpdateParam updateParam) throws DatabaseException {  Initiator initiator=queryObject(Initiator.class,id,true);  _hostService.validateInitiatorData(updateParam,initiator);  _hostService.populateInitiator(initiator,updateParam);  _dbClient.persistObject(initiator);  auditOp(OperationTypeEnum.UPDATE_HOST_INITIATOR,true,null,initiator.auditParameters());  return map(queryObject(Initiator.class,id,false));}  }
class C{  public BillingAdapterConnectionException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public BaleenPipeline(String name,String yaml,CollectionProcessingEngine engine){  super(name,yaml,engine);}  }
class C{  public void enable(BluetoothAdapter adapter){  int mask=(BluetoothReceiver.STATE_TURNING_ON_FLAG | BluetoothReceiver.STATE_ON_FLAG | BluetoothReceiver.SCAN_MODE_CONNECTABLE_FLAG);  long start=-1;  BluetoothReceiver receiver=getBluetoothReceiver(mask);  int state=adapter.getState();switch (state) {case BluetoothAdapter.STATE_ON:    assertTrue(adapter.isEnabled());  removeReceiver(receiver);return;case BluetoothAdapter.STATE_TURNING_ON:assertFalse(adapter.isEnabled());mask=0;break;case BluetoothAdapter.STATE_OFF:assertFalse(adapter.isEnabled());start=System.currentTimeMillis();assertTrue(adapter.enable());break;case BluetoothAdapter.STATE_TURNING_OFF:start=System.currentTimeMillis();assertTrue(adapter.enable());break;default :removeReceiver(receiver);fail(String.format("enable() invalid state: state=%d",state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {state=adapter.getState();if (state == BluetoothAdapter.STATE_ON && (receiver.getFiredFlags() & mask) == mask) {assertTrue(adapter.isEnabled());long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("enable() completed in %d ms",(finish - start)));} else {writeOutput("enable() completed");}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("enable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_ON,firedFlags,mask));}  }
class C{  public static void deviceList(Context context,String accessToken,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  get(context,getApiServerUrl() + DEVICE_LIST,headerList,null,responseHandler);}  }
class C{  public static boolean isValidDate(int year,int month,int day){  if (month < 1 || month > 12 || day < 1) {    return false;  }  if (year > 1582) {    if (month != 2) {      return day <= NORMAL_DAYS_PER_MONTH[month];    }    if ((year & 3) != 0) {      return day <= 28;    }    return day <= ((year % 100 != 0) || (year % 400 == 0) ? 29 : 28);  } else   if (year == 1582 && month == 10) {    return day <= 31 && (day < 5 || day > 14);  }  if (month != 2 && day <= NORMAL_DAYS_PER_MONTH[month]) {    return true;  }  return day <= ((year & 3) != 0 ? 28 : 29);}  }
class C{  public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){  System.arraycopy(sourceArray,0,destinationArray,0,offset);  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);}  }
class C{  public static boolean containsAny(CharSequence cs,char... searchChars){  if (isEmpty(cs) || isEmpty(searchChars)) {    return false;  }  int csLength=cs.length();  int searchLength=searchChars.length;  int csLast=csLength - 1;  int searchLast=searchLength - 1;  for (int i=0; i < csLength; i++) {    char ch=cs.charAt(i);    for (int j=0; j < searchLength; j++) {      if (searchChars[j] == ch) {        if (Character.isHighSurrogate(ch)) {          if (j == searchLast) {            return true;          }          if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {            return true;          }        } else {          return true;        }      }    }  }  return false;}  }
class C{  public void templateChanged(ValueChangeEvent event){  final long selectedServiceKey=((Long)event.getNewValue()).longValue();  if (selectedServiceKey != model.getSelectedTemplateKey()) {    model.setSelectedTemplateKey(selectedServiceKey);  }}  }
class C{  public static FullSpannableStaggeredGridLayoutManager createStaggeredGridLayoutManager(AdapterManager.IHeaderFooterManager hfm,int spanCount,int orientation){  FullSpannableStaggeredGridLayoutManager lm=new FullSpannableStaggeredGridLayoutManager(spanCount,orientation);  lm.setSpanSizeLookupHelper(new HeaderFooterSpanSizeLookUp(hfm,spanCount));  return lm;}  }
class C{  private int generateForecastResult(int M_Warehouse_ID){  deleteData();  m_period_definition_base=new MPPPeriodDefinition(getCtx(),m_run.getRef_DefinitionPeriod_ID(),get_TrxName());  m_period_definition_target=new MPPPeriodDefinition(getCtx(),m_run.getPP_PeriodDefinition_ID(),get_TrxName());  m_forecast_rule=(MPPForecastRule)m_run.getPP_ForecastRule();  List<MPPPeriod> m_period_history=m_period_definition_base.getPeriodsOfHistory(m_run.getPeriodHistory());  int selection=generateForecastRunMaster(m_run,m_forecast_definition,m_period_history.get(m_period_history.size() - 1),m_period_history.get(0));  if (selection <= 0)   throw new IllegalArgumentException("@FindZeroRecords@");  for (  MPPForecastRunMaster master : MPPForecastRunMaster.getLines(getCtx(),p_PP_ForecastRun_ID,get_TrxName())) {    for (    MPPPeriod period : m_period_history) {      createForecastRunDetail(master,period);    }  }  return createForecastRunResult(M_Warehouse_ID);}  }
class C{  private static void checkNotStrictISO(Collection<DateTimeFieldType> fields,boolean strictISO){  if (strictISO) {    throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Supply supply){  serializer.writeLong(label,supply.getRaw());}  }
class C{  public void caretPositionChanged(InputMethodEvent event){  cmd_calculateDifference();}  }
class C{  private static byte[] packMtx(byte[] block1,byte[] block2,byte[] block3){  int copyDist=Math.max(block1.length,Math.max(block2.length,block3.length)) + LzcompCompress.getPreloadSize();  byte[] compressed1=LzcompCompress.compress(block1);  byte[] compressed2=LzcompCompress.compress(block2);  byte[] compressed3=LzcompCompress.compress(block3);  int resultSize=10 + compressed1.length + compressed2.length+ compressed3.length;  byte[] result=new byte[resultSize];  result[0]=3;  writeBE24(result,copyDist,1);  int offset2=10 + compressed1.length;  int offset3=offset2 + compressed2.length;  writeBE24(result,offset2,4);  writeBE24(result,offset3,7);  System.arraycopy(compressed1,0,result,10,compressed1.length);  System.arraycopy(compressed2,0,result,offset2,compressed2.length);  System.arraycopy(compressed3,0,result,offset3,compressed3.length);  return result;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Bundle(ClassLoader loader){  mMap=new HashMap<String,Object>();  mClassLoader=loader;}  }
class C{  public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {  return false;}  }
class C{  protected boolean versionMeetsMinimum(int major,int minor,int subminor) throws SQLException {  return (((com.mysql.jdbc.Connection)this.conn).versionMeetsMinimum(major,minor,subminor));}  }
class C{  public StrBuilder insert(final int index,final char value){  validateIndex(index);  ensureCapacity(size + 1);  System.arraycopy(buffer,index,buffer,index + 1,size - index);  buffer[index]=value;  size++;  return this;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     m_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     m_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public static void main(String args[]) throws IOException {  ImageViewerTest test=new ImageViewerTest();  File inFile=test.getInputURL(args);  String ext=test.getEncodingExt(args);  File outDir=test.getOuputDir(args);  boolean recursive=test.isRecursive(args);  serverObjects post=test.makePostParams(args);  outDir.mkdirs();  File[] inFiles;  if (inFile.isFile()) {    inFiles=new File[1];    inFiles[0]=inFile;    System.out.println("Testing ImageViewer rendering with input file : " + inFile.getAbsolutePath() + " encoded To : "+ ext);  } else   if (inFile.isDirectory()) {    inFiles=inFile.listFiles();    System.out.println("Testing ImageViewer rendering with input files in folder : " + inFile.getAbsolutePath() + " encoded To : "+ ext);  } else {    inFiles=new File[0];  }  if (inFiles.length == 0) {    throw new IllegalArgumentException(inFile.getAbsolutePath() + " is not a valid file or folder url.");  }  System.out.println("Rendered images will be written in dir : " + outDir.getAbsolutePath());  List<File> processedFiles=new ArrayList<File>();  Map<String,Throwable> failures=new TreeMap<>();  try {    long time=System.nanoTime();    test.processFiles(ext,recursive,outDir,post,inFiles,processedFiles,failures);    time=System.nanoTime() - time;    test.displayResults(processedFiles,failures,time,outDir);  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean loadBPartner(int C_BPartner_ID){  log.config("C_BPartner_ID=" + C_BPartner_ID);  if (C_BPartner_ID == 0) {    m_partner=null;    m_pLocation=null;    m_user=null;    return true;  }  m_partner=new MBPartner(Env.getCtx(),C_BPartner_ID,null);  if (m_partner.get_ID() == 0) {    FDialog.error(m_WindowNo,this,"BPartnerNotFound");    return false;  }  fValue.setText(m_partner.getValue());  KeyNamePair keynamepair=getGreeting(m_partner.getC_Greeting_ID());  for (int i=0; i < fGreetingBP.getItemCount(); i++) {    ListItem listitem=fGreetingBP.getItemAtIndex(i);    KeyNamePair compare=(KeyNamePair)listitem.getValue();    if (compare == keynamepair) {      fGreetingBP.setSelectedIndex(i);      break;    }  }  fName.setText(m_partner.getName());  fName2.setText(m_partner.getName2());  m_pLocation=m_partner.getLocation(Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_BPartner_Location_ID"));  if (m_pLocation != null) {    int location=m_pLocation.getC_Location_ID();    fAddress.setValue(new Integer(location));    fPhone.setText(m_pLocation.getPhone());    fPhone2.setText(m_pLocation.getPhone2());    fFax.setText(m_pLocation.getFax());  }  m_user=m_partner.getContact(Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_User_ID"));  if (m_user != null) {    keynamepair=getGreeting(m_user.getC_Greeting_ID());    for (int i=0; i < fGreetingC.getItemCount(); i++) {      ListItem listitem=fGreetingC.getItemAtIndex(i);      KeyNamePair compare=(KeyNamePair)listitem.getValue();      if (compare == keynamepair) {        fGreetingC.setSelectedIndex(i);        break;      }    }    fContact.setText(m_user.getName());    fTitle.setText(m_user.getTitle());    fEMail.setText(m_user.getEMail());    fPhone.setText(m_user.getPhone());    fPhone2.setText(m_user.getPhone2());    fFax.setText(m_user.getFax());  }  return true;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public void contextPartitionTerminate(ContextControllerInstanceHandle contextNestedHandle,Map<String,Object> terminationProperties,boolean leaveLocksAcquired,List<AgentInstance> agentInstances){  ContextManagerNestedInstanceHandle handle=(ContextManagerNestedInstanceHandle)contextNestedHandle;  if (handle.isBranch()) {    ContextManagerNestedInstanceHandle branchHandle=handle;    ContextController branch=branchHandle.getController();    recursiveDeactivateStop(branch,leaveLocksAcquired,agentInstances);    if (log.isDebugEnabled()) {      log.debug("Terminated context branch for " + contextName + " from level "+ branch.getFactory().getFactoryContext().getNestingLevel()+ "("+ branch.getFactory().getFactoryContext().getContextName()+ ")"+ " parentPath "+ branch.getPathId());    }  } else {    ContextManagerNestedInstanceHandle leafHandle=handle;    ContextController leaf=leafHandle.getController();    ContextControllerTreeEntry leafEntry=subcontexts.get(leaf);    if (leafEntry != null) {      ContextControllerTreeAgentInstanceList ailist=leafEntry.getAgentInstances().get(leafHandle.getContextPartitionOrPathId());      if (ailist != null) {        StatementAgentInstanceUtil.stopAgentInstances(ailist.getAgentInstances(),null,servicesContext,false,false);        contextPartitionIdManager.removeId(leafHandle.getContextPartitionOrPathId());        ailist.getAgentInstances().clear();      }      if (log.isDebugEnabled()) {        log.debug("Terminated context leaf for " + contextName + " from level "+ leaf.getFactory().getFactoryContext().getNestingLevel()+ "("+ leaf.getFactory().getFactoryContext().getContextName()+ ")"+ " parentPath "+ leaf.getPathId()+ " contextPartId "+ leafHandle.getContextPartitionOrPathId());      }    }  }}  }
class C{  public static DAOPortfolio newInstance(String displayName){  final DAOPortfolio returnInstance=new DAOPortfolio();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public void testBFS_undirected() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Undirected);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(1,gasState.getState(p.getMike()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMike()).predecessor());      assertEquals(1,gasState.getState(p.getBryan()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getBryan()).predecessor());      assertEquals(1,gasState.getState(p.getMartyn()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public static Reader newReader(ReadableByteChannel channel,String charsetName){  if (charsetName == null) {    throw new NullPointerException("charsetName == null");  }  return newReader(channel,Charset.forName(charsetName).newDecoder(),-1);}  }
class C{  private void snapEdgesToBounds(RectF edges,RectF bounds,float margin){  if (edges.left < bounds.left + margin) {    edges.offset(bounds.left - edges.left,0);  }  if (edges.top < bounds.top + margin) {    edges.offset(0,bounds.top - edges.top);  }  if (edges.right > bounds.right - margin) {    edges.offset(bounds.right - edges.right,0);  }  if (edges.bottom > bounds.bottom - margin) {    edges.offset(0,bounds.bottom - edges.bottom);  }}  }
class C{  protected void init(){  queue=new ReferenceQueue();}  }
class C{  public void addRepeatingExtension(Extension extension){  extPoint.addRepeatingExtension(extension);}  }
class C{  public final void testGetAlgParameters01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      AlgorithmParameters apar=epki.getAlgParameters();      if (apar == null) {        continue;      }      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]),apar.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public static Collection<ParticipationLevel> all(){  return enums.all();}  }
class C{  public static int[] toIntArray(Double[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  public BackupConfig backup(BackupConfig initialConfig) throws IOException, IllegalStateException {  BackupConfig backupConfig=initialConfig.clone();  if (isNullOrEmpty(backupConfig.getBackupDirectory())) {    backupConfig.setBackupDirectory(defaultBackupDir);  }  Artifact artifact=getArtifact(backupConfig.getArtifactName());  Files.createDirectories(Paths.get(backupConfig.getBackupDirectory()));  Path tempDir=backupConfig.obtainArtifactTempDirectory();  FileUtils.deleteQuietly(tempDir.toFile());  FileUtils.forceMkdir(tempDir.toFile());  try {    Path backupFile=backupConfig.generateBackupFilePath();    backupConfig.setBackupFile(backupFile.toString());    Optional<Version> artifactVersion=artifact.getInstalledVersion();    if (!artifactVersion.isPresent()) {      throw new IllegalStateException("Artifact version is unavailable");    }    backupConfig.setArtifactVersion(artifactVersion.get().toString());    backupConfig.createConfigFileInTmpDir();    Command backupCommand=artifact.getBackupCommand(backupConfig);    backupCommand.execute();    Path compressedBackupFile=BackupConfig.addGzipExtension(backupFile);    TarUtils.compressFile(backupFile,compressedBackupFile);    Files.deleteIfExists(backupFile);    backupConfig.setBackupFile(compressedBackupFile.toString());    FileUtils.deleteQuietly(tempDir.toFile());  } catch (  Exception e) {    throw new BackupException(e.getMessage(),e);  }  return backupConfig;}  }
class C{  public void writeEnumNoTag(final int value) throws IOException {  writeInt32NoTag(value);}  }
class C{  private void updateRangeStatus0(int origIdx,IgfsFileAffinityRange orig,IgfsFileAffinityRange update,int status){  assert F.eq(orig.affinityKey(),update.affinityKey());  assert ranges.get(origIdx) == orig;  if (orig.regionEqual(update))   ranges.set(origIdx,new IgfsFileAffinityRange(update,status)); else {    assert orig.endOffset() > update.endOffset();    ranges.set(origIdx,new IgfsFileAffinityRange(update,status));    ranges.add(origIdx + 1,new IgfsFileAffinityRange(update.endOffset() + 1,orig.endOffset(),orig.affinityKey()));  }}  }
class C{  protected void deleteChildren(){  for (int i=0; i < getChildCount(); i++) {    final ITagTreeNode child=(ITagTreeNode)getChildAt(i);    child.dispose();  }  removeAllChildren();}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static long toLong(TimeDuration duration){  return (0x757B12C00L * duration.years) + (0x9CA41900L * duration.months) + (86400000 * (long)duration.days)+ (3600000 * (long)duration.hours)+ (60000 * (long)duration.minutes)+ (1000 * (long)duration.seconds)+ duration.milliseconds;}  }
class C{  private Icon parseIconType(String iconType){  List<Icon> icons=Utils.getIcons();  for (  Icon icon : icons) {    if (icon.getIconType().name().toLowerCase().equals(iconType.toLowerCase())) {      return icon;    }  }  throw new IllegalArgumentException("Correct icon type not specified.");}  }
class C{  public void insertChars(String c){  String currentText=getText();  if (!validChar(c)) {    return;  }  int pos=getCursorPosition() + 1;  if (overwriteMode && pos <= currentText.length()) {    setText(currentText.substring(0,pos - 1) + c + currentText.substring(pos,currentText.length()));  } else {    if (currentText.length() + c.length() > getMaxSize()) {      return;    }    setText(currentText.substring(0,pos - 1) + c + currentText.substring(pos - 1,currentText.length()));  }  if (c.length() > 1) {    pos+=c.length() - 1;    setCursorPosition(pos);    return;  }  increaseCursor();}  }
class C{  public synchronized void clearMapAds(){  adMapAtIndex.clear();  mFetchingAdsCnt=mPrefetchedAdList.size();}  }
class C{  private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public static File writeJUnitTestFile(String junitOutputDir,String packageName,ExecutableSequence es,String className){  JunitFileWriter writer=new JunitFileWriter(junitOutputDir,packageName,"dummy");  writer.createOutputDir();  return writer.writeTestClass(Collections.singletonList(es),className);}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  hashAlgId.encode(tmp);  tmp.putOctetString(issuerNameHash);  tmp.putOctetString(issuerKeyHash);  certSerialNumber.encode(tmp);  out.write(DerValue.tag_Sequence,tmp);  if (debug) {    HexDumpEncoder encoder=new HexDumpEncoder();    System.out.println("Encoded certId is " + encoder.encode(out.toByteArray()));  }}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  mCircleHandler.removeCallbacksAndMessages(null);}  }
class C{  public static boolean isHeader(Header header){  String xten=header.getStringValue(XTENSION);  if (xten == null) {    return false;  }  xten=xten.trim();  return xten.equals(XTENSION_BINTABLE) || xten.equals("A3DTABLE");}  }
class C{  public SplitterBySource(String sourceGroup,Action action){  super(action);  m_sourceGroup=sourceGroup;}  }
class C{  public MailMessage(String to,String subject,String body){  addRecipientTo(to);  setSubject(subject);  setBody(body);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  @Interruptible public static void notifyClassResolved(RVMType vmType){  vmType.setMMAllocator(pickAllocatorForType(vmType));}  }
class C{  public DeviceIndexInterator(DeviceManagerImpl deviceManager,Iterator<Long> subIterator){  super();  this.deviceManager=deviceManager;  this.subIterator=subIterator;}  }
class C{  public static ConditionOperand GREATER_EQUAL(){  return new ConditionOperand(GREATER_EQUAL);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("\nUsage: " + RevisionUtils.class.getName() + " <classname>\n");    System.exit(1);  }  RevisionHandler handler=(RevisionHandler)Class.forName(args[0]).newInstance();  System.out.println("Type: " + getType(handler));  System.out.println("Revision: " + extract(handler));}  }
class C{  public XPathException(String message,Exception e){  super(message);  this.m_exception=e;}  }
class C{  private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];  int tries=100;  while (tries-- > 0) {    for (int i=0; i < ambiguousIndexCount.length; i++) {      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];    }    try {      return decodeCodewords(codewords,ecLevel,erasureArray);    } catch (    ChecksumException ignored) {    }    if (ambiguousIndexCount.length == 0) {      throw ChecksumException.getChecksumInstance();    }    for (int i=0; i < ambiguousIndexCount.length; i++) {      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {        ambiguousIndexCount[i]++;        break;      } else {        ambiguousIndexCount[i]=0;        if (i == ambiguousIndexCount.length - 1) {          throw ChecksumException.getChecksumInstance();        }      }    }  }  throw ChecksumException.getChecksumInstance();}  }
class C{  public static QueryAssociatedPortsForProcessor parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedPortsForProcessor object=new QueryAssociatedPortsForProcessor();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedPortsForProcessor".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedPortsForProcessor)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","spUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","spUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setSpUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public void loadListIds(int volId,ArrayList ListIds,String entidad) throws Exception {  IeciTdLongIntegerArrayList ids;  String qual;  String colName;  VolumesTable table=new VolumesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadListIds");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    ids=new IeciTdLongIntegerArrayList();    colName=table.getLoadListIdColumnName();    qual=table.getDeleteListVolQual(volId);    DbSelectFns.select(dbConn,table.getListVolumeTableName(),colName,qual,true,ids);    for (int i=0; i < ids.count(); i++) {      Integer val=new Integer(ids.get(i));      ListIds.add(val);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private ActionErrors validateFormParaEliminarFormatoFicha(FormatoFichasForm frm){  ActionErrors errors=new ActionErrors();  String[] idFormatosABorrar=frm.getFormatosABorrar();  if (idFormatosABorrar == null || idFormatosABorrar.length == 0) {    errors.add(ErrorKeys.ERROR_SELECCIONE_AL_MENOS_UN_FORMATO_FICHA,new ActionError(ErrorKeys.ERROR_SELECCIONE_AL_MENOS_UN_FORMATO_FICHA));  }  return errors.size() > 0 ? errors : null;}  }
class C{  public void startFtpDownload(final String hostname,final String uri){  startFtpDownload(hostname,SpeedTestConst.FTP_DEFAULT_PORT,uri,SpeedTestConst.FTP_DEFAULT_USER,SpeedTestConst.FTP_DEFAULT_PASSWORD);}  }
class C{  protected boolean canAnimateType(int type){  return true;}  }
class C{  public int jdkver(){  return soot.PhaseOptions.getInt(options,"jdkver");}  }
class C{  public EmptySpace(TextColor color,TerminalSize size){  this.color=color;  this.size=size;}  }
class C{  public byte[] doArp(int timeoutMillis){  ByteBuffer buf=ByteBuffer.allocate(MAX_LENGTH);  byte[] desiredIp=mPeer.getAddress();  long timeout=SystemClock.elapsedRealtime() + timeoutMillis;  buf.clear();  buf.order(ByteOrder.BIG_ENDIAN);  buf.putShort((short)ETHERNET_TYPE);  buf.putShort(RawSocket.ETH_P_IP);  buf.put((byte)MAC_ADDR_LENGTH);  buf.put((byte)IPV4_LENGTH);  buf.putShort((short)1);  buf.put(mMyMac);  buf.put(mMyAddr.getAddress());  buf.put(new byte[MAC_ADDR_LENGTH]);  buf.put(desiredIp);  buf.flip();  mSocket.write(L2_BROADCAST,buf.array(),0,buf.limit());  byte[] recvBuf=new byte[MAX_LENGTH];  while (SystemClock.elapsedRealtime() < timeout) {    long duration=(long)timeout - SystemClock.elapsedRealtime();    int readLen=mSocket.read(recvBuf,0,recvBuf.length,-1,(int)duration);    if ((readLen >= ARP_LENGTH) && (recvBuf[0] == 0) && (recvBuf[1] == ETHERNET_TYPE)&& (recvBuf[2] == 8)&& (recvBuf[3] == 0)&& (recvBuf[4] == MAC_ADDR_LENGTH)&& (recvBuf[5] == IPV4_LENGTH)&& (recvBuf[6] == 0)&& (recvBuf[7] == 2)&& (recvBuf[14] == desiredIp[0])&& (recvBuf[15] == desiredIp[1])&& (recvBuf[16] == desiredIp[2])&& (recvBuf[17] == desiredIp[3])) {      byte[] result=new byte[MAC_ADDR_LENGTH];      System.arraycopy(recvBuf,8,result,0,MAC_ADDR_LENGTH);      return result;    }  }  return null;}  }
class C{  public Blood(){  this(null,Rand.rand(4));}  }
class C{  public X509Attribute(String oid,ASN1Encodable value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public void close() throws IOException {  dataStream.close();}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other == null || getClass() != other.getClass()) {    return false;  }  DictionaryByteArrayWrapper otherObjectToCompare=(DictionaryByteArrayWrapper)other;  if (data.length != otherObjectToCompare.data.length) {    return false;  }  return ByteUtil.UnsafeComparer.INSTANCE.equals(data,otherObjectToCompare.data);}  }
class C{  private static CellProcessor addIntMinMax(Integer minValue,Integer maxValue){  Integer min=minValue == null ? Integer.MIN_VALUE : minValue;  Integer max=maxValue == null ? Integer.MAX_VALUE : maxValue;  return new IntMinMax(min,max);}  }
class C{  public TPrimitiveIterator(TPrimitiveHash hash){  super(hash);  _hash=hash;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private String errorMessage(){  return errorMessage(null);}  }
class C{  protected ActiveMQRASession allocateConnection(boolean transacted,int acknowledgeMode,final int sessionType) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("allocateConnection(" + transacted + ", "+ acknowledgeMode+ ", "+ sessionType+ ")");  }  try {synchronized (sessions) {      if (sessions.isEmpty() == false) {        throw new IllegalStateException("Only allowed one session per connection. See the J2EE spec, e.g. J2EE1.4 Section 6.6");      }      if (inJtaTransaction()) {        transacted=true;        acknowledgeMode=Session.SESSION_TRANSACTED;      } else {        transacted=false;switch (acknowledgeMode) {case Session.AUTO_ACKNOWLEDGE:case Session.DUPS_OK_ACKNOWLEDGE:case ActiveMQJMSConstants.INDIVIDUAL_ACKNOWLEDGE:case ActiveMQJMSConstants.PRE_ACKNOWLEDGE:          break;case Session.CLIENT_ACKNOWLEDGE:        throw ActiveMQRABundle.BUNDLE.invalidClientAcknowledgeModeRuntime();case Session.SESSION_TRANSACTED:      throw ActiveMQRABundle.BUNDLE.invalidSessionTransactedModeRuntime();default :    throw ActiveMQRABundle.BUNDLE.invalidAcknowledgeMode(acknowledgeMode);}}ActiveMQRAConnectionRequestInfo info=new ActiveMQRAConnectionRequestInfo(transacted,acknowledgeMode,sessionType);info.setUserName(userName);info.setPassword(password);info.setClientID(clientID);info.setDefaults(((ActiveMQResourceAdapter)mcf.getResourceAdapter()).getProperties());if (ActiveMQRASessionFactoryImpl.trace) {ActiveMQRALogger.LOGGER.trace("Allocating session for " + this + " with request info="+ info);}ActiveMQRASession session=(ActiveMQRASession)cm.allocateConnection(mcf,info);try {if (ActiveMQRASessionFactoryImpl.trace) {  ActiveMQRALogger.LOGGER.trace("Allocated  " + this + " session="+ session);}session.setActiveMQSessionFactory(this);if (started) {  session.start();}sessions.add(session);return session;} catch (Throwable t) {try {  session.close();} catch (Throwable ignored) {}if (t instanceof Exception) {  throw (Exception)t;} else {  throw new RuntimeException("Unexpected error: ",t);}}}} catch (Exception e) {Throwable current=e;while (current != null && !(current instanceof JMSException)) {current=current.getCause();}if (current != null && current instanceof JMSException) {throw (JMSException)current;} else {JMSException je=new JMSException("Could not create a session: " + e.getMessage());je.setLinkedException(e);je.initCause(e);throw je;}}}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.366 -0500",hash_original_method="2732903E834E35077990228D3EC5372C",hash_generated_method="874B62147D53C021C6F32B5DF2CF4549") public PEMReader(Reader reader){  this(reader,null,"BC");}  }
class C{  public boolean visitAVT(AVT elem){  return true;}  }
class C{  public void togglePlayback() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  boolean isPlaying=isRemoteMoviePlaying();  if (isPlaying) {    pause();  } else {    if (mState == MediaStatus.PLAYER_STATE_IDLE && mIdleReason == MediaStatus.IDLE_REASON_FINISHED) {      loadMedia(getRemoteMediaInformation(),true,0);    } else {      play();    }  }}  }
class C{  public void invalidate(LookAndFeel laf){  invalidate();}  }
class C{  public boolean metricsValid(List<StoragePort> candidatePorts){  if (candidatePorts == null || candidatePorts.isEmpty()) {    return false;  }  StoragePort aPort=candidatePorts.iterator().next();  StorageSystem system=_dbClient.queryObject(StorageSystem.class,aPort.getStorageDevice());  if (!isPortMetricsAllocationEnabled(DiscoveredDataObject.Type.valueOf(system.getSystemType()))) {    return false;  }  Long currentTime=System.currentTimeMillis();  for (  StoragePort port : candidatePorts) {    if (!port.getPortType().equals(StoragePort.PortType.frontend.name())) {      continue;    }    Long lastProcessingTime=MetricsKeys.getLong(MetricsKeys.lastProcessingTime,port.getMetrics());    if (lastProcessingTime == 0 || (currentTime - lastProcessingTime) > MAX_SAMPLE_AGE_MSEC) {      return false;    }  }  return true;}  }
class C{  public float maxTexcoordV(){  return maxTexcoordV;}  }
class C{  private String createComponentChanges(){  StringBuilder builder=new StringBuilder();  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {    builder.append(createApiChanges(serviceCatalogDiff));  }  return builder.toString();}  }
class C{  StatementPair(final Statement then,final Statement elze){  super(then);  this.then=claim(then);  this.elze=claim(elze);}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private static MediaTypes accepted(final Request req) throws IOException {  MediaTypes list=new MediaTypes();  final Iterable<String> headers=new RqHeaders.Base(req).header("Accept");  for (  final String hdr : headers) {    list=list.merge(new MediaTypes(hdr));  }  if (list.isEmpty()) {    list=new MediaTypes("text/html");  }  return list;}  }
class C{  @Override public boolean isFocused(){  return this.isEnabled();}  }
class C{  public static Bitmap drawableToBitmap(Drawable d){  return d == null ? null : ((BitmapDrawable)d).getBitmap();}  }
class C{  public MethodInvocationTree buildMethodInvocation(ExpressionTree methodExpr){  return maker.App((JCTree.JCExpression)methodExpr);}  }
class C{  public Container add(Object constraint,Component cmp){  addComponent(constraint,cmp);  return this;}  }
class C{  private int computeInjectionAction(int actionMasked,int pointerIndex){switch (actionMasked) {case MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_POINTER_DOWN:{      InjectedPointerTracker injectedTracker=mInjectedPointerTracker;      if (injectedTracker.getInjectedPointerDownCount() == 0) {        return MotionEvent.ACTION_DOWN;      } else {        return (pointerIndex << MotionEvent.ACTION_POINTER_INDEX_SHIFT) | MotionEvent.ACTION_POINTER_DOWN;      }    }case MotionEvent.ACTION_POINTER_UP:{    InjectedPointerTracker injectedTracker=mInjectedPointerTracker;    if (injectedTracker.getInjectedPointerDownCount() == 1) {      return MotionEvent.ACTION_UP;    } else {      return (pointerIndex << MotionEvent.ACTION_POINTER_INDEX_SHIFT) | MotionEvent.ACTION_POINTER_UP;    }  }default :return actionMasked;}}  }
class C{  @Override public void discoverSentence(Vertex sentence,Network network,Vertex currentTime){  if (!isEnabled()) {    return;  }  if (!getBot().mind().isConscious()) {    return;  }  List<Relationship> words=sentence.orderedRelationships(Primitive.WORD);  if (words != null) {    int count=0;    int errors=0;    int index=0;    Boolean allCaps=null;    for (    Relationship relationship : words) {      if (!getBot().mind().isConscious()) {        return;      }      Vertex word=relationship.getTarget();      index++;      if ((count >= MAX_WORDS) || (errors >= MAX_ERRORS)) {        break;      }      String text=word.getDataValue();      if (text != null) {        Vertex lastChecked=word.getRelationship(getPrimitive());        Collection<Relationship> meanings=word.getRelationships(Primitive.MEANING);        if (lastChecked == null || (meanings == null && (!word.instanceOf(Primitive.UNKNOWNWORD) && !word.instanceOf(Primitive.UNKOWNWORD)))) {          if (!Utils.isEnglish(text)) {            count++;            continue;          }          word.setRelationship(getPrimitive(),currentTime);          Collection<Relationship> relationships=word.getRelationships(Primitive.MEANING);          Vertex existing=word.getRelationship(Primitive.MEANING);          if (existing != null) {            if (!existing.instanceOf(Primitive.SPEAKER) || (relationships.size() > 1)) {              continue;            }          }          boolean found=false;          if (getBot().getParent() != null) {            Network cache=getBot().getParent().memory().newMemory();            Vertex cacheWord=cache.createWord(text);            Vertex cacheLastChecked=cacheWord.getRelationship(getPrimitive());            meanings=cacheWord.getRelationships(Primitive.MEANING);            if (cacheLastChecked != null && (meanings != null || (cacheWord.instanceOf(Primitive.UNKNOWNWORD) || cacheWord.instanceOf(Primitive.UNKOWNWORD)))) {              found=true;              log("Importing word from cache",Bot.FINE,text);              Network newNetwork=getBot().memory().newMemory();              Vertex newWord=newNetwork.createVertex(word);              copyDataRelationships(cacheWord,Primitive.INSTANTIATION,newWord,newNetwork);              copyDataRelationships(cacheWord,Primitive.SYNONYM,newWord,newNetwork);              copyDataRelationships(cacheWord,Primitive.ANTONYM,newWord,newNetwork);              copyDataRelationships(cacheWord,Primitive.CARDINALITY,newWord,newNetwork);              meanings=cacheWord.getRelationships(Primitive.MEANING);              if (meanings != null) {                for (                Relationship cacheMeaningRelationship : meanings) {                  if (!getBot().mind().isConscious()) {                    return;                  }                  Vertex cacheMeaning=cacheMeaningRelationship.getTarget();                  Vertex newMeaning=newNetwork.createVertex();                  newMeaning.setName(text);                  newWord.addWeakRelationship(Primitive.MEANING,newMeaning,cacheMeaningRelationship.getCorrectness());                  newMeaning.addRelationship(Primitive.WORD,newWord).setCorrectness(2.0f);                  copyDataRelationships(cacheMeaning,Primitive.SYNONYM,newMeaning,newNetwork);                  copyDataRelationships(cacheMeaning,Primitive.ANTONYM,newMeaning,newNetwork);                  copyDataRelationships(cacheMeaning,Primitive.CARDINALITY,newMeaning,newNetwork);                  copyDataRelationships(cacheMeaning,Primitive.INSTANTIATION,newMeaning,newNetwork);                  Vertex definition=cacheMeaning.getRelationship(Primitive.SENTENCE);                  if (definition != null && definition.getData() instanceof String) {                    newMeaning.addRelationship(Primitive.SENTENCE,newNetwork.createSentence((String)definition.getData()));                  }                }              }              Vertex url=cacheWord.getRelationship(Primitive.URL);              if (url != null && url.getData() != null) {                newWord.addRelationship(Primitive.URL,newNetwork.createVertex(url.getData()));              }              if (meanings != null) {                newNetwork.associateCaseInsensitivity(newWord);              }              if (!getBot().mind().isConscious()) {                return;              }              newNetwork.save();            } else {              if (!getBot().mind().isConscious()) {                return;              }              cacheWord.addRelationship(getPrimitive(),cache.createVertex(currentTime.getData()));              cacheWord.addRelationship(Primitive.INSTANTIATION,Primitive.UNKNOWNWORD);              cache.save();              Wiktionary wiktionary=getBot().getParent().awareness().getSense(Wiktionary.class);              try {                wiktionary.input(new URL(URL_PREFIX + URLEncoder.encode(text,"UTF-8")));              } catch (              Exception failed) {                log(failed);                errors++;              }              if (!text.equals(text.toLowerCase())) {                try {                  wiktionary.input(new URL(URL_PREFIX + URLEncoder.encode(text.toLowerCase(),"UTF-8")));                  count++;                } catch (                Exception failed) {                  log(failed);                  errors++;                }              }            }          }          if (!found) {            word.addRelationship(Primitive.INSTANTIATION,Primitive.UNKNOWNWORD);            if (!getBot().mind().isConscious()) {              return;            }            network.save();            try {              input(new URL(URL_PREFIX + URLEncoder.encode(text,"UTF-8")));              count++;            } catch (            Exception failed) {              log(failed);              errors++;            }            if (!text.equals(text.toLowerCase())) {              try {                input(new URL(URL_PREFIX + URLEncoder.encode(text.toLowerCase(),"UTF-8")));                count++;              } catch (              Exception failed) {                log(failed);                errors++;              }            }          }          Network newNetwork=getBot().memory().newMemory();          Vertex newWord=newNetwork.createVertex(word);          if ((index > 1) && allCaps != Boolean.TRUE && Utils.isCapitalized(text) && !newWord.hasRelationship(Primitive.MEANING)) {            if (allCaps == null) {              allCaps=Boolean.TRUE;              for (              Relationship relationship2 : words) {                if (!(relationship2.getTarget().getData() instanceof String) || !Utils.isCapitalized((String)relationship2.getTarget().getData())) {                  allCaps=Boolean.FALSE;                  break;                }              }            }            if (!allCaps) {              log("Defining name",Bot.FINE,text);              Vertex meaning=newNetwork.createVertex();              meaning.setName(text);              meaning.addRelationship(Primitive.INSTANTIATION,Primitive.THING);              meaning.addRelationship(Primitive.WORD,newWord);              newWord.addRelationship(Primitive.MEANING,meaning);              newWord.addRelationship(Primitive.INSTANTIATION,Primitive.NAME);              Relationship previous=words.get(index - 2);              if (previous.getTarget().instanceOf(Primitive.NAME)) {                String compoundText=previous.getTarget().getDataValue() + " " + text;                log("Defining compound name",Bot.FINE,compoundText);                Vertex compoundWord=newNetwork.createWord(compoundText);                meaning=newNetwork.createVertex();                meaning.setName(compoundText);                meaning.addRelationship(Primitive.INSTANTIATION,Primitive.THING);                meaning.addRelationship(Primitive.WORD,compoundWord);                meaning.addRelationship(Primitive.WORD,previous.getTarget());                previous.getTarget().addRelationship(Primitive.MEANING,meaning);                compoundWord.addRelationship(Primitive.MEANING,meaning);                compoundWord.addRelationship(Primitive.INSTANTIATION,Primitive.NAME);              }              if (!getBot().mind().isConscious()) {                return;              }              newNetwork.save();            }          }        }      }    }  }}  }
class C{  public TaskBuilder async(){  this.async=true;  return this;}  }
class C{  DHPrivateKey(BigInteger x,BigInteger p,BigInteger g) throws InvalidKeyException {  this(x,p,g,0);}  }
class C{  public PostViewChangeEvent(final DashboardMenuItem view){  this.view=view;}  }
class C{  private boolean isLanguageAllowed(String languageKey){  if (allowedLanguages == null)   return true;  return allowedLanguages.contains(languageKey);}  }
class C{  public void updateApps(List<AppInfo> apps){  mApps.updateApps(apps);}  }
class C{  @Override public boolean commitChanges(){  boolean success=true;  double act=Utils.doubleParsable(tfActivation);  if (!Double.isNaN(act)) {    neuronList.stream().forEach(null);  } else {    success&=tfActivation.getText().matches(SimbrainConstants.NULL_STRING);  }  if (!tfNeuronLabel.getText().equals(SimbrainConstants.NULL_STRING)) {    neuronList.stream().forEach(null);  }  if (!clamped.isNull()) {    neuronList.stream().forEach(null);  }  success&=boundsClippingPanel.commitChanges();  double increment=Utils.doubleParsable(tfIncrement);  if (!Double.isNaN(increment)) {    neuronList.stream().forEach(null);  } else {    success&=tfIncrement.getText().matches(SimbrainConstants.NULL_STRING);  }  Integer priority=Utils.parseInteger(tfPriority);  if (priority != null) {    neuronList.stream().forEach(null);  } else {    success&=tfPriority.getText().matches(SimbrainConstants.NULL_STRING);  }  if (((String)inputType.getSelectedItem()).matches(InputType.WEIGHTED.toString())) {    neuronList.stream().forEach(null);  } else   if (((String)inputType.getSelectedItem()).matches(InputType.SYNAPTIC.toString())) {    neuronList.stream().forEach(null);  }  if (!neuronList.isEmpty()) {    neuronList.get(0).getNetwork().fireNeuronsUpdated(neuronList);  }  return success;}  }
class C{  protected final void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.715 -0400",hash_original_method="26D13C01C28656EED46780E05D03A406",hash_generated_method="E69081FA623E19CCD4887F078C148295") final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public static TimeInstant generateRandomTimeStamp(){  final SecureRandom rand=new SecureRandom();  return new TimeInstant(rand.nextInt(1_000_000));}  }
class C{  public void onFailure(Request request,IOException e){}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @Override public void onFragmentSignal(Fragment sender,String signalName){  FragmentManager mgr=getFragmentManager();  if (signalName.equals("OVERVIEW")) {    if (OverviewFrag == null) {      OverviewFrag=RollOverviewFragment.newInstance();      OverviewFrag.setListener(this);    }    mgr.beginTransaction().replace(R.id.central,OverviewFrag).addToBackStack("acquisition").commit();  }}  }
class C{  protected void containerVmDeallocateAll(){  getContainerVmRamProvisioner().deallocateRamForAllContainerVms();  getContainerVmBwProvisioner().deallocateBwForAllContainerVms();  getContainerVmScheduler().deallocatePesForAllContainerVms();}  }
class C{  public void testBadCommandLineNoCommand() throws Exception {  doTest();}  }
class C{  private static long lf_sigma1(long x){  return lf_S(x,14) ^ lf_S(x,18) ^ lf_S(x,41);}  }
class C{  public ClipData(CharSequence label,String[] mimeTypes,Item item){  mClipDescription=new ClipDescription(label,mimeTypes);  if (item == null) {    throw new NullPointerException("item is null");  }  mIcon=null;  mItems=new ArrayList<Item>();  mItems.add(item);}  }
class C{  public void testCreateDeployerForInstalledContainers(){  this.factory.registerDeployer(InstalledLocalContainerStub.ID,DeployerType.INSTALLED,InstalledLocalDeployerStub.class);  Deployer deployer=this.factory.createDeployer(new InstalledLocalContainerStub());  assertEquals(InstalledLocalDeployerStub.class.getName(),deployer.getClass().getName());  assertEquals(DeployerType.INSTALLED,deployer.getType());}  }
