class C{  public ChunkCoords add(ChunkCoords coords){  return new ChunkCoords(coords.dimension,this.x + coords.x,this.y + coords.y,this.z + coords.z);}  }
class C{  private void scrollFinished(){  searchText();}  }
class C{  @GwtIncompatible public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  return toArray(iterable,ObjectArrays.newArray(type,0));}  }
class C{  public Kernel add(double v){  for (int i=0; i < values.length; i++) {    values[i]+=v;  }  return this;}  }
class C{  public List<Portfolio> findAll(){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Portfolio> query=builder.createQuery(Portfolio.class);    Root<Portfolio> from=query.from(Portfolio.class);    query.select(from);    List<Portfolio> items=entityManager.createQuery(query).getResultList();    for (    Portfolio portfolio : items) {      portfolio.getPortfolioAccounts().size();    }    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void printCandleItem(CandleItem dataItem){  _log.debug("Symbol: " + this.getSymbol() + " Start Time: "+ dataItem.getPeriod().getStart()+ " Open: "+ dataItem.getOpen()+ " High: "+ dataItem.getHigh()+ " Low: "+ dataItem.getLow()+ " Close: "+ dataItem.getClose()+ " Vwap: "+ dataItem.getVwap()+ " Volume: "+ dataItem.getVolume()+ " Count: "+ dataItem.getCount()+ " LastUpdateDate: "+ dataItem.getLastUpdateDate());}  }
class C{  public final boolean doInit(boolean ignoreCancel) throws Throwable {  if (!ignoreCancel && this.cancellationFlag) {    return false;  }  final DoInitFunctor functor=new DoInitFunctor();  this.tool.getInitStates(functor);  if (functor.errState != null) {    this.errState=functor.errState;    throw functor.e;  }  return functor.returnValue;}  }
class C{  public String gensym(){  return String.format(format,nextIndex++);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AFTER_EVENT___TIMER_1:    return TIMER_1_EDEFAULT == null ? timer_1 != null : !TIMER_1_EDEFAULT.equals(timer_1);}return super.eIsSet(featureID);}  }
class C{  public boolean isDelegated(){  return !this.equals(beanContextChildPeer);}  }
class C{  public File tofile(HSSFWorkbook wb,String[] generalTitle){  String path=System.getProperty("java.io.tmpdir");  if (!(path.endsWith("/") || path.endsWith("\\")))   path=path + System.getProperty("file.separator");  String prefix=StringUtils.makePrefix(generalTitle[0]);  if (log.isLoggable(Level.FINE)) {    log.log(Level.FINE,"Path=" + path + " Prefix="+ prefix);  }  File file=new File(path + prefix + ".xls");  try {    if (file.exists())     file.delete();  } catch (  Exception e) {    log.log(Level.SEVERE,"file",e);    return null;  }  FileOutputStream fos;  try {    fos=new FileOutputStream(file);    wb.write(fos);    fos.flush();    fos.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return file;}  }
class C{  @Override public void clearRect(int x,int y,int width,int height){  setStateToLocal();  Color saveColor=getColor();  setColor(Color.white);  m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " "+ xScale(width)+ " "+ yScale(height)+ " true Rect");  setColor(saveColor);}  }
class C{  public Criteria OR(){  return this.example.or();}  }
class C{  private GeneratorMain loadXMLSpecification(){  try {    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();    dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);    URL url=ClassLoader.getSystemResource(GENERATOR_SCHEMA_FILE);    if (url != null) {      try {        Schema schema=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(url);        dbf.setSchema(schema);        dbf.setIgnoringElementContentWhitespace(true);      } catch (      Exception e) {        LOG.warning("Could not set up XML Schema validation for speciciation file.",e);      }    } else {      LOG.warning("Could not set up XML Schema validation for speciciation file.");    }    Document doc=dbf.newDocumentBuilder().parse(specfile);    Node root=doc.getDocumentElement();    if (TAG_DATASET.equals(root.getNodeName())) {      GeneratorMain gen=new GeneratorMain();      processElementDataset(gen,root);      return gen;    } else {      throw new AbortException("Experiment specification has incorrect document element: " + root.getNodeName());    }  } catch (  FileNotFoundException e) {    throw new AbortException("Can't open specification file.",e);  }catch (  SAXException e) {    throw new AbortException("Error parsing specification file.",e);  }catch (  IOException e) {    throw new AbortException("IO Exception loading specification file.",e);  }catch (  ParserConfigurationException e) {    throw new AbortException("Parser Configuration Error",e);  }}  }
class C{  public static final void shuffle(int[] a,int start,int len,Random r){  for (int i=start + len; --i > 0; ) {    int t=a[i], j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  private static void indexDocumentAndCommit() throws SolrServerException, IOException {  final SolrInputDocument document=new SolrInputDocument();  document.addField(ID_FIELD,ID_VALUE);  document.addField(HELLO_FIELD_NAME,HELLO_FIELD_VALUE);  System.out.println("Indexing document...");  final UpdateResponse addResponse=solrClient.add(COLLECTION_NAME,document);  System.out.println(addResponse);  solrClient.commit(COLLECTION_NAME);  System.out.println("Indexed document.");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void onTurnReached(final int currentTurn){  if (syncContent()) {    SingletonRepository.getTurnNotifier().notifyInTurns(0,this);  }}  }
class C{  public GCMEncryptor(byte[] key,SecureRandom secureRandom){  checkArgument(key.length >= 16,"GCM key expected to be 128-bits or greater.");  this.key=Arrays.copyOf(key,key.length);  this.secureRandom=checkNotNull(secureRandom);}  }
class C{  public MinHashFilter(TokenStream input,int hashCount,int bucketCount,int hashSetSize,boolean withRotation){  super(input);  if (hashCount <= 0) {    throw new IllegalArgumentException("hashCount must be greater than zero");  }  if (bucketCount <= 0) {    throw new IllegalArgumentException("bucketCount must be greater than zero");  }  if (hashSetSize <= 0) {    throw new IllegalArgumentException("hashSetSize must be greater than zero");  }  this.hashCount=hashCount;  this.bucketCount=bucketCount;  this.hashSetSize=hashSetSize;  this.withRotation=withRotation;  this.bucketSize=(1L << 32) / bucketCount;  if ((1L << 32) % bucketCount != 0) {    bucketSize++;  }  minHashSets=new ArrayList<>(this.hashCount);  for (int i=0; i < this.hashCount; i++) {    ArrayList<FixedSizeTreeSet<LongPair>> buckets=new ArrayList<>(this.bucketCount);    minHashSets.add(buckets);    for (int j=0; j < this.bucketCount; j++) {      FixedSizeTreeSet<LongPair> minSet=new FixedSizeTreeSet<>(this.hashSetSize);      buckets.add(minSet);    }  }  doRest();}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private void startRecording(){  startNewRecording=true;  trackRecordingServiceConnection.startAndBind();  bindChangedCallback.run();}  }
class C{  public ByteArrayProtocolOutputStream(){  buff=new byte[32];}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  MInOut inout=new MInOut(getCtx(),getM_InOut_ID(),get_TrxName());  MInOutLineConfirm[] lines=getLines(false);  if (isInDispute()) {    MDocType dt=MDocType.get(getCtx(),inout.getC_DocType_ID());    if (dt.isSplitWhenDifference()) {      if (dt.getC_DocTypeDifference_ID() == 0) {        m_processMsg="No Split Document Type defined for: " + dt.getName();        return DocAction.STATUS_Invalid;      }      splitInOut(inout,dt.getC_DocTypeDifference_ID(),lines);      m_lines=null;    }  }  for (int i=0; i < lines.length; i++) {    MInOutLineConfirm confirmLine=lines[i];    confirmLine.set_TrxName(get_TrxName());    if (!confirmLine.processLine(inout.isSOTrx(),getConfirmType())) {      m_processMsg="ShipLine not saved - " + confirmLine;      return DocAction.STATUS_Invalid;    }    if (confirmLine.isFullyConfirmed()) {      confirmLine.setProcessed(true);      confirmLine.saveEx();    } else {      if (createDifferenceDoc(inout,confirmLine)) {        confirmLine.setProcessed(true);        confirmLine.saveEx();      } else {        log.log(Level.SEVERE,"Scrapped=" + confirmLine.getScrappedQty() + " - Difference="+ confirmLine.getDifferenceQty());        return DocAction.STATUS_Invalid;      }    }  }  if (m_creditMemo != null)   m_processMsg+=" @C_Invoice_ID@=" + m_creditMemo.getDocumentNo();  if (m_inventory != null)   m_processMsg+=" @M_Inventory_ID@=" + m_inventory.getDocumentNo();  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public void shutdown(ShutdownModeAmp mode,ExitCode exitCode,String msg,Result<String> result){  startFailSafeShutdown(msg);  ShutdownThread shutdownThread=_shutdownThread;  if (shutdownThread != null) {    shutdownThread.startShutdown(mode,exitCode,result);    if (!_isEmbedded) {      waitForShutdown();      System.out.println("Shutdown timeout");      System.exit(exitCode.ordinal());    }  } else {    shutdownImpl(mode,exitCode,result);  }}  }
class C{  protected void preRenderFeatures(KMLTraversalContext tc,DrawContext dc){  List<KMLAbstractFeature> containers=new ArrayList<KMLAbstractFeature>();  for (  KMLAbstractFeature feature : this.getFeatures()) {    if (feature instanceof KMLAbstractContainer)     containers.add(feature); else     feature.preRender(tc,dc);  }  for (  KMLAbstractFeature feature : containers) {    feature.preRender(tc,dc);  }}  }
class C{  public static void clear(String ParseString){  clear(0,null,ParseString);}  }
class C{  private void createMatrices(){  final int w=(int)(current_image.getWidth() / scaling);  final int h=(int)(current_image.getHeight() / scaling);  Trm=new float[3][3];  Trm[0][0]=(CTM[0][0] / w);  Trm[0][1]=(CTM[0][1] / w);  Trm[0][2]=0;  Trm[1][0]=(CTM[1][0] / h);  Trm[1][1]=(CTM[1][1] / h);  Trm[1][2]=0;  Trm[2][0]=CTM[2][0];  Trm[2][1]=CTM[2][1];  Trm[2][2]=1;  for (int y=0; y < 3; y++) {    for (int x=0; x < 3; x++) {      if ((Trm[x][y] > .99) & (Trm[x][y] < 1)) {        Trm[x][y]=1;      }    }  }  Trm1=new float[3][3];  Trm2=new float[3][3];  float x1, x2, y1, y2;  x1=CTM[0][0];  if (x1 < 0) {    x1=-x1;  }  x2=CTM[0][1];  if (x2 < 0) {    x2=-x2;  }  y1=CTM[1][1];  if (y1 < 0) {    y1=-y1;  }  y2=CTM[1][0];  if (y2 < 0) {    y2=-y2;  }  if (CTM[0][0] == 0.0 || CTM[1][1] == 0.0) {    Trm1=Trm;  } else   if ((CTM[0][1] == 0.0) && (CTM[1][0] == 0.0)) {    Trm1[0][0]=w / (CTM[0][0]);    Trm1[0][1]=0;    Trm1[0][2]=0;    Trm1[1][0]=0;    Trm1[1][1]=h / (CTM[1][1]);    Trm1[1][2]=0;    Trm1[2][0]=0;    Trm1[2][1]=0;    Trm1[2][2]=1;    Trm1=Matrix.multiply(Trm,Trm1);    for (int y=0; y < 3; y++) {      for (int x=0; x < 3; x++) {        if ((Trm1[x][y] > .99) & (Trm1[x][y] < 1)) {          Trm1[x][y]=1;        }      }    }    if (Trm1[2][0] < 0 && Trm1[0][0] > 0 && CTM[0][0] < 0) {      Trm1[2][0]=0;      Trm1[0][0]=-1f;    }    if (Trm1[2][1] < 0 && Trm1[1][1] > 0 && CTM[1][1] < 0 && CTM[0][0] < 0) {      Trm1[2][1]=0;      Trm1[1][1]=-1f;    }  } else {    if (x1 > x2) {      Trm1[0][0]=w / (CTM[0][0]);    } else {      Trm1[0][0]=w / (CTM[0][1]);    }    if (Trm1[0][0] < 0) {      Trm1[0][0]=-Trm1[0][0];    }    Trm1[0][1]=0;    Trm1[0][2]=0;    Trm1[1][0]=0;    if (y1 > y2) {      Trm1[1][1]=h / (CTM[1][1]);    } else {      Trm1[1][1]=h / (CTM[1][0]);    }    if (Trm1[1][1] < 0) {      Trm1[1][1]=-Trm1[1][1];    }    Trm1[1][2]=0;    Trm1[2][0]=0;    Trm1[2][1]=0;    Trm1[2][2]=1;    Trm1=Matrix.multiply(Trm,Trm1);    for (int y=0; y < 3; y++) {      for (int x=0; x < 3; x++) {        if ((Trm1[x][y] > .99) & (Trm1[x][y] < 1)) {          Trm1[x][y]=1;        }      }    }  }  if (x1 > x2) {    Trm2[0][0]=(CTM[0][0] / w);  } else {    Trm2[0][0]=(CTM[0][1] / w);  }  if (Trm2[0][0] < 0) {    Trm2[0][0]=-Trm2[0][0];  }  Trm2[0][1]=0;  Trm2[0][2]=0;  Trm2[1][0]=0;  if (y1 > y2) {    Trm2[1][1]=(CTM[1][1] / h);  } else {    Trm2[1][1]=(CTM[1][0] / h);  }  if (Trm2[1][1] < 0) {    Trm2[1][1]=-Trm2[1][1];  }  Trm2[1][2]=0;  Trm2[2][0]=0;  Trm2[2][1]=0;  Trm2[2][2]=1;  for (int y=0; y < 3; y++) {    for (int x=0; x < 3; x++) {      if ((Trm2[x][y] > .99) & (Trm2[x][y] < 1)) {        Trm2[x][y]=1;      }    }  }}  }
class C{  private float d2x(int size){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,size,getResources().getDisplayMetrics());}  }
class C{  public boolean isUuid(){  return uuid;}  }
class C{  @Reference(authors="G. Marsaglia",title="Evaluating the Normal Distribution",booktitle="Journal of Statistical Software 11(4)",url="https://www.jstatsoft.org/article/view/v011i04/v11i04.pdf") public static double standardNormalCDF(double x){  if (x >= 8.22) {    return 1.;  }  if (x <= -8.22) {    return 0.;  }  double s=x, t=0, b=x, q=x * x, i=1;  while (s != t) {    s=(t=s) + (b*=q / (i+=2));  }  return .5 + s * Math.exp(-.5 * q - .91893853320467274178);}  }
class C{  public String gtidSet(){  return this.gtidSet != null ? this.gtidSet : null;}  }
class C{  public static String sanitizeString(String dirty){  if (dirty == null) {    return null;  }  return dirty.replaceAll("[\\u2018\\u2019]","'").replaceAll("[\\u201C\\u201D]","\"");}  }
class C{  protected synchronized void incrementFailed(int hostNum){  m_failedCount++;  m_remoteHostFailureCounts[hostNum]++;}  }
class C{  public static boolean testUrlConnection(){  try {    final HttpURLConnection conn=(HttpURLConnection)new URL("http://www.google.com/").openConnection();    try {      conn.connect();      final String content=Streams.readFully(new InputStreamReader(conn.getInputStream()));      if (content.contains("Google")) {        return true;      }    }  finally {      conn.disconnect();    }  } catch (  IOException e) {    Log.d(TAG,"error: " + e);  }  return false;}  }
class C{  private static void dados(ComboBox combo,ObservableList dados){  if (dados.isEmpty() || dados == null) {    limpar(combo);  } else {    combo.setItems(dados);    combo.getSelectionModel().selectFirst();  }}  }
class C{  public void sendPointerSync(MotionEvent event){  validateNotAppThread();  if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {    event.setSource(InputDevice.SOURCE_TOUCHSCREEN);  }  InputManager.getInstance().injectInputEvent(event,InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH);}  }
class C{  public void creationErrorEncountered(String description,String systemName,String userName,Throwable exception) throws JmriConfigureXmlException {  ConfigXmlManager.creationErrorEncountered(null,null,description,systemName,userName,exception);}  }
class C{  public static void resetAll(Context context){  PrefsManager.resetAll(context);}  }
class C{  public void method(){}  }
class C{  @Override public int hasChanged(TestChromosome testCase){  testCase.setChanged(true);  suite.setTestChromosome(testIndex,testCase);  LocalSearchBudget.getInstance().countFitnessEvaluation();  for (  TestSuiteFitnessFunction fitnessFunction : fitnessFunctions)   fitnessFunction.getFitness(suite);  double newFitness=suite.getFitness();  if (isFitnessBetter(newFitness,lastFitnessSum)) {    logger.info("Local search improved fitness from " + lastFitnessSum + " to "+ newFitness);    updateLastFitness();    updateLastCoverage();    return -1;  } else   if (isFitnessWorse(newFitness,lastFitnessSum)) {    logger.info("Local search worsened fitness from " + lastFitnessSum + " to "+ newFitness);    suite.setFitnessValues(lastFitness);    suite.setCoverageValues(lastCoverage);    return 1;  } else {    logger.info("Local search did not change fitness of " + lastFitnessSum);    updateLastCoverage();    return 0;  }}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat224.isZero(x1) || Nat224.isOne(x1)) {    return this;  }  int[] x2=Nat224.create();  SecP224K1Field.square(x1,x2);  SecP224K1Field.multiply(x2,x1,x2);  int[] x3=x2;  SecP224K1Field.square(x2,x3);  SecP224K1Field.multiply(x3,x1,x3);  int[] x4=Nat224.create();  SecP224K1Field.square(x3,x4);  SecP224K1Field.multiply(x4,x1,x4);  int[] x8=Nat224.create();  SecP224K1Field.squareN(x4,4,x8);  SecP224K1Field.multiply(x8,x4,x8);  int[] x11=Nat224.create();  SecP224K1Field.squareN(x8,3,x11);  SecP224K1Field.multiply(x11,x3,x11);  int[] x19=x11;  SecP224K1Field.squareN(x11,8,x19);  SecP224K1Field.multiply(x19,x8,x19);  int[] x23=x8;  SecP224K1Field.squareN(x19,4,x23);  SecP224K1Field.multiply(x23,x4,x23);  int[] x42=x4;  SecP224K1Field.squareN(x23,19,x42);  SecP224K1Field.multiply(x42,x19,x42);  int[] x84=Nat224.create();  SecP224K1Field.squareN(x42,42,x84);  SecP224K1Field.multiply(x84,x42,x84);  int[] x107=x42;  SecP224K1Field.squareN(x84,23,x107);  SecP224K1Field.multiply(x107,x23,x107);  int[] x191=x23;  SecP224K1Field.squareN(x107,84,x191);  SecP224K1Field.multiply(x191,x84,x191);  int[] t1=x191;  SecP224K1Field.squareN(t1,20,t1);  SecP224K1Field.multiply(t1,x19,t1);  SecP224K1Field.squareN(t1,3,t1);  SecP224K1Field.multiply(t1,x1,t1);  SecP224K1Field.squareN(t1,2,t1);  SecP224K1Field.multiply(t1,x1,t1);  SecP224K1Field.squareN(t1,4,t1);  SecP224K1Field.multiply(t1,x3,t1);  SecP224K1Field.square(t1,t1);  int[] t2=x84;  SecP224K1Field.square(t1,t2);  if (Nat224.eq(x1,t2)) {    return new SecP224K1FieldElement(t1);  }  SecP224K1Field.multiply(t1,PRECOMP_POW2,t1);  SecP224K1Field.square(t1,t2);  if (Nat224.eq(x1,t2)) {    return new SecP224K1FieldElement(t1);  }  return null;}  }
class C{  private void createTriggerIds(TriggerProcess tp){  List<TriggerProcessParameter> params=Collections.emptyList();  TriggerType triggerType=tp.getTriggerDefinition().getType();  TriggerMessage tm=new TriggerMessage(triggerType,params,Collections.singletonList(supplier));  TriggerProcessIdentifier tpi1=new TriggerProcessIdentifier(TriggerProcessIdentifierName.ORGANIZATION_KEY,String.valueOf(tp.getUser().getOrganization().getKey()));  tpi1.setTriggerProcess(tp);  tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1));  if (triggerType == TriggerType.ACTIVATE_SERVICE || triggerType == TriggerType.DEACTIVATE_SERVICE) {    TriggerProcessIdentifier tpi2=new TriggerProcessIdentifier(TriggerProcessIdentifierName.SERVICE_KEY,String.valueOf(service.getKey()));    tpi2.setTriggerProcess(tp);    tp.setTriggerProcessIdentifiers(Arrays.asList(tpi1,tpi2));  }  triggerProcessData=new TriggerProcessMessageData(tp,tm);}  }
class C{  public static Pointer to(float values[]){  return new Pointer(FloatBuffer.wrap(values));}  }
class C{  final int measureWidthOfChildren(int heightMeasureSpec,int startPosition,int endPosition,final int maxWidth,int disallowPartialChildPosition){  if (LOG_ENABLED) {    Log.i(LOG_TAG,"measureWidthOfChildren, from " + startPosition + " to "+ endPosition);  }  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.left + mListPadding.right;  }  int returnedWidth=mListPadding.left + mListPadding.right;  final int dividerWidth=((mDividerWidth > 0) && mDivider != null) ? mDividerWidth : 0;  int prevWidthWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final AbsHListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChildWidth(child,i,heightMeasureSpec);    if (i > 0) {      returnedWidth+=dividerWidth;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child,-1);    }    returnedWidth+=child.getMeasuredWidth();    if (returnedWidth >= maxWidth) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevWidthWithoutPartialChild > 0)&& (returnedWidth != maxWidth) ? prevWidthWithoutPartialChild : maxWidth;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevWidthWithoutPartialChild=returnedWidth;    }  }  return returnedWidth;}  }
class C{  protected boolean beforeSave(boolean newRecord){  Boolean isActiveOld=(Boolean)get_ValueOld(COLUMNNAME_IsActive);  if (isActiveOld != null && is_ValueChanged(MForecast.COLUMNNAME_IsActive)) {    for (    MForecastLine line : getLines(isActiveOld)) {      line.setIsActive(isActive());      line.saveEx();    }  }  return true;}  }
class C{  public void writeString(String s2) throws IOException {  String s=s2;  if (s == null) {    s="";  }  writeString(s.getBytes());}  }
class C{  public static boolean checkIfAnyExportGroupsContainInitiator(DbClient dbClient,Set<URI> exportGroupURIs,Initiator initiator){  Iterator<ExportGroup> exportGroupIterator=dbClient.queryIterativeObjects(ExportGroup.class,exportGroupURIs,true);  while (exportGroupIterator.hasNext()) {    ExportGroup exportGroup=exportGroupIterator.next();    if (exportGroup.hasInitiator(initiator)) {      return true;    }  }  return false;}  }
class C{  public void closeCDATA() throws SAXException {  if (m_lexHandler != null && m_cdataTagOpen) {    m_lexHandler.endCDATA();  }  m_cdataTagOpen=false;}  }
class C{  public TransactionOutput(NetworkParameters params,@Nullable Transaction parent,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);  parentTransaction=parent;  availableForSpending=true;}  }
class C{  protected boolean readNumInputBits(){  try {    inputBits=Integer.parseInt(numInputField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error10"));    statusText1.setVisible(true);    inputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (inputBits <= 0) {    statusText1.setText(rb.getString("Error11"));    statusText1.setVisible(true);    inputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (inputBits > 1000) {    statusText1.setText(rb.getString("Error12"));    statusText1.setVisible(true);    inputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public AnimationObjectEditor(EditableResources e,AnimationObject o,int durationValue){  initComponents();  res=e;  ResourceEditorView.initImagesComboBox(image,res,true,false,true);  frameDelay.setModel(new SpinnerNumberModel(-1,-1,100000,200));  frameDelay.setValue(-1);  frameWidth.setModel(new SpinnerNumberModel(30,2,2000,1));  frameHeight.setModel(new SpinnerNumberModel(30,2,2000,1));  duration.setModel(new SpinnerNumberModel(durationValue,1,1000000,100));  if (o != null) {    startTime.setValue(o.getStartTime());    duration.setValue(o.getEndTime() - o.getStartTime());    frameDelay.setValue(AnimationAccessor.getFrameDelay(o));    frameWidth.setValue(AnimationAccessor.getFrameWidth(o));    frameHeight.setValue(AnimationAccessor.getFrameHeight(o));    String[] imgs=res.getImageResourceNames();    if (AnimationAccessor.getImageName(o) != null) {      image.setSelectedItem(AnimationAccessor.getImageName(o));    } else {      for (int iter=0; iter < imgs.length; iter++) {        if (res.getImage(imgs[iter]) == AnimationAccessor.getImage(o)) {          image.setSelectedItem(imgs[iter]);          break;        }      }    }    initSourceDestMotion(AnimationAccessor.getMotionX(o),startX,xCheck,destX,motionTypeX);    initSourceDestMotion(AnimationAccessor.getMotionY(o),startY,yCheck,destY,motionTypeY);    initSourceDestMotion(AnimationAccessor.getWidth(o),startWidth,widthCheck,destWidth,motionTypeWidth);    initSourceDestMotion(AnimationAccessor.getHeight(o),startHeight,heightCheck,destHeight,motionTypeHeight);    initSourceDestMotion(AnimationAccessor.getOrientation(o),startOrientation,orientationCheck,destOrientation,motionTypeOrientation);    initSourceDestMotion(AnimationAccessor.getOpacity(o),startOpacity,opacityCheck,destOpacity,motionTypeOpacity);  }}  }
class C{  public int numObjectsAtLocation(Double2D location){  if (location == null)   return 0;  Bag cell=getRawObjectsAtLocation(discretize(location));  if (cell == null)   return 0;  int count=0;  Object[] objs=cell.objs;  int numObjs=cell.numObjs;  for (int i=0; i < numObjs; i++) {    Object loc=getObjectLocation(objs[i]);    if (loc.equals(location))     count++;  }  return count;}  }
class C{  public static boolean matchApilevelMin(Integer apilevelMin){  if (apilevelMin == null)   return true;  if (getBuildVersion() >= apilevelMin)   return true; else   return false;}  }
class C{  public void lock(final ItemStack stack){  if (isLocked()) {    throw new IllegalStateException("Casing is already locked.");  }  if (Items.isKeyCreative(stack)) {    lock=Optional.of(UUID.randomUUID());  } else {    final UUID key=getKeyFromStack(stack).orElse(UUID.randomUUID());    setKeyForStack(stack,key);    lock=Optional.of(key);  }  getCasingWorld().markBlockForUpdate(getPosition());}  }
class C{  public static void main(String[] args){  TestHref tester=new TestHref();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void addPolygon(Geometry geometry){  if (geometry.isEmpty())   return;  Coordinate intPt;  double width=0;  LineString bisector=horizontalBisector(geometry);  if (bisector.getLength() == 0.0) {    width=0;    intPt=bisector.getCoordinate();  } else {    Geometry intersections=bisector.intersection(geometry);    Geometry widestIntersection=widestGeometry(intersections);    width=widestIntersection.getEnvelopeInternal().getWidth();    intPt=centre(widestIntersection.getEnvelopeInternal());  }  if (interiorPoint == null || width > maxWidth) {    interiorPoint=intPt;    maxWidth=width;  }}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  @Inline public static void markBlockMeta(Address block){  getMetaAddress(block).plus(FL_META_OFFSET).store(Word.one());}  }
class C{  public void test_ticket_1007b() throws Exception {  new TestHelper("ticket-1007b","ticket-1007b.rq","ticket-1007.trig","ticket-1007b.srx",false).runTest();}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public String doNotCheckCapabilitiesTipText(){  return "If set, filters capabilities are not checked before filter is built" + " (Use with caution to reduce runtime).";}  }
class C{  public void testInvalidArguments() throws Exception {  for (  final String arg : new String[]{"minWordLength","maxTokenLength","maxWordCount"}) {    IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);    assertTrue(expected.getMessage().contains(arg + " must be greater than or equal to zero") || expected.getMessage().contains(arg + " must be greater than zero"));  }}  }
class C{  public Trie(){  m_Root=new Node();  m_lowerCaseOnly=false;}  }
class C{  private int runCounter(FileSystem fs,Path webGraphDb) throws IOException {  Path numLinksPath=new Path(webGraphDb,NUM_NODES);  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  JobConf counter=new NutchJob(getConf());  counter.setJobName("LinkRank Counter");  FileInputFormat.addInputPath(counter,nodeDb);  FileOutputFormat.setOutputPath(counter,numLinksPath);  counter.setInputFormat(SequenceFileInputFormat.class);  counter.setMapperClass(Counter.class);  counter.setCombinerClass(Counter.class);  counter.setReducerClass(Counter.class);  counter.setMapOutputKeyClass(Text.class);  counter.setMapOutputValueClass(LongWritable.class);  counter.setOutputKeyClass(Text.class);  counter.setOutputValueClass(LongWritable.class);  counter.setNumReduceTasks(1);  counter.setOutputFormat(TextOutputFormat.class);  counter.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  LOG.info("Starting link counter job");  try {    JobClient.runJob(counter);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  LOG.info("Finished link counter job");  LOG.info("Reading numlinks temp file");  FSDataInputStream readLinks=fs.open(new Path(numLinksPath,"part-00000"));  BufferedReader buffer=new BufferedReader(new InputStreamReader(readLinks));  String numLinksLine=buffer.readLine();  readLinks.close();  if (numLinksLine == null || numLinksLine.length() == 0) {    fs.delete(numLinksPath,true);    throw new IOException("No links to process, is the webgraph empty?");  }  LOG.info("Deleting numlinks temp file");  fs.delete(numLinksPath,true);  String numLinks=numLinksLine.split("\\s+")[1];  return Integer.parseInt(numLinks);}  }
class C{  public static void runOnUiThread(Runnable runnable){  HANDLER.post(runnable);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(){  length=0;}  }
class C{  @Override public IndexableField createField(SchemaField field,Object value,float boost){  throw new UnsupportedOperationException("PointType uses multiple fields.  field=" + field.getName());}  }
class C{  default void addPoolString(char[] buffer,int offset,int length){}  }
class C{  public LuaValue tonumber(int base){  double d=scannumber(base);  return Double.isNaN(d) ? NIL : valueOf(d);}  }
class C{  public static mat4 createscale(float s){  mat4 result=new mat4();  result.m[0]=s;  result.m[5]=s;  result.m[10]=s;  return result;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static synchronized void appendMessage(Context c,final String msg){  if (msg.length() == 0)   return;  String out=msg;  boolean timestamp=PrefStore.isTimestamp(c);  int maxLines=PrefStore.getMaxLines(c);  int protocolSize=protocol.size();  if (protocolSize > 0 && lastChar != '\n') {    protocol.remove(protocolSize - 1);    out=lastLine + out;  }  lastChar=out.charAt(out.length() - 1);  String[] lines=out.split("\\n");  for (int i=0, l=lines.length; i < l; i++) {    lastLine=lines[i];    if (timestamp)     protocol.add(getTimeStamp() + lastLine); else     protocol.add(lastLine);    if (protocolSize + i >= maxLines) {      protocol.remove(0);    }  }  show();  if (PrefStore.isLogger(c))   write(c,msg);}  }
class C{  public Map<String,ThriftServiceEntry> entries(){  return thriftService.entries();}  }
class C{  public void compile(File file) throws CompilationFailedException {  CompilationUnit unit=new CompilationUnit(configuration);  unit.addSource(file);  unit.compile();}  }
class C{  @Override public List<ExampleSetBasedIndividual> operate(ExampleSetBasedIndividual individual) throws Exception {  List<ExampleSetBasedIndividual> l=new LinkedList<ExampleSetBasedIndividual>();  AttributeWeightedExampleSet clone=(AttributeWeightedExampleSet)individual.getExampleSet().clone();  try {    addOriginalAttribute(clone);    addGeneratedAttribute(clone);    deselect(clone,maxGeneratedAttributes + maxAddedOriginalAttributes);    if (clone.getNumberOfUsedAttributes() > 0) {      l.add(new ExampleSetBasedIndividual(clone));    }  } catch (  GenerationException e) {    individual.getExampleSet().getLog().logWarning("DirectedGGA: Exception occured during generation of attributes, using only original example set instead.");  }  l.add(individual);  return l;}  }
class C{  public boolean isReceivedPointerDown(int pointerId){  final int pointerFlag=(1 << pointerId);  return (mReceivedPointersDown & pointerFlag) != 0;}  }
class C{  public boolean isSameAs(Block other){  return getBlock() == other;}  }
class C{  protected AbstractRed(CachableRed src,Rectangle bounds,Map props){  init(src,bounds,src.getColorModel(),src.getSampleModel(),src.getTileGridXOffset(),src.getTileGridYOffset(),props);}  }
class C{  protected synchronized void engineSetSeed(byte[] seed){  if (seed == null) {    throw new NullPointerException("seed == null");  }  if (state == NEXT_BYTES) {    System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET);  }  state=SET_SEED;  if (seed.length != 0) {    updateSeed(seed);  }}  }
class C{  protected Polynomial(){}  }
class C{  private boolean maybeInlineMethod(InlineDecision inlDec,Instruction callSite){  if (inlDec.isNO()) {    return false;  }  if (this.osrGuardedInline) {    if (VM.VerifyAssertions)     opt_assert(lastOsrBarrier != null);    gc.saveOSRBarrierForInst(lastOsrBarrier,callSite);  }  GenerationContext inlinedContext=Inliner.execute(inlDec,gc,currentBBLE.block.exceptionHandlers(),callSite);  inlinedSomething=true;  if (currentBBLE.handlers != null) {    for (    HandlerBlockLE handler : currentBBLE.handlers) {      blocks.rectifyLocals(_localState,handler);    }  }  if (inlinedContext.getEpilogue() != null) {    BasicBlockLE epilogueBBLE=new BasicBlockLE(0);    epilogueBBLE.block=inlinedContext.getEpilogue();    if (inlinedContext.getResult() != null) {      TypeReference resultType=Call.getResult(callSite).getType();      pop(resultType);    }    blocks.rectifyStacks(currentBBLE.block,stack,epilogueBBLE);    if (inlinedContext.getResult() != null) {      TypeReference resultType=Call.getResult(callSite).getType();      push(inlinedContext.getResult(),resultType);    }    epilogueBBLE.copyIntoLocalState(_localState);    BasicBlockLE afterBBLE=blocks.getOrCreateBlock(bcodes.index(),epilogueBBLE,stack,_localState);    InliningBlockLE inlinedCallee=new InliningBlockLE(inlinedContext,epilogueBBLE);    currentBBLE.fallThrough=inlinedCallee;    currentBBLE.block.insertOut(inlinedCallee.gc.getCfg().firstInCodeOrder());    epilogueBBLE.fallThrough=afterBBLE;    epilogueBBLE.block.insertOut(epilogueBBLE.fallThrough.block);  } else {    InliningBlockLE inlinedCallee=new InliningBlockLE(inlinedContext,null);    currentBBLE.fallThrough=inlinedCallee;    currentBBLE.block.insertOut(inlinedCallee.gc.getCfg().firstInCodeOrder());  }  endOfBasicBlock=true;  return true;}  }
class C{  static void test(ProtocolFamily family,NetworkInterface nif,InetAddress group,InetAddress source) throws IOException {  System.out.format("\nTest DatagramChannel to %s socket\n",family.name());  try (DatagramChannel dc=(family == UNSPEC) ? DatagramChannel.open() : DatagramChannel.open(family)){    dc.setOption(StandardSocketOptions.SO_REUSEADDR,true).bind(new InetSocketAddress(0));    System.out.format("join %s @ %s\n",group.getHostAddress(),nif.getName());    MembershipKey key;    try {      key=dc.join(group,nif);    } catch (    IllegalArgumentException iae) {      if (family == UNSPEC) {        System.out.println("Not supported");        return;      }      throw iae;    }    int port=((InetSocketAddress)dc.getLocalAddress()).getPort();    int id=sendDatagram(source,nif,group,port);    receiveDatagram(dc,source,id);    try {      System.out.format("block %s\n",source.getHostAddress());      key.block(source);      id=sendDatagram(source,nif,group,port);      receiveDatagram(dc,null,id);      System.out.format("unblock %s\n",source.getHostAddress());      key.unblock(source);      id=sendDatagram(source,nif,group,port);      receiveDatagram(dc,source,id);    } catch (    UnsupportedOperationException x) {      String os=System.getProperty("os.name");      if (os.equals("SunOS") || os.equals("Linux"))       throw x;      System.out.println("Exclude-mode filtering not supported!");    }    key.drop();    InetAddress bogus=(group instanceof Inet6Address) ? InetAddress.getByName("fe80::1234") : InetAddress.getByName("1.2.3.4");    System.out.format("join %s @ %s only-source %s\n",group.getHostAddress(),nif.getName(),bogus.getHostAddress());    try {      key=dc.join(group,nif,bogus);      id=sendDatagram(source,nif,group,port);      receiveDatagram(dc,null,id);      System.out.format("join %s @ %s only-source %s\n",group.getHostAddress(),nif.getName(),source.getHostAddress());      key=dc.join(group,nif,source);      id=sendDatagram(source,nif,group,port);      receiveDatagram(dc,source,id);    } catch (    UnsupportedOperationException x) {      String os=System.getProperty("os.name");      if (os.equals("SunOS") || os.equals("Linux"))       throw x;      System.out.println("Include-mode filtering not supported!");    }  } }  }
class C{  private static void checkInsn(InsnNode insn){  if (insn.getType() == InsnType.ARITH) {    ArithNode arith=(ArithNode)insn;    ArithOp op=arith.getOp();    if (op == ArithOp.ADD || op == ArithOp.SUB) {      for (int i=0; i < 2; i++) {        InsnArg arg=arith.getArg(i);        if (arg.isInsnWrap()) {          InsnNode wrapInsn=((InsnWrapArg)arg).getWrapInsn();          wrapInsn.add(AFlag.DONT_WRAP);          checkInsn(wrapInsn);        }      }    }  } else {    for (    InsnArg arg : insn.getArguments()) {      if (arg.isInsnWrap()) {        InsnNode wrapInsn=((InsnWrapArg)arg).getWrapInsn();        checkInsn(wrapInsn);      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public RegionRestriction(String sequence,int start,int end){  if (sequence == null) {    throw new NullPointerException();  }  mSequence=sequence;  mStart=start;  mEnd=end;}  }
class C{  @Override public int size(){  return _size;}  }
class C{  private static Datacenter createDatacenter(String name){  List<Host> hostList=new ArrayList<Host>();  List<Pe> peList=new ArrayList<Pe>();  int mips=1000;  peList.add(new Pe(0,new PeProvisionerSimple(mips)));  int hostId=0;  int ram=2048;  long storage=1000000;  int bw=10000;  hostList.add(new Host(hostId,new RamProvisionerSimple(ram),new BwProvisionerSimple(bw),storage,peList,new VmSchedulerTimeShared(peList)));  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0;  double cost=3.0;  double costPerMem=0.05;  double costPerStorage=0.001;  double costPerBw=0.0;  LinkedList<Storage> storageList=new LinkedList<Storage>();  DatacenterCharacteristics characteristics=new DatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  Datacenter datacenter=null;  try {    datacenter=new Datacenter(name,characteristics,new VmAllocationPolicySimple(hostList),storageList,0);  } catch (  Exception e) {    e.printStackTrace();  }  return datacenter;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MetaImage) {    return ((MetaImage)o).getSourceAsBytes();  }  return null;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster flowAccum;  String outputHeader=null;  String flowAccumHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  double maxZ;  int x, y;  int maxX=0;  int maxY=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  flowAccumHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || flowAccumHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    flowAccum=new WhiteboxRaster(flowAccumHeader,"r");    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(flowAccum.getCellSizeX() + flowAccum.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=flowAccum.getRowFromYCoordinate(vertices[0][1]);outletCol=flowAccum.getColumnFromXCoordinate(vertices[0][0]);maxZ=0;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}outletX=flowAccum.getXCoordinateFromColumn(maxX);outletY=flowAccum.getYCoordinateFromRow(maxY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (flowAccum.getNumberColumns() != cols || flowAccum.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {maxZ=0;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}output.setValue(maxY,maxX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();flowAccum.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public void validate(){}  }
class C{  public String toString(){  DecimalFormat formatter=new DecimalFormat("0.00000E00");  return formatter.format(real) + "  +  i * " + formatter.format(imag);}  }
class C{  public boolean autocorrelationTest(byte[] bitstring) throws RandomDataGenerationException {  int nBits=ranges.getBitstreamLength() * 2;  int delta=ranges.getBitstreamLength() * 2;  for (int a=1; a <= delta; a++) {    int counter=0;    for (int j=0; j < nBits; j++) {      int origVal=(1 << (7 - (j % 8))) & bitstring[(j / 8)];      int shiftedVal=(1 << (7 - ((j + a) % 8))) & bitstring[((j + a) / 8)];      if (((origVal == 0) && (shiftedVal > 0)) || ((origVal > 0) && (shiftedVal == 0))) {        counter++;      }    }    if ((counter <= ranges.getAutocorrelationBorders()[0]) || (counter >= ranges.getAutocorrelationBorders()[1])) {      System.err.println(counter);      return false;    } else {    }  }  return true;}  }
class C{  public static Pointer to(double values[]){  return new Pointer(DoubleBuffer.wrap(values));}  }
class C{  public void testDoPhase() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  DHParameterSpec dhPs=((DHPrivateKey)privKey).getParams();  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].doPhase(publKey,true);      fail("IllegalStateException expected");    } catch (    IllegalStateException e) {    }    kAgs[i].init(privKey);    try {      kAgs[i].doPhase(privKey,false);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].doPhase(privKey,true);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    kAgs[i].init(privKey,dhPs);    kAgs[i].doPhase(publKey,true);    kAgs[i].init(privKey,dhPs,random);    kAgs[i].doPhase(publKey,true);  }}  }
class C{  static double clip01(double value){  if (value < 0) {    value=0;  }  if (value > 1) {    value=1;  }  return value;}  }
class C{  void replaceFindViewById(StmtBody stmtBody,Stmt stmt){  if (stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {    Chain<Unit> units=stmtBody.getUnits();    InstanceInvokeExpr iInvokeExpr=(InstanceInvokeExpr)stmt.getInvokeExpr();    List<ValueBox> defBoxList=stmt.getDefBoxes();    ValueBox callerObjectBox=iInvokeExpr.getBaseBox();    ValueBox idValueBox=iInvokeExpr.getArgBox(0);    ValueBox assignToBox=null;    if (defBoxList != null && defBoxList.size() > 0)     assignToBox=defBoxList.get(0);    logger.debug("DefBoxes: {} ",stmt.getDefBoxes());    if (callerObjectBox == null || idValueBox == null) {      logger.warn("Could not get boxes for replacement ");      AnalysisReport.v().addEntry("Could not replace findViewById because it was called with a non-constant arg",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Integer intId;    try {      intId=new Integer(idValueBox.getValue().toString());    } catch (    Exception ex) {      logger.info("Couldn't replace {} ",stmt);      AnalysisReport.v().addEntry("Could not replace findViewById because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    if (ResourcesSoot.isAndroidId(intId)) {      logger.info("android builtin IDs, ignored ");      return;    }    SootMethod getViewMethod=ResourcesSoot.v().lookupGetUi_ID(intId);    if (getViewMethod == null) {      logger.warn("NOT replacing {}, id={} ",stmt,String.format("0x%x",intId));      AnalysisReport.v().addEntry("Could not replace findViewById because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Expr invokeExpr=Jimple.v().newStaticInvokeExpr(getViewMethod.makeRef(),callerObjectBox.getValue());    Stmt lookupStmt;    if (assignToBox != null)     lookupStmt=Jimple.v().newAssignStmt(assignToBox.getValue(),invokeExpr); else     lookupStmt=Jimple.v().newInvokeStmt(invokeExpr);    try {      units.swapWith(stmt,lookupStmt);      logger.info("replacing {} ",stmt);      logger.info("with {}, OK ",lookupStmt);    } catch (    Exception ex) {      logger.warn("replacing {} ",stmt);      logger.warn("with {} => NOT OK",lookupStmt);      AnalysisReport.v().addEntry("Could not replace findViewById because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);    }  } else {    logger.warn("InvokeExpr in {} is not an InstanceInvokeExpr",stmt);    AnalysisReport.v().addEntry("Could not replace findViewById because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);  }}  }
class C{  public void layoutContainer(Container parent){  checkComponents(parent);  int rows=getRowCount();  int cols=getColCount();  Component[][] com=new Component[rows][cols];  Object[] keys=m_data.keySet().toArray();  Arrays.sort(keys);  for (int i=0; i < keys.length; i++) {    ALayoutConstraint constraint=(ALayoutConstraint)keys[i];    Component component=(Component)m_data.get(keys[i]);    if (component.isVisible())     com[constraint.getRow()][constraint.getCol()]=component; else     com[constraint.getRow()][constraint.getCol()]=null;  }  int[] colWidth=new int[cols];  int[] rowHeight=new int[rows];  int columnWidth=m_spaceV;  for (int c=0; c < cols; c++) {    int width=0;    for (int r=0; r < rows; r++) {      Component component=com[r][c];      if (component != null) {        width=Math.max(width,component.getPreferredSize().width);        rowHeight[r]=Math.max(rowHeight[r],component.getPreferredSize().height);      }    }    colWidth[c]=width;    columnWidth+=width + m_spaceV;  }  int parentWidth=parent.getSize().width;  double multiplier=(double)parentWidth / (double)columnWidth;  if (multiplier < .5)   multiplier=.5;  for (int c=0; c < cols; c++)   colWidth[c]=(int)(colWidth[c] * multiplier);  int spaceV=(int)(m_spaceV * multiplier);  Insets insets=parent.getInsets();  int posH=insets.top + m_spaceH;  for (int r=0; r < rows; r++) {    int posV=insets.left + spaceV;    int height=0;    for (int c=0; c < cols; c++) {      Component component=com[r][c];      if (component != null) {        Dimension ps=component.getPreferredSize();        int w=ps.width;        if (m_colFill || w > colWidth[c])         w=colWidth[c];        int h=ps.height;        int topSpace=0;        if (h < rowHeight[r])         topSpace=(rowHeight[r] - h) / 3;        height=Math.max(height,h);        component.setBounds(posV,posH + topSpace,w,h);      }      posV+=colWidth[c] + spaceV;    }    posH+=height + m_spaceH;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (direction: ");  result.append(direction);  result.append(')');  return result.toString();}  }
class C{  public final Object[] toArray(){  Object[][] field=this.field;  Object[] fieldx=null;  final int width=this.width;  final int height=this.height;  Object[] vals=new Object[width * height];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      vals[i++]=fieldx[y];    }  }  return vals;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  private static void checkAndHideClass(ClassNode cls){  for (  FieldNode field : cls.getFields()) {    AccessInfo af=field.getAccessFlags();    if (af.isSynthetic() && af.isStatic() && af.isFinal()&& !field.contains(AFlag.DONT_GENERATE)) {      return;    }  }  cls.add(AFlag.DONT_GENERATE);}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessageToSwitch(DatapathId dpid,OFMessage message){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending 1 new entries to {}",dpid.toString());    }    ofswitch.write(message);    ofswitch.flush();  }}  }
class C{  public static double pointsToMillis(double pt){  return pt / POINT_POSTSCRIPT * INCH_MM;}  }
class C{  public MergeEndPage(){  super(NAME);  setTitle(Messages.getString("MergeEndPage.PageTitle"));  setDescription(Messages.getString("MergeEndPage.PageDescription"));}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  public ReplaceViewHandlerTestCase(String name){  super(name);}  }
class C{  boolean merge(Line next){  if (_srcFilename != null && !_srcFilename.equals(next._srcFilename))   return false; else   if (_dstIncrement != next._dstIncrement)   return false; else   if (getLastDestinationLine() + 1 != next._dstLine)   return false; else   if (getLastSourceLine() + 1 != next._srcLine)   return false; else {    _repeat+=next._repeat;    return true;  }}  }
class C{  private Path toPrimary(Path path){  return convertPath(path,uri);}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public void clear(){  new ByteArrayList(this.state).fillFromToWith(0,this.state.length - 1,FREE);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  public static double sum(Array array) throws ExpressionException {  if (array.getDimension() > 1)   throw new ExpressionException("can only get sum/avg from 1 dimensional arrays");  double rtn=0;  int len=array.size();  for (int i=1; i <= len; i++) {    rtn+=_toDoubleValue(array,i);  }  return rtn;}  }
class C{  static public FunctionNode GE(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.GE,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  super.connectionNotification(eventName,source);  if (connectionAllowed(eventName)) {    if (eventName.equals("dataSet")) {      m_dataProvider=true;      m_trainingProvider=false;      m_testProvider=false;    } else     if (eventName.equals("trainingSet")) {      m_dataProvider=false;      m_trainingProvider=true;      m_testProvider=false;    } else     if (eventName.equals("testSet")) {      m_dataProvider=false;      m_trainingProvider=false;      m_testProvider=true;    }  }}  }
class C{  private boolean containsColor(int[] colors,int c){  for (int i=0; i < colors.length; i++) {    if (colors[i] == c)     return true;  }  return false;}  }
class C{  private void run(){  pruneDeadInstructions();  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();  ssaMeth.forEachInsn(new NoSideEffectVisitor(worklist));  int regV;  while (0 <= (regV=worklist.nextSetBit(0))) {    worklist.clear(regV);    if (useList[regV].size() == 0 || isCircularNoSideEffect(regV,null)) {      SsaInsn insnS=ssaMeth.getDefinitionForRegister(regV);      if (deletedInsns.contains(insnS)) {        continue;      }      RegisterSpecList sources=insnS.getSources();      int sz=sources.size();      for (int i=0; i < sz; i++) {        RegisterSpec source=sources.get(i);        useList[source.getReg()].remove(insnS);        if (!hasSideEffect(ssaMeth.getDefinitionForRegister(source.getReg()))) {          worklist.set(source.getReg());        }      }      deletedInsns.add(insnS);    }  }  ssaMeth.deleteInsns(deletedInsns);}  }
class C{  public void clickMenuItemWithUrl(Context context,int menuIndex,String url){  Intent addedIntent=new Intent();  addedIntent.setData(Uri.parse(url));  try {    PendingIntent pendingIntent=mMenuEntries.get(menuIndex).second;    pendingIntent.send(context,0,addedIntent,mOnFinished,null);  } catch (  CanceledException e) {    Log.e(TAG,"Custom tab in Chrome failed to send pending intent.");  }}  }
class C{  protected boolean putObject(Conflatable event,long sequenceID) throws CacheException, InterruptedException {  Long oldPosition=null;  final boolean isDebugEnabled_BS=logger.isTraceEnabled(LogMarker.BRIDGE_SERVER);  if (isDebugEnabled_BS && this.lastSequenceIDPut >= sequenceID && !owningQueue.puttingGIIDataInQueue) {    logger.trace(LogMarker.BRIDGE_SERVER,"HARegionQueue::DACE:putObject: Given sequence ID is already present ({}).\nThis may be a recovered operation via P2P or a GetInitialImage.\nlastSequenceIDPut = {} ; event = {};\n",sequenceID,lastSequenceIDPut,event);  }  boolean rejected=false;synchronized (this) {    if (sequenceID > this.lastSequenceIDPut) {      if (logger.isTraceEnabled()) {        logger.trace("HARegionQueue.putObject: adding {}",event);      }      this.lastSequenceIDPut=sequenceID;    } else     if (!owningQueue.puttingGIIDataInQueue) {      if (isDebugEnabled_BS) {        logger.trace(LogMarker.BRIDGE_SERVER,"{} eliding event with ID {}, because it is not greater than the last sequence ID ({}). The rejected event has key <{}> and value <{}>",this,event.getEventId(),this.lastSequenceIDPut,event.getKeyToConflate(),event.getValueToConflate());      }      owningQueue.stats.incNumSequenceViolated();      owningQueue.incrementTakeSidePutPermits();      CacheClientNotifier ccn=CacheClientNotifier.getInstance();      if (ccn != null) {        ccn.getClientProxy(owningQueue.clientProxyID).getStatistics().incMessagesFailedQueued();      }      return true;    }    if (lastDispatchedSequenceId == TOKEN_DESTROYED) {      return false;    }    if (sequenceID > lastDispatchedSequenceId || owningQueue.puttingGIIDataInQueue) {      Long position=Long.valueOf(owningQueue.tailKey.incrementAndGet());      owningQueue.putEventInHARegion(event,position);      if (this.counters == null) {        this.counters=new LinkedHashMap<Long,Object>();      }      this.counters.put(position,null);      if (owningQueue.shouldBeConflated(event)) {        oldPosition=owningQueue.addToConflationMap(event,position);      }      owningQueue.publish(position);    } else {      rejected=true;    }  }  if (rejected) {    owningQueue.incrementTakeSidePutPermits();    CacheClientNotifier ccn=CacheClientNotifier.getInstance();    if (ccn != null) {      ccn.getClientProxy(owningQueue.clientProxyID).getStatistics().incMessagesFailedQueued();    }  } else {    owningQueue.entryEnqueued(event);  }  if (oldPosition != null) {    Conflatable old=(Conflatable)owningQueue.region.get(oldPosition);    if (old != null) {      ThreadIdentifier oldTi=HARegionQueue.getThreadIdentifier(old.getEventId());      DispatchedAndCurrentEvents oldDace=(DispatchedAndCurrentEvents)owningQueue.eventsMap.get(oldTi);      if (oldDace != null) {        oldDace.removeOldConflatedEntry(oldPosition);      }    }  }  return true;}  }
class C{  public static boolean isMonitorWait(String methodName,String methodSig){  return "wait".equals(methodName) && ("()V".equals(methodSig) || "(J)V".equals(methodSig) || "(JI)V".equals(methodSig));}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new MotifSplitPaneDivider(this);}  }
class C{  @Override protected int addHeaderToOutput(byte[] msg,jmri.jmrix.AbstractMRMessage m){  if (log.isDebugEnabled()) {    log.debug("Appending 0xFF 0xFE to start of outgoing message");  }  msg[0]=(byte)0xFF;  msg[1]=(byte)0xFE;  return 2;}  }
class C{  protected void resetPalette(){  box=null;  super.resetPalette();}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void assassinate(String address) throws UnknownHostException {  getProbe().assassinateEndpoint(address);}  }
class C{  public void haltNode(String postOperation) throws Exception {  Thread.sleep(6 * 1000);  if (postOperation.equals("poweroff")) {    localRepository.poweroff();  } else {    localRepository.reboot();  }}  }
class C{  @SuppressWarnings("unused") public BatchWrite(DataflowRunner runner,Write.Bound<T> transform){  this.runner=runner;  this.transform=transform;}  }
class C{  public boolean process() throws ResourceNotFoundException {  BufferedReader reader=null;  try {    StringWriter sw=new StringWriter();    reader=new BufferedReader(new InputStreamReader(resourceLoader.getResourceStream(name),encoding));    char buf[]=new char[1024];    int len=0;    while ((len=reader.read(buf,0,1024)) != -1)     sw.write(buf,0,len);    setData(sw.toString());    return true;  } catch (  ResourceNotFoundException e) {    throw e;  }catch (  Exception e) {    rsvc.error("Cannot process content resource : " + e.toString());    return false;  } finally {    if (reader != null) {      try {        reader.close();      } catch (      Exception ignored) {      }    }  }}  }
class C{  public static long writeFile(String path,byte[] jpeg,ExifInterface exif) throws IOException {  if (!createDirectoryIfNeeded(path)) {    Log.e(TAG,"Failed to create parent directory for file: " + path);    return -1;  }  if (exif != null) {    exif.writeExif(jpeg,path);    File f=new File(path);    return f.length();  } else {    return writeFile(path,jpeg);  }}  }
class C{  public PolynomialGF2mSmallM addMonomial(int degree){  int[] monomial=new int[degree + 1];  monomial[degree]=1;  int[] resultCoeff=add(coefficients,monomial);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public void stopAutoDelete(){  handler.getTempFileDeleter().stopAutoDelete(autoDeleteReference,name);  autoDeleteReference=null;}  }
class C{  @Override public <T>T deserialize(byte[] data,Class<T> clazz){  Serializable serializer=findResponsible(clazz);  return serializer.deserialize(data,clazz);}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{volume_type_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response deleteVolumeType(@PathParam("tenant_id") String openstackTenantId,@PathParam("volume_type_id") String volumeTypeId){  _log.info("VolumeType deletion is not supported");  return CinderApiUtils.createErrorResponse(400,"Bad Request : Delete volume type not supported");}  }
class C{  public void addAttachments(Collection<File> files){  if (files == null || files.size() == 0)   return;  for (  File f : files) {    addAttachment(f);  }}  }
class C{  public DeleteSnapshotRequest(){}  }
class C{  public boolean isGroupChatActive(String chatId){  return getOrCreateGroupChat(chatId).isGroupChatActive();}  }
class C{  @Override public void putAll(final Map<? extends byte[],? extends Map<String,byte[]>> map){  for (  final Map.Entry<? extends byte[],? extends Map<String,byte[]>> me : map.entrySet()) {    try {      this.insert(me.getKey(),me.getValue());    } catch (    final SpaceExceededException e) {      ConcurrentLog.logException(e);    }catch (    final IOException e) {      ConcurrentLog.logException(e);    }  }}  }
class C{  private static void copyTIBToBootImage(RVMType rvmType,Object jdkObject,Address imageAddress) throws IllegalAccessException {  if (verbosity.isAtLeast(DETAILED)) {    depth--;    traceContext.push("",jdkObject.getClass().getName(),"tib");  }  Address tibImageAddress=copyToBootImage(rvmType.getTypeInformationBlock(),false,Address.max(),jdkObject,false,AlignmentEncoding.ALIGN_CODE_NONE);  if (verbosity.isAtLeast(DETAILED)) {    traceContext.pop();    depth++;  }  if (tibImageAddress.EQ(OBJECT_NOT_ALLOCATED)) {    fail("can't copy tib for " + jdkObject);  }  ObjectModel.setTIB(bootImage,imageAddress,tibImageAddress,rvmType);}  }
class C{  public void closeAllLastParkings(){  Iterator<Id<Person>> iter=endTimeOfFirstParking.keySet().iterator();  while (iter.hasNext()) {    Id<Person> personId=iter.next();    Id<ActivityFacility> parkingFacilityId=currentParkingFacilityId.get(personId);    if (parkingFacilityId == null) {      System.out.println();    }    getOccupancyBins(parkingFacilityId).inrementParkingOccupancy(startTimeOfCurrentParking.get(personId),endTimeOfFirstParking.get(personId));    if (!parkingArrivalDepartureLog.containsKey(personId)) {      parkingArrivalDepartureLog.put(personId,new ParkingArrivalDepartureLog());    }    parkingArrivalDepartureLog.get(personId).logParkingArrivalDepartureTime(parkingFacilityId,startTimeOfCurrentParking.get(personId),endTimeOfFirstParking.get(personId));  }  for (  ParkingCapacityFullLogger pcfl : parkingCapacityFullTimes.values()) {    pcfl.closeLastParking();  }}  }
class C{  public ExceptionQueuedEvent(FacesContext facesContext,ExceptionQueuedEventContext eventContext){  super(facesContext,eventContext);}  }
class C{  public Arguments(Option[] options){  this.options=options;}  }
class C{  String cleanName(final ScriptNode n){  String result="";  if (n instanceof FunctionNode) {    Name name=((FunctionNode)n).getFunctionName();    if (name == null) {      result="anonymous";    } else {      result=name.getIdentifier();    }  } else {    result="script";  }  return result;}  }
class C{  protected static final void intToNetworkByteOrder(int num,byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  for (int i=count - 1; i >= 0; i--) {    buf[start + i]=(byte)(num & 0xff);    num>>>=8;  }}  }
class C{  @Constraints(noNullInputs=true,notMutable=true,noDirectInsertion=true) public static <T>void validateBean(@BoundInputVariable(initializer=true,atMostOnceWithSameParameters=true) T instance,Class<?> clazz) throws FalsePositiveException, IllegalArgumentException {  Inputs.checkNull(instance,clazz);  for (  Field f : getAllFieldsToInject(clazz)) {    f.setAccessible(true);    try {      Object obj=f.get(instance);      if (obj == null) {        throw new FalsePositiveException("Missing dependency injection for field " + f.getName() + " in class "+ clazz.getName());      }    } catch (    IllegalAccessException e) {      logger.warn(e.toString());    }  }  Class<?> parent=clazz.getSuperclass();  if (parent != null && !parent.equals(Object.class)) {    validateBean(instance,parent);  }}  }
class C{  public void execute(){  acquireReference();  try {    getSession().execute(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public Axis axis(DimensionPK dimensionPK) throws ScopeException, ComputingException, InterruptedException {  Domain domain=ProjectManager.INSTANCE.getDomain(getContext(),dimensionPK.getParent());  DomainHierarchy hierarchy=DomainHierarchyManager.INSTANCE.getHierarchy(getProject().getId(),domain,true);  Dimension dimension=hierarchy.getDimension(getContext(),dimensionPK);  return S(domain).A(dimension);}  }
class C{  public static int indexOfThatStartsWith(List<String> list,String startsWith,int startIndex){  for (int i=startIndex; i < list.size(); i++) {    String curStr=list.get(i);    if (curStr != null && curStr.startsWith(startsWith)) {      return i;    }  }  return -1;}  }
class C{  public InlineKeyboardButton.InlineKeyboardButtonBuilder url(String url){  this.url=url;  this.callback_data=null;  this.switch_inline_query=null;  return this;}  }
class C{  public Graphics modifyGraphicsForPainting(Graphics graphics){  if (hints != null) {    hints.setRenderingHints(graphics);  }  return graphics;}  }
class C{  public static void main(String[] args){  execute(TOOL_VERSION,Franca2IdlStandalone.class,args);}  }
class C{  public boolean containsKey(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return true;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  public void save() throws IOException, Exception {  ACSParserXMLUtility.saveXMLFile(xmlPath,doc);}  }
class C{  public Builder minute(Integer minute){  if (minute != null && (minute < 0 || minute > 59)) {    throw Messages.INSTANCE.getIllegalArgumentException(37,"Minute",0,59);  }  components[MINUTE]=minute;  return this;}  }
class C{  public HttpImageHandler(ContextStore store,String path){  super(store,path,true);  callbacks=new ArrayList<>();}  }
class C{  @Override public void onEnabled(final Context context,Intent intent){  super.onEnabled(context,intent);  Resources resources=context.getResources();  Preference.putBoolean(context,Constants.PreferenceFlag.DEVICE_ACTIVE,true);  String notifier=Preference.getString(context,Constants.PreferenceFlag.NOTIFIER_TYPE);  if (Constants.NOTIFIER_LOCAL.equals(notifier)) {    LocalNotification.startPolling(context);  }}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public boolean absolute(int row) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    boolean b;    if (this.rowData.size() == 0) {      b=false;    } else {      if (this.onInsertRow) {        this.onInsertRow=false;      }      if (this.doingUpdates) {        this.doingUpdates=false;      }      if (this.thisRow != null) {        this.thisRow.closeOpenStreams();      }      if (row == 0) {        beforeFirst();        b=false;      } else       if (row == 1) {        b=first();      } else       if (row == -1) {        b=last();      } else       if (row > this.rowData.size()) {        afterLast();        b=false;      } else {        if (row < 0) {          int newRowPosition=this.rowData.size() + row + 1;          if (newRowPosition <= 0) {            beforeFirst();            b=false;          } else {            b=absolute(newRowPosition);          }        } else {          row--;          this.rowData.setCurrentRow(row);          this.thisRow=this.rowData.getAt(row);          b=true;        }      }    }    setRowPositionValidity();    return b;  }}  }
class C{  private boolean doParseMoreData(final InputStream inputStream){  final int oldBestScanNumber=mBestScanNumber;  try {    int nextByte;    while (mParserState != NOT_A_JPEG && (nextByte=inputStream.read()) != -1) {      mBytesParsed++;switch (mParserState) {case READ_FIRST_JPEG_BYTE:        if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {          mParserState=READ_SECOND_JPEG_BYTE;        } else {          mParserState=NOT_A_JPEG;        }      break;case READ_SECOND_JPEG_BYTE:    if (nextByte == JfifUtil.MARKER_SOI) {      mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;    } else {      mParserState=NOT_A_JPEG;    }  break;case READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA:if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {  mParserState=READ_MARKER_SECOND_BYTE;}break;case READ_MARKER_SECOND_BYTE:if (nextByte == JfifUtil.MARKER_FIRST_BYTE) {mParserState=READ_MARKER_SECOND_BYTE;} else if (nextByte == JfifUtil.MARKER_ESCAPE_BYTE) {mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;} else {if (nextByte == JfifUtil.MARKER_SOS || nextByte == JfifUtil.MARKER_EOI) {newScanOrImageEndFound(mBytesParsed - 2);}if (doesMarkerStartSegment(nextByte)) {mParserState=READ_SIZE_FIRST_BYTE;} else {mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;}}break;case READ_SIZE_FIRST_BYTE:mParserState=READ_SIZE_SECOND_BYTE;break;case READ_SIZE_SECOND_BYTE:final int size=(mLastByteRead << 8) + nextByte;final int bytesToSkip=size - 2;StreamUtil.skip(inputStream,bytesToSkip);mBytesParsed+=bytesToSkip;mParserState=READ_MARKER_FIRST_BYTE_OR_ENTROPY_DATA;break;case NOT_A_JPEG:default :Preconditions.checkState(false);}mLastByteRead=nextByte;}} catch (IOException ioe) {Throwables.propagate(ioe);}return mParserState != NOT_A_JPEG && mBestScanNumber != oldBestScanNumber;}  }
class C{  public void testInitializePlugin(AbstractDosPlugin instance){  instance.initializePlugin();  PluginOptionContainer pluginOptions=instance.getPluginOptions();  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.NUMBER_OF_PARALLEL_THREADS));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.NUMBER_OF_REQUESTS_PER_THREAD));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.DELAY_BETWEEN_ATTACK_REQUESTS));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.DELAY_BETWEEN_CONTINUOUS_TESTPROBE_REQUES));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.SERVER_RECOVERY_TIME));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.AUTO_STOP));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.AUTO_STOP_TIME));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.NETWORK_STABILITY_TEST));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.NETWORK_STABILITY_TEST_DELAY_BETWEEN_TEST));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.NETWORK_STABILITY_TEST_NUMBER_OF_REQUESTS));  assertNotNull(pluginOptions.getByName(AbstractDosPlugin.MESSAGE));}  }
class C{  void bind(String jndiUrl,Hashtable<?,?> attributes,RMIServer rmiServer,boolean rebind) throws NamingException, MalformedURLException {  InitialContext ctx=new InitialContext(attributes);  if (rebind)   ctx.rebind(jndiUrl,rmiServer); else   ctx.bind(jndiUrl,rmiServer);  ctx.close();}  }
class C{  public boolean hasIndexTableSegments(){  return ((this.index_byte_count != 0) && (this.index_SID != 0));}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public boolean cancelPressed(){  if (factory != null) {    factory.cancel();    factory=null;    return (false);  } else {    return (true);  }}  }
class C{  protected boolean valid(){  int errors=0;  for (  CFAEdge e : outEdges.values()) {    if (!locations.contains(e.getSource())) {      logger.error("Locations do not contain " + e.getSource() + " from edge "+ e);      errors++;    }    if (!locations.contains(e.getTarget())) {      logger.error("Locations do not contain " + e.getTarget() + " from edge "+ e);      errors++;    }    if (!outEdges.get(e.getSource()).contains(e)) {      logger.error("Out-edges do not contain out-edge " + e + " with statement "+ e.getTransformer()+ " and hashcode "+ e.hashCode());      errors++;    }    if (!inEdges.get(e.getTarget()).contains(e)) {      logger.error("In-edges do not contain out-edge " + e + " with statement "+ e.getTransformer()+ " and hashcode "+ e.hashCode());      errors++;    }  }  for (  CFAEdge e : inEdges.values()) {    if (!locations.contains(e.getSource())) {      logger.error("Locations do not contain " + e.getSource() + " from edge "+ e);      errors++;    }    if (!locations.contains(e.getTarget())) {      logger.error("Locations do not contain " + e.getTarget() + " from edge "+ e);      errors++;    }    if (!outEdges.get(e.getSource()).contains(e)) {      logger.error("Out-edges do not contain in-edge " + e + " with statement "+ e.getTransformer()+ " and hashcode "+ e.hashCode());      errors++;    }    if (!inEdges.get(e.getTarget()).contains(e)) {      logger.error("In-edges do not contain in-edge " + e + " with statement "+ e.getTransformer()+ " and hashcode "+ e.hashCode());      errors++;    }  }  Set<Location> bbLocations=basicBlocks.keySet();  for (  CFAEdge e : bbOutEdges.values()) {    if (!bbLocations.contains(e.getSource())) {      logger.error("Basicblock locations do not contain " + e.getSource() + " from edge "+ e);      errors++;    }    if (!bbLocations.contains(e.getTarget())) {      logger.error("Basicblock locations do not contain " + e.getTarget() + " from edge "+ e);      errors++;    }    if (!bbInEdges.get(e.getTarget()).contains(e)) {      logger.error("BB in-edges do not contain out-edge " + e);      errors++;    }  }  for (  CFAEdge e : bbInEdges.values()) {    if (!bbLocations.contains(e.getSource())) {      logger.error("Basicblock locations do not contain " + e.getSource() + " from edge "+ e);      errors++;    }    if (!bbLocations.contains(e.getTarget())) {      logger.error("Basicblock locations do not contain " + e.getTarget() + " from edge "+ e);      errors++;    }    if (!bbOutEdges.get(e.getSource()).contains(e)) {      logger.error("BB out-edges do not contain in-edge " + e);      errors++;    }  }  if (errors != 0) {    logger.error(errors + " errors in CFG audit.");    return false;  } else {    return true;  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.isRecursiveAttrSet(this)) {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_XSLATTRSET_USED_ITSELF,new Object[]{m_qname.getLocalPart()}));  }  transformer.pushElemAttributeSet(this);  super.execute(transformer);  ElemAttribute attr=(ElemAttribute)getFirstChildElem();  while (null != attr) {    attr.execute(transformer);    attr=(ElemAttribute)attr.getNextSiblingElem();  }  transformer.popElemAttributeSet();}  }
class C{  public synchronized T removeNextHatchedIfAvailable(){  T o=getNextHatchedIfAvailable();  if (o == null)   return null;  orderList.removeFirst();  hatchMap.remove(o);  notifyAll();  return o;}  }
class C{  public ResultMatrixLatex(int cols,int rows){  super(cols,rows);}  }
class C{  public boolean createHTML(File file,boolean onlyTable,Language language,IHTMLExtension extension){  try {    Language lang=language;    if (lang == null)     lang=Language.getLoginLanguage();    Writer fw=new OutputStreamWriter(new FileOutputStream(file,false),Ini.getCharset());    return createHTML(new BufferedWriter(fw),onlyTable,lang,extension);  } catch (  FileNotFoundException fnfe) {    log.log(Level.SEVERE,"(f) - " + fnfe.toString());  }catch (  Exception e) {    log.log(Level.SEVERE,"(f)",e);  }  return false;}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public boolean cartesianToScreenPoint(double x,double y,double z,PointF result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WorldWindow","cartesianToScreenPoint","missingResult"));  }  this.computeViewingTransform(this.scratchProjection,this.scratchModelview);  this.scratchProjection.multiplyByMatrix(this.scratchModelview);  if (this.scratchProjection.project(x,y,z,this.viewport,this.scratchPoint)) {    result.x=(float)this.scratchPoint.x;    result.y=(float)(this.getHeight() - this.scratchPoint.y);    return true;  }  return false;}  }
class C{  public static boolean isSubset(Iterable<? extends Statement> model1,Iterable<? extends Statement> model2){  Set<Statement> set1=new LinkedHashSet<Statement>();  Iterators.addAll(model1.iterator(),set1);  Set<Statement> set2=new LinkedHashSet<Statement>();  Iterators.addAll(model2.iterator(),set2);  return isSubset(set1,set2);}  }
class C{  @Override public IntervalElement plus(AbstractDomainElement other){  IntervalElement op=(IntervalElement)other;  assert bitWidth == op.bitWidth;  MemoryRegion newRegion=region.join(op.region);  if (newRegion.isTop())   return getTop(bitWidth);  long l=this.left + op.left;  long r=this.right + op.right;  long u=this.left & op.left & ~l& ~(this.right & op.right & ~r);  long v=((this.left ^ op.left) | ~(this.left ^ l)) & (~this.right & ~op.right & r);  if ((u | v) < 0 || (u | v) > getTop(bitWidth).right) {    return getTop(bitWidth);  }  return new IntervalElement(newRegion,l,r,gcdStride(stride,op.stride),bitWidth);}  }
class C{  public void test4(){  final GridLayoutManager layoutManager=new GridLayoutManager(2,3,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(110,10));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(110,10));  panel.add(button,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field1,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  final DimensionInfo horizontalInfo=layoutManager.myHorizontalInfo;  assertEquals(GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_GROW,horizontalInfo.getCellSizePolicy(0));  assertEquals(GridConstraints.SIZEPOLICY_CAN_SHRINK,horizontalInfo.getCellSizePolicy(1));  assertEquals(GridConstraints.SIZEPOLICY_WANT_GROW,horizontalInfo.getCellSizePolicy(2));  assertEquals(220,preferredSize.width);  panel.setSize(new Dimension(500,panel.getHeight()));  panel.doLayout();  assertEquals(250,button.getWidth());  assertEquals(250,field1.getWidth());  assertEquals(250,field2.getWidth());}  }
class C{  public synchronized void stopBackgroundListening(){  if (watchTimer != null) {    watchTimer.cancel();    watchTimer=null;  }}  }
class C{  private Set unionIP(Set excluded,byte[] ip){  if (excluded.isEmpty()) {    if (ip == null) {      return excluded;    }    excluded.add(ip);    return excluded;  } else {    Set union=new HashSet();    Iterator it=excluded.iterator();    while (it.hasNext()) {      byte[] _excluded=(byte[])it.next();      union.addAll(unionIPRange(_excluded,ip));    }    return union;  }}  }
class C{  public static void run(BloggerService myService,String userName,String userPassword) throws ServiceException, IOException {  myService.setUserCredentials(userName,userPassword);  String blogId=getBlogId(myService);  feedUri=FEED_URI_BASE + "/" + blogId;  printUserBlogs(myService);  Entry draftPost=createPost(myService,"Snorkling in Aruba","<p>We had so much fun snorkling in Aruba<p>","Post author",userName,true);  System.out.println("Successfully created draft post: " + draftPost.getTitle().getPlainText());  Entry publicPost=createPost(myService,"Back from vacation","<p>I didn't want to leave Aruba, but I ran out of money :(<p>","Post author",userName,false);  System.out.println("Successfully created public post: " + publicPost.getTitle().getPlainText());  printAllPosts(myService);  printDateRangeQueryResults(myService,DateTime.parseDate("2007-04-04"),DateTime.parseDate("2007-04-06"));  draftPost.setTitle(new PlainTextConstruct("Swimming with the fish"));  draftPost.update();  System.out.println("Post's new title is \"" + draftPost.getTitle().getPlainText() + "\".\n");  publicPost=updatePostTitle(myService,publicPost,"The party's over");  System.out.println("Post's new title is \"" + publicPost.getTitle().getPlainText() + "\".\n");  System.out.println("Creating comment");  String selfLinkHref=publicPost.getSelfLink().getHref();  String[] tokens=selfLinkHref.split("/");  String postId=tokens[tokens.length - 1];  Entry comment=createComment(myService,postId,"Did you see any sharks?");  printAllComments(myService,postId);  System.out.println("Deleting comment");  deleteComment(myService,comment.getEditLink().getHref());  System.out.println("Deleting draft post");  draftPost.delete();  System.out.println("Deleting published post");  deletePost(myService,publicPost.getEditLink().getHref());}  }
class C{  public CUDA_ARRAY_DESCRIPTOR(){}  }
class C{  @Override public Lock lockOrFail() throws SailLockedException {  Lock lock=tryLock();  if (lock != null) {    return lock;  }  String requestedBy=getProcessName();  String lockedBy=getLockedBy();  if (lockedBy != null) {    throw new SailLockedException(lockedBy,requestedBy,this);  }  lock=tryLock();  if (lock != null) {    return lock;  }  throw new SailLockedException(requestedBy);}  }
class C{  public StringBuffer computeIndentation(int offset){  return computeIndentation(offset,false);}  }
class C{  BigInteger multiply(long v){  if (v == 0 || signum == 0)   return ZERO;  if (v == BigDecimal.INFLATED)   return multiply(BigInteger.valueOf(v));  int rsign=(v > 0 ? signum : -signum);  if (v < 0)   v=-v;  long dh=v >>> 32;  long dl=v & LONG_MASK;  int xlen=mag.length;  int[] value=mag;  int[] rmag=(dh == 0L) ? (new int[xlen + 1]) : (new int[xlen + 2]);  long carry=0;  int rstart=rmag.length - 1;  for (int i=xlen - 1; i >= 0; i--) {    long product=(value[i] & LONG_MASK) * dl + carry;    rmag[rstart--]=(int)product;    carry=product >>> 32;  }  rmag[rstart]=(int)carry;  if (dh != 0L) {    carry=0;    rstart=rmag.length - 2;    for (int i=xlen - 1; i >= 0; i--) {      long product=(value[i] & LONG_MASK) * dh + (rmag[rstart] & LONG_MASK) + carry;      rmag[rstart--]=(int)product;      carry=product >>> 32;    }    rmag[0]=(int)carry;  }  if (carry == 0L)   rmag=java.util.Arrays.copyOfRange(rmag,1,rmag.length);  return new BigInteger(rmag,rsign);}  }
class C{  public SQLTransientException(Throwable cause){  super(cause);}  }
class C{  public boolean othersUpdatesAreVisible(int type) throws SQLException {  return false;}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  public static void premain(String agentArgs,Instrumentation inst){  instrumentation=inst;}  }
class C{  public static Properties readProperties(InputStream in,Properties defaults) throws IOException {  Properties result=new Properties(defaults);  try {    result.load(in);  }  finally {    in.close();  }  return result;}  }
class C{  @Util public static List<BreadCrumb> createBreadCrumbs(String categoryId,Map<String,CategoryDef> catalog){  List<BreadCrumb> breadcrumbs=Lists.newArrayList();  CategoryDef current=catalog.get(categoryId);  while (current != null) {    breadcrumbs.add(createBreadCrumb(current));    current=catalog.get(current.parentId);  }  Collections.reverse(breadcrumbs);  return breadcrumbs;}  }
class C{  protected boolean hasOutstandingChanges(){  return (fDocumentNo.hasChanged() || fBankAccount_ID.hasChanged() || fCheckPayment.hasChanged()|| fCheckReceipt.hasChanged()|| fBPartner_ID.hasChanged()|| fAmtFrom.hasChanged()|| fAmtTo.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged());}  }
class C{  public int limit(){  return buff.limit();}  }
class C{  private final boolean isMethodInvoke(Object outputarg){  boolean isInvoke=false;  if (outputarg instanceof CIMArgument<?>[]) {    isInvoke=true;  }  return isInvoke;}  }
class C{  public void onItemClicked(int position){  final Fragment fragment=getSupportFragmentManager().findFragmentByTag(FRAGMENT_LIST_VIEW);  AbstractDataProvider.Data data=getDataProvider().getItem(position);  if (data.isPinned()) {    data.setPinned(false);    ((SwipeOnLongPressExampleFragment)fragment).notifyItemChanged(position);  }}  }
class C{  public void addModel(SimpleLinearRegression slr) throws Exception {  m_attributeIndex=slr.m_attributeIndex;  if (m_attributeIndex != -1) {    m_slope+=slr.m_slope;    m_intercept+=slr.m_intercept;  } else {    m_slope=slr.m_slope;    m_intercept=slr.m_intercept;  }}  }
class C{  public void onPackageModified(String packageName){}  }
class C{  public org.oscm.example.client.SessionServiceStub.DeletePlatformSessionResponseE deletePlatformSession(org.oscm.example.client.SessionServiceStub.DeletePlatformSessionE deletePlatformSession12) throws java.rmi.RemoteException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[6].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/deletePlatformSessionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deletePlatformSession12,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","deletePlatformSession")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.DeletePlatformSessionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.DeletePlatformSessionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public LoggingSessionInputBuffer(final SessionInputBuffer in,final Wire wire){  super();  this.in=in;  this.wire=wire;}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void processPoints(List<Coord> list){  for (  Coord coord : list) {    processPoint(coord);  }}  }
class C{  public V cloneValue(V v){  return v;}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public boolean hasSubregion(){  return hasExtension(Subregion.class);}  }
class C{  public static boolean checkCSSStatements(Collection<Pair<String,String>> statements){  for (  Pair<String,String> pair : statements) {    if (!checkCSSStatement(pair.getFirst(),pair.getSecond())) {      return false;    }  }  return true;}  }
class C{  protected boolean hasAggregateFunction(ExpressionNode expr){  return HasAggregateFunction.of(expr);}  }
class C{  public JPanelConfigDatabase(){  initComponents();  jbtnDbDriverLib.addActionListener(new DirectoryEvent(jtxtDbDriverLib));  jtxtDbDriverLib.getDocument().addDocumentListener(dirty);  jtxtDbDriver.getDocument().addDocumentListener(dirty);  jtxtDbURL.getDocument().addDocumentListener(dirty);  jtxtDbPassword.getDocument().addDocumentListener(dirty);  jtxtDbUser.getDocument().addDocumentListener(dirty);  jcboDBDriver.addActionListener(dirty);  jcboDBDriver.addItem("Apache Derby Embedded");  jcboDBDriver.addItem("MySQL");  jcboDBDriver.addItem("PostgreSQL");}  }
class C{  public Ingredient add(Ingredient... ingredients){  equivalents.addAll(Arrays.asList(ingredients));  return this;}  }
class C{  public void testRename() throws Exception {  Document doc=DocumentHelper.createDocument();  Element root=doc.addElement("foo");  assertEquals("named correctly","foo",root.getName());  root.setName("bar");  assertEquals("named correctly","bar",root.getName());  QName xyz=root.getQName("xyz");  root.setQName(xyz);  assertEquals("QNamed correctly",xyz,root.getQName());}  }
class C{  public WebSocketPacket decode(final ByteBuffer buffer,ByteBuffer... exbuffers){  final boolean debug=this.debugable;  if (debug) {    int remain=buffer.remaining();    if (exbuffers != null) {      for (      ByteBuffer b : exbuffers) {        remain+=b == null ? 0 : b.remaining();      }    }    logger.log(Level.FINEST,"read web socket message's length = " + remain);  }  if (buffer.remaining() < 2)   return null;  byte opcode=buffer.get();  final boolean last=(opcode & 0b1000000) != 0;  final boolean checkrsv=false;  if (checkrsv && (opcode & 0b01110000) != 0) {    if (debug)     logger.log(Level.FINE,"rsv1 rsv2 rsv3 must be 0, but not (" + opcode + ")");    return null;  }  final boolean control=(opcode & 0x08) == 0x08;  FrameType type=FrameType.valueOf(opcode & 0xf);  if (type == FrameType.CLOSE) {    if (debug)     logger.log(Level.FINEST," receive close command from websocket client");    return null;  }  byte lengthCode=buffer.get();  final Masker masker=new Masker(buffer,exbuffers);  final boolean masked=(lengthCode & 0x80) == 0x80;  if (masked)   lengthCode^=0x80;  int length;  if (lengthCode <= 125) {    length=lengthCode;  } else {    if (control) {      if (debug)       logger.log(Level.FINE," receive control command from websocket client");      return null;    }    final int lengthBytes=lengthCode == 126 ? 2 : 8;    if (buffer.remaining() < lengthBytes) {      if (debug)       logger.log(Level.FINE," read illegal message length from websocket, expect " + lengthBytes + " but "+ buffer.remaining());      return null;    }    length=toInt(masker.unmask(lengthBytes));  }  if (masked) {    if (buffer.remaining() < Masker.MASK_SIZE) {      if (debug)       logger.log(Level.FINE," read illegal masker length from websocket, expect " + Masker.MASK_SIZE + " but "+ buffer.remaining());      return null;    }    masker.readMask();  }  if (masker.remaining() < length) {    if (debug)     logger.log(Level.FINE," read illegal remaining length from websocket, expect " + length + " but "+ masker.remaining());    return null;  }  final byte[] data=masker.unmask(length);  if (data.length != length) {    if (debug)     logger.log(Level.FINE," read illegal unmask length from websocket, expect " + length + " but "+ data.length);    return null;  }  return new WebSocketPacket(type,data,last);}  }
class C{  private static int CallNonvirtualIntMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualIntMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Int,true);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public boolean removeUnusedVariables(TestCase t){  List<Integer> toDelete=new ArrayList<Integer>();  boolean hasDeleted=false;  int num=0;  for (  Statement s : t) {    if (s instanceof PrimitiveStatement) {      VariableReference var=s.getReturnValue();      if (!t.hasReferences(var)) {        toDelete.add(num);        hasDeleted=true;      }    }    num++;  }  Collections.sort(toDelete,Collections.reverseOrder());  for (  Integer position : toDelete) {    t.remove(position);  }  return hasDeleted;}  }
class C{  private void disableOperationButtons(){  btnOr.setEnabled(false);  btnAnd.setEnabled(false);  btnRightParen.setEnabled(false);}  }
class C{  Path baseDir(){  return baseDir;}  }
class C{  private static void fillExceptionTrace(StringBuffer sb,String hdr,Throwable thrown){  boolean firstError=hdr.length() == 0;  sb.append(hdr).append(thrown.toString());  if (thrown instanceof SQLException) {    SQLException ex=(SQLException)thrown;    sb.append("; State=").append(ex.getSQLState()).append("; ErrorCode=").append(ex.getErrorCode());  }  sb.append(NL);  StackTraceElement[] trace=thrown.getStackTrace();  boolean adempiereTrace=false;  int adempiereTraceNo=0;  for (int i=0; i < trace.length; i++) {    adempiereTrace=trace[i].getClassName().startsWith("org.compiere.");    if (thrown instanceof ServerException || adempiereTrace) {      if (adempiereTrace)       sb.append("\tat ").append(trace[i]).append(NL);    } else     if (i > 20 || (i > 10 && adempiereTraceNo > 8))     break; else     sb.append("\tat ").append(trace[i]).append(NL);    if (adempiereTrace)     adempiereTraceNo++;  }  Throwable cause=thrown.getCause();  if (cause != null)   fillExceptionTrace(sb,"caused by: ",cause);}  }
class C{  protected void changeTurnIndex(int index){  game.setTurnIndex(index);}  }
class C{  public static Animator scaleBy(float scaleX,float scaleY,float duration){  return scaleBy(scaleX,scaleY,duration,null);}  }
class C{  public static BinaryMessage deinterleaveData(BinaryMessage message,int start,int end){  return deinterleave(DATA_DEINTERLEAVE,message,start,end);}  }
class C{  public void error(String msg,Object[] args){  String themsg=XSLMessages.createMessage(msg,args);  throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{themsg}));}  }
class C{  private void insertGenres(SQLiteDatabase db){  db.insert(Tables.GENRES,null,new Genre.Builder().id(28).name("Action").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(12).name("Adventure").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(16).name("Animation").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(35).name("Comedy").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(80).name("Crime").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(99).name("Documentary").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(18).name("Drama").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10751).name("Family").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(14).name("Fantasy").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10765).name("Foreign").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(36).name("History").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(27).name("Horror").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10402).name("Music").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(9648).name("Mystery").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10749).name("Romance").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(878).name("Science Fiction").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10770).name("TV Movie").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(53).name("Thriller").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(10752).name("War").build());  db.insert(Tables.GENRES,null,new Genre.Builder().id(37).name("Western").build());}  }
class C{  public boolean isTriggered(){  return checkbox.isSelected();}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  @Override public TransferResult<V,S> visitConditionalNot(ConditionalNotNode n,TransferInput<V,S> p){  TransferResult<V,S> result=super.visitConditionalNot(n,p);  S thenStore=result.getThenStore();  S elseStore=result.getElseStore();  return new ConditionalTransferResult<>(result.getResultValue(),elseStore,thenStore);}  }
class C{  private static String unsignedToString(final long value){  if (value >= 0) {    return Long.toString(value);  } else {    return BigInteger.valueOf(value & 0x7FFFFFFFFFFFFFFFL).setBit(63).toString();  }}  }
class C{  public GroovyClassLoader(){  this(Thread.currentThread().getContextClassLoader());}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  protected void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(CSS_RANGEMARKER)) {    final CSSClass rcls=new CSSClass(this,CSS_RANGEMARKER);    final StyleLibrary style=context.getStyleLibrary();    rcls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION_ACTIVE));    rcls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION_ACTIVE));    svgp.addCSSClassOrLogError(rcls);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GENERATE_PATH___LANGUAGE_1:    return LANGUAGE_1_EDEFAULT == null ? language_1 != null : !LANGUAGE_1_EDEFAULT.equals(language_1);case UmplePackage.GENERATE_PATH___OUTPUT_1:  return OUTPUT_1_EDEFAULT == null ? output_1 != null : !OUTPUT_1_EDEFAULT.equals(output_1);case UmplePackage.GENERATE_PATH___OVERRIDE_1:return OVERRIDE_1_EDEFAULT == null ? override_1 != null : !OVERRIDE_1_EDEFAULT.equals(override_1);}return super.eIsSet(featureID);}  }
class C{  public boolean isIs(){  return is;}  }
class C{  @NotNull public static String parseRelativeDirectory(@NotNull String s) throws SvnBindException {  s=s.trim();  int length=s.length();  String result;  if (isUnescapedQuote(s,length - 1)) {    int index=lastUnescapedIndexOf(s,length - 1,'"');    assertIndex(s,index,"Could not find start quote");    result=s.substring(index + 1,length - 1);  } else {    int index=lastUnescapedIndexOf(s,length,' ');    assertIndex(s,index,"Could not find separating space");    result=s.substring(index + 1);  }  return unescape(result);}  }
class C{  private String attributeValue(Node.JspAttribute attr,boolean encode,Class expectedType){  String v=attr.getValue();  if (!attr.isNamedAttribute() && (v == null))   return "";  if (attr.isExpression()) {    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(" + v + "), request.getCharacterEncoding())";    }    return v;  } else   if (attr.isELInterpreterInput()) {    v=JspUtil.interpreterCall(this.isTagFile,v,expectedType,attr.getEL().getMapName(),null,null,null);    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(" + v + ", request.getCharacterEncoding())";    }    return v;  } else   if (attr.isNamedAttribute()) {    return attr.getNamedAttributeNode().getTemporaryVariableName();  } else {    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(" + quote(v) + ", request.getCharacterEncoding())";    }    return quote(v);  }}  }
class C{  public MutableDateTime roundCeiling(){  iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));  return iInstant;}  }
class C{  public OrSpecification(final Specification<T> spec1,final Specification<T> spec2){  this.spec1=spec1;  this.spec2=spec2;}  }
class C{  public static boolean isNormalized(final String text){  boolean ret;  if (text == null) {    ret=true;  } else {    final PrefixExtractor extractor=new PrefixExtractor(text);    if (extractor.extractNounSingular() || extractor.extractNounPlural()) {      ret=false;    } else {      ret=true;    }  }  return ret;}  }
class C{  public center addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void testExactPhraseVersusBooleanAndWithHoles() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.add(t1,0);  builder.add(t2,2);  PhraseQuery q1=builder.build();  BooleanQuery.Builder q2=new BooleanQuery.Builder();  q2.add(new TermQuery(t1),Occur.MUST);  q2.add(new TermQuery(t2),Occur.MUST);  assertSubsetOf(q1,q2.build());}  }
class C{  private UninitializedMessageException newUninitializedMessageException(MessageType message){  if (message instanceof AbstractMessageLite) {    return ((AbstractMessageLite)message).newUninitializedMessageException();  }  return new UninitializedMessageException(message);}  }
class C{  public SendableBeanEvent(Map<String,Object> mapToSend,Class beanClass,String eventTypeName,long timestamp,long scheduleSlot){  super(timestamp,scheduleSlot);  try {    Map<String,BeanEventPropertyWriter> writers=writersMap.get(beanClass);    if (writers == null) {      Set<WriteablePropertyDescriptor> props=PropertyHelper.getWritableProperties(beanClass);      writers=new HashMap<String,BeanEventPropertyWriter>();      writersMap.put(beanClass,writers);      FastClass fastClass=FastClass.create(Thread.currentThread().getContextClassLoader(),beanClass);      for (      WriteablePropertyDescriptor prop : props) {        FastMethod writerMethod=fastClass.getMethod(prop.getWriteMethod());        writers.put(prop.getPropertyName(),new BeanEventPropertyWriter(beanClass,writerMethod));      }    }    beanToSend=beanClass.newInstance();    for (    Map.Entry<String,Object> entry : mapToSend.entrySet()) {      BeanEventPropertyWriter writer=writers.get(entry.getKey());      if (writer != null) {        writer.writeValue(entry.getValue(),beanToSend);      }    }  } catch (  Exception e) {    throw new EPException("Cannot populate bean instance",e);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthViewportUI();}  }
class C{  public AuthenticationException(String message,Throwable e){  super(message,e);}  }
class C{  private void handleWorksheetSelection(){  int selected=worksheetListBox.getSelectedIndex();  if (worksheetEntries != null && selected >= 0) {    WorksheetEntry entry=worksheetEntries.get(selected);    cellsFeedUrlField.setText(entry.getCellFeedUrl().toExternalForm());    listFeedUrlField.setText(entry.getListFeedUrl().toExternalForm());  }}  }
class C{  @Override public int proceduralInterval(){  return 4;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @Override protected void recalculate(final MutableShoppingCart shoppingCart){  cartRepository.storeShoppingCart(shoppingCart);  super.recalculate(shoppingCart);}  }
class C{  private void extractWithRadiusOne(BufferedImage image){  WritableRaster raster=ImageUtils.getGrayscaleImage(image).getRaster();  int[] pixel=new int[9];  int[] pattern=new int[8];  for (int x=0; x < raster.getWidth() - 2; x++) {    for (int y=0; y < raster.getHeight() - 2; y++) {      Arrays.fill(pattern,0);      raster.getPixels(x,y,3,3,pixel);      if (pixel[0] >= pixel[4])       pattern[0]=1;      if (pixel[1] >= pixel[4])       pattern[1]=1;      if (pixel[2] >= pixel[4])       pattern[2]=1;      if (pixel[5] >= pixel[4])       pattern[3]=1;      if (pixel[8] >= pixel[4])       pattern[4]=1;      if (pixel[7] >= pixel[4])       pattern[5]=1;      if (pixel[6] >= pixel[4])       pattern[6]=1;      if (pixel[3] >= pixel[4])       pattern[7]=1;      histogram[getBin(pattern)]++;    }  }  double max=0;  for (int i=0; i < histogram.length; i++) {    max=Math.max(histogram[i],max);  }  for (int i=0; i < histogram.length; i++) {    histogram[i]=Math.floor((histogram[i] / max) * 127);  }}  }
class C{  @Override public void checkUnregister(ObjectName name){  checkAccess(AccessType.UNREGISTER,null);}  }
class C{  public Bitmap pop(long timeout,TimeUnit unit) throws InterruptedException {  checkNotMainThread();  ensureScheduled();  return finished.poll(timeout,unit);}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static OMRaster read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  private void readin(){  try {    byte[] fileStuff=new byte[(int)f.length()];    FileInputStream in=new FileInputStream(f);    in.read(fileStuff);    fileStuffString=new String(fileStuff);    int startWidth=fileStuffString.indexOf("width") + 6;    int endWidth=fileStuffString.indexOf(System.getProperty("line.separator"),startWidth);    int startHeight=fileStuffString.indexOf("height") + 7;    int endHeight=fileStuffString.indexOf(System.getProperty("line.separator"),startHeight);    int startBits=fileStuffString.indexOf("0x");    int endBits=fileStuffString.indexOf("};");    width=Short.parseShort(fileStuffString.substring(startWidth,endWidth));    height=Short.parseShort(fileStuffString.substring(startHeight,endHeight));    paddedWidth=(int)Math.ceil((float)width / 8.0) * 8;    int num_bytes=paddedWidth * height;    pict_size=(int)height * (int)Math.ceil((float)width / 8.0);    bits=new byte[num_bytes];    setBits(fileStuffString.substring(startBits,endBits));    in.close();  } catch (  IOException e3) {    System.out.println("XBMFile: Error reading file.");  }}  }
class C{  public X5(){  super("X5",1);}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  CSVReadUnknownSizeTest t=new CSVReadUnknownSizeTest();  t.setUpBase();  t.setUp();  t.testCSVReadUnknownSizeSplitRewrites();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Quantity) {    if (CoreUtils.nullSafeComparator(((Quantity)objectToCompare).getBigIntegerValue(),this.getBigIntegerValue()) == 0)     return true;  }  return false;}  }
class C{  private GZIPCodec(){}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static TimeOfDay fromMillisOfDay(long millisOfDay){  return fromMillisOfDay(millisOfDay,null);}  }
class C{  public static Number sign(Number a){  if (isFloatingPoint(a)) {    return Math.signum(a.doubleValue());  } else {    return Long.signum(a.longValue());  }}  }
class C{  private void _serializeDateTime(DateTime dateTime,StringBuilder sb){  sb.append(StringUtil.escapeJS(JSONDateFormat.format(dateTime,null),'"',charsetEncoder));}  }
class C{  public void followContentChangedDelayed(){  if (!mHasContentChangeMessage) {    mHasContentChangeMessage=true;    sendMessageDelayed(obtainMessage(FOCUS_AFTER_CONTENT_CHANGED),FOCUS_AFTER_CONTENT_CHANGED_DELAY);  }}  }
class C{  private static Instruction generateValueProducingTypeCheck(Instruction s,IR ir,Operand RHSobj,TypeReference LHStype,Operand RHStib,RegisterOperand result){  if (LHStype.isClassType()) {    RVMClass LHSclass=(RVMClass)LHStype.peekType();    if (LHSclass != null && LHSclass.isResolved()) {      if (LHSclass.isInterface()) {        int interfaceIndex=LHSclass.getDoesImplementIndex();        int interfaceMask=LHSclass.getDoesImplementBitMask();        RegisterOperand doesImpl=InsertUnary(s,ir,GET_DOES_IMPLEMENT_FROM_TIB,TypeReference.IntArray,RHStib);        RegisterOperand entry=InsertLoadOffset(s,ir,INT_LOAD,TypeReference.Int,doesImpl,Offset.fromIntZeroExtend(interfaceIndex << 2),new LocationOperand(TypeReference.Int),TG());        RegisterOperand bit=insertBinary(s,ir,INT_AND,TypeReference.Int,entry,IC(interfaceMask));        s.insertBefore(BooleanCmp.create(BOOLEAN_CMP_ADDR,result,bit,AC(Address.zero()),ConditionOperand.NOT_EQUAL(),new BranchProfileOperand()));        if (DynamicTypeCheck.MIN_DOES_IMPLEMENT_SIZE <= interfaceIndex) {          RegisterOperand doesImplLength=InsertGuardedUnary(s,ir,ARRAYLENGTH,TypeReference.Int,doesImpl.copy(),TG());          RegisterOperand boundscheck=ir.regpool.makeTempInt();          s.insertBefore(BooleanCmp.create(BOOLEAN_CMP_ADDR,boundscheck,doesImplLength,AC(Address.fromIntSignExtend(interfaceIndex)),ConditionOperand.GREATER(),new BranchProfileOperand()));          s.insertBefore(Binary.create(INT_AND,result.copyD2D(),result.copyD2U(),boundscheck.copyD2U()));        }        Instruction continueAt=s.prevInstructionInCodeOrder();        s.remove();        return continueAt;      } else {        if (LHSclass.isFinal()) {          Operand classTIB=getTIB(s,ir,LHSclass);          BooleanCmp.mutate(s,BOOLEAN_CMP_ADDR,result,RHStib,classTIB,ConditionOperand.EQUAL(),new BranchProfileOperand());          return s.prevInstructionInCodeOrder();        } else {          int LHSDepth=LHSclass.getTypeDepth();          int LHSId=LHSclass.getId();          RegisterOperand superclassIds=InsertUnary(s,ir,GET_SUPERCLASS_IDS_FROM_TIB,TypeReference.ShortArray,RHStib);          RegisterOperand refCandidate=InsertLoadOffset(s,ir,USHORT_LOAD,TypeReference.Short,superclassIds,Offset.fromIntZeroExtend(LHSDepth << 1),new LocationOperand(TypeReference.Short),TG());          s.insertBefore(BooleanCmp.create(BOOLEAN_CMP_ADDR,result,refCandidate,AC(Address.fromIntZeroExtend(LHSId)),ConditionOperand.EQUAL(),new BranchProfileOperand()));          if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {            RegisterOperand superclassIdsLength=InsertGuardedUnary(s,ir,ARRAYLENGTH,TypeReference.Int,superclassIds.copyD2U(),TG());            RegisterOperand boundscheck=ir.regpool.makeTempInt();            s.insertBefore(BooleanCmp.create(BOOLEAN_CMP_ADDR,boundscheck,superclassIdsLength,AC(Address.fromIntSignExtend(LHSDepth)),ConditionOperand.GREATER(),new BranchProfileOperand()));            s.insertBefore(Binary.create(INT_AND,result.copyD2D(),result.copyD2U(),boundscheck.copyD2U()));          }          Instruction continueAt=s.prevInstructionInCodeOrder();          s.remove();          return continueAt;        }      }    } else {      RVMMethod target=Entrypoints.instanceOfMethod;      Call.mutate2(s,CALL,result,AC(target.getOffset()),MethodOperand.STATIC(target),RHSobj,IC(LHStype.getId()));      return callHelper(s,ir);    }  }  if (LHStype.isArrayType()) {    RVMArray LHSArray=(RVMArray)LHStype.peekType();    if (LHSArray != null) {      RVMType innermostElementType=LHSArray.getInnermostElementType();      if (innermostElementType.isPrimitiveType() || innermostElementType.isUnboxedType() || (innermostElementType.asClass().isResolved() && innermostElementType.asClass().isFinal())) {        Operand classTIB=getTIB(s,ir,LHSArray);        BooleanCmp.mutate(s,BOOLEAN_CMP_ADDR,result,RHStib,classTIB,ConditionOperand.EQUAL(),new BranchProfileOperand());        return s;      }    }    return convertToBranchingTypeCheck(s,ir,RHSobj,LHStype,RHStib,result);  }  OptimizingCompilerException.UNREACHABLE();  return null;}  }
class C{  public static double intersectRayTriangle(Vector3d origin,Vector3d dir,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon){  return intersectRayTriangle(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon);}  }
class C{  public void moveCurrentToOrig(){  for (int i=0; i < numCols; i++) {    if (getColUpdated(i) == true) {      origVals[i]=currentVals[i];      currentVals[i]=null;      colsChanged.clear(i);    }  }  updated=false;}  }
class C{  private void createButtons(){  final GridLayout gridLayout=new GridLayout(this.items.size() / 2,true);  gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;  this.setLayout(gridLayout);  for (  final LauncherItem item : this.items) {    createItem(item);  }}  }
class C{  public boolean isLoadingThisUrl(String url){  return getIdentityUrl().equals(generateIdentityUrl(url));}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkTabDirectoryEntry that=(MkTabDirectoryEntry)o;  if (knnDistances.length != that.knnDistances.length) {    return false;  }  return !(knnDistances != null ? !knnDistances.equals(that.knnDistances) : that.knnDistances != null);}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof CertificateExtensions))   return false;  Collection<Extension> otherC=((CertificateExtensions)other).getAllExtensions();  Object[] objs=otherC.toArray();  int len=objs.length;  if (len != map.size())   return false;  Extension otherExt, thisExt;  String key=null;  for (int i=0; i < len; i++) {    if (objs[i] instanceof CertAttrSet)     key=((CertAttrSet)objs[i]).getName();    otherExt=(Extension)objs[i];    if (key == null)     key=otherExt.getExtensionId().toString();    thisExt=map.get(key);    if (thisExt == null)     return false;    if (!thisExt.equals(otherExt))     return false;  }  return this.getUnparseableExtensions().equals(((CertificateExtensions)other).getUnparseableExtensions());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public Type type(){  return Type.STRING;}  }
class C{  public static boolean contains(SequenceNameLocus current,String sequence,int pos){  if (current.getStart() < 0 || current.getEnd() < 0) {    throw new IllegalArgumentException();  }  return current.getSequenceName().equals(sequence) && pos >= current.getStart() && pos < current.getEnd();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.BINARY_BITWISE_EXPRESSION__OP:setOp((BinaryBitwiseOperator)newValue);return;case N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean checkFile(final String fileName){  return checkFile(new File(fileName));}  }
class C{  public boolean isBeforeFirst() throws SQLException {  if (cursorPos == 0 && numRows > 0) {    return true;  } else {    return false;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getVideoFrame().getVolume());}  }
class C{  final void runWorker(Worker w){  Thread wt=Thread.currentThread();  Runnable task=w.firstTask;  w.firstTask=null;  w.unlock();  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();      try {        beforeExecute(wt,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  @Override public OauthAccessTokenDto createOauthAccessTokenByGrantCode(String code,String clientId,String redirectUri) throws AccessDeniedException {  return verifyRedirectUri(clientId,redirectUri).flatMap(null).orElseThrow(null);}  }
class C{  public final CC gapTop(String boundsSize){  ver.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  public InputSource resolveEntity(String publicID,String systemID) throws SAXException {  InputSource local=null;  String url=(String)getEntities().get(publicID);  if (url != null) {    URL realUrl=GeneralUtil.getURLFromClasspath(this,url);    InputStream is=null;    try {      is=realUrl.openStream();    } catch (    IOException e) {      e.printStackTrace();    }    if (is == null) {      XRLog.xmlEntities(Level.WARNING,"Can't find a local reference for Entity for public ID: " + publicID + " and expected to. The local URL should be: "+ url+ ". Not finding "+ "this probably means a CLASSPATH configuration problem; this resource "+ "should be included with the renderer and so not finding it means it is "+ "not on the CLASSPATH, and should be. Will let parser use the default in "+ "this case.");    }    local=new InputSource(is);    local.setSystemId(realUrl.toExternalForm());    XRLog.xmlEntities(Level.FINE,"Entity public: " + publicID + " -> "+ url+ (local == null ? ", NOT FOUND" : " (local)"));  } else {    XRLog.xmlEntities("Entity public: " + publicID + ", no local mapping. Parser will probably pull from network.");  }  return local;}  }
class C{  @Deprecated public static void addWord(Context context,String word,int frequency,int localeType){  if (localeType != LOCALE_TYPE_ALL && localeType != LOCALE_TYPE_CURRENT) {    return;  }  final Locale locale;  if (localeType == LOCALE_TYPE_CURRENT) {    locale=Locale.getDefault();  } else {    locale=null;  }  addWord(context,word,frequency,null,locale);}  }
class C{  public static Display find(String value){  return enums.find(value);}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public synchronized Integer addNotification(String type,String message,Object userData,Date date) throws java.lang.IllegalArgumentException {  return (addNotification(type,message,userData,date,0,0));}  }
class C{  String startTranslate(Map<Object,Object> translation){  if (translateThread != null) {    translateThread.stopNow();  }  translateThread=new TranslateThread(translation);  translateThread.setDaemon(true);  translateThread.start();  return translateThread.getFileName();}  }
class C{  public JSONObject optJSONObject(int index){  Object o=opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public boolean removeSubTask(int taskId,int subTaskIndex) throws SecurityException {  try {    return ActivityManagerNative.getDefault().removeSubTask(taskId,subTaskIndex);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public void crashAlert(Stage stage,String crashMessage){  messageLabel.setText("Unfortunately, we screwed up and the app crashed. Sorry about that!");  detailsLabel.setText(crashMessage);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public boolean isMatch(String path){  return _pattern.matcher(path).matches();}  }
class C{  public Population preBreedingExchangePopulation(final EvolutionState state){  return state.population;}  }
class C{  public NerdyPID(double p,double i,double d){  setPID(p,i,d);}  }
class C{  private int mapTypeParameterIndex(IType[] path,int pathIndex,int paramIndex) throws JavaModelException, ArrayIndexOutOfBoundsException {  if (pathIndex == 0)   return paramIndex;  IType subType=path[pathIndex];  IType superType=path[pathIndex - 1];  String superSignature=findMatchingSuperTypeSignature(subType,superType);  ITypeParameter param=subType.getTypeParameters()[paramIndex];  int index=findMatchingTypeArgumentIndex(superSignature,param.getElementName());  if (index == -1) {    return -1;  }  return mapTypeParameterIndex(path,pathIndex - 1,index);}  }
class C{  private static Properties appendOptionalPropertyFileProperties(final Properties props){  final URL url=getPropertyFileURL(retrievePropertyFile());  final Properties appendedProps=new Properties();  appendedProps.putAll(props);  if (url != null) {    InputStream in=null;    try {      in=url.openStream();      final Properties agentPropertyFileProperties=new Properties();      agentPropertyFileProperties.load(in);      for (      final Object key : agentPropertyFileProperties.keySet()) {        if (props.getProperty(key.toString()) == null) {          appendedProps.setProperty(key.toString(),agentPropertyFileProperties.getProperty(key.toString()));        }      }    } catch (    IOException e) {      throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(url.toString()),e);    } finally {      IOUtils.close(in);    }  }  for (  final Object propSuffix : props.keySet()) {    final String key=SYSTEM_PROPERTY_PREFIX + propSuffix;    final String value=System.getProperty(key);    if (value != null) {      appendedProps.put(key,value);    }  }  return appendedProps;}  }
class C{  public void rename(SchemaObject obj,String newName){  int type=obj.getType();  HashMap<String,SchemaObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  map.remove(obj.getName());  freeUniqueName(obj.getName());  obj.rename(newName);  map.put(newName,obj);  freeUniqueName(newName);}  }
class C{  public AnyType createAnyType(){  AnyTypeImpl anyType=new AnyTypeImpl();  return anyType;}  }
class C{  protected void processComponentKeyEvent(KeyEvent e){}  }
class C{  void pop(){  if (!stack.isEmpty()) {    DirectoryNode node=stack.pop();    try {      node.stream().close();    } catch (    IOException ignore) {    }  }}  }
class C{  public boolean shouldTransform(String className){  if (!Properties.TT)   return false;switch (Properties.TT_SCOPE) {case ALL:    logger.info("Allowing transformation of " + className);  return true;case TARGET:if (className.equals(Properties.TARGET_CLASS) || className.startsWith(Properties.TARGET_CLASS + "$")) return true;break;case PREFIX:if (className.startsWith(Properties.PROJECT_PREFIX)) return true;}logger.info("Preventing transformation of " + className);return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (stateName_1: ");  result.append(stateName_1);  result.append(')');  return result.toString();}  }
class C{  public double evaluateClustering(Database db,Relation<? extends O> rel,DistanceQuery<O> dq,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  int ignorednoise=0, w=0;  for (  Cluster<?> cluster : clusters) {    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        ignorednoise+=cluster.size();      continue;case TREAT_NOISE_AS_SINGLETONS:    continue;case MERGE_NOISE:  break;}}w+=(cluster.size() * (cluster.size() - 1)) >>> 1;}double theta=0.;double min=0, max=0;if (w <= (rel.size() * (rel.size() - 1L)) >>> 2) {DoubleHeap maxDists=new DoubleMinHeap(w);DoubleHeap minDists=new DoubleMaxHeap(w);FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Processing clusters for C-Index",clusters.size(),LOG) : null;for (int i=0; i < clusters.size(); i++) {Cluster<?> cluster=clusters.get(i);if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:  LOG.incrementProcessed(prog);continue;case TREAT_NOISE_AS_SINGLETONS:processSingleton(cluster,rel,dq,maxDists,minDists,w);LOG.incrementProcessed(prog);continue;case MERGE_NOISE:break;}}theta+=processCluster(cluster,clusters,i,dq,maxDists,minDists,w);LOG.incrementProcessed(prog);}LOG.ensureCompleted(prog);assert (minDists.size() == w);assert (maxDists.size() == w);for (DoubleHeap.UnsortedIter it=minDists.unsortedIter(); it.valid(); it.advance()) {min+=it.get();}for (DoubleHeap.UnsortedIter it=maxDists.unsortedIter(); it.valid(); it.advance()) {max+=it.get();}assert (max >= min);} else {theta=min=max=0;}double cIndex=(max > min) ? (theta - min) / (max - min) : 0.;if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".c-index.noise-handling",noiseOption.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".c-index.ignored",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".c-index",cIndex));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("C-Index",cIndex,0.,1.,0.,true);db.getHierarchy().resultChanged(ev);return cIndex;}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public void indentationFunction(){  if (true) {    if (false) {      if (true) {        Log.i("Coding Guidelines","We have the");        Log.i("Coding Guidelines","same indentation");      }    }  }}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,int units,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkArc.write(latPoint,lonPoint,radius,units,-1,s,e,properties,dos);}  }
class C{  public boolean satisfies(Set<Clause> clauses){  for (  Clause c : clauses) {    if (!Boolean.TRUE.equals(determineValue(c))) {      return false;    }  }  return true;}  }
class C{  private synchronized void destroyScheduler(){  if (!poolInitializer.get().isShutdown()) {    poolInitializer.get().shutdown();    if (future != null) {      future.cancel(true);    }    try {      while (!poolInitializer.get().awaitTermination(5,TimeUnit.SECONDS)) {        LOG.debug("Termination awaited: {}",name);        poolInitializer.get().shutdownNow();      }    } catch (    final InterruptedException e) {      LOG.debug("Interrupted Exception occured during scheduler destroy",e);      poolInitializer.get().shutdownNow();      Thread.currentThread().interrupt();    } finally {      LOG.debug("[STOP] Scheduler terminated successfully! {}",name);    }  }}  }
class C{  public T removeLast(){  T o=_tail;  T prev=(T)o.getPrevious();  o.setPrevious(null);  if (null != prev) {    prev.setNext(null);  }  _tail=prev;  if (--_size == 0) {    _head=null;  }  return o;}  }
class C{  public static long[][] preprocessJenkins(final BitVector bv,final long seed){  final long length=bv.length();  final int wordLength=(int)(length / (Long.SIZE * 3)) + 1;  final long aa[]=new long[wordLength], bb[]=new long[wordLength], cc[]=new long[wordLength];  long a, b, c, from=0;  if (aa.length == 0)   return new long[3][0];  int i=0;  a=b=seed;  c=ARBITRARY_BITS;  aa[i]=a;  bb[i]=b;  cc[i]=c;  i++;  while (length - from >= Long.SIZE * 3) {    a+=bv.getLong(from,from + Long.SIZE);    b+=bv.getLong(from + Long.SIZE,from + 2 * Long.SIZE);    c+=bv.getLong(from + 2 * Long.SIZE,from + 3 * Long.SIZE);    a-=b;    a-=c;    a^=(c >>> 43);    b-=c;    b-=a;    b^=(a << 9);    c-=a;    c-=b;    c^=(b >>> 8);    a-=b;    a-=c;    a^=(c >>> 38);    b-=c;    b-=a;    b^=(a << 23);    c-=a;    c-=b;    c^=(b >>> 5);    a-=b;    a-=c;    a^=(c >>> 35);    b-=c;    b-=a;    b^=(a << 49);    c-=a;    c-=b;    c^=(b >>> 11);    a-=b;    a-=c;    a^=(c >>> 12);    b-=c;    b-=a;    b^=(a << 18);    c-=a;    c-=b;    c^=(b >>> 22);    from+=3 * Long.SIZE;    aa[i]=a;    bb[i]=b;    cc[i]=c;    i++;  }  return new long[][]{aa,bb,cc};}  }
class C{  public void testDifferentRange(){  ((MergeInfrequentNominalValues)m_Filter).setMinimumFrequency(5);  ((MergeInfrequentNominalValues)m_Filter).setInvertSelection(true);  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  int mergedIndex=-1;  for (int i=0; i < result.numInstances(); i++) {    if ((m_Instances.instance(i).value(4) == 1) || (m_Instances.instance(i).value(4) == 2)) {      if (mergedIndex == -1) {        mergedIndex=(int)result.instance(i).value(4);      } else {        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(4));      }    }  }}  }
class C{  public static void main(String[] args){  Demo2 frame=new Demo2();  frame.setVisible(true);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement().setEndLocaterInfo(handler.getLocator());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public FreshestCRLExtension(List<DistributionPoint> distributionPoints) throws IOException {  super(PKIXExtensions.FreshestCRL_Id,false,distributionPoints,NAME);}  }
class C{  public void addLinkedPosition(ITrackedNodePosition position,int sequenceRank,String groupID){  getLinkedProposalModel().getPositionGroup(groupID,true).addPosition(position,sequenceRank);}  }
class C{  public TokenRangeBuilder addRange(String key,Object from,Object to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  @Override public void process(Map<K,V> tuple){  addTuple(tuple,denominators);}  }
class C{  public void loadEntriesAndMappings(Long releaseId){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addPortal(Portal portal){  String name=getDisplayName();  if (!name.equals(portal.getFromBlockName()) && !name.equals(portal.getToBlockName())) {    log.warn(portal.toString() + " not in block " + getDisplayName());    return;  }  String pName=portal.getName();  if (pName != null) {    for (int i=0; i < _portals.size(); i++) {      if (pName.equals(_portals.get(i).getName())) {        return;      }    }  }  int oldSize=_portals.size();  _portals.add(portal);  if (log.isDebugEnabled()) {    log.debug("addPortal: portal= \"" + portal.getName() + "\", to Block= \""+ getDisplayName()+ "\".");  }  firePropertyChange("portalCount",Integer.valueOf(oldSize),Integer.valueOf(_portals.size()));}  }
class C{  public static void checkAndSetDoubleParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Double d=getDouble(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  public Bottom(int value){  this.value=value;}  }
class C{  private String createReplicaIfCGHasReplica(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,URI cgURI){  log.info("CG URI {}",cgURI);  if (volumeDescriptors != null && !volumeDescriptors.isEmpty()) {    VolumeDescriptor firstVolumeDescriptor=volumeDescriptors.get(0);    if (firstVolumeDescriptor != null && cgURI != null) {      BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgURI);      List<Volume> existingVolumesInCG=BlockConsistencyGroupUtils.getActiveNativeVolumesInCG(cg,_dbClient);      URI storage=existingVolumesInCG.get(0).getStorageController();      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);      if (checkIfCGHasCloneReplica(existingVolumesInCG)) {        log.info("Adding clone steps for create {} volumes",firstVolumeDescriptor.getType());        waitFor=createCloneSteps(workflow,waitFor,volumeDescriptors,existingVolumesInCG,cgURI);      }      if (checkIfCGHasMirrorReplica(existingVolumesInCG)) {        log.info("Adding mirror steps for create {} volumes",firstVolumeDescriptor.getType());        waitFor=createMirrorSteps(workflow,waitFor,volumeDescriptors,existingVolumesInCG,cgURI);      }      List<BlockSnapshotSession> sessions=getSnapSessionsForCGVolume(existingVolumesInCG.get(0));      boolean isExistingCGSnapShotAvailable=checkIfCGHasSnapshotReplica(existingVolumesInCG);      boolean isExistingCGSnapSessionAvailable=sessions != null && !sessions.isEmpty();      boolean isVMAX3ExistingVolume=ControllerUtils.isVmaxVolumeUsing803SMIS(existingVolumesInCG.get(0),_dbClient);      List<URI> volumeListtoAddURIs=VolumeDescriptor.getVolumeURIs(volumeDescriptors);      List<Volume> volumeListToAdd=ControllerUtils.queryVolumesByIterativeQuery(_dbClient,volumeListtoAddURIs);      if (isVMAX3ExistingVolume) {        if (isVMAX3VolumeHasSessionOnly(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {          log.info("Existing CG only has Snap Session, adding snap session steps for adding volumes");          processSnapSessions(existingVolumesInCG,workflow,waitFor,volumeListToAdd);        } else         if (isVMAX3VolumeHasSnapshotOnly(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {          Set<String> snapGroupNames=ControllerUtils.getSnapshotReplicationGroupNames(existingVolumesInCG,_dbClient);          for (          String snapGroupName : snapGroupNames) {            log.info("Existing CG only has Snapshots, adding snapshot steps for existing snap group {} adding volumes",snapGroupName);            waitFor=addSnapshotsToReplicationGroupStep(workflow,waitFor,storageSystem,volumeListToAdd,snapGroupName,cgURI);          }        } else         if (isVMAX3VolumeHasSessionAndSnapshot(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {          log.info("Existing CG has both Sessions and linked targets, adding snapshot and session steps");          processSnapSessionsAndLinkedTargets(existingVolumesInCG,workflow,waitFor,volumeListToAdd,cgURI);        }      } else       if (isExistingCGSnapShotAvailable) {        log.info("Adding snapshot steps for adding volumes");        Set<String> snapGroupNames=ControllerUtils.getSnapshotReplicationGroupNames(existingVolumesInCG,_dbClient);        for (        String snapGroupName : snapGroupNames) {          waitFor=addSnapshotsToReplicationGroupStep(workflow,waitFor,storageSystem,volumeListToAdd,snapGroupName,cgURI);        }      }    }  }  return waitFor;}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  boolean needParens=getMinimumNumberShouldMatch() > 0;  if (needParens) {    buffer.append("(");  }  int i=0;  for (  BooleanClause c : this) {    buffer.append(c.getOccur().toString());    Query subQuery=c.getQuery();    if (subQuery instanceof BooleanQuery) {      buffer.append("(");      buffer.append(subQuery.toString(field));      buffer.append(")");    } else {      buffer.append(subQuery.toString(field));    }    if (i != clauses.size() - 1) {      buffer.append(" ");    }    i+=1;  }  if (needParens) {    buffer.append(")");  }  if (getMinimumNumberShouldMatch() > 0) {    buffer.append('~');    buffer.append(getMinimumNumberShouldMatch());  }  return buffer.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DOMStructure(Node node){  if (node == null) {    throw new NullPointerException("node cannot be null");  }  this.node=node;}  }
class C{  void sendMessageIsolate(int message,int isolateId){  DMessage dm=DMessageCache.alloc(0);  dm.setTargetIsolate(isolateId);  dm.setType(message);  sendMessage(dm);}  }
class C{  @NonNull public DividerAdapterBuilder leadingResource(@LayoutRes int resource){  return leadingView(asViewFactory(resource));}  }
class C{  @Override public <T extends DataObject>void create(Collection<T> objs) throws DatabaseException {  getDbClient().createObject(objs);}  }
class C{  public static void suppressErrorMessage(String msg){  if (list.isEmpty()) {    return;  }  LoggingEvent evt=list.remove(0);  while ((evt.getLevel() == Level.INFO) || (evt.getLevel() == Level.DEBUG) || (evt.getLevel() == Level.TRACE)) {    if (list.isEmpty()) {      Assert.fail("Only debug/info messages present: " + msg);      return;    }    evt=list.remove(0);  }  if (evt.getLevel() != Level.ERROR) {    Assert.fail("Level mismatch when looking for ERROR message: \"" + msg + "\" found \""+ (String)evt.getMessage()+ "\"");  }  if (!compare((String)evt.getMessage(),msg)) {    Assert.fail("Looking for ERROR message \"" + msg + "\" got \""+ evt.getMessage()+ "\"");  }}  }
class C{  private boolean CheckIfVolumeHasReplica(Volume volume){  boolean forceAdd=false;  URI volumeURI=volume.getId();  URIQueryResultList list=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volumeURI),list);  Iterator<URI> it=list.iterator();  while (it.hasNext()) {    URI snapshotID=it.next();    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotID);    if (snapshot != null) {      log.debug("There are Snapshot(s) available for volume {}",volumeURI);      forceAdd=true;      break;    }  }  if (!forceAdd) {    List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(volumeURI));    if (!snapSessions.isEmpty()) {      log.debug("There are snapshot sessions available on volume {}",volumeURI);      forceAdd=true;    }  }  if (!forceAdd) {    URIQueryResultList cloneList=new URIQueryResultList();    dbClient.queryByConstraint(ContainmentConstraint.Factory.getAssociatedSourceVolumeConstraint(volumeURI),cloneList);    Iterator<URI> iter=cloneList.iterator();    while (iter.hasNext()) {      URI cloneID=iter.next();      Volume clone=dbClient.queryObject(Volume.class,cloneID);      if (clone != null) {        log.debug("There are Clone(s) available for volume {}",volumeURI);        forceAdd=true;        break;      }    }  }  if (!forceAdd) {    URIQueryResultList mirrorList=new URIQueryResultList();    dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeBlockMirrorConstraint(volumeURI),mirrorList);    Iterator<URI> itr=mirrorList.iterator();    while (itr.hasNext()) {      URI mirrorID=itr.next();      BlockMirror mirror=dbClient.queryObject(BlockMirror.class,mirrorID);      if (mirror != null) {        log.debug("There are Mirror(s) available for volume {}",volumeURI);        forceAdd=true;        break;      }    }  }  return forceAdd;}  }
class C{  private static int depthDelta(Label label){  int lLoc=label.getLocation(0,Position.LEFT);  int rLoc=label.getLocation(0,Position.RIGHT);  if (lLoc == Location.INTERIOR && rLoc == Location.EXTERIOR)   return 1; else   if (lLoc == Location.EXTERIOR && rLoc == Location.INTERIOR)   return -1;  return 0;}  }
class C{  public void convertToFileIfRequired(DataHandler h){  try {    if (small != null && small.length > h.getMaxLengthInplaceLob()) {      boolean compress=h.getLobCompressionAlgorithm(type) != null;      int len=getBufferSize(h,compress,Long.MAX_VALUE);      int tabId=tableId;      if (type == Value.BLOB) {        createFromStream(DataUtils.newBytes(len),0,getInputStream(),Long.MAX_VALUE,h);      } else {        createFromReader(new char[len],0,getReader(),Long.MAX_VALUE,h);      }      Value v2=copy(h,tabId);      if (SysProperties.CHECK && v2 != this) {        DbException.throwInternalError();      }    }  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ComparableObjectItem)) {    return false;  }  ComparableObjectItem that=(ComparableObjectItem)obj;  if (!this.x.equals(that.x)) {    return false;  }  if (!ObjectUtilities.equal(this.obj,that.obj)) {    return false;  }  return true;}  }
class C{  public void invalidAttributeValue(String systemID,int lineNr,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  XMLUtil.errorInvalidAttributeValue(systemID,lineNr,elementName,attributeName,attributeValue);}  }
class C{  private Executor createDefaultExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory,IoEventQueueHandler queueHandler){  Executor executor=new OrderedThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,unit,threadFactory,queueHandler);  return executor;}  }
class C{  private void insertFirstWaypoint(Track track){  String waypointName=context.getString(R.string.marker_split_name_format,0);  String waypointCategory="";  TripStatisticsUpdater updater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  TripStatistics tripStatistics=updater.getTripStatistics();  String waypointDescription=new DescriptionGeneratorImpl(context).generateWaypointDescription(tripStatistics);  String icon=context.getString(R.string.marker_statistics_icon_url);  double length=0.0;  long duration=0L;  Location waypointLocation=new Location("");  waypointLocation.setLatitude(100);  waypointLocation.setLongitude(180);  Waypoint waypoint=new Waypoint(waypointName,waypointDescription,waypointCategory,icon,track.getId(),WaypointType.STATISTICS,length,duration,-1L,-1L,waypointLocation,tripStatistics,"");  myTracksProviderUtils.insertWaypoint(waypoint);}  }
class C{  public AnnotationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private boolean isPeak(Peak[] series,int index){  boolean ok=false;  int current=index;  int okValues=0;  while (!ok) {    current--;    if (current < 0) {      return false;    }    if (!isOk(series,current,index)) {      return false;    }    okValues++;    if (okValues > numberOfNeighbours) {      ok=true;    }  }  ok=false;  current=index;  okValues=0;  while (!ok) {    current++;    if (current >= series.length) {      return false;    }    if (!isOk(series,current,index)) {      return false;    }    okValues++;    if (okValues > numberOfNeighbours) {      ok=true;    }  }  return true;}  }
class C{  public PKCS7(AlgorithmId[] digestAlgorithmIds,ContentInfo contentInfo,X509Certificate[] certificates,X509CRL[] crls,SignerInfo[] signerInfos){  version=BigInteger.ONE;  this.digestAlgorithmIds=digestAlgorithmIds;  this.contentInfo=contentInfo;  this.certificates=certificates;  this.crls=crls;  this.signerInfos=signerInfos;}  }
class C{  @Override public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public void removeUpdate(DocumentEvent de){  changedUpdate(de);}  }
class C{  @Override public void recordGaugeValues(Map<String,? extends Number> gauges){  long time=System.currentTimeMillis();  BatchPoints batchPoints=BatchPoints.database(database).build();  for (  Map.Entry<String,? extends Number> gauge : gauges.entrySet()) {    batchPoints.point(constructPoint(time,gauge.getKey(),gauge.getValue()));  }  client.write(batchPoints);}  }
class C{  private Object writeReplace(){  return new UnmodifiableList(list);}  }
class C{  @Override public String toString(){  return toAscii();}  }
class C{  String extractScriptName(Resource resource){  if (location.getPath().isEmpty()) {    return resource.getLocation();  }  return resource.getLocation().substring(location.getPath().length() + 1);}  }
class C{  protected DefaultEntityRenderer createDayRenderer(){  return new DefaultEntityRenderer();}  }
class C{  public FeatureParameterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Javac(CtClass thisClass){  this(new Bytecode(thisClass.getClassFile2().getConstPool(),0,0),thisClass);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case GamlPackage.ENTRY:{      Entry entry=(Entry)theEObject;      T result=caseEntry(entry);      if (result == null)       result=defaultCase(theEObject);      return result;    }case GamlPackage.STANDALONE_BLOCK:{    StandaloneBlock standaloneBlock=(StandaloneBlock)theEObject;    T result=caseStandaloneBlock(standaloneBlock);    if (result == null)     result=caseEntry(standaloneBlock);    if (result == null)     result=defaultCase(theEObject);    return result;  }case GamlPackage.STRING_EVALUATOR:{  StringEvaluator stringEvaluator=(StringEvaluator)theEObject;  T result=caseStringEvaluator(stringEvaluator);  if (result == null)   result=caseEntry(stringEvaluator);  if (result == null)   result=defaultCase(theEObject);  return result;}case GamlPackage.MODEL:{Model model=(Model)theEObject;T result=caseModel(model);if (result == null) result=caseEntry(model);if (result == null) result=caseVarDefinition(model);if (result == null) result=caseGamlDefinition(model);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.BLOCK:{Block block=(Block)theEObject;T result=caseBlock(block);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.IMPORT:{Import import_=(Import)theEObject;T result=caseImport(import_);if (result == null) result=caseVarDefinition(import_);if (result == null) result=caseGamlDefinition(import_);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.PRAGMA:{Pragma pragma=(Pragma)theEObject;T result=casePragma(pragma);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.STATEMENT:{Statement statement=(Statement)theEObject;T result=caseStatement(statement);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SGLOBAL:{S_Global s_Global=(S_Global)theEObject;T result=caseS_Global(s_Global);if (result == null) result=caseStatement(s_Global);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SSPECIES:{S_Species s_Species=(S_Species)theEObject;T result=caseS_Species(s_Species);if (result == null) result=caseS_Declaration(s_Species);if (result == null) result=caseTypeDefinition(s_Species);if (result == null) result=caseStatement(s_Species);if (result == null) result=caseVarDefinition(s_Species);if (result == null) result=caseActionDefinition(s_Species);if (result == null) result=caseGamlDefinition(s_Species);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SEXPERIMENT:{S_Experiment s_Experiment=(S_Experiment)theEObject;T result=caseS_Experiment(s_Experiment);if (result == null) result=caseStatement(s_Experiment);if (result == null) result=caseVarDefinition(s_Experiment);if (result == null) result=caseGamlDefinition(s_Experiment);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SDO:{S_Do s_Do=(S_Do)theEObject;T result=caseS_Do(s_Do);if (result == null) result=caseStatement(s_Do);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SLOOP:{S_Loop s_Loop=(S_Loop)theEObject;T result=caseS_Loop(s_Loop);if (result == null) result=caseS_Declaration(s_Loop);if (result == null) result=caseStatement(s_Loop);if (result == null) result=caseVarDefinition(s_Loop);if (result == null) result=caseGamlDefinition(s_Loop);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SIF:{S_If s_If=(S_If)theEObject;T result=caseS_If(s_If);if (result == null) result=caseStatement(s_If);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SOTHER:{S_Other s_Other=(S_Other)theEObject;T result=caseS_Other(s_Other);if (result == null) result=caseStatement(s_Other);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SRETURN:{S_Return s_Return=(S_Return)theEObject;T result=caseS_Return(s_Return);if (result == null) result=caseStatement(s_Return);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SDECLARATION:{S_Declaration s_Declaration=(S_Declaration)theEObject;T result=caseS_Declaration(s_Declaration);if (result == null) result=caseStatement(s_Declaration);if (result == null) result=caseVarDefinition(s_Declaration);if (result == null) result=caseGamlDefinition(s_Declaration);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SREFLEX:{S_Reflex s_Reflex=(S_Reflex)theEObject;T result=caseS_Reflex(s_Reflex);if (result == null) result=caseS_Declaration(s_Reflex);if (result == null) result=caseStatement(s_Reflex);if (result == null) result=caseVarDefinition(s_Reflex);if (result == null) result=caseGamlDefinition(s_Reflex);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SDEFINITION:{S_Definition s_Definition=(S_Definition)theEObject;T result=caseS_Definition(s_Definition);if (result == null) result=caseS_Declaration(s_Definition);if (result == null) result=caseActionDefinition(s_Definition);if (result == null) result=caseStatement(s_Definition);if (result == null) result=caseVarDefinition(s_Definition);if (result == null) result=caseGamlDefinition(s_Definition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SASSIGNMENT:{S_Assignment s_Assignment=(S_Assignment)theEObject;T result=caseS_Assignment(s_Assignment);if (result == null) result=caseStatement(s_Assignment);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SDIRECT_ASSIGNMENT:{S_DirectAssignment s_DirectAssignment=(S_DirectAssignment)theEObject;T result=caseS_DirectAssignment(s_DirectAssignment);if (result == null) result=caseS_Assignment(s_DirectAssignment);if (result == null) result=caseStatement(s_DirectAssignment);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SSET:{S_Set s_Set=(S_Set)theEObject;T result=caseS_Set(s_Set);if (result == null) result=caseS_Assignment(s_Set);if (result == null) result=caseStatement(s_Set);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SEQUATIONS:{S_Equations s_Equations=(S_Equations)theEObject;T result=caseS_Equations(s_Equations);if (result == null) result=caseStatement(s_Equations);if (result == null) result=caseEquationDefinition(s_Equations);if (result == null) result=caseGamlDefinition(s_Equations);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SSOLVE:{S_Solve s_Solve=(S_Solve)theEObject;T result=caseS_Solve(s_Solve);if (result == null) result=caseStatement(s_Solve);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SDISPLAY:{S_Display s_Display=(S_Display)theEObject;T result=caseS_Display(s_Display);if (result == null) result=caseStatement(s_Display);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SPECIES_OR_GRID_DISPLAY_STATEMENT:{speciesOrGridDisplayStatement speciesOrGridDisplayStatement=(speciesOrGridDisplayStatement)theEObject;T result=casespeciesOrGridDisplayStatement(speciesOrGridDisplayStatement);if (result == null) result=caseStatement(speciesOrGridDisplayStatement);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.PARAMETERS:{Parameters parameters=(Parameters)theEObject;T result=caseParameters(parameters);if (result == null) result=caseExpression(parameters);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ACTION_ARGUMENTS:{ActionArguments actionArguments=(ActionArguments)theEObject;T result=caseActionArguments(actionArguments);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ARGUMENT_DEFINITION:{ArgumentDefinition argumentDefinition=(ArgumentDefinition)theEObject;T result=caseArgumentDefinition(argumentDefinition);if (result == null) result=caseVarDefinition(argumentDefinition);if (result == null) result=caseGamlDefinition(argumentDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.FACET:{Facet facet=(Facet)theEObject;T result=caseFacet(facet);if (result == null) result=caseVarDefinition(facet);if (result == null) result=caseGamlDefinition(facet);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.EXPRESSION:{Expression expression=(Expression)theEObject;T result=caseExpression(expression);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ARGUMENT_PAIR:{ArgumentPair argumentPair=(ArgumentPair)theEObject;T result=caseArgumentPair(argumentPair);if (result == null) result=caseExpression(argumentPair);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.FUNCTION:{Function function=(Function)theEObject;T result=caseFunction(function);if (result == null) result=caseExpression(function);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.EXPRESSION_LIST:{ExpressionList expressionList=(ExpressionList)theEObject;T result=caseExpressionList(expressionList);if (result == null) result=caseExpression(expressionList);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.VARIABLE_REF:{VariableRef variableRef=(VariableRef)theEObject;T result=caseVariableRef(variableRef);if (result == null) result=caseExpression(variableRef);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.TYPE_INFO:{TypeInfo typeInfo=(TypeInfo)theEObject;T result=caseTypeInfo(typeInfo);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.GAML_DEFINITION:{GamlDefinition gamlDefinition=(GamlDefinition)theEObject;T result=caseGamlDefinition(gamlDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.EQUATION_DEFINITION:{EquationDefinition equationDefinition=(EquationDefinition)theEObject;T result=caseEquationDefinition(equationDefinition);if (result == null) result=caseGamlDefinition(equationDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.TYPE_DEFINITION:{TypeDefinition typeDefinition=(TypeDefinition)theEObject;T result=caseTypeDefinition(typeDefinition);if (result == null) result=caseActionDefinition(typeDefinition);if (result == null) result=caseGamlDefinition(typeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.VAR_DEFINITION:{VarDefinition varDefinition=(VarDefinition)theEObject;T result=caseVarDefinition(varDefinition);if (result == null) result=caseGamlDefinition(varDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ACTION_DEFINITION:{ActionDefinition actionDefinition=(ActionDefinition)theEObject;T result=caseActionDefinition(actionDefinition);if (result == null) result=caseGamlDefinition(actionDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.UNIT_FAKE_DEFINITION:{UnitFakeDefinition unitFakeDefinition=(UnitFakeDefinition)theEObject;T result=caseUnitFakeDefinition(unitFakeDefinition);if (result == null) result=caseGamlDefinition(unitFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.TYPE_FAKE_DEFINITION:{TypeFakeDefinition typeFakeDefinition=(TypeFakeDefinition)theEObject;T result=caseTypeFakeDefinition(typeFakeDefinition);if (result == null) result=caseTypeDefinition(typeFakeDefinition);if (result == null) result=caseActionDefinition(typeFakeDefinition);if (result == null) result=caseGamlDefinition(typeFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ACTION_FAKE_DEFINITION:{ActionFakeDefinition actionFakeDefinition=(ActionFakeDefinition)theEObject;T result=caseActionFakeDefinition(actionFakeDefinition);if (result == null) result=caseActionDefinition(actionFakeDefinition);if (result == null) result=caseGamlDefinition(actionFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SKILL_FAKE_DEFINITION:{SkillFakeDefinition skillFakeDefinition=(SkillFakeDefinition)theEObject;T result=caseSkillFakeDefinition(skillFakeDefinition);if (result == null) result=caseGamlDefinition(skillFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.VAR_FAKE_DEFINITION:{VarFakeDefinition varFakeDefinition=(VarFakeDefinition)theEObject;T result=caseVarFakeDefinition(varFakeDefinition);if (result == null) result=caseVarDefinition(varFakeDefinition);if (result == null) result=caseGamlDefinition(varFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.EQUATION_FAKE_DEFINITION:{EquationFakeDefinition equationFakeDefinition=(EquationFakeDefinition)theEObject;T result=caseEquationFakeDefinition(equationFakeDefinition);if (result == null) result=caseEquationDefinition(equationFakeDefinition);if (result == null) result=caseGamlDefinition(equationFakeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.TERMINAL_EXPRESSION:{TerminalExpression terminalExpression=(TerminalExpression)theEObject;T result=caseTerminalExpression(terminalExpression);if (result == null) result=caseExpression(terminalExpression);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SACTION:{S_Action s_Action=(S_Action)theEObject;T result=caseS_Action(s_Action);if (result == null) result=caseS_Definition(s_Action);if (result == null) result=caseS_Declaration(s_Action);if (result == null) result=caseActionDefinition(s_Action);if (result == null) result=caseStatement(s_Action);if (result == null) result=caseVarDefinition(s_Action);if (result == null) result=caseGamlDefinition(s_Action);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SVAR:{S_Var s_Var=(S_Var)theEObject;T result=caseS_Var(s_Var);if (result == null) result=caseS_Definition(s_Var);if (result == null) result=caseS_Declaration(s_Var);if (result == null) result=caseActionDefinition(s_Var);if (result == null) result=caseStatement(s_Var);if (result == null) result=caseVarDefinition(s_Var);if (result == null) result=caseGamlDefinition(s_Var);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.PAIR:{Pair pair=(Pair)theEObject;T result=casePair(pair);if (result == null) result=caseExpression(pair);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.IF:{If if_=(If)theEObject;T result=caseIf(if_);if (result == null) result=caseExpression(if_);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.CAST:{Cast cast=(Cast)theEObject;T result=caseCast(cast);if (result == null) result=caseExpression(cast);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.BINARY:{Binary binary=(Binary)theEObject;T result=caseBinary(binary);if (result == null) result=caseExpression(binary);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.UNIT:{Unit unit=(Unit)theEObject;T result=caseUnit(unit);if (result == null) result=caseExpression(unit);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.UNARY:{Unary unary=(Unary)theEObject;T result=caseUnary(unary);if (result == null) result=caseExpression(unary);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ACCESS:{Access access=(Access)theEObject;T result=caseAccess(access);if (result == null) result=caseExpression(access);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ARRAY:{Array array=(Array)theEObject;T result=caseArray(array);if (result == null) result=caseExpression(array);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.POINT:{Point point=(Point)theEObject;T result=casePoint(point);if (result == null) result=caseExpression(point);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.PARAMETER:{Parameter parameter=(Parameter)theEObject;T result=caseParameter(parameter);if (result == null) result=caseExpression(parameter);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.UNIT_NAME:{UnitName unitName=(UnitName)theEObject;T result=caseUnitName(unitName);if (result == null) result=caseExpression(unitName);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.TYPE_REF:{TypeRef typeRef=(TypeRef)theEObject;T result=caseTypeRef(typeRef);if (result == null) result=caseExpression(typeRef);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.SKILL_REF:{SkillRef skillRef=(SkillRef)theEObject;T result=caseSkillRef(skillRef);if (result == null) result=caseExpression(skillRef);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.ACTION_REF:{ActionRef actionRef=(ActionRef)theEObject;T result=caseActionRef(actionRef);if (result == null) result=caseExpression(actionRef);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.EQUATION_REF:{EquationRef equationRef=(EquationRef)theEObject;T result=caseEquationRef(equationRef);if (result == null) result=caseExpression(equationRef);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.INT_LITERAL:{IntLiteral intLiteral=(IntLiteral)theEObject;T result=caseIntLiteral(intLiteral);if (result == null) result=caseTerminalExpression(intLiteral);if (result == null) result=caseExpression(intLiteral);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.DOUBLE_LITERAL:{DoubleLiteral doubleLiteral=(DoubleLiteral)theEObject;T result=caseDoubleLiteral(doubleLiteral);if (result == null) result=caseTerminalExpression(doubleLiteral);if (result == null) result=caseExpression(doubleLiteral);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.COLOR_LITERAL:{ColorLiteral colorLiteral=(ColorLiteral)theEObject;T result=caseColorLiteral(colorLiteral);if (result == null) result=caseTerminalExpression(colorLiteral);if (result == null) result=caseExpression(colorLiteral);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.STRING_LITERAL:{StringLiteral stringLiteral=(StringLiteral)theEObject;T result=caseStringLiteral(stringLiteral);if (result == null) result=caseTerminalExpression(stringLiteral);if (result == null) result=caseExpression(stringLiteral);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.BOOLEAN_LITERAL:{BooleanLiteral booleanLiteral=(BooleanLiteral)theEObject;T result=caseBooleanLiteral(booleanLiteral);if (result == null) result=caseTerminalExpression(booleanLiteral);if (result == null) result=caseExpression(booleanLiteral);if (result == null) result=defaultCase(theEObject);return result;}case GamlPackage.RESERVED_LITERAL:{ReservedLiteral reservedLiteral=(ReservedLiteral)theEObject;T result=caseReservedLiteral(reservedLiteral);if (result == null) result=caseTerminalExpression(reservedLiteral);if (result == null) result=caseExpression(reservedLiteral);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public static synchronized JMXConnectorServer initialize(String portStr,Properties props){  return startRemoteConnectorServer(portStr,props);}  }
class C{  public void testDeleteUp() throws Exception {  File logDir=prepareLogDir("testDelete");  DiskLog log=openLog(logDir,false,3000);  writeEventsToLog(log,200);  LogConnection conn=log.connect(false);  for (int i=0; i < 200; i++) {    conn.delete(null,new Long(i));  }  log.validate();  assertEquals("Should have no log files",0,log.fileCount());  log.release();  DiskLog log2=openLog(logDir,false);  log.validate();  writeEventsToLog(log2,100);  readBackStoredEvents(log2,0,100);  log.validate();  log2.release();}  }
class C{  public Builder profanityFilter(Boolean profanityFilter){  this.profanityFilter=profanityFilter;  return this;}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public CompositeColorMap(ColorMap[] maps){  if (maps.length == 0)   throw new RuntimeException("CompositeColorMap requires at least one ColorMap");  this.maps=maps;}  }
class C{  public PLLookAtAnimatedData(Object sender,PLCamera camera,float pitch,float yaw,int defaultMaxStep){  super(sender);  PLRotation rotation=camera.getLookAtRotation();  currentPitch=rotation.pitch;  currentYaw=rotation.yaw;  maxPitch=camera.getRotationAngleNormalized(pitch,camera.getPitchRange());  maxYaw=camera.getRotationAngleNormalized(yaw,camera.getYawRange());  float pitchDiff=camera.getRotationAngleNormalized(maxPitch - currentPitch,camera.getPitchRange());  float yawDiff=camera.getRotationAngleNormalized(maxYaw - currentYaw,camera.getYawRange());  float maxDiff=PLConstants.kRotationMaxValue - Math.abs(Math.abs(pitchDiff) > Math.abs(yawDiff) ? pitchDiff : yawDiff);  maxStep=Math.max((int)Math.sqrt(defaultMaxStep * defaultMaxStep * Math.abs(1.0f - maxDiff * maxDiff / PLConstants.kRotationMax2Value)),1);  pitchStep=pitchDiff / maxStep;  if (yawDiff > 180.0f)   yawStep=(yawDiff - 360.0f) / maxStep; else   if (yawDiff < -180.0f)   yawStep=(360.0f - yawDiff) / maxStep; else   yawStep=yawDiff / maxStep;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("startPrefixMapping: prefix: " + prefix + ", uri: "+ uri);  if (null == prefix)   prefix="";  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  public Selector(final String selector) throws Exception {  final String[] parts=selector.split("\\{");  if (parts.length < 2) {    throw new Exception("Warning: Incomplete selector: " + selector);  }  this.selector=parts[0].trim();  String contents=parts[1].trim();  if (contents.length() <= 1) {    throw new Exception("Warning: Empty selector body: " + selector);  }  if (contents.charAt(contents.length() - 1) != '}') {    throw new Exception("Warning: Unterminated selector: " + selector);  }  contents=StringUtils.substringBefore(contents,"}");  properties=parseProperties(contents);  sortProperties(properties);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  @ExceptionHandler(Exception.class) public String onError(HttpServletRequest req,Exception ex){  return handleError(req,ex,"Something went wrong.");}  }
class C{  private void removeDevice(Versioned<DeviceSyncRepresentation> dev){  try {    cntDeviceRemovedFromStore.increment();    storeClient.delete(dev.getValue().getKey(),dev.getVersion());  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to remove device entry for " + dev.toString() + " from store.",e);  }}  }
class C{  public NormalBuilder(String sSentence){  m_sSentence=sSentence;}  }
class C{  @Override public void fireDataStructureChanged(){  Locale newLocale=new Locale(model.getUserPreference(CoreModel.USER_LANGUAGE_CODE));  super.getLocaliser().setLocale(newLocale);  View viewToDisplay=getCurrentView();  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.recreateAllViews(true,viewToDisplay);  }  setCurrentView(viewToDisplay);  fireDataChangedUpdateNow();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public AbstractParser(final String name){  this.name=name;}  }
class C{  protected static void autoUnBoxing2(MethodVisitor mv,Type fieldType){switch (fieldType.getSort()) {case Type.BOOLEAN:    mv.visitTypeInsn(CHECKCAST,"java/lang/Boolean");  mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Boolean","booleanValue","()Z");break;case Type.BYTE:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","byteValue","()B");break;case Type.CHAR:mv.visitTypeInsn(CHECKCAST,"java/lang/Character");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Character","charValue","()C");break;case Type.SHORT:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","shortValue","()S");break;case Type.INT:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","intValue","()I");break;case Type.FLOAT:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","floatValue","()F");break;case Type.LONG:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","longValue","()J");break;case Type.DOUBLE:mv.visitTypeInsn(CHECKCAST,"java/lang/Number");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Number","doubleValue","()D");break;case Type.ARRAY:mv.visitTypeInsn(CHECKCAST,fieldType.getInternalName());break;default :mv.visitTypeInsn(CHECKCAST,fieldType.getInternalName());}}  }
class C{  public void propertyRemoved(String name) throws DOMException {  int idx=cssEngine.getPropertyIndex(name);  for (int i=0; i < declaration.size(); i++) {    if (idx == declaration.getIndex(i)) {      declaration.remove(i);      mutate=true;      setAttributeNS(null,SVG_STYLE_ATTRIBUTE,declaration.toString(cssEngine));      mutate=false;      return;    }  }}  }
class C{  public void testBug11781() throws Exception {  if (versionMeetsMinimum(5,1)) {    if (!versionMeetsMinimum(5,2)) {      return;    }  }  createTable("`app tab`","( C1 int(11) NULL, C2 int(11) NULL, INDEX NEWINX (C1), INDEX NEWINX2 (C1, C2))","InnoDB");  this.stmt.executeUpdate("ALTER TABLE `app tab` ADD CONSTRAINT APPFK FOREIGN KEY (C1) REFERENCES `app tab` (C1)");  this.rs=((com.mysql.jdbc.DatabaseMetaData)this.conn.getMetaData()).extractForeignKeyFromCreateTable(this.conn.getCatalog(),"app tab");  assertTrue("must return a row",this.rs.next());  String catalog=this.conn.getCatalog();  assertEquals("comment; APPFK(`C1`) REFER `" + catalog + "`/ `app tab` (`C1`)",this.rs.getString(3));  this.rs.close();  this.rs=this.conn.getMetaData().getImportedKeys(this.conn.getCatalog(),null,"app tab");  assertTrue(this.rs.next());  this.rs=this.conn.getMetaData().getExportedKeys(this.conn.getCatalog(),null,"app tab");  assertTrue(this.rs.next());}  }
class C{  public VectorClock(){  this(new ArrayList<ClockEntry>(0),System.currentTimeMillis());}  }
class C{  public Card createShallowClone(){  Card cloneCard=new Card();  cloneCard.mTitle=mTitle;  cloneCard.mDescription=mDescription;  cloneCard.mTag=mTag;  cloneCard.mLayoutId=mLayoutId;  cloneCard.mCardState=mCardState;  if (mCardProgress != null) {    cloneCard.mCardProgress=mCardProgress.createShallowClone();  }  for (  CardAction action : mCardActions) {    cloneCard.mCardActions.add(action.createShallowClone());  }  return cloneCard;}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public TreeMaker forToplevel(JCCompilationUnit toplevel){  return new TreeMaker(toplevel,names,types,syms);}  }
class C{  public LogOutputStream(RandomAccessFile raf) throws IOException {  this.raf=raf;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.452 -0500",hash_original_method="FC6031BD5FB1B476FDF70740E2B2704D",hash_generated_method="4A36EA2E1CF5F8C9F0C14493D39E6A3A") public Object parseObject(PemObject obj) throws IOException {  ByteArrayInputStream bIn=new ByteArrayInputStream(obj.getContent());  try {    CertificateFactory certFact=CertificateFactory.getInstance("X.509",provider);    return certFact.generateCRL(bIn);  } catch (  Exception e) {    throw new PEMException("problem parsing cert: " + e.toString(),e);  }}  }
class C{  public static Drawable byteToDrawable(byte[] b){  return bitmapToDrawable(byteToBitmap(b));}  }
class C{  public ASN1ObjectIdentifier(String identifier){  if (identifier == null) {    throw new IllegalArgumentException("'identifier' cannot be null");  }  if (!isValidIdentifier(identifier)) {    throw new IllegalArgumentException("string " + identifier + " not an OID");  }  this.identifier=identifier;}  }
class C{  private String readDocumentation(ResourceSet resourceSetForDocRetrieval,ProjectComparisonEntry entry,int[] implIndices){  if (entry.isElementEntry()) {    final List<EObject> elemsToConsider=new ArrayList<>();    elemsToConsider.add(entry.getElementAPI());    for (    int currImplIdx : implIndices) {      elemsToConsider.add(entry.getElementImpl(currImplIdx));    }    final StringBuilder sb=new StringBuilder();    for (    EObject currElem : elemsToConsider) {      if (currElem != null && !currElem.eIsProxy()) {        final String docStr=n4jsDocHelper.getDocSafely(resourceSetForDocRetrieval,currElem);        if (docStr != null) {          final Doclet dl=n4jsDocHelper.getDoclet(docStr);          if (dl != null) {            final String docApiTag=N4JSDocletParser.TAG_API_NOTE.getValue(dl,null);            if (docApiTag != null && docApiTag.trim().length() > 0) {              final String sanitized=docApiTag.replaceAll("\\s*\n\\s*"," ").trim();              if (sb.length() > 0)               sb.append(" | ");              sb.append(sanitized);            }          }        }      }    }    final String doc=sb.toString().trim();    if (doc.length() > 0) {      return doc;    }  }  return null;}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public boolean saveLng(final String lng,File f){  return this.saveAsLngFile(lng,f,mainTransLists);}  }
class C{  private void sendServiceResponse(WifiP2pServiceResponse resp){  for (  ClientInfo c : mClientInfoList.values()) {    WifiP2pServiceRequest req=c.mReqList.get(resp.getTransactionId());    if (req != null) {      Message msg=Message.obtain();      msg.what=WifiP2pManager.RESPONSE_SERVICE;      msg.arg1=0;      msg.arg2=0;      msg.obj=resp;      try {        c.mMessenger.send(msg);      } catch (      RemoteException e) {        if (DBG)         logd("detect dead channel");        clearClientInfo(c.mMessenger);        return;      }    }  }}  }
class C{  public DeviceBuilder deviceMacAddress(@NonNull String deviceMacAddress){  this.deviceMacAddress=deviceMacAddress;  return this;}  }
class C{  private void handleHtmlOfflineDbBackupForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleOfflineBackupDb();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("offlineBackup");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.pageTitleOfflineBackupDbTooltip());    requestAndResponse.print("<br><br>");    requestAndResponse.print(servletText.offlineBackupDbAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doOfflineBackup/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.pageTitleOfflineBackupDb()+ "', refreshBackupsPane); return false;\" class=\"specialbutton withTopMargin\">"+ servletText.pageTitleOfflineBackupDb()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  private void convertLinks2Streets(DgKSNetwork ksnet,Network net){  for (  Link link : net.getLinks().values()) {    Node mFromNode=link.getFromNode();    Node mToNode=link.getToNode();    Tuple<Coord,Coord> startEnd=this.scaleLinkCoordinates(link.getLength(),mFromNode.getCoord(),mToNode.getCoord());    DgCrossing fromNodeCrossing=ksnet.getCrossings().get(this.idConverter.convertNodeId2CrossingId(mFromNode.getId()));    DgCrossingNode fromNode;    if (!fromNodeCrossing.getType().equals(TtCrossingType.NOTEXPAND)) {      fromNode=new DgCrossingNode(this.idConverter.convertLinkId2FromCrossingNodeId(link.getId()));      fromNode.setCoordinate(startEnd.getFirst());      fromNodeCrossing.addNode(fromNode);    } else {      fromNode=fromNodeCrossing.getNodes().get(this.idConverter.convertNodeId2NotExpandedCrossingNodeId(mFromNode.getId()));    }    DgCrossing toNodeCrossing=ksnet.getCrossings().get(this.idConverter.convertNodeId2CrossingId(mToNode.getId()));    DgCrossingNode toNode;    if (!toNodeCrossing.getType().equals(TtCrossingType.NOTEXPAND)) {      toNode=new DgCrossingNode(this.idConverter.convertLinkId2ToCrossingNodeId(link.getId()));      toNode.setCoordinate(startEnd.getSecond());      toNodeCrossing.addNode(toNode);    } else {      toNode=toNodeCrossing.getNodes().get(this.idConverter.convertNodeId2NotExpandedCrossingNodeId(mToNode.getId()));    }    DgStreet street=new DgStreet(this.idConverter.convertLinkId2StreetId(link.getId()),fromNode,toNode);    double fsd=link.getLength() / link.getFreespeed();    long fs=Math.round(fsd);    if (fs != 0) {      street.setCost(fs);    } else {      log.warn("Street id " + street.getId() + " has a freespeed tt of "+ fsd+ " that is rounded to "+ fs+ " replacing by 1");      street.setCost(0);    }    double capacity=link.getCapacity() / net.getCapacityPeriod() * this.timeInterval;    street.setCapacity(capacity);    ksnet.addStreet(street);  }}  }
class C{  public CompoundVariation(){  super();  operators=new ArrayList<Variation>();}  }
class C{  public static void main(String... args) throws Exception {  Main main=new Main();  main.addRouteBuilder(new MyRouteBuilder());  main.run(args);}  }
class C{  public static double deriv(double pred,double y){  return Math.signum(pred - y);}  }
class C{  public static void createDirs(File target) throws AdeUsageException {  if (!target.exists() && !target.mkdirs()) {    throw new AdeUsageException("Failed creating directory " + target.getPath());  }}  }
class C{  public EsriPolygonMList(int initialCapacity){  super(initialCapacity);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public TechnicalServiceNotAliveException(Reason reason){  super(String.valueOf(reason));  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  private void tstUnknownJobCounters() throws Exception {  IgniteHadoopClientProtocolProvider provider=provider();  ClientProtocol proto=provider.create(config(HadoopAbstractSelfTest.REST_PORT));  try {    proto.getJobCounters(new JobID(UUID.randomUUID().toString(),-1));    fail("exception must be thrown");  } catch (  Exception e) {    assert e instanceof IOException : "wrong error has been thrown";  }}  }
class C{  public void testKeep() throws Exception {  CharacterRunAutomaton keepWords=new CharacterRunAutomaton(Operations.complement(Operations.union(Arrays.asList(Automata.makeString("foo"),Automata.makeString("bar"))),DEFAULT_MAX_DETERMINIZED_STATES));  Analyzer a=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,keepWords);  assertAnalyzesTo(a,"quick foo brown bar bar fox foo",new String[]{"foo","bar","bar","foo"},new int[]{2,2,1,2});}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, IOException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x1B) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  ctime=KerberosTime.parse(der.getData(),(byte)0x00,true);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x01) {    cusec=subDer.getData().getBigInteger().intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (der.getData().available() > 0) {    subKey=EncryptionKey.parse(der.getData(),(byte)0x02,true);  } else {    subKey=null;    seqNumber=null;  }  if (der.getData().available() > 0) {    subDer=der.getData().getDerValue();    if ((subDer.getTag() & 0x1F) != 0x03) {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }    seqNumber=new Integer(subDer.getData().getBigInteger().intValue());  } else {    seqNumber=null;  }  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public static boolean isByteBuffer(FTypeRef typeRef){  return isBasicType(typeRef,FBasicTypeId.BYTE_BUFFER);}  }
class C{  public synchronized void commit() throws JSONException {  File tmpFile0=new File(this.file.getParentFile(),this.file.getName() + "." + System.currentTimeMillis());  File tmpFile1=new File(tmpFile0.getParentFile(),tmpFile0.getName() + "1");  try {    FileWriter writer=new FileWriter(tmpFile0);    writer.write(this.toString(2));    writer.close();    this.file.renameTo(tmpFile1);    tmpFile0.renameTo(this.file);    tmpFile1.delete();  } catch (  IOException e) {    throw new JSONException(e.getMessage());  }}  }
class C{  public int size(){  File[] files=getFiles();  if (files == null)   return 0;  return files.length;}  }
class C{  private static boolean evalIntegerOp(final IRepFilterBean filterBean,final Integer value){  if (value == null)   return false;  final int fvalue=((Integer)filterBean.getValue()).intValue();switch ((Operator)filterBean.getOperator()) {case EQUAL:    return value == fvalue;case GREATER_THAN:  return value > fvalue;case GREATER_THAN_OR_EQUAL:return value >= fvalue;case LESS_THAN:return value < fvalue;case LESS_THAN_OR_EQUAL:return value <= fvalue;case NOT_EQUAL:return value != fvalue;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  public void paintRadioButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public String includeResource(String path,String resourceType){  return this._includeResource(path,resourceType,false);}  }
class C{  public String toString(int length){  StringBuilder sb=new StringBuilder();  sb.append("[l=" + this.length() + ", cs="+ this.checksum()+ "]\n");  sb.append(this.array.toString(this.boundOffset(0),this.boundLength(0,length)));  return sb.toString();}  }
class C{  @Override public void stateChanged(ChangeEvent e){  state.update(true);  updateChannelInfoDialog();  emotesDialog.updateStream(channels.getLastActiveChannel().getStreamName());  moderationLog.setChannel(channels.getLastActiveChannel().getStreamName());}  }
class C{  protected ComboBoxEditor createEditor(){  return new WindowsComboBoxEditor();}  }
class C{  public void addSpan(@NonNull Object span){  if (spans != null) {    this.spans.add(new Span(span));    isDecorated=true;  }}  }
class C{  public synchronized int writeToFile(JDBCSequentialFile file,byte[] data) throws SQLException {  try {    connection.setAutoCommit(false);    appendToLargeObject.setBytes(1,data);    appendToLargeObject.setInt(2,file.getId());    appendToLargeObject.executeUpdate();    connection.commit();    return data.length;  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  private boolean ruleR9(Node a,Node c,Graph graph){  List<List<Node>> ucPdPsToC=getUcPdPaths(a,c,graph);  for (  List<Node> u : ucPdPsToC) {    Node b=u.get(1);    if (graph.isAdjacentTo(b,c)) {      continue;    }    if (b == c) {      continue;    }    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R9",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public void trainModels(String trainingData){  Parser trainingParser=new POSBracketToToken(trainingData);  Parser trainingParserUnknown=new POSLabeledUnknownWordParser(trainingData);  MikheevTable.isTraining=true;  BaselineTarget.isTraining=true;  Object ex;  while ((ex=trainingParser.next()) != null) {    baselineTarget.learn(ex);    mikheevTable.learn(ex);  }  baselineTarget.doneLearning();  mikheevTable.doneLearning();  trainingParser.reset();  POSTaggerUnknown.isTraining=true;  POSTaggerKnown.isTraining=true;  for (int i=0; i < iter; i++) {    System.out.println("Training round " + i);    while ((ex=trainingParser.next()) != null) {      taggerKnown.learn(ex);    }    System.out.println("\tFinished training " + rm.getString("knownName"));    while ((ex=trainingParserUnknown.next()) != null) {      taggerUnknown.learn(ex);    }    System.out.println("\tFinished training " + rm.getString("unknownName"));    trainingParser.reset();    trainingParserUnknown.reset();    taggerKnown.doneWithRound();    taggerUnknown.doneWithRound();  }  taggerUnknown.doneLearning();  taggerKnown.doneLearning();}  }
class C{  public int write(final BooleanIterator i) throws IOException {  int count=0;  boolean bit;  while (i.hasNext()) {    try {      bit=i.nextBoolean();    } catch (    RuntimeException hide) {      return -count - 1;    }    writeBit(bit);    count++;  }  return count;}  }
class C{  public void reusePreparedStatement(PreparedStatement prep,String sql){synchronized (conn) {    preparedMap.put(sql,prep);  }}  }
class C{  public SetContainerHostMapping(String source,String key,String hostName,String jmxAddress,String jmxTunnelingAddress){  super(source);  setType(TYPE);  setKey(key);  putMessageValue(HOST_KEY,hostName);  putMessageValue(JMX_URL_KEY,jmxAddress);  putMessageValue(JMX_TUNNELING_URL_KEY,jmxTunnelingAddress);}  }
class C{  public static void checkUnderPaused(){  instrumentation.waitForIdleSync();  Assert.assertEquals(trackListActivity.getString(R.string.image_record),(String)SOLO.getCurrentActivity().findViewById(R.id.track_controller_record).getContentDescription());  Assert.assertTrue(SOLO.getCurrentActivity().findViewById(R.id.track_controller_stop).isEnabled());  Assert.assertNull(findTextView(trackListActivity.getString(R.string.generic_recording)));  Assert.assertNotNull(findTextView(trackListActivity.getString(R.string.generic_paused)));  String totalTimeOld=((TextView)SOLO.getCurrentActivity().findViewById(R.id.track_controller_total_time)).getText().toString();  sleep(2000);  String totalTimeNew=((TextView)SOLO.getCurrentActivity().findViewById(R.id.track_controller_total_time)).getText().toString();  Assert.assertTrue(totalTimeOld.equalsIgnoreCase(totalTimeNew));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failoverProtection(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() != 1) {    throw APIException.badRequests.failoverCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {    throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.FAILOVER.getRestOp());  }  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);    copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public static void filterLine(Reader reader,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  BufferedReader br=new BufferedReader(reader);  BufferedWriter bw=new BufferedWriter(writer);  String line;  try {    BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);    while ((line=br.readLine()) != null) {      if (bcw.call(line)) {        bw.write(line);        bw.newLine();      }    }    bw.flush();    Writer temp2=writer;    writer=null;    temp2.close();    Reader temp1=reader;    reader=null;    temp1.close();  }  finally {    closeWithWarning(br);    closeWithWarning(reader);    closeWithWarning(bw);    closeWithWarning(writer);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.523 -0500",hash_original_method="2782AA628D17C295F1631BCDEC3DEA27",hash_generated_method="FACA1C8BED9BA59978507A4ED38EC2B8") public final Message obtainMessage(int what,Object obj){  if (mSmHandler == null)   return null;  return Message.obtain(mSmHandler,what,obj);}  }
class C{  private Context nextContext(){  Context next=new Context(context);  Options options=Options.instance(context);  Assert.checkNonNull(options);  next.put(Options.optionsKey,options);  Locale locale=context.get(Locale.class);  if (locale != null)   next.put(Locale.class,locale);  Assert.checkNonNull(messages);  next.put(JavacMessages.messagesKey,messages);  final boolean shareNames=true;  if (shareNames) {    Names names=Names.instance(context);    Assert.checkNonNull(names);    next.put(Names.namesKey,names);  }  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);  if (dl != null)   next.put(DiagnosticListener.class,dl);  MultiTaskListener mtl=context.get(MultiTaskListener.taskListenerKey);  if (mtl != null)   next.put(MultiTaskListener.taskListenerKey,mtl);  FSInfo fsInfo=context.get(FSInfo.class);  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);  JavaFileManager jfm=context.get(JavaFileManager.class);  Assert.checkNonNull(jfm);  next.put(JavaFileManager.class,jfm);  if (jfm instanceof JavacFileManager) {    ((JavacFileManager)jfm).setContext(next);  }  Names names=Names.instance(context);  Assert.checkNonNull(names);  next.put(Names.namesKey,names);  Tokens tokens=Tokens.instance(context);  Assert.checkNonNull(tokens);  next.put(Tokens.tokensKey,tokens);  Log nextLog=Log.instance(next);  nextLog.initRound(log);  JavaCompiler oldCompiler=JavaCompiler.instance(context);  JavaCompiler nextCompiler=JavaCompiler.instance(next);  nextCompiler.initRound(oldCompiler);  filer.newRound(next);  messager.newRound(next);  elementUtils.setContext(next);  typeUtils.setContext(next);  JavacTask task=context.get(JavacTask.class);  if (task != null) {    next.put(JavacTask.class,task);    if (task instanceof BasicJavacTask)     ((BasicJavacTask)task).updateContext(next);  }  JavacTrees trees=context.get(JavacTrees.class);  if (trees != null) {    next.put(JavacTrees.class,trees);    trees.updateContext(next);  }  context.clear();  return next;}  }
class C{  public static ColorModel coerceColorModel(ColorModel cm,boolean newAlphaPreMult){  if (cm.isAlphaPremultiplied() == newAlphaPreMult)   return cm;  WritableRaster wr=cm.createCompatibleWritableRaster(1,1);  return cm.coerceData(wr,newAlphaPreMult);}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public static boolean isClassFile(IResource resource){  return isFileWithExtension(resource,"class");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  char[] separator={'[',' '};  int n=rows.length;  int m=rows[0].length;  for (int i=0; i < n; i++) {    separator[0]='(';    for (int j=0; j < n; j++) {      sb.append(separator);      sb.append(rows[i][j]);      separator[0]=',';    }    separator[0]=':';    for (int j=n; j < m; j++) {      sb.append(separator);      sb.append(rows[i][j]);      separator[0]=',';    }    sb.append(')');    sb.append('\n');  }  return sb.toString();}  }
class C{  public void modifyExport(String id,IsilonExport exp) throws IsilonException {  modify(_baseUrl.resolve(URI_NFS_EXPORTS),id,"export",exp);}  }
class C{  public void adjust(long delta){  if (callbacks == null) {    return;  }  for (  ScheduleAdjustmentCallback callback : callbacks) {    callback.adjust(delta);  }}  }
class C{  public void push(int state_num){  vstack.push(new Integer(state_num));}  }
class C{  public View addProperty(String name){  properties.put(name,new ViewProperty(name,null));  return this;}  }
class C{  public static boolean isGreater(double d1,double d2){  if (Double.isNaN(d1) || Double.isNaN(d2)) {    return false;  }  return Double.compare(d1,d2) > 0;}  }
class C{  private void checkNotEqual(UnknownFieldSet s1,UnknownFieldSet s2){  String equalsError=String.format("%s should not be equal to %s",s1,s2);  assertFalse(equalsError,s1.equals(s2));  assertFalse(equalsError,s2.equals(s1));  assertFalse(String.format("%s should have a different hash code from %s",s1,s2),s1.hashCode() == s2.hashCode());}  }
class C{  private void handleUnlockOrInstall(){  if (isFinishing()) {    return;  }switch (mKeyStore.state()) {case UNINITIALIZED:{      ensureKeyGuard();      return;    }case LOCKED:{    new UnlockDialog();    return;  }case UNLOCKED:{  if (!checkKeyGuardQuality()) {    new ConfigureKeyGuardDialog();    return;  }  installIfAvailable();  finish();  return;}}}  }
class C{  @Override public void draw(GL2 gl){  gl.glPushMatrix();  float[] translate=GLScene.P(translateX,translateY);  gl.glTranslatef(translate[0],translate[1],translate[2]);  gl.glScalef(scaleX,scaleY,scaleZ);  gl.glRotated(rotation * 180 / Math.PI,0,0,1);  gl.glBegin(GL2.GL_LINE_STRIP);  GLPanel.V(gl,controlPoints[0].x,controlPoints[0].y);  GLPanel.V(gl,controlPoints[1].x,controlPoints[1].y);  GLPanel.V(gl,controlPoints[2].x,controlPoints[2].y);  if (controlPoints.length == 4) {    GLPanel.V(gl,controlPoints[3].x,controlPoints[3].y);  }  GLPanel.V(gl,controlPoints[0].x,controlPoints[0].y);  gl.glEnd();  gl.glPopMatrix();}  }
class C{  protected void sequence_Wildcard(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private CAddressSpaceFunctions(){}  }
class C{  void cancelStatement(String targetSessionId,int statementId){  if (StringUtils.equals(targetSessionId,this.sessionId)) {    Command cmd=(Command)cache.getObject(statementId,false);    cmd.cancel();  }}  }
class C{  public boolean isReady(){  return true;}  }
class C{  public String formatCreateFS(String name,String type,String initialSizeInMB,String finalSizeInMB,String pool,String desc,boolean thin,String id){  StringBuilder cmd=new StringBuilder();  cmd.append(" -name ");  cmd.append(name);  cmd.append(" -type ");  cmd.append(type);  cmd.append(" -create ");  pool="'" + pool + "'";  if (thin) {    cmd.append(" size=" + initialSizeInMB + "M");    cmd.append(" pool=" + pool);    cmd.append(" -thin ");    cmd.append("yes");    cmd.append(" -auto_extend ");    cmd.append("yes");    cmd.append(" -hwm ");    cmd.append("90%");    cmd.append(" -max_size ");    cmd.append(finalSizeInMB + "M");  } else {    cmd.append(" size=" + finalSizeInMB + "M");    cmd.append(" pool=" + pool);    cmd.append(" -thin ");    cmd.append("no");    cmd.append(" -auto_extend ");    cmd.append("no");  }  if (id != null && !(id.isEmpty())) {    cmd.append(" -o ");    cmd.append("id=" + id);  }  cmd.append(" -option ");  cmd.append(" slice=y ");  cmd.append(" log_type=split ");  return cmd.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.EVENT_SOURCE;}  }
class C{  public static String convertMIMEtoPrettyPrint(String mimetype){  if (mimeType2HumanReadable.containsKey(mimetype)) {    return mimeType2HumanReadable.get(mimetype);  }  if (mimetype.split("/").length >= 2)   return mimetype.split("/")[1].toUpperCase() + " file";  return "Unknown type";}  }
class C{  public static void assertNotEqual(Object expected,Object actual){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ")");  }  TestUtils.assertBool(!expected.equals(actual));}  }
class C{  private List<ProtectionSystem> sortProtectionSystems(Set<ProtectionSystem> protectionSystems){  List<ProtectionSystem> protectionSystemsLst=new ArrayList<ProtectionSystem>(protectionSystems);  if (protectionSystems.size() > 1) {    _log.info("Sorting candidate protection systems by CG last created time.");    _log.info("Before sort: " + protectionSystemsToString(protectionSystems));    ProtectionSystemComparator comparator=new ProtectionSystemComparator();    Collections.sort(protectionSystemsLst,comparator);    _log.info("After sort: " + protectionSystemsToString(protectionSystemsLst));  }  return protectionSystemsLst;}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  private void drawBar(SupportSeriesRender supportSeriesRender,Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,double value,Paint paint){  float temp;  if (xMin > xMax) {    temp=xMin;    xMin=xMax;    xMax=temp;  }  if (yMin > yMax) {    temp=yMin;    yMin=yMax;    yMax=temp;  }  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (supportSeriesRender.isShowBarChartShadow()) {    paint.setColor(supportSeriesRender.getBarChartShadowColor());    canvas.drawRect(Math.round(xMin),0,Math.round(xMax),canvas.getHeight(),paint);    paint.setColor(renderer.getColor());  }  if (supportSeriesRender.isColorLevelValid() && supportSeriesRender.getColorLevelList().size() > 0) {    paint.setColor(supportSeriesRender.getLevelColorByValue(value));  }  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  @Override public String toString(){  return "null";}  }
class C{  Type fold(int opcode,List<Type> argtypes){  int argCount=argtypes.length();  if (argCount == 1)   return fold1(opcode,argtypes.head); else   if (argCount == 2)   return fold2(opcode,argtypes.head,argtypes.tail.head); else   throw new AssertionError();}  }
class C{  public PDFRenderer(PDFPage page,ImageInfo imageinfo,Bitmap bi){  super();  this.page=page;  this.imageinfo=imageinfo;  this.imageRef=new WeakReference<BiCa>(new BiCa(bi,g));  this.cmdCnt=0;}  }
class C{  static String toHex(byte[] data){  StringBuffer sb=new StringBuffer(data.length * 2);  for (int i=0; i < data.length; i++) {    sb.append(hexc[(data[i] >> 4) & 0x0f]);    sb.append(hexc[data[i] & 0x0f]);  }  return sb.toString();}  }
class C{  public void reuse(Tag tag){  tag.release();  Queue<Tag> queue=getQueue(tag.getClass().getName());  queue.add(tag);}  }
class C{  public void stopHttpTransfers(){  List<Transfer> transfers=new ArrayList<>();  transfers.addAll(httpDownloads);  for (  Transfer t : transfers) {    if (t instanceof Transfer && !t.isComplete() && t.isDownloading()) {      t.remove(false);    }  }}  }
class C{  public StringBand append(long l){  return append(Long.toString(l));}  }
class C{  public void reset(Address start,Address end,int blockNum){  start_=start;  end_=end;  blockNum_=blockNum;}  }
class C{  public PrintWriterResponseWrapper(PrintWriter writer,SlingHttpServletResponse wrappedResponse){  super(wrappedResponse);  this.writer=writer;}  }
class C{  public String toString(){  return JSDocSerializer.toJSDocString(this);}  }
class C{  public void flush(){  final BigdataSailRepositoryConnection cxn=tlTx.get();  if (cxn != null) {    Code.wrapThrow(null);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case USER_MAP:    return isSetUserMap();case XTRUCTS:  return isSetXtructs();}throw new IllegalStateException();}  }
class C{  public static double gain(ImpurityScore wholeData,double wholeScale,ImpurityScore... splits){  double sumOfAllSums=wholeScale * wholeData.sumOfWeights;  if (splits[0].impurityMeasure == ImpurityMeasure.NMI) {    double mi=0, splitEntropy=0.0, classEntropy=0.0;    for (int c=0; c < wholeData.counts.length; c++) {      final double p_c=wholeScale * wholeData.counts[c] / sumOfAllSums;      if (p_c <= 0.0)       continue;      double logP_c=log(p_c);      classEntropy+=p_c * logP_c;      for (int s=0; s < splits.length; s++) {        final double p_s=splits[s].sumOfWeights / sumOfAllSums;        if (p_s <= 0)         continue;        final double p_cs=splits[s].counts[c] / sumOfAllSums;        if (p_cs <= 0)         continue;        mi+=p_cs * (log(p_cs) - logP_c - log(p_s));        if (c == 0)         splitEntropy+=p_s * log(p_s);      }    }    splitEntropy=abs(splitEntropy);    classEntropy=abs(classEntropy);    return 2 * mi / (splitEntropy + classEntropy);  }  double splitScore=0.0;  boolean useSplitInfo=splits[0].impurityMeasure == ImpurityMeasure.INFORMATION_GAIN_RATIO;  if (useSplitInfo) {    double splitInfo=1.0;    for (    ImpurityScore split : splits) {      double p=split.getSumOfWeights() / sumOfAllSums;      if (p <= 0)       continue;      splitScore+=p * split.getScore();      splitInfo+=p * -log(p);    }    return (wholeData.getScore() - splitScore) / splitInfo;  } else {    for (    ImpurityScore split : splits) {      double p=split.getSumOfWeights() / sumOfAllSums;      if (p <= 0)       continue;      splitScore+=p * split.getScore();    }    return wholeData.getScore() - splitScore;  }}  }
class C{  public boolean isDigitalGoods(){  return digitalGoods;}  }
class C{  public ExtractorException(String msg,Throwable cause,String eventId){  super(msg,cause);  this.eventId=eventId;}  }
class C{  public boolean hasThree(){  DoubleNode<IPoint> p=points.first();  int ct=0;  while (p != null) {    ct++;    p=p.next();    if (ct > 2)     return true;  }  return false;}  }
class C{  public static IndexType createPrimaryKey(boolean persistent,boolean hash){  IndexType type=new IndexType();  type.primaryKey=true;  type.persistent=persistent;  type.hash=hash;  type.unique=true;  return type;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  private double scaleFactorUsingBlend(){  int i, j, lowestcount=0;  double lowest=-1.0, nextlowest=-1.0;  double root, broot, up, bot;  double aimfor, min_val=9e300, scale=1.0;  double avgprob=0.0, minprob=0.0, min_pos=0.0;  KStarWrapper botvals=new KStarWrapper();  KStarWrapper upvals=new KStarWrapper();  KStarWrapper vals=new KStarWrapper();  m_Distances=new double[m_NumInstances];  for (j=0; j < m_NumInstances; j++) {    if (m_TrainSet.instance(j).isMissing(m_AttrIndex)) {      m_Distances[j]=-1.0;    } else {      m_Distances[j]=Math.abs(m_TrainSet.instance(j).value(m_AttrIndex) - m_Test.value(m_AttrIndex));      if ((m_Distances[j] + 1e-5) < nextlowest || nextlowest == -1.0) {        if ((m_Distances[j] + 1e-5) < lowest || lowest == -1.0) {          nextlowest=lowest;          lowest=m_Distances[j];          lowestcount=1;        } else         if (Math.abs(m_Distances[j] - lowest) < 1e-5) {          lowestcount++;        } else {          nextlowest=m_Distances[j];        }      }      m_ActualCount++;    }  }  if (nextlowest == -1 || lowest == -1) {    scale=1.0;    m_SmallestProb=m_AverageProb=1.0;    return scale;  } else {    root=1.0 / (nextlowest - lowest);    i=0;    aimfor=(m_ActualCount - lowestcount) * (double)m_BlendFactor / 100.0 + lowestcount;    if (m_BlendFactor == 0) {      aimfor+=1.0;    }    bot=0.0 + ROOT_FINDER_ACCURACY / 2.0;    up=root * 16;    calculateSphereSize(bot,botvals);    botvals.sphere-=aimfor;    calculateSphereSize(up,upvals);    upvals.sphere-=aimfor;    if (botvals.sphere < 0) {      min_pos=bot;      avgprob=botvals.avgProb;      minprob=botvals.minProb;    } else     if (upvals.sphere > 0) {      min_pos=up;      avgprob=upvals.avgProb;      minprob=upvals.minProb;    } else {      for (; ; ) {        calculateSphereSize(root,vals);        vals.sphere-=aimfor;        if (Math.abs(vals.sphere) < min_val) {          min_val=Math.abs(vals.sphere);          min_pos=root;          avgprob=vals.avgProb;          minprob=vals.minProb;        }        if (Math.abs(vals.sphere) <= ROOT_FINDER_ACCURACY) {          break;        }        if (vals.sphere > 0.0) {          broot=(root + up) / 2.0;          bot=root;          root=broot;        } else {          broot=(root + bot) / 2.0;          up=root;          root=broot;        }        i++;        if (i > ROOT_FINDER_MAX_ITER) {          root=min_pos;          break;        }      }    }    m_SmallestProb=minprob;    m_AverageProb=avgprob;switch (m_MissingMode) {case M_DELETE:      m_MissingProb=0.0;    break;case M_NORMAL:  m_MissingProb=1.0;break;case M_MAXDIFF:m_MissingProb=m_SmallestProb;break;case M_AVERAGE:m_MissingProb=m_AverageProb;break;}scale=min_pos;return scale;}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (moduleFilterType: ");  result.append(moduleFilterType);  result.append(')');  return result.toString();}  }
class C{  public CallResponse Call(CallRequest req) throws ServiceFaultException, ServiceResultException {  return (CallResponse)channel.serviceRequest(req);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String[] args){  TestSerialVersionUID tester=new TestSerialVersionUID();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void testIsDuplicateString(){  int count=10000;  ActiveMQMessageAudit audit=new ActiveMQMessageAudit();  IdGenerator idGen=new IdGenerator();  List<String> list=new ArrayList<>();  for (int i=0; i < count; i++) {    String id=idGen.generateId();    list.add(id);    assertFalse(audit.isDuplicate(id));  }  List<String> windowList=list.subList(list.size() - 1 - audit.getAuditDepth(),list.size() - 1);  for (  String id : windowList) {    assertTrue("duplicate, id:" + id,audit.isDuplicate(id));  }}  }
class C{  public static int decodeChannelId(int header,int byteCount){  if (byteCount == 1) {    return (header & 0x3f);  } else   if (byteCount == 2) {    return 64 + (header & 0xff);  } else {    return 64 + ((header >> 8) & 0xff) + ((header & 0xff) << 8);  }}  }
class C{  public void resolveError(final Fragment fragment,final GraphResponse response){  startLogin(new FragmentStartActivityDelegate(fragment),createLoginRequestFromResponse(response));}  }
class C{  @Override public boolean canBeShortAddress(int address){  if (address < 128) {    return true;  }  return false;}  }
class C{  public void receiveOneToOneFileDeliveryStatus(ImdnDocument imdn,ContactId contact){  ImdnDocument.DeliveryStatus status=imdn.getStatus();  long timestamp=imdn.getDateTime();  String fileTransferId=imdn.getMsgId();switch (status) {case DELIVERED:    mImService.getDeliveryExpirationManager().cancelDeliveryTimeoutAlarm(fileTransferId);  if (mMessagingLog.setFileTransferDelivered(fileTransferId,timestamp)) {    mOneToOneFileTransferBroadcaster.broadcastStateChanged(contact,fileTransferId,State.DELIVERED,ReasonCode.UNSPECIFIED);  }break;case DISPLAYED:mImService.getDeliveryExpirationManager().cancelDeliveryTimeoutAlarm(fileTransferId);if (mMessagingLog.setFileTransferDisplayed(fileTransferId,timestamp)) {mOneToOneFileTransferBroadcaster.broadcastStateChanged(contact,fileTransferId,State.DISPLAYED,ReasonCode.UNSPECIFIED);}break;case ERROR:case FAILED:case FORBIDDEN:ReasonCode reasonCode=imdnToFileTransferFailedReasonCode(imdn);if (mMessagingLog.setFileTransferStateAndReasonCode(fileTransferId,State.FAILED,reasonCode)) {mOneToOneFileTransferBroadcaster.broadcastStateChanged(contact,fileTransferId,State.FAILED,reasonCode);}break;}}  }
class C{  public MemoryModule(final com.google.security.zynamics.binnavi.debug.models.processmanager.MemoryModule module){  this.module=Preconditions.checkNotNull(module,"Error: Module argument can not be null");}  }
class C{  public void addPipeline(String name,String stages,String storeNames){  conf.setString(ReplicatorConf.PIPELINES,name);  conf.setString(ReplicatorConf.PIPELINE_ROOT + "." + name,stages);  if (storeNames != null)   conf.setString(ReplicatorConf.PIPELINE_ROOT + "." + name+ ".stores",storeNames);}  }
class C{  private int checkValidVideo(Uri videoUri){  if (videoUri == null)   return -2;  long duration=MediaUtils.getDuration(getApplicationContext(),MediaUtils.getRealVideoPathFromURI(getContentResolver(),videoUri));  if (duration == 0) {    duration=MediaUtils.getDuration(getApplicationContext(),videoUri);  }  if (mMediaOptions.getMaxVideoDuration() != Integer.MAX_VALUE && duration >= mMediaOptions.getMaxVideoDuration() + 1000) {    return 0;  } else   if (duration == 0 || duration < mMediaOptions.getMinVideoDuration()) {    return -1;  }  return 1;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void resetControlRolls(){  controlRolls.removeAllElements();}  }
class C{  @Override public boolean isRepeatable(){  for (int i=0; i < parts.length; i++) {    if (!parts[i].isRepeatable()) {      return false;    }  }  return true;}  }
class C{  public ColorBlobDetector(ColorHSV colorMinimum,ColorHSV colorMaximum){  setColorRadius(colorMinimum,colorMaximum);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe filter (incl. options) that was used to generate\n" + "\tthe source code.","W",1,"-W <classname and options>"));  result.addElement(new Option("\tThe classname of the generated source code.","S",1,"-S <classname>"));  result.addElement(new Option("\tThe training set with which the source code was generated.","t",1,"-t <file>"));  result.addElement(new Option("\tThe class index of the training set. 'first' and 'last' are\n" + "\tvalid indices.\n" + "\t(default: none)","c",1,"-c <index>"));  return result.elements();}  }
class C{  public static Unsigned absoluteDifference(PointerBase pointer1,PointerBase pointer2){  Pointer p1=(Pointer)pointer1;  Pointer p2=(Pointer)pointer2;  final Unsigned result;  if (p1.aboveOrEqual(p2)) {    result=p1.subtract(p2);  } else {    result=p2.subtract(p1);  }  return result;}  }
class C{  public void scanLeDevice(boolean enable){  this.scanLeDevice(enable,SCAN_PERIOD);}  }
class C{  @NotNull public List<GitlabProject> fetchProjects() throws Exception {  final ResponseHandler<List<GitlabProject>> handler=new GsonMultipleObjectsDeserializer<GitlabProject>(GSON,LIST_OF_PROJECTS_TYPE);  final String projectUrl=getRestApiUrl("projects");  final List<GitlabProject> result=new ArrayList<GitlabProject>();  int pageNum=1;  while (true) {    final URI paginatedProjectsUrl=new URIBuilder(projectUrl).addParameter("page",String.valueOf(pageNum)).addParameter("per_page","30").build();    final List<GitlabProject> page=getHttpClient().execute(new HttpGet(paginatedProjectsUrl),handler);    if (page.isEmpty()) {      break;    }    result.addAll(page);    pageNum++;  }  myProjects=result;  return Collections.unmodifiableList(myProjects);}  }
class C{  private void trimDelta(JavaElementDelta elementDelta){  if (elementDelta.getKind() == IJavaElementDelta.REMOVED) {    IJavaElementDelta[] children=elementDelta.getAffectedChildren();    for (int i=0, length=children.length; i < length; i++) {      elementDelta.removeAffectedChild((JavaElementDelta)children[i]);    }  } else {    IJavaElementDelta[] children=elementDelta.getAffectedChildren();    for (int i=0, length=children.length; i < length; i++) {      trimDelta((JavaElementDelta)children[i]);    }  }}  }
class C{  public static List<String[]> createFormulaListContent(List<String> serializedFormulaList,String labelingScheme){  List<Formula> formulaList=ModelHelper.deserializeFormulaList(serializedFormulaList);  return (createListContent(formulaList,labelingScheme));}  }
class C{  public static final void copy(OutputStream out,InputStream in,boolean closeIS,boolean closeOS) throws IOException {  copy(in,out,closeIS,closeOS);}  }
class C{  AcceptTcp(PortTcp port,ServerSocketBar serverSocket){  Objects.requireNonNull(port);  Objects.requireNonNull(serverSocket);  _port=port;  _serverSocket=serverSocket;}  }
class C{  public AnimatableRectValue(AnimationTarget target,float x,float y,float w,float h){  super(target);  this.x=x;  this.y=y;  this.width=w;  this.height=h;}  }
class C{  public void test_getInstance(){  Calendar us_calendar=Calendar.getInstance(Locale.US);  Calendar de_calendar=Calendar.getInstance(Locale.GERMAN);  assertEquals(Calendar.SUNDAY,us_calendar.getFirstDayOfWeek());  assertEquals(Calendar.MONDAY,de_calendar.getFirstDayOfWeek());  Calendar gmt_calendar=Calendar.getInstance(TimeZone.getTimeZone("GMT"),Locale.US);  assertEquals(TimeZone.getTimeZone("GMT"),gmt_calendar.getTimeZone());  Calendar est_calendar=Calendar.getInstance(TimeZone.getTimeZone("EST"),Locale.US);  assertEquals(TimeZone.getTimeZone("EST").getID(),est_calendar.getTimeZone().getID());}  }
class C{  public Set<Group> findDirectParentGroups(String tenantName,PrincipalId principalId) throws Exception {  return getService().findDirectParentGroups(tenantName,principalId,this.getServiceContext());}  }
class C{  public GeneralNames(DerValue derVal) throws IOException {  this();  if (derVal.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for GeneralNames.");  }  if (derVal.data.available() == 0) {    throw new IOException("No data available in " + "passed DER encoded value.");  }  while (derVal.data.available() != 0) {    DerValue encName=derVal.data.getDerValue();    GeneralName name=new GeneralName(encName);    add(name);  }}  }
class C{  public static <V1,V2>MultipleObjectsBundle makeSimple(SimpleTypeInformation<? super V1> type1,List<? extends V1> data1,SimpleTypeInformation<? super V2> type2,List<? extends V2> data2){  MultipleObjectsBundle bundle=new MultipleObjectsBundle();  bundle.appendColumn(type1,data1);  bundle.appendColumn(type2,data2);  return bundle;}  }
class C{  private void sendNotify(Uri uri,int userHandle){  boolean backedUpDataChanged=false;  String property=null, table=uri.getPathSegments().get(0);  final boolean isGlobal=table.equals(TABLE_GLOBAL);  if (table.equals(TABLE_SYSTEM)) {    property=Settings.System.SYS_PROP_SETTING_VERSION;    backedUpDataChanged=true;  } else   if (table.equals(TABLE_SECURE)) {    property=Settings.Secure.SYS_PROP_SETTING_VERSION;    backedUpDataChanged=true;  } else   if (isGlobal) {    property=Settings.Global.SYS_PROP_SETTING_VERSION;    backedUpDataChanged=true;  }  if (property != null) {    long version=SystemProperties.getLong(property,0) + 1;    if (LOCAL_LOGV)     Log.v(TAG,"property: " + property + "="+ version);    SystemProperties.set(property,Long.toString(version));  }  if (backedUpDataChanged) {    mBackupManager.dataChanged();  }  String notify=uri.getQueryParameter("notify");  if (notify == null || "true".equals(notify)) {    final int notifyTarget=isGlobal ? UserHandle.USER_ALL : userHandle;    final long oldId=Binder.clearCallingIdentity();    try {      getContext().getContentResolver().notifyChange(uri,null,true,notifyTarget);    }  finally {      Binder.restoreCallingIdentity(oldId);    }    if (LOCAL_LOGV)     Log.v(TAG,"notifying for " + notifyTarget + ": "+ uri);  } else {    if (LOCAL_LOGV)     Log.v(TAG,"notification suppressed: " + uri);  }}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.156 -0500",hash_original_method="16FAB9FE80C49A02BC9E8853407FE291",hash_generated_method="CA2795845E2D065877529BFE6EAB4FB6") public int body(int articleNumber) throws IOException {  return sendCommand(NNTPCommand.BODY,Integer.toString(articleNumber));}  }
class C{  public boolean canRead(String path){  try {    ZipEntry entry=getZipEntry(path);    return entry != null && !entry.isDirectory();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);    return false;  }}  }
class C{  @Override public void process(HashMap<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    entry.clear();    entry.put(e.getKey(),e.getValue());    boolean contains=keyvals.containsKey(entry);    if ((contains && !inverse) || (!contains && inverse)) {      HashMap<K,V> dtuple=new HashMap<K,V>(1);      dtuple.put(cloneKey(e.getKey()),cloneValue(e.getValue()));      filter.emit(dtuple);    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.POSTFIX_EXPRESSION__OP:setOp((PostfixOperator)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void copyArea(int x,int y,int width,int height,int destX,int destY){  if (debugLog()) {    info().log(toShortString() + " Copying area from: " + new Rectangle(x,y,width,height)+ " to: "+ new Point(destX,destY));  }  graphics.copyArea(x,y,width,height,destX,destY);}  }
class C{  public void discoverAll(AspectManager manager){  for (  Entry<AspectItem,List<Aspect>> e : manager.getMatchedAspects().entrySet()) {    for (    Aspect a : e.getValue())     this.addDiscovery(e.getKey(),a.type);  }  this.saveContainer();}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  public void e(Exception ex){  if (debug) {    if (logLevel <= Log.ERROR) {      Log.e(tag,"error",ex);    }  }}  }
class C{  public void addListener(JAMonListener listenerToAdd){synchronized (lockObj) {    if (listener == null || listenerToAdd == null)     listener=listenerToAdd; else     listener=addCompositeListener(listenerToAdd);  }}  }
class C{  public static void addImportStatement(PsiJavaFile javaFile,String importStatementOnDemand){  PsiElementFactory factory=JavaPsiFacade.getInstance(javaFile.getProject()).getElementFactory();  PsiImportStatement is=factory.createImportStatementOnDemand(fixImportStatement(importStatementOnDemand));  PsiImportList importList=javaFile.getImportList();  if (importList != null) {    importList.add(is);  }  JavaCodeStyleManager.getInstance(javaFile.getProject()).optimizeImports(javaFile);}  }
class C{  public String convertNominalTipText(){  return "Convert all nominal attributes to binary ones before building the tree. " + "This means that all splits in the final tree will be binary.";}  }
class C{  private static INaviCodeNode insertCodeNode(final INaviView target,final INaviCodeNode node){  final INaviCodeNode sourceNode=(INaviCodeNode)node.cloneNode();  final Iterable<INaviInstruction> instructions=sourceNode.getInstructions();  final ArrayList<INaviInstruction> instructionList=Lists.newArrayList(instructions);  CCodeNode codeNode;  try {    codeNode=target.getContent().createCodeNode(sourceNode.getParentFunction(),instructionList);  } catch (  final MaybeNullException e) {    codeNode=target.getContent().createCodeNode(null,instructionList);  }  if (sourceNode.getComments().getGlobalCodeNodeComment() != null) {    codeNode.getComments().initializeGlobalCodeNodeComment(sourceNode.getComments().getGlobalCodeNodeComment());  }  if (sourceNode.getComments().getLocalCodeNodeComment() != null) {    codeNode.getComments().initializeLocalCodeNodeComment(sourceNode.getComments().getLocalCodeNodeComment());  }  final Iterable<INaviInstruction> newInstructions=codeNode.getInstructions();  for (int i=0; i < Iterables.size(instructions); i++) {    codeNode.getComments().initializeLocalInstructionComment(Iterables.get(newInstructions,i),sourceNode.getComments().getLocalInstructionComment(Iterables.get(instructions,i)));  }  return codeNode;}  }
class C{  @Override public void initialize() throws SailException {  super.initialize();  ForwardChainingRDFSInferencerConnection con=getConnection();  try {    con.begin();    con.addAxiomStatements();    con.commit();  }  finally {    con.close();  }}  }
class C{  public static WebDoc create(boolean plain){  return create(plain,null,false);}  }
class C{  private void exit(){  log.info("exit");  Object result=doIt(START,"exit",null);  ProcessInfo pi=new ProcessInfo("Exit",0);  pi.setClassName(REMOTE);  pi.setSerializableObject(m_replicationStart);  try {    m_serverRemote.process(new Properties(),pi);  } catch (  Exception ex) {  }}  }
class C{  public KeyValueUtil(String id){  this.id=id;}  }
class C{  private void logToolsversions(){  String[] oat2dex={"java","-jar",S.getAot2Dex(),"-v"};  String[] smali={"java","-jar",S.getSmali(),"-v"};  String[] backsmali={"java","-jar",S.getBaksmali(),"-v"};  String[] zipalign={new File(S.getZipalign()).getAbsolutePath(),"-v"};  CmdUtils.runCommand(oat2dex);  CmdUtils.runCommand(smali);  CmdUtils.runCommand(backsmali);  CmdUtils.runCommand(zipalign);}  }
class C{  static public int unpackInt(ByteBuffer bb) throws IOException {  for (int offset=0, result=0; offset < 32; offset+=7) {    int b=bb.get() & 0xffff;    result|=(b & 0x7F) << offset;    if ((b & 0x80) == 0) {      return result;    }  }  throw new Error("Malformed integer.");}  }
class C{  public void endElement() throws IOException {  Element element=currentElement();  writeCloseTag(element.nsAlias,element.name);  defaultNamespace=element.enclosingDefaultNamespace;  elementStack.pop();  if (elementStack.size() == 1) {    if (this.shouldWriteHeaderAndFooter()) {      writeFooter();    }    writeEndOutput();  }}  }
class C{  public void testUnivariateMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA={-0.05294175,-0.03944338,-0.02190217,0.00120807,-0.00924771,-0.00316402,-0.00778205,-0.00565778};  System.out.println("Kraskov comparison 1 - univariate random data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),kNNs,expectedFromMILCA);  afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  data=afr.getDouble2DMatrix();  double[] expectedFromMILCA_2={-0.04614525,-0.00861460,-0.00164540,-0.01130354,-0.01339670,-0.00964035,-0.00237072,-0.00096891};  System.out.println("Kraskov comparison 2 - univariate random data 2");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),kNNs,expectedFromMILCA_2);}  }
class C{  protected static List validateQueryFields(AxSfQueryField field,int id,int fldid,Locale locale,String sessionID,AxSf axsfQ,Integer bookId,SimpleDateFormat shortFormatter,String entidad) throws AttributesException, BookException, SessionException, ValidationException {  List result=new ArrayList();  Map idsToValidate=new HashMap();  Map controlsMemo=new HashMap();  try {    if (field.getValue().getClass().equals(ArrayList.class)) {      if (((List)field.getValue()).size() != 2 && !field.getOperator().equals(Keys.BARRA)) {        result.add(new Integer(id));      }    }    if ((fldid == 2 || fldid == 4) && field.getValue().getClass().equals(Date.class)) {      String auxDate=field.getValue().toString();      try {        if (auxDate.length() > 10) {          result.add(new Integer(id));        }        shortFormatter.parse(auxDate);        if (shortFormatter.getCalendar().get(Calendar.YEAR) < 1970) {          result.add(new Integer(id));        }      } catch (      Exception e) {        result.add(new Integer(id));      }    }    if ((fldid == 5 || fldid == 7 || fldid == 8)) {      if (!field.getValue().getClass().equals(List.class)) {        idsToValidate.put(new Integer(fldid),field.getValue());        controlsMemo.put(new Integer(fldid),new Integer(id));      }    }    if (axsfQ instanceof AxSfIn) {      if ((fldid == 13 || fldid == 16)) {        if (!field.getValue().getClass().equals(List.class)) {          idsToValidate.put(new Integer(fldid),field.getValue());          controlsMemo.put(new Integer(fldid),new Integer(id));        }      }      if (fldid > com.ieci.tecdoc.common.isicres.Keys.EREG_FDR_MATTER) {        if (AttributesSession.getExtendedValidationFieldValueWithTVNull(sessionID,bookId,fldid,field.getValue().toString(),locale,entidad) == null) {          result.add(new Integer(id));        }      }    } else {      if ((fldid == 12)) {        if (!field.getValue().getClass().equals(List.class)) {          idsToValidate.put(new Integer(fldid),field.getValue());          controlsMemo.put(new Integer(fldid),new Integer(id));        }      }      if (fldid > com.ieci.tecdoc.common.isicres.Keys.SREG_FDR_MATTER) {        if (AttributesSession.getExtendedValidationFieldValueWithTVNull(sessionID,bookId,fldid,field.getValue().toString(),locale,entidad) == null) {          result.add(new Integer(id));        }      }    }  } catch (  Exception e) {    result.add(new Integer(id));  }  if (!idsToValidate.isEmpty()) {    List aux=AttributesSession.validateFixedValues(sessionID,bookId,idsToValidate,false,entidad);    Integer auxFldid=null;    for (Iterator it=aux.iterator(); it.hasNext(); ) {      auxFldid=(Integer)it.next();      result.add(controlsMemo.get(auxFldid));    }  }  return result;}  }
class C{  public String generateRemoteUserName(RemoteCandidate remoteCandidate,LocalCandidate localCandidate){  return generateUserName(localCandidate,remoteCandidate);}  }
class C{  public boolean isGet(){  return this.opType == OP_TYPE_GET;}  }
class C{  public final AC shrinkWeight(float w,int... indexes){  return shrink(w,indexes);}  }
class C{  public int addLineStyle(LineStyle ls){  return linestyles.add(ls) ? linestyles.lastIndexOf(ls) + 1 : 0;}  }
class C{  public static boolean isLoggable(int level){  return sAlwaysLoggable || android.util.Log.isLoggable(TAG,level);}  }
class C{  public boolean canWriteName(final int length){  return mDataSize + length + 1 <= mLimit && mPointers.size() + 4 <= mLimit;}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public final TextBuilder append(Text txt){  return (txt == null) ? append("null") : append(txt,0,txt.length());}  }
class C{  public CharEscaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  final public boolean endsWith(final CharSequence suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a=array;  while (i-- != 0)   if (suffix.charAt(i) != a[--length])   return false;  return true;}  }
class C{  public static void main(String[] args) throws Exception {  CommandLine cmdLine=null;  try {    cmdLine=new CommandLine(args);  } catch (  final Exception e) {    System.out.println("Failed due to invalid parameters. Use '-h' for more details.");    System.exit(1);  }  initClassLoader();  ZapBootstrap bootstrap=createZapBootstrap(cmdLine);  try {    int rc=bootstrap.start();    if (rc != 0) {      System.exit(rc);    }  } catch (  final Exception e) {    logger.fatal(e.getMessage(),e);    System.exit(1);  }}  }
class C{  private double round(double value,int places){  if (places < 0)   throw new IllegalArgumentException();  long factor=(long)Math.pow(10,places);  value=value * factor;  long tmp=Math.round(value);  return (double)tmp / factor;}  }
class C{  public void testUnpackMultipleBags() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"v1","v2"}});  baggage.put("bag2",new Object[][]{{"v3","v4"}});  baggage.put("bag3",new Object[][]{{"v5","v6"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").unpack("bag2","e","f").unpack("bag3","g","h").emit("test1","a","b","c","d","e","f","g","h").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  advice.advise("vva","vvc");  advice.advise("vva","vve");  results.expectTuple("vva","vvb","v1","v2","v3","v4","v5","v6");  results.expectTuple("vva","vvc","v1","v2","v3","v4","v5","v6");  results.expectTuple("vva","vve","v1","v2","v3","v4","v5","v6");  results.check();  assertTrue("Expect 3 output tuple emitted",results.emitted.size() == 3);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void reverse(List<?> list){  int size=list.size();  if (size < REVERSE_THRESHOLD || list instanceof RandomAccess) {    for (int i=0, mid=size >> 1, j=size - 1; i < mid; i++, j--)     swap(list,i,j);  } else {    ListIterator fwd=list.listIterator();    ListIterator rev=list.listIterator(size);    for (int i=0, mid=list.size() >> 1; i < mid; i++) {      Object tmp=fwd.next();      fwd.set(rev.previous());      rev.set(tmp);    }  }}  }
class C{  public void unloadQuest(String questName){  IQuest quest=getQuest(questName);  if (quest == null) {    logger.error("Quest " + questName + " is not loaded",new Throwable());    return;  }  boolean res=quest.removeFromWorld();  if (res) {    quests.remove(quest);    logger.info("Unloading Quest: " + quest.getName());  } else {    logger.error(this.getClass() + " cannot be removed from the world");  }}  }
class C{  public JavaKind elementKind(){  return elementKind;}  }
class C{  private static List<Unit> findPlaneAttackersThatCanLand(final Territory start,final int maxDistance,final PlayerID player,final GameData data,final List<Territory> ignore,final List<Territory> checked){  if (checked.isEmpty()) {    return new ArrayList<>();  }  final IntegerMap<Territory> distance=new IntegerMap<>();  final IntegerMap<Unit> unitDistance=new IntegerMap<>();  final List<Unit> units=new ArrayList<>();  final Queue<Territory> q=new LinkedList<>();  Territory lz=null, ac=null;  final CompositeMatch<Unit> enemyPlane=new CompositeMatchAnd<>(Matches.UnitIsAir,Matches.unitIsOwnedBy(player),Matches.UnitCanMove);  final CompositeMatch<Unit> enemyCarrier=new CompositeMatchAnd<>(Matches.UnitIsCarrier,Matches.unitIsOwnedBy(player),Matches.UnitCanMove);  q.add(start);  Territory current=null;  distance.put(start,0);  while (!q.isEmpty()) {    current=q.remove();    if (distance.getInt(current) == maxDistance) {      break;    }    for (    final Territory neighbor : data.getMap().getNeighbors(current,TerritoryIsNotImpassableToAirUnits(data))) {      if (!distance.keySet().contains(neighbor)) {        q.add(neighbor);        distance.put(neighbor,distance.getInt(current) + 1);        if (lz == null && Matches.isTerritoryAllied(player,data).match(neighbor) && !neighbor.isWater()) {          lz=neighbor;        }        if ((ignore != null && ignore.contains(neighbor)) || (checked != null && checked.contains(neighbor))) {          for (          final Unit u : neighbor.getUnits()) {            if (ac == null && enemyCarrier.match(u)) {              ac=neighbor;            }          }        } else {          for (          final Unit u : neighbor.getUnits()) {            if (ac == null && enemyCarrier.match(u)) {              ac=neighbor;            }            if (enemyPlane.match(u)) {              unitDistance.put(u,distance.getInt(neighbor));            }          }        }      }    }  }  for (  final Unit u : unitDistance.keySet()) {    if (lz != null && Matches.UnitHasEnoughMovementForRoute(new Route(checked)).match(u)) {      units.add(u);    } else     if (ac != null && Matches.UnitCanLandOnCarrier.match(u) && Matches.UnitHasEnoughMovementForRoute(new Route(checked)).match(u)) {      units.add(u);    }  }  return units;}  }
class C{  public void tickInGround(){}  }
class C{  private static void unVerifySite(String siteUrl,SiteVerification siteVerification) throws IOException {  SiteVerification.WebResource.Delete deleteRequest=siteVerification.webResource().delete(siteUrl);  deleteRequest.execute();}  }
class C{  public FileLock(TraceSystem traceSystem,String fileName,int sleep){  this.trace=traceSystem == null ? null : traceSystem.getTrace(Trace.FILE_LOCK);  this.fileName=fileName;  this.sleep=sleep;}  }
class C{  public ChoiceDialog(JFrame parent,String title,String question,String[] choices,boolean isSingle){  super(parent,title,true);  initialize(parent,question,choices,isSingle,-1);}  }
class C{  public static void convolve(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,int edgeAction){  convolve(kernel,inPixels,outPixels,width,height,true,edgeAction);}  }
class C{  public boolean makeNotebookEntry(User user,Entry entry,boolean isAdmin,Errors errors){  if (entry == null) {    Errors.add(errors,errorMessages.errorEntryIsNull());    return false;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (!canUserModifyEntry(user,entry,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyThisEntry());    return false;  }  final Entry parent=getEntryById(entry.getParentId());  if (parent != null) {    removeEntryFromParent(entry,parent,false);  }  return true;}  }
class C{  public Vec4 extractForwardVector(){  return new Vec4(-this.m31,-this.m32,-this.m33);}  }
class C{  public int encodeBCI(int bci){  if (bci <= 0 || bci > getLength())   return bci;  Object map0=getInsnMap();  int i, len;  if (shrinkMaps && map0 instanceof byte[]) {    byte[] map=(byte[])map0;    len=map.length;    i=Arrays.binarySearch(map,(byte)(bci + Byte.MIN_VALUE));  } else   if (shrinkMaps && map0 instanceof short[]) {    short[] map=(short[])map0;    len=map.length;    i=Arrays.binarySearch(map,(short)(bci + Short.MIN_VALUE));  } else {    int[] map=(int[])map0;    len=map.length;    i=Arrays.binarySearch(map,bci);  }  assert (i != -1);  assert (i != 0);  assert (i != len);  assert (i != -len - 1);  return (i >= 0) ? i : len + bci - (-i - 1);}  }
class C{  public int size(){  return godeToDode.size();}  }
class C{  public static void mergeSort(long[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  long aux[]=(long[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex);}  }
class C{  public ModelPersistenceHandler(ResourceSet newResourceSet){  resourceSet=newResourceSet;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeNamespace;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(1);  employeeNamespace=testEmployee.getNamespaceURI();  assertNull("throw_Null",employeeNamespace);}  }
class C{  public static Unsigned max(Unsigned x,Unsigned y){  return (x.aboveOrEqual(y)) ? x : y;}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  private void initialize(){  setCheckingModel(new DefaultTreeCheckingModel(this.treeModel));  setCellRenderer(new DefaultCheckboxTreeCellRenderer());  addMouseListener(new NodeCheckListener());  this.selectionModel.setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);  setShowsRootHandles(true);  putClientProperty("JTree.lineStyle","Angled");}  }
class C{  private boolean checkInsertTrl(PO po,String adLanguage){  if (hasTranslation(po,adLanguage)) {    return true;  }  final boolean changed=po.insertTranslations();  if (changed) {    CacheMgt.get().reset(MMessage.Table_Name);  }  return changed;}  }
class C{  protected static void usage(final String[] args,final String msg,final int exitCode){  if (msg != null)   System.err.println(msg);  System.err.println("usage: [opts] journal [name]*");  System.err.println("    journal is the name of the journal file.");  System.err.println("    [name]* is the name of one or more indices (defaults to all).");  System.err.println("    [opts] is any of:");  System.err.println("       -m #\tThe branching factor for the output index segments.");  System.err.println("       -alg (FullyBuffered|TwoPass)\tThe algorithm to use.");  System.err.println("       -merge (true|false)\tWhen true, performs a compacting merge (default is merge).");  System.err.println("       -O outDir\tThe output directory.");  System.err.println("       -bufferNodes (true|false)\tWhen true, the nodes are fully buffered in memory (default true).");  System.exit(exitCode);}  }
class C{  public final static double[] arrayDegToRad(double[] degs){  for (int i=0; i < degs.length; i++) {    degs[i]=degToRad(degs[i]);  }  return degs;}  }
class C{  private int qtreeDecode64(ByteBuffer infile,LongArrayPointer a,int n,int nqx,int nqy,int nbitplanes){  int k, bit, b;  int nx2, ny2, nfx, nfy, c;  byte[] scratch;  int nqmax=nqx > nqy ? nqx : nqy;  int log2n=calculateLog2N(nqmax);  int nqx2=(nqx + 1) / 2;  int nqy2=(nqy + 1) / 2;  scratch=new byte[nqx2 * nqy2];  for (bit=nbitplanes - 1; bit >= 0; bit--) {    b=inputNybble(infile);    if (b == 0) {      readBdirect64(infile,a,n,nqx,nqy,scratch,bit);    } else     if (b != NYBBLE_MASK) {      throw new RuntimeException("Compression error");    } else {      scratch[0]=(byte)inputHuffman(infile);      nx2=1;      ny2=1;      nfx=nqx;      nfy=nqy;      c=1 << log2n;      for (k=1; k < log2n; k++) {        c=c >> 1;        nx2=nx2 << 1;        ny2=ny2 << 1;        if (nfx <= c) {          nx2-=1;        } else {          nfx-=c;        }        if (nfy <= c) {          ny2-=1;        } else {          nfy-=c;        }        qtreeExpand(infile,scratch,nx2,ny2,scratch);      }      qtreeBitins64(scratch,nqx,nqy,a,n,bit);    }  }  return 0;}  }
class C{  public static String uppercaseFirst(String str){  return str.substring(0,1).toUpperCase(Locale.getDefault()) + str.substring(1,str.length());}  }
class C{  void onWritingThreadFinished(WebSocketFrame closeFrame){synchronized (mThreadsLock) {    mWritingThreadFinished=true;    mClientCloseFrame=closeFrame;    if (mReadingThreadFinished == false) {      return;    }  }  onThreadsFinished();}  }
class C{  protected boolean isColumnNumeric(int colIndex){  if (m_ColumnIsNumeric == null)   return false; else   return m_ColumnIsNumeric[colIndex];}  }
class C{  private void onBackPressed(){  getContext().onBackPressed();}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public IndicatorCollector(Indicator indicator){  this(indicator,null,null);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public boolean confirmEnoughOffsetSources(int[][] sourcesOffsets){  if (countOfOffsetSources(sourcesOffsets) != numSources) {    throw new RuntimeException("Incorrect number of sources in offsets");  }  return true;}  }
class C{  public int hashCode(){  return toBitVector().hashCode();}  }
class C{  public static int centisecondsPerTick(int tps){  return 100 / tps;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.370 -0500",hash_original_method="FD2C3250D9E68CC4AB6807C768E508FC",hash_generated_method="2E5050873F38E2B1C5B23668BF8B665D") public static long longForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForLong();}  }
class C{  public static MapWayAttFilter createOverlandTrafficWayFilter(){  MapWayAttFilter filter=new MapWayAttFilter("highway");  filter.setAccepted("motorway");  filter.setAccepted("motorway_link");  filter.setAccepted("trunk");  filter.setAccepted("trunk_link");  filter.setAccepted("primary");  filter.setAccepted("primary_link");  return filter;}  }
class C{  public FastByteBuffer append(byte element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  public boolean isElementPresent(){  if (WebUIDriver.getWebDriver() == null) {    TestLogging.log("Web Driver is terminated! Exception might caught in last action.");    throw new RuntimeException("Web Driver is terminated! Exception might caught in last action.");  }  int count=0;  try {    count=WebUIDriver.getWebDriver().findElements(by).size();  } catch (  RuntimeException e) {    if (e instanceof InvalidSelectorException) {      TestLogging.log("Got InvalidSelectorException, retry");      WaitHelper.waitForSeconds(2);      count=WebUIDriver.getWebDriver().findElements(by).size();    } else     if ((e.getMessage() != null) && e.getMessage().contains("TransformedEntriesMap cannot be cast to java.util.List")) {      TestLogging.log("Got CastException, retry");      WaitHelper.waitForSeconds(2);      count=WebUIDriver.getWebDriver().findElements(by).size();    } else {      throw e;    }  }  if (count == 0) {    return false;  }  return true;}  }
class C{  public OperatorCreationException(int code,String className,Throwable cause){  super(createMessage(code,className,cause),cause);}  }
class C{  public MapMultChainInstruction(ChainType type,byte in1,byte in2,byte in3,byte out,String istr){  super(null,out);  _chainType=type;  _input1=in1;  _input2=in2;  _input3=in3;  mrtype=MRINSTRUCTION_TYPE.MapMultChain;  instString=istr;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean apply(ImageHolder imageHolder,ImageView imageView,String tag){  if (imageHolder.getUri() != null) {    if ("http".equals(imageHolder.getUri().getScheme()) || "https".equals(imageHolder.getUri().getScheme())) {      Picasso.with(imageView.getContext()).load(imageHolder.getUri()).into(imageView);    } else {      imageView.setImageURI(imageHolder.getUri());    }  } else   if (imageHolder.getIcon() != null) {    imageView.setImageDrawable(imageHolder.getIcon());  } else   if (imageHolder.getBitmap() != null) {    imageView.setImageBitmap(imageHolder.getBitmap());  } else   if (imageHolder.getIconRes() != -1) {    imageView.setImageResource(imageHolder.getIconRes());  } else   if (imageHolder.getIIcon() != null) {    imageView.setImageDrawable(new IconicsDrawable(imageView.getContext(),imageHolder.getIIcon()).actionBar());  } else {    imageView.setImageBitmap(null);    return false;  }  return true;}  }
class C{  public String encodedUsername(){  if (username.isEmpty()) {    return "";  }  int usernameStart=scheme.length() + 3;  int usernameEnd=delimiterOffset(url,usernameStart,url.length(),":@");  return url.substring(usernameStart,usernameEnd);}  }
class C{  public static void randomNumber(int[] num,int n){  for (int j=0; j < n; j++) {    num[j]=(int)(Math.random() * 10);  }}  }
class C{  @Override public void createSingleClone(StorageSystem storageSystem,URI sourceVolumeURI,URI cloneVolumeURI,Boolean createInactive,TaskCompleter taskCompleter){  log.info("START createSingleClone operation");  Volume cloneVolume=null;  try {    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    HDSApiProtectionManager hdsApiProtectionManager=hdsApiClient.getHdsApiProtectionManager();    String replicationGroupObjectID=hdsApiClient.getHdsApiProtectionManager().getReplicationGroupObjectId();    if (replicationGroupObjectID == null) {      log.error("Unable to find replication group information/pair management server for pair configuration");      throw HDSException.exceptions.replicationGroupNotAvailable();    }    cloneVolume=dbClient.queryObject(Volume.class,cloneVolumeURI);    hdsProtectionOperations.createSecondaryVolumeForClone(storageSystem,sourceVolumeURI,cloneVolume);    cloneVolume=dbClient.queryObject(Volume.class,cloneVolumeURI);    hdsProtectionOperations.addDummyLunPath(hdsApiClient,cloneVolume);    BlockObject source=BlockObject.fetch(dbClient,sourceVolumeURI);    String pairName=hdsProtectionOperations.generatePairName(source,cloneVolume);    log.info("Pair Name :{}",pairName);    ReplicationInfo replicationInfo=hdsApiProtectionManager.createShadowImagePair(replicationGroupObjectID,pairName,HDSUtils.getSystemArrayType(storageSystem),HDSUtils.getSystemSerialNumber(storageSystem),source.getNativeId(),cloneVolume.getNativeId(),storageSystem.getModel());    log.info("Replication Info object :{}",replicationInfo.toXMLString());    log.info("createInactive :{}",createInactive);    cloneVolume.setSyncActive(false);    cloneVolume.setReplicaState(ReplicationState.INACTIVE.name());    dbClient.persistObject(cloneVolume);    taskCompleter.ready(dbClient);  } catch (  Exception e) {    String errorMsg=String.format(CREATE_ERROR_MSG_FORMAT,sourceVolumeURI,cloneVolumeURI);    log.error(errorMsg,e);    Volume clone=dbClient.queryObject(Volume.class,cloneVolumeURI);    if (clone != null) {      clone.setInactive(true);      dbClient.persistObject(clone);    }    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("createSingleClone",e.getMessage());    taskCompleter.error(dbClient,serviceError);  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  int size=Array.getLength(source);  for (int i=0; i < size; i++) {    Object item=Array.get(source,i);    Class type=entry.getType();    root.write(node,item,type,parent);  }  node.commit();}  }
class C{  public CacheJndiTmFactory(String... jndiNames){  this.jndiNames=jndiNames;}  }
class C{  public void moveLastToFirst(){  if (maxSize == size) {    start=(start - 1 + maxSize) % maxSize;  } else {    throw new IllegalStateException("not implemented unless at max size");  }}  }
class C{  public void close(boolean writeIDX){  if (this.index == null)   return;synchronized (this.index) {    try {      if (this.file != null)       try {        this.file.close();      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }      this.file=null;      if (writeIDX && this.index != null && this.free != null && (this.index.size() > 3 || this.free.size() > 3)) {        try {          String fingerprint=fingerprintFileHash(this.heapFile);          if (fingerprint == null) {            log.severe("cannot write a dump for " + this.heapFile.getName() + ": fingerprint is null");          } else {            File newFingerprintFileGap=HeapWriter.fingerprintGapFile(this.heapFile,fingerprint);            if (this.fingerprintFileGap != null && this.fingerprintFileGap.getName().equals(newFingerprintFileGap.getName()) && this.fingerprintFileGap.exists()) {              log.info("using existing gap dump instead of writing a new one: " + this.fingerprintFileGap.getName());            } else {              long start=System.currentTimeMillis();              this.free.dump(newFingerprintFileGap);              log.info("wrote a dump for the " + this.free.size() + " gap entries of "+ this.heapFile.getName()+ " in "+ (System.currentTimeMillis() - start)+ " milliseconds.");            }          }          this.free.clear();          this.free=null;          if (fingerprint != null) {            File newFingerprintFileIdx=HeapWriter.fingerprintIndexFile(this.heapFile,fingerprint);            if (this.fingerprintFileIdx != null && this.fingerprintFileIdx.getName().equals(newFingerprintFileIdx.getName()) && this.fingerprintFileIdx.exists()) {              log.info("using existing idx dump instead of writing a new one: " + this.fingerprintFileIdx.getName());            } else {              long start=System.currentTimeMillis();              this.index.dump(newFingerprintFileIdx);              log.info("wrote a dump for the " + this.index.size() + " index entries of "+ this.heapFile.getName()+ " in "+ (System.currentTimeMillis() - start)+ " milliseconds.");            }          }          this.index.close();          this.index=null;        } catch (        final IOException e) {          ConcurrentLog.logException(e);        }      }      if (this.free != null)       this.free.clear();      this.free=null;      if (this.index != null)       this.index.close();      this.index=null;      this.closeDate=new Date();    } catch (    Throwable e) {      ConcurrentLog.logException(e);    }    log.info("close HeapFile " + this.heapFile.getName() + "; trace: "+ ConcurrentLog.stackTrace());  }}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeTemplates(this);}  }
class C{  private UnManagedFileSystem createUnManagedFileSystem(UnManagedFileSystem unManagedFileSystem,AccessProfile profile,String unManagedFileSystemNativeGuid,String unManangedFileSystemNativeId,StorageSystem system,StoragePool pool,String fileSystem,StoragePort storagePort,Map<String,String> fileSystemChars) throws IOException, NetAppException {  if (null == unManagedFileSystem) {    unManagedFileSystem=new UnManagedFileSystem();    unManagedFileSystem.setId(URIUtil.createId(UnManagedFileSystem.class));    unManagedFileSystem.setNativeGuid(unManagedFileSystemNativeGuid);    unManagedFileSystem.setStorageSystemUri(system.getId());    unManagedFileSystem.setHasExports(false);    unManagedFileSystem.setHasShares(false);  }  Map<String,StringSet> unManagedFileSystemInformation=new HashMap<String,StringSet>();  StringMap unManagedFileSystemCharacteristics=new StringMap();  unManagedFileSystemCharacteristics.put(SupportedFileSystemCharacterstics.IS_SNAP_SHOT.toString(),FALSE);  unManagedFileSystemCharacteristics.put(SupportedFileSystemCharacterstics.IS_THINLY_PROVISIONED.toString(),FALSE);  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedFileSystemCharacteristics.put(UnManagedFileSystem.SupportedFileSystemCharacterstics.IS_FILESYSTEM_EXPORTED.toString(),FALSE);  if (null != storagePort) {    StringSet storagePorts=new StringSet();    storagePorts.add(storagePort.getId().toString());    unManagedFileSystemInformation.put(SupportedFileSystemInformation.STORAGE_PORT.toString(),storagePorts);  }  if (null != pool) {    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedFileSystemInformation.put(UnManagedFileSystem.SupportedFileSystemInformation.STORAGE_POOL.toString(),pools);    unManagedFileSystem.setStoragePoolUri(pool.getId());    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(_dbClient,pool.getId());    _logger.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedFileSystem.getSupportedVpoolUris().clear();    } else {      unManagedFileSystem.getSupportedVpoolUris().replace(matchedVPools);      _logger.info("Replaced Pools :" + Joiner.on("\t").join(unManagedFileSystem.getSupportedVpoolUris()));    }  }  if (null != system) {    StringSet systemTypes=new StringSet();    systemTypes.add(system.getSystemType());    unManagedFileSystemInformation.put(SupportedFileSystemInformation.SYSTEM_TYPE.toString(),systemTypes);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.ALLOCATED_CAPACITY.toString()))) {    StringSet allocatedCapacity=new StringSet();    allocatedCapacity.add(fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.ALLOCATED_CAPACITY.toString())));    unManagedFileSystemInformation.put(SupportedFileSystemInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.PROVISIONED_CAPACITY.toString()))) {    StringSet provisionedCapacity=new StringSet();    String totalCapacity=fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.PROVISIONED_CAPACITY.toString()));    String snapShotReserveBlocks=fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.SNAPSHOT_BLOCKS_RESERVED.toString()));    String fsProvisionedCapacity=Long.toString(Long.parseLong(totalCapacity) + (Long.parseLong(snapShotReserveBlocks) * BYTESCONVERTER));    provisionedCapacity.add(fsProvisionedCapacity);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.PROVISIONED_CAPACITY.toString(),provisionedCapacity);  }  if (null != fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.NAME.toString()))) {    StringSet fsName=new StringSet();    String fileSystemName=fileSystemChars.get(SupportedNtpFileSystemInformation.getFileSystemInformation(SupportedNtpFileSystemInformation.NAME.toString()));    fsName.add(fileSystemName);    unManagedFileSystem.setLabel(fileSystemName);    StringSet fsPath=new StringSet();    fsPath.add(unManangedFileSystemNativeId);    StringSet fsMountPath=new StringSet();    fsMountPath.add(VOL_ROOT + fileSystem);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.NAME.toString(),fsName);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.NATIVE_ID.toString(),fsPath);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.DEVICE_LABEL.toString(),fsName);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.PATH.toString(),fsPath);    unManagedFileSystemInformation.put(SupportedFileSystemInformation.MOUNT_PATH.toString(),fsMountPath);  }  unManagedFileSystem.addFileSystemInformation(unManagedFileSystemInformation);  unManagedFileSystem.setFileSystemCharacterstics(unManagedFileSystemCharacteristics);  return unManagedFileSystem;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean hasTime(){  return super.hasAttribute(TIME);}  }
class C{  public int size(){  return degree;}  }
class C{  public void write(File file,Map<String,String> outputProperties) throws TransformerException, IOException {  Writer writer=new Utf8Writer(file);  try {    write(writer,outputProperties);  }  finally {    writer.close();  }}  }
class C{  private void addPredicateToBuilder(@NotNull StringBuilder builder,@NotNull String predicate){  builder.append(" ;\n");  builder.append(predicate);  builder.append(" ");}  }
class C{  @Deprecated public static String encode(String s){  try {    return encode(s,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  protected void registerSelf(){  log.debug("not registering");}  }
class C{  public void testSeeking() throws Exception {  for (int i=0; i < numIterations; i++) {    String reg=AutomatonTestUtil.randomRegexp(random());    Automaton automaton=Operations.determinize(new RegExp(reg,RegExp.NONE).toAutomaton(),DEFAULT_MAX_DETERMINIZED_STATES);    TermsEnum te=MultiFields.getTerms(reader,"field").iterator();    ArrayList<BytesRef> unsortedTerms=new ArrayList<>(terms);    Collections.shuffle(unsortedTerms,random());    for (    BytesRef term : unsortedTerms) {      if (Operations.run(automaton,term.utf8ToString())) {        if (random().nextBoolean()) {          assertTrue(te.seekExact(term));        } else {          assertEquals(SeekStatus.FOUND,te.seekCeil(term));          assertEquals(term,te.term());        }      }    }  }}  }
class C{  private LinkedHashMap<IVariable,IConstant> current(){  return current;}  }
class C{  public void testIsolatedMode() throws Exception {  processTestBothNodesDeploy(DeploymentMode.ISOLATED);}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof ZipShort)) {    return false;  }  return value == ((ZipShort)o).getValue();}  }
class C{  static final double nectarToHoney(double nectar){  return nectar * honeyShrinkFactor;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Test case " + rs.getTestName() + " failed");    driver.launchApp();  }}  }
class C{  public ImageIcon(Image image){  this.image=image;  Object o=image.getProperty("comment",imageObserver);  if (o instanceof String) {    description=(String)o;  }  loadImage(image);}  }
class C{  private int increase(int[] p,int cnt){  return lc.isFlowX() ? (p[0]+=cnt) : (p[1]+=cnt);}  }
class C{  public void checkRegion(String region){  try {    Region.getRegion(Regions.fromName(region));  } catch (  Exception e) {    throw new RuntimeException(region + " is not a AWS region. Please select a valid one.");  }}  }
class C{  @Override public void freeze(){  this.frozen=true;  logger.debug("ModuleContainer %s has froze, it will error the next time a Module is added.",this);}  }
class C{  public Timestamp(ByteProvider byteProvider) throws IOException {  MXFPropertyPopulator.populateField(byteProvider,this,"year");  MXFPropertyPopulator.populateField(byteProvider,this,"month");  MXFPropertyPopulator.populateField(byteProvider,this,"day");  MXFPropertyPopulator.populateField(byteProvider,this,"hour");  MXFPropertyPopulator.populateField(byteProvider,this,"minute");  MXFPropertyPopulator.populateField(byteProvider,this,"second");  MXFPropertyPopulator.populateField(byteProvider,this,"msecByFour");}  }
class C{  public void onBuyMoreClicks(View view){  if (isSubscribed()) {    String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.consumable_sku));    storeRequestId(requestId,NUM_CLICKS);  } else {    generateSubscribeDialog();  }}  }
class C{  public ThymeleafTemplateEngine(){  this(DEFAULT_PREFIX,DEFAULT_SUFFIX);}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null) {    return (uiMgr.hasRemoteFSSupport() || uiMgr.getUIClientType() == UIClient.LOCAL) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public ChangeAttribute asChangeAttribute(Change change){  try (ReviewDb db=schema.open()){    return asChangeAttribute(db,change);  } catch (  OrmException e) {    log.error("Cannot open database connection",e);    return new ChangeAttribute();  }}  }
class C{  public synchronized void enableEvents(int[] types){  assert types != null;  ctx.security().authorize(null,SecurityPermission.EVENTS_ENABLE,null);  boolean[] userRecordableEvts0=userRecordableEvts;  boolean[] recordableEvts0=recordableEvts;  int[] inclEvtTypes0=inclEvtTypes;  int[] userTypes=new int[types.length];  int userTypesLen=0;  for (  int type : types) {    if (type < len) {      userRecordableEvts0[type]=true;      recordableEvts0[type]=true;    } else     userTypes[userTypesLen++]=type;  }  if (userTypesLen > 0) {    Arrays.sort(userTypes,0,userTypesLen);    userTypes=compact(userTypes,userTypesLen);    inclEvtTypes0=U.unique(inclEvtTypes0,inclEvtTypes0.length,userTypes,userTypesLen);  }  userRecordableEvts=userRecordableEvts0;  recordableEvts=recordableEvts0;  inclEvtTypes=inclEvtTypes0;}  }
class C{  public static long[][] convertToLongArray(int[][] vals){  long[][] ret=new long[vals.length][];  for (int i=0; i < vals.length; i++) {    int[] valsi=vals[i];    long[] reti=ret[i]=new long[valsi.length];    for (int j=0; j < valsi.length; j++)     reti[j]=valsi[j];  }  return ret;}  }
class C{  public ColorRange add(ColorRange range){  hueConstraint.addAll(range.hueConstraint.getItems());  saturationConstraint.addAll(range.saturationConstraint.getItems());  brightnessConstraint.addAll(range.brightnessConstraint.getItems());  alphaConstraint.addAll(range.alphaConstraint.getItems());  black.min=MathUtils.min(black.min,range.black.min);  black.max=MathUtils.max(black.max,range.black.max);  white.min=MathUtils.min(white.min,range.white.min);  white.max=MathUtils.max(white.max,range.white.max);  return this;}  }
class C{  public String titleString(){  return titleString(getModel(),getFamily());}  }
class C{  private static boolean slowFileExists(Directory dir,String fileName) throws IOException {  try {    dir.openInput(fileName,IOContext.DEFAULT).close();    return true;  } catch (  NoSuchFileException|FileNotFoundException e) {    return false;  }}  }
class C{  protected int _columnOffset(int absRank){  return absRank;}  }
class C{  public static Bitmap loadBitmapFromAsset(GoogleApiClient googleApiClient,Asset asset){  if (asset == null) {    throw new IllegalArgumentException("Asset must be non-null");  }  InputStream assetInputStream=Wearable.DataApi.getFdForAsset(googleApiClient,asset).await().getInputStream();  if (assetInputStream == null) {    Log.w(TAG,"Requested an unknown Asset.");    return null;  }  return BitmapFactory.decodeStream(assetInputStream);}  }
class C{  @Override public void onTurnReached(final int currentTurn){  IRPZone zone;  Rectangle2D area;  zone=getZone();  area=getArea();  final Iterator<RPEntity.ID> iter=targets.iterator();  while (iter.hasNext()) {    final RPEntity.ID id=iter.next();    if (zone.has(id)) {      final RPEntity entity=(RPEntity)zone.get(id);      if (area.intersects(entity.getArea())) {        if (!handleInterval(entity)) {          handleRemoved(entity);          iter.remove();        }      } else {        handleRemoved(entity);        iter.remove();      }    } else {      iter.remove();    }  }  if (!targets.isEmpty()) {    SingletonRepository.getTurnNotifier().notifyInTurns(interval,this);  }}  }
class C{  public FractionAtom(Atom num,Atom den,int unit,float t,int numAlign,int denomAlign){  this(num,den,unit,t);  this.numAlign=checkAlignment(numAlign);  this.denomAlign=checkAlignment(denomAlign);}  }
class C{  public boolean couldImplement(ClassDefinition intDef){  if (!doInheritanceChecks) {    throw new CompilerError("couldImplement: no checks");  }  if (!isInterface() || !intDef.isInterface()) {    throw new CompilerError("couldImplement: not interface");  }  if (allMethods == null) {    throw new CompilerError("couldImplement: called early");  }  Iterator otherMethods=intDef.getMethods();  while (otherMethods.hasNext()) {    MemberDefinition method=(MemberDefinition)otherMethods.next();    Identifier name=method.getName();    Type type=method.getType();    MemberDefinition myMethod=allMethods.lookupSig(name,type);    if (myMethod != null) {      if (!myMethod.sameReturnType(method)) {        return false;      }    }  }  return true;}  }
class C{  public MenuInflater(Context context){  mContext=context;  mRealOwner=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public static boolean deviceHasDefaultNamingConvention(String supportingDeviceName,boolean isDistributed,List<String> claimedVolumeNames){  if (isDistributed) {    return distributedDeviceHasDefaultNamingConvention(supportingDeviceName,claimedVolumeNames);  } else {    return localDeviceHasDefaultNamingConvention(supportingDeviceName,claimedVolumeNames);  }}  }
class C{  public MaterialIcon(IconType iconType){  this();  setIconType(iconType);}  }
class C{  public static ErrLoggingEvent fromLoggingEvent(LoggingEvent loggingEvent){  ErrLoggingEvent erLoggingEvent=new ErrLoggingEvent();  erLoggingEvent.setCategoryName(loggingEvent.getLoggerName());  erLoggingEvent.setLevel(loggingEvent.getLevel().toString());  erLoggingEvent.setRenderedMessage(loggingEvent.getRenderedMessage());  erLoggingEvent.setThreadName(loggingEvent.getThreadName());  erLoggingEvent.setLocationInfo(ErLocationInfo.fromLocationInfo(loggingEvent.getLocationInformation()));  erLoggingEvent.setTimeStamp(loggingEvent.getTimeStamp());  erLoggingEvent.setTimeStampDate(new Date(loggingEvent.getTimeStamp()));  if (loggingEvent.getThrowableInformation() != null) {    erLoggingEvent.setThrowableInfo(ErThrowableInformation.fromThrowableInformation(loggingEvent.getThrowableInformation()));  }  return erLoggingEvent;}  }
class C{  protected String processPostRequest(HttpServletRequest request){  com.pearson.statsagg.webui.CreateMetricGroup createMetricGroup=new com.pearson.statsagg.webui.CreateMetricGroup();  JsonObject suspensionJsonObject=Helper.getJsonObjectFromRequestBody(request);  String result=createMetricGroup.parseAndAlterMetricGroup(suspensionJsonObject);  return Helper.createSimpleJsonResponse(result);}  }
class C{  public DoubleMatrix1D like1D(int size){  return new DenseDoubleMatrix1D(size);}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public double[] toNativeArray(int offset,int len){  double[] rv=new double[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.504 -0500",hash_original_method="0DBD2DB13D23998CD61361463D21566E",hash_generated_method="E33EB1237E6138E6794C576FE6A01A09") public static void registerHandlers(){  if (false)   Log.v("ddm","Registering DDM message handlers");  DdmHandleHello.register();  DdmHandleThread.register();  DdmHandleHeap.register();  DdmHandleNativeHeap.register();  DdmHandleProfiling.register();  DdmHandleExit.register();  DdmServer.registrationComplete();}  }
class C{  public static int compare(double left,boolean right){  return compare(left,right ? 1d : 0d);}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  public ModelException(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.657 -0500",hash_original_method="D3DC50F4C11146F18EBEE861B5ED6567",hash_generated_method="A5CC31577A27EC3514D5249E48B12B5F") public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  @Override public void removeMessage(Message m){  boolean inLowerThreadCurrently=Thread.currentThread().getId() == idOfLowerThread ? true : false;synchronized (m) {    m.killMessage();  }}  }
class C{  public InvalidateSessionITCase(String name){  super(name);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void testConfiguration() throws IgniteCheckedException {  IgniteInternalCache metaCache=getFieldValue(fs,"meta","metaCache");  IgniteInternalCache dataCache=getFieldValue(fs,"data","dataCache");  assertNotNull(metaCache);  assertEquals(META_CACHE_NAME,metaCache.name());  assertEquals(REPLICATED,metaCache.configuration().getCacheMode());  assertNotNull(dataCache);  assertEquals(DATA_CACHE_NAME,dataCache.name());  assertEquals(PARTITIONED,dataCache.configuration().getCacheMode());}  }
class C{  @Override public SGDText aggregate(SGDText toAggregate) throws Exception {  if (m_dictionary == null) {    throw new Exception("No model built yet, can't aggregate");  }  LinkedHashMap<String,SGDText.Count> tempDict=toAggregate.getDictionary();  Iterator<Map.Entry<String,SGDText.Count>> entries=tempDict.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<String,SGDText.Count> entry=entries.next();    Count masterCount=m_dictionary.get(entry.getKey());    if (masterCount == null) {      masterCount=new Count(entry.getValue().m_count);      masterCount.m_weight=entry.getValue().m_weight;      m_dictionary.put(entry.getKey(),masterCount);    } else {      masterCount.m_count+=entry.getValue().m_count;      masterCount.m_weight+=entry.getValue().m_weight;    }  }  m_bias+=toAggregate.bias();  m_numModels++;  return this;}  }
class C{  @Override public ItemRecommendationResultSet recommend(String client,Long user,Set<Integer> dimensions,int maxRecsCount,RecommendationContext ctxt,List<Long> recentItemInteractions){  RecommendationContext.OptionsHolder options=ctxt.getOptsHolder();  DimPopularityStore store=itemsManager.getClientStore(client,options);  if (store == null) {    if (logger.isDebugEnabled())     logger.debug("Failed to find popular session data for client " + client);    return new ItemRecommendationResultSet(Collections.<ItemRecommendationResultSet.ItemRecommendationResult>emptyList(),name);  }  String attrs=options.getStringOption(ATTRS_PROPERTY_NAME);  int maxDepth=options.getIntegerOption(DEPTH_PROPERTY_NAME);  ConsumerBean c=new ConsumerBean(client);  String[] attrNames=attrs.split(",");  Set<Long> exclusions=Collections.emptySet();  if (ctxt.getMode() == RecommendationContext.MODE.EXCLUSION) {    exclusions=ctxt.getContextItems();  }  if (logger.isDebugEnabled()) {    logger.debug("user " + user + " recentItems:"+ recentItemInteractions.toString()+ " depth:"+ maxDepth+ " attrs "+ attrs);  }  Map<Long,Double> scores=new HashMap<>();  for (int depth=0; depth < maxDepth; depth++) {    if (recentItemInteractions.size() <= depth)     break;    long recentItem=recentItemInteractions.get(depth);    Map<String,Integer> attrDims=itemService.getDimensionIdsForItem(c,recentItem);    double lowestScore=1.0;    if (logger.isDebugEnabled())     logger.debug("Looking at item " + recentItem + " has attrDim size "+ attrDims.size());    for (    String attr : attrNames) {      Integer dim=attrDims.get(attr);      if (dim != null) {        List<ItemCount> counts=store.getTopItemsForDimension(dim);        if (counts != null) {          double maxCount=0;          double lowScore=1.0;          for (          ItemCount ic : counts) {            if (!exclusions.contains(ic.item)) {              Map<String,Integer> attrDimsCandidate=itemService.getDimensionIdsForItem(c,ic.item);              if (CollectionUtils.containsAny(dimensions,attrDimsCandidate.values()) || dimensions.contains(Constants.DEFAULT_DIMENSION)) {                if (logger.isDebugEnabled())                 logger.debug("Adding item " + ic.item + " from dimension "+ attr);                if (maxCount == 0)                 maxCount=ic.count;                double normCount=(ic.count / maxCount) * lowestScore;                if (scores.containsKey(ic.item))                 scores.put(ic.item,scores.get(ic.item) + normCount); else                 scores.put(ic.item,normCount);                lowScore=normCount;                if (scores.size() >= maxRecsCount)                 break;              } else {                if (logger.isDebugEnabled())                 logger.debug("Ignoring prospective item " + ic.item + " as not in dimensions "+ dimensions.toString());              }            } else {              if (logger.isDebugEnabled())               logger.debug("Excluding item " + ic.item);            }          }          lowestScore=lowScore;        } else {          if (logger.isDebugEnabled())           logger.debug("No counts for dimension " + dim + " attribute name "+ attr);        }      } else {        logger.warn("Failed to find attr " + attr + " for item "+ recentItem);      }      if (scores.size() >= maxRecsCount)       break;    }  }  Map<Long,Double> scaledScores=RecommendationUtils.rescaleScoresToOne(scores,maxRecsCount);  List<ItemRecommendationResultSet.ItemRecommendationResult> results=new ArrayList<>();  for (  Map.Entry<Long,Double> e : scaledScores.entrySet()) {    results.add(new ItemRecommendationResultSet.ItemRecommendationResult(e.getKey(),e.getValue().floatValue()));  }  if (logger.isDebugEnabled())   logger.debug("Returning " + results.size() + " recommendations");  return new ItemRecommendationResultSet(results,name);}  }
class C{  private void checkAndResolveCorrectSyncFeatureAndPermission(String feature){  if (TextUtils.isEmpty(feature)) {    return;  }  SharedPreferences sharedPreferences=getPreferenceScreen().getSharedPreferences();  boolean useFeature=sharedPreferences.getBoolean(feature,false);  String neededPermission=this.neededPermissionForFeature(feature);  if (!TextUtils.isEmpty(neededPermission) && useFeature) {    boolean hasPermission=LocalService.checkPermission(getActivity(),neededPermission);    if (!hasPermission) {      this.enableFeature(false,feature);    }  }}  }
class C{  public static void main(String[] args){  InternalFrameDemo demo=new InternalFrameDemo(null);  demo.mainImpl();}  }
class C{  public void populatePropertyDetails(BasicProperty basicProperty,ViewPropertyDetails viewPropertyDetails,PropertyID propertyID,PropertyDetail propertyDetail){  viewPropertyDetails.setEffectiveDate(DateUtils.getDefaultFormattedDate(basicProperty.getPropOccupationDate()));  viewPropertyDetails.setCategory(PropertyTaxConstants.PROPERTY_TYPE_CATEGORIES.get(propertyDetail.getCategoryType()));  viewPropertyDetails.setApartmentCmplx(propertyDetail.getApartment() == null ? NOT_AVAILABLE : propertyDetail.getApartment().getName());  viewPropertyDetails.setExtentOfSite(propertyDetail.getSitalArea() == null ? NOT_AVAILABLE : propertyDetail.getSitalArea().getArea().toString());  viewPropertyDetails.setExtentAppartenauntLand(propertyDetail.getExtentAppartenauntLand() == null ? NOT_AVAILABLE : propertyDetail.getExtentAppartenauntLand().toString());  viewPropertyDetails.setRegdDocNo(basicProperty.getRegdDocNo());  viewPropertyDetails.setRegdDocDate(DateUtils.getDefaultFormattedDate(basicProperty.getRegdDocDate()));  viewPropertyDetails.setMutationReason(propertyDetail.getPropertyMutationMaster().getMutationName());  viewPropertyDetails.setAssessmentDate(DateUtils.getDefaultFormattedDate(basicProperty.getAssessmentdate()));  if (!propertyDetail.getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND)) {    viewPropertyDetails.setHasLift(propertyDetail.isLift());    viewPropertyDetails.setHasToilet(propertyDetail.isToilets());    viewPropertyDetails.setHasWaterTap(propertyDetail.isWaterTap());    viewPropertyDetails.setHasElectricity(propertyDetail.isElectricity());    viewPropertyDetails.setHasAttachedBathroom(propertyDetail.isAttachedBathRoom());    viewPropertyDetails.setHasWaterHarvesting(propertyDetail.isWaterHarvesting());    viewPropertyDetails.setHasCableConnection(propertyDetail.isCable());    viewPropertyDetails.setFloorType(propertyDetail.getFloorType().getName());    viewPropertyDetails.setRoofType(propertyDetail.getRoofType().getName());    viewPropertyDetails.setWallType(propertyDetail.getWallType() == null ? NOT_AVAILABLE : propertyDetail.getWallType().getName());    viewPropertyDetails.setWoodType(propertyDetail.getWoodType() == null ? NOT_AVAILABLE : propertyDetail.getWoodType().getName());    viewPropertyDetails.setFloorDetails(getFloorDetails(propertyDetail));  } else {    getVacantLandDetails(viewPropertyDetails,propertyDetail,propertyID);  }}  }
class C{  public UUID nodeId(int idx){  ClusterNode res;  if (node != null) {    assert idx == 0;    res=node;  } else {    assert nodes != null;    assert idx < nodes.size();    res=nodes.get(idx);  }  assert res != null;  return res.id();}  }
class C{  public void addAll(final Collection<Sensor> sensors){  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);  boolean rv=selection.addAll(sensors);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  public RenderedImage createRendering(RenderContext rc){  return getSource().createRendering(rc);}  }
class C{  private String addCreateOrUpdateCGStep(Workflow workflow,List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,ProtectionSystem rpSystem,String taskId) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method cgCreationExecuteMethod=new Workflow.Method(METHOD_CG_CREATE_STEP,rpSystem.getId(),volumeDescriptors);  Workflow.Method cgCreationExecutionRollbackMethod=new Workflow.Method(METHOD_CG_CREATE_ROLLBACK_STEP,rpSystem.getId(),volumeDescriptors);  workflow.createStep(STEP_CG_CREATION,"Create consistency group subtask for RP CG: " + cgParams.getCgName(),STEP_EXPORT_ORCHESTRATION,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),cgCreationExecuteMethod,cgCreationExecutionRollbackMethod,stepId);  return STEP_CG_CREATION;}  }
class C{  private static boolean addCraftingRecipe(ItemStack aResult,Enchantment[] aEnchantmentsAdded,int[] aEnchantmentLevelsAdded,boolean aMirrored,boolean aBuffered,boolean aKeepNBT,boolean aDismantleable,boolean aRemovable,boolean aReversible,boolean aRemoveAllOthersWithSameOutput,boolean aRemoveAllOthersWithSameOutputIfTheyHaveSameNBT,boolean aRemoveAllOtherShapedsWithSameOutput,boolean aRemoveAllOtherNativeRecipes,boolean aCheckForCollisions,boolean aOnlyAddIfThereIsAnyRecipeOutputtingThis,boolean aOnlyAddIfResultIsNotNull,Object[] aRecipe){  aResult=GT_OreDictUnificator.get(true,aResult);  if (aOnlyAddIfResultIsNotNull && aResult == null)   return false;  if (aResult != null && Items.feather.getDamage(aResult) == W)   Items.feather.setDamage(aResult,0);  if (aRecipe == null || aRecipe.length <= 0)   return false;  boolean tThereWasARecipe=false;  for (byte i=0; i < aRecipe.length; i++) {    if (aRecipe[i] instanceof IItemContainer)     aRecipe[i]=((IItemContainer)aRecipe[i]).get(1); else     if (aRecipe[i] instanceof Enum)     aRecipe[i]=((Enum)aRecipe[i]).name(); else     if (!(aRecipe[i] == null || aRecipe[i] instanceof ItemStack || aRecipe[i] instanceof ItemData || aRecipe[i] instanceof String || aRecipe[i] instanceof Character))     aRecipe[i]=aRecipe[i].toString();  }  try {    String shape=E;    int idx=0;    if (aRecipe[idx] instanceof Boolean) {      throw new IllegalArgumentException();    }    ArrayList<Object> tRecipeList=new ArrayList<Object>(Arrays.asList(aRecipe));    while (aRecipe[idx] instanceof String) {      String s=(String)aRecipe[idx++];      shape+=s;      while (s.length() < 3)       s+=" ";      if (s.length() > 3)       throw new IllegalArgumentException();      for (      char c : s.toCharArray()) {switch (c) {case 'b':          tRecipeList.add(c);        tRecipeList.add(ToolDictNames.craftingToolBlade.name());      break;case 'c':    tRecipeList.add(c);  tRecipeList.add(ToolDictNames.craftingToolCrowbar.name());break;case 'd':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolScrewdriver.name());break;case 'f':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolFile.name());break;case 'h':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolHardHammer.name());break;case 'i':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolSolderingIron.name());break;case 'j':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolSolderingMetal.name());break;case 'k':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolKnife.name());break;case 'm':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolMortar.name());break;case 'p':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolDrawplate.name());break;case 'r':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolSoftHammer.name());break;case 's':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolSaw.name());break;case 'w':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolWrench.name());break;case 'x':tRecipeList.add(c);tRecipeList.add(ToolDictNames.craftingToolWireCutter.name());break;}}}aRecipe=tRecipeList.toArray();if (aRecipe[idx] instanceof Boolean) {idx++;}Map<Character,ItemStack> tItemStackMap=new HashMap<Character,ItemStack>();Map<Character,ItemData> tItemDataMap=new HashMap<Character,ItemData>();tItemStackMap.put(' ',null);boolean tRemoveRecipe=true;for (; idx < aRecipe.length; idx+=2) {if (aRecipe[idx] == null || aRecipe[idx + 1] == null) {if (D1) {GT_Log.err.println("WARNING: Missing Item for shaped Recipe: " + (aResult == null ? "null" : aResult.getDisplayName()));for (Object tContent : aRecipe) GT_Log.err.println(tContent);}return false;}Character chr=(Character)aRecipe[idx];Object in=aRecipe[idx + 1];if (in instanceof ItemStack) {tItemStackMap.put(chr,GT_Utility.copy((ItemStack)in));tItemDataMap.put(chr,GT_OreDictUnificator.getItemData((ItemStack)in));} else if (in instanceof ItemData) {String tString=in.toString();if (tString.equals("plankWood")) {tItemDataMap.put(chr,new ItemData(Materials.Wood,M));} else if (tString.equals("stoneNetherrack")) {tItemDataMap.put(chr,new ItemData(Materials.Netherrack,M));} else if (tString.equals("stoneObsidian")) {tItemDataMap.put(chr,new ItemData(Materials.Obsidian,M));} else if (tString.equals("stoneEndstone")) {tItemDataMap.put(chr,new ItemData(Materials.Endstone,M));} else {tItemDataMap.put(chr,(ItemData)in);}ItemStack tStack=GT_OreDictUnificator.getFirstOre(in,1);if (tStack == null) tRemoveRecipe=false; else tItemStackMap.put(chr,tStack);in=aRecipe[idx + 1]=in.toString();} else if (in instanceof String) {if (in.equals(OreDictNames.craftingChest.toString())) tItemDataMap.put(chr,new ItemData(Materials.Wood,M * 8)); else if (in.equals(OreDictNames.craftingBook.toString())) tItemDataMap.put(chr,new ItemData(Materials.Paper,M * 3)); else if (in.equals(OreDictNames.craftingPiston.toString())) tItemDataMap.put(chr,new ItemData(Materials.Stone,M * 4,Materials.Wood,M * 3)); else if (in.equals(OreDictNames.craftingFurnace.toString())) tItemDataMap.put(chr,new ItemData(Materials.Stone,M * 8)); else if (in.equals(OreDictNames.craftingIndustrialDiamond.toString())) tItemDataMap.put(chr,new ItemData(Materials.Diamond,M)); else if (in.equals(OreDictNames.craftingAnvil.toString())) tItemDataMap.put(chr,new ItemData(Materials.Iron,M * 10));ItemStack tStack=GT_OreDictUnificator.getFirstOre(in,1);if (tStack == null) tRemoveRecipe=false; else tItemStackMap.put(chr,tStack);} else {throw new IllegalArgumentException();}}if (aReversible && aResult != null) {ItemData[] tData=new ItemData[9];int x=-1;for (char chr : shape.toCharArray()) tData[++x]=tItemDataMap.get(chr);if (GT_Utility.arrayContainsNonNull(tData)) GT_OreDictUnificator.addItemData(aResult,new ItemData(tData));}if (aCheckForCollisions && tRemoveRecipe) {ItemStack[] tRecipe=new ItemStack[9];int x=-1;for (char chr : shape.toCharArray()) {tRecipe[++x]=tItemStackMap.get(chr);if (tRecipe[x] != null && Items.feather.getDamage(tRecipe[x]) == W) Items.feather.setDamage(tRecipe[x],0);}tThereWasARecipe=removeRecipe(tRecipe) != null || tThereWasARecipe;}} catch (Throwable e) {e.printStackTrace(GT_Log.err);}if (aResult == null || aResult.stackSize <= 0) return false;if (aRemoveAllOthersWithSameOutput || aRemoveAllOthersWithSameOutputIfTheyHaveSameNBT || aRemoveAllOtherShapedsWithSameOutput|| aRemoveAllOtherNativeRecipes) tThereWasARecipe=removeRecipeByOutput(aResult,!aRemoveAllOthersWithSameOutputIfTheyHaveSameNBT,aRemoveAllOtherShapedsWithSameOutput,aRemoveAllOtherNativeRecipes) || tThereWasARecipe;if (aOnlyAddIfThereIsAnyRecipeOutputtingThis && !tThereWasARecipe) {ArrayList<IRecipe> tList=(ArrayList<IRecipe>)CraftingManager.getInstance().getRecipeList();int tList_sS=tList.size();for (int i=0; i < tList_sS && !tThereWasARecipe; i++) {IRecipe tRecipe=tList.get(i);if (sSpecialRecipeClasses.contains(tRecipe.getClass().getName())) continue;if (GT_Utility.areStacksEqual(GT_OreDictUnificator.get(tRecipe.getRecipeOutput()),aResult,true)) {tList.remove(i--);tList_sS=tList.size();tThereWasARecipe=true;}}}if (Items.feather.getDamage(aResult) == W || Items.feather.getDamage(aResult) < 0) Items.feather.setDamage(aResult,0);GT_Utility.updateItemStack(aResult);if (tThereWasARecipe || !aOnlyAddIfThereIsAnyRecipeOutputtingThis) {if (sBufferCraftingRecipes && aBuffered) sBufferRecipeList.add(new GT_Shaped_Recipe(GT_Utility.copy(aResult),aDismantleable,aRemovable,aKeepNBT,aEnchantmentsAdded,aEnchantmentLevelsAdded,aRecipe).setMirrored(aMirrored)); else GameRegistry.addRecipe(new GT_Shaped_Recipe(GT_Utility.copy(aResult),aDismantleable,aRemovable,aKeepNBT,aEnchantmentsAdded,aEnchantmentLevelsAdded,aRecipe).setMirrored(aMirrored));}return true;}  }
class C{  public double flattening(){  return (semiMajorAxis() - semiMinorAxis()) / semiMajorAxis();}  }
class C{  public RefMethod findMethodByName(final String... names){  final List<Method> methods=new ArrayList<>();  Collections.addAll(methods,this.clazz.getMethods());  Collections.addAll(methods,this.clazz.getDeclaredMethods());  for (  final Method m : methods) {    for (    final String name : names) {      if (m.getName().equals(name)) {        return new RefMethod(m);      }    }  }  throw new RuntimeException("no such method");}  }
class C{  public RDFRemover(RepositoryConnection con){  this.con=con;  this.enforceContext=false;}  }
class C{  @SuppressWarnings("unchecked") public <U>SimpleReactStream<U> fromIterable(final Iterable<U> iter){  return this.from(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iter.iterator(),Spliterator.ORDERED),false));}  }
class C{  static boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  private void sendFirmware(final BluetoothGatt gatt) throws RemoteDfuException, DeviceDisconnectedException, DfuException, UploadAbortedException, UnknownResponseException {  final int numberOfPacketsBeforeNotification=mPacketsBeforeNotification;  if (numberOfPacketsBeforeNotification > 0) {    logi("Sending the number of packets before notifications (Op Code = 2, Value = " + numberOfPacketsBeforeNotification + ")");    setPacketReceiptNotifications(numberOfPacketsBeforeNotification);    mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Packet Receipt Notif Req (Op Code = 2) sent (Value = " + numberOfPacketsBeforeNotification + ")");  }  logi("Setting object to Data (Op Code = 6, Type = 1)");  final ObjectInfo info=selectObject(OBJECT_DATA);  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,String.format(Locale.US,"Data object info received (Max size = %d, Offset = %d, CRC = %08X)",info.maxSize,info.offset,info.CRC32));  mProgressInfo.setMaxObjectSizeInBytes(info.maxSize);  final int chunkCount=(mImageSizeInBytes + info.maxSize - 1) / info.maxSize;  int currentChunk=0;  boolean resumeSendingData=false;  if (info.offset > 0) {    try {      currentChunk=info.offset / info.maxSize;      int bytesSentAndExecuted=info.maxSize * currentChunk;      int bytesSentNotExecuted=info.offset - bytesSentAndExecuted;      if (bytesSentNotExecuted == 0) {        bytesSentAndExecuted-=info.maxSize;        bytesSentNotExecuted=info.maxSize;      }      if (bytesSentAndExecuted > 0) {        mFirmwareStream.read(new byte[bytesSentAndExecuted]);        mFirmwareStream.mark(info.maxSize);      }      if (bytesSentNotExecuted > 0) {        mFirmwareStream.read(new byte[bytesSentNotExecuted]);      }      final int crc=(int)(((ArchiveInputStream)mFirmwareStream).getCrc32() & 0xFFFFFFFFL);      if (crc == info.CRC32) {        mProgressInfo.setBytesSent(info.offset);        mProgressInfo.setBytesReceived(info.offset);        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,info.offset + " bytes of data sent before, CRC match");        if (bytesSentNotExecuted == info.maxSize && info.offset < mImageSizeInBytes) {          logi("Executing data object (Op Code = 4)");          writeExecute();          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Data object executed");        } else {          resumeSendingData=true;        }      } else {        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_WARNING,info.offset + " bytes sent before, CRC does not match");        mProgressInfo.setBytesSent(bytesSentAndExecuted);        mProgressInfo.setBytesReceived(bytesSentAndExecuted);        info.offset-=bytesSentNotExecuted;        info.CRC32=0;        mFirmwareStream.reset();        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Resuming from byte " + info.offset + "...");      }    } catch (    final IOException e) {      loge("Error while reading firmware stream",e);      mService.terminateConnection(gatt,DfuBaseService.ERROR_FILE_IO_EXCEPTION);      return;    }  } else {    mProgressInfo.setBytesSent(0);  }  final long startTime=SystemClock.elapsedRealtime();  if (info.offset < mImageSizeInBytes) {    int attempt=1;    while (mProgressInfo.getAvailableObjectSizeIsBytes() > 0) {      if (!resumeSendingData) {        logi("Creating Data object (Op Code = 1, Type = 2, Size = " + mProgressInfo.getAvailableObjectSizeIsBytes() + ") ("+ (currentChunk + 1)+ "/"+ chunkCount+ ")");        writeCreateRequest(OBJECT_DATA,mProgressInfo.getAvailableObjectSizeIsBytes());        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Data object (" + (currentChunk + 1) + "/"+ chunkCount+ ") created");        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Uploading firmware...");      } else {        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Resuming uploading firmware...");        resumeSendingData=false;      }      try {        logi("Uploading firmware...");        uploadFirmwareImage(mPacketCharacteristic);      } catch (      final DeviceDisconnectedException e) {        loge("Disconnected while sending data");        throw e;      }      logi("Sending Calculate Checksum command (Op Code = 3)");      final ObjectChecksum checksum=readChecksum();      mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,String.format(Locale.US,"Checksum received (Offset = %d, CRC = %08X)",checksum.offset,checksum.CRC32));      logi(String.format(Locale.US,"Checksum received (Offset = %d, CRC = %08X)",checksum.offset,checksum.CRC32));      final int crc=(int)(((ArchiveInputStream)mFirmwareStream).getCrc32() & 0xFFFFFFFFL);      if (crc == checksum.CRC32) {        logi("Executing data object (Op Code = 4)");        writeExecute();        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Data object executed");        currentChunk++;        attempt=1;      } else {        if (attempt < MAX_ATTEMPTS) {          attempt++;          logi("CRC does not match! Retrying...(" + attempt + "/"+ MAX_ATTEMPTS+ ")");          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_WARNING,"CRC does not match! Retrying...(" + attempt + "/"+ MAX_ATTEMPTS+ ")");          try {            mFirmwareStream.reset();            mProgressInfo.setBytesSent(checksum.offset - info.maxSize);          } catch (          final IOException e) {            loge("Error while resetting the firmware stream",e);            mService.terminateConnection(gatt,DfuBaseService.ERROR_FILE_IO_EXCEPTION);            return;          }        } else {          loge("CRC does not match!");          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_ERROR,"CRC does not match!");          mService.terminateConnection(gatt,DfuBaseService.ERROR_CRC_ERROR);          return;        }      }    }  } else {    logi("Executing data object (Op Code = 4)");    writeExecute();    mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Data object executed");  }  final long endTime=SystemClock.elapsedRealtime();  logi("Transfer of " + (mProgressInfo.getBytesSent() - info.offset) + " bytes has taken "+ (endTime - startTime)+ " ms");  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Upload completed in " + (endTime - startTime) + " ms");}  }
class C{  private char normalize(char c,char m){  if (isHiraganaIterationMark(m)) {    return normalizedHiragana(c,m);  }  if (isKatakanaIterationMark(m)) {    return normalizedKatakana(c,m);  }  return c;}  }
class C{  public final double infoGain(){  return m_infoGain;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.750 -0500",hash_original_method="3761C7DAE2C27B7066194088DE84B020",hash_generated_method="3601634849E64E856B23C314F6C2C339") public PriorityParser(String priority){  super(priority);}  }
class C{  private boolean isQchatCallAllowed(){  int voiceCallState=0;  int voice2CallState=0;  int volteCallState=0;  int qchatCallState=0;  try {    String keyValuePair, value;    String[] fields, tokens;    long vsid;    int callState;    keyValuePair=AudioSystem.getParameters(AudioManager.ALL_CALL_STATES_KEY);    if (!keyValuePair.startsWith(AudioManager.ALL_CALL_STATES_KEY)) {      return false;    }    value=keyValuePair.substring(AudioManager.ALL_CALL_STATES_KEY.length() + 1);    fields=value.split(",");    for (    String item : fields) {      tokens=item.split(":");      vsid=Long.decode(tokens[0]).longValue();      callState=Integer.decode(tokens[1]).intValue();      if (vsid == AudioManager.VOICE_VSID)       voiceCallState=callState; else       if (vsid == AudioManager.VOICE2_VSID)       voice2CallState=callState; else       if (vsid == AudioManager.IMS_VSID)       volteCallState=callState; else       if (vsid == AudioManager.QCHAT_VSID)       qchatCallState=callState; else       Log.e(TAG,"Unrecognized VSID value " + vsid);    }    Log.i(TAG,"voiceCallState=" + voiceCallState + " voice2CallState="+ voice2CallState);    Log.i(TAG,"volteCallState=" + volteCallState + " qchatCallState="+ qchatCallState);  } catch (  Exception e) {    Log.e(TAG,"Could not get call states from HAL due to " + e);  }  if ((voiceCallState == AudioManager.CALL_ACTIVE) || (voice2CallState == AudioManager.CALL_ACTIVE) || (volteCallState == AudioManager.CALL_ACTIVE)|| (qchatCallState == AudioManager.CALL_ACTIVE)) {    return false;  } else {    return true;  }}  }
class C{  public static void closeMinorTag(){  closeTag(true,true);}  }
class C{  protected void outPrintln(String msg){  System.out.println(msg);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double[] predict(FVec feat){  return predict(feat,false);}  }
class C{  public static void e(String tag,String s){  if (LDJSLOG.ERROR >= LOGLEVEL)   Log.e(tag,s);}  }
class C{  public T caseEquationFakeDefinition(EquationFakeDefinition object){  return null;}  }
class C{  public Integer loadRepInfoValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadRepInfoValues");  _repInfo=FssMdoUtil.decodeRepInfo(statement.getLongText(index++));  _repType=_repInfo.m_type;  return new Integer(index);}  }
class C{  public final void mul(double scalar,Matrix3d m1){  this.m00=scalar * m1.m00;  this.m01=scalar * m1.m01;  this.m02=scalar * m1.m02;  this.m10=scalar * m1.m10;  this.m11=scalar * m1.m11;  this.m12=scalar * m1.m12;  this.m20=scalar * m1.m20;  this.m21=scalar * m1.m21;  this.m22=scalar * m1.m22;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  if (!processSystemRegistration(request,response)) {    log.info("Forward to registration.jsp");    if (!response.isCommitted())     response.sendRedirect("registration.jsp");  }}  }
class C{  public void addTour(Tour tour){  tours.add(tour);}  }
class C{  public BurlapProtocolException(String message){  super(message);}  }
class C{  private void replace(SearchContext context){  if (context != null) {    SearchEngine.replace((RTextArea)textArea,context);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void addStdObject(final AcroRenderer acro){  Object objToJS=org.mozilla.javascript.Context.javaToJS(new JpedalDefaultJavascript(scope,cx),scope);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"util",objToJS);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"app",objToJS);  final org.mozilla.javascript.Scriptable globalObj=cx.newObject(scope);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"global",globalObj);  final org.mozilla.javascript.Scriptable ADBE=cx.newObject(scope);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"ADBE",ADBE);  objToJS=org.mozilla.javascript.Context.javaToJS(new DisplayJavascriptActions(),scope);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"display",objToJS);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"color",objToJS);  final PdfLayerList layerList=acro.getActionHandler().getLayerHandler();  if (layerList != null) {    objToJS=org.mozilla.javascript.Context.javaToJS(layerList,scope);    org.mozilla.javascript.ScriptableObject.putProperty(scope,"layers",objToJS);  }  objToJS=org.mozilla.javascript.Context.javaToJS(acro,scope);  org.mozilla.javascript.ScriptableObject.putProperty(scope,"acro",objToJS);}  }
class C{  public int filterRGB(int x,int y,int rgb){  int gray=(int)((0.30 * ((rgb >> 16) & 0xff) + 0.59 * ((rgb >> 8) & 0xff) + 0.11 * (rgb & 0xff)) / 3);  if (brighter) {    gray=(255 - ((255 - gray) * (100 - percent) / 100));  } else {    gray=(gray * (100 - percent) / 100);  }  if (gray < 0)   gray=0;  if (gray > 255)   gray=255;  return (rgb & 0xff000000) | (gray << 16) | (gray << 8)| (gray << 0);}  }
class C{  private boolean selectDatasource(String jndiName,boolean skipChecks){  JPADataSourceProvider dsProvider=project.getLookup().lookup(JPADataSourceProvider.class);  if (dsProvider == null) {    return false;  }  if (jndiName == null) {    jndiName="java:comp/DefaultDataSource";  }  JPADataSource datasource=null;  for (  JPADataSource each : dsProvider.getDataSources()) {    if (jndiName.equals(each.getJndiName())) {      datasource=each;    }  }  if (datasource == null) {    return false;  }  List<DatabaseConnection> dbconns=findDatabaseConnections(datasource);  if (dbconns.isEmpty()) {    return false;  }  if (!skipChecks) {    DatabaseConnection dbcon=dbconns.get(0);    if (dbcon.getJDBCConnection() == null) {      return false;    }  }  boolean selected=false;  for (int i=0; i < datasourceComboBox.getItemCount(); i++) {    Object item=datasourceComboBox.getItemAt(i);    JPADataSource jpaDS=dsProvider.toJPADataSource(item);    if (jpaDS != null) {      if (datasource.getJndiName().equals(jpaDS.getJndiName()) && datasource.getUrl().equals(jpaDS.getUrl()) && datasource.getUsername().equals(jpaDS.getUsername())) {        datasourceComboBox.setSelectedIndex(i);        selected=true;        break;      }    }  }  if (!selected) {    return false;  }  datasourceRadioButton.setSelected(true);  return true;}  }
class C{  private void splitDataPage(CacheDataPage origDataPage) throws IOException {  DataPageMain origMain=origDataPage._main;  DataPageExtra origExtra=origDataPage._extra;  setModified(origDataPage);  int numEntries=origExtra._entries.size();  if (numEntries < 2) {    throw new IllegalStateException(withErrorContext("Cannot split page with less than 2 entries " + origDataPage));  }  if (origMain.isRoot()) {    CacheDataPage newDataPage=nestRootDataPage(origDataPage);    origDataPage=newDataPage;    origMain=newDataPage._main;    origExtra=newDataPage._extra;  }  DataPageMain parentMain=origMain.getParentPage();  CacheDataPage parentDataPage=new CacheDataPage(parentMain);  CacheDataPage newDataPage=allocateNewCacheDataPage(parentMain._pageNumber,origMain._leaf);  DataPageMain newMain=newDataPage._main;  DataPageExtra newExtra=newDataPage._extra;  List<Entry> headEntries=origExtra._entries.subList(0,((numEntries + 1) / 2));  for (  Entry headEntry : headEntries) {    newExtra._totalEntrySize+=headEntry.size();    newExtra._entries.add(headEntry);  }  newExtra.setEntryView(newMain);  headEntries.clear();  origExtra._entryPrefix=EMPTY_PREFIX;  origExtra._totalEntrySize-=newExtra._totalEntrySize;  addToPeersBefore(newDataPage,origDataPage);  if (!newMain._leaf) {    reparentChildren(newDataPage);    DataPageMain childMain=newMain.getChildPage(newExtra._entryView.getLast());    if (!childMain._leaf) {      separateFromNextPeer(new CacheDataPage(childMain));    }  }  addParentEntry(parentDataPage,newDataPage);}  }
class C{  public void update(byte[] data){  if (sha != null) {    sha.update(data);  }  if (md5 != null) {    md5.update(data);  }}  }
class C{  public FilterChecker(Map checkFilters){  filters=checkFilters;}  }
class C{  protected Move testForSanDisambiguationFromCheck(String shortAlgebraic,MoveList matches) throws IllegalArgumentException {  Move result=null;  if (matches.getSize() == 0) {    throw new IllegalArgumentException("Invalid move " + shortAlgebraic + "\n"+ toString());  } else   if (matches.getSize() == 1) {    result=matches.get(0);  } else {    int kingSquare=bitscanForward(getPieceBB(colorToMove,KING));    int cachedColorToMove=colorToMove;    int matchesCount=0;    if (kingSquare != EMPTY_SQUARE) {      for (int i=0; i < matches.getSize(); i++) {        Move current=matches.get(i);        if (current.isCastleLong() || current.isCastleShort()) {          continue;        }synchronized (this) {          try {            forceMove(current);            if (current.getPiece() == KING) {              int newKingCoordinates=GameUtils.bitscanForward(getPieceBB(cachedColorToMove,KING));              if (!isInCheck(cachedColorToMove,GameUtils.getBitboard(newKingCoordinates))) {                result=current;                matchesCount++;              } else {              }            } else {              if (!isInCheck(cachedColorToMove,getBitboard(kingSquare))) {                result=current;                matchesCount++;              } else {              }            }            rollback();          } catch (          IllegalArgumentException ie) {          }        }      }    }    if (matchesCount == 0) {      throw new IllegalArgumentException("Invalid move " + shortAlgebraic + "\n"+ toString());    } else     if (matchesCount > 1) {      throw new IllegalArgumentException("Ambiguous move " + shortAlgebraic + "\n"+ toString());    }  }  return result;}  }
class C{  public int step(int state,int label){  assert state >= 0;  assert label >= 0;  int trans=states[2 * state];  int limit=trans + 3 * states[2 * state + 1];  while (trans < limit) {    int dest=transitions[trans];    int min=transitions[trans + 1];    int max=transitions[trans + 2];    if (min <= label && label <= max) {      return dest;    }    trans+=3;  }  return -1;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void removeDataChangedListener(DataChangedListener l){  mv.removeDataChangeListener(l);}  }
class C{  public Relations(){  super(Relation.class);}  }
class C{  public static byte[] fromAscii(byte[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public boolean isDraft(){  return draft != null && draft.booleanValue();}  }
class C{  @Override protected Object executeInLock(String lockName,TransactionCallback txCallback) throws JobPersistenceException {  boolean transOwner=false;  Connection conn=null;  try {    if (lockName != null) {      if (getLockHandler().requiresConnection()) {        conn=getConnection();      }      transOwner=getLockHandler().obtainLock(conn,lockName);    }    if (conn == null) {      conn=getConnection();    }    return txCallback.execute(conn);  }  finally {    try {      releaseLock(LOCK_TRIGGER_ACCESS,transOwner);    }  finally {      cleanupConnection(conn);    }  }}  }
class C{  public MutableVisionWorldModel(final PixelMatrix pixelMatrix,final SensorMatrix sensorMatrix){  super();  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  if (sensorMatrix == null) {    throw new IllegalArgumentException("sensorMatrix must not be null");  }  this.pixelMatrix=pixelMatrix;  this.sensorMatrix=sensorMatrix;}  }
class C{  public double nextDouble(boolean includeZero,boolean includeOne){  double d=0.0;  do {    d=nextDouble();    if (includeOne && nextBoolean())     d+=1.0;  } while ((d > 1.0) || (!includeZero && d == 0.0));  return d;}  }
class C{  public Builder withZkHost(Collection<String> zkHosts){  this.zkHosts.addAll(zkHosts);  return this;}  }
class C{  private ViewGroup createSimpleTextHierarchy(UIManagerModule uiManager,String text){  ReactRootView rootView=new ReactRootView(RuntimeEnvironment.application.getApplicationContext());  int rootTag=uiManager.addMeasuredRootView(rootView);  int textTag=rootTag + 1;  int rawTextTag=textTag + 1;  uiManager.createView(textTag,ReactTextViewManager.REACT_CLASS,rootTag,JavaOnlyMap.of("collapsable",false));  uiManager.createView(rawTextTag,ReactRawTextManager.REACT_CLASS,rootTag,JavaOnlyMap.of(ReactTextShadowNode.PROP_TEXT,text,"collapsable",false));  uiManager.manageChildren(textTag,null,null,JavaOnlyArray.of(rawTextTag),JavaOnlyArray.of(0),null);  uiManager.manageChildren(rootTag,null,null,JavaOnlyArray.of(textTag),JavaOnlyArray.of(0),null);  uiManager.onBatchComplete();  executePendingChoreographerCallbacks();  return rootView;}  }
class C{  private void updateRoutedNetworksForTransitNetwork(NetworkSystem networkSystem,Set<String> connectedNetworkSystems,List<Network> allNetworks){  List<Network> localNetworks=getLocalNetworks(networkSystem,allNetworks);  for (  Network network : localNetworks) {    dumpRoutedNetworks("localNetwork = ",network);  }  List<Network> remoteRoutedNetworks=this.getRemoteRoutedNetworks(networkSystem.getId().toString(),connectedNetworkSystems,allNetworks);  for (  Network network : remoteRoutedNetworks) {    dumpRoutedNetworks("remoteRoutedNetworks = ",network);  }  List<Network> routedNetworks=new ArrayList<Network>(localNetworks);  routedNetworks.addAll(remoteRoutedNetworks);  for (  Network network : routedNetworks) {    dumpRoutedNetworks("routedNetworks = ",network);  }  for (  Network currentNetwork : localNetworks) {    boolean modified=false;    StringSet networkSet=currentNetwork.getRoutedNetworks();    _log.info("NetworkDiscoveryWorker handling routed network, existing: {}",networkSet);    if (networkSet == null) {      networkSet=new StringSet();    }    for (    Network routedNetwork : routedNetworks) {      if (!networkSet.contains(routedNetwork.getId().toString()) && !routedNetwork.getId().equals(currentNetwork.getId())) {        networkSet.add(routedNetwork.getId().toString());        modified=true;      }    }    _log.info("NetworkDiscoveryWorker handling routed network, updated: {}",networkSet);    if (modified) {      currentNetwork.setRoutedNetworks(networkSet);      dumpRoutedNetworks("update network=",currentNetwork);      dbClient.updateObject(currentNetwork);    }  }}  }
class C{  public SAXException(){  this.exception=null;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  void add(Rectangle rect){  rollups.add(new RollupWindow(rect));}  }
class C{  public static StringBuffer encode(StringBuffer src,boolean[] caseFlags) throws ParseException {  int[] cpBuffer=new int[MAX_CP_COUNT];  int n, delta, handledCPCount, basicLength, destLength, bias, j, m, q, k, t, srcCPCount;  char c, c2;  int srcLength=src.length();  int destCapacity=MAX_CP_COUNT;  char[] dest=new char[destCapacity];  StringBuffer result=new StringBuffer();  srcCPCount=destLength=0;  for (j=0; j < srcLength; ++j) {    if (srcCPCount == MAX_CP_COUNT) {      throw new IndexOutOfBoundsException();    }    c=src.charAt(j);    if (isBasic(c)) {      if (destLength < destCapacity) {        cpBuffer[srcCPCount++]=0;        dest[destLength]=caseFlags != null ? asciiCaseMap(c,caseFlags[j]) : c;      }      ++destLength;    } else {      n=((caseFlags != null && caseFlags[j]) ? 1 : 0) << 31L;      if (!UTF16.isSurrogate(c)) {        n|=c;      } else       if (UTF16.isLeadSurrogate(c) && (j + 1) < srcLength && UTF16.isTrailSurrogate(c2=src.charAt(j + 1))) {        ++j;        n|=UCharacter.getCodePoint(c,c2);      } else {        throw new ParseException("Illegal char found",-1);      }      cpBuffer[srcCPCount++]=n;    }  }  basicLength=destLength;  if (basicLength > 0) {    if (destLength < destCapacity) {      dest[destLength]=DELIMITER;    }    ++destLength;  }  n=INITIAL_N;  delta=0;  bias=INITIAL_BIAS;  for (handledCPCount=basicLength; handledCPCount < srcCPCount; ) {    for (m=0x7fffffff, j=0; j < srcCPCount; ++j) {      q=cpBuffer[j] & 0x7fffffff;      if (n <= q && q < m) {        m=q;      }    }    if (m - n > (0x7fffffff - MAX_CP_COUNT - delta) / (handledCPCount + 1)) {      throw new RuntimeException("Internal program error");    }    delta+=(m - n) * (handledCPCount + 1);    n=m;    for (j=0; j < srcCPCount; ++j) {      q=cpBuffer[j] & 0x7fffffff;      if (q < n) {        ++delta;      } else       if (q == n) {        for (q=delta, k=BASE; ; k+=BASE) {          t=k - bias;          if (t < TMIN) {            t=TMIN;          } else           if (k >= (bias + TMAX)) {            t=TMAX;          }          if (q < t) {            break;          }          if (destLength < destCapacity) {            dest[destLength++]=digitToBasic(t + (q - t) % (BASE - t),false);          }          q=(q - t) / (BASE - t);        }        if (destLength < destCapacity) {          dest[destLength++]=digitToBasic(q,(cpBuffer[j] < 0));        }        bias=adaptBias(delta,handledCPCount + 1,(handledCPCount == basicLength));        delta=0;        ++handledCPCount;      }    }    ++delta;    ++n;  }  return result.append(dest,0,destLength);}  }
class C{  public Vector3d mulPosition(Matrix4dc mat){  return mulPosition(mat,this);}  }
class C{  private Map<String,String> updateZonesStrategy(MDSDialog dialog,List<ZoneUpdate> updateZones,Integer vsanId,boolean activateZones) throws NetworkDeviceControllerException {  waitForSession(dialog,vsanId);  Long time=System.currentTimeMillis();  Map<String,String> updatedZoneNames=new HashMap<String,String>();  Zoneset activeZoneset=getActiveZoneset(dialog,vsanId);  List<Zone> fabricZones=dialog.showFabricZones(vsanId);  try {    dialog.config();    zonesetClone(dialog,vsanId,activeZoneset);    for (    ZoneUpdate zone : updateZones) {      try {        if (updateZone(dialog,zone,vsanId,fabricZones,activateZones)) {          updatedZoneNames.put(zone.getName(),SUCCESS);        } else {          updatedZoneNames.put(zone.getName(),NO_CHANGE);        }      } catch (      Exception ex) {        updatedZoneNames.put(zone.getName(),ERROR + " : " + ex.getMessage());        handleZonesStrategyException(ex,activateZones);      }    }    if (!updatedZoneNames.isEmpty()) {      commitZones(dialog,vsanId,activateZones ? activeZoneset : null);      dialog.copyRunningConfigToStartupFabric();    }    dialog.endConfig();    time=System.currentTimeMillis() - time;    _log.info("Zone update time (msec): " + time.toString());    return updatedZoneNames;  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.updateZonesStrategyFailed(ex);  } finally {    safeExitSession(dialog,vsanId);  }}  }
class C{  public String toString(){  return name.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void registerAsBranch(BytecodeInstruction instruction){  if (!(instruction.isActualBranch()))   throw new IllegalArgumentException("CFGVertex of a branch expected");  if (isKnownAsBranch(instruction))   return;  if (!DependencyAnalysis.shouldInstrument(instruction.getClassName(),instruction.getMethodName())) {    return;  }  registerInstruction(instruction);}  }
class C{  public ClearWorkspaceAction(SimbrainDesktop desktop){  super("Clear Workspace",desktop.getWorkspace());  this.desktop=desktop;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  @Override public void remove(SpoolerTask task){  unstore(task);}  }
class C{  public final boolean isDirect(){  return true;}  }
class C{  public HiveMetaStoreBridge(Configuration atlasProperties,HiveConf hiveConf,AtlasClient atlasClient) throws Exception {  this(atlasProperties.getString(HIVE_CLUSTER_NAME,DEFAULT_CLUSTER_NAME),Hive.get(hiveConf),atlasClient);}  }
class C{  private void laceUp(Object key,long newMeta,int newMetaLevel){  for (int level=1; level <= newMetaLevel; level++) {    long prevMeta=heads;    long meta=0;    if (!stack.isEmpty()) {      meta=stack.remove();      prevMeta=stack.remove();    }    for (; ; ) {      nextMeta(newMeta,level,meta);      if (casNextMeta(prevMeta,level,meta,newMeta))       break;      long oldMeta=meta;      meta=nextMeta(prevMeta,level);      for (; ; ) {        int cmpRes=cmp(key,meta);        if (cmpRes > 0) {          prevMeta=meta;          meta=nextMeta(prevMeta,level);          if (meta != oldMeta)           continue;        }        assert cmpRes != 0;        break;      }    }  }  if (!stack.isEmpty())   return;  for (; ; ) {    int top=topLevel.get();    if (newMetaLevel <= top || topLevel.compareAndSet(top,newMetaLevel))     break;  }}  }
class C{  public SliderPanel(){  initComponents();}  }
class C{  @Override public void prepare() throws ReplicatorException, InterruptedException {  FileIO fileIO=new JavaFileIO();  if (!fileIO.exists(serviceDir)) {    logger.info("Service directory does not exist, creating: " + serviceDir.toString());    fileIO.mkdirs(serviceDir);  }  if (!fileIO.readable(serviceDir)) {    throw new ReplicatorException("Service directory does not exist or is not readable: " + serviceDir.toString());  } else   if (!fileIO.writable(serviceDir)) {    throw new ReplicatorException("Service directory is not writable: " + serviceDir.toString());  }  commitSeqno.prepare();}  }
class C{  private File copyLinesToTempFile(String prefix,int start,int end,File source) throws IOException {  File f=getTempFile(prefix,CiscoCommandSplitter.deleteOnExit);  Writer writer=getWriter(f);  BufferedReader reader=getReader(source);  String line;  int skip=start - 1;  while ((line=reader.readLine()) != null) {    if (skip != 0) {      skip--;    } else     if (start <= end) {      if (debug) {        System.out.println(String.format("Writing line %d: %s",start,line));      }      writer.write(line);      writer.append("\n");      start++;    } else {      break;    }  }  writer.close();  reader.close();  return f;}  }
class C{  public static double median(DoubleArrayList sortedData){  return quantile(sortedData,0.5);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int compareTo(DistributedMember o){  return compareTo(o,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgr() == null ? null : stack.getUIMgr().getUIHistoryWidgets();}  }
class C{  public T modules(Class<? extends Module>... moduleTypes){  bootique.modules(moduleTypes);  return (T)this;}  }
class C{  public void fireEffectorRemoved(final Effector effector){  for (  WorldListener listener : listenerList) {    listener.effectorRemoved(effector);  }}  }
class C{  public static void readFully(FileChannel file,long pos,ByteBuffer dst){  try {    do {      int len=file.read(dst,pos);      if (len < 0) {        throw new EOFException();      }      pos+=len;    } while (dst.remaining() > 0);    dst.rewind();  } catch (  IOException e) {    long size;    try {      size=file.size();    } catch (    IOException e2) {      size=-1;    }    throw newIllegalStateException(ERROR_READING_FAILED,"Reading from {0} failed; file length {1} " + "read length {2} at {3}",file,size,dst.remaining(),pos,e);  }}  }
class C{  public static Calendar ceiling(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar ceiled=(Calendar)date.clone();  modify(ceiled,field,ModifyType.CEILING);  return ceiled;}  }
class C{  @Override public boolean supportsOpenStatementsAcrossCommit(){  debugCodeCall("supportsOpenStatementsAcrossCommit");  return true;}  }
class C{  @Dev public TimePassedCondition(final String questname,final int index,final int delayInMinutes){  this.questname=checkNotNull(questname);  this.delay=delayInMinutes;  this.index=index;}  }
class C{  protected boolean matchAt(int i){  start0=-1;  end0=-1;  start1=-1;  end1=-1;  start2=-1;  end2=-1;  startn=null;  endn=null;  parenCount=1;  setParenStart(0,i);  if ((program.flags & REProgram.OPT_HASBACKREFS) != 0) {    startBackref=new int[maxParen];    endBackref=new int[maxParen];  }  int idx;  if ((idx=matchNodes(0,maxNode,i)) != -1) {    setParenEnd(0,idx);    return true;  }  parenCount=0;  return false;}  }
class C{  public Hours negated(){  return Hours.hours(FieldUtils.safeNegate(getValue()));}  }
class C{  public static boolean startLines(final String[] erecs,final String[] arecs){  boolean same=true;  if (erecs.length != arecs.length) {    System.err.println("Expected " + erecs.length + " actual "+ arecs.length);    same=false;  } else {    for (int i=0; i < erecs.length; i++) {      if (!arecs[i].trim().startsWith(erecs[i].trim())) {        System.err.println("Line " + i + StringUtils.LS+ ">Expected: "+ erecs[i].trim()+ StringUtils.LS+ ">actual  : "+ arecs[i].trim());        same=false;        break;      }    }  }  return same;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType nullDocType=null;  NodeList childList;  Node imported;  Node employeeElem;  Attr attrNode;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","employee");  employeeElem=childList.item(3);  domImpl=getImplementation();  newDoc=domImpl.createDocument(nullNS,"staff",nullDocType);  imported=newDoc.importNode(employeeElem,true);  attrNode=((Element)imported).getAttributeNodeNS(nullNS,"defaultAttr");  assertNull("defaultAttrNotImported",attrNode);  attrValue=((Element)imported).getAttributeNS("http://www.w3.org/2000/xmlns/","emp");  assertEquals("explicitAttrImported","http://www.nist.gov",attrValue);}  }
class C{  protected void writeBytes(byte[] bytes) throws IOException {  tagWriter.getOutStream().write(bytes);}  }
class C{  @Autowired public AllocateCashierToTellerCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  public static void verifyMessage(Message message,byte[] b,KEYRecord key,SIGRecord previous) throws DNSSEC.DNSSECException {  SIGRecord sig=null;  Record[] additional=message.getSectionArray(Section.ADDITIONAL);  for (int i=0; i < additional.length; i++) {    if (additional[i].getType() != Type.SIG)     continue;    if (((SIGRecord)additional[i]).getTypeCovered() != 0)     continue;    sig=(SIGRecord)additional[i];    break;  }  DNSSEC.verifyMessage(message,b,sig,previous,key);}  }
class C{  protected void removeTempAttacks(){  clientgui.getClient().getGame().removeActionsFor(cen);  clientgui.bv.removeAttacksFor(ce());}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      Loger.debug(String.format("Unable to create cache dir %s",mRootDirectory.getAbsolutePath()));    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      file.delete();    } finally {      FileUtils.closeIO(fis);    }  }}  }
class C{  public TranslateLanguagePanel(SubPanelListener listener,TranslateOptions options){  mListener=listener;  mOptions=options;  mSessionOptions=new TranslateOptions(mOptions);}  }
class C{  void sendAsync(DistributionMessage msg){  if (system != null) {    system.getDistributionManager().putOutgoing(msg);  }}  }
class C{  protected ImplementationFactory(){}  }
class C{  public int writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifOutputStream s=null;  try {    s=(ExifOutputStream)getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();  return s.size();}  }
class C{  public Comments(){  super(KEY);}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  setResourceBundle(record);  log(record);}  }
class C{  public static boolean ISALLUPPERCASE(String token){  for (int i=0; i < token.length(); i++)   if (!Character.isUpperCase(token.charAt(i)))   return false;  return true;}  }
class C{  public boolean dispatchTouchEvent(MotionEvent ev){  if (mWindow.superDispatchTouchEvent(ev)) {    return true;  }  return onTouchEvent(ev);}  }
class C{  public ReplEvent peek(int taskId) throws ReplicatorException, InterruptedException {  assertTaskIdWithinRange(taskId);  return queues.get(taskId).peek();}  }
class C{  public static int min(int a,int b,int c){  return min(min(a,b),c);}  }
class C{  public FilePersistenceStrategy(final File baseDirectory,final XStream xstream,final String encoding,final String illegalChars){  super(baseDirectory,xstream,encoding);  this.illegalChars=illegalChars;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.591 -0500",hash_original_method="75E41BB014942CF37AED72804C2A632B",hash_generated_method="10B699F6AD62C54BA3EF01A04EA8563B") public BasicManagedEntity(HttpEntity entity,ManagedClientConnection conn,boolean reuse){  super(entity);  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  this.managedConn=conn;  this.attemptReuse=reuse;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:26.633 -0500",hash_original_method="406E9933F616CAE11878C7351DEAD585",hash_generated_method="5612E90AC2A0FCD08B420C16A3AF337C") public static synchronized void reset(){  for (  MiniThumbFile file : sThumbFiles.values()) {    file.deactivate();  }  sThumbFiles.clear();}  }
class C{  public static final byte composeSmeDeliveryAndManualAckRequested(byte registeredDelivery){  return composeSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_DELIVERY_MANUAL_ACK_REQUESTED);}  }
class C{  public static int updateMode(int existingOctal,int updateOctal){  int tmp=existingOctal & updateOctal;  return (existingOctal - tmp) + updateOctal;}  }
class C{  public @Test final void testAddUsersNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.addUser(null);}  }
class C{  public ConstantVector(double constant,int length){  setConstant(constant);  setLength(length);}  }
class C{  @Override public void createFont(final PdfObject pdfObject,final String fontID,final boolean renderPage,final ObjectStore objectStore,final Map<String,PdfJavaGlyphs> substitutedFonts) throws Exception {  fontTypes=StandardFonts.TRUETYPE;  this.fontsLoaded=substitutedFonts;  init(fontID,renderPage);  final PdfObject pdfFontDescriptor=pdfObject.getDictionary(PdfDictionary.FontDescriptor);  setBoundsAndMatrix(pdfFontDescriptor);  setName(pdfObject);  setEncoding(pdfObject,pdfFontDescriptor);  if (renderPage) {    if (pdfFontDescriptor != null && substituteFont == null) {      byte[] stream=null;      PdfObject FontFile2=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile2);      if (FontFile2 == null) {        FontFile2=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile);        if (FontFile2 == null) {          FontFile2=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile3);        }      }      if (FontFile2 != null) {        stream=currentPdfFile.readStream(FontFile2,true,true,false,false,false,FontFile2.getCacheName(currentPdfFile.getObjectReader()));      }      if (stream != null) {        readEmbeddedFont(stream,null,hasEncoding);      }    }    if (!isFontEmbedded && substituteFont != null) {      subfontAlreadyLoaded=!isCIDFont && fontsLoaded.containsKey(substituteFont + '_' + glyphs.getBaseFontName());      final File fontFile;      FontData fontData=null;      int objSize=0;      if (!subfontAlreadyLoaded) {        fontFile=new File(substituteFont);        objSize=(int)fontFile.length();      }      if (FontData.maxSizeAllowedInMemory >= 0 && objSize > FontData.maxSizeAllowedInMemory) {        if (!subfontAlreadyLoaded) {          fontData=new FontData(substituteFont);        }        readEmbeddedFont(null,fontData,false);      } else       if (subfontAlreadyLoaded) {        readEmbeddedFont(null,null,false);      } else {        final BufferedInputStream from;        InputStream jarFile=null;        try {          if (substituteFont.startsWith("jar:") || substituteFont.startsWith("http:")) {            jarFile=loader.getResourceAsStream(substituteFont);          } else {            jarFile=loader.getResourceAsStream("file:///" + substituteFont);          }        } catch (        final Exception e) {          LogWriter.writeLog("1.Unable to open " + substituteFont + ' '+ e);        }catch (        final Error err) {          LogWriter.writeLog("1.Unable to open " + substituteFont + ' '+ err);        }        if (jarFile == null) {          from=new BufferedInputStream(new FileInputStream(substituteFont));        } else {          from=new BufferedInputStream(jarFile);        }        final FastByteArrayOutputStream to=new FastByteArrayOutputStream();        final byte[] buffer=new byte[65535];        int bytes_read;        while ((bytes_read=from.read(buffer)) != -1) {          to.write(buffer,0,bytes_read);        }        from.close();        readEmbeddedFont(to.toByteArray(),null,false);      }      isFontSubstituted=true;    }  }  readWidths(pdfObject,true);  if (renderPage) {    setFont(glyphs.fontName,1);  }}  }
class C{  private Map<String,Object> typeMap(Type pt,Declaration from){  if (ModelUtil.isTypeUnknown(pt)) {    return unknownTypeMap;  } else   if (pt.isNothing()) {    return nothingTypeMap;  }  Map<String,Object> m=new HashMap<>();  if (pt.isUnion() || pt.isIntersection()) {    List<Type> subtipos=pt.isUnion() ? pt.getCaseTypes() : pt.getSatisfiedTypes();    List<Map<String,Object>> subs=new ArrayList<>(subtipos.size());    for (    Type sub : subtipos) {      subs.add(typeMap(sub,from));    }    m.put("comp",pt.isUnion() ? "u" : "i");    m.put(KEY_TYPES,subs);    return m;  } else   if (pt.isTuple() && !pt.involvesTypeParameters()) {    return tupleTypeMap(pt,from);  }  TypeDeclaration d=pt.getDeclaration();  if (d.isToplevel() || pt.isTypeParameter()) {    m.put(KEY_NAME,d.getName());  } else {    String qn=d.getQualifiedNameString();    int p0=qn.indexOf("::");    if (p0 >= 0) {      qn=qn.substring(p0 + 2);    }    p0=qn.indexOf('.');    if (p0 >= 0) {      StringBuilder nestedName=new StringBuilder(TypeUtils.modelName(d));      Declaration pd=ModelUtil.getContainingDeclaration(d);      while (pd != null) {        nestedName.insert(0,'.');        nestedName.insert(0,TypeUtils.modelName(pd));        pd=ModelUtil.getContainingDeclaration(pd);      }      qn=nestedName.toString();    }    m.put(KEY_NAME,qn);  }  if (d.getDeclarationKind() == DeclarationKind.TYPE_PARAMETER) {    return m;  }  com.redhat.ceylon.model.typechecker.model.Package pkg=d.getUnit().getPackage();  if (pkg == null || pkg.equals(from.getUnit().getPackage())) {    addPackage(m,".");  } else {    addPackage(m,pkg.getNameAsString());  }  if (pkg != null && !pkg.getModule().equals(module)) {    final Module mod=pkg.getModule();    m.put(KEY_MODULE,mod.isLanguageModule() ? "$" : mod.getNameAsString());  }  putTypeArguments(m,pt,from);  return m;}  }
class C{  public CannotCompileException(ClassNotFoundException e,String name){  this("cannot find " + name,e);}  }
class C{  @Override public void updateObject(String columnLabel,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x);");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public List<ServiceInfo> searchService(long groupId,String keywords,String administrationCode,String domainCode,int start,int end) throws PortalException, SystemException {  return serviceInfoFinder.searchService(groupId,keywords,administrationCode,domainCode,start,end);}  }
class C{  public static InvalidPhraseException convertToApi(org.oscm.internal.types.exception.InvalidPhraseException oldEx){  return convertExceptionToApi(oldEx,InvalidPhraseException.class);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  throw unsupported("isWrapperFor");}  }
class C{  private void updateVolumeCapacity(Volume volume,Long capacity,boolean isExpand){  if (!volume.getCapacity().equals(capacity)) {    if (!isExpand) {      _log.info(String.format("Updating capacity for volume [%s] from %s to %s.",volume.getLabel(),volume.getCapacity(),capacity));      volume.setCapacity(capacity);      _dbClient.updateObject(volume);    } else {      _log.info(String.format("Do not update capacity for volume [%s] as this is an expand operation.",volume.getLabel()));    }  } else {    _log.info(String.format("No need to update capacity for volume [%s].",volume.getLabel()));  }}  }
class C{  private void fillTipArea(){  this.tipArea.setText("<html><body bgcolor=\"#ffffff\" text=\"#000000\"><p style=\"font-family:" + this.fontName + ";font-size=12px\">"+ this.tips.get(this.index)+ "</p></body></html>");}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public Utf8_Enumeration(){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public String url(){  return this.url;}  }
class C{  private void dismissOffer(int position){  int cardPosition=getCardPosition(position);  Offer offerToDismiss=offers.get(cardPosition);  removeFromMyPlanUI(cardPosition);  offerDismissStream.onNext(offerToDismiss);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  XBLOMElement e=(XBLOMElement)n;  e.prefix=prefix;  return n;}  }
class C{  public static void free(Space space,Address block){  space.release(block);}  }
class C{  public long timestamp(){  return timestamp;}  }
class C{  public TriangleBatch(GL20 gl,Source source){  super(gl);  delayedBinding="Intel".equals(gl.glGetString(GL20.GL_VENDOR));  program=new GLProgram(gl,source.vertex(),source.fragment());  uTexture=program.getUniformLocation("u_Texture");  uHScreenSize=program.getUniformLocation("u_HScreenSize");  uFlip=program.getUniformLocation("u_Flip");  aMatrix=program.getAttribLocation("a_Matrix");  aTranslation=program.getAttribLocation("a_Translation");  aColor=program.getAttribLocation("a_Color");  aPosition=program.getAttribLocation("a_Position");  aTexCoord=program.getAttribLocation("a_TexCoord");  stableAttrs=new float[stableAttrsSize()];  vertices=new float[START_VERTS * vertexSize()];  elements=new short[START_ELEMS];  int[] ids=new int[2];  gl.glGenBuffers(2,ids,0);  verticesId=ids[0];  elementsId=ids[1];  gl.checkError("TriangleBatch end ctor");}  }
class C{  private Set<GenericAccessibleObject<?>> determineGenericModifiersFor(GenericClass clazz) throws ConstructionFailedException {  Set<GenericAccessibleObject<?>> genericModifiers=new LinkedHashSet<GenericAccessibleObject<?>>();  if (clazz.isParameterizedType()) {    logger.debug("Is parameterized class");    for (    Entry<GenericClass,Set<GenericAccessibleObject<?>>> entry : modifiers.entrySet()) {      logger.debug("Considering " + entry.getKey());      if (entry.getKey().getWithWildcardTypes().isGenericSuperTypeOf(clazz)) {        logger.debug(entry.getKey() + " can be instantiated to " + clazz);        for (        GenericAccessibleObject<?> modifier : entry.getValue()) {          try {            GenericAccessibleObject<?> newModifier=modifier.getGenericInstantiation(clazz);            logger.debug("Adding new modifier: " + newModifier);            genericModifiers.add(newModifier);          } catch (          ConstructionFailedException e) {            logger.debug("Cannot be added: " + modifier);          }        }      } else {        logger.debug("Nope");      }    }  } else {    logger.debug("Is NOT parameterized class!");  }  return genericModifiers;}  }
class C{  public static <T>void dumpCycles(List<Node<T>> nodes,Function<T,String> toString){  for (  Node<T> node : nodes) {    Stack<Node<T>> path=new Stack<Node<T>>();    path.add(node);    dumpCycles(nodes,path,toString);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean containsChannelItem(Connector connector,String channel){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof ChatConsoleWindowItem) {        ChatConsoleWindowItem item=(ChatConsoleWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getController().getConnector() == connector && item.getController() instanceof ChannelController) {          ChannelController controller=(ChannelController)item.getController();          if (StringUtils.equalsIgnoreCase(controller.getChannel(),channel)) {            result=true;            break;          }        }      }    }  }  return result;}  }
class C{  public static void showError(Context context,int msgId,DialogInterface.OnCancelListener listener){  showError(context,context.getString(msgId),listener);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getClassContent_();}  }
class C{  public DOMTransform(TransformService spi){  this.spi=spi;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.206 -0400",hash_original_method="8D77B36F2D36A74D4D1D738F1EFBDA2C",hash_generated_method="4620A2CDFB3A98C06BE97E0FD7C340C9") private void testLockDir(File lockDir) throws IOException {  if (!lockDir.exists()) {    throw new IOException("Could not find lockDir: " + lockDir.getAbsolutePath());  }  if (!lockDir.canWrite()) {    throw new IOException("Could not write to lockDir: " + lockDir.getAbsolutePath());  }}  }
class C{  public static boolean isStopWord(String word,Collection<String> stopwords,Boolean caseSensitive){  if (!caseSensitive) {    return stopwords.stream().filter(null).count() >= 1;  } else {    return stopwords.contains(word);  }}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public void delete(Entry<T> entry){  decreaseKeyUnchecked(entry,Double.NEGATIVE_INFINITY);  dequeueMin();}  }
class C{  public synchronized void info(String msg){  LogRecord record=new LogRecord(Level.INFO,msg);  log(record);}  }
class C{  public void clear(){  this.contextStack.clear();}  }
class C{  protected void sequence_Term_Wildcard(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:    getVarDeclsOrBindings().clear();  getVarDeclsOrBindings().addAll((Collection<? extends VariableDeclarationOrBinding>)newValue);return;case N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD:setVarStmtKeyword((VariableStatementKeyword)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static public PVector random3D(){  return random3D(null,null);}  }
class C{  private void dropTable(SQLiteDatabase db,String name){  try {    db.execSQL("DROP TABLE " + name);  } catch (  Exception e) {    Log.e("Failed to drop table " + name,e);  }}  }
class C{  public SourceRange(int offset,int length){  this.offset=offset;  this.length=length;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public AbsoluteSize(Dimension size){  if (size == null) {    throw new NullPointerException("Size cannot be null.");  }  this.size=new Dimension(size);}  }
class C{  public ScriptRunner(final IKBus eventBus,final Script script,final Executor executor){  this.script=script;  this.eventBus=eventBus;  this.executor=executor;}  }
class C{  @NoInline private static void arraycopyPiecemeal(short[] src,int srcIdx,short[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  static int calculateMinShouldMatch(int optionalClauseCount,String spec){  int result=optionalClauseCount;  spec=spec.trim();  if (-1 < spec.indexOf("<")) {    spec=spaceAroundLessThanPattern.matcher(spec).replaceAll("<");    for (    String s : spacePattern.split(spec)) {      String[] parts=lessThanPattern.split(s,0);      int upperBound=Integer.parseInt(parts[0]);      if (optionalClauseCount <= upperBound) {        return result;      } else {        result=calculateMinShouldMatch(optionalClauseCount,parts[1]);      }    }    return result;  }  if (-1 < spec.indexOf('%')) {    spec=spec.substring(0,spec.length() - 1);    int percent=Integer.parseInt(spec);    float calc=(result * percent) * (1 / 100f);    result=calc < 0 ? result + (int)calc : (int)calc;  } else {    int calc=Integer.parseInt(spec);    result=calc < 0 ? result + calc : calc;  }  return (optionalClauseCount < result ? optionalClauseCount : (result < 0 ? 0 : result));}  }
class C{  @Override public List<Object> createMapComponentsFromSerializableKeyInfo(Object[] keyInfo,AbstractSession session){  return Arrays.asList(keyInfo);}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public RoundedTransformationBuilder cornerRadius(float radiusPx){  mCornerRadius[0]=radiusPx;  mCornerRadius[1]=radiusPx;  mCornerRadius[2]=radiusPx;  mCornerRadius[3]=radiusPx;  return this;}  }
class C{  public void write(DataSource data,OutputStream output) throws IOException {  Character separator=getSetting(SEPARATOR_CHAR);  OutputStreamWriter writer=new OutputStreamWriter(output);  int i=0;  int colCount=data.getColumnCount();  for (  Comparable<?> cell : data) {    writer.write(String.valueOf(cell));    int col=i % colCount;    if (col < colCount - 1) {      writer.write(separator);    } else {      writer.write("\r\n");    }    i++;  }  writer.close();}  }
class C{  private void executeRepairOperation(int operation) throws SQLException {  try (FbService service=attachServiceManager()){    ServiceRequestBuffer srb=createRepairSRB(service,operation);    executeServicesOperation(service,srb);  } }  }
class C{  public DiskCacheStore(Context context){  this(context.getCacheDir().getAbsolutePath());}  }
class C{  public void endElement(String elemName) throws SAXException {  if (m_tracer != null)   super.fireEndElem(elemName);}  }
class C{  public SRNCreationDialog(final NetworkPanel panel){  this.panel=panel;  GridBagConstraints gbc=new GridBagConstraints();  setTitle("Build Simple Recurrent Network");  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  srnPanel.setMyNextItemRow(1);  gbc.gridy=srnPanel.getMyNextItemRow();  gbc.gridx=0;  sectionSeparator("Network Parameters",gbc,1);  tfNumInputs.setColumns(5);  srnPanel.addItem("Number of input nodes:",tfNumInputs);  srnPanel.addItem("Hidden Neuron Type:",hiddenNeuronTypes,2);  srnPanel.addItem("Number of hidden nodes:",tfNumHidden);  srnPanel.addItem("Output Neuron Type:",outputNeuronTypes,2);  srnPanel.addItem("Number of output nodes:",tfNumOutputs);  fillFieldValues();  Action helpAction=new ShowHelpAction("Pages/Network/network/srn.html");  addButton(new JButton(helpAction));  setContentPane(srnPanel);}  }
class C{  public boolean has(String key){  return this.myHashMap.containsKey(key);}  }
class C{  static public void inssort(char[] array){  char tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public static IModule show(Shell shell,IJavaProject project,boolean showModulesInJars){  ModuleSelectionDialog dialog=new ModuleSelectionDialog(shell,project,showModulesInJars);  if (dialog.open() == OK) {    Object[] result=dialog.getResult();    assert (result.length == 1 && result[0] instanceof IModule);    IModule module=(IModule)result[0];    return module;  }  return null;}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static void main(String[] args){  TestHtmlStrongTag tester=new TestHtmlStrongTag();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.205 -0500",hash_original_method="3ED9D0D071477B613E998B33D61DD4C5",hash_generated_method="BBEFB627E25524A6B5E2B21CE60A6901") public final boolean hasContended(){  return getTaintBoolean();}  }
class C{  boolean supportsExtendedState(int state){switch (state) {case Frame.MAXIMIZED_VERT:case Frame.MAXIMIZED_HORIZ:    if (getWMID() == METACITY_WM) {      return false;    }case Frame.MAXIMIZED_BOTH:  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {    if (proto.supportsState(state)) {      return true;    }  }default :return false;}}  }
class C{  public MatsimFacilitiesReader(final CoordinateTransformation coordinateTransformation,final Scenario scenario){  this.coordinateTransformation=coordinateTransformation;  this.scenario=scenario;}  }
class C{  public void testCheckInitialInterval(){  int numResources=100;  int checkInterval=250;  AbsentResourceList list=new AbsentResourceList(numResources,2,checkInterval,60000);  try {    this.addResources(list,numResources);    this.testResourcesAbsent(list,numResources);    Thread.sleep((long)(1.01 * checkInterval));    this.testResourcesNotAbsent(list,numResources);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  @WorkerThread public long subscribeToAllEvents(@Nullable String eventNamePrefix,ParticleEventHandler handler) throws IOException {  return eventsDelegate.subscribeToAllEvents(eventNamePrefix,handler);}  }
class C{  public static Shape layoutGlyphVector(GlyphVector glyphs,Shape path,int align){  return layoutGlyphVector(glyphs,path,align,0f,(float)glyphs.getVisualBounds().getWidth(),ADJUST_SPACING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.260 -0400",hash_original_method="DE95FDD082B572F7824AA76C4D6C59F3",hash_generated_method="CAAF121C4D18B79BC883EE1541D5BF95") public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public TextEditor detabify(){  return detabify(4);}  }
class C{  public static double digamma(double x){  if (x == 0)   return Double.NaN; else   if (x < 0) {    if (Math.rint(x) == x)     return Double.NaN;    return digamma(1 - x) - PI / tan(PI * x);  }  double xp2=x + 2;  return log(xp2) - (6 * x + 13) / (12 * xp2 * xp2) - (2 * x + 1) / (x * x + x);}  }
class C{  public static <E>ImmutableList<E> copyOf(Iterator<? extends E> elements){  if (!elements.hasNext()) {    return of();  }  E first=elements.next();  if (!elements.hasNext()) {    return of(first);  } else {    return new ImmutableList.Builder<E>().add(first).addAll(elements).build();  }}  }
class C{  public boolean execute(String sql) throws SQLException {  return executeInternal(sql,fetchSize);}  }
class C{  public static int findLCM(final int a,final int b){  int result=0;  int num1, num2;  if (a > b) {    num1=a;    num2=b;  } else {    num1=b;    num2=a;  }  for (int i=1; i <= num2; i++) {    if ((num1 * i) % num2 == 0) {      result=i * num1;    }  }  return result;}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public final Vec2 solve22(Vec2 b){  Vec2 x=new Vec2();  solve22ToOut(b,x);  return x;}  }
class C{  static public int second(){  time.setToNow();  return time.second;}  }
class C{  public boolean isNotificationEMail(){  String s=getNotificationType();  return s == null || NOTIFICATIONTYPE_EMail.equals(s) || NOTIFICATIONTYPE_EMailPlusNotice.equals(s);}  }
class C{  public static char matchBracket(char c){  if (openBrackets.containsKey(c)) {    return openBrackets.get(c);  } else   if (closingBrackets.containsKey(c)) {    return closingBrackets.get(c);  }  return c;}  }
class C{  public void paint(Graphics g){  float fontHeight=10;  float fontAngle=0;  float penWidth=0;  float startX=0;  float startY=0;  int brushObject=-1;  int penObject=-1;  int fontObject=-1;  Font font=null;  int lastObjectIdx;  Stack dcStack=new Stack();  int numRecords=currentStore.getNumRecords();  int numObjects=currentStore.getNumObjects();  vpX=currentStore.getVpX() * scale;  vpY=currentStore.getVpY() * scale;  vpW=currentStore.getVpW() * scale;  vpH=currentStore.getVpH() * scale;  if (!currentStore.isReading()) {    GdiObject gdiObj;    int gdiIndex;    g.setPaintMode();    Graphics2D g2d=(Graphics2D)g;    g2d.setStroke(solid);    brushObject=-1;    penObject=-1;    fontObject=-1;    frgdColor=null;    bkgdColor=Color.white;    for (int i=0; i < numObjects; i++) {      gdiObj=currentStore.getObject(i);      gdiObj.clear();    }    float w=vpW;    float h=vpH;    g2d.setColor(Color.black);    for (int iRec=0; iRec < numRecords; iRec++) {      MetaRecord mr=currentStore.getRecord(iRec);switch (mr.functionId) {case WMFConstants.META_SETWINDOWORG:        currentStore.setVpX(vpX=-(float)mr.elementAt(0));      currentStore.setVpY(vpY=-(float)mr.elementAt(1));    vpX=vpX * scale;  vpY=vpY * scale;break;case WMFConstants.META_SETWINDOWORG_EX:case WMFConstants.META_SETWINDOWEXT:vpW=(float)mr.elementAt(0);vpH=(float)mr.elementAt(1);scaleX=scale;scaleY=scale;solid=new BasicStroke(scaleX * 2,BasicStroke.CAP_BUTT,BasicStroke.JOIN_ROUND);break;case WMFConstants.META_SETVIEWPORTORG:case WMFConstants.META_SETVIEWPORTEXT:case WMFConstants.META_OFFSETWINDOWORG:case WMFConstants.META_SCALEWINDOWEXT:case WMFConstants.META_OFFSETVIEWPORTORG:case WMFConstants.META_SCALEVIEWPORTEXT:break;case WMFConstants.META_SETPOLYFILLMODE:break;case WMFConstants.META_CREATEPENINDIRECT:{int objIndex=0;int penStyle=mr.elementAt(0);Color newClr;if (penStyle == WMFConstants.META_PS_NULL) {newClr=Color.white;objIndex=addObjectAt(currentStore,NULL_PEN,newClr,objIndex);} else {penWidth=mr.elementAt(4);setStroke(g2d,penStyle,penWidth,scaleX);newClr=new Color(mr.elementAt(1),mr.elementAt(2),mr.elementAt(3));objIndex=addObjectAt(currentStore,PEN,newClr,objIndex);}}break;case WMFConstants.META_CREATEBRUSHINDIRECT:{int objIndex=0;int brushStyle=mr.elementAt(0);Color clr=new Color(mr.elementAt(1),mr.elementAt(2),mr.elementAt(3));if (brushStyle == WMFConstants.BS_SOLID) {objIndex=addObjectAt(currentStore,BRUSH,clr,objIndex);} else if (brushStyle == WMFConstants.BS_HATCHED) {int hatch=mr.elementAt(4);Paint paint;if (!opaque) paint=TextureFactory.getInstance().getTexture(hatch,clr); else paint=TextureFactory.getInstance().getTexture(hatch,clr,bkgdColor);if (paint != null) objIndex=addObjectAt(currentStore,BRUSH,paint,objIndex); else {clr=Color.black;objIndex=addObjectAt(currentStore,NULL_BRUSH,clr,objIndex);}} else {clr=Color.black;objIndex=addObjectAt(currentStore,NULL_BRUSH,clr,objIndex);}}break;case WMFConstants.META_CREATEFONTINDIRECT:{float size=(int)(scaleY * mr.elementAt(0));int charset=mr.elementAt(3);int italic=mr.elementAt(1);int weight=mr.elementAt(2);int style=italic > 0 ? Font.ITALIC : Font.PLAIN;style|=(weight > 400) ? Font.BOLD : Font.PLAIN;String face=((MetaRecord.StringRecord)mr).text;int d=0;while ((d < face.length()) && ((Character.isLetterOrDigit(face.charAt(d))) || (Character.isWhitespace(face.charAt(d))))) d++;if (d > 0) face=face.substring(0,d); else face="System";if (size < 0) size=-size;int objIndex=0;fontHeight=size;Font f=new Font(face,style,(int)size);f=f.deriveFont(size);int underline=mr.elementAt(4);int strikeOut=mr.elementAt(5);int orient=mr.elementAt(6);int escape=mr.elementAt(7);WMFFont wf=new WMFFont(f,charset,underline,strikeOut,italic,weight,orient,escape);objIndex=addObjectAt(currentStore,FONT,wf,objIndex);}break;case WMFConstants.META_CREATEBRUSH:case WMFConstants.META_CREATEPATTERNBRUSH:case WMFConstants.META_CREATEBITMAPINDIRECT:case WMFConstants.META_CREATEBITMAP:case WMFConstants.META_CREATEREGION:{int objIndex=addObjectAt(currentStore,PALETTE,INTEGER_0,0);}break;case WMFConstants.META_CREATEPALETTE:{int objIndex=addObjectAt(currentStore,OBJ_REGION,INTEGER_0,0);}break;case WMFConstants.META_SELECTPALETTE:case WMFConstants.META_REALIZEPALETTE:case WMFConstants.META_ANIMATEPALETTE:case WMFConstants.META_SETPALENTRIES:case WMFConstants.META_RESIZEPALETTE:break;case WMFConstants.META_SELECTOBJECT:gdiIndex=mr.elementAt(0);if ((gdiIndex & 0x80000000) != 0) break;if (gdiIndex >= numObjects) {gdiIndex-=numObjects;switch (gdiIndex) {case WMFConstants.META_OBJ_NULL_BRUSH:brushObject=-1;break;case WMFConstants.META_OBJ_NULL_PEN:penObject=-1;break;case WMFConstants.META_OBJ_WHITE_BRUSH:case WMFConstants.META_OBJ_LTGRAY_BRUSH:case WMFConstants.META_OBJ_GRAY_BRUSH:case WMFConstants.META_OBJ_DKGRAY_BRUSH:case WMFConstants.META_OBJ_BLACK_BRUSH:case WMFConstants.META_OBJ_WHITE_PEN:case WMFConstants.META_OBJ_BLACK_PEN:case WMFConstants.META_OBJ_OEM_FIXED_FONT:case WMFConstants.META_OBJ_ANSI_FIXED_FONT:case WMFConstants.META_OBJ_ANSI_VAR_FONT:case WMFConstants.META_OBJ_SYSTEM_FONT:case WMFConstants.META_OBJ_DEVICE_DEFAULT_FONT:case WMFConstants.META_OBJ_DEFAULT_PALETTE:case WMFConstants.META_OBJ_SYSTEM_FIXED_FONT:break;}break;}gdiObj=currentStore.getObject(gdiIndex);if (!gdiObj.used) break;switch (gdiObj.type) {case PEN:g2d.setColor((Color)gdiObj.obj);penObject=gdiIndex;break;case BRUSH:if (gdiObj.obj instanceof Color) g2d.setColor((Color)gdiObj.obj); else if (gdiObj.obj instanceof Paint) {g2d.setPaint((Paint)gdiObj.obj);} else g2d.setPaint(getPaint((byte[])(gdiObj.obj)));brushObject=gdiIndex;break;case FONT:{this.wmfFont=((WMFFont)gdiObj.obj);Font f=this.wmfFont.font;g2d.setFont(f);fontObject=gdiIndex;}break;case NULL_PEN:penObject=-1;break;case NULL_BRUSH:brushObject=-1;break;}break;case WMFConstants.META_DELETEOBJECT:gdiIndex=mr.elementAt(0);gdiObj=currentStore.getObject(gdiIndex);if (gdiIndex == brushObject) brushObject=-1; else if (gdiIndex == penObject) penObject=-1; else if (gdiIndex == fontObject) fontObject=-1;gdiObj.clear();break;case WMFConstants.META_POLYPOLYGON:{int numPolygons=mr.elementAt(0);int[] pts=new int[numPolygons];for (int ip=0; ip < numPolygons; ip++) pts[ip]=mr.elementAt(ip + 1);int offset=numPolygons + 1;List v=new ArrayList(numPolygons);for (int j=0; j < numPolygons; j++) {int count=pts[j];float[] xpts=new float[count];float[] ypts=new float[count];for (int k=0; k < count; k++) {xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(offset + k * 2));ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(offset + k * 2 + 1));}offset+=count * 2;Polygon2D pol=new Polygon2D(xpts,ypts,count);v.add(pol);}if (brushObject >= 0) {setBrushPaint(currentStore,g2d,brushObject);fillPolyPolygon(g2d,v);firstEffectivePaint=false;}if (penObject >= 0) {setPenColor(currentStore,g2d,penObject);drawPolyPolygon(g2d,v);firstEffectivePaint=false;}break;}case WMFConstants.META_POLYGON:{int count=mr.elementAt(0);float[] _xpts=new float[count];float[] _ypts=new float[count];for (int k=0; k < count; k++) {_xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(k * 2 + 1));_ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(k * 2 + 2));}Polygon2D pol=new Polygon2D(_xpts,_ypts,count);paint(brushObject,penObject,pol,g2d);}break;case WMFConstants.META_MOVETO:startX=scaleX * (vpX + xOffset + mr.elementAt(0));startY=scaleY * (vpY + yOffset + mr.elementAt(1));break;case WMFConstants.META_LINETO:{float endX=scaleX * (vpX + xOffset + mr.elementAt(0));float endY=scaleY * (vpY + yOffset + mr.elementAt(1));Line2D.Float line=new Line2D.Float(startX,startY,endX,endY);paintWithPen(penObject,line,g2d);startX=endX;startY=endY;}break;case WMFConstants.META_POLYLINE:{int count=mr.elementAt(0);float[] _xpts=new float[count];float[] _ypts=new float[count];for (int k=0; k < count; k++) {_xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(k * 2 + 1));_ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(k * 2 + 2));}Polyline2D pol=new Polyline2D(_xpts,_ypts,count);paintWithPen(penObject,pol,g2d);}break;case WMFConstants.META_RECTANGLE:{float x1, y1, x2, y2;x1=scaleX * (vpX + xOffset + mr.elementAt(0));x2=scaleX * (vpX + xOffset + mr.elementAt(2));y1=scaleY * (vpY + yOffset + mr.elementAt(1));y2=scaleY * (vpY + yOffset + mr.elementAt(3));Rectangle2D.Float rec=new Rectangle2D.Float(x1,y1,x2 - x1,y2 - y1);paint(brushObject,penObject,rec,g2d);}break;case WMFConstants.META_ROUNDRECT:{float x1, y1, x2, y2, x3, y3;x1=scaleX * (vpX + xOffset + mr.elementAt(0));x2=scaleX * (vpX + xOffset + mr.elementAt(2));x3=scaleX * (float)(mr.elementAt(4));y1=scaleY * (vpY + yOffset + mr.elementAt(1));y2=scaleY * (vpY + yOffset + mr.elementAt(3));y3=scaleY * (float)(mr.elementAt(5));RoundRectangle2D rec=new RoundRectangle2D.Float(x1,y1,x2 - x1,y2 - y1,x3,y3);paint(brushObject,penObject,rec,g2d);}break;case WMFConstants.META_ELLIPSE:{float x1=scaleX * (vpX + xOffset + mr.elementAt(0));float x2=scaleX * (vpX + xOffset + mr.elementAt(2));float y1=scaleY * (vpY + yOffset + mr.elementAt(1));float y2=scaleY * (vpY + yOffset + mr.elementAt(3));Ellipse2D.Float el=new Ellipse2D.Float(x1,y1,x2 - x1,y2 - y1);paint(brushObject,penObject,el,g2d);}break;case WMFConstants.META_SETTEXTALIGN:currentHorizAlign=WMFUtilities.getHorizontalAlignment(mr.elementAt(0));currentVertAlign=WMFUtilities.getVerticalAlignment(mr.elementAt(0));break;case WMFConstants.META_SETTEXTCOLOR:frgdColor=new Color(mr.elementAt(0),mr.elementAt(1),mr.elementAt(2));g2d.setColor(frgdColor);break;case WMFConstants.META_SETBKCOLOR:bkgdColor=new Color(mr.elementAt(0),mr.elementAt(1),mr.elementAt(2));g2d.setColor(bkgdColor);break;case WMFConstants.META_EXTTEXTOUT:try {byte[] bstr=((MetaRecord.ByteRecord)mr).bstr;String sr=WMFUtilities.decodeString(wmfFont,bstr);float x=scaleX * (vpX + xOffset + mr.elementAt(0));float y=scaleY * (vpY + yOffset + mr.elementAt(1));if (frgdColor != null) g2d.setColor(frgdColor); else g2d.setColor(Color.black);FontRenderContext frc=g2d.getFontRenderContext();Point2D.Double pen=new Point2D.Double(0,0);GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);TextLayout layout=new TextLayout(sr,g2d.getFont(),frc);int flag=mr.elementAt(2);int x1=0, y1=0, x2=0, y2=0;boolean clipped=false;Shape clip=null;if ((flag & WMFConstants.ETO_CLIPPED) != 0) {clipped=true;x1=mr.elementAt(3);y1=mr.elementAt(4);x2=mr.elementAt(5);y2=mr.elementAt(6);clip=g2d.getClip();g2d.setClip(x1,y1,x2,y2);}firstEffectivePaint=false;y+=getVerticalAlignmentValue(layout,currentVertAlign);drawString(flag,g2d,getCharacterIterator(g2d,sr,wmfFont,currentHorizAlign),x,y,layout,wmfFont,currentHorizAlign);if (clipped) g2d.setClip(clip);} catch (Exception e) {}break;case WMFConstants.META_TEXTOUT:case WMFConstants.META_DRAWTEXT:try {byte[] bstr=((MetaRecord.ByteRecord)mr).bstr;String sr=WMFUtilities.decodeString(wmfFont,bstr);float x=scaleX * (vpX + xOffset + mr.elementAt(0));float y=scaleY * (vpY + yOffset + mr.elementAt(1));if (frgdColor != null) g2d.setColor(frgdColor); else g2d.setColor(Color.black);FontRenderContext frc=g2d.getFontRenderContext();Point2D.Double pen=new Point2D.Double(0,0);GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);TextLayout layout=new TextLayout(sr,g2d.getFont(),frc);firstEffectivePaint=false;y+=getVerticalAlignmentValue(layout,currentVertAlign);drawString(-1,g2d,getCharacterIterator(g2d,sr,wmfFont),x,y,layout,wmfFont,currentHorizAlign);} catch (Exception e) {}break;case WMFConstants.META_ARC:case WMFConstants.META_PIE:{double left, top, right, bottom;double xstart, ystart, xend, yend;left=scaleX * (vpX + xOffset + mr.elementAt(0));top=scaleY * (vpY + yOffset + mr.elementAt(1));right=scaleX * (vpX + xOffset + mr.elementAt(2));bottom=scaleY * (vpY + yOffset + mr.elementAt(3));xstart=scaleX * (vpX + xOffset + mr.elementAt(4));ystart=scaleY * (vpY + yOffset + mr.elementAt(5));xend=scaleX * (vpX + xOffset + mr.elementAt(6));yend=scaleY * (vpY + yOffset + mr.elementAt(7));setBrushPaint(currentStore,g2d,brushObject);double cx=left + (right - left) / 2;double cy=top + (bottom - top) / 2;double startAngle=-Math.toDegrees(Math.atan2(ystart - cy,xstart - cx));double endAngle=-Math.toDegrees(Math.atan2(yend - cy,xend - cx));double extentAngle=endAngle - startAngle;if (extentAngle < 0) extentAngle+=360;if (startAngle < 0) startAngle+=360;Arc2D.Double arc=new Arc2D.Double(left,top,right - left,bottom - top,startAngle,extentAngle,Arc2D.OPEN);if (mr.functionId == WMFConstants.META_ARC) g2d.draw(arc); else g2d.fill(arc);firstEffectivePaint=false;}break;case WMFConstants.META_CHORD:{double left, top, right, bottom;double xstart, ystart, xend, yend;left=scaleX * (vpX + xOffset + mr.elementAt(0));top=scaleY * (vpY + yOffset + mr.elementAt(1));right=scaleX * (vpX + xOffset + mr.elementAt(2));bottom=scaleY * (vpY + yOffset + mr.elementAt(3));xstart=scaleX * (vpX + xOffset + mr.elementAt(4));ystart=scaleY * (vpY + yOffset + mr.elementAt(5));xend=scaleX * (vpX + xOffset + mr.elementAt(6));yend=scaleY * (vpY + yOffset + mr.elementAt(7));setBrushPaint(currentStore,g2d,brushObject);double cx=left + (right - left) / 2;double cy=top + (bottom - top) / 2;double startAngle=-Math.toDegrees(Math.atan2(ystart - cy,xstart - cx));double endAngle=-Math.toDegrees(Math.atan2(yend - cy,xend - cx));double extentAngle=endAngle - startAngle;if (extentAngle < 0) extentAngle+=360;if (startAngle < 0) startAngle+=360;Arc2D.Double arc=new Arc2D.Double(left,top,right - left,bottom - top,startAngle,extentAngle,Arc2D.CHORD);paint(brushObject,penObject,arc,g2d);firstEffectivePaint=false;}break;case WMFConstants.META_SAVEDC:dcStack.push(new Float(penWidth));dcStack.push(new Float(startX));dcStack.push(new Float(startY));dcStack.push(new Integer(brushObject));dcStack.push(new Integer(penObject));dcStack.push(new Integer(fontObject));dcStack.push(frgdColor);dcStack.push(bkgdColor);break;case WMFConstants.META_RESTOREDC:bkgdColor=(Color)dcStack.pop();frgdColor=(Color)dcStack.pop();fontObject=((Integer)(dcStack.pop())).intValue();penObject=((Integer)(dcStack.pop())).intValue();brushObject=((Integer)(dcStack.pop())).intValue();startY=((Float)(dcStack.pop())).floatValue();startX=((Float)(dcStack.pop())).floatValue();penWidth=((Float)(dcStack.pop())).floatValue();break;case WMFConstants.META_POLYBEZIER16:try {setPenColor(currentStore,g2d,penObject);int pointCount=mr.elementAt(0);int bezierCount=(pointCount - 1) / 3;float _startX=scaleX * (vpX + xOffset + mr.elementAt(1));float _startY=scaleY * (vpY + yOffset + mr.elementAt(2));GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);gp.moveTo(_startX,_startY);for (int j=0; j < bezierCount; j++) {int j6=j * 6;float cp1X=scaleX * (vpX + xOffset + mr.elementAt(j6 + 3));float cp1Y=scaleY * (vpY + yOffset + mr.elementAt(j6 + 4));float cp2X=scaleX * (vpX + xOffset + mr.elementAt(j6 + 5));float cp2Y=scaleY * (vpY + yOffset + mr.elementAt(j6 + 6));float endX=scaleX * (vpX + xOffset + mr.elementAt(j6 + 7));float endY=scaleY * (vpY + yOffset + mr.elementAt(j6 + 8));gp.curveTo(cp1X,cp1Y,cp2X,cp2Y,endX,endY);_startX=endX;_startY=endY;}g2d.setStroke(solid);g2d.draw(gp);firstEffectivePaint=false;} catch (Exception e) {}break;case WMFConstants.META_EXCLUDECLIPRECT:case WMFConstants.META_INTERSECTCLIPRECT:case WMFConstants.META_OFFSETCLIPRGN:case WMFConstants.META_SELECTCLIPREGION:case WMFConstants.META_SETMAPMODE:case WMFConstants.META_SETRELABS:case WMFConstants.META_SETSTRETCHBLTMODE:case WMFConstants.META_SETTEXTCHAREXTRA:case WMFConstants.META_SETTEXTJUSTIFICATION:case WMFConstants.META_FLOODFILL:break;case WMFConstants.META_SETBKMODE:{int mode=mr.elementAt(0);opaque=(mode == WMFConstants.OPAQUE);}break;case WMFConstants.META_SETROP2:{float rop=(float)(mr.ElementAt(0).intValue());Paint paint=null;boolean ok=false;if (rop == WMFConstants.META_BLACKNESS) {paint=Color.black;ok=true;} else if (rop == WMFConstants.META_WHITENESS) {paint=Color.white;ok=true;} else if (rop == WMFConstants.META_PATCOPY) {if (brushObject >= 0) {paint=getStoredPaint(currentStore,brushObject);ok=true;}}if (ok) {if (paint != null) {g2d.setPaint(paint);} else {setBrushPaint(currentStore,g2d,brushObject);}}}break;case WMFConstants.META_PATBLT:{float rop=(float)(mr.elementAt(0));float height=scaleY * (float)(mr.elementAt(1));float width=scaleX * (float)(mr.elementAt(2));float left=scaleX * (vpX + xOffset + mr.elementAt(3));float top=scaleY * (vpY + yOffset + mr.elementAt(4));Paint paint=null;boolean ok=false;if (rop == WMFConstants.META_BLACKNESS) {paint=Color.black;ok=true;} else if (rop == WMFConstants.META_WHITENESS) {paint=Color.white;ok=true;} else if (rop == WMFConstants.META_PATCOPY) {if (brushObject >= 0) {paint=getStoredPaint(currentStore,brushObject);ok=true;}}if (ok) {Color oldClr=g2d.getColor();if (paint != null) {g2d.setPaint(paint);} else {setBrushPaint(currentStore,g2d,brushObject);}Rectangle2D.Float rec=new Rectangle2D.Float(left,top,width,height);g2d.fill(rec);g2d.setColor(oldClr);}}break;case WMFConstants.META_DIBSTRETCHBLT:{int height=mr.elementAt(1);int width=mr.elementAt(2);int sy=mr.elementAt(3);int sx=mr.elementAt(4);float dy=conv * currentStore.getVpWFactor() * (vpY + yOffset + mr.elementAt(7));float dx=conv * currentStore.getVpHFactor() * (vpX + xOffset + mr.elementAt(8));float heightDst=(float)(mr.elementAt(5));float widthDst=(float)(mr.elementAt(6));widthDst=widthDst * conv * currentStore.getVpWFactor();heightDst=heightDst * conv * currentStore.getVpHFactor();byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;BufferedImage img=getImage(bitmap,width,height);if (img != null) {g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,bkgdColor,observer);}}break;case WMFConstants.META_STRETCHDIB:{int height=mr.elementAt(1);int width=mr.elementAt(2);int sy=mr.elementAt(3);int sx=mr.elementAt(4);float dy=conv * currentStore.getVpWFactor() * (vpY + yOffset + (float)mr.elementAt(7));float dx=conv * currentStore.getVpHFactor() * (vpX + xOffset + (float)mr.elementAt(8));float heightDst=(float)(mr.elementAt(5));float widthDst=(float)(mr.elementAt(6));widthDst=widthDst * conv * currentStore.getVpWFactor();heightDst=heightDst * conv * currentStore.getVpHFactor();byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;BufferedImage img=getImage(bitmap,width,height);if (img != null) {if (opaque) {g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,bkgdColor,observer);} else {g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,observer);}}}break;case WMFConstants.META_DIBBITBLT:{int rop=mr.ElementAt(0).intValue();float height=(mr.ElementAt(1).intValue() * conv * currentStore.getVpWFactor());float width=(mr.ElementAt(2).intValue() * conv * currentStore.getVpHFactor());int sy=mr.ElementAt(3).intValue();int sx=mr.ElementAt(4).intValue();float dy=(conv * currentStore.getVpWFactor() * (vpY + yOffset + (float)mr.ElementAt(5).intValue()));float dx=(conv * currentStore.getVpHFactor() * (vpX + xOffset + (float)mr.ElementAt(6).intValue()));if (mr instanceof MetaRecord.ByteRecord) {byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;BufferedImage img=getImage(bitmap);if (img != null) {int withSrc=img.getWidth();int heightSrc=img.getHeight();if (opaque) {g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + width),(int)(dy + height),sx,sy,sx + withSrc,sy + heightSrc,bkgdColor,observer);} else {g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + width),(int)(dy + height),sx,sy,sx + withSrc,sy + heightSrc,observer);}}} else {if (opaque) {Color col=g2d.getColor();g2d.setColor(bkgdColor);g2d.fill(new Rectangle2D.Float(dx,dy,width,height));g2d.setColor(col);}}}break;case WMFConstants.META_DIBCREATEPATTERNBRUSH:{int objIndex=0;byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;objIndex=addObjectAt(currentStore,BRUSH,bitmap,objIndex);}break;case WMFConstants.META_SETPIXEL:case WMFConstants.META_BITBLT:case WMFConstants.META_STRETCHBLT:case WMFConstants.META_ESCAPE:case WMFConstants.META_FILLREGION:case WMFConstants.META_FRAMEREGION:case WMFConstants.META_INVERTREGION:case WMFConstants.META_PAINTREGION:case WMFConstants.META_SETMAPPERFLAGS:case WMFConstants.META_SETDIBTODEV:default :{}break;}}}}  }
class C{  public static void join(Thread t) throws IgniteInterruptedCheckedException {  try {    t.join();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public static UserTransaction lookupUserTransaction() throws SchedulerException {  return new UserTransactionWithContext();}  }
class C{  public static byte[] toJSONByteArray(PdxInstance pdxInstance){  try {    PdxToJSON pj=new PdxToJSON(pdxInstance);    return pj.getJSONByteArray();  } catch (  Exception e) {    throw new JSONFormatterException("Could not create JSON document from PdxInstance",e);  }}  }
class C{  public TFunction basicGetDeclaredType(){  return declaredType;}  }
class C{  private void initNotEnumerationParameter(int indexForParameters,PricedParameterRow curParameter){  List<VOPricedRole> roleSpecificUserPrices=curParameter.getPricedParameter().getRoleSpecificUserPrices();  if (roleSpecificUserPrices != null) {    for (    VOPricedRole rolePrice : roleSpecificUserPrices) {      VORoleDefinition curParamRole=rolePrice.getRole();      for (int roleIndex=0; roleIndex < roles.size(); roleIndex++) {        if (curParamRole.getRoleId().equals(roles.get(roleIndex).getRoleId())) {          pricedParametersOfAllRoles[roleIndex][indexForParameters].getPricedParameter().setPricePerUser(rolePrice.getPricePerUser());        }      }    }  }}  }
class C{  public void onShow(Function callback){  peer.onShow(callback);}  }
class C{  public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException("source == null");  }  this.source=source;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length < 1) {    System.err.println("usage: java edu.berkeley.nlp.io." + "PTBTokenizer [-cr] filename");    return;  }  PTBTokenizer tokenizer=new PTBTokenizer(new FileReader(args[args.length - 1]),"-cr".equals(args[0]));  List words=tokenizer.tokenize();  for (int i=0; i < words.size(); i++)   System.out.println(words.get(i));}  }
class C{  @Override public void registerResourceFactories(ResourceSet resourceSet){  super.registerResourceFactories(resourceSet);}  }
class C{  protected AnimatableNumberOrIdentValue(AnimationTarget target){  super(target);}  }
class C{  private Annotation createConstituentAnnotationFromTree(JCas aJCas,Tree<String> aNode,Annotation aParentFS,List<Token> aTokens,MutableInt aIndex){  if (aNode.isPreTerminal()) {    Token token=aTokens.get(aIndex.intValue());    if (aParentFS != null) {      token.setParent(aParentFS);    }    if (writePos) {      String typeName=aNode.getLabel();      Type posTag=posMappingProvider.getTagType(typeName);      POS posAnno=(POS)aJCas.getCas().createAnnotation(posTag,token.getBegin(),token.getEnd());      posAnno.setPosValue(internTags ? typeName.intern() : typeName);      posAnno.setCoarseValue(posAnno.getClass().equals(POS.class) ? null : posAnno.getType().getShortName().intern());      posAnno.addToIndexes();      token.setPos(posAnno);    }    aIndex.add(1);    return token;  } else {    String typeName=aNode.getLabel();    Type constType=constituentMappingProvider.getTagType(typeName);    Constituent constAnno=(Constituent)aJCas.getCas().createAnnotation(constType,0,0);    constAnno.setConstituentType(typeName);    if (aParentFS != null) {      constAnno.setParent(aParentFS);    }    List<Annotation> childAnnotations=new ArrayList<Annotation>();    for (    Tree<String> child : aNode.getChildren()) {      Annotation childAnnotation=createConstituentAnnotationFromTree(aJCas,child,constAnno,aTokens,aIndex);      if (childAnnotation != null) {        childAnnotations.add(childAnnotation);      }    }    constAnno.setBegin(childAnnotations.get(0).getBegin());    constAnno.setEnd(childAnnotations.get(childAnnotations.size() - 1).getEnd());    FSArray childArray=FSCollectionFactory.createFSArray(aJCas,childAnnotations);    constAnno.setChildren(childArray);    aJCas.addFsToIndexes(constAnno);    return constAnno;  }}  }
class C{  public final boolean put(long fp) throws IOException {  return getFPSet(fp).put(fp);}  }
class C{  public void text(float num,float x,float y){  text(PApplet.nfs(num,0,3),x,y);}  }
class C{  @NotNull @ObjectiveCName("inviteMemberPromiseWithGid:withUid:") public Promise<Void> inviteMemberPromise(int gid,int uid){  return modules.getGroupsModule().addMember(gid,uid);}  }
class C{  private static double parseDouble(final String s){  final int pos=s.indexOf("K");  if (pos == -1) {    return Long.valueOf(s);  }  final long val=Long.valueOf(s.substring(0,pos));  return val * 1000;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public static Result restWorkflowFromFlowId(String flowId){  JsonArray jobSeverityArray=new JsonArray();  JsonArray jobSummaryArray=new JsonArray();  JsonObject data=new JsonObject();  String flowExecId=flowId;  String username="";  long totalFlowResourceUsed=0;  long totalFlowResourceWasted=0;  long totalFlowRuntime=0;  long totalFlowDelay=0;  Severity flowSeverity=Severity.NONE;  long flowStartTime=Long.MAX_VALUE;  long flowEndTime=0;  String flowDefinitionId="";  Map<Severity,Long> jobSeverityCount=new HashMap<Severity,Long>();  String wfQueueName="";  List<AppResult> results=getRestFlowResultsFromFlowExecutionId(flowId);  if (results.isEmpty()) {    JsonObject parent=new JsonObject();    parent.add(JsonKeys.WORKFLOWS,data);    return ok(new Gson().toJson(parent));  }  Map<IdUrlPair,List<AppResult>> jobExecIdToJobsMap=ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.JOB_EXECUTION_ID);  for (  IdUrlPair jobDefPair : jobExecIdToJobsMap.keySet()) {    long totalJobMemoryUsed=0;    long totalJobMemoryWasted=0;    long totalJobDelay=0;    long totalJobRuntime=0;    long jobStartTime=Long.MAX_VALUE;    long jobEndTime=0;    Severity jobSeverity=Severity.NONE;    String jobType=null;    String jobId=jobDefPair.getId();    String jobName="";    String queueName="";    Map<Severity,Long> taskSeverityCount=new HashMap<Severity,Long>();    for (    AppResult task : jobExecIdToJobsMap.get(jobDefPair)) {      totalJobMemoryUsed+=task.resourceUsed;      totalJobMemoryWasted+=task.resourceWasted;      username=task.username;      jobType=task.jobType;      jobName=task.jobName;      flowDefinitionId=task.flowDefId;      queueName=task.queueName;      if (task.startTime < jobStartTime) {        jobStartTime=task.startTime;      }      if (task.finishTime > jobEndTime) {        jobEndTime=task.finishTime;      }      if (task.severity.getValue() > jobSeverity.getValue()) {        jobSeverity=task.severity;      }      if (taskSeverityCount.containsKey(task.severity)) {        taskSeverityCount.put(task.severity,taskSeverityCount.get(task.severity) + 1L);      } else {        taskSeverityCount.put(task.severity,1L);      }    }    if (jobSeverityCount.containsKey(jobSeverity)) {      jobSeverityCount.put(jobSeverity,jobSeverityCount.get(jobSeverity) + 1L);    } else {      jobSeverityCount.put(jobSeverity,1L);    }    JsonArray taskSeverity=new JsonArray();    for (    Map.Entry<Severity,Long> entry : taskSeverityCount.entrySet()) {      JsonObject severityObject=new JsonObject();      severityObject.addProperty(JsonKeys.SEVERITY,entry.getKey().getText());      severityObject.addProperty(JsonKeys.COUNT,entry.getValue());      taskSeverity.add(severityObject);    }    wfQueueName=queueName;    totalJobDelay=Utils.getTotalWaittime(jobExecIdToJobsMap.get(jobDefPair));    totalJobRuntime=Utils.getTotalRuntime(jobExecIdToJobsMap.get(jobDefPair));    JsonObject jobObject=new JsonObject();    jobObject.addProperty(JsonKeys.ID,jobId);    jobObject.addProperty(JsonKeys.JOB_NAME,jobName);    jobObject.addProperty(JsonKeys.JOB_TYPE,jobType);    jobObject.addProperty(JsonKeys.USERNAME,username);    jobObject.addProperty(JsonKeys.START_TIME,jobStartTime);    jobObject.addProperty(JsonKeys.FINISH_TIME,jobEndTime);    jobObject.addProperty(JsonKeys.RUNTIME,totalJobRuntime);    jobObject.addProperty(JsonKeys.WAITTIME,totalJobDelay);    jobObject.addProperty(JsonKeys.RESOURCE_USED,totalJobMemoryUsed);    jobObject.addProperty(JsonKeys.RESOURCE_WASTED,totalJobMemoryWasted);    jobObject.addProperty(JsonKeys.QUEUE,queueName);    jobObject.addProperty(JsonKeys.SEVERITY,jobSeverity.getText());    jobObject.add(JsonKeys.TASKS_SEVERITY,taskSeverity);    jobSummaryArray.add(jobObject);    totalFlowResourceUsed+=totalJobMemoryUsed;    totalFlowResourceWasted+=totalJobMemoryWasted;    if (jobSeverity.getValue() > flowSeverity.getValue()) {      flowSeverity=jobSeverity;    }    if (flowStartTime > jobStartTime) {      flowStartTime=jobStartTime;    }    if (flowEndTime < jobEndTime) {      flowEndTime=jobEndTime;    }  }  for (  Map.Entry<Severity,Long> entry : jobSeverityCount.entrySet()) {    JsonObject severityObject=new JsonObject();    severityObject.addProperty(JsonKeys.SEVERITY,entry.getKey().getText());    severityObject.addProperty(JsonKeys.COUNT,entry.getValue());    jobSeverityArray.add(severityObject);  }  totalFlowDelay=Utils.getTotalWaittime(results);  totalFlowRuntime=Utils.getTotalRuntime(results);  data.addProperty(JsonKeys.ID,flowExecId);  data.addProperty(JsonKeys.USERNAME,username);  data.addProperty(JsonKeys.START_TIME,flowStartTime);  data.addProperty(JsonKeys.FINISH_TIME,flowEndTime);  data.addProperty(JsonKeys.RUNTIME,totalFlowRuntime);  data.addProperty(JsonKeys.WAITTIME,totalFlowDelay);  data.addProperty(JsonKeys.RESOURCE_USED,totalFlowResourceUsed);  data.addProperty(JsonKeys.RESOURCE_WASTED,totalFlowResourceWasted);  data.addProperty(JsonKeys.SEVERITY,flowSeverity.getText());  data.addProperty(JsonKeys.FLOW_EXEC_ID,flowExecId);  data.addProperty(JsonKeys.FLOW_DEF_ID,flowDefinitionId);  data.addProperty(JsonKeys.QUEUE,wfQueueName);  data.add(JsonKeys.JOBSSUMMARIES,jobSummaryArray);  data.add(JsonKeys.JOBS_SEVERITY,jobSeverityArray);  JsonObject parent=new JsonObject();  parent.add(JsonKeys.WORKFLOWS,data);  return ok(new Gson().toJson(parent));}  }
class C{  public void reshape(int x,int y,int width,int height){  setBounds(x,y,width,height,SET_BOUNDS);}  }
class C{  private void determineFunctionCandidatesNNZPropagation(Map<String,FunctionOp> fcandHops,Map<String,Set<Long>> fcandSafeNNZ){  for (  Entry<String,FunctionOp> e : fcandHops.entrySet()) {    String fKey=e.getKey();    FunctionOp fop=e.getValue();    HashSet<Long> tmp=new HashSet<Long>();    for (    Hop input : fop.getInput()) {      if (input.getNnz() >= 0)       tmp.add(input.getHopID());    }    fcandSafeNNZ.put(fKey,tmp);  }}  }
class C{  private static int capacity(int expectedMaxSize){  return (expectedMaxSize > MAXIMUM_CAPACITY / 3) ? MAXIMUM_CAPACITY : (expectedMaxSize <= 2 * MINIMUM_CAPACITY / 3) ? MINIMUM_CAPACITY : Integer.highestOneBit(expectedMaxSize + (expectedMaxSize << 1));}  }
class C{  protected boolean hasValidUserInContext(){  if ((sc != null) && (sc.getUserPrincipal() instanceof StorageOSUser)) {    return true;  } else {    return false;  }}  }
class C{  public ImageHandlerBase64Encoder(){  super();}  }
class C{  @SafeVarargs public static <V>Set<V> createSet(V... values){  Set<V> set=new LinkedHashSet<V>();  for (  V v : values) {    set.add(v);  }  return set;}  }
class C{  public void onEndPage(PdfWriter writer,Document document){  PdfContentByte cb=writer.getDirectContent();  cb.saveState();  Date date=new Date();  String textLeft="Page " + writer.getPageNumber() + " of ";  String textRight=date + "            " + "Page "+ writer.getPageNumber()+ " of ";  float textBase=document.bottom() - 20;  float textSizeLeft=helv.getWidthPoint(textLeft,8);  float textSizeRigth=helv.getWidthPoint(textRight,8);  cb.beginText();  cb.setFontAndSize(helv,8);  if ((writer.getPageNumber() % 2) == 1) {    cb.setTextMatrix(document.left(),textBase);    cb.showText(textLeft + "            " + date);    cb.endText();    cb.addTemplate(total,document.left() + textSizeLeft,textBase);  } else {    float adjust=helv.getWidthPoint("",8);    cb.setTextMatrix(document.right() - textSizeRigth - adjust,textBase);    cb.showText(textRight);    cb.endText();    cb.addTemplate(total,document.right() - adjust,textBase);  }  cb.restoreState();}  }
class C{  public TimeColumn time(){  TimeColumn newColumn=TimeColumn.create(this.name() + " time");  for (int r=0; r < this.size(); r++) {    long c1=this.getLong(r);    if (c1 == MISSING_VALUE) {      newColumn.add(TimeColumn.MISSING_VALUE);    } else {      newColumn.add(PackedLocalDateTime.time(c1));    }  }  return newColumn;}  }
class C{  private void finalizeAdditions(boolean addHomeScreenShortcuts){  finalizeWorkFolder();  if (addHomeScreenShortcuts && !mHomescreenApps.isEmpty()) {    sortList(mHomescreenApps);    mModel.addAndBindAddedWorkspaceItems(mContext,mHomescreenApps);  }}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  Set<Map.Entry<String,ColumnSchemaDetails>> entries=columnSchemaDetailsMap.entrySet();  Iterator<Map.Entry<String,ColumnSchemaDetails>> iterator=entries.iterator();  while (iterator.hasNext()) {    Map.Entry<String,ColumnSchemaDetails> entry=iterator.next();    builder.append(entry.getKey());    builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);    builder.append(entry.getValue().toString());    if (iterator.hasNext()) {      builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);    }  }  return builder.toString();}  }
class C{  @Override protected void onSetTopicProtection(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_topic_protection,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public Att removeAtt(String qName){  for (int i=0; i < attributes.size(); i++) {    Att att=attributes.get(i);    if (att.getQName().equals(qName)) {      attributes.remove(i);      return att;    }  }  return null;}  }
class C{  public void lastExchangeTime(long lastExchangeTime){  this.lastExchangeTime=lastExchangeTime;}  }
class C{  public final static byte[] encodeToByte(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  byte[] dArr=new byte[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=(byte)CA[(i >>> 18) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 12) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 6) & 0x3f];    dArr[d++]=(byte)CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=(byte)CA[i >> 12];    dArr[dLen - 3]=(byte)CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? (byte)CA[i & 0x3f] : (byte)'=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues){  return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,true);}  }
class C{  public static byte composeUdhi(byte esmClass){  return composeSpecificFeatures(esmClass,SMPPConstant.ESMCLS_UDHI_INDICATOR_SET);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return DOMAIN_ID;case 3:return HOSTNAME;case 4:return PORT;default :return null;}}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method);}  }
class C{  public int checkLI(int nDamage,Entity entityTarget,Vector<Report> vPhaseReport){  weapon=ae.getEquipment(waa.getWeaponId());  wtype=(WeaponType)weapon.getType();  ArrayList<Coords> coords=Coords.intervening(ae.getPosition(),entityTarget.getPosition());  int refrac=0;  double travel=0;  double range=ae.getPosition().distance(target.getPosition());  double atkLev=ae.relHeight();  double tarLev=entityTarget.relHeight();  double levDif=Math.abs(atkLev - tarLev);  String hexType="LASER inhibiting smoke";  for (  Coords curr : coords) {    if (!game.getBoard().contains(curr)) {      continue;    }    ITerrain smokeHex=game.getBoard().getHex(curr).getTerrain(Terrains.SMOKE);    if (game.getBoard().getHex(curr).containsTerrain(Terrains.SMOKE) && wtype.hasFlag(WeaponType.F_ENERGY) && ((smokeHex.getLevel() == SmokeCloud.SMOKE_LI_LIGHT) || (smokeHex.getLevel() == SmokeCloud.SMOKE_LI_HEAVY))) {      int levit=((game.getBoard().getHex(curr).getLevel()) + 2);      if ((tarLev > atkLev) && (levit >= ((travel * (levDif / range)) + atkLev))) {        refrac++;      } else       if ((atkLev > tarLev) && (levit >= (((range - travel) * (levDif / range)) + tarLev))) {        refrac++;      } else       if ((atkLev == tarLev) && (levit >= 0)) {        refrac++;      }      travel++;    }  }  if (refrac != 0) {    refrac=(refrac * 2);    refrac=Math.min(nDamage,refrac);    nDamage=Math.max(0,(nDamage - refrac));    Report.addNewline(vPhaseReport);    Report fogReport=new Report(6427);    fogReport.subject=entityTarget.getId();    fogReport.add(hexType);    fogReport.add(refrac);    fogReport.indent(2);    fogReport.newlines=0;    vPhaseReport.add(fogReport);  }  return nDamage;}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public static String cleanPathSegment(final String toClean){  final String cleaned=toClean.replaceAll("[.\\\\/:*?\"<>|\\[\\]\\(\\)]","");  if (cleaned.length() == 0)   throw new IllegalStateException("Path segment " + toClean + " has not valid characters and is thus empty");  return cleaned;}  }
class C{  public BipartiteX(Graph G){  isBipartite=true;  color=new boolean[G.V()];  marked=new boolean[G.V()];  edgeTo=new int[G.V()];  for (int v=0; v < G.V() && isBipartite; v++) {    if (!marked[v]) {      bfs(G,v);    }  }  assert check(G);}  }
class C{  public final Header header(){  return this.header;}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  protected void fireEntityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name,(Attributes)null);  }}  }
class C{  protected boolean mustRetrieveResource(){  KMLLink link=this.model.getLink();  if (link == null)   return false;  return this.getColladaRoot() == null || link.getUpdateTime() > this.resourceRetrievalTime.get();}  }
class C{  byte dirTypeBackward(){  lastChar=text.charAt(charIndex - 1);  if (Character.isLowSurrogate(lastChar)) {    int codePoint=Character.codePointBefore(text,charIndex);    charIndex-=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex--;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '>') {      dirType=skipTagBackward();    } else     if (lastChar == ';') {      dirType=skipEntityBackward();    }  }  return dirType;}  }
class C{  private boolean isLeaseHeld(int memberLeaseId){  return memberLeaseId == this.leaseId;}  }
class C{  public static void main(String[] args){  TestGroupOption tester=new TestGroupOption();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  tester.printSummary();  tester=new TestGroupOption();  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  public Equation parseEquation(String equation) throws ParseException {  int index=equation.indexOf("=");  if (index < 1) {    throw new ParseException("Equations must be of the form Var = Exp",0);  }  String variable=equation.substring(0,index).trim();  if (!variable.matches("[^0-9]?[^ \t]*")) {    throw new ParseException("Invalid variable name.",1);  }  return new Equation(variable,parseExpression(equation.substring(index + 1).trim()),equation);}  }
class C{  public static List<Cloudlet> createCloudletListPlanetLab(int brokerId,String inputFolderName) throws FileNotFoundException {  List<Cloudlet> list=new ArrayList<Cloudlet>();  long fileSize=300;  long outputSize=300;  UtilizationModel utilizationModelNull=new UtilizationModelNull();  File inputFolder=new File(inputFolderName);  File[] files=inputFolder.listFiles();  for (int i=0; i < files.length; i++) {    Cloudlet cloudlet=null;    try {      cloudlet=new Cloudlet(i,Constants.CLOUDLET_LENGTH,Constants.CLOUDLET_PES,fileSize,outputSize,new UtilizationModelPlanetLabInMemory(files[i].getAbsolutePath(),Constants.SCHEDULING_INTERVAL),utilizationModelNull,utilizationModelNull);    } catch (    Exception e) {      e.printStackTrace();      System.exit(0);    }    cloudlet.setUserId(brokerId);    cloudlet.setVmId(i);    list.add(cloudlet);  }  return list;}  }
class C{  private boolean processTouchEvent(MotionEvent ev){  boolean processed=true;  final int action=ev.getAction();switch (action) {case MotionEvent.ACTION_MOVE:{      processed=processMove(ev);      break;    }case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:{    processActionUp(ev);    break;  }}invalidate();return processed;}  }
class C{  @Override protected void failed(Throwable e,Description description){  this.trState.isSuccess=false;  this.trState.failureReason=Utils.toString(e);}  }
class C{  @Before public void beforeTest(){  System.setProperty(SystemProperties.TEMP_FILES_PATH,"build/tmp/");}  }
class C{  public void onLoading(ImageLoadHandler handler){  mFlag=mFlag | STATUS_LOADING;  if (null == handler) {    return;  }  if (mFirstImageViewHolder == null) {    handler.onLoading(this,null);  } else {    ImageViewHolder holder=mFirstImageViewHolder;    do {      final CubeImageView imageView=holder.getImageView();      if (null != imageView) {        handler.onLoading(this,imageView);      }    } while ((holder=holder.mNext) != null);  }}  }
class C{  public static BigDecimal ln(BigDecimal x,int scale){  if (x.signum() <= 0) {    throw new IllegalArgumentException("x <= 0");  }  int magnitude=x.toString().length() - x.scale() - 1;  if (magnitude < 3) {    return lnNewton(x,scale);  } else {    BigDecimal root=intRoot(x,magnitude,scale);    BigDecimal lnRoot=lnNewton(root,scale);    return BigDecimal.valueOf(magnitude).multiply(lnRoot).setScale(scale,BigDecimal.ROUND_HALF_EVEN);  }}  }
class C{  public ConjunctiveConstraint(@NonNull final Constraint<Type>[] constraints){  setConstraints(constraints);}  }
class C{  @Pointcut("@annotation(javax.ws.rs.GET) || " + "@annotation(javax.ws.rs.PUT) || " + "@annotation(javax.ws.rs.POST) || "+ "@annotation(javax.ws.rs.DELETE) || "+ "@annotation(javax.ws.rs.HEAD)") public void jaxrs(){}  }
class C{  public UniqueIdentity(DerInputStream in) throws IOException {  DerValue derVal=in.getDerValue();  id=derVal.getUnalignedBitString(true);}  }
class C{  public static void completePlanToHwh(Plan plan,Coord workCoord,ActivityFacility jobLocation){  Activity act=(Activity)PopulationUtils.getFirstActivity(plan);  final double hmDpTime=(6. + 2. * MatsimRandom.getRandom().nextDouble()) * 3600.;  act.setEndTime(hmDpTime);  Coord homeCoord=act.getCoord();  Id homeId=act.getFacilityId();  PopulationUtils.createAndAddLeg(plan,TransportMode.car);  final Coord coord=workCoord;  act=PopulationUtils.createAndAddActivityFromCoord(plan,InternalConstants.ACT_WORK,coord);  act.setFacilityId(jobLocation.getId());  act.setEndTime(hmDpTime + 9. * 3600.);  PopulationUtils.createAndAddLeg(plan,TransportMode.car);  final Coord coord1=homeCoord;  PopulationUtils.createAndAddActivityFromCoord(plan,InternalConstants.ACT_HOME,coord1);  act=(Activity)PopulationUtils.getLastActivity(plan);  act.setFacilityId(homeId);}  }
class C{  public static TrapCodeOperand ArrayBounds(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_ARRAY_BOUNDS);}  }
class C{  public Map<ManagedObjectReference,Map<String,Object>> inContainerByType(ManagedObjectReference container,String morefType,String[] morefProperties,RetrieveOptions retrieveOptions) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg {  List<ObjectContent> oCont=containerViewByType(container,morefType,retrieveOptions,morefProperties).getObjects();  Map<ManagedObjectReference,Map<String,Object>> tgtMoref=new HashMap<ManagedObjectReference,Map<String,Object>>();  if (oCont != null) {    for (    ObjectContent oc : oCont) {      Map<String,Object> propMap=new HashMap<String,Object>();      List<DynamicProperty> dps=oc.getPropSet();      if (dps != null) {        for (        DynamicProperty dp : dps) {          propMap.put(dp.getName(),dp.getVal());        }      }      tgtMoref.put(oc.getObj(),propMap);    }  }  return tgtMoref;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.864 -0500",hash_original_method="D61F570F41294C50B794115B72F287CF",hash_generated_method="0C35021DCF1E2EEAC4ACC137BA6B97DB") public RectF(){}  }
class C{  public static ModelIndex create(ModelEntity modelEntity,String description,String name,List<Field> fields,boolean unique){  if (description == null) {    description="";  }  if (name == null) {    name="";  }  if (fields == null) {    fields=Collections.emptyList();  } else {    fields=Collections.unmodifiableList(fields);  }  return new ModelIndex(modelEntity,description,name,fields,unique);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public void unregisterSubjectName(final String name){  final String key=trimWord(name);  final WordEntry entry=words.get(key);  if (entry != null && entry.isName() && entry.isDynamic()) {    Integer usageCount=subjectRefCount.get(key);    if (usageCount != null) {      subjectRefCount.put(key,--usageCount);      if (usageCount == 0) {        subjectRefCount.remove(key);        unregisterName(name);      }    }  }}  }
class C{  public Builder diskCacheDir(File cacheDir){  if (cacheDir == null)   throw new IllegalArgumentException("cacheDir==null");  if (!cacheDir.isDirectory())   throw new IllegalArgumentException("cache directory must be directory");  this.cacheDir=cacheDir;  return this;}  }
class C{  public void fireProcessZoomChanged(){  fireModelChanged(ModelEvent.PROCESS_ZOOM_CHANGED);}  }
class C{  public boolean isFrameBorderEdge(QuadEdge e){  QuadEdge[] leftTri=new QuadEdge[3];  getTriangleEdges(e,leftTri);  QuadEdge[] rightTri=new QuadEdge[3];  getTriangleEdges(e.sym(),rightTri);  Vertex vLeftTriOther=e.lNext().dest();  if (isFrameVertex(vLeftTriOther))   return true;  Vertex vRightTriOther=e.sym().lNext().dest();  if (isFrameVertex(vRightTriOther))   return true;  return false;}  }
class C{  CacheHealthConfigImpl(){}  }
class C{  public DOI findDoiAssignedToPublishedVersion(){  if (resource != null) {    BigDecimal versionRequested=(getVersion() == null) ? resource.getEmlVersion() : getVersion();    for (    VersionHistory history : resource.getVersionHistory()) {      if (history.getVersion().equalsIgnoreCase(versionRequested.toPlainString())) {        if (history.getStatus() == IdentifierStatus.PUBLIC) {          return history.getDoi();        }      }    }  }  return null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInOutLine[").append(get_ID()).append(",M_Product_ID=").append(getM_Product_ID()).append(",QtyEntered=").append(getQtyEntered()).append(",MovementQty=").append(getMovementQty()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append("]");  return sb.toString();}  }
class C{  public NbtTagList(String name,Collection<? extends NbtTag> tagList){  super(name);  this.tagList=new ArrayList<>(tagList);}  }
class C{  public void resetRuntime(){  MockFramework.enable();  if (RuntimeSettings.mockJVMNonDeterminism) {    Random.reset();    System.resetRuntime();    MockThread.reset();    ThreadCounter.getInstance().resetSingleton();    MockTimeZone.reset();    MockLocale.reset();    JComponent.setDefaultLocale(Locale.getDefault());  }  if (RuntimeSettings.useVFS) {    VirtualFileSystem.getInstance().resetSingleton();    VirtualFileSystem.getInstance().init();  }  if (RuntimeSettings.useVNET) {    VirtualNetwork.getInstance().reset();    VirtualNetwork.getInstance().init();  }  if (RuntimeSettings.useJEE) {    TestDataJavaEE.getInstance().reset();    EvoNamingContext.getInstance().reset();    if (DBManager.getInstance().isWasAccessed()) {      DBManager.getInstance().initDB();    }  }  LoopCounter.getInstance().reset();}  }
class C{  protected void sequence_IntersectionTypeExpression_IntersectionTypeExpressionOLD_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void assumeNotNull(Object object,final String assumptionMessage,Object... params){  final boolean cond=object != null;  assume(cond,assumptionMessage,params);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static Byte[] nullToEmpty(Byte[] array){  if (array == null || array.length == 0) {    return EMPTY_BYTE_OBJECT_ARRAY;  }  return array;}  }
class C{  public static MoveCommand[] values(int f,GameOptions opts,boolean forwardIni){  boolean manualShutdown=false, selfDestruct=false;  if (opts != null) {    manualShutdown=opts.booleanOption("manual_shutdown");    selfDestruct=opts.booleanOption("tacops_self_destruct");  }  ArrayList<MoveCommand> flaggedCmds=new ArrayList<MoveCommand>();  for (  MoveCommand cmd : MoveCommand.values()) {    if ((cmd == MOVE_SHUTDOWN || cmd == MOVE_STARTUP) && !manualShutdown) {      continue;    }    if (cmd == MOVE_SELF_DESTRUCT && !selfDestruct) {      continue;    }    if (cmd == MOVE_FORWARD_INI && !forwardIni) {      continue;    }    if ((cmd.flag & f) == f) {      flaggedCmds.add(cmd);    }  }  return flaggedCmds.toArray(new MoveCommand[0]);}  }
class C{  public boolean isReviewEnabled(){  return reviewEnabled;}  }
class C{  public Transparency(String value){  super(value);}  }
class C{  public void clearCommandLine(){  String text="";  textArea=getText();  int pos1=textArea.lastIndexOf(GlobalValues.groovyLabPromptString) + 2;  setText(textArea.substring(0,pos1) + text);  setCaretPosition(getText().length());}  }
class C{  static void restoreNonvolatilesAfterSysCall(Instruction call,IR ir){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  StackManager sm=(StackManager)ir.stackManager;  int location=sm.getOffsetForSysCall();  for (Enumeration<Register> e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); ) {    Register r=e.nextElement();    Operand M=new StackLocationOperand(true,-location,(byte)WORDSIZE);    call.insertAfter(MIR_Move.create(IA32_MOV,new RegisterOperand(r,wordType),M));    location+=WORDSIZE;  }  Operand M=new StackLocationOperand(true,-location,(byte)WORDSIZE);  call.insertAfter(MIR_Move.create(IA32_MOV,ir.regpool.makeTROp(),M));}  }
class C{  public static MatsimStuff loadNetworkAndGetStuff(String networkFilename){  Config config=new Config();  config.addCoreModules();  Scenario scenario=ScenarioUtils.createScenario(config);  new MatsimNetworkReader(scenario.getNetwork()).readFile(networkFilename);  return new MatsimStuff(config,scenario);}  }
class C{  static <T>Seq<T> limitWhile(final Stream<T> stream,final Predicate<? super T> predicate){  return limitUntil(stream,predicate.negate());}  }
class C{  public void seekToEnd() throws IOException {  parkCursorAtEnd();}  }
class C{  public DataTable(DataSource source){  this(source.getColumnTypes());  for (int rowIndex=0; rowIndex < source.getRowCount(); rowIndex++) {    add(source.getRecord(rowIndex));  }}  }
class C{  public boolean hasStatus(){  return hasExtension(GwoStatus.class);}  }
class C{  public void clear(){  cache.clear();  httpCacheDao.deleteAllHttpResponse();}  }
class C{  public static void writeTransitLines2Shape(String fileName,TransitSchedule schedule,Collection<Id> lines2write,Map<Id,SortedMap<String,Object>> attributes){  if (!(attributes == null) && (attributes.size() > 0)) {    for (    SortedMap<String,Object> m : attributes.values()) {      initLineFeatureType("transitLines",m);      break;    }  } else {    initLineFeatureType("transitLines",null);  }  write(createRouteFeatures(schedule,lines2write,attributes),fileName);}  }
class C{  public boolean isPreposition(){  return typeString.startsWith(PREPOSITION);}  }
class C{  public MqttConfig(String serverURL,String clientId){  options.setServerURIs(new String[]{serverURL});  this.clientId=clientId;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/volumes/ingest-exported") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskList ingestExportedVolumes(VolumeExportIngestParam exportIngestParam) throws InternalException {  TaskList taskList=new TaskList();  Map<String,TaskResourceRep> taskMap=new HashMap<String,TaskResourceRep>();  BaseIngestionRequestContext requestContext=null;  try {    if (exportIngestParam.getUnManagedVolumes().size() > getMaxBulkSize()) {      throw APIException.badRequests.exceedingLimit("unmanaged volumes",getMaxBulkSize());    }    Project project=_permissionsHelper.getObjectById(exportIngestParam.getProject(),Project.class);    ArgValidator.checkEntity(project,exportIngestParam.getProject(),false);    VirtualArray varray=VolumeIngestionUtil.getVirtualArrayForVolumeCreateRequest(project,exportIngestParam.getVarray(),_permissionsHelper,_dbClient);    VirtualPool vpool=VolumeIngestionUtil.getVirtualPoolForVolumeCreateRequest(project,exportIngestParam.getVpool(),_permissionsHelper,_dbClient);    if (null != vpool.getVirtualArrays() && !vpool.getVirtualArrays().isEmpty() && !vpool.getVirtualArrays().contains(exportIngestParam.getVarray().toString())) {      throw APIException.internalServerErrors.virtualPoolNotMatchingVArray(exportIngestParam.getVarray());    }    long unManagedVolumesCapacity=VolumeIngestionUtil.getTotalUnManagedVolumeCapacity(_dbClient,exportIngestParam.getUnManagedVolumes());    _logger.info("UnManagedVolume provisioning quota validation successful");    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());    CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,unManagedVolumesCapacity,"volume");    VolumeIngestionUtil.checkIngestionRequestValidForUnManagedVolumes(exportIngestParam.getUnManagedVolumes(),vpool,_dbClient);    requestContext=new BaseIngestionRequestContext(_dbClient,exportIngestParam.getUnManagedVolumes(),vpool,varray,project,tenant,exportIngestParam.getVplexIngestionMethod());    while (requestContext.hasNext()) {      UnManagedVolume unManagedVolume=requestContext.next();      if (null == unManagedVolume) {        _logger.warn("No Unmanaged Volume with URI {} found in database. Continuing...",requestContext.getCurrentUnManagedVolumeUri());        continue;      }      String taskId=UUID.randomUUID().toString();      Operation operation=_dbClient.createTaskOpStatus(UnManagedVolume.class,requestContext.getCurrentUnManagedVolumeUri(),taskId,ResourceOperationTypeEnum.INGEST_EXPORTED_BLOCK_OBJECTS);      TaskResourceRep task=toTask(unManagedVolume,taskId,operation);      taskMap.put(unManagedVolume.getId().toString(),task);    }    taskList.getTaskList().addAll(taskMap.values());    URI exportGroupResourceUri=null;    String resourceType=ExportGroupType.Host.name();    String computeResourcelabel=null;    if (null != exportIngestParam.getCluster()) {      resourceType=ExportGroupType.Cluster.name();      Cluster cluster=_dbClient.queryObject(Cluster.class,exportIngestParam.getCluster());      exportGroupResourceUri=cluster.getId();      computeResourcelabel=cluster.getLabel();      requestContext.setCluster(exportIngestParam.getCluster());    } else {      Host host=_dbClient.queryObject(Host.class,exportIngestParam.getHost());      exportGroupResourceUri=host.getId();      computeResourcelabel=host.getHostName();      requestContext.setHost(exportIngestParam.getHost());    }    ExportGroup exportGroup=VolumeIngestionUtil.verifyExportGroupExists(requestContext,requestContext.getProject().getId(),exportGroupResourceUri,exportIngestParam.getVarray(),resourceType,_dbClient);    if (null == exportGroup) {      _logger.info("Creating Export Group with label {}",computeResourcelabel);      ResourceAndUUIDNameGenerator nameGenerator=new ResourceAndUUIDNameGenerator();      exportGroup=VolumeIngestionUtil.initializeExportGroup(requestContext.getProject(),resourceType,exportIngestParam.getVarray(),computeResourcelabel,_dbClient,nameGenerator,requestContext.getTenant());      requestContext.setExportGroupCreated(true);    }    requestContext.setExportGroup(exportGroup);    _logger.info("ExportGroup {} created ",exportGroup.forDisplay());    IngestVolumesExportedSchedulingThread.executeApiTask(_asyncTaskService.getExecutorService(),requestContext,ingestStrategyFactory,this,_dbClient,taskMap,taskList);  } catch (  InternalException e) {    _logger.error("InternalException occurred due to: {}",e);    throw e;  }catch (  Exception e) {    _logger.error("Unexpected exception occurred due to: {}",e);    throw APIException.internalServerErrors.genericApisvcError(ExceptionUtils.getExceptionMessage(e),e);  }  return taskList;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  private static ClassLoader createSystemClassLoader(){  String classPath=System.getProperty("java.class.path",".");  return new PathClassLoader(classPath,BootClassLoader.getInstance(),false);}  }
class C{  public TreeNode deserialize(String data){  if (data == null || data.length() == 0) {    return null;  }  TreeNode root=new TreeNode(0);  root.val=Integer.parseInt(data.substring(0,data.indexOf(",")));  data=data.substring(data.indexOf(",") + 1);  Queue<TreeNode> queue=new LinkedList<TreeNode>();  queue.offer(root);  int size=0;  while (!queue.isEmpty()) {    size=queue.size();    for (int i=0; i < size; i++) {      TreeNode node=queue.poll();      String temp=data.substring(0,data.indexOf(","));      if (!temp.equals("#")) {        node.left=new TreeNode(Integer.parseInt(temp));        queue.offer(node.left);      }      data=data.substring(data.indexOf(",") + 1);      temp=data.substring(0,data.indexOf(","));      if (!temp.equals("#")) {        node.right=new TreeNode(Integer.parseInt(temp));        queue.offer(node.right);      }      data=data.substring(data.indexOf(",") + 1);    }  }  return root;}  }
class C{  public static void main(String[] args){  runCLIApplication(EvaluatePrecomputedOutlierScores.class,args);}  }
class C{  @SuppressWarnings("unchecked") public ReplEvent requestReplEvent(long seqNo) throws ReplicatorException, IOException {  ReplEvent ret=null;  if (!buffer.isEmpty()) {    ret=buffer.remove(0);  } else {    if (prefetchIndex == 0 && allPreviousFragmentsDone) {      writeMessage(new ProtocolReplEventRequest(seqNo,prefetchRange));    }    ProtocolMessage msg=null;    for (; ; ) {      msg=readMessage();      if (msg instanceof ProtocolHeartbeat) {        if (logger.isDebugEnabled())         logger.debug("Received protocol heartbeat");      } else {        break;      }    }    if (msg.getPayload() instanceof ArrayList<?>) {      buffer=(ArrayList<ReplEvent>)msg.getPayload();      if (!buffer.isEmpty())       ret=buffer.remove(0); else       logger.warn("Received an empty buffer");    } else     if (msg instanceof ProtocolNOK && msg.getPayload() instanceof String) {      String message=(String)msg.getPayload();      throw new THLException(message);    } else     if (!(msg instanceof ProtocolReplEvent)) {      throw new THLException("Protocol error; unexpected protocol type: " + msg.getClass().getName());    } else     ret=((ProtocolReplEvent)msg).getReplEvent();  }  if (ret instanceof ReplDBMSEvent) {    if (((ReplDBMSEvent)ret).getLastFrag()) {      allPreviousFragmentsDone=true;      if (ret instanceof ReplDBMSFilteredEvent) {        ReplDBMSFilteredEvent event=(ReplDBMSFilteredEvent)ret;        if ((1 + prefetchIndex + event.getSeqnoEnd() - event.getSeqno()) > prefetchRange)         prefetchIndex=0; else         prefetchIndex=(1 + prefetchIndex + event.getSeqnoEnd() - event.getSeqno()) % prefetchRange;      } else       prefetchIndex=(prefetchIndex + 1) % prefetchRange;    } else {      allPreviousFragmentsDone=false;    }  } else {    allPreviousFragmentsDone=true;    prefetchIndex=(prefetchIndex + 1) % prefetchRange;  }  return ret;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  public Thread(java.lang.String name){}  }
class C{  public DocViewerComponent(){  super("");}  }
class C{  public static String buildSelectorFromElementAndAttribute(String elementName,String attributeName,boolean notEmptyAttribute){  StringBuilder selector=new StringBuilder();  selector.append(elementName);  if (attributeName != null && !attributeName.isEmpty()) {    selector.append(OPEN_BRACKET);    selector.append(attributeName);    selector.append(CLOSE_BRACKET);    if (notEmptyAttribute) {      selector.append(NOT_PREFIX);      selector.append(OPEN_BRACKET);      selector.append(attributeName);      selector.append(NOT_EMPTY_REGEXP);      selector.append(CLOSE_BRACKET);      selector.append(CLOSE_PARENTHESE);    }  }  return selector.toString();}  }
class C{  public void downloadAllAttachments(String directory) throws IOException, ServiceException {  URL contentFeedUrl=new URL(getContentFeedUrl() + "?kind=attachment");  ContentFeed contentFeed=service.getFeed(contentFeedUrl,ContentFeed.class);  for (  AttachmentEntry entry : contentFeed.getEntries(AttachmentEntry.class)) {    downloadAttachment(entry,directory);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode02.class,args);}  }
class C{  public static Date stringToDate(String strdate,@SuppressWarnings("SameParameterValue") String format){  Date date=null;  SimpleDateFormat formatter=new SimpleDateFormat(format);  try {    date=formatter.parse(strdate);  } catch (  ParseException e) {    e.printStackTrace();  }  return date;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean groupFolders=evalBool(stack.pop());  boolean includeFolders=evalBool(stack.pop());  boolean includeFiles=evalBool(stack.pop());  Object[] rawFiles=null;  String prefix=getString(stack);  Object mData=stack.pop();  int mediaMask=0;  boolean validMask=false;  if (mData instanceof Object[])   rawFiles=(Object[])mData; else   if (mData instanceof java.util.Collection)   rawFiles=((java.util.Collection)mData).toArray(); else   if (mData != null)   mediaMask=DBObject.getMediaMaskFromString(mData.toString()); else {    return groupFolders ? (Object)new java.util.LinkedHashMap() : (Object)new java.util.Vector();  }  java.util.Vector rv=new java.util.Vector(500);  java.util.Map groupy=null;  if (!includeFiles && !includeFolders)   return rv;  if (groupFolders) {    groupy=new java.util.LinkedHashMap();    groupy.put(null,rv);  }  if (rawFiles == null)   rawFiles=Wizard.getInstance().getRawAccess(Wizard.MEDIAFILE_CODE,(byte)0);  int prefixLength=prefix.length();  for (int i=0; i < rawFiles.length; i++) {    MediaFile mf=(MediaFile)rawFiles[i];    if (mf == null || mf.isTV() || !mf.isArchiveFile() || (mediaMask != 0 && !mf.hasMediaMaskAny(mediaMask)))     continue;    String name=mf.getName();    if (name.startsWith(prefix)) {      if (!groupFolders && includeFiles && includeFolders)       rv.add(mf.getFile(0)); else {        boolean isFolder=false;        int nextIdx=name.indexOf('/',prefixLength);        isFolder=(nextIdx != -1) && nextIdx < name.length() - 1;        if (isFolder && mf.isDVD()) {          if (name.regionMatches(true,nextIdx + 1,Seeker.DVD_VOLUME_SECRET,0,Seeker.DVD_VOLUME_SECRET.length()))           isFolder=false;        } else         if (isFolder && mf.isBluRay()) {          if (name.regionMatches(true,nextIdx + 1,Seeker.BLURAY_VOLUME_SECRET,0,Seeker.BLURAY_VOLUME_SECRET.length()))           isFolder=false;        }        if ((includeFolders && isFolder) || (includeFiles && !isFolder)) {          if (groupFolders) {            if (isFolder) {              String subPath=name.substring(prefixLength,nextIdx);              java.util.Vector currList=(java.util.Vector)groupy.get(subPath);              if (currList == null)               groupy.put(subPath,currList=new java.util.Vector());              currList.add(mf.getFile(0));            } else             rv.add(mf.getFile(0));          } else           rv.add(mf.getFile(0));        }      }    }  }  return groupFolders ? (Object)groupy : (Object)rv;}  }
class C{  void resourceMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.resource");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public CheckBoxListItem(Object o){  this(o,false);}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.519 -0500",hash_original_method="1AE089536D0C6059F1731DCA673BC867",hash_generated_method="F96CE15EA84327F92F6D10BA45D9B4F0") @Deprecated public Intent putExtra(String name,IBinder value){  mExtras.put(name,value);  return this;}  }
class C{  public TransferFinder(TransportNetwork network){  this.transitLayer=network.transitLayer;  this.streetLayer=network.streetLayer;}  }
class C{  @SuppressWarnings("unchecked") public void mousePressed(MouseEvent e){  if (checkModifiers(e)) {    final VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    final Point2D p=e.getPoint();    GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();    if (pickSupport != null) {      final V vertex=pickSupport.getVertex(vv.getModel().getGraphLayout(),p.getX(),p.getY());      if (vertex != null) {        this.createMode=Creating.EDGE;        Graph<V,E> graph=vv.getModel().getGraphLayout().getGraph();        EdgeType edgeType=graph.getDefaultEdgeType();        if ((e.getModifiers() & MouseEvent.SHIFT_MASK) != 0 && graph instanceof UndirectedGraph == false) {          edgeType=EdgeType.DIRECTED;        }        edgeSupport.startEdgeCreate(vv,vertex,e.getPoint(),edgeType);      } else {        this.createMode=Creating.VERTEX;        vertexSupport.startVertexCreate(vv,e.getPoint());      }    }  }}  }
class C{  public IconGroup(String name,String path){  this(name,path,null);}  }
class C{  public void fireVisibleDataPropertyChange(){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public static void putUnsignedLong(ByteBuffer bb,BigInteger v){  bb.putLong(v.longValue());}  }
class C{  public final boolean equals(float x,float y){  return this.x == x && this.y == y;}  }
class C{  public void handle(ErrorEvent event){  for (  ExceptionHandler handler : handlers) {    if (handler.handle(event,app))     return;  }  WebWindowManager wm=app.getWindowManager();  if (wm != null) {    for (    GenericExceptionHandler handler : genericHandlers) {      if (handler.handle(event.getThrowable(),wm))       return;    }  }  defaultHandler.handle(event,app);}  }
class C{  public boolean handleKeyCode(int keyCode,int keyMod){  TerminalEmulator term=mTermSession.getEmulator();  String code=KeyHandler.getCode(keyCode,keyMod,term.isCursorKeysApplicationMode(),term.isKeypadApplicationMode());  if (code == null)   return false;  mTermSession.write(code);  return true;}  }
class C{  public void start(){  if (monitorThread != null) {    if (!monitorThread.isAlive()) {      startMonitorThread();    } else {      LOG.error("The monitor thread is already running");    }  } else {    startMonitorThread();  }}  }
class C{  public boolean canClose(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canClose(constraints);}  }
class C{  private void addUpperPlotData(List<ThreadInformationData> threadData){  for (  ThreadInformationData data : threadData) {    float liveThreadAverage=((float)data.getTotalThreadCount()) / data.getCount();    float peakThreadAverage=((float)data.getTotalPeakThreadCount()) / data.getCount();    liveThreads.add(data.getTimeStamp().getTime(),liveThreadAverage,data.getMinThreadCount(),data.getMaxThreadCount(),false);    peakThreads.add(data.getTimeStamp().getTime(),peakThreadAverage,data.getMinPeakThreadCount(),data.getMaxPeakThreadCount(),false);  }  liveThreads.fireSeriesChanged();  peakThreads.fireSeriesChanged();}  }
class C{  protected void installDefaults(){  super.installDefaults();  tabAreaInsets=new Insets(tabAreaInsets.top + 4,tabAreaInsets.left,tabAreaInsets.bottom,tabAreaInsets.right);}  }
class C{  public boolean canSetLong(){  return canSet(long.class);}  }
class C{  public final BooleanProperty floatingProperty(){  return floatingProperty;}  }
class C{  public void aboutToWait(){}  }
class C{  public String toString(){  return factor + ":" + lag;}  }
class C{  public static void drawPaintedShape(Graphics2D graphics,Shape shape,Paint paint,Rectangle2D paintBounds,Stroke stroke){  if (shape == null) {    return;  }  if (stroke == null) {    stroke=graphics.getStroke();  }  shape=stroke.createStrokedShape(shape);  fillPaintedShape(graphics,shape,paint,paintBounds);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testSequenceSequenceQuery() throws Throwable {  ServerStateMachineContext context=mock(ServerStateMachineContext.class);  ServerSessionContext session=new ServerSessionContext(10,UUID.randomUUID(),mock(Log.class),context,1000);  AtomicBoolean complete=new AtomicBoolean();  session.registerSequenceQuery(10,null);  assertFalse(complete.get());  session.setCommandSequence(9);  assertFalse(complete.get());  session.setCommandSequence(10);  assertTrue(complete.get());}  }
class C{  public void log(Throwable exception){  this.bot.log(this,exception);}  }
class C{  private HikariPoolMXBean initPoolMbeans(){  MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();  ObjectName poolName=null;  try {    poolName=new ObjectName("com.zaxxer.hikari:type=Pool (" + "db-pool-" + connConfig.getConnId() + "-"+ connConfig.getDbLogin()+ ")");  } catch (  MalformedObjectNameException e) {    log.error("Unable to setup mBean monitoring for pool.",e);  }  return JMX.newMBeanProxy(mBeanServer,poolName,HikariPoolMXBean.class);}  }
class C{  public BrokerShareResultEvaluator(Document xml,String currency){  super(xml);  setCurrency(currency);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  @Override public void write(int b){  int newcount=count + 1;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  buf[count]=(byte)b;  count=newcount;}  }
class C{  private void doFinish(IFile... files){  final List<IFile> list=new ArrayList<IFile>();  for (  IFile f : files)   list.add(f);  doFinish((ArrayList<IFile>)list);}  }
class C{  public TreeLayout(String group){  super(group);}  }
class C{  public VersionException(){  super();}  }
class C{  public double measureSelectionTime(){  return m_selectionTime;}  }
class C{  public static int[] oidStrToInts(String oid) throws IOException {  int length=oid.length();  if (oid.charAt(length - 1) == '.') {    throw new IOException("Bad OID: " + oid);  }  int[] result=new int[length / 2 + 1];  int number=0;  for (int i=0; i < length; i++) {    int value=0;    int pos=i;    for (; i < length; i++) {      char ch=oid.charAt(i);      if ((ch < '0') || (ch > '9')) {        break;      }      value=10 * value + (ch - '0');    }    if (i == pos) {      throw new IOException("Bad OID: " + oid);    }    result[number++]=value;    if (i == length) {      break;    }    char ch=oid.charAt(i);    if (ch != '.') {      throw new IOException("Bad OID: " + oid);    }  }  if (number < 2) {    throw new IOException("OID should consist of no less than 2 components: " + oid);  }  return Arrays.copyOfRange(result,0,number);}  }
class C{  public static int objectStartOffset(RVMClass klass){  return -OBJECT_REF_OFFSET;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.333 -0500",hash_original_method="FF93685A731F041589830914387F684E",hash_generated_method="DAE8DAF97A43F3074EF7328285694A01") @Override public Uri insert(Uri uri,ContentValues values){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int length=uri.getPathSegments().size();  if (length < 1) {    throw new IllegalArgumentException("Unknown Uri");  }  long rowID=-1;  String base=uri.getPathSegments().get(0);  Uri newUri=null;  if (base.equals(sSuggestions)) {    if (length == 1) {      rowID=db.insert(sSuggestions,NULL_COLUMN,values);      if (rowID > 0) {        newUri=Uri.withAppendedPath(mSuggestionsUri,String.valueOf(rowID));      }    }  }  if (rowID < 0) {    throw new IllegalArgumentException("Unknown Uri");  }  getContext().getContentResolver().notifyChange(newUri,null);  return newUri;}  }
class C{  private Protein sampleProtein(){  Protein p=new Protein.Builder("MPTIKQLIRNARQPIRNVTKSPALRGCPQRRGTCTRVYTITPKKPNSALRKVARVRLTSG\n" + "FEITAYIPGIGHNLQEHSVVLVRGGRVKDLPGVRYHIVRGTLDAVGVKDRQQGRSKYGVK\n" + "KPK").crossReference(new ProteinXref("UniProt","A0A314","RR12_COFAR","30S ribosomal protein S12, chloroplastic")).build();  SignatureLibraryRelease release=new SignatureLibraryRelease(SignatureLibrary.GENE3D,"3.0");  Set<Hmmer3Match.Hmmer3Location> l1=new HashSet<Hmmer3Match.Hmmer3Location>();  l1.add(new Hmmer3Match.Hmmer3Location(1,123,-8.9,0.28,63,82,114,73,94));  p.addMatch(new Hmmer3Match(new Signature.Builder("G3DSA:2.40.50.140").name("Nucleic acid-binding proteins").signatureLibraryRelease(release).entry(new Entry.Builder("IPR012340").description("Nucleic acid-binding, OB-fold").type(EntryType.DOMAIN).build()).build(),-8.9,0.28,l1));  Entry entry=new Entry.Builder("IPR016027").description("Nucleic acid-binding, OB-fold-like").type(EntryType.DOMAIN).build();  Set<Hmmer3Match.Hmmer3Location> l2=new HashSet<Hmmer3Match.Hmmer3Location>();  l2.add(new Hmmer3Match.Hmmer3Location(2,123,-8.9,0.28,63,82,114,73,94));  p.addMatch(new Hmmer3Match(new Signature.Builder("SSF50249").name("Nucleic_acid_OB").signatureLibraryRelease(release).entry(entry).build(),-8.9,0.28,l2));  p.addMatch(new Hmmer3Match(new Signature.Builder("SSF50250").name("Made up name").signatureLibraryRelease(release).entry(entry).build(),-8.9,0.28,l2));  return p;}  }
class C{  public SnackbarBuilder iconMarginEndRes(@DimenRes int iconMarginEndResId){  return iconMarginEnd(context.getResources().getDimensionPixelSize(iconMarginEndResId));}  }
class C{  public GridClientNode node(UUID id) throws GridClientException {  assert id != null;  lock.readLock().lock();  try {    if (lastError != null)     throw new GridClientDisconnectedException("Topology is failed [protocol=" + prot + ", routers="+ routerAddrs+ ']',lastError); else     return nodes.get(id);  }  finally {    lock.readLock().unlock();  }}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public int lastIndexOfFromTo(short element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  short[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  private void reloadButtonInvoked(){  try {    final String reloadUrl=webPageControlOptions.getLink().getURL(workItem);    navigateToURL(reloadUrl);  } catch (  final MacroTargetNotConfiguredException ex) {    displayMacroTargetNotConfiguredError(ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.499 -0400",hash_original_method="3A8CFBD8D9978421723DC262FBD1326A",hash_generated_method="1B349E16874A1A96863372225DF59D65") public ExtensionFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public boolean isEmpty(){  return queue.isEmpty();}  }
class C{  public int hashCode(){  return this.waveAudioEssenceDescriptorBO.hashCode();}  }
class C{  public static IMethodBinding findOverriddenMethodInType(ITypeBinding type,IMethodBinding method){  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (isSubsignature(method,methods[i]))     return methods[i];  }  return null;}  }
class C{  protected List<Operation> optimiseCurrentOperation(final Operation<?,?> previousOp,final Operation<?,?> currentOp,final Operation<?,?> nextOp){  return Collections.singletonList((Operation)currentOp);}  }
class C{  public void paint(Graphics2D g){}  }
class C{  public blink addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public Address __and__(final Object rhs){  return new Address(m_value.and(getBigInteger(rhs)));}  }
class C{  protected void processWindowEvent(WindowEvent e){  if (e.getID() == WindowEvent.WINDOW_CLOSING) {    mainPanel.doWindowClose();  } else   if (e.getID() == WindowEvent.WINDOW_OPENED) {    mainPanel.doWindowOpen();  }}  }
class C{  public void key(String cpKey){  assert cpKey != null;  this.cpKey=cpKey;}  }
class C{  protected void fail(String message){  set.fail(this,message);}  }
class C{  private Query makeXDL(boolean crossedDateLine,Query query){  if (!ctx.isGeo()) {    assert !crossedDateLine;    return query;  }  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.add(this.makeXDL(crossedDateLine),BooleanClause.Occur.MUST);  bq.add(query,BooleanClause.Occur.MUST);  return bq.build();}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  protected StructuredTextImpl(){  super();}  }
class C{  @Override public void start(){  if (session == null) {    status=NEED_UNWRAP;    return;  }  if (clientHello != null && this.status != FINISHED) {    return;  }  sendHelloRequest();  status=NEED_UNWRAP;}  }
class C{  @OnEditorAction(R.id.ring_password) @SuppressWarnings("unused") public boolean keyPressedOnRingPasswordField(TextView v,int actionId,KeyEvent event){  if (actionId == EditorInfo.IME_ACTION_NEXT) {    return checkPassword(v,null);  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (true: ");  result.append(true_);  result.append(')');  return result.toString();}  }
class C{  public void clearWarnings() throws SQLException {}  }
class C{  public Duration withDurationAdded(long durationToAdd,int scalar){  if (durationToAdd == 0 || scalar == 0) {    return this;  }  long add=FieldUtils.safeMultiply(durationToAdd,scalar);  long duration=FieldUtils.safeAdd(getMillis(),add);  return new Duration(duration);}  }
class C{  public int writeUTF8(final CharSequence chars,int off,int len){  if (len > remaining()) {    return writeUTF8Slow(chars,off,len);  }  final Block block=current;  int limit=block.limit;  char ch='\0';  int octets=0;  while (len > 0) {    ch=chars.charAt(off);    if (ch >= UTF8_2_OCTET_MIN_VALUE) {      break;    }    block.data[limit++]=(byte)ch;    octets++;    off++;    len--;  }  block.limit=limit;  if (len > 0) {    if (ch < UTF8_3_OCTET_MIN_VALUE) {      return octets + writeUTF8UpTo2Byte(chars,off,len);    }    if (ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST) {      throw new IllegalArgumentException("Unpaired low surrogate: " + ch);    }    if (ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST) {      return octets + writeUTF8Slow(chars,off,len);    }    return octets + writeUTF8UpTo3Byte(chars,off,len);  }  return octets;}  }
class C{  public LRUMapTileCache(final long maxCacheSize){  super();  this.maxCacheSize=maxCacheSize;  list=new LinkedList<CacheElement>();}  }
class C{  public Node parse(InputStream input) throws IOException, SAXException {  InputSource is=new InputSource(input);  getXMLReader().parse(is);  return parent;}  }
class C{  public Drawer buildForFragment(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  if (mRootView == null) {    throw new RuntimeException("please pass the view which should host the DrawerLayout");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  View originalContentView=mRootView.getChildAt(0);  boolean alreadyInflated=originalContentView.getId() == R.id.materialize_root;  if (!alreadyInflated) {    mRootView.removeView(originalContentView);  } else {    mRootView.removeAllViews();  }  FrameLayout.LayoutParams layoutParamsContentView=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRootView.addView(mDrawerLayout,layoutParamsContentView);  mDrawerLayout.setId(R.id.materialize_root);  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mDrawerLayout.addView(originalContentView,0);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TARGET_COMPUTE_10:    return "CU_TARGET_COMPUTE_10";case CU_TARGET_COMPUTE_11:  return "CU_TARGET_COMPUTE_11";case CU_TARGET_COMPUTE_12:return "CU_TARGET_COMPUTE_12";case CU_TARGET_COMPUTE_13:return "CU_TARGET_COMPUTE_13";case CU_TARGET_COMPUTE_20:return "CU_TARGET_COMPUTE_20";case CU_TARGET_COMPUTE_21:return "CU_TARGET_COMPUTE_21";case CU_TARGET_COMPUTE_30:return "CU_TARGET_COMPUTE_30";case CU_TARGET_COMPUTE_35:return "CU_TARGET_COMPUTE_35";}return "INVALID CUjit_target: " + n;}  }
class C{  public void test_Of_EE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b);  assertEquals("enumSet should have length 2:",2,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("enumSet should contain EnumWithSubclass.b:",enumSet.contains(EnumWithInnerClass.b));  try {    EnumSet.of((EnumWithInnerClass)null,EnumWithInnerClass.a);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of(EnumWithInnerClass.a,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of((EnumWithInnerClass)null,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.a);  assertEquals("Size of enumSet should be 1",1,enumSet.size());  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b);  assertEquals(2,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.b));  try {    EnumSet.of((HugeEnumWithInnerClass)null,HugeEnumWithInnerClass.a);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of(HugeEnumWithInnerClass.a,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of((HugeEnumWithInnerClass)null,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.a);  assertEquals(1,hugeEnumSet.size());}  }
class C{  public static int compare(float lhs,float rhs){  if (lhs < rhs) {    return -1;  }  if (lhs > rhs) {    return +1;  }  int lhsBits=Float.floatToIntBits(lhs);  int rhsBits=Float.floatToIntBits(rhs);  if (lhsBits == rhsBits) {    return 0;  }  if (lhsBits < rhsBits) {    return -1;  } else {    return +1;  }}  }
class C{  @Override public void clear(){  super.clear();  int[] keys=_set;  int[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public javax2.sip.header.Header createHeader(String headerText) throws ParseException {  StringMsgParser smp=new StringMsgParser();  SIPHeader sipHeader=smp.parseSIPHeader(headerText.trim());  if (sipHeader instanceof SIPHeaderList) {    if (((SIPHeaderList)sipHeader).size() > 1) {      throw new ParseException("Only singleton allowed " + headerText,0);    } else     if (((SIPHeaderList)sipHeader).size() == 0) {      try {        return (Header)((SIPHeaderList)sipHeader).getMyClass().newInstance();      } catch (      InstantiationException ex) {        ex.printStackTrace();        return null;      }catch (      IllegalAccessException ex) {        ex.printStackTrace();        return null;      }    } else {      return (Header)((SIPHeaderList)sipHeader).getFirst();    }  } else {    return (Header)sipHeader;  }}  }
class C{  private static void portfolioMenu(FinanceService service,Scanner sc) throws IOException, ServiceException {  printPortfolioMenuHelp();  while (true) {    String requestUrl=baseUrl + PORTFOLIO_FEED_URL_SUFFIX;switch (processPortfolioMenuCommand(sc.nextLine().toLowerCase())) {case QUERY_FEED:      System.out.print("Include returns in query response? (y/n) ");    String includeReturns=sc.nextLine();  if (includeReturns.toLowerCase().equals("y") || includeReturns.toLowerCase().equals("yes")) {    requestUrl+="?returns=true";  } else   if (includeReturns.toLowerCase().equals("n") || includeReturns.toLowerCase().equals("no")) {    requestUrl+="?returns=false";  }System.out.print("Inline positions in feed? (y/n) ");String inlinePositions=sc.nextLine();if (inlinePositions.toLowerCase().equals("y") || inlinePositions.toLowerCase().equals("yes")) {requestUrl+="&positions=true";} else if (inlinePositions.toLowerCase().equals("n") || inlinePositions.toLowerCase().equals("no")) {requestUrl+="&positions=false";}queryPortfolioFeed(service,requestUrl);break;case QUERY_ENTRY:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();requestUrl+="/" + portfolioIdProperty;queryPortfolioEntry(service,requestUrl);break;case CREATE:System.out.println("Enter portfolio name");String portfolioName=sc.nextLine();System.out.println("Enter currency code");String currencyCode=sc.nextLine();PortfolioEntry entry=FinanceUtilities.makePortfolioEntry(portfolioName,currencyCode);insertPortfolioEntry(service,requestUrl,entry);break;case UPDATE:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();requestUrl+="/" + portfolioIdProperty;System.out.println("Enter new portfolio name");portfolioName=sc.nextLine();System.out.println("Enter new currency code");currencyCode=sc.nextLine();entry=FinanceUtilities.makePortfolioEntry(portfolioName,currencyCode);updatePortfolioEntry(service,requestUrl,entry);break;case DELETE:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();requestUrl+="/" + portfolioIdProperty;deletePortfolioEntry(service,requestUrl);break;case BACK:return;case POSITIONS:positionMenu(service,sc);break;case QUIT:System.exit(0);case HELP:printPortfolioMenuHelp();break;default :printPortfolioMenuHelp();}}}  }
class C{  public boolean renameFile(File oldFile,File newFile){synchronized (fileCache) {    if (oldFile.renameTo(newFile)) {      validateFileCache();      return true;    }    return false;  }}  }
class C{  private EventDays(){}  }
class C{  private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime,String filter,Integer queueExpireTime){  registerListener(requestUrl,target,methods,expireTime,filter,queueExpireTime,null);}  }
class C{  public void antFile(Object antFile){  this.antFile=antFile;}  }
class C{  public static byte[] toBytes(final double d){  return Bytes.toBytes(Double.doubleToRawLongBits(d));}  }
class C{  public GameRequestDialog(Activity activity){  super(activity,DEFAULT_REQUEST_CODE);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isOpen() && isClosed())   setIsClosed(false);  if (isFinalClose() && !isClosed())   setIsFinalClose(false);  if (!isWebCanUpdate() && getUpdate_Status_ID() != 0)   setUpdate_Status_ID(0);  if (getTimeoutDays() == 0 && getNext_Status_ID() != 0)   setNext_Status_ID(0);  return true;}  }
class C{  public void secondaryTypesRemoving(File file,boolean cleanIndexCache){  if (VERBOSE) {    StringBuffer buffer=new StringBuffer("JavaModelManager.removeFromSecondaryTypesCache(");    buffer.append(file.getName());    buffer.append(')');    Util.verbose(buffer.toString());  }  if (file != null) {    PerProjectInfo projectInfo=getPerProjectInfo(false);    if (projectInfo != null && projectInfo.secondaryTypes != null) {      if (VERBOSE) {        Util.verbose("-> remove file from cache of project: " + file.getAbsolutePath());      }      secondaryTypesRemoving(projectInfo.secondaryTypes,file);      HashMap indexingCache=(HashMap)projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);      if (!cleanIndexCache) {        if (indexingCache == null) {          projectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES,new HashMap());        }        return;      }      if (indexingCache != null) {        Set keys=indexingCache.keySet();        int filesSize=keys.size(), filesCount=0;        File[] removed=null;        Iterator cachedFiles=keys.iterator();        while (cachedFiles.hasNext()) {          File cachedFile=(File)cachedFiles.next();          if (file.equals(cachedFile)) {            if (removed == null)             removed=new File[filesSize];            filesSize--;            removed[filesCount++]=cachedFile;          }        }        if (removed != null) {          for (int i=0; i < filesCount; i++) {            indexingCache.remove(removed[i]);          }        }      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  private void validateWidth(Rectangle rect){  if (rect != null && rect.width <= 1) {    try {      RTextArea textArea=getTextArea();      textArea.getDocument().getText(getDot(),1,seg);      Font font=textArea.getFont();      FontMetrics fm=textArea.getFontMetrics(font);      rect.width=fm.charWidth(seg.array[seg.offset]);      if (rect.width == 0) {        rect.width=fm.charWidth(' ');      }    } catch (    BadLocationException ble) {      ble.printStackTrace();      rect.width=8;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  Node firstChild;  Node refChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  refChild=titleAttr.getFirstChild();  retval=titleAttr.insertBefore(textNode,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","terdayYes",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terdayYes",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","terday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yes",value);}  }
class C{  public void release(){  if (state == State.RECORDING) {    stop();  } else {    if ((state == State.READY) & (rUncompressed)) {      try {        randomAccessWriter.close();      } catch (      IOException e) {        e.printStackTrace();      }      (new File(filePath)).delete();    }  }  if (rUncompressed) {    if (audioRecorder != null) {      audioRecorder.release();    }  } else {    if (mediaRecorder != null) {      mediaRecorder.release();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final boolean isProjected(){  return projected;}  }
class C{  public static double MCSCE2rawFitness(boolean useTrainingData,GEPIndividual ind,double threshold){  int mi_ContingencyTable[][]=MCSCE2contingencyTable(useTrainingData,ind,threshold);  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numberOfObjects=dv.getDependentVariableValues().length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int numberOfMatches=0;  for (int i=0; i < numberOfClasses; i++)   numberOfMatches+=mi_ContingencyTable[i][i];  double classificationError=((double)(numberOfObjects - numberOfMatches)) / numberOfObjects;  return classificationError;}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public ContrastEffect(float contrast){  if (contrast < 0.1f)   contrast=0.1f;  if (contrast > 2.0f)   contrast=2.0f;  this.contrast=contrast;}  }
class C{  public void addCone(float x,float y,float z,float radius,float length,int segments){  addCone(x,y,z,radius,length,segments,1F);}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  private boolean actionSave(){  log.config("");  if (fName.getText().equals("")) {    throw new WrongValueException(fName,Msg.translate(Env.getCtx(),"FillMandatory"));  }  if (fAddress.getC_Location_ID() == 0) {    throw new WrongValueException(fAddress.getComponent(),Msg.translate(Env.getCtx(),"FillMandatory"));  }  if (m_partner == null) {    int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());    m_partner=MBPartner.getTemplate(Env.getCtx(),AD_Client_ID);    m_partner.setAD_Org_ID(Env.getAD_Org_ID(Env.getCtx()));    boolean isSOTrx=!"N".equals(Env.getContext(Env.getCtx(),m_WindowNo,"IsSOTrx"));    m_partner.setIsCustomer(isSOTrx);    m_partner.setIsVendor(!isSOTrx);  }  String value=fValue.getText();  if (value == null || value.length() == 0) {    value=DB.getDocumentNo(Env.getAD_Client_ID(Env.getCtx()),"C_BPartner",null);    fValue.setText(value);  }  m_partner.setValue(fValue.getText());  m_partner.setName(fName.getText());  m_partner.setName2(fName2.getText());  ListItem listitem=fGreetingBP.getSelectedItem();  KeyNamePair p=listitem != null ? (KeyNamePair)listitem.getValue() : null;  if (p != null && p.getKey() > 0)   m_partner.setC_Greeting_ID(p.getKey()); else   m_partner.setC_Greeting_ID(0);  if (m_partner.save())   log.fine("C_BPartner_ID=" + m_partner.getC_BPartner_ID()); else   FDialog.error(m_WindowNo,this,"BPartnerNotSaved");  if (m_pLocation == null)   m_pLocation=new MBPartnerLocation(m_partner);  m_pLocation.setC_Location_ID(fAddress.getC_Location_ID());  m_pLocation.setPhone(fPhone.getText());  m_pLocation.setPhone2(fPhone2.getText());  m_pLocation.setFax(fFax.getText());  if (m_pLocation.save())   log.fine("C_BPartner_Location_ID=" + m_pLocation.getC_BPartner_Location_ID()); else   FDialog.error(m_WindowNo,this,"BPartnerNotSaved",Msg.translate(Env.getCtx(),"C_BPartner_Location_ID"));  String contact=fContact.getText();  String email=fEMail.getText();  if (m_user == null && (contact.length() > 0 || email.length() > 0))   m_user=new MUser(m_partner);  if (m_user != null) {    if (contact.length() == 0)     contact=fName.getText();    m_user.setName(contact);    m_user.setEMail(email);    m_user.setTitle(fTitle.getText());    listitem=fGreetingC.getSelectedItem();    p=listitem != null ? (KeyNamePair)listitem.getValue() : null;    if (p != null && p.getKey() > 0)     m_user.setC_Greeting_ID(p.getKey()); else     m_user.setC_Greeting_ID(0);    m_user.setPhone(fPhone.getText());    m_user.setPhone2(fPhone2.getText());    m_user.setFax(fFax.getText());    if (m_user.save())     log.fine("AD_User_ID=" + m_user.getAD_User_ID()); else     FDialog.error(m_WindowNo,this,"BPartnerNotSaved",Msg.translate(Env.getCtx(),"AD_User_ID"));  }  return true;}  }
class C{  public void toggle(){  setOn(!on);}  }
class C{  private Class parseClass(final GroovyCodeSource codeSource) throws CompilationFailedException {  return loader.parseClass(codeSource,false);}  }
class C{  public void putIcon(String extension,Icon icon){  icons.put(extension,icon);}  }
