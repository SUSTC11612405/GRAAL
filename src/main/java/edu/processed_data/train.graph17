class C{  public int answerQuestion(FormIndex index,IAnswerData data) throws JavaRosaException {  try {    return mFormEntryController.answerQuestion(index,data,true);  } catch (  Exception e) {    throw new JavaRosaException(e);  }}  }
class C{  public B second(){  return b;}  }
class C{  public boolean hitObject(Object object,DrawInfo2D range){  AffineTransform transform=new AffineTransform();  transform.translate(range.draw.x,range.draw.y);  transform.scale(range.draw.width,range.draw.height);  Shape s=transform.createTransformedShape(shape);  return (s.intersects(range.clip.x,range.clip.y,range.clip.width,range.clip.height));}  }
class C{  public static boolean checkControlAfState(CaptureResult result){  boolean missing=result.get(CaptureResult.CONTROL_AF_STATE) == null;  if (missing) {    Log.e(TAG,"\n!!!! TotalCaptureResult missing CONTROL_AF_STATE. !!!!\n ");  }  return !missing;}  }
class C{  public void testValueOfNegScaleNeg(){  long a=-98374823947823578L;  int scale=-12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="-9.8374823947823578E+28";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public int numberAttributesSelected() throws Exception {  int[] att=selectedAttributes();  return att.length - 1;}  }
class C{  public boolean isRequired(){  return label.isRequired();}  }
class C{  public void message(LocoNetMessage m){  if (handleMessageIplDeviceQuery(m)) {    return;  } else   if (handleMessageIplDeviceReport(m)) {    return;  } else   if (handleMessageIplProgramInitiate(m)) {    return;  } else   if (handleMessageIplProgramAddress(m)) {    return;  } else   if (handleMessageIplProgramWriteData(m)) {    return;  } else   if (handleMessageIplProgramVerifyData(m)) {    return;  } else   if (handleMessageIplProgramTerminate(m)) {    return;  } else   if (handleMessageIplDevicePing(m)) {    return;  } else   if (handleMessageIplDeviceIdentify(m)) {    return;  }  return;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (key: ");  result.append(key);  result.append(')');  return result.toString();}  }
class C{  public ZoomMenuAction(Object target) throws Exception {  super(COMMAND);  setActionCommand(COMMAND);  if (target != null && !(target instanceof JTree)) {    throw new Exception("Unsupported target component: " + target.getClass().getName());  }  this.target=target;}  }
class C{  @Override public boolean isValid(final Object obj){  final ISPO spo=(ISPO)obj;  return add(spo);}  }
class C{  public void sync(MemBufferHolder<NonVolatileMemAllocator> mbuf){  m_nvmasvc.sync(m_nid,getBufferAddress(mbuf),0L,true);}  }
class C{  public void zoomOut(){  Matrix save=mViewPortHandler.zoomOut(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);  calculateOffsets();  postInvalidate();}  }
class C{  private void do3WayMouseClick(){switch (turnoutState()) {case 5:    if (singleSlipRoute) {      setLowerWestToLowerEast();    } else {      setUpperWestToUpperEast();    }  break;case 7:if (singleSlipRoute) {  setLowerWestToUpperEast();} else {  setLowerWestToLowerEast();}break;case 9:if (singleSlipRoute) {setLowerWestToUpperEast();} else {setUpperWestToLowerEast();}break;case 11:if (singleSlipRoute) {setUpperWestToLowerEast();} else {setLowerWestToLowerEast();}break;default :setLowerWestToUpperEast();}}  }
class C{  void writeBytes(long dest,byte[] b,int offset,int len){  assert dest + len <= getPosition() : "dest=" + dest + " pos="+ getPosition()+ " len="+ len;  final long end=dest + len;  int blockIndex=(int)(end >> blockBits);  int downTo=(int)(end & blockMask);  if (downTo == 0) {    blockIndex--;    downTo=blockSize;  }  byte[] block=blocks.get(blockIndex);  while (len > 0) {    if (len <= downTo) {      System.arraycopy(b,offset,block,downTo - len,len);      break;    } else {      len-=downTo;      System.arraycopy(b,offset + len,block,0,downTo);      blockIndex--;      block=blocks.get(blockIndex);      downTo=blockSize;    }  }}  }
class C{  public void enableAllClasses(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isClass()) {      enable(cap);    }  }}  }
class C{  private void storeGeoKey(int keyID,int tiffTag,int valueCount,int valueOrOffset) throws java.io.IOException {  int type=XTIFFField.TIFF_SHORT;  Object value=null;  if (tiffTag > 0) {    XTIFFField values=getField(tiffTag);    if (values != null) {      type=values.getType();      if (type == XTIFFField.TIFF_ASCII) {        String svalue=values.getAsString(0).substring(valueOrOffset,valueOrOffset + valueCount - 1);        value=new String[]{svalue};      } else       if (type == XTIFFField.TIFF_DOUBLE) {        double dvalue=values.getAsDouble(valueOrOffset);        value=new double[]{dvalue};      }    } else {      throw new java.io.IOException("GeoTIFF tag not found");    }  } else {    type=XTIFFField.TIFF_SHORT;    value=new char[]{(char)valueOrOffset};  }  addGeoKey(keyID,type,valueCount,value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected double scaledKernelDensity(RealVector vector){  return this.kernel.density(this.bandwidthToNegativeHalf.operate(vector));}  }
class C{  public static double[][] fill(int m,int n,double c){  double[][] o=new double[m][n];  for (int i=0; i < o.length; i++)   for (int j=0; j < o[i].length; j++)   o[i][j]=c;  return o;}  }
class C{  public final void buildClassifier(Instances instances) throws Exception {  m_nb=new NaiveBayesUpdateable();  m_disc=new Discretize();  m_disc.setInputFormat(instances);  Instances temp=Filter.useFilter(instances,m_disc);  m_nb.buildClassifier(temp);  if (temp.numInstances() >= 5) {    m_errors=crossValidate(m_nb,temp,new Random(1));  }  m_numSubsets=1;}  }
class C{  public static String[] listChildFilenames(File file,FileFilter filter){  if (file == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String[] names=file.list();  if (names == null)   return null;  ArrayList<String> matches=new ArrayList<String>();  for (  String filename : names) {    if (filename == null || filename.length() == 0)     continue;    if (filter != null && !filter.accept(new File(file,filename)))     continue;    matches.add(filename);  }  return matches.toArray(new String[matches.size()]);}  }
class C{  private static void checkFileValidation(File file){  if (file == null)   throw new NullPointerException("File must not be null");  if (!file.exists()) {    throw new IllegalArgumentException("The file: " + file.getPath() + " doesn't exist.");  }  file.canRead();}  }
class C{  public BinaryIn(){  in=new BufferedInputStream(System.in);  fillBuffer();}  }
class C{  public boolean hasInsertionMode(){  return getInsertionMode() != null;}  }
class C{  @Override public String toString(){  return "MemLRUCapacityController with a capacity of " + this.getLimit() + " megabytes and and eviction action "+ this.getEvictionAction();}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  private void showContentAssistPopup(){  final ScrollableJPopupMenu popupMenu=createContentAssistPopup(field,possibleValues,multipleValuesAllowed,cellClass);  popupMenu.show(field,field.getX(),field.getY() + field.getHeight());  popupMenu.requestFocusInWindow();}  }
class C{  public static boolean checkAllValuesForNull(Object[] row){  if (checkNullForDims(row[0]) && checkNullForMeasures(row[2]) && null == row[1]) {    return true;  }  return false;}  }
class C{  private boolean canFastTruncate(Session session,Table table,boolean descendants){  if (!table.getFullTextIndexes().isEmpty()) {    return false;  }  List<Table> tableList=new ArrayList<>();  tableList.add(table.getGroup().getRoot());  while (!tableList.isEmpty()) {    Table aTable=tableList.remove(tableList.size() - 1);    if (aTable != table) {      if (aTable.tableStatus().getRowCount(session) > 0) {        return false;      }    }    if ((aTable != table) || !descendants) {      for (      Join join : aTable.getChildJoins()) {        tableList.add(join.getChild());      }    }  }  if (BasicDDLFunctions.containsBlob(table))   return false;  return true;}  }
class C{  private void checkNotAddingDiscoveredEndpoints(Map<String,Network> networkMap,Network network){  List<String> discoveredEndpoints=new ArrayList<String>();  _log.info("checkNotAddingDiscoveredEndpoints: checking the endpoints are not discovered in another network");  for (  String ep : networkMap.keySet()) {    if (networkMap.get(ep).endpointIsDiscovered(ep) && !network.getId().equals(networkMap.get(ep).getId())) {      discoveredEndpoints.add(ep);    }  }  _log.info("checkNotAddingDiscoveredEndpoints: these endpoints were discovered in another network {}",discoveredEndpoints.toArray());  if (!discoveredEndpoints.isEmpty()) {    throw APIException.badRequests.endpointsCannotBeAdded(discoveredEndpoints.toArray().toString());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Request<Workspace> create(Workspace workspace){  registerWorkspace(workspace);  return new DummyRequest<Workspace>(workspace);}  }
class C{  public static String formatTimeWithMillis(double time){  boolean negative=false;  if (time < 0) {    negative=true;    time*=-1;  }  int hours=(int)time / 3600;  int minutes=(int)(time - (hours * 3600)) / 60;  int seconds=(int)time - (hours * 3600) - (minutes * 60);  double millis=time - (hours * 3600) - (minutes * 60)- seconds;  String hoursString=hours + "";  String minutesString=minutes + "";  String secondsString=seconds + "";  String millisString=new DecimalFormat(".000").format(millis);  millisString=millisString.substring(1);  while (minutesString.length() < 2) {    minutesString="0" + minutesString;  }  while (secondsString.length() < 2) {    secondsString="0" + secondsString;  }  return (negative ? "-" : "") + (hours == 0 ? "" : hoursString + ":") + minutesString+ ":"+ secondsString+ "."+ millisString;}  }
class C{  public JsonArray(){  elements=new ArrayList<JsonElement>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.507 -0500",hash_original_method="78570188BA83CB17A52ACDCDF5E3A80D",hash_generated_method="3F08D34572092F7AB6792C9F52FB440B") protected boolean isReInvite(){  return this.reInviteFlag;}  }
class C{  public BYTE_ARRAY(String mimeType){  super(mimeType,"[B");}  }
class C{  public MetaBuilder start(){  return new MetaBuilder();}  }
class C{  static long calcMultiplicativeInverseLong(long a){  BigInteger oneShift64=BigInteger.valueOf(1).shiftLeft(64);  BigInteger oneShift63=BigInteger.valueOf(1).shiftLeft(63);  return BigInteger.valueOf(a).modPow(oneShift63.subtract(BigInteger.ONE),oneShift64).longValue();}  }
class C{  public static String extractScheme(final String challengeStr) throws MalformedChallengeException {  if (challengeStr == null) {    throw new IllegalArgumentException("Challenge may not be null");  }  final int idx=challengeStr.indexOf(' ');  String s=null;  if (idx == -1) {    s=challengeStr;  } else {    s=challengeStr.substring(0,idx);  }  if (s.equals("")) {    throw new MalformedChallengeException("Invalid challenge: " + challengeStr);  }  return s.toLowerCase();}  }
class C{  private void selectButton(){  m_ParentButton.setSelected(true);  putValue(Action.NAME,"Frozen Proximitry Browsing. Selection changes do not change graph visibility");  putValue(Action.SHORT_DESCRIPTION,"Unfreeze Proximitry Browsing. Selection changes will change graph visibility");  m_ParentButton.setSelectedIcon(new ImageIcon(CMain.class.getResource("data/viewlock_up.jpg")));  m_ParentButton.setRolloverSelectedIcon(new ImageIcon(CMain.class.getResource("data/viewlock_hover.jpg")));  m_ParentButton.setPressedIcon(new ImageIcon(CMain.class.getResource("data/viewnavi_down.jpg")));}  }
class C{  public boolean animateState(State newState){  State prevState=mState;  if (mState != newState) {    mState=newState;    mPropertyAnimator=cancelAnimator(mPropertyAnimator);    mPropertyAnimator=new AnimatorSet();    mPropertyAnimator.playTogether(ObjectAnimator.ofFloat(this,"desaturation",newState.desaturation),ObjectAnimator.ofFloat(this,"brightness",newState.brightness));    mPropertyAnimator.setInterpolator(newState.interpolator);    mPropertyAnimator.setDuration(getDurationForStateChange(prevState,newState));    mPropertyAnimator.setStartDelay(getStartDelayForStateChange(prevState,newState));    mPropertyAnimator.start();    return true;  }  return false;}  }
class C{  static protected void logFine(String name,String s){  if (DEBUG) {    logStdErr("fine",name,s,null);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr())) {    Playlist rv=Wizard.getInstance().addPlaylist(name);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_ADDED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,rv,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});    return rv;  } else   return null;}  }
class C{  protected boolean readMethods(DataInputStream d) throws IOException {  method_info mi;  int i;  methods=new method_info[methods_count];  for (i=0; i < methods_count; i++) {    mi=new method_info();    mi.access_flags=d.readUnsignedShort();    mi.name_index=d.readUnsignedShort();    mi.descriptor_index=d.readUnsignedShort();    mi.attributes_count=d.readUnsignedShort();    CONSTANT_Utf8_info ci;    ci=(CONSTANT_Utf8_info)(constant_pool[mi.name_index]);    if (mi.attributes_count > 0) {      mi.attributes=new attribute_info[mi.attributes_count];      readAttributes(d,mi.attributes_count,mi.attributes);      for (int j=0; j < mi.attributes_count; j++) {        if (mi.attributes[j] instanceof Code_attribute) {          mi.code_attr=(Code_attribute)mi.attributes[j];          break;        }      }    }    methods[i]=mi;  }  return true;}  }
class C{  public WeightedReservoirSampler(){  random=new Random();}  }
class C{  private static void removeStep(MethodNode mth,InstructionRemover remover){  for (  BlockNode block : mth.getBasicBlocks()) {    remover.setBlock(block);    for (    InsnNode insn : block.getInstructions()) {switch (insn.getType()) {case NOP:case GOTO:case NEW_INSTANCE:        remover.add(insn);      break;default :    break;}}remover.perform();}}  }
class C{  @Override public boolean readCredentials(final URI targetUri,final AtomicReference<Credential> credentials){  validateTargetUri(targetUri);  final String targetName=this.getTargetName(targetUri);  Trace.writeLine("SecretStore::readCredentials");  if (!_credentialCache.readCredentials(targetUri,credentials)) {    credentials.set(this.readCredentials(targetName));  }  return credentials.get() != null;}  }
class C{  private void handleFile(File file,UriDeploymentScannerContext ctx){  boolean changed;  Long lastMod;  if (file.isDirectory()) {    GridTuple<Long> dirLastModified=F.t(file.lastModified());    changed=checkGarDirectoryChanged(file,dirLastModified);    lastMod=dirLastModified.get();  } else {    lastMod=tstampCache.get(file);    changed=lastMod == null || lastMod != file.lastModified();    lastMod=file.lastModified();  }  if (changed) {    tstampCache.put(file,lastMod);    if (ctx.getLogger().isDebugEnabled())     ctx.getLogger().debug("Discovered deployment file or directory: " + file);    String fileName=file.getName();    try {      File cpFile=ctx.createTempFile(fileName,ctx.getDeployDirectory());      cpFile.deleteOnExit();      if (file.isDirectory()) {        cpFile=new File(cpFile.getParent(),"dir_" + cpFile.getName());        cpFile.deleteOnExit();      }      U.copy(file,cpFile,true);      String fileUri=getFileUri(file.getAbsolutePath());      assert lastMod != null;      ctx.getListener().onNewOrUpdatedFile(cpFile,fileUri,lastMod);    } catch (    IOException e) {      U.error(ctx.getLogger(),"Error saving file: " + fileName,e);    }  }}  }
class C{  public void testOrder() throws Exception {  StorageAgent agent=this.configureStorageService("testOrder",3);  assertEquals("Initial backups should be 0",0,agent.list().length);  int size=1;  for (int i=0; i < 3; i++) {    size=size * 10;    BackupSpecification backupSpecStore=createBackup("testOrder",size);    URI uri=agent.store(backupSpecStore);    StorageSpecification storeSpec=agent.getSpecification(uri);    assertEquals("Returned specification matches file size",size,storeSpec.getFileLength(0));    StorageSpecification[] availableSpecs=agent.list();    assertEquals("URI list size must match number of backups",i + 1,availableSpecs.length);    int size2=1;    for (int j=0; j <= i; j++) {      size2=size2 * 10;      StorageSpecification spec=availableSpecs[j];      assertEquals("URI file size must match order i=" + i + " j="+ j,size2,spec.getFileLength(0));    }  }  agent.release();}  }
class C{  public int compareTo(UniqueString uniqueString){  return this.tok - uniqueString.tok;}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  return unsupportedCritExt;}  }
class C{  protected void mergeIntoWebXml() throws IOException {  File webappBase=new File(uriRoot);  File webXml=new File(webappBase,"WEB-INF/web.xml");  File webXml2=new File(webappBase,"WEB-INF/web2.xml");  String insertStartMarker=Localizer.getMessage("jspc.webinc.insertStart");  String insertEndMarker=Localizer.getMessage("jspc.webinc.insertEnd");  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(webXml),"UTF-8"));  BufferedReader fragmentReader=new BufferedReader(new InputStreamReader(new FileInputStream(webxmlFile),"UTF-8"));  PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(webXml2),"UTF-8"));  int pos=-1;  String line=null;  while (true) {    line=reader.readLine();    if (line == null) {      break;    }    if (line.indexOf(insertStartMarker) >= 0) {      while (true) {        line=reader.readLine();        if (line == null) {          return;        }        if (line.indexOf(insertEndMarker) >= 0) {          line=reader.readLine();          if (line == null) {            return;          }          break;        }      }    }    for (int i=0; i < insertBefore.length; i++) {      pos=line.indexOf(insertBefore[i]);      if (pos >= 0)       break;    }    if (pos >= 0) {      writer.println(line.substring(0,pos));      break;    } else {      writer.println(line);    }  }  writer.println(insertStartMarker);  while (true) {    String line2=fragmentReader.readLine();    if (line2 == null) {      writer.println();      break;    }    writer.println(line2);  }  writer.println(insertEndMarker);  writer.println();  for (int i=0; i < pos; i++) {    writer.print(" ");  }  if (line != null) {    writer.println(line.substring(pos));  }  while (true) {    line=reader.readLine();    if (line == null) {      break;    }    writer.println(line);  }  writer.close();  reader.close();  fragmentReader.close();  FileInputStream fis=new FileInputStream(webXml2);  FileOutputStream fos=new FileOutputStream(webXml);  byte buf[]=new byte[512];  try {    while (true) {      int n=fis.read(buf);      if (n < 0) {        break;      }      fos.write(buf,0,n);    }  }  finally {    if (fis != null) {      fis.close();    }    if (fos != null) {      fos.close();    }  }  webXml2.delete();  (new File(webxmlFile)).delete();}  }
class C{  public CheckBoxSmartTableCell(AbstractAction action,boolean selected){  checkBox=new JCheckBox(action);  checkBox.setSelected(selected);}  }
class C{  private static void printPropertiesValues(Map<String,String> props){  Object[] keys=props.keySet().toArray();  for (int i=0; i < keys.length; i++) {    String key=(String)keys[i];    String value=props.get(key);    if (value != null)     println(value); else     println("");  }}  }
class C{  private void loadStoredNameAndAddress(){  if (DBG)   Log.d(TAG,"Loading stored name and address");  if (mContext.getResources().getBoolean(com.android.internal.R.bool.config_bluetooth_address_validation) && Settings.Secure.getInt(mContentResolver,SECURE_SETTINGS_BLUETOOTH_ADDR_VALID,0) == 0) {    if (DBG)     Log.d(TAG,"invalid bluetooth name and address stored");    return;  }  mName=Settings.Secure.getString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_NAME);  mAddress=Settings.Secure.getString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_ADDRESS);  if (DBG)   Log.d(TAG,"Stored bluetooth Name=" + mName + ",Address="+ mAddress);}  }
class C{  public double variance(int attIndex){  double sum=0, sumSquared=0, sumOfWeights=0;  if (!attribute(attIndex).isNumeric()) {    throw new IllegalArgumentException("Can't compute variance because attribute is " + "not numeric!");  }  for (int i=0; i < numInstances(); i++) {    if (!instance(i).isMissing(attIndex)) {      sum+=instance(i).weight() * instance(i).value(attIndex);      sumSquared+=instance(i).weight() * instance(i).value(attIndex) * instance(i).value(attIndex);      sumOfWeights+=instance(i).weight();    }  }  if (sumOfWeights <= 1) {    return 0;  }  double result=(sumSquared - (sum * sum / sumOfWeights)) / (sumOfWeights - 1);  if (result < 0) {    return 0;  } else {    return result;  }}  }
class C{  public static LayoutData createHorizontallyFilledLayoutData(int horizontalSpan){  return createLayoutData(Alignment.FILL,Alignment.CENTER,true,false,horizontalSpan,1);}  }
class C{  public Fci(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  buildIndexing(independenceTest.getVariables());}  }
class C{  public void launchAssociatedEditor(){}  }
class C{  public AgentAppController createController(){  return new DemoController();}  }
class C{  public TransitSubModeQSimFactory(boolean routeOnSameMode){  this.routeOnSameMode=routeOnSameMode;}  }
class C{  public Jerry removeClass(String... classNames){  for (  Node node : nodes) {    String attrClass=node.getAttribute("class");    Set<String> classes=createPropertiesSet(attrClass,' ');    boolean wasChange=false;    for (    String className : classNames) {      if (classes.remove(className) == true) {        wasChange=true;      }    }    if (wasChange) {      String attrValue=generateAttributeValue(classes,' ');      node.setAttribute("class",attrValue);    }  }  return this;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0].ordinal() >= State.main_region_B.ordinal() && stateVector[0].ordinal() <= State.main_region_B_r2_D2.ordinal();case main_region_B_r1_C1:return stateVector[0] == State.main_region_B_r1_C1;case main_region_B_r1_C2:return stateVector[0] == State.main_region_B_r1_C2;case main_region_B_r2_D1:return stateVector[1] == State.main_region_B_r2_D1;case main_region_B_r2_D2:return stateVector[1] == State.main_region_B_r2_D2;default :return false;}}  }
class C{  public NetFactory(){  for (  Object[] o : classTagArray) {    addStorableClass((String)o[1],(Class)o[0]);  }  for (  Object[] o : enumTagArray) {    addEnumClass((String)o[1],(Class)o[0]);  }}  }
class C{  public <T extends CnATreeElement>T save(CnATreeElement container,Class<T> clazz) throws CommandException {  return save(container,clazz,null);}  }
class C{  public TransportClient removeTransportAddress(TransportAddress transportAddress){  nodesService.removeTransportAddress(transportAddress);  return this;}  }
class C{  public Object clone() throws CloneNotSupportedException {  ExceptionTable r=(ExceptionTable)super.clone();  r.entries=new ArrayList(entries);  return r;}  }
class C{  private void loadLongTextValues(){  addValues(descripcionBI.getValues(tipoFicha,ValorCampoGenericoVO.TIPO_TEXTO_LARGO,id));}  }
class C{  public Builder withMargins(int left,int top,int right,int bottom){  params.setMargins(left,top,right,bottom);  return this;}  }
class C{  private List orient(List seq){  DirectedEdge startEdge=(DirectedEdge)seq.get(0);  DirectedEdge endEdge=(DirectedEdge)seq.get(seq.size() - 1);  Node startNode=startEdge.getFromNode();  Node endNode=endEdge.getToNode();  boolean flipSeq=false;  boolean hasDegree1Node=startNode.getDegree() == 1 || endNode.getDegree() == 1;  if (hasDegree1Node) {    boolean hasObviousStartNode=false;    if (endEdge.getToNode().getDegree() == 1 && endEdge.getEdgeDirection() == false) {      hasObviousStartNode=true;      flipSeq=true;    }    if (startEdge.getFromNode().getDegree() == 1 && startEdge.getEdgeDirection() == true) {      hasObviousStartNode=true;      flipSeq=false;    }    if (!hasObviousStartNode) {      if (startEdge.getFromNode().getDegree() == 1)       flipSeq=true;    }  }  if (flipSeq)   return reverse(seq);  return seq;}  }
class C{  public static ASN1Primitive parseExtensionValue(byte[] encExtValue) throws IOException {  return ASN1Primitive.fromByteArray(ASN1OctetString.getInstance(encExtValue).getOctets());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isEMailValid(){  return validateEmail(getInternetAddress()) != null;}  }
class C{  private void buildEditor(){  Box rangeEditor=Box.createVerticalBox();  createCategoryFields();  createRangeFields();  for (int i=0; i < categories.size(); i++) {    Box row=Box.createHorizontalBox();    row.add(Box.createRigidArea(new Dimension(10,0)));    row.add(new JLabel((i + 1) + ". "));    row.add(this.categoryFields[i]);    row.add(new BigLabel(" = [ "));    row.add(this.leftRangeFields[i]);    row.add(new BigLabel(", "));    row.add(this.rightRangeFields[i]);    if (i < categories.size() - 1) {      row.add(new BigLabel(" )"));    } else {      row.add(new BigLabel(" ]"));    }    row.add(Box.createHorizontalGlue());    rangeEditor.add(row);  }  setLayout(new BorderLayout());  add(rangeEditor,BorderLayout.CENTER);  setFocusTraversalPolicy(new MyFocusTraversalPolicy());  setFocusCycleRoot(true);}  }
class C{  @Override public void loadUrl(String url){  if (url.equals("about:blank") || url.startsWith("javascript:")) {    this.loadUrlNow(url);  } else {    this.loadUrlIntoView(url);  }}  }
class C{  public UpdateRequest add(final SolrInputDocument doc,Integer commitWithin,Boolean overwrite){  Objects.requireNonNull(doc,"Cannot add a null SolrInputDocument");  if (documents == null) {    documents=new LinkedHashMap<>();  }  Map<String,Object> params=new HashMap<>(2);  if (commitWithin != null)   params.put(COMMIT_WITHIN,commitWithin);  if (overwrite != null)   params.put(OVERWRITE,overwrite);  documents.put(doc,params);  return this;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public CRemoveAllViewAction(final JFrame parent,final BackEndDebuggerProvider debuggerProvider,final INaviView view){  Preconditions.checkNotNull(parent,"IE01354: Parent argument can not be null");  Preconditions.checkNotNull(debuggerProvider,"IE01355: Manager argument can not be null");  Preconditions.checkNotNull(view,"IE01356: View argument can not be null");  m_parent=parent;  m_debuggerProvider=debuggerProvider;  m_view=view;  putValue(SHORT_DESCRIPTION,"Remove all view breakpoints");}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.697 -0500",hash_original_method="1E2502131AFAFEE705D62EA28BD1E532",hash_generated_method="476BB4A6DF32CC0368C94A292A50B98B") public Options(){  inDither=false;  inScaled=true;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  protected void assertConnectorNotRunning(){  assertThat(engine.isRunning()).isFalse();}  }
class C{  public TranslatableComponent(){}  }
class C{  @Override public void doRun(int run) throws Exception {  if (getRawOutput()) {    if (m_ZipDest == null) {      m_ZipDest=new OutputZipper(m_OutputFile);    }  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Instances runInstances=new Instances(m_Instances);  Random random=new Random(run);  runInstances.randomize(random);  if (runInstances.classAttribute().isNominal()) {    runInstances.stratify(m_NumFolds);  }  for (int fold=0; fold < m_NumFolds; fold++) {    Object[] seKey=m_SplitEvaluator.getKey();    Object[] key=new Object[seKey.length + 3];    key[0]=Utils.backQuoteChars(m_Instances.relationName());    key[1]="" + run;    key[2]="" + (fold + 1);    System.arraycopy(seKey,0,key,3,seKey.length);    if (m_ResultListener.isResultRequired(this,key)) {      Instances train=runInstances.trainCV(m_NumFolds,fold,random);      Instances test=runInstances.testCV(m_NumFolds,fold);      try {        Object[] seResults=m_SplitEvaluator.getResult(train,test);        Object[] results=new Object[seResults.length + 1];        results[0]=getTimestamp();        System.arraycopy(seResults,0,results,1,seResults.length);        if (m_debugOutput) {          String resultName=("" + run + "."+ (fold + 1)+ "."+ Utils.backQuoteChars(runInstances.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');          resultName=Utils.removeSubstring(resultName,"weka.classifiers.");          resultName=Utils.removeSubstring(resultName,"weka.filters.");          resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");          m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);        }        m_ResultListener.acceptResult(this,key,results);      } catch (      Exception ex) {        throw ex;      }    }  }}  }
class C{  public static String objectAsString(IObject stringObject,int limit) throws SnapshotException {  Integer count=(Integer)stringObject.resolveValue("count");  if (count == null)   return null;  if (count.intValue() == 0)   return "";  IPrimitiveArray charArray=(IPrimitiveArray)stringObject.resolveValue("value");  if (charArray == null)   return null;  Integer offset=(Integer)stringObject.resolveValue("offset");  if (offset == null)   return null;  return arrayAsString(charArray,offset,count,limit);}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  private boolean isCollectionEmpty(Collection collection){  if (collection != null) {    String collectionName=collection.getCollectionName();    String collectionId=collection.getCollectionId();    String parentCollectionId=collection.getParentCollectionId();    return (Strings.isNullOrEmpty(collectionName) && Strings.isNullOrEmpty(collectionId) && Strings.isNullOrEmpty(parentCollectionId));  }  return true;}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  public void beginAccept4(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/html;level=1, text/html;level=2");}  }
class C{  protected AbstractMatrix1D vFlip(){  if (size > 0) {    this.zero+=(this.size - 1) * this.stride;    this.stride=-this.stride;    this.isNoView=false;  }  return this;}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public void deselectAll(){  deselectAll(true);}  }
class C{  private static void run(Generator generator,DTBuilder builder,DateValue[] expected) throws IteratorShortCircuitingException {  run(generator,builder,expected,true);}  }
class C{  private void updateProfileList(ArrayList<String> s){  if (s == null) {    return;  }  ArrayList<String> ce_list=new ArrayList<>();  for (int i=0; i < profileComboBox.getItemCount(); i++) {    ce_list.add(profileComboBox.getItemAt(i).toString());  }  Iterator<String> itr=s.iterator();  while (itr.hasNext()) {    String st=itr.next();    if (!ce_list.contains(st)) {      log.debug("added item " + st);      profileComboBox.addItem(st);    }  }  if (profileComboBox.getItemCount() > 0) {    profileComboBox.setEnabled(true);    if (rosterSelector.getSelectedRosterEntries().length > 0) {      RosterEntry r=rosterSelector.getSelectedRosterEntries()[0];      String profile=r.getAttribute("VSDecoder_Profile");      log.debug("Trying to set the ProfileComboBox to this Profile: " + profile);      if (profile != null) {        profileComboBox.setSelectedItem(profile);      }      rosterSaveButton.setEnabled(true);    }  }}  }
class C{  public static String substringBetween(String str,String tag){  return substringBetween(str,tag,tag);}  }
class C{  public SessionChannel createSessionChannel(SecureChannel channel,Client client){  return new SessionChannel(client,this,channel);}  }
class C{  public boolean canEvaluate(){  return true;}  }
class C{  final public int capacity(){  return array.length;}  }
class C{  public Loader() throws CannotCompileException, NotFoundException {  super();  delegateLoadingOf("javassist.tools.reflect.Loader");  reflection=new Reflection();  ClassPool pool=ClassPool.getDefault();  addTranslator(pool,reflection);}  }
class C{  public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  output.addRelationship(Primitive.INSTANTIATION,Primitive.TWEET);  output.getNetwork().createVertex(Primitive.SELF).addRelationship(Primitive.TWEET,output);  String text=printInput(output);  Vertex target=output.mostConscious(Primitive.TARGET);  if (target != null) {    String replyTo=target.mostConscious(Primitive.WORD).getData().toString();    text="@" + replyTo + " "+ text;  }  Vertex question=output.getRelationship(Primitive.QUESTION);  Long reply=null;  if (question != null) {    Vertex id=question.getRelationship(Primitive.ID);    if (id != null) {      reply=((Number)id.getData()).longValue();    }  }  tweet(text,reply);}  }
class C{  public void delete(Name name,int type,String record) throws IOException {  newUpdate(Record.fromString(name,type,DClass.NONE,0,record,origin));}  }
class C{  private Gearing chooseGearing(final IBindingSet[] bsets){  final IBindingSet bs=(bsets != null && bsets.length > 0) ? bsets[0] : EmptyBindingSet.INSTANCE;  if (forwardGearing.inConst != null) {    if (log.isDebugEnabled())     log.debug("forward gear");    return forwardGearing;  } else   if (forwardGearing.outConst != null) {    if (log.isDebugEnabled())     log.debug("reverse gear");    return reverseGearing;  } else {    if (bs.isBound(forwardGearing.inVar)) {      if (log.isDebugEnabled())       log.debug("forward gear");      return forwardGearing;    } else     if (bs.isBound(forwardGearing.outVar)) {      if (log.isDebugEnabled())       log.debug("reverse gear");      return reverseGearing;    } else {      if (log.isDebugEnabled())       log.debug("forward gear");      return forwardGearing;    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Matrix4x3d rotateXYZ(Vector3d angles){  return rotateXYZ(angles.x,angles.y,angles.z);}  }
class C{  private BufferedImage readTriumphPicture(){  File f2=new File("/Users/johanwjoubert/Documents/Personal/Financing/Triumph/Pictures/S1.jpg");  BufferedImage bi=null;  try {    bi=ImageIO.read(f2);  } catch (  IOException e) {    e.printStackTrace();  }  return bi;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:00.003 -0500",hash_original_method="32F97B2485E75E3ED9E853F934660C63",hash_generated_method="1CBDDE678B85257BFA5CC8ECFAB93B99") public int read(byte b[],int offset,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (offset < 0 || len < 0) {    throw new IndexOutOfBoundsException();  } else   if (offset > b.length || offset + len > b.length) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  } else {    if (!base64.hasData()) {      byte[] buf=new byte[doEncode ? 4096 : 8192];      int c=in.read(buf);    }    return base64.readResults(b,offset,len);  }}  }
class C{  protected Result decode(BinaryBitmap bitmap){  possibleResultPoints.clear();  try {    if (reader instanceof MultiFormatReader) {      return ((MultiFormatReader)reader).decodeWithState(bitmap);    } else {      return reader.decode(bitmap);    }  } catch (  Exception e) {    return null;  } finally {    reader.reset();  }}  }
class C{  public static NetworkRestRep toNetworkRestRep(Network network,DbClient dbClient){  NetworkRestRep networkRestRep=MapNetwork.getInstance().apply(network);  List<EndpointAliasRestRep> endpoints=networkRestRep.getEndpointsDiscovered();  if (endpoints.isEmpty() || !network.getDiscovered() || !network.getTransportType().equalsIgnoreCase(TransportType.FC.name())) {    return networkRestRep;  }  try {    String fabricWwn=NetworkUtil.getNetworkWwn(network);    if (fabricWwn != null && !fabricWwn.isEmpty()) {      Map<String,EndpointAliasRestRep> aliasMap=new HashMap<String,EndpointAliasRestRep>();      for (      EndpointAliasRestRep endpointAliasRestRep : endpoints) {        aliasMap.put(endpointAliasRestRep.getName(),endpointAliasRestRep);      }      URIQueryResultList uriList=new URIQueryResultList();      dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFCEndpointByFabricWwnConstraint(NetworkUtil.getNetworkWwn(network)),uriList);      Set<String> fields=new HashSet<String>();      fields.add(REMOTE_PORT_NAME);      fields.add(REMOTE_PORT_ALIAS);      Iterator<FCEndpoint> iterator=dbClient.queryIterativeObjectFields(FCEndpoint.class,fields,uriList);      while (iterator.hasNext()) {        FCEndpoint fc=iterator.next();        if (fc != null && !StringUtils.isEmpty(fc.getRemotePortAlias())) {          String portWWN=fc.getRemotePortName();          EndpointAliasRestRep restRep=aliasMap.get(portWWN);          if (restRep != null) {            logger.debug("Found alias {} for WWN {} in network {}",new Object[]{fc.getRemotePortAlias(),portWWN,networkRestRep.getId()});            restRep.setAlias(fc.getRemotePortAlias());          }        }      }    }  } catch (  Exception ex) {    logger.error("Unable to display alias information because an error encountered while getting" + " alias information for network " + networkRestRep.getId(),ex);  }  return networkRestRep;}  }
class C{  public void testMoveFileDestinationRootSourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,null,null);  igfs.rename(FILE,IgfsPath.ROOT);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public void decrement(){  value--;}  }
class C{  public void removeVertex(Vertex vertex){  throwReadOnly();}  }
class C{  private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public double weightedFalsePositiveRate(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double falsePosTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=falsePositiveRate(i);    falsePosTotal+=(temp * classCounts[i]);  }  return falsePosTotal / classCountSum;}  }
class C{  @Override public void AddToSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.add(npt);  deleteLinksOnPort(npt,"LLDP suppressed.");}  }
class C{  public R proceed(final T1 param1,final T2 param2){  return fn.apply(param1,param2);}  }
class C{  public synchronized float[][] extract(int maxFeatureValue,int[] distanceSet,int[][] img){  long totalComplexity=0;  final int W=img.length;  final int H=img[0].length;  final int MAX_D=distanceSet[distanceSet.length - 1];  final float[][] A=new float[maxFeatureValue][distanceSet.length];  final float[] Hi=new float[maxFeatureValue];  if (Ic == null || ah == null || av == null || NIc == null || maxFeatureValue > MAXC || W > MAXW || H > MAXH || MAX_D > MAXD) {    Ic=null;    NIc=null;    ah=null;    av=null;    System.gc();    MAXC=Math.max(MAXC,maxFeatureValue);    MAXW=Math.max(MAXW,W);    MAXD=Math.max(MAXD,MAX_D);    MAXH=Math.max(MAXH,H);    Ic=new int[MAXC][MAXH * MAXW][2];    NIc=new int[MAXC];    ah=new int[MAXD][MAXW][MAXH][MAXC];    av=new int[MAXD - 1][MAXW][MAXH][MAXC];  }  for (int x=0; x < W; ++x)   for (int y=0; y < H; ++y) {    Hi[img[x][y]]++;    totalComplexity++;  }  Arrays.fill(NIc,0);  int[][][] ah0=new int[W][H][maxFeatureValue];  int[][][] av0=new int[W][H][maxFeatureValue];  for (int x=0; x < W; ++x)   for (int y=0; y < H; ++y) {    Ic[img[x][y]][NIc[img[x][y]]][0]=x;    Ic[img[x][y]][NIc[img[x][y]]][1]=y;    NIc[img[x][y]]++;    ah0[x][y][img[x][y]]=av0[x][y][img[x][y]]=1;    totalComplexity++;  }  for (int x=0; x < W; ++x)   for (int y=0; y < H; ++y) {    final int c=img[x][y];    ah[0][x][y][c]=ah0[x][y][c] + ((x + 1 < W) ? ah0[x + 1][y][c] : 0);    av[0][x][y][c]=av0[x][y][c] + ((y + 1 < H) ? ah0[x][y + 1][c] : 0);    for (int d=2; d <= MAX_D; ++d) {      ah[d - 1][x][y][c]=ah[d - 2][x][y][c] + ((x + d < W) ? ah0[x + d][y][c] : 0);      totalComplexity++;    }    for (int d=2; d <= MAX_D - 1; ++d)     av[d - 1][x][y][c]=av[d - 2][x][y][c] + ((y + d < H) ? av0[x][y + d][c] : 0);  }  for (int c=0; c < maxFeatureValue; ++c) {    for (int i=0; i < NIc[c]; ++i) {      final int x=Ic[c][i][0];      final int y=Ic[c][i][1];      A[c][0]+=((y - 1 >= 0) ? ((x - 1 >= 0) ? ah[0][x - 1][y - 1][c] : 0) + ah[0][x][y - 1][c] : 0) + ((y + 1 < H) ? ((x - 1 >= 0) ? ah[0][x - 1][y + 1][c] : 0) + ah[0][x][y + 1][c] : 0) + ((x - 1 >= 0) ? av0[x - 1][y][c] + av0[x - 1][y][c] : 0)+ ((x + 1 < W) ? av0[x + 1][y][c] + av0[x + 1][y][c] : 0);      totalComplexity++;    }  }  for (int di=1; di < distanceSet.length; ++di) {    final int d=distanceSet[di];    for (int c=0; c < maxFeatureValue; ++c) {      for (int i=0; i < NIc[c]; ++i) {        final int x=Ic[c][i][0];        final int y=Ic[c][i][1];        A[c][di]+=((y - d >= 0) ? ((x - d >= 0) ? ah[d - 1][x - d][y - d][c] : 0) + ah[d - 1][x][y - d][c] : 0) + ((y + d < H) ? ((x - d >= 0) ? ah[d - 1][x - d][y + d][c] : 0) + ah[d - 1][x][y + d][c] : 0) + ((x - d >= 0) ? ((y - d + 1 >= 0) ? av[d - 2][x - d][y - d + 1][c] : 0) + av[d - 2][x - d][y][c] : 0)+ ((x + d < W) ? ((y - d + 1 >= 0) ? av[d - 2][x + d][y - d + 1][c] : 0) + av[d - 2][x + d][y][c] : 0);        totalComplexity++;      }    }  }  for (int c=0; c < maxFeatureValue; ++c)   for (int di=0; di < distanceSet.length; ++di) {    final int d=distanceSet[di];    if (Hi[c] > 0.0f)     A[c][di]/=(Hi[c] * d * 8.0f);  }  return A;}  }
class C{  public static boolean testConds(int b){  short x=(short)b;  int y=x & 0xffff;  return y == 0xffff;}  }
class C{  private static int unitIndex(int bitIndex){  return bitIndex >>> 6;}  }
class C{  public static Calendar updated(Calendar self,Map<Object,Integer> updates){  Calendar result=(Calendar)self.clone();  set(result,updates);  return result;}  }
class C{  public static long sum(final int[] a){  long sum=0;  for (  final int x : a) {    sum+=x;  }  return sum;}  }
class C{  private void initStage(){  if (getMarketplaceBean().getMarketplaceId() != null) {    try {      stages=getBrandManagementService().getMarketplaceStageLocalization(getMarketplaceBean().getMarketplaceId());    } catch (    SaaSApplicationException e) {      marketplaceBean.checkMarketplaceDropdownAndMenuVisibility(e);      ExceptionHandler.execute(e);    }  }}  }
class C{  @Override public Type FLOAT(){  return floatType;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  protected String createErrorMessage(String message){  return String.format(Locale.US,"Parsing error at line: %d column: %d. %s",locator.getLineNumber(),locator.getColumnNumber(),message);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  void existsAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.getParentVector();  Decomposition decomp=nodeRep.decomposition;  state.hasChanged=true;  if (decomp.definedOp != null) {    if (parentVec == state.assumeReps) {      state.assumpDefinitions.add(nodeRep.instantiationSubstitutions.prefix + decomp.definedOp);    } else {      state.goalDefinitions.add(nodeRep.instantiationSubstitutions.prefix + decomp.definedOp);    }  }  QuantifierDecomposition qdc=decomposeQuantifier(nodeRep,false);  if (qdc != null) {    qdc.body.isCreated=true;    qdc.body.fromExists=true;    parentVec.remove(idx);    if (parentVec == state.assumeReps) {      int newIdx=idx;      if (idx < state.firstAddedAssumption) {        state.firstAddedAssumption--;        newIdx=state.firstAddedAssumption;      }      if (idx < state.numberOfContextAssumptions) {        state.numberOfContextAssumptions=state.numberOfContextAssumptions - 1;      }      idx=newIdx;    }    for (int i=0; i < qdc.news.size(); i++) {      parentVec.add(idx + i,qdc.news.elementAt(i));    }    parentVec.add(idx + qdc.news.size(),qdc.body);  }  raiseWindow();}  }
class C{  public OwlAxioms(){  super();}  }
class C{  @VisibleForTesting static void makeCommand(StringBuilder rawBuilder,StringBuilder logBuilder,int sequenceNumber,String cmd,Object... args){  if (cmd.indexOf('\0') >= 0) {    throw new IllegalArgumentException("Unexpected command: " + cmd);  }  if (cmd.indexOf(' ') >= 0) {    throw new IllegalArgumentException("Arguments must be separate from command");  }  rawBuilder.append(sequenceNumber).append(' ').append(cmd);  logBuilder.append(sequenceNumber).append(' ').append(cmd);  for (  Object arg : args) {    final String argString=String.valueOf(arg);    if (argString.indexOf('\0') >= 0) {      throw new IllegalArgumentException("Unexpected argument: " + arg);    }    rawBuilder.append(' ');    logBuilder.append(' ');    appendEscaped(rawBuilder,argString);    if (arg instanceof SensitiveArg) {      logBuilder.append("[scrubbed]");    } else {      appendEscaped(logBuilder,argString);    }  }  rawBuilder.append('\0');}  }
class C{  public SocketTimeoutException(Throwable cause){  super(null,cause);}  }
class C{  public void embed(Properties ctx,int windowNo,GridWindow gridWindow,int adTabId,int tabIndex,IADTabPanel tabPanel){  EmbeddedPanel ep=new EmbeddedPanel();  ep.tabPanel=tabPanel;  ep.adTabId=adTabId;  ep.tabIndex=tabIndex;  ep.gridWindow=gridWindow;  includedPanel.add(ep);  Group group=includedTab.get(adTabId);  ep.group=group;  if (tabPanel instanceof ADTabPanel) {    ADTabPanel atp=(ADTabPanel)tabPanel;    atp.listPanel.setPageSize(-1);  }  ADWindowPanel panel=new ADWindowPanel(ctx,windowNo,gridWindow,tabIndex,tabPanel);  ep.windowPanel=panel;  if (group != null) {    createEmbeddedPanelUI(ep);    if (active)     activateChild(true,ep);  }}  }
class C{  public int sizeMapArray(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.entries.length;  }  return x;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public void writeSBits(int numBits,int value) throws IOException {  long lval=value & 0x7FFFFFFF;  if (value < 0) {    lval|=1L << (numBits - 1);  }  writeUBits(numBits,lval);}  }
class C{  public CsvWriter put(String key,String value) throws CsvException {  int index=names.get(key);  return put(index,value);}  }
class C{  public static double crossValidateModel(DensityBasedClusterer clusterer,Instances data,int numFolds,Random random) throws Exception {  Instances train, test;  double foldAv=0;  ;  data=new Instances(data);  data.randomize(random);  for (int i=0; i < numFolds; i++) {    train=data.trainCV(numFolds,i,random);    clusterer.buildClusterer(train);    test=data.testCV(numFolds,i);    for (int j=0; j < test.numInstances(); j++) {      try {        foldAv+=clusterer.logDensityForInstance(test.instance(j));      } catch (      Exception ex) {      }    }  }  return foldAv / data.numInstances();}  }
class C{  public static int waitForCompletion(Future<?>[] futures,IntIntFunction aggr){  int size=futures.length;  Integer[] results=new Integer[size];  int a=0;  try {    for (int j=0; j < size; j++) {      results[j]=(Integer)futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  public static List<URI> refreshHDSConnections(final List<StorageProvider> hicommandProviderList,DbClient dbClient,HDSApiFactory hdsApiFactory){  List<URI> activeProviders=new ArrayList<URI>();  for (  StorageProvider storageProvider : hicommandProviderList) {    try {      HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storageProvider),storageProvider.getUserName(),storageProvider.getPassword());      hdsApiClient.getStorageSystemsInfo();      storageProvider.setConnectionStatus(ConnectionStatus.CONNECTED.name());      activeProviders.add(storageProvider.getId());      log.info("Storage Provider {} is reachable",storageProvider.getIPAddress());    } catch (    Exception e) {      log.error(e.getMessage(),e);      storageProvider.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());      log.error("Storage Provider {} is not reachable",storageProvider.getIPAddress());    } finally {      dbClient.persistObject(storageProvider);    }  }  return activeProviders;}  }
class C{  public void testCreationUnique(){  Instances data;  ArrayList<Attribute> atts;  String relName;  relName="testCreationUnique";  atts=new ArrayList<Attribute>();  atts.add(new Attribute("att-numeric_1"));  atts.add(new Attribute("att-numeric_2"));  atts.add(new Attribute("att-data_1","yyyy-MM-dd HH:mm"));  atts.add(new Attribute("att-nominal_1",new ArrayList<String>(Arrays.asList(new String[]{"1","2","3"}))));  atts.add(new Attribute("att-nominal_2",new ArrayList<String>(Arrays.asList(new String[]{"yes","no"}))));  atts.add(new Attribute("att-string_1",(ArrayList<String>)null));  data=new Instances(relName,atts,0);  assertEquals("relation name differs",relName,data.relationName());  assertEquals("# of attributes differ",atts.size(),data.numAttributes());}  }
class C{  public double incrementThisActive(){  return activityStats.thisActive.incrementAndReturn();}  }
class C{  public void service(Mail mail){}  }
class C{  public void testTooLarge() throws Exception {  BigInteger tooLarge=BigInteger.ONE.shiftLeft(128);  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("requires more than 16 bytes storage"));}  }
class C{  protected void sequence_Arguments_ParameterizedCallExpression_TypeArguments(ISerializationContext context,ParameterizedCallExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void sendQsiMessage(QsiMessage m,QsiListener reply){  log.debug("sendQsiMessage message: [{}]",m);  lastSender=reply;  notifyMessage(m,reply);  int len=m.getNumDataElements();  int cr=0;  int start=0;  if (isSIIBootMode()) {    cr=1;    start=0;  } else {    cr=3;    start=1;  }  byte msg[]=new byte[len + cr];  byte crc=0;  for (int i=0; i < len; i++) {    msg[i + start]=(byte)m.getElement(i);    crc^=msg[i + start];  }  if (isSIIBootMode()) {    msg[len]=0x0d;  } else {    msg[0]='S';    msg[len + cr - 2]=crc;    msg[len + cr - 1]='E';  }  try {    if (ostream != null) {      if (log.isDebugEnabled()) {        log.debug("write message: {}",jmri.util.StringUtil.hexStringFromBytes(msg));      }      ostream.write(msg);    } else {      log.warn("sendMessage: no connection established");    }  } catch (  Exception e) {    log.warn("sendMessage: Exception: " + e.toString());  }}  }
class C{  @Benchmark public long test5_UsingKeySetAndIterator() throws IOException {  long i=0;  Iterator<Integer> itr2=map.keySet().iterator();  while (itr2.hasNext()) {    Integer key=itr2.next();    i+=key + map.get(key);  }  return i;}  }
class C{  public TLinkedList(){  super();}  }
class C{  @Override public IGangliaMetadataMessage resolve(final IGangliaMetadataMessage decl){  return decl;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static String parseTemplate(Map parameters,String input){  if (parameters == null) {    return input;  }  StrSubstitutor substitutor=new StrSubstitutor(StrLookup.mapLookup(parameters));  return substitutor.replace(input);}  }
class C{  public StandardTokenizerFactory(Map<String,String> args){  super(args);  maxTokenLength=getInt(args,"maxTokenLength",StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Deprecated public static void assertNotEquals(Object item1,Object item2){  try {    Verify.assertNotEquals("items",item1,item2);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  private static void clearSyncState(Context context){  MyTracksProviderUtils myTracksProviderUtils=MyTracksProviderUtils.Factory.get(context);  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.DRIVE_ID_TRACKS_QUERY,null,null);    if (cursor != null && cursor.moveToFirst()) {      do {        Track track=myTracksProviderUtils.createTrack(cursor);        if (track.isSharedWithMe()) {          myTracksProviderUtils.deleteTrack(context,track.getId());        } else {          SyncUtils.updateTrack(myTracksProviderUtils,track,null);        }      } while (cursor.moveToNext());    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  PreferencesUtils.setLong(context,R.string.drive_largest_change_id_key,PreferencesUtils.DRIVE_LARGEST_CHANGE_ID_DEFAULT);  PreferencesUtils.setString(context,R.string.drive_edited_list_key,PreferencesUtils.DRIVE_EDITED_LIST_DEFAULT);  PreferencesUtils.setString(context,R.string.drive_deleted_list_key,PreferencesUtils.DRIVE_DELETED_LIST_DEFAULT);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE_TYPE;case 2:  return SW_PORT_TUPLE;case 3:return DATA;default :return null;}}  }
class C{  private void init(){  m_columnName=this.getColumnName();  if (m_columnName.equals("C_BPartner_ID")) {    popupMenu=new WEditorPopupMenu(true,true,true,true,true);    getComponent().setButtonImage("/images/BPartner10.png");  } else   if (m_columnName.equals("M_Product_ID")) {    popupMenu=new WEditorPopupMenu(true,true,true,false,false);    getComponent().setButtonImage("/images/Product10.png");  } else {    popupMenu=new WEditorPopupMenu(true,true,true,false,false);    getComponent().setButtonImage("/images/PickOpen10.png");  }  getComponent().getTextbox().setContext(popupMenu.getId());  if (gridField != null && gridField.getGridTab() != null) {    WFieldRecordInfo.addMenu(popupMenu);  }  return;}  }
class C{  public static <T>BiFunction<T,CloseableHttpResponse,T> inputOn200(){  return inputOn(HttpStatus.SC_OK);}  }
class C{  @Override public synchronized void addHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("listener is null");  }  if (handshakeListeners == null) {    handshakeListeners=new HashMap<HandshakeCompletedListener,AccessControlContext>(4);  }  handshakeListeners.put(listener,AccessController.getContext());}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case HARVEST:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  double dot(Vertex v){  return (p.x * v.getX() + p.y * v.getY());}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  for (int i=0; i < nAttrs; i++) {    processAttribute(writer,m_attributes.getQName(i),m_attributes.getValue(i),m_elemContext.m_elementDesc);  }}  }
class C{  @Deprecated public SkeletonMismatchException(String s){  super(s);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowRegionBreakElement(prefix,(AbstractDocument)doc);}  }
class C{  static File createSegmentFile(String name,File directory,long id,long version){  return new File(directory,String.format("%s-%d-%d.log",Assert.notNull(name,"name"),id,version));}  }
class C{  void drawString(Graphics g,String str,int x,int y){}  }
class C{  public void write(byte[] content) throws IOException {  out.write(content);}  }
class C{  public static final void show(Window owner){  PreferencesDialog dialog=new PreferencesDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlPreferences.setPreferences();  }}  }
class C{  private static void putLinks(final serverObjects prop,final String[] wordArray,Document document){  prop.put("viewMode",VIEW_MODE_AS_LINKLIST);  boolean dark=true;  int i=0;  if (document.getEmaillinks() != null) {    Iterator<AnchorURL> emailit=document.getEmaillinks().iterator();    while (emailit.hasNext()) {      AnchorURL eentry=emailit.next();      prop.put("viewMode_links_" + i + "_nr",i);      prop.put("viewMode_links_" + i + "_dark",dark ? "1" : "0");      prop.put("viewMode_links_" + i + "_type","email");      prop.put("viewMode_links_" + i + "_text",(eentry.getTextProperty().isEmpty()) ? "&nbsp;" : eentry.getTextProperty());      prop.put("viewMode_links_" + i + "_url","#");      prop.put("viewMode_links_" + i + "_link",eentry.toNormalform(true));      prop.put("viewMode_links_" + i + "_rel","");      prop.put("viewMode_links_" + i + "_name",eentry.getNameProperty());      dark=!dark;      i++;    }  }  i+=putMediaInfo(prop,wordArray,i,document.getVideolinks(),"video",(i % 2 == 0));  i+=putMediaInfo(prop,wordArray,i,document.getAudiolinks(),"audio",(i % 2 == 0));  dark=(i % 2 == 0);  i+=putIconsInfos(prop,wordArray,i,document.getIcons().values(),(i % 2 == 0));  dark=(i % 2 == 0);  final Map<DigestURL,ImageEntry> ts=document.getImages();  final Iterator<ImageEntry> tsi=ts.values().iterator();  ImageEntry entry;  while (tsi.hasNext()) {    entry=tsi.next();    prop.put("viewMode_links_" + i + "_nr",i);    prop.put("viewMode_links_" + i + "_dark",dark ? "1" : "0");    prop.put("viewMode_links_" + i + "_type","image");    prop.put("viewMode_links_" + i + "_text",(entry.alt().isEmpty()) ? "&nbsp;" : markup(wordArray,entry.alt()));    prop.put("viewMode_links_" + i + "_url",entry.url().toNormalform(true));    prop.put("viewMode_links_" + i + "_link",markup(wordArray,entry.url().toNormalform(true)));    if (entry.width() > 0 && entry.height() > 0) {      prop.put("viewMode_links_" + i + "_rel",entry.width() + "x" + entry.height()+ " Pixel");    } else {      prop.put("viewMode_links_" + i + "_rel","");    }    prop.put("viewMode_links_" + i + "_name","");    dark=!dark;    i++;  }  i+=putMediaInfo(prop,wordArray,i,document.getApplinks(),"app",(i % 2 == 0));  i+=putMediaInfo(prop,wordArray,i,document.getHyperlinks(),"link",(i % 2 == 0));  prop.put("viewMode_links",i);}  }
class C{  @Override public void onCreate(){  super.onCreate();  sAppInstance=this;  PackageInfo pInfo;  try {    pInfo=getPackageManager().getPackageInfo(getPackageName(),0);    sIsMavenBuild=pInfo.versionCode > 0 && !pInfo.versionName.equals("dev");    sAppVersionCode=pInfo.versionCode;    sAppVersionName=pInfo.versionName;    sIsDebugBuild=((pInfo.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0);  } catch (  NameNotFoundException e) {    DebugLog.e(e.getMessage(),e);  }  try {    sDeviceId=Settings.Secure.getString(getContentResolver(),Settings.Secure.ANDROID_ID);  } catch (  Exception e) {    DebugLog.e(e.getMessage(),e);  }  try {    if (getResources().getBoolean(R.bool.config_fw_allowForceDebug)) {      File f=new File(Environment.getExternalStorageDirectory(),"debug");      if (f.exists()) {        sIsDebugBuild=true;      }    }  } catch (  Exception e) {    DebugLog.e(e.getMessage(),e);  }  if (isDebugBuild()) {    DebugLog.setDebugLoggingEnabled(true);  } else {    String levelS=getString(R.string.config_fw_logLevelForNonDebugBuilds);    DebugLog.Level level=DebugLog.Level.valueOf(levelS);    DebugLog.setLoggingLevel(level);  }  String logTag=getString(R.string.config_fw_logtag);  if (!TextUtils.isEmpty(logTag)) {    DebugLog.setDefaultLogTag(getString(R.string.config_fw_logtag));  }  DebugLog.i("App started, release build: " + isReleaseBuild() + ", maven build: "+ isMavenBuild());  DebugLog.i("Device screen info: " + UIUtils.getScreenDensityAsString(this) + "/"+ UIUtils.getScreenSizeAsString(this));  if (isMavenBuild()) {    initErrorReporting();  }  if (!isDebugBuild()) {    initAnalytics();  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD && !isMavenBuild()) {    initStrictMode();  }}  }
class C{  public static CCAnimation animation(String name,float delay,ArrayList<CCSpriteFrame> frames){  return new CCAnimation(name,delay,frames);}  }
class C{  public void onShowNotification(NotificationView view,View contentView,NotificationEntry entry,int layoutId){  if (DBG)   Log.v(TAG,"onShowNotification - " + entry.ID);  final Drawable icon=entry.iconDrawable;  final CharSequence title=entry.title;  final CharSequence text=entry.text;  final CharSequence when=entry.showWhen ? entry.whenFormatted : null;  ChildViewManager mgr=view.getChildViewManager();  if (layoutId == R.layout.notification_simple || layoutId == R.layout.notification_large_icon || layoutId == R.layout.notification_full) {    boolean titleChanged=true;    boolean contentChanged=view.isContentLayoutChanged();    NotificationEntry lastEntry=view.getLastNotification();    if (!contentChanged && title != null && lastEntry != null && title.equals(lastEntry.title)) {      titleChanged=false;    }    mgr.setImageDrawable(ICON,icon,titleChanged);    mgr.setText(TITLE,title,titleChanged);    mgr.setText(TEXT,text);    mgr.setText(WHEN,when);  } else   if (layoutId == R.layout.notification_simple_2) {    mgr.setImageDrawable(ICON,icon);    mgr.setText(TITLE,title);    mgr.setText(TEXT,text);    mgr.setText(WHEN,when);  }}  }
class C{  public long timestamp(){  return Long.valueOf(file.getName().substring(file.getName().lastIndexOf(PART_SEPARATOR) + 1,file.getName().lastIndexOf(EXTENSION_SEPARATOR)));}  }
class C{  public void putInt(String key,int value){  map.put(key,value);}  }
class C{  @LargeTest public void testMediaImageItemRenderingModes() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,imageItemRenderingMode,5000);  mVideoEditor.addMediaItem(mediaImageItem1);  mediaImageItem1.setRenderingMode(MediaItem.RENDERING_MODE_CROPPING);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_CROPPING,mediaImageItem1.getRenderingMode());  try {    mediaImageItem1.setRenderingMode(MediaItem.RENDERING_MODE_CROPPING + 911);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Item Invalid rendering Mode",flagForException);  flagForException=false;  try {    mediaImageItem1.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER - 11);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Item Invalid rendering Mode",flagForException);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_CROPPING,mediaImageItem1.getRenderingMode());  mediaImageItem1.setRenderingMode(MediaItem.RENDERING_MODE_STRETCH);  assertEquals("MediaVideo Item rendering Mode",MediaItem.RENDERING_MODE_STRETCH,mediaImageItem1.getRenderingMode());}  }
class C{  void keepOnlyPositiveCounts(){  int firstProbe=states.length - 1;  while (states[firstProbe] > 0) {    firstProbe--;  }  for (int probe=firstProbe; probe-- > 0; ) {    if (states[probe] > 0 && values[probe] <= 0) {      hashDelete(probe);      numActive--;    }  }  for (int probe=states.length; probe-- > firstProbe; ) {    if (states[probe] > 0 && values[probe] <= 0) {      hashDelete(probe);      numActive--;    }  }}  }
class C{  public Heap(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public static boolean isNotEmpty(boolean[] array){  return (array != null && array.length != 0);}  }
class C{  private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){  NativeRegExp re;  String str=ScriptRuntime.toString(thisObj);  data.str=str;  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);  if (args.length == 0) {    Object compiled=NativeRegExp.compileRE(cx,"","",false);    re=new NativeRegExp(topScope,compiled);  } else   if (args[0] instanceof NativeRegExp) {    re=(NativeRegExp)args[0];  } else {    String src=ScriptRuntime.toString(args[0]);    String opt;    if (data.optarg < args.length) {      args[0]=src;      opt=ScriptRuntime.toString(args[data.optarg]);    } else {      opt=null;    }    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);    re=new NativeRegExp(topScope,compiled);  }  data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;  int[] indexp={0};  Object result=null;  if (data.mode == RA_SEARCH) {    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length); else     result=Integer.valueOf(-1);  } else   if (data.global) {    re.lastIndex=0;    for (int count=0; indexp[0] <= str.length(); count++) {      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);      if (result == null || !result.equals(Boolean.TRUE))       break;      if (data.mode == RA_MATCH) {        match_glob(data,cx,scope,count,reImpl);      } else {        if (data.mode != RA_REPLACE)         Kit.codeBug();        SubString lastMatch=reImpl.lastMatch;        int leftIndex=data.leftIndex;        int leftlen=lastMatch.index - leftIndex;        data.leftIndex=lastMatch.index + lastMatch.length;        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);      }      if (reImpl.lastMatch.length == 0) {        if (indexp[0] == str.length())         break;        indexp[0]++;      }    }  } else {    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, z2, lowestNeighbour;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  boolean isPit;  double aSmallValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          isPit=true;          lowestNeighbour=Float.POSITIVE_INFINITY;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              if (z2 < lowestNeighbour) {                lowestNeighbour=z2;              }              if (z2 < z) {                isPit=false;              }            }          }          if (isPit && lowestNeighbour < Float.POSITIVE_INFINITY) {            output.setValue(row,col,lowestNeighbour + aSmallValue);          } else {            output.setValue(row,col,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  private void initCrawlConfigUtils(){  HeritrixParameterValueModifier urlModifier=new HeritrixParameterValueModifier();  urlModifier.setAttributeName("key");  urlModifier.setAttributeValue("seeds.textSource.value");  urlModifier.setIdBeanParent("longerOverrides");  urlModifier.setElementName("prop");  ccu.setUrlModifier(urlModifier);  Map<String,HeritrixConfigurationModifier> modifierMap=new HashMap<>();  List<HeritrixConfigurationModifier> proxyModifierList=new ArrayList<>();  HeritrixConfigurationModifier depthModifier=new HeritrixAttributeValueModifier();  depthModifier.setAttributeName("name");  depthModifier.setAttributeValue("maxHops");  depthModifier.setIdBeanParent("tooManyHopsDecideRule");  depthModifier.setElementName("property");  modifierMap.put("DEPTH",depthModifier);  HeritrixConfigurationModifier maxDocumentsModifier=new HeritrixAttributeValueModifier();  maxDocumentsModifier.setAttributeName("name");  maxDocumentsModifier.setAttributeValue("maxDocumentsDownload");  maxDocumentsModifier.setIdBeanParent("crawlLimiter");  maxDocumentsModifier.setElementName("property");  modifierMap.put("MAX_DOCUMENTS",maxDocumentsModifier);  HeritrixConfigurationModifier maxDurationModifier=new HeritrixAttributeValueModifier();  maxDurationModifier.setAttributeName("name");  maxDurationModifier.setAttributeValue("maxTimeSeconds");  maxDurationModifier.setIdBeanParent("crawlLimiter");  maxDurationModifier.setElementName("property");  modifierMap.put("MAX_DURATION",maxDurationModifier);  HeritrixConfigurationModifier proxyHostModifier=new HeritrixAttributeValueModifierAndEraserFromProperty();  proxyHostModifier.setAttributeName("name");  proxyHostModifier.setAttributeValue("httpProxyHost");  proxyHostModifier.setIdBeanParent("fetchHttp");  proxyHostModifier.setElementName("property");  ((HeritrixAttributeValueModifierAndEraserFromProperty)proxyHostModifier).setPropertyValue(System.getProperty("proxyHost"));  proxyModifierList.add(proxyHostModifier);  HeritrixConfigurationModifier proxyPortModifier=new HeritrixAttributeValueModifierAndEraserFromProperty();  proxyPortModifier.setAttributeName("name");  proxyPortModifier.setAttributeValue("httpProxyPort");  proxyPortModifier.setIdBeanParent("fetchHttp");  proxyPortModifier.setElementName("property");  ((HeritrixAttributeValueModifierAndEraserFromProperty)proxyPortModifier).setPropertyValue(System.getProperty("proxyPort"));  proxyModifierList.add(proxyPortModifier);  HeritrixConfigurationModifier proxyUserModifier=new HeritrixAttributeValueModifierAndEraserFromProperty();  proxyUserModifier.setAttributeName("name");  proxyUserModifier.setAttributeValue("httpProxyUser");  proxyUserModifier.setIdBeanParent("fetchHttp");  proxyUserModifier.setElementName("property");  ((HeritrixAttributeValueModifierAndEraserFromProperty)proxyUserModifier).setPropertyValue(System.getProperty("proxyUser"));  proxyModifierList.add(proxyUserModifier);  HeritrixConfigurationModifier proxyPasswordModifier=new HeritrixAttributeValueModifierAndEraserFromProperty();  proxyPasswordModifier.setAttributeName("name");  proxyPasswordModifier.setAttributeValue("httpProxyPassword");  proxyPasswordModifier.setIdBeanParent("fetchHttp");  proxyPasswordModifier.setElementName("property");  ((HeritrixAttributeValueModifierAndEraserFromProperty)proxyPasswordModifier).setPropertyValue(System.getProperty("proxyPassword"));  proxyModifierList.add(proxyPasswordModifier);  HeritrixConfigurationModifier exclusionRegexpModifier=new HeritrixContainsRegexpParameterValueModifier();  exclusionRegexpModifier.setXpathExpression("//list[ancestor::property/@name='regexList' and ancestor::bean/@id='matchesListRegexDecideRule']");  exclusionRegexpModifier.setElementName("value");  modifierMap.put("EXCLUSION_REGEX",exclusionRegexpModifier);  HeritrixConfigurationModifier inclusionRegexpModifier=new HeritrixContainsRegexpParameterValueModifier();  inclusionRegexpModifier.setXpathExpression("//list[ancestor::property/@name='regexList' and ancestor::bean/@id='inclusionListRegexDecideRule']");  inclusionRegexpModifier.setElementName("value");  modifierMap.put("INCLUSION_REGEX",inclusionRegexpModifier);  ccu.setParameterModifierMap(modifierMap);  ccu.setProxyModifierList(proxyModifierList);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.DATA_TYPE_MAPPING_MODEL;}  }
class C{  public ColorTintFilter(Color mixColor,float mixValue){  if (mixColor == null) {    throw new IllegalArgumentException("mixColor cannot be null");  }  this.mixColor=mixColor;  if (mixValue < 0.0f) {    mixValue=0.0f;  } else   if (mixValue > 1.0f) {    mixValue=1.0f;  }  this.mixValue=mixValue;  int mix_r=(int)(mixColor.getRed() * mixValue);  int mix_g=(int)(mixColor.getGreen() * mixValue);  int mix_b=(int)(mixColor.getBlue() * mixValue);  float factor=1.0f - mixValue;  preMultipliedRed=new int[256];  preMultipliedGreen=new int[256];  preMultipliedBlue=new int[256];  for (int i=0; i < 256; i++) {    int value=(int)(i * factor);    preMultipliedRed[i]=value + mix_r;    preMultipliedGreen[i]=value + mix_g;    preMultipliedBlue[i]=value + mix_b;  }}  }
class C{  @Override public String toString(){  return "(output)";}  }
class C{  public ServiceInvocationTest(String name){  super(name);}  }
class C{  public Context(Object context){  super(context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.721 -0500",hash_original_method="DB86B1A78C8282F0076D098AB19F02D7",hash_generated_method="6476808AA0B23A874519A7923EE0CE15") private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){  String host=origin.getHost();  boolean isLocalHost=true;  for (int i=0; i < host.length(); i++) {    char ch=host.charAt(i);    if (ch == '.' || ch == ':') {      isLocalHost=false;      break;    }  }  if (isLocalHost) {    host+=".local";    return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());  } else {    return origin;  }}  }
class C{  @GET @Path("{guid}/outputs/graph") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response outputsGraph(@PathParam("guid") String guid){  LOG.info("Fetching lineage outputs graph for entity guid={}",guid);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"LineageResource.outputsGraph(" + guid + ")");    }    final String jsonResult=lineageService.getOutputsGraphForEntity(guid);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("table entity not found for {}",guid);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get lineage outputs graph for entity guid={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get lineage outputs graph for entity guid={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public void fill(final double[][] data,final int startRow,final int startCol){  final int rows=data.length;  final int cols=data[0].length;  verifyTrue(startRow < rows && startRow < getRowCount(),"illegal startRow: %s",startRow);  verifyTrue(startCol < cols && startCol < getColumnCount(),"illegal startCol: %s",startCol);  verifyTrue(rows <= getRowCount(),"too many rows in input: %s: max allowed = %s",rows,getRowCount());  verifyTrue(cols <= getColumnCount(),"too many columns in input: %s: max allowed = %s",cols,getColumnCount());  for (int i=startRow; i < rows; i++) {    for (int j=startCol; j < cols; j++) {      setDouble(data[i][j],i,j);    }  }}  }
class C{  public boolean isAllowPartials(){  return allowPartials;}  }
class C{  private synchronized void updateSpriteFrame(){  if (mDrawingNum != mFrequency) {    mDrawingNum++;    return;  }  mDrawingNum=Constant.DEFAULT_DRAWING_NUM;  mSpriteSheet.updateFrame();}  }
class C{  public byte canTeleport(){  if (!hasFrame()) {    return 2;  }  if (getClosest() == null) {    return 3;  }  List<Entity> entitiesInPortal=getToTeleport();  Coord4D closestCoords=getClosest();  int electricityNeeded=0;  for (  Entity entity : entitiesInPortal) {    electricityNeeded+=calculateEnergyCost(entity,closestCoords);  }  if (getEnergy() < electricityNeeded) {    return 4;  }  return 1;}  }
class C{  public static File showOpenFile(FileDataStoreFactorySpi format,Shell parent){  return showOpenFile(format,null,parent);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (!MPeriod.isOpen(getCtx(),getMovementDate(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MMovementLine[] lines=getLines(false);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  if (dt.isInTransit())   createConfirmation();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  public int postWebPages(String[] args,int startIndexInArgs,OutputStream out){  reset();  LinkedHashSet<URL> s=new LinkedHashSet<>();  for (int j=startIndexInArgs; j < args.length; j++) {    try {      URL u=new URL(normalizeUrlEnding(args[j]));      s.add(u);    } catch (    MalformedURLException e) {      warn("Skipping malformed input URL: " + args[j]);    }  }  backlog.add(s);  return webCrawl(0,out);}  }
class C{  public void findAndUndo(Object obj){}  }
class C{  protected static void indexExistingRows(Connection conn,String schema,String table) throws SQLException {  FullTextLucene2.FullTextTrigger existing=new FullTextLucene2.FullTextTrigger();  existing.init(conn,schema,null,table,false,Trigger.INSERT);  String sql="SELECT * FROM " + StringUtils.quoteIdentifier(schema) + "."+ StringUtils.quoteIdentifier(table);  ResultSet rs=conn.createStatement().executeQuery(sql);  int columnCount=rs.getMetaData().getColumnCount();  while (rs.next()) {    Object[] row=new Object[columnCount];    for (int i=0; i < columnCount; i++) {      row[i]=rs.getObject(i + 1);    }    existing.insert(row,false);  }  existing.commitIndex();}  }
class C{  public static void testSentence(){  System.out.println(Utils.getWords("Hello what is 1 + (2*3) http://www.foo/bluee? 123 hey"));  System.out.println(Utils.getWords("Hello what is 1 + (2*3) http://www.foo/bluee?	f"));  System.out.println(Utils.getWords("Hello what is 1 + (2*3) http://www.foo/bluee?"));  String a=new TextStream("abc").next(2);  a=new TextStream("abc").next(1);  a=new TextStream("abc").next(3);  a=new TextStream("abc").next(4);  a=new TextStream("abc").peek(1);  a=new TextStream("abc").peek(2);  a=new TextStream("abc").peek(3);  a=new TextStream("abc").peek(4);  TextStream s=new TextStream("abc");  s.skip(4);  a=s.upToEnd();  s=new TextStream("abc");  s.skip(1);  a=s.upToEnd();  s=new TextStream("abc");  s.skip(2);  a=s.upToEnd();  s=new TextStream("abc");  s.skip(0);  a=s.upToEnd();  System.out.println(a);}  }
class C{  public Y between(X from,X to){  return add(" BETWEEN ? AND ?",from,to);}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getPreferredSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getPreferredSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof BERootPaneUI)) {    JComponent titlePane=((BERootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getPreferredSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  public void hideData(int index){  tagData.setElementAt(null,index);}  }
class C{  public CCpTest(String name){  super(name);}  }
class C{  public Subscription then(final Action1<T> fulfilmentCallback,final Action1<Throwable> rejectedCallback,final Action0 onFinally){  return this.observable.subscribe(fulfilmentCallback,rejectedCallback,onFinally);}  }
class C{  protected int extractColumnType(ResultSet columnList) throws SQLException {  int columnType=columnList.getInt("DATA_TYPE");  int returnType=java.sql.Types.NULL;switch (columnType) {case java.sql.Types.BIGINT:    returnType=java.sql.Types.NUMERIC;  break;case 0:String typeName=columnList.getString("TYPE_NAME");if (typeName.startsWith("char") == true) {returnType=java.sql.Types.CHAR;} else if ("float".equals(typeName) == true) {returnType=java.sql.Types.FLOAT;} else if (typeName.startsWith("decimal")) {returnType=java.sql.Types.DECIMAL;}break;default :returnType=columnType;break;}return returnType;}  }
class C{  public void resumeWork(){  mExitTasksEarly=false;  setPause(false);  if (DEBUG) {    Log.d(Log_TAG,String.format("work_status: resumeWork %s",this));  }}  }
class C{  public void log(final LogLevel logLevel,final String msg){  logger.log(logLevel.level,msg);}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public MandatoryUdaMissingException(String message,Object[] params){  super(message,params);}  }
class C{  public static Map<String,Collection<Category>> readDict(final File modelFolder,final Set<Category> lexicalCategories) throws IOException {  final Map<String,Collection<Category>> result=new HashMap<>();  final Multimap<Category,Category> categoryToAnnotatedCategories=HashMultimap.create();  for (  final Category category : lexicalCategories) {    categoryToAnnotatedCategories.put(category.withoutAnnotation(),category);  }  final File file=new File(modelFolder,fileName);  loadTagDict(lexicalCategories,result,file,false,categoryToAnnotatedCategories);  if (result.size() == 0) {    return null;  }  final File ccgbankTagDict=new File(modelFolder,fileName + ".ccgbank");  loadTagDict(lexicalCategories,result,ccgbankTagDict,true,categoryToAnnotatedCategories);  return ImmutableMap.copyOf(result);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void onHarvestBlockEvent(ArrayList<ItemStack> aDrops,ItemStack aStack,EntityPlayer aPlayer,Block aBlock,int aX,int aY,int aZ,byte aMetaData,int aFortune,boolean aSilkTouch,BlockEvent.HarvestDropsEvent aEvent){  IToolStats tStats=getToolStats(aStack);  if (isItemStackUsable(aStack) && getDigSpeed(aStack,aBlock,aMetaData) > 0.0F)   doDamage(aStack,tStats.convertBlockDrops(aDrops,aStack,aPlayer,aBlock,aX,aY,aZ,aMetaData,aFortune,aSilkTouch,aEvent) * tStats.getToolDamagePerDropConversion());}  }
class C{  @Override public E pollLast(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  protected void parseCommands(List<PLIToken> tokens,int tokenIndex){  if (tokenIndex < tokens.size()) {    PLIToken token=tokens.get(tokenIndex++);    if (token.getType() == PLTokenType.PLTokenTypeFunction) {      String fx=token.getSequence();      PLITokenInfo tokenInfo=new PLTokenInfo(fx);      if (fx.equals("load")) {        tokenIndex=this.parseFunction(tokens,tokenIndex,tokenInfo,PLTokenType.PLTokenTypeString.ordinal(),PLTokenType.PLTokenTypeBoolean.ordinal() | PLTokenType.PLTokenTypeOptional,PLTokenType.PLTokenTypeFunction.ordinal() | PLTokenType.PLTokenTypeOptional,PLTokenType.PLTokenTypeNumber.ordinal() | PLTokenType.PLTokenTypeOptional,PLTokenType.PLTokenTypeNumber.ordinal() | PLTokenType.PLTokenTypeOptional);        mView.getActivity().runOnUiThread(new PLCommandRunnable(mView,tokenInfo));      } else       if (fx.equals("lookAt")) {        tokenIndex=this.parseFunction(tokens,tokenIndex,tokenInfo,PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeBoolean.ordinal() | PLTokenType.PLTokenTypeOptional);        PLICamera camera=mView.getCamera();        if (camera != null)         camera.lookAt(tokenInfo.getFloat(0),tokenInfo.getFloat(1),tokenInfo.hasValue(2) ? tokenInfo.getBoolean(2) : false);      } else       if (fx.equals("lookAtAndZoom")) {        tokenIndex=this.parseFunction(tokens,tokenIndex,tokenInfo,PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeBoolean.ordinal() | PLTokenType.PLTokenTypeOptional);        PLICamera camera=mView.getCamera();        if (camera != null)         camera.lookAtAndZoomFactor(tokenInfo.getFloat(0),tokenInfo.getFloat(1),tokenInfo.getFloat(2),tokenInfo.hasValue(3) ? tokenInfo.getBoolean(3) : false);      } else       if (fx.equals("zoom")) {        tokenIndex=this.parseFunction(tokens,tokenIndex,tokenInfo,PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeBoolean.ordinal() | PLTokenType.PLTokenTypeOptional);        PLICamera camera=mView.getCamera();        if (camera != null)         camera.setZoomFactor(tokenInfo.getFloat(0),tokenInfo.hasValue(1) ? tokenInfo.getBoolean(1) : false);      } else       if (fx.equals("fov")) {        tokenIndex=this.parseFunction(tokens,tokenIndex,tokenInfo,PLTokenType.PLTokenTypeNumber.ordinal(),PLTokenType.PLTokenTypeBoolean.ordinal() | PLTokenType.PLTokenTypeOptional);        PLICamera camera=mView.getCamera();        if (camera != null)         camera.setFov(tokenInfo.getFloat(0),tokenInfo.hasValue(1) ? tokenInfo.getBoolean(1) : false);      } else       throw new RuntimeException("parseCommands expected a valid function name");      this.parseCommands(tokens,tokenIndex);    } else     if (token.getType() == PLTokenType.PLTokenTypeEOS)     this.parseCommands(tokens,tokenIndex); else     throw new RuntimeException("parseCommands expected a valid command");  }}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0) {    throw new IllegalArgumentException("delay < 0: " + delay);  }  scheduleImpl(task,delay,-1,false);}  }
class C{  protected void logVarstat(DoubleStatistic varstat,double[] varsum){  if (varstat == null) {    return;  }  double s=0.;  for (  double v : varsum) {    s+=v;  }  varstat.setDouble(s);  getLogger().statistics(varstat);}  }
class C{  default Task<?> stop(){  return Task.done();}  }
class C{  public boolean isInsideUnion(final Coordinate point){  Point p=geomFactory.createPoint(point);  if (globalUnion.intersects(p)) {    return true;  }  return false;}  }
class C{  public boolean hasTerrainfactor(){  for (  int type : hsTerrains) {    if (terrains[type].getTerrainFactor() > 0) {      return true;    }  }  return false;}  }
class C{  public static void analyzeClass(String className,List<String> classPath) throws RuntimeException, ClassNotFoundException {  initInheritanceTree(classPath);  analyze(className,classPath);}  }
class C{  @Override public boolean isCaseSensitive(int columnIndex){  return true;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof Rational)) {    return false;  }  Rational that=(Rational)obj;  return this.doubleValue() == that.doubleValue();}  }
class C{  private void calcScreenCoords(int n){  if (m_nodes[n].m_top == 32000) {    m_nodes[n].m_top=((int)(m_nodes[n].m_node.getTop() * m_viewSize.height)) + m_viewPos.height;    m_nodes[n].m_center=((int)(m_nodes[n].m_node.getCenter() * m_viewSize.width)) + m_viewPos.width;  }}  }
class C{  @Override protected RStarTreeNode createNewLeafNode(){  return new RStarTreeNode(leafCapacity,true);}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  protected VoidTypeImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:58.702 -0400",hash_original_method="4C39D33D36F039D96E99CA904F9EF3AF",hash_generated_method="E5A661D667B20970BF8F3702A989F785") @Override synchronized public boolean isRunning(){  return isProcessing;}  }
class C{  public static <T extends CodedEnum>void writeEnum(final OutputStream output,final T e) throws IOException {  writeVarInt32(output,e.getCode());}  }
class C{  public lalr_item_set items(){  return _items;}  }
class C{  public static byte[] sha3_512(final byte[]... inputs){  return hash("SHA3-512",inputs);}  }
class C{  public CatalogServiceRestRep update(URI id,CatalogServiceUpdateParam input){  return client.put(CatalogServiceRestRep.class,input,getIdUrl(),id);}  }
class C{  public static boolean contains(Object[] array,Object objectToFind){  return indexOf(array,objectToFind) != INDEX_NOT_FOUND;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.763 -0500",hash_original_method="6BE9C825DC583F0CB57790078D9D850C",hash_generated_method="A56A9EB534D0001D160743C198ECB5AA") public SSLSessionCache(File dir) throws IOException {  mSessionCache=FileClientSessionCache.usingDirectory(dir);}  }
class C{  public static GenericDraweeHierarchy mockDraweeHierarchy(){  return mockDraweeHierarchyOf(DrawableTestUtils.mockDrawable());}  }
class C{  public T gone(){  return visibility(View.GONE);}  }
class C{  private void assertNumerics(String msg,Object expected,Object actual){  if (null == expected || null == actual) {    assertEquals(msg,expected,actual);    return;  }  assertEquals(msg + " ... values do not have the same type: " + expected+ " vs "+ actual,expected.getClass(),actual.getClass());  if (expected instanceof Date) {    expected=((Date)expected).getTime();    actual=((Date)actual).getTime();    msg=msg + " (w/dates converted to ms)";  }  assertTrue(msg + " ... expected is not a Number: " + expected+ "=>"+ expected.getClass(),expected instanceof Number);  if (expected instanceof Long || expected instanceof Integer) {    assertEquals(msg,((Number)expected).longValue(),((Number)actual).longValue());  } else   if (expected instanceof Float || expected instanceof Double) {    double expect=((Number)expected).doubleValue();    double epsilon=Math.abs(expect * 0.1E-7D);    assertEquals(msg,expect,((Number)actual).doubleValue(),epsilon);  } else {    fail(msg + " ... where did this come from: " + expected.getClass());  }}  }
class C{  public static String join(String separator,double... elements){  if (elements == null || elements.length == 0) {    return "";  }  List<Number> list=new ArrayList<Number>(elements.length);  for (  Double elem : elements) {    list.add(elem);  }  return join(separator,list);}  }
class C{  public int maxFrameSize(){  return reader.getInteger(MAX_FRAME_SIZE,DEFAULT_MAX_FRAME_SIZE);}  }
class C{  public void testTranscriptionError(){  setDefaultParameters();  this.simulator.setRawDataSaved(true);  this.simulator.setMeasuredDataSaved(false);  this.simulator.simulate(this.history);  double[][][] rawData=this.simulator.getRawData();  assertEquals(3,rawData.length);  assertEquals(4,rawData[0].length);  assertEquals(10000,rawData[0][0].length);  DoubleArrayList doubleArrayList=new DoubleArrayList(rawData[0][1]);  double sum=Descriptive.sum(doubleArrayList);  double sumOfSquares=Descriptive.sumOfSquares(doubleArrayList);  double stdev=Descriptive.standardDeviation(Descriptive.variance(rawData[0][1].length,sum,sumOfSquares));  assertEquals(0.05,stdev,0.01);}  }
class C{  @Override public String generateURL(CategoryDataset dataset,int series,int item){  return getURL(series,item);}  }
class C{  public boolean increment(long key){  return adjustValue(key,1);}  }
class C{  public void deleteRow(int selectedRow){  int i=0;  for (  final TradelogSummary element : getData().getTradelogSummary()) {    if (i == selectedRow) {      getData().getTradelogSummary().remove(element);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }    i++;  }}  }
class C{  public void updateGestor(String idSerie,String idGestor){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,idSerie));  Map toUpdate=Collections.singletonMap(SerieDBEntityImpl.CAMPO_IDUSRGESTOR,idGestor);  updateFields(qual.toString(),toUpdate,TABLE_NAME_SERIE);}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public InternalDistributedMember(NetMember m){  netMbr=m;  MemberAttributes attr=m.getAttributes();  this.hostName=SocketCreator.resolve_dns ? SocketCreator.getHostName(m.getInetAddress()) : m.getInetAddress().getHostAddress();  if (attr == null) {  } else {    this.dcPort=attr.getPort();    this.vmPid=attr.getVmPid();    this.vmKind=attr.getVmKind();    this.vmViewId=attr.getVmViewId();    this.name=attr.getName();    this.groups=attr.getGroups();    this.durableClientAttributes=attr.getDurableClientAttributes();  }  this.version=m.getVersionOrdinal();  try {    this.versionObj=Version.fromOrdinal(version,false);  } catch (  UnsupportedVersionException e) {    this.versionObj=Version.CURRENT;  }  cachedToString=null;}  }
class C{  public static String gensalt(final int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  public void enableForceDetect(){  mIsForceDetect=true;}  }
class C{  public final double z(){  return this.z;}  }
class C{  public void mouseDragged(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager.defaultManager().processMouseEvent(e);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.263 -0500",hash_original_method="FC3424D2079ACBF27BEC7269ECB48C94",hash_generated_method="3C1589722F7DF9BF4FE6C3BC09F89D05") public boolean isSynthetic(){  int flags=getFieldModifiers(declaringClass,slot);  return 1 == ((flags & Modifier.SYNTHETIC) + 0);}  }
class C{  public void testEnableExtFunc(){  Policy p=new SimplePolicy(new AllPermission());  Policy.setPolicy(p);  System.setSecurityManager(new SecurityManager());  TransformerFactory factory=TransformerFactory.newInstance();  boolean isExtensionSupported=enableExtensionFunction(factory);  try {    transform(factory);    System.out.println("testEnableExt: OK");  } catch (  TransformerConfigurationException e) {    fail(e.getMessage());  }catch (  TransformerException e) {    fail(e.getMessage());  } finally {    System.setSecurityManager(null);  }}  }
class C{  CanMessage createPacket(String s){  CanMessage m;  CbusAddress a=new CbusAddress(s);  if (a.check()) {    m=a.makeMessage(tc.getCanid());  } else {    m=new CanMessage(tc.getCanid());    if (s.charAt(0) == '[') {      m.setExtended(true);      int i=s.indexOf(']');      String h=s.substring(1,i);      m.setHeader(Integer.parseInt(h,16));      s=s.substring(i + 1,s.length());    } else     if (s.charAt(0) == '(') {      int i=s.indexOf(')');      String h=s.substring(1,i);      m.setHeader(Integer.parseInt(h,16));      s=s.substring(i + 1,s.length());    }    byte b[]=StringUtil.bytesFromHexString(s);    m.setNumDataElements(b.length);    for (int i=0; i < b.length; i++) {      m.setElement(i,b[i] & 0xff);    }  }  return m;}  }
class C{  public Object remove(){  int size=size();  if (size == 0) {    throw new BufferUnderflowException();  }  return remove(size - 1);}  }
class C{  private final void checkBuffer() throws IOException, SpaceExceededException {  if (this.buffer.size() >= this.buffersize)   flushBuffer();}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  return m_str.startsWith(prefix.toString(),toffset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.606 -0400",hash_original_method="57BF6134D4D06867A32AED7093522EF0",hash_generated_method="4923CB1035D8F90EFB179A95E61D22AE") public String metaphone(String txt){  boolean hard=false;  if ((txt == null) || (txt.length() == 0)) {    return "";  }  if (txt.length() == 1) {    return txt.toUpperCase();  }  char[] inwd=txt.toUpperCase().toCharArray();  StringBuffer local=new StringBuffer(40);  StringBuffer code=new StringBuffer(10);switch (inwd[0]) {case 'K':case 'G':case 'P':    if (inwd[1] == 'N') {      local.append(inwd,1,inwd.length - 1);    } else {      local.append(inwd);    }  break;case 'A':if (inwd[1] == 'E') {  local.append(inwd,1,inwd.length - 1);} else {  local.append(inwd);}break;case 'W':if (inwd[1] == 'R') {local.append(inwd,1,inwd.length - 1);break;}if (inwd[1] == 'H') {local.append(inwd,1,inwd.length - 1);local.setCharAt(0,'W');} else {local.append(inwd);}break;case 'X':inwd[0]='S';local.append(inwd);break;default :local.append(inwd);}int wdsz=local.length();int n=0;while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {char symb=local.charAt(n);if ((symb != 'C') && (isPreviousChar(local,n,symb))) {n++;} else {switch (symb) {case 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {code.append(symb);}break;case 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {break;}code.append(symb);break;case 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {break;}if (regionMatch(local,n,"CIA")) {code.append('X');break;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {code.append('S');break;}if (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {code.append('K');break;}if (isNextChar(local,n,'H')) {if ((n == 0) && (wdsz >= 3) && isVowel(local,2)) {code.append('K');} else {code.append('X');}} else {code.append('K');}break;case 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && (this.frontv.indexOf(local.charAt(n + 2)) >= 0)) {code.append('J');n+=2;} else {code.append('T');}break;case 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {break;}if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {break;}if ((n > 0) && (regionMatch(local,n,"GN") || regionMatch(local,n,"GNED"))) {break;}if (isPreviousChar(local,n,'G')) {hard=true;} else {hard=false;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {code.append('J');} else {code.append('K');}break;case 'H':if (isLastChar(wdsz,n)) {break;}if ((n > 0) && (this.varson.indexOf(local.charAt(n - 1)) >= 0)) {break;}if (isVowel(local,n + 1)) {code.append('H');}break;case 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);break;case 'K':if (n > 0) {if (!isPreviousChar(local,n,'C')) {code.append(symb);}} else {code.append(symb);}break;case 'P':if (isNextChar(local,n,'H')) {code.append('F');} else {code.append(symb);}break;case 'Q':code.append('K');break;case 'S':if (regionMatch(local,n,"SH") || regionMatch(local,n,"SIO") || regionMatch(local,n,"SIA")) {code.append('X');} else {code.append('S');}break;case 'T':if (regionMatch(local,n,"TIA") || regionMatch(local,n,"TIO")) {code.append('X');break;}if (regionMatch(local,n,"TCH")) {break;}if (regionMatch(local,n,"TH")) {code.append('0');} else {code.append('T');}break;case 'V':code.append('F');break;case 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {code.append(symb);}break;case 'X':code.append('K');code.append('S');break;case 'Z':code.append('S');break;}n++;}if (code.length() > this.getMaxCodeLen()) {code.setLength(this.getMaxCodeLen());}}return code.toString();}  }
class C{  public static Boolean toBoolean(Object o,Boolean defaultValue){  if (o instanceof Boolean)   return ((Boolean)o); else   if (o instanceof Number)   return ((Number)o).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE; else   if (o instanceof String) {    int rtn=stringToBooleanValueEL(o.toString());    if (rtn == 1)     return Boolean.TRUE; else     if (rtn == 0)     return Boolean.FALSE; else {      double dbl=toDoubleValue(o.toString(),Double.NaN);      if (!Double.isNaN(dbl))       return toBooleanValue(dbl) ? Boolean.TRUE : Boolean.FALSE;    }  } else   if (o instanceof Castable) {    return ((Castable)o).castToBoolean(defaultValue);  } else   if (o instanceof ObjectWrap)   return toBoolean(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue); else   if (o == null)   return toBoolean("",defaultValue);  return defaultValue;}  }
class C{  public boolean isEnabled(){  return enabled && applicationInfo.enabled;}  }
class C{  private void render(ListItem item,Object data){  Listcell listcell=null;  int colIndex=0;  int rowIndex=item.getIndex();  WListbox table=null;  if (item.getListbox() instanceof WListbox) {    table=(WListbox)item.getListbox();  }  int colorCode=0;  if (table != null) {    colorCode=table.getColorCode(rowIndex);    if (colorCode < 0) {      item.setStyle("color: #FF0000; " + item.getStyle());    }  }  if (!(data instanceof List)) {    throw new IllegalArgumentException("A model element was not a list");  }  if (listBox == null || listBox != item.getListbox()) {    listBox=item.getListbox();  }  if (cellListener == null) {    cellListener=new CellListener();  }  for (  Object field : (List<?>)data) {    listcell=getCellComponent(table,field,rowIndex,colIndex);    listcell.setParent(item);    listcell.addEventListener(Events.ON_DOUBLE_CLICK,cellListener);    listcell.setAttribute("zk_component_ID","ListItem_R" + rowIndex + "_C"+ colIndex);    colIndex++;  }  return;}  }
class C{  public static String joinParas(Map<String,String> parasMap){  if (parasMap == null || parasMap.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  Iterator<Map.Entry<String,String>> ite=parasMap.entrySet().iterator();  while (ite.hasNext()) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();    paras.append(entry.getKey()).append(EQUAL_SIGN).append(entry.getValue());    if (ite.hasNext()) {      paras.append(PARAMETERS_SEPARATOR);    }  }  return paras.toString();}  }
class C{  public void addRestriction(String ColumnName,String Operator,int Code){  Restriction r=new Restriction(ColumnName,Operator,new Integer(Code),null,null,true,0);  m_list.add(r);}  }
class C{  public static String pojoClassToString(final PojoClass pojoClass,final Object instance){  return String.format(POJOCLASS_TOSTRING_FORMAT,pojoClass.getName(),Integer.toHexString(System.identityHashCode(instance)),PojoFieldsToString(pojoClass.getPojoFields(),instance));}  }
class C{  public int limit(){  return _buf.limit();}  }
class C{  public synchronized UDAudio reset(){  final MediaPlayer player=getMediaPlayer();  if (player != null) {    try {      player.reset();    } catch (    Exception e) {      e.printStackTrace();    }  }  return this;}  }
class C{  private void validateUniqueAttribute(String entityType,String attributeName) throws AtlasException {  ClassType type=typeSystem.getDataType(ClassType.class,entityType);  AttributeInfo attribute=type.fieldMapping().fields.get(attributeName);  if (!attribute.isUnique) {    throw new IllegalArgumentException(String.format("%s.%s is not a unique attribute",entityType,attributeName));  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public void curve(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4){  g.curve(x1,y1,x2,y2,x3,y3,x4,y4);}  }
class C{  public void onReceive(Object message) throws Exception {  if (message instanceof TaskRedriverDetails && ((TaskRedriverDetails)message).getAction().equals(TaskRedriverDetails.RegisterAction.Redrive)) {    Long taskId=((TaskRedriverDetails)message).getTaskId();    fluxRuntimeConnector.redriveTask(taskId);  } else {    logger.error("Redriver Task Worker received a message that it cannot process (or) a non-redriver action. Message type received is : {}",message.getClass().getName());    unhandled(message);  }}  }
class C{  public void addGenerator(GenericClass target,GenericAccessibleObject<?> call){  if (!generators.containsKey(target))   generators.put(target,new LinkedHashSet<GenericAccessibleObject<?>>());  logger.debug("Adding generator for class " + target + ": "+ call);  generators.get(target).add(call);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.488 -0500",hash_original_method="8916849FEAA1058F51E2B631594FEB81",hash_generated_method="CBEF0068B01DA9E71E94F4AC651103D9") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int turn() throws IOException {  return sendCommand(SMTPCommand.TURN);}  }
class C{  public ClasspathPath(FilesystemPath root,String userPath,String path){  super(root,userPath,path);  if (_root == null)   _root=this;}  }
class C{  @Override public String toString(){  final StringBuffer nodeString=new StringBuffer();  for (  final Instruction instruction : m_instructions) {    nodeString.append(instruction.toString());    nodeString.append('\n');  }  return nodeString.toString();}  }
class C{  public JPaymentCashPos(JPaymentNotifier notifier,DataLogicSystem dlSystem){  m_notifier=notifier;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);  priceWith00=("true".equals(AppConfig.getInstance().getProperty("till.pricewith00")));  if (priceWith00) {    m_jKeys.dotIs00(true);  }  String code=dlSystem.getResourceAsXML("payment.cash");  if (code != null) {    try {      ScriptEngine script=ScriptFactory.getScriptEngine(ScriptFactory.BEANSHELL);      script.put("payment",new ScriptPaymentCash(dlSystem));      script.eval(code);    } catch (    ScriptException e) {      MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString("message.cannotexecute"),e);      msg.show(this);    }  }}  }
class C{  public static void surfaceSqlException(SQLException e){  boolean chained=false;  String loggerMsg;  while (e != null) {    if (chained) {      loggerMsg=String.format("Next in SQLException chain:  State=%s, ErrorCode=%d, Message=(%s)\n%s",e.getSQLState(),e.getErrorCode(),e.getMessage(),stackTraceToString(e));    } else {      loggerMsg=String.format("SQLException:  State=%s, ErrorCode=%d, Message=(%s)\n%s",e.getSQLState(),e.getErrorCode(),e.getMessage(),stackTraceToString(e));      chained=true;    }    e=e.getNextException();    logger.error(loggerMsg);  }}  }
class C{  public void append(ResultEntry entry) throws IOException {  numberOfEntries++;  List<Solution> feasibleSolutions=new ArrayList<Solution>();  for (  Solution solution : entry.getPopulation()) {    if (!solution.violatesConstraints()) {      feasibleSolutions.add(solution);    }  }  Properties properties=entry.getProperties();  if (feasibleSolutions.isEmpty() && ((properties == null) || (properties.isEmpty()))) {    writer.println("//");  }  if ((properties != null) && !properties.isEmpty()) {    printProperties(properties);  }  if (!feasibleSolutions.isEmpty()) {    for (    Solution solution : feasibleSolutions) {      printSolution(solution);    }  }  writer.println('#');}  }
class C{  private void addCountsSimRealPerHourGraphs(final FolderType folder,final int timestep,final TimeSpanType timespan){  try {    String filenameBoard=getSimRealGraphName(PtCountsType.Boarding,timestep), filenameAlight=getSimRealGraphName(PtCountsType.Alighting,timestep), filenameOccupancy=getSimRealGraphName(PtCountsType.Occupancy,timestep);    PtCountsSimRealPerHourGraph graphBoard=new PtCountsSimRealPerHourGraph(this.boardCountComparisonFilter.getCountsForHour(null),this.iter,filenameBoard,PtCountsType.Boarding), graphAlight=new PtCountsSimRealPerHourGraph(this.alightCountComparisonFilter.getCountsForHour(null),this.iter,filenameAlight,PtCountsType.Alighting), graphOccupancy=new PtCountsSimRealPerHourGraph(this.occupancyCountComparisonFilter.getCountsForHour(null),this.iter,filenameOccupancy,PtCountsType.Occupancy);    graphBoard.createChart(timestep);    this.writeChartToKmz(filenameBoard,graphBoard.getChart());    addGraph2Screen(filenameBoard,graphBoard.getChartTitle(),timespan,folder,1,1,0.98,0.98);    graphAlight.createChart(timestep);    this.writeChartToKmz(filenameAlight,graphAlight.getChart());    addGraph2Screen(filenameAlight,graphAlight.getChartTitle(),timespan,folder,1,0.75,0.98,0.73);    graphOccupancy.createChart(timestep);    this.writeChartToKmz(filenameOccupancy,graphOccupancy.getChart());    addGraph2Screen(filenameOccupancy,graphOccupancy.getChartTitle(),timespan,folder,1,0.5,0.98,0.48);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static int[][] MCSCE1contingencyTable(boolean useTrainingData,GEPIndividual ind,double bestValueThreshold,double secondBestValueThreshold){  int classWithTheMaximumPredictedValue;  int classWithTheSecondBestPredictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues();  int numberOfObjects=dvValues.length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int mi_ContingencyTable[][]=new int[numberOfClasses][numberOfClasses + 1];  double maximumPredictedValue, secondBestPredictedvalue, value;  double dependentVar[];  double md_ExpectedValues[][]=new double[numberOfObjects][numberOfClasses];  if (bestValueThreshold < secondBestValueThreshold)   System.err.println("Error: MCSCE1 -- first threshold value must be less than the second.");  for (int j=0; j < numberOfClasses; j++) {    dependentVar=dv.getDependentVariableValues(j);    for (int i=0; i < numberOfObjects; i++)     md_ExpectedValues[i][j]=dependentVar[i];  }  for (int i=0; i < numberOfObjects; i++) {    int expectedClass=0;    classWithTheMaximumPredictedValue=0;    maximumPredictedValue=ind.eval(classWithTheMaximumPredictedValue,useTrainingData,i);    secondBestPredictedvalue=maximumPredictedValue;    double maximumExpectedValue=md_ExpectedValues[i][expectedClass];    if (Double.isNaN(maximumPredictedValue)) {      for (int ii=0; ii < numberOfClasses; ii++)       mi_ContingencyTable[ii][ii]=0;      return mi_ContingencyTable;    }    for (int j=1; j < numberOfClasses; j++) {      value=md_ExpectedValues[i][j];      if (value > maximumExpectedValue) {        maximumExpectedValue=value;        expectedClass=j;      }      value=ind.eval(j,useTrainingData,i);      if (Double.isNaN(value)) {        for (int ii=0; ii < numberOfClasses; ii++)         mi_ContingencyTable[ii][ii]=0;        return mi_ContingencyTable;      }      if (value > maximumPredictedValue) {        secondBestPredictedvalue=maximumPredictedValue;        classWithTheSecondBestPredictedValue=classWithTheMaximumPredictedValue;        maximumPredictedValue=value;        classWithTheMaximumPredictedValue=j;      }    }    if ((maximumPredictedValue >= bestValueThreshold) && (secondBestPredictedvalue <= secondBestValueThreshold) && (maximumPredictedValue != secondBestPredictedvalue))     ++(mi_ContingencyTable[expectedClass][classWithTheMaximumPredictedValue]); else     ++(mi_ContingencyTable[expectedClass][numberOfClasses]);  }  return mi_ContingencyTable;}  }
class C{  public boolean userCanMoveUser(int connectedUserId,int UserId,int dstDeptId,String entidad) throws Exception {  boolean can=false;  int parentId=Defs.NULL_ID;  int deptMgrId=Defs.NULL_ID;  int dstMgrId=Defs.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    dstMgrId=getDeptMgrId(dstDeptId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,deptMgrId,dstMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static UnaryExpression isNotNull(String propertyName){  return new UnaryExpression(Operator.NOT_NULL,propertyName);}  }
class C{  private void sortTransportsToLoad(final List<Unit> transports,final Route route){  if (transports.isEmpty()) {    return;  }  Collections.sort(transports,UnitComparator.getLoadableTransportsComparator(transports,route,getUnitOwner(transports)));}  }
class C{  public final Object returnInstanceToRun(final Operation operation,final Map<String,Object> keyMap,int index) throws BaseCollectionException, IllegalAccessException, InvocationTargetException {  Object instanceToReturn=null;  if (operation.getInstance() instanceof Argument) {    Argument instanceArg=(Argument)operation.getInstance();    final Object[] inputArgs={instanceArg,keyMap,index};    final Object instance=instanceArg.getCreator();    final Method method=getMethod(operation,instanceArg.getMethod(),instance,Util.ENDPOINTS.ARGUMENT.toString());    instanceToReturn=method.invoke(instanceArg.getCreator(),inputArgs);  } else {    instanceToReturn=operation.getInstance();  }  return instanceToReturn;}  }
class C{  Deque<Block> schedule(Block entry){  Deque<Block> code=dfs(entry);  Deque<Block> scheduled=new ArrayDeque<Block>();  SetMap<Block,Edge> pred=preds(code);  Map<Block,Block> idom=idoms(code,pred);  EdgeMap<Block> loops=findLoops(code,idom,pred);  if (!loops.isEmpty())   verboseStatus("LOOPS " + loops);  for (  Block b : code) {    if (!scheduled.contains(b))     scheduled.add(b);    if (loops.containsKey(b))     schedule_loop(b,loops,scheduled);  }  Deque<Block> branch_analysis=new ArrayDeque<Block>();  branch_analysis.addAll(scheduled);  Set<Block> already_seen=new HashSet<Block>();  while (branch_analysis.size() > 1) {    Block b=branch_analysis.removeFirst();    Expr last=b.last();    Block next=branch_analysis.peekFirst();    if (isBranch(last) && last.succ[0].to != next && last.succ[1].to == next)     invert(last);    already_seen.add(b);    b.is_backwards_branch_target=false;    for (    Edge s : b.succ()) {      s.to.is_backwards_branch_target|=s.is_backwards_branch=already_seen.contains(s.to);    }  }  if (verbose_mode)   for (  Block b : code)   if (b.is_backwards_branch_target)   verboseStatus(".. backwards branch target:" + b);  return scheduled;}  }
class C{  public void stop(){  debug("pre: stop");  m_Stopping=true;  m_Initializing=false;  m_Running=false;  notifyExecutionStageListeners(ExecutionStageEvent.Stage.STOPPING);  m_Evaluator.stop();  debug("post: stop");}  }
class C{  public MinkowskiDistance(){  super();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("properties") @Valid Properties properties,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    Process parentProcess=processDAO.get(properties.getProcessId());    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(properties.getProcessId(),principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Properties updateProperties=new com.wipro.ats.bdre.md.dao.jpa.Properties();    PropertiesId propertiesId=new PropertiesId();    propertiesId.setPropKey(properties.getKey());    propertiesId.setProcessId(properties.getProcessId());    updateProperties.setId(propertiesId);    Process process=new Process();    process.setProcessId(properties.getProcessId());    updateProperties.setProcess(process);    updateProperties.setConfigGroup(properties.getConfigGroup());    updateProperties.setPropValue(properties.getValue());    updateProperties.setDescription(properties.getDescription());    propertiesDAO.update(updateProperties);    restWrapper=new RestWrapper(properties,RestWrapper.OK);    LOGGER.info("Record with ID:" + properties.getProcessId() + " updated in Properties by User:"+ principal.getName()+ properties);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private static void addFieldValues(CatalogServiceRestRep service,Collection<? extends ServiceItemRestRep> items,Map<String,String> values,Map<String,String> locked){  for (  ServiceItemRestRep item : items) {    if (item instanceof ServiceFieldTableRestRep) {      addColumnValues(service,(ServiceFieldTableRestRep)item,values,locked);    } else     if (item instanceof ServiceFieldGroupRestRep) {      addFieldValues(service,((ServiceFieldGroupRestRep)item).getItems(),values,locked);    } else     if (item instanceof ServiceFieldRestRep) {      ServiceFieldRestRep field=(ServiceFieldRestRep)item;      String value=getFieldValue(field);      if (locked.containsKey(field.getName())) {        value=locked.get(field.getName());      }      if (value != null) {        values.put(field.getName(),value);      }      List<String> fieldValues=TextUtils.parseCSV(value);      if (fieldValues.isEmpty() && field.isRequired()) {        Validation.required(field.getName(),null);      }      for (      String fieldValue : fieldValues) {        ServiceFieldValidator.validateField(service,field,fieldValue);      }    }  }}  }
class C{  public KMLPair(String namespaceURI){  super(namespaceURI);}  }
class C{  @SuppressWarnings("resource") @Override public void writeMap(File file,OsmMap mapData,BoundingBox bb){  try {    OutputStream os=new BufferedOutputStream(new FileOutputStream(file));    if (compressorClass != null && file.getName().endsWith(".bz2")) {      Constructor<?> c=compressorClass.getConstructor(new Class[]{OutputStream.class});      os=(OutputStream)c.newInstance(os);    }    OutputStreamWriter writer=new OutputStreamWriter(os,"UTF-8");    writeMap(writer,mapData,bb);  } catch (  FileNotFoundException e) {    LOG.warning("File does not exist " + file);  }catch (  InvocationTargetException e) {    LOG.warning("The map could not be read. Possibly unpacking problem. " + e);  }catch (  Exception e) {    LOG.warning("The map could not be read. " + e);  }}  }
class C{  boolean nextRead(){  if (log.isDebugEnabled()) {    log.debug("nextRead scans " + varList.size() + " variables");  }  while ((varList.size() > 0) && (varListIndex < varList.size())) {    int varNum=varList.get(varListIndex).intValue();    int vState=_varModel.getState(varNum);    VariableValue var=_varModel.getVariable(varNum);    if (log.isDebugEnabled()) {      log.debug("nextRead var index " + varNum + " state "+ VariableValue.stateNameFromValue(vState)+ " isToRead: "+ var.isToRead()+ " label: "+ var.label());    }    varListIndex++;    if (var.isToRead()) {      if (log.isDebugEnabled()) {        log.debug("start read of variable " + _varModel.getLabel(varNum));      }      executeRead(var);      if (log.isDebugEnabled()) {        log.debug("return from starting var read");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug("nextRead scans " + cvList.size() + " CVs");  }  while (cvListIterator != null && cvListIterator.hasNext()) {    int cvNum=cvListIterator.next();    CvValue cv=_cvModel.getCvByRow(cvNum);    if (log.isDebugEnabled()) {      log.debug("nextRead cv index " + cvNum + " state "+ cv.getState());    }    if (cv.isToRead()) {      if (log.isDebugEnabled()) {        log.debug("start read of cv " + cvNum);      }      setBusy(true);      if (_programmingCV != null) {        log.error("listener already set at read start");      }      _programmingCV=_cvModel.getCvByRow(cvNum);      _read=true;      _programmingCV.addPropertyChangeListener(this);      _programmingCV.read(_cvModel.getStatusLabel());      if (log.isDebugEnabled()) {        log.debug("return from starting CV read");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug("nextRead scans " + indexedCvList.size() + " indexed CVs");  }  while ((indexedCvList.size() > 0) && (indexedCvListIndex < indexedCvList.size())) {    int indxVarNum=indexedCvList.get(indexedCvListIndex).intValue();    int indxState=_varModel.getState(indxVarNum);    if (log.isDebugEnabled()) {      log.debug("nextRead indexed cv @ row index " + indexedCvListIndex + " state "+ indxState);    }    VariableValue iCv=_varModel.getVariable(indxVarNum);    indexedCvListIndex++;    if (iCv.isToRead()) {      String sz="start read of indexed cv " + (_indexedCvModel.getCvByRow(indexedCvListIndex - 1)).cvName();      if (log.isDebugEnabled()) {        log.debug(sz);      }      setBusy(true);      if (_programmingIndexedCV != null) {        log.error("listener already set at read start");      }      _programmingIndexedCV=_varModel.getVariable(indxVarNum);      _read=true;      _programmingIndexedCV.addPropertyChangeListener(this);      _programmingIndexedCV.readAll();      if (log.isDebugEnabled()) {        log.debug("return from starting indexed CV read");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug("nextRead found nothing to do");  }  readChangesButton.setSelected(false);  readAllButton.setSelected(false);  setBusy(false);  container.paneFinished();  return false;}  }
class C{  static public long count(File path){  int result=0;  if (path.exists()) {    if (path.isDirectory()) {      File[] files=path.listFiles();      if (files != null)       for (int i=0; i < files.length; i++) {        result+=count(files[i]);      }    }    result++;  }  return result;}  }
class C{  public static String pathNodesToString(ArrayList<PathParser.PathDataNode> nodes,boolean onlyCommands){  DecimalFormat floatFormatter=new DecimalFormat("###.#########");  StringBuilder sb=new StringBuilder();  for (  PathParser.PathDataNode n : nodes) {    sb.append(n.type);    sb.append(' ');    if (!onlyCommands) {      for (      float p : n.params) {        if (("" + p).contains("e") || ("" + p).contains("E")) {          sb.append(floatFormatter.format(p));        } else {          sb.append(p);        }        sb.append(',');      }      sb.replace(sb.length() - 1,sb.length()," ");    }  }  return sb.toString();}  }
class C{  private boolean isAuthorized(String lwM2mEndPointName,Identity clientIdentity){  SecurityInfo expectedSecurityInfo=securityStore.getByEndpoint(lwM2mEndPointName);  return SecurityCheck.checkSecurityInfo(lwM2mEndPointName,clientIdentity,expectedSecurityInfo);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.965 -0500",hash_original_method="A3AFC4271D337C51C9B090DAD80C0547",hash_generated_method="66D44934BBD9D417F0DC3C1EA648ECE2") protected boolean scrollUp(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY();  int topLine=layout.getLineForVertical(top);  if (layout.getLineTop(topLine) == top) {    topLine-=1;  }  if (topLine >= 0) {    topLine=Math.max(topLine - amount + 1,0);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public JCExpression ClassLiteral(ClassSymbol clazz){  return ClassLiteral(clazz.type);}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  public JStackPanel(final IStackModel model){  super(new BorderLayout());  Preconditions.checkNotNull(model,"Error: Model argument can not be null");  m_model=model;  m_model.addListener(m_listener);  setFocusable(true);  setFont(m_font);  setPreferredSize(new Dimension(400,400));}  }
class C{  protected boolean isPotentialBeanType(Class<?> type){  return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type);}  }
class C{  public void startMessagingActivity(Context context){  startMessagingActivity(context,null);}  }
class C{  private final void processMainRequest(){  sender=getSender();  startTimeMillis=System.currentTimeMillis();  timeoutDuration=Duration.create(request.getActorMaxOperationTimeoutSec(),TimeUnit.SECONDS);  actorMaxOperationTimeoutSec=request.getActorMaxOperationTimeoutSec();  if (request.getProtocol() == RequestProtocol.HTTP || request.getProtocol() == RequestProtocol.HTTPS) {    String urlComplete=String.format("%s://%s:%d%s",request.getProtocol().toString(),trueTargetNode,request.getPort(),request.getResourcePath());    if (!PcHttpUtils.isUrlValid(urlComplete.trim())) {      String errMsg="INVALID_URL";      logger.error("INVALID_URL: " + urlComplete + " return..");      replyErrors(errMsg,errMsg,PcConstants.NA,PcConstants.NA_INT);      return;    } else {      logger.debug("url pass validation: " + urlComplete);    }    asyncWorker=getContext().actorOf(Props.create(HttpWorker.class,actorMaxOperationTimeoutSec,client,urlComplete,request.getHttpMethod(),request.getPostData(),request.getHttpHeaderMap(),request.getResponseHeaderMeta()));  } else   if (request.getProtocol() == RequestProtocol.SSH) {    asyncWorker=getContext().actorOf(Props.create(SshWorker.class,actorMaxOperationTimeoutSec,request.getSshMeta(),trueTargetNode));  } else   if (request.getProtocol() == RequestProtocol.TCP) {    asyncWorker=getContext().actorOf(Props.create(TcpWorker.class,actorMaxOperationTimeoutSec,request.getTcpMeta(),trueTargetNode));  } else   if (request.getProtocol() == RequestProtocol.UDP) {    asyncWorker=getContext().actorOf(Props.create(UdpWorker.class,actorMaxOperationTimeoutSec,request.getUdpMeta(),trueTargetNode));  } else   if (request.getProtocol() == RequestProtocol.PING) {    asyncWorker=getContext().actorOf(Props.create(PingWorker.class,actorMaxOperationTimeoutSec,request.getPingMeta(),trueTargetNode));  }  asyncWorker.tell(RequestWorkerMsgType.PROCESS_REQUEST,getSelf());  cancelExistingIfAnyAndScheduleTimeoutCall();}  }
class C{  @Override protected void emit_fdiv(){  if (SSE2_BASE) {    asm.emitMOVSS_Reg_RegDisp(XMM0,SP,ONE_SLOT);    asm.emitDIVSS_Reg_RegInd(XMM0,SP);    adjustStack(WORDSIZE,true);    asm.emitMOVSS_RegInd_Reg(SP,XMM0);  } else {    asm.emitFLD_Reg_RegDisp(FP0,SP,ONE_SLOT);    asm.emitFDIV_Reg_RegInd(FP0,SP);    adjustStack(WORDSIZE,true);    asm.emitFSTP_RegInd_Reg(SP,FP0);  }}  }
class C{  protected final void INT_TO_LONG_MUL(Instruction s,RegisterOperand result,Operand value1,Operand value2,boolean signed){  if (value2.isConstant()) {    Operand temp=value1;    value1=value2;    value2=temp;  }  if (value1.isRegister()) {    RegisterOperand value1RO=value1.asRegister();    RegisterOperand lhsRO;    if (value1.getType().isLongType()) {      Register lhsReg=value1RO.getRegister();      Register lowlhsReg=regpool.getSecondReg(lhsReg);      lhsRO=new RegisterOperand(lowlhsReg,TypeReference.Int);    } else {      if (VM.VerifyAssertions)       VM._assert(value1.getType().isIntType());      lhsRO=value1RO.copyRO();    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),lhsRO)));  } else {    if (VM.VerifyAssertions)     VM._assert(value1.isConstant());    int lhsVal;    if (value1.isIntConstant()) {      lhsVal=value1.asIntConstant().value;    } else {      if (VM.VerifyAssertions)       VM._assert(value1.isLongConstant());      lhsVal=value1.asLongConstant().lower32();    }    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(lhsVal))));  }  if (VM.VerifyAssertions)   VM._assert(value2.isRegister());  RegisterOperand value2RO=value2.asRegister();  Register rhsReg=value2RO.getRegister();  Register lowrhsReg;  if (rhsReg.isLong()) {    lowrhsReg=regpool.getSecondReg(rhsReg);  } else {    if (VM.VerifyAssertions)     VM._assert(rhsReg.isInteger());    lowrhsReg=rhsReg;  }  EMIT(MIR_Multiply.mutate(s,signed ? IA32_IMUL1 : IA32_MUL,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowrhsReg,TypeReference.Int)));  Register resultReg=result.getRegister();  Register lowresultReg=regpool.getSecondReg(resultReg);  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowresultReg,TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(resultReg,TypeReference.Int),new RegisterOperand(getEDX(),TypeReference.Int))));}  }
class C{  public ResponseWriter cloneWithWriter(Writer writer){  try {    return new CustomResponseWriter(writer,getContentType(),getCharacterEncoding());  } catch (  FacesException e) {    throw new IllegalStateException();  }}  }
class C{  public boolean supportExtension(String s){  return extensions.contains(s);}  }
class C{  @Override public void addLifecycleListener(LifecycleListener listener){  lifecycle.addLifecycleListener(listener);}  }
class C{  public DrawerBuilder withOnDrawerItemLongClickListener(@NonNull Drawer.OnDrawerItemLongClickListener onDrawerItemLongClickListener){  this.mOnDrawerItemLongClickListener=onDrawerItemLongClickListener;  return this;}  }
class C{  public void post(Runnable runnable){  post(runnable,0);}  }
class C{  public JdbcConnection(final Connection conn){  this.setConnection(conn);}  }
class C{  public CouldntDeleteException(final Exception exception){  super(exception);}  }
class C{  private static void checkForShutdown(){  if (_shutdownImminent && _uploadsComplete && _downloadsComplete) {    GUIMediator.shutdown();  }}  }
class C{  public KMLLatLonAltBox(String namespaceURI){  super(namespaceURI);}  }
class C{  private void mergeMethods(TypeWithMethods base,TypeWithMethods given,Events events){  for (  MethodType givenMethod : given.getMethods()) {    if (base.getMethods().contains(givenMethod)) {      for (      MethodType baseMethod : base.getMethods()) {        if (!baseMethod.equals(givenMethod)) {          continue;        }        boolean changed=false;        for (        AnnotationType a : findNewEntries(baseMethod.getAnnotations(),givenMethod.getAnnotations())) {          changed=true;          baseMethod.addAnnotation(getOrAddReferredType(a,events,AnnotationType.class));        }        for (        ClassType a : findNewEntries(baseMethod.getExceptions(),givenMethod.getExceptions())) {          changed=true;          baseMethod.addException(getOrAddReferredType(a,events,ClassType.class));        }        if (mergeModifiers(baseMethod,givenMethod)) {          changed=true;        }        if (changed) {          fireAndSave(new NodeEvent(base,NodeEventType.CHANGED,NodeEventDetails.METHOD_CHANGED_OR_ADDED),events);        }        break;      }    } else {      fireAndSave(new NodeEvent(base,NodeEventType.CHANGED,NodeEventDetails.METHOD_CHANGED_OR_ADDED),events);      base.addMethod(resolveMethodReferences(givenMethod,events));    }  }}  }
class C{  public static Class toClass(ClassFile cf,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  try {    byte[] b=toBytecode(cf);    Method method;    Object[] args;    if (domain == null) {      method=defineClass1;      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length)};    } else {      method=defineClass2;      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length),domain};    }    return toClass2(method,loader,args);  } catch (  RuntimeException e) {    throw e;  }catch (  java.lang.reflect.InvocationTargetException e) {    throw new CannotCompileException(e.getTargetException());  }catch (  Exception e) {    throw new CannotCompileException(e);  }}  }
class C{  public KnowledgeWorkbench(KnowledgeGraph graph){  super(graph);  setNodeEdgeErrorsReported(true);  setRightClickPopupAllowed(false);  this.setAllowEdgeReorientations(false);}  }
class C{  static final LinkedVertexHull mergePointPoint(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertex leftRoot=left.root;  LinkedVertex rightRoot=right.root;  leftRoot.next=rightRoot;  leftRoot.prev=rightRoot;  rightRoot.next=leftRoot;  rightRoot.prev=leftRoot;  LinkedVertexHull hull=new LinkedVertexHull();  hull.root=leftRoot;  hull.leftMost=leftRoot;  hull.rightMost=rightRoot;  hull.size=2;  return hull;}  }
class C{  public KMLRegion peekRegion(){  return this.regionStack.peek();}  }
class C{  @Override public boolean locationIsLeg(int loc){  return (loc == LOC_LLEG) || (loc == LOC_RLEG) || (loc == LOC_CLEG);}  }
class C{  private void pushTaskToContext(ServletContext sc,Future<Map<Class<? extends Annotation>,Set<Class<?>>>> scanTask){  sc.setAttribute(ANNOTATIONS_SCAN_TASK_KEY,scanTask);}  }
class C{  public static float minY(final CGRect aRect){  return aRect.origin.y;}  }
class C{  public BurlapProtocolException(String message){  super(message);}  }
class C{  public void release() throws InterruptedException {  manager.removeAndReleaseAll(false);}  }
class C{  private int maxDepth(TreeNode root){  if (root == null)   return 0;  int left=maxDepth(root.left);  int right=maxDepth(root.right);  return Math.max(left,right) + 1;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  private void updateDesiredPreviewSize(){  if (mCameraDevice == null) {    return;  }  mCameraSettings=mCameraDevice.getSettings();  Point desiredPreviewSize=getDesiredPreviewSize(mCameraCapabilities,mProfile,mUI.getPreviewScreenSize());  mDesiredPreviewWidth=desiredPreviewSize.x;  mDesiredPreviewHeight=desiredPreviewSize.y;  mUI.setPreviewSize(mDesiredPreviewWidth,mDesiredPreviewHeight);  Log.v(TAG,"Updated DesiredPreview=" + mDesiredPreviewWidth + "x"+ mDesiredPreviewHeight);}  }
class C{  public Period minusMillis(int millis){  return plusMillis(-millis);}  }
class C{  private Instances(){}  }
class C{  public static DeleteAgentTaskService.State buildValidStartupState(@Nullable TaskState.TaskStage startStage){  DeleteAgentTaskService.State startState=new DeleteAgentTaskService.State();  startState.hostServiceLink="hostServiceLink";  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  if (null != startStage) {    startState.taskState=new TaskState();    startState.taskState.stage=startStage;  }  return startState;}  }
class C{  public static String encode(final byte b){  return "b" + Byte.toString(b) + "|";}  }
class C{  public void join(){synchronized (this) {    isAlive=false;    notifyAll();  }  Thread[] threads=new Thread[activeCount()];  int count=enumerate(threads);  for (int i=0; i < count; i++) {    try {      threads[i].join();    } catch (    InterruptedException ex) {    }  }}  }
class C{  public void unregisterClientInterest(String regionName,Object keyOfInterest,int interestType,boolean isClosing,ClientProxyMembershipID membershipID,boolean keepalive){  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Client {} unregistering interest in: {} -> {} (an instance of {})",membershipID,regionName,keyOfInterest,keyOfInterest.getClass().getName());  }  CacheClientProxy proxy=getClientProxy(membershipID);  if (proxy != null) {    proxy.setKeepAlive(keepalive);    proxy.unregisterClientInterest(regionName,keyOfInterest,interestType,isClosing);  }}  }
class C{  public void rotateWay(final Way way,final float angle,final int direction,final float pivotX,final float pivotY,int w,int h,BoundingBox v){  if (way.getNodes() == null) {    Log.d("StorageDelegator","rotateWay way " + way.getOsmId() + " has no nodes!");    return;  }  dirty=true;  try {    HashSet<Node> nodes=new HashSet<Node>(way.getNodes());    for (    Node nd : nodes) {      undo.save(nd);      apiStorage.insertElementSafe(nd);      float nodeX=GeoMath.lonE7ToX(w,v,nd.getLon());      float nodeY=GeoMath.latE7ToY(h,w,v,nd.getLat());      float newX=pivotX + (nodeX - pivotX) * (float)Math.cos(angle) - direction * (nodeY - pivotY) * (float)Math.sin(angle);      float newY=pivotY + direction * (nodeX - pivotX) * (float)Math.sin(angle) + (nodeY - pivotY) * (float)Math.cos(angle);      int lat=GeoMath.yToLatE7(h,w,v,newY);      int lon=GeoMath.xToLonE7(w,v,newX);      nd.setLat(lat);      nd.setLon(lon);      nd.updateState(OsmElement.STATE_MODIFIED);    }    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public boolean __lt__(final Object rhs){  return getBigInteger(this).compareTo(getBigInteger(rhs)) < 0;}  }
class C{  public static ClusterStateRequest clusterStateRequest(){  return new ClusterStateRequest();}  }
class C{  protected GlowLivingEntity(Location location,double maxHealth){  super(location);  attributeManager=new AttributeManager(this);  this.maxHealth=maxHealth;  attributeManager.setProperty(Key.KEY_MAX_HEALTH,maxHealth);  health=maxHealth;}  }
class C{  public EcuCodeItem(int numericCode,String description){  put(FID_CODE,String.valueOf(numericCode));  put(FID_DESCRIPT,description);}  }
class C{  public <V>HashMap<String,V> newStringMap(){  return dbSettings.databaseToUpper ? new HashMap<String,V>() : new CaseInsensitiveMap<V>();}  }
class C{  public ComponentBuilder bold(boolean bold){  current.setBold(bold);  return this;}  }
class C{  public Iterator<String> parameterSignatureIterator(){  return new ParameterSignatureIterator();}  }
class C{  private void newHelper(Instruction s,BasicBlock b){}  }
class C{  public ToParentBlockJoinCollector(Sort sort,int numParentHits,boolean trackScores,boolean trackMaxScore) throws IOException {  this.sort=sort;  this.trackMaxScore=trackMaxScore;  if (trackMaxScore) {    maxScore=Float.MIN_VALUE;  }  this.trackScores=trackScores;  this.numParentHits=numParentHits;  queue=FieldValueHitQueue.create(sort.getSort(),numParentHits);  comparators=queue.getComparators();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  String n=getString(stack);  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return Boolean.FALSE;  return Boolean.valueOf(Sage.writeDwordValue(Sage.getHKEYForName(r),k,n,v));}  }
class C{  private AuthnStatement createAuthnStatement(AuthenticationData authnData){  assert authnData != null;  DateTime authnInstantTime=new DateTime(authnData.getAuthnTime());  assert authnInstantTime != null;  AuthnStatement authnStatement=new AuthnStatementBuilder().buildObject();  authnStatement.setAuthnInstant(authnInstantTime);  if (authnData.getSessionIndex() != null) {    authnStatement.setSessionIndex(authnData.getSessionIndex());  }  AuthnContext authnContext=new AuthnContextBuilder().buildObject();  AuthnContextClassRef authnContextClassRef=new AuthnContextClassRefBuilder().buildObject();  authnContextClassRef.setAuthnContextClassRef(getAuthnMethod(authnData));  authnContext.setAuthnContextClassRef(authnContextClassRef);  authnStatement.setAuthnContext(authnContext);  Date sessionExpiredate=authnData.getSessionExpireDate();  if (sessionExpiredate != null) {    DateTime expireDateTime=new DateTime(sessionExpiredate);    authnStatement.setSessionNotOnOrAfter(expireDateTime);  }  return authnStatement;}  }
class C{  public b addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Iterator<Map.Entry<K,V>> i=(size > 0) ? entrySet0().iterator() : null;  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(size);  if (i != null) {    while (i.hasNext()) {      Map.Entry<K,V> e=i.next();      s.writeObject(e.getKey());      s.writeObject(e.getValue());    }  }}  }
class C{  private void validateMultiplePartitionedRegions(VM vm0,VM vm1,VM vm2,VM vm3,int startIndexForRegion,int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm0.invokeAsync(validateMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion));  async[1]=vm1.invokeAsync(validateMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion));  async[2]=vm2.invokeAsync(validateMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion));  async[3]=vm3.invokeAsync(validateMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  public static void reset(){  requestBody=null;  stubReturnValue=null;}  }
class C{  protected final void openSessionForPublish(String applicationId,List<String> permissions){  openSessionForPublish(applicationId,permissions,SessionLoginBehavior.SSO_WITH_FALLBACK,Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final AbstractDirectoryEntry that=(AbstractDirectoryEntry)o;  return id == that.id;}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public void test_DELETE_accessPath_delete_s() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(new URIImpl("http://www.bigdata.com/Mike"),null,null);  assertEquals(3,mutationResult);}  }
class C{  public static Float convertFontWeight(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.FONT_WEIGHT_INDEX);  float f=v.getFloatValue();switch ((int)f) {case 100:    return TextAttribute.WEIGHT_EXTRA_LIGHT;case 200:  return TextAttribute.WEIGHT_LIGHT;case 300:return TextAttribute.WEIGHT_DEMILIGHT;case 400:return TextAttribute.WEIGHT_REGULAR;case 500:return TextAttribute.WEIGHT_SEMIBOLD;default :return TextAttribute.WEIGHT_BOLD;}}  }
class C{  public NondominatedSorting(){  this(new ParetoDominanceComparator());}  }
class C{  public int[] fractionPlaceGroups(){  Object[] boxedArray=decimalGroups.toArray();  int len=boxedArray.length + 1;  int[] array=new int[len];  array[0]=minimumFractionDigits;  for (int i=1; i < len; i++) {    array[i]=(Integer)boxedArray[i - 1];  }  return array;}  }
class C{  public static String toJson(Calendar cal){  return DEFAULT_GENERATOR.toJson(cal);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DATNode[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_type = ").append(m_type);  buffer.append("]");  return buffer.toString();}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public static URI applyParameters(URI uri,Map<String,String> queryParameters,String optionPrefix) throws URISyntaxException {  if (queryParameters != null && !queryParameters.isEmpty()) {    StringBuffer newQuery=uri.getRawQuery() != null ? new StringBuffer(uri.getRawQuery()) : new StringBuffer();    for (    Map.Entry<String,String> param : queryParameters.entrySet()) {      if (param.getKey().startsWith(optionPrefix)) {        if (newQuery.length() != 0) {          newQuery.append('&');        }        final String key=param.getKey().substring(optionPrefix.length());        newQuery.append(key).append('=').append(param.getValue());      }    }    uri=createURIWithQuery(uri,newQuery.toString());  }  return uri;}  }
class C{  public static CommandResult execute(Command command,long timeout,TimeUnit timeUnit) throws IOException, CommandTimeoutException {  return execute(command,CommandContext.defaultContext(),timeout,timeUnit);}  }
class C{  public void incUpdateRequest(){  this.stats.incInt(updateRequestId,1);}  }
class C{  public MutabilityControl(boolean mutable){  this.mutable=mutable;}  }
class C{  private static void throwLocationPermissionMissing(SecurityException e){  throw new SecurityException("Looks like the app doesn't have the permission to access location.\n" + "Add the following line to your app's AndroidManifest.xml:\n" + "<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />",e);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static RelationalOpExpression geProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),">=",new PropertyValueExpression(propertyRight));}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof Row))   return false;  Row<T> that=(Row<T>)obj;  if (est != that.est)   return false;  return true;}  }
class C{  public static boolean toBoolean(final String value){  return Boolean.valueOf(value).booleanValue();}  }
class C{  public void test_unwrap_ByteBuffer$ByteBuffer_01() throws IOException, InterruptedException {  prepareEngines();  doHandshake();  ByteBuffer bbs=ByteBuffer.allocate(100);  ByteBuffer bbd=ByteBuffer.allocate(100);  try {    clientEngine.engine.unwrap(bbs,new ByteBuffer[]{bbd});    fail("SSLException wasn't thrown");  } catch (  SSLException ex) {  }}  }
class C{  public void skipHDU(int n) throws FitsException, IOException {  for (int i=0; i < n; i+=1) {    skipHDU();  }}  }
class C{  public T caseDoStatement(DoStatement object){  return null;}  }
class C{  protected void cleanupSuspendState(DLockRequestMessage request){  postReleaseLock(request.getRemoteThread(),request.getObjectName());}  }
class C{  public synchronized void clearAnnotations(){  mStringXY.clear();}  }
class C{  public HttpResponse perform(final Method method,final String path,final HttpEntity payload) throws IOException {  try {    return performAsync(method,path,payload,null).get();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }catch (  ExecutionException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isOldNull(){  String value=getOldValue();  return value == null || value.equals(NULL);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.680 -0500",hash_original_method="E5AF799D5D5F28A5FEBFEE44EB734D28",hash_generated_method="10BF5CB2E01C600AD89E7CF99F3834F5") public static void shuffle(List<?> list){  shuffle(list,new Random());}  }
class C{  public Block[] corners(){  Block[] res=new Block[8];  World w=this.getWorld();  res[0]=w.getBlockAt(this.x1,this.y1,this.z1);  res[1]=w.getBlockAt(this.x1,this.y1,this.z2);  res[2]=w.getBlockAt(this.x1,this.y2,this.z1);  res[3]=w.getBlockAt(this.x1,this.y2,this.z2);  res[4]=w.getBlockAt(this.x2,this.y1,this.z1);  res[5]=w.getBlockAt(this.x2,this.y1,this.z2);  res[6]=w.getBlockAt(this.x2,this.y2,this.z1);  res[7]=w.getBlockAt(this.x2,this.y2,this.z2);  return res;}  }
class C{  @Override public void close() throws IOException {  closed=true;  def.end();  in.close();}  }
class C{  public String hostId(){  return hostId;}  }
class C{  public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double adjx=(this.dotWidth - 1) / 2.0;  double adjy=(this.dotHeight - 1) / 2.0;  if (!Double.isNaN(y)) {    RectangleEdge xAxisLocation=plot.getDomainAxisEdge();    RectangleEdge yAxisLocation=plot.getRangeAxisEdge();    double transX=domainAxis.valueToJava2D(x,dataArea,xAxisLocation) - adjx;    double transY=rangeAxis.valueToJava2D(y,dataArea,yAxisLocation) - adjy;    g2.setPaint(getItemPaint(series,item));    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      g2.fillRect((int)transY,(int)transX,this.dotHeight,this.dotWidth);    } else     if (orientation == PlotOrientation.VERTICAL) {      g2.fillRect((int)transX,(int)transY,this.dotWidth,this.dotHeight);    }    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);    PivotDataset pivotDataset=(PivotDataset)dataset;    if (null != pivotDataset.getPivotSide(series,item)) {      String ledgend="Pivot";      if (pivotDataset.getPivotSide(series,item).equals(Side.BOT)) {        drawPivotArrow(g2,plot,dataArea,domainAxis,rangeAxis,item,info,45d,x,pivotDataset.getPivotValue(series,item),ledgend);      } else {        drawPivotArrow(g2,plot,dataArea,domainAxis,rangeAxis,item,info,-45d,x,pivotDataset.getPivotValue(series,item),ledgend);      }    }  }}  }
class C{  public int lineno(){  return lineNumber;}  }
class C{  public boolean isStateActive(State state){switch (state) {case r1_R1A:    return stateVector[0] == State.r1_R1A;case r1_R1B:  return stateVector[0] == State.r1_R1B;case r2_R2A:return stateVector[1] == State.r2_R2A;case r2_R2B:return stateVector[1] == State.r2_R2B;default :return false;}}  }
class C{  public void onCancelAllRealtimeData(){  m_historyDataRequests.clear();  m_realTimeBarsRequests.clear();}  }
class C{  public LoadGameCommand(Server server){  super(server,"load","load a saved game from the savegames directory.  Usage: /load [filename]");}  }
class C{  public Vector3d mul(Matrix3fc mat){  return mul(mat,this);}  }
class C{  private JCTree findJumpTarget(DiagnosticPosition pos,JCTree.Tag tag,Name label,Env<AttrContext> env){  Env<AttrContext> env1=env;  LOOP:   while (env1 != null) {switch (env1.tree.getTag()) {case LABELLED:      JCLabeledStatement labelled=(JCLabeledStatement)env1.tree;    if (label == labelled.label) {      if (tag == CONTINUE) {        if (!labelled.body.hasTag(DOLOOP) && !labelled.body.hasTag(WHILELOOP) && !labelled.body.hasTag(FORLOOP)&& !labelled.body.hasTag(FOREACHLOOP))         log.error(pos,"not.loop.label",label);        return TreeInfo.referencedStatement(labelled);      } else {        return labelled;      }    }  break;case DOLOOP:case WHILELOOP:case FORLOOP:case FOREACHLOOP:if (label == null) return env1.tree;break;case SWITCH:if (label == null && tag == BREAK) return env1.tree;break;case LAMBDA:case METHODDEF:case CLASSDEF:break LOOP;default :}env1=env1.next;}if (label != null) log.error(pos,"undef.label",label); else if (tag == CONTINUE) log.error(pos,"cont.outside.loop"); else log.error(pos,"break.outside.switch.loop");return null;}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  Shape s0=modelToView(p0,a,b0);  Shape s1;  if (p1 == getEndOffset()) {    try {      s1=modelToView(p1,a,b1);    } catch (    BadLocationException ble) {      s1=null;    }    if (s1 == null) {      Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();      s1=new Rectangle(alloc.x + alloc.width - 1,alloc.y,1,alloc.height);    }  } else {    s1=modelToView(p1,a,b1);  }  Rectangle r0=s0.getBounds();  Rectangle r1=(s1 instanceof Rectangle) ? (Rectangle)s1 : s1.getBounds();  if (r0.y != r1.y) {    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    r0.x=alloc.x;    r0.width=alloc.width;  }  r0.add(r1);  if (p1 > p0)   r0.width-=r1.width;  return r0;}  }
class C{  public boolean evaluate(MWFActivity activity){  if (getAD_Column_ID() == 0)   throw new IllegalStateException("No Column defined - " + this);  PO po=activity.getPO();  if (po == null || po.get_ID() == 0)   throw new IllegalStateException("Could not evaluate " + po + " - "+ this);  Object valueObj=po.get_ValueOfColumn(getAD_Column_ID());  if (valueObj == null)   valueObj="";  String value1=getDecodedValue(getValue(),po);  if (value1 == null)   value1="";  String value2=getDecodedValue(getValue2(),po);  if (value2 == null)   value2="";  String resultStr="PO:{" + valueObj + "} "+ getOperation()+ " Condition:{"+ value1+ "}";  if (getOperation().equals(OPERATION_Sql))   throw new IllegalArgumentException("SQL Operator not implemented yet: " + resultStr);  if (getOperation().equals(OPERATION_X))   resultStr+="{" + value2 + "}";  boolean result=false;  if (valueObj instanceof Number)   result=compareNumber((Number)valueObj,value1,value2); else   if (valueObj instanceof Boolean)   result=compareBoolean((Boolean)valueObj,value1,value2); else   result=compareString(valueObj,value1,value2);  log.fine(resultStr + " -> " + result+ (m_numeric ? " (#)" : " ($)"));  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.ARGUMENT_DEFINITION__TYPE:    return getType();case GamlPackage.ARGUMENT_DEFINITION__DEFAULT:  return getDefault();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void onEnabled(Context context,Intent intent){  super.onEnabled(context,intent);  Toast.makeText(context,R.string.switch_admin_on,Toast.LENGTH_LONG).show();  Log.d(TAG,"onEnabled");}  }
class C{  public void endVisit(UnionType node){}  }
class C{  protected Node newNode(){  return new XBLOMHandlerGroupElement();}  }
class C{  static void genParameterRegisterLoad(Assembler asm,int params){  if (VM.VerifyAssertions)   VM._assert(0 < params);  if (0 < NUM_PARAMETER_GPRS) {    stackMoveHelper(asm,T0,Offset.fromIntZeroExtend((params - 1) << LG_WORDSIZE));  }  if (1 < params && 1 < NUM_PARAMETER_GPRS) {    stackMoveHelper(asm,T1,Offset.fromIntZeroExtend((params - 2) << LG_WORDSIZE));  }}  }
class C{  public boolean someDataAvailable(){  return thresholdReachedCount == 0;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public sun.net.ftp.FtpClient rename(String from,String to) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("RNFR " + from);  issueCommandCheck("RNTO " + to);  return this;}  }
class C{  public static MainFragment newInstance(CropDemoPreset demoPreset){  MainFragment fragment=new MainFragment();  Bundle args=new Bundle();  args.putString("DEMO_PRESET",demoPreset.name());  fragment.setArguments(args);  return fragment;}  }
class C{  public void showProgressDialog(){  showDialog(DIALOG_PROGRESS_ID);}  }
class C{  public void removeGenre(MediaGenres genre){  if (genresForAccess.contains(genre)) {    genresForAccess.remove(genre);    genres.remove(genre.name());    firePropertyChange(GENRE,null,genre);    firePropertyChange(GENRES_AS_STRING,null,genre);  }}  }
class C{  protected void checkEquivalence(final IonValue left,final IonValue right,boolean expectedEquality){  if (expectedEquality) {    IonAssert.assertIonEquals(left,right);    IonAssert.assertIonEquals(right,left);    if (left.getType() != DATAGRAM && right.getType() != DATAGRAM)     assertEquals("Equal values have unequal hashes",left.hashCode(),right.hashCode());  } else {    assertFalse(left.equals(right));    assertFalse(right.equals(left));  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @NonNull public static CalendarDay today(){  return from(CalendarUtils.getInstance());}  }
class C{  protected Table createLinkTable(){  return LINKS_SCHEMA.instantiate(getNodeTable().getMaximumRow() + 1);}  }
class C{  private static void merge(Host first,Host second,Host result){  result.myUser=mergeValue(first.myUser,second.myUser);  result.myHostName=mergeValue(first.myHostName,second.myHostName);  result.myPort=mergeValue(first.myPort,second.myPort);  result.myIdentityFile=mergeValue(first.myIdentityFile,second.myIdentityFile);  result.myPreferredMethods=mergeValue(first.myPreferredMethods,second.myPreferredMethods);  result.myHostKeyAlgorithms=mergeValue(first.myHostKeyAlgorithms,second.myHostKeyAlgorithms);  result.myBatchMode=mergeValue(first.myBatchMode,second.myBatchMode);  result.myHostKeyAlias=mergeValue(first.myHostKeyAlias,second.myHostKeyAlias);  result.myNumberOfPasswordPrompts=mergeValue(first.myNumberOfPasswordPrompts,second.myNumberOfPasswordPrompts);  result.myPasswordAuthentication=mergeValue(first.myPasswordAuthentication,second.myPasswordAuthentication);  result.myPubkeyAuthentication=mergeValue(first.myPubkeyAuthentication,second.myPubkeyAuthentication);}  }
class C{  protected boolean up(TextView widget,Spannable buffer){  return false;}  }
class C{  public ServiceCompatibilityException(Reason reason){  super(reason.toString());  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  private Record processResponse(Record record,Future<Response> responseFuture,long maxRequestCompletionSecs) throws StageException {  Response response;  try {    response=responseFuture.get(maxRequestCompletionSecs,TimeUnit.SECONDS);    String responseBody="";    if (response.hasEntity()) {      responseBody=response.readEntity(String.class);    }    response.close();    if (response.getStatus() < 200 || response.getStatus() >= 300) {      throw new OnRecordErrorException(record,Errors.HTTP_01,response.getStatus(),response.getStatusInfo().getReasonPhrase() + " " + responseBody);    }    Record parsedResponse=parseResponse(responseBody);    if (parsedResponse != null) {      record.set(conf.outputField,parsedResponse.get());      addResponseHeaders(record,response);    }    return record;  } catch (  InterruptedException|ExecutionException e) {    LOG.error(Errors.HTTP_03.getMessage(),e.toString(),e);    throw new OnRecordErrorException(record,Errors.HTTP_03,e.toString());  }catch (  TimeoutException e) {    LOG.error("HTTP request future timed out",e.toString(),e);    throw new OnRecordErrorException(record,Errors.HTTP_03,e.toString());  }}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  void add(final Profile profile){  profiles.remove(profile);  profiles.add(profile);}  }
class C{  public void showEffects(){  showTitleBlockEffect();  showMaskEffect();}  }
class C{  public boolean hitEntity(ItemStack stack,EntityLivingBase target,EntityLivingBase attacker){  stack.damageItem(2,attacker);  return true;}  }
class C{  public void removeSFSEntryForReplicaReplicationGroup(StorageSystem system,CIMObjectPath replicationSvc,String replicaReplicationGroupName,String sourceReplicationGroupName){  List<String> sfsEntries=getEMCSFSEntries(system,replicationSvc);  String entryLabel=formatReplicaLabelForSFSEntry(system.getSerialNumber(),replicaReplicationGroupName,sourceReplicationGroupName);  String removeEntry=null;  if (sfsEntries != null && !sfsEntries.isEmpty()) {    for (    String entry : sfsEntries) {      if (entry.contains(entryLabel)) {        removeEntry=entry;        break;      }    }  }  if (removeEntry == null) {    _log.info(String.format("The SFS entry is not found for the replica group %s and source group %s",replicaReplicationGroupName,sourceReplicationGroupName));    return;  }  try {    CIMArgument[] inArgs=new CIMArgument[]{_cimArgument.stringArray("SFSEntries",new String[]{removeEntry})};    CIMArgument[] outArgs=new CIMArgument[5];    invokeMethod(system,replicationSvc,SmisConstants.EMC_REMOVE_SFSENTRIES,inArgs,outArgs);  } catch (  WBEMException e) {    _log.error("EMCRemoveSFSEntries -- WBEMException: ",e);  }}  }
class C{  public static SteppedPrice updateSteppedPrice(VOSteppedPrice voSteppedPrice,SteppedPrice steppedPrice) throws ValidationException, ConcurrentModificationException {  verifyVersionAndKey(steppedPrice,voSteppedPrice);  validateSteppedPrice(voSteppedPrice);  copyAttributes(voSteppedPrice,steppedPrice);  return steppedPrice;}  }
class C{  public Image rotate180Degrees(boolean maintainOpacity){  return Display.impl.rotate180Degrees(this,maintainOpacity);}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public void paint(Graphics2D g2d){  if (isVisible)   super.paint(g2d);}  }
class C{  public boolean isDrawInterior(){  return this.drawInterior;}  }
class C{  public String base64(){  return Base64.encode(data);}  }
class C{  public void add(int index,int value){  if (index > size) {    throwException2(index);  }  ensureCapacity(size + 1);  System.arraycopy(data,index,data,index + 1,size - index);  data[index]=value;  size++;}  }
class C{  public void addSecretKeyEntry(String alias,SecretKeySpec key,char[] keyPassword){  if (key == null) {    throw new IllegalArgumentException(String.format("'key' cannot be null." + "[Store: %s, Server: %s, User: %s]",_storeName,_serverName,_userName));  }  String pemKey=VecsUtils.encodeSecretKeyToBase64String(key);  String passwordString=VecsUtils.encodeCharArrToString(keyPassword);  int error=VecsAdapter.VecsAddEntryW(_storeHandle,VecsEntryType.CERT_ENTRY_TYPE_SECRET_KEY.getValue(),alias,null,pemKey,passwordString,false);  BAIL_ON_ERROR(error,"Adding VecsEntryType.CERT_ENTRY_TYPE_SECRET_KEY entry " + "into store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);}  }
class C{  public int askControlType(String systemName){  int iType=selectOutputType();  if (iType == javax.swing.JOptionPane.CLOSED_OPTION) {    iType=0;    log.warn("User cancelled without selecting output type. Defaulting to 'steady state'.");  }  return (iType);}  }
class C{  public Object parseXMLObject(XMLObject xo) throws XMLParseException {  SiteList patterns=(SiteList)xo.getChild(SiteList.class);  int subSet=0;  int subSetCount=0;  if (xo.hasAttribute(SUB_SET)) {    subSet=xo.getIntegerAttribute(SUB_SET) - 1;    if (subSet < 0)     throw new XMLParseException("illegal 'subSet' attribute in patterns element");  }  if (xo.hasAttribute(SUB_SET_COUNT)) {    subSetCount=xo.getIntegerAttribute(SUB_SET_COUNT);    if (subSetCount < 0)     throw new XMLParseException("illegal 'subSetCount' attribute in patterns element");  }  Patterns subPatterns=new Patterns(patterns,0,0,1,subSet,subSetCount);  if (xo.hasAttribute(XMLParser.ID)) {    final Logger logger=Logger.getLogger("dr.evoxml");    logger.info("Pattern subset '" + xo.getId() + "' created from '"+ patterns.getId()+ "' ("+ (subSet + 1)+ "/"+ subSetCount+ ")");    logger.info("  pattern count = " + subPatterns.getPatternCount());  }  return subPatterns;}  }
class C{  public static JPopupButton createDrawingColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels){  return createDrawingColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,null);}  }
class C{  public void endError() throws IOException {  ResponseWriter writer=getWrapped();  writer.endCDATA();  writer.endElement("error-message");  writer.endElement("error");}  }
class C{  private static Date readAmfDate(ParsableByteArray data){  Date date=new Date((long)readAmfDouble(data).doubleValue());  data.skipBytes(2);  return date;}  }
class C{  private ResolvedMigration createAvailableMigration(String version){  ResolvedMigration migration=new ResolvedMigration();  migration.setVersion(MigrationVersion.fromVersion(version));  migration.setDescription("abc very very very very very very very very very very long");  migration.setScript("x");  migration.setType(MigrationType.CQL);  return migration;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("one",null));}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  public static long readHexLong(Map<String,? extends Object> map,String key,long defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Long) {    return (Long)v;  }  try {    return parseHexLong((String)v);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public WindowSurface(EglCore eglCore,Surface surface,boolean releaseSurface){  super(eglCore);  createWindowSurface(surface);  mSurface=surface;  mReleaseSurface=releaseSurface;}  }
class C{  private String changeExtension(String fileName,String extension){  if (fileName == null) {    return null;  }  int lastIndexOf=fileName.lastIndexOf(".");  return lastIndexOf != -1 ? fileName.substring(0,lastIndexOf + 1) + extension : fileName + "." + extension;}  }
class C{  public ApplicationMessage(byte[] data,InetSocketAddress peerAddress){  super(peerAddress);  this.data=Arrays.copyOf(data,data.length);}  }
class C{  static boolean isItemBoundToOtherPlayer(final Player player,final RPObject object){  if (object instanceof Item) {    final Item item=(Item)object;    if (item.isBound() && !player.isBoundTo(item)) {      player.sendPrivateText("This " + item.getName() + " is a special reward for "+ item.getBoundTo()+ ". You do not deserve to use it.");      return true;    }  }  return false;}  }
class C{  public static String shortDebugString(final UnknownFieldSet fields){  try {    final StringBuilder sb=new StringBuilder();    SINGLE_LINE_PRINTER.printUnknownFields(fields,new TextGenerator(sb));    return sb.toString().trim();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public ProfileVisit gender(Gender gender){  this.gender=gender;  return this;}  }
class C{  public boolean isUseUserOrgAccess(){  Object oo=get_Value(COLUMNNAME_IsUseUserOrgAccess);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  Frame loadExpandFrame(Frame top,Frame frame) throws IOException {  if (!canGrow(top)) {    return null;  }  frame.arc=fst.readFirstRealTargetArc(top.arc.target,frame.arc,fstReader);  frame.state=fsa.step(top.state,frame.arc.label);  if (frame.state == -1) {    return loadNextFrame(top,frame);  }  return frame;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static char intToHexDigit(final int nibble){  final char c=Character.forDigit(nibble,16);  if (c == Character.MIN_VALUE) {    throw new IllegalArgumentException("nibble value not between 0 and 15: " + nibble);  }  return c;}  }
class C{  @Override public void genNCollisions(int numberAttributes,StringBuilder sb,boolean useNamespace){  try {    final long startTime=System.nanoTime();    final long endTime;    String prefix="";    int exponent=1;    while (numberAttributes > (int)Math.pow(3,exponent)) {      exponent++;    }    if (useNamespace) {      prefix="xmlns:";    }    for (int i=0; i < numberAttributes; i++) {      sb.append(prefix + getCollisionString(i,exponent) + "=\""+ i+ "\" ");    }    endTime=System.nanoTime();    final long duration=endTime - startTime;    double d=duration / 1000000000.0;    logger.log(Level.FINE,"Runtime using DJBX31A creating n=" + numberAttributes + " collisions: "+ d+ "seconds");  } catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  }}  }
class C{  public SimpleDateFormat(){  super();}  }
class C{  protected void printError(HttpServletResponse response,String message) throws IOException {  response.setContentType("text/html");  response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  print(response,message);}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    in=it.next().openStream();  }}  }
class C{  @Override public void delete(BlobPath path){  throw new UnsupportedOperationException("URL repository is read only");}  }
class C{  boolean isEntranceTransitionEnabled(){  return mEntranceTransitionEnabled;}  }
class C{  public static void write(CharSequence from,File to,Charset charset) throws IOException {  asCharSink(to,charset).write(from);}  }
class C{  static NotCompliantMBeanException throwException(Class<?> notCompliant,Throwable cause) throws NotCompliantMBeanException, SecurityException {  if (cause instanceof SecurityException)   throw (SecurityException)cause;  if (cause instanceof NotCompliantMBeanException)   throw (NotCompliantMBeanException)cause;  final String classname=(notCompliant == null) ? "null class" : notCompliant.getName();  final String reason=(cause == null) ? "Not compliant" : cause.getMessage();  final NotCompliantMBeanException res=new NotCompliantMBeanException(classname + ": " + reason);  res.initCause(cause);  throw res;}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Susi");  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("int_ados_ross_house");  new LittleGirlNPC().createGirlNPC(zone);  return true;}  }
class C{  public boolean containsRetrievalMethod(){  return this.lengthRetrievalMethod() > 0;}  }
class C{  public DeleteAction(final NetworkPanel networkPanel){  super(networkPanel,"Delete",EnablingCondition.ALLITEMS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("DeleteNeuron.png"));  putValue(SHORT_DESCRIPTION,"Delete selected node(s) (\"Backspace\" or \"Delete\")");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("BACK_SPACE"),this);  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("DELETE"),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public void shutdown(){}  }
class C{  protected void assertEquals(boolean expected,boolean actual){  if (expected != actual) {    fail("Boolean expected: " + expected + " actual: "+ actual);  }}  }
class C{  public void put(String key,Object value){  map.put(key,value);  unwrappedMap=null;}  }
class C{  protected void shutdownStore() throws Exception {  store.stop();  assertTrue("Store cache must be empty after shutdown",store.writeCache().isEmpty());}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    if (eventName.compareTo("dataSet") == 0) {      m_dataProvider=source;    }  }  m_connectedFormat=null;}  }
class C{  private static int pack7Oid(int input,byte[] out,int ooffset){  byte[] b=new byte[4];  b[0]=(byte)(input >> 24);  b[1]=(byte)(input >> 16);  b[2]=(byte)(input >> 8);  b[3]=(byte)(input);  return pack7Oid(b,0,4,out,ooffset);}  }
class C{  public TokenStream tokenStreamValue(){  return tokenStream;}  }
class C{  public static double abs(double a){  return 0.0d;}  }
class C{  public EstadoImpl(){}  }
class C{  public boolean isSearcherCurrent() throws IOException {  final IndexSearcher searcher=acquire();  try {    final IndexReader r=searcher.getIndexReader();    assert r instanceof DirectoryReader : "searcher's IndexReader should be a DirectoryReader, but got " + r;    return ((DirectoryReader)r).isCurrent();  }  finally {    release(searcher);  }}  }
class C{  protected double compare(final int p1,final int p2,Stack<d_node> cover_set){  return cover_set.element(p1).dist - cover_set.element(p2).dist;}  }
class C{  public void initDiskCache(){  if (DEBUG) {    Log.d(TAG,"initDiskCache " + this);  }synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      if (mDiskCacheDir != null) {        if (!mDiskCacheDir.exists()) {          mDiskCacheDir.mkdirs();        }        if (FileUtil.getUsableSpace(mDiskCacheDir) > mDiskCacheSize) {          try {            mDiskLruCache=DiskLruCache.open(mDiskCacheDir,1,1,mDiskCacheSize);            if (DEBUG) {              Log.d(TAG,"Disk cache initialized " + this);            }          } catch (          final IOException e) {            Log.e(TAG,"initDiskCache - " + e);          }        } else {          Log.e(TAG,String.format("no enough space for initDiskCache %s %s",FileUtil.getUsableSpace(mDiskCacheDir),mDiskCacheSize));        }      }    }    mDiskCacheStarting=false;    mDiskCacheReady=true;    mDiskCacheLock.notifyAll();  }}  }
class C{  public void removeFloor(Floor floor){  LOGGER.debug("BuildUpFloor.removeFloor");  getFloorDetails().remove(floor);  noofFloors=getFloorDetails().size();}  }
class C{  public void run(){  log.info(m_cmd);  try {    m_child=Runtime.getRuntime().exec(m_cmd);    m_outStream=m_child.getInputStream();    m_errStream=m_child.getErrorStream();    m_inStream=m_child.getOutputStream();    if (checkInterrupted())     return;    m_outReader.start();    m_errReader.start();    try {      if (checkInterrupted())       return;      m_errReader.join();      if (checkInterrupted())       return;      m_outReader.join();      if (checkInterrupted())       return;      m_child.waitFor();    } catch (    InterruptedException ie) {      log.log(Level.INFO,"(ie) - " + ie);    }    try {      if (m_child != null)       log.fine("run - ExitValue=" + m_child.exitValue());    } catch (    Exception e) {    }    log.config("done");  } catch (  IOException ioe) {    log.log(Level.SEVERE,"(ioe)",ioe);  }}  }
class C{  public Map<String,String> tags(){  return Collections.unmodifiableMap(new LinkedHashMap<>(this.tags));}  }
class C{  public boolean annotationTextContainsWord(String word){  return getTextAnnotationWords().contains(word);}  }
class C{  public QuadBuilder addVertexInferUV(double x,double y,double z){  return this.addVertexInferUV(new Vec3d(x,y,z));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static void putLongLE(long addr,long val){  if (UNALIGNED)   UNSAFE.putLong(addr,Long.reverseBytes(val)); else   putLongByByte(addr,val,false);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  Properties ctx=JSPEnv.getCtx(request);  MLocation loc=new MLocation(ctx,0,null);  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/xml; charset=UTF-8");  response.setCharacterEncoding("UTF-8");  PrintWriter out=response.getWriter();  String cmd=request.getParameter("cmd");  cmd=Util.maskHTML(cmd,true);  if (cmd == null) {    out.println("<error>Unknown Request: NULL</error>");  } else {    String selected=request.getParameter("selected");    int selectedID=0;    try {      selectedID=Integer.parseInt(selected);    } catch (    Exception e) {      selectedID=0;    }    if (cmd.equalsIgnoreCase("countries")) {      out.println("<countries>");      MCountry[] countries=MCountry.getCountries(loc.getCtx());      for (      MCountry country : countries) {        int id=country.getC_Country_ID();        out.print("<country id='" + id + "'");        if (id == selectedID)         out.print(" selected='true'");        out.println(">" + country.getName() + "</country>");      }      out.println("</countries>");    } else     if (cmd.equalsIgnoreCase("regions")) {      String country=Util.maskHTML(request.getParameter("country"),true);      try {        int countryId=Integer.parseInt(country);        out.println("<regions country='" + countryId + "'>");        MRegion[] regions=MRegion.getRegions(loc.getCtx(),countryId);        if ((regions.length > 0) && (selectedID == 0))         selectedID=regions[0].getC_Region_ID();        for (        MRegion region : regions) {          int id=region.getC_Region_ID();          out.print("<region id='" + id + "'");          if (id == selectedID)           out.print(" selected='true'");          out.println(">" + region.getName() + "</region>");        }        out.println("</regions>");      } catch (      Exception e) {        out.println("<error>Unknown Country: " + country + "</error>");      }    } else {      out.println("<error>Unknown Request: " + cmd + "</error>");    }  }  out.flush();  out.close();}  }
class C{  public Shape inverseTransform(Shape shape){  float[] coords=new float[6];  GeneralPath path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);  PathIterator pi=shape.getPathIterator(getInverseRotationTransform());  while (!pi.isDone()) {    int type=pi.currentSegment(coords);    if (type == PathIterator.SEG_MOVETO) {      path.moveTo(coords[0],coords[1]);    } else     if (type == PathIterator.SEG_LINETO) {      path.lineTo(coords[0],coords[1]);    } else     if (type == PathIterator.SEG_CLOSE) {      path.closePath();    } else {      if (type == PathIterator.SEG_QUADTO) {        path.quadTo(coords[0],coords[1],coords[2],coords[3]);      } else       if (type == PathIterator.SEG_CUBICTO) {        path.curveTo(coords[0],coords[1],coords[2],coords[3],coords[4],coords[5]);      }    }    pi.next();  }  return path;}  }
class C{  public void addObserver(FindToolbarObserver observer){  mObservers.addObserver(observer);}  }
class C{  @Override public void clearRangeCrosshairs(){  for (  List<Crosshair> crosshairsForRange : rangeCrosshairs) {    for (    Crosshair crosshair : crosshairsForRange) {      crosshair.removePropertyChangeListener(this);    }  }  rangeCrosshairs.clear();}  }
class C{  public Tuple2<T1,Double> asTuple(){  return Tuple.tuple(v1,v2);}  }
class C{  public Promise<List<ConflictImportDTO>> organizeImports(String projectPath,String fqn){  String url=appContext.getDevMachine().getWsAgentBaseUrl() + CODE_ASSIST_URL_PREFIX + "/organize-imports?projectpath="+ projectPath+ "&fqn="+ fqn;  return asyncRequestFactory.createPostRequest(url,null).loader(loader).send(unmarshallerFactory.newListUnmarshaller(ConflictImportDTO.class));}  }
class C{  public SIMD512(){  super();}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void infoSQL(String sql,String params,int count,long time){  if (!isEnabled(TraceSystem.INFO)) {    return;  }  StringBuilder buff=new StringBuilder(sql.length() + params.length() + 20);  buff.append(lineSeparator).append("/*SQL");  boolean space=false;  if (params.length() > 0) {    space=true;    buff.append(" l:").append(sql.length());  }  if (count > 0) {    space=true;    buff.append(" #:").append(count);  }  if (time > 0) {    space=true;    buff.append(" t:").append(time);  }  if (!space) {    buff.append(' ');  }  buff.append("*/").append(StringUtils.javaEncode(sql)).append(StringUtils.javaEncode(params)).append(';');  sql=buff.toString();  traceWriter.write(TraceSystem.INFO,module,sql,null);}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Perfil";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Aplicacion",idAplicacion);  bdr.addSimpleElement("Usuario",idUsuario);  bdr.addSimpleElement("Entidad",idEntidad);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  private String updateCodeOnly(String functionName,FunctionCode functionCode,Boolean publish) throws IOException {  UpdateFunctionCodeRequest updateFunctionCodeRequest=new UpdateFunctionCodeRequest().withFunctionName(functionName).withZipFile(functionCode.getZipFile()).withS3Bucket(functionCode.getS3Bucket()).withS3Key(functionCode.getS3Key()).withPublish(publish).withS3ObjectVersion(functionCode.getS3ObjectVersion());  logger.log("Lambda update code request:%n%s%n",updateFunctionCodeRequest.toString());  UpdateFunctionCodeResult updateFunctionCodeResult=client.updateFunctionCode(updateFunctionCodeRequest);  logger.log("Lambda update code response:%n%s%n",updateFunctionCodeResult.toString());  return updateFunctionCodeResult.getVersion();}  }
class C{  public ParsePosition(int index){  this.index=index;}  }
class C{  protected BookMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(BookMeta.class);}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    variables.visit(v);    if (body != null) {      body.visit(v);    }  }}  }
class C{  private void closeDialog(java.awt.event.WindowEvent evt){  closeDialog();}  }
class C{  public static String construct(String... urlParts){  if (urlParts == null || urlParts.length == 0) {    return "";  }  StringBuilder builder=new StringBuilder();  String startingPart=removeStartingDash(urlParts[0]);  startingPart=removeEndingDash(startingPart);  if (!startingPart.startsWith("http")) {    builder.append("http://");  }  builder.append(startingPart);  for (int i=1, len=urlParts.length; i < len; i++) {    String urlPart=removeEndingDash(urlParts[i]);    if (!urlPart.startsWith("/")) {      builder.append("/");    }    builder.append(urlPart);  }  return builder.toString();}  }
class C{  public static void main(String[] argv){  String version=null;  try {    final Properties pomProperties=new Properties();    pomProperties.load(JmDNSImpl.class.getResourceAsStream("/META-INF/maven/javax.jmdns/jmdns/pom.properties"));    version=pomProperties.getProperty("version");  } catch (  Exception e) {    version="RUNNING.IN.IDE.FULL";  }  System.out.println("JmDNS version \"" + version + "\"");  System.out.println(" ");  System.out.println("Running on java version \"" + System.getProperty("java.version") + "\""+ " (build "+ System.getProperty("java.runtime.version")+ ")"+ " from "+ System.getProperty("java.vendor"));  System.out.println("Operating environment \"" + System.getProperty("os.name") + "\""+ " version "+ System.getProperty("os.version")+ " on "+ System.getProperty("os.arch"));  System.out.println("For more information on JmDNS please visit https://sourceforge.net/projects/jmdns/");}  }
class C{  public static <T extends DataObjectRestRep>void applyFilter(Collection<T> resources,ResourceFilter<T> filter){  if (filter != null) {    Iterator<T> iter=resources.iterator();    while (iter.hasNext()) {      T resource=iter.next();      if (!filter.accept(resource)) {        iter.remove();      }    }  }}  }
class C{  @Override public void addEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public static SpeechletResponse buildSpeechletResponse(String output){  Properties props=new Properties();  output=parseProps(output,props);  SimpleCard card=new SimpleCard();  if (props.containsKey("title"))   card.setTitle(props.getProperty("title"));  if (props.containsKey("card")) {    String cardText=props.getProperty("card");    if (cardText.startsWith("++"))     cardText=output + cardText.substring(2);    card.setContent(cardText);  } else   card.setContent(output);  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  if (props.containsKey("shouldEndSession"))   response.setShouldEndSession(Boolean.parseBoolean(props.getProperty("shouldEndSession"))); else   response.setShouldEndSession(false);  response.setOutputSpeech(speech);  if (props.containsKey("reprompt")) {    String repromptText=props.getProperty("reprompt");    if (repromptText.startsWith("++"))     repromptText=output + repromptText.substring(2);    PlainTextOutputSpeech repromptSpeech=new PlainTextOutputSpeech();    repromptSpeech.setText(repromptText);    Reprompt reprompt=new Reprompt();    reprompt.setOutputSpeech(repromptSpeech);    response.setReprompt(reprompt);  }  response.setCard(card);  return response;}  }
class C{  public IntSet(){  this(10);}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  public static ListFragment newInstance(){  ListFragment fragment=new ListFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  private int computeFlags(int curFlags){  curFlags&=~(WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS| WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);  curFlags|=WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  curFlags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;  return curFlags;}  }
class C{  public void endVisit(ForStatement node){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.536 -0500",hash_original_method="FCE3F0DACA962344761C11774B544CCF",hash_generated_method="942ABB0BCF583B3FE6A77B7D88C3097A") public static void startSelecting(View view,Spannable content){  content.setSpan(SELECTING,0,0,PRESSED);}  }
class C{  public boolean isMonitoredEditable(){  return origin != RepFolderOrigin.REP_BACKUP_FOLDER;}  }
class C{  public FieldGet(AccessibleField field){  this.field=field;}  }
class C{  public boolean considerSegmentXRegion(GeoSegment seg,GeoRegion region){  return region.isSegmentNear(seg,filter.getHRange());}  }
class C{  private void resetTransformAttr(){  x=0.0;  y=0.0;  scaleX=1.0;  scaleY=1.0;  rotation=0.0;  translateSet=false;  scaleSet=false;  rotationSet=false;}  }
class C{  public boolean isStateActive(State state){switch (state) {case mainRegion_State1:    return stateVector[0] == State.mainRegion_State1;case mainRegion_State2:  return stateVector[0].ordinal() >= State.mainRegion_State2.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State5.ordinal();case mainRegion_State2__region0_a:return stateVector[0] == State.mainRegion_State2__region0_a;case mainRegion_State2__region0_State4:return stateVector[0].ordinal() >= State.mainRegion_State2__region0_State4.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State4__region0_State7__region0_State9.ordinal();case mainRegion_State2__region0_State4__region0_State6:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State6;case mainRegion_State2__region0_State4__region0_State7:return stateVector[0].ordinal() >= State.mainRegion_State2__region0_State4__region0_State7.ordinal() && stateVector[0].ordinal() <= State.mainRegion_State2__region0_State4__region0_State7__region0_State9.ordinal();case mainRegion_State2__region0_State4__region0_State7__region0_State8:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State7__region0_State8;case mainRegion_State2__region0_State4__region0_State7__region0_State9:return stateVector[0] == State.mainRegion_State2__region0_State4__region0_State7__region0_State9;case mainRegion_State2__region0_State5:return stateVector[0] == State.mainRegion_State2__region0_State5;default :return false;}}  }
class C{  public boolean updateAllTypes(){  return updateAllTypes;}  }
class C{  public static double regularizedGammaP(double a,double x){  return regularizedGammaP(a,x,DEFAULT_EPSILON,Integer.MAX_VALUE);}  }
class C{  private long readChangesetId(){  String changesetIdAttribute;  changesetIdAttribute=reader.getAttributeValue(null,ATTRIBUTE_NAME_CHANGESET_ID);  if (changesetIdAttribute != null) {    return Long.parseLong(changesetIdAttribute);  } else {    return 0;  }}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  return true;}  }
class C{  public boolean removeEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex >= mDataSets.size())   return false;  boolean removed=mDataSets.get(dataSetIndex).removeEntry(e.getXIndex());  if (removed) {    float val=e.getVal();    mYValCount-=1;    mYValueSum-=val;    calcMinMax(mLastStart,mLastEnd);  }  return removed;}  }
class C{  public static String escape(String raw){  return escapeAndShorten(raw,-1);}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused()) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_UP:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_UP,false);      } else {        handled=fullScroll(View.FOCUS_UP,false);      }    break;case KeyEvent.KEYCODE_DPAD_DOWN:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_DOWN,false);  } else {    handled=fullScroll(View.FOCUS_DOWN,false);  }break;case KeyEvent.KEYCODE_DPAD_LEFT:if (!event.isAltPressed()) {handled=arrowScroll(View.FOCUS_LEFT,true);} else {handled=fullScroll(View.FOCUS_LEFT,true);}break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (!event.isAltPressed()) {handled=arrowScroll(View.FOCUS_RIGHT,true);} else {handled=fullScroll(View.FOCUS_RIGHT,true);}break;}}return handled;}  }
class C{  public String globalInfo(){  return " A SplitEvaluator that produces results for a classification " + "scheme on a nominal class attribute.";}  }
class C{  public static <T>T[] sort(T[] self){  Arrays.sort(self,new NumberAwareComparator<T>());  return self;}  }
class C{  public static void load(String args[],Frame frame){  try {    Platforms.set(new DesktopPlatform());    if (JavaVersionNotice.upgradeRequired(VersionUtils.getJavaVersion())) {      hideSplash(frame);      JavaVersionNotice.showUpgradeRequiredDialog();    }    System.out.println("FrostWire version " + FrostWireUtils.getFrostWireVersion() + " build "+ FrostWireUtils.getBuildNumber());    Initializer initializer=new Initializer();    initializer.initialize(args,frame);  } catch (  Throwable err) {    hideSplash(frame);    try {      FatalBugManager.handleFatalBug(err);    } catch (    Throwable t) {      Throwable error=err;      try {        t.initCause(err);        error=t;      } catch (      Throwable ignored) {      }      showCorruptionError(error);      System.exit(1);    }  }}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public Response evaluateCompatibility(){  if (!(info.getSdkVersion() >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) && info.isRooted()) {    return Response.INCOMPATIBLE;  } else   if (info.getSdkVersion() < android.os.Build.VERSION_CODES.JELLY_BEAN) {    return Response.INCOMPATIBLE_OS;  } else   if (info.isRooted()) {    return Response.INCOMPATIBLE_ROOT;  }  return Response.COMPATIBLE;}  }
class C{  public boolean isDown(){  return ((flags & BUTTON_DOWN) != 0);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5,String criteria6){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5,criteria6});}  }
class C{  public static void closeQuietly(ResultSet rs){  if (rs == null) {    return;  }  try {    rs.close();  } catch (  SQLException ex) {  }}  }
class C{  public void go(OutputStream out) throws IOException {  go(new JCardWriter(out,wrapInArray()));}  }
class C{  public void mutableAdd(double c,Vec x_t,final List<Double> qi){  if (c == 0)   return;  normGood=false;  double y_t=c;  final double k_tt=k.eval(0,0,Arrays.asList(x_t),qi);  if (budgetStrategy == BudgetStrategy.PROJECTION) {    if (K == null) {      KExpanded=new DenseMatrix(16,16);      K=new SubMatrix(KExpanded,0,0,1,1);      K.set(0,0,k_tt);      InvKExpanded=new DenseMatrix(16,16);      InvK=new SubMatrix(InvKExpanded,0,0,1,1);      InvK.set(0,0,1 / k_tt);      alpha.add(y_t);      vecs.add(x_t);      if (kernelAccel != null)       kernelAccel.addAll(qi);      return;    }    DenseVector kxt=new DenseVector(K.rows());    for (int i=0; i < kxt.length(); i++)     kxt.set(i,k.eval(i,x_t,qi,vecs,kernelAccel));    final Vec alphas_t=InvK.multiply(kxt);    final double delta_t=k_tt - alphas_t.dot(kxt);    final int size=K.rows();    if (delta_t > errorTolerance && size < maxBudget) {      vecs.add(x_t);      if (kernelAccel != null)       kernelAccel.addAll(qi);      if (size == KExpanded.rows()) {        KExpanded.changeSize(size * 2,size * 2);        InvKExpanded.changeSize(size * 2,size * 2);      }      Matrix.OuterProductUpdate(InvK,alphas_t,alphas_t,1 / delta_t);      K=new SubMatrix(KExpanded,0,0,size + 1,size + 1);      InvK=new SubMatrix(InvKExpanded,0,0,size + 1,size + 1);      for (int i=0; i < size; i++) {        K.set(size,i,kxt.get(i));        K.set(i,size,kxt.get(i));        InvK.set(size,i,-alphas_t.get(i) / delta_t);        InvK.set(i,size,-alphas_t.get(i) / delta_t);      }      K.set(size,size,k_tt);      InvK.set(size,size,1 / delta_t);      alpha.add(y_t);    } else {      Vec alphaVec=alpha.getVecView();      alphaVec.mutableAdd(y_t,alphas_t);      normGood=false;    }  } else   if (budgetStrategy == BudgetStrategy.MERGE_RBF) {    normGood=false;    addPoint(x_t,qi,y_t);    if (vecs.size() > maxBudget) {      int m=0;      double alpha_m=abs(alpha.get(m));      for (int i=1; i < alpha.size(); i++)       if (abs(alpha.getD(i)) < abs(alpha_m)) {        alpha_m=alpha.getD(i);        m=i;      }      double minLoss=Double.POSITIVE_INFINITY;      int n=-1;      double n_h=0;      double n_alpha_z=0;      double tol=1e-3;      while (n == -1) {        for (int i=0; i < alpha.size(); i++) {          if (i == m)           continue;          double a_m=alpha_m, a_n=alpha.getD(i);          double normalize=a_m + a_n;          if (abs(normalize) < tol)           continue;          final double k_mn=k.eval(i,m,vecs,kernelAccel);          double h=getH(k_mn,a_m / normalize,a_n / normalize);          double k_mz=pow(k_mn,(1 - h) * (1 - h));          double k_nz=pow(k_mn,h * h);          double alpha_z=a_m * k_mz + a_n * k_nz;          double loss=a_m * a_m + a_n * a_n + 2 * k_mn * a_m* a_n - alpha_z * alpha_z;          if (loss < minLoss) {            minLoss=loss;            n=i;            n_h=h;            n_alpha_z=alpha_z;          }        }        tol/=10;      }      Vec n_z=vecs.get(m).multiply(n_h);      n_z.mutableAdd(1 - n_h,vecs.get(n));      final List<Double> nz_qi=k.getQueryInfo(n_z);      finalMergeStep(m,n,n_z,nz_qi,n_alpha_z,true);    }  } else   if (budgetStrategy == BudgetStrategy.STOP) {    normGood=false;    if (getBasisSize() < maxBudget)     addPoint(x_t,qi,y_t);  } else   if (budgetStrategy == BudgetStrategy.RANDOM) {    normGood=false;    if (getBasisSize() >= maxBudget) {      Random rand=new Random();      int toRemove=rand.nextInt(vecs.size());      removeIndex(toRemove);    }    addPoint(x_t,qi,y_t);  } else   throw new RuntimeException("BUG: report me!");}  }
class C{  public static String indent(String... text){  return tab + String.join(nl(),text).replaceAll("\\r?\\n",nl + tab);}  }
class C{  @Deprecated public NinePatchDrawable(NinePatch patch){  this(new NinePatchState(patch,new Rect()),null);}  }
class C{  public FDBigInteger leftShift(int shift){  if (shift == 0 || nWords == 0) {    return this;  }  int wordcount=shift >> 5;  int bitcount=shift & 0x1f;  if (this.isImmutable) {    if (bitcount == 0) {      return new FDBigInteger(Arrays.copyOf(data,nWords),offset + wordcount);    } else {      int anticount=32 - bitcount;      int idx=nWords - 1;      int prev=data[idx];      int hi=prev >>> anticount;      int[] result;      if (hi != 0) {        result=new int[nWords + 1];        result[nWords]=hi;      } else {        result=new int[nWords];      }      leftShift(data,idx,result,bitcount,anticount,prev);      return new FDBigInteger(result,offset + wordcount);    }  } else {    if (bitcount != 0) {      int anticount=32 - bitcount;      if ((data[0] << bitcount) == 0) {        int idx=0;        int prev=data[idx];        for (; idx < nWords - 1; idx++) {          int v=(prev >>> anticount);          prev=data[idx + 1];          v|=(prev << bitcount);          data[idx]=v;        }        int v=prev >>> anticount;        data[idx]=v;        if (v == 0) {          nWords--;        }        offset++;      } else {        int idx=nWords - 1;        int prev=data[idx];        int hi=prev >>> anticount;        int[] result=data;        int[] src=data;        if (hi != 0) {          if (nWords == data.length) {            data=result=new int[nWords + 1];          }          result[nWords++]=hi;        }        leftShift(src,idx,result,bitcount,anticount,prev);      }    }    offset+=wordcount;    return this;  }}  }
class C{  public TreeNode parseXMLDocument(String uri,InputStream is) throws JasperException {  return parseXMLDocument(uri,new InputSource(is),false);}  }
class C{  private void sendPasswordRequirementsChanged(){  Intent changedIntent=new Intent(DeviceAdminReceiver.ACTION_PASSWORD_REQUIREMENTS_CHANGED);  changedIntent.setComponent(getAdmin());  getActivity().sendBroadcast(changedIntent);}  }
class C{  public TimerControlButtonPanel(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument.class,args);}  }
class C{  private void saveAccount(){  Log.d(TAG,"Saving account name... " + mChosenAccountName);  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());  sp.edit().putString(ACCOUNT_KEY,mChosenAccountName).commit();}  }
class C{  public static boolean contains(Object[] self,Object value){  for (  Object next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  public static void deleteSectionComment(final SQLProvider provider,final int moduleId,final int sectionId,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkArgument(sectionId >= 0,"Error: section id must be greater or equal than zero");  Preconditions.checkNotNull(commentId,"Error: comment text argument can not be null");  Preconditions.checkNotNull(userId,"Error: user id argument can not be null");  final String function=" { ? = call delete_section_comment(?, ?, ?, ?) } ";  try (CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function)){    deleteCommentStatement.registerOutParameter(1,Types.INTEGER);    deleteCommentStatement.setInt(2,moduleId);    deleteCommentStatement.setInt(3,sectionId);    deleteCommentStatement.setInt(4,commentId);    deleteCommentStatement.setInt(5,userId);    deleteCommentStatement.execute();    deleteCommentStatement.getInt(1);    if (deleteCommentStatement.wasNull()) {      throw new IllegalArgumentException("Error: The comment id returned from the database was null.");    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  void sendUdpData(String graphiteEvent){  Socket socket=null;  try {    socket=sendDataOverSocket(graphiteEvent);  } catch (  IOException ex) {    utils.logIssue("Error sending graphite event [" + graphiteEvent + "] to ["+ host+ ":"+ port+ "].",ex);  } finally {    closeSocket(socket);  }}  }
class C{  Item newMethod(final String owner,final String name,final String desc){  key3.set(METH,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(METH,newClass(owner).index,newNameType(name,desc).index);    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public VisiblePredicate(){  super(VisualItem.VISIBLE);}  }
class C{  public static void sleep(long milliseconds){  try {    Thread.sleep(milliseconds);  } catch (  InterruptedException e) {    Log.e(TAG,"Unable to sleep " + milliseconds,e);  }}  }
class C{  public void transformValues(TFloatFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  public static String formatLimitQuery(String query,BasicSQL.OffsetInclusion offset,DBType dbType){  int fakeOffset;  if (offset.equals(BasicSQL.OffsetInclusion.INCLUDE_OFFSET)) {    fakeOffset=1;  } else {    fakeOffset=0;  }  return internalLimitQuery(query,1,fakeOffset,new ArrayList<Object>(),dbType);}  }
class C{  public ViewHolderFactoryResolver(){  this(0);}  }
class C{  public DigestURL(final String url) throws MalformedURLException {  super(url);  this.hash=null;}  }
class C{  public void dragGestureChanged(DragSourceDragEvent dsde){  System.out.println("[Source] dragGestureChanged");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  protected final void LONG_SHL(Instruction s,Operand result,Operand val1,Operand val2,boolean maskWith3f){  if (!val2.isIntConstant()) {    Binary.mutate(s,LONG_SHL,result.asRegister(),val1,val2);    EMIT(s);  } else   if (result.isRegister()) {    int shift=val2.asIntConstant().value;    Register lhsReg=result.asRegister().getRegister();    Register lowlhsReg=burs.ir.regpool.getSecondReg(lhsReg);    Register rhsReg1=val1.asRegister().getRegister();    Register lowrhsReg1=burs.ir.regpool.getSecondReg(rhsReg1);    if (shift == 0) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }    } else     if (shift == 1) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowlhsReg,TypeReference.Int))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_ADC,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lhsReg,TypeReference.Int)));    } else     if (shift == 2) {      Register tmp=regpool.getInteger();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(tmp,TypeReference.Int),IC(30))));      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lhsReg,TypeReference.Int),MemoryOperand.BIS(new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int),(byte)2,(byte)4,null,null))));      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lowlhsReg,TypeReference.Int),new MemoryOperand(null,new RegisterOperand(lowrhsReg1,TypeReference.Int),(byte)2,Offset.zero(),(byte)4,null,null))));    } else     if (shift == 3) {      Register tmp=regpool.getInteger();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(tmp,TypeReference.Int),IC(29))));      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lhsReg,TypeReference.Int),MemoryOperand.BIS(new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int),(byte)3,(byte)4,null,null))));      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lowlhsReg,TypeReference.Int),new MemoryOperand(null,new RegisterOperand(lowrhsReg1,TypeReference.Int),(byte)3,Offset.zero(),(byte)4,null,null))));    } else     if (shift < 32) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      Register tmp=regpool.getInteger();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(tmp,TypeReference.Int),IC(32 - shift))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,new RegisterOperand(lhsReg,TypeReference.Int),IC(shift))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      }      EMIT(MIR_BinaryAcc.mutate(s,IA32_SHL,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(shift)));    } else     if (shift == 32) {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));    } else     if (shift == 33) {      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lhsReg,TypeReference.Int),new MemoryOperand(null,new RegisterOperand(lowrhsReg1,TypeReference.Int),(byte)1,Offset.zero(),(byte)4,null,null))));      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));    } else     if (shift == 34) {      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lhsReg,TypeReference.Int),new MemoryOperand(null,new RegisterOperand(lowrhsReg1,TypeReference.Int),(byte)2,Offset.zero(),(byte)4,null,null))));      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));    } else     if (shift == 35) {      EMIT(CPOS(s,MIR_Lea.create(IA32_LEA,new RegisterOperand(lhsReg,TypeReference.Int),new MemoryOperand(null,new RegisterOperand(lowrhsReg1,TypeReference.Int),(byte)3,Offset.zero(),(byte)4,null,null))));      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));    } else {      if ((maskWith3f) || (shift < 64)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,new RegisterOperand(lhsReg,TypeReference.Int),IC((shift - 32) & 0x1F))));        EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));      } else {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),IC(0))));        EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0)));      }    }  } else {    throw new OptimizingCompilerException("BURS_Helpers","unexpected parameters: " + result + "="+ val1+ "<<"+ val2);  }}  }
class C{  public static float[] checkArrayElementsInRange(float[] value,float lower,float upper,String valueName){  checkNotNull(value,valueName + " must not be null");  for (int i=0; i < value.length; ++i) {    float v=value[i];    if (Float.isNaN(v)) {      throw new IllegalArgumentException(valueName + "[" + i+ "] must not be NaN");    } else     if (v < lower) {      throw new IllegalArgumentException(String.format(Locale.US,"%s[%d] is out of range of [%f, %f] (too low)",valueName,i,lower,upper));    } else     if (v > upper) {      throw new IllegalArgumentException(String.format(Locale.US,"%s[%d] is out of range of [%f, %f] (too high)",valueName,i,lower,upper));    }  }  return value;}  }
class C{  @Override public Object[] filter(Viewer viewer,Object parent,Object[] elements){  List<Object> out=new ArrayList<>();  for (  Object element : elements) {    if (select(viewer,parent,element)) {      out.add(element);    } else {      if (element instanceof InvocationSequenceData) {        InvocationSequenceData data=(InvocationSequenceData)element;        if (data.getChildCount() > 0) {          out.addAll(Arrays.asList(filter(viewer,parent,data.getNestedSequences().toArray())));        }      }    }  }  return out.toArray();}  }
class C{  public Object addDesignation(Object entity,String uri) throws RepositoryException {  return addDesignations(entity,getValueFactory().createURI(uri));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.191 -0500",hash_original_method="6C42916FD841C6EAFF0C495955BCFCAE",hash_generated_method="3CD52E527983D594DC6FD8A7ED8202B5") synchronized void maybeRemoveState(Activity activity,NfcActivityState state){  if (state.ndefMessage == null && state.ndefMessageCallback == null && state.onNdefPushCompleteCallback == null) {    NfcFragment.remove(activity);    mNfcState.remove(activity);  }}  }
class C{  public int fontSize(){  return 0;}  }
class C{  Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  public void addDropItem(final Item item){  dropItemInstances.add(item);}  }
class C{  OpenBook(PageFormat format,Printable painter){  mFormat=format;  mPainter=painter;}  }
class C{  @Override public boolean matches(String path){  if (path == null) {    return false;  }  for (  FileMatcher reject : rejectList) {    if (reject.matches(path)) {      return false;    }  }  if (acceptList.length == 0) {    return true;  }  for (  FileMatcher accept : acceptList) {    if (accept.matches(path)) {      return true;    }  }  return false;}  }
class C{  public final double doOperation(){  int numNodes=treeModel.getNodeCount();  double logHastingRatio=0;  double chooseOperator=Math.random();  int K_int=(int)K.getParameterValue(0);  int selectedI=-1;  double[] logNumeratorProb=new double[numNodes];  int isOn=0;  int I_selected=-1;  while (isOn == 0) {    I_selected=(int)(Math.floor(Math.random() * binSize));    isOn=(int)excisionPoints.getParameterValue(I_selected);    if (isOn == 1) {      int originalSite=(int)indicators.getParameterValue(I_selected);      int[] numStepsFromOrigin=new int[numNodes];      for (int i=0; i < numNodes; i++) {        numStepsFromOrigin[i]=100000;      }      int curElementNumber=(int)indicators.getParameterValue(I_selected);      int rootElementNumber=curElementNumber;      NodeRef curElement=treeModel.getNode(curElementNumber);      LinkedList<NodeRef> visitlist=new LinkedList<NodeRef>();      LinkedList<NodeRef> fromlist=new LinkedList<NodeRef>();      LinkedList<Integer> nodeLevel=new LinkedList<Integer>();      LinkedList<Integer> possibilities=new LinkedList<Integer>();      NodeRef dummyNode=null;      visitlist.add(curElement);      fromlist.add(dummyNode);      nodeLevel.add(new Integer(0));      int maxNodeLevel=1000;      while (visitlist.size() > 0) {        if (treeModel.getParent(curElement) != null) {          NodeRef node=treeModel.getParent(curElement);          if (fromlist.getFirst() != node) {            if (nodeLevel.getFirst() < maxNodeLevel) {              visitlist.add(node);              fromlist.add(curElement);              nodeLevel.add(new Integer(nodeLevel.getFirst() + 1));            }          }        }        for (int childNum=0; childNum < treeModel.getChildCount(curElement); childNum++) {          NodeRef node=treeModel.getChild(curElement,childNum);          if (fromlist.getFirst() != node) {            if (nodeLevel.getFirst() < maxNodeLevel) {              visitlist.add(node);              fromlist.add(curElement);              nodeLevel.add(new Integer(nodeLevel.getFirst() + 1));            }          }        }        int site_test=curElement.getNumber();        int hasBeenAdded=0;        for (int i=0; i < binSize; i++) {          if (indicators.getParameterValue(i) == site_test) {            hasBeenAdded=1;            break;          }        }        if (hasBeenAdded == 0 || curElement.getNumber() == rootElementNumber) {          numStepsFromOrigin[site_test]=nodeLevel.getFirst();          possibilities.addLast(new Integer(site_test));        } else {        }        visitlist.pop();        fromlist.pop();        nodeLevel.pop();        if (visitlist.size() > 0) {          curElement=visitlist.getFirst();        }      }      for (int curSite=0; curSite < numNodes; curSite++) {        int hasBeenAdded=0;        for (int i=0; i < binSize; i++) {          if (indicators.getParameterValue(i) == curSite) {            hasBeenAdded=1;            break;          }        }        if (hasBeenAdded == 1) {          double inf=Double.NEGATIVE_INFINITY;          logNumeratorProb[curSite]=inf;        } else {          int site_add=curSite;          indicators.setParameterValue(I_selected,site_add);          int K_count=0;          for (int i=0; i < binSize; i++) {            K_count+=(int)excisionPoints.getParameterValue(i);          }          K.setParameterValue(0,K_count);          K_int=K_count;          setClusterLabels(K_int);          double[] meanYear=new double[binSize];          double[] groupCount=new double[binSize];          for (int i=0; i < numdata; i++) {            int label=(int)clusterLabels.getParameterValue(i);            double year=0;            if (virusOffsetsParameter != null) {              year=virusOffsetsParameter.getParameterValue(i);            } else {              System.out.println("virus Offeset Parameter NOT present. We expect one though. Something is wrong.");            }            meanYear[label]=meanYear[label] + year;            groupCount[label]=groupCount[label] + 1;          }          for (int i=0; i < binSize; i++) {            if (groupCount[i] > 0) {              meanYear[i]=meanYear[i] / groupCount[i];            }          }          mu0_offset=new double[binSize];          for (int i=0; i < binSize; i++) {            mu0_offset[i]=meanYear[i];          }          for (int i=0; i < numdata; i++) {            int label=(int)clusterLabels.getParameterValue(i);            Parameter vLoc=virusLocations.getParameter(i);            double muValue=mu.getParameter(label).getParameterValue(0);            vLoc.setParameterValue(0,muValue);            double muValue2=mu.getParameter(label).getParameterValue(1);            vLoc.setParameterValue(1,muValue2);          }          for (int i=0; i < numdata; i++) {            int label=(int)clusterLabels.getParameterValue(i);            if (clusterOffsetsParameter != null) {              clusterOffsetsParameter.setParameterValue(i,mu0_offset[label]);            }          }          logNumeratorProb[curSite]=clusterLikelihood.getLogLikelihood();        }      }      selectedI=I_selected;      double maxLogProb=logNumeratorProb[0];      for (int i=0; i < numNodes; i++) {        if (logNumeratorProb[i] > maxLogProb) {          maxLogProb=logNumeratorProb[i];        }      }      double sumLogDenominator=0;      for (int i=0; i < numNodes; i++) {        if (logNumeratorProb[i] != Double.NEGATIVE_INFINITY) {          sumLogDenominator+=Math.exp((logNumeratorProb[i] - maxLogProb));        }      }      sumLogDenominator=Math.log(sumLogDenominator) + maxLogProb;      double sumProb=0;      double[] condProb=new double[numNodes];      for (int i=0; i < numNodes; i++) {        condProb[i]=Math.exp(logNumeratorProb[i] - sumLogDenominator);        sumProb+=condProb[i];        if (condProb[i] > 0.01) {        }      }      int site_add=MathUtils.randomChoicePDF(condProb);      if (numStepsFromOrigin[site_add] > 0) {        System.out.println("Gibbs move: indicator " + I_selected + " from site "+ originalSite+ " to "+ site_add+ " , chosen with prob ="+ condProb[site_add]+ " steps from previous placement="+ numStepsFromOrigin[site_add]);      }      indicators.setParameterValue(I_selected,site_add);    }  }  int K_count=0;  for (int i=0; i < binSize; i++) {    K_count+=(int)excisionPoints.getParameterValue(i);  }  K.setParameterValue(0,K_count);  K_int=K_count;  setClusterLabels(K_int);  double[] meanYear=new double[binSize];  double[] groupCount=new double[binSize];  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    double year=0;    if (virusOffsetsParameter != null) {      year=virusOffsetsParameter.getParameterValue(i);    } else {      System.out.println("virus Offeset Parameter NOT present. We expect one though. Something is wrong.");    }    meanYear[label]=meanYear[label] + year;    groupCount[label]=groupCount[label] + 1;  }  for (int i=0; i < binSize; i++) {    if (groupCount[i] > 0) {      meanYear[i]=meanYear[i] / groupCount[i];    }  }  mu0_offset=new double[binSize];  for (int i=0; i < binSize; i++) {    mu0_offset[i]=meanYear[i];  }  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    Parameter vLoc=virusLocations.getParameter(i);    double muValue=mu.getParameter(label).getParameterValue(0);    vLoc.setParameterValue(0,muValue);    double muValue2=mu.getParameter(label).getParameterValue(1);    vLoc.setParameterValue(1,muValue2);  }  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    if (clusterOffsetsParameter != null) {      clusterOffsetsParameter.setParameterValue(i,mu0_offset[label]);    }  }  return (logHastingRatio);}  }
class C{  public void addObservations(int states[][]){  int rows=states.length;  int columns=states[0].length;  if (rows - k - (k - 1) <= 0) {    return;  }  observations+=(rows - k - (k - 1)) * columns;  int[] prevVal=new int[columns];  int[] nextVal=new int[columns];  for (int c=0; c < columns; c++) {    prevVal[c]=0;    nextVal[c]=0;    for (int p=0; p < k; p++) {      prevVal[c]*=numDiscreteValues;      prevVal[c]+=states[p][c];      nextVal[c]*=numDiscreteValues;      nextVal[c]+=states[k - 1 + p][c];    }  }  for (int r=k; r < rows - (k - 1); r++) {    for (int c=0; c < columns; c++) {      nextVal[c]-=maxShiftedValue[states[r - 1][c]];      nextVal[c]*=numDiscreteValues;      nextVal[c]+=states[k - 1 + r][c];      jointCount[nextVal[c]][prevVal[c]]++;      prevCount[prevVal[c]]++;      nextCount[nextVal[c]]++;      prevVal[c]-=maxShiftedValue[states[r - k][c]];      prevVal[c]*=numDiscreteValues;      prevVal[c]+=states[r][c];    }  }}  }
class C{  public byte[] readCountedString() throws WireParseException {  require(1);  int len=array[pos++] & 0xFF;  return readByteArray(len);}  }
class C{  public void stop() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  stop(null);}  }
class C{  public Topic(String name,ConsumerConnector consumerConnector,int numStreams){  this(name,consumerConnector,numStreams,new LinkedBlockingQueue<String>(MAX_BUFFER_SIZE));}  }
class C{  public GTextField(AbstractFormatter format){  super(format);  this.setHorizontalAlignment(SwingConstants.RIGHT);}  }
class C{  final static void assertPropertyNames(final Map<String,Object> propertySet){  if (propertySet == null)   throw new IllegalArgumentException();  final Iterator<String> itr=propertySet.keySet().iterator();  while (itr.hasNext()) {    final String col=itr.next();    NameChecker.assertColumnName(col);  }}  }
class C{  public <V2>JavaPairRDD<Tuple2<K,V>,V2> joinGeodeRegion(String regionPath){  return joinGeodeRegion(regionPath,rddf.defaultConnectionConf());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.610 -0400",hash_original_method="73B8AD9875B828074FB8FD23336E0644",hash_generated_method="E233A70058E71C3276865825FB30D958") private List<ResolveInfo> findGlobalSearchActivities(){  Intent intent=new Intent(SearchManager.INTENT_ACTION_GLOBAL_SEARCH);  PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> activities=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    Collections.sort(activities,GLOBAL_SEARCH_RANKER);  }  return activities;}  }
class C{  public Help(Frame frame,String title,String helpHtml){  super(frame,title,false);  try {    jbInit();    info.setContentType("text/html");    info.setEditable(false);    info.setBackground(AdempierePLAF.getFieldBackground_Inactive());    info.setText(helpHtml);  } catch (  Exception ex) {    log.log(Level.SEVERE,"Help",ex);  }  AEnv.positionCenterWindow(frame,this);}  }
class C{  public T allocate(){  T value=_freeRing.allocate();  if (value != null) {    return value;  }  return _freeRingSoft.allocate();}  }
class C{  public static Integer[] allPossiblePolynomials(){  List<Integer> result=new ArrayList<Integer>();  for (int i=0; i < FIELD_SIZE; i++) {    try {      generateLogTable(i);      result.add(i);    } catch (    RuntimeException e) {    }  }  return result.toArray(new Integer[result.size()]);}  }
class C{  public Message(String name,Object source,long when){  super(source);  this.name=name;  this.when=when;}  }
class C{  public List<RichTranslation<IString,String>> decode(Sequence<IString> source,int sourceInputId,int threadId){  final InputProperties inputProps=inputPropertiesList != null && sourceInputId < inputPropertiesList.size() ? inputPropertiesList.get(sourceInputId) : new InputProperties();  final List<Sequence<IString>> targets=forceDecodeReferences == null ? null : forceDecodeReferences.get(sourceInputId);  return decode(source,sourceInputId,threadId,nbestListSize,targets,inputProps);}  }
class C{  public void readState(DataInputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   mt[x]=stream.readInt();  len=mag01.length;  for (int x=0; x < len; x++)   mag01[x]=stream.readInt();  mti=stream.readInt();  __nextNextGaussian=stream.readDouble();  __haveNextNextGaussian=stream.readBoolean();}  }
class C{  public static ArrayList<Object> deleteItemSets(ArrayList<Object> itemSets,int minSupport,int maxSupport){  ArrayList<Object> newVector=new ArrayList<Object>(itemSets.size());  for (int i=0; i < itemSets.size(); i++) {    LabeledItemSet current=(LabeledItemSet)itemSets.get(i);    if ((current.m_ruleSupCounter >= minSupport) && (current.m_ruleSupCounter <= maxSupport)) {      newVector.add(current);    }  }  return newVector;}  }
class C{  private void lazyInit(){  if (tokenizer == null) {    if (streamabilityViolationPolicy == XmlViolationPolicy.ALLOW) {      this.saxTreeBuilder=new SAXTreeBuilder();      this.treeBuilder=this.saxTreeBuilder;      this.saxStreamer=null;      this.tokenizer=new Driver(treeBuilder,true);    } else {      this.saxStreamer=new SAXStreamer();      this.treeBuilder=this.saxStreamer;      this.saxTreeBuilder=null;      this.tokenizer=new Driver(treeBuilder);    }    this.tokenizer.setErrorHandler(errorHandler);    this.treeBuilder.setErrorHandler(treeBuilderErrorHandler);    this.tokenizer.setCheckingNormalization(checkingNormalization);    this.tokenizer.setCommentPolicy(commentPolicy);    this.tokenizer.setContentNonXmlCharPolicy(contentNonXmlCharPolicy);    this.tokenizer.setContentSpacePolicy(contentSpacePolicy);    this.tokenizer.setHtml4ModeCompatibleWithXhtml1Schemata(html4ModeCompatibleWithXhtml1Schemata);    this.tokenizer.setMappingLangToXmlLang(mappingLangToXmlLang);    this.tokenizer.setXmlnsPolicy(xmlnsPolicy);    this.tokenizer.setHeuristics(heuristics);    for (    CharacterHandler characterHandler : characterHandlers) {      this.tokenizer.addCharacterHandler(characterHandler);    }    this.treeBuilder.setDoctypeExpectation(doctypeExpectation);    this.treeBuilder.setDocumentModeHandler(documentModeHandler);    this.treeBuilder.setIgnoringComments(lexicalHandler == null);    this.treeBuilder.setScriptingEnabled(scriptingEnabled);    this.treeBuilder.setReportingDoctype(reportingDoctype);    this.treeBuilder.setNamePolicy(namePolicy);    if (saxStreamer != null) {      saxStreamer.setContentHandler(contentHandler == null ? new DefaultHandler() : contentHandler);      saxStreamer.setLexicalHandler(lexicalHandler);      tokenizer.setAllowRewinding(false);    }  }}  }
class C{  public static Patch<String> parseUnifiedDiff(List<String> diff){  boolean inPrelude=true;  List<String[]> rawChunk=new ArrayList<String[]>();  Patch<String> patch=new Patch<String>();  int old_ln=0, new_ln=0;  String tag;  String rest;  for (  String line : diff) {    if (inPrelude) {      if (line.startsWith("+++")) {        inPrelude=false;      }      continue;    }    Matcher m=unifiedDiffChunkRe.matcher(line);    if (m.find()) {      if (rawChunk.size() != 0) {        List<String> oldChunkLines=new ArrayList<String>();        List<String> newChunkLines=new ArrayList<String>();        for (        String[] raw_line : rawChunk) {          tag=raw_line[0];          rest=raw_line[1];          if (tag.equals(" ") || tag.equals("-")) {            oldChunkLines.add(rest);          }          if (tag.equals(" ") || tag.equals("+")) {            newChunkLines.add(rest);          }        }        patch.addDelta(new ChangeDelta<String>(new Chunk<String>(old_ln - 1,oldChunkLines),new Chunk<String>(new_ln - 1,newChunkLines)));        rawChunk.clear();      }      old_ln=m.group(1) == null ? 1 : Integer.parseInt(m.group(1));      new_ln=m.group(3) == null ? 1 : Integer.parseInt(m.group(3));      if (old_ln == 0) {        old_ln+=1;      }      if (new_ln == 0) {        new_ln+=1;      }    } else {      if (line.length() > 0) {        tag=line.substring(0,1);        rest=line.substring(1);        if (tag.equals(" ") || tag.equals("+") || tag.equals("-")) {          rawChunk.add(new String[]{tag,rest});        }      } else {        rawChunk.add(new String[]{" ",""});      }    }  }  if (rawChunk.size() != 0) {    List<String> oldChunkLines=new ArrayList<String>();    List<String> newChunkLines=new ArrayList<String>();    for (    String[] raw_line : rawChunk) {      tag=raw_line[0];      rest=raw_line[1];      if (tag.equals(" ") || tag.equals("-")) {        oldChunkLines.add(rest);      }      if (tag.equals(" ") || tag.equals("+")) {        newChunkLines.add(rest);      }    }    patch.addDelta(new ChangeDelta<String>(new Chunk<String>(old_ln - 1,oldChunkLines),new Chunk<String>(new_ln - 1,newChunkLines)));    rawChunk.clear();  }  return patch;}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean matches(CharSequence self,Pattern pattern){  return pattern.matcher(self).matches();}  }
class C{  public static double tan(double x){  boolean negative=false;  int quadrant=0;  double xa=x;  if (x < 0) {    negative=true;    xa=-xa;  }  if (xa == 0.0) {    long bits=Double.doubleToRawLongBits(x);    if (bits < 0) {      return -0.0;    }    return 0.0;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  double xb=0;  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }  if (xa > 1.5) {    final double pi2a=1.5707963267948966;    final double pi2b=6.123233995736766E-17;    final double a=pi2a - xa;    double b=-(a - pi2a + xa);    b+=pi2b - xb;    xa=a + b;    xb=-(xa - a - b);    quadrant^=1;    negative^=true;  }  double result;  if ((quadrant & 1) == 0) {    result=tanQ(xa,xb,false);  } else {    result=-tanQ(xa,xb,true);  }  if (negative) {    result=-result;  }  return result;}  }
class C{  @Override protected void createCandidates(Response response){  createRelayedCandidate(response);}  }
class C{  @SafeVarargs public static <T>Source<T> combineWithValues(Source<T> source,T... values){  return ntimesThen(values.length,Arbitrary.sequence(java.util.Arrays.asList(values)),source);}  }
class C{  @SuppressLint("GetInstance") public ObfuscatingSecretKeyWrapper(Context context,int saltIndex,SaltGenerator saltGenerator,String presharedSecret) throws NoSuchPaddingException, NoSuchAlgorithmException {  mContext=context.getApplicationContext();  mSaltIndex=saltIndex;  mSaltGenerator=saltGenerator;  mPresharedSecret=presharedSecret;  mCipher=Cipher.getInstance(WRAPPED_KEY_TRANSFORMATION);}  }
class C{  public static void performSlice(Pair<Long,FrameBlock> in,IndexRange ixrange,int brlen,int bclen,ArrayList<Pair<Long,FrameBlock>> outlist) throws DMLRuntimeException {  long index=in.getKey();  FrameBlock block=in.getValue();  long cellIndexTopRow=index;  long cellIndexBottomRow=index + block.getNumRows() - 1;  long cellIndexLeftCol=1;  long cellIndexRightCol=block.getNumColumns();  long cellIndexOverlapTop=Math.max(cellIndexTopRow,ixrange.rowStart);  long cellIndexOverlapBottom=Math.min(cellIndexBottomRow,ixrange.rowEnd);  long cellIndexOverlapLeft=Math.max(cellIndexLeftCol,ixrange.colStart);  long cellIndexOverlapRight=Math.min(cellIndexRightCol,ixrange.colEnd);  if (cellIndexOverlapTop > cellIndexOverlapBottom || cellIndexOverlapLeft > cellIndexOverlapRight) {    return;  }  IndexRange tmpRange=new IndexRange(cellIndexOverlapTop - index,cellIndexOverlapBottom - index,cellIndexOverlapLeft - 1,cellIndexOverlapRight - 1);  int rowCut=(int)(ixrange.rowStart - index);  long resultBlockIndexTop=UtilFunctions.computeBlockIndex(cellIndexOverlapTop,brlen);  long resultBlockIndexBottom=UtilFunctions.computeBlockIndex(cellIndexOverlapBottom,brlen);  for (long r=resultBlockIndexTop; r <= resultBlockIndexBottom; r++) {    ValueType[] schema=Arrays.copyOfRange(block.getSchema(),(int)tmpRange.colStart,(int)tmpRange.colEnd + 1);    long iResultIndex=Math.max(((r - 1) * brlen - ixrange.rowStart + 1),0);    Pair<Long,FrameBlock> out=new Pair<Long,FrameBlock>(new Long(iResultIndex + 1),new FrameBlock(schema));    outlist.add(out);  }  block.sliceOperations(outlist,tmpRange,rowCut);}  }
class C{  protected int read(){  int curByte=0;  try {    curByte=in.read();  } catch (  IOException e) {    status=STATUS_FORMAT_ERROR;  }  return curByte;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.910 -0500",hash_original_method="7B881B99117D66C1BDF145A59ABEA2E4",hash_generated_method="6D4D21FFADBEBA8B3BCD864B371D97DD") public final SIPRequest createErrorAck(To responseToHeader) throws SipException, ParseException {  SIPRequest newRequest=new SIPRequest();  newRequest.setRequestLine((RequestLine)this.requestLine.clone());  newRequest.setMethod(Request.ACK);  newRequest.setHeader((Header)this.callIdHeader.clone());  newRequest.setHeader((Header)this.maxForwardsHeader.clone());  newRequest.setHeader((Header)this.fromHeader.clone());  newRequest.setHeader((Header)responseToHeader.clone());  newRequest.addFirst((Header)this.getTopmostVia().clone());  newRequest.setHeader((Header)cSeqHeader.clone());  newRequest.getCSeq().setMethod(Request.ACK);  if (this.getRouteHeaders() != null) {    newRequest.setHeader((SIPHeaderList)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public static void main(String args[]){  List<String> files=new ArrayList<String>();  files.addAll(Arrays.asList(args));  System.out.println();  System.out.println("jflex:\n" + execJFlex(new ArrayList<String>(),files));  try {    System.out.println("class:\n" + execClass("jflextest.Main",".",new ArrayList<String>(),files,"1.7.0-SNAPSHOT","UTF-8"));  } catch (  UnsupportedEncodingException e) {    System.out.println("UTF-8 is not a supported encoding.");    System.exit(1);  }}  }
class C{  public float loadFloat(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,Object> encodeToMap(LoggingEvent loggingEvent,boolean includeLocationInfo){  Map<String,Object> logstashEvent=new LoggingEventMap();  String threadName=loggingEvent.getThreadName();  long timestamp=loggingEvent.getTimeStamp();  HashMap<String,Object> exceptionInformation=new HashMap<String,Object>();  Map mdc=loggingEvent.getProperties();  String ndc=loggingEvent.getNDC();  logstashEvent.put("@version",VERSION);  logstashEvent.put("@timestamp",dateFormat(timestamp));  logstashEvent.put("source_host",getHostname());  logstashEvent.put("message",loggingEvent.getRenderedMessage());  if (loggingEvent.getThrowableInformation() != null) {    final ThrowableInformation throwableInformation=loggingEvent.getThrowableInformation();    if (throwableInformation.getThrowable().getClass().getCanonicalName() != null) {      exceptionInformation.put("exception_class",throwableInformation.getThrowable().getClass().getCanonicalName());    }    if (throwableInformation.getThrowable().getMessage() != null) {      exceptionInformation.put("exception_message",throwableInformation.getThrowable().getMessage());    }    if (throwableInformation.getThrowableStrRep() != null) {      StringBuilder stackTrace=new StringBuilder();      for (      String line : throwableInformation.getThrowableStrRep()) {        stackTrace.append(line);        stackTrace.append("\n");      }      exceptionInformation.put("stacktrace",stackTrace);    }    logstashEvent.put("exception",exceptionInformation);  }  if (includeLocationInfo) {    LocationInfo info=loggingEvent.getLocationInformation();    logstashEvent.put("file",info.getFileName());    logstashEvent.put("line_number",info.getLineNumber());    logstashEvent.put("class",info.getClassName());    logstashEvent.put("method",info.getMethodName());  }  logstashEvent.put("logger_name",loggingEvent.getLoggerName());  logstashEvent.put("mdc",mdc);  logstashEvent.put("ndc",ndc);  logstashEvent.put("level",loggingEvent.getLevel().toString());  logstashEvent.put("thread_name",threadName);  return logstashEvent;}  }
class C{  public void hideClings(){  for (int i=0; i < mClingMap.size(); i++) {    mClingMap.valueAt(i).setVisibility(View.INVISIBLE);  }}  }
class C{  public MaterialEditText underlineColor(int color){  mUnderlineColor=color;  mEditText.getBackground().setColorFilter(mUnderlineColor,PorterDuff.Mode.SRC_ATOP);  if (!mExpand) {    mEditTextLayout.setBackgroundColor(mUnderlineColor);  }  return this;}  }
class C{  static void enableShutdownHooks(){}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  public SerializationException(final Throwable cause){  super(cause);}  }
class C{  private static double distance(double[] pointA,double[] pointB){  double distance=0.0;  for (int i=0; i < pointA.length; i++) {    double d=pointA[i] - pointB[i];    distance+=d * d;  }  return Math.sqrt(distance);}  }
class C{  @Benchmark public void escapedUnderscoreCoding(){  run();}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  for (  DataFlavor flavor2 : flavors) {    if (flavor2.equals(flavor)) {      return true;    }  }  return false;}  }
class C{  protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);  }}  }
class C{  public static Object detectLinuxDefaultFileBrowser(Map<String,Object> fileBrowsers){  ArrayList<String> command=new ArrayList<String>();  command.add("xdg-mime");  command.add("query");  command.add("default");  command.add("inode/directory");  if (fileBrowsers == null) {    fileBrowsers=new HashMap<String,Object>();    fileBrowsers.put(".*","*");  }  return Utils.isExpectedCommandOutput(command,fileBrowsers);}  }
class C{  @Override public TaskBulkRep queryBulkResourceReps(List<URI> ids){  Iterator<Task> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  return new TaskBulkRep(BulkList.wrapping(_dbIterator,MapTask.getInstance()));}  }
class C{  private void initialize(){  Log.d(TAG,"initialize()");  this.setOrientation(LinearLayout.HORIZONTAL);  if (_icon == null) {    _icon=new ImageView(this.getContext());    _icon.setLayoutParams(new LayoutParams(0,LayoutParams.MATCH_PARENT,ICON_WEIGHT));    _icon.setScaleType(ImageView.ScaleType.CENTER_INSIDE);    if (_iconResource != null && _iconResource != 0) {      _icon.setImageResource(_iconResource);    }    this.addView(_icon);  }  if (_editText == null) {    _editText=new EditText(this.getContext());    _editText.setInputType(_isPassword ? InputType.TYPE_TEXT_VARIATION_PASSWORD : InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);    _editText.setLayoutParams(new LayoutParams(0,LayoutParams.MATCH_PARENT,EDIT_TEXT_WEIGHT));    if (_hint != null) {      _editText.setHint(String.format("%s%s",HINT_PREFIX,_hint.toLowerCase()));    }    this.addView(_editText);  }}  }
class C{  public EventFilter clone(){  EventFilter result=new EventFilter();  if (SelectClauses != null) {    result.SelectClauses=new SimpleAttributeOperand[SelectClauses.length];    for (int i=0; i < SelectClauses.length; i++)     result.SelectClauses[i]=SelectClauses[i].clone();  }  result.WhereClause=WhereClause == null ? null : WhereClause.clone();  return result;}  }
class C{  public AreaRenderer(){  super();  this.endType=AreaRendererEndType.TAPER;  setBaseLegendShape(new Rectangle2D.Double(-4.0,-4.0,8.0,8.0));}  }
class C{  @Override public void injectedScore(String url,WebPage row) throws ScoringFilterException {  for (  ScoringFilter filter : filters) {    filter.injectedScore(url,row);  }}  }
class C{  public DisposableArray(final int capacity){  super(capacity);}  }
class C{  public void copy(Object src,Object dst){  cmdLine.copy(getProject().file(src),getProject().file(dst));}  }
class C{  @Transactional public RevisionPetition createRevisionPetition(RevisionPetition objection){  if (objection.getId() == null)   objection=persist(objection); else   objection=merge(objection);  return objection;}  }
class C{  @Deprecated public static void add(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {  try {    add(name,BigDecimal.valueOf(amount));  } catch (  ArithmeticException e) {    logger.log(Level.WARNING,"Failed to add " + amount + " to balance of "+ name+ ": "+ e.getMessage(),e);  }}  }
class C{  public void addListener(UpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  if (isDestroyed()) {    throw new IllegalStateException("Statement is in destroyed state");  }  statementListenerSet.addListener(listener);  statementContext.getStatementResultService().setUpdateListeners(statementListenerSet,false);  statementLifecycleSvc.dispatchStatementLifecycleEvent(new StatementLifecycleEvent(this,StatementLifecycleEvent.LifecycleEventType.LISTENER_ADD,listener));}  }
class C{  public void destroy(ServletContext sc){  FACES_CONFIG_PROCESSOR_CHAIN.destroy(sc);  initializedContexts.remove(sc);}  }
class C{  public long readLock(){  long s=state, next;  return ((whead == wtail && (s & ABITS) < RFULL && U.compareAndSwapLong(this,STATE,s,next=s + RUNIT)) ? next : acquireRead(false,0L));}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.currentTemplateRuleIsNull()) {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NO_APPLY_IMPORT_IN_FOR_EACH);  }  int sourceNode=transformer.getXPathContext().getCurrentNode();  if (DTM.NULL != sourceNode) {    ElemTemplate matchTemplate=transformer.getMatchedTemplate();    transformer.applyTemplateToNode(this,matchTemplate,sourceNode);  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_SOURCENODE_APPLYIMPORTS);  }}  }
class C{  public static String fileNameClean(String s){  char[] chars=s.toCharArray();  StringBuffer sb=new StringBuffer();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')|| (c == '_')) {      sb.append(c);    } else {      if (c == ' ' || c == '-') {        sb.append('_');      } else {        sb.append("x" + (int)c + "x");      }    }  }  return sb.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PartialCorrelationPdf(int n,int k){  this.n=n;  this.k=k;  double gammaRatio=gammaRatio(n,k);  this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio;  this.outsideExp=(double)(n - k - 2) / 2.0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.ENTRY__KIND:    return getKind();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException();  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  @Override public boolean supportsFullOuterJoins(){  debugCodeCall("supportsFullOuterJoins");  return false;}  }
class C{  private static boolean isPollingPageFar(GraalHotSpotVMConfig config){  final long pollingPageAddress=config.safepointPollingAddress;  return config.forceUnreachable || !isInt(pollingPageAddress - config.codeCacheLowBound) || !isInt(pollingPageAddress - config.codeCacheHighBound);}  }
class C{  int error_bound(boolean[] enough,double endl,double endr,double[] ritz,double[] bnd,int step,double tol){  int mid, neig;  int i;  double gapl, gap;  mid=svd_idamax(step + 1,bnd,0,1);  for (i=((step + 1) + (step - 1)) / 2; i >= mid + 1; i-=1)   if (fabs(ritz[i - 1] - ritz[i]) < eps34 * fabs(ritz[i]))   if (bnd[i] > tol && bnd[i - 1] > tol) {    bnd[i - 1]=Math.sqrt(bnd[i] * bnd[i] + bnd[i - 1] * bnd[i - 1]);    bnd[i]=0.0;  }  for (i=((step + 1) - (step - 1)) / 2; i <= mid - 1; i+=1)   if (fabs(ritz[i + 1] - ritz[i]) < eps34 * fabs(ritz[i]))   if (bnd[i] > tol && bnd[i + 1] > tol) {    bnd[i + 1]=Math.sqrt(bnd[i] * bnd[i] + bnd[i + 1] * bnd[i + 1]);    bnd[i]=0.0;  }  neig=0;  gapl=ritz[step] - ritz[0];  for (i=0; i <= step; i++) {    gap=gapl;    if (i < step)     gapl=ritz[i + 1] - ritz[i];    gap=svd_dmin(gap,gapl);    if (gap > bnd[i])     bnd[i]=bnd[i] * (bnd[i] / gap);    if (bnd[i] <= 16.0 * eps * fabs(ritz[i])) {      neig++;      if (!enough[0])       enough[0]=endl < ritz[i] && ritz[i] < endr;    }  }  return neig;}  }
class C{  public void validationWarning(int line,int charPositionInLine,String msg){  parseIssues.add(new ParseIssue(line,charPositionInLine,msg,currentFileName,ParseIssueType.VALIDATION_WARNING));  try {    setAtLeastOneWarning(true);    if (currentFileName == null)     log.warn("line " + line + ":"+ charPositionInLine+ " "+ msg); else {      String fileName=currentFileName;      log.warn(fileName + " line " + line+ ":"+ charPositionInLine+ " "+ msg);    }  } catch (  Exception e1) {    log.warn("ERROR: while customizing error message:" + e1);  }}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  static void testMissingStuff(){  Mutant mutant=new Mutant();  try {    int x=mutant.disappearingField;  } catch (  NoSuchFieldError nsfe) {    System.out.println("Got expected NoSuchFieldError");    if (VERBOSE)     System.out.println("--- " + nsfe);  }  try {    int y=Mutant.disappearingStaticField;  } catch (  NoSuchFieldError nsfe) {    System.out.println("Got expected NoSuchFieldError");    if (VERBOSE)     System.out.println("--- " + nsfe);  }  try {    mutant.disappearingMethod();  } catch (  NoSuchMethodError nsme) {    System.out.println("Got expected NoSuchMethodError");    if (VERBOSE)     System.out.println("--- " + nsme);  }  try {    Mutant.disappearingStaticMethod();  } catch (  NoSuchMethodError nsme) {    System.out.println("Got expected NoSuchMethodError");    if (VERBOSE)     System.out.println("--- " + nsme);  }}  }
class C{  @Override public Map<String,Object> handle(ResultSet rs) throws SQLException {  return rs.next() ? this.convert.toMap(rs) : null;}  }
class C{  private boolean verifyChar(char c,int constraint){  if (((constraint & FormatConstraint.TYPE_ANY) != 0) || (((constraint & FormatConstraint.TYPE_NUMERIC) != 0) && (c >= '0') && (c <= '9')) || (((constraint & FormatConstraint.TYPE_UPPERCASE) != 0) && (c >= 'A') && (c <= 'Z'))|| (((constraint & FormatConstraint.TYPE_LOWERCASE) != 0) && (c >= 'a') && (c <= 'z'))) {    return true;  }  if ((constraint & FormatConstraint.TYPE_SYMBOL) != 0) {    char[] symbols=TextField.getSymbolTable();    for (int i=0; i < symbols.length; i++) {      if (symbols[i] == c) {        return true;      }    }  }  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CHALLENGE\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"CHALLENGE_TYPE\" INTEGER NOT NULL ,"+ "\"QUESTION\" TEXT NOT NULL ,"+ "\"CATEGORY_ID\" INTEGER NOT NULL );");}  }
class C{  public void testTempQueue(String prod_broker_url,String cons_broker_url) throws Exception {  int num_msg;  Connection conn;  Session sess;  Destination cons_dest;  num_msg=5;  LOG.info("TESTING TEMP QUEUES " + prod_broker_url + " -> "+ cons_broker_url+ " ("+ num_msg+ " messages)");  conn=createConnection(cons_broker_url);  conn.start();  sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);  LOG.trace("Creating destination");  cons_dest=sess.createTemporaryQueue();  testOneDest(conn,sess,cons_dest,num_msg);  sess.close();  conn.close();}  }
class C{  private CDatabaseCreator(){}  }
class C{  public void addListener(final IDebuggerTemplateManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  protected ConditionRHS_Impl(){  super();}  }
class C{  public int loadInt(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testMeanIndegree(){  int indegree=RandomUtil.getInstance().nextInt(8) + 2;  int mlag=RandomUtil.getInstance().nextInt(9) + 1;  double percentHousekeeping=RandomUtil.getInstance().nextDouble() * 20.0;  SimpleRandomizer simpleRandomizer=new SimpleRandomizer(indegree,SimpleRandomizer.MEAN,mlag,percentHousekeeping);  simpleRandomizer.initialize(this.lagGraph);  int sum=0;  int numNonHousekeeping=0;  SortedSet factors=lagGraph.getFactors();  for (Iterator it=factors.iterator(); it.hasNext(); ) {    String factor=(String)it.next();    SortedSet parents=lagGraph.getParents(factor);    if (parents.size() > 1) {      numNonHousekeeping++;      sum+=parents.size();      System.out.println("# Nonhousekeeping = " + numNonHousekeeping + " This num parents = "+ parents.size()+ " sum = "+ sum);    }  }  if (numNonHousekeeping > 0) {    double mean=(double)sum / (double)numNonHousekeeping;    assertEquals((double)indegree,mean,1.2);  }}  }
class C{  private void readNextBlob(InterceptedStream<InputStream> stream){  try {    byte[] blob=new byte[6048];    int length=stream.getStream().read(blob);    if (length == -1) {      if (closeInterceptedStream(stream))       sendEnd(stream.getIndex());      return;    }    sendBlob(stream.getIndex(),Arrays.copyOf(blob,length));  } catch (  IOException e) {    logger.debug("Unable to read data of intercepted input stream.",e);    if (closeInterceptedStream(stream))     sendEnd(stream.getIndex());  }}  }
class C{  public boolean save(File file,boolean async){  this.file=file;  return save(async);}  }
class C{  public StylesheetHandler(TransformerFactoryImpl processor) throws TransformerConfigurationException {  Class func=org.apache.xalan.templates.FuncDocument.class;  m_funcTable.installFunction("document",func);  func=org.apache.xalan.templates.FuncFormatNumb.class;  m_funcTable.installFunction("format-number",func);  m_optimize=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_OPTIMIZE)).booleanValue();  m_incremental=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_INCREMENTAL)).booleanValue();  m_source_location=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_SOURCE_LOCATION)).booleanValue();  init(processor);}  }
class C{  public static GridData fillTextDefaults(){  GridData data=new GridData();  data.grabExcessHorizontalSpace=true;  data.grabExcessVerticalSpace=false;  data.horizontalAlignment=SWT.FILL;  data.verticalAlignment=SWT.CENTER;  return data;}  }
class C{  @Override public void create(){  Gdx.app.log(TAG,"create() called");  deltaScreen=new DeltaScreen();  textScreen=new FPSScreen();  setScreen(deltaScreen);  Gdx.input.setInputProcessor(new ScreenSwitcher(this,deltaScreen,textScreen));}  }
class C{  public void remove(@Nonnull final String username,@Nonnull final Collection<Long> ids){  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  Objects.requireNonNull(ids);  if (ids.isEmpty()) {    return;  }  final Location location=new Location(NAMESPACE,username);  final NotificationListDeletion delete=new NotificationListDeletion(ids);  final UpdateValue updateValue=new UpdateValue.Builder(location).withUpdate(delete).withStoreOption(StoreValue.Option.RETURN_BODY,false).build();  LOGGER.debug("Updating key (async): {}",location);  try (Timer.Context context=updateTimer.time()){    client.executeAsync(updateValue);  } }  }
class C{  public MapBuilder<K,V> withValueSerializer(OffHeapSerializer<V> serializer){  this.valueSerializer=serializer;  return this;}  }
class C{  private Node nextNode(){  final List<Node> nodes=path.getNodeList();  int nextPos=pathPosition + 1;  Node next=null;  if (nextPos < nodes.size()) {    next=nodes.get(nextPos);  } else   if (path.isLoop()) {    next=nodes.get(0);  }  return next;}  }
class C{  @NoInline @Interruptible public static TIB newTIB(int numVirtualMethods,int alignCode){  int elements=TIB.computeSize(numVirtualMethods);  if (!VM.runningVM) {    return TIB.allocate(elements,alignCode);  }  if (alignCode == AlignmentEncoding.ALIGN_CODE_NONE) {    return (TIB)newRuntimeTable(elements,RVMType.TIBType);  }  RVMType type=RVMType.TIBType;  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  TIB realTib=type.getTypeInformationBlock();  RVMArray fakeType=RVMType.WordArrayType;  TIB fakeTib=fakeType.getTypeInformationBlock();  int headerSize=ObjectModel.computeArrayHeaderSize(fakeType);  int align=ObjectModel.getAlignment(fakeType);  int offset=ObjectModel.getOffsetForAlignment(fakeType,false);  int width=fakeType.getLogElementSize();  int elemBytes=elements << width;  if ((elemBytes >>> width) != elements) {    throwLargeArrayOutOfMemoryError();  }  int size=elemBytes + headerSize + AlignmentEncoding.padding(alignCode);  Selected.Mutator mutator=Selected.Mutator.get();  Address region=allocateSpace(mutator,size,align,offset,type.getMMAllocator(),Plan.DEFAULT_SITE);  region=AlignmentEncoding.adjustRegion(alignCode,region);  Object result=ObjectModel.initializeArray(region,fakeTib,elements,size);  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(fakeTib),size,type.getMMAllocator());  ObjectModel.setTIB(result,realTib);  return (TIB)result;}  }
class C{  public static long parseLong(String string) throws NumberFormatException {  return parseLong(string,10);}  }
class C{  public boolean update(boolean isPowered,int plugType,int batteryLevel){synchronized (mLock) {    final boolean wasPoweredWirelessly=mPoweredWirelessly;    if (isPowered && plugType == BatteryManager.BATTERY_PLUGGED_WIRELESS) {      mPoweredWirelessly=true;      mMustUpdateRestPosition=true;      startDetectionLocked();    } else {      mPoweredWirelessly=false;      if (mAtRest) {        if (plugType != 0 && plugType != BatteryManager.BATTERY_PLUGGED_WIRELESS) {          mMustUpdateRestPosition=false;          clearAtRestLocked();        } else {          startDetectionLocked();        }      }    }    return mPoweredWirelessly && !wasPoweredWirelessly && batteryLevel < WIRELESS_CHARGER_TURN_ON_BATTERY_LEVEL_LIMIT && !mAtRest;  }}  }
class C{  public static Object findString(String str,Object[] list,boolean ignoreCase){  if (str == null) {    return (null);  }  if (ignoreCase) {    for (int i=0; i < list.length; ++i) {      if (str.equalsIgnoreCase(list[i].toString())) {        return (list[i]);      }    }  } else {    for (int i=0; i < list.length; ++i) {      if (str.equals(list[i].toString())) {        return (list[i]);      }    }  }  return (null);}  }
class C{  public T copy(){  T copy=Instantiator.of(type).instantiate();  return copyInto(copy);}  }
class C{  private void registerTableHotkeys(){}  }
class C{  public double[] reflectionCoefficients(){  double[] k=new double[order];  double[] b=new double[order + 1];  b[0]=1.0;  for (int i=0; i < order; i++)   b[i + 1]=a[i + 1] / a[0];  double[] c=new double[order];  for (int i=order; i > 0; i--) {    k[i - 1]=b[i];    double scale=1.0 - k[i - 1] * k[i - 1];    Arrays.fill(c,0.0);    for (int j=0; j < i; j++) {      c[j]=(b[j] - k[i - 1] * b[i - j]) / scale;    }    System.arraycopy(c,0,b,0,i);  }  return k;}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  private void calculateLineHeight(){  lineHeight=maxAscent=0;  for (int i=0; i < syntaxScheme.styles.length; i++) {    Style ss=syntaxScheme.styles[i];    if (ss != null && ss.font != null) {      FontMetrics fm=getFontMetrics(ss.font);      int height=fm.getHeight();      if (height > lineHeight)       lineHeight=height;      int ascent=fm.getMaxAscent();      if (ascent > maxAscent)       maxAscent=ascent;    }  }  Font temp=getFont();  FontMetrics fm=getFontMetrics(temp);  int height=fm.getHeight();  if (height > lineHeight) {    lineHeight=height;  }  int ascent=fm.getMaxAscent();  if (ascent > maxAscent) {    maxAscent=ascent;  }}  }
class C{  public IterationStopWatch(){  this.iterations=new LinkedHashMap<Integer,Map<String,Long>>();  this.identifiers=new LinkedList<String>();  this.operations=new LinkedList<String>();  this.currentIterationValues=null;  this.children=new LinkedHashMap<Integer,Map<String,List<String>>>();}  }
class C{  public void calculate_scores(){  score=0;  if (contents.length == 0) {    API api=API.v();    Set<InfoKind> source=api.getSourceInfoKinds(method);    Set<InfoKind> sink=api.getSinkInfoKinds(method);    if (is_system(method)) {      if (api.isSafeMethod(method))       score=0; else       if (api.isSpecMethod(method))       score=5; else       if (api.isBannedMethod(method))       score=6;      if (!source.isEmpty())       score+=1; else       if (!sink.isEmpty())       score+=2;    }    return;  }  for (  CallChainInfo cci : contents) {    cci.calculate_scores();    calls+=cci.calls;    syscalls+=cci.syscalls;    if (cci.score > score)     score=cci.score;  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static void remove(String label,String units){  factory.remove(label,units);}  }
class C{  public static boolean isVeryDangerous(double d){  return Double.isInfinite(d) || Double.isNaN(d);}  }
class C{  @Override public double mean(){  return ((double)(((long)_min) + (long)_max)) / 2.0;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    removeByDiskKey(entry.diskKey);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  private void checkPairedSensorsNumber(String nameString){  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor_bluetooth_sensor));  instrumentation.waitForIdleSync();  ArrayList<ListView> allListViews=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class);  int number=allListViews.get(0).getCount();  if (number > 0 && EndToEndTestUtils.SOLO.waitForText(nameString,1,EndToEndTestUtils.SHORT_WAIT_TIME)) {    return;  }  Log.d(TAG,"No sensor is paried");  fail("No bluetooth sensor is paired. Please pair at Settings->Bluetooth before running the test.");}  }
class C{  public Tunnel(){  super();}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  private void adjustReports(Vector<Report> reports){  for (  Report nr : reports) {    nr.indent();  }  if (reports.size() > 0) {    reports.get(reports.size() - 1).newlines++;  }}  }
class C{  public Complex(double real,double imag){  this.real=real;  this.imag=imag;}  }
class C{  public static void run(){  Set<String> allPackages=new LinkedHashSet<String>();  for (  SootClass clz : Scene.v().getClasses()) {    allPackages.add(clz.getPackageName());  }  Set<String> pkgsToIgnore=new HashSet<String>();  for (  String pkg : PKGS_TO_IGNORE) {    if (!allPackages.contains(pkg)) {      logger.error("Package in ignore list for sources does not exist: {}",pkg);      droidsafe.main.Main.exit(1);    }    pkgsToIgnore.add(pkg);  }  Set<SootClass> classesNotToIgnore=new HashSet<SootClass>();  for (  String clz : CLASSES_NOT_TO_IGNORE) {    classesNotToIgnore.add(Scene.v().getSootClass(clz));  }  for (  SootClass clz : Scene.v().getClasses()) {    String pkg=clz.getPackageName();    if (pkgsToIgnore.contains(pkg) && !classesNotToIgnore.contains(clz))     continue;    for (    SootMethod m : clz.getMethods()) {      if (API.v().hasSourceInfoKind(m))       continue;      if (m.getReturnType() instanceof PrimType || SootUtils.isStringOrSimilarType(m.getReturnType())) {        API.v().addSourceInfoKind(m,getInfoKindNameFromPkg(pkg),false);      }    }  }}  }
class C{  protected void clearCrPerr(){  cr=cr & ~CR_PERR_MASK;}  }
class C{  private static boolean hasConditions(Request request){  return request.header("If-Modified-Since") != null || request.header("If-None-Match") != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.464 -0500",hash_original_method="C661D43CA4BEB0154AFD6A7B8492896F",hash_generated_method="8964EBEF8322BD4922C3A52D42F0D038") public RequestLine parseSIPRequestLine(String requestLine) throws ParseException {  requestLine+="\n";  return new RequestLineParser(requestLine).parse();}  }
class C{  public String convertTagDefinitionToString(EDataType eDataType,Object instanceValue){  return super.convertToString(eDataType,instanceValue);}  }
class C{  private void write(final int val) throws EncodingException {  if (val < 0 || val > 255) {    throw ErrorFactory.createEncodingException(ErrorKeys.DIFFTOOL_ENCODING_VALUE_OUT_OF_RANGE,"byte value out of range: " + val);  }  this.stream.write(val);}  }
class C{  private boolean resolveTransitively(File ivyXmlFile){  boolean success=true;  ResolveOptions options=new ResolveOptions();  options.setDownload(false);  options.setTransitive(true);  options.setUseCacheOnly(false);  options.setOutputReport(false);  options.setLog(LogOptions.LOG_QUIET);  options.setConfs(new String[]{"*"});  String moduleName="unknown";  String ivyXmlContent=xmlToString(ivyXmlFile);  Matcher matcher=MODULE_NAME_PATTERN.matcher(ivyXmlContent);  if (matcher.find()) {    moduleName=matcher.group(1);  }  ivyXmlContent=ivyXmlContent.replaceAll("\\btransitive\\s*=\\s*[\"']false[\"']","transitive=\"true\"");  File transitiveIvyXmlFile=null;  try {    File buildDir=new File(commonBuildDir,"ivy-transitive-resolve");    if (!buildDir.exists() && !buildDir.mkdirs()) {      throw new BuildException("Could not create temp directory " + buildDir.getPath());    }    matcher=MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());    if (!matcher.matches()) {      throw new BuildException("Unknown ivy.xml module directory: " + ivyXmlFile.getCanonicalPath());    }    String moduleDirPrefix=matcher.group(1).replaceAll("[/\\\\]",".");    transitiveIvyXmlFile=new File(buildDir,"transitive." + moduleDirPrefix + ".ivy.xml");    try (Writer writer=new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile),StandardCharsets.UTF_8)){      writer.write(ivyXmlContent);    }     ResolveReport resolveReport=ivy.resolve(transitiveIvyXmlFile.toURI().toURL(),options);    IvyNodeElement root=IvyNodeElementAdapter.adapt(resolveReport);    for (    IvyNodeElement directDependency : root.getDependencies()) {      String coordinate="/" + directDependency.getOrganization() + "/"+ directDependency.getName();      Dependency dependency=directDependencies.get(coordinate);      if (null == dependency) {        log("ERROR: the following coordinate key does not appear in " + centralizedVersionsFile.getName() + ": "+ coordinate);        success=false;      } else {        dependency.directlyReferenced=true;        if (collectConflicts(directDependency,directDependency,moduleName)) {          success=false;        }      }    }  } catch (  ParseException|IOException e) {    if (null != transitiveIvyXmlFile) {      log("Exception reading " + transitiveIvyXmlFile.getPath() + ": "+ e.toString());    }    success=false;  }  return success;}  }
class C{  public static TextWithMnemonic parseText(final String textWithMnemonic){  if (textWithMnemonic == null) {    throw new IllegalArgumentException("textWithMnemonic cannot be null");  }  int index=-1;  final StringBuffer plainText=new StringBuffer();  for (int i=0; i < textWithMnemonic.length(); i++) {    char ch=textWithMnemonic.charAt(i);    if (ch == '&') {      i++;      if (i >= textWithMnemonic.length()) {        break;      }      ch=textWithMnemonic.charAt(i);      if (ch != '&') {        index=plainText.length();      }    }    plainText.append(ch);  }  return new TextWithMnemonic(plainText.toString(),index);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public LabelFieldEditor(String name,String labelText,Composite parent){  init(name,labelText);  this.labelText=labelText;  createControl(parent);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  if (("image/svg+xml".equals(getContentType()))) {    assertSize("entitySizeSVG",7,entityList);  } else {    assertSize("entitySize",5,entityList);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int i;  int progress=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String whatToAssign=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("col")) {        whatToAssign="column";      } else       if (args[i].toLowerCase().contains("row")) {        whatToAssign="row";      } else       if (args[i].toLowerCase().contains("x")) {        whatToAssign="x";      } else       if (args[i].toLowerCase().contains("y")) {        whatToAssign="y";      } else {        showFeedback("Could not determine what variable to assign to grid cells.");        return;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,-32768);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (whatToAssign.equals("column")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,col);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("row")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,row);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("x")) {      double halfCellSize=image.getCellSizeX() / 2;      double west=image.getWest();      double east=image.getEast();      if (west > east) {        west=west - halfCellSize;        east=east + halfCellSize;      } else {        west=west + halfCellSize;        east=east - halfCellSize;      }      double range=east - west;      double colsLessOne=(double)cols - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          x=west + col / colsLessOne * range;          output.setValue(row,col,x);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("y")) {      double halfCellSize=image.getCellSizeY() / 2;      double north=image.getNorth();      double south=image.getSouth();      if (north > south) {        north=north - halfCellSize;        south=south + halfCellSize;      } else {        north=north + halfCellSize;        south=south - halfCellSize;      }      double range=north - south;      double rowsLessOne=(double)rows - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          y=north - row / rowsLessOne * range;          output.setValue(row,col,y);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IgfsPath path(){  return path;}  }
class C{  public void makeDirty(){  if (!dirty) {    this.dirty=true;    if (getProcess().getDebugMode() == DebugMode.COLLECT_METADATA_AFTER_EXECUTION) {      clear(Port.CLEAR_REAL_METADATA);    }    dirtynessWasPropagated=false;    fireUpdate();  }}  }
class C{  public void reset(){  this.dirty=false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  @Snippet public static Object instanceofExact(Object object,KlassPointer exactHub,Object trueValue,Object falseValue){  if (probability(NOT_FREQUENT_PROBABILITY,object == null)) {    isNull.inc();    return falseValue;  }  GuardingNode anchorNode=SnippetAnchorNode.anchor();  KlassPointer objectHub=loadHubIntrinsic(PiNode.piCastNonNull(object,anchorNode));  if (probability(LIKELY_PROBABILITY,objectHub.notEqual(exactHub))) {    exactMiss.inc();    return falseValue;  }  exactHit.inc();  return trueValue;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getSource() == m_ConfigureBut) {    selectProperty();  } else   if (e.getSource() == m_StatusBox) {    for (int i=0; i < m_Listeners.size(); i++) {      ActionListener temp=(m_Listeners.get(i));      temp.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"Editor status change"));    }    if (m_StatusBox.getSelectedIndex() == 0) {      m_Exp.setUsePropertyIterator(false);      m_ConfigureBut.setEnabled(false);      m_ArrayEditor.getCustomEditor().setEnabled(false);      m_ArrayEditor.setValue(null);      validate();    } else {      if (m_Exp.getPropertyArray() == null) {        selectProperty();      }      if (m_Exp.getPropertyArray() == null) {        m_StatusBox.setSelectedIndex(0);      } else {        m_Exp.setUsePropertyIterator(true);        m_ConfigureBut.setEnabled(true);        m_ArrayEditor.getCustomEditor().setEnabled(true);      }      validate();    }  }}  }
class C{  public boolean isRequiredDRP(){  Object oo=get_Value(COLUMNNAME_IsRequiredDRP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ObjectId createFromLegacyFormat(final int time,final int machine,final int inc){  return new ObjectId(time,machine,inc);}  }
class C{  private void sendPollRequests(){  heartbeatTimer=context.getThreadContext().schedule(context.getElectionTimeout(),null);  final AtomicBoolean complete=new AtomicBoolean();  final Set<ServerMember> votingMembers=new HashSet<>(context.getClusterState().getActiveMemberStates().stream().map(null).collect(Collectors.toList()));  if (votingMembers.isEmpty()) {    context.transition(CopycatServer.State.CANDIDATE);    return;  }  final Quorum quorum=new Quorum(context.getClusterState().getQuorum(),null);  long lastIndex=context.getLog().lastIndex();  Entry lastEntry=lastIndex > 0 ? context.getLog().get(lastIndex) : null;  final long lastTerm;  if (lastEntry != null) {    lastTerm=lastEntry.getTerm();    lastEntry.close();  } else {    lastTerm=0;  }  LOGGER.info("{} - Polling members {}",context.getCluster().member().address(),votingMembers);  for (  ServerMember member : votingMembers) {    LOGGER.debug("{} - Polling {} for next term {}",context.getCluster().member().address(),member,context.getTerm() + 1);    PollRequest request=PollRequest.builder().withTerm(context.getTerm()).withCandidate(context.getCluster().member().address().hashCode()).withLogIndex(lastIndex).withLogTerm(lastTerm).build();    context.getConnections().getConnection(member.serverAddress()).thenAccept(null);  }}  }
class C{  public void lookupTable(String[] values) throws IOException {  print("lookupTable",null);  for (int i=0; i < values.length; i++) {    printer.print(indent + "        ");    writePaddedString(Integer.toString(i) + ":",5);    printer.println("\"" + values[i] + "\"");  }}  }
class C{  protected Drawing createDrawing(){  return svgPanel.createDrawing();}  }
class C{  public static long through(int i){  return ((1 << (i + 1)) - 1);}  }
class C{  private void drawSquare(Canvas canvas,Paint paint,float x,float y){  canvas.drawRect(x - size,y - size,x + size,y + size,paint);}  }
class C{  public T take(Object key){  return remove(key);}  }
class C{  public boolean hasGmlPoint(){  return hasExtension(GmlPoint.class);}  }
class C{  protected void restoreState(){  logL=storedLogL;  super.restoreState();}  }
class C{  public void addInput(Source source){  source.init(this);  inputs.add(source);}  }
class C{  public static void findCallTargets(JsonElement jsonElement,String jdtMethodName,String[] jdtParamTypeStrings,String jdtClassName,String srcClassName,int srcLine,Map<String,JsonElement> callTargetsMap){  JsonArray childrenArray=Utils.getChildrenArray(jsonElement);  if (childrenArray != null) {    for (int i=0; i < childrenArray.size(); i++) {      JsonElement childElement=childrenArray.get(i);      if (!Utils.isEmptyJsonObject(childElement)) {        String srcClassName0=Utils.getSourceClass(childElement);        int srcLine0=Utils.getSourceLine(childElement);        if (srcClassName0 != null && srcLine0 > 0 && srcClassName0.equals(srcClassName) && srcLine0 == srcLine) {          String sig=Utils.getFieldValueAsString(childElement,"source-signature");          if (sig == null)           sig=Utils.getFieldValueAsString(childElement,"signature");          if (sig != null) {            String sootMethodName=Utils.signatureMethodName(sig);            if (sootMethodName.equals(jdtMethodName)) {              String sootClassName=Utils.signatureClass(sig);              if (sootClassName.equals(jdtClassName)) {                String[] sootParamTypes=Utils.signatureParameterTypes(sig);                if (typesMatch(sootParamTypes,jdtParamTypeStrings)) {                  String key=sig + " " + jdtClassName+ " "+ srcLine;                  JsonElement target=callTargetsMap.get(key);                  if (target == null) {                    callTargetsMap.put(key,childElement);                  }                }              }            }          }        }        findCallTargets(childElement,jdtMethodName,jdtParamTypeStrings,jdtClassName,srcClassName,srcLine,callTargetsMap);      }    }  }}  }
class C{  public Matrix mtimes(Matrix m2){  if (m2 instanceof DenseDoubleMatrix2D) {    final DenseDoubleMatrix2D result=new BlockDenseDoubleMatrix2D((int)getRowCount(),(int)m2.getColumnCount(),layout.blockStripe,BlockOrder.ROWMAJOR);    Mtimes.DENSEDOUBLEMATRIX2D.calc(this,(DenseDoubleMatrix2D)m2,result);    return result;  } else {    return super.mtimes(m2);  }}  }
class C{  public void testMergeInBothWithNodeMergeStrategyWithCommaInPattern() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value,$right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value1,value2",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  public static boolean isPalindrome(int number){  return number == reverse(number) ? true : false;}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  @Bean public MappingJackson2HttpMessageConverter jackson2Converter(){  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();  converter.setObjectMapper(myObjectMapper());  return converter;}  }
class C{  private boolean isHub(ServerBartender server){  int upCount=0;  for (  ServerHeartbeat rackServer : _rack.getServers()) {    if (rackServer == null || !rackServer.isUp()) {      continue;    }    if (rackServer == server && upCount < _hubCount) {      return true;    }    upCount++;    if (_hubCount <= upCount) {      return false;    }  }  return false;}  }
class C{  public static double lnGamma(double x){  double p, q, w, z;  double A[]={8.11614167470508450300E-4,-5.95061904284301438324E-4,7.93650340457716943945E-4,-2.77777777730099687205E-3,8.33333333333331927722E-2};  double B[]={-1.37825152569120859100E3,-3.88016315134637840924E4,-3.31612992738871184744E5,-1.16237097492762307383E6,-1.72173700820839662146E6,-8.53555664245765465627E5};  double C[]={-3.51815701436523470549E2,-1.70642106651881159223E4,-2.20528590553854454839E5,-1.13933444367982507207E6,-2.53252307177582951285E6,-2.01889141433532773231E6};  if (x < -34.0) {    q=-x;    w=lnGamma(q);    p=Math.floor(q);    if (p == q)     throw new ArithmeticException("lnGamma: Overflow");    z=q - p;    if (z > 0.5) {      p+=1.0;      z=p - q;    }    z=q * Math.sin(Math.PI * z);    if (z == 0.0)     throw new ArithmeticException("lnGamma: Overflow");    z=LOGPI - Math.log(z) - w;    return z;  }  if (x < 13.0) {    z=1.0;    while (x >= 3.0) {      x-=1.0;      z*=x;    }    while (x < 2.0) {      if (x == 0.0)       throw new ArithmeticException("lnGamma: Overflow");      z/=x;      x+=1.0;    }    if (z < 0.0)     z=-z;    if (x == 2.0)     return Math.log(z);    x-=2.0;    p=x * polevl(x,B,5) / p1evl(x,C,6);    return (Math.log(z) + p);  }  if (x > 2.556348e305)   throw new ArithmeticException("lnGamma: Overflow");  q=(x - 0.5) * Math.log(x) - x + 0.91893853320467274178;  if (x > 1.0e8)   return (q);  p=1.0 / (x * x);  if (x >= 1000.0)   q+=((7.9365079365079365079365e-4 * p - 2.7777777777777777777778e-3) * p + 0.0833333333333333333333) / x; else   q+=polevl(p,A,4) / x;  return q;}  }
class C{  public void testUsingProxy() throws Exception {  MockServer server=new MockServer("server");  MockServer proxy=new MockServer("proxy");  URL url=new URL("http://localhost:" + server.port());  HttpURLConnection connection=(HttpURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",proxy.port())));  connection.setConnectTimeout(2000);  connection.setReadTimeout(2000);  server.start();synchronized (bound) {    if (!server.started)     bound.wait(5000);  }  proxy.start();synchronized (bound) {    if (!proxy.started)     bound.wait(5000);  }  connection.connect();  server.join();  proxy.join();  assertTrue("Connection does not use proxy",connection.usingProxy());  assertTrue("Proxy server was not used",proxy.accepted);  HttpURLConnection huc=(HttpURLConnection)url.openConnection(Proxy.NO_PROXY);  assertFalse(huc.usingProxy());}  }
class C{  private static synchronized String chooseAddresses(String host){  long currentTime=System.currentTimeMillis();  boolean notAllFailed=false;  HostInfo hostInfo=_hostToHostInfo.get(host);  if (hostInfo == null) {    int firstPeriod=host.indexOf('.');    if (firstPeriod > 0)     hostInfo=_hostToHostInfo.get(host.substring(firstPeriod));  }  if (hostInfo == null) {    if (host.equals("localhost"))     hostInfo=_hostToHostInfo.get(_primeHost); else     return host;  }  for (int t=0; t < hostInfo.commFailureTimes.length; t++) {    long commFailureTime=hostInfo.commFailureTimes[t];    if (commFailureTime == 0) {      notAllFailed=true;    } else {      long deltaTime=currentTime - commFailureTime;      if (deltaTime > 120000 || deltaTime < 0) {        System.out.println("SERVER: resuming access to content-server: " + hostInfo.addresses[t]);        hostInfo.commFailureTimes[t]=0;        notAllFailed=true;      }    }  }  while (hostInfo.rWeights <= 0 || (notAllFailed && hostInfo.commFailureTimes[hostInfo.iAddresses] != 0)) {    if (++hostInfo.iAddresses >= hostInfo.addresses.length)     hostInfo.iAddresses=0;    hostInfo.rWeights=hostInfo.weights[hostInfo.iAddresses];  }  --hostInfo.rWeights;  return hostInfo.addresses[hostInfo.iAddresses];}  }
class C{  public void multiplyByScalar(float scalar){  this.dirty=true;  multiplyByScalar(scalar);}  }
class C{  public static String escape(CharSequence content,char escapedChar,char[] ignoredIfFollowedBy){  StringBuilder builder=new StringBuilder();  char last=0;  for (int i=0; i < content.length(); ++i) {    char current=content.charAt(i);    if (current == escapedChar && last != '\\') {      if (i == content.length() - 1 || !ArrayUtils.contains(ignoredIfFollowedBy,content.charAt(i + 1))) {        builder.append('\\');      }    }    builder.append(current);    last=(escapedChar == '\\' && current == '\\') ? 0 : current;  }  return builder.toString();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  public void pasteSubsession(List sessionElements,Point upperLeft){  List<SessionNode> sessionNodes=new ArrayList<>();  List<SessionNodeWrapper> sessionNodeWrappers=new ArrayList<>();  List<Edge> sessionEdges=new ArrayList<>();  Point oldUpperLeft=EditorUtils.getTopLeftPoint(sessionElements);  int deltaX=upperLeft.x - oldUpperLeft.x;  int deltaY=upperLeft.y - oldUpperLeft.y;  for (  Object sessionElement : sessionElements) {    if (sessionElement instanceof SessionNodeWrapper) {      SessionNodeWrapper wrapper=(SessionNodeWrapper)sessionElement;      sessionNodeWrappers.add(wrapper);      adjustNameAndPosition(wrapper,sessionNodeWrappers,deltaX,deltaY);      SessionNode sessionNode=wrapper.getSessionNode();      sessionNodes.add(sessionNode);    } else     if (sessionElement instanceof Edge) {      sessionEdges.add((Edge)sessionElement);    } else {      throw new IllegalArgumentException("The list of session " + "elements should contain only SessionNodeWrappers " + "and SessionEdges: "+ sessionElement);    }  }  try {    this.session.addNodeList(sessionNodes);  } catch (  Exception e) {    throw new RuntimeException("There was an error when trying to " + "add session nodes to the session.",e);  }  this.sessionNodeWrappers.addAll(sessionNodeWrappers);  this.sessionEdges.addAll(sessionEdges);  for (  Object sessionNodeWrapper : sessionNodeWrappers) {    Node node=(Node)sessionNodeWrapper;    getPropertyChangeSupport().firePropertyChange("nodeAdded",null,node);  }  for (  Object sessionEdge : sessionEdges) {    Edge edge=(Edge)sessionEdge;    getPropertyChangeSupport().firePropertyChange("edgeAdded",null,edge);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean hasSourceLanguage(){  return hasExtension(SourceLanguage.class);}  }
class C{  public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount){  checkArgument(expectedEdgeCount >= 0,"The expected number of edges can't be negative: %s",expectedEdgeCount);  this.expectedEdgeCount=Optional.of(expectedEdgeCount);  return this;}  }
class C{  public BaseRecentRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public int compareToIgnoreCase(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=Character.toLowerCase(fsb.charAt(i));    char c2=Character.toLowerCase(xstr.charAt(j));    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public static void logDeadlocks(){  long[] deadlockIDs=ManagementFactory.getThreadMXBean().findDeadlockedThreads();  if (deadlockIDs == null)   return;  ThreadInfo[] infos=ManagementFactory.getThreadMXBean().getThreadInfo(deadlockIDs,true,true);  for (  ThreadInfo ti : infos) {    ConcurrentLog.warn("DEADLOCKREPORT",ti.toString());  }}  }
class C{  public void print(File file) throws IOException {  checkExec();  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPrintJobAccess();  }  checkActionSupport(Action.PRINT);  checkFileValidation(file);  peer.print(file);}  }
class C{  public static <T>T field(Class<?> cls,String fieldName) throws IgniteCheckedException {  assert cls != null;  assert fieldName != null;  try {    for (Class c=cls; cls != Object.class; cls=cls.getSuperclass()) {      for (      Field field : c.getDeclaredFields()) {        if (field.getName().equals(fieldName)) {          if (!Modifier.isStatic(field.getModifiers()))           throw new IgniteCheckedException("Failed to get class field (field is not static) [cls=" + cls + ", fieldName="+ fieldName+ ']');          boolean accessible=field.isAccessible();          T val;          try {            field.setAccessible(true);            val=(T)field.get(null);          }  finally {            if (!accessible)             field.setAccessible(false);          }          return val;        }      }    }  } catch (  Exception e) {    throw new IgniteCheckedException("Failed to get field value [fieldName=" + fieldName + ", cls="+ cls+ ']',e);  }  throw new IgniteCheckedException("Failed to get field value (field was not found) [fieldName=" + fieldName + ", cls="+ cls+ ']');}  }
class C{  public HMacSP800DRBG(Mac hMac,int securityStrength,EntropySource entropySource,byte[] personalizationString,byte[] nonce){  if (securityStrength > Utils.getMaxSecurityStrength(hMac)) {    throw new IllegalArgumentException("Requested security strength is not supported by the derivation function");  }  if (entropySource.entropySize() < securityStrength) {    throw new IllegalArgumentException("Not enough entropy for security strength required");  }  _entropySource=entropySource;  _hMac=hMac;  byte[] entropy=entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(entropy,nonce,personalizationString);  _K=new byte[hMac.getMacSize()];  _V=new byte[_K.length];  Arrays.fill(_V,(byte)1);  hmac_DRBG_Update(seedMaterial);  _reseedCounter=1;}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  synchronized boolean goToWifiSettingsIfDisconnected(){  final NetworkInfo info=mConnectivityManager.getActiveNetworkInfo();  if (info == null || !info.isConnected()) {    Toast.makeText(this,getString(R.string.wifi_unavailable_error_message),Toast.LENGTH_LONG).show();    final Intent intent=new Intent(Settings.ACTION_WIFI_SETTINGS);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    startActivity(intent);    return true;  }  return false;}  }
class C{  private NetworkFCZoneInfo placeZones(URI exportGroupUri,URI varrayUri,String protocol,String initiatorPort,StoragePort storagePort,String hostName,List<Zone> existingZones,boolean checkZones) throws DeviceControllerException {  initiatorPort=formatWWN(initiatorPort);  String storagePortWwn=formatWWN(storagePort.getPortNetworkId());  if (Transport.FC != StorageProtocol.block2Transport(protocol)) {    return null;  }  _log.info("Placing a zone for initiator {} and port {}",initiatorPort,storagePortWwn);  NetworkLite iniNet=NetworkUtil.getEndpointNetworkLite(initiatorPort,_dbClient);  NetworkLite portNet=getStoragePortNetwork(storagePort);  if (iniNet == null || portNet == null || !NetworkUtil.checkInitiatorAndPortConnected(iniNet,portNet)) {    _log.debug(String.format("Initiator %s could not be paired with port %s",initiatorPort,storagePortWwn));    return null;  }  if (!checkZones) {    _log.debug("Check Zones flag is false. Finding FCZoneReference for initiator {} and port {}",initiatorPort,storagePortWwn);    String key=FCZoneReference.makeEndpointsKey(initiatorPort,storagePortWwn);    List<FCZoneReference> fcZoneRefs=getFCZoneReferencesForKey(key);    FCZoneReference refTemplate=DataObjectUtils.findByProperty(fcZoneRefs,"groupUri",exportGroupUri);    if (refTemplate != null) {      _log.info("Already existing FCZoneReferences for initiator {} and port {} will be replicated for new volumes.",initiatorPort,storagePortWwn);      return createZoneInfoForRef(refTemplate,null,initiatorPort,storagePortWwn,NetworkUtil.getEndpointNetworkLite(initiatorPort,_dbClient));    } else {      _log.info("FCZoneReferences doesnt exist for initiator {} and port {} for replication.",initiatorPort,storagePortWwn);      return null;    }  } else {    _log.debug("Check Zones flag is false. Placing a zone for initiator {} and port {}",initiatorPort,storagePortWwn);    NetworkFCZoneInfo zoneInfo=getZoneInfoForExistingZone(iniNet,initiatorPort,storagePort.getPortNetworkId(),existingZones);    if (zoneInfo != null) {      _log.info("Already existing zone {} for initiator {} and port {} will be used.",new Object[]{zoneInfo.getZoneName(),initiatorPort,storagePortWwn});      return zoneInfo;    }    _log.debug("Could not find an existing zone for initiator {} and port {} to use." + "A new zone will be created.",new Object[]{initiatorPort,storagePortWwn});    List<String> endPoints=Arrays.asList(new String[]{initiatorPort,storagePortWwn});    List<NetworkSystem> networkSystems=getZoningNetworkSystems(iniNet,portNet);    if (networkSystems.isEmpty()) {      _log.info(String.format("Could not find a network system with connection to storage port %s",storagePortWwn));      throw DeviceControllerException.exceptions.cannotFindSwitchConnectionToStoragePort(storagePortWwn);    }    NetworkSystem networkSystem=networkSystems.get(0);    _log.debug("Network system {} was selected to be the primary network system. " + "Trying to select an alternate network system.",networkSystem.getNativeGuid());    NetworkSystem altNetworkSystem=networkSystem;    for (    NetworkSystem system : networkSystems) {      if (altNetworkSystem != system) {        altNetworkSystem=system;        _log.debug("Network system {} was selected to be the alternate network system.",altNetworkSystem.getNativeGuid());        break;      }    }    NetworkFCZoneInfo networkFabricInfo=null;    if (networkSystem != null) {      networkFabricInfo=new NetworkFCZoneInfo(networkSystem.getId(),iniNet.getNativeId(),NetworkUtil.getNetworkWwn(iniNet));      networkFabricInfo.getEndPoints().addAll(endPoints);      networkFabricInfo.setAltNetworkDeviceId(URI.create(altNetworkSystem.getId().toString()));      nameZone(networkFabricInfo,networkSystem.getSystemType(),hostName,initiatorPort,storagePort,!portNet.equals(iniNet));    }    return networkFabricInfo;  }}  }
class C{  protected List createParentBoundables(List childBoundables,int newLevel){  Assert.isTrue(!childBoundables.isEmpty());  int minLeafCount=(int)Math.ceil((childBoundables.size() / (double)getNodeCapacity()));  ArrayList sortedChildBoundables=new ArrayList(childBoundables);  Collections.sort(sortedChildBoundables,xComparator);  List[] verticalSlices=verticalSlices(sortedChildBoundables,(int)Math.ceil(Math.sqrt(minLeafCount)));  return createParentBoundablesFromVerticalSlices(verticalSlices,newLevel);}  }
class C{  public TerritoryEffectAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  private void assign(BigInteger val){  assign(val.toByteArray());}  }
class C{  public static String buildCpimMessageWithoutDisplayedImdn(String from,String to,String messageId,String content,String contentType,long timestampSent){  return CpimMessage.HEADER_FROM + ": " + formatCpimSipUri(from)+ CRLF+ CpimMessage.HEADER_TO+ ": "+ formatCpimSipUri(to)+ CRLF+ CpimMessage.HEADER_NS+ ": "+ ImdnDocument.IMDN_NAMESPACE+ CRLF+ ImdnUtils.HEADER_IMDN_MSG_ID+ ": "+ messageId+ CRLF+ CpimMessage.HEADER_DATETIME+ ": "+ DateUtils.encodeDate(timestampSent)+ CRLF+ ImdnUtils.HEADER_IMDN_DISPO_NOTIF+ ": "+ ImdnDocument.POSITIVE_DELIVERY+ CRLF+ CRLF+ CpimMessage.HEADER_CONTENT_TYPE+ ": "+ contentType+ ";charset="+ UTF8_STR+ CRLF+ CpimMessage.HEADER_CONTENT_LENGTH+ ": "+ content.getBytes(UTF8).length+ CRLF+ CRLF+ content;}  }
class C{  @Override public void write(byte[] buf,int offset,int length) throws IOException {  final byte[] buffer=_writeBuffer;  final int bufferLength=buffer.length;  StreamImpl source=_source;  while (true) {    final int writeLength=_writeLength;    if (writeLength == 0 && bufferLength <= length) {      if (source != null) {        source.write(buf,offset,length,false);        _position+=length;        return;      }    }    final int sublen=Math.min(length,bufferLength - writeLength);    System.arraycopy(buf,offset,buffer,writeLength,sublen);    if (length == sublen) {      _writeLength=writeLength + length;      if (_implicitFlush) {        flush();      }      return;    }    if (source == null) {      return;    }    source.write(buffer,0,bufferLength,false);    _position+=bufferLength;    _writeLength=0;    length-=sublen;    offset+=sublen;    if (bufferLength <= length) {      source.write(buf,offset,length,false);      _position+=length;      return;    }  }}  }
class C{  public boolean isPointOval(){  return pointOval;}  }
class C{  public Nfaa(int viewportWidth,int viewportHeight){  setup(viewportWidth,viewportHeight);}  }
class C{  private URI findRepoUri() throws Exception {  URI updateSiteUri=URI.create(updateSiteUrl);  Path updateSitePath=getPath(updateSiteUri);  URI[] repos=getProvisioningUI().getRepositoryTracker().getKnownRepositories(getProvisioningUI().getSession());  for (  URI repo : repos) {    if (repo != null && repo.getHost() != null && repo.getHost().equalsIgnoreCase(updateSiteUri.getHost()) && getPath(repo).equals(updateSitePath)) {      return repo;    }  }  throw new Exception("Could not find repository (" + updateSiteUrl + ")");}  }
class C{  public CategoricalDistribution likelihoodWeighting(RandomVariable[] X,AssignmentProposition[] e,BayesianNetwork bn,int N){  double[] W=new double[ProbUtil.expectedSizeOfCategoricalDistribution(X)];  for (int j=0; j < N; j++) {    Pair<Map<RandomVariable,Object>,Double> x_w=weightedSample(bn,e);    W[ProbUtil.indexOf(X,x_w.getFirst())]+=x_w.getSecond();  }  return new ProbabilityTable(W,X).normalize();}  }
class C{  private void onRelease(Event event){  if (this.wasPressed) {    if (this.clickAction != null) {      this.clickAction.run();      this.clickAction=null;    }    CircleMenu.this.hide();  }  event.consume();}  }
class C{  public CheckBoxListModel(Object[] listData){  for (  Object element : listData) {    addElement(element);  }}  }
class C{  public EchoBreakpointHitReply(final int packetId,final int errorCode,final long tid,final RegisterValues registerValues){  super(packetId,errorCode,tid,registerValues);}  }
class C{  public void addListener(final IAddressSpaceContentListener listener){  m_listeners.addListener(listener);}  }
class C{  public void init(AuthenticatedUser user,LDAPConnection ldapConnection) throws GuacamoleException {  userDirectory=new SimpleDirectory<User>(userService.getUsers(ldapConnection));  connectionDirectory=new SimpleDirectory<Connection>(connectionService.getConnections(user,ldapConnection));  rootGroup=new SimpleConnectionGroup(LDAPAuthenticationProvider.ROOT_CONNECTION_GROUP,LDAPAuthenticationProvider.ROOT_CONNECTION_GROUP,connectionDirectory.getIdentifiers(),Collections.<String>emptyList());  connectionGroupDirectory=new SimpleConnectionGroupDirectory(Collections.singleton(rootGroup));  self=new SimpleUser(user.getIdentifier(),userDirectory.getIdentifiers(),connectionDirectory.getIdentifiers(),connectionGroupDirectory.getIdentifiers());}  }
class C{  @PostConstruct public void initApplication() throws IOException {  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains("dev") && activeProfiles.contains("prod")) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains("prod") && activeProfiles.contains("fast")) {      log.error("You have misconfigured your application! " + "It should not run with both the 'prod' and 'fast' profiles at the same time.");    }    if (activeProfiles.contains("dev") && activeProfiles.contains("cloud")) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public RegionClearedException(Throwable cause){  super(cause);}  }
class C{  public boolean hasConstraint(){  return getWhereClause() != null;}  }
class C{  private void handlePossibleCancellationInterrupt(int s){  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();}  }
class C{  public ArrayList<BloomFilter<E>> naivefindMatches(BFINode<E> node,E o,SearchStatistics stat){  ArrayList<BloomFilter<E>> result=new ArrayList<BloomFilter<E>>();  stat.nbBFChecks++;  if (node.isLeaf()) {    if (node.value.contains(o)) {      result.add(node.value);    }    return result;  }  for (int i=0; i < node.children.size(); i++) {    result.addAll(naivefindMatches(node.children.get(i),o,stat));  }  return result;}  }
class C{  @Override public void close() throws IOException {  mSeqData.close();  mPointers.close();  if (mQualData != null) {    mQualData.close();  }}  }
class C{  public void clearEdges(){  for (  String s : connectivity.keySet()) {    SortedSet<LaggedFactor> set=connectivity.get(s);    set.clear();  }}  }
class C{  public void destroy(){  threadStop();  for (  JspServletWrapper jsw : jsps.values()) {    jsw.destroy();  }}  }
class C{  public CLEvent unmap(CLQueue queue,Pointer<T> buffer,CLEvent... eventsToWaitFor){}  }
class C{  public static boolean isDerivedDatatype(IRI datatype){  return datatype.equals(XMLSchema.NORMALIZEDSTRING) || datatype.equals(XMLSchema.TOKEN) || datatype.equals(XMLSchema.LANGUAGE)|| datatype.equals(XMLSchema.NMTOKEN)|| datatype.equals(XMLSchema.NMTOKENS)|| datatype.equals(XMLSchema.NAME)|| datatype.equals(XMLSchema.NCNAME)|| datatype.equals(XMLSchema.ID)|| datatype.equals(XMLSchema.IDREF)|| datatype.equals(XMLSchema.IDREFS)|| datatype.equals(XMLSchema.ENTITY)|| datatype.equals(XMLSchema.ENTITIES)|| datatype.equals(XMLSchema.INTEGER)|| datatype.equals(XMLSchema.LONG)|| datatype.equals(XMLSchema.INT)|| datatype.equals(XMLSchema.SHORT)|| datatype.equals(XMLSchema.BYTE)|| datatype.equals(XMLSchema.NON_POSITIVE_INTEGER)|| datatype.equals(XMLSchema.NEGATIVE_INTEGER)|| datatype.equals(XMLSchema.NON_NEGATIVE_INTEGER)|| datatype.equals(XMLSchema.POSITIVE_INTEGER)|| datatype.equals(XMLSchema.UNSIGNED_LONG)|| datatype.equals(XMLSchema.UNSIGNED_INT)|| datatype.equals(XMLSchema.UNSIGNED_SHORT)|| datatype.equals(XMLSchema.UNSIGNED_BYTE)|| datatype.equals(XMLSchema.DAYTIMEDURATION)|| datatype.equals(XMLSchema.YEARMONTHDURATION);}  }
class C{  private boolean removeBadSplitNodes(SplitCriterion criterion,Node currentNode,double lastCheckRatio,double lastCheckSDR,double lastCheckE){  boolean isBad=false;  if (currentNode == null) {    return true;  }  if (currentNode.left != null) {    isBad=removeBadSplitNodes(criterion,currentNode.left,lastCheckRatio,lastCheckSDR,lastCheckE);  }  if (currentNode.right != null && isBad) {    isBad=removeBadSplitNodes(criterion,currentNode.left,lastCheckRatio,lastCheckSDR,lastCheckE);  }  if (isBad) {    double[][] postSplitDists=new double[][]{{currentNode.leftStatistics.getValue(0),currentNode.leftStatistics.getValue(1),currentNode.leftStatistics.getValue(2)},{currentNode.rightStatistics.getValue(0),currentNode.rightStatistics.getValue(1),currentNode.rightStatistics.getValue(2)}};    double[] preSplitDist=new double[]{(currentNode.leftStatistics.getValue(0) + currentNode.rightStatistics.getValue(0)),(currentNode.leftStatistics.getValue(1) + currentNode.rightStatistics.getValue(1)),(currentNode.leftStatistics.getValue(2) + currentNode.rightStatistics.getValue(2))};    double merit=criterion.getMeritOfSplit(preSplitDist,postSplitDists);    if ((merit / lastCheckSDR) < (lastCheckRatio - (2 * lastCheckE))) {      currentNode=null;      return true;    }  }  return false;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  m_customEditor.m_Support.addPropertyChangeListener(l);}  }
class C{  public boolean isReturnValue(){  return hasFlag(RETURN_VAL);}  }
class C{  public void plus(Closure c){  if (parent() == null) {    throw new UnsupportedOperationException("Adding sibling nodes to the root node is not supported");  }  appendNodes(c);}  }
class C{  protected void readChangeLogNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {  if (parser == null || changeLog == null)   return;  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOG);  Log.d(TAG,"Processing main tag=");  String bulletedList=parser.getAttributeValue(null,ATTRIBUTE_BULLETEDLIST);  if (bulletedList == null || bulletedList.equals("true")) {    changeLog.setBulletedList(true);    super.bulletedList=true;  } else {    changeLog.setBulletedList(false);    super.bulletedList=false;  }  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String tag=parser.getName();    Log.d(TAG,"Processing tag=" + tag);    if (tag.equals(TAG_CHANGELOGVERSION)) {      readChangeLogVersionNode(parser,changeLog);    }  }}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  @Override public void addAttribute(String name,String value){  if (value != null) {    ((Element)current).setAttribute(name,value);  }}  }
class C{  private void createCottbusFirst(final int HOME_END_TIME){  int currentId=1;  int duration=(int)(0.5 * 3600);  final int DEFAULT_CARS_PER_HOUR_PER_LANE=2000;  currentId=addCommodity("701","324",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"26 27 28 29 30 32",currentId);  currentId=addCommodity("192","703",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"32 30 29 28 27 26",currentId);  currentId=addCommodity("662","602",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"21 22 23 37 24 25 26 11",currentId);  currentId=addCommodity("604","664",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"11 26 25 24 37 23 22 21",currentId);  currentId=addCommodity("652","622",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"20 51 19 50 18 17 16 15",currentId);  currentId=addCommodity("624","673",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"15 16 17 18 50 19 51 20 21",currentId);  currentId=addCommodity("681","631",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"23 35 34 33 32 31 18",currentId);  currentId=addCommodity("633","683",HOME_END_TIME,duration,(int)(0.3 * DEFAULT_CARS_PER_HOUR_PER_LANE),"18 31 32 33 34 35 23",currentId);  currentId=addCommodity("652","725",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"20 35 34 33 52 53 36 29 28 54 55 14 38",currentId);  currentId=addCommodity("727","654",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"38 14 55 54 28 29 36 53 52 33 34 35 20",currentId);  currentId=addCommodity("691","311",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"24 36 29 30 31",currentId);  currentId=addCommodity("642","622",HOME_END_TIME,duration,(int)(0.05 * DEFAULT_CARS_PER_HOUR_PER_LANE),"19 50 18 17 16 15",currentId);  currentId=addCommodity("624","644",HOME_END_TIME,duration,(int)(0.05 * DEFAULT_CARS_PER_HOUR_PER_LANE),"15 16 17 18 50 19",currentId);  currentId=addCommodity("642","602",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"19 50 18 17 16 15 39 14 38 13 12 11",currentId);  currentId=addCommodity("604","644",HOME_END_TIME,duration,(int)(0.1 * DEFAULT_CARS_PER_HOUR_PER_LANE),"11 12 13 38 14 39 15 16 17 18 50 19",currentId);}  }
class C{  public void fwdDctInPlaceNxN(double[][] coeffs){  int u=0;  int v=0;  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);  for (u=0; u <= this.M - 1; u++) {    fctNoScale(coeffs[u]);  }  for (v=0; v <= this.N - 1; v++) {    for (u=0; u <= this.M - 1; u++) {      this.nxnTmp[u]=coeffs[u][v];    }    fctNoScale(this.nxnTmp);    for (u=0; u <= this.M - 1; u++) {      coeffs[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;    }  }}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  @Override public void giveProduct(final EventRaiser npc,final Player player){  final String orderString=player.getQuest(mithrilcloak.getQuestSlot());  final String[] order=orderString.split(";");  final int numberOfProductItems=Integer.parseInt(order[1]);  final long orderTime=Long.parseLong(order[3]);  final long timeNow=new Date().getTime();  final long timeRemaining=orderTime + ((long)REQUIRED_MINUTES_THREAD * numberOfProductItems * MathHelper.MILLISECONDS_IN_ONE_MINUTE) - timeNow;  if (timeRemaining > 0L) {    npc.say("Shhhh, I'm still working on your request to " + getProductionActivity() + " "+ getProductName()+ " for you. I'll be done in "+ TimeUtil.approxTimeUntil((int)(timeRemaining / 1000L))+ ".");  } else {    npc.say("Oh, I gave your " + Grammar.quantityplnoun(numberOfProductItems,getProductName(),"") + " to my research student Boris Karlova. Go collect them from him.");    player.notifyWorldAboutChanges();  }}  }
class C{  public SetMovieDetails(int movieid,Integer playcount,Double rating){  super();  addParameterToRequest("movieid",movieid);  if (playcount != null)   addParameterToRequest("playcount",playcount);  if (rating != null)   addParameterToRequest("rating",rating);}  }
class C{  public void add(NameValuePair pair){  throwIfImmutable();  if (pair == null) {    throw new NullPointerException("pair == null");  }  CstString name=pair.getName();  if (elements.get(name) != null) {    throw new IllegalArgumentException("name already added: " + name);  }  elements.put(name,pair);}  }
class C{  private void updateQueryRange(QueryTask.Query query,long lowerBound,long upperBound){  for (  QueryTask.Query queryTerm : query.booleanClauses) {    if (queryTerm != null && queryTerm.term != null && queryTerm.term.propertyName != null) {      if (queryTerm.term.propertyName.equals(HostService.State.FIELD_NAME_SCHEDULING_CONSTANT)) {        queryTerm.term.range=QueryTask.NumericRange.createLongRange(lowerBound,upperBound,true,false);        break;      }    }  }}  }
class C{  public void removeCoalescingKey(long downTime){  mDownTimeToCoalescingKey.delete((int)downTime);}  }
class C{  public boolean gaussianElimination(final long[] solution){  assert solution.length == numVars;  LongArrayBitVector solutions=LongArrayBitVector.ofLength(numVars * 2);  if (!gaussianElimination(solutions))   return false;  final LongBigList list=solutions.asLongBigList(2);  for (int i=solution.length; i-- != 0; )   solution[i]=list.getLong(i);  return true;}  }
class C{  public void write(char buf[]) throws IOException {  write(buf,0,buf.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.717 -0400",hash_original_method="818E0B883DC58DC995B22E0761F71440",hash_generated_method="5852B7F78978A6F35354CA318266DEE1") public void trace(Object message){}  }
class C{  public static float abs(final float x){  return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));}  }
class C{  public static void dftProduct(double[] kernel,double[] transform,double sign){  if (kernel.length != transform.length)   throw new IllegalArgumentException("kernel and transform arrays must have the same size");  int n=kernel.length;  int half=n / 2;  transform[0]*=kernel[0];  transform[half]*=kernel[half];  double tmp;  for (int i=1; i < half; i++) {    int im=n - i;    tmp=kernel[i] * transform[i] - sign * kernel[im] * transform[im];    transform[im]=kernel[i] * transform[im] + sign * kernel[im] * transform[i];    transform[i]=tmp;  }}  }
class C{  public static long New(){  return IrredPoly;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.488 -0500",hash_original_method="91DADCDFBE7734A1949A5AEB67A00312",hash_generated_method="839D85A97D79476EA9F57FB8F73F918E") private Patterns(){}  }
class C{  public static int clear(int mod,int clearBit){  return mod & ~clearBit;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private boolean checkForEnhancedZoneSession(String[] lines,Integer retryCount) throws NetworkDeviceControllerException {  return checkForZoneSession(lines,retryCount,false);}  }
class C{  public Bag(int capacity){  numObjs=0;  objs=new Object[capacity];}  }
class C{  public static RHExtension hasRHExtensions(ConfigImpl config,ExtensionDefintion ed) throws PageException, SAXException, IOException {  XMLConfigAdmin admin=new XMLConfigAdmin(config,null);  return admin._hasRHExtensions(config,ed);}  }
class C{  public boolean isAutoAcceptInRoamingEnabled() throws RcsGenericException {  try {    return mIFtServiceConfig.isAutoAcceptInRoamingEnabled();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  protected List<ColladaMeshShape> createShapes(){  if (WWUtil.isEmpty(this.geometries))   return Collections.emptyList();  List<ColladaMeshShape> shapes=new ArrayList<ColladaMeshShape>();  for (  ColladaInstanceGeometry geometry : this.geometries) {    this.createShapesForGeometry(geometry,shapes);  }  return shapes;}  }
class C{  private static void updateFormatCache(Long key,String value){  if (value == null) {    return;  }  if (formatCache.size() > CACHE_SIZE) {    formatCache.clear();  }  formatCache.put(key,value);}  }
class C{  public void removeScrollListener(ScrollListener l){  if (scrollListeners == null) {    return;  }  scrollListeners.removeListener(l);  if (!scrollListeners.hasListeners()) {    scrollListeners=null;  }}  }
class C{  @POST @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response submit(@Context HttpServletRequest request){  String entityJson=null;  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.submit()");    }    String entities=Servlets.getRequestPayload(request);    try {      new JSONArray(entities);    } catch (    JSONException e) {      final String finalEntities=entities;      entities=new JSONArray(){{          put(finalEntities);        }      }.toString();    }    entityJson=AtlasClient.toString(new JSONArray(entities));    LOG.info("submitting entities {} ",entityJson);    final List<String> guids=metadataService.createEntities(entities);    LOG.info("Created entities {}",guids);    JSONObject response=getResponse(new AtlasClient.EntityResult(guids,null,null));    URI locationURI=getLocationURI(guids);    return Response.created(locationURI).entity(response).build();  } catch (  EntityExistsException e) {    LOG.error("Unique constraint violation for entity entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.CONFLICT));  }catch (  ValueConversionException ve) {    LOG.error("Unable to persist entity instance due to a deserialization error entityDef={}",entityJson,ve);    throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(),Response.Status.BAD_REQUEST));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to persist entity instance entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to persist entity instance entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","elem");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  newAttribute=element.setAttributeNodeNS(attribute);  element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  state=element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  assertFalse("elementremoveattributens01",state);}  }
class C{  public void init(SecuritySpecModel securitySpec){  if (fSecuritySpec != null) {    for (    String className : fProcessedClasses) {      ClassMarkerProcessor classProcessor=get(className);      classProcessor.removeAllDroidsafeTextMarkers();    }  }  fClassProcessorMap=new HashMap<String,ClassMarkerProcessor>();  fSecuritySpec=securitySpec;  fTaintedDataMap=securitySpec.getTaintedDataMap();  fUnreachableSourceMethodMap=securitySpec.getUnreachableSourceMethodMap();  if (fTaintedDataMap != null && fUnreachableSourceMethodMap != null) {    if (!fTaintedDataMap.isEmpty() || !fUnreachableSourceMethodMap.isEmpty()) {      fTaintSourcesMap=securitySpec.getTaintSourcesMap();      fFilteredTaintSourcesMap=new TreeMap<String,Set<CallLocationModel>>(fTaintSourcesMap);      fProcessedClasses=new HashSet<String>();      fClassesNeedUpdate=new HashSet<String>();      IEditorPart editor=DroidsafePluginUtilities.getActiveEditor();      if (editor != null) {        showDroidsafeTextMarkers(editor);      }    }  }}  }
class C{  public static void enable(boolean enableLogging){  if (enableLogging)   setLevel(s_currentLevel); else {    Level level=s_currentLevel;    setLevel(Level.OFF);    s_currentLevel=level;  }}  }
class C{  public int compare(Value a,Value b){  return a.compareTo(b,compareMode);}  }
class C{  private static boolean isPlaystateActive(int playState){switch (playState) {case RemoteControlClient.PLAYSTATE_PLAYING:case RemoteControlClient.PLAYSTATE_BUFFERING:case RemoteControlClient.PLAYSTATE_FAST_FORWARDING:case RemoteControlClient.PLAYSTATE_REWINDING:case RemoteControlClient.PLAYSTATE_SKIPPING_BACKWARDS:case RemoteControlClient.PLAYSTATE_SKIPPING_FORWARDS:    return true;default :  return false;}}  }
class C{  public boolean isNodeDescendant(DefaultMutableTreeNode anotherNode){  if (anotherNode == null)   return false;  return anotherNode.isNodeAncestor(this);}  }
class C{  public void pushFrame(LocalVariableMap vars,DMLProgramCounter pc){  callStack.push(new DMLFrame(vars,pc));}  }
class C{  public static boolean asBoolean(Boolean bool){  return bool;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public static <T>Select<T> from(Class<T> dataObjectClass){  return new Select<>(dataObjectClass);}  }
class C{  public static IStatus validatePackageName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nullName,null);  }  int length;  if ((length=name.length()) == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_emptyName,null);  }  if (name.charAt(0) == DOT || name.charAt(length - 1) == DOT) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_dotName,null);  }  if (CharOperation.isWhitespace(name.charAt(0)) || CharOperation.isWhitespace(name.charAt(name.length() - 1))) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nameWithBlanks,null);  }  int dot=0;  while (dot != -1 && dot < length - 1) {    if ((dot=name.indexOf(DOT,dot + 1)) != -1 && dot < length - 1 && name.charAt(dot + 1) == DOT) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_consecutiveDotsName,null);    }  }  StringTokenizer st=new StringTokenizer(name,".");  boolean firstToken=true;  IStatus warningStatus=null;  while (st.hasMoreTokens()) {    String typeName=st.nextToken();    typeName=typeName.trim();    char[] scannedID=scannedIdentifier(typeName,sourceLevel,complianceLevel);    if (scannedID == null) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,typeName),null);    }    if (firstToken && scannedID.length > 0 && ScannerHelper.isUpperCase(scannedID[0])) {      if (warningStatus == null) {        warningStatus=new Status(IStatus.WARNING,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_uppercaseName,null);      }    }    firstToken=false;  }  if (warningStatus != null) {    return warningStatus;  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  public static boolean isPkgManager(){  return "@REPL_PKGMANAGER@".equals("true");}  }
class C{  public static List<String> tokenize(String arguments){  return tokenize(arguments,false);}  }
class C{  protected EnumConstruct(XmlNamespace namespace,String tagName,String attrName,Set<String> values){  this(namespace,tagName,attrName,values,null);}  }
class C{  static long[] toLongs(long data,int length){  if (data == 0) {    return null;  }  long[] res=new long[length];  for (int i=0; i < length; i++, data+=getLongSize()) {    res[i]=getLong(data);  }  return res;}  }
class C{  public boolean hasAccept(){  return accept != null;}  }
class C{  public Integer read(){  Queue<Integer> txFifo=isTxFifo1() ? fifo1 : fifo2;  if (!isScrTxeSet()) {    if (logSerialMessages)     System.err.println("FrSerialInterface.read()  was called while Tx is disabled");    return 0;  }  if (txFifo == null) {    setSsrTdre();    if (isScrTieSet()) {      requestInterrupt(txInterruptNumber,txInterruptSource);    }    signalBusIdle();    return tdr;  } else {    Integer value=txFifo.poll();    if (txFifo.isEmpty()) {      setFcr1Fdrq();      setSsrTdre();      if (isFcr1FtieSet()) {        requestInterrupt(txInterruptNumber,txInterruptSource);      }      signalBusIdle();    }    return value;  }}  }
class C{  public static void sendTempFile(File file,HttpServletResponse response,String mimeType) throws IOException {  if (file.exists()) {    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));    if (mimeType != null) {      response.setHeader("Content-Type",mimeType);    }    response.setHeader("Content-Length",String.valueOf(file.length()));    SimpleDateFormat sdf=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z",Locale.ENGLISH);    sdf.setTimeZone(TimeZone.getTimeZone("GMT"));    response.setHeader("Last-Modified",sdf.format(new Date(file.lastModified())));    BufferedOutputStream bos=new BufferedOutputStream(response.getOutputStream());    byte[] input=new byte[1024];    boolean eof=false;    while (!eof) {      int length=bis.read(input);      if (length == -1) {        eof=true;      } else {        bos.write(input,0,length);      }    }    bos.flush();    bis.close();    bos.close();  } else {    throw new FileNotFoundException(file.getAbsolutePath());  }}  }
class C{  public void addDimension(Dimension dimension){  getDimensions().add(dimension);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void enqueue(E x){  last=last.next=new Node<E>(x);}  }
class C{  public static <T>T checkNotNull(final T reference,final Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots/{sid}/restore") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep restoreConsistencyGroupSnapshot(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapshotId){  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final BlockSnapshot snapshot=(BlockSnapshot)queryResource(snapshotId);  verifySnapshotIsForConsistencyGroup(snapshot,consistencyGroup);  if (BlockConsistencyGroupUtils.getLocalSystemsInCG(consistencyGroup,_dbClient).isEmpty()) {    _log.error("{} Group Snapshot operations not supported when there is no backend CG",consistencyGroup.getId());    throw APIException.badRequests.cannotCreateSnapshotOfVplexCG();  }  final Volume snapshotParentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  blockServiceApiImpl.validateRestoreSnapshot(snapshot,snapshotParentVolume);  final String taskId=UUID.randomUUID().toString();  final Operation op=_dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),taskId,ResourceOperationTypeEnum.RESTORE_CONSISTENCY_GROUP_SNAPSHOT);  blockServiceApiImpl.restoreSnapshot(snapshot,snapshotParentVolume,null,taskId);  auditBlockConsistencyGroup(OperationTypeEnum.RESTORE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,snapshotId.toString(),consistencyGroupId.toString(),snapshot.getStorageController().toString());  return toTask(snapshot,taskId,op);}  }
class C{  public String optString(String key){  return optString(key,"");}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.630 -0500",hash_original_method="4D8DFD32FB0492CC10F2A4C48D6AABE0",hash_generated_method="B71DB3D06622A0296C91FB46F93540CF") public final boolean isStrikeThruText(){  return 1 == ((getFlags() & STRIKE_THRU_TEXT_FLAG) + 0);}  }
class C{  @CanIgnoreReturnValue public static <T>T readLines(URL url,Charset charset,LineProcessor<T> callback) throws IOException {  return asCharSource(url,charset).readLines(callback);}  }
class C{  public void updateCircle(float latPoint,float lonPoint,float radius,int units,int nverts,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(latPoint,lonPoint,radius,units,nverts,properties,link.dos);}  }
class C{  public void addPutfield(CtClass c,String name,String desc){  addPutfield0(c,null,name,desc);}  }
class C{  protected static int compareValues(Object valueOne,Object valueTwo,boolean isDescending){  if (valueOne == null || valueTwo == null) {    if (valueOne == null && valueTwo == null) {      return 0;    }    if (valueOne == null) {      if (isDescending) {        return 1;      }      return -1;    }    if (isDescending) {      return -1;    }    return 1;  }  Comparable comparable1;  if (valueOne instanceof Comparable) {    comparable1=(Comparable)valueOne;  } else {    throw new ClassCastException("Cannot sort objects of type " + valueOne.getClass());  }  if (isDescending) {    return -1 * comparable1.compareTo(valueTwo);  }  return comparable1.compareTo(valueTwo);}  }
class C{  @HLEFunction(nid=0xFC6FC07B,version=150) public int sceNetAdhocPtpConnect(@CheckArgument("checkPtpId") int id,int timeout,int nonblock){  return ptpObjects.get(id).connect(timeout,nonblock);}  }
class C{  public void message(CanMessage m){}  }
class C{  @Override public void flush() throws IllegalStateException {  log.i("flush");  trackHandlerGate.close();  Message msg=trackHandler.obtainMessage(MSG_FLUSH_TRACK);  if (log.allowDebug()) {    log.d("Sending flush Directtrack handler thread");  }  trackHandler.sendMessage(msg);  trackHandlerGate.block();  if (log.allowDebug()) {    log.d("Flushing Direct Track Done");  }}  }
class C{  public InvalidResponseException(String message){  super(message);}  }
class C{  public DownExpandAnimation(View view,int duration){  setDuration(duration);  mAnimatedView=view;  mViewLayoutParams=(LayoutParams)view.getLayoutParams();  mIsVisibleAfter=(view.getVisibility() == View.VISIBLE);  mMarginStart=mViewLayoutParams.bottomMargin;  mMarginEnd=(mMarginStart == 0 ? (0 - view.getHeight()) : 0);  view.setVisibility(View.VISIBLE);}  }
class C{  private Node createExternalNode(Node source,Taxon taxon){  ReRootedNode node=new ReRootedNode(source,taxon);  externalNodes.put(taxon,node);  return node;}  }
class C{  private void printModifiers(List<IExtendedModifier> ext){  for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.fBuffer.append(" ");  }}  }
class C{  protected Anonymous_numExpr_2_Impl(){  super();}  }
class C{  private LogbackAppenderAccessor wrapAppender(Object appender){  try {    if (appender == null) {      throw new IllegalArgumentException("appender is null");    }    LogbackAppenderAccessor appenderAccessor=new LogbackAppenderAccessor();    appenderAccessor.setTarget(appender);    appenderAccessor.setLoggerAccessor(this);    appenderAccessor.setApplication(getApplication());    return appenderAccessor;  } catch (  Exception e) {    logger.error("Could not wrap appender: '{}'",appender,e);  }  return null;}  }
class C{  public static void exportToJavascriptArrays() throws IOException {  Index index2=index.filterIndex(ConfigurationManager.getCurrentProfile().getMaxKeywords(),ConfigurationManager.getCurrentProfile().getIndexFilterAlgorithm());  File searchFolder=new File(CatalogManager.getGenerateFolder(),"_search");  searchFolder=new File(searchFolder,"database");  searchFolder.mkdirs();  index2.exportToJavascriptArrays(searchFolder);}  }
class C{  public static void awaitDataReady(){synchronized (mDbHelperLock) {    if (mDbHelper == null) {      try {        mDbHelperLock.wait();      } catch (      InterruptedException e) {        e.printStackTrace();      }    }  }}  }
class C{  public int size(){  final Segment<K,V>[] segments=this.segments;  final int segmentCount=segments.length;  long previousSum=0L;  for (int retries=-1; retries < RETRIES_BEFORE_LOCK; retries++) {    long sum=0L;    long size=0L;    for (int i=0; i < segmentCount; i++) {      Segment<K,V> segment=segmentAt(segments,i);      if (segment != null) {        sum+=segment.modCount;        size+=segment.count;      }    }    if (sum == previousSum)     return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;    previousSum=sum;  }  long size=0L;  for (int i=0; i < segmentCount; i++) {    Segment<K,V> segment=ensureSegment(i);    segment.lock();    size+=segment.count;  }  for (int i=0; i < segmentCount; i++)   segments[i].unlock();  return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;}  }
class C{  public void resumeIncomingFileTransfer(FileSharingSession session,boolean isGroup){  if (sLogger.isActivated()) {    sLogger.info("Resume incoming file transfer from " + session.getRemoteContact());  }  if (isGroup) {    GroupFileTransferImpl groupFileTransfer=getOrCreateGroupFileTransfer(session.getContributionID(),session.getFileTransferId());    session.addListener(groupFileTransfer);  } else {    OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(session.getFileTransferId());    session.addListener(oneToOneFileTransfer);  }}  }
class C{  public void warn(String tag,String message){  info(tag,message);}  }
class C{  public CUCorrectionProposal(String name,ICompilationUnit cu,TextChange change,int relevance){  this(name,cu,change,relevance,JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE));}  }
class C{  @Override public int hashCode(){  return nodeId.hashCode() - distrib.hashCode();}  }
class C{  void scheduleFade(){  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_FADE),FADE_DELAY);}  }
class C{  private View findInterceptingView(float pos,View v){  for (  KeyButtonView otherView : mButtonViews) {    if (otherView == v) {      continue;    }    if (ArrayUtils.contains(SMALL_BUTTON_IDS,otherView.getId())) {      continue;    }    otherView.getLocationOnScreen(sLocation);    float otherPos=sLocation[mVertical ? 1 : 0];    float otherDimension=mVertical ? v.getHeight() : v.getWidth();    if (pos > (otherPos + otherDimension / 4) && pos < (otherPos + otherDimension)) {      return otherView;    }  }  return null;}  }
class C{  boolean cancel0(){  setPeriod(-2l);  return true;}  }
class C{  private boolean isRootElement(Object element){  Object input=getRoot();  Object[] rootElemens=((ITreeContentProvider)getContentProvider()).getElements(input);  return ArrayUtils.contains(rootElemens,element);}  }
class C{  @Override public Component add(Component comp){  _mainPanel.addRight((JComponent)comp);  return comp;}  }
class C{  public int end(){  if (first < 0)   throw new IllegalStateException("No match available");  return last;}  }
class C{  public IndexScan pickBestIndex(TableGroupJoinNode node,Set<TableSource> required,IntersectionEnumerator enumerator){  TableSource table=node.getTable();  IndexScan bestIndex=null;  if (required.contains(table)) {    for (    TableIndex index : table.getTable().getTable().getIndexes()) {      SingleIndexScan candidate=new SingleIndexScan(index,table,queryContext);      bestIndex=betterIndex(bestIndex,candidate,enumerator);    }  }  if ((table.getGroup() != null) && !hasOuterJoinNonGroupConditions(node)) {    for (    GroupIndex index : table.getGroup().getGroup().getIndexes()) {      if (index.leafMostTable() != table.getTable().getTable())       continue;      TableSource rootTable=table;      TableSource rootRequired=null, leafRequired=null;      if (index.getJoinType() == JoinType.LEFT) {        while (rootTable != null) {          if (required.contains(rootTable)) {            rootRequired=rootTable;            if (leafRequired == null)             leafRequired=rootTable;          } else {            if (leafRequired != null) {              leafRequired=null;              break;            }          }          if (index.rootMostTable() == rootTable.getTable().getTable())           break;          rootTable=rootTable.getParentTable();        }        if ((rootTable == null) || (rootRequired != rootTable) || (leafRequired == null))         continue;      } else {        if (!required.contains(table))         continue;        leafRequired=table;        boolean optionalSeen=false;        while (rootTable != null) {          if (required.contains(rootTable)) {            if (optionalSeen) {              rootRequired=null;              break;            }            rootRequired=rootTable;          } else {            optionalSeen=true;          }          if (index.rootMostTable() == rootTable.getTable().getTable())           break;          rootTable=rootTable.getParentTable();        }        if ((rootTable == null) || (rootRequired == null))         continue;      }      SingleIndexScan candidate=new SingleIndexScan(index,rootTable,rootRequired,leafRequired,table,queryContext);      bestIndex=betterIndex(bestIndex,candidate,enumerator);    }  }  return bestIndex;}  }
class C{  public int decodeColor(String colorString){  if (colorString == null || colorString.trim().isEmpty())   return Color.BLACK;  if (colorString.startsWith("#"))   colorString=colorString.replace("#","");  if (colorString.startsWith("0x"))   colorString=colorString.replace("0x","");  if (colorString.startsWith("0X"))   colorString=colorString.replace("0X","");  int alpha=-1, red=-1, green=-1, blue=-1;  try {    if (colorString.length() == 8) {      alpha=Integer.parseInt(colorString.substring(0,2),16);      red=Integer.parseInt(colorString.substring(2,4),16);      green=Integer.parseInt(colorString.substring(4,6),16);      blue=Integer.parseInt(colorString.substring(6,8),16);    } else     if (colorString.length() == 6) {      alpha=255;      red=Integer.parseInt(colorString.substring(0,2),16);      green=Integer.parseInt(colorString.substring(2,4),16);      blue=Integer.parseInt(colorString.substring(4,6),16);    }    return Color.argb(alpha,red,green,blue);  } catch (  NumberFormatException e) {    Log.w(LOG_TAG,"Error parsing color ",e);    return Color.GRAY;  }}  }
class C{  public AppletThreadGroup(ThreadGroup parent,String name){  super(parent,name);  setMaxPriority(Thread.NORM_PRIORITY - 1);}  }
class C{  public static List<String> splitFileNames(String fileNames){  if (fileNames == null)   return Collections.<String>emptyList();  List<String> result=new ArrayList<>();  for (  String file : fileNames.split("(?<!\\\\),")) {    result.add(file.replaceAll("\\\\(?=,)",""));  }  return result;}  }
class C{  public void add(int v){  expandFor(size,0);  vector[size - 1]=v;}  }
class C{  protected Object _create(String className,Object[] constructorArgs,Class<?>[] argClasses,String prefix,Properties properties){  String errorMessage=null;  Throwable exceptionCaught=null;  boolean DEBUG=false;  try {    if (logger.isLoggable(Level.FINER)) {      DEBUG=true;      logger.finer("creating: " + className);    }    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl == null) {      cl=this.getClass().getClassLoader();    }    Class<?> newObjClass=Class.forName(className.trim(),true,cl);    if (DEBUG)     logger.finer(" - got class for " + className);    if (argClasses == null) {      if (constructorArgs != null && constructorArgs.length > 0) {        argClasses=new Class[constructorArgs.length];        for (int i=0; i < argClasses.length; i++) {          argClasses[i]=constructorArgs[i].getClass();        }      } else {        constructorArgs=null;      }    }    if (DEBUG) {      StringBuffer sb=new StringBuffer();      if (constructorArgs == null) {        sb.append("null");      } else {        for (int i=0; i < constructorArgs.length; i++) {          sb.append(constructorArgs[i].getClass().getName());          if (i < constructorArgs.length - 1)           sb.append(", ");        }      }      logger.finer(" - created class arguments [" + sb.toString() + "]");    }    Constructor<?> constructor=null;    Object obj=null;    try {      constructor=newObjClass.getConstructor(argClasses);      if (DEBUG)       logger.finer(" - got constructor");      obj=constructor.newInstance(constructorArgs);      if (DEBUG)       logger.finer(" - got object");    } catch (    NoSuchMethodException nsmei) {      obj=createWithSubclassConstructorArgs(newObjClass,argClasses,constructorArgs);      if (DEBUG && obj != null)       logger.finer(" - got object on try #2");    }    if (obj instanceof PropertyConsumer && properties != null) {      if (DEBUG) {        logger.finer("  setting properties with prefix \"" + prefix + "\"");      }      ((PropertyConsumer)obj).setProperties(prefix,properties);      if (Debug.debugging(BasicI18n.DEBUG_CREATE)) {        ((PropertyConsumer)obj).getPropertyInfo(null);      }      if (DEBUG)       logger.finer(" - set properties");    }    return obj;  } catch (  NoSuchMethodException nsme) {    exceptionCaught=nsme;    errorMessage="NoSuchMethodException: " + nsme.getMessage();  }catch (  InstantiationException ie) {    exceptionCaught=ie;    errorMessage="InstantiationException: " + ie.getMessage() + " - Might be trying to create an abstract class";  }catch (  IllegalAccessException iae) {    if (DEBUG)     iae.printStackTrace();    exceptionCaught=iae;    errorMessage="IllegalAccessException: " + iae.getMessage();  }catch (  IllegalArgumentException iae2) {    if (DEBUG)     iae2.printStackTrace();    exceptionCaught=iae2;    errorMessage="IllegalArgumentException: " + iae2.getMessage();  }catch (  InvocationTargetException ite) {    if (DEBUG)     ite.printStackTrace();    exceptionCaught=ite;    errorMessage="InvocationTargetException: " + ite.getMessage();  }catch (  ClassNotFoundException cnfe) {    exceptionCaught=cnfe;    errorMessage="ClassNotFoundException: " + cnfe.getMessage();  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("Failed to create \"" + className + (prefix != null ? "\" using component marker name \"" + prefix + "\"" : "")+ " - error message: "+ errorMessage);    if (exceptionCaught != null) {      logger.log(Level.WARNING,"Exception reported is as follows:",exceptionCaught);    }  }  return null;}  }
class C{  public static void main(String[] args){  runClassifier(new SGDText(),args);}  }
class C{  protected void generateSetValueMethod(SourcePrinter srcWriter){  srcWriter.println("public void setValue(Object value, String columnKey, DataSourceRecord<?> dataSourceRecord) {");  JField[] fields=JClassUtils.getDeclaredFields(dtoType);  String dtoTypeName=dtoType.getParameterizedQualifiedSourceName();  for (int i=0; i < fields.length; i++) {    JField field=fields[i];    String name=field.getName();    JType fieldType=field.getType();    String fieldTypeName=fieldType.getParameterizedQualifiedSourceName();    String setterName=null;    String getterName=null;    if (fieldType.isPrimitive() != null) {      JPrimitiveType jPrimitiveType=fieldType.isPrimitive();      fieldTypeName=jPrimitiveType.getQualifiedBoxedSourceName();    }    try {      setterName=dtoType.getMethod(ClassUtils.getSetterMethod(name),new JType[]{fieldType}).getName();      getterName=dtoType.getMethod(ClassUtils.getGetterMethod(name),new JType[]{}).getName();    } catch (    NotFoundException e) {    }    boolean isPublic=field.isPublic() && !field.isStatic();    boolean hasGetterAndSetter=setterName != null && getterName != null;    boolean isAccessible=isPublic || hasGetterAndSetter;    if (isAccessible) {      srcWriter.println();      srcWriter.println("if(" + EscapeUtils.quote(name) + ".equals(columnKey)){");      if (isPublic) {        srcWriter.println(fieldTypeName + " field = ((" + dtoTypeName+ ") dataSourceRecord.getRecordObject())."+ name+ ";");      } else {        srcWriter.println(fieldTypeName + " field = ((" + dtoTypeName+ ") dataSourceRecord.getRecordObject())."+ getterName+ "();");      }      srcWriter.println("boolean changed = (value != null && field == null) || (field != null && !field.equals(value));");      srcWriter.println("if(changed){");      if (isPublic) {        srcWriter.println("((" + dtoTypeName + ") dataSourceRecord.getRecordObject())."+ name+ " = ("+ fieldTypeName+ ") value;");      } else {        srcWriter.println("((" + dtoTypeName + ") dataSourceRecord.getRecordObject())."+ setterName+ "(("+ fieldTypeName+ ") value);");      }      srcWriter.println("dataSourceRecord.setDirty();");      srcWriter.println("return;");      srcWriter.print("}");      srcWriter.print("}");    }  }  srcWriter.println("}");}  }
class C{  public static void jenkins(final BitVector bv,final long prefixLength,final long[] aa,final long bb[],final long cc[],final long[] h){  if (prefixLength == 0) {    final long seed=aa[0];    h[0]=seed ^ 0x8de6a918d6538324L;    h[1]=seed ^ 0x6bda2aef21654e7dL;    h[2]=seed ^ 0x36071e726d0ba0c5L;    return;  }  int stateOffset=(int)(prefixLength / (3 * Long.SIZE));  long from=(stateOffset * 3) * Long.SIZE;  long a=aa[stateOffset];  long b=bb[stateOffset];  long c=cc[stateOffset];  if (prefixLength - from > Long.SIZE * 2) {    a+=bv.getLong(from,from + Long.SIZE);    b+=bv.getLong(from + Long.SIZE,from + 2 * Long.SIZE);    c+=bv.getLong(from + 2 * Long.SIZE,Math.min(from + 3 * Long.SIZE,prefixLength));    a-=b;    a-=c;    a^=(c >>> 43);    b-=c;    b-=a;    b^=(a << 9);    c-=a;    c-=b;    c^=(b >>> 8);    a-=b;    a-=c;    a^=(c >>> 38);    b-=c;    b-=a;    b^=(a << 23);    c-=a;    c-=b;    c^=(b >>> 5);    a-=b;    a-=c;    a^=(c >>> 35);    b-=c;    b-=a;    b^=(a << 49);    c-=a;    c-=b;    c^=(b >>> 11);    a-=b;    a-=c;    a^=(c >>> 12);    b-=c;    b-=a;    b^=(a << 18);    c-=a;    c-=b;    c^=(b >>> 22);    from+=3 * Long.SIZE;  }  c+=prefixLength;  long residual=prefixLength - from;  if (residual > 0) {    if (residual > Long.SIZE) {      a+=bv.getLong(from,from + Long.SIZE);      residual-=Long.SIZE;    }    if (residual != 0)     b+=bv.getLong(prefixLength - residual,prefixLength);  }  a-=b;  a-=c;  a^=(c >>> 43);  b-=c;  b-=a;  b^=(a << 9);  c-=a;  c-=b;  c^=(b >>> 8);  a-=b;  a-=c;  a^=(c >>> 38);  b-=c;  b-=a;  b^=(a << 23);  c-=a;  c-=b;  c^=(b >>> 5);  a-=b;  a-=c;  a^=(c >>> 35);  b-=c;  b-=a;  b^=(a << 49);  c-=a;  c-=b;  c^=(b >>> 11);  a-=b;  a-=c;  a^=(c >>> 12);  b-=c;  b-=a;  b^=(a << 18);  c-=a;  c-=b;  c^=(b >>> 22);  h[0]=a;  h[1]=b;  h[2]=c;}  }
class C{  public BookmarkManager(final com.google.security.zynamics.binnavi.models.Bookmarks.memory.BookmarkManager bookmarkManager){  m_bookmarkManager=bookmarkManager;  for (  final CBookmark bookmark : m_bookmarkManager) {    m_bookmarks.add(new Bookmark(bookmark));  }  m_bookmarkManager.addListener(m_internalBookmarkListener);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new UnmodifiableRandomAccessList<>(list) : this);}  }
class C{  public void populateDAO(Object value,int row,int column){  final Entrylimit element=(Entrylimit)getData().getAspect().get(row);switch (column) {case 0:{      element.setStartPrice(((Money)value).getBigDecimalValue());      break;    }case 1:{    element.setEndPrice(((Money)value).getBigDecimalValue());    break;  }case 2:{  element.setLimitAmount(((Money)value).getBigDecimalValue());  break;}case 3:{element.setPercentOfPrice(((Percent)value).getBigDecimalValue());break;}case 4:{element.setPercentOfMargin(((Percent)value).getBigDecimalValue());break;}case 5:{element.setShareRound(((Quantity)value).getIntegerValue());break;}case 6:{element.setPriceRound(((Money)value).getBigDecimalValue());break;}case 7:{element.setPivotRange(((Money)value).getBigDecimalValue());break;}default :{}}element.setDirty(true);}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("flattening iterator out of bounds");  }  int type=holdType;  if (type != SEG_CLOSE) {    coords[0]=(float)hold[holdIndex + 0];    coords[1]=(float)hold[holdIndex + 1];    if (type != SEG_MOVETO) {      type=SEG_LINETO;    }  }  return type;}  }
class C{  public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  public void init(String tmUniqueName,Properties properties) throws SysException {  boolean canExport=false;  String exportClass=properties.getProperty("com.atomikos.icatch.rmi_export_class");  canExport="UnicastRemoteObject".equals(exportClass) || "PortableRemoteObject".equals(exportClass);  if (!canExport) {    LOGGER.logWarning("Client transaction demarcation not supported for " + "com.atomikos.icatch.rmi_export_class=" + exportClass);    exported_=false;  } else {    name_=tmUniqueName + "UserTransactionServer";    providerUrl_=properties.getProperty(Context.PROVIDER_URL);    if (providerUrl_ == null) {      throw new SysException("Startup property " + Context.PROVIDER_URL + " must be set for client demarcation.");    }    initialContextFactory_=properties.getProperty(Context.INITIAL_CONTEXT_FACTORY);    if (initialContextFactory_ == null) {      throw new SysException("Startup property " + Context.INITIAL_CONTEXT_FACTORY + " must be set for client demarcation.");    }    properties_=properties;    try {      if ("PortableRemoteObject".equals(exportClass)) {        PortableRemoteObject.exportObject(this);        exported_=true;      } else       if ("UnicastRemoteObject".equals(exportClass)) {        UnicastRemoteObject.exportObject(this);        exported_=true;      }    } catch (    Exception e) {      throw new SysException("Error exporting - naming service not running?",e);    }    try {      Context ctx=getInitialContext();      ctx.rebind(name_,this);    } catch (    Exception e) {      throw new SysException("Please make sure the rmiregistry is running!?",e);    }  }}  }
class C{  public void writeLinkGraphics(LinkGraphicList lgl,LinkProperties properties) throws IOException {  int nPolys=polygons.length;  if (nPolys <= 0)   return;  for (int i=0; i < nPolys; i++) {    lgl.addPoly(((ESRIPoly.ESRIFloatPoly)polygons[i]).getRadians(),OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT,properties);  }}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  private JCExpression makeIndyCall(DiagnosticPosition pos,Type site,Name bsmName,List<Object> staticArgs,MethodType indyType,List<JCExpression> indyArgs,Name methName){  int prevPos=make.pos;  try {    make.at(pos);    List<Type> bsm_staticArgs=List.of(syms.methodHandleLookupType,syms.stringType,syms.methodTypeType).appendList(bsmStaticArgToTypes(staticArgs));    Symbol bsm=rs.resolveInternalMethod(pos,attrEnv,site,bsmName,bsm_staticArgs,List.<Type>nil());    DynamicMethodSymbol dynSym=new DynamicMethodSymbol(methName,syms.noSymbol,bsm.isStatic() ? ClassFile.REF_invokeStatic : ClassFile.REF_invokeVirtual,(MethodSymbol)bsm,indyType,staticArgs.toArray());    JCFieldAccess qualifier=make.Select(make.QualIdent(site.tsym),bsmName);    qualifier.sym=dynSym;    qualifier.type=indyType.getReturnType();    JCMethodInvocation proxyCall=make.Apply(List.<JCExpression>nil(),qualifier,indyArgs);    proxyCall.type=indyType.getReturnType();    return proxyCall;  }  finally {    make.at(prevPos);  }}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static String format(byte[] a){  return (a == null) ? "null" : (a.length == 0) ? "" : formatTo(new StringBuilder(),a,", ").toString();}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < 24) {    throw new InvalidKeyException("Wrong key size");  }  if (DESKeySpec.isParityAdjusted(key,offset) == false || DESKeySpec.isParityAdjusted(key,offset + 8) == false || DESKeySpec.isParityAdjusted(key,offset + 16) == false) {    return false;  }  return true;}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  @Override public double splitValue(){  return m_splitValue;}  }
class C{  public void changeAvailabilityStatus(String status,Presence.Mode mode){  if (nickname == null || nickname.equals("")) {    throw new IllegalArgumentException("Nickname must not be null or blank.");  }  if (!joined) {    throw new IllegalStateException("Must be logged into the room to change the " + "availability status.");  }  Presence joinPresence=new Presence(Presence.Type.available);  joinPresence.setStatus(status);  joinPresence.setMode(mode);  joinPresence.setTo(room + "/" + nickname);  for (  PacketInterceptor packetInterceptor : presenceInterceptors) {    packetInterceptor.interceptPacket(joinPresence);  }  connection.sendPacket(joinPresence);}  }
class C{  public TopicSubscriberLoop(TopicProcessor<T> processor,RingBuffer.Sequence pendingRequest,Subscriber<? super T> subscriber){  this.processor=processor;  this.pendingRequest=pendingRequest;  this.subscriber=subscriber;}  }
class C{  public void removeAllCallbacks(){  removeAllConnectionCallbacks();  removeAllDataCallbacks();  removeAllVersionQueryCallbacks();  removeAllTestingCallbacks();  removeAllRenamingCallbacks();  removeAllBaudRateQueryCallbacks();  removeAllErrorCallbacks();  removeAllFirmwareUpdateCallbacks();}  }
class C{  public boolean hasUserinfo(){  return (_userinfo != null);}  }
class C{  public ClassCastException(){}  }
class C{  private static void paintRegion(SynthContext state,Graphics g,Rectangle bounds){  JComponent c=state.getComponent();  SynthStyle style=state.getStyle();  int x;  int y;  int width;  int height;  if (bounds == null) {    x=0;    y=0;    width=c.getWidth();    height=c.getHeight();  } else {    x=bounds.x;    y=bounds.y;    width=bounds.width;    height=bounds.height;  }  boolean subregion=state.getRegion().isSubregion();  if ((subregion && style.isOpaque(state)) || (!subregion && c.isOpaque())) {    g.setColor(style.getColor(state,ColorType.BACKGROUND));    g.fillRect(x,y,width,height);  }}  }
class C{  public h4(Element element){  addElement(element);}  }
class C{  private Object[] resolveParameters(Executable executable,Optional<Object> target,Object outerInstance,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){  Preconditions.notNull(target,"target must not be null");  Parameter[] parameters=executable.getParameters();  Object[] values=new Object[parameters.length];  int start=0;  if (outerInstance != null) {    values[0]=outerInstance;    start=1;  }  for (int i=start; i < parameters.length; i++) {    ParameterContext parameterContext=new DefaultParameterContext(parameters[i],i,target);    values[i]=resolveParameter(parameterContext,executable,extensionContext,extensionRegistry);  }  return values;}  }
class C{  void createSubordinateHost() throws Exception {  assertCommandAndResponse("host_create_fakesite.xml","host_create_response_fakesite.xml",DateTime.parse("2000-06-06T00:01:00Z"));  assertCommandAndResponse("domain_update_add_nameserver_fakesite.xml","domain_update_add_nameserver_response_fakesite.xml",DateTime.parse("2000-06-08T00:00:00Z"));  assertCommandAndResponse("domain_info_fakesite.xml","domain_info_response_fakesite_3_nameservers.xml",DateTime.parse("2000-06-08T00:01:00Z"));  assertCommandAndResponse("host_info_fakesite.xml","host_info_response_fakesite.xml",DateTime.parse("2000-06-08T00:02:00Z"));}  }
class C{  @SuppressWarnings("rawtypes") @Override public List<Integer> emit(List<Object> tuple,Object messageId){  if (!sanityCheck()) {    LOG.error("spout collector for topic {} see monitored metadata invalid, is this data source removed! Trigger message id {} ",topic,messageId);    return null;  }  KafkaMessageIdWrapper newMessageId=new KafkaMessageIdWrapper(messageId);  newMessageId.topic=topic;  List<Object> convertedTuple=converter.convert(tuple);  if (convertedTuple == null) {    LOG.warn("source data {} can't be converted to a stream, ignore this message",tuple);    spout.ack(newMessageId);    return null;  }  Map m=(Map)convertedTuple.get(3);  Object streamId=convertedTuple.get(1);  StreamDefinition sd=sds.get(streamId);  if (sd == null) {    LOG.warn("StreamDefinition {} is not found within {}, ignore this message",streamId,sds);    spout.ack(newMessageId);    return null;  }  StreamEvent event=convertToStreamEventByStreamDefinition((Long)convertedTuple.get(2),m,sds.get(streamId));  for (  StreamRepartitionMetadata md : streamRepartitionMetadataList) {    if (!event.getStreamId().equals(md.getStreamId())) {      continue;    }    for (    StreamRepartitionStrategy groupingStrategy : md.groupingStrategies) {      int hash=0;      if (groupingStrategy.getPartition().getType().equals(StreamPartition.Type.GROUPBY)) {        hash=getRoutingHashByGroupingStrategy(m,groupingStrategy);      } else       if (groupingStrategy.getPartition().getType().equals(StreamPartition.Type.SHUFFLE)) {        hash=Math.abs((int)System.currentTimeMillis());      }      int mod=hash % groupingStrategy.numTotalParticipatingRouterBolts;      if (mod >= groupingStrategy.startSequence && mod < groupingStrategy.startSequence + numOfRouterBolts) {        String sid=StreamIdConversion.generateStreamIdBetween(spout.getSpoutName(),spout.getRouteBoltName() + (hash % numOfRouterBolts));        if (LOG.isDebugEnabled()) {          LOG.debug("Emitted tuple: {} with message Id: {}, with topic {}, to streamId {}",convertedTuple,messageId,topic,sid);        }        PartitionedEvent pEvent=new PartitionedEvent(event,groupingStrategy.partition,hash);        if (this.serializer == null) {          delegate.emit(sid,Collections.singletonList(pEvent),newMessageId);        } else {          try {            delegate.emit(sid,Collections.singletonList(serializer.serialize(pEvent)),newMessageId);          } catch (          Exception e) {            LOG.error("Failed to serialize {}, this message would be ignored!",pEvent,e);            spout.ack(newMessageId);          }        }      } else {        if (LOG.isDebugEnabled()) {          LOG.debug("Message filtered with mod {} not within range {} and {} for message {}",mod,groupingStrategy.startSequence,groupingStrategy.startSequence + numOfRouterBolts,tuple);        }        spout.ack(newMessageId);      }    }  }  return null;}  }
class C{  private static void addSwatchToRow(TableRow row,View swatch,int rowNumber){  if (rowNumber % 2 == 0) {    row.addView(swatch);  } else {    row.addView(swatch,0);  }}  }
class C{  public S2LatLngRect expanded(S2LatLng margin){  if (isEmpty()) {    return this;  }  return new S2LatLngRect(lat.expanded(margin.lat().radians()).intersection(fullLat()),lng.expanded(margin.lng().radians()));}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest req=HttpServletRequest.class.cast(request);  long start=System.currentTimeMillis();  try {    chain.doFilter(request,response);  }  finally {    long delta=System.currentTimeMillis() - start;    HttpServletResponse resp=HttpServletResponse.class.cast(response);    updateCounters(req,resp,delta);  }}  }
class C{  private void printGitStatus(String statusText){  GitOutputConsole console=gitOutputConsoleFactory.create(STATUS_COMMAND_NAME);  console.print("");  List<String> statusLines=Arrays.asList(statusText.split("\n"));  boolean containsStagedChanges=statusLines.contains("Changes to be committed:");  boolean stagedChangesAlreadyPrinted=false;  for (  String line : statusLines) {    if ((line.startsWith("\t") || line.startsWith("#\t")) && containsStagedChanges && !stagedChangesAlreadyPrinted) {      console.print(line,Style.getVcsConsoleStagedFilesColor());      if (statusLines.indexOf(line) == statusLines.size() - 1 || statusLines.get(statusLines.indexOf(line) + 1).equals("")) {        stagedChangesAlreadyPrinted=true;      }      continue;    } else     if ((line.startsWith("\t") || line.startsWith("#\t"))) {      console.print(line,Style.getVcsConsoleUnstagedFilesColor());      continue;    }    console.print(line);  }  consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(),console);}  }
class C{  public ShowSystemMenuAction(boolean show){  this.show=show;}  }
class C{  public static synchronized void warmCodecs(String[] mimeTypes){  for (int i=0; i < mimeTypes.length; i++) {    getMediaCodecInfo(mimeTypes[i]);  }}  }
class C{  public static DistinctFilter newInstance(){  return new DistinctFilter(BOp.NOARGS,BOp.NOANNS);}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof BooleanArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  BooleanArrayList other=(BooleanArrayList)otherObj;  if (size() != other.size())   return false;  boolean[] theElements=elements();  boolean[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(getAccessFlags());}  }
class C{  @SuppressWarnings("unchecked") public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=(Map<String,Object>)sharedState;  this.options=options;  debug="true".equalsIgnoreCase((String)options.get("debug"));  strongDebug="true".equalsIgnoreCase((String)options.get("strongDebug"));  userProvider=(String)options.get(USER_PROVIDER);  groupProvider=(String)options.get(GROUP_PROVIDER);  tryFirstPass="true".equalsIgnoreCase((String)options.get("tryFirstPass"));  useFirstPass="true".equalsIgnoreCase((String)options.get("useFirstPass"));  storePass="true".equalsIgnoreCase((String)options.get("storePass"));  clearPass="true".equalsIgnoreCase((String)options.get("clearPass"));}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Map map=(Map)source;  for (  Object index : map.keySet()) {    String root=entry.getEntry();    String name=style.getElement(root);    OutputNode next=node.getChild(name);    Object item=map.get(index);    key.write(next,index);    value.write(next,item);  }}  }
class C{  public RDFHandlerException(String msg){  super(msg);}  }
class C{  public TableBuilder addColumns(Collection<? extends ColumnBuilder> columns){  if (columns != null) {    for (    ColumnBuilder col : columns) {      addColumn(col);    }  }  return this;}  }
class C{  private void minimizeTests(TestSuiteChromosome suite){  logger.info("Minimizing per test");  ExecutionTracer.enableTraceCalls();  for (  TestChromosome test : suite.getTestChromosomes()) {    test.setChanged(true);  }  List<TestFitnessFunction> goals=new ArrayList<TestFitnessFunction>();  for (  TestFitnessFactory<?> ff : testFitnessFactories) {    goals.addAll(ff.getCoverageGoals());  }  filterJUnitCoveredGoals(goals);  int currentGoal=0;  int numGoals=goals.size();  if (Properties.MINIMIZE_SORT)   Collections.sort(goals);  Set<TestFitnessFunction> covered=new LinkedHashSet<TestFitnessFunction>();  List<TestChromosome> minimizedTests=new ArrayList<TestChromosome>();  TestSuiteWriter minimizedSuite=new TestSuiteWriter();  for (  TestFitnessFunction goal : goals) {    updateClientStatus(numGoals > 0 ? 100 * currentGoal / numGoals : 100);    currentGoal++;    if (isTimeoutReached()) {      logger.warn("Minimization timeout. Roll back to original test suite");      return;    }    logger.info("Considering goal: " + goal);    if (Properties.MINIMIZE_SKIP_COINCIDENTAL) {      for (      TestChromosome test : minimizedTests) {        if (isTimeoutReached()) {          logger.warn("Minimization timeout. Roll back to original test suite");          return;        }        if (goal.isCovered(test)) {          logger.info("Covered by minimized test: " + goal);          covered.add(goal);          break;        }      }    }    if (covered.contains(goal)) {      logger.info("Already covered: " + goal);      logger.info("Now the suite covers " + covered.size() + "/"+ goals.size()+ " goals");      continue;    }    List<TestChromosome> coveringTests=new ArrayList<TestChromosome>();    for (    TestChromosome test : suite.getTestChromosomes()) {      if (goal.isCovered(test)) {        coveringTests.add(test);      }    }    Collections.sort(coveringTests);    if (!coveringTests.isEmpty()) {      TestChromosome test=coveringTests.get(0);      org.evosuite.testcase.TestCaseMinimizer minimizer=new org.evosuite.testcase.TestCaseMinimizer(goal);      TestChromosome copy=(TestChromosome)test.clone();      minimizer.minimize(copy);      if (isTimeoutReached()) {        logger.warn("Minimization timeout. Roll back to original test suite");        return;      }      copy.getTestCase().clearCoveredGoals();      for (      TestFitnessFunction g : goals) {        if (g.isCovered(copy)) {          covered.add(g);          logger.info("Goal covered by minimized test: " + g);        }      }      minimizedTests.add(copy);      minimizedSuite.insertTest(copy.getTestCase());      logger.info("After new test the suite covers " + covered.size() + "/"+ goals.size()+ " goals");    } else {      logger.info("Goal is not covered: " + goal);    }  }  logger.info("Minimized suite covers " + covered.size() + "/"+ goals.size()+ " goals");  suite.tests.clear();  for (  TestCase test : minimizedSuite.getTestCases()) {    suite.addTest(test);  }  if (Properties.MINIMIZE_SECOND_PASS) {    removeRedundantTestCases(suite);  }  double suiteCoverage=suite.getCoverage();  logger.info("Setting coverage to: " + suiteCoverage);  ClientState state=ClientState.MINIMIZATION;  ClientStateInformation information=new ClientStateInformation(state);  information.setProgress(100);  information.setCoverage((int)(Math.round(suiteCoverage * 100)));  ClientServices.getInstance().getClientNode().changeState(state,information);  for (  TestFitnessFunction goal : goals) {    if (!covered.contains(goal))     logger.info("Failed to cover: " + goal);  }}  }
class C{  public void record(Translation translation){synchronized (this) {    int offset=translation.id() - currentID;    while (offset >= translations.size())     translations.add(null);    translations.set(offset,translation);    if (translation.id() == currentID) {      this.notify();    }  }}  }
class C{  @SuppressWarnings("fallthrough") protected void buildCharCategories(Vector<String> tempRuleList){  int bracketLevel=0;  int p=0;  int lineNum=0;  expressions=new Hashtable<>();  while (lineNum < tempRuleList.size()) {    String line=tempRuleList.elementAt(lineNum);    p=0;    while (p < line.length()) {      int c=line.codePointAt(p);switch (c) {case '{':case '}':case '(':case ')':case '*':case '.':case '/':case '|':case ';':case '?':case '!':        break;case '[':      int q=p + 1;    ++bracketLevel;  while (q < line.length() && bracketLevel != 0) {    c=line.codePointAt(q);switch (c) {case '\\':      q++;    break;case '[':  ++bracketLevel;break;case ']':--bracketLevel;break;}q=q + Character.charCount(c);}if (expressions.get(line.substring(p,q)) == null) {expressions.put(line.substring(p,q),CharSet.parseString(line.substring(p,q)));}p=q - 1;break;case '\\':++p;c=line.codePointAt(p);default :expressions.put(line.substring(p,p + 1),CharSet.parseString(line.substring(p,p + 1)));break;}p+=Character.charCount(line.codePointAt(p));}++lineNum;}CharSet.releaseExpressionCache();categories=new Vector<>();if (ignoreChars != null) {categories.addElement(ignoreChars);} else {categories.addElement(new CharSet());}ignoreChars=null;mungeExpressionList(expressions);for (Enumeration<Object> iter=expressions.elements(); iter.hasMoreElements(); ) {CharSet e=(CharSet)iter.nextElement();for (int j=categories.size() - 1; !e.empty() && j > 0; j--) {CharSet that=categories.elementAt(j);if (!that.intersection(e).empty()) {CharSet temp=that.difference(e);if (!temp.empty()) {categories.addElement(temp);}temp=e.intersection(that);e=e.difference(that);if (!temp.equals(that)) {categories.setElementAt(temp,j);}}}if (!e.empty()) {categories.addElement(e);}}CharSet allChars=new CharSet();for (int i=1; i < categories.size(); i++) {allChars=allChars.union(categories.elementAt(i));}CharSet ignoreChars=categories.elementAt(0);ignoreChars=ignoreChars.difference(allChars);categories.setElementAt(ignoreChars,0);for (Enumeration<String> iter=expressions.keys(); iter.hasMoreElements(); ) {String key=iter.nextElement();CharSet cs=(CharSet)expressions.get(key);StringBuffer cats=new StringBuffer();for (int j=0; j < categories.size(); j++) {CharSet temp=cs.intersection(categories.elementAt(j));if (!temp.empty()) {cats.append((char)(0x100 + j));if (temp.equals(cs)) {break;}}}expressions.put(key,cats.toString());}charCategoryTable=new CompactByteArray((byte)0);supplementaryCharCategoryTable=new SupplementaryCharacterData((byte)0);for (int i=0; i < categories.size(); i++) {CharSet chars=categories.elementAt(i);Enumeration<int[]> enum_=chars.getChars();while (enum_.hasMoreElements()) {int[] range=enum_.nextElement();if (i != 0) {if (range[0] < Character.MIN_SUPPLEMENTARY_CODE_POINT) {if (range[1] < Character.MIN_SUPPLEMENTARY_CODE_POINT) {charCategoryTable.setElementAt((char)range[0],(char)range[1],(byte)i);} else {charCategoryTable.setElementAt((char)range[0],(char)0xFFFF,(byte)i);supplementaryCharCategoryTable.appendElement(Character.MIN_SUPPLEMENTARY_CODE_POINT,range[1],(byte)i);}} else {supplementaryCharCategoryTable.appendElement(range[0],range[1],(byte)i);}} else {if (range[0] < Character.MIN_SUPPLEMENTARY_CODE_POINT) {if (range[1] < Character.MIN_SUPPLEMENTARY_CODE_POINT) {charCategoryTable.setElementAt((char)range[0],(char)range[1],IGNORE);} else {charCategoryTable.setElementAt((char)range[0],(char)0xFFFF,IGNORE);supplementaryCharCategoryTable.appendElement(Character.MIN_SUPPLEMENTARY_CODE_POINT,range[1],IGNORE);}} else {supplementaryCharCategoryTable.appendElement(range[0],range[1],IGNORE);}}}}charCategoryTable.compact();supplementaryCharCategoryTable.complete();numCategories=categories.size();}  }
class C{  public final boolean isKeepChildForeground(){  return mKeepChildForeground;}  }
class C{  public static String padLeft(String text,int size){  return String.format("%1$" + size + "s",text);}  }
class C{  private static void runTask(AsyncIOProvider task){  if (!pool.remove(task)) {synchronized (task) {      while (!task.isFinished()) {        try {          task.wait();        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();          throw new RuntimeException("Failed to wait for cube/column load",e);        }      }    }  } else {    task.run();  }}  }
class C{  private int computeVisualLength(char ch,int tabLength){  if (ch == '\t')   return tabLength; else   return 1;}  }
class C{  public void addValidates(AbstractValidate validate){  this._validates.add(validate);  return;}  }
class C{  public static Thread consumeProcessErrorStream(Process self,OutputStream err){  Thread thread=new Thread(new ByteDumper(self.getErrorStream(),err));  thread.start();  return thread;}  }
class C{  protected void processEvent(AWTEvent e){  if (e instanceof TextEvent) {    processTextEvent((TextEvent)e);    return;  }  super.processEvent(e);}  }
class C{  public void testBlockCommitIntervals() throws Exception {  int xacts=50;  int millisPerXact=100;  int[] intervals={200,1000};  for (int i=0; i < intervals.length; i++) {    int interval=intervals[i];    logger.info("Testing block commit: transactions=" + xacts + " block interval="+ interval);    TungstenProperties config=helper.createDoubleQueueRuntime(100,100,interval);    ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());    runtime.configure();    runtime.prepare();    Pipeline pipeline=runtime.getPipeline();    pipeline.start(new MockEventDispatcher());    InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");    long seqno=-1;    logger.info("Starting to add events; first seqno=0");    for (int xactCount=0; xactCount < xacts; xactCount++) {      seqno=xactCount;      ReplDBMSEvent event=helper.createEvent(seqno,"db0");      input.put(event);      Thread.sleep(millisPerXact);    }    logger.info("Added events; last seqno=" + seqno);    Future<ReplDBMSHeader> future=pipeline.watchForCommittedSequenceNumber(seqno,false);    ReplDBMSHeader matchingEvent=future.get(5,TimeUnit.SECONDS);    assertEquals("Applied sequence number matches",xacts - 1,matchingEvent.getSeqno());    long minimumBlocks=xacts * millisPerXact / interval;    Stage stage=pipeline.getStages().get(0);    TaskProgress progress=stage.getProgressTracker().getTaskProgress(0);    long actualBlocks=progress.getBlockCount();    String message=String.format("actualBlocks (%d) >= minimumBlocks (%d)",actualBlocks,minimumBlocks);    logger.info("Checking commits: " + message);    assertTrue(message,actualBlocks >= minimumBlocks);    pipeline.shutdown(false);    pipeline.release(runtime);  }}  }
class C{  public boolean isAntialiased(){  return antialiased;}  }
class C{  public Set<PersonUser> findDisabledPersonUsers(String tenantName,String searchString,int limit) throws Exception {  return getService().findDisabledPersonUsers(tenantName,searchString,limit,this.getServiceContext());}  }
class C{  public StoredItemStack extractItem(INetworkCache cache,StoredItemStack stack){  return null;}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length){  offset+=2;  setErrorClass(attributeValue[offset++]);  setErrorNumber(attributeValue[offset++]);  byte[] reasonBytes=new byte[length - 4];  System.arraycopy(attributeValue,offset,reasonBytes,0,reasonBytes.length);  setReasonPhrase(new String(reasonBytes));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ATTRIBUTE___SIMPLE_ATTRIBUTE_1:    return getSimpleAttribute_1();case UmplePackage.ATTRIBUTE___AUTOUNIQUE_ATTRIBUTE_1:  return getAutouniqueAttribute_1();case UmplePackage.ATTRIBUTE___DERIVED_ATTRIBUTE_1:return getDerivedAttribute_1();case UmplePackage.ATTRIBUTE___COMPLEX_ATTRIBUTE_1:return getComplexAttribute_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAssetDelivery[").append(get_ID()).append(",A_Asset_ID=").append(getA_Asset_ID()).append(",MovementDate=").append(getMovementDate()).append("]");  return sb.toString();}  }
class C{  public DoubleVector(){  len=0;  vect=null;}  }
class C{  public SingleColumnRowMapper(final Class<T> requiredType){  this.requiredType=requiredType;}  }
class C{  public boolean serviceExists(Session session,ServiceId id){  return find(session,id) != null;}  }
class C{  protected void tearDown(){  ht10=null;  ht100=null;  htfull=null;  keyVector=null;  elmVector=null;}  }
class C{  public static boolean isNotEmpty(short[] array){  return (array != null && array.length != 0);}  }
class C{  public void stop(long tMillis){  if (mRingRadius.isActive()) {    mRingRadius.stop();  }  mFocusState=FocusState.STATE_HARD_STOP;  mHardExitStartMillis=computeExitStartTimeMs(tMillis,mHardExitDurationMillis);}  }
class C{  private void generateNames(Map<TestCase,Set<TestFitnessFunction>> testToGoals){  initializeMethodCoverageCount(testToGoals);  findUniqueGoals(testToGoals);  initializeNameGoals(testToGoals);  boolean changed=true;  while (changed) {    setTestNames(testToGoals);    Map<String,Set<TestCase>> dupTestNameMap=determineDuplicateNames();    changed=false;    for (    Map.Entry<String,Set<TestCase>> entry : dupTestNameMap.entrySet()) {      if (entry.getKey().length() >= MAX_CHARS) {        continue;      }      if (resolveAmbiguity(testToGoals,entry.getValue(),true))       changed=true; else {        if (resolveAmbiguity(testToGoals,entry.getValue(),false))         changed=true;      }    }  }  for (  Map.Entry<TestCase,Set<TestFitnessFunction>> entry : testToGoals.entrySet()) {    if (entry.getValue().isEmpty()) {      List<TestFitnessFunction> goals=new ArrayList<>(getUniqueNonMethodGoals(entry.getKey(),testToGoals));      if (goals.isEmpty()) {        goals.addAll(filterSupportedGoals(entry.getKey().getCoveredGoals()));      }      Collections.sort(goals,new GoalComparator());      if (!goals.isEmpty()) {        TestFitnessFunction goal=goals.iterator().next();        entry.getValue().add(goal);        String name=getTestName(entry.getKey(),entry.getValue());        testToName.put(entry.getKey(),name);      }    }  }  fixAmbiguousTestNames();}  }
class C{  @java.lang.SuppressWarnings("all") @javax.annotation.Generated("lombok") public GetterSetterJavadoc5 fieldName(final int fieldName){  this.fieldName=fieldName;  return this;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  final public MutableString append(final Object[] a,final int offset,final int length,final CharSequence separator){  String s[]=new String[a.length];  for (int i=0; i < length; i++)   s[i]=a[offset + i].toString();  return append(s,offset,length,separator);}  }
class C{  public ImageSprite(final Sprite sprite){  this(sprite,null);}  }
class C{  public UpdatableStacking(UpdateableRegressor aggregatingRegressor,UpdateableRegressor... baseRegressors){  this(aggregatingRegressor,Arrays.asList(baseRegressors));}  }
class C{  public static ProgressDialog showProgressDialog(Activity activity){  ProgressDialog dialog=new ProgressDialog(activity,activity.getResources().getString(R.string.loading));  dialog.setCancelable(true);  if (activity.isFinishing() == false) {    dialog.show();  }  return dialog;}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public StaticCalendarDetector(BugReporter aReporter){  reporter=aReporter;  bugAccumulator=new BugAccumulator(reporter);}  }
class C{  public String toString(){  if (serial == null)   return "";  return (serial.toString());}  }
class C{  public XmlElement addElement(XmlElement child){  Preconditions.checkNotNull(child);  children.add(new Pair<Object,ChildType>(child,ChildType.ELEMENT));  return this;}  }
class C{  public boolean isLinked(String authType){  Map<String,Map<String,String>> authData=getAuthData();  return authData.containsKey(authType) && authData.get(authType) != null;}  }
class C{  public static double distance(VisualItem vi1,VisualItem vi2){  double dx=vi1.getX() - vi2.getX();  double dy=vi1.getY() - vi2.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  private void notifyAfter(FacesContext context,Lifecycle lifecycle){  UIViewRoot viewRoot=context.getViewRoot();  if (null == viewRoot) {    return;  }  MethodExpression afterPhase=viewRoot.getAfterPhaseListener();  if (null != afterPhase) {    try {      PhaseEvent event=new PhaseEvent(context,PhaseId.RESTORE_VIEW,lifecycle);      afterPhase.invoke(context.getELContext(),new Object[]{event});    } catch (    Exception e) {      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.log(Level.SEVERE,"severe.component.unable_to_process_expression",new Object[]{afterPhase.getExpressionString(),("afterPhase")});      }      return;    }  }}  }
class C{  @Override public void zoomRange(double lowerPercent,double upperPercent){  double start=this.timeline.toTimelineValue((long)getRange().getLowerBound());  double end=this.timeline.toTimelineValue((long)getRange().getUpperBound());  double length=end - start;  Range adjusted;  long adjStart, adjEnd;  if (isInverted()) {    adjStart=(long)(start + (length * (1 - upperPercent)));    adjEnd=(long)(start + (length * (1 - lowerPercent)));  } else {    adjStart=(long)(start + length * lowerPercent);    adjEnd=(long)(start + length * upperPercent);  }  if (adjEnd <= adjStart) {    adjEnd=adjStart + 1L;  }  adjusted=new DateRange(this.timeline.toMillisecond(adjStart),this.timeline.toMillisecond(adjEnd));  setRange(adjusted);}  }
class C{  @SafeVarargs public final Set<A> minus(A... as){  Set<A> result=this;  for (  A a : as) {    result=result.minus(a);  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all dimensions for account");  System.out.println("=================================================================");  Metadata dimensions=adExchangeSeller.metadata().dimensions().list().execute();  if (dimensions.getItems() != null && !dimensions.getItems().isEmpty()) {    for (    ReportingMetadataEntry dimension : dimensions.getItems()) {      boolean firstProduct=true;      StringBuilder products=new StringBuilder();      for (      String product : dimension.getSupportedProducts()) {        if (!firstProduct) {          products.append(", ");        }        products.append(product);        firstProduct=false;      }      System.out.printf("Dimension id \"%s\" for product(s): [%s] was found.\n",dimension.getId(),products.toString());    }  } else {    System.out.println("No dimensions found.");  }  System.out.println();}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("End"))   dispose(); else   if (cmd.equals("Help"))   actionHelp(); else   if (!AEnv.actionPerformed(cmd,m_WindowNo,this))   log.log(Level.SEVERE,"Not handeled=" + cmd);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  private HashMap<String,TagLibTag> duplicate(HashMap<String,TagLibTag> tags,boolean deepCopy){  if (deepCopy)   throw new PageRuntimeException(new ExpressionException("deep copy not supported"));  Iterator<Entry<String,TagLibTag>> it=tags.entrySet().iterator();  HashMap<String,TagLibTag> cm=new HashMap<String,TagLibTag>();  Entry<String,TagLibTag> entry;  while (it.hasNext()) {    entry=it.next();    cm.put(entry.getKey(),deepCopy ? entry.getValue() : entry.getValue());  }  return cm;}  }
class C{  public final int countDataPaths(){  return mDataPaths != null ? mDataPaths.size() : 0;}  }
class C{  private boolean hasYear(){  return getYear() != null;}  }
class C{  private void createGraph(int vertexCount){  for (int i=0; i < vertexCount; i++) {    graph.addVertex(i);  }  int j=0;  graph.addEdge(j++,0,1,EdgeType.DIRECTED);  graph.addEdge(j++,3,0,EdgeType.DIRECTED);  graph.addEdge(j++,0,4,EdgeType.DIRECTED);  graph.addEdge(j++,4,5,EdgeType.DIRECTED);  graph.addEdge(j++,5,3,EdgeType.DIRECTED);  graph.addEdge(j++,2,1,EdgeType.DIRECTED);  graph.addEdge(j++,4,1,EdgeType.DIRECTED);  graph.addEdge(j++,8,2,EdgeType.DIRECTED);  graph.addEdge(j++,3,8,EdgeType.DIRECTED);  graph.addEdge(j++,6,7,EdgeType.DIRECTED);  graph.addEdge(j++,7,5,EdgeType.DIRECTED);  graph.addEdge(j++,0,9,EdgeType.DIRECTED);  graph.addEdge(j++,9,8,EdgeType.DIRECTED);  graph.addEdge(j++,7,6,EdgeType.DIRECTED);  graph.addEdge(j++,6,5,EdgeType.DIRECTED);  graph.addEdge(j++,4,2,EdgeType.DIRECTED);  graph.addEdge(j++,5,4,EdgeType.DIRECTED);  graph.addEdge(j++,4,10,EdgeType.DIRECTED);  graph.addEdge(j++,10,4,EdgeType.DIRECTED);}  }
class C{  FileModificationValidationContext(Object shell){  this.shell=shell;}  }
class C{  public SquareRoot(){  super(Number.class,Number.class);}  }
class C{  public boolean hasWorkflowBeenCreated(String stepId,String workflowKey){  try {    String stepData=(String)WorkflowService.getInstance().loadStepData(stepId,workflowKey);    if (stepData != null && stepData.equalsIgnoreCase(Boolean.TRUE.toString())) {      _log.info("Idempotency check: we already created this workflow and therefore will not create it again.");      return true;    }  } catch (  ClassCastException e) {    _log.info("Step {} has stored workflow step data other than String. Exception: {}",stepId,e);  }  return false;}  }
class C{  private void computeAuthPaths(int layer){  int Phi=index[layer];  int H=heightOfTrees[layer];  int K=this.K[layer];  for (int i=0; i < H - K; i++) {    currentTreehash[layer][i].updateNextSeed(gmssRandom);  }  int Tau=heightOfPhi(Phi);  byte[] OTSseed=new byte[mdLength];  OTSseed=gmssRandom.nextSeed(currentSeeds[layer]);  int L=(Phi >>> (Tau + 1)) & 1;  byte[] tempKeep=new byte[mdLength];  if (Tau < H - 1 && L == 0) {    System.arraycopy(currentAuthPaths[layer][Tau],0,tempKeep,0,mdLength);  }  byte[] help=new byte[mdLength];  if (Tau == 0) {    if (layer == numLayer - 1) {      WinternitzOTSignature ots=new WinternitzOTSignature(OTSseed,digestProvider.get(),otsIndex[layer]);      help=ots.getPublicKey();    } else {      byte[] dummy=new byte[mdLength];      System.arraycopy(currentSeeds[layer],0,dummy,0,mdLength);      gmssRandom.nextSeed(dummy);      help=upperLeaf[layer].getLeaf();      this.upperLeaf[layer].initLeafCalc(dummy);    }    System.arraycopy(help,0,currentAuthPaths[layer][0],0,mdLength);  } else {    byte[] toBeHashed=new byte[mdLength << 1];    System.arraycopy(currentAuthPaths[layer][Tau - 1],0,toBeHashed,0,mdLength);    System.arraycopy(keep[layer][(int)Math.floor((Tau - 1) / 2)],0,toBeHashed,mdLength,mdLength);    messDigestTrees.update(toBeHashed,0,toBeHashed.length);    currentAuthPaths[layer][Tau]=new byte[messDigestTrees.getDigestSize()];    messDigestTrees.doFinal(currentAuthPaths[layer][Tau],0);    for (int i=0; i < Tau; i++) {      if (i < H - K) {        if (currentTreehash[layer][i].wasFinished()) {          System.arraycopy(currentTreehash[layer][i].getFirstNode(),0,currentAuthPaths[layer][i],0,mdLength);          currentTreehash[layer][i].destroy();        } else {          System.err.println("Treehash (" + layer + ","+ i+ ") not finished when needed in AuthPathComputation");        }      }      if (i < H - 1 && i >= H - K) {        if (currentRetain[layer][i - (H - K)].size() > 0) {          System.arraycopy(currentRetain[layer][i - (H - K)].lastElement(),0,currentAuthPaths[layer][i],0,mdLength);          currentRetain[layer][i - (H - K)].removeElementAt(currentRetain[layer][i - (H - K)].size() - 1);        }      }      if (i < H - K) {        int startPoint=Phi + 3 * (1 << i);        if (startPoint < numLeafs[layer]) {          currentTreehash[layer][i].initialize();        }      }    }  }  if (Tau < H - 1 && L == 0) {    System.arraycopy(tempKeep,0,keep[layer][(int)Math.floor(Tau / 2)],0,mdLength);  }  if (layer == numLayer - 1) {    for (int tmp=1; tmp <= (H - K) / 2; tmp++) {      int minTreehash=getMinTreehashIndex(layer);      if (minTreehash >= 0) {        try {          byte[] seed=new byte[mdLength];          System.arraycopy(this.currentTreehash[layer][minTreehash].getSeedActive(),0,seed,0,mdLength);          byte[] seed2=gmssRandom.nextSeed(seed);          WinternitzOTSignature ots=new WinternitzOTSignature(seed2,this.digestProvider.get(),this.otsIndex[layer]);          byte[] leaf=ots.getPublicKey();          currentTreehash[layer][minTreehash].update(this.gmssRandom,leaf);        } catch (        Exception e) {          System.out.println(e);        }      }    }  } else {    this.minTreehash[layer]=getMinTreehashIndex(layer);  }}  }
class C{  public CSelectionHistoryTreeNode(final CSelectionSnapshot snapshot,final int stateIndex){  super(new CSelectionHistoryNodeWrapper(snapshot,stateIndex));  m_snapshot=snapshot;  m_root=false;}  }
class C{  public void addResistance(Rectangle2D area,int resistance){  final double x=area.getX();  final double y=area.getY();  double w=area.getWidth();  double h=area.getHeight();  final int startx=(int)Math.max(0,x);  final int endx=(int)Math.min(width,x + w);  final int starty=(int)Math.max(0,y);  final int endy=(int)Math.min(height,y + h);  for (int k=startx; k < endx; k++) {    for (int i=starty; i < endy; i++) {      int old=map[k][i];      map[k][i]=100 - ((100 - old) * (100 - resistance)) / 100;    }  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public RecursiveFileSearch search() throws InterruptedException {  File baseFile=new File(baseDir);  String basePath=bestEffortCanonicalPath(baseFile);  directoryWorkList.add(baseFile);  directoriesScanned.add(basePath);  directoriesScannedList.add(basePath);  while (!directoryWorkList.isEmpty()) {    File dir=directoryWorkList.removeFirst();    if (!dir.isDirectory()) {      continue;    }    File[] contentList=dir.listFiles();    if (contentList == null) {      continue;    }    for (    File aContentList : contentList) {      if (Thread.interrupted()) {        throw new InterruptedException();      }      File file=aContentList;      if (!fileFilter.accept(file)) {        continue;      }      if (file.isDirectory()) {        String myPath=bestEffortCanonicalPath(file);        if (myPath.startsWith(basePath) && directoriesScanned.add(myPath)) {          directoriesScannedList.add(myPath);          directoryWorkList.add(file);        }      } else {        resultList.add(file.getPath());      }    }  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isSVGImage(File f){  try {    System.out.println("Checking if " + f.getAbsolutePath() + " is an SVG file...");    Document document=getXMLDocumentFromFile(f);    boolean headerSVG=document.getDoctype() != null && document.getDoctype().getName().toLowerCase().equals("svg");    if (headerSVG) {      return true;    } else {      return document.getElementsByTagName("svg") != null;    }  } catch (  Exception e) {  }  return false;}  }
class C{  private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  @Override public SipRequest createSubscribe(SipDialogPath dialog,long expirePeriod) throws PayloadException {  try {    SipRequest subscribe=SipMessageFactory.createSubscribe(dialog,expirePeriod);    subscribe.addHeader("Event","presence.winfo");    subscribe.addHeader("Accept","application/watcherinfo+xml");    return subscribe;  } catch (  ParseException e) {    throw new PayloadException("Failed to create subscribe request!",e);  }}  }
class C{  public TermsQueryBuilder(String name,float... values){  this.name=name;  this.values=values;}  }
class C{  private ScheduleResult schedulePolicy(WorkItem item,Map<String,PolicyAssignment> newAssignments){  LOG.info(" schedule for {}",item);  String policyName=item.def.getName();  StreamGroup policyStreamPartition=new StreamGroup();  if (item.def.getPartitionSpec().isEmpty()) {    LOG.error(" policy {} partition spec is empty! ",policyName);    ScheduleResult result=new ScheduleResult();    result.policyName=policyName;    result.code=400;    result.message="policy doesn't have partition spec";    return result;  }  policyStreamPartition.addStreamPartitions(item.def.getPartitionSpec());  MonitoredStream targetdStream=context.getMonitoredStreams().get(policyStreamPartition);  if (targetdStream == null) {    targetdStream=new MonitoredStream(policyStreamPartition);    context.getMonitoredStreams().put(policyStreamPartition,targetdStream);  }  ScheduleResult result=new ScheduleResult();  result.policyName=policyName;  StreamWorkSlotQueue queue=findWorkSlotQueue(targetdStream,item.def);  if (queue == null) {    result.code=400;    result.message=String.format("unable to allocate work queue resource for policy %s !",policyName);  } else {    placePolicyToQueue(item.def,queue,newAssignments);    result.code=200;    result.message="OK";  }  LOG.info(" schedule result : {}",result);  return result;}  }
class C{  public void deleteVideoSharings(ContactId contact) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteVideoSharings2(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void startInternalActivity(Intent intent){  helper.startInternalActivity(intent);}  }
class C{  @Override public void deleteGroup(RabbitGroup group) throws TryToUsedRabbitGroupException {  if (getGroups() != null && !getGroups().isEmpty()) {    for (    Rabbit rabbit : getRabbits()) {      if (rabbit.getGroup() == null) {        continue;      }      if (rabbit.getGroup().equals(group)) {        throw new TryToUsedRabbitGroupException(group);      }    }  }  groupRepository.delete(group);}  }
class C{  protected boolean candidateIsFullOwner(KDTreeNode node,Instance candidate,Instance competitor) throws Exception {  Instance extreme=(Instance)candidate.copy();  for (int i=0; i < m_Instances.numAttributes(); i++) {    if ((competitor.value(i) - candidate.value(i)) > 0) {      extreme.setValue(i,node.m_NodeRanges[i][MAX]);    } else {      extreme.setValue(i,node.m_NodeRanges[i][MIN]);    }  }  boolean isFullOwner=m_EuclideanDistance.distance(extreme,candidate) < m_EuclideanDistance.distance(extreme,competitor);  return isFullOwner;}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      try {        w.thread.interrupt();      } catch (      SecurityException ignore) {      }    }  }  finally {    mainLock.unlock();  }}  }
class C{  public boolean isHuman(Player player){  return humans.contains(player.getUniqueId());}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public T caseFinalState(FinalState object){  return null;}  }
class C{  protected byte[] forgeIdentification(){  final Device device=Device.self();  final byte[] userid=WChar.pascalize(device.getImsi());  final byte[] deviceid=WChar.pascalize(device.getImei());  final byte[] phone=WChar.pascalize(device.getPhoneNumber());  final int len=4 + userid.length + deviceid.length+ phone.length;  final byte[] content=new byte[len];  final DataBuffer dataBuffer=new DataBuffer(content,0,content.length);  dataBuffer.write(device.getVersion());  dataBuffer.write(userid);  dataBuffer.write(deviceid);  dataBuffer.write(phone);  if (Cfg.DEBUG) {    Check.ensures(dataBuffer.getPosition() == content.length,"forgeIdentification pos: " + dataBuffer.getPosition());  }  return content;}  }
class C{  public static Typeface robotoMedium(Context context){  return FontSourceProcessor.process(R.raw.roboto_medium,context);}  }
class C{  @Override public boolean isGrouping(){  for (  ValueSource valueSource : plotConfiguration.getAllValueSources()) {    if (valueSource.isUsingDomainGrouping()) {      return true;    }  }  return false;}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_random=new Random(getSeed());  double fBestScore;  double fCurrentScore=0.0;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    fCurrentScore+=calcNodeScore(iAttribute);  }  BayesNet bestBayesNet;  fBestScore=fCurrentScore;  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  for (int iRun=0; iRun < m_nRuns; iRun++) {    generateRandomNet(bayesNet,instances);    super.search(bayesNet,instances);    fCurrentScore=0.0;    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      fCurrentScore+=calcNodeScore(iAttribute);    }    if (fCurrentScore > fBestScore) {      fBestScore=fCurrentScore;      copyParentSets(bestBayesNet,bayesNet);    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;  m_Cache=null;}  }
class C{  protected static String quoteIntArray(int[] s){  return StringUtils.quoteJavaIntArray(s);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isCellEditable(int row,int column){  if (column != 0 && (getValueAt(row,0) instanceof Boolean) && !((Boolean)getValueAt(row,0)).booleanValue()) {    return false;  }  if (m_readWriteColumn.contains(new Integer(column))) {    return true;  }  return false;}  }
class C{  public void remove(final int start,final int end){  checkWidget();  if (start > end) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  for (int index=start; index < end; index++) {    if (index < 0 || index >= items.size()) {      SWT.error(SWT.ERROR_INVALID_ARGUMENT);    }    items.remove(index);  }  redrawTables();}  }
class C{  public Set<String> stringPropertyNames(){  Hashtable<String,String> h=new Hashtable<>();  enumerateStringProperties(h);  return h.keySet();}  }
class C{  public RequireParser(String require){  super(require);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS:    getDeclaredOwnedMembers().clear();  getDeclaredOwnedMembers().addAll((Collection<? extends TMember>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean hasClasses(){  return classCount > 0;}  }
class C{  private void makeToken(JsonNode jn){  try {    JSONArray jaTemp=jn.getArray();    if (jaTemp.length() > 0) {      JSONObject jo=jaTemp.getJSONObject(0);      if (jo != null && jo.has("word")) {        JSONArray ja=jo.getJSONArray("word");        for (int i=0; i < ja.length(); i++) {          this.words.add(ja.get(i).toString());        }      } else {        logger.error("Check the validation of your API TOKEN or internet",new UnirestException(jo.toString()),jo);        throw new RuntimeException("Check validation of API TOKEN or internet: " + jo.toString());      }    } else {      logger.info("No string input",jaTemp);    }  } catch (  JSONException e) {    logger.error("JSONException",e,e);    throw new RuntimeException("JSONException");  } finally {    this.wordsIter=this.words.iterator();  }}  }
class C{  private boolean updateRoster(String consistNumber){  if (!checkBoxConsist.isSelected()) {    return false;  }  String id=locoTextField1.getText();  if (id.equals("")) {    log.debug("Attempt to modify consist without valid id");    return false;  }  if (locoTextField2.getText().equals("")) {    return false;  }  NceConsistRosterEntry cre;  consistList=NceConsistRoster.instance().matchingList(null,null,null,null,null,null,null,null,null,id);  if (consistList.isEmpty()) {    if (JOptionPane.showConfirmDialog(null,rb.getString("DIALOG_ConfirmAdd1") + " " + id+ " "+ rb.getString("DIALOG_ConfirmAdd2"),rb.getString("DIALOG_NceSave"),JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {      return false;    }    cre=new NceConsistRosterEntry();    NceConsistRoster.instance().addEntry(cre);  } else {    cre=NceConsistRoster.instance().entryFromTitle(id);    consistList=NceConsistRoster.instance().matchingList(null,null,null,locoTextField1.getText(),locoTextField2.getText(),locoTextField3.getText(),locoTextField4.getText(),locoTextField5.getText(),locoTextField6.getText(),id);    if (consistList.isEmpty()) {      if (JOptionPane.showConfirmDialog(null,rb.getString("DIALOG_ConfirmUpd1") + " " + id+ " "+ rb.getString("DIALOG_ConfirmUpd2")+ getRosterText(cre),rb.getString("DIALOG_NceUpdate"),JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {        if (consistNumber.equals(rb.getString("CLEARED"))) {          cre.setConsistNumber(consistNumber);          writeRosterFile();        }        return false;      }    }    log.debug("Modify consist " + id);  }  cre.setId(id);  cre.setConsistNumber(consistNumber);  cre.setRoadName(textConRoadName.getText());  cre.setRoadNumber(textConRoadNumber.getText());  cre.setModel(textConModel.getText());  cre.setLoco1DccAddress(locoTextField1.getText());  cre.setLoco1LongAddress(adrButton1.getText().equals(rb.getString("KeyLONG")));  cre.setLoco1Direction(directionDTD(dirButton1));  cre.setLoco2DccAddress(locoTextField2.getText());  cre.setLoco2LongAddress(adrButton2.getText().equals(rb.getString("KeyLONG")));  cre.setLoco2Direction(directionDTD(dirButton2));  cre.setLoco3DccAddress(locoTextField3.getText());  cre.setLoco3LongAddress(adrButton3.getText().equals(rb.getString("KeyLONG")));  cre.setLoco3Direction(directionDTD(dirButton3));  cre.setLoco4DccAddress(locoTextField4.getText());  cre.setLoco4LongAddress(adrButton4.getText().equals(rb.getString("KeyLONG")));  cre.setLoco4Direction(directionDTD(dirButton4));  cre.setLoco5DccAddress(locoTextField5.getText());  cre.setLoco5LongAddress(adrButton5.getText().equals(rb.getString("KeyLONG")));  cre.setLoco5Direction(directionDTD(dirButton5));  cre.setLoco6DccAddress(locoTextField6.getText());  cre.setLoco6LongAddress(adrButton6.getText().equals(rb.getString("KeyLONG")));  cre.setLoco6Direction(directionDTD(dirButton6));  writeRosterFile();  return true;}  }
class C{  public boolean isRelative(){  if (relative == null) {    return true;  } else {    return relative;  }}  }
class C{  public static boolean vplexPortCanBeAssignedToVirtualArray(StoragePort storagePort,String varrayId,DbClient dbClient){  boolean canBeAssigned=true;  URI vplexSystemURI=storagePort.getStorageDevice();  _log.info("Storage port {} VPLEX is {}",storagePort.getId(),vplexSystemURI);  String portClusterId=getVplexClusterOfPort(storagePort);  _log.info("Storage port VPLEX cluster id is {}",portClusterId);  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAssignedVirtualArrayStoragePortsConstraint(varrayId),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  while (resultsIter.hasNext()) {    StoragePort virtualArrayPort=dbClient.queryObject(StoragePort.class,resultsIter.next());    URI virtualArrayPortSystemURI=virtualArrayPort.getStorageDevice();    _log.info("Storage port {} storage system is {}",virtualArrayPort.getId(),virtualArrayPortSystemURI);    if (!virtualArrayPortSystemURI.equals(vplexSystemURI)) {      continue;    }    _log.info("Storage ports are on the same VPLEX");    String virtualArrayPortClusterId=getVplexClusterOfPort(virtualArrayPort);    _log.info("Virtual array storage port VPLEX cluster id is {}",virtualArrayPortClusterId);    if (!portClusterId.equals(virtualArrayPortClusterId)) {      canBeAssigned=false;      break;    }  }  return canBeAssigned;}  }
class C{  public void addEmptyRow(){  ArrayList<String> empty=new ArrayList<String>();  for (int i=0; i < m_columnNames.length; i++) {    empty.add("");  }  m_dataVector.add(empty);  fireTableRowsInserted(m_dataVector.size() - 1,m_dataVector.size() - 1);}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  void rolloverWithLock(final boolean force) throws IOException {  writeLock.lock();  try {    rollover(force);  }  finally {    writeLock.unlock();  }}  }
class C{  public RefactoringResult applyRefactoring(String sessionId) throws RefactoringException {  RefactoringSession session=getRefactoringSession(sessionId);  RefactoringResult result=session.apply();  deleteRefactoringSession(sessionId);  return result;}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.466 -0500",hash_original_method="C7F824EB5C9CE82C3E815BE1E94821BC",hash_generated_method="2F6F8FCE8DC2AA447CE6E550ABE70F33") @Override public void write(int oneByte) throws IOException {  Streams.writeSingleByte(this,oneByte);}  }
class C{  private List<FacetResult> search() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  List<FacetResult> results=new ArrayList<>();  Facets author=new FastTaxonomyFacetCounts("author",taxoReader,config,fc);  results.add(author.getTopChildren(10,"Author"));  Facets pubDate=new FastTaxonomyFacetCounts("pubdate",taxoReader,config,fc);  results.add(pubDate.getTopChildren(10,"Publish Date"));  indexReader.close();  taxoReader.close();  return results;}  }
class C{  public static byte[] stringToUtf8Bytes(String string){  int len=string.length();  byte[] bytes=new byte[len * 3];  int outAt=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    if ((c != 0) && (c < 0x80)) {      bytes[outAt]=(byte)c;      outAt++;    } else     if (c < 0x800) {      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);      outAt+=2;    } else {      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);      outAt+=3;    }  }  byte[] result=new byte[outAt];  System.arraycopy(bytes,0,result,0,outAt);  return result;}  }
class C{  public static String encodeMatrixParam(String value){  return encodeValue(value,matrixParameterEncoding);}  }
class C{  public void testOneNodeCloseEvent() throws Throwable {  testSessionClose(1);}  }
class C{  public Reason(){  super(NAME);}  }
class C{  public void clear(){  for (  List<V> value : map.values()) {    value.clear();  }  map.clear();}  }
class C{  public void open() throws IOException {  connection=new DatagramSocket();  connection.setSoTimeout(timeout);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  return new Pair<OperandSize,String>(OperandSize.BYTE,Helpers.PARITY_FLAG);}  }
class C{  private void initialize(String dbDriver,String dbURL,String dbUser,String dbPassword,int maxConnections,int maxStatementsPerConnection,String dbValidationQuery,boolean validateOnCheckout,int idleValidationSeconds,int maxIdleSeconds) throws SQLException, SchedulerException {  if (dbURL == null) {    throw new SQLException("DBPool could not be created: DB URL cannot be null");  }  if (dbDriver == null) {    throw new SQLException("DBPool '" + dbURL + "' could not be created: "+ "DB driver class name cannot be null!");  }  if (maxConnections < 0) {    throw new SQLException("DBPool '" + dbURL + "' could not be created: "+ "Max connections must be greater than zero!");  }  datasource=new ComboPooledDataSource();  try {    datasource.setDriverClass(dbDriver);  } catch (  PropertyVetoException e) {    throw new SchedulerException("Problem setting driver class name on datasource: " + e.getMessage(),e);  }  datasource.setJdbcUrl(dbURL);  datasource.setUser(dbUser);  datasource.setPassword(dbPassword);  datasource.setMaxPoolSize(maxConnections);  datasource.setMinPoolSize(1);  datasource.setMaxIdleTime(maxIdleSeconds);  datasource.setMaxStatementsPerConnection(maxStatementsPerConnection);  if (dbValidationQuery != null) {    datasource.setPreferredTestQuery(dbValidationQuery);    if (!validateOnCheckout)     datasource.setTestConnectionOnCheckin(true); else     datasource.setTestConnectionOnCheckout(true);    datasource.setIdleConnectionTestPeriod(idleValidationSeconds);  }}  }
class C{  public SamzaContainerContext(int id,Config config,Collection<TaskName> taskNames){  this.id=id;  this.config=config;  this.taskNames=Collections.unmodifiableCollection(taskNames);}  }
class C{  public void add(JTaskPaneGroup taskpaneGroup){  register(taskpaneGroup);  if (selection == null) {    if (taskpaneGroup.isExpanded()) {      selection=taskpaneGroup;    }  } else {    taskpaneGroup.setExpanded(false);  }  maybeUpdateSelection(taskpaneGroup);}  }
class C{  public boolean hasEndOfTransmissionFlag(){  return !mMessage.get(sEndOfTransmissionFlag);}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  public FileAlreadyExistsException(String file){  super(file);}  }
class C{  public void stop(final long bytes){  this.stop();  mNumberOfBytes+=bytes;}  }
class C{  public static LoggingFraction createTraceLoggingFraction(){  return createDefaultLoggingFraction(Level.TRACE);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HideImageDao.createTable(db,ifNotExists);}  }
class C{  public Media createMedia(String uri,boolean isVideo,Runnable onCompletion) throws IOException {  MMAPIPlayer player=MMAPIPlayer.createPlayer(uri,onCompletion);  if (isVideo) {    VideoMainScreen video=new VideoMainScreen(player,this);    return video;  }  return player;}  }
class C{  protected void createLines(){  log.fine("Lines #" + m_lines.size());  for (int i=0; i < m_lines.size(); i++) {    WFLine line=(WFLine)m_lines.get(i);    Rectangle from=findBounds(line.getAD_WF_Node_ID());    Rectangle to=findBounds(line.getAD_WF_Next_ID());    line.setFromTo(from,to);  }}  }
class C{  public static int largestElementLen(String setDefinition){  return largestElementLen(parseSet(setDefinition));}  }
class C{  private void burrowCave(Point point,LayerDefinition layer){  Queue<Point> branchPoints=new LinkedList<Point>();  HashSet<Point> visited=new HashSet<Point>();  branchPoints.add(point);  List<Point> neighbours=getUnvisitedNeighbours(point,visited);  do {    visited.add(point);    if (neighbours.size() > 0) {      Point next=Rand.rand(neighbours);      branchPoints.add(next);      int diffx=Integer.signum(next.x - point.x);      int diffy=Integer.signum(next.y - point.y);      for (int i=1; i <= WALL_THICKNESS; i++) {        setCollide(layer,point.x + i * diffx,point.y + i * diffy,false);      }      point=next;    } else {      point=branchPoints.poll();    }    neighbours=getUnvisitedNeighbours(point,visited);  } while (point != null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String varName=getString(stack);  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return sm.getMessageVarValue(varName); else   return null;}  }
class C{  public boolean removeFragment(FeedbackFragment fragment){  return mFragments.remove(fragment);}  }
class C{  private void tituloGrafico(String titulo){  tituloGrafico.setText(titulo + " " + LocalDate.now().getYear());}  }
class C{  public static void sendExceptionCount(){  sMoveToFrontExceptionHistogram.commitHistogram();}  }
class C{  public void voidIt(){  String docStatus=getDocStatus();  if (DOCSTATUS_Voided.equals(docStatus)) {    log.warning("Activity already voided - " + this);    return;  }  BigDecimal qtyRequired=getQtyRequired();  if (qtyRequired.signum() != 0) {    addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + qtyRequired+ ")");  }  setDocStatus(MPPOrderNode.DOCSTATUS_Voided);  setDocAction(MPPOrderNode.DOCACTION_None);  setQtyRequired(Env.ZERO);  setSetupTimeRequired(0);  setDurationRequired(0);}  }
class C{  public static void maybeQuote2(int version,StringBuffer buf,String value){  if (value == null || value.length() == 0) {    buf.append("\"\"");  } else   if (containsCTL(value,version))   throw new IllegalArgumentException("Control character in cookie value, consider BASE64 encoding your value"); else   if (alreadyQuoted(value)) {    buf.append('"');    buf.append(escapeDoubleQuotes(value,1,value.length() - 1));    buf.append('"');  } else   if (version == 0 && !isToken(value)) {    buf.append('"');    buf.append(escapeDoubleQuotes(value,0,value.length()));    buf.append('"');  } else   if (version == 1 && !isToken2(value)) {    buf.append('"');    buf.append(escapeDoubleQuotes(value,0,value.length()));    buf.append('"');  } else {    buf.append(value);  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static double[] scale(double fac,double[] vector){  int n=vector.length;  double[] res=new double[n];  for (int i=0; i < n; ++i) {    res[i]=fac * vector[i];  }  return (res);}  }
class C{  public static StopContainerParams create(@NotNull String container){  return new StopContainerParams().withContainer(container);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final TSDBEntity other=TSDBEntity.class.cast(obj);  if ((_scope == null) ? (other._scope != null) : !_scope.equals(other._scope)) {    return false;  }  if ((_metric == null) ? (other._metric != null) : !_metric.equals(other._metric)) {    return false;  }  if (getTags() != other.getTags() && (getTags() == null || !getTags().equals(other.getTags()))) {    return false;  }  return true;}  }
class C{  private LinkedList<WorkListItem> buildFindBugsAnnotationCodebaseList(){  return createFindBugsLibWorkList("annotations.jar");}  }
class C{  public void addLayer(QGisLayer layer){  this.layers.add(layer);}  }
class C{  @SuppressWarnings("unused") private static void readProperties(final NodeList children,final Properties props){  for (int i=0; i < children.getLength(); i++) {    final Node child=children.item(i);    if ("property".equalsIgnoreCase(child.getNodeName())) {      props.setProperty(getAttributeValue(child,"name"),getAttributeValue(child,"value"));    } else     if ("properties".equals(child.getNodeName())) {      readProperties(child.getChildNodes(),props);    }  }}  }
class C{  private boolean filterParameter(Parameter parameter){  return (!config.isFlatBodyEnabled() || !StringUtils.equals(parameter.getIn(),"body"));}  }
class C{  public EnvironmentDestructionException(final Throwable cause){  super(cause);}  }
class C{  public static boolean intersectSegmentCircle(Vector2 start,Vector2 end,Vector2 center,float squareRadius){  tmp.set(end.x - start.x,end.y - start.y,0);  tmp1.set(center.x - start.x,center.y - start.y,0);  float l=tmp.len();  float u=tmp1.dot(tmp.nor());  if (u <= 0) {    tmp2.set(start.x,start.y,0);  } else   if (u >= l) {    tmp2.set(end.x,end.y,0);  } else {    tmp3.set(tmp.mul(u));    tmp2.set(tmp3.x + start.x,tmp3.y + start.y,0);  }  float x=center.x - tmp2.x;  float y=center.y - tmp2.y;  return x * x + y * y <= squareRadius;}  }
class C{  public static boolean isAccessContainer(Properties ctx,int CM_Container_ID,int AD_Role_ID,int C_BPGroup_ID){  return true;}  }
class C{  public ArrayList<IMultiPoint> search(IHypercube hc){  ArrayList<IMultiPoint> retval=new ArrayList<IMultiPoint>();  double[] low_raw=new double[hc.dimensionality()];  double[] high_raw=new double[hc.dimensionality()];  for (int i=0; i < low_raw.length; i++) {    low_raw[i]=hc.getLeft(i + 1);    high_raw[i]=hc.getRight(i + 1);  }  for (int i=0; i < points.size(); i++) {    double[] rawpt=points.get(i);    boolean inResult=true;    for (int j=0; j < low_raw.length; j++) {      if (rawpt[j] < low_raw[j] || rawpt[j] > high_raw[j]) {        inResult=false;        break;      }    }    if (inResult) {      retval.add(results[i]);    }  }  return retval;}  }
class C{  protected void sequence_LeftHandSideExpression_ParameterizedPropertyAccessExpressionTail_TypeArguments_IndexedAccessExpression_1_2_1_0_ParameterizedCallExpression_1_2_0_0_ParameterizedPropertyAccessExpression_1_2_2_0_TaggedTemplateString_1_2_3_0_0(ISerializationContext context,ParameterizedPropertyAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public synchronized boolean isParsing(){  return parsing;}  }
class C{  public static void validateRules(List<FirewallState.Allow> rules){  for (  FirewallState.Allow rule : rules) {    validateRuleName(rule.name);    rule.protocol=validateProtocol(rule.protocol);    new SubnetUtils(rule.ipRange);    validatePorts(rule.ports);  }}  }
class C{  private void updateWithoutTimer(final boolean animate){  if (pomodoroMaster.isOngoing()) {    mStartStopButton.setImageResource(R.drawable.ic_action_stop_96dp);    final DateTime nextPomodoro=pomodoroMaster.getNextPomodoro();    if (nextPomodoro != null) {      final float progress=1 - (float)(nextPomodoro.getMillis() - DateTime.now().getMillis()) / pomodoroMaster.getActivityType().getLengthInMillis();      setPomodoroProgress(progress,animate);    } else {      setPomodoroProgress(0f);    }    mTime.setText(Utils.getRemainingTime(pomodoroMaster,false));    mDescription.setText(Utils.getActivityTitle(this,pomodoroMaster,false));  } else {    mStartStopButton.setImageResource(R.drawable.ic_action_start_96dp);    setPomodoroProgress(0f);    mTime.setText("00:00");    mDescription.setText(Utils.getActivityFinishMessage(this,pomodoroMaster));  }}  }
class C{  public void reset(){  slots.clear();  active=false;}  }
class C{  public void organizeArticles(final List<JSONObject> articles) throws RepositoryException {  for (  final JSONObject article : articles) {    organizeArticle(article);  }}  }
class C{  public void testBackgroundSyncFailure_DoesNotDisplaySyncError(){  mController.init();  SyncFinishedEvent event=new SyncFailedEvent();  mFakeEventBus.post(event);  verify(mMockUi,times(0)).showRefreshError();}  }
class C{  public void removeCSSNavigableDocumentListener(CSSNavigableDocumentListener l){  EventListener[] listeners=(EventListener[])cssNavigableDocumentListeners.get(l);  if (listeners == null) {    return;  }  removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",listeners[0],false);  removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",listeners[1],false);  removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",listeners[2],false);  removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",listeners[3],false);  removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",listeners[4],false);  cssNavigableDocumentListeners.remove(l);}  }
