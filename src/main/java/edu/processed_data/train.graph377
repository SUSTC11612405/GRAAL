class C{  public void combos(){  Combo.popular(cbEmprestimo,ControleDAO.getBanco().getEmprestimoDAO().comboItens());}  }
class C{  static int convertUnitsOrPercentage(String units,int defaultSuffix){  if (units == null) {    return -1;  }  boolean percentage=false;  if (units.charAt(units.length() - 1) == '%') {    percentage=true;    defaultSuffix=LENGTH_SUFFIX_PX;    units=units.substring(0,units.length() - 1);  }  int val=convertUnits(units,defaultSuffix);  if (percentage) {    val+=VAL_PERCENTAGE;  }  return val;}  }
class C{  void collect(ConstantPool tab){switch (opc) {case opc_istore:case opc_lstore:case opc_fstore:case opc_dstore:case opc_astore:    if (value instanceof LocalVariable) {      MemberDefinition field=((LocalVariable)value).field;      tab.put(field.getName().toString());      tab.put(field.getType().getTypeSignature());    }  return;case opc_new:case opc_putfield:case opc_putstatic:case opc_getfield:case opc_getstatic:case opc_invokevirtual:case opc_invokespecial:case opc_invokestatic:case opc_invokeinterface:case opc_instanceof:case opc_checkcast:tab.put(value);return;case opc_anewarray:tab.put(value);return;case opc_multianewarray:tab.put(((ArrayData)value).type);return;case opc_ldc:case opc_ldc_w:if (value instanceof Integer) {int v=((Integer)value).intValue();if ((v >= -1) && (v <= 5)) {opc=opc_iconst_0 + v;return;} else if ((v >= -(1 << 7)) && (v < (1 << 7))) {opc=opc_bipush;return;} else if ((v >= -(1 << 15)) && (v < (1 << 15))) {opc=opc_sipush;return;}} else if (value instanceof Float) {float v=((Float)value).floatValue();if (v == 0) {if (Float.floatToIntBits(v) == 0) {opc=opc_fconst_0;return;}} else if (v == 1) {opc=opc_fconst_1;return;} else if (v == 2) {opc=opc_fconst_2;return;}}tab.put(value);return;case opc_ldc2_w:if (value instanceof Long) {long v=((Long)value).longValue();if (v == 0) {opc=opc_lconst_0;return;} else if (v == 1) {opc=opc_lconst_1;return;}} else if (value instanceof Double) {double v=((Double)value).doubleValue();if (v == 0) {if (Double.doubleToLongBits(v) == 0) {opc=opc_dconst_0;return;}} else if (v == 1) {opc=opc_dconst_1;return;}}tab.put(value);return;case opc_try:for (Enumeration<CatchData> e=((TryData)value).catches.elements(); e.hasMoreElements(); ) {CatchData cd=e.nextElement();if (cd.getType() != null) {tab.put(cd.getType());}}return;case opc_nop:if ((value != null) && (value instanceof ClassDeclaration)) tab.put(value);return;}}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void testDistancePointLinesegment(){  Coord p1=new Coord((double)10,(double)20);  Coord p2=new Coord((double)10,(double)30);  Coord p3=new Coord((double)10,(double)40);  Coord p4=new Coord((double)20,(double)30);  assertEquals(10.0,CoordUtils.distancePointLinesegment(p1,p3,p4),1e-10);  assertEquals("special case where lineFrom == lineTo",10.0,CoordUtils.distancePointLinesegment(p1,p1,p2),1e-10);  assertEquals("special case where point before lineFrom",10.0,CoordUtils.distancePointLinesegment(p2,p3,p1),1e-10);  assertEquals("special case where point after lineTo",10.0,CoordUtils.distancePointLinesegment(p1,p2,p3),1e-10);  assertEquals("special case where point on line segment",0.0,CoordUtils.distancePointLinesegment(p1,p3,p2),1e-10);}  }
class C{  public static Config convertTextureColorFormatToBitmapConfig(PLTextureColorFormat colorFormat){  Config config=Config.ARGB_8888;switch (colorFormat) {case PLTextureColorFormatRGB565:    config=Config.RGB_565;  break;case PLTextureColorFormatRGBA4444:config=Config.ARGB_4444;break;default :break;}return config;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.641 -0500",hash_original_method="A0122B485E57B455599C6CF601D6C0DF",hash_generated_method="4D776348804CFA53F1F532DA6E9B2F88") public boolean equals(Object other){  if (!(other instanceof RouteList))   return false;  RouteList that=(RouteList)other;  if (this.size() != that.size())   return false;  ListIterator<Route> it=this.listIterator();  ListIterator<Route> it1=that.listIterator();  while (it.hasNext()) {    Route route=(Route)it.next();    Route route1=(Route)it1.next();    if (!route.equals(route1))     return false;  }  return true;}  }
class C{  protected R scan(Iterable<? extends AnnotatedTypeMirror> types,P p){  if (types == null) {    return null;  }  R r=null;  boolean first=true;  for (  AnnotatedTypeMirror type : types) {    r=(first ? scan(type,p) : scanAndReduce(type,p,r));    first=false;  }  return r;}  }
class C{  public static ColumnId parse(String str,char delimiter,boolean useCatalogBeforeSchema){  String[] parts=str.split("[\\" + delimiter + "]");  if (parts.length < 2)   return null;  TableId tableId=TableId.parse(parts,parts.length - 1,useCatalogBeforeSchema);  if (tableId == null)   return null;  return new ColumnId(tableId,parts[parts.length - 1]);}  }
class C{  public static short halfFloatToSortableShort(float v){  return sortableShortBits(halfFloatToShortBits(v));}  }
class C{  public void updateSelectedOwner(){  for (  User owner : model.getSubscriptionOwners()) {    if (owner.isOwnerSelected()) {      model.setSelectedOwner(owner);      break;    }  }  refreshSelectedOwnerName(model.getSelectedOwner());  model.setShowOwnerWarning(shouldOwnerWarningBeShown());}  }
class C{  static String node_type(Node n){switch (n.getNodeType()) {case Node.DOCUMENT_NODE:    return ("Document");case Node.DOCUMENT_TYPE_NODE:  return ("Document type");case Node.ELEMENT_NODE:return ("Element");case Node.ENTITY_NODE:return ("Entity");case Node.TEXT_NODE:return ("Text");default :return String.format("node type %d",n.getNodeType());}}  }
class C{  @CheckReturnValue @Nonnull @Deprecated static public String[] split(@Nonnull String input,@Nonnull String divider){  int size=0;  String temp=input;  while (temp.length() > 0) {    size++;    int index=temp.indexOf(divider);    if (index < 0) {      break;    }    temp=temp.substring(index + divider.length());    if (temp.length() == 0) {      size++;      break;    }  }  String[] result=new String[size];  temp=input;  size=0;  while (temp.length() > 0) {    int index=temp.indexOf(divider);    if (index < 0) {      break;    }    result[size]=temp.substring(0,index);    temp=temp.substring(index + divider.length());    size++;  }  result[size]=temp;  return result;}  }
class C{  private final Object slotExchange(Object item,boolean timed,long ns){  Node p=participant.get();  Thread t=Thread.currentThread();  if (t.isInterrupted())   return null;  for (Node q; ; ) {    if ((q=slot) != null) {      if (U.compareAndSwapObject(this,SLOT,q,null)) {        Object v=q.item;        q.match=item;        Thread w=q.parked;        if (w != null)         U.unpark(w);        return v;      }      if (NCPU > 1 && bound == 0 && U.compareAndSwapInt(this,BOUND,0,SEQ))       arena=new Node[(FULL + 2) << ASHIFT];    } else     if (arena != null)     return null; else {      p.item=item;      if (U.compareAndSwapObject(this,SLOT,null,p))       break;      p.item=null;    }  }  int h=p.hash;  long end=timed ? System.nanoTime() + ns : 0L;  int spins=(NCPU > 1) ? SPINS : 1;  Object v;  while ((v=p.match) == null) {    if (spins > 0) {      h^=h << 1;      h^=h >>> 3;      h^=h << 10;      if (h == 0)       h=SPINS | (int)t.getId(); else       if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)       Thread.yield();    } else     if (slot != p)     spins=SPINS; else     if (!t.isInterrupted() && arena == null && (!timed || (ns=end - System.nanoTime()) > 0L)) {      U.putObject(t,BLOCKER,this);      p.parked=t;      if (slot == p)       U.park(false,ns);      p.parked=null;      U.putObject(t,BLOCKER,null);    } else     if (U.compareAndSwapObject(this,SLOT,p,null)) {      v=timed && ns <= 0L && !t.isInterrupted() ? TIMED_OUT : null;      break;    }  }  U.putOrderedObject(p,MATCH,null);  p.item=null;  p.hash=h;  return v;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public Property weekyear(){  return new Property(this,getChronology().weekyear());}  }
class C{  public PdfRendererBuilder useUnicodeBidiReorderer(BidiReorderer reorderer){  this._reorderer=reorderer;  return this;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void remove(String path) throws TomcatManagerException, IOException {  invoke("/remove?path=" + URLEncoder.encode(path,this.charset));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.STATE__SCOPES:    getScopes().clear();  return;case SGraphPackage.STATE__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case SGraphPackage.STATE__NAME:setName(NAME_EDEFAULT);return;case SGraphPackage.STATE__PARENT_REGION:setParentRegion((Region)null);return;case SGraphPackage.STATE__INCOMING_TRANSITIONS:getIncomingTransitions().clear();return;case SGraphPackage.STATE__OUTGOING_TRANSITIONS:getOutgoingTransitions().clear();return;case SGraphPackage.STATE__REGIONS:getRegions().clear();return;case SGraphPackage.STATE__DOCUMENTATION:setDocumentation(DOCUMENTATION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static Object create(String className,String prefix,Properties properties){  return create(className,(Object[])null,prefix,properties);}  }
class C{  protected void sequence_AnnotatedPropertyAssignment(ISerializationContext context,PropertySetterDeclaration semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.SETTER_DECLARATION__FPAR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.SETTER_DECLARATION__FPAR));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.FUNCTION_OR_FIELD_ACCESSOR__BODY) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.FUNCTION_OR_FIELD_ACCESSOR__BODY));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),semanticObject.getAnnotationList());  feeder.accept(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0(),semanticObject.getDeclaredName());  feeder.accept(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_2_0(),semanticObject.getFpar());  feeder.accept(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_4_0(),semanticObject.getBody());  feeder.finish();}  }
class C{  public void addRoundRectangleStraightRight(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.cubicTo(x,y,x,y,x,y + arcHeight);  this.cubicTo(x,y,x,y,x + arcWidth,y);  this.lineTo(x + width,y);  this.lineTo(x + width,y + height);  this.cubicTo(x,y + height,x,y + height,x + arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x,y + height - arcHeight);}  }
class C{  public static String concat(EncodedStringValue[] addr){  StringBuilder sb=new StringBuilder();  int maxIndex=addr.length - 1;  for (int i=0; i <= maxIndex; i++) {    sb.append(addr[i].getString());    if (i < maxIndex) {      sb.append(";");    }  }  return sb.toString();}  }
class C{  public AndQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public JErrorPane(Throwable th,int type){  super(new GridBagLayout());  setBorder(BorderFactory.createEmptyBorder(10,10,10,10));  listeners.put("ShowDetailButtonAction",new ShowDetailButtonAction());  listeners.put("OKButtonAction",new OKButtonAction());  this.msg=bundle.getString("Heading.text") + "\n\n" + th.getMessage();  StringWriter writer=new StringWriter();  th.printStackTrace(new PrintWriter(writer));  writer.flush();  this.stacktrace=writer.toString();  ExtendedGridBagConstraints constraints=new ExtendedGridBagConstraints();  JTextArea msgArea=new JTextArea();  msgArea.setText(msg);  msgArea.setColumns(50);  msgArea.setFont(new JLabel().getFont());  msgArea.setForeground(new JLabel().getForeground());  msgArea.setOpaque(false);  msgArea.setEditable(false);  msgArea.setLineWrap(true);  constraints.setWeight(0,0);  constraints.anchor=GridBagConstraints.WEST;  constraints.fill=GridBagConstraints.NONE;  constraints.setGridBounds(0,0,1,1);  add(msgArea,constraints);  constraints.setWeight(1,0);  constraints.anchor=GridBagConstraints.CENTER;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,1,1,1);  add(createButtonsPanel(),constraints);  JTextArea details=new JTextArea();  msgArea.setColumns(50);  details.setText(stacktrace);  details.setEditable(false);  detailsArea=new JPanel(new BorderLayout(0,10));  detailsArea.add(new JSeparator(),BorderLayout.NORTH);  detailsArea.add(new JScrollPane(details),BorderLayout.CENTER);  subpanel=new JPanel(new BorderLayout());  constraints.insets=new Insets(10,4,4,4);  constraints.setWeight(1,1);  constraints.anchor=GridBagConstraints.CENTER;  constraints.fill=GridBagConstraints.BOTH;  constraints.setGridBounds(0,2,1,1);  add(subpanel,constraints);}  }
class C{  private void createRealisticLanes(){  Lanes laneDef20=this.scenario.getLanes();  LanesFactory fac=laneDef20.getFactory();  LanesToLinkAssignment linkAssignment=fac.createLanesToLinkAssignment(Id.createLinkId("1_2"));  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.ol",Lane.class),capFirstLast,linkLengthSmall,0,1,null,Arrays.asList(Id.create("1_2.l",Lane.class),Id.create("1_2.r",Lane.class)));  if (simulateInflowCap) {    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.l",Lane.class),capFirstLast,linkLengthSmall / 2,-1,1,Collections.singletonList(Id.createLinkId("2_23")),null);    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.r",Lane.class),capFirstLast,linkLengthSmall / 2,1,1,Collections.singletonList(Id.createLinkId("2_24")),null);  } else {    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.l",Lane.class),capFirstLast,linkLengthSmall / 2,-1,1,Collections.singletonList(Id.createLinkId("2_3")),null);    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.r",Lane.class),capFirstLast,linkLengthSmall / 2,1,1,Collections.singletonList(Id.createLinkId("2_4")),null);  }  laneDef20.addLanesToLinkAssignment(linkAssignment);  if (this.middleLinkExists) {    if (simulateInflowCap) {      linkAssignment=fac.createLanesToLinkAssignment(Id.createLinkId("23_3"));      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("23_3.ol",Lane.class),capFast,linkLengthSmall,0,1,null,Arrays.asList(Id.create("23_3.f",Lane.class),Id.create("23_3.r",Lane.class)));      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("23_3.f",Lane.class),capFast,linkLengthSmall / 2,0,1,Collections.singletonList(Id.createLinkId("3_5")),null);      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("23_3.r",Lane.class),capFast,linkLengthSmall / 2,1,1,Collections.singletonList(Id.createLinkId("3_4")),null);      laneDef20.addLanesToLinkAssignment(linkAssignment);    } else {      linkAssignment=fac.createLanesToLinkAssignment(Id.createLinkId("2_3"));      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("2_3.ol",Lane.class),capFast,linkLengthSmall,0,1,null,Arrays.asList(Id.create("2_3.f",Lane.class),Id.create("2_3.r",Lane.class)));      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("2_3.f",Lane.class),capFast,linkLengthSmall / 2,0,1,Collections.singletonList(Id.createLinkId("3_5")),null);      LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("2_3.r",Lane.class),capFast,linkLengthSmall / 2,1,1,Collections.singletonList(Id.createLinkId("3_4")),null);      laneDef20.addLanesToLinkAssignment(linkAssignment);    }  }}  }
class C{  public String valuesListTipText(){  return "The range for each each attribute as string.";}  }
class C{  @Override public DriverTask createVolumes(List<StorageVolume> volumes,StorageCapabilities storageCapabilities){  LOG.info("Creating {} new volumes",volumes.size());  return provisioningHelper.createVolumes(volumes,storageCapabilities);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void addListener(Listener listener){  if (listener == null)   throw new NullPointerException(Messages.getString("dynamics.world.nullListener"));  if (this.listeners.contains(listener))   throw new IllegalArgumentException("dynamics.world.addExistingListener");  this.listeners.add(listener);}  }
class C{  public static void main(String... args) throws Exception {  new Indexer().run(args);}  }
class C{  @Override @SuppressWarnings("unchecked") protected final void initialize(){  final int patternSymbolsNum=countPatternSymbols(getPattern());  if (patternSymbolsNum > 0) {    setInputs(new Input[patternSymbolsNum]);    setSegments(new String[patternSymbolsNum + 1]);    final StringBuilder segmentsBuilder=new StringBuilder();    final StringBuilder patternBuilder=new StringBuilder(getPattern());    int segmentCounter=0;    for (int j=0; j < patternSymbolsNum; j++) {      int i=0;      while (patternBuilder.charAt(i) != PATTERN_CHAR) {        segmentsBuilder.append(patternBuilder.charAt(i));        i++;      }      segments[segmentCounter]=segmentsBuilder.toString();      segmentsBuilder.setLength(0);      patternBuilder.delete(0,i + 1);      addExpressionParams(patternBuilder,segmentCounter);      segmentCounter++;    }    segments[patternSymbolsNum]=patternBuilder.toString();  }}  }
class C{  public RelayedCandidate(TransportAddress transportAddress,TurnCandidateHarvest turnCandidateHarvest,TransportAddress mappedAddress){  super(transportAddress,turnCandidateHarvest.hostCandidate.getParentComponent(),CandidateType.RELAYED_CANDIDATE,CandidateExtendedType.TURN_RELAYED_CANDIDATE,turnCandidateHarvest.hostCandidate.getParentComponent().findLocalCandidate(mappedAddress));  this.turnCandidateHarvest=turnCandidateHarvest;  setBase(this);  setRelayServerAddress(turnCandidateHarvest.harvester.stunServer);  setMappedAddress(mappedAddress);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.556 -0400",hash_original_method="B7ADCE9A3D3A09F26DDD24599D7121FB",hash_generated_method="6B6A6D84DF362E5AC6B705BC3168F071") public OrFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  public int indexOf(int elem){  return indexOf(elem,0);}  }
class C{  public void run(){  try {    boolean running=true;    while (running) {      try {        String line=null;        while ((line=_breader.readLine()) != null) {          try {            _bot.handleLine(line);          } catch (          Throwable t) {            StringWriter sw=new StringWriter();            PrintWriter pw=new PrintWriter(sw);            t.printStackTrace(pw);            pw.flush();          }        }        if (line == null) {          running=false;        }      } catch (      InterruptedIOException iioe) {        this.sendRawLine("PING " + (System.currentTimeMillis() / 1000));      }    }  } catch (  Exception e) {  }  try {    _socket.close();  } catch (  Exception e) {  }  if (!_disposed) {    _isConnected=false;    _bot.onDisconnect();  }}  }
class C{  public WrapLayout(int align){  super(align);}  }
class C{  static int sendDatagram(NetworkInterface nif,InetAddress group,int port) throws IOException {  ProtocolFamily family=(group instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;  DatagramChannel dc=DatagramChannel.open(family).setOption(StandardSocketOptions.IP_MULTICAST_IF,nif);  int id=rand.nextInt();  byte[] msg=Integer.toString(id).getBytes("UTF-8");  ByteBuffer buf=ByteBuffer.wrap(msg);  System.out.format("Send message -> group %s (id=0x%x)\n",group.getHostAddress(),id);  dc.send(buf,new InetSocketAddress(group,port));  dc.close();  return id;}  }
class C{  public int toLineNumber(int pc){  int n=tableLength();  int i=0;  for (; i < n; ++i)   if (pc < startPc(i))   if (i == 0)   return lineNumber(0); else   break;  return lineNumber(i - 1);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  protected void beginDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  int attrMask=GL2.GL_POINT_BIT | GL2.GL_CURRENT_BIT | GL2.GL_COLOR_BUFFER_BIT| GL2.GL_ENABLE_BIT;  if (dc.isPickingMode())   attrMask|=GL2.GL_DEPTH_BUFFER_BIT | GL2.GL_TRANSFORM_BIT | GL2.GL_VIEWPORT_BIT| GL2.GL_DEPTH_BUFFER_BIT;  gl.glPushAttrib(attrMask);  if (!dc.isPickingMode()) {    gl.glEnable(GL.GL_BLEND);    OGLUtil.applyBlending(gl,false);  }}  }
class C{  @Override protected final void addInternal(final double dist,final int id){  if (size >= k && dist > dists[k - 1]) {    return;  }  insertionSort(dist,id);}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  public AbstractXpAppCompatSpinner(Context context){  this(context,null);}  }
class C{  public long startTime(){  return startTime;}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public static CreateServiceSession parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateServiceSession object=new CreateServiceSession();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createServiceSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateServiceSession)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","userToken").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUserToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ProtocolInfo(String name,Collection<Form> forms){  this(name,forms,new ArrayList<Form>(forms));}  }
class C{  public void add(Predicate p){  if (m_clauses.contains(p)) {    throw new IllegalArgumentException("Duplicate predicate.");  }  m_clauses.add(p);  fireExpressionChange();}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public Schema schema(){  return theSchema;}  }
class C{  @SuppressWarnings("unchecked") public final T validated(Boolean validated){  this.validated=validated;  return (T)this;}  }
class C{  public static void main(String[] args){  TestLinkTaglet tester=new TestLinkTaglet();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public DataSource read(InputStream input,Class<? extends Comparable<?>>... types) throws IOException {  BufferedImage image=ImageIO.read(input);  int w=image.getWidth();  int h=image.getHeight();  Class[] colTypes=new Class[w];  Arrays.fill(colTypes,Double.class);  DataTable data=new DataTable(colTypes);  double factor=this.<Number>getSetting("factor").doubleValue();  double offset=this.<Number>getSetting("offset").doubleValue();  int[] pixelData=new int[w];  Double[] rowData=new Double[w];  for (int y=0; y < h; y++) {    image.getRGB(0,y,pixelData.length,1,pixelData,0,0);    for (int x=0; x < pixelData.length; x++) {      double r=(pixelData[x] >> 16) & 0xFF;      rowData[x]=r * factor + offset;    }    data.add(rowData);  }  return data;}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.pop_progress,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  private InputSource resolveRelativeURL(String namespaceURI,String relativeUri) throws SAXException {  try {    String baseUri=getLocator().getSystemId();    if (baseUri == null)     baseUri=documentSystemId;    String systemId=null;    if (relativeUri != null)     systemId=Uri.resolve(baseUri,relativeUri);    EntityResolver er=parser.getEntityResolver();    if (er != null) {      InputSource is=er.resolveEntity(namespaceURI,systemId);      if (is != null)       return is;    }    if (systemId != null)     return new InputSource(systemId); else     return null;  } catch (  IOException e) {    SAXParseException se=new SAXParseException(e.getMessage(),getLocator(),e);    parser.errorHandler.error(se);    return null;  }}  }
class C{  public static int fetchAttrColor(Context context,@AttrRes int attrRes){  final TypedValue value=new TypedValue();  context.getTheme().resolveAttribute(attrRes,value,true);  return value.data;}  }
class C{  private static String normalizeUriEscape(byte[] rawUri,int i,int len,String encoding) throws IOException {  ByteToChar converter=allocateConverter();  if (encoding == null) {    encoding="utf-8";  }  try {    converter.setEncoding(encoding);  } catch (  UnsupportedEncodingException e) {    log.log(Level.FINE,e.toString(),e);  }  try {    while (i < len) {      int ch=rawUri[i++] & 0xff;      if (ch == '%')       i=scanUriEscape(converter,rawUri,i,len); else       converter.addByte(ch);    }    String result=converter.getConvertedString();    freeConverter(converter);    return result;  } catch (  Exception e) {    throw new BadRequestException(L.l("The URL contains escaped bytes unsupported by the {0} encoding.",encoding));  }}  }
class C{  public final AC growPrio(int p){  return growPrio(p,curIx);}  }
class C{  public boolean removeKey(int key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.values[i]=null;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public String who(){  return who;}  }
class C{  public boolean isMixed(){  return bidiBase.isMixed();}  }
class C{  public TDoubleDoubleHashMap absoluteDistributionFixed(int minSize){  Discretizer discretizer=FixedSampleSizeDiscretizer.create(values.toArray(),minSize);  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double val=values.get(i);    double bin=discretizer.discretize(val);    double binWidth=discretizer.binWidth(val);    freq.adjustOrPutValue(bin,weights.get(i) / binWidth,weights.get(i) / binWidth);  }  return freq;}  }
class C{  public final void mulNormalize(Matrix3d m1){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20;  tmp[1]=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21;  tmp[2]=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22;  tmp[3]=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20;  tmp[4]=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21;  tmp[5]=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22;  tmp[6]=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20;  tmp[7]=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21;  tmp[8]=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  public static final void sendWakeOnLanPacket(String macAddr){  final String IP="255.255.255.255";  final int port=7;  try {    final byte[] MACBYTE=new byte[6];    final String[] hex=macAddr.split("(\\:|\\-)");    for (int i=0; i < 6; i++) {      MACBYTE[i]=(byte)Integer.parseInt(hex[i],16);    }    final byte[] bytes=new byte[6 + 16 * MACBYTE.length];    for (int i=0; i < 6; i++) {      bytes[i]=(byte)0xff;    }    for (int i=6; i < bytes.length; i+=MACBYTE.length) {      System.arraycopy(MACBYTE,0,bytes,i,MACBYTE.length);    }    final InetAddress address=InetAddress.getByName(IP);    final DatagramPacket packet=new DatagramPacket(bytes,bytes.length,address,port);    final DatagramSocket socket=new DatagramSocket();    socket.send(packet);    socket.close();    LOGGER.info("Sent WOL packet to " + macAddr);  } catch (  final Exception e) {    LOGGER.error("Error sending WOL packet to " + macAddr,e);  }}  }
class C{  private DeferredResult<WordCountsResponse> processDocument(String documentLink){  return this.fetchDocument(documentLink).thenApply(null).thenApply(null).exceptionally(null);}  }
class C{  public Node item(int index){  return null;}  }
class C{  public static boolean isNull(Object obj){  return obj == null;}  }
class C{  private void bindDictionaryData(final CategoryDTO instance,final Category category){  if (instance.getProductTypeId() != null && instance.getProductTypeId() > 0) {    category.setProductType(productTypeService.findById(instance.getProductTypeId()));  } else {    category.setProductType(null);  }}  }
class C{  public Color awtPrefcolor(){  if (getSAwtPref2color().containsKey(this.getPrefProlog()))   return (Color)getSAwtPref2color().get(this.getPrefProlog()); else {    Debug.log("Unknown color for preference " + this.getPrefName() + ".");    return new Color(200,200,200);  }}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  public UnexpectedException(String s,Exception ex){  super(s,ex);}  }
class C{  @Override public ConsumesRequestCondition combine(ConsumesRequestCondition other){  return !other.expressions.isEmpty() ? other : this;}  }
class C{  protected Map<String,Object> filterNull(Map<String,Object> values){  Map<String,Object> result=new HashMap<String,Object>();  for (  Map.Entry<String,Object> entry : values.entrySet()) {    String key=entry.getKey();    if (key == null) {      continue;    }    Object value=entry.getValue();    if (value == null) {      continue;    }    result.put(key,value);  }  return result;}  }
class C{  public ObjectRangeModel(Object[] objects){  setValueRange(objects);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean contains(final char[] array,final char valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  @Override public int addAllAbsent(@NotNull Collection<? extends E> c){  Object[] cs=c.toArray();  if (cs.length == 0) {    return 0;  }  Object[] uniq=new Object[cs.length];  Object[] elements;  Object[] newElements;  int added;  do {    elements=array;    int len=elements.length;    added=0;    for (    Object e : cs) {      if (indexOf(e,elements,0,len) < 0 && indexOf(e,uniq,0,added) < 0) {        uniq[added++]=e;      }    }    if (added == 0) {      return 0;    }    newElements=Arrays.copyOf(elements,len + added,Object[].class);    System.arraycopy(uniq,0,newElements,len,added);  } while (!replaceArray(elements,newElements));  return added;}  }
class C{  static private boolean isQuoteEscapedChar(String s,int pos){  boolean openQuoteFound=false;  boolean closeQuoteFound=false;  String s2=s.substring(0,pos);  int posOpen=pos;  while ((posOpen=s2.lastIndexOf("\\Q",posOpen - 1)) != -1) {    if (!isSlashEscapedChar(s2,posOpen)) {      openQuoteFound=true;      break;    }  }  if (openQuoteFound) {    if (s2.indexOf("\\E",posOpen) != -1) {      closeQuoteFound=true;    }  }  return openQuoteFound && !closeQuoteFound;}  }
class C{  public static String partitionNameToDdlSpec(String partitionName){  String[] partitionNameSplit=partitionName.split("/");  List<String> columnExpressions=new ArrayList<>();  for (  String columnValue : partitionNameSplit) {    String[] columnValueSplit=columnValue.split("=");    if (columnValueSplit.length != 2) {      throw new RuntimeException("Invalid partition name " + partitionName);    }    columnExpressions.add(columnValueSplit[0] + "='" + columnValueSplit[1]+ "'");  }  return "PARTITION(" + StringUtils.join(columnExpressions,", ") + ")";}  }
class C{  @Override public void updateClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  public CategoryTextAnnotation(String text,Comparable category,double value){  super(text);  ParamChecks.nullNotPermitted(category,"category");  this.category=category;  this.value=value;  this.categoryAnchor=CategoryAnchor.MIDDLE;}  }
class C{  public boolean handleSyncOffer(String storeName,byte[] key,Iterable<VectorClock> versions) throws SyncException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null)   return true;  List<Versioned<byte[]>> values=store.get(new ByteArray(key));  if (values == null || values.size() == 0)   return true;  for (  VectorClock vc : versions) {    for (    Versioned<byte[]> value : values) {      VectorClock existingVc=(VectorClock)value.getVersion();      if (!vc.compare(existingVc).equals(Occurred.BEFORE))       return true;    }  }  return false;}  }
class C{  public boolean registerNamespace(final String prefix,final String namespace){  final String put=prefixMap.put(prefix,namespace);  createNamespace(prefix,namespace);  return put == null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int indexOf(Uri uri){  if (!mUriMap.containsKey(uri)) {    return -1;  }  return mList.indexOf(new UriWrapper(uri));}  }
class C{  public static String unescapeString(final String string){  if (string.indexOf(DELIMITER_COMPONENT) < 0) {    final int length=string.length();    final StringBuffer buffer=new StringBuffer(length);    for (int index=0; index < length; index++) {      final char character=string.charAt(index);      if (DELIMITER_COMPONENT == character) {        if (index < length - 1) {          final char escape=string.charAt(index + 1);          if (DELIMITER_COMPONENT == escape)           continue;        }      }      buffer.append(character);    }    return buffer.toString();  }  return string;}  }
class C{  public static byte initializeEntityActivationType(Entity entity){  if (((IMob.class.isAssignableFrom(entity.getClass()) || IRangedAttackMob.class.isAssignableFrom(entity.getClass())) && (entity.getClass() != EntityMob.class)) || SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.MONSTER)) {    return 1;  } else   if (SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.CREATURE)) {    return 2;  } else   if (SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.WATER_CREATURE)) {    return 3;  } else   if (SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.AMBIENT)) {    return 4;  } else {    return 5;  }}  }
class C{  public void run(IAction action){  boolean successfulCompilation;  UmpleModel model;  String pjName;  JavaClassGenerator.mainMainClass=null;  try {    MessageConsole umpleConsole=findConsole("Umple Compile");    umpleConsole.activate();    System.setErr(new PrintStream(umpleConsole.newOutputStream()));    System.setOut(new PrintStream(umpleConsole.newOutputStream()));    window.getActivePage().saveAllEditors(false);    IEditorPart editor=window.getActivePage().getActiveEditor();    if (editor == null) {      throw new Exception("Please open an Umple file.");    }    IResource fName=(IResource)editor.getEditorInput().getAdapter(IResource.class);    String wsLocation=fName.getLocation().toOSString();    String fileName=window.getActivePage().getActiveEditor().getTitle().toString();    if (!(fileName.endsWith(".ump")) || fileName.equals("")) {      throw new Exception("Please open an Umple file.");    }    String fullPath=wsLocation;    UmpleFile file=new UmpleFile(fullPath.substring(0,fullPath.lastIndexOf(fileName,fullPath.length() - 1)),fileName);    model=new UmpleModel(file);    try {      if ("GeneratePapyrus".equals(action.getId())) {        model.addGenerate("Papyrus");      }      model.run();      fName.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);    } catch (    Exception e1) {      System.err.println(e1.getMessage());    }    if ("CompileAndRun".equals(action.getId())) {      pjName=fName.getFullPath().toOSString().split("/")[1];      File binFolder=new File(wsLocation + File.separator + pjName+ File.separator+ "bin");      if (!binFolder.exists()) {        binFolder.mkdir();      }      List<String> libList=new ArrayList<String>();      libList.add(" -d " + wsLocation + File.separator+ pjName+ File.separator+ "bin");      libList.add(" -classpath " + wsLocation + File.separator+ pjName+ File.separator+ "bin");      try {        BufferedReader br=new BufferedReader(new FileReader(wsLocation + File.separator + pjName+ File.separator+ ".classpath"));        String line=br.readLine();        Pattern pat=Pattern.compile(".*<classpathentry.*kind=\"lib\".*path=\"(.*)\".*/>.*");        while (line != null) {          Matcher mat=pat.matcher(line);          if (mat.matches()) {            libList.add(":" + wsLocation + mat.group(1));          }          line=br.readLine();        }        br.close();      } catch (      Exception e) {        e.printStackTrace();      }      successfulCompilation=CodeCompiler.compile(model,"-",libList.toArray(new String[0]));      fName.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE,null);      if (successfulCompilation) {        System.out.println("Was successfully compiled");        List<UmpleClass> classes=CodeCompiler.getMainClasses(model);        String[] possibilities=new String[classes.size()];        for (int i=0; i < classes.size(); i++) {          possibilities[i]=classes.get(i).getName();        }        UmpleClass mainClass=null;        if (possibilities.length == 0) {          throw new RuntimeException("No main classes found");        }        String mainClassName=null;        String wizardArguments="";        if (possibilities.length == 1) {          mainClassName=(String)possibilities[0];        } else {          Shell shell=window.getShell();          UmpleMainClassWizard wizard=new UmpleMainClassWizard(possibilities);          WizardDialog dialog=new WizardDialog(shell,wizard);          int result=dialog.open();          mainClassName=wizard.getClassName();          wizardArguments=wizard.getArguments();        }        for (int i=0; i < classes.size(); i++) {          if (mainClassName.equals(classes.get(i).getName())) {            mainClass=classes.get(i);            break;          }        }        ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();        ILaunchConfigurationType type=manager.getLaunchConfigurationType(IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION);        boolean hasRun=false;        ILaunchConfiguration[] configurations=manager.getLaunchConfigurations(type);        for (int i=0; i < configurations.length; i++) {          ILaunchConfiguration configuration=configurations[i];          if (configuration.getName().equals(mainClass.getName() + " (umple)")) {            configuration.launch(ILaunchManager.RUN_MODE,null);            hasRun=true;            break;          }        }        if (!hasRun) {          ILaunchConfigurationWorkingCopy wc=type.newInstance(null,mainClass.getName() + " (umple)");          wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,pjName);          wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME,mainClass.getPackageName().replaceFirst("/","") + File.separator + mainClass.getName());          wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,wizardArguments);          ILaunchConfiguration config=wc.doSave();          config.launch(ILaunchManager.RUN_MODE,null);        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static Test suite(){  return (new TestSuite(ViewTagITCase.class));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlocalname03.class,args);}  }
class C{  public boolean applyFtProxy(){  return method.isAnnotationPresent(AstrixFaultToleranceProxy.class);}  }
class C{  private void common(String message,int messageType){  try {    setInfoMessage(message);    jbInit();    setInfoIcon(messageType);  } catch (  Exception ex) {    log.log(Level.SEVERE,"ADialogDialog.common - " + ex.getMessage());  }  this.getRootPane().setDefaultButton(confirmPanel.getOKButton());}  }
class C{  @SuppressWarnings("unchecked") public E peek(){  if (size == 0) {    return null;  }  return (E)queue[0];}  }
class C{  private void obtainMembers(Session s) throws NotSuspendedException, NoResponseException, NotConnectedException {  if (s == null)   s=m_session; else   m_session=s;  if (m_members == null && s != null) {    long id=getId();    if (id != Value.UNKNOWN_ID) {      if (((PlayerSession)s).getRawValue(id,m_isolateId) == this)       ((PlayerSession)s).obtainMembers(id,m_isolateId);      if (m_members != null) {        Iterator<DVariable> iter=m_members.values().iterator();        while (iter.hasNext()) {          Object next=iter.next();          if (next instanceof DVariable) {            ((DVariable)next).setSession(s);          }        }      }    }  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  @Override public String globalInfo(){  return "Learn SVM for regression using SMO with Shevade, Keerthi, et al. " + "adaption of the stopping criterion.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static Recharge createRecharge(@PlanConstants.Type int type,String title){switch (type) {case PlanConstants.DATA:    return buildDataRecharge(title);case PlanConstants.TALK:  return buildTalkRecharge(title);case PlanConstants.TEXT:return buildTextRecharge(title);}return null;}  }
class C{  public void drop(Object message){  if (system().getTraceInterface() != null) {    system().getTraceInterface().onDrop(sender(),message,this);  }  reply(new DeadLetter(message));}  }
class C{  public Boolean isInCompliance(){  return inCompliance;}  }
class C{  @Override public synchronized void init(final IExecutors executors,final IHttpProvider httpProvider,final Activity activity,final ILogger logger){  if (mInitialized) {    return;  }  mExecutors=executors;  mActivity=activity;  mLogger=logger;  mLogger.logDebug("Initializing MSA and ADAL authenticators");  mMSAAuthenticator.init(executors,httpProvider,activity,logger);  mADALAuthenticator.init(executors,httpProvider,activity,logger);  mInitialized=true;}  }
class C{  public void clear(FacesContext facesContext){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Clearing @ViewScoped CDI beans for current view map");  }  Map<String,Object> viewMap=facesContext.getViewRoot().getViewMap(false);  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,false);  if (contextMap != null) {    destroyBeans(viewMap,contextMap);  }}  }
class C{  public UF12(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);  if ((numberOfVariables != 10) && (numberOfVariables != 30)) {    throw new IllegalArgumentException("number of variables must be 10 or 30");  }  problem=new DTLZ3(numberOfVariables,numberOfObjectives);}  }
class C{  public StoredField(String name,long value){  super(name,TYPE);  fieldsData=value;}  }
class C{  public void addField(String field,int orderNum,boolean descending){  fields.add(new T2<>(field,orderNum));  if (descending) {    if (descendings == null)     descendings=new HashSet<>();    descendings.add(field);  }}  }
class C{  public EntryFile(File temp,File dir,String tag,long timestampMillis,int flags,int blockSize) throws IOException {  if ((flags & DropBoxManager.IS_EMPTY) != 0)   throw new IllegalArgumentException();  this.tag=tag;  this.timestampMillis=timestampMillis;  this.flags=flags;  this.file=new File(dir,Uri.encode(tag) + "@" + timestampMillis+ ((flags & DropBoxManager.IS_TEXT) != 0 ? ".txt" : ".dat")+ ((flags & DropBoxManager.IS_GZIPPED) != 0 ? ".gz" : ""));  if (!temp.renameTo(this.file)) {    throw new IOException("Can't rename " + temp + " to "+ this.file);  }  this.blocks=(int)((this.file.length() + blockSize - 1) / blockSize);}  }
class C{  @Nullable public static VirtualFile gitRootOrNull(final VirtualFile file){  if (file instanceof AbstractVcsVirtualFile) {    return getGitRootOrNull(VcsUtil.getFilePath(file.getPath()));  }  VirtualFile root=file;  while (root != null) {    if (root.findFileByRelativePath(DOT_GIT) != null) {      return root;    }    root=root.getParent();  }  return root;}  }
class C{  public static IStatus validateTypeVariableName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  private boolean isAlarmActive(Context context){  return CacheCleanupReceiver.makeCheckAlarmPendingIntent(context) != null;}  }
class C{  ActiveEntity(){  direction=Direction.DOWN;  setSpeed(0.0,0.0);}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  for (  Pair<StreamRecord<T>,Long> r : input) {    builder.append("value: " + r.getValue() + " timestamp: "+ r.getLeft().getTimestamp()+ "\n");  }  return builder.toString();}  }
class C{  private <T>Provider<T> autoProvider(Key<T> key){  for (  InjectAutoBind autoBind : _autoBind) {    Provider<T> provider=autoBind.provider(this,key);    if (provider != null) {      return provider;    }  }  return providerDefault(key);}  }
class C{  private void updateForeground(Color color){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (color == null) {    style.removeAttribute(StyleConstants.Foreground);  } else {    StyleConstants.setForeground(style,color);  }}  }
class C{  public param addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void encodeBegin(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  writer.startElement("body",component);  writeIdAttributeIfNecessary(context,writer,component);  String styleClass=(String)component.getAttributes().get("styleClass");  if (styleClass != null && styleClass.length() != 0) {    writer.writeAttribute("class",styleClass,"styleClass");  }  RenderKitUtils.renderPassThruAttributes(context,writer,component,BODY_ATTRIBUTES);}  }
class C{  protected void updateLayerActivity(WorldWindow wwd){  for (  LayerPanel layerPanel : this.layerPanels) {    Long layerTimeStamp=(Long)layerPanel.getLayer().getValue(AVKey.FRAME_TIMESTAMP);    Long frameTimeStamp=(Long)wwd.getSceneController().getValue(AVKey.FRAME_TIMESTAMP);    if (layerTimeStamp != null && frameTimeStamp != null && layerTimeStamp.longValue() == frameTimeStamp.longValue()) {      layerPanel.setLayerNameFont(this.boldFont);    } else     if (layerPanel.getLayer() instanceof TiledImageLayer) {      layerPanel.setLayerNameFont(this.plainFont);    } else     if (layerPanel.getLayer().isEnabled()) {      layerPanel.setLayerNameFont(this.boldFont);    } else     if (!layerPanel.getLayer().isEnabled()) {      layerPanel.setLayerNameFont(this.plainFont);    }  }}  }
class C{  protected void scheduleTasks(Set<TaskImageContainer> tasks){synchronized (mShadowTaskMap) {    for (    TaskImageContainer task : tasks) {      ImageShadowTask shadowTask=mShadowTaskMap.get(task.mSession);      if (shadowTask == null) {        throw new IllegalStateException("Scheduling a task with a unknown session.");      }switch (task.getProcessingPriority()) {case FAST:        mThreadPoolFast.execute(new TaskDoneWrapper(this,shadowTask,task));      break;case AVERAGE:    mThreadPoolAverage.execute(new TaskDoneWrapper(this,shadowTask,task));  break;case SLOW:mThreadPoolSlow.execute(new TaskDoneWrapper(this,shadowTask,task));break;default :mThreadPoolSlow.execute(new TaskDoneWrapper(this,shadowTask,task));break;}}}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String eventTopic(String eventId){  if (eventId == null) {    eventId="+";  }  return evtTopic.replace("{EVENTID}",eventId);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getScreenSaverOnSleep());}  }
class C{  @Override public boolean canRead(){  return _s != null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private byte[] readPayloadColumn(ResultSet rows,int columnIndex) throws SQLException {  String str;  byte[] payload=EMPTY_DATA;switch (options.contentDataType) {case CollectionDescriptor.CLOB_CONTENT:case CollectionDescriptor.CHAR_CONTENT:    str=rows.getString(columnIndex);  if (str != null)   payload=str.getBytes(ByteArray.DEFAULT_CHARSET);break;case CollectionDescriptor.NCLOB_CONTENT:case CollectionDescriptor.NCHAR_CONTENT:str=rows.getNString(columnIndex);if (str != null) payload=str.getBytes(ByteArray.DEFAULT_CHARSET);break;case CollectionDescriptor.BLOB_CONTENT:case CollectionDescriptor.RAW_CONTENT:payload=rows.getBytes(columnIndex);break;}return (payload);}  }
class C{  public boolean isPortUsable(StoragePort storagePort,Set<String> vArrays){  return isPortUsable(storagePort,vArrays,true);}  }
class C{  public boolean isNotificationEmitter(){  return notificationEmitter;}  }
class C{  private TriggerDefinition createTriggerDefinition(TriggerType type){  TriggerDefinition td=new TriggerDefinition();  td.setType(type);  td.setSuspendProcess(true);  return td;}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public void terminate(){synchronized (this) {    super.notify();  }}  }
class C{  public Input(IoBuffer buf){  super();  this.buf=buf;}  }
class C{  private FileUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean isSetAuthScheme(){  return this.authScheme != null;}  }
class C{  public AdBlockerAdviseDialog showOnlyOnce(Boolean onlyOnce){  this.onlyOnce=onlyOnce;  return this;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<HamapRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);    Utilities.verboseLog(10,"matches after waitTimeFactor: " + waitTimeFactor + " - "+ rawMatches.size());  }  int matchCount=0;  for (  final RawProtein rawProtein : rawMatches) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," HAMAP: Retrieved " + rawMatches.size() + " proteins to post-process.");  Utilities.verboseLog(10," HAMAP: A total of " + matchCount + " raw matches.");  LOGGER.debug("print the raw matches");  for (  RawProtein<HamapRawMatch> rawMatch : rawMatches) {    LOGGER.debug(rawMatch);  }  matchCount=0;  for (  final RawProtein rawProtein : rawMatches) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," HAMAP: " + rawMatches.size() + " proteins passed through post processing.");  Utilities.verboseLog(10," HAMAP: A total of " + matchCount + " matches PASSED.");  filteredMatchDAO.persist(rawMatches);  Utilities.verboseLog(10," HAMAP: filteredMatches persisted");}  }
class C{  private static String generateDB(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String wBit,final IOperandTreeNode rootNodeOfRegisterList){  final String startAddress=environment.getNextVariableString();  final Integer numberOfSetBits=rootNodeOfRegisterList.getChildren().size();  long baseOffset=offset;  instructions.add(ReilHelpers.createSub(baseOffset++,dw,registerNodeValue,wd,String.valueOf(numberOfSetBits * 4),dw,startAddress));  if (wBit.equals("2")) {    instructions.add(ReilHelpers.createStr(baseOffset++,dw,startAddress,dw,registerNodeValue));  }  return startAddress;}  }
class C{  public void clearSectionLabel(){  fragmentSectionLabel=null;}  }
class C{  public HubLinkMapping(String fileName,int numberOfHubs,Network network){  this.numberOfHubs=numberOfHubs;  if (fileName.contains(".mappingTable.")) {    readMappingTable(fileName);    unMappedLinksAtZeroHub=true;    return;  }  handleUnmappedLinksStart();  try {    FileReader fr=new FileReader(fileName);    BufferedReader br=new BufferedReader(fr);    String line;    StringTokenizer tokenizer;    String token;    int linkId;    line=br.readLine();    while (line != null) {      tokenizer=new StringTokenizer(line);      for (int i=0; i < this.numberOfHubs; i++) {        token=tokenizer.nextToken();        linkId=(int)Double.parseDouble(token);        linkHubMapping.put(Integer.toString(linkId),i);      }      if (tokenizer.hasMoreTokens()) {        throw new RuntimeException("the number of hubs is wrong");      }      line=br.readLine();    }  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException("Error reading the hub link mapping file");  }  linkHubMapping.remove("-1");  handleUnmappedLinksEnd(network);}  }
class C{  public static RegexExtractor regex(String query){  return new RegexExtractor(query);}  }
class C{  public EcosTurnout(int number,String prefix,EcosTrafficController etc,EcosTurnoutManager etm){  super(prefix + "T" + number);  _number=number;  this.prefix=prefix;  tc=etc;  tm=etm;  _validFeedbackTypes|=MONITORING | EXACT | INDIRECT;  _activeFeedbackType=MONITORING;  if (modeNames == null) {    initFeedbackModes();  }  _validFeedbackNames=modeNames;  _validFeedbackModes=modeValues;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:05.761 -0500",hash_original_method="BEA9760994E1CBB8BA9A3650C9143B69",hash_generated_method="35959061F4918BB8BDB2025FA21CEE0F") public void destroy(){  validate();  nContextDeinitToClient(mContext);  mMessageThread.mRun=false;  try {    mMessageThread.join();  } catch (  InterruptedException e) {  }  nContextDestroy();  mContext=0;  nDeviceDestroy(mDev);  mDev=0;}  }
class C{  private void updateLocked(String newName,int newState){  int headsetState=newState & SUPPORTED_HEADSETS;  int usb_headset_anlg=headsetState & BIT_USB_HEADSET_ANLG;  int usb_headset_dgtl=headsetState & BIT_USB_HEADSET_DGTL;  int h2w_headset=headsetState & (BIT_HEADSET | BIT_HEADSET_NO_MIC);  boolean h2wStateChange=true;  boolean usbStateChange=true;  if (LOG)   Slog.v(TAG,"newName=" + newName + " newState="+ newState+ " headsetState="+ headsetState+ " prev headsetState="+ mHeadsetState);  if (mHeadsetState == headsetState) {    Log.e(TAG,"No state change.");    return;  }  if (h2w_headset == (BIT_HEADSET | BIT_HEADSET_NO_MIC)) {    Log.e(TAG,"Invalid combination, unsetting h2w flag");    h2wStateChange=false;  }  if (usb_headset_anlg == BIT_USB_HEADSET_ANLG && usb_headset_dgtl == BIT_USB_HEADSET_DGTL) {    Log.e(TAG,"Invalid combination, unsetting usb flag");    usbStateChange=false;  }  if (!h2wStateChange && !usbStateChange) {    Log.e(TAG,"invalid transition, returning ...");    return;  }  mWakeLock.acquire();  Message msg=mHandler.obtainMessage(MSG_NEW_DEVICE_STATE,headsetState,mHeadsetState,newName);  mHandler.sendMessage(msg);  mHeadsetState=headsetState;}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  private NullUtil(){  instanceNotAllowed(getClass());}  }
class C{  public void updateFields(GisFeatureDistance gisFeatureDistance,Class clazz){  gisFeatureDistance.setOpenstreetmap_map_url(URLUtils.createOpenstreetmapMapUrl(gisFeatureDistance.getLocation()));  gisFeatureDistance.setGoogle_map_url(URLUtils.createGoogleMapUrl(gisFeatureDistance.getLocation()));  gisFeatureDistance.setYahoo_map_url(URLUtils.createYahooMapUrl(gisFeatureDistance.getLocation()));  gisFeatureDistance.setCountry_flag_url(URLUtils.createCountryFlagUrl(gisFeatureDistance.getCountryCode()));  if (gisFeatureDistance.getLocation() != null) {    gisFeatureDistance.setLat(gisFeatureDistance.getLocation().getY());    gisFeatureDistance.setLng(gisFeatureDistance.getLocation().getX());  }  if (gisFeatureDistance.getFeatureClass() != null && gisFeatureDistance.getFeatureCode() != null) {    try {      gisFeatureDistance.setPlaceType(FeatureCode.valueOf(gisFeatureDistance.getFeatureClass() + "_" + gisFeatureDistance.getFeatureCode()).getObject().getClass().getSimpleName().toLowerCase());    } catch (    RuntimeException e) {      logger.warn("no feature code for " + gisFeatureDistance.getFeatureClass() + "_"+ gisFeatureDistance.getFeatureCode());    }  } else   if (clazz != null) {    gisFeatureDistance.setPlaceType(clazz.getSimpleName().toLowerCase());  }}  }
class C{  @POST @Path("/entitydef") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public AtlasEntityDef createEntityDef(AtlasEntityDef entityDef) throws AtlasBaseException {  AtlasEntityDef ret=typeDefStore.createEntityDef(entityDef);  try {    ret=typeDefStore.createEntityDef(entityDef);    return ret;  } catch (  AtlasBaseException ex) {    throw new WebApplicationException(Servlets.getErrorResponse(ex,Response.Status.BAD_REQUEST));  }}  }
class C{  public static boolean pointInRectPrecise(final double lat,final double lon,final double minLat,final double maxLat,final double minLon,final double maxLon){  return lat >= minLat && lat <= maxLat && lon >= minLon && lon <= maxLon;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Element store(Object o){  SerialSignalHead p=(SerialSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  storeCommon(p,element);  return element;}  }
class C{  public boolean remove(ObserveRelation relation){  if (relation == null)   throw new NullPointerException();  return observeRelations.remove(relation.getKey(),relation);}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerChat(AsyncPlayerChatEvent event){  if (event.getRecipients() instanceof ShoutCommand.MinecraftlySet)   return;  if (event.getMessage().equalsIgnoreCase("worldpls")) {    event.getPlayer().sendMessage("Your world is " + event.getPlayer().getWorld().getName());    event.setCancelled(true);  }}  }
class C{  public FileImportError[] importFileByInternalUserId(String SID,Long internalUserId,Long externalFileId,String externalType,Long room_id,boolean isOwner,String path,Long parentFolderId,String fileSystemName) throws AxisFault {  return this.geFileServiceProxy().importFileByInternalUserId(SID,internalUserId,externalFileId,externalType,room_id,isOwner,path,parentFolderId,fileSystemName);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  int numRows;  int numCols;  int row;  int col;  double z;  int i;  int c;  int x, y;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 3) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      caThresholdType=args[i].toLowerCase();    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;switch (caThresholdType) {case "specific catchment area (sca)":      caThreshold=caThreshold / gridRes;    break;case "total catchment area":  caThreshold=caThreshold / (gridRes * gridRes);break;default :break;}updateProgress("Loop 1 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {z=dem.getValue(row,col);if (z != noData) {i=0;for (c=0; c < 8; c++) {  x=col + xd[c];  y=row + yd[c];  if (z < dem.getValue(y,x)) {    i++;  }}tmpArea.setValue(row,col,1);tmpCount.setValue(row,col,i);output.setValue(row,col,-1);} else {tmpArea.setValue(row,col,noData);output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 1 of 2:",(int)progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (dem.getValue(row,col) != noData) {if (tmpCount.getValue(row,col) == 0) {  MDInfAccum(row,col,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();tmpArea.close();tmpCount.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static double calcDistance(final NetworkRoute networkRoute,final double relPosOnDepartureLink,final double relPosOnArrivalLink,final Network network){  double routeDistance=calcDistanceExcludingStartEndLink(networkRoute,network);  routeDistance+=network.getLinks().get(networkRoute.getStartLinkId()).getLength() * (1.0 - relPosOnDepartureLink);  if (!networkRoute.getStartLinkId().equals(networkRoute.getEndLinkId())) {    routeDistance+=network.getLinks().get(networkRoute.getEndLinkId()).getLength() * relPosOnArrivalLink;  } else {    routeDistance-=network.getLinks().get(networkRoute.getEndLinkId()).getLength() * (1.0 - relPosOnArrivalLink);  }  return routeDistance;}  }
class C{  public StaticSentence(Session s,String sentence,SerializerWrite serwrite){  this(s,new NormalBuilder(sentence),serwrite,null);}  }
class C{  @ExceptionHandler(value={AlreadyExistsException.class,ObjectAlreadyExistsException.class}) @ResponseStatus(HttpStatus.CONFLICT) @ResponseBody public ErrorInformation handleConflictException(Exception exception){  return getErrorInformation(HttpStatus.CONFLICT,exception);}  }
class C{  public static boolean exists(File dir){  SQLiteDatabase checkDB=null;  try {    String path=dir.getAbsolutePath() + "/databases/" + DATABASE_NAME+ ".db";    checkDB=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);    checkDB.close();  } catch (  Exception e) {  }  return checkDB != null;}  }
class C{  public boolean containsKey(EntryType type,String key){  manageReload();  return key != null && type != null && myMap.containsKey(type) && myMap.get(type).containsKey(key);}  }
class C{  public boolean isValid(){  if (!validateIpv4Addr(network_vip)) {    return false;  }  if (!validateIpv4Addr(network_gateway)) {    return false;  }  if (!validateIpv4Addr(network_netmask)) {    return false;  }  for (  String network_addr : network_addrs) {    if (!validateIpv4Addr(network_addr)) {      return false;    }  }  return true;}  }
class C{  public Region(String s){  String[] pStrings=s.split(";");  points=new Point3d[pStrings.length];  for (int i=0; i < points.length; i++) {    String coords=pStrings[i].substring(1,pStrings[i].length() - 1);    String[] coord=coords.split(",");    if (coord.length != 3) {      log.error("need to have three coordinates in " + pStrings[i]);    }    double x=Double.valueOf(coord[0]).doubleValue();    double y=Double.valueOf(coord[1]).doubleValue();    double z=Double.valueOf(coord[2]).doubleValue();    points[i]=new Point3d(x,y,z);  }  initPath(points);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  mScroller.startScroll(startX,startY,dx,dy);}  }
class C{  public static Writable filterLine(File self,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  return IOGroovyMethods.filterLine(newReader(self),closure);}  }
class C{  private String createEndChoiceMomentXml(){  return createEndMomentXml();}  }
class C{  public static void recomputeSpansBasicBlock(IR ir){  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    reg.clearSpansBasicBlock();  }  int[] lastBBNums=new int[ir.regpool.getTotalNumberOfRegisters()];  Arrays.fill(lastBBNums,-1);  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    int bbNum=bb.getNumber();    for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {      Instruction inst=e.nextElement();      for (Enumeration<Operand> ops=inst.getOperands(); ops.hasMoreElements(); ) {        Operand op=ops.nextElement();        if (op instanceof RegisterOperand) {          Register reg=((RegisterOperand)op).getRegister();          if (reg.isPhysical()) {            continue;          }          if (reg.spansBasicBlock()) {            continue;          }          if (seenInDifferentBlock(reg,bbNum,lastBBNums)) {            reg.setSpansBasicBlock();            continue;          }          if (inst.operator() == PHI) {            reg.setSpansBasicBlock();            continue;          }          logAppearance(reg,bbNum,lastBBNums);        }      }    }  }}  }
class C{  public void testCipherSpi03() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineWrap(null);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public boolean isProtected(){  return protectionBit;}  }
class C{  public ImageSharingDeleteTask(ImageSharingServiceImpl imageSharingService,RichcallService richcallService,LocalContentResolver contentResolver){  super(contentResolver,ImageSharingData.CONTENT_URI,ImageSharingData.KEY_SHARING_ID,ImageSharingData.KEY_CONTACT,(String)null);  mImageSharingService=imageSharingService;  mRichcallService=richcallService;}  }
class C{  public static boolean isZipFile(String file){  return "zip".equals(getExtension(file));}  }
class C{  public LRUCache(int maximumCacheSize){  this(0,maximumCacheSize,0.75f,true);}  }
class C{  public void initializeChildInheritance(ClassDescriptor parentDescriptor,AbstractSession session) throws DescriptorException {  if (parentDescriptor.getInheritancePolicy().hasChildren()) {    List<ClassDescriptor> childDescriptors=parentDescriptor.getInheritancePolicy().getChildDescriptors();    List<ClassDescriptor> cloneChildDescriptors=new ArrayList();    for (    ClassDescriptor child : childDescriptors) {      ClassDescriptor clonedChildDescriptor=(ClassDescriptor)child.clone();      clonedChildDescriptor.getInheritancePolicy().setParentDescriptor(parentDescriptor);      initializeReferenceDescriptor(clonedChildDescriptor,session);      clonedChildDescriptor.preInitialize(session);      clonedChildDescriptor.initialize(session);      translateFields(clonedChildDescriptor,session);      cloneChildDescriptors.add(clonedChildDescriptor);      initializeChildInheritance(clonedChildDescriptor,session);    }    parentDescriptor.getInheritancePolicy().setChildDescriptors(cloneChildDescriptors);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TextFieldEditor(String name,String labelText,int width,Composite parent){  this(name,labelText,width,VALIDATE_ON_KEY_STROKE,parent);}  }
class C{  public final ActorRef sender(){  return context.sender();}  }
class C{  public Vector2 cross(){  return new Vector2(z,-x);}  }
class C{  private void computeWrite(int cid,Epoch epoch,byte[] value){  int writeAccepted=epoch.countWrite(value);  Logger.println("(Acceptor.computeWrite) I have " + writeAccepted + " WRITEs for "+ cid+ ","+ epoch.getTimestamp());  if (writeAccepted > controller.getQuorum() && Arrays.equals(value,epoch.propValueHash)) {    if (!epoch.isAcceptSetted(me)) {      Logger.println("(Acceptor.computeWrite) sending WRITE for " + cid);      Logger.println("(Acceptor.computeWrite) Setting consensus " + cid + " QuorumWrite tiemstamp to "+ epoch.getConsensus().getEts()+ " and value "+ Arrays.toString(value));      epoch.getConsensus().setQuorumWrites(value);      epoch.setAccept(me,value);      if (epoch.getConsensus().getDecision().firstMessageProposed != null) {        epoch.getConsensus().getDecision().firstMessageProposed.acceptSentTime=System.nanoTime();      }      ConsensusMessage cm=factory.createAccept(cid,epoch.getTimestamp(),value);      Logger.println("(Acceptor.computeWrite) Creating cryptographic proof for my ACCEPT message from consensus " + cid);      insertProof(cm,epoch);      int[] targets=this.controller.getCurrentViewOtherAcceptors();      communication.getServersConn().send(targets,cm,true);      epoch.addToProof(cm);      computeAccept(cid,epoch,value);    }  }}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  protected void drawHorizontalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){  double yy=getRangeAxis().valueToJava2D(value,dataArea,RectangleEdge.LEFT);  Line2D line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);}  }
class C{  public boolean updateVolumeProperties(List<URI> volumeURIs,URI systemURI,String opId){  log.info("Update volume properties...");  try {    WorkflowStepCompleter.stepExecuting(opId);    getRemoteMirrorDevice().refreshVolumeProperties(systemURI,volumeURIs);    log.info("Volumes: {}",Joiner.on(',').join(volumeURIs));    log.info("OpId: {}",opId);    WorkflowStepCompleter.stepSucceded(opId);  } catch (  Exception e) {    log.warn("Failed to update properties for volumes {} " + volumeURIs);    log.error("Failed to update properties for volumes: {} " + e);    WorkflowStepCompleter.stepSucceded(opId);    return true;  }  return true;}  }
class C{  public static List<String> fileNameWildCardSearch(List<File> files,Date start,Date end) throws IOException {  List<String> nameList=new ArrayList<>();  for (  File f : files) {    logger.debug("file path: " + f.getAbsolutePath());  }  if (!files.isEmpty()) {    Collections.sort(files,new LogFileComparator());    for (    File file : files) {      if (fileInTimeRange(file,start,end) < 0) {        continue;      } else       if ((fileInTimeRange(file,start,end) == 0)) {        String name=file.getCanonicalPath();        nameList.add(name);      } else {        String name=file.getCanonicalPath();        nameList.add(name);        break;      }    }  }  logger.debug("after filter fileNames {}",nameList);  return nameList;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  static public IndexSegmentIndex createTransient(){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(IndexSegmentIndex.class.getName());  return (IndexSegmentIndex)BTree.createTransient(metadata);}  }
class C{  public static void registerPlayer(final Player player){  MockStendhalRPRuleProcessor.get().addPlayer(player);  MockStendlRPWorld.get().add(player);}  }
class C{  public void testClearBitNegativeInside5(){  String as="-18446744073709551615";  String res="-18446744073709551616";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(res,result.toString());}  }
class C{  public void shutdownSync(){  NetworkThread[] n=this.networkThreads;  if (n != null) {    NetworkThread t=n[0];    if (t != null) {      shutdown();      t.join();    }  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  return var(name);}  }
class C{  public void normalize(){  for (int y=0; y < m_size; y++) {    double diag=((Double)getCell(y,y)).doubleValue();    for (int x=0; x < m_size; x++) {      setCell(x,y,new Double(((Double)getCell(x,y)).doubleValue() - diag));    }  }}  }
class C{  private void stepDown(){  if (context.getLeader() != null && context.getLeader().equals(context.getCluster().member())) {    context.setLeader(0);  }}  }
class C{  public String decrypt(String encryptedMessage) throws ConfigurationException {  if (encryptedMessage == null)   return null;  String clearMessage=null;  PrivateKey privateKey=this.getPrivateKey_from_KeyStore();  try {    Cipher cipher=Cipher.getInstance(privateKey.getAlgorithm());    cipher.init(Cipher.DECRYPT_MODE,privateKey);    byte[] raw=DatatypeConverter.parseBase64Binary(encryptedMessage);    byte[] stringBytes=cipher.doFinal(raw);    clearMessage=new String(stringBytes,"UTF8");  } catch (  Exception e) {    String msg=MessageFormat.format("Cannot decrypt message. Error= {0}",e);    logger.error(msg);    throw new ConfigurationException(msg);  }  return clearMessage;}  }
class C{  void adjustMultiRowSpan(int spanNeeded,int nrows,int rowIndex){  if ((rowIndex + nrows) > getCount()) {    nrows=getCount() - rowIndex;    if (nrows < 1) {      return;    }  }  int span=0;  for (int i=0; i < nrows; i++) {    RowView rv=getRow(rowIndex + i);    span+=rv.getPreferredSpan(Y_AXIS);  }  if (spanNeeded > span) {    int adjust=(spanNeeded - span);    int rowAdjust=adjust / nrows;    int firstAdjust=rowAdjust + (adjust - (rowAdjust * nrows));    RowView rv=getRow(rowIndex);    adjustments[rowIndex]=Math.max(adjustments[rowIndex],firstAdjust);    for (int i=1; i < nrows; i++) {      adjustments[rowIndex + i]=Math.max(adjustments[rowIndex + i],rowAdjust);    }  }}  }
class C{  public static boolean lineContainsPoint(int x1,int y1,int x2,int y2,int px,int py,double tolerance){  Rectangle r=new Rectangle(new Point(x1,y1));  r.add(x2,y2);  r.grow(max(2,(int)ceil(tolerance)),max(2,(int)ceil(tolerance)));  if (!r.contains(px,py)) {    return false;  }  double a, b, x, y;  if (x1 == x2) {    return (abs(px - x1) <= tolerance);  }  if (y1 == y2) {    return (abs(py - y1) <= tolerance);  }  a=(double)(y1 - y2) / (double)(x1 - x2);  b=(double)y1 - a * (double)x1;  x=(py - b) / a;  y=a * px + b;  return (min(abs(x - px),abs(y - py)) <= tolerance);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public String disableModule(String id,String module){  Tenant tenant=tenants.get(id);  if (tenant == null) {    return "Tenant " + id + " not found";  }  if (!tenant.isEnabled(module)) {    return "Module " + module + " not found for tenant "+ id;  } else   if (!checkNoDependency(tenant,module)) {    return "Can not delete module " + module + " is in use";  } else {    tenant.disableModule(module);    return "";  }}  }
class C{  private void mergeMap(int targetindex,int deltaindex,MergeOperation Op){  int i;  if (Op == MergeOperation.COPY) {    for (i=0; i < bytesPerMap(); i++) {      jsrInfo.unusualReferenceMaps[targetindex + i]=jsrInfo.unusualReferenceMaps[deltaindex + i];    }  }  if (Op == MergeOperation.OR) {    for (i=0; i < bytesPerMap(); i++) {      jsrInfo.unusualReferenceMaps[targetindex + i]=(byte)(jsrInfo.unusualReferenceMaps[targetindex + i] | jsrInfo.unusualReferenceMaps[deltaindex + i]);    }  }  if (Op == MergeOperation.NAND) {    for (i=0; i < bytesPerMap(); i++) {      short temp=(byte)(~(jsrInfo.unusualReferenceMaps[deltaindex + i]));      jsrInfo.unusualReferenceMaps[targetindex + i]=(byte)(jsrInfo.unusualReferenceMaps[targetindex + i] & temp);    }  }}  }
class C{  public AdviceAttribute(String name,String friendlyName,List<String> value){  ValidateUtil.validateNotNull(name,"Advice attribute name");  ValidateUtil.validateNotNull(value,"Attribute values");  _name=name;  _friendlyName=friendlyName;  _value=Collections.unmodifiableList(value);}  }
class C{  public boolean matchesFlow(long switchDpid,short inPort,Ethernet packet,WildcardsPair wildcards){  IPacket pkt=packet.getPayload();  IPv4 pkt_ip=null;  TCP pkt_tcp=null;  UDP pkt_udp=null;  short pkt_tp_src=0;  short pkt_tp_dst=0;  if (wildcard_dpid == false && dpid != switchDpid)   return false;  if (wildcard_in_port == false && in_port != inPort)   return false;  if (action == FirewallRule.FirewallAction.DENY) {    wildcards.drop&=~OFMatch.OFPFW_IN_PORT;  } else {    wildcards.allow&=~OFMatch.OFPFW_IN_PORT;  }  if (wildcard_dl_src == false && dl_src != packet.getSourceMAC().toLong())   return false;  if (action == FirewallRule.FirewallAction.DENY) {    wildcards.drop&=~OFMatch.OFPFW_DL_SRC;  } else {    wildcards.allow&=~OFMatch.OFPFW_DL_SRC;  }  if (wildcard_dl_dst == false && dl_dst != packet.getDestinationMAC().toLong())   return false;  if (action == FirewallRule.FirewallAction.DENY) {    wildcards.drop&=~OFMatch.OFPFW_DL_DST;  } else {    wildcards.allow&=~OFMatch.OFPFW_DL_DST;  }  if (wildcard_dl_type == false) {    if (dl_type == Ethernet.TYPE_ARP) {      if (packet.getEtherType() != Ethernet.TYPE_ARP)       return false; else {        if (action == FirewallRule.FirewallAction.DENY) {          wildcards.drop&=~OFMatch.OFPFW_DL_TYPE;        } else {          wildcards.allow&=~OFMatch.OFPFW_DL_TYPE;        }      }    } else     if (dl_type == Ethernet.TYPE_IPv4) {      if (packet.getEtherType() != Ethernet.TYPE_IPv4)       return false; else {        if (action == FirewallRule.FirewallAction.DENY) {          wildcards.drop&=~OFMatch.OFPFW_NW_PROTO;        } else {          wildcards.allow&=~OFMatch.OFPFW_NW_PROTO;        }        pkt_ip=(IPv4)pkt;        if (wildcard_nw_src == false && this.matchIPAddress(nw_src_prefix,nw_src_maskbits,pkt_ip.getSourceAddress()) == false)         return false;        if (action == FirewallRule.FirewallAction.DENY) {          wildcards.drop&=~OFMatch.OFPFW_NW_SRC_ALL;          wildcards.drop|=(nw_src_maskbits << OFMatch.OFPFW_NW_SRC_SHIFT);        } else {          wildcards.allow&=~OFMatch.OFPFW_NW_SRC_ALL;          wildcards.allow|=(nw_src_maskbits << OFMatch.OFPFW_NW_SRC_SHIFT);        }        if (wildcard_nw_dst == false && this.matchIPAddress(nw_dst_prefix,nw_dst_maskbits,pkt_ip.getDestinationAddress()) == false)         return false;        if (action == FirewallRule.FirewallAction.DENY) {          wildcards.drop&=~OFMatch.OFPFW_NW_DST_ALL;          wildcards.drop|=(nw_dst_maskbits << OFMatch.OFPFW_NW_DST_SHIFT);        } else {          wildcards.allow&=~OFMatch.OFPFW_NW_DST_ALL;          wildcards.allow|=(nw_dst_maskbits << OFMatch.OFPFW_NW_DST_SHIFT);        }        if (wildcard_nw_proto == false) {          if (nw_proto == IPv4.PROTOCOL_TCP) {            if (pkt_ip.getProtocol() != IPv4.PROTOCOL_TCP)             return false; else {              pkt_tcp=(TCP)pkt_ip.getPayload();              pkt_tp_src=pkt_tcp.getSourcePort();              pkt_tp_dst=pkt_tcp.getDestinationPort();            }          } else           if (nw_proto == IPv4.PROTOCOL_UDP) {            if (pkt_ip.getProtocol() != IPv4.PROTOCOL_UDP)             return false; else {              pkt_udp=(UDP)pkt_ip.getPayload();              pkt_tp_src=pkt_udp.getSourcePort();              pkt_tp_dst=pkt_udp.getDestinationPort();            }          } else           if (nw_proto == IPv4.PROTOCOL_ICMP) {            if (pkt_ip.getProtocol() != IPv4.PROTOCOL_ICMP)             return false; else {            }          }          if (action == FirewallRule.FirewallAction.DENY) {            wildcards.drop&=~OFMatch.OFPFW_NW_PROTO;          } else {            wildcards.allow&=~OFMatch.OFPFW_NW_PROTO;          }          if (pkt_tcp != null || pkt_udp != null) {            if (tp_src != 0 && tp_src != pkt_tp_src)             return false;            if (action == FirewallRule.FirewallAction.DENY) {              wildcards.drop&=~OFMatch.OFPFW_TP_SRC;            } else {              wildcards.allow&=~OFMatch.OFPFW_TP_SRC;            }            if (tp_dst != 0 && tp_dst != pkt_tp_dst)             return false;            if (action == FirewallRule.FirewallAction.DENY) {              wildcards.drop&=~OFMatch.OFPFW_TP_DST;            } else {              wildcards.allow&=~OFMatch.OFPFW_TP_DST;            }          }        }      }    } else {      return false;    }  }  if (action == FirewallRule.FirewallAction.DENY) {    wildcards.drop&=~OFMatch.OFPFW_DL_TYPE;  } else {    wildcards.allow&=~OFMatch.OFPFW_DL_TYPE;  }  return true;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatablePaintValue res;  if (result == null) {    res=new AnimatablePaintValue(target);  } else {    res=(AnimatablePaintValue)result;  }  if (paintType == PAINT_COLOR) {    boolean canInterpolate=true;    if (to != null) {      AnimatablePaintValue toPaint=(AnimatablePaintValue)to;      canInterpolate=toPaint.paintType == PAINT_COLOR;    }    if (accumulation != null) {      AnimatablePaintValue accPaint=(AnimatablePaintValue)accumulation;      canInterpolate=canInterpolate && accPaint.paintType == PAINT_COLOR;    }    if (canInterpolate) {      res.paintType=PAINT_COLOR;      return super.interpolate(res,to,interpolation,accumulation,multiplier);    }  }  int newPaintType;  String newURI;  float newRed, newGreen, newBlue;  if (to != null && interpolation >= 0.5) {    AnimatablePaintValue toValue=(AnimatablePaintValue)to;    newPaintType=toValue.paintType;    newURI=toValue.uri;    newRed=toValue.red;    newGreen=toValue.green;    newBlue=toValue.blue;  } else {    newPaintType=paintType;    newURI=uri;    newRed=red;    newGreen=green;    newBlue=blue;  }  if (res.paintType != newPaintType || res.uri == null || !res.uri.equals(newURI) || res.red != newRed || res.green != newGreen || res.blue != newBlue) {    res.paintType=newPaintType;    res.uri=newURI;    res.red=newRed;    res.green=newGreen;    res.blue=newBlue;    res.hasChanged=true;  }  return res;}  }
class C{  public AccountHeaderBuilder withSelectionFirstLine(String selectionFirstLine){  this.mSelectionFirstLine=selectionFirstLine;  return this;}  }
class C{  public CachingParanamer(Paranamer delegate){  this.delegate=delegate;}  }
class C{  protected boolean isEnumerated(MetadataClass referenceClass,boolean isForMapKey){  return hasEnumerated(isForMapKey) || EnumeratedMetadata.isValidEnumeratedType(referenceClass);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private UploadResultView handlePreviousVersionUploadResult(String input){  UploadResultView uploadResult=null;  try {    uploadResult=gson.fromJson(input,UploadResultView.class);    if (uploadResult != null) {      return uploadResult;    }  } catch (  JsonSyntaxException e) {    e.printStackTrace();  }  return emptyUploadResult();}  }
class C{  private static byte[] fromHex(String hex){  byte[] binary=new byte[hex.length() / 2];  for (int i=0; i < binary.length; i++) {    binary[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  }  return binary;}  }
class C{  public static double fdrCutoff(double alpha,List<Double> pValues,boolean negativelyCorrelated,boolean pSorted){  return fdrCutoff(alpha,pValues,new int[1],negativelyCorrelated,pSorted);}  }
class C{  private int indexOfA(AlignmentTemplate alTemp,boolean add){  return aIndex.indexOf(alTemp.getCompactAlignment(),add);}  }
class C{  public void report(DiagnosticPosition pos,String msg,Object... args){  JavaFileObject currentSource=log.currentSourceFile();  if (verbose) {    if (sourcesWithReportedWarnings == null)     sourcesWithReportedWarnings=new HashSet<JavaFileObject>();    if (log.nwarnings < log.MaxWarnings) {      logMandatoryWarning(pos,msg,args);      sourcesWithReportedWarnings.add(currentSource);    } else     if (deferredDiagnosticKind == null) {      if (sourcesWithReportedWarnings.contains(currentSource)) {        deferredDiagnosticKind=DeferredDiagnosticKind.ADDITIONAL_IN_FILE;      } else {        deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILE;      }      deferredDiagnosticSource=currentSource;      deferredDiagnosticArg=currentSource;    } else     if ((deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE || deferredDiagnosticKind == DeferredDiagnosticKind.ADDITIONAL_IN_FILE) && !equal(deferredDiagnosticSource,currentSource)) {      deferredDiagnosticKind=DeferredDiagnosticKind.ADDITIONAL_IN_FILES;      deferredDiagnosticArg=null;    }  } else {    if (deferredDiagnosticKind == null) {      deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILE;      deferredDiagnosticSource=currentSource;      deferredDiagnosticArg=currentSource;    } else     if (deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE && !equal(deferredDiagnosticSource,currentSource)) {      deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILES;      deferredDiagnosticArg=null;    }  }}  }
class C{  public static WebDoc create(boolean plain,String title,boolean javaClient){  WebDoc doc=new WebDoc();  doc.setUp(plain,javaClient,title);  return doc;}  }
class C{  public static Spacing createDependentLFSpacing(int minSpaces,int maxSpaces,List<TextRange> dependency,boolean keepLineBreaks,int keepBlankLines){  return myFactory.createDependentLFSpacing(minSpaces,maxSpaces,dependency,keepLineBreaks,keepBlankLines,DependentSpacingRule.DEFAULT);}  }
class C{  public LongColumn(int nrows){  this(nrows,nrows,0L);}  }
class C{  public static int removeTransitRoutesWithoutLinkSequences(TransitSchedule schedule){  log.info("... Removing transit routes without link sequences");  int removed=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      boolean removeRoute=false;      NetworkRoute networkRoute=transitRoute.getRoute();      if (networkRoute == null) {        removeRoute=true;      }      List<Id<Link>> linkIds=ScheduleTools.getTransitRouteLinkIds(transitRoute);      if (linkIds.size() == 0) {        removeRoute=true;      } else {        for (        Id<Link> linkId : linkIds) {          if (linkId == null) {            removeRoute=true;          }        }      }      if (removeRoute) {        transitLine.removeRoute(transitRoute);        removed++;      }    }  }  log.info("... " + removed + " transit routes removed");  return removed;}  }
class C{  private void incrementModCounts(){  if (externalMessageList != null) {    externalMessageList.incrementModCount();  }  if (externalBuilderList != null) {    externalBuilderList.incrementModCount();  }  if (externalMessageOrBuilderList != null) {    externalMessageOrBuilderList.incrementModCount();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLSLD");  translateAll(environment,instruction,"SMLSLD",instructions);}  }
class C{  @Override public void intercept(RequestFacade request){  if (!loggedIn) {    try {      FormUrlEncodedTypedOutput to=new FormUrlEncodedTypedOutput();      to.addField("username",username);      to.addField("password",password);      to.addField("client_id",clientId);      to.addField("client_secret",clientSecret);      to.addField("grant_type","password");      String base64Auth=BaseEncoding.base64().encode(new String(clientId + ":" + clientSecret).getBytes());      List<Header> headers=new ArrayList<Header>();      headers.add(new Header("Authorization","Basic " + base64Auth));      Request req=new Request("POST",tokenIssuingEndpoint,headers,to);      Response resp=client.execute(req);      if (resp.getStatus() < 200 || resp.getStatus() > 299) {        throw new SecuredRestException("Login failure: " + resp.getStatus() + " - "+ resp.getReason());      } else {        String body=IOUtils.toString(resp.getBody().in());        accessToken=new Gson().fromJson(body,JsonObject.class).get("access_token").getAsString();        request.addHeader("Authorization","Bearer " + accessToken);        loggedIn=true;      }    } catch (    Exception e) {      throw new SecuredRestException(e);    }  } else {    request.addHeader("Authorization","Bearer " + accessToken);  }}  }
class C{  private Figure readGElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readOpacityAttribute(elem,a);  CompositeFigure g=factory.createG(a);  for (  IXMLElement child : elem.getChildren()) {    Figure childFigure=readElement(child);    if (readAttribute(child,"visibility","visible").equals("visible") && !readAttribute(child,"display","inline").equals("none")) {      if (childFigure != null) {        g.basicAdd(childFigure);      }    }  }  readTransformAttribute(elem,a);  if (TRANSFORM.get(a) != null) {    g.transform(TRANSFORM.get(a));  }  return g;}  }
class C{  public static byte min(byte a,byte b,byte c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  private MPayment createPayment(HttpSession session,Properties ctx,WebUser wu,WebOrder wo){  MPayment p=new MPayment(ctx,0,null);  p.setAD_Org_ID(wo.getAD_Org_ID());  p.setIsSelfService(true);  p.setAmount(wo.getC_Currency_ID(),wo.getGrandTotal());  p.setIsOnline(true);  p.setC_DocType_ID(true);  p.setTrxType(MPayment.TRXTYPE_Sales);  p.setTenderType(MPayment.TENDERTYPE_CreditCard);  p.setC_Order_ID(wo.getC_Order_ID());  p.setBP_BankAccount(wu.getBankAccount());  return p;}  }
class C{  public static Area convertPDFClipToJavaClip(final Area clip){  if (clip != null) {    double sx=(clip.getBounds2D().getWidth() + 2) / clip.getBounds2D().getWidth();    double sy=(clip.getBounds2D().getHeight() + 2) / clip.getBounds2D().getHeight();    double posX=clip.getBounds2D().getX();    double posY=clip.getBounds2D().getY();    Area a=(Area)clip.clone();    a.transform(AffineTransform.getTranslateInstance(-posX,-posY));    a.transform(AffineTransform.getScaleInstance(sx,sy));    a.transform(AffineTransform.getTranslateInstance(posX - 1,posY - 1));    return a;  }  return clip;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  @Override final public boolean isStable(){  if (!isOpen())   throw new IllegalStateException();  return false;}  }
class C{  public void test_getDefaultAlgorithm(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String def=KeyManagerFactory.getDefaultAlgorithm();  if (defaultAlgorithm == null) {    assertNull("DefaultAlgorithm must be null",def);  } else {    assertEquals("Invalid default algorithm",def,defaultAlgorithm);  }  String defA="Proba.keymanagerfactory.defaul.type";  Security.setProperty("ssl.KeyManagerFactory.algorithm",defA);  assertEquals("Incorrect defaultAlgorithm",KeyManagerFactory.getDefaultAlgorithm(),defA);  if (def == null) {    def="";  }  Security.setProperty("ssl.KeyManagerFactory.algorithm",def);  assertEquals("Incorrect defaultAlgorithm",KeyManagerFactory.getDefaultAlgorithm(),def);}  }
class C{  private boolean isFirstScanFinished(int cntr){  assert uriEncodedList != null;  return cntr >= uriEncodedList.size();}  }
class C{  public void requestLocationPermission(int requestCode){  if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION)) {    PermissionUtils.RationaleDialog.newInstance(requestCode,false).show(getSupportFragmentManager(),"dialog");  } else {    PermissionUtils.requestPermission(this,requestCode,Manifest.permission.ACCESS_FINE_LOCATION,false);  }}  }
class C{  private void onTestCrashed(){  handleResults(new CrashedDummyResult(mCurrentlyRunningTest));  Log.w(LOG_TAG,"onTestCrashed(): " + mCurrentlyRunningTest + " ("+ mCurrentlyRunningTestIndex+ ")");  Intent intent=new Intent(this,TestsListActivity.class);  intent.setAction(Intent.ACTION_REBOOT);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra("crashedTestIndex",mCurrentlyRunningTestIndex);  startActivity(intent);}  }
class C{  public static boolean canResumeFromSave(){synchronized (sSavedGame) {    return sSavedGame.mIsValid && (sSavedGame.mGamePlayState == GAME_PLAYING || sSavedGame.mGamePlayState == GAME_READY);  }}  }
class C{  public double pdf(int k){  if (k < 0 || k >= cdf.length - 1)   return 0.0;  return cdf[k - 1] - cdf[k];}  }
class C{  public static boolean isXHTMLMessage(Message message){  return message.getExtension("html",namespace) != null;}  }
class C{  public void testInvalidateChannel() throws IOException {  Directory dir=getDirectory(createTempDir());  NativeFSLockFactory.NativeFSLock lock=(NativeFSLockFactory.NativeFSLock)dir.obtainLock("test.lock");  lock.ensureValid();  lock.channel.close();  expectThrows(AlreadyClosedException.class,null);  IOUtils.closeWhileHandlingException(lock);  dir.close();}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public double computeLeftNeighborContribution(int leftNodeDegree){  return LN2 / Math.log(leftNodeDegree);}  }
class C{  protected boolean isViolationNode(DelphiPMDNode node){  int type=node.getType();  return type == DelphiLexer.PROCEDURE || type == DelphiLexer.FUNCTION;}  }
class C{  public synchronized void message(LocoNetMessage m){  int opCode=m.getOpCode();switch (opCode) {case LnConstants.OPC_PEER_XFER:    int src=m.getElement(2);  int dst=m.getElement(3) + m.getElement(4) * 256;int[] packet=m.getPeerXfrData();if (src == lowPart(LocoBufferAddress)) {String lbv=((packet[2] != 0) ? dotme(packet[2]) : "1.0");setLBVersion(lbv);}if (dst == LocoBufferAddress && src == lowPart(unitAddress) && (packet[4] == unitSubAddress)) {stopTimer();replyReceived();String fw=((packet[2] != 0) ? dotme(packet[2]) : "1.3.2");setLIOVersion(fw);if (packet[0] == LocoIO.LOCOIO_SV_READ || reading) {if (lastOpCv >= 0 && lastOpCv <= 50) {  int data=(packet[2] != 0) ? packet[5] : packet[7];  int channel=(lastOpCv / 3) - 1;  if (channel < 0) {    log.warn("... channel is less than zero!!!");    channel=0;  }  int type=lastOpCv - (channel * 3 + 3);  log.debug("... updating port " + channel + " SV"+ type+ "("+ (type == 1 ? "value1" : type == 2 ? "value2" : type == 0 ? "mode" : "unknown")+ ") = 0x"+ Integer.toHexString(data));  if (type == 2) {    setV2(channel,data);    setMode(channel,"<none>");  } else   if (type == 1) {    setV1(channel,data);    setMode(channel,"<none>");  } else   if (type == 0) {    setSV(channel,data);    LocoIOMode lim=validmodes.getLocoIOModeFor(getSV(channel),getV1(channel),getV2(channel));    if (lim == null) {      setMode(channel,"<none>");      setAddr(channel,0);      log.debug("Could not find mode!");    } else {      setMode(channel,lim.getFullMode());      setAddr(channel,validmodes.valuesToAddress(lim.getOpcode(),getSV(channel),getV1(channel),getV2(channel)));    }    log.debug("... decoded address (" + "cv=" + Integer.toHexString(getSV(channel)) + " "+ "v1="+ Integer.toHexString(getV1(channel))+ " "+ "v2="+ Integer.toHexString(getV2(channel))+ ") "+ "is "+ getAddr(channel)+ "(0x"+ Integer.toHexString(getAddr(channel))+ ")");  } else {    log.warn("OPC_PEER_XFR: Type (" + type + ") is not {0,1,2} for channel "+ channel);  }} else {}}issueNextOperation();return;} else {return;}case LnConstants.OPC_INPUT_REP:if (log.isDebugEnabled()) {log.debug(LnConstants.OPC_NAME(opCode) + " received");}for (int i=0; i < _numRows; i++) {if (capture[i]) {if (log.isDebugEnabled()) {log.debug("row set for capture: " + i);}int val1=m.getElement(1);int val2=m.getElement(2);setAddr(i,((val2 & 0x0F) << 5) * 256 + ((val1 & 0x7f) << 1) | (((val2 & LnConstants.OPC_SW_REQ_DIR) == LnConstants.OPC_SW_REQ_DIR) ? 0x01 : 0x00));capture[i]=false;}}return;case LnConstants.OPC_SW_REQ:if (log.isDebugEnabled()) {log.debug(LnConstants.OPC_NAME(opCode) + " received");}for (int i=0; i < _numRows; i++) {if (capture[i]) {if (log.isDebugEnabled()) {log.debug("row set for capture: " + i);}int val1=m.getElement(1);int val2=m.getElement(2);int addr=LocoIO.SENSOR_ADR(val1,val2);setAddr(i,addr);capture[i]=false;}}return;default :}}  }
class C{  public void run(){  try {    Thread.sleep(WAIT_TIME);  } catch (  InterruptedException e) {    cancelled=true;  }  Component component=pair.getParentComponent();  component.getParentStream().getCheckList().removeChecksListener(this);  validatedCandidates.remove(component.toShortString());  if (cancelled)   return;  logger.info("Nominate (first highest valid): " + pair.toShortString());  parentAgent.nominate(pair);}  }
class C{  public int innerNameIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 6);}  }
class C{  public static void main(String[] args) throws IllegalArgumentException {  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  args=flagConfig.remainingArgs;  ObjectVector[] resultsVectors=Search.getSearchResultVectors(flagConfig);  Clusters clusters=kMeansCluster(resultsVectors,flagConfig);  for (int i=0; i < flagConfig.numclusters(); ++i) {    System.out.println("Cluster " + i);    for (int j=0; j < clusters.clusterMappings.length; ++j) {      if (clusters.clusterMappings[j] == i) {        System.out.print(resultsVectors[j].getObject() + " ");      }    }    System.out.println();  }  writeCentroidsToFile(clusters,flagConfig);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static XmlOrderedResult childElementDiffers(String name,int originalSize,int newSize){  return new XmlOrderedResult(false,String.format("The xml element <%s> with %s child elements should be placed before element <%s> with %s child elements",name,newSize,name,originalSize));}  }
class C{  public void addNotification(@NotNull Notification notification){  NotificationItem item=new NotificationItem(resources,notification,delegate,panel);  notificationWidget.add(notification);}  }
class C{  Object invoke(Env env,Value[] values){  Clock.stop();  try {    Trace.trace(Item.INTRINSIC,"Executing " + toString());    try {      Object result=method.invoke(null,marshall(env,values));      return result;    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  finally {    Clock.start();  }}  }
class C{  public IndTestFisherZ(TetradMatrix data,List<Node> variables,double alpha){  this.dataSet=ColtDataSet.makeContinuousData(variables,data);  this.covMatrix=new CovarianceMatrix(dataSet);  this.variables=Collections.unmodifiableList(variables);  this.indexMap=indexMap(variables);  this.nameMap=nameMap(variables);  setAlpha(alpha);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STRING_EXPR___NAME_1:    return getName_1();case UmplePackage.STRING_EXPR___EQUALITY_OP_1:  return getEqualityOp_1();case UmplePackage.STRING_EXPR___STRING_LIT_1:return getStringLit_1();case UmplePackage.STRING_EXPR___INDEX_1:return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addLine(String line){  int index=line.indexOf(":");  if (index == -1) {    addLenient("",line);  } else {    addLenient(line.substring(0,index),line.substring(index + 1));  }}  }
class C{  private void putLabelElementHandlerIntoTheMap(){  for (  Element el : labelElementHandler.get()) {    Element tmpElement=el.parent();    while (tmpElement != null && StringUtils.isNotBlank(tmpElement.tagName())) {      if (tmpElement.tagName().equals(FORM_ELEMENT)) {        if (labelFormMap.containsKey(tmpElement)) {          Elements els=el.select(FORM_ELEMENT_WITH_ID_CSS_LIKE_QUERY);          if (!els.isEmpty()) {            labelFormMap.get(tmpElement).add(el);          }        } else {          Elements els=el.select(FORM_ELEMENT_WITH_ID_CSS_LIKE_QUERY);          if (!els.isEmpty()) {            ElementHandler<Element> labelElement=new ElementHandlerImpl();            labelElement.add(el);            labelFormMap.put(tmpElement,labelElement);          }        }        break;      }      tmpElement=tmpElement.parent();    }  }}  }
class C{  public ConcatExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  public static double distance(Vector3 a,Vector3 b){  double xzDist=Vector2.distance(a.toVector2(),b.toVector2());  return Math.sqrt(Math.pow(xzDist,2) + Math.pow(Math.abs(Vector3.subtract(a,b).getY()),2));}  }
class C{  public synchronized void unsubscribeReceiver(String clientId){  ReceiverAsync receiverAsync=receiverMap.get(clientId);  if (receiverAsync != null) {    receiverAsync.unsubscribe();  }  receiverMap.remove(clientId);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  boolean isEverything(ExpressionVisitor visitor){  if (visitor.getType() == ExpressionVisitor.GET_DEPENDENCIES) {    if (sequence != null) {      visitor.getDependencies().add(sequence);    }  }  if (defaultExpression != null && !defaultExpression.isEverything(visitor)) {    return false;  }  return !(checkConstraint != null && !checkConstraint.isEverything(visitor));}  }
class C{  private static void mapOperatorPair(final String invariantOperator,final String localizedOperator){  invariantToLocalizedMap.put(invariantOperator,localizedOperator);  localizedToInvariantMap.put(localizedOperator,invariantOperator);}  }
class C{  protected void clearParameters(){  Object nullObject=null;  fAmtFrom.setValue(nullObject);  fAmtTo.setValue(nullObject);  fBankAccount_ID.setValue(null);  fCash_ID.setValue(null);  fCashBook_ID.setValue(null);  fCharge_ID.setValue(null);  fDateFrom.setValue(null);  fDateTo.setValue(null);  fInvoice_ID.setValue(null);  fPayment_ID.setValue(null);  cbAbsolute.setSelected(false);}  }
class C{  public static Id fromRefPart(String name){  Integer id=RefNames.parseShardedRefPart(name);  return id != null ? new Account.Id(id) : null;}  }
class C{  public static Box computeBoundingBox(BufferWrapper coordinates,int stride){  if (coordinates == null) {    String msg=Logging.getMessage("nullValue.CoordinatesAreNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (stride < 3) {    String msg=Logging.getMessage("generic.StrideIsInvalid",stride);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4[] axes=WWMath.computePrincipalAxes(coordinates,stride);  if (axes == null) {    String msg=Logging.getMessage("generic.ListIsEmpty");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 r=axes[0];  Vec4 s=axes[1];  Vec4 t=axes[2];  double minDotR=Double.MAX_VALUE;  double maxDotR=-minDotR;  double minDotS=Double.MAX_VALUE;  double maxDotS=-minDotS;  double minDotT=Double.MAX_VALUE;  double maxDotT=-minDotT;  for (int i=0; i <= coordinates.length() - stride; i+=stride) {    double x=coordinates.getDouble(i);    double y=coordinates.getDouble(i + 1);    double z=coordinates.getDouble(i + 2);    double pdr=x * r.x + y * r.y + z * r.z;    if (pdr < minDotR)     minDotR=pdr;    if (pdr > maxDotR)     maxDotR=pdr;    double pds=x * s.x + y * s.y + z * s.z;    if (pds < minDotS)     minDotS=pds;    if (pds > maxDotS)     maxDotS=pds;    double pdt=x * t.x + y * t.y + z * t.z;    if (pdt < minDotT)     minDotT=pdt;    if (pdt > maxDotT)     maxDotT=pdt;  }  if (maxDotR == minDotR)   maxDotR=minDotR + 1;  if (maxDotS == minDotS)   maxDotS=minDotS + 1;  if (maxDotT == minDotT)   maxDotT=minDotT + 1;  return new Box(axes,minDotR,maxDotR,minDotS,maxDotS,minDotT,maxDotT);}  }
class C{  private final static TypeDecl mostSpecificSuperClass(final TypeDecl t){  HashSet superTypes=new HashSet();  addSuperClasses(t,superTypes);  if (superTypes.isEmpty())   return t.typeObject();  ArrayList result=new ArrayList(superTypes.size());  result.addAll(superTypes);  greatestLowerBounds(result);  if (result.size() == 1)   return (TypeDecl)result.get(0); else   return (TypeDecl)t.typeObject();}  }
class C{  public static final String insertImage(ContentResolver cr,String imagePath,String name,String description) throws FileNotFoundException {  FileInputStream stream=new FileInputStream(imagePath);  try {    Bitmap bm=BitmapFactory.decodeFile(imagePath);    String ret=insertImage(cr,bm,name,description);    bm.recycle();    return ret;  }  finally {    try {      stream.close();    } catch (    IOException e) {    }  }}  }
class C{  public static void downto(Number self,Number to,@ClosureParams(FirstParam.class) Closure closure){  int self1=self.intValue();  int to1=to.intValue();  if (self1 >= to1) {    for (int i=self1; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.969 -0400",hash_original_method="4D2E2633ABA84B28EEB30E119DD80274",hash_generated_method="3E1B338E3F128A996A955FE5E49BBD4A") private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public ColorAnimator(String group,String field){  super(group);  setColorFields(new String[]{field});}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:59.576 -0500",hash_original_method="2FD14CE5C15BA6F91A4A0B21760850CD",hash_generated_method="D25CF56895B420B545C3566DEEFBA18C") private static String makeEmptyNull(String s){  if (s != null && s.length() == 0)   return null;  return s;}  }
class C{  public boolean hasResourceId(){  return hasExtension(ResourceId.class);}  }
class C{  private static long parseMehd(ParsableByteArray mehd){  mehd.setPosition(Atom.HEADER_SIZE);  int fullAtom=mehd.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  return version == 0 ? mehd.readUnsignedInt() : mehd.readUnsignedLongToLong();}  }
class C{  public String composeName(String name,String prefix) throws NamingException {  return name;}  }
class C{  private String createHeader(int AD_Table_ID,StringBuffer sb,StringBuffer mandatory,String packageName){  String tableName="";  int accessLevel=0;  String sql="SELECT TableName, AccessLevel FROM AD_Table WHERE AD_Table_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      tableName=rs.getString(1);      accessLevel=rs.getInt(2);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (tableName == null)   throw new RuntimeException("TableName not found for ID=" + AD_Table_ID);  String accessLevelInfo=accessLevel + " ";  if (accessLevel >= 4)   accessLevelInfo+="- System ";  if (accessLevel == 2 || accessLevel == 3 || accessLevel == 6 || accessLevel == 7)   accessLevelInfo+="- Client ";  if (accessLevel == 1 || accessLevel == 3 || accessLevel == 5 || accessLevel == 7)   accessLevelInfo+="- Org ";  String keyColumn=tableName + "_ID";  String className="X_" + tableName;  StringBuffer start=new StringBuffer().append(ModelInterfaceGenerator.COPY).append("/** Generated Model - DO NOT CHANGE */").append(NL).append("package " + packageName + ";").append(NL).append(NL);  addImportClass(java.util.Properties.class);  addImportClass(java.sql.ResultSet.class);  if (!packageName.equals("org.compiere.model"))   addImportClass("org.compiere.model.*");  createImports(start);  start.append("/** Generated Model for ").append(tableName).append(NL).append(" *  @author Adempiere (generated) ").append(NL).append(" *  @version ").append(Adempiere.MAIN_VERSION).append(" - $Id$ */").append(NL).append("public class ").append(className).append(" extends PO").append(" implements I_").append(tableName).append(", I_Persistent ").append(NL).append("{").append(NL).append(NL).append("\t/**").append(NL).append("\t *").append(NL).append("\t */").append(NL).append("\tprivate static final long serialVersionUID = ").append(String.format("%1$tY%1$tm%1$td",new Timestamp(System.currentTimeMillis()))).append("L;").append(NL).append(NL).append("    /** Standard Constructor */").append(NL).append("    public ").append(className).append(" (Properties ctx, int ").append(keyColumn).append(", String trxName)").append(NL).append("    {").append(NL).append("      super (ctx, ").append(keyColumn).append(", trxName);").append(NL).append("      /** if (").append(keyColumn).append(" == 0)").append(NL).append("        {").append(NL).append(mandatory).append("        } */").append(NL).append("    }").append(NL).append(NL).append("    /** Load Constructor */").append(NL).append("    public ").append(className).append(" (Properties ctx, ResultSet rs, String trxName)").append(NL).append("    {").append(NL).append("      super (ctx, rs, trxName);").append(NL).append("    }").append(NL).append(NL).append("    /** AccessLevel").append(NL).append("      * @return ").append(accessLevelInfo).append(NL).append("      */").append(NL).append("    protected int get_AccessLevel()").append(NL).append("    {").append(NL).append("      return accessLevel.intValue();").append(NL).append("    }").append(NL).append(NL).append("    /** Load Meta Data */").append(NL).append("    protected POInfo initPO (Properties ctx)").append(NL).append("    {").append(NL).append("      POInfo poi = POInfo.getPOInfo (ctx, Table_ID, get_TrxName());").append(NL).append("      return poi;").append(NL).append("    }").append(NL).append(NL).append("    public String toString()").append(NL).append("    {").append(NL).append("      StringBuffer sb = new StringBuffer (\"").append(className).append("[\")").append(NL).append("        .append(get_ID()).append(\"]\");").append(NL).append("      return sb.toString();").append(NL).append("    }").append(NL);  StringBuffer end=new StringBuffer("}");  sb.insert(0,start);  sb.append(end);  return className;}  }
class C{  private int alphaComparator(String s1,String s2){  if (s1 == null) {    return -1;  } else   if (s2 == null) {    return 1;  }  return String.CASE_INSENSITIVE_ORDER.compare(s1,s2);}  }
class C{  public boolean useProxy(){  if (StringUtils.isNotBlank(getProxyHost())) {    return true;  }  return false;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public static void writeWithLocale(File emlFile,Resource resource,Locale locale){  Locale currentLocale=Locale.getDefault();  try {synchronized (currentLocale) {      Locale.setDefault(locale);      EmlWriter.writeEmlFile(emlFile,resource.getEml());      Locale.setDefault(currentLocale);    }  } catch (  IOException e) {    LOG.error(e);    throw new InvalidConfigException(TYPE.CONFIG_WRITE,"IO exception when writing eml for " + resource);  }catch (  TemplateException e) {    LOG.error("EML template exception",e);    throw new InvalidConfigException(TYPE.EML,"EML template exception when writing eml for " + resource + ": "+ e.getMessage());  } finally {    Locale.setDefault(currentLocale);  }}  }
class C{  public String updateFile(String fileId,String title,MediaType mimeType,byte[] bytes) throws IOException {  File file=new File().setTitle(title);  return drive.files().update(fileId,file,new ByteArrayContent(mimeType.toString(),bytes)).execute().getId();}  }
class C{  public void appendCloseSpanTag(){  text.append("</span>");}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public void block(Address destination){  if (config.isUseNetworkEmulator()) {    networkEmulatorHandler.block(destination);    LOGGER.info("Block network from {} to {}",address,destination);  } else {    LOGGER.warn("Noop on 'block({})' since network emulator is disabled",destination);  }}  }
class C{  public void close(){  try {    mMimeType=null;    if (null != mContentStream) {      mContentStream.close();      mContentStream=null;    }  } catch (  Exception e) {    Log.e(LOG_TAG,"Resource.close failed " + e.getLocalizedMessage());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean backtrackForSwapWithPrevious(Featurizable<IString,String> f){  if (f.prior == null)   return false;  if (fStart(f.prior) < fStart(f))   return false;  int indexRightCurrentPhrase=fEnd(f) + 1;  int indexLeftPreviousPhrase=fStart(f.prior) - 1;  if (indexLeftPreviousPhrase + 1 == indexRightCurrentPhrase)   return true;  CoverageSet fCoverage=f.derivation.sourceCoverage;  for (int i=indexRightCurrentPhrase; i <= indexLeftPreviousPhrase; ++i) {    if (!fCoverage.get(i))     return false;  }  Featurizable<IString,String> tmp_f=f.prior;  tmpCoverage.clear();  boolean foundAdjPhrase=false;  while (true) {    if (fStart(tmp_f) == indexRightCurrentPhrase)     foundAdjPhrase=true;    int fStart=fStart(tmp_f);    int fEnd=fEnd(tmp_f);    tmpCoverage.set(fStart,fEnd + 1);    if (foundAdjPhrase && contiguous(tmpCoverage))     break;    if (fEnd < indexRightCurrentPhrase)     return false;    tmp_f=tmp_f.prior;    if (tmp_f == null)     return false;  }  return true;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("Status ");  if (severity == OK) {    buf.append("OK");  } else   if (severity == ERROR) {    buf.append("ERROR");  } else   if (severity == WARNING) {    buf.append("WARNING");  } else   if (severity == INFO) {    buf.append("INFO");  } else   if (severity == CANCEL) {    buf.append("CANCEL");  } else {    buf.append("severity=");    buf.append(severity);  }  buf.append(": ");  buf.append(pluginId);  buf.append(" code=");  buf.append(code);  buf.append(' ');  buf.append(message);  buf.append(' ');  buf.append(exception);  return buf.toString();}  }
class C{  private void parseStale(String value){  if (value != null) {    if (value.equalsIgnoreCase("true")) {      mStale=true;    }  }}  }
class C{  public ViolationMessage(int lineNumber,int columnNumber,Severity severity,String violationMessage){  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;  this.severity=severity;  this.violationMessage=Messages.TAILOR + violationMessage;}  }
class C{  public void test_Constructor01(){  try {    new KeyStoreBuilderParameters((KeyStore.Builder)null);    fail();  } catch (  NullPointerException expected) {  }  KeyStore.ProtectionParameter pp=new ProtectionParameterImpl();  KeyStore.Builder bld=KeyStore.Builder.newInstance("testType",null,pp);  assertNotNull("Null object KeyStore.Builder",bld);  KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(bld);  assertNotNull(ksp.getParameters());}  }
class C{  public int totalSize(){  return size() + noOfKthNearest();}  }
class C{  public static boolean isSimulation(){  return ToastBootstrap.isSimulation;}  }
class C{  public void recalculatePath(){  if (targetVector != null) {    deltaPathX=targetVector.xPos - startPos.xPos;    deltaPathY=targetVector.yPos - startPos.yPos;    deltaPathZ=targetVector.zPos - startPos.zPos;    flatDistance=Vector2.distance(new Vector2(startPos),new Vector2(targetVector));    maxHeight=160 + (int)(flatDistance * 3);    missileFlightTime=(float)Math.max(100,2 * flatDistance) - airborneTicks;    acceleration=(float)maxHeight * 2 / (missileFlightTime * missileFlightTime);  }}  }
class C{  public boolean isDropShip(){  Object oo=get_Value(COLUMNNAME_IsDropShip);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String remove(){  if (getTypePriceModel().equals(type)) {    removeFromPriceModel();  } else   if (getTypePricedEvent().equals(type)) {    removeFromEvents();  } else   if (getTypePricedParameter().equals(type)) {    removeFromParameters();  }  return OUTCOME_SUCCESS;}  }
class C{  public CActionGraphSettings(final JFrame parent,final ZyGraph graph){  super("Graph Settings");  m_parent=Preconditions.checkNotNull(parent,"IE01258: Parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01259: Graph argument can not be null");}  }
class C{  public void testSHA384(){  Digest oldDigest=new SHA384Digest();  Digest newDigest=new OpenSSLDigest.SHA384();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public static String createHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {  return createHash(password.toCharArray());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static UnicodeBlock guessUnicodeBlock(final Collection<String> words){  boolean hasExtendedLatin=false;  boolean hasHyperextendedLatin=false;  final Counter<UnicodeBlock> counter=new Counter<UnicodeBlock>();  for (  final String word : words) {    final UnicodeBlock block=getBlock(word);    if (block == UnicodeBlock.LATIN_1_SUPPLEMENT) {      hasExtendedLatin=true;    }    if (block == UnicodeBlock.LATIN_EXTENDED_A) {      hasHyperextendedLatin=true;    }    counter.note(block);  }  final List<UnicodeBlock> mostFrequent=counter.getMostFrequent(1);  if (mostFrequent.size() == 0) {    return null;  }  UnicodeBlock b=mostFrequent.get(0);  if (b == UnicodeBlock.BASIC_LATIN || b == UnicodeBlock.LATIN_1_SUPPLEMENT) {    if (hasHyperextendedLatin) {      return UnicodeBlock.LATIN_EXTENDED_A;    }    if (hasExtendedLatin) {      return UnicodeBlock.LATIN_1_SUPPLEMENT;    }  }  return b;}  }
class C{  public void add(MoneyFlowIndexItem dataItem,boolean notify){  if (!this.isEmpty()) {    MoneyFlowIndexItem item0=(MoneyFlowIndexItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  @SuppressWarnings("unchecked") private void refreshExpGroupMetadataList(boolean forceChildrenCountRefresh,boolean syncGroupPositions){  final ArrayList<GroupMetadata> egml=mExpGroupMetadataList;  int egmlSize=egml.size();  int curFlPos=0;  mTotalExpChildrenCount=0;  if (syncGroupPositions) {    boolean positionsChanged=false;    for (int i=egmlSize - 1; i >= 0; i--) {      GroupMetadata curGm=egml.get(i);      int newGPos=findGroupPosition(curGm.gId,curGm.gPos);      if (newGPos != curGm.gPos) {        if (newGPos == android.widget.AdapterView.INVALID_POSITION) {          egml.remove(i);          egmlSize--;        }        curGm.gPos=newGPos;        if (!positionsChanged)         positionsChanged=true;      }    }    if (positionsChanged) {      Collections.sort(egml);    }  }  int gChildrenCount;  int lastGPos=0;  for (int i=0; i < egmlSize; i++) {    GroupMetadata curGm=egml.get(i);    if ((curGm.lastChildFlPos == GroupMetadata.REFRESH) || forceChildrenCountRefresh) {      gChildrenCount=mExpandableListAdapter.getChildrenCount(curGm.gPos);    } else {      gChildrenCount=curGm.lastChildFlPos - curGm.flPos;    }    mTotalExpChildrenCount+=gChildrenCount;    curFlPos+=(curGm.gPos - lastGPos);    lastGPos=curGm.gPos;    curGm.flPos=curFlPos;    curFlPos+=gChildrenCount;    curGm.lastChildFlPos=curFlPos;  }}  }
class C{  @Override public Long incr(final String key){  checkIsInMultiOrPipeline();  client.incr(key);  return client.getIntegerReply();}  }
class C{  private void showUnregisterDialog(){  AlertDialog.Builder builder=new AlertDialog.Builder(AlreadyRegisteredActivity.this);  builder.setMessage(getResources().getString(R.string.dialog_unregister)).setNegativeButton(getResources().getString(R.string.yes),dialogClickListener).setPositiveButton(getResources().getString(R.string.no),dialogClickListener).show();}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String DEMHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      DEMHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[][] linkRelief=new double[3][(int)maxLinkID + 1];    for (c=0; c <= maxLinkID; c++) {      linkRelief[0][c]=99999999;      linkRelief[1][c]=-99999999;    }    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              z=DEM.getValue(y,x);              if (z < linkRelief[0][(int)currentID]) {                linkRelief[0][(int)currentID]=z;              }              if (z > linkRelief[1][(int)currentID]) {                linkRelief[1][(int)currentID]=z;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (i=1; i <= maxLinkID; i++) {      linkRelief[2][i]=(linkRelief[1][i] - linkRelief[0][i]) / linkLengths[i] * 100;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkRelief[2][(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Slope Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkRelief[2][i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean reattachGridItems(MuninFoo muninFoo){  boolean reparedSome=false;  for (  GridItem item : this.items) {    if (item.isDetached() && !item.getPluginPageUrl().equals("")) {      MuninPlugin plugin=muninFoo.getPlugin(item.getPluginPageUrl());      if (plugin != null) {        item.setDetached(false);        item.setPlugin(plugin);        reparedSome=true;      }    }  }  return reparedSome;}  }
class C{  public FastByteArrayOutputStream(byte[] buffer){  buf=buffer;  bumpLen=DEFAULT_BUMP_SIZE;}  }
class C{  private int updateKWUPINT(int start,int end){  int kwupint=0;  end--;  for (; end >= start; end--) {    kwupint<<=1;    if (keys[end].getLatch() != 0)     kwupint|=1;  }  return (kwupint << start);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  if (inAdd) {    return;  }  if (changes.has("class")) {    clazz=changes.get("class");    fireChange(PROP_CLASS);  }  if (changes.has("name")) {    name=changes.get("name");    fireChange(PROP_NAME);    fireChange(PROP_TITLE);  }  if (changes.has("subclass")) {    subclazz=changes.get("subclass");    fireChange(PROP_CLASS);  }  boolean sizeChange=false;  if (changes.has("width")) {    width=changes.getDouble("width");    sizeChange=true;  }  if (changes.has("height")) {    height=changes.getDouble("height");    sizeChange=true;  }  if (sizeChange) {    fireChange(PROP_SIZE);  }  if (changes.has("title")) {    title=changes.get("title");    fireChange(PROP_TITLE);  }  if (changes.has("state")) {    fireChange(PROP_STATE);  }  if (changes.has("resistance")) {    resistance=changes.getInt("resistance");  }  if (changes.has("visibility")) {    visibility=changes.getInt("visibility");    fireChange(PROP_VISIBILITY);  }  for (  RPSlot slot : changes.slots()) {    for (    ContentChangeListener listener : contentChangeListeners) {      listener.contentAdded(slot);    }  }  processPositioning(object,changes);}  }
class C{  private static double m(double i){  if (i <= 0)   return 0; else   return i / (i + 1) + m(i - 1);}  }
class C{  private PlatformTarget createPlatformCache(IgniteCacheProxy cache){  return new PlatformCache(platformCtx,cache,false,cacheExts);}  }
class C{  private void insertSites(Collection vertices){  Debug.println("Adding sites: " + vertices.size());  for (Iterator i=vertices.iterator(); i.hasNext(); ) {    ConstraintVertex v=(ConstraintVertex)i.next();    insertSite(v);  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,Bundle value){  if (extras == null) {    extras=new Bundle();  }  extras.putBundle(name,value);  return this;}  }
class C{  @Override public void init(PluginInfo info){  final String infomsg="updateRequestProcessorChain \"" + (null != info.name ? info.name : "") + "\""+ (info.isDefault() ? " (default)" : "");  log.info("creating " + infomsg);  List<UpdateRequestProcessorFactory> list=new ArrayList(solrCore.initPlugins(info.getChildren("processor"),UpdateRequestProcessorFactory.class,null));  if (list.isEmpty()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,infomsg + " require at least one processor");  }  int numDistrib=0;  int runIndex=-1;  for (int i=list.size() - 1; 0 <= i; i--) {    UpdateRequestProcessorFactory factory=list.get(i);    if (factory instanceof DistributingUpdateProcessorFactory) {      numDistrib++;    }    if (factory instanceof RunUpdateProcessorFactory) {      runIndex=i;    }  }  if (1 < numDistrib) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,infomsg + " may not contain more then one " + "instance of DistributingUpdateProcessorFactory");  }  if (0 <= runIndex && 0 == numDistrib) {    DistributedUpdateProcessorFactory distrib=new DistributedUpdateProcessorFactory();    distrib.init(new NamedList());    list.add(runIndex,distrib);    log.info("inserting DistributedUpdateProcessorFactory into " + infomsg);  }  chain=list.toArray(new UpdateRequestProcessorFactory[list.size()]);}  }
class C{  public boolean isSupported(int latestAllowedVersion){  return isSupported(new Version(latestAllowedVersion));}  }
class C{  public void decideWhetherToDefrag(boolean emergencyCollection,boolean collectWholeHeap,int collectionAttempt,boolean userTriggeredCollection){  defrag.decideWhetherToDefrag(emergencyCollection,collectWholeHeap,collectionAttempt,userTriggeredCollection,exhaustedReusableSpace);}  }
class C{  public String toString(){  return this.getClass().getSimpleName() + " name=" + name;}  }
class C{  public static void normalize(double[] doubles){  double sum=0;  for (int i=0; i < doubles.length; i++) {    sum+=doubles[i];  }  normalize(doubles,sum);}  }
class C{  public static void run(){  ArrayNewInstanceTransform transformer=new ArrayNewInstanceTransform();  for (  SootClass clz : Scene.v().getClasses()) {    for (    SootMethod meth : clz.getMethods()) {      if (meth.isConcrete()) {        try {          transformer.transform(meth.retrieveActiveBody());        } catch (        Exception ex) {          logger.info("Exception retrieving method body {}",ex);          continue;        }      }    }  }}  }
class C{  public boolean contains(final LocalTime VALUE){  return VALUE.isAfter(getStart()) && VALUE.isBefore(getStop());}  }
class C{  public int writeToShard(int shardNum,ByteBuffer src) throws IOException {  if (shardNum >= 0) {    return writers.get(shardNum).write(src);  }switch (shardNum) {case ALL_SHARDS:    int size=0;  for (  WritableByteChannel writer : writers) {    size+=writer.write(src);  }return size;default :throw new IllegalArgumentException("Illegal shard number: " + shardNum);}}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Notificacion";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("ID",notificacionId);  bdr.addSimpleElement("Fecha",fechaNotificacion.toString());  bdr.addSimpleElement("DEU",deu);  bdr.addSimpleElement("Servicio_Notificaciones",servicioNotificacionesId);  bdr.addSimpleElement("Expediente",expediente);  bdr.addSimpleElement("Descripcion",descripcion);  bdr.addSimpleElement("Hito",hitoId);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T assertInstance(Object object,Class<T> klass){  assertTrue(klass.isInstance(object));  return (T)object;}  }
class C{  protected int partition(int attIdx,int[] index,int l,int r){  double pivot=m_Instances.instance(index[(l + r) / 2]).value(attIdx);  int help;  while (l < r) {    while ((m_Instances.instance(index[l]).value(attIdx) < pivot) && (l < r)) {      l++;    }    while ((m_Instances.instance(index[r]).value(attIdx) > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (m_Instances.instance(index[r]).value(attIdx) > pivot)) {    r--;  }  return r;}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CODE);}  }
class C{  public void doEditToolActivatedSecondary(Vector2f mouseLoc,boolean pressed,Camera camera){  ShortcutManager scm=Lookup.getDefault().lookup(ShortcutManager.class);  if (scm.isActive()) {    scm.getActiveShortcut().setCamera(camera);    scm.getActiveShortcut().actionSecondary(mouseLoc,pressed,rootNode,editorController.getCurrentDataObject());  } else   if (editTool != null) {    editTool.setCamera(camera);    editTool.actionSecondary(mouseLoc,pressed,rootNode,editorController.getCurrentDataObject());  }}  }
class C{  public NicknameEntry createNickname(String username,String nickname) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Creating nickname '" + nickname + "' for user '"+ username+ "'.");  NicknameEntry entry=new NicknameEntry();  Nickname nicknameExtension=new Nickname();  nicknameExtension.setName(nickname);  entry.addExtension(nicknameExtension);  Login login=new Login();  login.setUserName(username);  entry.addExtension(login);  URL insertUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION);  return nicknameService.insert(insertUrl,entry);}  }
class C{  public boolean createJob(String slurmScript,String heronExec,String[] commandArgs,String topologyWorkingDirectory,long containers,String partition){  List<String> slurmCmd=slurmCommand(slurmScript,heronExec,containers,partition);  List<String> transformedArgs=new ArrayList<>();  for (int i=0; i < commandArgs.length; i++) {    String arg=commandArgs[i];    if (arg == null || arg.trim().equals("")) {      transformedArgs.add("\"\"");    } else {      transformedArgs.add(arg);    }  }  slurmCmd.addAll(transformedArgs);  String[] slurmCmdArray=slurmCmd.toArray(new String[0]);  LOG.log(Level.INFO,"Executing job [" + topologyWorkingDirectory + "]:",Arrays.toString(slurmCmdArray));  StringBuilder stdout=new StringBuilder();  StringBuilder stderr=new StringBuilder();  boolean ret=runProcess(topologyWorkingDirectory,slurmCmdArray,stdout,stderr);  LOG.log(Level.FINE,"Stdout for Slurm script: ",stdout);  LOG.log(Level.FINE,"Stderror for Slurm script: ",stderr);  return ret;}  }
class C{  @Override public void sendAddress(){  for (  ControllerInterface listener : controllerListeners) {    if (isAddressSet) {      listener.sendPacketToDevice(buildPacketWithChar('+'));    } else {      listener.sendPacketToDevice(buildPacketWithChar('-'));    }  }}  }
class C{  protected void computeArrowheadGeometry(DrawContext dc,SurfaceTileDrawContext sdc,LatLon begin,LatLon end){  double arrowLength=(this.arrowLength / dc.getGlobe().getRadius()) * (180 / Math.PI);  double pixelSize=sdc.getSector().getDeltaLatDegrees() / sdc.getViewport().getHeight();  if (arrowLength <= pixelSize) {    return;  }  double maxLength=pixelSize * this.maxScreenSize;  if (arrowLength > maxLength) {    arrowLength=maxLength;  }  double segmentLength=LatLon.greatCircleDistance(begin,end).degrees;  if (segmentLength <= arrowLength) {    return;  }  LatLon mid=LatLon.interpolate(this.getPathType(),0.5,begin,end);  if ((this.getPathType() == null || this.getPathType().equals(AVKey.LINEAR)) && LatLon.locationsCrossDateline(begin,end)) {    double datelineOffset=begin.longitude.degrees < 0 ? -360 : 360;    LatLon falseEnd=LatLon.fromDegrees(end.latitude.degrees,end.longitude.degrees + datelineOffset);    mid=LatLon.interpolate(this.getPathType(),0.5,begin,falseEnd);  }  Angle halfArrowLength=Angle.fromDegrees(arrowLength / 2);  LatLon base=LatLon.greatCircleEndPosition(mid,LatLon.greatCircleAzimuth(mid,begin),halfArrowLength);  LatLon tip=LatLon.greatCircleEndPosition(mid,LatLon.greatCircleAzimuth(mid,end),halfArrowLength);  Angle halfBaseLength=Angle.fromDegrees(arrowLength * this.arrowAngle.tanHalfAngle());  Angle azimuth=LatLon.greatCircleAzimuth(base,tip);  LatLon left=LatLon.greatCircleEndPosition(base,azimuth.add(Angle.NEG90),halfBaseLength);  LatLon right=LatLon.greatCircleEndPosition(base,azimuth.subtract(Angle.NEG90),halfBaseLength);  List<List<LatLon>> drawLocations=this.repeatAroundDateline(Arrays.asList(tip,left,right));  LatLon referenceLocation=this.getReferencePosition();  for (  List<LatLon> list : drawLocations) {    int count=2 * list.size();    if (vertexBuffer == null) {      vertexBuffer=Buffers.newDirectFloatBuffer(count);    } else     if (vertexBuffer.remaining() < count) {      vertexBuffer.flip();      FloatBuffer newBuffer=Buffers.newDirectFloatBuffer(vertexBuffer.capacity() + count);      newBuffer.put(vertexBuffer);      vertexBuffer=newBuffer;    }    for (    LatLon location : list) {      vertexBuffer.put((float)(location.longitude.degrees - referenceLocation.longitude.degrees));      vertexBuffer.put((float)(location.latitude.degrees - referenceLocation.latitude.degrees));    }  }}  }
class C{  @Override public void rangeChanged(ColorMap cMap){  Landscape.getInstance().markDirty(DirtyType.RenderState);}  }
class C{  public final boolean clocksActive(){switch (modeNr) {case PLAYER_WHITE:case PLAYER_BLACK:case TWO_PLAYERS:case TWO_COMPUTERS:    return true;default :  return false;}}  }
class C{  public boolean isFontSizeRelative(int i){  return (masks[i] & FONT_SIZE_RELATIVE_MASK) != 0;}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Integer && val instanceof Integer) {          int k=unwrapKey(key);          int v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static strictfp double plus2PI_strict(final double angRad){  if (angRad > -Math.PI) {    return angRad + TWOPI_LO + TWOPI_HI;  } else {    return angRad + TWOPI_HI + TWOPI_LO;  }}  }
class C{  public Transcript(String sessionID,List<Packet> packets){  this.sessionID=sessionID;  this.packets=packets;}  }
class C{  public static Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  Logger.TAG=tag;  return settings;}  }
class C{  public NTRUEncryptionParameters(int N,int q,int df,int dm0,int db,int c,int minCallsR,int minCallsMask,boolean hashSeed,byte[] oid,boolean sparse,boolean fastFp,Digest hashAlg){  this.N=N;  this.q=q;  this.df=df;  this.db=db;  this.dm0=dm0;  this.c=c;  this.minCallsR=minCallsR;  this.minCallsMask=minCallsMask;  this.hashSeed=hashSeed;  this.oid=oid;  this.sparse=sparse;  this.fastFp=fastFp;  this.polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE;  this.hashAlg=hashAlg;  init();}  }
class C{  public TodoConfigurable(){  myPatterns=new ArrayList<TodoPattern>();  myFilters=new ArrayList<TodoFilter>();  myFiltersModel=new FiltersTableModel(myFilters);  myPatternsModel=new PatternsTableModel(myPatterns);}  }
class C{  @SuppressWarnings("unchecked") public final void testValidateWhenNotAllValidatorsSucceed(){  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",false);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=new DisjunctiveValidator<>("foo",validators);  assertTrue(disjunctiveValidator.validate(new Object()));}  }
class C{  public UnrecoverableException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  private void notifyPostResourceFound(HttpMessage message,int depth,String url,String requestBody){  log.debug("Submiting form with POST method and message body with form parameters (normal encoding): " + requestBody);  notifyListenersPostResourceFound(message,depth + 1,url,requestBody);}  }
class C{  @Override public List<T> findAllByNamedQuery(final String namedQuery,final Object... params){  return persistenceService.findAllByNamedQuery(namedQuery,params);}  }
class C{  public static boolean isAllUpperCase(String str){  if (str == null)   return false;  boolean hasLetters=false;  char c;  for (int i=str.length() - 1; i >= 0; i--) {    c=str.charAt(i);    if (Character.isLetter(c)) {      if (!Character.isUpperCase(c))       return false;      hasLetters=true;    }  }  return hasLetters;}  }
class C{  public Window destroyActivity(String id,boolean finish){  LocalActivityRecord r=mActivities.get(id);  Window win=null;  if (r != null) {    win=performDestroy(r,finish);    if (finish) {      mActivities.remove(id);      mActivityArray.remove(r);    }  }  return win;}  }
class C{  @Override public String toString(){  if (filterConfig == null)   return ("TimingFilter()");  StringBuilder sb=new StringBuilder("TimingFilter(");  sb.append(filterConfig);  sb.append(")");  return (sb.toString());}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void testMapperRealm() throws Exception {  KerberosUserNameMapper mapper=create(null,REALM);  assertEquals(IgfsUtils.fixUserName(null) + "@" + REALM,mapper.map(null));  assertEquals("test" + "@" + REALM,mapper.map("test"));}  }
class C{  public void assertEventLogContains(Object event){  if (!mEventLog.contains(event)) {    fail("Expected event not present. Actual events: " + mEventLog);  }}  }
class C{  @Override public synchronized void acceptTrainingSet(TrainingSetEvent e){  TextEvent nt=new TextEvent(e.getSource(),e.getTrainingSet().toString(),e.getTrainingSet().relationName());  acceptText(nt);}  }
class C{  public static char[] deObfuscate(String ePassword){  if (ePassword == null)   return null;  byte[] bytes=null;  try {    bytes=SimpleBase64Encoder.decode(ePassword.substring(xorTag.length()));  } catch (  Exception e) {    return null;  }  for (int i=0; i < bytes.length; i++) {    bytes[i]=(byte)((bytes[i] ^ key[i % key.length]) & 0x00ff);  }  return toChar(bytes);}  }
class C{  public int[] toArray(){  return permutation.clone();}  }
class C{  public PartiallyOrderedSet(){}  }
class C{  public <T,A extends List<T>>Collector<T,A,A> createListCollector(Supplier<A> collectionFactory){  return Lists.toList(collectionFactory);}  }
class C{  public ArrangeWindowsAction(Arrangeable arrangeable,Arrangeable.Arrangement arrangement){  this.arrangeable=arrangeable;  this.arrangement=arrangement;  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  String labelID;switch (arrangement) {case VERTICAL:    labelID=VERTICAL_ID;  break;case HORIZONTAL:labelID=HORIZONTAL_ID;break;case CASCADE:default :labelID=CASCADE_ID;break;}labels.configureAction(this,labelID);}  }
class C{  public boolean addPartiallyOrientedEdge(Node node1,Node node2){  return addEdge(Edges.partiallyOrientedEdge(node1,node2));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean isManagedLibrariesEnabled(){  AppEngineProjectService projectService=AppEngineProjectService.getInstance();  return !projectService.isMavenModule(context.getModule()) && !projectService.isGradleModule(context.getModule());}  }
class C{  public boolean isEmpty(){  return words == null || words.isEmpty();}  }
class C{  public void removeStyleSheet(String name){  stylesheets.remove(name);}  }
class C{  protected void fixupElementNS(Node node) throws SAXException {  String namespaceURI=((Element)node).getNamespaceURI();  String prefix=((Element)node).getPrefix();  String localName=((Element)node).getLocalName();  if (namespaceURI != null) {    prefix=prefix == null ? "" : prefix;    String inScopeNamespaceURI=fNSBinder.getURI(prefix);    if ((inScopeNamespaceURI != null && inScopeNamespaceURI.equals(namespaceURI))) {    } else {      if ((fFeatures & NAMESPACEDECLS) != 0) {        if ("".equals(prefix) || "".equals(namespaceURI)) {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,namespaceURI);        } else {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX + ":" + prefix,namespaceURI);        }      }      fLocalNSBinder.declarePrefix(prefix,namespaceURI);      fNSBinder.declarePrefix(prefix,namespaceURI);    }  } else {    if (localName == null || "".equals(localName)) {      String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{node.getNodeName()});      if (fErrorHandler != null) {        fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));      }    } else {      namespaceURI=fNSBinder.getURI("");      if (namespaceURI != null && namespaceURI.length() > 0) {        ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,"");        fLocalNSBinder.declarePrefix("","");        fNSBinder.declarePrefix("","");      }    }  }}  }
class C{  @SuppressWarnings("regex") public static PatternSyntaxException regexException(String s){  return regexException(s,0);}  }
class C{  public InstantiationException(){}  }
class C{  public DrawerBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  if (!translucentStatusBar) {    this.mTranslucentStatusBarProgrammatically=false;  }  return this;}  }
class C{  private static String makeOptionString(ASEvaluation ASEvaluator,ASSearch searchMethod) throws Exception {  StringBuffer optionsText=new StringBuffer("");  optionsText.append("\n\nGeneral options:\n\n");  optionsText.append("-h\n\tdisplay this help\n");  optionsText.append("-i <name of input file>\n");  optionsText.append("\tSets training file.\n");  optionsText.append("-c <class index>\n");  optionsText.append("\tSets the class index for supervised attribute\n");  optionsText.append("\tselection. Default=last column.\n");  optionsText.append("-s <class name>\n");  optionsText.append("\tSets search method for subset evaluators.\n");  optionsText.append("-x <number of folds>\n");  optionsText.append("\tPerform a cross validation.\n");  optionsText.append("-n <random number seed>\n");  optionsText.append("\tUse in conjunction with -x.\n");  if (ASEvaluator instanceof OptionHandler) {    optionsText.append("\nOptions specific to " + ASEvaluator.getClass().getName() + ":\n\n");    Enumeration<Option> enu=((OptionHandler)ASEvaluator).listOptions();    while (enu.hasMoreElements()) {      Option option=enu.nextElement();      optionsText.append(option.synopsis() + '\n');      optionsText.append(option.description() + "\n");    }  }  if (searchMethod != null) {    if (searchMethod instanceof OptionHandler) {      optionsText.append("\nOptions specific to " + searchMethod.getClass().getName() + ":\n\n");      Enumeration<Option> enu=((OptionHandler)searchMethod).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        optionsText.append(option.synopsis() + '\n');        optionsText.append(option.description() + "\n");      }    }  } else {    if (ASEvaluator instanceof SubsetEvaluator) {      System.out.println("No search method given.");    }  }  return optionsText.toString();}  }
class C{  public void start(){  if (isStarted) {    log.info("Coordinator stream consumer already started");    return;  }  log.info("Starting coordinator stream system consumer.");  systemConsumer.start();  isStarted=true;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender replySender,boolean containsKeyValue){  Assert.assertTrue(recipient != null,"ContainsKeyValueReplyMessage NULL reply message");  RemoteContainsKeyValueReplyMessage m=new RemoteContainsKeyValueReplyMessage(processorId,containsKeyValue);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  private void drawOnewayArrows(Canvas canvas,float[] linePoints,boolean reverse,Paint paint){  int ptr=0;  while (ptr < linePoints.length) {    canvas.save();    float x1=linePoints[ptr++];    float y1=linePoints[ptr++];    float x2=linePoints[ptr++];    float y2=linePoints[ptr++];    float x=(x1 + x2) / 2;    float y=(y1 + y2) / 2;    canvas.translate(x,y);    float angle=(float)(Math.atan2(y2 - y1,x2 - x1) * 180 / Math.PI);    canvas.rotate(reverse ? angle - 180 : angle);    canvas.drawPath(DataStyle.WAY_DIRECTION_PATH,paint);    canvas.restore();  }}  }
class C{  static BOSHClientConnEvent createConnectionClosedEvent(final BOSHClient source){  return new BOSHClientConnEvent(source,false,null,null);}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public boolean isFilterEverything(){  return !(this.isFilterIQ() || this.isFilterMessage() || this.isFilterPresence_in()|| this.isFilterPresence_out());}  }
class C{  public LegacyField(String name,LegacyFieldType type){  super(name,type);}  }
class C{  @Deprecated public void awaitTerminated(){  try {    executor.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public <T>void addToRequestQueue(Request<T> req){  req.setTag(TAG);  getRequestQueue().add(req);}  }
class C{  @Override public String modelName(){  return "org.apache.zest.library.alarm.model.extended";}  }
class C{  public Object intern(Object keyArg){  boolean nullKey=false;  if (keyArg == null) {    nullKey=true;    keyArg=UniqueTag.NULL_VALUE;  }  int index=ensureIndex(keyArg);  values[index]=0;  return (nullKey) ? null : keys[index];}  }
class C{  private int[] compact(int[] arr,int len){  assert arr != null;  assert U.isNonDecreasingArray(arr,len);  if (arr.length <= 1)   return U.copyIfExceeded(arr,len);  int newLen=1;  for (int i=1; i < len; i++) {    if (arr[i] != arr[newLen - 1])     arr[newLen++]=arr[i];  }  return U.copyIfExceeded(arr,len);}  }
class C{  public boolean isInfiniteLoop(EntityLivingBase mob,Entity entity){  if ((mob == infCheckA && entity == infCheckB) || (mob == infCheckB && entity == infCheckA)) {    return true;  }  infCheckA=mob;  infCheckB=entity;  return false;}  }
class C{  public org.codehaus.cargo.container.Container createContainer(Configuration configuration,Logger logger,CargoProject project,ArtifactFactory artifactFactory,ArtifactResolver artifactResolver,ArtifactRepository localRepository,List<ArtifactRepository> repositories,Settings settings) throws MojoExecutionException {  ContainerFactory factory=new DefaultContainerFactory();  if (getImplementation() != null) {    try {      Class containerClass=Class.forName(getImplementation(),true,this.getClass().getClassLoader());      factory.registerContainer(getContainerId(),getType(),containerClass);    } catch (    ClassNotFoundException cnfe) {      throw new MojoExecutionException("Custom container implementation [" + getImplementation() + "] cannot be loaded",cnfe);    }  }  org.codehaus.cargo.container.Container container=factory.createContainer(getContainerId(),getType(),configuration);  container.setLogger(logger);  if (container.getType().isLocal()) {    setupTimeout((LocalContainer)container,project);    if (container.getType() == ContainerType.EMBEDDED) {      setupEmbeddedExtraClasspath((EmbeddedLocalContainer)container,project);      setupEmbeddedSystemProperties((EmbeddedLocalContainer)container);      ((EmbeddedLocalContainer)container).setClassLoader(project.getEmbeddedClassLoader());      Thread.currentThread().setContextClassLoader(project.getEmbeddedClassLoader());    } else     if (container.getType() == ContainerType.INSTALLED) {      Proxy proxy=null;      if (settings != null) {        proxy=settings.getActiveProxy();      }      setupHome((InstalledLocalContainer)container,project,artifactFactory,artifactResolver,localRepository,repositories,proxy);      setupOutput((InstalledLocalContainer)container,project);      setupExtraClasspath((InstalledLocalContainer)container,project);      setupSystemProperties((InstalledLocalContainer)container);      setupSharedClasspath((InstalledLocalContainer)container,project);    }  }  return container;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  protected PresenceImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:00.741 -0500",hash_original_method="23F9E5F6A6B9FC183E94A65D97880068",hash_generated_method="260BB15ED7C570368B6A69B586403BAC") public final Key translateKey(Key key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasSynchronization(){  return hasSynchronization;}  }
class C{  private void receiveEntityNovaNetworkModeChange(Packet c){  try {    int entityId=c.getIntValue(0);    String networkID=c.getObject(1).toString();    Entity e=game.getEntity(entityId);    if (e != null) {      e.setNewRoundNovaNetworkString(networkID);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public boolean equals(Object obj){  return (obj instanceof CandidatePrioritizer);}  }
class C{  public T caseAnonymous_inlineStateMachine_1_(Anonymous_inlineStateMachine_1_ object){  return null;}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public boolean isCycleRight(){  return cycleRight;}  }
class C{  protected TypeArgumentImpl(){  super();}  }
class C{  private boolean scanResultsEqual(ScanResult a,ScanResult b){  if (a == null || b == null) {    return a == b;  } else {    boolean sameBSSID=(a.BSSID == null ? b.BSSID == null : a.BSSID.equals(b.BSSID));    boolean sameSSID=(a.SSID == null ? b.SSID == null : a.SSID.equals(b.SSID));    boolean sameCapabilities=(a.capabilities == null ? b.capabilities == null : a.capabilities.equals(b.capabilities));    boolean sameFrequency=(a.frequency == b.frequency);    boolean sameTimestamp=(a.timestamp == b.timestamp);    boolean sameLevel=(a.level == b.level);    return sameBSSID && sameSSID && sameCapabilities&& sameFrequency&& sameLevel&& sameTimestamp;  }}  }
class C{  protected void createAggregateTargetTable(ManagedClass managedClass,Attribute managedAttribute,LinkedList<Entity> intrinsicEntity,LinkedList<Attribute> intrinsicAttribute,boolean isInherited,AggregateCollectionMapping mapping){  TableDefinition targetTable=getTableDefFromDBTable(managedClass,managedAttribute,intrinsicEntity,mapping.getReferenceDescriptor().getDefaultTable());  addFieldsForMappedKeyMapContainerPolicy(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,isInherited,mapping.getContainerPolicy(),targetTable);  Iterator aggregateFieldIterator=mapping.getReferenceDescriptor().getFields().iterator();  while (aggregateFieldIterator.hasNext()) {    DatabaseField dbField=(DatabaseField)aggregateFieldIterator.next();    LinkedList<Attribute> intrinsicAttribute_Local=new LinkedList<>(intrinsicAttribute);    Attribute managedAttribute_Local=managedAttribute;    if (managedAttribute instanceof MapKeyHandler && ((MapKeyHandler)managedAttribute).getMapKeyEmbeddable() != null) {      managedAttribute_Local=getManagedAttribute(mapping.getReferenceDescriptor(),dbField,intrinsicAttribute_Local);    } else     if (managedAttribute instanceof ElementCollection && ((ElementCollection)managedAttribute).getConnectedClass() != null) {      managedAttribute_Local=getManagedAttribute(mapping.getReferenceDescriptor(),dbField,intrinsicAttribute_Local);    }    FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute_Local,managedAttribute_Local,false,false,false,false,false,false,false,dbField);    if (!targetTable.getFields().contains(fieldDef)) {      targetTable.addField(fieldDef);    }  }  List<String> fkFieldNames=new ArrayList();  List<String> targetFieldNames=new ArrayList();  List<DatabaseField> fkFields=mapping.getTargetForeignKeyFields();  List<DatabaseField> targetFields=mapping.getSourceKeyFields();  DatabaseField targetField=null;  for (int index=0; index < fkFields.size(); index++) {    DatabaseField fkField=fkFields.get(index);    targetField=targetFields.get(index);    fkFieldNames.add(fkField.getNameDelimited(databasePlatform));    targetFieldNames.add(targetField.getNameDelimited(databasePlatform));    fkField=resolveDatabaseField(fkField,targetField);    FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,false,true,false,false,false,false,false,fkField);    if (!targetTable.getFields().contains(fieldDef)) {      targetTable.addField(fieldDef);    }  }  DatabaseTable sourceDatabaseTable=targetField.getTable();  TableDefinition sourceTable=getTableDefFromDBTable(managedClass,intrinsicEntity,sourceDatabaseTable);  if (mapping.getListOrderField() != null) {    FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,false,false,false,false,false,false,false,mapping.getListOrderField());    TableDefinition table=getTableDefFromDBTable(mapping.getListOrderField().getTable());    if (!table.getFields().contains(fieldDef)) {      table.addField(fieldDef);    }  }  if (mapping.getDescriptor().hasTablePerClassPolicy()) {    return;  }  addForeignKeyConstraint(targetTable,sourceTable,fkFieldNames,targetFieldNames,mapping.isCascadeOnDeleteSetOnDatabase());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public OMGeometryList(int initialCapacity){  super(initialCapacity);}  }
class C{  public void updateCoordinatorWithLicenseInfo(LicenseInfoExt licenseInfo) throws CoordinatorClientException {}  }
class C{  public SearchRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String q){  super(requestUrl,client,options,q);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static boolean castToBoolean(Object object){  if (object == null) {    return false;  }  if (object.getClass() == Boolean.class) {    return ((Boolean)object).booleanValue();  }  return (Boolean)InvokerHelper.invokeMethod(object,"asBoolean",InvokerHelper.EMPTY_ARGS);}  }
class C{  private List<Recommendation> scheduleStorageForDistributedVPLEXVolume(VirtualArray srcVarray,Set<URI> requestedVPlexSystems,URI srcStorageSystem,VirtualPool srcVpool,VirtualArray haVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse srcVpoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){  _log.info("Executing VPlex high availability placement strategy for Distributed VPLEX Volumes.");  List<Recommendation> recommendations=new ArrayList<Recommendation>();  if (srcStorageSystem != null) {    StorageSystem sourceStorageSystem=_dbClient.queryObject(StorageSystem.class,srcStorageSystem);    capabilities.put(VirtualPoolCapabilityValuesWrapper.SOURCE_STORAGE_SYSTEM,sourceStorageSystem);  }  Scheduler nextScheduler=_placementManager.getNextScheduler(SCHEDULER_NAME,srcVpool,srcVpoolUse);  _log.info(String.format("Calling next scheduler: %s",nextScheduler.getClass().getSimpleName()));  List<Recommendation> baseRecommendations=nextScheduler.getRecommendationsForVpool(srcVarray,project,srcVpool,srcVpoolUse,capabilities,currentRecommendations);  _log.info(String.format("Received %d recommendations from %s",baseRecommendations.size(),nextScheduler.getClass().getSimpleName()));  if (baseRecommendations.isEmpty()) {    throw BadRequestException.badRequests.noVplexLocalRecommendationFromSubScheduler(nextScheduler.getClass().getSimpleName(),srcVpool.getLabel(),srcVarray.getLabel());  }  _log.info(String.format("Received %d recommendations from %s",baseRecommendations.size(),nextScheduler.getClass().getSimpleName()));  List<StoragePool> allMatchingPoolsForSrcVarray=_placementManager.getStoragePoolsFromRecommendations(baseRecommendations);  _log.info("Found {} matching pools for source varray",allMatchingPoolsForSrcVarray.size());  URI cgURI=capabilities.getBlockConsistencyGroup();  BlockConsistencyGroup cg=(cgURI == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,cgURI));  Map<String,List<StoragePool>> vplexPoolMapForSrcVarray=getVPlexConnectedMatchingPools(srcVarray,requestedVPlexSystems,capabilities,allMatchingPoolsForSrcVarray);  if (vplexPoolMapForSrcVarray.isEmpty()) {    _log.info("No matching pools on storage systems connected to a VPlex");    return recommendations;  }  _log.info("Getting all matching pools for HA varray {}",haVarray.getId());  URI haStorageSystem=null;  VirtualPoolCapabilityValuesWrapper haCapabilities=new VirtualPoolCapabilityValuesWrapper(capabilities);  haCapabilities.put(VirtualPoolCapabilityValuesWrapper.PERSONALITY,null);  haCapabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,null);  Map<String,Object> attributeMap=new HashMap<String,Object>();  List<StoragePool> allMatchingPoolsForHaVarray=getMatchingPools(haVarray,haStorageSystem,haVpool,haCapabilities,attributeMap);  if (allMatchingPoolsForHaVarray.isEmpty()) {    StringBuffer errorMessage=new StringBuffer();    if (attributeMap.get(AttributeMatcher.ERROR_MESSAGE) != null) {      errorMessage=(StringBuffer)attributeMap.get(AttributeMatcher.ERROR_MESSAGE);    }    throw BadRequestException.badRequests.noMatchingHighAvailabilityStoragePools(haVpool.getLabel(),haVarray.getLabel(),errorMessage.toString());  }  _log.info("Found {} matching pools for HA varray",allMatchingPoolsForHaVarray.size());  Map<String,List<StoragePool>> vplexPoolMapForHaVarray=sortPoolsByVPlexStorageSystem(allMatchingPoolsForHaVarray,haVarray.getId().toString());  if (vplexPoolMapForHaVarray.isEmpty()) {    _log.info("No matching pools on storage systems connected to a VPlex");    return recommendations;  }  Set<String> vplexStorageSystemIds=vplexPoolMapForSrcVarray.keySet();  _log.info("{} VPlex storage systems have matching pools",vplexStorageSystemIds.size());  Map<String,List<String>> vplexHaVarrayMap=ConnectivityUtil.getVPlexVarrays(_dbClient,vplexStorageSystemIds,srcVarray.getId());  Iterator<String> vplexSystemIdsIter=vplexStorageSystemIds.iterator();  while ((vplexSystemIdsIter.hasNext()) && (recommendations.isEmpty())) {    String vplexStorageSystemId=vplexSystemIdsIter.next();    _log.info("Attempting placement on VPlex {}",vplexStorageSystemId);    List<String> vplexHaVarrays=vplexHaVarrayMap.get(vplexStorageSystemId);    if (!vplexHaVarrays.contains(haVarray.getId().toString())) {      continue;    }    if (!vplexPoolMapForHaVarray.containsKey(vplexStorageSystemId)) {      continue;    }    List<Recommendation> recommendationsForSrcVarray=new ArrayList<Recommendation>();    recommendationsForSrcVarray.addAll(createVPlexRecommendations(baseRecommendations,vplexStorageSystemId,srcVarray,srcVpool));    if (recommendationsForSrcVarray.isEmpty()) {      _log.info("Matching pools for source varray insufficient for placement");      continue;    }    Set<URI> recommendedSrcSystems=new HashSet<URI>();    for (    Recommendation recommendation : recommendationsForSrcVarray) {      recommendedSrcSystems.add(recommendation.getSourceStorageSystem());    }    boolean haPoolsLimitedBySrcSelections=false;    List<StoragePool> vplexPoolsForHaVarray=new ArrayList<StoragePool>(vplexPoolMapForHaVarray.get(vplexStorageSystemId));    Iterator<StoragePool> vplexPoolsForHaVarrayIter=vplexPoolsForHaVarray.iterator();    while (vplexPoolsForHaVarrayIter.hasNext()) {      StoragePool haPool=vplexPoolsForHaVarrayIter.next();      URI poolSystem=haPool.getStorageDevice();      if (recommendedSrcSystems.contains(poolSystem)) {        _log.info("Removing pool {} on system {} from consideration for HA placement",haPool.getId(),poolSystem);        vplexPoolsForHaVarrayIter.remove();        haPoolsLimitedBySrcSelections=true;      }    }    List<Recommendation> recommendationsForHaVarray=getRecommendationsForPools(haVarray.getId().toString(),haVpool,vplexPoolsForHaVarray,capabilities);    if (recommendationsForHaVarray.isEmpty()) {      _log.info("Matching pools for HA varray insufficient for placement");      if (haPoolsLimitedBySrcSelections) {        recommendationsForHaVarray=getRecommendationsForPools(haVarray.getId().toString(),haVpool,vplexPoolMapForHaVarray.get(vplexStorageSystemId),capabilities);        if (recommendationsForHaVarray.isEmpty()) {          _log.info("Matching pools for HA varray still insufficient for placement");          continue;        } else {          _log.info("Matching pools for HA varray now sufficient for placement");        }      } else {        continue;      }    }    recommendations.addAll(recommendationsForSrcVarray);    recommendations.addAll(createVPlexRecommendations(vplexStorageSystemId,haVarray,haVpool,recommendationsForHaVarray));    _log.info("Done trying to place resources for VPlex.");    break;  }  _placementManager.logRecommendations("VPLEX Distributed",recommendations);  return recommendations;}  }
class C{  public LongAdder(){}  }
class C{  public static Sentence distribute(Sentence sentence){  Sentence result=null;  DistributeAndOverOr distributeAndOverOr=new DistributeAndOverOr();  result=sentence.accept(distributeAndOverOr,null);  return result;}  }
class C{  public double manhattanDistance(final double x,final double y){  final double dx=Math.abs((double)this.x - x);  final double dy=Math.abs((double)this.y - y);  return dx + dy;}  }
class C{  public static BigInteger factorial(BigInteger n){  BigInteger nFac=BigInteger.ONE;  while (n.compareTo(BigInteger.ONE) > 0) {    nFac=nFac.multiply(n);    n=n.subtract(BigInteger.ONE);  }  return nFac;}  }
class C{  public SetAnimation(TimedElement timedElement,AnimatableElement animatableElement,AnimatableValue to){  super(timedElement,animatableElement);  this.to=to;}  }
class C{  public boolean isTransactionMapped(){  return this.isMapped;}  }
class C{  public Vertex define(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(false,false,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public static UUIDPersistentHandle nullHandle(){  return UUID_NULL_HANDLE;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof OIDName))   return false;  OIDName other=(OIDName)obj;  return oid.equals((Object)other.oid);}  }
class C{  public static int hash(int aSeed,float aFloat){  return hash(aSeed,Float.floatToIntBits(aFloat));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void main(String[] args){  String[][] tests=new String[4][2];  for (int i=0; i < tests.length; i++) {    tests[i][0]=BUG_ID + FS + "TestDupThrowsTags.html";    tests[i][1]="Test " + (i + 1) + " passes";  }  TestDupThrowsTags tester=new TestDupThrowsTags();  run(tester,ARGS,tests,NO_TEST);  tester.printSummary();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ArrayList<String> extractTsConf(String[] frame){  ArrayList<String> sorti=new ArrayList<>();  String info=General.hexToBin(frame[6]);  for (; info.length() < 8; ) {    info="0" + info;  }  String timeslot=String.valueOf(Integer.parseInt(info.substring(5,8),2));  if (info.charAt(1) == '1') {    sorti.add(timeslot);    sorti.add("1");  } else {    sorti.add(timeslot);    sorti.add("0");  }  return sorti;}  }
class C{  public void testLongText() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testLongText");    this.stmt.executeUpdate("CREATE TABLE testLongText (field1 LONGTEXT)");    this.rs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,"testLongText","%");    assertTrue(this.rs.next());    assertTrue(this.rs.getInt("DATA_TYPE") == java.sql.Types.LONGVARCHAR);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testLongText");  }}  }
class C{  public static String toJvmName(CtClass clazz){  if (clazz.isArray())   return of(clazz); else   return toJvmName(clazz.getName());}  }
class C{  boolean hasMinFeatureCount(String feature){  if (minFeatureCount == 0)   return true;  Set<Integer> ids=clippedFeatureIndex.get(feature);  if (ids == null)   return false;  return ids.size() >= minFeatureCount;}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  private void ensureHasCurrentRow() throws SQLException {  if (curr == null)   throw new SQLException("Result set is not positioned on a row.");}  }
class C{  public static final String formatDate(Date d){  return DF.format(d);}  }
class C{  public BitVector(int size){  this(QuickBitVector.makeBitVector(size,1),size);}  }
class C{  public void parseNumbers(){  for (int i='0'; i <= '9'; i++) {    tokenTypes[i]|=TOKEN_DIGIT;  }  tokenTypes['.']|=TOKEN_DIGIT;  tokenTypes['-']|=TOKEN_DIGIT;}  }
class C{  protected void decrementInstances(){synchronized (LOCK) {    openCount-=1;    if (openCount == 0) {      quit();    }  }}  }
class C{  public static int size(String text){  return text.length();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.023 -0500",hash_original_method="6746067FD45AAE4025CD0901FF5AA3FC",hash_generated_method="EC537F8DBBDB8C686D52ACAAF2D73265") public int globalMethodInvocations(){  int count=0;  for (int i=0; i < NUM_INSTR; i++) {    if (OpcodeInfo.isInvoke(i)) {      count+=mCounts[i];    }  }  return count;}  }
class C{  public void replaceSelection(byte[] bytes){  int offset=table.getSmallestSelectionIndex();  int len=table.getLargestSelectionIndex() - offset + 1;  replaceBytes(offset,len,bytes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.482 -0500",hash_original_method="E554B360562612AFCC9A87837C58FB1E",hash_generated_method="F5B0D13605B258FFB70028ABB9557250") public boolean performPrivateCommand(String action,Bundle data){  return false;}  }
class C{  public final void run(final Iterable<? extends HasPlansAndId<T,I>> persons,ObjectAttributes subpopLookup,final int iteration,final ReplanningContext replanningContext){  handleChangeRequests(iteration);  run(persons,subpopLookup,replanningContext);}  }
class C{  protected void layoutEast(DockWrapper base,int x,int y,int maxwidth,int maxheight){  for (Iterator iter=base.getDockedWrappers().iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    Dimension d=dw.getPreferredSize();    int w=min(d.width,maxwidth);    int h=min(d.height,maxheight);    dw.setBounds(x - w,y,w,h);    if (!dw.canOcclude()) {      updateRight(backgroundBounds,x - w);    }    updateRight(occludingBounds,x - w);    layoutEast(dw,x - w,y,maxwidth - w,maxheight);    y+=h;    maxheight-=h;  }}  }
class C{  public Vector3m toVector3m(){  return Vector2.toVector3m(this);}  }
class C{  public <T>T readConfig(String siteId,String configKind,String configId,String ConfigKey) throws IOException, ClassNotFoundException {  Configuration config=coordinator.queryConfiguration(siteId,configKind,configId);  if (config == null || config.getConfig(ConfigKey) == null) {    log.debug("Config of kind " + configKind + " and id "+ configId+ "not found");    return null;  }  String serializedConfig=config.getConfig(ConfigKey);  @SuppressWarnings("unchecked") T retObj=(T)SerializerUtils.deserialize(serializedConfig);  return retObj;}  }
class C{  public static void tileStretchPaint(Graphics g,JComponent comp,BufferedImage img,Insets ins){  int left=ins.left;  int right=ins.right;  int top=ins.top;  int bottom=ins.bottom;  g.drawImage(img,0,0,left,top,0,0,left,top,null);  g.drawImage(img,left,0,comp.getWidth() - right,top,left,0,img.getWidth() - right,top,null);  g.drawImage(img,comp.getWidth() - right,0,comp.getWidth(),top,img.getWidth() - right,0,img.getWidth(),top,null);  g.drawImage(img,0,top,left,comp.getHeight() - bottom,0,top,left,img.getHeight() - bottom,null);  g.drawImage(img,left,top,comp.getWidth() - right,comp.getHeight() - bottom,left,top,img.getWidth() - right,img.getHeight() - bottom,null);  g.drawImage(img,comp.getWidth() - right,top,comp.getWidth(),comp.getHeight() - bottom,img.getWidth() - right,top,img.getWidth(),img.getHeight() - bottom,null);  g.drawImage(img,0,comp.getHeight() - bottom,left,comp.getHeight(),0,img.getHeight() - bottom,left,img.getHeight(),null);  g.drawImage(img,left,comp.getHeight() - bottom,comp.getWidth() - right,comp.getHeight(),left,img.getHeight() - bottom,img.getWidth() - right,img.getHeight(),null);  g.drawImage(img,comp.getWidth() - right,comp.getHeight() - bottom,comp.getWidth(),comp.getHeight(),img.getWidth() - right,img.getHeight() - bottom,img.getWidth(),img.getHeight(),null);}  }
class C{  public void updateCharacterStream(String columnName,java.io.Reader reader,int length) throws SQLException {  updateCharacterStream(findColumn(columnName),reader,length);}  }
class C{  public static Dcs cs_symperm(Dcs A,int[] pinv,boolean values){  int i, j, p, q, i2, j2, n, Ap[], Ai[], Cp[], Ci[], w[];  double Cx[], Ax[];  Dcs C;  if (!Dcs_util.CS_CSC(A))   return (null);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Dcs_util.cs_spalloc(n,n,Ap[n],values && (Ax != null),false);  w=new int[n];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (j=0; j < n; j++) {    j2=pinv != null ? pinv[j] : j;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (i > j)       continue;      i2=pinv != null ? pinv[i] : i;      w[Math.max(i2,j2)]++;    }  }  Dcs_cumsum.cs_cumsum(Cp,w,n);  for (j=0; j < n; j++) {    j2=pinv != null ? pinv[j] : j;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (i > j)       continue;      i2=pinv != null ? pinv[i] : i;      Ci[q=w[Math.max(i2,j2)]++]=Math.min(i2,j2);      if (Cx != null)       Cx[q]=Ax[p];    }  }  return C;}  }
class C{  private String ruleToString(){  StringBuffer text=new StringBuffer();  if (m_splitAtts.length > 0) {    text.append("IF\n");    for (int i=m_splitAtts.length - 1; i >= 0; i--) {      text.append("\t" + m_covered.attribute(m_splitAtts[i]).name() + " ");      if (m_relOps[i] == 0) {        text.append("<= ");      } else {        text.append("> ");      }      text.append(Utils.doubleToString(m_splitVals[i],1,3) + "\n");    }    text.append("THEN\n");  }  if (m_ruleModel != null) {    try {      text.append(m_ruleModel.printNodeLinearModel());      text.append(" [" + m_numCovered);      if (m_globalAbsDev > 0.0) {        text.append("/" + Utils.doubleToString((100 * m_ruleModel.rootMeanSquaredError() / m_globalStdDev),1,3) + "%]\n\n");      } else {        text.append("]\n\n");      }    } catch (    Exception e) {      return "Can't print rule";    }  }  return text.toString();}  }
class C{  private void sb1(int a,int b,int c,int d){  int t2=b ^ (~a);  int t5=c ^ (a | t2);  X2=d ^ t5;  int t7=b ^ (d | t2);  int t8=t2 ^ X2;  X3=t8 ^ (t5 & t7);  int t11=t5 ^ t7;  X1=X3 ^ t11;  X0=t5 ^ (t8 & t11);}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0) {    throw new IllegalArgumentException("Read-ahead limit < 0");  }synchronized (lock) {    ensureOpen();    mark=next;  }}  }
class C{  private boolean isBranch(int opcode){switch (opcode) {case ByteCode.GOTO:case ByteCode.GOTO_W:case ByteCode.IFEQ:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IFLT:case ByteCode.IFNE:case ByteCode.IFNONNULL:case ByteCode.IFNULL:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPNE:    return true;default :  return false;}}  }
class C{  public int size(){  return size(root);}  }
class C{  public synchronized void reload(){  if (!SETTINGS_FILE.isFile()) {    setExpireValue();    return;  }  FileInputStream fis=null;  try {    fis=new FileInputStream(SETTINGS_FILE);    try {      PROPS.load(fis);    } catch (    IllegalArgumentException e) {    }catch (    StringIndexOutOfBoundsException e) {    }catch (    IOException e) {      markFailure();    }  } catch (  FileNotFoundException e) {    if (SETTINGS_FILE.exists()) {      markFailure();    }  } finally {    IOUtils.closeQuietly(fis);  }  for (  Setting set : settings)   set.reload();  setExpireValue();}  }
class C{  public static DeltaCounter newDeltaCounter(long totalAdds,long totalRemoves,long recentAdds,long recentRemoves){  return new StateBasedPNDeltaCounter(totalAdds,totalRemoves,recentAdds,recentRemoves);}  }
class C{  public Iterator enumerateLiteralResultAttributes(){  return (null == m_avts) ? null : m_avts.iterator();}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  IfdStructure other=(IfdStructure)obj;  if (count != other.count)   return false;  if (offsetValue != other.offsetValue)   return false;  if (tag != other.tag)   return false;  if (type != other.type)   return false;  return true;}  }
class C{  public int writeAll(ByteBuffer source) throws IOException, InterruptedException {  int totalBytesWritten=0;  while (source.hasRemaining()) {    int bytesWritten=this.socketChannel.write(source);    totalBytesWritten+=bytesWritten;  }  return totalBytesWritten;}  }
class C{  public static BfsNode create(DataInput in) throws IOException {  BfsNode m=new BfsNode();  m.readFields(in);  return m;}  }
class C{  public void test_wellDesigned03() throws MalformedQueryException {  final String queryStr="" + "PREFIX : <http://example/>\n" + "SELECT * \n"+ "{ \n"+ "    ?X  :name \"paul\" . \n"+ "    OPTIONAL {?X :name \"george\" } OPTIONAL { ?X :email ?Z } \n"+ "}";  final BigdataValueFactory f=store.getValueFactory();  final BigdataURI name=f.createURI("http://example/name");  final BigdataURI email=f.createURI("http://example/email");  final BigdataLiteral paul=f.createLiteral("paul");  final BigdataLiteral george=f.createLiteral("george");  final BigdataValue[] values=new BigdataValue[]{name,email,paul,george};  store.getLexiconRelation().addTerms(values,values.length,false);  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  QueryRoot queryRoot=astContainer.getOriginalAST();  queryRoot=(QueryRoot)new ASTWildcardProjectionOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  final QueryRoot expected=BOpUtility.deepCopy(queryRoot);  queryRoot=(QueryRoot)new ASTBottomUpOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  assertEquals(expected,queryRoot);}  }
class C{  public void addTWord(String word){  sentence.add(new TWord(word));}  }
class C{  public static double logQuick(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.log(value) : Math.log(value);  }  double h;  if (value > 0.87) {    if (value < 1.16) {      return 2.0 * (value - 1.0) / (value + 1.0);    }    h=0.0;  } else   if (value < MIN_DOUBLE_NORMAL) {    value*=TWO_POW_52;    h=-52 * LOG_2;  } else {    h=0.0;  }  int valueBitsHi=(int)(Double.doubleToRawLongBits(value) >> 32);  int valueExp=(valueBitsHi >> 20) - MAX_DOUBLE_EXPONENT;  int xIndex=((valueBitsHi << 12) >>> (32 - LOG_BITS));  return h + valueExp * LOG_2 + logXLogTab[xIndex];}  }
class C{  public List<List<Integer>> levelOrderBottom(TreeNode root){  List<List<Integer>> res=new LinkedList<List<Integer>>();  if (root == null)   return res;  Queue<TreeNode> q=new LinkedList<TreeNode>();  q.add(root);  while (!q.isEmpty()) {    int size=q.size();    List<Integer> curLevel=new ArrayList<Integer>();    for (int i=0; i < size; i++) {      TreeNode n=q.poll();      curLevel.add(n.val);      if (n.left != null)       q.add(n.left);      if (n.right != null)       q.add(n.right);    }    result.add(0,curLevel);  }  return res;}  }
class C{  public HttpConnection(final String host,final int port,final Protocol protocol){  this(null,-1,host,null,port,protocol);}  }
class C{  public Future<?> buildIndexAsync(){  return Futures.immediateCheckedFuture(null);}  }
class C{  protected void refreshActions(){  actionLock.setEnabled(true);  actionRelaunch.setEnabled(null != currentRoot && !currentRoot.isRunning());  actionRelaunchFailed.setEnabled(false);  actionShowHistory.setEnabled(true);  actionClearTerminated.setEnabled(containsTerminated());}  }
class C{  public void handleGrayLine(final CGraphModel model,final NaviNode node,final double y){  if (node.getRawNode() instanceof INaviCodeNode) {    grayLine(model,node,(INaviCodeNode)node.getRawNode(),y);  }}  }
class C{  public String peekNextId(){  int oldPtr=ptr;  String retval=ttoken();  savedPtr=ptr;  ptr=oldPtr;  return retval;}  }
class C{  public void endVisit(FieldDeclaration node){}  }
class C{  private boolean processPayment(){  if (m_payment == null)   return true;  if (m_payment.processIt(DocAction.ACTION_Complete) && m_payment.save()) {    m_payment=null;    return true;  }  m_payment=null;  return false;}  }
class C{  public static double[][] add(double[][] input1,double[][] input2) throws Exception {  int rows=input1.length;  int columns=input1[0].length;  if (input2.length != rows) {    throw new Exception("Row length of arrays are not equal");  }  if (input2[0].length != columns) {    throw new Exception("Column length of arrays are not equal");  }  double[][] returnValues=new double[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      returnValues[r][c]=input1[r][c] + input2[r][c];    }  }  return returnValues;}  }
class C{  public HorizontalNode(IPoint point){  super(point.getY(),point);}  }
class C{  public static Intent createServerIntent(String broadcastType,int serverId){  Intent intent=new Intent(broadcastType);  intent.putExtra(Extra.SERVER,serverId);  return intent;}  }
class C{  public void refresh() throws IOException {  if (searcherMgr == null) {    throw new IllegalStateException("suggester was not built");  }  searcherMgr.maybeRefreshBlocking();}  }
class C{  public static Container encloseX(Component... cmps){  return Container.encloseIn(new BoxLayout(BoxLayout.X_AXIS),cmps);}  }
class C{  public void comment(String data) throws org.xml.sax.SAXException {  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkMaxDirectoryEntry that=(MkMaxDirectoryEntry)o;  return Double.compare(knnDistance,that.knnDistance) == 0;}  }
class C{  static TypeMember createUnionMember(final int id,final BaseType parentType,final BaseType baseType,final String name){  return new TypeMember(id,parentType,baseType,name,Optional.of(0),Optional.<Integer>absent(),Optional.<Integer>absent());}  }
class C{  public void removeMacro(int index){  this.macros.remove(index);  fireUpdate(this);}  }
class C{  public ThreadPool(int numThreads){  super("ThreadPool-" + (threadPoolID++));  setDaemon(true);  isAlive=true;  taskQueue=new LinkedList();  for (int i=0; i < numThreads; i++) {    new PooledThread().start();  }}  }
class C{  public OptionSet removeAccept(){  accept=null;  return this;}  }
class C{  public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  output.addRelationship(Primitive.INSTANTIATION,Primitive.POST);  output.getNetwork().createVertex(Primitive.SELF).addRelationship(Primitive.POST,output);  String text=printInput(output);  Vertex question=output.getRelationship(Primitive.QUESTION);  String reply=null;  if (question != null) {    Vertex id=question.getRelationship(Primitive.ID);    if (id != null) {      reply=(String)id.getData();    }  }  post(text,reply);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isWideningConversion(Column newColumn){  if (type != newColumn.type) {    return false;  }  if (precision > newColumn.precision) {    return false;  }  if (scale != newColumn.scale) {    return false;  }  if (nullable && !newColumn.nullable) {    return false;  }  if (convertNullToDefault != newColumn.convertNullToDefault) {    return false;  }  if (primaryKey != newColumn.primaryKey) {    return false;  }  if (autoIncrement || newColumn.autoIncrement) {    return false;  }  if (checkConstraint != null || newColumn.checkConstraint != null) {    return false;  }  if (convertNullToDefault || newColumn.convertNullToDefault) {    return false;  }  if (defaultExpression != null || newColumn.defaultExpression != null) {    return false;  }  return !(isComputed || newColumn.isComputed);}  }
class C{  protected static boolean fillCache(final Pair<CConnection,String> cacheKey){  PostgreSQLDatabaseFunctions.m_cache.clear();  final String query="SELECT table_name FROM information_schema.tables  WHERE table_catalog = '" + cacheKey.second() + "' ";  try (ResultSet result=cacheKey.first().executeQuery(query,true)){    while (result.next()) {      PostgreSQLDatabaseFunctions.m_cache.put(cacheKey,result.getString(1));    }  } catch (  final SQLException exception) {    return false;  }  return true;}  }
class C{  public static mat4 createTranslate(float x,float y,float z){  mat4 result=new mat4();  result.m[12]=x;  result.m[13]=y;  result.m[14]=z;  return result;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.TestHQL);  String op=request.getParameter("op");  if (op == null || !op.equals("Submit")) {    if ("Clear Cache".equals(op))     HibernateUtil.clearCache();    return mapping.findForward("displayQueryForm");  }  HibernateQueryTestForm frm=(HibernateQueryTestForm)form;  ActionMessages errors=frm.validate(mapping,request);  Logger sqlLog=Logger.getLogger("org.hibernate.SQL");  if (iOriginalLevel == null)   iOriginalLevel=sqlLog.getLevel();  sqlLog.setLevel(Level.DEBUG);  ByteArrayOutputStream out=new ByteArrayOutputStream();  Appender myAppender=new WriterAppender(new PatternLayout("%m%n"),out);  sqlLog.addAppender(myAppender);  if (errors.size() == 0) {    try {      int limit=ApplicationProperty.TestHQLMaxLines.intValue();      String query=frm.getQuery();      _RootDAO rdao=new _RootDAO();      Session hibSession=rdao.getSession();      Query q=hibSession.createQuery(query);      try {        List l=q.list();        StringBuffer s=new StringBuffer();        int line=0;        for (Iterator i=l.iterator(); i.hasNext(); line++) {          if (limit > 0 && line >= limit) {            s.append("<tr><td>...</td></tr>");            break;          }          Object o=i.next();          if (s.length() == 0)           printHeader(s,o);          printLine(s,o,(SessionImplementor)hibSession);        }        if (s.length() > 0) {          printFooter(s);          request.setAttribute("result",s.toString());        }        frm.setListSize(String.valueOf(l.size()));      } catch (      QueryExecutionRequestException e) {        Transaction tx=null;        try {          tx=hibSession.beginTransaction();          int i=q.executeUpdate();          request.setAttribute("result",i + " lines updated.");          frm.setListSize(String.valueOf(i));          tx.commit();        } catch (        Exception ex) {          if (tx != null && tx.isActive())           tx.rollback();          throw ex;        }        hibSession.flush();        HibernateUtil.clearCache();      }    } catch (    Exception e) {      errors.add("query",new ActionMessage("errors.generic",e.getMessage()));      Debug.error(e);    }  }  sqlLog.removeAppender(myAppender);  sqlLog.setLevel(iOriginalLevel == null ? Level.INFO : iOriginalLevel);  out.flush();  out.close();  String sql="";  for (StringTokenizer stk=new StringTokenizer(new String(out.toByteArray()),"\n"); stk.hasMoreTokens(); ) {    String line=(String)stk.nextToken();    String comment=null;    if (line.indexOf("/*") >= 0 && line.indexOf("/*") < line.indexOf("*/")) {      comment=line.substring(line.indexOf("/*") + 2,line.indexOf("*/"));      line=line.substring(0,line.indexOf("/*")) + line.substring(line.indexOf("*/") + 2);    }    if (sql.length() > 0)     sql+="<br><br>";    if (comment != null)     sql+="<font color='gray'>-- " + comment + "</font>";    Formatter f=new BasicFormatterImpl();    sql+=f.format(line).replaceAll("\n","<br>").replaceAll(" ","&nbsp;");  }  if (sql.length() > 0)   request.setAttribute("sql",sql);  saveErrors(request,errors);  return mapping.findForward("displayQueryForm");}  }
class C{  public static JButton createButton(final String buttonText,final int mnemonic,final ActionListener actionListener){  final JButton newButton=MapXmlUIHelper.createButton(buttonText,mnemonic);  newButton.addActionListener(actionListener);  return newButton;}  }
class C{  private void validateCyclicAliasing(String field) throws SyntaxError {  Set<String> set=new HashSet<>();  set.add(field);  if (validateField(field,set)) {    throw new SyntaxError("Field aliases lead to a cycle");  }}  }
class C{  private boolean validateToken(String authHeader) throws MSF4JSecurityException {  String accessToken=extractAccessToken(authHeader);  String responseStr=getValidatedTokenResponse(accessToken);  Map<String,String> responseData=getResponseDataMap(responseStr);  if (!Boolean.parseBoolean(responseData.get(IntrospectionResponse.ACTIVE))) {    throw new MSF4JSecurityException(SecurityErrorCode.AUTHENTICATION_FAILURE,"Invalid Access token.");  }  return true;}  }
class C{  public static void revealInEditor(IProject project,SourceLocationTag line,boolean activate){  String className=line.getClz();  int lineNumber=line.getLine();  revealInEditor(project,className,lineNumber,activate);}  }
class C{  public void showDialog(){  setVisible(true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isSpecified(String qName){  int index=getIndex(qName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: " + qName);  return specified[index];}  }
class C{  public void changeRightLeft(float radians){  manualDirectionController.changeRightLeft(radians);}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  @POST @Path("cluster/ipreconfig") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response clusterIpReconfig(ClusterIpInfo clusterIpInfo,@DefaultValue("reboot") @QueryParam("postOperation") String postOperation) throws Exception {  _log.info("Received a cluster ip reconfiguration request");  try {    ipreconfigManager.triggerIpReconfig(clusterIpInfo,postOperation);    auditControl(OperationTypeEnum.RECONFIG_IP,AuditLogManager.AUDITLOG_SUCCESS,null);  } catch (  Exception e) {    auditControl(OperationTypeEnum.RECONFIG_IP,AuditLogManager.AUDITLOG_FAILURE,null);    throw APIException.internalServerErrors.triggerIpReconfigFailed(e.getMessage());  }  _log.info("Accepted the cluster ip reconfiguration request");  return Response.status(Response.Status.ACCEPTED).build();}  }
class C{  public FileBinary(File file){  this(file,file.getName(),null);}  }
class C{  private synchronized void processDirectionRelease(final Direction direction,final boolean facing){  if (directionRelease != null) {    if (directionRelease.check(direction,facing)) {      return;    } else {      client.removeDirection(directionRelease.getDirection(),directionRelease.isFacing());    }  }  directionRelease=new DelayedDirectionRelease(direction,facing);}  }
class C{  public Option(){}  }
class C{  static int checksum(byte[] bytes){  int sum=0;  for (int n=0; n < 148; ++n) {    sum+=bytes[n];  }  sum+=' ' * 8;  for (int n=148 + 8; n < bytes.length; ++n) {    sum+=bytes[n];  }  return sum;}  }
class C{  public static boolean isMultiDex(File archiveFile){  ContentReader contentReader=new ContentReader(archiveFile);  contentReader.load();  List<String> allClassNames=contentReader.getAllClassNames();  int numDexes=0;  for (  String classEntry : allClassNames) {    if (classEntry.endsWith(".dex")) {      numDexes++;      if (numDexes == 2) {        return true;      }    }  }  return false;}  }
class C{  public void testTransform(){  for (int i=0; i < kTransformerSamples.length; i++) {    ClassFileTransformer transformer=getRandomTransformer();    addTransformerToManager(fInst,transformer);    verifyTransformers(fInst);    removeTransformerFromManager(fInst,transformer,true);  }}  }
class C{  public CompilationUnit generateUnit(){  return new CompilationUnit(getPackageDeclaration(),generateImports(),Collections.singletonList(generateEnum()));}  }
class C{  private void cmd_archive(){  boolean success=false;  byte[] data=getPDFAsArray(file);  MArchive arc=null;  if (data != null) {    PrintInfo printInfo=null;    if (null != processInfo) {      printInfo=new PrintInfo(processInfo);    }    if (null != printInfo) {      arc=new MArchive(Env.getCtx(),printInfo,null);    }    if (null != arc) {      arc.setBinaryData(data);      arc.setAD_Process_ID(processInfo.getAD_Process_ID());      arc.setRecord_ID(processInfo.getRecord_ID());      arc.setName(processInfo.getTitle());      success=arc.save();    }  }  if (success) {    FDialog.info(0,this,Msg.getMsg(ctx,"ArchiveSuccess",new Object[]{arc.getName()}));    log.log(Level.FINE,arc.getName() + " Archived Into " + arc.getAD_Archive_ID());    archive.setDisabled(Boolean.TRUE);  } else {    throw new AdempiereException("ArchiveError");  }}  }
class C{  public static void main(String[] args) throws IOException {  String experimentName="random_npa";  String outputFolder="output";  Log.setDisabled(!Constants.ENABLE_OUTPUT);  Log.printLine("Starting " + experimentName);  try {    CloudSim.init(1,Calendar.getInstance(),false);    DatacenterBroker broker=Helper.createBroker();    int brokerId=broker.getId();    List<Cloudlet> cloudletList=RandomHelper.createCloudletList(brokerId,RandomConstants.NUMBER_OF_VMS);    List<Vm> vmList=Helper.createVmList(brokerId,cloudletList.size());    List<PowerHost> hostList=Helper.createHostList(RandomConstants.NUMBER_OF_HOSTS);    PowerDatacenterNonPowerAware datacenter=(PowerDatacenterNonPowerAware)Helper.createDatacenter("Datacenter",PowerDatacenterNonPowerAware.class,hostList,new PowerVmAllocationPolicySimple(hostList));    datacenter.setDisableMigrations(true);    broker.submitVmList(vmList);    broker.submitCloudletList(cloudletList);    CloudSim.terminateSimulation(Constants.SIMULATION_LIMIT);    double lastClock=CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    Log.printLine("Received " + newList.size() + " cloudlets");    CloudSim.stopSimulation();    Helper.printResults(datacenter,vmList,lastClock,experimentName,Constants.OUTPUT_CSV,outputFolder);  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");    System.exit(0);  }  Log.printLine("Finished " + experimentName);}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  private String toString(Position position){  return "P[" + position.getOffset() + "+"+ position.getLength()+ "]";}  }
class C{  private void checkHttpMethod(Request requestObject) throws Exception {  if (requestObject.getMethod() == null) {    throw new Exception("Method was null");  }}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  @Override public void offerData(String id,Address us,Address them,String localUri,Map<String,String> headers) throws IOException {  long length=-1;  String hash=null;  File fileLocal=new File(localUri);  if (fileLocal.exists()) {    length=fileLocal.length();    if (length > MAX_TRANSFER_LENGTH) {      throw new IOException("Length too large: " + length);    }    FileInputStream is=new FileInputStream(fileLocal);    hash=sha1sum(is);    is.close();  } else {    java.io.File fileExtern=new java.io.File(localUri);    length=fileExtern.length();    if (length > MAX_TRANSFER_LENGTH) {      throw new IOException("Length too large: " + length);    }    java.io.FileInputStream is=new java.io.FileInputStream(fileExtern);    hash=sha1sum(is);    is.close();  }  if (headers == null)   headers=new HashMap<>();  headers.put("File-Name",fileLocal.getName());  headers.put("File-Length",String.valueOf(length));  headers.put("File-Hash-SHA1",hash);  if (!headers.containsKey("Mime-Type")) {    String mimeType=SystemServices.getMimeType(localUri);    headers.put("Mime-Type",mimeType);  }  String[] paths=localUri.split("/");  String url=URI_PREFIX_OTR_IN_BAND + SystemServices.sanitize(paths[paths.length - 1]);  Request request=new Request("OFFER",us,them,url,headers);  offerCache.put(url,new Offer(id,localUri,request));  sendRequest(request);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ENTITY___CLASS_DEFINITION_1:    getClassDefinition_1().clear();  getClassDefinition_1().addAll((Collection<? extends ClassDefinition_>)newValue);return;case UmplePackage.ENTITY___INTERFACE_DEFINITION_1:getInterfaceDefinition_1().clear();getInterfaceDefinition_1().addAll((Collection<? extends InterfaceDefinition_>)newValue);return;case UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:getExternalDefinition_1().clear();getExternalDefinition_1().addAll((Collection<? extends ExternalDefinition_>)newValue);return;case UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:getAssociationDefinition_1().clear();getAssociationDefinition_1().addAll((Collection<? extends AssociationDefinition_>)newValue);return;case UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:getAssociationClassDefinition_1().clear();getAssociationClassDefinition_1().addAll((Collection<? extends AssociationClassDefinition_>)newValue);return;case UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:getStateMachineDefinition_1().clear();getStateMachineDefinition_1().addAll((Collection<? extends StateMachineDefinition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public T caseNewExpression(NewExpression object){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.234 -0400",hash_original_method="71BA56061CC566FAF4CE116FA431BE61",hash_generated_method="D32F87BC18FB23A6AE09E9767CC4DFCD") public static void copy(String input,OutputStream output) throws IOException {  StringReader in=new StringReader(input);  OutputStreamWriter out=new OutputStreamWriter(output);  copy(in,out);  out.flush();}  }
class C{  public boolean isFullyConnected(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    if (n.getNodeId() != syncManager.getLocalNodeId() && !isConnected(n.getNodeId())) {      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] missing connection",syncManager.getLocalNodeId(),n.getNodeId());      }      return false;    }  }  return true;}  }
class C{  private boolean isAnyPackageFromListInstalled(List<String> packages){  boolean result=false;  PackageManager pm=mContext.getPackageManager();  for (  String packageName : packages) {    try {      pm.getPackageInfo(packageName,0);      QLog.e(packageName + " ROOT management app detected!");      result=true;    } catch (    PackageManager.NameNotFoundException e) {      continue;    }  }  return result;}  }
class C{  private PlatformQueryCursor runQuery(BinaryRawReaderEx reader,Query qry) throws IgniteCheckedException {  try {    QueryCursorEx cursor=(QueryCursorEx)cache.query(qry);    return new PlatformQueryCursor(platformCtx,cursor,qry.getPageSize() > 0 ? qry.getPageSize() : Query.DFLT_PAGE_SIZE);  } catch (  Exception err) {    throw PlatformUtils.unwrapQueryException(err);  }}  }
class C{  public Swagger2MarkupConfigBuilder withAnchorPrefix(String anchorPrefix){  Validate.notNull(anchorPrefix,"%s must no be null","anchorPrefix");  config.anchorPrefix=anchorPrefix;  return this;}  }
class C{  protected void sequence_MemberExpression(ISerializationContext context,TaggedTemplateString semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void mouseMoved(){}  }
class C{  public FillinOptionNotSupportedException(){}  }
class C{  public SVGOMFlowDivElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void syncSettingsInDbAndConfigFile(){  boolean configurationChanged=false;  Configuration loadedConf=mapper.load(Configuration.class,EC2MetadataUtils.getInstanceId());  if (cronExpressionIsValid(retentionCronExpression) && !retentionCronExpression.equals(loadedConf.getRetentionCronExpression())) {    LOG.debug("Applying new cron expression {} for Retention policy.",retentionCronExpression);    loadedConf.setRetentionCronExpression(retentionCronExpression);    configurationChanged=true;  }  if (correctPropertyProvided(pollingRate,WORKER_POLLING_RATE) && Integer.parseInt(pollingRate) != loadedConf.getWorkerDispatcherPollingRate()) {    LOG.debug("Applying new polling rate to pick up new task {} ms.",pollingRate);    loadedConf.setWorkerDispatcherPollingRate(Integer.parseInt(pollingRate));    configurationChanged=true;  }  if (correctPropertyProvided(waitTimeBeforeNewSync,WAIT_TIME_BEFORE_NEXT_CHECK_IN_SECONDS) && Integer.parseInt(waitTimeBeforeNewSync) != loadedConf.getWaitTimeBeforeNewSyncWithAWS()) {    LOG.debug("Applying new wait time before new sync of Snapshot/Volume with AWS data {} seconds.",waitTimeBeforeNewSync);    loadedConf.setWaitTimeBeforeNewSyncWithAWS(Integer.parseInt(waitTimeBeforeNewSync));    configurationChanged=true;  }  if (correctPropertyProvided(maxWaitTimeToDetachVolume,MAX_WAIT_TIME_VOLUME_TO_DETACH_IN_SECONDS) && Integer.parseInt(maxWaitTimeToDetachVolume) != loadedConf.getMaxWaitTimeToDetachVolume()) {    LOG.debug("Applying new max wait time for volume to be detach {} seconds.",maxWaitTimeToDetachVolume);    loadedConf.setMaxWaitTimeToDetachVolume(Integer.parseInt(maxWaitTimeToDetachVolume));    configurationChanged=true;  }  if (configurationChanged) {    LOG.debug("Storing updated settings from config file to DB.");    mapper.save(loadedConf);  }  removeProperties();  storePropertiesEditableFromConfigFile(loadedConf.getRetentionCronExpression(),loadedConf.getWorkerDispatcherPollingRate(),loadedConf.getWaitTimeBeforeNewSyncWithAWS(),loadedConf.getMaxWaitTimeToDetachVolume());}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public IssueMatcher at(String expectedURISuffix,int expectedLineNumber,int expectedColumn){  return at(URI.createFileURI(expectedURISuffix),expectedLineNumber,expectedColumn);}  }
class C{  protected boolean flipEastAndWestAtEnds(int position,Position.Bias bias){  if (majorAxis == Y_AXIS) {    int testPos=(bias == Position.Bias.Backward) ? Math.max(0,position - 1) : position;    int index=getViewIndexAtPosition(testPos);    if (index != -1) {      View v=getView(index);      if (v != null && v instanceof CompositeView) {        return ((CompositeView)v).flipEastAndWestAtEnds(position,bias);      }    }  }  return false;}  }
class C{  private void extend(Class base,DefaultType access) throws Exception {  ContactList list=support.getMethods(base,access);  for (  Contact contact : list) {    process((MethodContact)contact);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.583 -0500",hash_original_method="78998B2E5B42D469D0E131861596BD99",hash_generated_method="D76631B2A8BFD823537942B82703A7AD") private View findFocusableViewInBounds(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  private static ProcessStatus verifySession(final PwmRequest pwmRequest,final SessionVerificationMode mode) throws IOException, ServletException, PwmUnrecoverableException {  final LocalSessionStateBean ssBean=pwmRequest.getPwmSession().getSessionStateBean();  final HttpServletRequest req=pwmRequest.getHttpServletRequest();  final PwmResponse pwmResponse=pwmRequest.getPwmResponse();  if (!pwmRequest.getMethod().isIdempotent() && pwmRequest.hasParameter(PwmConstants.PARAM_FORM_ID)) {    LOGGER.debug(pwmRequest,"session is unvalidated but can not be validated during a " + pwmRequest.getMethod().toString() + " request, will allow");    return ProcessStatus.Continue;  }  if (pwmRequest.getURL().isCommandServletURL()) {    return ProcessStatus.Continue;  }  final String verificationParamName=pwmRequest.getConfig().readAppProperty(AppProperty.HTTP_PARAM_SESSION_VERIFICATION);  final String keyFromRequest=pwmRequest.readParameterAsString(verificationParamName,PwmHttpRequestWrapper.Flag.BypassValidation);  if (keyFromRequest == null || keyFromRequest.length() < 1) {    final String returnURL=figureValidationURL(pwmRequest,ssBean.getSessionVerificationKey());    LOGGER.trace(pwmRequest,"session has not been validated, redirecting with verification key to " + returnURL);    pwmResponse.setHeader(PwmConstants.HttpHeader.Connection,"close");    if (mode == SessionVerificationMode.VERIFY_AND_CACHE) {      req.setAttribute("Location",returnURL);      pwmResponse.forwardToJsp(PwmConstants.JSP_URL.INIT);    } else {      pwmResponse.sendRedirect(returnURL);    }    return ProcessStatus.Halt;  }  if (keyFromRequest.equals(ssBean.getSessionVerificationKey())) {    final String returnURL=figureValidationURL(pwmRequest,null);    LOGGER.trace(pwmRequest,"session validated, redirecting to original request url: " + returnURL);    ssBean.setSessionVerified(true);    pwmRequest.getPwmResponse().sendRedirect(returnURL);    return ProcessStatus.Halt;  }  final String errorMsg="client unable to reply with session key";  final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_BAD_SESSION,errorMsg);  LOGGER.error(pwmRequest,errorInformation);  pwmRequest.respondWithError(errorInformation,true);  return ProcessStatus.Halt;}  }
class C{  void shiftLeft(){  for (int i=0; i < getCount() - 2; i++) {    mMonths.add(CalendarUtils.addMonths(mMonths.remove(0),getCount()));  }  for (int i=0; i < getCount(); i++) {    swapCursor(i,null,null);  }  for (int i=0; i <= 2; i++) {    bind(i);  }}  }
class C{  public double[] computeLocalMarginalEntropyUsingPreviousObservations(double states[][],int variableIndex){  return computeLocalMarginalEntropyUsingPreviousObservations(states,variableIndex,false);}  }
class C{  public HttpClientError(){  super();}  }
class C{  static void errorUnexpectedAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_ATTRIBUTE,systemID,lineNr,elementName,attributeName,null,"Element " + elementName + " did not expect an attribute "+ "named "+ attributeName);}  }
class C{  public void update(Graphics g,JComponent c){  paint(g,c);}  }
class C{  public static boolean addReadResolve(Class cls){  return cls.isAnonymous() && cls.isToplevel();}  }
class C{  public void addNotice(ParserNotice notice){  notices.add(notice);}  }
class C{  private void nextState(){  State current=getState();  if (current == NOT_SELECTED) {    setState(SELECTED);  } else   if (current == SELECTED) {    setState(DONT_CARE);  } else   if (current == DONT_CARE) {    setState(NOT_SELECTED);  }  other.setSelected(!other.isSelected());}  }
class C{  public Airport(){  super();}  }
class C{  @SuppressWarnings("unused") protected void postProcessIfNode(ValueNode node){}  }
class C{  public Task pauseSystem(String deploymentId) throws IOException {  String path=String.format("%s/%s/pause_system",getBasePath(),deploymentId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private void makeDirectories(final String uploadDocumentLocation){  if (!new File(uploadDocumentLocation).isDirectory()) {    new File(uploadDocumentLocation).mkdirs();  }}  }
class C{  public void backupCurrentPosition(){  stateVector.copyInto(savedStateVector);}  }
class C{  public static void changeCurrentAxis(int currentAxis){  mCurrentAxis=currentAxis;  float currentAngle=12;switch (mCurrentAxis) {case 0:    mRotationSlider.setBackgroundColor(Color.GREEN);  break;case 1:mRotationSlider.setBackgroundColor(Color.RED);break;case 2:mRotationSlider.setBackgroundColor(Color.BLUE);break;default :mRotationSlider.setBackgroundColor(Color.TRANSPARENT);break;}mSurface.setRendererAxis(mCurrentAxis);mRotationSlider.setValue((int)currentAngle);}  }
class C{  @Override final public boolean isDone(){  return halt;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (inputFormatPeek() == null) {    throw new NullPointerException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_firstBatchFinished) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public boolean isProgressiveRenderingEnabled(){  return mProgressiveRenderingEnabled;}  }
class C{  @Override public boolean checkAndDelete(byte[] row,byte[] family,byte[] qualifier,CompareFilter.CompareOp compareOp,byte[] value,Delete delete) throws IOException {  return false;}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  private int matchCaseAlignment(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:      return fPosition;case Symbols.TokenLBRACE:    fIndent=fPrefs.prefCaseIndent;  return fPosition;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:fIndent=0;return fPosition;case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:skipScope();break;default :continue;}}}  }
class C{  public void pushViewPositionToModel(){  Point2D p=this.getGlobalTranslation();  getTextObject().setX(p.getX());  getTextObject().setY(p.getY());}  }
class C{  protected String formNavigationStackDebug(){  if (baseFormNavigationStack != null) {    return baseFormNavigationStack.toString();  }  return "Null navigation stack";}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Builder hour(Integer hour){  if (hour != null && (hour < 0 || hour > 23)) {    throw Messages.INSTANCE.getIllegalArgumentException(37,"Hour",0,23);  }  components[HOUR]=hour;  return this;}  }
class C{  public boolean isBlockOverrideAllowed(){  return blockOverrideAllowed;}  }
class C{  @Override public PreparedStatement prepareStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Object[] toArray(){  return toArray(new Object[size]);}  }
class C{  private void processAnsiCommand_M(){}  }
class C{  private static void usage(){  System.out.printf("Usage: TCPWriteRecordTest address[:port[:unit]] file record registers [count]");  System.exit(1);}  }
class C{  public final void normalizeCP(Matrix3d m1){  double mag=1.0 / Math.sqrt(m1.m00 * m1.m00 + m1.m10 * m1.m10 + m1.m20 * m1.m20);  m00=m1.m00 * mag;  m10=m1.m10 * mag;  m20=m1.m20 * mag;  mag=1.0 / Math.sqrt(m1.m01 * m1.m01 + m1.m11 * m1.m11 + m1.m21 * m1.m21);  m01=m1.m01 * mag;  m11=m1.m11 * mag;  m21=m1.m21 * mag;  m02=m10 * m21 - m11 * m20;  m12=m01 * m20 - m00 * m21;  m22=m00 * m11 - m01 * m10;}  }
class C{  public SeedPeers(int[] seedAddrs,NetworkParameters params){  this.seedAddrs=seedAddrs;  this.params=params;}  }
class C{  private void testSave() throws Exception {  LOG.info("save and mailboxFromResult");  final HTable mailboxes=new HTable(conf,MAILBOXES_TABLE);  try {    final HBaseMailbox mlbx=mailboxList.get(mailboxList.size() / 2);    final Get get=new Get(mlbx.getMailboxId().toBytes());    get.addFamily(MAILBOX_CF);    final Result result=mailboxes.get(get);    final HBaseMailbox newValue=(HBaseMailbox)mailboxFromResult(result);    assertEquals(mlbx,newValue);    assertEquals(mlbx.getUser(),newValue.getUser());    assertEquals(mlbx.getName(),newValue.getName());    assertEquals(mlbx.getNamespace(),newValue.getNamespace());    assertEquals(mlbx.getMailboxId(),newValue.getMailboxId());    assertEquals(mlbx.getLastUid(),newValue.getLastUid());    assertEquals(mlbx.getUidValidity(),newValue.getUidValidity());    assertEquals(mlbx.getHighestModSeq(),newValue.getHighestModSeq());    assertArrayEquals(mlbx.getMailboxId().toBytes(),newValue.getMailboxId().toBytes());  }  finally {    mailboxes.close();  }}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public void cancel(String reason){  cancellableThreads.cancel(reason);}  }
class C{  @Override public void projectOpened(){  CompilerManager.getInstance(_project).addCompilationStatusListener(this);  if (isAfterAutoMakeEnabled(_project)) {    setAnalyzeAfterAutomake(_project,true);  }}  }
class C{  @Override public Object clone(){  TestInstances result;  result=new TestInstances();  result.assign(this);  return result;}  }
class C{  public boolean isAllowStateless(){  return _allowStateless;}  }
class C{  public static void replaceText(File file,String[] args) throws FileNotFoundException {  ArrayList<String> list=new ArrayList<>();  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      String s1=input.nextLine();      list.add(s1.replaceAll(args[1],args[2]));    }  }   try (PrintWriter output=new PrintWriter(file)){    for (int i=0; i < list.size(); i++) {      output.println(list.get(i));    }  } }  }
class C{  protected boolean fitsBounds(float val,float min,float max){  if (val < min || val > max)   return false; else   return true;}  }
class C{  public synchronized void removeAllListeners(){  listeners=EMPTY_UPDLISTEN_ARRAY;  stmtAwareListeners=EMPTY_UPDLISTENSA_ARRAY;}  }
class C{  public void testProcessMsg3(){  byte[] pdu=createPDU(1);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    mPackageName="com.android.development";    mClassName="com.android.development.Development";    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,true,false);    assertFalse((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;}  }
class C{  public IndicationEventHandler(MessageEventHandler indicationListener){  super(Message.STUN_INDICATION,indicationListener);}  }
class C{  public JTextPaneAppender createAppender(JTextPane aTextPane){  JTextPaneAppender result=new JTextPaneAppender(myLayout,"Debug",myFilters.toArray(new Filter[0]),aTextPane);  Enumeration<?> en=LogManager.getCurrentLoggers();  while (en.hasMoreElements()) {    Object o=en.nextElement();    if (o instanceof Logger) {      Logger logger=(Logger)o;      if (!logger.getAdditivity()) {        logger.addAppender(result);      }    }  }  LogManager.getRootLogger().addAppender(result);  return result;}  }
class C{  public boolean isAnimating(){  return mIsAnimating;}  }
class C{  public Observable<String> comments(){  return RxView.clicks(postButton).map(null).filter(null);}  }
class C{  private BridgeTransform(BridgeTransform<A,B> prototype){  steps=new ArrayList<>(prototype.steps);  from=prototype.from;  to=prototype.to;  end=prototype.end;  factory=prototype.factory;}  }
class C{  @Override public void afterTest() throws Exception {  super.afterTest();  if (zkCurator != null)   CloseableUtils.closeQuietly(zkCurator);  if (zkCluster != null)   CloseableUtils.closeQuietly(zkCluster);  stopAllGrids();}  }
class C{  public static String toStringType(short type) throws RegistryException {  if (type == TYPE_DWORD)   return REGDWORD_TOKEN; else   if (type == TYPE_STRING)   return REGSTR_TOKEN; else   if (type == TYPE_KEY)   return REGKEY_TOKEN;  throw new RegistryException("invalid Registry Type definition");}  }
class C{  public UnknownHostException(String s){  super(s);}  }
class C{  public static void trace(final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.trace(t.getMessage(),t);  } else {    System.err.printf("TRACE: %s\n",t.getMessage());    System.err.println(t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public void testUnivariateTEforCoupledLogisticMapFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/coupledLogisticMapXY.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={0.508417};  System.out.println("Kraskov Cond MI as TE comparison 1 - univariate coupled logistic map data 1");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.016257};  System.out.println("  reverse direction:");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{0}),kNNs,expectedFromTRENTOOL);}  }
class C{  NumericalAttribute(String name,int valueType){  super(name,valueType);  registerStatistics(new NumericalStatistics());  registerStatistics(new WeightedNumericalStatistics());  registerStatistics(new MinMaxStatistics());  registerStatistics(new UnknownStatistics());}  }
class C{  public void startConnectivityEstablishment(){synchronized (startLock) {    logger.info("Start ICE connectivity establishment. Local ufrag " + getLocalUfrag());    shutdown=false;    pruneNonMatchedStreams();    try {      initCheckLists();    } catch (    ArithmeticException e) {      setState(IceProcessingState.FAILED);      return;    }    setState(IceProcessingState.RUNNING);    if (this.preDiscoveredPairsQueue.size() > 0) {      logger.info("Trigger checks for pairs that were received before " + "running state");      for (      CandidatePair cp : preDiscoveredPairsQueue) {        triggerCheck(cp);      }      preDiscoveredPairsQueue.clear();    }    connCheckClient.startChecks();  }}  }
class C{  public FLV(File file){  this(file,false);}  }
class C{  public static MethExecutorResult execute(String receiver,String selector){  return execute(receiver,selector,null);}  }
class C{  public static Flag registerExcludeUnmatedFlag(final CFlags flags){  return flags.registerOptional(EXCLUDE_UNMATED_FLAG,EXCLUDE_UNMATED_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public static double logpdf(double x,double mu,double sigma,double k){  if (x == Double.POSITIVE_INFINITY || x == Double.NEGATIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  x=(x - mu) / sigma;  if (k > 0 || k < 0) {    if (k * x > 1) {      return Double.NEGATIVE_INFINITY;    }    double t=Math.log(1 - k * x);    return t == Double.NEGATIVE_INFINITY ? -Math.log(sigma) : t == Double.POSITIVE_INFINITY ? Double.NEGATIVE_INFINITY : (1 - k) * t / k - Math.exp(t / k) - Math.log(sigma);  } else {    return -x - Math.exp(-x) - Math.log(sigma);  }}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  if (count > blockSize) {    FR[blockSize - 2]=out[outOff]=encryptByte(in[inOff],blockSize - 2);    FR[blockSize - 1]=out[outOff + 1]=encryptByte(in[inOff + 1],blockSize - 1);    cipher.processBlock(FR,0,FRE,0);    for (int n=2; n < blockSize; n++) {      FR[n - 2]=out[outOff + n]=encryptByte(in[inOff + n],n - 2);    }  } else   if (count == 0) {    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize; n++) {      FR[n]=out[outOff + n]=encryptByte(in[inOff + n],n);    }    count+=blockSize;  } else   if (count == blockSize) {    cipher.processBlock(FR,0,FRE,0);    out[outOff]=encryptByte(in[inOff],0);    out[outOff + 1]=encryptByte(in[inOff + 1],1);    System.arraycopy(FR,2,FR,0,blockSize - 2);    System.arraycopy(out,outOff,FR,blockSize - 2,2);    cipher.processBlock(FR,0,FRE,0);    for (int n=2; n < blockSize; n++) {      FR[n - 2]=out[outOff + n]=encryptByte(in[inOff + n],n - 2);    }    count+=blockSize;  }  return blockSize;}  }
class C{  public static void logAndShow(Activity activity,String tag,Throwable t){  Log.e(tag,"Error",t);  String message=t.getMessage();  if (t instanceof GoogleJsonResponseException) {    GoogleJsonError details=((GoogleJsonResponseException)t).getDetails();    if (details != null) {      message=details.getMessage();    }  } else   if (t.getCause() instanceof GoogleAuthException) {    message=((GoogleAuthException)t.getCause()).getMessage();  }  showError(activity,message);}  }
class C{  public static PidFile create(Path path,boolean deleteOnExit) throws IOException {  return create(path,deleteOnExit,JvmInfo.jvmInfo().pid());}  }
class C{  private HashSet<HeapOperand<Object>> findOrCreateOriginalUses(Object type){  HashSet<HeapOperand<Object>> result=originalUses.get(type);  if (result != null) {    return result;  }  result=new HashSet<HeapOperand<Object>>(2);  for (Iterator<HeapVariable<Object>> e=getHeapVariables(); e.hasNext(); ) {    HeapVariable<Object> B=e.next();    if (B.getHeapType().equals(type)) {      HashSet<HeapOperand<Object>> u=UseChain.get(B);      result.addAll(u);    }  }  originalUses.put(type,result);  return result;}  }
class C{  protected int retrieveExtraDimension(int start,int end){  this.scanner.resetTo(start,end);  int dimensions=0;  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLBRACKET:case TerminalTokens.TokenNameCOMMENT_BLOCK:case TerminalTokens.TokenNameCOMMENT_JAVADOC:case TerminalTokens.TokenNameCOMMENT_LINE:        break;case TerminalTokens.TokenNameRBRACKET:      dimensions++;    break;default :  return dimensions;}}} catch (InvalidInputException e) {}return dimensions;}  }
class C{  public static void commit(Persistence persistence,String databaseName){  Session session=persistence.getSession(databaseName);  try {    session.getTransaction().commit();  } catch (  HibernateException e) {    persistence.closeSession(databaseName);    throw e;  }}  }
class C{  public Analyzer includeAdditiveEpsilonIndicator(){  includeAdditiveEpsilonIndicator=true;  return this;}  }
class C{  private void initializeAttributes(){  xAttributeType=new AttributeType(this,"Point","setX",double.class,true);  yAttributeType=new AttributeType(this,"Point","setY",double.class,true);  addConsumerType(xAttributeType);  addConsumerType(yAttributeType);  for (int i=0; i < model.getDataset().getSeriesCount(); i++) {    addSetter(i);  }}  }
class C{  public static boolean write(OutputStream stream,Object o) throws Exception {  Class<?> komlClass;  Class<?>[] komlClassArgs;  Object[] komlArgs;  java.lang.reflect.Constructor<?> constructor;  Object koml;  java.lang.reflect.Method methodAdd;  java.lang.reflect.Method methodClose;  Class<?>[] addArgsClasses;  Class<?>[] closeArgsClasses;  Object[] addArgs;  Object[] closeArgs;  boolean result;  result=false;  komlClass=Class.forName("fr.dyade.koala.xml.koml.KOMLSerializer");  komlClassArgs=new Class[2];  komlClassArgs[0]=java.io.OutputStream.class;  komlClassArgs[1]=Boolean.TYPE;  komlArgs=new Object[2];  komlArgs[0]=stream;  komlArgs[1]=new Boolean(false);  constructor=komlClass.getConstructor(komlClassArgs);  koml=constructor.newInstance(komlArgs);  addArgsClasses=new Class[1];  addArgsClasses[0]=Object.class;  methodAdd=komlClass.getMethod("addObject",addArgsClasses);  addArgs=new Object[1];  addArgs[0]=o;  closeArgsClasses=new Class[0];  methodClose=komlClass.getMethod("close",closeArgsClasses);  closeArgs=new Object[0];  try {    methodAdd.invoke(koml,addArgs);    result=true;  } catch (  Exception e) {    result=false;  } finally {    methodClose.invoke(koml,closeArgs);  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double stddev(double[] a){  return Math.sqrt(var(a));}  }
class C{  private void refreshDestinationPath(){  projectExplorer.reloadChildren(destination);  move();}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  public Sample(int jobCount,int msgSize,long start,long end,Connection nc){  this.jobMsgCnt=jobCount;  this.start=start;  this.end=end;  this.msgBytes=msgSize * jobCount;  Statistics stats=nc.getStats();  this.msgCnt=stats.getOutMsgs() + stats.getInMsgs();  this.ioBytes=stats.getOutBytes() + stats.getInBytes();}  }
class C{  public int hashCode(){  if (hashcode != 0) {    int result=17;    if (this.description != null) {      result=37 * result + this.description.hashCode();    }    if (this.verb != null) {      result=37 * result + this.verb.hashCode();    }    if (this.command != null) {      result=37 * result + this.command.hashCode();    }    hashcode=result;  }  return hashcode;}  }
class C{  public static void doDestroy(){  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  for (int i=0; i < TOTAL_PUTS; i++) {    try {      region1.destroy("key-" + i);    } catch (    Exception e) {      fail("Test failed due to unexpected exception during DESTROYs : " + e);    }  }}  }
class C{  private void refreshMarkers(){  removeAll();  Map markerMap=new HashMap();  List notices=textArea.getParserNotices();  for (Iterator i=notices.iterator(); i.hasNext(); ) {    ParserNotice notice=(ParserNotice)i.next();    if (notice.getLevel() <= levelThreshold || (notice instanceof TaskNotice)) {      Integer key=new Integer(notice.getLine());      Marker m=(Marker)markerMap.get(key);      if (m == null) {        m=new Marker(notice);        m.addMouseListener(listener);        markerMap.put(key,m);        add(m);      } else {        m.addNotice(notice);      }    }  }  if (getShowMarkedOccurrences() && textArea.getMarkOccurrences()) {    List occurrences=textArea.getMarkedOccurrences();    for (Iterator i=occurrences.iterator(); i.hasNext(); ) {      DocumentRange range=(DocumentRange)i.next();      int line=0;      try {        line=textArea.getLineOfOffset(range.getStartOffset());      } catch (      BadLocationException ble) {        continue;      }      ParserNotice notice=new MarkedOccurrenceNotice(range);      Integer key=new Integer(line);      Marker m=(Marker)markerMap.get(key);      if (m == null) {        m=new Marker(notice);        m.addMouseListener(listener);        markerMap.put(key,m);        add(m);      } else {        if (!m.containsMarkedOccurence()) {          m.addNotice(notice);        }      }    }  }  revalidate();  repaint();}  }
class C{  public static boolean isFailSilently(){  return failSilently;}  }
class C{  @Override public double updateContainerProcessing(double currentTime,List<Double> mipsShare){  setCurrentMipsShare(mipsShare);  double timeSpam=currentTime - getPreviousTime();  for (  ResCloudlet rcl : getCloudletExecList()) {    rcl.updateCloudletFinishedSoFar((long)(getCapacity(mipsShare) * timeSpam * rcl.getNumberOfPes()* Consts.MILLION));  }  if (getCloudletExecList().size() == 0) {    setPreviousTime(currentTime);    return 0.0;  }  double nextEvent=Double.MAX_VALUE;  List<ResCloudlet> toRemove=new ArrayList<>();  for (  ResCloudlet rcl : getCloudletExecList()) {    long remainingLength=rcl.getRemainingCloudletLength();    if (remainingLength == 0) {      toRemove.add(rcl);      cloudletFinish(rcl);    }  }  getCloudletExecList().removeAll(toRemove);  for (  ResCloudlet rcl : getCloudletExecList()) {    double estimatedFinishTime=currentTime + (rcl.getRemainingCloudletLength() / (getCapacity(mipsShare) * rcl.getNumberOfPes()));    if (estimatedFinishTime - currentTime < CloudSim.getMinTimeBetweenEvents()) {      estimatedFinishTime=currentTime + CloudSim.getMinTimeBetweenEvents();    }    if (estimatedFinishTime < nextEvent) {      nextEvent=estimatedFinishTime;    }  }  toRemove.clear();  setPreviousTime(currentTime);  return nextEvent;}  }
class C{  private void showHideTableInfoDisableBinding(){  ReadOnlyObjectProperty<NavigationMode> selectedMenu=navigationController.navigationModeProperty();  showHideTableInfoPaneMenuItem.disableProperty().bind(Bindings.createBooleanBinding(null,selectedMenu).not());}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  private StringBuffer createKeyNamePair(String columnName,int displayType){  String method="get" + columnName + "()";  if (displayType != DisplayType.String)   method="String.valueOf(" + method + ")";  StringBuffer sb=new StringBuffer("/** Get Record ID/ColumnName\n@return ID/ColumnName pair\n*/" + "public KeyNamePair getKeyNamePair() " + "{return new KeyNamePair(get_ID(), ").append(method).append(");}");  return sb;}  }
class C{  public String rotateIpsecKey(){  return client.post(String.class,PathConstants.IPSEC_KEY_URL);}  }
class C{  private static ValueSource buildNumericSource(IndexSchema schema,String expressionString){  int paren=expressionString.indexOf('(');  String[] arguments;  String operands;  if (paren < 0) {    return buildFieldSource(schema,expressionString,NUMBER_TYPE);  } else {    try {      operands=expressionString.substring(paren + 1,expressionString.lastIndexOf(')')).trim();    } catch (    Exception e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"Missing closing parenthesis in [" + expressionString + "]");    }    arguments=ExpressionFactory.getArguments(operands);  }  String operation=expressionString.substring(0,paren).trim();  if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {    if (arguments.length != 1) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The constant number declaration [" + expressionString + "] does not have exactly 1 argument.");    }    return new ConstDoubleSource(Double.parseDouble(arguments[0]));  } else   if (operation.equals(AnalyticsParams.NEGATE)) {    if (arguments.length != 1) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The negate operation [" + expressionString + "] does not have exactly 1 argument.");    }    ValueSource argSource=buildNumericSource(schema,arguments[0]);    if (argSource == null) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The operation \"" + AnalyticsParams.NEGATE + "\" requires a numeric field or operation as argument. \""+ arguments[0]+ "\" is not a numeric field or operation.");    }    return new NegateDoubleFunction(argSource);  } else   if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {    if (arguments.length != 1) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The absolute value operation [" + expressionString + "] does not have exactly 1 argument.");    }    ValueSource argSource=buildNumericSource(schema,arguments[0]);    if (argSource == null) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The operation \"" + AnalyticsParams.NEGATE + "\" requires a numeric field or operation as argument. \""+ arguments[0]+ "\" is not a numeric field or operation.");    }    return new AbsoluteValueDoubleFunction(argSource);  } else   if (operation.equals(AnalyticsParams.FILTER)) {    return buildFilterSource(schema,operands,NUMBER_TYPE);  }  List<ValueSource> subExpressions=new ArrayList<>();  for (  String argument : arguments) {    ValueSource argSource=buildNumericSource(schema,argument);    if (argSource == null) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The operation \"" + operation + "\" requires numeric fields or operations as arguments. \""+ argument+ "\" is not a numeric field or operation.");    }    subExpressions.add(argSource);  }  if (operation.equals(AnalyticsParams.ADD)) {    return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));  } else   if (operation.equals(AnalyticsParams.MULTIPLY)) {    return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));  } else   if (operation.equals(AnalyticsParams.DIVIDE)) {    if (subExpressions.size() != 2) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The divide operation [" + expressionString + "] does not have exactly 2 arguments.");    }    return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));  } else   if (operation.equals(AnalyticsParams.POWER)) {    if (subExpressions.size() != 2) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The power operation [" + expressionString + "] does not have exactly 2 arguments.");    }    return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));  } else   if (operation.equals(AnalyticsParams.LOG)) {    if (subExpressions.size() != 2) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The log operation [" + expressionString + "] does not have exactly 2 arguments.");    }    return new LogDoubleFunction(subExpressions.get(0),subExpressions.get(1));  }  if (AnalyticsParams.DATE_OPERATION_SET.contains(operation) || AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {    return null;  }  throw new SolrException(ErrorCode.BAD_REQUEST,"The operation [" + expressionString + "] is not supported.");}  }
class C{  public void stopOneBridgeServer(int port){  CacheServer bridge=null;  boolean foundServer=false;  for (Iterator bsI=getCache().getCacheServers().iterator(); bsI.hasNext(); ) {    bridge=(CacheServer)bsI.next();    if (bridge.getPort() == port) {      bridge.stop();      assertFalse(bridge.isRunning());      foundServer=true;      break;    }  }  assertTrue(foundServer);}  }
class C{  public String filterTipText(){  return "The filter to be used.";}  }
class C{  public static AVList openSpatialImage(File imageFile) throws IOException {  return openSpatialImage(imageFile,ImageUtil.NEAREST_NEIGHBOR_INTERPOLATION);}  }
class C{  public FileCacheImageOutputStream(OutputStream stream,File cacheDir) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  if ((cacheDir != null) && !(cacheDir.isDirectory())) {    throw new IllegalArgumentException("Not a directory!");  }  this.stream=stream;  if (cacheDir == null)   this.cacheFile=Files.createTempFile("imageio",".tmp").toFile(); else   this.cacheFile=Files.createTempFile(cacheDir.toPath(),"imageio",".tmp").toFile();  this.cache=new RandomAccessFile(cacheFile,"rw");  this.closeAction=StreamCloser.createCloseAction(this);  StreamCloser.addToQueue(closeAction);}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,int size,SelectorProvider selectorProvider){  this(processorType,null,size,selectorProvider);}  }
class C{  public void clear(){  metadata.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:28.743 -0500",hash_original_method="3115FC99B9C3EE3EE3896CF41F72D355",hash_generated_method="ADC6A4DABB5C962FC6FFAE4CB65D03D8") protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent){  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,onRestoreRingtone());  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT,mShowDefault);  if (mShowDefault) {    ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,RingtoneManager.getDefaultUri(getRingtoneType()));  }  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT,mShowSilent);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,mRingtoneType);  ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,getTitle());}  }
class C{  protected boolean checkMountpoint(){  File mountPointDir=new File(Settings.getInstance().getMountDir());  if (!mountPointDir.exists()) {    logger.fatal("non-existing mountpoint " + mountPointDir.getAbsolutePath());    return false;  } else   if (!mountPointDir.isDirectory()) {    logger.fatal("Not a directory: " + mountPointDir.getAbsolutePath());    return false;  } else   if (mountPointDir.isDirectory() && mountPointDir.list().length > 0) {    logger.fatal("Mountpoint not empty: " + mountPointDir.getAbsolutePath());    return false;  }  return true;}  }
class C{  protected SVGOMTSpanElement(){}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public synchronized void close(){  super.close();  shutdownWriter();}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  public static boolean isItalic(AttributeSet a){  Boolean italic=(Boolean)a.getAttribute(Italic);  if (italic != null) {    return italic.booleanValue();  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STATE_MACHINE_DEFINITION___QUEUED_1:    setQueued_1(QUEUED_1_EDEFAULT);  return;case UmplePackage.STATE_MACHINE_DEFINITION___NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.STATE_MACHINE_DEFINITION___STATE_1:getState_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static String byteArray2HexString(byte[] arr){  SB sb=new SB(arr.length << 1);  for (  byte b : arr)   sb.a(Integer.toHexString(MASK & b >>> 4)).a(Integer.toHexString(MASK & b));  return sb.toString().toUpperCase();}  }
class C{  public static boolean updatePropertyInPropertyFile(String property,String value,String propertyFile,boolean keepBackup,boolean add) throws Exception {  BufferedReader br=new BufferedReader(new FileReader(propertyFile));  String tmpPropertiesFile=propertyFile + ".tmp";  File tmpFile=new File(tmpPropertiesFile);  FileOutputStream out=new FileOutputStream(tmpFile);  PrintStream printStream=new PrintStream(out);  String str;  boolean didUpdate=false;  while ((str=br.readLine()) != null) {    str=str.trim();    if ((str.startsWith("#"))) {      printStream.println(str);    } else {      if (str.indexOf(property) > -1) {        StringBuffer buffer=new StringBuffer(50);        buffer.append(property).append("=").append(value);        printStream.println(buffer.toString());        didUpdate=true;      } else {        printStream.println(str);      }    }  }  if (!didUpdate) {    if (add) {      StringBuffer buffer=new StringBuffer(50);      buffer.append(property).append("=").append(value);      printStream.println(buffer.toString());      didUpdate=true;    }  }  printStream.close();  if (didUpdate) {    if (keepBackup) {      File oldFile=new File(propertyFile);      String parentDirectory=oldFile.getParent();      String fileName=oldFile.getName();      String nextBackupName=getNextBackupName(parentDirectory,fileName,".bak");      String nextBackupPath=parentDirectory + File.separator + nextBackupName;      DirectoryCommands.copyFile(propertyFile,nextBackupPath);    }    DirectoryCommands.copyFile(tmpPropertiesFile,propertyFile);    tmpFile.delete();    return true;  } else {    tmpFile.delete();    return false;  }}  }
class C{  public RotateStrategyBySize(){  this(1024 * 1024);}  }
class C{  public String toString(){  return "type = " + type;}  }
class C{  public void removeAllMembers(){  Set<ResourceEntity> membersToRemove=ImmutableSet.copyOf(members);  for (  ResourceEntity member : membersToRemove) {    removeMember(member);  }}  }
class C{  public synchronized int removeStatements(final SPOPredicate pred) throws SailException {  assertWritableConn();  flushStatementBuffers(true,false);  if (m_listeners != null) {    throw new UnsupportedOperationException();  }  long n=0;  if (getTruthMaintenance()) {    final IChunkedOrderedIterator<ISPO> itr=database.getSPORelation().getAccessPath(pred.addIndexLocalFilter(ElementFilter.newInstance(ExplicitSPOFilter.INSTANCE))).iterator();    final AbstractTripleStore tempStore=getRetractionBuffer().getStatementStore();    n=tempStore.addStatements(tempStore,true,itr,null);  } else {    final IAccessPath<ISPO> ap=database.getSPORelation().getAccessPath(pred);    if (changeLog == null) {      n=ap.removeAll();    } else {      final IChunkedOrderedIterator<ISPO> itr=database.computeClosureForStatementIdentifiers(ap.iterator());      n=StatementWriter.removeStatements(database,itr,false,changeLog);    }  }  return (int)Math.min(Integer.MAX_VALUE,n);}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener dsl){  m_instanceListeners.remove(dsl);}  }
class C{  protected SVGOMFontFaceNameElement(){}  }
class C{  private void update(){  iterationsLabel.setText("" + trainer.getIteration());}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public EncryptedPrivateKeyInfo(AlgorithmParameters algParams,byte[] encryptedData) throws NoSuchAlgorithmException {  if (algParams == null) {    throw new NullPointerException("algParams must be non-null");  }  this.algid=AlgorithmId.get(algParams);  if (encryptedData == null) {    throw new NullPointerException("encryptedData must be non-null");  } else   if (encryptedData.length == 0) {    throw new IllegalArgumentException("the encryptedData " + "parameter must not be empty");  } else {    this.encryptedData=encryptedData.clone();  }  this.encoded=null;}  }
class C{  public static void METHOD_MAXS(String className,String methName,String methDesc,int maxStack,int maxLocals){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.METHOD_MAXS(className,methName,methDesc,maxStack,maxLocals);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static boolean isNullOrEmpty(@Nullable Object[] objects){  return isNull(objects) || objects.length == 0;}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public Config loadInstalledCodenvyConfig(InstallType installType) throws IOException {  Map<String,String> properties=loadInstalledCodenvyProperties(installType);  return new Config(properties);}  }
class C{  private void internalSend(String uuid,String message,RequestCallback callback) throws WebSocketException {  checkWebSocketConnectionState();  if (callback != null) {    requestCallbackMap.put(uuid,callback);  }  send(message);}  }
class C{  private void renderIcon(){  if (enabled) {    panel.getElement().removeClassName(toolbarResources.toolbar().disabled());  } else {    panel.getElement().addClassName(toolbarResources.toolbar().disabled());  }}  }
class C{  public DisposableObjectSet(final ObjectSet<? extends Type> set){  super(set);}  }
class C{  public boolean isList(){  return (this.interestType == TP_LIST);}  }
class C{  private boolean isVPlexCG(BlockConsistencyGroup cg){  boolean isVPlex=false;  URI cgSystemURI=cg.getStorageController();  if (!NullColumnValueGetter.isNullURI(cgSystemURI)) {    StorageSystem cgSystem=dbClient.queryObject(StorageSystem.class,cgSystemURI);    if ((cgSystem != null) && (DiscoveredDataObject.Type.vplex.name().equals(cgSystem.getSystemType()))) {      isVPlex=true;    }  }  return isVPlex;}  }
class C{  public Element store(Object o){  LsDecSignalHead p=(LsDecSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getGreen().getName(),p.getGreenState()));  element.addContent(addTurnoutElement(p.getYellow().getName(),p.getYellowState()));  element.addContent(addTurnoutElement(p.getRed().getName(),p.getRedState()));  element.addContent(addTurnoutElement(p.getFlashGreen().getName(),p.getFlashGreenState()));  element.addContent(addTurnoutElement(p.getFlashYellow().getName(),p.getFlashYellowState()));  element.addContent(addTurnoutElement(p.getFlashRed().getName(),p.getFlashRedState()));  element.addContent(addTurnoutElement(p.getDark().getName(),p.getDarkState()));  return element;}  }
class C{  public OrganizationRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  protected void addMetatags(Map<String,Set<Tagging.Metatag>> tags){  this.generic_facets.putAll(computeGenericFacets(tags));}  }
class C{  private void readCRLF() throws IOException {  int cr=in.read();  int lf=in.read();  if ((cr != '\r') || (lf != '\n')) {    throw new IOException("CRLF expected at end of chunk: " + cr + "/"+ lf);  }}  }
class C{  public static Builder builder(){  return new Builder(new CommandRequest());}  }
class C{  public PermissionImpl(String s){  perm=s;}  }
class C{  @Override public void overlayChanged(OverlayChangeEvent event){  draw();}  }
class C{  public LineString(CoordinateSequence points,GeometryFactory factory){  super(factory);  init(points);}  }
class C{  public String diff_toDelta(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      try {        text.append("+").append(URLEncoder.encode(aDiff.text,"UTF-8").replace('+',' ')).append("\t");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }    break;case DELETE:  text.append("-").append(aDiff.text.length()).append("\t");break;case EQUAL:text.append("=").append(aDiff.text.length()).append("\t");break;}}String delta=text.toString();if (delta.length() != 0) {delta=delta.substring(0,delta.length() - 1);delta=unescapeForEncodeUriCompatability(delta);}return delta;}  }
class C{  public static Snackbar create(String message){  return new Snackbar(message);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("TimeStampParser.parse");  TimeStamp timeStamp=new TimeStamp();  try {    headerName(TokenTypes.TIMESTAMP);    timeStamp.setHeaderName(SIPHeaderNames.TIMESTAMP);    this.lexer.SPorHT();    String firstNumber=this.lexer.number();    try {      if (lexer.lookAhead(0) == '.') {        this.lexer.match('.');        String secondNumber=this.lexer.number();        String s=firstNumber + "." + secondNumber;        float ts=Float.parseFloat(s);        timeStamp.setTimeStamp(ts);      } else {        long ts=Long.parseLong(firstNumber);        timeStamp.setTime(ts);      }    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) != '\n') {      firstNumber=this.lexer.number();      try {        if (lexer.lookAhead(0) == '.') {          this.lexer.match('.');          String secondNumber=this.lexer.number();          String s=firstNumber + "." + secondNumber;          float ts=Float.parseFloat(s);          timeStamp.setDelay(ts);        } else {          int ts=Integer.parseInt(firstNumber);          timeStamp.setDelay(ts);        }      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("TimeStampParser.parse");  }  return timeStamp;}  }
class C{  public void enable(boolean on) throws GondolaException {  cmember.enable(on);}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVDC(String shortVdcId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.VDC_ID_PARAM,shortVdcId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  protected void onReleaseResources(List<AppOpEntry> apps){}  }
class C{  private static void sort1(float[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  float v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  BeginLineAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public boolean avoidingGui(){  return !okToUseGui && needsGui();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static List<WifiP2pServiceResponse> newInstance(String supplicantEvent){  List<WifiP2pServiceResponse> respList=new ArrayList<WifiP2pServiceResponse>();  String[] args=supplicantEvent.split(" ");  if (args.length != 4) {    return null;  }  WifiP2pDevice dev=new WifiP2pDevice();  String srcAddr=args[1];  dev.deviceAddress=srcAddr;  byte[] bin=hexStr2Bin(args[3]);  if (bin == null) {    return null;  }  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(bin));  try {    while (dis.available() > 0) {      int length=(dis.readUnsignedByte() + (dis.readUnsignedByte() << 8)) - 3;      int type=dis.readUnsignedByte();      int transId=dis.readUnsignedByte();      int status=dis.readUnsignedByte();      if (length < 0) {        return null;      }      if (length == 0) {        if (status == Status.SUCCESS) {          respList.add(new WifiP2pServiceResponse(type,status,transId,dev,null));        }        continue;      }      if (length > MAX_BUF_SIZE) {        dis.skip(length);        continue;      }      byte[] data=new byte[length];      dis.readFully(data);      WifiP2pServiceResponse resp;      if (type == WifiP2pServiceInfo.SERVICE_TYPE_BONJOUR) {        resp=WifiP2pDnsSdServiceResponse.newInstance(status,transId,dev,data);      } else       if (type == WifiP2pServiceInfo.SERVICE_TYPE_UPNP) {        resp=WifiP2pUpnpServiceResponse.newInstance(status,transId,dev,data);      } else {        resp=new WifiP2pServiceResponse(type,status,transId,dev,data);      }      if (resp != null && resp.getStatus() == Status.SUCCESS) {        respList.add(resp);      }    }    return respList;  } catch (  IOException e) {    e.printStackTrace();  }  if (respList.size() > 0) {    return respList;  }  return null;}  }
class C{  public String postItem(String token) throws IOException {  return makeHttpRequest(token,ITEMS_FEED,DATA_ITEM,"POST",HttpURLConnection.HTTP_CREATED);}  }
class C{  public CCheckBox(String text,Icon icon){  super(text,icon,false);  init();}  }
class C{  public <T>Source<T> sequence(List<T> ts){  return Arbitrary.sequence(ts);}  }
class C{  public void prepareJobEnvironment(boolean download,File jobLocDir) throws IgniteCheckedException {  try {    if (jobLocDir.exists())     throw new IgniteCheckedException("Local job directory already exists: " + jobLocDir.getAbsolutePath());    JobConf cfg=ctx.getJobConf();    String mrDir=cfg.get("mapreduce.job.dir");    if (mrDir != null) {      stagingDir=new Path(new URI(mrDir));      if (download) {        FileSystem fs=job.fileSystem(stagingDir.toUri(),cfg);        if (!fs.exists(stagingDir))         throw new IgniteCheckedException("Failed to find map-reduce submission " + "directory (does not exist): " + stagingDir);        if (!FileUtil.copy(fs,stagingDir,jobLocDir,false,cfg))         throw new IgniteCheckedException("Failed to copy job submission directory " + "contents to local file system " + "[path=" + stagingDir + ", locDir="+ jobLocDir.getAbsolutePath()+ ", jobId="+ jobId+ ']');      }      File jarJobFile=new File(jobLocDir,"job.jar");      Collection<URL> clsPathUrls=new ArrayList<>();      clsPathUrls.add(jarJobFile.toURI().toURL());      rsrcSet.add(jarJobFile);      rsrcSet.add(new File(jobLocDir,"job.xml"));      processFiles(jobLocDir,ctx.getCacheFiles(),download,false,null,MRJobConfig.CACHE_LOCALFILES);      processFiles(jobLocDir,ctx.getCacheArchives(),download,true,null,MRJobConfig.CACHE_LOCALARCHIVES);      processFiles(jobLocDir,ctx.getFileClassPaths(),download,false,clsPathUrls,null);      processFiles(jobLocDir,ctx.getArchiveClassPaths(),download,true,clsPathUrls,null);      if (!clsPathUrls.isEmpty()) {        clsPath=new URL[clsPathUrls.size()];        clsPathUrls.toArray(clsPath);      }    } else     if (!jobLocDir.mkdirs())     throw new IgniteCheckedException("Failed to create local job directory: " + jobLocDir.getAbsolutePath());    setLocalFSWorkingDirectory(jobLocDir);  } catch (  URISyntaxException|IOException e) {    throw new IgniteCheckedException(e);  }}  }
class C{  public VerifyRepositoryRequest name(String name){  this.name=name;  return this;}  }
class C{  public void testBigIntSpecialValues() throws Exception {  BigInteger[] values=new BigInteger[]{BigInteger.valueOf(Integer.MIN_VALUE),BigInteger.valueOf(Integer.MIN_VALUE + 1),BigInteger.valueOf(Integer.MIN_VALUE + 2),BigInteger.valueOf(-64765767),BigInteger.valueOf(-4000),BigInteger.valueOf(-3000),BigInteger.valueOf(-2000),BigInteger.valueOf(-1000),BigInteger.valueOf(-1),BigInteger.valueOf(0),BigInteger.valueOf(1),BigInteger.valueOf(10),BigInteger.valueOf(300),BigInteger.valueOf(765878989),BigInteger.valueOf(Integer.MAX_VALUE - 2),BigInteger.valueOf(Integer.MAX_VALUE - 1),BigInteger.valueOf(Integer.MAX_VALUE)};  BytesRef[] encoded=new BytesRef[values.length];  for (int i=0; i < values.length; i++) {    encoded[i]=new BytesRef(new byte[Integer.BYTES]);    NumericUtils.bigIntToSortableBytes(values[i],Integer.BYTES,encoded[i].bytes,encoded[i].offset);    assertEquals("forward and back conversion should generate same big integer",values[i],NumericUtils.sortableBytesToBigInt(encoded[i].bytes,encoded[i].offset,Integer.BYTES));  }  for (int i=1; i < encoded.length; i++) {    assertTrue("check sort order",encoded[i - 1].compareTo(encoded[i]) < 0);  }}  }
class C{  public SQLTransientException(Throwable cause){  super(cause);}  }
class C{  public static Set<String> parseChannelsFromString(String channels,boolean prepend){  String[] parts=channels.split(",");  Set<String> result=new LinkedHashSet<>();  for (  String part : parts) {    String channel=part.trim();    if (validateChannel(channel)) {      if (prepend && !channel.startsWith("#")) {        channel="#" + channel;      }      result.add(StringUtil.toLowerCase(channel));    }  }  return result;}  }
class C{  public BulkRequest(ActionRequest request){  super(request);}  }
class C{  @Override public void close(){  if (log.isDebugEnabled()) {    log.debug(String.format("opId=%s END operation",this.opId));  }}  }
class C{  public void flush(){  return;}  }
class C{  public void release(){  Uri uri=Uri.parse(TEMPORARY_DRM_OBJECT_URI);  SqliteWrapper.delete(mContext,mContentResolver,uri,null,null);}  }
class C{  public HashDocAttributeSet(){  super(DocAttribute.class);}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.179 -0500",hash_original_method="95514FF5073DD08599DBE9F6D73E59F3",hash_generated_method="0F370532FCB5748EE69AAC583B25F924") static public Allocation createFromBitmap(RenderScript rs,Bitmap b){  return createFromBitmap(rs,b,MipmapControl.MIPMAP_NONE,USAGE_GRAPHICS_TEXTURE);}  }
class C{  public final void clear(){  if (GWT.isScript()) {    jsArray.clear();  } else {    javaArray.clear();  }}  }
class C{  public void decAndRemoveFromHAContainer(HAEventWrapper wrapper){  if (wrapper.decAndGetReferenceCount() == 0L && !wrapper.getPutInProgress()) {synchronized (wrapper) {      if (wrapper.getReferenceCount() == 0L) {        if (logger.isDebugEnabled()) {          logger.debug("Removing event from {}: {}",this.region.getFullPath(),wrapper.getEventId());        }        HARegionQueue.this.haContainer.remove(wrapper);      }    }  }}  }
class C{  @BeforeClass public static void buildWorld(){  new DatabaseFactory().initializeDatabase();  ZoneAndPlayerTestImpl.setupZone(ZONE_NAME,false);}  }
class C{  private Class loadFromSystem(String className) throws ClassNotFoundException {  try {    Class result=getParent().loadClass(className);    printInfo("        ***Returning system class: " + className,result);    return result;  } catch (  ClassNotFoundException e) {    printInfo("        ***Class not found: " + className,null);    throw e;  }}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_BREAK)) {    Block evaluating=event.getBlock();    if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,evaluating,event.getPlayer())) {      break;    }  }}  }
class C{  public void customizerClosing(){  m_imageSaver.setFilename(m_fileBackup);}  }
class C{  public FactLine accrue(String description){  FactLine accrual=new FactLine(getCtx(),getAD_Table_ID(),getRecord_ID(),getLine_ID(),get_TrxName());  accrual.setClientOrg(this);  accrual.setDocumentInfo(m_doc,m_docLine);  accrual.setAccount(m_acctSchema,m_acct);  accrual.setPostingType(getPostingType());  accrual.setAmtSource(getC_Currency_ID(),getAmtSourceCr(),getAmtSourceDr());  accrual.convert();  accrual.setDescription(description);  return accrual;}  }
class C{  private double calcUtil4Performing(final double typDuration,final double actualDuration){  return 10 * marginalUtilPerformingSec + marginalUtilPerformingSec * typDuration * Math.log(actualDuration / typDuration);}  }
class C{  public ChiSquareMeasurementDistribution(double actualValue,int degreesOfFreedom){  super(actualValue,1 - MathsUtils.chiSquareCdf(actualValue,degreesOfFreedom));  this.degreesOfFreedom=degreesOfFreedom;}  }
class C{  public void addAlarm(VAlarm alarm){  addComponent(alarm);}  }
class C{  public void testNextLongBounded2(){  SplittableRandom sr=new SplittableRandom();  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=sr.nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=sr.nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  protected final void putIntegerValue(int v){  final int end=start;  int mask=0x7f800000;  int byteNeeded=4;  if (v < 0) {    while (((mask & v) == mask) && (byteNeeded > 1)) {      mask=mask >> 8;      byteNeeded--;    }  } else {    while (((mask & v) == 0) && (byteNeeded > 1)) {      mask=mask >> 8;      byteNeeded--;    }  }  for (int i=0; i < byteNeeded; i++) {    bytes[--start]=(byte)v;    v=v >> 8;  }  putLength(end - start);}  }
class C{  private void addSuperinterface(InterfaceType type,Set<InterfaceType> superinterfaces,Events events){  for (  InterfaceType i : superinterfaces) {    InterfaceType lookupUp=getOrAddReferredType(i,events,InterfaceType.class);    fireAndSave(new ReferenceEvent(type,lookupUp,ReferenceType.SUPERINTERFACE),events);    type.addSuperInterface(lookupUp);  }}  }
class C{  public TcpHarvester(List<TransportAddress> transportAddresses) throws IOException {  super(transportAddresses);  this.ssltcp=false;}  }
class C{  public ObserveRequest(int objectId,int objectInstanceId){  this(null,new LwM2mPath(objectId,objectInstanceId),null);}  }
class C{  protected void executePendingBatch() throws ReplicatorException {}  }
class C{  private static void printItemTypeEntry(GoogleBaseEntry entry){  MetadataEntryExtension metadata=entry.getGoogleBaseMetadata();  ItemTypeDescription itemTypeDescription=metadata.getItemTypeDescription();  System.out.println(itemTypeDescription.getName() + " - " + entry.getId());  for (  GoogleBaseAttributeId attrId : itemTypeDescription.getAttributeIds()) {    System.out.println(attrId.getName() + " (" + attrId.getType().getName()+ ")");  }}  }
class C{  private VisorCacheNodesJob(String cacheName,boolean debug){  super(cacheName,debug);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  private void addOutputEvent(Edge callEdge,Edge eventEdge){  SootMethod caller=callEdge.src();  SootMethod callee=callEdge.tgt();  boolean debug=false;  if (API.v().isSystemMethod(callee) && !API.v().isSystemMethod(caller) && API.v().reportInSpec(callee)&& !IGNORE_SYS_METHOD_WITH_NAME.contains(callee.getName())&& !ignoreSet.contains(callEdge.srcStmt())) {    RCFGNode node=getNodeForEntryEdge(eventEdge);    Context context=callEdge.srcCtxt();    SourceLocationTag line=SootUtils.getSourceLocation(callEdge.srcStmt(),callEdge.src().getDeclaringClass());    InvokeExpr invoke=callEdge.srcStmt().getInvokeExpr();    if (invoke instanceof InstanceInvokeExpr) {      InstanceInvokeExpr iie=(InstanceInvokeExpr)invoke;      for (      IAllocNode allocNode : PTABridge.v().getPTSet(iie.getBase(),context)) {        SootMethod resolved=Scene.v().getActiveHierarchy().resolveConcreteDispatch(SootUtils.getCallingTypeForReceiver((RefLikeType)allocNode.getType()),iie.getMethod());        if (resolved.equals(callee)) {          if (debug)           System.out.println(allocNode);          if (node.hasOutputEventEdge(callEdge)) {            OutputEvent oe=node.getOutputEvent(callEdge);            oe.addReceiverNode(allocNode);          } else {            OutputEvent oe=new OutputEvent(callEdge,node,line);            logger.debug("Found output event: {}",callEdge.tgt());            oe.addReceiverNode(allocNode);            node.addOutputEvent(callEdge,oe);            apiCallNodes.addAll(oe.getAllArgsPTSet());          }          apiCallNodes.add(allocNode);        }      }    } else {      if (!node.hasOutputEventEdge(callEdge)) {        OutputEvent oe=new OutputEvent(callEdge,node,line);        logger.debug("Found output event: {} (null receiver)",callEdge.tgt());        node.addOutputEvent(callEdge,oe);        apiCallNodes.addAll(oe.getAllArgsPTSet());      }    }  }}  }
class C{  public static int compareCanonicalFPNumbers(String float1,String float2){  if (float1.equals(NaN) || float2.equals(NaN)) {    if (float1.equals(float2)) {      return 0;    } else {      throwIAE("NaN cannot be compared to other floats");    }  }  if (float1.equals(POSITIVE_INFINITY)) {    return (float2.equals(POSITIVE_INFINITY)) ? 0 : 1;  } else   if (float2.equals(POSITIVE_INFINITY)) {    return -1;  }  if (float1.equals(NEGATIVE_INFINITY)) {    return (float2.equals(NEGATIVE_INFINITY)) ? 0 : -1;  } else   if (float2.equals(NEGATIVE_INFINITY)) {    return 1;  }  if (float1.charAt(0) == '-' && float2.charAt(0) != '-') {    return -1;  }  if (float2.charAt(0) == '-' && float1.charAt(0) != '-') {    return 1;  }  int eIdx1=float1.indexOf('E');  String mantissa1=float1.substring(0,eIdx1);  String exponent1=float1.substring(eIdx1 + 1);  int eIdx2=float2.indexOf('E');  String mantissa2=float2.substring(0,eIdx2);  String exponent2=float2.substring(eIdx2 + 1);  int result=compareCanonicalIntegers(exponent1,exponent2);  if (result != 0 && float1.charAt(0) == '-') {    result=-result;  }  if (result == 0) {    result=compareCanonicalDecimals(mantissa1,mantissa2);  }  return result;}  }
class C{  TemplateStrLookup(Map map){  this.map=map;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RandomProjectionLSHFactory(int intsToUse,int poolSize){  this.intsToUse=intsToUse;  this.poolSize=poolSize;}  }
class C{  public SolrInputDocument toSolrInputDocument(final SolrDocument doc,Set<String> omitFields){  SolrInputDocument sid=new SolrInputDocument();  for (  String name : doc.getFieldNames()) {    if (this.contains(name) && (omitFields == null || !omitFields.contains(name))) {      sid.addField(name,doc.getFieldValue(name),1.0f);    }  }  return sid;}  }
class C{  private void createDetailLines(){  StringBuffer sb=new StringBuffer("INSERT INTO T_ReportStatement " + "(AD_PInstance_ID, Fact_Acct_ID, LevelNo," + "DateAcct, Name, Description,"+ "AmtAcctDr, AmtAcctCr, Balance, Qty) ");  sb.append("SELECT ").append(getAD_PInstance_ID()).append(",Fact_Acct_ID,1,").append("TRUNC(DateAcct, 'DD'),NULL,NULL," + "AmtAcctDr, AmtAcctCr, AmtAcctDr-AmtAcctCr, Qty " + "FROM Fact_Acct "+ "WHERE ").append(m_parameterWhere).append(" AND TRUNC(DateAcct, 'DD') BETWEEN ").append(DB.TO_DATE(p_DateAcct_From)).append(" AND ").append(DB.TO_DATE(p_DateAcct_To));  int no=DB.executeUpdate(sb.toString(),get_TrxName());  log.fine("#" + no);  log.finest(sb.toString());  String sql_select="SELECT e.Name, fa.Description " + "FROM Fact_Acct fa" + " INNER JOIN AD_Table t ON (fa.AD_Table_ID=t.AD_Table_ID)"+ " INNER JOIN AD_Element e ON (t.TableName||'_ID'=e.ColumnName) "+ "WHERE r.Fact_Acct_ID=fa.Fact_Acct_ID";  sb=new StringBuffer("UPDATE T_ReportStatement r SET (Name,Description)=(").append(sql_select).append(") " + "WHERE Fact_Acct_ID <> 0 AND AD_PInstance_ID=").append(getAD_PInstance_ID());  no=DB.executeUpdate(sb.toString(),get_TrxName());  log.fine("Name #" + no);  log.finest("Name - " + sb);}  }
class C{  final public MutableString insert(final int index,final long l){  return insert(index,String.valueOf(l));}  }
class C{  public static boolean isInJar(IPath classpathRelativePath,IJavaProject javaProject) throws JavaModelException {  return ClasspathResourceUtilities.resolveFile(classpathRelativePath,javaProject) instanceof IJarEntryResource;}  }
class C{  public PriceView(final String id,final ProductPriceModel productPriceModel,final String appliedPromos,final boolean showCurrencySymbol,final boolean showSavings,final boolean showTax,final boolean showTaxNet,final boolean showTaxAmount){  super(id);  this.productPriceModel=productPriceModel;  this.showCurrencySymbol=showCurrencySymbol;  this.showSavings=showSavings;  this.promos=appliedPromos;  this.showTax=showTax && productPriceModel != null && productPriceModel.getPriceTax() != null;  this.showTaxNet=showTaxNet;  this.showTaxAmount=showTaxAmount;}  }
class C{  public boolean isSingleSuccessor(SortedGraphNode currentNode,SortedGraphNode nextNode){  if (!nextNode.hasOneIn())   return false;  Enumeration<? extends SortedGraphNode> inEnum=nextNode.getInNodes();  return inEnum.nextElement() == currentNode;}  }
class C{  public boolean hasSingleConcreteAccessor(){  return (setter(CONCRETE) != null) != (getter(CONCRETE) != null);}  }
class C{  private static List<String> loadFromFile(String fileName) throws KeywordOptimizerException {  List<String> out=new ArrayList<String>();  Scanner scan=null;  try {    scan=new Scanner(new File(fileName));    while (scan.hasNextLine()) {      String line=scan.nextLine().trim();      if (line.startsWith("#")) {        continue;      }      out.add(line);    }    return out;  } catch (  IOException e) {    throw new KeywordOptimizerException("Error loading file '" + fileName + "'",e);  } finally {    if (scan != null) {      scan.close();    }  }}  }
class C{  public Builder put(String setting,long value){  put(setting,String.valueOf(value));  return this;}  }
class C{  private void testResample(double coord){  final int bin=getBinNr(coord);  final int sizereq, off;  if (bin < 0) {    sizereq=size - bin;    off=-bin;  } else   if (bin >= data.length) {    sizereq=bin + 1;    off=0;  } else {    return;  }  if (sizereq < data.length) {    return;  }  final int levels=BitsUtil.magnitude(sizereq / this.destsize) - 1;  assert (levels > 0) : "No resampling required?!? sizereq=" + sizereq + " destsize="+ destsize+ " array="+ data.length;  final int step=1 << levels;  final int fixpoint=off / (step - 1);{    int oup=(fixpoint >= 0) ? fixpoint : 0;    int inp=(oup << levels) - off;    assert (-step < inp && inp <= oup && oup < inp + step) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp < size; inp+=step, oup++) {      assert (oup < inp + step && oup < data.length);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup < data.length; oup++) {      data[oup]=0;    }  }  if (off >= step) {    int oup=(fixpoint - 1 < size) ? fixpoint - 1 : size - 1;    int inp=(oup << levels) - off;    assert (oup > inp) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp > -step; inp-=step, oup--) {      assert (oup >= inp && oup >= 0);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup >= 0; oup--) {      data[oup]=0;    }  }  base=base - (offset + off) * binsize;  offset=0;  size=(size + 1) >> levels;  binsize=binsize * (1 << levels);  max=base + binsize * size;}  }
class C{  public ObjectMatrix1D make(cern.colt.list.ObjectArrayList values){  int size=values.size();  ObjectMatrix1D vector=make(size);  for (int i=size; --i >= 0; )   vector.set(i,values.get(i));  return vector;}  }
class C{  static final public int parseInt(String what){  return parseInt(what,0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PanControl(int mouseButton){  this(mouseButton,false);}  }
class C{  void signedSubtract(SignedMutableBigInteger addend){  if (sign == addend.sign)   sign=sign * subtract(addend); else   add(addend);}  }
class C{  public void testGetMGFParameters(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getMGFParameters() == mgfSpec);}  }
class C{  public static DataInputStream newDataInputStream(File file) throws FileNotFoundException {  return new DataInputStream(new FileInputStream(file));}  }
class C{  @Deprecated public static void browse(URI uri) throws IOException {  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().browse(uri);    } catch (    IOException e) {      File tempFile=File.createTempFile("rmredirect",".html");      tempFile.deleteOnExit();      FileWriter out=new FileWriter(tempFile);      try {        out.write(String.format("<!DOCTYPE html>\n" + "<html><meta http-equiv=\"refresh\" content=\"0; URL=%s\"><body>You are redirected to %s</body></html>",uri.toString(),uri.toString()));      }  finally {        out.close();      }      Desktop.getDesktop().browse(tempFile.toURI());    }catch (    UnsupportedOperationException e1) {      showBrowserUnavailableMessage(uri.toString());    }  } else {    showBrowserUnavailableMessage(uri.toString());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.594 -0500",hash_original_method="99A4FFBBF0B3182EC320D3CC49E9281B",hash_generated_method="9A8194B29160D73405C150D12F00613E") public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollY(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {      scrollDelta=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      if (getChildCount() > 0) {        int daBottom=getChildAt(0).getBottom();        int screenBottom=getScrollY() + getHeight() - mPaddingBottom;        if (daBottom - screenBottom < maxJump) {          scrollDelta=daBottom - screenBottom;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  protected Path renderCompoundGlyph(GlyfTable glyf,GlyfCompound g){  Path gp=new Path();  for (int i=0; i < g.getNumComponents(); i++) {    Glyf gl=glyf.getGlyph(g.getGlyphIndex(i));    Path path=null;    if (gl instanceof GlyfSimple) {      path=renderSimpleGlyph((GlyfSimple)gl);    } else     if (gl instanceof GlyfCompound) {      path=renderCompoundGlyph(glyf,(GlyfCompound)gl);    } else {      throw new RuntimeException("Unsupported glyph type " + gl.getClass().getCanonicalName());    }    float[] matrix=g.getTransform(i);    Matrix mat=new Matrix();    Utils.setMatValues(mat,matrix);    gp.addPath(path,mat);  }  return gp;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public boolean isLoggedIn(){  return mLoggedInUserId != null;}  }
class C{  public final String doubleString(double value){  return generatorContext.doubleString(value);}  }
class C{  protected static void appendShortType(StringBuilder sb){  sb.append("SMALLINT");}  }
class C{  public StatementData(String query,Long timestamp,String defaultSchema){  this.defaultSchema=defaultSchema;  this.timestamp=timestamp;  this.query=query;}  }
class C{  public void testScreenshot() throws Exception {  Log.d(LOG_TAG,"starting testScreenshot");  ScreenshotStubActivity activity=getActivity();  assertNotNull(activity);  File screenshotDir=getScreenshotDir();  NewScreenshotObserver observer=new NewScreenshotObserver(screenshotDir.getAbsolutePath());  observer.startWatching();  takeScreenshot();  if (observer.getCreatedPath() == null) {synchronized (observer) {      observer.wait(SCREEN_WAIT_TIME_SEC * 1000);    }  }  assertNotNull(String.format("Could not find screenshot after %d seconds",SCREEN_WAIT_TIME_SEC),observer.getCreatedPath());  File screenshotFile=new File(screenshotDir,observer.getCreatedPath());  try {    assertTrue(String.format("Detected new screenshot %s but its not a file",screenshotFile.getName()),screenshotFile.isFile());    assertTrue(String.format("Detected new screenshot %s but its not an image",screenshotFile.getName()),isValidImage(screenshotFile));  }  finally {    screenshotFile.delete();  }}  }
class C{  public void addFont(FontTask fontTask){  resources.add(fontTask);}  }
class C{  public void initParam(Object obj){  this.getJSplitPane().initParam(obj);}  }
class C{  public static XmlPullParser createDefaultParser() throws XmlPullParserException {  XmlPullParserFactory factory=XmlPullParserFactory.newInstance();  return factory.newPullParser();}  }
class C{  public void insertRow(int row,Object[] rowData){  insertRow(row,convertToVector(rowData));}  }
class C{  private List<MetricQueryTimestamp> _getCachedMetricValues(List<MetricQuery> queries,Map<MetricQuery,List<Metric>> resultsMap){  List<MetricQueryTimestamp> uncached=new ArrayList<>(queries.size());  Long originalStartTimestamp;  Long originalEndTimestamp;  long beforeTime;  long afterTime;  for (  MetricQuery query : queries) {    List<Metric> metricsForThisQuery=new ArrayList<Metric>();    originalStartTimestamp=query.getStartTimestamp();    originalEndTimestamp=query.getEndTimestamp();    query.setStartTimestamp(convertTimeStampToStartOfDay(query.getStartTimestamp()));    query.setEndTimestamp(convertTimeStampToBeginningHour(query.getEndTimestamp()));    long startExecutionTime=System.currentTimeMillis();    List<String> cacheMetricQueryKeys=constructMetricQueryKeys(query);    try {      beforeTime=System.currentTimeMillis();      Map<String,List<String>> keyValueMap=_cacheService.getRange(new LinkedHashSet<String>(cacheMetricQueryKeys),0,-1);      boolean allCachedKeysFound=true;      if (keyValueMap == null) {        uncached.add(new MetricQueryTimestamp(query,originalStartTimestamp,originalEndTimestamp,query.getStartTimestamp(),query.getEndTimestamp()));        continue;      }      for (      List<String> value : keyValueMap.values()) {        if (value == null || value.isEmpty()) {          uncached.add(new MetricQueryTimestamp(query,originalStartTimestamp,originalEndTimestamp,query.getStartTimestamp(),query.getEndTimestamp()));          _logger.info("Query not found in cache");          allCachedKeysFound=false;          break;        }      }      afterTime=System.currentTimeMillis();      _logger.info("Time spent in checking if all keys and getting values from cache: {}",afterTime - beforeTime);      if (allCachedKeysFound) {        _logger.info("Query found in cache");        beforeTime=System.currentTimeMillis();        Metric combinedMetric=null;        Map<String,Metric> tagNameAndMetricMap=new HashMap<String,Metric>();        for (        List<String> value : keyValueMap.values()) {          List<Metric> metrics=_mapper.readValue(value.toString(),new TypeReference<List<Metric>>(){          });          for (          Metric metric : metrics) {            if (!tagNameAndMetricMap.containsKey(metric.getTags().toString())) {              combinedMetric=new Metric(metric);              tagNameAndMetricMap.put(metric.getTags().toString(),combinedMetric);              combinedMetric.setDatapoints(null);            } else {              combinedMetric=tagNameAndMetricMap.get(metric.getTags().toString());            }            Map<Long,String> filteredDatapoints=new LinkedHashMap<Long,String>();            for (            Map.Entry<Long,String> datapoint : metric.getDatapoints().entrySet()) {              if (datapoint.getKey() >= originalStartTimestamp) {                filteredDatapoints.put(datapoint.getKey(),datapoint.getValue());              }            }            combinedMetric.addDatapoints(filteredDatapoints);          }        }        afterTime=System.currentTimeMillis();        _logger.info("Time spent in trimming data: {}",afterTime - beforeTime);        MetricQuery metricQueryFromLastHour=new MetricQuery(query.getScope(),query.getMetric(),query.getTags(),query.getEndTimestamp(),System.currentTimeMillis());        metricQueryFromLastHour.setNamespace(query.getNamespace());        metricQueryFromLastHour.setAggregator(query.getAggregator());        metricQueryFromLastHour.setDownsampler(query.getDownsampler());        metricQueryFromLastHour.setDownsamplingPeriod(query.getDownsamplingPeriod());        beforeTime=System.currentTimeMillis();        List<Metric> metricsFromLastHour=_defaultTsdbService.getMetrics(Arrays.asList(new MetricQuery[]{metricQueryFromLastHour})).get(metricQueryFromLastHour);        afterTime=System.currentTimeMillis();        _logger.info("Time spent in getting last 1 hour of TSDB data: {}",afterTime - beforeTime);        beforeTime=System.currentTimeMillis();        for (        Metric metric : metricsFromLastHour) {          combinedMetric=null;          for (          Map.Entry<String,Metric> tagNameAndMetric : tagNameAndMetricMap.entrySet()) {            String tsdbMetricTag=metric.getTags().toString();            String localMapMetricTag=tagNameAndMetric.getKey();            if (tsdbMetricTag.substring(1,tsdbMetricTag.length() - 1).contains(localMapMetricTag.substring(1,localMapMetricTag.length() - 1))) {              combinedMetric=tagNameAndMetric.getValue();              break;            }          }          if (combinedMetric != null) {            combinedMetric.addDatapoints(metric.getDatapoints());          } else {            metricsForThisQuery.add(metric);          }        }        for (        Metric metric : tagNameAndMetricMap.values()) {          metricsForThisQuery.add(metric);        }        resultsMap.put(query,metricsForThisQuery);        instrumentQueryLatency(_monitorService,query,startExecutionTime);        afterTime=System.currentTimeMillis();        _logger.info("Time spent in mapping tags in tsdb metrics to tags in cache: {}",afterTime - beforeTime);      }    } catch (    RuntimeException|IOException ex) {      _logger.error("Error occured Reason:",ex.toString());      uncached.add(new MetricQueryTimestamp(query,originalStartTimestamp,originalEndTimestamp,query.getStartTimestamp(),query.getEndTimestamp()));    }  }  return uncached;}  }
class C{  private void clearInstrumentation(){  nodeExpander.resetCounter();  metrics.set(METRIC_NODES_EXPANDED,0);  metrics.set(METRIC_NODE_VALUE,0);}  }
class C{  @Override public ScriptThread newThread(String[] args){  return new JythonThread(this,args);}  }
class C{  protected void onVersion(String sourceNick,String sourceLogin,String sourceHostname,String target){  this.sendRawLine("NOTICE " + sourceNick + " :\u0001VERSION "+ _version+ "\u0001");}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  List<String> strList=new ArrayList<>();  for (  AbstractCommand cmd : CommandBus.commands) {    strList.add(cmd.getCommandName());  }  for (  FuzzyCommand cmd : CommandBus.parsers) {    if (cmd instanceof IHelpable)     strList.add(((IHelpable)cmd).getCommandName());  }  String join=String.join(", ",strList);  Toast.log().info("Commands List: " + join);}  }
class C{  public void addChild(Node node){  if (leftChild == null) {    leftChild=node;  } else   if (rightChild == null) {    rightChild=node;  } else {    throw new IllegalArgumentException("TreeModel.Nodes can only have 2 children");  }  node.parent=this;}  }
class C{  public static KeyStore loadPkcs12KeyStore(File file,char[] password) throws Exception {  return loadKeyStore("pkcs12",file,password);}  }
class C{  public void applyBodyAngularImpulse(float impulse){  getBody().applyAngularImpulse(impulse);}  }
class C{  void initEffectiveKeyBits(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;}  }
class C{  private void step2(){  final SpeakerNPC npc=npcs.get("George");  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_george"),ConversationStates.ATTENDING,"I am not allowed to talk to strangers, but you seem to have something important to says. What is it?",null);  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_finn"),ConversationStates.IDLE,"Thank you for agreeing to tell Finn this message:",new SayTextAction("[quest.coded_message:1]"));  npc.add(ConversationStates.ATTENDING,"",new AndCondition(new TriggerMatchesQuestSlotCondition(QUEST_SLOT,QUEST_INDEX_MESSAGE),new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_george")),ConversationStates.IDLE,"This is indeed quite interesting. Please let Finn know:",new MultipleActions(new CreateAndSayCodedMessage(),new SetQuestAction(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_finn")));  npc.add(ConversationStates.ATTENDING,"",new AndCondition(new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_george"),new NotCondition(new TriggerMatchesQuestSlotCondition(QUEST_SLOT,1)),new TriggerMightbeACodedMessageCondition()),ConversationStates.ATTENDING,"Oh? That doesn't make any sense at all!",null);}  }
class C{  public void reset(){  count=0;}  }
class C{  public int count(){  return items.size;}  }
class C{  protected void checkResultByFile(@Nullable String message,@TestDataFile @NotNull String filePath,final boolean ignoreTrailingSpaces){  bringRealEditorBack();  getProject().getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();  if (ignoreTrailingSpaces) {    final Editor editor=myEditor;    TrailingSpacesStripper.stripIfNotCurrentLine(editor.getDocument(),false);    EditorUtil.fillVirtualSpaceUntilCaret(editor);  }  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();  String fullPath=getTestDataPath() + filePath;  File ioFile=new File(fullPath);  assertTrue(getMessage("Cannot find file " + fullPath,message),ioFile.exists());  String fileText=null;  try {    fileText=FileUtil.loadFile(ioFile,CharsetToolkit.UTF8_CHARSET);  } catch (  IOException e) {    LOG.error(e);  }  checkResultByText(message,StringUtil.convertLineSeparators(fileText),ignoreTrailingSpaces,getTestDataPath() + "/" + filePath);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public T caseWhileStatement(WhileStatement object){  return null;}  }
class C{  public boolean canStripWhiteSpace(){  return (null != m_whiteSpaceInfoList);}  }
class C{  @Override public Node generateXML(Document doc){  Element var=doc.createElement("variable");  Attr id=doc.createAttribute("id");  id.setValue(variable);  var.setAttributeNode(id);  for (  Node node : function.generateXML(doc)) {    var.appendChild(node);  }  return var;}  }
class C{  private boolean testWheelValue(int id,int value){  return getWheel(id).getCurrentItem() == value;}  }
class C{  public static void populate(BufferEntry bufferEntry){  Buffer.bufferEntry=bufferEntry;}  }
class C{  public PacketOutputStream writeTimeLength(final Calendar calendar,final boolean fractionalSeconds){  if (fractionalSeconds) {    assureBufferCapacity(13);    buffer.put((byte)12);    buffer.put((byte)0);    buffer.putInt(0);    buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY));    buffer.put((byte)calendar.get(Calendar.MINUTE));    buffer.put((byte)calendar.get(Calendar.SECOND));    buffer.putInt(calendar.get(Calendar.MILLISECOND) * 1000);  } else {    assureBufferCapacity(9);    buffer.put((byte)8);    buffer.put((byte)0);    buffer.putInt(0);    buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY));    buffer.put((byte)calendar.get(Calendar.MINUTE));    buffer.put((byte)calendar.get(Calendar.SECOND));  }  return this;}  }
class C{  private Checksum(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x00) {    cksumType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x01) {    checksum=der.getData().getOctetString();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (encoding.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public GDALDataRaster(Object source) throws IllegalArgumentException, FileNotFoundException {  this(source,false);}  }
class C{  public Compiler(ErrorListener errorHandler,SourceLocator locator,FunctionTable fTable){  m_errorHandler=errorHandler;  m_locator=locator;  m_functionTable=fTable;}  }
class C{  protected VariableReference attemptObjectGeneration(TestCase test,int position,int recursionDepth,boolean allowNull) throws ConstructionFailedException {  if (allowNull && Randomness.nextDouble() <= Properties.NULL_PROBABILITY) {    logger.debug("Using a null reference to satisfy the type: {}",Object.class);    return createNull(test,Object.class,position,recursionDepth);  }  Set<GenericClass> castClasses=new LinkedHashSet<>(CastClassManager.getInstance().getCastClasses());  List<GenericClass> classes=castClasses.stream().filter(null).collect(Collectors.toList());  classes.add(new GenericClass(Object.class));  GenericClass choice=Randomness.choice(classes);  logger.debug("Chosen class for Object: {}",choice);  if (choice.isString()) {    return createOrReuseVariable(test,String.class,position,recursionDepth,null,true,false,false);  }  GenericAccessibleObject<?> o=TestCluster.getInstance().getRandomGenerator(choice);  currentRecursion.add(o);  if (o == null) {    if (!TestCluster.getInstance().hasGenerator(Object.class)) {      logger.debug("We have no generator for Object.class ");    }    throw new ConstructionFailedException("Generator is null");  } else   if (o.isField()) {    logger.debug("Attempting generating of Object.class via field of type Object.class");    VariableReference ret=addField(test,(GenericField)o,position,recursionDepth + 1);    ret.setDistance(recursionDepth + 1);    logger.debug("Success in generating type Object.class");    return ret;  } else   if (o.isMethod()) {    logger.debug("Attempting generating of Object.class via method {} of type Object.class",o);    VariableReference ret=addMethod(test,(GenericMethod)o,position,recursionDepth + 1);    logger.debug("Success in generating type Object.class");    ret.setDistance(recursionDepth + 1);    return ret;  } else   if (o.isConstructor()) {    logger.debug("Attempting generating of Object.class via constructor {} of type Object.class",o);    VariableReference ret=addConstructor(test,(GenericConstructor)o,position,recursionDepth + 1);    logger.debug("Success in generating Object.class");    ret.setDistance(recursionDepth + 1);    return ret;  } else {    logger.debug("No generators found for Object.class");    throw new ConstructionFailedException("No generator found for Object.class");  }}  }
class C{  public static final void readExceptionFromParcel(Parcel reply){  int code=reply.readExceptionCode();  if (code == 0)   return;  String msg=reply.readString();  DatabaseUtils.readExceptionFromParcel(reply,msg,code);}  }
class C{  public static byte[] decrypt(final byte[] data,final int offset,final int length){  final int blockSize=KEY_SIZE / 8;  try (final ByteArrayInputStream in=new ByteArrayInputStream(data,offset,length);final ByteArrayOutputStream out=new ByteArrayOutputStream(length)){    final Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");    cipher.init(Cipher.DECRYPT_MODE,PUBLIC_KEY);    final byte[] buffer=new byte[blockSize];    int bytesRead;    byte[] result;    while ((bytesRead=in.read(buffer)) > 0) {      result=cipher.doFinal(buffer,0,bytesRead);      if (result != null)       out.write(result);    }    return out.toByteArray();  } catch (  final Exception e) {    LEnv.LOGGER.trace("Failed to decrypt data. Corrupt encrypted data?",e);    return null;  }}  }
class C{  public void removeCommandListener(ActionListener l){  commandListener.removeListener(l);}  }
class C{  public synchronized static void clearWeakReferencesNow(){  LAYOUTS.clear();}  }
class C{  public InsufficientDataException(String message){  super(message);}  }
class C{  public final boolean isAbstract(){  return Modifier.isAbstract(getModifiers());}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  boolean didUpgrade=false;  if (oldVersion < 50) {    Log.i(TAG,String.format("Upgrading database from %s to 50.",oldVersion));    ContentValues cv=new ContentValues(1);    cv.put("cachedImages",0);    db.update(TABLE_ARTICLES,cv,"cachedImages IS null",null);    didUpgrade=true;  }  if (oldVersion < 51) {    String sql="DROP TABLE IF EXISTS " + TABLE_MARK;    String sql2="CREATE TABLE " + TABLE_MARK + " (id INTEGER,"+ " type INTEGER,"+ " "+ MARK_READ+ " INTEGER,"+ " "+ MARK_STAR+ " INTEGER,"+ " "+ MARK_PUBLISH+ " INTEGER,"+ " note TEXT,"+ " PRIMARY KEY(id, type))";    Log.i(TAG,String.format("Upgrading database from %s to 51.",oldVersion));    Log.i(TAG,String.format(" (Executing: %s)",sql));    Log.i(TAG,String.format(" (Executing: %s)",sql2));    db.execSQL(sql);    db.execSQL(sql2);    didUpgrade=true;  }  if (oldVersion < 52) {    String sql="ALTER TABLE " + TABLE_ARTICLES + " ADD COLUMN articleLabels TEXT";    Log.i(TAG,String.format("Upgrading database from %s to 52.",oldVersion));    Log.i(TAG,String.format(" (Executing: %s)",sql));    db.execSQL(sql);    didUpgrade=true;  }  if (oldVersion < 53) {    Log.i(TAG,String.format("Upgrading database from %s to 53.",oldVersion));    didUpgrade=createRemoteFilesSupportDBObjects(db);    if (didUpgrade) {      ContentValues cv=new ContentValues(1);      cv.putNull("cachedImages");      db.update(TABLE_ARTICLES,cv,null,null);      ImageCache ic=Controller.getInstance().getImageCache();      if (ic != null)       ic.clear();    }  }  if (oldVersion < 58) {    Log.i(TAG,String.format("Upgrading database from %s to 58.",oldVersion));    try {      db.beginTransaction();      db.execSQL("DROP TABLE IF EXISTS " + TABLE_REMOTEFILES);      db.execSQL("DROP TABLE IF EXISTS " + TABLE_REMOTEFILE2ARTICLE);      db.execSQL("PRAGMA writable_schema=1;");      String sql="UPDATE SQLITE_MASTER SET SQL = '%s' WHERE NAME = '%s';";      db.execSQL(String.format(sql,CREATE_TABLE_CATEGORIES,TABLE_CATEGORIES));      db.execSQL(String.format(sql,CREATE_TABLE_FEEDS,TABLE_FEEDS));      db.execSQL(String.format(sql,CREATE_TABLE_ARTICLES,TABLE_ARTICLES));      db.execSQL("PRAGMA writable_schema=0;");      if (createRemoteFilesSupportDBObjects(db)) {        db.setTransactionSuccessful();        didUpgrade=true;      }    }  finally {      db.execSQL("PRAGMA foreign_keys=ON;");      db.endTransaction();      specialUpgradeSuccessful=true;    }  }  if (oldVersion < 59) {    String sql="ALTER TABLE " + TABLE_ARTICLES + " ADD COLUMN author TEXT";    Log.i(TAG,String.format("Upgrading database from %s to 59.",oldVersion));    Log.i(TAG,String.format(" (Executing: %s)",sql));    db.execSQL(sql);    didUpgrade=true;  }  if (oldVersion < 60) {    Log.i(TAG,String.format("Upgrading database from %s to 60.",oldVersion));    Log.i(TAG," (Re-Creating View: remotefiles_sequence )");    createRemotefilesView(db);    didUpgrade=true;  }  if (oldVersion < 61) {    String sql="ALTER TABLE " + TABLE_ARTICLES + " ADD COLUMN note TEXT";    Log.i(TAG,String.format("Upgrading database from %s to 61.",oldVersion));    Log.i(TAG,String.format(" (Executing: %s)",sql));    db.execSQL(sql);    didUpgrade=true;  }  if (oldVersion < 64) {    Log.i(TAG,String.format("Upgrading database from %s to 64.",oldVersion));    try {      db.beginTransaction();      db.execSQL("PRAGMA writable_schema=1;");      String sql="UPDATE SQLITE_MASTER SET SQL = '%s' WHERE NAME = '%s';";      db.execSQL(String.format(sql,CREATE_TABLE_MARK,TABLE_MARK));      db.execSQL("PRAGMA writable_schema=0;");      db.execSQL(CREATE_TABLE_NOTES);      db.setTransactionSuccessful();    }  finally {      db.endTransaction();    }    didUpgrade=true;  }  if (!didUpgrade) {    Log.i(TAG,"Upgrading database, this will drop tables and recreate.");    dropAllTables(db);    onCreate(db);  }}  }
class C{  public void postUnmarshallingInit(){  if (getTarget() != null) {    if (getTarget().getFanIn() != null) {      getTarget().addAfferent(this);    } else {      System.out.println("Warning:" + getId() + " has null fanIn");    }  }  if (getSource() != null) {    if (getSource().getFanOut() != null) {      getSource().addEfferent(this);    } else {      System.out.println("Warning:" + getId() + " has null fanOut");    }  }}  }
class C{  void init(Object key,int xstate){  this.key=key.toString();  this.xstate=xstate;}  }
class C{  public TransitVehicleVolumeAnalyzer(Scenario sc,Double interval,String targetCoordinateSystem){  super(TransitVehicleVolumeAnalyzer.class.getSimpleName());  this.sc=sc;  this.handler=new TransitVehicleVolumeHandler(sc.getTransitSchedule(),interval);  this.targetCoordinateSystem=targetCoordinateSystem;}  }
class C{  public GetSnapshotsRequestBuilder addSnapshots(String... snapshots){  request.snapshots(ObjectArrays.concat(request.snapshots(),snapshots,String.class));  return this;}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  public void disconnect(Navigator navigator){  if (navigator != null && navigator != this) {    removeNavigationListener(navigator);    navigator.removeNavigationListener(this);  }}  }
class C{  public boolean compareRestrictions(){  boolean newInfo=false;  for (  OwlClass c1 : restrictions) {    Set<Resource> avfSuperClasses=c1.getAvfSuperClasses();    Set<Resource> svfSuperClasses=c1.getSvfSuperClasses();    if (avfSuperClasses.isEmpty() && svfSuperClasses.isEmpty()) {      continue;    }    for (    OwlClass c2 : restrictions) {      if (c1 != c2) {        Set<Resource> avf2=c2.allValuesFrom();        avf2.retainAll(avfSuperClasses);        if (avf2.isEmpty()) {          Set<Resource> svf2=c2.someValuesFrom();          svf2.retainAll(svfSuperClasses);          if (svf2.isEmpty()) {            continue;          }        }        newInfo=c1.addSuperClass(c2) || newInfo;      }    }  }  return newInfo;}  }
class C{  public void reply(SerialReply r){  SerialNode node=(SerialNode)_memo.getTrafficController().getNodeFromAddress(r.getUA());  if (node != null) {    node.markChanges(r);  }}  }
class C{  private float multicubicInterpolate(float[] encoded,int od){  System.out.println("Cubic interpolation not supported!");  return multilinearInterpolate(encoded,od);}  }
class C{  protected FeatureConfigurationImpl(){  super();}  }
class C{  public final double splitCritValue(Distribution bags,double totalNoInst,double oldEnt){  double numerator;  double noUnknown;  double unknownRate;  noUnknown=totalNoInst - bags.total();  unknownRate=noUnknown / totalNoInst;  numerator=(oldEnt - newEnt(bags));  numerator=(1 - unknownRate) * numerator;  if (Utils.eq(numerator,0)) {    return 0;  }  return numerator / bags.total();}  }
class C{  public boolean isAntiAliasedTextSupported(){  return impl.isAntiAliasedTextSupported();}  }
class C{  private static Set<Branch> collectCoveredBranches(TestSuiteChromosome suite){  final Set<Branch> suiteCoveredBranches=new HashSet<Branch>();  for (  TestChromosome test : suite.getTestChromosomes()) {    final Set<Branch> testCoveredBranches=getCoveredBranches(test);    suiteCoveredBranches.addAll(testCoveredBranches);  }  return suiteCoveredBranches;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'ParentModel' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  private String hmac(String stringToSign){  String signature=null;  byte[] data;  byte[] rawHmac;  try {    data=stringToSign.getBytes(UTF8_CHARSET);    rawHmac=mac.doFinal(data);    Base64 encoder=new Base64();    signature=new String(encoder.encode(rawHmac),Charset.defaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(UTF8_CHARSET + " is unsupported!",e);  }  return signature;}  }
class C{  private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){  AreaPanel ap=api.ap();  TimeTree rootTt=ap.getTimeTree();  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);  if (tt == null || tt.id == api.currTtId)   return false;  sortedApiTree.remove(api);  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);  return true;}  }
class C{  private void calculateDistances(int point){  int start=getDistanceIndex(point);  for (int i=0; i < point; i++) {    distances[start + i]=getDistance(ntree.get(point),ntree.get(i));  }  int numPoints=getNumPoints();  for (int i=point + 1; i < numPoints; i++) {    start=getDistanceIndex(i);    distances[start + point]=getDistance(ntree.get(point),ntree.get(i));  }}  }
class C{  public PostConstructViewMapEvent(UIViewRoot root){  super(root);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_04(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbN=null;  ByteBuffer bN=null;  SSLEngine e=getEngine(host,port);  e.setUseClientMode(true);  try {    e.wrap(bbA,0,3,bN);    fail("IllegalArgumentException must be thrown for null srcs byte buffer array");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException ex) {  }catch (  Exception ex) {    fail(ex + " was thrown instead of IllegalArgumentException");  }  try {    e.wrap(bbN,0,0,bN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException ex) {  }catch (  NullPointerException npe) {  }catch (  Exception ex) {    fail(ex + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public int find(int p){  while (p != id[p]) {    id[p]=id[id[p]];    p=id[p];  }  return p;}  }
class C{  public static void pt(String txt,int level){  p(txt,level,true);}  }
class C{  private void applySetTimestamp(Long timestamp) throws SQLException {  if (timestamp != null && conn.supportsControlTimestamp()) {    if (timestamp.longValue() != currentTimestamp) {      currentTimestamp=timestamp.longValue();      statement.addBatch(conn.getControlTimestampQuery(timestamp));    }  }}  }
class C{  private void finishCurrentState(){  int numTransitions=states[2 * curState + 1];  assert numTransitions > 0;  int offset=states[2 * curState];  int start=offset / 3;  destMinMaxSorter.sort(start,start + numTransitions);  int upto=0;  int min=-1;  int max=-1;  int dest=-1;  for (int i=0; i < numTransitions; i++) {    int tDest=transitions[offset + 3 * i];    int tMin=transitions[offset + 3 * i + 1];    int tMax=transitions[offset + 3 * i + 2];    if (dest == tDest) {      if (tMin <= max + 1) {        if (tMax > max) {          max=tMax;        }      } else {        if (dest != -1) {          transitions[offset + 3 * upto]=dest;          transitions[offset + 3 * upto + 1]=min;          transitions[offset + 3 * upto + 2]=max;          upto++;        }        min=tMin;        max=tMax;      }    } else {      if (dest != -1) {        transitions[offset + 3 * upto]=dest;        transitions[offset + 3 * upto + 1]=min;        transitions[offset + 3 * upto + 2]=max;        upto++;      }      dest=tDest;      min=tMin;      max=tMax;    }  }  if (dest != -1) {    transitions[offset + 3 * upto]=dest;    transitions[offset + 3 * upto + 1]=min;    transitions[offset + 3 * upto + 2]=max;    upto++;  }  nextTransition-=(numTransitions - upto) * 3;  states[2 * curState + 1]=upto;  minMaxDestSorter.sort(start,start + upto);  if (deterministic && upto > 1) {    int lastMax=transitions[offset + 2];    for (int i=1; i < upto; i++) {      min=transitions[offset + 3 * i + 1];      if (min <= lastMax) {        deterministic=false;        break;      }      lastMax=transitions[offset + 3 * i + 2];    }  }}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public ConditionLock(int initialState){  state=initialState;}  }
class C{  protected Parameter createSimSpeedParam(){  Parameter result=new Parameter(SimulationPaneCtrl.PARAM_SIM_SPEED,20,100,400,800,Integer.MAX_VALUE);  result.setValueNames("VeryFast","Fast","Medium","Slow","Pause");  result.setDefaultValueIndex(2);  return result;}  }
class C{  private void co_yield(boolean moreRemains) throws SAXException {  if (fNoMoreEvents)   return;  try {    Object arg=Boolean.FALSE;    if (moreRemains) {      arg=fCoroutineManager.co_resume(Boolean.TRUE,fSourceCoroutineID,fControllerCoroutineID);    }    if (arg == Boolean.FALSE) {      fNoMoreEvents=true;      if (fXMLReader != null)       throw new StopException();      fCoroutineManager.co_exit_to(Boolean.FALSE,fSourceCoroutineID,fControllerCoroutineID);    }  } catch (  NoSuchMethodException e) {    fNoMoreEvents=true;    fCoroutineManager.co_exit(fSourceCoroutineID);    throw new SAXException(e);  }}  }
class C{  public static MosaicDefinition createMosaicDefinition(final NamespaceId namespaceId,final int id){  return createMosaicDefinition(generateRandomAccount(),createMosaicId(namespaceId,id),createMosaicProperties());}  }
class C{  protected int index(int rank){  return zero + rank * stride;}  }
class C{  public Map<String,Object> run(ServiceDispatcher dispatcher,String localName,Map<String,Object> context) throws GenericServiceException {  if (this.getSendMode().equals("all")) {    return runAll(dispatcher,localName,context);  } else   if (this.getSendMode().equals("round-robin")) {    return runIndex(dispatcher,localName,context,(++lastServiceRan % services.size()));  } else   if (this.getSendMode().equals("random")) {    int randomIndex=(int)(Math.random() * (services.size()));    return runIndex(dispatcher,localName,context,randomIndex);  } else   if (this.getSendMode().equals("first-available")) {    return runOne(dispatcher,localName,context);  } else   if (this.getSendMode().equals("none")) {    return new HashMap<String,Object>();  } else {    throw new GenericServiceException("This mode is not currently supported");  }}  }
class C{  public void testContextInitNullArgs() throws Exception {  SSLContext ctx=SSLContext.getInstance("TLS");  ctx.init(null,null,null);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static GamaRuntimeException create(final Throwable ex,final IScope scope){  if (ex instanceof GamaRuntimeException) {    return (GamaRuntimeException)ex;  }  if (ex instanceof IOException || ex instanceof FileNotFoundException) {    return new GamaRuntimeFileException(scope,ex);  }  return new GamaRuntimeException(scope,ex);}  }
class C{  private void processChannel(String qName,String data){  if (tagIsEqual(qName,TITLE_TAG))   chan.setTitle(data);  if (tagIsEqual(qName,LINK_TAG))   chan.setLink(data);  if (tagIsEqual(qName,DESCRIPTION_TAG))   chan.setDescription(data);  if (tagIsEqual(qName,COPY_TAG))   chan.setCopyright(data);  if (tagIsEqual(qName,PUB_DATE_TAG))   chan.setPubDate(data);  if (tagIsEqual(qName,LAST_B_DATE_TAG))   chan.setLastBuildDate(data);  if (tagIsEqual(qName,GENERATOR_TAG))   chan.setGenerator(data);  if (tagIsEqual(qName,DOCS_TAG))   chan.setDocs(data);  if (tagIsEqual(qName,TTL_TAG))   chan.setTTL(data);  if (tagIsEqual(qName,LANGUAGE_TAG))   chan.setLanguage(data);  if (qName.toUpperCase().startsWith("DC:"))   processDoublinCoreTags(qName,data,chan);  if (qName.toUpperCase().startsWith("SY:"))   processSyndicationTags(qName,data);}  }
class C{  public ParsedURL(URL baseURL,String urlStr){  userAgent=getGlobalUserAgent();  if (baseURL != null)   data=parseURL(new ParsedURL(baseURL),urlStr); else   data=parseURL(urlStr);}  }
class C{  public void addButtonActionPerformed(){  if (nodeAddr64Field.getText().equals("") && nodeAddrField.getText().equals("")) {    return;  }  XBee64BitAddress guid;  if (!(nodeAddr64Field.getText().equals(""))) {    byte GUID[]=jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText());    guid=new XBee64BitAddress(GUID);  } else {    guid=XBee64BitAddress.UNKNOWN_ADDRESS;  }  XBee16BitAddress address;  if (!(nodeAddrField.getText().equals(""))) {    byte addr[]=jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText());    address=new XBee16BitAddress(addr);  } else {    address=XBee16BitAddress.UNKNOWN_ADDRESS;  }  String Identifier=nodeIdentifierField.getText();  RemoteXBeeDevice remoteDevice=new RemoteXBeeDevice(xtc.getXBee(),guid,address,Identifier);  curNode=(XBeeNode)xtc.getNodeFromXBeeDevice(remoteDevice);  if (curNode != null) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error1",remoteDevice),Bundle.getMessage("AddNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  try {    xtc.getXBee().getNetwork().addRemoteDevice(remoteDevice);    XBeeNode node=new XBeeNode(remoteDevice);    xtc.registerNode(node);    parent.nodeListChanged();  } catch (  TimeoutException toe) {    log.error("Timeout adding node {}.",remoteDevice);    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error3"),Bundle.getMessage("AddNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Error creating XBee Node, constructor returned null");    return;  }catch (  XBeeException xbe) {    log.error("Exception adding node {}.",remoteDevice);    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error3"),Bundle.getMessage("AddNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Error creating XBee Node, constructor returned null");    return;  }  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piValue;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  piValue=piNode.getNodeValue();  assertEquals("value","PIDATA",piValue);}  }
class C{  public synchronized void waitForFinish() throws InterruptedException {  if (!finished) {    wait();  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TimeTableXYDataset clone=(TimeTableXYDataset)super.clone();  clone.values=(DefaultKeyedValues2D)this.values.clone();  clone.workingCalendar=(Calendar)this.workingCalendar.clone();  return clone;}  }
class C{  public Message(Message other){  if (other.isSetReceivers()) {    List<String> __this__receivers=new ArrayList<String>(other.receivers);    this.receivers=__this__receivers;  }  if (other.isSetSender()) {    this.sender=other.sender;  }  if (other.isSetSubject()) {    this.subject=other.subject;  }  if (other.isSetMessageType()) {    this.messageType=other.messageType;  }  if (other.isSetExtendAttrs()) {    this.extendAttrs=other.extendAttrs;  }  if (other.isSetAttachments()) {    List<Attachment> __this__attachments=new ArrayList<Attachment>(other.attachments.size());    for (    Attachment other_element : other.attachments) {      __this__attachments.add(new Attachment(other_element));    }    this.attachments=__this__attachments;  }  if (other.isSetParams()) {    Map<String,String> __this__params=new HashMap<String,String>(other.params);    this.params=__this__params;  }}  }
class C{  private static void findArtworkInMovieFolder(MovieSet movieSet,Movie movie){  for (  MediaFileType type : SUPPORTED_ARTWORK_TYPES) {    if (!movieSet.getMediaFiles(type).isEmpty()) {      continue;    }    for (    String fileType : SUPPORTED_ARTWORK_FILETYPES) {      String artworkFileName="movieset-" + type.name().toLowerCase() + "."+ fileType;      Path artworkFile=movie.getPathNIO().resolve(artworkFileName);      if (Files.exists(artworkFile)) {        MediaFile mediaFile=new MediaFile(artworkFile,type);        mediaFile.gatherMediaInformation();        movieSet.addToMediaFiles(mediaFile);      }    }  }}  }
class C{  public static int hashCodeForString(String s){  int b=31;  int hashCode=0;  for (int i=0; i < s.length(); i++) {    hashCode=b * hashCode + (int)s.charAt(i);  }  return hashCode;}  }
class C{  public DOMX509IssuerSerial(String issuerName,BigInteger serialNumber){  if (issuerName == null) {    throw new NullPointerException("issuerName cannot be null");  }  if (serialNumber == null) {    throw new NullPointerException("serialNumber cannot be null");  }  new X500Principal(issuerName);  this.issuerName=issuerName;  this.serialNumber=serialNumber;}  }
class C{  public void edit(File file) throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.EDIT);  file.canWrite();  checkFileValidation(file);  peer.edit(file);}  }
class C{  public static void createClientCache1UniqueWriter(String host,Integer port) throws Exception {  ConflationDUnitTest test=new ConflationDUnitTest();  cache=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setPoolName(createPool(host,"p1",port,true).getName());  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME1,attrs);  factory.setPoolName(createPool(host,"p2",port,true).getName());  attrs=factory.create();  cache.createRegion(REGION_NAME2,attrs);}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  public TypecheckResult runTest(TestConfiguration configuration){  CompilationResult result=compile(configuration);  return interpretResults(configuration,result);}  }
class C{  public void ensureRedirectValid(){  if (hostName == null && protocol == null && replaceKeyPrefixWith == null && replaceKeyWith == null && httpRedirectCode == null && mirrorURL == null) {    throw new IllegalArgumentException(MessageFormat.format("RoutingRuleRedirectInvalid","Redirect element must contain at least one of the sibling elements"));  }  if (replaceKeyPrefixWith != null && replaceKeyWith != null) {    throw new IllegalArgumentException(MessageFormat.format("RoutingRuleRedirectInvalid","ReplaceKeyPrefixWith or ReplaceKeyWith only choose one"));  }  if (redirectType == RedirectType.Mirror && mirrorURL == null) {    throw new IllegalArgumentException(MessageFormat.format("RoutingRuleRedirectInvalid","MirrorURL must have a value"));  }  if (redirectType == RedirectType.Mirror) {    if ((!mirrorURL.startsWith("http://") && !mirrorURL.startsWith("https://")) || !mirrorURL.endsWith("/")) {      throw new IllegalArgumentException(MessageFormat.format("RoutingRuleRedirectInvalid","MirrorURL is invalid",mirrorURL));    }  }}  }
class C{  protected void resetValues(){synchronized (values) {    values.removeAll(new ArrayList<String>(values));  }}  }
class C{  public XYBarRenderer(double margin){  super();  this.margin=margin;  this.base=0.0;  this.useYInterval=false;  this.gradientPaintTransformer=new StandardGradientPaintTransformer();  this.drawBarOutline=false;  this.legendBar=new Rectangle2D.Double(-3.0,-5.0,6.0,10.0);  this.barPainter=getDefaultBarPainter();  this.shadowsVisible=getDefaultShadowsVisible();  this.shadowXOffset=4.0;  this.shadowYOffset=4.0;  this.barAlignmentFactor=-1.0;}  }
class C{  public SVGOMPoint(){}  }
class C{  static boolean isLegal(int ch){  return isAlpha(ch) || isNumeric(ch) || URI.UNRESERVED_EXTRAS.indexOf(ch) != -1 || URI.RESERVED.indexOf(ch) != -1 || isLegalUnicode(ch);}  }
class C{  protected boolean assignToNearestCluster(ArrayDBIDs means,Mean[] mdist,List<? extends ModifiableDBIDs> clusters,DistanceQuery<V> distQ){  boolean changed=false;  double[] dists=new double[k];  for (DBIDIter iditer=distQ.getRelation().iterDBIDs(); iditer.valid(); iditer.advance()) {    int minIndex=0;    double mindist=Double.POSITIVE_INFINITY;{      int i=0;      for (DBIDIter miter=means.iter(); miter.valid(); miter.advance(), i++) {        dists[i]=distQ.distance(iditer,miter);        if (dists[i] < mindist) {          minIndex=i;          mindist=dists[i];        }      }    }    if (clusters.get(minIndex).add(iditer)) {      changed=true;      mdist[minIndex].put(mindist);      for (int i=0; i < k; i++) {        if (i != minIndex && clusters.get(i).remove(iditer)) {          mdist[minIndex].put(dists[i],-1);          break;        }      }    }  }  return changed;}  }
class C{  private void simulateBlock(SsaBasicBlock block){  for (  SsaInsn insn : block.getInsns()) {    if (insn instanceof PhiInsn) {      simulatePhi((PhiInsn)insn);    } else {      simulateStmt(insn);    }  }}  }
class C{  void deleteStreams(Transaction t,final Set<Long> streamIds){  if (streamIds.isEmpty()) {    return;  }  Set<StreamTestWithHashStreamMetadataTable.StreamTestWithHashStreamMetadataRow> smRows=Sets.newHashSet();  Multimap<StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxRow,StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxColumn> shToDelete=HashMultimap.create();  for (  Long streamId : streamIds) {    smRows.add(StreamTestWithHashStreamMetadataTable.StreamTestWithHashStreamMetadataRow.of(streamId));  }  StreamTestWithHashStreamMetadataTable table=tables.getStreamTestWithHashStreamMetadataTable(t);  Map<StreamTestWithHashStreamMetadataTable.StreamTestWithHashStreamMetadataRow,StreamMetadata> metadatas=table.getMetadatas(smRows);  Set<StreamTestWithHashStreamValueTable.StreamTestWithHashStreamValueRow> streamValueToDelete=Sets.newHashSet();  for (  Entry<StreamTestWithHashStreamMetadataTable.StreamTestWithHashStreamMetadataRow,StreamMetadata> e : metadatas.entrySet()) {    Long streamId=e.getKey().getId();    long blocks=getNumberOfBlocksFromMetadata(e.getValue());    for (long i=0; i < blocks; i++) {      streamValueToDelete.add(StreamTestWithHashStreamValueTable.StreamTestWithHashStreamValueRow.of(streamId,i));    }    ByteString streamHash=e.getValue().getHash();    Sha256Hash hash=Sha256Hash.EMPTY;    if (streamHash != com.google.protobuf.ByteString.EMPTY) {      hash=new Sha256Hash(streamHash.toByteArray());    } else {      log.error("Empty hash for stream " + streamId);    }    StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxRow hashRow=StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxRow.of(hash);    StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxColumn column=StreamTestWithHashStreamHashAidxTable.StreamTestWithHashStreamHashAidxColumn.of(streamId);    shToDelete.put(hashRow,column);  }  tables.getStreamTestWithHashStreamHashAidxTable(t).delete(shToDelete);  tables.getStreamTestWithHashStreamValueTable(t).delete(streamValueToDelete);  table.delete(smRows);}  }
class C{  private CacheSnapshot updateResultSet(CacheSnapshot update,GemFireVM poster){  noteResponse(poster);  if (update instanceof EntrySnapshot) {    if (snaps instanceof CompoundRegionSnapshot) {      throw new IllegalStateException(LocalizedStrings.CacheCollector_UNABLE_TO_MIX_REGION_AND_ENTRY_SNAPSHOTS_IN_CACHECOLLECTOR.toLocalizedString());    }    if (snaps == null) {      snaps=new CompoundEntrySnapshot(update.getName());    }    ((CompoundEntrySnapshot)snaps).addCache(poster,(EntrySnapshot)update);  } else   if (update instanceof RegionSnapshot) {    if (snaps instanceof CompoundEntrySnapshot) {      throw new IllegalStateException(LocalizedStrings.CacheCollector_UNABLE_TO_MIX_REGION_AND_ENTRY_SNAPSHOTS_IN_CACHECOLLECTOR.toLocalizedString());    }    if (snaps == null) {      snaps=new CompoundRegionSnapshot(update.getName().toString());    }    ((CompoundRegionSnapshot)snaps).addCache(poster,(RegionSnapshot)update);  }  return snaps;}  }
class C{  private void findOutputEventsForEventEdge(Edge entryEdge){  logger.info("find output events for event edge: {}",entryEdge);  CallGraph cg=Scene.v().getCallGraph();  LinkedList<Edge> stack=new LinkedList<Edge>();  Set<Edge> visitedEdges=new HashSet<Edge>();  stack.add(entryEdge);  while (!stack.isEmpty()) {    Edge current=stack.pop();    if (visitedEdges.contains(current))     continue;    MethodOrMethodContext momc=current.getTgt();    visitedEdges.add(current);    if (API.v().isSystemMethod(momc.method()))     continue;    Iterator<Edge> ciEdges=cg.edgesOutOf(momc);    while (ciEdges.hasNext()) {      Edge outgoingEdge=ciEdges.next();      logger.info("Looking at edge: {}",outgoingEdge);      SootMethod calleeMethod=outgoingEdge.tgt();      if (API.v().isSystemMethod(calleeMethod)) {        addOutputEvent(outgoingEdge,entryEdge);      } else {        if (!visitedEdges.contains(outgoingEdge))         stack.push(outgoingEdge);      }    }  }}  }
class C{  private void updateEmptyViewVisibility(Adapter adapter){  mEmptyView.setVisibility(adapter.getItemCount() == 0 ? View.VISIBLE : View.GONE);}  }
class C{  public void createQtree(String qtree,String volume,Boolean opLocks,String securityStyle){  if (log.isDebugEnabled()) {    log.debug("Creating Qtree " + qtree + " in volume "+ volume);  }  ClusterQtreeCommands commands=new ClusterQtreeCommands(server.getNaServer());  commands.createQtree(qtree,volume,opLocks,securityStyle);}  }
class C{  public long loadLong(){  return SimulatedMemory.getLong(this);}  }
class C{  private static VMInfo attachToVM(LocalVirtualMachine localvm,int vmid) throws AttachNotSupportedException, IOException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, Exception {  try {    ProxyClient proxyClient=ProxyClient.getProxyClient(localvm);    proxyClient.connect();    if (proxyClient.getConnectionState() == ConnectionState.DISCONNECTED) {      Logger.getLogger("jvmtop").log(Level.FINE,"connection refused (PID=" + vmid + ")");      return createDeadVM(vmid,localvm);    }    return new VMInfo(proxyClient,localvm,vmid + "");  } catch (  ConnectException rmiE) {    if (rmiE.getMessage().contains("refused")) {      Logger.getLogger("jvmtop").log(Level.FINE,"connection refused (PID=" + vmid + ")",rmiE);      return createDeadVM(vmid,localvm,VMInfoState.CONNECTION_REFUSED);    }    rmiE.printStackTrace(System.err);  }catch (  IOException e) {    if ((e.getCause() != null && e.getCause() instanceof AttachNotSupportedException) || e.getMessage().contains("Permission denied")) {      Logger.getLogger("jvmtop").log(Level.FINE,"could not attach (PID=" + vmid + ")",e);      return createDeadVM(vmid,localvm,VMInfoState.CONNECTION_REFUSED);    }    e.printStackTrace(System.err);  }catch (  Exception e) {    Logger.getLogger("jvmtop").log(Level.WARNING,"could not attach (PID=" + vmid + ")",e);  }  return createDeadVM(vmid,localvm);}  }
class C{  public FaultyHeaderResponse(){  requestFileName="getstate.query";  responseFile="faulty-header.query";}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public void handleUploadAborted(){  if (mLogger.isActivated()) {    mLogger.debug("File upload aborted");  }synchronized (mLock) {    mFileUploadService.removeFileUpload(mUploadId);    setState(FileUpload.State.ABORTED);  }}  }
class C{  public DefaultClientWebRequestBuilder body(Object content){  this.body=Mono.just(content);  this.elementType=ResolvableType.forInstance(content);  return this;}  }
class C{  public boolean isPassthroughSupported(String mimeType){  return audioCapabilities != null && audioCapabilities.supportsEncoding(getEncodingForMimeType(mimeType));}  }
class C{  public static boolean isMonth(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,1,12);}  }
class C{  protected void sequence_PostfixExpression(ISerializationContext context,PostfixExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.POSTFIX_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.POSTFIX_EXPRESSION__EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.POSTFIX_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.POSTFIX_EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),semanticObject.getExpression());  feeder.accept(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  public boolean isPlain(){  return !(bold || italic);}  }
class C{  public final List cdr(){  List newList=new List();  newList.first=this.first.next;  newList.last=(newList.first == null) ? null : this.last;  return newList;}  }
class C{  public void join(){synchronized (this) {    isAlive=false;    notifyAll();  }  Thread[] threads=new Thread[activeCount()];  int count=enumerate(threads);  for (int i=0; i < count; i++) {    try {      threads[i].join();    } catch (    InterruptedException ex) {    }  }}  }
class C{  public static void doMain(String[] args){  String job="java:saveFromMongoToCassandra";  String keyspaceName="test";  final String outputTableName="copy_mongo";  String host="127.0.0.1:27017";  String database="test";  String inputCollection="input";  ContextProperties p=new ContextProperties(args);  DeepSparkContext deepContext=new DeepSparkContext(p.getCluster(),job,p.getSparkHome(),p.getJars());  MongoDeepJobConfig inputConfigCell=MongoConfigFactory.createMongoDB().host(host).database(database).collection(inputCollection).createInputSplit(false).initialize();  JavaRDD<Cells> inputRDD=deepContext.createJavaRDD(inputConfigCell);  for (  Cells cells : inputRDD.collect()) {    cells.getCells();  }  ContextProperties p2=new ContextProperties(args);  CassandraDeepJobConfig<Cells> outputConfig=CassandraConfigFactory.create().host(p2.getCassandraHost()).cqlPort(p2.getCassandraCqlPort()).rpcPort(p2.getCassandraThriftPort()).keyspace(keyspaceName).table(outputTableName).createTableOnWrite(true).initialize();  deepContext.saveRDD(inputRDD.rdd(),outputConfig);  deepContext.stop();}  }
class C{  public String subSpaceSizeTipText(){  return "Size of each subSpace: if less than 1 as a percentage of the " + "number of attributes, otherwise the absolute number of attributes.";}  }
class C{  public void appendStart(StringBuffer buffer,Object object){  if (object != null) {    appendClassName(buffer,object);    appendIdentityHashCode(buffer,object);    appendContentStart(buffer);    if (fieldSeparatorAtStart) {      appendFieldSeparator(buffer);    }  }}  }
class C{  public void updateReaderAccessibleInfoEdgePool(EdgePool newLeftNodeEdgePool,EdgePool newRightNodeEdgePool){  readerAccessibleInfo=new ReaderAccessibleInfo(readerAccessibleInfo.getLeftNodesToIndexBiMap(),readerAccessibleInfo.getRightNodesToIndexBiMap(),newLeftNodeEdgePool,newRightNodeEdgePool);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T unserial(Class<T> clazz,byte[] data) throws UtilException {  T result=null;  if (data != null && data.length > 0) {    if (Collection.class.isAssignableFrom(clazz) || Map.class.isAssignableFrom(clazz)) {      result=(T)jdkUnserial(data);    } else {      Schema<T> schema=RuntimeSchema.getSchema(clazz);      try {        result=clazz.newInstance();        ProtostuffIOUtil.mergeFrom(data,result,schema);      } catch (      Exception e) {        throw new UtilException(ErrorCodeDef.UNSERIALIZE_ERROR,e);      }    }  }  return result;}  }
class C{  public IpcSharedMemoryInitResponse(String inTokFileName,int inSharedMemId,String outTokFileName,int outSharedMemId,int pid,int size){  this.inTokFileName=inTokFileName;  this.inSharedMemId=inSharedMemId;  this.outTokFileName=outTokFileName;  this.outSharedMemId=outSharedMemId;  this.pid=pid;  this.size=size;}  }
class C{  public static double[][] orthogonalize(double[][] vs){  vs=vs.clone();  for (int i=1; i < vs.length; i++) {    for (int j=0; j < i; j++) {      vs[i]=subtract(vs[i],project(vs[i],vs[j]));    }  }  return vs;}  }
class C{  public void addRemoteCandidate(RemoteCandidate candidate){  logger.info("Add remote candidate for " + toShortString() + ": "+ candidate.toShortString());synchronized (remoteCandidates) {    remoteCandidates.add(candidate);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(0);{    boolean success=false;    try {      insertedNode=employeeNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  protected VisualizePanel createPanel(Instances data) throws Exception {  VisualizePanel result=new ThresholdVisualizePanel();  PlotData2D plot=new PlotData2D(data);  plot.setPlotName("Macro-averaged Performance");  plot.m_displayAllPoints=true;  boolean[] connectPoints=new boolean[data.numInstances()];  for (int cp=1; cp < connectPoints.length; cp++)   connectPoints[cp]=true;  plot.setConnectPoints(connectPoints);  result.addPlot(plot);  if (data.attribute(SAMPLES) != null)   result.setXIndex(data.attribute(SAMPLES).index());  if (data.attribute(ACCURACY) != null)   result.setYIndex(data.attribute(ACCURACY).index());  return result;}  }
class C{  public boolean usesChildrenBounds(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  Rect bounds=getBounds(node);  if (bounds == null) {    return false;  }  node.getBoundsInScreen(mTempRect);  return !mTempRect.equals(bounds);}  }
class C{  private static boolean testMethod(Method method){  Class<?>[] parameterTypes=method.getParameterTypes();  Object parameters[]=new Object[parameterTypes.length];  for (int i=0; i < parameters.length; i++) {    parameters[i]=getParameterValue(parameterTypes[i]);  }  try {    logInfo("Calling " + method);    method.invoke(method.getDeclaringClass(),parameters);  } catch (  IllegalArgumentException e) {    logWarning("IllegalArgumentException for " + method + ": "+ e.getMessage());    e.printStackTrace();  }catch (  IllegalAccessException e) {    logWarning("IllegalAccessException for " + method + ": "+ e.getMessage());    e.printStackTrace();  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof UnsatisfiedLinkError) {      logWarning("Missing " + method);      return false;    } else     if (e.getCause() instanceof Error) {      logWarning("Error in " + method + ": "+ e.getCause());      return false;    }  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ErrorCodeAttribute))   return false;  if (obj == this)   return true;  ErrorCodeAttribute att=(ErrorCodeAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.getErrorClass() != getErrorClass() || att.getErrorNumber() != getErrorNumber() || (att.getReasonPhrase() != null && !att.getReasonPhrase().equals(getReasonPhrase())))   return false;  return true;}  }
class C{  private RMIServer findRMIServerJNDI(String jndiURL,Map<String,?> env,boolean isIiop) throws NamingException {  InitialContext ctx=new InitialContext(EnvHelp.mapToHashtable(env));  Object objref=ctx.lookup(jndiURL);  ctx.close();  if (isIiop)   return narrowIIOPServer(objref); else   return narrowJRMPServer(objref);}  }
class C{  public void updateReadStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrReadBarrierReply.increment();  break;case BARRIER_REQUEST:ctrReadBarrierRequest.increment();break;case ECHO_REPLY:ctrReadEchoReply.increment();break;case ECHO_REQUEST:ctrReadEchoRequest.increment();break;case ERROR:ctrReadError.increment();break;case EXPERIMENTER:ctrReadExperimenter.increment();break;case FEATURES_REPLY:ctrReadFeaturesReply.increment();break;case FEATURES_REQUEST:ctrReadFeaturesRequest.increment();break;case FLOW_MOD:ctrReadFlowMod.increment();break;case FLOW_REMOVED:ctrReadFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrReadGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrReadGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrReadGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrReadGetConfigRequest.increment();break;case GROUP_MOD:ctrReadGroupMod.increment();break;case HELLO:ctrReadHello.increment();break;case METER_MOD:ctrReadMeterMod.increment();break;case PACKET_IN:ctrReadPacketIn.increment();break;case PACKET_OUT:ctrReadPacketOut.increment();break;case PORT_MOD:ctrReadPortMod.increment();break;case PORT_STATUS:ctrReadPortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrReadQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrReadQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrReadRoleReply.increment();break;case ROLE_REQUEST:ctrReadRoleRequest.increment();break;case SET_ASYNC:ctrReadSetAsync.increment();break;case SET_CONFIG:ctrReadSetConfig.increment();break;case STATS_REPLY:ctrReadStatsReply.increment();break;case STATS_REQUEST:ctrReadStatsRequest.increment();break;case TABLE_MOD:ctrReadTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrReadBundleAdd.increment();break;case BUNDLE_CONTROL:ctrReadBundleControl.increment();break;case REQUESTFORWARD:ctrReadRequestForward.increment();break;case ROLE_STATUS:ctrReadRoleStatus.increment();break;case TABLE_STATUS:ctrReadTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  public BundleMessageSource(Locale locale){  _messages=ResourceBundle.getBundle(BASE_NAME,locale);}  }
class C{  public static boolean hasPossibleStaticProperty(ClassNode candidate,String methodName){  if (!methodName.startsWith("get") && !methodName.startsWith("is")) {    return false;  }  String propName=getPropNameForAccessor(methodName);  PropertyNode pNode=getStaticProperty(candidate,propName);  return pNode != null && (methodName.startsWith("get") || boolean_TYPE.equals(pNode.getType()));}  }
class C{  private void createPoints(){  View view=tabs.get(viewPager.getCurrentItem());  springView.getHeadPoint().setX(view.getX() + view.getWidth() / 2);  springView.getHeadPoint().setY(view.getY() + view.getHeight() / 2);  springView.getFootPoint().setX(view.getX() + view.getWidth() / 2);  springView.getFootPoint().setY(view.getY() + view.getHeight() / 2);  springView.animCreate();}  }
class C{  public byte[] generateKey(){  byte[] key=new byte[strength];  random.nextBytes(key);  return key;}  }
class C{  public boolean fileExists(){  File file=getStoreFile();  return file == null || file.exists();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testName;  Node cdataNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  testName=(Element)elementList.item(1);  cdataNode=testName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (equals(3,nodeType)) {    cdataNode=doc.createCDATASection("");    nodeType=(int)cdataNode.getNodeType();  }  assertEquals("nodeTypeCDATA",4,nodeType);}  }
class C{  public JSONObject put(String key,Collection value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  private static byte[] writeSignatureFile(Manifest manifest,OutputStream out) throws IOException, GeneralSecurityException {  final Manifest sf=new Manifest();  final Attributes main=sf.getMainAttributes();  main.putValue("Manifest-Version",MANIFEST_VERSION);  main.putValue("Created-By",CREATED_BY);  final MessageDigest md=MessageDigest.getInstance("SHA1");  final PrintStream print=new PrintStream(new DigestOutputStream(new ByteArrayOutputStream(),md),true,"UTF-8");  manifest.write(print);  print.flush();  main.putValue("SHA1-Digest-Manifest",base64encode(md.digest()));  final Map<String,Attributes> entries=manifest.getEntries();  for (  final Map.Entry<String,Attributes> entry : entries.entrySet()) {    print.print("Name: " + entry.getKey() + "\r\n");    for (    final Map.Entry<Object,Object> att : entry.getValue().entrySet()) {      print.print(att.getKey() + ": " + att.getValue()+ "\r\n");    }    print.print("\r\n");    print.flush();    final Attributes sfAttr=new Attributes();    sfAttr.putValue("SHA1-Digest",base64encode(md.digest()));    sf.getEntries().put(entry.getKey(),sfAttr);  }  final ByteArrayOutputStream sos=new ByteArrayOutputStream();  sf.write(sos);  String value=sos.toString();  String done=value.replace("Manifest-Version","Signature-Version");  out.write(done.getBytes());  print.close();  sos.close();  return done.getBytes();}  }
class C{  final SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  public Object opt(String key){  return key == null ? null : this.myHashMap.get(key);}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public void addWaypoint(Coord wp){  assert this.speeds.size() <= 1 : "This method should be used only for" + " paths with constant speed";  this.coords.add(wp);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void checkRSS(){  if (getPostRSS().isEmpty()) {    return;  }  log("Processing RSS",Level.FINE,getPostRSS());  try {    Network memory=getBot().memory().newMemory();    Vertex facebook=memory.createVertex(getPrimitive());    Vertex vertex=facebook.getRelationship(Primitive.LASTRSS);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    for (    String rss : getPostRSS()) {      TextStream stream=new TextStream(rss);      String prefix=stream.upToAll("http").trim();      if (prefix.isEmpty()) {        prefix="RSS:";      }      prefix=prefix + " ";      String url=stream.nextWord();      String postfix=" " + stream.upToEnd().trim();      List<Map<String,Object>> feed=getBot().awareness().getSense(Http.class).parseRSSFeed(new URL(url),last);      if (feed != null) {        long max=0;        int count=0;        this.errors=0;        for (int index=feed.size() - 1; index >= 0; index--) {          Map<String,Object> entry=feed.get(index);          long time=(Long)entry.get("published");          if ((System.currentTimeMillis() - time) > DAY) {            continue;          }          if (time > last) {            if (count > this.maxFeed) {              break;            }            if (this.errors > this.maxErrors) {              break;            }            String text=(String)entry.get("title");            if (!getRssKeywords().isEmpty()) {              boolean match=false;              List<String> words=new TextStream(text.toLowerCase()).allWords();              for (              String keywords : getRssKeywords()) {                List<String> keyWords=new TextStream(keywords.toLowerCase()).allWords();                if (!keyWords.isEmpty()) {                  if (words.containsAll(keyWords)) {                    match=true;                    break;                  }                }              }              if (!match) {                log("Skipping RSS, missing keywords",Level.FINE,text);                continue;              }            }            log("Posting RSS",Level.FINE,entry.get("title"));            text=prefix + text + postfix;            if (text.length() > 120) {              text=text.substring(0,120);            }            post(text + " " + entry.get("link"),null);            Utils.sleep(500);            count++;            if (time > max) {              max=time;            }          }        }        if (max != 0) {          facebook.setRelationship(Primitive.LASTRSS,memory.createVertex(max));          memory.save();        }      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public CeylonRepoManagerBuilder noOutRepo(boolean noOutRepo){  this.noOutRepo=noOutRepo;  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 96 + 12,"Search"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 120 + 12,"Tutorial"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 144 + 12,"Back"));  ipBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,height / 4 + 34,200,20);  ipBox.setMaxStringLength(200);  ipBox.setFocused(true);  maxThreadsBox=new GuiTextField(1,fontRendererObj,width / 2 - 32,height / 4 + 58,26,12);  maxThreadsBox.setMaxStringLength(3);  maxThreadsBox.setFocused(false);  maxThreadsBox.setText(Integer.toString(WurstClient.INSTANCE.options.serverFinderThreads));  state=ServerFinderState.NOT_RUNNING;  WurstClient.INSTANCE.analytics.trackPageView("/multiplayer/server-finder","Server Finder");}  }
class C{  public boolean forEachEntry(TIntObjectProcedure<V> procedure){  int[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.457 -0500",hash_original_method="9C25F80E0E6C6F6C487DBDD3AFCBA4E7",hash_generated_method="9D05A5A8AED2B7188976ABC7326CCF8B") public void onGeolocationPermissionsHidePrompt(){  if (mWebChromeClient == null) {    return;  }  Message hideMessage=obtainMessage(GEOLOCATION_PERMISSIONS_HIDE_PROMPT);  sendMessage(hideMessage);}  }
class C{  public IsilonList<IsilonExport> listExports(String resumeToken) throws IsilonException {  return list(_baseUrl.resolve(URI_NFS_EXPORTS),"exports",IsilonExport.class,resumeToken);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.744 -0500",hash_original_method="3969E4BD26F514DAFEA3D81664C42C95",hash_generated_method="92F4E292DE72DC250AFC04D5F9BE409A") public boolean isEmulated(){  return mEmulated;}  }
class C{  public int prepareInt(Offset offset){  return 0;}  }
class C{  public void readBitString() throws IOException {  if (tag == ASN1Constants.TAG_BITSTRING) {    if (length == 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong length. Tag at [" + tagOffset + "]");    }    readContent();    if (buffer[contentOffset] > 7) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. A number of unused bits MUST be in range 0 to 7");    }    if (length == 1 && buffer[contentOffset] != 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. For empty string unused bits MUST be 0");    }  } else   if (tag == ASN1Constants.TAG_C_BITSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 bitstring  type is not provided");  } else {    throw expected("bitstring");  }}  }
class C{  public String process(String document,Date documentCreationTime) throws DocumentCreationTimeMissingException {  return process(document,documentCreationTime,getFormatter());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  Node appendedChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("br");  newChild2=doc.createElement("b");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  insertedNode=employeeNode.insertBefore(newdocFragment,refChild);  child=childList.item(3);  childName=child.getNodeName();  assertEqualsAutoCase("element","childName3","br",childName);  child=childList.item(4);  childName=child.getNodeName();  assertEqualsAutoCase("element","childName4","b",childName);}  }
class C{  public Relationship mostConsciousRelationship(Vertex type){  return nextMostConsciousRelationship(type,(Vertex)null,0,false);}  }
class C{  private PServerPasswordScrambler(){  this.shifts=new int[256];  int i;  for (i=0; i < 32; ++i) {    shifts[i]=i;  }  shifts[i++]=114;  shifts[i++]=120;  shifts[i++]=53;  shifts[i++]=79;  shifts[i++]=96;  shifts[i++]=109;  shifts[i++]=72;  shifts[i++]=108;  shifts[i++]=70;  shifts[i++]=64;  shifts[i++]=76;  shifts[i++]=67;  shifts[i++]=116;  shifts[i++]=74;  shifts[i++]=68;  shifts[i++]=87;  shifts[i++]=111;  shifts[i++]=52;  shifts[i++]=75;  shifts[i++]=119;  shifts[i++]=49;  shifts[i++]=34;  shifts[i++]=82;  shifts[i++]=81;  shifts[i++]=95;  shifts[i++]=65;  shifts[i++]=112;  shifts[i++]=86;  shifts[i++]=118;  shifts[i++]=110;  shifts[i++]=122;  shifts[i++]=105;  shifts[i++]=41;  shifts[i++]=57;  shifts[i++]=83;  shifts[i++]=43;  shifts[i++]=46;  shifts[i++]=102;  shifts[i++]=40;  shifts[i++]=89;  shifts[i++]=38;  shifts[i++]=103;  shifts[i++]=45;  shifts[i++]=50;  shifts[i++]=42;  shifts[i++]=123;  shifts[i++]=91;  shifts[i++]=35;  shifts[i++]=125;  shifts[i++]=55;  shifts[i++]=54;  shifts[i++]=66;  shifts[i++]=124;  shifts[i++]=126;  shifts[i++]=59;  shifts[i++]=47;  shifts[i++]=92;  shifts[i++]=71;  shifts[i++]=115;  shifts[i++]=78;  shifts[i++]=88;  shifts[i++]=107;  shifts[i++]=106;  shifts[i++]=56;  shifts[i++]=36;  shifts[i++]=121;  shifts[i++]=117;  shifts[i++]=104;  shifts[i++]=101;  shifts[i++]=100;  shifts[i++]=69;  shifts[i++]=73;  shifts[i++]=99;  shifts[i++]=63;  shifts[i++]=94;  shifts[i++]=93;  shifts[i++]=39;  shifts[i++]=37;  shifts[i++]=61;  shifts[i++]=48;  shifts[i++]=58;  shifts[i++]=113;  shifts[i++]=32;  shifts[i++]=90;  shifts[i++]=44;  shifts[i++]=98;  shifts[i++]=60;  shifts[i++]=51;  shifts[i++]=33;  shifts[i++]=97;  shifts[i++]=62;  shifts[i++]=77;  shifts[i++]=84;  shifts[i++]=80;  shifts[i++]=85;  shifts[i++]=223;  shifts[i++]=225;  shifts[i++]=216;  shifts[i++]=187;  shifts[i++]=166;  shifts[i++]=229;  shifts[i++]=189;  shifts[i++]=222;  shifts[i++]=188;  shifts[i++]=141;  shifts[i++]=249;  shifts[i++]=148;  shifts[i++]=200;  shifts[i++]=184;  shifts[i++]=136;  shifts[i++]=248;  shifts[i++]=190;  shifts[i++]=199;  shifts[i++]=170;  shifts[i++]=181;  shifts[i++]=204;  shifts[i++]=138;  shifts[i++]=232;  shifts[i++]=218;  shifts[i++]=183;  shifts[i++]=255;  shifts[i++]=234;  shifts[i++]=220;  shifts[i++]=247;  shifts[i++]=213;  shifts[i++]=203;  shifts[i++]=226;  shifts[i++]=193;  shifts[i++]=174;  shifts[i++]=172;  shifts[i++]=228;  shifts[i++]=252;  shifts[i++]=217;  shifts[i++]=201;  shifts[i++]=131;  shifts[i++]=230;  shifts[i++]=197;  shifts[i++]=211;  shifts[i++]=145;  shifts[i++]=238;  shifts[i++]=161;  shifts[i++]=179;  shifts[i++]=160;  shifts[i++]=212;  shifts[i++]=207;  shifts[i++]=221;  shifts[i++]=254;  shifts[i++]=173;  shifts[i++]=202;  shifts[i++]=146;  shifts[i++]=224;  shifts[i++]=151;  shifts[i++]=140;  shifts[i++]=196;  shifts[i++]=205;  shifts[i++]=130;  shifts[i++]=135;  shifts[i++]=133;  shifts[i++]=143;  shifts[i++]=246;  shifts[i++]=192;  shifts[i++]=159;  shifts[i++]=244;  shifts[i++]=239;  shifts[i++]=185;  shifts[i++]=168;  shifts[i++]=215;  shifts[i++]=144;  shifts[i++]=139;  shifts[i++]=165;  shifts[i++]=180;  shifts[i++]=157;  shifts[i++]=147;  shifts[i++]=186;  shifts[i++]=214;  shifts[i++]=176;  shifts[i++]=227;  shifts[i++]=231;  shifts[i++]=219;  shifts[i++]=169;  shifts[i++]=175;  shifts[i++]=156;  shifts[i++]=206;  shifts[i++]=198;  shifts[i++]=129;  shifts[i++]=164;  shifts[i++]=150;  shifts[i++]=210;  shifts[i++]=154;  shifts[i++]=177;  shifts[i++]=134;  shifts[i++]=127;  shifts[i++]=182;  shifts[i++]=128;  shifts[i++]=158;  shifts[i++]=208;  shifts[i++]=162;  shifts[i++]=132;  shifts[i++]=167;  shifts[i++]=209;  shifts[i++]=149;  shifts[i++]=241;  shifts[i++]=153;  shifts[i++]=251;  shifts[i++]=237;  shifts[i++]=236;  shifts[i++]=171;  shifts[i++]=195;  shifts[i++]=243;  shifts[i++]=233;  shifts[i++]=253;  shifts[i++]=240;  shifts[i++]=194;  shifts[i++]=250;  shifts[i++]=191;  shifts[i++]=155;  shifts[i++]=142;  shifts[i++]=137;  shifts[i++]=245;  shifts[i++]=235;  shifts[i++]=163;  shifts[i++]=242;  shifts[i++]=178;  shifts[i]=152;}  }
class C{  protected void applyShadow(BufferedImage image){  int dstWidth=image.getWidth();  int dstHeight=image.getHeight();  int left=(this.shadowSize - 1) >> 1;  int right=this.shadowSize - left;  int xStart=left;  int xStop=dstWidth - right;  int yStart=left;  int yStop=dstHeight - right;  int shadowRgb=this.shadowColor.getRGB() & 0x00FFFFFF;  int[] aHistory=new int[this.shadowSize];  int historyIdx;  int aSum;  int[] dataBuffer=((DataBufferInt)image.getRaster().getDataBuffer()).getData();  int lastPixelOffset=right * dstWidth;  float sumDivider=this.shadowOpacity / this.shadowSize;  for (int y=0, bufferOffset=0; y < dstHeight; y++, bufferOffset=y * dstWidth) {    aSum=0;    historyIdx=0;    for (int x=0; x < this.shadowSize; x++, bufferOffset++) {      int a=dataBuffer[bufferOffset] >>> 24;      aHistory[x]=a;      aSum+=a;    }    bufferOffset-=right;    for (int x=xStart; x < xStop; x++, bufferOffset++) {      int a=(int)(aSum * sumDivider);      dataBuffer[bufferOffset]=a << 24 | shadowRgb;      aSum-=aHistory[historyIdx];      a=dataBuffer[bufferOffset + right] >>> 24;      aHistory[historyIdx]=a;      aSum+=a;      if (++historyIdx >= this.shadowSize) {        historyIdx-=this.shadowSize;      }    }  }  for (int x=0, bufferOffset=0; x < dstWidth; x++, bufferOffset=x) {    aSum=0;    historyIdx=0;    for (int y=0; y < this.shadowSize; y++, bufferOffset+=dstWidth) {      int a=dataBuffer[bufferOffset] >>> 24;      aHistory[y]=a;      aSum+=a;    }    bufferOffset-=lastPixelOffset;    for (int y=yStart; y < yStop; y++, bufferOffset+=dstWidth) {      int a=(int)(aSum * sumDivider);      dataBuffer[bufferOffset]=a << 24 | shadowRgb;      aSum-=aHistory[historyIdx];      a=dataBuffer[bufferOffset + lastPixelOffset] >>> 24;      aHistory[historyIdx]=a;      aSum+=a;      if (++historyIdx >= this.shadowSize) {        historyIdx-=this.shadowSize;      }    }  }}  }
class C{  private void addTab(Tab tab){  TABBED_PANE.add(tab.getComponent(),tab.getTitle());}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeHeader(v)) {      if (mObserver != null) {        mObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public void unlock(long key){  getLock(key).unlock();}  }
class C{  protected static void saveCodeNodes(final SQLProvider provider,final List<INaviViewNode> nodes,final int firstNode,final List<Integer> codeNodeIndices) throws SQLException {  if (!codeNodeIndices.isEmpty()) {    final List<Pair<INaviCodeNode,INaviInstruction>> instructionsWithUnsavedLocalComments=PostgreSQLNodeSaver.saveCodeNodeInstructions(provider,nodes,firstNode,codeNodeIndices);    final String query="INSERT INTO " + CTableNames.CODE_NODES_TABLE + "(module_id, node_id, parent_function, comment_id) VALUES (?, ?, ?, ?)";    final ArrayList<INaviCodeNode> codeNodesWithUnsavedComments=new ArrayList<INaviCodeNode>();    final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query);    try {      for (      final int index : codeNodeIndices) {        final INaviCodeNode codeNode=(INaviCodeNode)nodes.get(index);        codeNode.setId(firstNode + index);        INaviFunction function=null;        try {          function=codeNode.getParentFunction();        } catch (        final MaybeNullException e) {        }        final int moduleId=Iterables.getLast(codeNode.getInstructions()).getModule().getConfiguration().getId();        final List<IComment> comment=codeNode.getComments().getLocalCodeNodeComment();        final Integer commentId=comment == null ? null : comment.size() == 0 ? null : Iterables.getLast(comment).getId();        if ((comment != null) && (comment.size() != 0) && (commentId == null)) {          codeNodesWithUnsavedComments.add(codeNode);        }        preparedStatement.setInt(1,moduleId);        preparedStatement.setInt(2,firstNode + index);        if (function == null) {          preparedStatement.setNull(3,Types.BIGINT);        } else {          preparedStatement.setObject(3,function.getAddress().toBigInteger(),Types.BIGINT);        }        if (commentId == null) {          preparedStatement.setNull(4,Types.INTEGER);        } else {          preparedStatement.setInt(4,commentId);        }        preparedStatement.addBatch();      }      preparedStatement.executeBatch();    }  finally {      preparedStatement.close();    }    for (    final INaviCodeNode codeNode : codeNodesWithUnsavedComments) {      final ArrayList<IComment> codeNodecomments=new ArrayList<IComment>();      for (      final IComment comment : codeNode.getComments().getLocalCodeNodeComment()) {        try {          final Integer commentId=PostgreSQLNodeFunctions.appendLocalCodeNodeComment(provider,codeNode,comment.getComment(),comment.getUser().getUserId());          final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());          codeNodecomments.add(newComment);        } catch (        final CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }      codeNode.getComments().initializeLocalCodeNodeComment(codeNodecomments);    }    for (    final Pair<INaviCodeNode,INaviInstruction> pair : instructionsWithUnsavedLocalComments) {      final ArrayList<IComment> localInstructionComments=new ArrayList<IComment>();      for (      final IComment comment : pair.first().getComments().getLocalInstructionComment(pair.second())) {        try {          final int commentId=PostgreSQLInstructionFunctions.appendLocalInstructionComment(provider,pair.first(),pair.second(),comment.getComment(),comment.getUser().getUserId());          final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());          localInstructionComments.add(newComment);        } catch (        final CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }      pair.first().getComments().initializeLocalInstructionComment(pair.second(),localInstructionComments);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(getFile(stack).lastModified());}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  boolean threadOwnsResources(){  DM d=getDM();  if (d != null) {    return d.getSystem().threadOwnsResources() && !AlertAppender.isThreadAlerting();  }  return false;}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      processEntityLocksWithDeletedEntities(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.320 -0500",hash_original_method="59EE8B926A303894927E6FAD605B1FF1",hash_generated_method="598276C53CB1A0FFFA8837C381C62A52") public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused()) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_RIGHT);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_RIGHT);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_LEFT);      } else {        handled=fullScroll(View.FOCUS_LEFT);      }    break;case KeyEvent.KEYCODE_DPAD_RIGHT:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_RIGHT);  } else {    handled=fullScroll(View.FOCUS_RIGHT);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_LEFT : View.FOCUS_RIGHT);break;}}return handled;}  }
class C{  public void updateUI(){  setUI(new IdeaHelpContentViewUI(this));  invalidate();}  }
class C{  public void addFlags(byte inFlag){  flags|=inFlag;  if (VM.VerifyAssertions)   verifyPreciseType();}  }
class C{  public String top(){  return indent(index);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  void readTreeSet(int size,java.io.ObjectInputStream s,Object defaultVal) throws java.io.IOException, ClassNotFoundException {  buildFromSorted(size,null,s,defaultVal);}  }
class C{  public T background(int id){  if (view != null) {    if (id != 0) {      view.setBackgroundResource(id);    } else {      view.setBackgroundDrawable(null);    }  }  return self();}  }
class C{  public boolean isInRange(@Nullable CalendarDay minDate,@Nullable CalendarDay maxDate){  return !(minDate != null && minDate.isAfter(this)) && !(maxDate != null && maxDate.isBefore(this));}  }
class C{  public final void writeFloat(float v) throws IOException {  writeInt(Float.floatToIntBits(v));}  }
class C{  public boolean testLowDiskSpace(StorageType storageType,long freeSpaceThreshold){  ensureInitialized();  long availableStorageSpace=getAvailableStorageSpace(storageType);  if (availableStorageSpace > 0) {    return availableStorageSpace < freeSpaceThreshold;  }  return true;}  }
class C{  public void stop(){  assert mApiClient != null;  if (mApiClient.isConnected() || mApiClient.isConnecting()) {    Cast.CastApi.stopApplication(mApiClient,mSessionId);  }  mSessionId=null;  mApiClient=null;}  }
class C{  public Builder waitDurationInOpenState(Duration waitDurationInOpenState){  if (waitDurationInOpenState.getSeconds() < 1) {    throw new IllegalArgumentException("waitDurationInOpenState must be at least 1000[ms]");  }  this.waitDurationInOpenState=waitDurationInOpenState;  return this;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static Properties filteredSystemProperties(final Properties existing,final boolean withMaven){  final Properties properties=new Properties();  System.getProperties().stringPropertyNames().forEach(null);  return properties;}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public static List<Assignment> createConstantsList(ModuleNode moduleNode){  OpDeclNode[] constantDecls=moduleNode.getConstantDecls();  Vector<Assignment> constants=new Vector<Assignment>(constantDecls.length);  for (int i=0; i < constantDecls.length; i++) {    String[] params=new String[constantDecls[i].getNumberOfArgs()];    Arrays.fill(params,EMPTY_STRING);    Assignment assign=new Assignment(constantDecls[i].getName().toString(),params,EMPTY_STRING);    constants.add(assign);  }  return constants;}  }
class C{  @SideEffectFree public void warning(@Nullable String msg){  throw new RuntimeException();}  }
class C{  public double totalCount(){  double total=0.0;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    total+=counter.totalCount();  }  return total;}  }
class C{  public InternalScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){}  }
class C{  public EndpointGroupException(){}  }
class C{  public void invoke(RSyntaxTextArea textArea) throws BadLocationException {  Caret c=textArea.getCaret();  int dot=c.getDot();  int mark=c.getMark();  int p0=Math.min(dot,mark);  int p1=Math.max(dot,mark);  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  Element map=doc.getDefaultRootElement();  int lineNum=map.getElementIndex(dot);  Element line=map.getElement(lineNum);  int start=line.getStartOffset();  int end=line.getEndOffset() - 1;  String s=textArea.getText(start,end - start);  int len=s.length();  int endWS=0;  while (endWS < len && RSyntaxUtilities.isWhitespace(s.charAt(endWS))) {    endWS++;  }  s=s.substring(0,endWS);  p0-=getID().length();  String beforeText=getBeforeTextIndented(s);  String afterText=getAfterTextIndented(s);  doc.replace(p0,p1 - p0,beforeText + afterText,null);  textArea.setCaretPosition(p0 + beforeText.length());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void testGetFormat(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKey);  assertEquals("X.509",meks.getFormat());}  }
class C{  public static boolean anymatch(final HandleSet set1,final HandleSet set2){  if ((set1 == null) || (set2 == null))   return false;  if (set1.comparator() != set2.comparator())   return false;  if (set1.isEmpty() || set2.isEmpty())   return false;  final int high=((set1.size() > set2.size()) ? set1.size() : set2.size());  final int low=((set1.size() > set2.size()) ? set2.size() : set1.size());  final int stepsEnum=10 * (high + low - 1);  final int stepsTest=12 * log2a(high) * low;  if (stepsEnum > stepsTest) {    if (set1.size() < set2.size())     return anymatchByTest(set1,set2);    return anymatchByTest(set2,set1);  }  return anymatchByEnumeration(set1,set2);}  }
class C{  public UrlImageGetter(TextView t,Context c,ImageLoader loader){  mCtx=c;  t.setTag(R.id.poste_image_getter,this);  mTextView=t;  mImageLoader=loader;  mPlaseHolder=c.getResources().getDrawable(R.drawable.ic_logo);  mDefaultHeight=mPlaseHolder.getIntrinsicHeight();  mDefaultWidth=mPlaseHolder.getIntrinsicWidth();  mPlaseHolder.setBounds(0,0,mDefaultWidth,mDefaultHeight);}  }
class C{  public void startInternalActivity(Intent intent){  helper.startInternalActivity(intent);}  }
class C{  public static String call(PageContext pc){  return invoke();}  }
class C{  private void receiveServerMessage() throws IOException {  log.debug("receiving server message from peer");  mRemoteServerMessage=ServerMessage.fromJSON(lengthValueRead(in));  if (mRemoteServerMessage == null) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Remote server message was not received.");    throw new IOException("Remote server message was not received.");  }  log.debug("server message received");}  }
class C{  private void createPortal(final Player admin,final List<String> args){  sandbox.setZone(sandbox.getZone(admin));  int x=admin.getX();  int y=admin.getY();  Portal portal=instantiatePortal(args);  setPortalName(args,portal);  portal.setPosition(x,y);  int destinationOffset=getDestinationOffset(args);  portal.setDestination(args.get(destinationOffset),args.get(destinationOffset + 1));  sandbox.add(portal);}  }
class C{  public boolean isLDAP(){  String host=getLDAPHost();  if (host == null || host.length() == 0)   return false;  String domain=getLDAPDomain();  return domain != null && domain.length() > 0;}  }
class C{  public static <T extends ResCloudlet>int indexOf(List<T> list,int cloudletId,int userId){  int i=0;  for (  T rcl : list) {    if (rcl.getCloudletId() == cloudletId && rcl.getUserId() == userId) {      return i;    }    i++;  }  return -1;}  }
class C{  public static void serializeTableReply(List<OFTableStatsReply> tableReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFTableStatsReply tableReply=tableReplies.get(0);  jGen.writeStringField("version",tableReply.getVersion().toString());  jGen.writeFieldName("table");  jGen.writeStartArray();  for (  OFTableStatsEntry entry : tableReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("tableId",entry.getTableId().toString());    jGen.writeNumberField("activeCount",entry.getActiveCount());    jGen.writeNumberField("lookUpCount",entry.getLookupCount().getValue());    jGen.writeNumberField("matchCount",entry.getMatchedCount().getValue());switch (entry.getVersion()) {case OF_12:      jGen.writeNumberField("writeSetFields",entry.getWriteSetfields().getValue());    jGen.writeNumberField("applySetFields",entry.getApplySetfields().getValue());  jGen.writeNumberField("metaDataMatch",entry.getMetadataMatch().getValue());jGen.writeNumberField("metaDataWrite",entry.getMetadataWrite().getValue());case OF_11:jGen.writeStringField("match",entry.getMatch().toString());jGen.writeNumberField("instructions",entry.getInstructions());jGen.writeNumberField("writeActions",entry.getWriteActions());jGen.writeNumberField("applyActions",entry.getApplyActions());jGen.writeNumberField("config",entry.getConfig());case OF_10:jGen.writeStringField("name",entry.getName());jGen.writeNumberField("wildcards",entry.getWildcards());jGen.writeNumberField("maxEntries",entry.getMaxEntries());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  public static final double[][] plus(final double[][] m1,final double[][] m2){  return plusEquals(copy(m1),m2);}  }
class C{  private boolean readScheme(){  if (_options.hasFlag(UrlDetectorOptions.HTML) && _buffer.length() >= HTML_MAILTO.length()) {    if (HTML_MAILTO.equalsIgnoreCase(_buffer.substring(_buffer.length() - HTML_MAILTO.length()))) {      return readEnd(ReadEndState.InvalidUrl);    }  }  int originalLength=_buffer.length();  int numSlashes=0;  while (!_reader.eof()) {    char curr=_reader.read();    if (curr == '/') {      _buffer.append(curr);      if (numSlashes == 1) {        if (VALID_SCHEMES.contains(_buffer.toString().toLowerCase())) {          _currentUrlMarker.setIndex(UrlPart.SCHEME,0);          return true;        }        return false;      }      numSlashes++;    } else     if (curr == ' ' || checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {      _buffer.append(curr);      return false;    } else     if (curr == '[') {      _reader.goBack();      return false;    } else     if (originalLength > 0 || numSlashes > 0 || !CharUtils.isAlpha(curr)) {      _reader.goBack();      return readUserPass(0);    }  }  return false;}  }
class C{  public final void testRemoveAllHelperTextColors(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextColor(helperTextColor1);  passwordEditText.addHelperTextColor(helperTextColor2);  passwordEditText.removeAllHelperTextColors();  assertTrue(passwordEditText.getHelperTextColors().isEmpty());}  }
class C{  @Override public boolean isFileModified(long fileTimeStamp,long endOffset){  boolean isFileModified=false;  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {    isFileModified=true;  }  return isFileModified;}  }
class C{  public MultiPartitionDataLikelihoodDelegate(Tree tree,List<PatternList> patternLists,List<BranchModel> branchModels,List<SiteRateModel> siteRateModels,boolean useAmbiguities,PartialsRescalingScheme rescalingScheme,boolean delayRescalingUntilUnderflow){  super("MultiPartitionDataLikelihoodDelegate");  final Logger logger=Logger.getLogger("dr.evomodel");  boolean useBeagle3=false;  if (useBeagle3) {    logger.info("\nUsing Multi-Partition Data Likelihood Delegate with BEAGLE 3 extensions");  } else {    logger.info("\nUsing Multi-Partition Data Likelihood Delegate");  }  this.dataType=patternLists.get(0).getDataType();  stateCount=dataType.getStateCount();  partitionCount=patternLists.size();  patternCounts=new int[partitionCount];  int total=0;  int k=0;  for (  PatternList patternList : patternLists) {    assert (patternList.getDataType().equals(this.dataType));    patternCounts[k]=patternList.getPatternCount();    total+=patternCounts[k];    k++;  }  totalPatternCount=total;  assert (branchModels.size() == 1 || (!useBeagle3 && branchModels.size() == patternLists.size()));  this.branchModels.addAll(branchModels);  for (  BranchModel branchModel : this.branchModels) {    addModel(branchModel);  }  assert (siteRateModels.size() == 1 || (!useBeagle3 && siteRateModels.size() == patternLists.size()));  this.siteRateModels.addAll(siteRateModels);  this.categoryCount=this.siteRateModels.get(0).getCategoryCount();  for (  SiteRateModel siteRateModel : this.siteRateModels) {    assert (siteRateModel.getCategoryCount() == categoryCount);    addModel(siteRateModel);  }  nodeCount=tree.getNodeCount();  tipCount=tree.getExternalNodeCount();  internalNodeCount=nodeCount - tipCount;  branchUpdateIndices=new int[nodeCount];  branchLengths=new double[nodeCount];  scaleBufferIndices=new int[internalNodeCount];  storedScaleBufferIndices=new int[internalNodeCount];  operations=new int[internalNodeCount * Beagle.OPERATION_TUPLE_SIZE * partitionCount];  try {    int compactPartialsCount=tipCount;    if (useAmbiguities) {      compactPartialsCount=0;    }    partialBufferHelper=new BufferIndexHelper(nodeCount,tipCount);    scaleBufferHelper=new BufferIndexHelper(getScaleBufferCount(),0);    int eigenBufferCount=0;    int matrixBufferCount=0;    int partitionNumber=0;    for (    BranchModel branchModel : this.branchModels) {      HomogenousSubstitutionModelDelegate substitutionModelDelegate=new HomogenousSubstitutionModelDelegate(tree,branchModel,partitionNumber);      evolutionaryProcessDelegates.add(substitutionModelDelegate);      eigenBufferCount+=substitutionModelDelegate.getEigenBufferCount();      matrixBufferCount+=substitutionModelDelegate.getMatrixBufferCount();      partitionNumber++;    }    if (resourceOrder == null) {      resourceOrder=parseSystemPropertyIntegerArray(RESOURCE_ORDER_PROPERTY);    }    if (preferredOrder == null) {      preferredOrder=parseSystemPropertyIntegerArray(PREFERRED_FLAGS_PROPERTY);    }    if (requiredOrder == null) {      requiredOrder=parseSystemPropertyIntegerArray(REQUIRED_FLAGS_PROPERTY);    }    if (scalingOrder == null) {      scalingOrder=parseSystemPropertyStringArray(SCALING_PROPERTY);    }    if (extraBufferOrder == null) {      extraBufferOrder=parseSystemPropertyIntegerArray(EXTRA_BUFFER_COUNT_PROPERTY);    }    this.rescalingScheme=rescalingScheme;    this.delayRescalingUntilUnderflow=delayRescalingUntilUnderflow;    int[] resourceList=null;    long preferenceFlags=0;    long requirementFlags=0;    if (scalingOrder.size() > 0) {      this.rescalingScheme=PartialsRescalingScheme.parseFromString(scalingOrder.get(instanceCount % scalingOrder.size()));    }    if (resourceOrder.size() > 0) {      resourceList=new int[]{resourceOrder.get(instanceCount % resourceOrder.size()),0};      if (resourceList[0] > 0) {        preferenceFlags|=BeagleFlag.PROCESSOR_GPU.getMask();      }    }    if (preferredOrder.size() > 0) {      preferenceFlags=preferredOrder.get(instanceCount % preferredOrder.size());    }    if (requiredOrder.size() > 0) {      requirementFlags=requiredOrder.get(instanceCount % requiredOrder.size());    }    if (this.rescalingScheme == PartialsRescalingScheme.DEFAULT) {      if (resourceList != null && resourceList[0] > 1) {        this.rescalingScheme=DEFAULT_RESCALING_SCHEME;      } else {        this.rescalingScheme=DEFAULT_RESCALING_SCHEME;      }    }    if (this.rescalingScheme == PartialsRescalingScheme.DELAYED) {      this.delayRescalingUntilUnderflow=true;      this.rescalingScheme=PartialsRescalingScheme.ALWAYS;    }    if (this.rescalingScheme == PartialsRescalingScheme.AUTO) {      preferenceFlags|=BeagleFlag.SCALING_AUTO.getMask();      useAutoScaling=true;    } else {    }    String r=System.getProperty(RESCALE_FREQUENCY_PROPERTY);    if (r != null) {      rescalingFrequency=Integer.parseInt(r);      if (rescalingFrequency < 1) {        rescalingFrequency=RESCALE_FREQUENCY;      }    }    String d=System.getProperty(DELAY_SCALING_PROPERTY);    if (d != null) {      this.delayRescalingUntilUnderflow=Boolean.parseBoolean(d);    }    boolean forceVectorization=false;    String vectorizationString=System.getProperty(FORCE_VECTORIZATION);    if (vectorizationString != null) {      forceVectorization=true;    }    if (BeagleFlag.VECTOR_SSE.isSet(preferenceFlags) && (stateCount != 4) && !forceVectorization) {      preferenceFlags&=~BeagleFlag.VECTOR_SSE.getMask();      preferenceFlags|=BeagleFlag.VECTOR_NONE.getMask();      if (stateCount > 4 && this.rescalingScheme == PartialsRescalingScheme.DYNAMIC) {        this.rescalingScheme=PartialsRescalingScheme.DELAYED;      }    }    if (!BeagleFlag.PRECISION_SINGLE.isSet(preferenceFlags)) {      preferenceFlags|=BeagleFlag.PRECISION_DOUBLE.getMask();    }    if (evolutionaryProcessDelegates.get(0).canReturnComplexDiagonalization()) {      requirementFlags|=BeagleFlag.EIGEN_COMPLEX.getMask();    }    beagle=BeagleFactory.loadBeagleInstance(tipCount,partialBufferHelper.getBufferCount(),compactPartialsCount,stateCount,totalPatternCount,eigenBufferCount,matrixBufferCount,categoryCount,scaleBufferHelper.getBufferCount(),resourceList,preferenceFlags,requirementFlags);    InstanceDetails instanceDetails=beagle.getDetails();    ResourceDetails resourceDetails=null;    if (instanceDetails != null) {      resourceDetails=BeagleFactory.getResourceDetails(instanceDetails.getResourceNumber());      if (resourceDetails != null) {        StringBuilder sb=new StringBuilder("  Using BEAGLE resource ");        sb.append(resourceDetails.getNumber()).append(": ");        sb.append(resourceDetails.getName()).append("\n");        if (resourceDetails.getDescription() != null) {          String[] description=resourceDetails.getDescription().split("\\|");          for (          String desc : description) {            if (desc.trim().length() > 0) {              sb.append("    ").append(desc.trim()).append("\n");            }          }        }        sb.append("    with instance flags: ").append(instanceDetails.toString());        logger.info(sb.toString());      } else {        logger.info("  Error retrieving BEAGLE resource for instance: " + instanceDetails.toString());      }    } else {      logger.info("  No external BEAGLE resources available, or resource list/requirements not met, using Java implementation");    }    patternPartitions=new int[totalPatternCount];    patternWeights=new double[totalPatternCount];    int j=0;    k=0;    for (    PatternList patternList : patternLists) {      double[] pw=patternList.getPatternWeights();      for (int i=0; i < patternList.getPatternCount(); i++) {        patternPartitions[k]=j;        patternWeights[k]=pw[i];        k++;      }      j++;    }    logger.info("  " + (useAmbiguities ? "Using" : "Ignoring") + " ambiguities in tree likelihood.");    String patternCountString="" + patternLists.get(0).getPatternCount();    for (int i=1; i < patternLists.size(); i++) {      patternCountString+=", " + patternLists.get(i).getPatternCount();    }    logger.info("  With " + patternLists.size() + " partitions comprising "+ patternCountString+ " unique site patterns");    for (int i=0; i < tipCount; i++) {      String id=tree.getTaxonId(i);      if (useAmbiguities) {        setPartials(beagle,patternLists,id,i);      } else {        setStates(beagle,patternLists,id,i);      }    }    beagle.setPatternWeights(patternWeights);    String rescaleMessage="  Using rescaling scheme : " + this.rescalingScheme.getText();    if (this.rescalingScheme == PartialsRescalingScheme.AUTO && resourceDetails != null && (resourceDetails.getFlags() & BeagleFlag.SCALING_AUTO.getMask()) == 0) {      this.rescalingScheme=PartialsRescalingScheme.DYNAMIC;      rescaleMessage="  Auto rescaling not supported in BEAGLE, using : " + this.rescalingScheme.getText();    }    boolean parenthesis=false;    if (this.rescalingScheme == PartialsRescalingScheme.DYNAMIC) {      rescaleMessage+=" (rescaling every " + rescalingFrequency + " evaluations";      parenthesis=true;    }    if (this.delayRescalingUntilUnderflow) {      rescaleMessage+=(parenthesis ? ", " : "(") + "delay rescaling until first overflow";      parenthesis=true;    }    rescaleMessage+=(parenthesis ? ")" : "");    logger.info(rescaleMessage);    if (this.rescalingScheme == PartialsRescalingScheme.DYNAMIC) {      everUnderflowed=false;    }    updateSubstitutionModels=new boolean[branchModels.size()];    updateSubstitutionModels();    updateSiteRateModels=new boolean[siteRateModels.size()];    updateSiteRateModels();  } catch (  TaxonList.MissingTaxonException mte) {    throw new RuntimeException(mte.toString());  }}  }
class C{  public void toData(DataOutput out) throws IOException {  ClientUpdateMessageImpl cum=(ClientUpdateMessageImpl)this.haContainer.get(this);  if (cum != null) {    DataSerializer.writePrimitiveBoolean(true,out);    DataSerializer.writeObject(cum.getEventId(),out);  } else {    DataSerializer.writePrimitiveBoolean(false,out);    DataSerializer.writeObject(new EventID(),out);    cum=new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_CREATE,new ClientProxyMembershipID(),null);  }  InternalDataSerializer.invokeToData(cum,out);  if (cum.hasCqs()) {    DataSerializer.writeConcurrentHashMap(cum.getClientCqs(),out);  }}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  private Dictionary loadDictionary(String locale,Settings nodeSettings,Environment env) throws Exception {  if (logger.isDebugEnabled()) {    logger.debug("Loading hunspell dictionary [{}]...",locale);  }  Path dicDir=hunspellDir.resolve(locale);  if (FileSystemUtils.isAccessibleDirectory(dicDir,logger) == false) {    throw new ElasticsearchException(String.format(Locale.ROOT,"Could not find hunspell dictionary [%s]",locale));  }  nodeSettings=loadDictionarySettings(dicDir,nodeSettings.getByPrefix("indices.analysis.hunspell.dictionary." + locale + "."));  boolean ignoreCase=nodeSettings.getAsBoolean("ignore_case",defaultIgnoreCase);  Path[] affixFiles=FileSystemUtils.files(dicDir,"*.aff");  if (affixFiles.length == 0) {    throw new ElasticsearchException(String.format(Locale.ROOT,"Missing affix file for hunspell dictionary [%s]",locale));  }  if (affixFiles.length != 1) {    throw new ElasticsearchException(String.format(Locale.ROOT,"Too many affix files exist for hunspell dictionary [%s]",locale));  }  InputStream affixStream=null;  Path[] dicFiles=FileSystemUtils.files(dicDir,"*.dic");  List<InputStream> dicStreams=new ArrayList<>(dicFiles.length);  try {    for (int i=0; i < dicFiles.length; i++) {      dicStreams.add(Files.newInputStream(dicFiles[i]));    }    affixStream=Files.newInputStream(affixFiles[0]);    return new Dictionary(affixStream,dicStreams,ignoreCase);  } catch (  Exception e) {    logger.error("Could not load hunspell dictionary [{}]",e,locale);    throw e;  } finally {    if (affixStream != null) {      try {        affixStream.close();      } catch (      IOException e) {      }    }    for (    InputStream in : dicStreams) {      if (in != null) {        try {          in.close();        } catch (        IOException e) {        }      }    }  }}  }
class C{  private void drawArrowOrHook(Canvas canvas){  arrowPath.reset();  arrowPath.moveTo(e.x,e.y);  arrowPath.lineTo(c.x,c.y);  canvas.drawPath(arrowPath,arrowPaint);  arrowPath.reset();  arrowPath.moveTo(e.x,e.y);  arrowPath.lineTo(d.x,d.y);  canvas.drawPath(arrowPath,arrowPaint);  canvas.drawCircle(c.x,c.y,smallRadius,smallPaint);  canvas.drawCircle(d.x,d.y,smallRadius,smallPaint);  canvas.drawCircle(e.x,e.y,smallRadius,smallPaint);}  }
class C{  public void showPendingNotificationsToUser(boolean showAll){  if (notificationUpdateRunning.get()) {    Log.w(TAG,"Notification update running, scheduling show event");    scheduledShowEvent.set(true);    scheduledShowEventParameter=showAll;    return;  }  Set<PersistentNotification> persistentNotifications=preferenceStore.getPersistentNotifications();  Set<PersistentNotification> updateNotifications=new HashSet<>();  for (  PersistentNotification persistentNotification : persistentNotifications) {    if (persistentNotification.hasToBeShown(appVersionCode)) {      persistentNotification.getNotification().show(context);      persistentNotification.setLastShown(new Date());      persistentNotification.setShownCounter(persistentNotification.getShownCounter() + 1);      updateNotifications.add(persistentNotification);      if (!showAll) {        break;      }    }  }  if (!updateNotifications.isEmpty()) {    preferenceStore.updatePersistentNotification(updateNotifications);  }}  }
class C{  public GoogleTurnSSLCandidateHarvester(TransportAddress turnServer){  this(turnServer,null,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.REGULAR_EXPRESSION_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.298 -0500",hash_original_method="13C71D739499D98499F08E0B68D72954",hash_generated_method="3B4139C4D3E5EEAC06EE22EAA7358A3F") public int[] startSubnegotiationRemote(){  return null;}  }
class C{  @Override public boolean isWithoutReply(){  return false;}  }
class C{  public void add(final Number operand){  this.value+=operand.shortValue();}  }
class C{  public Destination(URI uri){  super(uri);}  }
class C{  @POST @Path("image/upload") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Consumes({MediaType.APPLICATION_OCTET_STREAM}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response uploadImage(@Context HttpServletRequest request){  File file=null;  String svcId=_coordinator.getMySvcId();  _log.info("uploadImage to {} start",svcId);  if (!_coordinator.isClusterUpgradable()) {    throw APIException.serviceUnavailable.clusterStateNotStable();  }  RepositoryInfo targetInfo=null;  try {    targetInfo=_coordinator.getTargetInfo(RepositoryInfo.class);  } catch (  Exception e) {    throw APIException.internalServerErrors.getObjectFromError("target repository info","coordinator",e);  }  if (targetInfo.getVersions().size() > SyncInfoBuilder.MAX_SOFTWARE_VERSIONS) {    throw APIException.badRequests.numberOfInstalledExceedsMax();  }  String contentLength=request.getHeader("Content-Length");  if (Long.parseLong(contentLength) <= 0 || Long.parseLong(contentLength) > MAX_UPLOAD_SIZE) {    throw APIException.badRequests.fileSizeExceedsLimit(MAX_UPLOAD_SIZE);  }  try {    UpgradeImageUploader uploader=UpgradeImageUploader.getInstance(_upgradeManager);    uploader.cleanUploadFiles();    long versionSize=Long.valueOf(contentLength);    _log.info("The size of the image is:" + versionSize);    String version=VIPR_UNKNOWN_IMAGE_VERSION;    initializeDownloadProgress(version,versionSize);    file=uploader.startUpload(request.getInputStream(),version);    if (file == null || file != null && !file.exists()) {      throw APIException.internalServerErrors.targetIsNullOrEmpty("Uploaded file");    }    version=_upgradeManager.getLocalRepository().installImage(file);    List<SoftwareVersion> newList=new ArrayList<SoftwareVersion>(targetInfo.getVersions());    SoftwareVersion newVersion=new SoftwareVersion(version);    if (newList.contains(newVersion)) {      _log.info("Version has already been installed");    } else {      newList.add(newVersion);      _coordinator.setTargetInfo(new RepositoryInfo(targetInfo.getCurrentVersion(),newList));      DownloadingInfo temp=_coordinator.getNodeGlobalScopeInfo(DownloadingInfo.class,DOWNLOADINFO_KIND,svcId);      _coordinator.setNodeGlobalScopeInfo(new DownloadingInfo(version,versionSize,versionSize,DownloadStatus.COMPLETED,temp._errorCounter),DOWNLOADINFO_KIND,svcId);      _coordinator.setTargetInfo(new DownloadingInfo(version,versionSize),false);    }    _log.info("uploadImage to {} end",svcId);    auditUpgrade(OperationTypeEnum.UPLOAD_IMAGE,AuditLogManager.AUDITLOG_SUCCESS,null,targetInfo.getCurrentVersion().toString(),svcId);    ClusterInfo clusterInfo=_coordinator.getClusterInfo();    if (clusterInfo == null) {      throw APIException.internalServerErrors.targetIsNullOrEmpty("Cluster info");    }    return toClusterResponse(clusterInfo);  } catch (  APIException ae) {    throw ae;  }catch (  Exception e) {    throw APIException.internalServerErrors.uploadInstallError(e);  } finally {    if (file != null && file.exists()) {      file.delete();    }  }}  }
class C{  @ZeppelinApi public void run(List<Object> paragraphIdOrIdx,InterpreterContext context){  for (  Object idOrIdx : paragraphIdOrIdx) {    if (idOrIdx instanceof String) {      String id=(String)idOrIdx;      run(id,context);    } else     if (idOrIdx instanceof Integer) {      Integer idx=(Integer)idOrIdx;      run(idx,context);    } else {      throw new InterpreterException("Paragraph " + idOrIdx + " not found");    }  }}  }
class C{  public static void main(final String[] args){  new SimpleXY2Links().run(args);}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  put(key,file,contentType,null);}  }
class C{  public final long remove(final int from,final int count){  if (count < 1 || from < 0)   return -1;  if (from + count > size)   return -1;  final long o=list[from];  final int oldsize=size;  size=size - count;  if (from == size)   return o;  java.lang.System.arraycopy(list,from + count,list,from,size - from);  return o;}  }
class C{  private void writeData(File file,Charset encoding) throws IOException {  for (int i=0; i < sources.size(); i++) {    AttributeDataSource source=sources.get(i);    source.setSource(file,i);  }  PrintWriter out=null;  try {    out=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),encoding));    File originalDataFile=new File(fileTextField.getText());    String commentString=commentCharField.getText();    String columnSeparators=getColumnSeparators();    char decimalPointCharacter=getDecimalPointCharacter();    boolean useQuotes=quoteCheckBox.isSelected();    boolean firstLineAsNames=firstRowAsNames.isSelected();    Pattern separatorPattern=Pattern.compile(columnSeparators);    BufferedReader in=null;    try {      in=new BufferedReader(new FileReader(originalDataFile));      String line=null;      boolean first=true;      while ((line=in.readLine()) != null) {        if ((commentString != null) && (commentString.trim().length() > 0) && (line.startsWith(commentString))) {          continue;        }        String[] columns=null;        if (useQuotes) {          columns=Tools.quotedSplit(line,separatorPattern);        } else {          columns=line.trim().split(columnSeparators);        }        if (first) {          if (!firstLineAsNames) {            writeColumnData(out,columns,decimalPointCharacter);          }          first=false;        } else {          writeColumnData(out,columns,decimalPointCharacter);        }      }    } catch (    IOException e) {      SwingTools.showSimpleErrorMessage("cannot_re_write_data",e);    } finally {      if (in != null) {        in.close();      }    }  } catch (  IOException e) {    SwingTools.showSimpleErrorMessage("cannot_re_write_data",e);  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ReflectionException(java.lang.Exception e){  super();  exception=e;}  }
class C{  @Override public double[] sample(){  double[] result=new double[mean.length];  for (int i=0; i < mean.length; i++) {    result[i]=(sampler.nextGaussian() * stdDev[i]) + mean[i];  }  return result;}  }
class C{  public void test_getPrimeP(){  assertEquals("invalid prime P",Util.rsaCrtParam.getPrimeP(),key.getPrimeP());}  }
class C{  public static void notify(final Context context,final String exampleString,final int number){  final Resources res=context.getResources();  final Bitmap picture=BitmapFactory.decodeResource(res,R.drawable.example_picture);  final String ticker=exampleString;  final String title=res.getString(R.string.new_message_notification_title_template,exampleString);  final String text=res.getString(R.string.video,exampleString);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setDefaults(Notification.DEFAULT_ALL).setContentTitle(title).setContentText(text).setPriority(NotificationCompat.PRIORITY_DEFAULT).setLargeIcon(picture).setTicker(ticker).setNumber(number).setContentIntent(PendingIntent.getActivity(context,0,new Intent(Intent.ACTION_VIEW,Uri.parse("http://www.google.com")),PendingIntent.FLAG_UPDATE_CURRENT)).addAction(R.drawable.ic_action_stat_share,res.getString(R.string.action_share),PendingIntent.getActivity(context,0,Intent.createChooser(new Intent(Intent.ACTION_SEND).setType("text/plain").putExtra(Intent.EXTRA_TEXT,"Dummy text"),"Dummy title"),PendingIntent.FLAG_UPDATE_CURRENT)).addAction(R.drawable.ic_action_stat_reply,res.getString(R.string.action_reply),null).setAutoCancel(true);  notify(context,builder.build());}  }
class C{  protected Object callMethod(Object object,String methodName,Object[] parameters) throws Exception {  if (null == parameters) {    parameters=new Object[0];  }  Class<?> clazz=object.getClass();  Class<?>[] parameterClasses=null;  parameterClasses=new Class[parameters.length];  for (int i=0; i < parameterClasses.length; i++) {    String parameter=(String)parameters[i];    if ("int".equals(parameter)) {      parameterClasses[i]=Integer.TYPE;      parameters[i]=3;    } else     if ("boolean".equals(parameter)) {      parameterClasses[i]=Boolean.TYPE;      parameters[i]=false;    } else {      parameterClasses[i]=Class.forName(parameter);    }  }  Method method=clazz.getDeclaredMethod(methodName,parameterClasses);  method.setAccessible(true);  return method.invoke(object,parameters);}  }
class C{  public String toString(){  return super.toString() + " limit: " + limit+ " indexOfNextAdd: "+ indexOfNextAdd;}  }
class C{  private void appendTypeParameter(final String type){  appendTypeParameter(mBuilder,type);}  }
class C{  public void runProgram(){  if ((runningThread == null) && !running) {    running=true;    runningThread=new Thread(this);    runningThread.start();  }}  }
class C{  public boolean isDrawLines(){  return this.plotLines;}  }
class C{  protected int toGraph(StringBuffer text,int num,Tree parent) throws Exception {  num++;  if (m_Attribute == -1) {    text.append("N" + Integer.toHexString(Tree.this.hashCode()) + " [label=\""+ num+ Utils.backQuoteChars(leafString())+ "\""+ " shape=box]\n");  } else {    text.append("N" + Integer.toHexString(Tree.this.hashCode()) + " [label=\""+ num+ ": "+ Utils.backQuoteChars(m_Info.attribute(m_Attribute).name())+ "\"]\n");    for (int i=0; i < m_Successors.length; i++) {      text.append("N" + Integer.toHexString(Tree.this.hashCode()) + "->"+ "N"+ Integer.toHexString(m_Successors[i].hashCode())+ " [label=\"");      if (m_Info.attribute(m_Attribute).isNumeric()) {        if (i == 0) {          text.append(" < " + Utils.doubleToString(m_SplitPoint,2));        } else {          text.append(" >= " + Utils.doubleToString(m_SplitPoint,2));        }      } else {        text.append(" = " + Utils.backQuoteChars(m_Info.attribute(m_Attribute).value(i)));      }      text.append("\"]\n");      num=m_Successors[i].toGraph(text,num,this);    }  }  return num;}  }
class C{  @Override public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if ((this.constant != Constant.NotAConstant) && (this.constant.typeID() == T_boolean) || ((this.valueIfTrue.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_boolean) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  Constant cst=this.condition.constant;  Constant condCst=this.condition.optimizedBooleanConstant();  boolean needTruePart=!(((cst != Constant.NotAConstant) && (cst.booleanValue() == false)) || ((condCst != Constant.NotAConstant) && (condCst.booleanValue() == false)));  boolean needFalsePart=!(((cst != Constant.NotAConstant) && (cst.booleanValue() == true)) || ((condCst != Constant.NotAConstant) && (condCst.booleanValue() == true)));  boolean needConditionValue=(cst == Constant.NotAConstant) && (condCst == Constant.NotAConstant);  this.condition.generateOptimizedBoolean(currentScope,null,new BranchLabel(),needConditionValue);  if (needTruePart) {    this.valueIfTrue.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    if (needFalsePart) {      JumpEndif: {        if (falseLabel == null) {          if (trueLabel != null) {            cst=this.optimizedIfTrueConstant;            boolean isValueIfTrueOptimizedTrue=cst != null && cst != Constant.NotAConstant && cst.booleanValue() == true;            if (isValueIfTrueOptimizedTrue) {              break JumpEndif;            }          }        } else {          if (trueLabel == null) {            cst=this.optimizedIfTrueConstant;            boolean isValueIfTrueOptimizedFalse=cst != null && cst != Constant.NotAConstant && cst.booleanValue() == false;            if (isValueIfTrueOptimizedFalse) {              break JumpEndif;            }          } else {          }        }      }    }  }  if (needFalsePart) {    this.valueIfFalse.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);  }}  }
class C{  public void loadAndStartMission(String missionFilePath,String missionName,float missionLengthMinutes,float intervalLengthMinutes,float challengePaceMinutesPerMile){  if (!canEnterState(State.MISSION_LOADED)) {    return;  }  MissionData data=new MissionData(missionName,missionFilePath,missionLengthMinutes,intervalLengthMinutes,challengePaceMinutesPerMile);  mMission=new Mission(data);  mMission.setService(this);  InputStream missionStream;  try {    missionStream=getAssets().open(missionFilePath);  } catch (  IOException e) {    e.printStackTrace();    requestReselection();    return;  }  try {    mMission.readMoments(missionStream);  } catch (  MissionParseException e) {    e.printStackTrace();    requestReselection();    return;  }  try {    missionStream.close();  } catch (  IOException e) {    e.printStackTrace();  }  startMission();}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  @Override public boolean portReadyToSend(jmri.jmrix.AbstractPortController p) throws Exception {  if (!(p instanceof XNetPortController)) {    return false;  }  if (((XNetPortController)p).okToSend()) {    ((XNetPortController)p).setOutputBufferEmpty(false);    return true;  } else {    if (log.isDebugEnabled()) {      log.debug("XPressNet port not ready to receive");    }    return false;  }}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.setValue(null);  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public void dropTable(String tableName) throws EclipseLinkException {  TableDefinition tableDefinition;  tableDefinition=new TableDefinition();  tableDefinition.setName(tableName);  dropObject(tableDefinition);}  }
class C{  public void determineIntersecting(EventPoint p,AugmentedNode<ILineSegment> left,AugmentedNode<ILineSegment> right){  if (sweepPt == null) {    return;  }  if (left == null) {    left=getMinimumInTree();  } else {    left=successor(left);  }  while (left != right) {    ILineSegment ils=left.key();    if (ils != null) {      if (!ils.getStart().equals(p.point) && !ils.getEnd().equals(p.point)) {        p.addIntersectingLineSegment(ils);      }    }    left=successor(left);  }}  }
class C{  public void testSelectManyInvalidValue() throws Exception {}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure writing PacketOut " + "switch={switch} packet-in={packet-in} " + "packet-out={packet-out}",explanation="An I/O error occured while writing a packet " + "out message to the switch",recommendation=LogMessageDoc.CHECK_SWITCH) protected void doFlood(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (topologyService.isIncomingBroadcastAllowed(sw.getId(),inPort) == false) {    if (log.isTraceEnabled()) {      log.trace("doFlood, drop broadcast packet, pi={}, " + "from a blocked port, srcSwitch=[{},{}], linkInfo={}",new Object[]{pi,sw.getId(),inPort});    }    return;  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  if (sw.hasAttribute(IOFSwitch.PROP_SUPPORTS_OFPP_FLOOD)) {    actions.add(sw.getOFFactory().actions().output(OFPort.FLOOD,Integer.MAX_VALUE));  } else {    actions.add(sw.getOFFactory().actions().output(OFPort.ALL,Integer.MAX_VALUE));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(inPort);  pob.setData(pi.getData());  try {    if (log.isTraceEnabled()) {      log.trace("Writing flood PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()});    }    messageDamper.write(sw,pob.build());  } catch (  IOException e) {    log.error("Failure writing PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()},e);  }  return;}  }
class C{  public void deleteLine(int C_OrderLine_ID){  if (C_OrderLine_ID != -1) {    for (    MOrderLine line : getLines(true,"M_Product_ID")) {      if (line.getC_OrderLine_ID() == C_OrderLine_ID) {        line.delete(true);      }    }  }}  }
class C{  public Pair<SLProblem,SLProblem> splitTrainTest(int numberOfTrainInstance){  SLProblem train=new SLProblem();  SLProblem test=new SLProblem();  if (instanceWeightList != null) {    train.instanceWeightList=new ArrayList<Float>();    test.instanceWeightList=new ArrayList<Float>();  }  for (int i=0; i < size(); i++) {    if (i < numberOfTrainInstance) {      train.instanceList.add(instanceList.get(i));      train.goldStructureList.add(goldStructureList.get(i));      if (instanceWeightList != null) {        train.instanceWeightList.add(instanceWeightList.get(i));      }    } else {      test.instanceList.add(instanceList.get(i));      test.goldStructureList.add(goldStructureList.get(i));      if (instanceWeightList != null) {        test.instanceWeightList.add(instanceWeightList.get(i));      }    }  }  return new Pair<SLProblem,SLProblem>(train,test);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private boolean filter(K key,V val){  return filters == null || filters.apply(key,val);}  }
class C{  public CnATreeElement mergeEntityOfElement(CnATreeElement element,boolean fireChange){  if (LOG_INHERIT.isDebug()) {    LOG_INHERIT.debug("mergeEntityOfElement");  }  Entity entity=element.getEntity();  entity=super.merge(entity);  element.setEntity(entity);  if (!getHibernateTemplate().contains(element)) {    getHibernateTemplate().load(element,element.getDbId());  }  if (fireChange) {    fireChange(element);  }  index(element);  return element;}  }
class C{  public Object resolve(String name){  Object r=null;  if (name != null) {    String[] nameParts=DOT_PATTERN.split(name);    CurrentLevel cr=currentLevelMap(nameParts,rootNamespace,false);    Map<String,Object> currentLevel=cr.map;    r=currentLevel.get(nameParts[nameParts.length - 1]);    if (r == null && name.startsWith(FUNCTIONS_NAMESPACE) && name.length() > FUNCTIONS_NAMESPACE.length()) {      return resolveEvaluator(FUNCTIONS_NAMESPACE,name);    }    if (r == null && name.startsWith(FUNCTIONS_NAMESPACE_SHORT) && name.length() > FUNCTIONS_NAMESPACE_SHORT.length()) {      return resolveEvaluator(FUNCTIONS_NAMESPACE_SHORT,name);    }    if (r == null) {      StringBuilder sb=new StringBuilder();      for (int i=cr.level; i < nameParts.length; i++) {        if (sb.length() > 0) {          sb.append(".");        }        sb.append(nameParts[i]);      }      r=cr.map.get(sb.toString());    }    if (r == null) {      r=System.getProperty(name);    }  }  return r == null ? "" : r;}  }
class C{  public ModelParsingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static <T>List<T> toList(T[] array){  return new ArrayList<T>(Arrays.asList(array));}  }
class C{  public void deferFree(final int rwaddr,final int sze){  m_allocationWriteLock.lock();  try {    if (sze > (this.m_maxFixedAlloc - 4)) {      m_deferredFreeOut.writeInt(-rwaddr);      m_deferredFreeOut.writeInt(sze);      log.debug("Unexpected code path deferring free of direct blob address");    } else {      m_deferredFreeOut.writeInt(rwaddr);    }  } catch (  IOException e) {    throw new RuntimeException("Could not free: rwaddr=" + rwaddr + ", size="+ sze,e);  } finally {    m_allocationWriteLock.unlock();  }}  }
class C{  void resolve(Zoneinfo zi){  if (ruleName != null && (!"-".equals(ruleName))) {    ruleRef=zi.getRule(ruleName);  }  adjustTime();}  }
class C{  public static boolean isNumeric(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isDigit(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public Option(int number,String str){  this.number=number;  setStringValue(str);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.244 -0500",hash_original_method="C8449F66AC8DB5DC1EE33D138B3717DE",hash_generated_method="CEC1D53DD057269EC187AA89A64290AC") protected Calendar date() throws ParseException {  try {    Calendar retval=Calendar.getInstance(TimeZone.getTimeZone("GMT"));    String s1=lexer.number();    int day=Integer.parseInt(s1);    if (day <= 0 || day > 31)     throw createParseException("Bad day ");    retval.set(Calendar.DAY_OF_MONTH,day);    lexer.match(' ');    String month=lexer.ttoken().toLowerCase();    if (month.equals("jan")) {      retval.set(Calendar.MONTH,Calendar.JANUARY);    } else     if (month.equals("feb")) {      retval.set(Calendar.MONTH,Calendar.FEBRUARY);    } else     if (month.equals("mar")) {      retval.set(Calendar.MONTH,Calendar.MARCH);    } else     if (month.equals("apr")) {      retval.set(Calendar.MONTH,Calendar.APRIL);    } else     if (month.equals("may")) {      retval.set(Calendar.MONTH,Calendar.MAY);    } else     if (month.equals("jun")) {      retval.set(Calendar.MONTH,Calendar.JUNE);    } else     if (month.equals("jul")) {      retval.set(Calendar.MONTH,Calendar.JULY);    } else     if (month.equals("aug")) {      retval.set(Calendar.MONTH,Calendar.AUGUST);    } else     if (month.equals("sep")) {      retval.set(Calendar.MONTH,Calendar.SEPTEMBER);    } else     if (month.equals("oct")) {      retval.set(Calendar.MONTH,Calendar.OCTOBER);    } else     if (month.equals("nov")) {      retval.set(Calendar.MONTH,Calendar.NOVEMBER);    } else     if (month.equals("dec")) {      retval.set(Calendar.MONTH,Calendar.DECEMBER);    }    lexer.match(' ');    String s2=lexer.number();    int yr=Integer.parseInt(s2);    retval.set(Calendar.YEAR,yr);    return retval;  } catch (  Exception ex) {    throw createParseException("bad date field");  }}  }
class C{  public boolean isConstant(){  return cond.isConstant() && left.isConstant() && right.isConstant();}  }
class C{  public static final String check(Class<? extends Transformation> curr,Annotation dep,Class<? extends Transformation>[] before,Class<? extends Transformation>[] after){  final List<Class<? extends Transformation>> wrongTrafos=new ArrayList<>();  for (  Class<? extends Transformation> reqOrExclTrafo : getValue(dep)) {    if (dep.annotationType() == Requires.class) {      if (!(contains(before,reqOrExclTrafo) || contains(after,reqOrExclTrafo))) {        wrongTrafos.add(reqOrExclTrafo);      }    } else     if (dep.annotationType() == RequiresBefore.class) {      if (!contains(before,reqOrExclTrafo)) {        wrongTrafos.add(reqOrExclTrafo);      }    } else     if (dep.annotationType() == RequiresAfter.class) {      if (!contains(after,reqOrExclTrafo)) {        wrongTrafos.add(reqOrExclTrafo);      }    } else     if (dep.annotationType() == Excludes.class) {      if (contains(before,reqOrExclTrafo) || contains(after,reqOrExclTrafo)) {        wrongTrafos.add(reqOrExclTrafo);      }    } else     if (dep.annotationType() == ExcludesBefore.class) {      if (contains(before,reqOrExclTrafo)) {        wrongTrafos.add(reqOrExclTrafo);      }    } else     if (dep.annotationType() == ExcludesAfter.class) {      if (contains(after,reqOrExclTrafo)) {        wrongTrafos.add(reqOrExclTrafo);      }    }  }  if (!wrongTrafos.isEmpty()) {    final String dependencyString=dep.annotationType().getSimpleName();    final Iterator<String> wrongTrafoNames=wrongTrafos.stream().map(null).iterator();    return curr.getSimpleName() + " @" + dependencyString+ ": "+ Joiner.on(", ").join(wrongTrafoNames);  }  return null;}  }
class C{  public MovieSingleScrapeAction(boolean withTitle){  if (withTitle) {    putValue(NAME,BUNDLE.getString("movie.scrape.selected"));  }  putValue(SMALL_ICON,IconManager.SEARCH);  putValue(LARGE_ICON_KEY,IconManager.SEARCH);  putValue(SHORT_DESCRIPTION,BUNDLE.getString("movie.scrape.selected"));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.627 -0500",hash_original_method="76A321423E9827230577FC78A6A38E86",hash_generated_method="B7DDBD1D342472346CC4D037D1CE3585") @Override public void sendUrgentData(int data) throws IOException {  throw new SocketException("Method sendUrgentData() is not supported.");}  }
class C{  public void encryptBlock(byte[] data,int offset,byte[] dest,int destOffset){  Kuz128 x=new Kuz128();  x.setQ(0,ByteStrings.bytesToLong(data,offset));  x.setQ(1,ByteStrings.bytesToLong(data,offset + 8));  for (int i=0; i < 9; i++) {    x.setQ(0,x.getQ(0) ^ key.getK()[i].getQ(0));    x.setQ(1,x.getQ(1) ^ key.getK()[i].getQ(1));    for (int j=0; j < 16; j++) {      x.getB()[j]=KuznechikTables.kuz_pi[(x.getB()[j] & 0xFF)];    }    KuznechikMath.kuz_l(x);  }  ByteStrings.write(dest,destOffset,ByteStrings.longToBytes(x.getQ(0) ^ key.getK()[9].getQ(0)),0,8);  ByteStrings.write(dest,destOffset + 8,ByteStrings.longToBytes(x.getQ(1) ^ key.getK()[9].getQ(1)),0,8);}  }
class C{  public synchronized void prepareForRender(Graphics g){  parseData();  g.setFont(getFont());  if (fm == null) {    fm=g.getFontMetrics();  }  polyBounds=computeBounds(polyBounds);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="rs";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static long parseLong(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidLong(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidLong(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidLong(string);  }  return parse(string,i,radix,negative);}  }
class C{  public static String xmlNode(String name,String attributes,String content){  return xmlNode(name,attributes,content,true);}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  CompositeRule rule=convertMode(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Filter in2=getIn2(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in2 == null) {    return null;  }  Rectangle2D defaultRegion;  defaultRegion=(Rectangle2D)in.getBounds2D().clone();  defaultRegion.add(in2.getBounds2D());  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  List srcs=new ArrayList(2);  srcs.add(in2);  srcs.add(in);  Filter filter=new CompositeRable8Bit(srcs,rule,true);  handleColorInterpolationFilters(filter,filterElement);  filter=new PadRable8Bit(filter,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    ++pos;  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected NamespaceImportSpecifierImpl(){  super();}  }
class C{  public static Point findCenter(Rectangle box){  int x=box.x + box.width / 2;  int y=box.y + box.height / 2;  return new Point(x,y);}  }
class C{  public RDFObject createObject(Resource resource,URI... types){  assert types != null && types.length > 0;  Set<URI> list=new HashSet<URI>(Arrays.asList(types));  return createObject(resource,list);}  }
class C{  public HCardParser(InputStream in,String pageUrl) throws IOException {  this((pageUrl == null) ? Jsoup.parse(in,null,"") : Jsoup.parse(in,null,pageUrl),pageUrl);}  }
class C{  public int sub(final int amount){  if (amount < 0) {    return getQuantity();  }  quantity=getQuantity() - amount;  put("quantity",getQuantity());  return getQuantity();}  }
class C{  public String createTempFile(String prefix,String suffix,File directory) throws IllegalArgumentException, IOException {  if (prefix.length() < 3)   throw new IllegalArgumentException("Prefix string too short");  if (suffix == null)   suffix=".tmp";  String folder=null;  if (directory == null) {    folder=getTmpFolderPath();  } else {    folder=directory.getAbsolutePath();  }  int counter=tmpFileCounter.getAndIncrement();  String fileName=prefix + counter + suffix;  String path=folder + File.separator + fileName;  boolean created=createFile(path);  if (!created) {    throw new IOException();  }  return path;}  }
class C{  public static DeletePlatformSessionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeletePlatformSessionE object=new DeletePlatformSessionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deletePlatformSession").equals(reader.getName())) {          object.setDeletePlatformSession(DeletePlatformSession.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static StorageAlarm parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageAlarm object=new StorageAlarm();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageAlarm".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageAlarm)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list7=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alarmId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setAlarmId(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setAlarmId(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alarmTimeStamp").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setAlarmTimeStamp(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alarmType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setAlarmType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","messageId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setMessageId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","objectId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setObjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","objectType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setObjectType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list7.add(null);        reader.next();      } else {        list7.add(NameValuePair.Factory.parse(reader));      }      boolean loopDone7=false;      while (!loopDone7) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone7=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list7.add(null);              reader.next();            } else {              list7.add(NameValuePair.Factory.parse(reader));            }          } else {            loopDone7=true;          }        }      }      object.setParameterList((NameValuePair[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(NameValuePair.class,list7));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","status").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.658 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return getSumTaintInt();}  }
class C{  private CellRecord cursorToCell(final Cursor cursor){  final CellRecord cell=new CellRecord();  final int colNetworkType=cursor.getColumnIndex(Schema.COL_NETWORKTYPE);  final int colIsCdma=cursor.getColumnIndex(Schema.COL_IS_CDMA);  final int colIsServing=cursor.getColumnIndex(Schema.COL_IS_SERVING);  final int colIsNeigbor=cursor.getColumnIndex(Schema.COL_IS_NEIGHBOR);  final int colLogicalCellId=cursor.getColumnIndex(Schema.COL_LOGICAL_CELLID);  final int colActualCellId=cursor.getColumnIndex(Schema.COL_ACTUAL_CELLID);  final int colUtranRnc=cursor.getColumnIndex(Schema.COL_UTRAN_RNC);  final int colPsc=cursor.getColumnIndex(Schema.COL_PSC);  final int colOperatorName=cursor.getColumnIndex(Schema.COL_OPERATORNAME);  final int colOperator=cursor.getColumnIndex(Schema.COL_OPERATOR);  final int colMcc=cursor.getColumnIndex(Schema.COL_MCC);  final int colMnc=cursor.getColumnIndex(Schema.COL_MNC);  final int colLac=cursor.getColumnIndex(Schema.COL_AREA);  final int colBaseId=cursor.getColumnIndex(Schema.COL_CDMA_BASEID);  final int colNetworkId=cursor.getColumnIndex(Schema.COL_CDMA_NETWORKID);  final int colSystemId=cursor.getColumnIndex(Schema.COL_CDMA_SYSTEMID);  final int colStrengthDbm=cursor.getColumnIndex(Schema.COL_STRENGTHDBM);  final int colStrengthAsu=cursor.getColumnIndex(Schema.COL_STRENGTHASU);  final int colTimestamp=cursor.getColumnIndex(Schema.COL_TIMESTAMP);  final int colBeginPositionId=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  final int colEndPositionId=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);  final int columnIndex18=cursor.getColumnIndex(Schema.COL_SESSION_ID);  cell.setNetworkType(cursor.getInt(colNetworkType));  cell.setIsCdma(cursor.getInt(colIsCdma) != 0);  cell.setIsServing(cursor.getInt(colIsServing) != 0);  cell.setIsNeighbor(cursor.getInt(colIsNeigbor) != 0);  cell.setLogicalCellId(cursor.getInt(colLogicalCellId));  cell.setActualCid(cursor.getInt(colActualCellId));  cell.setUtranRnc(cursor.getInt(colUtranRnc));  cell.setPsc(cursor.getInt(colPsc));  cell.setOperatorName(cursor.getString(colOperatorName));  cell.setOperator(cursor.getString(colOperator));  cell.setMcc(cursor.getString(colMcc));  cell.setMnc(cursor.getString(colMnc));  cell.setArea(cursor.getInt(colLac));  cell.setBaseId(cursor.getString(colBaseId));  cell.setNetworkId(cursor.getString(colNetworkId));  cell.setSystemId(cursor.getString(colSystemId));  cell.setStrengthdBm(cursor.getInt(colStrengthDbm));  cell.setStrengthAsu(cursor.getInt(colStrengthAsu));  cell.setOpenBmapTimestamp(cursor.getLong(colTimestamp));  cell.setBeginPosition(loadPositionById(cursor.getString(colBeginPositionId)));  cell.setEndPosition(loadPositionById(cursor.getString(colEndPositionId)));  cell.setSessionId(cursor.getInt(columnIndex18));  return cell;}  }
class C{  @Override protected void makeShapes(DrawContext dc){  if (this.airfieldPaths == null) {    this.airfieldPaths=this.createAirfieldPaths(dc);  }}  }
class C{  public static String native2ascii(String text){  if (text == null)   return null;  char[] myBuffer=text.toCharArray();  StringBuffer sb=new StringBuffer();  for (int i=0; i < myBuffer.length; i++) {    char c=myBuffer[i];    Character.UnicodeBlock ub=UnicodeBlock.of(c);    if (ub == UnicodeBlock.BASIC_LATIN) {      sb.append(c);    } else {      String hexS=Integer.toHexString(c & 0xffff);      sb.append("\\u");      if (hexS.length() < 4) {switch (hexS.length()) {case 1:          sb.append("000");        break;case 2:      sb.append("00");    break;case 3:  sb.append('0');}}sb.append(hexS.toLowerCase());}}return sb.toString();}  }
class C{  public String time2UtcStr(long time){  Date date=new Date(time);  return (utcDateFormat.format(date));}  }
class C{  void readParameters(DatabaseMetaData meta) throws SQLException {  ResultSet rs=meta.getProcedureColumns(null,schema.name,name,null);  ArrayList<DbColumn> list=New.arrayList();  while (rs.next()) {    DbColumn column=DbColumn.getProcedureColumn(schema.getContents(),rs);    if (column.getPosition() > 0) {      list.add(column);    }  }  rs.close();  parameters=new DbColumn[list.size()];  for (int i=0; i < parameters.length; i++) {    DbColumn column=list.get(i);    if (column.getPosition() > 0 && column.getPosition() <= parameters.length) {      parameters[column.getPosition() - 1]=column;    }  }}  }
class C{  public static int width(JLabel c){  FontMetrics fm=c.getFontMetrics(c.getFont());  return fm.stringWidth(c.getText()) + 3;}  }
class C{  @Override public void end(){  super.end();  positionIncrement=0;  positionLength=1;  startOffset=endOffset=0;  type=DEFAULT_TYPE;}  }
class C{  public static PNCounter newPNCounter(){  return new StateBasedPNCounter();}  }
class C{  private ArrayList<Individuum> mutation(ArrayList<Individuum> population,double perc1,double perc2){  ArrayList<Individuum> mutations=new ArrayList<>();  int[] QR=new int[dim];  for (int j=0; j < population.size(); j++) {    short[] gene=population.get(j).getGene().clone();    int q=0, r=dim;    for (int i=0; i < dim; i++) {      QR[(gene[i] == DONT_CARE) ? (q++) : (--r)]=i;    }    if (q > 0 && r < dim && random.nextDouble() <= perc1) {      int rq=random.nextInt(q), rr=random.nextInt(dim - r) + r;      int pq=QR[rq], pr=QR[rr];      gene[pq]=(short)(random.nextInt(phi) + GENE_OFFSET);      gene[pr]=DONT_CARE;      QR[rq]=pr;      QR[rr]=pq;    }    if (random.nextDouble() <= perc2) {      int pr=random.nextInt(dim - r) + r;      gene[QR[pr]]=(short)(random.nextInt(phi) + GENE_OFFSET);    }    mutations.add(makeIndividuum(gene));  }  return mutations;}  }
class C{  public static void closeIfNecessary(Closeable closeable) throws ODataClientException {  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {      throw new ODataClientException("Could not close '" + closeable.getClass().getSimpleName() + "'",e);    }  }}  }
class C{  MetricDescriptor createCustomMetric() throws IOException {  MetricDescriptor metricDescriptor=new MetricDescriptor();  metricDescriptor.setName(metricName);  metricDescriptor.setType(metricType);  LabelDescriptor labelDescriptor=new LabelDescriptor();  labelDescriptor.setKey("environment");  labelDescriptor.setValueType("STRING");  labelDescriptor.setDescription("An arbitrary measurement.");  labelDescriptor.setDescription("Custom Metric");  List<LabelDescriptor> labelDescriptorList=new ArrayList<LabelDescriptor>();  labelDescriptorList.add(labelDescriptor);  metricDescriptor.setLabels(labelDescriptorList);  metricDescriptor.setMetricKind(METRIC_KIND);  metricDescriptor.setValueType("INT64");  metricDescriptor.setUnit("items");  MetricDescriptor descriptorResponse=this.monitoringService.projects().metricDescriptors().create(projectResource,metricDescriptor).execute();  System.out.println("create response" + descriptorResponse.toPrettyString());  return descriptorResponse;}  }
class C{  @Override @Intrinsic @Uninterruptible public int length(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return data.length;}  }
class C{  public ConnectionMultiplexer(TCPChannel channel,InputStream in,OutputStream out,boolean orig){  this.channel=channel;  this.in=in;  this.out=out;  this.orig=orig;  dataIn=new DataInputStream(in);  dataOut=new DataOutputStream(out);}  }
class C{  private void init(){  setTitle("New Feed-forward Network");  networkCreationPanel=new LayeredNetworkCreationPanel(3,this);  setContentPane(networkCreationPanel);}  }
class C{  private ModifiedEnum modified(){  byte b=0;  b|=(0x1 << MODIFIED_BIT);  b|=(0x1 << (MODIFIED_BIT + 1));  b&=flags;switch (b) {case 0:    return ModifiedEnum.NONE;case 8:  return ModifiedEnum.INSERTED;case 16:return ModifiedEnum.REMOVED;case 24:return ModifiedEnum.UPDATED;}throw new IllegalStateException();}  }
class C{  public static String baseUriOf(final HttpServletRequest request){  final StringBuffer requestUrl=request.getRequestURL();  return requestUrl != null ? requestUrl.substring(0,requestUrl.indexOf(request.getServletPath())) : "";}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public QRDecomposition(jMatrix A){  QR=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Maths.hypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  public static <A>EvalTSeq<A> of(final AnyMSeq<Eval<A>> monads){  return new EvalTSeq<>(monads);}  }
class C{  private void convertInstance(Instance instance) throws Exception {  Instance inst=null;  HashMap<String,Double> symbols=new HashMap<String,Double>(5);  if (instance instanceof SparseInstance) {    double[] newVals=new double[instance.numAttributes()];    int[] newIndices=new int[instance.numAttributes()];    double[] vals=instance.toDoubleArray();    double[] valsCopy=instance.toDoubleArray();    for (int z=0; z < getInputFormat().numAttributes(); z++) {      if (instance.attribute(z).isNumeric() && z != getInputFormat().classIndex()) {        symbols.put("A" + (z + 1),new Double(valsCopy[z]));      }    }    int ind=0;    double value;    for (int j=0; j < instance.numAttributes(); j++) {      if (m_SelectCols.isInRange(j)) {        if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {          symbols.put("A",new Double(vals[j]));          symbols.put("MAX",new Double(m_attStats[j].numericStats.max));          symbols.put("MIN",new Double(m_attStats[j].numericStats.min));          symbols.put("MEAN",new Double(m_attStats[j].numericStats.mean));          symbols.put("SD",new Double(m_attStats[j].numericStats.stdDev));          symbols.put("COUNT",new Double(m_attStats[j].numericStats.count));          symbols.put("SUM",new Double(m_attStats[j].numericStats.sum));          symbols.put("SUMSQUARED",new Double(m_attStats[j].numericStats.sumSq));          value=eval(symbols);          if (Double.isNaN(value) || Double.isInfinite(value)) {            System.err.println("WARNING:Error in evaluating the expression: missing value set");            value=Utils.missingValue();          }          if (value != 0.0) {            newVals[ind]=value;            newIndices[ind]=j;            ind++;          }        }      } else {        value=vals[j];        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      }    }    double[] tempVals=new double[ind];    int[] tempInd=new int[ind];    System.arraycopy(newVals,0,tempVals,0,ind);    System.arraycopy(newIndices,0,tempInd,0,ind);    inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());  } else {    double[] vals=instance.toDoubleArray();    double[] valsCopy=instance.toDoubleArray();    for (int z=0; z < getInputFormat().numAttributes(); z++) {      if (instance.attribute(z).isNumeric() && z != getInputFormat().classIndex()) {        symbols.put("A" + (z + 1),new Double(valsCopy[z]));      }    }    for (int j=0; j < getInputFormat().numAttributes(); j++) {      if (m_SelectCols.isInRange(j)) {        if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {          symbols.put("A",new Double(vals[j]));          symbols.put("MAX",new Double(m_attStats[j].numericStats.max));          symbols.put("MIN",new Double(m_attStats[j].numericStats.min));          symbols.put("MEAN",new Double(m_attStats[j].numericStats.mean));          symbols.put("SD",new Double(m_attStats[j].numericStats.stdDev));          symbols.put("COUNT",new Double(m_attStats[j].numericStats.count));          symbols.put("SUM",new Double(m_attStats[j].numericStats.sum));          symbols.put("SUMSQUARED",new Double(m_attStats[j].numericStats.sumSq));          vals[j]=eval(symbols);          if (Double.isNaN(vals[j]) || Double.isInfinite(vals[j])) {            System.err.println("WARNING:Error in Evaluation the Expression: missing value set");            vals[j]=Utils.missingValue();          }        }      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  public static boolean isString(final LuaValue target){  return target != null && target.type() == LuaValue.TSTRING;}  }
class C{  public void testLaggedOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  assertTrue(p.offer(1,null) >= 1);  assertTrue(p.offer(2,null) >= 2);  s1.sn.request(4);  assertTrue(p.offer(3,null) >= 3);  s2.sn.request(4);  p.offer(4,null);  p.close();  s2.awaitComplete();  assertEquals(4,s2.nexts);  s1.awaitComplete();  assertEquals(4,s2.nexts);}  }
