class C{  public GrizzlyLDAPListener(final InetSocketAddress address,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options,TCPNIOTransport transport) throws IOException {  this.transport=DEFAULT_TRANSPORT.acquireIfNull(transport);  this.connectionFactory=factory;  this.options=Options.copyOf(options);  final LDAPServerFilter serverFilter=new LDAPServerFilter(this,options.get(LDAP_DECODE_OPTIONS),options.get(REQUEST_MAX_SIZE_IN_BYTES));  final FilterChain ldapChain=GrizzlyUtils.buildFilterChain(this.transport.get().getProcessor(),serverFilter);  final TCPNIOBindingHandler bindingHandler=TCPNIOBindingHandler.builder(this.transport.get()).processor(ldapChain).build();  this.serverConnection=bindingHandler.bind(address,options.get(CONNECT_MAX_BACKLOG));  final int port=((InetSocketAddress)serverConnection.getLocalAddress()).getPort();  socketAddress=new InetSocketAddress(Connections.getHostString(address),port);}  }
class C{  public void removeValve(String valveName) throws MBeanException {  Container container=null;  try {    container=(Container)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  ObjectName oname;  try {    oname=new ObjectName(valveName);  } catch (  MalformedObjectNameException e) {    throw new MBeanException(e);  }catch (  NullPointerException e) {    throw new MBeanException(e);  }  if (container != null) {    Valve[] valves=container.getPipeline().getValves();    for (int i=0; i < valves.length; i++) {      if (valves[i] instanceof JmxEnabled) {        ObjectName voname=((JmxEnabled)valves[i]).getObjectName();        if (voname.equals(oname)) {          container.getPipeline().removeValve(valves[i]);        }      }    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AssertionIDRequestServiceElement createAssertionIDRequestServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AssertionIDRequestServiceElementImpl();}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  protected ElemTemplateElement findCommonAncestor(MultistepExprHolder head){  int numExprs=head.getLength();  ElemTemplateElement[] elems=new ElemTemplateElement[numExprs];  int[] ancestorCounts=new int[numExprs];  MultistepExprHolder next=head;  int shortestAncestorCount=10000;  for (int i=0; i < numExprs; i++) {    ElemTemplateElement elem=getElemFromExpression(next.m_exprOwner.getExpression());    elems[i]=elem;    int numAncestors=countAncestors(elem);    ancestorCounts[i]=numAncestors;    if (numAncestors < shortestAncestorCount) {      shortestAncestorCount=numAncestors;    }    next=next.m_next;  }  for (int i=0; i < numExprs; i++) {    if (ancestorCounts[i] > shortestAncestorCount) {      int numStepCorrection=ancestorCounts[i] - shortestAncestorCount;      for (int j=0; j < numStepCorrection; j++) {        elems[i]=elems[i].getParentElem();      }    }  }  ElemTemplateElement first=null;  while (shortestAncestorCount-- >= 0) {    boolean areEqual=true;    first=elems[0];    for (int i=1; i < numExprs; i++) {      if (first != elems[i]) {        areEqual=false;        break;      }    }    if (areEqual && isNotSameAsOwner(head,first) && first.canAcceptVariables()) {      if (DIAGNOSE_MULTISTEPLIST) {        System.err.print(first.getClass().getName());        System.err.println(" at   " + first.getSystemId() + " Line "+ first.getLineNumber());      }      return first;    }    for (int i=0; i < numExprs; i++) {      elems[i]=elems[i].getParentElem();    }  }  assertion(false,"Could not find common ancestor!!!");  return null;}  }
class C{  public void appendName(String attrFormat,StringBuilder sb){  boolean hexFormat=false;  if (X500Principal.RFC1779.equals(attrFormat)) {    if (RFC1779_NAMES == oid.getGroup()) {      sb.append(oid.getName());    } else {      sb.append(oid.toOIDString());    }    sb.append('=');    if (value.escapedString == value.getHexString()) {      sb.append(value.getHexString().toUpperCase(Locale.US));    } else     if (value.escapedString.length() != value.rawString.length()) {      value.appendQEString(sb);    } else {      sb.append(value.escapedString);    }  } else {    Object group=oid.getGroup();    if (RFC1779_NAMES == group || RFC2253_NAMES == group) {      sb.append(oid.getName());      if (X500Principal.CANONICAL.equals(attrFormat)) {        int tag=value.getTag();        if (!ASN1StringType.UTF8STRING.checkTag(tag) && !ASN1StringType.PRINTABLESTRING.checkTag(tag) && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {          hexFormat=true;        }      }    } else {      sb.append(oid.toString());      hexFormat=true;    }    sb.append('=');    if (hexFormat) {      sb.append(value.getHexString());    } else {      if (X500Principal.CANONICAL.equals(attrFormat)) {        sb.append(value.makeCanonical());      } else {        sb.append(value.escapedString);      }    }  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("Pipeline[");  sb.append(container);  sb.append(']');  return sb.toString();}  }
class C{  public static void createFileLicenseApproved(final String installationPath){  if (getApproval() && installationPath != null) {    String instanceDirname=Utils.getInstancePathFromInstallPath(installationPath);    String instanceLegalDirName=instanceDirname + File.separator + LEGAL_FOLDER_NAME;    File instanceLegalDir=new File(instanceLegalDirName);    try {      if (!instanceLegalDir.exists()) {        instanceLegalDir.mkdir();      }      new File(instanceLegalDir,ACCEPTED_LICENSE_FILE_NAME).createNewFile();    } catch (    IOException e) {    }  }}  }
class C{  public void testTryingCompletedScenario(){  try {    Request register=createRiRegisterRequest();    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (registerReceivedEvent == null || registerReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial REGISTER request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(registerReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    assertEquals(TransactionState.TRYING,tran.getState());    Response trying=null;    try {      trying=tiMessageFactory.createResponse(Response.TRYING,registerReceivedEvent.getRequest());      tran.sendResponse(trying);    } catch (    Exception ex) {      throw new TiUnexpectedError("Failed to send a TRYING response",ex);    }    assertEquals("The transaction did not pass into the PROCEEDING state " + "upon transmission of a 1xx response.",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The TRYING response has not been sent by the TI.",responseEvent);    assertTrue("A response different from 100 was sent by the TI",Response.TRYING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted REGISTERs should not be passed to the TU",registerReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been resent by the TI upon reception " + "of a retransmitted REGISTER request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of a retransmitted REGISTER",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ok=null;    try {      ok=tiMessageFactory.createResponse(Response.OK,tran.getRequest());      ((ToHeader)ok.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a busy_here " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ok);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a OK response");    }    assertEquals("The Transaction did not remain COMPLETED after transmitting a BUSY_HERE response",TransactionState.COMPLETED,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted REGISTERs should not be passed to the TU",registerReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No OK response has been sent by the TI upon reception " + "of a retransmitted REGISTER request",responseEvent);    assertTrue("A response different from OK was sent by the TI upon " + "reception of a retransmitted invite REGISTER",Response.OK == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the COMPLETED state.",TransactionState.COMPLETED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  protected boolean isRefMap(String resultString){  StringReader r=new StringReader(resultString);  BufferedReader br=new BufferedReader(r);  try {    while (true) {      String s=br.readLine();      if (s == null) {        break;      }      if (s.startsWith("SearchReference")) {        return true;      }    }  } catch (  IOException e) {    Assert.assertEquals(0,1,e.getMessage());  }  return false;}  }
class C{  public void testConstructorSignBytesPositive3(){  byte aBytes[]={-12,56,100};  int aSign=1;  byte rBytes[]={0,-12,56,100};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static boolean isNamedProcess(Context context,String processName){  if (context == null) {    return false;  }  int pid=android.os.Process.myPid();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> processInfoList=manager.getRunningAppProcesses();  if (ListUtils.isEmpty(processInfoList)) {    return false;  }  for (  RunningAppProcessInfo processInfo : processInfoList) {    if (processInfo != null && processInfo.pid == pid && ObjectUtils.isEquals(processName,processInfo.processName)) {      return true;    }  }  return false;}  }
class C{  public void addSessionPartner(SAML2SessionPartner sessionPartner){  Iterator i=sessionPartners.iterator();  while (i.hasNext()) {    if (((SAML2SessionPartner)i.next()).equals(sessionPartner)) {      return;    }  }  sessionPartners.add(sessionPartner);}  }
class C{  private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  public boolean isAuthenticated(){  return isAuthenticated;}  }
class C{  public boolean isRepresentationClassReader(){  return java.io.Reader.class.isAssignableFrom(representationClass);}  }
class C{  public boolean accept(File dir,String name){  String filename=name;  if ((filter == null) || (filter.length() == 0)) {    return true;  }  StringTokenizer st=new StringTokenizer(filter,"*");  if (filter.charAt(0) != '*') {    int index=0;    if ((index=filename.indexOf(st.nextToken())) != 0) {      return false;    }    filename=filename.substring(index);  }  while (st.hasMoreElements()) {    String token=st.nextToken();    int idx=0;    if ((idx=filename.indexOf(token)) == -1) {      return false;    }    filename=filename.substring(idx + token.length());  }  if (!filter.endsWith("*") && (filename.length() != 0)) {    return false;  }  return true;}  }
class C{  public static void resetSessionMaxAge(){  sessionMaxAge=-1;}  }
class C{  public void close() throws IOException {  out.close();}  }
class C{  private void executeSafeDataManyErrorsScenario() throws Exception {  UpdateMsg updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  sleep(NO_TIMEOUT_RS_SLEEP_TIME);  List<Integer> serversInError=Arrays.asList(10);  session.publish(new AckMsg(updateMsg.getCSN(),true,false,false,serversInError));  updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  sleep(NO_TIMEOUT_RS_SLEEP_TIME);  serversInError=Arrays.asList(10,20);  session.publish(new AckMsg(updateMsg.getCSN(),true,false,false,serversInError));  updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  scenarioExecuted=true;}  }
class C{  public InflaterOutputStream(OutputStream out,Inflater infl,int bufLen){  super(out);  if (out == null)   throw new NullPointerException("Null output");  if (infl == null)   throw new NullPointerException("Null inflater");  if (bufLen <= 0)   throw new IllegalArgumentException("Buffer size < 1");  inf=infl;  buf=new byte[bufLen];}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.HashPasswordElement createHashPasswordElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HashPasswordElementImpl();}  }
class C{  public static MouseWheelListener remove(MouseWheelListener l,MouseWheelListener oldl){  return (MouseWheelListener)removeInternal(l,oldl);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws org.xml.sax.SAXException {  return getCurrentProcessor().resolveEntity(this,publicId,systemId);}  }
class C{  private void finishedDispatching(boolean dispatched){  this.dispatched=dispatched;  if (notifier != null) {synchronized (notifier) {      notifier.notifyAll();    }  }  if (listener != null) {    listener.run();  }}  }
class C{  public void visitClassType(String name){}  }
class C{  public static String filter(String message){  if (message == null)   return (null);  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return (result.toString());}  }
class C{  public static Query create(final long startTimeInMilliseconds,final long executionTimeInMilliseconds,final String clientAddress,final StatementType statementType,final String keyspace,final String tableName,final String statement,final String executionErrorMessage){  return new Query(startTimeInMilliseconds,executionTimeInMilliseconds,clientAddress,statementType,keyspace,tableName,statement,executionErrorMessage);}  }
class C{  public ByteMessage(byte[] data){  message=data;}  }
class C{  public void testUtf8() throws Exception {  String str="AbCdEfGhIjKlMnOpQrStUvWxYzX" + "\u00a3\u00c5\u00c9";  ByteArrayInputStream aa=new ByteArrayInputStream(str.getBytes());  InputStreamReader a=new InputStreamReader(aa);  try {    assertEquals("UTF-8",a.getEncoding());    int x=a.read();    assertEquals('A',x);    char[] c=new char[29];    x=a.read(c,0,3);    assertEquals(3,x);    assertEquals("bCd",new String(c,0,3));    x=a.read(c,3,26);    assertEquals(26,x);    assertEquals("EfGhIjKlMnOpQrStUvWxYzX\u00a3\u00c5\u00c9",new String(c,3,26));  }  finally {    a.close();  }}  }
class C{  ImmutableList(final A head,final ImmutableList<A> tail){  this.tail=tail;  this.head=head;}  }
class C{  private PlaLineInt reposition_line(PlaLineIntAlist p_line_arr,int p_no){  if (p_line_arr.size() - p_no < 3)   return null;  PlaLineInt translate_line=p_line_arr.get(p_no);  PlaPoint prev_corner=p_line_arr.get(p_no - 2).intersection(p_line_arr.get(p_no - 1),"probably messy");  if (prev_corner.is_NaN())   return null;  PlaPoint next_corner=p_line_arr.get(p_no + 1).intersection(p_line_arr.get(p_no + 2),"probably messy");  if (next_corner.is_NaN())   return null;  double prev_dist=translate_line.distance_signed(prev_corner.to_float());  double next_dist=translate_line.distance_signed(next_corner.to_float());  if (Signum.of(prev_dist) != Signum.of(next_dist))   return null;  PlaPoint nearest_point;  double max_translate_dist;  if (Math.abs(prev_dist) < Math.abs(next_dist)) {    nearest_point=prev_corner;    max_translate_dist=prev_dist;  } else {    nearest_point=next_corner;    max_translate_dist=next_dist;  }  double translate_dist=max_translate_dist;  double delta_dist=max_translate_dist;  PlaSide side_of_nearest_point=translate_line.side_of(nearest_point);  int sign=Signum.as_int(max_translate_dist);  PlaLineInt new_line=null;  PlaLineInt[] check_lines=new PlaLineInt[3];  check_lines[0]=p_line_arr.get(p_no - 1);  check_lines[2]=p_line_arr.get(p_no + 1);  boolean first_time=true;  while (first_time || Math.abs(delta_dist) > min_move_dist) {    boolean check_ok=false;    if (first_time && nearest_point instanceof PlaPointInt) {      check_lines[1]=new PlaLineInt((PlaPointInt)nearest_point,translate_line.direction());    } else {      check_lines[1]=translate_line.translate(-translate_dist);    }    if (check_lines[1].equals(translate_line)) {      return null;    }    PlaSide new_line_side_of_nearest_point=check_lines[1].side_of(nearest_point);    if (new_line_side_of_nearest_point != side_of_nearest_point && new_line_side_of_nearest_point != PlaSide.COLLINEAR) {      double shorten_value=sign * 0.5;      max_translate_dist-=shorten_value;      translate_dist-=shorten_value;      delta_dist-=shorten_value;      continue;    }    Polyline tmp=new Polyline(check_lines);    if (tmp.plaline_len() == 3) {      ShapeTile shape_to_check=tmp.offset_shape(curr_half_width,0);      check_ok=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);    }    delta_dist/=2;    if (check_ok) {      new_line=check_lines[1];      if (first_time) {        break;      }      translate_dist+=delta_dist;    } else {      translate_dist-=delta_dist;    }    first_time=false;  }  if (new_line != null) {    PlaPointFloat afloat=check_lines[0].intersection_approx(new_line);    if (!afloat.is_NaN())     r_board.changed_area.join(afloat,curr_layer);    afloat=check_lines[2].intersection_approx(new_line);    if (!afloat.is_NaN())     r_board.changed_area.join(afloat,curr_layer);    afloat=p_line_arr.get(p_no - 1).intersection_approx(p_line_arr.get(p_no));    if (!afloat.is_NaN())     r_board.changed_area.join(afloat,curr_layer);    afloat=p_line_arr.get(p_no).intersection_approx(p_line_arr.get(p_no + 1));    if (!afloat.is_NaN())     r_board.changed_area.join(afloat,curr_layer);  }  return new_line;}  }
class C{  public int hashCode(){  int hash=type.hashCode();  if (name != null)   hash^=name.hashCode();  if (actions != null)   hash^=actions.hashCode();  return hash;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestElement createAuthnRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestElementImpl();}  }
class C{  public final void testGetPublicExponent(){  RSAKeyGenParameterSpec rkgps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertEquals(0,rkgps.getPublicExponent().intValue());}  }
class C{  void detachView(){  getPresenter().detachView(delegateCallback.shouldInstanceBeRetained());}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc1=(Document)load("hc_staff",true);  doc2=(Document)load("hc_staff",false);  newAttribute=doc2.createAttribute("newAttribute");  addressElementList=doc1.getElementsByTagName("acronym");  testAddress=(Element)addressElementList.item(4);{    boolean success=false;    try {      attrAddress=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public DTMException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  public OnlineUpdateException(LocalizableMessage msg){  super(msg);}  }
class C{  public SQLNonTransientConnectionException(){}  }
class C{  private void init(){  String homeBase=userConfig.getHomeBase();  File homeBaseDir=new File(homeBase);  if (!homeBaseDir.exists() || !homeBaseDir.isDirectory())   return;  String homeBaseFiles[]=homeBaseDir.list();  if (homeBaseFiles == null) {    return;  }  for (int i=0; i < homeBaseFiles.length; i++) {    File homeDir=new File(homeBaseDir,homeBaseFiles[i]);    if (!homeDir.isDirectory() || !homeDir.canRead())     continue;    homes.put(homeBaseFiles[i],homeDir.toString());  }}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int[] bandOffs;  if (numBanks == 1) {    bandOffs=orderBands(bandOffsets,w * h);  } else {    bandOffs=new int[bandOffsets.length];  }  SampleModel sampleModel=new BandedSampleModel(dataType,w,h,w,bankIndices,bandOffs);  return sampleModel;}  }
class C{  public static synchronized String[][] read(String fileName,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  LogReader lr=new LogReader();  lr.readConfiguration();  if (fileName == null) {    throw new IllegalArgumentException("filename can't be null");  }  lr.setLoggerName(fileName);  if (lr.isAllowed(userCrdential) != true) {    throw new AMLogException(fileName + ":" + AMLogException.LOG_RD_AUTH_FAILED);  }  String fullFileName=logPathName + fileName;  LogQuery qry=new LogQuery(LogQuery.ALL_RECORDS);  if (logTypeIsFile) {    queryResult=currentHandler.logRecRead(fullFileName,qry,false);  } else {    queryResult=currentDBHandler.logRecRead(fileName,qry,manager,false);  }  return queryResult;}  }
class C{  private static boolean isAccessible(Path path,AccessMode... modes){  try {    provider(path).checkAccess(path,modes);    return true;  } catch (  IOException x) {    return false;  }}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  if (bands != null) {    if (bands.length != 1)     throw new RasterFormatException("MultiPixelPackedSampleModel has " + "only one band.");  }  SampleModel sm=createCompatibleSampleModel(width,height);  return sm;}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  public void removeChild(XMPNode node){  getChildren().remove(node);  cleanupChildren();}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public void toString(StringBuilder buffer){switch (matchType) {case EQUALITY_MATCH_TYPE:    appendAttributeTypeAndAssertion(buffer,"=");  break;case SUBSTRINGS_TYPE:buffer.append("(");buffer.append(rawAttributeType);buffer.append("=");if (subInitial != null) {RawFilter.valueToFilterString(buffer,subInitial);}if (subAny != null) {for (ByteString s : subAny) {buffer.append("*");RawFilter.valueToFilterString(buffer,s);}}buffer.append("*");if (subFinal != null) {RawFilter.valueToFilterString(buffer,subFinal);}buffer.append(")");break;case GREATER_OR_EQUAL_TYPE:appendAttributeTypeAndAssertion(buffer,">=");break;case LESS_OR_EQUAL_TYPE:appendAttributeTypeAndAssertion(buffer,"<=");break;case PRESENT_TYPE:buffer.append("(");buffer.append(rawAttributeType);buffer.append("=*)");break;case APPROXIMATE_MATCH_TYPE:appendAttributeTypeAndAssertion(buffer,"~=");break;case EXTENSIBLE_MATCH_TYPE:buffer.append("(");if (rawAttributeType != null) {buffer.append(rawAttributeType);}if (matchingRuleID != null) {buffer.append(":");buffer.append(matchingRuleID);}buffer.append(":=");RawFilter.valueToFilterString(buffer,rawAssertionValue);buffer.append(")");break;}}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  void capture(final Context context,final Response response,final CapturePoint mode){  StringWriter out=new StringWriter();  PrintWriter writer=new PrintWriter(out);  String id=context.getId();switch (mode) {case RESPONSE:    captureResponse(writer,response,id);  break;case FILTERED_RESPONSE:captureFilteredResponse(writer,response,id);break;default :throw new IllegalArgumentException("The given mode is not accepted: " + mode.name());}if (captureContext) {writer.println("Context's content as JSON:");captureContextAsJson(writer,context);}logger.info(out.toString());}  }
class C{  private String processResourceOffering(ResourceOffering offering) throws SOAPBindingException {  try {    ServiceInstance si=offering.getServiceInstance();    List descriptions=si.getDescription();    if (descriptions == null || descriptions.isEmpty()) {      Utils.debug.error("MessageProcessor:processResourceOffering: " + "descriptions are null.");      throw new SOAPBindingException(Utils.bundle.getString("noDescriptions"));    }    Iterator iter=descriptions.iterator();    while (iter.hasNext()) {      Description desc=(Description)iter.next();      List secMechIDs=desc.getSecurityMechID();      if (secMechIDs == null || secMechIDs.isEmpty()) {        Utils.debug.error("MessageProcessor.processResourceOffering:" + " security Mechs are empty");        throw new SOAPBindingException(Utils.bundle.getString("noSecurityMechs"));      }      return (String)secMechIDs.iterator().next();    }    throw new SOAPBindingException(Utils.bundle.getString("noSecurityMechs"));  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.processResourceOffering: " + "Failed in processing the resource offering.",ex);    throw new SOAPBindingException(Utils.bundle.getString("processOfferingFailed"));  }}  }
class C{  public int compareTo(ObjectName name){  if (name == this)   return 0;  int domainValue=this.getDomain().compareTo(name.getDomain());  if (domainValue != 0)   return domainValue;  String thisTypeKey=this.getKeyProperty("type");  String anotherTypeKey=name.getKeyProperty("type");  if (thisTypeKey == null)   thisTypeKey="";  if (anotherTypeKey == null)   anotherTypeKey="";  int typeKeyValue=thisTypeKey.compareTo(anotherTypeKey);  if (typeKeyValue != 0)   return typeKeyValue;  return this.getCanonicalName().compareTo(name.getCanonicalName());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementcreatenewattribute.class,args);}  }
class C{  private void initialSearchFromCookie(final CookieEntrySender entrySender) throws DirectoryException, ChangelogException {  if (!sendBaseChangelogEntry(entrySender.searchOp)) {    return;  }  final ReplicationDomainDB replicationDomainDB=getChangelogDB().getReplicationDomainDB();  CursorOptions options=new CursorOptions(GREATER_THAN_OR_EQUAL_TO_KEY,AFTER_MATCHING_KEY);  try (final MultiDomainDBCursor cursor=replicationDomainDB.getCursorFrom(entrySender.cookie,options,entrySender.excludedBaseDNs);ECLMultiDomainDBCursor replicaUpdatesCursor=new ECLMultiDomainDBCursor(domainPredicate,cursor)){    if (sendCookieEntriesFromCursor(entrySender,replicaUpdatesCursor)) {      entrySender.transitioningToPersistentSearchPhase();      sendCookieEntriesFromCursor(entrySender,replicaUpdatesCursor);    }  }  finally {    entrySender.finalizeInitialSearch();  }}  }
class C{  private static int computeBytesPerRow(PdfDictionary imageDictionary,PdfDictionary colorSpaceDic){  PdfNumber wObj=imageDictionary.getAsNumber(PdfName.Width);  PdfNumber bpcObj=imageDictionary.getAsNumber(PdfName.BitsPerComponent);  int cpp=getComponentsPerPixel(imageDictionary.getAsName(PdfName.ColorSpace),colorSpaceDic);  int w=wObj.intValue();  int bpc=bpcObj != null ? bpcObj.intValue() : 1;  return (w * bpc * cpp + 7) / 8;}  }
class C{  public static UIActions createActionsRegion(){  return (UIActions)JSFComponentFactory.createComponent(UIActions.COMPONENT_TYPE);}  }
class C{  static EnvironmentConfig parseConfigEntry(JEBackendCfg cfg) throws ConfigException {  validateDbCacheSize(cfg.getDBCacheSize());  EnvironmentConfig envConfig=defaultConfig();  setDurability(envConfig,cfg.isDBTxnNoSync(),cfg.isDBTxnWriteNoSync());  setJEProperties(cfg,envConfig,cfg.dn().rdn().getFirstAVA().getAttributeValue());  setDBLoggingLevel(envConfig,cfg.getDBLoggingLevel(),cfg.dn(),cfg.isDBLoggingFileHandlerOn());  return setJEProperties(envConfig,cfg.getJEProperty(),attrMap);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node imported;  DocumentType docType;  DOMImplementation domImpl;  String nullNS=null;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("test:root",nullNS,nullNS);{    boolean success=false;    try {      imported=doc.importNode(docType,true);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  private void createSunServiceIdFiles(File dirHandle,Set sunserviceids) throws SMSException {  createLookupFiles(dirHandle,SMSEntry.ATTR_SERVICE_ID,sunserviceids);}  }
class C{  public PlaPointInt round(){  if (is_NaN())   return new PlaPointInt();  return new PlaPointInt(Math.round(v_x),Math.round(v_y));}  }
class C{  public void testFlipBitNegativeInside5(){  String as="-18446744073709551615";  String res="-18446744073709551616";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  protected synchronized void add(PrintWriter writer,String name,String aliases,String appBase,boolean manager,boolean autoDeploy,boolean deployOnStartup,boolean deployXML,boolean unpackWARs,boolean copyXML,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.add",name));  }  if ((name == null) || name.length() == 0) {    writer.println(smClient.getString("hostManagerServlet.invalidHostName",name));    return;  }  if (engine.findChild(name) != null) {    writer.println(smClient.getString("hostManagerServlet.alreadyHost",name));    return;  }  File appBaseFile=null;  File file=null;  String applicationBase=appBase;  if (applicationBase == null || applicationBase.length() == 0) {    applicationBase=name;  }  file=new File(applicationBase);  if (!file.isAbsolute())   file=new File(engine.getCatalinaBase(),file.getPath());  try {    appBaseFile=file.getCanonicalFile();  } catch (  IOException e) {    appBaseFile=file;  }  if (!appBaseFile.mkdirs() && !appBaseFile.isDirectory()) {    writer.println(smClient.getString("hostManagerServlet.appBaseCreateFail",appBaseFile.toString(),name));    return;  }  File configBaseFile=getConfigBase(name);  if (manager) {    if (configBaseFile == null) {      writer.println(smClient.getString("hostManagerServlet.configBaseCreateFail",name));      return;    }    try (InputStream is=getServletContext().getResourceAsStream("/manager.xml")){      Path dest=(new File(configBaseFile,"manager.xml")).toPath();      Files.copy(is,dest);    } catch (    IOException e) {      writer.println(smClient.getString("hostManagerServlet.managerXml"));      return;    }  }  StandardHost host=new StandardHost();  host.setAppBase(applicationBase);  host.setName(name);  host.addLifecycleListener(new HostConfig());  if ((aliases != null) && !("".equals(aliases))) {    StringTokenizer tok=new StringTokenizer(aliases,", ");    while (tok.hasMoreTokens()) {      host.addAlias(tok.nextToken());    }  }  host.setAutoDeploy(autoDeploy);  host.setDeployOnStartup(deployOnStartup);  host.setDeployXML(deployXML);  host.setUnpackWARs(unpackWARs);  host.setCopyXML(copyXML);  try {    engine.addChild(host);  } catch (  Exception e) {    writer.println(smClient.getString("hostManagerServlet.exception",e.toString()));    return;  }  host=(StandardHost)engine.findChild(name);  if (host != null) {    writer.println(smClient.getString("hostManagerServlet.add",name));  } else {    writer.println(smClient.getString("hostManagerServlet.addFailed",name));  }}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionInstance(Context context,String resourceId,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public TraditionalWorkQueueMonitorTestCase() throws Exception {  super(null);}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void writeUINT64(long number,OutputStream out) throws IOException {  if (number < 0) {    throw new IllegalArgumentException("positive value expected.");  }  byte[] toWrite=new byte[8];  for (int i=0; i <= 56; i+=8) {    toWrite[i / 8]=(byte)((number >> i) & 0xFF);  }  out.write(toWrite);}  }
class C{  public ContentModel(int type,Object content,ContentModel next){  this.type=type;  this.content=content;  this.next=next;}  }
class C{  @Override protected void processToken(SoapMessage message) throws Fault {  Header header=findSecurityHeader(message,false);  if (header == null) {    return;  }  Element el=(Element)header.getObject();  Element child=DOMUtils.getFirstElement(el);  while (child != null) {    if (WSConstants.BINARY_TOKEN_LN.equals(child.getLocalName()) && WSConstants.WSSE_NS.equals(child.getNamespaceURI()) && AMSTSConstants.AM_SESSION_TOKEN_ASSERTION_BST_VALUE_TYPE.equals(child.getAttribute("ValueType"))) {      try {        List<WSSecurityEngineResult> validationResults=validateToken(child);        if (validationResults != null) {          List<WSHandlerResult> results=CastUtils.cast((List<?>)message.get(WSHandlerConstants.RECV_RESULTS));          if (results == null) {            results=new ArrayList<WSHandlerResult>();            message.put(WSHandlerConstants.RECV_RESULTS,results);          }          WSHandlerResult rResult=new WSHandlerResult(null,validationResults);          results.add(0,rResult);          assertTokens(message);          Principal principal=(Principal)validationResults.get(0).get(WSSecurityEngineResult.TAG_PRINCIPAL);          message.put(WSS4JInInterceptor.PRINCIPAL_RESULT,principal);          SecurityContext sc=message.get(SecurityContext.class);          if (sc == null || sc.getUserPrincipal() == null) {            message.put(SecurityContext.class,new DefaultSecurityContext(principal,null));          }        }      } catch (      WSSecurityException ex) {        throw new Fault(ex);      }    }    child=DOMUtils.getNextElement(child);  }}  }
class C{  public synchronized void addObject(NSObject obj){  set.add(obj);}  }
class C{  public void testInsert4() throws SQLException {  DatabaseCreator.fillSimpleTable1(conn);  statement.execute("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE2 + " SELECT id, speed*10 AS speed, size-1 AS size FROM "+ DatabaseCreator.SIMPLE_TABLE1);  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.SIMPLE_TABLE2 + " AS a JOIN "+ DatabaseCreator.SIMPLE_TABLE1+ " AS b ON a.speed = 10*b.speed AND a.size = b.size-1");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public PdfFormXObject put(PdfName key,PdfObject value){  getPdfObject().put(key,value);  return this;}  }
class C{  public JobService jobRangeByState(String state,long from,long to,String order,Handler<AsyncResult<List<Job>>> handler){  delegate.jobRangeByState(state,from,to,order,handler);  return this;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  FSSAMLTargetURLsEditViewBean vb=(FSSAMLTargetURLsEditViewBean)getViewBean(FSSAMLTargetURLsEditViewBean.class);  backTrail();  unlockPageTrailForSwapping();  passPgSessionMap(vb);  populateValues=true;  vb.forwardTo(getRequestContext());}  }
class C{  public FacebookException(){  super();}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public final void testDEFAULTmdName(){  assertEquals("SHA-1",PSSParameterSpec.DEFAULT.getDigestAlgorithm());}  }
class C{  public void recycle(){  nextRequest();  socketWrapper=null;}  }
class C{  public void testCertificateFactory15() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  List<Certificate> list=new Vector<Certificate>();  for (int i=0; i < certFs.length; i++) {    CertPath cp=certFs[i].generateCertPath(list);    List<? extends Certificate> list1=cp.getCertificates();    assertTrue("List should be empty",list1.isEmpty());  }}  }
class C{  int shouldDebugGraphics(){  return DebugGraphics.shouldComponentDebug(this);}  }
class C{  public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  public int encodeAndWrite(byte[] rawAudio) throws IOException {  int uploadedAudioSize=0;  ByteArrayInputStream ios=new ByteArrayInputStream(rawAudio);  byte[] data=new byte[SpeechConfiguration.FRAME_SIZE * 2];  int bufferSize, read;  while ((read=ios.read(data)) > 0) {    bufferSize=read;    byte[] pcmBuffer=new byte[read];    System.arraycopy(data,0,pcmBuffer,0,read);    ShortBuffer shortBuffer=ShortBuffer.allocate(bufferSize);    for (int i=0; i < read; i+=2) {      int b1=pcmBuffer[i] & 0xff;      int b2=pcmBuffer[i + 1] << 8;      shortBuffer.put((short)(b1 | b2));    }    shortBuffer.flip();    ByteBuffer opusBuffer=ByteBuffer.allocate(bufferSize);    int opus_encoded=JNAOpus.INSTANCE.opus_encode(this.opusEncoder,shortBuffer,SpeechConfiguration.FRAME_SIZE,opusBuffer,bufferSize);    opusBuffer.position(opus_encoded);    opusBuffer.flip();    byte[] opusData=new byte[opusBuffer.remaining()];    opusBuffer.get(opusData,0,opusData.length);    if (opus_encoded > 0) {      uploadedAudioSize+=opusData.length;      System.out.println("This is where I'd write some data. " + uploadedAudioSize + " to be specific.");      writer.writePacket(opusData,0,opusData.length);    }  }  ios.close();  return uploadedAudioSize;}  }
class C{  public static byte[] createDataPackage(ChannelData cdata){  int dlength=cdata.getDataPackageLength();  int length=getDataPackageLength(dlength);  byte[] data=new byte[length];  int offset=0;  System.arraycopy(START_DATA,0,data,offset,START_DATA.length);  offset+=START_DATA.length;  toBytes(dlength,data,START_DATA.length);  offset+=4;  cdata.getDataPackage(data,offset);  offset+=dlength;  System.arraycopy(END_DATA,0,data,offset,END_DATA.length);  offset+=END_DATA.length;  return data;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemParam v=(ElemParam)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setParam(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public void redo(){  if (board_is_read_only || !(interactive_state instanceof StateMenu))   return;  TreeSet<Integer> changed_nets=new TreeSet<Integer>();  if (r_board.redo(changed_nets)) {    for (    Integer changed_net : changed_nets) {      update_ratsnest(changed_net);    }    screen_messages.set_status_message(resources.getString("redo"));  } else {    screen_messages.set_status_message(resources.getString("no_more_redo_possible"));  }  actlog.start_scope(LogfileScope.REDO);  repaint();}  }
class C{  protected synchronized void updateLocation(Point newLocn){  prev=locn;  locn=newLocn;  if (Math.abs(locn.x - prev.x) > hysteresis || Math.abs(locn.y - prev.y) > hysteresis) {    if (timer.isRunning())     timer.stop();  } else {    if (!timer.isRunning())     timer.start();  }}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  ByteString readByteString() throws IOException {  int firstByte=readByte();  boolean huffmanDecode=(firstByte & 0x80) == 0x80;  int length=readInt(firstByte,PREFIX_7_BITS);  if (huffmanDecode) {    return ByteString.of(Huffman.get().decode(source.readByteArray(length)));  } else {    return source.readByteString(length);  }}  }
class C{  @Deprecated public Iterator<PdfObject> directIterator(){  return new PdfArrayDirectIterator(list.iterator());}  }
class C{  private int scrollBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){  int delta=0;  if (dy > 0) {    topBorder=getPaddingTop();    bottomBorder+=dy;    mCurrentPosition=lastAttachedItemPosition + 1;    fillGrid(recycler,state,true);    if (spanBottomMin >= bottomBorder) {      delta=dy;      bottomBorder-=dy;    } else {      bottomBorder=getHeight() - getPaddingBottom();      if (spanBottomMax - bottomBorder >= dy) {        delta=dy;      } else {        delta=Math.max(0,spanBottomMax - bottomBorder);      }    }    offsetChildrenVertical(-delta);    for (int i=0; i < mSpanCount; i++) {      spanTop[i]-=delta;      spanBottom[i]-=delta;    }    spanTopMin-=delta;    spanTopMax-=delta;    spanBottomMin-=delta;    spanBottomMax-=delta;    recycleTopInvisibleViews(recycler);  } else {    topBorder+=dy;    bottomBorder=getHeight() - getPaddingBottom();    if (firstAttachedItemPosition == -1 || firstAttachedItemPosition >= state.getItemCount()) {      firstAttachedItemPosition=state.getItemCount() - 1;      lastAttachedItemPosition=firstAttachedItemPosition;      mCurrentPosition=firstAttachedItemPosition;    } else {      mCurrentPosition=firstAttachedItemPosition - 1;    }    fillGrid(recycler,state,false);    if (spanTopMax <= topBorder) {      delta=dy;      topBorder-=dy;    } else {      topBorder=getPaddingTop();      if (spanTopMin - topBorder <= dy) {        delta=dy;      } else {        delta=-Math.max(0,topBorder - spanTopMin);      }    }    offsetChildrenVertical(-delta);    for (int i=0; i < mSpanCount; i++) {      spanTop[i]-=delta;      spanBottom[i]-=delta;    }    spanTopMin-=delta;    spanTopMax-=delta;    spanBottomMin-=delta;    spanBottomMax-=delta;    recycleBottomInvisibleViews(recycler);  }  scrollOffset+=delta;  return delta;}  }
class C{  public BindResult bind(BindRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.bind(request);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  hasSubordinatesType=DirectoryServer.getSchema().getAttributeType("hassubordinates");  entries=TestCaseUtils.makeEntries("dn: dc=example,dc=com","objectclass: top","objectclass: domain","dc: example","","dn: ou=People,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: People","","dn: ou=Employees,ou=People,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: Employees","","dn: ou=Buildings,dc=example,dc=com","objectclass: top","objectclass: organizationalUnit","ou: Buildings","","dn: uid=user.0,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aaccf","sn: Amar","cn: Aaccf Amar","initials: AQA","employeeNumber: 0","uid: user.0","mail: user.0@example.com","userPassword: password","telephoneNumber: 380-535-2354","homePhone: 707-626-3913","pager: 456-345-7750","mobile: 366-674-7274","street: 99262 Eleventh Street","l: Salem","st: NM","postalCode: 36530","postalAddress: Aaccf Amar$99262 Eleventh Street$Salem, NM  36530","description: This is the description for Aaccf Amar.","","dn: uid=user.1,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aaren","sn: Atp","cn: Aaren Atp","initials: APA","employeeNumber: 1","uid: user.1","mail: user.1@example.com","userPassword: password","telephoneNumber: 643-278-6134","homePhone: 546-786-4099","pager: 508-261-3187","mobile: 377-267-7824","street: 78113 Fifth Street","l: Chico","st: TN","postalCode: 72322","postalAddress: Aaren Atp$78113 Fifth Street$Chico, TN  72322","description: This is the description for Aaren Atp.","","dn: uid=user.2,ou=Employees,ou=People,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","givenName: Aarika","sn: Atpco","cn: Aarika Atpco","initials: ARA","employeeNumber: 2","uid: user.2","mail: user.2@example.com","userPassword: password","telephoneNumber: 547-504-3498","homePhone: 955-899-7308","pager: 710-832-9316","mobile: 688-388-4525","street: 59208 Elm Street","l: Youngstown","st: HI","postalCode: 57377","postalAddress: Aarika Atpco$59208 Elm Street$Youngstown, HI  57377","description: This is the description for Aarika Atpco.");  TestCaseUtils.clearBackend("userRoot");  TestCaseUtils.addEntries(entries);}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  int mode=0;  if (request.getParameter("XML") != null && request.getParameter("XML").equals("true")) {    mode=1;  }  StatusTransformer.setContentType(response,mode);  PrintWriter writer=response.getWriter();  boolean completeStatus=false;  if ((request.getPathInfo() != null) && (request.getPathInfo().equals("/all"))) {    completeStatus=true;  }  Object[] args=new Object[1];  args[0]=request.getContextPath();  StatusTransformer.writeHeader(writer,args,mode);  args=new Object[2];  args[0]=request.getContextPath();  if (completeStatus) {    args[1]=sm.getString("statusServlet.complete");  } else {    args[1]=sm.getString("statusServlet.title");  }  StatusTransformer.writeBody(writer,args,mode);  args=new Object[9];  args[0]=sm.getString("htmlManagerServlet.manager");  args[1]=response.encodeURL(request.getContextPath() + "/html/list");  args[2]=sm.getString("htmlManagerServlet.list");  args[3]=response.encodeURL(request.getContextPath() + "/" + sm.getString("htmlManagerServlet.helpHtmlManagerFile"));  args[4]=sm.getString("htmlManagerServlet.helpHtmlManager");  args[5]=response.encodeURL(request.getContextPath() + "/" + sm.getString("htmlManagerServlet.helpManagerFile"));  args[6]=sm.getString("htmlManagerServlet.helpManager");  if (completeStatus) {    args[7]=response.encodeURL(request.getContextPath() + "/status");    args[8]=sm.getString("statusServlet.title");  } else {    args[7]=response.encodeURL(request.getContextPath() + "/status/all");    args[8]=sm.getString("statusServlet.complete");  }  StatusTransformer.writeManager(writer,args,mode);  args=new Object[9];  args[0]=sm.getString("htmlManagerServlet.serverTitle");  args[1]=sm.getString("htmlManagerServlet.serverVersion");  args[2]=sm.getString("htmlManagerServlet.serverJVMVersion");  args[3]=sm.getString("htmlManagerServlet.serverJVMVendor");  args[4]=sm.getString("htmlManagerServlet.serverOSName");  args[5]=sm.getString("htmlManagerServlet.serverOSVersion");  args[6]=sm.getString("htmlManagerServlet.serverOSArch");  args[7]=sm.getString("htmlManagerServlet.serverHostname");  args[8]=sm.getString("htmlManagerServlet.serverIPAddress");  StatusTransformer.writePageHeading(writer,args,mode);  args=new Object[8];  args[0]=ServerInfo.getServerInfo();  args[1]=System.getProperty("java.runtime.version");  args[2]=System.getProperty("java.vm.vendor");  args[3]=System.getProperty("os.name");  args[4]=System.getProperty("os.version");  args[5]=System.getProperty("os.arch");  try {    InetAddress address=InetAddress.getLocalHost();    args[6]=address.getHostName();    args[7]=address.getHostAddress();  } catch (  UnknownHostException e) {    args[6]="-";    args[7]="-";  }  StatusTransformer.writeServerInfo(writer,args,mode);  try {    StatusTransformer.writeOSState(writer,mode);    StatusTransformer.writeVMState(writer,mode);    Enumeration<ObjectName> enumeration=threadPools.elements();    while (enumeration.hasMoreElements()) {      ObjectName objectName=enumeration.nextElement();      String name=objectName.getKeyProperty("name");      StatusTransformer.writeConnectorState(writer,objectName,name,mBeanServer,globalRequestProcessors,requestProcessors,mode);    }    if ((request.getPathInfo() != null) && (request.getPathInfo().equals("/all"))) {      StatusTransformer.writeDetailedState(writer,mBeanServer,mode);    }  } catch (  Exception e) {    throw new ServletException(e);  }  StatusTransformer.writeFooter(writer,mode);}  }
class C{  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  public IllegalArgumentException(String message,Throwable cause){  super(message,cause);}  }
class C{  public DOM2Helper(){}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/vminfo");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ActionType createActionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ActionTypeImpl();}  }
class C{  @Override public Object removeFromEnvironment(String propName) throws NamingException {  return getBoundContext().removeFromEnvironment(propName);}  }
class C{  public static String generateIDWithServerID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAML2Constants.ID_LENGTH];  random.nextBytes(bytes);  String id=SAML2ID_PREFIX + byteArrayToHexString(bytes);  return embedServerID(id);}  }
class C{  public static boolean isPeriodActive(final Date startDate,final Date endDate){  if (startDate == null && endDate == null) {    return true;  }  if (startDate == null) {    throw new JKException("START_DATE_CAN_NOT_BE_NULL");  }  if (endDate == null) {    throw new JKException("END_DATE_CAN_NOT_BE_NULL");  }  if (compareTwoDates(startDate,endDate).equals(CompareDates.DATE1_GREATER_THAN_DATE2)) {    throw new JKException("START_DATE_MUST_BE_BEFORE_END_DATE");  }  final boolean startLessThanCurrent=compareTwoDates(startDate,getSystemDate()).equals(CompareDates.DATE1_LESS_THAN_DATE2);  final boolean endGreaterThanCurrent=compareTwoDates(endDate,getSystemDate()).equals(CompareDates.DATE1_GREATER_THAN_DATE2);  return startLessThanCurrent && endGreaterThanCurrent;}  }
class C{  public static Border createEtchedBorder(int type,Color highlight,Color shadow){  return new EtchedBorder(type,highlight,shadow);}  }
class C{  protected OpenDsException(LocalizableMessage message){  this(message,null);}  }
class C{  public ModifyDNOperation processModifyDN(String rawEntryDN,String rawNewRDN,boolean deleteOldRDN,String rawNewSuperior){  return processModifyDN(ByteString.valueOfUtf8(rawEntryDN),ByteString.valueOfUtf8(rawNewRDN),deleteOldRDN,ByteString.valueOfUtf8(rawNewSuperior),null);}  }
class C{  public void computeGraph(){  if (complete == null || !complete) {    throw new IllegalStateException("Policies not fully loaded");  }  rights=findRights();  invalidUsers=new HashSet<>();  for (  Map.Entry<String,Set<String>> userRights : rights.entrySet()) {    Set<String> grantedRights=userRights.getValue();    PolicyScopes policyScopes=policyRights.get(userRights.getKey());    Set<String> resharedRights=policyScopes.activeScopePolicies.keySet();    Set<String> disabledRights=policyScopes.inactiveScopePolicies.keySet();    if (!grantedRights.equals(resharedRights) || !Sets.intersection(disabledRights,grantedRights).isEmpty()) {      invalidUsers.add(userRights.getKey());    }  }}  }
class C{  private void checkState() throws IllegalStateException {  if (trainingNames == null) {    throw new IllegalStateException("The list of training names is null.");  }  if (trainingNames.size() == 0) {    throw new IllegalStateException("The list of training names is empty.");  }}  }
class C{  protected AbstractLayoutCache.NodeDimensions createNodeDimensions(){  return new NodeDimensionsHandler();}  }
class C{  public void addLogInfo(String key,Object value){  logInfoMap.put(key,value);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  ServerSiteModel model=(ServerSiteModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String serverName=(String)getPageSessionAttribute(PG_ATTR_SERVER_NAME);  String name=(String)getDisplayFieldValue(TF_NAME);  name=name.trim();  if (name.length() > 0) {    try {      model.cloneServer(serverName,name);      backTrail();      ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","serverconfig.clone.server.missing.atributes");    forwardTo();  }}  }
class C{  public void test_Constructor(){  try {    new MockDateFormat();  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  protected TextAttribute(String name){  super(name);  if (this.getClass() == TextAttribute.class) {    instanceMap.put(name,this);  }}  }
class C{  static Promise<Long> promiseLong(){  return new BasePromise<>();}  }
class C{  @SuppressWarnings("unused") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  private void verifyTable(String database,String table){  Identifier tableId=new Identifier(database,table);  if (!tablesRepo.exists(tableId)) {    throw new ItemNotFoundException("Table not found: " + tableId.toString());  }}  }
class C{  public MarshalException(Throwable exception){  this(null,null,exception);}  }
class C{  static JAXBContext newInstance(Class[] classes,Map properties,String className) throws JAXBException {  ClassLoader cl=getContextClassLoader();  Class spi;  try {    spi=safeLoadClass(className,cl);  } catch (  ClassNotFoundException e) {    throw new JAXBException(e);  }  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"loaded {0} from {1}",new Object[]{className,which(spi)});  }  return newInstance(classes,properties,spi);}  }
class C{  protected View createZone(int p0,int p1){  Document doc=getDocument();  View zone;  try {    zone=new Zone(getElement(),doc.createPosition(p0),doc.createPosition(p1));  } catch (  BadLocationException ble) {    throw new StateInvariantError(ble.getMessage());  }  return zone;}  }
class C{  public boolean add(BrdViaInfo p_via_info){  if (name_exists(p_via_info.get_name()))   return false;  vinfo_list.add(p_via_info);  return true;}  }
class C{  private void checkPostRequest(final HttpServletRequest request) throws ConnectorException {  if (request.getParameter("CKFinderCommand") == null || !request.getParameter("CKFinderCommand").equals("true")) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST,true);  }}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public boolean match(Object other){  if (other instanceof ContentLength)   return true; else   return false;}  }
class C{  private FakeReplicationDomain createFakeReplicationDomain(int serverId,int groupId,int rsId,long generationId,AssuredMode assuredMode,int safeDataLevel,long assuredTimeout,int scenario,ServerState serverState,boolean startListen) throws Exception {  final DomainFakeCfg config=newDomainConfig(serverId,groupId,rsId,assuredMode,safeDataLevel,assuredTimeout);  return createFakeReplicationDomain(config,rsId,generationId,scenario,serverState,startListen);}  }
class C{  public LDAPConnectionFactory(final String host,final int port){  this(host,port,Options.defaultOptions());}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public boolean connect(){  try {    JMXServiceURL jmxUrl=new JMXServiceURL(String.format(JXM_URL_FORMAT,config.jmxHost(),config.jmxPort()));    Map<String,Object> env=new HashMap<String,Object>();    if (config.jmxSslEnabled()) {      String[] creds=new String[2];      creds[0]=config.jmxSslUsername();      creds[1]=config.jmxSslPassword();      env.put(JMXConnector.CREDENTIALS,creds);    }    env.put(DEFAULT_SOCKET_FACTORY,getRMIClientSocketFactory());    jmxc=JMXConnectorFactory.connect(jmxUrl,env);    mbeanServerConn=jmxc.getMBeanServerConnection();    String queryName=String.format("%s:*",config.metricsPackageName());    mbeans=filterMBeans(mbeanServerConn.queryMBeans(new ObjectName(queryName),null));    return true;  } catch (  IOException e) {    logger.error("Cannot connect to jmx on {}:{}",config.jmxHost(),config.jmxPort(),e);  }catch (  MalformedObjectNameException e) {    logger.error("Failed to query by object name",e);  }catch (  ReflectionException|IntrospectionException|InstanceNotFoundException e) {    logger.error("Failed to get mbean attributes",e);  }  return false;}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof FastDateFormat)) {    return false;  }  final FastDateFormat other=(FastDateFormat)obj;  return printer.equals(other.printer);}  }
class C{  @Override public Map<String,Object> generate(Method method){  Map<String,Object> fieldPatternMap=new LinkedHashMap<String,Object>();  for (  CollectionPattern collectionPattern : CollectionPattern.getCollectionPatternsFromMethod(method)) {    String resourceNameString=collectionPattern.getTemplatizedResourcePath();    fieldPatternMap.put(collectionPattern.getFieldPath(),nameMap.get(resourceNameString));  }  if (fieldPatternMap.size() > 0) {    Map<String,Object> result=new LinkedHashMap<String,Object>();    result.put(CONFIG_KEY_FIELD_NAME_PATTERNS,fieldPatternMap);    return result;  } else {    return null;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fchildNode;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  fchildNode=employeeNode.getFirstChild();  childName=fchildNode.getNodeName();  if (equals("#text",childName)) {    fchildNode=fchildNode.getNextSibling();    childName=fchildNode.getNodeName();  }  assertEquals("nodeName","employeeId",childName);}  }
class C{  final void split(HashMap<K,V> map,Node<K,V>[] tab,int index,int bit){  TreeNode<K,V> b=this;  TreeNode<K,V> loHead=null, loTail=null;  TreeNode<K,V> hiHead=null, hiTail=null;  int lc=0, hc=0;  for (TreeNode<K,V> e=b, next; e != null; e=next) {    next=(TreeNode<K,V>)e.next;    e.next=null;    if ((e.hash & bit) == 0) {      if ((e.prev=loTail) == null)       loHead=e; else       loTail.next=e;      loTail=e;      ++lc;    } else {      if ((e.prev=hiTail) == null)       hiHead=e; else       hiTail.next=e;      hiTail=e;      ++hc;    }  }  if (loHead != null) {    if (lc <= UNTREEIFY_THRESHOLD)     tab[index]=loHead.untreeify(map); else {      tab[index]=loHead;      if (hiHead != null)       loHead.treeify(tab);    }  }  if (hiHead != null) {    if (hc <= UNTREEIFY_THRESHOLD)     tab[index + bit]=hiHead.untreeify(map); else {      tab[index + bit]=hiHead;      if (loHead != null)       hiHead.treeify(tab);    }  }}  }
class C{  public static void encode(ASN1Writer writer,int opType,String[] values) throws IOException {  writer.writeStartSequence();  writer.writeEnumerated(opType);  if (values != null && values.length > 0) {    writer.writeStartSequence();    for (    String value : values) {      writer.writeOctetString(value);    }    writer.writeEndSequence();  }  writer.writeEndSequence();}  }
class C{  private AMIdentity searchIdentityRole(String role){  if (DEBUG.messageEnabled()) {    DEBUG.message("rolename : " + role);  }  if (role == null) {    return null;  }  AMIdentity amIdRole=null;  try {    amIdRole=getRole(role);  } catch (  Exception e) {    DEBUG.error("getRole: Error : ",e);  }  return amIdRole;}  }
class C{  public boolean containsValue(Date val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSDate.class)) {      NSDate dat=(NSDate)o;      if (dat.getDate().equals(val))       return true;    }  }  return false;}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {  Date currentDate=new Date();  for (  X509Certificate c : chain) {    try {      c.checkValidity(currentDate);    } catch (    CertificateExpiredException cee) {      logger.error(ERR_EXPCHECK_TRUSTMGR_SERVER_CERT_EXPIRED,c.getSubjectDN().getName(),c.getNotAfter());      throw cee;    }catch (    CertificateNotYetValidException cnyve) {      logger.error(ERR_EXPCHECK_TRUSTMGR_SERVER_CERT_NOT_YET_VALID,c.getSubjectDN().getName(),c.getNotBefore());      throw cnyve;    }  }  trustManager.checkServerTrusted(chain,authType);}  }
class C{  public void stopScheduler(){  stopRequested=true;  try {    schedulerThread.interrupt();  } catch (  Exception e) {    logger.traceException(e);  }  try {    schedulerThread.join();  } catch (  Exception e) {    logger.traceException(e);  }  pendingTasks.clear();  runningTasks.clear();  completedTasks.clear();  tasks.clear();  for (  TaskThread thread : idleThreads) {    LocalizableMessage message=INFO_TASKBE_INTERRUPTED_BY_SHUTDOWN.get();    thread.interruptTask(TaskState.STOPPED_BY_SHUTDOWN,message,true);  }}  }
class C{  public Set createPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {  Iterator iter=peopleContainerNames.iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    StringBuffer peopleContainerDNSB=new StringBuffer();    peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  public void testEmptyBuffer() throws IOException {  FileInputStream fis=new FileInputStream(emptyFile);  FileChannel fc=fis.getChannel();  MappedByteBuffer mmb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());  assertNotNull("MappedByteBuffer created from empty file should not be null",mmb);  int len=mmb.capacity();  assertEquals("MappedByteBuffer created from empty file should have 0 capacity",0,len);  assertFalse("MappedByteBuffer from empty file shouldn't be backed by an array ",mmb.hasArray());  try {    byte b=mmb.get();    fail("Calling MappedByteBuffer.get() on empty buffer should throw a BufferUnderflowException");  } catch (  BufferUnderflowException e) {  }  try {    mmb=fc.map(FileChannel.MapMode.READ_WRITE,0,fc.size());    fail("Expected NonWritableChannelException to be thrown");  } catch (  NonWritableChannelException e) {  }  try {    mmb=fc.map(FileChannel.MapMode.PRIVATE,0,fc.size());    fail("Expected NonWritableChannelException to be thrown");  } catch (  NonWritableChannelException e) {  }  fc.close();}  }
class C{  public static void fill(double[] a,double val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public static void main(String args[]){  String randomStr=null;  try {    byte[] bytes=new byte[24];    SecureRandom random=SecureRandom.getInstance("SHA1PRNG");    random.nextBytes(bytes);    randomStr=Base64.encode(bytes).trim();  } catch (  Exception e) {    randomStr=null;    e.printStackTrace();  }  if (randomStr != null) {    System.out.println(randomStr);  }}  }
class C{  public AMUser createUser(String uid,Map attrMap,Map serviceNameAndAttrs) throws AMException, SSOException {  String parentOrgDN=getOrganizationDN();  AMOrganizationImpl parentOrg=new AMOrganizationImpl(super.token,parentOrgDN);  Set serviceNames=parentOrg.getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  if (serviceNames == Collections.EMPTY_SET) {    serviceNames=new HashSet();  }  Set assignServiceNames=serviceNameAndAttrs.keySet();  Set registered=null;  registered=dsServices.getRegisteredServiceNames(null,getOrganizationDN());  Iterator it=assignServiceNames.iterator();  while (it.hasNext()) {    String tmpS=(String)it.next();    if (!registered.contains(tmpS)) {      Object[] args={tmpS};      throw new AMException(AMSDKBundle.getString("459",args,super.locale),"459",args);    }  }  it=assignServiceNames.iterator();  while (it.hasNext()) {    String tmp=(String)it.next();    if (!serviceNames.contains(tmp)) {      serviceNames.add(tmp);    }  }  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);    Set userOCs=(Set)attrMap.get("objectclass");    objectClasses=AMCommonUtils.combineOCs(userOCs,objectClasses);  }  String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + uid+ ","+ super.entryDN;  AMUserImpl user=new AMUserImpl(super.token,userDN);  user.setAttributes(attrMap);  it=assignServiceNames.iterator();  while (it.hasNext()) {    String thisService=(String)it.next();    Map sAttrMap=(Map)serviceNameAndAttrs.get(thisService);    try {      ServiceSchemaManager ssm=new ServiceSchemaManager(thisService,token);      ServiceSchema ss=ssm.getSchema(SchemaType.USER);      sAttrMap=ss.validateAndInheritDefaults(sAttrMap,true);      sAttrMap=AMCommonUtils.removeEmptyValues(sAttrMap);      user.setAttributes(sAttrMap);    } catch (    SMSException se) {      debug.error("AMPeopleContainerImpl: data validation failed-> " + thisService,se);      Object args[]={thisService};      throw new AMException(AMSDKBundle.getString("976",args,super.locale),"976",args);    }  }  if (objectClasses != null && !objectClasses.isEmpty()) {    user.setAttribute("objectclass",objectClasses);  }  user.create();  return (user);}  }
class C{  public void testParseLargeFile() throws Exception {  MyReader reader=new MyReader();  String delimiter="\r?\n";  Scanner scanner=new Scanner(reader).useDelimiter(delimiter);  while (scanner.hasNext()) {    scanner.next();  }  scanner.close();  reader.close();}  }
class C{  public static void cacheResult(List<Foo> foos){  getPersistence().cacheResult(foos);}  }
class C{  public void endDTD() throws SAXException {  m_handler.endDTD();}  }
class C{  public void addAttribute(String name){synchronized (names) {    names.add(name);  }}  }
class C{  public void addPrivilege(SSOToken token,String orgName,DelegationPrivilege privilege) throws SSOException, DelegationException {  if (privilege != null) {    try {      if (hasDelegationPermissionsForRealm(token,orgName)) {        token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      }      PolicyManager pm=new PolicyManager(token,POLICY_REPOSITORY_REALM);      Policy p=privilegeToPolicy(pm,privilege,orgName);      if (p != null) {        Set existingPolicies=pm.getPolicyNames();        if (existingPolicies.contains(p.getName())) {          Set<String> subjectNames=p.getSubjectNames();          if ((subjectNames == null) || subjectNames.isEmpty()) {            pm.removePolicy(p.getName());          } else {            pm.replacePolicy(p);          }        } else {          Set<String> subjectNames=p.getSubjectNames();          if ((subjectNames != null) && !subjectNames.isEmpty()) {            pm.addPolicy(p);          }        }      } else {        throw new DelegationException(ResBundleUtils.rbName,"invalid_delegation_privilege",null,null);      }    } catch (    Exception e) {      throw new DelegationException(e);    }  }}  }
class C{  @Override public void write(char[] cbuf,int off,int len) throws IOException {  if (xmlPrologWriter != null) {    detectEncoding(cbuf,off,len);  } else {    writer.write(cbuf,off,len);  }}  }
class C{  private int checkWindows(int windowSize) throws Exception {  return searchNbMonitorEntries("(max-rcv-window=" + windowSize + ")");}  }
class C{  public boolean verifySignature(byte[] data){  if (signature != null) {    try {      if (sha_hash == null) {        sha_hash=sha.digest();      }      signature.update(sha_hash);      return signature.verify(data);    } catch (    SignatureException e) {      return false;    }  }  if (cipher != null) {    final byte[] decrypt;    try {      decrypt=cipher.doFinal(data);    } catch (    IllegalBlockSizeException e) {      return false;    }catch (    BadPaddingException e) {      return false;    }    final byte[] md5_sha;    if (sha != null && sha_hash == null) {      sha_hash=sha.digest();    }    if (md5 != null && md5_hash == null) {      md5_hash=md5.digest();    }    if (md5_hash != null && sha_hash != null) {      md5_sha=new byte[md5_hash.length + sha_hash.length];      System.arraycopy(md5_hash,0,md5_sha,0,md5_hash.length);      System.arraycopy(sha_hash,0,md5_sha,md5_hash.length,sha_hash.length);    } else     if (md5_hash != null) {      md5_sha=md5_hash;    } else {      md5_sha=sha_hash;    }    return Arrays.equals(decrypt,md5_sha);  } else   if (data == null || data.length == 0) {    return true;  } else {    return false;  }}  }
class C{  int registerFontDirectory(String dir,boolean scanSubdirectories){  LOGGER.debug(MessageFormat.format("Registering directory {0}, looking for fonts",dir));  int count=0;  try {    String[] files=FileUtil.listFilesInDirectory(dir,scanSubdirectories);    if (files == null)     return 0;    for (    String file : files) {      try {        String suffix=file.length() < 4 ? null : file.substring(file.length() - 4).toLowerCase();        if (".afm".equals(suffix) || ".pfm".equals(suffix)) {          String pfb=file.substring(0,file.length() - 4) + ".pfb";          if (FileUtil.fileExists(pfb)) {            registerFont(file,null);            ++count;          }        } else         if (".ttf".equals(suffix) || ".otf".equals(suffix) || ".ttc".equals(suffix)) {          registerFont(file,null);          ++count;        }      } catch (      Exception e) {      }    }  } catch (  Exception e) {  }  return count;}  }
class C{  private void processControls(DN parentDN) throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(parentDN,this);  for (  Control c : getRequestControls()) {    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter filter;      try {        filter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw newDirectoryException(entryDN,de.getResultCode(),ERR_ADD_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }      if (!getAccessControlHandler().isAllowed(this,entry,filter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!filter.matchesEntry(entry)) {          throw newDirectoryException(entryDN,ResultCode.ASSERTION_FAILED,ERR_ADD_ASSERTION_FAILED.get(entryDN));        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw newDirectoryException(entryDN,de.getResultCode(),ERR_ADD_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }    } else     if (OID_LDAP_NOOP_OPENLDAP_ASSIGNED.equals(oid)) {      noOp=true;    } else     if (OID_LDAP_READENTRY_POSTREAD.equals(oid)) {      postReadRequest=getRequestControl(LDAPPostReadRequestControl.DECODER);    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (OID_PASSWORD_POLICY_CONTROL.equals(oid)) {    } else     if (c.isCritical() && !backend.supportsControl(oid)) {      throw newDirectoryException(entryDN,ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_ADD_UNSUPPORTED_CRITICAL_CONTROL.get(entryDN,oid));    }  }}  }
class C{  public GenericObject next(){  return (NetObject)super.next();}  }
class C{  public static void processNSDecls(SerializationHandler handler,int src,int type,DTM dtm) throws TransformerException {  try {    if (type == DTM.ELEMENT_NODE) {      for (int namespace=dtm.getFirstNamespaceNode(src,true); DTM.NULL != namespace; namespace=dtm.getNextNamespaceNode(src,namespace,true)) {        String prefix=dtm.getNodeNameX(namespace);        String desturi=handler.getNamespaceURIFromPrefix(prefix);        String srcURI=dtm.getNodeValue(namespace);        if (!srcURI.equalsIgnoreCase(desturi)) {          handler.startPrefixMapping(prefix,srcURI,false);        }      }    } else     if (type == DTM.NAMESPACE_NODE) {      String prefix=dtm.getNodeNameX(src);      String desturi=handler.getNamespaceURIFromPrefix(prefix);      String srcURI=dtm.getNodeValue(src);      if (!srcURI.equalsIgnoreCase(desturi)) {        handler.startPrefixMapping(prefix,srcURI,false);      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public JScrollPane(){  this(null,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public AttributeStatement(Subject subject,List attribute) throws SAMLException {  if (subject == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeStatement: " + "missing subject.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  } else {    this._subject=subject;  }  if (attribute == null || attribute.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeStatement: Attribute is required.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }  if (_attributes == null) {    _attributes=new ArrayList();  }  _attributes=attribute;}  }
class C{  public static String toLowerCase(String value){  return value != null ? value.toLowerCase() : null;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public boolean isExpanded(TreePath path){  if (path == null)   return false;  Object value;  do {    value=expandedState.get(path);    if (value == null || !((Boolean)value).booleanValue())     return false;  } while ((path=path.getParentPath()) != null);  return true;}  }
class C{  public <T extends IElement>Table addCell(BlockElement<T> blockElement){  return addCell(new Cell().add(blockElement));}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String transformAlag,java.util.List ids) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,transformAlag,ids);}  }
class C{  @Override public int read(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (readLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return 0;    }    return NativeCrypto.SSL_read(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,getSoTimeout());  }}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  protected void removeReplicationServerDB() throws Exception {  remove(new ArrayList<ReplicationServer>(ReplicationServer.getAllInstances()));}  }
class C{  public Polyline projection_line(PlaPointInt p_from_point){  if (p_from_point == null)   return null;  PlaPointFloat from_point=p_from_point.to_float();  double min_distance=Double.MAX_VALUE;  PlaLineInt result_line=null;  PlaLineInt nearest_line=null;  for (int index=1; index < plaline_len(-1); ++index) {    PlaLineInt this_line=plaline(index);    PlaPointFloat projection=from_point.projection_approx(this_line);    if (projection.is_NaN())     continue;    double curr_distance=projection.distance(from_point);    if (curr_distance >= min_distance)     continue;    PlaDirection direction_towards_line=this_line.perpendicular_direction(p_from_point);    if (direction_towards_line == null)     continue;    PlaLineInt a_result_line=new PlaLineInt(p_from_point,direction_towards_line);    PlaPoint prev_corner=corner(index - 1);    PlaPoint next_corner=corner(index);    PlaSide prev_corner_side=a_result_line.side_of(prev_corner);    PlaSide next_corner_side=a_result_line.side_of(next_corner);    if (prev_corner_side != PlaSide.COLLINEAR && next_corner_side != PlaSide.COLLINEAR && prev_corner_side == next_corner_side) {      continue;    }    nearest_line=this_line;    min_distance=curr_distance;    result_line=a_result_line;  }  if (nearest_line == null)   return null;  PlaLineInt start_line=new PlaLineInt(p_from_point,nearest_line.direction());  PlaLineIntAlist alist=new PlaLineIntAlist(start_line,result_line,nearest_line);  return new Polyline(alist);}  }
class C{  private InternalConnectionHandler(){  super("Internal Connection Handler Thread");  protocol="internal";  connectionList=new LinkedList<>();  listeners=new LinkedList<>();}  }
class C{  protected boolean up(TextView widget,Spannable buffer){  return false;}  }
class C{  @Override public void addDateHeader(String name,long value){  if (name == null || name.length() == 0) {    return;  }  if (isCommitted()) {    return;  }  if (included) {    return;  }  if (format == null) {    format=new SimpleDateFormat(FastHttpDateFormat.RFC1123_DATE,Locale.US);    format.setTimeZone(TimeZone.getTimeZone("GMT"));  }  addHeader(name,FastHttpDateFormat.formatDate(value,format));}  }
class C{  public static Date parseStringAsDate(String in) throws IndexParseFieldException {  DateAdapter adapter=getTimezonedTimestampAdaptor();  try {    return adapter.parse(in);  } catch (  ParseException e) {    Parser parser=new Parser(TimeZone.getTimeZone("GMT"));    List<DateGroup> dg=parser.parse(in);    if (dg.isEmpty()) {      throw new IndexParseFieldException(in);    }    List<Date> dates=dg.get(0).getDates();    if (dates.isEmpty()) {      throw new IndexParseFieldException(in);    }    return dates.get(0);  }}  }
class C{  public ServletResponseWrapper(ServletResponse response){  if (response == null) {    throw new IllegalArgumentException("Response cannot be null");  }  this.response=response;}  }
class C{  @SuppressWarnings("unused") public static long parseUnsignedInt(byte[] bytes){  return parseUnsignedInt(bytes,0,bytes.length);}  }
class C{  public boolean isPropertyMapSettable(SSOToken caller,Map<String,String> properties){  for (  Map.Entry<String,String> property : properties.entrySet()) {    try {      SessionUtils.checkPermissionToSetProperty(caller,property.getKey(),property.getValue());    } catch (    SessionException e) {      return false;    }  }  return true;}  }
class C{  public InvalidObjectException(String reason){  super(reason);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String memberIdName=getStringOptionValue(ARGUMENT_MEMBER_IDNAME);  String memberType=getStringOptionValue(ARGUMENT_MEMBER_IDTYPE);  IdType memberIdType=convert2IdType(memberType);  String[] params={realm,type,idName,memberIdName,memberType};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set memberOfs=memberIdType.canBeMemberOf();    if (!memberOfs.contains(idType)) {      String[] args={type,memberType};      throw new CLIException(MessageFormat.format(getResourceString("idrepo-cannot-be-member"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_ADD_MEMBER",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    AMIdentity memberAmid=new AMIdentity(adminSSOToken,memberIdName,memberIdType,realm,null);    String[] args={memberIdName,idName};    amid.addMember(memberAmid);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-get-addmember-succeed"),(Object[])args));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_ADD_MEMBER",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("AddMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ADD_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("AddMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ADD_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public static Bitmap decodeBitmapFromBytes(byte[] bytes,int sampleSize){  final BitmapFactory.Options options;  if (sampleSize <= 1) {    options=null;  } else {    options=new BitmapFactory.Options();    options.inSampleSize=sampleSize;  }  return BitmapFactory.decodeByteArray(bytes,0,bytes.length,options);}  }
class C{  public LDAPAssertionRequestControl(boolean isCritical,LDAPFilter rawFilter){  super(OID_LDAP_ASSERTION,isCritical);  this.rawFilter=rawFilter;  filter=null;}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge,String path,String domain){  Cookie cookie=null;  if (cookieEncoding) {    cookie=new Cookie(name,URLEncDec.encode(value));  } else {    cookie=new Cookie(name,value);  }  cookie.setMaxAge(maxAge);  if ((path != null) && (path.length() > 0)) {    cookie.setPath(path);  } else {    cookie.setPath("/");  }  if ((domain != null) && (domain.length() > 0)) {    cookie.setDomain(domain);  }  cookie.setSecure(isCookieSecure());  return cookie;}  }
class C{  final int internalNextInt(int origin,int bound){  int r=mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix32(nextSeed());    }  }  return r;}  }
class C{  PrivilegeImportStep(IPrivilegeManager<T> manager,DiffStatus diffStatus,T privilege){  this.privilegeManager=manager;  this.diffStatus=diffStatus;  this.privilege=privilege;}  }
class C{  public ResourceSetLabel read(String realm,String username,String id) throws ResourceException {  try (Connection connection=getConnection()){    SearchResultEntry entry=connection.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(getLabelDn(realm,username,id)));    Set<String> resourceSets=new HashSet<>();    final Attribute resourceSetAttribute=entry.getAttribute(RESOURCE_SET_ATTR);    if (resourceSetAttribute != null) {      for (      ByteString resourceSetId : resourceSetAttribute) {        resourceSets.add(resourceSetId.toString());      }    }    return getResourceSetLabel(entry,resourceSets);  } catch (  LdapException e) {    final ResultCode resultCode=e.getResult().getResultCode();    if (resultCode.equals(ResultCode.NO_SUCH_OBJECT)) {      throw new NotFoundException();    }    throw new InternalServerErrorException("Could not read",e);  }}  }
class C{  public Result add(AddRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.add(request);}  }
class C{  public TaskThread(TaskScheduler taskScheduler,int threadID){  super("Task Thread " + threadID);  this.taskScheduler=taskScheduler;  this.threadID=threadID;  notifyLock=new Object();  exitRequested=false;  setAssociatedTask(null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String qualifiedName="test:root";  String publicId;  String systemId;  java.util.List publicIds=new java.util.ArrayList();  publicIds.add("1234");  publicIds.add("test");  java.util.List systemIds=new java.util.ArrayList();  systemIds.add("");  systemIds.add("test");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN1005D=0; indexN1005D < publicIds.size(); indexN1005D++) {    publicId=(String)publicIds.get(indexN1005D);    for (int indexN10061=0; indexN10061 < systemIds.size(); indexN10061++) {      systemId=(String)systemIds.get(indexN10061);      newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      assertNotNull("domimplementationcreatedocumenttype01_newDocType",newDocType);      ownerDocument=newDocType.getOwnerDocument();      assertNull("domimplementationcreatedocumenttype01_ownerDocument",ownerDocument);    }  }}  }
class C{  public Object[] toArray(){  Object[] rv=new Object[delegate.size()];  delegate.copyInto(rv);  return rv;}  }
class C{  void add(ThreadLocal<?> key,Object value){  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == null) {      table[index]=key.reference;      table[index + 1]=value;      return;    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiInternalFrameUI();  return MultiLookAndFeel.createUIs(mui,((MultiInternalFrameUI)mui).uis,a);}  }
class C{  private static int hashIntArray(int[] oid){  int intHash=0;  for (int i=0; i < oid.length && i < 4; i++) {    intHash+=oid[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeDesignatorElement createAttributeDesignatorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeDesignatorElementImpl();}  }
class C{  public InvalidFrameIdentifierException(){}  }
class C{  public synchronized void deleteObserver(Observer o){  obs.removeElement(o);}  }
class C{  private void testHistoricalAndFake(Entry entry){  testHistorical(entry);  String uuid=EntryHistorical.getEntryUUID(entry);  Iterable<FakeOperation> fks=EntryHistorical.generateFakeOperations(entry);  if (fks.iterator().hasNext()) {    FakeOperation fk=fks.iterator().next();    assertEquals(fk.getCSN().compareTo(fk.getCSN()),0);    ReplicationMsg generatedMsg=fk.generateMessage();    if (generatedMsg instanceof LDAPUpdateMsg) {      LDAPUpdateMsg msg=(LDAPUpdateMsg)generatedMsg;      assertEquals(msg.getEntryUUID(),uuid);    }  }}  }
class C{  public static Uri openCamera(Activity activity){  if (activity == null) {    throw new RuntimeException("Activity not set!");  }  Intent cameraIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  Uri fileUri;  fileUri=getOutputMediaFileUri();  cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT,fileUri);  activity.startActivityForResult(cameraIntent,getCameraRequestCode());  return fileUri;}  }
class C{  public static void sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException {  sendNormalizedSAXcharacters(ch,start,length,handler,SUPPRESS_BOTH);}  }
class C{  public void rewindInputPosition(int position){  this.ptr=position;}  }
class C{  protected int calculateBreakPosition(int p0,int p1){  int p;  Segment segment=SegmentCache.getSharedSegment();  loadText(segment,p0,p1);  int currentWidth=getWidth();  if (wordWrap) {    p=p0 + Utilities.getBreakLocation(segment,metrics,tabBase,tabBase + currentWidth,this,p0);  } else {    p=p0 + Utilities.getTabbedTextOffset(segment,metrics,tabBase,tabBase + currentWidth,this,p0,false);  }  SegmentCache.releaseSharedSegment(segment);  return p;}  }
class C{  public void throwDOMException(short code,String msg){  String themsg=XSLMessages.createMessage(msg,null);  throw new DOMException(code,themsg);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node imported;  NodeList importedList;  Node employeeElem;  int importedLen;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","employee");  employeeElem=childList.item(0);  imported=doc.importNode(employeeElem,false);  importedList=imported.getChildNodes();  importedLen=(int)importedList.getLength();  assertEquals("documentimportnode13",0,importedLen);}  }
class C{  public Object clone(){  Organization theClone=null;  try {    theClone=(Organization)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (selectedRFCOrgDNs != null) {    theClone.selectedRFCOrgDNs=new HashSet();    theClone.selectedRFCOrgDNs.addAll(selectedRFCOrgDNs);  }  return theClone;}  }
class C{  @Override public void startInternal() throws Exception {  if (!running) {    running=true;    paused=false;    processorCache=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getProcessorCache());    eventCache=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getEventCache());    nioChannels=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getBufferPool());    if (getExecutor() == null) {      createExecutor();    }    initializeConnectionLatch();    pollers=new Poller[getPollerThreadCount()];    for (int i=0; i < pollers.length; i++) {      pollers[i]=new Poller();      Thread pollerThread=new Thread(pollers[i],getName() + "-ClientPoller-" + i);      pollerThread.setPriority(threadPriority);      pollerThread.setDaemon(true);      pollerThread.start();    }    startAcceptorThreads();  }}  }
class C{  public final boolean isUnresolved(){  return holder.isUnresolved();}  }
class C{  public void startWork(){  setThreadStateIfNotShuttingDown(ThreadState.PROCESSING);}  }
class C{  public static void writeUINT32(long number,OutputStream out) throws IOException {  if (number < 0) {    throw new IllegalArgumentException("positive value expected.");  }  byte[] toWrite=new byte[4];  for (int i=0; i <= 24; i+=8) {    toWrite[i / 8]=(byte)((number >> i) & 0xFF);  }  out.write(toWrite);}  }
class C{  public void testAddOneDayOverDstForwardAdds24HoursAt0000(){  Calendar calendar=new GregorianCalendar(AMERICA_SAO_PAULO);  calendar.set(2011,9,15,0,0);  double hoursSinceEpoch=hoursSinceEpoch(calendar);  calendar.add(Calendar.DATE,1);  assertEquals(24.0,hoursSinceEpoch(calendar) - hoursSinceEpoch);  assertCalendarEquals(calendar,2011,9,16,1,0);}  }
class C{  BeginParagraphAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public void removeEntry(SSOToken token,String entryDN,int objectType,boolean recursive,boolean softDelete) throws AMException, SSOException {  super.removeEntry(token,entryDN,objectType,recursive,softDelete);  removeFromCache(entryDN);}  }
class C{  public static String toString(int i){  return IntegralToString.intToString(i);}  }
class C{  public PasswordView(Element elem){  super(elem);}  }
class C{  public PlaPoint corner_last_prev(){  return corner(corner_count() - 2);}  }
class C{  public Host parseHost(String host) throws ParseException {  Lexer lexer=new Lexer("charLexer",host);  return new HostNameParser(lexer).host();}  }
class C{  @Override public boolean isShow(HttpServletRequest request) throws PortalException {  return true;}  }
class C{  public static Map parseAdvicesXML(String advicesXML) throws PolicyException {  if (debug.messageEnabled()) {    debug.message("PolicyUtils.parseAdvicesXML():" + " entering, advicesXML= " + advicesXML);  }  Map advices=null;  if (advicesXML != null) {    Document document=XMLUtils.toDOMDocument(advicesXML,debug);    if (document != null) {      Node advicesNode=XMLUtils.getRootNode(document,ADVICES_TAG_NAME);      if (advicesNode != null) {        advices=XMLUtils.parseAttributeValuePairTags(advicesNode);      } else {        if (debug.messageEnabled()) {          debug.message("PolicyUtils.parseAdvicesXML():" + " advicesNode is null");        }      }    } else {      if (debug.messageEnabled()) {        debug.message("PolicyUtils.parseAdvicesXML():" + " document is null");      }    }  }  if (debug.messageEnabled()) {    debug.message("PolicyUtils.parseAdvicesXML():" + " returning, advices= " + advices);  }  return advices;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  protected static final boolean isWhiteSpaceExceptSpace(char ch){  if (ch >= 0x20)   return false;  return ch == 0x9 || ch == 0xA || ch == 0xD;}  }
class C{  public MLetParser(){}  }
class C{  private void addWorkerFailed(Worker w){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    if (w != null)     workers.remove(w);    decrementWorkerCount();    tryTerminate();  }  finally {    mainLock.unlock();  }}  }
class C{  public static byte[] encodeInteger(final BigInteger bigInt){  if (bigInt == null) {    throw new NullPointerException("encodeInteger called with null parameter");  }  return encodeBase64(toIntegerBytes(bigInt),false);}  }
class C{  public JKEmptyReportException(){  super();}  }
class C{  public static ServerSideSortRequestControl newControl(final boolean isCritical,final SortKey... keys){  return newControl(isCritical,Arrays.asList(keys));}  }
class C{  public PdfName addFont(PdfDocument pdfDocument,PdfFont font){  pdfDocument.getDocumentFonts().add(font);  return addResource(font,fontNamesGen);}  }
class C{  public void test_ConstructorIIIIII(){  Date d1=new Date(70,0,1,1,1,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000 + 1000);  assertTrue("Created incorrect date",d1.equals(d2));}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public void writeModifyResult(final int messageID,final Result result) throws IOException {  logger.trace("ENCODE LDAP MODIFY RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_MODIFY_RESPONSE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"260030");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfArgAssert","260030 North Ave. Dallas, Texas 98551",childData);}  }
class C{  public boolean containsEntryID(ReadableTransaction txn,EntryID entryID){  checkNotNull(txn,"txn must not be null");  checkNotNull(entryID,"entryID must not be null");  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){    return cursor.positionToKey(entryID.toByteString());  } }  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);}  }
class C{  public void cancelAllAnimations(){  removeCallbacks(mWrapCropBoundsRunnable);  removeCallbacks(mZoomImageToPositionRunnable);}  }
class C{  public synchronized void newPixels(byte[] newpix,ColorModel newmodel,int offset,int scansize){  this.pixels=newpix;  this.model=newmodel;  this.pixeloffset=offset;  this.pixelscan=scansize;  newPixels();}  }
class C{  public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_Last(field2,orderByComparator);}  }
class C{  private PolicyEvaluatorFactory(){  evaluatorsCache=new HashMap(10);  if (debug.messageEnabled()) {    debug.message("PolicyEvaluatorFactory():" + "created singleton instance");  }}  }
class C{  public Media createMedia(String media,int port,int numPorts,String transport,Vector staticRtpAvpTypes) throws SdpException {  MediaField mediaImpl=new MediaField();  mediaImpl.setMediaType(media);  mediaImpl.setMediaPort(port);  mediaImpl.setPortCount(numPorts);  mediaImpl.setProtocol(transport);  mediaImpl.setMediaFormats(staticRtpAvpTypes);  return mediaImpl;}  }
class C{  protected HttpURLConnection createGet(String uri) throws IOException {  return createConnection(uri,METHOD_GET);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public void removeAttribute(String attrName) throws SMSException, SSOException {  validateServiceConfigImpl();  SMSEntry e=sc.getSMSEntry();  SMSUtils.removeAttribute(e,attrName);  saveSMSEntry(e);}  }
class C{  public void addUser(User user) throws AccessRightsException, EntryAlreadyExistsException, UMSException {  super.addChild(user);}  }
class C{  private void handleError(final LocalizableMessage msg){  dispose();  final ClientConnection clientConn=bindOp.getClientConnection();  clientConn.setSASLAuthStateInfo(null);  if (cbResultCode != null) {    bindOp.setResultCode(cbResultCode);  } else {    bindOp.setResultCode(ResultCode.INVALID_CREDENTIALS);  }  if (cbMsg != null) {    bindOp.setAuthFailureReason(cbMsg);  } else {    bindOp.setAuthFailureReason(msg);  }}  }
class C{  public FrameBodyTRSO(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public final void testVerifyPublicKeyString() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null,null);}  }
class C{  private static XMPNode addChildNode(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,String value,boolean isTopLevel) throws XMPException {  XMPSchemaRegistry registry=XMPMetaFactory.getSchemaRegistry();  String namespace=xmlNode.getNamespaceURI();  String childName;  if (namespace != null) {    if (NS_DC_DEPRECATED.equals(namespace)) {      namespace=NS_DC;    }    String prefix=registry.getNamespacePrefix(namespace);    if (prefix == null) {      prefix=xmlNode.getPrefix() != null ? xmlNode.getPrefix() : DEFAULT_PREFIX;      prefix=registry.registerNamespace(namespace,prefix);    }    childName=prefix + xmlNode.getLocalName();  } else {    throw new XMPException("XML namespace required for all elements and attributes",BADRDF);  }  PropertyOptions childOptions=new PropertyOptions();  boolean isAlias=false;  if (isTopLevel) {    XMPNode schemaNode=XMPNodeUtils.findSchemaNode(xmp.getRoot(),namespace,DEFAULT_PREFIX,true);    schemaNode.setImplicit(false);    xmpParent=schemaNode;    if (registry.findAlias(childName) != null) {      isAlias=true;      xmp.getRoot().setHasAliases(true);      schemaNode.setHasAliases(true);    }  }  boolean isArrayItem="rdf:li".equals(childName);  boolean isValueNode="rdf:value".equals(childName);  XMPNode newChild=new XMPNode(childName,value,childOptions);  newChild.setAlias(isAlias);  if (!isValueNode) {    xmpParent.addChild(newChild);  } else {    xmpParent.addChild(1,newChild);  }  if (isValueNode) {    if (isTopLevel || !xmpParent.getOptions().isStruct()) {      throw new XMPException("Misplaced rdf:value element",BADRDF);    }    xmpParent.setHasValueChild(true);  }  if (isArrayItem) {    if (!xmpParent.getOptions().isArray()) {      throw new XMPException("Misplaced rdf:li element",BADRDF);    }    newChild.setName(ARRAY_ITEM_NAME);  }  return newChild;}  }
class C{  public void cancel(){  if (acquireValidLock()) {    try {synchronized (this) {        if (parent != null) {          parent.trigger(time);        }      }    }  finally {      releaseLockAndNotify();    }  }}  }
class C{  public EventException(String msg){  super(msg);  _message=msg;}  }
class C{  public void testConstructorStringException1(){  String value="9234853876401";  int radix=45;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public static Foo findByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_First(uuid,orderByComparator);}  }
class C{  public void testConstructorSignBytesZero1(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeTypeImpl();}  }
class C{  public void testPosPosFirstLonger(){  String numA="2837462783428374767845648748973847593874837948575684767";  String numB="293478573489347658763745839457637";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void updateBackgroundPadding(Rect padding){  mBackgroundPadding.set(padding);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!AMSetupServlet.isCurrentConfigurationValid()) {    return;  }  if (WebtopNaming.configMonitoring() == 0) {    ConfigMonitoring cm=new ConfigMonitoring();    cm.configureMonitoring();  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("line iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)line.getX1();    coords[1]=(float)line.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)line.getX2();    coords[1]=(float)line.getY2();    type=SEG_LINETO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return type;}  }
class C{  public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_First(field2,orderByComparator);}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute02.class,args);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static Foo create(long fooId){  return getPersistence().create(fooId);}  }
class C{  public Query include(Contact.Field... fields){  include.clear();  include.addAll(Arrays.asList(fields));  return this;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void decompile(String root,String packege,String className){  start=System.currentTimeMillis();  log="";  source="";  File workingDir=new File(root + "/" + packege);  Map<String,Object> mapOptions=new HashMap<String,Object>();  mapOptions.put(IFernflowerPreferences.REMOVE_SYNTHETIC,"1");  mapOptions.put(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES,"1");  mapOptions.put(IFernflowerPreferences.DECOMPILE_INNER,"1");  mapOptions.put(IFernflowerPreferences.DECOMPILE_ENUM,"1");  mapOptions.put(IFernflowerPreferences.LOG_LEVEL,IFernflowerLogger.Severity.ERROR.name());  mapOptions.put(IFernflowerPreferences.ASCII_STRING_CHARACTERS,"1");  if (ClassUtil.isDebug()) {    mapOptions.put(IFernflowerPreferences.DUMP_ORIGINAL_LINES,"1");    mapOptions.put(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING,"1");  }  File tmpDir=new File(System.getProperty("java.io.tmpdir"),String.valueOf(System.currentTimeMillis()));  if (!tmpDir.exists())   tmpDir.mkdirs();  ConsoleDecompiler decompiler=new ConsoleDecompiler(tmpDir,mapOptions);  File[] files=workingDir.listFiles();  if (files != null) {    for (int j=0; j < files.length; j++) {      decompiler.addSpace(files[j],true);    }  }  decompiler.decompileContext();  File classFile=new File(tmpDir,className.replaceAll("(?i)\\.class",".java"));  source=UnicodeUtil.decode(FileUtil.getContent(classFile));  classFile.delete();  FileUtil.deltree(tmpDir);  Pattern wp=Pattern.compile("/\\*.+?\\*/",Pattern.DOTALL);  Matcher m=wp.matcher(source);  while (m.find()) {    if (m.group().matches("/\\*\\s*\\d*\\s*\\*/"))     continue;    String group=m.group();    group=group.replace("/*","");    group=group.replace("*/","");    group=group.replace("*","");    if (log.length() > 0)     log+="\n";    log+=group;    source=source.replace(m.group(),"");  }  time=System.currentTimeMillis() - start;}  }
class C{  public void testKeyPairGenerator11() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  int[] keys={-10000,-1024,-1,0,10000};  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps=null;  for (int i=0; i < kpg.length; i++) {    for (int j=0; j < keys.length; j++) {      try {        kpg[i].initialize(keys[j]);        kpg[i].initialize(keys[j],random);      } catch (      InvalidParameterException e) {      }    }    try {      kpg[i].initialize(aps);      kpg[i].initialize(aps,random);    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  private void createOrganization(OrganizationConfigManager ocm,JsonValue jVal,String realm,String realmPath) throws Exception {  Map defaultValues=null;  OrganizationConfigManager realmCreatedOcm;  if (realmPath != null && !realmPath.endsWith("/")) {    realmPath=realmPath + "/";  }  try {    JsonValue realmDetails=jVal;    if (jVal != null) {      defaultValues=createServicesMap(jVal);    }    ocm.createSubOrganization(realm,defaultValues);    realmCreatedOcm=new OrganizationConfigManager(getSSOToken(),realmPath + realm);    List newServiceNames=realmDetails.get(SERVICE_NAMES).asList();    if (newServiceNames != null && !newServiceNames.isEmpty()) {      assignServices(realmCreatedOcm,newServiceNames);    }  } catch (  SMSException smse) {    debug.error("RealmResource.createOrganization()",smse);    throw smse;  }catch (  Exception e) {    debug.error("RealmResource.createOrganization()",e);    throw e;  }}  }
class C{  public Rectangle moveLeft(float move){  x-=move;  return this;}  }
class C{  public final void testDEFAULTtrailerField(){  assertEquals(1,PSSParameterSpec.DEFAULT.getTrailerField());}  }
class C{  private void init_draw_graphics(Graphics2D p_graphics,Color p_color,float p_width){  BasicStroke bs=new BasicStroke(Math.max(p_width,0),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);  p_graphics.setStroke(bs);  p_graphics.setColor(p_color);  p_graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public BAD_PARAM(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize(java.math.BigInteger value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl(value);}  }
class C{  public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  if (interpolator == null) {    mInterpolator=new Scroller.ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  public PlaDelTriCorner common_corner(PlaDelTriEdge p_other){  PlaDelTriCorner result=null;  if (p_other.start_corner.equals(start_corner) || p_other.end_corner.equals(start_corner)) {    result=start_corner;  } else   if (p_other.start_corner.equals(this.end_corner) || p_other.end_corner.equals(end_corner)) {    result=end_corner;  }  return result;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public AccessException(String s,Exception ex){  super(s,ex);}  }
class C{  public AttributeInUseException(){  super();}  }
class C{  public boolean isLocalEchoEnabled(){  return localEchoEnabled;}  }
class C{  public static String escapeText(String text){  String result=text.replace("\\E","\\\\E");  return "\\Q" + result + "\\E";}  }
class C{  private Object writeReplace(){  return new Ser(Ser.YEAR_MONTH_TYPE,this);}  }
class C{  private static final <T,E extends MapElement<T>>E exactFind(E[] map,String name){  int pos=find(map,name);  if (pos >= 0) {    E result=map[pos];    if (name.equals(result.name)) {      return result;    }  }  return null;}  }
class C{  public PushNotificationServiceConfigHelper(ServiceConfig serviceConfig,Debug debug){  this.serviceConfig=serviceConfig;  this.debug=debug;}  }
class C{  public boolean hasTimeout(){  return hasTimeout;}  }
class C{  @Override public boolean equals(Object obj){  boolean matched=true;  if (obj == null || !(obj instanceof Rule)) {    return false;  }  Rule other=(Rule)obj;  if (applicationName == null) {    if (other.applicationName != null) {      return false;    }  } else   if (!applicationName.equals(other.applicationName)) {    return false;  }  if (resourceNames == null) {    if (other.resourceNames != null) {      return false;    }  } else {    if (!resourceNames.equals(other.resourceNames)) {      return false;    }  }  if (!actions.equals(other.actions)) {    return false;  }  return matched;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setEditable(false);  }}  }
class C{  public static boolean needSessionContextStatement(){  return requireSessionContextStmt;}  }
class C{  private PropertyChangeListener createVSBPropertyChangeListener(){  return getHandler();}  }
class C{  private Upgrade(){}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new Random());}  }
class C{  public static String longToString(long l){  return convertLong(null,l);}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public void run(){  runWorker(this);}  }
class C{  public static String bytesToHexNoSpace(byte[] b){  if (b == null || b.length == 0) {    return "";  }  int arrayLength=b.length;  StringBuilder buffer=new StringBuilder(arrayLength * 2);  for (int i=0; i < arrayLength; i++) {    buffer.append(byteToHex(b[i]));  }  return buffer.toString();}  }
class C{  public void unRegisterService(SSOToken token,String entryDN,int objectType,String serviceName,int type) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,new Integer(objectType),serviceName,new Integer(type)};    client.send(client.encodeMessage("unRegisterService",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.unRegisterService : entryDN=" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.unRegisterService: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.unRegisterService : entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public static int name2type(String nm){  Integer i=entityTypes.get(nm);  return (i == null) ? CDATA : i.intValue();}  }
class C{  private boolean isReplaceEntryAcceptable(ModifyOperation modifyOperation){  for (  Modification m : modifyOperation.getModifications()) {    if (m.isInternal()) {      continue;    }    if (m.getModificationType() != ModificationType.REPLACE) {      return false;    }    Attribute a=m.getAttribute();    AttributeType at=a.getAttributeDescription().getAttributeType();    if (!at.hasName(ATTR_TASK_STATE)) {      return false;    }    Iterator<ByteString> iterator=a.iterator();    if (!iterator.hasNext()) {      return false;    }    ByteString v=iterator.next();    if (iterator.hasNext()) {      return false;    }    String valueString=toLowerCase(v.toString());    if (!valueString.startsWith("cancel") && !valueString.startsWith("stop")) {      return false;    }  }  return true;}  }
class C{  public boolean checkSizeAfterScaling(){  return this.checkSizeAfterScaling;}  }
class C{  public ImageIcon(Image image){  this.image=image;  Object o=image.getProperty("comment",imageObserver);  if (o instanceof String) {    description=(String)o;  }  loadImage(image);}  }
class C{  public boolean isForgottenUsernameEnabled(){  return forgottenUsernameEnabled;}  }
class C{  protected boolean userAgentCheck(String httpUA,String clientUA){  if ((httpUA == null) || (clientUA == null)) {    return false;  }  if ((httpUA.equalsIgnoreCase(clientUA)) || (httpUA.indexOf(clientUA) > -1)) {    return true;  } else {    return false;  }}  }
class C{  private NSObject parseObject(int obj) throws PropertyListFormatException, UnsupportedEncodingException {  int offset=offsetTable[obj];  byte type=bytes[offset];  int objType=(type & 0xF0) >> 4;  int objInfo=(type & 0x0F);switch (objType) {case 0x0:{switch (objInfo) {case 0x0:{          return null;        }case 0x8:{        return new NSNumber(false);      }case 0x9:{      return new NSNumber(true);    }case 0xC:{    throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");  }case 0xD:{  throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");}case 0xE:{throw new UnsupportedOperationException("The given binary property list contains a UUID object. Parsing of this object type is not yet implemented.");}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}case 0x1:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.INTEGER);}case 0x2:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.REAL);}case 0x3:{if (objInfo != 0x3) {throw new PropertyListFormatException("The given binary property list contains a date object of an unknown type (" + objInfo + ")");}return new NSDate(bytes,offset + 1,offset + 9);}case 0x4:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int dataOffset=lengthAndOffset[1];return new NSData(copyOfRange(bytes,offset + dataOffset,offset + dataOffset + length));}case 0x5:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int strOffset=lengthAndOffset[1];return new NSString(bytes,offset + strOffset,offset + strOffset + length,"ASCII");}case 0x6:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int characters=lengthAndOffset[0];int strOffset=lengthAndOffset[1];int length=characters * 2;return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-16BE");}case 0x7:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int strOffset=lengthAndOffset[1];int characters=lengthAndOffset[0];int length=calculateUtf8StringLength(bytes,offset + strOffset,characters);return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-8");}case 0x8:{int length=objInfo + 1;return new UID(String.valueOf(obj),copyOfRange(bytes,offset + 1,offset + 1 + length));}case 0xA:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int arrayOffset=lengthAndOffset[1];NSArray array=new NSArray(length);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + arrayOffset + i * objectRefSize,offset + arrayOffset + (i + 1) * objectRefSize);array.setValue(i,parseObject(objRef));}return array;}case 0xB:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet(true);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xC:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet();for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xD:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSDictionary dict=new NSDictionary();for (int i=0; i < length; i++) {int keyRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);int valRef=(int)parseUnsignedInt(bytes,offset + contentOffset + (length * objectRefSize)+ i * objectRefSize,offset + contentOffset + (length * objectRefSize)+ (i + 1) * objectRefSize);NSObject key=parseObject(keyRef);NSObject val=parseObject(valRef);assert key != null;dict.put(key.toString(),val);}return dict;}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}  }
class C{  public boolean shouldCheckWhitespace(){  return null != m_whiteSpaceInfoList;}  }
class C{  public final void test_write$BII_1() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.write(myMessage,0,MY_MESSAGE_LEN);      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  void removeListeners(){  try {    serviceSchemaManager.removeListener(schemaListenerId);    serviceConfigManager.removeListener(configListenerId);  } catch (  Exception e) {    debug.error("AMAuthLevelManager: removeListeners",e);  }}  }
class C{  private Proxy nextProxy(){  if (userSpecifiedProxy != null) {    hasNextProxy=false;    return userSpecifiedProxy;  }  if (proxySelectorProxies != null) {    while (proxySelectorProxies.hasNext()) {      Proxy candidate=proxySelectorProxies.next();      if (candidate.type() != Proxy.Type.DIRECT) {        return candidate;      }    }  }  hasNextProxy=false;  return Proxy.NO_PROXY;}  }
class C{  static void playSound(JComponent c,Object actionKey){  LookAndFeel laf=UIManager.getLookAndFeel();  if (laf instanceof BasicLookAndFeel) {    ActionMap map=c.getActionMap();    if (map != null) {      Action audioAction=map.get(actionKey);      if (audioAction != null) {        ((BasicLookAndFeel)laf).playSound(audioAction);      }    }  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("JmxClientConnection(connID=");  buffer.append(connectionID);  buffer.append(", authDN=\"");  buffer.append(getAuthenticationInfo().getAuthenticationDN());  buffer.append("\")");}  }
class C{  private Properties loadTestProperties() throws IOException {  FileInputStream fis=null;  try {    String testEnv=System.getProperty("TEST_ENV") != null ? System.getProperty("TEST_ENV") : "local";    File envFile=new File("config/" + testEnv + "/environment.properties");    Properties properties=new Properties();    fis=new FileInputStream(envFile);    properties.load(fis);    return properties;  }  finally {    try {      if (fis != null) {        fis.close();      }    } catch (    IOException e) {      throw new IOException("could not load the test environment properties");    }  }}  }
class C{  private void testLockDir(File lockDir) throws IOException {  if (!lockDir.exists()) {    throw new IOException("Could not find lockDir: " + lockDir.getAbsolutePath());  }  if (!lockDir.canWrite()) {    throw new IOException("Could not write to lockDir: " + lockDir.getAbsolutePath());  }}  }
class C{  public void expire(boolean notify){  if (!isValid)   return;synchronized (this) {    if (expiring || !isValid)     return;    if (manager == null)     return;    expiring=true;    Context context=manager.getContext();    if (notify) {      ClassLoader oldContextClassLoader=null;      try {        oldContextClassLoader=context.bind(Globals.IS_SECURITY_ENABLED,null);        Object listeners[]=context.getApplicationLifecycleListeners();        if (listeners != null && listeners.length > 0) {          HttpSessionEvent event=new HttpSessionEvent(getSession());          for (int i=0; i < listeners.length; i++) {            int j=(listeners.length - 1) - i;            if (!(listeners[j] instanceof HttpSessionListener))             continue;            HttpSessionListener listener=(HttpSessionListener)listeners[j];            try {              context.fireContainerEvent("beforeSessionDestroyed",listener);              listener.sessionDestroyed(event);              context.fireContainerEvent("afterSessionDestroyed",listener);            } catch (            Throwable t) {              ExceptionUtils.handleThrowable(t);              try {                context.fireContainerEvent("afterSessionDestroyed",listener);              } catch (              Exception e) {              }              manager.getContext().getLogger().error(sm.getString("standardSession.sessionEvent"),t);            }          }        }      }  finally {        context.unbind(Globals.IS_SECURITY_ENABLED,oldContextClassLoader);      }    }    if (ACTIVITY_CHECK) {      accessCount.set(0);    }    manager.remove(this,true);    if (notify) {      fireSessionEvent(Session.SESSION_DESTROYED_EVENT,null);    }    if (principal instanceof TomcatPrincipal) {      TomcatPrincipal gp=(TomcatPrincipal)principal;      try {        gp.logout();      } catch (      Exception e) {        manager.getContext().getLogger().error(sm.getString("standardSession.logoutfail"),e);      }    }    setValid(false);    expiring=false;    String keys[]=keys();    ClassLoader oldContextClassLoader=null;    try {      oldContextClassLoader=context.bind(Globals.IS_SECURITY_ENABLED,null);      for (int i=0; i < keys.length; i++) {        removeAttributeInternal(keys[i],notify);      }    }  finally {      context.unbind(Globals.IS_SECURITY_ENABLED,oldContextClassLoader);    }  }}  }
class C{  public Scoping createScoping() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SCOPING);  if (obj == null) {    return new ScopingImpl();  } else {    return (Scoping)obj;  }}  }
class C{  @Override public void run(){  while (!stop) {    try {      Thread.sleep(1);    } catch (    InterruptedException iex) {      iex.printStackTrace();    }    if (!stop) {      System.out.print("\r" + prompt + " \r"+ prompt);    }    System.out.flush();  }}  }
class C{  public SQLException(String theReason,Throwable theCause){  super(theReason,theCause);}  }
class C{  public boolean isExpandEntityReferences(){  return false;}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Reference)) {    Reference target=(Reference)obj;    if (target.className.equals(this.className) && target.size() == this.size()) {      Enumeration<RefAddr> mycomps=getAll();      Enumeration<RefAddr> comps=target.getAll();      while (mycomps.hasMoreElements())       if (!(mycomps.nextElement().equals(comps.nextElement())))       return false;      return true;    }  }  return false;}  }
class C{  private static boolean isAppropriateDevice(MidiDevice device,Class deviceClass,boolean allowSynthesizer,boolean allowSequencer){  if (deviceClass.isInstance(device)) {    return true;  } else {    if ((!(device instanceof Sequencer) && !(device instanceof Synthesizer)) || ((device instanceof Sequencer) && allowSequencer) || ((device instanceof Synthesizer) && allowSynthesizer)) {      if ((deviceClass == Receiver.class && device.getMaxReceivers() != 0) || (deviceClass == Transmitter.class && device.getMaxTransmitters() != 0)) {        return true;      }    }  }  return false;}  }
class C{  private final ArrayList<AwtreeNodeLeaf> to_array(){  ArrayList<AwtreeNodeLeaf> result=new ArrayList<AwtreeNodeLeaf>(leaf_count);  AwtreeNode curr_node=root_node;  if (curr_node == null)   return result;  for (; ; ) {    while (curr_node instanceof AwtreeNodeFork) {      curr_node=((AwtreeNodeFork)curr_node).first_child;    }    result.add((AwtreeNodeLeaf)curr_node);    AwtreeNodeFork curr_parent=curr_node.parent;    while (curr_parent != null && curr_parent.second_child == curr_node) {      curr_node=curr_parent;      curr_parent=curr_node.parent;    }    if (curr_parent == null)     break;    curr_node=curr_parent.second_child;  }  return result;}  }
class C{  public static void importServiceData(String fileName) throws UpgradeException {  System.out.println(bundle.getString("upg-import-service-data") + ": " + fileName);  String[] args=new String[8];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-t";  args[7]=fileName;  invokeAdminCLI(args);}  }
class C{  int CountRange(int NumofGlyphs,int Type){  int num=0;  char Sid;  int i=1, nLeft;  while (i < NumofGlyphs) {    num++;    Sid=getCard16();    if (Type == 1)     nLeft=getCard8(); else     nLeft=getCard16();    i+=nLeft + 1;  }  return num;}  }
class C{  public static Set parseResponseAttributes(Node pNode) throws PolicyException {  Set nodeSet=XMLUtils.getChildNodes(pNode,ATTRIBUTE);  if (nodeSet == null) {    debug.error("parseResponseAttributes: " + " missing element " + ATTRIBUTE);    String objs[]={ATTRIBUTE};    throw new PolicyException(ResBundleUtils.rbName,"missing_element",objs,null);  }  HashSet attrs=new HashSet();  Node node=null;  Iterator nodes=nodeSet.iterator();  while (nodes.hasNext()) {    node=(Node)nodes.next();    String attrName=XMLUtils.getNodeAttributeValue(node,ATTRIBUTE_NAME);    if (attrName == null) {      debug.error("parseResponseAttributes: " + " missing attribute " + ATTRIBUTE_NAME);      String objs[]={ATTRIBUTE_NAME};      throw new PolicyException(ResBundleUtils.rbName,"missing_attribute",objs,null);    }    attrs.add(attrName);  }  return attrs;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  final Request request=requestEvent.getRequest();  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();  ServerTransaction st=serverTransaction;  try {    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    sipProvider.getNewDialog(st);    final String toTag="" + System.nanoTime();    Response response=messageFactory.createResponse(Response.RINGING,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    st.sendResponse(response);    response=messageFactory.createResponse(Response.OK,request);    final Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    final ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    st.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public UtilProxySAMLAuthenticator(final IDPSSOFederateRequest data,final HttpServletRequest request,final HttpServletResponse response,final PrintWriter out,final boolean isFromECP){  this.data=data;  this.out=out;  this.request=request;  this.response=response;  this.isFromECP=isFromECP;}  }
class C{  private void doRemapping(Map<String,MappedClass> mappings,Map<String,String> strOpts,Map<String,Boolean> boolOpts,Collection<ClassNode> nodes){  MappingModeImpl mode=new ModeSkidfuscate(strOpts.get(Lang.OPTION_OBFU_RENAME_ALPHABET_CLASS),strOpts.get(Lang.OPTION_OBFU_RENAME_ALPHABET_FIELD),strOpts.get(Lang.OPTION_OBFU_RENAME_ALPHABET_METHOD),boolOpts.get(Lang.OPTION_OBFU_RENAME_PRIVATE_ONLY).booleanValue());  new MappingRenamer().remapClasses(mappings,mode);  for (  ClassNode cn : nodes) {    cn.innerClasses.clear();    cn.outerClass=null;    for (    MethodNode mn : cn.methods) {      int i=0;      if (mn.parameters != null) {        for (        ParameterNode pn : mn.parameters) {          pn.name=mode.getName(strOpts.get(Lang.OPTION_OBFU_RENAME_ALPHABET_LOCALS),i++);        }      }      if (mn.localVariables != null) {        for (        LocalVariableNode lvn : mn.localVariables) {          lvn.name=mode.getName(strOpts.get(Lang.OPTION_OBFU_RENAME_ALPHABET_LOCALS),i++);        }      }    }  }}  }
class C{  public static SAXParserProvider saxParserProvider(int maxSize){  return new PerThreadSAXParserProvider(new SafeSAXParserProvider(),maxSize);}  }
class C{  boolean parametersAreViewableAs(MethodType newType,boolean keepInterfaces){  if (form == newType.form && form.erasedType == this)   return true;  if (ptypes == newType.ptypes)   return true;  int argc=parameterCount();  if (argc != newType.parameterCount())   return false;  for (int i=0; i < argc; i++) {    if (!VerifyType.isNullConversion(newType.parameterType(i),parameterType(i),keepInterfaces))     return false;  }  return true;}  }
class C{  public static final Index createTestBankIndexApprovedOnTimepoint(){  Index lastname=new Index("createdon");  lastname.isUnique(false);  ArrayList<IndexField> fields=new ArrayList<>(1);  fields.add(new IndexField("boardapprovaldate",FieldDataType.TIMEPOINT));  lastname.setFields(fields);  lastname.setTable(Fixtures.createTestWorldBankTable());  return lastname;}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  HTML.Tag t=(HTML.Tag)attr.getAttribute(StyleConstants.NameAttribute);  JComponent c=null;  Object model=attr.getAttribute(StyleConstants.ModelAttribute);  removeStaleListenerForModel(model);  if (t == HTML.Tag.INPUT) {    c=createInputComponent(attr,model);  } else   if (t == HTML.Tag.SELECT) {    if (model instanceof OptionListModel) {      JList list=new JList((ListModel)model);      int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,1);      list.setVisibleRowCount(size);      list.setSelectionModel((ListSelectionModel)model);      c=new JScrollPane(list);    } else {      c=new JComboBox((ComboBoxModel)model);      maxIsPreferred=3;    }  } else   if (t == HTML.Tag.TEXTAREA) {    JTextArea area=new JTextArea((Document)model);    int rows=HTML.getIntegerAttributeValue(attr,HTML.Attribute.ROWS,1);    area.setRows(rows);    int cols=HTML.getIntegerAttributeValue(attr,HTML.Attribute.COLS,20);    maxIsPreferred=3;    area.setColumns(cols);    c=new JScrollPane(area,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  }  if (c != null) {    c.setAlignmentY(1.0f);  }  return c;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechild.class,args);}  }
class C{  public Set createSubPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {  Iterator iter=peopleContainerNames.iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    StringBuffer peopleContainerDNSB=new StringBuffer();    peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  public StateInteractive assign_items_to_new_group(){  r_brd.generate_snapshot();  double gravity_x=0;  double gravity_y=0;  int pin_count=0;  Iterator<BrdItem> it=items_list.iterator();  while (it.hasNext()) {    BrdItem curr_ob=it.next();    if (curr_ob instanceof BrdAbitVia) {      PlaPointFloat curr_center=((BrdAbit)curr_ob).center_get().to_float();      gravity_x+=curr_center.v_x;      gravity_y+=curr_center.v_y;      ++pin_count;    } else {      it.remove();    }  }  if (pin_count == 0)   return return_state;  gravity_x/=pin_count;  gravity_y/=pin_count;  PlaPointInt gravity_point=new PlaPointInt(Math.round(gravity_x),Math.round(gravity_y));  LibPackagePin[] pin_arr=new LibPackagePin[items_list.size()];  it=items_list.iterator();  for (int index=0; index < pin_arr.length; ++index) {    BrdAbitVia curr_via=(BrdAbitVia)it.next();    PlaVectorInt rel_coor=curr_via.center_get().difference_by(gravity_point);    String pin_name=Integer.toString(index + 1);    pin_arr[index]=new LibPackagePin(pin_name,curr_via.get_padstack().pads_no,rel_coor,0);  }  LibPackage new_package=r_brd.brd_library.packages.add(pin_arr);  BrdComponent new_component=r_brd.brd_components.add(gravity_point,0,true,new_package);  it=items_list.iterator();  for (int index=0; index < pin_arr.length; ++index) {    BrdAbitVia curr_via=(BrdAbitVia)it.next();    r_brd.remove_item(curr_via);    NetNosList net_no_arr=curr_via.net_nos.copy();    r_brd.insert_pin(new_component.id_no,index,net_no_arr,curr_via.clearance_idx(),curr_via.get_fixed_state());  }  actlog_start_scope(LogfileScope.ASSIGN_SELECTED_TO_NEW_GROUP);  i_brd.repaint();  return return_state;}  }
class C{  private void checkState(){  Utils.checkState(context != 0);}  }
class C{  public int capacity(){  return array.length;}  }
class C{  public KerberosKey(KerberosPrincipal principal,char[] password,String algorithm){  this.principal=principal;  key=new KeyImpl(principal,password,algorithm);}  }
class C{  private void readNameFiles() throws IOException {  File f=getFile(FIRST_NAME_FILE);  List<String> nameList=readLines(f);  firstNames=new String[nameList.size()];  nameList.toArray(firstNames);  f=getFile(LAST_NAME_FILE);  nameList=readLines(f);  lastNames=new String[nameList.size()];  nameList.toArray(lastNames);}  }
class C{  public static String convertFromInteger(int value){  return String.valueOf(value);}  }
class C{  @Override public boolean isMutable(){  return mutable;}  }
class C{  @Override public void addService(Service service){  service.setServer(this);synchronized (servicesLock) {    Service results[]=new Service[services.length + 1];    System.arraycopy(services,0,results,0,services.length);    results[services.length]=service;    services=results;    if (getState().isAvailable()) {      try {        service.start();      } catch (      LifecycleException e) {      }    }    support.firePropertyChange("service",null,service);  }}  }
class C{  public static String[] toTypeNameArray(Class<?>[] c){  if (c == null)   return null;  String[] s=new String[c.length];  for (int i=0; i < c.length; i++) {    s[i]=c[i].getName();  }  return s;}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node createdNode;  Node insertedNode;  Node refChild=null;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      insertedNode=entRef.insertBefore(createdNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean isBorderOpaque(){  return !roundedCorners;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria){  return contains(value,start,length,new String[]{criteria});}  }
class C{  private void connectAsDataServer(){  domain.toNotConnectedStatus();  stopRSHeartBeatMonitoring();  stopChangeTimeHeartBeatPublishing();  mustRunBestServerCheckingAlgorithm=0;synchronized (connectPhaseLock) {    final int serverId=getServerId();    final DN baseDN=getBaseDN();    if (logger.isTraceEnabled()) {      debugInfo("phase 1 : will perform PhaseOneH with each RS in order to elect the preferred one");    }    Map<Integer,ReplicationServerInfo> rsInfos=collectReplicationServersInfo();    computeNewTopology(toRSInfos(rsInfos));    if (rsInfos.isEmpty()) {      setConnectedRS(ConnectedRS.noConnectedRS());    } else {      RSEvaluations evals=computeBestReplicationServer(true,-1,state,rsInfos,serverId,getGroupId(),getGenerationID());      if (logger.isTraceEnabled()) {        debugInfo("phase 2 : will perform PhaseOneH with the preferred RS=" + evals.getBestRS());      }      final ConnectedRS electedRS=performPhaseOneHandshake(evals.getBestRS().getServerURL(),true);      final ReplicationServerInfo electedRsInfo=electedRS.rsInfo;      if (electedRsInfo != null) {        rsInfos.put(electedRsInfo.getServerId(),electedRsInfo);        final ServerStatus initStatus=computeInitialServerStatus(electedRsInfo.getGenerationId(),electedRsInfo.getServerState(),electedRsInfo.getDegradedStatusThreshold(),getGenerationID());        final TopologyMsg topologyMsg=performPhaseTwoHandshake(electedRS,initStatus);        if (topologyMsg != null) {          connectToReplicationServer(electedRS,initStatus,topologyMsg);        }      }    }    final ConnectedRS rs=connectedRS.get();    if (rs.isConnected()) {      connectPhaseLock.notify();      final long rsGenId=rs.rsInfo.getGenerationId();      final int rsServerId=rs.rsInfo.getServerId();      if (rsGenId == getGenerationID() || rsGenId == -1) {        logger.info(NOTE_NOW_FOUND_SAME_GENERATION_CHANGELOG,serverId,rsServerId,baseDN,rs.replicationServer,getGenerationID());      } else {        logger.warn(WARN_NOW_FOUND_BAD_GENERATION_CHANGELOG,serverId,rsServerId,baseDN,rs.replicationServer,getGenerationID(),rsGenId);      }    } else {      if (!connectionError) {        connectionError=true;        connectPhaseLock.notify();        if (!rsInfos.isEmpty()) {          logger.warn(WARN_COULD_NOT_FIND_CHANGELOG,serverId,baseDN,Utils.joinAsString(", ",rsInfos.keySet()));        } else {          logger.warn(WARN_NO_AVAILABLE_CHANGELOGS,serverId,baseDN);        }      }    }  }}  }
class C{  public boolean isNodeChild(TreeNode aNode){  boolean retval;  if (aNode == null) {    retval=false;  } else {    if (getChildCount() == 0) {      retval=false;    } else {      retval=(aNode.getParent() == this);    }  }  return retval;}  }
class C{  public PasswordPolicyResponseControl(PasswordPolicyWarningType warningType,int warningValue,PasswordPolicyErrorType errorType){  this(false,warningType,warningValue,errorType);}  }
class C{  public int size(){  return count;}  }
class C{  public long writeLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : acquireWrite(false,0L));}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  public int versionMajorNumber(){  return Integer.valueOf(properties.getProperty("version.major"));}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)clone();  clone.reset();  return clone;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);}  }
class C{  public XNumber(double d){  super();  m_val=d;}  }
class C{  @Deprecated public void _INVALID_setDamage(int damage){  setDamage(damage);}  }
class C{  public void sendRedirect(String location) throws IOException {  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().sendRedirect(location);  }}  }
class C{  public ShapeTileBox(int p_ll_x,int p_ll_y,int p_ur_x,int p_ur_y){  box_ll=new PlaPointInt(p_ll_x,p_ll_y);  box_ur=new PlaPointInt(p_ur_x,p_ur_y);}  }
class C{  protected void fireMenuCanceled(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuCanceled");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuCanceled(menuEvent);      }    }  }}  }
class C{  @Deprecated public ConditionDecision(boolean satisfied,Map<String,Set<String>> advices){  this(satisfied,advices,Long.MAX_VALUE);}  }
class C{  public boolean cover(DN baseDN,CSN csn){  final ServerState state=list.get(baseDN);  return state != null && state.cover(csn);}  }
class C{  @Override public Object invoke(String actionName,Object[] params,String[] signature) throws MBeanException {  StringBuilder buffer=new StringBuilder();  buffer.append(actionName);  buffer.append("(");  Utils.joinAsString(buffer,", ",(Object[])signature);  buffer.append(")");  LocalizableMessage message=ERR_CONFIG_JMX_NO_METHOD.get(buffer,configEntryDN);  throw new MBeanException(new DirectoryException(ResultCode.NO_SUCH_OPERATION,message));}  }
class C{  public boolean matches(String input){  if (StringUtils.isEmpty(input)) {    return false;  }  boolean matchCase=((regexpOptions & Pattern.CASE_INSENSITIVE) == Pattern.CASE_INSENSITIVE);  if (matchCase && !StringUtils.contains(input,shortcut)) {    return false;  }  if (!matchCase && !StringUtils.containsIgnoreCase(input,shortcut)) {    return false;  }  return regexp.matcher(input).matches();}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegis(Element): " + "invalid MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSNameRegisNot(Element):MinorVersion of" + " the Response is too high.");    throw new FSMsgException("responseVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSNameRegis(Element):MinorVersion of" + " the Response is too low.");    throw new FSMsgException("responseVersionTooLow",null);  }}  }
class C{  public static <T extends Fragment>BuilderImages<T> takeImages(T fragment){  return new BuilderImages<T>(fragment);}  }
class C{  public Object cloneWithSource(Object newSource){  return new TreeSelectionEvent(newSource,paths,areNew,oldLeadSelectionPath,newLeadSelectionPath);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public static int main(String[] args,OutputStream outStream,OutputStream errStream){  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  if (!OperatingSystem.isUnixBased()) {    printWrappedText(err,ERR_CREATERC_ONLY_RUNS_ON_UNIX.get());    return 1;  }  LocalizableMessage description=INFO_CREATERC_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CreateRCScript.class.getName(),description,false);  argParser.setShortToolDescription(REF_SHORT_DESC_CREATE_RC_SCRIPT.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  BooleanArgument showUsage;  StringArgument javaArgs;  StringArgument javaHome;  StringArgument outputFile;  StringArgument userName;  try {    outputFile=StringArgument.builder("outputFile").shortIdentifier('f').description(INFO_CREATERC_OUTFILE_DESCRIPTION.get()).required().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    userName=StringArgument.builder("userName").shortIdentifier('u').description(INFO_CREATERC_USER_DESCRIPTION.get()).valuePlaceholder(INFO_USER_NAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    javaHome=StringArgument.builder("javaHome").shortIdentifier('j').description(INFO_CREATERC_JAVA_HOME_DESCRIPTION.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    javaArgs=StringArgument.builder("javaArgs").shortIdentifier('J').description(INFO_CREATERC_JAVA_ARGS_DESCRIPTION.get()).valuePlaceholder(INFO_ARGS_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return 1;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  DirectoryServer.bootstrapClient();  File serverRoot=DirectoryServer.getEnvironmentConfig().getServerRoot();  if (serverRoot == null) {    printWrappedText(err,ERR_CREATERC_UNABLE_TO_DETERMINE_SERVER_ROOT.get(PROPERTY_SERVER_ROOT,ENV_VAR_INSTALL_ROOT));    return 1;  }  String javaHomeDir;  if (javaHome.isPresent()) {    File f=new File(javaHome.getValue());    if (!f.exists() || !f.isDirectory()) {      printWrappedText(err,ERR_CREATERC_JAVA_HOME_DOESNT_EXIST.get(javaHome.getValue()));      return 1;    }    javaHomeDir=f.getAbsolutePath();  } else {    javaHomeDir=System.getenv(SetupUtils.OPENDJ_JAVA_HOME);  }  boolean isFreeBSD=OperatingSystem.getOperatingSystem() == OperatingSystem.FREEBSD;  String suString="";  String EscQuote1="\"";  String EscQuote2="";  if (userName.isPresent()) {    String suCmd="/bin/su";    File f=new File(suCmd);    if (!f.exists()) {      suCmd="/usr/bin/su";      File f2=new File(suCmd);      if (!f2.exists()) {        suCmd="/bin/su";      }    }    String asMeFlag=isFreeBSD ? " -m " : " ";    suString=suCmd + asMeFlag + userName.getValue()+ " -c ";    EscQuote1="";    EscQuote2="\"";  }  try {    File f=new File(outputFile.getValue());    PrintWriter w=new PrintWriter(f);    w.println("#!/bin/sh");    w.println("#");    for (    String headerLine : CDDL_HEADER_LINES) {      w.println("# " + headerLine);    }    if (isFreeBSD) {      w.println("# PROVIDE: opendj");      w.println("# REQUIRE: LOGIN");      w.println("# KEYWORD: shutdown");      w.println();      w.println(". /etc/rc.subr");      w.println("name=\"opendj\"");      w.println("rcvar=opendj_enable");      w.println();      w.println("start_cmd=\"${name}_start\"");      w.println("stop_cmd=\"${name}_stop\"");      w.println("restart_cmd=\"${name}_restart\"");      w.println("status_cmd=\"${name}_status\"");      w.println();      w.println("load_rc_config ${name}");      w.println(": ${opendj_enable:=no}");      w.println(": ${opendj_msg=\"OpenDJ not started.\"}");    } else {      w.println("# chkconfig: 345 95 5");      w.println("# description: Control the " + SHORT_NAME + " Directory Server");    }    w.println();    w.println("# Set the path to the " + SHORT_NAME + " instance to manage");    w.println("INSTALL_ROOT=\"" + serverRoot.getAbsolutePath() + "\"");    w.println("export INSTALL_ROOT");    w.println();    w.println("cd ${INSTALL_ROOT}");    w.println();    if (javaHomeDir != null) {      w.println("# Specify the path to the Java installation to use");      w.println("OPENDJ_JAVA_HOME=\"" + javaHomeDir + "\"");      w.println("export OPENDJ_JAVA_HOME");      w.println();    }    if (javaArgs.isPresent()) {      w.println("# Specify arguments that should be provided to the JVM");      w.println("OPENDJ_JAVA_ARGS=\"" + javaArgs.getValue() + "\"");      w.println("export OPENDJ_JAVA_ARGS");      w.println();    }    if (isFreeBSD) {      w.println("if [ \"x${opendj_java_home}\" != \"x\" ]; then");      w.println("  OPENDJ_JAVA_HOME=\"${opendj_java_home}\"");      w.println("  export OPENDJ_JAVA_HOME");      w.println("fi");      w.println("if [ \"x${opendj_java_args}\" != \"x\" ]; then");      w.println("  OPENDJ_JAVA_ARGS=\"${opendj_java_args}\"");      w.println("  export OPENDJ_JAVA_ARGS");      w.println("fi");      w.println("if [ \"x${opendj_install_root}\" != \"x\" ]; then");      w.println("  INSTALL_ROOT=\"${opendj_install_root}\"");      w.println("  export INSTALL_ROOT");      w.println("fi");      w.println();      w.println("opendj_chdir=\"${INSTALL_ROOT}\"");      w.println("extra_commands=\"status\"");      w.println();      w.println("opendj_start()");      w.println("{");      w.println("  if [ -n \"$rc_quiet\" ]; then");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/start-ds"+ EscQuote2);      w.println("  else");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/start-ds"+ EscQuote1+ " --quiet"+ EscQuote2);      w.println("  fi");      w.println("}");      w.println("opendj_stop()");      w.println("{");      w.println("  if [ -n \"$rc_quiet\" ]; then");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote2);      w.println("  else");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote1+ " --quiet"+ EscQuote2);      w.println("  fi");      w.println("}");      w.println("opendj_restart()");      w.println("{");      w.println("  if [ -n \"$rc_quiet\" ]; then");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote1+ " --restart"+ EscQuote2);      w.println("  else");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote1+ " --restart --quiet"+ EscQuote2);      w.println("  fi");      w.println("}");      w.println("opendj_status()");      w.println("{");      w.println("    " + suString + "\"${INSTALL_ROOT}/bin/status"+ EscQuote2);      w.println("}");      w.println();      w.println("pidfile=\"${INSTALL_ROOT}/logs/server.pid\"");      w.println();      w.println("run_rc_command \"$1\"");    } else {      w.println("# Determine what action should be performed on the server");      w.println("case \"${1}\" in");      w.println("start)");      w.println("  " + suString + "\"${INSTALL_ROOT}/bin/start-ds"+ EscQuote1+ " --quiet"+ EscQuote2);      w.println("  exit ${?}");      w.println("  ;;");      w.println("stop)");      w.println("  " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote1+ " --quiet"+ EscQuote2);      w.println("  exit ${?}");      w.println("  ;;");      w.println("restart)");      w.println("  " + suString + "\"${INSTALL_ROOT}/bin/stop-ds"+ EscQuote1+ " --restart --quiet"+ EscQuote2);      w.println("  exit ${?}");      w.println("  ;;");      w.println("*)");      w.println("  echo \"Usage:  $0 { start | stop | restart }\"");      w.println("  exit 1");      w.println("  ;;");      w.println("esac");      w.println();    }    w.close();    FilePermission.setPermissions(f,FilePermission.decodeUNIXMode("755"));  } catch (  Exception e) {    printWrappedText(err,ERR_CREATERC_CANNOT_WRITE.get(getExceptionMessage(e)));    return 1;  }  return 0;}  }
class C{  void incrementUnindexedSearchCount(){  if (filterUseEnabled) {    unindexedSearchCount.getAndIncrement();  }}  }
class C{  public static NSObject parse(Document doc) throws PropertyListFormatException, IOException, ParseException {  DocumentType docType=doc.getDoctype();  if (docType == null) {    if (!doc.getDocumentElement().getNodeName().equals("plist")) {      throw new UnsupportedOperationException("The given XML document is not a property list.");    }  } else   if (!docType.getName().equals("plist")) {    throw new UnsupportedOperationException("The given XML document is not a property list.");  }  Node rootNode;  if (doc.getDocumentElement().getNodeName().equals("plist")) {    List<Node> rootNodes=filterElementNodes(doc.getDocumentElement().getChildNodes());    if (rootNodes.isEmpty()) {      throw new PropertyListFormatException("The given XML property list has no root element!");    } else     if (rootNodes.size() == 1) {      rootNode=rootNodes.get(0);    } else {      throw new PropertyListFormatException("The given XML property list has more than one root element!");    }  } else {    rootNode=doc.getDocumentElement();  }  return parseObject(rootNode);}  }
class C{  public Object clone(){  AuthenticatedSharedAgents theClone=null;  try {    theClone=(AuthenticatedSharedAgents)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return theClone;}  }
class C{  private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,"exif:GPSTimeStamp",false);  if (gpsDateTime == null) {    return;  }  try {    XMPDateTime binGPSStamp;    XMPDateTime binOtherDate;    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {      return;    }    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeOriginal",false);    if (otherDate == null) {      otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeDigitized",false);    }    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());    Calendar cal=binGPSStamp.getCalendar();    cal.set(Calendar.YEAR,binOtherDate.getYear());    cal.set(Calendar.MONTH,binOtherDate.getMonth());    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());    binGPSStamp=new XMPDateTimeImpl(cal);    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));  } catch (  XMPException e) {    return;  }}  }
class C{  private void dismissSearchDialog(){  SearchChannelsDialog newFragment=(SearchChannelsDialog)mFragmentManager.findFragmentByTag(TAG_SEARCH);  if (null != newFragment) {    newFragment.dismissAllowingStateLoss();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodetype.class,args);}  }
class C{  public static boolean isTextFile(File f){  return !f.isDirectory() && isMimeText(f.getPath());}  }
class C{  public void registerManagedObjectDefinition(AbstractManagedObjectDefinition<?,?> d){  AbstractManagedObjectDefinition<?,?> parent=d;  while (!parent.getParent().isTop()) {    parent=parent.getParent();  }  String baseName=parent.getName();  String typeName=null;  if (parent == d) {    typeName=DSConfig.GENERIC_TYPE;  } else {    String suffix="-" + baseName;    typeName=d.getName();    if (typeName.endsWith(suffix)) {      typeName=typeName.substring(0,typeName.length() - suffix.length());    }  }  Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(baseName);  if (subTypes == null) {    subTypes=new TreeMap<>();    categoryMap.put(baseName,subTypes);  }  subTypes.put(typeName,d);  for (  Tag tag : d.getAllTags()) {    subTypes=tagMap.get(tag);    if (subTypes == null) {      subTypes=new TreeMap<>();      tagMap.put(tag,subTypes);    }    subTypes.put(typeName,d);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  CharacterData entText;  EntityReference entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  entText=(CharacterData)entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.insertData(1,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public boolean isNativeLookAndFeel(){  return false;}  }
class C{  public boolean isURL(){  return isURL;}  }
class C{  public int read(long position,byte[] buffer,int offset,int length) throws IOException {  checkStream();  final int n=input.read(position,buffer,offset,length);  if (n > 0) {    decrypt(position,buffer,offset,n);  }  return n;}  }
class C{  public void reset(){  ns.removeAllElements();  ks.setLength(0);  cur=tt.root;  run();}  }
class C{  public void registerChangeListener(ServerManagedObjectChangeListener<? super S> listener){  ConfigChangeListener adaptor=new ConfigChangeListenerAdaptor<>(serverContext,path,listener);  configRepository.registerChangeListener(configDN,adaptor);  for (  Constraint constraint : definition.getAllConstraints()) {    for (    ServerConstraintHandler handler : constraint.getServerConstraintHandlers()) {      try {        handler.performPostAdd(this);      } catch (      ConfigException e) {        logger.trace("Unable to perform post add",e);      }    }  }}  }
class C{  private NSObject parseData() throws ParseException {  NSObject obj=null;  skip();  if (accept(DATA_GSOBJECT_BEGIN_TOKEN)) {    skip();    expect(DATA_GSBOOL_BEGIN_TOKEN,DATA_GSDATE_BEGIN_TOKEN,DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN);    if (accept(DATA_GSBOOL_BEGIN_TOKEN)) {      skip();      expect(DATA_GSBOOL_TRUE_TOKEN,DATA_GSBOOL_FALSE_TOKEN);      if (accept(DATA_GSBOOL_TRUE_TOKEN)) {        obj=new NSNumber(true);      } else {        obj=new NSNumber(false);      }      skip();    } else     if (accept(DATA_GSDATE_BEGIN_TOKEN)) {      skip();      String dateString=readInputUntil(DATA_END_TOKEN);      obj=new NSDate(dateString);    } else     if (accept(DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN)) {      skip();      String numberString=readInputUntil(DATA_END_TOKEN);      obj=new NSNumber(numberString);    }    read(DATA_END_TOKEN);  } else {    String dataString=readInputUntil(DATA_END_TOKEN);    dataString=dataString.replaceAll("\\s+","");    int numBytes=dataString.length() / 2;    byte[] bytes=new byte[numBytes];    for (int i=0; i < bytes.length; i++) {      String byteString=dataString.substring(i * 2,i * 2 + 2);      int byteValue=Integer.parseInt(byteString,16);      bytes[i]=(byte)byteValue;    }    obj=new NSData(bytes);    skip();  }  return obj;}  }
class C{  public void calcTargetString(){  int whatToShow=getWhatToShow();switch (whatToShow) {case DTMFilter.SHOW_COMMENT:    m_targetString=PsuedoNames.PSEUDONAME_COMMENT;  break;case DTMFilter.SHOW_TEXT:case DTMFilter.SHOW_CDATA_SECTION:case (DTMFilter.SHOW_TEXT | DTMFilter.SHOW_CDATA_SECTION):m_targetString=PsuedoNames.PSEUDONAME_TEXT;break;case DTMFilter.SHOW_ALL:m_targetString=PsuedoNames.PSEUDONAME_ANY;break;case DTMFilter.SHOW_DOCUMENT:case DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT:m_targetString=PsuedoNames.PSEUDONAME_ROOT;break;case DTMFilter.SHOW_ELEMENT:if (this.WILD == m_name) m_targetString=PsuedoNames.PSEUDONAME_ANY; else m_targetString=m_name;break;default :m_targetString=PsuedoNames.PSEUDONAME_ANY;break;}}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  private int performAddOperation(boolean authenticate) throws Exception {  String filePath=TestCaseUtils.createTempFile("dn: o=rejectTestCase,o=test","objectclass: top","objectclass: organization","o: rejectTestCase","description: Reject Test Case");  return LDAPModify.mainModify(addArgs(authenticate,filePath),false,null,null);}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public int nearest_target_layer(){  if (nearest_target_item == null)   return layer_active_no;  int first_layer=nearest_target_item.first_layer();  int last_layer=nearest_target_item.last_layer();  if (layer_active_no < first_layer) {    return first_layer;  } else   if (layer_active_no > last_layer) {    return last_layer;  } else {    return layer_active_no;  }}  }
class C{  public void testNegNegFirstLonger(){  String numA="-2837462783428374767845648748973847593874837948575684767";  String numB="-293478573489347658763745839457637";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static boolean isIntentSafe(PackageManager packageManager,Intent intent){  return !packageManager.queryIntentActivities(intent,0).isEmpty();}  }
class C{  public NoHttpResponseException(String message){  super(message);}  }
class C{  private static int prevIndex(int i,int len){  return ((i - 1 >= 0) ? i - 1 : len - 1);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public boolean isUnused(){  return (numEntries < 1) && waitingThreads.isEmpty();}  }
class C{  public void testUsingProxy() throws Exception {  MockServer server=new MockServer("server");  MockServer proxy=new MockServer("proxy");  URL url=new URL("http://localhost:" + server.port());  HttpURLConnection connection=(HttpURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",proxy.port())));  connection.setConnectTimeout(2000);  connection.setReadTimeout(2000);  server.start();synchronized (bound) {    if (!server.started)     bound.wait(5000);  }  proxy.start();synchronized (bound) {    if (!proxy.started)     bound.wait(5000);  }  connection.connect();  server.join();  proxy.join();  assertTrue("Connection does not use proxy",connection.usingProxy());  assertTrue("Proxy server was not used",proxy.accepted);  HttpURLConnection huc=(HttpURLConnection)url.openConnection(Proxy.NO_PROXY);  assertFalse(huc.usingProxy());}  }
class C{  public void testWebsocketCodecFragmentationInAllSectionsWithOverflow() throws Exception {  ByteArrayInputStream bais1=new ByteArrayInputStream(raw1);  ByteArrayInputStream bais2=new ByteArrayInputStream(raw2);  ByteArrayInputStream bais3=new ByteArrayInputStream(raw3);  ByteArrayInputStream bais4=new ByteArrayInputStream(raw4);  ByteArrayInputStream bais5=new ByteArrayInputStream(raw2);  ByteArrayInputStream bais6=new ByteArrayInputStream(raw3);  ByteArrayInputStream bais7=new ByteArrayInputStream(raw4);  WebSocketCodec codec=new WebSocketCodec(true,false);  assertNull(codec.decode(bais1));  assertNull(codec.decode(bais2));  assertNull(codec.decode(bais3));  String s=new String(codec.decode(bais4));  System.out.println(s);  assertNotNull(s);  assertTrue(s.startsWith("REGISTER"));  assertNull(codec.decode(bais5));  assertNull(codec.decode(bais6));  s=new String(codec.decode(bais7));  System.out.println(s);  assertNotNull(s);  assertTrue(s.startsWith("REGISTER"));}  }
class C{  public final boolean lessEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) <= 0);}  }
class C{  public TypeCodeHolder(TypeCode initial){  value=initial;}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public QName(String qname){  int colon=qname.indexOf(':');  if (colon >= 0) {    prefix=qname.substring(0,colon);    localName=qname.substring(colon + 1);  } else {    prefix="";    localName=qname;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignaturePropertiesElement createSignaturePropertiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignaturePropertiesElementImpl();}  }
class C{  private SOAPMessage signMessage(SOAPMessage soapMessage,String profile,SecurityAssertion assertion) throws SOAPBindingException {  try {    SOAPHeader soapHeader=soapMessage.getSOAPPart().getEnvelope().getHeader();    if (soapHeader == null) {      soapMessage.getSOAPPart().getEnvelope().addHeader();    }    SOAPBody soapBody=soapMessage.getSOAPPart().getEnvelope().getBody();    if (soapBody == null) {      throw new SOAPBindingException(Utils.bundle.getString("nullSOAPBody"));    }    String bodyId=SAMLUtils.generateID();    soapBody.setAttributeNS(WSSEConstants.NS_WSU_WSF11,WSSEConstants.WSU_ID,bodyId);    List ids=new ArrayList();    ids.add(bodyId);    if (correlationId != null) {      ids.add(correlationId);    }    Certificate cert=null;    Element sigElem=null;    ByteArrayInputStream bin=null;    ByteArrayOutputStream bop=new ByteArrayOutputStream();    Document doc=null;    if (profile == null || profile.equals(Message.NULL_X509) || profile.equals(Message.TLS_X509) || profile.equals(Message.CLIENT_TLS_X509) || profile.equals(Message.NULL_X509_WSF11) || profile.equals(Message.TLS_X509_WSF11) || profile.equals(Message.CLIENT_TLS_X509_WSF11)) {      BinarySecurityToken binaryToken=addBinaryToken(soapMessage);      cert=SecurityUtils.getCertificate(binaryToken);      soapMessage.writeTo(bop);      bin=new ByteArrayInputStream(bop.toByteArray());      doc=XMLUtils.toDOMDocument(bin,Utils.debug);      sigElem=SecurityUtils.getSignatureManager().signWithWSSX509TokenProfile(doc,cert,"",ids,SOAPBindingConstants.WSF_11_VERSION);    } else     if (profile.equals(Message.NULL_SAML) || profile.equals(Message.TLS_SAML) || profile.equals(Message.CLIENT_TLS_SAML)|| profile.equals(Message.NULL_SAML_WSF11)|| profile.equals(Message.TLS_SAML_WSF11)|| profile.equals(Message.CLIENT_TLS_SAML_WSF11)) {      cert=SecurityUtils.getCertificate(assertion);      soapMessage.writeTo(bop);      new ByteArrayInputStream(bop.toByteArray());      bin=new ByteArrayInputStream(bop.toByteArray());      doc=XMLUtils.toDOMDocument(bin,Utils.debug);      sigElem=SecurityUtils.getSignatureManager().signWithWSSSAMLTokenProfile(doc,cert,assertion.getAssertionID(),"",ids,SOAPBindingConstants.WSF_11_VERSION);    }    if (sigElem == null) {      Utils.debug.error("MessageProcessor.signMessage: " + "SigElement is null");      throw new SOAPBindingException(Utils.bundle.getString("cannotSignMessage"));    }    Element securityHeader=getSecurityHeader(soapMessage);    securityHeader.appendChild(securityHeader.getOwnerDocument().importNode(sigElem,true));    return Utils.DocumentToSOAPMessage(sigElem.getOwnerDocument());  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.signMessage: " + "Signing failed.",ex);    throw new SOAPBindingException(Utils.bundle.getString("cannotSignMessage"));  }}  }
class C{  public ClientParamsStack(HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  applicationParams=aparams;  clientParams=cparams;  requestParams=rparams;  overrideParams=oparams;}  }
class C{  @Override public int hashCode(){  int code=0;  if (eSubject != null) {    code+=eSubject.hashCode();  }  if (pSubjectName != null) {    code+=pSubjectName.hashCode();  }  return code;}  }
class C{  public void printIndent(PrintWriter aWriter,int indent){  for (int i=0; i < indent; i++) {    aWriter.print(' ');  }  pos=indent;}  }
class C{  void resetValue(Object value) throws BadLocationException, ParseException {  Document doc=getFormattedTextField().getDocument();  String string=valueToString(value);  try {    ignoreDocumentMutate=true;    doc.remove(0,doc.getLength());    doc.insertString(0,string,null);  }  finally {    ignoreDocumentMutate=false;  }  updateValue(value);}  }
class C{  private FSLogoutStatus doHttpRedirect(String entityId){  try {    FSUtils.debug.message("In HTTP Redirect profile");    isHttpRedirect=true;    FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);    if (ssoToken == null) {      try {        ssoToken=SessionManager.getProvider().getSession(request);      } catch (      SessionException ex) {        FSUtils.debug.error("FSSLOHandler.doHttpRedirect: null ssoToken:",ex);      }    }    FSSession session=sMgr.getSession(ssoToken);    FSAccountFedInfo acctObj=null;    if (session != null) {      acctObj=session.getAccountFedInfo();    }    if (acctObj == null && session != null && !session.getOneTime()) {      acctObj=FSLogoutUtil.getCurrentWorkingAccount(userID,entityId,metaAlias);    }    if (acctObj == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSingleLogoutHandler.doHttp" + "Redirect: Account might have been terminated.");      }      return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);    }    FSLogoutNotification reqLogout=createSingleLogoutRequest(acctObj,sessionIndex);    if (this.relayState != null) {      reqLogout.setRelayState(this.relayState);    }    if (reqLogout == null) {      FSUtils.debug.message("Logout Request is null");      return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);    }    reqLogout.setMinorVersion(getMinorVersion(remoteDescriptor));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSingleLogoutHandler::doHttpRedirect " + remoteDescriptor.getSingleLogoutServiceURL() + "\nLogout request: "+ reqLogout.toXMLString());    }    String urlEncodedRequest=reqLogout.toURLEncodedQueryString();    if (FSServiceUtils.isSigningOn()) {      String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Retrieving self certalias  : " + certAlias);      }      if (certAlias == null || certAlias.length() == 0) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSingleLogoutHandler::" + " doHttpRedirect: couldn't obtain " + "this site's cert alias.");        }        return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);      }      urlEncodedRequest=FSSignatureUtil.signAndReturnQueryString(urlEncodedRequest,certAlias);    }    StringBuffer redirectURL=new StringBuffer();    String retURL=remoteDescriptor.getSingleLogoutServiceURL();    FSUtils.debug.message("Encoded Redirect URL " + urlEncodedRequest);    redirectURL.append(retURL);    if (retURL.indexOf(QUESTION_MARK) == -1) {      redirectURL.append(QUESTION_MARK);    } else {      redirectURL.append(AMPERSAND);    }    redirectURL.append(urlEncodedRequest);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSingleLogoutHandler::doHttpRedirect" + " URL is " + redirectURL.toString());    }    response.sendRedirect(redirectURL.toString());    return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);  } catch (  FSMsgException e) {    FSUtils.debug.error("FSSingleLogoutHandler::" + " doHttpRedirect FSMsgException:",e);  }catch (  IOException e) {    FSUtils.debug.error("FSSingleLogoutHandler::" + "doHttpRedirect IOException:",e);  }  return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);}  }
class C{  private void remove_incomplete_expansion_room(ExpandRoomFreespaceIncomplete p_room){  if (p_room == null)   return;  remove_all_doors(p_room);  incomplete_expansion_rooms.remove(p_room);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  java.io.OutputStream tempOutputStream=outputStream;  outputStream=null;  out.defaultWriteObject();  outputStream=tempOutputStream;}  }
class C{  public void runTest() throws Throwable {  String publicId="http://www.localhost.com/";  String systemId="myDoc.dtd";  String qualifiedName;  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("edi:{");  illegalQNames.add("edi:}");  illegalQNames.add("edi:~");  illegalQNames.add("edi:'");  illegalQNames.add("edi:!");  illegalQNames.add("edi:@");  illegalQNames.add("edi:#");  illegalQNames.add("edi:$");  illegalQNames.add("edi:%");  illegalQNames.add("edi:^");  illegalQNames.add("edi:&");  illegalQNames.add("edi:*");  illegalQNames.add("edi:(");  illegalQNames.add("edi:)");  illegalQNames.add("edi:+");  illegalQNames.add("edi:=");  illegalQNames.add("edi:[");  illegalQNames.add("edi:]");  illegalQNames.add("edi:\\");  illegalQNames.add("edi:/");  illegalQNames.add("edi:;");  illegalQNames.add("edi:`");  illegalQNames.add("edi:<");  illegalQNames.add("edi:>");  illegalQNames.add("edi:,");  illegalQNames.add("edi:a ");  illegalQNames.add("edi:\"");  doc=(Document)load("staffNS",false);  for (int indexN1009A=0; indexN1009A < illegalQNames.size(); indexN1009A++) {    qualifiedName=(String)illegalQNames.get(indexN1009A);    domImpl=doc.getImplementation();{      boolean success=false;      try {        docType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public JScrollBar(int orientation,int value,int extent,int min,int max){  checkOrientation(orientation);  this.unitIncrement=1;  this.blockIncrement=(extent == 0) ? 1 : extent;  this.orientation=orientation;  this.model=new DefaultBoundedRangeModel(value,extent,min,max);  this.model.addChangeListener(fwdAdjustmentEvents);  setRequestFocusEnabled(false);  updateUI();}  }
class C{  public BinaryRelQueryExp(int op,ValueExp v1,ValueExp v2){  relOp=op;  exp1=v1;  exp2=v2;}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public void testTryingCompletedTerminatedScenario(){  try {    Request register=createTiRegisterRequest();    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(register);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (registerReceivedEvent == null || registerReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The REGISTER request was not received by the RI!");    assertEquals(TransactionState.TRYING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The REGISTER request was not retransmitted!",registerReceivedEvent);    assertNotNull("The REGISTER request was not retransmitted!",registerReceivedEvent.getRequest());    assertEquals(Request.REGISTER,registerReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.TRYING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,registerReceivedEvent.getRequest());      addStatus(registerReceivedEvent.getRequest(),ok);      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a OK response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 200-699 response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 200-699 response to the TU!",responseEvent.getResponse());    assertSame("The OK response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertSame("A response different from OK was passed to the TU",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the COMPLETED state after " + "receiving 200-699 final response",tran.getState(),TransactionState.COMPLETED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI sent an ACK request in a non INVITE transaction",ackReceivedEvent);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNull("The Tested Implementation passed a retransmitted 200-699 response " + "to the TU.",responseEvent);    assertTrue("The ClientTransaction did not stay long enough in the COMPLETED " + "state.",tran.getState().equals(TransactionState.COMPLETED) || tran.getState().equals(TransactionState.TERMINATED));    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI replied with an ACK to a nonINVITE request",ackReceivedEvent);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public DN toDN(){  return path.toDN();}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 0)   reportWrongNumberArgs();}  }
class C{  public void assignAssignableDynamicGroup(AMAssignableDynamicGroup assignableDynamicGroup) throws AMException, SSOException {  assignAssignableDynamicGroup(assignableDynamicGroup.getDN());}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public final void testGetEncoded() throws CertificateEncodingException {  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncoded();}  }
class C{  @Override public Foo fetchByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  int count=countByUuid_C(uuid,companyId);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid_C(uuid,companyId,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  @Override public Foo fetchFooByUuidAndGroupId(String uuid,long groupId){  return fooPersistence.fetchByUUID_G(uuid,groupId);}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public boolean exists(){  return !takeSnapshot().isMissing();}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  public void start(){  flushThread.start();  startListenService();}  }
class C{  @Override public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {synchronized (getClassLoadingLock(name)) {    if (log.isDebugEnabled())     log.debug("loadClass(" + name + ", "+ resolve+ ")");    Class<?> clazz=null;    checkStateForClassLoading(name);    clazz=findLoadedClass0(name);    if (clazz != null) {      if (log.isDebugEnabled())       log.debug("  Returning class from cache");      if (resolve)       resolveClass(clazz);      return (clazz);    }    clazz=findLoadedClass(name);    if (clazz != null) {      if (log.isDebugEnabled())       log.debug("  Returning class from cache");      if (resolve)       resolveClass(clazz);      return (clazz);    }    String resourceName=binaryNameToPath(name,false);    ClassLoader javaseLoader=getJavaseClassLoader();    boolean tryLoadingFromJavaseLoader;    try {      tryLoadingFromJavaseLoader=(javaseLoader.getResource(resourceName) != null);    } catch (    ClassCircularityError cce) {      tryLoadingFromJavaseLoader=true;    }    if (tryLoadingFromJavaseLoader) {      try {        clazz=javaseLoader.loadClass(name);        if (clazz != null) {          if (resolve)           resolveClass(clazz);          return (clazz);        }      } catch (      ClassNotFoundException e) {      }    }    if (securityManager != null) {      int i=name.lastIndexOf('.');      if (i >= 0) {        try {          securityManager.checkPackageAccess(name.substring(0,i));        } catch (        SecurityException se) {          String error="Security Violation, attempt to use " + "Restricted Class: " + name;          log.info(error,se);          throw new ClassNotFoundException(error,se);        }      }    }    boolean delegateLoad=delegate || filter(name,true);    if (delegateLoad) {      if (log.isDebugEnabled())       log.debug("  Delegating to parent classloader1 " + parent);      try {        clazz=Class.forName(name,false,parent);        if (clazz != null) {          if (log.isDebugEnabled())           log.debug("  Loading class from parent");          if (resolve)           resolveClass(clazz);          return (clazz);        }      } catch (      ClassNotFoundException e) {      }    }    if (log.isDebugEnabled())     log.debug("  Searching local repositories");    try {      clazz=findClass(name);      if (clazz != null) {        if (log.isDebugEnabled())         log.debug("  Loading class from local repository");        if (resolve)         resolveClass(clazz);        return (clazz);      }    } catch (    ClassNotFoundException e) {    }    if (!delegateLoad) {      if (log.isDebugEnabled())       log.debug("  Delegating to parent classloader at end: " + parent);      try {        clazz=Class.forName(name,false,parent);        if (clazz != null) {          if (log.isDebugEnabled())           log.debug("  Loading class from parent");          if (resolve)           resolveClass(clazz);          return (clazz);        }      } catch (      ClassNotFoundException e) {      }    }  }  throw new ClassNotFoundException(name);}  }
class C{  public void hide_ratsnest(){  if (ratsnest != null) {    ratsnest.hide();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.UriNamedClaimTypesOfferedElement createUriNamedClaimTypesOfferedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.UriNamedClaimTypesOfferedElementImpl();}  }
class C{  protected Tag(String id){  this(id,false,false);}  }
class C{  public BasicLDAPListener(final InetSocketAddress address,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options) throws IOException {  this.connectionFactory=factory;  this.socketAddress=address;}  }
class C{  public int doIDPSingleLogout(Set userSession,String userID,HttpServletRequest request,HttpServletResponse response,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus) throws Exception {  SingleLogoutManager.getInstance().debug.message("SAML2SingleLogoutHandler.doIDPSingleLogout : start");  if (!isSessionUsedInSAML2(userSession,userID)) {    debug.message("SAML2SingleLogoutHander.doIDPSLO : no action");    return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;  }  if (isSOAPInitiated) {    SAML2MetaManager saml2Manager=new SAML2MetaManager();    String idpMetaAlias=findIDPMetaAlias(idpEntityID,spEntityID,realm,protocol,saml2Manager);    if (idpMetaAlias == null) {      return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;    }    if (debug.messageEnabled()) {      debug.message("SAML2SingleLogoutHandler: " + "userID=" + userID + ", session="+ userSession+ ", isSOAInited="+ isSOAPInitiated+ ", isIDPInited="+ isIDPInitiated+ ", protocol="+ protocol+ ", relam="+ realm+ ", idpEntityID="+ idpEntityID+ ", spEntityID="+ spEntityID+ ", status="+ currentStatus+ "\nlogout Request XML="+ singleLogoutRequestXML+ "\nlogout response XML="+ singleLogoutResponseXML);    }    String idpEntityId=saml2Manager.getEntityByMetaAlias(idpMetaAlias);    return handleSOAPInitiatedSingleLogout(userSession,userID,request,response,realm,idpMetaAlias,idpEntityId,relayState,saml2Manager);  } else {    debug.message("SAML2SingleLogoutHandler.doIDPSLO : HTTP initiated SLO");    String redirectURL=MultiProtocolUtils.geServerBaseURL(request) + "/IDPSloInit?" + SAML2Constants.BINDING+ "="+ SAML2Constants.HTTP_REDIRECT+ "&"+ SAML2Constants.RELAY_STATE+ "="+ URLEncoder.encode(relayState,"UTF-8");    if (debug.messageEnabled()) {      debug.message("SAML2SingleLogoutHandler.doIDPSLO: HTTP init, redirect to " + redirectURL);    }    response.sendRedirect(redirectURL);    return SingleLogoutManager.LOGOUT_REDIRECTED_STATUS;  }}  }
class C{  public SOAPException(){  super();  this.cause=null;}  }
class C{  public void createEmptyDB(SQLiteDatabase db){  db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);  db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);  onCreate(db);}  }
class C{  public static int mainBackUpDB(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  BackUpDB tool=new BackUpDB();  return tool.process(args,initializeServer,outStream,errStream);}  }
class C{  public boolean beginErrorBlockDisplay(ChildDisplayEvent event){  if (model.isError()) {    setDisplayFieldValue(ERROR_TITLE,model.getErrorTitle());    setDisplayFieldValue(ERROR_MSG,model.getErrorMessage());    return true;  }  return false;}  }
class C{  public String toString(){  return str;}  }
class C{  public JoinHeader createJoinHeader(String callId,String toTag,String fromTag) throws ParseException {  Join join=new Join();  join.setCallId(callId);  join.setFromTag(fromTag);  join.setToTag(toTag);  return join;}  }
class C{  private static void logWarnAboutPatchesFolder(){  try {    final File backup=new File(UpgradeUtils.getInstancePath(),"classes.disabled");    if (backup.exists()) {      final File[] files=backup.listFiles();      if (files != null && files.length > 0) {        logger.warn(INFO_UPGRADE_CLASSES_FOLDER_RENAMED,backup.getAbsoluteFile());      }    }  } catch (  SecurityException e) {    logger.debug(LocalizableMessage.raw(e.getMessage()),e);  }}  }
class C{  @BeforeClass public static void init(){  nonGitDirectory=Files.createTempDir();  if (Misc.isDebugMode()) {    System.out.println("directory created under: " + nonGitDirectory);  }}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.endPrefixMapping(decl.getPrefix());        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public TIFFDirectory(RandomAccessFileOrArray stream,int directory) throws java.io.IOException {  long global_save_offset=stream.getPosition();  long ifd_offset;  stream.seek(0L);  int endian=stream.readUnsignedShort();  if (!isValidEndianTag(endian)) {    throw new IOException(IOException.BadEndiannessTag0x4949Or0x4d4d);  }  isBigEndian=endian == 0x4d4d;  int magic=readUnsignedShort(stream);  if (magic != 42) {    throw new IOException(IOException.BadMagicNumberShouldBe42);  }  ifd_offset=readUnsignedInt(stream);  for (int i=0; i < directory; i++) {    if (ifd_offset == 0L) {      throw new IOException(IOException.DirectoryNumberIsTooLarge);    }    stream.seek(ifd_offset);    int entries=readUnsignedShort(stream);    stream.skip(12 * entries);    ifd_offset=readUnsignedInt(stream);  }  stream.seek(ifd_offset);  initialize(stream);  stream.seek(global_save_offset);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String nodeName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("title");  nodeName=domesticAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",nodeName);}  }
class C{  public boolean errorEnabled(){  return this.debugLevel.compareLevel(DebugLevel.ERROR) >= 0;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if ((sessionValue != null) && (sessionValue.length() != 0)) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.SESSION_INDEX);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG);    xmlString.append(sessionValue);    xmlString.append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.SESSION_INDEX).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  public static XMPMeta parseFromString(String packet,ParseOptions options) throws XMPException {  return XMPMetaParser.parse(packet,options);}  }
class C{  public PdfDeveloperExtension(PdfName prefix,PdfName baseVersion,int extensionLevel){  this.prefix=prefix;  this.baseVersion=baseVersion;  this.extensionLevel=extensionLevel;}  }
class C{  @SuppressWarnings("unused") public float percentageToAngle(float percentage){  return (this.mAngleSweep * (percentage / 100)) + this.mAngleStart;}  }
class C{  private DateEditor(JSpinner spinner,DateFormat format){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerDateModel)) {    throw new IllegalArgumentException("model not a SpinnerDateModel");  }  SpinnerDateModel model=(SpinnerDateModel)spinner.getModel();  DateFormatter formatter=new DateEditorFormatter(model,format);  DefaultFormatterFactory factory=new DefaultFormatterFactory(formatter);  JFormattedTextField ftf=getTextField();  ftf.setEditable(true);  ftf.setFormatterFactory(factory);  try {    String maxString=formatter.valueToString(model.getStart());    String minString=formatter.valueToString(model.getEnd());    ftf.setColumns(Math.max(maxString.length(),minString.length()));  } catch (  ParseException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String documentFragmentName;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  documentFragmentName=docFragment.getNodeName();  assertEquals("nodeDocumentFragmentNodeNameAssert1","#document-fragment",documentFragmentName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument07.class,args);}  }
class C{  public void deletePolicies(String realmName,Set names) throws AMConsoleException {  PolicyManager policyManager=getPolicyManager(realmName);  List unableToDelete=new ArrayList(names.size());  String[] params=new String[2];  params[0]=realmName;  String[] paramsEx=new String[3];  paramsEx[0]=realmName;  for (Iterator iter=names.iterator(); iter.hasNext(); ) {    String name=(String)iter.next();    params[1]=name;    try {      logEvent("ATTEMPT_DELETE_POLICY",params);      policyManager.removePolicy(name);      logEvent("SUCCEED_DELETE_POLICY",params);    } catch (    PolicyException e) {      paramsEx[1]=name;      paramsEx[2]=getErrorString(e);      logEvent("POLICY_EXCEPTION_DELETE_POLICY",params);      debug.warning("PolicyModelImpl.deletePolicies",e);      unableToDelete.add(name);    }catch (    SSOException e) {      paramsEx[1]=name;      paramsEx[2]=getErrorString(e);      logEvent("SSO_EXCEPTION_DELETE_POLICY",params);      debug.warning("PolicyModelImpl.deletePolicies",e);      unableToDelete.add(name);    }  }  if (!unableToDelete.isEmpty()) {    Object[] p=(Object[])unableToDelete.toArray();    String msg=MessageFormat.format("policy.message.unableToDeletePolicies",p);    throw new AMConsoleException(msg);  }}  }
class C{  @Parameters({"logtest-realm"}) @BeforeSuite(groups={"api-adminwrite","api-adminread"}) public void suiteSetup(String realm) throws Exception {  Object[] params={realm};  entering("suiteSetup",params);  try {    lmgr=LogManagerUtil.getLogManager();  } catch (  Exception e) {    log(Level.SEVERE,"suiteSetup",e.getMessage(),params);    e.printStackTrace();    throw e;  }  theRealm=realm;  exiting("suiteSetup");}  }
class C{  public void windowStateChanged(WindowEvent e){}  }
class C{  private ReconciliationContext newReconContext(ReconAction reconAction,ObjectMapping mapping,JsonValue reconParams,JsonValue config) throws ResourceException {  if (mappings == null) {    throw new BadRequestException("Unknown mapping type, no mappings configured");  }  Context context=ObjectSetContext.get();  return new ReconciliationContext(reconAction,mapping,context,reconParams,config,this);}  }
class C{  protected void assembleSystemMenu(){}  }
class C{  public ClosedFileSystemException(){}  }
class C{  protected static void returnToSource(HttpServletResponse response,ProviderDescriptorType remoteDescriptor,String bLogoutStatus,String commonErrorPage,int minorVersion,BaseConfigType hostedConfig,String hostedEntityId,String userID){  try {    String retURL=null;    if (remoteDescriptor != null) {      retURL=remoteDescriptor.getSingleLogoutServiceReturnURL();      if (retURL == null || retURL.length() < 1) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("returnToSource returns sendError" + "as source provider is unknown");        }        FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.LOGOUT_FAILED,IFSConstants.METADATA_ERROR);        return;      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("returnToSource returns URL : " + retURL);        }        String responseURL=buildSignedResponse(retURL,bLogoutStatus,minorVersion,hostedConfig,hostedEntityId,userID);        response.sendRedirect(responseURL);        return;      }    }    FSUtils.debug.message("Meta Manager instance is null");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("unableToReturnToSource"));    return;  } catch (  IOException exx) {    FSUtils.debug.error("Redirect/sendError failed. Control halted",exx);  }}  }
class C{  public Set<N> neighbors(N node) throws NullPointerException {  return Collections.unmodifiableSet(theNeighbors.get(node));}  }
class C{  public void disable_item(int p_no){  for (int i=0; i < item_arr.length; ++i) {    if (i == p_no) {      item_arr[i].setEnabled(false);    } else {      item_arr[i].setEnabled(true);    }  }}  }
class C{  @Override protected void configureList(){  list.setFont(comboBox.getFont());  list.setCellRenderer(comboBox.getRenderer());  list.setFocusable(false);  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  int selectedIndex=comboBox.getSelectedIndex();  if (selectedIndex == -1) {    list.clearSelection();  } else {    list.setSelectedIndex(selectedIndex);    list.ensureIndexIsVisible(selectedIndex);  }  installListListeners();}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding == null) {    encoding=DEFAULT_ENCODING;  } else   if (!DEFAULT_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    byte[] bytes=msg.getBytes(encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          int b=determineConsecutiveBinaryCount(msg,p,encoding);          if (b == 0) {            b=1;          }          byte[] bytes=msg.substring(p,p + b).getBytes(encoding);          if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,0,bytes.length,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public static int mainSearch(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  return mainSearch(args,initializeServer,true,outStream,errStream);}  }
class C{  private static void addPointToList(PointF point,List<PointF> nodes,List<PointF> nodesContact){  if (point != null) {    PointF pV=null;    int po1=0, po2=0;    float min1=INF;    for (int i=0; i < nodesContact.size() - 1; i++) {      PointF p1=nodes.get((int)nodesContact.get(i).x);      PointF p2=nodes.get((int)nodesContact.get(i).y);      if (!MapMath.isObtuseAnglePointAndLine(point,p1,p2)) {        float minDis=MapMath.getDistanceFromPointToLine(point,p1,p2);        if (min1 > minDis) {          pV=MapMath.getIntersectionCoordinatesFromPointToLine(point,p1,p2);          min1=minDis;          po1=(int)nodesContact.get(i).x;          po2=(int)nodesContact.get(i).y;        }      }    }    nodes.add(pV);    nodesContact.add(new PointF(po1,nodes.size() - 1));    nodesContact.add(new PointF(po2,nodes.size() - 1));  }}  }
class C{  public final void testGetEncryptedData01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.EncryptedResourceIDElement createEncryptedResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.EncryptedResourceIDElementImpl();}  }
class C{  public void addBundlingDescriptorImports(ModelTypeTable typeTable){}  }
class C{  public SpinnerListModel(List<?> values){  if (values == null || values.size() == 0) {    throw new IllegalArgumentException("SpinnerListModel(List) expects non-null non-empty List");  }  this.list=values;  this.index=0;}  }
class C{  public void initialize(Map configParams) throws PolicyException {  if (configParams == null) {    throw (new PolicyException(ResBundleUtils.rbName,"ldaproles_initialization_failed",null,null));  }  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);  if (configuredLdapServer == null) {    debug.error("LDAPRoles.initialize(): failed to get LDAP " + "server name. If you enter more than one server name " + "in the policy config service's Primary LDAP Server "+ "field, please make sure the ldap server name is preceded "+ "with the local server name.");    throw (new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null));  }  ldapServer=configuredLdapServer.toLowerCase();  localDS=PolicyUtils.isLocalDS(ldapServer);  aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED)).booleanValue();  authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);  authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);  if (authpw != null) {    authpw=PolicyUtils.decrypt(authpw);  }  baseDN=(String)configParams.get(PolicyConfig.LDAP_BASE_DN);  roleSearchFilter=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_FILTER);  String scope=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    roleSearchScope=SearchScope.BASE_OBJECT;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    roleSearchScope=SearchScope.SINGLE_LEVEL;  } else {    roleSearchScope=SearchScope.WHOLE_SUBTREE;  }  roleRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_ATTRIBUTE);  userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);  scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);  userSearchScope=LDAPUtils.getSearchScope(scope,SearchScope.WHOLE_SUBTREE);  userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);  try {    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));    minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));    maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));  } catch (  NumberFormatException nfe) {    throw (new PolicyException(nfe));  }  String ssl=(String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED);  if (ssl.equalsIgnoreCase("true")) {    sslEnabled=true;  } else {    sslEnabled=false;  }  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  if (debug.messageEnabled()) {    debug.message("LDAPRoles.initialize(): getting params" + "\nldapServer: " + ldapServer + "\nauthid: "+ authid+ "\nbaseDN: "+ baseDN+ "\nroleSearchFilter: "+ roleSearchFilter+ "\nroleRDNAttrName: "+ roleRDNAttrName+ "\nuserSearchFilter: "+ userSearchFilter+ "\nuserRDNAttrName: "+ userRDNAttrName+ "\ntimeLimit: "+ timeLimit+ "\nmaxResults: "+ maxResults+ "\nminPoolSize: "+ minPoolSize+ "\nmaxPoolSize: "+ maxPoolSize+ "\nSSLEnabled: "+ sslEnabled+ "\nOrgName: "+ orgName);  }  Options options=Options.defaultOptions().set(REQUEST_TIMEOUT,new Duration((long)timeLimit,TimeUnit.MILLISECONDS));  LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize,options);  connPool=LDAPConnectionPools.getConnectionPool(ldapServer);  initialized=true;}  }
class C{  @Override protected Parcelable onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  Bundle state=new Bundle();  state.putParcelable("PARENT",superState);  state.putFloat("mAngleStart",this.mAngleStart);  state.putFloat("mAngleSweep",this.mAngleSweep);  return state;}  }
class C{  public static String byteToHex(final byte b){  return com.forgerock.opendj.util.StaticUtils.byteToHex(b);}  }
class C{  public Set searchFilteredRoles(String wildcard,int level) throws AMException, SSOException {  return searchFilteredRoles(wildcard,null,level);}  }
class C{  public SpinnerNumberModel(double value,double minimum,double maximum,double stepSize){  this(new Double(value),new Double(minimum),new Double(maximum),new Double(stepSize));}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return org.omg.CORBA.ServiceInformationHelper.type();}  }
class C{  public boolean removeChild(SMSFlatFileTreeNode node,String baseDir){  boolean removed=false;  for (Iterator i=children.iterator(); (i.hasNext()) && !removed; ) {    SMSFlatFileTreeNode c=(SMSFlatFileTreeNode)i.next();    if (c.equals(node)) {      i.remove();      node.clear(baseDir);      removed=true;    }  }  return removed;}  }
class C{  public static boolean isSAML2FailoverEnabled(){  String enableFailOver=(String)SAML2ConfigService.getAttribute(SAML2ConfigService.SAML2_FAILOVER_ATTR);  return Boolean.parseBoolean(enableFailOver);}  }
class C{  public int next(){  int node;  for (node=_currentNode; node != END; node=getNextNamespaceNode(_startNode,node,true)) {    if (getExpandedTypeID(node) == _nodeType || getNodeType(node) == _nodeType || getNamespaceType(node) == _nodeType) {      _currentNode=node;      return returnNode(node);    }  }  return (_currentNode=END);}  }
class C{  public RoutingBoard(ShapeTileBox p_bounding_box,BrdLayerStructure p_layer_structure,ShapeSegments[] p_outline_shapes,int p_outline_cl_class_no,BoardRules p_rules,HostCom p_host_com,Stat p_stat){  stat=p_stat;  layer_structure=p_layer_structure;  brd_rules=p_rules;  brd_library=new BrdLibrary();  undo_items=new UndoObjects();  brd_components=new BrdComponents();  host_com=p_host_com;  bounding_box=p_bounding_box;  search_tree_manager=new AwtreeManager(this);  p_rules.nets.set_board(this);  insert_outline(p_outline_shapes,p_outline_cl_class_no);  shove_obstacle=new BrdShoveObstacle();  shove_trace_algo=new AlgoShoveTrace(this);  shove_via_algo=new AlgoShoveVia(this);  move_drill_algo=new AlgoMoveDrillItem(this);  shove_pad_algo=new AlgoShovePad(this);  optimize_via=new AlgoOptimizeVia(this);}  }
class C{  public PdfArray readArray() throws IOException {  PdfArray array=new PdfArray();  while (true) {    PdfObject obj=readObject();    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndArray)     break;    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic && obj.getType() != PdfObject.DICTIONARY)     tokeniser.throwError(PdfException.UnexpectedGtGt);    array.add(obj);  }  return array;}  }
class C{  private static JsonValue toDebugLogsJson(RecordProperties recordProperties){  JsonObject debugLogsProperties=JsonValueBuilder.jsonValue();  debugLogsProperties.put(RecordConstants.DEBUG_LOGS_DEBUG_LEVEL_LABEL,recordProperties.debugLevel.toString());  if (recordProperties.autoStopEnable) {    JsonObject autoStopProperties=JsonValueBuilder.jsonValue();    if (recordProperties.autoStopTimeEnable) {      JsonObject timeProperties=JsonValueBuilder.jsonValue();      timeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_UNIT_LABEL,TimeUnit.MILLISECONDS.toString());      timeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_VALUE_LABEL,recordProperties.autoStopTimeInMS);      autoStopProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL,timeProperties.build().asMap());    }    if (recordProperties.autoStopFileSizeEnable) {      JsonObject fileSizeProperties=JsonValueBuilder.jsonValue();      fileSizeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_SIZEUNIT_LABEL,FileSizeUnit.KB.toString());      fileSizeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_VALUE_LABEL,recordProperties.autoStopFileSizedInKB);      autoStopProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL,fileSizeProperties.build().asMap());    }    debugLogsProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL,autoStopProperties.build().asMap());  }  return debugLogsProperties.build();}  }
class C{  public ByteMatrix encode(String contents,int width,int height,Map<EncodeHintType,Object> hints) throws WriterException {  if (contents == null || contents.length() == 0) {    throw new IllegalArgumentException("Found empty contents");  }  if (width < 0 || height < 0) {    throw new IllegalArgumentException("Requested dimensions are too small: " + width + 'x'+ height);  }  ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L;  if (hints != null) {    ErrorCorrectionLevel requestedECLevel=(ErrorCorrectionLevel)hints.get(EncodeHintType.ERROR_CORRECTION);    if (requestedECLevel != null) {      errorCorrectionLevel=requestedECLevel;    }  }  QRCode code=new QRCode();  Encoder.encode(contents,errorCorrectionLevel,hints,code);  return renderResult(code,width,height);}  }
class C{  public ClientKeyExchange(BigInteger dh_Yc){  byte[] bb=dh_Yc.toByteArray();  if (bb[0] == 0) {    exchange_keys=new byte[bb.length - 1];    System.arraycopy(bb,1,exchange_keys,0,exchange_keys.length);  } else {    exchange_keys=bb;  }  length=exchange_keys.length + 2;  isRSA=false;}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Point(x,y)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,bgcolor,observer);}  }
class C{  public static void main(final String[] args){  if (args.length != 2) {    System.err.println("Usage: host port");    System.err.println("For example: localhost 1389");    System.exit(1);  }  String host=args[0];  int port=Integer.parseInt(args[1]);  String adminDN="uid=kvaughan,ou=people,dc=example,dc=com";  char[] adminPwd="bribery".toCharArray();  String entryDN="cn=Bob,ou=People,dc=example,dc=com";  Entry entry=new LinkedHashMapEntry(entryDN).addAttribute("cn","Bob").addAttribute("objectclass","top").addAttribute("objectclass","person").addAttribute("objectclass","organizationalPerson").addAttribute("objectclass","inetOrgPerson").addAttribute("mail","subgenius@example.com").addAttribute("sn","Dobbs");  LDIFEntryWriter writer=new LDIFEntryWriter(System.out);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(adminDN,adminPwd);    System.out.println("Creating an entry...");    writeToConsole(writer,entry);    connection.add(entry);    System.out.println("...done.");    System.out.println("Updating mail address, adding description...");    Entry old=TreeMapEntry.deepCopyOfEntry(entry);    entry=entry.replaceAttribute("mail","spammer@example.com").addAttribute("description","Good user gone bad");    writeToConsole(writer,entry);    ModifyRequest request=Entries.diffEntries(old,entry);    connection.modify(request);    System.out.println("...done.");    System.out.println("Renaming the entry...");    String newDN="cn=Ted,ou=People,dc=example,dc=com";    entry=entry.setName(newDN);    writeToConsole(writer,entry);    connection.modifyDN(entryDN,"cn=Ted");    System.out.println("...done.");    System.out.println("Deleting the entry...");    writeToConsole(writer,entry);    connection.delete(newDN);    System.out.println("...done.");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    return;  } finally {    if (connection != null) {      connection.close();    }    try {      writer.close();    } catch (    final IOException ignored) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(-69);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static String extractShortcut(String pattern){  char[] wildcardChars=new char[]{'*','?'};  int startIndex=0;  int endIndex=StringUtils.indexOfAny(pattern,wildcardChars);  if (endIndex < 0) {    return pattern;  }  String shortcut=endIndex == startIndex ? StringUtils.EMPTY : pattern.substring(startIndex,endIndex - startIndex);  while (endIndex >= 0) {    startIndex=startIndex + endIndex + 1;    if (pattern.length() <= startIndex) {      break;    }    endIndex=StringUtils.indexOfAny(pattern.substring(startIndex),wildcardChars);    String tmpShortcut=endIndex < 0 ? pattern.substring(startIndex) : pattern.substring(startIndex,endIndex + startIndex);    if (tmpShortcut.length() > shortcut.length()) {      shortcut=tmpShortcut;    }  }  return shortcut;}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeOctetString(section);}  }
class C{  public void test_ConstructorLjava_security_cert_CertPathParameters(){  try {    CertPathParameters parameters=new MyCertPathParameters();    CertPathTrustManagerParameters p=new CertPathTrustManagerParameters(parameters);    assertNotSame("Parameters were cloned incorrectly",parameters,p.getParameters());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new CertPathTrustManagerParameters(null);    fail("Expected CertPathTrustManagerParameters was not thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  public HashDocAttributeSet(DocAttributeSet attributes){  super(attributes,DocAttribute.class);}  }
class C{  private void validate(){  if (values != null)   return;  values=new Values();  Map<String,Object> defaults=((NimbusLookAndFeel)UIManager.getLookAndFeel()).getDefaultsForPrefix(prefix);  if (component != null) {    Object o=component.get().getClientProperty("Nimbus.Overrides");    if (o instanceof UIDefaults) {      Object i=component.get().getClientProperty("Nimbus.Overrides.InheritDefaults");      boolean inherit=i instanceof Boolean ? (Boolean)i : true;      UIDefaults d=(UIDefaults)o;      TreeMap<String,Object> map=new TreeMap<String,Object>();      for (      Object obj : d.keySet()) {        if (obj instanceof String) {          String key=(String)obj;          if (key.startsWith(prefix)) {            map.put(key,d.get(key));          }        }      }      if (inherit) {        defaults.putAll(map);      } else {        defaults=map;      }    }  }  List<State> states=new ArrayList<State>();  Map<String,Integer> stateCodes=new HashMap<String,Integer>();  List<RuntimeState> runtimeStates=new ArrayList<RuntimeState>();  String statesString=(String)defaults.get(prefix + ".States");  if (statesString != null) {    String s[]=statesString.split(",");    for (int i=0; i < s.length; i++) {      s[i]=s[i].trim();      if (!State.isStandardStateName(s[i])) {        String stateName=prefix + "." + s[i];        State customState=(State)defaults.get(stateName);        if (customState != null) {          states.add(customState);        }      } else {        states.add(State.getStandardState(s[i]));      }    }    if (states.size() > 0) {      values.stateTypes=states.toArray(new State[states.size()]);    }    int code=1;    for (    State state : states) {      stateCodes.put(state.getName(),code);      code<<=1;    }  } else {    states.add(State.Enabled);    states.add(State.MouseOver);    states.add(State.Pressed);    states.add(State.Disabled);    states.add(State.Focused);    states.add(State.Selected);    states.add(State.Default);    stateCodes.put("Enabled",ENABLED);    stateCodes.put("MouseOver",MOUSE_OVER);    stateCodes.put("Pressed",PRESSED);    stateCodes.put("Disabled",DISABLED);    stateCodes.put("Focused",FOCUSED);    stateCodes.put("Selected",SELECTED);    stateCodes.put("Default",DEFAULT);  }  for (  String key : defaults.keySet()) {    String temp=key.substring(prefix.length());    if (temp.indexOf('"') != -1 || temp.indexOf(':') != -1)     continue;    temp=temp.substring(1);    String stateString=null;    String property=null;    int bracketIndex=temp.indexOf(']');    if (bracketIndex < 0) {      property=temp;    } else {      stateString=temp.substring(0,bracketIndex);      property=temp.substring(bracketIndex + 2);    }    if (stateString == null) {      if ("contentMargins".equals(property)) {        values.contentMargins=(Insets)defaults.get(key);      } else       if ("States".equals(property)) {      } else {        values.defaults.put(property,defaults.get(key));      }    } else {      boolean skip=false;      int componentState=0;      String[] stateParts=stateString.split("\\+");      for (      String s : stateParts) {        if (stateCodes.containsKey(s)) {          componentState|=stateCodes.get(s);        } else {          skip=true;          break;        }      }      if (skip)       continue;      RuntimeState rs=null;      for (      RuntimeState s : runtimeStates) {        if (s.state == componentState) {          rs=s;          break;        }      }      if (rs == null) {        rs=new RuntimeState(componentState,stateString);        runtimeStates.add(rs);      }      if ("backgroundPainter".equals(property)) {        rs.backgroundPainter=getPainter(defaults,key);      } else       if ("foregroundPainter".equals(property)) {        rs.foregroundPainter=getPainter(defaults,key);      } else       if ("borderPainter".equals(property)) {        rs.borderPainter=getPainter(defaults,key);      } else {        rs.defaults.put(property,defaults.get(key));      }    }  }  Collections.sort(runtimeStates,STATE_COMPARATOR);  values.states=runtimeStates.toArray(new RuntimeState[runtimeStates.size()]);}  }
class C{  public Object clone(){  return new Area(this);}  }
class C{  @AfterMethod(alwaysRun=true) public void reenableBackend() throws DirectoryException {  Backend<?> b=DirectoryServer.getBackend(DN.valueOf("o=test"));  b.setWritabilityMode(WritabilityMode.ENABLED);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    int v=s.charAt(i);    out.write((v >>> 8) & 0xFF);    out.write((v >>> 0) & 0xFF);  }  incCount(len * 2);}  }
class C{  public TableColumn(){  this(0);}  }
class C{  public long stdDev(){  final long m=deltaCount.get() - 1;  return m > 0 ? (long)Math.sqrt(deltaStdDev.get() / (double)m) : 0;}  }
class C{  public void sendEvent(InternalSession internalSession,SessionEventType eventType){  sessionNotificationSender.sendEvent(internalSession,eventType);}  }
class C{  public ChildTestIterator(DTMAxisTraverser traverser){  super(null);  m_traverser=traverser;}  }
class C{  protected synchronized void checkResources(DeployedApplication app,boolean skipFileModificationResolutionCheck){  String[] resources=app.redeployResources.keySet().toArray(new String[0]);  long currentTimeWithResolutionOffset=System.currentTimeMillis() - FILE_MODIFICATION_RESOLUTION_MS;  for (int i=0; i < resources.length; i++) {    File resource=new File(resources[i]);    if (log.isDebugEnabled())     log.debug("Checking context[" + app.name + "] redeploy resource "+ resource);    long lastModified=app.redeployResources.get(resources[i]).longValue();    if (resource.exists() || lastModified == 0) {      if (resource.lastModified() != lastModified && (!host.getAutoDeploy() || resource.lastModified() < currentTimeWithResolutionOffset || skipFileModificationResolutionCheck)) {        if (resource.isDirectory()) {          app.redeployResources.put(resources[i],Long.valueOf(resource.lastModified()));        } else         if (app.hasDescriptor && resource.getName().toLowerCase(Locale.ENGLISH).endsWith(".war")) {          Context context=(Context)host.findChild(app.name);          String docBase=context.getDocBase();          if (!docBase.toLowerCase(Locale.ENGLISH).endsWith(".war")) {            File docBaseFile=new File(docBase);            if (!docBaseFile.isAbsolute()) {              docBaseFile=new File(host.getAppBaseFile(),docBase);            }            reload(app,docBaseFile,resource.getAbsolutePath());          } else {            reload(app,null,null);          }          app.redeployResources.put(resources[i],Long.valueOf(resource.lastModified()));          app.timestamp=System.currentTimeMillis();          boolean unpackWAR=unpackWARs;          if (unpackWAR && context instanceof StandardContext) {            unpackWAR=((StandardContext)context).getUnpackWAR();          }          if (unpackWAR) {            addWatchedResources(app,context.getDocBase(),context);          } else {            addWatchedResources(app,null,context);          }          return;        } else {          undeploy(app);          deleteRedeployResources(app,resources,i,false);          return;        }      }    } else {      try {        Thread.sleep(500);      } catch (      InterruptedException e1) {      }      if (resource.exists()) {        continue;      }      undeploy(app);      deleteRedeployResources(app,resources,i,true);      return;    }  }  resources=app.reloadResources.keySet().toArray(new String[0]);  boolean update=false;  for (int i=0; i < resources.length; i++) {    File resource=new File(resources[i]);    if (log.isDebugEnabled()) {      log.debug("Checking context[" + app.name + "] reload resource "+ resource);    }    long lastModified=app.reloadResources.get(resources[i]).longValue();    if ((resource.lastModified() != lastModified && (!host.getAutoDeploy() || resource.lastModified() < currentTimeWithResolutionOffset || skipFileModificationResolutionCheck)) || update) {      if (!update) {        reload(app,null,null);        update=true;      }      app.reloadResources.put(resources[i],Long.valueOf(resource.lastModified()));    }    app.timestamp=System.currentTimeMillis();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.ExpiresElement createExpiresElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.ExpiresElementImpl();}  }
class C{  public static Object fromIntValue(int value){  return BigInteger.valueOf(value).toByteArray();}  }
class C{  public void add(String key,String value){  mapping.add(new Pair(key,value));}  }
class C{  public void discardAttribute(Set discard){  for (Iterator i=mapTypeToAttributeSchema.keySet().iterator(); i.hasNext(); ) {    SchemaType type=(SchemaType)i.next();    Set attributeSchema=(Set)mapTypeToAttributeSchema.get(type);    if ((attributeSchema != null) && !attributeSchema.isEmpty()) {      for (Iterator j=attributeSchema.iterator(); j.hasNext(); ) {        AttributeSchema as=(AttributeSchema)j.next();        if (discard.contains(as.getName())) {          j.remove();        }      }    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TransportBindingElement createTransportBindingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TransportBindingElementImpl();}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuilder sb=new StringBuilder(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(AUDIENCE_RESTRICTION_ELEMENT).append(NS).append(">\n");  if (audiences != null) {    for (    String audience : audiences) {      sb.append("<").append(appendNS).append(AUDIENCE_ELEMENT).append(">").append(XMLUtils.escapeSpecialCharacters(audience)).append("</").append(appendNS).append(AUDIENCE_ELEMENT).append(">\n");    }  } else {    SAML2SDKUtils.debug.error("AudienceRestrictionImpl.processElement(): " + "AudienceRestriction has no subelements");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_subelements"));  }  sb.append("</").append(appendNS).append(AUDIENCE_RESTRICTION_ELEMENT).append(">\n");  return sb.toString();}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_header[0]=type;    mac_material_header[3]=(byte)((0x00FF00 & len) >> 8);    mac_material_header[4]=(byte)(0x0000FF & len);    encMac.update(write_seq_num);    encMac.update(mac_material_header);    encMac.update(fragment,offset,len);    encMac.doFinal(res,len);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.do_encryption: Generic" + (block_size != 0 ? "BlockCipher with padding[" + padding_length + "]:" : "StreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public void writeAttribute(final String sourceKey,final String targetKey,final Object defaultValue) throws IOException {  JKJsfUtil.writeAttribue(this.component,sourceKey,targetKey,defaultValue);}  }
class C{  public PdfOCProperties(PdfDictionary ocPropertiesDict){  super(ocPropertiesDict);  ensureObjectIsAddedToDocument(ocPropertiesDict);  readLayersFromDictionary();}  }
class C{  static ComputedDayOfField ofWeekOfMonthField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfMonth",weekDef,WEEKS,MONTHS,WEEK_OF_MONTH_RANGE);}  }
class C{  public static WindowMessage show(String[] p_messages){  return new WindowMessage(p_messages);}  }
class C{  private boolean isOneOf(char ch,final char[] charray){  boolean result=false;  for (  char element : charray) {    if (ch == element) {      result=true;      break;    }  }  return result;}  }
class C{  private TemplateTag parseAttributeTag(final String tagString,final Branch branch,final Template template,final int lineNumber,final List<LocalizableMessage> warnings) throws DecodeException {  final StringTokenizer tokenizer=new StringTokenizer(tagString,":");  final List<String> args=new ArrayList<>();  while (tokenizer.hasMoreTokens()) {    args.add(tokenizer.nextToken());  }  final String[] arguments=args.toArray(new String[args.size()]);  final AttributeValueTag tag=new AttributeValueTag();  if (branch != null) {    tag.initializeForBranch(schema,this,branch,arguments,lineNumber,warnings);  } else {    tag.initializeForTemplate(schema,this,template,arguments,lineNumber,warnings);  }  return tag;}  }
class C{  public void clear(){  for (Node<E> x=first; x != null; ) {    Node<E> next=x.next;    x.item=null;    x.next=null;    x.prev=null;    x=next;  }  first=last=null;  size=0;  modCount++;}  }
class C{  public Map<String,String> parse(final char[] charArray,int offset,int length,char separator){  if (charArray == null) {    return new HashMap<>();  }  HashMap<String,String> params=new HashMap<>();  this.chars=charArray;  this.pos=offset;  this.len=length;  String paramName=null;  String paramValue=null;  while (hasChar()) {    paramName=parseToken(new char[]{'=',separator});    paramValue=null;    if (hasChar() && (charArray[pos] == '=')) {      pos++;      paramValue=parseQuotedToken(new char[]{separator});      if (paramValue != null) {        try {          paramValue=MimeUtility.decodeText(paramValue);        } catch (        UnsupportedEncodingException e) {        }      }    }    if (hasChar() && (charArray[pos] == separator)) {      pos++;    }    if ((paramName != null) && (paramName.length() > 0)) {      if (this.lowerCaseNames) {        paramName=paramName.toLowerCase(Locale.ENGLISH);      }      params.put(paramName,paramValue);    }  }  return params;}  }
class C{  public static void shutDown(String className,LocalizableMessage reason){synchronized (directoryServer) {    if (directoryServer.shuttingDown) {      return;    }    directoryServer.shuttingDown=true;  }  sendAlertNotification(directoryServer,ALERT_TYPE_SERVER_SHUTDOWN,NOTE_SERVER_SHUTDOWN.get(className,reason));  ServerShutdownMonitor shutdownMonitor=new ServerShutdownMonitor();  shutdownMonitor.start();  for (  ConnectionHandler<?> handler : directoryServer.connectionHandlers) {    try {      handler.finalizeConnectionHandler(INFO_CONNHANDLER_CLOSED_BY_SHUTDOWN.get());    } catch (    Exception e) {      logger.traceException(e);    }  }  directoryServer.connectionHandlers.clear();  if (directoryServer.workQueue != null) {    directoryServer.workQueue.finalizeWorkQueue(reason);    directoryServer.workQueue.waitUntilIdle(ServerShutdownMonitor.WAIT_TIME);  }  for (  SynchronizationProvider<?> provider : directoryServer.synchronizationProviders) {    provider.finalizeSynchronizationProvider();  }  if (directoryServer.pluginConfigManager != null) {    directoryServer.pluginConfigManager.invokeShutdownPlugins(reason);    directoryServer.pluginConfigManager.finalizePlugins();  }  if (directoryServer.shutdownHook != null) {    try {      Runtime.getRuntime().removeShutdownHook(directoryServer.shutdownHook);    } catch (    Exception e) {    }  }  for (  ServerShutdownListener shutdownListener : directoryServer.shutdownListeners) {    try {      shutdownListener.processServerShutdown(reason);    } catch (    Exception e) {      logger.traceException(e);    }  }  for (  AlertHandler<?> alertHandler : directoryServer.alertHandlers) {    alertHandler.finalizeAlertHandler();  }  if (directoryServer.mBeanServer != null) {    Set<?> mBeanSet=directoryServer.mBeanServer.queryMBeans(null,null);    for (    Object o : mBeanSet) {      if (o instanceof DirectoryServerMBean) {        try {          DirectoryServerMBean mBean=(DirectoryServerMBean)o;          directoryServer.mBeanServer.unregisterMBean(mBean.getObjectName());        } catch (        Exception e) {          logger.traceException(e);        }      }    }  }  for (  SASLMechanismHandler<?> handler : directoryServer.saslMechanismHandlers.values()) {    try {      handler.finalizeSASLMechanismHandler();    } catch (    Exception e) {      logger.traceException(e);    }  }  for (  ExtendedOperationHandler<?> handler : directoryServer.extendedOperationHandlers.values()) {    try {      handler.finalizeExtendedOperationHandler();    } catch (    Exception e) {      logger.traceException(e);    }  }  for (  DN configEntryDN : directoryServer.authenticationPolicies.keySet()) {    DirectoryServer.deregisterAuthenticationPolicy(configEntryDN);  }  if (directoryServer.authenticationPolicyConfigManager != null) {    directoryServer.authenticationPolicyConfigManager.finalizeAuthenticationPolicies();  }  AccessControlHandler<?> accessControlHandler=AccessControlConfigManager.getInstance().getAccessControlHandler();  if (accessControlHandler != null) {    accessControlHandler.finalizeAccessControlHandler();  }  if (directoryServer.groupManager != null) {    directoryServer.groupManager.finalizeGroupManager();  }  if (directoryServer.subentryManager != null) {    directoryServer.subentryManager.finalizeSubentryManager();  }  for (  MonitorProvider<?> monitor : directoryServer.monitorProviders.values()) {    try {      monitor.finalizeMonitorProvider();    } catch (    Exception e) {      logger.traceException(e);    }  }  shutdownBackends();  if (directoryServer.configurationHandler != null) {    directoryServer.configurationHandler.finalize();  }  EntryCache<?> ec=DirectoryServer.getEntryCache();  if (ec != null) {    ec.finalizeEntryCache();  }  try {    String serverLockFileName=LockFileManager.getServerLockFileName();    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.releaseLock(serverLockFileName,failureReason)) {      logger.info(NOTE_SERVER_SHUTDOWN,className,failureReason);    }    serverLocked=false;  } catch (  Exception e) {    logger.traceException(e);  }  InternalConnectionHandler.clearRootClientConnectionAtShutdown();  logger.info(NOTE_SERVER_STOPPED);  AccessLogger.getInstance().removeAllLogPublishers();  ErrorLogger.getInstance().removeAllLogPublishers();  DebugLogger.getInstance().removeAllLogPublishers();  TimeThread.stop();  shutdownMonitor.waitForMonitor();  DirectoryEnvironmentConfig envConfig=directoryServer.environmentConfig;  directoryServer.destroy();  directoryServer=getNewInstance(envConfig);}  }
class C{  public boolean hasVersion(){  return fieldSetFlags()[0];}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public CollectiveVirtualAttribute(Attribute attribute){  this.attribute=attribute;}  }
class C{  public void debug(int level,String msg,Throwable e){switch (level) {case 2:    debugInst.error(msg,e);  break;case 1:debugInst.warning(msg,e);break;default :debugInst.message(msg,e);}}  }
class C{  public static SecurityOptions createJKSCertificateOptions(String keystorePath,String keystorePwd,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  return createOptionsForCertificatType(CertificateType.JKS,keystorePath,keystorePwd,enableSSL,enableStartTLS,sslPort,aliasesToUse);}  }
class C{  public LinkedHashMap(int initialCapacity){  super(initialCapacity);  accessOrder=false;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public static int rotateLeft(int i,int distance){  return (i << distance) | (i >>> -distance);}  }
class C{  public DatatypeConfigurationException(Throwable cause){  super(cause == null ? null : cause.toString());  initCauseByReflection(cause);}  }
class C{  public Preferences systemRoot(){  return WindowsPreferences.systemRoot;}  }
class C{  public void testCFII_ServerClosedAfterFinish_Block() throws Exception {  connectServerBlock();  ensureServerClosed();  assertTrue(this.channel1.isOpen());  this.channel1.close();  statusChannelClosed();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported05.class,args);}  }
class C{  static int binaryGcd(int a,int b){  if (b == 0)   return a;  if (a == 0)   return b;  int aZeros=Integer.numberOfTrailingZeros(a);  int bZeros=Integer.numberOfTrailingZeros(b);  a>>>=aZeros;  b>>>=bZeros;  int t=(aZeros < bZeros ? aZeros : bZeros);  while (a != b) {    if ((a + 0x80000000) > (b + 0x80000000)) {      a-=b;      a>>>=Integer.numberOfTrailingZeros(a);    } else {      b-=a;      b>>>=Integer.numberOfTrailingZeros(b);    }  }  return a << t;}  }
class C{  public java.lang.String toXMLString(boolean includeNS,boolean declareNS) throws com.sun.identity.saml2.common.SAML2Exception {  validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("AuthnContext").append(uri).append(">");  if (authnContextClassRef != null && authnContextClassRef.trim().length() != 0) {    result.append("<").append(prefix).append("AuthnContextClassRef").append(uri).append(">").append(authnContextClassRef).append("</").append(prefix).append("AuthnContextClassRef>");  }  if (authnContextDecl != null && authnContextDecl.trim().length() != 0) {    result.append(authnContextDecl);  } else   if (authnContextDeclRef != null && authnContextDeclRef.trim().length() != 0) {    result.append("<").append(prefix).append("AuthnContextDeclRef").append(uri).append(">").append(authnContextDeclRef).append("</").append(prefix).append("AuthnContextDeclRef>");  }  if (authenticatingAuthority != null) {    for (    String authority : authenticatingAuthority) {      if (authority != null && authority.trim().length() != 0) {        result.append("<").append(prefix).append("AuthenticatingAuthority").append(uri).append(">").append(authority).append("</").append(prefix).append("AuthenticatingAuthority>");      }    }  }  result.append("</").append(prefix).append("AuthnContext>");  return result.toString();}  }
class C{  private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    @SuppressWarnings("unchecked") List<LocalBackendModifyDNOperation> localOperations=(List<LocalBackendModifyDNOperation>)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      LocalBackendModifyDNOperation localOperation : localOperations) {        getPluginConfigManager().invokePostResponseModifyDNPlugins(localOperation);      }    }  } else {    getPluginConfigManager().invokePostResponseModifyDNPlugins(this);  }}  }
class C{  protected boolean canPathsBeAdded(TreePath[] paths){  if (paths == null || paths.length == 0 || rowMapper == null || selection == null || selectionMode == TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION)   return true; else {    BitSet bitSet=new BitSet();    DefaultListSelectionModel lModel=listSelectionModel;    int anIndex;    int counter;    int min=lModel.getMinSelectionIndex();    int max=lModel.getMaxSelectionIndex();    TreePath[] tempPath=new TreePath[1];    if (min != -1) {      for (counter=min; counter <= max; counter++) {        if (lModel.isSelectedIndex(counter))         bitSet.set(counter);      }    } else {      tempPath[0]=paths[0];      min=max=rowMapper.getRowsForPaths(tempPath)[0];    }    for (counter=paths.length - 1; counter >= 0; counter--) {      if (paths[counter] != null) {        tempPath[0]=paths[counter];        int[] rows=rowMapper.getRowsForPaths(tempPath);        if (rows == null) {          return false;        }        anIndex=rows[0];        min=Math.min(anIndex,min);        max=Math.max(anIndex,max);        if (anIndex == -1)         return false;        bitSet.set(anIndex);      }    }    for (counter=min; counter <= max; counter++)     if (!bitSet.get(counter))     return false;  }  return true;}  }
class C{  private static void copy(String resource,String directory) throws IOException {  mkdir(directory);  String fileName=resource.substring(resource.lastIndexOf("/") + 1);  File file=new File(directory + System.getProperty("file.separator") + fileName);  try (InputStream is=EmbeddedCassandraServerHelper.class.getResourceAsStream(resource);OutputStream out=new FileOutputStream(file)){    byte[] buf=new byte[1024];    int len;    while ((len=is.read(buf)) > 0) {      out.write(buf,0,len);    }    out.close();  } }  }
class C{  static void failIfNotInitialized() throws IllegalStateException {  if (!mInitialized) {    throw new IllegalStateException("Storo instance is not initialized! You must call initialize() before calling any other methods.");  }}  }
class C{  private Map.Entry<DN,List<String>> decode(ByteSequence bs) throws StorageRuntimeException {  return decode0(bs,true);}  }
class C{  private void validateChrono(TemporalAccessor temporal){  Objects.requireNonNull(temporal,"temporal");  Chronology temporalChrono=temporal.query(TemporalQueries.chronology());  if (temporalChrono != null && IsoChronology.INSTANCE.equals(temporalChrono) == false) {    throw new DateTimeException("Chronology mismatch, expected: ISO, actual: " + temporalChrono.getId());  }}  }
class C{  protected void acceptDrop(int dropOperation){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.acceptDrop(dropOperation);  }}  }
class C{  public static String quote(String s){  if (s == null) {    s="";  }  return "\"" + s + "\"";}  }
class C{  public void fireGenerateEvent(int eventType,String name,String data){}  }
class C{  private void createAdministratorContainerEntry() throws ADSContextException {  AddRequest request=newAddRequest(getAdministratorContainerDN()).addAttribute("objectclass","groupofurls").addAttribute("memberURL","ldap:///" + getAdministratorContainerDN() + "??one?(objectclass=*)").addAttribute("description","Group of identities which have full access.");  createEntry(request);}  }
class C{  public static ActionDecision parseActionDecision(Node actionDecisionNode) throws PolicyException {  ActionDecision actionDecision=null;  Set nodeSet=XMLUtils.getChildNodes(actionDecisionNode,PolicyUtils.ATTRIBUTE_VALUE_PAIR);  if ((nodeSet == null) || (nodeSet.isEmpty())) {    debug.error("parseActionDecision: missing element " + PolicyUtils.ATTRIBUTE_VALUE_PAIR);    return null;  }  Iterator nodes=nodeSet.iterator();  Node node=(Node)nodes.next();  String actionName=PolicyUtils.getAttributeName(node);  Set actionValues=PolicyUtils.getAttributeValues(node);  actionDecision=new ActionDecision(actionName,actionValues);  long timeToLive=Long.MAX_VALUE;  String ttlString=XMLUtils.getNodeAttributeValue(actionDecisionNode,ActionDecision.TIME_TO_LIVE);  if (ttlString != null) {    try {      timeToLive=Long.parseLong(ttlString);      if (timeToLive != Long.MAX_VALUE) {        timeToLive+=clientClockSkew;      }    } catch (    Exception e) {      debug.error("Error while parsing timeToLive in " + " ActionDecision:" + ttlString);      Object[] args={new Long(timeToLive)};      throw new PolicyException(ResBundleUtils.rbName,"invalid_time_to_live",args,e);    }  }  actionDecision.setTimeToLive(timeToLive);  Map advices=new HashMap();  nodeSet=XMLUtils.getChildNodes(actionDecisionNode,ActionDecision.ADVICES);  if (nodeSet != null) {    nodes=nodeSet.iterator();    node=(Node)nodes.next();    nodeSet=XMLUtils.getChildNodes(node,PolicyUtils.ATTRIBUTE_VALUE_PAIR);    if (nodeSet != null) {      nodes=nodeSet.iterator();      while (nodes.hasNext()) {        node=(Node)nodes.next();        String adviceName=PolicyUtils.getAttributeName(node);        if (adviceName != null) {          Set adviceMessages=PolicyUtils.getAttributeValues(node);          advices.put(adviceName,adviceMessages);        }      }    }  }  actionDecision.setAdvices(advices);  return actionDecision;}  }
class C{  public void initialize(Map initParams){  String sdkInstallDir=(String)initParams.get("OracleAMSDKDir");  protocol=(String)initParams.get("Protocol");  resource=(String)initParams.get("Resource");  action=(String)initParams.get("Action");  cookieDomain=(String)initParams.get("CookieDomain");  famCookieName=(String)initParams.get("FAMCookieName");  oamCookieName=(String)initParams.get("OAMCookieName");  System.out.println("Agent initialization details:" + sdkInstallDir + " "+ protocol+ " "+ action+ " "+ famCookieName+ " "+ oamCookieName+ " "+ resource);  try {    obconfig=new ObConfig();    obconfig.initialize(sdkInstallDir);  } catch (  ObAccessException oae) {    oae.printStackTrace();    System.out.println("Oblix SDK initialization failed");  }}  }
class C{  protected Iterator bcsChildren(){synchronized (children) {    return children.values().iterator();  }}  }
class C{  public PushbackInputStream(InputStream in){  this(in,1);}  }
class C{  public Set<String> objectsChanged_idrepo(int time) throws RemoteException {  initializeCacheSize();  Set<String> answer=collectChangesFromCache(time,idrepoCache);  if (idRepoDebug.messageEnabled()) {    idRepoDebug.message("IdRepoJAXRPCObjectImpl.objectsChanged in time: " + time + "+2 minutes:\n"+ answer);  }  return answer;}  }
class C{  private IntersectionIndexQuery(Collection<IndexQuery> subIndexQueries){  this.subIndexQueries=subIndexQueries;}  }
class C{  public static int[] oidStrToInts(String oid) throws IOException {  int length=oid.length();  if (oid.charAt(length - 1) == '.') {    throw new IOException("Bad OID: " + oid);  }  int[] result=new int[length / 2 + 1];  int number=0;  for (int i=0; i < length; i++) {    int value=0;    int pos=i;    for (; i < length; i++) {      char ch=oid.charAt(i);      if ((ch < '0') || (ch > '9')) {        break;      }      value=10 * value + (ch - '0');    }    if (i == pos) {      throw new IOException("Bad OID: " + oid);    }    result[number++]=value;    if (i == length) {      break;    }    char ch=oid.charAt(i);    if (ch != '.') {      throw new IOException("Bad OID: " + oid);    }  }  if (number < 2) {    throw new IOException("OID should consist of no less than 2 components: " + oid);  }  return Arrays.copyOfRange(result,0,number);}  }
class C{  private void validateDnsName(String dnsName) throws PolicyException {  int starIndex=dnsName.indexOf("*");  if ((starIndex >= 0) && !dnsName.equals("*")) {    if ((starIndex > 0) || ((starIndex == 0) && ((dnsName.indexOf("*",1) != -1) || (dnsName.charAt(1) != '.')))) {      String args[]={DNS_NAME,dnsName};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }  }}  }
class C{  public void removePrivilege(String privilegeName) throws DelegationException {  if (pluginInstance != null) {    try {      pluginInstance.removePrivilege(token,orgName,privilegeName);    } catch (    SSOException se) {      throw new DelegationException(se);    }  } else {    throw new DelegationException(ResBundleUtils.rbName,"no_plugin_specified",null,null);  }}  }
class C{  public final Set<AwtreeObject> overlapping_objects(ShapeConvex p_shape,int p_layer){  return search_tree_manager.get_default_tree().find_overlap_objects(p_shape,p_layer,NetNosList.EMPTY);}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  public static List<DereferenceAliasesPolicy> values(){  return IMMUTABLE_ELEMENTS;}  }
class C{  public void endMonitoringOf(final InetSocketAddress socketAddress,final int inode){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4SocketAddressAndInode(socketAddress,inode));}  }
class C{  public void select_items(Point2D p_point){  if (board_is_read_only)   return;  if (!(interactive_state instanceof StateMenu))   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  StateInteractive return_state=((StateMenu)interactive_state).select_items(location);  set_interactive_state(return_state);}  }
class C{  public void addColumn(Object columnName){  addColumn(columnName,(Vector)null);}  }
class C{  public RTFEditorKit(){  super();}  }
class C{  public static LocalBackendWorkflowElement createAndRegister(DN baseDN,Backend<?> backend){  LocalBackendWorkflowElement localBackend=registeredLocalBackends.get(baseDN);  if (localBackend == null) {    localBackend=new LocalBackendWorkflowElement(baseDN,backend);    registerLocalBackend(localBackend);  }  return localBackend;}  }
class C{  public void testEqualsBigIntegerTrue(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object bNumber=new BigInteger(bSign,bBytes);  assertTrue(aNumber.equals(bNumber));}  }
class C{  synchronized static void register(JComponent c){  if (c == null) {    throw new NullPointerException("JComponent must be non-null");  }  components.add(new WeakReference<JComponent>(c));}  }
class C{  static void installAudioActionMap(ActionMap map){  LookAndFeel laf=UIManager.getLookAndFeel();  if (laf instanceof BasicLookAndFeel) {    map.setParent(((BasicLookAndFeel)laf).getAudioActionMap());  }}  }
class C{  public void unread(byte[] b) throws IOException {  unread(b,0,b.length);}  }
class C{  public ByteArrayBuilder appendByteArray(byte[] bytes){  builder.appendBytes(bytes);  return this;}  }
class C{  public void testDivideRoundFloorPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_FLOOR);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean useDaylightTime(){  return useDaylight;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrnormalize.class,args);}  }
class C{  public void testInit02() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  SecureRandom random=null;  DSAParameterSpec dsa=new DSAParameterSpec(new BigInteger("56"),new BigInteger("56"),new BigInteger("56"));  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].init(privKey,dsa);      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,dsa,new SecureRandom());      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,dsa,random);      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }  }}  }
class C{  private int epochMonthToEpochDay(int epochMonth){  return hijrahEpochMonthStartDays[epochMonth];}  }
class C{  private GenericFrame createFrame(StatusGenericPanel panel){  return new GenericFrame(panel);}  }
class C{  public PlaSide side_of(PlaDelTriCorner p_1,PlaDelTriCorner p_2){  return coor.side_of(p_1.coor,p_2.coor);}  }
class C{  void clear(){  ob=null;}  }
class C{  public static List<Foo> findByField2(boolean field2){  return getPersistence().findByField2(field2);}  }
class C{  public Observable<Payment> retrievePaymentRecordObservable(String payId){  io.vertx.rx.java.ObservableFuture<Payment> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrievePaymentRecord(payId,resultHandler.toHandler());  return resultHandler;}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  public boolean checkDependencies(ModifyOperation op){  final CSN csn=OperationContext.getCSN(op);  final PendingChange change=getPendingChange(csn);  if (change == null) {    return false;  }  boolean hasDependencies=false;  final DN targetDN=change.getLDAPUpdateMsg().getDN();  for (  PendingChange pendingChange : activeAndDependentChanges) {    if (pendingChange.getCSN().isNewerThanOrEqualTo(csn)) {      break;    }    final LDAPUpdateMsg pendingMsg=pendingChange.getLDAPUpdateMsg();    if (pendingMsg instanceof AddMsg) {      if (pendingMsg.getDN().equals(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof ModifyDNMsg) {      if (((ModifyDNMsg)pendingMsg).newDNIsEqual(targetDN)) {        hasDependencies=true;        addDependency(change);      }    }  }  return hasDependencies;}  }
class C{  private static ExtendedRequestProtocolOp readExtendedRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_EXTENDED_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  String oid;  try {    oid=reader.readOctetStringAsString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_EXTENDED_REQUEST_DECODE_OID.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString value=null;  try {    if (reader.hasNextElement()) {      value=reader.readOctetString();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_EXTENDED_REQUEST_DECODE_VALUE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_EXTENDED_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ExtendedRequestProtocolOp(oid,value);}  }
class C{  public final void writeInt(int val) throws IOException {  Memory.pokeInt(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.INT);}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds,Map<String,Object> properties){  this(type,divisionType,resolution,bytes,microseconds);  this.properties=new HashMap<String,Object>(properties);}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  super.parseDOMAttributes(element);  sessionIndex=element.getAttribute(SAML2Constants.SESSION_INDEX);}  }
class C{  public Origin createOrigin(String userName,String address) throws SdpException {  OriginField originImpl=new OriginField();  originImpl.setUsername(userName);  originImpl.setAddress(address);  originImpl.setNetworkType(SDPKeywords.IN);  originImpl.setAddressType(SDPKeywords.IPV4);  return originImpl;}  }
class C{  public void createAdministrator(Map<AdministratorProperty,Object> adminProperties) throws ADSContextException {  AddRequest request=newAddRequest(getAdministratorDN(getAdministratorUID(adminProperties)));  addAttrsFromAdministratorProperties(request,adminProperties,true);  try {    throwIfNotSuccess(connectionWrapper.getConnection().add(request));  } catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  LdapException x) {    if (x.getResult().getResultCode().equals(ResultCode.ENTRY_ALREADY_EXISTS)) {      throw new ADSContextException(ErrorType.ALREADY_REGISTERED);    }    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,ClassLoader[] cls,boolean terminate){  super(owner,channel,timeout,mapContextName,AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,terminate);}  }
class C{  public final int peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void load(InputStream input,Class<?> resourceBase) throws ParseException {  if (resourceBase == null) {    throw new IllegalArgumentException("You must supply a valid resource base Class");  }  if (defaultsMap == null) {    defaultsMap=new HashMap<String,Object>();  }  new SynthParser().parse(input,(DefaultSynthStyleFactory)factory,null,resourceBase,defaultsMap);}  }
class C{  public void deleteACI(ACI aci) throws AccessRightsException, UMSException {  Attr attr=new Attr(ACI.ACI,aci.getACIText());  modify(attr,ModificationType.DELETE);  save();}  }
class C{  T childValue(T parentValue){  throw new UnsupportedOperationException();}  }
class C{  public void close(){  dispose(false);}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  @Override public Principal authenticate(String username,String clientDigest,String nonce,String nc,String cnonce,String qop,String realmName,String md5a2){  return authenticate(username,new JAASCallbackHandler(this,username,clientDigest,nonce,nc,cnonce,qop,realmName,md5a2,HttpServletRequest.DIGEST_AUTH));}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_template) {    XPathContext xctxt=transformer.getXPathContext();    VariableStack vars=xctxt.getVarStack();    int thisframe=vars.getStackFrame();    int nextFrame=vars.link(m_template.m_frameSize);    if (m_template.m_inArgsSize > 0) {      vars.clearLocalSlots(0,m_template.m_inArgsSize);      if (null != m_paramElems) {        int currentNode=xctxt.getCurrentNode();        vars.setStackFrame(thisframe);        int size=m_paramElems.length;        for (int i=0; i < size; i++) {          ElemWithParam ewp=m_paramElems[i];          if (ewp.m_index >= 0) {            XObject obj=ewp.getValue(transformer,currentNode);            vars.setLocalVariable(ewp.m_index,obj,nextFrame);          }        }        vars.setStackFrame(nextFrame);      }    }    SourceLocator savedLocator=xctxt.getSAXLocator();    try {      xctxt.setSAXLocator(m_template);      transformer.pushElemTemplateElement(m_template);      m_template.execute(transformer);    }  finally {      transformer.popElemTemplateElement();      xctxt.setSAXLocator(savedLocator);      vars.unlink(thisframe);    }  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_TEMPLATE_NOT_FOUND,new Object[]{m_templateName});  }}  }
class C{  private Promise<ActionResponse,ResourceException> internalHandleAction(String tokenId,Context context,ActionRequest request){  final String action=request.getAction();  final ActionHandler actionHandler=actionHandlers.get(action);  if (actionHandler != null) {    return actionHandler.handle(tokenId,context,request);  } else {    String message=String.format("Action %s not implemented for this resource",action);    NotSupportedException e=new NotSupportedException(message);    if (LOGGER.messageEnabled()) {      LOGGER.message("SessionResource.actionInstance :: " + message,e);    }    return e.asPromise();  }}  }
class C{  boolean searchBaseDNInformation(){  return searchBaseDNInformation;}  }
class C{  public static ScheduleType createCron(String cron){  ScheduleType schedule=new ScheduleType();  schedule.type=Type.LAUNCH_PERIODICALLY;  schedule.cronValue=cron;  schedule.toString=schedule.calculateToString();  schedule.hashCode=schedule.calculateHashCode();  return schedule;}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public Mushroom(Material shroom,BlockFace capFace){  this(shroom,MushroomBlockTexture.getCapByFace(capFace));}  }
class C{  LDAPClientConnection(LDAPConnectionHandler connectionHandler,SocketChannel clientChannel,String protocol) throws DirectoryException {  this.connectionHandler=connectionHandler;  this.clientChannel=clientChannel;  timeoutClientChannel=new TimeoutWriteByteChannel();  opsInProgressLock=new Object();  ldapVersion=3;  lastCompletionTime=new AtomicLong(TimeThread.getTime());  nextOperationID=new AtomicLong(0);  connectionValid=true;  disconnectRequested=false;  operationsInProgress=new ConcurrentHashMap<>();  operationsPerformed=new AtomicLong(0);  keepStats=connectionHandler.keepStats();  this.protocol=protocol;  writeSelector=new AtomicReference<>();  final Socket socket=clientChannel.socket();  clientAddress=socket.getInetAddress().getHostAddress();  clientPort=socket.getPort();  serverAddress=socket.getLocalAddress().getHostAddress();  serverPort=socket.getLocalPort();  statTracker=this.connectionHandler.getStatTracker();  if (keepStats) {    statTracker.updateConnect();    this.useNanoTime=DirectoryServer.getUseNanoTime();  } else {    this.useNanoTime=false;  }  bufferSize=connectionHandler.getBufferSize();  tlsChannel=RedirectingByteChannel.getRedirectingByteChannel(timeoutClientChannel);  saslChannel=RedirectingByteChannel.getRedirectingByteChannel(tlsChannel);  this.asn1Reader=new ASN1ByteChannelReader(saslChannel,bufferSize,connectionHandler.getMaxRequestSize());  if (connectionHandler.useSSL()) {    enableSSL(connectionHandler.getTLSByteChannel(timeoutClientChannel));  }  connectionID=DirectoryServer.newConnectionAccepted(this);}  }
class C{  public ElemTemplateElement appendChildElem(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_ATTRIBUTE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodeattributes.class,args);}  }
class C{  public ArtifactResponse createArtifactResponse(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESPONSE,elem);  if (obj == null) {    return new ArtifactResponseImpl(elem);  } else {    return (ArtifactResponse)obj;  }}  }
class C{  protected AbstractManagedObjectDefinition(String name,AbstractManagedObjectDefinition<? super C,? super S> parent){  this.name=name;  this.parent=parent;  if (parent != null) {    registerInParent();    for (    PropertyDefinition<?> pd : parent.getAllPropertyDefinitions()) {      allPropertyDefinitions.put(pd.getName(),pd);    }    for (    RelationDefinition<?,?> rd : parent.getAllRelationDefinitions()) {      allRelationDefinitions.put(rd.getName(),rd);    }    for (    AggregationPropertyDefinition<?,?> apd : parent.getAllAggregationPropertyDefinitions()) {      allAggregationPropertyDefinitions.put(apd.getName(),apd);    }  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public AssertionError(){}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_DOWN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public Hashtable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  private final Collection findCRLs(X509CRLStoreSelector crlSelect,List crlStores) throws AnnotatedException {  Set crls=new HashSet();  Iterator iter=crlStores.iterator();  AnnotatedException lastException=null;  boolean foundValidStore=false;  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store store=(X509Store)obj;      try {        crls.addAll(store.getMatches(crlSelect));        foundValidStore=true;      } catch (      StoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    } else {      CertStore store=(CertStore)obj;      try {        crls.addAll(store.getCRLs(crlSelect));        foundValidStore=true;      } catch (      CertStoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    }  }  if (!foundValidStore && lastException != null) {    throw lastException;  }  return crls;}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if (Boolean.TRUE.equals(i18nFlag)) {    String kind=elem.getName();    if (kind != null) {      if (kind.equals(AbstractDocument.ContentElementName)) {        return new GlyphView(elem);      } else       if (kind.equals(AbstractDocument.ParagraphElementName)) {        return new I18nFieldView(elem);      }    }  }  return new FieldView(elem);}  }
class C{  public SQLNonTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  try {    Map map=getValues();    String name=(String)map.get(ATTR_NAME);    Set values=(Set)map.get(ATTR_VALUES);    Map mapValues=(Map)getPageSessionAttribute(SessionPropertyConditionHelper.PG_SESSION_PROPERTY_VALUES);    String propertyName=(String)getPageSessionAttribute(PROPERTY_NAME);    boolean okToEdit=true;    if (!name.equals(propertyName)) {      Set check=(Set)mapValues.get(name);      if (check != null) {        okToEdit=false;        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","policy.condition.session.property.name.already.exists.message");        forwardTo();      } else {        mapValues.remove(propertyName);      }    } else {      mapValues.remove(propertyName);    }    if (okToEdit) {      mapValues.put(name,values);      forwardToCallingViewBean();    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public void startAnimation(){  resetAnimation();}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void sendSearchEntry(SearchResultEntry searchEntry) throws DirectoryException {  addSearchEntry(searchEntry);}  }
class C{  public static String encryptWithAsymmetricKey(String data,String encryptionAlgorithm,int encryptionStrength,Key encKey) throws Exception {  try {    KeyGenerator keygen=KeyGenerator.getInstance(encryptionAlgorithm);    if (encryptionStrength != 0) {      keygen.init(encryptionStrength);    }    SecretKey sKey=keygen.generateKey();    Cipher cipher=Cipher.getInstance(encryptionAlgorithm);    cipher.init(Cipher.ENCRYPT_MODE,sKey);    byte[] encData=cipher.doFinal(data.getBytes("UTF-8"));    cipher=Cipher.getInstance(encKey.getAlgorithm());    cipher.init(Cipher.WRAP_MODE,encKey);    byte[] keyWrap=cipher.wrap(sKey);    byte[] encDataPad=wrapKeyWithEncryptedData(encData,keyWrap);    return Base64.encode(encDataPad);  } catch (  NoSuchAlgorithmException nse) {    throw new Exception(nse.getMessage());  }catch (  NoSuchPaddingException npe) {    throw new Exception(npe.getMessage());  }catch (  InvalidKeyException ike) {    throw new Exception(ike.getMessage());  }catch (  UnsupportedEncodingException uae) {    throw new Exception(uae.getMessage());  }}  }
class C{  private Attribute createAttribute(AttributeType type,String name,String[] options,String[] values){  AttributeBuilder builder=new AttributeBuilder(type,name);  builder.setOptions(Arrays.asList(options));  builder.addAllStrings(Arrays.asList(values));  return builder.toAttribute();}  }
class C{  public void destroy(){  Iterator<JspServletWrapper> servlets=jsps.values().iterator();  while (servlets.hasNext()) {    servlets.next().destroy();  }}  }
class C{  public CallParamRule(int paramIndex,String attributeName){  this(attributeName,paramIndex,0,false);}  }
class C{  public boolean hasNameValue(String name){  return this.containsKey(name.toLowerCase());}  }
class C{  public XMPException(String message,int errorCode){  super(message);  this.errorCode=errorCode;}  }
class C{  public synchronized boolean addPeer(JsonRpcPeer peer){  if (mReceivingPeers.containsKey(peer)) {    return false;  }  DisconnectReceiver disconnectReceiver=new UnregisterOnDisconnect(peer);  peer.registerDisconnectReceiver(disconnectReceiver);  mReceivingPeers.put(peer,disconnectReceiver);  mReceivingPeersSnapshot=null;  if (mListener != null) {    mListener.onPeerRegistered(peer);  }  return true;}  }
class C{  @Inject public ForeignSessionHandler(@Named(org.forgerock.openam.session.SessionConstants.SESSION_DEBUG) final Debug debug,final SessionServerConfig serverConfig,final SessionCookies sessionCookies,final ServicesClusterMonitorHandler servicesClusterMonitorHandler){  this.debug=debug;  this.serverConfig=serverConfig;  this.sessionCookies=sessionCookies;  this.servicesClusterMonitorHandler=servicesClusterMonitorHandler;}  }
class C{  public int count(){  return class_list.size();}  }
class C{  private void validateDnsName(String dnsName) throws PolicyException {  int starIndex=dnsName.indexOf("*");  if ((starIndex >= 0) && !dnsName.equals("*")) {    if ((starIndex > 0) || ((starIndex == 0) && ((dnsName.indexOf("*",1) != -1) || (dnsName.charAt(1) != '.')))) {      String args[]={DNS_NAME,dnsName};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }  }}  }
class C{  public AMSearchResults search(SSOToken token,String entryDN,String searchFilter,SearchControl searchControl,String attrNames[]) throws AMException {  AMSearchResults amResults=null;  try {    SortKey[] skeys=searchControl.getSortKeys();    SortKey skey=null;    if (skeys != null && skeys.length > 0 && skeys[0].attributeName != null) {      skey=skeys[0];    }    String userLocale=CommonUtils.getUserLocale(token);    if (debug.messageEnabled()) {      debug.message("DirectoryServicesImpl.search() search with " + "searchcontrol locale = " + userLocale);    }    Collator collator=Collator.getInstance(Locale.getLocale(userLocale));    SearchControl sc;    if (skey != null) {      sc=new SearchControl();      sc.setMaxResults(searchControl.getMaxResults());      sc.setSearchScope(searchControl.getSearchScope());      sc.setTimeOut(searchControl.getTimeOut());    } else {      sc=searchControl;    }    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));    SearchResults results;    if (attrNames == null) {      if (skey == null) {        results=po.search(searchFilter,sc);      } else {        String[] tmpAttrNames={skey.attributeName};        results=po.search(searchFilter,tmpAttrNames,sc);      }    } else {      if (skey == null) {        results=po.search(searchFilter,attrNames,sc);      } else {        String[] tmpAttrNames=new String[attrNames.length + 1];        System.arraycopy(attrNames,0,tmpAttrNames,0,attrNames.length);        tmpAttrNames[attrNames.length]=skey.attributeName;        results=po.search(searchFilter,tmpAttrNames,sc);      }    }    amResults=getSearchResults(results,skey,attrNames,collator,sc.isGetAllReturnAttributesEnabled());  } catch (  UMSException ue) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.search() with search " + "control entryDN: " + entryDN + " Search Filter: "+ searchFilter+ " Error occurred: ",ue);    }    processInternalException(token,ue,"341");  }  return amResults;}  }
class C{  @Override public void close() throws IOException {  if (writer == null) {    encoding=defaultEncoding;    writer=new OutputStreamWriter(out,encoding);    writer.write(xmlPrologWriter.toString());  }  writer.close();}  }
class C{  public SQLRecoverableException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public RequestedAuthnContext createRequestedAuthnContext(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTED_AUTHN_CONTEXT,value);  if (obj == null) {    return new RequestedAuthnContextImpl(value);  } else {    return (RequestedAuthnContext)obj;  }}  }
class C{  public static JPasswordField createPasswordField(int cols){  JPasswordField pf=createPasswordField();  pf.setColumns(cols);  return pf;}  }
class C{  public static boolean isTerminationSuccess(HttpServletRequest request){  String status=request.getParameter(IFSConstants.TERMINATION_STATUS);  if (status == null || status.equalsIgnoreCase(IFSConstants.TERMINATION_SUCCESS)) {    return true;  } else {    return false;  }}  }
class C{  public double screen_to_board(double p_val){  return p_val / scale_factor;}  }
class C{  private AuditService buildAuditService(JsonValue config) throws AuditException {  final JsonValue auditServiceConfig=config.get("config");  final AuditServiceConfiguration auditServiceConfiguration;  if (auditServiceConfig.isNotNull()) {    auditServiceConfiguration=AuditJsonConfig.parseAuditServiceConfiguration(auditServiceConfig);  } else {    auditServiceConfiguration=new AuditServiceConfiguration();  }  AuditServiceBuilder auditServiceBuilder=newAuditService();  auditServiceBuilder.withConfiguration(auditServiceConfiguration);  auditServiceBuilder.withDependencyProvider(new GatewayDependencyProvider(heap));  final ClassLoader classLoader=this.getClass().getClassLoader();  for (  final JsonValue handlerConfig : config.get("event-handlers")) {    try {      registerHandlerToService(handlerConfig,auditServiceBuilder,classLoader);    } catch (    Exception ex) {      logger.error("Unable to register handler defined by config: " + handlerConfig,ex);    }  }  return auditServiceBuilder.build();}  }
class C{  public void _write(OutputStream output){  output.write_float(value);}  }
class C{  public KeyStoreBuilder withKeyStoreType(final KeyStoreType type){  this.type=checkNotNull(type);  return this;}  }
class C{  public NameIDPolicy createNameIDPolicy() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID_POLICY);  if (obj == null) {    return new NameIDPolicyImpl();  } else {    return (NameIDPolicy)obj;  }}  }
class C{  private int calculateIconY(Icon icon){  int iconHeight=icon.getIconHeight();  int textHeight=editingComponent.getFontMetrics(editingComponent.getFont()).getHeight();  int textY=iconHeight / 2 - textHeight / 2;  int totalY=Math.min(0,textY);  int totalHeight=Math.max(iconHeight,textY + textHeight) - totalY;  return getHeight() / 2 - (totalY + (totalHeight / 2));}  }
class C{  public static void removeByUuid(java.lang.String uuid){  getPersistence().removeByUuid(uuid);}  }
class C{  public void actionPerformed(ActionEvent e){  if (width == 0 || height == 0) {    if (component != null) {      TextUI mapper=component.getUI();      try {        Rectangle r=mapper.modelToView(component,dot,dotBias);        if (r != null && r.width != 0 && r.height != 0) {          damage(r);        }      } catch (      BadLocationException ble) {      }    }  }  visible=!visible;  repaint();}  }
class C{  public static String stripFormatting(String text){  return text == null ? null : FORMAT_PATTERN.matcher(text).replaceAll("");}  }
class C{  public void installUI(JComponent c){  list=(JList)c;  layoutOrientation=list.getLayoutOrientation();  rendererPane=new CellRendererPane();  list.add(rendererPane);  columnCount=1;  updateLayoutStateNeeded=modelChanged;  isLeftToRight=list.getComponentOrientation().isLeftToRight();  installDefaults();  installListeners();  installKeyboardActions();}  }
class C{  public String toString(){  return "SearchTemplate: " + getName() + " { "+ m_attrSet+ " }";}  }
class C{  public SHA1PasswordStorageScheme(){  super();}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  private String formatQuoteListToJSON(List<StreamingQuote> quoteList){  String jsonData=null;  ObjectMapper mapper=new ObjectMapper();  try {    jsonData=mapper.writeValueAsString(quoteList);  } catch (  JsonProcessingException e) {    System.out.println("TimeRangeStreamingQuoteActionHandler.formatQuoteListToJSON(): ERROR: JsonProcessingException on quote list !!!");    e.printStackTrace();  }  return jsonData;}  }
class C{  protected void isElementWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Element",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }}  }
class C{  public ResponseProvider removeResponseProvider(String respProvider){  return respProviders.removeResponseProvider(respProvider);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnewchildexists.class,args);}  }
class C{  @Override boolean requiresConnectorConfigurationHelper(JsonValue requestContent){  return true;}  }
class C{  public int hashCode(){  int hash=Float.floatToIntBits(width);  hash=hash * 31 + join;  hash=hash * 31 + cap;  hash=hash * 31 + Float.floatToIntBits(miterlimit);  if (dash != null) {    hash=hash * 31 + Float.floatToIntBits(dash_phase);    for (int i=0; i < dash.length; i++) {      hash=hash * 31 + Float.floatToIntBits(dash[i]);    }  }  return hash;}  }
class C{  public static final Index createTestIndexAllFieldTypes(){  Index index=new Index("myindexallfields");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("thisisauudid",FieldDataType.UUID));  fields.add(new IndexField("thisisastring",FieldDataType.TEXT));  fields.add(new IndexField("thisisanint",FieldDataType.INTEGER));  fields.add(new IndexField("thisisadouble",FieldDataType.DOUBLE));  fields.add(new IndexField("thisisbase64",FieldDataType.BINARY));  fields.add(new IndexField("thisisaboolean",FieldDataType.BOOLEAN));  fields.add(new IndexField("thisisadate",FieldDataType.DATE_TIME));  fields.add(new IndexField("thisisalong",FieldDataType.LONG));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  public org.omg.CosNaming.NameComponent[] to_name(String sn) throws org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("to_name",true);    org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write($out,sn);    $in=_invoke($out);    org.omg.CosNaming.NameComponent $result[]=org.omg.CosNaming.NameHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return to_name(sn);  } finally {    _releaseReply($in);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XNumber xnum=new XNumber((double)getCountOfContextNodeList(xctxt));  return xnum;}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.lang.String certAlias,int kekStrength,java.lang.String providerID) throws EncryptionException {  return encryptAndReplace(doc,element,secretKeyAlg,keyStrength,keyProvider.getPublicKey(certAlias),kekStrength,providerID,false);}  }
class C{  public AuditRequestContext(TransactionId transactionId,Map<String,String> properties){  Reject.ifNull(transactionId,"TransactionId should not be null.");  this.transactionId=transactionId;  this.properties=properties == null ? new HashMap<String,String>() : new HashMap<>(properties);}  }
class C{  public FileWriterWithEncoding(String filename,String encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  private void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (streaming) {    while (byteCount > 0) {      int bytesWritten=IoBridge.sendto(fd,buffer,offset,byteCount,0,null,0);      byteCount-=bytesWritten;      offset+=bytesWritten;    }  } else {    IoBridge.sendto(fd,buffer,offset,byteCount,0,null,port);  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (contentHandler != null) {    contentHandler.endElement(uri,localName,qName);  }}  }
class C{  public SQLDataException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public OpenDJUpgrader(EmbeddedOpenDJBackupManager backupManager,String installRoot,ServletContext servletCtx){  this.backupManager=backupManager;  this.installRoot=installRoot;  this.servletCtx=servletCtx;  this.upgradeMarker=new File(installRoot + "/.upgrade_marker");  this.newVersion=readNewVersion();  OpenDJVersion currentVersion=readCurrentVersion();  if (upgradeMarker.exists() && newVersion.equals(currentVersion)) {    this.currentVersion=readVersionFromFile(upgradeMarker);  } else {    this.currentVersion=currentVersion;  }}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void main(final String[] args){  if (args.length != 4) {    System.err.println("Usage: host port username password");    System.exit(1);  }  final String hostName=args[0];  final int port=Integer.parseInt(args[1]);  final String userName=args[2];  final String password=args[3];  final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(userName,password.toCharArray());    Schema schema=Schema.readSchemaForEntry(connection,DN.rootDN());    System.out.println("Attribute types");    for (    AttributeType at : schema.getAttributeTypes()) {      System.out.println("  " + at.getNameOrOID());    }    System.out.println();    System.out.println("Object classes");    for (    ObjectClass oc : schema.getObjectClasses()) {      System.out.println("  " + oc.getNameOrOID());    }    System.out.println();    System.out.println("Matching rules");    for (    MatchingRule mr : schema.getMatchingRules()) {      System.out.println("  " + mr.getNameOrOID());    }    System.out.println();    System.out.println("Syntaxes");    for (    Syntax s : schema.getSyntaxes()) {      System.out.println("  " + s.getDescription());    }    System.out.println();    System.out.println("WARNINGS");    for (    LocalizableMessage m : schema.getWarnings()) {      System.out.println("  " + m);    }    System.out.println();  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public boolean removeElement(Object obj){synchronized (actions) {    if (allowToChange) {      boolean result=actions.remove(obj);      if (actions.isEmpty()) {        if (headTask != null) {          cancel();        }      }      return result;    }  }  return false;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  boolean evalHostName(String[] remoteHostName,String[] pat){  boolean wildCard="*".equals(pat[0]);  if (pat.length == 1 && wildCard) {    return true;  }  int remoteHnIndex=remoteHostName.length - pat.length;  if (remoteHnIndex < 0) {    return false;  }  int patternIndex=0;  if (!wildCard) {    remoteHnIndex=0;  } else {    patternIndex=1;    remoteHnIndex++;  }  for (int i=remoteHnIndex; i < remoteHostName.length; i++) {    if (!pat[patternIndex++].equalsIgnoreCase(remoteHostName[i])) {      return false;    }  }  return true;}  }
class C{  public boolean isFloat(STypeDef requiredType,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof FloatTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Float",lineCol)));}  }
class C{  public int period(){  return values.period;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node child;  Node lastChild;  String data;  int nodeType;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  child=nameList.item(1);  lastChild=child.getLastChild();  nodeType=(int)lastChild.getNodeType();  assertEquals("isCDATA",4,nodeType);  data=((CharacterData)lastChild).getData();  assertEquals("data","This is an adjacent CDATASection with a reference to a tab &tab;",data);}  }
class C{  public X509CertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.IDTypeElement createIDTypeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.IDTypeElementImpl();}  }
class C{  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {  BigInteger p, q, y;  int n1;  if (publicKey == null || !(publicKey instanceof DSAPublicKey)) {    throw new InvalidKeyException("publicKey is not an instance of DSAPublicKey");  }  DSAParams params=((DSAPublicKey)publicKey).getParams();  p=params.getP();  q=params.getQ();  y=((DSAPublicKey)publicKey).getY();  n1=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n1 < 512 || n1 > 1024 || (n1 & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 || q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (y.signum() != 1) {    throw new InvalidKeyException("y <= 0");  }  dsaKey=(DSAKey)publicKey;  msgDigest.reset();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix07.class,args);}  }
class C{  private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  boolean isActiveCOT(String cotStatus){  return (cotStatus != null && cotStatus.equalsIgnoreCase(COTConstants.ACTIVE));}  }
class C{  private void powerUpFm(){  Log.v(TAG,"start powerUpFm");  refreshImageButton(false);  refreshActionMenuItem(false);  refreshPopupMenuItem(false);  refreshActionMenuPower(false);  startAnimation();  mService.powerUpAsync(FmRadioUtils.computeFrequency(mCurrentStation));  Log.v(TAG,"end powerUpFm");}  }
class C{  public String toString(){  return "(unresolved " + type + " "+ name+ " "+ actions+ ")";}  }
class C{  public static String bytesToHex(ByteBuffer b){  if (b == null) {    return "";  }  int position=b.position();  int limit=b.limit();  int length=limit - position;  if (length == 0) {    return "";  }  StringBuilder buffer=new StringBuilder((length - 1) * 3 + 2);  buffer.append(byteToHex(b.get()));  for (int i=1; i < length; i++) {    buffer.append(" ");    buffer.append(byteToHex(b.get()));  }  b.position(position);  b.limit(limit);  return buffer.toString();}  }
class C{  public TimerNotification(String type,Object source,long sequenceNumber,long timeStamp,String msg,Integer id){  super(type,source,sequenceNumber,timeStamp,msg);  this.notificationID=id;}  }
class C{  public boolean engineCanResolve(Attr uri,String BaseURI){  String uriNodeValue=uri.getNodeValue();  if (uriNodeValue.length() == 0 || uriNodeValue.startsWith("#")) {    return false;  }  try {    URI uriNew=getNewURI(uri.getNodeValue(),BaseURI);    if (uriNew.getScheme().equals("http")) {      return true;    }  } catch (  URISyntaxException ex) {  }  return false;}  }
class C{  public EjbRef(String ejbType,String home,String remote,String link,String factory,String factoryLocation){  super(home,factory,factoryLocation);  StringRefAddr refAddr=null;  if (ejbType != null) {    refAddr=new StringRefAddr(TYPE,ejbType);    add(refAddr);  }  if (remote != null) {    refAddr=new StringRefAddr(REMOTE,remote);    add(refAddr);  }  if (link != null) {    refAddr=new StringRefAddr(LINK,link);    add(refAddr);  }}  }
class C{  public void testZeroZero(){  byte aBytes[]={0};  byte bBytes[]={0};  int aSign=0;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void write(final int c) throws IOException {  if (count >= BYTES_MAX)   flushBuffer();  if (c < 0x80) {    m_outputBytes[count++]=(byte)(c);  } else   if (c < 0x800) {    m_outputBytes[count++]=(byte)(0xc0 + (c >> 6));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else   if (c < 0x10000) {    m_outputBytes[count++]=(byte)(0xe0 + (c >> 12));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else {    m_outputBytes[count++]=(byte)(0xf0 + (c >> 18));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 12) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  public void test_update$BII() throws Exception {  Signature sig=Signature.getInstance("DSA");  byte[] bytes=MESSAGE.getBytes();  try {    sig.update(bytes,0,bytes.length);    fail();  } catch (  SignatureException expected) {  }  sig.initSign(getDsaKeys().getPrivate());  sig.update(bytes,0,bytes.length);  sig.update(bytes,bytes.length - 2,2);  try {    sig.update(bytes,bytes.length - 3,4);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    sig.update(null,0,5);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  private Object[][] buildAciValidationParams(List<String> acis,boolean testMultipleCombos){  List<String[]> paramsList=new ArrayList<>();  for (  String aci : acis) {    List<String> aciLdifs=new ArrayList<>();    aciLdifs.add(TestCaseUtils.makeLdif("dn: " + OU_INNER_DN,"changetype: add","objectclass: organizationalunit","ou: inner",aci));    if (testMultipleCombos) {      String ouLdif=TestCaseUtils.makeLdif("dn: " + OU_INNER_DN,"changetype: add","objectclass: organizationalunit","ou: inner");      aciLdifs.add(ouLdif + TestCaseUtils.makeLdif("dn: " + OU_INNER_DN,"changetype: modify","add: aci",aci));      aciLdifs.add(ouLdif + TestCaseUtils.makeLdif("dn: " + OU_INNER_DN,"changetype: modify","replace: aci",aci));    }    for (    String aciLdif : aciLdifs) {      if (testMultipleCombos) {        paramsList.add(new String[]{DIR_MGR_DN,DIR_MGR_PW,aciLdif});      }      paramsList.add(new String[]{ADMIN_DN,ADMIN_PW,aciLdif});    }  }  return paramsList.toArray(new Object[][]{});}  }
class C{  private Instant plus(long secondsToAdd,long nanosToAdd){  if ((secondsToAdd | nanosToAdd) == 0) {    return this;  }  long epochSec=Math.addExact(seconds,secondsToAdd);  epochSec=Math.addExact(epochSec,nanosToAdd / NANOS_PER_SECOND);  nanosToAdd=nanosToAdd % NANOS_PER_SECOND;  long nanoAdjustment=nanos + nanosToAdd;  return ofEpochSecond(epochSec,nanoAdjustment);}  }
class C{  GenericSQLQueryFilterVisitor(final int searchableLength,SQLBuilder builder){  this.searchableLength=searchableLength;  this.builder=builder;}  }
class C{  public Set createUsers(Map usersMap) throws AMException, SSOException {  Set usersSet=new HashSet();  Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=usersMap.keySet().iterator();  while (iter.hasNext()) {    String userName=(String)iter.next();    String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + userName+ ","+ super.entryDN;    AMUserImpl user=new AMUserImpl(super.token,userDN);    Map userMap=(Map)usersMap.get(userName);    user.setAttributes(userMap);    if (objectClasses != null && !objectClasses.isEmpty()) {      Set existingOC=(Set)userMap.get("objectclass");      if (existingOC != null && !existingOC.isEmpty())       objectClasses.addAll(existingOC);      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  public void testAddForegroundColorSpan(){  mRichTextView.colorSpan(0,5,RichTextView.ColorFormatType.FOREGROUND,Color.BLUE);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof ForegroundColorSpan);  assertTrue(((ForegroundColorSpan)firstSpan).getForegroundColor() == Color.BLUE);}  }
class C{  public ChangeNumberIndexer(ChangelogDB changelogDB,ChangelogStateProvider changelogStateProvider){  this(changelogDB,changelogStateProvider,new ECLEnabledDomainPredicate());}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_predicates) {    for (int i=0; i < m_predicates.length; i++) {      m_predicates[i].fixupVariables(vars,globalsSize);    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.fixupVariables(vars,globalsSize);  }}  }
class C{  protected void postConstruct(Object instance,final Class<?> clazz) throws IllegalAccessException, InvocationTargetException {  if (context == null) {    return;  }  Class<?> superClass=clazz.getSuperclass();  if (superClass != Object.class) {    postConstruct(instance,superClass);  }  AnnotationCacheEntry[] annotations;synchronized (annotationCache) {    annotations=annotationCache.get(clazz);  }  for (  AnnotationCacheEntry entry : annotations) {    if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {      Method postConstruct=getMethod(clazz,entry);synchronized (postConstruct) {        boolean accessibility=postConstruct.isAccessible();        postConstruct.setAccessible(true);        postConstruct.invoke(instance);        postConstruct.setAccessible(accessibility);      }    }  }}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (getCause() != null) {    getCause().printStackTrace(s);    s.println("--------------- linked to ------------------");  }  super.printStackTrace(s);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RelativeToType createRelativeToType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RelativeToTypeImpl();}  }
class C{  public String toString(){  StringBuilder bindRule=new StringBuilder();  return bindRule.toString();}  }
class C{  private int readEncryptedData(final ByteBuffer dst,final int pending){  if (dst.isDirect() && dst.remaining() >= pending) {    final int pos=dst.position();    final long addr=Buffer.address(dst) + pos;    final int bioRead=SSL.readFromBIO(networkBIO,addr,pending);    if (bioRead > 0) {      dst.position(pos + bioRead);      return bioRead;    }  } else {    final ByteBuffer buf=ByteBuffer.allocateDirect(pending);    try {      final long addr=memoryAddress(buf);      final int bioRead=SSL.readFromBIO(networkBIO,addr,pending);      if (bioRead > 0) {        buf.limit(bioRead);        int oldLimit=dst.limit();        dst.limit(dst.position() + bioRead);        dst.put(buf);        dst.limit(oldLimit);        return bioRead;      }    }  finally {      buf.clear();      ByteBufferUtils.cleanDirectBuffer(buf);    }  }  return 0;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.EmbeddedType createEmbeddedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.EmbeddedTypeImpl();}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public static DecodeException error(final LocalizableMessage message){  return new DecodeException(message,false,null);}  }
class C{  @Override public Foo[] findByUuid_C_PrevAndNext(long fooId,String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  private boolean matchLocation(CodeSource that){  if (location == null)   return true;  if ((that == null) || (that.location == null))   return false;  if (location.equals(that.location))   return true;  if (!location.getProtocol().equalsIgnoreCase(that.location.getProtocol()))   return false;  int thisPort=location.getPort();  if (thisPort != -1) {    int thatPort=that.location.getPort();    int port=thatPort != -1 ? thatPort : that.location.getDefaultPort();    if (thisPort != port)     return false;  }  if (location.getFile().endsWith("/-")) {    String thisPath=location.getFile().substring(0,location.getFile().length() - 1);    if (!that.location.getFile().startsWith(thisPath))     return false;  } else   if (location.getFile().endsWith("/*")) {    int last=that.location.getFile().lastIndexOf('/');    if (last == -1)     return false;    String thisPath=location.getFile().substring(0,location.getFile().length() - 1);    String thatPath=that.location.getFile().substring(0,last + 1);    if (!thatPath.equals(thisPath))     return false;  } else {    if ((!that.location.getFile().equals(location.getFile())) && (!that.location.getFile().equals(location.getFile() + "/"))) {      return false;    }  }  if (location.getRef() != null && !location.getRef().equals(that.location.getRef())) {    return false;  }  String thisHost=location.getHost();  String thatHost=that.location.getHost();  if (thisHost != null) {    if (("".equals(thisHost) || "localhost".equals(thisHost)) && ("".equals(thatHost) || "localhost".equals(thatHost))) {    } else     if (!thisHost.equals(thatHost)) {      if (thatHost == null) {        return false;      }      if (this.sp == null) {        this.sp=new SocketPermission(thisHost,"resolve");      }      if (that.sp == null) {        that.sp=new SocketPermission(thatHost,"resolve");      }      if (!this.sp.implies(that.sp)) {        return false;      }    }  }  return true;}  }
class C{  public static void disable(){}  }
class C{  private void writeObject(java.io.ObjectOutputStream p_stream) throws java.io.IOException {  p_stream.defaultWriteObject();  p_stream.writeInt(trace_angle_restriction.get_no());}  }
class C{  public boolean hasAccessType(EnumAccessType accessType){  return body.hasAccessType(accessType);}  }
class C{  public static SAMLEntityInfo from(final String realm,final String entityID,final String role){  return new SAMLEntityInfo(realm,entityID,role);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.XPathFilter20Element createXPathFilter20Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.XPathFilter20ElementImpl();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("Cipher.DES");  assertNotNull("No installed providers support Cipher.DES",providers);  for (int i=0; i < providers.length; i++) {    Cipher cipher=Cipher.getInstance("DES",providers[i].getName());    assertNotNull("Cipher.getInstance() returned a null value",cipher);    try {      cipher=Cipher.getInstance("DoBeDoBeDo",providers[i]);      fail();    } catch (    NoSuchAlgorithmException expected) {    }  }  try {    Cipher.getInstance("DES",(String)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Cipher.getInstance("DES","IHaveNotBeenConfigured");    fail();  } catch (  NoSuchProviderException expected) {  }}  }
class C{  public void enableAnimations(){  mShouldAnimate=true;}  }
class C{  static String createFilter(String providerID){  return FED_INFO_DELIM + providerID + FED_INFO_DELIM;}  }
class C{  public NumberHashMap(String identifier,AbstractTagFrameBody frameBody,int size){  super(identifier,frameBody,size);  if (identifier.equals(DataTypes.OBJ_GENRE)) {    valueToKey=GenreTypes.getInstanceOf().getValueToIdMap();    keyToValue=GenreTypes.getInstanceOf().getIdToValueMap();    hasEmptyValue=true;  } else   if (identifier.equals(DataTypes.OBJ_TEXT_ENCODING)) {    valueToKey=TextEncoding.getInstanceOf().getValueToIdMap();    keyToValue=TextEncoding.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_INTERPOLATION_METHOD)) {    valueToKey=InterpolationTypes.getInstanceOf().getValueToIdMap();    keyToValue=InterpolationTypes.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_PICTURE_TYPE)) {    valueToKey=PictureTypes.getInstanceOf().getValueToIdMap();    keyToValue=PictureTypes.getInstanceOf().getIdToValueMap();    hasEmptyValue=true;  } else   if (identifier.equals(DataTypes.OBJ_TYPE_OF_EVENT)) {    valueToKey=EventTimingTypes.getInstanceOf().getValueToIdMap();    keyToValue=EventTimingTypes.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_TIME_STAMP_FORMAT)) {    valueToKey=EventTimingTimestampTypes.getInstanceOf().getValueToIdMap();    keyToValue=EventTimingTimestampTypes.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_TYPE_OF_CHANNEL)) {    valueToKey=ChannelTypes.getInstanceOf().getValueToIdMap();    keyToValue=ChannelTypes.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_RECIEVED_AS)) {    valueToKey=ReceivedAsTypes.getInstanceOf().getValueToIdMap();    keyToValue=ReceivedAsTypes.getInstanceOf().getIdToValueMap();  } else   if (identifier.equals(DataTypes.OBJ_CONTENT_TYPE)) {    valueToKey=SynchronisedLyricsContentType.getInstanceOf().getValueToIdMap();    keyToValue=SynchronisedLyricsContentType.getInstanceOf().getIdToValueMap();  } else {    throw new IllegalArgumentException("Hashmap identifier not defined in this class: " + identifier);  }}  }
class C{  public LocalBackendModifyDNOperation(ModifyDNOperation operation){  super(operation);  LocalBackendWorkflowElement.attachLocalOperation(operation,this);}  }
class C{  public static boolean isNamingContext(DN dn){  return directoryServer.baseDnRegistry.containsNamingContext(dn);}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private void findSeparator(){  pos=MultipartStream.this.findSeparator();  if (pos == -1) {    if (tail - head > keepRegion) {      pad=keepRegion;    } else {      pad=tail - head;    }  }}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  public SaltedSHA384PasswordStorageSchemeTestCase(){  super("cn=Salted SHA-384,cn=Password Storage Schemes,cn=config");}  }
class C{  public AccountService deleteAllAccounts(Handler<AsyncResult<Void>> resultHandler){  delegate.deleteAllAccounts(resultHandler);  return this;}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep){  return findWordEnd(line,pos,noWordSep,true);}  }
class C{  public static boolean isPrivate(int mod){  return (mod & ACC_PRIVATE) != 0;}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  @Inject public TokenResponseTypeHandler(TokenStore tokenStore){  this.tokenStore=tokenStore;}  }
class C{  protected boolean shouldIndent(){  return m_doIndent && (!m_ispreserve && !m_isprevtext) && m_elemContext.m_currentElemDepth > 0;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  private boolean readBoolean(final InputStream stream,final int bytes) throws IOException {  final byte[] tmp=new byte[bytes];  stream.read(tmp);  boolean result=false;  for (int i=0; i < bytes; i++) {    if (i == bytes - 1) {      result=tmp[i] == 1;      assert tmp[i] == 0 || tmp[i] == 1;    } else {      assert tmp[i] == 0;    }  }  return result;}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {  unexecuteNSDecls(transformer,null);}  }
class C{  static Method findMethod(Class<?> cls,String methodName,int argCount){  return findMethod(cls,methodName,argCount,null);}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributeaftercreate.class,args);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new KrbDelegationPermissionCollection();}  }
class C{  public boolean isCookieDetect(){  return cookieDetect;}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public CryptoManagerException(LocalizableMessage message){  super(message);}  }
class C{  public static void processAssertionIDRequestURI(HttpServletRequest request,HttpServletResponse response,String samlAuthorityEntityID,String role,String realm) throws IOException {  String assertionID=request.getParameter("ID");  if (assertionID == null) {    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"nullAssertionID",SAML2Utils.bundle.getString("nullAssertionID"));    return;  }  AssertionIDRequestMapper aidReqMapper=null;  try {    aidReqMapper=getAssertionIDRequestMapper(realm,samlAuthorityEntityID,role);  } catch (  SAML2Exception ex) {    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedToGetAssertionIDRequestMapper",ex.getMessage());    return;  }  try {    aidReqMapper.authenticateRequesterURI(request,response,samlAuthorityEntityID,role,realm);  } catch (  SAML2Exception ex) {    SAMLUtils.sendError(request,response,HttpServletResponse.SC_FORBIDDEN,"failedToAuthenticateRequesterURI",ex.getMessage());    return;  }  Assertion assertion=(Assertion)IDPCache.assertionByIDCache.get(assertionID);  if ((assertion == null) || (!assertion.isTimeValid())) {    SAMLUtils.sendError(request,response,HttpServletResponse.SC_NOT_FOUND,"invalidAssertionID",SAML2Utils.bundle.getString("invalidAssertionID"));    return;  }  response.setContentType(MIME_TYPE_ASSERTION);  response.addHeader("Cache-Control","no-cache, no-store");  response.addHeader("Pragma","no-cache");  String content=null;  try {    content=assertion.toXMLString(true,true);  } catch (  SAML2Exception ex) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRequestUtil." + "processAssertionIDRequestURI:",ex);    }    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"invalidAssertion",ex.getMessage());    return;  }  byte[] bytes=null;  try {    bytes=content.getBytes("UTF-8");  } catch (  UnsupportedEncodingException ueex) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AssertionIDRequestUtil." + "processAssertionIDRequestURI:",ueex);    }    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"unsupportedEncoding",ueex.getMessage());    return;  }  response.setContentLength(bytes.length);  BufferedOutputStream bos=null;  try {    bos=new BufferedOutputStream(response.getOutputStream());    bos.write(bytes,0,bytes.length);  } catch (  IOException ioex) {    SAML2Utils.debug.error("AssertionIDRequestUtil." + "processAssertionIDRequestURI:",ioex);  } finally {    if (bos != null) {      try {        bos.close();      } catch (      IOException ioex) {        SAML2Utils.debug.error("AssertionIDRequestUtil." + "processAssertionIDRequestURI:",ioex);      }    }  }}  }
class C{  @Override protected void initializeGlobalArguments(Collection<Argument> args,ArgumentGroup argGroup) throws ArgumentException {  for (  Argument arg : args) {    if (arg == advancedArg) {      ArgumentGroup toolOptionsGroup=new ArgumentGroup(INFO_DESCRIPTION_CONFIG_OPTIONS_ARGS.get(),2);      addGlobalArgument(advancedArg,toolOptionsGroup);    } else {      addGlobalArgument(arg,argGroup);    }  }  setFilePropertiesArgument(propertiesFileArg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype04.class,args);}  }
class C{  public int readInt(){  if (remaining() < 4) {    throw new IndexOutOfBoundsException();  }  int v=0;  for (int i=0; i < 4; i++) {    v<<=8;    v|=sequence.byteAt(pos++) & 0xFF;  }  return v;}  }
class C{  void parseTag() throws IOException {  Element elem;  boolean net=false;  boolean warned=false;  boolean unknown=false;switch (ch=readCh()) {case '!':switch (ch=readCh()) {case '-':      while (true) {        if (ch == '-') {          if (!strict || ((ch=readCh()) == '-')) {            ch=readCh();            if (!strict && ch == '-') {              ch=readCh();            }            if (textpos != 0) {              char newtext[]=new char[textpos];              System.arraycopy(text,0,newtext,0,textpos);              handleText(newtext);              lastBlockStartPos=currentBlockStartPos;              textpos=0;            }            parseComment();            last=makeTag(dtd.getElement("comment"),true);            handleComment(getChars(0));            continue;          } else           if (!warned) {            warned=true;            error("invalid.commentchar","-");          }        }        skipSpace();switch (ch) {case '-':          continue;case '>':        ch=readCh();case -1:      return;default :    ch=readCh();  if (!warned) {    warned=true;    error("invalid.commentchar",String.valueOf((char)ch));  }break;}}default :StringBuffer strBuff=new StringBuffer();while (true) {strBuff.append((char)ch);if (parseMarkupDeclarations(strBuff)) {return;}switch (ch) {case '>':ch=readCh();case -1:error("invalid.markup");return;case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;default :ch=readCh();break;}}}case '/':switch (ch=readCh()) {case '>':ch=readCh();case '<':if (recent == null) {error("invalid.shortend");return;}elem=recent;break;default :if (!parseIdentifier(true)) {error("expected.endtagname");return;}skipSpace();switch (ch) {case '>':ch=readCh();case '<':break;default :error("expected","'>'");while ((ch != -1) && (ch != '\n') && (ch != '>')) {ch=readCh();}if (ch == '>') {ch=readCh();}break;}String elemStr=getString(0);if (!dtd.elementExists(elemStr)) {error("end.unrecognized",elemStr);if ((textpos > 0) && (text[textpos - 1] == '\n')) {textpos--;}elem=dtd.getElement("unknown");elem.name=elemStr;unknown=true;} else {elem=dtd.getElement(elemStr);}break;}if (stack == null) {error("end.extra.tag",elem.getName());return;}if ((textpos > 0) && (text[textpos - 1] == '\n')) {if (stack.pre) {if ((textpos > 1) && (text[textpos - 2] != '\n')) {textpos--;}} else {textpos--;}}if (unknown) {TagElement t=makeTag(elem);handleText(t);attributes.addAttribute(HTML.Attribute.ENDTAG,"true");handleEmptyTag(makeTag(elem));unknown=false;return;}if (!strict) {String stackElem=stack.elem.getName();if (stackElem.equals("table")) {if (!elem.getName().equals(stackElem)) {error("tag.ignore",elem.getName());return;}}if (stackElem.equals("tr") || stackElem.equals("td")) {if ((!elem.getName().equals("table")) && (!elem.getName().equals(stackElem))) {error("tag.ignore",elem.getName());return;}}}TagStack sp=stack;while ((sp != null) && (elem != sp.elem)) {sp=sp.next;}if (sp == null) {error("unmatched.endtag",elem.getName());return;}String elemName=elem.getName();if (stack != sp && (elemName.equals("font") || elemName.equals("center"))) {if (elemName.equals("center")) {while (stack.elem.omitEnd() && stack != sp) {endTag(true);}if (stack.elem == elem) {endTag(false);}}return;}while (stack != sp) {endTag(true);}endTag(false);return;case -1:error("eof");return;}if (!parseIdentifier(true)) {elem=recent;if ((ch != '>') || (elem == null)) {error("expected.tagname");return;}} else {String elemStr=getString(0);if (elemStr.equals("image")) {elemStr="img";}if (!dtd.elementExists(elemStr)) {error("tag.unrecognized ",elemStr);elem=dtd.getElement("unknown");elem.name=elemStr;unknown=true;} else {elem=dtd.getElement(elemStr);}}parseAttributeSpecificationList(elem);switch (ch) {case '/':net=true;case '>':ch=readCh();if (ch == '>' && net) {ch=readCh();}case '<':break;default :error("expected","'>'");break;}if (!strict) {if (elem.getName().equals("script")) {error("javascript.unsupported");}}if (!elem.isEmpty()) {if (ch == '\n') {ln++;lfCount++;ch=readCh();} else if (ch == '\r') {ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}}}TagElement tag=makeTag(elem,false);if (!unknown) {legalTagContext(tag);if (!strict && skipTag) {skipTag=false;return;}}startTag(tag);if (!elem.isEmpty()) {switch (elem.getType()) {case CDATA:parseLiteral(false);break;case RCDATA:parseLiteral(true);break;default :if (stack != null) {stack.net=net;}break;}}}  }
class C{  public SQLTimeoutException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void initNamespaces(){  Stack stack;  MappingRecord nn;  nn=new MappingRecord(EMPTYSTRING,EMPTYSTRING,-1);  stack=createPrefixStack(EMPTYSTRING);  stack.push(nn);  nn=new MappingRecord(XML_PREFIX,"http://www.w3.org/XML/1998/namespace",-1);  stack=createPrefixStack(XML_PREFIX);  stack.push(nn);}  }
class C{  public void removeAllElements(){  m_firstFree=0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  @Override public JapaneseDate date(int prolepticYear,int month,int dayOfMonth){  return new JapaneseDate(LocalDate.of(prolepticYear,month,dayOfMonth));}  }
class C{  public void removeElementAt(int index){  delegate.removeElementAt(index);  fireIntervalRemoved(this,index,index);}  }
class C{  public void removeParameter(String name){  uriParms.delete(name);}  }
class C{  public boolean isInherited(){  return type == Type.INHERITED;}  }
class C{  public ProviderNotFoundException(final Class<? extends Provider> providerClass,final String providerName,final String message){  super(message);  this.providerType=providerClass;  this.providerName=providerName;}  }
class C{  public static void enableConsoleLoggingForOpenDJTool(){  enableConsoleLoggingForOpenDJ(Level.FINE,System.out,System.err);}  }
class C{  public static boolean isValidNameStartChar(char c){  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '$' || c == '_';}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyInfoType createKeyInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyInfoTypeImpl();}  }
class C{  public static List<String> runDFS(DirectedGraph<String,DefaultEdge> graph,String start){  DepthFirstIterator<String,DefaultEdge> iterator=new DepthFirstIterator<>(graph,start);  List<String> result=new ArrayList<>();  while (iterator.hasNext()) {    result.add(iterator.next());  }  return result;}  }
class C{  public JsonPolicy(Privilege privilege) throws EntitlementException {  Reject.ifNull(privilege);  this.privilege=privilege;  if (privilege.getEntitlement() == null) {    privilege.setEntitlement(new Entitlement());  }}  }
class C{  public boolean isBorderOpaque(){  return true;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public void endMonitoringOf(final InetAddress inetAddress,final int inode){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4AddressAndInode(inetAddress,inode));}  }
class C{  public boolean isNodeAncestor(TreeNode anotherNode){  if (anotherNode == null) {    return false;  }  TreeNode ancestor=this;  do {    if (ancestor == anotherNode) {      return true;    }  } while ((ancestor=ancestor.getParent()) != null);  return false;}  }
class C{  private void addMapping(FHTreeStateNode node){  treePathMapping.put(node.getTreePath(),node);}  }
class C{  public void addRow(final Vector rowData){  insertRow(getRowCount(),rowData);}  }
class C{  @Override public <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQuery(dynamicQuery);}  }
class C{  public void testCase19(){  byte aBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static IOFileFilter sizeRangeFileFilter(long minSizeInclusive,long maxSizeInclusive){  IOFileFilter minimumFilter=new SizeFileFilter(minSizeInclusive,true);  IOFileFilter maximumFilter=new SizeFileFilter(maxSizeInclusive + 1L,false);  return new AndFileFilter(minimumFilter,maximumFilter);}  }
class C{  @Override public Foo fetchByPrimaryKey(Serializable primaryKey){  Serializable serializable=entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);  if (serializable == nullModel) {    return null;  }  Foo foo=(Foo)serializable;  if (foo == null) {    Session session=null;    try {      session=openSession();      foo=(Foo)session.get(FooImpl.class,primaryKey);      if (foo != null) {        cacheResult(foo);      } else {        entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey,nullModel);      }    } catch (    Exception e) {      entityCache.removeResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);      throw processException(e);    } finally {      closeSession(session);    }  }  return foo;}  }
class C{  private boolean cacheComplete(){  final boolean complete;  if (m_cache != null) {    complete=m_cache.isComplete();  } else {    complete=false;  }  return complete;}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public void testAlgorithmParameterGenerator12(){  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps=null;  AlgorithmParameterGenerator[] apgs=createAPGen();  assertNotNull("AlgorithmParameterGenerator objects were not created",apgs);  for (int i=0; i < apgs.length; i++) {    try {      apgs[i].init(aps);      fail("InvalidAlgorithmParameterException expected for null argument.");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      apgs[i].init(aps,random);      fail("InvalidAlgorithmParameterException expected for null argument.");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static void cleanSessionMapPartnerList(String userDN,String currentEntityId,String metaAlias,FSSession session){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("In cleanSessionMapPartnerList for user : " + userDN + "and provider : "+ currentEntityId);  }  FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);  sessionMgr.removeProvider(userDN,currentEntityId,session);}  }
class C{  static int printErrorMessage(final ConsoleApplication app,final LdapException ere){  if (ere.getResult().getResultCode().intValue() >= 0) {    app.errPrintln(ERR_TOOL_RESULT_CODE.get(ere.getResult().getResultCode().intValue(),ere.getResult().getResultCode().toString()));  }  if (ere.getResult().getDiagnosticMessage() != null && ere.getResult().getDiagnosticMessage().length() > 0) {    app.errPrintln(ERR_TOOL_ERROR_MESSAGE.get(ere.getResult().getDiagnosticMessage()));  }  if (ere.getResult().getMatchedDN() != null && ere.getResult().getMatchedDN().length() > 0) {    app.errPrintln(ERR_TOOL_MATCHED_DN.get(ere.getResult().getMatchedDN()));  }  if (app.isVerbose() && ere.getResult().getCause() != null) {    ere.getResult().getCause().printStackTrace(app.getErrorStream());  }  return ere.getResult().getResultCode().intValue();}  }
class C{  private void deleteRecord(Record recordToDelete) throws RecordException {  if (recordToDelete == currentRecord) {    debug.message("We are recording this issue, so we stop recording it first.");    stopRecording();  }  try {    delete(recordToDelete.getFolderPath());  } catch (  IOException e) {    debug.error("Issue '{}' can't be delete due to an IO issue.",recordToDelete,e);    throw new RecordException("Issue '" + recordToDelete.getRecordProperties().getIssueID() + "' can't be "+ "delete due to an IO issue.",e);  }}  }
class C{  public void testDoubleValuePositiveInfinity2(){  String a="2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == Double.POSITIVE_INFINITY);}  }
class C{  protected void sendErrorUsingBestMatchContentType(Object exchange,String errorMessage,Integer statusCode) throws Throwable {  if (statusCode == null) {    statusCode=HttpStatus.SC_INTERNAL_SERVER_ERROR;  }  ContentTypeDefaults type=getResponseContentTypeToUse(exchange);  if (type == ContentTypeDefaults.JSON) {    errorMessage=getInternalErrorJsonContent(errorMessage);    getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.JSON.getMainVariationWithUtf8Charset()));  } else   if (type == ContentTypeDefaults.XML) {    errorMessage=getInternalErrorXmlContent(errorMessage);    getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.XML.getMainVariationWithUtf8Charset()));  } else   if (type == ContentTypeDefaults.HTML) {    errorMessage=getInternalErrorHtmlContent(errorMessage);    getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.HTML.getMainVariationWithUtf8Charset()));  } else   if (type == ContentTypeDefaults.TEXT) {    errorMessage=getInternalErrorTextContent(errorMessage);    getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.TEXT.getMainVariationWithUtf8Charset()));  } else {    throw new RuntimeException("Not implemented : " + type);  }  byte[] errorMessageBytes=errorMessage.getBytes(getDefaultExceptionHandlingCharset());  getServer().setResponseStatusCode(exchange,statusCode);  getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_LENGTH,Arrays.asList("" + errorMessageBytes.length));  getServer().flushBytes(exchange,errorMessageBytes,true);}  }
class C{  protected String paramString(){  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  return super.paramString() + ",margin=" + marginString+ ",paintBorder="+ paintBorderString;}  }
class C{  private void closeOpenHolder(SwipeOpenViewHolder holder){  final View swipeView=holder.getSwipeView();  final float translationX=ViewCompat.getTranslationX(swipeView);  final float translationY=ViewCompat.getTranslationY(swipeView);  final RecoverAnimation rv=new RecoverAnimation(holder,0,translationX,translationY,0,0);  final long duration=callback.getAnimationDuration(recyclerView,ANIMATION_TYPE_SWIPE,translationX,translationY);  rv.setDuration(duration);  recoverAnimations.add(rv);  rv.start();  openedPositions.remove(holder.getViewHolder().getAdapterPosition());}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public JTabbedPane(int tabPlacement){  this(tabPlacement,WRAP_TAB_LAYOUT);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  String strong;  Attr setAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("class");  setAttr=testEmployee.setAttributeNode(newAttribute);  strong=testEmployee.getAttribute("class");  assertEquals("replacedValue","",strong);}  }
class C{  public ValidValues(int errorCode,Set results){  searchResults=results;  this.errorCode=errorCode;}  }
class C{  private NodeSequence(DTMManager dtmMgr){  super(new NodeVector());  m_last=0;  m_dtmMgr=dtmMgr;}  }
class C{  public void stopServer(ServerHandler sHandler,boolean shutdown){  if (logger.isTraceEnabled()) {    debug("stopServer() on the server handler " + sHandler);  }  if (!sHandler.engageShutdown()) {    if (!shutdown) {      try {        lock();      } catch (      InterruptedException ex) {        Thread.currentThread().interrupt();        return;      }    }    try {      if ((connectedDSs.size() + connectedRSs.size()) == 1) {        if (logger.isTraceEnabled()) {          debug("remote server " + sHandler + " is the last RS/DS to be stopped:"+ " stopping monitoring publisher");        }        stopMonitoringPublisher();      }      if (connectedRSs.containsKey(sHandler.getServerId())) {        unregisterServerHandler(sHandler,shutdown,false);      } else       if (connectedDSs.containsKey(sHandler.getServerId())) {        unregisterServerHandler(sHandler,shutdown,true);      }    } catch (    Exception e) {      logger.error(LocalizableMessage.raw(stackTraceToSingleLineString(e)));    } finally {      if (!shutdown) {        release();      }    }  }}  }
class C{  @Override public PlaPointFloat corner_approx(int p_no){  if (lines_size() == 0)   return null;  if (p_no < 0) {    System.out.println("Simplex.corner_approx: p_no is < 0");    p_no=0;  } else   if (p_no >= lines_size()) {    System.out.println("Simplex.corner_approx: p_no must be less than arr.length - 1");    p_no=lines_size() - 1;  }  if (precalc_corners_float == null)   precalc_corners_float=new PlaPointFloat[lines_size()];  if (precalc_corners_float[p_no] != null)   return precalc_corners_float[p_no];  PlaLineInt prev=tline_get(get_prev_index(p_no));  precalc_corners_float[p_no]=tline_get(p_no).intersection_approx(prev);  return precalc_corners_float[p_no];}  }
class C{  protected static void copyBytes(byte[] b,int dest,int src,int len){  for (int pos=0; pos < len; pos++) {    b[pos + dest]=b[pos + src];  }}  }
class C{  public void draw(Graphics p_graphics,GdiContext p_graphics_context){  if (p_graphics_context == null)   return;  for (int curr_priority=GdiDrawable.MIN_DRAW_PRIORITY; curr_priority <= GdiDrawable.MIDDLE_DRAW_PRIORITY; ++curr_priority) {    Iterator<UndoObjectNode> iter=undo_items.start_read_object();    for (; ; ) {      try {        BrdItem curr_item=(BrdItem)undo_items.read_next(iter);        if (curr_item == null)         break;        if (curr_item.get_draw_priority() != curr_priority)         continue;        curr_item.draw(p_graphics,p_graphics_context);      } catch (      ConcurrentModificationException exc) {        return;      }    }  }}  }
class C{  EnumEvalResult evaluate(InetAddress addr){  EnumEvalResult matched=EnumEvalResult.FALSE;  Iterator<PatternIP> it=patternIPList.iterator();  for (; it.hasNext() && matched != EnumEvalResult.TRUE && matched != EnumEvalResult.ERR; ) {    PatternIP patternIP=it.next();    matched=patternIP.evaluate(addr);  }  return matched.getRet(type,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatetextnode2.class,args);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  BufferedSink writer=Okio.buffer(fileSystem.sink(journalFileTmp));  try {    writer.writeUtf8(MAGIC).writeByte('\n');    writer.writeUtf8(VERSION_1).writeByte('\n');    writer.writeDecimalLong(appVersion).writeByte('\n');    writer.writeDecimalLong(valueCount).writeByte('\n');    writer.writeByte('\n');    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.writeUtf8(DIRTY).writeByte(' ');        writer.writeUtf8(entry.key);        writer.writeByte('\n');      } else {        writer.writeUtf8(CLEAN).writeByte(' ');        writer.writeUtf8(entry.key);        entry.writeLengths(writer);        writer.writeByte('\n');      }    }  }  finally {    writer.close();  }  if (fileSystem.exists(journalFile)) {    fileSystem.rename(journalFile,journalFileBackup);  }  fileSystem.rename(journalFileTmp,journalFile);  fileSystem.delete(journalFileBackup);  journalWriter=newJournalWriter();  hasJournalErrors=false;}  }
class C{  private void updateDNValue(){  String attr=(String)namingAttribute.getSelectedItem();  for (int i=0; i < NAMING_ATTRIBUTE_TEXTFIELDS.length; i++) {    if (attr.equalsIgnoreCase(NAMING_ATTRIBUTES[i])) {      String value=NAMING_ATTRIBUTE_TEXTFIELDS[i].getText().trim();      dn.setText(attr + "=" + value+ ","+ parentNode.getDN());      break;    }  }}  }
class C{  public void add(SDPField h){  sdpFields.add(h);}  }
class C{  @DataProvider(name="createIsChildOfTestData") public Object[][] createIsChildOfTestData(){  return new Object[][]{{"","",false},{"","dc=org",false},{"","dc=opendj,dc=org",false},{"","dc=foo,dc=opendj,dc=org",false},{"dc=org","",true},{"dc=org","dc=org",false},{"dc=org","dc=opendj,dc=org",false},{"dc=org","dc=foo,dc=opendj,dc=org",false},{"dc=opendj,dc=org","",false},{"dc=opendj,dc=org","dc=org",true},{"dc=opendj,dc=org","dc=opendj,dc=org",false},{"dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",false},{"dc=foo,dc=opendj,dc=org","",false},{"dc=foo,dc=opendj,dc=org","dc=org",false},{"dc=foo,dc=opendj,dc=org","dc=opendj,dc=org",true},{"dc=foo,dc=opendj,dc=org","dc=foo,dc=opendj,dc=org",false},{"dc=org","dc=com",false},{"dc=opendj,dc=org","dc=foo,dc=org",false},{"dc=opendj,dc=org","dc=opendj,dc=com",false}};}  }
class C{  public XMLString xstr(){  if (null == m_xmlStr)   m_xmlStr=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot);  return m_xmlStr;}  }
class C{  public void removeAttributeName(String attributeName){  if (attributeName != null && m_attrSet != null) {    m_attrSet.remove(attributeName);  }}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttribute attribute){  super(attribute,PrintRequestAttribute.class);}  }
class C{  protected void init(){  Digester contextDigester=createContextDigester();  contextDigester.getParser();  if (log.isDebugEnabled()) {    log.debug(sm.getString("contextConfig.init"));  }  context.setConfigured(false);  ok=true;  contextConfig(contextDigester);}  }
class C{  public final void reset(){  m_lastChunk=0;  m_firstFree=0;  FastStringBuffer innermost=this;  while (innermost.m_innerFSB != null) {    innermost=innermost.m_innerFSB;  }  m_chunkBits=innermost.m_chunkBits;  m_chunkSize=innermost.m_chunkSize;  m_chunkMask=innermost.m_chunkMask;  m_innerFSB=null;  m_array=new char[16][0];  m_array[0]=new char[m_chunkSize];}  }
class C{  public void nodeChanged(TreeNode node){  if (listenerList != null && node != null) {    TreeNode parent=node.getParent();    if (parent != null) {      int anIndex=parent.getIndex(node);      if (anIndex != -1) {        int[] cIndexs=new int[1];        cIndexs[0]=anIndex;        nodesChanged(parent,cIndexs);      }    } else     if (node == getRoot()) {      nodesChanged(node,null);    }  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private Object readResolve(){  return object;}  }
class C{  public ContentModelState advance(Object token){switch (model.type) {case '+':    if (model.first(token)) {      return new ContentModelState(model.content,new ContentModelState(model,next,value + 1)).advance(token);    }  if (value != 0) {    if (next != null) {      return next.advance(token);    } else {      return null;    }  }break;case '*':if (model.first(token)) {return new ContentModelState(model.content,this).advance(token);}if (next != null) {return next.advance(token);} else {return null;}case '?':if (model.first(token)) {return new ContentModelState(model.content,next).advance(token);}if (next != null) {return next.advance(token);} else {return null;}case '|':for (ContentModel m=(ContentModel)model.content; m != null; m=m.next) {if (m.first(token)) {return new ContentModelState(m,next).advance(token);}}break;case ',':{ContentModel m=(ContentModel)model.content;for (int i=0; i < value; i++, m=m.next) ;if (m.first(token) || m.empty()) {if (m.next == null) {return new ContentModelState(m,next).advance(token);} else {return new ContentModelState(m,new ContentModelState(model,next,value + 1)).advance(token);}}break;}case '&':{ContentModel m=(ContentModel)model.content;boolean complete=true;for (int i=0; m != null; i++, m=m.next) {if ((value & (1L << i)) == 0) {if (m.first(token)) {return new ContentModelState(m,new ContentModelState(model,next,value | (1L << i))).advance(token);}if (!m.empty()) {complete=false;}}}if (complete) {if (next != null) {return next.advance(token);} else {return null;}}break;}default :if (model.content == token) {if (next == null && (token instanceof Element) && ((Element)token).content != null) {return new ContentModelState(((Element)token).content);}return next;}}return null;}  }
class C{  public void trimToSize(){  if (_size < 2) {    return;  }  final Object[] array=(Object[])_data;  final int oldCapacity=array.length;  if (_size < oldCapacity) {    modCount++;    _data=Arrays.copyOf(array,_size);  }}  }
class C{  public LogRecord createLogRecord(String messageIDName,String[] dataInfo,Object ssoToken){  LogRecord logRec=null;  LogMessageID logMsgId=hashMessageIDs.get(messageIDName);  if (logMsgId != null) {    logRec=(ssoToken != null) ? new LogRecord(logMsgId.getLogLevel(),formatMessage(dataInfo,logMsgId),ssoToken) : new LogRecord(logMsgId.getLogLevel(),formatMessage(dataInfo,logMsgId));    logRec.addLogInfo(LogConstants.MESSAGE_ID,logMsgId.getPrefix() + "-" + logMsgId.getID());  } else {    Debug.error("LogMessageProviderBase.createLogRecord: " + "unable to locate message ID object for " + messageIDName);  }  return logRec;}  }
class C{  AuthSchemeCondition(Debug debug,EntitlementCoreWrapper coreWrapper,TimeService timeService){  this.debug=debug;  this.coreWrapper=coreWrapper;  this.timeService=timeService;}  }
class C{  @Override public void identityDeleted(String universalId){  try {    AMIdentity identity=getIdentity(universalId);    if (!isAgentIdentity(identity)) {      return;    }    removeApplication(identity.getRealm(),identity.getName());  } catch (  IdRepoException e) {    logger.error("Failed to get identity",e);  }catch (  NotFoundException e) {    logger.error("Failed to get UMA Provider settings",e);  }catch (  ServerException e) {    logger.error("Failed to get UMA Provider settings",e);  }}  }
class C{  public String toString(){  return getIdentifier();}  }
class C{  private Heaplets(){}  }
class C{  public ValidationResult isFileWritable(String filename,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if (isStringValid(filename)) {    File file=new File(filename);    if (file.exists() && file.isFile() && file.canWrite()) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_FILE_READ_WRITE,new Object[]{filename});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_FILE_NOT_READ_WRITE,new Object[]{filename});  }  Debug.log("FileSystemValidator : Is file : " + filename + " writable ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  protected MutableAttributeSet createLargeAttributeSet(AttributeSet a){  return new SimpleAttributeSet(a);}  }
class C{  public int read_int(){  Object curr_ob=next_token();  if (!(curr_ob instanceof Integer)) {    System.out.println("Logfile.read_int: Integer expected");    pending_token=curr_ob;    return -1;  }  return (((Integer)curr_ob).intValue());}  }
class C{  @Override public Foo findByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_Last(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public Tree(){  this(DEFAULT_TYPE,DEFAULT_SPECIES,DEFAULT_DIRECTION);}  }
class C{  public boolean export_eagle_session_file(java.io.InputStream p_input_stream,OutputStream p_output_stream){  if (board_is_read_only)   return false;  return SpectraSesToEagle.get_instance(p_input_stream,p_output_stream,r_board);}  }
class C{  private void notify_writers(){  if (writerLocks.size() > 0) {    Object oldest=writerLocks.removeFirst();    ++currentWriters;synchronized (oldest) {      oldest.notify();    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  java.io.OutputStream tempOutputStream=outputStream;  if (outputStream instanceof java.io.ByteArrayOutputStream) {    duplicateContentBuffer=((java.io.ByteArrayOutputStream)outputStream).toByteArray();  }  outputStream=null;  out.defaultWriteObject();  outputStream=tempOutputStream;}  }
class C{  public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public int compareTo(ModelItem anotherItem){  return this.toString().compareTo((anotherItem).toString());}  }
class C{  public ChildState(View v){  child=v;  minorValid=false;  majorValid=false;  childSizeValid=false;  child.setParent(AsyncBoxView.this);}  }
class C{  public void auditLoginSuccess(LoginState loginState){  String realm=getRealmFromState(loginState);  if (eventPublisher.isAuditing(realm,AUTHENTICATION_TOPIC,AM_LOGIN_COMPLETED)) {    String moduleName=null;    String userDN=null;    if (loginState != null) {      moduleName=loginState.getAuthModuleNames();      userDN=loginState.getUserDN();    }    AMAuthenticationAuditEventBuilder builder=eventFactory.authenticationEvent(realm).transactionId(getTransactionIdValue()).component(AUTHENTICATION).eventName(AM_LOGIN_COMPLETED).result(SUCCESSFUL).entry(getAuditEntryDetail(moduleName,loginState)).trackingIds(getTrackingIds(loginState)).userId(userDN == null ? "" : userDN).principal(DNUtils.DNtoName(userDN));    eventPublisher.tryPublish(AUTHENTICATION_TOPIC,builder.toEvent());  }}  }
class C{  private void expand_to_other_layers(MazeListElement p_list_element){  int via_lower_bound=0;  int via_upper_bound=-1;  ExpandDrill curr_drill=(ExpandDrill)p_list_element.door;  int from_layer=curr_drill.first_layer_no + p_list_element.section_no_of_door;  boolean smd_attached_on_component_side=false;  boolean smd_attached_on_solder_side=false;  boolean room_ripped;  if (curr_drill.room_arr[p_list_element.section_no_of_door] instanceof ExpandRoomObstacle) {    if (!art_ctrl.ripup_allowed) {      return;    }    BrdItem curr_obstacle_item=((ExpandRoomObstacle)curr_drill.room_arr[p_list_element.section_no_of_door]).get_item();    if (!(curr_obstacle_item instanceof board.items.BrdAbitVia)) {      return;    }    freert.library.LibPadstack curr_obstacle_padstack=((board.items.BrdAbitVia)curr_obstacle_item).get_padstack();    if (!art_ctrl.via_rule.contains_padstack(curr_obstacle_padstack) || curr_obstacle_item.clearance_idx() != art_ctrl.via_clearance_idx) {      return;    }    via_lower_bound=curr_obstacle_padstack.from_layer();    via_upper_bound=curr_obstacle_padstack.to_layer();    room_ripped=true;  } else {    NetNosList net_no_arr=new NetNosList(art_ctrl.net_no);    room_ripped=false;    int via_lower_limit=Math.max(curr_drill.first_layer_no,art_ctrl.via_lower_bound);    int via_upper_limit=Math.min(curr_drill.last_layer_no,art_ctrl.via_upper_bound);    int curr_layer=from_layer;    for (; ; ) {      ShapeTile curr_room_shape=curr_drill.room_arr[curr_layer - curr_drill.first_layer_no].get_shape();      ShoveDrillResult drill_result=r_board.shove_via_algo.check_layer(art_ctrl.via_radius_arr[curr_layer],art_ctrl.via_clearance_idx,art_ctrl.attach_smd_allowed,curr_room_shape,curr_drill.location,curr_layer,net_no_arr,art_ctrl.max_shove_trace_recursion_depth,0);      if (drill_result == ShoveDrillResult.NOT_DRILLABLE) {        via_lower_bound=curr_layer + 1;        break;      } else       if (drill_result == ShoveDrillResult.DRILLABLE_WITH_ATTACH_SMD) {        if (curr_layer == 0) {          smd_attached_on_component_side=true;        } else         if (curr_layer == art_ctrl.layer_count - 1) {          smd_attached_on_solder_side=true;        }      }      if (curr_layer <= via_lower_limit) {        via_lower_bound=via_lower_limit;        break;      }      --curr_layer;    }    if (via_lower_bound > curr_drill.first_layer_no) {      return;    }    curr_layer=from_layer + 1;    for (; ; ) {      if (curr_layer > via_upper_limit) {        via_upper_bound=via_upper_limit;        break;      }      ShapeTile curr_room_shape=curr_drill.room_arr[curr_layer - curr_drill.first_layer_no].get_shape();      ShoveDrillResult drill_result=r_board.shove_via_algo.check_layer(art_ctrl.via_radius_arr[curr_layer],art_ctrl.via_clearance_idx,art_ctrl.attach_smd_allowed,curr_room_shape,curr_drill.location,curr_layer,net_no_arr,art_ctrl.max_shove_trace_recursion_depth,0);      if (drill_result == ShoveDrillResult.NOT_DRILLABLE) {        via_upper_bound=curr_layer - 1;        break;      } else       if (drill_result == ShoveDrillResult.DRILLABLE_WITH_ATTACH_SMD) {        if (curr_layer == art_ctrl.layer_count - 1) {          smd_attached_on_solder_side=true;        }      }      ++curr_layer;    }    if (via_upper_bound < curr_drill.last_layer_no) {      return;    }  }  for (int to_layer=via_lower_bound; to_layer <= via_upper_bound; ++to_layer) {    if (to_layer == from_layer)     continue;    int curr_first_layer;    int curr_last_layer;    if (to_layer < from_layer) {      curr_first_layer=to_layer;      curr_last_layer=from_layer;    } else {      curr_first_layer=from_layer;      curr_last_layer=to_layer;    }    boolean mask_found=false;    for (int i=0; i < art_ctrl.via_info_arr.length; ++i) {      ArtViaMask curr_via_info=art_ctrl.via_info_arr[i];      if (curr_first_layer >= curr_via_info.from_layer && curr_last_layer <= curr_via_info.to_layer && curr_via_info.from_layer >= via_lower_bound && curr_via_info.to_layer <= via_upper_bound) {        boolean mask_ok=true;        if (curr_via_info.from_layer == 0 && smd_attached_on_component_side || curr_via_info.to_layer == art_ctrl.layer_count - 1 && smd_attached_on_solder_side) {          mask_ok=curr_via_info.attach_smd_allowed;        }        if (mask_ok) {          mask_found=true;          break;        }      }    }    if (!mask_found)     continue;    MazeSearchElement curr_drill_layer_info=curr_drill.get_maze_search_element(to_layer - curr_drill.first_layer_no);    if (curr_drill_layer_info.is_occupied)     continue;    double expansion_value=p_list_element.expansion_value + art_ctrl.add_via_costs[from_layer].to_layer[to_layer];    PlaPointFloat shape_entry_middle=p_list_element.shape_entry.point_a.middle_point(p_list_element.shape_entry.point_b);    double sorting_value=expansion_value + destination_distance.calculate(shape_entry_middle,to_layer);    int curr_room_index=to_layer - curr_drill.first_layer_no;    MazeListElement new_element=new MazeListElement(curr_drill,curr_room_index,curr_drill,p_list_element.section_no_of_door,expansion_value,sorting_value,curr_drill.room_arr[curr_room_index],p_list_element.shape_entry,room_ripped,MazeAdjustment.NONE,false);    maze_expansion_list.add(new_element);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVED_DAILY_DETAIL\"";  db.execSQL(sql);}  }
class C{  private static void writeFullyImpl(WritableByteChannel ch,ByteBuffer bb) throws IOException {  while (bb.remaining() > 0) {    int n=ch.write(bb);    if (n <= 0)     throw new RuntimeException("no bytes written");  }}  }
class C{  DeleteMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_DELETE,MSG_TYPE_DELETE_V1);  if (protocolVersion >= 4) {    decodeBody_V4(scanner);  } else {    isSubtreeDelete=true;  }}  }
class C{  public final PlaSide side_of(PlaPoint p_1,PlaPoint p_2){  PlaPointFloat pf_1=p_1.to_float();  PlaPointFloat pf_2=p_2.to_float();  PlaPointFloat my_float=to_float();  PlaPointFloat point_dir=new PlaPointFloat(my_float.v_x - pf_1.v_x,my_float.v_y - pf_1.v_y);  PlaPointFloat line_dir=new PlaPointFloat(pf_2.v_x - pf_1.v_x,pf_2.v_y - pf_1.v_y);  double determinant=MathAux.determinant(point_dir,line_dir);  PlaSide b_risul=PlaSide.get_side_of(determinant);  return b_risul;}  }
class C{  private static boolean createSite(SSOToken ssoToken,String siteName,String siteURL,String siteId,Collection secondaryURLs) throws SMSException, SSOException, ConfigurationException {  boolean created=false;  ServiceConfig sc=getRootSiteConfig(ssoToken);  if (sc != null) {    if (!validateUrl(siteURL)) {      String[] param={siteURL};      throw new ConfigurationException("invalid.site.url",param);    }    Set allURLs=getAllSiteURLs(ssoToken);    if (allURLs.contains(siteURL)) {      String[] param={siteURL};      throw new ConfigurationException("duplicated.site.url",param);    }    if ((secondaryURLs != null) && !secondaryURLs.isEmpty()) {      for (Iterator i=secondaryURLs.iterator(); i.hasNext(); ) {        String url=(String)i.next();        if (allURLs.contains(url)) {          String[] param={url};          throw new ConfigurationException("duplicated.site.url",param);        }        if (!validateUrl(siteURL)) {          String[] param={siteURL};          throw new ConfigurationException("invalid.site.url",param);        }      }    }    sc.addSubConfig(siteName,SUBSCHEMA_SITE,0,Collections.EMPTY_MAP);    ServiceConfig scSite=sc.getSubConfig(siteName);    Map siteValues=new HashMap(2);    Set setSiteId=new HashSet(2);    setSiteId.add(siteId);    siteValues.put(ATTR_PRIMARY_SITE_ID,setSiteId);    Set setSiteURL=new HashSet(2);    setSiteURL.add(siteURL);    siteValues.put(ATTR_PRIMARY_SITE_URL,setSiteURL);    scSite.addSubConfig(SUBCONFIG_ACCESS_URL,SUBCONFIG_ACCESS_URL,0,siteValues);    if ((secondaryURLs != null) && !secondaryURLs.isEmpty()) {      setSiteSecondaryURLs(ssoToken,siteName,secondaryURLs);    }    created=true;  }  return created;}  }
class C{  public void testSetBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=17;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-13,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void flush(){synchronized (this) {    try {      ensureOpen();      out.flush();    } catch (    IOException x) {      trouble=true;    }  }}  }
class C{  public void postRotate(float deltaAngle){  postRotate(deltaAngle,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  public void update(MultiDomainServerState state){  for (  Entry<DN,ServerState> entry : state.list.entrySet()) {    update(entry.getKey(),entry.getValue());  }}  }
class C{  public boolean equals(XObject obj2){  if (this == obj2) {    return true;  }  if (obj2.getType() == XObject.CLASS_NUMBER)   return obj2.equals(this);  String str=obj2.str();  int n=m_length;  if (n == str.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != str.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  @Override public void println() throws IOException {  newLine();}  }
class C{  public SIPResponse createResponse(int statusCode,String reasonPhrase){  SIPResponse newResponse;  newResponse=new SIPResponse();  try {    newResponse.setStatusCode(statusCode);  } catch (  ParseException ex) {    throw new IllegalArgumentException("Bad code " + statusCode);  }  if (reasonPhrase != null)   newResponse.setReasonPhrase(reasonPhrase); else   newResponse.setReasonPhrase(SIPResponse.getReasonPhrase(statusCode));  for (  String headerName : headersToIncludeInResponse) {    SIPHeader nextHeader=headerTable.get(headerName);    if (nextHeader != null) {      if (!(nextHeader instanceof RecordRouteList) || (nextHeader instanceof RecordRouteList && mustCopyRR(statusCode))) {        try {          newResponse.attachHeader((SIPHeader)nextHeader.clone(),false);        } catch (        SIPDuplicateHeaderException e) {          e.printStackTrace();        }      }    }  }  if (MessageFactoryImpl.getDefaultServerHeader() != null) {    newResponse.setHeader(MessageFactoryImpl.getDefaultServerHeader());  }  ServerHeader server=MessageFactoryImpl.getDefaultServerHeader();  if (server != null) {    newResponse.setHeader(server);  }  return newResponse;}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLRequestType.DataType createSASLRequestTypeDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLRequestTypeImpl.DataTypeImpl();}  }
class C{  public void invalidate(){}  }
class C{  public int hashCode(){  return p.hashCode();}  }
class C{  public String toXml(){  StringBuilder sb=new StringBuilder(2048);  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");  if (publicId != null) {    sb.append("<!DOCTYPE web-app PUBLIC\n");    sb.append("  \"");    sb.append(publicId);    sb.append("\"\n");    sb.append("  \"");    if (XmlIdentifiers.WEB_22_PUBLIC.equals(publicId)) {      sb.append(XmlIdentifiers.WEB_22_SYSTEM);    } else {      sb.append(XmlIdentifiers.WEB_23_SYSTEM);    }    sb.append("\">\n");    sb.append("<web-app>");  } else {    String javaeeNamespace=null;    String webXmlSchemaLocation=null;    String version=getVersion();    if ("2.4".equals(version)) {      javaeeNamespace=XmlIdentifiers.JAVAEE_1_4_NS;      webXmlSchemaLocation=XmlIdentifiers.WEB_24_XSD;    } else     if ("2.5".equals(version)) {      javaeeNamespace=XmlIdentifiers.JAVAEE_5_NS;      webXmlSchemaLocation=XmlIdentifiers.WEB_25_XSD;    } else     if ("3.0".equals(version)) {      javaeeNamespace=XmlIdentifiers.JAVAEE_6_NS;      webXmlSchemaLocation=XmlIdentifiers.WEB_30_XSD;    } else     if ("3.1".equals(version)) {      javaeeNamespace=XmlIdentifiers.JAVAEE_7_NS;      webXmlSchemaLocation=XmlIdentifiers.WEB_31_XSD;    }    sb.append("<web-app xmlns=\"");    sb.append(javaeeNamespace);    sb.append("\"\n");    sb.append("         xmlns:xsi=");    sb.append("\"http://www.w3.org/2001/XMLSchema-instance\"\n");    sb.append("         xsi:schemaLocation=\"");    sb.append(javaeeNamespace);    sb.append(" ");    sb.append(webXmlSchemaLocation);    sb.append("\"\n");    sb.append("         version=\"");    sb.append(getVersion());    sb.append("\"");    if ("2.4".equals(version)) {      sb.append(">\n\n");    } else {      sb.append("\n         metadata-complete=\"true\">\n\n");    }  }  appendElement(sb,INDENT2,"display-name",displayName);  if (isDistributable()) {    sb.append("  <distributable/>\n\n");  }  for (  Map.Entry<String,String> entry : contextParams.entrySet()) {    sb.append("  <context-param>\n");    appendElement(sb,INDENT4,"param-name",entry.getKey());    appendElement(sb,INDENT4,"param-value",entry.getValue());    sb.append("  </context-param>\n");  }  sb.append('\n');  if (getMajorVersion() > 2 || getMinorVersion() > 2) {    for (    Map.Entry<String,FilterDef> entry : filters.entrySet()) {      FilterDef filterDef=entry.getValue();      sb.append("  <filter>\n");      appendElement(sb,INDENT4,"description",filterDef.getDescription());      appendElement(sb,INDENT4,"display-name",filterDef.getDisplayName());      appendElement(sb,INDENT4,"filter-name",filterDef.getFilterName());      appendElement(sb,INDENT4,"filter-class",filterDef.getFilterClass());      if (getMajorVersion() != 2) {        appendElement(sb,INDENT4,"async-supported",filterDef.getAsyncSupported());      }      for (      Map.Entry<String,String> param : filterDef.getParameterMap().entrySet()) {        sb.append("    <init-param>\n");        appendElement(sb,INDENT6,"param-name",param.getKey());        appendElement(sb,INDENT6,"param-value",param.getValue());        sb.append("    </init-param>\n");      }      sb.append("  </filter>\n");    }    sb.append('\n');    for (    FilterMap filterMap : filterMaps) {      sb.append("  <filter-mapping>\n");      appendElement(sb,INDENT4,"filter-name",filterMap.getFilterName());      if (filterMap.getMatchAllServletNames()) {        sb.append("    <servlet-name>*</servlet-name>\n");      } else {        for (        String servletName : filterMap.getServletNames()) {          appendElement(sb,INDENT4,"servlet-name",servletName);        }      }      if (filterMap.getMatchAllUrlPatterns()) {        sb.append("    <url-pattern>*</url-pattern>\n");      } else {        for (        String urlPattern : filterMap.getURLPatterns()) {          appendElement(sb,INDENT4,"url-pattern",encodeUrl(urlPattern));        }      }      if (getMajorVersion() > 2 || getMinorVersion() > 3) {        for (        String dispatcher : filterMap.getDispatcherNames()) {          if (getMajorVersion() == 2 && DispatcherType.ASYNC.name().equals(dispatcher)) {            continue;          }          appendElement(sb,INDENT4,"dispatcher",dispatcher);        }      }      sb.append("  </filter-mapping>\n");    }    sb.append('\n');  }  if (getMajorVersion() > 2 || getMinorVersion() > 2) {    for (    String listener : listeners) {      sb.append("  <listener>\n");      appendElement(sb,INDENT4,"listener-class",listener);      sb.append("  </listener>\n");    }    sb.append('\n');  }  for (  Map.Entry<String,ServletDef> entry : servlets.entrySet()) {    ServletDef servletDef=entry.getValue();    sb.append("  <servlet>\n");    appendElement(sb,INDENT4,"description",servletDef.getDescription());    appendElement(sb,INDENT4,"display-name",servletDef.getDisplayName());    appendElement(sb,INDENT4,"servlet-name",entry.getKey());    appendElement(sb,INDENT4,"servlet-class",servletDef.getServletClass());    appendElement(sb,INDENT4,"jsp-file",servletDef.getJspFile());    for (    Map.Entry<String,String> param : servletDef.getParameterMap().entrySet()) {      sb.append("    <init-param>\n");      appendElement(sb,INDENT6,"param-name",param.getKey());      appendElement(sb,INDENT6,"param-value",param.getValue());      sb.append("    </init-param>\n");    }    appendElement(sb,INDENT4,"load-on-startup",servletDef.getLoadOnStartup());    appendElement(sb,INDENT4,"enabled",servletDef.getEnabled());    if (getMajorVersion() != 2) {      appendElement(sb,INDENT4,"async-supported",servletDef.getAsyncSupported());    }    if (getMajorVersion() > 2 || getMinorVersion() > 2) {      if (servletDef.getRunAs() != null) {        sb.append("    <run-as>\n");        appendElement(sb,INDENT6,"role-name",servletDef.getRunAs());        sb.append("    </run-as>\n");      }    }    for (    SecurityRoleRef roleRef : servletDef.getSecurityRoleRefs()) {      sb.append("    <security-role-ref>\n");      appendElement(sb,INDENT6,"role-name",roleRef.getName());      appendElement(sb,INDENT6,"role-link",roleRef.getLink());      sb.append("    </security-role-ref>\n");    }    if (getMajorVersion() != 2) {      MultipartDef multipartDef=servletDef.getMultipartDef();      if (multipartDef != null) {        sb.append("    <multipart-config>\n");        appendElement(sb,INDENT6,"location",multipartDef.getLocation());        appendElement(sb,INDENT6,"max-file-size",multipartDef.getMaxFileSize());        appendElement(sb,INDENT6,"max-request-size",multipartDef.getMaxRequestSize());        appendElement(sb,INDENT6,"file-size-threshold",multipartDef.getFileSizeThreshold());        sb.append("    </multipart-config>\n");      }    }    sb.append("  </servlet>\n");  }  sb.append('\n');  for (  Map.Entry<String,String> entry : servletMappings.entrySet()) {    sb.append("  <servlet-mapping>\n");    appendElement(sb,INDENT4,"servlet-name",entry.getValue());    appendElement(sb,INDENT4,"url-pattern",encodeUrl(entry.getKey()));    sb.append("  </servlet-mapping>\n");  }  sb.append('\n');  if (sessionConfig != null) {    sb.append("  <session-config>\n");    appendElement(sb,INDENT4,"session-timeout",sessionConfig.getSessionTimeout());    if (majorVersion >= 3) {      sb.append("    <cookie-config>\n");      appendElement(sb,INDENT6,"name",sessionConfig.getCookieName());      appendElement(sb,INDENT6,"domain",sessionConfig.getCookieDomain());      appendElement(sb,INDENT6,"path",sessionConfig.getCookiePath());      appendElement(sb,INDENT6,"comment",sessionConfig.getCookieComment());      appendElement(sb,INDENT6,"http-only",sessionConfig.getCookieHttpOnly());      appendElement(sb,INDENT6,"secure",sessionConfig.getCookieSecure());      appendElement(sb,INDENT6,"max-age",sessionConfig.getCookieMaxAge());      sb.append("    </cookie-config>\n");      for (      SessionTrackingMode stm : sessionConfig.getSessionTrackingModes()) {        appendElement(sb,INDENT4,"tracking-mode",stm.name());      }    }    sb.append("  </session-config>\n\n");  }  for (  Map.Entry<String,String> entry : mimeMappings.entrySet()) {    sb.append("  <mime-mapping>\n");    appendElement(sb,INDENT4,"extension",entry.getKey());    appendElement(sb,INDENT4,"mime-type",entry.getValue());    sb.append("  </mime-mapping>\n");  }  sb.append('\n');  if (welcomeFiles.size() > 0) {    sb.append("  <welcome-file-list>\n");    for (    String welcomeFile : welcomeFiles) {      appendElement(sb,INDENT4,"welcome-file",welcomeFile);    }    sb.append("  </welcome-file-list>\n\n");  }  for (  ErrorPage errorPage : errorPages.values()) {    String exeptionType=errorPage.getExceptionType();    int errorCode=errorPage.getErrorCode();    if (exeptionType == null && errorCode == 0 && getMajorVersion() == 2) {      continue;    }    sb.append("  <error-page>\n");    if (errorPage.getExceptionType() != null) {      appendElement(sb,INDENT4,"exception-type",exeptionType);    } else     if (errorPage.getErrorCode() > 0) {      appendElement(sb,INDENT4,"error-code",Integer.toString(errorCode));    }    appendElement(sb,INDENT4,"location",errorPage.getLocation());    sb.append("  </error-page>\n");  }  sb.append('\n');  if (taglibs.size() > 0 || jspPropertyGroups.size() > 0) {    if (getMajorVersion() > 2 || getMinorVersion() > 3) {      sb.append("  <jsp-config>\n");    }    for (    Map.Entry<String,String> entry : taglibs.entrySet()) {      sb.append("    <taglib>\n");      appendElement(sb,INDENT6,"taglib-uri",entry.getKey());      appendElement(sb,INDENT6,"taglib-location",entry.getValue());      sb.append("    </taglib>\n");    }    if (getMajorVersion() > 2 || getMinorVersion() > 3) {      for (      JspPropertyGroup jpg : jspPropertyGroups) {        sb.append("    <jsp-property-group>\n");        for (        String urlPattern : jpg.getUrlPatterns()) {          appendElement(sb,INDENT6,"url-pattern",encodeUrl(urlPattern));        }        appendElement(sb,INDENT6,"el-ignored",jpg.getElIgnored());        appendElement(sb,INDENT6,"page-encoding",jpg.getPageEncoding());        appendElement(sb,INDENT6,"scripting-invalid",jpg.getScriptingInvalid());        appendElement(sb,INDENT6,"is-xml",jpg.getIsXml());        for (        String prelude : jpg.getIncludePreludes()) {          appendElement(sb,INDENT6,"include-prelude",prelude);        }        for (        String coda : jpg.getIncludeCodas()) {          appendElement(sb,INDENT6,"include-coda",coda);        }        appendElement(sb,INDENT6,"deferred-syntax-allowed-as-literal",jpg.getDeferredSyntax());        appendElement(sb,INDENT6,"trim-directive-whitespaces",jpg.getTrimWhitespace());        appendElement(sb,INDENT6,"default-content-type",jpg.getDefaultContentType());        appendElement(sb,INDENT6,"buffer",jpg.getBuffer());        appendElement(sb,INDENT6,"error-on-undeclared-namespace",jpg.getErrorOnUndeclaredNamespace());        sb.append("    </jsp-property-group>\n");      }      sb.append("  </jsp-config>\n\n");    }  }  if (getMajorVersion() > 2 || getMinorVersion() > 2) {    for (    ContextResourceEnvRef resourceEnvRef : resourceEnvRefs.values()) {      sb.append("  <resource-env-ref>\n");      appendElement(sb,INDENT4,"description",resourceEnvRef.getDescription());      appendElement(sb,INDENT4,"resource-env-ref-name",resourceEnvRef.getName());      appendElement(sb,INDENT4,"resource-env-ref-type",resourceEnvRef.getType());      for (      InjectionTarget target : resourceEnvRef.getInjectionTargets()) {        sb.append("    <injection-target>\n");        appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());        appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());        sb.append("    </injection-target>\n");      }      sb.append("  </resource-env-ref>\n");    }    sb.append('\n');  }  for (  ContextResource resourceRef : resourceRefs.values()) {    sb.append("  <resource-ref>\n");    appendElement(sb,INDENT4,"description",resourceRef.getDescription());    appendElement(sb,INDENT4,"res-ref-name",resourceRef.getName());    appendElement(sb,INDENT4,"res-type",resourceRef.getType());    appendElement(sb,INDENT4,"res-auth",resourceRef.getAuth());    if (getMajorVersion() > 2 || getMinorVersion() > 2) {      appendElement(sb,INDENT4,"res-sharing-scope",resourceRef.getScope());    }    for (    InjectionTarget target : resourceRef.getInjectionTargets()) {      sb.append("    <injection-target>\n");      appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());      appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());      sb.append("    </injection-target>\n");    }    sb.append("  </resource-ref>\n");  }  sb.append('\n');  for (  SecurityConstraint constraint : securityConstraints) {    sb.append("  <security-constraint>\n");    if (getMajorVersion() > 2 || getMinorVersion() > 2) {      appendElement(sb,INDENT4,"display-name",constraint.getDisplayName());    }    for (    SecurityCollection collection : constraint.findCollections()) {      sb.append("    <web-resource-collection>\n");      appendElement(sb,INDENT6,"web-resource-name",collection.getName());      appendElement(sb,INDENT6,"description",collection.getDescription());      for (      String urlPattern : collection.findPatterns()) {        appendElement(sb,INDENT6,"url-pattern",encodeUrl(urlPattern));      }      for (      String method : collection.findMethods()) {        appendElement(sb,INDENT6,"http-method",method);      }      for (      String method : collection.findOmittedMethods()) {        appendElement(sb,INDENT6,"http-method-omission",method);      }      sb.append("    </web-resource-collection>\n");    }    if (constraint.findAuthRoles().length > 0) {      sb.append("    <auth-constraint>\n");      for (      String role : constraint.findAuthRoles()) {        appendElement(sb,INDENT6,"role-name",role);      }      sb.append("    </auth-constraint>\n");    }    if (constraint.getUserConstraint() != null) {      sb.append("    <user-data-constraint>\n");      appendElement(sb,INDENT6,"transport-guarantee",constraint.getUserConstraint());      sb.append("    </user-data-constraint>\n");    }    sb.append("  </security-constraint>\n");  }  sb.append('\n');  if (loginConfig != null) {    sb.append("  <login-config>\n");    appendElement(sb,INDENT4,"auth-method",loginConfig.getAuthMethod());    appendElement(sb,INDENT4,"realm-name",loginConfig.getRealmName());    if (loginConfig.getErrorPage() != null || loginConfig.getLoginPage() != null) {      sb.append("    <form-login-config>\n");      appendElement(sb,INDENT6,"form-login-page",loginConfig.getLoginPage());      appendElement(sb,INDENT6,"form-error-page",loginConfig.getErrorPage());      sb.append("    </form-login-config>\n");    }    sb.append("  </login-config>\n\n");  }  for (  String roleName : securityRoles) {    sb.append("  <security-role>\n");    appendElement(sb,INDENT4,"role-name",roleName);    sb.append("  </security-role>\n");  }  for (  ContextEnvironment envEntry : envEntries.values()) {    sb.append("  <env-entry>\n");    appendElement(sb,INDENT4,"description",envEntry.getDescription());    appendElement(sb,INDENT4,"env-entry-name",envEntry.getName());    appendElement(sb,INDENT4,"env-entry-type",envEntry.getType());    appendElement(sb,INDENT4,"env-entry-value",envEntry.getValue());    for (    InjectionTarget target : envEntry.getInjectionTargets()) {      sb.append("    <injection-target>\n");      appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());      appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());      sb.append("    </injection-target>\n");    }    sb.append("  </env-entry>\n");  }  sb.append('\n');  for (  ContextEjb ejbRef : ejbRefs.values()) {    sb.append("  <ejb-ref>\n");    appendElement(sb,INDENT4,"description",ejbRef.getDescription());    appendElement(sb,INDENT4,"ejb-ref-name",ejbRef.getName());    appendElement(sb,INDENT4,"ejb-ref-type",ejbRef.getType());    appendElement(sb,INDENT4,"home",ejbRef.getHome());    appendElement(sb,INDENT4,"remote",ejbRef.getRemote());    appendElement(sb,INDENT4,"ejb-link",ejbRef.getLink());    for (    InjectionTarget target : ejbRef.getInjectionTargets()) {      sb.append("    <injection-target>\n");      appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());      appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());      sb.append("    </injection-target>\n");    }    sb.append("  </ejb-ref>\n");  }  sb.append('\n');  if (getMajorVersion() > 2 || getMinorVersion() > 2) {    for (    ContextLocalEjb ejbLocalRef : ejbLocalRefs.values()) {      sb.append("  <ejb-local-ref>\n");      appendElement(sb,INDENT4,"description",ejbLocalRef.getDescription());      appendElement(sb,INDENT4,"ejb-ref-name",ejbLocalRef.getName());      appendElement(sb,INDENT4,"ejb-ref-type",ejbLocalRef.getType());      appendElement(sb,INDENT4,"local-home",ejbLocalRef.getHome());      appendElement(sb,INDENT4,"local",ejbLocalRef.getLocal());      appendElement(sb,INDENT4,"ejb-link",ejbLocalRef.getLink());      for (      InjectionTarget target : ejbLocalRef.getInjectionTargets()) {        sb.append("    <injection-target>\n");        appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());        appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());        sb.append("    </injection-target>\n");      }      sb.append("  </ejb-local-ref>\n");    }    sb.append('\n');  }  if (getMajorVersion() > 2 || getMinorVersion() > 3) {    for (    ContextService serviceRef : serviceRefs.values()) {      sb.append("  <service-ref>\n");      appendElement(sb,INDENT4,"description",serviceRef.getDescription());      appendElement(sb,INDENT4,"display-name",serviceRef.getDisplayname());      appendElement(sb,INDENT4,"service-ref-name",serviceRef.getName());      appendElement(sb,INDENT4,"service-interface",serviceRef.getInterface());      appendElement(sb,INDENT4,"service-ref-type",serviceRef.getType());      appendElement(sb,INDENT4,"wsdl-file",serviceRef.getWsdlfile());      appendElement(sb,INDENT4,"jaxrpc-mapping-file",serviceRef.getJaxrpcmappingfile());      String qname=serviceRef.getServiceqnameNamespaceURI();      if (qname != null) {        qname=qname + ":";      }      qname=qname + serviceRef.getServiceqnameLocalpart();      appendElement(sb,INDENT4,"service-qname",qname);      Iterator<String> endpointIter=serviceRef.getServiceendpoints();      while (endpointIter.hasNext()) {        String endpoint=endpointIter.next();        sb.append("    <port-component-ref>\n");        appendElement(sb,INDENT6,"service-endpoint-interface",endpoint);        appendElement(sb,INDENT6,"port-component-link",serviceRef.getProperty(endpoint));        sb.append("    </port-component-ref>\n");      }      Iterator<String> handlerIter=serviceRef.getHandlers();      while (handlerIter.hasNext()) {        String handler=handlerIter.next();        sb.append("    <handler>\n");        ContextHandler ch=serviceRef.getHandler(handler);        appendElement(sb,INDENT6,"handler-name",ch.getName());        appendElement(sb,INDENT6,"handler-class",ch.getHandlerclass());        sb.append("    </handler>\n");      }      for (      InjectionTarget target : serviceRef.getInjectionTargets()) {        sb.append("    <injection-target>\n");        appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());        appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());        sb.append("    </injection-target>\n");      }      sb.append("  </service-ref>\n");    }    sb.append('\n');  }  if (!postConstructMethods.isEmpty()) {    for (    Entry<String,String> entry : postConstructMethods.entrySet()) {      sb.append("  <post-construct>\n");      appendElement(sb,INDENT4,"lifecycle-callback-class",entry.getKey());      appendElement(sb,INDENT4,"lifecycle-callback-method",entry.getValue());      sb.append("  </post-construct>\n");    }    sb.append('\n');  }  if (!preDestroyMethods.isEmpty()) {    for (    Entry<String,String> entry : preDestroyMethods.entrySet()) {      sb.append("  <pre-destroy>\n");      appendElement(sb,INDENT4,"lifecycle-callback-class",entry.getKey());      appendElement(sb,INDENT4,"lifecycle-callback-method",entry.getValue());      sb.append("  </pre-destroy>\n");    }    sb.append('\n');  }  if (getMajorVersion() > 2 || getMinorVersion() > 3) {    for (    MessageDestinationRef mdr : messageDestinationRefs.values()) {      sb.append("  <message-destination-ref>\n");      appendElement(sb,INDENT4,"description",mdr.getDescription());      appendElement(sb,INDENT4,"message-destination-ref-name",mdr.getName());      appendElement(sb,INDENT4,"message-destination-type",mdr.getType());      appendElement(sb,INDENT4,"message-destination-usage",mdr.getUsage());      appendElement(sb,INDENT4,"message-destination-link",mdr.getLink());      for (      InjectionTarget target : mdr.getInjectionTargets()) {        sb.append("    <injection-target>\n");        appendElement(sb,INDENT6,"injection-target-class",target.getTargetClass());        appendElement(sb,INDENT6,"injection-target-name",target.getTargetName());        sb.append("    </injection-target>\n");      }      sb.append("  </message-destination-ref>\n");    }    sb.append('\n');    for (    MessageDestination md : messageDestinations.values()) {      sb.append("  <message-destination>\n");      appendElement(sb,INDENT4,"description",md.getDescription());      appendElement(sb,INDENT4,"display-name",md.getDisplayName());      appendElement(sb,INDENT4,"message-destination-name",md.getName());      sb.append("  </message-destination>\n");    }    sb.append('\n');  }  if (getMajorVersion() > 2 || getMinorVersion() > 3) {    if (localeEncodingMappings.size() > 0) {      sb.append("  <locale-encoding-mapping-list>\n");      for (      Map.Entry<String,String> entry : localeEncodingMappings.entrySet()) {        sb.append("    <locale-encoding-mapping>\n");        appendElement(sb,INDENT6,"locale",entry.getKey());        appendElement(sb,INDENT6,"encoding",entry.getValue());        sb.append("    </locale-encoding-mapping>\n");      }      sb.append("  </locale-encoding-mapping-list>\n");    }  }  if (getMajorVersion() > 3 || (getMajorVersion() == 3 && getMinorVersion() > 0)) {    if (denyUncoveredHttpMethods) {      sb.append("\n");      sb.append("  <deny-uncovered-http-methods/>");    }  }  sb.append("</web-app>");  return sb.toString();}  }
class C{  public ParameterMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  prefix=getStringOptionValue(FedCLIConstants.ARGUMENT_PREFIX);  trustedProviders=(List)rc.getOption(FedCLIConstants.ARGUMENT_TRUSTED_PROVIDERS);  Set providers=new HashSet();  if (trustedProviders != null) {    providers.addAll(trustedProviders);  }  String[] params={realm,cot,providers.toString(),prefix};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_COT",params);  try {    CircleOfTrustDescriptor descriptor=((prefix == null) || (prefix.trim().length() == 0)) ? new CircleOfTrustDescriptor(cot,realm,COTConstants.ACTIVE,"",null,null,null,null,providers) : new CircleOfTrustDescriptor(cot,realm,COTConstants.ACTIVE,"",prefix + "/idffreader",prefix + "/idffwriter",prefix + "/saml2reader",prefix + "/saml2writer",providers);    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    cotManager.createCircleOfTrust(realm,descriptor);    Object[] objs={cot,realm};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-circle-of-trust-succeeded"),objs));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_COT",params);  } catch (  COTException e) {    debug.warning("CreateCircleOfTrust.handleRequest",e);    String[] args={realm,cot,providers.toString(),prefix,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_COT",args);    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void display_selected_item_info(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  ((StateSelectedItem)interactive_state).info_display();}  }
class C{  public PdfADocument(PdfWriter writer,PdfAConformanceLevel conformanceLevel,PdfOutputIntent outputIntent){  super(writer);  setChecker(conformanceLevel);  addOutputIntent(outputIntent);}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint16(bytes1.length);  out.write(bytes1);  out.writeUint16(bytes2.length);  out.write(bytes2);  if (bytes3 != null) {    out.writeUint16(bytes3.length);    out.write(bytes3);  }  if (hash != null) {    out.writeUint16(hash.length);    out.write(hash);  }}  }
class C{  public ArgumentException(final LocalizableMessage message){  super(String.valueOf(message));  this.message=message;}  }
class C{  public String scmUrl(){  return properties.getProperty("scm.url");}  }
class C{  public SQLTransactionRollbackException(){}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testInitWithFullUpdateExcludeNightlyProvider") private Object[][] testInitWithFullUpdateExcludeNightlyProvider(){  return new Object[][]{{1,false,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  protected boolean scrollUp(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY();  int topLine=layout.getLineForVertical(top);  if (layout.getLineTop(topLine) == top) {    topLine-=1;  }  if (topLine >= 0) {    topLine=Math.max(topLine - amount + 1,0);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr streetAttr;  boolean specified;  Node removedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItem("class");  streetAttr=(Attr)attributes.getNamedItem("class");  assertNull("isnull",streetAttr);}  }
class C{  public CrlClientOnline(){}  }
class C{  public static final String mangleChar(char ch){  char[] result=new char[5];  result[0]='_';  result[1]=Character.forDigit((ch >> 12) & 0xf,16);  result[2]=Character.forDigit((ch >> 8) & 0xf,16);  result[3]=Character.forDigit((ch >> 4) & 0xf,16);  result[4]=Character.forDigit(ch & 0xf,16);  return new String(result);}  }
class C{  private boolean isSessionUsedInSAML2(Set userSession,String userId){  if ((userSession == null) || userSession.isEmpty()) {    return false;  } else {    Object session=userSession.iterator().next();    return MultiProtocolUtils.usedInProtocol(session,SingleLogoutManager.SAML2);  }}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  protected boolean isValid(){  return valid;}  }
class C{  public synchronized boolean next(Writable key,Writable val) throws IOException {  if (val.getClass() != WALEntry.class) {    throw new IOException("wrong value class: " + val + " is not "+ WALEntry.class);  }  boolean more=next(key);  if (more) {    getCurrentValue(val);  }  return more;}  }
class C{  public boolean isStale(){  return stale;}  }
class C{  public boolean isNativeMethod(){  return lineNumber == -2;}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  protected synchronized void damage(Rectangle r){  if (r != null) {    int damageWidth=getCaretWidth(r.height);    x=r.x - 4 - (damageWidth >> 1);    y=r.y;    width=9 + damageWidth;    height=r.height;    repaint();  }}  }
class C{  public TypeCodeHolder(){}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  AttributeSet convertToHTML(AttributeSet from,MutableAttributeSet to){  if (to == null) {    to=convAttr;  }  to.removeAttributes(to);  if (writeCSS) {    convertToHTML40(from,to);  } else {    convertToHTML32(from,to);  }  return to;}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;  m_needToOutputDocTypeDecl=true;  m_startNewLine=false;  setOmitXMLDeclaration(true);}  }
class C{  public MockLDAPProfile(){}  }
class C{  public static void closeQuietly(final Statement stmt){  if (stmt != null) {    try {      stmt.close();    } catch (    final Exception e) {    }  }}  }
class C{  public void handleTblProviderResourceIdMapperHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SMDiscoveryProviderResourceIdMapperEditViewBean vb=(SMDiscoveryProviderResourceIdMapperEditViewBean)getViewBean(SMDiscoveryProviderResourceIdMapperEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue(TBL_PROVIDER_RESOURCEID_MAPPER_HREF_ACTION));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  @Override public String create(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=CREATE&user.name={1}",URLUtil.encodePath(path),this.principal);  String redirectUrl=null;  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("PUT");  conn.setInstanceFollowRedirects(false);  conn.connect();  logger.info("Location:" + conn.getHeaderField("Location"));  resp=result(conn,true);  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField("Location");  conn.disconnect();  if (redirectUrl != null) {    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);    conn.setRequestMethod("PUT");    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Content-Type","application/octet-stream");    final int _SIZE=is.available();    conn.setRequestProperty("Content-Length","" + _SIZE);    conn.setFixedLengthStreamingMode(_SIZE);    conn.connect();    OutputStream os=conn.getOutputStream();    copy(is,os);    is.close();    os.close();    resp=result(conn,false);    conn.disconnect();  }  return resp;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  in.defaultReadObject();}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(100);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  String tag="StatusCode";  xml.append("<").append(prefix).append(tag).append(uri).append(" Value=\"");  if (value.startsWith(SAMLConstants.PROTOCOL_PREFIX)) {    xml.append(value);  } else {    try {      xml.append(checkAndGetValue(value));    } catch (    SAMLException e) {      SAMLUtils.debug.error("StatusCode.toString: ",e);      xml.append(value);    }  }  xml.append("\">\n");  if ((subStatusCode != null) && (subStatusCode != Collections.EMPTY_LIST)) {    xml.append(subStatusCode.toString(includeNS,false));  }  xml.append("</").append(prefix).append(tag).append(">\n");  return xml.toString();}  }
class C{  public static boolean isRealmMode(){  String classMethod="UpgradeUtils:isRealmMode";  boolean isRealmMode=false;  getSSOToken();  try {    ServiceSchemaManager sm=getServiceSchemaManager(IDREPO_SERVICE);    ServiceSchema ss=sm.getSchema(SCHEMA_TYPE_GLOBAL);    Map attributeDefaults=ss.getAttributeDefaults();    if (attributeDefaults.containsKey(REALM_MODE)) {      HashSet hashSet=(HashSet)attributeDefaults.get(REALM_MODE);      String value=(String)(hashSet.iterator().next());      if (debug.messageEnabled()) {        debug.message("realmMode is : " + value);      }      if (value != null && value.equalsIgnoreCase("true")) {        isRealmMode=true;      }    }  } catch (  Exception e) {    debug.error(classMethod + "Error retreiving the attribute",e);  }  return isRealmMode;}  }
class C{  public Node.Nodes parseDirectives(String inFileName) throws JasperException, IOException {  isTagFile=ctxt.isTagFile();  directiveOnly=true;  return doParse(inFileName,null,ctxt.getTagFileJar());}  }
class C{  public synchronized void releaseXMLReader(XMLReader reader){  if (m_readers.get() == reader && reader != null) {    m_inUse.remove(reader);  }}  }
class C{  public void test_ConstructorIII(){  Date d1=new Date(70,0,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000);  assertTrue("Created incorrect date",d1.equals(d2));  Date date=new Date(99,5,22);  Calendar cal=new GregorianCalendar(1999,Calendar.JUNE,22);  assertTrue("Wrong time zone",date.equals(cal.getTime()));}  }
class C{  private boolean toggleSignIfNecessary(DocumentFilter.FilterBypass fb,int offset,char aChar) throws BadLocationException {  if (aChar == getMinusSign() || aChar == getPositiveSign()) {    NumberFormat.Field field=getFieldFrom(offset,-1);    Object newValue;    try {      if (field == null || (field != NumberFormat.Field.EXPONENT && field != NumberFormat.Field.EXPONENT_SYMBOL && field != NumberFormat.Field.EXPONENT_SIGN)) {        newValue=toggleSign((aChar == getPositiveSign()));      } else {        newValue=toggleExponentSign(offset,aChar);      }      if (newValue != null && isValidValue(newValue,false)) {        int lc=getLiteralCountTo(offset);        String string=valueToString(newValue);        fb.remove(0,fb.getDocument().getLength());        fb.insertString(0,string,null);        updateValue(newValue);        repositionCursor(getLiteralCountTo(offset) - lc + offset,1);        return true;      }    } catch (    ParseException pe) {      invalidEdit();    }  }  return false;}  }
class C{  public XMLStreamException(Throwable th){  super(th);  nested=th;}  }
class C{  public String debugDump(){  stringRep="";  Object obj=this.first();  if (obj == null)   return "<null>";  sprint("listName:");  sprint(listName);  sprint("{");  while (obj != null) {    sprint("[");    sprint(((GenericObject)obj).debugDump(this.indentation));    obj=next();    sprint("]");  }  sprint("}");  return stringRep;}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public void remove(FilterMap filterMap){synchronized (lock) {    int n=-1;    for (int i=0; i < array.length; i++) {      if (array[i] == filterMap) {        n=i;        break;      }    }    if (n < 0)     return;    FilterMap results[]=new FilterMap[array.length - 1];    System.arraycopy(array,0,results,0,n);    System.arraycopy(array,n + 1,results,n,(array.length - 1) - n);    array=results;    if (n < insertPoint) {      insertPoint--;    }  }}  }
class C{  public void info(Supplier<String> msgSupplier){  log(Level.INFO,msgSupplier);}  }
class C{  private HashtableEntry<K,V>[] doubleCapacity(){  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashtableEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashtableEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashtableEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  public boolean notifyOriginalRequestor(){  return notifyOriginalRequestor;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrspecifiedvalue.class,args);}  }
class C{  public static String replaceBackWithForward(String str){  char backSlash='\\';  char forwardSlash='/';  String returnStr=str;  if (str != null) {    returnStr=str.replace(backSlash,forwardSlash);  }  return returnStr;}  }
class C{  public static String read(final String filename){  try {    return asString(new FileInputStream(new File(filename)),Charset.defaultCharset());  } catch (  IOException e) {    logger.warn("An error occurred while reading the file {}",filename,e);    return null;  }}  }
class C{  private void validateRelationshipFields(Context context,JsonValue oldValue,JsonValue newValue,Set<JsonPointer> toBeValidatedRelationshipFields) throws ResourceException {  EventEntry measure=Publisher.start(Name.get("openidm/internal/managedObjectSet/validateRelationshipFields"),null,null);  try {    for (    JsonPointer field : toBeValidatedRelationshipFields) {      final SchemaField schemaField=schema.getField(field);      if ((schemaField != null) && schemaField.isValidationRequired()) {        relationshipProviders.get(field).validateRelationshipField(context,oldValue.get(field) == null ? json(null) : oldValue.get(field),newValue.get(field) == null ? json(null) : newValue.get(field));      }    }  }  finally {    measure.end();  }}  }
class C{  public SSOException(String msg){  super(msg);}  }
class C{  public static Intent buildStartInBackgroundIntent(File script){  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;  Intent intent=new Intent();  intent.setComponent(componentName);  intent.setAction(Constants.ACTION_LAUNCH_BACKGROUND_SCRIPT);  intent.putExtra(Constants.EXTRA_SCRIPT_PATH,script.getAbsolutePath());  return intent;}  }
class C{  public static boolean isAbsoluteUrl(String url){  if (url == null) {    return false;  }  int colonPos=url.indexOf(':');  if (colonPos == -1) {    return false;  }  for (int i=0; i < colonPos; i++) {    if (VALID_SCHEME_CHAR.indexOf(url.charAt(i)) == -1) {      return false;    }  }  return true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic128Rsa15Element createBasic128Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic128Rsa15ElementImpl();}  }
class C{  public AttributeBuilder(AttributeDescription attributeDescription){  this.attributeDescription=checkNotNull(attributeDescription);}  }
class C{  public boolean isByte(STypeDef requiredType,NumberLiteral literal,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof ByteTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Byte",lineCol))) && !literal.literal().contains(".");}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event){  String idRepoName=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));  String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    IDRepoModel model=(IDRepoModel)getModel();    setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_NAME,idRepoName);    setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_TYPE,model.getIDRepoType(curRealm,idRepoName));    IDRepoEditViewBean vb=(IDRepoEditViewBean)getViewBean(IDRepoEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public void sync() throws SyncFailedException {  try {    if (Libcore.os.isatty(this)) {      Libcore.os.tcdrain(this);    } else {      Libcore.os.fsync(this);    }  } catch (  ErrnoException errnoException) {    SyncFailedException sfe=new SyncFailedException(errnoException.getMessage());    sfe.initCause(errnoException);    throw sfe;  }}  }
class C{  public synchronized void clearCache(){  sdkCache.clear();  initializeCache();}  }
class C{  @Override public void removeByUuid(String uuid){  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public boolean validateActionValues(Map actionValues) throws InvalidNameException {  if ((actionValues == null) || (actionValues.isEmpty())) {    return (true);  }  Iterator actionNames=actionValues.keySet().iterator();  while (actionNames.hasNext()) {    try {      String actionName=(String)actionNames.next();      ActionSchema as=getActionSchema(actionName);      Set values=null;      Object o=actionValues.get(actionName);      if (o instanceof java.lang.String) {        values=new HashSet();        values.add(o);      } else {        values=(Set)o;      }      ActionSchema.validate(as,values);    } catch (    ClassCastException cce) {      PolicyManager.debug.error("In validate action name and values invalid class name: " + cce.getMessage());      throw (new InvalidNameException(ResBundleUtils.rbName,"invalid_class_name",null,serviceTypeName,PolicyException.POLICY));    }  }  return (true);}  }
class C{  public void enableLogging(){}  }
class C{  public int hashCode(){  return (lSchemaType.hashCode());}  }
class C{  public static ByteString valueOfUtf8(final CharSequence s){  if (s.length() == 0) {    return EMPTY;  }  return wrap(StaticUtils.getBytes(s));}  }
class C{  public OpenIdPrompt(String prompt){  originalValue=prompt;  if (isEmpty(prompt)) {    prompts=Collections.emptySet();  } else {    prompts=stringToSet(prompt.toLowerCase());  }}  }
class C{  static void removeAllDisallowedControls(DN targetDN,Operation operation) throws DirectoryException {  for (Iterator<Control> iter=operation.getRequestControls().iterator(); iter.hasNext(); ) {    final Control control=iter.next();    if (isProxyAuthzControl(control.getOID())) {      continue;    }    if (!getAccessControlHandler().isAllowed(targetDN,operation,control)) {      if (control.isCritical()) {        throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(control.getOID()));      }      iter.remove();    }  }}  }
class C{  public Attribute createAttribute(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ATTRIBUTE);  if (obj == null) {    return new AttributeImpl();  } else {    return (Attribute)obj;  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (null != m_selectPattern)   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public int size(){  return count;}  }
class C{  public static boolean isMatch(String pattern,String text){  Pattern pat=Pattern.compile(pattern);  Matcher m=pat.matcher(text);  while (m.find()) {    return true;  }  return false;}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddata.class,args);}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  protected void error(String msg,Exception e) throws org.xml.sax.SAXException {  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  TransformerException pe;  if (!(e instanceof TransformerException)) {    pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e);  } else   pe=(TransformerException)e;  if (null != handler) {    try {      handler.error(pe);    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else   throw new org.xml.sax.SAXException(pe);}  }
class C{  @Override public String composeName(String name,String prefix) throws NamingException {  return prefix + "/" + name;}  }
class C{  public IllegalTransactionStateException(Reason reason){  super();  this.reason=reason;}  }
class C{  public KeyStoreBuilder withPassword(final char[] password){  this.password=password;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String tagname;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  tagname=root.getTagName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",tagname);  } else {    assertEquals("elementGetTagNameAssert","staff",tagname);  }}  }
class C{  @Override public void initializeJDBCConn(){  try {    System.out.println("StreamingQuoteDAOModeLtp.initializeJDBCConn(): creating JDBC connection for Streaming Quote...");    Class.forName(JDBC_DRIVER);    conn=DriverManager.getConnection(DB_URL,USER,PASS);  } catch (  ClassNotFoundException e) {    System.out.println("StreamingQuoteDAOModeLtp.initializeJDBCConn(): ClassNotFoundException: " + JDBC_DRIVER);    e.printStackTrace();  }catch (  SQLException e) {    System.out.println("StreamingQuoteDAOModeLtp.initializeJDBCConn(): SQLException on getConnection");    e.printStackTrace();  }}  }
class C{  protected void doHead(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (DispatcherType.INCLUDE.equals(req.getDispatcherType())) {    doGet(req,resp);  } else {    NoBodyResponse response=new NoBodyResponse(resp);    doGet(req,response);    response.setContentLength();  }}  }
class C{  public static void encode(ASN1Writer writer,int opType,List<Long> values) throws IOException {  writer.writeStartSequence();  writer.writeEnumerated(opType);  if (values != null && !values.isEmpty()) {    writer.writeStartSequence();    for (    long l : values) {      writer.writeOctetString(GeneralizedTimeSyntax.format(l));    }    writer.writeEndSequence();  }  writer.writeEndSequence();}  }
class C{  public void drawPolyline(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing polyline: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawPolyline(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawPolyline(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawPolyline(xPoints,yPoints,nPoints);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private final void moveValueGapTo(int column,int where){  final int[] valuegap=mValueGap;  final int[] values=mValues;  final int columns=mColumns;  if (where == valuegap[column]) {    return;  } else   if (where > valuegap[column]) {    for (int i=valuegap[column]; i < where; i++) {      values[i * columns + column]+=valuegap[column + columns];    }  } else {    for (int i=where; i < valuegap[column]; i++) {      values[i * columns + column]-=valuegap[column + columns];    }  }  valuegap[column]=where;}  }
class C{  public static boolean sendAckSync(int options){  return ((Channel.SEND_OPTIONS_USE_ACK & options) == Channel.SEND_OPTIONS_USE_ACK) && ((Channel.SEND_OPTIONS_SYNCHRONIZED_ACK & options) == Channel.SEND_OPTIONS_SYNCHRONIZED_ACK);}  }
class C{  private static SchemaFactory newInstanceNoServiceLoader(Class<?> providerClass){  if (System.getSecurityManager() == null) {    return null;  }  try {    final Method creationMethod=providerClass.getDeclaredMethod("newXMLSchemaFactoryNoServiceLoader");    final int modifiers=creationMethod.getModifiers();    if (!Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {      return null;    }    final Class<?> returnType=creationMethod.getReturnType();    if (SERVICE_CLASS.isAssignableFrom(returnType)) {      return SERVICE_CLASS.cast(creationMethod.invoke(null,(Object[])null));    } else {      throw new ClassCastException(returnType + " cannot be cast to " + SERVICE_CLASS);    }  } catch (  ClassCastException e) {    throw new SchemaFactoryConfigurationError(e.getMessage(),e);  }catch (  NoSuchMethodException exc) {    return null;  }catch (  Exception exc) {    return null;  }}  }
class C{  public CryptoProvider(){  super("Crypto",1.0,"HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature)");  final String MD_NAME="org.apache.harmony.security.provider.crypto.SHA1_MessageDigestImpl";  final String SR_NAME="org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl";  final String SIGN_NAME="org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl";  final String SIGN_ALIAS="SHA1withDSA";  final String KEYF_NAME="org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl";  put("MessageDigest.SHA-1",MD_NAME);  put("MessageDigest.SHA-1 ImplementedIn","Software");  put("Alg.Alias.MessageDigest.SHA1","SHA-1");  put("Alg.Alias.MessageDigest.SHA","SHA-1");  put("SecureRandom.SHA1PRNG",SR_NAME);  put("SecureRandom.SHA1PRNG ImplementedIn","Software");  put("Signature.SHA1withDSA",SIGN_NAME);  put("Signature.SHA1withDSA ImplementedIn","Software");  put("Alg.Alias.Signature.SHAwithDSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSAwithSHA1",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA-1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSS",SIGN_ALIAS);  put("Alg.Alias.Signature.OID.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.13",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.27",SIGN_ALIAS);  put("KeyFactory.DSA",KEYF_NAME);  put("KeyFactory.DSA ImplementedIn","Software");  put("Alg.Alias.KeyFactory.1.3.14.3.2.12","DSA");  put("Alg.Alias.KeyFactory.1.2.840.10040.4.1","DSA");}  }
class C{  private void runReadLocalEntry() throws SearchAbandonException {  BasicNode node=getNode();  ConnectionWithControls conn=null;  try {    conn=controller.findConnectionForLocalEntry(node);    if (conn != null) {      if (useCustomFilter()) {        searchForCustomFilter(node,conn);      }      SearchRequest request=newSearchRequest(node.getDN(),BASE_OBJECT,controller.getObjectSearchFilter(),controller.getAttrsForRedSearch()).setSizeLimit(controller.getMaxChildren());      localEntry=conn.searchSingleEntry(request);      throwAbandonIfNeeded(null);    } else {      changeStateTo(State.FINISHED);    }  } catch (  IOException x) {    throwAbandonIfNeeded(x);  } finally {    if (conn != null) {      controller.releaseLDAPConnection(conn);    }  }}  }
class C{  public int size(){  queueReadLock.lock();  try {    return opQueue.size();  }  finally {    queueReadLock.unlock();  }}  }
class C{  @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  private void createApplicableList(List<Aci> candidates,AciTargetMatchContext targetMatchCtx){  List<Aci> denys=new LinkedList<>();  List<Aci> allows=new LinkedList<>();  for (  Aci aci : candidates) {    if (Aci.isApplicable(aci,targetMatchCtx)) {      if (aci.hasAccessType(EnumAccessType.DENY)) {        denys.add(aci);      }      if (aci.hasAccessType(EnumAccessType.ALLOW)) {        allows.add(aci);      }    }    if (targetMatchCtx.getTargAttrFiltersMatch()) {      targetMatchCtx.setTargAttrFiltersMatch(false);    }  }  targetMatchCtx.setAllowList(allows);  targetMatchCtx.setDenyList(denys);}  }
class C{  public void write_value(java.io.Serializable value,org.omg.CORBA.portable.BoxedValueHelper factory){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public Resource property(final String name,final PropertyMapper mapper){  declaredProperties.put(name,mapper);  return this;}  }
class C{  public String toString(){  return String.valueOf(get());}  }
class C{  public void deinstall(JTextComponent c){  component=null;}  }
class C{  public FrameBodyTSRC(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  protected void autoScrollDown(){  int index=list.getSelectedIndex();  int lastItem=list.getModel().getSize() - 1;  if (index < lastItem) {    list.setSelectedIndex(index + 1);    list.ensureIndexIsVisible(index + 1);  }}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void initializeConfiguration(String configFile) throws InitializationException {  environmentConfig.setConfigFile(new File(configFile));  initializeConfiguration();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_HELP:    help();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public Set createPeopleContainers(Map peopleContainersMap) throws AMException, SSOException {  Iterator iter=peopleContainersMap.keySet().iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    String peopleContainerName=(String)iter.next();    String peopleContainerDN=AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER) + "=" + peopleContainerName+ ","+ super.entryDN;    Map attributes=(Map)peopleContainersMap.get(peopleContainerName);    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDN);    peopleContainerImpl.setAttributes(attributes);    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public SMTPAccountStatusNotificationHandler(){  super();}  }
class C{  public void disconnect(){  mClient.disconnect();}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private boolean configureRebuildProcess(final String dn){  DN rebuildBaseDN=null;  try {    rebuildBaseDN=DN.valueOf(dn);  } catch (  Exception e) {    logger.error(ERR_CANNOT_DECODE_BASE_DN,dn,getExceptionMessage(e));    return false;  }  try {    setCurrentBackend(retrieveBackend(rebuildBaseDN));  } catch (  Exception e) {    logger.error(LocalizableMessage.raw(e.getMessage()));    return false;  }  setRebuildConfig(initializeRebuildIndexConfiguration(rebuildBaseDN));  return true;}  }
class C{  public PluginResult.PostConnect invokePostConnectPlugins(ClientConnection clientConnection){  PluginResult.PostConnect result=null;  for (  DirectoryServerPlugin p : postConnectPlugins) {    try {      result=p.doPostConnect(clientConnection);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_POST_CONNECT_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),clientConnection.getConnectionID(),clientConnection.getClientAddress(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.PostConnect.disconnectClient(DisconnectReason.SERVER_ERROR,true,message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_POST_CONNECT_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),clientConnection.getConnectionID(),clientConnection.getClientAddress());      logger.error(message);      return PluginResult.PostConnect.disconnectClient(DisconnectReason.SERVER_ERROR,true,message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostConnect.continueConnectProcessing();  }  return result;}  }
class C{  public Support_StringReader(String str){  super(str);  this.str=str;  this.count=str.length();}  }
class C{  public boolean equalArrayValue(Object otherValue){  if (value instanceof Object[] && otherValue instanceof Object[]) {    return Arrays.equals((Object[])value,(Object[])otherValue);  }  Class type=value.getClass();  if (type != otherValue.getClass()) {    return false;  }  if (type == int[].class) {    return Arrays.equals((int[])value,(int[])otherValue);  } else   if (type == byte[].class) {    return Arrays.equals((byte[])value,(byte[])otherValue);  } else   if (type == short[].class) {    return Arrays.equals((short[])value,(short[])otherValue);  } else   if (type == long[].class) {    return Arrays.equals((long[])value,(long[])otherValue);  } else   if (type == char[].class) {    return Arrays.equals((char[])value,(char[])otherValue);  } else   if (type == boolean[].class) {    return Arrays.equals((boolean[])value,(boolean[])otherValue);  } else   if (type == float[].class) {    return Arrays.equals((float[])value,(float[])otherValue);  } else   if (type == double[].class) {    return Arrays.equals((double[])value,(double[])otherValue);  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyType createPolicyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyTypeImpl();}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public PropertyException(String message,Throwable exception){  super(message,exception);}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  boolean isNormal(){  if (intLen + offset > value.length)   return false;  if (intLen == 0)   return true;  return (value[offset] != 0);}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  int newBandOffsets[]=new int[bands.length];  for (int i=0; i < bands.length; i++) {    newBandOffsets[i]=bandOffsets[bands[i]];  }  return new PixelInterleavedSampleModel(this.dataType,width,height,this.pixelStride,scanlineStride,newBandOffsets);}  }
class C{  private ReplicationServer createReplicationServer(int serverId,String suffix) throws ConfigException {  SortedSet<String> replServers=new TreeSet<>();  int port=-1;  if (serverId == RS1_ID) {    port=rs1Port;    replServers.add("localhost:" + rs2Port);  } else   if (serverId == RS2_ID) {    port=rs2Port;    replServers.add("localhost:" + rs1Port);  } else {    fail("Unknown replication server id.");  }  String dir="replicationServerFailoverTest" + serverId + suffix+ "Db";  return new ReplicationServer(new ReplServerFakeConfiguration(port,dir,0,serverId,0,100,replServers));}  }
class C{  AssignableDynamicGroup(AttrSet attrSet) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet);}  }
class C{  public static String convertFromUriEncoding(final String fileName,final IConfiguration configuration){  try {    return new String(fileName.getBytes(configuration.getUriEncoding()),"UTF-8");  } catch (  UnsupportedEncodingException e) {    return fileName;  }}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  Log.e(TAG,"dispatchTouchEvent: " + super.dispatchTouchEvent(ev) + " ev.getAction() "+ ev.getAction());  if (ev.getAction() == MotionEvent.ACTION_DOWN) {    if (isShouldHideInput(mMsg,ev)) {      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);      if (imm != null) {        imm.hideSoftInputFromWindow(mMsg.getWindowToken(),0);      }    }    return super.dispatchTouchEvent(ev);  }  if (getWindow().superDispatchTouchEvent(ev)) {    Log.e(TAG,"dispatchTouchEvent: " + " getWindow() ");    return true;  }  return false;}  }
class C{  public Status createStatus(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS,value);  if (obj == null) {    return new StatusImpl(value);  } else {    return (Status)obj;  }}  }
class C{  private void commitFile(final File file) throws IOException {  File tempFile=getTempFileFor(file);  try {    Files.move(tempFile.toPath(),file.toPath(),StandardCopyOption.ATOMIC_MOVE);  } catch (  FileAlreadyExistsException|AtomicMoveNotSupportedException e) {    if (file.exists()) {      file.delete();    }    Files.move(tempFile.toPath(),file.toPath());  }}  }
class C{  public static boolean isBoolean(String str){  return str.equals("true") || str.equals("false") || str.equals("yes")|| str.equals("no");}  }
class C{  private void determineMainSize(@FlexDirection int flexDirection,int widthMeasureSpec,int heightMeasureSpec){  int mainSize;  int paddingAlongMainAxis;switch (flexDirection) {case FLEX_DIRECTION_ROW:case FLEX_DIRECTION_ROW_REVERSE:    int widthMode=MeasureSpec.getMode(widthMeasureSpec);  int widthSize=MeasureSpec.getSize(widthMeasureSpec);if (widthMode == MeasureSpec.EXACTLY) {  mainSize=widthSize;} else {  mainSize=getLargestMainSize();}paddingAlongMainAxis=getPaddingLeft() + getPaddingRight();break;case FLEX_DIRECTION_COLUMN:case FLEX_DIRECTION_COLUMN_REVERSE:int heightMode=MeasureSpec.getMode(heightMeasureSpec);int heightSize=MeasureSpec.getSize(heightMeasureSpec);if (heightMode == MeasureSpec.EXACTLY) {mainSize=heightSize;} else {mainSize=getLargestMainSize();}paddingAlongMainAxis=getPaddingTop() + getPaddingBottom();break;default :throw new IllegalArgumentException("Invalid flex direction: " + flexDirection);}int childIndex=0;for (FlexLine flexLine : mFlexLines) {if (flexLine.mMainSize < mainSize) {childIndex=expandFlexItems(flexLine,flexDirection,mainSize,paddingAlongMainAxis,childIndex);} else {childIndex=shrinkFlexItems(flexLine,flexDirection,mainSize,paddingAlongMainAxis,childIndex);}}}  }
class C{  public static boolean contains(final String value,final String needle){  return contains(value,needle,false);}  }
class C{  static Promise<Float> promiseFloat(){  return new BasePromise<>();}  }
class C{  public Object parse(InputSource input) throws IOException, SAXException {  configure();  getXMLReader().parse(input);  return (root);}  }
class C{  public Object clone(){  AuthenticateToRealmCondition theClone=null;  try {    theClone=(AuthenticateToRealmCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }    theClone.authenticateToRealm=authenticateToRealm;  }  return theClone;}  }
class C{  public <E extends IEventListener>E processContent(int pageNumber,E renderListener,Map<String,IContentOperator> additionalContentOperators){  PdfCanvasProcessor processor=new PdfCanvasProcessor(renderListener,additionalContentOperators);  processor.processPageContent(pdfDocument.getPage(pageNumber));  return renderListener;}  }
class C{  public SecurityClientHeader createSecurityClientHeader(){  SecurityClient secClient=new SecurityClient();  return secClient;}  }
class C{  public static QrSegment makeKanjiSegment(String text){  if (text == null)   throw new NullPointerException();  BitBuffer bb=new BitBuffer();  for (int i=0; i < text.length(); i++) {    int val=UNICODE_TO_QR_KANJI[text.charAt(i)];    if (val == -1)     throw new IllegalArgumentException("String contains non-kanji-mode characters");    bb.appendBits(val,13);  }  return new QrSegment(QrSegment.Mode.KANJI,text.length(),bb.getBytes(),bb.bitLength());}  }
class C{  public static boolean isOpenIdConnectFragmentErrorType(Set<String> requestedResponseTypes){  return requestedResponseTypes.contains(ID_TOKEN) || requestedResponseTypes.contains(TOKEN);}  }
class C{  public IllegalThreadStateException(){  super();}  }
class C{  public final void testToString() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertNotNull(p.toString());}  }
class C{  public void login() throws AuthLoginException {  login(null,null,null,null,null,null);}  }
class C{  private Level errorLoggerSeverityToJulLevel(Severity severity){switch (severity) {case DEBUG:case INFORMATION:case NOTICE:    return Level.INFO;case WARNING:  return Level.WARNING;case ERROR:return Level.SEVERE;default :return Level.OFF;}}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event){  String name=(String)getDisplayFieldValue(TBL_DATA_ACTION_HREF);  MAPDeviceProfileViewBean vb=(MAPDeviceProfileViewBean)getViewBean(MAPDeviceProfileViewBean.class);  passPgSessionMap(vb);  vb.deviceName=name;  vb.forwardTo(getRequestContext());}  }
class C{  public DNOrIPAddressListTokenRestriction(String dn,Set<String> hostNames,ServiceSchemaManager serviceSchemaManager) throws UnknownHostException {  this.serviceSchemaManager=serviceSchemaManager;  StringBuilder buf=null;  if (dn.indexOf('|') > 0) {    StringTokenizer st=new StringTokenizer(dn,"|");    while (st.hasMoreTokens()) {      if (buf == null) {        buf=new StringBuilder(Misc.canonicalize(st.nextToken()));      } else {        buf.append('|').append(Misc.canonicalize(st.nextToken()));      }    }  } else {    buf=new StringBuilder(Misc.canonicalize(dn));  }  this.dn=buf.toString();  if (!isDNRestrictionOnly()) {    boolean hostmatch=false;    Iterator<String> it=hostNames.iterator();    while (it.hasNext()) {      String val=it.next();      try {        addressList.add(InetAddress.getByName(val));        hostmatch=true;      } catch (      UnknownHostException e) {        if (DEBUG.warningEnabled()) {          DEBUG.warning("DNOrIPAddressListTokenRestriction.constructor: failure resolving host " + val);        }        if (!it.hasNext() && !hostmatch) {          throw new UnknownHostException(val);        }      }    }  }  buf.append('\n');  List<String> hostNamesList=new ArrayList<>(hostNames);  Collections.sort(hostNamesList);  for (  String hostName : hostNamesList) {    buf.append(hostName).append('\n');  }  asString=buf.toString();  if (DEBUG.messageEnabled()) {    DEBUG.message("DNOrIPAddressListTokenRestriction.new " + asString);  }  asString=Hash.hash(asString);  if (asString == null) {    throw new IllegalStateException("DNOrIPAddressListTokenRestriction.hashcode error creating SHA-1 hash, hash was null");  }  if (DEBUG.messageEnabled()) {    DEBUG.message("DNOrIPAddressListTokenRestriction.hashCode " + asString);  }}  }
class C{  private void playMedia(){  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  long eventtime=SystemClock.uptimeMillis() - 1;  KeyEvent downEvent=new KeyEvent(eventtime,eventtime,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_MEDIA_PLAY,0);  KeyEvent upEvent=new KeyEvent(eventtime,eventtime,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_MEDIA_PLAY,0);  audioManager.dispatchMediaKeyEvent(downEvent);  audioManager.dispatchMediaKeyEvent(upEvent);}  }
class C{  String formatAlphaNumerals(int itemNum){  String result;  if (itemNum > 26) {    result=formatAlphaNumerals(itemNum / 26) + formatAlphaNumerals(itemNum % 26);  } else {    result=String.valueOf((char)('a' + itemNum - 1));  }  return result;}  }
class C{  public void add(Permission permission){  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly Permissions object");  PermissionCollection pc;synchronized (this) {    pc=getPermissionCollection(permission,true);    pc.add(permission);  }  if (permission instanceof AllPermission) {    allPermission=pc;  }  if (permission instanceof UnresolvedPermission) {    hasUnresolved=true;  }}  }
class C{  public void mainThreadHeartbeat(final int currentTick){  this.currentTick=currentTick;  final List<CraftTask> temp=this.temp;  parsePending();  while (isReady(currentTick)) {    final CraftTask task=pending.remove();    if (task.getPeriod() < -1l) {      if (task.isSync()) {        runners.remove(task.getTaskId(),task);      }      parsePending();      continue;    }    if (task.isSync()) {      try {        task.run();      } catch (      final Throwable throwable) {        task.getOwner().getLogger().log(Level.WARNING,String.format("Task #%s for %s generated an exception",task.getTaskId(),task.getOwner().getDescription().getFullName()),throwable);      }      parsePending();    } else {      debugTail=debugTail.setNext(new CraftAsyncDebugger(currentTick + RECENT_TICKS,task.getOwner(),task.getTaskClass()));      executor.execute(task);    }    final long period=task.getPeriod();    if (period > 0) {      task.setNextRun(currentTick + period);      temp.add(task);    } else     if (task.isSync()) {      runners.remove(task.getTaskId());    }  }  pending.addAll(temp);  temp.clear();  debugHead=debugHead.getNextHead(currentTick);}  }
class C{  public boolean isAuditEnabled(){  return auditEnabled;}  }
class C{  protected void validateIsWebsocketUpgradeHttpResponse(String path,IHttpResponse response){  assertNotNull(response);  String upgradeHeader=response.getHeaderFirst(HttpHeaders.UPGRADE);  assertNotNull(upgradeHeader);  assertEquals("WebSocket",upgradeHeader);  String locationHeader=response.getHeaderFirst(HttpHeadersExtra.SEC_WEBSOCKET_LOCATION);  assertNotNull(locationHeader);  assertEquals("ws://" + getSpincastConfig().getServerHost() + ":"+ getSpincastConfig().getHttpServerPort()+ path,locationHeader);  String connectionHeader=response.getHeaderFirst(HttpHeaders.CONNECTION);  assertNotNull(connectionHeader);  assertEquals("Upgrade",connectionHeader);  String websocketAcceptHeader=response.getHeaderFirst(HttpHeadersExtra.SEC_WEBSOCKET_ACCEPT);  assertNotNull(websocketAcceptHeader);  assertEquals(getWebsocketTestExpectedWebsocketV13AcceptHeaderValue(),websocketAcceptHeader);}  }
class C{  public AccessibleAWTTextComponent(){  TextComponent.this.addTextListener(this);}  }
class C{  public void list(int how_many,org.omg.CosNaming.BindingListHolder bl,org.omg.CosNaming.BindingIteratorHolder bi){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("list",true);    $out.write_ulong(how_many);    $in=_invoke($out);    bl.value=org.omg.CosNaming.BindingListHelper.read($in);    bi.value=org.omg.CosNaming.BindingIteratorHelper.read($in);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    list(how_many,bl,bi);  } finally {    _releaseReply($in);  }}  }
class C{  public boolean containsValue(NSObject val){  return val != null && dict.containsValue(val);}  }
class C{  public SQLNonTransientException(Throwable cause){  super(cause);}  }
class C{  public void paintEditorPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public AsfTagBannerField(final byte[] imageData){  super(new MetadataDescriptor(ContainerType.CONTENT_BRANDING,AsfFieldKey.BANNER_IMAGE.getFieldName(),MetadataDescriptor.TYPE_BINARY));  this.toWrap.setBinaryValue(imageData);}  }
class C{  public void removeSubSchema(String subSchemaName) throws SSOException, SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  removeChildNode(SMSUtils.SUB_SCHEMA,subSchemaName);}  }
class C{  private static void createRealmReadOnlyPolicy(PolicyManager policyManager,String orgDN,String orgID){  String classMethod="UpgradeUtils:createRealmReadOnlyPolicy";  try {    String policyName=orgID + "^^" + REALM_READ_ONLY;    Policy realmPolicy=new Policy(policyName,null,false,true);    String serviceName=DELEGATION_SERVICE;    String resourceName="sms://*" + orgDN + "/"+ REALM_SERVICE;    Rule rule=getRule(serviceName,resourceName);    if (rule != null) {      realmPolicy.addRule(rule);    }    String policyAdminRoleUniversalID=getUniversalID(orgDN,ORG_POLICY_ADMIN_ROLE);    Subject subject=getSubject(policyManager,policyAdminRoleUniversalID);    if (subject != null) {      realmPolicy.addSubject(DELEGATION_SUBJECT,subject,false);    }    policyManager.addPolicy(realmPolicy);  } catch (  Exception e) {    debug.error(classMethod + "Error creating realm read only policy",e);  }}  }
class C{  public final boolean hasValue(){  return value != null;}  }
class C{  public SubSchemaTypeSelectViewBean(){  super("SubSchemaTypeSelect");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  final void eraseThreadLocals(){  U.putObject(this,THREADLOCALS,null);  U.putObject(this,INHERITABLETHREADLOCALS,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Node firstC;  String childName;  int nodeType;  CharacterData employeeIDNode;  String employeeID;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  testEmployee=(Element)elementList.item(3);  firstC=testEmployee.getFirstChild();  nodeType=(int)firstC.getNodeType();  while (equals(3,nodeType)) {    firstC=firstC.getNextSibling();    nodeType=(int)firstC.getNodeType();  }  childName=firstC.getNodeName();  assertEqualsAutoCase("element","childName","em",childName);  employeeIDNode=(CharacterData)firstC.getFirstChild();  employeeID=employeeIDNode.getNodeValue();  assertEquals("employeeID","EMP0004",employeeID);}  }
class C{  public void printStats(){  if (table.size() != 0) {    FSAssertionManager.assrtStats.record("Number of assertion in table for provider " + providerId + " under realm "+ realm+ " : "+ table.size());  } else {    FSAssertionManager.assrtStats.record("No assertion found in table for provider " + providerId + " under realm "+ realm+ ".");  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public DoubleInfo addDoubleInfo(double value) throws JavaSpecificationViolation {  DoubleInfo doubleinfo=new DoubleInfo(this,value);  addItem(doubleinfo);  addItem(new ConstantPoolPadding(this));  return doubleinfo;}  }
class C{  public void endEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endEntity: " + name);  if (null != m_lexicalHandler) {    m_lexicalHandler.endEntity(name);  }}  }
class C{  private static String buildCacheKey(String realm,String entityId){  return realm + "//" + entityId;}  }
class C{  public static String fix(String desc){  while (desc.contains("L")) {    int lIndex=desc.indexOf("L");    int cIndex=desc.indexOf(";");    desc=desc.substring(0,lIndex) + "_" + desc.substring(cIndex + 1);  }  return desc;}  }
class C{  public ServerStartMsg(int serverId2,String serverURL,DN baseDN,int windowSize,long heartbeatInterval,ServerState serverState,long generationId,boolean sslEncryption,byte groupId){  super((short)-1,generationId);  this.serverId=serverId2;  this.serverURL=serverURL;  this.baseDN=baseDN;  this.maxReceiveDelay=0;  this.maxReceiveQueue=0;  this.maxSendDelay=0;  this.maxSendQueue=0;  this.windowSize=windowSize;  this.heartbeatInterval=heartbeatInterval;  this.sslEncryption=sslEncryption;  this.serverState=serverState;  this.groupId=groupId;}  }
class C{  public static Object invoke(InvocationState invocationState,Class<?> targetClass,Object o,Object functionalObject,Class<?> invoker,String method,boolean[] primitives,Object[] args) throws Throwable {  if (primitives.length != args.length)   throw new LtBug("primitives.length should equal to args.length");  List<Method> methodList=new ArrayList<>();  Queue<Class<?>> interfaces=new ArrayDeque<>();  Class<?> c=o == null ? targetClass : o.getClass();  while (c != null) {    Collections.addAll(interfaces,c.getInterfaces());    fillMethodCandidates(c,invoker,method,args,methodList,o == null);    c=c.getSuperclass();  }  c=o == null ? targetClass : o.getClass();  Collections.addAll(interfaces,c.getInterfaces());  while (!interfaces.isEmpty()) {    Class<?> i=interfaces.remove();    fillMethodCandidates(i,invoker,method,args,methodList,o == null);    Collections.addAll(interfaces,i.getInterfaces());  }  if (methodList.isEmpty()) {    if (c.isArray()) {      if (method.equals("get") && args.length >= 1 && args[0] instanceof Integer) {        Object res=Array.get(o,(Integer)args[0]);        if (args.length == 1)         return res;        boolean[] bs=new boolean[primitives.length - 1];        Object[] as=new Object[args.length - 1];        for (int i=1; i < args.length; ++i) {          bs[i - 1]=primitives[i];          as[i - 1]=args[i];        }        return invoke(invocationState,targetClass,res,null,invoker,"get",bs,as);      } else       if (method.equals("set") && args.length >= 2 && args[0] instanceof Integer) {        if (args.length == 2) {          Array.set(o,(Integer)args[0],args[1]);          return args[1];        } else {          Object elem=Array.get(o,(Integer)args[0]);          boolean[] bs=new boolean[primitives.length - 1];          Object[] as=new Object[args.length - 1];          for (int i=1; i < args.length; ++i) {            bs[i - 1]=primitives[i];            as[i - 1]=args[i];          }          return invoke(invocationState,targetClass,elem,null,invoker,"set",bs,as);        }      }    } else {      if (args.length == 1 && isBoxType(c) && isBoxType(args[0].getClass())) {        return invokePrimitive(o,method,args[0]);      } else       if (args.length == 0 && isBoxType(c)) {        return invokePrimitive(o,method);      } else       if (method.equals("add") && args.length == 1 && (args[0] instanceof String || o instanceof String)) {        return String.valueOf(o) + String.valueOf(args[0]);      } else       if (method.equals("set")) {        return invoke(invocationState,targetClass,o,functionalObject,invoker,"put",primitives,args);      } else       if (method.equals("logicNot") && args.length == 0) {        return !LtRuntime.castToBool(o);      }    }    if (!invocationState.isCallingReverse) {      if (o != null && args.length == 1 && args[0] != null) {        String methodName="reverse_" + method;        Object _2=args[0];        InvocationState reverseInvocationState=new InvocationState();        reverseInvocationState.isCallingReverse=true;        try {          return invoke(reverseInvocationState,_2.getClass(),_2,null,invoker,methodName,new boolean[]{false},new Object[]{o});        } catch (        Throwable t) {          if (reverseInvocationState.methodFound) {            throw t;          }        }      }      if (functionalObject != null) {        InvocationState callFunctionalState=new InvocationState();        try {          return callFunctionalObject(callFunctionalState,functionalObject,invoker,args);        } catch (        Throwable t) {          if (callFunctionalState.methodFound)           throw t;        }      }      invocationState.methodFound=false;      Method call=null;      try {        Class<?> cc=targetClass;        if (o != null) {          cc=o.getClass();        }        call=cc.getMethod("call",Object.class,String.class,boolean[].class,Object[].class);        if (Modifier.isStatic(call.getModifiers()) && !call.getReturnType().equals(void.class)) {          invocationState.methodFound=true;        }      } catch (      NoSuchMethodException ignore) {      }      if (invocationState.methodFound) {        assert call != null;        try {          return call.invoke(null,o,method,primitives,args);        } catch (        InvocationTargetException e) {          throw e.getTargetException();        }      }    }    if (!invocationState.fromField && !invocationState.isCallingReverse) {      Object result=LtRuntime.getField(o,method,invoker);      if (result != null && !result.equals(Unit.get())) {        invocationState.methodFound=true;        return callFunctionalObject(result,invoker,args);      }    }    StringBuilder sb=new StringBuilder().append(o == null ? targetClass.getName() : o.getClass().getName()).append("#").append(method).append("(");    boolean isFirst=true;    for (    Object arg : args) {      if (isFirst)       isFirst=false; else       sb.append(", ");      sb.append(arg == null ? "null" : arg.getClass().getName());    }    sb.append(")");    throw new LtRuntimeException("cannot find method to invoke: " + sb.toString());  }  Method methodToInvoke=findBestMatch(methodList,args,primitives);  invocationState.methodFound=true;  transToRequiredType(args,methodToInvoke.getParameterTypes());  methodToInvoke.setAccessible(true);  try {    Object res=methodToInvoke.invoke(o,args);    if (methodToInvoke.getReturnType() == void.class)     return Unit.get(); else     return res;  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public void move() throws IOException {  if (configOld.renameTo(configSave)) {    if (!configNew.renameTo(configOld)) {      configSave.renameTo(configOld);      throw new IOException("Cannot rename " + configNew.getAbsolutePath() + " to "+ configOld.getAbsolutePath());    }  } else {    if (!configOld.exists()) {      if (!configNew.renameTo(configOld)) {        throw new IOException("Cannot move " + configNew.getAbsolutePath() + " to "+ configOld.getAbsolutePath());      }    } else {      throw new IOException("Cannot rename " + configOld.getAbsolutePath() + " to "+ configSave.getAbsolutePath());    }  }}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  public static boolean isProtectedProperty(String key){  if (protectedProperties.contains(key) || key.toLowerCase().startsWith(Constants.AM_PROTECTED_PROPERTY_PREFIX)) {    return true;  }  return false;}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void testKeyPairGenerator05() throws NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  try {    KeyPairGenerator.getInstance(null,validProviderName);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],validProviderName);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(validProviderName).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public byte[] decode(byte[] array) throws DecoderException {  return decodeHex(new String(array).toCharArray());}  }
class C{  public IdSearchResults searchIdentities(IdType type,String pattern,Map avPairs,boolean recursive,int maxResults,int maxTime,Set returnAttributes,boolean returnAllAttributes) throws IdRepoException, SSOException {  IdSearchControl crtl=new IdSearchControl();  crtl.setSearchModifiers(IdSearchOpModifier.OR,avPairs);  crtl.setRecursive(recursive);  crtl.setMaxResults(maxResults);  crtl.setTimeOut(maxTime);  crtl.setReturnAttributes(returnAttributes);  crtl.setAllReturnAttributes(returnAllAttributes);  CrestQuery crestQuery=new CrestQuery(pattern);  return searchIdentities(type,crestQuery,crtl);}  }
class C{  public TwoFADevicesResource(T userDevicesDao,ContextHelper helper){  super(userDevicesDao,helper);}  }
class C{  public boolean isAcceptable(List<GeneralName> names){  if (permitted_names == null) {    prepareNames();  }  boolean[] types_presented=new boolean[9];  boolean[] permitted_found=new boolean[9];  for (  GeneralName name : names) {    int type=name.getTag();    if (excluded_names[type] != null) {      for (int i=0; i < excluded_names[type].size(); i++) {        if (excluded_names[type].get(i).isAcceptable(name)) {          return false;        }      }    }    if ((permitted_names[type] != null) && (!permitted_found[type])) {      types_presented[type]=true;      for (int i=0; i < permitted_names[type].size(); i++) {        if (permitted_names[type].get(i).isAcceptable(name)) {          permitted_found[type]=true;        }      }    }  }  for (int type=0; type < 9; type++) {    if (types_presented[type] && !permitted_found[type]) {      return false;    }  }  return true;}  }
