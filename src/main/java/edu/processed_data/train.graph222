class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.ARRAY__EXPRS:    setExprs((ExpressionList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean isEmpty(){  final Segment<V>[] segments=this.segments;  int[] mc=new int[segments.length];  int mcsum=0;  for (int i=0; i < segments.length; ++i) {    if (segments[i].count != 0)     return false;    mcsum+=mc[i]=segments[i].modCount;  }  if (mcsum != 0) {    for (int i=0; i < segments.length; ++i) {      if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;    }  }  return true;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  convertInstance(instance);  return true;}  }
class C{  @Override public void cancel(){  this.state=State.CANCELLED;  if (request != null && !request.isAborted()) {    try {      request.abort();    } catch (    Throwable e) {    }  }  if (!this.isCancelled()) {    try {      this.cancel(true);    } catch (    Throwable e) {    }  }  if (callback != null) {    callback.onCancelled();  }}  }
class C{  @Override public boolean needsAnotherIteration() throws AdeException {  return false;}  }
class C{  public Element store(Object o){  DccSignalHead p=(DccSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  if (p.useAddressOffSet()) {    element.addContent(new Element("useAddressOffSet").addContent("yes"));  } else {    element.addContent(new Element("useAddressOffSet").addContent("no"));  }  for (int i=0; i < p.getValidStates().length; i++) {    String aspect=p.getValidStateNames()[i];    Element el=new Element("aspect");    el.setAttribute("defines",aspect);    el.addContent(new Element("number").addContent(Integer.toString(p.getOutputForAppearance(p.getValidStates()[i]))));    element.addContent(el);  }  return element;}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  public static Tree buildTree(DerivationState derivationState,int maxDepth){  Rule rule=derivationState.edge.getRule();  Tree tree=getFragmentFromYield(rule.getEnglishWords());  if (tree == null) {    return null;  }  tree=tree.shallowClone();  LOG.debug("buildTree({})",tree);  if (rule.getArity() > 0 && maxDepth > 0) {    List<Tree> frontier=tree.getNonterminalYield();    ArrayList<Integer> tailIndices=new ArrayList<>();    int[] englishInts=rule.getEnglish();    for (    int englishInt : englishInts)     if (englishInt < 0)     tailIndices.add(-(englishInt + 1));    for (int i=0; i < rule.getArity(); i++) {      Tree frontierTree=frontier.get(tailIndices.get(i));      frontierTree.setBoundary(true);      DerivationState childState=derivationState.getChildDerivationState(derivationState.edge,i);      Tree childTree=buildTree(childState,maxDepth - 1);      if (childTree != null)       frontierTree.children=childTree.children;    }  }  return tree;}  }
class C{  public static String encodeString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub("\t","\\t",s);  s=StringUtil.gsub("\n","\\n",s);  s=StringUtil.gsub("\r","\\r",s);  s=StringUtil.gsub("\b","\\b",s);  s=StringUtil.gsub("\f","\\f",s);  s=StringUtil.gsub("\"","\\\"",s);  return s;}  }
class C{  public boolean hasNewMessages(SystemStreamPartitionIterator iterator){  if (iterator == null) {    return false;  }  return iterator.hasNext();}  }
class C{  public void testSessionSuspect() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  callerContext.execute(null);  await();  assertTrue(session.state() == Session.State.UNSTABLE);}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final String path=request.getParameter(PATH_REQUEST_PARAM);  String file=fileUploadService.uploadFile(request,path);  if (file != null) {    response.setStatus(response.SC_OK);  } else {    response.setStatus(response.SC_INTERNAL_SERVER_ERROR);  }}  }
class C{  public static String filenameFromString(String propTxt){  return propTxt.split(" ")[0];}  }
class C{  public JAttributeSlider(){  this(JSlider.VERTICAL,0,100,50);}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private Set intersectIP(Set permitted,Set ips){  Set intersect=new HashSet();  for (Iterator it=ips.iterator(); it.hasNext(); ) {    byte[] ip=ASN1OctetString.getInstance(((GeneralSubtree)it.next()).getBase().getName()).getOctets();    if (permitted == null) {      if (ip != null) {        intersect.add(ip);      }    } else {      Iterator it2=permitted.iterator();      while (it2.hasNext()) {        byte[] _permitted=(byte[])it2.next();        intersect.addAll(intersectIPRange(_permitted,ip));      }    }  }  return intersect;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void createWithinDemand(Integer populationSize,Integer firstIndex){}  }
class C{  public static String createMediaID(String musicID,String... categories){  StringBuilder sb=new StringBuilder();  if (categories != null) {    for (int i=0; i < categories.length; i++) {      if (!isValidCategory(categories[i])) {        throw new IllegalArgumentException("Invalid category: " + categories[0]);      }      sb.append(categories[i]);      if (i < categories.length - 1) {        sb.append(CATEGORY_SEPARATOR);      }    }  }  if (musicID != null) {    sb.append(LEAF_SEPARATOR).append(musicID);  }  return sb.toString();}  }
class C{  private void upgradeCameraSettingsFiles(SettingsManager settingsManager,Context context){  String[] cameraIds=context.getResources().getStringArray(R.array.camera_id_entryvalues);  for (int i=0; i < cameraIds.length; i++) {    SharedPreferences oldCameraPreferences=settingsManager.openPreferences(OLD_CAMERA_PREFERENCES_PREFIX + cameraIds[i]);    SharedPreferences newCameraPreferences=settingsManager.openPreferences(SettingsManager.getCameraSettingScope(cameraIds[i]));    copyPreferences(oldCameraPreferences,newCameraPreferences);  }}  }
class C{  String readSubstring(String source,int ofs){  return readSubstring(source,ofs,source.length());}  }
class C{  public HttpParams copy(){  return this;}  }
class C{  public Builder restrictedPackageName(String value){  restrictedPackageName=value;  return this;}  }
class C{  private Geometry computeLinear(LinearLocation start,LinearLocation end){  LinearGeometryBuilder builder=new LinearGeometryBuilder(line.getFactory());  builder.setFixInvalidLines(true);  if (!start.isVertex())   builder.add(start.getCoordinate(line));  for (LinearIterator it=new LinearIterator(line,start); it.hasNext(); it.next()) {    if (end.compareLocationValues(it.getComponentIndex(),it.getVertexIndex(),0.0) < 0)     break;    Coordinate pt=it.getSegmentStart();    builder.add(pt);    if (it.isEndOfLine())     builder.endLine();  }  if (!end.isVertex())   builder.add(end.getCoordinate(line));  return builder.getGeometry();}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case DPID:    return isSetDpid();case PORT:  return isSetPort();}throw new IllegalStateException();}  }
class C{  public NotQueryExp(QueryExp q){  exp=q;}  }
class C{  public boolean apply(JsonElement jsonElt){  if (jsonElt.isJsonObject()) {    JsonObject jsonObj=jsonElt.getAsJsonObject();    if (field.equals("signature")) {      String sig=Utils.getFieldValueAsString(jsonObj,field);      if (sig != null)       return compOp.apply(sig,value);    } else     if (Utils.SIGNATURE_FIELDS.contains(field)) {      String str1=Utils.getSignatureFieldValueAsString(jsonObj,field);      if (str1 != null)       return compOp.apply(str1,value);    } else {      JsonElement ovalue=jsonObj.get(field);      if (ovalue != null) {        if (ovalue.isJsonPrimitive()) {          JsonPrimitive pvalue=(JsonPrimitive)ovalue;          if (pvalue.isBoolean()) {            boolean bool1=pvalue.getAsBoolean();            boolean bool2=Boolean.parseBoolean(value);            return compOp.apply(bool1,bool2);          }          if (pvalue.isNumber()) {            int int1=pvalue.getAsInt();            int int2=Integer.parseInt(value);            return compOp.apply(int1,int2);          }          if (pvalue.isString()) {            String str1=pvalue.getAsString();            return compOp.apply(str1,value);          }        }      }    }  }  return false;}  }
class C{  public void testErrorResponse() throws IOException {  checkResponseWithError(ErrorReason.BAD_REQUEST_DATA);  checkResponseWithError(ErrorReason.BAD_REQUEST_PROTO);  checkResponseWithError(ErrorReason.SERVICE_NOT_FOUND);  checkResponseWithError(ErrorReason.METHOD_NOT_FOUND);  checkResponseWithError(ErrorReason.RPC_ERROR);  checkResponseWithError(ErrorReason.RPC_FAILED);}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);  return;}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg){  appendToDoc(text,f,fg,bg,false);}  }
class C{  public MavenDependency(){}  }
class C{  public void stop(){  if (this.timeRunning > 0) {    this.timeRunning--;  } else {    this.timeRunning=0;    this.isRunning=false;    this.timeIdle=0;    this.runDirection=1;  }}  }
class C{  protected SVGOMFlowRegionBreakElement(){}  }
class C{  public String toString(){  return "VCellRenderer[" + m_columnName + ",DisplayType="+ m_displayType+ " - "+ m_lookup+ "]";}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  public boolean isSetS(){  return this.s != null;}  }
class C{  public Client client(){  return client;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Iterator<T> emptyIterator(){  return (Iterator<T>)EMPTY_ITERATOR;}  }
class C{  public synchronized boolean isValid(ObjectReference object){  return object.isNull() || (objects.containsKey(object) && objects.get(object).isLive()) || copiedObjects.contains(object);}  }
class C{  public DoubleMatrix1D assign(double[] values){  if (isNoView) {    if (values.length != size)     throw new IllegalArgumentException("Must have same number of cells: length=" + values.length + "size()="+ size());    System.arraycopy(values,0,this.elements,0,values.length);  } else {    super.assign(values);  }  return this;}  }
class C{  public void decrementSucceededFetchCounter(){  this.succeededFetchCount.decrementAndGet();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static long decodeUnsignedLong(ByteBuffer buffer){  long value=0L;  int i=0;  long bytevalue;  while (((bytevalue=buffer.get()) & 0x80L) != 0) {    value|=(bytevalue & 0x7f) << i;    i+=7;    Preconditions.checkArgument(i <= 63,"Variable length quantity is too long");  }  return value | (bytevalue << i);}  }
class C{  private void logLocalDirectoryContents(File directory){  Collection<File> files=HerdFileUtils.listFiles(directory,TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);  LOGGER.info(String.format("Found %d files in \"%s\" target local directory:",files.size(),directory.getPath()));  for (  File file : files) {    LOGGER.info(String.format("    %s",file.getPath()));  }}  }
class C{  public static JBBPOut BeginBin(final JBBPBitOrder bitOrder){  return new JBBPOut(new ByteArrayOutputStream(),DEFAULT_BYTE_ORDER,bitOrder);}  }
class C{  public boolean postProcessKeyEvent(KeyEvent e){  if (!e.isConsumed()) {    Component target=e.getComponent();    Container p=(Container)(target instanceof Container ? target : target.getParent());    if (p != null) {      p.postProcessKeyEvent(e);    }  }  return true;}  }
class C{  private void updateServerList(final TFSTeamProjectCollection connection){  Check.notNull(connection,"connection");  final ServerList serverList=ServerListManagerFactory.getServerListProvider(DefaultPersistenceStoreProvider.INSTANCE).getServerList();  if (serverList == null) {    return;  }  final TFSConnection configurationServer=connection.getConfigurationServer() != null ? connection.getConfigurationServer() : connection;  final URI collectionURI=ServerURIUtils.normalizeURI(connection.getBaseURI(),true);  final URI configurationURI=ServerURIUtils.normalizeURI(configurationServer.getBaseURI(),true);  if (serverList != null && serverList.contains(configurationURI)) {    final ServerListConfigurationEntry serverListEntry=serverList.getServer(configurationURI);    for (    final ServerListCollectionEntry collectionEntry : serverListEntry.getCollections()) {      if (ServerURIComparator.INSTANCE.compare(collectionEntry.getURI(),collectionURI) == 0) {        return;      }    }    final String collectionName=(connection.getCatalogNode() != null && connection.getCatalogNode().getResource() != null) ? connection.getCatalogNode().getResource().getDisplayName() : connection.getBaseURI().getHost().toLowerCase(Locale.ENGLISH);    serverListEntry.getCollections().add(new ServerListCollectionEntry(collectionName,ServerListEntryType.TEAM_PROJECT_COLLECTION,collectionURI));    ServerListManagerFactory.getServerListProvider(DefaultPersistenceStoreProvider.INSTANCE).setServerList(serverList);  }}  }
class C{  public <U extends T>OngoingMatchingC0<T,U> when(MatchesExact<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(o.t));  return new OngoingMatchingC0<>(this,new DecomposableMatchBuilder0<>(matchers,new IdentityFieldExtractor<U>()).build());}  }
class C{  public boolean isPressed(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.isPressed();}  }
class C{  public Vec3 divide(double divisor){  this.x/=divisor;  this.y/=divisor;  this.z/=divisor;  return this;}  }
class C{  public void sortLocation(){  for (int x=0; x < location_size; x++) {    for (int y=x + 1; y < location_size; y++) {      if (location_t[y] < location_t[x]) {        double swap;        swap=location_x[y];        location_x[y]=location_x[x];        location_x[x]=swap;        swap=location_y[y];        location_y[y]=location_y[x];        location_y[x]=swap;        swap=location_z[y];        location_z[y]=location_z[x];        location_z[x]=swap;        swap=location_t[y];        location_t[y]=location_t[x];        location_t[x]=swap;      } else       if (location_t[y] == location_t[x])       System.out.println("Identical Times: " + x + " "+ y+ " in "+ official_name);    }  }}  }
class C{  public ComputeNodeResult computeResult(){  if (computedResult == null) {    computedResult=new ComputeNodeResult(featureFunctions,getRule(),getTailNodes(),getLastCovered(),getPhraseEnd(),null,sentence);  }  return computedResult;}  }
class C{  void caseAction(NodeRepresentation nodeRep){  makeProof(nodeRep,false,false);}  }
class C{  public void appendStatement(TestCase test,Statement statement) throws ConstructionFailedException {  currentRecursion.clear();  if (statement instanceof ConstructorStatement) {    addConstructor(test,((ConstructorStatement)statement).getConstructor(),test.size(),0);  } else   if (statement instanceof MethodStatement) {    GenericMethod method=((MethodStatement)statement).getMethod();    addMethod(test,method,test.size(),0);  } else   if (statement instanceof PrimitiveStatement<?>) {    addPrimitive(test,(PrimitiveStatement<?>)statement,test.size());  } else   if (statement instanceof FieldStatement) {    addField(test,((FieldStatement)statement).getField(),test.size(),0);  }}  }
class C{  public static void destroyGracefullyOrForcefullyAndWait(SystemProcess process,long gracefulTimeout,TimeUnit gracefulTimeoutUnit,long forcefulTimeout,TimeUnit forcefulTimeoutUnit) throws IOException, InterruptedException, TimeoutException {  if (tryDestroyGracefully(process,gracefulTimeout,gracefulTimeoutUnit)) {    return;  }  destroyForcefullyAndWait(process,forcefulTimeout,forcefulTimeoutUnit);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(Math.max(2,size + 1));  for (int i=0; i < size; i++)   s.writeObject(queue[i]);}  }
class C{  public FullProjectionRenderPolicy(OMGraphicHandlerLayer layer){  super(layer);}  }
class C{  public ToStringBuilder append(String fieldName,boolean value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public void testBooleanOptions() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  assertFalse("dataDefinitionCausesTransactionCommit",dbmd.dataDefinitionCausesTransactionCommit());  assertFalse("dataDefinitionIgnoredInTransactions",dbmd.dataDefinitionIgnoredInTransactions());  assertTrue("deletesAreDetected",dbmd.deletesAreDetected(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("deletesAreDetected",dbmd.deletesAreDetected(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertFalse("doesMaxRowSizeIncludeBlobs",dbmd.doesMaxRowSizeIncludeBlobs());  assertFalse("insertsAreDetected",dbmd.insertsAreDetected(ResultSet.TYPE_FORWARD_ONLY));  assertFalse("insertsAreDetected",dbmd.insertsAreDetected(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertFalse("insertsAreDetected",dbmd.insertsAreDetected(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("isCatalogAtStart",dbmd.isCatalogAtStart());  assertFalse("isReadOnly",dbmd.isReadOnly());  assertTrue("nullPlusNonNullIsNull",dbmd.nullPlusNonNullIsNull());  assertFalse("nullsAreSortedAtEnd",dbmd.nullsAreSortedAtEnd());  assertFalse("nullsAreSortedAtStart",dbmd.nullsAreSortedAtStart());  assertFalse("nullsAreSortedHigh",dbmd.nullsAreSortedHigh());  assertTrue("nullsAreSortedLow",dbmd.nullsAreSortedLow());  assertFalse("othersDeletesAreVisible",dbmd.othersDeletesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertFalse("othersInsertsAreVisible",dbmd.othersInsertsAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertFalse("othersInsertsAreVisible",dbmd.othersInsertsAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("othersInsertsAreVisible",dbmd.othersInsertsAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE + 1));  assertFalse("othersUpdatesAreVisible",dbmd.othersUpdatesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertTrue("othersUpdatesAreVisible",dbmd.othersUpdatesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("ownInsertsAreVisible",dbmd.ownInsertsAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("ownInsertsAreVisible",dbmd.ownInsertsAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertTrue("ownInsertsAreVisible",dbmd.ownInsertsAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("ownUpdatesAreVisible",dbmd.ownUpdatesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertTrue("ownUpdatesAreVisible",dbmd.ownUpdatesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertFalse("storesLowerCaseIdentifiers",dbmd.storesLowerCaseIdentifiers());  assertFalse("storesLowerCaseQuotedIdentifiers",dbmd.storesLowerCaseQuotedIdentifiers());  assertFalse("storesUpperCaseIdentifiers",dbmd.storesUpperCaseIdentifiers());  assertFalse("storesUpperCaseQuotedIdentifiers",dbmd.storesUpperCaseQuotedIdentifiers());  assertTrue("supportsAlterTableWithAddColumn",dbmd.supportsAlterTableWithAddColumn());  assertTrue("supportsAlterTableWithDropColumn",dbmd.supportsAlterTableWithDropColumn());  assertTrue("supportsANSI92EntryLevelSQL",dbmd.supportsANSI92EntryLevelSQL());  assertFalse("supportsANSI92FullSQL",dbmd.supportsANSI92FullSQL());  assertFalse("supportsANSI92IntermediateSQL",dbmd.supportsANSI92IntermediateSQL());  assertTrue("supportsBatchUpdates",dbmd.supportsBatchUpdates());  assertTrue("supportsCatalogsInDataManipulation",dbmd.supportsCatalogsInDataManipulation());  assertTrue("supportsCatalogsInIndexDefinitions",dbmd.supportsCatalogsInIndexDefinitions());  assertTrue("supportsCatalogsInProcedureCalls",dbmd.supportsCatalogsInProcedureCalls());  assertTrue("supportsCatalogsInTableDefinitions",dbmd.supportsCatalogsInTableDefinitions());  assertTrue("supportsColumnAliasing",dbmd.supportsColumnAliasing());  assertTrue("supportsConvert",dbmd.supportsConvert());  assertTrue("supportsCorrelatedSubqueries",dbmd.supportsCorrelatedSubqueries());  assertTrue("supportsDataDefinitionAndDataManipulationTransactions",dbmd.supportsDataDefinitionAndDataManipulationTransactions());  assertFalse("supportsDataManipulationTransactionsOnly",dbmd.supportsDataManipulationTransactionsOnly());  assertFalse("supportsDifferentTableCorrelationNames",dbmd.supportsDifferentTableCorrelationNames());  assertTrue("supportsExpressionsInOrderBy",dbmd.supportsExpressionsInOrderBy());  assertFalse("supportsExtendedSQLGrammar",dbmd.supportsExtendedSQLGrammar());  assertTrue("supportsGroupBy",dbmd.supportsGroupBy());  assertTrue("supportsGroupByBeyondSelect",dbmd.supportsGroupByBeyondSelect());  assertTrue("supportsGroupByUnrelated",dbmd.supportsGroupByUnrelated());  assertTrue("supportsLimitedOuterJoins",dbmd.supportsLimitedOuterJoins());  assertTrue("supportsMinimumSQLGrammar",dbmd.supportsMinimumSQLGrammar());  assertTrue("supportsMultipleResultSets",dbmd.supportsMultipleResultSets());  assertTrue("supportsMultipleTransactions",dbmd.supportsMultipleTransactions());  assertTrue("supportsNonNullableColumns",dbmd.supportsNonNullableColumns());  assertTrue("supportsOpenStatementsAcrossCommit",dbmd.supportsOpenStatementsAcrossCommit());  assertTrue("supportsOpenStatementsAcrossRollback",dbmd.supportsOpenStatementsAcrossRollback());  assertTrue("supportsOrderByUnrelated",dbmd.supportsOrderByUnrelated());  assertTrue("supportsOuterJoins",dbmd.supportsOuterJoins());  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE + 1));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE + 2));  assertTrue("supportsResultSetType",dbmd.supportsResultSetType(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("supportsResultSetType",dbmd.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertTrue("supportsResultSetType",dbmd.supportsResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("supportsResultSetType",dbmd.supportsResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE + 1));  assertTrue("supportsSchemasInDataManipulation",dbmd.supportsSchemasInDataManipulation());  assertTrue("supportsSchemasInIndexDefinitions",dbmd.supportsSchemasInIndexDefinitions());  assertTrue("supportsSchemasInProcedureCalls",dbmd.supportsSchemasInProcedureCalls());  assertTrue("supportsSchemasInTableDefinitions",dbmd.supportsSchemasInTableDefinitions());  assertTrue("supportsStoredProcedures",dbmd.supportsStoredProcedures());  assertTrue("supportsSubqueriesInComparisons",dbmd.supportsSubqueriesInComparisons());  assertTrue("supportsSubqueriesInExists",dbmd.supportsSubqueriesInExists());  assertTrue("supportsSubqueriesInIns",dbmd.supportsSubqueriesInIns());  assertTrue("supportsSubqueriesInQuantifieds",dbmd.supportsSubqueriesInQuantifieds());  assertTrue("supportsTableCorrelationNames",dbmd.supportsTableCorrelationNames());  assertTrue("supportsTransactionIsolationLevel",dbmd.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_COMMITTED));  assertTrue("supportsTransactionIsolationLevel",dbmd.supportsTransactionIsolationLevel(Connection.TRANSACTION_READ_UNCOMMITTED));  assertTrue("supportsTransactionIsolationLevel",dbmd.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE));  assertTrue("supportsTransactions",dbmd.supportsTransactions());  assertTrue("supportsUnion",dbmd.supportsUnion());  assertTrue("supportsUnionAll",dbmd.supportsUnionAll());  assertFalse("updatesAreDetected",dbmd.updatesAreDetected(ResultSet.TYPE_FORWARD_ONLY));  assertFalse("updatesAreDetected",dbmd.updatesAreDetected(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertFalse("updatesAreDetected",dbmd.updatesAreDetected(ResultSet.TYPE_SCROLL_SENSITIVE));  assertFalse("usesLocalFilePerTable",dbmd.usesLocalFilePerTable());  assertFalse("usesLocalFiles",dbmd.usesLocalFiles());  assertTrue("deletesAreDetected",dbmd.deletesAreDetected(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("othersDeletesAreVisible",dbmd.othersDeletesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY));  assertTrue("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE));  assertTrue("allProceduresAreCallable",dbmd.allProceduresAreCallable());  assertFalse("othersDeletesAreVisible",dbmd.othersDeletesAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertFalse("othersInsertsAreVisible",dbmd.othersInsertsAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertFalse("othersUpdatesAreVisible",dbmd.othersUpdatesAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("ownUpdatesAreVisible",dbmd.ownUpdatesAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("storesMixedCaseIdentifiers",dbmd.storesMixedCaseIdentifiers());  assertTrue("storesMixedCaseQuotedIdentifiers",dbmd.storesMixedCaseQuotedIdentifiers());  assertTrue("supportsCoreSQLGrammar",dbmd.supportsCoreSQLGrammar());  assertFalse("supportsIntegrityEnhancementFacility",dbmd.supportsIntegrityEnhancementFacility());  assertFalse("supportsMixedCaseIdentifiers",dbmd.supportsMixedCaseIdentifiers());  assertFalse("supportsMixedCaseQuotedIdentifiers",dbmd.supportsMixedCaseQuotedIdentifiers());  assertTrue("supportsPositionedDelete",dbmd.supportsPositionedDelete());  assertTrue("supportsPositionedUpdate",dbmd.supportsPositionedUpdate());  assertFalse("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE));  assertFalse("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE + 1));  assertFalse("supportsResultSetConcurrency",dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE + 2));  assertTrue("supportsSchemasInPrivilegeDefinitions",dbmd.supportsSchemasInPrivilegeDefinitions());  assertFalse("supportsSelectForUpdate",dbmd.supportsSelectForUpdate());  assertTrue("supportsTransactionIsolationLevel",dbmd.supportsTransactionIsolationLevel(Connection.TRANSACTION_REPEATABLE_READ));  assertTrue("ownDeletesAreVisible",dbmd.ownDeletesAreVisible(ResultSet.TYPE_FORWARD_ONLY));  assertTrue("ownDeletesAreVisible",dbmd.ownDeletesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE));  assertTrue("ownDeletesAreVisible",dbmd.ownDeletesAreVisible(ResultSet.TYPE_SCROLL_SENSITIVE));  assertTrue("supportsCatalogsInPrivilegeDefinitions",dbmd.supportsCatalogsInPrivilegeDefinitions());  assertTrue("supportsFullOuterJoins",dbmd.supportsFullOuterJoins());  assertTrue("supportsLikeEscapeClause",dbmd.supportsLikeEscapeClause());  assertTrue("supportsOpenCursorsAcrossCommit",dbmd.supportsOpenCursorsAcrossCommit());  assertFalse("supportsTransactionIsolationLevel",dbmd.supportsTransactionIsolationLevel(Connection.TRANSACTION_NONE));  if (dbmd.getDatabaseProductName().startsWith("OpenDDAL")) {    assertTrue("allTablesAreSelectable",dbmd.allTablesAreSelectable());    assertFalse("supportsOpenCursorsAcrossRollback",dbmd.supportsOpenCursorsAcrossRollback());  } else {    assertFalse("allTablesAreSelectable",dbmd.allTablesAreSelectable());    assertTrue("supportsOpenCursorsAcrossRollback",dbmd.supportsOpenCursorsAcrossRollback());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.338 -0400",hash_original_method="1E5C167C76FF3FF0E5E9EED4F2394FD5",hash_generated_method="ECB6544B74373497ABBCEAA760E25BB2") public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  public int readVarInt(){  int b=data[pos];  if (b >= 0) {    pos++;    return b;  }  return readVarIntRest(b);}  }
class C{  private void buildBaselines(LinePath[] baseLines,Rect r){  for (int i=0; i < mConfig.complexity; i++) {    baseLines[i]=new LinePath();    baseLines[i].moveTo(0,0);  }  buildFirstLine(baseLines[0],r);  int angle=(int)(Math.toDegrees(Math.atan((float)(-baseLines[0].getEndY()) / baseLines[0].getEndX())));  int[] angleBase=new int[4];  angleBase[0]=(int)(Math.toDegrees(Math.atan((float)(-r.top) / (r.right))));  angleBase[1]=(int)(Math.toDegrees(Math.atan((float)(-r.top) / (-r.left))));  angleBase[2]=(int)(Math.toDegrees(Math.atan((float)(r.bottom) / (-r.left))));  angleBase[3]=(int)(Math.toDegrees(Math.atan((float)(r.bottom) / (r.right))));  if (baseLines[0].getEndX() < 0)   angle+=180; else   if (baseLines[0].getEndX() > 0 && baseLines[0].getEndY() > 0)   angle+=360;  int range=360 / mConfig.complexity / 3;  int angleRandom;  for (int i=1; i < mConfig.complexity; i++) {    angle=angle + 360 / mConfig.complexity;    if (angle >= 360)     angle-=360;    angleRandom=angle + Utils.nextInt(-range,range);    if (angleRandom >= 360)     angleRandom-=360; else     if (angleRandom < 0)     angleRandom+=360;    baseLines[i].obtainEndPoint(angleRandom,angleBase,r);    baseLines[i].lineToEnd();  }}  }
class C{  @Override public boolean canSpot(){  return super.canSpot() && (getStunnedTurns() == 0);}  }
class C{  private static Charset toCharset(String csn){  Objects.requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public static MessagingMethod valueOf(int value){  MessagingMethod entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + MessagingMethod.class.getName() + ""+ value);}  }
class C{  public static BufferedImage[] split(Image image,int count,boolean isHorizontal){  BufferedImage src=Images.toBufferedImage(image);  if (count == 1) {    return new BufferedImage[]{src};  }  BufferedImage[] parts=new BufferedImage[count];  for (int i=0; i < count; i++) {    if (isHorizontal) {      parts[i]=src.getSubimage(src.getWidth() / count * i,0,src.getWidth() / count,src.getHeight());    } else {      parts[i]=src.getSubimage(0,src.getHeight() / count * i,src.getWidth(),src.getHeight() / count);    }  }  return parts;}  }
class C{  public void init(RuntimeServices rs,InternalContextAdapter context,Node node) throws Exception {  super.init(rs,context,node);  literalText=node.jjtGetChild(0).literal();}  }
class C{  private void finishReturnInstance(){  FormController formController=Collect.getInstance().getFormController();  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {    String selection=InstanceColumns.INSTANCE_FILE_PATH + "=?";    String[] selectionArgs={formController.getInstancePath().getAbsolutePath()};    Cursor c=null;    try {      c=getContentResolver().query(InstanceColumns.CONTENT_URI,null,selection,selectionArgs,null);      if (c.getCount() > 0) {        c.moveToFirst();        String id=c.getString(c.getColumnIndex(InstanceColumns._ID));        Uri instance=Uri.withAppendedPath(InstanceColumns.CONTENT_URI,id);        setResult(RESULT_OK,new Intent().setData(instance));      }    }  finally {      if (c != null) {        c.close();      }    }  }  finish();}  }
class C{  public List<String> executeAndReturnStdout(String[] rawArgs) throws IOException, InterruptedException, MameExecutionException {  return this.executeAndReturnStdout(rawArgs,true);}  }
class C{  public static void init(Properties p) throws Exception {  RuntimeSingleton.init(p);}  }
class C{  public static void loadEmergencyClasses(){}  }
class C{  public boolean deleteOwner(Principal caller,Principal owner) throws NotOwnerException, LastOwnerException {  if (!ownerList.contains(caller))   throw new NotOwnerException();  if (!ownerList.contains(owner)) {    return false;  } else {    if (ownerList.size() == 1)     throw new LastOwnerException();    ownerList.removeElement(owner);    return true;  }}  }
class C{  public void applyTemplates(List<? extends Node> list,String mode) throws Exception {  for (  Node node : list) {    if (node instanceof Element) {      applyTemplates((Element)node,mode);    } else     if (node instanceof Document) {      applyTemplates((Document)node,mode);    }  }}  }
class C{  public void calculate(NondominatedPopulation approximationSet){  normalizedApproximationSet=normalizer.normalize(approximationSet);  if (Settings.isHypervolumeEnabled()) {    hypervolume=Hypervolume.evaluate(problem,normalizedApproximationSet);  } else {    hypervolume=Double.NaN;  }  generationalDistance=GenerationalDistance.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  invertedGenerationalDistance=InvertedGenerationalDistance.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  additiveEpsilonIndicator=AdditiveEpsilonIndicator.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  maximumParetoFrontError=MaximumParetoFrontError.evaluate(problem,normalizedApproximationSet,normalizedReferenceSet);  spacing=Spacing.evaluate(problem,approximationSet);}  }
class C{  @DELETE @Path("/{relyingPartyName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("relyingPartyName") String relyingPartyName){  try {    getIDMClient().deleteRelyingParty(tenant,relyingPartyName);  } catch (  NoSuchTenantException|NoSuchRelyingPartyException e) {    log.debug("Failed to delete a relying party '{}' from tenant '{}' due to missing tenant or a relying party",relyingPartyName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException|InvalidPrincipalException e) {    log.debug("Failed to delete a relying party '{}' from tenant '{}' due to a client side error",relyingPartyName,tenant,e);    throw new BadRequestException(sm.getString("res.relyingparty.delete.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to delete a relying party '{}' from tenant '{}' due to a server side error",relyingPartyName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public void findPathTo(final Coords dest,final MoveStepType type){  final int timeLimit=PreferenceManager.getClientPreferences().getMaxPathfinderTime();  ShortestPathFinder pf=ShortestPathFinder.newInstanceOfAStar(dest,type,game);  AbstractPathFinder.StopConditionTimeout<MovePath> timeoutCondition=new AbstractPathFinder.StopConditionTimeout<>(timeLimit);  pf.addStopCondition(timeoutCondition);  pf.run(this.clone());  MovePath finPath=pf.getComputedPath(dest);  if (timeoutCondition.timeoutEngaged || finPath == null) {    MovePath bestMp=Collections.min(pf.getAllComputedPaths().values(),new ShortestPathFinder.MovePathGreedyComparator(dest));    pf=ShortestPathFinder.newInstanceOfGreedy(dest,type,game);    pf.run(bestMp);    finPath=pf.getComputedPath(dest);    if (finPath == null) {      finPath=bestMp;    }  }  if (finPath != null) {    finPath.compile(game,entity,false);    this.steps=finPath.steps;  } else {    System.out.println("Error: " + "Unable to find a path to the destination hex!");    System.out.println("\tMoving " + getEntity() + "from "+ getFinalCoords()+ " to "+ dest);  }}  }
class C{  @RequestProcessing(value="/member/{userName}/following/tags",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/following-tags.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomeFollowingTagsCnt");  final int windowSize=Symphonys.getInt("userHomeFollowingTagsWindowSize");  fillHomeUser(dataModel,user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  avatarQueryService.fillUserAvatarURL(user);  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);    for (    final JSONObject followingTag : followingTags) {      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));    }  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CrosshairOverlay)) {    return false;  }  CrosshairOverlay that=(CrosshairOverlay)obj;  if (!this.xCrosshairs.equals(that.xCrosshairs)) {    return false;  }  if (!this.yCrosshairs.equals(that.yCrosshairs)) {    return false;  }  return true;}  }
class C{  public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  public Aspects findAspectsByClassNameFieldName(String className,String fieldname,String value) throws PersistentModelException {  try {    return m_aspectHome.findByClassNameFieldName(className,fieldname,value);  } catch (  Exception ex) {    throw new PersistentModelException("Error finding Aspects: " + ex.getMessage());  }}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String escape(String input){  boolean insidequote=false;  String output="";  for (int i=0; i < input.length(); i++) {    char current=input.charAt(i);    if (current == '\'') {      insidequote=!insidequote;      output+=current;    } else     if (insidequote) {      if (current == ' ') {        output+="\\s";      } else       if (current == '\t') {        output+="\\t";      } else       if (current == ',') {        output+="\\c";      } else       if (current == '\\') {        output+="\\b";      } else       if (current == ';') {        output+="\\p";      } else       if (current == ':') {        output+="\\d";      } else {        output+=current;      }    } else {      if (current == ',') {        output+=" , ";      } else {        output+=current;      }    }  }  return output;}  }
class C{  private void revokeInstallAppPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appIdentifier=null;  try {    JSONObject appData=new JSONObject(operation.getPayLoad().toString());    if (!appData.isNull(resources.getString(R.string.app_identifier))) {      appIdentifier=appData.getString(resources.getString(R.string.app_identifier));    }    if (isAppInstalled(appIdentifier)) {      applicationManager.uninstallApplication(appIdentifier,null);    }  } catch (  JSONException e) {    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public TogglePropertiesPanelAction(Application app,@Nullable View view){  super(app,view);  setPropertyName("propertiesPanelVisible");  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.odg.Labels");  putValue(AbstractAction.NAME,labels.getString("propertiesPanel"));}  }
class C{  public final void init(IModelProviderDescriptor desc){  if (descriptor != null)   return;  descriptor=desc;  initialize();}  }
class C{  public XmlTextBuilder(int initialCapacity){  m_textBuf=new StringBuffer(initialCapacity);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public TogglePresentationAction(){  super(VelocityUIPlugin.getDefault().getResourceBundle(),"VelocityEditor.TogglePresentation.",null);  VelocityPluginImages.setToolImageDescriptors(this,"segment_edit.gif");  setToolTipText(VelocityUIPlugin.getMessage("VelocityEditor.TogglePresentation.tooltip"));  update();}  }
class C{  public boolean nextBoolean(){  return org.evosuite.runtime.Random.nextBoolean();}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void readObject(){}  }
class C{  public Divide(){  super(Number.class,Number.class,Number.class);}  }
class C{  private void testEventsAfterFollowerKill(int nodes) throws Throwable {  List<CopycatServer> servers=createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }  client.submit(new TestEvent(true)).thenAccept(null);  CopycatServer follower=servers.stream().filter(null).findFirst().get();  follower.shutdown().get(10,TimeUnit.SECONDS);  await(30000,2);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }}  }
class C{  private void removeFromParameters(){  List<PricedParameterRow> params=priceModelBean.getParameters();  if (index >= 0 && index < params.size()) {    PricedParameterRow row=params.get(index);    if (row.getSteppedPrice() != null) {      row.getPricedParameter().getSteppedPrices().remove(row.getSteppedPrice());      params.remove(index);      if (row.getPricedParameter().getSteppedPrices().size() == 1) {        if (index > 0 && params.get(index - 1).getPricedParameter() == row.getPricedParameter()) {          row=params.get(index - 1);        } else         if (index < params.size() && params.get(index).getPricedParameter() == row.getPricedParameter()) {          row=params.get(index);        }        VOSteppedPrice sp=row.getPricedParameter().getSteppedPrices().remove(0);        row.setSteppedPrice(null);        row.getPricedParameter().setPricePerSubscription(sp.getPrice());      }    }  }}  }
class C{  protected Object itemFromResponseWithSpecifier(NetworkResponse response,Object theSpecifier){  Object result=null;  if (response != null && response.data != null && response.data.length > 0) {    result=response.data;  }  return result;}  }
class C{  public PropertyDialog(PropertyEditor pe,int x,int y){  this((Frame)null,pe,x,y);  setVisible(true);}  }
class C{  public MaxLengthValidator(final String parameterValue,final int maxLength){  this.parameterValue=parameterValue;  this.maxLength=maxLength;}  }
class C{  public SpeechletException(){}  }
class C{  public static boolean[] toBooleanArray(Boolean[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.476 -0400",hash_original_method="7E0A74B7C6B5750220E60EABED544AD7",hash_generated_method="7DFAA4502CD1400538DA255F791B58B0") public void testAcceptPair(){  int iterations=BluetoothTestRunner.sPairIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("acceptPair iteration " + (i + 1) + " of "+ iterations);    mTestUtils.acceptPair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);    mTestUtils.unpair(adapter,device);  }  mTestUtils.disable(adapter);}  }
class C{  public int size(){  return size;}  }
class C{  protected void addImport(Element imp){  String bindings=imp.getAttributeNS(null,XBL_BINDINGS_ATTRIBUTE);  Node n=ctx.getReferencedNode(imp,bindings);  if (n.getNodeType() == Node.ELEMENT_NODE && !(XBL_NAMESPACE_URI.equals(n.getNamespaceURI()) && XBL_XBL_TAG.equals(n.getLocalName()))) {    throw new BridgeException(ctx,imp,ErrorConstants.ERR_URI_BAD_TARGET,new Object[]{n});  }  ImportRecord ir=new ImportRecord(imp,n);  imports.put(imp,ir);  NodeEventTarget et=(NodeEventTarget)imp;  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",importAttrListener,false,null);  et=(NodeEventTarget)n;  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.importInsertedListener,false,null);  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.importRemovedListener,false,null);  et.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",ir.importSubtreeListener,false,null);  addImportedDefinitions(imp,n);}  }
class C{  private static void evaluateMap(List<QueryModelNode> qArray,List<QueryModelNode> iArray,HashMap<String,String> hMap,List<HashMap<String,String>> hMaps,HashMap<HashMap<String,String>,Boolean> mapConsistent,TreeMap<String,Integer>[] trees) throws IllegalArgumentException {  if (iArray.size() == 0) {    if (!hMaps.contains(hMap)) {      hMaps.add(hMap);    }    mapConsistent.put(hMap,true);    return;  }  for (int i=0; i < iArray.size(); i++) {    for (int j=0; j < qArray.size(); j++) {      QueryModelNode node1=qArray.get(j);      QueryModelNode node2=iArray.get(i);      if ((node1 instanceof StatementPattern) && (node2 instanceof StatementPattern)) {        if (genConstantCompare((StatementPattern)node1,(StatementPattern)node2)) {          List<Var> variables1=((StatementPattern)node1).getVarList();          List<Var> variables2=((StatementPattern)node2).getVarList();          List<List<String>> vars=genGetCommonVars(variables1,variables2);          List<String> vars1=vars.get(0);          List<String> vars2=vars.get(1);          if (listConsistent(vars1,vars2,hMap)) {            HashMap<String,String> hashMap=Maps.newHashMap(hMap);            putVars(vars1,vars2,hashMap);            List<QueryModelNode> queryArray=Lists.newArrayList(qArray);            List<QueryModelNode> indexArray=Lists.newArrayList(iArray);            indexArray.remove(i);            queryArray.remove(j);            evaluateMap(queryArray,indexArray,hashMap,hMaps,mapConsistent,trees);          }        }      } else       if ((node1 instanceof Filter) && (node2 instanceof Filter)) {        try {          if (filterCompare((Filter)node1,(Filter)node2)) {            List<QueryModelNode> variables1=FilterVarValueCollector.process(((Filter)node1).getCondition());            List<QueryModelNode> variables2=FilterVarValueCollector.process(((Filter)node2).getCondition());            List<List<String>> vars=filterCommonVars(variables1,variables2);            List<String> vars1=vars.get(0);            List<String> vars2=vars.get(1);            if (listConsistent(vars1,vars2,hMap)) {              HashMap<String,String> hashMap=Maps.newHashMap(hMap);              putVars(vars1,vars2,hashMap);              List<QueryModelNode> queryArray=Lists.newArrayList(qArray);              List<QueryModelNode> indexArray=Lists.newArrayList(iArray);              indexArray.remove(i);              queryArray.remove(j);              evaluateMap(queryArray,indexArray,hashMap,hMaps,mapConsistent,trees);            }          }        } catch (        Exception e) {          System.out.println("Invalid Filter! " + e);        }      } else {        throw new IllegalArgumentException("Invalid query tree.");      }    }  }  if (mapConsistent.containsKey(hMap))   if (mapConsistent.get(hMap) == false) {    hMaps.remove(hMap);  }  return;}  }
class C{  public boolean isAlwaysNonNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NON_NULL;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-05 00:22:07.215 -0400",hash_original_method="86B8B01EEA81FA63F3947FFBD2326404",hash_generated_method="E7DBA0DB8CF57DD44BBBDDD71B32A7BA") public static java.lang.String toString(int modifiers){  StringBuilder buf=new StringBuilder();  if (isPublic(modifiers)) {    buf.append("public ");  }  if (isProtected(modifiers)) {    buf.append("protected ");  }  if (isPrivate(modifiers)) {    buf.append("private ");  }  if (isAbstract(modifiers)) {    buf.append("abstract ");  }  if (isStatic(modifiers)) {    buf.append("static ");  }  if (isFinal(modifiers)) {    buf.append("final ");  }  if (isTransient(modifiers)) {    buf.append("transient ");  }  if (isVolatile(modifiers)) {    buf.append("volatile ");  }  if (isSynchronized(modifiers)) {    buf.append("synchronized ");  }  if (isNative(modifiers)) {    buf.append("native ");  }  if (isStrict(modifiers)) {    buf.append("strictfp ");  }  if (isInterface(modifiers)) {    buf.append("interface ");  }  if (buf.length() == 0) {    return "";  }  buf.setLength(buf.length() - 1);  return buf.toString();}  }
class C{  public final Sector union(Sector that){  if (that == null)   return this;  Angle minLat=this.minLatitude;  Angle maxLat=this.maxLatitude;  Angle minLon=this.minLongitude;  Angle maxLon=this.maxLongitude;  if (that.minLatitude.degrees < this.minLatitude.degrees)   minLat=that.minLatitude;  if (that.maxLatitude.degrees > this.maxLatitude.degrees)   maxLat=that.maxLatitude;  if (that.minLongitude.degrees < this.minLongitude.degrees)   minLon=that.minLongitude;  if (that.maxLongitude.degrees > this.maxLongitude.degrees)   maxLon=that.maxLongitude;  return new Sector(minLat,maxLat,minLon,maxLon);}  }
class C{  public CActionSelectParents(final ZyGraph graph,final boolean showIcon){  super("Select ancestors of selection");  m_graph=Preconditions.checkNotNull(graph,"IE02831: graph argument can not be null");  if (showIcon) {    putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/selparent_up.jpg")));  }  putValue(Action.SHORT_DESCRIPTION,"Select ancestors of selection");}  }
class C{  public static VAlarm audio(Trigger trigger,Attachment sound){  VAlarm alarm=new VAlarm(Action.audio(),trigger);  if (sound != null) {    alarm.addAttachment(sound);  }  return alarm;}  }
class C{  default String mkString(){  if (isPresent())   return getClass().getSimpleName() + "[" + get()+ "]";  return getClass().getSimpleName() + "[]";}  }
class C{  protected EList<Type> parseAndGetTypes(CharSequence text) throws Exception {  return parseHelper.parse(text).getModule().getTopLevelTypes();}  }
class C{  public void saveBytecode(String className,String classFileName){  byte[] bytecode=getBytecode(className);  if (bytecode != null) {    try {      FileOutputStream fos=new FileOutputStream(classFileName);      fos.write(bytecode);      fos.close();    } catch (    IOException ex) {      context.log("Error in saving bytecode for " + className + " to "+ classFileName,ex);    }  }}  }
class C{  public final static <T,C extends Collection<? super T>>Stream<C> groupedWhile(final Stream<T> stream,final Predicate<? super T> predicate,final Supplier<C> factory){  return new BatchWhileOperator<T,C>(stream,factory).batchWhile(predicate);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void beforeName() throws IOException {  int context=peek();  if (context == NONEMPTY_OBJECT) {    out.write(',');  } else   if (context != EMPTY_OBJECT) {    throw new IllegalStateException("Nesting problem.");  }  newline();  replaceTop(DANGLING_NAME);}  }
class C{  public void register(String key,InputOperation value){  inputOperations.put(key,value);}  }
class C{  protected synchronized void generateStatements() throws SQLException {  if (!this.isUpdatable) {    this.doingUpdates=false;    this.onInsertRow=false;    throw new NotUpdatable(this.notUpdatableReason);  }  String quotedId=getQuotedIdChar();  Map<String,String> tableNamesSoFar=null;  if (this.connection.lowerCaseTableNames()) {    tableNamesSoFar=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);    this.databasesUsedToTablesUsed=new TreeMap<String,Map<String,Map<String,Integer>>>(String.CASE_INSENSITIVE_ORDER);  } else {    tableNamesSoFar=new TreeMap<String,String>();    this.databasesUsedToTablesUsed=new TreeMap<String,Map<String,Map<String,Integer>>>();  }  this.primaryKeyIndicies=new ArrayList<Integer>();  StringBuilder fieldValues=new StringBuilder();  StringBuilder keyValues=new StringBuilder();  StringBuilder columnNames=new StringBuilder();  StringBuilder insertPlaceHolders=new StringBuilder();  StringBuilder allTablesBuf=new StringBuilder();  Map<Integer,String> columnIndicesToTable=new HashMap<Integer,String>();  boolean firstTime=true;  boolean keysFirstTime=true;  String equalsStr=this.connection.versionMeetsMinimum(3,23,0) ? "<=>" : "=";  for (int i=0; i < this.fields.length; i++) {    StringBuilder tableNameBuffer=new StringBuilder();    Map<String,Integer> updColumnNameToIndex=null;    if (this.fields[i].getOriginalTableName() != null) {      String databaseName=this.fields[i].getDatabaseName();      if ((databaseName != null) && (databaseName.length() > 0)) {        tableNameBuffer.append(quotedId);        tableNameBuffer.append(databaseName);        tableNameBuffer.append(quotedId);        tableNameBuffer.append('.');      }      String tableOnlyName=this.fields[i].getOriginalTableName();      tableNameBuffer.append(quotedId);      tableNameBuffer.append(tableOnlyName);      tableNameBuffer.append(quotedId);      String fqTableName=tableNameBuffer.toString();      if (!tableNamesSoFar.containsKey(fqTableName)) {        if (!tableNamesSoFar.isEmpty()) {          allTablesBuf.append(',');        }        allTablesBuf.append(fqTableName);        tableNamesSoFar.put(fqTableName,fqTableName);      }      columnIndicesToTable.put(Integer.valueOf(i),fqTableName);      updColumnNameToIndex=getColumnsToIndexMapForTableAndDB(databaseName,tableOnlyName);    } else {      String tableOnlyName=this.fields[i].getTableName();      if (tableOnlyName != null) {        tableNameBuffer.append(quotedId);        tableNameBuffer.append(tableOnlyName);        tableNameBuffer.append(quotedId);        String fqTableName=tableNameBuffer.toString();        if (!tableNamesSoFar.containsKey(fqTableName)) {          if (!tableNamesSoFar.isEmpty()) {            allTablesBuf.append(',');          }          allTablesBuf.append(fqTableName);          tableNamesSoFar.put(fqTableName,fqTableName);        }        columnIndicesToTable.put(Integer.valueOf(i),fqTableName);        updColumnNameToIndex=getColumnsToIndexMapForTableAndDB(this.catalog,tableOnlyName);      }    }    String originalColumnName=this.fields[i].getOriginalName();    String columnName=null;    if (this.connection.getIO().hasLongColumnInfo() && (originalColumnName != null) && (originalColumnName.length() > 0)) {      columnName=originalColumnName;    } else {      columnName=this.fields[i].getName();    }    if (updColumnNameToIndex != null && columnName != null) {      updColumnNameToIndex.put(columnName,Integer.valueOf(i));    }    String originalTableName=this.fields[i].getOriginalTableName();    String tableName=null;    if (this.connection.getIO().hasLongColumnInfo() && (originalTableName != null) && (originalTableName.length() > 0)) {      tableName=originalTableName;    } else {      tableName=this.fields[i].getTableName();    }    StringBuilder fqcnBuf=new StringBuilder();    String databaseName=this.fields[i].getDatabaseName();    if (databaseName != null && databaseName.length() > 0) {      fqcnBuf.append(quotedId);      fqcnBuf.append(databaseName);      fqcnBuf.append(quotedId);      fqcnBuf.append('.');    }    fqcnBuf.append(quotedId);    fqcnBuf.append(tableName);    fqcnBuf.append(quotedId);    fqcnBuf.append('.');    fqcnBuf.append(quotedId);    fqcnBuf.append(columnName);    fqcnBuf.append(quotedId);    String qualifiedColumnName=fqcnBuf.toString();    if (this.fields[i].isPrimaryKey()) {      this.primaryKeyIndicies.add(Integer.valueOf(i));      if (!keysFirstTime) {        keyValues.append(" AND ");      } else {        keysFirstTime=false;      }      keyValues.append(qualifiedColumnName);      keyValues.append(equalsStr);      keyValues.append("?");    }    if (firstTime) {      firstTime=false;      fieldValues.append("SET ");    } else {      fieldValues.append(",");      columnNames.append(",");      insertPlaceHolders.append(",");    }    insertPlaceHolders.append("?");    columnNames.append(qualifiedColumnName);    fieldValues.append(qualifiedColumnName);    fieldValues.append("=?");  }  this.qualifiedAndQuotedTableName=allTablesBuf.toString();  this.updateSQL="UPDATE " + this.qualifiedAndQuotedTableName + " "+ fieldValues.toString()+ " WHERE "+ keyValues.toString();  this.insertSQL="INSERT INTO " + this.qualifiedAndQuotedTableName + " ("+ columnNames.toString()+ ") VALUES ("+ insertPlaceHolders.toString()+ ")";  this.refreshSQL="SELECT " + columnNames.toString() + " FROM "+ this.qualifiedAndQuotedTableName+ " WHERE "+ keyValues.toString();  this.deleteSQL="DELETE FROM " + this.qualifiedAndQuotedTableName + " WHERE "+ keyValues.toString();}  }
class C{  static void flushUnreferencedProperties(){  WeakPCL pcl;  while ((pcl=(WeakPCL)queue.poll()) != null) {    pcl.dispose();  }}  }
class C{  PackageType(String path){  this.path=path;}  }
class C{  public Node findNextTag(Set<String> tags,String value,Node node,Node root){  Node header=node;  Node nextNode=nextNode(header,root);  header=findTag(tags,null,nextNode);  while ((header == null) && (nextNode != null)) {    nextNode=nextNode(nextNode,root);    header=findTag(tags,null,nextNode);  }  return header;}  }
class C{  public static byte[] toByteArray(final InputStream in) throws IOException {  assert in != null : "The input stream to read bytes from cannot be null!";  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final byte[] buffer=new byte[BUFFER_SIZE];  int bytesRead;  try {    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      out.flush();    }  }  finally {    IOUtils.close(in);    IOUtils.close(out);  }  return out.toByteArray();}  }
class C{  public static double[][] I(int C[][],int N){  int L=C.length;  double M[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      M[j][k]=I(C,j,k,N);    }  }  return M;}  }
class C{  private void commitEntries(){  context.checkThread();  List<MemberState> members=context.getClusterState().getActiveMemberStates(null);  if (members.isEmpty()) {    long previousCommitIndex=context.getCommitIndex();    long commitIndex=context.getLog().lastIndex();    context.setCommitIndex(commitIndex);    completeCommits(previousCommitIndex,commitIndex);    return;  }  long commitIndex=members.get(quorumIndex()).getMatchIndex();  long previousCommitIndex=context.getCommitIndex();  if (commitIndex > 0 && commitIndex > previousCommitIndex && (leaderIndex > 0 && commitIndex >= leaderIndex)) {    context.setCommitIndex(commitIndex);    completeCommits(previousCommitIndex,commitIndex);  }}  }
class C{  public Response createGroup(GroupEntity group){  return restClient.post("groups",group,new HashMap<String,String>());}  }
class C{  public UserEntity createUserEntity(String userId,Boolean namespaceAuthorizationAdmin){  UserEntity userEntity=new UserEntity();  userEntity.setUserId(userId);  userEntity.setNamespaceAuthorizationAdmin(namespaceAuthorizationAdmin);  return userDao.saveAndRefresh(userEntity);}  }
class C{  public NetworkHierarchyPanel(NetworkPanel networkPanel){  super();  this.networkPanel=networkPanel;  root=new DefaultMutableTreeNode("Root Network");  tree=new NetworkJTree(root);  tree.setExpandsSelectedPaths(true);  model=(DefaultTreeModel)tree.getModel();  JPanel panel=new JPanel(new GridBagLayout());  panel.setBackground(Color.white);  GridBagConstraints gbc=new GridBagConstraints();  gbc.weightx=.5;  gbc.weighty=.5;  gbc.anchor=GridBagConstraints.FIRST_LINE_START;  panel.add(tree,gbc);  setViewportView(panel);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  SerializationHandler rth=transformer.getResultTreeHandler();  try {    xctxt.pushNamespaceContext(this);    int current=xctxt.getCurrentNode();    xctxt.pushCurrentNodeAndExpression(current,current);    if (m_disableOutputEscaping)     rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    try {      Expression expr=m_selectExpression.getExpression();      expr.executeCharsToContentHandler(xctxt,rth);    }  finally {      if (m_disableOutputEscaping)       rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");      xctxt.popNamespaceContext();      xctxt.popCurrentNodeAndExpression();    }  } catch (  SAXException se) {    throw new TransformerException(se);  }catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(this);    throw te;  }}  }
class C{  public static DraweeController mockController(){  DraweeController controller=mock(AbstractDraweeController.class);  stubGetAndSetHierarchy(controller);  stubGetAndSetContentDescription(controller);  return controller;}  }
class C{  private static MemcachedClient startMemcachedClient(String host,int port) throws IOException {  assert host != null;  assert port > 0;  return new MemcachedClient(new BinaryConnectionFactory(),Arrays.asList(new InetSocketAddress(host,port)));}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static PluginInfo readFromProperties(Path dir) throws IOException {  Path descriptor=dir.resolve(ES_PLUGIN_PROPERTIES);  Properties props=new Properties();  try (InputStream stream=Files.newInputStream(descriptor)){    props.load(stream);  }   String name=props.getProperty("name");  if (name == null || name.isEmpty()) {    throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");  }  PluginManager.checkForForbiddenName(name);  String description=props.getProperty("description");  if (description == null) {    throw new IllegalArgumentException("Property [description] is missing for plugin [" + name + "]");  }  String version=props.getProperty("version");  if (version == null) {    throw new IllegalArgumentException("Property [version] is missing for plugin [" + name + "]");  }  boolean jvm=Boolean.parseBoolean(props.getProperty("jvm"));  boolean site=Boolean.parseBoolean(props.getProperty("site"));  if (jvm == false && site == false) {    throw new IllegalArgumentException("Plugin [" + name + "] must be at least a jvm or site plugin");  }  boolean isolated=true;  String classname="NA";  if (jvm) {    String esVersionString=props.getProperty("elasticsearch.version");    if (esVersionString == null) {      throw new IllegalArgumentException("Property [elasticsearch.version] is missing for jvm plugin [" + name + "]");    }    Version esVersion=Version.fromString(esVersionString);    if (esVersion.equals(Version.CURRENT) == false) {      throw new IllegalArgumentException("Plugin [" + name + "] is incompatible with Elasticsearch ["+ Version.CURRENT.toString()+ "]. Was designed for version ["+ esVersionString+ "]");    }    String javaVersionString=props.getProperty("java.version");    if (javaVersionString == null) {      throw new IllegalArgumentException("Property [java.version] is missing for jvm plugin [" + name + "]");    }    JarHell.checkVersionFormat(javaVersionString);    JarHell.checkJavaVersion(name,javaVersionString);    isolated=Boolean.parseBoolean(props.getProperty("isolated","true"));    classname=props.getProperty("classname");    if (classname == null) {      throw new IllegalArgumentException("Property [classname] is missing for jvm plugin [" + name + "]");    }  }  if (site) {    if (!Files.exists(dir.resolve("_site"))) {      throw new IllegalArgumentException("Plugin [" + name + "] is a site plugin but has no '_site/' directory");    }  }  return new PluginInfo(name,description,site,version,jvm,classname,isolated);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BETabbedPaneUI();}  }
class C{  static public <T>void assertSameSolutionsAnyOrder(final T[] expected,final Iterator<T> actual){  assertSameSolutionsAnyOrder("",expected,actual);}  }
class C{  private void processPreparedView(NetView v){  assert initialView != null;  if (currentView == null || currentView.getViewId() < v.getViewId()) {    int viewId=Math.max(initialView.getViewId(),v.getViewId());    viewId+=1;    NetView newView=new NetView(initialView,viewId);    List<InternalDistributedMember> newMembers;    if (currentView != null) {      newMembers=v.getNewMembers(currentView);    } else {      newMembers=v.getMembers();    }    for (    InternalDistributedMember newMember : newMembers) {      newView.add(newMember);      newView.setFailureDetectionPort(newMember,v.getFailureDetectionPort(newMember));      newView.setPublicKey(newMember,v.getPublicKey(newMember));    }synchronized (this) {      setInitialView(newView,newMembers,initialLeaving,initialRemovals);    }  }}  }
class C{  public SanStorage(double capacity,double bandwidth,double networkLatency) throws ParameterException {  super(capacity);  this.bandwidth=bandwidth;  this.networkLatency=networkLatency;}  }
class C{  public static Capabilities forInstances(Instances data,boolean multi) throws Exception {  Capabilities result;  Capabilities multiInstance;  int i;  int n;  int m;  Instance inst;  boolean missing;  result=new Capabilities(null);  if (data.classIndex() == -1) {    result.enable(Capability.NO_CLASS);  } else {switch (data.classAttribute().type()) {case Attribute.NOMINAL:      if (data.classAttribute().numValues() == 1) {        result.enable(Capability.UNARY_CLASS);      } else       if (data.classAttribute().numValues() == 2) {        result.enable(Capability.BINARY_CLASS);      } else {        result.enable(Capability.NOMINAL_CLASS);      }    break;case Attribute.NUMERIC:  result.enable(Capability.NUMERIC_CLASS);break;case Attribute.STRING:result.enable(Capability.STRING_CLASS);break;case Attribute.DATE:result.enable(Capability.DATE_CLASS);break;case Attribute.RELATIONAL:result.enable(Capability.RELATIONAL_CLASS);break;default :throw new UnsupportedAttributeTypeException("Unknown class attribute type '" + data.classAttribute() + "'!");}for (i=0; i < data.numInstances(); i++) {if (data.instance(i).classIsMissing()) {result.enable(Capability.MISSING_CLASS_VALUES);break;}}}for (i=0; i < data.numAttributes(); i++) {if (i == data.classIndex()) {continue;}switch (data.attribute(i).type()) {case Attribute.NOMINAL:result.enable(Capability.UNARY_ATTRIBUTES);if (data.attribute(i).numValues() == 2) {result.enable(Capability.BINARY_ATTRIBUTES);} else if (data.attribute(i).numValues() > 2) {result.enable(Capability.NOMINAL_ATTRIBUTES);}break;case Attribute.NUMERIC:result.enable(Capability.NUMERIC_ATTRIBUTES);break;case Attribute.DATE:result.enable(Capability.DATE_ATTRIBUTES);break;case Attribute.STRING:result.enable(Capability.STRING_ATTRIBUTES);break;case Attribute.RELATIONAL:result.enable(Capability.RELATIONAL_ATTRIBUTES);break;default :throw new UnsupportedAttributeTypeException("Unknown attribute type '" + data.attribute(i).type() + "'!");}}missing=false;for (i=0; i < data.numInstances(); i++) {inst=data.instance(i);if (inst instanceof SparseInstance) {for (m=0; m < inst.numValues(); m++) {n=inst.index(m);if (n == inst.classIndex()) {continue;}if (inst.isMissing(n)) {missing=true;break;}}} else {for (n=0; n < data.numAttributes(); n++) {if (n == inst.classIndex()) {continue;}if (inst.isMissing(n)) {missing=true;break;}}}if (missing) {result.enable(Capability.MISSING_VALUES);break;}}if (multi) {if ((data.numAttributes() == 3) && (data.attribute(0).isNominal()) && (data.attribute(1).isRelationValued())&& (data.classIndex() == data.numAttributes() - 1)) {multiInstance=new Capabilities(null);multiInstance.or(result.getClassCapabilities());multiInstance.enable(Capability.NOMINAL_ATTRIBUTES);multiInstance.enable(Capability.RELATIONAL_ATTRIBUTES);multiInstance.enable(Capability.ONLY_MULTIINSTANCE);result.assign(multiInstance);}}return result;}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.M5P";}  }
class C{  private Object writeReplace() throws java.io.ObjectStreamException {  return new KeyRep(KeyRep.Type.PUBLIC,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  public boolean isContextual(){  return (mask & CONTEXTUAL_MASK) != 0;}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public boolean isTls(){  return this.pTls.equals("true");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.941 -0500",hash_original_method="434986F5E9E4AD2D5C5ADC5B37E7986B",hash_generated_method="6DB1D1D6641E40B427D761E20F6339C6") public void printShortString(PrintWriter pw){  pw.print("{alpha=");  pw.print(mAlpha);  pw.print(" matrix=");  mMatrix.printShortString(pw);  pw.print('}');}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public boolean isSetIntegerlist(){  return this.integerlist != null;}  }
class C{  private void doTest(int numOfUsers,int numOfPuts,boolean[] postAuthzAllowed,final AuthzCredentialGenerator authzGenerator,final Boolean keepAlive) throws Exception {  CredentialGenerator credentialGenerator=authzGenerator.getCredentialGenerator();  Properties extraAuthProps=credentialGenerator.getSystemProperties();  Properties javaProps=credentialGenerator.getJavaProperties();  Properties extraAuthzProps=authzGenerator.getSystemProperties();  String authenticator=credentialGenerator.getAuthenticator();  String accessor=authzGenerator.getAuthorizationCallback();  String authInit=credentialGenerator.getAuthInit();  TestAuthzCredentialGenerator tgen=new TestAuthzCredentialGenerator(authzGenerator);  Properties serverProps=buildProperties(authenticator,accessor,true,extraAuthProps,extraAuthzProps);  Properties opCredentials;  credentialGenerator=tgen.getCredentialGenerator();  final Properties javaProps2=credentialGenerator != null ? credentialGenerator.getJavaProperties() : null;  int[] indices=new int[numOfPuts];  for (int index=0; index < numOfPuts; ++index) {    indices[index]=index;  }  Random random=new Random();  Properties[] authProps=new Properties[numOfUsers];  String durableClientId="multiuser_durable_client_1";  Properties client2Credentials=null;  for (int i=0; i < numOfUsers; i++) {    int rand=random.nextInt(100) + 1;    if (postAuthzAllowed[i]) {      opCredentials=tgen.getAllowedCredentials(new OperationCode[]{OperationCode.EXECUTE_CQ,OperationCode.GET},new String[]{regionName},indices,rand);    } else {      opCredentials=tgen.getDisallowedCredentials(new OperationCode[]{OperationCode.GET},new String[]{regionName},indices,rand);    }    authProps[i]=concatProperties(new Properties[]{opCredentials,extraAuthProps,extraAuthzProps});    if (client2Credentials == null) {      client2Credentials=tgen.getAllowedCredentials(new OperationCode[]{OperationCode.PUT},new String[]{regionName},indices,rand);    }  }  int[] randomAvailableTCPPorts=AvailablePortHelper.getRandomAvailableTCPPorts(3);  int port1=randomAvailableTCPPorts[0];  int port2=randomAvailableTCPPorts[1];  int locatorPort=randomAvailableTCPPorts[2];  server1.invoke(null);  server2.invoke(null);  server1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  if (keepAlive == null) {    client1.invoke(null);  } else {    client1.invoke(null);  }  server1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  if (!postAuthzAllowed[0] || keepAlive == null || !keepAlive) {    Thread.sleep(1000);  } else {    client1.invoke(null);  }  int numOfCreates=keepAlive == null ? 0 : (keepAlive ? numOfPuts + 1 : 0);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  client1.invoke(null);  server1.invoke(null);  if (!postAuthzAllowed[0] || keepAlive == null || !keepAlive) {    Thread.sleep(1000);  } else {    client1.invoke(null);  }  int numOfUpdates=numOfPuts + 1;  client1.invoke(null);}  }
class C{  public CUmipmappedArray(){}  }
class C{  @Override protected void onPause(){  super.onPause();  LOG.d(TAG,"Paused the application!");  if (this.activityState == ACTIVITY_EXITING) {    return;  }  if (this.appView == null) {    return;  } else {    this.appView.handlePause(this.keepRunning);  }}  }
class C{  private static final String toUrlEncoded(String str){  return str.replaceAll("=","%3D");}  }
class C{  public static void main(String[] args) throws IOException {  Comparator<short[]> comp=FreeCellNode.comparator();  Scanner sc=new Scanner(new File(args[0]));  while (sc.hasNext()) {    int dealNumber=sc.nextInt();    System.out.println("Searching board:" + dealNumber);    FreeCellNode fcn=Deal.initialize(new File("artifacts","32000.txt"),dealNumber);    System.out.println(fcn.toString());    AnalyzeState st=new AnalyzeState();    DFS<short[]> dfs=new DFS<short[]>(st);    Result res=dfs.fullSearch(fcn,Deal.goal(),comp);    Stack<IMove> sol=res.solution();    System.out.println("Solution has " + sol.size() + " moves.");    System.out.println("   Total number of states: " + dfs.getCounter());    st.report();  }  sc.close();}  }
class C{  public S2Point toPointRaw(){  MutableInteger i=new MutableInteger(0);  MutableInteger j=new MutableInteger(0);  int face=toFaceIJOrientation(i,j,null);  int delta=isLeaf() ? 1 : (((i.intValue() ^ (((int)id) >>> 2)) & 1) != 0) ? 2 : 0;  int si=(i.intValue() << 1) + delta - MAX_SIZE;  int ti=(j.intValue() << 1) + delta - MAX_SIZE;  return faceSiTiToXYZ(face,si,ti);}  }
class C{  public Packet(int command,Object object){  this.command=command;  data=new Object[1];  data[0]=object;}  }
class C{  private String validateBindAddress(String bindAddress){  if (bindAddress == null) {    return DistributionConfig.DEFAULT_BIND_ADDRESS;  }  return bindAddress;}  }
class C{  @Override final LWComponentPeer<?,?> findPeerAt(int x,int y){  LWComponentPeer<?,?> peer=super.findPeerAt(x,y);  final Rectangle r=getBounds();  x-=r.x;  y-=r.y;  if (peer != null && getContentSize().contains(x,y)) {synchronized (getPeerTreeLock()) {      for (int i=childPeers.size() - 1; i >= 0; --i) {        LWComponentPeer<?,?> p=childPeers.get(i).findPeerAt(x,y);        if (p != null) {          peer=p;          break;        }      }    }  }  return peer;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void read(final byte[] bits,int len) throws IOException {  if (ASSERTS)   assert fill < 32 : fill + " >= " + 32;  if (len <= fill) {    if (len <= 8) {      bits[0]=(byte)(readFromCurrent(len) << 8 - len);      return;    } else     if (len <= 16) {      bits[0]=(byte)(readFromCurrent(8));      bits[1]=(byte)(readFromCurrent(len - 8) << 16 - len);      return;    } else     if (len <= 24) {      bits[0]=(byte)(readFromCurrent(8));      bits[1]=(byte)(readFromCurrent(8));      bits[2]=(byte)(readFromCurrent(len - 16) << 24 - len);      return;    } else {      bits[0]=(byte)(readFromCurrent(8));      bits[1]=(byte)(readFromCurrent(8));      bits[2]=(byte)(readFromCurrent(8));      bits[3]=(byte)(readFromCurrent(len - 24) << 32 - len);      return;    }  } else {    int i, j=0, b;    if (fill >= 24) {      bits[j++]=(byte)(readFromCurrent(8));      bits[j++]=(byte)(readFromCurrent(8));      bits[j++]=(byte)(readFromCurrent(8));      len-=24;    } else     if (fill >= 16) {      bits[j++]=(byte)(readFromCurrent(8));      bits[j++]=(byte)(readFromCurrent(8));      len-=16;    } else     if (fill >= 8) {      bits[j++]=(byte)(readFromCurrent(8));      len-=8;    }    final int shift=fill;    if (shift != 0) {      bits[j]=(byte)(readFromCurrent(shift) << 8 - shift);      len-=shift;      i=len >> 3;      while (i-- != 0) {        b=read();        bits[j]|=(b & 0xFF) >>> shift;        bits[++j]=(byte)(b << 8 - shift);      }    } else {      i=len >> 3;      while (i-- != 0)       bits[j++]=(byte)read();    }    readBits+=len & ~7;    len&=7;    if (len != 0) {      if (shift == 0)       bits[j]=0;      if (len <= 8 - shift) {        bits[j]|=(byte)(readFromCurrent(len) << 8 - shift - len);      } else {        bits[j]|=(byte)(readFromCurrent(8 - shift));        bits[j + 1]=(byte)(readFromCurrent(len + shift - 8) << 16 - shift - len);      }    }  }}  }
class C{  private void invokeAction(String name,Action altAction){  ActionMap map=getActionMap();  Action action=null;  if (map != null) {    action=map.get(name);  }  if (action == null) {    installDefaultTransferHandlerIfNecessary();    action=altAction;  }  action.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,(String)action.getValue(Action.NAME),EventQueue.getMostRecentEventTime(),getCurrentEventModifiers()));}  }
class C{  @Override protected Object processEntity(String bodyText) throws ODataException {  return new ODataBatchRequestParser().parseBatch(bodyText);}  }
class C{  private TagEntity createTagEntity(TagTypeEntity tagTypeEntity,String tagCode,String displayName,String description,TagEntity parentTagEntity){  TagEntity tagEntity=new TagEntity();  tagEntity.setTagType(tagTypeEntity);  tagEntity.setTagCode(tagCode);  tagEntity.setDisplayName(displayName);  tagEntity.setDescription(description);  tagEntity.setParentTagEntity(parentTagEntity);  return tagDao.saveAndRefresh(tagEntity);}  }
class C{  private static ByteBuffer generateWavData(int sampleCount,int freqHz){  final int numDataBytes=sampleCount * NUM_CHANNELS * BITS_PER_SAMPLE / 8;  final double freq=freqHz;  ByteBuffer buf=ByteBuffer.allocate(numDataBytes);  buf.order(ByteOrder.LITTLE_ENDIAN);  if (BITS_PER_SAMPLE == 8) {    final double peak=127.0;    for (int i=0; i < sampleCount; i++) {      double timeSec=i / (double)SAMPLE_RATE;      double sinValue=Math.sin(2 * Math.PI * freq* timeSec);      if (GameSurfaceRenderer.EXTRA_CHECK) {        int output=(int)(peak * sinValue + 127.0);        if (output < 0 || output >= 256) {          throw new RuntimeException("bad byte gen");        }      }      buf.put((byte)(peak * sinValue + 127.0));    }  } else   if (BITS_PER_SAMPLE == 16) {    final double peak=32767.0;    ShortBuffer sbuf=buf.asShortBuffer();    for (int i=0; i < sampleCount; i++) {      double timeSec=i / (double)SAMPLE_RATE;      double sinValue=Math.sin(2 * Math.PI * freq* timeSec);      sbuf.put((short)(peak * sinValue));    }  }  buf.position(0);  return buf;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.811 -0500",hash_original_method="23DC2F7DC5C53386402D5B95D046A59E",hash_generated_method="7F8E015CCB62475EF679AD9556264DF4") public final int countDataSchemes(){  return mDataSchemes != null ? mDataSchemes.size() : 0;}  }
class C{  protected Component createNode(Object node,int depth){  if (multilineMode) {    SpanButton cmp=new SpanButton(childToDisplayLabel(node));    cmp.setUIID("TreeNode");    cmp.setTextUIID("TreeNode");    if (model.isLeaf(node)) {      cmp.setIcon(nodeImage);    } else {      cmp.setIcon(folder);    }    updateNodeComponentStyle(cmp.getSelectedStyle(),depth);    updateNodeComponentStyle(cmp.getUnselectedStyle(),depth);    updateNodeComponentStyle(cmp.getPressedStyle(),depth);    return cmp;  }  return createNodeComponent(node,depth);}  }
class C{  public static void resetColorBars(){  if (instance == null) {    return;  }  instance.reset();}  }
class C{  @Override public Long zremrangeByRank(final byte[] key,final long start,final long end){  checkIsInMultiOrPipeline();  client.zremrangeByRank(key,start,end);  return client.getIntegerReply();}  }
class C{  @Override protected boolean includeWriteAttribute(Method method,String beanKey){  Method interfaceMethod=findJmxMethod(method,beanKey);  boolean operation=interfaceMethod != null && attributeSource.getManagedOperation(interfaceMethod) != null;  boolean result=interfaceMethod != null && !operation;  return result;}  }
class C{  @Snippet public static void arraycopySlowPathIntrinsic(Object src,int srcPos,Object dest,int destPos,int length,@ConstantParameter JavaKind elementKind,@ConstantParameter SnippetInfo slowPath,@ConstantParameter Object slowPathArgument){  Object nonNullSrc=GraalDirectives.guardingNonNull(src);  Object nonNullDest=GraalDirectives.guardingNonNull(dest);  KlassPointer srcHub=loadHub(nonNullSrc);  KlassPointer destHub=loadHub(nonNullDest);  checkArrayType(srcHub);  checkArrayType(destHub);  checkLimits(nonNullSrc,srcPos,nonNullDest,destPos,length);  if (length == 0) {    zeroLengthDynamicCounter.inc();  } else {    nonZeroLengthDynamicCounter.inc();    nonZeroLengthDynamicCopiedCounter.add(length);  }  ArrayCopySlowPathNode.arraycopy(nonNullSrc,srcPos,nonNullDest,destPos,length,elementKind,slowPath,slowPathArgument);}  }
class C{  public int copyDetailsFrom(MProject project){  if (isProcessed() || project == null)   return 0;  int count=copyLinesFrom(project) + copyPhasesFrom(project);  return count;}  }
class C{  public static void copy(Context context,Uri uri){  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);  clipboard.setPrimaryClip(ClipData.newUri(context.getContentResolver(),null,uri));}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void performActions() throws Throwable {  for (  Throwing.Runnable action : actions) {    action.run();  }}  }
class C{  public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot,boolean lenientParse){  return append0(new TwoDigitYear(DateTimeFieldType.weekyear(),pivot,lenientParse));}  }
class C{  public Long updateRoom(long user_level,long rooms_id,long roomtypes_id,String name,boolean ispublic,String comment,Long numberOfPartizipants,List<Integer> organisations,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,List<Map<String,Object>> roomModerators,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean isClosed,String redirectURL,String sipNumber,String conferencePin,Long ownerId,Boolean waitForRecording,Boolean allowRecording,Boolean hideTopBar,Boolean hideChat,Boolean hideActivitiesAndActions,Boolean hideFilesExplorer,Boolean hideActionsMenu,Boolean hideScreenSharing,Boolean hideWhiteboard,Boolean showMicrophoneStatus){  try {    log.debug("*** updateRoom numberOfPartizipants: " + numberOfPartizipants);    if (authLevelManagement.checkAdminLevel(user_level)) {      return this.updateRoomInternal(rooms_id,roomtypes_id,name,ispublic,comment,numberOfPartizipants,organisations,appointment,isDemoRoom,demoTime,isModeratedRoom,roomModerators,allowUserQuestions,isAudioOnly,isClosed,redirectURL,sipNumber,conferencePin,ownerId,waitForRecording,allowRecording,hideTopBar,hideChat,hideActivitiesAndActions,hideFilesExplorer,hideActionsMenu,hideScreenSharing,hideWhiteboard,showMicrophoneStatus);    }  } catch (  Exception ex2) {    log.error("[updateRoom] ",ex2);  }  return null;}  }
class C{  @Override protected void shutdownOutput() throws IOException {  try {    Libcore.os.shutdown(fd,SHUT_WR);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public static List<SootClass> smallestConcreteSetofImplementors(SootClass clz){  List<SootClass> clazzes=new LinkedList<SootClass>();  Hierarchy h=Scene.v().getActiveHierarchy();  if (clz.isConcrete()) {    clazzes.add(clz);    return clazzes;  }  List<SootClass> imps;  if (clz.isAbstract() && !clz.isInterface()) {    imps=h.getDirectSubclassesOf(clz);  } else   if (clz.isInterface()) {    imps=new LinkedList<SootClass>();    imps.addAll(h.getImplementersOf(clz));    imps.addAll(h.getSubinterfacesOf(clz));  } else {    return clazzes;  }  for (  SootClass imp : imps) {    if (imp.isConcrete())     clazzes.add(imp); else     clazzes.addAll(smallestConcreteSetofImplementors(imp));  }  return clazzes;}  }
class C{  public AnimationBuilder translationX(float... x){  return property("translationX",x);}  }
class C{  public static RawHeaders fromMultimap(Map<String,List<String>> map,boolean response) throws IOException {  if (!response)   throw new UnsupportedOperationException();  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      for (      String value : values) {        result.addLenient(fieldName,value);      }    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  public void add(final Modulo2Equation equation){  this.c^=equation.c;  final long[] x=this.bits, y=equation.bits;  long isNotEmpty=0;  for (int i=x.length; i-- != 0; )   isNotEmpty|=(x[i]^=y[i]);  isEmpty=isNotEmpty == 0;}  }
class C{  private void initMediaRequest(GDataRequest request,MediaSource media){  initMediaRequest(request,media.getName());}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public static double exp(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Rate lambda must be positive");  return -Math.log(1 - uniform()) / lambda;}  }
class C{  public void addNodes(DTMIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  if (null != iterator) {    int obj;    while (DTM.NULL != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  @Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.REVERSE_DICTIONARY));}  }
class C{  @Override public void reportSkippedAnalysis(MethodDescriptor method){  delegate.reportSkippedAnalysis(method);}  }
class C{  private void onMove(float x,float y){  if (mMaybeSingleTap && (distSq(mEntryPoint,x,y) >= mSingleTapRadiusSq)) {    mMaybeSingleTap=false;  }  final TouchedMenuItem touchedItem=getTouchedMenuItem(x,y);  if (!mMaybeSingleTap || (touchedItem.item == null) || touchedItem.isDirectTouch) {    onItemFocused(touchedItem.item);  }  if ((touchedItem.item == null) && !mDisplayWedges) {    mDisplayWedges=true;    displayAt(x,y);  }}  }
class C{  public long readLong() throws IOException {  return (((long)read() << 56) + ((long)read() << 48) + ((long)read() << 40)+ ((long)read() << 32)+ ((long)read() << 24)+ ((long)read() << 16)+ ((long)read() << 8)+ ((long)read()));}  }
class C{  public boolean hasPortfolioData(){  return hasExtension(PortfolioData.class);}  }
class C{  private static CimListener createListener(){  CimListenerInfo listenerInfo=new CimListenerInfo();  listenerInfo.setHostIP(LISTENER_IP);  listenerInfo.setPort(LISTENER_PORT);  listenerInfo.setProtocol(LISTENER_PROTOCOL);  listenerInfo.setQueueSize(LISTENER_QUEUE_SIZE);  ArrayList<CimIndicationConsumer> consumers=new ArrayList<CimIndicationConsumer>();  CimListener listener=new CimListener(listenerInfo,new CimIndicationConsumerList(consumers));  return listener;}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction newPINode;  String piValue;  String piName;  int piType;  doc=(Document)load("staff",true);  newPINode=doc.createProcessingInstruction("TESTPI","This is a new PI node");  assertNotNull("createdPINotNull",newPINode);  piName=newPINode.getNodeName();  assertEquals("name","TESTPI",piName);  piValue=newPINode.getNodeValue();  assertEquals("value","This is a new PI node",piValue);  piType=(int)newPINode.getNodeType();  assertEquals("type",7,piType);}  }
class C{  public void test_allocationContexts() throws IOException {  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    final IAllocationContext allocContext1=rw.newAllocationContext(true);    final IAllocationContext allocContext2=rw.newAllocationContext(true);    final int sze=650;    final byte[] buf=new byte[sze + 4];    r.nextBytes(buf);    final long addr1a=bs.write(ByteBuffer.wrap(buf),allocContext1);    final long addr1b=bs.write(ByteBuffer.wrap(buf),allocContext1);    rw.detachContext(allocContext1);    final long addr2a=bs.write(ByteBuffer.wrap(buf),allocContext2);    final long addr2b=bs.write(ByteBuffer.wrap(buf),allocContext2);    rw.detachContext(allocContext2);    try {      bs.write(ByteBuffer.wrap(buf),allocContext1);      fail("Should have failed to re-use detached context");    } catch (    IllegalStateException ise) {    }    final IAllocationContext allocContext3=rw.newAllocationContext(true);    final long addr1c=bs.write(ByteBuffer.wrap(buf),allocContext3);    assertTrue("allocator re-use",bs.getPhysicalAddress(addr1c) > bs.getPhysicalAddress(addr2b));    bs.delete(addr1c,allocContext3);    final long addr1d=bs.write(ByteBuffer.wrap(buf),allocContext3);    assertTrue("re-allocation",addr1c == addr1d);    rw.detachContext(allocContext3);    store.commit();    bs.delete(addr1d);    final long addr1e=bs.write(ByteBuffer.wrap(buf));    assertTrue("deferred-delete",addr1e != addr1d);    store.commit();  }  finally {    store.destroy();  }}  }
class C{  @Override public NotificationObject copy(){  return new NotificationObject(this);}  }
class C{  private static String decodeFormFields(final String content,final Charset charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? charset : Charset.forName(HTTP.UTF_8),true);}  }
class C{  public static byte[] toByteArray(BaggageMessage message){  if (message != null) {    try {      return message.toByteArray();    } catch (    Throwable t) {    }  }  return ArrayUtils.EMPTY_BYTE_ARRAY;}  }
class C{  private void testSame(OverloadedMethodsSubset oms){  assertEquals(char.class,oms.getCommonSupertypeForUnwrappingHint(char.class,char.class));  assertEquals(Integer.class,oms.getCommonSupertypeForUnwrappingHint(Integer.class,Integer.class));  assertEquals(String.class,oms.getCommonSupertypeForUnwrappingHint(String.class,String.class));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void print(int[] picks){  String[] suits={"Spades","Hearts","Diamonds","Clubs"};  String[] ranks={"Ace","2","3","4","5","6","7","8","9","10","Jack","Queen","King"};  for (int i=0; i < picks.length; i++) {    System.out.println(ranks[picks[i] % 13] + " of " + suits[picks[i] / 13]);  }}  }
class C{  public Instances resampleWithWeights(Random random,boolean representUsingWeights){  return resampleWithWeights(random,null,representUsingWeights);}  }
class C{  public static Frustum fromPerspective(Angle horizontalFieldOfView,int viewportWidth,int viewportHeight,double near,double far){  if (horizontalFieldOfView == null) {    throw new IllegalArgumentException("Field Of View Is Null");  }  double fov=horizontalFieldOfView.getDegrees();  double farMinusNear=far - near;  if (fov <= 0 || fov > 180)   throw new IllegalArgumentException("Field Of View Out Of Range");  if (near <= 0 || farMinusNear <= 0)   throw new IllegalArgumentException("Clipping Distance Out Of Range");  double focalLength=1d / horizontalFieldOfView.tanHalfAngle();  double aspect=viewportHeight / (double)viewportWidth;  double lrLen=Math.sqrt(focalLength * focalLength + 1);  double btLen=Math.sqrt(focalLength * focalLength + aspect * aspect);  Plane leftPlane=new Plane(focalLength / lrLen,0d,0d - 1d / lrLen,0);  Plane rightPlane=new Plane(0d - focalLength / lrLen,0d,0d - 1d / lrLen,0d);  Plane bottomPlane=new Plane(0d,focalLength / btLen,0d - aspect / btLen,0d);  Plane topPlane=new Plane(0d,0d - focalLength / btLen,0d - aspect / btLen,0d);  Plane nearPlane=new Plane(0d,0d,0d - 1d,0d - near);  Plane farPlane=new Plane(0d,0d,1d,far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public int format(double val,byte[] buf,int off,int len){  double pos=Math.abs(val);  if (pos == 0.) {    return format("0.0",buf,off,len);  } else   if (Double.isNaN(val)) {    return format(NOT_A_NUMBER,buf,off,len);  } else   if (Double.isInfinite(val)) {    if (val > 0) {      return format(INFINITY,buf,off,len);    } else {      return format(NEGATIVE_INFINITY,buf,off,len);    }  }  int power=(int)(Math.log(pos) * ByteFormatter.I_LOG_10);  int shift=DOUBLE_SHIFT_BASE - power;  double scale;  double scale2=1;  if (shift < DOUBLE_SHIFT_LIMIT) {    scale=ByteFormatter.NUMBER_BASE_POWERS[shift + ByteFormatter.ZERO_POW];  } else {    scale2=ByteFormatter.NUMBER_BASE_POWERS[DOUBLE_SHIFT_LIMIT + ByteFormatter.ZERO_POW];    scale=ByteFormatter.NUMBER_BASE_POWERS[shift - DOUBLE_SHIFT_LIMIT + ByteFormatter.ZERO_POW];  }  pos=pos * scale * scale2;  long bits=Double.doubleToLongBits(pos);  int exp=(int)(((bits & DOUBLE_EXPONENT_BIT_MASK) >> DOUBLE_EXPONENT_EXCESS) + DOUBLE_MIN_EXPONENT);  long numb=bits & DOUBLE_VALUE_BIT_MASK;  if (exp > DOUBLE_MIN_EXPONENT) {    numb|=DOUBLE_EXPONENT_NORMALIZE_BIT;  } else {    exp++;  }  numb=numb << exp - DOUBLE_EXPONENT_EXCESS;  int ndig=format(numb,this.tbuf1,0,ByteFormatter.TEMP_BUFFER_SIZE);  return combineReal(val,buf,off,len,this.tbuf1,ndig,shift);}  }
class C{  public void colorMode(int mode,float maxX,float maxY,float maxZ){  g.colorMode(mode,maxX,maxY,maxZ);}  }
class C{  public void firstField(){}  }
class C{  public MqttWireMessage readMqttWireMessage() throws IOException, MqttException {  final String methodName="readMqttWireMessage";  ByteArrayOutputStream bais=new ByteArrayOutputStream();  byte first=in.readByte();  clientState.notifyReceivedBytes(1);  byte type=(byte)((first >>> 4) & 0x0F);  if ((type < MqttWireMessage.MESSAGE_TYPE_CONNECT) || (type > MqttWireMessage.MESSAGE_TYPE_DISCONNECT)) {    throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_INVALID_MESSAGE);  }  long remLen=MqttWireMessage.readMBI(in).getValue();  bais.write(first);  bais.write(MqttWireMessage.encodeMBI(remLen));  byte[] packet=new byte[(int)(bais.size() + remLen)];  readFully(packet,bais.size(),packet.length - bais.size());  byte[] header=bais.toByteArray();  System.arraycopy(header,0,packet,0,header.length);  MqttWireMessage message=MqttWireMessage.createWireMessage(packet);  log.fine(CLASS_NAME,methodName,"501",new Object[]{message});  return message;}  }
class C{  @Deprecated public RegionFactory(RegionAttributes<K,V> regionAttributes) throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory().create(),regionAttributes);}  }
class C{  private boolean inSubrange(int subrange,double value){  return (value > this.subrangeInfo[subrange][RANGE_LOW] && value <= this.subrangeInfo[subrange][RANGE_HIGH]);}  }
class C{  public static OFAction fromString(String val){  String tokens[]=val.split(";");  if (!tokens[0].equals("ofaction"))   throw new IllegalArgumentException("expected 'ofaction' but got '" + tokens[0] + "'");  String type_tokens[]=tokens[1].split("=");  String len_tokens[]=tokens[2].split("=");  OFAction action=new OFAction();  action.setLength(Short.valueOf(len_tokens[1]));  action.setType(OFActionType.valueOf(type_tokens[1]));  return action;}  }
class C{  protected MediaMultipart createMultipart(ParseSource parseSource,InputProperties inputProperties) throws MessagingException {  return new MediaMultipart(inputProperties.getContentType().toString(),parseSource.getInputStream());}  }
class C{  public T caseTypeDefinition(TypeDefinition object){  return null;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PivotDataset)) {    return false;  }  PivotDataset that=(PivotDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public static boolean isWritable(final String file){  if (TextUtils.isEmpty(file)) {    Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given");    return false;  }  return isWritable(new File(file));}  }
class C{  public void sendHeaders(HeaderSet headers) throws IOException {  ensureOpen();  if (mOperationDone) {    throw new IOException("Operation has already exchanged all data");  }  if (headers == null) {    throw new IOException("Headers may not be null");  }  int[] headerList=headers.getHeaderList();  if (headerList != null) {    for (int i=0; i < headerList.length; i++) {      mRequestHeader.setHeader(headerList[i],headers.getHeader(headerList[i]));    }  }}  }
class C{  public NOP(){  super(Void.class);}  }
class C{  public static Distribution guessK(DataSet d){  return new UniformDiscrete(1,25);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"DAO_TEST\" ("+ "\"_ID\" INTEGER PRIMARY KEY AUTOINCREMENT );");}  }
class C{  public void test_X500Principal_01(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  try {    X500Principal xpr=new X500Principal(name);    assertNotNull("Null object returned",xpr);    String resName=xpr.getName();    assertEquals(name,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal((String)null);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of NullPointerException");  }  try {    X500Principal xpr=new X500Principal("X500PrincipalName");    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  @Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public Account createNewAccount(Account account){  Role role=roleService.findByCode("ROLE_USER");  Set<Role> roles=new HashSet<>();  roles.add(role);  if (account.getPassword().length() < 8) {    throw new EntityExistsException("password should be greater than 8 characters");  }  account.setPassword(new BCryptPasswordEncoder().encode(account.getPassword()));  account.setRoles(roles);  return accountRepository.save(account);}  }
class C{  @FlashException(referrer={"fileSystem"}) public static void removeAcl(String aclUrl,@As(",") String[] ids){  ShareACLs aclsToDelete=new ShareACLs();  List<ShareACL> shareAcls=new ArrayList<ShareACL>();  String fileSystem=null;  String shareName=null;  if (ids != null && ids.length > 0) {    for (    String id : ids) {      String type=ShareACLForm.extractTypeFromId(id);      String name=ShareACLForm.extractNameFromId(id);      String domain=ShareACLForm.extractDomainFromId(id);      fileSystem=ShareACLForm.extractFileSystemFromId(id);      shareName=ShareACLForm.extractShareNameFromId(id);      ShareACL ace=new ShareACL();      if ("Group".equalsIgnoreCase(type)) {        ace.setGroup(name);      } else {        ace.setUser(name);      }      if (domain != null && !"".equals(domain) && !"null".equals(domain)) {        ace.setDomain(domain);      }      shareAcls.add(ace);    }    aclsToDelete.setShareACLs(shareAcls);    FileCifsShareACLUpdateParams input=new FileCifsShareACLUpdateParams();    input.setAclsToDelete(aclsToDelete);    ViPRCoreClient client=BourneUtil.getViprClient();    client.fileSystems().updateShareACL(uri(fileSystem),shareName,input);  }  flash.success(MessagesUtils.get(DELETED));  listAcl(fileSystem,shareName);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void addEntryForLocale(List<? extends BillingTableEntry> tableEntries,String locale,List resultList){  if (locale != null) {    for (    BillingTableEntry entry : tableEntries) {      if (entry.localeEquals(locale)) {        resultList.add(entry);        break;      }    }  }}  }
class C{  public void testANDImplicit() throws Exception {  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(new TermQuery(new Term("field","foo")),Occur.MUST);  expected.add(new TermQuery(new Term("field","bar")),Occur.MUST);  assertEquals(expected.build(),parse("foo bar"));}  }
class C{  public static int generateRandomBetween(int start,int end){  Random random=new Random();  int rand=random.nextInt(Integer.MAX_VALUE - 1) % end;  if (rand < start) {    rand=start;  }  return rand;}  }
class C{  public String intValueToStringValue(Integer intVal){  if (intVal == null)   return null;  final String enumString=enumIntToStringMap.get(intVal);  if (enumString != null)   return enumString;  return DEFAULT_VALUE.toString();}  }
class C{  public NceConsistRosterEntry entryFromTitle(String title){  for (int i=0; i < numEntries(); i++) {    NceConsistRosterEntry r=_list.get(i);    if (r.titleString().equals(title)) {      return r;    }  }  return null;}  }
class C{  public CViewTableListener(){  m_originContainer.addListener(m_containerListener);}  }
class C{  Region(Region r){  this(r.start(),r.end());}  }
class C{  public ToStringBuilder append(final String fieldName,final Object[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static <NodeType extends IGraphNode<NodeType>>Collection<NodeType> collectParents(final NodeType node,final INodeFilter<NodeType> filter){  Preconditions.checkNotNull(node,"Error: Node argument can't be null");  return collectNodes(node.getParents(),filter);}  }
class C{  private static OptimizationContext createContext(CommandLine cmdLine) throws KeywordOptimizerException {  String adsPropertiesPath=ADS_PROPERTIES_DEFAULT_PATH;  if (cmdLine.hasOption("ap")) {    adsPropertiesPath=cmdLine.getOptionValue("ap");  }  log("Using ads properties file: " + adsPropertiesPath);  try {    AdWordsApiUtil util=new AdWordsApiUtil(adsPropertiesPath);    Configuration configuration=loadConfiguration(cmdLine);    return new OptimizationContext(configuration,util);  } catch (  ConfigurationLoadException e) {    throw new KeywordOptimizerException("Error loading the ads properties file",e);  }catch (  ValidationException e) {    throw new KeywordOptimizerException("Missing refresh token",e);  }catch (  OAuthException e) {    throw new KeywordOptimizerException("Authentication error",e);  }}  }
class C{  public TestMonitoringFilter(){  super();  Utils.initialize();}  }
class C{  public static LPlugin loadPlugin(Activity proxyParent,String apkPath){  finalApkPath=apkPath;  LPlugin plugin=null;  plugin=pluginsMapForPath.get(apkPath);  if (plugin == null) {    plugin=new LPlugin(proxyParent,apkPath);  }  return plugin;}  }
class C{  public final void handleUserException(AdeUsageException e){  debugAssist(e);  final int return_value=messageConvertReturnValue(e.getMessage(),100);  systemExitAssist(return_value);}  }
class C{  public StringAttributeRule(String name,String description,String example,boolean optional){  this(name,description,example,optional,0,Integer.MAX_VALUE);}  }
class C{  public static void alert(Activity activity,boolean error){  Vibrator vib=((Vibrator)activity.getSystemService(Context.VIBRATOR_SERVICE));  if (vib.hasVibrator()) {    vib.vibrate(Utils.SHORT_VIBRATE);  } else   if (error) {    Animation flash=AnimationUtils.loadAnimation(activity,R.anim.flash);    View main=activity.findViewById(R.id.frame_all);    main.startAnimation(flash);  }}  }
class C{  public void testNegNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-57,-101,-5,-5,-18,-38,-17,-2,-65,-2,-11,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  public static <T>T detectIfNone(Iterable<T> iterable,Predicate<? super T> predicate,T ifNone){  T result=Iterate.detect(iterable,predicate);  return result == null ? ifNone : result;}  }
class C{  public static ChannelAspectInformation unresolved(final String factoryId){  return new ChannelAspectInformation(factoryId);}  }
class C{  private void updateGUI(){  final boolean textChanged=!m_nameTextField.getText().equals(m_tagTreeNode.getObject().getName());  final boolean descriptionChanged=!m_descriptionField.getText().equals(m_tagTreeNode.getObject().getDescription());  m_saveButton.setEnabled(textChanged || descriptionChanged);  m_nameTextField.setModified(textChanged);  m_descriptionField.setModified(descriptionChanged);}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  @RequestMapping(value="/be/taxreceipts/viewreceipt",method=RequestMethod.GET) public ResponseEntity<byte[]> viewReceipt(@RequestParam(value="s3ObjectName",required=true) String s3ObjectName) throws AmazonClientException, AmazonServiceException, IOException {  BufferedInputStream bufferedInputStream=s3Retrieve.startDownload(s3ObjectName);  byte[] bytes=IOUtils.toByteArray(bufferedInputStream);  final HttpHeaders headers=new HttpHeaders();  headers.setContentType(MediaType.IMAGE_JPEG);  return new ResponseEntity<>(bytes,headers,HttpStatus.CREATED);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void testGetPolicyQualifierId() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  assertEquals("1.3.6.1.5.5.7.2.1",i.getPolicyQualifierId());  encoding=getDerEncoding();  encoding[5]=(byte)0x86;  encoding[6]=(byte)0x81;  encoding[8]=(byte)0x85;  encoding[9]=(byte)0x87;  i=new PolicyQualifierInfo(encoding);  assertEquals("1.3.98437.82818.1",i.getPolicyQualifierId());}  }
class C{  public synchronized void dragEnter(DropTargetDragEvent dtde){  isDraggingInside=true;  if (!active)   return;  if (dtListener != null) {    dtListener.dragEnter(dtde);  } else   dtde.getDropTargetContext().setTargetActions(DnDConstants.ACTION_NONE);  initializeAutoscrolling(dtde.getLocation());}  }
class C{  synchronized boolean lockShared(){  if (isLockedExclusive) {    return false;  }  sharedLockCount++;  return true;}  }
class C{  public static LinkProperties read(DataInput dis,LinkProperties props) throws IOException {  int numArgs=dis.readInt();  if (numArgs == 0) {    return EMPTY_PROPERTIES;  }  if (props == null) {    props=new LinkProperties();  }  props.readArgs(numArgs,dis);  return props;}  }
class C{  private Pair<BigDecimal,BigDecimal> fillPaymentAmount(final CustomerOrder order,final CustomerOrderDelivery delivery,final Payment payment,final boolean singlePay,final BigDecimal runningTotal,final BigDecimal runningTotalTax,final boolean lastDelivery){  BigDecimal itemsAndShipping=Total.ZERO;  BigDecimal itemsAndShippingTax=Total.ZERO;  if (singlePay) {    itemsAndShipping=order.getOrderTotal();    itemsAndShippingTax=order.getOrderTotalTax();  } else   if (lastDelivery) {    itemsAndShipping=order.getOrderTotal().subtract(runningTotal);    itemsAndShippingTax=order.getOrderTotalTax().subtract(runningTotalTax);  } else {    BigDecimal itemsOnly=Total.ZERO;    BigDecimal itemsOnlyTax=Total.ZERO;    BigDecimal shippingOnly=Total.ZERO;    BigDecimal shippingOnlyTax=Total.ZERO;    for (    PaymentLine paymentLine : payment.getOrderItems()) {      if (paymentLine.isShipment()) {        final BigDecimal shipping=paymentLine.getUnitPrice().setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);        final BigDecimal shippingTax=paymentLine.getTaxAmount().setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);        itemsAndShipping=itemsAndShipping.add(shipping);        shippingOnly=shippingOnly.add(shipping);        shippingOnlyTax=shippingOnlyTax.add(shippingTax);      } else {        final BigDecimal item=paymentLine.getQuantity().multiply(paymentLine.getUnitPrice()).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);        final BigDecimal itemTax=paymentLine.getQuantity().multiply(paymentLine.getTaxAmount()).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);        itemsAndShipping=itemsAndShipping.add(item);        itemsOnly=itemsOnly.add(item);        itemsOnlyTax=itemsOnlyTax.add(itemTax);      }    }    if (order.isPromoApplied()) {      BigDecimal orderTotalList=BigDecimal.ZERO;      for (      final CustomerOrderDet detail : order.getOrderDetail()) {        orderTotalList=orderTotalList.add(detail.getQty().multiply(detail.getGrossPrice()).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP));      }      final BigDecimal orderTotal=order.getGrossPrice();      final BigDecimal discount=orderTotalList.subtract(orderTotal).divide(orderTotalList,10,RoundingMode.HALF_UP);      itemsAndShipping=itemsOnly.multiply(BigDecimal.ONE.subtract(discount)).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);      itemsAndShippingTax=itemsOnlyTax.multiply(BigDecimal.ONE.subtract(discount)).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);      itemsAndShipping=itemsAndShipping.add(shippingOnly);      itemsAndShippingTax=itemsAndShippingTax.add(shippingOnlyTax);    }  }  payment.setPaymentAmount(itemsAndShipping);  payment.setTaxAmount(itemsAndShippingTax);  payment.setOrderCurrency(order.getCurrency());  payment.setOrderLocale(order.getLocale());  return new Pair<BigDecimal,BigDecimal>(itemsAndShipping,itemsAndShippingTax);}  }
class C{  protected void transmitAtEndOfTask(final Task<Revision> task,final Task<Diff> result) throws TimeoutException {  if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {    if (this.partCounter > 1) {      this.result.setTaskType(TaskTypes.TASK_PARTIAL_LAST);      this.taskTransmitter.transmitPartialDiff(result);    } else {      this.result.setTaskType(TaskTypes.TASK_FULL);      this.taskTransmitter.transmitDiff(result);    }    this.result=null;  }}  }
class C{  public static String requestNextMessage() throws InterruptedException {synchronized (requestLock) {    nextLineRequested=true;    requestLock.wait();    nextLineRequested=false;    return ln;  }}  }
class C{  public OrganizationAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void init(String[] args){}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (documentHandler != null) {    qAtts.setAttributes(atts);    documentHandler.startElement(qName,qAtts);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.817 -0500",hash_original_method="5E3073F0FEC53FA8E5673A840E14FE8B",hash_generated_method="E9579E9C6D35736EB98E8A83BB7E0C9E") public void start() throws IOException {  this.isRunning=true;  Thread thread=new Thread(this);  thread.setDaemon(true);  thread.setName("UDPMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.start();}  }
class C{  private void generateClass() throws FileNotFoundException, JasperException, Exception {  long t1=0;  if (log.isLoggable(Level.FINE)) {    t1=System.currentTimeMillis();  }  String javaFileName=ctxt.getServletJavaFileName();  setJavaCompilerOptions();  JavacErrorDetail[] javacErrors=javaCompiler.compile(ctxt.getFullClassName(),pageNodes);  if (javacErrors != null) {    javaCompiler.doJavaFile(true);    log.severe("Error compiling file: " + javaFileName);    errDispatcher.javacError(javacErrors);  }  if (log.isLoggable(Level.FINE)) {    long t2=System.currentTimeMillis();    log.fine("Compiled " + javaFileName + " "+ (t2 - t1)+ "ms");  }  javaCompiler.doJavaFile(ctxt.keepGenerated());  if (!ctxt.isPrototypeMode() && !options.isSmapSuppressed()) {    smapUtil.installSmap();  }  if (jsw != null && jsw.getServletClassLastModifiedTime() <= 0) {    jsw.setServletClassLastModifiedTime(javaCompiler.getClassLastModified());  }  if (options.getSaveBytecode()) {    javaCompiler.saveClassFile(ctxt.getFullClassName(),ctxt.getClassFileName());  }  ctxt.getRuntimeContext().adjustBytecodeTime(ctxt.getFullClassName(),jspModTime);}  }
class C{  @Override public void dispose(){}  }
class C{  public XAtomList(){}  }
class C{  public boolean removeNode(Node node){  if (nodes.contains(node)) {    return false;  }  List<Node> _nodes=new ArrayList<>(nodes);  nodes.remove(node);  namesHash.remove(node.getName());  reconstituteGraphMatrix(_nodes,nodes);  initHashes();  stuffRemovedSinceLastTripleAccess=true;  return true;}  }
class C{  public Task create(String name) throws IOException {  Map<String,String> map=new HashMap<>();  map.put("name",name);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,getBasePath(),serializeObjectAsJson(map));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.TRACE_STATE_ENTERED__STATE:    setState((ExecutionState)null);  return;}super.eUnset(featureID);}  }
class C{  void remove(){  disableSML(getSignalAMast());  disableSML(getSignalBMast());  disableSML(getSignalCMast());  disableSML(getSignalDMast());  removeSML(getSignalAMast());  removeSML(getSignalBMast());  removeSML(getSignalCMast());  removeSML(getSignalDMast());  active=false;}  }
class C{  public PaletteColorSliderUI(JSlider b){  super(b);}  }
class C{  public RecordableHistoryEvent(String eventType,Recordable recordable,String referrer,String action,Map<String,String> parameters){  this(eventType,System.currentTimeMillis(),recordable,referrer,action,parameters);}  }
class C{  public void mouseClicked(MouseEvent e){  if (m_readWrite && SwingUtilities.isRightMouseButton(e)) {    int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());    if (e.getSource() == this && m_wf != null) {      m_NewPopupMenu.show(this,e.getX(),e.getY());    } else     if (e.getSource() instanceof WFNode) {      MWFNode node=((WFNode)e.getSource()).getModel();      m_LinePopupMenu=new JPopupMenu(node.getName());      if (node.getAD_Client_ID() == AD_Client_ID) {        String title=Msg.getMsg(Env.getCtx(),"DeleteNode") + ": " + node.getName();        addMenuItem(m_LinePopupMenu,title,node,-1);        m_LinePopupMenu.addSeparator();      }      MWFNode[] nodes=m_wf.getNodes(true,AD_Client_ID);      MWFNodeNext[] lines=node.getTransitions(AD_Client_ID);      for (int n=0; n < nodes.length; n++) {        MWFNode nn=nodes[n];        if (nn.getAD_WF_Node_ID() == node.getAD_WF_Node_ID())         continue;        boolean found=false;        for (int i=0; i < lines.length; i++) {          MWFNodeNext line=lines[i];          if (nn.getAD_WF_Node_ID() == line.getAD_WF_Next_ID()) {            found=true;            break;          }        }        if (!found) {          String title=Msg.getMsg(Env.getCtx(),"AddLine") + ": " + node.getName()+ " -> "+ nn.getName();          addMenuItem(m_LinePopupMenu,title,node,nn.getAD_WF_Node_ID());        }      }      m_LinePopupMenu.addSeparator();      for (int i=0; i < lines.length; i++) {        MWFNodeNext line=lines[i];        if (line.getAD_Client_ID() != AD_Client_ID)         continue;        MWFNode next=MWFNode.get(Env.getCtx(),line.getAD_WF_Next_ID());        String title=Msg.getMsg(Env.getCtx(),"DeleteLine") + ": " + node.getName()+ " -> "+ next.getName();        addMenuItem(m_LinePopupMenu,title,line);      }      m_LinePopupMenu.show(this,e.getX(),e.getY());    }  } else   if (e.getSource() instanceof WFNode) {    WFNode selected=(WFNode)e.getSource();    log.fine(selected.toString());    for (int i=0; i < m_nodes.size(); i++) {      WFNode node=(WFNode)m_nodes.get(i);      if (selected.getAD_WF_Node_ID() == node.getAD_WF_Node_ID())       node.setSelected(true); else       node.setSelected(false);    }  }  m_dragged=false;}  }
class C{  public UserDeletionConstraintException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected void onClusterRendered(Cluster<ClusterStatus> cluster,Marker marker){}  }
class C{  final static void assertWriteTime(long writeTime){  if (writeTime == AUTO_TIMESTAMP)   return;  if (writeTime == AUTO_TIMESTAMP_UNIQUE)   return;  if (writeTime < MIN_TIMESTAMP)   throw new IllegalArgumentException();}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public static ResponseHandler createResponseHandler(HttpMethod method) throws MethodNotAllowedException {  if (!AllowedMethodHandler.methodAllowed(method)) {    throw new MethodNotAllowedException("The method " + method.getName() + " is not in the AllowedHeaderHandler's list of allowed methods.",AllowedMethodHandler.getAllowHeader());  }  ResponseHandler handler=null;  if (method.getName().equals("OPTIONS")) {    handler=new OptionsResponseHandler((OptionsMethod)method);  } else   if (method.getName().equals("GET")) {    handler=new GetResponseHandler((GetMethod)method);  } else   if (method.getName().equals("HEAD")) {    handler=new HeadResponseHandler((HeadMethod)method);  } else   if (method.getName().equals("POST")) {    handler=new PostResponseHandler((PostMethod)method);  } else   if (method.getName().equals("PUT")) {    handler=new PutResponseHandler((PutMethod)method);  } else   if (method.getName().equals("DELETE")) {    handler=new DeleteResponseHandler((DeleteMethod)method);  } else   if (method.getName().equals("TRACE")) {    handler=new TraceResponseHandler((TraceMethod)method);  } else {    throw new MethodNotAllowedException("The method " + method.getName() + " was allowed by the AllowedMethodHandler, not by the factory.",handledMethods);  }  return handler;}  }
class C{  public nobr(String value){  addElement(value);}  }
class C{  protected void loadChars(AbstractMRReply msg,DataInputStream istream) throws java.io.IOException {  int i;  for (i=0; i < msg.maxSize(); i++) {    byte char1=readByteProtected(istream);    if (i == 0 && char1 != ':') {      while (char1 != ':') {        char1=readByteProtected(istream);      }    }    if (flushReceiveChars) {      log.warn("timeout flushes receive buffer: " + msg.toString());      msg.flush();      i=0;      flushReceiveChars=false;    }    if (canReceive()) {      msg.setElement(i,char1);      if (endOfMessage(msg)) {        break;      }    } else {      i--;      log.error("unsolicited character received: " + Integer.toHexString(char1));    }  }}  }
class C{  private PDFObject readObjectDescription(int objNum,int objGen,PDFDecrypter decrypter) throws IOException {  long debugpos=buf.position();  PDFObject obj=readObject(objNum,objGen,decrypter);  PDFObject endkey=readObject(objNum,objGen,decrypter);  if (endkey.getType() != PDFObject.KEYWORD) {    throw new PDFParseException("Expected 'stream' or 'endobj'");  }  if (obj.getType() == PDFObject.DICTIONARY && endkey.getStringValue().equals("stream")) {    readLine();    ByteBuffer data=readStream(obj);    if (data == null) {      data=ByteBuffer.allocate(0);    }    obj.setStream(data);    endkey=readObject(objNum,objGen,decrypter);  }  String endcheck=endkey.getStringValue();  if (endcheck == null || !endcheck.equals("endobj")) {    System.out.println("WARNING: object at " + debugpos + " didn't end with 'endobj'");  }  obj.setObjectId(objNum,objGen);  return obj;}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("mqttClientPublisher");  TStream<String> msgs=t.poll(new MsgSupplier(options.get(OPT_PUB_CNT)),1L,TimeUnit.SECONDS);  MqttConfig config=Runner.newConfig(options);  MqttStreams mqtt=new MqttStreams(t,null);  mqtt.publish(msgs,options.get(OPT_TOPIC),options.get(OPT_QOS),options.get(OPT_RETAIN));  return t;}  }
class C{  private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void flush(){  flush(FlushReason.EXPLICIT);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ValidationPackage.VALIDATION_MARKER__DELEGATE_RESOURCE:    return getDelegateResource();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int compare(JavaScriptElement element1,Element element2){  if (element2 instanceof JavaScriptElement) {    return compare(element1,(JavaScriptElement)element2);  }  return -1;}  }
class C{  public CFunctionFilterComponent(final IViewContainer module){  super(new BorderLayout());  this.module=module;  if (GraphicsEnvironment.isHeadless()) {    dialog=null;  } else {    dialog=new CFunctionFilterDialog(module.getDatabase().getContent().getViewTagManager(),module.getDatabase().getContent().getNodeTagManager());    dialog.addListener(filterDialogListener);  }  add(new JButton(new CFilterAction()));}  }
class C{  public static Sentence parse(final String text,final ExpressionMatcher matcher){  Sentence sentence;  if (matcher == null) {    sentence=parse(text,new ConversationContext());  } else {    sentence=matcher.parseSentence(text,new ConvCtxForMatcher());  }  return sentence;}  }
class C{  public Node previousSibling(){  return siblingAtOffset(-1);}  }
class C{  public static double[] BarycentricWeights(double[] z){  int n=z.length;  double[] retval=new double[n];  for (int j=0; j < n; j++) {    double w=1.0;    for (int i=0; i < n; i++) {      if (i != j)       w*=(z[j] - z[i]);    }    retval[j]=1.0 / w;  }  return retval;}  }
class C{  public static void main(String[] args) throws Exception {  System.exit(ToolRunner.run(new ArabesqueRunner(),args));}  }
class C{  public OSRef toOSRef(){  RefEll airy1830=new RefEll(6377563.396,6356256.909);  double OSGB_F0=0.9996012717;  double N0=-100000.0;  double E0=400000.0;  double phi0=Math.toRadians(49.0);  double lambda0=Math.toRadians(-2.0);  double a=airy1830.getMaj();  double b=airy1830.getMin();  double eSquared=airy1830.getEcc();  double phi=Math.toRadians(getLat());  double lambda=Math.toRadians(getLng());  double E=0.0;  double N=0.0;  double n=(a - b) / (a + b);  double v=a * OSGB_F0 * Math.pow(1.0 - eSquared * Util.sinSquared(phi),-0.5);  double rho=a * OSGB_F0 * (1.0 - eSquared)* Math.pow(1.0 - eSquared * Util.sinSquared(phi),-1.5);  double etaSquared=(v / rho) - 1.0;  double M=(b * OSGB_F0) * (((1 + n + ((5.0 / 4.0) * n * n)+ ((5.0 / 4.0) * n * n* n)) * (phi - phi0)) - (((3 * n) + (3 * n * n) + ((21.0 / 8.0) * n * n* n)) * Math.sin(phi - phi0) * Math.cos(phi + phi0)) + ((((15.0 / 8.0) * n * n) + ((15.0 / 8.0) * n * n* n)) * Math.sin(2.0 * (phi - phi0)) * Math.cos(2.0 * (phi + phi0))) - (((35.0 / 24.0) * n * n* n) * Math.sin(3.0 * (phi - phi0)) * Math.cos(3.0 * (phi + phi0))));  double I=M + N0;  double II=(v / 2.0) * Math.sin(phi) * Math.cos(phi);  double III=(v / 24.0) * Math.sin(phi) * Math.pow(Math.cos(phi),3.0)* (5.0 - Util.tanSquared(phi) + (9.0 * etaSquared));  double IIIA=(v / 720.0) * Math.sin(phi) * Math.pow(Math.cos(phi),5.0)* (61.0 - (58.0 * Util.tanSquared(phi)) + Math.pow(Math.tan(phi),4.0));  double IV=v * Math.cos(phi);  double V=(v / 6.0) * Math.pow(Math.cos(phi),3.0) * ((v / rho) - Util.tanSquared(phi));  double VI=(v / 120.0) * Math.pow(Math.cos(phi),5.0) * (5.0 - (18.0 * Util.tanSquared(phi)) + (Math.pow(Math.tan(phi),4.0)) + (14 * etaSquared) - (58 * Util.tanSquared(phi) * etaSquared));  N=I + (II * Math.pow(lambda - lambda0,2.0)) + (III * Math.pow(lambda - lambda0,4.0))+ (IIIA * Math.pow(lambda - lambda0,6.0));  E=E0 + (IV * (lambda - lambda0)) + (V * Math.pow(lambda - lambda0,3.0))+ (VI * Math.pow(lambda - lambda0,5.0));  return new OSRef(E,N);}  }
class C{  public void finishedPaintingChildren(JSplitPane a,Graphics b){  for (int i=0; i < uis.size(); i++) {    ((SplitPaneUI)(uis.elementAt(i))).finishedPaintingChildren(a,b);  }}  }
class C{  public void Gen_populate(android.database.Cursor cursor,int[] columnIndices){  if (columnIndices[GEN_ID__ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID__ID])) {    gen__Id=cursor.getLong(columnIndices[GEN_ID__ID]);  }  if (columnIndices[GEN_ID_NAME] >= 0 && !cursor.isNull(columnIndices[GEN_ID_NAME])) {    gen_name=cursor.getString(columnIndices[GEN_ID_NAME]);  }}  }
class C{  public void addDatabase(String databasePath){  databasesToDrop.add(databasePath);}  }
class C{  private BindRequest waitForBind(long timeout) throws IllegalStateException, TimeoutException {  SessionState currentSessionState=getSessionState();  if (currentSessionState.equals(SessionState.OPEN)) {    try {      return bindRequestReceiver.waitForRequest(timeout);    } catch (    IllegalStateException e) {      throw new IllegalStateException("Invocation of waitForBind() has been made",e);    }catch (    TimeoutException e) {      close();      throw e;    }  } else {    throw new IllegalStateException("waitForBind() should be invoked on OPEN state, actual state is " + currentSessionState);  }}  }
class C{  public TabbedPaneTabAreaPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.NO_CACHING);switch (state) {case BACKGROUND_DISABLED_TOP:case BACKGROUND_DISABLED_LEFT:case BACKGROUND_DISABLED_BOTTOM:case BACKGROUND_DISABLED_RIGHT:    isDisabled=true;  break;case BACKGROUND_ENABLED_TOP:case BACKGROUND_ENABLED_LEFT:case BACKGROUND_ENABLED_BOTTOM:case BACKGROUND_ENABLED_RIGHT:isDisabled=false;break;}}  }
class C{  private String resolveFilePath(String key,String dflt){  String path=prefs.getProperty(key);  if (path != null) {    File file=U.resolveIgnitePath(path);    if (file != null)     return file.getAbsolutePath();  }  return dflt;}  }
class C{  protected double calculatePairwiseDistance(int taxon1,int taxon2){  int state1, state2;  int n=patterns.getPatternCount();  double weight, distance;  double sumTs=0.0;  double sumTv=0.0;  double sumWeight=0.0;  int[] pattern;  for (int i=0; i < n; i++) {    pattern=patterns.getPattern(i);    state1=pattern[taxon1];    state2=pattern[taxon2];    weight=patterns.getPatternWeight(i);    if (!dataType.isAmbiguousState(state1) && !dataType.isAmbiguousState(state2) && state1 != state2) {      if ((state1 == 0 && state2 == 2) || (state1 == 2 && state2 == 0)) {        sumTs+=weight;      } else {        sumTv+=weight;      }    }    sumWeight+=weight;  }  double P=sumTs / sumWeight;  double Q=sumTv / sumWeight;  double tmp1=Math.log(1.0 - (P / (2.0 * constA)) - (((constA - constB) * Q) / (2.0 * constA * constC)));  double tmp2=Math.log(1.0 - (Q / (2.0 * constC)));  distance=-(2.0 * constA * tmp1) + (2.0 * (constA - constB - constC) * tmp2);  if (distance < MAX_DISTANCE) {    return distance;  } else {    return MAX_DISTANCE;  }}  }
class C{  private void validateMetroPoint(BlockVirtualPoolParam createParam,DbClient dbClient){  if (createParam != null && createParam.getHighAvailability() != null) {    if (createParam.getHighAvailability().getMetroPoint() != null && createParam.getHighAvailability().getMetroPoint()) {      if (createParam.getHighAvailability().getType() == null || createParam.getHighAvailability().getType().equals(HIGH_AVAILABILITY_NONE) || !createParam.getHighAvailability().getType().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name()) || createParam.getProtection() == null || !createParam.getProtection().specifiesRPProtection()) {        throw APIException.badRequests.metroPointConfigurationNotSupported();      }    }  }}  }
class C{  @Override protected void init(ExampleSet testSet){  this.testSet=testSet;}  }
class C{  private void updateDistribution(){  int N=problem.getNumberOfVariables();  double[] xold=Arrays.copyOf(xmean,xmean.length);  double[] BDz=new double[N];  double[] artmp=new double[N];  if (problem.getNumberOfObjectives() == 1) {    population.sort(new SingleObjectiveComparator());  } else {    if (fitnessEvaluator == null) {      population.sort(new NondominatedSortingComparator());    } else {      population.sort(new NondominatedFitnessComparator());    }  }  for (int i=0; i < N; i++) {    xmean[i]=0;    for (int j=0; j < mu; j++) {      xmean[i]+=weights[j] * EncodingUtils.getReal(population.get(j).getVariable(i));    }    BDz[i]=Math.sqrt(mueff) * (xmean[i] - xold[i]) / sigma;  }  if (diagonalIterations >= iteration) {    for (int i=0; i < N; i++) {      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * BDz[i] / diagD[i];    }  } else {    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[j][i] * BDz[j];      }      artmp[i]=sum / diagD[i];    }    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[i][j] * artmp[j];      }      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * sum;    }  }  double psxps=0;  for (int i=0; i < N; i++) {    psxps+=ps[i] * ps[i];  }  int hsig=0;  if (Math.sqrt(psxps) / Math.sqrt(1.0 - Math.pow(1.0 - cs,2.0 * iteration)) / chiN < 1.4 + 2.0 / (N + 1)) {    hsig=1;  }  for (int i=0; i < N; i++) {    pc[i]=(1.0 - cc) * pc[i] + hsig * Math.sqrt(cc * (2.0 - cc)) * BDz[i];  }  for (int i=0; i < N; i++) {    for (int j=(diagonalIterations >= iteration ? i : 0); j <= i; j++) {      C[i][j]=(1.0 - (diagonalIterations >= iteration ? ccovsep : ccov)) * C[i][j] + ccov * (1.0 / mueff) * (pc[i] * pc[j] + (1 - hsig) * cc * (2.0 - cc)* C[i][j]);      for (int k=0; k < mu; k++) {        C[i][j]+=ccov * (1 - 1.0 / mueff) * weights[k]* (EncodingUtils.getReal(population.get(k).getVariable(i)) - xold[i])* (EncodingUtils.getReal(population.get(k).getVariable(j)) - xold[j]) / sigma / sigma;      }    }  }  sigma*=Math.exp(((Math.sqrt(psxps) / chiN) - 1) * cs / damps);}  }
class C{  public synchronized boolean skip(ReplDBMSEvent event){  if (this.applySkipCount > 0) {    logger.info("Skipping event: seqno=" + event.getSeqno() + " fragno="+ event.getFragno(),null);    if (event.getLastFrag())     applySkipCount--;    return true;  } else   if (this.seqnosToBeSkipped != null) {    long minSeqno=getDirtyMinLastSeqno();    while (!this.seqnosToBeSkipped.isEmpty() && this.seqnosToBeSkipped.first() < minSeqno)     this.seqnosToBeSkipped.remove(this.seqnosToBeSkipped.first());    if (!this.seqnosToBeSkipped.isEmpty()) {      if (seqnosToBeSkipped.contains(event.getSeqno())) {        if (logger.isDebugEnabled())         logger.debug("Skipping event with seqno " + event.getSeqno());        if (event.getLastFrag())         this.seqnosToBeSkipped.remove(event.getSeqno());        return true;      }    } else {      this.seqnosToBeSkipped=null;      if (logger.isDebugEnabled())       logger.debug("No more events to be skipped");    }  }  return false;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  @Override public String toString(){  return "CUDA_RESOURCE_DESC[" + createString(",") + "]";}  }
class C{  public void removeValue(String name){  if (name == null) {    throw new IllegalArgumentException("name == null");  }  Object old=values.remove(name);  if (old instanceof SSLSessionBindingListener) {    SSLSessionBindingListener listener=(SSLSessionBindingListener)old;    listener.valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  @Override public void updated(){  if (selfUser == null) {    return;  }  if (!selfUser.getName().equals(myName)) {    this.myName=selfUser.getName();    notifyNameHasChanged(this,myName);  }  if (!selfUser.getEmail().equals(myEmail) || selfUser.isEmailVerified() != emailIsVerified) {    this.myEmail=selfUser.getEmail();    this.emailIsVerified=selfUser.isEmailVerified();    notifyEmailHasChanged(myEmail,this.emailIsVerified);  }  if (!selfUser.getPhone().equals(myPhoneNumber) || selfUser.isPhoneVerified() != phoneIsVerified) {    this.myPhoneNumber=selfUser.getPhone();    this.phoneIsVerified=selfUser.isPhoneVerified();    notifyPhoneHasChanged(myPhoneNumber,this.phoneIsVerified);  }  if (selfUser.getAccent().getColor() != myColor) {    myColor=selfUser.getAccent().getColor();    notifyMyColorHasChanged(this,myColor);  }}  }
class C{  public MnemonicCode() throws IOException {  this(openDefaultWords(),BIP39_ENGLISH_SHA256);}  }
class C{  public void addConstZero(CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.longType)     addOpcode(LCONST_0); else     if (type == CtClass.floatType)     addOpcode(FCONST_0); else     if (type == CtClass.doubleType)     addOpcode(DCONST_0); else     if (type == CtClass.voidType)     throw new RuntimeException("void type?"); else     addOpcode(ICONST_0);  } else   addOpcode(ACONST_NULL);}  }
class C{  public static boolean isSurrogatePair(char high,char low){  return (isHighSurrogate(high) && isLowSurrogate(low));}  }
class C{  public void fill(final LmlParser parser){  this.parser=parser;  for (  final Entry<String,I18NBundle> bundle : bundles) {    parser.getData().addI18nBundle(bundle.key,bundle.value);    if (defaultBundle.equals(bundle.key)) {      parser.getData().setDefaultI18nBundle(bundle.value);    }  }}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  protected void after(ActionInvocation invocation,BaseAction action) throws Exception {  Result result=invocation.getResult();  if (result != null && (result instanceof ServletRedirectResult || result instanceof ServletActionRedirectResult)) {    Map<String,Object> session=invocation.getInvocationContext().getSession();    Collection<String> actionWarnings=action.getWarnings();    if (actionWarnings != null && !actionWarnings.isEmpty()) {      session.put(ACTION_WARNINGS_KEY,actionWarnings);    }    Collection<String> actionErrors=action.getActionErrors();    if (actionErrors != null && !actionErrors.isEmpty()) {      session.put(ACTION_ERRORS_KEY,actionErrors);    }    Collection<String> actionMessages=action.getActionMessages();    if (actionMessages != null && !actionMessages.isEmpty()) {      session.put(ACTION_MESSAGES_KEY,actionMessages);    }    Map<String,List<String>> fieldErrors=action.getFieldErrors();    if (fieldErrors != null && !fieldErrors.isEmpty()) {      session.put(FIELD_ERRORS_KEY,fieldErrors);    }  }}  }
class C{  public TextEditCopier(TextEdit edit){  super();  fEdit=edit;  fCopies=new HashMap();}  }
class C{  public AbLevelDefaultRenderer(){  super();}  }
class C{  public static ReasonEnum parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ReasonEnum object=null;  java.util.Map attributeMap=new java.util.HashMap();  java.util.List extraAttributeList=new java.util.ArrayList();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement() || reader.hasText()) {        java.lang.String content=reader.getElementText();        if (content.indexOf(":") > 0) {          prefix=content.substring(0,content.indexOf(":"));          namespaceuri=reader.getNamespaceURI(prefix);          object=ReasonEnum.Factory.fromString(content,namespaceuri);        } else {          object=ReasonEnum.Factory.fromString(content,"");        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testSetF11Momentary(){  boolean f11Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF11Momentary(f11Momentary);}  }
class C{  public JsonRequest(int method,String requestUrl,JSONObject jsonRequest,Response.Listener<JSONObject> successListener,Response.ErrorListener errorListener){  this(method,requestUrl,jsonRequest,successListener,errorListener,null,null);}  }
class C{  @Override public void execute(Runnable task){  tasksInProcess.incrementAndGet();  try {    super.execute(task);  } catch (  RuntimeException|Error e) {    tasksInProcess.decrementAndGet();    throw e;  }}  }
class C{  private Workflow.Method createInvalidateCacheMethod(URI vplexURI,URI vplexVolumeURI){  return new Workflow.Method(INVALIDATE_CACHE_METHOD_NAME,vplexURI,vplexVolumeURI);}  }
class C{  public void testCipherSpi05() throws ShortBufferException {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  byte[] bb={(byte)0,(byte)1,(byte)2,(byte)3,(byte)4,(byte)5,(byte)6,(byte)7,(byte)8,(byte)9,(byte)10};  int pos=5;  int len=bb.length;  ByteBuffer bbNull=null;  ByteBuffer bb1=ByteBuffer.allocate(len);  bb1.put(bb);  bb1.position(0);  try {    cSpi.engineUpdate(bbNull,bb1);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  try {    cSpi.engineUpdate(bb1,bbNull);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  ByteBuffer bb2=ByteBuffer.allocate(bb.length);  bb1.position(len);  assertEquals("Incorrect number of stored bytes",0,cSpi.engineUpdate(bb1,bb2));  bb1.position(0);  bb2.position(len - 2);  try {    cSpi.engineUpdate(bb1,bb2);    fail("ShortBufferException bust be thrown. Output buffer remaining: ".concat(Integer.toString(bb2.remaining())));  } catch (  ShortBufferException e) {  }  bb1.position(10);  bb2.position(0);  assertTrue("Incorrect number of stored bytes",cSpi.engineUpdate(bb1,bb2) > 0);  bb1.position(bb.length);  cSpi.engineUpdate(bb1,bb2);  bb1.position(pos);  bb2.position(0);  int res=cSpi.engineUpdate(bb1,bb2);  assertTrue("Incorrect result",res > 0);}  }
class C{  public boolean hasNumCombinations(){  return hasExtension(GwoNumCombinations.class);}  }
class C{  private boolean areEqual(Object o1,Object o2){  return (o1 == null && o2 == null) || (o1 != null && o1.equals(o2));}  }
class C{  public Osyczka(){  super(2,2,2);}  }
class C{  public long subtract(final BlockHeight height){  return this.getRaw() - height.getRaw();}  }
class C{  @SuppressWarnings("unused") public static byte[] selectCNFontA(){  byte[] result=new byte[3];  result[0]=FS;  result[1]=33;  result[2]=0;  return result;}  }
class C{  protected StringTemplate(String str){  this.string=str;  whole=(str.length() != 1 || !StringUtils.isDelimiter(str.charAt(0)));}  }
class C{  public void testLegacyFloatMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",-1.3f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",4.2f,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_FLOAT));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.FLOAT);  sortField.setMissingValue(Float.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private boolean isMultipleSelection(){  return getMaxSelectionIndex() - getMinSelectionIndex() > 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void addDefaultComponents(){  final boolean mapSuper=context.isMapSuperTypes();  context.setMapSuperTypes(false);  final AssetManagerProvider assetManagerProvider=new AssetManagerProvider();  context.addProvider(assetManagerProvider);  context.addDestructible(assetManagerProvider);  final InjectingAssetManager assetManager=assetManagerProvider.getAssetManager();  context.addProvider(new BitmapFontProvider(assetManager));  context.addProvider(new ModelProvider(assetManager));  context.addProvider(new MusicProvider(assetManager));  context.addProvider(new Particle3dEffectProvider(assetManager));  context.addProvider(new ParticleEffectProvider(assetManager));  context.addProvider(new PixmapProvider(assetManager));  context.addProvider(new SoundProvider(assetManager));  context.addProvider(new TextureAtlasProvider(assetManager));  context.addProvider(new TextureProvider(assetManager));  context.addProvider(new ArrayProvider<Object>());  context.addProvider(new ListProvider<Object>());  context.addProvider(new MapProvider<Object,Object>());  context.addProvider(new SetProvider<Object>());  i18nBundleProvider=new I18NBundleProvider(assetManager);  localePreference=new LocalePreference(i18nBundleProvider);  i18nBundleProvider.setLocalePreference(localePreference);  context.addProvider(i18nBundleProvider);  context.addProperty(localePreference);  context.addProvider(localePreference);  context.addProvider(new LoggerProvider());  context.addProvider(new PreferencesProvider());  final SpriteBatchProvider spriteBatchProvider=new SpriteBatchProvider();  context.addProvider(new BatchProvider(spriteBatchProvider));  context.addProvider(spriteBatchProvider);  context.addDestructible(spriteBatchProvider);  context.addProvider(new SkinProvider(assetManager));  final StageProvider stageProvider=new StageProvider(spriteBatchProvider.getBatch());  stage=stageProvider.getStage();  context.addProvider(stageProvider);  if (includeMusicService()) {    final MusicOnPreference musicOn=new MusicOnPreference();    final SoundOnPreference soundOn=new SoundOnPreference();    final MusicVolumePreference musicVolume=new MusicVolumePreference();    final SoundVolumePreference soundVolume=new SoundVolumePreference();    context.addProperty(musicOn);    context.addProperty(soundOn);    context.addProperty(musicVolume);    context.addProperty(soundVolume);    context.add(new MusicService(stage,musicOn,soundOn,musicVolume,soundVolume));  }  context.setMapSuperTypes(mapSuper);  context.add(this);}  }
class C{  public View push(@LayoutRes int layoutId){  View pushed=pushWithoutNotifyingListeners(layoutId);  callOnViewAdded();  return pushed;}  }
class C{  public void accept(Delivery delivery,boolean settle) throws IOException {  accept(delivery,this.session,settle);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String keyw;  if (curNumberOfParameters == 13)   keyw=null; else   keyw=getString(stack);  String slotString=getString(stack);  if (slotString == null)   slotString="";  java.util.StringTokenizer toker=new java.util.StringTokenizer(slotString,";");  int slotType=0;  java.util.ArrayList slots=new java.util.ArrayList();  while (toker.hasMoreTokens()) {    int[] ts=BigBrother.getTimeslotForString(toker.nextToken());    if (slotType == 0)     slotType=ts[0]; else     if (slotType != ts[0])     throw new IllegalArgumentException("All timeslots passed into SetFavoriteTimeslot must be of the same type!");    if (slotType != 0)     slots.add(new Integer(ts[1]));  }  int[] rawSlots=null;  if (slots.size() > 0) {    rawSlots=new int[slots.size()];    for (int i=0; i < slots.size(); i++)     rawSlots[i]=((Integer)slots.get(i)).intValue();  }  String c=getString(stack);  String net=getString(stack);  String pr=getString(stack);  String year=getString(stack);  String rated=getString(stack);  int role=Show.getRoleForString(getString(stack));  Person person=getPerson(stack);  String sub=getString(stack);  String cat=getString(stack);  boolean rr=evalBool(stack.pop());  boolean fr=evalBool(stack.pop());  String tit=getString(stack);  int mask=Agent.LOVE_MASK;  if (rr && fr)   rr=fr=false;  if (rr)   mask=mask | Agent.RERUN_MASK;  if (fr)   mask=mask | Agent.FIRSTRUN_MASK;  if (tit != null && tit.length() > 0)   mask=mask | Agent.TITLE_MASK;  if (cat != null && cat.length() > 0)   mask=mask | Agent.CATEGORY_MASK;  if (person != null)   mask=mask | Agent.ACTOR_MASK;  if (rated != null && rated.length() > 0)   mask=mask | Agent.RATED_MASK;  if (year != null && year.length() > 0)   mask=mask | Agent.YEAR_MASK;  if (pr != null && pr.length() > 0)   mask=mask | Agent.PR_MASK;  if (c != null && c.length() > 0)   mask=mask | Agent.CHANNEL_MASK;  if (net != null && net.length() > 0)   mask=mask | Agent.NETWORK_MASK;  if (slotType == BigBrother.DAY_ALIGN)   mask=mask | Agent.DAYSLOT_MASK;  if (slotType == BigBrother.TIME_ALIGN)   mask=mask | Agent.TIMESLOT_MASK;  if (slotType == BigBrother.FULL_ALIGN)   mask=mask | Agent.FULLSLOT_MASK;  if (keyw != null && keyw.length() > 0)   mask=mask | Agent.KEYWORD_MASK;  if (mask == Agent.LOVE_MASK)   return null;  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent rv=Carny.getInstance().addFavorite(mask,tit,cat,sub,person,role,rated,year,pr,net,c,slotType,rawSlots,keyw);    return rv;  } else   return null;}  }
class C{  private void add(Action action,PresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof ActionGroup) {    ActionGroup group=(ActionGroup)action;    table.setText(0,menuBarItems.size(),presentation.getText());    Element element=table.getCellFormatter().getElement(0,menuBarItems.size());    MenuBarItem item=new MenuBarItem(group,actionManager,managerProvider,presentationFactory,element,this,keyBindingAgent,resources.menuCss());    item.onMouseOut();    menuBarItems.put(element,item);    action2barItem.put(group,item);  } else   if (action instanceof CustomComponentAction) {    Widget widget=((CustomComponentAction)action).createCustomComponent(presentation);    table.setWidget(0,menuBarItems.size(),widget);    Element element=table.getCellFormatter().getElement(0,menuBarItems.size());    menuBarItems.put(element,null);  }}  }
class C{  @Inline public static Address objectStartRef(ObjectReference obj){  if (MOVES_OBJECTS) {    if (ADDRESS_BASED_HASHING && !DYNAMIC_HASH_OFFSET) {      Word hashState=obj.toAddress().loadWord(STATUS_OFFSET).and(HASH_STATE_MASK);      if (hashState.EQ(HASH_STATE_HASHED_AND_MOVED)) {        return obj.toAddress().minus(OBJECT_REF_OFFSET + HASHCODE_BYTES);      }    }  }  return obj.toAddress().minus(OBJECT_REF_OFFSET);}  }
class C{  public void toBack(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.getProcessAnnotations(anno.getProcess()).toBack(anno);  fireProcessUpdate(anno);  model.fireAnnotationMiscChanged(anno);}  }
class C{  @Inline public static int incRC(ObjectReference object){  Word oldValue, newValue;  int rtn;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (isStuck(oldValue))     return INC_OLD;    if (RCBase.BUILD_FOR_GENRC) {      newValue=oldValue.plus(INCREMENT);      rtn=INC_OLD;    } else {      if (isHeaderNew(oldValue)) {        newValue=oldValue.plus(DOUBLE_INCREMENT);        newValue=newValue.or(NEW_BIT_MASK);        rtn=INC_NEW;      } else {        newValue=oldValue.plus(INCREMENT);        rtn=INC_OLD;      }    }  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));  return rtn;}  }
class C{  public void testWritingToAndReadingFromTheDataStorage(){  StoreRetrieveData dataStorage=getDataStorage();  ArrayList<ToDoItem> retrievedItems=new ArrayList<>();  try {    dataStorage.saveToFile(mTestData);  } catch (  Exception e) {    fail("Couldn't store data: " + e.getMessage());  }  try {    retrievedItems=dataStorage.loadFromFile();  } catch (  Exception e) {    fail("Couldn't read from data storage: " + e.getMessage());  }  assertEquals(mTestData.size(),retrievedItems.size());  for (  ToDoItem retrievedItem : retrievedItems) {    boolean found=false;    for (    ToDoItem testItem : mTestData) {      if (retrievedItem.getIdentifier().equals(testItem.getIdentifier()) && retrievedItem.getToDoText().equals(testItem.getToDoText()) && retrievedItem.hasReminder() == testItem.hasReminder() && retrievedItem.getToDoDate().equals(testItem.getToDoDate())) {        found=true;        break;      }    }    if (!found) {      fail("Content mis-match between test data and data retrieved from the storage!");    }  }}  }
class C{  public CompositeListener(){  this("CompositeJAMonListener");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final int[] hash(final SparseIntegerVector vector){  return hashSignature(sb.signature(vector));}  }
class C{  private ListenableFuture<?> loadSnapshotFile(String filename,String kindName) throws Exception {  return bigquery().load(bigquery().buildDestinationTable(kindName).description("Datastore snapshot import for " + kindName + ".").build(),SourceFormat.DATASTORE_BACKUP,ImmutableList.of(filename));}  }
class C{  public void resetCropRect(){  mCropImageView.resetCropRect();}  }
class C{  static void testExtendOkay(ClassLoader loader){  Class doubledExtendOkayClass;  Object obj;  try {    doubledExtendOkayClass=loader.loadClass("DoubledExtendOkay");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledExtendOkayClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.err.println("Got unexpected LinkageError on DEO");    le.printStackTrace();    return;  }  BaseOkay baseRef=(BaseOkay)obj;  DoubledExtendOkay de=baseRef.getExtended();  try {    String result;    result=BaseOkay.doStuff(de);    System.out.println("Got DEO result " + result);  } catch (  LinkageError le) {    System.err.println("Got unexpected LinkageError on DEO");    le.printStackTrace();    return;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean deleteProject(File directory){  Log.i(TAG,">>>>>>>>>>>>>>>>>>>>>>>>deleteProject  directory= " + directory.toString());  if (directory.isDirectory()) {    String[] filesInDirecory=directory.list();    for (int i=0; i < filesInDirecory.length; i++) {      boolean success=deleteProject(new File(directory,filesInDirecory[i]));      if (!success) {        return false;      }    }  }  return directory.delete();}  }
class C{  public void addSynapseListener(final SynapseListener listener){  synapseListeners.add(listener);}  }
class C{  public boolean hasConflict(@NotNull final PyClass destinationClass){  return myMembersManager.hasConflict(getMember(),destinationClass);}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  public static void saveZipFile(String zipFileName,List<File> toBeZipped) throws IOException, FileNotFoundException {  try {    File zipFile=new File(zipFileName);    if (!zipFile.getParentFile().exists()) {      zipFile.getParentFile().mkdirs();    }    FileOutputStream fos=new FileOutputStream(zipFile);    CheckedOutputStream checksum=new CheckedOutputStream(fos,new Adler32());    ZipOutputStream zoStream=new ZipOutputStream(new BufferedOutputStream(checksum));    for (    File file : toBeZipped) {      writeZipEntry(file,zoStream,file.getParent().length() + 1);    }    zoStream.close();  } catch (  SecurityException se) {    logger.warning("Security Exception caught while creating " + zipFileName);  }}  }
class C{  public static IOException create(IOException exn){  if (exn.getClass().equals(IOException.class) || exn.getClass().equals(java.net.SocketException.class) || exn.getClass().getName().equals("javax.net.ssl.SSLException"))   return new ClientTimeoutException(exn); else   return exn;}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  private CHintCreator(){}  }
class C{  public void appendSuper(final StringBuffer buffer,final String superToString){  appendToString(buffer,superToString);}  }
class C{  public void emitInvokestatic(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokestatic);  if (!alive)   return;  emit2(meth);  state.pop(argsize);  state.push(mtype.getReturnType());}  }
class C{  public String toString(Map cpInt2Str,Map lbInt2Str){  String str="";  if (ftype == EDGE_FEATURE1) {    str="e1_";    String yStr=(String)lbInt2Str.get(new Integer(y));    if (yStr != null) {      str+=yStr + "_";    }    String ypStr=(String)lbInt2Str.get(new Integer(yp));    if (ypStr != null) {      str+=ypStr;    }  } else   if (ftype == STAT_FEATURE1) {    str="s1_";    String yStr=(String)lbInt2Str.get(new Integer(y));    if (yStr != null) {      str+=yStr + "_";    }    String cpStr=(String)cpInt2Str.get(new Integer(cp));    if (cpStr != null) {      str+=cpStr;    }  }  str+=" " + Integer.toString(idx) + " "+ Double.toString(wgt);  return str;}  }
class C{  @Override public boolean usesIndiviualShapes(){  return useIndividualShapes;}  }
class C{  public CharSequence subSequence(int start,int end){  int len=end - start;  return new StringBuilder(len).append(toArray(start,len));}  }
class C{  public boolean dispatchTrackballEvent(MotionEvent ev){  if (mWindow.superDispatchTrackballEvent(ev)) {    return true;  }  return onTrackballEvent(ev);}  }
class C{  private static BufferedImage readToBufferedImage(int x,int y,int width,int height,boolean alpha) throws GLException {  int bufImgType=(alpha ? BufferedImage.TYPE_4BYTE_ABGR : BufferedImage.TYPE_3BYTE_BGR);  int readbackType=(alpha ? GL2.GL_ABGR_EXT : GL2ES3.GL_BGR);  BufferedImage image=new BufferedImage(width,height,bufImgType);  GLContext glc=GLContext.getCurrent();  GL gl=glc.getGL();  GLPixelStorageModes psm=new GLPixelStorageModes();  psm.setPackAlignment(gl,1);  gl.glReadPixels(x,y,width,height,readbackType,GL.GL_UNSIGNED_BYTE,ByteBuffer.wrap(((DataBufferByte)image.getRaster().getDataBuffer()).getData()));  psm.restore(gl);  if (glc.getGLDrawable().isGLOriented()) {    ImageUtil.flipImageVertically(image);  }  return image;}  }
class C{  public boolean isProductBound(){  return productBound;}  }
class C{  void clearPasswords(){  keyStorePassword=null;  tokenPIN=null;}  }
class C{  public GregorianCalendar(Locale aLocale){  this(TimeZone.getDefaultRef(),aLocale);  setZoneShared(true);}  }
class C{  public AbstractJonasExistingLocalConfiguration(String dir,String version){  super(dir);  setProperty(GeneralPropertySet.HOSTNAME,"localhost");  setProperty(GeneralPropertySet.RMI_PORT,"1099");  setProperty(ServletPropertySet.PORT,"9000");  setProperty(JonasPropertySet.JONAS_SERVER_NAME,"jonas");  setProperty(JonasPropertySet.JONAS_DOMAIN_NAME,"jonas");  this.toString="JOnAS " + version + " Existing Local Configuration";}  }
class C{  public LinearTransform(double A,double B){  setRange(A,B);}  }
class C{  @Override public String toString(){  return String.format("Bookmark Manager (Managing %d Bookmarks)",getNumberOfBookmarks());}  }
class C{  @Uninterruptible public static void addLock(Lock l){  Lock[] chunk=locks[l.index >> LOG_LOCK_CHUNK_SIZE];  int index=l.index & LOCK_CHUNK_MASK;  Services.setArrayUninterruptible(chunk,index,l);}  }
class C{  public void ruleR5(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node a : nodes) {    List<Node> adjacents=graph.getNodesInTo(a,Endpoint.CIRCLE);    for (    Node b : adjacents) {      if (!(graph.getEndpoint(a,b) == Endpoint.CIRCLE)) {        continue;      }      List<List<Node>> ucCirclePaths=getUcCirclePaths(a,b,graph);      for (      List<Node> u : ucCirclePaths) {        if (u.size() < 3) {          continue;        }        Node c=u.get(1);        Node d=u.get(u.size() - 2);        if (graph.isAdjacentTo(a,d)) {          continue;        }        if (graph.isAdjacentTo(b,c)) {          continue;        }        logger.log("colliderOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle path",graph.getEdge(a,b)));        graph.setEndpoint(a,b,Endpoint.TAIL);        graph.setEndpoint(b,a,Endpoint.TAIL);        orientTailPath(u,graph);        changeFlag=true;      }    }  }}  }
class C{  public void subtract(final byte operand){  this.value-=operand;}  }
class C{  private void testIsoWeekJanuary1thTuesday() throws Exception {  assertEquals(52,getIsoWeek(parse("2007-12-30")));  assertEquals(1,getIsoWeek(parse("2007-12-31")));  assertEquals(1,getIsoWeek(parse("2008-01-01")));  assertEquals(1,getIsoWeek(parse("2008-01-06")));  assertEquals(2,getIsoWeek(parse("2008-01-07")));}  }
class C{  public static Matcher createMatcher(@NonNls final String resourceBundleValue){  @NonNls String regexp=resourceBundleValue.replaceAll("([\\[\\]\\(\\)\\.\\*])","\\\\$1");  regexp=regexp.replaceAll("\\{\\d+\\}","(.+)");  return Pattern.compile(regexp,Pattern.CASE_INSENSITIVE).matcher("");}  }
class C{  public int offsetByCodePoints(int index,int codePointOffset){  return value.offsetByCodePoints(index,codePointOffset);}  }
class C{  public final byte[] update(byte[] input){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,0,input.length);}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  public int[] classify(){  IndependenceTest indTest=new IndTestChiSquare(train,alpha);  Mbfs search=new Mbfs(indTest,depth);  search.setDepth(depth);  List<Node> mbPlusTarget=search.findMb(target);  mbPlusTarget.add(train.getVariable(target));  DataSet subset=train.subsetColumns(mbPlusTarget);  System.out.println("subset vars = " + subset.getVariables());  Pc patternSearch=new Pc(new IndTestChiSquare(subset,0.05));  Graph mbPattern=patternSearch.search();  TetradLogger.getInstance().log("details","Pattern = " + mbPattern);  MbUtils.trimToMbNodes(mbPattern,train.getVariable(target),true);  TetradLogger.getInstance().log("details","Trimmed pattern = " + mbPattern);  for (  Edge edge : mbPattern.getEdges()) {    if (Edges.isBidirectedEdge(edge)) {      mbPattern.removeEdge(edge);    }  }  Graph selectedDag=MbUtils.getOneMbDag(mbPattern);  TetradLogger.getInstance().log("details","Selected DAG = " + selectedDag);  TetradLogger.getInstance().log("details","Vars = " + selectedDag.getNodes());  TetradLogger.getInstance().log("details","\nClassification using selected MB DAG:");  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  List<Node> mbNodes=selectedDag.getNodes();  DataSet trainDataSubset=train.subsetColumns(mbNodes);  BayesPm bayesPm=new BayesPm(selectedDag);  List varsTrain=trainDataSubset.getVariables();  for (int i1=0; i1 < varsTrain.size(); i1++) {    DiscreteVariable trainingVar=(DiscreteVariable)varsTrain.get(i1);    bayesPm.setCategories(mbNodes.get(i1),trainingVar.getCategories());  }  TetradLogger.getInstance().log("info","Estimating Bayes net; please wait...");  DirichletBayesIm prior=DirichletBayesIm.symmetricDirichletIm(bayesPm,this.prior);  BayesIm bayesIm=DirichletEstimator.estimate(prior,trainDataSubset);  RowSummingExactUpdater updater=new RowSummingExactUpdater(bayesIm);  DataSet testSubset=this.test.subsetColumns(mbNodes);  int numCases=testSubset.getNumRows();  int[] estimatedCategories=new int[numCases];  Arrays.fill(estimatedCategories,-1);  List<Node> varsClassify=testSubset.getVariables();  for (int k=0; k < numCases; k++) {    Proposition proposition=Proposition.tautology(bayesIm);    int numMissing=0;    for (int testIndex=0; testIndex < varsClassify.size(); testIndex++) {      DiscreteVariable var=(DiscreteVariable)varsClassify.get(testIndex);      if (var.equals(targetVariable)) {        continue;      }      int trainIndex=proposition.getNodeIndex(var.getName());      if (trainIndex == -99) {        continue;      }      int testValue=testSubset.getInt(k,testIndex);      if (testValue == -99) {        numMissing++;      } else {        proposition.setCategory(trainIndex,testValue);      }    }    if (numMissing > this.maxMissing) {      TetradLogger.getInstance().log("details","classification(" + k + ") = "+ "not done since number of missing values too high "+ "("+ numMissing+ ").");      continue;    }    Evidence evidence=Evidence.tautology(bayesIm);    evidence.getProposition().restrictToProposition(proposition);    updater.setEvidence(evidence);    int targetIndex=proposition.getNodeIndex(targetVariable.getName());    double highestProb=-0.1;    int _category=-1;    for (int category=0; category < targetVariable.getNumCategories(); category++) {      double marginal=updater.getMarginal(targetIndex,category);      if (marginal > highestProb) {        highestProb=marginal;        _category=category;      }    }    if (_category < 0) {      System.out.println("classification(" + k + ") is undefined "+ "(undefined marginals).");      continue;    }    String estimatedCategory=targetVariable.getCategories().get(_category);    TetradLogger.getInstance().log("details","classification(" + k + ") = "+ estimatedCategory);    estimatedCategories[k]=_category;  }  int targetIndex=varsClassify.indexOf(targetVariable);  int numCategories=targetVariable.getNumCategories();  int[][] crossTabs=new int[numCategories][numCategories];  int numberCorrect=0;  int numberCounted=0;  for (int k=0; k < numCases; k++) {    int estimatedCategory=estimatedCategories[k];    int observedValue=testSubset.getInt(k,targetIndex);    if (estimatedCategory < 0) {      continue;    }    crossTabs[observedValue][estimatedCategory]++;    numberCounted++;    if (observedValue == estimatedCategory) {      numberCorrect++;    }  }  double percentCorrect1=100.0 * ((double)numberCorrect) / ((double)numberCounted);  TetradLogger.getInstance().log("details","");  TetradLogger.getInstance().log("details","\t\t\tEstimated\t");  TetradLogger.getInstance().log("details","Observed\t");  StringBuilder buf0=new StringBuilder();  buf0.append("\t");  for (int m=0; m < numCategories; m++) {    buf0.append(targetVariable.getCategory(m)).append("\t");  }  TetradLogger.getInstance().log("details",buf0.toString());  for (int k=0; k < numCategories; k++) {    StringBuilder buf=new StringBuilder();    buf.append(targetVariable.getCategory(k)).append("\t");    for (int m=0; m < numCategories; m++)     buf.append(crossTabs[k][m]).append("\t");    TetradLogger.getInstance().log("details",buf.toString());  }  TetradLogger.getInstance().log("details","");  TetradLogger.getInstance().log("details","Number correct = " + numberCorrect);  TetradLogger.getInstance().log("details","Number counted = " + numberCounted);  TetradLogger.getInstance().log("details","Percent correct = " + nf.format(percentCorrect1) + "%");  crossTabulation=crossTabs;  percentCorrect=percentCorrect1;  return estimatedCategories;}  }
class C{  private ClientProxyMembershipID canonicalReference(){  CacheClientNotifier ccn=CacheClientNotifier.getInstance();  if (ccn != null) {    CacheClientProxy cp=ccn.getClientProxy(this,true);    if (cp != null) {      if (this.isCanonicalEquals(cp.getProxyID())) {        return cp.getProxyID();      }    }  }  return this;}  }
class C{  protected void onAddEditTextToDialogView(View dialogView,AutoCompleteTextView editText){  ViewGroup container=(ViewGroup)dialogView.findViewById(R.id.autocomplete_edittext_container);  if (container != null) {    container.addView(editText,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }}  }
class C{  public ContributionTemplateStore(String key){  super(key);}  }
class C{  public static <T>Transformer<T,T> io(){  return null;}  }
class C{  public void addAll(final Collection<? extends TestCase> testCasesToAdd){  this.testCases.addAll(testCasesToAdd);  testCasesToAdd.forEach(null);}  }
class C{  private static int exitWithStatus(int status){  if (ToolIO.getMode() == ToolIO.SYSTEM) {    System.exit(status);  }  return status;}  }
class C{  private synchronized void timerExpire(){  super.notify();}  }
class C{  public void fireGenerateEvent(int eventType,String name,String data){}  }
class C{  public static Boolean IsCoverFlowModeSame(){  if (coverFlowModeSame == null) {    loadOptimizerDetail();  }  return coverFlowModeSame;}  }
class C{  protected CompositeImpl(){  super();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void createRule(final Strategy strategy) throws PersistentModelException, ValueTypeException {  Integer version=this.tradePersistentModel.findRuleByMaxVersion(strategy);  Rule nextRule=new Rule(strategy,(version + 1),commentText.getText(),TradingCalendar.getDateTimeNowMarketTimeZone(),getContent().getBytes(),TradingCalendar.getDateTimeNowMarketTimeZone());  strategy.add(nextRule);  refreshTree();  TreePath path=m_tree.findTreePathByObject(nextRule);  if (null != path) {    m_tree.setSelectionPath(path);    m_tree.scrollPathToVisible(path);  }}  }
class C{  protected AbstractBrokerModel(){  this.listenerList=new EventListenerList();}  }
class C{  public Seconds minus(Seconds seconds){  if (seconds == null) {    return this;  }  return minus(seconds.getValue());}  }
class C{  public StreamImpl openReadWriteImpl() throws IOException {  HttpStreamWrapper stream=HttpStream.openReadWrite(this);  stream.setSSL(true);  return stream;}  }
class C{  private void deleteAttachment(){  log.info("");  if (FDialog.ask(m_WindowNo,this,"AttachmentDelete?"))   m_attachment.delete(true);}  }
class C{  public ImagePoint calcNextEdge(){  ImagePoint nextEdgePoint;switch (nextEdge) {case RIGHT_EDGE:    nextEdgePoint=getRightNeighbor();  if (nextEdgePoint != null) {    nextEdge=BOTTOM_EDGE;    return nextEdgePoint;  }case BOTTOM_EDGE:nextEdgePoint=getBottomNeighbor();if (nextEdgePoint != null) {nextEdge=LEFT_EDGE;return nextEdgePoint;}case LEFT_EDGE:nextEdgePoint=getLeftNeighbor();if (nextEdgePoint != null) {nextEdge=TOP_EDGE;return nextEdgePoint;}case TOP_EDGE:nextEdgePoint=getTopNeighbor();if (nextEdgePoint != null) {nextEdge=NO_EDGE;return nextEdgePoint;}default :nextEdge=NO_EDGE;return null;}}  }
class C{  public void test_delete003(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      journal.commit();    }    final long tx0=journal.newTx(ITx.UNISOLATED);    final long tx1=journal.newTx(ITx.UNISOLATED);    assertNotSame(tx0,tx1);    assertTrue(Math.abs(tx0) >= journal.getRootBlockView().getLastCommitTime());    assertTrue(Math.abs(tx1) > Math.abs(tx0));    final byte[] id0=new byte[]{1};    final byte[] v0=getRandomData().array();    journal.getIndex(name,tx0).insert(id0,v0);    assertEquals(v0,journal.getIndex(name,tx0).lookup(id0));    assertFalse(journal.getIndex(name,tx1).contains(id0));    assertEquals(v0,(byte[])journal.getIndex(name,tx0).remove(id0));    assertFalse(journal.getIndex(name,tx0).contains(id0));    final byte[] v1=getRandomData().array();    assertNull(journal.getIndex(name,tx1).insert(id0,v1));    assertFalse(journal.getIndex(name,tx0).contains(id0));    assertFalse(journal.getIndex(name).contains(id0));    assertEquals(0L,journal.commit(tx0));    assertNotSame(0L,journal.commit(tx1));    assertTrue(journal.getIndex(name).contains(id0));    assertEquals(v1,(byte[])journal.getIndex(name).lookup(id0));  }  finally {    journal.destroy();  }}  }
class C{  public static void main(String[] args){  ResourceBundleUtil.setVerbose(true);  Application app;  String os=System.getProperty("os.name").toLowerCase();  if (os.startsWith("mac")) {    app=new OSXApplication();  } else   if (os.startsWith("win")) {    app=new SDIApplication();  } else {    app=new SDIApplication();  }  DrawApplicationModel model=new DrawApplicationModel();  model.setName("JHotDraw Draw");  model.setVersion(Main.class.getPackage().getImplementationVersion());  model.setCopyright("Copyright 2006-2009 (c) by the authors of JHotDraw and all its contributors.\n" + "This software is licensed under LGPL or Creative Commons 3.0 Attribution.");  model.setViewClassName("org.jhotdraw.samples.draw.DrawView");  app.setModel(model);  app.launch(args);}  }
class C{  @Override public Object instantiateItem(ViewGroup container,int position){  StudyOverviewModel.Question item=items.get(position);  if (!TextUtils.isEmpty(item.getVideoName())) {    View layout=inflater.inflate(R.layout.rss_layout_study_html,container,false);    container.addView(layout);    StringBuilder builder=new StringBuilder("<h3>" + item.getTitle() + "</h3>");    builder.append("<p>" + item.getDetails() + "</p>");    TextView simpleView=(TextView)layout.findViewById(R.id.text);    simpleView.setText(Html.fromHtml(builder.toString()));    simpleView.setCompoundDrawablesWithIntrinsicBounds(0,0,0,R.drawable.rss_ic_video);    simpleView.setOnClickListener(null);    return layout;  } else {    LocalWebView layout=new LocalWebView(container.getContext());    String path=ResourceManager.getInstance().generateAbsolutePath(ResourceManager.Resource.TYPE_HTML,item.getDetails());    layout.loadUrl(path);    container.addView(layout);    return layout;  }}  }
class C{  public JenkinsServer(JenkinsHttpClient client){  this.client=client;}  }
class C{  public boolean isSaveInHistoric(){  Object oo=get_Value(COLUMNNAME_IsSaveInHistoric);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void validateFocusIndex(){  if (focusIndex >= tabPane.getTabCount()) {    setFocusIndex(tabPane.getSelectedIndex(),false);  }}  }
class C{  public void testRemoveNamedItemNS() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  doc=(Document)load("hc_staff",builder);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    try {      notations.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static boolean isRecursivelyEnabled(java.awt.Component component){  if (component.getParent() instanceof JTabbedPane) {    JTabbedPane jTabbedPane=(JTabbedPane)component.getParent();    boolean tabVisible=false;    for (    java.awt.Component childComponent : jTabbedPane.getComponents()) {      if (childComponent == component) {        tabVisible=true;        break;      }    }    return tabVisible && isRecursivelyEnabled(component.getParent());  }  return component.isEnabled() && (component.getParent() == null || isRecursivelyEnabled(component.getParent())) && isRecursivelyVisible(component);}  }
class C{  public static String firstCharToUppercase(String word){  if (word == null || word.length() == 0) {    return word;  }  return word.substring(0,1).toUpperCase().concat(word.substring(1));}  }
class C{  public NoiseTagLdaModel(int numTopics){  alpha=50.0 / numTopics;  beta=0.01;  eta=1.0;  locked=false;  this.numTopics=numTopics;  wnz=new int[numTopics];  tnz=new int[numTopics + 1];  Arrays.fill(wnz,0);  Arrays.fill(tnz,0);  noise=numTopics;}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof ZipFileObject))   return false;  ZipFileObject o=(ZipFileObject)other;  return zarch.getAbsoluteFile().equals(o.zarch.getAbsoluteFile()) && name.equals(o.name);}  }
class C{  public static void main(final String... args){  SpringApplication.run(Application.class,args);}  }
class C{  public PutIndexedScriptRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  public boolean hasValueString(){  return super.hasAttribute(VALUE_STRING);}  }
class C{  public void unzipEntry() throws jplag.ExitException {  String tmp2=getSubmissionID() + getUsername();  File part=new File(JPLAG_ENTRIES_DIRECTORY + File.separator + tmp2+ ".zip");  int totalsize=ZipUtil.unzip(part,JPLAG_ENTRIES_DIRECTORY,tmp2);  if (totalsize > MAX_UNZIPPED_SIZE)   throw new jplag.ExitException("Submission too big! It may be " + (MAX_UNZIPPED_SIZE / 1024) + " kB at maximum, but it is "+ (totalsize / 1024)+ " kB!");  File unzipped=new File(JPLAG_ENTRIES_DIRECTORY + File.separator + tmp2);  File[] files=unzipped.listFiles();  String root_dir=(files.length == 1) ? files[0].getPath() : unzipped.getPath();  files=null;  getOption().root_dir=root_dir;  System.gc();}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public static DoubleMatrix2D minusMult(DoubleMatrix2D A,DoubleMatrix2D B,double s){  return A.assign(B,F.minusMult(s));}  }
class C{  VMwareEndpointCertificateStore(ServerHandle serverHandle,String serverName,String userName,String storeName){  if (storeName == null || storeName.isEmpty()) {    throw new IllegalArgumentException("storeName cannot be null or empty.");  }  if (serverHandle == null) {    throw new IllegalArgumentException("serverHandle cannot be null or empty.");  }  _serverHandle=serverHandle;  _storeHandle=null;  _storeName=storeName;  _serverName=serverName;  _userName=userName;}  }
class C{  public void or(FixedBitSet other){  or(other.bits,other.numWords);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testToMonitorString(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  String expResult="Reply from Parallax reader. Tag read 7800656EB6";  assertEquals(expResult,instance.toMonitorString(msgStandalone));}  }
class C{  public static short bytesToShort(byte[] bytes){  return bytesToShort(bytes,0);}  }
class C{  protected synchronized void timeout(){  if (progState != NOTPROGRAMMING) {    log.debug("timeout!" + _cv);    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public static final byte[] unzipBestEffort(byte[] in){  return unzipBestEffort(in,Integer.MAX_VALUE);}  }
class C{  public ColorAction add(Predicate p,int color){  super.add(p,new Integer(color));  return this;}  }
class C{  public static void deleteProject(String projectName,boolean deleteContent) throws CoreException {  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (!project.exists()) {    throw new IllegalStateException("Project " + projectName + " does not exist in this workspace");  }  project.delete(deleteContent,true,new NullProgressMonitor());}  }
class C{  public static boolean containsConstant(Enum<?>[] enumValues,String constant,boolean caseSensitive){  for (  Enum<?> candidate : enumValues) {    if (caseSensitive ? candidate.toString().equals(constant) : candidate.toString().equalsIgnoreCase(constant)) {      return true;    }  }  return false;}  }
class C{  @Override public void run(){  LOG.info("Setting up container launch context for containerid={}",container.getId());  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);  setClasspath(containerEnv);  try {    containerEnv.put("HADOOP_USER_NAME",UserGroupInformation.getLoginUser().getUserName());  } catch (  Exception e) {    LOG.error("Failed to retrieve principal name",e);  }  ctx.setEnvironment(containerEnv);  ctx.setTokens(tokens);  Map<String,LocalResource> localResources=new HashMap<>();  try {    try (FileSystem fs=StramClientUtils.newFileSystemInstance(nmClient.getConfig())){      addFilesToLocalResources(LocalResourceType.FILE,dag.getAttributes().get(Context.DAGContext.LIBRARY_JARS),localResources,fs);      String archives=dag.getAttributes().get(LogicalPlan.ARCHIVES);      if (archives != null) {        addFilesToLocalResources(LocalResourceType.ARCHIVE,archives,localResources,fs);      }      ctx.setLocalResources(localResources);    }   } catch (  IOException e) {    LOG.error("Failed to prepare local resources.",e);    return;  }  List<CharSequence> vargs=getChildVMCommand(container.getId().toString());  StringBuilder command=new StringBuilder(1024);  for (  CharSequence str : vargs) {    command.append(str).append(" ");  }  LOG.info("Launching on node: {} command: {}",container.getNodeId(),command);  List<String> commands=new ArrayList<>();  commands.add(command.toString());  ctx.setCommands(commands);  nmClient.startContainerAsync(container,ctx);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void backupFolder(File targetDir,File sourceDir) throws IOException {  for (  String type : fileTypeList) {    backupFolderByType(targetDir,sourceDir,type);  }}  }
class C{  public void testDescriptorBuilder(){  SegmentDescriptor descriptor=SegmentDescriptor.builder(FileBuffer.allocate(file,SegmentDescriptor.BYTES)).withId(2).withVersion(3).withIndex(1025).withMaxSegmentSize(1024 * 1024).withMaxEntries(2048).build();  Assert.assertEquals(descriptor.id(),2);  Assert.assertEquals(descriptor.version(),3);  Assert.assertEquals(descriptor.index(),1025);  Assert.assertEquals(descriptor.maxSegmentSize(),1024 * 1024);  Assert.assertEquals(descriptor.maxEntries(),2048);  Assert.assertEquals(descriptor.updated(),0);  long time=System.currentTimeMillis();  descriptor.update(time);  Assert.assertEquals(descriptor.updated(),time);  Assert.assertFalse(descriptor.locked());  descriptor.lock();  Assert.assertTrue(descriptor.locked());}  }
class C{  public T caseTraceLevel_(TraceLevel_ object){  return null;}  }
class C{  public boolean atEOFOfCurrentStream() throws IOException {  int ch=this.currentReader.pbReader.read();  if (ch < 0) {    return true;  } else {    this.currentReader.pbReader.unread(ch);    return false;  }}  }
class C{  @Override public boolean onLongClick(View v){switch (v.getId()) {case R.id.picture_iv:    new AlertDialog.Builder(PictureActivity.this).setMessage(getString(R.string.picture_download)).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,null).show();  return true;}return false;}  }
class C{  public void startExecuting(){  this.taskOwner.setAttackTarget(this.taskOwner.getAITarget());  this.revengeTimer=this.taskOwner.getRevengeTimer();  if (this.entityCallsForHelp) {    double dist=this.getTargetDistance();    List list=this.taskOwner.worldObj.getEntitiesWithinAABB(this.taskOwner.getClass(),new AxisAlignedBB(this.taskOwner.posX,this.taskOwner.posY,this.taskOwner.posZ,this.taskOwner.posX + 1.0D,this.taskOwner.posY + 1.0D,this.taskOwner.posZ + 1.0D).expand(dist,10.0D,dist));    for (    Object aList : list) {      EntityCreature creature=(EntityCreature)aList;      if (this.taskOwner != creature && creature.getAttackTarget() == null && !creature.isOnSameTeam(this.taskOwner.getAITarget()) && creature != this.taskOwner.getAITarget()) {        creature.setAttackTarget(this.taskOwner.getAITarget());      }    }  }  super.startExecuting();}  }
class C{  public String generateExportChangePathParams(Workflow workflow,String wfGroupId,String waitFor,URI storageURI,URI exportGroupURI,URI volumeURI) throws ControllerException {  DiscoveredSystemObject storageSystem=getStorageSystem(_dbClient,storageURI);  BlockObject volume=BlockObject.fetch(_dbClient,volumeURI);  Workflow.Method method=ExportWorkflowEntryPoints.exportGroupChangePathParamsMethod(storageURI,exportGroupURI,volumeURI);  return newWorkflowStep(workflow,wfGroupId,String.format("Updated Export PathParams on storage array %s (%s, args) for volume %s (%s)",storageSystem.getNativeGuid(),storageURI,volume.getLabel(),volumeURI),storageSystem,method,null,waitFor);}  }
class C{  public void deselectGraphics() throws IOException {  link.dos.write(Link.UPDATE_GRAPHICS.getBytes());  link.dos.writeByte(ACTION_GRAPHICS);  link.dos.writeInt(MODIFY_DESELECTALL_GRAPHIC_MASK);  LinkProperties.EMPTY_PROPERTIES.write(link.dos);}  }
class C{  public Long selectMaxFromUsers(){  try {    TypedQuery<Long> query=em.createQuery("select count(c.user_id) from Users c where c.deleted = 'false'",Long.class);    List<Long> ll=query.getResultList();    log.info("selectMaxFromUsers" + ll.get(0));    return ll.get(0);  } catch (  Exception ex2) {    log.error("[selectMaxFromUsers] ",ex2);  }  return null;}  }
class C{  public boolean isCanExport(int AD_Table_ID){  if (!isCanExport()) {    log.warning("Role denied");    return false;  }  if (!isTableAccess(AD_Table_ID,true))   return false;  if (!isCanReport(AD_Table_ID))   return false;  boolean canExport=true;  for (int i=0; i < m_tableAccess.length; i++) {    if (!X_AD_Table_Access.ACCESSTYPERULE_Exporting.equals(m_tableAccess[i].getAccessTypeRule()))     continue;    if (m_tableAccess[i].isExclude()) {      canExport=m_tableAccess[i].isCanExport();      log.fine("Exclude " + AD_Table_ID + " - "+ canExport);      return canExport;    } else {      canExport=false;      canExport=m_tableAccess[i].isCanExport();      log.fine("Include " + AD_Table_ID + " - "+ canExport);      return canExport;    }  }  log.fine(AD_Table_ID + " - " + canExport);  return canExport;}  }
class C{  public boolean handleSslErrorRequest(SslError error){  int primaryError=error.getPrimaryError();  if (false) {    Log.v(LOGTAG,"TestEventHandler: handleSslErrorRequest(): " + " primary error:" + primaryError + " certificate: "+ error.getCertificate());  }  eventsReceived[TEST_SSL_CERTIFICATE_ERROR]=true;  if (notExpecting[TEST_SSL_CERTIFICATE_ERROR]) {    expectDetails.append("SSL Certificate error event received " + "but not expected");    expectDetails.append("\r\n");  }  if (expectSslErrors != -1) {    if (expectSslErrors == primaryError) {      expectSslErrors=-1;    } else {      expectDetails.append("SslCertificateError id expected:" + expectSslErrors + " got: "+ primaryError);      expectDetails.append("\r\n");    }  }  if (expectSslErrors == -1)   expects[TEST_SSL_CERTIFICATE_ERROR]=false;  return false;}  }
class C{  public DigesterOutputStream(MessageDigest md){  this(md,false);}  }
class C{  InputStream createStreamFromFile(File xmlFile) throws FileNotFoundException {  return new BufferedInputStream(new FileInputStream(xmlFile));}  }
class C{  public OneStepIteratorForward(int axis){  super(null);  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public final void wait(long timeout) throws java.lang.InterruptedException {  return;}  }
class C{  public void flush() throws java.io.IOException {  flushBase64();  super.flush();}  }
class C{  @Override public Long zadd(final byte[] key,final double score,final byte[] member){  checkIsInMultiOrPipeline();  client.zadd(key,score,member);  return client.getIntegerReply();}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.183 -0400",hash_original_method="BD337BA032101647B7F6AAF312F9C74B",hash_generated_method="088E1FDC0606258AF1B3EF1F58A835BD") public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_11:    return ((InternalEList<?>)getAnonymous_entryOrExitAction_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_21:  return ((InternalEList<?>)getAnonymous_entryOrExitAction_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void doMouseDragged(MouseEvent event){  log.debug("Mouse dragged, X=" + getX() + " Y="+ getY());  if (_train != null) {    RouteLocation next=_train.getNextLocation(_train.getCurrentLocation());    if (next != null) {      Point nextPoint=next.getTrainIconCoordinates();      log.debug("Next location (" + next.getName() + "), X="+ nextPoint.x+ " Y="+ nextPoint.y);      if (Math.abs(getX() - nextPoint.x) < range && Math.abs(getY() - nextPoint.y) < range) {        log.debug("Train icon (" + _train.getName() + ") within range of ("+ next.getName()+ ")");        if (JOptionPane.showConfirmDialog(null,MessageFormat.format(Bundle.getMessage("MoveTrainTo"),new Object[]{next.getName()}),MessageFormat.format(Bundle.getMessage("MoveTrain"),new Object[]{_train.getIconName()}),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {          _train.move();        }      }    }  }}  }
class C{  public boolean enterPrivateMode(BluetoothDevice device,int index){  if (DBG)   log("enterPrivateMode()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.enterPrivateMode(device,index);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  protected void onCreate(final int initialVersion){}  }
class C{  private boolean updateAchievementGoals(){  if (!MEASURETYPE_Achievements.equals(getMeasureType()))   return false;  Timestamp today=new Timestamp(System.currentTimeMillis());  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (int i=0; i < goals.length; i++) {    MGoal goal=goals[i];    String MeasureScope=goal.getMeasureScope();    String trunc=TimeUtil.TRUNC_DAY;    if (MGoal.MEASUREDISPLAY_Year.equals(MeasureScope))     trunc=TimeUtil.TRUNC_YEAR; else     if (MGoal.MEASUREDISPLAY_Quarter.equals(MeasureScope))     trunc=TimeUtil.TRUNC_QUARTER; else     if (MGoal.MEASUREDISPLAY_Month.equals(MeasureScope))     trunc=TimeUtil.TRUNC_MONTH; else     if (MGoal.MEASUREDISPLAY_Week.equals(MeasureScope))     trunc=TimeUtil.TRUNC_WEEK;    Timestamp compare=TimeUtil.trunc(today,trunc);    MAchievement[] achievements=MAchievement.getOfMeasure(getCtx(),getPA_Measure_ID());    BigDecimal ManualActual=Env.ZERO;    for (int j=0; j < achievements.length; j++) {      MAchievement achievement=achievements[j];      if (achievement.isAchieved() && achievement.getDateDoc() != null) {        Timestamp ach=TimeUtil.trunc(achievement.getDateDoc(),trunc);        if (compare.equals(ach))         ManualActual=ManualActual.add(achievement.getManualActual());      }    }    goal.setMeasureActual(ManualActual);    goal.save(get_TrxName());  }  return true;}  }
class C{  @Override public TransferResult<V,S> visitTernaryExpression(TernaryExpressionNode n,TransferInput<V,S> p){  TransferResult<V,S> result=super.visitTernaryExpression(n,p);  S store=result.getRegularStore();  V thenValue=p.getValueOfSubNode(n.getThenOperand());  V elseValue=p.getValueOfSubNode(n.getElseOperand());  V resultValue=null;  if (thenValue != null && elseValue != null) {    resultValue=thenValue.leastUpperBound(elseValue);  }  return new RegularTransferResult<>(finishValue(resultValue,store),store);}  }
class C{  private boolean existsCommentTable(Connection conn) throws SQLException {  boolean exists=false;  StringBuffer query=new StringBuffer();  query.append("select name from sysobjects where name = 'all_comments' ");  PreparedStatement pstmt=conn.prepareStatement(query.toString());  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    exists=true;  }  rs.close();  pstmt.close();  return exists;}  }
class C{  private String[] diff_halfMatchI(String longtext,String shorttext,int i){  String seed=longtext.substring(i,i + longtext.length() / 4);  int j=-1;  String best_common="";  String best_longtext_a="", best_longtext_b="";  String best_shorttext_a="", best_shorttext_b="";  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));    if (best_common.length() < suffixLength + prefixLength) {      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);      best_longtext_a=longtext.substring(0,i - suffixLength);      best_longtext_b=longtext.substring(i + prefixLength);      best_shorttext_a=shorttext.substring(0,j - suffixLength);      best_shorttext_b=shorttext.substring(j + prefixLength);    }  }  if (best_common.length() * 2 >= longtext.length()) {    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};  } else {    return null;  }}  }
class C{  public static float[] randomVector(int aSize,long seed){  Random rand=new Random(seed);  float[] unk=new float[aSize];  for (int i=0; i < unk.length; i++) {    unk[i]=(rand.nextFloat() - 0.5f) / aSize;  }  return unk;}  }
class C{  public ValidatorPlugin(){  this.delegate=null;}  }
class C{  public void onOrbitReached(){  super.onOrbitReached();  if (!stats.hasSeat()) {    TileGuidanceComputer computer=storage.getGuidanceComputer();    if (computer != null && computer.getStackInSlot(0) != null && computer.getStackInSlot(0).getItem() instanceof ItemAsteroidChip) {      float drillingPower=stats.getDrillingPower();      MissionOreMining miningMission=new MissionOreMining((long)(drillingPower == 0f ? 36000 : 360 / stats.getDrillingPower()),this,connectedInfrastructure);      DimensionProperties properties=DimensionManager.getInstance().getDimensionProperties(worldObj.provider.dimensionId);      properties.addSatallite(miningMission,worldObj);      if (!worldObj.isRemote)       PacketHandler.sendToAll(new PacketSatellite(miningMission));      for (      IInfrastructure i : connectedInfrastructure) {        i.linkMission(miningMission);      }      this.setDead();    } else {      List<TileSatelliteHatch> satelliteHatches=storage.getSatelliteHatches();      for (      TileSatelliteHatch tile : storage.getSatelliteHatches()) {        SatelliteBase satellite=tile.getSatellite();        if (satellite == null) {          ItemStack stack=tile.getStackInSlot(0);          if (stack != null && stack.getItem() == AdvancedRocketryItems.itemSpaceStation) {            StorageChunk storage=((ItemPackedStructure)stack.getItem()).getStructure(stack);            ISpaceObject object=SpaceObjectManager.getSpaceManager().getSpaceStation(stack.getItemDamage());            SpaceObjectManager.getSpaceManager().moveStationToBody(object,this.worldObj.provider.dimensionId);            object.onModuleUnpack(storage);            tile.setInventorySlotContents(0,null);          }        } else {          satellite.setDimensionId(worldObj);          DimensionProperties properties=DimensionManager.getInstance().getDimensionProperties(this.worldObj.provider.dimensionId);          properties.addSatallite(satellite,this.worldObj);        }      }    }    destinationDimId=storage.getDestinationDimId(this.worldObj.provider.dimensionId,(int)this.posX,(int)this.posZ);    if (DimensionManager.getInstance().canTravelTo(destinationDimId)) {      Vector3F<Float> pos=storage.getDestinationCoordinates(destinationDimId,true);      storage.setDestinationCoordinates(new Vector3F<Float>((float)this.posX,(float)this.posY,(float)this.posZ));      if (pos != null) {        this.setInOrbit(true);        this.motionY=-this.motionY;        this.travelToDimension(destinationDimId,pos.x,Configuration.orbit,pos.z);        return;      }    } else     this.setDead();  } else {    this.motionY=-this.motionY;    setInOrbit(true);    if (destinationDimId == Configuration.spaceDimId || this.worldObj.provider.dimensionId == Configuration.spaceDimId) {      Vector3F<Float> pos=storage.getDestinationCoordinates(destinationDimId,true);      storage.setDestinationCoordinates(new Vector3F<Float>((float)this.posX,(float)this.posY,(float)this.posZ));      if (pos != null) {        if (this.riddenByEntity != null) {          setInFlight(false);          pos.y=(float)Configuration.orbit;        }        this.travelToDimension(destinationDimId,pos.x,pos.y,pos.z);        return;      }    }    if (this.riddenByEntity != null) {      setInFlight(false);      if (DimensionManager.getInstance().getDimensionProperties(destinationDimId).getName().equals("Luna")) {        if (this.riddenByEntity instanceof EntityPlayer) {          ((EntityPlayer)this.riddenByEntity).triggerAchievement(ARAchivements.moonLanding);          if (!DimensionManager.hasReachedMoon)           ((EntityPlayer)this.riddenByEntity).triggerAchievement(ARAchivements.oneSmallStep);        }        DimensionManager.hasReachedMoon=true;      }    } else     setPosition(posX,Configuration.orbit,posZ);    if (destinationDimId != this.worldObj.provider.dimensionId)     this.travelToDimension(this.worldObj.provider.dimensionId == destinationDimId ? 0 : destinationDimId);  }}  }
class C{  static final Node changeNamespace(final Node node,final String oldNamespaceUri,final String newNamespaceUri) throws XPathExpressionException {  Node result=null;  final NodeList nodes=query(node,"//*");  for (int i=0; i < nodes.getLength(); i++) {    final Node element=nodes.item(i);    if (element.getNamespaceURI() == null || element.getNamespaceURI().equals(oldNamespaceUri)) {      Node renamed=node.getOwnerDocument().renameNode(element,newNamespaceUri,element.getNodeName());      if (element == node) {        result=renamed;      }    }  }  return result;}  }
class C{  private void writeBlock() throws IOException {  if (debug) {    System.err.println("WriteBlock: blkIdx = " + currBlkIdx);  }  if (outStream == null) {    throw new IOException("writing to an input buffer");  }  outStream.write(blockBuffer,0,blockSize);  outStream.flush();  currRecIdx=0;  currBlkIdx++;  Arrays.fill(blockBuffer,(byte)0);}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader,int timeoutInMs){  return waitForAllActiveAndLive(zkStateReader,null,timeoutInMs);}  }
class C{  public void openWorkspace(final File theFile){  WorkspaceSerializer serializer=new WorkspaceSerializer(this);  try {    if (theFile != null) {      clearWorkspace();      serializer.deserialize(new FileInputStream(theFile));      setCurrentFile(theFile);      setWorkspaceChanged(false);      fireNewWorkspaceOpened();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void cleanupTerminology(){  if (!m_source.isObjectExists("AD_Sequence",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Element",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Table",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Column",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Process_Para",m_source.getTables()))   return;  resetDBObjects(null);  m_counterUpd=new Integer(0);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupTerminology",m_direction);  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  Savepoint sp=m_target.setSavepoint("synchronize terminology");  ArrayList<String> insertColumnNames=new ArrayList<String>();  ArrayList<String> updateColumnNames=new ArrayList<String>();  ArrayList<String> whereColumnNames=new ArrayList<String>();  DBObject table=m_source.getObjectByName("AD_Sequence",m_source.getTables());  Vector<Integer> v=new Vector<Integer>(table.getContents().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> columnIterator=v.iterator(); columnIterator.hasNext(); ) {    Integer key=columnIterator.next();    DBObject_Table_Column sequenceColumn=(DBObject_Table_Column)table.getContents().get(key);    String columnName=sequenceColumn.getName();    if (columnName.equalsIgnoreCase("Updated") || columnName.equalsIgnoreCase("CurrentNextSys") || columnName.equalsIgnoreCase("CurrentNext")) {      updateColumnNames.add(columnName);    }    if (columnName.equalsIgnoreCase("Name")) {      whereColumnNames.add(columnName);    }  }  table=m_source.getObjectByName("AD_Element",m_source.getTables());  v=new Vector<Integer>(table.getContents().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> columnIterator=v.iterator(); columnIterator.hasNext(); ) {    Integer key=columnIterator.next();    DBObject_Table_Column sequenceColumn=(DBObject_Table_Column)table.getContents().get(key);    String columnName=sequenceColumn.getName();    if (columnName.equalsIgnoreCase("AD_Element_ID") || columnName.equalsIgnoreCase("AD_Client_ID") || columnName.equalsIgnoreCase("AD_Org_ID")|| columnName.equalsIgnoreCase("IsActive")|| columnName.equalsIgnoreCase("Created")|| columnName.equalsIgnoreCase("CreatedBy")|| columnName.equalsIgnoreCase("Updated")|| columnName.equalsIgnoreCase("UpdatedBy")|| columnName.equalsIgnoreCase("ColumnName")|| columnName.equalsIgnoreCase("Name")|| columnName.equalsIgnoreCase("PrintName")|| columnName.equalsIgnoreCase("Description")|| columnName.equalsIgnoreCase("Help")|| columnName.equalsIgnoreCase("EntityType")) {      insertColumnNames.add(columnName);    }  }  PreparedStatementWrapper stmtLoadSequence=null;  PreparedStatementWrapper stmtUpdateSequence=null;  PreparedStatementWrapper stmtInsertElement=null;  PreparedStatementWrapper stmtTranslatedColumns=null;  stmtLoadSequence=m_target.setPreparedStatement(s_dbEngine.sql_selectPreparedStatement(vendor,catalog,schema,"AD_Sequence",whereColumnNames));  m_target.setPreparedStatementString(stmtLoadSequence,1,"AD_Element");  stmtUpdateSequence=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(vendor,catalog,schema,"AD_Sequence",updateColumnNames,whereColumnNames));  m_target.setPreparedStatementString(stmtUpdateSequence,updateColumnNames.size() + 1,"AD_Element");  stmtInsertElement=m_target.setPreparedStatement(s_dbEngine.sql_insertPreparedStatement(vendor,catalog,schema,"AD_Element",insertColumnNames));  stmtTranslatedColumns=m_target.setPreparedStatement(s_dbEngine.sqlAD_getTranslatedColumns(vendor,catalog,schema));  ArrayList<String> createdElements=new ArrayList<String>();  String columnName="";  String name="";  String description="";  String help="";  String entityType="";  int sysNextSeq=0;  int userNextSeq=0;  int increment=0;  Statement stmt=m_target.setStatement();  ResultSet rs=m_target.executeQuery(stmt,s_dbEngine.sqlAD_getSystemColumnsWithoutElement(vendor,catalog,schema,m_target.getCustomEntities()));  while (m_target.getResultSetNext(rs)) {    columnName=m_target.getResultSetString(rs,"ColumnName");    name=m_target.getResultSetString(rs,"Name");    description=m_target.getResultSetString(rs,"Description");    help=m_target.getResultSetString(rs,"Help");    entityType=m_target.getResultSetString(rs,"EntityType");    if (!createdElements.contains(columnName)) {      createdElements.add(columnName);      ResultSet rsLoadSequence=m_target.executeQuery(stmtLoadSequence);      if (m_target.getResultSetNext(rsLoadSequence)) {        sysNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNextSys");        userNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNext");        increment=m_target.getResultSetInt(rsLoadSequence,"IncrementNo");      }      m_target.releaseResultSet(rsLoadSequence);      for (int i=0; i < updateColumnNames.size(); i++) {        String currentColumnName=updateColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtUpdateSequence,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CurrentNextSys")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,sysNextSeq + increment);        } else         if (currentColumnName.equalsIgnoreCase("CurrentNext")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,userNextSeq);        }      }      m_target.executeUpdate(stmtUpdateSequence,false);      for (int i=0; i < insertColumnNames.size(); i++) {        String currentColumnName=insertColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("AD_Element_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,sysNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("AD_Client_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("AD_Org_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("IsActive")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,"Y");        } else         if (currentColumnName.equalsIgnoreCase("Created")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CreatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("UpdatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("ColumnName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,columnName);        } else         if (currentColumnName.equalsIgnoreCase("Name")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("PrintName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("Description")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,description);        } else         if (currentColumnName.equalsIgnoreCase("Help")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,help);        } else         if (currentColumnName.equalsIgnoreCase("EntityType")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,entityType);        }      }      Integer sqlResult=m_target.executeUpdate(stmtInsertElement,false);      if (sqlResult != null) {        logAddDetail(sqlResult,null);      }    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  columnName="";  name="";  description="";  help="";  entityType="";  sysNextSeq=0;  userNextSeq=0;  increment=0;  stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,s_dbEngine.sqlAD_getCustomColumnsWithoutElement(vendor,catalog,schema,m_target.getCustomEntities()));  while (m_target.getResultSetNext(rs)) {    columnName=m_target.getResultSetString(rs,"ColumnName");    name=m_target.getResultSetString(rs,"Name");    description=m_target.getResultSetString(rs,"Description");    help=m_target.getResultSetString(rs,"Help");    entityType=m_target.getResultSetString(rs,"EntityType");    if (!createdElements.contains(columnName)) {      createdElements.add(columnName);      ResultSet rsLoadSequence=m_target.executeQuery(stmtLoadSequence);      if (m_target.getResultSetNext(rsLoadSequence)) {        sysNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNextSys");        userNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNext");        increment=m_target.getResultSetInt(rsLoadSequence,"IncrementNo");      }      m_target.releaseResultSet(rsLoadSequence);      for (int i=0; i < updateColumnNames.size(); i++) {        String currentColumnName=updateColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtUpdateSequence,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CurrentNextSys")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,sysNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("CurrentNext")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,userNextSeq + increment);        }      }      m_target.executeUpdate(stmtUpdateSequence,false);      for (int i=0; i < insertColumnNames.size(); i++) {        String currentColumnName=insertColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("AD_Element_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,userNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("AD_Client_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("AD_Org_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("IsActive")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,"Y");        } else         if (currentColumnName.equalsIgnoreCase("Created")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CreatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("UpdatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("ColumnName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,columnName);        } else         if (currentColumnName.equalsIgnoreCase("Name")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("PrintName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("Description")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,description);        } else         if (currentColumnName.equalsIgnoreCase("Help")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,help);        } else         if (currentColumnName.equalsIgnoreCase("EntityType")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,entityType);        }      }      Integer sqlResult=m_target.executeUpdate(stmtInsertElement,false);      if (sqlResult != null) {        logAddDetail(sqlResult,null);      }    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  columnName="";  name="";  description="";  help="";  entityType="";  sysNextSeq=0;  userNextSeq=0;  increment=0;  stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,s_dbEngine.sqlAD_getSystemParametersWithoutElement(vendor,catalog,schema,m_target.getCustomEntities()));  while (m_target.getResultSetNext(rs)) {    columnName=m_target.getResultSetString(rs,"ColumnName");    name=m_target.getResultSetString(rs,"Name");    description=m_target.getResultSetString(rs,"Description");    help=m_target.getResultSetString(rs,"Help");    entityType=m_target.getResultSetString(rs,"EntityType");    if (!createdElements.contains(columnName)) {      createdElements.add(columnName);      ResultSet rsLoadSequence=m_target.executeQuery(stmtLoadSequence);      if (m_target.getResultSetNext(rsLoadSequence)) {        sysNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNextSys");        userNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNext");        increment=m_target.getResultSetInt(rsLoadSequence,"IncrementNo");      }      m_target.releaseResultSet(rsLoadSequence);      for (int i=0; i < updateColumnNames.size(); i++) {        String currentColumnName=updateColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtUpdateSequence,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CurrentNextSys")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,sysNextSeq + increment);        } else         if (currentColumnName.equalsIgnoreCase("CurrentNext")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,userNextSeq);        }      }      m_target.executeUpdate(stmtUpdateSequence,false);      for (int i=0; i < insertColumnNames.size(); i++) {        String currentColumnName=insertColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("AD_Element_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,sysNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("AD_Client_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("AD_Org_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("IsActive")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,"Y");        } else         if (currentColumnName.equalsIgnoreCase("Created")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CreatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("UpdatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("ColumnName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,columnName);        } else         if (currentColumnName.equalsIgnoreCase("Name")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("PrintName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("Description")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,description);        } else         if (currentColumnName.equalsIgnoreCase("Help")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,help);        } else         if (currentColumnName.equalsIgnoreCase("EntityType")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,entityType);        }      }      Integer sqlResult=m_target.executeUpdate(stmtInsertElement,false);      if (sqlResult != null) {        logAddDetail(sqlResult,null);      }    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  columnName="";  name="";  description="";  help="";  entityType="";  sysNextSeq=0;  userNextSeq=0;  increment=0;  stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,s_dbEngine.sqlAD_getCustomParametersWithoutElement(vendor,catalog,schema,m_target.getCustomEntities()));  while (m_target.getResultSetNext(rs)) {    columnName=m_target.getResultSetString(rs,"ColumnName");    name=m_target.getResultSetString(rs,"Name");    description=m_target.getResultSetString(rs,"Description");    help=m_target.getResultSetString(rs,"Help");    entityType=m_target.getResultSetString(rs,"EntityType");    if (!createdElements.contains(columnName)) {      createdElements.add(columnName);      ResultSet rsLoadSequence=m_target.executeQuery(stmtLoadSequence);      if (m_target.getResultSetNext(rsLoadSequence)) {        sysNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNextSys");        userNextSeq=m_target.getResultSetInt(rsLoadSequence,"CurrentNext");        increment=m_target.getResultSetInt(rsLoadSequence,"IncrementNo");      }      m_target.releaseResultSet(rsLoadSequence);      for (int i=0; i < updateColumnNames.size(); i++) {        String currentColumnName=updateColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtUpdateSequence,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CurrentNextSys")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,sysNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("CurrentNext")) {          m_target.setPreparedStatementInt(stmtUpdateSequence,parameterIndex,userNextSeq + increment);        }      }      m_target.executeUpdate(stmtUpdateSequence,false);      for (int i=0; i < insertColumnNames.size(); i++) {        String currentColumnName=insertColumnNames.get(i);        int parameterIndex=i + 1;        if (currentColumnName.equalsIgnoreCase("AD_Element_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,userNextSeq);        } else         if (currentColumnName.equalsIgnoreCase("AD_Client_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("AD_Org_ID")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("IsActive")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,"Y");        } else         if (currentColumnName.equalsIgnoreCase("Created")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("CreatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("Updated")) {          m_target.setPreparedStatementTimestamp(stmtInsertElement,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));        } else         if (currentColumnName.equalsIgnoreCase("UpdatedBy")) {          m_target.setPreparedStatementInt(stmtInsertElement,parameterIndex,0);        } else         if (currentColumnName.equalsIgnoreCase("ColumnName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,columnName);        } else         if (currentColumnName.equalsIgnoreCase("Name")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("PrintName")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,name);        } else         if (currentColumnName.equalsIgnoreCase("Description")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,description);        } else         if (currentColumnName.equalsIgnoreCase("Help")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,help);        } else         if (currentColumnName.equalsIgnoreCase("EntityType")) {          m_target.setPreparedStatementString(stmtInsertElement,parameterIndex,entityType);        }      }      Integer sqlResult=m_target.executeUpdate(stmtInsertElement,false);      if (sqlResult != null) {        logAddDetail(sqlResult,null);      }    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  if (createdElements != null && createdElements.size() > 0) {    columnName="";    String sqlCommand=s_dbEngine.sql_updatePreparedStatement(vendor,catalog,schema,"AD_Column",new ArrayList<String>(Arrays.asList("AD_Element_ID")),new ArrayList<String>(Arrays.asList("ColumnName")));    PreparedStatementWrapper pstmt=m_target.setPreparedStatement(sqlCommand);    m_target.setPreparedStatementNull(pstmt,1,java.sql.Types.INTEGER);    Iterator<String> it=createdElements.iterator();    while (it.hasNext()) {      columnName=it.next();      m_target.setPreparedStatementString(pstmt,2,columnName);      Integer sqlResult=m_target.executeUpdate(pstmt,false);      if (sqlResult != null) {        logUpdateDetail(sqlResult,null);      }    }    m_target.releasePreparedStatement(pstmt);  }  if (createdElements != null && createdElements.size() > 0) {    columnName="";    String sqlCommand=s_dbEngine.sql_updatePreparedStatement(vendor,catalog,schema,"AD_Process_Para",new ArrayList<String>(Arrays.asList("AD_Element_ID")),new ArrayList<String>(Arrays.asList("ColumnName")));    PreparedStatementWrapper pstmt=m_target.setPreparedStatement(sqlCommand);    m_target.setPreparedStatementNull(pstmt,1,java.sql.Types.INTEGER);    Iterator<String> it=createdElements.iterator();    while (it.hasNext()) {      columnName=it.next();      m_target.setPreparedStatementString(pstmt,2,columnName);      Integer sqlResult=m_target.executeUpdate(pstmt,false);      if (sqlResult != null) {        logUpdateDetail(sqlResult,null);      }    }    m_target.releasePreparedStatement(pstmt);  }  String tableName="AD_Element";  ArrayList<String> translatedColumnNames=new ArrayList<String>();  m_target.setPreparedStatementString(stmtTranslatedColumns,1,tableName);  rs=m_target.executeQuery(stmtTranslatedColumns);  while (m_target.getResultSetNext(rs)) {    translatedColumnNames.add(m_target.getResultSetString(rs,"ColumnName"));  }  m_target.releaseResultSet(rs);  if (translatedColumnNames.size() > 0) {    String sqlCommand=s_dbEngine.sqlADAction_insertTranslation(vendor,catalog,schema,tableName,translatedColumnNames);    stmt=m_target.setStatement();    Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);    if (sqlResult != null) {      logAddDetail(sqlResult,null);    }    m_target.releaseStatement(stmt);  }  String sqlCommand=s_dbEngine.sqlADAction_updateLinkColumnElement(vendor,catalog,schema);  stmt=m_target.setStatement();  Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);  if (sqlResult != null) {    logUpdateDetail(sqlResult,null);  }  m_target.releaseStatement(stmt);  sqlCommand=s_dbEngine.sqlADAction_updateLinkParameterElement(vendor,catalog,schema);  stmt=m_target.setStatement();  sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);  if (sqlResult != null) {    logUpdateDetail(sqlResult,null);  }  m_target.releaseStatement(stmt);  sqlCommand=s_dbEngine.sqlADAction_deleteUnusedElementTranslations(vendor,catalog,schema);  stmt=m_target.setStatement();  sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);  if (sqlResult != null) {    logDropDetail(sqlResult,null);  }  m_target.releaseStatement(stmt);  sqlCommand=s_dbEngine.sqlADAction_deleteUnusedElements(vendor,catalog,schema);  stmt=m_target.setStatement();  sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);  if (sqlResult != null) {    logDropDetail(sqlResult,null);  }  m_target.releaseStatement(stmt);  m_target.releasePreparedStatement(stmtLoadSequence);  m_target.releasePreparedStatement(stmtUpdateSequence);  m_target.releasePreparedStatement(stmtInsertElement);  m_target.releasePreparedStatement(stmtTranslatedColumns);  terminologyCheck("columns","AD_Column","AD_Element",null,null,null,null);  terminologyCheck("column translations","AD_Column","AD_Element","AD_Column_Trl","AD_Element_Trl",null,null);  terminologyCheck("tables","AD_Table","AD_Element",null,null,null,null);  terminologyCheck("table translations","AD_Table","AD_Element","AD_Table_Trl","AD_Element_Trl",null,null);  terminologyCheck("fields","AD_Field","AD_Element",null,null,new ArrayList<String>(Arrays.asList("AD_Column")),null);  terminologyCheck("field translations","AD_Field","AD_Element","AD_Field_Trl","AD_Element_Trl",new ArrayList<String>(Arrays.asList("AD_Column")),null);  terminologyCheck("PO-fields","AD_Field","AD_Element",null,null,new ArrayList<String>(Arrays.asList("AD_Column")),new ArrayList<String>(Arrays.asList("AD_Window","AD_Tab")));  terminologyCheck("PO-field translations","AD_Field","AD_Element","AD_Field_Trl","AD_Element_Trl",new ArrayList<String>(Arrays.asList("AD_Column")),new ArrayList<String>(Arrays.asList("AD_Window","AD_Tab")));  terminologyCheck("fields from process","AD_Field","AD_Process",null,null,new ArrayList<String>(Arrays.asList("AD_Column")),null);  terminologyCheck("field translations from process","AD_Field","AD_Process","AD_Field_Trl","AD_Process_Trl",new ArrayList<String>(Arrays.asList("AD_Column")),null);  terminologyCheck("parameters","AD_Process_Para","AD_Element",null,null,null,null);  terminologyCheck("parameter translations","AD_Process_Para","AD_Element","AD_Process_Para_Trl","AD_Element_Trl",null,null);  terminologyCheck("workflow nodes from window","AD_WF_Node","AD_Window",null,null,null,null);  terminologyCheck("workflow node translations from window","AD_WF_Node","AD_Window","AD_WF_Node_Trl","AD_Window_Trl",null,null);  terminologyCheck("workflow nodes from form","AD_WF_Node","AD_Form",null,null,null,null);  terminologyCheck("workflow node translations from form","AD_WF_Node","AD_Form","AD_WF_Node_Trl","AD_Form_Trl",null,null);  terminologyCheck("workflow nodes from process","AD_WF_Node","AD_Process",null,null,null,null);  terminologyCheck("workflow node translations from process","AD_WF_Node","AD_Process","AD_WF_Node_Trl","AD_Process_Trl",null,null);  terminologyCheck("menus from window","AD_Menu","AD_Window",null,null,null,null);  terminologyCheck("menu translations from window","AD_Menu","AD_Window","AD_Menu_Trl","AD_Window_Trl",null,null);  terminologyCheck("menus from process","AD_Menu","AD_Process",null,null,null,null);  terminologyCheck("menu translations from process","AD_Menu","AD_Process","AD_Menu_Trl","AD_Process_Trl",null,null);  terminologyCheck("menus from form","AD_Menu","AD_Form",null,null,null,null);  terminologyCheck("menu translations from form","AD_Menu","AD_Form","AD_Menu_Trl","AD_Form_Trl",null,null);  terminologyCheck("menus from workflow","AD_Menu","AD_Workflow",null,null,null,null);  terminologyCheck("menu translations from workflow","AD_Menu","AD_Workflow","AD_Menu_Trl","AD_Workflow_Trl",null,null);  terminologyCheck("menus from task","AD_Menu","AD_Task",null,null,null,null);  terminologyCheck("menu translations from task","AD_Menu","AD_Task","AD_Menu_Trl","AD_Task_Trl",null,null);  terminologyCheck("print format item names","AD_PrintFormatItem","AD_Element",null,null,new ArrayList<String>(Arrays.asList("AD_Column")),new ArrayList<String>(Arrays.asList("AD_Client")));  terminologyCheck("print format item print names","AD_PrintFormatItem","AD_Element",null,null,new ArrayList<String>(Arrays.asList("AD_Column")),new ArrayList<String>(Arrays.asList("AD_PrintFormat","AD_Client")));  terminologyCheck("print format item print name multi-lingual translations","AD_PrintFormatItem","AD_Element","AD_PrintFormatItem_Trl","AD_Element_Trl",new ArrayList<String>(Arrays.asList("AD_Column")),new ArrayList<String>(Arrays.asList("AD_PrintFormat","AD_Client")));  terminologyCheck("print format item print name mono-lingual translations","AD_PrintFormatItem","AD_PrintFormatItem","AD_PrintFormatItem_Trl",null,null,new ArrayList<String>(Arrays.asList("AD_PrintFormat","AD_Client")));  terminologyCheck("unused print format item print name translations","AD_PrintFormatItem","AD_PrintFormatItem","AD_PrintFormatItem_Trl",null,null,null);  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  private Shape decodeShadow(int width,int height){  path.reset();  path.moveTo(width - 1,0);  path.lineTo(width - 1,height - 4);  path.lineTo(width - 4,height - 1);  path.lineTo(0,height - 1);  return path;}  }
class C{  public static void queueBitmap(String key,Bitmap bmp){  mBitmapQueue.put(key,bmp);}  }
class C{  public void testFiveNodeSubmitCommand() throws Throwable {  testSubmitCommand(5);}  }
class C{  private void updateSelection(SVGPoint p1,SVGPoint p2){  if (p1 == null || p2 == null) {    LOG.warning("no rect selected: p1: " + p1 + " p2: "+ p2);    return;  }  DBIDSelection selContext=context.getSelection();  ModifiableDBIDs selection;  if (selContext != null) {    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());  } else {    selection=DBIDUtil.newHashSet();  }  ModifiableHyperBoundingBox ranges;  double x1=Math.min(p1.getX(),p2.getX());  double x2=Math.max(p1.getX(),p2.getX());  double y1=Math.max(p1.getY(),p2.getY());  double y2=Math.min(p1.getY(),p2.getY());  if (selContext instanceof RangeSelection) {    ranges=((RangeSelection)selContext).getRanges();  } else {    ranges=new ModifiableHyperBoundingBox(dim,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);  }  updateSelectionRectKoordinates(x1,x2,y1,y2,ranges);  selection.clear();  candidates:   for (DBIDIter iditer=rel.iterDBIDs(); iditer.valid(); iditer.advance()) {    NumberVector dbTupel=rel.get(iditer);    for (int i=0; i < dim; i++) {      final double min=ranges.getMin(i), max=ranges.getMax(i);      if (max < Double.POSITIVE_INFINITY || min > Double.NEGATIVE_INFINITY) {        final double v=dbTupel.doubleValue(i);        if (v < min || v > max) {          continue candidates;        }      }    }    selection.add(iditer);  }  context.setSelection(new RangeSelection(selection,ranges));}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  public boolean isServerMonitored(String host,int port){  lock.readLock().lock();  try {    String serverName=getServerName(host,port);    return serverTrackerMap.containsKey(serverName);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public List<ActionRequest> requests(){  return this.requests;}  }
class C{  public boolean isAboveThresholdNotFlapping(){  return aboveThresholdNotFlapping;}  }
class C{  public ByteArrayTransferable(int offset,byte[] bytes){  this.offset=offset;  if (bytes != null) {    this.bytes=(byte[])bytes.clone();  } else {    this.bytes=new byte[0];  }}  }
class C{  public static URI changeScheme(URI bindAddr,String scheme) throws URISyntaxException {  return new URI(scheme,bindAddr.getUserInfo(),bindAddr.getHost(),bindAddr.getPort(),bindAddr.getPath(),bindAddr.getQuery(),bindAddr.getFragment());}  }
class C{  public static void logon(UniAddress dc,NtlmPasswordAuthentication auth) throws SmbException {  logon(dc,0,auth);}  }
class C{  public void loadOrthoWindow(int w,int h){  loadOrtho(0,w,h,0,-1,1);}  }
class C{  public AsyncResult PublishAsync(RequestHeader RequestHeader,SubscriptionAcknowledgement... SubscriptionAcknowledgements){  PublishRequest req=new PublishRequest(RequestHeader,SubscriptionAcknowledgements);  return channel.serviceRequestAsync(req);}  }
class C{  IncrementalCacheUpdateEvent(@NotNull Document document){  myStartOffset=0;  myMandatoryEndOffset=document.getTextLength();  myLengthDiff=0;  myStartLogicalPosition=new LogicalPosition(0,0,0,0,0,0,0);  myOldEndLogicalLine=myNewEndLogicalLine=Math.max(0,document.getLineCount() - 1);}  }
class C{  public void onStart(Interaction iact){}  }
class C{  public static ConditionNode parse(final String conditionString) throws RecognitionException, MaybeNullException {  if (conditionString.trim().isEmpty()) {    throw new MaybeNullException();  }  final CharStream charStream=new ANTLRStringStream(conditionString);  final ConditionLexer lexer=new ConditionLexer(charStream);  final CommonTokenStream tokens=new CommonTokenStream();  tokens.setTokenSource(lexer);  final ConditionParser parser=new ConditionParser(tokens);  parser.setTreeAdaptor(adaptor);  try {    final ConditionParser.prog_return parserResult=parser.prog();    final CommonTree ast=(CommonTree)parserResult.getTree();    if (parser.input.index() < parser.input.size()) {      throw new RecognitionException();    }    return convert(ast);  } catch (  final IllegalArgumentException e) {    throw new RecognitionException();  }}  }
class C{  protected ClassDefinition parseNamedClass(int mod,int ctx,String doc) throws SyntaxError, IOException {switch (token) {case INTERFACE:    scan();  mod|=M_INTERFACE;break;case CLASS:scan();break;default :env.error(pos,"class.expected");break;}int oldFPstate=FPstate;if ((mod & M_STRICTFP) != 0) {FPstate=M_STRICTFP;} else {mod|=FPstate & M_STRICTFP;}IdentifierToken nm=scanner.getIdToken();long p=pos;expect(IDENT);Vector ext=new Vector();Vector impl=new Vector();parseInheritance(ext,impl);ClassDefinition tmp=parseClassBody(nm,mod,ctx,doc,ext,impl,p);FPstate=oldFPstate;return tmp;}  }
class C{  public ASTContainer parseQuery2(final String queryStr,final String baseURI) throws MalformedQueryException {  final long startTime=System.nanoTime();  if (log.isInfoEnabled())   log.info(queryStr);  try {    final ASTQueryContainer qc=SyntaxTreeBuilder.parseQuery(queryStr);    StringEscapesProcessor.process(qc);    BaseDeclProcessor.process(qc,baseURI);    final Map<String,String> prefixes=PrefixDeclProcessor.process(qc);    BlankNodeVarProcessor.process(qc);    final ASTDeferredIVResolutionInitializer resolver=new ASTDeferredIVResolutionInitializer();    resolver.process(qc);    final QueryRoot queryRoot=buildQueryModel(qc,resolver.getValues());    final ASTContainer ast=new ASTContainer(queryRoot);    ast.setQueryString(queryStr);    ast.setParseTree(qc);    doQueryIdHint(ast,queryRoot);    queryRoot.setPrefixDecls(prefixes);    VerifyAggregates.verifyAggregate(queryRoot);    ast.setQueryParseTime(System.nanoTime() - startTime);    return ast;  } catch (  final IllegalArgumentException e) {    throw new MalformedQueryException(e.getMessage(),e);  }catch (  final VisitorException e) {    throw new MalformedQueryException(e.getMessage(),e);  }catch (  final ParseException e) {    throw new MalformedQueryException(e.getMessage(),e);  }catch (  final TokenMgrError e) {    throw new MalformedQueryException(e.getMessage(),e);  }}  }
class C{  @Override public boolean onItemClick(int position){  if (position != mActivatedPosition)   setActivatedPosition(position);  return true;}  }
class C{  public static List<Modifier> newModifiers(AST ast,List<? extends IExtendedModifier> modifierNodes){  List<Modifier> res=new ArrayList<Modifier>(modifierNodes.size());  for (int i=0; i < modifierNodes.size(); i++) {    Object curr=modifierNodes.get(i);    if (curr instanceof Modifier) {      res.add(ast.newModifier(((Modifier)curr).getKeyword()));    }  }  return res;}  }
class C{  public TypefaceCollection create(){  if (mDefaultTypeface == null) {    throw new IllegalStateException("At least one typeface style have to be set!");  }  if (mCollection.mTypefaces.get(Typeface.NORMAL) == null) {    mCollection.mTypefaces.put(Typeface.NORMAL,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.BOLD) == null) {    mCollection.mTypefaces.put(Typeface.BOLD,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.ITALIC) == null) {    mCollection.mTypefaces.put(Typeface.ITALIC,mDefaultTypeface);  }  if (mCollection.mTypefaces.get(Typeface.BOLD_ITALIC) == null) {    mCollection.mTypefaces.put(Typeface.BOLD_ITALIC,mDefaultTypeface);  }  TypefaceCollection collection=mCollection;  mCollection=null;  return collection;}  }
class C{  public Vector3f subtractLocal(float subtractX,float subtractY,float subtractZ){  x-=subtractX;  y-=subtractY;  z-=subtractZ;  return this;}  }
class C{  void displayPermissionDialog(boolean editPolicyEntry,boolean edit){  PolicyParser.PermissionEntry editMe=null;  TaggedList permList=(TaggedList)getComponent(PE_PERM_LIST);  int permIndex=permList.getSelectedIndex();  if (edit) {    editMe=(PolicyParser.PermissionEntry)permList.getObject(permIndex);  }  ToolDialog newTD=new ToolDialog(PolicyTool.getMessage("Permissions"),tool,tw,true);  newTD.addWindowListener(new ChildWindowListener(newTD));  Point location=getLocationOnScreen();  newTD.setLayout(new GridBagLayout());  newTD.setResizable(true);  JLabel label=(edit ? new JLabel(PolicyTool.getMessage(".Edit.Permission.")) : new JLabel(PolicyTool.getMessage(".Add.New.Permission.")));  tw.addNewComponent(newTD,label,PD_DESC_LABEL,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.TOP_BOTTOM_PADDING);  JComboBox choice=new JComboBox();  choice.addItem(PERM);  choice.getAccessibleContext().setAccessibleName(PERM);  for (int i=0; i < PERM_ARRAY.size(); i++) {    Perm next=PERM_ARRAY.get(i);    choice.addItem(next.CLASS);  }  tw.addNewComponent(newTD,choice,PD_PERM_CHOICE,0,1,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  JTextField tf;  tf=(edit ? new JTextField(editMe.permission,30) : new JTextField(30));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PERM);  if (edit) {    Perm inputPerm=getPerm(editMe.permission,true);    if (inputPerm != null) {      choice.setSelectedItem(inputPerm.CLASS);    }  }  tw.addNewComponent(newTD,tf,PD_PERM_TEXTFIELD,1,1,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  choice.addItemListener(new PermissionMenuListener(newTD));  choice=new JComboBox();  choice.addItem(PERM_NAME);  choice.getAccessibleContext().setAccessibleName(PERM_NAME);  tf=(edit ? new JTextField(editMe.name,40) : new JTextField(40));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PERM_NAME);  if (edit) {    setPermissionNames(getPerm(editMe.permission,true),choice,tf);  }  tw.addNewComponent(newTD,choice,PD_NAME_CHOICE,0,2,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  tw.addNewComponent(newTD,tf,PD_NAME_TEXTFIELD,1,2,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  choice.addItemListener(new PermissionNameMenuListener(newTD));  choice=new JComboBox();  choice.addItem(PERM_ACTIONS);  choice.getAccessibleContext().setAccessibleName(PERM_ACTIONS);  tf=(edit ? new JTextField(editMe.action,40) : new JTextField(40));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PERM_ACTIONS);  if (edit) {    setPermissionActions(getPerm(editMe.permission,true),choice,tf);  }  tw.addNewComponent(newTD,choice,PD_ACTIONS_CHOICE,0,3,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  tw.addNewComponent(newTD,tf,PD_ACTIONS_TEXTFIELD,1,3,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  choice.addItemListener(new PermissionActionsMenuListener(newTD));  label=new JLabel(PolicyTool.getMessage("Signed.By."));  tw.addNewComponent(newTD,label,PD_SIGNEDBY_LABEL,0,4,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  tf=(edit ? new JTextField(editMe.signedBy,40) : new JTextField(40));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Signed.By."));  tw.addNewComponent(newTD,tf,PD_SIGNEDBY_TEXTFIELD,1,4,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_BOTTOM_PADDING);  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  okButton.addActionListener(new NewPolicyPermOKButtonListener(tool,tw,this,newTD,edit));  tw.addNewComponent(newTD,okButton,PD_OK_BUTTON,0,5,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.TOP_BOTTOM_PADDING);  JButton cancelButton=new JButton(PolicyTool.getMessage("Cancel"));  ActionListener cancelListener=new CancelButtonListener(newTD);  cancelButton.addActionListener(cancelListener);  tw.addNewComponent(newTD,cancelButton,PD_CANCEL_BUTTON,1,5,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.TOP_BOTTOM_PADDING);  newTD.getRootPane().setDefaultButton(okButton);  newTD.getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  newTD.pack();  newTD.setLocationRelativeTo(tw);  newTD.setVisible(true);}  }
class C{  public GroupTypingVM(int gid){  this.gid=gid;  this.active=new ValueModel<int[]>("groups." + gid + ".typing",new int[0]);}  }
class C{  public DelphiWorkgroup(){}  }
class C{  private void printSolution(Solution solution){  if (includeVariables) {    for (int i=0; i < solution.getNumberOfVariables(); i++) {      if (i > 0) {        writer.print(' ');      }      writer.print(encode(solution.getVariable(i)));    }  }  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    if ((i > 0) || (includeVariables && (solution.getNumberOfVariables() > 0))) {      writer.print(' ');    }    writer.print(solution.getObjective(i));  }  writer.println();}  }
class C{  public boolean match(Element e,String pseudoE){  return e.getAttribute(getLocalName()).startsWith(getValue());}  }
class C{  public Complex add(Complex secondComplex){  return new Complex(a + secondComplex.a,b + secondComplex.b);}  }
class C{  public ScaleIOVolume modifyVolumeCapacity(String volumeId,String newSizeGB) throws Exception {  String uri=ScaleIOConstants.getModifyVolumeSizeURI(volumeId);  ScaleIOModifyVolumeSize modifyParm=new ScaleIOModifyVolumeSize();  modifyParm.setSizeInGB(newSizeGB);  post(URI.create(uri),getJsonForEntity(modifyParm));  return queryVolume(volumeId);}  }
class C{  void addLifetimeKeepaliveCount(){  _keepaliveMeter.start();  _lifetimeKeepaliveCount.incrementAndGet();}  }
class C{  @Override public boolean isLockableMapping(){  return true;}  }
class C{  public static boolean sendUdpPacket(EvoSuiteLocalAddress sutAddress,EvoSuiteRemoteAddress remoteAddress,byte[] data){  if (sutAddress == null) {    return false;  }  if (data == null) {    data=new byte[0];  }  InetAddress address=null;  try {    address=MockInetAddress.getByName(remoteAddress.getHost());  } catch (  UnknownHostException e) {    return false;  }  VirtualNetwork.getInstance().sendPacketToSUT(data,address,remoteAddress.getPort(),sutAddress.getHost(),sutAddress.getPort());  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private GridUnsafe(){}  }
class C{  public static List nCopies(int n,Object o){  return new CopiesList(n,o);}  }
class C{  public void resumeDownload() throws IOException, FileNotDownloadedException, NetworkException {  if (mFileDownloadStream == null) {    mFileDownloadStream=openStreamForFile(mFile);  }  resumeTransfer();  Uri serverAddress=getHttpServerAddr();  if (sLogger.isActivated()) {    sLogger.debug("Resume Download file " + serverAddress + " from byte "+ mFile.length());  }  long downloadedLength=mFile.length();  long completeSize=mContent.getSize();  Map<String,String> properties=new HashMap<>();  properties.put("Range","bytes=" + downloadedLength + "-"+ completeSize);  if (isHttpTraceEnabled()) {    System.out.println(">>> Send HTTP request:\n GET " + serverAddress);  }  try {    writeHttpContentToFile(new URL(serverAddress.toString()),properties);  } catch (  SSLHandshakeException e) {    throw e;  }catch (  IOException e) {    if (!isPaused() && !isCancelled()) {      pauseTransferBySystem();    }    throw e;  }catch (  FileNotDownloadedException e) {    if (mRetryCount < RETRY_MAX && !isCancelled() && !isPaused()) {      mRetryCount++;      downloadFile();    } else {      throw e;    }  }}  }
class C{  public static Boolean convertStringToBoolean(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    s=s.trim();    if (s.length() == 0)     return null;    if (s.length() == 1)     return convertNumericStringToBoolean(s);    return Boolean.valueOf(s);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",s);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }}  }
class C{  @Override public void incrementDiscarded(){  ++this.discarded;}  }
class C{  public DummyEnum(){  super(Options.set,"Dummy Enum","This is a sample enumeration to test the options system",new String[]{"foo","bar"},"foo");}  }
class C{  public WindowBuilder saveDialogCloseListener(final SaveDialogCloseListener saveDialogCloseListener){  this.saveDialogCloseListener=saveDialogCloseListener;  return this;}  }
class C{  @Override public int compareTo(Question other){  other.updateNewQuestion();  this.updateNewQuestion();  if (this.newQuestion != other.newQuestion) {    return this.newQuestion ? 1 : -1;  }  if (this.echo == other.echo) {    if (other.timestamp == this.timestamp) {      return 0;    }    return other.timestamp > this.timestamp ? -1 : 1;  }  return this.echo - other.echo;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static boolean startsWithIgnoreCase(String src,String subS){  return startsWithIgnoreCase(src,subS,0);}  }
class C{  public jMatrix arrayTimes(jMatrix B){  checkMatrixDimensions(B);  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public QQPlotAction(DataEditor editor){  super("Q-Q Plots...");  this.dataEditor=editor;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.772 -0400",hash_original_method="4BD1C735F7EB97F1200118825DBDCCC5",hash_generated_method="669CC50EA5B2EF86DA42CB28ADA7155A") @Override public void write(char[] chr,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(chr,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public SIPDialog createDialog(SIPTransaction transaction){  SIPDialog retval=null;  if (transaction instanceof SIPClientTransaction) {    String dialogId=((SIPRequest)transaction.getRequest()).getDialogId(false);    if (this.earlyDialogTable.get(dialogId) != null) {      SIPDialog dialog=this.earlyDialogTable.get(dialogId);      if (dialog.getState() == null || dialog.getState() == DialogState.EARLY) {        retval=dialog;      } else {        retval=new SIPDialog(transaction);        this.earlyDialogTable.put(dialogId,retval);      }    } else {      retval=new SIPDialog(transaction);      this.earlyDialogTable.put(dialogId,retval);    }  } else {    retval=new SIPDialog(transaction);  }  return retval;}  }
class C{  public static ExampleSet createExampleSet(Object[][] data,Object[] labels){  if (data.length == 0) {    throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): data matrix is not allowed to be empty.");  }  int numberOfAttributes=data[0].length;  int totalNumber=numberOfAttributes + (labels != null ? 1 : 0);  boolean[] nominal=new boolean[totalNumber];  List<Attribute> attributeList=new ArrayList<Attribute>(totalNumber);  for (int a=0; a < numberOfAttributes; a++) {    Object current=getFirstNonNull(data,a);    if (current instanceof Number) {      attributeList.add(AttributeFactory.createAttribute("att" + (a + 1),Ontology.NUMERICAL));      nominal[a]=false;    } else     if (current instanceof String) {      attributeList.add(AttributeFactory.createAttribute("att" + (a + 1),Ontology.NOMINAL));      nominal[a]=true;    } else     if (current instanceof Date) {      attributeList.add(AttributeFactory.createAttribute("att" + (a + 1),Ontology.DATE_TIME));      nominal[a]=false;    } else {      throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): only objects of type String or Number (Double, Integer) are allowed for the object data matrix.");    }  }  Attribute labelAttribute=null;  if (labels != null) {    Object current=labels[0];    if (current instanceof Number) {      labelAttribute=AttributeFactory.createAttribute("label",Ontology.NUMERICAL);      nominal[nominal.length - 1]=false;    } else     if (current instanceof String) {      labelAttribute=AttributeFactory.createAttribute("label",Ontology.NOMINAL);      nominal[nominal.length - 1]=true;    } else     if (current instanceof Date) {      labelAttribute=AttributeFactory.createAttribute("label",Ontology.DATE_TIME);      nominal[nominal.length - 1]=false;    } else {      throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): only objects of type String or Number (Double, Integer) are allowed for the object data matrix.");    }    attributeList.add(labelAttribute);  }  MemoryExampleTable table=new MemoryExampleTable(attributeList);  for (int e=0; e < data.length; e++) {    double[] dataRow=new double[totalNumber];    for (int a=0; a < numberOfAttributes; a++) {      Object current=data[e][a];      if (current == null) {        dataRow[a]=Double.NaN;      } else       if (current instanceof Number) {        if (nominal[a]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[a]=((Number)current).doubleValue();      } else       if (current instanceof String) {        if (!nominal[a]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[a]=attributeList.get(a).getMapping().mapString((String)current);      } else       if (current instanceof Date) {        if (nominal[a]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[a]=((Date)current).getTime();      } else {        throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): only objects of type String or Number (Double, Integer) are allowed for the object data matrix.");      }    }    if (labelAttribute != null) {      Object current=labels[e];      if (current == null) {        dataRow[dataRow.length - 1]=Double.NaN;      } else       if (current instanceof Number) {        if (nominal[nominal.length - 1]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[dataRow.length - 1]=((Number)current).doubleValue();      } else       if (current instanceof String) {        if (!nominal[nominal.length - 1]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[dataRow.length - 1]=attributeList.get(attributeList.size() - 1).getMapping().mapString((String)current);      } else       if (current instanceof Date) {        if (nominal[nominal.length - 1]) {          throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): type of objects did change in column. Only the same type of objects is allowed for complete columns.");        }        dataRow[dataRow.length - 1]=((Date)current).getTime();      } else {        throw new RuntimeException("ExampleSetFactory.createExampleSet(Object[][], Object[]): only objects of type String or Number (Double, Integer) are allowed for the object data matrix.");      }    }    table.addDataRow(new DoubleArrayDataRow(dataRow));  }  return table.createExampleSet(labelAttribute);}  }
class C{  public static ChanceNode createChanceNode(Node node){  if (!node.hasAttributes() || node.getAttributes().getNamedItem("id") == null || node.getAttributes().getNamedItem("id").getNodeValue().trim().isEmpty()) {    throw new RuntimeException("variable id is mandatory");  }  String label=node.getAttributes().getNamedItem("id").getNodeValue();  CategoricalTable.Builder builder=new CategoricalTable.Builder(label);  ContinuousDistribution distrib=null;  for (int i=0; i < node.getChildNodes().getLength(); i++) {    Node subnode=node.getChildNodes().item(i);    if (subnode.getNodeName().equals("value")) {      Node child=subnode.getFirstChild();      if (child != null) {        float prob=getProbability(subnode);        Value v=ValueFactory.create(child.getNodeValue().trim());        builder.addRow(v,prob);      } else {        throw new RuntimeException("Value in variable " + label + " cannot be empty");      }    } else     if (subnode.getNodeName().equals("distrib")) {      if (subnode.getAttributes().getNamedItem("type") != null) {        String distribType=subnode.getAttributes().getNamedItem("type").getNodeValue().trim();        if (distribType.equalsIgnoreCase("gaussian")) {          distrib=new ContinuousDistribution(label,getGaussian(subnode));        } else         if (distribType.equalsIgnoreCase("uniform")) {          distrib=new ContinuousDistribution(label,getUniform(subnode));        } else         if (distribType.equalsIgnoreCase("dirichlet")) {          distrib=new ContinuousDistribution(label,getDirichlet(subnode));        } else {          throw new RuntimeException("distribution is not recognised: " + distribType);        }      }    }  }  if (distrib != null) {    return new ChanceNode(label,distrib);  } else {    double total=builder.getTotalProb();    if (total > 1.01) {      throw new RuntimeException("Total probability is > 1: " + total);    }    return new ChanceNode(label,builder.build());  }}  }
class C{  public static void reindex(Connection conn) throws SQLException {  init(conn);  removeAllTriggers(conn,TRIGGER_PREFIX);  removeIndexFiles(conn);  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery("SELECT * FROM " + SCHEMA + ".INDEXES");  while (rs.next()) {    String schema=rs.getString("SCHEMA");    String table=rs.getString("TABLE");    createTrigger(conn,schema,table);    indexExistingRows(conn,schema,table);  }}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  @Override public boolean isDocumented(){  return documented;}  }
class C{  public static void fill(double[] a,double val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public SliderBlock(ToplevelPane pane,boolean isIntegral){  super("SliderBlock",pane,pane.getEnvInstance().buildType(isIntegral ? "Num a => a" : "Fractional a => a"));  this.isIntegral=isIntegral;  this.baseValue=0;  this.slider.setValue(0);  this.updateValue();  slider.getStyleClass().add("inactive");  slider.setOnMousePressed(null);  slider.setOnMouseReleased(null);  slider.setOnTouchPressed(null);  slider.setOnTouchReleased(null);  slider.valueProperty().addListener(null);  slider.valueChangingProperty().addListener(null);  slider.addEventHandler(TouchEvent.TOUCH_MOVED,null);}  }
class C{  @Override public GrVariable runRefactoring(@NotNull final GrIntroduceContext context,@NotNull final GroovyIntroduceVariableSettings settings){  GrVariable insertedVar=processExpression(context,settings);  moveOffsetToPositionMarker(context.getEditor());  return insertedVar;}  }
class C{  public static void closeEL(Transport t){  try {    if (t != null && t.isConnected())     t.close();  } catch (  Throwable e) {  }}  }
class C{  public Iterator<InstructionHandle> instructionReverseIterator(){  return new InstructionReverseIterator(lastInstruction,firstInstruction);}  }
class C{  public static int convertToPixels(Context context,int dp){  float density=getScreenDensity(context);  return (int)(dp * density + 0.5f);}  }
class C{  @Override public void close(){synchronized (mLock) {    if (mDeviceRequest != null) {      mDeviceRequest.close();      mDeviceRequest=null;    }    mDeviceState.requestClose();  }}  }
class C{  public SIPClientTransaction findSubscribeTransaction(SIPRequest notifyMessage,ListeningPointImpl listeningPoint){  SIPClientTransaction retval=null;  try {    Iterator it=clientTransactionTable.values().iterator();    if (isLoggingEnabled())     stackLogger.logDebug("ct table size = " + clientTransactionTable.size());    String thisToTag=notifyMessage.getTo().getTag();    if (thisToTag == null) {      return retval;    }    Event eventHdr=(Event)notifyMessage.getHeader(EventHeader.NAME);    if (eventHdr == null) {      if (isLoggingEnabled()) {        stackLogger.logDebug("event Header is null -- returning null");      }      return retval;    }    while (it.hasNext()) {      SIPClientTransaction ct=(SIPClientTransaction)it.next();      if (!ct.getMethod().equals(Request.SUBSCRIBE))       continue;      String fromTag=ct.from.getTag();      Event hisEvent=ct.event;      if (hisEvent == null)       continue;      if (isLoggingEnabled()) {        stackLogger.logDebug("ct.fromTag = " + fromTag);        stackLogger.logDebug("thisToTag = " + thisToTag);        stackLogger.logDebug("hisEvent = " + hisEvent);        stackLogger.logDebug("eventHdr " + eventHdr);      }      if (fromTag.equalsIgnoreCase(thisToTag) && hisEvent != null && eventHdr.match(hisEvent) && notifyMessage.getCallId().getCallId().equalsIgnoreCase(ct.callId.getCallId())) {        if (ct.acquireSem())         retval=ct;        return retval;      }    }    return retval;  }  finally {    if (isLoggingEnabled())     stackLogger.logDebug("findSubscribeTransaction : returning " + retval);  }}  }
class C{  public PlanarGraph(){}  }
class C{  private void handleError(PresenceError error){  if (sLogger.isActivated()) {    sLogger.info("Publish has failed: " + error.getErrorCode() + ", reason="+ error.getMessage());  }  mPublished=false;  stopTimer();  if (sLogger.isActivated()) {    sLogger.info("Publish has failed");  }}  }
class C{  public String toString(){  return namedPattern;}  }
class C{  public int writeDelta(int x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(DELTA[x],DELTA[x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int l=writeGamma(msb);  return l + (msb != 0 ? writeInt(x,msb) : 0);}  }
class C{  private static int unpackIntegerByWidth(int len,byte[] buf,int offset){  if (len == 1) {    return buf[offset];  } else   if (len == 2) {    return (buf[offset] << 24 | (buf[offset + 1] & 0xFF) << 16) >> 16;  } else   if (len == 3) {    return (buf[offset] << 24 | (buf[offset + 1] & 0xFF) << 16 | (buf[offset + 2] & 0xFF) << 8) >> 8;  } else   if (len == 4) {    return buf[offset] << 24 | (buf[offset + 1] & 0xFF) << 16 | (buf[offset + 2] & 0xFF) << 8 | (buf[offset + 3] & 0xFF);  }  throw new IllegalArgumentException("Unexpected length " + len);}  }
class C{  public boolean moveStream(final String streamName){  try {    doMoveStream(streamName);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public T textSize(float size){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setTextSize(size);  }  return self();}  }
class C{  public static final void showErrorDialog(Context context,int resourceId){  showErrorDialog(context,context.getString(resourceId));}  }
class C{  public void dispose(){  m_criteriumCache.removeListener(m_criteriumCacheListener);}  }
class C{  @Override public MemBufferHolder<?> put(KeyT k,MemBufferHolder<?> v){  return put(k,v,null,null);}  }
class C{  protected TableColumnModel createDefaultColumnModel(){  return new DefaultTableColumnModel();}  }
class C{  private void init(Matrix matrix){  for (int i=1; i < 8; i++) {    for (int j=1; j < 8; j++) {      matrix.createEntry(Integer.toString(i),Integer.toString(j),0.);    }  }}  }
class C{  public Metadata extractTiff(Metadata metadata){  return extractIFD(metadata,0);}  }
class C{  public void commit(boolean ddl){  checkCommitRollback();  currentTransactionName=null;  transactionStart=0;  if (transaction != null) {    if (locks.size() > 0) {      for (int i=0, size=locks.size(); i < size; i++) {        Table t=locks.get(i);        if (t instanceof MVTable) {          ((MVTable)t).commit();        }      }    }    transaction.commit();    transaction=null;  }  if (containsUncommitted()) {    database.commit(this);  }  removeTemporaryLobs(true);  if (undoLog.size() > 0) {    if (database.isMultiVersion()) {      ArrayList<Row> rows=New.arrayList();synchronized (database) {        while (undoLog.size() > 0) {          UndoLogRecord entry=undoLog.getLast();          entry.commit();          rows.add(entry.getRow());          undoLog.removeLast(false);        }        for (int i=0, size=rows.size(); i < size; i++) {          Row r=rows.get(i);          r.commit();        }      }    }    undoLog.clear();  }  if (!ddl) {    cleanTempTables(false);    if (autoCommitAtTransactionEnd) {      autoCommit=true;      autoCommitAtTransactionEnd=false;    }  }  endTransaction();}  }
class C{  public void writeAll(){  if (log.isDebugEnabled()) {    log.debug("write invoked");  }  setToWrite(false);  setState(STORED);  setBusy(true);  setBusy(false);}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext) throws IOException, ClassNotFoundException {  return Beans.instantiate(cls,beanName,beanContext,null);}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  protected boolean isStoreValue(){  return this.storeValue;}  }
class C{  public GzipAsynchInputStream(File file,int pipeSize,int gzipSize) throws IOException {  super(makeInputStream(file,gzipSize),pipeSize,gzipSize);}  }
class C{  public NTRUEncryptionPrivateKeyParameters(byte[] b,NTRUEncryptionParameters params) throws IOException {  this(new ByteArrayInputStream(b),params);}  }
class C{  public ObjectCache(){  this(13);}  }
class C{  public static void attacked(final Player player){  process(player,TutorialEventType.FIRST_ATTACKED);}  }
class C{  public List<ReportStructure> lastCompletedDownloads(){  List<ReportStructure> reportList=new ArrayList<ReportStructure>();  List<Task> lastCompleted=tasksDataSource.getUnnotifiedCompleted();  reportList=readyTaskList(lastCompleted);  return reportList;}  }
class C{  protected void sequence_IndexedAccessExpressionTail_LeftHandSideExpression_IndexedAccessExpression_1_2_1_0_ParameterizedCallExpression_1_2_0_0_ParameterizedPropertyAccessExpression_1_2_2_0_TaggedTemplateString_1_2_3_0_0(ISerializationContext context,IndexedAccessExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_2_1_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_1_0(),semanticObject.getIndex());  feeder.finish();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:29.130 -0500",hash_original_method="DC118FA5C7EE28B6AE7273376F31713A",hash_generated_method="EEB9E79FEAEC952302B9A8639AC3433B") public CharSequence loadLabel(PackageManager pm){  return mService.loadLabel(pm);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  static public final float random(){  return random.nextFloat();}  }
class C{  public static Long speedStrToGigabits(String speedStr){  Long gbits=0L;  try {    if ("Unknown".equals(speedStr) || EMPTY_STR.equals(speedStr)) {      return gbits;    }    String[] parts=speedStr.split(" ");    gbits=new BigDecimal(parts[0]).longValue();    if (parts.length > 1) {      if ("Mbps".equals(parts[1])) {        gbits=gbits / KB;      }    }  } catch (  Exception e) {    String failureMsg=String.format("Error converting speed value (%s) to Giagabits",speedStr);    LOG.warn(failureMsg,e);  }  return gbits;}  }
class C{  private static void updateFilterSDASet(double mib,List<SteepDownArea> sdaset,double ixi){  Iterator<SteepDownArea> iter=sdaset.iterator();  while (iter.hasNext()) {    SteepDownArea sda=iter.next();    if (sda.getMaximum() * ixi <= mib) {      iter.remove();    } else {      if (mib > sda.getMib()) {        sda.setMib(mib);      }    }  }}  }
class C{  private JPanel buildRow(final String string,final JCheckBox checkBox){  final JPanel panel=new JPanel(new BorderLayout());  panel.add(new JLabel(string),BorderLayout.WEST);  panel.add(checkBox,BorderLayout.EAST);  checkBox.addItemListener(m_checkBoxListener);  return panel;}  }
class C{  public void removeImage(GliderImage image){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.imageTable.remove(image);  Layer layer=(Layer)image.getValue(AVKey.LAYER);  if (layer != null) {    image.removeKey(AVKey.LAYER);    layer.removePropertyChangeListener(this.layerListener);    this.getModel().getLayers().remove(layer);    layer.dispose();  }  this.firePropertyChange(GliderImage.GLIDER_IMAGE_SOURCE,null,image);  this.repaint();}  }
class C{  @Override public String generateURL(XYZDataset dataset,int series,int item){  return super.generateURL(dataset,series,item);}  }
class C{  public void put(long key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealLongArraySize(mSize + 1);      long[] nkeys=new long[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static StreamTimestamp now(){  return now("");}  }
class C{  public UserTokenPolicy findUserTokenPolicy(String policyId){  if (UserIdentityTokens == null)   return null;  for (  UserTokenPolicy policy : UserIdentityTokens)   if (policy != null) {    final String p=policy.getPolicyId();    if (p != null && p.equals(policyId))     return policy;  }  return null;}  }
class C{  private void writeFile(String file,String licenseText){  BufferedWriter writer=null;  File licenseFile=new File(file);  try {    writer=new BufferedWriter(new FileWriter(licenseFile.getAbsoluteFile()));    writer.write(licenseText);    writer.close();  } catch (  IOException e) {    _log.error("IO Exception while writing to .license file: {}",e);    APIException.internalServerErrors.ioWriteError("/tmp/.license");  } finally {    try {      writer.close();    } catch (    Exception e) {    }  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public synchronized void updateScatterPlot(ScatterPlotOld scatterPlot){  if (scatterPlot == null) {    throw new NullPointerException("The given scatter plot must not be null");  }  String displayString=null;  this.scatterPlot=scatterPlot;  this.repaint();}  }
class C{  public boolean isRadial(){  return radial;}  }
class C{  public EventBinder<E> before(String name){  before.add(name);  return this;}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public String toValue(){  return value;}  }
class C{  public static <T extends Comparable<? super T>>void timSort(T[] a,int fromIndex,int toIndex){  if (toIndex - fromIndex <= 1)   return;  timSort(a,fromIndex,toIndex,Comparator.naturalOrder());}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  out.writeObject(classInfos);  out.writeObject(doubles);  out.writeObject(instanceInfos);  out.writeObject(ints);  out.writeObject(raw_metadata);  out.writeObject(methods);  out.writeObject(namespaces);  out.writeObject(namespaceSets);  out.writeObject(nameData);  out.writeObject(scriptInfos);  out.writeObject(scriptName);  out.writeObject(strings);  out.writeObject(uints);}  }
class C{  boolean workaroundOpenamBug(XMLSignature signature,DOMValidateContext validationContext,boolean validationResult) throws XMLSignatureException {  if (!validationResult) {    if (signature.getSignatureValue().validate(validationContext)) {      return true;    }  }  return validationResult;}  }
class C{  protected void returnToStartupActivity(){  finish();}  }
class C{  @ReactMethod public void stopRecordingFps(double animationStopTimeMs){  if (mFrameCallback == null) {    return;  }  checkAPILevel();  mFrameCallback.stop();  FpsDebugFrameCallback.FpsInfo fpsInfo=mFrameCallback.getFpsInfo((long)animationStopTimeMs);  if (fpsInfo == null) {    Toast.makeText(getReactApplicationContext(),"Unable to get FPS info",Toast.LENGTH_LONG);  } else {    String fpsString=String.format(Locale.US,"FPS: %.2f, %d frames (%d expected)",fpsInfo.fps,fpsInfo.totalFrames,fpsInfo.totalExpectedFrames);    String jsFpsString=String.format(Locale.US,"JS FPS: %.2f, %d frames (%d expected)",fpsInfo.jsFps,fpsInfo.totalJsFrames,fpsInfo.totalExpectedFrames);    String debugString=fpsString + "\n" + jsFpsString+ "\n"+ "Total Time MS: "+ String.format(Locale.US,"%d",fpsInfo.totalTimeMs);    FLog.d(ReactConstants.TAG,debugString);    Toast.makeText(getReactApplicationContext(),debugString,Toast.LENGTH_LONG).show();  }  mFrameCallback=null;}  }
class C{  public static String readURL(URL url) throws IOException {  return FileUtilSupport.getDefault().readURL(url);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isNotifyConfig(){  return parseBoolean(getFieldValue(ConfigureNodeFields.notify_config));}  }
class C{  private void refreshDictionaryIfNeeded() throws AdeException {  if (System.currentTimeMillis() - m_dictionary.getLastRefreshTime() > m_minRefreshTime) {    m_dictionary.refresh();    m_src2AnalysisGrpMap.clear();  }}  }
class C{  public int eType(int elemIndex){  if (((elemIndex * 3) + 1) >= elemInfo.length) {    return -1;  }  return elemInfo[(elemIndex * 3) + 1];}  }
class C{  protected void resetOptions(){  m_trainInstances=null;  m_randomSeed=1;  m_folds=10;  m_evalUsingTrainingData=false;  m_minBucketSize=6;}  }
class C{  public AnimatableNumberOrIdentValue(AnimationTarget target,String ident){  super(target);  this.ident=ident;  this.isIdent=true;}  }
class C{  public boolean saveModel(FDModel model,String filename,String cwd){  ResourceSet resourceSet=null;  String fn=filename;  if (fn == null)   return false;  if (!fn.endsWith("." + fileExtension)) {    fn+="." + fileExtension;  }  if (model.eResource() == null) {    resourceSet=resourceSetProvider.get();  } else {    resourceSet=model.eResource().getResourceSet();  }  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSet);  return persistenceHandler.saveModel(model,fn,cwd);}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public Path2D.Double toGeneralPath(){  Path2D.Double gp=new Path2D.Double();  gp.setWindingRule(windingRule);  if (size() == 0) {    gp.moveTo(0,0);    gp.lineTo(0,0 + 1);  } else   if (size() == 1) {    Node current=get(0);    gp.moveTo(current.x[0],current.y[0]);    gp.lineTo(current.x[0],current.y[0] + 1);  } else {    Node previous;    Node current;    previous=current=get(0);    gp.moveTo(current.x[0],current.y[0]);    for (int i=1, n=size(); i < n; i++) {      previous=current;      current=get(i);      if ((previous.mask & C2_MASK) == 0) {        if ((current.mask & C1_MASK) == 0) {          gp.lineTo(current.x[0],current.y[0]);        } else {          gp.quadTo(current.x[1],current.y[1],current.x[0],current.y[0]);        }      } else {        if ((current.mask & C1_MASK) == 0) {          gp.quadTo(previous.x[2],previous.y[2],current.x[0],current.y[0]);        } else {          gp.curveTo(previous.x[2],previous.y[2],current.x[1],current.y[1],current.x[0],current.y[0]);        }      }    }    if (isClosed) {      if (size() > 1) {        previous=get(size() - 1);        current=get(0);        if ((previous.mask & C2_MASK) == 0) {          if ((current.mask & C1_MASK) == 0) {            gp.lineTo(current.x[0],current.y[0]);          } else {            gp.quadTo(current.x[1],current.y[1],current.x[0],current.y[0]);          }        } else {          if ((current.mask & C1_MASK) == 0) {            gp.quadTo(previous.x[2],previous.y[2],current.x[0],current.y[0]);          } else {            gp.curveTo(previous.x[2],previous.y[2],current.x[1],current.y[1],current.x[0],current.y[0]);          }        }      }      gp.closePath();    }  }  return gp;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  public void serveProcessedBundle() throws IOException {  final WroConfiguration configuration=context.getConfig();  final HttpServletRequest request=context.getRequest();  final HttpServletResponse response=context.getResponse();  OutputStream os=null;  try {    final CacheKey cacheKey=getSafeCacheKey(request);    initAggregatedFolderPath(request,cacheKey.getType());    final CacheValue cacheValue=cacheStrategy.get(cacheKey);    final String ifNoneMatch=request.getHeader(HttpHeader.IF_NONE_MATCH.toString());    final String etagValue=String.format("\"%s\"",cacheValue.getHash());    if (etagValue != null && etagValue.equals(ifNoneMatch)) {      LOG.debug("ETag hash detected: {}. Sending {} status code",etagValue,HttpServletResponse.SC_NOT_MODIFIED);      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);      return;    }    response.setContentType(cacheKey.getType().getContentType() + "; charset=" + configuration.getEncoding());    response.setHeader(HttpHeader.ETAG.toString(),etagValue);    os=response.getOutputStream();    if (cacheValue.getRawContent() != null) {      if (isGzipAllowed()) {        response.setContentLength(cacheValue.getGzippedContent().length);        response.setHeader(HttpHeader.CONTENT_ENCODING.toString(),"gzip");        response.setHeader("Vary","Accept-Encoding");        IOUtils.write(cacheValue.getGzippedContent(),os);      } else {        response.setContentLength(cacheValue.getRawContent().getBytes(configuration.getEncoding()).length);        IOUtils.write(cacheValue.getRawContent(),os,configuration.getEncoding());      }    }  }  finally {    if (os != null) {      IOUtils.closeQuietly(os);    }  }}  }
class C{  public boolean equals(int i){  return value == i;}  }
class C{  public void testIndexAnalysis(){  assertQ("Index analysis: ",req("fl","id","q","content2:aab","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=3]");  assertQ("Index analysis: ",req("fl","id","q","content2:aabaa","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=4]");}  }
class C{  public static void extract(int position,byte[] h264Packet,NalUnitHeader header){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  if (header == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid header packet");  }  byte headerByte=h264Packet[position];  header.forbiddenZeroBit=((headerByte & 0x80) >> 7) != 0;  header.nalRefId=((headerByte & 0x60) >> 5);  int nalUnitType=(headerByte & 0x1f);  header.decodeNalUnitType=NalUnitType.parse(nalUnitType);}  }
class C{  public TechnicalServiceOperationException(String message,Object[] params){  super(message,params);}  }
class C{  private ArrayDBIDs updateKNNsAndRkNNs(DBIDs ids){  ArrayModifiableDBIDs rkNN_ids=DBIDUtil.newArray();  DBIDs oldids=DBIDUtil.difference(relation.getDBIDs(),ids);  for (DBIDIter id=oldids.iter(); id.valid(); id.advance()) {    KNNList oldkNNs=storage.get(id);    double knnDist=oldkNNs.getKNNDistance();    KNNHeap heap=null;    for (DBIDIter newid=ids.iter(); newid.valid(); newid.advance()) {      double dist=distanceQuery.distance(id,newid);      if (dist <= knnDist) {        if (heap == null) {          heap=DBIDUtil.newHeap(oldkNNs);        }        heap.insert(dist,newid);      }    }    if (heap != null) {      KNNList newkNNs=heap.toKNNList();      storage.put(id,newkNNs);      int i=0;      int j=0;      ModifiableDoubleDBIDList added=DBIDUtil.newDistanceDBIDList();      ModifiableDoubleDBIDList removed=DBIDUtil.newDistanceDBIDList();      while (i < oldkNNs.size() && j < newkNNs.size()) {        DoubleDBIDPair drp1=oldkNNs.get(i);        DoubleDBIDPair drp2=newkNNs.get(j);        if (!DBIDUtil.equal(drp1,drp2)) {          added.add(drp2);          j++;        } else {          i++;          j++;        }      }      if (i != j) {        for (; i < oldkNNs.size(); i++) {          removed.add(oldkNNs.get(i));        }        for (; j < newkNNs.size(); i++) {          added.add(newkNNs.get(i));        }      }      for (DoubleDBIDListIter newnn=added.iter(); newnn.valid(); newnn.advance()) {        TreeSet<DoubleDBIDPair> rknns=materialized_RkNN.get(newnn);        rknns.add(makePair(newnn,id));      }      for (DoubleDBIDListIter oldnn=removed.iter(); oldnn.valid(); oldnn.advance()) {        TreeSet<DoubleDBIDPair> rknns=materialized_RkNN.get(oldnn);        rknns.remove(makePair(oldnn,id));      }      rkNN_ids.add(id);    }  }  return rkNN_ids;}  }
class C{  ReflectiveAccessor() throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException {  init();}  }
class C{  private IonSystemBuilder(){}  }
class C{  private void showStatus(final HttpServletRequest request,final ServletResponse response) throws IOException {  log.debug("showing status");  if (allowConfSwapViaHttp) {    String newConfPath=request.getParameter("conf");    if (!StringUtils.isBlank(newConfPath)) {      confPath=newConfPath;      loadUrlRewriterLocal();    }  }  Status status=new Status(confLastLoaded,this);  status.displayStatusInContainer(request);  response.setContentType("text/html; charset=UTF-8");  response.setContentLength(status.getBuffer().length());  final PrintWriter out=response.getWriter();  out.write(status.getBuffer().toString());  out.close();}  }
class C{  public boolean teleportBack(final Player player){  String targetZoneName=null;  String returnZoneName=null;  int returnX=0;  int returnY=0;  final String infoString=getInfoString();  if (infoString != null) {    final StringTokenizer st=new StringTokenizer(infoString);    if (st.countTokens() == 7) {      targetZoneName=st.nextToken();      st.nextToken();      st.nextToken();      st.nextToken();      returnZoneName=st.nextToken();      returnX=Integer.parseInt(st.nextToken());      returnY=Integer.parseInt(st.nextToken());    } else {      throw new IllegalArgumentException("the infostring attribute is malformed");    }  }  if ((player == null) || (player.getZone() == null) || (targetZoneName == null)) {    return true;  }  if (notInTargetZone(player,targetZoneName)) {    return true;  }  final StendhalRPZone returnZone=SingletonRepository.getRPWorld().getZone(returnZoneName);  int x=initCoord(returnX,returnZone.getWidth());  int y=initCoord(returnY,returnZone.getHeight());  final boolean result=player.teleport(returnZone,x,y,null,player);  sendAfterTransportMessage(player);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:56.574 -0500",hash_original_method="8394DE101C334DCA17E1726BC4AA658C",hash_generated_method="1FDE26FDB473027380720CF1D7F05DF6") public Country detectCountry(){  try {    return mService.detectCountry();  } catch (  RemoteException e) {    Log.e(TAG,"detectCountry: RemoteException",e);    return null;  }}  }
class C{  public static TargetAttribute targetAttribute(String name,String customGet,String customSet){  return new TargetAttribute(name,customGet,customSet);}  }
class C{  public List<ExportGroupRestRep> findContainingHost(URI hostId,URI projectId,URI varrayId){  return search().byHost(hostId).filter(new ExportFilter(projectId,varrayId)).run();}  }
class C{  public void dispose(){  clearListeners();  if (attributes != null) {    attributes.clear();  }  removed(null);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,View.OnClickListener onClickListener,List<Integer> skipIds){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);}  }
class C{  protected static File findRawDir(File dir){  for (int i=0; dir != null && i < 20; i++) {    File rawDir=findResRawDir(dir);    if (rawDir != null) {      return rawDir;    }    dir=dir.getParentFile();  }  return null;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected double defaultMaxRange(){  return 10;}  }
class C{  @Override protected void forceDeleteAttributeAt(int position){  int index=locateIndex(position);  m_NumAttributes--;  if ((index >= 0) && (m_Indices[index] == position)) {    int[] tempIndices=new int[m_Indices.length - 1];    double[] tempValues=new double[m_AttValues.length - 1];    System.arraycopy(m_Indices,0,tempIndices,0,index);    System.arraycopy(m_AttValues,0,tempValues,0,index);    for (int i=index; i < m_Indices.length - 1; i++) {      tempIndices[i]=m_Indices[i + 1] - 1;      tempValues[i]=m_AttValues[i + 1];    }    m_Indices=tempIndices;    m_AttValues=tempValues;  } else {    int[] tempIndices=new int[m_Indices.length];    double[] tempValues=new double[m_AttValues.length];    System.arraycopy(m_Indices,0,tempIndices,0,index + 1);    System.arraycopy(m_AttValues,0,tempValues,0,index + 1);    for (int i=index + 1; i < m_Indices.length; i++) {      tempIndices[i]=m_Indices[i] - 1;      tempValues[i]=m_AttValues[i];    }    m_Indices=tempIndices;    m_AttValues=tempValues;  }}  }
class C{  public void copyNoClone(final RuleSet other){  if (rules.length <= other.numRules) {    rules=new Rule[other.numRules];  }  System.arraycopy(other.rules,0,rules,0,other.numRules);  numRules=other.numRules;}  }
class C{  public boolean isCompleteExceptIgnoredNodes(){synchronized (nodeStack) {    if (nodeStack.isEmpty() && retainedNodes.isEmpty()) {      return true;    } else {      for (int i=0; i < nodeStack.size(); i++) {        if (!ignoredNodes.contains(nodeStack.get(i))) {          return false;        }      }      for (int i=0; i < retainedNodes.size(); i++) {        if (!ignoredNodes.contains(retainedNodes.get(i))) {          return false;        }      }      return true;    }  }}  }
class C{  public boolean isDynamic(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  private HttpServletResponse buildMockResponseForError(int errorCode,String errorMessage) throws IOException {  HttpServletResponse response=createMock(HttpServletResponse.class);  response.sendError(errorCode,errorMessage);  replay(response);  return response;}  }
class C{  public static Object muxArray(Object src,int[] dims){  return muxArray(src,dims,getComponentType(src.getClass()));}  }
class C{  public Object internalGet(String key){  return context.get(key);}  }
class C{  private static int countBits(byte[] bitstring){  int nBits=bitstring.length * 8;  int counter=0;  for (int i=0; i < nBits; i++) {    int curBit=1 << (i % 8);    byte curByte=bitstring[(i / 8)];    if ((curBit & curByte) > 0) {      counter++;    }  }  return counter;}  }
class C{  public byte[] encodeToBitcoin(){  try {    ByteArrayOutputStream bos=derByteStream();    bos.write(sighashFlags);    return bos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void checkNullElement(){  if (this.elements == null) {    throw new NullPointerException("There is no element associated to this widget");  }}  }
class C{  public void startObjectName(O object){}  }
class C{  private static <T extends AbstractBlockBase<T>>T findAndMarkMostLikelySuccessor(T block,BitSet visitedBlocks){  T result=null;  for (  T successor : block.getSuccessors()) {    assert successor.probability() >= 0.0 : "Probabilities must be positive";    if (!visitedBlocks.get(successor.getId()) && successor.getLoopDepth() >= block.getLoopDepth() && (result == null || successor.probability() >= result.probability())) {      result=successor;    }  }  if (result != null) {    visitedBlocks.set(result.getId());  }  return result;}  }
class C{  protected int computeLeaderLocationCode(float x1,float y1,float x2,float y2,float leaderX,float leaderY){  return (leaderY > y2 ? LEADER_LOCATION_TOP : 0) | (leaderY < y1 ? LEADER_LOCATION_BOTTOM : 0) | (leaderX > x2 ? LEADER_LOCATION_RIGHT : 0)| (leaderX < x1 ? LEADER_LOCATION_LEFT : 0);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String qualifiedName="dmstc:domestic";  Document doc;  Document anotherDoc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node setNode;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);  arg=anotherDoc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("Maybe");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  String parseLine(CharCursor is,LineMap lineMap) throws IOException {  int ch=is.read();  _buf.clear();  String filename=null;  int line=0;  _token.clear();  line:   for (; ch != is.DONE; ch=is.read()) {    while (ch == ':') {      line=0;      for (ch=is.read(); ch >= '0' && ch <= '9'; ch=is.read())       line=10 * line + ch - '0';      if (ch == ':' && line > 0) {        filename=_token.toString();        break line;      } else {        _token.append(':');        if (line > 0)         _token.append(line);      }    }    if (ch != is.DONE)     _token.append((char)ch);  }  if (filename == null)   return null;  int column=0;  for (; ch != is.DONE && ch != ' '; ch=is.read()) {  }  for (; ch == ' '; ch=is.read()) {  }  _buf.clear();  for (; ch != is.DONE; ch=is.read())   _buf.append((char)ch);  String message=_buf.toString();  if (lineMap != null)   return lineMap.convertError(filename,line,0,message); else   return filename + ":" + line+ ": "+ message;}  }
class C{  @Transactional public void addPointChargeNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_POINT_CHARGE);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=point_charge] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  private void testTrackColor(int modeId,int summaryId){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.menu_map));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_map_track_color_mode));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(modeId));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(summaryId));}  }
class C{  private void addIdAndExtraLocationAttributes(String location,String ejbLocation,String xaLocation){  buffer.append("    name='").append(ds.getId()).append("' \n");  buffer.append("    location='").append(location).append("' \n");  buffer.append("    ejb-location='").append(ejbLocation).append("' \n");  buffer.append("    xa-location='").append(xaLocation).append("' \n");}  }
class C{  private void ageDeliveryPreds(){  double timeDiff=(SimClock.getTime() - this.lastAgeUpdate);  if (timeDiff == 0) {    return;  }  double mult=Math.pow(gamma,timeDiff);  for (  Map.Entry<DTNHost,Double> e : preds.entrySet()) {    e.setValue(e.getValue() * mult);  }  this.lastAgeUpdate=SimClock.getTime();}  }
class C{  public int add(GL10 gl,String text,Paint textPaint){  return add(gl,null,text,textPaint);}  }
class C{  private static List<String> subDirectoryNames(final Path dir) throws IOException {  List<String> subdirs=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir,null)){    for (    Path subDir : stream) {      String conf=subDir.getFileName().toString();      subdirs.add(conf);    }    return subdirs;  } }  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/register") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NetworkSystemRestRep registerNetworkSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkUri(id);  NetworkSystem networkSystem=_dbClient.queryObject(NetworkSystem.class,id);  ArgValidator.checkEntity(networkSystem,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(networkSystem.getRegistrationStatus())) {    List<Network> networkList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Network.class,AlternateIdConstraint.Factory.getConstraint(Network.class,"networkSystems",networkSystem.getId().toString()));    for (    Network network : networkList) {      if (network.getInactive() || DiscoveredDataObject.RegistrationStatus.REGISTERED.toString().equals(network.getRegistrationStatus())) {        continue;      }      network.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      _dbClient.persistObject(network);      auditOp(OperationTypeEnum.REGISTER_NETWORK,true,null,network.getId().toString());    }    networkSystem.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(networkSystem);    auditOp(OperationTypeEnum.REGISTER_NETWORK_SYSTEM,true,null,networkSystem.getId().toString(),networkSystem.getLabel(),networkSystem.getPortNumber(),networkSystem.getUsername(),networkSystem.getSmisProviderIP(),networkSystem.getSmisPortNumber(),networkSystem.getSmisUserName(),networkSystem.getSmisUseSSL());  }  return map(networkSystem);}  }
class C{  public int size(){  return 4;}  }
class C{  public void addStorableClass(String name,Class c){  nameToPrototypeMap.put(name,c);  classToNameMap.put(c,name);}  }
class C{  public CpcLocalRunner(Graph graph,Parameters params){  super(graph,params);  this.sourceGraph=graph;}  }
class C{  public T caseSymbolTableEntryOriginal(SymbolTableEntryOriginal object){  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();case EipPackage.COMPOSITE_PROCESSOR__OWNED_ENDPOINTS:return ownedEndpoints != null && !ownedEndpoints.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void testCertPathValidatorException15(){  CertPathValidatorException tE=new CertPathValidatorException();  assertNull("getCertPath() must return null.",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i]);    assertNull("getCertPath() must return null ",tE.getCertPath());  }  Throwable cause=null;  tE=new CertPathValidatorException(cause);  assertNull("getCertPath() must return null.",tE.getCertPath());  tE=new CertPathValidatorException(tCause);  assertNull("getCertPath() must return null.",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    tE=new CertPathValidatorException(msgs[i],tCause);    assertNull("getCertPath() must return null",tE.getCertPath());  }  tE=new CertPathValidatorException(null,null,null,-1);  assertNull("getCertPath() must return null",tE.getCertPath());  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,null,-1);      assertNull("getCertPath() must return null",tE.getCertPath());    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected exception: " + e.getMessage());    }  }  myCertPath mcp=new myCertPath("X.509","");  CertPath cp=mcp.get("X.509");  for (int i=0; i < msgs.length; i++) {    try {      tE=new CertPathValidatorException(msgs[i],tCause,cp,-1);      assertNotNull("getCertPath() must not return null",tE.getCertPath());      assertEquals("getCertPath() must return ".concat(cp.toString()),tE.getCertPath(),cp);    } catch (    IndexOutOfBoundsException e) {      fail("Unexpected IndexOutOfBoundsException was thrown. " + e.toString());    }  }}  }
class C{  private String createSizedString(final String message,final int pixels){  FontMetrics fm=getFontMetrics(getFont());  String word;  StringTokenizer st=new StringTokenizer(message);  int newWidth=pixels;  while (st.hasMoreTokens()) {    word=st.nextToken();    newWidth=Math.max(newWidth,fm.stringWidth(word));  }  StringBuilder sb=new StringBuilder();  StringBuilder cursb=new StringBuilder();  boolean isNewLine;  st=new StringTokenizer(message," \n",true);  while (st.hasMoreTokens()) {    word=st.nextToken();    if (word.equals(" "))     continue;    isNewLine=word.equals("\n");    if (isNewLine || fm.stringWidth(cursb.toString() + word) > newWidth) {      sb.append(cursb.toString());      sb.append("\n");      cursb=new StringBuilder();    }    if (!isNewLine) {      cursb.append(word);      cursb.append(" ");    }  }  sb.append(cursb.toString());  return sb.toString();}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(panel);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  centerPanel.setLayout(centerLayout);  bPrint.addActionListener(this);  bExport.addActionListener(this);  bCancel.addActionListener(this);  bProcess.setText(Msg.getMsg(Env.getCtx(),"EFT"));  bProcess.setEnabled(false);  bProcess.addActionListener(this);  lPaySelect.setText(Msg.translate(Env.getCtx(),"HR_PaySelection_ID"));  fPaySelect.addActionListener(this);  lBank.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  lPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fPaymentRule.addActionListener(this);  lDocumentNo.setText(Msg.translate(Env.getCtx(),"DocumentNo"));  fDocumentNo.setDisplayType(DisplayType.Integer);  lNoPayments.setText(Msg.getMsg(Env.getCtx(),"NoOfPayments"));  fNoPayments.setText("0");  lBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  fBalance.setReadWrite(false);  fBalance.setDisplayType(DisplayType.Amount);  lCurrency.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  southPanel.add(bCancel,null);  southPanel.add(bExport,null);  southPanel.add(bPrint,null);  southPanel.add(bProcess,null);  centerPanel.add(lPaySelect,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  centerPanel.add(fPaySelect,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(12,0,5,12),0,0));  centerPanel.add(lBank,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fBank,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lPaymentRule,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fPaymentRule,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lDocumentNo,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fDocumentNo,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lNoPayments,new GridBagConstraints(2,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fNoPayments,new GridBagConstraints(3,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lBalance,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fBalance,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lCurrency,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,12,5),0,0));  centerPanel.add(fCurrency,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,12,12),0,0));}  }
class C{  public LagartoDOMBuilder enableHtmlMode(){  config.ignoreWhitespacesBetweenTags=false;  config.setCaseSensitive(false);  config.setEnableRawTextModes(true);  config.enabledVoidTags=true;  config.selfCloseVoidTags=false;  config.impliedEndTags=true;  config.setEnableConditionalComments(false);  config.setParseXmlTags(false);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.079 -0500",hash_original_method="0B0B44B5B3A0DCF648446956F27785E9",hash_generated_method="873E6C0D71869C3EA45C72EE0380FF7D") public PointerProperties(PointerProperties other){  copyFrom(other);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  if (mWebView != null) {    mWebView.destroy();  }  mWebView=new WebView(getActivity());  mIsWebViewAvailable=true;  return mWebView;}  }
class C{  @Deprecated public ConcurrentUpdateSolrClient(String solrServerUrl,HttpClient client,int queueSize,int threadCount,ExecutorService es){  this(solrServerUrl,client,queueSize,threadCount,es,false);}  }
class C{  public void refreshIcons(){  mIcons.clear();  mCurrentDefaultIconName=DEFAULT_ICON;  DefaultIcon defaultIcon=getDefaultIcon();  ArrayList<MapIcon> icons=mSettings.getMapIcons();  icons.addAll(getStandardIcons());  for (  MapIcon icon : icons) {    mIcons.put(icon.getName(),icon);    if (icon.getName().contentEquals(defaultIcon.getName())) {      mCurrentDefaultIconName=defaultIcon.getName();      icon.setDefaultIcon(true);    } else {      icon.setDefaultIcon(false);    }  }}  }
class C{  @Override protected void commitNameChange(PropertyChangeEvent evt){  AttributeItemFigure label=getFigure();  label.setText(getAttribute().getLabelText());  setSelected(EditPart.SELECTED_PRIMARY);  label.revalidate();}  }
class C{  private void upOneFrame(){  boolean ok=upOneFrameInternal(true);  if (VM.VerifyAssertions)   VM._assert(ok,"tried to browse off stack");}  }
class C{  public CasIdmClient(String hostName,IServiceContextProvider serviceContextProvider){  this.hostName=hostName;  this._serviceContextProvider=serviceContextProvider;  _authHashLock=new ReentrantReadWriteLock();}  }
class C{  public void dispose(){  searchButton=null;  nextSearch=null;  previousSearch=null;  first=null;  fback=null;  back=null;  forward=null;  fforward=null;  last=null;  singleButton=null;  continuousButton=null;  continuousFacingButton=null;  facingButton=null;  pageFlowButton=null;  snapshotButton=null;  buyButton=null;  helpButton=null;  rssButton=null;  layoutGroup=null;  if (topButtons != null) {    topButtons.getItems().removeAll(topButtons.getItems());  }  topButtons=null;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsString(xctxt).length());}  }
class C{  public long readLong(final int numBits){  long bits=0;  for (int i=numBits - 1; i >= 0; i--) {    if (currentBitIndex < 0) {      readCurrentByte();    }    boolean bit=(currentByte >> currentBitIndex & 1) != 0;    if (bit) {      bits|=(1L << i);    }    --currentBitIndex;  }  return bits;}  }
class C{  private void init() throws Exception {  showAll.setLabel(Msg.getMsg(Env.getCtx(),"ShowAll"));  this.appendChild(mainLayout);  Hbox box=new Hbox();  box.setParent(northPanel);  box.setPack("end");  box.appendChild(showAll);  showAll.addEventListener(Events.ON_CHECK,this);  North north=new North();  north.setParent(mainLayout);  north.appendChild(northPanel);  Center center=new Center();  center.setParent(mainLayout);  center.setFlex(true);  center.appendChild(m_table);  South south=new South();  south.setParent(mainLayout);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(this);}  }
class C{  public SystemMonitor(final Composite parent,final int style,final SampleIdentifier identifier){  this(parent,style);  final SampleWrapper wrapper=SampleFactory.getInstance().getSample(identifier);  addSample(identifier.name(),wrapper);  this.captionVisible=!wrapper.getCaption().trim().equals("");}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static IStatus validatePackageName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nullName,null);  }  int length;  if ((length=name.length()) == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_emptyName,null);  }  if (name.charAt(0) == DOT || name.charAt(length - 1) == DOT) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_dotName,null);  }  if (CharOperation.isWhitespace(name.charAt(0)) || CharOperation.isWhitespace(name.charAt(name.length() - 1))) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_nameWithBlanks,null);  }  int dot=0;  while (dot != -1 && dot < length - 1) {    if ((dot=name.indexOf(DOT,dot + 1)) != -1 && dot < length - 1 && name.charAt(dot + 1) == DOT) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_consecutiveDotsName,null);    }  }  StringTokenizer st=new StringTokenizer(name,".");  boolean firstToken=true;  IStatus warningStatus=null;  while (st.hasMoreTokens()) {    String typeName=st.nextToken();    typeName=typeName.trim();    char[] scannedID=scannedIdentifier(typeName,sourceLevel,complianceLevel);    if (scannedID == null) {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,typeName),null);    }    if (firstToken && scannedID.length > 0 && ScannerHelper.isUpperCase(scannedID[0])) {      if (warningStatus == null) {        warningStatus=new Status(IStatus.WARNING,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_package_uppercaseName,null);      }    }    firstToken=false;  }  if (warningStatus != null) {    return warningStatus;  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  double sum, tmp;  int u=0;  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      int w=l * matrixSize;      if (state1 < stateCount) {        for (int i=0; i < stateCount; i++) {          tmp=matrices1[w + state1];          sum=0.0;          for (int j=0; j < stateCount; j++) {            sum+=matrices2[w] * partials2[v + j];            w++;          }          partials3[u]=tmp * sum;          u++;        }        v+=stateCount;      } else {        for (int i=0; i < stateCount; i++) {          sum=0.0;          for (int j=0; j < stateCount; j++) {            sum+=matrices2[w] * partials2[v + j];            w++;          }          partials3[u]=sum;          u++;        }        v+=stateCount;      }    }  }}  }
class C{  protected void notDecl(String name,String pubid,String sysid) throws SAXException {  mHandDtd.notationDecl(name,pubid,sysid);}  }
class C{  protected MediaName(int value){  super(value);}  }
class C{  public DBMSEvent(String id,LinkedList<ReplOption> metadata,ArrayList<DBMSData> data,boolean lastFrag,Timestamp sourceTstamp){  if (id == null)   this.id="NIL"; else   this.id=id;  if (metadata == null)   this.metadata=new LinkedList<ReplOption>(); else   this.metadata=metadata;  if (data == null)   this.data=new ArrayList<DBMSData>(); else   this.data=data;  this.lastFrag=lastFrag;  if (sourceTstamp == null)   this.sourceTstamp=new Timestamp(System.currentTimeMillis()); else   this.sourceTstamp=sourceTstamp;  options=new LinkedList<ReplOption>();}  }
class C{  public static HappySQL mysql(HappyMySQL sql) throws ClassNotFoundException, SQLException {  return new HappyMySQL(sql.dbHost,sql.userName,sql.password,sql.dbName);}  }
class C{  public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));}  }
class C{  private ConversationDataOptions(Builder builder){  dialogId=builder.dialogId;  from=builder.from;  limit=builder.limit;  offset=builder.offset;  to=builder.to;}  }
class C{  protected AbstractDescendantSelector(Selector ancestor,SimpleSelector simple){  ancestorSelector=ancestor;  simpleSelector=simple;}  }
class C{  private void buildInitLayout(View myView){  for (  View cview : myView.children) {    buildInitLayout(cview);  }  if (myView.getAttributes().size() > 0) {    logger.info("Trying to add view {} ",myView.id);    logger.debug("myView: {}",myView);    ResourcesSoot.v().addUiAllocToInitLayout_ID(myView.id);  }}  }
class C{  public void testDoConfigureSetsAdminServer() throws Exception {  configuration.setProperty(WebLogicPropertySet.SERVER,SERVER);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(SERVER,"//weblogic:admin-server-name",config);}  }
class C{  public boolean hasParticipants(){  return super.hasElement(Who.KEY);}  }
class C{  public boolean abort() throws LoginException {  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    cleanKerberosCred();  } else {    logout();  }  return true;}  }
class C{  protected static void loadEnd(MLookupInfo info,HashMap lookup){  if (info.IsValidated && lookup.size() > 0)   s_loadedLookups.put(getKey(info),lookup);}  }
class C{  public synchronized void addTaskToInProgressMap(String jobId,ParallelTask task){  inprogressTaskMap.put(jobId,task);}  }
class C{  private boolean readMetaHeader() throws IOException {  try (ReadStream is=openRead(0,META_SEGMENT_SIZE)){    int crc=17;    long magic=BitsUtil.readLong(is);    if (magic != KELP_MAGIC) {      System.out.println("WRONG_MAGIC: " + magic);      return false;    }    crc=Crc32Caucho.generate(crc,magic);    _nonce=BitsUtil.readInt(is);    crc=Crc32Caucho.generateInt32(crc,_nonce);    int headers=BitsUtil.readInt(is);    crc=Crc32Caucho.generateInt32(crc,headers);    for (int i=0; i < headers; i++) {      int key=BitsUtil.readInt(is);      crc=Crc32Caucho.generateInt32(crc,key);      int value=BitsUtil.readInt(is);      crc=Crc32Caucho.generateInt32(crc,value);    }    int count=BitsUtil.readInt(is);    crc=Crc32Caucho.generateInt32(crc,count);    ArrayList<Integer> segmentSizes=new ArrayList<>();    for (int i=0; i < count; i++) {      int size=BitsUtil.readInt(is);      crc=Crc32Caucho.generateInt32(crc,size);      segmentSizes.add(size);    }    int crcFile=BitsUtil.readInt(is);    if (crc != crcFile) {      System.out.println("MISMATCHED_CRC: " + crcFile);      return false;    }    _metaSegment=new SegmentExtent10(0,0,META_SEGMENT_SIZE);    _segmentId=1;    _metaOffset=is.position();  }   return true;}  }
class C{  public void takeHints(Collection<Hint> c,int maxElements) throws InterruptedException {  int count=0;  try {    while (count == 0) {      hintLock.lock();      while (hintQueue.isEmpty()) {        hintsAvailable.await();      }      while (count < maxElements && !hintQueue.isEmpty()) {        HintKey hintKey=hintQueue.pollFirst();        if (hintKey != null) {          List<Versioned<byte[]>> values=hints.remove(hintKey);          if (values == null) {            continue;          }          c.add(new Hint(hintKey,values));          count+=1;        }      }    }  }  finally {    hintLock.unlock();  }}  }
class C{  public boolean hasMoreResults(){  return nextToken != null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette("spectrum.pal");    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getValue(row,col);if (z != noData) {z=outputImage.getValue(row,col);outputImage.setValue(row,col,Math.sqrt(z) * gridRes);} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static double[] deconvolve(final double[] p,final double rate){  final double[] r=Arrays.copyOf(p,p.length);  for (int k=0; k < p.length; k++) {    for (int j=0; j < p.length; j++) {      if (k + j < p.length) {        r[k + j]-=rate * p[k] * p[j];      }    }  }  double sum=0;  for (  final double q : r) {    sum+=q;  }  sum=1 / sum;  for (int k=0; k < r.length; k++) {    r[k]*=sum;  }  return r;}  }
class C{  private void loadFolders() throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, FinderException {  GetMoRef get=new GetMoRef(this.connection);  Map<String,Object> folders=get.entityProps(this.datacenter.object,new String[]{"vmFolder","hostFolder","datastoreFolder","networkFolder"});  this.vmFolder=fullPath((ManagedObjectReference)folders.get("vmFolder"));  this.hostFolder=fullPath((ManagedObjectReference)folders.get("hostFolder"));  this.datastoreFolder=fullPath((ManagedObjectReference)folders.get("datastoreFolder"));  this.networkFolder=fullPath((ManagedObjectReference)folders.get("networkFolder"));}  }
class C{  public SumProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  private Point2D _transform(Point2D graphPoint){  if (graphPoint == null)   return null;  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  Point2D viewPoint=graphPoint;  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double theta=polar.getTheta();  double radius=polar.getRadius();  if (radius > viewRadius)   return viewPoint;  double mag=Math.tan(Math.PI / 2 * magnification);  radius*=mag;  radius=Math.min(radius,viewRadius);  radius/=viewRadius;  radius*=Math.PI / 2;  radius=Math.abs(Math.atan(radius));  radius*=viewRadius;  Point2D projectedPoint=PolarPoint.polarToCartesian(theta,radius);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public BigDecimal optBigDecimal(int index,BigDecimal defaultValue){  try {    return this.getBigDecimal(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static <T>DomContent each(Collection<T> collection,Function<? super T,DomContent> mapper){  return unsafeHtml(collection.stream().map(mapper.andThen(null)).collect(Collectors.joining()));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.104 -0500",hash_original_method="DE60A5245E3B8D87B5C64F3502226B91",hash_generated_method="113279C604CCF4258CC3F684CEBF7053") public static boolean isSurrogate(char ch){  return ((ch) == 1);}  }
class C{  private static void delete(String path){  File file=new File(path);  file.delete();}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  protected DefaultClauseImpl(){  super();}  }
class C{  public boolean onKeyEventShared(KeyEvent keyEvent){  if (mKeyboardEventManager.onKeyEvent(keyEvent,mActionProcessor,mAnalytics)) {    mWakeLock.acquire();    mWakeLock.release();    return true;  }  return false;}  }
class C{  private synchronized float updateOrResetReqPerMinLstHr(float incr,boolean reset){  return updateOrResetSampledValues(incr,reset,_reqPerMinHr);}  }
class C{  public FBDriverConsistencyCheckException(String message){  super(message,SQLStateConstants.SQL_STATE_GENERAL_ERROR);}  }
class C{  public static void snippet(Collection<PojoDescriptor> pojos,String pkg,boolean includeKeys,boolean generateAliases,String outFolder,ConfirmCallable askOverwrite) throws IOException {  File pkgFolder=new File(outFolder,pkg.replace('.',File.separatorChar));  ensurePackages(pkgFolder);  File cacheCfg=new File(pkgFolder,"CacheConfig.java");  if (cacheCfg.exists()) {    MessageBox.Result choice=askOverwrite.confirm(cacheCfg.getName());    if (CANCEL == choice)     throw new IllegalStateException("Java snippet generation was canceled!");    if (NO == choice || NO_TO_ALL == choice)     return;  }  Collection<String> src=new ArrayList<>(256);  header(src,pkg,"CacheConfig","CacheConfig","java.sql.*","java.util.*","","org.apache.ignite.cache.*","org.apache.ignite.cache.store.jdbc.*","org.apache.ignite.configuration.*");  for (  PojoDescriptor pojo : pojos) {    String tbl=pojo.table();    String valClsName=pojo.valueClassName();    Collection<PojoField> fields=pojo.valueFields(true);    add1(src,"/**");    add1(src," * Create JDBC type for " + tbl + ".");    add1(src," *");    add1(src," * @param cacheName Cache name.");    add1(src," * @return Configured JDBC type.");    add1(src," */");    add1(src,"private static JdbcType jdbcType" + valClsName + "(String cacheName) {");    add2(src,"JdbcType jdbcType = new JdbcType();");    add0(src,"");    add2(src,"jdbcType.setCacheName(cacheName);");    if (pojo.schema() != null)     add2(src,"jdbcType.setDatabaseSchema(\"" + pojo.schema() + "\");");    add2(src,"jdbcType.setDatabaseTable(\"" + tbl + "\");");    add2(src,"jdbcType.setKeyType(\"" + pkg + "."+ pojo.keyClassName()+ "\");");    add2(src,"jdbcType.setValueType(\"" + pkg + "."+ valClsName+ "\");");    add0(src,"");    add2(src,"// Key fields for " + tbl + ".");    add2(src,"Collection<JdbcTypeField> keys = new ArrayList<>();");    addFields(src,"keys",pojo.keyFields());    add2(src,"jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));");    add0(src,"");    add2(src,"// Value fields for " + tbl + ".");    add2(src,"Collection<JdbcTypeField> vals = new ArrayList<>();");    addFields(src,"vals",pojo.valueFields(includeKeys));    add2(src,"jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));");    add0(src,"");    add2(src,"return jdbcType;");    add1(src,"}");    add0(src,"");    add1(src,"/**");    add1(src," * Create SQL Query descriptor for " + tbl + ".");    add1(src," *");    add1(src," * @return Configured query entity.");    add1(src," */");    add1(src,"private static QueryEntity queryEntity" + valClsName + "() {");    add2(src,"QueryEntity qryEntity = new QueryEntity();");    add0(src,"");    add2(src,"qryEntity.setKeyType(\"" + pkg + "."+ pojo.keyClassName()+ "\");");    add2(src,"qryEntity.setValueType(\"" + pkg + "."+ valClsName+ "\");");    add0(src,"");    add2(src,"// Query fields for " + tbl + ".");    add2(src,"LinkedHashMap<String, String> fields = new LinkedHashMap<>();");    add0(src,"");    for (    PojoField field : fields)     add2(src,"fields.put(\"" + field.javaName() + "\", \""+ GeneratorUtils.boxPrimitiveType(field.javaTypeName())+ "\");");    add0(src,"");    add2(src,"qryEntity.setFields(fields);");    add0(src,"");    if (generateAliases) {      Collection<PojoField> aliases=new ArrayList<>();      for (      PojoField field : fields) {        if (!field.javaName().equalsIgnoreCase(field.dbName()))         aliases.add(field);      }      if (!aliases.isEmpty()) {        add2(src,"// Aliases for fields.");        add2(src,"Map<String, String> aliases = new HashMap<>();");        add0(src,"");        for (        PojoField alias : aliases)         add2(src,"aliases.put(\"" + alias.javaName() + "\", \""+ alias.dbName()+ "\");");        add0(src,"");        add2(src,"qryEntity.setAliases(aliases);");        add0(src,"");      }    }    Collection<QueryIndex> idxs=pojo.indexes();    if (!idxs.isEmpty()) {      boolean first=true;      boolean firstIdx=true;      for (      QueryIndex idx : idxs) {        Set<Map.Entry<String,Boolean>> dbIdxFlds=idx.getFields().entrySet();        int sz=dbIdxFlds.size();        List<T2<String,Boolean>> idxFlds=new ArrayList<>(sz);        for (        Map.Entry<String,Boolean> idxFld : dbIdxFlds) {          PojoField field=GeneratorUtils.findFieldByName(fields,idxFld.getKey());          if (field != null)           idxFlds.add(new T2<>(field.javaName(),idxFld.getValue())); else           break;        }        if (idxFlds.size() == sz) {          if (first) {            add2(src,"// Indexes for " + tbl + ".");            add2(src,"Collection<QueryIndex> idxs = new ArrayList<>();");            add0(src,"");          }          if (sz == 1) {            T2<String,Boolean> idxFld=idxFlds.get(0);            add2(src,"idxs.add(new QueryIndex(\"" + idxFld.getKey() + "\", "+ idxFld.getValue()+ ", \""+ idx.getName()+ "\"));");            add0(src,"");          } else {            add2(src,(firstIdx ? "QueryIndex " : "") + "idx = new QueryIndex();");            add0(src,"");            add2(src,"idx.setName(\"" + idx.getName() + "\");");            add0(src,"");            add2(src,"idx.setIndexType(QueryIndexType." + idx.getIndexType() + ");");            add0(src,"");            add2(src,(firstIdx ? "LinkedHashMap<String, Boolean> " : "") + "idxFlds = new LinkedHashMap<>();");            add0(src,"");            for (            T2<String,Boolean> idxFld : idxFlds)             add2(src,"idxFlds.put(\"" + idxFld.getKey() + "\", "+ idxFld.getValue()+ ");");            add0(src,"");            add2(src,"idx.setFields(idxFlds);");            add0(src,"");            add2(src,"idxs.add(idx);");            add0(src,"");            firstIdx=false;          }          first=false;        }      }      if (!first) {        add2(src,"qryEntity.setIndexes(idxs);");        add0(src,"");      }    }    add2(src,"return qryEntity;");    add1(src,"}");    add0(src,"");  }  add1(src,"/**");  add1(src," * Configure cache.");  add1(src," *");  add1(src," * @param cacheName Cache name.");  add1(src," * @param storeFactory Cache store factory.");  add1(src," * @return Cache configuration.");  add1(src," */");  add1(src,"public static <K, V> CacheConfiguration<K, V> cache(String cacheName," + " CacheJdbcPojoStoreFactory<K, V> storeFactory) {");  add2(src,"if (storeFactory == null)");  add3(src," throw new IllegalArgumentException(\"Cache store factory cannot be null.\");");  add0(src,"");  add2(src,"CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);");  add0(src,"");  add2(src,"ccfg.setCacheStoreFactory(storeFactory);");  add2(src,"ccfg.setReadThrough(true);");  add2(src,"ccfg.setWriteThrough(true);");  add0(src,"");  add2(src,"// Configure JDBC types.");  add2(src,"Collection<JdbcType> jdbcTypes = new ArrayList<>();");  add0(src,"");  for (  PojoDescriptor pojo : pojos)   add2(src,"jdbcTypes.add(jdbcType" + pojo.valueClassName() + "(cacheName));");  add0(src,"");  add2(src,"storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));");  add0(src,"");  add2(src,"// Configure query entities.");  add2(src,"Collection<QueryEntity> qryEntities = new ArrayList<>();");  add0(src,"");  for (  PojoDescriptor pojo : pojos)   add2(src,"qryEntities.add(queryEntity" + pojo.valueClassName() + "());");  add0(src,"");  add2(src,"ccfg.setQueryEntities(qryEntities);");  add0(src,"");  add2(src,"return ccfg;");  add1(src,"}");  add0(src,"}");  write(src,cacheCfg);}  }
class C{  protected FilterChain createGeronimoFilterChain(LocalContainer container) throws MalformedURLException {  FilterChain filterChain=getFilterChain();  getAntUtils().addTokenToFilterChain(filterChain,GeneralPropertySet.RMI_PORT,getPropertyValue(GeneralPropertySet.RMI_PORT));  getAntUtils().addTokenToFilterChain(filterChain,ServletPropertySet.PORT,getPropertyValue(ServletPropertySet.PORT));  String[] userTokens=getUserTokens();  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.users",userTokens[0]);  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.groups",userTokens[1]);  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.manager.username",getPropertyValue(RemotePropertySet.USERNAME));  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.manager.password",getPropertyValue(RemotePropertySet.PASSWORD));  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.console.log.level",getPropertyValue(GeronimoPropertySet.GERONIMO_CONSOLE_LOGLEVEL));  getAntUtils().addTokenToFilterChain(filterChain,"geronimo.file.log.level",getPropertyValue(GeronimoPropertySet.GERONIMO_FILE_LOGLEVEL));  return filterChain;}  }
class C{  public void addTemporaryResult(LocalResult result){  if (!result.needToClose()) {    return;  }  if (temporaryResults == null) {    temporaryResults=New.hashSet();  }  if (temporaryResults.size() < 100) {    temporaryResults.add(result);  }}  }
class C{  private void processConstantDefns(ModuleNode mod){  OpDeclNode[] consts=mod.getConstantDecls();  for (int i=0; i < consts.length; i++) {    Object val=consts[i].getToolObject(TLCGlobals.ToolId);    if (val != null && val instanceof Value) {      ((Value)val).deepNormalize();    } else     if (val != null && val instanceof OpDefNode) {      OpDefNode opDef=(OpDefNode)val;      Assert.check(opDef.getArity() == consts[i].getArity(),EC.TLC_CONFIG_WRONG_SUBSTITUTION_NUMBER_OF_ARGS,new String[]{consts[i].getName().toString(),opDef.getName().toString()});      if (opDef.getArity() == 0) {        Value defVal=this.eval(opDef.getBody(),Context.Empty,TLCState.Empty);        defVal.deepNormalize();        consts[i].setToolObject(TLCGlobals.ToolId,defVal);      }    }  }  OpDefNode[] opDefs=mod.getOpDefs();  for (int i=0; i < opDefs.length; i++) {    OpDefNode opDef=opDefs[i];    ModuleNode moduleNode=opDef.getOriginallyDefinedInModuleNode();    boolean evaluate=(moduleNode == null) || (!moduleNode.isInstantiated()) || ((moduleNode.getConstantDecls().length == 0) && (moduleNode.getVariableDecls().length == 0));    if (evaluate && opDef.getArity() == 0) {      Object realDef=this.lookup(opDef,Context.Empty,false);      if (realDef instanceof OpDefNode) {        opDef=(OpDefNode)realDef;        if (this.getLevelBound(opDef.getBody(),Context.Empty) == 0) {          try {            UniqueString opName=opDef.getName();            Value val=this.eval(opDef.getBody(),Context.Empty,TLCState.Empty);            val.deepNormalize();            opDef.setToolObject(TLCGlobals.ToolId,val);            Object def=this.defns.get(opName);            if (def == opDef) {              this.defns.put(opName,val);            }          } catch (          Throwable e) {          }        }      }    }  }  ModuleNode[] imods=mod.getInnerModules();  for (int i=0; i < imods.length; i++) {    this.processConstantDefns(imods[i]);  }}  }
class C{  private SmallFloat(){}  }
class C{  private void enableQuadModeOnConnection(SPARQLConnection con) throws Exception {  Field quadModeField=SPARQLConnection.class.getDeclaredField("quadMode");  quadModeField.setAccessible(true);  Field modifiersField=Field.class.getDeclaredField("modifiers");  modifiersField.setAccessible(true);  modifiersField.setInt(quadModeField,quadModeField.getModifiers() & ~Modifier.FINAL);  quadModeField.set(con,true);}  }
class C{  public TabbedInspector(Properties[] properties,GUIState state,String name,String title,String[] tabNames){  buildTabbedInspector(properties,state,name,title,tabNames);}  }
class C{  private static boolean checkUnpack(File webAppDirectory,File webServerDirectory,String warFilePath){  if (!webAppDirectory.isDirectory() || !webServerDirectory.isDirectory()) {    return true;  }  File warFile=new File(warFilePath);  return webAppDirectory.lastModified() != warFile.lastModified();}  }
class C{  public void readFromStream(DataInputStream dis,int version) throws IOException {  for (int c=0; c < 2; c++) {    ArrayList<TimeControlField> tc=new ArrayList<TimeControlField>();    if (c == 0)     tcW=tc; else     tcB=tc;    int nw=dis.readInt();    for (int i=0; i < nw; i++) {      int time=dis.readInt();      int moves=dis.readInt();      int inc=dis.readInt();      tc.add(new TimeControlField(time,moves,inc));    }  }}  }
class C{  Round next(Set<JavaFileObject> newSourceFiles,Map<String,JavaFileObject> newClassFiles){  try {    return new Round(this,newSourceFiles,newClassFiles);  }  finally {    compiler.close(false);  }}  }
class C{  public void addLineSegment(Coord[] coords){  if (coords == null || coords.length <= 1) {    return;  }  if (!coords[0].isProjected()) {    coords=getProjection().fromWGS84(coords);  }  _lineSegments.addElement(coords);}  }
class C{  public static Map<String,Object> updatePartyGroup(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue partyGroup=null;  GenericValue party=null;  try {    partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (partyGroup == null || party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_not_found",locale));  }  String oldStatusId=party.getString("statusId");  partyGroup.setNonPKFields(context);  party.setNonPKFields(context);  party.set("statusId",oldStatusId);  try {    partyGroup.store();    party.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (UtilValidate.isNotEmpty(context.get("statusId")) && !context.get("statusId").equals(oldStatusId)) {    try {      dispatcher.runSync("setPartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",context.get("statusId"),"userLogin",context.get("userLogin")));    } catch (    GenericServiceException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));    }  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public void add(final ICounter counter){  if (counter == null)   throw new IllegalArgumentException();  counters.add(counter);}  }
class C{  public static char docType(final String mime){  char doctype=DT_UNKNOWN;  if (mime == null)   doctype=DT_UNKNOWN; else   if (mime.startsWith("image/"))   doctype=DT_IMAGE; else   if (mime.endsWith("/gif"))   doctype=DT_IMAGE; else   if (mime.endsWith("/jpeg"))   doctype=DT_IMAGE; else   if (mime.endsWith("/png"))   doctype=DT_IMAGE; else   if (mime.endsWith("/html"))   doctype=DT_HTML; else   if (mime.endsWith("/rtf"))   doctype=DT_DOC; else   if (mime.endsWith("/pdf"))   doctype=DT_PDFPS; else   if (mime.endsWith("/octet-stream"))   doctype=DT_BINARY; else   if (mime.endsWith("/x-shockwave-flash"))   doctype=DT_FLASH; else   if (mime.endsWith("/msword"))   doctype=DT_DOC; else   if (mime.endsWith("/mspowerpoint"))   doctype=DT_DOC; else   if (mime.endsWith("/postscript"))   doctype=DT_PDFPS; else   if (mime.startsWith("text/"))   doctype=DT_TEXT; else   if (mime.startsWith("audio/"))   doctype=DT_AUDIO; else   if (mime.startsWith("video/"))   doctype=DT_MOVIE;  return doctype;}  }
class C{  public static void finalizeOutput(Configuration conf) throws RetryException, UnrecoverableException {  Schema outputSchema=SchemaFactory.getSchema(conf);  String outputTable=outputSchema.getTable();  String tmpOutputTable=getTablePrefix(outputSchema) + outputSchema.getTable();  String createTableStatement=outputSchema.getCreateTableQuery();  String inputFilter=outputSchema.getFilter();  int outputNumberOfPartitions=outputSchema.getNumberOfPartitions();  Connection connection=null;  try {    connection=outputSchema.getConnection();    if (inputFilter != null) {      JdbcQueryUtils.deleteExisitingRows(outputTable,inputFilter,connection);    } else {      JdbcQueryUtils.dropTable(outputTable,connection);    }    JdbcQueryUtils.createTable(createTableStatement,connection);    JdbcQueryUtils.mergeOutput(outputTable,getTablePrefix(outputSchema),outputNumberOfPartitions,connection);    JdbcQueryUtils.dropTemporaryOutputTables(tmpOutputTable,outputNumberOfPartitions,connection);  } catch (  SQLException ex1) {    LOG.error(ex1.getMessage());    throw new RetryException(ex1.getMessage());  }catch (  ClassNotFoundException ex2) {    LOG.error(ex2.getMessage());    throw new UnrecoverableException(ex2.getMessage());  } finally {    DbUtils.closeQuietly(connection);  }}  }
class C{  @Override public boolean supportsPositionedDelete(){  debugCodeCall("supportsPositionedDelete");  return true;}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func){  dsf.saveToGeode(regionPath,func,dsf.defaultConnectionConf(),emptyStrStrMap());}  }
class C{  public static void updateRepositoryConfigs(Repository repository,RepositoryConfig... configs) throws RepositoryException, RepositoryConfigException {  RepositoryConnection con=repository.getConnection();  try {    updateRepositoryConfigs(con,configs);  }  finally {    con.close();  }}  }
class C{  @Override public void acceptOffer(Offer offer){  futureAcceptedOffers.onNext(offer);  offers.remove(offer);  acceptedOffers.add(offer);}  }
class C{  public void testBug19803348() throws Exception {  Connection testConn=null;  try {    testConn=getConnectionWithProps("useInformationSchema=false,nullCatalogMeansCurrent=false");    DatabaseMetaData dbmd=testConn.getMetaData();    String testDb1="testBug19803348_db1";    String testDb2="testBug19803348_db2";    if (!dbmd.supportsMixedCaseIdentifiers()) {      testDb1=testDb1.toLowerCase();      testDb2=testDb2.toLowerCase();    }    createDatabase(testDb1);    createDatabase(testDb2);    createFunction(testDb1 + ".testBug19803348_f","(d INT) RETURNS INT DETERMINISTIC BEGIN RETURN d; END");    createProcedure(testDb1 + ".testBug19803348_p","(d int) BEGIN SELECT d; END");    this.rs=dbmd.getProcedures(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_p",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedureColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());    dropFunction(testDb1 + ".testBug19803348_f");    dropProcedure(testDb1 + ".testBug19803348_p");    createFunction(testDb1 + ".testBug19803348_B_f","(d INT) RETURNS INT DETERMINISTIC BEGIN RETURN d; END");    createProcedure(testDb1 + ".testBug19803348_B_p","(d int) BEGIN SELECT d; END");    createFunction(testDb2 + ".testBug19803348_A_f","(d INT) RETURNS INT DETERMINISTIC BEGIN RETURN d; END");    createProcedure(testDb2 + ".testBug19803348_A_p","(d int) BEGIN SELECT d; END");    this.rs=dbmd.getProcedures(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_p",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_p",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedureColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());  }  finally {    if (testConn != null) {      testConn.close();    }  }}  }
class C{  public void addSample(C condition,V sample,long frequency){  FrequencyDistribution<V> freqDist=null;  if (cfd.containsKey(condition)) {    freqDist=cfd.get(condition);  } else {    freqDist=new FrequencyDistribution<V>();    cfd.put(condition,freqDist);  }  long countBefore=freqDist.getN();  freqDist.addSample(sample,frequency);  this.n=n + (freqDist.getN() - countBefore);}  }
class C{  final public int copy(final ByteBuffer src){  final int n=src.remaining();  if (n > 0) {    ensureFree(n);    src.get(buf,pos,n);    this.pos+=n;    this.limit=this.pos;  }  return n;}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(){  super();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public ConvertLocalVariableDescriptor(){  super(IJavaRefactorings.CONVERT_LOCAL_VARIABLE);}  }
class C{  public void clear(){  m_Methods.clear();}  }
class C{  public static TableWrapLayout createFormPaneTableWrapLayout(boolean makeColumnsEqualWidth,int numColumns){  TableWrapLayout layout=new TableWrapLayout();  layout.topMargin=FORM_PANE_MARGIN_TOP;  layout.bottomMargin=FORM_PANE_MARGIN_BOTTOM;  layout.leftMargin=FORM_PANE_MARGIN_LEFT;  layout.rightMargin=FORM_PANE_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_PANE_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_PANE_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public DateTime toDateTimeToday(){  return toDateTimeToday(null);}  }
class C{  public PLPosition(){  this(0.0f,0.0f,0.0f);}  }
class C{  public ParameterBlock add(int i){  return add(new Integer(i));}  }
class C{  public void add(RepositoryLocation repositoryLocation){  repositoryLocations.add(repositoryLocation);}  }
class C{  protected void onShutdown(){}  }
class C{  public Matrix4f m11(float m11){  this.m11=m11;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  @Override protected Parcelable onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  SavedState savedState=new SavedState(superState);  savedState.setTitle(mTitle);  savedState.setCompliedAmount(mCompliedAmount);  savedState.setTotalAmount(mTotalAmount);  savedState.setVisibility(getVisibility());  return savedState;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (!m_foundFirstElement && null != m_serializer) {    m_foundFirstElement=true;    Serializer newSerializer;    try {      newSerializer=SerializerSwitcher.switchSerializerIfHTML(uri,localName,m_outputFormat.getProperties(),m_serializer);    } catch (    TransformerException te) {      throw new SAXException(te);    }    if (newSerializer != m_serializer) {      try {        m_resultContentHandler=newSerializer.asContentHandler();      } catch (      IOException ioe) {        throw new SAXException(ioe);      }      if (m_resultContentHandler instanceof DTDHandler)       m_resultDTDHandler=(DTDHandler)m_resultContentHandler;      if (m_resultContentHandler instanceof LexicalHandler)       m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;      m_serializer=newSerializer;    }  }  flushStartDoc();  m_resultContentHandler.startElement(uri,localName,qName,attributes);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public static String pad(String word){  ArrayList<String> str=new ArrayList<>(Arrays.asList(word.split(" ")));  for (int i=0; i < str.size(); i++) {    if (str.get(i).matches("Exercise\\d_\\d")) {      StringBuilder newStr=new StringBuilder(str.get(i));      newStr.insert(newStr.length() - 1,0 + "");      newStr.insert(8,'0');      str.remove(i);      str.add(i,newStr.toString());    }  }  String s="";  for (int i=0; i < str.size(); i++) {    s+=str.get(i) + " ";  }  return s;}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public void write(String filename) throws IOException {  SWFWriter swfwriter=new SWFWriter(filename);  TagWriter tagwriter=new TagWriter(swfwriter);  write(tagwriter);}  }
class C{  public AllocLocationModel(SourceLocationTag line,IAllocNode node){  this(line.getClz(),line.getLine(),node);}  }
class C{  @RequestProcessing(value="/top/consumption",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showConsumption(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/top/consumption.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final List<JSONObject> users=pointtransferQueryService.getTopConsumptionUsers(Symphonys.getInt("topConsumptionCnt"));  dataModel.put(Common.TOP_CONSUMPTION_USERS,users);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  private boolean installVmPrereqs(ITestDevice device,CtsBuildHelper ctsBuild) throws DeviceNotAvailableException {  cleanupDeviceFiles(device);  CLog.d("Creating device temp directory, including dalvik-cache.");  createRemoteDir(device,VM_TEST_TEMP_DIR + "/dalvik-cache");  try {    File localTmpDir=FileUtil.createTempDir("cts-vm",new File("/tmp/"));    CLog.d("Creating host temp dir %s",localTmpDir.getPath());    File jarFile=new File(ctsBuild.getTestCasesDir(),getJarFileName());    if (!jarFile.exists()) {      CLog.e("Missing jar file %s",jarFile.getPath());      return false;    }    CLog.d("Extracting jar file %s to host temp directory %s.",jarFile.getPath(),localTmpDir.getPath());    ZipFile zipFile=new ZipFile(jarFile);    FileUtil.extractZip(zipFile,localTmpDir);    File localTestTmpDir=new File(localTmpDir,"tests");    CLog.d("Syncing host dir %s to device dir %s",localTestTmpDir.getPath(),VM_TEST_TEMP_DIR);    if (!device.pushDir(localTestTmpDir,VM_TEST_TEMP_DIR)) {      CLog.e("Failed to push vm test files");      return false;    }    CLog.d("Cleaning up host temp dir %s",localTmpDir.getPath());    FileUtil.recursiveDelete(localTmpDir);  } catch (  IOException e) {    CLog.e("Failed to extract jar file %s and sync it to device %s.",getJarFileName(),device.getSerialNumber());    return false;  }  return true;}  }
class C{  public STGD(int K,double learningRate,double threshold,double gravity){  setK(K);  setLearningRate(learningRate);  setThreshold(threshold);  setGravity(gravity);}  }
class C{  public ItemStack extractBits(final int slot,final int amount,final boolean simulate){  final ItemStack contents=getStackInSlot(slot);  if (contents != null && amount > 0) {    contents.stackSize=Math.min(amount,contents.stackSize);    if (!simulate) {      final int oldBits=bits;      bits-=contents.stackSize;      if (bits == 0) {        myFluid=null;      }      if (bits != oldBits) {        saveAndUpdate();      }    }    return contents;  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.882 -0500",hash_original_method="A28D232247661B92586D4FEECBA4E0AF",hash_generated_method="A2782BC0D194A83092DA7CBB022AC362") @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  boolean firstTime=true;  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    if (firstTime) {      firstTime=false;    } else {      sb.append(",");    }    sb.append(entry.getKey());    sb.append(":\"");    sb.append(entry.getValue());    sb.append("\"");    return mCapabilities.toString();  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.372 -0400",hash_original_method="550CADED4EF1A579D5D85D9CA296B9C2",hash_generated_method="8146ACF559DADAB22DC9A8EC08CC5F7E") public SearchManagerService(Context context){  mContext=context;  mContext.registerReceiver(new BootCompletedReceiver(),new IntentFilter(Intent.ACTION_BOOT_COMPLETED));  mGlobalSearchObserver=new GlobalSearchProviderObserver(mContext.getContentResolver());}  }
class C{  public static boolean isInterrupted(){  return interrupted;}  }
class C{  private PsiAnnotation[] toPsi(HKey primaryKey,MethodAnnotations methodAnnotations){  boolean notNull=methodAnnotations.notNulls.contains(primaryKey);  boolean nullable=methodAnnotations.nullables.contains(primaryKey);  boolean pure=methodAnnotations.pures.contains(primaryKey);  String contractValues=methodAnnotations.contractsValues.get(primaryKey);  String contractPsiText=null;  if (contractValues != null) {    contractPsiText=pure ? "value=" + contractValues + ",pure=true" : contractValues;  } else   if (pure) {    contractPsiText="pure=true";  }  PsiAnnotation psiAnnotation=contractPsiText == null ? null : createContractAnnotation(contractPsiText);  if (notNull && psiAnnotation != null) {    return new PsiAnnotation[]{getNotNullAnnotation(),psiAnnotation};  }  if (nullable && psiAnnotation != null) {    return new PsiAnnotation[]{getNullableAnnotation(),psiAnnotation};  }  if (notNull) {    return new PsiAnnotation[]{getNotNullAnnotation()};  }  if (nullable) {    return new PsiAnnotation[]{getNullableAnnotation()};  }  if (psiAnnotation != null) {    return new PsiAnnotation[]{psiAnnotation};  }  return PsiAnnotation.EMPTY_ARRAY;}  }
class C{  public boolean validateIp(final String ip){  matcher=pattern.matcher(ip);  return matcher.matches();}  }
class C{  public Abs(){  super(Number.class,Number.class);}  }
class C{  public static boolean hasData(int id){switch (id) {case 0:case 2:case 4:case 13:case 14:case 15:case 20:case 21:case 22:case 25:case 30:case 32:case 37:case 39:case 40:case 41:case 42:case 45:case 46:case 47:case 48:case 49:case 51:case 52:case 56:case 57:case 58:case 60:case 7:case 11:case 73:case 74:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 87:case 88:case 101:case 102:case 103:case 110:case 112:case 113:case 117:case 121:case 122:case 123:case 124:case 129:case 133:case 138:case 140:case 165:case 166:case 169:case 170:case 172:case 173:case 174:case 188:case 189:case 190:case 191:case 192:    return false;default :  return true;}}  }
class C{  public static String toFormattedXMLString(Aspect aspect) throws InvocationTargetException, IllegalAccessException {  Hashtable<String,Object> attributeList=null;  StringBuffer returnStringBuf=null;  String returnString=null;  String attributeName=null;  if (null != (attributeList=getAllAttribueValues(aspect,true))) {    returnStringBuf=new StringBuffer();    String className=aspect.getClass().getName();    final StringTokenizer spaceTokens=new StringTokenizer(className,".");    while (spaceTokens.hasMoreTokens()) {      className=spaceTokens.nextToken();    }    returnStringBuf.append("<" + className + "> \n");    final String index[]=new String[attributeList.size()];    final Enumeration<String> enumAttr=attributeList.keys();    int i=0;    while (enumAttr.hasMoreElements()) {      index[i++]=enumAttr.nextElement();    }    CollectionUtilities.n2sort(index,true);    for (    final String element : index) {      attributeName=element;      if (attributeList.get(attributeName) instanceof ArrayList) {        @SuppressWarnings("unchecked") final List<Aspect> list=(List<Aspect>)attributeList.get(attributeName);        for (        Aspect aspect1 : list) {          returnStringBuf.append(toFormattedXMLString(aspect1));        }      } else       if (attributeList.get(attributeName).getClass().getSuperclass().getName().equals(Aspect.class.getName())) {        final Aspect aspect1=(Aspect)attributeList.get(attributeName);        returnStringBuf.append(toFormattedXMLString(aspect1));      } else {        returnStringBuf.append("    <" + attributeName + ">"+ attributeList.get(attributeName)+ "</"+ attributeName+ "> \n");      }    }    returnStringBuf.append("</" + className + "> \n");    returnString=returnStringBuf.toString();  }  return returnString;}  }
class C{  public StackedBarRenderer3D(){  this(false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(9,"Ann ");  childData=child.getData();  assertEquals("characterdataInsertDataMiddleAssert","Margaret Ann Martin",childData);}  }
class C{  public void remove(int index){  mCategories.remove(index);  mTitles.remove(index);  mValues.remove(index);}  }
class C{  public K param(String name,Object value){  if (params == null) {    params=new HashMap<String,Object>();  }  params.put(name,value);  return self();}  }
class C{  public SVGOMAnimatedEnumeration(AbstractElement elt,String ns,String ln,String[] val,short def){  super(elt,ns,ln);  values=val;  defaultValue=def;}  }
class C{  public static boolean isMinusOrOptional(BOp node){  return isOptional(node) || isMinus(node);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws NoSuchAlgorithmException, IllegalArgumentException, KeyManagementException {  try {    SSLContext.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i],mProv);    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider(),mProv);    checkSSLContext(sslC);  }}  }
class C{  public void test_literal_ordering_plain_languageCode_datatype(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(v.noninline_plain_lit1,v.noninline_languageCode_de_lit1));  assertLT(c.compare(v.noninline_plain_lit1,v.noninline_xsd_string_lit1));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void removeMask(long[] mask){  int dest=BitsUtil.nextSetBit(mask,0);  if (dest < 0) {    return;  }  int src=BitsUtil.nextSetBit(mask,dest);  while (src < numEntries) {    if (!BitsUtil.get(mask,src)) {      entries[dest]=entries[src];      dest++;    }    src++;  }  int rm=src - dest;  while (dest < numEntries) {    entries[dest]=null;    dest++;  }  numEntries-=rm;}  }
class C{  protected void doInspectionTest(@NonNls @NotNull String[] testFiles,@NotNull Class inspectionClass,@NonNls @NotNull String quickFixName,boolean applyFix,boolean available){  myFixture.enableInspections(inspectionClass);  myFixture.configureByFiles(testFiles);  myFixture.checkHighlighting(true,false,false);  final IntentionAction intentionAction=myFixture.findSingleIntention(quickFixName);  if (available) {    assertNotNull(intentionAction);    if (applyFix) {      myFixture.launchAction(intentionAction);      myFixture.checkResultByFile(graftBeforeExt(testFiles[0],"_after"));    }  } else {    assertNull(intentionAction);  }}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  private boolean ping(){  try {    if (null == influxDB) {      return false;    }    influxDB.ping();    return true;  } catch (  Exception e) {    if (log.isTraceEnabled()) {      log.trace("Ping to the influxDB failed.",e);    }    return false;  }}  }
class C{  public static boolean editorWithFocusDirty(){  return getTLAEditorWithFocus().isDirty();}  }
class C{  public RangeEditor(ContinuousDiscretizationSpec spec){  this.breakpoints=spec.getBreakpoints();  this.categories=spec.getCategories();  this.editableRange=true;  buildEditor();}  }
class C{  public static Bitmap rotateBitmap(Bitmap srcBmp,float degrees){  int width, height;  width=srcBmp.getWidth();  height=srcBmp.getHeight();  Matrix matrix=new Matrix();  matrix.reset();  matrix.setRotate(degrees,width / 2,height / 2);  Bitmap ret=Bitmap.createBitmap(srcBmp,0,0,width,height,matrix,true);  return ret;}  }
class C{  public static Pack threadDump(Pack param) throws Throwable {  MapPack m=new MapPack();  if (SystemUtil.IS_JAVA_1_5 || SystemUtil.JAVA_VENDOR.startsWith("IBM")) {    List<String> out=ThreadUtil.getThreadDumpList();    ListValue lv=m.newList("threadDump");    for (int i=0; i < out.size(); i++) {      lv.add(out.get(i));    }    return m;  }  ClassLoader loader=LoaderManager.getToolsLoader();  if (loader == null) {    List<String> out=ThreadUtil.getThreadDumpList();    ListValue lv=m.newList("threadDump");    for (int i=0; i < out.size(); i++) {      lv.add(out.get(i));    }    return m;  }  try {    Class c=Class.forName(TOOLS_MAIN,true,loader);    IToolsMain toolsMain=(IToolsMain)c.newInstance();    List<String> out=(List<String>)toolsMain.threadDump(0,100000);    ListValue lv=m.newList("threadDump");    for (int i=0; i < out.size(); i++) {      lv.add(out.get(i));    }  } catch (  Exception e) {    m.put("error",e.getMessage());  }  return m;}  }
class C{  public FastCharBuffer append(char[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public FilterPred(FilterPredClause clause){  clauses.add(clause);}  }
class C{  protected void init(ControlFlowGraph cfg){  this.cfg=cfg;  thenStores=new IdentityHashMap<>();  elseStores=new IdentityHashMap<>();  inputs=new IdentityHashMap<>();  storesAtReturnStatements=new IdentityHashMap<>();  worklist=new Worklist(cfg);  nodeValues=new IdentityHashMap<>();  finalLocalValues=new HashMap<>();  worklist.add(cfg.getEntryBlock());  List<LocalVariableNode> parameters=null;  UnderlyingAST underlyingAST=cfg.getUnderlyingAST();  if (underlyingAST.getKind() == Kind.METHOD) {    MethodTree tree=((CFGMethod)underlyingAST).getMethod();    parameters=new ArrayList<>();    for (    VariableTree p : tree.getParameters()) {      LocalVariableNode var=new LocalVariableNode(p);      parameters.add(var);    }  } else   if (underlyingAST.getKind() == Kind.LAMBDA) {    LambdaExpressionTree lambda=((CFGLambda)underlyingAST).getLambdaTree();    parameters=new ArrayList<>();    for (    VariableTree p : lambda.getParameters()) {      LocalVariableNode var=new LocalVariableNode(p);      parameters.add(var);    }  } else {  }  S initialStore=transferFunction.initialStore(underlyingAST,parameters);  Block entry=cfg.getEntryBlock();  thenStores.put(entry,initialStore);  elseStores.put(entry,initialStore);  inputs.put(entry,new TransferInput<>(null,this,initialStore));}  }
class C{  public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder){  return new FunctionScoreQueryBuilder(queryBuilder);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("LoginServlet.init");}  }
class C{  private XNetReply loadChars(java.io.BufferedReader istream) throws java.io.IOException {  String s="";  s=istream.readLine();  if (log.isDebugEnabled()) {    log.debug("Received from port: " + s);  }  if (s == null) {    return null;  } else {    return new XNetReply(s);  }}  }
class C{  protected void repeatFrame(){  if (currentFrame != frameNum)   return;  if (spriteLoopNum > 0) {    currentLoopNum++;    if (spriteLoopNum == currentLoopNum) {      dispatchCallback();      return;    }    resetFrame();    return;  }  if (spriteLoop) {    resetFrame();  } else {    currentFrame=frameNum;  }  dispatchCallback();}  }
class C{  public RaftParameters withLogSyncStoppingGap(int logSyncStopGap){  this.logSyncStopGap=logSyncStopGap;  return this;}  }
class C{  @Override public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public static int count(){  return values().length;}  }
class C{  public final void readResponse() throws IOException {  if (hasResponse()) {    responseHeaders.setResponseSource(responseSource);    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    if (requestBodyOut instanceof RetryableOutputStream) {      int contentLength=((RetryableOutputStream)requestBodyOut).contentLength();      requestHeaders.setContentLength(contentLength);    }    transport.writeRequestHeaders();  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      transport.writeRequestBody((RetryableOutputStream)requestBodyOut);    }  }  transport.flushRequest();  responseHeaders=transport.readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  responseHeaders.setResponseSource(responseSource);  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      release(false);      ResponseHeaders combinedHeaders=cachedResponseHeaders.combine(responseHeaders);      this.responseHeaders=combinedHeaders;      OkResponseCache responseCache=client.getOkResponseCache();      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,policy.getHttpConnectionToCache());      initContentStream(cachedResponseBody);      return;    } else {      Util.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(transport.getTransferStream(cacheRequest));}  }
class C{  public static String compress(String text,int size){  TextStream stream=new TextStream(text);  StringWriter writer=new StringWriter(text.length());  int count=0;  while (!stream.atEnd()) {    if (count >= size) {      break;    }    char next=stream.next();    if (Character.isLetter(next) || Character.isDigit(next) || (next == '_')) {      writer.write(next);    } else {      writer.write('_');    }    count++;  }  return writer.toString();}  }
class C{  public BasicTextImage(TerminalSize size){  this(size,new TextCharacter(' ',TextColor.ANSI.DEFAULT,TextColor.ANSI.DEFAULT));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.461 -0500",hash_original_method="22C12092B284774CBE15329CD788E924",hash_generated_method="D95D2FA0457C8806A430432C19769447") public boolean suppressDialog(){  return false;}  }
class C{  public void calculateDerived(){  mean=Double.NaN;  stdDev=Double.NaN;  if (count > 0) {    mean=sum / count;    stdDev=Double.POSITIVE_INFINITY;    if (count > 1) {      stdDev=sumSq - (sum * sum) / count;      stdDev/=(count - 1);      if (stdDev < 0) {        stdDev=0;      }      stdDev=Math.sqrt(stdDev);    }  }}  }
class C{  public JsonElement parse(Reader json) throws JsonIOException, JsonSyntaxException {  try {    JsonReader jsonReader=new JsonReader(json);    JsonElement element=parse(jsonReader);    if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {      throw new JsonSyntaxException("Did not consume the entire document.");    }    return element;  } catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public void addRequestTags(String url,String host,String path,String method){  this.tracer.addTag(this.traceKeys.getHttp().getUrl(),url);  this.tracer.addTag(this.traceKeys.getHttp().getHost(),host);  this.tracer.addTag(this.traceKeys.getHttp().getPath(),path);  this.tracer.addTag(this.traceKeys.getHttp().getMethod(),method);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasetnodevalue.class,args);}  }
class C{  public InstancesSummaryPanel(){  GridBagLayout gbLayout=new GridBagLayout();  setLayout(gbLayout);  JLabel lab=new JLabel("Relation:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  GridBagConstraints gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.EAST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=0;  gbConstraints.gridx=0;  gbLayout.setConstraints(lab,gbConstraints);  add(lab);  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.WEST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=0;  gbConstraints.gridx=1;  gbConstraints.weightx=100;  gbLayout.setConstraints(m_RelationNameLab,gbConstraints);  add(m_RelationNameLab);  m_RelationNameLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));  lab=new JLabel("Instances:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.EAST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=1;  gbConstraints.gridx=0;  gbLayout.setConstraints(lab,gbConstraints);  add(lab);  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.WEST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=1;  gbConstraints.gridx=1;  gbConstraints.weightx=100;  gbLayout.setConstraints(m_NumInstancesLab,gbConstraints);  add(m_NumInstancesLab);  m_NumInstancesLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));  lab=new JLabel("Attributes:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.EAST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=0;  gbConstraints.gridx=2;  gbLayout.setConstraints(lab,gbConstraints);  add(lab);  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.WEST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=0;  gbConstraints.gridx=3;  gbLayout.setConstraints(m_NumAttributesLab,gbConstraints);  add(m_NumAttributesLab);  m_NumAttributesLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));  lab=new JLabel("Sum of weights:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.EAST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=1;  gbConstraints.gridx=2;  gbLayout.setConstraints(lab,gbConstraints);  add(lab);  gbConstraints=new GridBagConstraints();  gbConstraints.anchor=GridBagConstraints.WEST;  gbConstraints.fill=GridBagConstraints.HORIZONTAL;  gbConstraints.gridy=1;  gbConstraints.gridx=3;  gbLayout.setConstraints(m_sumOfWeightsLab,gbConstraints);  add(m_sumOfWeightsLab);  m_sumOfWeightsLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));}  }
class C{  public static void append(CharSequence from,File to,Charset charset) throws IOException {  write(from,to,charset,true);}  }
class C{  private List<HostStorageDomain> executeBatchHSDAddInitiatorsCommand(HDSApiClient hdsApiClient,String systemObjectID,List<HostStorageDomain> createHsdsResponseList,List<StoragePort> storagePorts,List<Initiator> initiators,String model) throws Exception {  List<HostStorageDomain> fcHsdsToAddInitiators=new ArrayList<HostStorageDomain>();  List<HostStorageDomain> iSCSIHsdsToAddInitiators=new ArrayList<HostStorageDomain>();  List<HostStorageDomain> hsdsWithAddIniResponseList=new ArrayList<HostStorageDomain>();  Map<URI,Set<String>> networkInitiatorsMap=NetworkUtil.getNetworkToInitiators(dbClient,initiators);  Map<HostStorageDomain,URI> networkToHsdObjectIdMap=getHostGroupNetworkIdMap(storagePorts,createHsdsResponseList,dbClient);  log.info("networkInitiatorsMap: {}",networkInitiatorsMap);  log.info("networkToHsdObjectIdMap :{}",networkToHsdObjectIdMap);  for (  Entry<HostStorageDomain,URI> hsdNetworkEntry : networkToHsdObjectIdMap.entrySet()) {    HostStorageDomain hsd=hsdNetworkEntry.getKey();    log.info("Processing hsd: {}",hsd.getObjectID());    HostStorageDomain hsdToAddInitiators=new HostStorageDomain(hsdNetworkEntry.getKey());    Set<String> initiatorsOnSameNetwork=networkInitiatorsMap.get(hsdNetworkEntry.getValue());    List<String> formattedInitiators=getFormattedInitiators(initiatorsOnSameNetwork);    if (hsd.getDomainType().equalsIgnoreCase(HDSConstants.HOST_GROUP_DOMAIN_TYPE)) {      List<WorldWideName> wwnList=new ArrayList(Collections2.transform(formattedInitiators,HDSUtils.fctnPortWWNToWorldWideName()));      hsdToAddInitiators.setWwnList(wwnList);      fcHsdsToAddInitiators.add(hsdToAddInitiators);    }    if (hsd.getDomainType().equalsIgnoreCase(HDSConstants.ISCSI_TARGET_DOMAIN_TYPE)) {      List<ISCSIName> iscsiNameList=new ArrayList(Collections2.transform(formattedInitiators,HDSUtils.fctnPortNameToISCSIName()));      hsdToAddInitiators.setIscsiList(iscsiNameList);      iSCSIHsdsToAddInitiators.add(hsdToAddInitiators);    }  }  if (!fcHsdsToAddInitiators.isEmpty()) {    hsdsWithAddIniResponseList.addAll(hdsApiClient.getHDSBatchApiExportManager().addWWNsToHostStorageDomain(systemObjectID,fcHsdsToAddInitiators,model));  }  if (!iSCSIHsdsToAddInitiators.isEmpty()) {    hsdsWithAddIniResponseList.addAll(hdsApiClient.getHDSBatchApiExportManager().addISCSINamesToHostStorageDomain(systemObjectID,iSCSIHsdsToAddInitiators,model));  }  if (null == hsdsWithAddIniResponseList || hsdsWithAddIniResponseList.isEmpty()) {    log.error("Batch add initiators to HSD creation failed. Aborting operation...");    throw HDSException.exceptions.notAbleToAddInitiatorsToHostStorageDomain(systemObjectID);  }  return hsdsWithAddIniResponseList;}  }
class C{  public List<String> updateAndGetMissingChildRegions(){synchronized (loggerLock) {    Set<String> childRegions=(Set<String>)ColocationHelper.getAllColocationRegions(this.region).keySet();    missingChildren.removeAll(childRegions);  }  return new ArrayList<String>(missingChildren);}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(mNoteDetailActivityTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public int flags(){  return Integer.parseInt(fields[8]);}  }
class C{  @Override synchronized public boolean isInboundDone(){  return inboundDone;}  }
class C{  public NullLiteral createNullLiteral(){  NullLiteralImpl nullLiteral=new NullLiteralImpl();  return nullLiteral;}  }
class C{  public static Notification buildIncomingCallNotification(Context context,String roomName,String matrixId,String callId){  NotificationCompat.Builder builder=new NotificationCompat.Builder(context);  builder.setWhen(System.currentTimeMillis());  builder.setContentTitle(roomName);  builder.setContentText(context.getString(R.string.incoming_call));  builder.setSmallIcon(R.drawable.incoming_call_notification_transparent);  Intent intent=new Intent(context,VectorHomeActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(VectorHomeActivity.EXTRA_CALL_SESSION_ID,matrixId);  intent.putExtra(VectorHomeActivity.EXTRA_CALL_ID,callId);  TaskStackBuilder stackBuilder=TaskStackBuilder.create(context).addParentStack(VectorHomeActivity.class).addNextIntent(intent);  PendingIntent pendingIntent=stackBuilder.getPendingIntent((new Random()).nextInt(1000),PendingIntent.FLAG_UPDATE_CURRENT);  builder.setContentIntent(pendingIntent);  Notification n=builder.build();  n.flags|=Notification.FLAG_SHOW_LIGHTS;  n.defaults|=Notification.DEFAULT_LIGHTS;  return n;}  }
class C{  public static Builder create(final BOSHClientConfig cfg){  Builder result=new Builder(cfg.getURI(),cfg.getTo());  result.bFrom=cfg.getFrom();  result.bLang=cfg.getLang();  result.bRoute=cfg.getRoute();  result.bProxyHost=cfg.getProxyHost();  result.bProxyPort=cfg.getProxyPort();  result.bSSLContext=cfg.getSSLContext();  result.bCompression=cfg.isCompressionEnabled();  return result;}  }
class C{  public final double numIncorrect(){  return totaL - numCorrect();}  }
class C{  private void loadPaySelectInfo(){  log.info("VPayPrint.loadPaySelectInfo");  if (fPaySelect.getSelectedIndex() == -1)   return;  int C_PaySelection_ID=((KeyNamePair)fPaySelect.getSelectedItem()).getKey();  loadPaySelectInfo(C_PaySelection_ID);  fBank.setText(bank);  fCurrency.setText(currency);  fBalance.setValue(balance);  loadPaymentRule();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static void integrateNetwork(final Network networkA,final Network networkB,final String prefixNodesNetworkB,final String prefixLinksNetworkB){  final NetworkFactory factory=networkA.getFactory();  log.info("Merging networks...");  final int numberOfLinksNetworkA=networkA.getLinks().size();  final int numberOfNodesNetworkA=networkA.getNodes().size();  for (  Node node : networkB.getNodes().values()) {    Id<Node> nodeId=Id.create(prefixNodesNetworkB + node.getId().toString(),Node.class);    if (!networkA.getNodes().containsKey(nodeId)) {      Node newNode=factory.createNode(nodeId,node.getCoord());      networkA.addNode(newNode);    }  }  double capacityFactor=networkA.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Link link : networkB.getLinks().values()) {    Id<Link> linkId=Id.create(prefixLinksNetworkB + link.getId().toString(),Link.class);    if (!networkA.getLinks().containsKey(linkId)) {      Id<Node> fromNodeId=Id.create(prefixNodesNetworkB + link.getFromNode().getId().toString(),Node.class);      Id<Node> toNodeId=Id.create(prefixNodesNetworkB + link.getToNode().getId().toString(),Node.class);      Link newLink=factory.createLink(linkId,networkA.getNodes().get(fromNodeId),networkA.getNodes().get(toNodeId));      newLink.setAllowedModes(link.getAllowedModes());      newLink.setCapacity(link.getCapacity() * capacityFactor);      newLink.setFreespeed(link.getFreespeed());      newLink.setLength(link.getLength());      newLink.setNumberOfLanes(link.getNumberOfLanes());      networkA.addLink(newLink);    }  }  log.info(" Merging Stats:");  log.info("  Number of links network A: " + numberOfLinksNetworkA);  log.info("  Number of nodes network A: " + numberOfNodesNetworkA);  log.info("  Number of links network B: " + networkB.getLinks().size());  log.info("  Number of nodes network B: " + networkB.getNodes().size());  log.info("  Sum of links: " + (numberOfLinksNetworkA + networkB.getLinks().size()));  log.info("  Sum of nodes: " + (numberOfNodesNetworkA + networkB.getNodes().size()));  log.info("  Number of links merged: " + networkA.getLinks().size());  log.info("  Number of nodes merged: " + networkA.getNodes().size());  log.info("Merging networks... done.");}  }
class C{  public void register(){  if (connectorRegistry != null) {    connectorRegistry.registerConector(this);  }}  }
class C{  private StringSet findTierPoliciesForSingleStorageGroup(StorageSystem storage,String storageGroup) throws Exception {  CloseableIterator<CIMObjectPath> tierPolicyRuleItr=null;  StringSet policies=new StringSet();  try {    CIMObjectPath storageGroupPath=_cimPath.getStorageGroupObjectPath(storageGroup,storage);    if (storage.checkIfVmax3()) {      CIMInstance instance=getInstance(storage,storageGroupPath,false,true,SmisConstants.PS_HOST_IO);      String policyName=SmisUtils.getSLOPolicyName(instance);      if (policyName != null) {        policies.add(policyName);      }    } else {      tierPolicyRuleItr=getAssociatorNames(storage,storageGroupPath,null,CIM_TIER_POLICY_RULE,null,null);      while (tierPolicyRuleItr.hasNext()) {        CIMObjectPath tierPolicyRulePath=tierPolicyRuleItr.next();        String policyRuleName=tierPolicyRulePath.getKey(Constants.POLICYRULENAME).getValue().toString();        if (policyRuleName != null) {          policies.add(policyRuleName);        }      }    }  }  finally {    closeCIMIterator(tierPolicyRuleItr);  }  return policies;}  }
class C{  public List<Class<?>> findAllImplementations(Class<?> interfase) throws IOException, ClassNotFoundException {  List<Class<?>> implementations=new ArrayList<>();  List<String> strings=findAllStrings(interfase.getName());  for (  String className : strings) {    Class<?> impl=_classLoader.loadClass(className);    if (!interfase.isAssignableFrom(impl)) {      throw new ClassCastException("Class not of type: " + interfase.getName());    }    implementations.add(impl);  }  return implementations;}  }
class C{  public int delete(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  if (mappedDelete == null) {    mappedDelete=MappedDelete.build(databaseType,tableInfo);  }  return mappedDelete.delete(databaseConnection,data,objectCache);}  }
class C{  private void processGetForm(HttpMessage message,int depth,String action,String baseURL,FormData formData){  String baseQuery=buildEncodedUrlQuery(formData.getFields());  if (formData.getSubmitFields().isEmpty()) {    log.debug("Submiting form with GET method and query with form parameters: " + baseQuery);    processURL(message,depth,action + baseQuery,baseURL);  } else {    for (    HtmlParameter submitField : formData.getSubmitFields()) {      String query=appendEncodedUrlQueryParameter(baseQuery,submitField);      log.debug("Submiting form with GET method and query with form parameters: " + query);      processURL(message,depth,action + query,baseURL);    }  }}  }
class C{  public TagTypeEntity createTagTypeEntity(String typeCode,String displayName,Integer orderNumber){  TagTypeEntity tagTypeEntity=new TagTypeEntity();  tagTypeEntity.setCode(typeCode);  tagTypeEntity.setOrderNumber(orderNumber);  tagTypeEntity.setDisplayName(displayName);  return tagTypeDao.saveAndRefresh(tagTypeEntity);}  }
class C{  public CudaException(String message){  super(message);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 >= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 >= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 >= constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ConfigurationDBAdapter configure() throws RuntimeException {  configure('/' + "esperio.db.cfg.xml");  return this;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  protected DispatchArgs(long timestamp,int[] listenerIds,double[] values){  this.timestamp=timestamp;  this.listenerIds=listenerIds;  this.values=values;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-17 12:29:24.894 -0500",hash_original_method="2841CE4526AD3DDF27C3902DF7F1E509",hash_generated_method="A1285FF6338BB8E873453086A167A2B8") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onGroupCollapse(int groupPosition){}  }
class C{  public static final Criterion mailContains(String value){  return new TextCriterion(value,Scope.FULL);}  }
class C{  public static short toShortFromNibbles(byte[] nibbles,int start){  return toShort(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3]);}  }
class C{  public void falsePositive() throws IOException {  closeit(null);}  }
class C{  @Inject public GOCNotifier(MetricService metricService,AnnotationService annotationService,AuditService auditService,SystemConfiguration config,Provider<EntityManager> emf){  super(metricService,annotationService,auditService,config,emf);  requireArgument(config != null,"The configuration cannot be null.");}  }
class C{  static long deltaMs(long startMs,long endMs){  BigInteger startNs=BigInteger.valueOf(TimeUnit.NANOSECONDS.convert(startMs,TimeUnit.MILLISECONDS));  BigInteger endNs=BigInteger.valueOf(TimeUnit.NANOSECONDS.convert(endMs,TimeUnit.MILLISECONDS));  BigInteger deltaNs=endNs.subtract(startNs);  if (deltaNs.signum() >= 0) {    return TimeUnit.MILLISECONDS.convert(deltaNs.min(BigInteger.valueOf(Long.MAX_VALUE)).longValue(),TimeUnit.NANOSECONDS);  }  deltaNs=deltaNs.negate();  if (deltaNs.compareTo(BigInteger.valueOf(Long.MAX_VALUE / 2)) < 0) {    return 0L;  }  BigInteger revDeltaNs=BigInteger.ONE.shiftLeft(64).subtract(deltaNs);  return TimeUnit.MILLISECONDS.convert(revDeltaNs.min(BigInteger.valueOf(Long.MAX_VALUE)).longValue(),TimeUnit.NANOSECONDS);}  }
class C{  public static void cleanDirectory(final File directory) throws IOException {  if (!directory.exists()) {    final String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    final String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  final File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  final File file : files) {    try {      forceDelete(file);    } catch (    final IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public synchronized void extendSeeMore(){  final int MAX_LINES=200;  final int ANIMATION_DELAY=0;  int maxLines;  int[] values;  String text;  if (extended) {    maxLines=descriptionLines;    values=new int[]{MAX_LINES,maxLines};    text=getString(R.string.see_more);    mArrow.setImageDrawable(getResources().getDrawable(R.drawable.ic_down_arrow));  } else {    maxLines=MAX_LINES;    values=new int[]{descriptionLines,maxLines};    text=getString(R.string.see_less);    mArrow.setImageDrawable(getResources().getDrawable(R.drawable.ic_up_arrow));  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    ObjectAnimator animation=ObjectAnimator.ofInt(mDescription,"maxLines",values);    animation.setDuration(ANIMATION_DELAY).start();  } else {    mDescription.setMaxLines(maxLines);  }  if (extended) {    mContentView.scrollTo(0,scrollPosition);  } else {    scrollPosition=mDescription.getLeft();  }  mSeeMore.setText(text);  extended=!extended;}  }
class C{  public void negBeforePos(int[] A){  int negCount=0;  for (int i=0; i < A.length; i++) {    if (A[i] < 0)     negCount++;  }  int negIndex=0;  int posIndex=negCount;  while (posIndex < n && negIndex < negCount) {    if (A[negIndex] < 0)     negIndex++; else {      int temp=A[negIndex];      A[negIndex]=A[posIndex];      A[posIndex]=temp;      posIndex++;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonegetparentnull.class,args);}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  public LLXY(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);}  }
class C{  public void print(float x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  private static Stream<File> extractJarNames(File war){  try (JarFile warContents=new JarFile(war)){    return warContents.stream().filter(null).map(null).collect(Collectors.toList()).stream();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public String nextElement(){  String retValue="";  for (int i=0; i < m_N; i++) {    retValue+=" " + m_SplitString[m_CurrentPosition + i];  }  m_CurrentPosition++;  if (m_CurrentPosition + m_N - 1 == m_MaxPosition) {    m_CurrentPosition=0;    m_N--;  }  return retValue.trim();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  attrList=docType.getAttributes();  assertNull("doctypeAttributesNull",attrList);}  }
class C{  public boolean isNetPath(){  return _is_net_path || (_authority != null);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + toString());}  }
class C{  public StepPattern(int whatToShow,String namespace,String name,int axis,int axisForPredicate){  super(whatToShow,namespace,name);  m_axis=axis;}  }
class C{  private static void cleanStaleClusterReferences(ExportGroup exportGroup,DbClient dbClient){  StringSet exportGroupInitiators=exportGroup.getInitiators();  if (!CollectionUtils.isEmpty(exportGroup.getClusters()) && !CollectionUtils.isEmpty(exportGroupInitiators)) {    Set<String> egClusterURIs=new HashSet<>();    Collection<Host> hosts=Collections2.transform(exportGroup.getHosts(),CommonTransformerFunctions.fctnStringToHost(dbClient));    for (    Host host : hosts) {      if (host.getCluster() != null) {        egClusterURIs.add(host.getCluster().toString());      }    }    Set<String> staleClusters=Sets.difference(exportGroup.getClusters(),egClusterURIs);    if (!CollectionUtils.isEmpty(staleClusters)) {      Collection<URI> staleClusterURIs=Collections2.transform(staleClusters,CommonTransformerFunctions.FCTN_STRING_TO_URI);      exportGroup.removeClusters(new ArrayList<>(staleClusterURIs));      _log.info("Stale cluster references {} will be removed from Export Group {}",staleClusterURIs,exportGroup.getId());    }  }}  }
class C{  public WikibasePoint(String[] components,String globe,CoordinateOrder order){  if (order == CoordinateOrder.LAT_LONG) {    latitude=components[0];    longitude=components[1];  } else {    longitude=components[0];    latitude=components[1];  }  this.globe=globe;}  }
class C{  public BooleanProperty isLayerOn(){  return board.isLayerOn();}  }
class C{  public int[] recurse(Orange orange,int[] message,int level) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): BEGIN");  int[] response=orange.recurse(this,message,level - 1);  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): END");  return response;}  }
class C{  public int size(){  return this.values.size();}  }
class C{  private String sanitize(String s){  int len=s.length();  StringBuilder sb=new StringBuilder(len);  for (int i=0; i < len; i++) {    char ch=s.charAt(i);    if (ch < ' ' || ":\\/]".indexOf(ch) != -1) {      sb.append('_');    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  NodeRepresentation subNodeRep(SemanticNode sn,Vector<NodeRepresentation> vec,NodeRepresentation father,NodeTextRep setNodeText,Decomposition decomp,boolean isAssumption){  NodeRepresentation result=new NodeRepresentation();  result.parentNode=father;  result.setParentVector(vec);  result.semanticNode=sn;  result.isPrimed=this.isPrimed;  result.isSubexpressionName=this.isSubexpressionName;  result.isCreated=this.isCreated;  NodeTextRep nodeTextRep=setNodeText;  if (nodeTextRep == null) {    nodeTextRep=this.subNodeText(sn);  } else {    result.isSubexpressionName=true;  }  result.nodeText=nodeTextRep.nodeText;  result.mapping=nodeTextRep.mapping;  result.instantiationSubstitutions=this.instantiationSubstitutions;switch (sn.getKind()) {case ASTConstants.OpApplKind:    result.nodeType=EXPR_NODE;  result.decomposition=decompose(result,decomp,isAssumption);if (result.decomposition == null) {  result.nodeSubtype=OTHER_TYPE;} else {  result.nodeSubtype=result.decomposition.type;}break;case ASTConstants.NewSymbKind:result.nodeType=NEW_NODE;NewSymbNode newNode=(NewSymbNode)sn;result.newId=newNode.getOpDeclNode().getName().toString();break;case ASTConstants.LeafProofKind:result.nodeType=PROOF_NODE;break;default :result.nodeType=OTHER_NODE;}return result;}  }
class C{  public synchronized void onPendingMessageRegistered(){  pendingMsgsRegistered++;}  }
class C{  private static Set<BreakpointAddress> convertAddresses(final List<TracePoint> addresses){  final Set<BreakpointAddress> adds=new HashSet<BreakpointAddress>();  for (  final TracePoint address : addresses) {    if (address.getModule() == null) {      adds.add(new BreakpointAddress(null,new UnrelocatedAddress(new CAddress(address.getAddress().toLong()))));    } else {      adds.add(new BreakpointAddress(address.getModule().getNative(),new UnrelocatedAddress(new CAddress(address.getAddress().toLong()))));    }  }  return adds;}  }
class C{  public void replaceTables(DatabaseSession session,JPAMSchemaManager schemaManager){  replaceTables(session,schemaManager,true,true);}  }
class C{  public Classification(Collection<T> featureset,K category){  this(featureset,category,1.0f);}  }
class C{  private static String deleteAny(final String inString,final String charsToDelete){  if (!hasLength(inString) || !hasLength(charsToDelete)) {    return inString;  }  final StringBuffer out=new StringBuffer();  for (int i=0; i < inString.length(); i++) {    final char c=inString.charAt(i);    if (charsToDelete.indexOf(c) == -1) {      out.append(c);    }  }  return out.toString();}  }
class C{  public ExpressionStatement toStatement(){  return ast.newExpressionStatement(inner);}  }
class C{  @Override public boolean pruneValues(double threshold){  return false;}  }
class C{  public static int executeUpdate(String sql){  return executeUpdate(sql,null,false,null);}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public NodeBase find(Interval searchInterval){  int subnodeIndex=getSubnodeIndex(searchInterval,centre);  if (subnodeIndex == -1)   return this;  if (subnode[subnodeIndex] != null) {    Node node=subnode[subnodeIndex];    return node.find(searchInterval);  }  return this;}  }
class C{  public void start(){  new Thread(this).start();}  }
class C{  public static HashMap<CellIndex,Double> convert2DDoubleArrayToHashMap(double[][] matrix){  HashMap<CellIndex,Double> hmMatrix=new HashMap<CellIndex,Double>();  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      if (matrix[i][j] != 0)       hmMatrix.put(new CellIndex(i + 1,j + 1),matrix[i][j]);    }  }  return hmMatrix;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void testSetErrorWithCharSequenceAndDrawableParameter(){  CharSequence error="error";  Drawable icon=ContextCompat.getDrawable(getContext(),android.R.drawable.ic_dialog_alert);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.setError(error,icon);  assertEquals(error,abstractValidateableView.getError());  assertTrue(abstractValidateableView.isActivated());  assertTrue(abstractValidateableView.getView().isActivated());}  }
class C{  public KMLParserContext(String defaultNamespace){  this(null,defaultNamespace);}  }
class C{  public void doFilter(HttpExchange t,Filter.Chain chain) throws IOException {  if (authenticator != null) {    Authenticator.Result r=authenticator.authenticate(t);    if (r instanceof Authenticator.Success) {      Authenticator.Success s=(Authenticator.Success)r;      ExchangeImpl e=ExchangeImpl.get(t);      e.setPrincipal(s.getPrincipal());      chain.doFilter(t);    } else     if (r instanceof Authenticator.Retry) {      Authenticator.Retry ry=(Authenticator.Retry)r;      consumeInput(t);      t.sendResponseHeaders(ry.getResponseCode(),-1);    } else     if (r instanceof Authenticator.Failure) {      Authenticator.Failure f=(Authenticator.Failure)r;      consumeInput(t);      t.sendResponseHeaders(f.getResponseCode(),-1);    }  } else {    chain.doFilter(t);  }}  }
class C{  void zApplyDisplayToggleTimeMenuButton(){  if (parent == null) {    return;  }  parent.getComponentToggleTimeMenuButton().setEnabled(displayToggleTimeMenuButton);  parent.getComponentToggleTimeMenuButton().setVisible(displayToggleTimeMenuButton);}  }
class C{  public String convertPrimitiveTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static void removeNotUsedStopFacilities(TransitSchedule schedule){  log.info("... Removing not used stop facilities");  int removed=0;  Set<Id<TransitStopFacility>> usedStopFacilities=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      for (      TransitRouteStop stop : route.getStops()) {        usedStopFacilities.add(stop.getStopFacility().getId());      }    }  }  Set<TransitStopFacility> unusedStopFacilites=new HashSet<>();  for (  Id<TransitStopFacility> facilityId : schedule.getFacilities().keySet()) {    if (!usedStopFacilities.contains(facilityId)) {      unusedStopFacilites.add(schedule.getFacilities().get(facilityId));    }  }  for (  TransitStopFacility facility : unusedStopFacilites) {    schedule.removeStopFacility(facility);    removed++;  }  log.info("    " + removed + " stop facilities removed");}  }
class C{  public String next(Pattern pattern){  checkOpen();  checkNotNull(pattern);  matchSuccessful=false;  saveCurrentStatus();  if (!setTokenRegion()) {    recoverPreviousStatus();    throw new NoSuchElementException();  }  matcher.usePattern(pattern);  if (!matcher.matches()) {    recoverPreviousStatus();    throw new InputMismatchException();  }  matchSuccessful=true;  return matcher.group();}  }
class C{  public void put(IPRangeNode<Map> ipr){  this.put(ipr,true);}  }
class C{  @Override public void printStackTrace(PrintStream s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
class C{  @Override public IFileTransfer transferFileToGroupChat(final String chatId,Uri file,boolean attachFileIcon) throws RemoteException {  return transferFileToGroupChat2(chatId,file,Disposition.ATTACH.toInt(),attachFileIcon);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WProcess.init");}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws UncheckedIOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    parser.enableOptimization(1);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  private int channelToFrequency(int chan){  if (chan == 14)   return 2484; else   if (chan < 14)   return 2407 + chan * 5; else   return 0;}  }
class C{  public void failed(Throwable e,FrameworkMethod method){}  }
class C{  public final boolean canBeSeenBy(PackageBinding invocationPackage){  if (isPublic())   return true;  if (isPrivate())   return false;  return invocationPackage == this.fPackage;}  }
class C{  public String statistics(){  DecimalFormat formatter=new DecimalFormat("#,###");  DecimalFormat floatFormatter=new DecimalFormat("#,###.00");  return String.format("min %s | avg %s | max %s | stddev %s msgs",formatter.format(minRate()),formatter.format(avgRate()),formatter.format(maxRate()),floatFormatter.format(stdDev()));}  }
class C{  public boolean equals(Object o){  return Vector3.equals(this,o);}  }
class C{  public void addFeature(Feature f){  f.strId2IdxAdd(fmap);  features.add(f);}  }
class C{  protected Object tokenAfterComma(){  int c=next();  if (c == ',' || c == '\n') {    putback(c);    return EMPTY;  } else   if (c == '"')   return tokenString(next()); else   if (c == '\\')   return tokenString(c); else   if ((c == '-' || c == '.' || isDigit(c)) && !numberReadAsString)   return tokenNumber(c); else   if (c == -1)   return EOF; else   return tokenAny(c);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TestGenerationResult generateTestSuite(){  LoggingUtils.getEvoLogger().info("* Analyzing classpath: ");  ClientServices.getInstance().getClientNode().changeState(ClientState.INITIALIZATION);  LoopCounter.getInstance().setActive(false);  TestCaseExecutor.initExecutor();  try {    String cp=ClassPathHandler.getInstance().getTargetProjectClasspath();    DefaultTestCase test=buildLoadTargetClassTestCase(Properties.TARGET_CLASS);    ExecutionResult execResult=TestCaseExecutor.getInstance().execute(test,Integer.MAX_VALUE);    if (hasThrownInitializerError(execResult)) {      writeJUnitTestSuiteForFailedInitialization();      ExceptionInInitializerError ex=getInitializerError(execResult);      throw ex;    } else     if (!execResult.getAllThrownExceptions().isEmpty()) {      Throwable t=execResult.getAllThrownExceptions().iterator().next();      throw t;    }    DependencyAnalysis.analyzeClass(Properties.TARGET_CLASS,Arrays.asList(cp.split(File.pathSeparator)));    LoggingUtils.getEvoLogger().info("* Finished analyzing classpath");  } catch (  Throwable e) {    LoggingUtils.getEvoLogger().error("* Error while initializing target class: " + (e.getMessage() != null ? e.getMessage() : e.toString()));    logger.error("Problem for " + Properties.TARGET_CLASS + ". Full stack:",e);    return TestGenerationResultBuilder.buildErrorResult(e.getMessage() != null ? e.getMessage() : e.toString());  } finally {    if (Properties.RESET_STATIC_FIELDS) {      configureClassReInitializer();    }    LoopCounter.getInstance().setActive(true);  }  ObjectPoolManager.getInstance();  LoggingUtils.getEvoLogger().info("* Generating tests for class " + Properties.TARGET_CLASS);  printTestCriterion();  if (!Properties.hasTargetClassBeenLoaded()) {    return TestGenerationResultBuilder.buildErrorResult("Could not load target class");  }  if (Properties.isRegression() && Properties.REGRESSION_SKIP_SIMILAR) {    if (Properties.getTargetClassRegression(true) == null) {      Properties.IGNORE_MISSING_STATISTICS=false;      logger.error("class {} was not on the regression projectCP",Properties.TARGET_CLASS);      return TestGenerationResultBuilder.buildErrorResult("Could not load target regression class");    }    if (!ResourceList.getInstance(TestGenerationContext.getInstance().getRegressionClassLoaderForSUT()).hasClass(Properties.TARGET_CLASS)) {      Properties.IGNORE_MISSING_STATISTICS=false;      logger.error("class {} was not on the regression_cp",Properties.TARGET_CLASS);      return TestGenerationResultBuilder.buildErrorResult("Class " + Properties.TARGET_CLASS + " did not exist on regression classpath");    }    boolean areDifferent=RegressionClassDiff.differentAcrossClassloaders(Properties.TARGET_CLASS);    if (!areDifferent) {      Properties.IGNORE_MISSING_STATISTICS=false;      logger.error("class {} was equal on both versions",Properties.TARGET_CLASS);      return TestGenerationResultBuilder.buildErrorResult("Class " + Properties.TARGET_CLASS + " was not changed between the two versions");    }  }  if (Properties.isRegression() && Properties.REGRESSION_SKIP_DIFFERENT_CFG) {    boolean sameBranches=RegressionClassDiff.sameCFG();    if (!sameBranches) {      Properties.IGNORE_MISSING_STATISTICS=false;      logger.error("Could not match the branches across the two versions.");      return TestGenerationResultBuilder.buildErrorResult("Could not match the branches across the two versions.");    }  }  TestSuiteChromosome testCases=generateTests();  postProcessTests(testCases);  ClientServices.getInstance().getClientNode().publishPermissionStatistics();  PermissionStatistics.getInstance().printStatistics(LoggingUtils.getEvoLogger());  TestGenerationResult result=writeJUnitTestsAndCreateResult(testCases);  TestCaseExecutor.pullDown();  ClientServices.getInstance().getClientNode().changeState(ClientState.WRITING_STATISTICS);  LoggingUtils.getEvoLogger().info("* Done!");  LoggingUtils.getEvoLogger().info("");  return result;}  }
class C{  public SaaSApplicationException(Object[] params){  super();  init(params);}  }
class C{  public static GeoTimeSerie bSAX(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,boolean standardizePAA) throws WarpScriptException {  if (!GTSHelper.isBucketized(gts) || (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type)) {    throw new WarpScriptException("Function can only be applied to numeric, bucketized, filled geo time series.");  }  if (windowLen % wordLen != 0) {    throw new WarpScriptException("Wordlen MUST divide windowlen.");  }  int levels=0;  if (0 == alphabetSize) {    throw new WarpScriptException("Alphabet size MUST be a power of two.");  }  while (0 == (alphabetSize & 1)) {    levels++;    alphabetSize>>>=1;  }  if (1 != alphabetSize) {    throw new WarpScriptException("Alphabet size MUST be a power of two.");  }  if (levels < 1 || levels > SAXUtils.SAX_MAX_LEVELS) {    throw new WarpScriptException("Alphabet size MUST be a power of two between 2 and 2^" + SAXUtils.SAX_MAX_LEVELS);  }  int paaLen=windowLen / wordLen;  GTSHelper.sort(gts);  GeoTimeSerie saxGTS=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  saxGTS.setMetadata(gts.getMetadata());  int[] symbols=new int[wordLen];  double paaSum[]=new double[wordLen];  for (int i=0; i < gts.values - windowLen + 1; i++) {    double sum=0.0D;    double sumsq=0.0D;    for (int w=0; w < wordLen; w++) {      paaSum[w]=0.0D;      for (int k=0; k < paaLen; k++) {        paaSum[w]+=TYPE.LONG == gts.type ? gts.longValues[i + w * paaLen + k] : gts.doubleValues[i + w * paaLen + k];      }      if (!standardizePAA) {        continue;      }      double mean=paaSum[w] / paaLen;      sum+=mean;      sumsq+=mean * mean;    }    double mu=0.0D;    double variance=0.0D;    double sigma=0.0D;    if (standardizePAA) {      mu=sum / wordLen;      variance=(sumsq / wordLen) - (sum * sum) / ((double)wordLen * (double)wordLen);      if (wordLen > 1) {        variance=variance * wordLen / (wordLen - 1.0D);      }      sigma=Math.sqrt(variance);    }    for (int w=0; w < wordLen; w++) {      if (standardizePAA) {        symbols[w]=SAXUtils.SAX(levels,sigma != 0D ? ((paaSum[w] / paaLen) - mu) / sigma : ((paaSum[w] / paaLen) - mu));      } else {        symbols[w]=SAXUtils.SAX(levels,paaSum[w] / paaLen);      }    }    String word=new String(OrderPreservingBase64.encode(SAXUtils.bSAX(levels,symbols)),Charsets.US_ASCII);    GTSHelper.setValue(saxGTS,gts.ticks[i],word);  }  return saxGTS;}  }
class C{  public boolean isReady(){  return isReady;}  }
class C{  public static void main(String[] args){  CarTimeEstimator cte=null;  long tNow=System.currentTimeMillis();  int numberOfArguments=8;  if (args.length != numberOfArguments) {    throw new RuntimeException("Incorrect number of arguments provided.");  } else {    cte=new CarTimeEstimator();  }  boolean empties=cte.estimateCarTime(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],true);  String result=empties ? "Unsuccessful" : "Successful";  double time=(System.currentTimeMillis() - tNow) / 1000.0;  log.info("----------------------------------------------------------");  log.info(String.format("Process complete for %s (%s)",args[1],result));  log.info("----------------------------------------------------------");  log.info(String.format("        Time taken: %04.2fs",time));  log.info("           Network: " + args[0]);  log.info("         Linkstats: " + args[1]);  log.info("        Population: " + args[2]);  log.info("            Events: " + args[3]);  log.info("             Zones: " + args[4] + " (Field "+ args[5]+ ")");  log.info("             Hours: " + args[6]);  log.info(" Output written to: " + args[7]);  log.info("==========================================================");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  protected void copyProxyCookie(HttpServletRequest servletRequest,HttpServletResponse servletResponse,Header header){  List<HttpCookie> cookies=HttpCookie.parse(header.getValue());  String path=getServletContext().getServletContextName();  if (path == null) {    path="";  }  path+=servletRequest.getServletPath();  for (  HttpCookie cookie : cookies) {    String proxyCookieName=getCookieNamePrefix() + cookie.getName();    Cookie servletCookie=new Cookie(proxyCookieName,cookie.getValue());    servletCookie.setComment(cookie.getComment());    servletCookie.setMaxAge((int)cookie.getMaxAge());    servletCookie.setPath(path);    servletCookie.setSecure(cookie.getSecure());    servletCookie.setVersion(cookie.getVersion());    servletResponse.addCookie(servletCookie);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public VehicleStateAdministrator(Vehicle vehicle,SeatAssignmentRule rule){  this.vehicle=vehicle;  this.rule=rule;  this.sittingPersons=new ArrayList<Id>();  this.standingPersons=new ArrayList<Id>();  this.boardingAtFacility=new ArrayList<Id>();  this.alightingAtFacility=new ArrayList<Id>();  this.facilityStates=new LinkedHashMap<Id,BusFacilityInteractionEvent>();  this.facilityStatesForRouteStartTimes=new LinkedHashMap<Double,LinkedHashMap<Id,BusFacilityInteractionEvent>>();}  }
class C{  public void test_ticket_1202g() throws Exception {  new TestHelper("ticket-1202-group05-modified2","ticket-1202-group05-modified2.rq","ticket-1202-group05-modified2.ttl","ticket-1202-group05-modified2.srx").runTest();}  }
class C{  public Zipper<A> replaceBefore(A a) throws NoSuchElementException {  return new Zipper<>(front.tail().plus(a),back,position);}  }
class C{  public CommonGramsQueryFilter(CommonGramsFilter input){  super(input);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.345 -0500",hash_original_method="B7263687C68C93D629EB8C9647AA7093",hash_generated_method="CD4254960B8C26FE0B0A2F5E8C89E642") public final static boolean isNonSeparator(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == WILD || c == WAIT || c == PAUSE;}  }
class C{  public static float clamp(final float input,final float lowerBound,final float upperBound){  if (input < lowerBound) {    return lowerBound;  } else   if (input > upperBound) {    return upperBound;  }  return input;}  }
class C{  public CompositeKey(Map<? extends Attribute<T,?>,?> values){  super(values.size());  if (values.isEmpty()) {    throw new IllegalArgumentException();  }  int index=0;  for (  Map.Entry<? extends Attribute<T,?>,?> entry : values.entrySet()) {    set(index++,(Expression<?>)entry.getKey(),entry.getValue());  }}  }
class C{  public void mouseExited(MouseEvent event){  boolean shouldHide=true;  if (insideComponent == null) {  }  if (window != null && event.getSource() == window && insideComponent != null) {    Container insideComponentWindow=insideComponent.getTopLevelAncestor();    if (insideComponentWindow != null) {      Point location=event.getPoint();      SwingUtilities.convertPointToScreen(location,window);      location.x-=insideComponentWindow.getX();      location.y-=insideComponentWindow.getY();      location=SwingUtilities.convertPoint(null,location,insideComponent);      if (location.x >= 0 && location.x < insideComponent.getWidth() && location.y >= 0 && location.y < insideComponent.getHeight()) {        shouldHide=false;      } else {        shouldHide=true;      }    }  } else   if (event.getSource() == insideComponent && tipWindow != null) {    Window win=SwingUtilities.getWindowAncestor(insideComponent);    if (win != null) {      Point location=SwingUtilities.convertPoint(insideComponent,event.getPoint(),win);      Rectangle bounds=insideComponent.getTopLevelAncestor().getBounds();      location.x+=bounds.x;      location.y+=bounds.y;      Point loc=new Point(0,0);      SwingUtilities.convertPointToScreen(loc,tip);      bounds.x=loc.x;      bounds.y=loc.y;      bounds.width=tip.getWidth();      bounds.height=tip.getHeight();      if (location.x >= bounds.x && location.x < (bounds.x + bounds.width) && location.y >= bounds.y && location.y < (bounds.y + bounds.height)) {        shouldHide=false;      } else {        shouldHide=true;      }    }  }  if (shouldHide) {    enterTimer.stop();    if (insideComponent != null) {      insideComponent.removeMouseMotionListener(this);    }    insideComponent=null;    toolTipText=null;    mouseEvent=null;    hideTipWindow();    exitTimer.restart();  }}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public AbstractIntList partFromTo(int from,int to){  if (size == 0)   return new IntArrayList(0);  checkRangeFromTo(from,to,size);  int[] part=new int[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new IntArrayList(part);}  }
class C{  public static String processStatements(String sqlStatements,boolean allowDML){  if (sqlStatements == null || sqlStatements.length() == 0)   return "";  StringBuffer result=new StringBuffer();  StringTokenizer st=new StringTokenizer(sqlStatements,";",false);  while (st.hasMoreTokens()) {    result.append(processStatement(st.nextToken(),allowDML));    result.append(Env.NL);  }  return result.toString();}  }
class C{  public boolean isPhiLoopIterator(Operand op){  return op.similar(phiLoopIterator);}  }
class C{  public RangeQueryBuilder gte(double from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  public void sort(){  if (left > right) {    float temp=left;    left=right;    right=temp;  }  if (top > bottom) {    float temp=top;    top=bottom;    bottom=temp;  }}  }
class C{  public String toString(){  String result;  if (getUseLowerOrder())   result="Normalized Poly Kernel with lower order: K(x,y) = (<x,y>+1)^" + getExponent() + "/"+ "((<x,x>+1)^"+ getExponent()+ "*"+ "(<y,y>+1)^"+ getExponent()+ ")^(1/2)"; else   result="Normalized Poly Kernel: K(x,y) = <x,y>^" + getExponent() + "/"+ "(<x,x>^"+ getExponent()+ "*"+ "<y,y>^"+ getExponent()+ ")^(1/2)";  return result;}  }
class C{  public boolean includesMin(){  return minInclusive;}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude){  return fromLatLon(latitude,longitude,null,5);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.COMMA_EXPRESSION__EXPRS:    return exprs != null && !exprs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @POST @Path("/key") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public String rotateIPsecKey(){  ipsecMgr.verifyIPsecOpAllowable();  String version=ipsecMgr.rotateKey();  auditMgr.recordAuditLog(null,null,IPSEC_SERVICE_TYPE,OperationTypeEnum.UPDATE_SYSTEM_PROPERTY,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,"config_version=" + version);  return version;}  }
class C{  private void processDeletedIndices(ClusterChangedEvent event){  RestoreInProgress restore=event.state().custom(RestoreInProgress.TYPE);  if (restore == null) {    return;  }  if (!event.indicesDeleted().isEmpty()) {    for (    RestoreInProgress.Entry entry : restore.entries()) {      List<ShardId> shardsToFail=null;      for (      ImmutableMap.Entry<ShardId,ShardRestoreStatus> shard : entry.shards().entrySet()) {        if (!shard.getValue().state().completed()) {          if (!event.state().metaData().hasIndex(shard.getKey().getIndex())) {            if (shardsToFail == null) {              shardsToFail=new ArrayList<>();            }            shardsToFail.add(shard.getKey());          }        }      }      if (shardsToFail != null) {        for (        ShardId shardId : shardsToFail) {          logger.trace("[{}] failing running shard restore [{}]",entry.snapshotId(),shardId);          updateRestoreStateOnMaster(new UpdateIndexShardRestoreStatusRequest(entry.snapshotId(),shardId,new ShardRestoreStatus(null,RestoreInProgress.State.FAILURE,"index was deleted")));        }      }    }  }}  }
class C{  public PeriodicSync(Account account,String authority,Bundle extras,long period){  this.account=account;  this.authority=authority;  this.extras=new Bundle(extras);  this.period=period;}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null == m_entities) {    m_entities=new Vector();  }  try {    systemId=SystemIDResolver.getAbsoluteURI(systemId,getDocumentBaseURI());  } catch (  Exception e) {    throw new org.xml.sax.SAXException(e);  }  m_entities.addElement(publicId);  m_entities.addElement(systemId);  m_entities.addElement(notationName);  m_entities.addElement(name);}  }
class C{  private void storeResult(@NonNull final OperationDelivery<?> operationDelivery){  logd("store delivery " + operationDelivery);  mStoredResults.add(new SoftReference<OperationDelivery<?>>(operationDelivery));}  }
class C{  void trackProcesses(Instance instance){  dockerMachines.put(instance.getId(),instance);}  }
class C{  public long[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public DOMPGPData(byte[] keyPacket,List<? extends XMLStructure> other){  if (keyPacket == null) {    throw new NullPointerException("keyPacket cannot be null");  }  if (other == null || other.isEmpty()) {    this.externalElements=Collections.emptyList();  } else {    this.externalElements=Collections.unmodifiableList(new ArrayList<XMLStructure>(other));    for (int i=0, size=this.externalElements.size(); i < size; i++) {      if (!(this.externalElements.get(i) instanceof XMLStructure)) {        throw new ClassCastException("other[" + i + "] is not a valid PGPData type");      }    }  }  this.keyPacket=(byte[])keyPacket.clone();  checkKeyPacket(keyPacket);  this.keyId=null;}  }
class C{  public String toString(boolean withData){  StringBuffer sb=new StringBuffer("PrintDataGroup[");  sb.append("Groups=");  for (int i=0; i < m_groups.size(); i++) {    if (i != 0)     sb.append(",");    sb.append(m_groups.get(i));  }  if (withData) {    Iterator it=m_groupMap.keySet().iterator();    while (it.hasNext()) {      Object key=it.next();      Object value=m_groupMap.get(key);      sb.append(":").append(key).append("=").append(value);    }  }  sb.append(";Functions=");  for (int i=0; i < m_functions.size(); i++) {    if (i != 0)     sb.append(",");    sb.append(m_functions.get(i));  }  if (withData) {    Iterator it=m_groupFunction.keySet().iterator();    while (it.hasNext()) {      Object key=it.next();      Object value=m_groupFunction.get(key);      sb.append(":").append(key).append("=").append(value);    }  }  sb.append("]");  return sb.toString();}  }
class C{  public GuzzTransactionManager(GuzzContext guzzContext){  this(guzzContext.getTransactionManager());}  }
class C{  public boolean update(Object atom){  HGHandle h=getHandle(atom);  if (h == null)   throw new HGException("Could not find HyperGraph handle for atom " + atom); else   return replace(h,atom,getType(h));}  }
class C{  protected SecureDocumentBuilderFactory(DocumentBuilderFactory factory){  this.factory=factory;  factory.setValidating(false);  try {    factory.setXIncludeAware(false);  } catch (  UnsupportedOperationException e) {  }catch (  NoSuchMethodError e) {  }  try {    factory.setAttribute("http://xml.org/sax/features/external-general-entities",false);  } catch (  IllegalArgumentException e) {  }  try {    factory.setAttribute("http://xml.org/sax/features/external-parameter-entities",false);  } catch (  IllegalArgumentException e) {  }  try {    factory.setAttribute("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);  } catch (  IllegalArgumentException e) {  }  try {    factory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING,Boolean.TRUE);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean isComplete(){  for (  SHParameter param : component.getParameters()) {    if (!component.isOptionalParameter(param.getPredicate()) && !constraint.hasProperty(param.getPredicate())) {      return false;    }  }  if (SHFactory.isPropertyConstraint(constraint)) {    if (!constraint.hasProperty(SH.path) && !constraint.hasProperty(SH.predicate)) {      return false;    }  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean sendDTMF(BluetoothDevice device,byte code){  if (DBG)   log("sendDTMF()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.sendDTMF(device,code);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  private boolean accept(char acceptableSymbol){  return data[index] == acceptableSymbol;}  }
class C{  void implCompress(byte[] buf,int ofs){  b2iBig64(buf,ofs,W);  for (int t=16; t < ITERATION; t++) {    W[t]=lf_delta1(W[t - 2]) + W[t - 7] + lf_delta0(W[t - 15])+ W[t - 16];  }  int a=state[0];  int b=state[1];  int c=state[2];  int d=state[3];  int e=state[4];  int f=state[5];  int g=state[6];  int h=state[7];  for (int i=0; i < ITERATION; i++) {    int T1=h + lf_sigma1(e) + lf_ch(e,f,g)+ ROUND_CONSTS[i]+ W[i];    int T2=lf_sigma0(a) + lf_maj(a,b,c);    h=g;    g=f;    f=e;    e=d + T1;    d=c;    c=b;    b=a;    a=T1 + T2;  }  state[0]+=a;  state[1]+=b;  state[2]+=c;  state[3]+=d;  state[4]+=e;  state[5]+=f;  state[6]+=g;  state[7]+=h;}  }
class C{  public int loadUnsigned16(int addr){  return loadUnsigned16(addr,AccessSource.CODE);}  }
class C{  public static void reprojectUtmToGeographic(AVList values,int mode){  double False_Easting=500000;  double False_Northing=0;  double Scale=0.9996;  Earth earth=new Earth();  if (values == null) {    String message=Logging.getMessage("nullValue.AVListIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  BufferedImage image=(BufferedImage)values.getValue(AVKey.IMAGE);  int width=image.getWidth();  int height=image.getHeight();  BufferedImage biOut;  if ((image.getColorModel() != null) && (image.getColorModel() instanceof IndexColorModel)) {    biOut=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB,(IndexColorModel)image.getColorModel());  } else {    biOut=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  }  double xPixelSize=0;  double yPixelSize=0;  Object o=values.getValue(WorldFile.WORLD_FILE_X_PIXEL_SIZE);  if (o != null && o instanceof Double)   xPixelSize=(Double)o;  o=values.getValue(WorldFile.WORLD_FILE_Y_PIXEL_SIZE);  if (o != null && o instanceof Double)   yPixelSize=(Double)o;  double xLocation=(Double)values.getValue(WorldFile.WORLD_FILE_X_LOCATION);  double yLocation=(Double)values.getValue(WorldFile.WORLD_FILE_Y_LOCATION);  Integer zone=(Integer)values.getValue(AVKey.PROJECTION_ZONE);  String hemisphere=(String)values.getValue(AVKey.PROJECTION_HEMISPHERE);  UTMCoord upperLeft=UTMCoord.fromUTM(zone,hemisphere,xLocation,yLocation);  UTMCoord utmUpperLeft=UTMCoord.fromUTM(zone,hemisphere,upperLeft.getEasting() - xPixelSize * .5,upperLeft.getNorthing() - yPixelSize * .5);  UTMCoord utmLowerRight=UTMCoord.fromUTM(zone,hemisphere,utmUpperLeft.getEasting() + (width * xPixelSize),utmUpperLeft.getNorthing() + (height * yPixelSize));  UTMCoord utmLowerLeft=UTMCoord.fromUTM(zone,upperLeft.getHemisphere(),utmUpperLeft.getEasting(),utmLowerRight.getNorthing());  UTMCoord utmUpperRight=UTMCoord.fromUTM(zone,upperLeft.getHemisphere(),utmLowerRight.getEasting(),utmUpperLeft.getNorthing());  Angle rightExtent=Angle.max(utmUpperRight.getLongitude(),utmLowerRight.getLongitude());  Angle leftExtent=Angle.min(utmLowerLeft.getLongitude(),utmUpperLeft.getLongitude());  Angle topExtent=Angle.max(utmUpperRight.getLatitude(),utmUpperLeft.getLatitude());  Angle bottomExtent=Angle.min(utmLowerRight.getLatitude(),utmLowerLeft.getLatitude());  Sector sector=new Sector(bottomExtent,topExtent,leftExtent,rightExtent);  values.setValue(AVKey.SECTOR,sector);  double yPixel=(bottomExtent.getDegrees() - topExtent.getDegrees()) / height;  double xPixel=(rightExtent.getDegrees() - leftExtent.getDegrees()) / width;  double topExtent2=sector.getMaxLatitude().getDegrees() + (yPixel * .5);  double leftExtent2=sector.getMinLongitude().getDegrees() + (xPixel * .5);  TMCoord tmUpperLeft=TMCoord.fromLatLon(utmUpperLeft.getLatitude(),utmUpperLeft.getLongitude(),earth,null,null,Angle.fromDegrees(0.0),utmUpperLeft.getCentralMeridian(),False_Easting,False_Northing,Scale);  double srcTop=tmUpperLeft.getNorthing() + (yPixelSize * .5);  double srcLeft=tmUpperLeft.getEasting() + (xPixelSize * .5);  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      double yTarget=topExtent2 + y * yPixel;      double xTarget=leftExtent2 + x * xPixel;      TMCoord TM=TMCoord.fromLatLon(Angle.fromDegreesLatitude(yTarget),Angle.fromDegreesLongitude(xTarget),earth,null,null,Angle.fromDegrees(0.0),utmUpperLeft.getCentralMeridian(),False_Easting,False_Northing,Scale);      double distFromCornerX=TM.getEasting() - srcLeft;      double distFromCornerY=srcTop - TM.getNorthing();      long rx=Math.round(distFromCornerX / Math.abs(xPixelSize));      long ry=Math.round(distFromCornerY / Math.abs(yPixelSize));      if (mode == ImageUtil.BILINEAR_INTERPOLATION) {        double rxD=distFromCornerX / Math.abs(xPixelSize);        double ryD=distFromCornerY / Math.abs(yPixelSize);        int iX=(int)Math.floor(rxD);        int iY=(int)Math.floor(ryD);        double dx=rxD - iX;        double dy=ryD - iY;        if ((iX > 0) && (iY > 0))         if ((iX < width - 1) && (iY < height - 1)) {          int a=image.getRGB(iX,iY);          int b=image.getRGB(iX + 1,iY);          int c=image.getRGB(iX,iY + 1);          int d=image.getRGB(iX + 1,iY + 1);          int sum=interpolateColor(dx,dy,a,b,c,d);          biOut.setRGB(x,y,Math.round(sum));        } else         biOut.setRGB(x,y,0);      } else {        if ((rx > 0) && (ry > 0))         if ((rx < width) && (ry < height))         biOut.setRGB(x,y,image.getRGB(Long.valueOf(rx).intValue(),Long.valueOf(ry).intValue())); else         biOut.setRGB(x,y,0);      }    }  }  values.setValue(AVKey.IMAGE,biOut);}  }
class C{  public static <T>Stream<T> publishStream(Publisher<T> publisher){  SeqSubscriber<T> sub=SeqSubscriber.subscriber();  publisher.subscribe(sub);  return Stream.ofAll(sub.stream());}  }
class C{  public void loadSchema(Document schemaDocument){  schemaBuilder.build(schemaDocument);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void resetUi(boolean showBackgroundImage){  if (null != mWaitWhileSearchInProgressView) {    mWaitWhileSearchInProgressView.setVisibility(View.GONE);  }  if (null != mBackgroundImageView) {    mBackgroundImageView.setVisibility(showBackgroundImage ? View.VISIBLE : View.GONE);  }  if (null != mNoResultsTxtView) {    mNoResultsTxtView.setVisibility(View.GONE);  }  if (null != mLoadOldestContentView) {    mLoadOldestContentView.setVisibility(View.GONE);  }}  }
class C{  public void checkBlocksizeE(final int value){  if (value > blocksize_E) {    this.blocksize_E=value;  }  this.countE++;}  }
class C{  public void deleteCustomCatalog(int index){  if (index < customCatalogs.size()) {    customCatalogs.remove(index);    fireTableChangedEvent(new TableModelEvent(this));  }}  }
class C{  private void addPingTimeData(long sample){  lastPingTimesLock.lock();  try {    if (lastPingTimes == null) {      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];      Arrays.fill(lastPingTimes,sample);    } else {      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);      lastPingTimes[lastPingTimes.length - 1]=sample;    }  }  finally {    lastPingTimesLock.unlock();  }}  }
class C{  public ProfileVisit userId(String userId){  this.userId=userId;  return this;}  }
class C{  @Override public void buildClassifier(Instances insts) throws Exception {  getCapabilities().testWithFail(insts);  if (m_outputAdditionalStats) {    boolean ok=true;    for (int i=0; i < insts.numInstances(); i++) {      if (insts.instance(i).weight() != 1) {        ok=false;        break;      }    }    if (!ok) {      throw new Exception("Can only compute additional statistics on unweighted data");    }  }  double[] sum=new double[insts.numAttributes()];  double[] count=new double[insts.numAttributes()];  double[] classSumForMissing=new double[insts.numAttributes()];  double[] classSumSquaredForMissing=new double[insts.numAttributes()];  double classCount=0;  double classSum=0;  for (int j=0; j < insts.numInstances(); j++) {    Instance inst=insts.instance(j);    if (!inst.classIsMissing()) {      for (int i=0; i < insts.numAttributes(); i++) {        if (!inst.isMissing(i)) {          sum[i]+=inst.weight() * inst.value(i);          count[i]+=inst.weight();        } else {          classSumForMissing[i]+=inst.classValue() * inst.weight();          classSumSquaredForMissing[i]+=inst.classValue() * inst.classValue() * inst.weight();        }      }      classCount+=inst.weight();      classSum+=inst.weight() * inst.classValue();    }  }  double[] mean=new double[insts.numAttributes()];  double[] classMeanForMissing=new double[insts.numAttributes()];  double[] classMeanForKnown=new double[insts.numAttributes()];  for (int i=0; i < insts.numAttributes(); i++) {    if (i != insts.classIndex()) {      if (count[i] > 0) {        mean[i]=sum[i] / count[i];      }      if (classCount - count[i] > 0) {        classMeanForMissing[i]=classSumForMissing[i] / (classCount - count[i]);      }      if (count[i] > 0) {        classMeanForKnown[i]=(classSum - classSumForMissing[i]) / count[i];      }    }  }  sum=null;  count=null;  double[] slopes=new double[insts.numAttributes()];  double[] sumWeightedDiffsSquared=new double[insts.numAttributes()];  double[] sumWeightedClassDiffsSquared=new double[insts.numAttributes()];  for (int j=0; j < insts.numInstances(); j++) {    Instance inst=insts.instance(j);    if (!inst.classIsMissing()) {      for (int i=0; i < insts.numAttributes(); i++) {        if (!inst.isMissing(i) && (i != insts.classIndex())) {          double yDiff=inst.classValue() - classMeanForKnown[i];          double weightedYDiff=inst.weight() * yDiff;          double diff=inst.value(i) - mean[i];          double weightedDiff=inst.weight() * diff;          slopes[i]+=weightedYDiff * diff;          sumWeightedDiffsSquared[i]+=weightedDiff * diff;          sumWeightedClassDiffsSquared[i]+=weightedYDiff * yDiff;        }      }    }  }  double minSSE=Double.MAX_VALUE;  m_attribute=null;  int chosen=-1;  double chosenSlope=Double.NaN;  double chosenIntercept=Double.NaN;  double chosenMeanForMissing=Double.NaN;  for (int i=0; i < insts.numAttributes(); i++) {    double sseForMissing=classSumSquaredForMissing[i] - (classSumForMissing[i] * classMeanForMissing[i]);    if ((i == insts.classIndex()) || (sumWeightedDiffsSquared[i] == 0)) {      continue;    }    double numerator=slopes[i];    slopes[i]/=sumWeightedDiffsSquared[i];    double intercept=classMeanForKnown[i] - slopes[i] * mean[i];    double sse=sumWeightedClassDiffsSquared[i] - slopes[i] * numerator;    sse+=sseForMissing;    if (sse < minSSE) {      minSSE=sse;      chosen=i;      chosenSlope=slopes[i];      chosenIntercept=intercept;      chosenMeanForMissing=classMeanForMissing[i];    }  }  if (chosen == -1) {    if (!m_suppressErrorMessage) {      System.err.println("----- no useful attribute found");    }    m_attribute=null;    m_attributeIndex=0;    m_slope=0;    m_intercept=classSum / classCount;    m_classMeanForMissing=0;  } else {    m_attribute=insts.attribute(chosen);    m_attributeIndex=chosen;    m_slope=chosenSlope;    m_intercept=chosenIntercept;    m_classMeanForMissing=chosenMeanForMissing;    if (m_outputAdditionalStats) {      Instances newInsts=new Instances(insts,insts.numInstances());      for (int i=0; i < insts.numInstances(); i++) {        Instance inst=insts.instance(i);        if (!inst.classIsMissing() && !inst.isMissing(m_attributeIndex)) {          newInsts.add(inst);        }      }      insts=newInsts;      m_df=insts.numInstances() - 2;      double[] stdErrors=RegressionAnalysis.calculateStdErrorOfCoef(insts,m_attribute,m_slope,m_intercept,m_df);      m_seSlope=stdErrors[0];      m_seIntercept=stdErrors[1];      double[] coef=new double[2];      coef[0]=m_slope;      coef[1]=m_intercept;      double[] tStats=RegressionAnalysis.calculateTStats(coef,stdErrors,2);      m_tstatSlope=tStats[0];      m_tstatIntercept=tStats[1];      double ssr=RegressionAnalysis.calculateSSR(insts,m_attribute,m_slope,m_intercept);      m_rsquared=RegressionAnalysis.calculateRSquared(insts,ssr);      m_rsquaredAdj=RegressionAnalysis.calculateAdjRSquared(m_rsquared,insts.numInstances(),2);      m_fstat=RegressionAnalysis.calculateFStat(m_rsquared,insts.numInstances(),2);    }  }}  }
class C{  void purgeOrphanedArticles(){  if (!isDBAvailable())   return;  long time=System.currentTimeMillis();  safelyDeleteArticles("feedId NOT IN (SELECT _id FROM " + TABLE_FEEDS + ")",null);  Log.d(TAG,"purgeOrphanedArticles took " + (System.currentTimeMillis() - time) + "ms");}  }
class C{  private static List<HashMap<String,String>> statementCompare(List<QueryModelNode> qArray,List<QueryModelNode> iArray,List<HashMap<String,String>> hMaps,TreeMap<String,Integer>[] trees){  if (hMaps.size() == 0) {    HashMap<HashMap<String,String>,Boolean> mapConsistent=new HashMap<HashMap<String,String>,Boolean>();    HashMap<String,String> hMap=new HashMap<String,String>();    mapConsistent.put(hMap,false);    evaluateMap(qArray,iArray,hMap,hMaps,mapConsistent,trees);    return hMaps;  } else {    ArrayList<HashMap<String,String>> tempMaps=Lists.newArrayList(hMaps);    HashMap<HashMap<String,String>,Boolean> mapConsistent=new HashMap<HashMap<String,String>,Boolean>();    for (    HashMap<String,String> s : hMaps) {      mapConsistent.put(s,false);    }    for (    HashMap<String,String> s : hMaps) {      evaluateMap(qArray,iArray,s,tempMaps,mapConsistent,trees);    }    return tempMaps;  }}  }
class C{  private static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  private <T>boolean tryAdd(ConcurrentHashMultiset<T> multiset,T value,int max){  while (true) {    int count=multiset.count(value);    if (count >= max && max != 0)     return false;    if (multiset.setCount(value,count,count + 1))     return true;  }}  }
class C{  public BufferedBlockCipher(BlockCipher cipher){  this.cipher=cipher;  buf=new byte[cipher.getBlockSize()];  bufOff=0;  String name=cipher.getAlgorithmName();  int idx=name.indexOf('/') + 1;  pgpCFB=(idx > 0 && name.startsWith("PGP",idx));  if (pgpCFB) {    partialBlockOkay=true;  } else {    partialBlockOkay=(idx > 0 && (name.startsWith("CFB",idx) || name.startsWith("OFB",idx) || name.startsWith("OpenPGP",idx)|| name.startsWith("SIC",idx)|| name.startsWith("GCTR",idx)));  }}  }
class C{  public List<XmlDom> children(String tag,String attr,String value){  return convert(root.getChildNodes(),tag,attr,value);}  }
class C{  @Override default CompletableFuture<IntSummaryStatistics> summaryStatisticsInt(final ToIntFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  @Override public double standardDeviation(){  return Double.NaN;}  }
class C{  public int byteAt(final int i){  return this.buffer[i];}  }
class C{  public ProxyFactory<I> listener(JListener listener){  if (invokeType != CALLBACK) {    throw new UnsupportedOperationException("InvokeType should first be set to CALLBACK");  }  this.listener=listener;  return this;}  }
class C{  public boolean isMotorEnabled(){  return this.motorEnabled;}  }
class C{  public void addAttributeCertificates(X509Store store) throws CMSException {  try {    for (Iterator it=store.getMatches(null).iterator(); it.hasNext(); ) {      X509AttributeCertificate attrCert=(X509AttributeCertificate)it.next();      certs.add(new DERTaggedObject(false,2,AttributeCertificate.getInstance(ASN1Primitive.fromByteArray(attrCert.getEncoded()))));    }  } catch (  IllegalArgumentException e) {    throw new CMSException("error processing attribute certs",e);  }catch (  IOException e) {    throw new CMSException("error processing attribute certs",e);  }}  }
class C{  public final String showPrompt(String message){  return null;}  }
class C{  void disable(){synchronized (this) {    mIsEnable=false;  }}  }
class C{  public LabelButtonFieldEditor(String name,String labelText,Composite parent,String buttonText,SelectionListener buttonSelectionListener){  init(name,labelText);  this.labelText=labelText;  this.buttonText=buttonText;  this.buttonSelectionListener=buttonSelectionListener;  createControl(parent);}  }
class C{  private RemoteOperationResult refreshSharesForFolder(OwnCloudClient client){  RemoteOperationResult result=null;  GetRemoteSharesForFileOperation operation=new GetRemoteSharesForFileOperation(mLocalFolder.getRemotePath(),true,true);  result=operation.execute(client);  if (result.isSuccess()) {    ArrayList<OCShare> shares=new ArrayList<OCShare>();    for (    Object obj : result.getData()) {      shares.add((OCShare)obj);    }    mStorageManager.saveSharesInFolder(shares,mLocalFolder);  }  return result;}  }
class C{  public static <T1,T2,T3,R>TriFunction<T1,T2,T3,R> memoizeTriFunction(final TriFunction<T1,T2,T3,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  public ActionEvent(@NotNull String place,@NotNull Presentation presentation,@NotNull ActionManager actionManager,int modifiers,@Nullable Map<String,String> parameters){  myActionManager=actionManager;  myPlace=place;  myPresentation=presentation;  myModifiers=modifiers;  myParameters=parameters;}  }
class C{  public void removeCurrentSelectedItems(){  for (  Entity item : currentSelection) {    followersUIMediator.removeFollower(item);    sandbox.getEngine().removeEntity(item);  }  currentSelection.clear();}  }
class C{  public void startInternalActivity(Intent intent,boolean requireBackStack){  helper.startInternalActivity(intent,requireBackStack);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringnegativeoffset.class,args);}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarBorder(context,g,x,y,w,h);}  }
class C{  public final boolean isEarlier(){  return earlier;}  }
class C{  public synchronized boolean writeRecord(LogRecord record,int logFileSize) throws IOException, InterruptedException, ReplicatorException {  assertWriteMode();  dataOutput.writeInt((int)record.getRecordLength());  dataOutput.write(record.getData());  dataOutput.writeByte(record.getCrcType());  dataOutput.writeLong(record.getCrc());  needsFlush=true;  if (logFileSize > 0 && dataOutput.getOffset() > logFileSize)   return true; else   return false;}  }
class C{  protected void appendPunctation(final SentenceBuilder builder){  if (sentenceType == SentenceType.STATEMENT) {    builder.append('.');  } else   if (sentenceType == SentenceType.IMPERATIVE) {    builder.append('!');  } else   if (sentenceType == SentenceType.QUESTION) {    builder.append('?');  }}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  String key;  Iterator<String> keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public synchronized boolean isNew(long x){switch (format) {case NORMAL:    int idx=(int)(x >>> _64minusp);  long w=x & pmask;byte rho=rho(w,_64minusp);byte prho=getRho(idx);if (prho < rho) {return true;}return false;case SPARSE:int k=encodeHash(x);idx=decodeIndex(k,pprime);for (int i=0; i < tmp_set_idx; i++) {int pidx=decodeIndex(tmp_set[i],pprime);if (pidx != idx) {continue;}if (tmp_set[i] < k) {return false;}}boolean sparsenew=false;if (0 != sparse_list.length) {ByteBuffer bb=ByteBuffer.wrap(sparse_list).order(ByteOrder.BIG_ENDIAN);int lastvalue=0;while (bb.hasRemaining()) {if (0 == bb.position()) {lastvalue=(int)Varint.decodeSignedLong(bb);} else {int delta=(int)Varint.decodeUnsignedLong(bb);lastvalue+=delta;}int pidx=decodeIndex(lastvalue,pprime);if (pidx != idx) {continue;}if (k < lastvalue) {return true;} else {return false;}}return true;} else {return true;}default :return true;}}  }
class C{  public boolean blockedByCurrentThread(){  return lock.writeLock().isHeldByCurrentThread();}  }
class C{  synchronized void receive(byte b[],int off,int len) throws IOException {  checkStateForReceive();  writeSide=Thread.currentThread();  int bytesToTransfer=len;  while (bytesToTransfer > 0) {    if (in == out)     awaitSpace();    int nextTransferAmount=0;    if (out < in) {      nextTransferAmount=buffer.length - in;    } else     if (in < out) {      if (in == -1) {        in=out=0;        nextTransferAmount=buffer.length - in;      } else {        nextTransferAmount=out - in;      }    }    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;    assert (nextTransferAmount > 0);    System.arraycopy(b,off,buffer,in,nextTransferAmount);    bytesToTransfer-=nextTransferAmount;    off+=nextTransferAmount;    in+=nextTransferAmount;    if (in >= buffer.length) {      in=0;    }  }}  }
class C{  public void removeListener(Listener<RealBuffer> listener){  mListener=null;}  }
class C{  public static void tagSelectedNodes(final JFrame parent,final ZyGraph graph,final CTag tag){  final Collection<NaviNode> selectedNodes=graph.getSelectedNodes();  try {    for (    final NaviNode node : selectedNodes) {      node.getRawNode().tagNode(tag);    }  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00134: " + "Could not tag selected nodes";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The selected nodes could not be tagged with the tag '%s'.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"Some nodes were tagged while other remain untagged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  private static Integer mergeAmount(final Integer left,final Integer right){  if (left != null) {    if (right != null) {      if (left <= right) {        return left * right;      } else {        return left + right;      }    } else {      return left;    }  } else {    return right;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PointerNeedle)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double pitElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      DEMHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette(DEM.getPreferredPalette());    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pntr.getValue(row,col);        if (output.getValue(row,col) == -999 && flowDir != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) != -999) {                pitElev=DEM.getValue(y,x) - output.getValue(y,x);                flag=true;              }            } else {              pitElev=DEM.getValue(y,x);              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          do {            z=DEM.getValue(y,x) - pitElev;            output.setValue(y,x,z);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              output.setValue(y,x,0);              flag=true;            }          } while (!flag);        } else         if (flowDir == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.766 -0500",hash_original_method="CE0E4353FCA63B39E00F0F1C4B7BFC83",hash_generated_method="D2E9DC52851AEA20301E0C4311780C12") public void clear(String timezone){  if (timezone == null) {    throw new NullPointerException("timezone is null!");  }  this.timezone=timezone;  this.allDay=false;  this.second=0;  this.minute=0;  this.hour=0;  this.monthDay=0;  this.month=0;  this.year=0;  this.weekDay=0;  this.yearDay=0;  this.gmtoff=0;  this.isDst=-1;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,byte[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  private CompletableFuture<Void> commitInitialEntries(){  CompletableFuture<Void> future=new CompletableFuture<>();  appender.appendEntries(appender.index()).whenComplete(null);  return future;}  }
class C{  LanguageTagSyntaxException(String msg){  super(msg);}  }
class C{  public void addMethodProperty(String name,String accessorMethod){  methodProperties.add(new LegacyMethodPropDesc(name,accessorMethod));}  }
class C{  private BusinessObjectDefinitionTag createBusinessObjectDefinitionTagFromEntity(BusinessObjectDefinitionTagEntity businessObjectDefinitionTagEntity){  return new BusinessObjectDefinitionTag(businessObjectDefinitionTagEntity.getId(),getBusinessObjectDefinitionTagKey(businessObjectDefinitionTagEntity));}  }
class C{  public MockNioSession(InetSocketAddress locAddr,InetSocketAddress rmtAddr){  this();  this.locAddr=locAddr;  this.rmtAddr=rmtAddr;}  }
class C{  public static Long[] nullToEmpty(Long[] array){  if (array == null || array.length == 0) {    return EMPTY_LONG_OBJECT_ARRAY;  }  return array;}  }
class C{  public static int yearFromDateValue(long x){  return (int)(x >>> SHIFT_YEAR);}  }
class C{  public static double cuCabs(cuDoubleComplex x){  double p=cuCreal(x);  double q=cuCimag(x);  double r;  if (p == 0)   return q;  if (q == 0)   return p;  p=Math.sqrt(p);  q=Math.sqrt(q);  if (p < q) {    r=p;    p=q;    q=r;  }  r=q / p;  return p * Math.sqrt(1.0f + r * r);}  }
class C{  public boolean isShorterThan(ReadableDuration duration){  if (duration == null) {    duration=Duration.ZERO;  }  return compareTo(duration) < 0;}  }
class C{  public void animateHierarchyFadeAndWait(final int duration,int startingOpacity){  animateHierarchy(duration,true,startingOpacity,true);}  }
class C{  private static void parseComplexType(Element complexTypeNode,String name,Element bodyNode,Element xformSchemaNode,Hashtable bindings,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  if (name.equals("patient_relationship_section") || name.equals("relative_section"))   return;  String orgName=name;  name=getBindNodeName(name);  if (name == null)   return;  Element labelNode=null, bindNode=(Element)bindings.get(name);  if (bindNode == null) {    if (name.equals("problem_list"))     ;    String binding=repeatChildTypes.get(orgName);    if (binding != null) {      name=binding;      bindNode=(Element)bindings.get(binding);    } else     return;  }  boolean repeatItem=false;  Element lblNode=null;  String nameAttributeValue=complexTypeNode.getAttributeValue(null,"name");  if (problemList.contains(name)) {    lblNode=addProblemListSection(name,bodyNode,repeatControls,modelNode);    repeatItem=true;  }  for (int i=0; i < complexTypeNode.getChildCount(); i++) {    if (complexTypeNode.isText(i))     continue;    Element node=(Element)complexTypeNode.getChild(i);    if (node.getName().equalsIgnoreCase(NODE_SEQUENCE))     labelNode=parseSequenceNode(name,node,bodyNode,xformSchemaNode,bindNode,problemList,problemListItems,repeatControls,repeatItem,modelNode);    if (repeatItem)     labelNode=lblNode;    if (labelNode != null && isNodeWithConceptNameAndId(node))     addLabelTextAndHint(labelNode,node); else     if (isNodeWithDataType(node)) {      setDataType(bindNode,node);      List<String> bindingList=sharedRestrictions.get(name);      if (bindingList != null) {        for (        String binding : bindingList) {          Element bindingNode=(Element)bindings.get(binding);          if (bindingNode == null)           continue;          setDataType(bindingNode,node);        }      }    }  }}  }
class C{  private static void SetStaticShortField(JNIEnvironment env,int classJREF,int fieldID,short fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticShortField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setShortValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected void addSupportedService(UUID aSupportedService){  mSupportedServices.add(aSupportedService);}  }
class C{  public EventFeed(){  super(KEY);  addCategory(CATEGORY);}  }
class C{  public Amount subtract(final Amount amount){  return new Amount(this.getNumMicroNem() - amount.getNumMicroNem());}  }
class C{  public static Timestamp startCalendar(Container jc,Timestamp value,SimpleDateFormat format,int displayType,String title){  log.config("Date=" + value);  Frame frame=Env.getFrame(jc);  Calendar cal=new Calendar(frame,title,value,displayType);  AEnv.showCenterWindow(frame,cal);  Timestamp result=cal.getTimestamp();  log.config("Result=" + result);  if (result == null)   result=value; else   if (result.compareTo(new Timestamp(-1)) == 0)   result=null;  cal=null;  return result;}  }
class C{  protected void addRange(TextPresentation presentation,int offset,int length,TextAttribute attr){  if (attr != null)   presentation.addStyleRange(new StyleRange(offset,length,attr.getForeground(),attr.getBackground(),attr.getStyle()));}  }
class C{  @Inline public static Word poison(ObjectReference reference){  return reference.toAddress().toWord().or(Word.one());}  }
class C{  public void verify(PublicKey key,String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  try {    wrappedCert.verify(key,sigProvider);  } catch (  java.security.cert.CertificateException e) {    throw new CertificateException(e.getMessage());  }}  }
class C{  public void analyseCode(ClassScope currentScope,FlowContext flowContext,FlowInfo flowInfo){  if (this.ignoreFurtherInvestigation)   return;  try {    if ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {      this.bits|=ASTNode.IsReachable;      LocalTypeBinding localType=(LocalTypeBinding)this.binding;      localType.setConstantPoolName(currentScope.compilationUnitScope().computeConstantPoolName(localType));    }    manageEnclosingInstanceAccessIfNecessary(currentScope,flowInfo);    updateMaxFieldCount();    internalAnalyseCode(flowContext,flowInfo);  } catch (  AbortType e) {    this.ignoreFurtherInvestigation=true;  }}  }
class C{  public BenchmarkConfig(String yamlFile) throws FileNotFoundException {  this(yamlToParameters(yamlFile));}  }
class C{  public void testSize2IsolatedMode() throws Exception {}  }
class C{  private WebSessionV2 createSessionV2(final HttpSession ses,final String sesId) throws IOException {  assert ses != null;  assert sesId != null;  WebSessionV2 cached=new WebSessionV2(sesId,ses,true,ctx,null,marshaller);  final WebSessionEntity marshaledEntity=cached.marshalAttributes();  for (int i=0; i < retries; i++) {    try {      final IgniteCache<String,WebSessionEntity> cache0=cacheWithExpiryPolicy(cached.getMaxInactiveInterval(),binaryCache);      final WebSessionEntity old=cache0.getAndPutIfAbsent(sesId,marshaledEntity);      if (old != null)       cached=new WebSessionV2(sesId,ses,false,ctx,old,marshaller); else       cached=new WebSessionV2(sesId,ses,false,ctx,marshaledEntity,marshaller);      break;    } catch (    CacheException|IgniteException|IllegalStateException e) {      handleCreateSessionException(sesId,i,e);    }  }  return cached;}  }
class C{  public void addInitDrawerCallback(Callback<Void,Boolean> callBack){  callBacks.add(callBack);}  }
class C{  public static Observable<Integer> fromIterable(Iterable<Integer> it){  return Observable.create(null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  String commentName;  String commentValue;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    commentName=commentNode.getNodeName();    if (equals("#comment",commentName)) {      commentValue=commentNode.getNodeValue();      assertEquals("value"," This is comment number 1.",commentValue);    }  }}  }
class C{  public SSLSocketFactory sslSocketFactory(){  return sslSocketFactory;}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public void parseAnswerByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  float correctness=1.0f;  if (stream.peek() == ':') {    stream.skip();    stream.skipWhitespace();    if (Character.isDigit(stream.peek())) {      String correctnessText=stream.nextWord();      try {        correctness=Float.valueOf(correctnessText);      } catch (      NumberFormatException exception) {        throw new SelfParseException("Invalid correctness: " + correctnessText,stream);      }    }  }  dataStream.writeLong(network.createVertex(Primitive.QUOTIENT).getId());  dataStream.writeFloat(correctness);  parseElementByteCode(stream,dataStream,elements,debug,network);  stream.skipWhitespace();  if (stream.peek() == '{') {    stream.skip();    String next=stream.nextWord();    dataStream.writeLong(network.createVertex(Primitive.PREVIOUS).getId());    while (!("}".equals(next))) {      if (next == null) {        throw new SelfParseException("Unexpected end of quotient, missing '}'",stream);      }      next=next.toLowerCase();      if (!(PREVIOUS.equals(next))) {        throw new SelfParseException("Unexpected word: '" + next + "' expected 'PREVIOUS'",stream);      }      next=stream.peekWord();      if (NOT.equals(next)) {        dataStream.writeLong(network.createVertex(Primitive.NOT).getId());        stream.nextWord();      }      parseElementByteCode(stream,dataStream,elements,debug,network);      ensureNext(';',stream);      next=stream.nextWord();    }    dataStream.writeLong(0l);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public static RecipeManaInfusion registerMiniSubTile(String key,Class<? extends SubTileEntity> subtileClass,String original){  registerSubTile(key,subtileClass);  miniFlowers.put(original,key);  RecipeMiniFlower recipe=new RecipeMiniFlower(key,original,2500);  manaInfusionRecipes.add(recipe);  miniFlowerRecipes.add(recipe);  return recipe;}  }
class C{  public ActiveStateReferenceExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Intent compile(){  AppStaticContext.introFragmentModelArrayList=introFragmentModelList;  AppStaticContext.onFragmentChangedListener=onFragmentChangedListener;  AppStaticContext.onIntroductionFinishedListener=onIntroductionFinishedListener;  AppStaticContext.pageTransformer=pageTransformer;  AppStaticContext.customImageLoader=customImageLoader;  AppStaticContext.callerContext=mContext;  XintroActivity xintroActivity=new XintroActivity();  Intent intent=new Intent(mContext,xintroActivity.getClass());  return intent;}  }
class C{  public static List<Date> computeFireTimesBetween(OperableTrigger trigg,org.quartz.Calendar cal,Date from,Date to){  LinkedList<Date> lst=new LinkedList<Date>();  OperableTrigger t=(OperableTrigger)trigg.clone();  if (t.getNextFireTime() == null) {    t.setStartTime(from);    t.setEndTime(to);    t.computeFirstFireTime(cal);  }  while (true) {    Date d=t.getNextFireTime();    if (d != null) {      if (d.before(from)) {        t.triggered(cal);        continue;      }      if (d.after(to)) {        break;      }      lst.add(d);      t.triggered(cal);    } else {      break;    }  }  return java.util.Collections.unmodifiableList(lst);}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600 baud"};}  }
class C{  private JMessageDialog(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  @Override public void stop(){  if (m_listenee != null) {    if (m_listenee instanceof BeanCommon) {      ((BeanCommon)m_listenee).stop();    }  }  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Stopped");  }  m_busy=false;}  }
class C{  public boolean stop(String serverID){  AdempiereServer server=getServer(serverID);  if (server == null)   return false;  if (!server.isAlive())   return true;  try {    server.interrupt();    Thread.sleep(10);  } catch (  Exception e) {    log.log(Level.SEVERE,"stop",e);    return false;  }  log.info(server.toString());  AdempiereServerGroup.get().dump();  return !server.isAlive();}  }
class C{  public void zoomTo(BoundingBox boundingBox){  if (boundingBox.projected()) {    throw new IllegalArgumentException("boundingBox should be wg84 format");  }  Dimension dimension=null;  if (getWidth() == 0 || getHeight() == 0) {    dimension=getPreferredSize();  } else {    dimension=new Dimension(getWidth(),getHeight());  }  final BoundingBox projectedBBOX=_map.projection().fromWGS84(boundingBox);  Tile tile=new Tile(dimension,projectedBBOX,null);  _zoom=_map.maxZoomFor(tile);  _center=tile.position(tile.dimension().getWidth() / 2,tile.dimension().getHeight() / 2);  _needTiles=true;  super.repaint();}  }
class C{  public Object put(int key,Object value){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      Object old=e.value;      e.value=value;      return old;    }  }  if (count >= threshold) {    rehash();    tab=table;    index=(hash & 0x7FFFFFFF) % tab.length;  }  Entry e=new Entry(hash,key,value,tab[index]);  tab[index]=e;  count++;  return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.SYMBOL_TABLE__ENTRIES:    return ((InternalEList<?>)getEntries()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isDeclared(){  return isDeclared;}  }
class C{  public ProviderMismatchException(String msg){  super(msg);}  }
class C{  public boolean sendMessageViaCloudSync(String sender,String recipient,String recipientName,String subject,String plainTextBody){  ConnectionRequest r=createMessage(sender,recipient,recipientName,subject,plainTextBody);  r.setFailSilently(true);  NetworkManager.getInstance().addToQueueAndWait(r);  return r.getResposeCode() == 200;}  }
class C{  public static HashMap<String,String> string2Map(String in,String delimEntry,String delimKey,boolean doStripEntry){  if (in == null) {    return null;  }  HashMap<String,String> out=new HashMap<String,String>();  if (isEmpty(delimEntry) || isEmpty(delimKey)) {    out.put(strip(in),"");    return out;  }  Iterator<String> it=string2List(in,delimEntry,false).iterator();  int len=delimKey.length();  while (it.hasNext()) {    String entry=it.next();    int pos=entry.indexOf(delimKey);    if (pos > 0) {      String value=entry.substring(pos + len);      if (doStripEntry) {        value=strip(value);      }      out.put(strip(entry.substring(0,pos)),value);    } else {      out.put(strip(entry),"");    }  }  return out;}  }
class C{  public URLExt(URL url,boolean is_directory,String name){  this.setUrl(url);  this.setDirectory(is_directory);  if (name == null) {    String path=url.getPath();    if (path.endsWith("/")) {      path=path.substring(0,path.length() - 1);    }    int lastslash=path.lastIndexOf('/');    if (lastslash != -1)     name=path.substring(lastslash);    int zipind=name.lastIndexOf(".zip");    if (zipind != -1)     name=name.substring(0,zipind);  }  this.name=name;}  }
class C{  public static void main(String[] argv){  runClassifier(new LMT(),argv);}  }
class C{  protected void initializeValues(){  mIsRendererCreated=false;  mIsValidForCameraAnimation=false;  mInternalCameraListener=new PLInternalCameraListener(this);  mAnimationInterval=PLConstants.kDefaultAnimationTimerInterval;  mAnimationFrameInterval=PLConstants.kDefaultAnimationFrameInterval;  mIsAnimating=false;  mStartPoint=CGPoint.CGPointMake(0.0f,0.0f);  mEndPoint=CGPoint.CGPointMake(0.0f,0.0f);  mAuxiliarStartPoint=CGPoint.CGPointMake(0.0f,0.0f);  mAuxiliarEndPoint=CGPoint.CGPointMake(0.0f,0.0f);  mIsAccelerometerEnabled=false;  mIsAccelerometerLeftRightEnabled=mIsAccelerometerUpDownEnabled=true;  mAccelerometerInterval=PLConstants.kDefaultAccelerometerInterval;  mAccelerometerSensitivity=PLConstants.kDefaultAccelerometerSensitivity;  mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeUnknow;  mIsScrollingEnabled=false;  mMinDistanceToEnableScrolling=PLConstants.kDefaultMinDistanceToEnableScrolling;  mMinDistanceToEnableDrawing=PLConstants.kDefaultMinDistanceToEnableDrawing;  mIsInertiaEnabled=false;  mInertiaInterval=PLConstants.kDefaultInertiaInterval;  mIsResetEnabled=true;  mIsShakeResetEnabled=false;  mNumberOfTouchesForReset=PLConstants.kDefaultNumberOfTouchesForReset;  mShakeData=PLShakeData.PLShakeDataMake(0);  mShakeThreshold=PLConstants.kShakeThreshold;  mIsValidForTransition=false;  mTouchStatus=PLTouchStatus.PLTouchStatusNone;  mCurrentDeviceOrientation=UIDeviceOrientation.UIDeviceOrientationPortrait;  mFileDownloaderManager=new PLFileDownloaderManager();  this.reset();  this.setPanorama(new PLBlankPanorama());}  }
class C{  public DOMMouseOutEventListener(){}  }
class C{  public ResultMatrixPlainText(){  this(1,1);}  }
class C{  @Override public void apply(World world,Entity entity,Random random,Object data){  final int index=random.nextInt(effects.size());  final IEffect effect=effects.get(index);  if (effect != null)   effect.apply(world,entity,random,data);}  }
class C{  @Override public Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException {  ObjectMapper mapper=locateMapper(type,mediaType);  JsonParser jp=mapper.getJsonFactory().createJsonParser(entityStream);  jp.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);  return mapper.readValue(jp,mapper.constructType(genericType));}  }
class C{  protected boolean matchesTarget(Vertex match,Vertex type,Vertex target,Map<Vertex,Vertex> variables){  List<Relationship> targets=match.orderedRelationshipsByConsciousness(type);  if (targets != null) {    for (    Relationship targetMatch : targets) {      if (!targetMatch.isInverse() && (target.matches(targetMatch.getTarget(),variables) == Boolean.TRUE)) {        return true;      }    }  }  return false;}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort){  return learnEntity(macAddress,vlan,ipv4Address,switchDPID,switchPort,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String prop=getString(stack);  Playlist p=getPlaylist(stack);  return (p == null) ? "" : p.getProperty(prop);}  }
class C{  public Symbol(int declType,String name){  setName(name);  setDeclType(declType);}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2,Object o3,Object o4,Object o5,Object o6,Object o7){  requireNonNulls(o0,o1,o2,o3,o4);  if (o5 == null) {    throw new NullPointerException(SIXTH_ARG_IS_NULL);  }  if (o6 == null) {    throw new NullPointerException(SEVENTH_ARG_IS_NULL);  }  if (o7 == null) {    throw new NullPointerException(EIGHT_ARG_IS_NULL);  }}  }
class C{  public String usernameTipText(){  return "The user to use for connecting to the database.";}  }
class C{  public ErrorReporter(Throwable e){  this.base=e;}  }
class C{  public static final int numberOfState(int[] statuses) throws IllegalArgumentException {  if (statuses.length != NUMBER_OF_PROVERS) {    throw new IllegalArgumentException("Wrong number of provers specified");  }  int multiplier=1;  int result=2;  for (int i=0; i < NUMBER_OF_PROVERS; i++) {    if (statuses[i] >= PROVER_STATUSES[i].length || statuses[i] < 0) {      throw new IllegalArgumentException("Prover " + PROVER_NAMES[i] + " does not have status number "+ statuses[i]);    }    result=result + multiplier * statuses[i];    multiplier=multiplier * PROVER_STATUSES[i].length;  }  return result;}  }
class C{  protected void sendError(HttpServletResponse response,String message) throws IOException {  PrintWriter writer=response.getWriter();  writer.println("Error - " + message);}  }
class C{  public void removeRow(Assignment head){  table.remove(head);}  }
class C{  private void handleOverriddenMethods(RVMClass c){  if (c.isJavaLangObjectType() || c.isInterface())   return;  RVMClass sc=c.getSuperClass();  RVMMethod[] sc_methods=sc.getVirtualMethods();  RVMMethod[] c_methods=c.getVirtualMethods();  for (int i=0; i < sc_methods.length; i++) {    if (sc_methods[i] != c_methods[i]) {      processOverride(sc_methods[i]);    }  }  for (  RVMClass intf : c.getAllImplementedInterfaces()) {    for (    RVMMethod m : intf.getVirtualMethods()) {      processOverride(m);    }  }}  }
class C{  public void projectionChanged(ProjectionEvent pe){  Logger logger=getLogger();  if (layer != null) {    Projection proj=layer.setProjection(pe);    if (proj != null) {      if (logger.isLoggable(Level.FINE)) {        logger.fine(getLayer().getName() + ": projectionChanged with NEW projection, resetting list.");      }      if (layer.getList() != null) {        layer.setList(new OMGraphicList());      }      if (layer.isProjectionOK(proj)) {        layer.doPrepare();      }    } else {      if (logger.isLoggable(Level.FINE)) {        logger.fine(getLayer().getName() + ": projectionChanged with OLD projection, repainting.");      }      if (!layer.isWorking()) {        layer.repaint();        layer.fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);      }    }  } else {    logger.warning("NULL layer, can't do anything.");  }}  }
class C{  public CHierarchicPanel(final ZyGraphViewSettings settings){  super(new GridLayout(6,1));  Preconditions.checkNotNull(settings,"IE01589: Settings argument can not be null");  setBorder(new TitledBorder("Hierarchic Layout"));  CSettingsPanelBuilder.addComboBox(this,m_cbHierarchicOrientation,"Orientation:","Specifies whether hierarchic graph orientation goes from left to right or " + "from top to bottom.",new String[]{"Vertical","Horizontal"},settings.getLayoutSettings().getHierarchicalSettings().getOrientation().ordinal());  CSettingsPanelBuilder.addComboBox(this,m_cbHierarchicEdgeRoutingStyle,"Edge Routing Style:","Specifies how edges are routed between nodes.",new String[]{"Octlinear Optimal","Orthogonal Optimal","Polyline Optimal","Octlinear Topmost","Orthogonal Topmost","Polyline Topmost","Octlinear Tight Tree","Orthogonal Tight Tree","Polyline Tight Tree","Octlinear BFS","Orthogonal BFS","Polyline BFS"},settings.getLayoutSettings().getHierarchicalSettings().getStyle().ordinal());  CSettingsPanelBuilder.addTextField(this,m_tfHierarchicMinLayerDistance,"Minimum Layer Distance:","Minimum distance between hierarchic graph layers in pixels.",String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumLayerDistance()));  CSettingsPanelBuilder.addTextField(this,m_tfHierarchicMinNodeDistance,"Node to Node Distance:","Minimum distance between nodes in pixels on the same layer.",String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumNodeDistance()));  CSettingsPanelBuilder.addTextField(this,m_tfHierarchicMinEdgeDistance,"Edge to Edge Distance:","Minimum distance between edges in pixels on the same layer.",String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumEdgeDistance()));  CSettingsPanelBuilder.addTextField(this,m_tfHierarchicMinNodeEdgeDistance,"Node to Edge Distance:","Minimum distance between a node and a non-adjacent edge in the same layer",String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumEdgeDistance()));}  }
class C{  public static Object invokeStaticMethod(Class<?> clazz,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeMethod(clazz,clazz,name,parameterTypes,args);}  }
class C{  public void putBridge(String namespaceURI,String localName,Bridge bridge){  if (!(namespaceURI.equals(bridge.getNamespaceURI()) && localName.equals(bridge.getLocalName()))) {    throw new Error("Invalid Bridge: " + namespaceURI + "/"+ bridge.getNamespaceURI()+ " "+ localName+ "/"+ bridge.getLocalName()+ " "+ bridge.getClass());  }  if (namespaceURIMap == null) {    namespaceURIMap=new HashMap();  }  namespaceURI=((namespaceURI == null) ? "" : namespaceURI);  HashMap localNameMap=(HashMap)namespaceURIMap.get(namespaceURI);  if (localNameMap == null) {    localNameMap=new HashMap();    namespaceURIMap.put(namespaceURI,localNameMap);  }  localNameMap.put(localName,bridge);}  }
class C{  public void clear(Context context,String query){  Observable.defer(null).map(null).subscribeOn(mIoScheduler).observeOn(AndroidSchedulers.mainThread()).subscribe(null);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  put(index,new Double(value));  return this;}  }
class C{  public void testSchemasIgnoreSubset() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDo("foobar?,bar*,foo");  rf.setIgnore("foo.test,foobar2,bar23*");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,null,"create database foobar1");  verifyStmtAccept(filterHelper,1,"foo","drop table foo.test2");  verifyStmtAccept(filterHelper,2,"foo","delete from bar2.test where id=2");  verifyStmtIgnore(filterHelper,3,"foo","delete from foo.test where id=2");  verifyStmtIgnore(filterHelper,4,"foo","create table foobar2.foobar1 (id int)");  verifyStmtIgnore(filterHelper,5,"foo","drop database bar234");  filterHelper.done();}  }
